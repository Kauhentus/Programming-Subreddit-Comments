Uh, it's not about being anal. It's about a result that actually means something. X faster means nothing without scale.
Then you haven't seen much php code in the last decade. If I were working on a project with established style guidelines, I'd conform. When it's my stuff, I use what I want. My code is readable, and 2 space indents doesn't detract from that.
&gt;If you suddenly need to output to something other than HTML You missed the point. If you know that you won't ever need to, then that's not even a concern, and it's therefore completely valid to strip that out. &gt;Furthermore, if your sensitization is buggy or the methods change (which has happened with HTML) then you've got problems. In 99% of the cases, rolling you own html sanitiser is an extremely bad idea. You should be using something that is well-tested and is actively being developed. Besides, it is probably a bad idea to accept HTML in the first place. But you're right on the principle, though. Data which is hard to sanitize should be sanitized on output in case the sanitization fails,. Or at the very least, a copy of the original input should be stored somewhere. &gt;At the same time, you shouldn't pre-escape input for inclusion in HTML or SQL since it mangles the data. Uh. No it doesn't. If you're referring to escaping multibyte characters, you are clearly using the wrong technique. &gt;I don't sanitize strings for use in SQL or HTML, I escape them. Sanitization and escaping are not analogous. Escaping is inserting an escape character to prevent the character from being interpreted as something other than a character. Sanitization has a much wider scope, as not only does it make the data safe for consumption, but it can also ensure that only the desirable data from the input remains.
I'm looking for a job right now, but I'm constantly worried about this. I sort of understand NCAs as far as "you're not allowed to work for our competitor for six months or a year" - I don't like them, but I understand them. It's this whole idea that the company owns you outside of your 9-5 that scares the shit out of me. How do you combat this, other than declining the job, which is sort of a non-option for me at the moment?
I use tabs because fuck spaces
&gt; If you know that you won't ever need to, then that's not even a concern, and it's therefore completely valid to strip that out. Nothing worse than an application that strips out angle brackets because someone is paranoid about HTML. Maybe I need to express `x &gt; 10`! &gt; In 99% of the cases, rolling you own html sanitiser is an extremely bad idea. You should be using something that is well-tested and is actively being developed. What does actively developed matter if your using it against the input instead of the output. Once you've sanitized it, it's done. It's stored. It's too late. If tomorrow there's a bug in that well-tested and actively developed sanitizer, are you could to re-apply it to everything you've already sanitized? That's why you sanitize on output. Then it actually matters that it's actively developed. &gt; Besides, it is probably a bad idea to accept HTML in the first place. This is nothing about accepting HTML -- but you should be able to accept the full range of text and that will probably include a few quote characters and some greater-than and less-than signs! &gt; Or at the very least, a copy of the original input should be stored somewhere. If you're already keeping a copy of the original input you might as well just do that and forget the second copy. &gt; Uh. No it doesn't. If you're referring to escaping multibyte characters, you are clearly using the wrong technique. No, I mean if your escaping text for inclusion in SQL queries, HTML, or even the command line it does in fact mangle that string. If you want to work with that string you need a clean copy. &gt; Sanitization and escaping are not analogous. Isn't that what I said? &gt; Sanitization has a much wider scope, as not only does it make the data safe for consumption, but it can also ensure that only the desirable data from the input remains. Sanitization doesn't have a wider scope just a different one. You can just sanitize a string and be able to use it in every situation without destroying some content of that string. It's not possible. Escaping a string makes it safe to use in the situation you are escaping it for. Sanitizing a string just ensures it's valid for whatever conditions you might consider to be valid for that string -- it's actually a narrower scope. 
Same here. Of course my main goal along with the rest of the world is to launch "the next big thing", or just a notably successful/viral startup. And i've never felt closer to that then now; really. But it's a very, very hard decision to make... and i've been stuck on it for a while, personally I don't want to work for someone. I want people to work for me... but I feel that Paypal is one of the very tiny few exceptions if any at all because I've used them entirely for 6+ years now (seriously), and they're obviously not going anywhere any time soon plus the pay would be nice and hopefully so would the environment be. It's just a matter of; 1) No consistent paychecks besides random lump sums on website sales and small time-to-time checks from random affiliate marketing if any; but I continue to increase my chances of becoming the next big thing/work on my current and future projects. 2) Get nice, steady paychecks and get paid 4x+ more than any other kid my age I know.... but work 9-5 in front of a comp. all day, and not be able to devote hardly any time to my own stuff. I just got the email this morning, and I am heavily contemplating my next step if any... I just really don't know.
Big companies have internal recruiters that are just like external recruiters: they match up acronyms and send out lots of emails to people who might vaguely have the qualifications listed in the jobs they're trying to fill. In this case there's a good chance that the match is based purely on the word "Mysql", and you might not have what the position really needs. Often they'll have other positions that might be a better fit. It can't really hurt to pursue it a step further and find out more about it, though.
&gt; checking that the input matches the model for that piece of data That's called validation. There is a small degree of overlap but they are very different things.
If they are anywhere near as shitty to their employees as they are to their customers, run, dont look back, just run...
I get that there are companies you're willing to do this for, and an offer to "get paid 4x+ more than any other kid my age I know" might fall under this category. I'm just really risk-averse, and I worry that I'll start something and it will become "not mine". It's a disincentive for me to upgrade myself, because if I want to release my work, I can't. I'm not saying that I expect *anything* I do to become valuable - I'm not in any particular danger of starting the next Facebook - but I really hate the idea that I'm "on the clock" 24/7/365. I was making ~$20/hr at my last job, working 40 hours a week. If you want to own anything I do while I'm employed by you, then that's ~174k/year to pay me that $20/hr for the entire year. Obviously that's not going to happen. I'm just a paranoid little fuck, and I don't want to sell my every thought.
Thanks :) If could be automation but it seems pretty authentic to me. Addressed me by my first name (granted that could have been scraped) and a few other factors that made it stand out. I am also not worried but just curious as to what I would do, I don't think Paypal utilizes PHP/MySQL but I could be wrong; however that is my pretty much main/only language along with basic JS/JQUERY/AJAX and a few other smaller related talents. I guess the only way to get any further would be to meet with the guy and talk face to face. I don't really have any doubts I can impress them; Im not cocky but this is just something I've been doing solely for quite a long time now and my age and attitude about it all always comes across as a great thing to other companies. At least it has so far!
&gt;What does actively developed matter Seriously? To keep it well-tested and up-to-date with new specifications, bug fixes etc. &gt;if your using it against the input instead of the output. That wasn't at all what I was saying. Did you even read my message? You were saying "if your sanitization is buggy", and I was pointing out that you shouldn't be using your own potentially buggy sanitization methods for things which are really hard to sanitize. It should be something which is public, well-tested, and actively developed. &gt;If you're already keeping a copy of the original input you might as well just do that and forget the second copy. Do you even read comments in full? I said in the very least. The statement directly preceding this one states that you SHOULD be sanitizing on input for things like HTML. The thing is, there are situations where certain sanitizations may take up a lot of resources if done repeatedly over and over, and to keep a cached sanitized copy only makes sense in those cases. &gt;it does in fact mangle that string. If you want to work with that string you need a clean copy. What do you mean by mangle and work with? &gt;You can just sanitize a string and be able to use it in every situation without destroying some content of that string. It's not possible. Sanitization is about removing **undesirable** data from the input. Your argument is self-refuting if you're removing desirable data.
Some more about NCA's. After the your potential employer is excited about hiring you, tell them that you want to read any NCA's/NDA's that you'll have to sign before you accept an offer. Most NCA's aren't that bad or that restrictive. Also, the more restrictive the NCA, the harder time the company will have filling/retaining that position, so they are kind of a double edge sword. I've only signed one NCA in my career and it was very well worded and specific about what I could and couldn't do. I'd avoid any vague contracts or agreements. I don't have any actual experience dealing with the legal side of NCA's but here's what I've heard (maybe others can fill in more details): they don't often stand up in court. If one company takes you to court for working for a competitor, the judge will, most of the time, throw the case out because you have a right to work. I would think the only way you'd be forced out of a job due to an NCA is in the case of an obvious misuse of IP or techniques. Like if you worked at Paypal for a few years and then quit to start your own paypal type payment system.
&gt; Seriously? To keep it well-tested and up-to-date with new specifications, bug fixes etc. What? You just took my entire sentence out of context -- what's the deal? I said "What does actively developed matter **if** your using it against the input instead of the output. Once you've sanitized it, it's done. It's stored. It's too late." I *never* said anything about using your own sanitation methods at all so I don't know why you've spent two replies beat that straw man to death. &gt; The statement directly preceding this one states that you SHOULD be sanitizing on input for things like HTML. I'd like to know how you sanitize for HTML and SQL injection ahead of time rather than at output/query time and expect to get a reasonable result in most cases. &gt; What do you mean by mangle and work with? If you encode HTML, your quotes become &amp;quot; for example. That's mangled. If you strip out all those types of characters that's still mangled. Working with could be as simple as getting the length of the string or doing a substring operation in code. &gt; Sanitization is about removing undesirable data from the input. Fair enough. I sanitize all my input against bad UTF8 encoding, for example. But you can't sanitize your input against HTML tokens or quotes (for SQL injection) unless you have a very small use case. 
&gt;What? You just took my entire sentence out of context No, *you* took mine out of context. I never argued that. &gt;I never said anything about using your own sanitation methods "Furthermore, if your sensitization is buggy". The your in this context is ambiguous. However, buggyness is not characteristic of an active and well-supported project. &gt;If you encode HTML, your quotes become " for example. Then you're doing it wrong. Special characters should be translated into entities. Furthermore, you said "pre-escape" in your original message, not encode, which is not the same thing. I'm not even sure what "*pre-*escape" is supposed to be. Anyway, I don't have the will power to deal with any more of your responses. This discussion has become a pointless waste of time.
&gt; However, buggyness is not characteristic of an active and well-supported project. Bugginess is a characteristic of software. If the project is active, it's probably in fixing bugs. &gt; If you encode HTML, your quotes become " for example. That's not what I wrote. I wrote (without spaces): &amp; q u o t ; -- I guess reddit's markdown parser doesn't let me put literal entities into comments. Seems like a mistake given that these characters &lt; &gt; encode fine. Maybe it's a bug they'll need to fix someday... &gt; I don't have the will power to deal with any more of your responses. Fine. Since you didn't respond to any of the actual points I made in my last reply it's probably safe to assume that you've run out ways to be wrong. 
The [Zend Framework Coding Standards](http://framework.zend.com/manual/en/coding-standard.html) are a great place to start for this sort of information.
&gt;Fine. Since you didn't respond to any of the actual points I made in my last reply it's probably safe to assume that you've run out ways to be wrong. Wow, you're a twat.
Sorry, I have a hard time with people respond and end with "this is pointless waste of time". That's an insulting twat move too. 
[Symfony 2 Contributor Code Standards](http://symfony.com/doc/2.0/contributing/code/standards.html) are excellent. EDIT: The [SF2 Contributor Code Conventions](http://symfony.com/doc/2.0/contributing/code/conventions.html) are also interesting.
I'm just saying the discussion is pointless because it's devolved into nitpicking. I don't have the energy for it, especially when we're both agreeing with each-other, but you're misunderstanding that. 
I've seen lots of code from many authors using various frameworks, or no frameworks at all, from php 4.2 to present. Never seen anyone seriously use 2 spaces. But hey, like I said, to each their own.
Yeah you're right, sorry was bit high and i tend to be a dick when i'm high and assume people will take the same short cut that i do.
Not sure what the down votes are for. This guide is very informative even if you never have or plan on using CodeIgniter.
Symfony standards have been the foundation of introduction to php. I'm obviously biased, but I have no regrets so far. My developer coworkers have no complaints either.
As a business owner and an ex-programmer I want my employees to spend there time in the programming world doing things for me. I don't see people that freelance on the side as completely committed to the company. If the compensation fits you shouldn't have to work outside of your normal job either. 
+1 for CodeIgniter. Its lightweight and has a great community.
&gt; If the compensation fits you shouldn't have to work outside of your normal job either. It's not always about compensation. I can certainly understand not wanting your employees to work for your direct competitors while they're under your employment. I think that's perfectly reasonable. But as long as the work you've assigned to them is getting done on time and is of good quality, then side projects, whether they be personal in nature, or paid, is a great opportunity to learn new skills, which just makes them a more valuable employee. Most good programmers are pretty naturally curious and driven. If you want them to put *all* of that curiosity and drive solely into your company, as opposed to their own projects, a side project for a client, or an open source project, then you'd better be prepared to replace them when they're burned out in 2yrs because they feel trapped, with no room to grow.
As a programmer that likes to learn new things and likes to have proper projects in mind when I do, I don't want to work for you. Programming is sort of a weird profession in that a lot of people who do it professionally also do it for fun. What I do on my own time shouldn't be any of your business. What if I liked working with wood? I have a friend, also a programmer but working for the government, who also spends a good chunk of his nights and weekends building wooden toys - castles, dollhouses, mini-furniture, dolls, etc. - and sells them on the side? Does his hobby mean that he's less good at his day job? Should he not be allowed to sell the woodworks he makes? The only difference between him and me is that my hobby happens to be something I also do professionally. Now, if I were building a product that competed with yours, you'd have a point. If I were bidding for the same jobs as you, but as a freelancer, you'd have a point. That's not what I'm talking about, however. If you employed me to build some application in PHP, and I spent my nights working on my own framework, or blogging about PHP, or building something completely outside what I do for you, and I do it in Python or Ruby or fucking Haskell, that's none of your business. I think it's really bizarre that you think it is. I'll give you 40 hours a week of my time, in exchange for a nice wage. During crunch times, I'll push that to 50, or 60, or even above that if I absolutely have to. When I go home for the day, I'm home. That's *my* time. My employer is not welcome in my time.
Order of importance (greatest to least): #6 -&gt; #7 -&gt; #5 -&gt; #3 -&gt; #2 -&gt; #4 -&gt; #8 -&gt; #1
Hey, I'm working on a textbook comparison site and just started getting into APIs. How easy it is depends almost entirely on the thought put into the documentation by the API creator. If you're comfortable with PHP and there is reasonably good documentation, it shouldn't take more than 10 hours to figure out an API even if you've never touched one before.
I use validation on the users input then store it in the database if it matches and validates as that type. Now when outputting it I will use an escape function to not invalidate the integrity of the document sent out to a client like an HTML, XHTML, XML, or JSON document. It becomes more difficult when you want the output to affect the layout of your document, say the ability to add &lt;b&gt; tags to a post. Now you need element aware sanitation.
Yea... "job offer" is a pretty strong term for describing a LinkedIn message from a PayPal recruiter. I get a few of these a week. Most people who have a good resume/portfolio and live in a desirable area do, as well. OP, I'm just gonna assume you live in the Bay Area. PHP/MySQL devs in that area generally pull 80-120k a year. Paypal does actually use PHP/MySQL, as do Yahoo and Facebook. That shouldn't be shocking. Definitely follow through, as it is a great opportunity for a degree-less 19 year old, but know you will be in competition with other candidates - many of which will have 10 years of experience on you.
&gt;And there is a zero percent chance that PayPal use PHP/MySQL ;) Pshhhh. Paypal absolutely uses PHP in their organization. Not PHP exclusively, of course, but you are literally 100% wrong. Well done!
&gt; I guess the only way to get any further would be to meet with the guy and talk face to face Typically, the guy who emailed you would be a low-level recruiter. What does the email suggest as a next step? Usually, he'll ask you to email a resume and call. On the call, he'll do an initial screen for whether you're a good fit for the position. If you are, he'll schedule an appointment for an interview, either phone or in-person, with someone up the chain, where a more serious interview process will start. As orangesunrise pointed out, this is not a job offer, it's essentially an offer to be screened for the interview process. It'd be good practice for you to take it a step further and learn about this very standard process, even if you have no plans to take the job. Re the salary, if you're not desperate for the position, think of a salary that will make you really, really happy, and tell them that number when the time comes. (You might want to google and read a bit about salary negotiation - it's an art for sure.) 
where can i get this jpg you speak of?
and thank you for your thorough response.
People seem to be mistaking what "best practices" really means. Code formatting standards are all well and good, but everyone does it their own way, and no way is particularly wrong as long as it is consistent throughout a given project. A "best practice" would be something more along the lines of "ensure variables are defined before use", or "never end a file in a closing ?&gt; tag". Things that are actually functional rather than aesthetic.
Also, a far as I can tell, good php practices are pretty limited as far as language specifics go. There's not a whole lot to know in order to write good php - That is, assuming you have good programming skills in general. That's where I'm not clear on how to contribute to this. Do we want to help people develop good habits with php, or programming in general? The two are very different, the former being a much smaller project. Perhaps I'm wrong, but virtually anyone with a decent understanding of php can write excellent code if they're already an experienced programmer. I think that's why a style and convention guide can be provided with a framework, regardless of the language, and for the most part the rest can be left up to the programmer. I'm open to opinions on this here... What I'm saying is really just opinion, even if it appears I think it's fact. I'm pretty inexperienced myself.
My issue here is that framework code standards tend to be "How to make your code aesthetically similar to ours" guides. There may be the odd best practice in there, but the bulk of their documents are really only relevant to the framework. Another issue here is that many people here are inexperienced, just like you. I'm not trying to sound elitist, but best practices are usually tried and true methods that experienced programmers reach for. The chances are very good that only a small handful of people in this reddit are actually experienced enough to not only know what the best practices are, but why they are best practices. The difference between a novice and an expert is that an expert knows the why of things. The novice tends to parrot without deep understanding. This isn't meant to be personal, we were all novices once. It's a worthy aspiration, trying to do this. However I think it will have a high chance of failure unless experts step up.
Where are you coming from?
&gt; "never end a file in a closing ?&gt; tag"&gt; Genuine question, why not? I assume you mean don't have the last thing on a page be ?&gt; I'm self taught and will admit to having some terrible habits but its the nature of the beast I guess.
If you're an EU/EEA/Swiss citizen, except for Bulgaria and Romania, there should be no problems. You'll likely be considered on par with everyone else. The latter two need to apply for a work permit unless they've already been working in the UK for 12 consecutive months. As for others, it's anyone's guess. Most likely it would be a bit difficult. If you are legally employed in the UK you can sustain yourself, but if you come here to live while looking for work, you must be able to show that you can sustain yourself. It's worth mentioning that until you have your National Insurance number sorted out you will be paying Emergency Tax (40%) but you will get that money back once your documents are in order. The easiest way to ensure that you are not scammed or tricked is to be an EU/EEA/Swiss citizen, yet not Bulgarian or Romanian, and arrive in the UK with contract in hand.
You run the risk of inserting whitespace before you've written any output. You can't change the HTTP headers after that.
Nope. &gt;They recommend this: &gt; if ( ! $foo OR $bar &amp;&amp; $baz) &gt; &gt;That has to be the ugliest style outline in the world. 
If you send any headers (including things like cookies), they will fail if any output is sent before them. When you use a closing PHP tag, you run the risk of sending whitespace as output (e.g. if you accidentally press space after that tag), which will cause all of your headers to fail. Whitespace after closing tags is a real pain to debug, so it's better to just not include them unless you fully intend to mix PHP and HTML on the same page.
Romania. I can see a lot of "except"s. 
Hahah yes. It seems like all you need to do is [apply for a work permit](http://www.ukba.homeoffice.gov.uk/eucitizens/bulgaria-romania/work-permits/applying/) and then you can get a job and move here no trouble. Whereabouts are you thinking of moving to?
I don't even think about working without a work permit. Granted, it won't be that easy, but I'm ok with it. I'm thinking Edinburgh, as it would be easier for me to already know someone in there. But, in the end, all of UK's fine (and dandy?).
I've had some experience with getting my wife a permit into the UK. I got to say, it's not easy, it's a royal pain in the arse. &gt; Can you employ people from Europe without having to search in UK first? We are in the European union. That means that as long as that person obeys our laws while they are here they pretty much have the same rights as a native would have. **Edit:** Someone pointed out below that this doesn't count Romania, so it's going to be a little more difficult I'm afraid. &gt; If I were to be employed, do I have to prove that I can sustain myself in the UK for a year? I'm not sure of the details for someone inside EU. But for my wife who was outside of the EU we needed to prove that we had a place to stay and we didn't need the help of the government to live. &gt; What must I do in order not to get in an.. uhm.. uncomfortable situation If you are talking about UK immigration. The most important advice I can give is **tell the truth, do not lie about ANYTHING**. Do everything they want you to do and do not complain about it, no matter how stupid or unreasonable you think it is. Think about it this way, a lot of people (idiots) in this country are terrified about immigrants coming over so the government is always looking for an excuse to send you home so they can keep their immigration statistics down. Don't give them a reason, even a little lie could result in you being sent home. Another good idea if your serious might be to consult a solicitor that specializes in immigration. Though it is possible to do it yourself, like we did. You definitely can come and work here a lot easier than most people. I actually work with a guy from Romania, so I know it's possible.
I'm staring at this if statement and hating it.
That is the correct response.
Fine and dandy indeed! :) Well good luck with your application! Come over to r/unitedkingdom and let us know how you get on, or if you need any more help..
I use spaces before and after parentheses, I find it much more readable. Something like: if ( $var1 &amp;&amp; $var2 ) some_func( $var2 );
If you were making wood items it wouldn't be an issue. But I find it difficult if not impossible for someone to do something like program and not use the same skill set as they do at work. I see it no differently than a mechanic fixing cars on the side when he fixes cars during the day or a house painter doing odd jobs in painting after work. 
Does the same apply to Americans?
I don't think so. It's easier for other Europeans to get in.. I don't know much about the process for Americans..
FTFY: Eclipse (PDT): Window -&gt; Preferences -&gt; PHP -&gt; Editor -&gt; Save Actions "Remove trailing whitespace"
number 1 for me, which almost no documents out there mention, is to keep functions (apart from the constructor) and var/const declarations in alphabetical order curly braces must be used even in situations where they are technically optional, e.g if ( $condition === TRUE ){ return; } // NOT: if ( $condition === TRUE ) return; I'll accept any reasonable coding style as long as the code organization makes logical sense
&gt;Indentation is done by steps of four spaces (tabs are never allowed); Why is this the case? Some sort of compatibility across editors/IDEs?
It's funny that this has never been a problem for me. I've been bitten by all the others, creating infinite loops, putting only one = in if statements etc but never this. I shall start doing it though, seems like good practice.
It's a newbie coding style advise. Whitespace frequently gets left after, leading to premature output. Last time I tripped over that was in PHP3 times. Using a programmer-grade editor fixed it for me. Leaving out the end marker can still be sensible advise. But not everyone sees it as indicator for quality code.
[Here you go.](http://www.ukba.homeoffice.gov.uk/business-sponsors/european-workers/work-permits/business-commercial/) Basically, you have to be either self-employed or working for a British company who has received a permit to employ you, and they have to certify that they couldn't have filled the job with a resident. [This is the alternative, where they certify you.](http://www.ukba.homeoffice.gov.uk/eucitizens/bulgaria-romania/work-permits/applying/pointshighlyskilled/) In case you're curious, you don't qualify. EDIT: Whoops, didn't scroll far enough down. You don't have to make as much to get points for income when you live in Romania. You might. The UK looks like it's locked itself down pretty hard against immigrants right now. Sorry, man.
I've got a friend who's a programmer in Edinburgh. It's a bloody lovely city.
I believe the entry exam is four hours in a country pub being taunted by a retired upper class army colonel wearing tweed. I think they upped the requirement this year in fact, he now has a waxed handlebar moustache.
I remember having the same thoughts seeing foreigners trying to apply for jobs in my town. Being in the other "side" now, I can probably guess how they felt. Thanks, man. Honestly. You made me learn something.
And a dog. And there're locals who have been drinking Scrumpy since 11am playing darts near you. And the dartboard in 4ft from your head. The only way to pass is to quietly grumble at a copy of the Daily Mail at the bar whilst sinking Bombardier like it's going out of fashion. Which it is.
Sarcasm? Where? Can't believe your eyes? Believe it. I will never judge foreigners applying for "my jobs, MY JOBS!" the same way after your comment. This is what I thanked you for.
Correct. Different editors and OS's can interpret a tab in their own way. When I press tab on my editor I just get two spaces, but four spaces works too. 
&gt;It's a newbie coding style advise. Wrong. It's the best way to do it. There is no point in shutting off the parsing engine at the end of a script. It's completely pointless, and error prone. You should not have to rely on an editor to fix these mistakes for you if you simply don't create a situation where it can happen.
The idea of this being in a wiki seems wrong somehow. I think this is better suited on stackexchange...
That's just because you've never made anything terribly complex or don't do other best practices like output buffering or gzipping or header manipulation.
So this requirement is mainly for maintenance by other parties? That'd be a hard habit for me to break since it makes no sense to multiply keystrokes by 4 if it doesn't benefit me.
I can't stand it when people post bullsh*t "benchmark results" like this. It means ABSOLUTELY nothing unless: * You include the source of the benchmark * You write the benchmark in a way that completely isolates the behavior intended to be tested * You look for statistically significant results. * Try it on multiple systems So, I decided to do one myself. I've posted the results to the SO question: http://stackoverflow.com/a/8344980/338665 And my conclusions (which are backed up) show that there's as much as 50% to gain by this optimization. If it's being called a lot, it's definitely not a micro-optimization... 
So you're saying a PHP tag should be left open? &lt;?php ... code here ... never close the tag EOF
Pavlov's programmer.
I do do those things. It's probably because when I start a new file I write the opening and closing tags first and then don't need to go near the end of the file after that.
&gt;Use of || is discouraged as its clarity on some output devices is low (looking like the number 11 for instance). &amp;&amp; is preferred over AND but either are acceptable, and a space should always precede and follow !.
Or you could just omit the ending tag rather than binding yourself to a single IDE.
I'm an American citizen and I qualified for a "highly skilled immigrant" visa to land a job at the UK fairly easily in 2008. At the time, I was a Zend Certified PHP 5 Engineer, RHCE, MySQL 5 Certified DBA and Developer, which **very** few people were at the time in the UK. It took about 3 months and the embassy directed me to five jobs that were looking for seriously qualified PHP pros and couldn't find qualified people for over 3 months. I aced all the interviews and was granted that qualified immigrant visa. The burden of proof is pretty high in the UK, however, at least in 2008. i had to prove that I was more qualified than any UK citizen looking for work. But like I said, the process is relatively straight forward, quick and fair.
You missed it twice. Smart. Fludge was being sarcastic with his first comment, then bemoaned that you didn't catch his sarcasm in his response.
Up-voting effort on a bad test with poor results (meaning explanation, proof of comparison, source code, showing different cases, what environments were used, etc)... Nice...
Yep. Php realises it just hit the EOF and doesn't care the closing tag was missing. Or if you'd rather, imagine it closes it for you. The neat freak in all of us will cry out in horror, but its one less bug to bite you later.
 if (!$foo || ($bar &amp;&amp; $baz))
Yours are quite bullshit as well. Isolating the behavior is NOT a proper way to test this kind of code, the impact of it matters only in the Use case (which is why some optimization make sense in certain cases and not in other), the number that interests you is the impact of the optimization on the overall performance, gaining 1ms if your Use case takes a whole 200ms to execute is micro-optimization and one that impacts the quality of your code. And this is what pisses me off, when people write "paper" benchmarks when it is not relevant, i have seen too many developers choosing a technology or doing an optimization because the benchmark said it was faster, when their use case was not appropriate for it, resulting most of the time in performance loss. Theory is nice and good to know, but in the end what matters is the Use Case, do not perform an optimization or technology switch before benchmarking your Use case with it.
It's not a problem for anyone who is reasonably careful when writing their code. This whole "omit the closing tag" fad is pure laziness.
&gt; Yours are quite bullshit as well. I at least backed them up with raw data and the source code showing what I did. And I tested it in more than one situation... &gt; Isolating the behavior is NOT a proper way to test this kind of code That's the definition of a benchmark. Change **one** element only between runs and compare them. But in this case, we don't have a full blown application to test against. So isolating the functionality from the benchmark script is the correct way to go. And if we can successfully isolate it, the effect *should* be the same in a real application that shares the same assumptions of the test... &gt; gaining 1ms if your Use case takes a whole 200ms to execute is micro-optimization and one that impacts the quality of your code. Perhaps. And normally I would agree. But you were saying that this **quite the useless optimization** is also not good. I showed that it saves nearly 50% off the call. Now, depending on the application that may be significant, or it may not. But 50% is not the same "result" as what you got. You called it a useless optimization because you didn't effectively isolate the result, and declared that it was dumb. &gt; resulting most of the time in performance loss. To be clear, implementing this will only ever be a performance loss if you're using xdebug in production (bad idea in the first place), or if you're using more than 4 arguments to function calls (another bad idea). Now, with that said, I do agree about **premature** optimization. I agree so much, that I wrote a blog post a few months back on the subject ([The post](http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html)). But if you've identified CUFA as a potential bottleneck, a benchmark like provided is a *perfect* way to do the optimization.
Scumbag redditor: bitches about someone else's effort. Does nothing. ...nice...
If it isn't needed, then how is it 'cutting corners'? It's not improper in any way.
Did nothing? http://www.reddit.com/r/PHP/comments/mw68j/calling_a_function_with_explicit_parameters_vs/c34nw4c and http://stackoverflow.com/a/8344980/338665 is nothing? That's new...
Sorry, my mistake. But you have to realize that before I posted my original reply -- nothing but supposition was in this thread. No evidence at all. He made the first attempt at benchmarking anything. I appreciate that. I also appreciate your efforts. So honestly, you're really going to complain that I prefer some results over a bunch of wild ass guesses? Would you have even bothered to benchmark this if he hadn't first? Being able to reply and add your own comments is what reddit is all about.
what he said
I have benchmarked it several times in the past, so yes... With that said, I think it deserves a bit more about what consistutes a good test vs a bad one. I guess it's time to get writing for the blog...
Well, he beat you to it! If you had managed to come first, I would have giving you that reply and upvote instead. Even if it was a poor test at least it got people talking about actually testing it. Your results are not that surprising given how much the idiom is used -- I might have to apply it to my project. For now I'm using call_user_func_array() in some critical areas (magic methods) but I'm not in the optimization phase of the project yet. 
Neat. It seems like the 'English version' would be... $e = false || true; // E equals the result of "false or true" $f = false or true; // F equals false, but if that fails then it equals true
This has nothing to do with php. What you really want is someone who understands UK law and policy. You don't go to a mechanic for a broken arm, don't go to a php reddit for legal advice.
&gt;I hate this stupid "fad" everyone is into I might agree with you if adding a closing tag to a php file made any positive difference. * it doesn't add any functionality * it doesn't add any readability * removing it hurts nothing, and makes it impossible for unintended trailing output to occur. The newbie tries really hard to make sure he doesn't do it (and then is confused all to hell when it happens) - the professional takes steps to prevent it entirely.
check out SimpleXML to load an XML doc use the following http://www.php.net/manual/en/function.simplexml-load-file.php after loading, you'll then need to iterate over the XML and echo out your HTML. have fun, i completely despise XML.
Tabs to indent, spaces to align.
Ok, here's a quick and dirty example: // this is in a file 'car.php' class Car { public function go($accelerator) { // do something } } // this is in a file 'init.php' include 'car.php'; // using car $car = new Car(); $car-&gt;go(100); Also, keep in mind that having a bunch of disparate functions that used to stand alone and then putting them into a class isn't really "Object oriented programming." You wouldn't be accomplishing anything new, as you'd just have a set of static functions. OOP is basically about having objects with specific properties and methods on them and those objects interacting with other objects.
Make a class and put the function in the class. If the class is a an instance ex: new object, the methods (inside a class they are called methods) are access with the -&gt; operator. If the method is static, use the :: operator. Here is a tutorial on public, private and protected methods in a class as well as static methods. If you are really up to it and are in php 5.3 +, you can give anonymous functions a try. http://www.prodigyview.com/tutorials/slideshare/280/97
Oh no, a mechanic fixing up cars in his spare time, that never happens! The people who work for you must really suck if they don't have any computer related personal projects. I'd view it as a good thing, it means they are improving their job skills even when off the clock.
That's just like your opinion, dude. ;P The same argument could be twisted for not writing any comments, because you might accidently forget the closing `*/`. Not typing extraneous whitespace at the file end isn't that big of a deal or editor witchcraft. I really can't fathom how people actually manage to shift cruft there. But then again, for anyone who is overwhelmed with typing, unwilling to use PHPCS or other tools (svn commit hook), just leave it out. As a matter of fact, I do remove it sometimes for shipping code (precisely when newcomers might want to edit things). But good style it ain't.
Do other industries do this? I know most other areas of specialization don't really apply. For example; lets say I was a nuclear technician. I wouldn't have a reactor to play around with at home so I would only be able to practice my skills on the job. Do you know of any other industries that try to prohibit or control how their employees use their skills outside of work?
It's really not that difficult to just not hit space &amp;#3232;\_&amp;#3232; 
There are many coding conventions that serve no other purpose beyond code cleanliness or consistency. I don't know how some people are ending up with random whitespace at the end of their script, but like aibot and others- I've never had this happen to me ever.
It isn't an opinion, it's a fact.
The eschewance part is true. That it isn't primarily a noob problem ain't.
Wow, this is wonderful. Definitely going to use it in a project I am working in!
I've been in the UK for a year now. I am from Bulgaria, so I have exactly the same rights as you. Looking for a regular 9-5 job in the UK is not an option. There are too many restrictions and it's not worth it. I will talk from a money perspective here - the salary I can get in the UK as a highly skilled programmer ( in my case Python/Ruby ) is only 300 measly pounds more than what I earned back home in Bulgaria. My advice is - save some money, come to the UK, look around and be self-employed. You will have none of the emigrant problems and you will earn more than enough. As a self-employed you need 0 documents, even the yellow card is not mandatory. 
You may want to have a look at [an update for it](https://github.com/aweiland/pChart-php5) that brings it up to php5 standards.
What editor do you use? It's likely that you can just do what I do and set the tab size to four spaces. Even if you're the only maintainer you may also decide to switch editors or even operating systems in the future.
Clarify on output devices? Bleh, you should know it's || if you clearly read the statement!
Oh my, this was informative. Thanks!
Thank you, I will certainly keep this in mind.
Thank you for the resource, greatly appreciated.
Thanks for that :)
XML is nice for game news (like in a game launcher) and such. I kinda like it, though.
This page is awesome. I've learned quite a bit from it.
The `or` and `||` are not the same -- they have wildly different precedence. But most people aren't terribly aware of that. So since we're talking about best practices I'd recommend avoiding the `or` operator entirely. 
I'm not sure how far you want to do with this, but if you really want to dive into the deep end of dependency management, check out Dependency Injection. The Symfony project has a [good introduction to this topic](http://components.symfony-project.org/dependency-injection/trunk/book/01-Dependency-Injection).
You may be careful, but what your co-workers? New hires? Consultants, third-party developers working on extensions? It's better to enforce a simple policy (that hurts absolutely nothing) than it is to spend hours figuring out who the hell added a *single space character* to a file.
If someone can't manage to cleanly close their php tags, that's a pretty good indicator they shouldn't be working with php in any professional context at all.
Seems like the concensus is to sanitize on output, but I have to disagree. If you sanitize on input you get a couple of advantages: * You only have to sanitize the data on write vs on read which is optimal performance wise. * You aren't bloating your database with junk you don't want in the first place. I guess when I'm thinking sanitize, I'm thinking a comment box where you strip out the HTML because you're never going to want that data to be shown on your site, so what advantage is it to store it? I do get there are cases like maybe complex documents where you'd need to preserve the entire input, but for most use cases on a website I don't see it.
This is very interesting...
About 6 or 7 programmings. &lt;/joke&gt; Think of API's like...those kids toys where you push the different shapes into the holes. Some company has some data that it makes available for 3rd party dev (thats you). They arent going to do your job for you, but what they will do, is make you an **interface**, to **program**atically interface with their **application**. For shits and giggles, they make their "API" a square (back to the analogy). Now it doesn't matter if you use paper mache (php), molding clay(C#), vacuum press and plastic(python), or wad your boogers up into a square(javascript), just as long as what you use, winds up in a square. So the difficulty, comes in at making the square, and how best prepared/skilled to do that you are. If this "square" is json or xml, just figure out how to produce and receive that "shape" (data) as such and send it off and handle it when it comes back. Personally I am inclined to use php, and its very easy but something else may be easy for you. A good place to start playing with API's imho, is twitter. You'll learn how to parse xml or json, learn about oauth, and there are hundreds of tutorials on getting started in any number of languages. Its one of these things that you dont really have a feel for until you just do it, and once you do it, you will be exceedingly proud of yourself and see many things in a new light.
We use this library at work for exporting all sorts of graphs, many of which aren't the typical graphs so it required a ton of manual drawing on my part. It was great with the exception of their library not allowing you to control small little things (like changing label direction on a few draw types and a few other things I can't remember) that I had to hack into their core code. I always put my changes onto their forum and got a good response from the devs and they said they included my changes in their next release, not sure if they ever did.
I have my own worker/scheduling service that uses PHP and Redis. I've tackled the exact same problems you're describing. I'll explain my setup to see if it helps at all: In Redis I have 3 job stores: jobs.scheduled (queue) jobs.running (set) jobs.completed (queue) I'm storing a hash-table entry for the job itself (you could say it's a table called "jobs" where the primary key is deterministic, so there aren't dupes) The jobs themselves are named in such a way that they are deterministic based upon the particular job attributes and therefore I cannot have duplicate jobs in the system. Basically the flow is: 1. Scheduler attempts to create a job request by adding the new hash entry. If the hash entry already exists, the job creation simply fails. 2. Job gets created and dropped into the jobs.scheduled queue 3. All my worker nodes are atomically listening to the jobs.scheduled queue. When one worker pops from the queue, it's impossible that any other worker could pop the same entry from the queue (This is a Redis feature) 4. Worker begins the job (which removes from jobs.scheduled) and insert the job into jobs.running 5. When the job is completed, worker removes the entry from jobs.running and inserts it into jobs.completed 6. A separate monitor watches jobs.completed and removes completed jobs, inserts them into a separate database which monitors job completion status, schedule time, start time, end time, which worker processed it, error message if applicable and some application-specific metrics. I specifically handle your points by doing the following: **Job Crashes/Dies** I have a separate process on the scheduler box which periodically checks the jobs.running set. If any jobs have been running a long time, it checks to see if that worker process is still running. If that worker isn't running, it marks the job as failed and moves it into the completed queue. **Race Condition on Job Acquisition** As I use a queue mechanism in Redis, this isn't an issue. No worker can get the same job as another (via the jobs.scheduled queue). However in a database you could simply do something like: update jobs set status='running' where id=1234 and status='scheduled'; Your code would only look for jobs in a status of 'scheduled' and since it requires that criteria as part of the update statement too, it will avoid race conditions by ensuring job.id=1234 is still scheduled between the initial 'select' and the subsequent 'update' query. 
So ... nothing happened?
Just a point that took me a bit to figure out: Throwing a bunch of functions into a class is not OOP, it's just namespacing your functions.
Chefs cannot freelance parties, mechanics cannot work on cars, often people sign wide noncompetes to stop just these things.
If you work at a shop you will lose your job.
Right. The three "main" points of OOP are [encapsulation](http://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming\)), [inheritance](http://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming\)), and [polymorphism](http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming). They follow in a logical order. Simply put: when you create (e.g. $user = new User(); ) or call an object within another class, you shouldn't have to go back into the class and figure out what each object method does by reading the source. It should be abstracted away and the method name itself should be enough to tell you what the method does. //This should be obvious $user-&gt;getUsername(); It doesn't matter how the username is fetched (most likely through a database call), all that matters is whatever is interfacing with that object receives the expected result. That's pretty much what encapsulation is. Inheritance means that classes can be structured in a hierarchy so that the UserHistory class can use methods and properties (classs variables) from the User class without having to redefine them. Polymorphism may sound tricky, but it's fairly simple if you understand the other two OOP features. Simply put, similar objects can have the same methods for performing a common action. The most trivial and commonly used example is with shapes or UI elements. So say you have a Button object and a a Textbox object. The each have their own distinct methods and properties. However, you can call the getPosition() method on each and expect to receive their coordinates on a form. Those types of features are what make OOP useful. Large, enterprise-y projects often rely on good OOP practices since all components/objects must work together to make the application work properly and remain maintainable. 
Gearman queues can be made persistent, they just aren't by default. There are modules for mysql/drizzle, postgres, sqlite, and memcache backing stores. [Gearman manual - persistent queues](http://gearman.org/index.php?id=manual:job_server#persistent_queues)
As mentioned by others, gearman can be made persistent. You might also like to look at RabbitMQ (and some job servers written on it like Celery or Carrot), in rabbitmq you can write jobs such that they are only marked done if they complete succesfully http://stackoverflow.com/questions/2283955/rabbitmq-or-gearman-choosing-a-jobs-queue
You should try doing freelance work for UK companies. Somewhere along the way may come an opportunity that one of those companies might want to hire you full time onsite.
good lib but closed article after md5sum example.
Ubuntu = Operating system SQL Server = Database application
Hahaha, I see. Thank you.
Mm, yes. Thank you!
Use nano once on a server, which automatically will slap there an additional `\n` after the last line you edit.
I love how all the people in here throw around all kinds of coding conventions. Some advices from me * don't fool yourself that you're doing OOP when all your code reeks of static method calls. * Write your PHP doc blocks with useful information for editors; gotta love proper autocompletetion/code hinting. * For humans write comments that tell the *why and what* instead of the *how*. * Try to adhere as much as possible to the SOLID and GRASP object oriented design principles * Don't sacrifice clarity for shortness. If you have a method `getAwesomeBagOfSugar`leave it as such and don't name it something stupid like 'getABOS'.
For those with not many needs, [djjob](https://github.com/seatgeek/djjob) can do the trick. Just read the “resque vs delayed_job” (or which djjob is a port): https://github.com/defunkt/resque to figure it out.
they did this for only one reason: azure. but sqlos (it's an o/s the sits on top of an o/s - fully numa aware even) is wonderful to use - a job compared to any other.
Yes - this driver (for SQL server) is only for RPM based systems (Linux distros), AKA not Ubuntu.
To build something quickly. I'm generally opposed to most PHP frameworks because of the added complexity and performance hit but grabbing a framework and quickly adding a users and file uploading and comments, etc... is usually done very quick and easy without having to do too much dirty work like figure out sanitization techniques or your url structure before hand.
Frameworks make development a lot easier. They come with premade classes that perform a variety of tasks so you don't have to write your own. They're esentially just used to help you build websites faster. But don't think you should just start using one right away. It's important to know as much as you can about PHP and MySQL before you start using a framework for rapid development. They're good, and they make things easy, but an underlying knowledge of the language should be had before you use one.
You might also wanna look at an autoloader. It automatically loads one of your classes when you initialize it, based on its name. http://php.net/manual/en/language.oop5.autoload.php
The two most important things a framework gives you are: * Built-in separation of concerns. You need to separate your input logic, business logic, and views in any decent-sized application. * A router.
Development time is decreased (once you know and understand a framework) and finding developers becomes easier. If you build an app in Zend Framework and need to hire coders, hiring another Zend Framework coder will get them up-to-speed on your project quicker than someone who hasn't used it. For an open source project, I don't think this is a huge deal. For businesses though, this is huge. Most places want to spend as little training as possible on new hires.
They're just an easy way to separate application logic from business logic from styling in a very changeable and reusable way. The hardest challenge in webdev is usually adapting to change as it comes (which it does) in a way that's as quick and painless as possible. By using unit tests and adhering to your good ol oop principals you'll have a system that's a breeze to update. If you're using file-per-page php and have your html all mixed in with application/business logic, you're going to have a tough time finding that one line of html to change or that one sql statement to update. Imagine, for example, that you have your new cat selling website up and running and it's good and functions great. Now, imagine you want to set up a mobile version of your site so people can buy their cats on the go (and the layout has to change, so no mediaquerying). In file-per-page, you'll probably have to add a conditional to check for user agent and redirect every time the person goes to the wrong version. You'll have to then make a new site version, duplicating all of your nonencapsulated logic. Any more changes on top of this, say adding a new feature or making it tablet friendly, becomes a bitch since you have to maintain parity between your two versions by duplicating code. It's easy to see that, as a project gets more shit tacked and hacked on over time it becomes increasingly difficult to maintain. If you're using an MVC framework you could just implement a factory that provides the right view from the user agent and you'd be done. I'll agree though, for small one-time never-going-to-be-updated projects a framework is overkill. If you can implement four .php pages and have a complete functional project then do that. If you're expecting for your site to grow in any way you should probably write it with a framework.
Save yourself a lot of time. If you do everything from scratch, do you at least have a bundle of code snippets that you constantly reuse? Take those snippets, organize them so they're easier to reuse again, and you suddenly have a very simple framework.
I do reuse them. I usually save my fuctions in a diferent php file that I require when i start working on a new project.
Thank you for the detailed answer! That really gave me an overview of what we need them for. I have one question though. What does "MVC" mean? :P Thank you!
Ok! Thank you! I shall keep working hard on my php/mysql skills and learn a bit more on OOP, as I know I suck at it. Then I will move to frameworks!
MVC means Model-View-Controller. It's a standardized way of separating your logic with your presentation. For example, a model class would be used to retrieve items from a database, which is then passed to a controller which parses that data and does all the logic you need. Then the controller calls the view (basically a HTML page). The view has variables defined in the page that relate to the variables in the controller, and that's how your variables appear on the page. It may sound daunting at first, but once you start using it you'll learn that it's amazing and really does simplify everything.
I'm the author of a fairly bad framework. When I first started learning PHP, I didn't use a framework. When I made my first data driven website using PHP, I felt like a rock star! I then later started using frameworks. I learned from the frameworks that a lot of the code I was writing could have been a lot better. I understood how the framework accomplished most things, but I was curious on how all parts of the framework were working, so I wrote my own. Today, if I were to put code into production, I would use someone else's framework. This is mostly for web security. It takes a lot of getting it wrong before you get it right, and a framework does a lot of the heavy lifting for you. If you have the luxury of writing code that's not going to be used on the Internet by paying customers, I would suggest trying to write some basic apps using PHP without a framework. Then progress to porting your application over to a framework.
So it is basically having things separated? I notice that i have everything (php, html, and queries) in the same php file (one for each page), and that it would be hard for anyone to edit my code.
Exactly. Having presentation and logic separated makes modifying your code so much easier, and helps to keep everything nice and organized.
Thank you for the advice!
Is using a framework the only way to accomplish that? Because that is a recurrent doubt i have, the right way do embed the php and html. I usually write php firts and html in the end, with a lot of verifications. I ask this because I know we are supposed to write html according to some, lets say, rules, and when i do my own programming I never obey them. If I were to put my html in the w3c validator it would get a lot of errors!
Not at all. You can achieve the same thing like this: view.php &lt;?php $pageTitle = "Page Title"; $pageHeading = "Welcome to my site"; $pageContent = "blah blah blah"; require("../views/view.html"); ?&gt; view.html &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;?php echo $pageTitle; ?&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;?php echo $pageHeading; ?&gt;&lt;/h1&gt; &lt;p&gt;&lt;?php echo $pageContent; ?&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; And that's seperating your login from presentation. MVC isn't something that exists only in frameworks, they just have it.
That's essentially the same idea as a framework, just far less formal. Some frameworks hold your hand, others just have some functionality that speeds up development (like a simple autoloader which you just need to keep your classes aligned with).
Thank you! I have never though of doing things that way! That code looks so much cleaner than my usual code! I just felt a huge leap forward in my php understanding skills! I can't upvote you enough for this post! Once again, thank you!
Thanks for your response. When you mentioned the different languages and added your own comments regarding stability (clay, boogers, and plastic) I gather some languages are stronger than others, given the situation. One thing I don't understand is, how would you use python for a web dev App in a position where you might implement PHP? 
Read through the intro documentation on some popular frameworks and you will get a good idea of how they structure things.
When I was starting out I made my own "framework" or set of libraries for common tasks like database usage, user accounts. I ended up making my own CMS. It got to the point where it did everything I needed. But then I used an established and well documented CMS for any live sites. Building my own was really useful for learning. And once I realized how things worked, I could grab a framework or CMS, look at how it was built, and actually understand what it was doing. 
Indeed.
Frameworks generally follow one of the major design patterns. These patterns can be used to communicate intention of the code without needing to understand it as a whole. For example: I start working with a new code base that I have no knowledge of. If I know it's MVC I can then make smart assumptions about how it works as a whole without being forced to delve into the minutia of the code. 
I think this must be very regional. No one around here really cares. I know probably half a dozen mechanics, all of whom work on vehicles outside of their 9-5 jobs. The guy across the street works for a company that does residential construction projects, and this past summer, he replaced a good portion of our roof and built a new front deck on our house. The company he works for definitely knew about it, because he went to them to see if he could buy some of the materials off of them when he was in the middle of the project, saw that the damage to our roof was greater than expected, and the local lumber yard ran out of shingles. In fact, he gave us a discount because they sold them to him at cost. 
Happy I could help. :)
long time .java coder, as of late I have been consulting at a company in the .php world. The company I am at made all of its success specifically by NOT using frameworks but just hacking things together. But now maintainability is a nightmare. So many n00b programming styles that make my Java soul cry. Oh useless singletons in .php, Tigga Please! Memcache, Redis, you name it.. they have it. Anyway, if they had have used a framework at the beginning they would definitely not have this maintainability nightmare, although I am also sure they would not be the success they are today as at the beginning they did not know what they wanted and tried everything and hacked it all up hellishly fast! **tldr** Success does not come from whether you use frameworks or not. The main benefit from frameworks is maintainability and ease of new developer integration.
Is this a system you can share sounds like what i.'m looking for
Out of curiosity, have you ever used the image map tooltips with pChart? I released an extension of the library with a new tooltip system. I was considering resurrecting it and updating it with a new jQuery extension, but hadn't decided if it'd be worth the time yet.
Check out [QueryPath](http://querypath.org/). It let's you manipulate XML files with a jQuery style interface. $xml = qp($your_xml_filename); $html = htmlqp($your_html_filename)-&gt;find('body'); $xml-&gt;find('image')-&gt;each(function ($i, $image) { $img = qp('&lt;img/&gt;') -&gt;attr('src', $image-&gt;attr('src')) -&gt;attr('alt', $image-&gt;attr('alt')); -&gt;appendTo($html); }); $html-&gt;writeHTML();
* Separation of concerns: a place for everything and everything in its place. You quickly know what part of the code you need to modify because the framework spells out what classes should be responsible for what part of the code. * Maintainability: everyone is on the same page, so everyone's code is (roughly) the same. You don't need to learn a whole new templating system or "how does this page load" whenever you pick up someone else's code. * Free code: Most projects have a lot of common elements (templating system, deciding what code to run for what URL, autoloading classes) and you get those for free with frameworks. Most frameworks started off as a developer taking things from one project to another and then abstracting it into a reusable codebase. * Bugs come already-fixed: popular frameworks have had a lot of eyes on them and dealt with bugs you haven't even thought of (e.g. what happens when the URL contains a bad character) and you get all that knowledge for free. Bottom line is that my company has 2 PHP dev positions open in Detroit right now and we are strongly favoring candidates with OO framework experience.
One question related to your company. Do you favor people with college degrees or someone with a lot of php dev experience, for example self-taught, is considered for the position as well?
We love autodidacts, some of our best coders have been self-taught. If you can show that you know your stuff and can get things done, that's what matters.
I guess that things wouldn't work like that where I live. They praise college degrees and the "Doctor" and "Engineer" status. Thanks for the information! :)
I dont know how this is possible, but I've never come across this site before! I've discovered something beautiful! :o
It's code that's already written for you, that does useful things, that you don't have to write. And it's debugged and updated for you. So it just helps you get things done faster.
Model abstraction from a database, if you use it, can also be a huge part of time-saving that a framework can provide.
http://book.cakephp.org/2.0/en/cakephp-overview/understanding-model-view-controller.html The CakePHP documents have a pretty good overview. 
If you thought gave you a huge help, well then... you have a lot more to learn, young grasshopper :)
With a decent portfolio of examples of work, you can generally overcome this assumed locational limitation, FYI. :)
If you are going into PHP for the first time (even if you're starting off new), I highly encourage you (assuming you have the time) to build a full website/web application from scratch at least once. It allows you really get the feel for handling PHP and how frameworks work. After that, learn a nice Framework, preferably something with a decent sized community. 
only 14% like... so noone likes to encapsulate and organize their code?
Because with some of them, you can get an application going in a matter of minutes? Its a question of saving yourself time for work that you can still bill out. Frameworks eliminate all the tedious tasks that need to be done with every project, like your database layer, users model, data sanitizing, etc
This. You'll never learn anything if you just use someone else's work. See what makes the framework tick 
Indeed, I do have a lot more to learn! I have a project on my mind to work when I finish my exams. I think I know the basics, but there are some tricks, like the one above, that I never thought of. I guess that comes from experience!
I will make time. :)
As someone who has done it long enough to have their own style and thus found that in some respects, frameworks can be quite annoying, as the add an additional learning curve where there was none before, I do think there's definitely value in using them because it provides a basis for someone else to work on your code. So yes, there is a learning curve, but other people can learn it and work with your code easily, as opposed to having to learn your weird ways of doing shit. So, frameworks are great for code other people have to read.
There are many steps that you will go through, until you recognize the power (reusability) and need for framework (maintainability, 3rd party involvement). **These are most likely going to be your steps:** * **Step 1.** You learn to make forms, and mysql code here and there. * **Step 2.** You learn sessions. Suddenly you think you can recreate facebook in no time. * **Step 3.** You learn of includes. Must "Include all the things!" * **Step 4.** You learn some basic OOP. You go with "Must OOP all the things". * **Step 5.** Well, OOPs to hard, there isn't much use of it any ways.. * **Step 6.** Your uncle needs a CMS with 3 languages and forum. Obviously you don't choose an existing solutions but make your own. * **Step 7.** You suddenly realize - "ohh, sh*t, the project is getting quite big and its tedious to do all these changes. I wonder what other people do?" * **Step 8.** You discover design patterns and return to a proper OOP. * **Step 9.** Only now it shines upon to you to check out how other people write their products. You *actually* look at architectures of other software. You learn. And later perhaps even stay with whichever tool/framework you found the most inspiring and helpful. * **Step 10.** Congratulations, you are now the 1% of PHP developers who have reached this step. 
Frameworks are awesome. Sure, you might think to yourself that using others code that you haven't written yourself is not what you want - I know I did. But it is not necessarily the framework that you need, but the design pattern the framework builds on. I, for instance, love the classic MVC pattern. Mainly because I don't know of many other patterns. So you could just go for a "minimalistic" framework that is just that - the design pattern (tinymvc); and then build upon yourself. But other frameworks includes loads of helpers and such. Which could, if used properly, increase your coding efficiency tremendously!
I think I'm in step 3! Really helpful this post. I recently got PHP Objects and Patterns, I guess I'll follow this "method".
If you've adopted a pattern like that throughout your site, you have effectively built your own framework. Perhaps not a very extensive one, but you've done it all the same. I'm not saying that to be snarky or rude - any organization that encourages cleaner design and reuse is a good thing.
How is your roof not a conflict of interest. 
ZF is probably one that falls outside of that benefit more than other large names like symfony/cake/codeigniter. ZF's mantra for many years is "use at will architecture!", and it shows in the various "ZF apps" I've seen in the past few years. People will use bits of ZF here and there, however they feel like using them, and say "we have a ZF app". There's a lot of good in ZF, but there's not the same consistency in usage which makes finding developers as "drop in" as it is for other frameworks.
Yeah, I completely agree with you. It's just an awful implementation in itself.
Right now it's very specific for our internal needs and wouldn't really suffice as a generic job system. That's a good idea though and I'll look at what I could do to make it more generic and open-source the system. It's pretty simple really so might be something to build upon or possibly people can learn from.
I think that's more the fault of the project than Zend Framework itself. symfony 1, CakePHP, and CodeIgniter are all full stack frameworks and only full stack frameworks, while Zend Framework can be used as either. If a project promotes itself as a Zend Framework application, it should be using it as a full stack framework. A project that uses just pieces, like say Zend_Log, or Zend_Service_Twitter in addition to custom code or other libraries shouldn't call themselves a Zend Framework app. Again, that's not the fault of Zend Framework since it can be used different ways. Like I said, this is probably more of a big deal for business customers than it is personal or open source projects. Most businesses will pick a full stack framework and stick with it, either for support or training purposes. Granted, there are a lot of places out there with legacy PHP4 code or personal frameworks that some "rockstar programmer" came up with, but if the app uses parts of Zend Framework, at least a new programmer will be familiar with those chunks. Also keep in mind that with Zend Framework, there is a big divide between pre- and post-1.7 applications. Very early adopters had to do a lot of the setup themselves on the apps, which resulted in many different implementations. Hell, I even had my own bootstrapper class. After 1.7, and the introduction of Zend_Application, it is much more uniform. There's another side of this too, which is that frameworks are moving away from being just full stack, or just at will. Zend Framework 2 and symfony 2 are very decoupled at this stage and can both be used as "at will" frameworks. I haven't used Lithium in a while, but it was much the same way. It seems most of the frameworks are moving away from monolithic stacks in favor of offering a way to provide a full stack, but easily swap things out. Don't like Zend\Log? Replace it with symfony 2's equivalent. 
I think the autocomplete on Netbeans has a time limit you can set before it appears. Setting that to 0 makes them appear fast. It's been awhile since I used Netbeans though, so I could be wrong.
Its not a bad thing as far as I know. I mean, you can create and use objects, which are classes, that h ave no methods. Example: $foo = (object) array("bar"=&gt;goo) echo $foo-&gt;bar; // this gives you goo That's a completely valid case for creating and referencing an object without ever defining methods for it.
A class without defined methods is not useless at all. Aside from better code/data organization, a pure data structure class allows me to define defaults for properties and various IDEs can pick up on the property names for auto-completion. In other languages, it is fairly common to define classes without methods. The main reason you might not see it often in php is that you can add properties to a object dynamically and associative arrays is a builtin primitive. This makes it easy to pass structured data as a function parameter or return value, whereas in other languages, you have to either explicitly define a data structure (class without methods), or use a rather heavyweight generic container class (associate array, hash map, etc.) BTW, technically a class without any defined methods still has a default constructor and friends. So it's not really methodless (compared to a struct in C ).
Yeah you can use classes as data structures. It comes in useful for passing around several variables at once.
A class with no methods isn't always useless and is an acceptable practice in many languages. They can be very handy for helping to organize information into more logical groupings. You can also use a class with nothing but constant properties for holding data you don't want your program to change. With PHP you'll want to be familiar with the __set() and __get() magic methods so you can use $Class-&gt;property to access the properties without making them public. Public properties are bad. One use for a class holding nothing but properties would be your database access information. (warning, pseudocode) class MySQL_Data { private $server = 'localhost'; private $username = 'root'; private $password = 'password'; private $database = 'myDatabase'; public function __get($name) { return $this-&gt;$$name; } } A class like that would be useful for a database class because you could instantiate it from a variety database controller classes and then use $MySQL_Data-&gt;server, $MySQL_Data-&gt;username, etc. to get the information from a centralized location instead of having to declare it multiple times in different classes class. You'd just need to do $info = new MySQL_Data and you'd pull all of that information into whatever you're working on. You do need to be careful when doing this however, because once your program is dependent upon your class to get information then any changes to your variable names will affect the classes referencing those variables and will need to be updated.
If you're just doing it for fun, then the intended audience is probably you... so I'd just worry about making it do the things you want it to, and avoiding the pitfalls of frameworks you've used that bothered you. Beyond that - you're going to get a lot of "don't make one. there's already a million of them"... and that's true. Unless you have a truly innovative idea of some sort, you're just going to be reinventing a wheel that's already been reinvented about eleventy billion times... That being said - if it's just for fun and a programming exercise, have at it... enjoy it and learn from your mistakes!
Keep in mind that you are trying to: make your life easier make your products more secure Avoid: Over complicating that which does not need to be complicated Writing code that you won't use So in other words, don't get too caught up in to dynamic this, that, and the other thing. You may just find that you create something that takes as much work to use as it would be to use just raw PHP.
"Curse these personal computers!" cried the novice in anger, "To make them do anything I must use three or even four editing programs. This is truly intolerable!" The master programmer stared at the novice. "And what would you do to remedy this state of affairs?" he asked. The novice thought for a moment. "I will design a new editing program," he said, "a program that will replace all these others." Suddenly the master struck the novice on the side of his head. "What did you do that for?" exclaimed the surprised novice. "I have no wish to learn another editing program," said the master. And suddenly the novice was enlightened. *- From the Zen of Programming*
Don't implement anything unnecessarily. 
For what reason are public properties considered bad?
If a property is public, then no constraints have been put into place to make sure the property does not contain bad data. The end result is that you can never really trust that the data in a public property is of the type that you think it is.
make it object oriented as much as possible. 
I'm building one too! Mainly for fun as well. Here's what I'm trying to do: - Built in ability to create sub domain sites eg. mysite.myawesomeframework.com - Built in user messages/success/error system - Built in login/user system - Built in image upload/resizing system - Simple way to add/edit pages - Easy to create mini apps in the application eg. a blog system is just a section on the site
I'd love to see one with no UI (ie, no views, templates, html, form generation). purely for ajax desktop and mobile front ends, or mobile apps: * json interface * optimistic concurrency * RBAC (role based access control) * support for fast and secure query-string based sorting, filtering, grouping, searching, paging * easily send back and load nested json, in particular many-many relationships in the db * good validation rules * easy tenant support for the database (create view and trigger from table, per-tenant connection strings) hope that helps, and good luck!
Make sure you set up your naming conventions + autoloader first, followed by your primary interfaces and not base classes. Having written a framework or two, you don't want to get well through the framework and then realize your naming convention is just retarded and you need to rewrite the autoloader.
document all the things!
Perhaps consider writing libraries and helpers for Code Ignitor, maybe contributing to development? I'd rather see lots of people working on one amazing framework than each making their own mediocre (no offense) ones. If you contribute to an already well established project than you can actually make a difference. If you're set on doing your own thing because you want full control over how it operates, consider [forking CI](https://github.com/EllisLab/CodeIgniter) and starting from there.
In Python you could do this to store values. class myClass: pass cool = myClass() cool.myDog = 'is' print cool.myDog PHP isn't Python though. I just wanted to give you an example off the top of my head where you could have a useful empty class.
You should be able to compile gearman with lib-event and php-pear installed on the machine. For the server you have to download the current version of the tgz and compile it. A one point a used ftp://dsftp.dansupport.dk/pub/centos/srpm/5/gearmand-0.14-1.src.rpm ftp://dsftp.dansupport.dk/pub/centos/srpm/5/php-pecl-gearman-0.7.0-1.src.rpm but they are unmaintained in that repo. Best of luck
As a programmer and Buddhist I don't think that's a very good analogy from either perspective.
Another reason that a lot of other languages use that I don't see in PHP much is purely to rename the class, but retain the lowest parent's functions. Specifically Errors. You could have a (shitty ascii) graph like: Error &gt; PersonError &gt; EmployeeError &gt; ProgrammerError None of the children of Error really need to have any extended methods of the parent class, but by subclassing each of them from each other, you can easily develop a graph that shows you where your errors being thrown from. Similarly without errors: Person &gt; Employee &gt; Programmer \ Manager There could be a chance that all employees are programmers, except one person who is the manager. Instead of buggering up your code with 'if (employee) { // do employee } else { // do manager }', you can just subclass each of them, and override anything for manager (who may also program), but leave programmer mostly empty.
It's more about the content being too basic for what you'd expect in /r/php.
From my experience there is one reason to create an empty class. Let's take for example the exception class. Usually i extend the exception in order to have specific exception handlers on which i can add later anything that comes to my mind. Making things more general, it will help with typehinting to make either a empty base class or an empty child class in order to enforce a certain type. Of course there are more uses to empty classes, but they should only be used when needed, not all the time. I know some purists will argue that a base empty class serves no purpose, which is true. You should not have a empty base class because it is clear that the child clases have nothing in common, however sometimes the implementations of child classes can totally differ from each other, but semanticly they can belong to the same group.
Frameworks automatize stuff for you. How much do you like to validate common datatypes? like ip, email, phone number and so on? A framework can do that for you. It also implements the routing most of the time and the MVC you will eventually need. It provides a base for developing, making adheration to standards much easier. Also you can get people which work on that framework and it takes little time for them to get the system. They will only care about the implementation of your specific product, not about the infrastructures that routes the request and so on.
Wait, what exactly have you been learning? Superglobals and built in functions?
Sounds like you haven't even scratched the surface. If you think only a few predefined functions are useful, then you're not doing PHP right. Almost one semester if PHP is hardly prepared enough for intermediate (whatever that may be) PHP. Stuff you don't know? Can you get your code to work with a database? That's a good place to start. Know that? Pick up a framework and play there.
This can also be done in PHP - it will however send an E_NOTICE error when setting an undeclared variable.
Yeah but what's the difference between your example and simply using public class variables. I can't see any difference except you're using a fancy functions to do the same getting and setting. You'd have to add some more access control/functionality into the magic methods to be more useful surely?
You actually just want: return $this-&gt;$name; Since normally, it's `$this-&gt;prop`, not `$this-&gt;$prop`.
I'd suggest working with classes before diving into a framework. The larger ones can be disorienting to those unfamiliar with OOP or the idea of MVC.
Arrays ? In the end it's always arrays :)
&gt; I'd love to see one with no UI. I think you missed the part where the OP said "framework" you seem to be thinking in terms of "CMS". Frameworks don't have a UI.
Perhaps you should invent a new analogy to replace it
/me hits execrator on the side of his head
It's just a way to ensure data integrity. Maybe right now you're just setting the variables direct but in the future you may need to restrict it to a certain format.
It's also a good idea to check if the property exists first, otherwise you can just add random class variables to the object.
 class User extends AppModel{} //User can be singular English word is a very common class in CakePHP applications. It's completely empty (at least initially) but because it extends some very useful classes it ends up being a database wrapper for the users table in whatever database you happen to be using. 
PHP never ceases to amaze me. 
U NO TRY SYMFONY ?
Am I the only one who's tired of frameworks? I don't want to build my program around someone else's design - I want well-defined libraries that do one thing well.
I don't really subscribe to the idea of using suboptimal tools for the sake of standardization.
Probably interaction with databases like MySQL. I also think security is one of the most important points to start with.
symfony all the things!
that's what she said.
Development time and server hardware both cost money. Development time generally costs more. On friday I was assigned to work on a site that has to have 75000 (currently handles 28000) concurrent users, in Zend framework. I've been tasked with speeding it up. The previous developer is leaving in three weeks. If they hadn't coded it in a framework, I would have no idea where to start, and spend three weeks just getting the lay of the land. As it is, I can spend that time asking more useful questions and I've found a speedup already. Standardisation is more important than you'd think.
Now imagine the project was composed out of smaller, more well-defined libraries. These would likewise be systems you were familiar with. If you were eventually forced to delve into their source code, you wouldn't be dealing with the added complexity of a whole web application framework. 
thanks for the heads up, but the problem with it that the autocomplete box appears and just says "Please wait..." and then sometimes takes about 30 secs to display suggestions 
Agreed on security! One place to start might be remembering to always escape anything you use in a query, and convert special chars to entities before echoing to the browser.
I think you misunderstand what a framework is really. The framework part of it just connects everything together; Controllers, views, models, libraries - Dealing with autoloading, routing and conventions, etc. so you don't have to. You could use zend framework and not use a single other zend library, preferring to write them yourself. Moving on to well defined libraries that do single things well: welcome to the built in libraries of a framework. I can pretty much guarantee something like Zend_Feed will do a better job of parsing a feed than anything you write yourself. Not because the person who wrote it is a better programmer - just because thousands of people have used it and submitted bug reports and commented on its API. 
In addition, if you want to change something program wide, it's much harder if you are directly accessing properties. Silly basic example - You have a property of "display_name". Say you want to make sure it is formatted the same way everywhere in your program. If it's public you would have to apply the formatting to every place in the app that requests $object-&gt;display_name. With a private property, you can create an accessor method, or make the exception in the magic __get function to apply the formatting you want when you call it. 
Best IDE ever. Period.
I am with you, I am sick of seeing frameworks and never anything written on them. Where are the open source apps that are being built on all these frameworks?
Save your money... use Notepad! -.-
As far as I care, framework is something you build your application around rather than adding it to your program. I've used a plenty of frameworks and I've always found that the less it tries to do for me, the happier I am. As for the builtin libraries, those are framework specific - if you decide you don't like the framework you can't really use it. You can of course branch the source code and try to maintain it separately from the framework, but there's no telling how much work that will be. And bringing your favorite library to any framework is of course possible, but suffers from the same problems. More than issues with library compatibility, I'm speaking against being forced to subscribe to a frigidly set design ideology of a framework. If one design really worked for all projects there would be a lot less code written today. But I suppose you could say that having it works as a safety net against bad designers. I'm not saying we should write more custom code - god knows I try to avoid writing custom code as far as possible. Of course the sheer volume of people using a framework works for its advantage, but that's not really due to a superior design decision. What I'm trying to say is, if you have to have a framework let the core be as small possible and let the user make as many decisions as you sensibly can. Preferrably to the point where it's more of a library than a framework.
What if it's a UI framework? Yea, didn't think of that did ya!?
You should keep in mind that there are already a billion. You could learn from what they do right, and what they do wrong.
agreed, if a class took a semester to talk about superglobals and built in functions it might not be worth your time.
Pretty much a waste of money?
A UI framework doesn't have a UI it **is** a UI, or rather a UI creation tool.
Going from a amateur programmer to a professional paid a respectable amount of money PHP programmer the major difference was learning how to use the Zend framework. Symphony if you really want, symphony is a better framework, but in my experience its not used in real projects half as much as Zend. Frameworks provide additional functions to PHP, and provide a model for where to put different kinds of code, so new developers can step into a Zend project and know how it all works (consistency). Your complete skillset for being a pro PHP developer should be: - Ability to create mysql queries that are optimized (look up adding indexes to mysql tables) - Ability to use a PHP Framework - Javascript / JQuery knowledge - Ability to use var_dump really well to debug code. Everything else is just extensions of these skills.
Do you already understand the fundamentals of development such as doing research and design up front? Using libraries to minimize work? Using the right tools (IDE, SQL IDE, Unit Testing, etc.)? If so, I'd say you should focus on whatever you're most interested in. For instance, if you plan on doing a lot of work with the front end of websites you should focus on templating, maybe the string functions, optimization of compiled output, and whatnot.
I might have to try this with one of my little apps. Honestly, it looks fun.
Yup. Get OOP solid so that when you start with a framework, the relation between objects and how scoping works is clear going in. Probably also a good idea to learn basic database querying stuff using mysqli or whatever you prefer.
You cannot simply recycle the meme without understanding it and expect it to work.
A good framework makes the whole web application simpler, not more complex. 
Thanks, you're right, I don't know much about frameworks at all. It looks really interesting, I'll have to read up on it. My instructor tends to use var_dump like crazy, but I've been finding print_r much cleaner, especially when viewing arrays. Maybe I just need to learn to read var_dump and decipher it's details?
I think you pointed out a couple things I don't understand. One is using PHP libraries; I wasn't aware there were any and I don't know how to use them. I've been using notepad++ for all my code, is there an IDE for PHP that is widely preferred?
Looks like another [NIH infection](http://en.wikipedia.org/wiki/Not_invented_here)!
He didn't say that's what the class taught, but that's what he's taken away from it. I would hazard a guess that many 1st-time programming students can't reliably identify "important" from "unimportant" language concepts.
We have been learning more than just that, it's a class based on building projects; where we use PHP to create dynamic web pages. In terms of what we've learned I suppose we went through all the standard logic statements and looping and arrays pretty quickly, and I've already become familiar with that material from previous classes so it was nothing new. After that we did a lot with forms and we're just starting with some SQL, but everything we've been doing has relied on the superglobals like $_GET, $_SESSION, $_REQUEST, and the built in functions. It just seems like we haven't really learned how to use PHP to its full extent, as much as using what's built in and arranging it in different ways.
The problem with print_r is if the variable isn't an array, you're not getting any useful information out of it. var_dump is like print_r but it prints everything - strings, objects, resource handles, whatever.
PHPStorm has been taking over my office. We can all use whatever IDE we want, and PHPStorm is winning. It sports autocomplete, svn integration, and all kinds of other coolness. 
&gt; number 1 for me, which almost no documents out there mention, is to keep functions (apart from the constructor) and var/const declarations in alphabetical order Heavily disagree. I group functions by visibility and type; I don't have a formal definition of exactly how this goes down, but then again, I typically don't have _all_ of the following implemented in the same class, so it's rarely a concern. * constants, with 'mutable' constants first (such as configuration options or strings that are likely to change), with any constants that resemble enums or simple tokens following * static variables list in order of visibility (`public`, `protected`, and then `private`) * instance variables list in order of visibility (`public`, `protected`, and then `private`) * first are any magic methods (including the ctor) * then any implemented abstract methods * `public` methods, then `protected`, and then `private` * any getters/setters * lastly, any static methods (also listed in order of visibility)
Just to parrot that, I recently bought PHPStorm and it took over for a mix of Notepad++ and Eclipse. Frankly, you're probably fine using Notepad++ for now but definitely consider using an IDE when working with larger projects, especially those that use MVC.
coding standard (style guide) != best practice
PEAR and PECL are the places to start for libraries. Unfortunately, a lot of them can be pretty shit and many aren't actively maintained. That said, you can occasionally find some that will do what you need and save you a great deal of work. Most frameworks also provide various built-in libraries to do certain common tasks. Unless you want to use the entire framework you're probably better off not using anything. Also, check out [Zend Framework](http://framework.zend.com/) Take for instance the generation of PDFs. You could write all that from scratch but you may find that [most of the work has already been done for you](http://pecl.php.net/package/pdflib) As for the IDE, you can use PHPStorm, Eclipse, Aptana, NetBeans, and probably a handful of others I don't know about. I still use Notepad++ for simple stuff because I used it for so long that it's just comfortable for me. Also, definitely make sure you look into Subversion/Git/Mercurial because these are easily the most valuable tools in a developers toolkit. If you aren't already aware, they are version control systems. Simply put they allow you to make modifications to existing code without wiping out the history of the old code. They do a hell of a lot more than that but that's probably what you'll need it for most when starting out. Pick whichever one you like but understand that eventually you'll probably need to learn whatever one is used in your job. 
Use the SPL autoloader for everything. Its a great feature and it is hardly used. 
Well the best angle as I see it is this, if you have code in a view that retrieves data directly from the database there is a good chance you will need that same functionality somewhere else in the code. Good code utilizes decomposition. Placing that same code in two places is bad practice and does not adhere to the decomposition principle. Therefore the code in the view is in the wrong place and needs to be moved. A model is clearly the best place for it.
And whats the difference between that and, in the future, changing the public variable declaration to private with get/set methods [if you need to](http://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It)? 
Gang of 4 design patterns: http://www.dofactory.com/Patterns/Patterns.aspx My suggestion is to learn design pattern as a general concept rather than PHP in general. Once you learn the concept, you can carry the concept to any language. Its like learning for loops. You don't have to learn it per language, just the general concept. Once you learn the basic concept, you can port it to any language.
This is strange. I lived in the UK from birth and I am a resident but I was unaware it was so hard to get in to the country. I thought especially with you being inside the EU that it would be very simple to come over here to work.
&gt; As for the builtin libraries, those are framework specific - if you decide you don't like the framework you can't really use it. You can of course branch the source code and try to maintain it separately from the framework, but there's no telling how much work that will be. And bringing your favorite library to any framework is of course possible, but suffers from the same problems. That is not necessarily true. I use symfony on a day to day basis, but when I need a library for something that is not part of a framework, I quickly load a Zend library for that (and I don't require the whole framework for that, just the autoloader and the exact library). If I wanted to move out from symfony (of course that will not happen), I can take with me all my classes, the ORM, and domain classes. The only thing I have to rewrite somewhere else is the routing part and the user authorization/authentication. Everything else can be copied across. This is even more so with symfony 2 (I'm currently working with 1.4 and even that one gives me that liberty).
Reuse open source stuff as much as possible. Write meaningful user documentation and use docblocks properly so that modern editors can take advantage of it.
Yeah I kinda took two extremes there, db versus frameworks, simply because I have no idea how much PHP this person knows. But yes, classes are required to be understood before tackling an entire framework.
&gt; CakePHP \*shudders\*
Or you know, I'm just having fun. But that's a highly unlikely scenario. 
I've wondered about this as well. Why no bulletin board or CMS written in CodeIgniter or the like?
Prepared statements, parameter binding.
It's a meme. It's not fucking rocket surgery.
I have always used Beanstalk with great success: http://adam.heroku.com/past/2010/4/24/beanstalk_a_simple_and_fast_queueing_backend/
Look into xdebug. It becomes very valuable when you've got a deep call structure.
Sounds like you haven't started OOP. You will always be using globals like $_GET, $_POST etc, and you will always be using built in functions. Even in your own functions, you will use built in functions. Same with any language. It sounds to me like you've hit the ceiling with what's to be learned with procedural programming, and are ready to move onto object orientated programming.
Uh, I was quoting another famous Zen Koan of Programming: http://en.wikipedia.org/wiki/Hacker_koan#Enlightenment Next time, perhaps get some fucking history before you downvote?
My horizons expanded once I started learning about design patterns. Once you get a few under your belt you start to see them everywhere. Since they are intended to solve a common set of problems, your decision process becomes a bit more succinct when you get to use them as a vocabulary. They are kinda the express lane to the final solution. I'd start here: http://www.fluffycat.com/PHP-Design-Patterns/ [These](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod) help too. As you start reading other peoples code, these concepts will help your understanding of where the decisions they made came from. 
drupal 8 and phpbb 4 are botth going to use components from symfony2 last i had heard.
This sounds interesting, I have some knowledge of OOP and using classes from another language. What is something I can build using classes so I can get practice with the concept? We have been building some sites that are modular, in that the header, footer, nav, body are all separate pages and sewn together using include(), is using classes something similar?
Does productivity scare you? What don't you like about it? 
HAHAHAHA. I love productivity, just not CakePHP. For a PHP framework I prefer CodeIgniter. I just don't like ACLs.
CI was our second choice. The conclusion we reached is that it's better than no framework at all, but we were able to do a lot more with Cake. If you don't like ACL's don't use them! That's not a CakePHP problem :-P
When I log into my Xenix system with my 110 baud teletype, both vi and Emacs are just too damn slow. They print useless messages like, ‘C-h for help’ and ‘“foo” File is read only’. So I use the editor that doesn't waste my VALUABLE time. [Ed, man! !man ed](http://www.gnu.org/fun/jokes/ed.msg.html) ED(1) Unix Programmer's Manual ED(1) NAME ed - text editor SYNOPSIS ed [ - ] [ -x ] [ name ] DESCRIPTION Ed is the standard text editor. --- Computer Scientists love ed, not just because it comes first alphabetically, but because it's the standard. Everyone else loves ed because it's ED! “Ed is the standard text editor.” And ed doesn't waste space on my Timex Sinclair. Just look: -rwxr-xr-x 1 root 24 Oct 29 1929 /bin/ed -rwxr-xr-t 4 root 1310720 Jan 1 1970 /usr/ucb/vi -rwxr-xr-x 1 root 5.89824e37 Oct 22 1990 /usr/bin/emacs Of course, on the system I administrate, vi is symlinked to ed. Emacs has been replaced by a shell script which 1) Generates a syslog message at level LOG_EMERG; 2) reduces the user's disk quota by 100K; and 3) RUNS ED!!!!!! “Ed is the standard text editor.” Let's look at a typical novice's session with the mighty ed: golem$ ed ? help ? ? ? quit ? exit ? bye ? hello? ? eat flaming death ? ^C ? ^C ? ^D ? --- Note the consistent user interface and error reportage. Ed is generous enough to flag errors, yet prudent enough not to overwhelm the novice with verbosity. “Ed is the standard text editor.” Ed, the greatest WYGIWYG editor of all. ED IS THE TRUE PATH TO NIRVANA! ED HAS BEEN THE CHOICE OF EDUCATED AND IGNORANT ALIKE FOR CENTURIES! ED WILL NOT CORRUPT YOUR PRECIOUS BODILY FLUIDS!! ED IS THE STANDARD TEXT EDITOR! ED MAKES THE SUN SHINE AND THE BIRDS SING AND THE GRASS GREEN!! When I use an editor, I don't want eight extra KILOBYTES of worthless help screens and cursor positioning code! I just want an EDitor!! Not a “viitor”. Not a “emacsitor”. Those aren't even WORDS!!!! ED! ED! ED IS THE STANDARD!!! TEXT EDITOR. When IBM, in its ever-present omnipotence, needed to base their “edlin” on a Unix standard, did they mimic vi? No. Emacs? Surely you jest. They chose the most karmic editor of all. The standard. Ed is for those who can remember what they are working on. If you are an idiot, you should use Emacs. If you are an Emacs, you should not be vi. If you use ED, you are on THE PATH TO REDEMPTION. THE SO-CALLED “VISUAL” EDITORS HAVE BEEN PLACED HERE BY ED TO TEMPT THE FAITHLESS. DO NOT GIVE IN!!! THE MIGHTY ED HAS SPOKEN!!!
**rocket** **surgery** Now repeat with me: **rocket surgery** Never mind.
Unless you're using 100% of your framework (which no one does), it's adding *unnecessary complexity* to your codebase.
What, are you used to some kind of non-biological rocket that doesn't require regular surgery?
Heh, true. I guess it's just better to know that the variables might change in future, when they are private.
Think about classes as concepts. Every concept has a name, and few application properties. And we'll go with a small example. Consider the concept of a blog post. abstract class Post { abstract public function isPublished(); abstract public function isSticky(); abstract public function getTitle(); abstract public function getBody(); } Seems legit, right? Because a concept is indeed an abstract object: &gt; There are prevailing theories in contemporary philosophy which attempt to explain the nature of concepts. The representational theory of mind proposes that concepts are mental representations, while the semantic theory of concepts (originating with Frege's distinction between concept and object) holds that they are **abstract objects**. And for any concept you need a proof, a concrete can be a truth. class PublishedPost extends Post { public function isPublished() { return true; } public function isSticky() { return false; } public function getTitle() { /* some title */} public function getBody() { /* some body */ } } class UnpublishedPost extends Post { // some similar extensions as above, just isPublished to return false } class ScheduledPost extends Post { // is published false } It's important for you to understand this, and everything you will learn about OOP will make sense; and you'll understand what I'm talking about.
Not a dumbass question. I've wondered for a while now what the drawback to creating a REST API for anything data-related would be. With reasonable security behind most things, you could have essentially a full API layer for your application and everything else could interchangeably sit on top of that. 
I couldnt agree more, its just so inherently flexible and easy to use its always my go-to choice.
When I was learning I was lucky enough to have someone tell me its better to use || and &amp;&amp; then OR and AND
Just seeing how hard you are fighting for this makes you seem like a PHP noob who leaves white spaces all over the place.
Ah now that is an excellent strategy. Much appreciated.
Or you can declare __set() and __get().
No it's not. Lazy loading means performance wise you're only using what you're using and a proper architecture ensures that not only will you not add complexity but you will actively make it easier to understand what's going on. It honestly sounds like you think all frameworks are invasive like for instance CakePHP.
I hate PayPal and they seem to be really bad at what they do. They took down a fundamental part of the API service for 2 weeks then whey the release a new version it broke a lot of accounts and other parts of the system that took another 2 weeks to get up. I would never work for them.
[this post](https://plus.google.com/112678702228711889851/posts/eVeouesvaVX) is peripherally related - how Amazon had to make APIs for everything, and how that turned out. Interesting read.
REST is the usual way that the web works. It's how HTTP works, for example. Don't be conned into thinking it's more complicated than just another term to describe how HTTP or web pages work. It's basically saying the client requests "something" from the server, which is a representation of something (in HTML, or XML, or PDF, or JSON, or whatever), and the server returns "something". 
[Remi's repo](http://blog.famillecollet.com/pages/Config-en) seems to have [RPMs](http://rpms.famillecollet.com/enterprise/5/remi/i386/repoview/letter_p.group.html) for Gearman, but I don't see one for drizzle. Can't you connect to drizzle using the normal MySQL library? Keep in mind that you'd need to upgrade PHP to use that RPM. This is probably for the best. (Remi helps maintain PHP for Fedora, so he's credible.)
Pro Tip: to store an array into a database you can serialize it then unserialize it when you pull it. (if you have user generated data make sure its been scrubbed clean first)
GET, PUT, POST, DELETE... and the proper HTTP response codes An example off the top of my head is when accessing a resource without proper authorization, you shouldn't get a 200 and/or 302 to a login page. You should get a 401. I'm certainly no expert on REST but a lot of the web actually is not RESTful. In fact you can't fully implement REST for web browser user agents without using javascript because PUT and DELETE are not supported.
I am like that, it is mostly because when I come across something like a template engine which has multiple levels of class iheritence and it does everything anyone could ever want, I take a look, notice what I want can be done in 10 lines of code and two methods in about 10min which then I know exactly how it works, how to troubleshoot. In my eyes a framework is just a whole lot of nonsense which tries to structure code the way I generally code anyway, but when I am finished my project isn't sitting on a base of code which requires updates and bug fixes related to the updates. And I haven't got an army of bots trying to exploit my framework whenever a exploit is found. I reuse a lot of my own code but I can pick out the reusable classes.
It's not always a bad thing, but I've observed that what many times starts out as a "bare bones" project actually ends up a behemoth anyways, sometimes in code and other times as wasted time. Those 10 lines might get you 90% of the way there, but that last 10% might require 10x's the code &amp; time to complete, and that's the best case scenario where one doesn't suffer from the [Dunning–Kruger effect](http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect) and can identify the problem spots beforehand (and likewise design the system to handle it). However, it's very easy to gloss over important details as they may seem insignificant at the time, only to realize too late that your current _barebones_ architecture can't handle the requirements to implement that last 10%. You are right in that many times, a framework will provide a lot of YAGNI code, but then again, it's a means to an end -- the end being a highly flexible system that can easily adapt to different scenarios. If you work alone and only develop certain types of sites, then a big framework won't help much. However, if you're in a webshop churning out customer sites of all kinds, then it usually makes sense to go with a framework. You bring up bug fixes, security, updates, etc. and I'd just like to say that, for me, I'd _much_ rather spend my time on implementing features and getting stuff out-the-door than on fixing bugs. Yes, frameworks have bugs, but the power is you have 100's (or 1000's) of eyes on those bugs and rigorous QA testing for each release, not to mention the dedicated teams (some sponsored by corporations) of professional devs fixing those bugs. OTOH, if you write your own framework then you're still going to have bugs, with the difference there being that a) someone has to find &amp; report them (and if you're in a small shop, you probably don't have just a whole lot of useful QA), b) someone has to fix them.
Which is more of a failing of the browser than anything. The primary usage of a browser is to GET a resource, and update the resource/create the resource (via POST, though I think PUT should be used to create resources). The rest of it still stands though. Errors are detected by HTTP response codes, URIs are used to pull up resources.
Many of the larger frameworks have routers that aren't very REST focused. I would say that RESTful principals are most important if you are dealing with serving data, but not as important if you are serving webpages.
I think you have a different idea about what REST is. REST is the style of architecture where there is a client and a server, and it's stateless, and the client requests a certain resource from the server and the server sends back a representation of that resource. Nothing more. REST does not always mean HTTP; HTTP is just the prime example of a protocol that uses a REST architecture. GET, PUT, DELETE and other methods come from HTTP (there's also WEBDAV) which as I've mentioned before is unrelated to REST since REST only refers to the style of architecture. You can invent your own protocol and still be using REST. REST is also nothing to do with Javascript since Javascript is nothing to do with what goes between client and server. If you are referring to using Javascript for REST then you are off track somewhere. 
That was a damn good read. Thanks for sharing it.
So you're saying that a network of munin or nagios nodes providing data to a central monitor is a REST architecture? That's an interesting way to look at it.
PUT can only be used to create resources if you know the URI for the resource ahead of time. Otherwise you can do a POST to the resource's collection and it will give you the URI for your new resource.
In the system I usually work in we have a Model in the form of an ActiveRecord class which has a controller premade for it called CRUDRequestHandler with proper GET, PUT, POST, DELETE. We also have a similar controller called RecordsRequestHandler which facilitates everything through just GET and POST. Ideally you'll want the model and controller code to be in classes representing an abstract model and an abstract controller. This way you can have robust default implementations which can easily be extended.
I took this approach with the "storefront" parts of my software (order, KB and customer area). It's worked out great.
I didn't mention munin or nagios anywhere, not sure where that came from but it wasn't me. I don't know what protocol munin or nagios use to report to a central monitor, or whether that protocol is REST based or not so I can't comment. 
You don't go to SLCC do you? That's exactly how I feel.
Take a look at first-class apis if you get the chance; it seems to be exactly what you're interested in. REST apis are usually accessed via HTTP though, and HTTP isn't exactly known for its speed. That's probably the biggest drawback of what you'd commonly define as a REST api. This is why accessing data in couchdb is really intuitive but slower than accessing data in something like mongodb.
Sorry. Those two systems work in very roughly the same way. Imagine a central monitoring computer which may or may not be talking to itself. It connects to a monitored computer on a specific port (probably not 80 (the webserver port)). It says something like "filesystem check" and the monitored system says something like "OK, 80" or "WARN, 90" or even "CRIT, 95" . It's stateless. I have the client/server backwards, but that's easy enough to imagine switched around. The monitoring system requests a certain resource. The monitored system gives back a representation of what the monitor asked for. It's not in JSON or HTML or XML or any particular mark up. You didn't mention it, but your description of client/server and your rejection of HTTP methods kind of called that association up for me. And thinking of that spiderweb of monitors as a REST architecture is interesting. :)
The point of this thread was creating a class without any methods. Otherwise - yes, magic methods such as __get/__set/__call would be ok.
I end up realizing everything should be an API on pretty much every project I do - usually after I've already made design decisions that screw that up. OP, based on my experience, yes, you pretty much want to make sure all your data is available via an API, and you will most likely find REST the simplest. My controllers' methods usually just detect if it's an API call and serve JSON or just return native arrays/objects otherwise (with the ability to override as needed). If you build this way, you can be sure your API will be solid and functional, and it also ends up making the design a lot clearer in your own head.
Glad somebody else feels the same! I go to CCSF though.
Even if you're not actively dealing with that complexity, it doesn't mean it's not there.
Do you use any particular framework to handle returning the JSON?
"But I'll argue that Accessibility is actually more important than Security because dialing Accessibility to zero means you have no product at all, whereas dialing Security to zero can still get you a reasonably successful product such as the Playstation Network." Heyooooo :D
RTFM
Parents still don't know how to use the DVD player, even though they figured out how to program the VCR &amp; Laser Disk back in the day(they don't have either now, thankfully). Odds are if you figured it out once you could do it. I have hope for you. But on the other hand I am all for letting them struggle a bit.
It's usually a *ID:10-T* error.
Service Oriented Architecture is an excellent way of structuring the foundation of a (probably large, needfully performant) code base. In the future you can rewrite your service layer in some thing incredibly performant, change the backend, cache etc. without any of your applications (written on top of the data api) breaking. You also learn to write for your platform in the way developers/partners will have to, so you produce a good quality usable API which encourages development and consumption of your platform. 
PC Load Letter? WTF does that mean?
NO NO FUCKING IDEA LOL
I use the saying, "Would you ask a Chemical engineer to build bridge?" Generally the response should be, "Uh, no" - Then reply, "Then don't fucking ask me to fix a printer, I'm not in technical support" ::Evil Grin::
I don't know, as a web developer myself I think it's usually safe to assume developers have a fairly solid general understanding of "computer stuff". Ofcourse we don't want to fix a printer though :)
Fairly sure anyone who claims to know how to work a printer is a DIRTY DIRTY LIAR! Those things aren't designed to work, they're designed to cause ultimate frustration.
[Relevant](http://theoatmeal.com/comics/computers)
Maybe pipe stderror to a file and read the contents? I'm sure I've run sys stuff using exec and it worked fine, even grabbing stderror, so I'm not sure what your problem is. I'd write a little shell script that echos some stuff and throws some errors messages.
Up vote for evil grin. However this expression takes some work to master. Stroking of the chin helps to aid in the evilness of the grin as well.
The insult added to injury is that the traditional media tools who *do* have experience in using a fucking printer are off making shitty brochure website designs that don't follow the box model or take advantage of digital media.
How can you be a web developer and have no idea how to work a printer?? It's not rocket science. My grandmother knows how to use a printer ffs.
Hey man, can you program my VCR?
Let them know the issue is between the monitor and the chair.
How would you go about that? Tried the following with exec, system etc.: mysqldump -v -C -hHOSTNAME -uUSERNAME -pPASSWORD --skip-lock-tables DATABASE | mysql -C -hHOSTNAME -uUSERNAME -pPASSWORD DATABASE Gives nothing in output. mysqldump -v -C -hHOSTNAME -uUSERNAME -pPASSWORD --skip-lock-tables DATABASE 2&gt;&amp;1 | mysql -C -hHOSTNAME -uUSERNAME -pPASSWORD DATABASE Gives an "you have an error in your syntax" since the error from the first command is sent to subsequent mysql command. mysqldump -v -C -hHOSTNAME -uUSERNAME -pPASSWORD --skip-lock-tables DATABASE 2&gt;&amp;1 | mysql -C -hHOSTNAME -uUSERNAME -pPASSWORD DATABASE 2&gt;&amp;1 Gives nothing in output. `mysqldump -v -C -hHOSTNAME -uUSERNAME -pPASSWORD --skip-lock-tables DATABASE | mysql -C -hHOSTNAME -uUSERNAME -pPASSWORD DATABASE` 2&gt;&amp;1 Gives nothing in output.
&gt; but when I am finished my project isn't sitting on a base of code which requires updates and bug fixes related to the updates. Actually it most likely is, chances are you just don't know about it. When you do know about it it's your job to fix it, other people won't do it for you. &gt; And I haven't got an army of bots trying to exploit my framework whenever a exploit is found. So you don't put stuff online?
Happens to all of us. Use a similiar analogy: would you like to have a brain surgery made by your internist or dentist.
IMHO you're trying to do too much in a single line of code. I'd write a little script file and add everything into that (I'd save the DB dump in a &lt;date+time&gt;.sql file somewhere (zipped,) then read that into the database.) But regardless of how you organize your script, you want to do something like: command -param1 -param2 | command_2 -p1 -p2 &gt;/var/log/my.log 2&gt;/var/log/err.log You're sending all the messages to /dev/null, and you're telling stderror to go to where stdout is going (/dev/null) I'm no linux command line guru, so google round for more answers :)
Did Google or else I wouldn't be asking here ;) Maybe I am trying to do to much, but it doesn't seem impossible to me. http://stackoverflow.com/questions/566248/cant-execute-php-script-using-php-exec adding &amp; doesn't seem to work though.
It's like saying if you're a Taxi driver you should be able to fix cars.
PEBKAC
&gt; they don't have either now, thankfully They really should. Get them a VCR for Christmas. GF and I use one, and we're in our mid-twenties. Easiest (low-def) way to record shows. DVR? Pah!
I consider NetBeans (free) a close 2nd to PhpStorm. These both particularly well comprehend your code, PHPDoc comments, and return types. Particularly getting into OOP, frameworks, PDO, etc. you'll want that for autocomplete goodness.
Notepad adds invisible characters to the file. (windows carriage returns)
The only web you develop is a web of lies! Now fix my printer!!!
As a developer one of my strongest skills is resourcefulness. I'll fix that printer, or build you a new one at a reasonable rate :)
Outsourcing print support was our best fucking decision
I always get can you do a web page for me...
PICNIC
I always thought it better that PUT be used to create resources, and POST to update, so the other way around. For example, you'd PUT a new blog post up against /api/posts (and the API should inform you of the new resource's URI), and if you updated it you'd POST against /api/posts/1 (this is somewhat ambiguous). PUT and POST have always seemed somewhat at odds in REST in my opinion, with some people thinking like me and some people thinking like you. '[RESTful Web Services](http://www.amazon.com/gp/product/0596529260/ref=as_li_ss_tl?ie=UTF8&amp;tag=chrp-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596529260)' by Richardson and Ruby is what I base my current preference on: &gt; * Retrieve a representation of a new resource: HTTP GET &gt; * Create a new resource: HTTP PUT to a new URI, or HTTP POST to an existing URI [...] &gt; * Modify an existing resource: HTTP PUT to an existing URI &gt; * Delete an existing resource: HTTP DELETE The ambiguity for me is what is the difference between modifying an existing resource vs posting a new resource in place of an existing one. I think that's updating a resource, but since PUT should be used to create new resources, POST should then update them.
In your original comment you stated that REST is how the Web works. HTTP is an application protocol. Much of the World Wide Web, which uses HTTP, is not RESTful because it does not adhere to the constraints of REST architecture. Sure, other application protocols that make use of representational state transfer can have REST architectures. But they too require a uniform vocabulary, a well-defined interface, and built-in capabilities that do not require the introduction of new features on top of that application. In the case of HTTP, which is what the OP is referencing, URI's, HTTP methods, and response codes are part of the well defined interface that allows a RESTful architecture. You're correct that REST architectures require the client/server model, statelessness, and the transfer of a representation of state. But you're leaving out a couple of constraints, one of which is considered fundamental to what makes a service RESTful. If you're using POST to delete a resource, then your service is not RESTful. If your service is based on SOAP, you're likely using HTTP, but your service is not RESTful. The use of HTTP itself is not enough to call it using REST.
&gt; they're designed to cause ultimate frustration. Can you elaborate on this? My only frustration is that they're slow, but then again I habitually avoid printing unless I have to.
Better cab drivers would. If the cab stops, you stop making fares.
Of course it's improper. It's not *needed*, but it is improper. It's the same thing as omitting a `&lt;/html&gt;` or a `&lt;/body&gt;`.
Tell them you're a PHP developer and so if they have a problem you'll fix it like a PHP developer. When the time comes to take care of a PC Load Letter issue send them 15 googe links with 15 different solutions. 
Yes, and certainly in many (most?) other programming languages switching public class variables to private without breaking existing code is not possible like it is in PHP, so using getters/setters is a good habit to get into. As long as you understand that, and don't go doing the same thing in Java/C++/etc, then it's all good. 
Maybe he has never really had the need to use one. 
"Oh you can build websites... I have this idea [inject old, bad, stupid idea here] AND what's more... if you build it for me, I'll give you 40% ownership so if it takes off we'll both get rich!" ::sigh::
He is a PHP developer after all. 
So, are we talking &lt;? print("Hello"); ?&gt; or &lt;script&gt;window.print()&lt;/script&gt; ? Those are the only printers I know how to work.
ouch.
 &lt;marquee&gt;this is web 2.0, amirite? synergize, leverage, rockstar developer... &lt;/marquee&gt;
If you have routines/stored procedures mysqldump does not export them by default. You'll need to pass **--routines** as an argument.
It needs social networking capabilities, right? The next Facebook, I'm sure.
Mines is.. I'm a web developer, oh cool can you design me this in photoshop? No. I can cut up PSDs, but can i f*ck draw anything!!
Usually it's "hey I have this great idea, can you build me Facebook, but better? I'll make millions." and they are 100% serious. Otherwise they usually ask me to "whip up a site"...for free. Yeah okay, I'll get right on that. Also I'm not a graphic designer. 
Yeah but it will be better than facebook. They have a few friends who heard the idea and love it, think facebook meets ebay meets youtube. It probably won't even take you that long to build or plan because it's such a simple idea. But... before they can say anymore you really need to sign the NDA.
print_r prints everything too; the difference is that var_dump displays also information about the type and length of a field $obj = (object) array('qualitypoint', 'technologies', 'India'); var_dump($obj) will display below output in the screen. object(stdClass)#1 (3) { [0]=&gt; string(12) "qualitypoint" [1]=&gt; string(12) "technologies" [2]=&gt; string(5) "India" } And, print_r($obj) will display below output in the screen. stdClass Object ( [0] =&gt; qualitypoint [1] =&gt; technologies [2] =&gt; India )
We don't but good to know, thanks :)
Why does it say paper jam when there is no paper jam? I swear to God, one of these days, I just kick this piece of shit out the window.
When people hear I work with computers--suddenly I know everything tech related...including refrigerators, washer/dryer, TV's, Optical Media, Lighting, etc... 
&gt;Tell them you're a PHP developer and so if they have a problem you'll fix it like a PHP developer. Blame it on the user? "I think these guys need more training"
Nope. No need to, I don't think?
When people (this doesn't apply to prospective clients) find out I'm a web developer, they usually ask how much it costs to build a website. I tell them it depends on the scope of the project. Then they ask, "well how much for just a basic website?" My reply is the same. They walk away upset. I'm sorry I can't read your mind and predict what your needs are.
we're generally good at problem solving/trouble shooting which just means we can Google stuff and figure things out.
What is the difference between dentists and sadists? Newer magazines.
Tell them the fix will need a build and when they say 'ok that's fine' tell them you can't do a build because you're in a code freeze. Rinse repeat.
To be fair, a humorously shitty website can be whipped up fairly quickly. Standard font and a horrible tiled Bg image :D
It's ok, *nobody* knows how to work printers.
TUIAFI (The User Is A Fucking Idiot)
print_r wont print variables that aren't arrays and don't have a visual representation. For example, using print_r vs var_dump on a boolean value: Forge:~ brianbot$ echo "&lt;?php print_r(false);" | php Forge:~ brianbot$ echo "&lt;?php var_dump(false);" | php bool(false) Forge:~ brianbot$ 
Load more letter-size paper into the paper cassette :D
It's not "a" printer as much as "every printer" -
If we break it down: **PC** is Primary Cartridge or Primary Carrier. Some printers have, or have the option to upgrade to, multiple slots for paper. This part of the message is telling you the fault is with the Primary paper slot. Not the Manual feed or the Secondary tray. **Load** is pretty straight forward. It wants you to load something in to the Primary Cartridge. It's expecting something. **Letter** is the name of of a measurement of paper. There's Letter, Legal, A4, etc. Letter is the most common in North America, 8.5x11 inches. So, all together, it wants you to load letter sized paper in to the Primary Cartridge. However, this may not necessarily mean the Primary Cartridge is out of paper. The PC may be loaded with legal size paper, but the job you sent to the printer requires letter size paper.
You forgot ninja.
I want you with me every time I go to fix a printer.
you aren't providing enough information for anyone to help you. - what exactly are you searching? - how much data are you filtering through? - how is that data stored? - do you have the ability to change how that data is stored if need be? heck, if it's just an HTML table and not a ton of data, you could achieve this using javascript - and even more easily with the help of a library like jQuery.
Thanks for reply! I'll try to add some more info. I'm building a site on a [cms](http://www.ekklesia360.com) which is where I am entering the content. My search will be searching a list of churches that were entered in the backend of the cms. It looks like there are about 50 different churches total. The main problem I see is that the cms is not self hosted and I don't have direct access to the database which probably answers your last question. 
if the CMS is not self hosted, and you don't have direct access to the database, then you need to learn how the CMS works and maybe ask them for help at your hosting provider... The *right* way to access that data is going to be via the CMS, which should provide you some means of accessing it. You should really look at the documentation for the CMS, and if you get stuck, contact their support. This isn't really a PHP question - it's a question about that CMS.
For me, they usually figure "web developer == programmer" and tell me how their relative is hiring programmers for his company. When I look into it, 9 times out of 10, they sell a niche industry's back-office program written in .NET and WinForms.
This is a garbage post, and it needs deletion.
that's enough to fix most printer problems, after turning it off and on again
I usually get this: Them: "Hey, I have this amazing idea that will make bazillions of dollars!" Me: "Oh really? What is it?" Them: "I can't tell you, but could you build it?"
Ok that actually helps a lot thanks. Unfortunately their documentation doesn't really give me any help but I did contact them so I'll see what they say. 
1.) exactly what I said "var_dump displays also information about the type and length of a field" 2.) actually print_r prints the string representation of FALSE which is an empty string ... try it with print_r( TRUE )... 3.) most importantly, print_r supports return so you can do something like $debug = print_r( $myData, $return = TRUE ); &lt;-- much nicer than using an ugly ob_start/ob_end_flush
The closing tag at the end of a file is optional, and the manual even recommends omitting it. "The closing tag of a PHP block at the end of a file is optional, and in some cases omitting it is helpful when using include() or require(), so unwanted whitespace will not occur at the end of files, and you will still be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at the end of the parts generated by the included files." http://php.net/manual/en/language.basic-syntax.instruction-separation.php 
I'm in the National Guard, studying computer science. I am innundated with IT questions, and then people think *I'm* stupid for not knowing the "master windows password" (real question). My response is usually something like "So you are in the military huh? Know how to fly a jet? A helicopter? Use a howitzer? Guide a cruise missile? Fly a predator drone? I guess your a pretty shitty soldier, huh?"
Since your CMS is hosted, I assume the only programming you can do is via Javascript. If there's a way to grab a list of all the users from a div via .load or something, you should be able to store them in an array in javascript and filter with that.
Its like saying if youre a commercial airline pilot you should know how to fix the luggage conveyor belt in the airport.
What cms are you using?
"Do you get your podiatrist to work on your teeth? Well why not, they are both medical doctors. So why do you think someone who knows how to do something in one specific area of computers automatically knows how to do everything else? You also don't ask you cardiologist about your head cold, that would be beneath his level of expertise." - How I explain it.
No that would be like saying if your a cab driver, you should know how to fix the software on the dispatchers computer. However many pilots are taught CFDS procedures and know how to fix many things on an airplane. 
I think I've cheated and started in Step 9 learning PHP with a framework studing its code. It went well since I was able to show results to my employer much faster. And I've always had design patterns in mind since when you use a full stack framework this is mandatory.
"Oh you're good at computers? Can you hack my friend's facebook account?"
Well, I can use php to interact with their api but it's limited. Also, I might misunderstand you but the users (or churches in this case) aren't listed in a div but in the database. 
www.ekklesia360.com
I always use "The problem could be corrected by replacing the user"
*Objects as data structures. Classes specify an object, and although you can fill the static variables of a class, you cant pass a class.
Same, but I like to put the comma at the beginning of the line, so its like this, because it makes a special case out of the first line, not the last one. array( 'a' =&gt; 'apple' ,'b' =&gt; 'banana' ,'c' =&gt; 'carrot' );
Have the user fill out a PU-55Y form outlining why he is too afraid to use some Google magic to fix it himself.
Printer won't print? Check the PHP documentation.
Oh snap.
I especially love it when I say, "Yea, I use a Mac so I don't have to deal with shit like that". My linux loving 10 year younger self hates me.
Is there a particular reason to why you are using this one?
Right, but is there any way for you to get a list of the users? If you can, they're probably stored in a div on whatever page lists them all, which you could query with jQuery.load and specify the ID of the div to pull them all out.
Ohh ok I see. I will definitely look into that thanks!
Maven! Prosumer! Social networking! Ugh.
It's what I was contracted out to use. Although there are quite a few problems It's actually not bad for a basic site and once you figure out the api you can get sites completed pretty fast. I am more comfortable with WordPress but c'est la vie. 
That's the worst for me. Someone needs a database in some ungodly form of normalization? I'll hate them, but as long as the form exists I can probably do it. Design something that looks good, is artistic, and has lots of graphics? Heh, how about no.
You are just using semantics, not interested in arguing.
I think you might see a productivity gain by switching to an MVC style. Check out CodeIgniter for a simple example of an MVC framework to borrow ideas from. Even if I was not using a framework, the MVC style is something you may wish to try to adhere to. This also involves the [Front Controller pattern](http://en.wikipedia.org/wiki/Front_Controller_pattern) with an .htaccess file to send all the dynamic requests to a single file, where they are routed depending on the request URL.
OK thank you for this. If anybody knows a good tutorial on how an MVC framework works and how I can build one for myself much appreciated if you can post a link in this thread.
you don't really build your own framework - use whats there. I personally love CodeIgniter because its lightweight and simple. AND it comes with an entire tutorial within it. 
Here's a class that will dump a database remotely (I use it whenever I need to backup a remote DB, but don't have shell access). This should produce a text file compatible with `mysqldump` https://gist.github.com/1440056 use it like: &lt;?php header('Content-type: text/plain'); // you want a text file, not any html include_once("MySQLDumper.php"); // do authentication, or something to protect access if ($authenticated) { $dumper = new MySQLDumper('hostname', 'user', 'p@ssw0rd', 'my_db'); echo $dumper-&gt;dump_database(); } ?&gt; The next part would be to curl it into mysql locally: curl -s http://example.com/database-dumper/index.php | mysql -uUSER -p my_local_db you could use wget, but I hate wget and don't know it's syntax to output to stdout
Most ORMs will to this using "active record style" query-builder classes e.g. -&gt;where('a = ?', array('a')) -&gt;orwhere('b = ?', array('b') -&gt;orwhere('c = ?', array('c')) personally when I've done it in the past I've found it much easier to use named placeholders instead of ?s e.g. "a = :first-param" as you can store/access them in arrays more easily. Generally speaking you will probably have to wrap PDO in your own query-builder class or it could get verbose. Something like this but written in more than 5 minutes... class QueryBuilder { private $_columns; private $_tableName; private $_where = array(); public function select($columns){ $this-&gt;_columns = array_merge($this-&gt;_columns, $columns); return $this; } public function from($tableName){ $this-&gt;_tableName = $tableName; return $this; } public function where($column, $value){ $this-&gt;_where[] = array('column'=&gt;$column, 'value'=&gt;$value); return $this; } public function getPdoStmnt(){ //error dbh is undefined - get it form somewhere $sth = $dbh-&gt;prepare($this-&gt;_getSql()); foreach($this-&gt;_where as $key=&gt;$where): $placeholder = ':'.$where['column'].'_'.$key $sth-&gt;bindParam($placeholder , $where['value']); endforeach; $sth-&gt;execute(); return $sth; } private function _getSql(){ $sql = array(); $sql[] = $this-&gt;_getSelect(); $sql[] = $this-&gt;_getFrom(); $sql[] = $this-&gt;_getWhere(); return implode("\n", $sql); } private function _getSelect(){ return 'SELECT '.implode(', ', $this-&gt;_columns); } private function _getFrom(){ return 'FROM '.$this-&gt;_tableName; } private function _getWhere(){ $whereStatement = array(); foreach($this-&gt;_where as $key=&gt;$where): $whereStatement[] = (count($whereStatement) &gt; 0) ? 'AND' : 'WHERE'; $placeholder = ':'.$where['column'].'_'.$key $whereStatement[] = $where['column'].' = '.$placeholder; endforeach; return implode("\n", $whereStatement); //return WHERE id = :id_0 AND id = :id_1 AND title = :something_0 } } then ... $query= new QueryBuilder(); $query-&gt;select(array('id', 'title')); -&gt;from('somewhere'); -&gt;where('id', 1) -&gt;where('id', 2) -&gt;where('title', 'something'); $result = $query-&gt;getPdoStmnt()-&gt;fetchAll(); note: this probably wont actually work - I've not used raw PDO in a while but the basic premise is right AFAIK. 
I can briefly explain it to you. All page traffic passes through the front controller. An URL such as the following: http://www.domain.com/portfolio/id/5 Would be rewritten to: http://www.domain.com/index.php?path=/portfolio/id/5 Or: http://www.domain.com/index.php/portfolio/id/5 The path can be retrieved using $_GET['path'] or $_SERVER['PATH_INFO'] respectively. The path is then handed over to the router. The router is a class containing patterns for identifying the current path, and with which controller it belongs with. The router runs through these patterns, matches them against the given path, decomposes the path into parameters and then hands over these parameters to the dispatcher. The dispatcher is tasked with instantiating the controller and calling the action of that controller based on the parameters received. It also calls a preDispatch() method before the call, and a postDispatch() method after, as well as setting parameters to default values if not set. 
this wont bind the parameters
Ahh the IN clause... You know that one thing that you can never seem to remember but it comes up all the time? Yeah, that about sums up my relationship with the IN function. Anyway, thanks for the post... Either I'm crazy or you never used the BIND function... Although the data I'm using to query with is coming from the database (erm comes from the database and then is thrown into memcache) I want to be sure that there isn't any SQL injection going on. I suppose the crux of my question is how the bindParam function works. Let's look at this example: $pdo-&gt;prepare('Select name FROM tickets WHERE ID IN(?, ?)'; $value = 1; $pdo-&gt;bindParam(1, $value, PDO::PARAM_INT) $value = 2; $pdo-&gt;bindParam(2, $value, PDO::PARAM_INT) What would happen? Would I end up with WHERE ID IN(1,2) or would it be (2,2) To give you a little more background (not that you should care and not that it's really relevant to the topic) I essentially have comma separated values stored in memcache which I'll explode into an array (merge with other memcache values if necessary) and then dynamically bind them. (
Use question mark placeholders to bind and pass an array of values directly to execute(). No need to bind in foreach. $possibleValues = array('v', 'b', 'c'); $in = rtrim(str_repeat('?,', count($possibleValues)), ','); $sql = "SELECT something FROM table WHERE column IN ($in)"; $stmt = $pdo-&gt;prepare($sql); $stmt-&gt;execute($possibleValues);
Use bindValue in that case. With bindParam you'd end up with (2,2) since the vars you pass are evaluated at the time of the execute()
You can, you just have to build the query dynamically as well. In that case you are miss out on the built in caching of prepared statements and you would probably do just as well if you sanitized them yourself. Myself, I would probably just use PDO anyway, for consistency. Here is the gist. Note the colons in the data array. You need them at somepoint for the named parameters. $data = array( ':col1'=&gt;$col1, ':col2'=&gt;$col2, ':colN'=&gt;$colN ); $cols = array_keys($data); $sql = 'SELECT * FROM table '; foreach ($data as $k=&gt;$val) { if($k === 0) { $sql .= sprintf('WHERE %s = %s', $cols[$k], $val); } else { $sql .= sprintf('OR WHERE %s = %s', $cols[$k], $val); } } $stmt = $dbh-&gt;prepare($sql); // Either this: $rs = $stmt-&gt;execute($data); // or this foreach($data as $col=&gt;$val) { $stmt-&gt;bindParam($col, $val); } $rs = $stmt-&gt;execute(); edit: typos;
The fuck? I was actually just about to write out a reply to show you how that makes no sense but then I realized you're the guy who said that a framework is just a whole lot of nonsense... So yeah I'm just using semantics, nice talking with ya.
Thank you. So now I'm wondering whether I need to rebuild my entire site in codeigniter. It seems like for the trouble of installing my own mvc framework better just to go with the established framework. Or just stay as is.
Go with the framework, you gain so much , but the learning curve can be steep depending on how well you understand OOP and MVC. But soooooo worth it
&gt; foreach ($matches as $key =&gt; $value) { $list .= $key.','; } $list = trim($list, ','); Or simply: $list = implode(",", array_keys($matches));
Thanks very much for your thoughtful responses, I think you have me convinced. Just another thing that's going to be painful to grow through but you do it for the long term benefits. I want the backend of my site professional so I can bring in other developers so I guess this is it. January I was supposed to get SVN going, who knows maybe I can do both at once!
Like, for example, that one time where we bought a brand new printer and took it home, and printed a test page, that test page got stuck, so I dismantled it slightly to get the paper out, then put it back together, kept saying "PRINTER JAMMED PRINTER JAMMED" OK, so I turn it off, on, reset to factory settings, do everything... "PRINTER JAMMED" Got it replaced with one of the same model, thought "that must just be faulty". EXACT SAME THING HAPPENED.
*Pro* sumer? That's a new one. I like it. ... but thanks to you, now I won't use it.
[It most definitely will](http://php.net/manual/en/pdostatement.execute.php)
Good to know! Thanks for the info. For some reason I had it in my mind that I had to use bindParam for each var. Upvote for thee!
beautiful... This is by far the most elegant solution that I have come across thus far (albeit a bit confuddled but hey, when you have a strange task you'll end up with a strange method). Thank you sir!
Great answer.
Here's how I do it: Log into remote server. mysqldump -u [USERNAME] -p[PASSWORD] [DATABASE] | ssh [USER@TARGET_SERVER.DOMAIN] mysql -u [TARGET_USERNAME] -p[TARGET_PASSWORD] [TARGET_DB_NAME] If you don't have passwordless authentication setup for your target server, it should ask you for your ssh account pw. Otherwise, you're done once the db is copied over. 
That's a word I whip out only in situations where people are like "Make it web 2.0ier!" and then I add comments and this appeases them, I guess? Actually, one of the [most intelligent people](http://intellagirl.com) I have ever had the pleasure of hearing speak live uses the word "prosumer" (as in, the producer is the consumer is the producer - things like enabling content upload, as well as sort of high-endy electronics that aren't quite crappy point and shoots but aren't the good stuff either)... in 2008. She said it in 2008. It's actually an interesting portmanteau word once you stop to think about it, but I kind of fear that it's lost all meaning by now.
When I'm hiring for a junior level programmer, I'm looking for a coder - someone who can Get Shit Done^tm. If you know the answers to the following, I would consider you fit for a junior level job: 1. Why is binding parameters with PDO or mysqli better than using the raw mysql functions? 2. What are the advantages of version control? 3. What are the benefits of OOP? 4. What is the difference between OOP in PHP4 and PHP5? (this one is becoming less and less relevant as PHP5 becomes older) 5. How would you use a regex to split tabular data? 6. What's your preferred method of input validation? 7. What is the main benefit of working in a framework? These are all very basic, and I'm guessing that at least 75% of informed PHP developers know the answers. Unfortunately, I'd say that less than 25% of PHP developers are actually informed. When I start hiring for a mid or senior level position, I want more of general purpose programmer or someone primed for technical project management. A senior level position needs to be an amazing programmer (CS background with a passion for programming) or an amazing software engineer (big focus on requirements, maintainability, security, scalability, etc). It's rare to find both in one place (in fact, I'd say that the two ambitions are incongruous).
While admittedly I don't know every answer to those questions, I think I understand most of it. PDO for flexbility, Version Control to ensure you maintain working code bases, OOP for encapsulation and maintenance, regex for identifying patterns, frameworks are great for ease of multiple devs being able to pick up code and begin working immediately. I realize these are all over-simplifications as well. I've considered going to get a second degree in CS (or a masters), but just can't afford it right now. I feel like the lack of a relevant degree puts me at a disadvantage to other applicants. Assume similar knowledge, how else do I make myself stand out?
Dude just respond to every craigslist ad you can until you get picked up by a real place where they will teach you the industry. You are on the right track just strick with it.
&gt; I feel like the lack of a relevant degree puts me at a disadvantage to other applicants. It doesn't, at least not at my company, where we look for people who can "Get Shit Done", like nonethewiser said. In fact, if you can find a company that can overlook that (and this is hard, because no company openly broadcasts this), then they are usually the better companies to work for.
In what metropolitan areas are you looking for work? Most cities are overloaded with web dev jobs, whether it be PHP or Python or Ruby. Employers don't have a lot of options right now, there's quite the shortage of talented developers and anyone remotely worth it can have multiple offers on the table at any one time. Don't worry about the degree. Focus on improving your ability and knowledge. Education is important, degrees are a joke. 
Yes, those are very simplified answers. In fact, if you gave me those answers in an interview, I would assume you were just repeating something you read once, and didn't really understand it. I realize this is reddit, and not an interview, but make sure you fully understand the actual answers to those questions. I wouldn't worry too much about your degree. While it may put you at a slight disadvantage, it's only a one piece of the puzzle. Step one is getting your foot in the door with your resume. Highlight your strengths, show that you have worked on a variety of programming projects in the past will show, as nonethwiser has said, you can "Get Shit Done." List your education, but it can almost be as a footnote to your work experience. Myself, I have a BA in English Lit, and only now, 10 years after graduation, am I finally realizing the actual value of that degree The second step is carrying yourself well in the interview. Get a friend to practice on. You can practice with nonethewisers questions, or find similar questions on the internet. Never make up answers you aren't sure about. "I'm not sure" is better, or even better - explain previous experience with something similar and say how you might get the answer. Most importantly - never stop learning. The rest will take care of itself in time.
Thanks for the reply. I have a basic understanding, but I don't use most of those things on a daily basis, so my knowledge of them is primarily book (web, actually) or theoretical oriented. I think one of my problems here is that I am the most senior programmer at my current job, and I have no one to really learn from. Thus I have to teach myself, so my understanding may be a bit lacking as I try to figure it out. I will say that I have never been unable to complete a task that a client has requested, and they are (as far as I know) always under budget and on time. And these are not generally simple 6-12 page project type sites. They include flash, xml, iOS app integration with the site, etc. I've just had very little luck in getting my foot in the door for an interview, especially while primarily looking out of state.
While I don't have a list of locations I don't want to go, as I would take a job anywhere in the states if it was a good fit for me, I have been primarily interested in Dallas / Orlando / Tampa as I know people in those locations. I am currently in Alabama, for reference.
Since you mentioned SVN, I might as well say that most professionals switched over from SVN to [Git](http://en.wikipedia.org/wiki/Git_(software\)) or Mercurial for version control.
A degree in CS is rarely of any economic use in the LAMP stack. My degree is in Networking / IT, but I'm probably in the top 20% of the programmers I know, and I know some pretty smart programmers. It's the old Jobsian maxim, "Real artists ship." I honestly don't know how to make you stand out, however this is how I make sure I stand out: 1. Read. Everything. Cocoa, NodeJS, PHP, Symfony2, Yii, jQuery, HTML 5, OCaml. You don't need to be an expert on everything but you need to be able to form opinions on things, and the more you know about the programming ecosystem as a whole the more you can talk specifics and benefits and drawbacks during an interview. 2. Learn the wrong way to do things, as well as the right way. Sites like Stackoverflow and /r/php are great for this. Ask stupid questions. Ask smart questions that you know the answer to to see the stupid answers. It's easier today to gain experience not programming than it is to gain experience programming sometimes! 3. Become involved, at least in an ancillary fashion, in an open source project. For me, it was MantisBT and Symfony. For you, it might be Drupal or Fuel or Kohana. Start with using the product, work your way up to documentation, and then start releasing plugins or patches. Good companies will look you up on the Internet these days, and if they see that you're a contributor to several open source projects then they'll know that you're at least semi-competent. 4. Become involved in your local PHP user group. I've presented about a half a dozen times at my local PHP user group, and even though sometimes it felt like I was either preaching to the choir or throwing pearls before swine, it's something that I can talk about and it looks good on a resume. 
I just tried putting some commands into a shell script: #!/bin/bash mysql -uroot -p"MYPASS" -e "SHOW DATABASES;" 2&amp;&gt;1 1&gt;/dev/null And exec()'ing that from within PHP. It shows no output unless you give it a wrong user/password or bogus command, then it'll return the error. Is this kind of what you were looking for?
How close to Huntsville? I know some people at Curse.com (their dev offices are in Huntsville) that would probably at least give you an interview. I know they are having a tough time hiring people. They are a .NET shop though, *shudder*
&gt; What's your preferred method of input validation? What are you looking for with a question like this? I would validate that the input matches what I expect it to be, which in the end is probably using a regular expression. Sometimes questions like this also lead me into talking about output escaping, so I'm wondering what a basic answer would be.
 &lt;?php exec('(mysqldump db1 | mysql db2) 2&gt;&amp;1', $out, $ret); if ($ret !== 0) print_r($out); # an error occurred ?&gt;
I really want to see that someone understands that there needs to be a clean line between "sanitary" and "unsanitary" data, and that there are limitations to things like strip_tags and the like.
&gt;So now they have the Amazon Elastic Compute Cloud, and the Amazon Elastic MapReduce, and the Amazon Relational Database Service, and a whole passel' o' other services browsable at aws.amazon.com. These services host the backends for some pretty successful companies, **reddit being my personal favorite of the bunch.** :D
I understand. I tend to believe it's best to do escaping at the last minute, so that means using the equivalent of htmlentities and/or json_encode directly in my templates, using the equivalent of PDO parameter binding in my database calls, etc. However, it does get tricky when you need to store HTML fragments in the database (like if you're using TinyMCE and validating on input). In that case, it can come in handy to have an auto-escaping template library. That way you always have to explicitly mark data as "clean" (the opposite of raw PHP templates) if you want to skip output escaping.
These are all extremely simple. Cant do #6 off the top of my head though, because I simply don't use regex very often. I'm hardly what I'd call a developer that can "Get Shit Done", I'm just not an idiot though haha.
It might be best to escape at the last minute, but you have to be careful that this does not have unintended consequences. I saw a site where someone did this with usernames, and users were surprised to find out that non alpha characters were stripped (underscores, apostrophes etc.) Providing information to the user if appropriate is an important consideration.
I do not consider modifying data to be part of escaping. Escaping keeps the content of the data the same. That would fall under the responsibility of input validation.
PDO / msqli and parameter binding are to prevent sql injection attacks. Version control so that you can revert if needed, and you have a trail of what was changed by who and when. It also makes deploying code from a staging environment to a live environment much easier than spray and pray FTP. Frameworks are great at enforcing MVC style coding, and often have quite a bit of functionality built in. Thats in addition to the benefit of having a standard environment for a certain framework. As far as a CS degree... CS is not what most people think it is.
Yep sorry I was thinking of someone who ran a "catchall" makethissafe() type function. lol(htmlspecialchars(strip_tags(trim($in)))); Just in case man!
I've researched it and there are a lot of developers still sticking with svn and absolutely endorse it. I'll keep that in mind though thanks.
Knowing Git makes your life as a programmer a lot easier. For example, I find GitHub to be an indispensable resource on a daily basis at work for locating and tracking other people's work.
There's all kinds of CMS written with CodeIgniter. ExpressionEngine, PyroCMS, FuelCMS just to name a few.
1) Your regular expression has some flaws to it. For example if the input string is "a b" (2 spaces) it's going to yield "ab". What exactly is your goal here? I'd assume you want to condense multiple spaces and remove any non-alphanumeric characters? 2) I'm not seeing why you wrote a wrapper around strtotime() when it can do everything you mentioned directly. Maybe I don't understand your particular use-case but it doesn't appear to offer anything one couldn't get by simply calling strototime() 
SVN is fine and dandy if you know what you are doing, but if you're a new user Git and mercurial are significantly easier for you to pick up.
&gt; if the input string is "a b" (2 spaces) it's going to yield "ab". Nope, it'll be "a b". I changed my explanation of the second one. It's not ground breaking, but it took me a minute to think of. I don't have any great code snippets, but I thought it would make a good thread.
 php &gt; var_dump(preg_replace('/[^a-zA-Z0-9]\s/', '', 'a b')); string(2) "ab" It helps to test things. 
 strtotime('last tuesday of this month') [strotime's relative time parsing](http://www.php.net/manual/en/datetime.formats.relative.php) is actually very powerful. No need for hackery.
sooo. I always hated those interviews, most of them asking stupid questions that make me feel like i am a freakin' story teller. 1: purpose of binding bla bla. how about asking about prepared statements and what they mean, where would you use one, what is the advantage? A junior might have never worked with mysqli/pdo [depending on the ex jobs], but it should know this at least in theory. 2: advantages of version control. What do you want me to tell you? the thousand tutorials on the internets? i can do that, still does not mean i will not fuckup a git merge between 2 branches and so on. If i am lucky, it will end up in production and screw you over for 20-30 minutes until someone reverts. 3: Benefits of oop? Now i would ask you: how do you define OOP? because OOP is a huge beast, which isn't related anymore only to classes and objects and reusability. Again i could tell you a nice story i read on the interwebs. How about how you see oop? how you understand oop? what are patterns and why you need to use them? why in some cases you should not use them? 4: please get serious. we are at php 5.4 [more or less]. why would i care about php4 when i might have never worked on it? 5: there are tricks better than simple regex to split tabular data.... you know the priciple: divide et impera. just use regexp on smaller chunks of data that you have already processed. 6: this is weird... i ask the customer: are you sure it's a valid email you inserted? and don't validate if the user say yes. And yes, i am being ironic. 7: Again, want me to write you a book or tell you a nice story? Now what would be a good interview, it would involve you telling me some things about yourself, stuff you considered interesting. Stuff you broke, stuff you found interesting. What stuff you read at home? What interests you in the current programming language? do you watch the changelog for php for example? what other languages are you interested in and why? what sucks about php and what is nice about it? In the end, give him the chance to model a simple application. See how he thinks. As i said in the past, knowledge can be obtained, intelligence is something you already have. And genuine interest is something you must have.
Just because one has a CS degree does not make them an amazing programmer. I would consider myself an expert in my field. I've hired programmers with CS degrees, and in my experience, the most amazingly talented programmers I've seen are the ones that are not technically "qualified" with a CS degree, but those who taught themselves.
Just because one has a CS degree does not make them an amazing programmer. I would consider myself an expert in my field. I've hired programmers with CS degrees, and in my experience, the most amazingly talented programmers I've seen are the ones that are not technically "qualified" with a CS degree, but those who taught themselves.
I would guess he's referring to the builtin ones, not superglobals in general. 
&gt; Symphony if you really want, symphony is a better framework, but in my experience its not used in real projects half as much as Zend. Completely depends on where you work. I have seen numerous job ads, all mentioning different frameworks they say that knowing would give the applicant an 'edge'.
Many of the concepts which form the foundation of ZF1 is still there in 2.0. Getting a good idea of how ZF1 works wont necessarily be a bad idea for you. ZF2 brings a lot of interesting things to the game and I've been playing with the beta1 release for a while. I definitely feel that a thorough knowledge about how ZF1 works have helped me. On the other hand, beta1 isn't at all ready for production use. Beta2 should be just around the corner and with that I plan to start using it for some long term projects I have in mind - you know, personal projects which aren't stricly forced to keep a deadline and where an extra day or two to rewrite chunks of the code because something in the APIs have changed between releases aren't really something critical :) If you want to get started with ZF I would recommend that you start with ZF1 but make sure that you conform to the standard ZF-way of doing things. That way you'll be more prepared to port to ZF2 when it's ready. There shouldn't be any problems in you starting of with ZF2 if you really want to but by starting with ZF1 you'll get a solid foundation to build on with tons of articles, tutorials and what not to aid you in your journey. This can't be said for ZF2 yet. Hope that helped a bit and good luck on your journey :)
Thanks! This is some really solid advice, I think I'll go ahead with looking at ZF 1.1. Cheers again.
&gt;An include for all javascript files in the header. Next an include for all css files. [...] The Dreamweaver template [controls] where all the includes are located. Do you include those includes just once? What's the point of having those things externalized if you're dealing with a 1:1 relationship? The reason to put things in their own file is because it makes it more convenient to use it in several places (1:N). I also recommend to use some kind of template engine. Mustache is very simple and easy to use for example.
I didn't say they needed a CS degree.
When you're hiring, 99% of the work is weeding out the idiots. 
&gt; stuff you considered interesting. Stuff you broke, stuff you found interesting. What stuff you read at home? What interests you in the current programming language? do you watch the changelog for php for example? what other languages are you interested in and why? what sucks about php and what is nice about it? I don't care about any of those answers if the person doesn't know the basics of web development and working on a development team.
Just keep in mind, the current release is 1.11, not 1.1
I am not in the immediate Huntsville area. But I have looked at Curse before when they first moved to that area. At the time I had no experience, and they didn't want to talk to me. I've done a little bit with .NET, but am not as comfortable with it as I am with PHP, although I feel confident that I could learn anything. Maybe send me a PM about it if you want to.
Interesting insight into Bezos. These are the things you just don't read about in magazine articles.
You should probably have the ItemController and model just in case you want to manipulate an item outside of an Order. But since Orders have many items, simple saving of items in the order controller wouldn't be terribly bad.
I would recommend the newest version of the Zend Framework 1 release (1.11.11) although ZF2 uses php 5.3 to the fullest extent, with namespaces, closures, etc. Its a pretty big change, but nothing an afternoon of going through their docs could fix after a solid understanding of ZF1. Zend is also preparing a slew of documentation to help migrate ZF1 developers to the new framework once released.
you might try an older version of wamp, one that uses an older version (4 not 5) of mysql itself. I've personally had a lot of trouble with wamp and always end up just installing apache, mysql and php individually. 
As dragonmantank said, make sure to get 1.11 and not 1.1 :) Alot of stuff have happened since 1.1. They've also announced a 1.12 so the 1.x-branch will definitely be alive for a long time. There's no need to rush jumping on the ZF2 prematurely. Better get a solid understanding of ZF and working with a framework in general. In the meantime, keep yourself updated on what's going on with the ZF2 development and make sure to read up on the new features it implement - for example, as aaegaas mentions, closures, namespaces but also the new event model, module structure, the new dispatcher and so on. There's a dozen of small details which you can learn while playing with ZF1 to prepare yourself for ZF2 - such as understanding what late static binding is and how to use it :)
&gt; Its just the bit between the first inverted commas ... you mean.. "apostrophes"? [preg_replace](http://php.net/manual/en/function.preg-replace.php) [Regular Expressions](http://www.regular-expressions.info/)
Inverted commas? The single quotes? It is a regular expression. Perhaps [this](http://www.zytrax.com/tech/web/regex.htm) will help.
It's a regular expression, or regex. It's replacing anything that *isn't* an upper or lower case letter, number, space or a dash in $text. I forget what the 's' modifier does. Check the other's links. The / is a delimiter and can be just about any non alphanumeric char. the [] indicate a pattern, and the stuff between them is the pattern (see above). After the last / you can set flags to make the regex engine behave differently so I could use 'i' (ignore case) and simplify the expression to: $text = preg_replace('/[^a-z0-9_ -]/si', '', $text); Regular expressions are kind of an art, but are incredibly useful for data validation and parsing. ([Just don't parse HTML!](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454))
thats the one, sorry, apostrophes. inverted commas are " thanks for the links. 
What this effectively does is removes all characters from $text that is: * not any character from a to z * not 0 to 9 * not a space * not a dash * not an underscore The quick run with this regular expression is (it's too hard for me to explain fully, you will need to read up on them). * [] will match anything inside them. eg [abc] will match any a, any b and any c * the ^ character means not, so match anything that is not. eg [ ^ abc] (without spaces) will match anything that is not a, b, or c * dashes mean a range. eg a-z means every character between and including a to z 
You could create the ItemModel in the OrderModel, since it 'owns' the items. And since the two models are related, one would assume you could access the Item by dereferencing through the Order its associated with.
Thanks guys. I am building an ItemController in the event I need to manipulate an item outside of any OrderController function (ie need to delete an item if the order changes). The primary reason I put the item create in the OrderController is that I didn't want to save an Item if the Order save() failed. Right now an item is only created if the Order-&gt;save() function returns true signifying that the SQL query worked.
If you don't need a production site on it in a hurry, I'd recommend just going into 2.0.
[] indicates a range of characters. The stuff in between them is the valid characters in that range. The pattern is `/[^a-z0-9_ -]/`. The `^` at the start of the range indicates that it is to be inversed.
If an Item is *always* created with an Order, then the model should be handling this. It is the way it creates new Orders. If an Item is not necessarily always created with an Order (in some situations, it isn't), then maybe it's more appropriate for the Controller to be deciding when an Item also needs to be created.
I do it sometimes as a container for constants. For example, in the amazon MWS client I wrote, there are many feed types, which are just defined as arbitrary strings: class FeedType { const ORDER_FEED = '_ORDER_FEED_; const FULFILLMENT_FEED = '_FULFILLMENT_FEED_'; } $feed-&gt;setType(FeedType::ORDER_FEED); This gives you handy auto-completion in your IDE without needing to remember all the cryptic feed type strings.
Incompatible drivers between mysql and php.
You mean a double quote? 
I don't know why you're being voted down, your answer is the closest to being correct here. People here seem to upvote shit, and downvote correctness. The problem is with the old client library using an antiquated method of authentication. Either mysql has to be configured to allow the older method of authentication (not advisable), or php's mysql library needs to be built against newer [client libraries](http://dev.mysql.com/downloads/connector/php-mysqlnd/).
s/range/character class/, the '-' in 'a-z' indicates a range. Nitpicking, I know, but this is code.
It's down right now (for me), but http://www.strfriend.com/ visualizes regular expressions, it may help to see what's going on.
HTTP_HOST is not a value that will always exist, depending on the browser. Host: is a header that is sent from the browser to your server, and can even be really broken. Some bad browsers/bots/etc. do things like append the port number to the host value, or add 'http://' to the beginning. You should know your own domain...
&amp;#3232;\_&amp;#3232; 
I'm writing a script that does not know what server it is on so it adapts based on the variables passed but has default values.
Use [httpfox](https://addons.mozilla.org/en-US/firefox/addon/httpfox/) or something and see what the domain is in the cookie. It is probably wrong. Edit: Just leave the domain blank; it should default to whatever the request is from. 
What version of libmemcached do you have?
Agreed, just leave it blank, or .host.com (not host.com)
Memcached Version 2.0.0b2 libmemcached version 1.0.2 What bugs me is that I couldn't find any documentation on how to use those options that were mentioned on the page, whether I need to specifically call them out or set them on an ini somewhere. This is the only missing part from my setup, why bother with replication if I can't use the other one when other server dies? Clearly this has to do with the memcached client, somehow I have to remove that dead server from the pool
Which IDE you use? I tried netbeans, but didn't like it so I went right back to BBEdit.
&gt; should I create an ItemController within the OrderController instead and pass it the user input? Create the ItemModel in the OrderModel. Push logic into your models as much as possible and it'll make your code more re-usable. &gt; It would seems like having the OrderController do all the work in this case would allow for less code calls and faster execution Premature optimization is your enemy. &gt; I'm not sure if having ModelAController talk to ModelB is an appropriate practice within the MVC architecture. It always depends, but when in doubt put it in your models.
note that _get() and _set() methods are significantly slower than directly accessing the method however. I've been thinking about this issue of no "read-only" properties, and while I think they would be useful - here's the conclusion I came to: unless you're allowing random user code to run without significant checks (in which case, BAD!), there's no reason that a public property would change unless you wrote something to change it. if a nefarious individual somehow did get to the point where they could change your public variable - then logically they can already run arbitrary code, and you're screwed no matter what.
&gt; CodeIgniter *shudders*
Already agreed on most points.
glob() /thread
Document every attack if you want to improve application security. [Get Rid of SQLi Abusers &amp; Banning 'em, Instantly](http://synfyre.net/forum/pid-304.html) [PHP Sauce](http://pastebin.com/VisSpfrX)
Thanks. I think I've solved this problem once ages ago myself, but I don't know why they're asking here, as it's an incredibly googlable problem. I couldn't remember whether upgrading or downgrading (on which side of the problem) was the right way to go.
&gt; Storing Images: This is controversial but do not store them in your database. They contain large amounts of data. No it's not controversial; don't do that. Store a reference to the image and push the image to a CDN (or save it locally if you must). &gt; Data types: Choose the appropriate data types for your fields. Yes... &gt; An example, you do not need the data type text or varchar (max) for a 5 digit zip code. Correct, in fact the ideal zipcode data type is char(5)*. However, if you have any other varchar() fields in your table scheme, the benefit of char vs. varchar kind of goes out the window. **numeric types, like smallint, would also be horrible for zip codes. [more info](http://stackoverflow.com/questions/893454/is-it-a-good-idea-to-use-an-integer-column-for-storing-us-zip-codes-in-a-databas)* &gt; Stored Procedures: Using stored procedures can improve performance and scalability of your database. That needs a whole lot of qualification. In fact, this whole "article" could. You do the world of Google searchers a disservice by posting vague rules and guidance in this manner (with no explanation, qualification, nor examples).
I don't have access to the remote server apart from setting up databases so all those googlable answers provide no real help. As the remote server is a shared one, the hosters probably will not reset the passwords or allow the old_passwords fix. My question was more centered towards what I can do from my side to get it to work.
&gt; or php's mysql library needs to be built against newer client libraries. Like what SkepticalMartian suggested?
I'm sorry but I don't know how to do that. My php and mysql versions are a bit newer than that specific remote server. I've tested it with another remote server from other hosters and the problem does not present itself there. 
$_SERVER['SERVER_NAME']
* At least have a front controller and class autoloader. * Have a nice directory structure e.g. some of the Zend framework structures are quite nice and logical so you could model yours based off that. * I quite like the [Code Ignitor architecture](http://codeigniter.com/user_guide/overview/appflow.html), you could try improving on that. At the very least draw up a diagram in Visio or Google Docs that explains how it all hangs together. Some frameworks don't even have that and when you start looking at their code it's hard to understand the logical flow and it seems like it's going round in circles. * Use dependency injection rather than singletons. * Use PHP 5.3+ * Have a nice wrapper around PDO or use an ORM layer * Probably don't invent your own templating system. Integrate an existing one or just &lt;?=$var?&gt; which is enabled by default in PHP 5.4 anyway * Use MVC Just a few ideas, I'm sure someone will disagree.
&gt; I'm not sure if having ModelAController talk to ModelB is an appropriate practice within the MVC architecture. It is not, and you are running into this problem because of the misunderstanding of MVC popularized by the Rails architecture. Rails and clones propose that the MVC model is an ORM instance, and that controllers should be directly manipulating such models. This is a bastardization of MVC. I have been raging for years about this, because this approach completely invalidates the benefits MVC gives you. An MVC model is not your persistent data; it is the code that manipulates the data, that is your business logic. The ORM objects should be internal to the model, and should never cross the boundary of the model. The interface the model provides to controllers and views (and the code that uses it) should not change if the underlying ORM implementation changes, unless such a change is meaningful to the application. Please see [here](http://www.reddit.com/r/PHP/comments/gk7le/i_just_dont_get_mvc_or_oop/c1o8457) for detailed discussion, and in particular the Kittens/Puppies/Baskets example. 
If you want to ship to other countries, you should be able to save 10 chars in ZIP/Postal code. http://en.wikipedia.org/wiki/Postal_code
If you're using php you usually don't get 500 errors unless you have done something wrong in config files such as .htaccess or other files. Have you checked your server config?
Check whether you have any faulty .htaccess files, also check the chmod on them. When I get a 500 error, it's pretty much always .htaccess.
Yeah i read a lot about .htaccess causing 500 errors.. but not where to find said file.. except for in my cache, which its not there– and nor is it there on any of my backups.. i just assumed i didn't need it.
Config file is fine that was my first thought... i guess i don't know much about .htaccess though 
If you have a local copy, just do a search for .htaccess. Also, set your FTP client to show hidden files. .htaccess is usually hidden for FTP clients.
oh crap, you're not joking
did you google inverted commas? :p
I never knew they were called inverted commas, thought they were just called quotation marks [citation](http://en.wikipedia.org/wiki/Quotation_mark)
What do the apache error logs say?
where are you from? I think its quite upper-middle class talk tbh... artifact of my upbringing unfortunately...
I'm from the UK
same...
And it has rectangular selections : http://blogs.oracle.com/netbeansphp/entry/rectangular_selection
This does not do what you think it does. When you connect to multiple servers at the same time with PECL memcached, it will shard the keys over these servers to distribute your memory footprint. PECL memcached uses hashing to make each server responsible for a particular key/value pair. The transparent failover $m = new Memcached; $m-&gt;addServers(array('127.0.0.1', '127.0.0.2')); // This will hash foobar and decide if it belongs on 127.0.0.1 or 127.0.0.2. It will only check the // server it hashes the key to. Likewise, when you set the key foobar, it will only set it on the server // it hashes to. $m-&gt;get('foobar'); If you truly want to use Memcached to have read-only slaves (via repcached), you will need to do something like this (note: this is not a good idea. you should only do this if you have a truly weird setup where you have a small keyspace and are doing a ridiculous amount of reads). $servers = array('127.0.0.1', '127.0.0.2'); $m = new Memcached; $m-&gt;addServer($servers[array_rand($servers)]); // Sometimes it will read from 127.0.0.1, sometimes 127.0.0.2. $m-&gt;get('foobar');
I'm using Netbeans.
And when you write the keys you write it manually to all of the servers?
I'm using a persistent id on my instance, it seems that all those options to kick out a dead server has no effect. But right now I'm thinking how often does memcached actually crash? I might actually have a problem with the hardware before I see a problem with memcached. And I'm thinking I could just manually remove a server from the config if we are to do a scheduled maintenance that way the clients will be forced to use the only up and running server. public static function getInstance() { global $memcached_servers; if (! isset ( self::$memcached )) { self::$memcached = new Memcached ( MEMCACHED_PREFIX ); self::$memcached-&gt;setOption ( Memcached::OPT_REMOVE_FAILED_SERVERS, 5 ); self::$memcached-&gt;setOption ( Memcached::OPT_AUTO_EJECT_HOSTS, TRUE ); self::$memcached-&gt;setOption ( Memcached::OPT_SERVER_FAILURE_LIMIT, 1 ); self::$memcached-&gt;setOption ( Memcached::OPT_COMPRESSION, TRUE ); self::$memcached-&gt;setOption ( Memcached::OPT_LIBKETAMA_COMPATIBLE, TRUE ); if (! count ( self::$memcached-&gt;getServerList () )) { if (! empty ( $memcached_servers )) { self::$memcached-&gt;addServers ( $memcached_servers ); } } } return self::$memcached; }
 No it's not controversial; don't do that. Store a reference to the image and push the image to a CDN (or save it locally if you must). This is controversial because there are those that say storing the image in the database has advantages over storing in a file system or CDN. I find the biggest advocates for storing the image in the database is MongoDB enthusiast. Personally I'm against it but I do not ignore that there is an argument for it just because I think you shouldn't. In fact, this whole "article" could. You do the world of Google searchers a disservice by posting vague rules The vague rules are a starting point. Its for introducing people to the fact the something like stored procedures exist and then having them google it. I think you might be suprised at how many people I come across that do not have the slightest clue on how to even begin optimizing their database. How to you search for something if you do not know it exist?
Use redis if you want your data to persist.
I really didn't need the cached pages data to persists as they can be easily rebuilt, I mainly use repcached for the session replication since I have 3 web servers that use them. But I'm actually really interested in redis, which php client do you use?
Honestly, i care more if the person is open, has a deep passion for programming and it has the intelligence to do programming. Obviously i am looking for people i can invest into and they can become a good asset later than for people that can read documentation on the internet and recite it to me. Your questions require to know things, not to actually think things.
I'm not positive, but I think 2.0.0b2 is a beta version (hence the b2). That would explain the lack of docs. The transparent failover seems to be dependent on the libmemcached version, though, I am not sure which version is required. See if there is an upgrade version of libmemcached available.
Have you checked the file permissions?
If you manually remove a server and don't use the built in transparent failover, it'll re-hash your keys and you'll effectively be rebuilding your cache from 0. FWIW, I've never had good luck with persistant memcached connections. Also, keep in mind it's going to create a persistant connection for each PHP process. In my case I have 25 web servers with 250 PHP-FPM processes each, so using persistant connections would keep 6k+ connections to memcache open all of the time.
I think you are using repcached for the wrong reason. 3 web servers can share sessions on a single memcached server. The session save path can take multiple memcached servers (if you want to distribute your memory footprint) and hash the sessions out. The right way to scale memcache is to use sharding - not repcached.
If you use the second example, you would either write to ALL of the servers, or write to the master and depend on repcached to replicate it around. It's really not a good way to do to it, I highly highly highly highly recommend you use the built-in sharding.
Thanks everyone so much! I think I was under the impression that the Model was only supposed to do the SQL lifting and so was actively avoiding allowing the Model to do anything but CRUD operations. A misinterpretation of the tutorials I was reading. I'll start moving a lot of the functionality to the Model and do my best to have the controllers primarily pass the user input to the models and push the response from the Models back to the Views. Mike - thanks for the link, I'll be reading it after lunch.
You can download the source code to reddit. I cba to find the link right now, but I'm sure that you can.
Reddit is open source, so that is probably your best option if you want something exactly like it. I haven't set it up myself, but I've heard that it can be a little difficult to install and extend. That is based on nothing but second hand information though, so I urge you to poke around in its source if you really want the features that reddit offers. If that doesn't work out, you can check out my Talkfest repo on github (sorry for the self promotion): https://github.com/epixa/Talkfest Talkfest is pretty straight forward; you can create categories, post in those categories, and comment on posts. It is about as simple in terms of features and functionality that a discussion board can be, so it may not have everything you want, but you should have little trouble extending it to suit your project's needs. I haven't touched it in a long while, and I don't expect to work on it again. That said, it worked, the code is documented, and it should be pretty easy to change to your heart's content. It has never been tested with anything other than a small amount of traffic, but it may be a good fit for a school project. In terms of technology, it is built on Symfony2 and uses the Doctrine ORM for data access. That means it requires PHP 5.3. I hope this helps; best of luck with your project.
[Vanilla2 is a pretty straightforward and embeddable solution](http://vanillaforums.org)
I wrote a caching library called [Stash](http://code.google.com/p/stash/) that may help you out. It handles multiple servers, and the failover should work if one server is down. The other benefit to it is that you can stagger cache handlers, so you can use APC or another local-memory cache with memcached as a backup.
Never worked with a framework? I'd go for using a very simple MVC framework with barebones features that cover what you need. Almost every framework worth its salt has authentication helpers, so no worries there. I'd recommend Codeigniter or Kohana.
If you are familiar with MVC then Cake will be easy to pick up. You can follow the blog tutorial to get up to speed quickly. All you really need to do is create your DB, put your model defs in Model (Cake will query the DB for table defs and cache the results for you), your controllers in Controller, and your views in View. Setup a default layout in View/Layouts and any routes in Config/routes.php. That's it - done.
Assuming you're downplaying the complexity of this project... I give you a &lt;10% chance of pulling this off. That is to say, it does not sound feasible unless your project is really really stupid simple. Regardless of how fast you learn, picking up a simple framework while simultaneously trying to hammer out the requirements of a project is probably not the right way to learn or the right way to execute on a job. If this is something that just kinda-sorta needs to look like it's working... then maybe. It's just really hard to say without knowing the details of this project. FWIW, I decided to build a large project around FuelPHP and was pleasantly surprised with how fast I picked it up. Was surprisingly productive in just a few days of working with it... Dangerous within a month... and competent in 60 days. Can't claim mastery by any stretch, but I feel very comfortable with it now after maybe 90 days of using it.
Yeah, I was just reviewing the documentation for Cake and it looks like I have a lot of reviewing to do before I'm ready for a framework, and that's not the sort of thing I want to be cramming in the weekend before final projects are doing. Unfortunately my PHP training is all non-OO and all of my OOP training is non-PHP, and i really need to bone up on MVC. I'll just do it without a database and really fake up the backend stuff. 
https://github.com/tylerhall/simple-php-framework/
I'd recommend you not commit to a project until you've had time to dig in to a framework and learn something about it on your own time. It may take no time at all, that really depends on you. Everyone says they're "fast learners", few actually are.
Linux systems hide files that begin with a '.' from view so that they cannot be accessed by users over the internet. FTP clients can show hidden files and give you access to them, but they may still be hidden on your local system depending on your setup. If you can view hidden files via an FTP client, rename the file to htaccess.txt, then download a copy to your local system. You can then upload and rename to the original '.htaccess' without any problems.
If you're in the top 20% of the programmers you know, you should make an effort to become acquainted with more talented individuals.
Check this.. do an "ls -l" to see who owns all of the files.. If you ran the backup from say your own shell, then they may now be owned by you where some webservers require the owner of the files to be "nobody:nobody" or, like on my server if you use suphp they will need to be owned by whoever is running suphp in the virtual host. 
CodeIgniter is great, give it a look. http://codeigniter.com/
I want the book. Edit: Never mind. I know what book you're talking about. &gt; But reddit frowns on self-advertising, so Im not going to post a link here. Um, no. You're not going to post the link, because that server is down.
Most of frameworks will have some sort of demo with them. I'm using Yii - there's a demo blog app whitch is quite featureful and easy to grasp. Also, there is a free PDF book about Yii whitch will take you about 2-3 hours to read through that explains most of the core concpts. If you're looking into creating a simple app - two days should be enough. Just dont expect to get a facebook clon rolling by monday ;) *edit: whoever downvoted this comment, care to explain why?
Like others have said, going from ZF1 to ZF2 won't be a huge hassle for most components. ZF2 uses namespaces to organize its code, so some classes and interfaces have been renamed. The Zend/Database component is going to get a makeover in a later beta, but you can go with something else like Doctrine to avoid any pain. The biggest difference is that in ZF2 applications, the MVC is modular and event-driven. This makes it tough to figure out how to do some things, like change the layout used from a controller method. It also uses a Dependency Injector to create objects for you, which is handy once you get your head around it. The community is also planning to contribute some core modules that most application can plug right in and use - see modules.zendframework.com. These could be a time saver down the road, but they are embryonic at the moment. If you're looking to learn ZF, my vote would be to skip ZF1 and go to ZF2. You can always take what you learn in the latter and apply in the former.
If your trying to implement simple CRUD with CakePHP it's definitely possible to finish over the weekend. The trouble is once you start adding in things like role based user authorization it can really sap your time if you're new to not only a MVC framework thing but also working within the confines of Cake. Even though the [tutorials](http://book.cakephp.org/view/1527/Tutorials-Examples) are pretty swell in the manual, they still leave a lot to be desired. It took several sessions of tinkering to 'get' some of the concepts that might seem straightforward, but just aren't adequately explained in either the examples or the API reference. There are a lot of 'Oh, cake does this for you' moments that just aren't conveyed clearly when you just want to dive in a write code. Expect a lot of trips to the API reference. A lot... seriously. That being said, now that i'm a cake 'veteran' (whatever that means), I absolutely love the time savings leveraged when I use the more 'advanced' features. If you decide to go through with a framework (cake or not) I found having a very detailed database relationship model finished beforehand a huge time savings. Seriously spend an adequate amount of time either on paper or on a spreadsheet (or on a test database) getting your data objects right the first time. You'll thank yourself later. Goodluck and PM me if you have any specific questions.
Code Igniter.
HTML_QuickForm2 
Thanks. I will check it out.
How does one do this... this sounds highly probably the issue. 
Others here have recommended CodeIgniter, and I'll do the same. Since you've never used a framework, you'll probably want one that just works out of the box, and this is true of CI. You don't even need to have a model set up if you just want to tinker a bit with setting up some simple views. Even setting up a "Hello World" sort of app in some frameworks is going to be a problem if you've never used one before.
There's a lot of over information here. The short answer is yes. It doesn't really matter what framework you pick either. Both Cake and Codeigniter are great choices. Goodluck and have fun!
Read up on the conventions for table names in CakePHP and how foreign keys are named to relate to other tables automatically, then create your schema. If you've followed all the conventions and haven't chosen any odd English words as table names, you can get basic scaffolding generated with the cake bake scripts in less than an hour (and probably less than 10 minutes). The real power behind Cake applications is well-planned database schema. With a good one, the app practically writes itself. CodeIgniter is also great... it's better than nothing. 
When you're talking to programmers I'd just stick to single quotes and double quotes.
Of course that's always the goal, isn't it?
~~You~~ Use a framework, a real one.
Zend framework works with it I am pretty sure. Have three site I own on it and find it agile and powerful.
It is steep for sure. Took me awhile to learn and I had been using php for 5 years.
I'm not sure if you're using RHEL or Fedora, but a quick look at the repo listed on [http://docs.drizzle.org/installing/redhat.html](http://docs.drizzle.org/installing/redhat.html) shows rpms for Drizzle/libdrizzle for RHEL 5 &amp; 6. If you're not looking for the actual Drizzle server, I think McGlockenshire is right- you should be able to connect to it with the MySQL lib.
If you have shell access.. which I'm assuming you do. Login with a user who has sudo privileges so you'll eventually be able to change permissions on files that aren't your own. As you said, some of the files are still okay, so go to the directory that has your files.. ~/public_html perhaps, and run the command ls -l both of those are lowercase L's. You'll be able to see information on all of your files.. In my 3rd and 4th column anyway, are two names, the first is the owner of the file, the second the group. Check to see the owner/group of some of your files that were never backed up, and then set these same to the files you recently backed up. If your good files have an owner of nobody and a group of nobody you can set all of the permissions of your files recursively with: chown -R nobody:nobody . So all of the children get it too. If they are different change nobody:nobody to match (owner):(group) up there and you should be good. If it tells you that you don't have permission, either do sudo chown -R owner:group . Or type the first one then type: sudo !! To repeat the previous command. You may or may not have to 'chmod' your files as well.
You a word. I agree though. Start small with a decent framework. Incorporating Wordpress might be difficult, but you also need billable hours.
Please don't recommend that framework to anyone. Just from spending 3 minutes poking around the auth library, I can see the author doesn't understand what a salt is, and you're is a hashing function that has no place in real authentication: MD5. The author also doesn't understand prepared statements, having created his own which he then unrolls into a a regular statement. He's escaping value with mysql_real_escape_string, which is better then nothing, but can be exploited via SQL injection in some situations. I commend the guy for maybe trying as a learning experience, but it's not useable. EDIT: he claims to have used it on 50+ sites, which kinda scares me. 
Always prepare for the future. Everything in your application will change in the future and you have to be well prepared for it.
Every zend IDE is crappy even the idolized Zend 5.5. You should of just used Eclipse + PDT, which is the same product minus the huge price and minus the crappy integration of zend only products. Zend literally takes eclipse + PDT, patches it with a bunch of bugs, and slaps a large price on it. That is the Zend Studio product. Just look at the forums. Its a disaster and has been for its entire life, every version.
In general it seems pretty much every piece of software gets worse over time. I use coda and honestly I can't even fathom using another IDE. I've used netbeans, eclipse, visual studio, and gasp! frontpage. In the end coda annoys me the least and does the most with as least annoying interface so far. There are a few things that annoy me, but I've gotten use to them so it's not a big deal. There's one thing that seems to be pretty awesome about coda that I really appreciate: the devs seem reasonably responsive and available and it's just a really simple and effective editor. Not perfect, but pretty close:) If it had a database manager and a simple image editor with trim and levels adjustments it would be.
"Zend literally takes eclipse + PDT, patches it with a bunch of bugs" Sounds like the Adobe Flex editor, except like 5x worse. EDIT: in case it's not clear, I mean to bash Adobe, natch;)
I use symfony2 (but any framework will do, put away your pitchforks) to manage large applications :).
Actually, I enjoyed Zend Studio. I've only had a few issues: * In ZS 7 with IBM i support, I couldn't do a RSE project and still have SVN, as ZS (and actually Eclipse) only supported 1 remote connection at a time. * In ZS 9, it would hang on large FTP transfers, so I had to pull my files down in Filezilla to get an existing project started. Day-to-day though, I use Netbeans and vim. If you are paying for Zend Studio, why are you not taking advantage of the support you get with purchasing it instead of using the community support?
Codeigniter or Kohana (if you're digging on pure OOP).
Zend Studio 5.5 is still my favorite editor. I remember when I had to get a new machine at work and they told me I had to install Zend Studio 6 instead. It was terrible.
Zend 5.5 was nice because it was simple and relatively stable - the same reason I use Komodo now.
http://codeigniter.com or http://cakephp.org
I tried removing using the default htaccess config, i tried editing it to 'allow' config and common, and i tried running without an .htaccess at all.. nothing worked. Does this mean its not a problem with htaccess then? 
Just two Foreach Loops would do it? Unless I'm missing something, it seems pretty straightforward. $link_list = array(); foreach($taxonomy['#object'] as $vocab) { foreach($vocab['und'] as $term) { $TID = $term['taxonomy_term']-&gt;tid; $NAME = htmlspecialchars($term['taxonomy_term']-&gt;name); $link_list[] = "&lt; a href=\"website.com/taxonomy/term/{$TID}\" title=\"{$NAME}\"&gt;{$NAME}&lt; /a&gt;"; } } echo implode(',', $link_list);
You sir are right! I just had issues with the objects and arrays... still learning. Thanks!
This is the only IDE for *any* language that I've actually considered purchasing. The only complaint I have is that I can't open a terminal window for SSH. There's a rudimentary command line console but it's not very good. Even still, I can live with having to leave an instance or two of putty open.
My output looks like this now: Construction, Architecture, Tumbleweed Houses, Walden, , How can I remove the last two commas, and alphabetize the list?
Bad code is a nightmare. A bad schema is the nightmare come true. Don't write a line of code until you've written the core of your schema and normalized the shit out of it. You're not ready to start writing code until you've built enough of your schema and developed strong enough conventions that tables start writing themselves as you think about the features and data structures that you're not even going to think about developing until after the current project is "finished". And then after that, MVC. Frameworks solve a lot of file organization problems for you, and so long as you're using decent object-oriented patterns, your code mistakes (you'll make plenty) will be fixable as you get more comfortable with the development patterns you're using. To reiterate, though, there are always going to be things you'll wish you'd done different. But none of them will make you suicidal unless you bugger your data model. 
Yeah, coda is as close as you can get to a plain old text editor with the features that are genuinely useful without getting in the way. I really like the plugin system, actually. I get shit about it at work now and then, but my productivity is good and my code reviews go slightly better than average. I don't see a problem. I'm not happy that you absolutely have to use tabs. I wish I could split separate files vertically in the window. I also think the syntax highlighting is a little weak in some ways, but I expect that to be improved in version 2. Edit: the point about syntax - I just wish you could style things a little further. Say, add a background color to things. I'd like it if numbers could have a background color to be further differentiated for example. Even so, that's a small complaint.
If you just need a programmers editor, go with [Sublime Text](http://www.sublimetext.com/). It has a modest price tag attached to it, but it is an amazing editor. From the site: &gt; Sublime Text may be downloaded and evaluated for free, however a license must be purchased for continued use. There is no enforced time limit for the evaluation. I can't tell you how awesome the fuzzy search is. You just need to experience that for yourself. I use this daily, it was worth every penny. If you need an IDE, use [Netbeans](http://netbeans.org/). It's like Eclipse, without the hideous problems.
There isn't really one way that you should do these things. Pick a way, and stick with it until/unless it's actively being painful. A framework isn't absolutely a necessity, but the things you're asking about are what frameworks are created to solve. They give you structure. You don't have to ask how to organize your file structure, for example. The framework will most likely strongly hint at how they want you to do that. Not that their way is the only way, but if you're unsure, you might as well use a framework and learn the pros and cons of how they choose to do it. That way next time, you won't have to ask this question, you'll know what you like and don't like about the frameworks choices. You'll be able to make a more informed decision in the future.
Before consider any of that stuff, you need to set up project management. Something like [redmine](http://www.redmine.org/) works well. Then pick something for source control management (SCM). A lot of people swear by [Git](http://git-scm.com/), but you may prefer [Subversion](http://subversion.apache.org/), or [Mercurial](http://mercurial.selenic.com/). Finally, you should look at a deployment system. I use [Capistrano](https://github.com/capistrano/capistrano/wiki/), but there are many others. Don't be that guy who does everything over FTP. Define separate environments. Optimally, you should have three: development, staging, and production. Development is your own hardware. Staging is a server set up to mirror all the stuff production is going to run. Production is what the end user uses. Write and test in development. Allow beta testing by other users in staging. Nothing should go to production until it has had the hell beat out of it on staging. Only after you've settled on that should you start considering your project. You should start by developing a project overview, goals, timelines, etc. This should all go in to your project management software. After that, start filing tickets for yourself. Break big tasks in to smaller steps. Make your tickets granular. Set reasonable goals. This is the real secret behind big project development. It's not the file structure you use, or the RDBMS you select, or what features go in. It's the organization behind the project that makes huge problems manageable. It separates the novices who flounder around until some half-assed project which is 6 months late sort of works, from the pros who put out solid offerings.
you're doing something wrong? Never had a problem with zend on a SSD, I don't ever have crashes with it (linux, mac, windows), and version 9 is clearly faster than 8.
Replicating data across memcached is stupid. Memcached is supposed to be a cache for data that is easily able to be re-fetched from a DB if it expires, or the memcached node dies. It's fine for sessions too, but users may complain that they are randomly logged out when their session gets deleted. [predis](https://github.com/nrk/predis/) is great if you are using php 5.3.0 or above.
PLAN PLAN PLAN. plan it out. take some time to fig out, what exactly you need. and work out "use cases" as how they will be used. this will help you determine what you can "hackishly" put together, and what you will use to fully build. also try to draw out your project, that way you will see what db tables will go where.
A few others here have said it, but i'll reiterate it - stop building a framework. Find that one unique thing your application is going to do, and do it really; really well. Once you have that sorted out; go and release that just core component to the world. Here's some of the things I personally have a interest in seeing out there: * A component that can write XMP metadata to jpegs easily, robustly * A component that can detect reflection in a photograph * A component which helps you parse GoodRelations RDFa from a page * A component which writes document/literal wsdl well. * A component like HTTP_Request2, but for SPDY * A component that reads ical, writes ical * A component which provides modelling of a drivers licence (generic, plus ways to do individual state/regional licences) * A component which helps you schedule events (given ical events X, Y, Z in my Calendar, am I available for A, B or C)? There are a billion needs out there, and things like Composer or PEAR to help you implement them.
With me it was worse. I *bought* the upgrade to ZS6 out of my own pocket. Instantly my work became impossible. But it exposed me to Eclipse and led me to abandoning Zend Studio, so it all turned out pretty well. I'm on Netbeans now since it is more stable than Eclipse.
I don't recommend cakePHP, use something newer and more modern.
Well, a clean install on a clean OS should work, there's clearly an issue here.
You accidentally a word.
Agh. Most of them are bloatware.
That's a *really* subjective opinion.
Subjective doesn't crash servers. Reality does.
I can see why you chose that username.
lol.
I have been an on-off ZS user for years and recently (for the past year or so) I gave up on it completely except to try out the version 9. It has far too many bugs, slow and over bloated. Many of these issues however are really Eclipse issues. Nonetheless I cannot fathom how they justify the huge price tag considering how little effort they really put into it (most of their codebase is freely available as mentioned by others) for instance when creating a remote project Zend will try to download everything. There is no way to prevent this. Worse it will zealously download unrelated binaries, not just php files. This in turn often ends up with a popup indicating the progress that simply goes on forever and crashes. Second issue is that I have found no consistent way to use tabs or spaces for indentation throughout the editor. It is just not possible. It might work perfectly okay and then in some weird instance it would put a tab rather than 4 spaces...
As others have said use a framework but in addition to this follow their coding conventions and this will answer a lot of your structure questions. People complain about large frameworks being too slow and inefficient but in reality if you want to deliver a large project in anything like a reasonable timescale you'll need to use one. Server load can be managed but maintaining badly structured or poorly designed code will be a problem. As such I would opt for the well designed codebase over the potential for improved performance by using a more lightweight bespoke structure. I'd usually recommend Zend because I like it but I can see the appeal of things like CI.
lol normally do, it was one of those mind blank moments :P P.S. You dont know how to do the function the opposite way round, i.e. delete all characters except the special characters. I dont know what the Mahoosive body of text has in it tbh...
use if ( !empty( $name ) ){ $link_list[] = "..."; }
I only use gedit or vi
Perhaps the huge price tag allows them to offer a free version (PDT).
Because the mail() function would be lonely otherwise?
so zend sells crap and people buy, who to blame? don't blame zend, they are just doing what works (sell shit to clueless people). eveyone does it.
&gt; crippling the attack as the result set will not be shown. Why? (...) UNION SELECT users.password AS `newsTitle` It all depends on the case though.
PDT hasn't been updated in eons. It gives you errors if you try to use anonymous functions and static::$somevar. Really annoying, it's what I use, but it'd be nice if it was php 5.3 compatible.
This is a programming exercise/challenge. I want to build a framework from scratch. Yes, I am aware that alternatives exist. You can't deny that building a framework is a good learning experience though.
PDT has had an update with every Eclipse update. It is much better these days. http://wiki.eclipse.org/PDT/Installation
Upboated for CI, CI is not only easy, its fast and if you follow up the conventions you can do amazing work, I have been part of the team that used CI for an enterprise class application, the client holds 70% global market share in its product domain
CakePHP is easy if you have some knowledge of ORM, can adhere to set conventions and speed is not your primary concern. If you have ever done anything in RoR(Ruby on Rails), CakePHP is for you. Use CodeIgniter, CI, if you are very much new to PHP and ideas of frameworks. CakePHP certainly has qualities that you can set up a prototype in a weekend but its not that easy to learn as CI is. In your case if you need to do a login system use CI with Tank Auth (http://konyukhov.com/soft/tank_auth/), I have extended Tank Auth to use multiple roles with few changes and it works good for me.
I stand corrected. I used to download it off the zend site, apparently the eclipse site has updated versions, thanks for the heads up.
Tell that to they guys that made repcached, anyways my primary reason for replicating it is so that we don't have to recache all the items from the failed server once we move clients to the other one. Haven't heard of predis before but I will certainly check it out, thanks.
BTW, how's the performance of redis compared to memcached?
Recommendations? 
I thought the clients hash the keys to select which server they store it, but it shouldn't be changing the keys. So when I store a key on one server and repcached copies it on the other server, I should be able to retrieve it using the same key. At least that's how it worked when I tested it.
Pretty sure that's shit sysadmins.
Depending the injection location you can work with UNION (see BTMPL's response) or use the MySQL function SLEEP. This way you can test eg passwd characters by the response time of the server.
Personally, I find Notepad++ better.
As a big CI fan I'm wondering: can you give some more info on the project? I hate that developers tend to see CI as an unprofessional toy. Also, CI doesn't have that much convention to follow does it?
&gt;Can I split the window vertically? &gt;Sure. Hold the option key while clicking the split button to split in the opposite direction. Or, change the default direction in the General Preferences. http://www.panic.com/coda/support.html This plus cmd+control+b will make you happy (Hides/Shows the left sidepane.)
I started using Tank Auth and it works fine, saves you the time of creating something similar yourself, but I wonder why the author puts so much php is in his views (declaring variable values), while they should be set in the controller? It looks like a beginner's first steps at php where you put variables above the opening html tag, wtf.
Well, I am bound by an NDA so can't divulge client details. But I can still share the CI part of it. We actually rewrote a legacy telecommunication system. The project involved moving the digital voice communication to VOIP, moving the backend servers from old shell, perl scripts, c daemons and terminal based controls to modern web based infrastructure. CI was used in creating a web frontend. We converted 300 terminal screens to 300+ Flex forms which consumed and fed data to CI based backend which in turn interacted with MySQL. I was involved in developing the CI part and then packaging CI framework, CI code we developed, Java &amp; Flex into RPM archives. This was not the only CI based project. I worked on a greentech project for and half year which is based on CI. This project, actually a product, is rolling out new features every quarter. This one used to manage infrastructure of networked charging stations. The network is built upon a patented technology that creates a VPN using GSM, CDMA or any other network available. Regarding CI being unprofessional or PHP being lame, I have just one argument. A match box is very simple thing but can burn down a building using a matchbox. Its how you use it. Now for conventions, there are always conventions to follow. For example, use views only to render views, don't do any data manipulations in there. Models should only do the SQL part and return you record(s). Many many other conventions to follow. 
Agree, you can move validation rules out to configs, you can do many things. Just hack it to suite your needs. I tell you no two websites on this planet, even if they use wordpress, are not same. 
Thank you, everyone for your response. I am going to speak with the client to see if we can change this update policy. I'm sticking with NetBeans.
I always had issues with zend ide; phpstorm and netbeans have never let me down though.
Thanks for the recommendation. :) I will definitely check out Tank Auth.
Thanks!
I know, but you just split the same file. I don't find that useful.
I used yours and asort to alphabetize it, the code looks like this: if ( !empty( $NAME ) ){ $link_list[] = "&lt; a title=\"See more stories tagged wtih {$NAME}.\" href=\"/taxonomy/term/{$TID}\" &gt;{$NAME}&lt; /a&gt;"; } natcasesort($link_list);
Why? (Honest question)
I glossed over the word "separate" sorry about that. &gt;Open Separate Files in Split Window &gt;You can also open separate files in split windows by right clicking files in the File Browser and selecting “Open in Split” or by dragging the file into an already open split. Now you can edit two separate files in a split window. http://net.tutsplus.com/articles/web-roundups/20-excellent-coda-tips/
I don't recommend any of those frameworks... build your own... it's not that hard.
Make sure you set up a debugging environment to get the most out of it. This is where it really shines.
I've used Zend Studio for years, and I seem to be one of the lucky few that don't see the issues everybody else does. I recently installed ZS9 on OSX Lion, Windows 7, and a couple Linux VMs (Fedora and Ubuntu) without issue. The only problem I had was that I first tried the Windows package which didn't include a JRE, and it didn't want to play nice with my system's 64-bit JRE. Easy enough to fix, I just reinstalled the package with the bundled JRE. I haven't had any performance issues or random crashes since ZS6, but then I always run on systems with 4G+ system memory (only common thread I can think of). That said, I worked for a company where management decided to standardize all the environments. We got Zend Server deployed to all of our servers (production, staging, and local), which everybody loved. We also got Zend Studio 8, which got a mixed reaction. The problems weren't so much tied to application features or lack thereeof, but to performance. For some reason, just about everybody (except me) experienced random crashing and slow performance. The Linux users found that removing the vendor-provided JRE and installing the package from Oracle helped a lot, but it didn't solve everything. I never could figure out what everybody is doing to have these problems (or conversely, what I'm doing to not). From my experience, and from that of colleagues, it seems that the problems may lie more with Eclipse than with Zend's extensions. Many of the issues colleagues have seen with Zend Studio, they've also reported same or similar with Flex Builder or Aptana. Enough of my musing, let's look at the bigger issue. Your client agreements require you to keep software many of your team members don't even use up-to-date, because their projects are "built with" them? I think it's important to establish that their projects do not depend on an IDE, they depend on a technology stack deployed to the server. Developers should be free to use whichever IDE they feel most comfortable and are productive with, as long as they adhere to internal standards and coding guidelines. Hopefully that's something your clients can understand, and drop the money-wasting requirement. Might be easy to spin that money spent on the IDE requirements affects their own costs as well. **tl;dr:** I've never had issue with Zend Studio, but most of the developers I know have. I think in the end it doesn't matter what IDE is used to build a project, as long as established standards and guidelines are followed. Hopefully you can get your agreements altered to drop the Zend Studio requirement.
I've tried them all over the years and between text editors and IDEs I've settled on these as my go to choices... IDE: 1. PHPStorm (far and away #1... love this app) 2. Netbeans (good... like a slower, slightly less capable PHPStorm) Text Editor: 1. Sublime Text or Vim (I especially use Vim when logged in over ssh) 2. Text Wrangler (it's free and a solid second stringer) I have also developed a healthy dislike for: 1. Eclipse and anything Eclipse based (which means Zend Studio or Aptana). In my experience, especially when compared to Netbeans or PHPStorm, Eclipse is a clunky box of bolts and I have regretted it every time I gave it a go. 
This would have been my response about a month ago. I first started to learn a framework (Symfony 1.4). All was well, but man it was hard to keep track of all the files within the Symfony project. I switched to Netbeans about 2 weeks ago and can't believe I never used it before. Granted, I still use Notepad++ for one off scripts that don't really need any sort of tree structure.
I still use it despite the syntax errors that come up with some of latest changes to the languages (latent static binding, namespaces ect..)
Holy crap, when did that happen? Thanks! edit: I've been missing this for at least two years. What the hell.
Not sure when it happened, I've been using Coda for a little over a year and a half and I've been doing it since I got it.
I loathe Eclipse, We were forced to use it at University, I've learnt programming languages faster than I learnt to use that fucking thing properly. In the end I did the projects in Kate/Konsole (KDE user back then) and then just before hand-in created an eclipse project. Fuck. That. Shite.
Try havij - its an automated sql injection attack tool. Albeit it is windows based. I see a lot of scans against my server with this.
I am terribly sorry but this is going to be a very noob question and I only ask because I wish to learn: Can you please explain what you mean by schema? Do you mean the database schema or is there something else I'm missing?
Okay - month old, but I don't log in often. There are many examples, but the most commonly referred to one can be found being written about here: http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html The developer is one of the core PHP developers, and he's showing you a way that when using the GBK charset that mysql_real_escape_string can fail. It's not the only failure point, but its the most well known one. Before you claim something is "hearsay" try doing a little research on your own. There is *NO* reason to not use prepared statements. If you interviewed for a job with me and showed me a code sample not using prepared statements and tried to defend it, I'd show you the door.
+1 for a framework. I'll add that you should be thinking about testing from day one. Learn a testing framework and use it. PHPUnit is a great place to start. If you can setup and run a continuous integration server like Jenkins, then even better. The [Jenkins PHP template](http://jenkins-php.org/) is a great place to start. It packages unit test results with code coverage, copy paste detection, complexity analysis, and quite a number of static analysis tools together. Having a handle on these sorts of metrics can give you a lot of visibility into bugs, maintenance, and the life cycle of large applications.
nice to hear about other people using EMACs for php / web work
i dunno, did you read the instructions do you have the right JVM installed...
disqus.com Either this or Facebook comments IMO.
I work on a Debian laptop. Here is what I use * phpsh, whenever I have to run few, 3-5 lines * Scite, whenever I have to edit just one file * vim, whenever I have to edit files remotely, I even use it to edit local files, I love vim * Netbeans, when I have to work on a project, nothing like it, for me PDT is slow * gedit when I have to edit files on SFTP, gedit can replace Scite but Scite is fast, Notepad++ is based on Scite, hence the shortcuts are mostly portable Zend IDE...never heard of it :P
He means database schema
I actually prefer the new "slim" frameworks that have been popping up like Limonade-php. They're small, lightweight and ridiculously flexible. 
I use notepad++ when I don't have access to Eclipse. But I can't imagine it being better than a full IDE. I treat it like what it is, a better version of notepad.
Using anything based on Java as a desktop application is just asking to have bloated crap thrown in your face. No IDE should ever need more then 150MB of RAM and that's being liberal. Anything more = bloat.
1. MVC. 2. Good Schema. 3. Architecture of the server is very important: - Are you serving all content from the same server as the application? - Are you using a NoSQL solution in partnership with a SQL db? - Is there a caching layer? - Is one application server handling all requests? Is there a load balancer? There is no right way to architect a large application, but there are steps you can take to ensure that the application is quick and scalable.
Database Schema, so deciding what's a primary key, what types to use, and where to abstract. It's a hell of a thing to change once you've gone live...
Write it in a shell script, and invoke that with exec().
Sublimetext 2 is the newer version and has some improvements: http://www.sublimetext.com/2 Very nice editor.
I love how MVC introductions often go "copy/paste this here, that there, and these overthar - now go to localhost:8080, see? Now you understand what MVC is all about!"
this is a perfect topic for deconstruction - a form with some validation, and some database action, but still keeping it simple. i like the way CI handles this stuff, and right along with this, the [Session class](http://codeigniter.com/user_guide/libraries/sessions.html) + flashdata is great, and really gets a lame chore done in an easy fashion. edit: formatting
funny that I would get downvoted for recommending that a programmer actually write his own code in the fucking php subreddit... it's no wonder that I make six figures and most of you don't.
Hey, thank for this! It's very relevant right now. I am a front-end designer with some code skills, but by no means adept at OOP. I can rock markup and script like a madman. I have just uninstalled CakePHP out of frustration and was looking to restart my project, and was leaning towards CodeIgniter as my framework. Would it be allright to ask a few questions here and there? I am not trying to pull off anything complex. Send stuff to a dB, get stuff from a dB.
https://www.facebook.com/notes/facebook-engineering/the-hiphop-virtual-machine/10150415177928920 Official post here.
Also a direct link to the project website: http://www.elefantcms.com/ 
[Oh Jeffrey Way you beautiful man you.](http://net.tutsplus.com/articles/news/codeigniter-from-scratch-day-1/) Getting a touch dated now.
"return $hit;"... genius. I'm going to start doing this in my code.
Although there's a ton of really great tutorials on that stuff, you might be interested in just going straight to the Database class's Active Record functionality: http://codeigniter.com/user_guide/database/active_record.html.
Even better: var_dump($hit);
Can you name some that aren't?
Wow, what an incredibly vacuous and unhelpful comment. OP obviously needs help developing a large-scale application and clearly doesn't have the capabilities to write everything from scratch. I could be wrong; maybe he does, maybe he doesn't; the fact that a framework will or won't help him is arbitrary. The bit that makes me laugh is that suggesting to do so would insinuate that everyone who downvoted/disagreed with you is somehow unworthy and/or unqualified to make a six-figure income is, for lack of a better word, retarded! You're a phony and your comment reeks of desperation.
Lies
Cool, thanks!
I'll definitely check that out. Thanks!
I write large scale applications for a living... you were saying?
I'd personally avoid Havij. --- Take a look at these legit pentest programs [OWASP](https://www.owasp.org/index.php/Main_Page) [Metaspoilt project](http://metasploit.com/) [Nmap](http://nmap.org/) [winfingerprint](http://sourceforge.net/projects/winfingerprint/)
the oop in php is kinda similar to java. You should have no problem to use it in php if you know java. 
In my opinion, this article just highlights how terribly messed up CodeIgniter's interpretation of MVC is. Not a bad article, but not for the reasons you CI fanboys would like it to be.
Well Yii seems pretty lien, but I didn't like how it puts code in the views. Really I use my own framework that I wrote.
I get paid a six-figure income to write witty comments.
But not as cool as when you explode( '.' , $hit);
The whole word?
Let's see your website.
I'm curious how all of use "normal joes" with a copy of PHP+APC and Apache can take advantage of this development.
In your format_filesize function; any reason you did: round ($size / 1048576 * 10) / 10 instead of round ($size / 1048576, 1) (Hehe I can't help but look at files called functions.php, it usually has all the weird functions people don't know where to put.) 
Here are some things I found weird or didn't like (Some of them nitpicky). * You use CDN for jQuery UI but not jQuery itself. * http://i.imgur.com/HECI6.png * What the hell is a Block and how do I use them, I'm sure it's in the DOCS, but clients tend to no read docs. * You use the terminology head and tail over header and footer. * When editing CSS files they are compressed, it would be nice if it formatted them on edit and then compressed them again on save. * Deleting users brings me to a login screen, If I have to verify myself by logging in, what was the point of the JavaScript confirmation box? Though it actually logs me out it seems, so maybe this is a bug in the demo mode.
"You don't need to be an expert on everything but you need to be able to form opinions on things" Just what we need - more opinions from people who aren't experts :)
Care to share what techniques you use to cut down on the "bloat". Unless you develop very domain specific apps, most of the features Symfony offers seem to work across almost any problem domain. Sure the ORM has a bit of overhead, but from what I understand Symfony2 is split into components and you can choose to use whatever you need for a particular page/action.
things like aliases would require prior knowledge of what data you're sending out to the template engine. Is there any other way you know to get a result out?
"now we run a bunch commands and PRESTO, webscale"
I don't make use of many of the common design patterns and instead focus on decomposition. The framework utilizes MVC of course. A request is received, a few base classes and common functions are loaded, sessions are initialized and finally the request is sent to the router. At this point if I did a memory dump there would be very little memory usage and a very low number of classes loaded. The router will pull a cached file checking for routes that have been rewritten and send it to the controller. The controller will initialize any models it needs, the models will initialize any database connections they need and they extend a series of sub classes that automatically create/write the database queries as needed. Finally the controller includes the view in the same memory scope by dynamically creating the include path based on the template chosen. Nothing is loaded until it's executed, the code is very simple and easy to understand, the performance is off the charts and my development team love working with it.
$this-&gt;load-&gt;model("phpmasterform_model"); $this-&gt;phpmasterform_model-&gt;insert_address($data); CodeIgniter is shit. No one does this.
Zend Studio &amp; Eclipse are terrible for PHP development. Never again.
I agree with this guy. CodeIgniter &amp; CakePHP are trash software.
Sounds like you have a solid framework in place then. :) But going back to your earlier point, have you actually done any benchmarks against other frameworks such as Symfony or Yii for processing a request, rendering a view, etc? My guess is that the difference wouldn't be astronomical, especially if you took the same approach and load only what's necessary per request. What industry are you developing apps for? 
As far as I know the maximum concurrent requests it was able to support was 1,000 without caching on a VPS. So I think that's pretty good. I develop apps for a wide range of industries for small clients and fortune 50 corporations.
&gt; I hate that developers tend to see CI as an unprofessional toy. That's because it is. It is poorly programmed. Newbies love it because it has a lot of documentation, a "great community", and relatively simple. They just don't know any better. CodeIgniter is baby's first PHP framework &amp; MVC.
The OOP in PHP is simple like Java. You will notice that interfaces bare no importance other than to integrate with PHP foreach and other internal functions. It is only good for type hinting or guaranteeing a contract. This is interesting because given that PHP is dynamic, it already has dynamic dispatch with method calls so interfaces aren't technically needed for Polymorphism. Unlike C++ where you will need a virtual method for dynamic dispatch to achieve Polymorphism. I believe PHP is the only dynamic language that has interfaces or abstract classes. You will also notice that only until recently are namespaces supported. Many PHP libraries still don't use namespaces. Some will use a PEAR naming convention to reflect namespaces. Example, the class name Database_Adapter_MySQL -- the underscore indicates a directory separator. So this would be defined somewhere like Database\Adapater\MySQL.php. Often enough you will be restricted by what PHP version you can use. I would say that 5.2 is the most popular right now and most libraries are in compliance with it. It is unfortunate because 5.2 does not have namespaces or closures which is absurd.
That looks pretty nice! I glanced through some of the code and found it readable and well documented. It definitely feels responsive when using it in the browser, much more so than something like Wordpress. The complaints that I have are mostly on the usability. I found it difficult to figure out how to make a page show up on the site after having created it. (Though now that I did it once, I am sure I could find it again easily). In general, I give you a lot of credit, and I think it's some really good work. Personally, I prefer CMS's that you log in and then manipulate data, but that's just my way of doing things. As someone who is writing a CMS myself, I know how hard it is to do it right, and even if it's not there yet, it sure looks like you're going in the right direction! Good luck, and thank you for sharing with us.
How should it be done, and what's wrong with Codeigniter? I'm genuinely interested, as although Codeigniter gets the job done for me, I know for certain that it's not the ideal framework.
Why does there need to be a mention of Zend? 
If the injection is successful it's easier to guess what's the alias. You can alwasy go with `id`, `news_id` etc. But no, there is no way to check the name of the field displayed. Well - unless the server is running in E_STRICT where you'll get a notice about missing variable / index;)
Well, in the documentation for HipHop (I know this thread is about HHVM, not HipHop, but it's relevant): &gt; HipHop is not the right solution for everyone deploying PHP. We think it will be useful to companies running very large PHP infrastructures who do not wish to rewrite complex logic within C or C++. Namely because for most sites, the speed of the PHP interpreter is *not* the bottleneck. Any sort of disk access (especially database) is probably going to be taking up most of a page's time. For such sites, attempting to speed up the PHP runtime won't have much impact, whether from a native C++ application via HipHop or from the JIT compiling that HHVM provides. Most pages aren't particularly CPU-intensive. Of course, I'm speaking in generalities here. The reason it works for Facebook is scale. They have a *huge** memcached setup to prevent accessing disk whenever possible, etc. So, for them, PHP execution time starts to take up a larger percentage of the overall time. As it stands, there's not much a "normal joe" could use this for. It isn't integrated into the standard PHP runtime and doesn't work with Apache in any way. In fact, unless you manage your own server and are willing to completely abandon Apache, I don't believe there's much this could do for you at all, nor should you really want to use it for small applications. *tl;dr: This is made for large-scale applications, not "average joes."* *http://www.facebook.com/note.php?note_id=39391378919
Well clearly CodeIgniter does.
php storm is in java and it's very nice!
I absolutely can - building a framework teaches you no better than building an individual class and getting its dependencies right, ensuring it is testable. Why not pick up an existing project and hack away on it - IE: there are numerous old and underloved PEAR packages out there which could use test coverage &amp; refactoring. You are likely to learn far more about what not to do by trying to work with other people's mistakes. 
Does your template generate any urls with GET parameters. getfile.php?fileid=12345 makes it pretty easy to guess at least what one alias is :) 
Look at how [FuelPHP does it](http://docs.fuelphp.com/general/models.html)
While fuel's way of doing things is an improvement, they are still abusing global state and most of the code is "class oriented programming" , not OOP. 
&gt; would require prior knowledge of what data you're sending out to the template engine You think hacking never involves a bit of a guessing game sometimes? If a hacker is at that this point, he's practically won.
Read through the cake book's chapters 2, 3 and 4 and you'll have 90% of working with CakePHP down.
What a horrible piece of code. Here are the issue is have with it: - using `@` to suppress errors - global variables everywhere, procedural core - completely no clue how classes should be used ( look at [/lib/Controller.php](https://github.com/jbroadway/elefant/blob/master/lib/Controller.php) ) - high cyclomatic complexity in almost all functions/methods - lack of understanding of what makes Model2 MVC And thats only PHP.. i don't even want to talk about the JS part of the things.
Meh, [this](http://www.reddit.com/domain/phpmaster.com) is everything you need to know about this article.
http://dev.mysql.com/doc/refman/5.0/en/news-5-0-22.html I did do my research, and this exploit was fixed a long time ago :)
Haha, that's a function I brought in from an older library and didn't update. That was from waaaay back, pretty sure it came from a comment on php.net... (as shameful as that is, got the job done :)
* Ah yes, I meant to file an issue so I'd remember to make the jQuery UI script local. Thanks for pointing that out. * Blocks are little spots you can edit. They're set up by a designer in the layouts with a little {! block/my-block-name !} tag and users can edit them after that. * Those aren't header/footer per se, it's the &lt;head&gt; and just before &lt;/body&gt;. Those seemed apt names :) * The CSS that's compressed is only the 960.gs stuff * Shouldn't bring you to a login screen unless you delete yourself. Could you file an issue on Github? Or is this on the demo site, in which case you may be deleting yourself, yes.
PHP's current core was developed by Zend. It's still [called Zend](http://svn.php.net/viewvc/php/php-src/trunk/Zend/) in the PHP sources. I think the OP meant that this doesn't look to be just a modification of the Zend-based core, but rather a completely new core to the PHP engine. There is [more info here](http://php.net/internals2.ze1.zendapi) for the brave.
And as a brand new core (as opposed to the Zend core), it isn't guaranteed to be as stable or functional as Zend PHP, nor is it guaranteed to behave in the same way. The understanding I get from what I've read is that it works for Facebook, but YMMV.
While I won't be an asshole about it, teresko brings up some good points. Here's some examples: /lib/Controller.php public function handle ($handler, $internal = true, $data = array ()) { global $controller, $page, $tpl, $memcache; $out = $memcache-&gt;get (str_replace ('/', '_', $this-&gt;uri)); if ($out) { return $out; } $this-&gt;internal = $internal; $data = (array) $data; $this-&gt;data = $data; if (! isset ($controller-&gt;appconf[$this-&gt;app])) { if (@file_exists ('apps/' . $this-&gt;app . '/conf/config.php')) { $controller-&gt;appconf[$this-&gt;app] = parse_ini_file ('apps/' . $this-&gt;app . '/conf/config.php', true); } else { $controller-&gt;appconf[$this-&gt;app] = array (); } } $appconf = $controller-&gt;appconf[$this-&gt;app]; ob_start (); require ($handler); $out = ob_get_clean (); if ($this-&gt;chunked) { $this-&gt;flush ($out); $this-&gt;flush (null); } if ($this-&gt;cache !== false) { $timeout = is_numeric ($this-&gt;cache) ? $this-&gt;cache : 0; $res = $memcache-&gt;replace (str_replace ('/', '_', $this-&gt;uri), $out, 0, $timeout); if ($res === false) { $memcache-&gt;set (str_replace ('/', '_', $this-&gt;uri), $out, 0, $timeout); } } return $out; } You should *not* be using globals in this day and age, especially if you want to call your code OOP. In the same class, there's this: if (! isset ($controller-&gt;appconf[$this-&gt;app])) { if (@file_exists ('apps/' . $this-&gt;app . '/conf/config.php')) { $controller-&gt;appconf[$this-&gt;app] = parse_ini_file ('apps/' . $this-&gt;app . '/conf/config.php', true); } else { $controller-&gt;appconf[$this-&gt;app] = array (); } } You should be using exception handling, not the `@` operator. Another thing you should consider doing is to set up a constant that defines a base directory to work from. Maybe I'm weird but I don't like trusting relative locations.
I'm afraid I disagree. Globals are not necessarily evil. If I was making a general purpose class in a general purpose framework, I obviously wouldn't make environmental assumptions like the availability of certain global objects, but since I'm not and this is only for processing web requests in a specific way, I chose to make those assumptions for the sake of shorter code. As for the exception in that code, it's unnecessary. I only care to set a default value if the file is missing. Using an exception in this context would add nothing but make the code less clear and no more correct. The problem with reviewing other peoples code is that you place different assumptions on it that may not be correct. I made certain choices I'm well aware other developers may raise an eyebrow at, but I do know the "rules" and when to break them. I'd love to discuss further but I'm stuck typing on an iPhone ATM... :)
HipHop, Facebooks current PHP -&gt; C++ translator, has it's own runtime library and doesn't use Zend. HHVM works using this same runtime library.
Well .. computer science disagrees: http://c2.com/cgi/wiki?GlobalVariablesAreBad You should really investigate what is **Dependency Injection**.
&gt;it isn't guaranteed to be as stable or functional as Zend PHP. That's a relief ;-) 
I'm well aware of dependency injection. I just think that in some cases it's overkill. And no, computer science doesn't agree on only one way of doing something. I take a more moderate view and say that needless global variables are bad. But you can't instantiate your first object and use it without some global state, however small. Saying something so broad like "all global variables are bad" is too zealous of an approach for my liking. Rules are meant to be broken sometimes.
You should ping the connection instead of assuming that the connection still exists : http://php.net/mysql_ping
I tried all editors including PHP Storm which has no WebDAV support so it's instantly disqualified for me. Java just puts the nail in the coffin. For windows I use PhpED which was written in C by a developer who used to work on the PHP source itself. http://www.nusphere.com/products/phped.htm But out of all IDEs the BEST by far is Coda by Panic for OS X. http://panic.com/coda/ I run a hackintosh JUST for this program.
Good advice, but the inverse is also true: "You ain't gonna need it". Part of being a good developer is keeping things flexible enough without wasting time crafting general solutions to specific problems.
Why should anyone else care about those things you listed?
I hope you do realize that this article is about languages with real global variables. PHP has them only by another misnomer. [It means something different.](http://stackoverflow.com/questions/1557787/are-global-variables-in-php-considered-bad-practice-if-so-why/1557799#1557799) Likewise is eschewing them *at all costs* not much brighter than having hundreds of them in any shared scope. (Also to see some funny backpedaling lemme just mention $_GET and $_SERVER.)
You are right , i should not have used words "global variables" .. the "global state" is much better term. As for $_GET and other superglobals in php; there is no way to avoid them , but this does not mean that you should use them all over your codebase. Instead you should encapsulate the the superglobals in an object ( usually people tend to name that class `Request` ), which then is used in entire application. If done so, it becomes possible to perform proper unittests and inject mock objects in place of real `Request` instance. Besides, superglobals are not the only form of global state you encounter in php .. there is filesystem too. And you yourself should be able to think of couple other examples. Avoidance of global state in your code is all about removing the "magic" from it. It make the maintenance, refactoring and unittesting possible.
I would've thought that was patently obvious, is all...
What you do on your own time is your own business, barring any legal (contractual) obligations. What feels right to you morally is your own business but I would go ahead and put the code out there. Don't be surprised if the opposite of what you're thinking happens - if it turns out that no one cares about your code.
Well I'm not expecting anything big. It was a 8 hour job that I was paid less than 200 dollars. The main reason I want to put it out there is I need some sample projects to show on my resume when interviewing for jobs next month.
Less than $200? Doesn't use any of the same code-base? Go for it. 
Not everyone is familiar with the inner workings of the PHP engine.
I'm not a lawyer, but I'm not new to freelancing, so although I hope this is a well informed opinion, take it with a grain of salt. Software patents cover the general idea of a piece of software. Copyright only covers the specific implementation of software. The odds of your previous app being covered by a new patent is almost exactly zero, so you're fine on that front. Copyright might be a little sketchier. The standard contract has you assign copyright to the buyer. If you did the work without a contract as an employee, copyright belongs to the company. If you did the work without a contract as a freelance developer/contractor, copyright belongs to you (but you can't revoke their license). If the copyright isn't yours, you need to be pretty picky about not reusing code. The standard contract does not limit your ability to make software that directly competes with software you made for your buyer, but it's a clause that could be included. If there's a contract, check. So, odds are that you're completely fine, but there are potential hangups. Check to see if they apply to you and go from there.
depends...were u payed for the code? or the job? did u give away the rights to that code? how similar is it? etc etc. odds are..youll be fine if you post it
I was a freelancer and there was no contract. I was paid for the code I gave him and he owns it. Those were the exact words used.
It completely depends upon the contractual agreements you had with the person you sold it to.
If there was no contract then you really have 0 chance of being sued for it. He got what he paid for. But there is no contract stating you can't resell the exact same code etc to someone else. He paid to be able to use the code you sold to him. IANAL but I think you are in the clear, even if you use the exact same code you gave him.
Yep. Go Open Source!
it's also quicker than file_exists :)
edit: why am I being downvoted for this?
Thanks for posting this, I read the article you are referring to and realized there was no xss or htmlspecialchar mention. I learned the hard way how important these checks are and suggest if you don't know what they mean, google it! Thanks again!
Please, top using the ancient `mysql_*` function and learn how to use either [PDO](http://php.net/PDO) or [MySQLi](http://php.bet/MySQLi) objects with prepared statements. --- That said, i would not recommend others using that piece of code. It is violating [OCP](http://en.wikipedia.org/wiki/Open/closed_principle) and creating a global state. Additionally, this code forces you to use one and only one DB connection per application. The use of `class` there is only cosmetic. You would get exactly the same result if you had just used namespace with global variables and two standard functions. This is not OOP.
i barely remember half the damn method calls i work with. Try doing that with Obj-C, or java. Some people just learn to code with an IDE, give them time to learn not to if they have to. IDE's are designed with the intention of drastically speeding up development time. Don't underestimate the necessity of an IDE.
I know awk, does that count? :) I had to do some things with awk and would say it's a much nicer language than the POS bash. Plenty of people who know how to work within the unix command line who do their work with many of the utilities such as sed, awk, grep etc. Ask does that mean you know bash? do you write scripts for the command line and in what language.
I didn't downvote, but you did say 0 'chance' of being suded. You can get sued for anything merit or not. Also it depends on what state he's in and it's unlikely he would be a true independent contractor. The IRS has pretty strict guidelines. Since there was no written contract the IRS would find he was an employee. It is messy, never do anything without a contract.
You are not a lawyer. Yes, you are giving him legal advice. No, you shouldn't be.
This is not correct. What he did wasn't licensed. It was work for hire. You are going to get someone in serious trouble.
It's copywritten since the berne conventions, and the advice you're getting from various Redditors doesn't make sense if you put it all in a pile together. That's your clear indication that most of the Redditors are giving you seriously wrong advice. Ask a lawyer. It'll take you ten minutes or less on the phone, and they won't charge you without arranging it first (honestly, for something like this, they probably won't charge you at all, hoping to pick up more legitimate work later on down the line.)
Work for hire doesn't need a contract. It's copywritten and owned. He doesn't know what he's talking about, and quite by accident, he is advocating theft. This is why you do not ask for, give or take legal advice on reddit: because reddit is where everyone thinks warez is technically legal, and downvotes things just because they're angry. Next, go to the fat camp and ask for diet advice.
Questions like this are shaky ground. Suddenly everyone in here becomes a legal expert, except they aren't. Stick to asking code related questions and talk to an actual lawyer when it comes to law.
Model in MVC is not some concrete class. It is a layer which contains two types of objects, each group having specific responsibilities: - domain business logic , which is represented by *domain objects* - data storage and retrieval - represented usually by *datamappers* Each *domain object* can internally use unlimited number of other domain objects and mappers. Controller in this case is responsible for changing state of the model layer. If interaction with Order object affects multiple Item objects, then Order object should handle it, because it fits the 'prerogative' of domain objects. P.S. when initially writing code, you should favor maintainability over performance. It is much easier to optimize well written code , then to understand optimized one. 
Nice use of both ' and ".
No, I'm pretty sure he is correct. It's consistent with what I've been told by my lawyer as a contractor. If you do it as an employee, copyright belongs to the buyer. If you do it as a contractor, copyright belongs to the seller. The real question would be whether or not the agreement they had at the start constitutes a contract, which is something I wouldn't touch. It's ok if you don't believe me though, because like the person you're replying to, I have reference. &gt;Whether or not a particular work is made for hire is determined by the relationship between the parties. This determination may be difficult, because the statutory definition of a work made for hire is complex and not always easily applied. That definition was the focus of a 1989 Supreme Court decision (Community for Creative Non-Violence v. Reid, 490 U.S. 730 [1989]). The court held that to determine whether a work is made for hire, one must first ascertain whether the work was prepared by (1) an employee or (2) an independent contractor. &gt;http://www.copyright.gov/circs/circ09.pdf
&gt; If you do it as an employee, copyright belongs to the buyer. If you do it as a contractor, copyright belongs to the seller. And since this is work for hire, neither of those situations apply. Contractors have contracts. &gt; like the person you're replying to, I have reference. Amusingly, it agrees with me, that this is work for hire, which is what I said before you spoke up.
&gt;The court held that to determine whether a work is made for hire, one must first ascertain whether the work was prepared by (1) an employee or (2) an independent contractor. Contractors do not make work for hire by default. EDIT: I see what you're saying. You think "contractor" means "contract," which isn't true. Independent, non-employee worker.
True :)
&gt; Contractors do not make work for hire by default. Yes, that's kind of what I've been saying the whole time. &gt; EDIT: I see what you're saying. You think "contractor" means "contract," which isn't true. That's like saying that I think automobile means glass. No, I don't, but if you have an automobile, you can expect to see some glass. By default, when someone hires you to do some work, it's work for hire. This person is not a contractor. &gt; Independent, non-employee worker. Does work for hire. That is not a contractor.
XSS, that sir, is a very common problem. Most of the times tutorials teach you how to write amateurish code. You learn tricks of the trade by becoming a tradesman. :-)
Always post raw data in the database, never apply htmlspecialchars before putting it into the database, never format it as html either... always the raw data. Why? Because you never know how you might want to use the data later on. Maybe you'll want to use it in an email? Maybe you'll want to print it..... who knows, raw data only.
Please stop enabling others to use the decrepit MySQL extension. Nobody should be using it in new projects.
Why has the trend to wrap everything in so many layers taken such a hold in PHP? Filter the $_* data by all means, but then why wrap it in something else? That's just extra verbosity, extra memory usage, only to be a purist and avoid using built-in language features. I get the feeling we got so defensive about not being a serious language because of PHP's early issues that now we've taken to the Java and enterprise way of doing things to look more serious. And you can just as easily set up a mock $_GET or $_POST to unit test against instead of a full Request object that just wraps them. I'm not saying to pollute the global state with a bunch of crap, I'm just saying we're going overboard with avoiding features the language already provides for us.
I think it depends on 1 main thing, the idea. If it came from them then it is theirs then. However if it is a generic function that you simply built for them then I see no legal bindings.
You should be aware that encryption is easy to bypass for anyone who wants to. You'll kinda be like the PC games which are cracked on day 2 and from that point on you just annoy the legitimate customers.
By encrypt you most likely mean compile, any form of encryption you put on the code to run is really just a hackers throw away from being cracked. Apart from those you mentioned I think Facebook's [PHP Hiphop](https://github.com/facebook/hiphop-php/wiki/Running-HipHop) may also do the trick. Personally I think you're better of just licensing your software and then take legal action if you find out people are unlawfully distributing it or using it.
I recommend that you go with ionCube for this. It's more affordable than Zend and widely supported. Also, ionCube encoded scripts will run on the CLI. You should also check out my software [SPBAS](http://www.spbas.com). It provides licensing and all the things you need to run a software business. We have a bundle deal with ionCube too if you don't have an ionCube license yet. SPBAS and ionCube work great together as a complete solution.
Sorry, but this is completely wrong. Cracking games is *not* the same as deriving their source code. A properly "compiled" Zend or IonCube script will simply prevent anybody from viewing the original source, but not from reverse engineering it.
werd
PHPBench is linked to on http://www.phpfu.org/effeciency as an example of a efficiency. Not only does that type of optimizations not belong in PHP in *any* case, they are actually wrong. http://stackoverflow.com/a/2608166/188044
Misc. code review comments, if that's what you're looking for. Keep in mind I'm not saying anything is "wrong", just offering feedback and alternatives to consider. if(strpos($page, '401 - Access Deeenied')){ return false; } else{ return true; } if(boolean) return boolean; Just return the thing, or negation there of, of what ever you're testing. *edit*: strpos only returns a boolean in a failure to match so the return here could look like: return strpos($page,'401 - Access Denied')!==false In general your method of testing strpos might not work as desired if there was a match, but at position 0. You might replace the print_url method with __toString(). Then you can just print the objects as if they were scalar variables. $fh = fopen($myFile, 'w'); fwrite($fh, ob_get_contents()); fclose($fh); Why not just use file_put_contents($myFile,ob_get_contents())? Or if you're using the fopen method then test that $fh didn't get set to false (permissions, invalid path). $result = mysql_query("SELECT COUNT(*) FROM logins WHERE password = '$password' AND username = '$username' LIMIT 1"); $row = mysql_fetch_array($result); if($row['COUNT(*)'] &gt; 0){ mysql_query("UPDATE logins SET `time` = NOW() WHERE password = '$password' AND username = '$username'"); } else{ mysql_query("INSERT INTO logins (password, username) VALUES ('$password', '$username')"); } The limit 1 isn't needed as count(*) is only going to return exactly 1 row. This table is going to be relatively small so you could get away with just putting a unique key across those two varchar columns and just run insert into logins (email, password) values ($email, $password) on duplicate key update time=now(); Either way $email and $password should be passed through mysql_real_escape_string() to prevent SQL injection. Even if you're 100% sure the data is clean it's not a bad habit to adopt. 
Have you tested it? How good were your results?
This is the kind of shit that you want to make for yourself but never release to the public.. otherwise it will slowly become more useless the more people that use it :p
Please do - I'd love to have that. Thanks for the share.
&gt;It is messy, never do anything without a contract. Best advice, right here. "No contract, no work" and "Fuck you, pay me" should be the slogans of everyone who does freelance creative work.
Unless you're really inefficient, 200 for an eight hour job is practically a charity case. I see no ethical problem whatsoever with releasing similar code to the public. One thing I've learned from freelancing is, you're not really charging for the code as much as for knowing how to make it work. Just because you're throwing it out there doesn't mean just anyone can pick it up and copy your customer's website.
Way to be literal... The comparison is reverse engineering is not difficult and at that point the pirates will have the source code they can modify while the legitimate customers will have the encrypted source code where they can't fix bugs themselves, and where they'll need a shitty PHP module to slow them. So yeah, my analogy of them being "kinda" the same still holds, if you want to be anal about the technicalities then be anal about the word usage as well.
No, you still don't understand - the pirates still don't have the source code. Cracking involves working with machine-level instructions (usually x86 assembly) to skip any license checks. And encryption isn't used - its compiled into bytecode. From Wikipedia: &gt; The tools use the technique of compiling to bytecode prior to encoding **so that source code is eliminated**, and runtime overheads are reduced. Also, have you ever tried reverse engineering an x86 binary? Its not "not difficult". Its pretty fucking complicated. And the idea that you can use this to get the original source code is laughable.
$25 an hour isn't charity work. It's a pretty good wage for a lot of us.
Depending on how secure you want the code to be you should look into actually compiling it to a binary (PHC, Facebook HipHop). Encrypting with ioncube or zend just encrypts the php code itself. Programs are available to completely reverse this process and give you back the source code. No comments would be reproduced but the php code it almost exact.
Looked at your software. You might want to consider minification or just some kind of framework in your code to combine all your js &amp; css files for quicker page loads, since each of your pages are considerably slow. Also i would highly recommend you don't directly inject js into the html layer of your pages. It makes for difficult to maintain code. Just some immediate observations.
Freelance or for a company? $25 is decent as an in-house developer, but releasing code publicly that you wrote during your 9-5 is a little more questionable legally. As a freelancer though? $25 * 40 = $1k / week. You'd normally get about three weeks worth of vacation and sick days, so that's $49k / annually, then you subtract overhead, liability, lack of company health insurance and 401k and you're looking at a pretty low annual rate for all the extra responsibility you've taken on, not to mention that you have no job security as a freelancer, so you have to set aside some extra money for when work inevitably dries up sometimes. **tl;dr** $25 / hour for web development, as a serious coder, would be severely selling yourself short. 
How hard is the test, anyway?
$48k sounds like a shit-ton of money to somebody who makes $11.50/hr doing part time web dev.
I'd love it if you could give me info on how the test went for you, and any tips and info you could share after you take it. I didn't know they gave you a copy of Zend Studio, which is tempting for me since I need to upgrade to 9 and that costs $200. Maybe I'll just take the test, lol.
I will definitely write about the entire examination ordeal after I take it. I figure I'll give myself a few more weeks to study up to make sure I don't waste the $200. I'm currently making my way through [the study guide](http://www.zceguide.com/) and it's been useful so far even if it only covers up to 5.0. I've never actually used Zend Studio, but I haven't really heard anything positive about it. Most people say it's a bastardized version of Eclipse/PDT. Is it really useful?
Please, for the love of all that is holy, find a better way to embed your code snippets. I *loathe* sites that give me "smart quotes" in code snippets. Ruins everything. &gt; $$name = ’bar’; Not cool. &gt; $$name = 'bar'; Copyable.
I've read that a lot of people with years of PHP experience have been failing. I've got about 4 years of experience with PHP and the study guide is showing me a lot of stuff that I had no idea about. The most surprising was that function names are not case sensitive. That just seems like a bad idea?
I know your pain and hate the same thing. I had no idea the plugin was doing that. I used the first wordpress code plugin I found. Any idea which plugin doesn't do that?
What do you think legal advice is? The OP's question *definitely* doesn't belong here.
It's probably WordPress itself doing it, not the plugin. I remember answering a SO question on this. The tl;dr was that it's the `wptexturize` function screwing things up, and [this post](http://www.noobcube.com/quick-tips/wordpress-quick-tips/wordpress-stop-changing-my-quotes-/) has some ways to kill it.
Thanks for the review! Changes have been made that reflect your suggestions where they were applicable. I was thinking when I wrote it that count(\*) would be faster if limited (my thought process was that if the function returned when one entry was found instead of checking every entry it would be faster, but I wasn't sure if limit adjusted that way for counts). [I did a little profiling test and it turns out that limiting is actually slower](http://pastebin.com/1Ue5dnc6). Huh. So is count(\*) without limit the fastest way to check for existence (something I find I'm doing pretty often)? Or is there some other mysql function I'm completely oblivious to? Also my profiling methodology here might be broken... 
Woah, why have you chosen that font?! It's unreadable! https://img.skitch.com/20111212-nc5wdrt1f27my2gds271k34cdp.jpg
I have to ask (as I have asked regarding the Sun certification for Java devs), is this something that really gives anyone an edge in the job market? I've never seen anyone asking for this, and I've never met anyone who has done this.
Ha, that is awesome. I'm not sure how you made that happen but it doesn't look like that on my machine.
I'm not really looking for a new job. I've just been working with php for years and I want a certificate that proves I'm damn good at it.
File permissions? or safe mode? http://www.php.net/manual/en/ini.sect.safe-mode.php#ini.safe-mode-include-dir
It won't protect your work 100%, but it seems like they might. You have to weigh up how much it affects the user experience and the likelihood of theft.
&gt; The Copyright Act of 1976 provides that copyright ownership "vest initially in the author or authors of the work." 17 U.S.C. § 201(a). Which does not in any way argue with what I said. &gt; I think you incorrectly jumped to the conclusion that it work for hire. Work for hire is determined by courts using a number of factors set out in Community for Creative Non-Violence v. Reid. Essentially, "the focus is in the hiring party's right to control the manner and means by which the product is accomplished." Id. Which does not in any way argue with what I said, other than that you slapped an opinion on the front. If you read the reference you gave, it quite clearly says that this work that someone got hired to do is work for hire. &gt; No, I didn't tell the OP what to do That's still not a good reason to give wrong advice in public.
Thanks for trying but holy shit did you miss the point so much. I understand the technical aspects perfectly well. You, however, still seem to completely disregard the intention of my original post, which was to compare the customer experience, not the technical implementation of PHP source code protection and game legitimacy checks. This stupidity has earned you the 5th person to get the "dumbass" tag in RES, congratulations. I realize that breaking PHP source code "protection" is nothing like cracking game protection. That doesn't change that going from PHP bytecode to PHP source code is not difficult for anyone who knows even a tiny bit about the format nor does it change the fact that these so called encoders such as ioncube has been broken numerous times in the past years. Your comparison of x86 binary with PHP bytecode is honestly so stupid, they're two completely different thing. If you want to compare PHP bytecode to something then compare it with something like .NET intermediate language which is far closer than the assembly instructions you'll get with x86 binaries.
I'd have to imagine that it goes into much more Zend framework concepts than just PHP...
You should use the EOL character for files and plain text: http://stackoverflow.com/questions/128560/when-do-i-use-the-php-constant-php-eol
Thanks for the great feedback Compubomb! You're talking about the app itself right (and not our website at www.spbas.com)? Just wanted to confirm this. A framework for the js &amp; css is a good idea. I'm going to do a little research on it. We've got storefront changes coming up so now would be a good time to implement something like that.
I breezed through the practice exams "Pass" status on every topic, had flash cards for every last array function and their weird names, studied for months, drove 100mi to the nearest Vue center and failed. The questions were actually quite difficult, but I was confident in most of them. I consider myself to be fairly advanced in php. That was about two years ago and I've been a web dev for a little over 7 years. It's definitely a tough exam, I'll probably try again after I finish tending to my hurt ego.
Not off hand, but WP is so damn popular a google search or two should have you sorted out.
Why would I need to have a website?
Exactly... but, as you can see, thinking outside of the box is obviously not mainstream... even on reddit. These guys have no idea... and ultimately, it's why I can't stand working as a corporate developer... because I would have to work with people who rely on stupidity like Zend Framework, Code Igniter, Cake, Symphony or most other shitty frameworks that these guys like to use to create server hog applications. I use my own framework that is 100% KISS. There is no good reason to make it so complicated... the main reason people use these things is because they like crutches and buzzwords. Btw... I don't use PDO either... saying that will probably get me more downvotes... not that I care so much about the downvotes... it is what I get downvoted for that I find to be galling. Saying these frameworks suck is like poking someones Mom in the eye.
Definitely a grey area, but since you won't get rich off it there's probably little chance he will come after you. You should maybe just ask them if they're cool with it? In the future, what you should do, especially when you start billing by project instead of by hour, is to build up a set of libraries and modules that you will reuse. State in your contracts with clients (yes, you should have one for all your projects) one of 3 things: A) I own the code, you cannot make any changes without going through me (no one with a clue will hire you) B) You retain all rights to use and improve and do anything you want with the code, client has rights to the specific version of the code you provided and can make any changes they want on their own or with a new developer, but they can't transfer the rights for the original code to the new developer (but you'll have a hard time being able to enforce it) C) Client owns all the rights to the code and all concepts related to it's creation and you will never write anything remotely like their app again (career suicide) I suggest option B next time, for now I still just suggest you give the customer a courtesy call, and/or DON'T post on GitHub, SHOW the code to your new prospective client/employer and tell them that you don't have the rights to provide it to them.
It runs strangely. I'm still ironing out the kinks but a large part of it is Bangbros being weird and not me. There are good batches and bad batches and I can't tell the difference because it runs automatically. As it stands you can look through the printout at the bottom of the page and see which are valid and that's worked for me every time so far.
I like it, not sure what most people's problem with it is. I think the interface is nicer than eclipse/PDT and it runs better on my computer. It's mostly just personal preference I think though. Alot of people have issues with crashes it seems like, although I'm not sure what the deal is as it's completely stable for me.
No, there is a PHP 5.3 certification and a Zend Framework certification. The PHP 5.3 one covers only core PHP. 
Then charge more. If you can write PHP, Javascript, and especially if you know jQuery and at least one MVC framework, your skills are very much in demand. And again, you're not actually taking home $48k -- that number was based on having 40-hours of work available every week that you work, plus you have to cover a lot of expenses that you don't when you work for someone else full time. 
I'm going to start learning my first framework in January and was going to learn CodeIgniter. Why not CodeIgniter and which one would you recommend to learn first?
I think it's useful for the places that really value certifications as proof of 'knowledge.' Otherwise I think most places value proven knowledge like having a blog, showing code contributions, and a healthy portfolio over the ZCE. It's a nice thing to have, but I don' think it beats real experience in the PHP world.
http://code.google.com/p/zfdebug/ ? 
I'd love to charge more. In due time. I'm getting student wages right now.
Brilliant :) Thanks! On a side note, I am beginning to gain traction against this beast. Soon Zend Framework, all your base are belong to me.
the few who passed gets an edge since they have their name in the directory and something to put on their resume. the real winner here is zend tho, certification rackets are always profitable.
"This is mostly due to my ignorance.." not ignorance, it's incompetence. zf is crap, but lot of people have done great stuff with zf. so obviously it's not zf, it's you.
So if you use the command line tool to create an app, you'll end up with a simple app where all of the controllers are in a single folder. You can continue to use the tool to add more controllers and actions.. its all laid out for you from here.. just shoot for fat models and skinny controllers
But does it have indentation guidelines now?
and then, you will realize, that its total crap. I mean its great tool for HUGE projects, or for your own CMS but for usual stuff its not worth it. i always spend 50% of time tuning zend, and 50% with coding my app. i prefer smaller frameworks which just works and ratio is about 5:95 .. 
One problem with those types of benchmarks is taking into account disk cache. Initial tests are going to affect future tests. What if you reordered the tests? Either way the limit is inconsequential. If you find some small variance that's not an order of magnitude different, and you are able to reliably replicate, it's nothing. Delving more into mysql specifics: count(*) on myisam engine tables are going to be quick. Innodb is going to take more time for the 'simple' operation on large tables. 
I'd like to take this one step further in the @file_exists() example. Since config files are optional in Elefant apps, it doesn't matter if the file doesn't exist. That's not an error, so I don't need a warning about it. That's why it makes perfect sense to suppress a potential warning. If we rewrite it with exceptions, we can of course assume the file exists, so it can be simplified a little. But now we're essentially expressing if/else logic using exception handling, which is not the best thing to do (note: added a comment so people can see what the code since it's out of context here): // if we haven't loaded the configuration for this app before, do it now if (! isset ($controller-&gt;appconf[$this-&gt;app])) { try { $controller-&gt;appconf[$this-&gt;app] = parse_ini_file ('apps/' . $this-&gt;app . '/conf/config.php', true); } catch (Exception $e) { $controller-&gt;appconf[$this-&gt;app] = array (); } } But I'm not 100% happy with the code as I wrote it either. We can go a step further and use a ternary operator instead, eliminating the else altogether and simplifying the code to just this: // if we haven't loaded the configuration for this app before, do it now if (! isset ($controller-&gt;appconf[$this-&gt;app])) { $controller-&gt;appconf[$this-&gt;app] = @file_exists ('apps/' . $this-&gt;app . '/conf/config.php') ? parse_ini_file ('apps/' . $this-&gt;app . '/conf/config.php', true) : array (); } Now it's simply an assignment from the file, with a default if the file doesn't exist. Logically, that feels much better. Where a try/catch might be good though is on the parse_ini_file(): // if we haven't loaded the configuration for this app before, do it now if (! isset ($controller-&gt;appconf[$this-&gt;app])) { try { $controller-&gt;appconf[$this-&gt;app] = @file_exists ('apps/' . $this-&gt;app . '/conf/config.php') ? parse_ini_file ('apps/' . $this-&gt;app . '/conf/config.php', true) : array (); } catch (Exception $e) { error_log ('Failed to parse config for ' . $this-&gt;app); $controller-&gt;appconf[$this-&gt;app] = array (); } } Feels much better now. Keeps things simple, and even handles invalid app configurations. :)
Have you tried the [quickstart guide](http://framework.zend.com/manual/en/learning.quickstart.intro.html). Seriously Zend is like the easiest framework I've ever used.
Selfposts are usually fine. That said: &gt; 1. Make a hash out of the current request uri eg. /products, or /products/awesome-shampoo &gt; 2. Use that hash as the key, to see if we have a cached version &gt; 3. If we have a cache hit, send the output from the cache, and end execution &gt; 4. If not, turn on output buffering &gt; 5. Render the page normally &gt; 6. Capture the output, and place it in the cache, with the previously generated hash as the key &gt; 7. Send output to the client Set step 4-7 right there? What happens if, during the peakest of your traffic, suddenly the homepage isn't in the cache? Suddenly you have every single visitors thread attempting to render the homepage and stuff it into the cache. It's a solid bet for a race condition of pain and suffering. Now, if your case you are trying to keep optimized behind the cache anyway, but a lot of people slip up and think they can do silly, takes forever stuff on steps 4-7 thinking, "Oh, it'll be in the cache soon enough" only to watch their servers melt into ashes as Apache piles up threads after their mysql server has ground to a halt on long queries. Be wary. Also, this kind of "we're going to only be up a few days, but the traffic will be absolutely blazing mad" is the perfect reason to employ the heavy, heavy use of a CDN (which I saw no mention of in the article, for shame) along with virtualization -- lots of it. EC2, create your image, setup a load balancer, make 50 instances ready to go, etc, etc. Add more instances as needed. All done with the rush? Turn them off. As for ORMs, if it works for you, and the app is working, go wild.
Has the ZCE changed? Last time I looked at it, it wasn't much more than a test on how well one can memorize the PHP manual. What are they testing now? Anything that would show a certificate holder actually knows how to write software?
The problem with the approach that PHP isn't the bottleneck, therefore it doesn't matter that PHP is slow is that it forces development to fork into two languages as soon as anything that has to be heavily lifted needs to be developed. If PHP was as fast as the JVM (or ran properly on the JVM a la JRuby), you wouldn't need to spend a million hour mitigating the effects of not being able to write your heavy duty code in PHP. Whether it's something like Solr, Gearman, Memcached, Hadoop, etc. etc. there are very few sites with real work that do the real work in PHP - PHP gets delegated to being not much more than a templating language for web pages. Ultimately, I think this is bad for PHP because it means that large projects don't use PHP because it's cheaper to hire and maintain a team of developers that only speak one language, rather than requiring your developers know several languages or maintaining several teams of developers. I think the larger problem is that PHP is completely without specification, which would allow implementations of PHP that don't suck to exist.
This is only a problem because the core PHP developers are either unable or unwilling to sit down and create a specification for their language. It's a shame because the Zend implementation of PHP is about as terrible of an implementation of a language as possible, yet no other implementations can exist and still be considered PHP.
&gt; I’ll probably also get a nice shiny certificate that I can plan to frame and hang on the wall, but realistically put in a drawer and forget about. Are you me?
It IS about knowing PHP as a language, not knowing how to use it well.
There were quite a few questions on design patterns and where to use them. And some .htaccess stuff, a few different SQL flavors.
You obviously haven't used Cake!
Ok, even as a Cake advocate, easy is a very subjective word here.
Have you tried Zend Form yet ? Enjoy ... :p
He's at least referring to your site in relation to minification.
haha :) Zend_Form is powerful, but as soon as your designers show you what they want to build .... tear I generally just use views: $this-&gt;setDecorators(array( 'PrepareElements', array('ViewScript', array('viewScript' =&gt; 'forms/my_form.phtml')), ));
Yes, element-&gt;renderLabel() and element-&gt;renderViewHelper() are your best friends in views.
Someone on the core team was either bribed or had a bad day at the office.
Just a quick note on your references entry - the reason you don't tend to see a lot of explicit by-ref returns is that objects pass by reference by default anyway so heavily object orientated code will rarely need the function &amp;functionName() syntax.
Floating-point in computers is inexact; in order to not be abysmally slow, floating-point values are incapable of expressing certain numbers, leading to "issues" like this one. That's why you never represent currency, or anything you need to be exact, as anything other than an integer with wrappers to make it act how you want.
Why not just turn on automatic XSS filtering?
Do you mean making whitespace visible? I saw a hack where you choose a font where space, tab and newline have visible characters (a most evil hack)
Closest one i know and use is [eTextEditor](http://www.e-texteditor.com/)
Is there a free one?
[Does this help?](http://alternativeto.net/software/espresso/?platform=windows)
If you look at the code you will notice that XSS filtering can be turned on in config file. Even then I will use $this-&gt;input-&gt;post or $this-&gt;input-&gt;get() to access POST/GET vars
I do that already. I think the problem ended up being the reference tutorials I was using where calling deprecated methods.
It's a module for a popular PHP framework. Merely a small library of few pages of PHP code.
[this is your friend](http://notepad-plus-plus.org/)
Wise Master dduko, if Zend Framework is such "crap", then what is the Jedi way? P.S. Thanks for the nonconstructive criticisms! Have a nice day :) 
Which frameworks are you referring to? I've tried CodeIgniter and CakePHP as well. While my primary hurdle is grasping all of the MVC concepts in a manner where I can have some sense of efficiency (yes, that is my own shortcoming for any smart-ass who wants to point it out). From my Googling around, I think I have determined Yii is the direction I'd like to go.
If you signed a non-compete agreement then you are screwed.
Didn't actually sign anything.
I have it, but I find that the explorer in Espresso is 10 times more convenient than having to "File&gt;Open" etc.
I've checked, Vim doesn't download properly, gedit is kinda not what I'm looking for.
yeah, its possible. i have played with symphony, cake, code igniter, zend and now i am playing with nette which is fine ( but their documentation REALLY sucks ) 
Have you tried either the Explorer or Light Explorer plugins?
Indeed there was no mention about race conditions when the cache is not yet filled, and I totally forgot about CDNs. No experience with EC2 yet unfortunately. Thanks for the feedback.
nope
Just use eclipse 
&gt; Vim doesn't download properly Eh? Any of the top links [here](http://www.google.com.au/search?gcx=c&amp;sourceid=chrome&amp;client=ubuntu&amp;channel=cs&amp;ie=UTF-8&amp;q=gvim73_46.exe) should do, or you can also try [Cream](http://cream.sourceforge.net/index.html). [Sublime Text 2](http://www.sublimetext.com/2) is also a handy editor that is cross-platform.
Then you don't have any issues...
Also, to note, is that PHP does copy-on-write. So, for example, if you pass an array into a function, PHP doesn't actually copy the original array. Rather, it creates a reference. Only once you actually write to the array does it copy it.
[This should be pretty relevant](http://www.reddit.com/r/PHP/comments/n3e60/with_all_the_pay_talk_last_week_i_have_another/) I'm a merely a lowly sophomore, but I'd say the best way to get well adjusted with the language is to just start building stuff. Build it, submit your source here for review and learn from your mistakes.
I use [PSPad](http://www.pspad.com/en/screenshot.htm) - it's free &amp; quite customizable
Try Crimson Editor, it has a nice directory panel you can turn on
Well, this was a pointless post.
Starting to think not that hard, since this guy got his and the stuff on his page is PHP 101 stuff (`PHP_EOL`, usage of backticks, etc.). 
PHP's library is loaded with stupidly designed functions. Why is the default behavior of microtime() to return a string? Why is the default behavior of imagejpeg() to output to the buffer.. also, the only other option is to save to a file, with no possibility of saving to a string (without having to resort to OB tricks).
Coming from the Coda/Espresso world, [Sublime Text 2](http://www.sublimetext.com/2) has been my editor of choice for the past 6 months. I originally tried it after coda had a show stopping bug after upgrading to Lion... I never looked back.
No, visible vertical lines for indentation. Take this example http://img368.imageshack.us/img368/9396/indentguidelinedt1.png
I manage this in a very different fashion... rather than using a global modifier to access a resource such as this, I implemented an "interface" class that uses my registry class. Objects get loaded dynamically using reflection and stored for reuse as well using whatever caching method is enabled in the app config - File, Session, Memcached, etc. I haven't had a chance to really dig into Elefant too much... only a brief scan of the code. If I were to apply my method to your code, in the case of Controller, it would extend the "interface" class that I mentioned above and then you can just access the resource as follows: Using the registry: $this-&gt;get('object')-&gt;myMethod($arg, $arg); $controller = $this-&gt;get('Controller'); $controller-&gt;myMethod($arg, $arg); $variable = $this-&gt;get('variable'); $this-&gt;set('variable', $variable); Using the interface: $this-&gt;controller-&gt;myMethod($arg, $arg); Here is a real method from my interface class: public function db() { $dbcfg = array($this-&gt;cfg()-&gt;dbhost, $this-&gt;cfg()-&gt;dbuser, $this-&gt;cfg()-&gt;dbpassword, $this-&gt;cfg()-&gt;dbname); return Registry::instance('Registry')-&gt;object('Database', $dbcfg, false); } What reflection allows me to do is to instantiate the object if it doesn't exist in my registry.
What geographic area are you in/looking to have a job in?
Yes... Registry is a singleton. Here is my Singleton class that Registry extends: class SingletonException extends Exception{} abstract class Singleton { static private $_instances = array(); private function __construct($args) { $init = array($this, '_construct'); call_user_func_array($init, $args); $class = get_class($this); $shortcut = " if (! function_exists('$class')) { function $class() { return Singleton::instance('$class'); } } "; eval($shortcut); } private function __clone(){} protected function _construct(){} static public function instanceAvailable($class) { return isset(self::$_instances[$class]); } static public function instance( $class ) { if (! self::instanceAvailable($class)) { $args = array_slice(func_get_args(), 1); $instance = new $class($args); if ($instance instanceof self) { self::$_instances[$class] = $instance; } else { throw new SingletonException('Expected a Singleton subclass'); } } return self::$_instances[$class]; } static public function debugInstances() { print_r($_instances); } }
Exactly what I was thinking
PHP is great in that it's flexible and very widely used. If you're serious about coding professionally, I would strongly recommend you research MVC architecture, learn at least one framework (Zend, CakePHP, CodeIgniter) and at least one CMS (Drupal or Joomla would be a good choice). You'll definitely want to pay attention to JS too, and learn jQuery.