Yeah, in PHP it's not a big difference, though it can have some client-side implications when you return the object. Just stick with arrays if you want.
Whaaaaaaaaaaaat!?!?!?!
I think you got me wrong. I think there is not much advantage to use stdClass and it's better to create mapping classes for each table/entity.
Don't feel too bad, it is a good skill to have.
Don't optimize before knowing what is slowing down your application. Log everything in development. When trying to improve performance in production, log stuff like mysql slow queries in production for a few hours. Log what costs the most time in your application with things like https://underground.works/clockwork/ You can log that in production just for your team: `if ({requestIP} === {officeIP} &amp;&amp; Request.has( 'debug' )) Log.this.stuff()` Improve the low hanging fruit. Most often those are database queries with non-indexed joins. Fix those problems with tips from https://use-the-index-luke.com/ Because you can see the timing cascade (like the network tab in the developer tab of Chrome) of your application, you know what the bottlenecks are. And thus, what to spend time on to make your application faster.
Imagine the strangler pattern when going from procedural to OOP. That's close to starting from scratch. Also, a badly coded website feels bad, even if it does what its supposed to. Imagine you being a website.
Sure, you can if you want to. It's your PREFERENCE, but you don't have to. You're assuming that you're pulling out the exact same fields every time you touch a table.
Oh boy, I've heard bullshit like PHP is going to die many times in the past, and it amusing that some people still cant get over the fact that PHP is going to be around for a very very long time. 
no
Hey, that's fine if you want to abstract away the key server-side interaction that is the bottleneck of your performance. It's your app.
What's "MEAN Developing". You kids need to define your buzzwords, I can't spend whole day just catching up with that.
MEAN = A bundle of MongoDB, Express.js, AngularJS (or Angular), and Node.js. Seems to be yet another worthless attempt fro node fanboys trying to downplay PHP, its nothing new already. 
It is a good skill, but you have to worry about a lot of things like SQL injection. By the time you cover all the security issues and other problems that can occur, you are better of using a proven ORM.
It's not bad per se. It's just very polarizing because it uses the [active record pattern](https://en.wikipedia.org/wiki/Active_record_pattern). You'll find that people either really like it, or really hate it. As far as I understand it, the pattern allows you to write code very rapidly. The main concern I see against it is that your entities become aware of their own persistence, which is something you always want, especially when practicing DDD. I am personally a big fan of Doctrine ORM, although it can be cumbersome for smaller projects. Matthias Noback also wrote an interesting blog post on doing OOP ["ORMLess"](https://matthiasnoback.nl/2018/03/ormless-a-memento-like-pattern-for-object-persistence/). It has some interesting ideas.
No.
Are you covering your ass against SQL injection and all other other pitfalls of doing that? Other than for writing reports, which you should call via a stored proc, please tell me any reasons that writing your own SQL queries could possibly be better than using an ORM.
My best friend who helped get me into php announced "I'm not going to use OOP any more. It's a bunch of hype". I laughed because I was thinking bro you never did OOP to begin with so how can you quit? He thinks non static functions = doing OOP. So what he was really telling me is that he was making everything static. 
I keep anything database related outside of the main application and within the class. Generally, if something requires database to store data about it, it can be some kind ob object with properties, User, Product, App, Template .... Within the most classes, I have static method collection (array $query, int $limit). That method is the one working directly with the database and it will return array of results. When I need a single instance of the object, there is $this-&gt;populate($id) in the class that calls "collection" and maps result array to object's $this-&gt;data array and from it I get values with $this-&gt;get ('field'). When I need bunch of results, I call collection directly and loop over those results, just as I would do with fetch\_assoc. 
Maybe this is a bit off-topic, but these days we had to create a small project which should display some items we have for sale which would be fetched from a remote api. Since the project was super simple, we decided to not use any framework nor a database. We generally use Yii Framework which is super fast anyway. We cache the api calls and load them at need and we do the display, search, sorting, filtering, etc just in PHP and we're using a bit JS for UI/UX. This quickly reminded us how blazing fast things can be when there is little to no overhead, as opposed as using a framework and connecting to a database. I know that most of the projects don't get away with this, but this was a super simple case where we wanted to experiment a bit. So i guess the performance tip is, one of the things you should always consider when developing is to make sure you avoid any overhead that can be avoided by default. Also, talking with a database is expensive.
Maybe the php user don't have proper rights to read from that route?
This has nothing to do with PHP. Are you parsing HTML in PHP?
cool. I would suggest checking https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events and scanning logs to see how many IE / Edge visitors you have as neither browser supports SSE according to Mozilla. Pleasantly surprised to see it's not just &lt;?php require_once __DIR__ . '/vendor/autoload.php'; $output = ''; // Do something header("Refresh: $when; url=./__FILE__"); die($output); Although it should be said that for some browsers (I think Opera circa 2012) you would also need a `meta-http-equiv` tag to make it behave, it is better supported than SSE, and allows you to set a threshold for polling updates.
Check out this laracasts series then - https://laracasts.com/series/php-for-beginners
LOL.
It's not the worst thing in the world as long as you are using prepare statements. Still, being familiar with an ORM can really speed up your development.
Yea the core of this project isn't on composer's autoloader at all. All DI is done through CI 2: ``` $this-&gt;load-&gt;model('user'); $this-&gt;load-&gt;library('other_library'); ``` We also use composer's autoloader for instantiating vendor things. But the core of CI 2 and user build modules in the framework are untestable - so far.
httpd by default disallows traversing symlinks, so you either need to enable that or use something else. I would have mounted or bindmounted the directory instead unless you need further access control on the files. Two things though: 1. Dont allow direct access to the uploaded files since you are potentially allowing it to be executed 2. Dont use create\_function()
I think I'm not understanding what you mean by invoking \`spl\_autoload\_register\` is that a core PHP thing or specific to CI?
Are you asking a question or are you making a statement?
Yes, I use prepared statements whenever a user POSTs values. I'd prefer to use mysqli every time I talk to the database for performance reasons. In my experience the database is the bottleneck of your server-side operations. I would rather not pay the performance and flexibility costs of using an ORM. If I needed an array of values specific to a user, I'd probably do a separate query and push them to an array on that user object. I don't see how I'm wasting time. I get quite a lot done for a guy that works full-time and is married with 3 kids. I had enough free time to make [Firmament Wars](https://store.steampowered.com/app/849790).
The PHP community always seems to be sliced entirely down the middle of "ORM" and "FUCK ORMS WITH THE UTMOST OF PHALLUSES". Being able to write solid SQL is a good skill to have, if for no other reason because there will be times you encounter them in other peoples code or you need to interact with the database directly and its more effecient than tools like PHPMyAdmin or mysql workbench. That said. The main complaint against ORMs seems to be performance, and while I agree it is adding a layer of abstraction that can harm performance, I've never had a boss come back to me and say "This code is too slow". Every boss I've ever had on the other hand has said "The development progress is too slow", so I'm willing to make the trade off. If I encounter a challenge one day where an ORM just does not work for the scenario, I'll cross that bridge when I get there. The schema of the database and how that affects how you eventually query the certain groups of information you need makes a huge difference as well as other architectural concerns. This is why enterprises usually have dedicated DBA(s). 
Open source software never dies. Languages rise and fall in popularity and trendiness all the time. The likelihood of *ANY* programming language in *widespread* use today dying is extremely low.
I would look into using a regular expression using a catch group for everything beyond the first hr occurrence and then use match 1 as the result. See https://regex101.com to play around with some regular expressions and http://php.net/manual/en/function.preg-match.php for the function to use.
What has to do with PHP, from your understanding of what PHP is for? As far as I know, it's a general purpose language.
I hope not, I’m learning it at University 
Sorry if it is not directly related to docker, but can you explain briefly how to deploy dockerized apps? For example I created a simple PHP app, this app can be started using **docker-compose up -d** In order to deploy it I need to push my image to docker registry, then pull it on production, stop previous container and run new container? How to make the deployment atomic (with zero downtime)?
Well, a +1 is fine, but I suppose that alone might seem like noise. Providing constructive feedback on why an RFC is useful or how it could be improved is great. Of course, you could always email the creator directly if you feel it'd be a nuisance for everyone on the ML to read it, but it probably wouldn't be. :)
PHP powers WordPress, which is huge. It's going to be around for years and years. 
Object if it's an entity (user, transaction, group, post etc.)
I usually use an orm that casts to objects
&gt; please tell me any reasons that writing your own SQL queries could possibly be better than using an ORM Reports.
An ORM is, in it's best form, a fancy data mapper. SQL has nothing to with it. Look at Dapper as an example of a well-designed, extremely popular ORM that didn't screw everything up by trying too hard to abstract away SQL.
I honestly wouldn't work with PHP at this point if I couldn't use laravel. So I use eloquent mostly. There's odd cases of it being a big performance hit so I'll write a raw query once in awhile but it's usually not worth it. 
Sure. Because you're so much better at aggregating read and write operations into a single transaction than existing ORMs.
I use a variation on [this](https://github.com/Carradee/code-editor-scripts/blob/master/HTML%20Entities%20and%20Special%20Characters/Convert%20HTML%20Entitities%20to%20Special%20Characters.php) (GitHub script also by me), with preg_replace instead of str_replace, and the array set accordingly with regex. Include the &lt;hr&gt; element in the search, in parentheses, then put "$1" in the replace line. I do that in my personal script for stripping the excess from HTML exports made by MS Word.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Carradee/code-editor-scripts/.../**Convert%20HTML%20Entitities%20to%20Special%20Characters.php** (master → 0b18882)](https://github.com/Carradee/code-editor-scripts/blob/0b188823eebfda83d113974b4e628ab608304a55/HTML%20Entities%20and%20Special%20Characters/Convert%20HTML%20Entitities%20to%20Special%20Characters.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e29y4h7.)
By the time you are done working around all the problems the ORM causes (stupid n+1 queries, caching too aggressively to avoid performance problems, no proper transaction support,...) you might as well write the query manually (with parameter binding of course).
mapping. Doctrine is a good ORM. flexible and expressive and supports raw SQL if you need it. in rare cases that I'm doing a query that doesn't need to be mapped I still like to use a DAO class to encapsulate the logic. 
&gt; I'm practicing OOP in PHP and I' thinking of some best practices. Try to have a look at database best practices more. Often ORMs are too concerned with badly thought out OOP 'best practices' and forget about little things like transactions that actually ensure a consistent database state even in case of errors.
I started working through he book and process of updating my project until the boss decided to close the company. If I remember, it doesn’t include using composer for PSR-4 namespacing, and has a few outdated database ideas, but you should be fine.
It's hard to claim efficiency when you block an entire process/thread waiting for a message. There's no reason you can't do this with non-blocking io.
You don't want as few transactions as possible, you want transactions that make sense semantically for your data to preserve invariants.
It's a core PHP thing. Please read: http://php.net/manual/en/function.spl-autoload-register.php
Totally depends, but most of the time I try to map to an object just to be consistent on the rest of the code.
Php has evolved from a shitty language to a somewhat stable language. Next step for it would maybe be more strict, better memory management and focus more on concurrency imo. People saying php being slow have to look at projects such as php zwoole, it gave my 7 year old i7 2600k processor 17.000 requests per second but you need to know your way around memeory management. PHP is evolving and catching up so I say its far from dead.
Hi, I have a random question. Since you seem to be the developer of this plugin, I am wondering - how long would it take for you to make a plugin that when you save a file, it saves a copy of the file as a backup with the current date and time in the filename with the folder structure? For example: It would not need to have diff or any other functionality, literally just saving a copy of a file with a specific file name. For example, in PhpStorm you save a file located in c:\folder1\subfolder\test.php at July 12 2018 4:20PM and then it automatically saves a copy of that file you just saved in c:\backupfolder\folder1\subfolder\test_2018-07-12_4-20-00.php? I would have no problem directly paying you/donating for creating a plugin with this functionality, I could throw like maybe $50-100 your way if that would help? Maybe a bit more if that would help more.
MangoDB has inherent problems with querying large data sets. It's great for prototyping cause you don't have to worry about defining your models or versioning them but that just shifts the world load from the beginning when you're defining your application to the end where you already have a large data set you need to query against but can't so you end up writing more code to compensate.
You claim not to like the article, then claim the two things you are looking for in a candidate is ability to code and strong problem solving skills. Funny enough, Joel is quite clear in his article that the things you need to look for in a candidate are ability to code and strong problem solving skills. He then goes on to say what he dislikes about typical job interviews that don't qualify either of those traits, and shares his tips on how to actually vet those criteria in a job-candidate. It may be worth your time to re-read the article.
&gt; Other than for running reports, Did you even read my comment or just go ahead and downvote it?
I'll map it to an object if the object contains functionality that will act upon the data. Otherwise there is no point and I'll just use an array.
But if you have a hammer, everything starts to look like a nail /dont be that guy, please
I would love to see some of your code. It doesn't sound like you are using OOP standard practices as OP is looking for. As far as performance is concerned, you are likely killing all your gains by running multiple queries. 
same problem with outdated chrome and a bunch of exts...
&gt; to move his webserver to GCP are you sure it's what they need?
I’ve done both but I much prefer using an ORM (doctrine)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
We typically create stored procedures for stuff like this. Pass a val and boom grab your output. Higher performance as well. 
Didn't downvote you, but canning every possible report in stored procs seems like a huge amount of effort for basically zero gain, unless you have a separate db team that you can make this their responsibility and not have to do it yourself.
Actually, I don't mention the ability to code. I mention the ability to read code. There's a difference.
There's nicer PHP than Laravel out there. I use DAOs instead of ORM and it's perfect. UserDao-&gt;getUserByEmail(string $email): User
I wonder if MEAN might take a hit in popularity once WebAssembly becomes ubiquitous.
It is good to be able to swim without armbands isn't it
Why are you assuming nested data is a benefit past serialization? (which can be done without coupling objects)
Having the right architecture is important for ensuring smooth updates and easy of developing new features to be added to a system. In fact, that's what separates a good architecture from a bad one. If there's no need for updates and/or new features, then the architecture is not that relevant.
Hibernate is incredibly popular in Java as EntityFramework is popular in C#. There is nothing wrong with activerecord, full ORMS, or SQL. use what works and fits the team.
Don't be obsessed with blanket following a rule "Must be OOP". You're presumably human so change is a skill we posses. Instead try to work on using objects when they make sense and get rows, columns, values when those make sense. Sometimes when I just need to bulk update records fast or to test an idea something will be raw PDO (with bound params/values) sending or receiving via network API. Not all code needs to stand the test of time
A lot of people don't understand the power of ORMs or why to use them. It isn't just about making queries easier to write for junior developers. They also make it a lot easier to refactor, cache and optimize results. But people don't like using things they don't understand, can't really fault them on that.
I started using Doctrine 2 in 2011, shortly after it's initial release. It was how I became comfortable with php's new namespace functionality. I like to think I pretty good at using the ORM. Learned quite a bit about the pros and cons of it's event listeners. Was comfortable with writing queries. Knew the details of updating collections. Pretty good at avoiding lazy loading and what not. Did not really care if an app only had a few entity types or a few dozen. But eventually I went back to writing sql queries and manually hydrating objects. Partly because I really got tired of the default approach of generating tons of useless getter/setters. But mostly because Doctrine really wants you to only have one entity type per table. That's fine for basic CRUD apps but when you start to have different domain contexts and you want to have different representations of the same sort of objects then it becomes a pain. There are workarounds but eventually I came to the conclusion that I time spent trying to fit my models into what Doctrine supported was greater than the time saved by using Doctrine. For example, consider a soccer tournament application. So a Game will have two GameTeams. Each GameTeam is linked to a GroupTeam (each GroupTeam plays three games). A GroupTeam is linked to a TournamentTeam (i.e. the Croatia 2018 World Cup team) which in turn is linked to a PermanentTeam (the Croatia National team). Lots of objects just to describe a team but they all have their purposes. GameTeam -&gt; GroupTeam -&gt; TournamentTeam -&gt; PermanentTeam The thing is, if you just interested in putting up say a basic game schedule then you really only need a ScheduleTeam with a few bits of information from the various team tables. Hard to do this cleanly with Doctrine. It's possible but you need to get into multiple entity managers and stuff like that. Difficult to maintain. I won't try to generalize too much for other ORMs but I'm guessing most would have similar issues. On the other, I find it easy enough to write a query that pulls out exactly what is needed and then write a bit of code to hydrate your ScheduleTeam. 
Wouldn’t this best be accomplished with JavaScript?
Hopefully one of the few programmers of bespoke code who will use bindParam. Recently received the legacy code of an only 5 years old system, and even the thumbs up/down field is vulnerable to SQL injection.
I usually put them into a concrete class instance. It's easier when working with other people because it's very clear whats data is in the object. Leaving it in it's raw form would require someone unfamiliar with the code to look at and understand the query and also look at the database schema. That slows things down.
Your right about the database being the bottleneck, which is what makes ORMs so good. Their slowdown happens on the code side not database. * You can recreate any query with an ORM that mysqli can do. * They make it easier to optimize complex queries for other developers. * Prevent redundant queries from happening for the same data. * Make caching very easy. * Allow for easier database structure changes. * Keep code DRY. * Allow for hooks on database changes so that systems can run based on something changing no matter where it was written. * Faster coding (more profitable for the company/contactor) People who are against ORMs lack the experience to understand why we use them. A system built well ORMs will run faster and be easier to maintain then one without it.
\&gt; current year \&gt; not using an MVC
Hi! I usually use a custom mappers that return a custom object or an array of them!
You. I like you.
I don’t really have any issues with Eloquent but pretending that it doesn’t have problems isn’t the way to go. Comparing it to one feature in doctrine is short sighted. - no type safety for properties without declaring setters/accessors - no autocomplete without third party extensions - entity interacts directly with the persistence layer - forced to extend the god model - not able to set relationships with interfaces - poor support for polymorphism, unable to eager load polymorphic relations - poor BC (remember the events prop?)
That sounds extremely insecure, why not use a password?
There isn't any data that needs to be secured. It's just a simple portal to view some tutorials and all i need is to have names tied to emails to grant access.
Today did something like this `exec('php -f record.php storage::store -i=$seralizedCompressed64Encoded_clientNotAskingForThisButWeNeedToDo &gt;/dev/null &amp;');` I was thinking to do this via shared memory, but that would require more job to do.
http://phpbench.com Could be a good start, I don't know if it is updated or not! Personally I avoid when possible the use of function recursion, with PHP it is very slow. Also using functions calls as part of the condition of control structures like while and for is bad for performances, more if the function is not native.
So feel bad about using OOP because some people are OCD about it? For each technology X there's a developer Y who got too carried away with it. If you know OOP you can decide whether or not to use it. If you never learn it or let that skill atrophy, then you lose your choice. Better to have the choice than not. No practice, no ability, no choice. And don't worry whether other developers understand OOP. If they don't, they need to learn it and not hold you back from being the best dev you can be.
Especially when your boss says, "the clients need to generate their own reports." Throwing each option in scopes will make it a lot easier to deal with.
Why does it have to be behind any login system then? 
But you do agree it's not to all cases, right? :)
It's not BAD... it's just hard to maintain, it's error prone, has a lot of magic mixed with magic and glazed with unexpected behaviors. Eloquent is a trap which only seems easy, but in fact it just doesn't scale and in face locks you in. Additionally it violates multiple principles and emphasizes controversial architectural decisions while encouraging writing shitty one-shoot spaghetti.
I'd suggest nicoswd/php-gpg (fork of jasonhinkle/php-gpg, weird README change, but easiest to use), and then singpolyma/openpgp-php which has better documentation and seems more recently updated, but is a bit convoluted to use. I tried the native gnupg in Windows, but due to how it's constructed with input/output streams it doesn't work due to windows not implementing the output stream required.
Good. Don't use an ORM, it will just hurt you long term. But do use bound parameters of course.
I've heard awesome things about high performance mysql, thanks for the link I just bought it
Using Doctrine so option 1
How competent are you as a PHP developer *without* Laravel? I mean, is it a tool or a crutch? I’ve met folks who considered themselves Ace Javascript programmers who could not function without jQuery. They weren’t worth much. 
In the project I’m working on currently I have a two way mapper for object that go in/out of the DB. Each entity has a two way mapper. My mapper has 3 methods: - $mapper-&gt;objectFromRowData() - $mapper-&gt;objectCollectionFromResultSet() (array of multiple rows, gets looped and calls objectFromRowData()) - $mapper-&gt;rowFromObject() Then I have repositories which handle the instantiation of the mappers and interact with the DB. Only entities (or collections of entities) go in and out of those repositories. All abstracted by the mapping layer. All entities going in/out are already validated from the application layer. From your actions you can interact directly with the repositories. If you need to assemble multiple entities together to form another entity or have any complex validation logic to do then I’ll add a service layer on top of the repositories. 
&gt; sane &gt; Doctrine I’m sorry, what?! No. 😂
Probably to harvest the email address, which is perfectly legitimate.
Can this work on shared web hosting?
You could google passwordless login. A popular site using it is: https://medium.com/
It will probably decrease in popularity to some extent simply because less companies are choosing it now than they once did, but that is a very long way from a language dying. Really the problem with PHP in 2018 isn't that it is terrible or anything, it has after all improved quite nicely over recent years, the problem is other than for some legacy issue there is no real big reason to pick it for a project if you have the choice. Most other languages have things going for them in their favour beyond simply that they can do a decent job of building a web site / app. Take performance for example, if you need performance then there is no real reason to pick PHP over several other languages that all offer more in that regard (Golang, Scala, Elixir, Node, etc) not just in raw performance but also in things like handling concurrency. Or take Node as that is the subject for this thread, even if everything else was equal many companies quite like the idea of having the same language used back and front end. Or even take Python, even in some "Django" jobs you can see it is beginning to creep in that a familiarity with machine learning / data analysis with things like Pandas, NumPy, SciKit, etc would be an advantage, sort of how Javascript started off years ago as "nice extra to know" then eventually became a requirement in a lot of web related dev jobs. Machine learning is only to get more and more common, problem is no one uses PHP for it, whilst Python is virtually the defacto standard for it, so if you have the choice why use PHP/Laravel when you can do the same thing with Python/Django and have a much easier time getting people familiar with machine learning. (which is then compounded by commonly Python is now used as a teaching language for CS degrees) 
What? Why? 😅
Laravel with Eloquent ORM rocks!
So he wouldn't have to "do OOP" which is to say, `$foo = new Bar(); $foo. DoSomething(); ` Now he can just do `Bar::DoSomething();`
Trust stupid """Redditors""" to upvote this shit. Now we're going to arbitrarily define some value for which classes will or won't exist based on the current number of data points? How little grasp of OO programming must you possess to earnestly believe this is a good idea?
Are you off your meds, or are you just an asshole? 
Lol of course not :)
&gt; Doctrine really wants you to only have one entity type per table No. That's what discriminator maps are for. Try learning the tool before making a Reddit post about it.
Thank you! 
If it's for a model, yes. Else, fuck no.
this is the first time I've seen this... Looks pretty nice; will have to evaluate
I find development with Doctrine2 and its myriad of concepts and ideas that barely have any underpinnings in the actual database to be incredibly slow for development. Don't even get me started on performance. The overhead and hydration take 10 times longer than the actual round trip to the db. Fucking atrocious. It's such fucking shit. I will never do another project with an ORM especially one in PHP. To be fair, it is as shitty as I expected and as all other ORMs I've tried. The developers clearly have never heard of simplicity or a profiler. 
Fetch the data and use it. Don't complicate your data with stupid objects. I mean do you usually do twice the work for the same result anywhere else in life?
That's interesting, I haven't looked at Atom in a while, it looks like it's coming along. Query Builder is the CI native "orm"/syntax for interacting with databases. The good thing is that it's universal (or nearly so) for all databases, so if you switch backends, you don't have to worry so long as the tables, columns, etc... are the same. The bad thing might be that if you want to switch frameworks it might not be as easy as if you just used PHP with PHP binding, etc... But you can still export the SQL easily by viewing it in a SQL monitor, such as is available on TOAD and some other database tools. Query Builder also makes your models look pretty tidy in my opinion and it has built-in protection against SQL injection, etc....
Discriminator maps are used to implement a form of [class table inheritance](https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/inheritance-mapping.html#single-table-inheritance). It is actually quite powerful but completely unrelated to what I described.
Performance was never really an issue for me. For quite a few CRUD type use cases, the ORM is basically the same as writing your queries and hydrators. Of course, I seldom encounter a library that makes me angry.
.
&gt;SSE use so much resources. I used in my final project. lol.. usleep() may be helpful.
Hi. I like the approach you just told. Is there any source code or tutorial I can look into, to study about the things you told
&gt;It's hard to claim efficiency when you block an entire process/thread waiting for a message. There's no reason you can't do this with non-blocking io and handle dozens/hundreds of clients per thread/process. Yes, you are right. This lib implements SSE protocol through an infinite loop, and establishes an Event-Stream connection. There are other ways to do this, such as [Swoole](https://www.swoole.co.uk/), [Workerman](https://www.workerman.net/), [ReactPHP](https://reactphp.org/).
AngularJS has already kicked the bucket. Angular 2+ has a steep learning curve. MongoDB will get in the way of your current project development eventually.
If there are wrappers to make objects from the schema you use them. Mod them where required. Random raw sql turns a codebase to trash really fast. 
Thanks for your advice, this should be noted in readme.
I always put foreign key constraints on my database tables. I do it primarily for data integrity, but it also makes for fast joins. I find that foreign keys are also my second most used columns for selecting from a database. I also put in unique indexes on columns that should contain unique values. Again, this is for integrity purposes, but has the nice side benefit that these columns are also common for me to use in queries. When possible, I take collections of entities and key those collections by whatever ID the entities have. That way, I can quickly look up specific ones instead of having to search through the entire collection every time I want a particular item. If I'm wanting entities by something that isn't necessarily unique, I just group by that field instead. I haven't yet had call to use them, but binary trees are rather fun in concept. 
Username checks out.
I have encountered that situation. It was an algorithm that had to parse about 30 million database entries and do some complex logic on them to convert them to a different format. My final script ends up doing it in about 10 minutes where the ORM solution probably would have taken days. With that said I’m a big advocate for ORMs and the go to guy at my job for doctrine questions. Objects are so nice to work with and absolutely worth the performance hit in most cases.
I've only implemented this strategy in other languages, but I'd specifically look up the factory method pattern if I were you. I do not have a good tutorial in php for you. What I just described is called often called a business object and a collection of them can be called a business layer, those are good terms to google. 
I agree - something where you can do a GetNext(n) and pass in how many records you want to get back, up to a max set in the sproc so you can control performance.
I feel like he is missing the point of OOP, and the purpose of object instances.
&gt; your model would know how to do a get and a save - you'd have a factory method that retrieves your data, tosses everything into properties, and handles any locking that needs to occur. Then you'd be able to mutate the data however you need, then call a save method. Eloquent and other ORMs do this.
Depends what company I work for.
For some reason, programming attracts these kinds of people. Although a lot of the time I think it's just students who haven't worked in the real world where time is of the essence.
Yeah, I'd read the first few comments and my brain saw CRM instead of ORM, and I thought "Don't use SalesForce, use business objects! Holy shit!"
Thank you! If this was a project i was building up on my own time, of course I'd keep things more consistent, and more separated. But when a client needs some shit fixed on their website by the day's end, its gonna be a little messier. Fast, cheap, or good. Pick 2.
No a boss never say "This is too slow", users do.
Static functions are just global functions with fake namespacing. If you're going to do that, you'd be better off just prefixing your functions ```myfakenamespace_run_diahhrea()``` as it's more correct. I've pretty much only ever used static anything to keep a count of instances.
You can use dql to write your own query to pull anything you may need.
Well, static functions do have the ability of being tied to a specific class definition which allows you to use static properties and have your static methods happily work with the class they exist on sooooo...
No different than using global variables and global functions.
What about static factory methods, or static uriliry/helper methods that are specific to that class? You're really suggesting that one use global functions for that? How the fuck could I do something like create a parent ::create method that does something like `return new self();`? What if I want to have a bunch of classes that all extend an interface that defines a bunch of static methods? Static methods have many uses beyond "fake namespacing"
No.
Maybe you missed the context of the discussion. Your first comment was literally saying that static functions are good because they can act on static variables which makes no real sense at all. Maybe you also missed when I said "If you have a class which never exists as an instance, that class shouldn't exist.". And then you proceed to cry about methods which act on *instances*.
Mind that creating foreign key doesn't mean it will be automatically indexed (at least [in PostgreSQL](https://stackoverflow.com/q/970562/170403)).
I am OK with ORM for small projects / MVP product, anything large/complex that needs high performance - it's usually too much trouble and too slow.
First make it possible, then make it pretty, THEN make it performant. Or “premature optimization is the root of all evil.” Either phrase works, take your pick. A good ORM helps you make it possible and pretty, and leaves room for you to make it performant later if needed. Having worked on a piece of legacy enterprise software which did not use an ORM, which we later swapped out for an ORM, I highly recommend one. 
At which point the claim about "easier than web sockets" falls down. The difficulty in "using web sockets" isn't the sockets themselves, but how one has to architect their application to be event-loop-based. 
I use pdo to return Objects.
The idea is cool but what’s the practical use case of this over the usual Ajax requests?
You aren't wrong, but simply using an ORM vs not using an ORM is not likely to be the sole reason software is too slow. Ineffective queries and poor database design can bring an application to its knees no matter how you actually code your queries. There are absolutely situations where evey MS counts, but in all honesty, I don't use PHP for those projects. 
For server side processing... there are better languages more suited to parsing HTML, like Javascript.
No disagreement here. ORM is great in boosting development speed and if you know the weekness of ORM well (usually around table relationship) then you can easily avoid performance impact in most cases. But that doesn't mean you should ignore if the code is too slow.
Ah, my bad. So, for the task at hand you'd want to use PCRE, so switching to Perl and compiling a binary is the only valid answer, right? Sorry, but that really makes no sense. There is no language more suited than any other for the simple task OP is describing and at that point many other factors, like familiarity, existing stack et al, are way more important factors to take into consideration anyway. And at the end of the line, modern PHP will perform just as good for this specific task. Unless you are doing millions upon millions of pages on this singular regular expression, at which point it might be interesting to look at a language that can cache the regular expression instead of interpreting it every call. Even then, the expression is so simple, you'd have to get extreme metrics in play before wanting to consider switching languages.
Maybe even times 3. Apart from taxes, you also need to factor in extra insurances, time spent on finding customers, holidays, being ill, etc., 
When performance is critical, I'll generally use the data directly. When development speed is critical, I'll use an ORM. Frequently you'll want to switch between approaches in an app; sometimes during the same request. A good default is "ORM to start with, then rewrite it in native queries when you need to, and it looks like that will remove the bottleneck". I will say this: Don't *ever* go for an ORM in order to avoid writing queries or because you "don't want to learn SQL". SQL and DBMS tech underpins everything you do, and it's just as critical to understand if you're using Eloquent or PDO.
MEAN is a joke, sorry. Whatever threats PHP may face, it's not *that*.
Even if you don't use ORM, you can use PDO::FETCH_CLASS to get back whatever class you want.
I am just curious and Googling PHP fork, did not get what I was looking to find out. Just was thinking how Javascript, a modern language does not have a variable identifier character like $. Just saves time, Also means if they do it, then PHP compiler should be able to omit it as well. SO why has not someone forked the project with a version that omits it. Is it because the coding is so technical and specific that they would have to re-code from scratch and no one wants to do that just to omit the $? 
Needs to be Reported! ASAP...
I've never thought of this but I like the idea of someone forking it. 
&gt; fix N+1 query problems before they go live. We currently have an (unintentional) safeguard that works pretty well : Our staging and production DBs are in the same data center along with the rest of our machines, but our staging server is on the other side of the country, which means there's a ~10ms ping between the staging PHP server and the DB, so an I compressible delay of 10ms for every query... The downside is that some.pages are really slow even if there's nothing wrong with our code, but the upside is that we instantly notice n+1 problems.
You can see the forks directly on github: https://github.com/php/php-src/network/members There’s 4600+ forks
Saves time? How would you do the following in Javascript? String parsing? $foo = "Alchemy"; $colour = "blue"; echo "Hello $foo, your favourite colour is $colour."; Or variable variables: $bar = 'foo'; $foo = 'dude'; echo $$bar; Or accessing class/namespaces dynamically? $class = is_a($bar, Widget::CLASS) ? 'WidgetFactory' : 'GadgetFactory'; $factory = new $class();
Sort of, Javascript treats functions, strings, integers all as objects (in general) so they already supported the same code-paths to be parsed into their types. PHP, historically, it seems, has not been the case. Using strict identifiers helped with the JIT compiler, for that time. 
Usually if we have a small website then we use fetch data directly and if the product is developed on large scale then we try to map them to an object. Its all depends on the product behaviour.
I've made my boss tell co-workers their code was too slow. To be fair though, it was like O(n^7) on a half million items...
I simply asked him if he was parsing HTML in PHP, I know it is not impossible, but the approach might be better with another language.
It all depends on the size of the dataset
You can achieve all of them except for variable variables in JS. Variable variables is arguably one of the worst feature, and should be avoided.
Ok 
What kind of idiot would create it's own version of PHP with its own syntax that no one knows. Imagine joining some company and on your first day discovering that they run a custom PHP version with a totally unique syntax. No IDEs that support your snowflake PHP. Priorities straight there. Well unless you are Facebook of course. 
Isn't this the whole point of open source? That everyone can use it?
Absolutely.
Actually, if you have objects with explicitly defined fields - arrays (collections) of those are better memory wise because of how it works internally in PHP 7.0+
Don't use PHP for GraphQL server. You'll some of the functions like subscribe that can't be done in PHP.
Guzzle is way slower than using a simple wrapper. Thanks OP !
Hi, sorry could you explain a little please? I'm not quite sure what you mean?
There is even very large company like Amadeus who switched out of MongoDB cause of theses issues.
Guzzle is very powerful, but heavyweight. This wrapper has three files only, simple logic, lightweight. Well, it depends. 
😄The simple makes the fast. 
I just dumped a huge load.
&gt;Isn't this the whole point of open source? No. Just because it's open source doesn't mean you can strip out the licenses and redistribute the code as your own
True! I didn't notice the removal of licenses
Yeah Facebook is the only one I can think of that's done it and ha any kind of success with it. When I say success that's obviously open to interpretation 
It depends on what you are doing great with the data. I am currently working on a project that generates reports. The metadata for the report, report name, user, creation date, etc, is stored in objects and use an ORM. The actual data of the report is fetched with a query builder and returned as a 'traversable'. 
Because refactoring an entire language, is quicker than typing in a bunch of $'s? Are you insane? :)
Yes, I didn’t say you shouldn’t use DTOs. It’s mapping arrays to DTOs to other DTOs to arrays again, in loops, that makes it slow because a lot of data gets pushed around and copied in memory
MVC is not an answer to any problem.
If you want to use a constant within your class and don't want to introduce a piece of code that breaks backward compatibility because you choose to change that constant or even remove it, by making it private you have never introduced it to the public API, so only the class internally is concerned with changes. This is very much the same as with visibility of properties and methods.
In my best MSOffice Paperclip impression: It sounds like a developer has told you that your code is bad. Generally, there are a few reasons for this to happen. 1. The code is not bad, infact there's nothing wrong with it, but the developer can't read other peoples code. The developer is bad. 2. The code is not bad, but is "old fashioned". The developer is overly opinionated. 3. The code is not bad, but is not done the way the developer would do it. The developer is an egotistical ass 4. The code is messy, the developer can read it, but can't guarantee he can work with it without errors, but it is fit for purpose / secure at the moment. The developer is honest. 5. The code is actually bad, and you would be risking your business continuing to use it for any length of time due to security or integrity issues. You should get it penetration tested before making any rash decisions, and to verify this one. Get a second opinion, I've seen all of these, and more often than not a piece of code is not detrimentally bad, it's just stylistically bad. That said, there are some absolute stinkers out there that still manage just fine - if you think the reason for your developer complaining could feasibly be the last one, get a professional open box PenTest done with a company that will review the code alongside testing. If the report reads like a guide to destroying your company from the inside out, then get the code remedied and rebuilt ASAP, if it comes back mostly clean and the site does the job it needs to to - well, don't sweat it, you can replace chunks of it as needed in the future. Importantly, do not scrap a project on the say-so of one developer, unless you trust them implicitly.
&gt; Variable variables is arguably one of the worst feature, and should be avoided. It can be useful if you're doing some meta programming, but otherwise its generally a good idea to avoid it if you can.
Most of the fork are done in order to play or create pull request, this number is not relevant.
This kind of stuff is the cancer of the programmers world. They spent some time to "steal" some projects and to build a Wordpress site instead of contributing to some good projects and spend their time for the good cause. p.s.: You can download the projects from Google Drive, such advanced technology, such wow.
For people who works on backend like laravel or symfony, angular 2+ imo is easier to grasp, since controller, router, model, services and provider are using similar concept with the one in the backend
And rarely to you. Usually to themselves, before they hit the back button and go look for another site that feels snappy. 
Well, I do pay attention to them, but my client (who does some coding in the same project) doesn’t. And you can imagine that I can not force him to apply these minor performance optimizations. And I don’t want to be distracted by these notices. So that’s why I want to disable these specific inspections.
Nice! Thanks! Found the list in the preferences pane as well. 
As I mentioned in another reply, when working with clients you don’t always have a choice. 
This plugin is a must have if you ask me!
Almost exactly my experience too. One entity type per table really flies in the face of the entire point of a relational db. If I'm using MySQL or postgres, odds are I want relationships to join on, because it's in the name of the db type in the first place. I understand when people want one type a table, because that's what a doc db (eg mongo) is. If I need a hammer, I don't pick up a wrench and start thwacking nails with it. I think much of the praise for ORMs comes from comparing the wrong things. People will stack doctrine up against peppering SQL queries arbitrarily throughout your code. Well organized models are plenty clean, and don't require you also learn doctrine configs, its weird conventions (convention over configuration is exactly why I abandoned rails), dql, etc. On top of that, SQL is actually a pretty great declarative language for getting sets of data. I don't know why we'll jump headlong into learning html and CSS, which can both have their semantics represented better in ecma, but fear sql and feel we need to wrap a bunch of procedural noise around it. Topic for another day though. 
I use Ionic 3+ often, and I’m currently checking the Nest.js docs too. Typescript and ES6 are notable steps in the way of a developer.
I don't see what their objective is, this seems like a huge waste of time to me as they don't even have ads on the website. I don't see how the author stands to make anything from this.
In my experience, more often than not, the slowness 'caused' by ORMs is people using them wrong. Eg, the n+1 problem, something like this could run a lot of unnecessary queries; `$posts = Post::fetchAll();` `foreach ($posts as $post) {` `$post-&gt;fetchComments();` `}` Most ORMs I've seen actually have a way for you to reduce that down to a single query with a join like; `Post::withComments()-&gt;fetchAll()` Similarly, people who want to use an aggregation function over a large data set often do it using the ORM. Eg, `$posts = Post::withComments()-&gt;fetchAll()` `foreach($posts as $post){` `$ttl += $post-&gt;comments-&gt;count();` `}` `$avg = $ttl / count($posts)` Which requires populating a whole load of PHP objects and memory with a whole load of data that was transferred over a network, most of which you aren't interested in. Cases like that should just rely on SQL to do the aggregation for you and just return just the result you need. If you wanted to ORMify that, you could create an object to represent an aggregated data set if you wanted to.
The whole point of this site seems to be adsense money. I'm curious, how did you find it? Did it show up on search results or something? 
Great work Christophe. Looking forward to digging in to it.
If you post/vote on reddit, a lot of voting members will see you, no worries. If you want to contribute more seriously though, I'd suggest you join us at the internals mailing list, this is also where most of the discussion happens, so you can read up on why people might vote differently than you'd expect - and you can add your own qualified perspective if you want to.
Surprisingly, i saw this website on google ads...."google adwords!"..
If you write a class, that depends on external input (config, api, or something similar) you want to validate the input. So you use const to prevent magic strings. SOLID tells us that only this class should know about the config, api or whatever so you should make those consts private. 
Sure you do, you have access to the code so why not.
DISCLAIMER: this answer is very very much my personal opinion and does not reflect the opinion of everyone in the PHP Group. mh, how do I express this.. "the community" wanting something is great, but that doesn't always mean that its a good idea to do it. And even if it is - it doesn't necesarily mean that someone is ready/having the time to implement it. let me take as an example something that I'd like to see added: async/await - I know that there is quite a few people who would like to see this as a language feature, but implementing this would need a look on how some of the extensions that we have today work - the feature would be close to useless if things are for example blocked by the mysql implementation as it is today (random pick, not checked) Then there is the thing where implementing it could have side effects on how everyone is using PHP today, it might cause incompatibilities and so on. So both preparing this as well as implementing it is some major work, so it needs someone to champion it, and someone who will actually build it to have a chance to get actually in. If PHP really needed that feature, then people would already have added it, but the way as it is, just wanted by many, it won't necessarily make it. If you feel you want something really really hard, my personal suggestion to you would be: build an extension, publish the extension as stand alone extension, then start the RFC process to get it added to PHP itself - that way the feature is available, not matter how the vote goes - and those who vote on it will have a better perspective on what this actually means.
hhvm / hack are not a fork. facebook created their own php implementation, and then an own language for their own syntax. at that time facebook also made an effort to standardize php, so both runtimes would be compatible - sadly thats not how it ended.
this is exact problem. No one agree what "real OO" is. But I think that the whole difference is level of details. In OO (at least from Alan Key's point of view) object is something big, not small service-class or entity, but small subsystem with very fixed responsibilities. Inside of this object you could have good old structural programming, functional programming or mix of it, but the idea is that this subsystem not share data with each other and just sending messages. Just like cells in our bodies which sends messages (signals via proteins and other stuff), which proved their ability to scale (apart of some cancer stuff).
Any time you have a predetermined value (known before run time) that is only relevant to the class in question. You do NOT want to just put the number `10` in random places in your class's code. It raises questions like "Is this value 10 for the same reason that the other value is 10?". Instead, you should define a const with a good name, such as `private const MAX_CACHE_SIZE = 10;`.
Correct. But if you're in an old codebase where they didn't use actual namespacing and with some crappy, custom autoloader, you're pretty much stuck with the approach of static methods on a class instead of free functions in a namespace, which would be more correct most of the time. In an ideal world, the only time I'd use static methods is when doing some kind of builder pattern, or (for PHP, specifically) having multiple ctors.
Makes sense if for every $ you spend on ads you make $1.2 back, at the end of the campaign. Especially since this has the signs that it is a site made by people from a country where a small return goes a long way ( India, Pakistan etc ). There was an issue a few days ago on Twitter with someone that copied a site's design and the content of another person, both from the same community. They somehow managed to get the site taken down, there was a vulnerability or something on the site, don't know more details. But otherwise, the only option I see is to make a complaint to the domain registrar and hope for the best. 
Technically you are right. But working with clients you have to deal with limited time, so yeah, it’s not always an option. 
I'm not sure if a Celery equivalent exists in PHP but you can use [https://github.com/php-amqplib/php-amqplib](https://github.com/php-amqplib/php-amqplib) or [https://github.com/php-enqueue/enqueue-dev](https://github.com/php-enqueue/enqueue-dev) (which uses the first library underneath).
The majority of the content seems copied from here: https://www.sitepoint.com/%EF%BB%BFunderstanding-streams-in-php/
Try `strpos` for `&lt;hr&gt;` and start reading from that offset. No need for RegEx. Want to literaly remove the content? Get the file content from the offset of `strpos` into the memory, close the handler, overwrite the file with the temporary content. 
I would love to know, too. I am investigating various ORM benchmark projects within which to compare Atlas, and will report back on that later. (My intuition based on early experiments is that Atlas 3.x compares favorably against Doctrine 2.x both in terms of time and memory, but I don't want to post numbers here just yet.)
More than one. ;-)
&gt; **not start caching/improve anything anywhere** later on.. &gt; caching, background-tasks, queue, reorganize workflow, database indices, load-balancer, upscaling vertical/horizontal, outsourcing to micro-services with another language, etc 
I always have the doubt if creating new stream wrappers for file formats are good idea
Chatbots, second most hyped thing in 2016 after blockchain. Common thing, both are pretty much useless but blockchain at least has 1 use case
Not really. DQL is nice for basic CRUD stuff and certainly simplified joins. However, it uses a least common functionality approach to sql. Many of your favorite mysql functions such as DATE are not available out of the box. You either have to write and maintain your own extension or cross your fingers and hope the third party extension you install will continue to be maintained. One more dependency to worry about. Quite often you only want part of an entity, maybe two columns out of five. DQL allows this but then you have a partially hydrated object that still has the other three unset properties. This can cause all kinds of amusing things to happen if you are not very careful. It can also be quite challenging to use much of the more advanced sql functionality. Just take a look at stackoverflow. Hundreds (thousands?) of questions on how to convert sql to dql. Many with no solution. Aggregate columns in particular are effectively unsupported at the database level. Which can be very annoying to say the least.
&gt; the events implementation is overly complex Yeah, I get where you're coming from. But believe it or not, each of those events turns out to be really useful in some situations. E.g. having direct control over the final UPDATE query object, via the modifyUpdate() event, lets you do work that you simply would not be able to do with only a Record (or Row) object. Likewise, having the events at both the Table level and the Mapper level gives you pretty fine control over what happens when, and in what combinations. (Hope that makes sense.)
:D
For a moment I thought that it was about developers of another languages being mean to PHP developers.
Sharing my experience. Two scenario: 1) It's your app and you're not sharing the code. Use public and protected only. Protected methods can and should be unit tested. 2) It's a library and you open source it or even it's just shared across your team members Use private to make sure they don't access your method now or never by design. It's a strong signal to say they should not be able to call it outside the class. But also it prevents the possibility to unit test this method individually. This means that you will have to unit test properly all methods calling the private method and do a clean code coverage of your private method.
I can see ads on there
Awesome, glad you liked it ;) Also if later you decide to support the project, here my Patreon account: [https://www.patreon.com/kalessil](https://www.patreon.com/kalessil) (platform for supporting OSS projects).
I don't understand what you're trying to say. Constants don't have anything to do with input.
I can think of loads of stuff you could use a chatbot for. Using Christoph's getting started guide that he posted a while back, I adapted it so I could use it to publish online surveys in a very quick and friendly format - works great and feedback so far is very good. Ok how about this.. Maybe you have an elderly relative who uses facebook, but is constantly pestering you with basic IT issues - you could preprogram (or maybe even dynamically source) answers to her questions? We could call it GrandsonBot, when Grandma asks "how do I close internet" we can text match that, and make intelligent replacements. Put some wildcards around the word internet, so "delete internet" or "close internet" are subbed to "close browser". Who knows how far you could take it. Maybe if you can't match it to a preprogrammed set of responses, you could parse google results and attempt to return a solution? Maybe even pre-program her setup - her laptop make/model, the programs she uses etc so you can return more accurate google results. What about a recommendations bot? Type into it "recommend me a book", make it ask a few basic questions to gauge their ideal genre and stuff then return a random, highly rated book that matches it? You could recommend anything, a meal, a film, loads of stuff.
&gt;Protected methods can and should be unit tested. Oof, bald statement. Yes they can but whether they should is a different story. Your classes are supposed to act like API's - you give them an input and they return a result without you caring about how that result is formed. Writing tests that check whether your classes' internals do what they're supposed to is only going to make your life a living hell when you want to refactor something. 
I think the MEA part all have a better chance of before than PHP. 
 private function buildService(string $service_id, array $config): ServiceInterface { switch ($service_id) { case self::SERVICE_ID_FAKE: return new FakeService(); case self::SERVICE_ID_TCP: return new TCPService($config); case self::SERVICE_ID_WEBSOCKET: return new WebSocketService($config); } throw new ServiceExcpetion("Invalid service_id '{$service_id}' given. Allowes are " . implode(',', $this-&gt;getServiceIds())); } You can use private const in a factory- or an apiclass to prevent magic strings
\&gt;the key server-side interaction that is the bottleneck of your performance That's a lot of assumptions for something that's my app.. lol
They just reflect your intentions for the method or property. 1. `public` is simple. It marks something as being for external use. You know when you need this. 2. `private` is also simple. It's for helper methods for internal use only. 3. `protected` is for use by subclasses. That's it. The subtleties come out when you're writing a class for extension. I follow this general way of handling things. By default, I declare all of my classes as `final` and set all helper methods to be `private`. Since `final` classes cannot be extended, it's a simple `public` vs. `private` determination. If a class is intended to be extended, I then remove the `final` keyword and start asking myself what someone who is going to subclass the class needs. First up is which `private` methods would need to be usable by a subclass. Those get upgraded to `protected`. This is usually most, if not all, of my `private` methods, but the upgrade is intentional in each case. I then ask myself which methods would need to be overridden. Everything else gets marked `final`. The end result is that I have explicitly, and intentionally, defined my interface for extension. This way, people can extend with the confidence that I won't idly make breaking changes to what they've extended. In practice, what I end up with is: - a large number of `final` classes each doing their own thing. - a handful of interfaces, each for where an alternate implementation may need to be used. - a handful of `abstract` classes and traits to provide code reuse. `abstract` classes are usually there to provide defaults and common helpers in the implementation of an interface. Traits get used more often when it's a helper method or cohesive set of helper methods that are of more general use. - inheritance hierarchies that, when even present, are rarely more than two levels deep.
Think of how memory works in a computer. Each application is isolated and only has access to its own block of memory, obviously for security reasons but also because if one app starts messing around with the state of another one it'll likely cause it to crash. Your classes follow the same principle. They have a public interface that alters their protected variables in an expected way. If these variables could freely be modified from the outside they can leave your class in an unexpected state that could lead to bugs/unexpected behavior/errors.
This is excellent!
I don't think you understand inheritance quite right. you shouldn't ever need to use the private method in your extended class. See [composition over inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance) and [open/closed principle](https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle)
**Composition over inheritance** Composition over inheritance (or composite reuse principle) in object-oriented programming (OOP) is the principle that classes should achieve polymorphic behavior and code reuse by their composition (by containing instances of other classes that implement the desired functionality) rather than inheritance from a base or parent class. This is an often-stated principle of OOP, such as in the influential book Design Patterns. *** **Open–closed principle** In object-oriented programming, the open/closed principle states "software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification"; that is, such an entity can allow its behaviour to be extended without modifying its source code. The name open/closed principle has been used in two ways. Both ways use generalizations (for instance, inheritance or delegate functions) to resolve the apparent dilemma, but the goals, techniques, and results are different. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Facebook created a standard to replace the original standard? [I need to create a new standard to replace to standard replaced by the facebook standard.](https://xkcd.com/927/) 
Thanks, makes sense. I read it with a different mindset.
Thanks!
Exactly, we've given the credits to [sitepoint.com](https://sitepoint.com) in the article, there's nothing to hide.
Wow, really good guide. Quick question: Can public vars be used within other classes?
I used these when working on a Laravel one if it helps [GraphQL-Laravel](https://github.com/rebing/graphql-laravel) [GraphIQL](https://github.com/graphql/graphiql) It was pretty easy with Laravel, but the project was extremely basic - not complex enough to hit any pitfalls.
Thanks for the share :)
Exactly, I gave the credits to [sitepoint.com](https://sitepoint.com) in the article, there's nothing to hide.
Why not just go full Java? private static final int MAX_SECONDS = 25;
[https://github.com/adhocore/cron-expr](https://github.com/adhocore/cron-expr) This could possibly be the fastest crontab expression parser in PHP7 currently. Just set a single cron entry for your php based scheduler once and for all like so: \`\* \* \* \* \* php /path/to/scheduler.php\` Then all you need to do is invoke your due jobs in \`scheduler.php\`, this is where \`cron-expr\` comes in play: it tells you if specific job/task is due at the moment with simple api. See a quick simple example below: \`\`\` $job1schedule = '\*/5 \* \* \* \*'; $isJob1due = Ahc\\Cron\\Expression::isDue($job1schedule); // run job 1 if due and so on for job 2 etc... ! \`\`\` Also supports some humanly tags for representing schedule intervals like \`@hourly\`, \`@daily\`, \`@10minutes\`. \[scrutinizer rating 10/10, test coverage 100&amp;#37;, version 0.0.3, dead simple usage, single api\] 
[PHP Tutorial - 4 - Search Through a Text File - Grep](https://www.youtube.com/watch?v=e9oEwiBMvGo) And if the HTML file you want to look through is on a different server, [use cURL.](https://www.youtube.com/watch?v=8D05ZSmWTrQ)
It sounds like what you'll need has two parts to it: 1. The implementation of a standard login setup. This would include prepared statement queries to the database to search for the account by email address and then match up the password. Be sure to store your passwords hashed and not in plain-text. Look into the password\_\* methods for this ([http://php.net/password](http://php.net/password)) 2. The other part is protecting the files. The simplest approach here is to have a script that checks to see if the user is logged in (via a session value or something) and, based on a unique hash value that matches up with a file (probably xref these in a DB table), open the file on the backend and stream it back out to the user via the PHP script. Also, ideally, you'd have the files outside of the web document root to prevent direct access. You can also add in other checks to that pass-through PHP script besides just "is logged in or not". I assume you'd want some other conditions in there too but that's really just a matter of adding more logic. Hope this helps...
I'm not sure what you mean. They can be viewed and edited from outside, per the definition of `public`. I used to think it silly, but I now hide all of my properties behind getters and setters. That said, I don't mindlessly wrap my properties with those. It's usually just setters for things that I want the user to set. So, general pattern that I follow _here_ is: - If the property is required for the functioning of the class, it goes in the constructor. - If the property isn't required, but changing it later would break things, it goes in the constructor as an optional parameter. - If the property isn't required and changing it is OK, I leave it off of the constructor and create a setter method for it.
Free. Not Free as in free beer.
Thanks for sharing and being polite at the same time. I did not know that about Facebook. Quite interesting
Thanks for sharing this. I'm still learning on going from procedural to OOP. 
I’m impressed by anyone who can develop elegant applications, train others to do the same, gives his time and talents away, makes a screencast series, and finishes a project of this scale and scope, along with an ecommerce site to sell access to it. Kudos to you. You’ve reached Adam Wathan status. 
no, facebook created the php language specification (and put it under public domain), you can check it out here https://github.com/php/php-langspec this did not replace anything - despite various php implementations having surfaced over the years, there wasn't any previous attempt made to ensure they are standardized
They should be useless. I mean what can a chatbot do that a a website or application can do much better ? But the fact is many people can't be bothered with leaving Facebook anymore. If the information is not available within Facebook they won't click a link to a website to get to the information. So many businesses don't feel the need for a website, they already have a Facebook page. What they do need is something to improve their Facebook page, have some situations nteractuve content there (searchable inventory, booking, help, surveys...). That stuff used to be achievavle with Facebook tabs, but now they're only available to pages with a certain amount of fans and they don't work on mobile anyway... So there's only one way to provide that : Chatbots. It's usually a terrible UI, and they don't solve a real problem, but Chatbots are in very high demand, so as developers it's a good idea to know how to work with them.
My bad I didn't see that.
&gt;"Is this value 10 for the same reason that the other value is 10?" Hey thanks for that sentence there! That's the piece that's always been lacking from my explanations of magic numbers to people. I'm bad at wording things. lol
I actually reread it when I first wrote it and thought it sounded bad. But I couldn't think of a better way to word it and I'm lazy, so I left it. On topic: even if you only use the number/string exactly once, it's *still* usually better to make it a named constant. It at least gives it some context.
I don’t think there is any tool that’s for 100% of use cases. All I’m saying is that for me personally, when I’m dealing with relational databases, I prefer to use an active record ORM. Some people may disagree and that’s fine. 
I don’t think there is any tool that’s for 100% of use cases. All I’m saying is that for me personally, when I’m dealing with relational databases, I prefer to use an active record ORM. Some people may disagree and that’s fine, my opinion isn’t gospel, it’s just my preference 
Status: scrutinizer code quality rating 10/10, code coverage 100%, version 0.0.4, license MIT Features: support 3 RS* and 3 HS* algos, support kid, passphrase and leeway, Timestamp spoofing for tests
You will wake up some JWT/JOSE doom prophets with this post. Either way, I would like to congratulate you on your work.
I like how much effort you put into your writing. Nice post, keep it up :)
I'm asking a question, Because I'm working in PHP.
This is the wrong sub for this, but if you took all the best parts of PHP today and called it its own language, it's still worse than Java 7 in every way except that it has namespaces and free functions.
&gt;So far, I've pretty much used the "most private" level I can get away with and that's it. That's gonna get you pretty far, really. The only tricky one is `protected`. If you're writing a base class, it can be difficult to decide what you think derived classes should be able to see and modify.
Just gotta say I really appreciate how this interaction unfolded. It's nice to see subtle disagreements resolved so effortlessly on reddit. Like most cases it wasn't even a real conflict, just a subtle difference of perspective.
I agree, but even for smaller projects it makes sense to abstract tables to models. I'd been rolling my own since php3, until I switch to the modern frameworks. It makes sense to at least have your own methodology for this, otherwise you're reinventing the wheel every time. And the next logical step to have some kind of view library for crud ops. At the very least you've got to have your own db object, but w/e 
I truly don't understand how Traits are a good thing. Can you shed some light on this for me? I see that there are two situations when you write a trait: 1. Your trait assumes that that `$this` has at least one certain method or property. 2. Your trait does not depend on anything in the object that uses it. Scenario 1 is bad because you can `use FooTrait` on a class that doesn't implement the needed properties and methods. Scenario 2 just means you have functions that probably don't even belong as methods at all. Rather, they should just be free functions.
&gt; I want to quickly note that using interfaces well frees me of much of the worry about how to properly set up inheritance rules, as anyone could just ignore my hierarchy and implement from scratch. And it makes things way easier to unit test.
Oh yes for sure. I normally explain magic numbers being bad because it makes the number contextually meaningless and hard to understand later/hard to change. I just never also remember to explain that "it shows that these two numbers, while the same could be the same for completely unrelated reasons, and actually represent two different concepts.". It's an important tidbit I have been leaving out of my explanations. :) 
They're valid concerns. While this seems to not support the `none` algorithm (good), it looks like it might be at risk for algorithm-swapping attacks depending on the runtime configuration. The reason most of the dominant JWT libraries are "heavy" is because the spec is awful and is insecure if implemented blindly and takes a _lot_ of work to avoid all of the security pitfalls.
That's definitely a useful strategy! I wouldn't suggest relying on that _alone_ (you may not notice on a sufficiently small N), but anything that helps is better than the nothing that many projects have.
Try Laravel
Honestly, I find Java frustratingly limiting, and having to deal with GC is painful. The amount of boilerplate and lack of lambdas (although they finally added this) was bad. JNI interop with C leaves a lot to be desired. It's also just really slow in a lot of situations. I'm much happier using PHP in general.
PHP also does GC, and it's way slower than Java in everything except for string operations, IIRC.
How comes? :) all I know about it is, its made with symfony :) I decided to learn it because Magento 2 uses it for its framework, and I know a lot of others do so I thought if I learnt the 'top' of the tree I'd find the others to come naturally
It's admittedly rare that I ever even use them. In many ways, I'm still working out a good mental model for when to use them. Often, it ends up being that the methods should be free-floating, as you say, or bound up into some collaborating object. The explicit intention behind traits is for lateral reuse of code. PHP is a single-inheritance language and traits are its answer to multiple inheritance. I think that looking into when and why well-designed software in multiple inheritance languages uses multiple inheritance would be instructive. Per Scenario 1: Traits can contain abstract methods. Concrete classes using those traits, either directly or from an ancestor, then are forced to implement those methods. Traits can also contain properties. If the property properly belongs to the trait, I just define it on the trait for a neat little package. If the property better belongs to the class that the trait goes into, I just define an abstract getter method on the trait to provide me with the needed value or an abstract setter to set it. This gives the bonus of letting the calling class do things like lazy evaluation, delegation, etc. I'll give you an example of when I have found it definitively preferable to use traits over something else. In Laravel, models must extend from a base `Model` class, but I have found the need for some code reuse between models. In my application, there are a number models that are supposed to do something at regular intervals for potentially some period of time. The logic for that isn't trivial but it must live on the model class. Repeating myself with this really isn't an option, so I made a trait for it. I've posted it into [a gist](https://gist.github.com/mcordingley/1e7291495866da9c113b6e30133976e6) so you can see it and in case it helps others. Note that because I know that it'll be going into objects that inherit from a particular class, there are some assumptions built into the trait that I normally would not make, some properties directly referenced instead of pulled from a getter, etc. I use a combination of @property declarations and abstract methods to keep my IDE from yelling about me
&gt; Note that because I know that it'll be going into objects that inherit from a particular class, there are some assumptions built into the trait that I normally would not make, some properties directly referenced instead of pulled from a getter, etc. I use a combination of @property declarations and abstract methods to keep my IDE from yelling about me Right. That's how I see them used and that's a major code-smell to me. However, you mentioned that Traits can have abstract methods, which I didn't know (or I forgot). That makes a lot of sense to me. It's like an Interface that can have default implementations. I can now appreciate that there could be a good use case for something like: Trait Foo { abstract function getBar(): Bar function useBar() { $bar = $this-&gt;getBar(); // stuff } }
Don't listen to them, if you dig Symfony, then keep enjoying it 
&gt; using OOP instead of MVC 🙄 Sound like my diet. I eat vegetables instead of carrots.
&gt;my own frameworks using OOP instead of MVC Me too, thanks
I'll add some context to my post. You are quite right.
Why? 
Haha I used the terms wrong, me knows, I just more mean typical mvc uses the typical architecture of controller based development, where as mine were just Crud objects ahaha I understand my mistake ^.^
&gt; its made with symfony [Yeah, sort of.](https://imgur.com/SgU57Mp)
\&gt; relying on someone else who is **trying to get some money out of you** FTFY.
Why do so many people hate the $ sign before variables? I personally think PHP is a lot more beautiful compared to other languages because of these kind of things.
Laravel uses some Symfony bundles and Symfony uses bundles from lots of other sources. Laravel comes with a lot more already done for you and can save you tons of time if you like the way everything works. If you need to me more flexible, Symfony is the way to go.
I like the fact that it closely resembles how much of the canvas it takes away from the artist. I think there's a few places in there where I can still draw my own stuff.
As a Laravel lover, yes. Enjoy it and don't worry about using alternate frameworks.
Because of something most developers dont get. UI. :-) User Interface. If you can make it easier for the user, then do so. 
For file formats?
Awesome read :) you really helped put words to my thoughts and graphically represented my stance. Good job
It doesn't give you more options in the long run.
Magento will make anything look good. I'm actually surprised you thought wordpress was bad with magento under your belt. Symfony is very high quality code, the only parts I dislike are the overcomplicated config and container systems. Unfortunately, the overcomplicated config and container systems are half the skeleton symfony install... I prefer to build my own system with symfony components and pimple for DI or something.
Not to be overly pedantic but Symfony bundles are wrappers designed to simplify using component libraries with the Symfony framework. Laravel certainly does not use any Symfony bundles. Instead, Laravel uses a few of the Symfony components. Very important to understand the difference especially when making claims about frameworks. 
You are totally right. Thanks
It's not something technically necessary (IIRC Lerdorf admitted at some point he made variable identifiers need to prepend `$` to make writing a parser easier.), and it's a nuisance to type for a lot of people that write in other languages. Having written in a couple other languages: I've never really felt like it's made it easier to read or write code, or enabled any particular advantage. The closest thing to the latter I can think of is `$$doing_this` but it's not like you can't do something effectively identical in other languages.
I think the poster above you chose poorly with Javascript, but to make the point that PHP's `$` don't provide any immense benefits other dynamic languages haven't realized as well in fairly straightforward ways and use python: Like this: foo = "Alchemy" colour = "blue" print(f"Hello {foo}, your favourite colour is {colour}.") And this: bar = "foo" foo = "dude" print(locals()[bar]) And this: class WidgetFactory: ... class GadgetFactory: ... cls = WidgetFactory if isinstance(bar, Widget.CLASS) else GadgetFactory factory = cls() 
Yes Symfony rocks 8)
I recently released v2.0.0 of [Twine](https://github.com/PHLAK/Twine), a string manipulation and comparison library, and it was featured on [Laravel News](https://laravel-news.com/twine-string-manipulation-leveled-up) earlier this week. I never intended for it to be that popular but a lot of people have expressed how useful they find it.
I haven't messed with it in years, but I just installed it again and created my first little "Hello world" thanks to your post. It's nice. Coming out of Magento, I'm not surprised you love it. I like laravel and have used that pretty exclusively for backend stuff for the last couple of years. My "out of the box" impression is that it's very static feeling. The YAML files for routing, (while that may make sense, I haven't thought about it) feel (hows that for subjective) very static. It was intuitive to use though, I didn't have to look at the docs to pass parameters in and out, so that bodes well. Anyway, thanks for reminding me that it exists (even though I knew it does, as laravel uses a bunch of its components). Try laravel, see what you think.
Calling Javascript a "modern language" next to PHP is not exactly fair. PHP was first created in 1994, Javascript in 1995. There are also other languages of varyng ages that utilize a similar construct. Most people would agree the problem solving aspect of coding is the bottleneck, not syntax. 
Check out controller annotations for routing. I am a fan of Symfony as well. I'm very productive with 4. Laravel seems like a digression, between blade, the routing, and requiring 3rd party form components. I feel people use it because they are told it is easier, and more featureful, when the source of that info has no expertise in Symfony.
A sloppy digression! Well, I never!
You get why your downvoted
You get why your downvoted right otwell??
Thanks. Valid concerns they are. Will definitely add a Caution block somewhere in readme. 
Is it better practice to keep those types of constants private, or just not even use them outside the class for PHP 7.1? So if I'm calling from somewhere else, it's better to use the following over using a constant? `ServiceFactory::buildService('fake', [...]);`
Laravel is way too much magic. Facades, untestable files, models with dynamic fields (and it destroys the naming conventions), collection macros, wtf. Symfony feels way more stable to work with. And once you try route annotations you won’t even look back to Laravel if that is your only problem with it
True but the point of frameworks is to avoid reinventing the wheel. Laravel can save you a lot of time and you can certainly disable things but if you want to be more customize-able yeah you could use Symfony.
If you have a class variable that is always the same then you can make it a constant with `private` visibility. Useful in factories, for example.
Idgaf 
I fell in love with Symfony back in the days of Symfony2 and then Symfony 3. Symfony 4 was a big change, but I got used to the private services and heavy emphasis on dependency injection relatively quickly. I absolutely love Encore for front end stuff, though tbh I’m not the most experienced front-end dev and I don’t have any experience with much else. But Encore, Yarn, Webpack, and Symfony were my first foray into front end and I think I’ll stick with them for now. Routing and configuration can be done with yaml, xml, php or as others have mentioned annotations in the case of routing, which is indeed, imo, pleasant to work with since it keeps the routing configuration and controller right next to each other. And finally, where I spend the majority of my time, the console component makes writing really powerful cli applications a breeze. I constantly find new trinkets throughout the components and have thoroughly enjoyed working with it for the last 4 years or so. Unfortunately, I didn’t find out about Laravel until after experiencing twig and doctrine and the rest of the Symfony ecosystem.. I just didn’t find the blade syntax and the active record pattern, used by Eloquent, very attractive. The php routing left me wanting something more; simply because I had already become very familiar with annotation routing. Perhaps someday soon I’ll give Laravel another, fair, try. But for now, I’m extremely happy with Symfony. And it’s currently the only framework I use at work and on personal projects and I don’t think that’ll change easily. KNP University is a really good resource to learn about more. I believe they have a [free course for Symfony 4](https://knpuniversity.com/screencast/symfony) out now as well.
Symfony DI and containers are way better in 4 than they have been in the past. Most of the time you just slap a typehint in your class and your dependency magically appears. And the config stuff is waaaay better since Flex. The structure is much more thought out, and most third party packages configure themselves.
Laravel seems pretty terrible after having used Symfony for many years. It's like all my freedom is stripped away and I'm forced to do things in one particular way. On top of that, the facades completely break intellisense, and you can't even configure basic environmental settings like the cache directory. It's okay for really light stuff I guess. I wouldn't want to build a large application with it.
I have been a little frustrated recently - why is it ASP.NET can return the client windows user name and this does not seem to be supported by PHP (or PHP combined with a compatible client side scripting language such as javascript)? I know that PHP has the ability to return a user name, but it is always the name of the user under which the PHP process is running on the server. Not useful in this case. As near as I can tell this is just not in the design. Am I missing something? (environment: Windows Server 2012 R2 or W10 running XAMPP with Apache 2.4 and PHP 5.6.x)
I'm assuming you're talking about where you get something like edward4am@REDDIT.COM? There's a tonne of stuff happening under the hood to make this happen, but somewhere you almost certainly have an Active Directory (or similar) server doing Kerberos/GSSAPI for you (or NTLM if you're unlucky.). Note that contrary to popular belief - this is _NOT_ LDAP. Kerberos and LDAP are both protocols that Active Directory serves up, and perform similar and complementary roles, notably Authentication and Authorisation respectively. You can use LDAP for Authentication, but you shouldn't. If you want to have this work with Apache, you need to have the mod_auth_gssapi module configured on Apache, as this happens at the http level. PHP will then get a $_SERVER global with the username on successful Single Sign On (SSO) Authentication, which you can query LDAP for.
&gt;"and you can't even configure basic environmental settings like the cache directory" All you have to do is change "path" in the configuration cache file.
Sometimes those strings will be read from a config file. So you don't use them statically. The idea ist to change the service implementation through a change in the client config.
Oh this place is horrible but you either fit in or you get attacked, I’d rather fit in
Sooooo I should replace all my static repository classes, none of which are ever instantiated, with global functions?
Can you post a link to the feature you're referencing in ASP.NET?
Make a class on how to be an elitist snob who can't read a casual online discussion in context.
I understand the benefits but I was talking more about developer UX. In order to make people switch from whatever bad/heavy tool they are using the increase of mental load should be minimal. Having an API close to popular tools would be a big plus.
A really good example is SharePoint (now I have to go wash my mouth out with soap). It knows who you are and grant's you access to various portions of the site based on your permissions and userID. I know that this is Microsoft's baby and there is a lot going on under the hood. I am having a ASP.NET web app written. It can return your userID with one line of code. Dang!
&gt; If you want to have this work with Apache, you need to have the mod_auth_gssapi module configured on Apache, as this happens at the http level. PHP will then get a $_SERVER global with the username on successful Single Sign On (SSO) Authentication, which you can query LDAP for. Yeah I have stumbled across this idea referenced in several articles and posts to questions as I googled for the answer. There never seems to be a concrete example of how to get all the parts functioning. I have installed the mod_auth_gssapi, but in XAMPP under windows it does not seem to function. I am working on building out a Linux box to test this on. It just seems like something so fundamental as SSO should not be so darn hard to get working.
Don't we already have this? https://github.com/brianhaveri/Underscore.php https://github.com/Anahkiasen/underscore-php
yea few options to choose from doesn't always hurt. anyway i had better not reinvent the wheel though. 
Worst case: write a small server in ASP.NET which handles authentication, and just query that using PHP.
&gt; It just seems like something so fundamental as SSO should not be so darn hard to get working. tbh. This stuff _is_ hard. It only works easily under IIS because Windows, AD, and IIS are tightly coupled, and that tight coupling allows a bunch of assumptions about the way it works. There's a reason most people just slap plain text LDAP passwords on it, and call it a day, or use SAML or similar. Effective SSO requires mutual three way trust between the client, server, and the Kerberos server. &gt; There never seems to be a concrete example of how to get all the parts functioning. You might be googling for the wrong thing? PHP doesn't care about Kerberos or GSSAPI, though it will need to care about retrieving userdata and group information from LDAP once you have the username. Briefly, there's several separate steps: * Register your server on the domain (assuming AD) * Register an http service in AD * Extract the kerberos keytab for HTTP/yourserver on to the webserver * Configure that keytab in Apache's mod_auth_gssapi module Note that Kerberos requires forward and reverse DNS to be set up properly, and the clocks on the various machines to all be in sync. IIRC mod_auth_gssapi module also demands an SSL connection. This might be helpful? http://www.microhowto.info/howto/configure_apache_to_use_kerberos_authentication.html 
You could always fork the other and call it lodash for PHP.
I'm curious what you stance is. When I go through this article, what I see is, in many many words, the following: - Code is separated horizontally in layers. - Vertically in bounded contexts. - Here and there bounded contexts share underlying code as shared ~~libraries~~ kernels. That's just basics. 
It just seems like it's really helpful to use when I'm describing any of this to a junior developer. In retrospect, stance is a poorly chosen word. That's probably just because English isn't my native language and I wanted to give some praise just before going to bed last night ;-)
Maybe less diverse languages to accomplish the same task? As in, you already know PHP, so maybe now you can use it to do things that previously would require a tertiary or other language to complete cleanly before.
I think SSE is a bad approach to this problem, for scaling reasons. However. I also wish reactPHP and others made a bit more sense and were easier for me now than just going for the AJAX.
I am in the same boat here. Nice idea and novel solution and OP seems to know it is just a hack of an idea that will never take off, but the concepts and works of the creator will evolve and possibly bless us some day..
It sounds like what you are trying to do is get the username of the windows user that is running the browser viewing your PHP website so your code can make access control decisions based on that. That is a very strange way of doing access control in a web application because you have to rely on the client to do the authentication and then pass that information on to server. The client could very easily spoof it’s own user credentials and tell you it is logged in as someone it is not. You have in effect no security whatsoever. A more conventional way to do it is for the web application to handle its own authentication. The user submits their login credentials via a form and they are checked on the server which then stores the current logged in user in a session. If you have an active directory server with windows users you can with PHP authenticate using that. Look into LDAP.
I also can’t see how such a feature could possibly exist in an ASP application because the client user credentials are not accessible from the browser. The technology on the server is irrelevant the information isn’t there. Are you sure it’s not returning you the user on the server?
For the sake of comparing the frameworks. He only worked with Magento and Symfony. I didn't said to drop symfony, only to try Laravel. Is no harm in exploring all the options.
I've had this exact issue but using nginx. you need to make a change to the plugin type for the root user and then set a password or you could create a new super user using mysql in the terminal.
No, it insure that something cannot break because idiots won't be using private apis meant to be private then complain on github issues that some refactoring broke their code. /** * @private */ is not enough.Encapsulation is one of the pillars of OOP.
yeah, but the problem now is that I need to login as root to do this but I tried entering root but is not opening, returning Access denied, I have root as the password but the same thing happen
yeah, but the problem now is that I need to login as root to do this but I tried entering root but is not opening, returning Access denied, I have root as the password but the same thing happen
&gt; I am pretty sure I can change private values in any language, with Reflection. true, and this is not a good thing at all. At most private properties should be "read-only".
You should be able to login as root without a password using 'sudo mysql -uroot' in linux command line.
Using something like a static code analyzer that's running on an unstable version 0.x, I do and would do, but depending on a tooling library that doesn't have a stable 1.0 version, that just seems like madness, because I'd have to update my code base on the whims of the package maintainer of that library. That's just an aside to the earlier mentioned multiple ports already out there. Fair warning to anyone overlooking or brushing off the package stability.
Ok let me try
Assuming MySQL and phpmyadmin are on the same server. MySQL by default only grants access to the loopback interface (127.0.0.1). Which server address are you using to connect in the phpmyadmin config. If you use its IP address it will fail. Try changing to the loopback address. 
Also Anahkiasen is 94% coverage, brianhaveri doesn't show . I'm assuming they have similar API's as they are implementing something from JS, but I suppose that is not a given. It'd be interesting to see how similar and if any tests between projects fail. &gt; Some functions were not ported from Underscore.js to Underscore.php for technical reasons or because they weren't applicable to PHP. &gt; from: http://brianhaveri.github.io/Underscore.php/ I think it's the greyed out entries * isRegExp * isUndefined * isElement * isArguments * noConflict * debounce * delay * defer * bind * bindAll It's also 7 years old &amp; targets PHP5.3
But there are valid reasons for private injection. One simpler example would be Entities with private fields that get their values injected. It doesn't break the OO pattern behind it.
If it's out of your wheelhouse, the kindest and most professional thing you could do is go to the client and say "I can't help with this", not try to retrofit skills, abilities and responsibilities to your role in-situ. Be kind to yourself and them. Go back to the client and let them know "this isn't my skillset, and it's not one I can evaluate in others". **Red Flags** - Client has a single developer - Client has lost contact with single developer - Client asks someone without PHP development background to fix broken shit - There isn't a separate log of what servers this thing needs to run on (was it on a shared hosting before? If so try to gather environment from that). Standard things (SSH in) - php -v (or search control panel) - gets PHP version - php -l (or host a file called info.php or phpinfo.php with contents `&lt;?php phpinfo();` - gets extensions &amp; some config - pwd (sounds mental but sometimes people hard-code FS into apps. Esp ones they don't want others maintaining / copying) - Also checking file sha sums might highlight poor SCM practices (if SCM &amp; server files have different checksums) To be clear these are problems with the client. They are either too incompetent to check these things or pinned their business on someone else who they then failed to motivate to stay on top of these things. I Get it, businesses want to minimise spend, but what they wind up with is what you're encountering. Things you could do to help your client &amp; any dev coming in - Check the environment from the old environment before moving, try to setup a clone environment? - What breakages are you seeing? - (I know if you work infra you should know how to remove sensitive crap from logs) - Get the contents of require and require-dev sections of the composer.json you indicated below, extract library experience needed from that - Search for tests or a CI environment (if the client doesn't have, that is another red flag on them) - Ask them for their former dev contact details (they might not ghost you as much as the client) 
Neither is OP's question really or equally as relevant you might say. I think OP should give each one of those 4600+ forks a go, to see if one of them leaves out the $ symbol prefix for variables. No really, it's just like searching for a fork of Python that use braces for indentation instead of tabs. A really cool weekend project if you're into that sort of thing.
&gt; the increase of mental load should be minimal That's a fair point. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
 :) Hi guys, the problem of using a php framework has been made simplified, ever since the bigger framework in the community made life difficult for upcoming developers who aspires to learn framework, a new framework as finally showed up to ease our engineering life. Codefii faster way to build back-end speed driven applications. The problem of developing admin backend after building an application has been solved with the help of FiiA, a generic admin package for codefii. Enjoy...
I don’t know why this is being downvotes. It’s factually correct; the best kind of correct.
Mine isn't maintained anymore tho and isn't a direct port but more a port of the idea so it's a bit different
That changes it everywhere, not just for one environment. I was not able to have separate config for dev and prod, for example, like I easily can with Symfony.
Set it to an .env variable and set "path" to that.
Yeah doesn't work, it's already done by the time it gets there.
What do you mean it's already done by the time it gets there? The memcached configuration uses env variables by default.
What does it have over websockets? Not a huge amount really, but it is a more efficient and cleanly setup from the network perspective. What does it have over AJAX? * No need for recurring TCP three-way handshakes * No need for recurring TLS negotiation if you support TLS * No need for recurring HTTP requests - just wait for the server to send something when/if it becomes available.
The cache path is already created by the time it reads .env files.
By no means a criticism of any of them. In-fact it's surprising how much common ground they cover. Maybe team up if you ever get the urge to re-join. Or link to each others projects. The 5.3 project probably needs testing with newer PHP, but if they all work, no reason not to link to each other, let the users decide
If you don't know the difference between UI and UX, then you obviously "don't get" it either.
Site down
What in the fuck. This site is dead slow because it's trying to load in images that are [OVER 14MB in size](https://common.phpoc.com/img/main_banner02.png)! https://i.gyazo.com/9ee776438a1810c50f287543824c27f2.png Whoever built this site needs a kick up the arse.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
More typing options, functions, variables etc. (love what they did in typescript)
I also don't understand what you're talking about. Put CPATH=x in .env in 'cache\_path' =&gt; env(CPATH) in cache.php 
Unless it has changed since 5.6, there is no way to set the cache path that way. You can only hard code it. Go look at how the code works and you will see.
So, let's say you have a \`$collection\` class, this could be any class, but for this post we'll pretend it's already built and has things like \`map\`, \`filter\` etc. How would you feel about being able to do the following: $collection -&gt;map(...) -&gt;(function($collection) { //... do your stuff here })() -&gt;filter(...);
I'm a huge fan of this in other languages, JavaScript c# etc... Php's anon function syntax is pretty gross though. I like it if the code remains readable, but it probably won't :-(
IOT, now with more insecure!
``` const foo = 'Alchemy'; cost color = 'blue; console.log(`Hello ${foo}, your favourite colour is ${colour}.`; ``` For variable variables I have no idea, but I've never written them in php either. ``` const cls = bar instance of Widget; const factor = new cls(); ```
See my above comment, this is what the Kerberos component of Active Directory does (along with the soup of SPNEGO, GSSAPI). Fun fact. You can use Kerberos to authenticate to SSH.
&gt; Imagine joining some company and on your first day discovering that they run a custom PHP version with a totally unique syntax. Unless it has an established track record, that would just be moronic. That doesn't mean the idea isn't possible. It would have to be released as a whole new language, based on PHP, but a whole new language.
Laravel does this, although it can be called a workaround. Method called "tap" taps into the chain (on collections) and allows for a closure call. There's also a "pipe" method, which can modify the original collection content. [https://laravel-news.com/collection-tap](https://laravel-news.com/collection-tap)
Yeah... I never meant those things were not possible. Anything is possible in a language with eval. The point was Alchemy argued typing $ takes too much time. But I was trying to say that it isn't a valid argument especially since different language = different pro's/con's. Also, my classes example is super trivial. JS cannot dynamically import modules AFAIK.
Laravel does this for collections, nothing else
An attempt to get this included in `tymon/jwt-auth` for laravel/lumen is underway https://github.com/tymondesigns/jwt-auth/pull/1624
Laravel has a `tap()` helper function, too. I honestly don't know who/why `tap` is relevant here, though. For Laravel collections, I do stuff like this: $collection-&gt;filter(function ($item) { return $foo-&gt;bar(); })-&gt;map(function ($item) { return $foo-&gt;baz; });
\#why are we even mentioning laravel for a core php proposition? lol
sure js can. Either via commonjs or in the near future with es6 https://github.com/tc39/proposal-dynamic-import (or now with babel or typescript)
&gt; Either via commonjs (now) or in the near future with es6 https://github.com/tc39/proposal-dynamic-import (or now with babel or typescript) Ok, TIL
Because it shows the example of what the guy is trying to get across and the readability of it that was mentioned previously
is this not essentially `$collection-&gt;each(...)`, or `array_walk` in standard PHP.
Adding confirmation to this as the person who did the releasing of this spec. We (Facebook) wrote the formal specification treating the reference implementation's behavior as correct no matter what crazy shit it does. We even "fixed" HHVM to behave like PHP based on the handful of inconsistencies we found along the way. We (FB) then gave it to us (PHP) with no strings attached. The PHP project "owns" the standard and has kept it up to date as the language has continued to evolve since I announced it at OSCON 2014. * Apologies for the shifting meaning of "us", but I a few hats during that period and they weren't all 100% compatible with each other. :)
Before removing the $ would actually work, we'd need to unify the symbol tables. x = y; Is y a constant? A variable? You don't know, and can't know until these share a name space, but doing that has a MASSIVE potential to break existing code. The payoff needs to be bigger than saving a single character to risk that kind of breakage.
Why dont you try WordPress ??. that is much eadier
I believe PHP will work for you, even if the files are changing constantly.
Yes you could use php for this. But any language with some form of templating engine could do that too. 
Thank you for taking the time to answer! If my files change more rarely, do you think it is wasteful to keep enumerating a dir over and over again, like won't it burn the disk faster?
I don't know if it matters, I am using StableHost for hosting. Do you mean by templating engine some other language than php? Thanks for your input. 
Read again and I'm an idiot now I get your answer, I skipped over a word :)
so far none of the posts are even about PHP... this is spam.
Eh, not really. If there's thousands of files/folders in the directory being scanned then it will take a while before the page loads.
Yes, PHP is the right tools and also can greatly improve the experience. As of the speed, there is a thing called read disk cache. Reads the frequently accessed file only when it's changed 
If the actual content of the site isn't being changed much you might want to see if a static site generator is a good fit for your project. I've used Hugo which was neat but there's [a ton to choose from](https://www.staticgen.com/).
damn, new terms here, `array_pad` and `null-coalesce-opeartor` interesting. Thanks
Thanks sucks having to debug "do it right" with your old code from months back after accidentally turning on soft warnings.
No classes supported? Who thought this was a good idea?
Thanks! Do I need to do something to enable it in php or do you mean the cache on the actual disk/operating system?
Thanks for commenting. I have a static site generator currently, but I'd like to be able to also change the site by just adding a new file and stuff like that, I'm experiencing the limitations of static generation.
Run it on AWS and watch your bill skyrocket, Brilliant!
@adhorcore did you made some performance tests and comparasion with Symfony dotenv and any other alternatives ? It will be cool to attach those statistics in git repo readme
thanks, will try to do that :)
I think php was done for things like this. In fact the creator of php was a C dev that wanted some automation on pages without breaking the C code 👌
Thanks so much for helping me by answering! :)
Take a look here https://youtu.be/rKXFgWP-2xQ
No, it is on in any os by default
This is a dev only tool, in production everybody should cache those. I don't think dotenv needs any more improvement.
Thanks for the help have a great day!
 looks good, but maybe it is just me to feel the library is bit over engineered meaning that it could have been simplified
I put it on another tab to watch later today. Thanks for the recommendation 
basically it is rather a stripped down and powerless instead of being improvement on that. the motivation is env parsing is not rocket science and should be simplest possible: read from `.env` and put it into where the user wants (not every globals by default).
New favorite condition.
The S in IoT stands for security.
Thanks for your comment. But for your better knowledge it is not spam, I regularly post about programming knowledge, php, jquery, css etc on this subreddit . So please do not called it spam. I am always loyal with my users. 
You seem to be re creating a bunch of already long standing stable libraries. JWT, environment parsing Is there any purpose behind it or just learning?
ELI5 what do you mean “cache those”?
It seems like the reason the ".env" file format was created is that it's supposed to replicate (a subset of) the syntax used to set variables through the shell, thus making it portable across many different applications, including shell scripts, Web-server config files, systemd unit files, etc. This portability is the explicitly stated goal of Symfony's Dotenv component, and (judging by the documentation) an implicit goal of the Ruby dotenv gem, the Dotenv thing that Laravel uses, etc. With that in mind, I guess I'm confused as to why there are so many implementations of .env loaders, including this one, that *don't* actually adhere to the shell syntax for setting variables. For example, the only PHP-based implementation of the three I've mentioned in which you can define a variable containing a backtick (`` ` ``) that is portable to other applications is Symfony's, and only if you use single quotes (which the other two implementations don't properly support at all). If you want to use INI syntax to define your environment variables, why don't you just use an INI file? Why go out of your way to write a parser for a format that offers nothing over INI/JSON/YAML/TOML but the *illusion* of portability to the shell? I guess this is more of a general commentary on the muddy concept of .env files than something specific to this particular project, but it's the first thing I thought to check when I saw it.
What does Laravel bring with it, except for a lot of magic in critical parts of code, what Symfony doesn't have?
just memcache it..
Please stop advertising an unsecure and outdated CMS to people.
Instead of opening and parsing env every time you need a value, run a command to cache the file into a Php array which gets included in your app bootstrap 
PHP is exactly want you want to use for this. Exactly these things are what PHP is the easiest tool for. Performance-wise, surely you can cache the included pages. But it will also be pretty performant if you don't and just build the navigation each time, from scratch. You can also take a look at template engines like [Twig](https://twig.symfony.com/) or [Phug](https://phug-lang.com), they are another level of abstraction on top of PHP/HTML (commonly known as PHTML) and they can ease up development of smaller websites greatly, without having to rely on databases and/or CMS.
Why don't you just implement a method in that class for that specific operation? That would be a lot more readable, stable and testable. I don't think this would be a useful feature. Don't think about how people will use it for good, think about how people will misuse it. And they will misuse it. Especially in your case (the Collection), you're probably better off using something like `-&gt;each`, which exists on mose of these collection classes.
I think this will horribly interfere with \`\_\_get\` or at least cause the engine to analyze the incoming type of the first argument and then decide whether it will invoke \`\_\_get\` or perhaps another magic method like \`\_\_tap\` (loaned from the Laravel examples in this thread). However, one can do something fairly similar with the language already: [https://3v4l.org/4i4gJ](https://3v4l.org/4i4gJ) 
Great,, Then use Laravel
I only use .env on my local environment, which is loaded into environment variables by docker. I think once more developers get familiar with docker, we will not even need dotenv loaders anymore.
You don't need a framework for something that is done with 30 lines of codes. Please just stop.
And the fastest-loading format for configuration in PHP will always be plain PHP source code.
In your point of view, WordPress is an unsecure cms. Ok, great. But dear friend, Morethan 60% websites are still running on the same cms.... pardon me, i accidentally commented on your funny post.
People using it doesn't make it less unsecure... Not even the WordPress devs know how to make it secure, how could the WordPress users know? If you follow the common programming subs you'll see like 2-3 new WordPress security leaks a week, you don't have that with other CMS. If you'd know PHP you'd know that the codebase of WordPress is prone to side-effects and security leaks.
Because if I wanted to use an anon function for any class it'd require writing a method for that class
the map and filter methods are just wrappers for array\_\* functions, I was just trying to get across the \`(function(){})()\` for any class
Or one: public function chain(callable $callback): self { $callback($this); return $this; //Alternatively return $callback($this), depending on use-case } and then $collection -&gt;map(...) -&gt;chain(function($collection) { //... do your stuff here }) -&gt;filter(...); Problem solved, feature implemented.
i have been using PHP since its version 3. I used drupal before moving to Wordpress. Now a hard fan of LARAVEL. Nobody (professionals) is using PHP alone, who will do DRY coding... when powerful frameworks are available....so funny. i never faced issues from my wordpress websites (already have more than 200 sites ). fine tune the hosting server and wordpress installation, everything will be fine. 
Like I said, Laravel saves you a lot of time because it comes with a lot of code that you don't have to write from scratch yourself. The point of frameworks is literally to save you time, and Laravel does that. 
Thanks for the very clear and polite answer. It is appriciated and actually helpful. My intention was to learn something about this open source popular language, and this does that. 
First off, PHP !== shell. Why in world do you need backtick, eval and nesting support to simply store a secret credential of payment gateway or database access or some APIs? It is about storing configuration in something that is isolated from your shared codebase. The goal is not to replicate all terse ways that shell env would allow and definitely not to mimic your gem or working mechanism of shell. Ini simply works here. Btw if you didn't know plain old php arrays also work. The difference is that is not synced with `getenv()`
I'll just ignore your personal attacks. The "structure of reddit" you're talking of is simply Reddit telling you that WordPress is bad and unsecure, without requiring them to put it into a separate comment. They just downvote it. You shouldn't care about karma too much. I can assure you, I'm not a newbie, I've been working with WordPress for a long time and I've been working with Laravel intensively. Laravel is fine for smaller sites, but the OP of this thread wants something that can be done with very few lines of **plain** PHP. WordPress would just leave him with a monster full of security holes. It's nice that you didn't get hacked yet with your 200 sites, maybe no one targeted you specifically, maybe the security leaks that are there haven't been found yet. You never know if it will happen one day. But what I can say for sure is that you can look at the wordpress source code (like the last big one, [here](https://www.imperva.com/blog/wp-content/uploads/2018/07/WP1.png)) to know that it's insecure _by default_. You can insult me for this now, I only want to correct you here. Sorry if it offended you.
You are right. For smaller applications Laravel is good, quick, easy and well supported. But from a certain size on, I usually rather go with Symfony. If Laravel works for you, that's good :)
Laravel uses the same technique where it will cache your env stuff by [caching the config files](https://laravel.com/docs/5.6/configuration#configuration-caching) 
Baidu, Yahoo, Wordpress, Flickr, Tumblr
You can use a crontab to execute a php file for create an index of your files, it's can run every week/month etc
PHPUnit, Phing, Deployer, Mockery, Composer, PHP Mess Detector, PHP Coding Standards, PHPMyAdmin
Well it works for larger applications too, both Laravel and Symfony can honestly work for any size application: https://laraveldaily.com/can-laravel-used-big-enterprise-apps-summary-laravel-podcast/
Wonderful. Laraval is for smalll website...... wow, what a brillient guy you are... i appreciate you for developing all your websites in PHP from scratech. Lol.. dear friend, firs learn how to secure hosting server (ohh no way.. you may be using thirdparty shared hosting lol). Search for the topic "deep hosting", there you can learn a lot. Just forget about hacking, because people are easily hacking NASA's server now these days. Now i realized that you are a hard core DEVELOPER. PHP has a lot of limitations and can't used for heavy duty applications . You should prefer PYTHON, that perfectly suits you because that is invented for high end PEOPLE like you. Sorry , I am not interested in SCRATCH development and funny prograamming. Accidentally i commented on your post, sorry, i never thought that you are such a brillient guy. Please no more commenting.... Please.... At least try to learn the Features and limitations of PHP. And also learn basic coding. So, you will never get a chance to get comments like this. if it hurts, sorry.. 
Codeigniter
You can do it in multiple ways. For example, Laravel uses its Cache library to store them in the configured server (file, db, redis, etc). You run a command (php artisan config:cache) to cache them on every deploy, to make sure you pick up the new ones. Another option is to set them directly through the vhost config of your domain, with SetEnv with apache or fastcgi_param for nginx + PHP FPM. Again, you set them on every deploy.
Oh man, sorry for taking your time. I don't care if you take my advice serious or not, good luck with your projects!
The only one of these I know to be written in PHP is Wordpress. Got a source on the other ones? I always thought Tumblr was a Rails app.
Erm, Facebook used PHP a long time ago, it hasn't really used it for years.
Really, i consider your post as a kindergarten kid who learn alphabet(s). That means a scrap. Relax yourself and try to learn alphabet(s). Toddler's fun game......lol Take care...
No, you'd have to implement that method on the class, which means if you want to use 'chain' you're going to either have to create a trait, or put it in every class, which defeats the purpose
Some things in Facebook still runs in PHP. For example their sharer.php URL. Pretty common to see it in activity. When they disable this service, a lot of websites will have broken links.
Dude. You're the one who has his posts riddled with spelling mistakes. Give it up.
btw making it support referencing another var turned out to be fairly simple and as such the library has been updated
Ohh Ghost, Another invention, Spelling mistakes..... ohh god. Get rid of.......
Fun Fact: For some time, Tumblr was basically a single index.php file. With a lot of code.
Desperate? 
If you want to keep going with the simple scripts approach [inotify-tools] or similar makes it easy to watch for file changes and auto-rebuild on changes to any files. Although not strictly necessary it is nice to keep your main site as static as possible for reasons of performance and security where possible. If you want to save some money you could also look at GitHub pages with a git-hook to run the static site generation for you on commit.
Slack, Vimeo, Nordstrom, Huffington Post, Engadget, TechCrunch, SalesForce, eBay, Etsy, Eventbrite, Adobe, 23andMe, Twilio, Intuit, Udemy, Rakuten These companies all have apps for iOS/Android/Apple TV/etc apps that have backends powered by PHP.
&gt; Nobody (professionals) is using PHP alone Simply not true. Be careful who you call a newbie, cause you radiate just that.
Your IDE should autocomplete variable names anyway. If you have to type "$" and hate it, you have set up your IDE incorrectly.
Slack - Is a really interesting one to read about. Adminer - is the replacement for phpmyadmin-lite. It compiles down the a single php file for easy of install and is open-source its a good one to check out i think.
Sorry to see downvotes on this.. although I use Laravel /Symfony for most things I think CI is a great simple framework and community.
Codeigniter is not a "powerful PHP application" it's a framework
I think the real question is: How often do you think your page is going to get looked at? If it's less than a few requests per second, you can easily get away without caching and all that. If it's more you should look into caching, be it something professional (like memcache or Redis), or something self-made (like a database which gets updated using a CRON).
I recently started using Flight PHP, which is a simple but very powerful framework. [http://flightphp.com/](http://flightphp.com/)
I think the sharer url is going to retain the php extension even if server side lang for that url isn't php. For the same reason you mention. 
[MailChimp](https://blog.mailchimp.com/ewww-you-use-php/), DailyMotion, Etsy, [Slack](https://slack.engineering/taking-php-seriously-cf7a60065329) https://www.yukei.net/2016/11/big-companies-using-php/
For whoever was working on it, that is not a fun fact.
Y'all, OP asked about applications not websites. Why is everybody listing websites and web frameworks.
Youp\*\*n and its "sister sites" run on a PHP backend. A great talk here " Building a Website To Scale - Target: 200 Million page views per day and beyond! " (work safe) [https://www.youtube.com/watch?v=RlkCdM\_f3p4](https://www.youtube.com/watch?v=RlkCdM_f3p4) (posted here as OP asked about apps so thought it was a good idea to add to this thread of sites)
Codementor.io for immediate help
Don't worry about it. If it's important to the OP, they can filter out the ones they're not interested in. In any case, on the web, many websites are also web applications. 
I love using PHP for scripting so here are my projects: - [PHP bitcoin trading bot](https://github.com/HaschekSolutions/cryptotrader) - [Checking security of proxy servers](https://github.com/chrisiaut/proxycheck_script) - [PHP script that in combination with a reed switch and a Raspberry Pi can notify you if your door was opened](https://github.com/chrisiaut/raspberry_doorbot) - [RADIUS parser for Windows Servers](https://github.com/chrisiaut/influxdb_radius_analyzer)
I love you both
I've wondered about this question for a while. I'm a PHP fan, but not at all troubled if Facebook have moved away from it. However, a bit of searching indicates that they're still using Hack, their modified/hacked version of PHP: * https://www.quora.com/Did-Facebook-move-away-totally-from-PHP * https://www.quora.com/Why-hasn-t-Facebook-migrated-away-from-PHP It'd certainly be interesting to get a more recent snapshot (it's not entirely clear to me when those Quora questions were asked). FWIW, FB Engineering have not [blogged about PHP](https://code.fb.com/tag/php/) since 2015. 
I've noticed they have photo.php - did they really just have a vanilla php file or was it just a configured route?
Not really :)
Powerful like in? I know there is a clone of Google drive out there made with php, would that be considered powerful?
Any concrete examples? Cause in the same way I can say that any company in the world who worked with some marketing agencies that are building their promo pages on WordPress have their backends powered by PHP.
Rumor has it that guy doesn’t touch computers anymore. 
Great talk thanks for video
Gonna list only what I used and familiar with. MediaWiki - a wiki engine that powers Wikipedia. Phabricator - a ci/cd ecosystem first developed at Facebook but is a separate project now And like people here said before - phpunit and composer.without those two there wouldn't be PHP as we know it now.
I love adminer! if you get it just in english and just for mysql its fricking tiny!
DokuWiki 
Why do you keep insulting me? Where did I insult you? You should really calm down and carefully read what I wrote. I never meant to attack you, you just got really offended for no reason. I know what I can do and what I can't, stop assuming anything about my skills.
Why would a trait defeat its purpose? Isn't that what traits are for? In the way I implemented this above, you could use it in any class, not only collections. I am still not bought for this feature. It's one more thing new users look at asking themself "what does this do" and the alternative, a user-land implementation, is implemented really quickly and easily.
They call these apps "wrappers" because you're just taking the site and wrapping it into another language to allow it to be displayed and possibly use separate cookies or store settings.
Sorry, I didn't mean a trait would defeat it's purpose, I meant defining it in every class as your function would have to be. Regarding the last part, should we really cater to those new users because it's harder for them, or to use long-time developers where it would actually make a difference
Obviously we should make a language as welcoming as possible so that as many people as possible pick it up. Also, more people in the world should learn programming. Constructs like these only brings in needless confusion.
Maybe,, but then when you're catering for new programmers you have to cut short some features, hence why return types etc are a relatively newish thing in PHP
Yikes! (Any sources/more info on this?)
Kanboard (www.kanboard.net) is written in PHP. 
And kind of a crappy one at that, as it was designed for PHP4. Even if it’s performant. Even if some aspects of it have been updated for newer PHP versions. It doesn’t use modern best practices.
PHP will absolutely work for this, and is a great way to handle it. Directory reads are fast (in a linux environment at least) unless you are talking about a directory with thousands of files in it. I have a localhost based data processing app that relies heavily on file reads and writes both on the local disk and remotely, and it's very fast. As someone else mentioned you can use a separate function to read the directory into an array and prep that to feed your nav if you are dealing with a very large directory. I have a portable output class I use on several sites which basically handles all output that seldom or never changes from the opening html tag to the closing html tag, and just feed my content into the flow where it's appropriate. Most people use some sort of template system for this.
HelloSign uses PHP for their electronic signing product: https://www.hellosign.com/
because it's crap, the only reason things are that way is that PHP creator didn't know how to write a proper parser.
You can make it opt-in, just like strict typing. Yes, yet another pragma but that's the least of PHP problem.
I still see home.php pretty frequently
PRs welcomed.
try [/rphphelp](https://reddit.com/r/PHPhelp/) You wont get much help here with stuff like that. 
if it's your own machine just give it the old turn it off and back on with a reinstall. If it's a live server check your .bash_history?
Will do, thanks for the advice!
Also, Linux is good at caching files.
Yeah, it's on my own Macbook pro. Deleted XAMPP and rebooted the computer, then installed XAMPP again. Still get this message: https://i.imgur.com/mQBwcYz.png
This is the best answer. 
why do we need even more frameworks when we already have plenty of them from micro to fullstack? 
Why?
What do you mean app not website?aren't all PHP apps somehow for web except console ones? Sylius, Magento, Composer (console) are few examples. I think MailChimp is also PHP based.
Just why WordPress? 
Since when coding standard is app? Did you mean CS fixer? 
I am an idiot. I meant [Code Sniffer](https://github.com/squizlabs/PHP_CodeSniffer). Can I claim having been bombarded by my kids and call a mulligan? :-)
not something to brag
Is this the open source drop in replacement for SAP we've all been looking for?!
The old Ask Yahoo app thing they had (Not sure if it is still around) was built in Symfony.
The Australian Travel company Flight Centre uses PHP pretty heavily on their web booking engines for flights (Symfony) and hotels (Laravel API)
https://gist.github.com/zachinglis/29c5c5970d1f3313abd1 https://blog.sucuri.net/2011/03/tumblr-mistake-or-security-issue.html
I would have thought slack was pretty concrete. Its an actual application, massively scaled and is mostly php.
this is what is wrong with Reddit: the users like you, always free for aspersion and cussing. go read reddiquette! 
just read your first reply to my comment, so you can easily understand who started teasing.. i am always calm and never intended to create a war. i am not affiliated with wordpress/php/laravel etc.......communities to get a penny by promoting them. everybody has their own choice to choose technologies for their taste. you can choose your own, but, beware, never ever spread false statements - "never try to comment on things that you are at least not aware ". No one can claim their Technologies are 100% SECURE,- nobody. AVOID SPREADING FALSE STATEMENTS - if you are not aware just stay calm and quite. i only replied your piece of poo "Please stop advertising an unsecure and outdated CMS to people.". I cant be silent when hearing such stupidity for a KARMA. I should respond when a newbie like you fires a comment like this, because he is not aware that what he is telling. Its my humble duty to try to make him understand and clear. that is the only thing i did. I got two comments from other guys, i also have to reply them and always like one to one. my last comment...... no more chit chats 
Hi, i used this statement - "Nobody (professionals) is using PHP alone", - read the comment thread again, so you can understand. Be careful and make sure that you read all the comment threads which i posted, before commenting. You don't worry about to whom I called a newbie or a Novice. In the original post i commented with a newbie not with you, so stay away.
The CodeIgniter MVC supports CLI-only app-building. This means apps that are nothing wholly or in part not web-facing. I've not surveyed other MVC frameworks for this, but I'd be surprised if this is unique to CI.
Dang, why are all the passwords, keys, and other environmental information right in the code. Horrible.
what the fuck is ERP for by the way?
But is it enterprise-ready?
Out of curiosity did you already have a trading background regarding the trading bot? I was working on this myself but got stock with the whole "chart reading" thing like understanding RSI/Bolinger Bands/etc... I was using [Block.io](https://Block.io) for my wallet and shape shift. I see your'e using GDAX I wasn't actually doing US to Crypto transition. It's pretty awesome to work with real money and code haha. And the GDAX socket is cool to connect to but again I don't know what to do with it myself because I don't know how to trade. I think the challenge of turning that visual chart concept into code is a nice challenge though.
Same as with any laungage. Connection strings, variables, arrays, case and if, loops. Concepts really come over nicely once you learn languages requirements. 
PHP is my primary back end language right now with Python for hardware(Raspberry Pi). I wrote a Yahoo Finance scraper that scrapes some stocks and then creates an excel file/then attaches it in an email through MailGun. This used PHPExcel and HTMLSimpleDOM. I use static storage encryption on some websites using PHP Defuse I've also written my own scheduled emails like Boomerang with CRON/LAMP. Did mass photo resizing, iterating over a directory, checking photo dimensions. Here you could use a tool called GD something, I only used PHP to iterate over the directory/check image dimensions.
From the issues I see people are actually using it? 😂
ok
Thanks for your input! :)
The bots currently available in the repo are never looking at the past but just on the current values. No chart reading involved. The first bot (uptrend surfer) just buys a sum you can specify on startup and loops until the price has risen to a percentage and then sells and re-buys. This way on a steady uptrend you make money. The second bot (wave rider) is a lot like the first but after selling the gains it waits for the price to drop to a certain percentage (you have to specify). So the bot makes money from ups and downs. Currently working on a third one that uses a simple neural network in PHP ([FANN](http://php.net/manual/en/book.fann.php)) that learns from the values of the past and tries to predict the next minute
Every shop that has more than 2 daily sales and report tax.
&gt; The bots currently available in the repo are never looking at the past but just on the current values. No chart reading involved. Interesting Do you know what levels you have to buy at(is it blocks?) where the fees are not too bad? Whoa... neural network in PHP huh... I mean... from not reading/arm chair... if they can port Tensor flow or trained models to JS why not... Still good luck on it. I don't have any bad opinions or anything, sounds cool. I think for me Doge is what I'd mess around with since it's so cheap.
What have you written? I'd go with something working and how you applied it. Have you written any WordPress plugins?
Best quick rest api with built in auth framework y'all like?
That's like saying: "Stop evolving once everything is OK."
Would you like to see PHP evolve into a statically typed language or not? Personally I think the trend with type hinting might evolve into this.
Not really specifically rest auth framework and not built-in. But Slim framework really reduce rest api development drastically
yes
Well, the reasoning behind this is to look how your code looks like. If you using design patterns, if you follor coding guidelines like PSR-2, if you know common mistakes and if you prevent them with common strategies etc. Will you use PHP5.x or 7.x features. Self code or Framework. Do you test your code. Do you take care of security etc. One of my mates uses his self made library and/or template enginge, which is hosted on Github, and shows how much work he did just in his free time. He did his best to provide unit tests, clean code with design patterns and keep working to make it better and better. So if you have free time and want to make good use of it, then try to code a nice lib that will help a lot of people and doesn't have 100 alternatives (except every single one is bad) and do something better. One project I really loved is the Symfony eCommerce. There are several really bad eCommerce plattforms out there and then there is one that is also very big and dominating. If the Symfony one gets successful in advertisement, then it could successfuly replace it.
Can you please explain what "statically typed language" means and why PHP is not like that atm? 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Since youre familar with js. You can use handlebars js for creating reusuable components
Hey, itsmoosey, just a quick heads-up: **familar** is actually spelled **familiar**. You can remember it by **ends with -iar**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
lol, what a self-righteous cunt
Using this results in all tests failing for me. Getting 'duplicate entry for key PRIMARY' on everything.
fann is not a convolutional neural network and it has been around for ages so it's pretty well known. I think everything from 300$+ should work
https://api-platform.com/
It's been around since 2013 and is actually a great lightweight framework that just gives you the basics that you need. 
Hmm. This is a PHP reddit... The only thing we can't see is the PHP code ;-)
Everything looks good but the top right "Welcome to the ACW Official Website", why is it at the top right? should be top left, which will off-put the main logo, possibly center it. Also the nav drop-down bars don't unfold upon mouse hover, fix that.
Hmnn. I'm sure of the php codes. Just tell me about the user experience for the English page. If you're a korean. Put in some feeback for that too.
- Not really responsive - the colors doesn't have enough contrast (yellow on grey) - OpenGraph &amp; Twitter cards ? - Generate all the favicons : https://realfavicongenerator.net - The php ? I'm not a wizard 
The "welcome to the acw official website" and the logos are on separate divs i believe. I'm on mobile, would have confirmed with page source. I thought clicking them was better but I'll make it on-hover. I tried to use carousel with php to make the main page pics dynamic but for the life of me. It just wasn't doing what i expected. I'll work on it more. Thanks boss
&gt;carousel with php That's not what PHP is for, use Javascript or possibly CSS.
* Could use some max-witdh. On an ultra-wide it doesn't really look great (The menu is incredibly wide for example). * The yellow text on a white background makes it hard to read. I had to highlight the address on the bottom of the page to read it properly. * The English could use a bit of proof-reading. It's not bad, but there's some things here or there that could be made better * The button to swap to Korean is written in Hangul, wouldn't the button to go back to English be written in English?
I've seen several examples of it in stackoverflow. Since I'm still not an expert of php, i can't argue on what php is meant for but i know with javascript and css, i may always need to recode the page when we need to change the pictures. With php, its a matter of updating the pictures in the database and let the code on run.
Read my lips: This is a PHP reddit. if you do not need a check of the php code, then you do not need to post here. Is it clear for you?
Ok, thanks, I was definitely going to write something custom, but given yours, and zorndyuke's reply, I'm going to just send over some Magento plugin, I think. Shame, as I had hoped to get some interesting ideas to make today :) Thanks for your input.
Hmmn, and i tried to make sure the responsiveness of the page is okay. What aspect or elements didn't respond to your device specifications? "Open graph and Twitter cards?" Can you explain this? I'm clueless.
Its a new organization actually, once more pictures are available. I'll add them to the pages to make them more endearing to users.
the language switch not usable as an english reader
Alright mr. Copy that.
Hello, there. My name's Michael and I built a functional programming package called [bingo-functional](https://github.com/ace411/bingo-functional). I welcome all feedback. 
I'll change the buttons and work on the coloring of the page. The yellow color especially seems to displease most of the critics.
I'll change that. Thank you
&gt; Be nice! This is expected from you as well. but you seems to prefer to be selfish and ignore the rules. Well, we have mods to deal with that. 
It's not php powered, it does not use PHP, it uses a language "inspired by php"
Hmnnn, okay
You cannot 'carousel' the pictures with only PHP, unless you want to use some sort of stream, which is retarded and resource heavy. I'd love to see this stackoverflow post, if you have it.
https://stackoverflow.com/questions/26432061/bootstrap-carousel-with-php 
You do realize Bootstrap uses Javascript, right?
You're menu is ugly on mobile. If you use [bootstrap that's what it's should look like] (https://4.bp.blogspot.com/-zHqfPYnYytA/WlbmZdHcQkI/AAAAAAAABJU/bEuNblO0fBQvii_t1VWJOHLFlsP9MeMfQCLcBGAs/s1600/bootstrap-menu-tutorial-hindi.png) Items under each others For the rest, search on google.
Ofcourse i do. But with bootstrap, i do not need to rewrite all the long stuffs and it makes the whole thing dynamic.
No, you do not. Quite frankly I'm labeling you as an idiot as you just said pure PHP could make a carousel and provided an example using Javascript.
lol, another toddler
Optionally statically typed. That'd be perfect. Like it is right now, but with the addition of generics, property types (which are coming) and union types.
Wait a minute. What are you on about? Whats with the display of unwarranted anger? All of a sudden I'm an idiot because you can't get yourself to understand me? Get off your high pedestal. 1. Where did i say pure php could make a carousel? " I tried to use carousel with php" The above quote was what i said. I meant with the bootstrap carousel i can include php codes to make the carousel dynamic. I never saw said what you wrongly accused me of. 2. The first thing a programmer who decides to use bootstrap will do is to include the javascript and css links at the head section of the webpage before he starts anything, so how wouldn't i know
Dude, I am saying this again, I am not a newbie, I've been programming in PHP for about 12 years, most probably longer than many people here, maybe longer than you, stop calling me a newbie, it's annoying when people simply assume bullshit. You can ask me anything, right here, right now, regarding PHP and you'll get a correct answer, carefully explained. **Stop assuming bullshit**. **WordPress is insecure, WordPress' codebase is outdated and doesn't follow any modern standards for security and stability**. This is a **fact**. You can ask anyone that even remotely knows PHP well and took a look at the WordPress code. You're bringing every single customer you sell a WordPress into **more potential danger** than you'd have with most other, modern CMS out there, e.g. BoltCMS or October. More than that, and that is the most important thing here, for an application the OP wants, **you neither need a CMS, nor a framework, you need like 30 lines of basic PHP**. If you can't even grasp this single, basic fact, please, **don't** go and call me a PHP newbie and tell me you've been programming PHP since version 3. **You sound like you're stuck at version 3**. I didn't give you a single downvote over this whole discussion, the people that downvote you are people that are telling you, **I am right, you are wrong*. It's about time you consider to stop insulting me and taking my advice serious or stop talking and continue to deploy unsafe code to your customers.
Owncloud.
 Learn how to build *PHP*\-based web applications from online video courses that help you learn[ PHP training courses](http://www.probuztech.com/adv-php-training.aspx) inside and out. Find out how to use *PHP* with MySQL .
I did read the entire comment thread. This is the reason for my statement. 
programmers decide how to get it done the best efficient way at the moment. if laravel is not is the case, then they do it without 
Because you are posting a loaded, one-sided question, that is designed to anyone not using Laravel to kind'a feel bad? Laravel is not the best framework out there, it's just one of the options. In some cases, it's even a bad choice. And no, if we are not using Laravel, does not mean we are writing in pure PHP. Also, by your definition, anyone not writing in Laravel is writing in pure PHP :D At this point, your question becomes ridiculous, stupid and just showing your complete ignorance.
I don't really know why you presume that someone should be using Laravel instead of "pure PHP", but they could be using any other random framework as well. Sometimes you need to get shit done and your boss says it's due yesterday, so you tell him "_Alright, but it'll be crap and it'll be crap to maintain_" and he says "_Oki dokey_". That's why. Sometimes.
Albeit reluctantly, I must admit he must be right in that. "carousel with php" could be read either as "carousel in php" and "carousel with help from php" and it seems he meant the latter. 
I also use post-its instead of nailing paper to the wall using a hammer. Sometimes pure PHP just feel more straightforward.
&gt;1. Where did i say pure php could make a carousel? " I tried to use carousel with php" &gt;I tried to use carousel with php to make the main page pics dynamic but for the life of me. It just wasn't doing what i expected. 
nice troll, but Laravel won't run on PHP3, you can safely go on with PHPLIB.
Good. This is easy comprehension. So with what you just quoted, what does it mean? I tried to use carousel with php to make the page pics dynamic is DIFFERENT from i tried to use php to make a carousel that displays the pictures in a dynamic way. The former means embedding php codes inside bootstrap carousel while the former means to create a carousel with php from scratch which is an insane idea to anyone. My original reply was the former. You probably had a wrong thought you arrived at and held onto that despite reading a different stuff. You should have known what i meant when i posted the stackoverflow link but your mind was made up by then. This is a waste of time. All i wanted was people's opinion regarding a project but the thread is derailed all thanks to you. 
Nice! Any chance you could add tests? Guzzle provides a mock handler, that can simulate api responses. :)
Yes, i want to add a little bit more of documentation and tests.
Nice start. 1) You have coded the happy-path only. Any non-200 response and your wrapper completely breaks. 2) Add optional logging. You can add logging through Guzzle or just add a PSR-3 logger. 3) Most importantly, add unit tests. Without unit tests, most developers won't even touch your library.
I can agree with everything you say. Thanks for feedback
take a look at ratched... event driven websocket server in php
A while back I "packaged" the WordPress integration testing core framework/libraries that WordPress uses to run integration and unit tests for itself. You can use the package to run integration tests for WordPress plugins and themes. Have not had a chance to use it too much as I've been off WP projects for the most part recently. [https://github.com/rask/wp-test-framework](https://github.com/rask/wp-test-framework)
Man, I remember that "everything was in place as it should be" feeling after migrating from vanilla PHP to Symfony. I felt like I could do everything at that time. I love both Symfony and Laravel and I respect all these developers and contributors.
Sometimes raw PHP is the saner choice. Laravel is nice and all but for a simple microsite/backend it can be quite overkill. I often use Slim when I need a compromise between a big framework/CMS/CMF and raw PHP. For non-web development projects, things like Symfony Console/Process, Amphp/ReactPHP, and other libs are great.
Isn't Laravel written in PHP? I mean, the framework, despite its litany of utilities, is still built atop one of the most popular scripting languages on the planet. Besides, it is, phenomenologically more fulfilling to write pure PHP code unencumbered by the configurations and design intricacies of language frameworks. You should honestly try it.
Hack, HipHop, HHVM, etc aren't PHP, that is the point, people always give Facebook as an example of big site that uses PHP, but the reality is they had to build their own version of PHP, because PHP wasn't really up to the job. Then with the exception of early on in Facebook's life it has always been dishonest to claim that Facebook was powered by any one language, most of the heavy lifting is done with C++, Java or when it comes to messaging they use Erlang. Even much of the stuff that was once down to PHP has had large parts of it moved to the frontend with React. Facebook is a terrible example of a "PHP site" showing massive scale with PHP, it actually shows the opposite.
From his writing style, I think i can deduce he's not a native speaker. Therefor, I think he might just have used Laravel as an example, and was only missing the word "like" between "framework" and "Laravel".
Hey, Deadlybeef, just a quick heads-up: **therefor** is actually spelled **therefore**. You can remember it by **ends with -fore**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Omitting the `$` is possible yes. It was introduced to make parsing and lexing the language simpler as far as I know (similar to how many languages denote variables using `var`). A `$` identifier for the sake of a simpler interpreter parser implementation is an OK choice in my eyes.
you bots preying on typos are annoying as fuck on a side note, your remembering suggestions are written by an imbecile
I hate the framework vs raw question. All a framework is, in any language is an application scaffold in the raw language. Sure there might be some stub files for HTML and such, but it IS primarily just a QuickStart of an application in the “raw” language. Look at any framework in Github, pay particular attention to the technologies used graph. The more appropriate question should be framework vs “frameworkless”.
Never use yellow predominantly in a website. It breaks contrast, and in the (highly esoteric) field of color theory, is the one you don't want associated with you. Usually stay clear of it. Nowadays, I never use yellow anywhere in my designs. It's a "visual code smell" to me
Hey, annoying spelling bot. I'm not a native speaker either! Thanks for pointing out my spelling, but kindly f\*ck off :-)
How much time per week are your developers/sysadmins allocated to setting up, debugging, migrating, and upgrading microservice architecture, servers, hardware, and networking?
Generics, JIT, and async come to mind.
Because sometimes you don't need to use an industrial pile driver to crack a nut :)
uMatrix is blocking branch.io for me What is branch.io
VSCode. I'm not fond of the sluggishness of PHPStorm, although I think as a package deal it looks amazing.
https://en.wikipedia.org/wiki/Branch_Metrics
**Branch Metrics** Branch Metrics is a deep linking and business analytics platform offering developer tools for large and independent mobile application companies. Its toolset contains web, iOS, and Android SDKs which generate smart deep links that pass data through application install to facilitate and track conversions and user engagement through targeted communications. Mobile application developers can use these tools in conjunction with Branch's drop-in SDK to personalize the install experience for each new user referred or acquired through digital advertising. The Branch Metrics platform dashboard tracks and displays such data as user behavior, K-factor, campaign performance, and LTVs. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Hmmm why American and some other country like think that they’re the only one who exist in this planet
We learn everyday. I'll keep that in mind of surely. Thank you. 
He could have been nicer probably. The problem is that he is *kind of* correct. This forum has many people who submit posts with the intention of being disruptive and condescending. It’s fine that you’re English isn’t fluent, but you should expect that native speakers will find it difficult to understand. If you’re idea is presented in a hostile way, even accidentally, you will receive hostile replies.
I'm from a small country which doesn't have English as native language either, I read it in exactly the same fashion.
Why do you speak English perfectly fine in your other comments but not here?
Can you add some tests so I don't have to download into a real project?
Yes, that is something i wanted to work on
AHHHHHHH, IT BURNS!
I'm not native :) It's my 3rd language 
any source for property types?
Make use of Grammarly plug in - they will never know what hit them :) It's actually quite awesome (started using it last week due to the need to write excessively)
The fact that I write semi-good English does not mean I'm a native speaker. Also, the closest English speaking country to me is at least 2500 km away. USA is on the other side of the globe. What's the lesson here? Don't assume where people are from by their writing style. And although this is written from a mobile device, in a browser I use Grammarly plugin :P
[https://github.com/Symftony/Xpression](https://github.com/Symftony/Xpression) This library is currently under developpment. It's a simple implementation of specification pattern that can be use to filter data too. The syntax is human friendly and can be used to filter an API endpoint with simple or complex filtering rules. This library provide some bridge (doctrine ORM, doctrine ODM, doctrine common). There is demo website too [http://symftony-xpression.herokuapp.com/](http://symftony-xpression.herokuapp.com/). Hope you enjoy. Ps: dont hesitate to send some feedback/issue and or contribute
Depends on the emoji set. Have a look at the different copyrights.
(Most) Emoji are a part of Unicode, and asking if you can use them, is like asking if you can use the letter 'a' on your website, or a comma, or whatever... The only reason I wrote 'Most' at the top is because the definition of an emoji is pretty loose. A company could take their logo, copyright it and call it an emoji (in that case you would not be able to use it), but that wouldn't really be an emoji in any practical sense, so you're fine with using emoji...
I agree that his post sounds inflammatory. I think it’s also likely that the phrasing makes it seem more so than it was meant to be. For example: “Those if you that use vanilla PHP instead of frameworks, like Laravel: what made you decide to go that route?”. I choose to believe that he was reaching for this rather than trying instigate.
I'm for everyone using whatever tools they prefer, but comment annotations are the worst mainstream thing I've ever seen in PHP.
Yes, it’s fine - if you’re using the Unicode code points. If you’re literally screenshotting emoji and using those specific images to display them with `&lt;img&gt;` tags you could actually get in trouble (although in practice, you won’t). But that would be stupid for a ton of other reasons too. 
Why, annotations (or metadata for classes, for that matter) are a really common thing and right now we lack real annotations in PHP. The dockblock can be read by reflection and freely be parsed, also, it looks a lot like Java annotations, which are known to many developers.
That's not true, most of these companies build API's in PHP which their apps hit to power their native mobile apps.
1. Slack's mac OS/ios/android hits PHP API. 2. Engadget website and API powered by a custom CMS in PHP. 3. Vimeo's website and API are on a custom PHP framework. 4. TechCrunch's iOS/Android apps hit an API powered by WordPress.
None, developers do not touch AWS other than any monitoring they may choose to do for research, infrastructure is setup in terraform so there is no “setting up”, you run a CLI command to deploy your app the ECS and if you need anything specific (ElastiCache, Dynamo, S3, etc) you pull in the relative terraform module. There is no debugging, or migrating or upgrading
Yes, like zlib, far, ogg stream wrappers
First and foremost, they're comments. It's one thing for them to be used for additional IDE hinting, but having comments become functional code that affects runtime is fundamentally wrong. Suddenly stripping comments breaks code, and basically it's a meta-language inside the language for which there's no native PHP debugging, and as such is completely dependent on the IDE and plugins. I think that's enough on its own, but beyond that it's tight coupling the configuration the class. For routes it's adding the responsibility of configuring the routes to the controller which is a separate concern. It's making it so subclasses will break the Liskov substitution principal based on a comment line. The annotation is required to substitute so it's impossible to create a correct interface. We already have PHP doc comments that aren't functional and the syntax is basically the same. I do think it's a more reasonable discussion if annotations were natively added to PHP, but as comments they're a ridiculous hack from my perspective.
Yes you can, also remember to set your tables to utf8mb4 if you use MySQL.
Well. In the examples you cite, it seems like a good idea. Not that sure about RAR, but "present archives as a part of the file system" is a very common abstraction. 
That article is terrible. Their examples are aren't what people are asking for. Laracasts isn't a big enterprise app. It's a high traffic app, but at most has a handful of tables and probably a simple backend. The Fallout 4 example is bad too, it's just a high traffic app with very little backend. We are talking about full infrastructures and massive backends with multiple database connections and hundreds of tables (something Eloquent and AR would be a nightmare for). Any language can scale to hundreds of requests a second, but not every framework is a sane choice for enterprise apps.
Yes you can, why shouldn't you be able to. If you want to save stuff in the database, which possibly contain "emoji's" be sure that your tables use: utf8mb4_unicode_ci
Surely annotations are one of the many holy wars in programming. When I take a look at the .NET entity framework and the way their annotations (there they are called "attributes") work, I'm in love with it. You are already defining the type of your property there, so why not also define e.g. the max length, how it validates etc. But obviously there needs to be a dynamic mechanism for that, or libraries can't fully leverage it. I don't think it breaks LSP, as annotations are supposed to be _meta data_. It's specific to a single, strictly defined class. You're not supposed to let annotations be inherited or anything remotely like that. But even then, right now, Doctrine annotations are inherited if you're not overwriting them explicitly. Then you point at the fact that routes and controllers should be separated. I don't think so. I think, controller actions are tightly coupled to URLs anyways, in most cases. When you create a route, you also want to create an action (or use an existing one), when you create an action, you usually also want a route to it. Separating is fine for things that completely lack any direct connection except for a few data values (e.g. models vs. controllers, models vs. views, views vs. controllers), but routes belong to controllers (such as relations belong to models). Yes, you can have routes and controllers separated, models and entities separated, but that also means, if you want to add/remove an action, you have to touch two files, if you want to add/remove a database column, you have to touch two files, where in both cases these things strictly are the same thing (e.g. to set a relation on an entity, you always need the two things, property + relation-config. You can't go without one of them. You at least have to tell it "This is a relation". And you won't have many other parts where you define relations, as that is what your models are for) When I think of Laravel, where I need to create separate route files and manually map them to each action I own or Symfony, where I do `@Route("/test")` and it's mapped, I rather prefer Symfony. If the developer follows consistent naming patterns, no single action including its route will ever be hard to find (but at this point you're right, if your developer doesn't, you may have a hard time changing a specific URL) I agree native annotations would be a lot more nicer and would yield toolchains that are a lot more functional and more stable. The good thing with _fake annotations_ is the fact that it creates traction. People use it and it works well for them, so more and more people tend to use it, PHP devs see that it might be reasonable to implement (as, most other languages have them, too), they take away much work and configuration files required and they might implement them. I am not saying native annotations should be like comment annotations. I'd rather much prefer something similar to C# attributes or Java-annotations/JS-decorators. But I do believe a) meta-data for classes can make a lot of sense and LSP is a matter of how its implemented b) meta-data should be in PHP natively, with an own construct. Yes, they surely can be misused, too. But so many things can be misused, that's a matter of good guidelines and best practices and principles in the end.
Tkx :)
Tkx, I really appreciate the incentive :)
Did you just spam this shit everywhere?
I can help you. I am a php dev.
 📷 😎
My question was so simple that I find it hard for people to not understand. Question without without detail body has posted throughout all other subreddit. What the frog is wrong with PHP subreddit then? I don't know what the hell by he mean "low-effort posting". Need to brag something that is offtopic like him consider to be more a constructive posting? He posted 4 paragraph and only the second one is actually talking about something that related to OP. I pickup laravel because I think it's the most popular one. Of course you can assume that's something else but why people here need to be so serious and off-topic like this?
You can't edit title in reddit post.
I'm not assuming. That's why I put "some other country" \*wink. 
Hey I wish I could remove Laravel from the post title. Between you got a good point. I'm doubt since most people I know write a big app with PHP and not even use package manager like composer at all. They even call OAuth api with pure PHP and pray the code will work. I'm not against it but it's just a bad practice not following the design pattern that help prevent future faulty in a system.
&gt; The more appropriate question should be framework vs “frameworkless”. All right cool. I've making a few simple framework before in different language and it come to a conclusion that why someone need to waste so much time writing the exact same code that has been done in framework and even with a better design pattern and maintenance by senior developer. Not the first time I see old school web developer trying to connect and query complex SQL which could be done in a few line using ORM available out there. Some are even implement authentication that is prone to get hack and they don't even care. I saw their application storing password without hashing it and I'm wondering what are they going to do when their application get hack.
I don't think I see it in the black-and-white terms you do, but thank you for your thoughts. We will ultimately just have to disagree about whether PHP scales in the general case. (Aside: occasionally we get some anti-PHP zealots here who spend in inordinate amount of time trying to "educate" this sub about whether PHP can do this or that - don't be one of those guys/gals! Let people use the language they like). HipHop etc. were all based on PHP. They're not the strict binaries released by the PHP team, sure, but they'll have a lot of PHP's C codebase in them. To some degree I'd say we're splitting hairs if we insist that Facebook is not running on PHP at all. The answer is (or was), "well, it sort of is". I don't think any one has set out to be _intentionally_ misleading about what powers Facebook: intention is a key component of dishonesty. Sure, I know this is social media, so we can be imprecise about our terms and routinely unkind to other people on the basis that we don't ever have to shake them by the hand. Yes, Facebook has some unique challenges, undoubtedly. No single language _at all_ is up to the job, and it does not reflect poorly on, say, Java, that it is not well suited to the bits they're using Erlang for. Indeed, if any engineer in the world uses language X, and it turns out that Facebook use a bit of that language, there is nothing terribly wrong about that engineer being interested in that, or saying "hey, that's cool" and sharing it on Reddit with their fellow engineers. Even if the language is PHP! 
How do you handling Authentication, Complex models, RestAPI ...etc with pure PHP? I'm just curious because that's a lot of reinvent the wheel job to do with pure PHP.
I recently finished a small service with lumen and jwt auth. Good experience overall. 
Agree. Looking forward to this.
Cool article, it clarified some question I had about it, especially the points about Reactor. One thing that seems like a big concern to me when it comes to event sourcing... What if a mistake is made and there exist events which store personal information. Say some law is enacted that you can't store certain kinds of data (GDPR, hinthint). It seems like it would be a massive pain in the butt to rewrite all the events from the beginning of time to strip/anonymize the information. Another example, what if you're storing information as temporary state, which contains sensitive info, but plan on deleting it later, i.e. some encrypted payload or whatever. Storing these in events seems like a bad idea, because those aren't really things you should keep history about. E.g. a messaging platform which exchanges end-to-end encrypted messages between users. You obviously wouldn't use event sourcing for this. Obviously a hybrid approach could be taken, only doing event sourcing for some types of info and not for others.
Note: If you use Cloudflare, you can enable the geoip feature and they will inject the country as a header var. No need to add any code level dependencies or 3rd party API calls.
It might depend on where you come from; some countries and cultures don't care about the quality of the code as long as it works and satisfies the customer specification. I've worked with people like that before, usually when outsourcing projects. I'm sure you can find people working that way everywhere, but luckily I haven't met many of them, and those that I _have_ met does not qualify as a _developer_ to me, as they are only every so slightly above the level of being able to copy/paste code from Stack Overflow.
Good bot
Thank you, itsmoosey, for voting on CommonMisspellingBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Your question is simple but it’s also ambiguous. It’s very hard to understand your tone. Many people seem to be interpreting it as aggressive or condescending. Many cultures, and languages, are much more direct with their communique than English speakers. 
I just wrote an API for a mobile app from zero in pure PHP. I didn't need most of the Laravel stuff, all I needed was JWT, router (I used FastRoute which I modified to be able to use some of the endpoints) and the rest was just controller layer, service layer and data access layer. I used Carbon for date conversion, Valitron for server side validation and a couple of other smaller libraries, I can't remember which ones off the too of my head. Rest was just writing my own methods for all the endpoints. Nothing else was needed so I didn't see a reason to use a framework.
Authentication might be actually the only thing you'd want not to reinvent but it's also possible to do a bare-bones auth. Other ones? What do you mean by complex models? A good model layer should be decoupled from any frameworks by abstraction and thus 'work even without one'. A REST API is just a stateless web service that is based on performing actions with proper HTTP methods. Guess what, making a router isn't that hard - you just match some RegExp to an URL and use $\_REQUEST, $\_SERVER, $\_GET, $\_POST variables and a persistence layer (whatever it be, you can use the built-in PDO or even filesystem - just not session). In the good old days there was even a popular 'hack' that used many levels of Apache rewrites assigned to a param/env with a QSA flag that allowed you to process appended GET variables as usual. Then you would get a URL like /en/sauces/hot-sauces?id=1 and could easily retrieve this url already parsed as an array of \[0 =&gt; 'en', 1 =&gt; 'sauces', 2 =&gt; 'hot-sauces'\] with $\_GET of \['id' =&gt; '1'\]. This already was a kind of a routing system of it's time.
Just because someone doesn't use a framework it doesn't mean they don't use packages and libraries for parts of an application. Coding everything from scratch would be a futile endeavour.
Hey I understand that Rest api is just a bunch of $\_REQUEST, $\_GET, $\_POST but suppose you need to write a medium site up. You going to need a way to structure your code base and like I said, with pure PHP it's going to take a long time. It's more about separation of concern, dry code, SOLID principle and other design pattern. Sure, it's a no brainer going Laravel for a smaller application but heck, it would take a long time scale them up with pure PHP.
Well one reason could be that your application is not a website. Laravel is primarily for web development and using it for a cli application would be massive overkill.
How do you handle the file structure as your project get bigger? I can sense a mess with huge \*.php in some folder. I'm asking this because I've seen php developer put a huge \*.php in just one folder, just one. Good thing is he's doing the project alone and I can't imagine how he going to scale that up and what if he also has a team and need to share what they work on? In my country, it's common that people like to call business function a module. And they just build a ton of modules. The code is unreadable. I have nothing against a good purePHP following the design pattern, say MVC, but I can't stand \*.php in one folder. I can see that you use composer and probably more experience than me. I'm just not understand that some people prefer the easy way that is easy in the beginning but suddenly become hell when the project get bigger.
It really depends on the project. If there are so many wheels to reinvent like you're suggesting; or if it's a project that coworkers are going to develop or maintain; or even if it's anything that I'm being paid for; then I'm likely to use Laravel. Now if it's something simple just for me, I enjoy handling most things myself. Authentication against a database table with login/email and password columns, combined with password_hash and password_verify functions. PHP's built-in session support. PDO with Sqlite. Raw SQL with prepared statements with maybe some SQL generation for basic CRUD operations. CSRF with session tokens. Limited support for fancy URLs with strpos and substr. Rudimentary form validation. Templates using plain PHP on separate files. There's no real reason for me to do all of this. It's just something I like doing.
Because I misplace one world, laravel, in my title and get people so mad, How does it has something to do with me? &gt; Many cultures, and languages, are much more direct with their communique than English speakers. I see. If I come as aggressive, I'm sorry. I might need to work on that. 
route
I don't have much time to respond to your comment but can go into greater depth later if you wish: &gt;What if a mistake is made and there exist events which store personal information. Say some law is enacted that you can't store certain kinds of data (GDPR, hinthint). In a few of my projects that warrant this consideration, we encrypt event data at-rest using different per-stream keys. In this way, if I need to immediately "forget" a particular aggregate, I can easily throw away the key. For aggregate instances that we "forget" like this, we add one last "tombstone" event to the stream-in-question and throw away the key. The "tombstone" event includes the aggregate identifier that should be forgotten is pretty important. We use this in two ways: 1. Every read model implements a handler for tombstone events. Depending on the read model, different things happen. Generally, the handlers scrub read models when tombstones happen. This is how we clean our reads. 2. Tombstone events kick off a batch job to rebuild event store history asynchronously. There is a lot of depth to this that I can't go into now, but it isn't something you want to do in response to every tombstone. Not that it's computationally difficult, it's just a lot of IO. We also have different levels of "tombstone". Most times (in the case of GDPR), you're doing an export of their data (for them) and scrubbing all traces. We keep a "GDPR Read Model" up-to-date for export and our handler for reconciling the event store is simply destroying whole streams at a time. Easy. The more "difficult" tombstones deal with scrubbing \*specific\* data out of events in streams. This requires careful consideration as part of the async batch process I mentioned above.
Skimmed the webpage in 2 seconds, got to the gif of the rock and paused for &gt; 10 seconds. I'm interested in the offering but nothing jumped out at me!
Are you asking for popups? 😄
At a very basic level, if you define a variable or method to be a certain type it must be that type. If you pass a string into a method that is defined to accept integers PHP doesn't care. Sure, your logic might fail but the language doesn't care. A strictly typed language does. It won't run at all. Because of this you also have to have a type declared. You can't just have a method that isn't defined to a type. In a practical example, let's say you have a method that check if some value is false. If you just use `==` you could get a false positive. Look up "falsy values". isFalse($x) { return $x == false; } Now try passing in any of the following 0 '0' false 'false' FALSE That's why we have `===`. It's a more precise check. https://3v4l.org/dZ7FC
I've not used symfony since 2.x and I remember all the symfony 1.x projects were left with no upgrade path. Is there an upgrade path to 3.x and then 4.x and if so how painful is it to update your projects?
In addition to the other great advice already here, keep in mind that emojis will vary from device to device. [https://emojipedia.org](https://emojipedia.org) can be used to see the differences on an individual emoji basis so you avoid any conflicting style mishaps. I got into trouble a few months ago because I was asked for a "Red Car Emoji" in an email subject and it's not red on all email clients / devices. 
Awesome. Thanks for the explanation! Still seems like an explosion of complexity that wouldn't necessarily exist in more traditional approach, but I'll definitely keep it in my back pocket if I come across a fresh project where it might apply.
Most of programmers preffer setting default value in property definition. As far as I know there is no difference between those two ways in program output. Readability is sole reason we preffer private $javaV7 = 'path to java7'; over $this-&gt;javaV7 = 'path to java7'; Btw: there is const word and it let you to define constant in class. 
Your guess to the answer is correct. You could set the default value for each property in the class declaration - then override them with constructor params if they're set. Or you could use a class constants which cannot be changed and can be accessed statically.
The one major difference that comes to mind is that variables assigned in the constructor can be more dynamic. If you assign it in the class definition, it has to be a flat value. e.g. class MyClass { public static BTW_THIS_IS_HOW_YOU_WOULD_MAKE_THE_PATH_STATIC = '/whatever/path'; protected $var1 = 'Some static string'; public function __construct() { $this-&gt;var2 = some_function('some string'); //This would be a compile-error above } }
Another way to think about it is that a statically typed language has its type system enforced by a static analysis tool (usually in the compiler). 
For this API I have controllers in one folder, service classes in another, data access classes in another. Each controller has it's own service class and it's own data access class. I have classes for for example employee endpoints, another for employer endpoints, another for jobs endpoints, etc. Then I have separate folders for all validation rules files, and so on. Read about "design patterns", there are good books about that and this will definitely help you with organising your project.
In OOP usually you end up using whatever variable you declare in a class above the constructor, If you had an int chances are you're going to end up having a default int value, and functions to change that value depending on what you need it for If you aren't however going to use any variable in any of your constructors or functions, you would just set it as a CONST and would call it whenever you need it (In java for example you would make a CONST variable both, static, and final, so you can just call it by simply using ClassName.Const_variable ) 
It’s common to only use event sourcing for the components that need to meticulously track history. That’s the entire point of it. Tracking history in such a detailed way comes with performance and storage costs that make it suboptimal as a blanket solution for an entire application. If you’re applying it across the entire domain then you’re likely misusing it.
I would not set a default at all. Why should it be the responsibility of that specific class to know where Java is? I would pass those paths into the constructor using dependency injection or use whatever your framework uses for accessing configuration values (i.e. laravel .env and config(), symfony parameters.yml, etc.). For me, it would look like this, and that's it: class JavaBridgeOrWhateverThisClassIsCalled { private $java7Path; private $java8Path; public __construct(string $java7Path, string $java8Path) { $this-&gt;$java7Path = $java7Path; $this-&gt;$java8Path = $java8Path; } }
There are three normal ways to set a class' field value in php baring functions with side effects and other edge cases. The constructor, a default for the field, and an accessor. If the field can be set to a value when a class is instantiated by passing a value into the constructor, then it should be set there and a default can be used in the constructor's parameter. If it can only be set through an accessor such as a function called `setField` or some function that takes a configuration object(which it most likely shouldn't be doing but alas...) then set a default value in the field's declaration. Most likely make the default into a const as you may want to be able to see if its default later or reset it, also it lets you know what that value represents later(magic strings and arrays are as bad as magic numbers). Lastly, if it can't be set and is only ever going to be the default, then make it a constant. The only other option here, is if it's going to be a protected field or something that is only used by the children. In that case instead make an abstract class or interface that requires children to have a getter for the field(example below). This ensures that the field has some kind of initialized value and there's no weird stuff going on in case of a dev forgetting to over-write the default or not knowing they have to as the interpreter will emit an error. I've seen some people try and make the getter on the parent ensure that the value is initialized or else throw but that's what an abstract class or interface should be doing already. `public abstract class Parent {` `protected abstract function getVar() : int;` `public function foo() : int {` `return $this-&gt;getVar() * $this-&gt;getVar();` `}` `}` `public class Child extends Parent {` `const VAR_DEFAULT = 42; //possibly a constant won't be needed, but most likely its better to have it` `protected function getVar() : int {` `return self::VAR_DEFAULT;` `}` `}` Sorry I rambled on a tad too much! Let me know if you have any questions or something is a bit unclear. 
Thank you. Also an excellent answer that I did consider and you may have pushed me over the edge for going this route. However, I have one thought about your design. Instead of passing in the paths via dependency injection, would it still be okay to just have it set the paths something like this: $this-&gt;java7Path = getenv('JAVA8_PATH'); The reason I ask is that this service class can be instantiated and used for diverse functionality that might not require using that variable.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Depending on your framework, you should be able to conditionally change the arguments passed in (i.e, when FooService asks for JavaBridge, it passes a path to java 7 update 11, when BarService asks for JavaBridge it gets java 7 update 15). I'm hesitant to say you should access the environment variables directly within the class, but it can be done. I generally don't like my classes to have any more knowledge of the app or responsibility than they need. Another option would be to set the path afterwords with a setter, something like: private function useingASpecificJavaVersion(JavaBridge $javaBridge) { $javaBridge-&gt;setJava7Path('...'); }
Interesting. I liked the statement you made about not wanting your classes to have that kind of knowledge of the app.. I totally get that. Right now I am using Laravel and I created a JavaToolService class which basically interacts with a Java program on another server. I use the SSH package by LaravelCollective for the majority of the heavy lifting for running commands against that JAR like its basically part of the Laravel app. The whole MVC concept doesn't always.. aka almost never perfectly fits for my usecases of my Laravel app. Probably because the features requested of me are almost ALWAYS more ambitious than a simple CRUD app. Anyways I just wanted to give you some context because I want to ask you.. do you think I'm approaching the structure the right way? This extra logic doesn't belong in the controller because that would make the functions wayyy too bloated and this type of business logic definitely doesn't belong in the model (though that's where I used to put this type of stuff just because I didn't know any better). So now I've concocted a 4th leg to the MVC basically that is just a service class where I dump all this generic business logic... basically wrapper functions for that JAR. Convert this, generate this, etc... all in their own functions in the JavaToolService.php class. What do you think about that? I think I already know you are going to cringe, but I don't have anyone else developing this thing with me so here we are.
&gt; It's more about separation of concern, dry code, SOLID principle and other design pattern *Random OP using Laravel and actually meaning it 2018-07-16*
With PHP lately, I've been setting all attributes in the constructor, so I don't recall how PHP works in this regard, but... I've been working with Python a ton lately, and setting default attributes in the class definition sets those values the same for every object instantiation from that class. That means if you have multiple objects and you change the value of an attribute that set in the class definition, you change it for all objects, which is often not what you want. There it is good to set most params in the constructor, because then you can alter their values on a per-object basis. Hope I made sense. I can't recall if this is the same in PHP, but either way the fact that languages work the way I described with Python, it makes more sense to set class attributes in the constructor somewhere, for just about every language, so you cover your bases that way. 
&gt; Because I misplace one world ... How does it has something to do with me If it would have been a single world, probably nothing. If it's at least two worlds it kinda shows lack of effort.
Personally, I consider many of my services to be part of the model. The 'model' in MVC doesn't just need to mean your database models (i.e Laravel's Eloquent), it can also mean the services that model the behaviours and business logic. That way, you can add more business logic by adding more services and save your Eloquent model from being 1000 lines long. /end off topic rant Does the existing app have any apis exposed that can handle what you need, or can they be added? I'm not sure I like talking to the Java app directly using ssh (especially if the other app's api may change and break your app). Or, can a separate micro-service be created to bridge the Java app and your Laravel app? That being said, if it's the most pragmatic approach, there are major time constraints, or it's effectively impossible otherwise, you gotta do what you gotta do. At the bare minimum, I’d have everything that touches that java app to do so though an interface so in the future you can change the implementation easily. I.e. // App\Services\BusinessLogicService interface BusinessLogicService { public function getThing(): int; } // App\Services\BusinessLogicServiceThatUsesJava class BusinessLogicServiceThatUsesJava implements BusinessLogicService { private $javaBridge; public function __construct(JavaBridge $javaBridge) { $this-&gt;javaBridge = $javaBridge; } public function getThing(): int { return $this-&gt;javaBridge-&gt;getThing(); } } // wherever you set you class bindings, probaby AppServiceContainer $this-&gt;app-&gt;bind(BusinessLogicService::class, BusinessLogicServiceThatUsesJava::class); // App\Controllers\FooController class FooController extends Controller { // with DI, it will get an instance of BusinessLogicServiceThatUsesJava public function store(Request $request, BusinessLogicService $businessLogic) { $businessLogic-&gt;getThing(); } }
Doesn't seem like everyone here including you making any effort on answering the question either. 
Thanks for the response. I agree that its not the prettiest solution, but it is only phase 1. Phase 2 is to rewrite that JAR as a web service and I could effectively get rid of this Laravel wrapper too at that point and just straight up call the Java endpoints! But for now the show must go on and I have to get the thing going this way first. So in your example, the reason for using the interface is just to ensure the service class will never have its 'getThing' method removed? I admittedly don't use interfaces and I know I really should.. so that's why I'm asking you this. What sorts of value does the interface add for you in your apps when you are the sole developer? Does it just save you from deleting a method in a class because when designing it you were like.. I definitely always need this method to exist, but what's to stop me from just going in and removing it from the interface too? Thanks again!
You got another good point. It seem to me that it's not a countries or cultures but rather some people just want things to work without caring anything but just work and at the same time they want to classify themselves as web developer, Hench, code quality is nothing to them. I don't see this kind of problem elsewhere beside to old school PHPer. My take was that PHP is so easy to make a dynamic website and it's maybe why some of the PHP dev here are so arrogant, despite years of experience. From a perspective, it's hard to make a dynamic web app without framework using Java, C# or even JS. Hmm, I just found the truth behind arrogant PHP developer here in my own post.
Why not a constant?
overhead Lets say for example, I want to find and replace Godaddy shared server hacker code from a clients site: I use a simple function to search all Wordpress files ect function openDir($base_dir,$recur){ $directories = array(); foreach(scandir($base_dir) as $file){ if($file == '.' || $file == '..') continue; $dir = $base_dir.DIRECTORY_SEPARATOR.$file; if(is_dir($dir)){ $directories []= $dir; if($recur){ $directories = array_merge($directories, openDir($dir,true)); } }else { // is file $basedir = $base_dir.DIRECTORY_SEPARATOR; $filer = explode(".",$dir); $ext = strtolower(end($filer)); if($ext == 'php'){ $file = $dir; if(file_exists($file)){ $newdata = ''; $s = file_get_contents($file); $arr = preg_split('/\?&gt;&lt;\?php/', $s); //\s+ if(isset($arr[1])){ $newdata = '&lt;?php '.$arr[1].''; echo $file.'&lt;br /&gt;'; if(!file_exists($file."_bak.php")){ copy($file,$file."_bak.php"); } file_put_contents($file,$newdata); } } } } } return $directories; } $start = ''; // DIRECTORY_SEPARATOR.$start $directories = openDir(dirname(__FILE__),true); echo '&lt;pre&gt;'; print_r($directories); echo '&lt;/pre&gt;';
Let's say you use your class 15 times in the app, and don’t use an interface. 2 months from now, you need to change the implementation. Those are 15 lines of code you need to change. There is a good chance you will miss 1, or 2, …or 5, and don’t forget the imports at the top of the file, gotta make sure those got changed too! (Hopefully your IDE will help with this, but things can be missed) If use the interface however, you only need to change 1 line of code, where the class is bound (AppServiceProvider in Laravel). Plus, why should your classes care or know anything about the implementation in the slightest? Does your FooController really need to know how the sausage is made? All it needs to know is that it got some data, and it needs to do a thing. The rest is noise. Also, what if there’s a situation where you need to use your old implementation on 2 or 3 classes because you’ve only implemented half of the API on the new implementation. Do you manually inject the old service on some, and the new on the others? How do you manage that? Yes, it’s very similar to TDD. You create the interface first, with the public API exposed. That way, you know what you’re building and how you want to interact with it, and you get the bonus that if your class doesn’t implement each of the methods in the interface, an error is thrown.
Absolutely. I often set defaults at the class declaration for ease of use and flexibility. Cake and eat it.
Short answer, 'easily'. &gt; Authentication I write my own. It's not a complicated problem, just error prone. &gt; Complex models I use complex data structures, when needed. Which is almost never. I use dumb DB models, exclusively. &gt; RestAPI I use GET+POST and partially handle the logic of parsing data in the routing, then hands it off the appropriate controller who can further process it.
Because it's not necessary
Thank you very much. I am using Cloudflare but I didn't know that. I will check it.
Do you think PHP is better than Golang?
https://wiki.php.net/rfc/typed_properties_v2
Well I do like apples, but oranges are good too.
Yeah I don't even know the difference off hand. $300 hahaha, alright... I'll see myself out
Yes. It will depend on what you do with the values afterwards. If you separate them into arrays or anything else you need to filter php commands and mysql commands or these may gat executed when stored in your database. You also need to do a file check to be sure it is actually a txt file and not a php in disguise. Check the header and the extension. The file directory where this will get stored should be a chmod -x permission. Finally it can not hurt to rename the file after processing. Create a token name or something not guessable and store that name in the database.
What I would do is base64 encode it before transferring over HTTP, which will strip out the odd characters. As soon as you get serverside, decode and deserialize it to an object structure - your deserializer can handle any data issues, automatically escape special characters, whatever. If you are going to persist this data in a database, good database fields will help tremendously - check the types that you received (validate that any numbers actually are numbers, that dates are the correct format, and that magic strings are from a valid collection for their field), length check your strings, whatever. When you execute your save, you should be using a stored procedure or prepared statement (obviously) to prevent injection. Assuming you've done that you should be OK. If you get an error, you save the original data that the client handed you, save it in an error folder, and make a log entry with the location of the failed file.
Symfony provides a bridge to phpunit. Ideally you want to make your tests fail if someone introduces new code that triggers a deprecation warning. You can basically set it up so that new warnings will fail and old warnings can be ignored until you fix them. Once they have been removed you can update to the next version. There are some directory stricture changes but there's a lot of documentation how do to it properly.
&gt; Now my question is: are there any gotchas in csv/text files that a potential attacker can abuse when reading from such a file? Are there any checks I should do first? Assuming everything's set up and written correctly CSV really shouldn't have security issues per se. (That is: CSV itself is just a plaintext format that outside of some very exotic setups doesn't bring any particular security considerations into play.) That said: allowing any kind of file upload - especially if you save that file somewhere and make it accessible to the user. Assuming all you do is let the user upload a file and you put the payload into a CSV parser and then put the parsed CSV fields into a database the correct way (ie: prepared statements) the risk of someone being able to gain control of your system should be remote at best. Without more context about the application/intended functionality it's hard to say more than that.
The CSV is for bulk user creation, it should just be a name and an email address. Then the system should create an username and email the user to change his automatically generated password. I'm aware this can be used for spam but this functionality is only for paying customers who ideally won't have a need to send spam. All in all spam would just be detected by the hosting provider and blocked, and not break my system. 
Good advice. The file itself is just a burner and would get deleted after processing. I was even considering to catch the file in Javascript and transmit the text via AJAX.
&gt; you need to filter php commands If you have a csv payload why would it ever end up getting interpreted by PHP? &gt; and mysql commands Escaping those is the concern of your database api, and PDO/mysqli have you covered quite well there. &gt;You also need to do a file check to be sure it is actually a txt file and not a php in disguise. Check the header and the extension. I'm not sure what you mean by 'the header' in this case, but the file extension is definitely not reliable as a means of indicating what content a file has if you're assuming a malicious user. In Apache it's entirely possible that your setup might decide that `file.php.jpg` should be executed as PHP code, and it's even possible to make `file.php.jpg` show up as a JPEG image to a program that looks at the [magic number](https://en.wikipedia.org/wiki/List_of_file_signatures) of the file. while still being entirely valid, executable PHP code. If you're accepting user uploaded files in the usual case don't try verifying they're safe, rather treat them in such a way that even a malicious file will never get a chance to do anything except maybe cause imagemagick to complain that `user_uploaded_avatar.jpg` doesn't appear to be a valid JPEG, or cause your CSV parser to complain about a malformed CSV. &gt; The file directory where this will get stored should be a chmod -x permission. That's good advice in general, though it's not enough if you're talking about a Apache/mod_php system. mod_php reads the file and feeds it into PHP itself, it doesn't rely on directly excuting the file. (basically mod_php does the equivalent of `php file.php` instead of `./file.php` in the shell) ... Unless things have changed at some point in mod_php? I haven't used it in forever.
&gt;What I would do is base64 encode it before transferring over HTTP, which will strip out the odd characters. I'm not sure which 'odd' characters you mean here? In HTTP you can transfer whatever you want in the body without issue, and it's not a security risk to do so. HTTP is entirely capable of carrying any arbitrary byte sequence in the body, that's why it's expected an HTTP message will include a description of the content-type of the body.
Probably the biggest security concern here, then, is how do you know the user uploading this CSV is a user allowed to do so? What's the authentication scheme?
Beautiful. I needed to create a console app, pulled DI container and Console components, 15 minutes of wiring together and it just worked. I'm sold
Use a library or inbuilt functions: https://secure.php.net/manual/en/function.str-getcsv.php https://github.com/parsecsv/parsecsv-for-php
Ok cool so then it sounds to me like you plan to process the csv data. Just be sure to clean the data and remove htmlentities prior to storage. Though PDO and such should do these things just fine, you will never go wrong doing it yourself. I do not think I would do this with any java element. Reason because this is on the local machine which also means that I have control over the code since it is on my machine. Let them upload the file via php and do all processing in php so that the security remains on the server and only you have control. 
Here is another option for you, if **all** you are doing is capturing the data in the CSV file and have no intent of long term *(or any term-limit)* storage of the .csv file. Instead of using `multipart/form-data` use a header of `Content-Type : application/octet-stream;` so that the file will be sent *as a stream*. On your capture page you can use the following code *(one-liner too!)* to capture the stream data *(.csv file)* and convert it over to json. $json = json_decode(json_encode(array_map("str_getcsv", explode("\n", file_get_contents('php://input'))))); This will give you the content of the `.csv` file in a `json` format, all ***without*** the file being uploaded to any `/temp/` folder, instead storing the data *in-memory*. It might be a good idea to [run a validation](https://stackoverflow.com/a/15198925/797620) on `$json` just to be sure all is good, before proceeding. After that, you can then use it to do whatever it is you are doing with this data: shoving it into a db, flat file, email, whatever.
I have build this tool as I was fed up with query builders and complex setups. Storage framework implements unit of work and identity map patterns + it provides lightweight hydration/extraction layer (as much as I could). You can easily create any SQL/Mongo command you like and hydrate it the way you like. Comments, suggestions are welcome. Enjoy!
A possible vector of attack is uploading a .php file and having it run on the server. Make sure the folder you save the files too does not run .php scripts and make sure you only save csvs. If you intend on using the data from the CSV either in PHP or the database, you'll have to treat it like any other user submitted value and sanitize it.
You could always use Phalcon, it's "pure" php code and you get an MVC framework compiled in.
Whatever network request you make is going to be way slower than the overhead that guzzle adds. Not wanting to use guzzle because it's too big is fine, but its overhead will almost never be an issue in cases like this.
You cant claim its PHP powered- it has nothing to do with PHP, except the fact that the script language you have implemented has similar syntax. Sorry but seeing what I have seen I still prefer to use C for this kind of things.
&gt; Instead of using multipart/form-data use a header of Content-Type : application/octet-stream; so that the file will be sent as a stream. [octet-stream](https://www.iana.org/assignments/media-types/application/octet-stream) just means a bunch of arbitrary binary without any specified encoding, [it's just an older use of the term 'stream'](https://en.wikipedia.org/wiki/Bitstream). The actual transfer of the file isn't any different depending on your content-type, the HTTP mechanisms are all the same. According to [this](http://php.net/manual/en/wrappers.php.php) only the `multipart/form-data` suppresses the `php://input` stream from getting defined, and the more correct `text/csv` should be fine for reading the http body from memory.
**Bitstream** A bitstream (or bit stream), also known as binary sequence, is a sequence of bits. A bytestream is a sequence of bytes. Typically, each byte is a 8-bit quantity (octets), and so the term octet stream is sometimes used interchangeably. An octet may be encoded as a sequence of 8 bits in multiple different ways (see endianness) so there is no unique and direct translation between bytestreams and bitstreams. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
In Germany, 1.234,67 is a number greater 1000. In the US, less than 2. How do you handle that? How do you handle timezones? What if a text in a cell includes a line break? There are different line breaks for Unix and Windows. Will you assume single or double quotes or no character as call separator? Is it possible to mix them in one file? Will cells be separated by a comma, a tab or semicolon? And so on...
This article is 2 years old, I don't think it's very relevant anymore. It mention that parts of Drupal still use procedural code and not OOP. I also feel like I see a lot less negativity about PHP now than 2 years ago : The release of PHP7 gave it a lot of publicity, Laravel is gaining popularity even in circles outside of PHP, and Nodejs is getting bad press because the JavaScript ecosystem is a mess (which makes composer and the PHP ecosystem look better by comparison).
You seems have not a faintest idea what htmlentities are and what PDO is for. Better learn these matters before giving away such a thoughtful advise
The overengineering level in your ideas is overwhelming. Please remember the best principle ever: Keep it Simple, Stupid. On a side note, yes, it doesn't belong either: https://i.imgur.com/DK1ckG8.png
&gt;How do you handling Authentication, What if you don't need any for a specific situation, or only an extremely simple system without no automatic reset mail system or the like? &gt; Complex models What if you don't need complex models? What if you barely even need models? Maybe all you need is a simple key/value store. Maybe you don't need any store at all in some cases! &gt; RestAPI What if you don't need that, or only need an endpoint or two with a dead simple thing going on?
You probably know this, but just to be sure: make sure you’re sanitizing inputs into your database here! A SQL injection could easily live inside a valid CSV. 
&gt;octet-stream &gt; &gt; just means a bunch of arbitrary binary without any specified encoding, &gt; &gt;it's just an older use of the term 'stream' &gt; &gt;. The actual transfer of the file isn't any different depending on your content-type, I am going to take a guess that you did **not** *actually test* before you wrote. By all means, go ahead, give it a Test: header('Content-Type: stream'); When you realize that does not work, go back to using: header('Content-Type: application/octet-stream'); &gt;It's good advice to avoid a needless temp file where possible, though. Thanks. Saves a /\~temp file being written to disk, dealing with garbage cleanup, removes a tiny bit of security risk, keeps everything in memory, and, the method has been working for me for a couple of years. 
This is the bulk of it. Beyond the issues of uploading in general, the content within each cell, if added to a database to be pulled out later could contain exploits if not rendered properly 
I work on a project that grew gradually, adding more features &amp; security knobs as time went on. I've looked at laravel and the like, but they all feel too abstract to me. In this case I know how every bell and whistle works, so I keep it that way for now. 
Fortunate for all of us that we are not here to impress you while you sit in your underwear behind your keyboard. So your advise is for the OP to not remove html characters, php code or to fully trust the preconfigured PDO statements, MySqli and so forth..... I bet you think that it is a great idea for him to use java too. Your advise is to tell the OP to fully trust the input of his uploads from unknowns. Instead of putting your two cents into why you fell you are sooooo much smarter, how about contributing something to the OP instead. You clown trolls whom sit around all day in your skivies just to tear up an answer, contribute nothing to the question. You are all just as bad as those shits on stackoverflow. If you have something smart to say then say it to the OP and help this guy out. 
Not everything needs a framework or is written with one, god forbid I mention Wordpress, but they are among the top leaders in terms of CMS, they run a huge chunk of the internet, why? Simplicity and ease of use. Is it a good idea to not have some semblance of structure or what not no. But they seem to do fine with out it, criticisms aside. If you ever worked for any company you’ll know they have that one old Php application that was written during the age of global variables and goto statements. An old app you have to maintain. I’ve written plenty of little scripts that didn’t need a framework, you have to realize that php is a scripting language we evolved over the years to be more OO and modern to accomplish what we want and what we need.
array_value_first() and array_value_last() was declined.
Is this only to be used for small stuff? This seems pretty cool. I imagine one thing to consider is in-memory storage or RAM limitations but it's just text? I like that idea of it "being safer" regarding not saving. Interesting. I wanted to do this too for CSV to API(not a new idea) but it was something that could be made though probably little application/users(I've already seen implementations too) but would be cool to build as a service after I get over CORS(only a problem it seems if you expect to interface by AJAX).
would have helped if the rest of the sentence made sense.
*A file will be sent* from where?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
If someone's interested. I created a PHP script for steganography using the LSB method. this is puzzled together from online resources and my own knowledge. If you have any questions, shoot!
My advise stays as it was: just have an idea on what you're talking about. And even "those shits on stackoverflow" would respect your opinion.
Trying Reddit redesign. When creating text post I can only provide a title, text input is not visible. After changing target subreddit to something else, the text input shows up, but hides again when back to PHP subreddit. Is this a bug, or some PHP subreddit rule for posting needs to be changed in redesign?
&gt;Is this only to be used for small stuff? This seems pretty cool. I imagine one thing to consider is in-memory storage or RAM limitations but it's just text? Back in the days, and kinda even still today I guess, we use to figure "size of file x2" for how much memory to allocate. Most of what I am dealing with is importing health data from devices like a Fitbit, and iOS/Droid app data exports. Rarely do I see ones over 3 megs, so, even if we factor in a 10mb memory allocation, bit freaking whoopie doo to that, eh. But, I guess if you were dealing with a csv file of say a hundred megs, I mean, really, even at that point, you are talking less than a quarter gig of ram, and if a web server this day and age cannot handle a spare quarter gig of ram being used for a few seconds, probably best to take it offline, eh lol As for CORS... once you wrap your head around it, get it all figured out, it is fairly easy. But, that does not mean it is not frustrating as hell. Sometimes CORS can be over aggressive and just cause mass frustration. Hope you get it all figured out @new\_human\_obj 
&gt;A file will be sent from where? That is actually a really good point /u/colshrapnel the OP never stated if the files are coming from a folder *(thereby using the always-fun-to-use* [*glob()*](http://php.net/manual/en/function.glob.php) *function)* where he has a bunch of .csv files in, or if the files are being uploaded via a website form. Bad of me for the presumption, eh!
Parts of Drupal still do rely procedural code. (`.module` files) I agree that PHP no longer needs to be defended and glad the popularity of Laravel draws in noobs.
That'd be too sensible...
Good job. You have contributed nothing intelligent to this OP. How about saying something smart so that he walks away with some info that he can use or research. You seem to think that refdit was built for your personal trolling experience.
[https://github.com/OwenMelbz/illumipress](https://github.com/OwenMelbz/illumipress) Plenty of people who be hating WordPress and plenty who hate Laravel. But if you happen to enjoy working with Laravel - and also feel the pain of developing with WordPress then this package tries to bring some of the sugar laravel provides to WordPress. It gives you access to things such as * Blade templating * Caching drivers * Response/Request classes * Validation classes * Whoops * Encryption * Support package e.g dd, data\_get, collections etc. * ZTTP for guzzle sugar. It is fairly new and my first real WordPress integration with anything so any constructive criticism welcome :) Thanks
What possible reason could there be to add one but not the other?
The organizations as links: - https://madewithlove.be - https://www.axelerant.com
The discussions can be found at https://externals.io/message/102663 The main argument was the lack of a possibility to differ between null as an error return value and null as a valid array value without further checks like empty() or count()
The discussions can be found at https://externals.io/message/102663 The main argument was the lack of a possibility to differ between null as an error return value and null as a valid array value without further checks like empty() or count()
Think about what the allowed values are for array keys vs values of an array and what property makes them different...
If array_value_first and array_value_last were declined because of returning null as a value, what about this scenario? &lt;?php $a = [null =&gt; 2]; print_r($a); echo $a[null]; // 2
That makes sense, thank you
I read the discussion in internals and now it makes sense. Thanks
Quote from the [docs](http://php.net/manual/en/language.types.array.php): &gt; Null will be cast to the empty string, i.e. the key null will actually be stored under "".
I am under the impression that "allow upload of a list of comma separated values" statement means a regular file upload feature
This is a very strange topic featuring overengineered solutions to a non-existent problem. Given the OP is talking of the regular file upload, and given there is no need to save the uploaded file on the server, **there are no security concerns** related to the upload itself. A file will be uploaded to a temporary directory with a random name, read by the same php script and then discarded by PHP core when the script finishes. All other conserns such as SQL injections or XSS are still must be taken into account but it would be off topic for this particular question. And yes, the entire question is off topic for this sub as well.
Possibly because you could use array\_key\_\*() to get array\_value\_\*(), not sure though!
Look on job boards for various countries/etc, look on Glassdoor for reviews of those companies. Expect lots of competition (you're competing for these jobs against the best from around the world, not just the rest from around the corner). If you're not at the top of your game, with a really good CV/opening letter, don't expect a look in, they will be getting a lot of different applications from all over, and will drop your application like a hot potato for the smallest things.
Come on, it doesn't take a lot of trolling to show an arrogant jerk his place. Cheers :)
Any idea why PHP adds another global functions instead of moving to ArrayObject as the main/target representation of array data structure ?
\+1 for the methods \-1 for being global methods \-1 for the snake\_case
Because mostly array is used as data structure? and it's passed as value not reference
The array functions are already global and snake case. (array_key_exists, array_keys, array_merge, array_filter, ...). Why on earth would they use two cases unless they want to make a new, better, OOP API like time () -&gt; DateTime
Laravel breaks SOLID out of the box. [https://www.reddit.com/r/PHP/comments/3bmclk/why\_experienced\_developers\_consider\_laravel\_as\_a/csnfoce/](https://www.reddit.com/r/PHP/comments/3bmclk/why_experienced_developers_consider_laravel_as_a/csnfoce/) [https://www.reddit.com/r/PHP/comments/3bmclk/why\_experienced\_developers\_consider\_laravel\_as\_a/csngelb/](https://www.reddit.com/r/PHP/comments/3bmclk/why_experienced_developers_consider_laravel_as_a/csngelb/) Pure PHP doesn't make anything more difficult in regards of structuring code. A framework might have a interface or an abstract on which you may implement or extend some classes and a directory. That's all. You are able to write this yourself. If you mean architecture, then that's bad - I think that framework shouldn't force you to an architecture. For example, how working with a framework would help you structure your code when using DDD? There's no way for a framework to do that - it's same as 'pure PHP'. As for scaling - actually I know of a way that big PHP products progress when it's a core system and every % of performance is needed. It's called... dropping the framework (or at least cutting it). Every thing that gets loaded and isn't used is a bloat and guess what - there's lots of these when using a framework - you should be able to find some statistics of overhead that various frameworks give you. It's absolutely worth it. How this is achieved? For example a framework might dynamically change some implementations based on configuration. Usually at this stage of product development your stack is stable and you can make it hardcoded beacuse you're working with a Oracle DB and not planning to transition into Postgres at all - we drop unneeded abstractions that would get autoloaded. Also compiling routes and other dynamic maps would make using them a worst-case of O(n), I don't think that there's going to be anything faster. Framework is worth it when you need a basic standard for teams to have when they develop. One place for configuration. A directory that contains templates, migration system - it's good to have all this stuff bootstrapped. But many people treat them as black-boxes and that's very bad. When your developers don't understand how this stuff works behind the hood they will make a lot of mistakes and that in turn makes your technical debt. Look where symfony 4 is going with it's Flex system, it's all barebones when you create a project. Then you have explicitly require a package for persistence, templating, auth, and other stuff. Deep down (and also simplying it up) it's just a abstraction for working with HTTP requests and responses. And under the hood? It's just of all these PHP magic vars like $\_REQUEST, $\_SERVER, $\_GET, $\_POST and various input and output streams being streamlined into OOP. Nothing you can't do yourself. Frameworks usually aren't compatible with each other at all - learning one usually won't help you with another one. Also the worst ones force you to use certain architectures (remember CodeIgniter?). My claim is that you're actually able to create a better system when working from ground up and just installing dependencies like Doctrine, Symfony's HTTP when they're needed. A good read: [https://medium.com/@garywiz/welcome-to-framework-hell-aa54a9b5d4fd](https://medium.com/@garywiz/welcome-to-framework-hell-aa54a9b5d4fd)
Yes indeed. I sanitize everything the user can possibly type or upload. 
Just a side note not directly related to your question: I also needed to handle file uploads for bulk inserting data a few times, but it turned out that users were way happier and confident to upload an spreadsheet file (xls, xlsx, ods) instead of CSV. You can use [PHPOffice/PhpSpreadsheet](https://github.com/PHPOffice/PhpSpreadsheet) to parse those formats quite easily. It's more CPU intensive than CSV, but totally worth it.
Yes
There are few PHP CLI Applications from open-source world: \- [https://github.com/composer/composer](https://github.com/composer/composer) \- [https://github.com/friendsofphp/php-cs-fixer](https://github.com/friendsofphp/php-cs-fixer) \- [https://github.com/symplify/easyCodingStandard/](https://github.com/symplify/easyCodingStandard/) (I'm author) \- [https://github.com/rectorphp/rector](https://github.com/rectorphp/rector) (I'm author) \- [https://github.com/phpstan/phpstan](https://github.com/phpstan/phpstan)
Js would not handle any security, it's only job would be to read the csv and transfer it. That would avoid me the trouble of managing files and it just becomes a variable in my script. What the user sends me it's still up to him, but because of the nature of the input I'm not expecting any special characters other than @, so I can strip them all away with 0 consecuence. 
Exceptions?
One thing that would be useful for some is if you wrap guzzle and all the HTTP requests this would allow you to support multiple versions of Guzzle. Since Guzzle has quite a few BC versions and how many legacy systems are out there it would be good to be able to allow people which version of Guzzle to use.
Exactly, just one file at a time, regular upload form. 
I'll take a look into it, thanks. 
https://github.com/php/php-src/blob/41db5f73ce452f4135c61419b6535245dd1e724c/Zend/zend_API.c#L4328 When the doc says `iterable` is a "pseudotype" does it mean, according to the above, that it's just a predicate?
it means you can not use `instanceof` on it, because it's not really an instance of "interable" it just is an iterable. kind of like how an array is an array, but not instanceof array. Like `is_array()` you have an `is_iterable()` function.
Yap, thanks, `is_iterable()` is the predicate I was after.
So then there's now more hidden type juggling in PHP? Sounds like a step back. 
Why not $myarray-&gt;keys() and [collection]-&gt;first()?
Ok
No, this behaviour exists already. `array_key_first` would return the empty string because the current array behaviour is to cast a null value to the empty string.
We can also destructure easily enough with a list, so there's a lot less value to it. list ( $first_key ) = [ 1, 2, 3 ]; // 1
Which micro framework do you recommend me ? 
You have a point. I was just thinking about how I've had to send non-text data over http, and that's how we do it. It's a good catch-all way of embedding stuff in a request body that I've seen used a number of times. CSV is a serialized format so that should be OK.
It's not exceptional case, it's even not an error. It's just empty value. I think that exceptions in PHP is overused, mostly because you don't have to handle all exceptions explicitly.
Because an array isn't an object in PHP. They are two completely different types. This would require a lot more RFCs and implementation work.
Normal arrays are more performant than ArrayObject. There won't be a point where everyone only uses ArrayObject, it's a utility with some overhead.
This 
Can you tell me a PHP function that is not snake_case?
It's quite clean code and you probably learned a lot creating it, so good work! The static ConnectionManager completely destroys it. It shouldn't be static and the Storage shouldn't fetch it magically from a static source. What if I want my connection manager inside my DI container? What if I want to give my storage a mock connection for testing? I've not looked to deep, but what I found was that it wouldn't be so easy. This seems like a more lightweight implementation of Doctrine, minus static mapping of columns and decades of tests and fixes.
... I'm not sure what you mean about `content-type: stream`, because it certainly wasn't what I was trying to imply could or should work. I was just saying the sentence &gt; Instead of using multipart/form-data use a header of Content-Type : application/octet-stream; so that the file will be sent *as a stream*. Doesn't mean anything because 'sent as a stream' isn't a thing in HTTP. (At least not 1.1) I was saying that Content-Type: application/octet-stream and Content-Type: text/csv will send the file through the exact same mechanisms, and the body will be available in PHP through `php://input`, but the latter is more technically correct.
Last I heard was that madewithlove aren’t actually hiring. They may keep a pool of potential remote candidates, but that’s it. 
Just display anything you want. [nobody bothers to read anyway](https://i.imgur.com/DK1ckG8.png).
If you got nothing helpful to say, don’t say it in the first place 
Funny thing is that it's the same for you, except that there's a clear rule specific to what you're doing.
wow such an injured innocence if you're unable to read the rules yourself, at least show some gratitude for someone who does it for you. delete your question from this sub and ask where the rules say.
Thank you for taking your time to look at my project. &gt;It's quite clean code and you probably learned a lot creating it, so good work! Thank you. &gt;The static ConnectionManager completely destroys it. Well i wouldnt say it completely destroys it (you don't have to use it and everything will works anyway) and will exaplain why it is static. &gt;It shouldn't be static and the Storage shouldn't fetch it magically from a static source. I wanted to prevent situation where you have two connection managers in the code - I cant see use-case scenario that make sense two have to instances of connection manager. Also I wanted to simplify the usage of the framework and not force to much responsiblity onto entity manager or storage class itself. &gt;What if I want my connection manager inside my DI container? If you go with DI, its better to define repositories inside DI and pass the connection that is being used by repository in your factory class. &gt;What if I want to give my storage a mock connection for testing? No problem, you can just pass the mock to connection manager, or pass the connection mock to repository directly. &gt; I've not looked to deep, but what I found was that it wouldn't be so easy. I will provide some examples soon, to make this easier for people- I am sorry I have failed at this point. To be honest this was very tiring and demanding project but at the same time I found it quite entertaining. &gt;This seems like a more lightweight implementation of Doctrine, minus static mapping of columns and decades of tests and fixes. You are right, it may seem like doctrine/hybernate as they also utilize unit of work and identity map patterns. Main reason why I decided to write it was the fact I like to write queries I like to have power how my database is working, how queries look like and how my schema is defined and at the same time I am mixing multiple databases in my project. Using doctrine orm and odm at the same project was a bit troublesome. 
There's nothing technically wrong about it - it can work - it's just entirely unnecessary. The HTTP body is intentionally meant to hint at how its supposed to be interpreted in the content-type header. base64 encoding on top of this system just means you now require the other side of the connection to know that they need to base64 decode the body you sent them and interpret it again as something else. (And also increases the message size by roughly 33%) There is no byte sequence that HTTP can't carry in the body if you want it to - just drop the payload right in it. Saves a bit of a space and hassle over the encoding/decoding without any downsides.
i can. 
I can chip in as well.
Reset and current return false, why exaxtly isn't that an option here?
This behavior sounds like BS to me.
From one of the very first comments in the post... Just because we’ve made mistakes with other array functions doesn’t mean it’s okay to continue doing it.
a virus with ERP features ? hell yeah, sign me up
Sad to hear this. The objections raised by /u/morrisonlevi were, in my opinion, valid. While I understand the need for such a feature, the current implementation adds technical debt. In a few years, these functions will just be "one of many inconsistent and confusing PHP array functions".
I hope someday PHP get something a class for array's, something similar to collections most frameworks/libs provide. I would love to be able to use: \`$array-&gt;key\_first()\` instead of \`array\_key\_first($array);\` :) 
False is also a valid array value thus it won't solve the problem
I was pretty much a beginner with symfony and I had little experience with MVC before I started working with it but I learned symfony along the way and it's very nice in my opinion. There are some nice plugins available for it. Everything is easy to extend. Documentation for it is also very clear. The forum is also very helpful for asking questions which is nice. I can recommend it. 
That doesn't seem like a good argument. It's an error if you try to get the first or last value of an empty array. So check first. Done.
+1 for snake_case; camelCase is an unending disaster of confusing ambiguities when dealing with things that require capital letters for their own reasons (e.g. DesignatedUSAFOfficers).
strpos, along with many others
I've discovered this on my own codebase for sure. My style decision has been to always proper-case each word. So designatedUsafContact, getHtml, setId, etc
bin2hex. I don't know what case this is.
&gt; I wanted to prevent situation where you have two connection managers in the code You get a single, small advantage (you force the user to not instanciate the class twice) for some disadvantages (reduced testability and more work to reach 100% coverage, reduced testability for people testing with your library, not able to throw it into DI) As for the DI part, let me explain. In many modern DI libraries you don't have factories anymore, you only instanciate by classes. You don't define your service like $app-&gt;share(function ($app) { $app['user_repo'] = new UserRepository($app['connection']); } anymore, but rather just pull them from the DI and let them autoconfigure $userRepo = $container-&gt;get(UserRepository::class); It will auto-wire based on **typehints**. So if I use your library and throw my connection into my DI container (which would be a common pattern), this would work, but once I want to use a connection manager, it won't work anymore as it will always resort to using the registered connection in the DI container. You'd have no way to throw your connection manager into your DI. You can only access it statically, from basically anywhere. I suggest you let the user of your library decide how many instances of the connection manager they want and more tightly couple them to the Storages (e.g. pass the connection manager to a storage and let the storage define what _named_ connection it uses or something similar) This is probably also important for connection pools, where you create multiple connections and let the application use them randomly or by some score. &gt; I am sorry I have failed at this point. Don't be. You did not fail anywhere. I can just as well take a closer look at the code. You wrote a clean and working library with tests and common standards. Nothing to be sorry for. For some, testability is a personal opinion. I think it's very important. There are probably enough people that would tell me "No, static is okay, it's still testable with some workarounds and it makes it easier to use it" etc. Good luck with this and projects!
what is this global `event()` function?
Yeah, that would lead to `arraykeyfirst`, I don't think that's what u/raito_cz wanted. I guess he rather wanted camel-case (`arrayKeyFirst`). If I am wrong, he may correct me, but afaik there's no single standard function that is camel-case by default (it does not keep you from using them in a camel-case style, though)
Well, bin_2_hex would be pretty weird, wouldn't it? I probably worded my question wrong.
To clarify, because people seem to be misreading this: Null keys have never existed in PHP. Try this in PHP 7.2: &lt;?php $a = [null =&gt; 2]; var_dump(key($a)); The key is an empty string, not a null. PHP is just casting your null to a string when it does the getting/setting. In PHP, all array keys are either strings or integers (determined by what the value looks like, not by the type that is used to set it in the first place). So, array_key_first() returning null is completely unambiguous.
Seems quite similar to Doctrine in core concepts but this one is lot more simpler. 
The idea is very good. Just a suggestion: as json_decode() does not throw an error by itself yet, it always worth to wrap it in a [simple method that will throw useful exceptions in case of decode error](https://phpdelusions.net/articles/error_reporting#raise)
It infuriates me that this is even necessary.
In what way? Are you upset that someone would want to comment JSON, or are you upset that a userland solution had to be created to allow it, as the JSON spec does not allow for comments?
Yes. I think some of its features are not yet mature enough for to be a catch all for all e-commerce solutions but it's easy to setup. Developing for it isn't hard at all and if you have a sf project already then it can be connected quite nicely. I really like it. But it's up to you to try it out!
Added throw exception. Thanks
The latter. Either all JSON parsers should ignore comments, or JSON should never be used for configuration. I understand the standard creator's argument that someone would inevitably use comments for parsing directives, but IMO that risk does not justify the loss of human understanding that results from not allowing them. Having to resort to shoehorning comments into duplicate keys or schema-breaking keys, and having to pre-process configuration files is stoopid.
On a second thought I tend to agree with /u/spacechimp If you need a human-editable format, YAML would serve you infinitely better than json, comments already included 
json imo is not for robots or machines solely though. Even with generated json, necessity of comments can arise. In which case - it would be done by hands. 
Not that comment is unnecessary in JSON. JSON doesnt contain comment only because it is not supported natively. There can be plenty of usecase and urge to have comment for varying [reasons](https://www.google.com/search?q=json+comments) and people seek for it from time to time. You can happily be done ignoring what you dont need or like rather than being infuriated!
I do appreciate that you took the time to create a workaround, however I still maintain that in a sane world it wouldn't be needed.
Perhaps, but there are only so many things you can do before you end up with a bad reimplementation of a Result type, which is pretty awful without generics. 
If you have to check first then there's not much benefit to having the function over the existing methods available. I can still see a scenario where it would be good to have this method, such as I know it should never contain empty values, but oh well. :)
nice attempt, but i think it could be done simpler... $json = preg_replace("#(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|([\s\t]//.*)|(^//.*)#", '', $json); $json = json_decode($json); reference: [http://php.net/manual/en/function.json-decode.php#112735](http://php.net/manual/en/function.json-decode.php#112735)
Nice engrish spam bruh
For those who missed the discussion, I proposed a slightly different design that has only 2 functions `array_first` and `array_last` and it returns both the key and value in a tuple, or `null` if it is empty. This permits patterns like this: if ([$key, $value] = array_first($input)) { // do whatever with $key and/or $value } else { // there was an error, such as an empty input } This design is only 2 functions, supports more direct use-cases, and encourages error checking. I understand it's not a *traditional* design but it overcomes multiple issues. ----- Someone chimed in saying we provide a single function `array_offset` that works for any offset, not just first/last. If we want to go that route I recommend improving `array_slice`'s performance for accessing only the last item and then people can easily create wrappers: function array_nth(array $input, int $offset): ?null { foreach (\array_slice($input, $offset, 1, true) as $key =&gt; $value) { return [$key, $value]; } return null; } // array_first($input) == array_nth($input, 0) // array_last($input) == array_nth($input, -1) 
I can recommend it from technical point of view. I've met main lector from Sylius personally and I must admit, it was very chat talk for me. The proffesional Github solution, passion based development and open-source first approach also suits me.
Accepted by a pretty narrow margin. The most controversial RFC to pass in a long while. And I get why, there are a ton of better solutions for this problem (the actual problem that it is trying to solve is getting those without changing the internal pointers of the array - unlike reset(), end(), etc..). array\_key($array, $offset) and array\_value($array, $offset) and throwing with invalid offsets would have been a much better option. 
I like this idea. Rather than worrying about all the good companies that hire remote employees, use a job site then do some due diligence on whatever companies you find. Indeed.com let’s you enter “remote” as a location. Stack overflow jobs has a checkbox for companies that “allow remote”. There are also some websites like weworkremotely.com that only list remote jobs (I got my job from here). 
Instead of an classic array or ArrayObject an plain old PHP [object with typed properties](https://wiki.php.net/rfc/typed_properties_v2) would be more appropriate. No more DTO's with setters/getters and no more Value Objects which requires to much boilerplate code. The downside of typed properties: This will only work in PHP 7.4.
I can’t grasp why would anyone use json for configuration given there’s an alternative with comments: yaml. You can basically parse a json with comments using a yaml parser. 
/r/PHPhelp
Got it thanksssssss
I once played around with the idea of creating a collection like wrapper for Generators. I created a `meddle` function that was used by my `map` and `filter`. https://github.com/pernicat/dynamis/blob/master/src/DynamisTrait.php#L80
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [pernicat/dynamis/.../**DynamisTrait.php#L80** (master → c50a1e9)](https://github.com/pernicat/dynamis/blob/c50a1e9bf3951cd9d8f20dffd92491b45344853b/src/DynamisTrait.php#L80) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e2jz42d.)
this will break json containing comments... 
I admit I’m still learning OOP, but in your SongEntity example constructor you have $this-&gt;id = new Uuid(); wouldn’t that mean that entity is strictly used for creation of new song entities? In other words, and unless it’s me not grasping these patterns fully still, every instantiation of the song entity, whether a new entity or a fetched entity wouldn’t it always generate a new uuid?
Hello &gt;I admit I’m still learning OOP, but in your SongEntity example constructor you have $this-&gt;id = new Uuid(); wouldn’t that mean that entity is strictly used for creation of new song entities? We have to distinguish between persisting entities (creating them in database or any other storage layer) and instantiating entities. In the example I am instantiating entity and giving it an id of my choice, because this makes things more predictable. If your code is predictable it is less prone to error. &gt;In other words, and unless it’s me not grasping these patterns fully still, every instantiation of the song entity, whether a new entity or a fetched entity wouldn’t it always generate a new uuid? Now I think we got to the point. Every-time we instantiate entity we indeed generate new uuid, but when entity is fetched from your database; framework hydrates it (it fills it with data from database in the way you defined in the annotations) and makes sure that entity state is properly reflected in the code (so the id is taken from database, constructor is not even called when hydration is happening).
Interesting, so in that example when getting the results from DB, it’s not instantiating the class on each entity itself, a la its not running anything from the constructor. Interesting.
It is similar :) but it has no query builder, no custom query language (you use mongo commands or SQL queries), supports both SQL and NoSQL (mongo for now) databases.
I go as far as to look at the companies house records when I look at jobs, see what the financial situation of a place is... 
&gt;You get a single, small advantage (you force the user to not instanciate the class twice) for some disadvantages (reduced testability and more work to reach 100% coverage, reduced testability for people testing with your library, not able to throw it into DI) I dont believe in 100% test coverage, testing thing like getters, setters, etc is pure statistics and brings almost 0 value. Overall we can say that connection manager is a syntatic sugar and you dont have to use it at all. &gt;As for the DI part, let me explain. In many modern DI libraries you don't have typical factory closures anymore, you only instanciate by classes. You don't define your service like That's true but when you have two instances of the same connection class or you do contract programming, DI will not auto-wire dependencies for you. &gt;I suggest you let the user of your library decide how many instances of the connection manager they want Maybe you are right I shouldn't have tried to overthink things for users. &gt;they want and more tightly couple them to the Storages (e.g. pass the connection manager to a storage and let the storage define what *named* connection it uses or something similar) This is probably also important for connection pools, where you create multiple connections and let the application use them randomly or by some score. To be honest I was thinking about it, but it felt a bit wrong. I think repositories layer is the only layer that should have knowledge about the connection. Unit of Work should have knowledge a out entities and their status. When designing a complex system I am always trying to find responsibilities and roles of the objects, the connection manager was quite a point were I was lost. I would put it into the entity manager but I felt like this class already have so much power and responsibility that adding more to it would be overkill. &gt; For some, testability is a personal opinion. I think it's very important. I do also feel like testability is really important, but I dont feel 100% code coverage is something that brings the highest value to the code (85-95% is the sweet spot in most cases to me). &gt;There are probably enough people that would tell me "No, static is okay, it's still testable with some workarounds and it makes it easier to use it" etc. I would say wisely used static class is okay, at the end of the day that feature does exists in most OOP languages (so there is a use-case for it). &gt;Good luck with this and further projects! Thank you for your kind words.
Yeah, so about that... https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html
YAML has a ton of problems too. https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html
Yes, the reasoning behind it is; when you instantiate entity it should be in valid state. Data that entity is keeping reflects this state. When you save entity and later query it from database you expect your entity to be in the same state you have persisted it - calling constructor once again on persisted data could destroy the state.
Every language has its edge cases. I dont care about 9 ways to insert a multiline string, I just need to know two of them; IDE helps with readability (indent guides anyone), etc. Anyway, I wasnt advocating yaml per se, just pointing out that JSON is a subset of yaml, so a JSON with comments is a valid yaml file. 
literally first class-xxx--xxx.php file and there is html inside snake case and other horror :( wordpress community is another world
2004 called, they'd like their PHP coding standards back, please.
Something like this might be fine for private use, but if I was setting up for a client I would use something more professional and modern like accuweathers API endpoint. Sure, not free, but free things don't always work.
Stackoverflow. Don't ruin reddit
The issue is that null (and false) can be valid values in an array, so those can’t be used to short-circuit the function.
Sad answer, and even worse to see its popular. How about responsible indie programmers, or companies who employ the programmers, decide how the programmer will do it based on what is in the best interest of both the company and client, in regards to maintainability, stability, security, etc. I have no respect for devs who drop their non-standard heap on unsuspecting clients who won't be able to find a respectable shop take responsibility for what some lone ranger dropped on them when the dev disappears for any number of reasons.
I have a noob question. How come you can instantiate user/event/etc.. objects in your manager.php class constructor without requiring/using them at the top of the file? Is it because they all exist in the same namespace and PHP automatically picks it up?
PHP 7 does have a Datastructures extension btw. Nothing about it is as robust as what frameworks provide but it does have a Collections class.
`&lt;div class="snapcode-caption"&gt;` `&lt;div class="unlockable_title"&gt;` `Computer Head` `&lt;/div&gt;` `&lt;div class="unlockable_subtitle"&gt;` `by Jinnie the Wew` `&lt;/div&gt;` I want to regex the contents of the divs but it seems not to work? up until 2 weeks ago it worked fine I think the added line and whitespaces is what makes it not work anymore, any work arounds? Sorry quite new to regex and all that
Don't use regular expressions to parse html. Use a XML parser like \\DomDocument, or even better Symfony\\Crawler.
Or at least something like [simplexml](http://php.net/manual/en/simplexml.examples-basic.php) 
Like others said, don't use regex for this. If you're scraping a site, I highly recommend [Goutte](https://github.com/FriendsOfPHP/Goutte). However... to answer your question, you need the "dot matches newline" option "s". Your full regex would look like: "\~&lt;div class="unlockable\_title"&gt;(.\*?)&lt;/div&gt;\~s".
&gt; Normal arrays are more performant than ArrayObject I'm not sure this holds true, at least makes no sense for array operations ie. ArrayObject methods vs global array functions. Only theoretical overhead may come at object creation, but it is an implementation detail and need to be checked if it really pays off vs polluting global namespace.
You can run plain old SQL queries using doctrine perfectly fine. No strings attached.
no, it won't ... 
&gt; Because mostly array is used as data structure? same with ArrayObject &gt; and it's passed as value not reference even worse for large arrays
I think most of the people here are understimating the benefits of using an ORM, like being DB agnostic, focus on business logic not DBAL, caching, avoid writing a lot of boilerplate, etc. If you don't like it, just don't use it. But remember that not using one will probably will impact on your productivity/maintainability of your application. If you need extreme performance then an ORM isn't an option. 
Hooks and procedural are alive and well in Drupal. Hooks will probably be replaced by Events instead. One of the downside of Drupal "modules" is the amount of time to load .module files on each new module you put in. This is being solved by having less code in the .module files but not completely out of the water just yet.
I don't know what book to intro but I have seen a lot of people in this sub suggested phptherightway. https://www.phptherightway.com Hopefully it's a good start. There are also videos and online materials to learn. You almost don't need a book to start with :)
Also checking of flags, property access etc. I don’t know any exact numbers either, I’m guessing here. There will come a time when PHPs array is an object, a well optimized one. But it is probably not ArrayObject, while ArrayObject is the right tool for many other purposes
Not having it in the language at all would have been the best option. There's simply no legitimate use case. It's one of those solutions in search of a problem.
Where `simple` refers to the people using it and finding out it's a terribly broken non solution in basically any use case.
I wrote: [https://github.com/JABirchall/NimdaTS3](https://github.com/JABirchall/NimdaTS3) a few years ago. Wouldn't say its powerful, But its effient and modular. It is designed to run as a service and can run from months on end. 
That may not work for edge cases. That Regex surely isn't context aware.
I'm using murach's php and mysql because it was the book assigned for my php 1 class. If anyone's used it or heard anythimg about it I would love to know
Perhaps same as why people write VanillaJS?
This makes no sense: a bad dev can provide a shitty software that will be completely insecure and unmaintainable, even with the best framework ever. On the opposite, a good dev will probably be able to build a maintainable and secure software without framework. This is a skill issue, not a tooling issue.
if (count($whatever)) $blah=array_value_last($whatever);
&gt; This design is only 2 functions So what? It's not like functions are a finite resource that need to be conserved.
How did you get that I was saying it was a skill or tooling issue? Maintainability is the main issue I pointed out. Frameworks have an opinionated way of covering the other points I made, in a standard fashion. I'm coming from a point of business and responsibility. I don't doubt anyone can write quality code w/o a framework... it's just not in the best interest of the project owner.
You are right, it's not context aware like yours, but it covers my needs when i write configs
I read murach's mysql and it was excellent. Have it on my reference shelf
I don't think you understand the problem. The problem is that you can't do if(array\_last\_value($array)) if array\_last\_value can return null or false. And since both null and false are valid values in an array, there's no way to make this function work within an if statement, because the function cannot itself return null or false because it would break expected behavior.
I just want to make sure we're talking about the same example from your readme. This section: [https://github.com/igniphp/storage#entity](https://github.com/igniphp/storage#entity) shows both the "This entity cannot be stored yet" \*and\* "The above entity can be stored, retrieved and deleted..." with \`\_\_construct()\` having \`$this-&gt;id = new Uuid();\` So my question is, how would the SongEntity be retrieved (via repo, or otherwise) so that \_\_construct isn't called? In other words, when retrieving songs, each song is instantiated as a SongEntity, correct? Why wouldn't it be given a new Uuid() since it's in SongEntity's \_\_construct()?
That's what the count() is for. if (count($array) &amp;&amp; array_last_value($array)) then ... It is the nature of PHP that you very often have to combine tests in if statements, since so many things are taken as logically equivalent to false. In that respect, there's nothing out-of-the-ordinary about array_last_value.
But array\_last\_value would return false, because the last value is false. This would result in unexpected/confusing behavior of the if statement. In addition, the function itself is unable to return null or false, unless it is the last array value, because those are valid array values. If the programmer is testing for null/false as the last value of the array, but the function returns null/false for another reason, the programmer has no way to detect that.
It's not that hard to grasp, actually. It works without a userland dependency. It supports common data types where simpler formats don't. It can be parsed regardless of language (in response to "why not just use PHP"). Everyone already groks JSON from everyday dev life. So on and so on... The whole comments thing is an edge case, as well. As are the myriad of other problems people bring up about its viability as a config language. Clearly pick something more suitable if it doesn't tick your boxes, but it works quite well for a very large number of scenarios where something like YAML would be objectively worse.
&gt; But array_last_value would return false, because the last value is false. This would result in unexpected/confusing behavior of the if statement. Only if the function were being misused. As described in our examples, the purpose is to determine whether the last value of the array is something that coalesces to boolean negative. Otherwise you are complaining about PHP in general. unserialize(null) returns the same as unserialize('b:0;') and json_decode(null) returns the same as json_decode('null') even though very different things are happening. Likewise, there are a zillion other such cases where you can't tell whether the operation failed or simply returned a failure-equivalent value, unless you use another test first. Should we therefore not have json_decode in the language?
&gt; You can't parse [X]HTML with regex. Because HTML can't be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The &lt;center&gt; cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the n​erves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow it is too late it is too late we cannot be saved the trangession of a chi͡ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) dear lord help us how can anyone survive this scourge using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes using regex as a tool to process HTML establishes a breach between this world and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but more corrupt) a mere glimpse of the world of reg​ex parsers for HTML will ins​tantly transport a programmer's consciousness into a world of ceaseless screaming, he comes, the pestilent slithy regex-infection wil​l devour your HT​ML parser, application and existence for all time like Visual Basic only worse he comes he comes do not fi​ght he com̡e̶s, ̕h̵i​s un̨ho͞ly radiańcé destro҉ying all enli̍̈́̂̈́ghtenment, HTML tags lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq​uid pain, the song of re̸gular exp​ression parsing will exti​nguish the voices of mor​tal man from the sp​here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​he final snuffing of the lie​s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T ALL I​S LOST the pon̷y he comes he c̶̮omes he comes the ich​or permeates all MY FACE MY FACE ᵒh god no NO NOO̼O​O NΘ stop the an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨe̠̅s ͎a̧͈͖r̽̾̈́͒͑e n​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ TO͇̹̺ͅƝ̴ȳ̳ TH̘Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ &gt; Have you tried using an XML parser instead?
The RFC provided 4 functions and 4 use cases: you can get the first/last key/value. My proposal provides 2 functions and 6 use cases: you can get the first/last key/value/both. Which is better? Ignoring any other issues caused by the two different designs I think most people would agree the version with fewer functions while providing more use cases is a better design. That was the point.
Very well done. 👍
This shows your ignorance on the matter. Arrays are passed by-value but have a copy-on-write behavior. This means making copies is cheap as long as they aren't modified. If they are modified the cost is roughly the same as if you had copied it in the first place. This is the *desired* behavior for large arrays, because making defensive but unnecessary copies is costly.
Could you give an example?
Put them in an array, and use the variable as keys.
Works fine for actual XML documents - I’ve been parsing RSS with it for years without issue. But yeah, HTML not so much. 
So there is some wiggle room, then?
They are all in same namespace
PHP world is developed enough now and there are many tools not onl Laravel . And Laravel is not even the best issue for the business. (to build maintainable, stable, secure software). For example for accessing database there is Doctrine, for HTTP layer there is Slim. Devs now decide what bricks to choose to build a product. 
Have to note that Sylius is a framework, not an out-of-the-box solution. And it will never be, at least that's the vision authors have for it. It is and shall be a *framework*. It is never intended to be a "catch-all" solution - it is intended for you to take it as a tool and mold to your needs.
[source](https://stackoverflow.com/a/1732454)
Next thing I would recommend is the OWASP web application security site.
"when the project is a good candidate for a framework." When it's usefull to use a framework, use a framework and when it's not, don't. The client shouldn't have to pay a single thought to what stack you'r using. For a simple application, why not use composer to install a router, pick an ORM and be done with it? Light weight, easy to maintain and easy to upgrade.
Sounds like you should be offloading some things, maybe most things, to a dedicated job queue.
How to make people to read the sub rules before post? https://i.imgur.com/DK1ckG8.png
in my experience php gets nasty in terms of long running scripts. if possible try to switch to nodejs or golang.
&gt; even worse for large arrays hurr durr what's copy-on-write
Try Guzzle? If you can't find a better way to transfer/use the data, at least keep a record of where it stopped and resume it. A lot of stuff can happen in a few days, and proper error handling is a must. Schedule a task to check the status of the script and resume it automatically.
For starters, you could stop calling curl_exec() twice on each try. There's no need to perform the same request all over again, it just doubles workload. You could try using [register_shutdown_function](http://php.net/manual/en/function.register-shutdown-function.php) to find out why the script crashes, and maybe notify you when it happens.
Add the calls you need to make to a queue. A queue can be as simple as a database. Spawn workers that will handle a certain amount of items each time they run. If one crashes, the item should still be in the queue.
For starters I would look at cleaning your logic, from a quick glance the one example you provided will take at least 50 seconds to run regardless of remote server response times and perform a successful operation multiple times. If the first call succeeds, why keep trying? Secondly, break the job down into smaller parts. Eg. Do a query to get all the top level data, say ‘shops’. When saving a shop save a queued item to process the shop. Then another process looks at the queued shops and fetches the products for a single shop eventually removing the shop from the queue. Using a proper queuing library is the way to go. Whatever you decide the software design should be that the process can be killed at anytime and restarted and it will continue where it left off.
&gt;So my question is, how would the SongEntity be retrieved (via repo, or otherwise) so that \_\_construct isn't called? Song is retrieved by cursor(repository creates the cursor) which hydrates the entity, hydrator is using unserialization method to create entity's instance.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [igniphp/reflection-api/.../**ReflectionApi.php#L31** (master → 051b88c)](https://github.com/igniphp/reflection-api/blob/051b88c8da9461fa81e7a3ca1c9b03402655d6c4/src/ReflectionApi.php#L31) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e2laq5m.)
Anyway don't simply trust my word, try it out :) You can find ready examples you can play with in the examples dir.
I completely agree with this, the way annotations are used is essentially plugging another language beneath PHP. Routes aren't the worst case of this, it's validation. I'm not sure why everyone has abandoned the idea of putting validation into config files, but it seems the preferred symfony way is to use annotations. From their docs: class Author { /** * @Assert\Choice( * choices = { "fiction", "non-fiction" }, * message = "Choose a valid genre." * ) */ public $genre; } So what happens if you miss a quotation mark, or a comma? There's no information until you actually hit the validation. If you don't know the syntax, it's completely incomprehensible why something is working/not working, so to read the code you need to know how the annotations work, you can't just discover what's going on by stepping through classes. What happens if you misspell `@Asert\Choice`? Does it throw an exception, is it just ignored because it's not the same format? Way too many unknowns for me to start using it.
Try and enable error logging within PHP (see [http://php.net/manual/en/errorfunc.configuration.php#ini.log-errors](http://php.net/manual/en/errorfunc.configuration.php#ini.log-errors)) - it ought to help you find out why your script is exiting.
My OCD is to press Ctrl + Alf + F to reindent my code then Ctrl + S to save the file everytime I made a change. =]]
I think I press ctrl + s approximately every 10 seconds ':). End up losing an x amount of work once, you never let it happen again.
I also save the file every time i make a change. I also **always** attempt to delete the last blank line in Atom, even though I know it will always come back when I save the file.
And.. should I say something about it or just leave it be?
Correct it every time, if possible in a way that he notices it (when you're looking together at his code, for example, or commit it immediately after his commit). Passive-aggressivenes FTW! \slpt
Whitespace corrections tend to obfuscate history, so once it's in the codebase it's in. I don't go back and fix. Reject at code review, IMO (with a pointer to an automated linting tool and a tutorial on rebase).
[removed]
Thats "Refactor -&gt; Extract -&gt; Field" on my mapping so I was quite confused, but I think I understand :D I also press Ctrl + S nearly every change even PHPStorm saves automatically (sometimes I switch to fast and it didn't changed). Just want to be "sure", you know ;) 
This is what an IDE with auto-formatting is for. I'm a consistent coder, so everything gets formatted and indented equally throughout my work, but for whatever reason I seem to be incapable of remembering the newline after a function declaration before the {, or spaces between my ifs/fors/etc and the opening (, which are both part of PSR-2 - which we try to follow at work. PHPStorm to the rescue, and remembering to auto-lint any code I write before commit!
Many years ago, I'd agree. I've got tens of daemons running for months, some of them for years without crashing these days - that's usually because of database restart (which is handled by systemd). PHP does not crash or exhaust memory by itself, that's not something other language would solve (but I've never used curl because there is no reason to do so - parallel/async/streaming HTTP can be easily done using core functions). Therefore, I'd try to fix my broken code (and inspect why it failed first!) instead of switching and experiencing the same issue again.
&gt; In many modern DI libraries you don't have typical factory closures anymore, you only instanciate by classes. You don't **have to** have typical factory closures anymore, in most, **simple**, cases your DI will be able to figure it out based on type-hints. There are still plenty of cases where an explicit configuration is necessary and any modern DI will support such cases.
I try to stay as close to the PSR-2 as possible. function test() { // one blank line doSomething(); // no following blank line } Depending on how the readability is I will add more or less spaces. Sometimes it's pretty obvious what something does and it doesn't add anything to the readability so I won't add too much, but sometimes I just want to follow the way I already done on other parts to stay conform.. My OCD kicks in at indentation. Everything that goes a blocklevel deeper has to be a tab level (4 spaces at normal code, 2/4 spaces at SCSS/LESS) further indentated. Otherwise it looks like a mess for me. I like it structured.. good damn I spend more time for one CSS file than my room in my entire life :D
&gt; I think most people would agree That's highly narcissistic of you. Why is fewer functions and more parameters better than more functions with fewer parameters? It's two sides of the same coin. Stop pretending your solution is strictly better just because you say so.
You are missing your target audience. There are no businessmen here in the urgent need of the business directory. Only programmers who hate a shameless blatant spam. 
My OCD is worrying that I'm going to harm myself, so I avoid going out of the house on my own.
You have a knack for drama. You might have read what I typed, but it sure doesn't seem like you comprehended it. I'm going to sound like a broken record if I address your points that have missed mine. I agree the client doesn't need to consider the framework and that you should do whatever you want with your in-house apps. I was clearly speaking about client work, and as you quoted, I was saying use a framework when the project is a good candidate for one. Your response is from another planet... and the comment about building a business case on a framework? WTF are you arguing? You drunk? I've lead dev teams for both product and service companies for 15+ years. I run a successful SaaS company and advise others. There's many ways to skin cats, but you have made no valid points opposing my post you got so inflamed about... On top of that, frameworks are simple to build simple apps with, so what's the point of going custom for a client project that would pass better between dev companies if it were developed following the standards of a framework. (Hey there's case for including a framework in a business decision) If you are saying that you would choose custom PHP with a random router for a client project, over choosing symfony, laravel, or any legit framework when they would be a good fit also, then I'll agree we have something to disagree about. If you are saying that developing a simple app in symfony or laravel isn't easy, we have something to disagree about. Otherwise, I don't get your point. :: snide signoff ::
This regexp should be able to handle many cases (only tried with regex 101, you'll have to escape and test it with php) : /(?(DEFINE) # define block for subroutines (?&lt;attname&gt;[a-zA-Z:_][a-zA-Z0-9:_.-]*) # attribute name (?&lt;attvalue&gt;(?:"[^"]*"|'[^']*')) # attribute value (?&lt;attribute&gt;\s+(?&amp;attname)\s*=\s*(?&amp;attvalue)) # html attribute (?&lt;attributelist&gt;(?&amp;attribute)*\s*) # list of html attributes (?&lt;divstart&gt;&lt;div(?&amp;attributelist)*&gt;) # start of a basic div element (?&lt;divend&gt;&lt;\/div\s*&gt;) # end of a div element (?&lt;notdivend&gt;(?:[^&lt;]|&lt;(?!\/div))) # character not part of div closing tag (?&lt;divcontent&gt;(?:(?&amp;div)|(?&amp;notdivend))*) # div content. Can have divs inside (?&lt;div&gt;(?&amp;divstart)(?&amp;divcontent)(?&amp;divend)) # a div ) &lt;div(?&amp;attributelist)* \s+class\s*=\s*(?:"[^"]*unlockable_title[^"]*"|'[^']*unlockable_title[^']*') (?&amp;attributelist)* &gt; ((?&amp;divcontent)) (?&amp;divend)/x
This is a programmer's subreddit, so a github link would be more suitable: https://github.com/litecart/litecart On the first glance it looks like quite a robust app from 2000-x. However, by the modern standards it's too much coupled, untestable and messy. 
I think it is a good choice to choose WordPress and use WooCommerce plugin. WooCommerce has tons of addons and large community. Also, it is lite weight. WordPress using WooCommerce are liter than Peestashop and Magneto. 
Link doesn't work, when you register it just takes you to your account page, so yeah.
Yeah, right... /s
Well, about 30 seconds into exploring the code after downloading it I can surmise it with a single sentence **BURN IT WITH FIRE**
Thank you...
step 1: provide your credit card info to the google API
Nah, this is so poorly written. You'll be better off using a modern ecommerce product.
What? But I didn't had to give my credit card info on Google.
I'd say you need serious help with writing the code that does what you need properly because the snippet you show is all kinds of wrong and no wonder it takes days to run and it just breaks. Find some freelancer that can help you. Though I'm not a freelancer anymore, I'd actually consider taking such a job on as a one-off provided there is a solid budget for it (it sounds like all sorts of fun for a proper background application with multithreaded curl and stuff).
my last API was made in Symfony using the FOSRestBundle. For authentification you can use [LexikJWTAuthenticationBundle](https://github.com/lexik/LexikJWTAuthenticationBundle) too.
This is a recent change. If your usage is above a certain threshold, it's no longer free. I've seen a few online apps with high traffic shut down because of this
It'll become mandatory soon, so you can get your "[monthly $200 free credit](https://cloud.google.com/maps-platform/pricing/)", forget about it and continue to strenghten how you depend on them. 
Ok I understand. 
Why not 4.x? 4.1 is already released.
What is vanilla JS you talking about, lol?
Sometimes I wish I could downvote more than once on reddit for spam like this.
Or better automate it and fail the build on it.
At least, the site content should match its name. Not fucking how to use Google Tag Manager or a post sharing the versions of jQuery. 
Thank you kind person! :)
Of course, no screenshooting :P Thanks! :) 
Hmm I will do that! :) Thanks!
Yeah, i am aware of that but thats a nice reminder :) Thanks!
Will do! Thanks!
Thank you kind person! :)
I love coding in PHP OOP because I have to write code once and then I can use it several times instead of writing the same code again and again just by creating the object of the class.
Yes
If you're talking of GUI applications then it would be troublesome with PHP. But as long as you are content with command line interface PHP is up to almost anything.
I didn't even know global const's were a thing, or that we could use arrays in const/define. Nice.
Inbuilt server being able to handle multiple requests at once.
Mostly awareness of maintenance burden: framework coupling is a real thing, and writing as-frameworkless-as-possible code will make that code easier to upgrade later on. This obviously depends on the framework, but Laravel has a quite bad reputation of sticking to a lot of code, once introduced.
It's not an OCD. Take a few minutes to read an article about OCD (e.g. this one: https://www.elitedaily.com/life/do-not-make-you-ocd/1099165 ) before flagging something as such, when in fact it's just an annoyance or something similarly naive.
function overloading
The best way is find a PHP course playlist videos and see each and every videos carefully and at the same time practice yourself each and everything you learn from the playlist. You will find lots of great PHP course are on YouTube as a playlist. Choose any one and complete that course. I have learned PHP with this process and it worked for me. 
Yes and as of PHP 7.1, private constant is allowed too. http://php.net/manual/en/language.oop5.constants.php