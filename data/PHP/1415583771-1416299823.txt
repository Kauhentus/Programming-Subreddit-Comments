There's much truth to what you say, but I don't think it's all that simple... Your example: CoffeeScript. It is a significant-whitespace language, which makes it resemble more of a mixture of ruby _and_ python. It also implements many syntactical features that would otherwise require much boilerplate in plain JavaScript: - class abstraction - array comprehension - variadic parameters Now you can do all of this in plain JS (which are the bits the CS compiles to), but it would be a pain. I believe one cannot 'make things "better" by removing semicolons, removing braces, making whitespace more meaningful' alone. If that's all a new language tries to do then I don't see much value in it. That doesn't appear to be the intention of CS though. Languages are tools. And all tools can be misused/misunderstood. When developers become CS developers or jQuery developers then that's A Bad Thing™. But when their strengths and weaknesses are understood, and they provide a clear benefit to a developer's workflow/projects then why not? I have written more CS than I care to think about. Same with [Less](http://lesscss.org), [Blade](http://laravel.com/docs/4.2/templates#blade-templating) and [JSX](http://facebook.github.io/react/docs/jsx-in-depth.html). All of these are just tools to make my workflow better, and all of them to something meaningful in addition to reducing the code I would otherwise have to type in CSS, HTML and JS.
Not on any site, but if this is a site you own and are developing locally you can do this using xdebug and its browser extensions.
It's not ambiguous. It think it was implemented that way to allow for faster/easier parsing.
that is silly. people create these tools to be used freely, that's the reason why they use specific licenses, like the MIT or CC license. 
I guess so but the symmetry would be nice since we have the short array syntax. [$a, $b, $c] = [1, 2, 3]; // vs. list($a, $b, $c) = [1, 2, 3]; If it would cause a substantial performance hit or implementation difficulty then I guess it's not worth the relatively minor aesthetic benefit. I was just kind of surprised that I couldn't even find it mentioned in passing in any RFC's/mailing lists.
That's really cool, but why don't you just use [Mint?](https://mint.com)
Sam's Teach Yourself PHP4 :D
This might be a moronic question... but can't the date be M, j Y instead of j m Y?
Oh gawd please, please, don't learn PHP4. At least &gt;=5.5 otherwise you're likely to learn some horrible horrible habits that will have you creating ridiculously insecure code
Merica!
No, please don't learn PHP4, it's an old version. I listed the book because it is the only one I remember reading like a book (and not a tutorial). It is from beginning of millenium, though, so see if they have a similar PHP5/6 version. Good luck!
Heh, well... it is moronic monday ;)
Even before becoming a programmer, I've always thought dates should go Y-m-d, least to most specific. At least with d-m-Y they're in the "right" sequence, even if it's in reverse. Is there a good explanation / historical reason why America does month-day-year?
BowerPHP fits in there though, it can be your composer dependency.
&gt; But when their strengths and weaknesses are understood, and they provide a clear benefit to a developer's workflow/projects then why not? Because the developer doesn't work as a lone dev, but rather as a part of a team. Because a single developer's workflow providing benefits may carry with it a significant knowledge burden that is now placed on the entire team, and everyone else that follows. The project doesn't just have its code in a language - it has a dependency. Less/Sass are a good comparison to coffeescript. They provide genuine benefits, and have increasingly become a base level requirement for front-end development. If you hired a dev, and they didn't know either of these preprocessors, you'd... well, you probably wouldn't have hired them. Their benefits clearly outweigh their downsides, especially on larger project. The negatives are minimal, raw LESS/SCSS is just as readable as processed, and the only downside is the actual processing step, which is reasonable. Coffeescript, on the other hand, imo has little benefit in terms of terseness, and a significant impact on readability and knowledge requirements. My opinion is that the reward for the loss is not positive, that the loss of expressiveness of the original javascript is harmful and negative, and swapping meaning for terseness is a very poor exchange. This, the gutscript thing, is even more the case. Drastic losses of comprehensibility and expressiveness for trivial to no benefit.
It is mentioned in the [Abstract Syntax Tree RFC](https://wiki.php.net/rfc/abstract_syntax_tree) because it is a change that requires multiple passes over the code to compile it correctly. The particular line is found [here](https://wiki.php.net/rfc/abstract_syntax_tree#decoupling_syntax_decisions_from_technical_issues). It is the first example in the list.
Is this built on a custom framework or a micro framework? What kind of directory structure does it follow?
So it is... Thanks, guess that answers my question. It will be interesting to see the possibilities that the AST opens up.
&gt;Is there a good explanation / historical reason why America does month-day-year? It's the most common way of saying (speaking) dates in the United States. November 10th, 2014.
&gt; My opinion is that the reward for the loss is not positive I think that's where we disagree. That's ok. But just for fun... &gt; Because a single developer's workflow providing benefits may carry with it a significant knowledge burden Here it sounds like you are arguing against using LESS/SCSS if only one developer knows it. &gt; a significant impact on readability and knowledge requirements Here it sounds like you are arguing against Python. &gt; for trivial to no benefit Here it sounds like you are arguing against ever using things like class emulation, array comprehension and variadic parameters, in any project, ever. https://www.youtube.com/watch?v=4-Tnx5roNm0
I'm really waffling on whether this belongs here.
yeah, I thought about that a bit. I figured that since this is not a regional conference, and since there is no social sub for php, it might be more acceptable. but mods: do whatever must be done.
I would have loved to go, but my plane actually arrives at 7:20. I’d be down for a beer after though. Hit me up: [@lavoie_sl](https://twitter.com/lavoie_sl)
I think Mint is just US/Canada.
Should we create one ? WebDevSocial ?
I've always thought this too. It also provides a natural sort order for anything that starts with the date. As for month-day-year, I don't know the true historic reasons, but this is how I make sense of it: I see it as a modified version of y-m-d. Everyone knows the current year, so the most relevant information is month and day, so that is still stated m-d for all of the reasons that I think y-m-d is superior. When the year needs to be stated, it is added at the end because that is more comfortable to speak; "In 2014, on November 10th, ..." vs "On November 10th, 2014, ...".
&gt; How do I learn all the technologies that have emerged out in the recent years? Slowly. Read. Books, large projects, small projects, blogs. [I wrote something on PHPUnit](https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/). [I wrote something on XDebug](https://jtreminio.com/2012/07/xdebug-and-you-why-you-should-be-using-a-real-debugger/). [I wrote something on Composer](https://jtreminio.com/2012/10/composer-namespaces-in-5-minutes/). Frameworks aren't for learning how to write PHP. You should already know PHP pretty well before deciding on using a framework. If you try to learn OOP through using a framework you're Going To Have a Bad Time. [Read this](http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1) to figure out *what* a framework actually is and what it's for. If you're not very familiar with *how* to use OOP, [read /u/ircmaxell's blog](http://blog.ircmaxell.com/), from the beginning. If you need to actually gain more in-depth understanding of OOP, read [this](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117) and then [this](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X).
You're basically asking too much. You need to pick one at a time and go from there. Most of these are answers to questions you don't know how to ask yet. All the answers in the world won't help you, because you'll just get confused. What I will say, though, is that most of these things are a matter of mentality rather than learning. OOP, for example, is about making more maintainable and re-usable code. The actual process is important, yes, but it's understanding **why** you want to do it that really matters, otherwise you'll resist it. Similarly, ORMs are an excellent way of removing the responsibility of the programmer to handle SQL statements, but until you see why that's a good thing it doesn't appear to be particularly beneficial. Composer is great for managing dependencies, but unless you've spent some time in dependency hell you may not realise what use that is. I'm going to give very quick overview of these, but they're all deep subjects. &gt; OOP PHP - not the fundamentals, but in style - how is it used to structure and code a project. It depends. There are as many views as there are programmers. Essentially, though, the point is to make small objects that do simple things, then bind them together to do bigger things. Each object should do only what it needs to do, and nothing more. &gt; Composer - Is there anything more needed, other than updating dependencies? Updating dependencies and setting your autoloading root, mostly. &gt; Unit Testing - HowTo &amp; Best practices - usage in real projects. That's a complicated question. Some people advocate driving your whole development process with unit tests. Others say that as long as you have x% code coverage you will be fine. The fact is, if you do it at all, you're above 80% of PHP programmers. Learning how to start it is hard, though. &gt; xDebug - HowTo and usage in a real project NFI, tbh. Though I know it's "better", PHP is so easy to dump debug that I usually just do that. I know it's shit, but... setting up xdebug has been too much of a pain in the ass too many times. &gt; MVC Patterns - Fundamentals, Patterns, Best Practices The key here is that there are three layers. People will talk about "the model", but really they should refer to the model layer. The model layer is "business logic", data, etc. The view layer is things that are either seen or returned by the database. That usually means HTML, but it's more than that. It's anything that gets presented. The controller layer is in between these - it's the thing that takes requests, understands them, and uses them to get data from the model, and show it to the view. This is simplified, and there's a lot more to it, but MVC is not itself hugely complicated. It basically comes down to keeping everything to where it belongs. &gt; Depths of MySQL - stuff other than basic CRUD This is a whole long field of study of its own. Unfortunately you just have to study it. &gt; REST - and the alike REST is also pretty simple, but often misunderstood. The core concept is "resources". A resource is a "thing" that the API can return. The other part of it is the request type. A `POST` request and a `GET` request, a `PUT` request or a `DELETE` request are all different, and should have different meanings, depending on the resource. For example, if you have a `/projects/` resource, a `GET` request on it should list all the projects. A `POST` request on it should create a new project. A `GET` request on `/projects/26656` should return project 26656's details. A `PUT` request should update it. There is more to it, but that's the general idea. &gt; PHPDoc - what, how, where? Minimal, but everywhere! &gt; Popular Frameworks like Laravel - "why the heck am I learning the 999th way of writing PHP again?" You're not. It's just PHP. It's just way more "object oriented" than you're probably used to, and using design patterns that are maybe unfamiliar to you. It's called "learning", and you need to get used to it. Laravel and similar frameworks provide a great deal of benefit. In particular they make code that is more maintainable, testable, etc. &gt; ORM - What is it all about, HowTo ORMs are magical beasts that (like a framework) can be termed an "abstraction". An abstraction is a layer on top of something else to provide functionality more simply, and hide complexity underneath it. An ORM does this to SQL. So something like `return Project::all()` is the same as `return $database-&gt;query('SELECT * FROM projects')`. What they're most beneficial for is that the ORM stands for Object-Relational Mapping. This means that it doesn't just abstract the database tables, but rather the connections between them. For example, you can tell your ORM that your Projects object/model has many Tasks. This means that when you get the details for a project, you will find that the Tasks for that project are automatically accessible, you don't need to use any joins, etc. Like most abstractions, the benefits of an ORM are only realised by trusting the ORM to do the right thing, and letting it do its job while you focus on doing yours. **If you want to learn any/some of these things, I'd suggest following through a basic tutorial on Laravel. It's a simple framework, but a good tutorial (and I recommend Laracasts for this) will walk you though Composer, MVC basics, Laravel, and a good ORM. Laravel is also very good for making a REST api.** 
I've been looking through the source code of Invision Service's IP.Board lately, and was wondering what the comment line /*noLibHook*/ Means?
I recently came across this article when trying to figure out how to get PHP to create and write a text file: http://davidwalsh.name/basic-php-file-handling-create-open-read-write-append-close-delete Since I know very little about PHP file handling, it was a great list of snippets that I could copy/paste and I thought I understood what was going on in the code...mostly. But in order to get the PHP to make the file, I had to change the permissions to 777 on the folder and files that I was writing to (I kept getting something like "...[function.fopen]: failed to open stream: Permission denied...") Is that the correct thing to do? It doesn't seem like I should have to do that. I'm also unable to get that to work on my hosted server, so I'm guessing they don't allow some part of that set up for security reasons or something. So, am I a moron for changing the permissions? How should I accomplish this?
purple tights and mask with the PHP logo and a katana. make sure you only run around during night time. ultimate requirement is you don't get seen by anyone. that's what makes you a ninja.
Oh..cool. Thanks.
other BaaS solutions you can look at are http://hood.ie/ https://www.firebase.com/ a BaaS makes decisions for you, and for some, this includes your authentication layer. it's not really a one-size-fits-all approach. it's really aimed at a specific type of applications (collection-based and simple profile/authentication requirements). for some types of applications, the things a BaaS provides is enough.
Linux permissions like what you mentioned go [owner][group][all] `7` is the most liberal you can give, meaning read/write/execute. Basically what you're saying is that every user on your server should have access to read, write and execute from within that folder. You *probably want to add your PHP user to that folder and set to 755.
Oke, but how is that when i'm gonna sell (PHP) apps / websites for a living ? Is it still the right way on doing it ?? 
Thanks, i'm gonna check it out later today I'm working at the moment 😫 
Check out symfony's install page. They discuss this clearly. http://symfony.com/doc/current/book/installation.html#configuration-and-setup
Yes!
So here it is: I am still programming with functions, not with object oriented classes. How much of an issue is that? I am not sharing my code a lot with other people, I mostly work by myself. What would be a good motivation for me to switch to object oriented programming? Or am I too late already and there is another way to write code already that I rather learn now?
I'm still unsure what all that means exactly, but those commands totally worked and I'm able to create files with the permissions still set to 755. So, thank you!
It seems IPB implements library hook by modifying the require call, and the noLibHook instructs it to skip the line from being processed.
The script basically seems to only have a malicious use. Specifically, the part of using a random well known user agent string, seems like an attempt to avoid acting suspicious. Oh, and ofc the whole part about harvesting email addresses is just a shitty thing to do and even to encourage. 
Basicly, PHP runs on top of web server. So essentially web server is executing PHP. So web server is the user of the application. So what you need is that your writable folders are owned by web user ((not PHP user as jterimo suggeste) and have 755 on them this bash line grabs the server user aka HTTPD user by looking at the processes running and stores it in variable HTTPDUSER HTTPDUSER=`ps aux | grep -E '[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx' | grep -v root | head -1 | cut -d\ -f1` then with chmod, it gives to the HTTPDUSER 755 permission to the folders required for write in the application sudo chmod +a "$HTTPDUSER allow delete,write,append,file_inherit,directory_inherit" app/cache app/logs Usually web server user on linux systems is www-data, so all you need to do is basically chown and chmod www-data on your folder. 
Imagine your sql queries are like this: $db-&gt;where('id', 1)-&gt;select('product')-&gt;toArray(); instead of making queries and parsing result. Isn't it great ? :) There is never to late for learning! There is a lot of articles in internet, but i recomend you to buy a book about oop in php. That would be good motivation, coz when you'll have one - no matter what - you will at least try to read it! :)
Never too late, there are pros and cons to both and depending on the situation you may prefer to use one over the other, but I'd definitely recommend learning OOP and things around it, thus expanding your overall programming knowledge.
Funny, I've google "NoLibHook" quote a few times and had nothing... why the hell didn't I just google library hook? I will never know!
Oh, in that case we, of course, agree. I an understand for whatever reasons making parameter types invariant but i never understood why they are unrestricted when overriding.
when i was first introduced to html/php, i thought "wah, you don't have to download/install anything to see the result, just open a web page" and also "wah, you can code it with a simple text editor...and in any OS..." and after i tried it i was like ... "wah, you do one modification, everybody has the modification : you don't need to ask everyone to update"
er pardon my ignorance, but wouldn't those 'where' / 'select' functions would have to be written along with the sql queries. How does OOP help here ? Couldn't the same be done via regular functions ?
From the money side of things: Most of the modern frameworks and tools in PHP are OOP based. Having the ability of understanding, extending and working with those tools will result in a higher value for you as a developer in the industry.
Is performance between single and double quoted strings something you give a damn about?. I try to account for this, but I am not too picky about it, however, I have met people who is *adamant* about this. I'm just curious.
For simple applications and websites OOP can cause unnecessary complication, however for more advanced websites OOP can be a great result of necessary simplicity. It's never too late to learn to do either, just what is best for the job at hand.
There's basically no difference: http://nikic.github.io/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth.html. Use the quoting that's most readable for your case, not the one that "performs" better.
I think [this one](http://www.amazon.com/PHP-Cookbook-Solutions-Examples-Programmers/dp/144936375X/ref=dp_ob_title_bk) is pretty good,with segments like problem-solution-discussion.Here is a [snippet](http://codepaste.net/b9wr1a) 
http://www.phptherightway.com
Method chaining is, in my opinion, a very clean and elegant solution in some cases such as this one. There is also the fact that this looks like an ORM, which very likely has abstractions for different database systems. With a line or two of code, if you did everything right, you can easily change your database to something else very quickly. I don't think there are any fully featured ORM's for PHP that do not make use of OOP, it does not make sense as the complexity is quite high and OOP helps manage that. 
in b4 ::
Paginate based on the last ID you saw. For instance your url would be feed.php?before=250 where 250 is the last id you read and you want everything before that. If you need to account for some grouping then somehow filter those out either via keeping a list of ids in javascript (assuming thats how you're loading the feed) or by reading the past page with the request and doing the same thing. Not perfect but should be good enough.
Please don't. It's a horrible piece of code and should not exist.
Sometimes it's best to let some things slide. As long as there aren't lots of posts like this edging out more serious ones there shouldn't be any problems
depends on the license, but more often than not, yes. there's a reason why people put these libraries out there. they want the world to use them.
The result of an assignment is always the value of the right-hand side. ("Value" here mainly meaning that the result can not be used as a reference.)
Operators are implemented in http://lxr.php.net/xref/PHP_TRUNK/Zend/zend_operators.c. Not sure what you mean by "types" being implemented - if you're looking for the typedefs for zvals, strings, hts etc, take a look at http://lxr.php.net/xref/PHP_TRUNK/Zend/zend_types.h. If you're looking for type conversions, those are in zend_operators.c as well. Note that these links are for the PHP 7 implementation.
Thanks! By types I meant variable types e.g. float/int. I see they're in files like zend_float.c
Thanks but it is not my site
Is it safe to use GET variables like this ? I guess this is a pretty basic question but I couldn't find an answer. if($_GET['id'] &lt;= 0) exit; $query = $db-&gt;prepare("SELECT * FROM users WHERE user_id = ?"); $query-&gt;execute(array($_GET['id'])); $data_user = $query-&gt;fetch(); Edit: Some clarifications: I think this way of checking IDs is very elegant, and I wonder if technically it is 100% reliable and if it is good practice.
It goes against all good practices. If you can't see that on the first glance when you see their example below, then I highly recommend that you work yourself through [this list](http://stackoverflow.com/questions/16356420/mvc-for-advanced-php-developers/#16356866) of learning material. $book = R::dispense("book"); $book-&gt;author = "Santa Claus"; $book-&gt;title = "Secrets of Christmas"; $id = R::store( $book ); Static == global == bad. Public vars here should be getters. Active Record is a violation of SRP. And on goes the list...
So in that case the value would be the result of the *assignment*: $c = ([$a, $b] = [1, 2, 3]) Which is the value being assigned (`[1, 2, 3]` in this case). Therefore, it would be `[1, 2, 3]`, even though it doesn't look like it should be... These are weird rules...
This is great, thank you.
 &lt;!--#include file="php-5.6.2.tar.bz2" --&gt;&lt;?php include("php-5.6.2.tar.bz2"); ?&gt; What, I don't even... &lt;?php using Google.GData.Client; using Google.GData.Spreadsheets; namespace MySpreadsheetIntegration { class Program { That isn't even PHP! That's C#! I'm sorry, but you clearly have little to no experience programming, and what you're asking is for someone here to basically solve your problem for you completely. It would be fine for you to come and ask for help solving a single problem, but you are basically asking how to do the entire thing! Not to mention what you've posted here isn't even PHP code - it wouldn't even run at all.
Someone might say that it is safe, but I would say no. The reason is that we are humans and we tend to make mistakes. You will add this kind of checking every time, but it needs to be only once that you forget and your DB will be compromised. Check values where it should be checked. Here we have checking one line before but in real life you probably will put it at top of file, then add some logic, and $db call will be in line ~200. Next developer will come, see this silly if statement and would delete it. I suggest (in this case) to use inline print_f when using query method. 
This is definitely not safe - you could end up being a victim of SQL injection. Someone could put a string like "1 OR true" into that get and delete your entire table, or do even nastier stuff.
Thank you :)
I agree with this, to be honest I write everything in an OOP way, as it's just easier all around.
Here's a concrete example: I use Ansible to manage all my infrastructure: from infra deployment, vm provisioning and configuration management to app deployments. Everything is versioned in yaml files. So i can have a file with yml parameters describing my databse configuration, and i can just use that file in Ansible to provision my db server, and dump that file in my php app to use the same parameters. The added value is the fact that such portable format (yml, xml, whatevs) exists, and the fact that projects use it. 
If someone enters a string, it is converted to an int (0) in the comparison. It therefore stops the script.
Interesting, thanks. What exactly are the Zend opcodes the vulcan logic disassembler outputs? I assume not actual assembly opcodes.
It would not. Validation stuff and so on. If you actually need to do such things, you'll face high complexity issues, and that's precisely why we have YML/XML/BlaBlaBla config formats.
This is not safe, due to how PHP parses strings. A string like '1 OR true' will be converted to 1, and skip your check. You should be using prepared statements (as seen here: http://stackoverflow.com/questions/8263371/how-prepared-statements-can-protect-from-sql-injection-attacks) as well as more stringent validation.
1 is still an int... I use prepared statements, this was just a little example :)
This is the second time Laravel has had a weak type checking vulnerability, which begs the question: is there any reason NOT to do strict type checking ubiquitously throughout your application? If you're going to do `!=` or `==`, why not just just do `!==`, `===` instead? I know sometimes integers can be stored in a database as strings, and when they come out it could cause issues, but, if that's something you have control over it shouldn't be an issue.
1.0 == 1 is true in both languages php: http://3v4l.org/CS6pK js: http://jsfiddle.net/t184oc1j/ 
Wow, this amazing =)))) So to bypass leet Laravel security all I had to was to use '0' as a CSRF token because: var_dump("ssdf" == 0); // TRUE I can't facepalm enough =)))
Like the other comments mentioned, it seems like you're in a bit over your head just yet with with this. Perhaps you could take a look at this: http://jlord.github.io/sheetsee.js/ It allows you to insert a Google Spreadsheet on a page using client-side javascript only. 
I'm American... but for some reason I still giggled
still leaps and bounds ahead of tinkerbellPHP
If your integers are stored as string you should typecast them to integer instead of relying on == bs
Thank you. I am aware that I'm (significantly) over my head here. Historically I've always been a web designer/developer with no history in the actual programming side of things, so in trying to learn everything and do tutorials and read up on these programming languages in a short amount of time I was given to complete this project, I've been getting very confused. Thank you for you help. 
Use this as an opportunity to check your own CSRF layers, folks. It's an easy mistake to make.
Does tinkerbellPHP even handle CSRF? =|
&gt;is there any reason NOT to do strict type checking ubiquitously throughout your application.. PHP converts numerical array keys to integers silently. So if you do $a['123'] = 'abc', you get $a[123] = 'abc', so.... Really people, just let php die...it's a lost cause...
Oh, sorry for the misinformation then. Must have been a floating point bug or something. Can't remember the details other than an int not matching a float or double. 
In JavaScript, all numbers are floats (doubles). It doesn't have the concept of a true integer. In PHP, there's a distinction, so a type-strict comparison shows them as different.
It doesn't claim to, there is no 'form' component or anything. Which part of `minimal` do you not get? I believe that instea dof doing a lot of things you should instead do only those that you can do good
What do you mean by reading like a book? Kinda like http://learnyousomeerlang.com/ ?
Thanks, just needed that &amp; i'm to lazy to search a good one
Although there are PHP specfic profilers, using [strace](http://linux.die.net/man/1/strace) would probably find the issue really quickly. The script below to runs and attaches strace to all running php-fpm instances. I'd suggest running it first in 'summarise' mode. That will show you which system calls are taking the time. And then run it in full detail mode, and look for the system calls that the summarise run identified. Or you could just disable the plugins one at a time, and measure the performance difference. #!/bin/bash mkdir trc rm -rf trc/*.trc additional_strace_args="$1" MASTER_PID=$(ps auwx | grep php-fpm | grep -v grep | grep 'master process' | cut -d ' ' -f 7) summarise="" #shows total of calls - comment in to enable #summarise="-c" nohup strace -r $summarise -p $MASTER_PID -ff -o ./trc/master.follow.trc &gt;"trc/master.$MASTER_PID.trc" 2&gt;&amp;1 &amp; while read -r pid; do if [[ $pid != $MASTER_PID ]]; then #shows total of calls nohup strace -r $summarise -p "$pid" $additional_strace_args &gt;"trc/$pid.trc" 2&gt;&amp;1 &amp; fi done &lt; &lt;(pgrep php-fpm) read -p "Strace running - press [Enter] to stop" pkill strace
http://i.imgur.com/wChKexS.jpg
That is handy. I'd like to point out this example where PHP does things differently and causes headaches for a lot of php programmers. To anyone unaware php converts away from strings if it thinks it can make the string another type when using loose comparision. Javascript says this is false but php says true. "000000000000e1" == "0e2" or in number form ```0 x 10^1 == 0 x 10^2``` so naturally that statement is true because 0 is equal to itself. ~~~Then there is this odd ball throws out all the "rules" from what I can tell. https://eval.in/219566~~~ Nvm. I guess php is making a boolean == string comparision in which string is always true which goes against PHP preference to convert away from a string whenever possible. This crap is why I don't use '==' lol. 
I'm curious as to what leads you to believe that such ignorant statements are accurate.
Which one?
&gt; it's a lost cause... To me it looks far from lost.
No it doesn't. https://github.com/laravel/laravel/blob/master/app/filters.php#L84-L90
 $name = $_POST['name']; $sql = "DELETE FROM nametable WHERE pn='$name';";
**Really you should look into using [PDO Prepared Statements](http://php.net/manual/en/pdo.prepared-statements.php).** If PDO is not an option for then you can simply do this in a couple ways... $sql = "DELETE FROM nametable WHERE pn= '{$_POST['name']}'"; or $sql = "DELETE FROM nametable WHERE pn= '".$_POST['name']."'";
Thanks a lot I'll try this as well good info from all you huys
You can use XDebug/Xhprof/strace/etc. but the quickest and easiest soution would to sign up for https://blackfire.io/. It does a lot of the same stuff as Xhprof but it requires significantly less setup. But before going into PHP profiling what I would do is run your site through Google Pagespeed Insights to see what can be optimized on the client side: https://developers.google.com/speed/pagespeed/insights/ If you're running WordPress (because of plugins) you might also want to look into a caching plugin (W3 Total Cache or similar) that can cache queries/functions in WP, concatenate scripts/styles to optimize the page load, and many other things.
You're trying to put PHP inside a string. Some ways to write what you appear to be trying to do that will work: &gt; $sql = "DELETE FROM nametable WHERE pn= '{$_POST["name"]}'"; or &gt; $sql = "DELETE FROM nametable WHERE pn= '". $_POST["name"] ."'"; As a side note, including $_POST or $_GET data directly into an SQL query like this is bad practice because it leaves you vulnerable to SQL injection attacks. Read up on escaping (using mysql_real_escape_string / mysqli_real_escape_string / PDO::quote) and prepared statements.
Thanks for the info will def forward to developer. Also I, using supercache and hostgator vps 
ok. np.
Thanks I'll think I'll try that first 
&gt; but for all I know the php interpreter is smart enough to not do the calculation again I'm fairly sure it's not. What you can do is make it a property and calculate it on the first run when the property is null, cache the value into the property and just return that on subsequent calls.
Because you can't just make shit up and expect it to work.
 #2 and #3 shouldnt even be an option. Using unfiltered POST input in a query is the stupidest thing you could do.
You're going to forego proper security because of laziness? Please don't
I probably didn't make myself clear enough. The file is application specific and created when you run `composer create-project` (or via Laravel's installer) and gets copied across. Over the development lifecycle of the app you're expected to add to it, therefore it's not in the `/vendor` directory. Putting core framework security logic in a file like this is always a mistake.
NO. NO NO NO NO NO. NEVER EVER EVER EVER EVER EVER put raw $_POST variables in a SQL string! Do you WANT your database to be destroyed?
Wouldn't call this core framework logic - it depends entirely on the forms you create/endpoints you provide. Make an API and you would never touch this CSRF filter. Would be interested to see how many frameworks include this functionality outside of a form builder component...
This tone is why folks don't welcome you (and by extension your framework) with open arms. 
Because PHPStorm has a PSR-2 code format setting and doesn't have a "I've been coding for 50 years and brackets on new lines are stupid" code format :D
They started it =P
As far as SQL injections are concerned, this is sufficiently safe. When adding values to prepared statements via `-&gt;execute(array())`, they'll always be cast to strings. In case of PDO::EMULATE_PREPARES the query would become `WHERE user_id = 'strval'` (where strval itself is properly escaped in either case). It's the SQL server then which typecasts the literal value for comparison to a numeric column. Such that `WHERE user_id = '123'` would work.
/u/dracony: /r/PHP's resident manchild. 
Yup it definately is. Which is why I suggested he use PDO Prepared statements... amazing how many (paid) developers out there still use raw variables in their SQL statements and use mysql_* functions for their commercial projects.
File under: If you have to ask how, you shouldn't.
Didn't think about testing that, only replicated the comparisons of the picture... But that's true, no floats in the test. Easy enough test to add in, [JSFiddle](http://jsfiddle.net/e5tsbvc4/1/) and [Pastebin](http://pastebin.com/bBgb4RNM)
The audio quality is bad, but I would say the video is very much worth watching anyway.
The reason this isn't part of core, is so that you can easily change the filter. Changes are required to the non composer stuff every once in a while, even on non major version upgrades.
I find it sometimes useful to use == in PHP for some lazy quick bit of code, but these are the exceptions you gotta stay watchful for, especially if passing values back and forth with JS and expecting same results for same comparisons. But nobody really should use == in PHP or JS for anything serious :)
Good rebuttal. A+. 
&gt; https://github.com/ramsey/uuid UUID's are 128 bits and do not fit inside a 64 bit integer which means that MySQL / PHP / PostgreSQL / MongoDB / Bash / etc... cannot compare them using simpler integer operations. But yes, UUID's are certainly great for uniqueness.
Haha, i didn't even watch it yet haha but when i see that example🙈 yes i totally agree with that 
Thanks for the great answer. But that way its really hard to miss these things. Never thought that would be possible :D
Bug reporter here. PHP is trying to be helpful and convert the string to an integer before the comparison. Integer conversion looks at the numeric characters at the start of the string until it finds the first letter then those digits become the int. E.g '1wtf' == 1 '212wtf' == 212 'Wtf' == 0
It does make sense, though. $c will be the return value of list(). According to the documentation, list() returns the assigned array. Thus $c will be [1, 2, 3].
Validating what? The JSON? Replace `json_decode(file_get_contents` with `parse_validate_and_return_json`.
That is why there are these tables: http://php.net/manual/en/types.comparisons.php And if I ever see you use == instead of === I expect you know those tables by heart =)
Usually its fine, because you can't usually submit integers via HTTP. GET and POST parameters are always treated as strings by PHP. However, JSON does support integers and PHP's JSON parser turns JSON ints into PHP ints. I'll write up the exploitation vector for this because it's actually quite interesting if you're into web security.
The post would have benefited from a more explicit title. That being said, I respect the work and the author but I'd much rather see native support for [scalar type-hints](http://nikic.github.io/2012/03/06/Scalar-type-hinting-is-harder-than-you-think.html) along with [scalar objects](http://nikic.github.io/2014/03/14/Methods-on-primitive-types-in-PHP.html).
Or just a list of every PHP framework you could find.
Haha... that was beautiful
FYI You should check this website out on a mobile browser, I just checked on 5" phone and that giant floating triangle obscures half the text.
Floating point numbers are exact for base2, not base10 - not a bug, it's a [feature](http://php.net/manual/de/language.types.float.php) (see "Warning" section).
I think they posted that code because it's going to be a whole lot easier for people to integrate than saying "you have to upgrade to the latest bleeding-edge version of Laravel to get this patch".
Tbh E_STRICT is a stupid thing in my opinion. I don't really get the difference between E_STRICT and E_NOTICE. It IS a notice about you doing something you shouldn't do after all. Also most people ignore it anyway. I'd rather think it's an oversight noticed too late to be able to break BC so they added the notice.
I see that, for all the cries of "sexist! misogynist!" against the logo of PHPixie from the white knights of the PHP world, Sarah seems to have no problem with recommending it on the list. Kudos to her for that; the rest of you, take note.
OK, let's just say Database Abstraction Layer then, or Associative Array Relational Mapper.
The only thing that's not OO'ish here is that the functions aren't in a class. That alone doesn't matter much -- there's no small amount of object-oriented C code, and it works just like you're doing.
I really am'n't doing anything. It's not my code.
Here's a sickbag. Horrible eh? Just curious though; what do you not like about coffeescript?
the Collection item attributes that are stored as integers in the db are strings when var_dump'd, so yeah typecast when you expect a *type*
How does it break compatibility? All the typehints are namespaced.
&gt; How does it break compatibility? All the typehints are namespaced. Yes, but it's still a problem. People will import them with `use` and write `function foo(string $x) {}`, and if scalar type hints come along, that'll conflict.
Yeah doesn't matter which way round they are, if one side is an int PHP will always try an integer comparison. Which can lead to some weird ass shit like: "abc" == int(0) bool("abc") == true bool(0) == false
I found this talk on "becoming a better javascript": https://www.youtube.com/watch?v=v0TFmdO4ZP0 I found it pokes at many common developer insecurities.
&gt; Which part of minimal do you not get? You say this like people are actually familiar with your framework's spec. It might be a stretch to assume that. BronyPHP aside, I think you're mainly known for trotting around the PHP community exercising how big of a turd you can be. 
He's just a child. Nothing man about him.
I'm fucking loving the names people come up with for his crap, it's wonderful.
But there are no quotes in the query, is this still the case?
Oooo that's gonna stick....
And the "objects" don't have methods. Those are just structs.
Earlier there was a benchmark https://github.com/c9s/router-benchmark where [aura](https://github.com/auraphp/Aura.Router) have performed well as a component written in PHP. I am not seeing the issue there currently. Not sure why. In that /u/pmjones have warned that router performance is only a few seconds and most of the problem will be to application code itself. I don't know how well the fast route out performs aura v2 though.
Another one https://github.com/auraphp/Aura.Auth on beta's .
'performs' FTFY
It seems Klein is doing more than just routing, and moving to a micro-framework approach.
Klein v1 used to a **a lot**. When I gained control of the library and refactored into v2, I separated a lot of the features into separate classes in order to eventually deprecate and finally remove them. Klein's main concern is with routing. The ServiceProvider and Validator won't be around for much longer. I'd much rather have Klein focus on what it does well than try to satisfy a large feature set.
&gt; You'd end up with every framework having its own set of boxes As with everything, it would be down to frameworks to decide how much interoperability they need. This is arguably already a problem. &gt; It's not performant, either, as boxing and unboxing is expensive This is true, however, those places that would consider using it don't care about performance. There are no frameworks with speed as a design goal, because it's not a realistic goal. &gt; Without automatic unboxing, it's also a pain to work with in practice (only stuff which accepts your chosen boxes will work). Variables are automatically unboxed. &gt; If people do start using this, it makes adding actual built-in type hinting support difficult in future, because it'd break compatibility. If the core supports strict hints then the extensions internals would never be invoked. If you used builtin boxes then there would be no concern at all. I'm not sure the core should support strict hints, I think for the vast majority of people, they don't make sense, it makes more sense to let Zend decide when to coerce.
You could still change filters easily even if they were part of the core by simply extending them and providing your own implementation.
Well then, maybe I should've said "/u/dracony, or The Boy Who Wouldn't Grow Up"? Would tie in nicely with his fairy fetish. 
Edited the post to include objects. Had to turn off notices to get the comparisons to run against int and double types. Intresting results in comparison to JS. Also, if you are referring to the typeof(null) == "object" being true in JS, that was a TIL moment for me :) 
You're assuming ID is an integer and wholly sequential.
Even UUID's can be time based. For instance mongodb's ids the first few characters are time based making it sortable. For this use case not using a time based ID is just making it more work
I fully support this idea.
Or you could create your own modified version of the file, version it, and require it manually before the Laravel version is loaded. That way your version will be used instead of Laravel's.
I just encountered this the other day. What's even greater is if you then load the result into a DOMDocument it will generate an error.
I see your frustration, but what do you expect PHP / SimpleXML to do here? `1` is by [spec](http://www.w3.org/TR/REC-xml/#NT-NameStartChar) not a valid start character. There is no way to transform this properly ("_1" ? "a1"?) so your point should be, that addChild (or asXML? dunno) should throw an exception, if the child name is not valid, which I agree on if there would be a flag to set (BC Break calling here). However, you would get an Exception (fairly late tough) if you'd use the OO-API and used `$valid = new \SimpleXMLElement($xml);` instead of `simplexml_load_string()`. In the end, I cannot find a guarantee that `SimpleXMLElement::asXML` would produce *valid* XML, just *well formed* - which frankly is splitting hairs, but kind of true: `&lt;foo&gt;&lt;1&gt;bar&lt;/1&gt;&lt;/foo&gt;` looks well formed to me. ;) See also the discussion [over at SO](http://stackoverflow.com/questions/134494/is-there-a-difference-between-valid-xml-and-well-formed-xml) on this topic. To achieve a proper "is valid xml?" you should check `XMLReader::isValid` or rely on the different methods described [in the docs](http://php.net/manual/en/simplexml.examples-errors.php). Edit: Looks like I am a bit off after all: well formed is usually used in the context of "confronting the design goals of XML" ([citing Wikipedia here](http://en.wikipedia.org/wiki/Well-formed_document)) which **includes** non-numeric starting characters of elements - BUG! :)
There are better things to masturbate over than deprecated functions that the world will hate you for using. 
Yeah that was drunkish me lamenting js oddities. I got bit by this the other day.
Given that deprecated usually means "gone sooner or later", you should fix the usage instead: $rawPost = file_get_contents("php://input"); $postHandle = fopen("php://input", "r"); fread($postHandle, 1024);
It has been patched in 5. Granted, 5 is not even at beta release.
I have been working with PHP for over 10 years and this is the first time I see it associated with beer. I must be doing wrong kind of PHP 
&gt; ...we are professional developers, where have an obligation to produce high quality work... Were you drinking when you wrote this??
fixed, thanks :)
We need a little more information, Is the curl_exec pointed to the same server or an external one? I did find this Stack Overflow post about something similar, but is probably not the same, but might help. http://stackoverflow.com/questions/10450989/resource-limitations-on-php-curl 
exact same server. The only thing that's different is the number of requests per minute. If there's many requests, the total_time shoots up to 50+ seconds. Thanks for the link, I'll have a look. Edit: After looking at the link, that might be the same problem we're having. Is there any way to benchmark this to confirm it's the problem?
Wow, the man himself! Thanks for the reply! I thought 5 was due to be released this month? The team I'm on are all new to Laravel, and we decided to build using the dev branch (Laracasts was/is amazing for helping us get going) so we would be set for 5's release and hopefully have a smooth upgrade at release.
Are you hitting an outbound connection limit on the server? Remember a servers total connection count isn't unlimited - so in this case (if I have it right) you could be somewhere like: - One connection used for the user request via their browser - Possibly a second connection used if using PHP-FPM over IP rather than socket. - Same with database/redis/memcached server connection if not local socket (and actually used). - Finally the connection made by curl() Also if running iptables on the server with connection tracking - this could be another limit hit. Or, not sure of your server infrastructure - are you being throttled? Still "one request per minute" is pretty low.... You mention a CRM - so this curl() call is for reporting of the purchase? Could you possible batch up these in a queue and then have a process work the queue - rather than doing it realtime in the actual purchase request by the user?
It's not unique to PHP or even software development. I'd imagine anyone who has ever attended a conference or been a vendor at a tradeshow has encountered this to some degree. I don't really agree with *everything* in the linked post but I have definitely witnessed more than a few colleagues partake of far too much fun while on the road. I do believe it's up to the individual to be responsible for themselves but at the same time there is higher than normal pressure to drink at these things. Even a couple of the user groups I've attended around my area dole out free beer. On the surface, it's just a nice gesture, and I take it at face value. I've not witnessed anybody getting smashed at a user group, everyone has enjoyed responsibly, but I also think you'd be regarded as a bit of an odd ball if you didn't just take up the old "when in Rome" adage. I'm all in favour of having a good time, but as with anything you just have to be responsible. I don't really think it's a huge deal personally, but it is something to be aware of. I don't think these things should be dry, but I do think you should be kind of hyper sensitive to just how much you're consuming.
Don't go that often to events if you fear of problems with alcohol.
Agree. The fundamental idea presented was of value but there was a lot of sensationalizing going on in the article.
Very very odd. My reading of it is more that the author is projecting his own issues onto others. That being said, I don't think there's anything wrong with promoting healthy lifestyle activities at any event - but not to the extent of banning other, less healthy ones. If he's that keen, why not organize some such events himself? Or even run a little alcholism awareness kiosk or talk?
This comment is a long the right lines and has some great information. Just a few things to consider would be your Apache settings, how many allowed within the server limit too. When checking, use netstat to see if gets higher. A useful command you should run is /bin/netstat -ntu | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | more This will show you IP address uniqueness and give you an idea of anything stacking up and what the counts are like. Another thing I would say is, look at session_write_close(); your curl might not be closing the connecting in timely manner, which results in holding. That then stacks up, and then rejects any incoming connections once it is full. Maybe even experiment with header( "Connection: Close" ); Key is, making sure those connections are closing, and are told they should be closing at some point and not stuck in _wait or _established for long periods. (If Ubuntu look at everything net.ipv4. too, increase your port range and resources) 
I don't have a problem with alcoholism, and I never mentioned the word "ban". I actually want to help the people that is affected by it in different ways by generating a discussion.
&gt; It's not unique to PHP or even software development. I don't think it's unique to anything but conferences. Anyone in the business world knows what "going to a conference" means. They are often more social events where there is typically access to alcohol.
This is absolutely delusional. - First, PHP doesn't have *anything at all* with beer. It has to do with our drunken society. Not with any programming language. People like to gather and have a drink. This is so in *any* community, of any kind (except for AA, I guess). - Morover, this is specially so for gatherings where people don't know each other. It is a way of reducing social anxiety and overcome shyness. - If you don't like drinking, then *don't do it.* - If you can't control yourself, then *don't do it.* What patronizing bullshit is this? If you don't like drinking don't do it, but let the rest of us drink (or not) in peace. We're all adults, we should be able to control ourselves. And no, we're not "creating alcoholics", jeez.
There are tech conferences in Vegas, do we need to stop creating gamblers as well?
&gt; We should be promoting walks, running, sports, etc. You're right. We should totally promote exclusionary hobbies that have nothing to do with our profession. The whole point of happy hours is to network. If you can talk while running, you're not really exercising. &gt; Let’s stop creating alcoholics before it becomes a problem and something serious happens. If it does, we will be partially responsible. Just stop. Grown ups, even those with addiction issues, are responsible for their own behavior. If you, as an addict, can't attend a conference that has a happy hour without drinking, then you need to deal with it. Attend Uncon. Watch the videos online. Leave early. 
Minor grammatical issue: &gt;So how do you delete duplicate records in MySQL table? This should read "in a" or "from a". Now back to the content, I actually learned something from this. I didn't know you could create tables based off a result set.
Thank you parental state. /S
This would delete the duplicates along with the original records. If I had 3 records with the same title, I'd want to delete 2 and not all 3. Use something like this instead: DELETE t1 FROM table t1, table t2 WHERE t1.title = t2.title AND t1.id &gt; t2.id AND t1.id &lt;&gt; t2.id Or you could do this DELETE FROM table WHERE id NOT IN (SELECT * FROM (SELECT MIN(t.id) FROM table t 
The last PHP conference I went to gave our free beer. I think it's a conference thing, not a PHP thing.
I'm sure accidents happen, but I've never seen it happen. In my experience people don't tend to get drunk until after the official conference social is over, and generally in small groups of people they know. But if someone would make a fool of his or her self then that's imho Ok. You say we should be professionals etc.. but at the conference social I'm just myself, especially so at the after-social. And people get drunk and will occasionally do stupid shit. It's just life. But the only time I've really seen people get drunk was this one time at PHPNW in a 8 person group after the social sitting on the hotel couches at silly o'clock. And we where still mostly talking shop tbh. I'm obviously not implying nobody has ever gotten stupid drunk and done something really stupid and/or offensive. I'm sure it happened, and I'm sure it will happen again. And I'm sure it will happen again regardless of any non-alcoholic social.
&gt; The use case that h2tp excels at is as a final build step for a project to make a backwards-compatible release. The ideal is for a project to convert to Hack, have its source of truth be in Hack, have its contributors work in Hack day-to-day, etc., and then only run h2tp as a final build step to create an alternate version of a release. When using h2tp like this, an existing project can get all the beneifits of converting to Hack with none of the drawbacks of leaving existing users behind. That's pretty cool. By allowing developers to quickly and easily convert Hack to PHP, Facebook is removing a major barrier to entry—the fear of the future of Hack.
you are right about that, i have updated my article thanks for pointing that out :)
I didn't say that you were an alcholic - just that you were projecting your own issues onto others. That issue most obviously being a disliking others' actions and/or drinking habits, not alcoholism. And no, you didn't say ban, but the tone of your article certainly gives the text that kind of reading. "I think it is time we stop encouraging people to drink at conferences...we need to have limits." is strongly suggestive of it. I don't have a problem with wanting to help people... but your article's tone is pretty judgemental and lacks any concrete examples of what you feel is a problem; it just makes some generalizations based on your own impressions that you then assume must be what everyone else is thinking as well. And you're making it sound like your ideas are what's right for everybody: "*I* think it is time **we** stop encouraging people to drink at conferences.But **we** need to have limits. **We** need to put more emphasis on promoting healthier activities and lifestyles." Frankly, it makes you sound like a priggish busybody. Well and good if you think that what you're proposing a worthwhile action plan, and if you want to join up with others and implement some public education and alternate alchohol free activites, great. But don't try and make your own opinions on what's right the community's burden. I believe one should lead by example if one feels the need, not by dictating to others. Your post's tone definitely conveys the latter.
"Free and reliable" are conflicting goals. Your best bet is likely to be the free tier of something like https://parse.com/, but if your app takes off you're going to have to bite the bullet and pay some money.
I can afford less than 20$ /year
Your points are so true i didn't think of that. I do have some sensitive data in app as users will be entering their email address in app. 
can't speak for opensuse, but I know that for centos, many people use 'trusted' third party repos for app-specific things - remi(?) repos for current php/mysql versions, for example. is it voiding some warranty? perhaps. But if your requirements are, say, php 5.3, and you've only got 5.1 in a distro repo (not uncomment 3 years ago), what do you do? let the project fail? move to an up to date distro with no 'support' anyway? or upgrade the packages you need and risk losing 'support' that, realistically, you probably won't need anyway.
&gt; Sometimes it's not people, but their distros. We're running SLES 11 here and php 5.3 is the only version we were allowed to upgrade to (5.4/5.5 are marked unstable) That is still a people choice to use that distro over others. Symfony can't live on 5.3 forever and ignore all new features. If you are dealing with someone's choice to use SLES then they have reasons to play it safe and you should likely stick to Symfony LTS which is good till May of 2016. Hopefully by then the more conservative distros will up their PHP version
Note that the next Symfony LTS (2.7) is going to be supported through 2019 (!), and will continue to support PHP 5.3.
I try to butt out of server-specific stuff (in an ideal world I would only write code), but I have brought up that 5.3 is end of life. If there was a time to get on the latest available php (5.5 for SLES, I wasn't able to find 5.6), now would be it (for my company at least) (I hope the server guys don't see /u/logically_musical's comment for fear we would be running 5.3 in 2019)
&gt; (I hope the server guys don't see /u/logically_musical 's comment for fear we would be running 5.3 in 2019) lol! Good luck in your quest :) 
&gt; "Free and reliable" are conflicting goals. Nailed it. You might be able to use AWS RDS http://aws.amazon.com/rds/ - at the least you will get a year of free use - after that, it won't be $20 a year - that's for sure. But does meet the reliable part of the equation as a turn-key solution. 
Not PHP but checkout [youtube-dl](http://rg3.github.io/youtube-dl/) You can use it to scrap a channel and grab the video's info / archive them. youtube-dl --write-description --write-info-json --write-annotations --write-thumbnail URL 
A super simple way is to create a unique index like this: ALTER IGNORE TABLE table ADD UNIQUE INDEX dupidx (field1, field2) The `IGNORE` statement will only keep the first record it finds and remove the others. &gt; IGNORE is a MySQL extension to standard SQL. It controls how ALTER TABLE works if there are duplicates on unique keys in the new table or if warnings occur when strict mode is enabled. If IGNORE is not specified, the copy is aborted and rolled back if duplicate-key errors occur. If IGNORE is specified, only the first row is used of rows with duplicates on a unique key. The other conflicting rows are deleted. Incorrect values are truncated to the closest matching acceptable value.
Have you checked [LaraJobs](http://larajobs.com)? There are a few London based jobs posted there.
TCPDF is horrible. Use a [wkhtmltopdf wrapper](https://github.com/KnpLabs/snappy) instead.
Yeah I've been keeping an eye on there. There's current 3 results based in London and none of them are really applicable to me. I guess that's what I'm getting at - there does seem to a small handful out there, I just (maybe naively) assumed that there'd be pages of results of companies recruiting for Laravel developers. As I mentioned in the OP, I'm yet to go down the route of putting my CV online - when I started looking for my first job (with absolutely no PHP experience!) I was bombarded with phone calls, so I expect more will turn up when I eventually get round to doing that.
&gt; when I started looking for my first job (with absolutely no PHP experience!) I was bombarded with phone calls Crikey, seems like it's location, location, location when it comes to PHP jobs. I've over 8 years experience and work is not a steady stream.
You may want to check your ulimits
Hmm okay. Well all I want is to store the title, description and number of likes in a database for every video in a playlist I've found. Is that something that is doable with youtube-dl?
Thanks for the response. Absolutely appreciate what you say about putting all my eggs in one basket. On one hand it seems like I've done that, but on the other hand... by learning all about Laravel and subscribing to Laracasts, I've learnt so much about design patterns, how to structure code, SOLID, DRY, commands and command handlers etc. The list goes on, and none of it is specific to Laravel. Yes, I'm currently only familiar with Laravel's implementation, but the foundation is there for when I start learning other frameworks. As I mentioned in the OP, I'd happily take a Symfony position as well, if I could find a decent sounding position that was willing to help me learn how to use it. And your last point about moving away because of legacy code, I completely agree - however the team that produced the terrible legacy code is still there now, churning out consistantly terrible code every day. It's become unbearable, I need to get away and work with people who care about the work they produce.
That looks much nicer than tcpdf. Working in HTML like that should simplify the page checking logic a lot.
I am positive you wont be able can pull it off from scratch in 2-4 weeks. Maybe with Laravel with with Cartalyst Sentry &amp; Cart and with other libraries from the community to build a very basic e-commerce. Or you can check out e-commerce framework like https://github.com/Sylius/Sylius 
Laravel is a framework. But it's not an ecommerce framework. Don't try to build your own ecommerce platform. Speaking from experience, it's a rabbit hole you just don't want to jump into. Magento and their ilk have really shitty codebases and are a bitch to work with, but ultimately the reason they are still around and popular is that they solve more problems than they create. Above all else, two strict guidelines that you should absolutely follow: 1. Do not ever store credit card information. Ever. 2. Don't try to implement order fulfillment (shipping rate calculations, shipping container selection, etc) yourself. You *will* fail.
What do you think? I have no idea what good limits are? [~]# ulimit -a core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 239390 max locked memory (kbytes, -l) 64 max memory size (kbytes, -m) unlimited open files (-n) 16384 pipe size (512 bytes, -p) 8 POSIX message queues (bytes, -q) 819200 real-time priority (-r) 0 stack size (kbytes, -s) 10240 cpu time (seconds, -t) unlimited max user processes (-u) 239390 virtual memory (kbytes, -v) unlimited file locks (-x) unlimited
I think it's better to learn Magento in those 4 weeks. The experience might prove very valuable later, when you get Yet Another Client That Wants An E-Commerce Site.
Get thee to London. Lots of PHP jobs.
One thing you should ask yourself is whether it's even sensible to name constants like this. CACHE_LIFETIME_SHORT or CACHE_LIFETIME_LONG are more descriptive names, as they give a relative order of magnitude, and can also be changed without consequence (whereas if you change the value of the one hour constant, someone's going to be confused why 1 hour means 2 hours)
This means you can have 16384 open files. Remember that sockets are files as well. Will check back when I can add more. Painting housw now and gf will throw an exception if I am on reddit lol. I will check back. 
(spamish) If any if you all are .eu based Symfony devs my company is hiring in both Palma and Düsseldorf, feel free to give me a buzz. I personally (for Palma) am looking for all levels of skill to help keep our team mixed &amp; international.
Putting all your eggs in one basket isn't the best idea. I recall a few years back a bunch of people squawking to use CodeIgniter, and look where that is now.
I wont judge you for your beer choice, but cheers!
After I've downloaded it, it won't open. I'm sorry but I have never used anything like this or something where python is being used.
I appreciate your help. We actually increased the limit from 1024 to the current limit. But it hasn't' solved the problem with high total_time for curl requests
The [upgrade guide](https://github.com/symfony/symfony/blob/master/UPGRADE-3.0.md) for Symfony 3 is really good. Some people have put a lot of work into that. Just the right of in-depthness. Other projects should learn from that. Going through the current upgrade notes, it looks like a really good clean up and will be an easy upgrade, but im kind of sad there isn't any exciting mega refactoring going on! It would be interesting to see what Symfony looked like if there was no need at all to keep BC; how would Symfony 3's API be different if it was a brand new project?
My thought was that perhaps multi curl was waiting for handles but i should have read that better. Good luck! 
Are you asking a question? On a side note, interfaces cannot define properties.
I used [dompdf](https://github.com/dompdf/dompdf) before and it usually worked. To make sure the signature line and the signer's name are on the same page, you can use page-break-inside CSS rule. Something can probably be arranged to handle widow and orphan lines too. There are some examples on their docs that you may want to have a look at.
Funny you post this. I was asked this question recently and I got it correctly but I could have answered it in a simpler and more objective way.
Nope. Half venting, half hoping someone learns something new. And I don't know how I added properties to interfaces. Considering the post, that's sort of embarrassing. 
You're hired. 
Isn't this like intro computing science stuff? I mean, those concepts aren't even PHP specific. Where on earth are you getting the candidates you are interviewing??
Well thanks for the compliment. I only really learned about the intrinsics and real world usage of interfaces and abstract classes in my previous job working in a mid-sized C# ASP.NET MVVM project. The project lead was an awesome mentor to work with.
Uhg, I know. It's infuriating. Sometimes I wonder if recruiters somehow make sure it's impossible to find decent candidates without them.
Ive always wanted to move to Germany.
I guess that's where the 'perhaps' came in - I'm usually a centos guy, but have had a couple RHEL situations.
True, but he could use it for both. Just wanted to suggest something very cheap based on the budget since you won't find much and will have restrictions with most free solutions.
My 2 cents (for what it's worth). Dump Magento. Sign your client up for Shopify. Use Shopify for all the ecomm stuff, easy for your client to manage. Use the Shopify API to integrate with a Laravel if Shopify can't full fill all your customization needs.
&gt; Laravel is not a good example for clean code. Really? I mean it's far from perfect I guess, but compared to a lot of things that pass for frameworks or development platforms it's pretty reasonable... &gt; It promotes static all over the place (and static == global). "It" promotes no such thing. There are static mechanisms there for doing things quickly which can tend to be a little bit yuck. There are things within those mechanisms to try and un-yuck them as best as they can... but Laravel, and to a much larger degree the Laravel Community actually promotes strong separation of concerns, liberal use of the IoC container, writing testable code etc. &gt; I'm sure a good dev can write somewhat clean SOLID code with it, but don't go out expecting clean code just because it's laravel. The same can be said of any framework or library though. You can write crap in anything really. 
FYI webkit has quite a lot of page breaking quirks as well.
This looks perfect -- thanks a lot!
I work with "senior" developers who couldn't answer these questions. When I implement and actually use base classes and interfaces I get complaints of hard to read code and overkilling it in design.
On another note, however, you **can** use an interface to define class constants. interface Foo { const BAR = 1; } Though I don't know any great use cases for that feature offhand.
Big fan of implementing PSR-* in projects.
Splitting hairs here. It is a battle between well-formed versus not-valid.
TCPDF. $pdf-&gt;SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM); Source: http://www.tcpdf.org/examples/example_051.phps
upload_content_length === 0 for the 70+ seconds row. Is this also the case for the other long execution time records?
yeah thats why I said about connection: close header, or session_write_close() on your hitting script. Your current situation is that your not closing the connections, they stack up then start rejecting during your peaks you mentioned. I run a particular system that has around 15,000 connections per minute and we never have more than 2000-3000 in time_wait
You don't know that. The API doesn't expose what's in the struct (read: encapsulation). There might well be anonymous functions etc within the struct that do the real work, and the API functions are just front-ends. (Read: polymorphism.) In the end, the API being separate means very little. OOP is a mindset, not a language feature. What really matters from an OO perspective is that you have some "thing" and a well-defined interface that abstracts away all the dirty details of manipulating it. Classes can make that cleaner and simpler, but it's quite possible -- and more common than you'd think -- to do OOP without them.
Thanks for being humble. I have made the below changes. 1. It follows PSR-4 standards and namespaces. 2. Used dependency injection. 3. No singletons. 4. Removed RedbeanPHP I still have to work on the naming convention and the global variables. Can you now have a quick look. 
I have made the below changes. 1. It follows PSR-4 standards and namespaces. 2. Used dependency injection. 3. No singletons. 4. Removed RedbeanPHP I still have to work on the naming convention and the global variables. Can you now have a quick look ?
Interesting. You say you access many APIs... could that list be narrowed down any further? Also, what version of PHP and cURL?
2.6 is still in beta and the release after that is 2.7 - it's a bit early to claim that 3.0 isn't breaking enough things :)
Sometimes "senior" = dinosaur. We had a senior and I was mentoring him most of the time...
I've never used it but just found this https://htmltodocx.codeplex.com/documentation. out of interest any reason for exporting to docx rather than something maybe a little easier like pdf? 
Yes. The reason is that I have to generate a report that is editable. So it's better if it's emediatly made into a .docx file for editing.
Coming on to the internet to explain this to people who spend their free time reading up about their languages is preaching to the choir my friend. I hope you give your interviewees the answer. Also consider why you aren't interesting or picking up the right sort of talent (assuming you think the answer to this question is super, super important).
Maybe excel?
If you need a hand let me know I'm also chasing a similar project goal..
No, I know. I always give them the answer.
Honestly, I'd say no to the job. 2-4 weeks isn't enough time to build him a decent ecommerce site. Even if you knew what you were doing you'd be quoting 6 - 13 weeks based on spec.
Docx being the libraoffice word document output is as mentioned easier to edit before final release to client.. Pdf or excel are ...painful.. Well at least that how I view it..
Thanks. I've got some Symfony2 experience, I'll take another look at sylius.
Good point.
I've used this in the past and it's worked great https://github.com/PHPOffice/PHPWord
If only. A divorce and house sale would have to come first...
Having used PHPExcel with great results I think this is the best option
Yes and at some point it won't be enough. So you'll tell to replace parse_validate_and_return_json with parse_validate_cache_and_return_json, and then parse_validate_cache_makecofee_and_return_json, etc. You'll end up not with a single simple function, but with a component with a comprehensive set of features regarding configuration of a complex system in a complex environement, something precisely like Symfony\Config.
DOMDocument throws an exception as it should &lt;?php $dom = new DOMDocument(); $root = $dom-&gt;appendChild($dom-&gt;createElement('root')); $root-&gt;appendChild($dom-&gt;createElement(1, 'bar')); echo $dom-&gt;saveXML(); returns: Fatal error: Uncaught exception 'DOMException' with message 'Invalid Character Error' in test.php:4 Stack trace: #0 I haven't used SimpleXML in long while, as I find DOMDocument + Xpath to be more flexible to work with 
On the one hand, I like this, as it means the PHP community can benefit from Hack code. On the other hand, I don't like it, as it'll spit out code that may be quite ugly if it used a lot of Hack features.
Inverting the injection of HTML into PHP, or mixing the display logic back into the php code, is going to create more hassle and indirection. There are already plenty of template engines and display helpers out there that do this sort of thing in a cleaner way. 1. Rather than leaving the display in the domain of the HTML this is creating a proprietary logic and wrapper around what would normally be the job of the HTML. * Designers aren't going to learn this proprietary API to do their job so chances are it's just going to create another thing, beyond HTML, that PHP developers will need to maintain. 2. Why does this use numerous global functions when an object would allow it to be properly encapsulated? 3. Lack of namespaces for 5.3+. 4. It's using globals to maintain internal state! 5. Where are the phpdoc comments?
I've only been asked about that twice, but I figured its pretty standard. Its been a part of PHP for a while. The more interesting questions I've been asked are to name two features in the most recent release, or accepted FRCs (is that right?) in new releases. More advanced questions about OOP such as defining low coupling and high cohesion and why they're good are also helpful. I think the last two aren't all that important, but frankly any PHP dev worth their salt should be able to tell you the differences between abstract classes, interfaces and traits even if they've never used them Edit: This is just of course my opinion. One I'm happy to admit that I'm wrong about. I probably don't have the long term experience in my career to make overarching judgements about who is and isn't a good programmer off hand. These are just standards I try to hold myself up to, to help improve myself
Hey Zimzat, All fair comments. The purpose of this is to allow PHP to be the template engine and allow all of its richness to be used. This project started out as convenience functions such as glazyDisplayAttribute(), and expanded as partly an experiment to see what was possibly with an API design and how useful it could become. I still use raw HTML myself by juggling ?&gt; &lt;?php tags for a &lt;div&gt; or &lt;section&gt;, but I find this handy for displaying an element with a class quickly glazyElement('p.className', 'Test to escape') or that sort of thing. I have more advanced skills in Objective-C and JavaScript than PHP. I find PHP’s subclassing functionality limited, like last time I check calling the super class’s method from a method override. I should definitely be using namespaces, though I do have a common prefix for all my functions. A object oriented version of the API would be interesting, but I wonder if it would be as simple to write. You would always have to be calling methods off of an object like $glaze-&gt;element('h1', 'blah'). I suppose that could work. Personally I find reading -&gt; a bit jarring but that may not be shared. The global state is required if it isn’t object oriented. Because PHP is single threaded I make assumptions that this is safe to have. Even if the API was object-oriented, a singleton would probably be ideal which is another form of global state really. It is really just because the function based API is the most convenient to use. Also I have read that properties on objects are slower than associative arrays, so that’s why the state is all stuffed in arrays. This is one of the first open source projects I have made, so although I would recognise phpdoc attributes I don’t know how to write them. I am guessing this is fairly easy to pick up? To address your first point, yes I am not trying to do my whole entire take on what a tempting engine should be, and for all developers or designers to pick up. However, I think there are some interesting possibilities in the potential flexibility of what I’ve created, to which additional layers can be added on top. So the idea would be to use those abstractions on top, which become pleasant to use.
Did something in the likes but more OO a while back: https://github.com/Anahkiasen/html-object
Hm, how do people get this wrong? It seems pretty basic, though I doubt I'd come up with all of those bullet points. I mean, I know what they are, but are you expecting people to figure out exactly the properties you're thinking of?
Funnily enough, the one time I have had a nightmare with shipping rules was with a client who's requirements sound similar to yours were. If only I'd known it was called the bin packing problem a quick [Google search](https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=bin%20packing%20problem%20php) would have saved me a lot of headache. Generally I agree widh /u/CertifiedWebNinja however - in the vast majority of the cases, client requirements are simple, or you can get them to work with some simple rules. (Coming from someone working at an agency who's main business is ecommerce sites built on our own bespoke platform) 
Just a quick side note: whatever the standards say, Allman is the only true indent style! ;)
Getting people to all use the same style is like trying to get people to all find identical solutions to problems. It won't happen, but you might get similarly efficient solutions... just as you get similarly efficient styles. I, for one, can't bloody stand this camelCase bullshit, nor most peoples indentation styles. 1TBS with PascalCase represent!
If you are a highly experienced Symfony dev I am sure the DUS office will try their best (even if you are not in the .eu)! I always find that a lot of candidates get skipped for the DUS office as they sometimes are a bit conservative with their review processes (this is definitely much better this year though). Email me at viiviiviivii at gmail and I can forward you to the right people (I am not in HR/recruitment and I don't get commissions etc).
For awhile I really liked the idea of [Horstmann Style](http://en.wikipedia.org/wiki/Indent_style#Horstmann_style): class Rofl extends Lol { protected $haha; public $eheh; function __construct () { $this-&gt;haha = "haha"; $this-&gt;eheh = "eheh"; } } I really conceptually love the way the braces line up vertically. I think that's a really elegant and beautiful thing. I tried it out for a couple weeks, but common text editors are just simply not prepared for it at all. Even though I could probably customize Sublime to no end to accommodate these unique indentation styles, I finally decided that I just want to be normal like everybody else, so I gave it up.
 - `more_readable_less_writable` - `moreWritableLessReadable` Yin and Yang, everybody. -------- *Edit: Oh yeah..* - `ClassesAndNamespacesRegardless`
Major humbug!! :D
My coding style has changed 100% since I got started and I now use pretty much all the things I used to hate. Other than yoda conditions. They can fuck off. After escaping the procedural mess that was phpBB (at the time) and Postnuke I got writing OOP with CodeIgniter and followed their style in all my code. Allman, new lines for everything and tabs. Since then I ended up using a lot of what the other larger projects are doing and now I generally prefer it. Most of us ended up on PSR-2 and im fine with all of it, even though it does need some more stuff added. While most of it **doesn't fucking matter in the slightest as long as you and your team are consistent**, we don't get to just pretend we can use under_scores everywhere when 100% of core PHP classes use camelCase for methods. Sorry, but we can't have userland do A for methods and core do B for methods. That would be anarchy.
I'm pedantic about coding style for some reason. Don't know if it makes me a good programmer though...
Hi, I have several projects, that make use of a dependency-injection-container to automagically create instances of requested classes. So I needed a 'common' interface to not be tied to a certain implementation. What do you think?
I was confused at first, thinking your ServiceDispatcher was part of the contract-- its not, I see. Looking at the interfaces, I like them. They are straightforward and do exactly what they are named. One thing is how can you handle scoping with your contracts? For example, with Symfony2, you can have a "request" scope where everything in that scope gets the same instance of an object, but once a new "request" scope is created (for a subrequest), new instances of all services are created for that scope.
Hell yes! &gt;This extension requires PHP7 Is that a hard requirement? Could it be ported to 5.x?
Allmanmasterrace
&gt; One thing is how can you handle scoping with your contracts? Since this is kind of a specific use case and not necessarily applicable to the majority of IoC uses, it might be better off as an implementation feature.
I like it. I might change the method names to be a bit more descriptive, `getInstance` instead of `get` and `createInstance` instead of `create`. Also, you should use an interface for your exception, as implementing classes might want to store different information about why the attempt failed. Was this recently discussed as a PSR standard?
Whatever the standards say, tabs should be used for indentation.
how can i donate beer money for the continued development of this extension?!
Why in the world would you think that I'm doing that? 
&gt;I have several projects, that make use of a dependency-injection-container to automagically create instances of requested classes If it's anything like your Service Dispatcher example, it's not a container at all, it's a service locator. &gt;What do you think? If I were to look at your interfaces alone for the purposes of a dependency injection container, I'd say that they do too much. All that you really want is the `InstanceContainer` interface. The rest doesn't really belong as you shouldn't concern yourself about how a container resolves an object, just that it does. As for `DefinitionNotFoundException`, it really should extend `\RuntimeException` instead of `\Exception`. Now, I have a counter-question to you: What is the intended purpose of these interfaces? 
&gt; You can still use the baseclass as an interface an extend your own implementation from it. But then you are tied to a concrete implementation. In this case, a contract like this would become useless. Good point. But I would argue that a framework might want their IoC container to comply with the contract while still consuming their own exceptions internally. That'd be easier if the exception was an interface. To me the added flexibility is more beneficial than including an empty exception class. &gt; If it was, it has bypassed me. I was thinking of https://github.com/container-interop/container-interop but it looks too limited to be useful to IoC containers.
I don't actually anticipate this being much of a problem. It's output is certainly machine-generated, but it's not horrible. Reading through backtraces and matching things up to the canonical Hack version, for example, is perfectly doable.
&gt; If it's anything like your Service Dispatcher example, it's not a container at all, it's a service locator. No, that is just an example on how (one of) these interfaces could be implemented in real-world-situations. &gt; If I were to look at your interfaces alone for the purposes of a dependency injection container, I'd say that they do too much. All that you really want is the InstanceContainer interface. The rest doesn't really belong as you shouldn't concern yourself about how a container resolves an object, just that it does. Not really. These interfaces are separated to fulfill certain cases. They don't care about if the implementation is either a service-locator or a DIC. They only have an opinion on how the implementation have to work for a certain extend (sorry for my eng., I'm not a native speaker). So I often need the following functions: - Having some kind of singleton per "container" (InstanceContainer) - Having a factory that creates fresh instances each time (ObjectFactory) - Having a method with unknown parameters to call (MethodInvoker) &gt; As for DefinitionNotFoundException, it really should extend \RuntimeException instead of \Exception. Good point, I correct that! Thank you.
&gt; But I would argue that a framework might want their IoC container to comply with the contract while still consuming their own exceptions internally. You should take a look from another perspective. Think of an application implementing this contract. So it does everything what is in the documentation. Having an implementation that does something different than the documentation states, the application may not be compatible with that behavior. A better example would be LoggerInterface. Each method (-&gt;error, -&gt;warning, etc) is documented as not throwing an exception in any way. So an implementation must catch all exceptions raised by logger-components and discard them. Think of what would happen if some Logger-Component like PushOver or Loggly starts to break subprograms by having an unexpected behavior? I know that this would not happen, because every exception is a descendant of the DefinitionNotFoundException, but what if an application only listens for the descendant that would stay absent after changing the implementation? &gt; I was thinking of https://github.com/container-interop/container-interop but it looks too limited to be useful to IoC containers. Ok, yes, I did know container-interop/container-interop. And as you said: No way for me.
Totally possible. docx (or all of the 2007+ .---x formats) are just specialized .ZIP archives. You can break them open in PHP and do basically anything you want to them (provided you know the syntax). Search and replace is very easy to do. Advanced Styling gets a little complicated (a lot of nesting of tags, gets a little wild), but replacing stuff inside a template file is no trouble at all
&gt;No, that is just an example on how (one of) these interfaces could be implemented in real-world-situations. There is no implementation of the interfaces. The example is of a theoretical container being consumed by a class, which makes it a service locator, not a dependency injection container. A dependency injection container injects dependencies *outside* of the classes. &gt;These interfaces are separated to fulfill certain cases. You merge the segregated interfaces together to create a `Container` interface. &gt;They don't care about if the implementation is either a service-locator or a DIC. DIC and SL aren't different implementations, they're usage patterns. If you inject a DIC as a dependency to another class, it's no longer a DIC, it's a SL. &gt;Having some kind of singleton per "container" As an interface, you shouldn't have to concern yourself with whether the container gives you a singleton or not, only that you get an instance. &gt;Having a factory that creates fresh instances each time Again, how it creates instances is irrelevant. What's important here is that it returns instances, not how it does it. &gt;Having a method with unknown parameters to call Again, an implementation detail. Your interface is doing too much. Also, again: What is the intended purpose of these interfaces? 
&gt; There is no implementation of the interfaces. The example is of a theoretical container being consumed by a class, which makes it a service locator, not a dependency injection container. A dependency injection container injects dependencies outside of the classes. You simply misunderstood the examples. &gt; You merge the segregated interfaces together to create a Container interface. This is because I need them often together. This shapes mostly PHP-DI's interface (http://php-di.org/). &gt; DIC and SL aren't different implementations, they're usage patterns. If you inject a DIC as a dependency to another class, it's no longer a DIC, it's a SL. Look, PHP-DI is an implementation of that "usage-pattern". My contract shapes, how an adapter must look like to fulfill the contract on one side and connect PHP-DI to my app on the other. &gt; As an interface, you shouldn't have to concern yourself with whether the container gives you a singleton or not, only that you get an instance. This is the difference between the InstanceContainer and the ObjectFactory. An InstanceContainer always returns the same ordered instance once instantiated over and over again as long you use the same container-instance. ObjectFactory always creates a new instance on order. So it is definitely not irrelevant. The InstanceContainer creates stuff like controllers, factories or services. The ObjectFactory creates new entities in factories for example. So it is up to the application to assess if a component is a "singleton" or not.
I agree with #1 as it relates to PCI compliance (at least don't store any CSC codes), but #2? It sounds more like YOU failed. Many of us have been successful rolling our own. 
I had a lot of success with TCPDF combined with FPDI for user supplied templates. The only weirdness was the default A4 page size in the constructor, which was pretty easy to switch to letter size.
I would find it extremely annoying if different members of the team were using different standards for naming, brace positions, etc. And plus, as different people touch different files, your commits get cluttered with useless style changes that could obscure important information.
&gt; You simply misunderstood the examples. I doubt it, but if you think so, go ahead and explain it. &gt;This is because I need them often together. So have your concretion implement the interfaces. Don't combine them into one. &gt;This shapes mostly PHP-DI's interface No, it doesn't. PHP-DI uses [`Interop\Container\ContainerInterface`](https://github.com/container-interop/container-interop/blob/master/src/Interop/Container/ContainerInterface.php) which only defines a method for retrieving an instance. It doesn't concern itself with how it does it, that's an implementation detail. &gt;Look, PHP-DI is an implementation of that "usage-pattern". No, it isn't. PHP-DI doesn't have a concept of how it is being used. A usage pattern is not an architectural pattern, it is how you apply something. For instance: $instance = $container-&gt;get('SomethingInterface'); class Foo { public function __construct(SomethingInterface $something) { ... } } new Foo($instance); ^ this is a dependency injection container. class Foo { public function __construct(ContainerInterface $container) { $instance = $container-&gt;get('SomethingInterface'); } } new Foo($container); ^ this is a service locator. &gt;This is the difference between the InstanceContainer and the ObjectFactory. Again, I said that `InstanceContainer` was fine, and it's how the totality of what a container interface should look like. The rest is implementation details. An implementation can implement multiple interfaces, and that's fine. However, when you lump them together and combine them into one, you not only have too many concerns in the interface, you force the shape of the implementation and that certainly isn't [SOLID](http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29). &gt;So it is definitely not irrelevant. It's **completely** irrelevant to a container *interface*. They are *implementation* details. And again: **What is the intended purpose of these interfaces?**
[MethodInvoker.php](https://github.com/rkrx/php-ioc-contract/blob/master/src/MethodInvoker.php) Can I suggest adding a third parameter to the invoke method as a callable callback that can be used if the container can not find or create the service for any of the arguments of the method that is being invoked. I actually prefer the idea that a container implements a configuration interface so that it can be subsituted for any configuration object. Have a look at this [service manager](https://github.com/mvc5/framework/blob/master/src/Service/Manager/ServiceManager.php). It uses the third param as a callback for missing plugins and missing named arguments of the invoke method. *edit: corrected myself about the invoke method args*
You'd be surprised man. I've interviewed people for senior developer positions, that do in fact have senior-level experience (20+ years in web dev), that, *objectively*, know fuck all about programming. Finding a good programmer that not only understands the academics behind things like interfaces, but knows how to use them appropriately, can be challenging in many areas (especially if you're interviewing PHP / webdev candidates). For every one serious *programmer*, you'll get ten Wordpress nutters. Experienced Wordpress nutters, but Wordpress nutters nonetheless.
Good programming is about making smart judgement calls as to how much or how little abstraction you should use. - Project complexity - Project growth potential - Team size - Team experience - Budget / time constraints - Specification quality (weak / ambiguous specs vs water tight specs) - Test coverage goals - Performance constraints All of those things factor into how abstract and decoupled your code should be. Sometimes abstraction for the sake of maximum decoupling creates more technical debt than it was meant to save you from, or it pushes the [design payoff line](http://martinfowler.com/bliki/DesignStaminaHypothesis.html) WAY past the reasonable scope of the project. I personally feel that too much or unnecessary abstraction (abstraction for abstraction's sake) can be as detrimental to a project as too little abstraction. But again, all of the above factors affect what is considered "too much" vs "too little". So for me, simply knowing the differences between abstract classes and interfaces (as well as various OOP principles/patterns, which interfaces/abstract classes help you implement) is not quite good enough to judge a programmer by. You really have to have some actual experience to find the Goldilocks zone of abstraction, AND be able to do so with respect to your development team. If your abstraction goes over the heads of your team, and it slows them down because of it, and that slowdown is NOT compensated by hitting the payoff line because the slowdown pushed the payoff line past the project's scope, then you've hindered the project and budget even *if* your design is proper. It's mostly about the code, but it's not *just* about the code.
That would force the contract to cover too much concerns. There is an exception thrown when an implementation could not be found. So you can easily wrap another layer around any implementation of this contract to get your behavior.
I must be lucky then... or good at weeding people out based on resumes.
Unfortunately I don't get to do the resume weeding, so it could very well be that you're good at weeding them out. But we actually don't get so many applicants that we can afford to do a lot weeding anyway :/ Kinda sucks (but good for my paycheck and job security I guess!)
Moreover it's a pretty bad idea in the first place to have "scopes" of dependencies and as Fabien said it was just a necessity. It was kind of good as a quick problem solver for services that depend on request, but it was still a half-solution needed only because of BC issues. Ideally you should never look at input data as a part of dependency tree (hint: use function arguments to pass request data).
2-4 weeks? Nope. Not going to happen right, not going to happen well. You will basically have enough time to set up a Shopify account and do some skinning, but that's it. Forget complex / custom functionality. Don't take on this project, because he will pay you for 4 weeks, but it will take you 8 (or more) by the time he's done making you do everything.
Braces lining up is one thing. Having code and brace on the same line though is crazy talk.
It depends on the use-case. It could make sense. I have a api-project where I pull data from an api (like ebay trading). There I have different environments (currency, slightly different marketplace-behavior like some features do not work equally on each marketplace), were I can configure different dependencies for key-components. And that is awesome. Within the same run I can launch different environments (environment-configurations) that work totally independent beside each other. So even if this use-case is really rare, you might not say that this is impossible.
In this case you create two dependency injectors that don't know anything about each other and that's it :)
 &gt; public $eheh'; Fix that stray single quote for god's sake
It's probably because I've been using `camelCasing` for variables since the dawn of time, but I find them much more readable than their `snake_case` counterparts.
The mail function in send.php looks ok from a precursory glance. Edit send.php like so to debug and get a better idea of whats going on: change: if(!$error) { $mail = mail(WEBMASTER_EMAIL, $subject, $message, "From: ".$name." &lt;".$email."&gt;\r\n" ."Reply-To: ".$email."\r\n" ."X-Mailer: PHP/" . phpversion()); if($mail) echo 'OK'; } to: if(!$error) { $mail = mail(WEBMASTER_EMAIL, $subject, $message, "From: ".$name." &lt;".$email."&gt;\r\n" ."Reply-To: ".$email."\r\n" ."X-Mailer: PHP/" . phpversion()); if($mail) echo 'OK'; echo '&lt;pre&gt;'.print_r($mail, true).'&lt;/pre&gt;'; } And see if you get some clue as to why it's failing. If that doesn't turn up anything it may be that your server might not have sendmail or another mail daemon running.
&gt; Whatever the standards say, **spaces** should be used for indentation. FTFY
But isn't the idea behind Hack that it's easier to write, test, and run static analysis on? Theoretically the differences in how it behaves in a production environment should be very minimal.
I feel the same about PHP job market, more shitty Drupal/Magento/Wordpress jobs than quality PHP software development jobs. Thinking I'll do that same regarding Python/Django at some point. How long did it take you to get to a standard with Django where you could get a job using it?
&gt; If an application needs to consume a dependency injection container, then it is not a dependency injection container, it is a service locator. You should know that it's considered to be an anti-pattern. Most classes won't see the DIC at any time. Some of them will (eg Factories) and they will treat it as a SL. You need to make a Factory being able to instantiate Entities by using the DIC as a SL because of possible Dependencies the Factory is better not aware of. The injection into the factory is made through the DIC in turn (the DIC injects itself). To me its totally legit to give a factory access to a service-locator-like Component through a common interface. But this is only a minimal facette of the whole idea. &gt; Except you're not. Depends on your point of view. **Single responsibility principle**: What is a responsibility? Being able to instantiate classes AND cache them AND call a method on instances is not, right. But that only takes effect on the interface. How the concrete implementation looks like, is up to the component author. But the interfaces are separated to different base interfaces which should be primary used in classes (if at all), not the *Container*-interface. You should not have a dependency in you application that requires a *Container* outside the bootstrap. **Open/closed principle**: This is primary for implementations. A contract (contract-version) can't be changed. It is fixed and can be extended by an implementation (added methods or public/protected properties) as long as it complies with the documentation. **Liskov substitution principle**: The documentation states, how the objects and methods must behave (if the contract is really ready at some time). **Interface segregation principle**: This criteria is met by having different interfaces for each use-case. **Dependency inversion principle**: This is an indirect concern of this contract. Its a direct concern of the Application to correctly use the interfaces and the dependency inversion principle. &gt; You mentioned that your interfaces shape PHP-DI's interface, which it in fact does not. PHP-DI's interface follows container-interop. In fact container-interop does not provide the methods *make* and *call*. So, what should I do if I want to use them? In fact, container-interop was made to place the lowest common denominator to make different existing [components](https://github.com/container-interop/container-interop#compatible-projects) work with application that rely on that interface. So far, so good. Now, I need two more competences: Create instances and call methods. What I could do: container-interop could replace my InstanceContainer or at least be a descendant of it. &gt; I get the idea just fine, I'm saying that there are inherent problems with the idea which I have been trying to outline for you over and over, but which you seemingly don't get. I used the whole principle a few times already in projects with more than 50k LOC and a decent complexity. The main goal was always to eliminate any hard wires between components wherever possible. And that is around 95% in my case. Only the bootstrapping-process and some factories are aware of a another component that magically instantiates classes. In theory you can omit container-interop at all and go all the way with *MethodInvoker* and *ObjectFactory*. The bootstrapping-process would look like this, then: $container-&gt;call(function (ServiceDispatcher $dispatcher) { $dispatcher-&gt;register('service-name', 3600, function (SomeCtrl $ctrl) { $ctrl-&gt;doSomething(); }); $dispatcher-&gt;run(); });
You get me wrong. Look at this (concept code): class MyMethodInvoker { private $mi; public function __construct(MethodInvoker $mi) { $this-&gt;mi = $mi; } public function invoke($callable, array $arguments = array(), Closure $failureCallback) { try { return $this-&gt;mi-&gt;invoke($callable, $arguments); } catch (DefinitionNotFoundException $e) { return call_user_func($failureCallback); } } } 
I'd say it's best to post these kind of stuff when it has matured a bit more than just being an idea thrown at the FIG mailing list.
I am definitely having a great time, thanks to PHP-DI. Thank you! &gt; I'd love to push FactoryInterface and InvokerInterface Do it. If my approach is useless then, I go and delete it. But I don't think that those interfaces belong to a interface like container-interop.
Right. I don't know symfony that good. But I don't think that two DIC mean less overhead.
ok i did that and all i get is: OK 1 compared the the "Thanks your message has been sent" no idea what this means.. Thanks
&gt; The Container interface stands in violation to ISP, being a composition of InstanceContainer, MethodInvoker and ObjectFactory; it shouldn't exist. Ok, finally I agree with that. I dropped that Interface. &gt; Nevertheless, the name is misleading; it shouldn't be referring to IoC containers when it's in fact for service locators. What is wrong with inversion of control here? All remaining interfaces only give access to implementations through interfaces and benefit the inversion of control. &gt; Because they're not within the scope of what makes a container. If you want to use things outside of that scope, then you simply implement those interfaces. That's what PHP-DI does currently, and it's the proper thing to do. Both DIC and SL claim to bring IoC. You can configure an object-graph completely by hand. So you don't need an container to do IoC. This project is not about containers. It's about IoC. So everything is acceptable as long as you comply with the contract. From this point of view, PHP-DI is just compatible with all three Interfaces. &gt; LSP actually states that if you have a concretion which is a subtype to a class' dependency, you should be able to substitute that dependency with the concretion without affecting the application's correctness. Behaviour is usually defined via subtyping (see behavioural subtyping). An implementation is a materialization of an interface. The interface already describes the expected behavior which the implementation must translate into correct behavior.
Being callable allows its usage to be specific to that component. I was thinking more like foreach($method-&gt;params() as $param) { if (isset($args[$param-&gt;name])) { $matched[] = $args[$param-&gt;name]; continue; } if ($callback &amp;&amp; $match = $callback($param-&gt;name)) { $matched[] = $match; continue; } $matched[] = null; } return call_user_func_array($callable, $matched); So the calling code doesn't need to provide all the arguments, and the method being invoked doesn't need to have those missing arguments injected via other means (constructor/setter), those missing arguments can be retrieved by a callback - which fits in well when the container is callable (i.e. returns plugins). 
I did not get that. Are you aware that the implementation of MethodInvoker already do exactly that? Currently a ParameterMissingException is thrown when there is a parameter missing.
&gt;What is wrong with inversion of control here? All remaining interfaces only give access to implementations through interfaces and benefit the inversion of control. IoC is fine, however 'IoC *container*' is often used synonymously with dependency injection container. See Martin Fowler's article '[Inversion of Control Containers and the Dependency Injection Pattern](http://www.martinfowler.com/articles/injection.html)'. &gt;Both DIC and SL claim to bring IoC. I'm not even talking about DIC vs SL here, I'm talking about the interfaces. Please, go back and re-read the thread because I get the feeling that you're not reading my responses properly. &gt;The interface already describes the expected behavior which the implementation must translate into correct behavior. The interface describe expectations. The implementation defines the behaviour within the parameters set by the interface, which is why you can change a program's behaviour by substituting a dependency with another implementing the same interface. See: http://en.wikipedia.org/wiki/Interface_%28computing%29#Programming_to_the_interface 
So if a callback is provided, it can be called to see if it can provide a plugin (i.e. service) with the same parameter name, otherwise it will have to throw an [exception](https://github.com/mvc5/framework/blob/master/src/Service/Resolver/Signal.php#L66).
Hi, I'm a developer with 10 years of PHP experience, most of it building custom applications. My current job is implementing a full scale e-commerce solution because the business is outgrowing what magento can handle. This new development project has been running for the better part of a year and still isn't done. So as for 2-4 weeks. Stick to magento. E-commerce is a rabbits hole of very intricate business rules, legal rules and it all amounts to a lot of required domain knowledge. You don't want to re-implement tax rules, shipping cost calculations, gift vouchers, order cancellation, inventory management, discount rules, stock management, reporting systems, metrics, etc.. etc.. Believe me, you really don't. Magento is slow, complex and has more options and settings then your average nuclear power plant. But it already has all that business logic down, you just have to configure it correctly. Also be aware that there are lots of plugins and modules available for magento, perhaps there's even a laravel bridge/integration module or something so you can have the shop be magento and all those other things supplied via laravel. Still, 2-4 weeks feels too short for anything like this. If it's really a brand new project without some pre-existing system then 2-4 weeks will be spent just getting the specs, and maybe getting some prototype up and running. 
&gt; Other than yoda conditions. They can fuck off. Fucking ridiculous, they are.
Not sure why you're getting down-voted -- the issue you're raising is interesting, and one we've thought a lot about. Basically, the core mechanics of Hack and PHP are close enough that there are a ton of things that h2tp just doesn't have to worry about -- the vast majority of the semantics of the language, in fact. The only differences are in the features that are new to Hack that PHP doesn't have. For those, we've been really careful to think through all the edge cases and yell when we can't properly deal with something. (This is why there are some really weird limitations right now on what we transpile -- collections are supported, for example, unless you use a static initializer in an instance variable.) There will be bugs, of course -- but any differences are absolutely bugs, that we'll want to fix. And IMO even if you aren't using h2tp, you're just as likely to run into the occasional bug in PHP5 or HHVM (whichever one you are using) -- all software has bugs. Test the transpiled version, of course. But I'm at least not super worried about this.
I used to use spaces for indentation, religiously. On a whim, I decided to start one small project with tabs for indentation, and I realized it was just tangibly better. It took some reconditioning, but I gradually switched to tabs for indentation, and now space-indented code just feels sloppy to me.
According to one study, your assumption is correct. Whichever you work with more often, you find more readable. I prefer snake for OCD reasons. With camel, if I have for example three single-word variables, I find myself trying to make a hypothetical fourth variable also single-worded so it doesn't stand out. This is partly an argument against camel, and partly an argument against my brain.
PHP already is the template engine. That's what `&lt;?= ?&gt;` is all about. Its primary purpose was to be injected into the HTML and since 5.4 they've made that really easy since `&lt;?=` is always available. &lt;?php glazyElement('p.className', 'Test to escape'); ?&gt; &lt;p class="className"&gt;&lt;?= $g-&gt;escape('Test to escape'); ?&gt;&lt;/p&gt; The first may be marginally shorter but I much prefer the latter because it allows HTML syntax highlighting, I don't need to know yet another abstraction layer syntax when I want to add a custom attribute, and it's going to be faster since it's not making a bunch of function calls and string parsing beyond the actual escaping. &gt; I should definitely be using namespaces, though I do have a common prefix for all my functions. Prefixes still pollute the global scope. [This is similar what it means to pollute the global namespace in JavaScript.](http://stackoverflow.com/questions/8862665/what-does-it-mean-global-namespace-would-be-polluted) &gt; Personally I find reading -&gt; a bit jarring but that may not be shared. This is definitely something you'll need to get used to in PHP as that's just the way the syntax is. There are many advantages to using objects that can't be achieved with just functions. Autoloading. Protected scoping. Multiple instances. Interfaces. Extensions. Traits. All of these are especially useful in a library that allows you to truly set certain functions as internal and overload users with more than they need to know or worry if someone is accessing something they shouldn't. &gt; Even if the API was object-oriented, a singleton would probably be ideal which is another form of global state really. Singletons are bad, for much the reason you specify. Static methods are also generally bad. Both of these make dependency injection difficult. Let your users instantiate the Glaze class, whether it's once or a thousand times. You shouldn't constrict or predetermine which is right or wrong. If you make your object creation lightweight, meaning just simple variable setting, then the rest doesn't matter. &gt; Also I have read that properties on objects are slower than associative arrays, so that’s why the state is all stuffed in arrays. You're going to need to back that up with proof. This is very unlikely since [PHP 5.4's Class Variable Access Optimization](http://www.phpclasses.org/blog/post/187-The-Secret-PHP-Optimization-of-version-54.html) changed object instantiation and property access to be much faster. &gt; This is one of the first open source projects I have made, so although I would recognise phpdoc attributes I don’t know how to write them. I am guessing this is fairly easy to pick up? Exceptionally so. For the most part all you really need is /** * Description of function/method/class declared below. */ You can add extra lines with attributes like @param to give longer descriptions of function parameters but just the description inline helps with IDE inline documentation display. 
What are the inefficiencies around Pythons usage_of_underscores_for_names?
I think there's some conditioning for which is easier to read. I've been using camelCase for a very long time now and when I recently starting dabbling in Python for a class the under_score_naming makes my brain pause between each word, like there's a comma there: "More, readable, less, writable" As /u/panoptisis put it, the preference of readable is more about familiarity. If that's the case then I propose going with the one that has a quantitative benefit (easier to write, takes up less space, self contained relational) and letting the brain figure out the rest.
It may make you a better programmer, though. Coding is all about precision and paying attention to detail. We humans may know what is meant when little typos are made, but computers don't. The same applies to design, naming, structure, separation of concerns, and all the other design patterns that make things easier to work with in the long run. That's one reason why I think attention to coding style, and making it better, is one indicator of ability progression.
Not to sure what you're exactly looking for, maybe Chartio fit your requirements? http://chartio.com 
This is an anti-generalization to counter a generalization. Yes, there are exceptions, but they're not the ones I'm talking about. As a general rule I find that people who don't pay attention to coding style, who don't refine their coding style, also lack those qualities in their code. Not everyone, and there are gifted programmers whose style is complete slop (though I certainly wouldn't want to work with them or maintain a project they've created) but generally speaking. Maybe this doesn't apply to you or some of the people around you.
Agreed. It's probably more corollary rather than causation. Since computers require precision the attention to detail can apply to and be visible in more than one thing.
As a rule, if you want to tell if someone is good at programming you get them to solve a problem. This will tell you far more about them than coding style (or a lack thereof) ever will. I maintain that coding style is not a useful indicator of anything important.
Sounds like you want some sort of CRUD generator
One of the biggest issues I've had with spaces is with regard to changing indentation. I typically can't just use backspace (unless I want to press it four times), whereas with tabs I can. Another reason is indirect. A lot of people who insist on spaces also insist on making the code artistically pretty. Justifying array key/value pairs (extra spaces) or use an odd amount of space indentation for continued statements which would 'break' if using a tab. It seems like a lot of extra effort for very little gain.
In my experience, coding style is not as important as consistency. It doesn't matter if you have pedantically perfect coding style. When you move to your next job, that shop will have different standards and you have to conform to them. If you follow coding style, that tells me you're a team player. If you don't, then you're not. That doesn't make you a bad programmer, per se. Just a sloppy one who doesn't care about team dynamics. When it comes time to help define a coding standard, just pick one that's already an industry-wide standard (or contender) and stick with it. It's far easier to find people who are already comfortable with the style and chances are there are code style linters already written for it. IMO, back-and-forth about coding style is baloney. Just pick a style and stick to it, end of story. 
Maybe something like Drupal? It's not ideal, but it lets you create "content types" with custom fields, and then with the Views module you can visualize that data in lots of different ways. You can do most of this without ever having to touch code.
Here's a question for you - if someone had bad handwriting, would you think any less of the content of what they wrote? Code style is, for practical purposes, a matter of politeness. Both to others and your future self. I find it more indicative of a person's ability to work with a team than their actual coding skills.
My thoughts on underscores in general: * It's a holdover from C and older languages and specifications before case sensitivity. We're limited in our ability to move forward if we don't occasionally rethink even the most basic aspects of our craft. * Typing underscores takes more effort than typing with camel case. An underscore requires moving the right hand up to the top row using a weaker finger, then moving back down. Whereas with camelcase it's very similar to any other typing already being done. * Underscores take up extra space horizontally that could go toward more descriptive names or comparisons. * Incidentally it causes my brain to put commas between the words. For example, "usage, of, underscores, for, names". This one is likely just my existing familiarity to camelCase usages. That's what I can think of off hand anyway. There may be another point or two lurking around my brain while thinking about it in the past.
Dreamweaver?
&gt; They are new to coding and are searching for a tool that has a GUI frontend to help in designing an application that includes simple data entry "screens", searches, reports, etc. Being able to produce client reports in PDF format would be a bonus. So basically, from what it sounds like, they're trying to create an application by mashing GUI objects together--something like HELIX? Yea, good luck with that.
Have them check out PhpRunner. I've used it in the past to solve some very simple data entry issues and quick reports. It even handles related dropdown tables etc.. And definitely more mature than ScriptCase, imho. Plus, they have a trial when you download it that works for a couple of weeks. I think you may be surprised. It may not be as polished versus having someone develop and app with modern frameworks and such - but it's certainly "good enough" to solve business problems, Right now. http://xlinesoft.com/phprunner/ 
This sounds pretty close to my own progression of both ability and coding style. Starting out with modding phpBB, moving on to a task for Gallery v2's PHP4 OOP, then a work project's PHP5 standard, and so forth. I have yet to work at a place that allows me to use much of the advancements since 5.4+ and this makes me very sad. My last job lied in saying they were using 5.3 yet were still on 5.2. One company I looked at still had the Powered By for 5.2 in their header. The number of places I see that aren't keeping their technology stacks up to date is also somewhat frightening. &gt; That would be anarchy. I'm okay with anarchy. :-P I like to push the envelope and try new things. Some of them might not work but there's still lessons learned and new ways to try things. I hate being stuck in tradition or "that's just the way things are". Meh. ^(PS: I like camelCase so this isn't disagreement with the original statement)
yeah, it's called a developer. hire one.
Well the anarchy comment was extremely tied to the camelCase point, so... :) Also if a job is lying to you in the interview then jump the fuck out of there before you find out they're lying about medical insurance or actually paying you. 
Security has nothing to do with composer and should not be bound to it. What you wrote there is an working example, which should come after a group has come to an agreement about what data to share, in what format and how to discover that data. After you have that information, anyone could write a tool to implement that and composer could be just one of the many tools. In other words, you started backwards, because you don't start writing the tool and then outline the specs, but the other way around.
Fortunately I was in the postition to choose development technologies so I started using PHP frameworks in my job rather than using Magento/Drupal to create kludges. Later as a I realisied it wouldn't be so easy to switch jobs with PHP I learnt Python/Django at home and then intoduced them at work. I think had it been easier to find a decent PHP job I wouldn't have made the effort as I ended up working a lot of weekends/evenings to learn faster. I think realisitically you'll need at least a year's experience to find work with Python. Fortunately the PHP experience is often useful as well which is why I make the effort to keep in touch. Ultimately though you may have to accept a paycut as you retrain. For instance I turned down a lot of Drupal contracts which at the time were pretty well paid. Good luck! 
Cool! Anyone know how this compares to wkhtmltopdf ([with a library such as this](https://github.com/mikehaertl/phpwkhtmltopdf))? I've been using wkhtmltopdf myself and it seems to support pretty much anything I throw at it (CSS3 etc.), which is understandable because it uses a patched version of webkit for rendering. The drawback is, of course, the need for a separate binary while Dompdf is written in PHP.
Another solution is to use PhantomJS (headless webkit). You send your html to phantomjs binrary and you can get a webkit-rendered perfect PDF. You can make a php client and run script in PhantomJS if needed. http://phantomjs.org/
I've used DomPDF in a project, while it's okay for simple PDF's with a title and some text. It's horrible when you need columns and large tables, not everything works the way you expect it to. I would not recommend it. Personally I think I'll set up a digitalocean and write a simple API for it to generate PDF's with wkhtmltopdf and just slice pdf's the same way we slice everything else, and then use that API for all other projects.
Great advice, thanks for taking the time to write it out. 
must be a strange IDE when you cannot delete an indentation as whole regardless whether its spaces or tabs.
Just a bit. http://www.codeskulptor.org/
Thanks, all your points are really good. I’m definitely not saying “drop your current system and use mine”. It’s a bit of an experiment. I’ll just highlight the example you gave, as I think it has a couple of interesting things. &lt;?php glazyElement('p.className', 'Test to escape'); ?&gt; &lt;p class="className"&gt;&lt;?= $g-&gt;escape('Test to escape'); ?&gt;&lt;/p&gt; In the bottom one, you are explicitly ‘escaping’ the text you have. It’s pretty easy to remember to do, but not always. In the glaze example, you just write the text you intend to present. It focuses on the content. You don’t think ‘ah yes, this needs to be escaped’. It’s in the same way that the more pleasant database APIs don’t need you to think about first escaping variables you pass, you just pass them. The glaze example also lets you write the element as a selector, which is the same way you are going to read it in the web inspector, and the same way you will write it in your CSS. This I think is pretty natural. It’s however not ideal for writing all of your HTML in. In websites I’ve used this on (http://www.infinitylist.com/), I was cautious of speed and I saw durations in the tens of milliseconds using glaze to make a page. It’s a WordPress site, and the time from the first WordPress PHP file beginning executing to the theme being able to display content was one second. So no matter how fast glaze or whatever else I was doing, there was always going to be a 1s base to execute a request. Of course I used a page cache and even component cache and so both stopping becoming an issue. In regards to global pollution, there are two version of the API. There is a globally state based one (`glazyBegin()`, `glazyFinish()`), and a stateless one (`glazyPrepareElement()`, `glazyPrepareContent()`). There are also functions that work with both (`glazyElement()`, `glazyAttribute()`). As I said, this is partly an experiment of mine of how best can I make this interface. Maybe I remove one because the other works better. But I had to try both (and other discarded ideas) to see which one worked best. Maybe I will try converting them to an OO API: `$g-&gt;begin(selector)` or `$g-&gt;prepareElement(selector, content)`. Also – WordPress has lots of global state, functions, and very few public classes. So I was following a bit of what I saw there. WordPress is no Mona Lisa I know. The stuff I read on object property speed was probably PHP 5.2 or earlier. OK I will give the phpdoc stuff a go. Again, thanks for your feedback!
done ;)
you don't have too, it's done :)
For anyone feeling the pain of tables with dompdf, I use mdpf and it seems to play much more nicely, even with page breaks. No executable required, as with dompdf. http://www.mpdf1.com
While this tool has its place, I'd like to mention another, maybe less obvious option if you're trying to create invoices, charts and the like as PDF: LaTeX. You could use a template framework of your choice to fill anything you need into a predefined LaTeX document, then invoke PDFLaTeX and have your pdf file ready. The output will be a high-quality typeset document, and if you're creating documents for print, really consider this route, because the problem of having a typesetting engine for print-quality text and graphics has already been solved pretty good.
we also used mpdf because of it's strong support for CJK (Chinese, Japanese, Korean)
That only means that DQL is not [ISO/IEC](http://en.wikipedia.org/wiki/SQL#Standardization).
A couple of things come to mind from a quick look around... Templates and view - Do these need to be separate? Is this just a convention to follow, or do they actually work differently? \ehController\EH_Model - I'm not sure it make sense for model to be 'inside' controller? In most frameworks I've used models and controller serve different purposes and won't inherit from each other? It also seems to change naming convention from camelCamel case so CAPS_Snake_Case?
Agreed, PhantomJS is awesome for PDF generation, since you don't really need to learn anything new, you simply use HTML and CSS (and even JavaScript if you want) to generate PDFs. Having said that, PhantomJS has some serious issues with webfonts, so if that's a requirement, I'd said wait for version 2 which apparently fixes those problems.
Thanks. Templates and view - Yes they are different. And they work differently. You can have one template(say one_col.tpl) where you can load different views. But if you dont want to use the template, then you can use the view. The problem is you will have to include header, footer in every page if you go ahead with only views. \ehController\EH_Model - Sorry if that sounded confusing. Its just the namespace. use \eaglehorn\core\controller as ehController. Now the core/controller folders contains various classes (loader, model, router, logger, etc..) which i consider to be the core controllers. Do you think i should change the controller folder name ? Controllers inherit from EH_Base and models inherit from EH_Model. About the naming conventions, yes i wanted to prefix EH, as i didnt follow namespacing. But now that things are better, i will change those names.
Does it just generate an image inside the PDF or is it a proper PDF you can select text etc?
Proprietary doesn't mean it's not open source. Just that it's not standardized.
i swear reddit is working with google... 10 minutes ago i was search google for wkhtmltopdf alternatives and bug reports. shortly after i hop on reddit, here's this thread. hmm something to think about
https://github.com/doctrine/dbal/blob/master/LICENSE / https://github.com/doctrine/doctrine2/blob/master/LICENSE
Just a few things to improve: * MVC is not as clear as [ADR](http://paul-m-jones.com/archives/5970) and [DCI](http://en.wikipedia.org/wiki/Data,_context_and_interaction) are. * Why EH_Logger in favor of PSR's LoggerInterface? * Why do my controllers need to know about a EH_Base? * Why do you use ?&gt; * Why do you include [.idea/workspaces.xml](https://intellij-support.jetbrains.com/entries/23393067)? * Why do you include [/vendor](https://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md)? * Why don't you put index.php in a separate */public*-folder? * Why do you mix lowerCamelCase, UpperCamelCase and underscore-naming? * Why do you use a session-class with a hard dependency to a database-class and w/o locking/semaphore-support? * Why do you mix html into some classes? * If you already use PHPStorm, why don't you typehint everything correctly? * If you already use PHPStorm, why don't you automatically format your code? And now the master-question: Why did you even publish an experiment like this?
Getting my current company off of dompdf generated pdf templates, and switching to wkhtml2pdf, blew minds, netted new client revenue of over 200k this year (who specifically identified our report documents as the game changer) and made me look like a warlock. The crazy part is how damn easy it is to implement. The best tool addition in the last 2 years for me. Never going back. 
The namespace is how we organize projects in PHP and create code that doesn't interfere with other parts of the project, it's good to see you utilizing them. Though, you still have some 'require' statements in some places which could be better addressed by 'use' statements and the composer autoloader. Using prefixes within namespaces creates a non-intuitive structure, if not just annoying, in my opinion. Anything within \Eaglehorn\ is already assumed to be yours, so we don't need prefixes for things like EH_Model or EH_Session. You still have some functions in the global scope. Consider organizing these within the scope of relevant classes, as these are not needed everywhere. Your view shouldn't need to getUserIdFromEmail() and your controller shouldn't need to a_anchor()
I don't think that is a PhantomJS problem to begin with. The same is true for using wkhtmltopdf or even costly servers like ActivePDF that use the webkit library. The library has problems with non-Unicode fonts, font-faces and kerning. It's gotten a bit better when using wkhtmltopdf on a Unix machine but other than that, this problem might pop up everywhere webkit is used to create a PDF.
your .idea and vendor folders should not be in your repository. - you classes have weird names, looks like you are combining old underscore "namespaces" with the real namespaces, e.g.: `eaglehorn\core\controller\EH_Base` - you coding style is trange wen it comes to `namespace` and `use` declarations, I don't know why you don't just do it like everybody else does it? - you mixe real tabs and spaced tabs in files (e.g.: https://github.com/ajaxtown/eaglehorn/blob/master/core/controller/EH_Model.php) which makes indentation go crazy - php-only files should not have closing tags - you model, view, controller, logger, router, etc classes are all under the `controller` namespace, why's that? - weird casings in class names and namespaces the devil is in the details; and I only have time to open up some random files :) edit: this line: https://github.com/ajaxtown/eaglehorn/blob/master/core/controller/EH_Model.php#L306 why don't you use a `foreach` here?
Same experience here, I tried a few of the PHP solutions for rendering HTML to PDF but wkhtmltopdf was multitudes faster. Plus the benefit of using WebKit to render the HTML/CSS insures that you get a really accurate PDF representation of your markup.
Thanks. Agreed. I will work on this tonight and make it clean. What you see as 'EH_' was because earlier i didnt use namespaces but now i have. So yes, will change all of them. php-only files should not have closing tags - I didn't know this. Thanks. Will fix. 'you coding style is strange wen it comes to namespace and use declarations' - Can you please elaborate this ? I would be happy to rework on this.
&gt; Though, you still have some 'require' statements in some places which could be better addressed by 'use' statements and the composer autoloader. Sure, i can use the composer to do that. they are the files that I need with every request. So yes, i can do this with composer. &gt; Using prefixes within namespaces creates a non-intuitive structure, if not just annoying, in my opinion. Anything within \Eaglehorn\ is already assumed to be yours, so we don't need prefixes for things like EH_Model or EH_Session. Earlier i didnt use namespaces. So i names those files with prefix. I will change them now. (I actually should have done it before) &gt;You still have some functions in the global scope. I understand what you say, but i have actually seen cases where these small functions becomes very handy. Sometimes in views, templates. These functions are pretty much independent. So i thought its ok to have them in global scope. I really thank you for the feedback.
I think this is a good idea for a number of reasons 1. If you are designing your own component you can look at how its handled elsewhere and perhaps just provide your own adapter that implements an existing interface 2. This fosters the idea of building components that are not tied to a specific framework through the use of common interfaces 3. Highlights areas where PHP could use some components or interfaces to describing common things In terms of what to include, I would definitely include Symfony's HttpKernelInterface which is just handle(Request $request) which returns an instance of Response. This is used by Symfony, Silex, Laravel, Drupal, etc. and there is something called StackPHP which builds components on this interface http://stackphp.com/
Thanks BubuX for the support. Yes, i have developed something which has flaws. I am really looking out for suggestions. But really, the project has improved greatly.
Horstmann style code reads really beautifully. The problem is that it's much harder to write unless your editor is configured for it. If you ever intend another developer to work on your code, you'd be doing them a disservice to select something that requires such a particular configuration to work efficiently. I really like vertically compact code, so I don't like wasting entire lines on braces. These days I stick with this: class Rofl extends Lol { protected $haha; public $eheh; function __construct () { $this-&gt;haha = "haha"; $this-&gt;eheh = "eheh"; } }
;)
&gt; *under_score_naming makes my brain pause between each word, like there's a comma there: "More, readable, less, writable"* How strange. You should probably try to think of underscores like spaces, instead of commas. Some people use double underscores to represent the kinds of pauses you speak of, but I think they look ugly as shit, so I'd never double underscore. I think to pass readability off as mere familiarity is a mistake; it's obvious that underscores serve as more distinct separators as opposed to the mere capitalization of a letter. Sure, perhaps your particular familiarities cause you to read camel casing faster, but in the long run if somebody were to train for maximum readability, they'd surely always select underscores. That all being said, I'm not too sure that we should underscore everything. I do actually find them a pain in the ass to type, and a generally do use camel casing (to conform with native PHP and JS naming standards). In JavaScript, I used to underscore all variables, and camelCase all properties -- a practice I'm considering picking up again these days...
for example this file: https://github.com/ajaxtown/eaglehorn/blob/master/application/controller/welcome.php it has the `namespace` on the same line as the opening tag, and the `use` statement is indented
You should probably remove your IDE configure dir '.idea' from the repo. 
Alright! That's indeed a lot easier. Didn't knew that the scope of the class was that way. I thought that when i required something, it was ran outside of the scope ( which sound stupid right now i know this... ) Again, thank you very much. Will try this and play with it.
As a first attempt I'm going to say good job! It's definitely not terrible, if that's what you're afraid of. It's good that you've got some nesting and reusability going on. There is a lot of room for improvement, but the biggest problem IMO is that you need to find a way to store the content of your view inside a variable, so that you can return it as part of an http response. As of now your web app will just be sort of echoing out a string of HTML. That *can* technically work, in the sense that the page can get rendered out in a browser, but it's not good practice. If you're not using any 3rd party libs, research "output buffering" in PHP to find out how you can store the rendered view as a string. Once you've stored the rendered content in a variable, you can do whatever you want with it - use it as an email, an http response body, record it in a database .... 
I agree with you on all points, but the master question isn't needed. Don't be a dick. He's learning and asking for guidance, don't shun him for it. 
This will totally depend on what OSes you have. Offer up that information and suggestions can be made.
As easily as you learned to code in Python/Django.
What OS? Are you using it as an Apache module or some form of cgi/fpm? There are a number of different ways to run php and a number of different ways to install it(operating system packages, built from source) not even mentioning any extensions that you may need. Bottom line is we really need to have more info to help you with this
The fact that you're asking and that you refer to yourself in title by the languages you primarily work with suggest to me that you're fairly junior/indexperienced. In any case it's a matter of aptitude and effort, but experience and having more languages under your belt makes it easier.
Sorry I'm not going to be able to help with the windows ones. As for the Linux ones were they installed via a package manager or built from source?
both, mostly source
Running serveral enviroments, both Windows and Redhat based 
Couple things you want to consider. 1. Your vendor directory should not be committed. People should do their own composer update. You shouldn't commit a composer.lock either(I notice you haven't, but worth mentioning as you don't appear to have a .gitignore file) 2. Your actual core framework code should be in a separate repository. While I understand this may sound weird, it really isn't. This is the common practice for frameworks. Composer has a function called "create-project" so by moving your core folder into a seperate repo and including it via composer, people can get your framework up and running by simply typing "composer create-project ajaxtown/eaglehorn" 3. You're violating rules of PSR-2 with your namespaces and class names. Classes should start with an uppercase and be CamelCase. Same goes for namespaces. Functions and class properties are camelCase with the first letter lowercase. I realize this is a minor gripe, but when so many other projects adhere to this, especially ones people will load in with composer, it makes your framework specific code stand out. You've also got some miss-matched namespaces, ie eaglehorn/application/controller and eaglehorn\core\controller\EH_Base and eaglehorn\core\controller\EH_Model 4. Your framework organization needs work. You organized some core libraries under the eaglehorn\core\controller folder. While Controller may mean something different to you than Controller does from a MVC perspective, it's ambiguous and confusing. Many programmers who may wish to use your framework will look at your code as a form of documentation, so you want it to be as clear as possible. I recommend moving all these classes simply into eaglehorn\core. 5. You're not utilizing a "public" folder. This is such a simple trick that offers some great protection against people trying to scope at your files, and also some better organization. Your index.php file should reside in a new folder(called something like public, or web, or html). Then it will require files as it did, but preface those paths with "../" so instead of require 'vendor/autoload.php'; it's require '../vendor/autoload.php' apache will be setup to make the public folder the web root, and anyone browsing the site will not be able to see anything beyond the index.php file, and any static assets(css/images/js) 6. [exceptions should be in their own classes](https://github.com/ajaxtown/eaglehorn/blob/master/core/controller/EH_Logger.php#L18), even if they are empty. This helps for tracking them down. 7. Your logger should implement PSR-3. There's a ton of useful log storage, analysis, and data mining tools out there that utilize PSR-3 and by creating your own private logger, you're blocking your developers from utilizing these tools. 8. Having both templates and views is confusing. Which one should we use? I see having a choice as a good thing, but having them organized in seperate locations can lead to confusion. Maybe have a special file suffix. so if you say renderView('path.to.view') would load either path/to/view.html or path/to/view.tpl depending on if it's a view or a template? 9. I'm seeing lots of locations where you include files or have 3rd party libraries in there. This is absolutely not recommended. If you need a 3rd party library, you add it to composer and allow autoloading to handle the rest, by committing it to your own repo you eliminate that author's ability to fix bugs in the version on your repo 10. why do you have a font engine library? This seems like a lot of code for what normally amounts to a few lines of code in a single html file, what are you hoping to gain with this code that requires a library? 11. Check out swiftmailer as an alternative to the phpmailer class you're using. It follows standard practices, can be included via composer, and offers a wide range of features. 12. your functions.php file is all over the place. You have camelCase names for some functions, and underscore_names for others. you even check for the underscore_name and then promptly create a camelCase name. 13. You're entire folder structure needs work. What does worker mean? what does assembly mean? Why is Mail under assembly but Pagination under worker? 14. your templating system offers literally zero logic. How do you handle if statements? loops? template inheritance? PHP is a great templating language by default, and usually template inheritance is only useful if it offers features beyond what you can do with straight PHP. I would either seriously consider dropping your template library in favor of straight views, or evaluate a 3rd party solution for templating.
Then download a new copy of the source configure, make, make install then restart php. That's the basics I'm on mobile atm so can't give you better instructions. 
It's just because why should everybody have his own php-mvc-framework? 
[Here](http://php.net/manual/en/install.php) you go. HTHURTFM
Don't worry about it too much, I've been developing with PHP for a decade and thought the same thing until relatively recently.
I honestly just recommend setting your code style in your PHPStorm project and telling it to reformat all of the code based on that style. Then just go in and use the refactor tool to change the class names. Shouldn't take too long.
I've used DOMPDF, MPDF, FPDF, wkhtmltopdf, and WK is the winner by far. The rest are fine for static content, though they get progressively slower as your DOM increases its nesting level, but wkhtmltopdf is the only one where laying out content has the HTML/CSS feel. More than that, it's the only one that supports JavaScript (and then it becomes slow) so things like MathJax will not work in the others.
&gt; He's learning and asking for guidance Yes, and also asking for people to actively use this framework as a tool for understanding MVC and other concepts. I have no problem with posting something for constructive criticism, but there is a fine line between "sharing/learning" and "publishing". E.g. - From the README... &gt; Eaglehorn is a PHP MVC Framework for developing PHP applications. It gives a very clean way to understand how MVC works. A light-weight framework with the concept of Assemblies (Helper classes which have dependencies and needs more than one file) and Workers (Individual helper classes with no dependencies and is always one file). This is (objectively) a bad framework to learn high level MVC concepts from and that says nothing of PSR naming conventions and best practices, SOLID or anything else. If a newbie picks this up, they'll be learning some bad practices. &gt; Why should I use Eaglehorn when other powerful frameworks exist ? &gt; Its a choice. In terms of learnng, you can learn and understand this framework in couple of hours. Its that simple. This is trying to coax newbies into learning and using this thing. I fully advocate for people to share things and seek criticism, really I do! I just think that to some degree you should market things responsibly. The reality is that this is a learning project / toy for OP, which is great! Really I mean that. I just feel like OP knows there are issues with this framework, it will be unstable and in flux for the foreseeable future, and shouldn't really market it as anything else. So seek feedback and share, of course! Just be realistic about what your users might expect from it. This thing will change a hundred ways from Sunday in a very short period and you'll be damned if you decided to actually use it for something. They say you build 3 frameworks as you go. The first one is an abomination and you blow it up. The second one is much better and implements some of the new concepts you've learned. The third one you never build because you realize the problem is already solved by existing frameworks. I think EagleHorn falls somewhere between 1 and 2. I actually find it very interesting and refreshing to see the progress, I just wish the readme had a big disclaimer saying this is an unstable pet project rather than a framework for the masses. In fact, now that I've written all this I'm going to make a pull request with an alternate README later today and see how that goes.
FYI, I'm pleasantly surprised at how you're responding to feedback. Most of the time, when someone posts a homegrown framework that receives (usually harsh) criticism, they either ignore it or get defensive. You, however, look like you've been doing your best to take it to heart and are making tons of improvements even when they're painful ones. I admire your receptiveness and work ethic.
Not necessarily.. I define myself as a PHP developer, simply because it's the server-side language I've really used in the past 5 years. However, the fact that he asks does imply he is inexperienced.
O'Man, i am very thankful to you for looking all corners. I will reply in bits. The points 1, 3, 6, 10, 12 have been fixed. I am looking at your other points and figuring out how to implement them. I will definitely work on them and let you know.
Thanks andrew. Took some time to configure. But it was worth. I was using netbeans but it uses a lot of memory. I shifted to PHPStorm 3 days back.
@ronkr :) Well, i do agree with that. The fact is i work for SAP. But i like open source. I dont have a team to discuss/learn. Its all by myself and its only through criticism that i am learning and improving. I agree my readme.md file might be misguiding and seriously i didn't think it that way. I will change it soon.
Thanks! I have nothing to lose in accepting my ignorance. People sometimes comment too harsh instead of suggesting, but thats ok. What ultimately matters is, I am getting benefited. 
&gt;If their handwriting included poor grammar and sentence structure which made it even harder to understand what they wrote, even after reading what they wrote, I might decide it wasn't worth the effort. You've extended the metaphor too far here. Bad grammar would equate to bad code. Something that doesn't compile or doesn't work. Bad code style doesn't mean it's bad code. Just harder to read. 
Yeah configuring PHPStorm takes a while but considering I spend almost all of my day in it, it's worth even an hour or two of time.
To learn? I'm sure everyone said the same thing to Taylor Otwell... If he would have taken that advice we wouldn't have terminology to bitch about. Doesn't matter if nobody uses it. I built a framework too, why? Because I learned something while doing it. 
Doesn't seem self contained, it depends on a library that is way to huge. I wouldn't call this *micro*. This is something that I see a lot lately: using the word micro just because the visible part is a few lines of code, but internally use to power of a big library.
*What is Eaglehorn ?* *Eaglehorn is a PHP MVC Framework for developing PHP applications. It gives a very clean way to understand how MVC works. A light-weight framework with the concept of Assemblies (Helper classes which have dependencies and needs more than one file) and Workers (Individual helper classes with no dependencies and is always one file).* *Why should I use Eaglehorn when other powerful frameworks exist ?* *Its a choice. In terms of learnng, you can learn and understand this framework in couple of hours. Its that simple. Also, it uses latest PSR-4 standards(namespacing, autoloading, naming conventions..) But if you are really making an application whose magnitude is like Facebook, I wont recommend this.* To me this sound somewhat different than "Don't use me, I am an experimental framework for learning purposes".
Does it really matter?
&gt; are there justified uses for this approach? The multiline concat thing is absurd. If the author wanted to emit a giant block of HTML inside PHP, they should have used a [heredoc](http://us2.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc). The mere act of emitting HTML from PHP is not bad. Emitting HTML like this inside PHP code while that code does things *other than emit HTML* is bad. &gt; Is it possible to process a php template, within php code, passing it a context with the appropriate variables? Yes, this is how almost every template library works, regardless of whether the underlying templates are pure PHP or in a custom markup language. Pure-PHP template libraries usually end up having a local array or an object, or doing an `extract()` to put things in the local scope before `include`()ing the file. Also, please remember that while PHP is a perfectly adequate template language, if your templates will ever need to be modified by a non-programmer, using a template system will be vastly preferred. Twig is decent.
My post would look the same, except the last sentence. And may be it would be a bit more polite. I love helping people. Really. But it makes a difference if you say you learn something or you recommend something because it is possibly a good foundation to build on and learn a whole concept. As a trainer I know a lot of people that just started programming and within an orientation phase a lot of things can go wrong and confuse people when you tell them that most stuff they already learned was wrong.
&gt; It should be a full-stack framework with no dependencies Other comments leave me confused. But I understand. The library isn't that big really, and I would much rather have a *micro interface* that still uses and provides decent abstraction.
Seems interesting. I currently have not enough time to crawl through your code, but there was something that immediately jumped into my eyes: https://gist.github.com/jm42/bf14542932e585ae01ff#file-lib_app-php-L7-L10 Seems like you should get in touch with something porn-like called [autowiring](https://github.com/rkrx/autowiring-example). That's a technique to automatically build an object-tree with all dependencies involved. All you need to do is to [start something like a controller](https://github.com/rkrx/autowiring-example/blob/master/run-with-dic.php#L15-L16) using the [container](https://github.com/rkrx/autowiring-example/blob/master/run-with-dic.php#L10-L12) and the magic happens. If a dependency needs configuration, a DIC could offer you a more or less elegant way to do that. In my example I used PHP-DI4 for [that](https://github.com/rkrx/autowiring-example/blob/master/config/di.php). After that, you need a class only look like [this](https://github.com/rkrx/autowiring-example/blob/master/src/Test.php#L21). PHP-DI4 also offers LazyInstantiationContainers if you have classes that have many dependencies but not all execution-pathswould utilize all of those dependencies.
We see *so many* bad frameworks posted here, and after they're torn apart, the authors kind of slink away and never return. I think it's *great* that you're improving your code and responding to feedback like this. 
Its refreshing to see the way this thread is transpiring. You're taking it on the chin admirably, and you're getting a lot of valuable input for nothing; most notably you are applying what youve been taught. That smells like wisdom. I could use 3 people like you at work. 
Thanks, I'll check it out and pass it along. 
Not exactly, but I see where you are going. Thanks for the idea though! 
That level isn't necessary, my example Scriptcase isn't that at all, and it works fine. Thanks for the feedback. 
Any outputs in the console tab of your developer tools?
 $foo = 1; $bar = 'hello world'; ob_start(); Include("path/to/view.php"); $out = ob_get_contents(); ob_flush(); print $out; ...or something of that nature. 
It wont run jquery. "Jquery not defined" none of my javascript variables work. Keep in mind that everything works fine if I use the Ip address 
That should definitely be part of the tool set offered by the solution.
well, propably check the network tab then, if your jquery file is being loaded. and if it is not marked 404, check if the content loaded is actually correct.
Additionally these [four lines](https://gist.github.com/jm42/bf14542932e585ae01ff#file-lib_controller-php-L15-L19) shows where supporting [named arguments](https://github.com/mvc5/framework/blob/master/src/Service/Resolver/Signal.php) would make this code alot more flexible. I certainly like the code and the ideas. 
Yes. I know what autowiring is. Think that this is only a PoC. The `Application` here is not instantiated by the DI, and is accepting any callable. I don't think is the case for autowiring. This could be a case when the default `FrontController` is not used: &lt;?php function maintenance(Request $request) { return new Response('Service Unavailable', 503) } $app = new Application($container, 'maintenance'); How would you specify a default value for the controller to be wrapped by the application? --- Also, I don't want to enter a lot into, but I understand *convention over configuration* but I prefer the contrary with defaults.
I know that lines are not **nice**. There are there to skip coding/using a full DI for just a demo.
Looking at those PoCs got me confused. But with that said, have a look [here](https://github.com/mvc5/framework/blob/master/src/Service/Manager/ManageService.php#L40). We have similar ideas, e.g a configuration object ...
I was pointing them out since now that I look more closely at the code, there really is a lot of similarilities. Yours is just the tiniest step possible to chain together some callables, where as the [ones](https://github.com/mvc5/framework) I showed you have a little more character and its entire worflow is configurable - there is no set pattern, and with a serializable DI configuration there is no bootstrap required. Anyhow, yes it is nice!
Well, sure it's possible. It really becomes a question of what happens after you make your changes. Do you want to save it to a database? Save it back to a .csv? Either way is fairly straightforward, just a matter of what you're looking to do with it. But to create the form page, you could read in the .csv (and store it in some sort of data structure, perhaps an array), and loop through each element, drawing out a form field for each item in your list. Then, add a button that submits the form and performs the action you want (generate a new .csv, for example). If you can expand on what you're looking to do, I could provide a quick code sample.
Actually, I don't like much giving the `Request`/`Response` to the controller. Instead of all that parameters, the controller is called with the model as described above and is the only part that the controller/view should be interested in. But sometimes the controller need to use the request for something else, for example binding a form (pseudo-code): function submitUser(Request $request, User $user) { $form = new FormUser($user); $form-&gt;bindRequest($request); // ... } The view will never receive the `Request`.
Well, my highest goal (in this matter) has always been that I can take a controller and throw it to a different project or even(!) to a different environment like CLI. So my Controllers become more like a Facade then a traditional controller. Binding data to a form is just a matter of the view to me. May be some time I want to completely change the way how I edit Data. Just a few months ago, I rejected nearly all of my Form-Components and built something by utilizing AngularJS. Having all that view specific stuff in my controllers, I could not have made the switch that fast - if at all.
I am also using PhantomJS and found it to be very excellent. This is the library I am using to talk to PhantomJS: https://github.com/kriansa/h2p
Well I was searching something like read csv, put it into datatable so the user can edit some data. And then save it to database. You have something like it :) I searched it git hub and open source but didn't find anything.
I just finished working on point 7. Commited my changes. Its 4am and i should give some time to my biological cells to refresh.
For #14, you should take a look at using [Plates](http://thephpleague.com/plates/) as a templating engine. I've used it on a number of small projects and it's a really nice.
&gt; Plates Thanks, i will go through it tomorrow.
Previous discussion: http://www.reddit.com/r/PHP/comments/2ju3ym/rfc_safe_casting_functions/
Thanks. Sorry for short description. I wasn't even sure this sub would be helpful as you mentioned phphelp. Basically im trying to query a remote db2 database from a local pho installation of a configured xampp. I added the php_ibm_db2.dll and set it in the php.ini. when i restarted the apache webserver i keep getting error on start up saying something about missing db2cli. I'm not at my computer so can't be specific atm. Then when calling the db2_connect it says unable to recognize function. 
Are you like.... asking one of us to build this for you or something?
No I'm just looking for a download to a PHP script or some kind of guide.
Sounds specific enough that it doesn't exist, and nor would a tutorial on how to build it. However there are plenty of tutorials on how to use PHP with a relational database in a web app (see my posting history for one such example). From there you can learn generalisable skills that will help you build your particular project. 
I want something link http://wii.spiffy360.com has. So where would I find theses guides?
Dude I'm not paying anyone to do crap and I don't have that kind of money no one really does.
The posting was vague enough that you may have been looking to hire. I was letting you know what I would charge. 
As I implied above, it is often the case that you won't find such a guide. Over on Stack Overflow I frequently encounter the question, "can someone point me a tutorial for &lt;thing&gt; please". If the thing in question is not a blog or forum or some other _really_ popular project, the odds are that no such tutorial exists. The trick is to find a tutorial that teaches you general concepts, you learn those concepts by following along, and then you apply those general skills to your niche problem. 
I would think Plates would be easier for a designer than Twig.
Yes, although: * Wrap this in a function/method so only explicitly set local vars are passed to the template * `include` and all other PHP functions should be written in lower case * It is usual to omit the brackets for `include` * `echo` is generally preferred over `print`
Just an FYI, SEO ranking do not equate to a solid product. Be careful hiring someone just because they are well ranked. 
This is a fair point - "proprietary" means owned, and the word is often used to mean patented. Perhaps they should have said "non-standard" instead. 
You found a requirements specification in the original post? `;=)` 
Klick -&gt; Click
If you're saving to a db you might aswell just import the CSV directly into that and then just build out editing functionality around the db. Either way http://csv.thephpleague.com/ will be a good start
ALSO: 1. The HTML spec prefers double quotes around tag attribute values, and 2. I single-quote all string literals in PHP to reduce the possibility of accidentally including an unescaped value in output going to the browser. Of course #2 is totally moot if you use a real templating engine.
&gt; Plates requires knowing or learning PHP syntax, which is not necessarily something you can require of people. If you're doing a template engine so that less-technical people can design things, the fewer roadblocks, the better. You only need to learn the portions of the syntax needed to create your templates, just like with any other language. I mean, your designer isn't born with innate knowledge of Twig syntax or anything. So, what I was saying is that I find the PHP/Plates syntax easier to understand than Twig. Granted, some part of this may be my own bias creeping in, but I think a lot of things in Plates are objectively less confusing than their equivalents in Twig. Twig, of course, wins when it comes to syntax brevity, thanks mostly to auto-escaping, but that's not the whole picture (or even the biggest part of it, IMHO). &gt; Also, it's unclear if / how Plates sandboxes some of the more sketchy PHP functions. Sandboxing is only useful for untrusted templates (e.g. end user created templates). Templates created by your designer better be implicitly trusted or you're already in big trouble.
This is what I use when I need something quick and dirty: function phpTemplate($__file__, $__vars__) { extract($__vars__, EXTR_SKIP); ob_start(); include $__file__; return ob_get_clean(); }
Is there a benefit to using the output buffer? Could you just include the file?
&gt; So my question is, are there justified uses for this approach? Is sheer incompetence an excuse? Honestly, I've seen this done pretty regularly, and it's always by people who don't care what they're doing. There is absolutely no excuse for it, and if you work with people on a codebase that does this it should be a red flag. If it's a legacy app with a lot of problems, and people are prioritising those instead... that's fair enough. But if this is considered perfectly reasonable and people are still writing it... there are half a dozen ways this could be done better, not least a proper templating class.
http://www.reddit.com/r/PHPhelp If this was even a PHP question, which it isn't really. 
Except considerably more easily, as you already know a language and how web applications work. Learning PHP after python/ruby is essentially just a case of forgetting a bunch of stuff, and adding squiggly brackets everywhere.
Why does he do this $htmlString = ''; ob_start(); include('html_to_dpf.html'); $htmlString .= ob_get_clean(); Instead of $htmlString = file_get_contents('html_to_dpf.html'); ?
That's actually part of the problem. I'm not exactly sure what's causing it so I kinda just started somewhere hoping someone could point me in the right direction 
I definitely agree with `null &gt; false &gt; exceptions` for handling invalid input.
Tide sdk is what you are looking for. Link: http://www.tidesdk.org
Good point. I've also found that once you understand how to write clear and concise code, when to apply certain patterns, and how to design functions/structs/classes, the principles carry over into most languages and it's not too difficult to jump around.
haha &lt;head&gt; &lt;title&gt;PHP Info&lt;/title&gt; &lt;script type="text/php"&gt; date_default_timezone_set('America/Chicago'); ini_set('default_charset', 'utf8'); ini_set('display_errors', 'Off'); function getPhpInfo() { ob_start(); phpinfo(); return ob_get_clean(); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;script type="text/php"&gt; $document - &gt; write(' '.getPhpInfo() .' &lt;/script&gt; &lt;/body&gt; If you missed it: &lt;script type="text/php"&gt;
$2000? You are a cheap hire my friend. :p I would have been more in the 8-10k range. This accounts for idiot clients who have a one line spec requirement 
If you are just looking at having this capability for yourself or your colleagues, then I think it probably makes more sense to open it up in Google Docs or Excel and work with it there rather than load it into a PHP application that you build from scratch. But hey, it's a fun thing to do and if you want to spend the time doing it then I say go for it!
Sure sure. So what are your opinions on the following. Lets pretend this guy wasn't just someone trolling the PHP subreddit and was a real person seeking work. Would you not charge for the previous work you did building your user management system? How would you deal with inevitable scope creep or changes every 5 minutes because the client didn't predefine what they wanted? Also, lets be honest, would you even take a job like this at face value? $2000? That's like 4 days worth of salary. :)
And what happens if/when engine exceptions gets voted in? I understand the invalid input behaviour can't be modified for existing internal functions for BC reasons but why would *new* functions stick with it? *Especially* since exceptions make you write less boilerplate in this case: $a = to_int($a); if ($a !== null) { // do something $b = to_float($b); if ($b !== null) { // do another thing $c = $to_string($c); if ($c !== null) { // ... and so on } } } vs. this: try { $a = to_int($a); $b = to_float($b); $c = to_string($c); } catch (Exception $e) { } So I really think it should be `exception &gt; null` (and `false` shouldn't even be there).
Because -10 is a valid integer, whereas +10 is not. There is no plus sign in integers.
Read Documentation: &gt;include PHP files **referenced in script tags,** or make direct reference to the php file (such as form actions) This has to do with how their compiler puts the app together - imagine that, using a server side stateless scripting language in a compiled application might have some minor differences.
Contracts can prevent the scope from changing. I think $2k is fair and part of my system is factored into that pricing. Granted, I wouldn't include design or anything that can be knit-picked. They get the features with a rough design and well named classes/ids to structure, and can have their designer work out the details. ...and yeah, chances are it wouldn't have been a contract to actually take :-P
Yeah but what's funny is that this is exactly the opening tags that were removed from PHP 7 because there were deprecated and obsolete…
I consider reasons 1) and 2) for avoiding exceptions to be completely irrelevant. Reason 4) is relevant only to the extent that the use of these functions is likely to result in several failures in a short period of time. If you are validating input, receiving invalid input should not be an exceptional case, so exceptions are not suited for this task. I wonder if the `to_x` may be an unfortunate choice, however. While I agree that PHP's overly forgiving casting is a major pain. We don't really need functionality for the scenario that is, "I know this thing you think is a string is really an int, so unwrap the int for me" -- we have that in `(int)` already. We need functionality for, "I have no idea what this string is but I'm hoping it's an int", that will not fail in one of several weird cases like our existing options do. I liken this proposal to a very limited form of [C#'s `as` operator](http://msdn.microsoft.com/en-us/library/cscsdfbt.aspx).
Can anybody tell me what the deal is with json_encode() / json_decode() with this build and Ubuntu. I can't go past 5.3.x due to the whole issues with licensing.
For anyone who would like to try out these safe casting functions now, version 0.5 of my polyfill exactly matches the behavior in the current RFC. https://github.com/theodorejb/PolyCast
As the author of the blog post, I kind of feel obligated to explain myself ;) I totally agree that most of the languages I describe as "obscure" in my blog post have better design and since they are functional, doing functional programming in them is, kind of obviously, a lot easier. However, I am pretty confident that trying to emulate some of the functional programming techniques in languages like PHP can help people write better code. For a bit of background, I first tried Scala 10 years ago with Odersky himself as my teacher. At the time, I was completely baffled and didn't really understood a thing that he tried to learn us. It took me several years to grasp what functional programming was all about. Since I've tried Haskell, a bit of Ocaml and I am currently dabbling with Purescript and Idris. I think changing programming paradigm is a really hard thing to do and is probably best done step by step. Trying to apply some techniques in every day PHP code is, for me anyway, a good way to promote functional programming to people with no enough time to plunge right in. It is also probably a bit less scary than trying Haskell directly. In my personal case, I gladly experiments with any kind of languages and techniques in my personal time, however my day job forces me to do PHP. Given that I have not the option to do something else, I greatly prefer trying to use some more advanced techniques in my PHP code than just having to endure writing imperative code all day long. Believe me, if I could, my next work project would probably be in Haskell with Purescript as a frontend language, but sadly, one does not always do what he wants !
As the author of the post, my answer is pretty simple : because it allows to write, IHMO, a cleaner code. I am well aware that it may be best to use a functional language, but the choice isn't mine sadly. Given that I have to use PHP, better do the most of it and try to emulate some techniques from more advanced languages. What I propose is not perfect, but I am pretty sure it allows to write more reusable, maintainable and reusable code. It is also a good way to introduce coworkers to the functional mindset, thus easing a possible step further in this direction.
It's been in a separate package since 5.5, IIRC the package's name is php5-json. (Am on mobile, can't find if it's the right package name.) 
Sorry to say, but what you wrote is much like a bullshit. If you would actually read something about this framework you would know that the "statics" in it are not a real statics, but just a facades to instantiated classes. So there is definitely no such thing as "static all over the place". Besides by now Laravel is simply the best written PHP framework by far with great architecture and SOLID in mind. Like @lordofworms said you can write a crap anywhere.
No. I'd like it to be a group effort. 
you most likely can do this with PHPBB and it various addons ~ not saying its a good thing, but its possible. also you're wrong here :) 
Also some distros use the drop-in jsonc pecl extension instead of the bundled json ext for license reasons (the good old this software should not be used for evil).
$this-&gt;
Nope, we only had &lt;script language="php"&gt;
That's better `:=)`. 
Im guessing those arent really html files on those sites you linked. They probably use a router and accept both bla.com/page and bla.com/page.html The content they are displaying is probably from a database. Like so: https://r.je/views-are-not-templates Its much easier to manage many pages (ie for a blog) in a database than in a folder structure. But it might comfort some visitors that the url has a .html ending =) 
Yes please to putting PHP questions in /r/PHPhelp in future - thanks. 
Something like stack overflow with community moderators, or wikipedia could be cool here
More exactly: While `(int)'+10'` would work, if you casted it back to a string, there'd be no plus sign, so it wouldn't match.
One thing I've considered is adding versions that throw exceptions. The main problem is naming. That would be the ideal option, really. The RFC tries to help with two different use cases: 1. User input validation. For this, you probably don't want exceptions: if (is_int($_GET['id']) !== NULL) { die("ID must be an integer"); } 2. Safer casting that'll blow up if the input is bad, so we could add strict typing and it wouldn't mean people using the dangerous explicit casts. For this, returning exceptions would be ideal, although returning NULL and passing it to a non-nullable parameter also kinda works: User::get(to_int($_GET['id'])); // I'm too lazy to validate $_GET['id'] here, but I know an exception will be thrown if it can't convert, so this isn't dangerous. User::get((int)$_GET['id'])); // This never errors and always gives an int, so it's really dangerous. But, what should the exception versions be called? One possibility would be these: try_int(mixed $value): ?int // returns NULL on failure to_int(mixed $value): int // throws exception on failure **EDIT:** This has been done. v0.1.5 introduces`try_` functions which return NULL, and makes the `to_` functions throw exceptions.
Indeed. Sounds like this is being done by ".htaccess" or other server configurations.
Maybe, but that's a great deal more complex to build and manage. My suggestion is easy to build (no login to look after :-) and I like the trust element of it: volunteers publish to their own repo and their changes are published automatically. Getting moderators/editors involved might be tricky, and I wonder whether they would prefer to "fire and forget". Do you think contributors would rather add/edit via a website rather than a repo? How would a user acquire mod powers? What could a mod do that an ordinary user could not? 
&gt; I'm very careful about what is returned from my functions and I think if you are doing a lot of conversion all at once you are probably doing something wrong. So I a little extra boilerplate isn't a huge issue. Doing type conversions is something you'll probably do a lot in PHP, actually. PHP is mainly used for web applications, which receive a lot of string input (HTTP requests). You'll want to convert those strings to more appropriate types.
That is the right package name.
Now I think about it I suppose I take for granted the implicit type conversion sometimes.
What?
&gt; "I know this thing you think is a string is really an int, so unwrap the int for me" -- we have that in (int) already. The problem with `(int)` and the like is really that it can never fail. If you give it complete garbage, it'll still give you *something*, and that something will be an int. This means, unfortunately, that the only built in way to convert to an integer, `(int)`, is really unsafe.
I understand your point and I guess there is a case to be made for two versions of the same thing. But personally, going exceptions-only would be much better than adding *yet another* feature to PHP with slightly differentiated multiple implementations.
Get your bundles! Get your hot bundles! You good sir, would you like to try our delicious Drupal bundle? No? How about you young lady? Bundles, symfony bundles! Get them while they're hot! (Sorry, could not resist) Good idea though =)
Why? Going exception-only wouldn't be as useful.
I'll actually be releasing a new [online course](http://yourfirst.io/your-first-web-app/) soon that walks you through building an entire web app with PHP and Laravel. Might be right up your alley.
Well, *either* one is better (from a language design POV) than having *multiple* implementations.
It gets worse if you've seen things like $html = "&lt;SCRIPT&gt; function someJavascript() { "; $html.=" //loads of JS".$variable.; $html.=' } "; AAaaaaargh impossible to read dynamically built JS OR as I've seen back in the distant past $html = '&lt;some html with a checkout basket output&gt;'; include('processstuff.php'); and you find processstuff.php goes $html = str_replace('half the html', 'something else', $html);
They wouldn't be multiple implementations. It's the same implementation, with two different entry points to deal with different use-cases. They'd use the same casting rules. This would be similar to C#'s `.Parse` and `.TryParse`.
I personally prefer the second way, more flexible if you have another object which can be saved or can be an item. But the last "SaveableItem" interface is useless imo. You have to compare your item with both interfaces.
&gt; Further, why should the interfaces recommended be forced to use spaces and whatnot? They will run fine either way and you probably won't be looking at them too much. Just dump the requirement of PSR-2 and keep the PSR-1 requirement for interfaces. You are absolutely right! So I made commit #[b59eaa6](https://github.com/rkrx/php-contracts/commit/73d59e8d4cfc0a3801fed58a3a2dab9f97548fbd) &gt; Also, Illuminate/Contracts and things like it probably shouldn't be recommended in whole. Instead list out individual uses and recommend the exact interface that makes sense. One contract may be clearer/more specific than another for a given task. Currently there are nearly no useful interfaces/contracts around. So it is ok so put such a compilation into the draft-list to show others how certain interfaces could look like. 
To me the second one is useless, consider this method: function getNameAndSave($item) { $item-&gt;save(); return $item-&gt;name(); } This method relies on both the Item interface and Saveable interface. how would you typehint that using the second option ?
Ok, here goes: * Method requiring a combined interface doesn't mean it is doing too much. It may mean that it performs a single thing that requires those two interfaces. E.g. "driving" a car relies of being able to "steer" and "press gas". * the instanceof operator is aPHP construct and doesn't exist in the abstract field of OO design. you can't draw instanceof on a UML diagram * As for aggregating interfaces somehow violation the segregation principle, let me refer you to this paper: http://www.objectmentor.com/resources/articles/isp.pdf . One of the reasons interface segregation exists is to enable us to aggregate relevant interfaces into the one we actually need for a particular use case.
Makes sense, thanks!
I know, and I'm for the proposal. I just feel like the `to_`-prefix might suggest that the operation is more forceful than it really should be (and so warrants exceptions), where the behaviour -- such as I understand it -- is closer to, "try to turn this value into an int and let me know if you can't". At the same time, it's a careful balance between expressiveness and API-convenience, and I fully admit that `try_to_int()` is neither more expressive nor more convenient. [Edit] It turns out you're basically saying the same thing in [another comment](http://www.reddit.com/r/PHP/comments/2m85jr/rfc_safe_casting_functions_v014/cm284e9).
A few honest questions: &gt;Your login and registration classes are tightly coupled to $_POST How should it be ideally handled ? &gt; No namespaces Isn't this more of a preference thing, than an actual issue ?
Sure, I'm comparing the ideal world to what you may end up doing in practice. Though with your car example, both of those methods should be in your car/vehicle/drivable interface rather than having them split across two. There's no universal answer, especially when the question is very abstract; it's very situational. In this case, I'd probably just gave both methods in a single interface and be done with it, but if there was a good reason to have them independent, then I would indeed have a unifier to the effect of "interface Drivable implements Steerable, Acceleratable {}" and type hint to Drivable. Where it's important to watch out are methods that you want to call from a single function that really have nothing to do with each other. In the original question, saving and getting the name almost certainly are unrelated hence my suggestion that particular function is doing too much. 
I find it stupid not to accept +10 as an integer. It does not matter that casting back to string does not have a + sign. By that argument, if you cast the string "5.6000" into a float, and you get 5.6 and if then you cast it back to string you are missing the trailing zeros..right? So I don't see much point..
Well it's hard to come up with an example that would be small and concise. Usually my problem is that my interface inhertance tree pretty much 1:1 resembles my object inheritance tree and makes me kind of wonder if there's really a point of keeping it.
if save() and name() are provided by two different interfaces, you just gave this method two reasons to change, and that's a violation of the SRP. That's why type hinting to multiple interfaces is a preposterous idea. Your looking at composition from the wrong angle, imho.
if you need multiple contracts, interface aggregation is completely legit and, as long as it doesn't enforce more implementation than needed, there is no ISP violation whatsoever.
thanks for the link but what gap are they/you talking about? "the gap" between silex and symfony? if you go beyond simple and single file symfony is your answer, otherwise you could aim for silex. the gap isnt the learning curve, just size and features. so why this project? 
Not true. The method relies on the SaveableItem interfaces, and that interface is the single reason to change. The method doesn't care of the inner working of the SaveableItem like whether it is an aggregated interface or an interface of its own. the getNameAndSave doesn't care about underlying interfaces.
&gt; &gt; Do you think contributors would rather add/edit via a website rather than a repo? &gt; &gt; Yeah. Most Definitely. Especially since not all developers use Git. Righto, thanks. I'd assumed that all devs who would be minded to contribute would have a public repo account, even if they prefer Mercurial or whatever (happy to support whatever VCS there would be demand for). &gt; Allowing anyone to post anything without moderation is asking for trouble. Contributors would need to be added manually to start with, and can be removed if their published material breaks the guidelines. But, alright - I'll have a think. +1 
Yes, if you omit the rest of the sentence. &gt; to_int() accepts only ints, non-NaN integral floats within the range of an integer (PHP_INT_MIN to PHP_INT_MAX), and strings containing decimal integer sequences within the range of an integer. Leading and trailing whitespace is not permitted, nor are leading zeros or a positive sign. It's followed by a comma. I don't think it's that confusing. But then again, I wrote the RFC, so I might not spot errors with it. If you can think of a better phrasing, I'll use it.
For the extra bit of learning it's worth the jump to Symfony
Oh. Ok. You are right. Sorry. I mean, I had seen the comma and all, but I got that completely wrong...
In the docs page, "therefor" should be "therefore" Is Flint under active development? The doc footer mentions 2013. 
Must be nice having enough third party vendors using your framework you can build a marketplace around them *cough*
I just corrected that this isn't exactly the opening tag which will be removed with php7.
[Command–query separation](http://en.wikipedia.org/wiki/Command%E2%80%93query_separation)
You didn't catch the idea at all. What you are trying to argue is that the method shouldn't both save an item and return its name. That is not the point of my talk on interfaces. Here is another example for you: function drive(Drivable $drivable) { $drivable-&gt;accelarate(); $drivable-&gt;steer(); } Your command-query remark doesn't apply to this example at all. While Drivable might consist of Accelaratable and Steerable
What benefit is it to SEO?
If you didn't use the same tag style for python and ruby with the framework, I might see the humor.
The only problem with webkit I had was repeating column headers in tables. From what I understand, webkit renders the page on a single canvas unaware of pages. Handling column header smanually is tricky. Tcpdf supports it. Firefox supports it too (in stardard web print) but AFAIK webkit doesn't. So for generationg table reports and invoices I still use tcpdf, which is slow but works usually as expected.
Just because one used more childish analogies does not make the whole article less wrong.
You just made my point, so I don't get what you're trying to say. Why are you talking about multiple interface type hinting? Leaving aside the CQS argument, which is quite valid by the way, in the simplest case just aggregate the relevant interfaces and that's it. It can be totally valid if you have both clients who need very simple interfaces and clients who need more complex ones. To each his own. Of course everything must be done *cum grano salis*, because if you have a heavy use case for a complex subsystem, you may want to use a facade rather than an aggregated clusterf*ck of methods. Bottom line, there are many approaches to different level of granularity when designing by-contract. There is no better one, there are only trade-offs.
I don't this example equals the one you mention on the original post. In this case I'd go with `interface Drivable implements Acceleratable, Steerable`, if that's the true logic of your code.
Lots of good info! Went last year, going again this year.
http://martinfowler.com/bliki/CommandQuerySeparation.html
So, if I want to change the color of my spaceship, ie "the view", we're taking away some models and adding others. Even though we're only changing an external detail without altering the function of what and how the spaceship operates? If we wanted a hovercar instead of a spaceship, we're using most of same models but creating a different view. Despite the fact that the end product is entirely different, both in presentation and function? Yeah, this is a bad analogy.
If variables and control structures were used to create what goes into $strHtml, it would merely be a crude method of doing this. But concating straight HTML like this... it shows that the original developer did not quite get what he was doing. PHP IS a template language, that means that the original goal was to add bits of code to a HTML files. Not to add HTML to a PHP file. A lot of PHP developers are way of being the kind of people who just create HTML pages with bits of PHP code inside but they don't quite grasp how templating works so they end up writing PHP that puts out HTML as in the OP's example. The "solution" is to know what you are doing and use the right tool for the job. The example code practically begs for using templates. This does not just look messy but it makes it impossible to edit the HTML by anyone but the developer.
I'm not sure how I feel about having three separate ways of casting values in PHP, each with different behavior: `(int) $value, intval($value), to_int($value)`. I imagine newcomers to the language might find this very confusing.
`intval` and `(int)` are almost the same, I'm not sure why we have both. I don't think the distinction between `to_int` and `intval`/`(int)` would be that bad. They do different things: `to_int` can fail, `intval`/`(int)` can't. Other languages have something similar.
Revolutionary.
Ahh this is exactly what I needed. However, I was at this point in configuring yesterday and for some reason when I selected continue to download it, nothing happened. Then when I tried other methods to download this on ibm's site i was getting access denied which was weird. Now i notice there's a disclaimer that the downloads are having problems and I am currently unable to get it until the site is back up. Thanks
&gt; How should it be ideally handled? Essentially, your `Registration` class is doing two things: Getting data from an HTTP request and then using it to register a new user. This gives it multiple reasons to change, and the more reasons something has to change the harder it is to maintain. Instead of a single class, you should have a `RegistrationController` responsible for accepting an HTTP request and responding with a similar one, and a `RegistrationService` that actually creates the user. It would probably look something like this: class RegistrationService { public function registerNewUser($username, $email, $password, $passwordConfirmation) { //if validation fails, an exception is thrown containing an array of validation errors $this-&gt;validateNewUser($username, $email, $password, $passwordConfirmation); //if the insert fails, this method throws an exception $this-&gt;insertNewUser($username, $email, $password, $passwordConfirmation); } } class RegistrationController { public function __construct() { //dependencies declared explicitly in the constructor $this-&gt;registration = new RegistrationService; } public function registerUser() { $username = $_POST['username']; $email = $_POST['email']; $password = $_POST['password']; $passwordConfirm = $_POST['password_confirm']; try { $this-&gt;registration-&gt;registerNewUser($username, $email, $password, $passwordConfirm); } catch(RegistrationException $e) { //render view with error messages, return } //render view with success messages, return } } Now your registration service doesn't depend on specifically-named fields in the $_POST array, is much more flexible, more readable, and easier to extend or modify.
&gt; Isn't this more of a preference thing, than an actual issue ? I defer to [PHP The Right Way](http://www.phptherightway.com/#namespaces) on this: &gt; As described in the PHP reference manual, namespaces may be compared to operating system directories that namespace files; two files with the same name may co-exist in separate directories. Likewise, two PHP classes with the same name may co-exist in separate PHP namespaces. It’s as simple as that. &gt; &gt; It is important for you to namespace your code so that it may be used by other developers without fear of colliding with other libraries. It also allows your directory structure to mirror your application's logical structure, instead of dumping a ton of unrelated classes into a single directory.
Agreed - there's a lot of questions that aren't answered here yet. There's also a lot of things that will need to be worked out in the community as a whole to really make it work. Having the documentation available for use is one thing but having it consistently updated and the right information correctly disclosed is a completely different thing. The PHP community has traditionally not been very good with identifying and reporting security issues with their tools/libraries/etc. More often than not it's an external party that reports the issue and maybe even files the CVE about it. Even worse, most of the issues that are found are in projects that either don't use Composer-related practices or don't even know about it. Think about all of the PHP that's out there that's *does not* have a composer.json as a part of its code. I'd go so far as to say that the Composer-enabled code out there is maybe only 5-10% of all PHP written every day. It's easy to forget that when we're neck deep in the community here and in conferences/user groups/etc. Don't believe me? See how many of the reports on this list that use Composer: http://www.phpsecure.info/v2/.php
[**Huh?**](http://php.net/manual-lookup.php?pattern=%2F&amp;scope=quickref) Am I missing something?
 class HelloController extends PimpleAware Isn't this an antipattern? You should be using dependency injection instead.
Well actually I was just trying to start a conversation. I dont have any actual problems
Thanks, that makes sense. Specially since this its meant to be used by others.
Is there really that big a difference between basic PHP control structures and Twig's syntax?
Well there is no clear answer to any question like that because, as usual, **it depends**. If you only have clients that need both interfaces, hence your're going to implement both anyway, then there is no point in segregating them. If you have different clients that need only one of those interfaces, then having them segregated is what ISP suggests. If you have both clients that need only one of those interfaces, and clients that need both, then adding a new aggregated interface is a perfectly sane approach. All this given that you don't end up violating any other OOD principle, SRP, CQS, whatever. In such case, other design patterns aimed at more complex composition come into play. 
We can go smaller.
I **really** like the test coverage and the interface of your query builder. You mention targeting SQL-2003 standard, how much coverage do you currently implement? Have you reached 100% completion? Also, I'm curious why you choose to wrap every condition with parentheses. Eg, what's the benefit of `WHERE (foo = 'bar')` as opposed to just `WHERE foo = 'bar'`?
Conceptaully? Not really. Syntax-wise? Only a little. However, it's not the control structures that are the problem. Go look at the Plates docs. Almost everything is emitted through a call toa method on `$this`. That's fine, totally normal for what it's doing. Now explain what `$this` is to a graphic designer that can barely code HTML in notepad. How about what a method call is. Or why it's called `strtolower`. Or what the arguments to `htmlspecialchars` mean and why they're yelling in upper case. The conceptual barrier to entry for *non-technical* users is lower using a template language than PHP itself because it can abstract away a lot of the initial complexity.
&gt; Templates created by your designer better be implicitly trusted or you're already in big trouble. Not all designers are in-house. Imagine commercial software. Think Wordpress templates. Oh, wait, those are *already* PHP and can do arbitrary things. I don't want to live on this planet anymore...
ob_start() and ob_get_clean() are alternatives to file_get_contents(). I know file_get_contents() might seem like the obvious one to use here especially since ob_start() and ob_get_clean() mess with the buffer and this could be dangerous. The reason why I used ob_start() and ob_get_clean() is because on the original example I was trying to modify some of the content dynamically and ob_start() and ob_get_clean() were better for this, since I could add content to the HTML file from my php code. However I decided to simplify the example, after all it is intended to demonstrate is how to convert HTM to PDF. 
Yo dawg!
For every project though? Nah
Thanks! It has been a mad year for me on this front. What started out as a fun idea to make a contribution each day, on my own repo's or making a PR's to other projects. Turned into a lesson on how to focus on one small part of the project I was working on at the time. Over time that focus gradually improved and turned into a valuable and useful skill. So I would recommend doing this to everyone considering it, you might not get the same things out of it as I did but it's well worth the investment.
Nobody I work with would ever write the first snippet that way; we would do something more like: $a = to_int($a); $b = to_float($b); $c = to_string($c); if ($a === null || $b === null || $c === null) { // error somehow } Now we have a fair comparison: try { $a = to_int($a); $b = to_float($b); $c = to_string($c); } catch (Exception $e) { // error somehow } I'd still prefer the former. Even if your preference is the latter, your argument of boilerplate doesn't hold up.
Curious: what this would to if this got merged?
Well a rocket is acceleratable but not steerable =)
. = This location .. = Up a directory So you can make sure the form submits to current directory: &lt;form action="./index.php"&gt; Include script 1 located in folder root/script1/ into script 2 located in root/script2/: &lt;?php require_once "../script1/script1.php"; ?&gt; 
Exactly. Why the hell people still want to use Service Locators? wtf Stop using global state!
Ah very good point ;)
You can amend the include_path to add the directories you want. http://php.net/manual/en/function.set-include-path.php Just remember that you will want to only ADD to the include_path, not overwrite it, so do something like this.... &lt;?php $path = '/your/path/here'; set_include_path(get_include_path() . PATH_SEPARATOR . $path); ?&gt; If all the files are part of the same project, you might want to look into auto loaders. http://php.net/manual/en/language.oop5.autoload.php If you name your classes in a way that matches up with your directory structure then you can use a custom autoloader to magically include what you want.
well bundles are like libraries and adds some extra possibilities. Its not a problem to bundle bunch of classes and use it like a library.
Aint no-one here going to do your assignment for you.
Why not? Seriously, what are the down sides?
You would have *over 9000* OK assertions.
Could you be more specific?
Controllers are often container aware as they are generally thought to be an aspect of your app that is almost irreversibly coupled to your framework. In Symfony for example all generated controllers extend ContainerAware. That said, this is the only place where I would consider it acceptable.
Not a single day without thinking about programming? That's a guaranteed burn out here.
This is a little idealistic, in concept. Let's upload something. In a pragmatic sense, such a function both (does something) writes to the filesystem and (queries data) returns a link to that resource. Atomicity is unreasonably difficult to do if you try to make this separation.
Ha, false! E.g. on March 27 all he did was report an issue. So your title should be "1 year of contributions", not "1 year of code"
Apparently this is a thing on many sites.
Is the API over SSL? If it is, try this temporarily to see if it fixes the issue with a certificate: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); Then try these to display the output and hopefully an error message: curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_VERBOSE, true); And at the end after curl_exec to display any other errors: if (curl_errno($ch)) { echo 'Error: ' . curl_error($ch); }
You can use MySQL to edit .csv files. One of it's storage engines is CSV (http://dev.mysql.com/doc/refman/5.1/en/csv-storage-engine.html). I'm guessing that is more complicated than you are looking for, otherwise you would just use a database.
You guys pissed and moaned *SO* LOUDLY that I got banned from /r/php when I presented PHPU-MVC several years ago here, and it is LOADS better than this crap. (PLUS! 100% code coverage...). It was coded for PHP 5.2 which was king back in 2011 when this was made. And before composer, etc. even existed. https://github.com/phpexpertsinc/phpu-mvc
Enable display_errors in php.ini and set error_reporting to an appropriate value (eg. E_ALL). That'll tell you what's wrong.
Maybe if coding isn't your passion. I actually dream about coding and frequently wake up and note ideas I just dreamt about for projects I am working on or planning. 
While, /u/Sniperion is wrong, the way your comment is written is called "[Ad hominem](http://en.wikipedia.org/wiki/Ad_hominem)", please don't do this.
Passion doesn't prevent burnout...
When xdebug reports how many times a line is ran to PHPUnit, PHPUnit could average the 9000 runs of those few lines with the total code coverage reports. This would make it much easier to get to 100% coverage. You could even get *more* than 100% code coverage! Quality projects could then aim for about 500% code coverage. Yolo would then measurably be the highest quality PHP project (it already probably is the highest quality, but that's subjective). This single change could more than double the quality of virtually every PHP project overnight! I might submit a pull request to PHPUnit to make it do this. Should it be configurable, in case some people still want the old way of reporting?
I teach Web Development. Not only do I have to think about how to make my students think about code, I have to think what the hell were my students thinking when they thought their code made sense sometimes.
C's and C++'s atoi both accept "+1" JavaScript's parseInt accepts "+1" Perl accepts "+1" You're violating the principle of least surprise then again, idiotic code for PHP is no surprise either, so you've got that going for you
I was going to say you should at least credit the guy that wrote it, but I guess that was you :| Anyway, I thought "coverage" reported the % of code that was tested, not how many times it was tested.
That looks remarkably like [PuPHet](https://puphpet.com/). Not that that's bad.
A service locator can be used as a dependency injection container. Components do not need to be container aware. e.g. $app['service.foo'] = function () { return new \Foo; } $app['controller.index'] = function () use ($app) { return new \Controller($app['service.foo']); }
Well I never said that. The title says "code commits"
Well... From your composer.json: "description": "Framework for PHP 5.3+", And few lines below... "require": { "php": "&gt;=5.4", Decide xD In general, there are surely parts that are just wrong, but on the other hand making mistakes is a process of learning so I always encourage people to develop themselves (creating own framework is IMO nice way of training). Though sorry to say, I'd never use your framework :(
Blackfire looks cool. https://blackfire.io/
Read that wrong. You're right!
You never replied to his post...
v1.0.5 introduces `try_int` as well. I wish I was kidding.
I see the /r/lolphp brigade has arrived. This is a proposal, not the concrete language. Why must you come here to mock me instead of making helpful and constructive comments?
Actually, &lt;?php echo (+1); is perfectly valid. It would be consistent to accept the leading `+`.
So your framework code is not separate from your project wrapper code? That's very poor form. It means I cant include the framework as a dependency and when I want to update via composer the framework wont be included in that update... I would have to git pull. You need to have two repositories, one for the framework, one for the project wrapper. Also you need to move the index to a public folder which web servers will point to. You shouldn't be exposing your projects base to the world.... TBH after just seeing those couple of things I wouldn't even consider using your FW. Hopefully your learning and having a good time building it though! I would say you should study how frameworks like [laravel](http://laravel.com) and [disco](http://discophp.com) are structured. Incorporate the pros from those and learn from what you believe to be cons and see how it could be done better. 
Thanks James. Ok, i get what you are talking. Composer was a new thing that i learnt. Now I get the idea. Well, now that i know, i will improve it.
Can you give us some explanation, how and where you use dependency injection? 
 If you look at Logger, Model, Router, Template, it requires a class instance in the constructor.
This is not a mobile site and it doesn't make any sense to surf this site with a mobile device.
Value is a highly subjective thing. So while it may not be of value to you, I fail to see how that statement is anything other than you trying to belittle someone for no reason. 
Can you please explain where you inject those arguments? 
From Base class, from Loader Class and sometimes from application Controllers depending on the requirement. For ex. you can have a model with different database and hostname.
I've used server2go plus portable Firefox to run an app from CDROM. It worked pretty well http://www.server2go-web.de/features/features.html
Hey gentlemen, I'm the main author of https://github.com/panique/php-login and found this thread as lots of traffic comes from here. I just want to take part in the discussion, clarify some things and give an insight into current development. * I've not posted this link here and I'm not related to the original poster in any way * php-login is a project of FOUR different scripts, trying to offer out-of-the-box login solutions for all the people who are not familiar with real frameworks etc., so don't expect high-end stuff here * php-login was built in 2012, when every tutorial on the web was still using/promoting md5-hashing and horrible solutions for user authentication, at that time there was no proper solution, especially not for non-experts * php-login [the MVC version] is the main project, the rest are just very tiny quick-scripts, made to give beginners something better than self-built-md5-scripts * you are talking about and linking to php-login-minimal, which is just a small version, not the main project * please note that this is the work of several unpaid freetime-volunteers, nothing more. If you want a high-level login solution, then hire a team of professionals. * The version you are linking to is made for beginners, so things like test, mod_rewrite and Composer-fetched dependencies are totally not possible here. I've tried this, and the audience freaked out, you cannot believe the mails I got. Note that there's an extremely large audience of developers who are not familiar with these things, I would even say that 50% of people working with PHP are on a beginner-level (simply as PHP is not their main things in daily work). Question is: Should php-login-minimal be made "professional" (which kills the idea of being minimal) and then not be useable by beginners anymore ? 1. this is a MINIMAL script for beginners. Tighly coupled classes are absolutly no issue here, everything else would make the script hard to use. 2. Namespaces are to complex for beginners. We have tested this and removed them, as - like said before - it's a script for beginners. 3. A script for beginners does not need tests, go to the full version for this (3.0 version, no public branch yet). 4. That's a common standard and the most simple way to do a migration - for beginners. We've tested this. 5. The default values are for sure not "sensitive information", as they are just demo data. What do you think would be an alternative ? 6. For beginners and a minimal script it's too complex to force the user to setup Composer and get the dependency. This is an unnessary amount of work to get just one never-changing file. The full version does this correctly for sure. 7. For beginners and a minimal script it's too complex to force the user to setup mod_rewrite and edit Apache configs, we have tested this in masses. I'm always astonished by the weird feedback and the totally different expectations, esoecially of people who have not even read the readme or any idea what the project does. When we introduced PDO, everybody complained about why we not use mysqli, because this was so much easier, then we rolled back and everybody complained about mysqli. When mod_rewrite came into the games, the hate-comments spawned, when Composer became default (in php-login full version) everybody was complaining about "the missing files" and the "shitty Composer". I find it also weird that people lower a small opensource thing because X and Y are "missing". This is simply a little project and there was no time to write tests, and nobody has committed them yet. This gets especially strange when people are using this for their businesses and then complain about violated MVC, missing nginx-configs, or why there are no namespaces. To sum this up: Thanks for the feedback, I'll use this for the upcoming 3.0 of php-login, but the version you are talking about will not change, as it's okay like it is (because it's just a simple-as-possible version for extremely easy setup). The full version will get a new relase in early 2015 and will fulfil every of the 7 points you mentioned.
Hey, main author of php-login here. The version you are talking about is php-login-minimal, an extremely reduced version, so please note that. php-login-minimal will not change, as it's totally okay for beginners. But, the main version has a similar problem and this will be solved like this (next release early 2015, called 3.0): No $_POST in the controllers anymore as we will use a restful router, pushing the request's POST/GET/etc data to the controller so the developer just has pure $variables in the controller. That's afaik the most professional way to handle this in the moment (but please correct me if I'm wrong). Controllers etc. will never handle $_POST etc directly. A simple qick &amp; dirty example: // POST request on /user/register $app-&gt;post('/user/register', function () { // get POST variable. in real app probably inside the controller $paramValue = $app-&gt;request-&gt;post('paramName'); });
Any reason we should be interested in a four year old April Fool's joke?
Yes, PHP has unary `+`, but that's an operator, not a sign on the literal. [Though technically we don't have negative signs either, that's also an operator.](https://github.com/php/php-langspec/blob/master/spec/09-lexical-structure.md#integer-literals)
Not looked at your code, but +1 for persistently taking people's advice. Well done. 
...what?
Go back to /r/lolphp.
Thanks for noticing that. I really want this project to be something I can be proud of. May be someday ! 
Likewise with symfony. Use composer to create the symfony standard project and you're up and running in under 5 minutes.
I wouldn't study disco, there's not a unit test in site and it seems to be 100% static calls. I wouldn't study laravel either tbh. Read Fabien's blog on creating silex, it's a step by step guide to building an MVC framework.
&gt; Changed the template engine. I was asked to use Twig or PlatesPHP but i found them to be really heavy. I wrote this template engine last night. It doesn't allow template inheritance though. But it has some nice features. I know I'm maybe be sensitive as the developer of Plates, but there is no way you can call it "really heavy". Feel free to look through [the source](https://github.com/thephpleague/plates) yourself. Further, the whole idea behind creating Plates was so that not everyone would have to roll their own view library. Composer has made using existing, quality packages REALLY easy. Let's do this!
 &lt;?php echo (+(1)); echo (-(1)); You're right: both are operators! This doesn't counter my consistency argument though.
Oh give it a rest.
This guy is a machine. He taught me a lot of stuff when I was a 12 year old little shit messing around with phpBB, mostly over MSN Messenger because that was still a thing then. I've seen him pop up all over the PHP community and he's always rocking it. Keep it up dude!
&gt; curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); This fixed it for me! Though I still dont understand why it works on my mac environment without...
&gt; It's never going to take over the world. That is not even close to being the goal of anyone on that team. &gt; Everyone else with a clue moved over to another framework already. Nope, there are still huge numbers of large applications built on CodeIgniter, and they will not be ported overnight because something new and shiny came out. &gt; Don't believe me? I do not. &gt; Go check out the new CI forums and look at the (lack of) quality there. The ones that have been live for about two weeks? I'm not surprised. &gt; Bunch of noobs if ever I saw it. Possible, but isn't it nice that beginners have a nice little framework to work with? I always considered CodeIgniter to be "My Early Learning Framework," even when I was on the core team.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SOLID (object-oriented design),**](https://en.wikipedia.org/wiki/SOLID%20(object-oriented%20design\),): [](#sfw) --- &gt; &gt;See https://en.wikipedia.org/w/api.php for API usage &gt; --- ^Interesting: [^SOLID ^\(object-oriented ^design)](https://en.wikipedia.org/wiki/SOLID_\(object-oriented_design\)) ^| [^Object-oriented ^design](https://en.wikipedia.org/wiki/Object-oriented_design) ^| [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^| [^No ^Silver ^Bullet](https://en.wikipedia.org/wiki/No_Silver_Bullet) ^| [^Interface ^segregation ^principle](https://en.wikipedia.org/wiki/Interface_segregation_principle) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cm3nwfj) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cm3nwfj)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I found this after looking for CoffeeScript-like compile-to-PHP languages. Specifically, it was linked in a comment (under the (presumably) old name IcedTea) in [this StackOverflow thread](http://stackoverflow.com/questions/6551089/is-there-anything-like-coffeescript-for-php/6801794). There's also [Snowscript](https://github.com/runekaagaard/snowscript) and [Mammouth](http://mammouth.wamalaka.com/) which are pretty interesting too. Of course, it's not to everyone's taste. But it is to mine, and I expect it will be to quite a few others. Typing all those dollar signs does feel a bit pointless after a while. And the best thing, of course, is that **you don't have to use languages like these if you don't want to!**
Why o why
Because, you know, what if you want nicer syntax and general nice things but don't want to lose the widespread support and library ecosystem of PHP?
Nice syntax is a very subjective thing 
I was just making a witty remark. Idk why people cared so much about it
Usually Vim, sometimes Sublime Text
I'm looking at the console now, I'm getting this: Failed to load resource: the server responded with a status of 500 (Internal Server Error)
Well that's a step in the right direction. The page may have a syntax error, unmet dependency, or call to something that it can't read. Is this running on apache? Have you looked at the error logs?
I'll just paste my comment from the last time something like this was brought up. I never really understood this thinking. Coffeescript is a good example. It's cleaner and more readable - as long as your definition of "cleaner and more readable" is "looks like Ruby". There's this whole movement to make things "better" by removing semicolons, removing braces, making whitespace more meaningful, etc. And somehow this as seen as desireable when actually it's just... rubesque. People demonstrating this sort of thing tend to create artificial examples of the edge cases that genuinely make more concise code, but for the vast majority of the time they achieve little. What they do achieve is to mean that now instead of needing a skilled PHP programmer, or a Javascript programmer, you need a Gutscript/Coffeescript programmer. Congratulations, you've achieved nothing, added a needless step to your workflow, while also limiting your talent pool! If the goal is to obscure a well-understood and readable language in order to replace logical words with meaningless characters, then well done.
&gt; you don't have to use languages like this if you don't want to That's just not true. You're a contractor brought in to do some updates on a system whose original developer thought this sort of thing was "nicer", and now you have no choice. Or you take a job refactoring a project originally written in it, or just maintaining it. When you make choices like this they don't just affect you. They affect everyone who ever works on that project ever again. They force a knowledge requirement. They provide an objective downside for a highly subjective "benefit". In my opinion they are utterly, utterly worthless. 
&gt; There's this whole movement to make things "better" by removing semicolons, removing braces, making whitespace more meaningful, etc. Is it really a movement? Some people prefer languages of that style, because it's less typing and, for them, it is easier to read. Is that such a bad thing? &gt; What they do achieve is to mean that now instead of needing a skilled PHP programmer, or a Javascript programmer, you need a Gutscript/Coffeescript programmer. All these languages are mostly just syntactic sugar for the language they compile to, so there's no real skills needed to be learned. Though, sure, there is some overhead. &gt; Congratulations, you've achieved nothing You've saved yourself time typing and made your code more readable. At least, for people who feel that way. &gt; If the goal is to obscure a well-understood and readable language in order to replace logical words with meaningless characters, then well done. Some might say the same for moving in the opposite direction.
&gt; That's just not true. You're a contractor brought in to do some updates on a system whose original developer thought this sort of thing was "nicer", and now you have no choice. It generates idiomatic PHP, so you can just run the compiler once, and now you have a PHP codebase - problem solved? But why switch to PHP, anyway? It's really just a "nicer" syntax for PHP. It's not difficult to work with. Anyone who uses PHP can very easily and quickly pick it up. &gt; When you make choices like this they don't just affect you. They affect everyone who ever works on that project ever again. They force a knowledge requirement. They provide an objective downside for a highly subjective "benefit". In my opinion they are utterly, utterly worthless. Yes, it's ultimately a tradeoff, but I wouldn't say it's useless. If you think it helps you in writing and reading your code, and the tradeoff is worth it, why not? Especially for personal projects. And again, it's very easy for an existing PHP user to learn.
Sure PHP doesn't have the nicest syntax, but call me old fashioned, I like my curly braces and semicolons (I find it easier to read). This doesn't really add anything to the language, it just makes it less standardized and therefore more difficult for PHP programmers to collaborate.
If I wanted to use this type of syntax I would switch to Python or Ruby.
This ranking method doesn't seem to account for similar search terms, which would lead to different results: https://i.imgur.com/OpTkeat.png
Sure, if you want all sorts of things you could switch language. But that means you can't use your existing code, can't make use PHP's widespread support, can't use PHP libraries, etc. I'm really not a fan of this kind of "just use another language" suggestion. It's not as if it's that simple.
Just playing devil's advocate here, but what languages do you think have "nice" syntax?
Loose comparison bites again!
One could, I suppose.... I don't write C because I don't know it, and because I'm a web developer, so it would be irrelevant? 
Time to add some debugging. print_r($measure) after line 32 to make sure you have the correct number of elements.
I don't toss it aside for being "rubesque". I dismiss the statement of it being "beautiful" or cleaner or whatever, as being an utterly subjective one, often using Ruby as its aesthetic benchmark. And no. There are lots of things about Ruby that are good. I would wholly support the adoption of features of Ruby that make sense. What I'm rejecting is using another language's syntax as some sort of design goal. And I'm saying outright that it **does not** add quantifiable improvements, and has quantifiable detractions. IMO.
&gt; Is it really a movement? Some people prefer languages of that style, because it's less typing and, for them, it is easier to read. Is that such a bad thing? Yes. If they choose it for themselves, fine. If they choose it for me, we have a problem. &gt; All these languages are mostly just syntactic sugar for the language they compile to, so there's no real skills needed to be learned. There is a mental overhead though. When you try and parse the code, knowing something like Javascript, it doesn't flow. You have to actually try and understand what it's doing. You have to learn it. Presumably you KNOW Coffeescript, so you haven't encountered this. But when you don't know it, and you suddenly get handed a large object written in CS... it's not readable. You have to look up a lot of things, understand what they do. I've had this happen and it was a pain in the ass. I'd argue that they're **not** syntactic sugar. They're syntactic salt. &gt; You've saved yourself time typing and made your code more readable. At least, for people who feel that way. No, you've made it **less** readable for those who don't. People who could read Coffeescript (or Blueberry) can already read JS/PHP. People who can read CS/Blueberry are a **subset** of people who can't. Instead of writing code that can be read by 100% of programmers in that language, you've written code that provides a dubious benefit to 5 or 10% of programmers, while hindering the rest. This is, in my opinion, complete foolishness.
Name one thing that php does that cannot be done in another popular web language
As per /u/danodemano's comment - enable error logging and/or display at the top of your PHP script for debugging. I'm a webdev with 15 years' experience - happy to take a quick look in my lunch break tomorrow, if you're able to provide some sort of access to the files &amp; db. PM me :)
At one point, C (and others) ran the web and PHP was the "nicer" language that nobody knew and "limited the talent pool". So, I was pointing out the parallels and irony in the fact that here we are decades later, and PHP now runs the web, and people are still using the same arguments about newer languages that nobody knows. I'm sure someone used the same arguments against LESS/SASS, and here we are now only a few years later, and it's virtually unthinkable not to be using a CSS preprocessor of some kind.
Earn me a living.
Where would a horrendous turd like this fit in? http://www.ehow.com/how_4693316_create-own-php-website.html I refer to this because: * It's one of the first Google hits for "learn php website" * I had a client tell me he's learning PHP for himself based on that website It doesn't meet any particular issue that you could look at it and say, "ok, that's a plaintext password", but by God, anyone learning from that is in for a bad time.
&gt; Hack doesn't make the syntax of PHP much nicer Subjectively speaking, I don't think this does either.
Thank you very much for your help as well! I've enabled the error log like he said and now I'm getting Notice: Undefined index errors on multiple lines. Not sure what to do.
And in "a few years", we'll talk. 
Those are warnings, rather than errors, and are likely a sign of lazy programming rather than anything which would actually stop the script from running. Happy to assist, but it's going to take a long time to work out what's wrong without some sort of access to the actual script and database. 
Just to confirm - are we talking about having this include file run successfully inside of a Wordpress site? I gather that is a future goal, and that for now you're having trouble running it outside of Wordpress? I'd check file permissions first. If this is a cPanel server (?) the PHP file will need to have permissions 0755, or rwxr-xr-x. Any FTP client will allow you to check and change a file's permissions. Assuming the file's permissions are correct, insert a line at the start of the PHP file: print "SUCCESS!"; exit; Load the PHP file directly (to start with), and confirm you see the text SUCCESS! Assuming you do, move this line to around half-way through the script, and see if it still appears on a page reload. Continue moving this line forward/backward in the file until you work out exactly where the script is failing, and paste a relevant snippet from the PHP file for us to take a look at. 
Code by nature should not be beautiful. No matter how far you abstract the messy stuff, all that matters are the established patterns that help you read and write it. Good parts: I like the JSON syntax because it would reduce the friction between PHP and JavaScript. Bad Parts Removed parenthesis from if block. Stop removing very critical components which are extremely useful. My IDE detects parenthesis and I can collapse entire IF/THEN/ELSE blocks or any bracket section. I can click on the character type to see where it ends and starts. If I were using Regex it would be a character landmark. Useless abstraction, with no benefits. Sure it looks "pretty" and it's more readable if you've never read PHP before. However for writing code, it's impractical.
XML doc pastebin too please...
Link is not working :(
you can actually prepare that statement before any of the loops. preparing it each loop is highly inefficient and defeats one of the main reasons for using prepared statements. I'd need to see some sample XML that you're parsing before I could give you an exact solution. http://pastebin.com/P33D13ms
Pointing that you are violating the principle of least surprise is definitely constructive. The rest of the comment, perhaps not.
This doesn't add anything PHP doesn't already have (like TypeScript or CoffeeScript do for JavaScript). This is just putting lipstick on PHP&amp;mdash;and not a particularly good color of lipstick at that.
I will make it in a second, just need to write it over to english :) I have also another question for you guys :)
I will make it in a second, just need to write it over to english :) I have also another question for you guys :)
Why? Symfony, Doctrine etc. use comment-based annotations.
Here is the Xml document: http://pastebin.com/emR5AQZ1 The other question I have, is how can I access the ChecklistItem's data, so I can insert that to the database. I know I need to go the path: measure-&gt;Checklist-&gt;ChecklistItem-&gt;getAttribute("id"); I have tried foreach loops and everything and I can't get the ChecklistItem's data out of the xml document.
This is annoying! On firefox, "/" is a shortcut for Ctrl+F. Sites should not break common shortcuts. It should be remapped to something safer.
It's possible to use annotations in symfony and doctrine, but not mandatory.
That's good to have competitors for jms serializer because this thing is insanely huge and hence slow.
S/he *flagrantly* plagiarized and hostily forked it from a non-public domain, non-permissively-licensed StackOverflow thread. No one has permission to use it, and it's very existence is pretty legally dubious. And the original author should NOT grant him rights *now*. That'd just set a bad precedent. http://stackoverflow.com/questions/6551089/is-there-anything-like-coffeescript-for-php/6801794
Of all the PHP frameworks I've used, I've found YOLO to be the swaggiest by far.
Uh... IcedTea is the old name of Blueberry, the author renamed it. I don't see what plagiarism you're talking about. The project was renamed and I linked to it.
Using PHP to write a database engine is like using a hammer on a screw. You might actually be able to get it to do what you want in the end, but it ain't going to be elegant and you probably have made a huge mess along the way.
I congratulate you for building something unexpected and that the PHP community still doesn't have - at least to my knowledge.
Your track record?
Interesting idea. However it's probably to early to show - there'd need to be a bigger variety of things in the GH homepage to garner interest. One of the things CoffeeScript does, I believe, is to reduce the amount of boilerplate code required for certain things in JavaScript. PHP may have this problem, and it's there efforts need to be focussed. What long-winded thing can be turned into a single keyword? 
How could you use a 1800x1300px image (~800kb) in your header that is only 400px high (novice-class-mistake) and built a database, whos codebase look at least somewhat advanced?
Yeah, well, you know, that's just, like, your opinion, man.
Yes shame on me :-/
because backend developers aren't frontend developers?
Totally agree. Parsing comments and then acting upon what they say is just really weird and unnerving to me. Really wish PHP would get real annotations. 
Looking at the code, I might as well use /dev/null for storage
Because you're embedding application logic in a place that requires a entirely separate parser to interpret, and where PHP and your IDE can't.
Both PHP and IDEs can parse annotations.
narg, pfote and _druu who make up some of this council are lowsy at codeigniter. They couldnt develop their ways out of a CMS system. You heard it here first :)
Do you feel the same way about parsing XML or YML and acting on that instead?
"Possible, but isn't it nice that beginners have a nice little framework to work with? I always considered CodeIgniter to be "My Early Learning Framework," even when I was on the core team." So you are saying that CI is a stepping stone framework? When you are new to PHP use CI, but when you graduate move to a better framework? Ha, thanks for validating what I said :)
Is all about productivity. If you code faster and deliver a solid application using these tools, than go for it.
If everyone agreed with you, there would cease to be any new languages for you to talk about in a few years, since we'd shun them all for "limiting the talent pool."
agreed. plus, if it gets it via reflectionclass, if the server is using a bytecode cache like e-accelerator it won't work (it strips all comments).
That's how I feel about it. Certainly for personal projects, it'd help me. Since it compiles to plain, readable, idiomatic PHP, there's no real loss in the end. If I get fed up with it, I can run two or three simple commands and my codebase is back to plain PHP.
Because Developers ≠ Designers
See also [Aura.Marshal](https://github.com/auraphp/Aura.Marshal).
&gt; Yes. If they choose it for themselves, fine. If they choose it for me, we have a problem. So, you're saying languages should offer a choice of syntaxes? Or are you just upset that some language designers *shock, horror* have different preferences to you? Are you only not upset that PHP uses the syntax it does, because you like its syntax? Are you upset that the designers of Ruby, Haskell, Python, Lua and so on have made different syntax decisions than the ones you'd like. &gt; I'd argue that they're not syntactic sugar. They're syntactic salt. This is a nearly meaningless phrase. &gt; No, you've made it less readable for those who don't. Yes, using a different language means people who don't know that language may have difficulty reading it, that's a given. But for yourself, it may be much easier to read. And these types of languages which are merely syntactic sugar are very easy to learn. &gt; People who can read CS/Blueberry are a subset of people who can't. What? Do you mean the general population? A group of people who can't read something does not contain any people who can read something. &gt; Instead of writing code that can be read by 100% of programmers in that language, you've written code that provides a dubious benefit to 5 or 10% of programmers, while hindering the rest. Yes, this argument applies to any choice of language.
Was that directed at me? Because my comment is supportive of TypeScript and CoffeeScript.
&gt; 1. The engine rewrite allows for new constructs and syntaxes that the official PHP engine does not. &gt; 2. It took the development of Hack to finally create a language specification for PHP. I think you mean HHVM. The language specification has no relation to Hack. &gt; What does CoffeeScript provide over JavaScript? &gt; 1. The syntax is familiar to Ruby developers. &gt; 2. The sequence generator syntax is neat. Well, CoffeeScript also provides saner variable scoping, **classes**, sequences, strict comparison, variable interpolation, splats, variadics, comprehensions, boilerplate-free object iteration, array ranges, destructuring assignment, function binding, chained comparison... to say that it's useless unlike TypeScript is silly, it provides many useful features (classes especially). To use your own words back at you, "You have drawn a false analogy." Now, Blueberry on the other hand doesn't provide that much over PHP for the time being. But that may change yet.
&gt; Code by nature should not be beautiful. Which is why everyone programs in Malbolge. Wait, actually, nobody does. I wonder why that is? It would seem that nice syntax is actually a quite important factor in whether people use a language. &gt; Bad Parts: Removed parenthesis from if block. Stop removing very critical components which are extremely useful. My IDE detects parenthesis and I can collapse entire IF/THEN/ELSE blocks or any bracket section. I can click on the character type to see where it ends and starts. If I were using Regex it would be a character landmark. Er, well, it's a different language, of course your IDE doesn't support it. There's no reason your IDE couldn't add support for this language. Your argument would then become moot.
I think they were saying CoffeeScript and TypeScript are useful, while this isn't.
Whaaat? It shouldn't. Or it if it does, it should be a special option. Reflection is legit. Just like name-manglers; you can only screw with stuff that isn't publicly accessible - and doc comments are.
Why's that? If it's for performance, they can be cached after they're parsed.
I do get Success at the beginning and in the middle of the page, but I'm still getting Notice: Undefined Index errors. What do those errors mean? The php file has 777 permissions. I've read a few places to use an isset function, don't know what that does but the original php file doesn't need any of those since it works. I'm just trying to get the php to run at this point, not sure what to do about including it. I could also PM this stuff as well, not sure if I should put it here
&gt; unexpected and that the PHP community still doesn't have I wonder why.
I never said it makes sense :p
You should be able to just use childNodes like this: https://stackoverflow.com/questions/191923/how-do-i-iterate-through-dom-elements-in-php 
Comments exist for a very specific purpose - documentation. Anything beyond that is dangerous.
Because it is a horrible and dangerous practice.
I used PHP Maker http://www.hkvstore.com/phpmaker/ in some job. It's basically a CRUD generator for your database and it's really easy to use and to configure (even for non programmers). But it's a little bit hard to extend .
And buggy and verbose in config in my experience.
Yeah and penises exist for a very specific purpose: reproduction. Anything beyond that is *dangerous*. /s Edit: another example: PHP exist for a very specific purpose: create personal home pages. Anything beyond that is dangerous (said anyone in year 2000). What I mean to say is that there is nothing dangerous here. Annotations work well. And saying something is not meant to be used like that "just because it wasn't meant for this" is not a very good point.
I have never been attacked by velociraptors if that's what your afraid of.
I like Symfony2 and I like Germany is there a place for me? :)
Parsedown refuses to implement custom start numbers for ordered lists for some reason, saying it "wouldn't be a popular feature", while Colin's already implements it from the start.
Rule of thumb: if you take a paying job you need to know what the fuck you're doing
Why is it horrible and dangerous?
Because it breaks the established purpose of comments and documentation entirely. It teaches a bad practice because of a cool hacky trick that someone decided to implement in a desire to reinvent the wheel. Comments are not and should never be code - implementing these increases the difficulty for new/beginners, and can be just as easily implemented in a way that doesn't break a cardinal rule of programming.
Odd - we run a system that handles many tens of thousands of requests per minute, spread across three servers - each one uses up to 3 connections to redis (although we use persistent connections for that), and a few more to some restful systems using curl and haven't run into the same problem - as others have said, make sure you have sane file open limits, and have you profiled the script being called by the curl request?
What do you use your penis for outside of reproduction?
In regards to your edit: Comments exist in every programming language ever. They exist for a singular purpose - to provide documentation to human eyes, and are to be ignored by the machine. When you start mixing in other shit just because you can - you break a very important paradigm for the sake of doing it in a "cool way" - it's a hack, it makes it harder for new coders to learn, and increase the difficulty of IDE developers and language maintainers for no benefit whatsoever - all because you worked out a "nifty" way to do something that you could already do without breaking on the longest established paradigms in programming. Your edit's example in childish and completely off base. It's on par with someone comparing the Nagasaki Bombing to a playground fight between 3 year olds.
Looks interesting. Good job. 
Didn't remember what Trello was, but this made it look even more useful. Also heads up on using a standardized Changelog format. Albeit, can't let opportunity slide: pointing out the irony of not actually having one in your repo .þ
WHY is it dangerous? is my application going to explode?
The only other options are really having a method on a class that returns an array of metadata or to put it in a separate config file. Both of these have the downsides of not being able to see them in context of the item that owns the metadata (the property or method). What's worse, you now have to duplicate the method name and the type. And what happens if you rename one and not the other? Or change the type on what but not the other? Using the comment docblock is actually safer and less error prone in this case. And it's "free" because you should be using `@var` annotations anyway.
&gt; Also heads up on using a standardized Changelog format. Sure. And if you wanna use your own just write your own `Bigwhoop\Trellog\Printer` implementation. &gt; Albeit, can't let opportunity slide: pointing out the irony of not actually having one in your repo .þ Hehe, yeah. Using Trello for this project would be overkill. Could write one by hand ...
First of all, let me give you some friendly advice. If you start something with "So what you're saying is" or anything like that it's almost certainly going to be followed by something dumb. For example. &gt; So, you're saying languages should offer a choice of syntaxes? No. I said absolutely nothing of the kind. Nor do I see how you got to there from the text you quoted. Secondly, you need to not do this. &gt; Or are you just upset that some language designers shock, horror have different preferences to you? &gt; Are you only not upset that PHP uses the syntax it does &gt; Are you upset that the designers of Ruby I'm not upset. I've provided clear and reasoned arguments for why I think projects like this have significant downsides for no benefit. Your attempt to paint this as some sort of emotional reaction (you might as well have gone with "butthurt") does no one any favours. Continuing on, you're conflating two issues. Syntax and language. They're unrelated. Using or choosing a different language because of **features it offers** is a totally fair and reasonable thing. Regardless of what its syntax is. If you choose Ruby because it works for your project, that's *just peachy* and good luck. If you choose Python because you *just like it* then by all means, have at it. Python has lots of nice features PHP is currently lacking. You think I'm arguing about syntax, or about using other languages? You're woefully (and I suspect deliberately) misconstruing my argument. My argument is entirely based on pros and cons. Using other languages, regardless of their syntax, can have benefits. If the pros for the project and yourself outweigh the cons, by all means you should use that language. The entire point I'm trying to make with this Blueberry nonsense is that I think the "pros" are non-existent or at best subjective, and the cons are genuinely present and should be considered. &gt; This is a nearly meaningless phrase. Yeah, I misused it. I should have said "syntactic saccharine", "gratuitous syntax that does not make programming any easier." &gt; Yes, using a different language means people who don't know that language **IT ISN'T ANOTHER LANGUAGE!** It's just PHP! &gt; What? Do you mean the general population? The way I wrote that was slightly misleading. What I meant to say was that people who can read CS/Blueberry are a subset of people who can read JS/PHP. So as I said, instead of being readable by 100% of programmers in the language it can be only read by 5 or 10% of them. &gt; Yes, this argument applies to any choice of language. Yes. That can be a legitimate factor. Depending where you are, for example, you may find you're not able to hire ColdFusion developers, and changing your core languages to something more common is necessary. But again... let me re-iterate: **You are not choosing a different language.** 
&gt; or to put it in a separate config file. Better than breaking the purpose of comments.
It teaches bad practice.
The other option is to use Java or C# instead of using a hack *just* to have annotations. Annotations are awesome, but having to use them in comments is unacceptable. I understand that it's the only way for now but there should be a huge community push to have proper annotations supported in PHP.
&gt; No. I said absolutely nothing of the kind. Nor do I see how you got to there from the text you quoted. You complained about people making syntax decisions for you. &gt; I'm not upset. I've provided clear and reasoned arguments for why I think projects like this have significant downsides for no benefit. Your attempt to paint this as some sort of emotional reaction (you might as well have gone with "butthurt") does no one any favours. I never said anything about emotional reaction. &gt; You think I'm arguing about syntax, or about using other languages? You're woefully (and I suspect deliberately) misconstruing my argument. My argument is entirely based on pros and cons. Using other languages, regardless of their syntax, can have benefits. If the pros for the project and yourself outweigh the cons, by all means you should use that language. The entire point I'm trying to make with this Blueberry nonsense is that I think the "pros" are non-existent or at best subjective, and the cons are genuinely present and should be considered. That's a fair viewpoint to take. &gt; IT ISN'T ANOTHER LANGUAGE! It's just PHP! How so? It *isn't* PHP, fundamentally. It's very similar, and it compiles to PHP, but it is still a different language to PHP. CoffeeScript is a different language to JavaScript. 
&gt; WHY is it dangerous? is my application going to explode? Yes. *They've* kept it out of the news, but it's a new thing *they* don't want bad guys^1 to know about. &amp;nbsp; ^^^1 ^^perl ^^programmers
but its not monday where i live.
Helicopter?
How Can Monday Be Real If Our Eyes Aren't Real?
It isn't "breaking" the purpose of comments. It's avoiding repetition by using existing data (the type declared in `@var`). I don't think you're being very pragmatic about this; quite the opposite actually. If you were to do a pros/cons list for comment-based metadata vs file-based metadata, comments have a several benefits that can't be replicated by any other means. Your argument all throughout this thread can essentially be boiled down to "but that's not right!". The fact of the matter is annotations have been around for awhile now and have seen widespread adoption. It is no longer considered surprising behavior that comments are sometimes used for metadata. I know it offends your sensibilities and it is a bit hacky, but as long as it's used for metadata, I don't see the issue given the unique "pros" it has.
No disagreement there. I still think annotations are a net gain even in their current state, though.
No one is half-assing anything. Getting real annotations in PHP isnt a simple task, if it was, it'd already be done.
Teaching people to use annotations (WHICH ARE GENERALLY ACCEPTED BY SEVERAL LARGE PROGRAMMING LANGUAGES, AND ARE FREQUENTLY USED) is teaching a bad practice? Please tell me more. And again, we all know that it shouldnt be in comments, but its the best we have. KNOWING that, it doesn't teach bad practices.
Interesting project - but not something I would really take to. But I have never really had a beef with PHP syntax anyway, and it's recent feature set has only been on the up and up (namespaces, short array syntax, generators). And this is probably my biggest concern - I would find it hard to invest a tonne of time learning a cross-compiler if said tool wasn't going to keep pace with a relatively fast moving target of PHP itself. It also can make it harder to write performant code, unless you know (well) how the generated output is made - but being PHP this may not be a problem for many. This sort of thing works with coffee script since JS hasn't really been a moving target for a very long time - this is starting to change with ECMAScript 6 - and might be part of the reason CS seems to be a little out of vogue right now. 
&gt; It also can make it harder to write performant code, unless you know (well) how the generated output is made - but being PHP this may not be a problem for many. It depends on the language, honestly. So far, Blueberry's output is very predictable, with `a = 3` just being `$a = 3;`, etc. On the other hand, something like CoffeeScript generates tons of code for some of its more interesting features. &gt; This sort of thing works with coffee script since JS hasn't really been a moving target for a very long time - this is starting to change with ECMAScript 6 - and might be part of the reason CS seems to be a little out of vogue right now. Yeah, I wonder what'll happen to CS, given JS will have generators, shorthand functions (`=&gt;`), lexical scoping and classes built-in.
What is the "proper" way of managing third party client side library assets in Symfony? In other words, let's say you want to include jQuery using assetic (yes, I know of the Google CDN and others, but for argument's sake let's ignore them). In my projects I've used bower to install dependencies into an assetic-accessible folder and then go from there, but is there more to it? Is it OK to use the compiled version or should Grunt be used to do that? Is there a conventional way to tie bower into composer or Symfony other than just having a post - install command like hook?
it's also date formatted all wrong, what month is 17?! ^^^^^^^^^^^. ^^^:P
for bower js libraries you can use grunt, gulp, or assetic we use requirejs and it compiles our custom js along with bower components for us with this https://github.com/hearsayit/HearsayRequireJSBundle 
Actually, [now that you ask](https://github.com/mrkrstphr/array-config)... but generally, no. XML and YAML are meant for configuration. Comments are meant for comments.
We use bower and grunt at my employer. It works nicely for us. I don't see any downsides of going this route over using assetic besides needing to run a different watch function while doing dev. Edit: Realized I answered based on scss instead of js. Rewrote it.
The correct format for dates is 2014-11-17. Anything else is heresy. 
http://i.imgur.com/vESj1.gif
I hate Coffeescript and I hate this. I feel like this is just another hipster language designed to be yet another layer of abstraction from real code.
which part of the code exactly ??
Using Big O notation: O(mygodit'sslowasfuck)
Can you recommend me a good, simple and lightweight MVC framework? I currently utilize a poor man's MVC using Slim with Twig templates and one function per route, but I wonder if there's a better way to do this, with dependency injection, inversion on control and all fancy stuff. I looked into Laravel and CodeIgniter, but using Laravel seemed like a chore because you need to buy into their template engine, project structure and all that other stuff. CodeIgniter seemed pretty good but I heard it's not actively developed anymore. So, is there a lightweight MVC framework alternative that isn't too restrictive and plays nicely with Twig?
try this in javascript return {}
&gt;Notice: Undefined Index errors. What do those errors mean? Basically, that an index of an array is not set when the code tries to use it. PHP doesn't mind this as such, it's not a fail, it's just letting you know. So, say your script is expecting a POSTed field called "T_and_C" (terms and conditions) from a checkbox on a form, and you're only going ahead if they've ticked that box. So you have code like this: if($_POST['T_and_C']!="Y"){echo "Must accept T&amp;C";} If the user doesn't tick the checkbox, nothing comes through for the field at all (checkboxes are a pain that way), and so there is no $_POST['T_and_C'] in the $_POST array. 'T_and_C' being the index you're using to access one member of the POST array, and it not being there, PHP complains. Note that the code should echo "Must accept T&amp;C" anyway, because obviously if $_POST['T_and_C'] can't equal 'Y' if it doesn't exist. 'isset' checks that a variable is set, so in the case where the user hasn't ticked the box, and $_POST['T_and_C'] isn't set, this code: if(**!**isset($_POST['T_and_C'])){echo "Must accept T&amp;C";} will echo "Must accept T&amp;C" without the error message. So, the advice is that you should use 'isset' to check if an array index is set before trying to use it if there's a possibility is isn't. The line numbers for the error messages should give you an idea of which array indices aren't set, and the simplest fix is to wrap them like this: if(isset($some_array['some_index'])){...safe to use $some_array['some_index'] here...}
another evolved chimp who can't differentiate procedural and functional
Try configuring [this](https://github.com/mvc5/micro) to use twig?
Laravel might seem pretty opinionated, but really it's quite flexible. For example:https://github.com/rcrowe/TwigBridge I'm not sure what you mean by adhering to their "project structure and all that other stuff," because we use a pretty customized setup for our app structure, and just register ServiceProviders. 
Oooops, no. What I actually meant: this is already a great / pretty standard and compatible Changelog format. http://keepachangelog.com/ is definitely one of the most thorough documentations there.
A $1 tip for you! /u/changetip
You can use that, or you can do controllers as a service just like any other Silex or Symfony application. The Goal is not to create a new Framework, the goal is having something structured the way I/we at work like to work, with the components we like to use.
The Goal is not to create a new Framework, the goal is having something structured the way I/we at work like to work, with the components we like to use. Essentially it is just a collection of ServiceProviders integrated more stuff into Silex. Why use PHP? - It makes for fast prototypes - Easy to get new people involved - Its fast "enough" - We are mainly a PHP Shop. Just because we know how to use other languages, and do so does not mean PHP should be left out :)
True. But! Most bundle require symfony/framework-bundle which kind of negates the whole idea of using them seperately.
The two sites have the same goal just with different provisioning tools, the first Ansible, the latter Puppet.
And then you need to create a Bundle, its DependencyInjection Extension and so on. But you are right, that work for a lot of cases. Just not the way we do stuff.
Only if you want to inject dependencies, but creating a bundle is a one liner at any rate: php app/console generate:bundle &gt;Just not the way we do stuff I can't argue against personal preference :) I'm just thinking that there's practically no reason to have two ways of doing something, and since symfony covers all cases we can just use it for everything
Any framework should do at this point from what I've heard. I still recommend you Symfony2. There is a great learning curve, at least I can say this in place of our junior developer, once you understand the inversion of control philosophy. One thing I might add: If you are really handling big data and/or high traffic, you should look for a server and database setup that is able to scale with the project. I can't give you much advice in this direction since server optimization is not my best category by far. Hope this helps you with general directions. 
&gt; CoffeeScript is effectively the same as JavaScript with similar changes I think you are purposely ignoring many important features CS offers. To say it is the same "with some tokens removed" is a gross understatement of the feature-set it provides. That's just factually inaccurate.
[ISO 8601](http://en.wikipedia.org/wiki/ISO_8601)
Most modern frameworks are designed to work well in scalable infrastructures. Things like scalable database infrastructure, session storage, etc. are all accounted for or can be accounted for (session storage in the database, multimaster replication for databases, load balancers, data caching with memcache and redis, and so on). Really what you should be more focused on is the code. Build your site first. Get your traffic and your user base. Then once scalability becomes an issue you should hopefully have some revenue or at least be able to justify the additional infrastructure required to scale your system up. It doesn't make too much sense to focus any effort on scale when you won't have a scale problem in the immediate future. Right now you have a "lack of code" problem. Focus on that, the scalability can always come later.
Can you elaborate? We don't know what "my experience" means.
I don't need an ISO. It's just damn well **right**.
I understand what you are saying. So will it be okay if i start coding on any framework? like Codeigniter for example? I am just nervous because this would be my first major project and this could be the end of the line for me. Thanks anyways.
If you don't tell me, I will never know, yes, this is certainty.
This actually is really cool!
&amp; makes more sense than +
Documentation (in English or French): http://hoa-project.net/Literature/Hack/Zombie.html.
Very true. Trying to get clients to understand that, is difficult. 
this part maybe? https://github.com/cundd/pos/blob/develop/Classes/DataAccess/ObjectFinder.php#L95
You probably won't want to use Codeigniter as it hasn't had much development for a long time and the project was only just recently revived with a new core team. My suggestion would be to look at Laravel or Symfony. 
The ObjectFinder is a Zombie and will be removed soon
What's it doing there in the first place? Don't you have code review? Or at least review your own commits before pushing them to master? You're building a database. A primary data store for someone's important data. Sorry, I hope you're having fun, and if that's the reason for this then I fully support you, but it seems like you're taking it seriously.
The code is from an very early commit. And you are definitely right: When someone stores important data in the database this data has to be secure! But I thought that declaring the state as alpha would show that one has to be careful when using the software right now. The ObjectFinder that you mentioned is not used when handling REST requests. It is still there from an idea to somehow implement support for Doctrine 2. The project is not production ready (I just updated the homepage to make this clear), but I wanted to share the current state and may find some people who like it and want to participate in creating a PHP database that just rocks :)
&gt;creating a PHP database that just rocks That's not a thing that can exist. It's like saying you want to create a cardboard skyscraper that just rocks.
WOW, very nice... How did I live the past 8 years of career without this?
I can find you the exact issues if you want to (which where pretty common use cases not implemented), but maybe this is a better indicator: http://isitmaintained.com/project/schmittjoh/serializer It takes on average 50 days to fix an issue, and ~50% of issues are still open. That's by very far the worst numbers I've seen on a project this popular (small list here for comparison: http://isitmaintained.com)
I hope I will teach you better ;) But you may be right. The future will tell :)
Check twig bridge for laravel 4.2.
I second laravel for simplicity, you don't want to be fighting with events for security with symfony, it's a pain.
I've never once had to fight with events in ANYTHING with symfony.... Since version two came out.
Apparently x-posted without declaration here: https://www.reddit.com/r/webdev/comments/2mjdie/what_framework_in_php_should_i_choose_for_a_large/
More than eyes we have a problem with non-real brains ....
Okay next time
We all wonder!
Upvote 'cause I feel the same way... but it's always nice to be able to tell the haters that there's an international standards organization telling 'em to shove it.
You could see your code as http://en.wikipedia.org/wiki/Null_Object_pattern. I have found that NOP makes more sense for me and works better on CRUD situations.
You can either pass on the responsibility to your code or the user to create it. Which one do you think has a higher failure risk?
I didn't meant that backend devs should be html/css experts. But that's a pretty basic thing, isn't it? The knowledge to build such application is not gained in three months. And I know nobody in the php-world who didn't at least had several month of html/css experience till he was able to write apps like this. 
I see a glorious future where the PHP language is properly stewarded. No longer will mere syntactical "sugar" be added willy-nilly to the language: Crude hacks that make the job of code amateurists "easier" that also reduce code readability. A time when *real* changes come to the language, like typehinting for all data types, not just objects and arrays. Like optional type assignment to variables. A language which is truly versatile: Interpretive when needed, strict and concise when not, and capable of either when in a rush. A mature language, that knows itself, has its own spec, and where its future is not decided at the whim of an emotionally-charged tug-o-war of non-OOP and OOP, of hobbyist vs. professional. I see an engine that has evolved! No longer a single-time pass, it has now become a true Virtual Machine, capable of impressive memory management and CPU optimizations its previous incarnation could only wistfully pine for. I see a dev force who target the latest version of the language. Developers who simply do not need to care so much what their eventual engine target version will be, so they are always free (and, indeed, encouraged) to use the latest, yea even the bleeding edge, without much fear of non-adoption by their target crowd. For there is now a new method of delivery: A final build step to ease the way of the Sysop, who is incapable or unwilling to upgrade the engine's version, for whatever reason. A transpiler. I see the developers transpiling to many major versions of the language, as many as are practical and wise. Many more major versions than just the last two released, for it will matter little and cost little if support continues for 10 years more down the road. Except, few of these things are in the future! Most have already come to past! Because The Language has a new steward. Volunteering to take the course in a time of internals misdirection, adoption decline, and evolutionary stagnation, the new stewards plotted this course and paved the way by themselves before bursting on the scene and offering the developers a second path, a cleaner, more efficient path, with promises of less internal bickering, more ready acceptance of user contributions, and a thorough commitment to the Language itself, going so far as to even help the Language understand itself for the very first time (The Spec). Thus, the future looks brighter for the Language now than at any time in fading memory. For even the original Shepherd has now awoken from his slumber and promises that he, himself, will find another, suitable Path. That nothing will need to change, that he will rush adoption of only the best of what the New Shepard has done, and so far they have been working together for the benefit of all. Whether the flocks separate or keep merged, it hardly matters. For the Language *will* be better. Because the Language *is* better already.
RHEL6 has PHP 5.3 and is supported until [November 2020](https://access.redhat.com/support/policy/updates/errata), November 2023 with "Extended Life Phase".
While I agree we should be moving on and drop support for pre 5.4, but some important details are missing from the post (security support and PHP 5.3 -&gt; 5.4+ htmlspecialchars/htmlentities attribute change comes to immediately my mind). I think one of the biggest underlying problems is the release gap between major OSes (RedHat etc.) and PHP. This is just my speculation, but PHP release folks could maybe try to do better coordination job with OS vendors (i.e. get appropriate PHP version into the next OS major release). Of course PHP release cycle is much quicker than, say, RedHat's, but maybe we could still improve there. And luckily the situation looks a bit better now, at least in RedHat world (thanks to the Software Collections). Anyway, technical debth in legacy PHP applications is, I guess, so huge overall (related to PHP major version upgrades), that getting "everything now immediately" done is impossible. But we will surely get there, it just will take time.
As long as the most-installed LTS releases of Debian and Redhat are on 5.3, it's not going anywhere, sunset deadlines be damned. Ideally there'd be a way to get php54 and php55 packages into the standard repos for those, but at the same time I can understand why there'd be some reluctance on the part of the distributions (since it will be one less reason for people to ugrade to the latest release). Most people are not going to install from a third-party/backport repo, either because it's beyond their comfort level or because they've already been burned by incompatibility issues in the past.
I've only used version two, and the security component is way too complicated. 
&gt; Sometimes I even feel that it’s not me writing PHPixie, but that it is an entity on it’s own demanding to be brought into this world Yeah you should probably call an exorcist
This is terrible for the PHP community. Distros need to do a better job at providing the latest versions of PHP - no longer are we waiting 3 years for a major PHP release, it's more like once a year.
I don't like the function for a couple of reasons. First of all... "give", I don't think is very expressive. Mostly, though, the problem with this is that the method does too much. As well as CQS this method breaks the single responsibility principle. Basically, if you ask what a method (or class, or file, or whatever) does and the description includes the word "and", it's probably wrong. This function searches for value, and if it doesn't find one it creates it, and then returns it. You see the issue there? The reason that's important is that if break these into two bits of functionality you can make sure they both do their job WELL. You can also more properly check why. For example, what happens if value is null or blank? A more dedicated method could or should check for that. A more dedicated function could and should have solutions or options, could have checks for the REASON the tag wasn't returned. A more dedicated function could be more easily unit tested, etc.
Can you use the API via PHP, or is it intended only to be used over the REST interface (cURL)? As a no-config quick &amp; easy JSON data store I could see me using this in some small projects, but ideally I'd want to just want to whack it in my composer.json, tell it where to save the json files, and start using it in my code.
&gt; PHP is anything but reliable Can you explain this a bit more? &gt; has to be blazing fast Yes, performance would be better with compiled languages, but (see below) &gt; it runs within a webserver" Not necessarily. Stairtower is built on [ReactPHP](http://reactphp.org/) and is a separate server process. ReactPHP directly listens for socket data and does not rely on Apache and co. Once the server is started and all necessary classes are loaded (I don't know how PHP does that in detail) PHP's code has been transformed, is "compiled" and will not be re-compiled until the server is restarted. And, please PHP gurus correct me if this is not true, once all this code is loaded it's performance is really good. (Correct? :-S)
Reposting blog comment here... &gt; And their creative fairy pushes from inside and begs to be let out, and she won’t stop until they sit down and code something. So people are bored with their day jobs and decide to write some code to keep them entertained and test their juices. Fair enough, but: 1. Why the hell are people releasing code they built “for the sake of it.” That stuff goes stale VERY quickly, as there is little to no motivation to work on it. I only release code that I required, and I required it because a) it did not exist, or b) the existing solutions were beyond saving. 2. Why does this code have to be in PHP? Various other ecosystems are crying out for packages, like Rust. Go and learn that. Build a Router in Rust, and be famous forever for making the best Router around. &gt; When you want to create a library you want people to use it, a lot, you want to make it popular. That should not be the main goal no, but a side-effect of a good and useful piece of code. If there are a thousand alternatives doing the exact some thing already, you probably are not building something useful. &gt; And then you have to choose, either make something for a rather small userbase or try to create yet another router. Haha. See above. &gt; The only advice I can give is to try learning other languages. Definitely. PHP is a crowded marketplace where building something NEW is difficult. If you want to build something new, then find a green-field ecosystem that you want to truly become part of, like Rust is right now. If you want to get your name out there and become a popular PHP interweb-star, then contributing awesome features, documentation, improving tests on massive projects, etc is a great way to go. But for the love of shit don’t just release clones for the sake of it. I think people are confusing "writing code for themselves" and "releasing." Release stuff you think the world needs, not the shit that you smashed together when you were bored, then fail to work on forever. You have to be seriously invested in maintaining that code or you're letting people use something you don't care about. That's how CodeIgniter came to be, and look at how that all ended up. 
RHEL 4.8 was released in 2009 and is getting security support until March 2017. It came with PHP 4.3.9.
Well, you can blame composer for making stuff to easy to be released. Also remember that every person thinks that *her* creation is the bestest thing since sliced bread =) Also releasing code make them feel acceped as part of the community, it may validate their existence as a developer.
This is what I might do: * When you query the repository, the repository returns an entity (whether from persistence, or a new, empty entity) * An event is fired, which makes sure the entity is persisted Note: I haven't tried this, it may not be a good idea.
As far as PHP frameworks go, my favorite are Laravel and then possibly Yii. Depending on how much of the site you want to build yourself, I would go with Laravel. However, you have a specific requirement that could be better handle by something like Magento. Now I will say this, Magento is built on Zend, uses an older style naming syntax and the way it cascades can be quite confusing, as well as EAV models (a real pain), but it is PHP and it was specifically built for shops, shopping carts, and ecommerce, products, etc.. in mind and being open source and PHP you can dig really deep into the code and make it do just about anything you want. It is incredibly flexible. Personally depending on your level of expertise, you might be better off rolling your own in Laravel but thats up to you.
That was a joke actually =\
I've been trying to learn about routing and dependency injection, are there any good resources on how to do it without a framework? I can't seem to find anything useful.
I too will do security support for your PHP 4.3 app, but I won't do any new development in PHP 4.3. I guess I'm not sure quite what the argument is when this is brought up. I mean, yes, in one sense I get it, but not entirely. If your business needs don't change, you can keep running the software that you had running. If your business needs change, and the marketplace changes, you need to re-engage with the marketplace to address your business needs. Just because one side of the marketplace (RHEL) says "we support PHP 4.3!" doesn't mean any other marketplace participants (developers) have to fall in line. 
how about a better way of installing multiple versions at the same time? quit calling it "/usr/bin/php" and call it "/usr/bin/php54", for example. symlinks to start people off, but ... just because one app might need or want php 5.6 isn't necessarily enough to warrant an entire server upgrade. yeah, yeah, vps, docker, etc, whatever, but really... allowing for multiple versions to be installed and run more easily would make it easier for upgrades to happen across the board.
You can find an example installation on https://stairtower.herokuapp.com/
Pretty much. I guess it's a nice experiment and learning experience if you are writing it, but nothing one should consider running in production.
Mmmm, there was nothing "drama queen"-ish about the post. Have you actually read it?
Dude has a *Manifesto*. My PHP Manifesto is "Maybe we submit enough RFCs that, slowly, over a period of years, PHP's syntax becomes exactly the same as Swift, because Swift really appeals to me."
DI without a framework: [Aura.Di](https://github.com/auraphp/Aura.Di) Routing without a framework: [Aura.Router](https://github.com/auraphp/Aura.Router)
PHP 5.4 was released in 2012 - that's two years ago now. I can't imagine many people are still 5.3, back from 2009… It's not hard to upgrade, or even to install a newer version parallel if you are concerned.
On which specific platforms? It's odd that this isn't mentioned at all in the comments on php.net. Usually I'd expect lots of whining there.
&gt; imageantialias On [OBS (for SuSE)](http://download.opensuse.org/repositories/devel:/languages:/php/SLE_11_SP3/x86_64/), it looks like php5-gd is available as a package, which means you can just install it as an extension.
There's always [Aura](http://auraphp.com/manuals/2.0/en/).
Well the rule of thumb is "if it's incredibly stupid" then I'm joking =) I tend to blur the line a lot though, since I;m a huge troll at heart. 
Yeah, I've had the same thing happen to me. Windows CURL does not know where to find the CA certificate that is uses to verify the SSL certs. If you add this, you can also get it to work: curl_setopt($ch, CURLOPT_CAINFO, 'E:\path\to\curl-ca-bundle.crt'); If you can't find curl-ca-bundle.crt, you'll have to download it.
&gt; [PHP is anything but reliable] Can you explain this a bit more? `==` not always evaluates as it should (`"123" == "123foo"`. [See this.](https://eval.in/108854)). `foreach ($foo as &amp;$bar)` yields strange results. Logical operations are not transitive (`"foo" == TRUE`, `"foo" == 0"`, but `TRUE != 0`). I could go on, but [this article](http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/) describes PHP problems much better than I ever could. See this, also: https://bugs.php.net/bug.php?id=54547 Yes, you can open and listen to socket connections, instead of relying on Apache/nginx/IIS/etc. PHP is still slower than a strongly typed language. It's still slower than a compiled language. It's much slower than a strongly typed compiled language, and it uses much more resources (RAM, CPU). The performance might be enough for most uses, but don't expect to see any major players adopting a PHP-database -- which obviously means not to expect any heavy investiments and research. Databases tend to be the bottleneck of big systems, and PHP will only contribute to that issue. This is a hobby-project, and will remain as such. Sorry to be this blunt. You might learn a lot by doing this, so I won't tell you to give up. This can get interesting, but will not scale enough to be usable.
More things that might affect a database development: * In PHP, `NULL &lt; -1`, *and* `NULL == 0`. Sorting is thus nondeterministic; it depends on the order in which the sort algorithm happens to compare elements. * For a more type-safe ==, we have ===. For a more type-safe &lt;, we have… nothing. "123" &lt; "0124", always, no matter what you do. Casting doesn’t help, either. * json_decode returns null for invalid input, even though null is also a perfectly valid object for JSON to decode to—this function is completely unreliable unless you also call json_last_error every time you use it.
Have you seen Smarterer before? They have a pretty extensive set of quizzes; PHP being one of them: http://smarterer.com/tests/php The cool thing about Smarterer is that anyone can submit questions and then they get approved and added to the list of questions.
Except many people (including developers, sysadmins, and pretty much anyone) think like "why update if it works?" Considering an update has a cost (it takes a bit of time even if you don't test anything -- and might require at least a few days if you want to test your application that doesn't have automated tests) and comes with some risk (if it fails or there is an incompatibility with the new version, you'll lose money), why would some update, if it works with 5.3? (and, yes, I use 5.5 and I am currently testing my applications with 5.6 -- but I can understand those who don't update, even if it makes me sad)
fork PHP and if your fork is better, people will use it.
Friends don't let friends use PHP5.3
Maybe it is just the font you're using on the site but question 16 asked about echo(`Hello World'); Using the two separate ticks, which would throw an error and not echo Hello World. Again this maybe a font issue but they certainly looked like to different quote types to me. Reached the end, found Q16 again and here echo(‘Hello World');
I want to downvote you because of you, but damn it that was a correct answer, upvoted. Dang you Paul!
(/me bows head) Thank you, sir.
&gt; json_decode returns null for invalid input But the only valid input that would decode to NULL is the string "null". To handle this I just return NULL in this case and throw an exception for any other NULL result (https://github.com/cundd/pos/blob/develop/Classes/Serializer/JsonSerializer.php#L37). Isn't this correct? 
Some distros do this. Gentoo has "slots" for example, where you can have multiple major versions of packages installed at the same time... but that's up to the distro and the package maintainers.
Very good feedback thank you guys. I'm still shocked by the result of the numeric string comparison. So I've to double check this. I don't think that my project will be a CouchDB, or MongoDB or whatever -killer. I hope it comes in handy for someone - and as you said: At least I learned a lot.
Just came here to notice this thing...
Question 22: &gt; This is called 'overloading' and PHP doesn't supports it. That should be 'support'. 
Ahm... this probably does it. Since we are talking about that, your project is not [PSR2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) compliant. * Method names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. I haven't checked the rest of the code, I just read the method you sent me. Since this is public at github (I don't know what license you plan to release it under), you should probably try to make it compliant with the internation standards. The link I send above describes the coding style guide, and you can also check php-codesniffer, if you want a tool to help fix it. All opensource projects are PSR2 compliant today. Also, if you wish to release something a little different (better maybe) than MongoDB and CouchDB, you should check ArangoDB. It's a document-oriented database (like Mongo/couch), but with native join operations. It's called a graph database. It would be a nice feature to have, and it's something to differentiate your database from others.
Have you tried scaling in Laravel? Anybody have thoughts on that? 
What would the correct process here be? I run into the same thing with email addresses in my app. I take the email address from the form, check to see if it is in the database. If it is in the database, i return that object. If it is not in the database, I persist the new address, much like the example from OP.
I'll take a look at ArangoDB, think you for the hint. And thank you for the PSR2 link. I have to think about it. Omitting the leading underscore is definitely ok. But there are some big points that absolutely do not fit my style. I don't like the single opening brace on the next line and I think you get a much better overview when placing 'static' before the visibility. But these things are arguable, especially if contributors join.
Actually it's not uncommon to run across PHP 5.3 (hell, even 5.2) on webservers. Coupled with MyDQL 5.0 ...Some people really just don't care about maintaining their shit.
Yes to this! Minor corrections in your article: obligatry -&gt; obligatory; webseite -&gt; website. 
Its complex, thats for sure, but the basic form login is pretty simple...
"Witty"
Possible, but requires running PHP in fastcgi mode, which not every host does.
This way of doing drives me insane. Seriously, his function is 6 lines and has a clear goal. It does too much? COME ON. That's just because you wanted to bring in "single responsibility principle", but at the end, you are not improving anything.
I'll be honest with ya. I respect you man, I do. Just sometimes your small gripes with Taylor get annoying. Good to see you guys pictured together recently though. 
I kind of object to a lot of these questions because they're more like trivia than actually useful knowledge. Anyone writing code where random strings are incremented and references passed around and redefined in weird ways would probably be great at these questions but would also be an awful programmer. I accept that knowing how the language behaves is worthwhile but PHP is famously unpredictable so it's best to just totally avoid getting into these situations rather than trying to memorise all the quirks you can encounter given sufficiently stupid code.
Thanks, fixed it!
I use "XML Parser", mainly due to the fact it's a forward only parse of given source XML and keeps memory usage low regardless of XML size - you can basically stream XML to it.. http://php.net/manual/en/book.xml.php This can be handy with something like AWS XML responses, something I often need to parse across the various services (e.g. EC2/S3) and they can often be massive payloads. Typically I'll wrap it in this - simplifies the calling of the parsers events for start/end/data nodes. https://github.com/magnetikonline/phpxmlexpatparser Shouldn't be too much trouble to mock it.
Not really PHP specific - but here are mine. https://github.com/magnetikonline/dotfiles#sublime-text-3-installed-packages 
Dude, I am becoming a fan of yours. Respect. That was a major bump. Appreciate your patience and hard work. I will give your framework a try, not because i hate laravel, but because i like dig new stuff.. I dont smell anything wrong with your framework. Now i know why you have assemblies and workers as two different things. But is their any possibility that you can combine them ? It will just make things simple. I think i can create some workers for you.
The facts already tell. PHP is an interpreted language. It's a program that runs inside another program. It is not performant and cannot be as performant as something that runs on the bare metal like a compiled language. I wish you all the best, but you would be wise to realise what you don't know, which is quite a lot by the looks.
You made me happy ! Workers are single page classes whereas assemblies are those which come bundled with multiple files. My intention of keeping them separate was just to give them unique identities. Please feel free to fork the project.
ext/DOM (DOMDocument) is the only sane means of parsing XML in PHP, that I am aware of. **Do not** use SimpleXML. It is not simple, it has a really crappy API, and it has a long history of creating code soup. For parsing XML, you need do little more than construct a DOMDocument, load the XML into it, and then create a DOMXPath using that. Then you can write queries to iterate through the document as needed. It is highly efficient, and results in nice, clean code.
As others have mentioned, you are doing a great job taking feedback and I have a lot of respect for that. So here is mine: 1.) In your application wrapper composer.json here is your autoload section: "autoload": { "files": [ "application/router.php", "vendor/ajaxtown/eaglehorn_framework/src/eaglehorn/common/functions.php", "vendor/ajaxtown/eaglehorn_framework/src/eaglehorn/error/ErrorHandler.php" ], "psr-4": { "application\\":"", "eaglehorn\\":"vendor/ajaxtown/eaglehorn_framework/src/" } }, I would remove the router from the autoloader and instead pull that in from your bootstrap file. I would also remove the two vendor/* and stick them into the composer.json in the framework. Reaching into the vendor from outside is never usually a good idea if it can be avoided :) Again I would move the eaglehorn\\ psr-4 namespace into the framework composer.json. 2.) In the public folder I would move the autoload.php and config.php up a directory, as they could possibly be executed directly if somebody knew they were there. I would also probably the initiate the router in the index.php file as well somehow. I can't remember how other frameworks load in their routers but a quick look at the laravel or symfony bootstrap process should tell you. 3.) This last one is a bit nitpicky, but I would have the first letter of the namespace as uppercase. Other than that there is nothing else I can really see wrong. I would personally use the Symfony or Aura router, but since this is a learning experiment I commend you on writing your own :) This is coming along really nicely :)
I figured that much out :-) I haven't tried Ansible yet. Still don't quite trust this provisioning tools.
First I throw it into a JSON representation of the xml, then I convert that to [JSONx] then I parse that, because [JSONx] is the cats meow. [JSONx]: http://www-01.ibm.com/support/knowledgecenter/#!/SS9H2Y_6.0.0/com.ibm.dp.xm.doc/json_jsonx.html
&gt; what you don't know, which is quite a lot by the looks. That's part of being human
Thanks Bacondrinker. Accepting your comments. Need a day or two, to make these changes. And really, appreciate your time in surfing the code base (A beer for you). Basically, everytime i get suggestions, i not only do the code changes, but also update the documentation. So, that takes quick some time. Writing documentations is really annoying and something that i really hate.. But so far, i am enjoying developing. 
Saw that too but would like to point out another issue (grammar): * Q3. What does PHP stood for at first, and what does it stand for now? Could be rephrased as: * Q3. What did PHP stand for at first, and what does it stand for now?
What do you expect us to say when you dont allow to even have us look at demo site (with admin backend) and/or code? We are not marketing people here - short description features doesn't say much, we want to see it in action. EDIT: Yes there is a need for more good CMS+framework hybrids
It sounds great, but you might find it difficult to excite people if the code base runs on older PHP, as it means it won't use any of the nice stuff we are used to these days - what's the minimum version of PHP that everything runs on?
Well the question isn't "did we do a good job implementing it", but "is a framework with these features something that is genuinely interesting to people?" A demo is a great idea, but just not something I have in a presentable form right now. I don't think you'd gain much from seeing an admin backend when so many of the benefits come from how websites are coded. So I'd have to make either a code demo or at least a video, which I'm happy to do if there is enough interest in the core concept. 
Thanks for taking the feedback :) I only took a quick five minute skim, but other than that nothing jumped out at me. Your framework actually reminds me a bit of a more modern codeigniter for some reason, and since I'm working with CI every day I have learnt to appreciate the framework (not that I would choose it for a new project). And yeah, writing documentation does suck, but I have to commend you for doing it, it's not something many people actually do (cough).
&gt; Note: I'm deliberately posting from a throwaway account and NOT linking to the framework source. I don't think there's any harm if you just post a link to a public repo. Sure, the code might not meet modern standards, but people can download and poke around if they want to. You can add something to the README if you like - that you'd be happy to improve it. The dilemma is that people may not use properly without substantial documentation to catch them if they get stuck - unfortunately good docs for a project of this size are probably a few months worth of solid work! 
Haha oh man. Well PHP 5.4 is the minimum version right now but it does have a few scars left from PHP 4's "barely OOP" OOP model. It also doesn't use namespaces, traits, etc yet but these could all be implemented with a major refactoring.
Compatible with 9 year old sites, is it object oriented ? Its really hard to judhe things that you dont show us. You serm yo be really defensive about it ( throwaway reddit account and all ), why ?
Warning. Just because something works, and has worked for 10 years does not mean that it is good code. If wordpress were first released today it would be ignored. 
&gt; The dilemma is that people may not use properly without substantial documentation to catch them if they get stuck - unfortunately good docs for a project of this size are probably a few months worth of solid work! This is my entire concern with posting source. I would want to do at least some refactoring and write a lot of docs. For better or worst, I feel it would be a mistake to release it without doing this. At one point I estimated 500-1000 hours of work in order to release it as open source, and that why's I put the brakes on for now. But then I keep working on it and thinking "man, I love this thing". 
&gt; It would be tremendously satisfying to release something like this if there would be a reasonable user base. But frankly it would be demoralizing and rather pointless to put in that effort only to find no one actually wants it. Only way to find out is to release it. Open source it and I'm sure it'll gain traction. It sounds interesting. I'd love to see it, personally. Host it on Github and I'm sure a ton of the issues could be fixed by outsourcing via pull requests--especially if it's popular.
I'm (sorta hoping!) this is a joke.
Yes it's OOP with MVC. As I mentioned elsewhere it has a few scars left from originally being PHP 4 OOP, but that is easily refactored. I don't want to show it yet because I really want the idea to stand on its own merit first, without getting bogged down in the details. Secondly I can't really post the code without choosing an open source license and spending some money on a lawyer because I do have an existing business and clients built around this thing.
What is the meaning of creating something like this? It's just for fun? I don't see the point.
Indeed it was, but seems the rabble are upset. I shall wear my negative karma with pride as JSONx makes me lol hard.
Hehehe - well, I hate to say it - but I just removed my downvote from your parent comment :) JSONx - pretty much sums up the state of IBM when it comes to application development right now... 
The latter! By keeping it outside your document root you ensure that all requests can be proxied by your PHP (eg using http://php.net/manual/en/function.fpassthru.php). This means you can ensure that (eg) PHP code isn't executed as well as giving you the option to restrict who may download any given file (eg via ACL).
I'm interested. I've been studying CMSs and their UI for years now. Even if the code isn't the best, the maturity of the UI and the ideas implemented would be worth attention alone. Don't worry about refactoring it before publishing it. You can get free labor from the Open Source community. Worry about the licensing you pretend to share it with.
I *think* most larger hosts run fastcgi, don't they? Certainly most I've seen *aren't* doing mod_php. I think with a bit of effort I could get virtualmin to run different versions of PHP, but it's still "with a bit of effort". 
A shotgun.
Just because lots of people are pointless being a bit of a dick and ignoring the fact that projects need to be maintained long beyond "being cool", doesn't mean you should jump on that train too. :)
Thanks. 
Package manager Lint Php plugins for lint Git Markdown preview Autocompletr
I'm interested enough to check out your source code. If that's not available then I can't determine, even if I want all the features you mentioned, if I would want to develop in the framework. It sounds nice but implementation is everything. 
Just last week I saw this abomination (details changed to protect the vendor): &lt;xml&gt; &lt;json&gt;&lt;![CDATA[ notTheRealData = [ [ 'A string message &lt;span class="classname1"&gt;with contents&lt;/span&gt; &amp;nbsp;&lt;span class="classname2"&gt;and more&lt;/span&gt; &amp;nbsp;&lt;span class="classname3"&gt;and more&lt;/span&gt;', 'More strings', 'keep going' ], [ 'Second string in this &lt;span class="omg-so-not-json"&gt;JSON&lt;/span&gt; &amp;nbsp;&lt;span class="seriously-not-json"&gt;array (STACK)&lt;/span&gt;', 'Please kill me...' ] ] ]]&gt;&lt;/json&gt; &lt;/xml&gt; Only the data is changed. `&lt;xml&gt;` and `&lt;json&gt;` were really the only two elements in the stream.
Maybe try posting a sort of working demo or a "tutorial" of sorts. To give the taste of it without actually reavealing the code 
Honestly I don't think many people care about ORM. What is really handy is the ability to change to a different database or datasource while keeping your code as is. If you achieve that using a different clean technique I think people will still be interested.
I wouldn't consider it to not be good automatically - but I would certainly find it a barrier if there isn't an easy and abstracted way to save data
Is there an advantage to use fpassthru as opposed to readfile?
Take an hour or so and make a screen cast and show us what it can do, in other words, take everything you wrote above and user it as a script for a screen cast and show people how easy this or that is. Post the screen cast and let the votes decide. 
I'd be interested in digging through the code and UI. I've found having dev level above admin is a great idea
X-posted to the correct place here: https://www.reddit.com/r/PHPhelp/comments/2mlmih/need_help_with_results_being_pulled_with_php_and/ Please don't cross-post without declaration. See, when you do, it means you'll have two sets of people spending time duplicating each other's effort. It's just much kinder to let people know that you've posted it elsewhere, so people's time isn't wasted. 
&gt; By keeping it outside your document root you ensure that all requests can be proxied by your PHP Which sometimes isn't really desirable - as it's going to balloon your simultaneous requests to the PHP runtime from users. What I would typically do (if not using Amazon S3 for user storage and everything is on the same machine) is save uploaded content outside of the PHP doc root (as you suggest) then have a second virtualhost (e.g. usercontent.mydomain.com) - this second virtual host has it's doc root at the uploaded content path - but **does not** execute PHP/server side code.
Stick an open source license on it, and put it online. Having more eyes on it will only allow to it grow and evolve. Considering it is 10 years old, and only maintained by one company, there are likely a lot of improvements people in the open source world could contribute to it.
Has it been pen-tested?
totally this, imo DOMDocument is the best XML parser in PHP.
Just in case you didn't know (and given that anybody else has mentioned it)... do you know what &lt;!--#include virtual="filename.php" --&gt; is?? I mean... do you know it is an apache SSI (server side include)?? Did you try including it in the same way (I mean as a SSI)?? if you did it, what happened?? One advice... post the questin to stackoverflow, it is a better place to find help whit programming problems. And I would like to help you, but my english is really bad. If you still want my help just PM me.
Thanks for reply!!! Subdomain is what I think I'll do. Another question, assuming my image subdomain is on another server but my image upload code in on my main domain because I need to keep track of session etc, how can I efficiently transfer user uploaded file to the image subdomain server?
thank you so much for your help! it appears the problem was a multiple things, there were a lot of stuff that didn't have quotation marks around them, which came up in the error log, as well as I was missing a whole directory that required to run this whole thing (something called Smarty needed a template folder) so I got the PHP file to work! This brings me to my next issue, how do I include this into a wordpress page? I've tried &lt;?php include('file.php'); ?&gt; with a relative or absolute path. Not it only it doesn't show up, it also breaks the wordpress theme for some reason. (messes up the background color)
Well a few ways come to mind: - could write a PHP endpoint/script on image server - uploaded file is accepted from main server and pushed to image server script for save (roll your own AWS file push basically) - add some basic auth around it (username/pass/IP file wall rule). - use SCP to push the file from main server to image server. Nice since you can setup SSH priv/public keys between machines for safe/secure auth. The SSH2 PECL extension makes this easy - or could shell exec 'scp' - failing SCP last point could (gulp!) be done with FTP. - main site form POST of the binary file could be to image sweet script (and some form of reverse auth checking). - mount remote image server path to main server over NFS. - someone else might be able to add more. In either case you will need to handle cases where connectivity between main/image server is broken. 
It could be argued that by refactoring so that the creation of a tag is it's own function and that this method call that function is beneficial and an improvement. The reason being that there may be other cases where creating a tag is necessary beyond the case of creating one where one is not found.
A reasonable question. Not sure why you were downvoted.
It needs 500-1000 hours of refactoring and documenting to get it to a point where you'd release it, and you're asking us if we'd want to use it? Seems cut/dry to me. I get that you're talking about the concept more than anything, but as every person and their brother has said in this thread, you've given us nothing. But alluding to the fact that it's not a finished product or well documented after 9 years makes me hesitant to even bother looking at it. My 2c.
My first thought, too. I love looking at new (or newly revealed in this case) software
PHP 4's "barely OOP" was just "not like Java enough". 
I don't know how that tricky quote got there. I fixed it with the other typos (thanks to everyone) :)
Some hosts do this. I think WebFaction does.
&gt; PHP 5.3 -&gt; 5.4+ htmlspecialchars/htmlentities attribute change What change do you speak of?
&gt; You should be binding all parameters, even if it is the table How can you bind identifiers?
JMS Serializer can be configured with YAML or XML as well, you don't have to use annotations fyi
Iirc you should be able to just put a ? Like normal and bind the parameter
Hello Bacondrinker, it does bind all the parameters. This is how i insert from my application model. $data = array(':fname' =&gt; 'Red', ':lname' =&gt; 'Snow'); $this-&gt;insert('myTable',$data); Internally, it gets the column names first. Then it prepares the SQL string. So this will generate: $sql = "INSERT INTO myTable (fname,lname) VALUES (':fname',':lname')"; Now it verifies if the $data is correct by checking the keys and sends it to run() method which uses native PDO to run the query. Do you mean that I should also bind 'myTable' ? Does PHP allow that ? 
Thanks Dave !
Yeah, iirc you should be able to bind any parameter, but I may be wrong
check this one http://www.phpgang.com/how-to-create-forget-password-form-in-php_381.html
Use Yii 2 as it has good features like Code Generators, CRUDs generator, Database replication and so on. Its easy to learn and documentation is also very easy. Its performance is very good. At server side, i would suggest to use latest versions of php, at least Php 5.5.x with Zend OpCache and memcached. This way your application will be fast. For database, use percona DB (a mysql fork), and for webserver use nginx instead of Apache. Thanks
**Security** How many people have worked on and see the code behind this? You would be doing all of your existing clients a huge disservice if you released this to the public without a formal security review by some very competent security experts. Even then you might be taking a risk. Drupal has had a pretty good track record with security incidents for a very long time, with hundreds of capable people going over every bit of the code trying to prevent vulnerabilities. Some small ones happened here n there along the way, as would be expected with anything of any measurable complexity (see Poodle, Shellshock, Heartbleed, GotoFail, etc) It had been through several in depth security reviews by professional companies and had always come up secure, until a review by a security team in Germany revealed an obscure sql injection that nobody had noticed up to that point - at which point fixing that issue released that bug into the wild, and many, many sites were compromised. That's after dozens of security reviews and hundreds of developers looking at the code for years. **Documentation** Being an in house tool, is it thoroughly documented how to extend it? how to use it? (and not just code comments, but real howtos, faq's etc.) If it is going to have any traction at all people will want to know how to extend it and work with it. The era of delivering cookie cutter projects for agencies is long gone, so devs are going to need to see how to push it to get complex functionality out of it. **PSRs** Speaking of, if a dev can't composer some add ons in there and its got its own homebaked http wrapper around curl vs something bulletproof like guzzle, they're gonna be sad. That *is* a pretty important thing these days. **Community** Most folks have an investment in one framework/CMS or another. Sure there are some curious folks with a lot of time in various tools, but the second that they hit a wall in your system that they know how to climb in their other toolchains, they might not be interested in putting in too much effort to make it work in your system.
If there is code in ISO-8859-1 and you, say, "echo htmlspecialchars('äBotch', ENT_QUOTES)" it will be all good in pre 5.4. With 5.4+ you get empty result because of encoding mismatch (in one of the characters, ä) between the variable and htmlspecialchars (you must write "echo htmlspecialchars('äBotch', ENT_QUOTES, 'ISO-8859-1')" to make it work again). 
I got to work on a school project in PHP, but we're not allowed to work with frameworks. Since I worked whit Symfony2 and Zend Framework for the last year at the company where I work. I kinda forgot how to work in plain PHP with a nice folder structure and not too much includes. Can anyone tell me some of the best practices to work in plain PHP without any frameworks but still using a good folder structure and maybe some kind of autoloader. We are allowed to use other "classes" and "php" files so it is possible I copy some code from other frameworks or use composer or something like that. But right now I cant think of any proper way to work in plain PHP.
Like most people here have already said, yes it does sound like a good idea and some of the features are useful (we have scaffolding type system in my works cms, where you just change database table and it's reflected already in the admin). But the issue you're facing is the fact that you aren't going to get the response you want, yeah it's potentially a good idea but like people have already said we are going to want to see code and can't fully back and idea just from the idea. If you can't / don't want to release / document any of the code your best bet at the moment will be to do some kind of screencast to show some of the code / features even if you are planning on refactoring bits. Point that out in the video!
DOMDoc ftw \o/
I don't know how much freedom can your "Framework/CMS" give... So here's my advice: * **If it's a classic framework**: You have to put only a minimal documentation which it's not a lot of works since we developers can manage to know how stuff works and help documenting. * **If it's a pure CMS**: This another story, Need more resources... And whatever how much it's advanced... No one can guarantee that will get a market share. Also you need to make it free and provide paid support/services/stuff...
Yeah, ci is nice, and I have learnt to appreciate how good it was consisting it is designed for php 5.2. That being said, I would never use it for a new project simply because frameworks like laravel and symfony are much better designed, easier to use and they use modern php features. The thing I miss the most from laravel/symfony would be the command line tools like migrations and Jeffrey way generators.
If you're considering releasing it, you better make sure it's implemented well. If it's poorly implemented, you could scare people away or more maliciously, people could find loopholes and security breaches...
&gt; SimpleXML "Oh I'll use this to parse MLS real estate data, it has simple in it's name." *10 hours later* "If I ever have to come back and update this routine, I'm changing professions."