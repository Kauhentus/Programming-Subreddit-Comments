I'm curious if it's simply a fixed performance penalty (always, I dunno, 20ms extra; so if your query takes 10 seconds (ignoring the obvious problems with your query!) it now takes 10 seconds and 20 ms), or if it's relative to the size of the query (if it takes 1ms, it now takes 20ms; if it takes 10 seconds, it now takes 200 seconds). If it's the latter, it could be a REAL bottleneck and would be worth looking into. If it's the former, I'm not sure it's worth looking at and complaining about 'three times slower'. If it's a matter of a 3ms query taking an extra 6ms, and a 50ms query just takes 56ms, I honestly don't care. I suppose it could be a matter of query complexity; if you're sending a lot more information to the server (either a lot of user input to otherwise be escaped, or a lot of different variables, or even just a lot of joins), I could see it being faster to send it all at once as a single query, as opposed to sending it in stages (query, then data, then more data, then more data...). I'll stop theorizing in my head (I'm not qualified to make any of these statements anyway; I'm a student that's had one semester of PHP and another of MySQL, and that's it) and read the article you linked :p Edit: it seems in the article they're comparing times when the MySQL server is not on the same machine (not even the same continent) as the PHP server. While this may reflect a lot of real world scenarios, I'm not sure this type of dramatic speed difference would be shown when they're both hosted on the same machine, or at least on the same server rack.
Testing, debugging, understanding common best practices, patterns, **architecture**, proper OO. Don't have to be a guru in every other language out there, but at least have an in-depth understanding of other systems your stack would interact with, including SQL, caching, scalability tools. Having the knowledge to say "no" to an idea, while being able to provide a workable alternative.
Thanks for your reply. Does architecture come with experience or can it be taught from a book? My own current development improves with projects rather than textbooks.
Each organization defines junior vs senior a bit different. Usually senior means you know the field more or less inside out, capable working and designing independently and tutor them juniors. Rule of thumb I'd say 5-10 years of work xp and a good deal of projects / milestones shipped and running.
mysql is a marzipan hammer.
Here you go: [On Being A Senior Engineer](http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/)
Interesting, I didn't think it'd take that many loops to break even; I expected it to do so much sooner. What type of website do you run?
&gt;full of security holes Security issues other than shitty coders writing shitty code? Because, if that's the problem, they'll still be writing shitty code open to injection attacks even after they move to mysqli.
A while ago I was "promoted" to a senior position in a small company. Reading this really got me motivated. I'd say this is a very good resource.
Yup, if php.ini is configured in the standard `-production` configuration (display errors no, log errors yes). They're non-fatal, and can be masked out completely via error reporting. Notably, though, that *doesn't* mean they won't break a site. Just that they won't break a properly configured one. ;-)
&gt; Don't E_DEPRECATED errors appear in the error log, but not on the actual page? It depends on whether or not the server admin is an idiot who left `display_errors` set to `on`, in which case the warnings will be spewed out to the browser. In general though, that won't be set on a production system.
It's not, but the hope is that at least some of those SO answers (to use your example) will actually talk about prepared queries and the like. In this case, deprecation will hopefully prompt education.
Cool. Some webhosts might even roll out the update before 2030.
&gt; [1.80006ms] mysqli escaped &gt; [6.37054ms] mysqli prepared &gt; [2.05994ms] pdo quote (escaped) &gt; [4.16040ms] pdo prepared And the reason PDO prepared was faster than mysqli prepared is probably because PDO is actually escaping behind the scenes, not actually using prepared statements in its transaction with the DB engine.
Annotations may look like a clean way to do complex things, but it's really a fallacy. Behind all of these annotations libraries are mountains of code to do all sorts of "magical" things. That code must still run, must still parse through the doc-block comments, yet they are hidden from the actual code you write. They break the natural flow of your program, which sets the stage for horrible, opaque errors. When encountering a fatal error in your annotated method, how in the world is the interpreter supposed to know that the true error is a type mismatch between the annotation you wrote and the expected return value of your method? It can't, because the annotation parser has to run at a completely separate time from your method code, complete with a totally different call stack and no shared context from which to pinpoint the screw-up. So in reality, all annotations do is sweep a lot of complex and vital code under the rug. As for what would be a "nicer" way of handling this, I just think that any code that is vital to the operation of a method or class must be promoted to first-class status in the code base, connected by language-based interactions. Non-annotation metadata (such as Doctrine's use of Yaml or XML) partly solves the problem by putting this metadata under a verifiable syntax, but it still creates a tenuous connection between large chunks of otherwise tightly coupled code. Not all annotations are bad. In Doctrine, for example, anything that doesn't affect the actual running of your PHP code is fine. I think Doctrine annotations which note the database type of an object variable, or which tell you that this is an auto-incremented value, are fine. They link your code with information and structures outside of your program, so who cares? But when you start using annotations to dictate object relationships like many-to-many, or from which table the underlying database library should be retrieving data, that is cause for alarm. Instead, I would like to see the relational mapping types like many-to-many as actual program structures themselves, perhaps used as [mediators](http://en.wikipedia.org/wiki/Mediator_pattern), or maybe even as some sort of behavioral filter system as seen in [aspect-oriented programming](http://en.wikipedia.org/wiki/Aspect-oriented_programming). It may be more work, and it may not appear as clean, but it will be better, more reliable, more maintainable code. In my mind, elegance is just a bonus.
It was already deprecated by good PHP developers for several years now.
That's a bit silly, if somebody is using that 'garbage' extension they are probably do not know what they are doing and most likely are not escaping/binding anything at this point. Forcing users to acknowledge and explore solutions instead of baby sitting them is a better approach. As simple message with an URI on php.net that explains why mysql_* is bad and gives a secure examples of alternatives would be amazing.
This. They aren't IDEs, but I still want to chime in my support for them as they're both excellent.
I dunno dude, google it: http://net.tutsplus.com/tutorials/php/pdo-vs-mysqli-which-should-you-use/
That's an excellent article. The main difference, then, is that PDO makes it super easy to change to different database (such as SQLite, for example). I think that's what I'll do then.
One of the main arguments is that formal deprecation and removal is going to act as a *negative* force as far as upgrading PHP is concerned. Why would I, as a shared web hosting provider, upgrade PHP on my machines if all it's going to do is break client sites?
Personally, I prefer PDO as, while it gives you a common interface to most database types, I also find it easier to work with. 
I'd suggest simply reading the "introduction" part for each extension in the manual: * [MySQLi (MySQL Improved)](http://php.net/manual/en/intro.mysqli.php) * [PDO (PHP Data Object)](http://php.net/manual/en/intro.pdo.php) To highlight what defines each: **MySQLi** &gt; The mysqli extension allows you to access the functionality provided by MySQL 4.1 and above. **PDO** &gt; PDO provides a data-access abstraction layer, which means that, regardless of which database you're using, you use the same functions to issue queries and fetch data. Really it comes down to you and your project, sometimes you have to abstract it even further, as databases aren't the only solution for persistent storage. Edit: formatting - really disliking how Reddit handles linebreaks. 
SQL injection invulnerability is a bonus side-effect of using parameterized queries in prepared statements. These are queries that are sent to the server and parsed separately from the parameters, ensuring that the parameters cannot be interpreted as malicious SQL. With that in mind it's important to point out that none of the db extensions can guarantee invulnerability to injection attacks. You can still shoot yourself in the foot with mysqli and PDO if you continue old habits. It's important for any developer, novice or otherwise, procedural or object oriented, to understand the security pitfalls surrounding the technology employed, as well as best practices on how to avoid said pitfalls. Extensions like PDO can facilitate this, but they can't enforce it. So I'm less in favor of depreciation and more in favor of proper education. There are still a lot of people out there learning from PHP tutorials circa 1998 that teach really bad habits. To make matters worse, the comments in PHP's own manual are unmoderated and full of outdated and ill-conceived code and gems of bad wisdom.
I think there's a bit of confusion here about what this RFC proposes and what it does not. I'd like to start off by stating that the RFC is still in the voting stage and has not yet been accepted as of the time of this writing. So the title is slightly misleading. Secondly, the RFC is not about the deprecation of ext/mysql at all. It is about whether or not we should throw E_DEPRECATED level errors from the mysql connect functions. The extension has already been in long standing plans for deprecation. It's just been an question of how to go about deprecating it. E_DEPRECATED has never been used to deprecate an extension before in PHP and certainly not one that is as heavily used as ext/mysql. So that's the reason there is a vote on which steps to take in the deprecation process. This vote is very specific to throwing the E_DEPRECATED error and whether or not this should occur in PHP 5.5 or be postponed to PHP 5.NEXT or just not used at all in the deprecation process. There are some people that believe the E_DEPRECATED error itself is not useful in deprecating the extension since it would just fill up a lot of people's error logs, most of whom can't do anything about it. On the other hand there are people that believe it's a way to inform people of the deprecation on top of providing information in the manual. So it's split opinions and thus the vote to resolve the action to be taken.
[Here's a tiny class that I've used for getting into PDO](http://leftnode.com/entry/the-last-php-pdo-library-you-will-ever-need.html "The Last PHP PDO Library You Will Ever Need by Vic Cherubini"). It's a great place to start. 
Uh. Why? 
The thing is, using PDO is actually SIMPLER than the mysql_* extension.
Books stores experience of others. In other words if You can understand what you are reading and You can see pros and cons of specific topic then it is worth to read. Just need to understand that not everything what is written is always true or fits to any situation :-) 
I can only assume that it'd cause problems for shared hosts that allow users to mess with their own php.ini, then. I've been with a few that only allow a universal php.ini unless you contact and collaborate with their staff to have changes made for your own site.
tl;dr : * exploited a wordpress plugin * injected code that runs [preg replace eval](http://php.net/manual/en/reference.pcre.pattern.modifiers.php) * sends data to an outside server 
mysqli if you are 158% sure you'll never switch to another database. pdo if you want an app that would be much easier to switch to another database. or if you develop on misc applications with a few DB's, pdo keeps the learning curve down.
As people have pretty much settled on recommending PDO, here is an awesome introduction to it which helped me greatly. I've already begun switching some on the go projects to it today - http://webdevrefinery.com/forums/topic/1272-your-mysql-code-sucks/
Well yes, I figured the queries would need changing, but the functions themselves wouldn't. Thanks!
None of my queries so far are particularly special, but I'll keep all of this in mind. Thanks!
Will do, thanks!
I'll look at this, thanks!
Down sides of using PDO over the specific DB-drivers is that the PDO must always follow the least common denominator route. Another problem is that PDO has its own bugs and features. I have had problems using PDO with SQLite, as PDO did bind all the arguments as TEXT. I'm not sure if that is fixed now. And PDO does not support busyTimeout setting with SQLite. Same problems exists with other DBs too. But it comes to you if you see that as a problem. Generally I feel that PDO is buggier than the specific drivers, but maybe that's just me.
Thank you so much! This is the perfect answer I was looking for :)
As with most things, it's personal preference. The problem with mysql_* is two-fold. It's too easy to allow mysql injection if you're not carefull and it doesn't really fit within an OOP style. mysqli and pdo solve both problems. The strengh of mysqli is that you could easily replace your mysql_* functions becuase mysqli also supports that format. The strength of PDO is that you are not limited to mysql, it supports a lot of other databases aswell. Also, it suppors named parameters. Other then that, they are (as far as I know) the same. (NOTE: I use PDO, not mysqli, I'm not aware of any special features of mysqli but I heard that if you're doing a lot of fancy stuff with mysql, mysqli gives you an edge)
No problem. `:)`
I'm not 100% certain about your set up, but if clients connect to the API and the API then sends the file to the client then you tell your boss he's fucked unless you get access to modify the API. The public signature will be the same and won't change but the way you send files need to change. Apache and lighttpd have x-sendfile and Nginx has x-accel-redirect. These are features which allow PHP to end execution and tell the web server to serve a file to the user, thus PHP memory usage is minimal and the webserver will handle what it was designed for. If you connect to the API and then send the file on to the client, i.e. acting as a middle man, then you should use the disk as a buffer. Get part of the file, save it to disk, then get the next part and save that to disk. You can do this in various ways but it depends on what type of response the API call gives. Finally once you have the file saved to disk you use x-sendfile/x-accel-redirect to have a web server send the file to the user.
&gt;The http protocol, which I'm assuming you're using to transfer the file, has a maximum file size. You might be hitting that. If you are, then you're SOL. What? This is really not the case, I have a 80 GB file I can go download right now if I wanted to. 
Even if I agree that it should be thrown to hell. It is still up to the costumer to decide whether he wants to be using shit or not. So as with most questions in our lives... it depends. 
By default, PDO only emulates prepared statements. So, unless you specifically pass this as the 4th parameter to PDO() array(PDO::ATTR_EMULATE_PREPARES=&gt;false) you're just using client-side prepared statements -- which while convenient do not offer the performance gains that actual prepared statements provide.
Tell me, how do you handle prepared statements in the mysql extension? PDO can do them. MySQLi can do them. MySQL cannot. Therefore, the original mysql extension is considerably less secure.
Hey now! I get super stoned before I write my apps, helps me concentrate and reduces my programmer's ADD. [7]
Nice.
As long as you are taking any kind of user input all of these suggestions apply.
2.2 beta doesn't exist yet dude! If you were using 2.2/develop then there's a chance it wouldn't install, make sure you post any bugs you discover on GitHub.
For a file on disk: passthru("cat $file"); For a file at a URL: passthru("wget -q -O - $url"); Assuming linx server. A more complicated method would be to connect tcp socket to the target api, write the request, and then loop on an $data=socket_read passing it to fwrite(STDOUT,$data) until no more data. This would work on any platform. 
For the site I'm looking at right now, I'm not, but I will keep these suggestions in mind when I go on to the other site I'm working on (which does accept user input).
I've mostly rolled my own solutions using librets, it's fairly straightforward as long as you know the server's metadata (it can fetch that too, but I prefer RETS Connector's metadata browser). Let me know if you're interested and I can shoot you some code samples.
A lot of people avoid switching away from mysql_ because they think it's hard or something complicated and new to learn. Learning to use PDO is trivial, takes only a few minutes, and removes a bunch of extra work you have to do using the older functions. Sticking to mysql_ instead of PDO is like trying to use flat files because you "don't need" a database. 
&gt; If you use mysql_real_escape_string() consistently and have the correct connection character set configured with mysql_set_charset(), then [...] you're safe. If only it were that easy! Here are a few cases where you can't use `mysql_real_escape_string()`: * user-defined sort: `"ORDER BY $colname $dir"` * varying table or column name: `"JOIN $table t ON t.$col=u.id"` * some numeric operators: `"WHERE price &gt; $price"` Of course you can write secure code with ext/mysql, but it's easier to do so with PDO. Yet prepared queries are not a silver bullet, there are many cases where you can't use them. Security is hard.
The file is the response of the API, which I access through an URL, so the passthru should work... gonna try that, Thanks!
PHP Acts as a middle man and the type of response is the actual file as a whole, so saving parts of it to disk might be a problem...
hahahaha you have no projects
Your MLS (or whoever runs the RETS server - Paragon, Fidelity, Solid Earth, etc.) should provide a User-Agent string if it's a requirement to connect. Most of the time I just use "RETSConnector/1.0" and it works fine. I deal with about 40 different MLS and there are only a couple where a custom User-Agent string is necessary. RETS Connector is indeed a Windows app. You wind up with flat files (or XML) and you import them to your database as you would with any other file. We're a SQL Server shop so I haven't had to integrate anything into mysql, but it would be similar to any other ETL task. I guess I'd load the file into a PHP array and foreach() over it, inserting one row at a time.
There are two main benefits of prepared statements: Performance for multiple queries that are identical in structure but different in data, and systematically reducing the likelihood that you'll fail to escape a value properly. The first benefit is a matter of both API and implementation behavior, while the second benefit is really just a matter of API. In other words, you get the second benefit just by having an API that takes care of appropriately escaping any values you feed it, regardless of whether the database is technically seeing it as a real prepared statement. I prefer using a database wrapper that I wrote to give the benefits of a high-level wrapper while allowing you to work much closer to the underlying APIs when you need to. The 99%-case methods are as simple as can be, with alternatives available for those rare exceptions: $result = $db-&gt;query('SELECT * FROM foo WHERE a=? AND b=?', 'bar', 7); // A standard query using prepared statement *syntax*. Since it executes immediately, we don't need to waste time conducting a real prepared statement, so the wrapper performs the escapes client-side instead and sends it as a regular query. $result = $db-&gt;queryUsingArray('SELECT * FROM foo WHERE a=? AND b=?', array ('bar', 7)); // The same thing, except all values are included in a single array parameter. This is useful if you're dynamically constructing the query, in which case you might not know in advance how many parameters there will be. $stmt = $db-&gt;prepare('SELECT * FROM foo WHERE a=? AND b=?'); $result = $stmt-&gt;query('bar', 7); $result = $stmt-&gt;queryUsingArray(array ('baz', 8)); // Create a real server-side prepared statement, or simulate one (with automatic client-side escaping) if the database driver doesn't support them. $result = $db-&gt;queryUnparsed('SELECT * FROM foo WHERE a='.$db-&gt;string('bar').' AND b='.$db-&gt;int(7)); // The query is sent without any placeholder substitution, so it expects the first parameter to be a complete query with values already escaped. For compatibility across drivers, it also has two optional parameters for the limit and offset, which, if provided, affect the final query or result set as appropriate for the driver. There are also single-method shortcuts for fetching a single row, a single column, or a single value, and they automatically apply the limit/offset to optimize execution. Also, it's possible for the values to cause modifications to the query structure (shown below), which the wrapper handles entirely behind-the-scenes. For example, if you make a real prepared statement, and then issue two queries that result in different query structures, it'll automatically detect that and set them up as two real prepared statements, both managed by the same stmt object. Or, if you're looking for as much performance as possible with prepared statements, you can "lock" your statement, which means it'll trust that your input should result in the same structure, and it won't bother with any extra logic. Examples of values that change the query structure: $db-&gt;query('SELECT * FROM foo WHERE a IN (?) AND b=?', array ('bar', 'baz'), 7); // Becomes the equivalent of $db-&gt;query('SELECT * FROM foo WHERE a IN (?, ?) AND b=?', 'bar', 'baz', 7); $db-&gt;query('INSERT INTO foo (a, b) VALUES ?', array (array ('bar', 7), array ('baz', 8))); // Becomes the equivalent of $db-&gt;query('INSERT INTO foo (a, b) VALUES (?, ?), (?, ?)', 'bar', 7, 'baz', 8); $db-&gt;query('SELECT * FROM foo LIMIT ? OFFSET ?', 10, 40); // Becomes the equivalent of $db-&gt;query('SELECT * FROM foo LIMIT 10 OFFSET 40'); in drivers that don't support placeholders for limit/offset or their equivalents. I'm very proud of my little database wrapper. :)
Cool Timer :) As a user, I can't imagine using laps in place of total time. If I'm doing laps, I want to see the total time as well. Pull Request here: https://github.com/jsanc623/PHPBenchTime/pull/1
There probably should have been a disclaimer in my first post about "assuming your other code isn't doing anything unusual". :) What you say is true, but PDO doesn't help you much in the first couple of cases either.
Here's your tutorial: 1. Open a connection 2. keep it open and receive data from it. This data is the incoming messages. 3. Once you need to send an outgoing message, close the connection and open a new one by making a POST request, containing your message. 4. Go to 2.
Can you just open the API as a stream? $fh = fopen('&lt;url&gt;', 'r'); while ($line = fgets($fh)) { echo $line; } fclose($fh);
How about your own blog engine?
Blog engine is pretty advanced for someone that's new to PHP. Especially if he's new to programming.
Go here: http://www.reddit.com/r/dailyprogrammer/ Try to do one of the easier challenges. Rinse and repeat.
This guy's blog is a goldmine, thank you.
Ok, I will check them out now.
I tried but it was a bit overwhelming so trying something more simple. 
I dunno about a "blog engine" but a basic single person blog.. no user login, just like a form where you can submit text that is posted to your database, and then another page that lists your posts. Dress it up with a little CSS, and start to tweak/add things... a date/timestamp... learn about SQL injection and how to avoid it... etc. I would say start with procedural programming to understand the basics.. then learn Object Oriented. If you already know some programming theory, go straight to OOP.
[Also try what _asciimov said about a blog engine.](http://www.reddit.com/r/PHP/comments/14as5i/new_to_php_wondering_what_are_some_good_simple/c7benwn)
Amazing article. Blog is amazing. You're amazing. Keep up the good work!
I use blogs as the archetypal place to start with a language on the web. Teaches you OOP, database usage, CRUD as the basics. As you get better you can learn about proper MVC, caching, reverse http proxies, maybe even a little javascript for prettying up the CRUD. Pretty much the only thing you don't learn making your own blog is interacting with APIs and ecomm like paypal
write a blog or forum system. itll show you working with db's - get all crud things done (create new posts, read posts, update posts and delete posts) let yourself upload an image, save it and display it in a post. learn mysql_ functions despite everyone telling you not to and understand how to avoid sql injections. writing mysql_real_escape_string should almost always be in your code if you are using mysql_ functions. also learn PDO and use that for any new sites/apps. but be aware of mysql_ funcs and their security issues cos you WILL end up using them when using some small tools or libraries. even wordpress uses it (as far as i know - i've not dived into the source code of the database part for a while now) set up a login system - teach yourself security + sessions + cookies work with an api - teach yourself curl use .htaccess to make pretty urls just do this as a private thing, don't make it public as itll be full of security issues if you are just starting out. but just going in the deep end and making something (even if it is botched together) is still IMO the best way to learn. when you get a bug fix it yourself, and understand why it now works. also learn a framework like codeignitor. it is really easy to pick up. writing a blog system or a forum with all those features is very easy with something like Code igniter. i think they have a full tutorial for writing a blog system. use something like grocery CRUD to manage large amounts of data, can be handy for internal (or basic public) tools
Do you know any good books to learn this stuff.
Pull a project off github that has at least 50 followers/stars, and tear apart the code to see what you learn from it. If it's really hard to grok then step through the execution in xdebug and see what's going on.
How in the world are we supposed to know that? This is a general PHP community, not a WeBid support desk. If you want support on a product, look it up with the company producing that product. It's absolutely nonsensical to ask product-related questions on a general PHP community website, let alone any place else unaffiliated with that product.
http://blog.pisyek.com/2011/03/create-a-simple-blog-using-codeigniter-2-0-part-1/ go through that. even if half makes no sense itll soon start to click
github
If you want private repositories (five users, plus up to three additional users, one for each invite), check out bitbucket. If you want public repositories, have a look at github.
"PHP client library" made me lol
Not sure if its the case here, but sometimes getting people's opinions/personal recomendations can be a bit more usefull than a straight Google search.
It's not expecting anyone to know everything. If you wrote the code, you should know what is valid as input. The extra security is just a side effect of not accepting garbage into your application, and you don't need to know anything about the specifics.
Try [PHP Academy](https://phpacademy.org/) - I've found some good stuff there, especially if you're just starting.
I'll look into that, thanks!
Even though I'm currently using curl, I don't see why this shouldn't work... I assume fopen doesn't have any problems with ports?
...and use the "memory table" type in MySQL to get the same memory benefits as memcached
Gitorious.org if its open source projects. It's free, and the site itself is open source as well.
Memcached, APC or pre-computed results stored in a MySQL memory table are the quick n easy options. Also, MySQL already has a built in query caching, so make sure this is enabled and has a relevant amount of memory assigned to it. Whatever solution you use, you could abstract the caching code so your application simply pushes and pulls from a generic "cache" class. It is then up to the cache class where it decides to store the cached results (and you can change it easily at any time). You could then try APC, memcached or flat file storage and benchmark which works the best for your application. However this might be overkill. I'd just put in into APC to start with and see how it works for you: if(apc_exists('mysql_result_1')) { $result = unserialize(apc_fetch('mysql_result_1')); } else { $result = getSomethingFromDatabase(); apc_store('mysql_result_1', serialize($result), 3600); // Store in memory for 1 hour } // $result will now contain the records, either from the db (first request), // or from memory (subsequent requests until the timeout expires) 
But only if it's public stuff
Beanstalk
Came here to post this, plans are pretty good, even for free users https://bitbucket.org/plans
That's a bad idea. Most basic issue -- you can't diff today's code with yesterday's, let alone last month's.
unfuddle is still free... https://unfuddle.com/signup_complete?plan=private
+1 Github
I use [Assembla](https://www.assembla.com/) for my Android SVN projects. They've unlimited free private repos but they try very hard to hide them. Free GIT as well.
Minneapolis, MN has a group for: PHP, drupal, Wordpress, and magento. 
OP's issue though is that the file is potentially larger than max ram allowed to PHP - thus reading it entirely into memory before outputing is a non-option. While I agree shelling out isn't the optimum, it's expedient and fits the requirements. 
Honestly, I'm not really doing that. I'm more looking for design patterns on a high level.
&gt;All plans are FREE for the first 30 days with no credit card required! Read the fine print ^
that's what she said
Read the gang of four
public repos only, might not be what he's after
I say let "good OOP" principles guide your design. I know it's trite advice but things like limiting dependencies automatically force certain design patterns. 
I'm pretty sure that fine print is for paid accounts. There is still an "always free 'Private' plan". https://unfuddle.com/signup The space is still really small though. I would still suggest bitbucket as others have.
TIL! Okay, readfile() is better than passthru("cat file"). Amazing that after all these years I'm still learning things about PHP. Thanks!
The PRIVATE plan is free, full stop. (what Mycal said)
Honestly.... pay $5 a month for a service or set something up locally. I'm tired of people who spend $5 on bullshit but can't pay $5 for a service they actually need and look for 'free' alternatives. It's $5, I think that's money well spend.
It sounds like your looking for design patterns, MVC is very big right now. http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller
Start off by learning the [SOLID](http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29) principles and how to apply them in practice. Next, proceed with learning various [design patterns](http://en.wikipedia.org/wiki/Software_design_pattern). [Martin Fowler](http://martinfowler.com/eaaCatalog/) has a ton of them. Then proceed with learning things in the web context. [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller), when applied to the web works a bit different from MVC in an application context. Then you might want to familiarize yourself with MVVM, table gateways, data mappers etc. as well as looking how they fit together in a modern MVC framework. 
Well, bitbucket did redesign their UI recently. Though, I agree, github's design is nicer, even after bitbucket's updated design (that's not to say that the redesign isn't good, though. Github's just had a lot more time to polish theirs). Feature-wise, bitbucket's a lot more impressive.
I'll check them out thanks.
your local git repo would just reside somewhere within your dropbox folder
&gt;I found a great walkthrough Boy, how much I hope people would stop searching for tutorials on the web and potentially picking up a shit-ton of bad habits. If only they would go to the [official source](http://php.net) and look in the [manual](http://php.net/manual/en/), where pretty much everything is covered, including a [tutorial](http://php.net/manual/en/tutorial.php) for newbies. &gt;what causes this and how can I fix it? If the PHP code is being printed out on the page, then your server is misconfigured and the PHP preprocessor is never invoked. 
It doesn't print out on the page. It turns all of my php script into html comments in the source code.
If that fixed it can you update the main post so other people can learn?
Is your file this in a .html/.htm extension? I think you need to enable the PHP extensions on .htm and .html in your apache config or change the file extension to .php. I think my test/dev server without any customization doesn't parse PHP in HTML since I am too lazy to change this.
&gt;It doesn't print out on the page. Prints out, as in output, not what's actually rendered on your screen. Right-click &gt; View Page Source &gt;It turns all of my php script into html comments in the source code. It's not HTML comments. HTML comments look like this: &lt;!-- something here --&gt; PHP's tags look like this: &lt;?php something here ?&gt; Now, since the PHP preprocessor isn't invoked, the code will never run and will be printed out as-is. Because it is wrapped in &lt; and &gt; the browser will incorrectly interpret it as a tag. 
Just linked to an album with all files
I started using bitbucket and haven't gone back to github since.
[source code](http://imgur.com/OwzMG) They appear as html comments like I said.
just trying to think of things that may be going wrong here, are you really using all caps in the file extension? if so, possibly try changing it to lowercase
No. PHP is simply not invoked. Again, your server's misconfigured. 
That's what I thought you mean, I guess it would work, but it seems rather backwards, I mean, why not just have a remote git repo?
Since you were at a competition, I assume that you weren't at a complete beginner level.
oh i completely agree with you that it's backwards and a remote repo would be better. i only got into this because lpetrazickis said you couldn't do diffs if it was in dropbox. 
Absolutely. I will go straight to the PHP manual upon your recommendation. In fact, any time I am looking for true guidance to something new, I don't know why I haven't resorted to the respective subreddit more often. Thanks again for the assistance and advice.
I would recommend [Patterns of Enterprise Application Architecture](http://martinfowler.com/books/eaa.html) by Martin Fowler. At the enterprise and pattern level, the language that your systems are implemented in begins to have less significance than their ability to effectively send and receive information. This book covers a ton of patterns, and Martin Fowler really knows his stuff. A downside is that the examples are mostly in Java and C#.
get to know an API. Request data (CURL/file_get_contents/etc) and learn to loop through, sort and re-sort arrays. Getting data (xml/json) and then processing it is good to learn for a multitude of future usages.
Just install git locally, it doesn't need to be hosted. You can use git in any directory. Or get a [vps](http://chunkhost.com/r/savethisguysomemoney ) (*yes that is an affiliate link because i have no fucking shame*). You can use git and use it as a development server. You can also tunnel through it to keep your isp from inspecting your traffic. 
I would fire you for being a big meanie.
oh, then he is fired then. carry on
Bitbucket for private repos, github for public. It's actually a really valuable resume booster to have at least a few public repos on github that are filled with well documented and clean code. Of course, there are projects that you don't want anyone to have access to, in those cases just use a private repo on bitbucket. The best part? Both services are completely free.
For the most part, I wasn't trolling. No, I would never really put sensitive information out there on github to "hide in plain sight" -- that part was poorly-executed sarcasm, I guess. I don't know, I got the impression that OP was talking about a personal project, not a business idea. If it is a real business idea, then maybe he should re-evaluate "free" as a requirement.
I do agree on those points but it's the same argument for any extension. You put your faith in the team behind the extension and hope that their code is bug free and when there is a bug they fix it. If I'm going to be using redis with PHP I'm going to use the native C extension and I'm sure most people would do the same. Let's remember PHP is built on C, it's an open source project and at time contains bugs itself. I think that Phalcon is a good alternative but not the answer to all problems, it's definitely an interesting project and worth a look.
Wrong, just that private repos have a cost.
http://www.webidsupport.com/forums/content.php?6-get_support Fuck, that was hard, wasn't it?
Doctrine 2.0 is good for this :-)
You don't have PHP installed/configured on your server would be my guess. Perhaps you aren't really going through WAMP. edit: If you want some live help, try ##php on freenode (yeah that's right IRC). usually we figure stuff out faster being live and all.
title stipulates free, github only has public for free, so feenikz is right to say "only if it's public stuff" re: github being ree.
Also works seamlessly with [SourceTree](http://www.sourcetreeapp.com/) (unsurprisingly since both are by Atlassian) which is one of the finest Git desktop apps out there. If you're into that sort of thing
What's wrong with using a public repository for a non-commercial personal project? 
Nothing, and no-one's said that there's anything wrong with it either. This is what makes your advice bad: &gt;If it's a "personal" project, then why not share your source? **Nobody is going to look at it anyway.** &gt;If it's your new **super-secret business idea (which I would say is not a "personal" project), then, still, nobody is going to look at it.** &gt;**If you really don't want anyone finding out what a terrible programmer you are, there's bitbucket.org**, which is still free and very usable.
Yeah, I was being somewhat absurd and sarcastic. But seriously, parse each statement individually: &gt; If it's a "personal" project, then why not share your source? Nobody is going to look at it anyway. What's wrong with suggesting sharing the source to a personal project? And it's quite likely that the number of people who look at your little personal project will be near-zero. And you're sharing anyway, so if it's not near zero, great! &gt; If it's your new super-secret business idea (which I would say is not a "personal" project), then, still, nobody is going to look at it. Probably true. I said "super-secret" to imply that anyone looking for free hosting is probably so un-serious that they risk almost nothing by sticking their shitty code out in the open. My theory is that most people who want free private hosting are afraid someone will make fun of their shitty code: &gt; If you really don't want anyone finding out what a terrible programmer you are, there's bitbucket.org, which is still free and very usable. Which is completely true. If you have an irrational fear of some strangers on the internet critiquing your shitty code, there's bitbucket. -- I guess I don't really see the point in "free private repositories". If I found out one of my developers was hosting proprietary code in (free) bitbucket I would fire them -- they might as well have just stuck it on GitHub with some non-obvious name. Without some money changing hands, the nice folks at Atlassian have very few obligations to you. I haven't read the agreement you surely have to agree to to use the free service, but I'll be it lets them off the hook whatever happens. To my mind, there's code that you might as well make public, and there's code that you either host/secure yourself, or pay a vendor to host. I don't see a real valid use-case for free private repos. 
There are no SQL Schemas there, stop trolling, this is a serious inquiry.
I had no idea that existed. Fantastic!
&gt; My apologies if this method of calling controllers is absurd It is. You're going down a dark dark path, here.
I'm sorry I'm not really sure what you are trying to do. But the CodeIgniter cURL library is just a wrapper around PHP's "built in" cURL functionality. Take a look at http://php.net/curl Also if you are worried about using routes after index.php i.e. something like this http://localhost/index.php/controller/ Assuming you are running apache typically an htaccess file is used to clean the URL up so it looks more like this: http://localhost/controller/
Jesus christ, what an idiot you are. If you want support, go *there*, not here. I don't see any post of yours there, so clearly you haven't even tried. How about you take your own username's advice and start adapting to reason?
yes that's was i meant 
If I'm feeling exhausted on a project I'm working on, I like heading over to StackOverflow or another forum and helping people out. It's a nice break from the usual grind and I seem to always learn a thing or two while I'm trying to give the best answer possible. I sometimes even like to set goals for myself, like answering (x) amount of answers before I get back to work, or gaining (x) amount of reputation.
Answering on SO is no fun, as it's a race to answer first and there's so much competition. Don't get me wrong, I think it's a brilliant way of getting people's questions answered, but when you have to race to finish your keystrokes before someone else jumps in (especially in the popular PHP and CSS sections) what's the point?
I suggest looking beyond the edge of the plate. I've started with php long ago and still do php projects sometimes, but learning doing web apps in python, node.js and learning some ruby gave me lots of ideas even how to do better php programming.
I have an include file that I always use with hilariously named functions. Typing "ShitBlewUp" or "WaddaFuckIsGoinOn" is way better. function ShitBlewUp($error_msg){ die($error_msg); } Hi all, it seems that on this particular subreddit, nobody has a sense of humour. Have fun with your boring lives, bye! :)
I definitely agree. It's good to learn other languages. Not only is it good to be knowledgable about new/trending languages, but you'll often learn a ton of information and methodologies that are applicable to the other languages you know.
Is the &gt;|-- index.php &lt;-- call controller using URI segment a way for the user to "skin" or "template" the site? If so, then really this needs to be done within the MVC framework because of the design. You can make it trivial to expose content so users can template just by adding tags like &lt;?=$content?&gt;. Edit: Oh yeah, you should really NEVER NEVER NEVER use CURL to access something when you have access to the code. It'll take a while to understand how the components of an application like this fit together, but once you get it you'll be a much stronger PHP coder!
Try some Python / Django, or use Redis instead of MySql, or move to more client-side apps with tools like AngularJS or Backbone etc. Or just take a break from webdev :)
I love my profession. It pays well, and has occasional challenges, but it's monotonous. I don't get the same joy anymore as so many problems have already been solved by others.
What sort of programming do you enjoy? I like fractals, interaction, and problems that make me think. Try something completely different like haskell to get your mind thinking differently. Try starting a fun coding project in your spare time. Use a different text editor, different operating system. I'm implementing a small programming language that compiles to c++, its written in python and uses haskelly syntax- it is fun even if the product will only probably ever be used by me. Don't be constrained to one language, php is just a tool- there are other things out there as well that are also good and I would argue some are more fun. Protip: Buy a case of beer and try to program something odd in another language while listening to the most intense music you can find. Cheers.
Well this may sound both trivial and hard-to-follow advice, but I think it should be considered: If you stop liking something, stop doing it. At least for a while.
I can empathise with you. From a young age I knew I wanted to write software for a living, so I spent my whole education working towards this career. Coded in lots of languages (especially the ones where I could get my hands dirty deep in tech - assembly, 68k, pure c etc). After working as a dev/dba for 10 years, it began to suck the life out of me. Nothing was a challenge, I was the most knowledgable dev on my team (without wanting to sound arrogant) and most of the work was the same boring boilerplate features with database or web. One day I remember looking out the office window at grey skyscrapers and just thought 'Jesus, is this all there is?' Eventually I started a web business on the side, went part time and ultimately left to become self employed. This was the best thing I ever did. 7 years later Im still running my web based business, still coding on a daily basis, but I find it very fulfilling. The business side of things brings a whole new set of challenges which are interesting, and writing code which you know will benefit YOU is much more satisfying than grinding away for some company or client. So yea, my advice is to certainly give this option some thought. If you know you're not happy, the worst thing you can do is nothing. This article was when the penny dropped for me. Its well worth a read... http://www.stevepavlina.com/blog/2006/07/10-reasons-you-should-never-get-a-job/ Good luck!
Epic.
http://codepad.org
That's exactly the point I'm making. The frameworks have done everything for me. I'm just using abstraction layers to retrieve data from the correct place and display it in different ways. And if the framework can't do it, there is some library that allows me to do it in a few lines as they've done all the hard work. There are hardly any challenges now that someone hasn't already solved in PHP.
Thank you for that :)
Agreed, the availability of toolsets for most projects is overwhelming to a fault. I see that you've tried a myriad of languages and databases, otherwise I'd suggest Python (my favorite toy at the moment). Here's some suggestions. Some of which I do to keep things interesting: * Become a regular contributor to a framework or project you believe in * Toy around with writing a pure PHP 5.4 framework, make it just for fun, not for a project * Really try your hat a something completely new. Write an entire app in node.js with a Redis backend, for example. * Read and research everything you can. I know that Hacker News can be a circle jerk, but sometimes there are gems like this article: http://kennethreitz.org/on-heroku-and-2012.html Speaking of that article above, he wrote the very popular and awesome Requests module for Python. It simply was made to fill a need and turned into a huge project. My point is, sometimes the simplest thing can turn into an amazing thing for other people. Sometimes the greatest joy comes from forcing your self to move outside your comfort zone. A personal example, I was using an automated deployment system to pull revisions from a git repository and push them out to X number of servers. It was unreliable and became an issue very quickly. In one day I slapped together a python module that connects to Rackspace Cloud API, locates the machines running my application layer, checks their local git revision against the main repository, pulls down changes as needed, and reboots nginx/php5-fpm and other services. It's a simple module that turned into a critical part of my toolchain, and was a blast to write. I've been working for the same place for almost 12 years, programming everything from Visual FoxPro, Javascript, PHP, Python, HTML/CSS, SASS, the list goes on. I keep things fresh by getting deeply involved in the process of our business, and by finding ways to make projects fun.
Sounds like your bored with coding in general. Maybe you should take up robotics. Will allow you to code when you want and build with your hands when you don't.
Awesome. Thanks.
No worries! And thanks. :D
We don't all have the opportunity to be goat herders or something for a whole year
Why not run XAMPP from the computer or even a USB drive. http://www.apachefriends.org/en/xampp.html
Learn some fronted design and ii principles. Learn to think like a user that will interact with your product. Learn some UX principles. A coder who knows design is a grand thing to have on payroll. Especially if he can effectively communicate with the designer. 
phpfiddle.org, although I like codepad.org and koding.com better. [edit: wrong domain]
If you are bored with programming you could try to get a little bit into management (project lead on something bigger or sth similar ).
i would advise against that, could be against the rules in your work place or have a HIPS sitting on your workstation ready to tattle on you whilest blocking your applications from running properly. Better to go with the remote options.
I have picked up mobile development (mostly Android) to get out of the web world for a little bit. It's a nice change to get into strictly typed stuff, but there are times when I just want to make a huge nasty array with whatever-the-hell types I want in there :P.
Protip: **you do not need a webserver to use PHP**. You can download and install PHP locally, and then run scripts from the command line without issue. Let's say you have a test PHP page at `c:\php\test.php`. Just open up a command prompt and type: C:\Users\Me&gt; php c:\php\test.php But the online sites are cool if you don't/can't install PHP... here's another one, it offers several different versions of PHP: http://codepad.viper-7.com/
Oops. should be phpfiddle.org - sorry 
I second that, the added xdebug support is a great improvement
In that case you may be interested in [Lisphp](https://github.com/lisphp/lisphp).
Agreed. That's where he lost me.
Maybe a little out of topic but, I created this week a [Password-Less Authentication bundle](http://bundles.laravel.com/bundle/plauth). No need for username and password, the user type his email address and will get a link in his mailbox that will authenticate him. For some projects, it can save a lot of time ;) 
Learn haskell, no, like *really* learn it. (is difficult &gt;_&lt;)
Should put that in your top comment! And interestingly, the phpfiddle.com is showing a different parking page than it was before (autocomplete took me there on accident)...
Also, XML is clunky as hell.
[Cloud9 IDE](http://c9.io/)
Im using Laravel's Hash::make() which is as you suggest: public static function make($value, $rounds = 8) { $work = str_pad($rounds, 2, '0', STR_PAD_LEFT); // Bcrypt expects the salt to be 22 base64 encoded characters including // dots and slashes. We will get rid of the plus signs included in the // base64 data and replace them with dots. if (function_exists('openssl_random_pseudo_bytes')) { $salt = openssl_random_pseudo_bytes(16); } else { $salt = Str::random(40); } $salt = substr(strtr(base64_encode($salt), '+', '.'), 0 , 22); return crypt($value, '$2a$'.$work.'$'.$salt); } Im still not sure how to make sure collision doesnt happen without sending id along. But is it an issue? What's the security issue related to providing the user his id?
Makes sense. Oh, also is the following syntax actually valid to enforce a specific type of object being passed in? function ( Classname $var ) I've never seen it before.
Yes, [type hinting](http://nl1.php.net/manual/en/language.oop5.typehinting.php) has been possible for a while now. I don't see a whole lot of people using it though.
http://en.wikipedia.org/wiki/Pig_Latin
In the code you put in the original post, you seem to be hashing the time() and some randomness. This is a bad idea. Laravel makes a somewhat random string out of it, but that's because it's made for passwords and salts them for you. What you want is some kind of unguessable token. The "meaty bit" of that resetkey should be a cryptographically secure set of random bytes, if at all possible. The way that Laravel prepares salt could work as that meaty bit. If you want to avoid collisions, you can then further add the user ID and/or time in front of it. But you definitely shouldn't be relying on those two for security. The time and user ID tend to be fairly public knowledge. If you use `md5(rand(1,999) . $user-&gt;id . time())` as your token, I'd only need your user ID, the current server time and at most 999 attempts to brute force the randomness. Here's how I'd do it: $token = bin2hex(openssl_random_pseudo_bytes(20)); $resetkey = $user-&gt;id . '-' . $token; You'll then get something like `1-00112233445566778899aabbccddeeff`. This is an unguessable collisionproof string. The chance of two users getting the same $token is virtually nonexistent (20 bytes containing 8 bits each amounts to 2^160^) and even if it happens, nothing will break because your actual $resetkey also includes the user ID.
Write your own frameworks, and tools in PHP that make your development life easier, I have been working in PHP for about a decade as well, and your boilerplate CRM or CMS makes me want to blow my brains out at this point. Making my own toolset is all that keeps me going these days.
Holy crap, that is one [flaky code-base](https://github.com/IgniteIO/Ignite/blob/master/application/controllers/api/code.php#L103).
Fun fact: function foo() { call_user_func("foo"); } foo(); will crash it. No biggie, I just find it interesting to mess around with these sandboxes.
As an owner of a development company. I would promote you.
&gt; I haven't been attacking the other person, I've been attacking the argument that one should put sensitive info on the web for all to see in the hopes that they won't. If you do that, then you really are a terrible consultant, just as I said. I'm not a fucking consultant, nor would I ever be. That's a joke of job and profession. It's an excuse for people that can't actually do the profession but still want to work in it. Also I'm not arguing against that but you keep thinking I do. So I guess you won't take no for an answer. &gt; And you call me retarded? Listen, if you can't follow the conversation and what has been said in it, then don't get involved. You bring up completely unrelated shit and then when I obviously call you out on it, you tell me I can't follow the conversation... Maybe "retard" is a bit heavy, but you sure are ignorant. &gt; I'm the one insulting you? You're the one calling people 'retard'. 3 times not including the above... Unless you consider these compliments? &gt; * Then you both are awful consultants if you think that it's a good idea to publicly expose sensitive material, justifying it with "people probably won't find out". * Good grief, if I was your boss or a client of yours, I would've fired you on the spot. Also, you'd get your ass sued for violating the NDA. * Are you incapable of reading? &gt; The conversation was about placing non-personal classified information in a public repository accessible by anybody in the hopes that no-one would stumble across it. Never was it said the material was "classified". Not once until this statement. Also just to annoy you, statistically no one would actually stumble across it that could do any real damage of it, so if you really want I will start to argue about this with you. Sure it's an obviously stupid idea, but statistically you're more likely to get struck by lightning. &gt; And again, seeing as it's non-personal, had you done such a thing with me as your boss, or me as your client, you would have been fired. And had you done such a thing, you would have been in violation of an NDA, as it is standard practice to sign such legal contracts in consulting firms. Never have I said that you are in violation of an NDA. Again, this was an IF scenario, which I even had made myself pretty darn clear about. Yet somehow you didn't catch any of that, so once again I have to ask: Can you read? If you can't bother being part of the conversation, then don't comment in it. Ok now I see where you are bring up your NDA shit. Congratulations, I know what an NDA is. But guess what, I'll also argue this and say it's fucking worthless to use an NDA if you have actual secret information that is worth something to other businesses or countries. You encrypt your secret ideas if you're not a total moron. But then again I wasn't ever actually talking about any classified material or anything similar, I was talking about private code, as in programming. I will easily trump you in programming, security, and business if you really want to keep trying to say that I'm making ridiculous points.
But how does this make message appear in realtime?
I hope 404 is a passing grade.
Except nodejs is cancer. :)
Best Git GUI client I have found is SmartGIT - free for non-commercial use, Java based (don't let that put you off - well executed) and thus works on Windows/Linux/Mac. Well worth checking out, I used to use it a lot before getting to love the CLI so much more - but I do use it sometimes to help visualise branches/logs/etc.
I wouldn't really recommend using phps type hinting feature, since if an invalid object is passed to the constructor there is no way to check it and throw an exception, it just fatals. I didn't really care for this article. 
day job. programming is just my hobby.
I started with PHP in 1996, and have done other stuff along the way (and had been programming professionally for a few years before taht). To "keep it fresh", I had to leave PHP for a while. Not entirely, but I started doing new projects in Grails (and a couple small ones in Rails and C#/ASP.NET). For reference, I started seriously pursuing non-PHP tech in 2007/2008. However, I had to force myself to go beyond the 'hello world' examples, and start doing "real" projects (paid) in other platforms. It was part fun, part exhausting, part crappy, and part boring. It brought home just how repetitive so much of programming/development IS, in any platform, once you get beyond the "shiny new fun" syndrome. However, it also made me re-appreciate (repreciate?) PHP again. There's things I still don't like about it, but other things I enjoy more in PHP now vs other platforms. There's no real cure for burnout at all - time away, ideally doing other things, is the only salve I've found, and it's the only real thing I've known work for other people going through similar issues. Since most of us still end up staying in development, switching platforms as much as you can helps you focus your attention on some new things, even if it's just new syntax for the same problems you've already solved before. I will say that moving to something like Grails was, for me, useful because there is significantly *less* code you end up writing and configuring for a lot of boilerplate stuff in PHP; GORM as an ORM is downright fun to use for probably 80% of the queries I need to run. Trying to find PHP counterparts for fun/useful tech in other platforms sometimes becomes an exercise in frustration, but it makes you appreciate the good points about PHP when you use it again.
That was the one thing I really^really^really disagreed with in that post. Oh well
You seem to have quite a bit of experience and knowledge. Write a blog? Do a podcast? I'm always looking for highly technical stuff to listen to.
I'm both a seasoned PHP dev and someone who has worked with Node. The "node is cancer" refrain bugs me. Node is simply another tool. Take it or leave it, but quit berating it simply because it's not to your tastes. Personally and professionally, I've gotten a lot out of Node. I've read [Ted's year-old post](http://pages.citebite.com/b2x0j8q1megb) plenty of times and it just sounds like butthurt answering other butthurt. Even he now admits most of his posts were trolling. &gt; [I made a name for myself first by trolling the Web 2.0 scene with my first blog, Uncov, and then later by trolling the web developer community with my personal web site.](http://teddziuba.com/post/24585610978/starting-over) Elitism and dogma are cancers. There's enough butthurt in this industry. Let's go make stuff instead. [Sorry if any of that comes off harshly, but that's the third time today I've seen someone repeat the "cancer" refrain. Is this how we celebrate the birthday of the post or something?]
I should point out that PHP has a built-in webserver now (in PHP 5.4). $ cd ~/public_html $ php -S localhost:8000 http://php.net/manual/en/features.commandline.webserver.php
The tl;dr version: instead of instantiating objects inside other objects, you pass the object in either via the constructor, or another method and store it as an attribute. Then later if you need to replace the object with something else, it's still possible. The main reasons people do this are: * flexability - it's useful in cases where you might have several different objects with the same/similar interfaces, but different functionality * testing - if you need to mock an object in order to isolate a class/object, it's possible I'm not certain why you need to write a book about that.
It does the job, a rewrite is in progress.
I see the words "open PHP codebase" but I don't see a link to GitHub, nor can I find it there. Where is the code hosted?
it sounds like it will be an enterprise cms.
Using Node to build an entire app, no thank you. Using node to drive the data source behind one of my web application, why thank you yes, I think I will.
hi crashthumble. yeager cms is running websites of several banks and is subject of yearly security audits. it's code is fully mvc and we offer an extensive documentation in the closed beta site. cheers 
The exact error is "Parse error: syntax error, unexpected $end in /opt/www/html/app/View/Layouts/default.ctp on line 197" when I go to "http://x.x.x.x/index.php". I can successfully get to phpinfo.php and get all the info. I looked through all the files using "cd /opt/www/html ; find . -type f -exec grep "/var/www" {} /dev/null \;" and the only file that came up was "./lib/Cake/Test/Case/Console/ShellDispatcherTest.php" but it references "/var/www/htdocs". I've also looked for hardcoded hostnames and fixed all of thoses. thanks 
The proper close tag for "&lt;?php" is "?&gt;" -- not "&gt;". Perhaps that's your problem? Note: Zend's official recommendation is actually to [not use a close tag](http://stackoverflow.com/questions/3219383/why-do-some-scripts-omit-the-closing-php-tag) at the very end of a file, but that bugs some pedantic coders. 
sorry, was typing this from memory of the links and didn't actually look at what was actually being used. Sorry. Yes, everything is using the correct syntax of "&lt;?php ... ?&gt;", my fault of not being clear. thanks,
What's the code in default.ctp? It an unexpected end could be a control statement that isn't terminated as well.
Have you tried to do: php -l file.php From the command line? It'll check for syntax errors. Also, make sure the php.ini files match as closely as possible. 
In my experience an "unexpected end" error usually means the upload was corrupted and the file is cut at some point, and then it will be missing a closing curly bracket because of that. Maybe post the whole code of the file as you have it on the production server? (not off your IDE, download the file from the production server and post the code).
As I mentioned in another commend - he can just do php -l file.php from the command line to run a syntax check
1. Are the PHP versions the same? 2. Have you tried uploading the file again? Maybe something went wrong during uploading. 3. What are the last ~10 lines of the broken ctp file?
Your shell command wont check .ctp files (which from the title is the one that is broken).
thanks, was not aware that this was a PHP type file that would validate. I checked and this one file had errors, on both sides. it looks like a couple of embedded lines had php code that used the old shorthand style. thanks,
As far as I made it into the installer: http://i.imgur.com/NuG6u.png
Actually, no it doesn't. It's what can happen when you thrust on someone something that they have no training/experience in. I've never done any LAMP administration before and had this handed to me late last week. This entire problem boiled down to having code that worked on one server not working on another and making an assumption the code was not the issue but my setup/config. I assumed I did something wrong as this was the first time I had set up a LAMP environment. thank you for you input however.
&gt; I just get exhausted writing the same code over and over again. 1. Maintain a nice code base that you can refer to with new projects so that you dont have to write code again. Projects should be a unique extension of a framework or pre-written system. For example, I use Symfony2 and maintain an installation that has working users, and a custom built theming system. &gt;I've read pretty much every article there is about design patterns, dependency injection, TDD etc. and now I'm just bored. 2. Sounds like you have PHP down. Why not explore another language like javascript? I was thrilled when I first started working with PHP and MySql, as I was completely taken away by the possibilities. Then I wanted to make cooler looking / more functional websites so I got into javascript which opened a whole new set of doors. 3. Maybe you just need a private project that you can work on. I am always trying to think of these "get rich quick schemes", and then in my free time I work on them. After a couple years, if none of your ideas take off then you are still ahead by having a resume filled with working projects.
simple rsync is good too.
It's the best.. I've used almost every single free version control and bitbucket is the best.. 
I believe the way that Rails solves this problem is that it includes the hash of the CSS file in the query string when requesting it in the "&lt;link rel..." tag. This way, when your server receives a request for the CSS file, you can calculate the hash of the CSS file on your server, and compare it to the hash that the client sent to you in the query string. If they're the same, send a 304.
The problem I'm having though, is that when I send the 304 the browser doesn't load the CSS from the cache.
Why would you want to minify on the fly? Yes, it's a good idea to do, but do it one time, add a timestamp (or some sort of hash) onto the end of the filename as an identifier, and just keep using that file until you update the css. Minify on the fly is going to be a performance hit for you.
If you're using Apache, just install [mod_pagespeed](https://developers.google.com/speed/pagespeed/mod) and enabled the combine and minify options for CSS and Javascript. This module will handle everything for you including caching and sending expires headers to the browser so they only request these assets once. This is much faster and simpler than managing this process using PHP.
I have previously run into this issue on a production box (1) whose disk was a mounted NFS and (2) which was running APC. Occasionally after uploading fresh files to be served, I'd get impossible errors complaining about lines or variables that simply did not exist. To fix it, I would have to reboot Apache after uploading new files. To fix it permanently, I had to stop using the mounted NFS + APC combo.
While I agree with this broadly, I would add that if your site has low traffic and isn't going to handle a ton of visitors, the performance hit from on-the-fly minification will probably be less than the perceived page load speedup that your visitors will get from only downloading 2 gzipped minified asset files vs. a bunch of individual CSS and JS files (if you have a lot). I would go with the mod_pagespeed approach indicated below if you can, otherwise it's situational. If you're serving up a lot of individual JS and CSS files, then your approach may be a net win, even if it's not perfect.
I think [Assetic](https://github.com/kriswallsmith/assetic) can help you solve both this and your original problem.
We do performance marketing. Our sites (over 15,000 of them) drive traffic to our call centers. People come to the site once looking for a number to call and order a product. Hence, they are mostly all new visitors and rarely come back.
I was about to suggest this.
Everyday is a day to learn something new
It's a bad ideea to minify on the fly. The overhead would be too much. Instead try to make a script that minifies assets on git commits for example.
That's a lot of domain overhead
&gt; By collision i mean when 2 persons gets the same reset-key- Not gonna happen. Ain't no way. Not in a 448 bit output. Anyway, this shouldn't even be a problem, just store the token along with the username that generated it.
Yeah, it's running, and inserting, so you have permissions and there are no syntax errors. Maybe there's white space at the end. Try removing the last ?&gt;. If that doesnt fix it, try tacking on an exit(0) . Lastly, turn the error_reporting way up and set the error log to something nearby. 
didn't change much, but I did have a superfluous line break after ?&gt; now the end says &gt;fclose($fp); &gt;exit(0); I tried turning CLI PHP errors logging on but the file doesn't get created so I must have another issue there. But did you mean the Apache logging or the CLI PHP logging? Edit: just set the Apache error log to debug and restarted it, did not give more info so I'm gonna try to fix whatever issus the php error logging has.
I mean something like this: error_reporting(E_ALL); ini_set('display_errors','On'); ini_set('error_log','my_file.log'); I'm cut and pasting from the php site because I'm on my kids iPad but put that towards the top. Piping output through a php file can be frustrating.
If that doesn't solve it, try turning your errors off because a notice or warning might be triggering that output. Error_reporting(0) or E_NONE. Good luck, post if you solve it.
No stress, thanks for trying. I think I learned something anyway.
Apache *still* has to parse .shtml files, or anything you've marked as server-parsed in your .htaccess/httpd.conf. The difference would be *so* negligible. You're looking for optimisation in the wrong place. If you want speed, look in to full page and resource caching using mod_expires.
Thanks, I am mainly just looking to fully eliminate SSI so I can solely use PHP for simplicity's (and extensibility's) sake. If I can get rid of SSI altogether, all the better.
I'm probably going to just use PHP, the scale for this website does not require such blistering optimization. That said, can I now just turn off SSI altogether on my Apache configuration? Is there some module I could just turn off (or something in my httpd.conf I could change), I am still quite new to Apache and webdev in general :)
Depends on scale, SSI takes a lot less resources. Even better would be to drop Apache and use nginx
If you program a framework and you don't want to limit your userbase to only using one database driver...
it waits for input, if i press enter success pops up. Edit: just put in a bunch of echo statements in the script, it stoppes between the regex and foreach lines. but this could be because I'm not sending any data while or?
If you're truly concerned about the PHP causing a performance hit (which, given your description, you will *never* notice it) then you can set up a system that takes the PHP rendered pages, caches them as static files, and serves that up.
It would take a lot more than 1M hits a day for this to be non-negligible performance wise. I wouldn't even think twice, just go with PHP especially if the change makes it easier to maintain the site. Note that you may want to run APC opcode cacher or a similar extension (Zend etc), so that the compiled PHP opcodes are being cached, but Id recommend that for every PHP site anyway. 
I think that is the first positive comment I have heard about Magento in a couple years.
Hmmm.. The [only other commenter's acount](http://www.reddit.com/user/squirrels9) is as old as the [OPs](http://www.reddit.com/user/joelNep), plus he's only been commenting on OPs posts and complimenting him. Sorry, I'm not buying it. 
That's a really good idea, shame the PHP-SSI speed difference is non-noticeable :P
If it's static text, then just using php's [readfile](http://au1.php.net/manual/en/function.readfile.php) might be quicker. Constructing full files, saving them, and then serving them as a cached result is also a route to go if you really need to cut down page construction times.
I've started with argument processing because I've never been a big fan of get_opt. I've got some ideas of my own (easy column/table output and color output to name a couple), but I'd like hear about other things you find tricky and/or boring when writing CLI scripts in PHP. Pull requests, issues and other suggestions are welcome.
Maybe build some cool helpers for the Symfony Console component instead? That component already has a really nice base for building CLI apps.
Yii is not OOP.
I would like to see some ncurses magic for *colors*!!, input handling, console widgets. For example, if I want to show progress downloading a file, I want to see a cool progress bar with % being updated and a twirly animation via: \ | / - \ | / - in place. I want to make some cool console scripts in PHP that are much more lively. Be able to write apps like "vim" or "mutt" or "irssi" by having components like windows. What do you say?
[Cursor control](http://msdn.microsoft.com/en-us/library/windows/desktop/ms682010\(v=vs.85\).aspx) in a windows console.
Please explain your comment. While I've never used Yii, I have (and just did) looked at the code and it most definitely is OOP - multiple level of inheritance, abstract classes and interfaces, getters/setters, etc. And the code is very well documented. 
Fabien Potencier is probably one of the most prolific and talented programmers currently creating quality PHP. Definitely study his work. 
Are you sadistic! So. Many. Configuration. Files. 
I've been thinking of a way to implement little animations and loading bars etc so it's good to know at least one other person would like to see them. I've not really worked with ncurses much. I have a feeling it would be a big enough piece of work to warrant its own library, but it couldn't hurt to investigate. Thanks!
You don't seem to be the only one with that request so I'll make sure I look into that. The other requester is using the Windows console; are you the same?
Although it doesn't support Windows (that I know of; if you'd like to try running the tests on a windows machine for me that would be great), you're not the only one with such a request so I'll make sure I look into it.
Nope, I'm a linux man, I just think the support for it currently is exceptionally poor compared to many other languages.
This is a nice piece of code. Very well documented, clean interface. The only thing i'm missing are the tests :) And if you would have written them you might have figured out by yourself, that you should make the Zend_Http_Client in your Geocode_Google_Adapter injectable.
My hobby : Web Designer, PHP/MySQL programmer, CodeCharge Studio projects developer. Over 18 years of web design experience. I have created several CMS (Content Management Systems). www.visionto.nl is my personal hobby site. ( Facebook:https://www.facebook.com/Visionto.nl ) I'm available for web ccs projects (codecharge studio ) worldwide, contact me at any time. I always have new ideas and solutions. You can communicate with me in: English, Dutch.Contact Form. CMS (Content Management Systems). Web Design Custom Web Applications PHP, MySQL Programming CodeCharge Studio Projects CodeCharge Studio Professional Support Multilanguage Content Solutions Webshop Availability Calendar Management Usability and accessibility Standard compliant code GUI interface design
It does actually have ANSI colour output, as it happens. I just haven't had a chance to document it yet. Have a look at \Phargs\Screen. A logger is a good idea; cheers :)
The Parser class. Also, you really need to start phpdoc'ing your stuff.
This tutorial is fantastic! Huge thanks. Frameworks are fine - my post more meant I wanted to see/understand some lower level concepts, and this stuff fits the bill perfectly.
What if you swap lines 5 and 6 in index.php? Is the method named the same as the class (not Bar but Foo, in this case)? I think it could be that it's the instantiation and not the importing that's the problem. Methods with the same name as the class acts as constructors in non-namespaced classes: http://php.net/manual/en/language.oop5.decon.php
Instead of public function __construct($adapter) { $this-&gt;_geocodeAdapter = Geocode_GeocodeAdapterFactory::getAdapter($adapter); } Make this DI instead __construct(Geocode_AdapterInterface $adapter) So a user could use own interfaces, eg using Nokia API or other map services This will also make this file GeocodeAdapterFactory.php deleteable, because this is bad design, you shouldnt edit a file when you are adding a new service. Remember the code shouldnt care which service its using, it could be a custom code, as long as its implements interface everything should be fine. Another thing, lets say you have a heavy traffic site where this is used and you have used your 10.000(?)/day requests and Google is throwing errors back, then it would be awesome if it then could switch to another adapter. Something like this try { $google = new Google_Geocode; } catch (TooManyRequests $e) { $yahoo = new Yahoo_Geocode; } catch (TooManyRequests $e) { $nokia = new Nokia_Geocode; } 
Using fork() there is no guaranteed order in which the child processes will run. You could mostly get the output you're looking for by switching the foreach and the while loop but this is still not guaranteed. 
Check there are no cron jobs running on the server Other than that, there are no circumstances I can think of which would cause this, short of a bug in your PHP. Granted, you haven't been able to reproduce it, but that doesn't prove it doesnt exist. Start logging everything for that user, including the sql queries which are being run as a result of him using the interface. Also log the exact content which he is POSTing, since knowing users, there may be some funky crap in his input which you arent handling properly (quotes, comment characters etc) 
I had never heard of triggers, so I don't think this is causing the problem. However, I appreciate the link, as I will read up on this and hopefully learn even more.
No its not possible to update more than one table in a single statement. You can join several tables in an update, but you have to specify which table is the one is being updated But this does raise another question. Have you got any cascading foreign keys or triggers on the table? That could cause an unexpected effect I guess. 
This is almost certainly an application bug in your calling code. The first step would be to wrap your outbound queries in something that logs them, the record count before, and the record count after the query, then to have it email you when there's some huge drop either by query, by minute, or by day. That'll at least set a window to tell you where to look.
When this happened to me once, it turned out that I had some unprotected restricted areas and some web crawlers ended up crawling all the links... Including all the "delete" links of the admin area. Not my proudest moment...
Two things to consider, are you updating any db info using a 'GET' request or are they always 'POST'. Many moons ago in the days of dial-up, I had a script which used 'a' elements as buttons on a datagrid style form to update a table, and all hell broke loose when the client used a 'prefetch links' plugin on their browser. The other thing, you could be hitting an odd global or function in MySQL which is messing with things. Perhaps crossover from another user's account? Try qualifying your table names with the database name and quotes to eliminate that one. Finally, make sure your update queries have a 'where' clause.
I think you need to take a step back from asking the question to the answer you *think* you need. What are you actually trying to achieve?
You need to explicitly call [session_start()](http://php.net/manual/en/function.session-start.php) on each page that uses session data. I suspect you are missing that.
Thank you for stating what I believed to be true, that a single SQL statement can't do this. There are no triggers or anything else, but I feel more comfortable crossing out the query being the problem.
I understand the code is private, but can you atleast post the MySQL queries you're executing? The problem could very well be a typo in a query. Also, I advise you to comment out the section where you execute the query, and print_r() or var_dump() all data you are inputting into the query is what you are expecting. Also, put the query into a string, and echo it out, and inspect or also show us that.
I would paste the query, but I think what other people have mentioned about bots potentially reaching a delete page seems like a real possibility for the culprit. I would ask you though, in what way could a mySQL query be made to edit multiple fields in multiple tables through a typo? I mean, I thought you had to specifically mention which table you are accessing in the query. Is there some way to just mass update multiple tables through a typo?
I agree. I've got a few ideas for such a thing. Thanks :)
Im probably gonna be downvoted to hell, but I have to get the truth out no matter what it costs. PHP is one of the worst languages you can pick for concurrency. There are no plans on improving it. Java for example has a countdown latch for threads that solves this very problem. Forking while it has its use cases, is really over used when better ways to handle concurrency in a general use case exist.
Perhaps it's not one syntax error/typo in just one query in one file, but it could be the same error in multiple files. For example, if you just copied and pasted the code for "videos.php" into "performers.php" and just changed the table names to reflect to performers, a simple typo would just slip by. Maybe the website owner edited a video then edited a performer and thats's why it happens accross multiple tables. Either way, this is just a possibility. In all reality, the only way a MySQL database can be affected is by a query, or by manipulation of a query (injection/etc). It might not even be in your SQL syntax, but if you're including a variable like 'WHERE id = $video_id' and $video_id is supposed to point to $_POST['video_id'] but you typed $_POST['vide_id'] (hence the typo), that could cause an error (again, an example).
I don't think that's right, I am sure I have seen it done.
I'd be happy to be wrong in this case - find and example and share.
That's not PHP's fault, but your OS's scheduler. In actuality, they're all running at the same time, but since the work that they're doing is so nominal, your OS is scheduling them to run serially. If you put a small sleep after your print statement (in this case I used `usleep(500)`, we can force your OS to switch to another process, and you'll get In child 172.16.3.42 - 5 In child 172.16.3.55 - 5 In child 172.16.3.42 - 4 In child 172.16.3.106 - 5 In child 172.16.3.55 - 4 In child 172.16.3.42 - 3 In child 172.16.3.106 - 4 In child 172.16.3.55 - 3 In child 172.16.3.42 - 2 In child 172.16.3.106 - 3 In child 172.16.3.55 - 2 In child 172.16.3.42 - 1 In child 172.16.3.106 - 2 In child 172.16.3.55 - 1 In child 172.16.3.106 - 1 Child 0 completed Child 0 completed Child 0 completed Your actual results may vary. When I upped the sleep to 1500µsecs, it ended up printing them in the order you wanted.
Hmm, I definitely know it's possible to manipulate stdout to jump up lines etc. I have an rc4 cryptor that I wrote this morning that takes input and xors it with rc4, I ran sl through it twice and it still did line jumping properly, leading me to believe this is the case. I don't know how well it would work on windows though.
what does the app do? o.O
This is self-evident for *multi-threading* (PHP has no user-accessible inbuilt threading) but for the benefit of those of us doing just fine with *multi-processing* (with gearman, supervisord, php-resque, etc.) you might want to better support your argument. The pcntl_* primitives are coarse and not without their challenges (e.g. with file descriptor inheritance), but they suffice for many applications if the de facto environment is PHP and constraints limit what you can add to the mix. No downvote, just discussion.
Exactly - the speed advantage of shtml includes under Apache would be blown away by moving to Nginx anyway. From how I understand it, all of your page requests are going to include PHP (and those PHP scripts would then emit shtml include blocks) - so you might as well keep it all PHP as it's going to be invoked anyway on page request. Then just APC things if needed. Also this sounds like "premature optimization" too... probably thinking about this too much...
...did you actually read the post? He's well aware of that.
PHP does have support for threading actually, you just have to build your installation with ZTS enabled; the extension is called [pthreads](http://php.net/manual/en/book.pthreads.php). 
I would start with symfony2 console components and add progress bars, for a past project I had to use the progress bar lib with Zend. It worked but composer and zend don't have a great relationship.
It is possible to update data in multiple tables in a single update statment, if you join the tables. I've been curious about this for while, so I just tested it out, and it definitely works. Here's an example: UPDATE orders left join shipmethods on ( orders.shipmethodid = shipmethods.shipmethodid ) SET orders.username = 'John', shipmethods.shipcarrier = 'UPS' WHERE orders.orderid = '678989'
pthreads is a third party thing, and not well tested. Not to mention it has a horribly old fashioned interface for threading.
Hm wow, I'm pretty amazed by that. So TIL.
This feels a lot like an APC caching issue, when you rebooted your machine, apache was restarted, apc uses apache cache, did you have apc enabled?
Out of curiosity is there a reason you opted to not just use re-captcha?
This. Seriously, why not reCapcha? I recently (as in, Friday) implemented a contact form that uses AJAX + reCaptcha, and the captcha code was 4 lines of code. Google already has a library for using it, you just have to fetch it, put a file in your server, and you are good to go. Only think to take into account is that if you are using localy for testing, you need to send your (public) IP address, like this: $ipforcaptcha = $_SERVER['REMOTE_ADDR'] == '127.0.0.1' ? '&lt;my_public_ip&gt;' : $_SERVER['REMOTE_ADDR']; /* just coded on the fly, so it might be buggy */
Further to this, there are plenty of [Libraries available](https://packagist.org/search/?q=recaptcha) to get recaptcha easily integrated into your code.
The code you posted works on my localhost (xampp).. though I did miss the closing } the first time i tried running it.
Seems to me like you're on the right path. Try not to worry about performance hits-- unless you actually [profile](https://github.com/facebook/xhprof) and can literally prove your increases. Otherwise, you're just [prematurely optimizing](http://c2.com/cgi/wiki?PrematureOptimization) which is bad. As far as improving your designs, take a look into some OOP design patterns, particularly the [Factory pattern](http://en.wikipedia.org/wiki/Factory_method_pattern) seems like it could simplify things for you. [SOLID design](http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29) is another wonderful thing, but try not to worry *too* much about that right now. I would highly recommend you learn C# or even Java, as proper OOP languages force you into learning "The Right Way". If that doesn't strike your fancy, at least take a look at [Head First Design Patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124). It's written for Java developers, but almost all of the ideas are applicable to any OO designs and are easily translated to PHP.
I use singleton for this: [http://pastebin.com/LE1GqcJf](http://pastebin.com/LE1GqcJf) And all my classes are childs from Base class: class Base{ private Core; } You have access to objects of all your classes everywhere: $Core-&gt;class-&gt;method(); Even in methods: $this-&gt;Core-&gt;class-&gt;method(); *I apologize for my English skills* 
I'm going to save your comment for later, right now it seems to be over my head. I'm just starting out with OOP in php. I display my page by just having a simple function that handles what page to include into index.php using $_GET. if (empty($_GET)){ $task = "default"; } else { $task = $_GET['task']; } $user-&gt;display_content($task); displaycontent is just a switch statement so far but I'm planning on expanding it. My question about your post is, when you call getuser(); that would return I presume username and other data into $user(which would be an array?)
Yeah, some representation of the logged-in user which may affect the current page. Say if you need to pass it to the template ("Hi, Joe!") or prevent an action from happening if the user lacks permission.
I threw this together some time ago - https://github.com/hash-bang/PHP-GetOpts which might be of interest. This thread finally persuaded me to get everything under Git control.
This is just what I was looking for, thank you.
So I imagine a function like getuser would be supplied the data from $_SESSION? That makes a lot more sense to me, thanks
If I follow your advice, and the rest of the advice on here, doesn't that make my module a bit more difficult to use? If the user has to do this: $adapter = new Geocode_Google_Adapter(new Zend_Http_Client()); $geocoder = new Geocode_Geocoder($adapter); Instead of what it currently does: $geocoder = new Geocode_Geocoder("google"); Isn't that a significant increase in complexity? Is it worth it to dependency injection? Not criticizing advice, just trying to understand when I should and shouldn't use DI.
Meh. Take your rant to /r/programming and see if anyone thinks your post is worth typing a response
I highly recommend #2 if you can handle that.
Yeah, 21k are totally killing you...
Here are some commercial licenses to take inspiration (NOT copy) from: http://xenforo.com/license-agreement/ http://www.invisionpower.com/legal/standards/#license You should consider deploying as a SaaS instead though. It keeps your code private and makes it easier for less technical people to start a site for whatever it does.
What kind of script is it? You want to sell/license it directly or just publish it somewhere on the web so that anybody can license it? If you sell it directly – you need to ask yourself – why would your client want to resell your code? I mean he probably is not in the business of selling PHP scripts. If you want to publish your script somewhere on the web for anybody to buy, then, well ... good luck. Piracy is not an easy problem to solve. In my experience nothing works better than establishing a good relationship with your clients so that they want to pay you money instead of screw you over.
Maybe you want to use static methods or singleton classes? You may use static methods without instanciating the class. User::login($name, $pwd) Or if you really need to instanciate the class, so you can use properties, you can create a singleton (It's a class with a private constructor that you instanciate only once). [More info](http://www.tonymarston.net/php-mysql/singleton.html)
Or if the time you, or the company you pay, use to order, install and configure the certs cost more than the difference.
Of course one charges for the hosting, server/bandwidth ain't free.
I actually didn't check if that regex is greedy or not. I think there will be a flag to set. Greedy means it will take the longest .* string it can when matching a closing double quote, possibly encapsulating other quotes. eg, the quick "brown fox" jumped over "the lazy" dog may likely be reduced to the quick dog -- EDIT, changed my thoughts half way through ;)
Symfony2 is my tool of choice, mainly because I did big projects with it. ZF2 looks good but I haven't looked too much into it. A strong point for Symfony2 is the documentation because it is really good, everything is explained event the internals. The symfony author also did a [How to create your own framework on top of Symfony2 components](http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1) which is really good. But in the end go with which one you feel the most comfortable with. You should be able to be efficient with both (in an ideal world) but you can usually apply your knowlege form one to the other.
Implementing your own CAPTCHA is also a bad idea, seeing as OCR technology have no problem reading text off an image. Even obfuscated text can be cracked for the most part, and for the instances it can't, it's not long before the technology will catch up. In short, if you're implementing your own CAPTCHA, you'll be stuck maintaining it indefinitely. What's more, if you can get away with not using CAPTCHA, and instead use some more reliable and long-lasting security measure, please do so - You'll be better off. 
Yep, originally in my post I had a list of pros and cons. I decided to remove it, because, really I'm asking for advice. I specifically don't know enough. The Symfony2 documentation seems miles ahead of ZF2 from what I can tell, it's a really big "pro". Just reading through the pdf's available on their site is itself a really good introduction to the framework.
terrible advice
well, are you selling your code or are you licensing it? Because if you sell your code you have no licensing rights to it, the buyer does. Edit: For clarity's sake, I'm assuming that OP is selling it to another company or entity (i.e.: an employer) rather than to an end user / customer.
This
I've spent some time with ZF1, and quite liked it. However, I've recently been looking into Symfony, and what I very much like about it (although I haven't actually tried it yet) is that it seems to avoid NIY syndrome as much as possible. What I very much dislike about ZF2 is that development of that happened very much behind Zend's closed doors with little updates about its progress. This problem seems to occur time and time again. Both should probably satisfy your needs though.
My opinion, YMMV: I've been using ZF1 for a long, long time. It is an awesome framework. Lately I started a personal project and wanted to make the switch to a modern framework, with namespaces and other niceties. ZF2 was still in beta, and I was feeling adventurous, so I said, what the heck, let's give SF2 a good try. And boy am I happy with it! The API seems clearer, it gives you very cool tools to create awesome, modular applications (through dependency injection, custom services, etc). The HTTP foundation is pure awesomeness, I specially like the HTTP cache. Heck, it even comes with a built-in gateway cache (kind of an integrated Varnish). It's awesome. I'm loving it. ZF2 feels very "enterprisey", a bit verbose and bureaucratic. It's a bit Java-ized, something I tend to avoid. The good thing its vast library, they've got modules for *everything*. If you're planning on using 3rd party services, like amazon AWS or google APIs, ZF2 surely already has what you need. SF2 has a more confortable, "fluent" API and a better HTTP foundation. I also dig Twig, the default templating engine, based on django. But the library is not as big as Zends. And the best news is, you can combine both! Use composer to mix and match Symfony's HTTP foundation with whatever module you need from Zend and you're sweet.
Captcha is a problem that has been solved already... why are you implementing your own solution rather than integrating an [existing solution] (http://www.google.com/recaptcha) so that you can move on and solve problems that are more important to the business? Look at it this way: how much revenue does your captcha solution generate for the business? $0. So spend as little time as possible on it and move on to more important things.
Reading the reactions below there are (at least) two possible ways to interpret your question: technical and legal. Legally, the copyright is yours (assuming you wrote the script yourself). Anybody receiving a copy of the code can only copy it with your consent. As long as you don't license the code and do not transfer the copyright, nobody can legally copy it. A license is nothing but a contract in which you grant the other party the right to make copies, usually under specific conditions (own use, no resell, limited number of copies etc), usually in exchange for money or other compensation. Technically there are ways, but basically it is always possible to copy an interpreted language if the party receives a copy.
\#3 is practically worthless as it's very easy to bypass, and it only limits legitimate users instead (like any popular DRM does).
Seeing framework specific code released makes me sad. This should be a generic, PSR-2 package, listed on Packagist, with PHP-Unit required as a dev dependency, with a whole bunch of tests running on Travis-CI. That's what the "cool kids" are doing these days :)
SaaS? System as a Service?
ah
I currently have it setup as a long winded switch statement and if it doesn't match anything in it, it defaults to index. I 'spose an array would be much easier
GPLv3 that shit and sell installation/usage support, before you know it someone will come along and make a nice modification to the code that will benefit you... or you could fuck yourself and go the same route as [LoneTar](http://www.lone-tar.com/) and spend all your time an effort into coding bullshit that requires a subscription.
Yeah - I have a full-time job, but I still have about 10 clients that I have built applications for. I'm not really trying to make them go away, since it makes me decent extra money on the side. The key here is that I've already built their stuff, though; they're not ongoing projects. Very few of them need anything except for maintenance, updates to things, or minor features. I am sure at some point I'll need to try to hand them off.
Stay away from anything Zend Framework related.
You know those file sharing sites? This guy is paying me a nifty sum to make him a custom uploading site script. I just want to make sure he doesn't resell it.
Yes, precisely.
An array would definitely easier: $task = in_array($task, $tasks) ? $tasks[$task] : $tasks[0]; not dependent on size at all. I was just trying to point out you should really avoid something like this: $task = $_GET['task']; include $task; which is exploitable to: index.php?task=.htaccess
Remember if you are modifying any GPL library you can't do this because you would be breaking `copyleft` copyright.
woo thanks, I had almost given up. or at least put on hold.
You could always use an absolute path for your lowest/root folder, and then build the other constants from it, e.g. define("DESIGN_URL", "/home/sites/mysite/htdocs/design/"); define("TEMPLATE_URL", DESIGN_URL . "template/");
execute phpinfo(); to see what the path actually is. 
It's on my local so I am getting /Applications/MAMP/htdocs/. When I display the path using echo for DESIGN_URL or TEMPLATE_URL, I get the correct path, but for some reason it cannot locate the file I am calling in.
Note: these aren't URL's since they are not web addresses, they are PATHs or DIRs. So misleading names. Give a sample failing line where you load a file please. A different problem you will encounter is when loading images or css files from html. Then you need the root web URL. But you can probably get away with just "/" or "/gtaauto/". Either way, an absolute URL. The difference here is, the path is used on the client, not the server.
Ok I got the css file to load along with the images using an absolute path (/gtaauto/design/css/.....). Would this work on a live server as well?
Yes. What I thought. See my above comment about client URLs. And these are URLs, whereas when you use require() it's not an URL, as it's not on the web. Any rel= or href= or src= need URL's, not filesystem paths. They all execute at the client. You need &lt;link rel="stylesheet" href="/gtaauto/design/css/style.css" media="screen" /&gt; If you want, create a new variable for "/gtaauto/". 
You didn't follow the 'See Also' section which would have provided this : &gt;A constant is an identifier (name) for a simple value. As the name suggests, that value cannot change during the execution of the script http://php.net/manual/en/language.constants.php 
&gt; it's a silly practice, and people don't normally code like that anymore. I do. Maybe I'm old or something. I'm only 33!
If it's not in the gtaauto directory there also, then create a new config variable. Change it to "/" for live. And rename your old _URLs, they are not URLs.
sometimes finding what your Current Working Directory is can be a bit tricky. http://php.net/manual/en/function.dirname.php and http://php.net/manual/en/language.constants.predefined.php might help you out. Also, watching the error logs might help you find out what file PHP is trying to open.
Are you missing a / just before the css? Instead of giving us the source and telling us it does not work why not look at what the browser is being delivered. What is wrong in the source if the page that is not working?
Head over to /r/phphelp for help on this.
Hello, I hope I am not too late. I use [WHMCS Licensing Addon](http://www.whmcs.com/addons/licensing-addon/). **It works great!** I have it licensed with clients and have it integrated into billing so it will send out yearly license fees. The code is also encrypted with ionCube so it cannot be reversed. Again, hope this helps and reaches you! PM me if you want assistance or to Skype about setting it up.
I really like the fact that this is "I'm going to sell my code, how do I license it" instead of the more common "I'm going to sell my code, how do I encrypt/compile/obfuscate/etc it".
&gt;not thought of using reCaptcha Another alternative you might want to take a look at is [**Peoplesign**](http://peoplesign.com/main/officialDemo.html) I have found this to be better than reCaptcha. Very bot unfriendly although to humans it is easier.
&gt;If so, you don't quite understand the difference between C macros and PHP constants, and even if you did, you don't quite understand the point of C macros, because you are using them to illustrate one particular type of use. I do understand the point of them. My point is, this was common practice back in the PHP4 (and before) days, and it isn't any more because it's mainly unnecessary due to us having largely switched over to object-oriented design. And yes, I am only talking about that particular set of use because that's what it sounds like OP is talking about. Stop assuming I don't know what I am talking about. I know perfectly well how to use both PHP constants and C macros, and I understand both quite perfectly, thank you very much.
That's somewhat different then. You could just use a piece of software like [IonCube](http://www.ioncube.com/) or [Zend Guard](http://www.zend.com/en/products/guard/)
While it is fine to look and learn from the practices of other ecosystems, there is no obligation to actually adopt their tools. Use whatever you are comfortable with. If anyone says differently, you can politely ask them to take their opinion and bin it. I've said this before, and I'll say it again: The choice of language is mostly irrelevant. Whether you choose language X over language Y isn't going to make or break your website. It's like a choice between a Phillips screwdriver and a Frearson one: Whatever you can build with one, you can most likely also build with the other. Both are perfectly good at what they do, namely turning screws. So, in short, It's not so much the tool that matters, but how you apply it. In other words, what matters is your **architecture**. That's why it is sometimes a good idea to look over the fence at what other people are doing with their screwdrivers. 
I'm going to politely ignore that you used 'header.txt' in your example, but I'll still point out you didn't get the PHP tags right. &lt;?php include 'header.txt'; ?&gt;
You may explore some methodologies to complement your coding, all applied together as Continuous Integration: - Code Respository (Git) - Testing (TDD, PHPUnit) - Documentation (phpDoc) - Code Sniffing (PHP_CodeSniffer) - Code Quality (phploc, phpmd) - Build Automation (jenkins)
Code with [standards](https://github.com/php-fig/fig-standards/tree/master/accepted)? Are you using [Composer](http://getcomposer.org/)? Do you use all of the [design patterns](http://net.tutsplus.com/tutorials/php/the-whens-and-whys-for-php-design-patterns/)? Can't think of anything else right now :x
the magic constant __DIR__ is correct if used to define a path at the base of the application (clearly you wouldnt use it to define the "DESIGN" path from the "TEMPLATE" directory) if youre stuck using less than PHP 5.3, use dirname(__FILE__); 
Cheers! I removed the last post because I thought I was in /r/webdev, but it was not the case :)
Because constants can't be modified. It's just good practice to make it as difficult as possible to break your project.
This is so not PHP that it's JS.
I was under the impression that under MVC, views play a bigger role than just dumb templates. Also, depending on the size of the project, the SQL is sometimes in the controller if the entire function is ~10 LOC. It just feels too redundant to use Models/DAOs. Never the less, I always aim to separate the logic from the output. So that should be enough I guess. 
Just a heads up before you do this, it is a framework so if you are new to programing or are coming from something like c (not oo) I would avoid this until you are more experienced or it might put you off learning in the first place. Also my first project was a social networking site, over all its a pretty easy process and will cover most basic operations (similar to blog idea).
So they finally implemented __DIR__ This is very exciting!
I love Magento, I've used it for several major ecommerce projects thus far.
Here some links for another skill you might wish to improve: * http://meta.stackoverflow.com/questions/10647/how-do-i-write-a-good-title * http://www.clinchem.org/content/56/3/357.full * http://writing.helium.com/zone/2877-How-to-Write-Informative-and-Captivating-Titles-for-Your-Articles * http://pages.ebay.com/help/sell/title_desc_ov.html 
You are right, I was on the mobile. I've worked with both ZF1/2 and still working with ZF2, and they both feel very bureaucratic for my taste. You have so many rules, and things you should oblige with that I feel stuck in that way they want me to build web-apps. Whenever I stray away from the path they've aligned to me, I always get in one big mess. Simple things take way more work than it should be done. I just think there are better frameworks out there with lots more freedom, documentation and community. 
&gt;I tried RoR a while ago but I did not really like it. The problem here is you're trying one framework and judging the whole language by it. This is definitely the wrong approach.
It's fine as far as WordPress goes. Yo have absolutely no fear about speed, some frameworks include dozens of files, WordPress itself probably has a good 20+ just to load a single page, god knows how many more with plugins, so it's a fairly standard thing. I'd call it .html just so my editor would format it nicely.
O ok. I'm currently working on doing a small quiz with database but not really working lol.
I hate recaptcha because it's so damn impossible to read most of what it produces. 
Only job openings that allow telecommuting are allowed in this sub.
Generally speaking, if Google says "do this," and you care about Google's results, follow their instructions, even if a Redditor says they secretly know it to be wrong.
for the record I was referring to their product, not their website. I do agree, that site has a bit too much web sparkle
&gt;Generally, you should keep the query string variables to a minimum, and use them largely to modify how content is displayed, rather than what content is Exactly this. URLs should point to a resource. If it wouldn't make sense for each section in the URL to be its own resource, it shouldn't be part of it. I see a lot of sites do something like &gt;example.com/products/shirts/0/30/price/desc which is horrific.
well this topic is pretty much covered by earlier commenters, BUT if youre changing existing urls to be more "SEO friendly", you should setup 301 redirects on all old urls. thats important stuff
sparkle? nigga thats bedazzled 
&gt; Well, if you leave the invocation of methods up to the controller, it becomes quite easy to create an abstract RESTful controller from which you can inherit from (this is how I do it in my framework). If I understand you correctly, then that is the way I am doing it right now. It would be awesome in case you could give me a code snipped of your MVC to look at? Just to compare and see in case I can improve on mine! &gt; JSON and XML are also views. Oh yeah! What I meant to say was that I don't need a layer to present the data. I just merely dump it into the response body. Most often, the front end developer will make all the calls and present the data in whatever shape/form he/she see fit. 
functional programming is certainly something a lot of people talk about and I've wanted to look at for a while. Thnx. I'll check the links out :D
sure thing! I'll check it out asap! thanks for the recommendation :D
I didnt judge Ruby. I didnt like RoR as a framework. Heck I dont even like Zend or Cake or any of those. Frameworks in general are a bit too messy if you ask me. 
&gt;Frameworks in general are a bit too messy if you ask me. Erm, the whole point of a framework is to give you a structure to work in. What you're saying is kinda silly.
I think that it's best to look at it from a human perspective, because Google will try to do what's best for the end-user, so should you. Personally, I often check where a link goes before clicking, if there are multiple links, I will probably choose the one which URL matches my current interest the best. Google will try to do the same, it can get more information out of /product/red_chair than it can out of /product.php?id=34 Therefore, I would say that it's better to use the pretty urls. However, my sister runs a webshop that's doing quite well and she has the ?id=XXX, so if you think the pretty urls are going to be a lot of work, you could do without.
Well, I've been following the developments for over a year prior to its release, and they've had it for all that time. Who cares if it was closed in the initial phases. There's no need to share the code from the get-go, since it wouldn't amount to much. It's better to let the base mature to the point that you actually have something to show, comment on and contribute to rather than having an empty repository. People have had plenty of time to give feedback and contribute to the project, so I repeat: It's hardly been developed behind closed doors.
&gt;but was delivered almost finished products developed by the Zend team. Not true. &gt;Maturing the codebase is something that I would prefer the community to do. That's what they did. Maybe you should re-read the comment. &gt;So, you might differ in opinion, but in my view, this was behind closed doors. Well, then I don't think you've been paying much attention.
According to Google, it doesn't matter. However, there are other reasons to use nice-looking URLs. They look better in the location bar, they're easier to pass around orally, and most importantly, they make it easier to reorganize/refactor the site without having to change URLs later on.
It has very little affect at all on google indexing in my experience. If you want to be cool you can use mod rewrite and a little php magic to make it look pretty like an actual path instead of a querystring. But honestly don't worry too much about it. You sound like you're at a beginnerish sort of level, so it's best to focus on making sure your code and database are well designed and robust rather than insignificant things like this.
Thanks
One thing not mentioned here is value of the keywords in the url. Url keywords cary a significant seo value. 
&amp;#3232;\_&amp;#3232; I was told that I shouldn't listen to you. 
PSR-0 is fine enough, thats have the file namings and directories. PSR-2 are stuff like When present, the static declaration MUST come after the visibility declaration. Eg protected static $foo; and not static protected $foo; But composer thats just awesome, finally a better thing than PEAR was, travis - its always good to see all your tests are passed, but travis should have code coverage on as a standard. Its easy to write a test that always is true, and get you the "green light" from travis - but if it also had percent code coverage after "build passed", so you could actually see if the code is actually tested or just random tested :)
Some good advise here, follow it. Except the last paragraph about frameworks. If your frameworks requires you to put controller methods into the URI then delete it and get a different framework.
&gt;Don't be a dick, Stop wasting my time &gt;the creator of webid is dead Funny. He seems to have no problems posting in the forums and releasing new versions of the script. &gt;I seriously doubt you even looked for my posts on the issues, I did. It wasn't there, so clearly you didn't bother. &gt;considering you sent me a link to an SQL schema without even checking if it were there, after I told you we already looked for it there... I never claimed to have linked you a SQL schema, I linked you to the **WeBid support forum in which you should have asked your question in the first place**. I mean, fuck, what are you, an imbecile? I don't care if you "looked for it". Go there, and ask for it. It's a WeBid support forum for Pete's sake.
There are already good answers to this question, but something else that should be added: Right now you only support Google, right? You would need to build each and every adapter that you wish to support into your package. If you pass in the "Adapter" object which implements an interface of your own, then anyone can use any adapter they like - much more useful than forcing you to support all adapters ever.
Maybe, but then Padraic wasn't paying attention as well.
Ah, well, so it indeed is only recently. I was only referring to the time when I was following it, which was up until a year ago - and development of this version took much longer than just that year.
Sorry, but thanks everyone for all the help.
"Mostly because the same concepts are applied in most languages using different syntax, which seems to be a bad ROI at this point." Really depends on what type of 'return' you're looking to get. At some point, for most people, the level of complexity of the projects you work on tends to level off some. Knowing how to jump in to other platforms/tech can, at the very least, alleviate some boredom, but perhaps more importantly help you land jobs or projects you might not have been able to get if you're seen as primarily a one-trick pony. And some languages makes some common/routine things easier than others. Learning a new language is one thing, but learning a platform using that language (C#/ASP.NET, Django/Python, etc) will give you some new perspectives when you come back to PHP. And you'll feel more comfortable building larger solutions connecting together disparate systems vs trying to do everything in one tech. I would encourage you to consider learning other platforms as well as learning more about the tools and processes that are available (and emerging) in the PHP community - continuous integration, composer/packagist, test-driven work, etc. You may find some tech that enables you to do some of these other aspects of work much more cleanly than in PHP (personal preference, of course, but that's all you have to work with largely). Naming some actual tech, you may also want to consider looking at angular.js (I saw knockout mentioned here too).
Yeah I figured it would. Like I said it's pretty rough around the edges. 
&gt; Learning a new language is one thing, but learning a platform using that language (C#/ASP.NET, Django/Python, etc) will give you some new perspectives when you come back to PHP. you're definitely right. Learning JAVA improved my PHP greatly. So you are right. But that was mostly due to the nature of OOP languages and scripting languages. That's why I want to focus more on learning concepts instead of languages. &gt; I would encourage you to consider learning other platforms as well as learning more about the tools and processes that are available... Fair enough. I do try to jump into new platforms as often as possible so that will come with time... I think! &gt; angular.js no idea what that is so I'll check it out! Thanks for your reply :D 
Not sure how ImageMagick fares these days, but when we did animated gif processing about 5 years ago, we had to use gifsicle to get any real results. Otherwise IM just takes the first frame and dumps the rest. But like I said, current module might have improved somewhat.
you sound like one of these ppl: https://www.youtube.com/watch?v=ShABUGCMAeA
Needs [composer](http://getcomposer.org/doc/00-intro.md) support.
A good way to start preventing these types of problems is to examine the *headers* of the URL, not the *contents* of the URL. When a new URL is entered, grab the headers first. Check the Content-length and if it's above Xmb, reject it and show an error message. Similarly, you could examine the Content-type and ensure that you are indeed working with an image. This is not foolproof, but it gives you a starting point. Assuming that the URL passes both these tests you could then go ahead and fetch the URL and apply the operation. As for cool image filters, I suggest you take a look at how [PHP + ImageMagick](http://net.tutsplus.com/tutorials/php/create-instagram-filters-with-php/) can produce some Instagram like results.
His error level is apparently set to E_I_DONT_GIVE_A_FUCK. I understand what he's trying but I couldn't get it to run.
You're looking at the wrong logs, then. A 500 will rarely, if ever, appear without also logging the cause. That is really the only thing you should be looking at for a 500 error.
http://daylerees.com/2012/04/07/laravel-authentication/ Should give you a very basic on how to add user auth. Also in the schema builder (the first code block) you can add your custom fields. If the custom fields are different from each user, I would properly make a new database table with custom fields. Schema::create('custom_fields', function($table) { $table-&gt;increments('id'); $table-&gt;integer('user_id', 11); // The foreign key to your user table $table-&gt;string('key', 255); // The key/name for the custom field $table-&gt;string('value', 255); // The value for the custom field });
If this only happens with large operations, I wonder if it's an atypical outcome due to memory limits or something. Tail every error log you can think might be relevant, including nginx and Symfony. It must be logged somewhere.
It worked out better than GD did. Also imagick can get confusing because there are two calls one for static images and another for animated. The only difference is in the plural naming of the function (ie. writeImage vs writeImages). Which can obviously make it tough to debug an issue. 
what the f.... seriously, wtf?! and I thought assembly was too much :S
kinda like [phpthumb](http://phpthumb.sourceforge.net/)?
Until it becomes unmanageable down the line. Though developing a system as a novice it may become unmanageable no matter what.
For what you're describing, would a google spreadsheet work? You could also use ADODB or similar to create a simple DB interface.
Actually, they are using Excel to keep track now but they want something a little more... eloquent I suppose. I've got Laravel installed and the database connected. I'm working on the auth now. I'm slowly wrapping my head around it but the routes are a little confusing to me. I was hoping to find something simpler to implement but didn't have much luck finding anything other than full blown ERPs or CRMs. 
That is quite the possibility. My biggest problem with programming is structure which I would imagine is the case with many programmers, novice and experienced alike.
I think I'm going this route. I've already got Laravel setup and connected to a database. I'm working through the tutorial now. I think the thing that is giving me the most fits right now is the routing. I'm having a little trouble wrapping my head around all of it. That, and the case with most tutorials always seem to assume you know a particular thing which may be simple but completely screws the whole thing up if missed.
Vtiger is good, but it doesn't have the ability to easily construct entire new databases of information without PHP coding that Sugar does. Also: there are several open source inventory modules already built available on sugarforge that you can choose from -likely one does what you need, and it can still be customized from there. If you like the way it works, you can fairly easily migrate your vtiger data into sugar.
Routing, There are 4 different http methods, GET, POST, PUT and DELETE. every route starts with Route::method(....) GET = Viewing a product POST = Creating a new product PUT = Updating a product DELETE = Deleting a product So you should properly have these routes GET,POST,PUT,DELETE user (now this is called CRUD (Create, read, update and delete) so you can actually create a CRUD for your user table, lookup the artisan and see if there is a CRUD creator) CRUD should give you, list all users, view 1 user, edit a user, create a new user, delete a user And the routes will properly be something like this GET /user (list all) GET /user/edit/id (edit 1) PUT /user/edit/id (parsing the form data and update it) GET /user/create (create new) POST /user/create (parsing the form data and create it) GET /user/id (list 1) DELETE /user/id (delete the user) Now you should also create CRUD for your inventory So what you need to make is the coupling between these two, who owns the inventory, and how many does the user owns. Is it borrowed to another user etc.
Good thing Tolkien was a Briton, then. ;)
Thank you! This is very helpful.
Hey, I have been working on a Custom PLM for the last few years, large project but id like to hopefully alleviate some of the problems that you might run into. Even in a small Inventory program - deeply consider your Database and how to lay this out. Framework won't matter as much - make sure your backend is solid - The DB is gonna be important. 
I wrote this article and the code runs fine and only displays notices if you have notices enabled. The code should still work even though the notices display. Did you wear your glasses?
I go into more depth here, the original was a follow up post. http://www.thespanner.co.uk/2012/08/21/php-nonalpha-tutorial/ Non-alpha refers to non-alphanumeric PHP code.
A shot in the dark but are symphony and Wordpress URL routing rules fighting one another? 
You really need to to switch to using prepared statements here. Should only take a few lines of code to change. Quoting values into the query string is discouraged. Nice little test idea though, just in time for tonight.
If symphony is using htaccess in order to direct requests, it might be interfering with WP. I had a similar issues with a framework in both my root and subfolders - Moving the root install to a subfolder fixed the issue.
So start out with a VPS? [lowendbox](http://www.lowendbox.com/) has really cheap deals in my experience.
O my goodness that guy... On topic, yes doing php programming challenges and experiments can be fun. Especially with the latest 5.4 and beta 5.5 features, it's interesting how those can be used and abused.
This is definitely the case. I've had Wordpress have .htaccess collisions with other frameworks before.
Yup. I used to use securedspeed. I don't intend to advertise in any way but they always delivered and responded my questions in matter of minutes. If I'm getting a VPS, probably it's with them
Thank you for your input. Honestly I have zero experience with big websites, or websites that get a lot of hits in little time, so I was a little worry
Thank you, so basically these particular methods will do something behind the scenes to create the exception object as and when it's needed?
Pretty terrible framework, but that answer had some really good articles. My MVC understanding as a whole has improved and I think I finally understand how MVC can be implemented in a web application. Neat-o.
You're missing the entire "model" part. The controller should not need to be aware of your data stores at all. The problem with everybody and his dog attempting to make the next great lightweight MVC framework is they often don't understand how MVC works in the first place. Every time I read something about "framework X being too heavy" my initial conclusion is usually that they don't like it because it has a learning curve. On the other hand, if a framework really *is* too heavy, perhaps the problem is that your project is just too small to warrant using one.
the return is empty: object(SimpleXMLElement)#2 (0) { }
Me too. I support this advice.
Google Webmaster Tools does let you specify which query strings are important and which should be ignored, so that's always an option. You can also use canonical tags to point to the real resource to avoid duplicate content penalties. In most cases though, I'd avoid get requests unless, as Redditor8472 says, it's changing how the page is displayed but not the content itself.
I think the links in the response from Tom B should get more attention.....
By 'the root install' do you mean of wordpress or symfony? Wordpress is in a subfolder of the root, /my/site/web/blog, whereas symfony sites in /my/site and serves from /my/site/web I do think it's a htaccess collision of sorts, it's just odd thats it's not all or nothing. 
No, there is no /blog route inside symfony - there are only two routes on my symfony site as it is! 
Well if you find that you simply need a leg up in the MVC part of things but would still like to have the control that it offers without abstracting away everything under a CMS, may I suggest fuel cms(http://www.getfuelcms.com/) It is built on codeigniter and you will find that it helps you structure your program properly while still providing you with an interface
I love every piece of their content so far. 
Wow, thank you for that Fabien post. It's perhaps the first thing I've read that actually *shows* how Symfony/Composer and friends are useful, instead of a preachy "Use SensioLabs everything or you suck at PHP!" that I see a lot in this subreddit. 
Not gonna trot out that old Zawinksi quote but personally I wouldn't use regex. I would loop through the characters in the string, adding them to the resulting string, ignoring stuff inside quotes. I'll also point out that (in either method) this is gonna bite you in the ass when you process a string with `can't` or `don't` or any possessive in it.
That's the answer I meant. I really liked the j.re articles.
Did you seriously just write "you'r"...
how do you expect it to work? is there an issue?
You are getting confused between instantiation: $var = new Thing($param1, $param2); Which creates an object of Class thing and assigns it to $var, and type hinting: function something(Thing $param) { Which specifies that whatever is passed to the function must be of type Thing. So for instance, Function something($param) Can be called by passing it a string, a number, an object, whatever. But, function something(Thing $param) Can only be called by passing it an object of type Thing. This is useful because you can skip a lot of validation code if you know your param is of the object type you expect (you don't need a bunch of if statement checking what type of object your param is if you can tell your code to only allow type Thing). When it comes to exceptions, you can use this as someone else already demonstrated - to catch multiple types of errors and handle them differently. Because all exceptions are children of class Exception, you can do try { ... } catch (Exception $e) { failGracefully(); } And this will catch every exception, but you could also try catching a badPasswordException first and display a related error to user, them catch a noDbConnectionException and tell the user the site is under maintenance, then catch generic exceptions last to just fail gracefully with no specific message. Does that make sense?
Sorry, English is not my native language. I read up on it now. Apparently, you'r is not a word :-( I leave it in for shame.
:-\ What is "terrible" about it? I use it for many internal sites already and they all seem to function pretty well.
Just for a backstory: I had started out using [this](http://anantgarg.com/2009/03/13/write-your-own-php-mvc-framework-part-1/) and then I expanded from there. So some of the variable names and such seem a little inconsistent... but I am already heavily using the framework and I am stuck with some old naming conventions....
Jeez, now I feel like a dick. Maybe I am. Anyway, terrible is not the correct word. Amateurish, maybe? Functionality-wise it could very well work. I'm talking design-wise. Tom B mentions a lot of problems with it. Something that immediately stood out for me (which might not be such a big deal to most people though) is that you're very inconsistent with naming things. Sometimes you use CAPS\_CASE (even for variables), sometimes you use camelCase, sometimes you use snake\_case and sometimes you use PascalCase. Also, it feels like the only exposure you've had to "MVC" is CakePHP and perhaps CodeIgniter, both of which are very outdated in their design by now (the whole "loading helpers in the $helpers array" shenanigans for example). I can't blame you for misunderstanding MVC, though. I misunderstood it as well until I read Tom B's articles. Lots and lots of misinformation out there. Anyway, take what I say with a fistful of salt. I'm no expert by any means but that Tom B guy seems like he knows his shit.
Your peer is basically wrong. This attitude is common among the Gentoo Linux crowd that is generally misinformed on this topic. The performance gain that you *might* see is marginal, if any such gain actually exists. Generally, packages for major Linux distros are already tuned for i686, and if you're on x86_64 this practice becomes even *more* irrelevant. I could go into more depth on this front, if there's demand for it, but the short answer is: 1-2% on x86, 0% on x86_64. To nip one complaint in the bud: yes, I know that gcc and other compilers have options to optimize for size, or to do further assembly optimizations. "[Gentoo people](http://funroll-loops.info/)" as I call them are too often grossly misinformed on what these do and why they're there. Besides, if you're looking for more power, you're better to scale out with more machines and not waste so much time tweaking each individual machine to get a 1% boost. Guess what? Maintainability matters much more in that scenario.
I use the distro's package manager for libraries (libxml, openssl, libyaml, mcrypt, pgsql, etc) and compile major binaries that use those libraries (pgsql, php, apache, etc). It allows me to upgrade them easier while relying on stable libraries.
"To me, an extra 0.1% performance increase, even if I am only imagining it to be faster, is certainly worth one day a week recompiling all of the latest packages from source code."
I've worked at about an even number of places that did both. There are good reasons in some situations to roll your own, but if processor efficiency is the benefit being claimed in yours, I'd assume the peer does not know what they are talking about. If you have a good dedicated ops team, the ongoing cost is low after spending time getting it set up the first time, but if you don't have good ops people you are likely to be setting yourself up for future problems.
Because there is no way you could rack another server for 1/5 of the total cost of employing somebody for a year.
if you need options that you cant get from a package then compile, if not just use a package.
the method is in a class file, i just copy/pasted it into the same pastebin for ease
Nothing is being transferred over from the login page, $_SESSION is always empty
I'll nitpick some stuff here, please don't take offense as you _are_ asking for a code review. $this-&gt;CONFIG = $CONFIG; $this-&gt;session = $SESSION; While I don't agree with your usage of CAPS here, at least be consistent! The only thing worse than a non-standard coding style is an inconsistent application of a non-standard coding style. Regardless, you really should never use ALL CAPS for identifiers outside of constants. $model_name = isset($this-&gt;modelName) ? $this-&gt;modelName : $this-&gt;name; $this-&gt;$model_name = &amp;AppModelFactory::buildModel($model_name, $CONFIG, $firstHandle, $secondHandle); I would never permit something like `$this-&gt;$model_name` in my codebase; are you intentionally trying to make the logic hard to follow? I'm not even sure of your full intention here, but whatever it is, I'm pretty sure there's better (less clever/more explicit) ways to go about it. Also, I don't believe you need to use the `&amp;` for `&amp;AppModelFactory::buildModel()` since PHP 5. private function getPublicMethods(){ $methods = array(); $r = new \ReflectionObject($this); $r_methods = $r-&gt;getMethods(\ReflectionMethod::IS_PUBLIC); Maybe it's just me, but I'm of the firm belief that the use of reflection should not be used in production code; I see it as a huge code smell of a serious architectural deficiency. Other than the fact that you're deferring logic to runtime which could be handled beforehand by a proper setup, reflection is _slow_ (compared to doing it like normal people). public function displayPage($args) { $this-&gt;CONFIG-&gt;set('method', $this-&gt;pageOn); What the hell is going on here...why are you setting some "method" in your config just to render a page? That's...I don't know even. This next part is pretty bad, too: if (in_array($this-&gt;pageOn, $public_methods)) { // ... } else { if (!in_array($this-&gt;pageOn, $public_methods)) { // ... } else { // THIS IS UNREACHABLE CODE -- IT WILL NEVER RUN } } You run the same code twice in a row, and somehow expect a different result just a few lines later...? And don't use tabs for spacing your `{}`'s. Everyone, and by everyone I mean 99.99% of the code I've ever seen or worked with, uses either a single space (or no space) for this: if ($x) { Whereas this is a new one on me: if ($x) { Other parts of your coding style are unique as well (like the ALL CAPS I already mentioned), as well as many other places. I highly suggest you adopt a coding standard from a major framework or group... Because this style is to be avoided (never omit braces!): if(strlen($this-&gt;_path-&gt;model) == 0) $this-&gt;_path-&gt;model = $this-&gt;CONFIG-&gt;get('DEFAULT_CONTROLLER'); Lastly, don't be so eager to throw out 404's; handle them in a consistent way. Even though you have a method called `killPage()` _whose only job is to send a 404 header and exit_, you do this in-line all over the place. Debugging this app would be a giant PITA, because it's just going to 404 and exit anytime something happens it didn't expect... Rule #1: don't send a 404 unless you're absolutely certain that it's actually a 404. Since your app is generating the markup for the links, you should never have a 404 unless someone attempts to enumerate your URI's. Likewise, a missed route definition or other faulty framework logic in implementation should be handled with something like a `RuntimeException` (you really should be using exceptions...) and caught to return a friendly message to the user.
[See this line in my old code](https://github.com/maniator/SmallFry/blob/9cda67104a670a1652b1f32e6cb23e24b9c49e69/smallFry/application/AppModel.php#L67) If ModelA used ModelB and ModelB used ModelC and ModelC used ModelA... I ended up in a loop of a-&gt;b-&gt;c-&gt;a-&gt;b-&gt;c.... So to fix that, I made the factory ([my new code](https://github.com/maniator/SmallFry/blob/4c82ecc31e672c18bc19e2ed7df0f480c12eda49/lib/AppModel.php#L70))
The spacing got messed up when I committed. i do not know what happened there... I understand the braces -&gt; that should be an easy fix :-) The hanging ifs I did not notice before --&gt; nice catch! thanks! Can you explain better how to use Exceptions? (I am not very adept at them) (sorry I am answering all your comments in a weird order...) Also yes, I am not very consistent in my variable naming. I have to fix that in a later version. The problem is that I am already using this code in a few internal sites that all would need to be updated, so it might be a slow process [see this comment for a reason why the variables are mixed so much...](http://www.reddit.com/r/PHP/comments/14t4ae/small_mvc_for_php_code_review_stack_exchange/c7ghbpi) All in all thank you for the review and if you can please try to help me make it better than it is now that would be great \^_^
&gt; Can you explain better how to use Exceptions? (I am not very adept at them) This is something that you should search around (either here, or on Google/StackOverflow/etc.) for more information on. It's sort of hard to explain, but exceptions are a central paradigm to proper OOP and building robust and complex applications. They might be somewhat unintuitive initially, but stick with it and you'll be much better off. I'll try to give a quick example... Say we have this method: public function callMethod($args) { if (in_array($this-&gt;pageOn, $public_methods)) { call_user_func_array(array($this, $this-&gt;pageOn), $args); } else { // error! header("HTTP/1.1 404 Not Found"); } } Similar, using exceptions: public function callMethod($args) { if (!in_array($this-&gt;pageOn, $public_methods)) { throw new BadMethodCallException(sprintf('The method "%s" is not an allowed public method.', $this-&gt;pageOn)); } call_user_func_array(array($this, $this-&gt;pageOn), $args); } However, if you just use that a straight replacement, if a user happens to trigger that code then an HTTP 500 will result. So, you need to use a `try/catch` block, like so: try { $response = $this-&gt;callMethod($args); } catch (Exception $e) { // error! log it... Logger::error(sprintf('Exception: "%s", set level to DEBUG for stacktrace.', $e-&gt;getMessage()); Logger::debug($e-&gt;getTraceAsString()); // now handle it gracefully $response = 'There was a problem with your request, please contact support.'; } That is just the tip of the iceberg, though. There's a [decent amount of built-in exceptions that you can use](http://php.net/manual/en/spl.exceptions.php), and you can even extend any of those -- or the base `Exception` class (which is what the rest of those exceptions already do) -- to create your own. Here's the class documentation for [Exception](http://php.net/manual/en/class.exception.php). Aside from a more sane error-handling approach, the stacktraces will tell you exactly where in your code the problem occurred, as well as the method calls that resulted in that method getting called in the first place (via the _stacktrace_). Infinitely more helpful in debugging than getting a 404. &gt; The problem is that I am already using this code in a few internal sites that all would need to be updated, so it might be a slow process This is why unit-testing is so useful! Ideally, your code would be unit-tested to the point that any breaking changes would be caught, and you could refactor without worry... And I wanted to say, that although I gave all negative feedback, that doesn't mean it's all bad. You have a lot of good and decent code, a good foundation and much better than my first framework/cms attempt. So just keep at it! Good luck.
Yes, thank you! I have had issues before when I had a 404 and I had no idea why. Using exceptions might alleviate this **a lot**! I do not know how to do unit testing (if at all...) :-\ But thank you so much for your help! 
Operations can not support this.
Could you add your answer/answers to the codereview Post? I think it might be valuable to the SE community \^_^
Does necessarily have to, but it can? Can you expound upon "A model's main purpose is to reflect (and in some implementations notify) about changes in state in an application."?
I was taught that session_start had to be the first thing .. even if thats not true, this may be your problem: your assigning a SESSION var before starting SESSION
man fuck him .. I knew what you were trying to say, probably everyone on here knew, but some people have to try and show their superiority by belittling (HA!) spelling errors. don't be ashamed ..hell you could point out that his sentence structure is fucked too.
Unless your development machine is worth about $50 I really don't see why this would be a thing? Use Vagrant for everything. Virtualise your development environment to match production perfectly, so you dont have weird "oh it worked on my computer but now the website is broken" situations. 
In event based languages, models may be able to observe each other so a change in one model is immediately noticed by and acted on by another (see: [observer pattern](http://en.wikipedia.org/wiki/Observer_pattern)) component. The purpose of this is to hold application state at a component level, and to be able to create conditions that bubble to all interested objects. A model may have a backend to persist its state, such as a database, or it may have no backend at all simply persisting state in memory. The thing you need to understand is that [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) was adapted for the web from other sources. MVC was initially created to service desktop applications which don't have the same sort of lifecycle that web applications do. In smalltalk, which is the origin language of MVC, a state is set for a set of objects and nothing occurs until an object is "poked". This is to say that an interaction or event needs to occur in order for anything to happen. In smalltalk, there is no "execution starts here" component. There is simply an application state that defines what things look like right now. In this context, the model is not just a place to stuff information, no more than your body is just a place to stuff information about your hair color. The web often gets how MVC works wrong, even in the most popular MVC frameworks. The lifecycle for a proper MVC application is actually this: * user uses controller * controller changes/manipulates model * model uses view * user sees view What web applications actually use is something called [PAC](http://en.wikipedia.org/wiki/Presentation-abstraction-control) (Presentation, Abstraction, Control) the major difference being that the model and the view (which in terms of PAC is analogous to abstraction and presentation) layers have no direct interaction in PAC. Getting back to this framework - in the implementation presented in your original post the controller (AppController) is directly entwined with the model (the constructor is taking in objects for handling mysql and building a model? This isn't right), thus defeating the point of making the controller and the model separate entities to begin with. A model should be able to function completely independent of a controller. They are entirely different responsibilities.
Screw the captcha. Check out AreYouHuman.com
The reason I don't have services outside the US is frankly I'm "foreign" to any services outside the US. Literally... 99% of the data aside from radar data is obtained from the national weather service. As far as a service outside Facebook... I do have one here: http://weather.myarkansas.org it works for all 50 states despite the name. It's original design was for my home state (Arkansas) and eventually was molded to work all around the US. You can give me input on this site under here if you don't mind. That way I don't get confused on the input, it's "messier", and plain but that's the way I kept it. I designed it on Wireless internet (Pre-3G) and intend to keep it that way as friends, family, and storm spotters often don't have access to top of the line high speed internet.
You've given kid here the confidence needed for encountering shit on the internet, he was probably torn!
time we get rid of wordpress !!!
D.O.D. dBase, 128 bit R.S.A. encryption. Whattaya think? Impossible? So it can be done? Maybe slide in a Trojan horse hiding a worm?
I always build from source on my Ubuntu 12.04 dev/production boxes. Why? * Using nginx as the web server, dead simple and quick to compile under Ubuntu/Debian. From source to running in under 5 minutes tops. * Same deal with PHP-CLI/PHP-FPM, very easy to work with under Ubuntu/Debian - have done this with RHEL, it's possible, but a few more hoops to jump through with libs. I compile a lean PHP with only PHP-CLI and PHP-FPM as output (no CGI/mod_php) and the full config/make is typically under 10 minutes start to finish on even the most basic VPS. * I like to have latest stable nginx/PHP - if I go for packages you are often a little behind, or need to reply on 3rd party packages. * IFAIK PHP on Ubuntu still comes with the Suhosin patches baked in, which I don't like. * Allows me to bring in/out specific components for both nginx/PHP to keep things lighter/nimble from a binary footprint. * I don't bother compiling supporting libs from source (e.g. PCRE/Curl/MCrypt/GD/Gzip/etc.) - again Ubuntu makes this easy, as all the "dev" packages I need are in the standard package repositories. * After discovering "checkinstall" it becomes dead simple to produce deb's from the "make install" step - meaning I can very easily remove nginx/PHP versions cleanly then upgrade. Also I can compile to a deb on one box, move deb over then simply "dpkg -i packagefile.deb". Not to say this is "better" then out of the box packages (well maybe the latest PHP stable bit - I like that), but from a performance standpoint it's probably moot. I'm probably saving a bit of RAM in my runtimes though since I compile a pretty "lean and mean" PHP - but nothing to sway a decision either way. 
My first thought. P6 chip. Triple the speed of the Pentium. DADE Yeah. It's not just the chip, it has a PCI bus. But you knew that. KATE Indeed. RISC architecture is gonna change everything. DADE Yeah. RISC is good.
There is so much unfortunate comedy in this article.
Sounds like your going to do work outside of your expertiese. You need to go back and learn basic php web development. Your time might be better spent outsourcing work and just doing the designs yourself.
I would pref an API like Codeception than another DSL to learn. Thats just personal preference on my part.
I second this. No dev tools on a production box. Ever.
&gt; it needs some cleaning before I would release it Is this due to hard-coded passwords/secret keys, or just a general feeling of the code not being "good enough?" I ask because if you hold off releasing the code until its perfect, you may never get around to it. If it works, why not publish it? Maybe some in the community can help you clean it up.
The pool on the roof must be leaking.
It's because the way I hard coded the secret keys and encryption hashes. 
 wget -O /tmp/evil-application http://evil.nowhere/bin/evil-application chmod +x /tmp/evil-application /tmp/evil-application You have no compiler to use if you really need one *and* your box is still pwned.
That's like saying a serial killer is using bread based products to poison people.
This is pretty simple to do once you learn the basics of PHP and MySQL. But because your teacher didn't teach the material at an acceptable level I suggest going back and learning the basics. I don't know your skill level or your programming experience so I am going to explain how I would handle something simple like this. If I was to do this project I would do something like the following: MySQL Table Information: questions table - id -&gt; auto_increment primary_key - question -&gt; varchar 255 - answered -&gt; bigint (just a flag to check if it was answered in the code IE: 0 for unanswered 1 for answered) - datetime -&gt; datetime (for a simple timestamp of when it was entered into the database) answers table - question_id -&gt; primary_key - answer -&gt; varchar 255 - datetime -&gt; datetime (for when it was answered) - alternatively you could store all the data in the same table, but I usually like to split mine up. for your class just a few simple methods will handle it all. Methods: (Try using a PDO or MySQLi to handle your queries as well as make sure you escape your data) I would read up on how to avoid SQL injection before writing your queries. - addQuestion() -&gt; Insert's a question into the database. - addAnswer() -&gt; Insert's an answer into the database. - getQuestions() -&gt; Retrieves questions from the database, alternatively you could set a parameter if you wanted to just select one question. - getAnswers() -&gt; Same as getQuestions() essentially, you could just use one method and use a parameter to determine if the call is for answers or questions. Optional: - deleteQuestion() -&gt; Deletes a question from the database (alternatively you could just set a flag in a table instead of actually removing it) - saveQuestion() -&gt; Could do a more robust query to insert and or update an existing question. - deleteAnswer() -&gt; Same as deleteQuestion() - saveAnswer() -&gt; Same as saveQuestion() For the front end: Management Side: - Forms -&gt; Verify the data -&gt; Send it to the method -&gt; Check whether the method returned true / false -&gt; Send the verification message to the front end. - Interface with a list of the questions (look into pagination if you want to go that route) - A more detailed interface with the question / answer details. - Interface to add/answer (edit/delete) questions that call the methods in your class. User Side: - Interface with questions and answers. - Form to allow users to ask questions. (Make sure you are verifying the data that is being sent) Depending on if you want registration and users the project gets a bit more detailed. But I think the details above are enough to get started. Ultimately it is up to you how you handle the project, but first and foremost. Do research and learn the basics. You could obviously write this much simpler and easier. But in most cases in programming simpler and easier isn't always better. I don't know all of the project details and how detailed your professor wants the project. This is just how I would handle something simple like this. If it doesn't have to be written from scratch, just look into a free open-source Q&amp;A script. If it is completely outside of your skill-set then I suggest out-sourcing the back-end and focusing on the front end if that is what you are more experienced in. (Edited for formatting and added a couple extra things.)
Mention the underlying programming language; suddenly your article is informed.
Only advantage to bigint is a larger byte size. So yes, I probably should have used tinyint for the flag. Just a habit I suppose.
Yes, im using codeigniter + bonfire to get something similar.
^ **THIS**
on a side note. If you are just now writing code don't use mysql in php. Use either mysqli or pdo. you are using deprecated functions in your code listed above. 
Premature optimization is not wise. If you plan to move to a VPS in case it takes off, forget about optimizing it before its in the VPS and having the traffic to consider optimization; it will slow down your development.
What you're seeing is typecasting, The word PDOException there is basically the syntax to say Only if $e is an object insance of the PDOException class. Apress's 2nd edition of "objects, patterns, and practices" went over this very well, i hope they did as good of a job in explaining this in 3rd edition if that's what you're reading.
I think you're just trying to use as many acronyms as possible.
This is a great book, here is a link on Amazon: http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&amp;qid=1355651016&amp;sr=8-1&amp;keywords=design+patterns
When you want something to not have a value, and also not be of a specific type. PHP is very loosely typed so this usually isn't a huge deal, but I still try to use NULL where appropriate. * It can be used for resetting a local variable in a loop. * It can be used when returning from a function/method. * It can be used for optional arguments to a function/method, especially if they will be mixed type. To expand on this one; you want to try to use the expected input for optional arguments. It makes reading the code a little bit easier, since one can reasonably assume what the input type should be. If you had `someFunction($optional = '')`, it would appear that you wish `$optional` to be a string. Likewise, if you had `someFunction($optional = array()`, it would appear that `$optional` should be an array. If you are expecting a mixed input (could be string, or an array, or even an object), you could use `someFunction($optional = null)`. Even though any data type can still be passed regardless of what type you set the `$optional` to (unless you use [Type hinting](http://php.net/manual/en/language.oop5.typehinting.php)), it's still better to use the expected input type as the default.
I won't expect a response, but here's mine anyway. &gt;&gt; multiple level of inheritance &gt; usually not viewed in a positive light In who's opinion is multiple levels of inheritance viewed poorly? Same for setters/getters? You prefer public instance variables? Both Ruby and C# projects often use mutliple levels of inheritance (when necessary of course). &gt; Ruby doesn't even have those and it is considered an OO language What do we care about Ruby's OO implementation on the PHP board - the OP asked about good code bases to look at. I think that a code base that fully uses PHP's (rather poor) OO implementation is fitting. If you want to discuss PHP's OO implementation, that for another post. &gt; most of PHP libraries are procedural wrapped in a class structure that fools newcomers into thinking its object oriented. Huh? I'm not sure you know the difference, can you elaborate? 
 public function setCreatedDate(\DateTime $time = null) { if ($time === null) $time = new \DateTime; ... } If you are using classtyping in ypur method arguments, null is the only default value you can set
But just remember a variable can have the following $str = ''; $str = null; $str = 0; $str = false; if (!$str) // true on all 4 if ($str == false) // true on all 4 if ($str === false) // Only true on the last one if (is_null($str)) // All 4 true if ($str === null) // Only the second would be true
Have you looked Behat? 
Your first and third test cause warnings. Notice: Undefined variable: sFax in bla.php on line 2 Notice: Undefined variable: sFax in bla.php on line 4 Here's a complete list: &lt;?php $a = null; var_dump($a === null); // true var_dump(!isset($a)); // true var_dump(is_null($a)); // true $b; var_dump($b === null); // warning var_dump(!isset($b)); // true var_dump(is_null($b)); // warning var_dump($c === null); // warning var_dump(!isset($c)); // true var_dump(is_null($c)); // warning 
actually it's better to avoid using Nulls at all. There is an alternative called the Option monad. Maybe I'll write an article on it. Unfortunately in PHP avoiding nulls is impossible, but limiting them in your own code is preferable.
Hungarian notation, ouch. =\ Do you always code like it's 1999 and Java?
Fixed, thanks for pointing that out! Just wrote that function yesterday, and I never got around to testing it before pushing some changes.
SSL doesn't have much of a connection with PHP. Your webserver only tells PHP that SSL is enabled or disabled, and that's pretty much it. Some webserver configurations allow you to have a different document root for HTTPS and Non-HTTPS, but reading between the lines tells me that's not the problem.
Could you post some code please? Btw, you might want to look at using sessions to handle that id parameter as on its own, anyone could produce an ID and it would activate it.
Well, then find out if mysql_insert_id() is indeed returning 0 (or 'false'). The PHP docs are pretty clear on what might cause that. http://php.net/manual/en/function.mysql-insert-id.php#refsect1-function.mysql-insert-id-returnvalues
foreach($array as $key =&gt; $value) $array is an array (can contain anything.. string, int, objects ,arrays...) $value is whatever is in $array[$key] Edit: If you don't need to use the $key, you can just skip it
 $query = "INSERT INTO Orders (customer_name, customer_address, customer_apt, customer_zip, customer_phone, order_type, delivery_time, follow_delivery_time, customer_id) VALUES ('$name', '$addr', '$apt', $zip, '$phone', $order_type, FROM_UNIXTIME($order_time), $order_asap, $customer_id )"; mysql_query($query); $order_id = mysql_insert_id(); $order_id keeps coming out as 0. It worked fine just a couple weeks ago.
My point is that I don't agree. There are plenty of reasons to return null. The mistake is in the API documentation (never great for PHP) which should state the return and whether no result is an empty array or null or such.
Describe your Orders table
order_id int(11) No auto_increment google_id varchar(200) utf8_general_ci Yes NULL order_active int(1) No 0 order_type int(2) No 0 delivery_time datetime No follow_delivery_time int(2) No customer_id int(11) No 0 customer_name varchar(255) utf8_general_ci No customer_address varchar(255) utf8_general_ci No customer_cross_street varchar(255) utf8_general_ci No customer_apt varchar(255) utf8_general_ci No customer_phone varchar(20) utf8_general_ci No customer_zip int(5) No customer_email varchar(255) utf8_general_ci No order_placed_time timestamp No CURRENT_TIMESTAMP order_cancelled int(1) No 0 customer_cost decimal(5,2) No paid_with_credit_card int(1) No 1 gratuity_amount decimal(5,2) No 0.00 Edit: So, it looks like the INSERT isn't happening. That might be why mysql_insert_id() is returning 0. Edit2: If I move just this out to a test place, I can get it to work fine. It inserts and updates $order_id. However, I did change the variables to hard-coded values for testing.
Why are you still using mysql functions?! 
It's super easy, foreach goes through **each** element of an object/array. Hence the name, foreach.
Output the exact string which is being passed to mysql. There could be many reasons why this insert query is failing (and giving the impression insert_id returned 0. Always check the return value of mysql_query, and call mysql_error if it fails, to see what the problem is. I suspect you should have quotes around $zip, and possibly the other unquoted fields also. 
That's awful! 
Is there anything in your error log?
Try logging it to a file... if (!mysql_query($query)) { if ($f = fopen("some_protected_dir/query.log", "a+")) { fwrite($f, mysql_error()); fwrite($f, $query); fclose($f); } } Also make sure you are escaping every parameter being passed into the query (with mysql_real_escape), since otherwise its vulnerable to sql injection. If they are not being escaped, and one of your fields contains a single quote character, its another reason the query might fail with an error 
Then maybe you’ll like the example with indices. You see, for all basic purposes, in php arrays, all arrays can be considered an associative arrays. When no key is specified, the index becomes the key. Hence: $fruits = array( 'Tasty Banana', 'Green apple', 'Round orange', ); foreach($fruits as $index =&gt; $fruit) echo "$index: $fruit\n"; Will print: 0: Tasty Banana 1: Green apple 2: Round orange Where the $fruits array is practically the same as $fruits = array( 0 =&gt; 'Tasty Banana', 1 =&gt; 'Green apple', 2 =&gt; 'Round orange', ); 
If it were raw `$_POST[...]` statements, I'd agree: unescaped = Problem. However, let's not jump to conclusions. Still, MySQLi is a horrible patch on a festering wound.
Of course it is, but it's still better than the MySQL functions. Also note I said "apparently" and not "it does." I was not jumping to any conclusions. 
Thanks! And yeah, that is kind of what I have been using. I am just stuck trying to get the POST function to take what the user submits and and use that as the zipcode
When you're googling on how to do something, sort by newest date (or try to find something that's less than a year old), there's a lot of old shit online on php (which usually is a) outdated b) written by idiots). I don't know why it's so hard in this case, but you _need_ to keep up to date, especially with php. Stick to a sane db interface, don't be an idiot. Edit: Try to look into stuff which makes your life easier, don't reinvent any wheels, somewhere, someone probably already has done the thing you want to do. Do it _now_, not when you're already 4 weeks into a project.
Please, don't include a file blindly, check always your variables and try to sanitize them.
Null is a sentinel value and just as valid as any other sentinel value. It is best applied to a scenario where an object is expected, but there is a possibility that none exists. i.e. the return value of a function that returns an object in the event that an error occurs. False is just as valid a sentinel value, as would be an exception or a custom object that represents an error condition. It's a matter of programming style, mostly. 
Aside: In my opinion, null is one of those bad ideas that sounds like a good one at first. Like singletons.
Reddit appears to have mangled your formatting. Care to fix it?
If you must go with an off the self solution, you might want to give [fork-cms](http://www.fork-cms.com/) a look.
I just want to say thanks for all this help, it definitely help me understand it a little better. Thanks every one.
Think about caching database queries when you *actually* have a popular website that is slowing down, and after profiling you've identified that as the primary bottleneck, and current best layer of execution to implement caching. **Not before**.
We might be able to help a bit more if you could go into a bit more detail. What are you trying right now? What results are you getting from it? 
Personally I like to use wordpress' .htaccess file: # BEGIN WordPress &lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / RewriteRule ^index\.php$ - [L] RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.php [L] &lt;/IfModule&gt; # END WordPress Then within index.php I do something like: &lt;?php define("PUBLICDIR", "/"); define("DIRSTART", substr_count(PUBLICDIR,"/")); $request = $_SERVER['REQUEST_URI']; $request = explode("/",$request); $file = $request[DIRSTART] .".php"; if($request[DIRSTART] == null || stristr($request[DIRSTART], 'index') || stristr($request[DIRSTART], 'page')) { // Request Empty, Display Homepage require_once "home.php"; } else if(file_exists($file)) { // Request Exists and File Exists, Display Page require_once $request[DIRSTART] .".php"; } else { // Request Exists, but File Does Not, Throw 404 Header and Display 404 Page header("HTTP/1.0 404 Not Found"); require_once "404.php"; } 
If your changing the way the data is stored in the database you are going to have to change how they are read and written too anyways. I don't see how having a single field fax number that is missing as null makes that any easier then if it was just an empty string. &gt; then you would do well to represent missing values as nulls Why? I see no reason why you couldn't store country code, area code, station code, extension as empty strings if not provided.
Is there some functional reason for using a goto?
I'm going to have to see that article. I use NULL extensively, in fact as much as I have dynamic typing, the ability to pass NULL in place of a value is a feature that I love.
False is not the same as null. False is an explicit affirmation of falseness; null means no particular value, true or false, has been determined.
An interface/abstract class basically guarantees that an inheriting class will define a particular method. Here's an example which isn't necessarily PHP, but easy to understand. Say you're making a space shooter game, where you have ships, asteroids and bullets. Though they're different, they share many things in common: They need to move, they need to be rendered, they need to handle collisions. Rendering is the same for all of these objects: simply draw the object at its current co-ordinates on the screen. Collisions and movement are different though: a bullet moves in a straight line and disappears upon collision. An asteroid moves slowly, while rotating, and explodes into smaller asteroids when hit. A ship's movement requires input and more complex physics. You could use an abstract 'GameEntity' class to define a 'render()' method, which does the same for each entity, and abstract methods for 'movement()' and 'collision($with)', which are defined by the implementing classes themselves. Then you can use a simple loop to iterate through all of your GameEntity objects calling render(), movement() and collision(), knowing that the methods exist, without having to know what type of entity you're dealing with. The advantage of this is that if you want to add a new entity, such as a UFO, you simply inherit the abstract class and you know that your existing code will be compatible without modification specifically to account for the UFO class.
OK, a real life example of why abstract classes are good: I've recently been integrating with eBay's Trading API for work and there are different messages you can send to eBay to add, revise or end a listing but they all share some common logic like the mechanism for actually sending the data for example. This lead me to have classes for adding, revising and ending listing that all extend one common, abstract class. Here's a heavily simplified version of those classes: abstract class EbayProductFeed { public function execute() { $str_xml = $this-&gt;generate_xml(); $this-&gt;send_request($str_xml); } abstract protected function generate_xml(); protected function send_request($str_xml) { // Send the request to eBay and get a response $this-&gt;process_response($str_response); } abstract protected function process_response($str_xml); } class EbayProductAdd extends EbayProductFeed { protected function generate_xml() { // Build up the XML return $str_xml; } protected function process_response($str_xml) { // Interpret the response for this action } } This allows us to re-use the common send_request() functionality whilst having bespoke generate_xml() and process_response() functionaility. As EbayProductFeed cannot be used on its own we make it abstract. We make the generate_xml() and process_response() methods abstract to enforce their existance in the child classes so that the parent class can safely call them. As for interfaces I personnaly rarely use them, it's generally only ever to get around the lack of multiple inheritence. If for example we already had the class structure above but I needed to enforce another, separate set of methods on EbayProductAdd I may put them in an interface.
Ignoring my general mistrust or distaste for goto, this really needs a README before you start linking it out there. Also, shove a composer.json in there and start following the PSR-0 and PSR-1 standards at least.
I wrote an app to catalog my books, albums, movies, etc. It utilizes the basic LAMP stack, and is pretty useful to me. 
I actually can already customize a CMS called Nuke-Evo. I do create modules for it quite often. But would like to expand into other things. But i do want to create stuff that is good for public use. 
Thanks for sharing. I've been looking at forking in PHP myself, and the libraries available. So many seem really huge. But I'd agree with philsturgeon, it would be much improved by adding a composer file, following psr-0 (it almost does) and getting rid of side effects (the echo's especially).
+1 We've been working with it for the past year and have created a lot of sites and modules on it, cannot recommend it highly enough. You simply will not find a more helpful and welcoming community anywhere and getting started with it is just a breeze.
I would develop a "go-to" project. A project that you work on in between your other projects. I've noticed that many programmers make a framework that is custom tailored to your programming style. While it does sound like reinventing the wheel, it can be a very educational side project. If you are successful at building your own framework, then you will save your future self many work-hours.
I would also go for that one. If you plan this well, prethink a lot of values, find a niche where you can grow - this could be a very cool project: programming-wise, technology-wise and social-wise :P
Bit by bit, PHP is growing up.
Did you consider helping some opensource projects? Start with simple patches, advance step-by-step
This is a very, very good idea. Continue upgrading it as you learn new stuff, and you can use it as a base for many of your new projects to get them off the ground faster.
But really, there is not a single reason to use goto, instead, separate the code into multiple (private) methods... And replace the echoes with comments (and/or possibly callbacks where appropriate).
+1 been using pyrocms for all of my websites. It is so easy to customize/theme and the community is so helpful!
What to expect: Hosts taking forever to update.
+1 for welcoming community ! The core developers respond very quickly if you have any questions !
Keep spamming their mailboxes. (:
Anybody knows when php expects to release 5.5 ?
On the compiler side - there was some interesting discussion here last week (I'm not sure if it's just mailing list chatter at the moment - or something with substance). http://www.phpclasses.org/blog/post/170-The-Debate-of-Making-PHP-Faster-using-a-JIT-Compiler--Lately-in-PHP-podcast-episode-19.html
You can already do that: echo $str{0} // returns first character
If anything, this article gives a rather easy to understand primer on generators for anyone still having trouble with the concept.
Yeah I saw that someone floated the idea of moving PHP's compiler to a 2-pass system which would allow for JIT-like optimisations and massive simplification of the internals. But, it would require a complete rewrite of the parser and compiler, would have worse performance and memory usage (until a lot of optimisation was done) and nobody could be bothered with the work. I think on the scale of things it was more work than the idea of PHP6 moving to all-unicode internals, and seeing how that project failed doesn't give me great hope.
What's the difference between the "bits and blobs" feature from how arrays of strings currently work? As another user pointed out, you can do "$str{0}" to get the first character.
It's straight string dereferencing, you won't need to assign it to a variable first.
Hopeful for April 2013 [1] [1] http://marc.info/?l=php-internals&amp;m=135525850120134&amp;w=2
I think that the key point the article was missing (and thus making this feature very confusing) is that generators are just an easy way to write iterators. They are designed to blend perfectly with `foreach` iteration. You wouldn't normally go manually calling `next()` and `current()` on them. A simple example that I personally like to use is an `xrange()` function, which is the iterator-variant of `range()`: function xrange($start, $end, $step = 1) { for ($i = $start; $i &lt;= $end; $i += $step) { yield $i; } } foreach (xrange(0, 1000000) as $i) { // } The `foreach` loop looks like it is iterating through the array of integers from 0 to a million. But without ever creating the array. The elements are generated on the fly. This example isn't vastly useful, but it should demonstrate the main point. If you ever had the "pleasure" of writing slightly more complex iterator classes yourself, then you'll understand just how much easier this is. What this article covers is less the generators idea (a simple way to write iterators), rather it is the coroutine idea (an interruptible function). Coroutines are the generalization of generators and they are a really powerful concept. But they need quite a bit of effort to understand them properly in the first place. I plan to write a blog post on task scheduling with coroutines some time soon, that will show some of the crazy stuff they can be used for.
I feel like they didn't make a good job describing the actual use and focused too much on the internal details. The point behind generators is to simplify iterator implementations and this article doesn't really get this across. (See also http://www.reddit.com/r/PHP/comments/1505sv/what_to_expect_from_php_55_nettuts/c7i7ohx).
Related RFC: https://wiki.php.net/rfc/ast_based_parsing_compilation_process Sadly I had to put that project on hold, as I don't have the time for this kind of stuff anymore :(
I don't really think that PHP is a "mess" - I learned to program doing Python and PHP. If you want the site to look nice you'll have to learn a framework, or just use AJAX - so at a minimum that's HTML / CSS / Javascript for display, and PHP for backend processing. At this point have you thought about the database backend for this, or secure file storage? What about billing and security? I think that if it's an idea you're excited about then you should do it, but perhaps you should start first with some smaller projects that you can get passionate about. It's a lot easier getting some of those "lessons learned" under your belt with small projects, then growing from there. I started PHP programming with the idea that I was going to start a real estate site. I put months and months and months into it, and learned a lot along the way. I found near the end of the project that I'd learned enough to know that the code should be rebuilt. It wasn't terrible code, but with my new "lessons learned" I'd have built the project a lot leaner and more efficient. That code was then revised, and morphed into a classified ad website, which is currently being sold to a local publisher.
Uhm, that's why I'm asking. Care to elaborate on the "technical competence" and "legal competence", it would really be helpful. Nonetheless, Thanks.
Technical competence - Being able to actually implement the idea into an actual product or service. Legal competence - Being able to cover your arse from all the lawsuits you're about to receive for launching such a service, infringing on all sorts of copyrights.
Right from http://agiletoolkit.org/, a framework that integrates jQuery: &gt; Don't repeat yourself when writing markup for a button. Design your User Interface once and use it forever. I didn't mean to imply that you could use either a framework or AJAX, they obviously aren't exclusionary.
Again, I'm asking you how exactly would I make this into a service, you have yet to do so. Although I'm no legal expert, why exactly is places like Rapidshare, Hulkshare, BeeMP3, and 4shared still up and running? EDIT: Piratebay too?
Confirmed for thirteen year old.
Pardon?
Ok, I'll say you don't have to use a framework or AJAX to have a nice looking site. There you are then. But every time I visit a page where I have to submit an entire form just to find that one field didn't meet the site's validation requirements, or when no progress meter for file upload or processing is presented it makes me shudder.
That's called usability.
start in the beginning. take an online course[ like cs50](https://www.google.com/search?q=cs5-&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a#hl=en&amp;client=firefox-a&amp;hs=BzS&amp;tbo=d&amp;rls=org.mozilla:en-US%3Aofficial&amp;sclient=psy-ab&amp;q=cs50&amp;oq=cs50&amp;gs_l=serp.3..0l4.2554.2938.0.3091.2.2.0.0.0.0.105.192.1j1.2.0.les%3B..0.0...1c.1.UJwnjvexng8&amp;pbx=1&amp;bav=on.2,or.r_gc.r_pw.r_qf.&amp;bvm=bv.1355325884,d.aWM&amp;fp=eeaed9fac54bfaee&amp;bpcl=39967673&amp;biw=1680&amp;bih=878) (google it) and go grab a development book, maybe [Wrox: php, mysql, apache](http://www.amazon.com/Beginning-PHP-Apache-MySQL-Development/dp/0470391146)--- get thru both of those and you'll be able to answer your question on where to "start".
Dude seriously, Fuck you. You have provided absolutely no positive contribution to my thread. I could see if you actually contributed some valuable information while being blunt, but you didn't. 
Really? I have done two PHP production server builds in the last two weeks - both running PHP 5.4.9 (FPM with Nginx) and APC 3.1.13 (which is tagged beta) - have been working great, no segfaults here.
Yep same as me, packaged from dotdeb. After some time the FPM processes would segfault continuously until the parent process was restarted.
Right. Try writing a unit test for some that uses goto as its main flow controller. It's not fun.
Hmm I normally do my value validation in PHP, my knowledge of sql doesn't go much further then insert, update, delete, select, joins, count, distinct, and some of the string, date, and math functions. I didn't know CHECK existed and have never seen it used in any of the open source projects I've used. I was thinking more in terms of null and '' both being falsey in PHP and and not using ===. 
Yeah it's usually one site/server (VPS) so static makes more sense. But you could be on to something, maybe PHP-FPM dynamic is borked with APC, which would make sense since all those childs would be thrashing APC shared memory a tonne during it's workflow.
I'm glad I had some new information to offer you! You should still do validation outside of the DB. I think check constraints are more typically employed as a basic sanity check than a mechanism for validation. The errors returned by the DB might not be informative enough to be useful to the end user. I know some DBs will only give you the first constraint violation even if you've violated more than one. But check constraints can be helpful in scenarios like yours, where another developer is involved who may decide to forego the model code you wrote and write his own. Or if he decides to connect to the DB directly and poke around in there. With a basic check on the table you can enforce data integrity. 
I agree, he hobbled together some scary code for that gmail class. Generators are really designed for iterating values on the fly and not some bastardize equivalent of function parameters. 
At this point I really think we should all be running our own vms ala aws ec2 or linode or whomever. It's cheap and having root is so addictive once you're used to it. 
Just because the form representation of "not set" is an empty string, doesn't mean you should persist that to the database. Not set in most languages is null. I fail to see the reason behind forcing HTTP on your data model.
&gt;What to expect: Hosts taking forever to update. The solution to this problem is to quit signing up with shitty hosting providers. My hosting provider updated to PHP 5.4 a mere couple of months after its release. If you keep going after the price tag , then don't be surprised that you get what you pay for. 
PM me more information
weird choice of capitalization.
Can you give an example of how this would be used?
Ah, it's that time of day again, isn't it. Time to repost information that's already in the official documentation, in shitty English, for the sole purpose of driving traffic to a blog, leaving nothing of value to the community. Yay, blogspam!
This is awful. Stop posting.
&gt; Is what is actually killing you.. When that first arguement var is set to true, it deletes previous sesion data.. So if you were calling that same function on the next page, it's clearing out $_SESSION... &gt; &gt; http://php.net/manual/en/function.session-regenerate-id.php &gt; &gt; RTFM! :) and if you'd actually RTFM (as you put it), you'd know that you're incorrect. the `true delete_old_session` argument only deletes the previous session *file*, not the previous session data which is copied to the new session id generated with `session_regenerate_id()`. &lt;pre&gt; &lt;?php session_start(); $_SESSION['foo'] = 'bar'; var_dump($_SESSION); session_regenerate_id(TRUE); var_dump($_SESSION); ?&gt; &lt;/pre&gt; will give you: array(1) { ["foo"]=&gt; string(3) "bar" } array(1) { ["foo"]=&gt; string(3) "bar" }
Crap, I got the dates wrong in my head. That does leave a bit less time than expected. Need to start working on the remaining stuff asap.
Okay everybody, we know it uses goto's. Can I ask what is the purpose of this script? Looks interesting, but your example.php really isn't a thorough example of what this script is trying to do.
youll want to use cURL which has php functions that are easy to use. basic usage: $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); $data = curl_exec($ch); //the output curl_close($ch); there are [lots of options](http://php.net/manual/en/function.curl-setopt.php) you can set. not sure what you need to do with the keys, but this will give you the connection you need.
I'll create a new repo. I'll put a link up as soon as it's done.
Troy thanks again. You're a RETS super-guru. I wish I would have found this video when I first started. Your library has performed awesome so far. I will have to try that asterisk trick as well.
Hey, me too! Restarted it three times before I had something respectable.
I will look into JSONP and WebDAV tomorrow at work, thanks! 
http://webdev-il.blogspot.com/2011/07/what-is-crossdomainxml-file.html
I actually saw this product but I'm not sure we would be able to use it. It's an annual lease license and it's quite expensive (several hundred pounds per year). Also, I'm not convinced it'll do the proxy connections without a username password. But thanks, I'll look at it again.
Is this a file that SharePoint web services will use and listen to? It looks promising. :)
There's nothing wrong with setting a bunch of JavaScript variables in a &lt;script&gt; block that are accessed by static scripts. Lots of environments make it necessary, and it certainly reduces the delay that would be introduced in an AJAX call to get these values from the server.
Do you have a repo of the project somewhere? 
On my team, I'm the main php developer of the two of us. We have a git server that we host here locally running on Ubu 12.04 lts. We have three servers all running nearly identical setups. Ubuntu 12.04 lts with Apache, mod_spdy, and php-fpm. Our development server runs x-debug with the proxy so we don't have to change the config to set different ips. We also maintain tests for all of our classes with phpunit and jenkins. All development is done in Komodo IDE which runs php internally to check for errors and fully integrates with php-xdebug.
I was in a similar situation (albeit, on my own, instead of a team) and fine with the way things are. But when I was hired on as a web developer I started using a new IDE, version control, multiple environments. 9 months later, I could never go back to the way things used to be. For an IDE, personally, I would say to use whatever you feel comfortable with. But if you can get a really good IDE and setup some convenience plugins (such as plugins for php frameworks, templating languages like twig, etc. - if you use them), they can really help make life easier. Personally, I love sublime, but it might be a good idea to try others out there and each person just go with whichever one they like best. Version control makes life a lot easier. Even when I am doing things solo, it is so much easier and takes so much less time committing a change and then doing a simple pull on live. With a local/dev/prod setup the same works very well to, in my company we have a separate production branch and then when it's time to push to live, we simply merge branches. In my opinion a local/dev/production setup with version control, using git or mercurial will help cut time, mistakes and just make things easier. Good luck.
This. Before you do anything else, get your code under source control. I don't think it is possible to over emphasize this.
mehh. I started this new job 2 months ago. The local development server had error reporting turned off when I arrived. Count yourself somewhat lucky
Do you have a version control client on your dev server, and you just pull a fresh copy of the dev branch to the machine?
Baby steps for now. :) I had looked at [GitStack](http://gitstack.com/) since it ran on Windows (and we're predominately Windows), but I figured it would be easier to use Github since it's something we wouldn't have to manage.
We use mercurial currently (git is the more popular one, however) with bitbucket. So we all have mercurial installed locally, on production and on dev. So I make a change locally, commit and push it. SSH into the dev server, navigate to the folder and do a pull. Once you start using it, you realize it's much easier and faster than FTP copy and pasting. Plus, if you accidentally commit a change, you can revert files and such.
Google Analytics is a great tool to use for fine-grained detailed tracking information. However, it is not the only tool and it also can't do everything for you. For example, you can not track bots or crawlers via Google Analytics. It is javascript-based and mostly any bot will not bother to run javascript. They area usually just crawling the content of your page. As such I can't find out how many times Bing bot or Google bot or Yahoo's crawler is hitting my pages. For that I would need to refer to my web server logs. The point of the article was not to suggest a replacement for one analytics tool over the other, but to actually provide a flat and simplified look at how getting web analytic data can be achieved -- even with the most minimalistic of tools.
1. Task manager gives you a task to do ( functionality, wording, design etc ..) 2. Develop this thing on your local machine. 2. Send it to Dev server, this is the first try of your codes ( ask a co-worker to test it and approve it ie agile method). 3. You send it to a svn/git repository and put the task ready for PreProd server. 4. PreProd server wich is the exactly same things as the production server ( same PHP version, same server, it's like real test) 5. Commercial/Marketing/whoever give the task check that what you did is OK 6. Production server your task is live on the web. That was the things we handled development in a startup where i did my first internship. I feel like it's hard to stick with it, it's heavy but you will get things done nicely and without any surprise on the live side. We used a bugtracker for the task manager. I don't know if it's good or not but i liked it.
Since you and your team aren't source code control gurus, it may be easier to start out with subversion. It isn't the new hotness but it works fine. The main disadvantage is that branching and merging is a complete pain in the butt compared to git. However, the centralized aspect of the repository and the simpler work flow means that screw ups are less likely. If you don't want to manage it, and you don't mind paying a little ($10/mo), Atlassian's product, JIRA, works quite will. All you need to do is setup your repo there and then get your team members to install TortiseSVN. I, personally, use git for my personal projects but every day job I've ever had used subversion. I believe that picking git vs svn is a matter of your co-workers. If they are 9-5ers and just want to get the job done, use svn. If they are tinkerers and love playing with new toys, git is the way to go. It really doesn't matter. Hell Visual Source Safe would be better than nothing. :)
Not all of them, no. GA would actually do a worse job at answering question about how people reached your site. However, once there (inside of your cozy little web space) it does an excellent job of tracking them. There's also no biased of any kind. Using both GA and your web server logs in your analytics efforts is a common ground. You want raw data about the traffic from your web server for purposes that are usually different than those you use a tool like GA for. :)
I would recommend to you Sublime Text 2 it is awesome! for a bonus watch the: [Perfect Workflow in Sublime Text 2](https://tutsplus.com/course/improve-workflow-in-sublime-text-2/) tutorial *by Jeffrey Way*
I don't see anything wrong with setting Javascript variables in your template. Thought, I feel that it mucks up the javascript global namespace. My preferred method is to set the values as html5 data attributes on their related dom elements. &lt;img src="/path/to/image.jpg" data-product-id="15" /&gt; 
What HTTP server do you use?
Apache, we don't really see a reason to move for the moment.
First of all let me congratulate you for having taken the initiative to make the change.. Have you tried Mercurial? It is much easier to use than git, does almost everything that git can do.it commands are also a bit more intuitive than git. Bitbucket.org is the equivalent of github for mercurial. I think it now supports git too.Windows is also better supported by mercurial team. On the other hand, Git is much more popular and lots of your potential clients may be already using git. I suggest you give both mercurial and git serious consideration as these two of the most popular things in the distributed version control world right now. Regarding your other question, I think the best way for development is in your own local machine. It is pretty much required to fully utilize git or mercurial workflow. 
Hahaha, that sound exactly like the situation I was in. Two main developers, one being me, no idea about version control and IDE. As many others have said: Step one is getting your projects under version control ASAP. Of course you can pay Github for a company profile, but it's really fucking easy to set up a central repo on any server you guys can reach (be it via SSH or whatever). Step two: get an IDE as fast as you can. Someone mentioned Aptana, and while you can use it, for PHP Developers I strongly (STRONGLY) recommend getting "PHPStorm". Their tagline is "develop with pleasure" and boy, do they deliver. You can test the full featured PHPStorm free for 30 days, so no need to step blindly into it.
Sounds like where I work. The excuse I've heard since I've started is that "We will do it (implement things like vcs) when we have time," with a wink, because there is never time. Last week, I took some of my reddit browsing time and wrote up a document for an absolute beginner on using Git, in a way that wouldn't upset anybody's existing development methods. It was already installed on our systems, it just needed to be put into use. Sending that document lit a fire. Now somebody's setting up a server for the remote repos that gets automatically backed up. I guess all it took was somebody to give it a little push. We aren't forced to develop in any particular environment. One thing I love about where I work is the hands-off lack of micromanagement. But a little organization was becoming more and more necessary. Personally, I do all of my PHP and other coding in vim. I'm at the magical point with vim where I don't have to think about how it works, things just happen when I want them to, much more quickly than if I'd have to stop my flow and reach for a mouse. My development environment is a command line terminal. It's where I'm most comfortable. At work it makes sense to work on Fedora. At home, I have an installation of ArchLinux that doesn't include anything beyond a WM (no desktop or folders, just multiple terminal windows.)
Simple, efficient, productive. The right way to code. :)
Git all of the things. If it's not in Git, or Mercurial, you're going to have a bad time. Make your development environments identical, using Vagrant locally, running from a converted ISO of whatever your live server runs. Keep them both identical by using Chef/Puppet/Whatever to provision updates, instead of installing things separately and telling all your devs to remember to upgrade the PHP version from 5.4.9 to 5.4.10. That stuff matters. MAMP is a big nono, especially if you are deploying to IIS as they are pretty different. "But it works on my machine" is no help when your live site is down.
Good catch. I didn't notice that he was *already* forking. My current day job does that; we manually merge in hotfixes to release tags. It isn't *difficult* to manage. It is true that git would be much easier, but taking the time to teach everybody else a new source control system is just too low on the priority list. Your point is well taken though, if you have to learn a system anyway, might as well start with git. Once you get over the initial learning hurdle, everything else will be cake.
Would you mind sending me your Git tutorial? I would love to read it. I've been reading some stuff on how to use Git, but I'd like to see what you have if possible.
Git Flow is a goddamned abortion. How can you possibly keep all of [this](http://nvie.com/img/2009/12/Screen-shot-2009-12-24-at-11.32.03.png) straight?
You can stip the last step if you set up a post-receive hook.
a great place that helped me as a stepping stone: http://www.tizag.com/phpT/ now keep in mind you shouldn't use this as your ten commandments, but it gives you an understanding of how PHP is used. now, what happens after you are on the stepping stone? head over to http://php.net and read the documentation for functions that you might want to get familiar with. once you are settled in (1-2months? depending on your talent, and how confident you are with PHP), start look at frameworks (codeigniter is very noob friendly)
A good way to mitigate this, I've found, is to use an object for not only your variables, but also your functions. if(typeof(MagicSite) == "undefined") { var MagicSite = {}; } MagicSite.settings = { foo: "bar", baz: "quux" }; MagicSite.doThing = function(x, y, z) { alert(z + " " + y + " " + x); }; This ensures that your project's JavaScript namespace stays under control, and allows you to add variables and functionality to MagicSite as you need it. (Edit: syntax)
Another setup that is not always mentioned is a local, shared dev environment. Rather than each developer having their own VM instance on their local machine that has to be maintained separately, you could have a single server that everyone uses for development. That server can be on the local network to improve performance or it could be remote or virtualized depending on your needs. I manage the dev team for a mid-size advertising agency, so we work on a lot of web projects and everyone ends up working on everything if they stay here long enough. We decided to go with a shared dev environment because it's easier than replicating the code and database for 100+ websites to everyone's local machine. It's also very convenient when I'm moving between my work and home desktops or using somebody else's computer to make a simple CSS tweak or something via SSH. Sounds like you already have a dev/stage/live setup of some kind, so you might already know what works best. I just wanted to offer an alternative that would take a little less time to maintain for a smaller team. Good luck!
We do something like that on our shared dev server, but with SVN and a post-commit hook instead of Git/Mercurial. A developer still has to manually update stage or production, but anything that's committed is automatically updated on dev. This turns out to be super convenient when letting designers into SVN, as well, as they can just find and update an image asset without bothering anyone else or messing around with SSH.
Don't use notepad++ - it's a joke. You're using amateur tools with an amateur setup, sorry, but it's the case. Start using a proper ide. I use an excellent IDE called [phpstorm](http://www.jetbrains.com/phpstorm/) - it's is a paid for app but is well worth the money. Your productivity will increase massively by using a proper tool for the job like this. It's worth the money for the predictive code hinting alone. Take a look at it - no matter what, you should not be using notepad++ for serious php dev work - it's just a joke to be using a tool like that, sorry. Your number one priority should be to read all about version control. We use mercurial in work, but it's very similar to GIT (decentralised). By the way, you do not need to use or even sign up to github to use git. It would probably be a good idea to use github though because it'll be easier for you to setup while learning. Because I use mercurial in work, I'm going to link you to a tutorial I used to get my head around version control. Although it's written with mercurial in mind, the concepts used are more or less identical in git, so I'd recommend reading through it: http://hginit.com In terms of workflow - you should be working independently on your local machines with a complete working copy of your system that runs just on your local machine. All three of you should have identical copies of the application on your local machines and should be working locally. You should also have a staging server, which is where you should be deploying to first (not on production). You should be deploying using git exclusively - to this end you should turn off ftp. Yeah, you got that right - no ftp whatsoever. You should even turn off all ftp access on your server so nobody can use it even if they wanted to. I deploy all sites and applications using the command line and mercurial. You can do the same thing with git. Check out some of the things we can do because of this setup: * We can instantly deploy our application on a staging and production environment * We can revert between versions with a single command on both staging and production * We are free to test on the staging server, and as soon as something works on there we know with certainty that it will work on production (because they are both running on the same server, while reading from their own version of the database - so it's 100% safe to break stuff on the staging server, and we do all the time) * We can branch our work and experiment easily - this is one of the greatest things about version control. Got a theory about how you might be able to do something or fix something? Make a branch, try it out. Didn't work? Oh well, destroy branch, move back to where you were. Worked? Great! Merge into main branch and deploy to staging server, test, confirm it works and update the production server with working code. The freedom to experiment by using branches alone will set you free. [Here is another great tutorial, this time for git and for website development specifically.](http://net.tutsplus.com/articles/from-ftp-to-git-a-deployment-story/) Oh and one other thing: STOP USING NOTEPAD++ - it's not a serious tool. Seriously. Try out netbeans if you don't want to pay any money. If you don't mind paying a bit, go for phpstorm - it's excellent and I guarantee you will produce better code because of it. Edit: formatting Ps - If I were you, I would make version control such a priority that I would literally stop all development between all three of you until you sort this out. Get your heads around this, and your work will improve massively. Seriously, stop what you are working on and work on this instead. Getting this right will pay you back many times over for years to come.
+one for Sublime Text and theres loads of great plugins for it too.
I had posted a copy of it on my blog: https://sites.google.com/site/erickveilprogramming/student-of-the-month/git
I used TextMate for a long time but ST2 is better in basically every way possible.
I'm curious - what is the advantage of Ubuntu Server over Debian?
I really appreciate people who respond like this. Rather than bashing the guy for having a bad setup, we should acknowledge the fact that he realizes his setup isn't ideal and has come here for help, not to get shat on.
&gt; Each programmer develops in isolation on their own system Does this imply they have their own web server stack somewhere local as well?
You might also like to look into [GitLab](http://gitlabhq.com/) as an alternative to GitStack - it has a full web-based interface for your developers to access too, which is quite similar to GitHub. It's written in Ruby on Rails and is designed to run on a Linux server, so you may want to take that into consideration.
Yes. You should essentially have the same stack as the test server running locally. A potential solution is to set up a virtual machine, set up the right way and then distribute it to all the devs. We're using Vagrant this way. It lets you run a headless mini LAMP server on your desktop. Some devs run Windows, others use Macs or Linux boxes of various types. It doesn't matter because everyone has identical box running the same version of Ubuntu, Apache, MySQL, PHP, PHPUnit and PHPDocumentor.
this guy, git is still an enigma too me, what was your aha moment
I do development entirely on my local machine (macbook pro). I'm running apache, php, mysql compiled from homebrew. For each project I set up an apache vhost with a projectname.dev hostname. I create my databases locally using database migrations. Once something is ready for review I push the git repo to the remote repository (previously just a random machine in the office, now we run GitHub Enterprise). I use capistrano to deploy the project to a staging server, which then gets reviewed. Sending it out to production is the same way. You should definitely use git or mercurial or something. Most of the action is in git these days so it's the logical choice. You should do all development work locally, or all of your developers should run their own version of the code on the development server (either way, the key point is each dev has their own codebase no one else is touching). Then commit, merge and deploy. You don't need github, unless you want it. Any server with ssh set up can be your git server.
Here is what my environment looks like: - **Stack**: LAMP (Ubuntu 10.04 - probably moving to 12.04 soon) - **Version Control**: git + bitbucket.org (cause free) - **Dependency Management**: [Composer][1] - **Unit Testing**: [PHPUnit][2] - **Acceptance/Integration Testing**: [Codeception][3] - **Documentation**: [PHPDocumentor][4] - **Templating Engine**: [Twig][5] - **ORM**: [Doctrine][6] I mostly use Vim for coding, but that's me. If the pointy haired ones listen to you, try to get them to pay for PHPStorm licensing. I haven't really used it beyond a trial period but it seems like a really full featured and solid IDE, and I know people who swear by it and say it is much more polished and effective than Aptana. We all run a [Vagrant][7] VM on our dev boxes which is set up with identical environment that mirrors that of test/production server. The benefit is that you get to run whatever the fuck OS/Environment you want, as long as IT agrees to support it, and you can do ssh and run vagrant. I hope this gives you some ideas for structuring your environment. [1]: http://getcomposer.org/ [2]: https://github.com/sebastianbergmann/phpunit/ [3]: http://codeception.com/ [4]: http://www.phpdoc.org/ [5]: http://twig.sensiolabs.org/ [6]: http://www.doctrine-project.org/projects/orm.html [7]: http://vagrantup.com/
I'm pooping at the moment, so i can't write a bunch. But for learning git, go read Pro GIT. Its free online.. full of good info
Oh, wow. Thanks for the thorough response! I definitely don't want to get stuck learning from less than legitimate sources. Thanks for all of the links, and, I have to say that &gt;this is about learning to PROGRAM not learning PHP speaks volumes. I honestly cannot say thank you enough, not only to you, but this community. All of you are so incredibly helpful. I thought I might get blasted for "posting this in the wrong subreddit", but instead I've gotten nothing but outstanding responses.
Dude, thanks so much, i think im just gonna make a test repo and make branches like you said, thats been the part thats screwing with my head because i keep on thinking of them like svn branches
Some Constructive Criticism if you don't mind. - It is a bad form to publish code on github without a readme. A good readme file should contain a brief description of what your project does (or what it aims to do), installation instructions and concrete usage examples with explanations in plain English. - Your code contains no comments. This is especially jarring in the example file. Even if your main library is not well documented, examples should have exhaustive comments to allow users to actually figure out how to use your tool. For example, what is `test.pid`? It may seem completely obvious to you, but I honestly have no idea what this string represents just be reading the example. - I would strongly suggest avoiding use of GOTO. This has long been a controversial topic, but [most programmers consider it harmful][1]. Your code would not pass code review at most professional dev shops. [1]: http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF
With great ease. New feature? git flow feature start name Ready for release? git flow release start v2.0.0 Hotfix git flow hotfix start v2.0.1 Yeah the model is complex but we have tools to abstract the model.
* Dear god, get some version control as the very first step and learn how to use it including all your team members - this is #1!. Git or at the very least SVN - just get something. * PHP on IIS/Windows hrm... how is that going in production? Ideally you can dev on your local machines - but if getting a working environment is going to be a massive issue - you could possibly setup multiple development environments/virtual hosts on the dev server and work from there. 
I'm curious, how do you push updates to the production server then?
Here is is: [AS-Router](https://github.com/xavier-l/AS-Router)
Oh that's pretty cool. Is it a separate package you install on top of git?
have you thought about keeping the database on a single server and using vagrant for local dev servers?
you fork the master branch then push to your fork. Once that's done you can ask for a pull request from the master branch that you forked. 
Is there any difference between that and trait ProductFeed { public function execute() { ... } protected function send_request($str_xml) { ... } } It seems like they both accomplish the task of giving extra functionality to the EbayProductFeed class. Just, traits are newer.
Today, a number of people have questioned our use of IIS to host our PHP application, subtly implying we should be using a LAMP stack. Honestly, we've had nothing but great luck with our setup. Getting PHP to work with IIS was a breeze. We use PHP Manager for IIS to manage new PHP versions. The WinCache for PHP extension works rather well, too. We've had nothing but a great experience with it--I don't know why so many people are having issues with IIS and PHP...
Sounds good - something I would probably never entertain (have seen it done once with Apache/PHP on Windows, made me cry!) - but thanks for the details.
Several people have mentioned PHPUnit--I have to be honest--we're not using that. In fact, I guess you could say we're doing it the hard way. We have several test entries in the application and we literally verify the results of testing with known, correct results. It usually takes us about 30 minutes to test it--PHPUnit seems like it would take just a matter of seconds. I can't believe none of us have heard about this up to now!
I've been digging into git via Github and I'm a bit overwhelmed. What makes Mecrurial "easier" than git? i've noticed git has a lot of commands and options--more than I thought was possible. Do you have any good getting-started type guides for Mecrurial?
If you're not able to pay for github, though, your company should be able to afford it. You can have unlimited private repos for up to 5 people (perfect for you) over at [bitbucket](http://bitbucket.org). 
Poop. 
five point fucking one? im so sorry man, there there.
I personally use Vim and Screen sessions running over SSH. We have a single dev server but each user space has their own dev branch with proper host file and apache rules in place to route accordingly (username.www.project.com). Dev runs a copy of HEAD from SVN. When a developer feature is complete it is commited and merged into the Dev repos via SVN. Dev is instantly updated for QA to test. Once testing is sound code is pushed to the live servers via rsync. If something is broke but not discovered until it makes it live we can svn up -r[working revision] on dev and and rsync out the changes to live, then svn up the dev server back to head and troubleshoot futher in personal devs. We've actually changed this a lot of the past few years using svn hooks for automating all kinds of things, same with the rsync functionality. We've written a custom UI that allows rolling back and syncing a version with pretty much a click of a mouse. Our infrastructure is over 8 years old and still evolving every week.
Every knows practice makes perfect. For me, I need a **reason** to practice. Find something you like and build a website around it. Like cars? Start a drupal car blog and contribute some modules. Just my 2 cents.
The clichés are right: read and write code, then read and write some more code. If you can't think of anything to do yourself (can be hard) then just try to re-implement something that already exists. In fact this is a fantastic way to go as you will struggle through the same problems others have already solved and can then compare solutions.
Build a downloaded torrent renaming and moving application. It should also parse the names of said downloads, TV, movies. Also write the shows i watch to a database, from there make it download shows for me automatically. The best way is to do hard things you have no idea how to do. Forces you to learn That should keep you busy and learning, you will need active x, jquery, php and some CSS to make it pretty. 
practice, and good learning resources and plenty of those around.
Search for wordpress plugin that is similar be great to learn off. Get book on wordpress plugin development. Using a platform when starting off especailly one has ad-hoc as wordpress make even easy tasks harder than they should. You need to learn their API. 
&gt;How do I learn to be a wizard? Get a grimoire. In all seriousness, what you should do is keep writing code and learn from the mistakes you make. You'd also discover more of your mistakes when working in a group with other people. Additionally, read others code as well as articles on the subject of coding. Merely writing code won't make you a decent programmer. Sure, you might learn to write more efficient versions of your own code, but that says nothing about the context in which that code will run in. Draw from the knowledge of others, especially when it comes to things as code management and security. Never assume that you've considered all the aspects and that your code is perfect. Oh, and read the damn manual and never stop looking in it. Ever.
Dunno why I'm getting downvoted for writing a useful and accurate post. Guess there's a lot of cowboys around here :-)
Can't imagine it would be too bad if GitHub have put their name to it.
Yes - you'll often hear "Don't reinvent the wheel, you're wasting time and effort and others have done it better already!", but the people saying this forget that reinventing things *is* the best way to learn making new things later. If you're a carpenter you'll start with tables and chairs before making ornate wooden church chandeliers.
Lol GitHub would put their name to anything. 
You are either born a wizard or you're a muggle. If you don't get your letter for Hogwarts then there's nothing you can do. It's sad I know. I've been through the trauma myself. Edit: ok now I feel bad. A serious answer: 1. practice on a moderately challenging problem 2. read blogs by industry leaders + read good quality books. Books are especially important because they are structured and comprehensive in a way that the web rarely is. 3. Learn more than one language - preferably from different paradigms (e.g. learn a statically typed language, learn a functional programming language, etc.). 4. Surround yourself with people who are better programmers than you and learn from them. This is a 10yr+ project.
&gt; i've tried contributing to some open source projects but it seems like they have tons of people doing that already My experience is very different. Open source projects are always looking for new people to contribute. Most are spread very thin and would welcome you with open arms.
Try [cURL](http://php.net/manual/en/book.curl.php).
I am far from a "wizard" but what worked for me when learning was tackling problems that I had no idea how to solve beforehand. You have to do lots of research and experimentation in order to solve the issues you encounter and my experience is that what you learn this way tends to stick. If you just read books without practicing or simply download a ready made solution then you'll never learn anything. Or you could just go to Hogwarts :P (I'll show myself out).
Hi, thanks yeah this library has sorted it thanks! Ended up having to use curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7.12) Gecko/20050915 Firefox/1.0.7"); due to the error it gave in the screeny
&gt;This competition got a lot of hate on /r/programming. Can't say I'm surprised. r/programming loves to hate on PHP.
I wouldn't say it's that general, but they do seem to have a thing out for PHP especially, followed, but not to the same extreme extent, by Java.
I tried using JetBrains and ended up removing it within an hour. I couldn't even figure out the point of it.
I've used Drupal a lot, but I think it is a pretty inefficient way to get good at programming. A lot of working is Drupal is configuration; even if you make custom modules, there is very little architecture - it's mostly just implementing a series of hooks. Perhaps build a blog with Silex or another PHP microframework. It will take you much longer, but you'll learn how to implement basic CRUD and write SQL (provided you don't use an ORM). It'll also teach you MVC, and even unit testing if you do it right.
Start using an MVC framework and learn OOP concepts as they apply to PHP. Also be a competent Linux, Apache and MySQL administrator (harder than it sounds) - don't rely on tools like phpMyAdmin to administer MySQL, etc. Know how to start/stop/graceful Apache in linux, grep through Apache logs, edit config files, etc.
It says "upgrades included" on the sale page.
Looks nice. What do upgrades cost me in 3 years when I'm fully reliant on this editor?
This video should help... https://www.youtube.com/watch?v=mgMIxSd1FWo
Here is a very good point to start: * [PHP The Right Way][1] [1]: http://www.phptherightway.com/ 
Just wrap the sections with the appropriate tags. What's the problem?
Don't call yourself wizard, ninja, guru, pirate or whatever other stupid term middle management and recruitment agents are calling their developers nowadays. If I was an employer I wouldn't be able to take someone like that seriously, it screams unprofessionalism.
Yikes, 48 hours? That sounds like work, not fun. I get enough of _"I need this done in 2 days"_ at my day job, and no, it's not fun.
No it got a lot of hate because it's a PHP competition
I didn't sign up for it. But I don't have a problem following them on twitter and getting more information that way. It's not like you can't unfollow them later if it doesn't turn out as expected...
Good point. I'm waiting for more details before I decide to sign up... Just thought /r/PHP might like to see it.
do you use it?
Not a bad submission, just wish there was more information.
Yes. It has its hair-pulling moments, and I will occasionally indulge myself by trying out several different editors, but none ever come close.
So... if I want to use phpStorm on both my home machine and my work machine, would one personal license cover that, or would it require two?
Couldn't agree more. I was sure that Notepad++ did everything I needed. Until I tried PHPStorm. My trial ended last week so I've just bought this. Glad I waited to see if a sale would materialise! 
You only need one license. I use it at work and home.
I figure any product that can increase my productivity by more than 1/2 of 1% is worth $100. And I make less than the average programmer.
It's always changing. For the current project I'm working on it looks like this: Development: * OS X (although Linux would be better for development "only" purposes) * Git (my own repos over SSH with git-shell) * PhpStorm * OS X supplied Apache, and PHP * Redis * SQLite * HTML 5 Boilerplate, and their Ant Build Task * Twitter Bootstrap * jQuery * Backbone.js * Lo-Dash * My own PHP library / framework (https://github.com/bungle/web.php) * Some PHP libraries (PHPExcel, fpdf) * Some external SaaS-services Production: * Server Running on Hetzner (= value for money) * Ubuntu 12.04 LTS * Nginx Stable * Redis * SQLite * PHP5-FPM * Some PHP Extensions (phpredis, APC, igbinary, OAuth, msgpack) But sometimes the stack is totally different. This works for the current project quite fine.
It's a good thing all you need is a private github repo, which is provided...
In your defense, MS has really embraced PHP in the last few years. Setup and maintenance is a breeze in IIS.
I know that no one's hiring haskell or erlang developers :)
Make twitter.
&gt;You can renew your upgrade subscription at the discounted upgrade subscription price during your upgrade subscription term or within 1 year upon its expiration. Regardless of the actual upgrade subscription renewal date, your new upgrade subscription term will always start on the date following your previous upgrade subscription expiration date. Am I right in thinking that I can buy a renewal with the 75% off now? I bought PhpStorm 3 months ago (during the 50% sale), I suppose my license is valid for 9 more months. Edit: [Found my confirmation.](https://twitter.com/tikaszvince/status/281789864993775618) This will be the only December in which Steam isn't my biggest software expense.
A couple of businesses manage it. Fraps gives lifetime upgrades with all their licenses. Of course, they're very different products with very different markets and release cycles.
I don't understand what new features they need to keep adding? Seems like features for the sake of features. 90% of people aren't going to use or even know of half the features.
Do you follow any Zend related community ?
[Tons of stuff](http://www.jetbrains.com/phpstorm/whatsnew/index.html). There's more links for older updates in the footer. The beta (EAP) for 6 introduces a new whole-IDE dark theme, has more intelligent object detection (`if($obj instanceof ISomething) {$obj-&gt;[...]}` and some similar patterns will autocomplete from ISomething) and seems to have more debugging/profiling tools.
I do PHP, JavaScript, CSS and HTML though. What features from 'WebStorm' am I not going to get when I purchase just 'PHPStorm'?
PhpStorm is a strict superset of WebStorm; you get everything. At the same time, WebStorm is half the price of PhpStorm. Or I should be more specific: PhpStorm can be made such. WebStorm ships with the NodeJS plugin but PhpStorm requires it to be installed (free and from inside the IDE). Same goes for CofffeeScript.
is PHPStorm really that good? I've given WebStorm a shot and gave up on it in favor of dreamweaver+firebug. I've been using phpDesigner and have been pretty happy with it.
I'm starting some laravel dev, and the control panels just make things so much faster, I've never been a keyboard shortcut person, but it supplies a good combination.
Install the [EAP (beta)](http://blog.jetbrains.com/webide/2012/12/phpstorm-6-eap-build-124-295/) and File -&gt; Settings -&gt; Appearence -&gt; Theme -&gt; Darcula. It [looks a bit like this](http://blog.jetbrains.com/webide/files/2012/11/Web_IDE_mac.png).
You can't even put your license key into the EAP, it includes a fixed 30-day license that gets renewed with each (weekly) build.
oh ok... eh, I'll just wait for release
You can. Pretty sure it's a default theme now. I think it's called Monokai, it's what I use. Pretty close to sublime's theme.
bought a commercial license in my company and don't regret it at all only problem I've had is with SFTP; automatic upload to server 1 time out of 10 just takes forever and I have to manually stop the process (in the IDE itself) and wait for around a minute for it to stop to keep on working. A mayor pain in the ass when I'm on a rush but then again, I haven't even sent the error report to them so I feel like I can't really complain an amazing piece of software
I use twilight for my code, or is there a different area for actual color of the program? 
yep...
First of all, use [PDO](http://php.net/pdo), don't use the php mysql functions. Second, you might as well do a join rather than a subquery. **SQL** SELECT `SalesCode` FROM `sales` sa JOIN `StockCode` st ON sa.StockCode = st.StockCode WHERE st.SuppName = :supp_name **PHP** $db = new PDO( $dsn, $username, $password ); $stmt = $db-&gt;prepare( $sql ); $stmt-&gt;bindParam( ":supp_name", $_POST['suppName'], PDO::PARAM_STR ); $stmt-&gt;execute(); 
It's good to know how to administer MySQL from the command line. Some people might disagree with me, but it will help when you want to write or edit database scripts and complicated queries in code.
You can start [here](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_2?ie=UTF8&amp;qid=1356060527&amp;sr=8-2&amp;keywords=Design+Patterns). It's taught using Java as the language but the technics are basically the same.
To answer your question, yes the license you purchase here will work with that. I have had the same license for a VERY long time and I have been able to use it on the previous 4 versions.
Personally, I leave graphing to client side libraries like Highcharts and d3.js.
More responsive? I don't know about you, but PhpStorm here is running blazingly fast.
Have you tried setting the FTP mode to passive?
D3 with xCharts or NVD3 or Raphaël with Morris. It should be vector based these days.
You think I could just get that girl to come over and teach me?
I have a buddy that tells me this all the time. "Don't reinvent the wheel" when I try to write something there's already well known classes for. Well, maybe I want to know why they do it the way they do, and can I do it too? Let's just say.. I learn at a much higher rate than he does.
not sure if trolling or not, but I was on about the website (it was really struggling yesterday) 
If you can't afford a periodic upgrade cycle the chances are good that you really don't need a professional tool. A lot of enterprise grade tools make their money this way. If the cost is keeping you from making a commitment, there's always netbeans which is still a very good product. phpstorm is better, but it doesn't mean everything else is completely useless.
Same here. I wrote an app with a user login that my girlfriend and I had our own accounts on, we could list movies we owned, movies we wanted and movies that we had loaned out to friends. Complete with a search feature for actors, actresses and movie title.
That is a bit pointless, since PHPStorm does everything Webstorm does.
Think local VM (vagrant?) But without having to deal with the fact that if you put the php files in a folder share it slows access from the VM incredibly.
i'm using a local git repository, but I need the speed of automatic upload to the test application. I only deploy in production after I've tested
Did anyone else buy a product and then not receive a license?
Go client side - it's way easier on the programmer and the server, and it enables interactive charts. [Google Charts](https://developers.google.com/chart/) is awesome.
I can vouch for [dygraphs](http://dygraphs.com/). Easy to implement and still under semi-active development.
I did. But I was waiting for my paycheck to come in - then didn't get time afterwards to buy. Dammit! :(
I used Flot recently. It's open/free.
I researched and extensively tried most of the popular ones and nothing even comes close to [Highcharts](http://www.highcharts.com/) in terms of functionality, documentation, ease of use and responsiveness of support. It's not free as in beer, but relatively cheap and very worth it.
Jesus, good product, but that is a shitty way to sell it.
They're probably just dealing with the massive amount of users. tsk tsk, someone didn't plan to scale ;) Just kidding around though, you can at least use the 30 day trial until your key comes in :D 
+1 I received now 3 emails with a shit ton of certificates I don't care about and no key. :D
Try it and see, it's mostly opinion but I'd say it's one of the better IDEs out there (well worth the money). PS. Don't downvote someone for asking a question.
So this is something I truly don't miss: public function __construct(Zend_Controller_Request_Abstract $request, Zend_Controller_Response_Abstract $response,
When I first started using it the machine I was using it on was pretty crappy so even consuming 250mb was a big deal. Since then I've upgraded but I was wondering if it still used a lot of memory 
I'm a big fan of Piwik as well. It's easy to pull in data with php and use your own charts, or figure out their widgets system to embed their charts directly into your site.
Solution I am thinking of going with is saving the graph image google generates to the server.
It is not only necessary, it is *essential*.
If you swap from PHPStorm to Intellij IDEA (which was also on sale) it comes with a dark theme. It doesn't look NEARLY as good a sublime text 2, it doesn't have nearly as many keyboard shortcuts for management (like being able to add/remove columns at will and hide the sidebar when necessary) but it does have the more standard cross IDE ones (open file, jump to class etc.) 
Best take "zend" out of the name. It's a trademark.
Zend Framework 2 does, ZF1 doesn't. Since the development team tends to target more corporate and enterprise systems that have numerous stacks or provide the hosting solutions for clients than mom and pop shops who run everything in house with custom builds, the requirements are usually far behind current php features. For instance, ZF2 targets 5.3, so it doesn't utilize newer stuff like traits.
You could just buy some hosting. At one point I was paying as little as $20/year for a small shared hosting account.
Ok ok, you're telling me to download and execute a script as root? Nah mate. What is it with you plonkers (people who create these installers). You're doing the community a lot damage by telling people to download and execute these scripts. There's no verification ... at all; Server could be hacked and heck, the environment the script runs in might not be supported. Please stop this bollocks. As the for the constructive advice, drop the "installer" and create a repository. I didn't check but I assume you have one. Most people will only the do the initial setup once in a long time, so let them clone it and do it themselves; They'll have better knowledge of their environment as well. 
&gt;Bah, who gives a shit? I do. &gt;My development time would take way longer for no real gain if I was to fix every single notice issue. Something about that sentence tells me that there's something seriously wrong with your work process if fixing notices significantly prolongs your development time. You might want to update your process to actually writing proper code in the first place, because if you get as many notices as you describe, there's something severely wrong with your code. Know how many notices my code yields? None. Know how much extra time I have to spend to ensure that the code yields no such notices? None.
&gt;My development time would take way longer for no real gain if I was to fix every single notice issue. You must be the guy I get hired to clean up after.
Please don't ever work on a development project with me :)
Well, duh.
Sweat now so you don't bleed later. Notices are trouble but the time spent cleaning up the mess will be longer and more embarrassing.
I've worked on projects with notices turned on, and with notices turned off, and there is no doubt in my mind that PHP is a cleaner language to read and to write, as well as being more flexible and maintainable, when you stop caring about notices. If you write code to avoid triggering notices then you will have written code of greater verbosity (and whilst more verbose code is not *always* worse code, it usually is). I see no evidence that code that doesn't generate notices is somehow of a higher quality. However, I do concede that code that has been written by someone determined enough to stamp out all the notices, is likely to be better code. 
Language has NOTHING to do with cleaner or maintainable code. Good programmers have EVERYTHING to do with it. While I agree with your second point, the examples given in the article are examples of bad coding practices. That code should never see production in the first place. 
Oh wow it has SEO friendly routing! /sarcasm
Let me guess... it will be tons of 'applications' that use third party API's. *yawns*
In your example, null should not be used. You should be using false.
There are plenty of good reasons to use goto. Your solution to not using it sounds worse than goto it self.
Why is it always the 'junior' programmers screaming about goto's? Anything is horrible if you don't use it properly.
It sounds like he's every guy who's ever made a Wordpress plugin.
Pretty much this. It would be nice if the community actually focused on things we haven't already beaten to death with a stick. Seems like every couple of days someone shows up to try to teach the obvious.
Spoken like a true amateur.
I could not disagree more. If you hide notices then you can be hiding very real errors in your program. Any small typo of a variable name or array index will create a new variable and instead of failing your program will continue incorrectly. You don't even know you have a problem. I can't imagine how anyone would consider that more maintainable. It's also obviously higher quality code to not ignore the easiest errors to make. Notices and warnings are just errors with a different name. I highly recommend not just turning on notices and warnings but also converting them all directly into exceptions. 
OOP is hideously overrated in general, but in PHP it is a necessity for getting anything done.
You're the worst kind of developer
I'm an alcoholic and I still care about notices 
Could you maybe list some reasons why this would be better than stock zf1? I'm not seeing anything that you can't do with zf1 and like 30 minutes of coding. 
Or you could write good code that was well structured so it never triggered the notices in the first place.
Developrsh developrsh developrshhhzzzzzzzz.....
Seriously? You want to manage/monitor php logs in production INCLUDING notices in the output? No thanks.
Some languages make it very difficult to write clean and maintainable code. Some languages can give you just enough rope to hang yourself. A lot of PHP programmers choose to take that, hang from the neck, and swing in the breeze.
Fun fact for anyone not already convinced: PHP always goes through the exceptionally slow process of generating notices and warnings even if you suppress them. They're only suppressed at the final point just before they are about to be displayed. So, if you are worried about performance, don't suppress notices. 
1. Torrents are going away, it's all magnet links now. 2. Hosting torrent files will get you in trouble 3. I do like the idea though
Ok let me explain myself and not just be a knee jerk asshole. When you leave your notices in the code, it spams up the logs and makes it harder for me to use as a tool to make sure my stuff isn't broken. If I have an undefined variable or index in my code, I want to know. It's helpful for spotting places where things might be subtly broken. If you look at it and it's not actually broken, please just go back and silence it (isset check, etc). That way I don't have to go in and waste my time figuring out if something is wrong, and don't have to sift through your crap to fin problems with my code. Notices are a tool, an you're the asshole who doesn't put the tools back in the toolbox when he's done. 
I can say notices tell me useful things all the time. Usually during refactoring code and reusing code in other places, it lets me know that there are global dependencies that I missed or forgot or even helps me find unused code. (form processing scripts that check for extra variables I don't need). They really are helpful.
Ok. Well I was just getting down off my soapbox anyway. :-)
Since you're working strictly in a windows environment, you might find [this](http://phalanger.codeplex.com/) interesting to play with. Since it gives you a direct line to the .NET API, you can use it to make windows do all kinds of funky stuff. For example, you could have your script automatically add the file to your current media player playlist via the [.NET MediaPlayer class](http://msdn.microsoft.com/en-us/library/ms635239.aspx).
&gt; I don't give a fuck about a random NOTICE No such thing. Notices are there for a reason. Something went funky with the code. PHP isn't just spitting them out for the hell of it.
In the programming world, we *make* time to write proper code because it is important, and will save the business world orders of magnitude more time later. 
&gt; Turn notices off, and next time you catch yourself writing an isset() stop and ask yourself why you're wasting your time with what is basically non-essential boiler-plate code bloat. You're... using variables without knowing if they even exist? I hope you realise how much trouble you're inviting, and I hope you don't work on anything important.
You CAN do lots of things. Doesn't mean you should. 
Simple and helpful. Thanks :)
When it comes to including files there's no reason not to just use standard forward slashes as they work on all platforms. If you are manipulating and comparing file paths as strings in your application then you should always use DIRECTORY_SEPARATOR or an alias just in case so that you don't waste time and figuring out mystery bugs if you ever need to any testing in another environment. I don't think using DS as an alias is a problem as lots of people and frameworks do this already and most competent developers use an IDE and a framework anyway. 
What got me thinking about it was writng a console application that manipulates directories and files in various ways. Also this sort of thing always bothers me slightly: define('TEST_RESOURCES', __DIR__.DS.'..'.DS.'test'.DS.'resources'); instead of define('TEST_RESOURCES', __DIR__.'\\..\\test\\resources'); or define('TEST_RESOURCES', __DIR__.'/../test/resources'); But you only have to do it once then you can forget about it so it's not so terrible.
Using forward slashes always is fine, but be careful when mixing with `__FILE__` or `__DIR__`. A certain over zealous documentation generator I ran did a `str_replace` to reduce it to a relative path. That didn't work because slashes didn't match, and another bug compounded in it running `rm -rf /` Cygwin has no root protection, and I didn't notice it was still running until my application icons started disappearing from the task bar. I lost 40% of my hard drive to someone not using `DIRECTORY_SEPARATOR`. You don't have to use it, but be very careful.
Sorry, I was referring more to the extra long class names.
The only place I use it is as a constant, to compare and / or verify that a parsed string character matches what has been defined as a directory separator. anywhere else is just a big fucking eyesore that helps no one. 
This is the best answer! Use forward slashes if you want to set file paths for reading or writing.
Yo dawg ...
Nice work! You should put this on GitHub for others to fork/improve upon.
Well, you could be reading/writing a file from disk using fopen()/etc. in places in your code - so it's not just a require()/include() issue. Having said that, I always just use forward slashes - I'm always writing code for Linux/Unix filesystems anyway - so don't really bother/care for Windows :D
I just might, i have a similar script for youtube, but it is a huge violation of their ToS in so many ways that i would never upload it. but soundcloud is a bit nicer, and allows for downloads if the user allows it. i think i will actually expand on this quite a bit, because i see potential beyond just monitoring for stuff one might favorite or like. i wipped it together last weekend in a couple hours, so i might work on it this weekend and put the current version on git ;x
Not really. Not unless I'm doing something with a configuration file that happens to be language dependent. PHP's filesystem functions don't really care if you use forward slashes in paths, so there's no reason to use it in a lot of cases.
PHP, growing up a little more every day. Having used similar constructs in ruby, it's hard to overstate how useful generators and coroutines really are. Good article. I think there are a lot of people who will benefit greatly from reading it.
valid points. I've provided a zip download as well. This was mainly set up as an introduction to zend for people i know. I'll execute as root on my server, but its up to you what you do. the installer is totally optional obviousy. I use the installer at least 3-4 times a month for different projects, so it was a simple way for me to install it. that's all. not trying to do damage to anyone.
its true, but 30 minutes of coding here and there adds up. I created this to not have to spend 30 minutes every time i set up a project. it's nothing revolutionary, just a time saver. I found that, working on several projects at the same time, if i coded it all by hand each time, the conventions would be slightly different. so i packaged it in a way i would have the same conventions across all my projects, save time and avoid confusion. I'm not trying to promote this over zf1, just offering it as help, since i've found it very useful.
From the github: &gt; This is how php's arrays are internally implemented. **It was written to show how arrays work in php.**
Except it isn't a goto statement. Generators are iterators that return a sequence of items, just not all at once. Coroutines are like generators, but they allow you to talk to the generator. The main purpose of goto is to alter the flow of execution, and to a small degree, these do too. The thing this does that goto can't do, is pass messages. This sort of thing is easier to see the usefulness of in ruby, but is pretty much what PHP is working towards. For example, I can do: # output each item in the current directory # glob() in ruby does the same thing as glob() in PHP Dir.glob('*') { |item| puts item } |-----+-----| |---------+--------| Method Block instead of having to actually store the result like this (Dir.glob() must be fully resolved as an array before "each" can be used when I don't use the block): Dir.glob('*').each { |item| puts item } The difference is subtle, but important. What actually is happening in the first example is that each time glob() retrieves an item, it has a yield statement that passes a variable to the block ( the stuff in {}) and then executes the block *if a block is provided*. The main advantages of this approach is first that the block which the function yields to is not set in stone, allowing you to reuse the generator in different ways. The second is that an array is never constructed. Instead, the block is injected in to glob() each time glob() gets a new item. In the second example, Dir.glob('*') first returns an array, and then each() is called on that array. In nikic's post, he uses the "xrange()" example, and what he's trying to illustrate is that it works just like range() does, but it doesn't have to construct an entire array before using it. If you were to use range(1, 1000000000) you'd probably hit swap. But if you were to use his xrange example, it would hum along until it finished because it's not building the entire set all at once.
dude...wow. i installed a trial copy of visual studio 2012, got Phalanger up and running, created a rudimentary way to parse configuration settings from an external file for this script, and converted it over to .net with EASE. i have never used .net in my life, or visual studio for that matter...that was too easy. you have changed my life, good sir. this is pretty insane. i will have to play with this in detail tomorrow, but it blew my mind how someone like me who has ~~almost~~ no experience with .net can get this up and running and compiled to a nice little binary in no time. i mainly create these for friends, so now they won't have to install php :D
Don't thank me, thank them. They did all the hard work. I'm glad you're having a good time with it. I know when I found it I lost a whole night :P BTW: you don't *really* need visual studio for it to work, just the .NET runtime. The compiling can all be done via the command line. If you wind up making installers for them, be sure to bundle in the redistributable .NET runtime, or your application won't run very well if they don't already have it.
http://cdn.memegenerator.net/instances/400x/21211970.jpg
&gt;very appreciative that you've explained your rationale so thoroughly in this thread, especially in the face of dissent, downvotes and rudeness. Well thanks for the thanks. But it appears that I've convinced no-one and that by being downvoted my slightly controversial (but I maintain, accurate) views have become hidden away. It's a shame because I've been programming PHP for a very long time now (about 12 years) and I've tasted both sides of the argument. It simply results in more flexible and readable code, to set error_reporting to disregard notices. That's my subjective opinion, but it's not like anyone has really provided a convincing counter-example. I write PHP every single day and I don't miss the notices one little bit. Throw a little function at me if you like and I'll simplify it, make it more readable. Yes it'll log notices, but it'll be more maintainable and easier to read and use. I don't agree with you WRT variable initialization. Simply perform an explicit type cast when returning from the function: return (array)$val; This is safer than initializing the variable at the start. Since that variable may be clobbered as something else somewhere in the function. Explicitly casting to an array guarantees you get what it says on the box. WRT error supression using the @ character, I think it is a very foolish idea to use @ in almost all cases (it is perhaps forgivable if you can catch the error and throw an exception). Anyway, this is an overlapping, but different argument to the suppression of notices, since @ suppresses **errors** and **warnings** etc as well. How to make PHP an enjoyable, flexible language: ini_set("error_reporting", E_ALL &amp; ~E_NOTICE); Edit: It might take me a while to respond (but I will). I am going where there is very little (if any) Internet for xmas. Merry Xmas.
Can you spot the typo: return (array)$va1; PHP can if you use it properly. 
I understand the value of generators but coroutines seem a little contrived. They implicitly create a second code-path which frightens and disturbs me -- `yield` may do one thing or another depending on the context.
I have you tagged in RES as "php-hating twat". So... no.
unless $var['something'] exists and is a FALSE value. The particular example would work, but empty() on something that's boolean FALSE may not give you what you'd intuitively expect.
Did you ever take a look at the PHP source code? It is a worse mess than "bobbys first php cms", also it is written in C.
Yeah, I'd hit this one working on someone's codebase back in 2004. His 'framework' tried to address a bunch of stuff, and one of them was this notices issue - he had custom functions to store and wrap and deal with everything in arrays, and would also assign return values in arrays via these functions. I pointed out that you could never get a return value of false, store it, then ever successfully pull it out again because of the shortcomings in this abstraction, but I was drowned out by the rest of the team as "negative". So we had code running in production return 'false' values (think, connecting to a database), which would randomly break because there was no way to ever successfully get back a boolean FALSE value using this code. This was just ... flummoxing, that people would choose to 'believe' someone who wrote crappy demonstrably broken code, but ignore my patches because I was 'negative' (meaning, I'd said the code wasn't good and I didn't want to have to use it on my project).
I'm working on my own CMS system and whenever I change the schema I just export the thing from phpmyadmin haha. Then I'll throw it into Ubuntu one or a flash drive and import it on my laptop. Hey it works right! But I am looking for a much better approach to this. Perhaps I should work on that.
oh rock on, that does not seem too hard. im guessing "required libraries" are php module dll names?
I tend to focus on creating products that my students would specifically find useful in an e-commerce job. Things like user authentication, highly extensible driver-based systems, etc. It's been working quite well. I don't know why more books aren't like mine, since at the end of the day, we all just seem to be trying to reinvent the wheel 9 times out of 10.
http://chat.stackoverflow.com select PHP room ;)
\#php on any noteworthy network out there.
Regional but actually has many international visitors: #phpnw on freenode, nominally for the North West of England.
Testing is just one tool; you can't and shouldn't rely on it for everything. Even heavily tested code can have flaws easily discovered through static analysis. This particular issue would be be picked by my IDE before I even finished typing the line. It's massively more efficient that the IDE or interpreter picks up these simple yet common mistakes before even thinking about testing. You seem to think not ignoring notices leads to massive more verbose code but I don't see it. You're only provided example: if (isset($var["something"]) &amp;&amp; $var["something"] &amp;&amp; isset($var["somethingelse"]) &amp;&amp; $var["somethingelse"]) {} vs if ($var["something"] &amp;&amp; $var["somethingelse"]) {} is easily and more obviously done as: if(!empty($var["something"]) &amp;&amp; !empty($var["somethngelse"])) {} And I would argue this version is actually *better*. In this case, I know that it's expected that the key "something" might not exist in the array. In the previous case, I would assume that the key "something" should always exist in the array and, if it doesn't, that indicates a flaw in code that fills the array. Your code literally has less semantic information. Lastly, you don't address [this](http://www.reddit.com/r/PHP/comments/158nas/why_suppressing_notices_is_wrong/c7kgsir) point about performance. You're are not making a strong case. Unfortunately, if you already have tons of code that isn't notice-safe it's very hard to change. But if you build it that way from the start it's a no-brainer. 
https://github.com/php/php-src/blob/master/Zend/zend_hash.c if anyone wanted to see the original. or at least part of it
Let's say you're looping through a set of data, is it appropriate to do something similar to the code below (example #1 - stripped down for concept purposes)? I've always treated objects as a "library" (example #2)... So my media object would be more of an interface for the database, rather than the media record itself. I get a feeling that I've been doing it wrong or missing something on some level... I would be extremely grateful if someone has some insight that may clear it up. Example #1: $db_media = []; // Array of media from a database class Media { // object properties... function __construct($media) { $this-&gt;set('title', $media['title']); $this-&gt;set('desc', $media['desc']); } function set($field, $value) { $this-&gt;data[$field] = $value; } function get($field) { return $this-&gt;data[$field]; } function update() { db_update_function('media_table', $this-&gt;data, 'media=%i', $this-&gt;media_id); } } foreach($db_media as $i =&gt; $m) { $media = new Media($m); echo '&lt;h1&gt;Media : '.$media-&gt;get('title').'&lt;/h1&gt;'; } Example #2: class Media { function get($filters) { // get the media from the database, construct query based on filters return $media; } function set($id, data) { DB::update('media_table', $data, 'media=%i', $id); return true; } } $Media = new Media; $media_arr = $Media-&gt;get(array( 'id' =&gt; 1, 'category' =&gt; 9, 'type' =&gt; 'youtube' )); foreach($media_arr as $i =&gt; media) { echo '&lt;h1&gt;Media : '.$media['title'].'&lt;/h1&gt;'; } 
I don't, ever, and the couple of times it's ever caused me trouble I just fixed it with `strtr($wrongslash, '\\', '/');` or whatever the order of arguments for that is.
I am not downvoting you because i want to ask you instead why? php is, with a few minor exceptions, the same no matter what platform, or what webserver, except apache is a bit different since it runs as a module instead of a cgi. PHP on windows for me is 30 files, one folder, 6mb, including mongoose web server and xdebug + configs, and its portable in fact i sync it over dropbox. its quite convenient.
Thing about coroutines is that they're cooperative, which means they're designed to avoid all the execution control problems that you're intuitively thinking about when dealing with normal threads. You yield control when *you* designate, and control flow is usually related to I/O flow, not what the cpu is guessing. 
Fair question. I think it comes down to the fact that I'm biased against running any web service on Windows, period. I've become yet another annoying Linux snob, hopping in at every chance to bash the idea of using Windows to serve anything - especially web, and especially PHP &amp; Pythyon... It's always something though, whether it's the backslashes, the lack of a tail command, no easy way to just SSH in and run commands (yeah, cygwin, i know), the whole line-ending thing... fuck. As Snoop Lion said, "If it ain't one thing it's a motherfucking 'nother. Word to your momma and your daddy and your mother." Truth is, I do indeed love Windows for the desktop applications, yet I hate it when it comes to getting all nuts-and-bolts with things. So in essence, my issue is less with PHP, and more with trying to make Windows run anything web-related. I use it strictly for coding, and all my code runs on a local virtualbox, or gets uploaded to a *nix server. It's not the most logical opinion, but I don't think I'm wrong when I say that anyone wishing to run PHP would be better served to run it on a Linux server (as I said, virtualbox changed my life), and not Windows. I'll stand by "better served" all day long.
Should be -m, as in the first command example for checking readline support.
You should edit the question, because it still says -n
That is a great question! Honestly I feel a bit unqualified to give you a solid answer, but after gripping the code I felt your first example was much easier to understand and aligns with a more standard approach. You almost seem to be on the edge of benefiting from a MVC construct: you could place your database abstraction into a model (queries, updates), manipulate it with the controller (gets and sets), and then output your results into the view (echos). I'm not sure how familiar you are with MVC (I'm still wrestling with it and trying to build my own micro framework) but I think the concept fits your application perfectly. Your conceptual code overall looks really clean. If you are using a static method to access your database as seen in the second example, you might benefit using a dependency injection instead as it is seen as more flexible and overall a better practice. To do this, you would simply pass a instance of your database object into the class that needs database access upon instantiation. Kind of unrelated but something to consider nonetheless. Lastly, this is a great question and I wouldn't hesitate to either make your own post or send it over to StackOverflow for a more detailed analysis of your two examples. Good luck! :)
Who the fuck thought it was a good idea to make the file type part of the filename? Not that your complaint is invalid, but I'm not about to fault linux for ignoring a dumb convention.
coders on efnet. Small group were we just hang out.
Ideally, you want to working off your own computer instead of any development server. And with git (or any other DVCS) these are ideal for doing this. Also an added benefit on working on separate computers, is if something goes wrong, others have a back up and/or working copy. This makes it easier to work out what went wrong. If you want identical copies of the prod server, use VMs. When I'm working I use VMs execlusively and have the workflow of mounting the filesystem locally and using my own computers git and editors, but still have to ssh in to run any scripts (which is usually fine for web development as scripts are occasional work).
While it depends on how much CSS you have, I would not reccomend minifying on the fly unless its a development server. If its production, always have the CSS ready to go to the browser. It's much faster especially if its served directly from the web server. In terms of the browser caching, try sending Cache-control headers and Last Modified headers?
Whoops! Thanks for pointing that out. Fixed now :)
Choosing to run PHP on a Windows stack simply because your team doesn't have expertise with Linux doesn't exactly qualify as being "better served". It might turn out that way in the end, but that's a pretty shady way of rationalizing it. But go forth, carry on and slay the dragons. I know how it goes, shit can't always be ideal when it comes to the wild, we gotta roll with whatever it is the clients need.
Explain to me why Bolt is better than plain symfony 2 with bootstrap and an admin bundle? (since you're using all symfony components)
Alright! New tag!
The 'scope' of Bolt is quite different than that of ExpressionEngine, and I think Bolt isn't a replacement for bigger sites that EE is suited for. However, that might just mean that you'd like about Bolt what you dislike about EE. :-)
If you have any kind of internet that isn't dialup these days, this files size shouldn't be a problem. 
I personally dislike how people say 'Oh.. WE don't try to do everything'. Most of the mature frameworks don't do 'everything', they have libraries that can be loaded if you need them and it just happens that they have tons of features that you can load in. Just because you release a framework without 100 features Zend has does not mean that it's better. 
DIRECTORY_SEPERATOR is not meant for creating/reading files it was build for exploring and accessing path data in an universal way. You can always make your own constant named DS for a shorter syntax if you care about readability. 
Why should I use this and not wordpress?
First of all, not everyone has super fast internet *all* the time (and some/many not at all)...secondly, even if it could be assumed that they do, that is no reason to just post giant binary blobs when they could be optimized to be a fraction of their current size.
Obviously I'm completely biased, but: - Templates using Twig. Much cleaner than &lt;?php theTitle(); ?&gt; PHP tags interwoven with HTML. - Simpler and more straightforward backend. Easier to learn for endusers. - Based on Silex/Symfony. Using DI-containers, instead of the aging code in WP. I'd say: try it out. You should have it up and running in a few minutes. If you don't like it, let us know why. 
Wow man, take the corn cob out of your ass for a minute here. Bandwidth costs nothing, and has nothing to do with search engine rankings.SEO with keyword placement has to do with search engine placement. Public wifi spots are all broadband man. When have you last seen a public wifi that was dialup? Get real. As far as CSS load times were talking minute negligent times like .02 seconds even on a site like 2advanced.com which has a shitload of css and flash. They are the top ranked web design firm in the world. If load times are your problem, then make a second site that is low fi and redirects based on client browser headers.
it is, i assume you are talking about the line that says http://api.soundcloud.com/resolve.json?url=http://soundcloud.com/$user/&amp;client_id=$client_id api.soundcloud is used to resolve json calls from the normal url's as far as i can tell. its a bit funky but that's how it is in the docs ;x edit: ohhhh you are talking about ssl, ok yeah, easy enough to change, but not entirely needed here
It's just a tongue in cheek thing, but maybe you'right. I think I like saying that, because I personally dislike it when people describe things as "awesomely spectaculair", so I'd rather hold back on the superlatives a bit. 
In my opinion that is wrong. Any image with text in it must use png compresssion. Why? Have you seen text side by side comparison with a png and a .jpg? The text looks like you're losing your eyesite. That is why I believe that the images should be png.
&gt;Bandwidth costs nothing In sufficient quantities it does. Though, I guess a person arguing the things you are wouldn't have much experience with high quantity traffic and performance optimisation for it to concern you. &gt;and has nothing to do with search engine rankings. I never claimed it did. You might want to go back and re-read what I wrote. What I said is that the load time affects search engine ranking, both directly and indirectly, depending on the search engine. &gt;Public wifi spots are all broadband man. Divided by a shit-ton of people, sometimes leaving you with sub-dialup speeds. Furthermore, try using the wifi on a train sometime. &gt;When have you last seen a public wifi that was dialup? Get real. Happens every once in a while when I go travelling abroad. Why wouldn't you want to optimise a site to make the experience acceptable for people in such situations? &gt;As far as CSS load times were talking minute There are more than just a CSS file on a website. You have images, script, backgrounds etc. Scripts also block parallel downloads, pausing subsequent downloads and making them take longer. Then you have the overhead for each new request (which may be several hundred ms) before actually receiving any data, as well as the number of simultaneous connections a browser can handle. IE7, for instance, which is unfortunately still quite prevalent in the public sector, can only handle two concurrent requests. &gt;They are the top ranked web design firm in the world. 1. Argument from authority, a fallacy. 2. By whose count?
Try smushit. http://www.smushit.com
Another option is to have a dedicated dev server set up, where every dev has their own clone of the repo: john.dev.example.com bob.dev.example.com (And their own ssh login obviously). This way, devs can easily look at each other's site as well and help out via Skype/MSN/whatever if they need another set of eyes. 
I don't understand what exactly do you mean by 'we shouldn't try to keep things simple'? What did you do to keep it 'simple'? What does 'simple' even mean? Per your own website you state that you are using a PHP micro framework (Silex). Did you look at the code you wrote? You have bootstrap, extensions, classes on a core level which would be *gasp* a variation of a framework. This is the same as using Zend framework and building application on top of it and claim it's a single app with a targeted purpose. Makes very little sense.
Sounds like a new meme. USES DEPENDENCY INJECTION HAS A GLOBAL $app VARIABLE
I was using wordpress to try setting up some small sites and got annoyed with it; this was exactly what I was planning on doing myself. I loaded Bolt up and messed with it a bit and I think I like it, could use some better documentation on some things but its definitely usable for me. Once the holidays are over here I will probably roll some themes and then start trying and see how well it works for me, maybe write a few extensions as well.
Case-sensitive paths are nothing to do with "linux" or any operating system at all, they are file-system specific. NTFS is case sensitive. OSX's HFS can be sensitive or not. 
It's "relatively" similar, but not the same. If you're just making some shit blog for a client nobody cares about then developing cross platform is fine, but I wont develop on Ubuntu and deploy to CentOS if it's a high level application. 
Except that sets the handler conditional on FastCGI, when the OP states he's got PHP running through CGI. I'm right beside you in thinking that he *should* be using FastCGI, but I'm not certain that he is.
If the author of the comment had just said that, instead of being a pedantic ass about it, I would've explained that code cleanup, restructuring and refactoring is an ongoing process, and that it's absolutely on our list to get rid of all globals by the time we hit 1.0. :-)
Uses twig, uses global scope extensively for object dependencies. This is the very definition of suck.
Writing documentation for something you've built yourself is hard, I've found out. It's tricky to figure out what needs documentation, because for me it's evident, since I made it. That said, please [open some issues on Github](https://github.com/bobdenotter/bolt-docs/issues) about which areas need improving, and I'll work on that. 
It's not really meant as a replacement for Drupal. More as a solution for websites where using Drupal would be a huge overkill. :-) And, that is one of my major grievances with Drupal: I (and my colleagues) like writing HTML/CSS templates first, and _then_ incorporate them into a CMS. CMS's like Drupal force you to work the other way around: Set up all the views/blocks, and _then_ try to mold the HTML to resemble what the design should look like. Yuck. 
&gt;People don't run hotspots on anything less then a t-1 or docsis 2.0 modems, normally with 50mbit/5 at bare minimum. Normal range for a hotspot about 500ft. Even in 2 malls in my area we set up repeaters throughout weren't even pulling half of the available bandwidth available to clients with almost 300 people on them. That's a lie, and you know it. &gt;If we look at Google’s official blog post announcing site speed as a factor, we read You forget that I said both directly, and indirectly. This is an example of a direct factor, implemented by google. The indirect factor is higher ranking through higher traffic. Slower page loads have long been known to be connected to higher drop-off rates. &gt;Http 1.1 the limit is removed and available up to 128 at a time Regardless if there's any imposed limitation of the protocol, that's not how it looks in actual browsers. Browsers DO impose limitations on concurrent connections, the average being four concurrent conncetions, and the total ranging between two and eight (on the "normal" browsers). &gt;I don't care what css you are loading if you have more then 128 simultaneous downloads No browser has got 128 parallel downloads. You're beyond ignorant on the subject. &gt; As to your last point they have many summit awards and fwa awards and were voted best website design studio in 2011 and 2012. Which says nothing about performance. 
&gt;Oh well, there is no changing your mind, even with the facts. Making shit up and making a bunch of fallacious arguments is not the same as facts. And stop acting like a twat. &gt;IE concurrent downloads (10) Firefox (8) Chrome (10) by default. Simultaneous connections per hostname: IE7: 2 IE8: 6 IE9: 6 IE10: 8 Should we look at the number of parallel downloads the mobile browsers can handle, too, or are we going to throw a blind eye to them again? &gt;Anything else can be changed in the registry. So your approach to fixing the performance issues of your websites is to ask your visitors to change their registry settings? Are you fucking serious?
based on yout output its weird. will you post your complete code in here?
&gt; Even if it's just a notice that pops up if you don't provide an expected GET variable or something, you might as well at least (throwing exceptions being more ideal) put in a: &gt; if(!isset($_GET['asdf'])) die("Must supply parameter asdf."); You should not die(), nor should you throw an exception, since it's not an exceptional situation. You should appropriately handle these cases and display an error message, if needed.
As far as I'm concerned, a page not getting a required GET parameter can be handled as a fatal error. If it's an optional parameter, I'll handle it's omission in the logic, but when you're trying to, say, view something based off of an ID number and don't get the ID, I personally don't see the need to show anything more than an error. I'd rather throw an Exception in a Controller and have the system handle displaying the error that way, though.
Not in the literature? ParameterExceptions/ArgumentExceptions are everywhere. You can make a case that a malformed URL that *results* in one should be treated differently before it reaches that point, but, in essence, that's all that it is -- a null is being passed to a variable that cannot be null and still have your code execute properly. In fact, this is *exactly* how the routing system of many web app frameworks handle missing parameters that should be there based on routing definitions, it's just both thrown and caught by the framework itself.
&gt; those are for class interfaces, not for control flow ...like when trying to pass a null ID to a constructor, which is the inevitable result of a missing URL parameter. When that's thrown by the model, the best case scenario is the user sees a page with a ton of unexplained blanks where data should be. Worst case is they get further errors because relationships start to fail, e.g. you're trying to load and use a Customer model referenced by a Transaction model. &gt; In the one's I've worked with, if required parameters aren't met, it's simply isn't a match, and it would proceed with the next route in the collection. That would be the default behavior when such a specific instance doesn't arise. Most routing systems let you design your URLs in such a way that you can greatly limit the instances in which it might happen, though, i.e. you can do "/1/edit/" instead of "/edit/1/" to ensure that the record gets passed with higher priority than the action. Even then, though, someone might pass an invalid ID, in which case the constructor (rightly) throws a ParameterException, in which case, the router has to catch it and do something with it. Proper routing should avoid *missing* parameters in most cases, which I suppose makes it not 100% analogous to notices cropping up in more procedural page viewing, but both, in my opinion, can be validly characterized as ArgumentExceptions, there's just nothing to catch the exception in procedural code, hence why I think it's kosher to just kill the page.
Smu Shit is a delicacy in my country. 
&gt;...like when trying to pass a null ID to a constructor, which is the inevitable result of a missing URL parameter. Do you perchance not know what control flow is? &gt;Even then, though, someone might pass an invalid ID, in which case the constructor (rightly) throws a ParameterException, in which case, the router has to catch it and do something with it. In those cases, it would have been a failed match in the frameworks I've worked with. It would simply continue to try the path against the rest of the routes until a match has been found, and, failing that, an error controller would be invoked. No exception would ever be thrown for this flow. However, it might throw an exception if, for example, a route pattern was incorrectly compiled, but that's not an exception caused in or because of the control flow. 
Yes, I know what a control flow is. I guess you can pull the database into the router and check the IDs in there, I have just always found database interaction best limited to the controllers as much as possible, as putting it in the router would break up what is normally a *very* clean and *very* readable file with extra code. Additionally, to me, an invalid parameter for a correct match should still be treated as if the user was *trying* to get that match. I guess you can just let the router run its course, not match anything, and give a soft 404, but if you have the gist of what the user wanted to do, I find it better to try to help them get where they originally wanted to go. Maybe I offload too much to the controllers by some people's standards, but it leaves my router, models, and views *very* clean and legible.
&gt;I guess you can pull the database into the router and check the IDs in there, I have just always found database interaction best limited to the controllers as much as possible, as putting it in the router would break up what is normally a very clean and very readable file with extra code. The database definitely does not belong in the router. Routes should be validated according to their *pattern*. Whether those IDs are actually correct or not is a later concern, and is the job of the controller. Now, if a match isn't found for that ID, you should display the user with an error message. This error message shouldn't be handled via exceptions, as it's part of regular control flow.
It's never being run through the PHP preprocessor. The code is being printed out as-is, which makes it interpret the following parts (in bold) as tags: &gt; **&lt;?php echo '&lt;h1&gt;**Hello World!**&lt;/h1&gt;**'; ?&gt; The visual output is, as described in the original post: &gt;Hello World! '; ?&gt; The cause is simply a misconfiguration of the server.
It's worth noting that there are a few [security considerations associated with running PHP through CGI](http://php.net/manual/en/security.cgi-bin.php).
The freenode channel may not be what you're looking for. They seem to only be open to answering questions about foreach loops and data types. Anything worth asking---e.g. about comparisons of frameworks or tools---always seems to be forbidden by some channel rule.
Each post will have a userid of who posted it and a date when posted. When I am logged in, I will have a list of userids who are my friends. Get a list of things posted with the userids of people who are my friends and order by post date descending.
Would that mean the select statement would end up being hugely long? (lots of OR switches?)
I'm somewhat new to PHP too but I think you would want to put the userids of the user's friends in an array and then use the in_array function to see if each post was posted by a friend. I'm sure a professional will comment soon with a better solution though...
Three tables: users, relationships, posts. SQL for your "getFriendFeed" method could look something like the below, which is very basic but should you give you an idea of how to use joins to get only what you want from a single and concise DB query: SELECT * FROM posts AS p JOIN relationships AS r ON r.friend_id = p.user_id JOIN users AS u ON u.id = r.user_id WHERE u.id = &lt;logged in user ID&gt; 
Not really. Simple table setup (excuse capitalization or typos, I'm on mobile): Users ----- Id Name Friends ----- Id Userid Frienduserid Posts ------- Id Userid Postdatetime Post You would do Select Whatever fields you want From Posts as p Inner join friends as f on f.frienduserid=p.userid Where f.userid=&lt;logged in user id&gt; Order by Postdatetime desc Limit &lt;however many you want&gt; This way you use an inner join to limit the post rows returned to only the ones that the friends of the logged in user posted, and only get the last x posts (instead of all of them since ever) Of course, you should also use prepared statements and a database abstraction layer also, but this is just to demonstrate the basic database concept SQL 
I prefer using selects over joins where possible, they're generally faster if you only need one column from another table; your query will also lack the poster's name, as the 'users' table is nowhere in the statment. If you only need the posts, then: SELECT * FROM messages WHERE UserID IN ( SELECT SubscribedId FROM subscriptions WHERE UserID = ? ) ORDER BY ... However in this case, you probably want to get the friends' names too, so the join is becoming inevitable: SELECT * FROM messages LEFT JOIN users ON messages.UserID = users.ID WHERE msg.UserID IN ( SELECT SubscribedID FROM subscriptions WHERE UserID = ? ) ORDER BY ...
I think Microsoft was at least a few years as part of their research labs. I knew somone in grad school who was obsessed with Haskell and always talking about Monads (it got to the point where I think people nicknamed him "Monad"). He went to work for them so I assume he was using Haskell there.
No problem. Good luck!
That pricing page is obscene -- I couldn't be bothered.
I find it hard to believe a left join and sub queries would be faster than inner join. Can you give some reference for this?
This subquery would get slower and slower the more messages there are, as it would be running the subquery once for each message. Bad move. It would be preferable to do the inner join or to do more than one mysql statement to get the subscribers for use with the IN statement.
There's plenty of conventional wisdom out there regarding hiring. But I say, start a company github. Ask anyone who contributes meaningfully to your projects if they're looking for a job.
Hire some one you can mold. 
Do you think it's acceptable to ask someone for their github account if they have one to submit with their resume?
Exactly. 
What determines moldability? 
Don't put too much weight on the resume, for starters. Throwing out any candidates who didn't go to (or finish) college, for example, is eliminating a pretty significant chunk of talent. Filter your candidates through the fizz-buzz test. You're just looking for general problem-solving skills here. A competent junior developer should be able to nail it in less than 10 minutes. Look for passion and interest outside of the work environment during the interview. Ask leading questions about hobbies and interests to gauge this. Keep away from overly introverted/anti-social candidates. Personality matters. Productivity takes a nose dive if you introduce people like that into a team, regardless of how good their skills might be. If a candidate gets this far, wrap it up by gauging their ability to debug. Yes, debug; not code. Development is something like 10% writing code and 90% debugging it, so interviewers that give "programming tests" are just plain doing it wrong. Instead, present the candidates with malfunctioning code and ask them to find the problem(s). Those that find them in a reasonable amount of time have good potential. Those that find them and point out any coding standards issues, lack of documentation, standards compliance errors, etc. have great potential.
They're new and/or ask questions. Typically this also means they're not old. Older programmers tend to be harder to shape.
Someone who is willing to unlearn what he has learned to learn new things. Willing to change their coding habits to meet existing standards. In simpler words, people who aren't stubborn.
Agreed. Subqueries are never a good idea. Internally MySQL will not optimise Subqueries so even if your sub select returns the same row each time, it will still get executed for each row it looks at.
I wouldn't hire anyone without a github account, if a person doesn't have one it immediately tells me that they aren't keeping up with the time.