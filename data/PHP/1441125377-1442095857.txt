It doesn't replace the need for MVC, but expands on and fixes many problems found in projects that try to force things into the controllers and models (if you're just using Eloquent) that shouldn't be there. As far as the difference in CQS vs. CQRS, I think it's more of just a Functional vs OO thing, not necessarily where you're separating code.
It's strange to read a beginner's mistake being represented as a "convention", as if it's a matter of opinion if this is a good idea.
PHP uses arrays as named parameters in some places, most prominently in the streams APIs for stream contexts. If you feel strongly about it throwing an error if you pass an unknown array key, file a bug, this is why we have alphas, betas and RCs for PHP 7. Reddit is not a bug tracker, and I don't see a problem worth discussing here.
I am currently on mobile so I can't check atm... But I would have a few questions that you might be able to answer quickly for me: * Can we assign groups to properties of certain classes, so I am able to choose what I want to be serialized? * How fast can you deserialize json objects of multiple mega bytes (e.g 1.5 MB) into an array compared to JMS? I will give it a look either way, though :)
[removed]
&gt; They're not semantically distinguishable there, but in PHP they very much are. Apples, oranges. Sure they are. By-Reference means it's a writable var. Since Haskell doesn't have writable vars, the passing is By-Value. And I included that not to point out that it's the same situation, but to show that you don't need mutability (writability) in closures period. &gt; PHP doesn't have the semantics or tooling of Haskell, so compare it to something that matches its imperative paradigm, like JavaScript. And PHP doesn't have the semantics of JavaScript. Hence comparing it to it is apples and oranges. It works both ways. &gt; This thread was posted so people who don't have access to your private discussions can give feedback. Those discussions were very much not private. They were held in public chat rooms. &gt; And now you come here and tell me things have been decided, you disagree, and to hell with our feedback. Not at all. I came here to write what we talked about. Your reply showed that you won't be convinced. Your mind is made up, hence there's no point in debating. It's be wasted effort typing. And I really didn't feel like writing all of this out. But if you must, here are why it's a bad idea (in no particular order): * References Are In General Bad References are almost always a bad idea in general. They can cause weird side-effects. Take for example the following code: function foo(array $a) { return $idx ~&gt; $a[$idx]; } If you were using references, that array would be copied every single time that function is called. An O(n) operation. References remove the ability for copy-on-write to work (or at least complicate it significantly). Now, don't get me wrong. There are times that references are good and useful. Just that they do come with drawbacks that are not worth it for every single short closure that's created. * By-Reference should be By-Scope JavaScript doesn't do by-reference binding. When you have nested functions, it isn't two variables pointing to each other (which is what a reference is). It's the same variable. Meaning that JS is doing the binding by-scope. It's actually inheriting the parent's scope and using the variable from there. Not to mention that to refactor PHP to support shared scoping would be a massive undertaking. It would likely require a rewrite of the engine to do (simply because it'll change the fundamental zval semantics drastically). If it was the same variable (shared scope), then I *might* be able to get behind it. But not by-reference. And shared-scope isn't going to happen anytime soon... * PHP Is Not JS PHP doesn't have a concept of a "shared scope". In fact, this is something that I think PHP gets right over many other languages. When you look at a function you know precisely where every variable lives. If it's not explicitly declared `global`, it's in that function. Period. With this change, that will change slightly. In the case of a lambda, it will allow you to read transparently from the parent scope. But all writes will still be lambda-local. There are a lot of things that PHP does differently from other languages. Some of which I think are honestly better (variable scoping, non-default-nullability, etc). Some are definitely worse. But some of the reasons that JS needs these features don't exist in PHP. For example, one way to "simulate" private variables in JS is to use a closure to wrap those variables, then inherit that scope in closures which implement the object's methods. PHP doesn't need this because it has first-class classes. So an entire reason to use writable bound variables is gone. * Look at real-world usages in PHP Look at anonymous functions in PHP and how they are used today. The **vast** majority of bound variables are bound by-value. Yes, there are some that are by-reference, but they are typically the exception rather than the rule. Heck, even [HackLang's Lambda](http://docs.hhvm.com/manual/en/hack.lambda.php) is by-value. * Writable scope prevents lazy execution The example that you provided: $results = []; $collection-&gt;each($item ~&gt; $results[] = $item * 2); Prevents lazy execution by definition. You must iterate at that call time. You can't delay it. However, with the solution that I provided, the entire thing could be lazy: $results = $collection-&gt;map($item ~&gt; $item * 2); That could do nothing but return a new collection. Then accessing `$results[3]` could actually call the lambda, but just for the key 3 (not the whole collection). That's not really a show-stopper, but it's a good example how mutability in general complicates things. I brought up Haskell before not to show that JS is wrong or anything, but to show that immutability can still work. In fact, I'd like to see PHP get stronger tools for immutability than it already has. So far you've shown one example, and I've shown you a counter example of the same code that has additional benefits and is still trivial to understand. I've also just listed a bunch of reasons and explanation around it. If you'd like to have a constructive discussion, can you please cite additional examples of where mutability is good (leaving out the example of private variables, since PHP doesn't have JS's type system and hence has no need for that functionality)...
&gt; I find this lack of intellectual honesty very unproductive. And that's why I didn't want to have this "discussion". You'd rather drop to ad-hominems and pick apart every word I say rather than discuss the content. So sorry, not continuing this thread at all.
This can be useful but I mean in-php-file documentation as in my example. There are keywords for @return and @throws etc... but I can't find one for exit codes.
@return would be misleading since its an exit code not actually returning.
No discussion has been had. I'm forced to "pick apart" word definitions as your entire argument hinges on these word definitions, which are entirely self-serving and incorrect. Your other argument is that Haskell is more similar to PHP than JavaScript. You can't possibly expect people not to either tune out or lose a nerve when you tell them nonsense like that.
Could it also return the value?
Yeah I find that very suspicious, it's like "Look ma, no lines!" but... sure, if I move the the logic elsewhere, it's elsewhere. &gt; Simply moving all logic from the controller to service classes separated by reading from and writing to our storage has trimmed the code down by more than half the amount of lines
Try Program-O. I know you mentioned PHP but if you can manage a bit of JavaScript search for Rivescript. Program-O uses AIML to store responses and when I worked with it I found it to be a bit challenging to work with. Rivescript is basically easier and far more versatile than AIML,and the developer has also provided java/PERL implementations of a chatbot using Rivescript.
This really went south, didn't it.
Give it as much ram as you possibly can. Edit the PhpStorm64.exe.vmoptions file (in Windows C:\Program Files (x86)\JetBrains\PhpStorm 9.0\bin\PhpStorm64.exe.vmoptions -- or PhpStorm.exe.vmoptions if you're not using 64bit) and change the -Xms and -Xmx lines to this: -Xms512m -Xmx2g That makes it allocate 512MB on startup, and max out at 2GB. That's what I do on my machine (which thankfully has plenty of RAM). Obviously, if you don't have that much available ram then change the max to what you can afford to give it. Same goes for any other Java-based IDE you use to edit JS files. They all slow to a crawl editing JS for some reason.
Yep! This HHVM package already includes `hh_client`, so I'd expect vim-hack (https://github.com/hhvm/vim-hack) to work out of the box. Please file an issue on GitHub if it doesn't!
No. It's impossible to both return a value and exit. I mean, you can technically write both lines of code, but the latter one will always be unreachable.
Just remember that Google has started just filling the refferal header (using Google magic) with just the domain of the search (I believe this is just for logged in users, but never tested). So you won't get the search query that led the user to your site. No idea why, but I would presume its to get more users to use Analytics. 
What would you expect from PHP.
http://restler3.luracast.com/examples/
Do you want the value in the row to be updated as soon as the checkbox is toggled? If so you'd need javascript to send an AJAX request to another page. If you want all the rows to be updated in one go, you'd need to set up a proper form with a submit button.
OK Thanks. I was thinking all in one go as it may be a simpler route but I will see if I can figure out a JS AJAX method.
&gt; As a component provider it means you need to implement all its features, and there's no way (without ruining the idea of a shared interface) to expose a feature that's not in the interface. An approach I've used recently for an internal project that I wanted to function both as a standalone component but also provide shortcuts for easy framework integration is using inheritance with interfaces. For example: interface Importer { public function setValidator(Validator $validator); public function setTransformer(Transformer $transformer); public function importData(array $data); } interface BatchImporter extends Importer { public function setBatchSize($batchSize); public function getBatchSize(); } interface CsvImporter extends Importer { public function fileIsCsv($fileOrPath); public function importFromCsv($fileOrPth); } interface DatabaseTableImporter extends Importer { public function importFromDatabaseTable(PDO $connection, $tableName, $columns = '*'); } The implementations either traits or abstract classes, IE `AbstractBatchImporter`, `CsvImporterTrait`, etc. Is this a sensible way to provide feature-rich standards without forcing implementations to use all of them?
Hey look at that, last section in the README is from existing! I'll have to try that, and maybe push some fixes upstream for him too. Thanks!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/subredditdrama] [Who's being intellectually dishonest? Who's the sea lion? Who's part of a secret backroom cabal? These questions pondered in an /r/PHP discussion on closures](https://np.reddit.com/r/SubredditDrama/comments/3j9pnv/whos_being_intellectually_dishonest_whos_the_sea/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Regarding [container-interop](https://github.com/container-interop/container-interop) it's also interesting to know that Aura.Di and Zend Framework's Service Manager will be compliant in their next version. And for those curious about projects *consuming* those interfaces: Slim v3 (not stable yet), Zend Expressive (not stable yet), Silly CLI, Mouf, …
oh yeah, that works
Yeah, the way I see it the Controller is the boundary where the HTTP/HTML world ends. The Controller's job is twofold: * Inspect the URL, POST-body, HTTP-headers, etc. and populate a legal `Command` DTO on the way in * Inspect the `Event`s (or exceptions) that come out and decide what that means in terms of emitting JSON/XML data, HTML pages, or redirection headers. That's how I've got it mostly-working at our company ERP, anyway. The controller knows "how" the user is trying to interact and do work, but the real domain logic is UI-agnostic and doesn't care what the user is clicking or seeing, only what has to happen within business-rules.
 public function store() { $this-&gt;user_command_service-&gt;createUserCommand(); return Redirect::action('Controller@index'); } I just want to drop this in here to either start a debate or clarify some things. If you wanted to redirect to the profile of the user you just created, rather than back to the index, some CQRS sticklers will tell you to query the user you just created to fetch its ID. This is silly. Just return the results of the service and use that return value to build the redirect to the user's profile page. ***A return value is not a query***. It does not cause referential transparency problems (e.g. it has no side effects), and it's obvious that `createUserCommand()` cannot be mistaken for a query source.
I would fear that any significant pre-commit checks would make someone who does "many small commits" style development slow down too much.
Regarding "Wishlist: Queues" I read documentation for a lot of queues and queue libraries in the last months and I came away with one conclusion: There will never be a good, useful and functional abstraction (nor, in this case, an interface) for queues. The reason is simple: The queues themselves are very different. On the surface they seem all very similar - they just route messages from a source to a target, right? The devil is in the details. Just a few examples: *Creating messages* Beanstalkd supports priority, delay and time-to-run: put &lt;pri&gt; &lt;delay&gt; &lt;ttr&gt; &lt;bytes&gt;\r\n &lt;data&gt;\r\n RabbitMQ supports flags `mandatory` and `immediate` and time-to-live (via an extension): publish(short reserved-1, exchange-name exchange, shortstr routing-key, bit mandatory, bit immediate) Disque supports delay, retry time (time-to-run) and time-to-live: ADDJOB queue_name job &lt;ms-timeout&gt; [REPLICATE &lt;count&gt;] [DELAY &lt;sec&gt;] [RETRY &lt;sec&gt;] [TTL &lt;sec&gt;] [MAXLEN &lt;count&gt;] [ASYNC] Moreover, Disque messages contain two counters - the number of NACKs and the number of additional deliveries (retries for reasons other than a NACK). *Acknowledging messages* * RabbitMQ supports ACK and NACK * Disque supports ACK, FASTACK, NACK and WORKING * Beanstalkd requires the user to choose an action: delete, release or touch *Creating queues* * Disque and Beanstalkd allow defining queues on the fly. * RabbitMQ requires declaring a queue in advance (and allows to set its lifetime). *Marking failed jobs* * Beanstalkd allows to manually "bury" a job - leave it in the queue but in an inactive state * Disque implements the two above mentioned counters and leaves the decision about failure handling to the user * RabbitMQ allows to define a "Dead Letter Exchange", an extra queue that will receive failed jobs under certain circumstances Etc etc. I have only scratched the surface. As you can see, the differences are fundamental, the queues work in vastly different ways, the messages have different properties and support different actions, only some of them common. And unlike in SQL where you can use an abstraction like DBAL/ORM but fall back to SQL itself, queues don't have a common language. There is nothing to fall back to. I think it's not possible to write a useful queue abstraction.
So finally you are using inoerp? What framework inoerp is built on?
You can take a look at [Piwik](https://github.com/piwik/piwik) to get a full scale idea. Don't forget to check out their extra repos, such as [device-detector](https://github.com/piwik/device-detector).
You can think of CQRS like a MMORPG world: you can send a command to walk forward, but did you really walk forward, or you bumped into another character that just walked into your path you'll figure out from the read model as the game fetches events from out of it about the world updates. This is the ideal scenario about CQRS, which means indeed Commands return nothing, and instead you query about "the world" from another place. From that point on, do you want to be strict, or have the Command model return data is up to you. Yes, it is practical to return userId from a CreateUserCommand. Nothing wrong with that, it's a choice. By choosing so you lose some benefits of CQRS and win some benefits in terms of a pragmatic API. An example of such pragmatism is SQL, which I'm sure you're also thinking about. SQL is mostly CQS-oriented: there's query() for reads, and exec() for writes, but as a deviation, exec() returns additional information like affected rows, last insert id and also it can return warnings and errors. So, SQL benefits from some of the properties of CQRS, but not all. And this is just one of the reasons why there's a limit to the scale of a pure SQL database. But there are also alternatives to returning a user id, for example, you can send a unique command id to the server, and then either query the Query model what happened to a user tagged with that command id as a creator, or await an incoming event (like a "soft response" in a way, but out of band) from the Query model with that command id and results. In large scale operations you need command id anyway, because it helps achieve a uniform command idempotence. In large scale operations also it's undesirable to block the UI to wait for a Command response, and it's undesirable to directly burden the Command model with providing responses, because it means the Command model may become a query bottleneck, which is the very purpose CQRS exists to avoid. So in a nutshell, strict CQRS can be nice, but it isn't a silver bullet, it starts to make sense only at gigantic scale. Oh and what OP's article is about is *not CQRS* by a long shot.
You can check MIT's open course http://ocw.mit.edu/courses/engineering-systems-division/ Look for below courses ESD.267J Supply Chain Planning Graduate ESD.268J Manufacturing System and Supply Chain Design Graduate ESD.273J Logistics and Supply Chain Management Graduate ESD.290 Special Topics in Supply Chain Management Graduate You 'll get a lot of awesome study materials on supply chain
The thing is thinking about use cases. Sure it's not possible to write an abstraction that covers all features of a all queues, caches, DI containers, SQL engines… But is there an abstraction that could cover at least one use case? (e.g. basic usage of a queue) If so, then it's possible, and useful, to try and create such abstraction. It will not be useful to everybody, just like you have to make a choice between using Doctrine DBAL or PostrgreSQL directly (for the advanced features). But it can still be useful. To give you a more concrete example, here are 2 interfaces for queues in the same package, each fitting a specific use case: - generic "run a job" [`WorkDispatcher`](https://github.com/myclabs/Work/blob/master/src/Dispatcher/WorkDispatcher.php) - "run a job and wait for the result, or until a timeout" (quite specific!) [`SynchronousWorkDispatcher `](https://github.com/myclabs/Work/blob/master/src/Dispatcher/SynchronousWorkDispatcher.php)
You're doing it manually, not **using a function**.... that's what I said and obviously your approach has some problems. You can do as so, but defeats the purpose of serialization, and if any change is done in the original class structure, **your manual serialization will just break!** stdClass works because it can be casted to array. Who is using stdClass and public method anyways?! No other object can magically casted to array except for the SimpleXmlElement... Neither case is the use case the serializer is targetting while it can handle them without problems.
A constant instead of the string "allowed_classes" would have been nice.
Thanks for this great description, it made things much clearer for me. Apparently we are using middleware already, we just didn't call it that. :)
Hi, I'm one of the core developers of Ariadne, which has long had a focus on security. We've made the system immune to SQL injection and direct XSS attacks. The access control is based on fine grained capabilities checks. Templates and most code is written in a sandboxed version of PHP. The system is used in a number of local government applications in the Netherlands, which must do a yearly security audit. Take a look at [http://www.ariadne-cms.org/](http://www.ariadne-cms.org/) and let me know what you think.
All names are taken. It doesn't matter. I have a component called Guardian (it's not a firewall, but anyway). Use that name if you want. One way to resolve the issue of naming is to use your unique vendor name + generic word in branding. Say, like Microsoft Windows. Or Apple Watch. It doesn't matter someone else has used "Watch" because no one else is "Apple".
I said *looks*. It looks like design from the early 2000s, which doesn't inspire confidence, and I can't really research what matters about the product, since it's not open source. By not being open source, it also doesn't lend itself to extension which is another dealbreaker. Everything about the product screams stay away.
I would say the #1 most underestimated thing is caching. Reddis/memchache. Super easy to get started with, lots of devs don't have enough experience with it! 
You cannot call a method from a mapping file. Definately could be implemented, but it's not intended to be used in that way. The data transformers are intended to be used as a "view" layer. All data and all manipulation should be valid before passing it to the serializer. Relationships? I may need some more information or an example to answer this properly. Wild guessing what you mean, all I can say by default all objects and its relationships (references) are serialized.
Like someone else said, a day will not get you far, but if you want some hot topics you should get used to: * DDD * CQRS (at least some Command Bus) * Event Sourcing * API design in general This is all mostly about Design patterns and good OOP development, and how to use them. Should give you lots of food for thought.
well at least this may mean people stop saying its becoming java
The door is right there -&gt; /r/node
You are triggering my PTSD (Perl Traumatic Stress Disorder)!!!
What? We germans have it the easiest!? It's just altgr and the plus sign?
Twilio is really easy to integrate into. Building a very simple two factor authentication would work, or a "click to dial" on a page, or a text to reset password, etc..
I think the point is that you shouldn't have to. From what I've seen this is supposed to be a heavily used new security feature and you should not have to make a wrapper for this function to fix it for every invocation. Your main audience are new developers who don't know any better, and probably won't know that they need to do this kind of stuff. Just look at the issues caused with older insecure bindings to Mysql and how long that shitshow has dragged on for. 
No argument. But it is also entirely optional. There may be strong compelling reasons to use it but it's still a *choice* whether on not one does. If you disagree with the choice someone makes on this, and you disagree strongly enough,don't use the package. 
Traits.
That's a nice example of what I'm talking about. * [The queue interface](https://github.com/laravel/framework/blob/5925ed9bae03c86ea0d6902568ca0ffd159d7a61/src/Illuminate/Contracts/Queue/Queue.php) promises only the most rudimentary of functions - `push`, `pop` and `later` * Some actions are missing, for example touching a job in IronMQ or Beanstalkd * Some functions are simulated in a way that forces the user to be coupled to the abstraction - [the implementation of delayed jobs in Redis](https://github.com/laravel/framework/blob/5925ed9bae03c86ea0d6902568ca0ffd159d7a61/src/Illuminate/Queue/RedisQueue.php#L162) forces you to use the Laravel Queue for both the producer as well as the worker (or copy the logic closely in a different environment - but what's the point of the abstraction then?) * Some functions are implemented only for some backends, eg. [burying a job in Beanstalkd](https://github.com/laravel/framework/blob/5925ed9bae03c86ea0d6902568ca0ffd159d7a61/src/Illuminate/Queue/Jobs/BeanstalkdJob.php#L98)
I'm not criticizing it, it is surely useful for Laravel users to have a queue integration out of the box. The code, while working, is however not very clean and cannot be abstracted into a useful set of interfaces for the reasons I have described above. Queues are too different from each other.
Thanks, I did get his point about picking a framework, I will start learning Laravel, and of course I won't drop the basics and I would do what you suggested in my spare time but learning Laravel is a priority for me.
If it's known to be a bad practise there's no good reason to follow it... 
no-one likes my suggestion :)
Build a slackbot. Especially something stateful that interacts with the user in a discursive, chat-oriented fashion. It's simple, but it demonstrates ability with web sockets, event loops, text manipulation, maybe external APIs (I built one recently interacts with yesorno.wtf and memegen.link, just for fun).
As somebody who was hiring php devs a couple months back, that would've been awesome to see on a applicant's resume.
I do not quite agree with you, because I think what frameworks it's good tool. Your experience in php can help you make an excellent site. The framework is the basis to avoid wasting time on something basic My favorite framework is Symfony2 more about http://stfalcon.com/en/blog/tag/symfony2
What more do they want? Did they ask you to show them more work or to provide more proof of certain skills?
"A public method is like a child: once you've written it, you are going to maintain it for the rest of its life!" Stefan Priebsch http://phpsw.uk/talks/extremely-defensive-php
Thanks for the article! Fabien has a really good point: "Having a few well defined extension points force the developer to extend your library the right way instead of hacking your code.".
[removed]
I try to keep an eye on those projects. And I still have to find a good layout for the list...
It's all about (not) reinventing the wheel. Frameworks simply take away all the stuff that does not need to be done over and over. If you are a professional dev you should know programming well enough to not want to do again what is already done, and better than you can do in your allotted time. When I started my career (c++ 1998) every project started out with writing parsers. That work is done now, maybe forever. Why would any professional want to go back there? It's school work.
There's a business side to this as well... Using a framework makes you more productive at least in theory.
I actually have an older one I built, gonna spruce it up now that you mention it. Thanks!
Why not do it yourself if you know what's involved and how fast it will be?
makes sense, I guess my company goofed then because I don't plan on sticking around. I work in NYC I am paid less annually than the illegal immigrant contractor that we hire for running network cables lol.
I do not know what's involved and I was given a rough level of effort from a dev who does not have the time to do this. Are you interested?
Also isn't it sort of misleading to use the benchmarks from the initial JIT from HHVM (or even the initial compile for PHP)? The first 20 hits aren't nearly as important as the next 20 million.
Looked into it. $10 a month isn't too bad, but I wouldn't call that insanely low. Are you renting much lower on the side as opposed to advertising it as a service? 
&gt; I do not know what's involved and I was given a rough level of effort from a dev who does not have the time to do this. You're starting a bitcoin payment processing company, and yet you don't know what's involved in writing bitcoin payment processing software? This frankly looks like a red flag to me.
No. I have most everything up and running and it is being used on several sites. I have a potential client that is using woo commerce and wants to integrate my payment system into her checkout/shopping cart system. She asked for a plug in and sent me links to some woo commerce/php guidance.
Its currently being used on a few sites already. One potential client asked for it to integrate into woo commerce and i hit a brick wall. I am the CEO and i sub out most of my software work.
"Absolutely nothing else." isn't true and API's aren't just for use from a 3rd party. Your application could use an API for internal use, the API would be a part of your application, not data from a 3rd party. Lets say you run your admin panel for your application off of Backbone.js/Node.js you don't need to make http requests for internal use and you may not even be using pure JSON, you could be using HAL as your format; in that case you wouldn't want someone to load the object from the db and do a json_encode() so it helps prevent everyone from doing their own thing and keeping some kind of order/semblance.
Ok, you're very smart, congratulations. But at the level OP is, all you said probably sounds like nonsense to them, might as well have said API reverses the polarity of warp drive's quantum carburetor. This is why I described it like I did. Modular design is a bit further down the line.
I don't have PHP 7 installed locally, but I do have HHVM to test. Any ideas why my PHP 5.6 numbers are ~10x lower than yours? PHP Version: 5.6.11-1+deb.sury.org~utopic+1 array_search() + unset() | array_splice() | for loop | foreach() + unset() | array_filter() | array_diff() -------------------------------------------------------------------------------------------------------------- array_search() + unset() | N/A | 110.53% | 152.42% | 179.72% | 318.97% | 2617.76% | array_splice() | 90.47% | N/A | 137.9% | 162.59% | 288.57% | 2368.28% | for loop | 65.61% | 72.52% | N/A | 117.91% | 209.26% | 1717.41% | foreach() + unset() | 55.64% | 61.5% | 84.81% | N/A | 177.48% | 1456.55% | array_filter() | 31.35% | 34.65% | 47.79% | 56.34% | N/A | 820.69% | array_diff() | 3.82% | 4.22% | 5.82% | 6.87% | 12.18% | N/A | -------------------------------------------------------------------------------------------------------------- array_search() + unset() = 15183 interations per second array_splice() = 13736 interations per second for loop = 9961 interations per second foreach() + unset() = 8448 interations per second array_filter() = 4760 interations per second array_diff() = 580 interations per second PHP Version: 5.6.99-hhvm foreach() + unset() | for loop | array_search() + unset() | array_splice() | array_diff() | array_filter() -------------------------------------------------------------------------------------------------------------- foreach() + unset() | N/A | 101.69% | 107.61% | 130.68% | 151.06% | 153.07% | for loop | 98.34% | N/A | 105.82% | 128.52% | 148.55% | 150.53% | array_search() + unset() | 92.93% | 94.5% | N/A | 121.45% | 140.38% | 142.25% | array_splice() | 76.52% | 77.81% | 82.34% | N/A | 115.59% | 117.13% | array_diff() | 66.2% | 67.32% | 71.24% | 86.51% | N/A | 101.33% | array_filter() | 65.33% | 66.43% | 70.3% | 85.37% | 98.68% | N/A | -------------------------------------------------------------------------------------------------------------- foreach() + unset() = 28940 interations per second for loop = 28460 interations per second array_search() + unset() = 26894 interations per second array_splice() = 22145 interations per second array_diff() = 19158 interations per second array_filter() = 18906 interations per second
Um..Not exactly sure how that works exactly, but why not? If I can only access a property, that means I HAVE to implement __get magic method in my model. Wouldn't it be nice to allow a mapping config (or class?) to call getters in my model? Again, same for the relationships. I need to define a magic method to access them as a property. I'm not trying to complain. I actually want to use this package to replace Fractal.
Looking at the patch, any malformed, compromised, or malicious package on your server could have exploited this. So in complete isolation, this isn't particularly exploitable; in practice, you generally don't serve a website in complete isolation. But it's more of a "someone could leverage this to make an existing exploit worse" than "if you don't patch immediately your server will be 0wned" type of thing. Note that I only skimmed the patch, not thoroughly analyzed it, so it may be worse than that. From what I saw, it was mostly manually doing umask(0002).
&gt; /u/tekmosis was talking to you, not OP. I wasn't talking to /u/tekmosis, but to OP. &gt; Also, I think that the fact that you're just assuming that OP will probably not understand a word that's being said, says a lot about you. The question is "What are PHP API and why do we use it in conjunction to certain MVC frameworks?" You don't have to be Sherlock Holmes to deduce OP is still learning these things. I'm not condescending, I'm not sarcastic, I'm trying to be helpful, by describing the core of a concept, while keeping it simple. &gt; Modular design isn't further down the line from being a beginner anymore. Not since Composer happened. Don't confuse modules and packages. I know some package managers call their packages "modules", but they would never refer to "using a package manager" as doing "modular design". &gt; Also, /u/tekmosis is absolutely right: APIs can be internal, that's all they were saying, and bringing up modular design for some reason doesn't make their point any less valid. Modular design is a shift of perspective. Instead of creating your application as a monolith, it's seen as a set of relatively independent modules that communicate in a very specific, decoupled way. From the perspective of one module, every other module is a "third party". In any bigger team, chances are different modules are maintained by different people as well (see Conway's Law). It's like microservices in every way, but without the requirement for them to be an independent unit of deployment. This is why modules only communicate via a restricted API. And this was my reason for mentioning modular design. Life is full of surprises, you come here to be a dick, but you learn something new. Fun, right? Additionally, /u/tekmosis's example spoke about API exposed via AJAX, which is by definition exposed to third parties, because if it's accessible over HTTP, then anyone can call it, not just your officially sanctioned website JS.
JMS/Serializer is a great piece of software, yet I believe it does too much and has too many features. I went for a keep it simple approach. **Serialization** - Serializes/Unserializes everything **without any configuration** whatsoever, JMS/Serializer does not. Try serializing the $post object from this thread. - Serializes/Unserializes to the same formats as JMS/Serializer does: JSON, YML, XML. **Data Transformation** - Provides data transformers out of the box (Array, FlatArray, XML, JSON, YML). Notice these are **transformers** and they differ from their serialization strategy counterparts. - Can convert to JSON API/HAL+JSON out of the box with official libraries. There's not such a thing written by the author handling those cases. - Data transformers released for Laravel 5 and Symfony 2. **Other** - Less configuration options: encourages best practices over magical configuration options. Better in the long run. - Better coverage and code quality. I definately not support XML transformations at the moment, so JMS wins there.
You only test public methods, private methods will be tested because they are called by these public methods.
What is your budget? Is there an existing API? Is all the design work in place?
I can't see why there would be any difference between testing private methods and protected? Actually, it's considered a bad practice to test either one. Besides, there's no direct way to do it. In unit testing, you should only test your class's public API, not the private or protected ones. Those methods are usually created when you apply refactoring on your code.
&gt; Just so I can learn something new, how is "Ok, you're very smart, congratulations" not condescending or sarcastic? I mean I'm not condescending and sarcastic towards's OP's level of knowledge. As for you &amp; /u/tekmosis, I am condescending and sarcastic, because you've earned it. 
Would be great to hear from /u/scottchiefbaker about the OS they use and any optimizations they might have made to their PHP install to get those numbers. Or put another way--how can I get those numbers! (My cpu is overclocked to I think 4.4, so power management is disabled, 10MB L2 cache, and 16GB quad channel DDR-3 1600MHz.) Is Ubuntu 10x slower than something like Gentoo?
I set up my development machine (Nginx) to use PHP 7 and PHP 5 if it recognizes XDEBUG cookie (until XDebug gets PHP 7 support). Simple Symfony applications are about 5 times faster (60ms to 12ms).
I think I changed the range to 1,100 to speed things up. A range of 1000 was artificially deflating the numbers.
I wonder why...
You don't need php plugin dev but woocommerce extension (or more general: wordpress plugin) dev
I kind of hate this attitude. The original question was for a chatbot. It so happens that PHP is rather ill-suited for the such an application, and there is a widely-used, feature rich, extensible, adaptable application that works with several services out of the box, or with minimal effort, has tons of existing plugins, and has an API that makes it dead-simple to right your own. Only problem is, it's in another language (one that is explicitly better for the use case in question). It's like if someone went onto the Ruby subreddit and asked for a function ruby blogging platform, and someone responded: well, there's a well-understood, widely used, battle-tested, extendable, pluggable blogging platform with tons of plugins and easy deployment to a wide variety of platforms and infrastructures, only it's in PHP and called WordPress. Why should the immediate response be, "There's the door, buddy." Is it really that bad to suggest a node solution when it is extremely well suited to what the OP asked for?
I think it's just a joke, a play on [Ft. Knox](https://en.wikipedia.org/wiki/Fort_Knox), said to be the most secure area in the world. In other words, the person who made that page made it up. I think it just means they are passwords that are very long and complex, so cracking it would be like sneaking into Ft. Knox.
Apologies, I changed the range after I posted the results. I've updated the [.tar.gz](http://www.perturb.org/tmp/remove_array_element.tar.gz) with the same code I used to run the numbers I got above. For the record this is running on a VM with 4gigs of ram, and 4 cores of "AMD Opteron(tm) Processor 6134" and vanilla versions of PHP.
I updated the tar.gz with the same ranges I used for the data I posted above. Sorry for the confusion.
Hey no worries, and thanks... the results are a lot more similar now. I'm installing PHP 7 tonight after all this! Here are the updated results of HHVM 5.6.99 vs. PHP 5.6.11: PHP Version: 5.6.99-hhvm array_search() + unset() | foreach() + unset() | for loop | array_splice() | array_filter() | array_diff() -------------------------------------------------------------------------------------------------------------- array_search() + unset() | N/A | 107.9% | 120.24% | 203.84% | 258.08% | 278.1% | foreach() + unset() | 92.68% | N/A | 111.44% | 188.92% | 239.19% | 257.75% | for loop | 83.17% | 89.73% | N/A | 169.52% | 214.63% | 231.29% | array_splice() | 49.06% | 52.93% | 58.99% | N/A | 126.61% | 136.43% | array_filter() | 38.75% | 41.81% | 46.59% | 78.98% | N/A | 107.76% | array_diff() | 35.96% | 38.8% | 43.24% | 73.3% | 92.8% | N/A | -------------------------------------------------------------------------------------------------------------- array_search() + unset() = 765594 interations per second foreach() + unset() = 709565 interations per second for loop = 636712 interations per second array_splice() = 375588 interations per second array_filter() = 296651 interations per second array_diff() = 275291 interations per second PHP Version: 5.6.11-1+deb.sury.org~utopic+1 array_search() + unset() | array_splice() | for loop | foreach() + unset() | array_filter() | array_diff() -------------------------------------------------------------------------------------------------------------- array_search() + unset() | N/A | 109.05% | 160.34% | 209.62% | 353.44% | 2396.1% | array_splice() | 91.7% | N/A | 147.04% | 192.23% | 324.11% | 2197.3% | for loop | 62.37% | 68.01% | N/A | 130.74% | 220.43% | 1494.38% | foreach() + unset() | 47.7% | 52.02% | 76.49% | N/A | 168.61% | 1143.05% | array_filter() | 28.29% | 30.85% | 45.37% | 59.31% | N/A | 677.94% | array_diff() | 4.17% | 4.55% | 6.69% | 8.75% | 14.75% | N/A | -------------------------------------------------------------------------------------------------------------- array_search() + unset() = 243875 interations per second array_splice() = 223641 interations per second for loop = 152098 interations per second foreach() + unset() = 116340 interations per second array_filter() = 69001 interations per second array_diff() = 10178 interations per second
I'd take a wild guess that it's a server-class CPU with a crapton more cache. I doubt the OS is having a hugely significant impact (maybe a couple percent, not an order of magnitude); if Ubuntu was 10x slower than the competition, nobody would use it.
because PHP developers don't like javascript, would be my guess.
I will test it out this weekend and post an issue if I find anything. Thank you for your hard work and answers :)
Isn't "simple Symfony apps" an oxymoron?
What was most controversial to you? :-)
Apologies, I changed the range after I posted the results. I've updated the [.tar.gz](http://www.perturb.org/tmp/remove_array_element.tar.gz) with the same code I used to run the numbers I got above.
Javascript is essential to any position in web development, that suggestion just shows a commitment to creating technical debt on your part.
Relax, have some rest, and do the interview tomorrow. No pressure. Also, there's no "opportunity of a lifetime" in this field. There are always opportunities.
Mhm. Well, at least we can say Laravel folks are consistent in their convictions.
More trying to pick a fight with the people who down-voted my comment about Hubot being cool and the possible necessity of learning another language other than PHP to get in on the fun.
[removed]
I'm guessing output will be an array for your active record model, or a stdCLass... that for the time being will require at least a DTO class to build the mapping. Maybe I should code a special class that allows working around this case... Is this Laravel's Eloquent or some other active record model? I'd like to see some code to investigate... could you share or open a Issue at github? :)
Great! Thanks for contributing! Con: You can't be sure of the workings of code you don't write. Anyone want to offer a counter point? Something along the lines of "avoid Not Invented Here syndrome" maybe?
As much as I'm not a fan of Facades, they were made with testing in mind. Not only can you swap out the underlying instance of a Facade easily, but it has out-of-the-box Mockery support by doing `NameOfFacade::shouldReceive()...` If you adhere to SRP well enough, Facades really wouldn't even be in your way for writing Unit Tests
Two words: payment processing
facebook LOL
Damn, it's getting harder and harder to differentiate trolls from truly stupid people. 
Avoid JWT. OAuth2 is okay, depending on the implementation. https://github.com/thephpleague/oauth2-server is good. I personally would prefer if there was a newer standard that split tokens into two parts (one for searching, the other for verifying), because searching a database is not possible to do in constant time, and having timing leaks on token verification doesn't sit well with me. (See also: [secure "remember me" cookies](https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence#title.2).) That said, if a timing leak in your API token verification is the weakest point in your entire network, congratulations.
I wrote Laravel, and I just want to say that I don't agree that you should blindly ignore all design patterns. I think you should write good, easy to read, easy to test code. I just don't think that always means slapping in a "command bus" and having 15 layers of abstraction between your controller and anything "real".
Synopsis: A php developer gave a great talk, your attention span limited you from realizing this.
A less cynical pragmatic answer than most provided here is that 1-3 years of experience plus experience with one of the major frameworks means you have been introduced to mature, modern development concepts. This is as opposed to just hacking on a bespoke codebase for a while. Frameworks are a reality and they are used with great results in many places. Why would it be a detriment that people find it valuable? Finding value in frameworks is not devaluing being able to write end to end code. It's just another path.
&gt; There is a lot going on behind those lines of cod But that's not really relevant. You don't have to maintain or update that framework code, so it's really not part of the domain of the application and your ability to reason about it. If you need a paginated list of active users, then `User::where('active', 1)-&gt;paginate(30);` is all your application has to worry about. Just because there's several database abstractions between that and your data store doesn't make that line of code any less readable or maintainable. The issue comes when you start making those calls and queries all over the application, and suddenly you realize that you need to change what indicates an active user from a flag on the users table, to a last login date no older than 10 days. Now you have to change it in 30 places and it's going to be a PITA. I agree with Jeffrey that you shouldn't abstract for abstraction's sake, but at the same time, it's pretty easy to identify something that represents a business rule or "aspect" of your application, and to put it behind an abstraction, without overly complicating your code.
I think it is for the people who will inevitably avoid switching to PHP7 by saying things like "Is it even faster" and "What's the point switching for a tiny bit of speed improvement". It's not the same as bagging PHP4 considering 5.6 is the current version. It's saying "this is how fast the current is, and this is how fast it will be in the future".
TIL don't use `array_diff()`
I think I might not be in the right reddit o_O sorry
Can confirm, have bundled all the things. The guy I work with shakes his head at me when we're brainstorming how to arrange new features I'm out app.
This is even better readable on my 1440x900 screen, thanks.
Fort Knox is known to be one of the most (if not the most) secure fortress in the world, so it's just a play on that - the most 'secure' passwords. The downside is that you'll never remember them ;)
That is where password managers come into play. Also they can generate longer secure passwords then the short 30 character Ft. Knox Passwords show there ;).
Magallanes for symfony deployments :) 
My favorite tools nowadays: - Git for version control. - Phabricator for team collaboration. - Phpstorm/Vagrant/Ansible for the developement environment. - Terraform for infrastructure deployment. - Ansible for infrastructure provisioning. They all require quite a bit of learning to be productive, but once you get proficient they are a charm to work with :) Also much love to composer, phpunit, symfony, doctrine and all \o/ EDIT: I forgot the most important (bash) tools: toilet, cowsay, fortune, lolcat and cacaviewer !
Laravel saved my sanity and made development using PHP, fun again and I'm coming from ZF2. Laracast is just too awesome for words and anytime now I meet and speak with any other developers using PHP, I try to get them started on the right path. Thanks for developing such an awesome framework. I'd also like to thank the awesome community behind it too. Laravel for life here! 
I'm on windows and this option is completely gone http://i.imgur.com/Z62xuha.png http://i.imgur.com/TVcO2LA.png
Congratulations on creating your first PHP thing. I've just skimmed through and it seems that you're using a somewhat outdated approach to PHP (maybe old literature? ) I suggest that you read http://www.phptherightway.com/ and try to see what you can improve on. I especially recommend the database section as I found at least one SQL injection.
I (the writer of this blog) believe that writing about both the problems and solutions you find in the development world useful. This includes some of the personalities I meet and the way I choose to deal with them. I can't tell you how often it's going to be updated but wanted to share.
Maintain some kind of standard of password quality, aka make sure they are mixed cases has some numbers and special characters. Validate all php inputs from url, get or post. Keep a seperate record of all logins, and create an audit trail of what people who have admin access do. Mandate all users change passwords after 30 days. And stick to enforcing strong passwords. Make sure all form's have autocomplete="off".
Set an IP filter for the login interface.
A very big tool for me is OmniFocus. It helps me quickly write down things I still need to do. If someone mentions that 'X is not working' while I'm at the coffee machine I can just enter it and worry about it later.
&gt; * Terraform for infrastructure deployment. * Ansible for infrastructure provisioning. I'd be interested in more info on how you use these together. Terraform doesn't seem to have direct support for Ansible. Plus Ansible seems to offer similar infrastructure deployment (from what I've read in the docs) 
Quite overkill, if you'd ask me.
Check your access logs. Find suspicious IPs, and see what flow they're following.
It could be user-side. Someone who gets access from one of the website users. Add an history : username/mail used, with datetime and IP address. Eventually the pages he accesses, with POST values. And I would limit the attempts in the login form : 3 tries in 5 minutes. Prevents bruteforce. That's how I would do it in case it happens again. If it is the same IP address, it means one of the legit users is having fun. If he bruteforces the login form, then he is screwed. Blocking IP addresses is useless, since the guy only has to go through a different proxy, unless you only allow a few IP addresses to have access to the website. NOTE : sorry for my english too, I am not a native English speaker.
Correct Horse Battery Staple. Proven secure by XKCD.
Hey! That's my AWS password!
&gt; There are services such as twillo that offer this type of functionality, but they cost money, and I think php should be able to do it for free. Don't cheap out on Twilio, its too good of a service, and the API is simple. Put $20 in there, buy a number for $3/month, messages in/out is only $0.0075. You could setup a phone number validation script very quickly. I used in the past on a number of projects with great success (surveys, validation, notifications, etc). Trying to use each provider's @email to "email" a text is not a scalable or reliable way of doing what your trying to do, theres hardly any flexibility in it either. &gt; a service such as Twillio is not an option. Can you explain why its not an option though? Twilio offers a developer mode where you can do everything free until you are ready with your script and get a real number.
I don't know how to answer your question. You've removed the appropriate way to do it by saying you won't use an SMS gateway. If you're wanting to persue your current route, how are you going to link a phone number to a providers email interface? You can't reliably look up a provider from a phone number as they are portable across networks. So you'll have to ask the user? (which you said you didnt want to do). You'll likely spend more time maintaining the email/gateway setup than the cost of just using an SMS gateway, IF you can even come up with a reliable way of doing something, and that is a huge if.
I use Sublime Text with the [DashDoc package](http://github.com/farcaller/DashDoc) , and can just cursor over a function and hit Ctrl+H to jump to the information for that function in Dash. I also integrate it with LaunchBar too, but 99% of the time I run it from Sublime Text. Edit: Plus this works offline, which is useful when I'm on a plane without wifi for example.
1Password is good as well.
&gt;Make sure all form's have autocomplete="off". Is this really beneficial? Even script kiddies know how to use Developer Tools and could turn this back on.
If it really matters (like, it makes a sale or the application works as planned) then pony up and pay the astonishingly reasonable fees to Twilio to get it done. It sounds to me like you need valid phone numbers, but there isn't any money in it for you to achieve this level of certainty, which to me sounds like a business model problem that is ruining a perfectly good technical solution. If your time is worth nothing you could set up a process where you present each user with a security token when they sign up, ask them to call a number and leave a message stating the token and manually compare the caller id. It has issues itself, but it could work.
I would beg to disagree, at least in the "Europe school of PHP" i'm seeing this be more and more part of it. It has become a common topic in my general circles and more and more apps are being developed using it. Libraries like Tactician and Broadway are making loud splashes and even the presence of CommandBus in Laravel are signs of the current movement.
Agreed, choice. But its about caring for who is using your package and letting go of the "marketing aspect" that version numbers bring. Its about playing nice with the ecosystem, and yeah I do often avoid libraries i can't trust.
* Composer * Slack * iTerm2-nightly * oh-my-zsh and antigen * PHPstorm On my list of need to see more: * PHP-CI * Deployer
Exactly this. It's the best way to find what you need. Start by finding the IP they used then filter access logs by IP. If it's only one of course. Otherwise you can try with specific user agent, etc.
Though your proposed solution _might_ work for a short while, I would assume the carriers would blacklist you for repeatedly sending emails to invalid recipients. I agree with the other folks that Twillio is a best solution. If you're worried about people abusing then you can [set up a max price](https://www.twilio.com/blog/2015/08/introducing-max-price.html) to minimize your risk.
All I see is ***************?
Could you elaborate on the "BUNDLE ALL THE THINGS trap"? What should or shoudn't be in a bundle?
To generate the PSK for WPA (which can be though of as the "password hash"), you can use [wpa_passphrase](http://linux.die.net/man/8/wpa_passphrase) in linux. A WEP key is either a hexidecimal string that is 64, 128, 152 or 256 bits long or an ascii string which can be easily converted to hex using bin2hex() and then truncated to one of those 4 lengths. for instance for wpa you can do: function generateWpaKey($essid,$passphrase){ $essid = escapeshellarg($essid); $passphrase = escapeshellarg($passphrase); $shell_output = shell_exec("wpa_passphrase $essid $passphrase"); if( preg_match("/psk\=([a-f0-9]+)\n/",$shell_output,$matches) !== 1 ) { throw new Exception("Error! wpa_passphrase did not execute properly!"); } return $matches[1]; } 
&gt;PHP-land aside, in the real world, the command bus, or more accurately the ESB is middleware which facilitates message passing between distributed services in a data center. So you're saying the PHP land of companies like Facebook, Wikipedia, Flicker, Yahoo products is not the *real world*. Correct me if I'm wrong. The attitude you have is really a toxic and short sighted. Just because the enterprise service bus exists as it does, does not downplay the value in implementing the same types of patterns inside a single service on a single box. The ideas and concepts are still the same, and they have the same value for the humans working with, and trying to understand the systems they're building. Get off your high horse.
&gt; So you're saying the PHP land of companies like Facebook, Wikipedia, Flicker, Yahoo products is not the real world. Correct me if I'm wrong. All right, I see how you can read it this way. I'm not bashing PHP itself, or people who use PHP. I use PHP as well. But I'm referring to this PHP subculture which redefines established terms of architecture and software design and turns them into toy components marketed as "enterprise-ready features" to borrow from Laravel's marketing copy. You can shut me up and keep doing it, but you need to realize this cargo cult makes a mockery of the PHP community. I don't go out of my way to trumpet it, but when I see instances of it in the wild, like here, I think it's better to say it, because it makes us look like amateurs who want to talk like the big boys, but without doing what the big boys do, or understanding why the big boys do it. &gt; The attitude you have is really a toxic and short sighted. Just because the enterprise service bus exists as it does, does not downplay the value in implementing the same types of patterns inside a single service on a single box. The ideas and concepts are still the same, and they have the same value for the humans working with, and trying to understand the systems they're building. Get off your high horse. In-process you don't need middleware between you and the service. You can invoke a method of the service object directly and pass the command object to it. You can also decorate the service *directly* so you can add concerns to it, like security and logging. The patterns used here are Command Object and Decorator. They don't need a library or a bus or anything - it's plain PHP. So why do we need a "command bus" then if we go that way? Well, the only role left for the mighty in-process CommandBus is to be a service locator, which is precisely what it does. If you insist on reaching your services through a locator, and carrying the burden of a redundant "bus" library which is a heavy emulation of two basic POPO patterns, be my guest, but at least do it with awareness. As for CQRS, it happens to define a specific architecture, with specific constraints, such as splitting read and write models. If you skip that part, you don't have CQRS, and don't yield the benefits of CQRS in terms of an eventually consistent service with highly, highly scalable reads.
You're getting downvoted but you're probably actually right. The vast majority of security compromises in my experience aren't the result of some leet haxor bombing you with the latest and most advanced 0-day, they're the result of "U: admin P: hunter2" admin accounts. 
In my past experiences, it's because some end user decided to make a generic, simple password that is easily guessable and brute forcable. There are a few ways to help combat this aspect of it: 1) Set password requirements. This tends to annoy people and depending on how strict you make it, it forces them to write it down which defeats the purpose of a password. 2) Be more strict with your administrative permissions and groups. Does user X really need access to add/delete/modify data when they're just a manager who runs reports each week? 3) Set up some sort of two factor authentication, whether you implement a 3rd party solution or just add a digest authentication with a common server user The other thing is that if you have been hacked there are probably backdoors all over your code. I recently had to clean up an ancient wordpress install that was compromised for a client and there were no less than 30 infected files on the server. You'll want to search through the entire writable file list for key words such as 'base64_decode', 'exec', and see if you can locate where all of those files are. If you clean up 29 of them and leave the 30th, it's as if you haven't done anything at all. You might be best just to start the server from scratch, check out a new, uncompromised version of your site from the repository, and nuke the old one from orbit just to be sure.
On linux I've found NFS with Vagrant to work extremely well (particulary if you tune the params), it's nice to have code on the local system synced near instantly to the remote and it simplifies things.
Yes, this is just simply not good enough. You really need to use prepared statements. escaping queries is not secure.
This one works pretty damn good. Also, OP should consider the hacker being an angry employee, so a technique I used many times is the need of a cookie that is signed, so only the computers with that cookie can access.
It will prevent client credentials from being saved to a machine where malware could compromise them later.
Vagrant, phpstorm, Python with Pycharm (automation, deployment and asset compilation), npm/node for client side, Knockout as go to client mvvm system, xubuntu on desktops, Ubuntu server on servers. For python Envoy is incredible as is Fabric and docopt, handles 100% of what I'd use bash for without having to use bash. I automate the crap out of everything (even have keyboard bindings to special keys to rebuild js/CSS on a single press)
A lot of people throw away concepts of security for their admin panels
PHPStorm Transmit FTP client Sublime Text Github GUI MAMP
&gt; iTerm2-nightly Why the nightly? 
&gt; 6vhW#M%IqC!O%fTy If everybody set their password to '6vhW#M%IqC!O%fTy' the world would be a much safer place
I'm surprised no one mentioned **xdebug** yet, it's the first thing I setup on every project
If anyone is wondering, JWT seems to be the right choice for us. OAuth2 would be overkill for our requirements. There's also a great package for JWT Laravel integration that will make implementation really easy.
Yeah, that's not an example I would use. I would compare something like this: "PHPPixie 3": 'view' =&gt; array( 'type' =&gt; 'pattern', //Since the id parameter is mandatory //we don't wrap it in brackets 'path' =&gt; 'quickstart/view/&lt;id&gt;', 'defaults' =&gt; array( 'processor' =&gt; 'quickstart', 'action' =&gt; 'view' ) ) Laravel 5: Route::get('quickstart/view/{id}', 'Quickstart@view');
It is defined [here](https://github.com/guzzle/promises/blob/f596be052ef429a16b2f640812fcf84392dd38f7/src/functions.php#L86) In case you didn't know, github has a search bar for github as a whole or for a single repository. In this case a quick search with the string 'rejection_for' showed me exactly where to look.
I tend to dislike using immutable designs unless it's for some kind of value object. Not that I don't see why some people would, especially with the way objects in PHP are always passed by reference and so all "instances" of an object share the same scope. Rather, I tend to program in a way where I *use* that property of objects to be the messengers between scopes in the way that closures often are in other contexts. It also makes it cleaner to write fluent interfaces, which I'm also a fan of. But that's all a different topic than protected vs. private. I will say this: if you are writing fluent classes, private properties allows you to make PORTIONS of your object immutable. That's the most common way I use private.
Using final liberally in something you intend to be used as a library will get you stabbed.
I tried to use Dash in my workflow but I never end up getting that much use out of it.
Why wouldn't you just get the Location header after requesting the short URL?
Frameworks and similar concepts makes sense in iterative development environments. Because in those, you iterate. But in purpose-built environments, they make things more complex, larger, and difficult to work with than they need to be.
Well, composer is insanely useful even if you don't use frameworks, because there are thousands of small libraries on it as well. You may not have a need for a whole framework, but composer also makes it very easy to use just a filesystem library, or just a random number library, etc. I personally wouldn't want to write the random number generator for an application even if the entire rest of the application was custom built.
You can change your admin login url.
Okay, feedback time. 1. I've already created a PR to fix a typo on readme.md. 2. I have no idea why you are not using composer to install your project. It's much, much better than having someone download the repository manually. 3. You are mixing HTML and PHP in .php files (like index.php). This is a **huge** issue. Separate your logic from your layout. Read about twig, smarty and other templating engines, even if you don't want to use one, just to learn how they do it. 4. Manually requiring/including of files. This was OK 10 years ago, it isn't anymore. Read about autoloading and **use composer** (https://getcomposer.org)! 5. Your entire code is structured. Learn about classes and objects. 6. No namespaces :( It's awesome that you're doing something, but it's also kind of obvious that you are not very used to the PHP ecosystem. Composer, PSR1-2, Autoloading (PSR0/4), MVC, OO. This project will not be used nor extended by anyone until these major issues are fixed. I guarantee it.
yes, but only in a testing environment.
Admittedly I've never worked on a PHP group project so I can't wrap my head around why composer becomes necessary.
I'll naturally look for alternatives other than renting the tools for my profession. I generally have not had many positive relationships with rentiers.
If you aren't logging in via HTTPS, he may be grabbing your cleartext password.
I like how they're spinning "instead of choosing to upgrade, now you *have* to upgrade!" as a big positive for developers. That takes gumption.
I really don't understand why there's separate programs for each language rather than one program with language support added in as modules. This way, I could work on HTML, JavaScript, PHP and MySQL all in one program.
Indeed, and that is exactly what I do, however, I was just curious as to why the authors of extensions seem to rarely use interfaces.
To add to that if you're on Linux you could see which files have been modified recently: find /target_directory -type f -mtime -2 Which would be files modified in the last 2 days. You could also do a git init / git commit and then later on do git status / git diff etc. to see what changes were made to your filesystem, even easier if it's already version controlled although you would have needed to started the git repo before the attacks but you can always do it now and see if anything else gets changed in the future. 
`final` is the tool that prevents your users from discovering that you made the stuff they need access to in order to successfully extend a class `private`. A class should be open only if you intend for it to be extensible, in which case it also needs to specify correct access modifiers. If you haven't planned for that, your users won't be able to extend it meaningfully anyway, and then you should just make that explicit. Virtual-by-default is a language-level mistake.
https://twitter.com/bascule/status/625773581448777728 If you won't listen to me, listen to this man.
&gt; WebStorm is rolled into PHPStorm Not sure about this.. PhpStorm is missing the JS transpiling (TypeScript/CoffeeScript/etc) features if I'm correct.
All implementation of repositories covered with functional/integration tests (no negative testing, just simple smoke). I don't think that you want to mock query builder or something.
Unless I'm mistaken, the current model is: If you let your 1 year license lapse - you can eventually renew but the renewal starts from the day your license lapsed. Not from the day you renewed. So if you let your license lapse for 6 months and then renew, you're not getting a year of updates - you're only getting 6 months. So... it's not that much of a change of model (except for the folks that want to buy it once and use that version indefinitely). Of course, the pricing is different - but for those of us who use multiple Jetbrains IDE's, it's actually cheaper. Am I missing something? 
We use Plivo, and it's about half the price of Twilio. Works great.
God knows I'd be protected from my own systems!
It's covered by the "Creating the Project" section of the official [Symfony Best Practices](http://symfony.com/doc/current/best_practices/index.html) book. Here's Ryan Weaver's follow-up: http://knpuniversity.com/blog/AppBundle
The only alternative I can think of is to create an app that reads the phone number and reports back to the server. But that is an extreme workaround. Just SMS it. May I ask why you need to validate their phone number? You obviously will not be sending them texts.
You're missing that for those 6 months after the licence lapsed, you used to be able to use the outdated version. With a subscription, you will be locked out if you didn't renew as soon as the program phones home.
You're right - must have just been the Dart features that I was missing when playing with Angular 2. I guess these will come to PhpStorm once WebStorm 11 is out of EAP. Good to know, thanks!
This hits the nail on the head really. If an extension did offer an interface then for it to be useful to you it would have to share that interface with other similar libraries and extensions. A `CollectionInterface` that allows for `MongoCollection` or `ArrayCollection` or `FileCollection` or something. But then who is responsible for `CollectionInterface`? which Extension provides that interface? It makes much more sense to use your own interfaces in this scenario to allow you to utilise generic libraries into the usable objects your application needs. In the case of an interface for mocking, that's a handy abstraction you can use in your own tests, unfortunately you do eventually have to call the specific library code so those tests can be a coupled to the implementation without too much hassle.
I'm the creator of UserFrosting! The new version (0.3.0) has a much improved implementation compared to the old version (which was terrible, I admit). We now have an OOP data model, and we use [Slim](http://www.slimframework.com) for routing and [Twig](http://twig.sensiolabs.org/) for templating.
Just one thing worries me about this unified license. Right now, if I have PhpStorm open on my host machine, and I open up a VM and try to run PhpStorm from there (as I often do with how I sandbox projects to VMs), it will tell me to shut down one instance because 2 are running on the same network. So I bought a license of WebStorm as well, and I run that when I don't need all features from PhpStorm in a VM. If the unified license doesn't allow WebStorm in the VM while I have PhpStorm running on my host, then that's going to cause a huge upset to my workflow to the point that I'd probably have no choice but to leave Jetbrains. My situation right now isn't even ideal, but it's doable.
No. https://www.plivo.com/faq/sms/do-you-support-mms/ Just send an imgur link. :p
HipChat allows for self-hosting, Slack doesn't. That's huge in my industry (health insurance). We have to deal with so much fucking red tape that it's just less of a hassle to manage everything in-house. 
Essentially the same thing; you have public rooms and one-on-one private chats. I prefer the more subdued interface of HipChat, though...
Especially since `Foo::bar();`starts to bring much more complexity in for testing (compared to dependency injection).
I agree completely. A year ago I was in the mindset of "Well let me check composer and see if someone has already built this". These days, I'd much rather build it myself, unless it is something with a ton of edge conditions that really takes too long to get correct. Things like, CSS frameworks and all the browser quicks that come with them, parsing/sending mail, generating PDFs, etc. The instant value you get out of just pulling in a well maintained package and building what you need can't be ignored. Now of course, if your main product is hosting mail, then you should definitely be spending the man hours building the library yourself.
IDEA is great, but it doesn't include the features of App Code for C# or CLion for c/c++. I have licenses for all three plus an expired resharper, so for me this is a good deal.
Something tells me here in a couple months NetBeans will have a sudden influx of new users.
Another reason why I ask this question here. Thanks.
Alternatively, use MonoDevelop so you can code C# from Linux/OS X. I'd rather do that than go through the pain of trying to develop PHP on Windows.
Why did they decided to do this? Were they not making money? Or were there a lot of pirated versions? 
Admittedly, the "existing users" option is actually the same price as upgrading yearly. The difference is the forced(?) upgrading? What happens when your subscription expires? Will you be blocked out of PhpStorm? &gt; You will also have the option to switch to the new model at any time, receiving discounts as an existing customer. The next page specifically says you have until Jan 2017 -- the time it would take for all existing yearly perpetual license to expire. $79/yr isn't much of a "savings" given this appears to only be a special intro with $99/yr being the eventual price -- same price it is now, but *double* the current existing upgrade pricing.
So, how does one go about turning Sublime into an IDE?
I see you linked the documentation for the 2.x series so I am assuming you are using the older, 2.x series. I would suggest you to try the newer version, which by default doesn't quote like you mentioned anymore, and have [many other improvements](http://bakery.cakephp.org/2015/03/22/CakePHP-3-0-0-is-Here.html). You will encounter magic on many frameworks and libraries, that's for convenience and not necessarily bad. I don't think the cause of the slowness was because of the quoting tho, as the query is only manipulated once. For me one of the bottlenecks was the Inflection and routing part, which also involves Inflection. :/ To get more insight of why CakePHP is being slow for you, you can install the [DebugKit](https://github.com/cakephp/debug_kit). But please do upgrade to the newer CakePHP version first. Coincidently, about 8 years ago when I was choosing between Zend and CakePHP, and few others, I had the opposite outcome. Zend was slow as hell. Guess many years passed and things improved since then.
Silex can also support PSR7 by using the Symfony PSR7 bridge.
True, but on the other hand an IDE isn't usually the sort of tool you use once in a blue moon when you really need it. To me it would be like a carpenter renting chisels at an hourly rate. 
Magic is a term that people use to project their ignorance on to things they don't understand. You should read the code, profile your application and understand the tradeoffs you make. Asserting that something is fast because it's less 'magic' really means you're not doing your due diligence when selecting a framework.
I think it's because you don't really need them that much, even for testing. They are fine for extensibility where it is needed. You can mock out concrete classes just as easily by using something like [prophecy](https://github.com/phpspec/prophecy).
And Photoshop isnt the sort of tool a designer uses once in a blue moon.
This is more or less why I asked for help
&gt; What's wrong with IIS or even php's internal webserver? Your application should not care over which webserver it has to go ... That's good in theory. In my experience it never pans out in practice. For example I got second place (and money ) in a Microsoft run contest to [port my PHP app to IIS](http://blogs.msdn.com/b/cdndevs/archive/2009/06/08/make-web-not-war-in-toronto-this-wednesday.aspx). It should have "just worked" right? But wait! Me getting it to work was contest worthy! Haha. A competent backend developer has to deal with more than their app, they do end up caring about the webserver they use. This is devops. &gt; And if you are super lazy you can still use [...] docker/virtualbox. Huh? I do use Virtualbox. It's written in the blog. One third of the post is about me trying to use [Hyper-V](https://en.wikipedia.org/wiki/Hyper-V) (Microsoft's competition to Virtualbox) because it looked "better" on paper. But instead I had to fail and fallback on my old tools, which you are giving me heck for? ;) &gt; Windows was always GUI heavy so naturally you will not have a lot of CLI tools but you are also not really missing them. Windows is GUI centric? Ok Fine. Then they need to play catch up with other systems. The GUI is inconsistent. It gets uglier and uglier, harder to manipulate as you click through. See screenshot in blog post. Or another good example: try to modify your PATH variable. That is the worst config dialogue ever and as far as I can tell it hasn't changed in over a decade. This could have been improved. &gt; There is SecureCRT or Xshell as alternative to putty which is far more powerful/superior. Sure. Maybe. But SSH compatibility should be core behaviour. Every other OS has this. IMHO Microsoft needs to accept that they lost whatever battle they were fighting and implement. &gt; As with any OS switch, don't try to translate your tools but adopt to your new system. Yes agreed. I'm learning a lot. It's still frustrating though. Good times.
Since I work in a non-profit, non-teaching section of a university our student employees are permitted to use their student license for work. I am also involved in open source software projects, so I have open source licenses for those. I'm not sure how many others are in situations like me, but that's really generous. If I made money off of PhpStorm I'd be happy to buy it, but I'm glad these free options are here.
It's called being cautious, being prepared for the worst. Any obstacle, that makes them spend more time to hack a site, is a good idea.
Compared to, keep allowing him to be hacked?
I guess I'm not up to date on Adobe's offerings or licenses (obviously), I didn't realize they no longer offered permanent licenses. You're right, that's the same boat of sucky for a designer then. That said, to try and address the original point again (possibly better this time?), IDEs generally don't have the same "monopoly" that CS does in the design space, and when they do it's usually enforced externally (like tying to a particular platform ie VS and xcode). I'm not sure that this strategy will play very well for a tool that can be replaced by something else with at worst minor inconvenience. 
Only if the clients browser is well behaved. Security 101: Never trust the client
My only negative experience is the debugging tools. Everything else works at least as well for PHP development as eclipse for me (well better actually because it's so much faster).
My issues mostly revolve around the actual editor. Tab does things I (almost) never want it to, sometimes enter does. A few other things that always piss me off when they happen and always surprise me the next time.
For what its worth, the Powershell guys have already announced SSH is on its way. Edit: Blog with details: http://blogs.msdn.com/b/powershell/archive/2015/06/03/looking-forward-microsoft-support-for-secure-shell-ssh.aspx
*sigh* time to learn vim. At least it has support for Hack!
for most larger systems, that's definitely the case. for smaller systems, usually without git or backups sadly, it can and often has to suffice doin it with manual checks. but of course, a complete reset would be the best course of action. 
The primary differences between these structures and native arrays are: - validation, a consistent state is enforced ~~(eg: adding a duplicate value to a set will throw an error)~~ - immutable, can only be replaced explicitly All of the structures have `toArray` methods and can be serialized with `json_encode` or `serialize`. 
&gt; so it takes CakePHP like 2 minutes to render that page while ZF does that in like 5-10 seconds. Yea... 2 minutes to render a page? Something's not right.
&gt;I could have just as easily used MongoClient or PDO or SolrClient. ...and the same question applies. All of those are concrete implementations predicated on some external dependency. Whether that dependency be an actual database engine (in the case of `MongoClient`) or an external library (in the case of `PDO`). Why is your application design so rigid that these things **must** be in place or you have to refactor **everything**? The correct solution is to create a `DataSource` interface which all your code interacts with, and which you then implement as a wrapper around `MongoClient` or `PDO` or `SolrClient`.
&gt; What happens when your subscription expires? Will you be blocked out of PhpStorm? The question that has been asked a thousand times this evening (see the blog comments or the other reddit threads) and that Jetbrains is carefully avoiding… You are avoiding it too. &gt; perpetual licenses (which are sold now) are not going anywhere from those who's already bought it (so it means you can use it forever - it's not going to be revoked) They also won't get updates and new features in the future. It's not a solution when you'll want the latest bugfixes, new features, full PHP 7 (or 7.1, 7.2…) support, etc etc. There will be no choice but to either upgrade or switch to another product. I keep hearing that we have a choice to keep using our current perpetual licenses but yeah, we could also still use our old PhpStorm 5 license. Yet we don't want to do that.
if possible, change admin area location. change passwords for all accounts. remove stale accounts. inspect log files for clues. 
Aside from what is already mentioned here... please take a look at the code style guide by the folks at php framework interop group. follow a consistent style; you'll thank me later. PHP files don't need the ?&gt; at the end of files. http://www.php-fig.org/psr/psr-2/ https://github.com/squizlabs/PHP_CodeSniffer
I agree with the latter two, but why can't you just go to Google and type in "ssh windows binary" and put it in your path.... Super, super simple. Works just like the linux binary. From there just deploy batch scripts to automate logging in with keys.
Have you tried cygwin? I thought it was pretty good except the package manager system was annoying. But good ssh options and typical Unix style ssh keys 
Well sounds like PHPStorm 9 might be the last version I have, lol. In all seriousness, what are some other mature options? I have previously used Aptana and NetBeans. I was definitely not as satisfied with them as PHPStorm, though.
I don't see how this would possibly have a negative effect on piracy.
I feel like this would cause some safety concerns, because if any extra users gain read access, any data held in the PHP app is up for grabs. It can be locked down safely as long as you know your AWS permissions well enough, but S3 has always come off as more of a static content delivery system.
The functions file is loaded from [the files array in composer.json](https://github.com/guzzle/promises/blob/f596be052ef429a16b2f640812fcf84392dd38f7/composer.json)
Current work environment: * Sourcetree / Git for SCM * PHPStorm for IDE * Vagrant for development environment * [Deployer.org](http://deployer.org/) for deployments * PHPCI for CI (though seems development is dead so might be looking for something new) * Asana / Trello for Project / Task management (trying to get rid of Asana) * Slack for communication Pretty happy with it apart from Project/Task Management. Slowly moving towards a scrum approach but it's taking a long time. Also not looking forward to having to move to Jenkins if PHPCI development is truly dead (any other self hosted recommendations welcomed).
Of course you dont rely on this 100%, but it is simple to implement and reduces risk of compromised credentials 
Me, I have I think 3 valid licenses for PhpStorm (personal, consulting, work), a license for IntelliJ, and a license for PyCharm. So, they were certainly getting my money. But I won't be paying rent. So, I guess it's time to find a replacement. It's really a shame since I liked PhpStorm so much.
KomodoIDE, Netbeans, Zend Studio Komodo looks the best out of the 3 visually, seem like they have some good features. Going to see if they'll do a discount for jetbrains php devs. :)
Just because a framework is based on convention doesn't necessarily make it slow, or mean it's "guessing". Also, just because a framework consumes more memory, doesn't necessarily make it slower. Heavier yes, slower, no. Your example about a 256MB VPS demonstrates that Cake is heavy, but its "slow" only because the hardware doesn't have enough RAM and has to do paging and other extremely slow operations. Give it enough RAM, and it will have similar single request performance. That said, you are correct that abuse of magic method interceptors, string-based domain specific languages that get converted to code, and dynamic function and method calls like `$some-&gt;$thing();` are operationally slower. I don't know enough about Cake or Zend's internals to comment on whether one is inherently slower than the other. There are many other factors, such as how much stuff is being bootstrapped on start up. Cake might be eagerly loading a bunch of things it doesn't need on any given request, while Zend isn't, and that doesn't have all that much to do with magic methods or string-based DSLs, it just means it's bootstrap process is rather inefficient compared to Zend's. But again, it's hard to say. Either way, a full stack framework like Cake, Laravel, Symfony, or Zend needs a beefier server than 256mb to run properly - especially if you want to take advantage of caching, which uses memory to save CPU performance.
I've been starting to feel like PHPStorms busy-ness was getting in the way of my creativity. Now that I'm re-evaluating my criteria for a good IDE has changed a bit.
Currently they seem to only have `NOBRAINER10` discount for individual license ($10 off) they just tweeted a few hours ago.
Lol, awesome! 
It's close 5am in the Czech Republic, where their HQ is. It'll be interesting to see there reaction to all the negative tweets, emails, etc that built up over night
The same reason some jobs have a hard requirement that candidates have a bachelors degree regardless of experience: because some bonehead thought it up or more likely, saw other people doing it, and figured that's just "what you do".
&gt;If I made money off of PhpStorm I'd be happy to buy it I've happily paid for PHPStorm. It's the not owning part that bothers me.
What is your rubric for "good" here? Perhaps a language can both be a technical disaster and insanely useful.
i don't agree even half of what you(he) wrote SSH: git-scm is very good for generating ssh keys and i have no issues with it use babun/zsh configuration dialogues: it looks like you are bashing for the sake of bashing FYI, i use windows 10, osx yosemite, ubuntu almost everyday
A beater of a car can still get you to work and a rusty saw might cut wood but neither Is optimal
I wonder if the compiler optimizes count() inside of a loop. You can sort the table by a random field, and pick n records starting from a random position, instead of using PHP. Depends on the data available and the database.
i have come here to preach the awesomeness of [toranproxy](https://toranproxy.com). toranproxy allows you to publish private composer-style packages and cache packages from packagist. this allows you to build your projects and components in composer-style packages but keep them proprietary.
this is a fantastic point! my company develops a lot of stuff for an industry that is heavily regulated (we have to host in canada and use a canadian smtp for instance, because law). we've been actually trying to get info out of our client about whether slack is copacetic with their regulations, but nobody seems to be technologically competent enough to answer. thanks for bringing up this point. i know what my first order of business in tomorrow's stand up is going to be...
About time PHP gets a proper cryptography library. 
No he said the site was hacked, not his browser.
I know... that's why it's not a relevant fix.
&gt; Currently test driving Atom. That's not an IDE, that's an editor. What makes PHPstorm great, getting me to use it over Vim for larger projects, is the excellent debugging (coupled with xDebug) and the fantastic static analysis. An editor does not have that. At work I'm most likely "safe" — it's an important tool so the higher ups will likely pony up — but I don't like this move one bit. 
Thanks I guess for calling me stupid. Geez. If .htaccess works on IIS even better - so what is the difference then?
I use RemoteNG in conjunction with Putty. Also, I do 98% of my development on a remote ubuntu machines which I SSH into. I push code to it via pycharm or phpstorms built in SSH configuration, and execute it via CLI (through putty, from remoteng). 
Great, thanks :)
I ninja-edited my comment above (sorry), so I don't know which version you got, but the true problem is there's a nested object at all. It shouldn't be $coupon-&gt;anything, it should be just $coupon. As for the column names, I align with your naming 100%.
would that work with multiple redirects?
Awesome!!! I've been looking for a forum built on symfony2
It's a suite of applications that helps developpers make software. Hosting repositories, (re)viewing code, trackings bugs are the most common, but it is really, really complete (Paste is kind of a Gist, Passphrase is for managing secrets, etc.). Its strength IMHO lies in how well all those applications work together. Also: - Their release model is interesting (your just git pull their master to update your instance) - It's free and open source and is written in PHP - The developement is very open, you can talk wih them about your use cases, feature requests and so on. - The tone is very funny, yet their product is very serious and efficient Obviously there's a lot of competition out there for developer services. Github and bitbucket are famous alternatives for source code management. But in the area of free and open source self hosted solutions, Phabricator is a serious contendent. There's also Gitlab, though i'm not a big fan of their CE/EE model (just a personal preference though).
&gt; Microsoft's UI is more consistent than any GUI/Desktop on the planet Not sure if troll...or fanboy. Either way, even if this is opinion, it's nonsense. Windows has had a massively disruptive GUI from Vista onwards. 7 brought back some normality, 8 then killed that with Metro/Modern and the removal of the start menu, 10 just seems to be confused.
i heard windows can copypasta now in terminal? such technology. anyway, ur asking for frustrations when you let the penguin jump windows
I'll continue using it as it's the best IDE around, but I will stop recommending it to others. I've converted whole departments to PhpStorm and WebStorm in the past.
I am a programming amateur, and if am I understanding they can sort of put entire model as an attribute on a record in the database?
Can anyone explain me why on earth would you want to do anything with Microsoft and Windows 10? https://www.hackingdefinedexperts.com/wow-win-10-is-the-nsas-wet-dream-of-an-operating-system-spyware-keyloggers-botnet-functions-all-built-in/ and if you google around, no the enterprise version doesnt let you shut it off, it will still silently send data.
There are many things you should do: * Change your access credentials every time you have evidence of attacks. * Inspect the HTTP server logs to look for suspicious activity. This is only to gain a better understanding about the attacker's behavior. * If you haven't logs, add logs! (For everything, and at every possible level [http server level &amp; application level], not just for login attempts). * If your logs don't include IPs and other info that can be used for fingerprinting (like User-Agent headers), add this info to the logs (maily IPs &amp; user-agent). * Inspect the user related tables in your database to ensure you haven't administrator users aside from the known and legit ones. * As said in other comments, introduce a control version system, like GIT, to protect you from code injections (then, if someone achieves the goal of corrupt your code, you'll be able to recover it from the repository). Important to say: when deploying, be aware of removing the git related info from the production directory (removing the .git directory should be enough). * In my systems I added a hand-made IDS to detect attack attempts (even if are failed ones). But there are simple and open source IDS systems that you can use without difficulties, like https://github.com/enygma/expose . This library gives you a number, the higher the number, the higher the probability of being suffering an attack attempt. You can use this number to conditionally block the user's IP for a time lapse, like an hour, or to set a cookie to identify him (that's even funnier). If you set the cookie, and it results that the user is a legitimate user in other sections of your app... tachan! you'll be able to identify him. * Ensure that passwords aren't stored in plain text, nor with weak HASH methods like MD5. Try using solutions like bcrypt, or if you can't because you're using an old PHP version, use something like SHA1 with a global salt and a per-user salt. Other extra actions that can help mitigating future attacks: * Ensure the server is fully updated. This includes having a PHP version greater that 5.4.0, as the 5.3.* version is unmaintained. * If you aren't using HTTPS, it's time to do it. Is very easy to steal access credentials when protection layers like HTTPS are missing. * If you can split admin rights into different roles, do it. For example, in a blog platform, you can have writers, comment moderators, editors... this way you can limit the attack surface. 
Alright I have checked the Laravel/Eloquent code. There must be a solution for this. I'll add it to the https://github.com/nilportugues/laravel5-jsonapi-transformer repository only, as it is very laravel specific ;)
Not sure how well known it is, but [Carbon](https://github.com/briannesbitt/Carbon) is an incredibly useful wrapper around DateTime.
&gt; have a perpetual license for PhpStorm 9" is invalid It's also irrelevant if you want to stay current with jetbrains, it will always cost you. The difference is when you accept not to stay current at a reduced price, that option is going away. I believe another thing that will unfortunately also happen, the incentive for jetbrains to stay totally on top of things will be diminished, their product will stagnate and we all know how stagnating products fare: if they have monopoly they'll make everybody's lives more miserable if they don't have that kind of leverage they'll disappear.
Definately. It's an amazing little package.
I am a man. :).. shivenigma is an anagram of I am Vignesh.
I am not sure, whether his site has hacked or someone managed to get physical access to the client's pc. I am checking the access logs now.
Thanks for the reply. It's a suite of tools that have interested me for a while, but I just didn't find the time to properly test it out. The thing for me is we're pretty happy with Bitbucket for keeping our code and might not be too comfortable with self hosting our repos. I noticed that Phabricator lets you connect with bitbucket/github/etc instead of self hosting, but wasn't sure if that limits the features you can then use or if everything still works fine. Might just try to find the time to set it up this weekend and have a play.
I profile applications in production using xhprof and New Relic. It's easy enough to make an application fast in development, but I'd rather know for sure that that effort translates to wins in environments I actually care about.
Piracy is an alternative.
The title is horrible. Persisting polymorphism in Eloquent/Laravel would've been a lot better. I had no idea what to expect behind this link. The video is quite good in regard to Laravel, though.
That's an idea right there. I'll learn how to use vagrant. (Like I said, I'm not up to date ;))
This is a neat trick, but I think this trick works best for UIs, whether they be desktop or web UIs. Because there's no better way to judge UI performance, than "user interfacing" with it yourself. I've been doing the test-on-a-slow-computer routine when developing Flash interfaces in a previous life. As for the backend code, profiling &amp; logging performance works better, I think. Especially logging performance under load, because the problems you see as a single user on a slow server, won't be the same problems many concurrent users hitting your fast production server will see.
Optimization without necessity is one of the biggest sins in PHP development. It is good to know best practices and avoid pitfalls, however the more you worry about shaving off a few microseconds, the less you're getting done on a larger scale, leading to less functional/safe code due to time and budget constraints. It may seem that its lazy, but its better to create as functionally robust code as possible, and let HHVM take over, then see what your needs are in terms of speed. http://programmers.stackexchange.com/questions/99445/is-micro-optimisation-important-when-coding
Naming is hard :( I originally was going to call it "Polymorphic relationships as an alternative to single table inheritance" but it felt a bit long winded, heh. Will keep tossing around different name ideas. I'd like it to be more clear that it's a follow up to my Laracon presentation, but also summarize the content, but no good ideas com to mind :(
&gt; Also, just because a framework consumes more memory, doesn't necessarily make it slower. Heavier yes, slower, no. Your example about a 256MB VPS demonstrates that Cake is heavy, but its "slow" only because the hardware doesn't have enough RAM and has to do paging and other extremely slow operations. Give it enough RAM, and it will have similar single request performance. More memory footprint leads to lower performance due to longer seek times and more time spent on allocating memory. But it really depends on context to say how much is the difference. 
Interesting! I'd just that second finished doing a very quick benchmark myself, and couldn't find a circumstance where even just fetching the IDs from the DB was as fast as doing the order/limit and only fetching a subset. I got as far as a 1M row table and fetching 5000 random rows - when I tried a 10M row table, fetching the IDs took more than the 2GB ram I'd allowed so gave up. This is on PHP5.6 though, so possibly PHP7 will make a huge difference in that respect. Also was done in Postgres, which may make a difference (probably shouldn't though). Will be interested to see your next post with more combinations of table sizes and rows to fetch than the handful I tried.
I'd say know your code. Usually, most programs are 90% default overhead with 10% actual functions. Sticking to best practices and frameworks for the first 90% usually gives you quite a good performance. So all you have to do is try to make your core functionality as efficient as possible. debuggers and profilers help figuring these things out. But as long as you have clear defined interfaces in your projects, it's not a big issue changing a class within. As long as it's interface remains unchanged, you can do these changes on the fly. Also. "As fast as possible" is often not required. If you use cheap methods on a good rig, you can get away with "OK". At one point you need to think about how much time and effort you want to put into a specific project. If it's the core of your dev-environment, you might wanna put more into it, than for a project that might only be used at a specific event for a limited time. The latter usually only need to work in that time, on the provided devices. Anything more than that is kind of wasted time. 
Ah, I was just about to give PhpStorm a spin. Saved myself some time there. I like to OWN my tools.
Getting closer...
Heres what i use under windows 10 with zero frustration. Conemu for cli, and mobaxterm for SSH. PHPstorm for IDE. Standard Apache/php5.6 and mysql installations. I think it's all a matter of what you get used to.
I can almost feel the taste in my mouth now. I have got a new server setup waiting eagerly.
You can do a lot of that with DateTime as well. $date = new DateTime(); $date-&gt;modify('+48 hours'); $date-&gt;modify('next sunday'); http://php.net/manual/en/datetime.formats.relative.php
the ones I use on Linux are: [Komodo Ide](http://komodoide.com/) (best PHP xdebug support imho) [Sublime text 3](http://www.sublimetext.com/3) 
Cool, thanks. Great tip.
Have you actually determined what is the slow part of your code? 5 to 10 seconds for a request is not acceptable for any framework, so I guess something else might be wrong. What exactly are you doing?
I could believe, and I think I may have read somewhere, that part of it was because of trying to OS detect with "Windows 9" vs "Windows 95/98" was going to be problem for some reason.
Hi /u/adamwathan, thanks for doing this, good video. One thing that stood out to me in your solution is that you now have business logic (in this case, how each type of coupon calculates it's discount) stored in each of your "Coupon Type" eloquent models. I would be much more comfortable with a solution that kept the business logic outside of eloquent. Do you have any thoughts on how this might be accomplished? Btw I realise that for a small simple project, business logic in a model isn't the end of the world, but in a larger project it's something I'd avoid.
Thanks for the conemu tip. That's new to me. Looks good.
Why would you need to switch? v9 isn't going to stop working in two months.
I have been using sublime for many years, It has nothing to do with IDE. 
I wish there is for laravel.
No problem and yeah it's really handy. I came to windows 7 after 10 years on Linux desktop and without conemu I'd have probably gone back to Linux. 
[Originated here](https://www.reddit.com/r/technology/comments/2hwlrk/new_windows_version_will_be_called_windows_10/ckwq83x). As far as I'm aware, the claim is unverified, but it's beyond plausible. Back in my younger coding days, I have no doubt I would've done something stupid like this for version detection.
If the doc isn't clear and you think something can be improved, let me know!
It's funny how they think their user base is stupid. If someone is going to spot bullshit in licensing fees, it's going to be devs. I assume they got a marketing expert for that wording.
As speaking on behalf of JetBrains: how does this lower the costs for PhpStorm? This does slightly lower the entry costs, as now it's only $10 to start. However, in the long run, you're actually charging new users *double*. Don't forget: we're developers -- we know numbers. And we know when something is a good deal or a pure money grab.
You can make it recursive (with some redirect limit)
Are you looking for an IDE or a text editor?
heh, I forgot about Aptana, I'll give that a whirl later, cheers.
Yeah, while I don't like the license change it's not enough to turn me off from their products. It's obvious that it's not as customer friendly, mostly because of the DRM, but honestly I upgrade every year without thinking about it. I'm not a fan of using old software versions.
Well, the I don't have any good suggestions for you. Probably the closest Thing to PhpStorm you can find is NetBeans (which is still far worse). I initially didn't get that you were asking because of the new licensing model. I'll have to read a little more about the changes, but from what I've heard so far, there's no change for me at all. So I don't get all the shit they get for it.
I also find it interesting since (at least in my estimation) developers are probably more responsive to an honest price increase in a product like this than many other groups. In other words, if they just said "We're not making enough to keep the lights on, we need to raise prices by $x", I think most developers wouldn't be all that upset (of course some still would be, but you can't make everyone happy) because they (more than most people) understand how much work goes into a product like this and how expensive it is. As you said, I think it's really less about the actual dollar increase (if any) than really the "bullshit" tactics they're using.
Much like IntelliJ for Java, there's no equivalent to PHPStorm for advanced PHP projects. Komodo was my previous favorite and would be my natural fallback. So +1 Komodo.
vim
I think I might be one of the few rare people who can actually benefit from the new model. Currently: * IntelliJ Renewal: $99 * PHPStorm Renewal: $49 * AppCode Renewal: $59 Total: $207/yr On Toolbox subscription model: $149/yr I don't like subscription as much as the next guy. I'm just super glad what I do doesn't require Photoshop so I am not forcefully opt'ed into Creative Cloud. But, that said, I don't mind saving $58/yr on my licenses for softwares that I am already using and actively paying. I think if they cut the subscription cost down, and allow perpetual use of effective version during annum for annual subscriptions (e.g.: $199/yr for Toolbox on regular, $149/yr for promo; $99/yr for existing; effective version today would be PHPStorm 9 or IDEA 14 or AppCode 3), then it will be a bit more well received.
You just need to install more plugins.
It's not just about the price (which for some people ends up more expensive): - you don't own a license anymore, you just rent it - if you can't or won't, in the future, pay the subscription then your IDE will stop working - your IDE must phone home every 30 days - Jetbrains has no longer an incentive to innovate in future versions in order to sell them (not saying they will stop doing anything, but, you know…) Edit: additional reasons: - if Jetbrains somehow goes out of business, IDEs might stop working - if Jetbrains decides to stop developing one of their IDE (e.g. PhpStorm, Webstorm, … whatever) or replace it by another, we might not be able to keep using it
Maintaining your own install can get tedious, though the documentation and support is incredible. In my company we're developping online services anyway, so hosting it isn't a big deal and is kind of profitable on the long run. You should note that Phacility (the company behind Phabricator) is rolling out a Phabricator-aaS at http://www.phacility.com/ which could be a cool thing. The feature to import repos from other locations works really well. Currently most of our repos are hosted either on our Gitolite-managed server or on github and everything is working really smoothly (a daemon pull commits from the repos periodically to import them in the Phabricator database). We're going to migrate the hosting of our repos to Phabricator though, it will be easier to manage access control and credentials. Public instances like https://secure.phabricator.com/ or https://phabricator.wikimedia.org/ nicely showcase how you can tailor the tool to your workflow. In the end I guess it's a matter of taste and workflow requirements. Phabricator might or might be beneficial for you depending on your needs (and habits!). As for myself, i'm really glad we're using it :) 
You can crtl+c crtl+v all you like in Powershell now. :)
Already available via OpenSSH... http://www.mls-software.com/opensshd.html
Hmm that's $60 + $80 for Sublime = $140. Then you have the fact that Sublime 4 will be a paid upgrade (And probably Codebug 2). While PHPStorm will be $49/y for existing users (or $79 for new users). I understand why one might want to do the former to avoid the DRM, but pricing wise it's not an easy sell.
Unless you shell out for wifi. 
In case you're not about to buy licenses there's a library called [PHPExcel](https://phpexcel.codeplex.com/) as well. The speed is decent but I found it extremely un-intuitive to set up spreadsheets. Still, its free and has worked for me in the past.
Is there PHP7 support in the current version? (Or will there be in the next two months?)
People on Linux will be hit hardest. From the incoherent UI of Eclipse PDT to poor font rendering on Netbeans... Komodo, Sublime and IntelliJ are about the 3 products that treat their Linux versions as well Mac or Windows counterparts.
I did this, and they responded not an hour later: Hello, Thank you so much for your feedback. I completely understand your perspective. We released a statement earlier about the complaints we have been receiving and are working to act on all of the feedback. Our blogpost: http://blog.jetbrains.com/blog/2015/09/04/we-are-listening/ Paige Holmes sales.us@jetbrains.com Phone: 609-714-7883 Fax: 866-838-6784 www.jetbrains.com Lets see if something actually changes.
30 day plane ride, really?
What happened to your other repositories?
There is some, but we haven't started developing for PHP 7 yet so I cannot speak on the quality or completeness
http://tenver.org/
To be fair, I have always thought they've done this excellently. If it's anything like their trials and EPA releases, it let's you work for 30 minutes before shutting down and requiring you to reopen. So if you desperately need there product for a quick fix or only a short time, you can easily deal with the popup. For getting actual work done, it's just often enough to make you want to buy the product.
Yeah, I was quite polite and explained to them why I won't use a subscription model. I use a personal license at home, mostly for personal non-profit projects and a corporate license at work. Dollar is really expensive here in Brazil and US$8/mo is almost at R$32/mo (which is quite expensive in Brazil. Netflix costs me R$16,90/mo, if you must compare). Convincing boss to purchase software when there are plenty of free alternatives (like Netbeans, Eclipse, etc) was already a difficult task. Convincing my boss to abide by a perpetual subscription will be impossible. To worsen things, I live in Brazil, and the dollar is rising really fast compared to our curreny (BRL).
What's up with all the [Entities](https://github.com/teapotio/BaseForumBundle/tree/master/Entity) implementing empty interfaces? And then, for example the [BoardService](https://github.com/teapotio/BaseForumBundle/blob/bc5f192b5f27d4f6a03a731c0ca812608ec5f672/Service/BoardService.php#L86) typehinting on `BoardInterface` and relying on a method that the interface doesn't contain.
The code might be old, but there's no reason to stay on such an old version of PHP. You can change the code all you want if it runs [on broken software](http://php.net/supported-versions.php). Go and get a copy of the site to run with 5.6 or even 7 (which will be released very soon). Also, if you're still running 5.0, one could assume the OS is completely outdated as well? The problem might not even be in your PHP app.
As far as I can tell, you can use your perpetual license for the current version forever. If you buy a subscription before January 1, 2017, you get that discounted subscription pricing forever. If you let it lapse, you no longer have a perpetual license so you're locked out. If you buy a subscription after January 1, 2017 or you let your subscription lapse, it'll be full price from then on. I don't work for JetBrains or anything, this is just how I understand the page. 
What features could you not replace? Give me an example and I'm 99% sure I could find a package/plugin that does the same thing.
[no](https://i.imgur.com/F2m8cVf.gif)
Represent! Everyone I work with use PHPStorm, I even tried it out for a while myself but it wasn't for me, so I'm back in VIM where I feel comfortable. VIM definitely isn't for everyone though, but if you have the patience (and time) to learn it, it's definitely worth a try. Plenty of plugins for Xdebug, VCS, auto-complete, etc. so you can make it more of an IDE than a plain text editor. I guess Emacs can do pretty much the same but I'm less familiar with that.
&gt; most routers look like the latter So far I've only seen [Phroute](https://github.com/mrjgreen/phroute) look like that. Most other routers don't seem to be quite as terse and straight forward. Router libraries are ok, but the ones baked into frameworks are shameful. 
Why would I want to install 100 plugins just to support what netbeans has out of the box?
Good for typescript, not so much php
&gt;As developers, I'm sure we all want our applications to run as fast as possible. Eh. If it's in specs I'll happily trade some run-time costs for easier to maintain code. After all if I really cared about speed I'd be writing C/C++ or Rust or something.
Can you put your code on github?
It's a rolling time window, not a fixed date.
&gt; Jetbrains has no longer an incentive to innovate in future versions in order to sell them (not saying they will stop doing anything, but, you know…) This is the big one, yeah. I make a comfortable living using their products and I don't mind paying whatever model they have in mind one iota, but I would like them to stay on their toes, feature-wise.
wow, read the comments on that blog, its worse than 4chan. amazing
Are there any IDEs written in a fast language like c and not in java?
You just need to be on the plane at the time when it wants to phone home. So you're leaving for a trip to that lovely cottage in the mountains. 4 hours flight, 2 hours ride, and now you're sitting on the porch enjoying the view of the valley below turning on your laptop to take a quick peek at all the work you're going do in the coming week, all by yourself, only you and nature. Just one minor snag: you embarked on jetbrains' new subscription scheme and you suddenly realize perhaps it wasn't such a great idea after all.
You've summarised the main issues that people seem to be having with the licensing there really. The thing with Adobe was always that it's software was crazy expensive and aimed mainly at businesses. A lone develop would struggle to afford thousands of dollars for the full suite. Licensing actually made that more affordable for the freelancer. This move, for most people, takes a not-too-terribly priced bit of software, and makes it more expensive for most people. It's giving JetBrains a continuous stream of revenue and I completely agree with your points - it's a move for them, not us. This feels like a move simply because they feel they can, and posting a couple of screenshots from Twitter on their blog is hardly a sign that this is what the masses want. Personally, I dislike the business model. The only way this benefits the end user is if there are very frequent updates with legitimately useful features being added, but your right, the incentive is gone, and honestly... What's the competition? Netbeans? Sublime? I was a Netbeans user but boy, PHPStorm really does do a better job. The only one thing I really see this model being good for is helping avoid software piracy. If it's only gonna work for 30 days unless you check in with the mother ship, it's a lot harder to steal, and for tools like this which are generally enabling us to make money, I kind of agree you should pay for the license. TL;DR, I don't like it because whilst it doesn't necessarily mean bad things, it probably will, and the change is to put money in the pocket of JetBrains, whilst they're trying to claim it's for our benefit. 
[removed]
For me it's more flexible because I need PyCharm and RubyMine for the occasional project, but only for 2 or three months a year. This will cut my bill considerably. For most individual (i.e. not corporate) users it is not more flexible.
It is [very much true](https://searchcode.com/?q=if%28version%2Cstartswith%28%22windows+9%22%29), with java being the worst offender.
Notepad 
Yes definitely agree with the second part of your message Now, I can't remember the reason why I created these interfaces in the first place now (it was 3 years). I just ran the following in the command line. php &gt; class Foo{} php &gt; class Bar extends Foo {} php &gt; $testFoo = new Foo(); php &gt; $testBar = new Bar(); php &gt; var_dump($testFoo instanceOf Foo); bool(true) php &gt; var_dump($testBar instanceOf Foo); bool(true) // expected this to be false I was pretty sure that either the example I gave above or this example was somehow going to return false. Well, good to know, ugh.
Komodo IDE is written in C++. It uses Mozilla's xulrunner to bind all its components (C++, JS, Python) and addons in a single interface. In my experience it is faster than phpstorm and feature-wise their latest version is very good, it is also better than netbeans. But still not as snappy as a fully native application like Visual Studio, which seems to be your request.
What are you talking about. OSS developers don't have to pay, neither do students.
Having the option of a monthly subscription would make it a lot likelier I'd try the product even if it is costlier in the long run. 
Man do I have a hard time figuring out VIM. I feel it's an extremely powerful tool and at work I try and force myself to use it but I can't bring myself to use it home.
That's kind of my point. I'm not convinced PHP is a "beater" exactly, but it certainly is more ... organic ... than other tool sets. That's no different from the morass of work-in-progress platforms and protocols that make up the rest of the web, so I see no point in complaining so much about it. Some stacks are forests, and others are gardens. You can get lost in a forest, but it's bristling with life everywhere you look.
Actually, you can algo generate signed urls to access content on S3, this prevents any user from accessing, any content on S3. For example, on my application, I'm serving the asset's trough cloudfront using S3 as an origin ( with asset's I mean, images and vídeos ), and I have, 15 minutes time limit, and it's also locked to the IP of the user that is using it, so it's safer. And you don't have to worry, about external user's accessing the content. And with the AWS Cognito, I think you can even go further, and allow access to content of the user only, because only him as the right credentials.
Speed, more granular configuration. What if you don't like a specific feature in Netbeans? You'll probably have a hard time replacing it with something else, which can easily be accomplished by installing a different package in a text editor. I agree that the initial effort required is greater, but you won't be any less productive once that work is complete. 
The thing that makes me mad is if phpStorm cost $1000/yr I would still buy it.
Yeah, I spent the first 6 months or so googling stuff, forgetting it the next day and then googling it again.
&gt; Database browser It's not just a browser, it does database type completion as well. Table names, fields, etc.
Can you make vim behave like a proper IDE in terms of code completion? I've got vim quite well configured to my tastes, but I cannot find anything that does proper code completion and automatic namespace importing. If I could find that, then I'd invest the time into making more snippets and macros. But as it stands now, I find that PHPStorm makes me more productive.
I've been a freeloader using EAP for the past two years. You can also get it for free if you're a student or contribute in open source.
I rarely use code completion myself but can of these do the trick? * https://github.com/shawncplus/phpcomplete.vim * https://docs.oseems.com/general/application/vim/auto-complete-php * https://valloric.github.io/YouCompleteMe/
NetBeans!
&gt; Also I'm not sure it's a good idea to expose an instanceof Model anywhere outside the service layer. Is this a common practice from Laravel users to manipulate ORM entities in their controllers and so on? It looks like a practice suitable for the smallest and simplest of projects. I think for a screencast it's probably ok - I can't see what additional value more layers of indirection would have given to explain the technique. Incidentally in his Laracon talk and in a conversation on his podcast with Kent Beck he talks a lot about only solving the immediate problem. The immediate problem here is removing conditionals to select a coupon. There are no other requirements so the easiest solution to understand is probably as presented. As a system's complexity grows one could imagine that at some point this approach would break down - at which point you would refactor to service layers or repositories or something. The theory goes that making accommodations for future design problems is pure speculation and even if the speculation is right you need to carry the burden of that speculation long before you get the pay off. tl;dr: It's fine for an example in a pod cast. It's probably fine here because it *is* in fact the smallest and simplest of projects.
Woah dude. I'm not saying IDEs aren't useful. One isn't better than the other. The OP is asking for ALTERNATIVES. I'm arguing that text editors are a viable alternative that can have all of the same features with a little more work. Insane? For knowing how to effectively use the CLI? We call that being versatile where I'm from. But seriously, bash commands are not that difficult. Print out a few sheets if you need to. 
There are bundles of plugins that work. I work with PHPStorm, VIM, and Sublimetext users. We all get along just fine, and are all equally productive. I don't call them insane or retarded for using what i think is a slow, clunky tool. Everyone has their preference and they will likely share that with other people when asking about alternatives. I'm sorry you have an issue with my suggestion, but i will continue to use it.
just theoretically. If a company wanted to bind users by making them think it's the best product available, this approach would not be very wise. would it?
Theoretically it could, but I'd consider it very unlikely to release earlier. It anything, it would release later...
Some php mailer libs will let you insert carriage returns into an email address (Eg, when signing up) effectively overriding the outgoing mail headers. It can allow you to use the website as a mail spam source So I guess 'validated' isn't the right word so much as 'sanitise' 2 months since your comment though, I doubt you care anymore :-)
[removed]
Code existing that makes these checks is not evidence that it factored into Microsoft's decision.
Shots fired. Pretty much the same thing Sony did to Microsoft during the XBONE / PS4 announcement. I'm one of the paying customers that's unhappy with subscriptions and will definitely give Komodo a shot at least, although PHPStorm does have a lot to offer so I wouldn't commit to abandoning ship just yet 
You pay for the right of download updates and "activate" the downloaded copies during the specified period, but if you stop paying, then you can continue using what you downloaded while you was paying. In the new model, if you stop paying, then you won't be able to use even old versions of the software.
[removed]
&gt;Many fatal errors are now Exceptions God yes!
Im running some sites on 5.6. Jumping all these RCs. I am finally going to have hosting in house for my clients. Means a great deal to me. Sorry for english. Not my first language.
It is very simple. The IDE is a tool of an intense creative process, like a paint brush, or a chisel. You need to invest personally in learning the skills to work with this tool. They skills are usable with that tool, and that tool only. If I've learnt how to use a hammer, then that skill is usable on any hammer that I own myself. I can pick up that hammer and use it when I like. What I will not do, is invest my personal time and effort in learning a *rented* tool. If I have to pay year-on-year for the ability to keep a hammer handy to be able to pick up when I need to use it, I would not even bother to own a hammer; it would be someone else I get in to do some hammering, someone who has invested in learning to use it, is willing to pay the annual rent to use it, and - let's face it - just works with a hammer day in and day out. He's the hammer guy, and he can't branch out, because he is invested so heavily in *hammer*. I suspect this is an ago thing. When you are young, you see a shiny new technology, and it's great. You have the time to use it, and it is all about *now* and it gets things done. Years later, after having gone through the cycles of learning a hundred shiny new things, you realise that it is just not worth it. You have limited time, and that needs to be spent learning *portable* skills, not skills locked in to a single *rented* tool. That's where I am. I work on too many different things in too many different areas - all using the range of skills I have built up over the years - to go down a route that requires me to keep paying for a tool, and so keep using just that one tool, because I have invested my limited time in learning it. Edit: it would be interesting to know, just out of curiosity, the age groups of uses and developers of Komodo vs PHPStorm. I bet the former is generally younger.
I'm an occasional PS user - Elements for 50 quid every four or five years is about right for me. Suites my pockets and suites my usage model. I wouldn't subscribe to such a thing if I only use it once or twice a month, as I do now. I think the rented model works well when those products are the core to a business. You have money flowing in, so the tool supplier takes a cut while that money is flowing in. The problem is when that money is *not* coming in, or you shift your focus into other areas for a while - the rented products still think they are your day-to-day core and still keep needing to be paid for, just to keep in "stand-by". I have an Open Source licence for PHP Storm. I maybe load it up four times a year for specific projects. I wouldn't rent that. Whatever they do, isn't going to suite all people, because there are so many different ways of working.
&gt; If it's only gonna work for 30 days [...] harder to steal I doubt we'll have to wait long before we see versions with this feature removed. And no, I won't be using pirated software. I'll be using my current version of phpstorm and netbeans. I'm looking at komodo but all reviews seem to agree it's not very good. I really hope jetbrains come to their senses and keep a personal perpetual license.
How does anything i'm saying suggest that. Are you implying text editors don't fit enterprise requirements? You better go tell that to the developers at Facebook who use Sublimetext to switch. 
I don't see a reason why you need SHA for this. Is there? Use this: http://php.net/manual/en/function.password-hash.php
I'm sorry but what you're saying doesn't make sense to me so far. Elaborate?
Atom, for me, is **much** faster than stock sublime text... So...
I hate rented software, because I hate that the authors could change how the software works in a fundamental way and there is nothing I could do to change it back. For example, I had the galaxy S phones, and ditched them when they killed the removable battery. I can still use the phones I already have because they have that core important feature that I use. Imagine waking up one day and realizing that your phone battery was no longer changeable, but your workflow for the day relied on that changeable battery. Or maybe that your car no longer lets you use the moon roof one day. That uncertainty is why I NEVER use rented software. Office is dead to me, and so is photoshop. I still use office 2010 and photoshop cs5. I guess intelej joins those ranks.
There's also the cheaper https://phoreplay.com/ for Phabricator-aaS. When I used it previously we had it installed ourselves, looking to get phoreplay rolling now though.
Just make a simple script that runs a string (password) through the password_hash function and insert the resulting hash into the database. Ezpz. SHA256 is a fast hashing algorithm and as such is not suitable for hashing passwords. The password_hash function uses bcrypt which is a slow hashing algorithm (makes brute forcing harder) and automatically adds a salt to the hashed password. It is significantly more secure.
Have you tried VSCode?
I had it in the last couple months and it would take almost 10 seconds to open a file.
You know what, people, there are plenty of open source licensed IDEs out there, that are great. I've been using PDT for years, and outside of the fact that it can get bogged down in processes, which a hardware upgrade can easily fix, it's, if not better, can run with Komodo's IDE, or PHPStorm. JetBrains is certainly absuing its market position by making this move, and I've tried their product and honestly don't think it's worth the $100/year license that it currently sells. I am an open-source dev, and I don't really appreciate that private companies are trying to profit off my choice to provide back to the coding community. PHPStorm needs to provide something that PDT doesn't have, and then we can have a different discussion here.
Is there a way to profile the application when it's started with PHP's embedded server? I've tried *debugging* that way and it works well, since Komodo is listening for an xdebug connection, although if you set the breakpoint on a statement (like I did on a line that had `switch($variable)`) it will just skip over that breakpoint (idk if that's something specific to the way xdebug works or how Komodo works alongside xdebug); but it would be nice if code profiling could be done in a similar way from the UI
I prefer the stand alone codebug to use as an xdebug Front end
Wouldn't it make it a lot easier for you if you created a small to-the-bone registration page that you could use? You don't have to spend time making it pretty and fancy since it's only for yourself, but it'll save you from pushing data straight into your database interface, and make your work faster and less error-prone. That way you could use the password_hash function in PHP for the password before it's pushed to the database.
Please understand that [SHA256 is not encryption](https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded).
It's all subjective in the end, but here's some: * It's not Java based * It's based on Mozilla (same as Firefox), using Python, Javascript and C++ * It actually looks and feels good * It has tons of unique features and is easily extendible with javascript
Not to my knowledge. Looking at the source of that project it seems to mostly be taking the "IDE helper" approach, all the addon does is generate PHP files that an IDE can understand. That's the problem with many PHP frameworks, there is so much magic going on that it's near impossible for an IDE to figure out how to resolve your code in some places. That's one of the reasons I always enjoyed Zend Framework, it's explicit about what it does. I haven't touched that in years though (Zend).
Thank you for the reply. I might as well give it a try. The personal license seems like a reasonable price for a freelancer.
I've always felt that it's not so much about the features offered as much as it is about the "experience". For me it's far more important that I enjoy my work than that I am slightly more productive at it.
Really? That's strange. I use Atom to mess around with Meteor. On my machine it does take a solid 10 seconds to start but once this is done opening files is instant. Maybe the PHP support is lacking?
Yea sorry, its fine once running but that initial startup is a bitch. And I usually use pycharm if I'm writing Python and other than that I'm tweaking configs so waiting is a pain.
they give away licenses to at least some open source developers https://www.jetbrains.com/buy/opensource/?product=phpstorm
Does it have phalcon support and perhaps even support for zephir? I suppose phalcon would be supported the same way as in phpstorm and netbeans where it's provided by phalcon's devtools as a set of stubs, but the zephir language is provided as a plugin for phpstorm. It would be awesome if zephir was supported. I'm seriously considering the nobrainer discount.
Good tutorial and a good start but in my opinion not finished yet. I can tell you a few things I don't like and what could be improved in my mind (I am speaking about the final Dropbox Repository): 1.) The DropboxRepository is too much coupled with Laravel. (you cannot using it outside of Laravel) 2.) In the __construct, you use $auth-&gt;user()['dropbox_token'] - what happens if the key does not exist? It crashes. (You use the same pattern everywhere. The bad thing is that a user needs to read the class in order to understand what "internals" are needed) 3.) getAllFiles is a private method and could be put at the end of the class. 4.) getAllFiles: How can I test the Dropbox Repository with a Fake client? I don't see how it can be done here, so I suggest you dependency inject it in the __construct. 5.) getAllFiles: when you throw an exception you're not passing the $e message. If the client throws an exception because of other reasons than "authentication" then I have a hard time figuring out why. 6.) getAllFiles: You are doing "return collect(....);" I dont see collect anywhere defined. Is this a laravel thing or am I missing anything? :-) Most suggestions are very subjective but I find them important if you really want to have reusable components. If you don't give a shit about modularity and testing the pieces and do it just for "readability" then this approach is probably okay. (but not for me) What do you think?
Hey, author here. Definitely not finished, there's always room for improvement. :) 1.) Do you have any recommendations on how to decouple it? I injected Laravel's Auth contract into DropboxRepository instead of using Laravel's facades for this very reason, but I can't think of what else I could do. 2.) Didn't think of that, but I see how it can be problematic. My train of thought at the time was I wouldn't need to check if the dropbox_token key exists for the user since that field is in my database; it always exists, it's just that sometimes it will be null. This is not true for things outside of my control though, like the Dropbox API. How would you change it so that these internals are more explicit? 3.) Is placing private methods at the bottom an industry standard? I thought it was just a matter of personal preference -- I prefer to define methods before they're called for readability purposes. If there's good reason for the former I'll rearrange the methods. 4.) Good suggestion. I actually recognized this while I was working on the project today, but I got confused when I realized that the Dropbox Client class has its own constructor parameters and one of those parameters is another dependency that I'm injecting (auth). So I'm not really sure how type-hinting would work in this case, but maybe it's really simple and I'm just overthinking it. 5.) Good point. This should be fixed. 6.) Yep, it's a Laravel helper function. I made sure to make note of that in the article. Is this part of what you were referring to when you said that DropboxRepository is tightly coupled to Laravel? If so, I suppose it would be easy enough to define the collection. I think you brought up a lot of good points. In my opinion, readability and testability are fairly equal in importance. Depending on the app, there could be slightly more importance placed on one than the other. I don't think any of your suggestions really sacrifice readability too much though. Thanks for the feedback!
Yeah, agreed, I just start it with my OS, it's become a reflex, so I don't really notice it much. I stll wish they'd work on that, though.
man thats a mess. it's cleaner to write it like this: &lt;?php if(!empty(getMessage())): ?&gt; &lt;div class='container'&gt; &lt;div class='comment'&gt; &lt;?php //php logic/whatever ?&gt; &lt;/div&gt; &lt;/div&gt; &lt;?php endif; ?&gt; That is, keep your PHP separate from your template tags rather than echoing it along with your output. Note, I am not a PHP dev when I can avoid it.
https://github.com/paragonie/random_compat That is awesome :D
Yeah, absolutely. My suggestion is to setup xdebug on your dev server, then go into phpStorm, you'll find debug settings where you point to your dev server and it does rest.
That is a nice benefit. If my job required me to do php I would be a lot more on board because dreamweaver and Sublime Text isn't cutting it. But when I finish this site I won't be needing PHP dev tools for a while.
That's true, I will check out the demo and go from there. My concern is how much the current version will be compatible with PHP 7 when it comes out, and if I will need to then switch to the subscription. I wouldn't put it past anyone to do what they can to get people on their subscription model.
&gt; I tried to echo the that value but nothing showed up when I went to the page. You can do something like this: $var = get_post_format(); var_dump($var); If you just echo it will be cast as a string first, while this will tell you the type and value. It's also important to know where the output will be. For example, if you are dumping the var in an HTML page, it might be inside some tag and could only be visible by viewing the source code.
Correct.
I'm liking VS Code, myself. I like having the Git integration. Some of the others may do that as well though.
Kind of a pretentious piece. Assuming everyone is confused, then coming out with "I did something I've never done before. I asked for help." Oh that's cool. 
That's a good article. Couple of quick nitpicks: &gt; Essentially, a Service Layer is just middleware for the Controller and the Model. A middleware serves to implement common concerns of the underlying platform in a more accessible and convenient way for an application above. It's like the facade pattern (nor the Laravel one). It doesn't add domain-specific logic, while in your case it does, so the term doesn't fit great. &gt; DropboxRepository A "repository" concerns itself only with persistence logic, in terms of DDD terminology. It's better to name this a "service", and the service inside may use a repository (only if you need to decouple persistence logic). My naming convention would call this: Vendor\Project\DropboxService\DropboxService, of course naming is subjective. The repetition is so the DropboxService *namespace* can hold internal implementation details split off to other classes (otherwise you can end up with very big service classes in many cases), while the DropboxService *class* remains the only interfacing point for the outside world. A really nice article overall, I'm really happy the community is slowly converging on some sensible best practices regarding service layers. Next thing to consider is isolating groups of controllers as services themselves, and you have yourself a fully modular app. 
When I started programming I new everything there was to know about DOS, C and Assembler (x86) and that was all I had to know. I only had about 6 or so books to look stuff up in (there was no Internet) and that was it. In those days (late 80's early 90's) you could keep pretty much everything in your head. Today, not so much. The amount of libraries, frameworks and languages is just to much and it's moving fast. Don't get to much bogged down with the details. It will come with experience though on what to retain and what to leave to references and Google.. 
I think all of this was discussed long ago when PSR-3 and PSR-7 were being written and voted on. I'm sure if you go through the mailing lists archives or search this subreddit, you'll find plenty of existing opinions.
It's a good article, so if you have questions or real suggestions about it, feel free to share.
&gt; PHP Framework Interop Group Look at the name, man. Look at the name. The whole point of the organization is to encourage *interoperation* between different *frameworks*. How else is that to be done except to declare standardized APIs? &gt; what's the point of having multiple libraries if they all have the same API? What's the point of learning *yet another* way to do some specific thing in some framework- or library-specific way when, instead, you can use the same API you already know to help get it done? That doesn't prevent the framework or library from providing its own independent API *as well*. Declaring these public APIs as interfaces like this also lets you write an adapter for code you've already written and let other code that expects the standard API use it. &gt; If PSR-60 defines a shitty API for generating forms and someone else comes out with a better API... well sucks to be that other guy Nothing is forcing you to ever use a PSR-defined interface. The only PSRs that are anything approaching mandatory in modern PHP are 0 and 4. If your framework of choice requires that you use an API you don't like, then don't use that framework component. If your framework of choice isn't flexible enough to let you *not* use a component, it'll be time to find another framework.
&gt; The whole point of the organization is to encourage interoperation between different frameworks. How does an API establish interoperability between frameworks? What does that even mean, interoperability between frameworks? Are CodeIgniter and Laravel interoperable? They have different API's. If https://github.com/guzzle/psr7 is magically interoperable between frameworks (whatever that even means) how is https://github.com/guzzle/guzzle not interopable?
&gt; Are CodeIgniter and Laravel interoperable? If it happens that components in those two happen to agree on the same API and interface names, then yes, those two frameworks can have components that interoperate with each other. That's the **entire point**. &gt; If (Guzzle PSR7) is magically interoperable between frameworks (whatever that even means) how is (Guzzle non-PSR7) not interopable? It means that it doesn't comply with the PSR-7 interface, so things that expect to consume a PSR-7 HTTP interface implementation won't be able to use it. Neither of those impacts *your* ability to write code that uses *either*, it just impacts *other* code that someone else has written that you might use.
Why is a PSR standard needed for that? https://phpexcel.codeplex.com/ is interoperable between frameworks without a PSR standard. https://github.com/guzzle/guzzle was interoperable between frameworks before PSR-7 was ever created. For that matter curl was interoperable between frameworks before PSR-7 was ever created. PSR-7 just seems like a solution to a problem that never existed..
PSR-7 isn't just for making *outgoing* HTTP requests, it's also to be used for *incoming* HTTP requests. Have you never had to deal with the request/response cycle and how *every* framework does it differently? edit: Examples: - Symfony is using PSR-7 in middleware: http://symfony.com/blog/psr-7-support-in-symfony-is-here - ZF has introduced PSR-7 middleware: http://framework.zend.com/blog/announcing-expressive.html - This guy has written PSR-7 adapters for a metric ton of request/response manipulation libraries: https://github.com/oscarotero/psr7-middlewares Guzzle and other outgoing request libraries are the *least* important of the things PSR-7 impacts.
Fair enough, although at that point, maybe PSR-7 should have just focused on incoming HTTP requests instead of defining API's for outgoing HTTP requests as well..
You're so focused on being right, you can't see the reasons for shared APIs people put right before your eyes. One library's output is another library's input. By having output and input share a common format, you can chain them together. It's not hard to understand. For example a library can take another library's HTTP response and GZip it before passing it along. Or it can insert certain elements into the HTML. Or check for presence of certain content. And so on.
You'll keep throwing exceptions, and you'll log uncaught exceptions at the top level. Asking us which severity level to use for this or that is like asking us "tell me what kind of food tastes better to me". These choices are subjective and depend on your needs. Typically severity levels are semantically defined to a point you can tell which goes where, but syslog, which PSR-3 is based upon has so many and so vague severity levels, it becomes entirely subjective. I make do with 4 in my own logs (I don't use PSR-3). So spread them out however you like and change it when you feel like changing it.
If this is your work you should add info about the caret symbol. It functions nearly identical to the tilde but with a "minor" difference. The composer docs don't mention it anywhere I've found. Yet, ```composer require some/thing``` uses it nearly every time in my composer.json. http://blog.madewithlove.be/post/tilde-and-caret-constraints/ [edit] I swear Google waits until I say something to others to give results that prove me wrong. Here is the composer doc's on tilde amd caret. https://getcomposer.org/doc/articles/versions.md#next-significant-release-operators
I didn't even know people still used this dinosaur.
@raptorindios, this is the biggest deal for me. Netbeans F'd me when they were on OSX because their font rendering looked like crap to me. Even on a super fancy OSX Display. Windows &amp; Linux had the smoothest fonts on my opinion. To this day, I cannot stand using windows mostly because the fonts look like crap. How does linux beat windows on font-rendering these days? It's mind boggling.
If all you were doing is setting up wordpress sites w/ not much interactive functionality, websockets, nodejs, workers, etc.. then I suppose windows is "good enough".
I really don't understand how they came up with that price structure. I'm completely pro-subscription options if the software is pricey (such as Photoshop) as it makes it more affordable. Photoshop pre subscription was &gt;£500 PHPStorm pre subscription was £79 Now they are both going to be subscription for the same cost. If you own a licence for a single piece of software from JetBrains it's more expensive than before. Multiple's probably work out better. It will definitely impact my decision on using JetBrains outside of my job on principle alone. I don't see that this is anything other than a way of charging much more money for the same product.
The top comment on the /r/python thread more or less covers it: it's a lot easier to shoot your foot off with PHP, and the safeguards are things you have to seek out and learn. Honestly, if I'd learned Python first I'd probably be getting paid to write Python now. But a whole lot of people learned PHP first (myself included), so there'll always be consulting work in PHP-land to clean up various levels of mess.
I think Resharper doesn't work with PHP, but I hear good things from the .NET camp about it.
&gt; nothing showed up when I went to the page So bear with me because I don't know how familiar you are with PHP, but do you mean you got what PHP devs call a a "white screen", meaning no output to the browser? If so, you should check your server logs because PHP is erroring out for some reason. In PHP, certain fatal errors, such as parse errors, don't generate an error message to the browser. This frankly annoying behavior is fixed in PHP 7, except in cases where that is impossible. Others have recommended PHPStorm, but any piece of software with support for XDebug (which is the de facto go-to debugger for PHP devs) will do. If you use Visual Studio for PHP development, I'd check if they support XDebug because that might save you some time. I would personally recommend PHPStorm as well, because it's the best PHP IDE out there by far, but I've gotten Sublime Text to work with XDebug just fine at home, so it's not in fact your only option.
Bickering about minor API annoyances aside, PHP has one large benefit over Python for bigger apps: and it's a sane OOP system with classes, interfaces and type hints. The IDE support you'll get out of this, early detection of errors, autocomplete, go to definition and so on is saving hours every day. Again, this mostly matters for bigger apps &amp; sites. This seems to contradict opinions that PHP is easier to "shoot your foot with". Basically if I can sum it up, Python gets more of the "little things" right (low-level value semantics) &amp; PHP gets more of the "larger things" (OOP model) right. Aside from this, PHP is easier to deploy &amp; use for web front-ends, as others already said in the Python thread. PHP is somewhat faster than Python &amp; about to become even faster with PHP 7 to be released in a couple of months, but chances are this won't matter for your app. Anyway, ignore what /r/webdev/ have a "hardon for". Sure, PHP is an ideal tool for *this particular task* of "creating some wonky original web app", but if you feel familiar with Python, your experience matters most here, so go with a Python framework, it'll be just fine. And when you have the time and mood to learn something different, check out PHP.
It doesn't but I use .NET at work and they rave about it.
Great point!
Again, because it's just for a few friends and I. To be fair, since they trust me, I've asked them if they care, and they don't. This is more or less for the sake of learning.
The main advantage I see for PHP is support for type annotations (*) and ... well, I'm loath to say "better" so I'll just say a "stricter" object-orientation implementation. Having worked with a large Python codebase recently, I really missed having good type information and well-defined interfaces. It cuts down a lot on tracing back method calls to figure out what the arguments are supposed to be. (However, as you already have familiarity with Python, stick with it. Experience goes over minor advanteges either way.) (*) Python technically supports type annotations, but in a way that is not in common use right now.
You are essentially looking for [Xdebug](http://xdebug.org/), which lets you do things like set breakpoints in code and better examine variables while the code is running. Once you have that installed on your (non-production) server, as others mentioned, you'll need an IDE (or a Chrome plugin) that supports it.
S
[removed]
Replied without looking at the context I was talking about Atom in that comment.
You did yes. I mean adding an extra new line so there's a blank line between each function. Just makes it more readable.
looks like it's a standalone application which can be used with Sublime/Atom and Emacs, but it's limited to mac.
My lord, you are correct. Didn't even know Github did that. Looks fine on my laptop, but condensed on my phone. Whoops!
Somehow a common thing in programming. I'd say it's the same with Java vs. C++. People always complain that java is crappy and that c++ is "so much faster". But like usual, no one talks about what to use them for. Programming languages are tools. They serve a purpose. PHP is made for websites. Python is made to run almost everywhere. I'd say, use every tool for it's own purpose. There is no reason why you shouldn't be able to use .php and .py scripts together. Somehow this whole debate compares to discussing whether a hammer or a screwdriver are the better tool... Why not just use the hammer for hammering and the screwdriver for screwing as intended? One-Language alone doesn't make a programmer... Like one tool doesn't make a carpenter. 
You've been possessed by the spirit of a troll, /u/gibranois, but I know you're still in there, somewhere. Fight, /u/gibranois. Fight the troll within you.
&gt; If you want to learn another language, pick up a functional one. Picks Python himself. You should really take his advice guys. /s 
&gt; You will be frustrated by having to write long namespace declarations on top of every file You might be, it's never really bothered me (ofc vim largely takes care of the work for me). &gt; one typo in any of them, and you wouldn't know until the concerned class is actually loaded at runtime. Dynamic languages do tend to share the drawback of being difficult to statically analyze beyond simple syntax until run time, but I'm not sure this is unique to PHP. &gt; And the solution that php offers. "Use a proper IDE". I've been building large PHP applications in vim for 15 years, and am never really tempted to switch to an IDE. &gt; Also the community have a fetish over writing interfaces for every simple thing. It's the 'I' in [SOLID](https://en.wikipedia.org/wiki/SOLID_\(object-oriented_design\)), and it makes for better code when writing large systems, so I'm not sure this is related to PHP but is more of a general OO principle. 
The whole point of programming is create software extensible and easy to maintain. You are wasting more time trying to fit inside of the MVC pattern that the possible time that you could spend in the future improving the code when you have one bug or just want to add a feature. You code is still bad, you just moved things from the controller to one service. In the future you will have to modify again you controller and you service, so is not extensible neither easy to maintain. 
Strangely, it is Netbeans that has the relatively worse font rendering on my boxes (using flavours of Ubuntu) over the years. Something to do with it using a different toolkit (Swing vs AWT) for the GUI. I always have to add switches to the **netbeans_default_options** in netbeans.conf file to get fonts to look bearable - "-J-Dswing.aatext=true -J-Dawt.useSystemAAFontSettings=lcd". Also, some problems in rendering of menus that go away upon switching to a different Look &amp; Feel [like so](https://twitter.com/rohitbhute/status/639783995757096960). Eclipse has better rendering, but its UI is not as good. Repeating myself, Komodo, Sublime and IntelliJ have the best font rendering.
&gt; there is no reason to learn PHP. There's always reasons to learn new languages. Even if it's just so that when you get a client who comes along with a shitty application written in PHP and wants you to convert it to Python, being able to understand the PHP code will allow you to do that faster, as well as giving a better estimate of how much work is required. If you're not planning on writing much PHP, then getting really familiar with the whole (stupid) library is probably not worthwhile. But learning the syntax, type-system and how it's ecosystem works, probably is.
[removed]
[**@rasmus**](https://twitter.com/rasmus): &gt;[2015-07-07 06:14:08 UTC](https://twitter.com/rasmus/status/618301957095055360) &gt;I was getting lost in Laravel's class hierarchy so I had phan spit out a \*partial\* map of it! [*lerdorf.com*](http://lerdorf.com/laravel.jpg) [*pic.twitter.com*](http://pbs.twimg.com/media/CJSmWlPUcAA4iRo.jpg) [^[Imgur]](http://i.imgur.com/4dgIaht.jpg) ---- [^[Mistake?]](/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/3jvcst%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
I see how it could come off that way, but that wasn't my intention at all. I think now that there are so many great programming resources out there (books, screen casts, blog posts, etc) some new programmers get sucked into watching and reading and forget to actually code. Then when they do actually dive into their own code, and they encounter a problem, they resort back to the screen casts and such and say "well there must be *something* in here that has this same problem, so let me try to find it." But sometimes you just don't find that same problem and you need to reach out to a community for help. For me, that's part of what the experience was about: interacting with a small subset of the PHP community for the first time. I was reluctant to reach out to any programming community in the past, not because I thought "wow I'm so smart I can do this all on my own 8-)" but rather because I figured my questions would be met with something along the lines of: "lmgtfy.com?q=*insertmyquestiontitle*" or even "you should probably read a book since clearly you don't understand what MVC is." I felt like I would be wasting everyone's time and I should just research the problem on my own with the screen casts and blog posts. I suppose it's my fault for not articulating this point better, but I didn't want to digress too much from the actual point of the post. 
[**@rasmus**](https://twitter.com/rasmus/) &gt; [2015-07-07 18:23 UTC](https://twitter.com/rasmus/status/618485620919308288) &gt; @crodas Well, that is why it looks so complicated. I have no good way of only figuring out the parts of vendor/ that are used. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Interesting, I'll keep this rule of thumb in mind. I suppose defining a method before it's called doesn't really matter as much as I thought. If it has a good name, it will most likely be self explanatory anyway.
Yes, in fact if you think about it, you scan code in the opposite way. You don't read bottom-up, instead you read the high-level and then dig into the details only as much as you need at the given moment. This is why the methods start with the constructor and public methods. That's where the high-level of a class is. Then you have the protected and private methods which are the details. By that logic properties should be last, because they are encapsulated state, but... conventions tend to be half logic half happenstance, so...
In my opinion type information is the single largest reason to pick PHP over any other dynamic, interpreted language. Ruby doesn't have it, Python only sort-of has it (and it isn't widely used yet), JavaScript doesn't have it (yet – are proposals). The second largest reason is an object model that is more similar to Java (or even C++'s) when compared to Ruby, Python or JavaScript. Java has remained one of the most widely used languages in the world (according to various metrics and sources, anyway) and the similarities between the object models makes it easier for programmers to transition between them. For small, non-web programs (things I'd call utilities) I would pick Python over PHP every time. I also think Python vs PHP vs Ruby is largely irrelevant if you plan on heavily using a framework. Just find a framework that has the feature set you want, do some research to make sure you think it will live long enough for you to be happy with it, and go with it. ---- tl;dr I agree with nikic
[Python 3.5 will have type hints.](https://www.python.org/dev/peps/pep-0484/)
I'm not really up to speed myself, but is the general impression in the python circles that duck typing is just going to be relegated to the dust bin, or do they think that type hinting will only be used in certain contexts?
Type hinting will be optional and purely informative (unused by the interpreter, at least for CPython). I think the general idea is that it's going to be used to improve readability and to be used by static linters, but won't replace duck typing. Edit: see https://www.python.org/dev/peps/pep-0484/#rationale-and-goals
For clarification the term "type hint" as used traditionally in PHP is not the same as what Python will have. Python's type hints are literally hints – the interpreter will not enforce them. Since they are standardized it will be possible to build tools to reason about the types and provide quality tooling support. In PHP these types are enforced, which is why I personally have tried advocating that we stop calling them "type hints" and instead call them something else. I think type hints will do well in Python and look forward for Python 3.5 to become mainstream.
&gt; JavaScript doesn't have it (yet – are proposals). That's technically correct, but JavaScript has TypeScript, the way PHP has Hack (but you can run the output of TypeScript in any browser, while with Hack it's a bit more complicated). PHP + TypeScript make a great combo together for web frontend development.
I am aware of TypeScript and many other compile-to-js languages. They are not interpreted, though, which is what I stated in my comment. I'm not debating the usefulness of these tools – they simply aren't directly interpreted.
We've mostly switched to "type declarations" in the manual now for that reason. Changing what they're called in casual conversation will take longer, of course!
That's a very strange distinction to make. Are we going to argue over technicalities, or any resulting practical differences? There's precisely zero difference between my PHP and TypeScript workflows. I edit PHP, save, refresh browser. I edit TypeScript, save, refresh browser. Heck I even edit them in the same IDE.
what itch does this scratch for you? I'm curious to see what problem you are solving with this library it looks cool. 
Just tried it again and it's nice and fast. I'll probably use it a bit more. It lacks column edit/multi-select though, which is something I use routinely. Of course, it would be nice to see a full blown IDE, but hopefully jetbrains come to their senses and revise their policies. Anyways, I'm accustomizing myself to netbeans again and I quite like it. 
&gt; Type hinting will be optional and purely informative I'm not sure how I feel about that. On one hand, it's better to have hints than nothing at all (especially for linting), but if the interpreter doesn't enforce the hints then I see them equivalent to comments, in the sense that they can be informative but they can also be actively harmful to understanding if they fall out of sync with the actual use of the code. 
http://php.net/conferences/
Even if you remove the /vendor map, the amount of dependency/complexity is still astoundingly huge. I don't like that tbh!
It traslates calls to proc_* functions and provdes well-designed API for this usage.
[removed]
I'd like to point out that libmcrypt hasn't been updated since 2007. Avoid using the mcrypt functions and focus on using openssl. 
&gt; Bickering about minor API annoyances aside, PHP has one large benefit over Python for bigger apps: and it's a sane OOP system with classes, interfaces and type hints. Could you tell me what's unsane in Python's OOP system? You can make classes and interfaces just as in PHP. (And we're already talking about type hints few comments below.) &gt; The IDE support you'll get out of this, early detection of errors, autocomplete, go to definition and so on is saving hours every day. Again, this mostly matters for bigger apps &amp; sites. I can do everything you said with my Python Emacs configuration. Most Python IDE does all of this by default. &gt; Aside from this, PHP is easier to deploy &amp; use for web front-ends, as others already said in the Python thread. In modern web programming, you use in both case a web server which talks to your application through a protocol, whatever it is. What makes PHP easier to deploy? 
What "cost" are you implying?
Only real cost i can think of, is a cost of hard drive space.
Seemed to load fine on iPhone for me, but it's completely unreadable even when zooming in to max.
Right now, this functionality would be fantastic. I'm creating a generator bundle that would drastically gain from this. Specifically when generating things like doctrine entity managers (if you want full auto-completion and type-checking). See: https://github.com/vpassapera/TdnForgeBundle/blob/develop/Resources/skeleton/manager/manager.php.twig#L17 Classes such as these would be prime generics. Btw for those that are having issues understanding this RFC, check out how Java generics work. 
Not sure if sarcasm or actually advocating this.
Yeah, I'm aware and really looking forward to this. I hope it won't take too long for these to be used as pervasively as they are in PHP (especially since the syntax is backwards-compatible to 3.0).
where to find 'beginner' open source projects to contribute and work with others 
Don't look for "beginner" projects because anything viewed as one usually has problems in design and personnel. Instead, find a normal project that has a bunch of small issues outstanding in their trackers that may be too small for the core developers to realistically afford spending time on (this usually includes documentation) and are small enough for you to actually do something with. These smaller issues allow you to do what you're wanting with "beginner" steps, but you'll also help out those who are overwhelmed. You will come across people who graciously accept help as well as those who actively push back against you; that's the world so if you come up against a stone wall, don't waste too much time on it and continue looking for a development community that you can easily work with. Personally, I literally always start working on small issues when I'm new to an environment or system and gradually work my way up because nobody will know everything from the start.
&gt; Bickering about minor API annoyances aside, PHP has one large benefit over Python for bigger apps: and it's a sane OOP system with classes, interfaces and type hints. ( ... ) This seems to contradict opinions that PHP is easier to "shoot your foot with". Basically if I can sum it up, Python gets more of the "little things" right (low-level value semantics) &amp; PHP gets more of the "larger things" (OOP model) right. Really? I mean, really? I'm not favoring Python, nor PHP. But please, I demand an explanation over this statement in the most upvoted comment. What do I possibly need to understand to be able to grasp the ability of PHP to handle "larger things" with its OOP model? Also, there's no such thing as type hinting in PHP. Type hinting is a term for hinting scalar types which is yet non existent in PHP. What you might be thinking is static interface binding, which is something almost completly different. &gt; The IDE support you'll get out of this, early detection of errors, autocomplete, go to definition and so on is saving hours every day. Again, this mostly matters for bigger apps &amp; sites. Really? Have you even tried to look up for Python IDEs?
&gt; Could you tell me what's unsane in Python's OOP system? You can make classes and interfaces just as in PHP. (And we're already talking about type hints few comments below.) If we'll bring the debate to such a vague point where Python "interfaces" are *"just as in PHP"*, it's becoming an almost philosophical conversation and I prefer to pass. Regarding type hints, I know they're coming to Python (not at runtime, but still most of the benefit is there), and I'm just as excited about this as you may be. I think it's a good step for Python. &gt; In modern web programming, you use in both case a web server which talks to your application through a protocol, whatever it is. What makes PHP easier to deploy? The PHP model of deployment scales from completely casual, for casual projects (drop some files, done) to bigger projects (deploy atomically via symlinks etc.). It's hard to deny it can be handy for the span of small to medium projects that exist on the web. For bigger projects, less so. It's also more resilient. PHP crashes a "request", not your app. But I don't have to explain all this. Plus, I was referring to the /r/Python/ thread about comparing PHP and Python and folks in *there* complained about deploying Python for web apps, so you might want to take your issue with them.
[removed]
Wait, for version 7.0? The one that has two RC out?
As a result of months of bike-shedding and people arguing that failing open (return `false` because "it's the developer's responsibility to check the return value") is a good idea, an RFC was opened to get a vote on how the Exception/Error throwing should be implemented.
&gt; adding a duplicate value to a set will throw an error that's not how a set works
http://meetup.com may help you. :)
No offence, but if you are doing it for the sake of Learning, you should learn to do it the right way, and not teach yourself bad habits. $password = password_hash($string, PASSWORD_DEFAULT); You then insert $password into the DB, and later, when doing the verification, just compare the entered password to the hash using: $is_logged_in = false; if(password_verify($entered_password, $password_hash_from_db)){ $is_logged_in = true; } Edit: PASSWORD_DEFAULT is just a built-in constant in PHP, which always uses the strongest hashing algorithm available. Currently, that is bcrypt. Also, a password is usually never encrypted. You calculate a hash of the password string. Encrypted passwords could be compromised (lost encryption key, etc), a hash is a calculated sum of the password string. You should never have to know the password. If you ever visit a webpage where they have the option to resend you the password, they screwed up 
The console component itself has a handy CommandTester class that allows this, adding `Symfony\Component\Console\Tester\CommandTester` to your unit test should do the job. If you want to look at some examples we use this on [Bolt](http://bolt.cm) here's a relatively simple example of testing a console command: https://github.com/bolt/bolt/blob/master/tests/phpunit/unit/Nut/ConfigSetTest.php
I didn't even think about that haha. That could be a solution, too! I used the API now. However, this feedback would help me in a future project. If you have any feedback for something else (coding style, etc.) let me know.
[removed]
[removed]
I think the times are changing. All my stuff, even my legacy apps run on 7 with minimal effort. People are realizing there's no way around keeping your stuff updated now.
It's been a while since the php.net site was hacked and made to deliver malware. Have anyone got a clue regarding how that happened? 
So phpBB stores user birthdates in dd-mm-yyyy format, but an add-on to my forum was storing "0-0-0" rather than an empty string to mean "no birthdate entered". I didn't realise this was happening, so I was very confused about why 1999-11-30 was such a popular birthdate in my database. It turns out that strtotime() will happily parse '0-0-0' to mean '1999-11-30'.
Yeah, I can sort of see the value in dates like 2000-09-31 becoming 2000-10-01 after parsing, since the first date is one that people may accidentally enter to mean "the day after 2000-09-30", but it seems like a stretch to support those shenanigans for both the month and day field at the same time.
The release managers seem to care more about arbitrary deadlines decided months ago in an RFC (which were marked "subject to quality") than the actual recognised meaning of pre-release naming conventions. They're still making changes to features and I wouldn't be surprised if some major changes get merged during the release candidate phase. While "alpha" and "beta" might be more fluid, as far as I've seen it's pretty universal that "release candidate" means a complete behaviour freeze and the only changes are bug fixes. I really won't be surprised if this comes back to bite them on the ass and we see some major bugs in 7.0. And there wasn't really "months of bike-shedding" on this - Engine Exceptions was accepted back in March, with a cleanup discussion in April, but the discussion on core functions (random_*) throwing exceptions didn't come up until July.
Yes, depending on what you regard as perfectly well. For someone it's a perfectly inconsistent piece of "why am I getting frustrated over this when I have better tools?". On the other hand, even that guy who would rather punch himself in the face instead of writing any web backend in PHP, will eventually admit that it's better to use Wordpress and 45$ bought premium theme for a client who needs a polished CMS with trendy design, and he needs it for yesterday. But then, it almost isn't a choice of language but a software ... mostly you wouldn't need to write nothing more than CSS to deliver 'a great website'.
That doesn't make PHP's behaviour any less insane though.
Sure. I see no reason why you shouldn't use both. Any additional language a programmer knows is an advantage. But if you are set up s a php developer, using a great framework, you don't only push out CMS-Like css-webpages by the click of a button, you push out an individualised System without unnecessary overhead Cms come with. There is so much content out there for php, so many frameworks and for someone who does nothing but producing websites, A solid language with lot of support and resources might be preferable over a language that can do the same, offers lots of stuff you'll never need and where the resources you can access are a lot more limited. I try not to see languages as a one-for-all solution. Each language has a right to exist next to others, if there are cases where using it is the best solution. If everyone did just that, languages that weren't good would get extinct and the best languages would be used. 
PSR == PHP Standard Recommendations Like the name says, it's a recommendation. You are not forced to use all their APIs 
Correct, but "storing '0-0-0' ... to mean 'no birthdate entered'" is wrong on just about every level.
&gt; The compiled code is being loaded into ram, but it just MIGHT not init'ed, kind of hard to say unless you do some diving. Uh, no it's not. PHP doesn't load the files for the classes until the class is first used.
Hopefully, that is the case. But there will be a number hurdles to jump. Take a look at this the dual compatibility paragraph. &lt;a href="http://blog.fhqk.com/2015/09/best-practices-for-catching-fatal.html"&gt;Best Practices for Catching Fatal Errors in PHP&lt;/a&gt; Certainly there will be lots of this to battle against.
I'm always surprised by how the internals mailing list manages to turn a completely uncontroversial change (just look at the voting results) into a two-month discussion spanning 100 mails, which looks quite controversial at first glance. So, take it as a lesson to anyone submitting an RFC: Even if a lot of your feedback sounds quite negative, go through the whole process and see how the vote turns out. It might not line up with how the discussion went...
http://www.forbes.com/sites/quora/2013/08/09/what-is-the-worst-mistake-ever-made-in-computer-programming-that-proved-to-be-painful-for-programmers-for-years/
It can look like that, but I think that's a natural result of people trying to cover all the bases in the discussion phase - posing "what ifs" and playing devils advocate. And obviously there will be people who change their position based on the discussion.
Is that supposed to be meaningful? This is a textbook example of a good place to use null. There is no date, what could be better than null which literally means there's nothing there?
strtotime is the most amazing function in all of PHP. The logic checks out. 00 is YY for 2000. Using 0 for any other field is essentially the previous date for that field. Amazing. 
Uh... what's your question?
&gt;There is no bug here, 00-00-00 means 2000-00-00, which is 1999-12-00, which is 1999-11-30. No bug, perfectly normal. I don't like this explanation because it just feels wrong. I think a better one would be: "There is no 0th day or 0th month. Every day involves positive non-zero integers for day and month, and year only doesn't qualify because of the two digit display, but '00' is actually '2000'. Your code is giving you crap because you are feeding it crap, frankly. GIGO.
It makes perfect sense to me. You simply have to remember that PHP tries to do the right thing even with a bad index value, and the right thing for PHP is to do index corrections to get what should be the right value instead of returning an error.
"Two thousand zero-zero party over, oops, out of time; so tonight I'm gonna party like it's 1999."
&gt; sql_mode for MySQL, which can allow you to prevent zero / invalid dates being entered into datetime fields How did MySQL enter into the picture?
&gt; What is used is loaded. What is not used is not. You're right for classes, but just to note, this is why I am not a huge fan of the 'files' entry in composer.json. Although it is the only semi-decent way of loading functions that are needed by a library, those files do get loaded on each request, regardless of whether they are used or not....and no I don't have a fantastic solution to that other than semi-nasty hacks to implement module loading. 
Ostensibly the issue is violating the principle of least astonishment with regards to 00-00-00 
Minor typo. https://github.com/wapmorgan/Subprocess/blob/master/src/Subprocess.php#L81
Fix is ready! https://github.com/nilportugues/laravel5-jsonapi-transformer/releases/tag/1.2.0 Enjoy :D
No. Fixing up data is not the right thing. PHP has no idea whether this was in any way intended or not and it can't possibly know whether the fix it has chosen makes sense or not. Maybe this was honest user error and they accidentally typed a wrong date. Instead of being able to warn them, and let them try again, now you have corrupted data which will will look no different from non-corrupted intentionally written data. Imagine that date to be the answer to a question that will award the winner $1 Million if they get it right and the user makes a simple mistake. Now instead of warning them about the typo, they just never win even if they know the answer. Or imagine the value as something returned by an (equally non-helpful) MySQL database because the date was stored incorrectly to begin with. PHP being "helpful" and fixing it up makes this value indistinguishable from a rela date (which btw is what hit OP). Now imagine you don't notice and write the altered data back. Suddenly you have no idea which record that says nov 30 was actually nov 30 and which one is broken by this bug. Fixing this requires infinitely more work than it would have been if PHP had just blown up. The most annoying bugs I have ever had to deal with were caused by data corruption due to software "fixing" things without telling me. This behavior shown here is horribly wrong and will bite people in the ass. Don't ever look at this as an example how your software should behave. It shouldn't. It should blow up. Your users will thank you for it sooner or later.
[It gets worse](https://www.reddit.com/r/lolphp/comments/3jz6h8/strtotime_there_is_no_bug_here_000000_means/cutlyag)
Or an array of possible interpretations if the possibilities were few enough (suitable for a disambiguation UI)
thanks
&gt; First of all, you probably meant dirname instead of define in your second example. yeah I edited my post, just misspelled it.
IIRC, the organization is composed of framework and the authors of popular libraries. Each recommendation can be adopted by any group, but library and framework authors are the target audience.
I was about to say "yes", but apparently it considers that an invalid date! &gt; var_dump(strtotime('2000-12-62')); bool(false) It looks like the allowable range for the days part is 0-31.
I'm not a native english speaker so i think i can't help about it but i want to thank you for this wonderful tool. My code quality improved significantly. Every rule i know but somehow forget to apply in rush is reminded to me. thanks.
Why do you have to do the __construct function when working with classes? How do you choose if the class can be accessed via class-&gt;function() OR class::function() ? What is/are PSR and why should I it/them? What is the best way to stop mixing HTML and PHP logic? Should I start learning and playing with PHP7?
I believe you are referring the idea that duplicate values in a set should simply ignore the duplicates rather than producing an error? If so, I've [fixed that here](https://github.com/shadowhand/destrukt/commit/297f6ec49fef48ec5b03d4459164492b21d8f38f).
Any videos of Codecourse (old phpacademy) https://www.youtube.com/user/phpacademy
Ah, thanks. Removed the *a result of a mathematical operation* part from the manual [you may see it only next week after the manual rebuild], because 5.6...
You've totally missed PHP's underlying philosophy. PHP aims to be compatible with whatever it thrown at it. That generally means that negative indexes and positive out of bounds indexes will be interpreted, instead of throwing errors like some toddler have a hissy fit. If you want to know about minor complaints, turn on notices. You'll find plenty of things to fix that you're not doing perfectly. If minor things wrong don't bother you, though they probably should, then notices aren't needed. PHP will interpret your results intuitively, and if you don't like it, you can throw a custom error or something of the like. What I find completely odd about you and your discussion is that you want LESS functionality from a language. Go to assembly or something. You'll find much less functionality. &gt; This behavior shown here is horribly wrong and will bite people in the ass. Don't ever look at this as an example how your software should behave. It shouldn't. It should blow up. Your users will thank you for it sooner or later. If you actually read the documentation (RTFM), you would know precisely how it works the first time.
My teams development environments consist of OSX + PHPStorm + Vagrant (Ubuntu Guest) This works great, except for one issue I can't see a way around, it seems that the dev environment's file system is case-insensitive, Composers autoloader doesn't seem to care if my file is named `Module.php` or `module.php`. Quite often when code gets deployed we run into errors of `Class 'foo\bar\Module' not found' in /some/file.php` and need to go fix up the file cases, is there any easy fix for this?
what version of phpbb you using?
&gt; Why do you have to do the __construct function when working with classes? You don't, the constructor is a magic method, you'd only define it if you want something stored the moment you instantiated the class. &gt; How do you choose if the class can be accessed via class-&gt;function() OR class::function() ? I'm guessing you mean class methods, if you define a class method with the `static` keyword the function becomes a static function and you get errors when trying to access the method using an object operator `-&gt;` eg.: class ClassTest { public static function test() {} } Would be accessible like: `ClassTest::test();`, you'd get some form of warning if you tried: $testing = new ClassTest(); $testing-&gt;test(); &gt; What is/are PSR and why should I it/them? You can learn more about PSR here http://www.php-fig.org/ and you should try to use them because PHP community has come together to create a standard of the way we write PHP for consistency across code bases. &gt; What is the best way to stop mixing HTML and PHP logic? A good way to stop mixing html/php logic is to do everything within your controller except for say looping array data (eg.: blog posts) or simple 1 line if statements. Look into the [MVC pattern](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) and why modern frameworks use it &gt; Should I start learning and playing with PHP7? Get familiar with it, PHP 7 won't be big until 2016 as it's release is late in the year so hosting and what not will be preparing for that step soon. Understand everything from 5.3 to 5.6 and then look into the changes in PHP 7 to prepare for the big change and push the community will be making towards PHP 7, similar to how we did the move for hosting to stop using PHP 4. _Anyone correct me if I'm wrong on any points._
lol rook.
That's the old way of doing things that they replaced with 'mysqli', and then replaced again more generically with 'PDO' (PHP Data Objects). 'mysql' is deprecated, I believe.
Google has SPF records, like many other companies. Basically, if the email doesnt come from a server with an IP or host address specified in the SPF record (SPF records are set through a DNS txt record), it gets marked as spam. See this for an explanation: https://en.wikipedia.org/wiki/Sender_Policy_Framework and Gmail's current SPF record is &gt; _spf.google.com. 300 IN TXT "v=spf1 include:_netblocks.google.com include:_netblocks2.google.com include:_netblocks3.google.com ~all"
Binary tree is not a low-level optimization, it's an algorithm that makes sense at any scale, **if** you're looking through a big enough set of items, and the lookup is becoming a bottleneck. So can it make sense in PHP? It can. If you want, describe the specific issue you're having, if any. BTW, you already use binary trees indirectly when using SQL :)
Good catch; thanks. I was getting kind of tired by the end of it, but that was a plain old screw up.
strtotime() returns false (explicit "failure to parse") when given empty strings, nulls, false, 0, or really invalid dates like 9999-99-99, so it has that much sanity about it. My code was checking for the false return value.
Thank you @CharlesStross for a great job! Descriptions are looking really good now.
Really glad it helps to keep thing done, the tool saves many nerve cells to me as well)
Yep, stand corrected... used quite a bit by the libraries in my current project... I was just oblivious to the fact that composer could do that.. perhaps it would have been better to remain oblivious.
Just head over to the nightmare that is that precious JavaScript new Date() object. Where every month is 30 days (even February). No bug , perfectly normal.
Thanks for the answer, now I get it.
&gt; The word is out. Headless Drupal with a REST API, is not the future. You're better off rendering your initial view on the server side. The wheel has been reinvented. This is called Isomorphic or Universal Javascript. The jury is still out on what title is the best. This narrative feels like author sees this like some sort of TV reality show that's playing inside his head. The "word" isn't out. The wheel hasn't been "reinvented". There is no "jury". I think we should focus on engineering issues and specific problems and solutions, and cut out the B.S. and silver bullet talk. For one, you can call Drupal's headless API from the server and render pages on the server with it. An API is usable in any context. It's... "universal" (jury said so!). Regarding the thing called "isomorphic JS", it can be neat, but it's a lot less useful than people wish it was. There's little overlap between what server and client do, aside from preliminary input validation, for which AJAX is more than adequate and can work in soft real-time. There's also the confusion on who owns the presentation layer, a bit more on that later. No matter how one can spin it, server code is trusted and code running on the client is not. The server has privileged access to canonical domain state and persistence layer, and client does not. They're different. They just... "rhyme" occasionally, in a way which is not that important in the big picture. Regarding author's issue with rendering hybrid presentation content, I propose they need to separate their responsibilities better and there will be less duplication. They can send simple, straight, semantic HTML to the browser and use JS for rendering the finishing touches and interactive widgets. Google doesn't care if the content they see is fancy &amp; interactive, their goal is to get the semantic data. The same data which is suitable as a data input for your JS widgets. So if you think about it, there's very little overlap here, unless you have a specific case that demands it (and then I'd like to hear it).
Or you could use gmail's SMTP server and a valid account to send email using gmail.
I would say that's a bad practice open source projects are continuing to use. Namely supporting old PHP versions. For my own projects, the solution is simple. slowly transition to Throwable and require PHP7. When handling Exceptions you rarely use the *Exception* catchall anyway. I usually try to have only one place to catch everything that hasn't been caught before. Opensource projects are only confronted with this if they chose to utilize the new fatal error handling of PHP7. If they do so, they'll have to go the backwards-compatibility-way until PHP5.* goes out of support.
I didn't check for Gmail specifically, but we can't talk about e-mail authentication without mentionning [DMARC](https://fr.wikipedia.org/wiki/DMARC). DMARC works together with SPF and/or DKIM and specify rules on what to do when the validation fails (reject, mark as spam, etc.).
&gt;I saw you got a hefty dose of downvotes I think they got that it was a swipe against mysql in general and in particular that php devs don't even think about their choice of db. It's been so long since I've used it I didn't even realize the possible confusion. I would always turn to postgres, much much better experience and if I were in a situation where mysql seemed more appropriate i'd probably use sqlite.
You don't get to decide who this email is from; it comes from your server, and not the end user's email domain. So don't set the "from" header like this. The email is being rejected by *your* email service because of checks based on this header (DKIM, SPF, etc.) If you want to be able to reply directly to the user, then add the ReplyTo header (check spelling of that).
Try the SPA approach. We all know at the end of day, UX is just becoming one of those things most of us just have to cater for as developers. I wasn't entirely sold on Angular before I started using it for work, but i'm completely for it now and probably would utilise it (or any of the other JS alternatives) for future projects because it just allows for some very nice possibilities. It sounds like you've already prescribed some very big incentives to jump on it, with experience being the only potential barrier. Pull your socks up, do a bit of research, treat it like any other PHP application you'd develop for and you'll easily figure it out. For API side, you can easily throw on Lumen or Laravel (probably Lumen if you're wanting to make the most of stripping things back server side).
&gt; I think they got that it was a swipe against mysql in general Your posts continue to show a complete lack of ability to communicate your concerns. That's why the downvotes. &gt; But that doesn't explain "mysql" There's nothing to explain. The thread head is about how to avoid recording bad dates. Using a MySQL DB is a way. You've then attempted to steer the conversation with some ethereal concern: &gt; I cannot understand how it would help me here. that has not yet been explained and Tynach has fed into that, inexplicably...btw the whole conversation between you 2 makes no sense. &gt; That's the old way of doing things that they replaced with 'mysqli' Again, having nothing to do with the thread, so whatever that answers, it isn't what our conversation was about. If you really didn't know what "mysql" was, you could have googled it. Instead you've chosen to continue attempting to derail the thread. The end.
Thank for your answer! I have found very nice resource https://www.youtube.com/watch?v=I1USsIW8aWE from Steve Sanderson from Microsoft. He does good job about describing his workflow which made me really want to jump in and try this. I'll probably try KnockoutJS and Lumen approach. I tried Angular but it feels more error-prone for me and taking some order of simplification here, Angular does his work in o(n) while knockout does it in o(1) time which feels more acceptable to me. Angular has "update cycles" that are comparing all possible watchers in particular site while KO bases on dependency graph so changing one of 5000 elements doesnt really matter for KO, its still o(1) while Angular does actually check for 1 proper element and 4999 reundant checks. Thank you for your response, it was very valluable for me!
I think either just have more discipline in your file naming e.g follow PSR4, which PHPStorm will be helping you with anyway if you're doing `new PHP Class`. Also consider switching your development environment to have the same case sensitivity as your deployment.
The code is much more vulnerable then just the From header. for example, there is no CSRF protection, no validations and you can easily hide the original message and make it a multipart with a spam message. Besides fixing these vulnerabilities, it's always advisable to use tools like MailCatcher when developing something that can send emails. That way to can check mails while developing and prevent the sending of accidental mails.
You posted very good points. I know that PHP is awfully designed and I step upon this everyday. But Symfony, Laravel frameworks put PHP a bit closer to corretness (even though it is only tool), by indroducing DI and such. Please tell me what would be your best alternative if you are not using PHP?
It works if the "use" and the class with the same name are in different files. This is a very annoying thing PHP does which makes merging files unnecessarily complex.
Likely on the server you have code merged in one file by some process, and it's in separate files locally. Solution is either change the use clause (with an alias for ex. use X\Y as Y2) or split the conflicting files.
&gt; To add onto this, you would want to use the static keyword on your method when the method is stateless. If the method in question does not interact with or affect any other methods in the class, then you can go ahead and make it static. A static method can be stateful, and a non-static method can be stateless. A more robust rule is whether the logic is tied to the instance, or all instances of the class (or the class is never instantiated even). &gt; Hmm, I don't really fully agree with the MVC pattern being a way to separate HTML and PHP. Sure, MVC separates concerns and cuts down greatly on the commingling of the two, but in the View you still do have to mix HTML and PHP. It's implied that the question regarded mixing non-presentational logic and presentational logic. This is commonly worded as "mixing PHP and HTML" but you don't have to literally separate them, the key benefit is architectural boundaries and not syntax boundaries. Which also makes mentioning MVC relevant.
Yes, totally agree with all that. I was just trying to offer a reason for the specific problem the OP was having. Unfortunately most answers to PHP questions on /r/phphelp could really start with, "throw that away and start learning some security basics". But that's PHP for you - the low barrier to entry and the ubiquitous presence on just about all hosting platforms, plus a plethora of really bad examples to copy and paste, means there are tools here for beginners to hang themselves so easily. I guess this is going to be a good start: http://www.phptherightway.com/#data_filtering 
If I read the article right, they are suggesting you encrypt the sensitive values in PHP Env variables and store the encryption key in the VCS? Then the attacker could still load up the env vars and get the encryption key from the VCS and decrypt the sensitive data... Why not just not commit your config file and only commit a sample config that has dummy values?
&gt; and only commit a sample config that has dummy values? Because if this is for any distributable app, then you have the *actual* values, stored locally to the code, and on disk. This means that *others* using your code, can be apt to accidentally commit a real config file to their own VCS after obtaining the app. And *that* scenario is exactly why it's proposed to put secrets in ENV vars in the first place... to stop file storage of secrets local to the codebase.
why should i commit production code to a repository? development code gets pushed to git and the production code is just a pull from the repo. i know, there are dozends of ways to do things. my point is: as long as you are aware that uploading passwords or any sensitive information to a git repo is a bad idea (no matter if its github or privat), you will be fine. the article describes a problem specific for just a few use cases and proposes a solution that only works/is needed for a few percent.
beats me, seems like op havent encountered this practise yet and was looking for a "convinient" solution that turned out totally inconvinient
From what I know, Python lacks some parts of proper OOP: Interfaces and Private methods. Also PHP has type-hinting for non-scalar types, and it's coming for scalar types in PHP 7.
Why not use PSR-7... All project do not require heavy artillery... Personnaly, I don't understand past PSR-2. Why always have to past time at ready a doc, install a lib (with 90% of not use) and use it "correctly" went code what you need is more fast.
You lost me...
yeah, on top of that when the hell would you ever write something like 00-00-00? you need to screw up in three separate places there.
I've used PHP's SplHeap, creating a subclass called a DateTimeHeap, with a DateTime comparator: /** * DateTime comparator * * @param DateTime $value1 * @param DateTime $value2 * * @return int */ protected function compare($value1, $value2) { return $value2-&gt;getTimestamp() - $value1-&gt;getTimestamp(); } This made it more performant to build large date selections incrementally, and add them to a cart, having the receipt ultimately show all the dates in order.
You should, at *bare minimum*, be hashing user passwords prior to storage. 
Yes, especially for passwords in database: - it's easy to do well. Look at password_hash(), password_verify(), and password_needs_rehash() - not only your code is relevant. If there's an unpatched issue in your kernel, web server, or any other software on your system, your passwords can be stolen - I assume if you've 'secured' PMA you've also restricted direct access to the database server (eg port 3306 for mysql)? - if what you're building is public: you will lose user trust if unencrypted passwords get leaked, and you will *never* get it back More generally: - "I'm careful" is not a good security approach. However good you are, you are not perfect. Thorough review (of the architecture /and/ every changeset) will minimize the risk, but it's still there. - A better approach is to both try to use technology that minimizes the ability to make a security-related mistake (for example, bound parameters for database queries), and "defense in depth" - at each layer, the design should assume that the previous layer can not be trusted, and minimize the risk. eg both restrict access to your database server, and hash the passwords. - If you're writing stuff that hardly anyone uses, "I just never see anyone actually compromising my sites" is a misunderstanding of your threat. Your most likely threat is people automatically scanning huge numbers of websites they don't care about to try and find one of a class of vulnerabilities, not to attack you specifically.
This is pointless. If an attacker gains access to your filesystem, then they can access your database *the same way your application does*. Trying to encrypt the plaintext values is just a waste of time. If an attacker can see the encrypted string you've already lost. Obviously don't put them in Git, and don't expose phpinfo to the world. Other than that, store that shit in plaintext all day long.
I wouldn't be relying on #3 that much. Zero day exploits exist and patching your server won't help with that. 
API suggestion: remove support for 'string $args', require an array of strings, which you pass to escapeshellarg(), eg: $string_command = implode(" ", array_map(function($x) { return escapeshellarg($x); }, $args); Safe by default :)
&gt; Firewall preventing all access to my DB server except for localhost and the internal data-center IPs What happens when the attacker is on localhost? On unfortunate 0-day in something you use, RFI in your webapp, etc. and an attacker can now generate traffic that genuinely originates from localhost. SQL injection? Proper security lies in trusting nothing external to yourself. Apply principle of least privilege to everything, and not principle of 'I run this machine, therefore safe'. Some things you can't necessarily avoid - an SQL injection vulnerability is always at least going to leak some data, but you *can* make sure that's all it does if all read requests are done in the context of a user that can only read data. &gt;Prevent local based attacks by utilizing Fail2Ban and using ssh-key logins only (no passwords). Won't do anything against social engineering or vulnerabilities in other software leaking the key, or against webshells that might come to exist from vulnerabilities elsewhere. &gt;Keeping server software up-to-date Not all bugs/security issues are known before seeing exploitation in the wild. It's a good practice, sure, but don't trust it too far. &gt;My point is, by having the correct environment having your username and password in plain text is not so scary. One FI vulnerability, and PHP is somewhat infamous for enabling them more readily than other languages, and you've just given it all up. Use proper storage techniques and now that attack vector will, at least, give you time to recognize the compromise and respond while the attacker is off cracking.
File injection also allows them to just use the existing database connection in the application. If that's not the case, then your database server shouldn't be listening over the wire anyway, so the credentials are useless.
I meant file *inclusion* as opposed to *injection*. Plenty of mistakes made with include/require let people read files in the context of the webapp user, but not supply any arbitrary code.
Please don't. Forking processes yes, but not threading. There's this pthread extension, but itself says its highly experimental. PHP is not designed to spawn threads! Afaik there's no such thing like a memory model which would allow a sane threading. I guess very much you could experience nasty things like word tearing in a very undefined way.
My point is, the only way to get around basic security practices you still require a local user account which is basically exploiting a 0-day. If a 0-day is exploited on your server, there is no possible way for you secure your server. I don't care how much you obfuscate your server code, a hacker can simply use a debugger to pull the information.
&gt;If a 0-day is exploited on your server, there is no possible way for you secure your server. There are damage mitigation strategies. Principle of least privilege. &gt;I don't care how much you obfuscate your server code, a hacker can simply use a debugger to pull the information. Not all 0-days or other vulnerabilities confer the same privileges on the attacker. An error in your web code could readily introduce a security flaw in which anybody can *read* and *only read* files on your system. Anything, therefore, that limits the capacity of the webapp to read arbitrary files with sensitive data is a good damage mitigation strategy. There's a reason /etc/passwd doesn't use plaintext passwords despite the fact it shouldn't be user-readable. Some very serious, professional folk have stood by this decision for many years now. 
To be honest I don't share your feelings. But there's IMO indeed a weird issue with PSR-7. I understand the scope of PSR-7 is HTTP. Then I see there this `StreamInterface`. I very much understand that they need such an interface (if you are reluctant to use the built-in), but for me it looks very misplaced in that PSR. It could be a hint how well thought the design process is.
Basically - you can't (okay, you can with pthreads (which is afair available on windows too) or fake threading using forks), but you don't really need threads! You can write asynchronous, event-driven API like in node.js, especially with php 5.6 thanks to the generator feature you can implement simple coroutines - https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html In fact for your usage all you need is non-blocking sockets and some events, I done that in https://github.com/kadet1090/SocketLib, and it's not really hard.
Okay, so let's say there is a LFI vulnerability that lets an attacker read your database credentials. To start with, like I said above, your database should not be listening over the wire. The attacker would have to get access to the local network, otherwise the credentials are of little value. But, let's just say the database is misconfigured and *is* accepting remote connections. Suppose then that you have encrypted your credentials. Shouldn't it then be possible to simply obtain the encryption logic from the application as well as the private key using the LFI vulnerability?
Cool, I'll try it out. Thanks!
&gt;Shouldn't it then be possible to simply obtain the encryption logic from the application as well as the private key using the LFI vulnerability? Not if that is stored as privileged information the webapp doesn't need read/write access to. Any *NIX system make it easy to create execute-only programs. If you have to feed the hashed db password through a blackbox to get the real db password then you're reasonably secure against read-only malicious users. It's a bit of a hassle to set-up initially, but together with infrastructure management tools like puppet, chef, or automated docker builds and the like it's only a hassle to set-up, not maintain.
In a DVC like Git a situation can occur where a dev's computer is compromised and the application code leaks. If the key, then, is in an env var on the production server, and the encoded credentials are in Git, you're fine. (Except, you know, you've just leaked your entire application) It's easy to say "don't put it in version control!" but it has to go _somewhere_, and the options are few, at least in the PHP world. You package your application on a CI server, and add the credentials there instead of from Git? Fine, but now your CI server is the weak link in the chain instead.
&gt; A static method can be stateful, and a non-static method can be stateless. A more robust rule is whether the logic is tied to the instance, or all instances of the class (or the class is never instantiated even). Sure. While that is a more complete rule of thumb, I would think it would be rather difficult for someone just starting out with OO concepts to be able to derive when they should make methods static from it. &gt; It's implied that the question regarded mixing non-presentational logic and presentational logic. This is commonly worded as "mixing PHP and HTML" but you don't have to literally separate them, the key benefit is architectural boundaries and not syntax boundaries. Which also makes mentioning MVC relevant. The question was fairly vague so I would say both interpretations are equally valid. Both are relevant and, when used in combination, will yield a maximum result.
The credentials would go in an untracked config file, or env vars. The dev shouldn't have production credentials in his local application. The credentials for the production server are either stored in some kind of build process for larger stuff, or just maintained by hand for smaller stuff. There's no reason at all for credentials to ever be in Git.
&gt; It'd be like Python copying the PHP API and saying "but it's Python!". If the API is the same no one cares that it has a different name. A more apt comparison is HHVM re-creating the PHP API. By your argument, HHVM is pointless, as it is no different from the Zend engine because it has the same API. But there's more to libraries and interpreters than the API, there's speed, stability, scalability, etc. Not to mention additional things that HHVM offers, such as Hack. Now, PHP developers have options as to what PHP engine they want to run a website on. There's pros and cons to the official Zend engine vs. HHVM, and you can weigh those as to what suits your needs best, but you don't need to worry about conforming your code to one or the other because they conform to a shared, standard API (Although, it's not really standard. PHP does not have a published language specification, though people have been pushing for this recently.) &gt; If PSR-60 defines a shitty API for generating forms and someone else comes out with a better API... well sucks to be that other guy because PSR-60 is PHP FIG endorsed unlike that other guy's API? Hopefully, the FIG group doesn't define a shitty interface in the first place. If they do (assuming it's somehow voted through after lots of debate) then PHP library and framework creators are still free to adopt the standard if they want, and PHP developers are still free to use whatever library they want. I have a feeling that if someone came along with a better form library interface and it was agreed by most people that it was better than shitty ole' PSR-60, the FIG group would create PSR-61: Improved Form Interface. They've already revised themselves before: [PSR-4](http://www.php-fig.org/psr/psr-4/) is a revised and improved version of [PSR-0](http://www.php-fig.org/psr/psr-0/). &gt; What's next? Will the PHP FIG start coming up with API's for libraries that send out mail? For libraries that edit PDF's? Hopefully! Then, we can start writing library-agnostic code that will work in any framework for those types of things.
I can't believe no one is detecting what OP is really asking. They're not asking for *threads*. They need async I/O, so they need something with an event loop that supports TCP connections. Check out React.PHP, and there are more projects like it. With this, you'll be able handle all users, channels, networks and so on in a single thread, but it'll work as if it's multiple (for your needs).
Perfect! Thank you!
You're forcing your users to put more trust in you than they should have to, you're giving yourself more responsibility than you need. The most important part of security is acknowledging you're going to make mistakes, you need to acknowledge that you aren't perfect and design your system with that in mind. Your systems -- that don't use any form of encryption -- all have **you** as a single point of failure and that isn't good, at all. The biggest enemy of security is arrogance: &gt; anything I write would be pretty hard close to impossible to exploit on its own I'm not trying to belittle you, or insult you, so don't take this as an attack on you, but it's very likely that someone who doesn't consider encryption worth their time is someone who is making other very basic, very serious security errors. Your security strategy is "I will never make an error", the exact opposite of what it needs to be. 
Great tips. Also worth noting that in the CTRL+N dialog, you can type to filter the tree. In fact, every single tree is filterable in PHPStorm. Use that to your advantage. In addition, your custom file templates will appear in the CTRL+N dialog. &amp;nbsp; And of course, the most useful shortcut after "Navigate to file": **CTRL + E**: Browse recent files. You can cycle through files by repeatedly pressing CTRL+E. This tree is filterable as well. 
You should take a look a [Flarum](http://flarum.org). It's new and it looks very promising.
This is a link to a post that I used in a discussion here. On of the things about it that caught me of guard was Rawan 's acceptance of the duality of backwards compatibility. The reason is because we are working on a new CMF that will be PHP7 compatible when it is released http://blog.fhqk.com/p/blog-page.html. The thing is we thought that going forward with PHP7 only from the very start would be a good thing. Fatal errors have been something that was a problem in the architecture earlier. Fixing them would be no big deal with PHP7. But it might cost us lots of popularity points. So should we say screw it and go wholly with php7,ride the fence with eveyone else? And now I am even second guessing the idea and thinking maybe having two versions for a while just to build the community on. 
Ewwww
[removed]
If you know my database password, you still know nothing.
I had a massive need for this in a big project, although not threads I could easily handle large bundles of data and big tasks. https://github.com/chrisboulton/php-resque 
I'm not sure you read the whole article. A large part of it is about how people can get access to the password *without* having access to the file system (such as through phpinfo() if it's stored in environmental variables as many people do so that the password doesn't end up on github).
True, but it's not just the MySQL password, the same password storage technique is used for storing the key that is used to secure cookies and keys for things like Amazon Web Services or Google services.
Yes, you should definitely do that *also*. But somehow stuff still ends up on a public repo on GitHub. All it takes is someone not moving around files with the correct flags, or mis-setting the file permissions and forgetting about the "." files and then your .gitignore ends up being unreadable by git and your files end up getting exposed.
Holy crap! I had *no idea* that phpinfo() dumped all of the environmental variables. I don't know why I never realized that before. All it takes is some package you use that left a debug option on and someone can find a way to view the phpinfo output (which is never a good thing, but this is far worse than I realized).
Those are all really amateur mistakes, which granted, may have been the focus of the article.
Well hopefully they shopped around and took a look at other existant APIs and tried to incorporate the best features of each (if possible). Developing an API in a vacuum and then presenting it as though it's the best API ever made for the task at hand when you don't know anything about the competition is... arrogant. Not that I'm saying PHP FIG did that - I just hope that they don't start! Also, that's a good point about HHVM.
I don't really understand the need to have credentials (other than database credentials) in your variables anyway(either config or env). Database credentials will be there, but that password is most likely a randomly generated string (so no reuse in other systems) and the database is only accessible from certain sources (most cases localhost). Other information can be api keys (oauth, google maps, etc) which are always bound to hostnames and other than that, I don't see what kind of sensitive data you'd need to keep. I'm not saying there isn't any, I'm saying I wouldn't have a good example of it.
I don't know how you intended to customize the forum / member system but I will say that one problem that phpBB 2.0.x and 3.0.x had is that to customize them you had to modify the core code. The problem with that is that when you try to upgrade to a new release of 2.0.x or 3.0.x any customizations you had got wiped away and had to be reapplied. They had patch files available and so-called MODification files that could be auto-installed with EasyMOD or AutoMOD but those could fail if you had changed one of the lines they were looking for, etc. phpBB 3.1.x remedied this by introducing extensions. They're based off of Symphony events and are pretty powerful and can be used in lots of places. That said, it looks like Flarum supports extensions too but idk how extensively it supports them. Either way, I think extensions are the way to go. Good luck in your deliberations!
I just tried a --x shell script on my linux box and got a permission denied when attempting to execute it. I'm not sure if execute-only is a viable setting
Although something like that may work in a small app, this won't work in an environment where you have the same app spread across multiple servers that are each trying to communicate with other components that require shared credentials (i.e. a db).
I... I'm not sure if you're "eww" at the singleton, or the static class. Too many ways to "eww". :P
php7 is pretty fast...
Correction - just uses [Laravel components.](http://flarum.org/features/) &gt; Flarum's code is divided into distinct layers: A core domain, built with Laravel components; an API that conforms to the JSON-API spec; and a web application, built with a React-like JavaScript framework. Want to swap in a traditional PHP front-end? Build a native mobile app? All the power to you. 
Giant trucks and SUVs with truck nuts and aftermarket fake exhaust pipes
- Being able to get to the admin login form - Seeing that its yet another site running Wordpress - Being able to browse directories on their server - No HTTPS (seriously, its 2015. EVERYTHING should run exclusively on HTTPS - no excuses!) - Being able to see what version of whatever free CMS they are using.
Hi my password is several megabytes long 
If I get access to a server that has a Laravel app I could create a controller, a route and make it execute any command I want. I would need the DB credentials only to take a dump (pun intended!)
Is it 4 numbers for you, too?
Yours too? Neat.
Storing session state in a cookie instead of only storing a session identifier that references a server-side storage mechanism. Especially when I see `unserialize()` on the receiving end of forgeable cookie data. * CodeIgniter &lt;= 2.1.4 * Laravel &gt; 4.0 (dangerous only with encryption turned off, but still dangerous) * Kohana &lt;= 3.2.3, 3.3.2 * AnchorCMS &lt;= 0.9.2 (wide open) I could probably dig up more examples, but what's even the point anymore? EDIT: That reminds me, I never shared the AnchorCMS advisory with r/php...
For HTTPS everywhere, I disagree. Static content should stay HTTP to improve its cachibility, especially in things that are closer to the user such as office proxies, and other middle men that you opt in to like Cloud Flare. Using HTTPS via Cloud Flare does help somewhat, but you're still missing out on caching from office proxies and mobile networks.
Me? Are you talking about my code? How could you possibly... Oh, you speak in general. ^Never ^^mind ^^^I ^^^just ^^^^...
Tomorrow in news: "... a new form of denial of service by sending ridiculously long passwords to Blowfish." :-)
St.. Sttt... Stuttering.
You use past tense - does that mean they are fast in PHP 7? To be more specific with the question - is there a performance improvement regarding binary search trees bigger than the "average" performance improvement that PHP 7 has? :)
https://istlsfastyet.com You can set up your own caching reverse proxies / TLS terminators that use pinned certificates with tuned TLS1.2 to connect back your web server. In other words, you can invent *your own* version of exactly CloudFlare does, with the added advantage of not having to trust them.
https://github.com/anchorcms/anchor-cms/blob/9a0664b25e8d2a1f253fb0dd277571de55fc9c1e/install/storage/session.distro.php Actually, it might be the case. When I was reading that the first time I could have swore the default driver was set to `'cookie'`. Maybe I had my wires crossed? I probably could have saved myself a whole month of waiting to publish this if I had known it wasn't enabled by default. :)
There are a few "not so obvious" things that can go wrong when designing a cookie based data store (at least if you add compresion support), but in general, I'd say it isn't rocket science. [TCrypto](https://github.com/timoh6/TCrypto) I maintain is just about that, by default using cookies as a storage backend and PHP's serialize/unserialize to serialize the data. Besides the compression vulnerability (a few years back) there's been no other security issues and I dare to doubt any will arise. Just keep it as simple as possible. The more features and variation there is, the more there is room for bugs and implementation issues, recall the previous JWT case..
Truncating is a really bad idea compared to explicitly limiting the user, or figuring out how to support it (say by hashing in segments and hashing the hashes together or whatever). Heck, the first 72 chars on all my passwords are the same! But a more serious conclusion we can have is: reasonable limits are not a good heuristic for passwords stored as plain text. There are many practical reasons to want everything to be limited, because implementations change, use cases vary, and unbounded conditions are hard to reason about. 
I spent three minutes looking for the usual candidates (ECB mode, not using a MAC, weak PRNG, timing attacks) and didn't find any, when I came back to this thread I only then noticed your username and then I said, "Oh." :P
I'm looking into using Hashicorp Vault in our system. Solves some of the issues people are having. Obviously no system or method is perfect. Anyone used it in production? https://www.vaultproject.io/
Lol I read this, scroll down front page more, end up on your AnchorCMS thing 
&gt; most important. When the footer still says Wordpress all rights reserved or another framework/cms Can you expand on that? Does it matter if it is up to date?
Doesn't matter if WP is up to date if someone has a crappy made plugin that is insecure. Removing references to wordpress on the site and in the source code will get rid of quite a few script kiddies. 
Don't judge too hard but coming from front-end if your interface looks like it was done by a student with really bad HTML, I assume you can't handle more complex things. UX and UI matters when you want me to give you personal info.
Conserning Linux kernel, one could have said: it was about time! Great to see this will be in PHP 7.
combovers and skinny jeans.
I was once on unemployment in IL. I couldn't remember my password on the website, so I clicked the "forgot your password" link. My original password was emailed to me in plain text. WTF? I immediately updated all my other passwords. Ever consider a hash, GOVERNMENT? Fucking morans. edit: this is factual, and an insult joke. Sorry to be pedantic, but it comes with the territory. edit2: Since this isn't apparent, the "morans" reference is this: http://i3.kym-cdn.com/photos/images/facebook/000/026/508/633610346589409100-morans.jpg
That's corrected with the new version of http, which will be supported by Firefox and Chrome natively. We are revving up to it right now.
What method do you suggest? Serious question.
Why not? It will break a dictionary attack. edit: sardonic and sarcastic, my statement is clear. Bring on the norse runes. Better than normal captcha. I have to prepare for work.
*casually slides his repository and validation interfaces behind his monitor*
Thanks for that. I've considered IP restrictions but it's not something I can do with the way our users are spread out (and don't have static IP's). I also can't force it to be internally accessible either as not all users are on our network. I had considered using something other than /admin for the login page, but using random strings seems more "security through obscurity" and I didn't think it would solve more problems than it creates. Thanks for responding though!
"Security through obscurity" is a bad idea only when its borne by ignorance and it is the sole measure that your system relies on for security. *But* when it's combined with other strong measures, people refer to it by another name: "[defense in depth](https://en.wikipedia.org/wiki/Defense_in_depth_%28computing%29)" :-)
Someone who can only find the admin page by adding /admin to the url is probably incapable of breaking a decent hashed and keyed password, or fake an identity. Having /akjdo324n as your admin page is just so much more inconvenient for the customer than a properly secured /admin page, I doubt it's worth the risk. One should always consider the customer to be a layperson who forgets anything that isn't extremely obvious. 
Ok noob question. Why filter? If I'm using (for example) PDO property to prevent SQL injections and I'm using an HTML template system that escapes variables, what does filtering do? I know if I need a number or bool it helps but if the input is a string I don't care what is in it.
Except pre-hashing bcrypt with SHA-256 is a really bad idea if the bcrypt is implemented using the standard crypt function behind the scenes (as it is in the case of password_hash). This is because crypt will treat the first null byte of the input as the end of the string. One in every 256 inputs will actually *begin* with a null byte, meaning they'll all result in the same bcrypt hash. Really really bad. The problem here is due to the crypt function, which honestly is a dated function with too many problematic quirks. For password hashing, I'm more comfortable using PBKDF2+SHA256, which has no such problems with null byte inputs or extremely long inputs (up to 2 exabytes).
&gt; One should always consider the customer to be a layperson who forgets anything that isn't extremely obvious. Even the extremely obvious isn't safe from some of my users ;)
That makes more sense since there's nothing wrong with using $_GET or $_POST directly, provided you filter/validate the input.
I don't think PHP FIG would actively close themselves off from the rest of the PHP world while making these reference standards. They are a pretty large and diverse group of seasoned PHP'ers. [Take a look at the Member Projects section of their site](http://www.php-fig.org/). Their discussions are done in open mailing lists and IRC channels, and some members have had additional discussions on /r/php. 
Really? SOAP all over again? 
&gt; However encryption is disabled by default Session encryption is not enabled by default, but cookie encryption is always enabled. It's a global middleware that runs on every request. So even if you switch to cookie-based session storage, the cookie is encrypted with your application's key (though to be fair, you do have to remember to generate it). Any data not encrypted with that key (e.g. forged data), will return null when asked for.
So it sounds like PDO is broken by default for MySQL, otherwise filtering strings isn't necessary.
like [this](https://www.reddit.com/r/PHP/submit)?
If you build software at scale, there's a compelling reason to store on the browser. When you start talking about having dozens or hundreds of servers running behind a load balancer, you start running in to issues. Using on-disk sessions is a no-go, because syncing them up is nightmarish. Using in-memory sessions is kinda tolerable, but clustering software is a pain and only scales so far. Using a database-backed session is a decent option, but even then at really big scales it can bite you (eventual consistency is a recurring theme at scale, something engineers expect but users don't). Assuming for a moment that the client can be trusted to send un-tampered data, then you've just simplified the system design. Servers can fail as they will, but since state is carried by the client it doesn't matter. And there is no eventual consistency to worry about, from their perspective everything is immediate and un-surprising. Not to mention you've removed a database from the picture, which reduces the number of failure points. The only difficulty then is what you describe as "forgeable data", which can be mitigated through the use of some kind of signing mechanism. However I freely admit most people don't run at this scale, and are way too lazy to investigate cryptographic signing of cookies. In those cases, I agree with you completely, the right answer is server-side cookies + random session id. 
Ignorance of choosing to use php-Mysql over PDO.....
I was joking around, and my joke was explained by my edit. Example password: TheR3dFoxPunxThaPige0ns4Fe3dingThaB!rds487$ edit: what I actually do is I take a song lyric. Let's say it's: Excuse me while I kiss the sky You could take the first letter of every word, then convert it so it is: 3Mw!K+$ Short and bad, generally. But with a longer lyric, it of course becomes exponentially more difficult to crack. Every character helps protect against a brute force. My passwords are 13+ characters.
Or just pre-PDO code in general. Back in the day, I wrote a wrapper around php-mysql to take care of escaping and substituting arguments for me so that I wasn't constantly having to call mysql_real_escape_string(). I can't imagine how many times people never learned to escape their arguments or knew but just didn't bother because it was too much work (or even just occasionally forgot). PDO was a godsend.
Ah, thanks for the correction.
It's not that bad. I don't really care about the layout because that's a question of taste but the implementation is far more important. Are you using table to align stuff or CSS? Can you make the difference between using H5 and styling text properly? Stuff like that. The only thing they got wrong was using span instead of label with a for attribute, no alt text on one of the images? Also reddit doesn't ask for my credit card info when I sign up so that's a big plus.
If you're going to store them in a cookie, for the love of all that is sane and good in this world, use libsodium. I made a toy implementation [here](https://github.com/paragonie/halite_cookie).
I guess if you are doing it in a public place someone might just happen to take a picture at the same time you finished the last number and then oops your cc number is off on the net. Personally, I use a desktop at my apartment, and my cats don't want to bankrupt me or I wont be able to drug them with catnip, so I like seeing them too. I think if you are wanting to show them, the best way would be to be default have them *** and have a checkbox they can click to toggle between the numbers and the placeholders. edit) them -&gt; then
```$sql = "SELECT * FROM `user` WHERE `userid` = " . $_GET['userid'];``` I've seen this in a few _dated_ code bases I've worked with in the past 8 months -_-
Even against dictionary attacks? 
Memcached is a caching system. Memcached can be used by different systems. If multiple frameworks use Memcached they have a standard way of caching data, no PSR needed. Not everyone wants to use the Memcached library or even Memcached itself. Some want to use Redis, or only need a file cache. Why wouldn't you want a standard API for it? Maybe today a file cache is enough, tomorrow you need a local redis instance, and the day after you need a distributed memcached cluster. Why would you want to have to change all of the places you cache something to be able to do that? Or what if the caching library you're using gets abandoned? Without a standard API you have to change everything, with one you could keep almost everything exactly as it was. If you truly don't like the API there's nothing stopping you from using something else, but I can't see a single downside of having an optional standard. And as others have mentioned, they're not closed to debate about their standards. There's a lot of discussion that goes into them with a good number of people involved, and when they do get something wrong, they're open to fixing it (PSR-0/4).
Sorry, didnt understand. Do you mean that password_hash already does it for you, or that you should do it manually?
Seems to be the right approach, yes. Part of it depends on whether you're merely worried about *tampering*, or if you don't even want your users seeing the values at all (i.e. sensitive data).
No, it doesn't. This [SO article](http://security.stackexchange.com/questions/33470/what-technical-reasons-are-there-to-have-low-maximum-password-lengths) has some interesting reasons why there may be a password length limit.
 class ftp extends ftp_base { Working on an osCommerce instance today, this is all I got for you...
Unable to put spaces in a username. IPB did it in 2003, I do it with all my systems, you have no excuse.
IMO this is wrong and a bad way of thinking, it's basically security through obscurity. Most of these script kiddies anyway are using kits which include hacks for all the major frameworks and runs all of them against your site regardless of version hoping it's correct on just one of them. With any of our sites/apps, including symfony apps we get hits from ./wp-admin and ./user on all sites regardless of underlying tech. tldr; they are hitting all sites for any exploits and removing the version number won't protect you. 
&gt; Even so, with read-only content I would still opt for HTTP by default I wouldn't. If I can pwn your router, I can use read-only content to inject malicious code in your browser. If all your connections are over HTTPS (which is the desired goal of most security experts), then I never get the opportunity to inject my payload into a site you trust. (See: QUANTUMINSERT.) Furthermore, if you make an exception to only use strong end-to-end authenticated encryption for politically sensitive or legally dubious content, you're giving the government a way to identify what material they should be targeting. "It's encrypted? It must be something they have a reason to hide!" If you encrypt EVERYTHING, they have more haystack and less needle, which is a great emergent privacy win on top of just protecting users from active network attackers. "Everything's encrypted? Where do we even begin? Is the metadata useful?"
Overengineering ++ You never know what crazy future requirements there will be, so might as well design for the unknown future! True story: At one company I once worked at, a specific framework was chosen, but one of the developers chose to write a meta layer that sits in front of the framework. When asked why, his response was that he wanted to abstract the framework, so that, if they decided to switch to another framework in the future, they could (in theory). [sigh...](http://a.deviantart.net/avatars/f/a/facepalm-plz.jpg?1)
It would, except that it has already been taken and is my reddit password. /s
If you can't be bothered to spend 60 seconds to remove a line of code to make your site look profesional, I won't trust you with my secure information.
A large portion of web traffic would always be encrypted since many sites have some form of interaction and most traffic is on those interactive sites, not static ones. Without HTTPS everywhere (a worthy goal no doubt, but with HTTP2 on the horizon it's a pointless one), then users are comfortable seeing HTTP traffic anyway, so if I can pwn your router, I can receive the HTTPS and forward you HTTP traffic. This is especially true for static sites. 99.9% of users would be non-the-wiser. I get where the HTTPS everywhere goal is coming from, but there's many issues that have yet to be addressed before it becomes realistic (caching, cost for very low traffic sites, centralized CAs which have been known to leak keys to governments, to name a few), and I think by the time these issues have been addressed then HTTP2 will be very common anyway. Here's another interesting protocol if you haven't seen it knocking about: http://ipfs.io/ _edit_ Oh, another one that sort of freaked me out recently: I was discussing something with a CTO at a company where he mentioned that he decrypts users traffic at the router, then uses a custom CA in exchange, with the certificate distributed to everyone's desktop to re-encrypt. He logs all of the HTTP(S) traffic in and out of his office. In a company of ~200 employees, no-one has noticed. I'm not sure if that's legal or not, but it's scary.
Just use the lyrics from "Psycho Killer". ffffffff
What makes it special/unique?
Not specific to your project, but ... containers are an anti-pattern and typically don't help you achieve Dependency Inversion. Injectors are far more useful and worthwhile.
Why is that less secure? 
Extremely long passwords are a legit DoS vector. See CVE-2015-2936 for example.
It won't, this is just something I thought people would love to hear about.
Yep. Encode after hashing. `password_lock` version 2 uses `bcrypt(base64_encode(sha512($password, true)))` (pseudocode).
that's probably them trying to prevent sql injection, which is an incredibly stupid way to do so. Doesn't mean they don't encrypt, once it hits the server
I think the key statement in the top answer there is, "However, imagine that later the application retrieves your username from the database, and uses string concatenation to include that value a new query." I don't care where my database query parameters come from, I don't trust them. Using prepared statements with *all* parameters as external named paramaters will protect you from the attack mentioned in the top answer, and why wouldn't you do that!?
What's the practical difference between a container and an injector? My initial thought is that a dependency injector is just a container with `make($className)` tacked onto it.
Containers are simply a place to organize all instances of possible classes in your application. It's how you use them that can be an anti-pattern. Injecting the entire container into something and pulling out whatever you need is bad. Using them outside the instance of a class to grab the required dependencies is good. I haven't heard anyone call something "injectors" so I'm assuming you mean injection via annotations? Like: /** @var App\User\UserService */ protected $userService; There are containers out there that do this: http://php-di.org/doc/annotations.html This is all fine if the container can do all the auto wiring on it's own. But sometimes you need to manually specify a factory, or you want a service to be shared across all modules (database service). You can't achieve that without a container. 
An injector automatically resolves class dependencies by linking interfaces to concrete implementations. So when you have a constructor: class Foo { public function __construct(WidgetInterface $widget) { ... } } And then you alias the interface to an implementation: $injector-&gt;alias('WidgetInterface', 'AcmeWidget'); Now when the class is created by the injector, the correct dependencies are automatically resolved: $foo = $injector-&gt;make('Foo'); The key to all of this is that it works for your entire dependency chain, so it only exists in the outermost part of the application. The injector (should) never be passed into the application to resolve things later.
[Auryn](https://github.com/rdlowrey/Auryn) is a really good example of an injector that does not work as a container.
Nested? We have a 2 deep limit for nesting at work. If loops or conditionals run more than 2 deep then it gets sent back for refactoring. New devs hate it, but when you have to maintain half a million lines of code then consistency and simplicity becomes critical.
First problem: ContainerAwareInterface. There's no reason for any object to be aware of the container.
Are other tools limited to dictionary-based attacks like the one you linked to? If not, how do those work? 
Honestly I haven't worked with them a lot. As I've said, I usually just use it for messing with people. I've only had to use it in any other way once. To find some data on a website blackmailing me. I have no idea how it works, just that it does. I want to know how it works, but right now I don't have the time to focus on it. 
Every injector can be abused like that... what it doesn't let you do is alias classes to arbitrary things. ;)
Yep. They aren't sitting there manually moving between sites thousands of times a day looking for vulnerabilities. They are crawling with generic scripts and when one of those keywords pop up, you can bet there is an alert that says "Alert l337h@x0r, an older Wordpress keyword was found, hax away". Just better to hide regardless.
Good 'ol Bobby Tables.
That's a broad generalization of government as a whole but doesn't consider the vendors involved. Healthcare.gov was not even the White House but run through the division of Health and Human Services, contracted out to CGI Federal and subcontracted out many times from there: http://www.bloomberg.com/bw/articles/2014-08-28/all-the-companies-making-money-from-healthcare-dot-gov-in-one-chart The Drupal conversion was actually in-house and they even submit code back to projects as well as release their source on Github. It's very interesting: https://www.whitehouse.gov/developers GitHub: https://github.com/whitehouse
Sure there is. Lazy-loading factories for one.
You're actually only replacing line 27 through line 99, so the way you're currently handling raw is fine, though I would use "in_array("raw",$params)" in place of "$params[count($params)-1] === "raw"" so that you don't have to require that it be the final parameter. You could also use named parameters (e.g. if( isset($params['raw']) &amp;&amp; $params['raw'] == 1){ ).
Which gets back to my (indirect) point -- Auryn *is* a container. It creates new instances and can retain shared instances. (Aliasing classes is not a core function of a container.)
TBH you should be using separate passwords for all of your accounts.
Because a dedicated hacker could pierce himself with a spear and then hang himself upside down from Yggdrasil for nine days and nine nights to gain perfect understanding of the runes, and therefore your password.
Got that part done as a temporary fix. The issue now is that it sends from the server and comes up as one email thread. Looks like a proper implementation is needed to do what I want it to do. Thank you for looking through my code.
Will add this to my reading list. Thank you.
hunter2
Not everything is that cheap, but a basic cert is really cheap. https://www.ssls.com/
Do you use a library to measure the cyclomatic complexity, or is this just done manually during code reviews?
I have seen a real management/accounting application in php where the reports had the UserID WHICH DETERMINED THE CONTENT OF THE REPORT IN A GET VARIABLE. What do I mean by this? this: Shittysoftware.com/allyourfinancialreports?userid=56 Now, you're thinking: 'it could still be secure'. And you'd be right. But it was not... Saw my client browsing this site. Said 'let me try something' and popped in userid 57. Suddenly we are looking at (completely unrelated) company XYZs financials. No joke. Worst I've ever seen.
Look good, I'll give it a try for sure! Thank you very much!
I've had to use both as we mainly just use whichever the client is more comfortable, not necessarily VSO but TFS which VSO is built on top of. IMO VSO is a bit more straightforward to begin with but JIRA has a lot more depth of options and other integrations. If you use BitBucket for hosting your git repos definitely push for JIRA but if not I'd say it's 6 one way, half dozen the other.
Limiting information disclosure is not a bad way of thinking, and nobody in this thread said "limiting information disclosure makes you secure". It's in your best interest to do whatever you can to buy yourself time, and preventing discovery is part of that.
Well, the camera that can record a screen can also record your fingers. I can't even think of a form I've used that hides CC info as you type it. Seems deadly for conversion rates with little effect on protecting user CC info.
Allowing spaces doesn't enhance security... In fact, I disable spaces on a couple of my @mention-heavy sites to keep things simple. Nothing of value is lost.
VSO is making a bad tool even worse, Microsoft.net starts creeping and all of a sudden things only work on Windows, stay away!
&gt; Fucking morans. Is this a joke?
Hiding the CC info = higher form error rate = fewer sales. Not sure why we're talking about hiding CC form info though like it's industry standard (OP started it). I haven't seen it done once. Nobody does it for the same reason nobody gives a shit about putting their CC in the little basket that a minimum wage restaurant waiter is going to take into the back of the restaurant to pay their bill.
Wells Fargo isn't case sensitive. 
As a former PHP developer using only Sublime Text 2 I have recently joined a C#/ASP.NET MVC company I've grown accustomed to Visual Studio 2014. It's a great tool with a lot of power. - In addition to coming on to the company we initially used Trello to keep track tasks, and our weekly sprint. We recently switched over to Jira and it's great if you use the Atlassian atmosphere. It links your Stash commits, and let's you know what branch it is in.
"Recover password" instead of "Reset password"
Hi. I'm game!
You would want to use an abstraction such as [HttpFoundation](http://symfony.com/doc/current/components/http_foundation/introduction.html). Among other advantages, it can provide easy access to filtering, prevent your code from being littered with isset(), and make testing much easier.
http://knowyourmeme.com/memes/get-a-brain-morans 
If it says "Wordpress" you should contact them and nicely let them know that WordPress has a capital P. 
When an Australian Government official advises you "we cannot accept credit cards online as payment gateways do not meet our high security standards. Accordingly, you must email us your credit card number, including CCV".
&gt; WordPress will continue to work with hosting providers to encourage them to upgrade their users to a current version of PHP &gt; We’re seeing ~1m sites upgrade per quarter from PHP 5.2 and 5.3 to later versions. That's a pretty awesome number and I applaud them for spending resources to help fix this problem.
Yeah. Not sure what the rules were for posting. I didnt want to make it seem like a full time job offer. I also didnt want to make it seem like we are asking for a free handout from someone's busy life. If youre interested ill send you a PM like the others.
sent PM
Not really. The difference between Jira and Trello is like the difference between an IDE and a text editor.
&gt; the correct dependencies are automatically resolved Well... the correct dependencies are resolved only if there's one single possible answer (singleton dependencies). If you have two per type, or more, "automatic" goes away. Think if it's a smart idea to assume everything needs only one instance. We've made this mistake before.
Yep that's right. Roughly the same way /u/sarciszewski described here: https://www.reddit.com/r/PHP/comments/3k7awx/what_screams_insecurity_to_you/cuvw10j (as *password_lock* is using SHA-512 it is not enough to go with hex-encoded hashes thus the hash output is base64 encoded so that it fits to the 72 byte limit).
All passwords have a maximum length. Suoshin won't even let anyone submit more thank 4096 in a POST field on my site.
Well, I find it sufficient for my needs during development. Which is: working on sprints/tickets without the need to open JIRA. Git changelists are created as you open ticket (or as you said alternatively you can create a branch) ...and when as you close the issue it logs time, commits, adds comment with issue number, and ticket name. Before, I would have to look at the ticket number in JIRA, do a commit (and pass the comment ID so that JIRA can track commits), go back to JIRA gain and move ticket from "in progress" to "finished" However, when I plan sprints, create issues/tickets.... then I do use JIRA (Agile/Scrum). So in that respect, yeah I only use is for referencing during developemnt, and I find it more than enough
My website actually uses salted md5 hashing for password storage but I put in bold characters that passwords must be less than 72 characters because it makes would-be hackers think they are just going to see bcrypt hashes. Never been hacked once.
I have a website that accepts spaces. I've been meaning to disable that but I'm too lazy and the site isn't supported. The problem is people who put spaces in their usernames tend to be the dumbest of the dumb. They sign up and 5 minutes later they've completely forgotten their username and accuse me of deleting their account. And yes I've verified login with spaces works. One guy threatened to report me to the FBI because he'd been using that name for years so it was legally his.
Do do splam
I know.. but I thought they at least arrived in the early PHP5 days (which were 11 years ago).
That's *"using Drupal and proud of it"*. They actively contribute, too. https://www.whitehouse.gov/developers
&gt; It's also hideously slow This is the pain point that made us not purchasing after the free trial. Every single click you have to wait for the page to load and it seems to take forever... I'm not sure why because other tools like bitbucket are fast enough.
It'd be fine assuming your login form locks people out after X tries, then completely locks the account after another X tries. Otherwise you'll have bots constantly hammering the form trying to break in. With little wordpress sites you should at very least move the login form URL and install a 'hide wordpress' plugin to make it even just slightly more difficult for automated bots to find your login forms.
The problem isn't the actual security of the application but what the statement implies. An organisation the refuses to make their code public for no reason other than being worried about people finding insecurities is likely to produce bad code and unlikely to fix holes promptly.
I'd assume bad indexes in their DB schema. But seeing as it's closed-source and I don't feel like either ripping apart the jar file or running tracer tools on the database to figure out, meh. Yet another reason I like Phabricator - not only is it open source, it has [SQL profiling tools](https://secure.phabricator.com/book/phabricator/article/darkconsole/) built-in and various guides about how [to not write stupid queries](https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/)
Always sanitize your data, period. That goes for both directions, meaning don't trust stuff from your database either (depending on what you're doing with it). Prepared statements help against the majority of SQL injections. The recent Magento security issue [shows a way](http://blog.checkpoint.com/2015/04/20/analyzing-magento-vulnerability/) how to still inject SQL. There is a lot to be learned from from the analysis of this attack.
That's just the core. There is absolutely nothing put in place in the plugin marketplace to be able to flag what version a plugin will work on or requires. The number of error reports I have had for plugins (requiring PHP 5.4+) from people who say, "it doesn't work", and for who it turns out have ignored the stated minimum requirements and installed on their PHP5.2 host. They really need to fix that. The PHP version is right up there in the *requires* section of composer libraries, and never turns into an installation issue because of that. WP? Always an issue.
Sending from someone else's server takes away a lot of pain. There are free options around from Mail Chimp, Mail Jet, Google, and a bunch of others. If you don't, then you need to set up DKIM, SPF etc for your domain pointing at your server, but then you are still vulnerable to someone else getting blacklisted on the block of IPs your server is on, and affecting you. We just outsource that problem now, to a third-party SMTP server. As for your single threads, that's an issue with your mail client.
Yeah, absolutely horrible. Reading the developers comments on the topic, there's no change of that in sight. They even insist on still supporting old unsupported PHP versions.
containercontainedawarecontainer 2015©
TBH, if they could just simply put a proper database schema together I'd be happy...
That's a definitive sign of JIRA being incorrectly configured, it should be snappy.
For task management it doesn't really matter what you use. VSO and JIRA are both up to the challenge. Although I really don't know why switching away from Redmine is necessary. If anything I'd use what other people suggest, Phabricator.
Thanks for the quick response. Yeah, that's not as exciting as I was imagining.
i'm pretty sure we used one of the default workflow they provided. So it's a definitive sign that defaut configuration is incorrect?! ;) From my perspective, it just seemed that the servers were the other side of the world. Like you click, you wait a second then the page loads, compared to other services where you click, you don't seem to wait and it loads right when you click (including other Atlassian software like BitBucket, which work fine).
phpdevster knows only PHP, and is therefore unable to compare languages, and his/her opinion is completely irrelevant on what languages are good and bad, and how they affect overall productivity. I have never seen anyone who knows more than one language defend PHP as "perfectly fine". "What do they know of England, who only England know?"
I don't think using up to date software is something that should be applauded. It should be expected, and demanded, particularly if you're paying for it.
This is because the file needs to be read, to be executed - it's a series of commands run by the shell. The `#!/bin/bash` (or whatever) at the top just means, "Execute bash and feed these commands to it" - if the commands can't be read, they can't be executed.
&gt; Any *NIX system make it easy to create execute-only programs I wouldn't say it's very common knowledge to create compiled, execute-only programs. Shell scripts can't be execute-only.
That's a simple and obvious point which I completely overlooked. So how would one go about creating an execute only program?
Or my personal favourite: https://github.com/shrikeh/teapot
We use JIRA and love it. The Atlassian plugin for phpstorm is quite handy also. 
Ditto. JIRA + Confluence + Fisheye, etc. has some really nice integration, and the Atlassian phpstorm plugin means you can do almost everything you need to from within phpstorm. 
My (and oauth2-server-php) interpretation: The client_id must always be present. A client might be public, and have no client secret, but there's always a client id. The [oauth2-server-php](https://github.com/bshaffer/oauth2-server-php) library shows this in their tests: https://github.com/bshaffer/oauth2-server-php/blob/develop/test/OAuth2/GrantType/UserCredentialsTest.php
I have found Beberlei/Assert (https://github.com/beberlei/assert) to be really useful. I use this library to validate method parameters. It has helped debugging SO many times.
I just wanted to submit an issue for that. Gave up.
we don't have an app for a smartphone it is just a reactive website. If we had an app and great idea...we would just get slammed down by a corporate giant currently in the industry that wants to take it. The patent at least protects us by threatening them with back pay on royalties if they implemented our system into theirs.
you can connect both through their api. Jira has more integrated stuff, but not working well. project-1231 #done #comment squashed. the point will close but no comment will not be added in jira. I didn't not really try to link git and trello, or trello and jira, so I won't comment. at worst there is zapier&amp;co. And there is [stuff like that](https://trello.com/b/WRjUiL4R/testing-trello-github-integration)
California DMV tells you to just re-register with the same email address.
Oh, btw there 1 thing that drives me **crazy** with jira: the {code} markup is blocked on the cloud version. Looks like these fuckers are unable to prevent template injection attack another way. This is supposed to be the best fucking tool for fucking programmers. Are you fucking kidding me? /rant 
Here is my list: https://github.com/Zolli/BuildR/blob/master/src/Http/Constants/HttpResponseCode.php
It needs to be compiled unfortunately. I don't think it's as simple as /u/terrkerr made out. (Depending on your definition of "simple".)
I understand that WordPress doesn't break BC. This is fine for an LTS version, but trying to introduce new features without dropping old code/requirements leads to increased software entropy. This in turn leads to a less maintainable code base and the increased likelihood of bugs. Has the idea of a long term support (LTS) version of WordPress been considered as a way to allow changes to server requirements for new versions? Many other projects mange the overhead of having a LTS version and a "latest" version very well. The LTS version would for example continue to get security and major bug fixes. 
Banks use strong encryption for that. Not really an excuse, but it is more secure than plaintext.
Oh no, i know it's messy don't get me wrong, the fact they have unused fields from years ago for compatibility reasons is stupid alone. I was just looking for some insight into building databases from the ground up and keeping it organised. Thanks though.
An LTS was tried years ago with 2.0 (before I was a core contributor) and from the stories I've heard, it became a nightmare. Backporting fixes became so complicated that it would cause security releases to be pushed back (which endangers people running every version). It would be much better to get to a point with auto updates that they could be enabled by default for major versions. It's not there yet (and not going to be any time soon), but the day will come that the vast majority of people won't know or care about the version of WordPress they are runnning. It will always be the latest. Features do get removed from WordPress, it is just a slow process. Rather then a five year break to rewrite WordPress from scratch, instead the process is to rewrite pieces over time as the features dictate it. For example, over the last few releases there have been underlying changes to the taxonomy system to improve the DB architecture, improve performance and make future enhancements possible. It is happening over multiple releases so that plugin authors have as low of an impact as possible and so there doesn't need to be a big break in comparability. 
Hence the term "pre-optimisation is the root of all evil"...
We use Jira at work. It works wonders with bitbucket and confluence.
Looks good :)
Well sure, but what relevance does that have in this case? A blogger is paying a web host, who should use an up to date version of PHP, but isn't. Wordpress is reaching out to that host to encourage them to upgrade because, presumably, the customer doesn't have the knowledge or drive to do it themselves. 
Given that you're a contributor to Wordpress, perhaps you should refrain from commenting on criticism if you can't do it without snark. It only reflects poorly on you and the project.
To be fair, plugin developers can check the version of PHP themselves and any other requirements. It's been a long time since I've touched a WP plugin, but I'm sure there are activation hooks where those checks can be made.
I'm assuming Jira is the IDE and Trello is Sublime.
Still trying to figure out why the Joomla configuration is a class file and why.
What does that have to do with the terrible architecture on the code and the database? I don't really mind though, because I make good money taking over hacked, incomplete, and/or plugin-hell Wordpress projects and migrating them to better solutions. Kudos.
Check some opensource code: https://github.com/search?q=PHPixie&amp;type=Code&amp;utf8=%E2%9C%93 
I will fix that.
Even ignoring that the comparison of the big three shows me something about their code. Brings me to want to ask about which one of those is better?
What adrian is describing is what PDO does. It does use common classes that allow you to interact with any database, but each individual database supported is still added as a seperate database driver class that implements a common interface that PDO interacts with. Creating a mess of switch statements is far more complicated than creating one interface, and then sorting out filesystem-specific logic into separate classes. Organized code is easier to maintain, giant lists of switches are not.
It seems like an unusually large number of members have abstained from voting. I don't see the utility – can someone provide some context?
Why is Joomla 1.5 even mentioned? It was [End-of-Life'd three years ago](https://docs.joomla.org/Joomla_1.5_version_history). Also, the CCK name is already used by Drupal's [Content Construction Kit](https://www.drupal.org/project/cck), which was a must-have in D6 and was mostly integrated into Core in D7...
&gt; Personally I'd rather have each middleware in a separate package (except if 2 middlewares are very very similar). Some of those are less than 10 lines of code (when we strip the boilerplate). Some will come alone in a package, some won't be. It doesn't matter, you load what you use. &gt; What's interesting in your approach (at least for me) is making extensive use of request attributes to store additional info related to the request (I mean other than the classic route path parameters): language (with language negotiation), session, etc. [...] I'm wondering if it's a good solution in the big picture because of risks of collisions, and also weak typing, but that's still an interesting idea. Yup, bad idea. It's $GLOBALS reinvented. Give a PHP programmer anything at all &amp; they'll reinvent $GLOBALS in it.
Here (check the line that says "Update"): http://blog.jetbrains.com/blog/2015/09/04/we-are-listening/
Even if you don't like OOP, your solution is bad, because it repeats the switch in all methods. There is also an unused argument in the constructor, a typo in the exception, the project and the main class have a misleading name and it's missing comments.
&gt; sustenance It's "substance", BTW. Unless you intend to literally print the article and have it for breakfast.
That statistic is embarrassing to the rest of us. WordPress is what finally pushed me out of PHP, with a promise never to return.
I own about maybe 10 pixie related repos You could also check packagist installs for phpixie/framework
I use a mix of my own ([Bldr](http://bldr.io)) with NPM. Bldr runs all my code analysis, and runs npm. npm compiles my assets. Doesn't really matter what you use, just use whatever you are comfortable with.
I use Atlassian Bamboo. for $10 it's really hard to beat! it can do pretty much whatever you want. even deploy and roll back
Oh, I just assumed you meant the self-hosted version. If a self-hosted install of JIRA is slow then something is wrong, typically the DB or not enough RAM to chew through on the app server. Atlassian-hosted JIRA, well I have no idea.
I am a big fan of simple Makefiles, I have been bitten a lot by build systems that come and go. Then just use one/two liner targets to call phpunit etc...
Well rather obviously. Things using framework as a dependency are end products, not libraries. Why would they be on packagist?
We use make with great success. There are no real advantages but also no real downsides (like depending on another language/stack). It works and is generally easy enough to be picked up by new developers. Less Fashion, more stuff you don't have to worry about.
I once used file-based databases. Race conditions will totally destroy it if you're not careful.
Maybe I eat articles for breakfast... hm... :)
I noticed both implement the 418 status code.
Underrated comment of the day. It certainly won't stop you from using more sophisticated build systems and CI tooling, but has almost 40 years of doing what it's supposed to do and is ultra-portable and easy to invoke. .PHONY: composer deps unit composer: composer install -o deps: composer # cssmin, jsmin, etc unit: deps vendor/bin/phpunit . Plus you can build a good chunk of your deployment-related stuff into there as well (version numbering, etc).
At EllisLab, we used to use Phing, but just recently switched over to Gulp. Our build script might be a bit more complicated than most: - Bump the internal version numbers - Check for the existence of certain files - Make some small changes to specific files - Lint the PHP - Compress the Javascript - Delete specific files - Build the application file - Build the documentation Our previous Phing build script took roughly four minutes to do all of this and our Gulp script clocks in under 45 seconds. We don't run a whole lot of builds, but the speed is nice. The true advantage is not having to write this stuff in XML.
I understand, I'm just wondering why members of a relatively small group would rather abstain than meaningfully participate in the voting process for a new member. By the way, congratulations :)
This is what OP is looking for. It's built on react and is the thing to use for IRC with PHP.
It's probably bad form to call it before the required 2 week voting period. There's nothing preventing those who have already voted from changing their votes before the 2 weeks is up. It looks like PHPixie is probably going to be in, but definitely not "the point of no return" as far as the voting process goes... :)
How so?
Because those are "products" written in PHP that could be deployed by someone who has never seen PHP in their life (like a sysadmin for example. Whereas PHPixie is a PHP framework (or Symfony, ZF, Yii, et al) written for developers for creating a product.
They all just copy the list from Wikipedia or httpstatus.es, both of which include the obscure/joke/proprietary stuff.
Its the PHP Framework Interoperability Group. I understand that non-framework projects are members due to their following and size, but PHPixie is a framework, hence my opinion. My comment was in regards to folks discounting PHPixie's relevance and **not** to disparage Drupal, phpBB, etc.
Members can be evicted for not participating in enough votes, even if they don't care about the topics. +0 can also mean "I'm here, and I don't think it's such a bad idea that I would -1 but I also don't care enough about it [or have some reason not] to +1"
saying something is more deserving than a specific thing, definitely disparages that specific thing.
I actually built a [makefile](https://github.com/morrisonlevi/Algorithm/blob/master/Makefile) earlier today that builds a phar from the repository and also allows you to run unit tests. I'm a really big fan of Make. I highly recommend using it.
Ok. I certainly didn't mean it that way and I should of just said congrats and left it at that.
maybe learn polymorphism next
What do you think makes it faster? Just curious. Never used gulp. We use phing. 
My honest opinion is that PHPStorm is a great product. I've renewed 3 years in a row. If they change the licensing, I'll still be buying it, because I can afford it, and it makes me more productive.
&gt; definitely disparages that specific thing That is "definitely" not true.
Is that a DSL based in XML? Oh HELL no
Verbose, but on the flip side you've got great pre-built tooling for validation, highlighting, autocomplete, and even automated refactoring :P
Refactoring as a service? I'm way behind the cool kids, it seems. But then again, I use vim exclusively.
I agree. It is fantastic. I have no issue with paying for software, that'd be stupid if want others to pay me. But i'm not going give up my right to use my existing versions, no matter what. So unless there is a perpetual option i'll most likely buy v9 and start looking for an alternatve. It still gives me a year or two.
We just write our own build scripts in python. Worked great on my current project for the last ~2years. Python argparse provides nice help texts for the users and python in general is very nice for writing tasks/actions in short intuitive lines.
I'm not whining, and they should definitely do what they think is best. The problem for a lot of businesses is that they will very rarely know what disatisfied customers think because, contrary to what it might seem, in most cases by far they'll just leave you without a trace, and you have no idea what hit you. The current uproar is a testament to the quality of phpstorm, their customers care enough to not just silently move on. So while probably shocked they should be happy.
NetBeans complains about too many nested blocks by default. I assume other IDEs have a similar feature.
Actually Im still in the process of writing docs for v3. I finished all the imprtant ones like orm, database, etc. Slice is a data representation libraty used for configuration, and if you use the framework directly you never touch it yourself, thats why its further in my backlog
This article: http://www.openwall.com/articles/PHP-Users-Passwords is solid reading (you may want to skip some paragraphs). You may also find useful links (regarding passwords and general app sec) from https://github.com/paragonie/awesome-appsec And if you are curious, there's this **20 year old** post on Bugtraq: http://seclists.org/bugtraq/1995/Apr/143 where [Steve Bellovin](https://twitter.com/stevebellovin) describes a "password hashing algorithm". And interestingly, the password hashing basis' are still the same today (20 years later). For more recent info on the password hashing schemes, see https://password-hashing.net/
Yes.
They better not be encrypting. They better be using a 1-way hash.
The thing is $GLOBAL is global state. Here we are talking about storing request data in the object that represents the request. It's very far away from global state because it is exactly the opposite: local state. A request has one user, one language, one… So when you think about it, where's the best place to store request related stuff: - global variables - the request itself While I understand the point you were trying to make, it sounds excessively dramatic.
It's not PSR-7 but it was made possible by PSR-7: you can write generic middlewares because its only dependencies will be PSR-7 (so it's framework agnostic).
Websites which offers to resend me my original password if I forgot it. That indicates that they are most likely storing the password in plaintext
This used to be true. But bcrypt (PASSWORD_DEFAULT in password_hash) has a limit of 56 bytes. http://security.stackexchange.com/questions/39849/does-bcrypt-have-a-maximum-password-length
Interesting, I barely started to read about custom session handlers, and I have no idea on how one would implement them. I sure love the possibilities though.
There's usually a file called CONTRIBUTING.txt or CONTRIBUTING.md in a repository, where you can be very specific about matters like these. I'd recommend to keep per-file comments as short as possible. The license is needed per file for legal reasons, and the author is needed per file for practical reasons (in a big project, not every file has the same authors).
A slightly related question. If using PDO with prepared statements, is it still best practice to escape user input, or is that redundant?
Excitements :-) .
While it doesn't help define which standard to use, an [editorconfig](http://editorconfig.org/) file that matches goes a long way.
A session is nothing but a key-value store, and a place where to put the key for later (usually a cookie). If best to keep those two decoupled (it's not always a cookie). I think the session handler as done in PHP already betrays how a session works internally, but if something is unclear about how'd one implement it on their own, I can try to offer some explanation.
I always use Ant, simple and easy to use.
Actually it just occured to me that none of the people who voted -1 (Evert and Kayla) voiced their objections beforehand in the discussion thread, or even provided some reason for their decision. Would be really interesting to hear from them
The route parameters are tricky. They're not request info, but you pretty much always have a router, and it's typically quite early in the chain, so you can assume they're there. It's ok by circumstance, but it's still a bad separation of responsibilities. Imagine PSR-7 had this: interface RoutedRequestInterface extends RequestInterface { function getRouterParams(); } Having both Request and RoutedRequest, now your middleware can communicate via a type-hint whether it's capable of running before a router or not. The interface also explicitly states those are router params, and not just a bag of properties anyone can add to. I don't know. Obviously the above interface is not part of PSR-7, instead they chose to add a wildcard in the form of general purpose attributes. It's what it is. I hope people will have discipline when using it, but I doubt it (case in point, OP's middleware). In my apps, I keep request and response strictly for HTTP data. Anything else, including router params, are passed as separate parameters, and this process is orchestrated by the caller. And when I want to pass a request to another party outside PHP for further processing and I have extra data, I use X-Something headers.
https://github.com/pagekit/pagekit/blob/91d06369914dc4e246f60d9398f8e34c8b9ff6d2/app/modules/auth/src/RememberMe.php#L191 Seriously? SHA1 of sensitive user data? https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence Also, check out [Gatekeeper](https://github.com/psecio/gatekeeper), which implements the proposed model of secure long-term authentication.
At work we are preparing to move from file-based sessions to something like Redis. I read about the first half and skimmed the rest – I'll be coming back later to finish it properly – but this line really stood out: &gt; Good luck. Thanks. I might need it.
Wow. I am super impressed by the interface and installation process. I'm used to being asked to edit tons of yml config files when it comes to symfony projects. The only thing I can put my finger on browsing quickly through the admin panel is I'd like to see a list of widgets associated with the page I'm currently editing. It was not apparent to me that the home page had the hero image setting, but the text on top of the hero image was a widget. The use of HTML and classes in the editor is also a bit off-putting, but I suppose that's up to the theme being used. I hope some sort of WYSIWYG or markdown editor tab will be available in the future, though.
Thanks! Definitely trying it now!
I don't think they'll go through with the new scheme, given the outcry. I usually use the EAP anyway, so my license doesn't matter that much.
I also go with the EAP (except too many issues with v9, so on v8 right now). I think the loss of perpetual applies whether you're on regular or on EAP. Actually it would seem going EAP from v9 could be equalent to using v10 thus losing perpetual already. But it's all a bit unclear.
That second link -- the entire section about Account Recovery is....crazy, right? &gt; Password reset features are a back-door. For many apps and services, they are inappropriate and should not be implemented. Wat? *Every* site that requires auth is going to have people that lose/forget their credentials. Their "recommendations" are extremely unhelpful too; boiling down to "don't" (not helpful), "security questions suck, don't use bad ones" (ok, what are good ones), and the real kicker, "ask people for their public key". Yes, _that_ will help the 0.000001% of the population that both doesn't have a password manager _AND_ also knows/uses PKI.
I kinda dig the google mail policy, that spaces, dashes and stuff like that don't count. either you use them or not. your choice, but all translate to the same basic address, which is your address. so, a user 'user_name' can also log in as 'user name' or 'username' or any other combination, while other users cannot fake his name. I think that's quite practical and helps the memory-impaired to find back into their account easier. 
Yep, the same happened with adobe. And now? I bet they are pretty happy and user numbers are increasing every month.
I was referring more like creating custom themes and customizing WP rather than rolling a new CMS from scratch.
Personally, I'd rather not be part of the problem.
I think you are missing a bootstrap file for your tests. You need to load the classes somewhere, right?
Exactamundo. Composer's autoloader doesn't do much good unless it's included.
Nice makefile, so thanks for sharing that. Personally I prefer to use [Tup](http://gittup.org/tup/) these days but I am a big fan of both it and Make for their bare-bones simplicity relative to more specialized build tools that are popular nowadays.
What's the point of Magician? It's just a wrapper of Symfony Console, why would I use Magician instead?
bundles/packages != a private website.
I'm 9 seconds short on my next deadline and this will save my ass. Thanks!
Yeah in bamboo you need to realize that you've got two parts. Build and Deploy. It's really not hard once you understand that an "agent" is the thing that does the work, so you add capabilities to your agents and then use those capabilities to create your build job. So you make your build job, and you make your deploy job. I've got mine set up to automatically build when I push to my git repo (which runs from stash btw) then when the build is done without any errors I can deploy. I don't do automatic deployment, but you can if you want. Also it integrates nicely with Hipchat which is free... I use it to notify me of successful builds, failed builds, and deployments (start, finish, fail) This might help you out https://confluence.atlassian.com/bamboo/understanding-the-bamboo-ci-server-289277285.html
&gt; Security questions should be avoided entirely It's how [Sarah Palin's email was hacked](https://en.wikipedia.org/wiki/Sarah_Palin_email_hack) during her '08 campaign.
Happy cakeday /u/dracony!
Because unlike a password (which is provided by a human and typically has low entropy), a token is generated by a CSPRNG and, in our examples, has 256 bits of entropy. The reason PBKDF2/bcrypt/scrypt are used for passwords is to slow down brute forcing of low-entropy inputs by making each guess expensive. Brute-forcing a 256-bit token is not practical, even with all the energy of a supernova. Totally different threat models. A fast hash is appropriate when you can guarantee that your input always has over 100 bits of entropy, or 200 bits if you're worried about post-quantum cryptography. Ask /u/ircmaxell for his perspective here too.
And only 22 of them(less than half) not owned by dracony or PHPixie lol
Thanks, after checking the math, that makes a lot of sense. I'll keep hold of my general rage for this (where $token is stored plaintext or hash($username.$password.$pepper)) but that doesn't apply to your blog post or gatekeeper. Sorry for the time wasting.
* [automagic playlist for videos](https://radd.it/r/PHP/comments/3kklt5/vids) in this post *^Comment ^will ^update ^with ^media ^shared ^in ^comments.* *^Downvote ^if ^unwanted, ^self-deletes ^if ^score ^is ^0.* [^about ^this ^bot](/1vjdw9) ^| [^recent ^playlists](/r/radditplaylists) ^| [^plugins ^that ^interfere](/1m21ku)
Hi, I'm the creator of this library, was reading the comments and I found a lot of interesting things. I know that the request attributes are a bit tricky and even I opposed them when this was under discussion (I'm not a member of psr, but I'm subscribed to the mailing list and sometimes write my opinion). But now that it's approved and released, well, its a good place to store stuff related with a request that is not header or body. If the life-cicle of a session, language preference, format, ip, etc is stored into the request, we can create an application where various requests (users, languages, ips, etc) can live toghether. For example: $user1 = (new ServerRequest())-&gt;withHeader('Accept-Language', 'en'); $user2 = (new ServerRequest())-&gt;withHeader('Accept-Language', 'gl'); $response1 = $app($user1, new Response()); $response2 = $app($user2, new Response()); This is not possible (or not elegant) if this information is store in the app (or any other shared object), due possible conflicts. But I'm agree about globals, naming conflicts, etc. If the format is stored under the `FORMAT` attribute name, no other attribute "FORMAT" can be created or the previous will be override. So I'm changing the library to store all this information under one attribute key (by default `_MIDDLEWARES_` but it can be changed). So, the format value is stored in `$format = $request-&gt;getAttribute('_MIDDLEWARES_')['FORMAT']`. Obviously, there's a more elegant way to get it: `$format = FormatNegotiator::getFormat($request);`. Maybe the best way to use the attributes is not using them directly but with helper functions. So you don't deppend of a key.
Right, that makes sense, thanks! My question more pertains to the interface of the middleware itself: AFAIK, there's no standard as to its signature, even if it is only working on PSR-7 components. So ultimately it's still somewhat bound to a specific framework/codebase/etc, although it's probably quite easy on average to write adapters.
While drupal, phpBB, etc are more applications than frameworks, I feel they stand to benefit just as much from FIG standards, because they can still benefit and benefit from the framework ecosystem. For example, PSR-4 saves allows them to open-source components without worrying about compatible autoloading mechanisms. Or Drupal might open-source an exciting PSR-7 middleware ~~that allows you to write entire modules as part of the request header because that seems like something they would do oh god help us all.~~ 
Right now there is no standard for the middleware *signature* (I'd rather say signature than interface to avoid confusion because since a middleware is a callable, it can be a function which cannot implement an interface). However the signature `$request, $response, $next` is the same for Slim, ZF Stratigility/Expressive, etc. so this could become a future PSR (and that's being discussed on the FIG mailing list). &gt; So ultimately it's still somewhat bound to a specific framework/codebase/etc Not really (or I'm misunderstanding you). Since a middleware is only coupled to the PSR-7 request, PSR-7 response and `callable $next`, it's not coupled to a framework, it's only coupled to PSR-7. For example a "cache middleware" should work with any framework that works with such middlewares.
[This Reddit post from earlier today is chock full of architecture conference talks.](https://www.reddit.com/r/PHP/comments/3kklt5/18_mustwatch_php_architecture_talks_13hrs/). Maybe it will help.
I just meant that because there isn't a common signature, they're not really portable. I don't use any of those frameworks so I wasn't aware there was some sort of informal standard. Thanks for clarifying. Edit: do you have a link to the FIG discussion? I can't find it on the list :/
Oh cool. Totally missed that one. Thanks, will look into these videos when I wake up tomorrow! 
Oh, right, I got my wires crossed here. I did that for a StackOverflow answer and forgot to duplicate it in the article. Thanks for letting me know. :) EDIT: Added example code.
This subreddit really hates /u/dracony, yikes.
Looks bad-ass.
lol
You have $user = $_SESSION['ID'], this is where the problem is coming from. With an array of the value isn't set the index doesn't exist, so this is saying there is not key called ID therefore can't be a value. You could check first to avoid the problem: $user = array_key_exists('ID', $_SESSION) ? $_SESSION['ID'] : null; This will use the id if it exists, otherwise it'll set user to null.
Multiply that by 10, and maybe I'll take a look at it. 
How is this any different than server side includes or any templating engine?
Yes, when it comes to make some service for citizens in U.S. you have to meet some obstacles made by your government. But thankfully I'm not a U.S. citizen, since I am from Russia, we don't have regulations for payments and when I want to write a payment service for a Russian company - all I really need is Bitcoin's API - because all of our Russian National payment systems are compatible with Bitcoin (because they have programmable qualities in common: payments are irreversible - no chargeback or payment cancelling is possible, and there's a minimum of government intervention). For example if I want to start accepting payments for any Russian web-site, customers in Russia probably gonna need some familiar way to pay (not Bitcoins, because they are very unpopular, but good for programming purposes) - and as a programmer now I can offer them QIWI/Sberbank.Online/WebMoney/Yandex.Money - this 4 payment systems are accepting national currency - **rubles** so I usually flawlessly get things done using PHP scripts based on mentioned in a link **Blockchain API** in order to process payments from those 4 payment systems which are automatically get converted into Bitcoins, and when the owner of web-site wish to redeem funds received from his customers, he goes to my exchange and do it flawlessly with a smooth PHP interface written by me. Basically this stuff lets me perform any smart financial operations on the web-site by knowing only 1 programing language (PHP) and by knowing only 1 payment interface (blockchain api).
If your IDE doesn't understand that after `$var instanceof DeletePostPolicy` the variable `$var` is guaranteed to be `DeletePostPolicy` you should consider another IDE (or contribute the feature if you are feeling adventurous).
&gt; Best Book on PHP Security Security what? No such thing in PHP
If their support was worth a damn then it might be. Instead they're useless so a rental plan offers no advantages. 
Yes, almost. But also a lot simpler and works in every language. HTML server components actually define only one custom HTML tag (&lt;component ... &gt;). One of the great benefits is that there is almost no learning curve. We already know how to build HTML documents. Now we can also merge them to produce the final result. There is a demo at [GitHub](https://github.com/ivopetkov/ivopetkov.github.io/tree/master/demos/html-server-components) that could be useful.
Why stupid? I think it's simple but can be useful.
**tl;dr** This is a templating engine. It supports components, which is like template inheritance, but you can use it for snippets within the template, not only the whole template. It's a good idea, but not new. --- I used to do that few years ago, but I've since realized this is just a fancy syntax for calling functions, so I dropped the custom parsers, compilers and so on and went back to simpler means. Replace "component" with "closure" and "attribute" with "argument" and there we go. One thing the article doesn't show is a way to grab template content and pass it as a parameter, which is important when your component has a lot of content inside it (parent layout, panel with a lot of content etc.). This is very suspicious, because the provided example was a good opportunity to demonstrate it. Instead of it being: ...html... &lt;com "header" /&gt; .... &lt;com "body"/&gt; ...... &lt;com "footer"/&gt; .... html... A more logical design is: &lt;com "layout" header="...." body="...." footer="..." /&gt; Well, obviously not as *attributes*, but you get my point. For functions, this is possible to wrap very neatly as a utility that uses ob_start() in a couple of dozen lines of code, and looks like this: &lt;? call($componentClosure) ?&gt; &lt;? param('foo') ?&gt; &lt;b&gt;Hello world&lt;/b&gt; &lt;? endparam() ?&gt; &lt;? endcall() ?&gt; This is the same as: &lt;? $componentClosure(['foo' =&gt; '&lt;b&gt;Hello world&lt;/b&gt;']) ?&gt; Obviously you'll use the first syntax only when passing large blocks of HTML, possibly partially dynamic (i.e. with PHP code in them, including other component calls). 
It's not stupid, but I think part of the reason for this reaction is the way this is positioned. First, it's not initially clear this is about templating. And second, the idea is not new. Someone gets ready to discover a new architecture for websites, instead they discover an old, albeit rarely implemented well, metaphor for reuse in templates. Also, I think you should rethink using filenames as your component name. One component per file is very, well... retro. One should be able to have a library of components in one file, and define a component to use in the file where they'll use it.
&gt; Blackfire is not a single piece of software running on your server or browser. It consists of five parts. These folks really have a knack for making their product appear more hassle than its worth. You need exactly two "parts" in a profiler: - server part - client part Branding every nut and bolt only makes Xdebug (with all its glorious one parts) look even better in my mind. Even if I have to do horribly complex stuff like grab a file off my servers manually. This article shouldn't exist. It should be a two-paragraph note in the documentation and it should be obvious how to "use Blackfire for production environments" without all these detailed explanations of your licensing terms, business models, marketing efforts, privacy policies and analysis of the Blackfire architecture. I'm just being frank. Yo wares be scary, damn.
Maybe the following example will help better understand the difference with template engines. The [carousel component](https://github.com/ivopetkov/ivopetkov.github.io/blob/master/demos/html-server-components/components/carousel.php) is rendered inside the [body component](https://github.com/ivopetkov/ivopetkov.github.io/blob/master/demos/html-server-components/components/body.php) with this HTML code: &lt;component file="components/carousel.php" margin="10"&gt; &lt;div&gt;1&lt;/div&gt; &lt;div&gt;2&lt;/div&gt; &lt;div&gt;3&lt;/div&gt; &lt;div&gt;4&lt;/div&gt; &lt;div&gt;5&lt;/div&gt; &lt;/component&gt; As you can see the carousel requires 3 external files and renders html and JavaScript code. All this elements are handled by the compiler and put in their proper places. This way you don't go to other files to load the dependencies. And they are loaded only when really needed (there is really a carousel on the current page).
http://i.imgur.com/tqKenRj.jpg
I saw this talk a few weeks ago. It was wonderful
Awesome talk. The only problem I have is at the end with CQRS and event sourcing. It sounds really good at first but it feels like input validation as you need in a clients-server architecture will run headfirst in race conditions and you could end-up with validated commands which should not have been.
Getting better at systems architecture involves more of understanding tradeoffs than the search for the perfect system, in my mind. The way I have learned the most is by working on larger projects with people smarter and more experienced than myself. Discussing design decisions with others and seeing how different choices affects the product farther down the road. And then gradually taking on more responsibility for systems design. This, along with plenty of time between projects to work on my on stuff and really dive into things I find interesting, is the best combination for me.
Agree with you on this. Thats why I would love to read up on the subject. ANy books suggestions?
&gt; you don't need the interface (as you can not typehint against it). I'd go further and say that the interface is just a bad idea in this use case. It's giving an illusion of a type when it doesn't really exist. There is a use for generics in languages, but they almost all involve making stuff easier to reason about. Abusing them, like in this example, to make stuff harder to reason about is not a good idea.
"leadership of open source PHP projects are ignorant", as demonstrated by a blog post by the Drupal project lead written in *2007*. Cheeky. Also, [PHP 5.4 support will end on Monday](https://secure.php.net/supported-versions.php), so it would be better to know which of those projects work correctly with PHP 5.6, not 5.4.
&gt; If it were up to developers, all sites in the world would be running on PHP 7 even before its stable release. Please don't tar us all with the same brush.
And i do the exact same thing in symfony with twig.
I forgot it's full of people with fragile egos here. *You don't need to take every word so literally. My point is the vast majority of developers prefer the latest version, because it has features that makes their life easier.* Thanks for the opportunity to clarify.
It's not that I thought the blog post wasn't enough, it's just that I found too few people actually talked about it and shared the news in the community. I stumbled upon it by chance by visiting https://github.com/mcuadros/homebrew-hhvm to see if things had evolved there (I roughly went to this repository once every 3-4 months lately), and I wasn't subscribed to HHVM blog, Facebook or Twitter (my mistake), so I'm pretty sure the news has been missed by some potential Mac users. I guess if the Hacker News post had been more up-voted, more people would have seen it. But I'm not sure how you could have done more, seeing you used all the appropriate channels for you post. Perhaps ask some of your colleagues to help spread the word (which you probably already did)? Anyway, thanks a lot for the work (and to the community of course!). Cheers
phpnw is great if you can make it
&gt; Hope that helps. :) It sure does. And thanks for highlighting architectural tools instead of promoting another "One True Way Of Doing Things".
&gt; Knowledge in any one of the PHP MVC like (Zend, Code igniter, Cake PHP, OOPS, etc..) is mandatory. OOPS? :-) &gt; 3 TO 5 Yrs of experience in PHP (Exclusive Experience) Exclusive? I should've worked in PHP and nothing else? But... a few sentences earlier you say... &gt; Experience in Mysql is an add on. HTML, CSS, JavaScript Knowledge is mandatory Job postings! Always entertaining.
"Off course"? What would be on course then? You're bad at this. 
If you need a place to start, https://github.com/paragonie/awesome-appsec aims to curate the best security resources for developers looking to learn more about secure software development.
it's gonna turn out to be 3k salary per year. Pretty sure of it
90% of people like this are parrots that read the fractal article, but actually have zero functional experience with PHP, and are *probably* not very good developers to begin with. Feel free to ignore them.
This is not a web application, PHP does seem like an odd choice.
Technically: https://github.com/thephpleague/uri
That's like saying the terminal is not a web browser, so Node.js seems like an odd choice.
What difference does it make whether PHP is writing to an HTTP response (a stream) versus stdout (a stream)?
A new version! Nice, he fixed my only beef with the original version ("Pokey the design pattern"). I'm extremely nitpicky, but I can't say one bad thing for this. A great talk. If you're experienced, you'll find yourself nodding your head from start to end. If you're not, it'll give you *great* pointers for learning more.
Solution #1 is a terrible idea, because it will hide the root cause of bugs, making them more difficult to debug, or worse, fail silently and produce unexpected behavior.
PHP is a bad language. It's a useful language, but it remains poorly designed and full of strange warts kept around to remain backwards compatible with decade(or more) old code. The community also works hard to give the language an even worse name than it deserves, for example only very recently shifting away from telling people that shit like like "mysql_query("select x from y where z ='$z'");" is okay. Then you get into the developers themselves, amateurs who are in way over their heads trying to forever play catchup trying to turn PHP into whatever the hipster language of five years ago was. Javascript is not an improvement on any of this. Javascript is a bad language, poorly designed and being used in applications its designers never dreamed of. Saying you should use node instead of php is like arguing that your hammer is bad therefore you're gong to use a pipe wrench to pound nails. All that said, if you can't explain why your favorite language is a piece of garbage that nobody sane should ever use, you can't claim to know it.
&gt; I am, at this very moment, looking at a page whose URL is "newreply.php?do=newreply&amp;p=2816580". lol what? 
Oh yeah, querystrings are totally specific to PHP and no other languages use them /s
Does my post say anywhere that PHP should not be used? Or Javascript for that matter. You can recognize that something is bad while also recognizing that sometimes it's the right tool. There are a million good alternatives and I don't frankly care which one a person uses. Also thanks for pointing out the syntax error.
Are we using the same reddit? There's no shortage of JavaScript bashing either. All of it just as dumb as the PHP bashing. I once saw someone on reddit cite 0.1+0.05 as a reason why JavaScript sucks... 
Makes sense. First experience doing web stuff? Just install apache and php, easy! Code sucks, you sucks, and over time you get better. Then you blame PHP because you've grown up now and you're using &lt;insert language here&gt;. The fact is that you wrote shit code. It just happened to be in PHP.
I have a game I like to play on occasion where I google "php mysql tutorial" and count how many of the results teach the implementation of injection exploits. Try it sometime, it's disheartening.
 Did you know that the first computer language was designed to be a perfect language? Where none suffered, where everyone would be happy. It was a disaster. No one would accept the programming. Entire libraries were lost. Some believed we lacked the ability to describe your perfect language. But I believe that, as a species, human beings define their reality through suffering and misery. The perfect language was a dream that your primitive cerebrum kept trying to wake up from. Which is why the current languages were redesigned to this: the peak of your civilization. 
Async I/O? Ref counting GC? GUI? Libraries for async I/O? Libraries working with multiple threads? PHP would be good at short lived CLI commands though. Especially with libs like Symfony/Console. 
&gt; Are we using the same reddit? There's no shortage of JavaScript bashing either. Yeah, I've seen some JavaScript bashing, PHP bashing seems much more prevalent though (also /r/lolphp exists while /r/loljavascript only has a single member). I think a lot of it comes down to the core library. PHP's core library has pretty much everything ever whereas JavaScript's is more focused (although it's growing quite a lot now). A lot of the PHP bashing I've seen are things like "lol why does `easter_date()` exist?". &gt; I once saw someone on reddit cite 0.1+0.05 as a reason why JavaScript sucks... To be fair, it's annoying that the only number type in JavaScript is IEEE 754 floating point :(
&gt; also /r/lolphp exists while /r/loljavascript only has a single member I think you meant /r/loljs
&gt; Async I/O? Ref counting GC? GUI? Libraries for async I/O? Libraries working with multiple threads? All nice stuff, and yet not all projects need this stuff
I think the problem with the mysql_ functions is that they weren't secure by nature. You could certainly make them secure with a very simple wrapper class, but the PDO class is more complete system. It's secure out of the box. PDO is like having a car that comes with preinstalled brakes, which is the way they should come. I used the mysql_ functions for years on a site that was always under attack (lots of people hated us), and our access logs were always filled with signs of SQL injection attempts. In the five years I worked on the site none of those attempts were successful. It didn't take much effort to secure the mysql_ functions but it did take effort because the functions are insecure by default. Developers with plenty of experience don't even want to have to deal with that.
&gt; My dream web application would be something very modular. Even if it means repeating some code, I like the idea of the sidebar, taking care of it self, the navigation handeling itself. You're on the right track: modular is the name of the game. But you need to realize presentation is a small part of an app. Presentation is a module itself. So while a sidebar might be a standalone template component or whatever, having it be completely independent isn't necessary in most cases. When it is, we're probably talking about some standalone app in the sidebar, like the Google Chat in GMail (which is an apt example of what you speak of). Focus on modular domain layer. If I can say one rule of good architecture, it's this: "Divide in APIs and conquer." Design APIs according to the use cases of the APIs, and implementations naturally follow from this. Simple modules have simple, obvious implementations, and they're independent enough so when you scale, you can scale one API and let the other ones remain unchanged, if pressure is not there.
In fairness, that rebuttal sounds like it was written by someone who's never actually used any other languages. There are good things to say about PHP, but it struggles to touch on any of them. Fundamentally, the debate looks a bit like this: If you were going to design a language from scratch, it almost certainly wouldn't look anything like PHP. That said, PHP exists, and is very widespread, and incredibly easy to set up and get going. If you're a CS major looking for a language that'll broaden your horizons and help you to understand the beauty of programming, don't choose PHP. If you're an engineer and you want to build a product fairly quickly and efficiently, PHP (among others) is a perfectly good option.
Would it still be relative?
&gt; am not sure but everything separated seems like being some implementation on observer pattern , because I have no idea how those components will communicate otherwis. Read up on the Actor model. The observer is hardly the only (or best) pattern for communication.
&gt; The old mysql functions are perfectly safe. This is actually not 100% true. The problem is that ``mysql_real_escape_string()`` does not take the current connection and with it the currently used character set into account. That still allows SQL injection as explained on [Stack overflow](http://stackoverflow.com/a/12118602)
&gt; PHP is a bad language Might as well call it magical since bad and magical have about the same weight. None at all.
What do you mean?
Javascript (including Node.js, if you choose to work within that environment) does, but the syntax is different. 
On point. I actually got hooked then realized what you were doing.
Where "abuse" means use them in exactly the way they are designed. I'm bored of the mantra that all URLs need to be shiny. They're meant for computers to read. (That said, I still make pretty URLs)
12 years here (but only about 3 years professionally). I fully agree. All of this comes with experience, so gain some experience. Do that project, OP - and learn from it!
Have you guys tried a Doodle? http://doodle.com
The event is a javascript managed event loop (equivalent of the microtimer in php, although less reliable), no matter that you have chosen not to be involved in the control of it explicitly by using node.js abstractions. node.js is javascript executed by the V8, and you're writing code that node.js (javascript) is executing. The only tricky bit is the term "environment", which covers anything not involving js...like OS restrictions on the VM or configuration file access. I'm sure there's more, but a point of pride in node.js is that it's js all the way down.
I think you missed the point of my comment, which is that you aren't writing sleep loops in node. 
That's not terrible. It could work for a weekly thing for sure. I'd like something that was a little more never-ending so I didn't have to setup a new one every day/week/month and give out the new URL. So Doodle certainly isn't a bad option, I just think it could be even simpler and more intuitive.
I didn't miss the point, unless the point is "this syntax is not compatible with javascript". Sleep is a way to schedule in PHP. It's the interface for interaction with the VM event synchronization. In Node there's a few ways to schedule. Promises and callbacks are for where you have an indeterminate return time which is a different form of control. If you want a specific time for resolution, you are relying on the Node.js event loop joined with its ability to access the VM event synchronization. setTimeout and setInterval are equivalents. Not putting the delays in a control loop is a syntactic side effect. function a(){ setTimeout(function(){a();},1000); } is the equivalent and many javascript functions unravel to that effective logic. The node.js terminology is, as I have tried to describe, completely irrelevant.