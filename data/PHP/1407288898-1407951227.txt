Where is it located. Shit I will apply 
Craigslist
Heh, well, I've never had a good offer from a recruiter. The most hilarious one I ever had was someone asking me to work in the bay area for $40k. $40k is rent money and nothing else in SF.
Why reply? I had to let you know how sad you look coming back 2 days later to try and get your point across. Why did **you** feel the need to reply? Honestly, at this point, you're just harassing me.
I can throw my own money into zf2 and doctrine2 right now, but I don't think that companies would do that as well unless there is some advertisement gain. I love the idea, but mixing money and OSS is a hot topic, and the risk of damaging the ecosystem by drugging it is very high. Anyway, I'll gladly throw in 50 bucks just to give this a try.
If I had a dollar for every wasted interview. Don't ask for senior if you want to pay $15.
Dice all day
Internet
Hi, this URL is actual a pirate website. Please don't link to it again.
We allow job postings to jobs that * Allow telecommute * Are open to more than just Americans or a single country * Are not your run of the mill code monkey gigs * Are not contract-based, but full-time
Right, to hopefully better clarify I think it would be more beneficial to have a solid base with your framework of choice and then others could create a version in theirs. My logic behind that is if others use it as a learning resource you wouldn't want to be sharing any grey advice. 
Dice.com, hercjobs.com, simply hired.com and indeed.com. could it be something else? What's the pay?
 //somewhere in your controller action or route $categories = Category::lists('title', 'id'); //somewhere in your view {{ Form::select('category', $categories) }} source: http://www.laravel-tricks.com/tricks/easy-dropdowns-with-eloquents-lists-method
http://careers.stackoverflow.com/
Goto your local user group or move to a city that has one. An active user group is a great sign of high demand for PHP (or whatever) developers. 
I found my current job by cold calling a local agency that was publishing a security document for lamp installations. I learned after my interviews that they had discussed, the week prior, expanding and adding a few devs to the shop.
THE END TIMES ARE NEAR ;-)
&gt; If the problem being tested is described in sufficient detail, you should be able to replicate the benchmark with your own code and still receive the same results. The best possible description is the code itself. That also helps to reveal flaws in the benchmark procedure (if any).
So slim *doesn't have an answer* for #1/4, leaving you to pick your own. It's probably going to be your best bed when paired with a decent database manager (Doctrine isn't horrible).
Iâ€™m hiring - where are you? Bonus points for Laravel, WebObjects, Rails, or other modern MVC framework in your background.
Oops, sorry, embarrassing. I didn't even realize it. I just copied the first URL I got from google.
I'd love this. Is love to even assist in programming the backend to a program that facilitates just this. 
&gt; 1) Can interact with a mysql database with prepared statements What does this mean? Does this mean you would avoid an ORM in favour of doing this? &gt; Laravel fails at #3 How so? I hate dev ops and am absolutely terrible at it. I use Laravel routinely.
What's stopping you to use another library that handles #3 and #4?
&gt; Are not your run of the mill code monkey gigs In all seriousness, does this have a more rigorous definition?
doesn't indeed include all of the above anyway?
&gt; I would hope that a developer would be smart enough to know that a web service like monster also sells your personal information to advertising agencies. Which is most likely why you're not getting any interest. That makes no sense. Selling of my information would mean someone would want to aquire my profile, characterized by the fact I'm immediately available. This would generate more responses (statistically). Most headhunters and even hiring managers look for recently updated resumes/profiles on these services (monster and dice and cl and anything else you can imagine)
How about MemCache? http://php.net/manual/en/book.memcache.php
I wrote something like this for the TRS-80 Model III back in 1990 or so as a database interface. As long as you followed a few grammatical rules, it could store things like "John Smith's address is 123 Super Street, Metropolis, NY, 10101" and "John Smith's birthday is 1974/11/06" and things like that. Sorry, can't help though :) I don't have the disk anymore and can't remember how I wrote the thing... But Python's NLTK might be your best bet if you don't mind putting in some effort.
i think it's a little silly to have Parse\Query as a class name you should see what's best practice in other language man, naming conventions in PHP is just so fucked up fb engineer who write the thing must have experience in other language, that's a good thing
Monster.com takes your personal information, extracted by your resume and information that you've given to them, and sells it to third party advertisers and marketing companies. It has nothing to do with headhunting perse. &gt; __We share your information__ with third parties who help us deliver our own products and services to you. These third parties may not use that information for any purpose other than assisting us in providing those products and services. If you give us your consent, __we may use your information to contact you about other products or services available from our affiliates.__ With your consent, __we may also share your information with third parties who may contact you about their products or services. We may disclose to third parties information we have collected from other websites. We may also share information where legally required.__ What is identified as consent? Using their services. AKA, if you use Monster.com you'll be giving away your information to advertisers. This is why those with a modicum of intelligence about information security don't use these types of services--because they care about their data.
Yeah, it can't just stay in memory. Other apps are going to access it. I do know SQL pretty well, I've made databases for my php run sites multiple times in the past. I worked at a tech company which used some sort of ORM and it just seemed a lot faster development so I was hoping to do the same. SQL is just cumbersome right now working with PHPmyadmin the interface is quite slow and manually creating tables and relations are time consuming at a low level.
Unfortunately you're describing a situation where you're using a very feature-heavy framework to do what seems like very little work most (~95%) of the time. I don't know enough about your application's internal complexity or design, but I would say that this may be an example of when it doesn't make sense to use a framework like this. Large application frameworks (Zend, Symfony, Laravel come to mind) are great for a lot of reasons: defining conventions, allowing for the use of a common application structure between projects (great for client work), etc. However the benefits of a framework like this might not outweigh the long boot times or application complexity that you may experience by using one. This is where I've personally liked the idea of a micro-framework. They're (usually) like a skeleton framework that doesn't make too many decisions for you, and therefore allow you to build small or simple applications that use few parts without containing or executing code relating to parts that you may never use. You really have to make a choice here. Re-writing your application is probably not an option, but you may be able to split off a piece of it to make a significant portion of the simpler tasks faster. How you do that is really up to you. If more than 90% of your requests come from some long-lived cache, I'd personally write a small app using a micro-framework (or no framework, even) that fetches from the cache and potentially forwards the request internally to a separate (and more complex) application that does the rest of your DB querying and such. Really, though, you might be better off just looking into existing cache solutions designed to do this for you. Hell, putting a mini-cache app in front of your bigger application isn't far off from what something like **Varnish** attempts to accomplish.
phpmyadmin is really slow, which has nothing to do with sql, but alot to do with how well the app is created. You can download apps, that allow you to work with databases, without using phpmyadmin. It is easier if you are at least on the same network as the database server, just have to make sure the port number is open for remote access. Why not use mysql workbench? Faster development, I would agree, but better development, not so much. Let's just say if all your doing is simple selects or deletes or inserts, than use it. But when you get to complicated data, updating or changing multiple rows, with different logic. However, depending on your data needs, aka what your trying to do, you can create stored procedures/views, and then use those through the ORM code. So that you simplify your php end, but by doing some ahead of time work in creating either a stored procedure or a view.
Use an [ORM](http://en.wikipedia.org/wiki/Object-relational_mapping): what you're describing is one of the main use-cases for their existence. For example, using [Doctrine ORM](http://www.doctrine-project.org/projects/orm.html), you [could do](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/getting-started.html): // $conn = Database connection // $config = Entity structure configuration $entityManager = EntityManager::create($conn, $config); $x = new Person("S12345"); $x-&gt;setAge(45); $x-&gt;setName("sam"); $entityManager-&gt;persist($x); Followed by: $entityManager = EntityManager::create($conn, $config); $x = $entityManager-&gt;find('Person', "S12345"); print $x-&gt;getName(); If you don't like Doctrine, a couple other popular ORMs you might want to look into are [Propel](http://propelorm.org/) and [Eloquent](http://laravel.com/docs/eloquent).
&gt; What is identified as consent? Using their services. AKA, if you use Monster.com you'll be giving away your information to advertisers. This is why those with a modicum of intelligence about information security don't use these types of services. That has nothing to do with the topic, but ok you're having some kind of gotcha moment over a non-issue. I'm really surprised you think that putting up a resume is somehow an information security risk. You are intentionally putting up what's on your resume, specifically so people can see that information. If there's info you don't want shared, don't put it (or put inaccurate data) on your resume/profile?
Most of those sites are horrible at best. I would focus your efforts on contacting local php user groups, or post in the craigslist or use one of reddit's city sites. The reason developers are so hard to find is: 1. The classification of the job titles for any one in the web industry is messy at best. Go to 20 companies with job titles, and then compare actual duties, and see how rare they match even when same exact duties. 2. What may be a good php developer to you, may not be so, to anyone else. There is so many frameworks, methods, ways of programming, that it is hard for people to both know what is hot and actually is useful, vs companies tending to follow trends/fads rather than what is actual best practices based on real experience. 3. Most job sites really suck at best. Mostly they are out to get as much money as possible from recruiters and companies while providing as little real and actual value as possible. 4. Recruiters have no idea how to recruit anyone in a skill set they have not personally experienced. Most of them are professional but extremely lazy in how they recruit, preferring to search by keywords, sending mass emails, while continuing their lack of any knowledge of where actual professionals in whatever field they are recruiting for exist. The whole job market is messed up, and has been for a very long time. 5. Human Resources when they are in charge of screening, recruiting, placement of employees for hiring, and especially in fields they have no knowledge or experience in. What happens, is that potential employees are treated like crap, hr rarely has any clue how to pick what skills/experience are really needed, or how to write good job ads. So what really works is go to where the people you are hiring, go to. Craigslist, Reddit, Newspaper Ads, Local Skill-based User Group. If I may humbly request please leave clear and good job ads. So it's clear what skills/experience are must have, and what would be nice to have. Thanks.
&gt; mysql workbench Yup I use both this and PHPmyadmin. all my development is done online (which is really bad practice) but setting up a personal server on my computer (WASP or whatever is a lot more overhead, though I do have it all set up).
I don't understand why you made this thread if you know about ORM's? It can't get any easier.
On windows apache is a bit harder, I will totally acknowledge. PHPMyAdmin in my humble opinion, for which I acknowledge I can be wrong :), is simply for viewing database/table info, and a few selects for testing. I wouldn't count on it for actual developing, because there could be road blocks in terms of size of database, bandwidth in the network between you and the server, etc. But let's go back to your original question. Why not store your data in an array of some fashion, then only update the server when the array data has been updated?
I knew there was *something* there but I don't know what they were called or what options existed. it's like being in a dark room and feeling the presence of a cat there from the noise it's making but needing someone to turn the lights on so I can see what it is.
I use heidisql which seems to serve more functionality. In addition to that jetbrains 0XDBE seems nice (early access) ... Just two throw two more in! 
don't want to update the whole array (large serialized object) jus to change a small Boolean value.
I've used heidisql a bit, my favorite one was Advanced Query Tool, which is shareware, mainly because I was able to access/work with SQL Server databases. Then sql or orm is the only way. Because there is no easier way to update data/retrieve data, etc.
Wow. I can't believe we have to have this conversation about why this information is relevant to the topic. It's relevant because programmers are more security centric and will __only__ work with companies that will protect their information, not use it for advertising purposes. Sure, your resume contains personal information on it, but that doesn't give __anyone__ the right to do anything other than use that information to contact you personally about the position that you're applying for. The question was `Where do PHP developers look for full time employment` my response, `Not shitty sites like Monster.com which use personal information to make a profit.` How is this a difficult thing for you to absorb? This would be like if the entire population was vegan (wants their information protected), and a meat distributor opened up a topic on reddit saying `why isn't anyone eating meat!` (why isn't a PHP developer responding to my Monster.com post) and I replied with `because eating meat is wrong!` (using others personal information for advertising purposes is wrong, and developers are smart enough to know it). I... I honestly can't see how any part of this has been unclear.
Sign up for White Truffle.
Try looking for "software engineers" instead of "PHP developers"; there are plenty of skilled folks who aren't shopping for a particular language, but rather a particular field of work (or location, or company size, or just a job in general).
LinkedIn and Stackoverflow career.
Check if the row exists before inserting. The other, not great solution is to put a try/catch block around the insert statement, then in the catch block determine if the exception is caused by the unique constraint on the table. If it is so username taken error, otherwise show general error message.
Memcache is a key-value store without persistence, so it's not really designed to replace an rdbms.
Can you provide further description to help explain what it is you want to accomplish? 
Advanced Query Tool - thx! I'll have a look at that! In worst case i'll just have seen another one ;)
90% of php these days will be Symfony/Doctrine or Laravel/Elequoent. You should just pick one of those and go with it (Laravel is easier but less flexible and only supported by 1 dev, Symfony is extremely flexible but harder to learn and is well supported by the open source community).
what about red beans since that's the best looking one I've found so far
My personal experience at my company is that developers are found by other developers. They tried to find devs through recruiters and stuff, but they never found a good php developer. They changed their strategy, and since then all new devlopers where brought in through the existing devs. There is mo one better at judging the skills of a dev than a good dev
&gt; Human Resources when they are in charge of screening, recruiting, placement of employees for hiring, and especially in fields they have no knowledge or experience in. What happens, is that potential employees are treated like crap, hr rarely has any clue how to pick what skills/experience are really needed, or how to write good job ads. This is worryingly true, a colleague came from a company that wouldn't re-hire for the position he left because nobody at hr understood what he did and the manager who hired him had moved to a better role in another company.
We have the same problem here in South Africa. PHP programmers lvl is hard to determine. I was thinking of starting an opensource site where developers can test their skill and give companies a better idea of where a potential recruits lvl is at. ( But this is again one for the pile of 'when I have time' ) 
To get things started, I think it would be the best to first arrange just the security bug bounty individually for the project (like ZF2 or Doctrine). Write rules and other info needed (maybe about different rewards and so on). And advertise it on the project's website etc. Then someones, like tsolosmi, could get started with the "centralized project" which maybe (as a start) just lists projects with active bounties. This could be improved by the time. This would gain attention for the projects and make it nicer for the bounty hunters. My two cents.
Anything in Gelderland? 
I've used Red Bean ORM on a project before and it was pretty good. I would recommend Eloquent ORM. It comes with Laravel, but you don't have to use it with Laravel. https://laracasts.com/lessons/how-to-use-eloquent-outside-of-laravel
Like I said, the overwhelming majority disagree that it is the best. Perhaps your criteria for judging is somewhat different. I don't know much about redbean, but from having a quick look tonight I would steer clear. It seems that redbean takes the approach that database design is a matter of adding properties to objects and having magic take care of the rest. Also there doesn't seem to be any way to do migrations, which is one of the most important tools in my book, you don't check schemas into git, you need scripts to migrate them.
It sounds like he wants to query php arrays the same way he does mysql. 
Symfony has actually organized donation drives for security audit for its code and important related projects: http://symfony.com/blog/symfony2-security-audit
That guy created 7 different links for you. That takes time. **None** of them are for redbean :)
the project was shared clearly for the purposes of getting pull requests on improving the examples. - a lot of projects are already doing this - it's open source - it's on github and is hoping to get pull requests we need to stop making comments like these.
Yeah I was curious because it seemed highly rated. I'm actually deciding between Propel and Doctrine now
I don't know what that means. What are we talking about here, something like LINQ? 
Good advice on including the salary range but please don't make it excessively broad. Around 5-10k difference between the top and bottom is fine, above that and it starts sounding like the hirer is aiming to attract lots of applications and use the number of applicants as a bargaining tool to drive the offered salary down. As an example, i've been sent job specs where the salary ranges from 40-70k when enquiring further it becomes pretty apparent they're only looking to pay 40-45.
That's quite a cool undertaking. It's not just useful for learning or getting into a framework, but also quite revealing about their individual boilerplate levy. But it wasn't really a requirement to omit comments?
No, it's just time pressure. It definitely should be improved.
"Whoops, looks like something went wrong" isn't a PHP error, it's in Laravel (and possibly similar frameworks). You need to switch debug to true in config/app.php XAMPP handles it the same as any other PHP install, in php.ini.
Very much this. I am a team-lead and I need new members, my request is: minimal 5 y experience. But our H.R. is always low-balling very very VERY hard. I get fresh out of college, non-native speakers, or truck drivers wanting to learn PHP as new team-members. Don't take me wrong some of them were good but that was 1 out of 10. mostly is cost me a lot of time to teach them how to install apache and PHP and so forth. Even after a month or so I can only assess character and work ethics, because they are busy doing tutorials on codeacadamy and nettuts... :((( Even worse he doesn't want me involved WITH ANY hiring process. He thinks he's a good judgement on skill. The above is also the reason why I need a senior or an experienced developer, too much scrubs :(
They even act like they know you personal :) Last week a Susy called the helpdesk saying she's my friend and trying to reach me......damn recruiters 
thanks for getting back so quick. bare with me as i'm new to the game. So i've created a PHP variable in a view and not passed anything through to it. Now normally on WAMP it would say something along the lines of "undefined variable at localhost/whatever/index.php on line 15". Yet it doesn't specify an error in XAMPP, so it's not a PHP error? EDIT: Sorry, i've just understood what you meant by "it's in Laravel". I'll look for the debug option. EDIT 2: Aaaaaand there it is. I had to turn the debug option to true in Laravel/app/config. Thanks so much for your help! 
Check out the symfony expression language
Here you go: &lt;?php class Pinq implements IteratorAggregate { /** * @var array */ protected $collection; /** * @param array $collection */ public function __construct(array $collection) { $this-&gt;collection = $collection; } /** * Filters the collection based on a user-supplied function * * @param callable $filter * @return $this */ public function where(callable $filter) { $this-&gt;collection = array_filter($this-&gt;collection, $filter); return $this; } /** * Performs a projection of the collection based on a user-supplied function * * @param callable $callback * @return $this */ public function select(callable $callback) { $this-&gt;collection = array_map($callback, $this-&gt;collection); return $this; } /** * Orders the collection by a user-supplied function * * @param callable $callback * @param callable $comparator * @return $this */ public function orderBy(callable $callback, callable $comparator = null) { if (!is_callable($comparator)) $comparator = "strcmp"; uasort($this-&gt;collection, function ($a, $b) use ($callback, $comparator) { return $comparator($callback($a), $callback($b)); }); return $this; } /** * Selects the first n objects from the collection * * @param $count * @return $this */ public function take($count) { $this-&gt;collection = array_slice($this-&gt;collection, 0, $count); return $this; } /** * Skips over the first n objects in the collection * * @param $count * @return $this */ public function skip($count) { $this-&gt;collection = array_slice($this-&gt;collection, $count); return $this; } /** * Returns the collection * * @return array */ public function get() { return $this-&gt;collection; } /** * Returns an iterator traversing the collection * * @return ArrayIterator|Traversable */ public function getIterator() { return new ArrayIterator($this-&gt;collection); } }
In case you're interested: http://www.reddit.com/r/PHP/comments/2crihf/can_someone_explain_the_mysql_query_php_data/cjielz5 
You should know that ORMs are usually built on-top of PDO. PDO is just an API for querying your SQL database. 
So essentailly, using an ORM is using PDO. I get you.
Parsing natural languages is *really* hard due to ambiguity. It's fun, but your library will be useless.
That's just not how it works. 1) six-figure jobs that let you work from home are few and far between, and 2) local employers aren't going to double all their engineering salaries just because local talent starts to work remotely. Salaries are mostly economy-driven. There's 0 chance of any company in a 30 mile radius of me being able to afford to pay their devs SF or NY going rates, for example. That would bankrupt most of them. "Six figures" is a meaningless metric anyway without taking into account cost of living, since $100K buys *a lot* more here than it does in SF, NY, etc.
Not necessarily, but most ORMs probably use PDO. PDO just provides a standard way of accessing different databases, and if I'm not mistaken it doesn't cover more advanced functionality that's specific to a database.
I wouldn't instantaneously say so. Maybe even $5 could attract someone. It could be the "reward" for a minor issue. Say, you find a critical bug and get a higher reward, but on the same hunt you happen to catch a minor one, and you also report it for some extra bucks. In some sense the same way [Tarsnap](http://www.tarsnap.com/bugbounty.html) offers $1 bounties from "cosmetic errors".
I got about three mails/LinkedIn mails about positions in Gelderland (Arnhem/Nijmegen region). There's a LOT of recruiters out here.
Do you think Symfony community would be interested to fund again such a security bug bounties? I think you could get going with smaller funds too (which might not be enough for a professional security audit).
Perspective from someone in the UK: 1) Post your CV on job boards, i.e. http://www.cwjobs.co.uk/. You will get spammed by recruiters, often contacting you for roles WAY outside of what you asked for (e.g. 300 miles from where you live), but there will also be some good roles. 2) Go to local developer meet-ups. For example, I work in Leeds, West Yorkshire, and there are two I primarily go to: Leeds PHP, and Leeds DevOps. Both annouce companies that are present looking for roles, and both are sponsored by recruitment agencies that operate within the area. You'll make some great contacts. 3) Use Twitter. Tweet that you're looking for work and in a specific area. Find people working at companies you want to work for and let them know you're looking. A lot of the time, companies may not be actively looking, but will still hire people if they're right for the role. If in the UK, you will probably have to rely heavily on recruiters. It's just the done thing here. But they do work when you ignore the crap roles. And as others have posted, do be specific about what you're looking for. Wages, location, type of work, etc. Also respect the rules around recruiters. Once a recruiter has contacted a company on your behalf (they should only do so with your permission), you have to go through them.
1. Use Composer 2. From #1, autoloader.php doesn't need to exist 3. json.php doesn't need to exist 4. requesthandler.php / responsehandler.php should use existing (tested) components. See Symfony HTTPFoundation for an example. (If you have custom needs, extend HTTPFoundation or comparable components) 5. methods.php should be split out and organized...this is equivalent to having "functions.php" and that gets nasty real quick 6. pdosingleton.php shouldn't exist, there are better ways to manage a connection 7. If you're going to request community comments, please have documentation (both README and docblock comments) 8. Look at something like [Silex](http://silex.sensiolabs.org) or [Slim](http://www.slimframework.com/). They're doing what this appears to be doing, but following better practices
A quick side note. If you would use namespaces. You could simply use the PSR definition for autoloading. (http://www.php-fig.org/psr/psr-0/) I don't want to crush you down. But why are you trying to reinvent the wheel? If you just did it on studying purpose, ok. A personal oppinion on public member variables on a class. Try to use setter/getter on them so you have more control over their value being set or returned.
Yes. definitely. Edit: Just as well as the operating system.
If you're starting out, use an ORM. They make development and talking to the database a lot easier, and let you focus on the actual application itself. Once you get into application development more seriously, where speed and scale start to become an issue, use PDO. 2 key advantages: * You remove layers of abstraction and complexity, making your application simpler and faster. * You can write your own SQL queries catered specifically to your applications use case. Some ORMs let you do this, but see my first point. A lot of people argue "But what if I change my database? ORMs often abstract out the database meaning I can switch database easily". This is crap. 1) I've almost never ever seen anyone switch their core database. 2) As and when they have, it's to a completely different database engine, so the existing code and logic just won't work, i.e. MySQL to MongoDB. Those 2 are completely different kettles of fish and you use them in a different way.
I recently just got a job as a junior dev and i used monster, indeed, glassdoor, linked in, and google. If you post job positions on your site try to make it so that they are optimized for search engines to pick. I personally did not look at salary but having it posted was a plus. I looked at the overall job requirements and did research into the company's history. So you if you have articles, about us, or things like that make sure it is apparent to visitors/candidates. If there is one thing I can stress it is to not over complicate your job post! Do not go down to the lowest level of all the software/frameworks/etc. that you use. Try to keep this at a medium-ish level. If you want to hire a PHP dev, you really want to hire a coder... and a competant one. The years experience is one thing that really ticked me off even though i know its something that should really be used. I have 1 1/2 years experience and I applied and was offered jobs by places that asked 5,7,and 8 years of experience. This is just my 2 cents since I just went through the whole applying process and figured my input might help your decisions. *EDIT: higher to hire... its early
What do you mean by 'create a NoSQL'? 
1st of all, ask yourself "Do I need to use NoSQL?". A lot people seem to use it because it's the cool trendy thing. Most of those people shouldn't be. They've had problems with MySQL in the past, whether it be scaling or something else, and try to shove their relational data model into NoSQL instead, and they then end up in a world of pain. So first, look at your data. Is it relational? Do you require atomic updates? Do you require consistency? If so, don't use NoSQL. If you have lots of nested data that isn't interlinked, it's good for that. If you want to denormalise your MySQL data, use NoSQL as a cache. I highly recommend you watch this: https://www.youtube.com/watch?v=b2F-DItXtZs That being said, if your use case fits into NoSQL well, I suggest you install MongoDB and the MongoDB extension for PHP, and just play. It is very nice, but please make sure you're using it for the right reasons.
Awesome reply, thank you.
I'm on board with helping out on this too.
It's only an insult if you consider it one. $5 is greater than $0 and could possibly make some people feel like they don't have to be experts to find and report some massive issue because the bounty is $2000 or something.
first of all, thank you for your feedback. 1. I haven't gotten into the habit of using composer. Old habits die hard :/ 2. True. However, I will probably expand it at a later point and that is why I have it there. 3. Sometimes you want to output readable json rather than dumping it all as a string. That's what it is there for! 4. Great advice, thnx! 5. That is the plan sir :) 6. This is something I needed to get feedback on. How would you suggest doing that? Dependency injection into the controller? 7. Docblock comments exist. However I should have updated readme. My apologies! 8. Alright sir. Thank you once again for your feedback! much appreciated! 
Thanks for the link, it was a very good read! As well you make good points for modifying queries in the future. Did you come across any negatives to using zend for building queries though? Odd returns, incompatibility with some database specific features (in my case PostgreSQL)?
...so where does your framework code live? I would call that the application layer as well. Use xdebug to trace that and understand *what* in the framework is taking so long to load. It feels like you know how long it takes, but you have no idea why it takes that long. If you can't answer that question, you'll be bound to repeat it with whatever other framework you choose.
If you are sure your issues are db related you can look into the slow query log (MySQL) or SQL Server Profiler. This would at least assist you in prioritizing your larger refactoring tasks.
This is really a question more about MySQL than about PHP, but here goes: - Run a few automatic analysis tools like [MySQLTuner] (http://mysqltuner.com/) or [tuning primer](https://launchpad.net/mysql-tuning-primer). Read up on what they recommend. Note: The DB should be running for at least 24 hours before running these tools. - Start [a slow query log](https://dev.mysql.com/doc/refman/5.1/en/slow-query-log.html), analyze it with [mysqldumpslow](https://dev.mysql.com/doc/refman/5.1/en/mysqldumpslow.html) or [pt-query-digest](http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html) and act upon it - rewrite bad queries, add or fix indices - Read [High Performance MySQL](http://shop.oreilly.com/product/0636920022343.do), you'll get many more ideas from there - Hire an experienced DBA and let him have a look at your DB DBs need a lot of RAM and there are few generalist server administrators that care about the proper settings. From my experience most will leave the default MySQL settings there which are laughably conservative today. You'll most likely have a huge win just by increasing the buffer sizes in the configuration. But first read up on it, of course.
We don't need to rewrite whole thing. We can seperate our main app and API. Our main app is pretty complex but our API server is not. We have like 4-5 API endpoints in total. Their purpose is to respond GET requests by creating a JSON response with the data from Redis cache, or responding PUT requests and adding data to our database via IronMQ. For GET requests, Varnish will act as a front cache. For PUT requests, I believe queues will be enough. (we don't plan getting too many hits, probably it is %95 GET %5 PUT requests) 
Excellent performance gains! Do you have a blog? I'd love to read details of your optimization experiences. Does your server use SSDs? Hard drive speed can make a difference too.
2) Using composer &amp; following PSR0/4 eliminates the need for your own autoloader, no need to expand it later. If you structure your project to match expected structures, existing tools take care of this 3) var_dump(json_decode($jsonString, true))? Even then, you should look into a true debugger (https://jtreminio.com/2012/07/xdebug-and-you-why-you-should-be-using-a-real-debugger/) 6) Correct! DI would be a great option here. This allows you to inject a mock PDO handle for testing. 
2) Yea after reading your and the other fellow redditor's feedback I decided to change it up. 3) even better, I just realized that PHP 5.4+ has JSON_PRETTY_PRINT option. It prints perfect human readable json without messing it up for the front-end. 6) That settles it :D Alright. Thanks once again for your feedback. I appreciate you taking the time to look through all that code! 
This may sound like a dumb suggestion but anyway... 10 years ago I worked at a company that had similar infrastructure. The problem was some log files got to 2gb.
I'm honestly surprised for there to be so many yes votes. The issue was quite controversial on the internals mailinglist, mainly because the initial development of the branch happened in secret, because there still are many rough edges and because it's going to break compatibility with extensions.
Controversial, yes, but mostly just to a few people. I think most people are OK with it, if a bit uneasy with the extension BC break. But I don't think PHP 7 breaking extension compatibility would really surprise anyone or be a problem, it's just a pain for extension maintainers. There are rough edges, but they're being smoothed out.
Well there you go. It sounds like you have a solution, then. :)
So if it goes into master does that mean we'll get it in the next minor version?
&gt; Proposed PHP Version(s) &gt; Next major version of PHP No, it should be in PHP7 
Looks beautiful, but totally unclear what it does, or how it would actually work. For example, lets say you had an array, that had id, first, last, etc as keys. Now let's say you wanted to sort the data in the array, by last asc, first asc. How would you use your class to do that?
It breaks too much ext compatibility that it's aimed at PHP 7 instead. Also, most of the RFCs built on top of it are 7-only anyway.
My local PHP user group has jobs posted on it pretty frequently. 
does anyone have any idea how compatible this change is to the PHP language specification from Facebook? Since its only internal related changes I wouldn't think any, but I don't know.
It's mostly implementation details, it won't affect the spec really. Though it changes what foreach does with references IIRC.
Current PHP version is 5.6.0, so is 5.6.1 going to be called PHP 7 or we are going to wait until 5.9.9 then the next will be 7? 
This is a great idea *but* unfortunately the nature of whether the example in X language is considered _good_ or _best practice_ is always going to be totally subjective. In terms of giving developers a chance to learn by example though I think it's to be commended.
My biggest worries are: - I never got an email saying that voting was open (if it was sent I didn't receive it; I sure pray we aren't having email issues again) - Moving it to master right now basically kills any attempt to make PHP 5.7, which I think would be very useful.
&gt; Moving it to master basically kills any attempt to make PHP 5.7, which I think would be very useful. I don't like this either. I think we should branch current master to PHP-5.7.
I thought as much. But when I think "master" I think "the current development version".
I second this, the DCPHP list will take job postings and sets aside time during our meetup for people looking for work or to hire to speak up.
I don't even use PHPStorm, but I guarantee you there is namespace support built into it somewhere. And that's a crap excuse for not using them, anyway.
for more information on errors, check out [xdebug](http://xdebug.org/)
Any reason why we couldnt just have a 5.7 branch off of the 5.6 branch? Why does it need to be master?
Any project large enough that versioning the database is a requirement is generally large enough that I will be using a framework. Laravel has a pretty simple to use [database migrations](http://laravel.com/docs/migrations), those handle about 99% of my use cases. The few annoyances are when I'm dropping a table that was modified in a previous migration, because to "undo" the change I need to manually determine the correct "state" of the table. But in my current major project with approximately 30 separate migration files, I've only had to do that once.
You can use migrations -most frameworks support one tool for that, or you can use standalone tools. In some cases, they are integrated with mysql tools so you can do online migrations to (pre)production. You have some examples [here](http://www.mysqlperformanceblog.com/2013/11/21/integrating-pt-online-schema-change-scripted-deployment/) and [here](https://github.com/lefred/online-migration). And some more alternatives on [these slides](http://www.percona.com/live/mysql-conference-2013/sites/default/files/slides/PLMCE13_online-migration.pdf). At the very minimum, if you do not want anything too sophisticated, put your initial schema and data on your favorite version control software and part of your automatic deployment testing.
I don't really. Backups every day of the whole DB has been enough for me. And I can always use MySQL Compare to see what has changed if needed to. 
I really want to use laravel - but I couldn't figure out how to configure homestead locally and gave up.
Take a look at mysqli_ping, mysqli.reconnect, and MYSQLI_OPT_CONNECT_TIMEOUT. Refactor your code to open the connection once at the start and only reconnect if needed. Otherwise refactor it to close your connection when you're done. It's possible you're going to keep opening new connections and hitting a max connection limit in mysql. You might want to look at select() (stream/socket) to use to "wake up" when a file is ready to be read. You may also want to be aware that it's possible your $buffer will not contain the exact bytes/data you expect it to (you don't seem to be using a protocol to verify you have the full "packet" so to speak). Granted this is an unlikely case do to flushing and such, but still something to think about. Finally bind or escape your arguments. 
I version a `sqls.sql` file and paste all the SQLs phpmyadmin reported executing. For any commit where changes are made in the sqls file, I make sure the commit name begins with SQLS for attention. Haters gonna hate, but this is has a very good trade-off of almost 0 learning curve resulting in a sufficiently reliable way of finding out the commands necessary to update the tables. Not to mention you don't need SSH access.
Homestead isn't the only way to use Laravel. It runs fine in any stack config. Also, there are other migration tools, such as [Phinx](http://phinx.org/).
&gt; I never got an email saying that voting was open [http://news.php.net/php.internals/76376](http://news.php.net/php.internals/76376) &gt; Moving it to master right now basically kills any attempt to make PHP 5.7 That is true. Once phpng is merged to there is master no way to release as 5.7 and no new features will be done outside master.
&gt; Try it out here. Where?
Version strings are rarely decimal strings. If there's ever a 1.9 version, it does not at all imply that the next one is 2.0, it could just as well be 1.10. Increasing major versions usually depends on other factors, such as major BC breaks, major new features, but rarely because the last version ended with a 9.
I'm not trying to disparage the work put into it. All I'm saying is if something is going to be used to show "how" it should be coded then it should at least follow the best practices. That's my only complaint. If the creator of the repo doesn't know a particular framework then I feel it shouldn't be included and let the community pick it up. 
Since we're on an old framework without migrations, we use Workbench schemas with version #'s of our releases and that mwb file is included in our Mercurial repos. Before each code release, we simply synch the mwb with production using Workbench then release code. All previous releases/version are kept in the schema director of our codebase so rolling back/comparing is pretty simple. 
Have you considered maybe creating an object for these parameters if they are related? Since we know very little about what you're actually doing it's hard to give concrete tips but just looking at the list (title, assigned_to, owner, priority, status, details) that sounds like a ticket object right there.
In order to understand what this class is doing you need to understand the underlying functions. http://us1.php.net/array_sort http://us1.php.net/array_slice http://us1.php.net/uasort http://us1.php.net/array_map As well as what a valid *callback* is: http://us1.php.net/manual/en/language.types.callable.php That being said, I'm not sure why anybody would want to do it this way. Arrays are _usually_ just storage and transport mechanisms. No real work is done on them, only basic stuff like sorting and slicing; at least the way I do things. Couldn't you just import the CSV into SQL* and work on it from there? *even sqlite would work if it is a one-off job.
Well if you are asking this, than I assume you are not using a framework or ORM that has these tools built in. If that is the case, the first thing you can do is use mysqldump to dump your table schema. http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html This schema can be versioned. However this is does not come close to covering the issues you will need to address when migrating your database changes from a development environment through your server tiers to production. If you are indeed not using a framework or ORM, search for a PHP migrations tool that works for you. https://packagist.org/search/?q=migrations http://phinx.org/ Consider refactoring your code to make database migrations as painless as possible. Consider keeping configuration values in flat files rather than in a database.
Found a minor typo, you have 'loggint' instead of 'logging'. Also, for your logging example what about having a decorator that wraps the ArticleManager like so class LoggingArticleManager { public function __construct(ArticleManager $am, LoggerInterface $logger) { $this-&gt;am = $am; $this-&gt;logger = $logger; } public function updateArticle(Article $article) { $this-&gt;am-&gt;updateArticle($article); $this-&gt;logger-&gt;info('whatever'); } public function deleteArticle(Article $article) { $this-&gt;am-&gt;deleteArticle($article); $this-&gt;logger-&gt;info('Article deleted'); } } Obviously you'd need to have a common interface so that type-hinted parameters are satisfied but I think this is better that your solution. However this may seem better to me because I'm never used or heard of AOP before.
With database migration tools such as [Doctrine Migrations](http://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html) Your tool may change depending on your project.
&gt; Found a minor typo, you have 'loggint' instead of 'logging'. Thanks! I agree that the example in the article isn't the _best_ example for that use-case. What I said at the end of the article though, for the `FOSUserBundle` is (in my opinion) a good use case. There are cases where it does come in handy. That's why I said that you should seriously think about it when using it, since it's easy code-rot as well.
To elaborate, an ORM is more of a way of organizing your data into objects that map to your database. In other words, you would save data to your objects and then they will use some SQL library to build/run the queries that actually transfer the data from your objects into your database. PDO is one of those SQL libraries. It is just a query builder/runner that you can use by itself, outside of any ORM. Your ORM will use PDO (or another SQL library) to create and run queries, but it is doing a lot more than just firing queries at your DB. I hope that helps differentiate the two a little. Edit: grammaring better.
Why are there not more BC breaks?? When would they be introduced? Ie: needle haystack issue. 
I know the exact size of the file that I am reading. I am using Tshark to write to the file I am reading from. That being said I can select exactly what I want to be written to the file (date, MAC address, and signal strength). I'll look into opening a single connection and moving forward from there. I've never done it any other way than what I'm doing now. Thanks for the reply.
switching to python middle be a rough transition right now. I did look it up and it seems very easy in Python, so I'm glad I'm aware of it now. For now, I'm just using very simple regex to match the little variance in sentence structure but may need to use python if I want the system to allow much more grammatical flexibility in the future. Perhaps I could have a python program to just return the array so I was abstract it out and use it in PHP
We use Doctrine Migrations, along with [Alice](https://packagist.org/packages/nelmio/alice). This lets us checkout any branch or tag, rebuild the database and load a default set of fixtures, giving you a functional website for that commit. I often use this to test pull requests locally before they are merged. It has worked pretty well for us, and I am quite happy with the results.
Just remembered a really good situation. Look at [this](https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/Doctrine/UserManager.php) class. If I were to create a decorator, I'd have to remember to either use the `fos_user.user_manager` service __or__ the `foo.user_manager` service depending on what I'm doing. When using AOP, I can always use the `fos_user.user_manager` service and still "decorate" the original class. You can think of it as a kind of "extreme" decorator pattern.
I'm not someone who can share his optimization experiences. I simply read articles, learn things and ask my questions on reddit/so/irc channels to get more indepth information. I'm more likely a curious developer. Yes, I have a blog, although it is written in Turkish only. http://aristona.github.io/web-gelistiricilerin-bilmesi-gereken-konular/, a very long article about all the good practice uses I've experienced and can suggest.
If I were talking about a simple platform app, you'd be right. The reason I have no choice is that part of my app is an ETL tool designed to access data across a wide range of data sources. I can hit a very wide array of DBMS's from PHP, running on Apache, nginx, IIS - whatever machine you want to run on, PHP goes there. If the situation is unchanged, then when PHP 5.4 goes EOL, we'll probably have no choice but to integrate some external tool or alternate language in order to maintain continuity of basic access to SQL server. That will raise the cost of deployment a bit. My company caters to small and medium businesses that can't afford our larger competitors' products. Small deployments are important. SQL server actually used to be an affordable alternative to Oracle for small and medium businesses. More recent versions have made it prohibitively expensive for a lot of users to upgrade. Just because a business is running SQL server, it doesn't mean they have unlimited IT budgets. Cost matters.
&gt; If you're starting out, use an ORM. If you're starting out, you should learn the basics first, which in this case is PDO and latter you can start using an abstraction layer on top of PDO. Regarding your scale statement, I don't really know as you have come to the conclusion that ORM's don't scale. &gt; A lot of people argue "But what if I change my database? ORMs often abstract out the database meaning I can switch database easily". One of my old [posts](https://plus.google.com/+AlexandruG/posts/hkvSVK3BFWA) from G+ might be a good reply to this statement.
Currently we use the migration system provided with Laravel. The idea is that every time you make a change to the database, you create an up and down version of what you plan to achieve in Laravel's schema builder. These migrations are then run sequentially in either direction in order to achieve the correct version of your database. As usual with all things Laravel, Jeffrey Way has a handy [primer video](https://laracasts.com/series/laravel-from-scratch/episodes/14) For our previous system we used SQL files denoting which version of the product was currently in development. For example, the site is in version 1.1, and we are currently working on version 1.2. There is a Dropbox file called 1.2_changes.sql which we update whenever we update the schema, putting in a comment on what we're doing and when, and the SQL required to perform the operation. We would also keep a note of when we last performed the changes so as to know where we were in the process. This is much messier than Laravel migrations, but it got the job done.
You're not the only one in this boat. I had to build a green-field product using that binary driver horseshit. Sick of it. Why is there no built-in just-works open driver for your flagship database product?
PHP7? What the hell happened to PHP6? Are we seriously going the Java route with version naming, ie: Java 7 is actually 1.7, and PHP 7 is actually 5.7?
Same boat here. I have a few apps written against SQL Server 2005 where I had to specifically note in the documentation that the only proven-good compatibility is PHP 5.3.x with the SQL Server Driver for PHP v1.1 CTP_082009. Using this driver beats the hell out of installing FreeTDS (at least the last time I compared setting them both up), but an update is way overdue.
So here's what I did, I created a sample code that simulates my code, sort of. $con = mysqli_init(); if(!$con) { die("mysqli_init failed"); } if(!mysqli_options($con,MYSQLI_OPT_CONNECT_TIMEOUT, 5)) { die("error setting mysqli_option"); } if(!mysqli_real_connect($con, $db_hostname, $db_username, $db_password, $db_database)) { die("connect error: " . mysqli_connect_error()); } while(mysqli_ping($con)) { if(mysqli_ping($con)) { echo "upload packet"; }else{ echo "error: " . mysqli_error($con); } } The while loop simulates a pack upload process while reading from the file. But what ends up happening, like in my original code, when the internet connection drops, it just sits there, even when the internet connection comes back online. 
&gt; Try it out [here](http://www.zend.com/en/products/server/z-ray-use-cases?elq=d38203b2030a47e98c238c08b6cb916b) &gt; The [Zend on AWS solution](https://aws.amazon.com/marketplace/pp/B00MAOP1A8/ref=sp_mpg_product_title?ie=UTF8&amp;sr=0-11&amp;elq=d38203b2030a47e98c238c08b6cb916b) is available today on the AWS marketplace on a very affordable pay-as-you-go basis. 
Sounds like a good read, added myself to the notify list :) 
I use my own migration tool (https://github.com/davedevelopment/phpmig), but I'd recommend also taking a look at https://github.com/robmorgan/phinx. I've just started working on a zero downtime migration lib, it's still in it's early stages but will probably look a lot like a php port of https://github.com/soundcloud/lhm. 
So is there any way to transform an array into the data type that a query data set? Thank you for the informative reply.
Yup, thats why I started this thread =)
Added myself to the list. Looking forward to it. Good luck with the book!
I use PhpStorm with projects that use namespaces and it works fine. What do you mean that it fails to keep track of the path to each file? I agree with cntx1 that you should use getters/setters. If something specific needs to happen in a getter/setter down the road and you add it then you also have to update all your code to reference the getter/setter.
No. There was a recent RFC addressing the next major version, whether it be PHP 6 or PHP 7. The reason it was up for debate was because of the previous "PHP 6" that became PHP 5.3. The RFC was definitely controversial, but inevitably, the vote came down to deciding PHP 7 would be the next major version because of legacy and historical reasons behind the intention of releasing PHP 6. I didn't follow it super closely, nor was I really programming PHP before 5.3 was the current version, so I could be misstating or misunderstanding certain aspects of the debate. Edit: I mistakenly typed out "5.2" instead of "5.3" for what PHP 6 "became."
And yet we have [goto](http://us2.php.net/goto), despite all the controversy over that one.
Do you mean Y and Z in the last sentence?
Why does it have to be years away? The code is already almost 100% compatable and most of the changes are under the hood. 
plus, why does it matter. for arrays its needle first, for strings its haystack first. its not so complicated. 
I thought all of the good stuff for the next major version of php went into 5.3, not 5.2â€¦ but ive been wrong before. 
Yes! Edited.
Cool. Thanks for the heads up on this. It's something I'm sure I'd have fallen in to.
Yeah, you're right. I made a typo in my post. I must have been thinking 5.3 but typed 5.2 I'll edit my post. Thanks for the catch.
&gt;fails to keep track of the path to each file? It was a settings issue. I had some messed up settings but it works now and every class is loaded according to its namespace. &gt;you also have to update all your code to reference the getter/setter. true dat. Getting it fixed right away. Thank you both. I appreciate you taking the time to look through my mud :D
Thank you. This is very helpful... I always hate to put logging in to classes that manage objects, it just feels wrong. And I had not yet come across an elegant solution for doing so outside that class. This is exactly what I need to do.
Especially interested in how composer package management plays into this. To be safe, I currently ignore the recommendation and instead commit all package versions to my source control so I can do a "svn export" as my deployment step and not have to worry about minor version differences between my dev/test servers and production. This has its own pitfalls but has kept us safe to date.
Sorry, but [no effort question = no effort answer](http://www.lmgtfy.com/?q=mysql+tutorial+sort+and+limit+clause&amp;l=1) 
If you commit the composer.lock file to your repo, and then run composer install on production it will install the identical versions. https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file
Definitely stealing this for future use.
Looks like the community is banding together to support it themselves: http://sqlsrvphp.codeplex.com/discussions/441706 
His company is looking, not him.
We are using https://toranproxy.com - from one of the authors of composer. Give it a try and if it's good - pay for the business. 
damn
I've played with this at work and works great.
I get it, it's annoying when folks just show up expecting you to solve "all the problems." I didn't post my nested pair of while loops because I figured why bother. This subreddit was far from my first stop. Your tutorial (hilarious btw) was literally the same as several others I've scanned over since yesterday. Also, my question stated I'm going over multiple tables and your tutorial doesn't even mention join because it doesn't deal in multiple tables. Since I posted this though, I came across max(id) and I think I'm on track? For the record, here's what I've got. $tables = $db-&gt;query("SHOW TABLES FROM `{$dbName}` where tables_in_{$dbName} NOT LIKE 'lmgtfy'") or die("Get failed!\n". $db-&gt;errno."\n".$db-&gt;error);; while ($table = $tables-&gt;fetch_row()) { $rows = $db-&gt;query("SELECT * FROM `{$table[0]}`"); while($row = $rows-&gt;fetch_assoc()) { $db-&gt;query("SELECT * FROM `{$table[0]}`"); $data[] = $row; } } usort($data, 'sortChron'); header("Content-Type: text/json"); echo json_encode($data); $tables-&gt;free(); $rows-&gt;free(); $db-&gt;close(); So all it does as should be plain is cycle through tables and spit them out to json. That's it. Feel free to let me know if I shouldn't be doing something. So using max(id) with select and limit, I assume something to the extent of limit max(id)-`{$increment}` or some such?
PHP 6 was the version that was going to add modern Unicode and some semblance of sanity to the stdlib. They skipped it so they wouldn't have to do either of those things. #zendlogic
you can also add a git repo directly in your composer.json and avoid Satis if you want to avoid cron jobs and another dependency. We use Satis though and it works pretty well. I did, however, find the documentation to be a bit unclear.
Assuming your database changes over time, how do you know what your schema was for any given commit?
You see this as a problem, but really it's an opportunity! Start selling "SQL Server Compatibility" as an appropriately expensive addon. Your smart clients will get the hint and stop being a problem (either they'll go away, which they inevitably would anyway when you can't make it work, or they'll switch DB). The dumb ones will be a goldmine; all you have to do is leave them on old PHP versions.
I have to admit, as an old school *nix-based developer, I hated the installers. It's PHP: I just want to download a bunch of files and unpack them into a webroot somewhere!
Yes but the installation process is really just downloading a bunch of php files for you... just automatically and from a number of sources with all of the latest dependencies configured and downloaded for you. Granted, setting up a local environment with everything you need used to be a pain (bloody mycrypt and .ini files...) but vagrant and homestead removed that completely. Whilst I've been downvoted for saying he should maybe be focusing his attentions elsewhere, I stand by it. If you can't wrap your head around composer and some basic command-line stuff, Laravel can wait. 
Cool! Wish you lots of luck. I wrote a similar book http://growingsoftware.org/expert-php-deployments/ and it did alright in sales. I don't have time to modernize my book, but the #1 requested piece of information was on using the modern day devops tools like Puppet and Chef. Best of luck!
The format of your UPDATE query is wrong - it doesn't mirror INSERT INTO. It should be in the form: UPDATE TABLE_NAME SET field='value',anotherfield='another value' WHERE (criteria = 'something') 
Genuinely curious about this - Aside from the description and the bio, how do I know what's going to be in this book? There's no planned ToC listed, no proposed learning flow, really no information aside from 'php deploy', so how could anyone possibly list a value they would consider paying, or even give their email address? Is that how most LeanPub ebooks work?
Ok, thanks for the additional info. What I'd do is: describe {table}; will tell you the primary keys then you ORDER BY the primary key in descending order (to go from the end) and use LIMIT to paginate the results // 0: 0-30, 30:30-60, 60:60-90 etc $offset = 0; // assuming all tables have a primary key while ($table = $tables-&gt;fetch_row()) { // describe `tbl` to learn the primary key $rows = $db-&gt;query("DESCRIBE `{$table[0]}`"); $primary_key = null; while($row = $rows-&gt;fetch_assoc()) { if ($row['Key'] === 'PRI') { $primary_key = $row['Field']; break; } } if ($primary_key === null) { $rows = $db-&gt;query("SELECT * FROM `{$table[0]}` ORDER BY `{$primary_key}` DESC LIMIT {$offset},30"); while($row = $rows-&gt;fetch_assoc()) { $db-&gt;query("SELECT * FROM `{$table[0]}`"); $data[] = $row; } } } edit: its very possible some of your tables might not have primary keys. If so, and you need to show them, another solution will be necessary.
We still do the commit-vendor-to-repo approach because then we only have one repo to worry about being available during a build. Nothing will ruin your day like missing a deployment because randomsite.com/package-location.zip is down and composer can't build. (Satis can help mirror to fix this problem, but this is an easier option.)
http://search.dilbert.com/comic/Project%20Estimate
Always write tests. :-)
Yes there is a point, and it's called continuous integration. The idea is to have wide unit test coverage of your code and to run those tests before every commit, and automatically afterwards to be able to track the stability of the code. This makes it easy to prevent breaking stuff when making changes (and especially when several people are making lots of changes). It can also be used to automate lots of the release process by automatically generating documentation and packaging the project.
Like you said, there's no reason to use that badge if you aren't building anything (tests). So add tests, then add the badge.
It's all about *abstraction*. PDO is a Database Abstraction Library, intended to facilitate access to the raw DB commands. An ORM is another layer of abstraction - intended to facilitate access to PDO. This sort of thing is common in something like PHP. A framework is an abstraction of PHP itself, and the PHP language is an abstraction on C... In general I'm all for abstractions. Eloquent is a great ORM and facilitates CRUD style data access tremendously. 
SQL server has system views to tell you which queries are problematic.
Is the use of ODBC still an option in these situations? http://php.net/manual/en/ref.pdo-odbc.php Assuming your PHP code can run under WinTel? 
I mail out CDs of my application!
That's a good point. By the sound of it, I don't think he uses any revision software.
The primary advantage of using satis is being able to install from zips as opposed to cloning in git. This makes things a lot faster.
&gt; Nothing will ruin your day like missing a deployment because randomsite.com/package-location.zip is down and composer can't build. I've been considering this. It's never happened to me yet, but I figure if it does I'll just SCP up the vendor folder from one of a dozen machines that already has it. And actually, *two* things have to go wrong. The package has to be unavailable (doesn't happen often, Github is pretty reliable) *and* I have to have updated the packages since the last build, which I also don't do often.
Agreed. I was just wondering how to guess at what to pay without understanding the scope. I wouldn't mind paying extra for something comprehensive but it's only fair to charge a price proportional to the book's scope, effort, and value.
The error code of the exception will tell you if it is a unique conatraint failure. The error message of the exception will tell you which constraint failed. 
That could be a business opportunity for a migration strategy/product involving postgres.
I use a really [basic tool](http://dbv.vizuina.com/) that I made. It's nothing fancy, but it served me (and the teams I've worked with over the years) well so far.
I like that ... it's cool ...
My opinion on how to deal with composer packages (or package dependencies in general really) will definitely be discussed in the book
Haha! I might write a chapter specific for "Why you shouldn't FTP from Dreamweaver into an IIS host".
Thanks for the reply and the resources. I'll look into that for the DB part, what I wanted to achieve was to have an overlook -throught the app itself- on what the app does with the db. Then by using the mysql tools try to inspect in detail the queries and the db itself. But by having a general feeling of what the db calls are doing we can decide which can be modified, cached, removed. Anyway great resources, thanks!.
Great, I'll look into that!
Yes, both rollbacks and database migrations for deploy/rollback will be discussed. Migrations is a task that is often done manually and that ends in a lot of headaches. The book will not be about any specific framework.
There we go, it's just the beginning guys :p We'll have to explain every couple of days why it's PHP 7 and not 6 :S (/u/ihsw it's not against you)
This looks good! Is there an expected release date?
Memcached data is volatile, meaning that all those tokens will be lost if the process dies from some reason. Also old data will be discarded if the machine runs out of RAM, therefore you should treat memcached as a transitory cache, where you don't really care if the data is still there or not. By associating an TTL with your tokens, you practically guarantee to clients that they can use those tokens until they expire ; therefor you want persistence for those tokens and maybe use memcache in front of that persistence solution if you found it necessary.
Currently no release date since I'll following the lean publishing technique that leanpub allows. So it will be published when parts are completed, then it will be iterated over with improvements and from feedback. You can read more about how it works here: https://leanpub.com/manifesto
[Here](http://lmgtfy.com/?q=composer+private+repository)
way too much lip smackin and teeth sucking... thanks for the series though, i've been wanting to switch from the superrrr easy codeigniter framework to laravel so i'll give this a look!
Ah yeah worded that a bit rubbish thats pretty much what I meant to ask, picked up a couple of leanpub books so know the drill :). I'll be keeping a look out because I really need to improve my deployment strategy. Good luck!
We use [Ruckusing Migrations](https://github.com/ruckus/ruckusing-migrations). 
minor versions should have been branched from the previous minor already, we were just too lazy to do that and cherry-pick the appropriate changes from master.
Finally! It took more than a year to implement, but better late then never :)
I understand. Maybe in z future 
Oh ;) Well hopefully it might help someone else. And thank you.
Awesome! Now I hope they release PHPStorm 8 while my license still allows me to upgrade for free.
Mine expired a few months ago, I'm still waiting for a 50% off when they release PhpStorm 8 :)
Hey, I don't remember exactly where I veered off the tracks but I went back to the docs and took a look. I would highly recommend revisiting this guide: http://laravel.com/docs/homestead then compare it to this guide: http://scotch.io/tutorials/php/getting-started-with-laravel-homestead The official laravel guide assumes a lot of knowledge that I don't have. I don't remember where I got stuck at the moment - but the difference in the docs is pretty striking and when going through the laravel guides I constantly find myself relying on docs outside laravel. For comparison, I've been trying out phalcon and this is rarely the case.
predawn
Glad they're finally doing this. They need to release 8 already if for nothing more than PhpUnit 4 support. 
I believe sometime in October is the planned release. I can't remember where I saw that but I've been using the EAP for 8 due to a memory bug that causes 7.1.3 to freeze when working on a specific project I have. So I too am ready for 8 to be released!
EAP has been unusable for me on Debian systems. I get exceptions for almost every tooltip popup. I gave up on it
Nope, I guess I'm not sure. That's the page I saw and I guess I was remembering the PHPStorm 7 release. Q3 goes through end of September and considering how many things are showing as in progress I wouldn't hold my breath for anything earlier. But hey, if they give it up earlier I'll be happy :D
I've been really happy with 8 EAP. There are occasional exceptions a bit nothing major.
I've only used it on Ubuntu 13.10 and 14.04 and while there were definitely exceptions, it mostly happened on bootup. Hopefully all those will be fixed before release! 
nice one. bookmarked!
Interesting! Added myself to the list.
More information on what else this update includes, take a look at the [PHPStorm Blog](http://blog.jetbrains.com/phpstorm/) and the [Release Notes](http://confluence.jetbrains.com/display/PhpStorm/PhpStorm+EAP+138.1505+Release+Notes?_ga=1.45607910.394811744.1402325632)
I've added a top level ToC now, and as soon as I feel the introduction chapter is complete I'll publish it as a free sample. That will dig deeper into what the book is about and who it's for. It will be published in the next few days.
I highly recommend you look at Laracasts. Jeffrey has some lessons dealing directly with this https://laracasts.com/search?q=homestead
Sounds like you may need an Apache module, along time ago I did something similar by hacking mod_auth_cookie_mysql. 
Only remote-friendly positions are allowed to be posted here.
Include more information, Holidays and Salary expectations. Also where in London the role is based.
Heya, can you explain what a remote-friendly position is? --sorry, I'm totally new here
I had a look around and found out - only jobs that are open to more than one specific country, right? No worries, sorry for the oversight. Can you recommend where I should post it? Thanks!
Thanks, I guess. It's been resting in a private repo for about a year. 
You have typo overflow :). But, I give you +1 for the time/effort. Your articles, has almost nothing to do with PHP imho. 
Oooh, fantastic. 
FUCK YES
Then create a pull request, and fix it. &gt; If the creator of the repo doesn't know a particular framework then I feel it shouldn't be included and let the community pick it up. He created it the way he thought was proper, i dont see anything wrong with that.
I'm getting the same thing on Ubuntu, but only since I disabled Unity. I'm in a new job too, so it's slowing me down since I don't yet know the code bases well enough to work without suggestions.
I've submitted four bug reports since updating yo EAP 138.1505. I don't have a problem with testing, as that's the point of early access. Its just not stable enough to expect a bug free release any time soon. I'm looking forward to v8, and the jetbrains team always does a good job. Can't happen fast enough tho ;)
What is the context of the multiple tables?
[PHPUnit](http://phpunit.de/) - unit testing, [PHPMD](http://phpmd.org/) - Mess detector, [PHPCPD](https://github.com/sebastianbergmann/phpcpd) - Copy and paste detector, [PHPSpec](http://www.phpspec.net/) - Write spec tests for your projects. If all those pass you are on the right track plus you will soon learn to write testable code. I highly recommend you run PHPUnit with --coverage-html=build (or whatever directory) so you get the code coverage reports. Link that in with [Jenkins-CI](http://jenkins-ci.org/) and Git for automatic build testing when committing to master especially if working in multi-developer environments.
Check out the websites of companies near you. Most large companies have a vacancies or careers section
Sorry, I don't understand your question. I don't know what you mean by the context of the tables. Thank you for your help though.
It kinda depends on how the tables look like. But in general you can do it with a single SQL-Query. A complex one, but still. I think the main issue people here have with the question, is that it does not really make sense to unite all tables into one. If they could be united easily, you would have only one table in the database. But despite that irritation, it's probably more a topic for /r/mysql or /r/phphelp than /r/php... 
Look up "SELECT ... UNION" and "UNION ALL": &lt;https://dev.mysql.com/doc/refman/5.0/en/union.html&gt;
I didn't think about that... I'm asking a mysql question in the php sub. The tables are separate so I can have an easy count, a primary per user, etc. There's logistical reasons I went that route. Efficiency wise, I was thinking the index table would be the quickest way to get the relevant rows.
Jenkins and Phinx
He's asking why you need all those tables.
Oh, cheers; each table represents a persons submissions.
Hey thanks for the post. You are right about the connection timeout (give yourself a pat on the back). I am going to try and open a socket and upload that way. I've never opened a socket before and try to upload this way. I'll give it a shot. Do I have to reopen the socket every time I want to upload? or does it stay open until I close it?
UNION will work, but it is going to be messy and will be a performance issue as you add more members. I would suggest two tables named something like user and submission. The user table would have a record for each user and the submission table would have all the submissions with one of the columns being a foreign key back to the primary key on the user table. That setup will save you lots of future headaches. Edit: Plus the queries are quick and easy.
I think you're right. I need to simplify my approach.
Jetbrains makes the best development tools. They rock
Please include a repo of your test install and config files so others can reproduce.
The easier and faster approach would be to create a lookup array. First, we will take your word list array. $wordList = [ ['run', 'running', 'ran'], ['eat', 'eating', 'ate'] ]; We then need to create a lookup array based on the word list. The lookup will have each word as a key, and their index in the word list as the value. $lookup = []; foreach ($wordList as $i =&gt; $words) { foreach ($words as $word) { $lookup[$word] = $i; } } Now all you would have to do is check if the word is found in the lookup, if so, return the word list based on the index. if (isset($lookup['ran'])) { $tenses = $wordList[$lookup['ran']]; }
that is awesome. thank you! now in terms of running time, how large would the world list have to be in order to make it worth precompiling the lookup array so it doesn't have to run the for loop every time? also is there an easy way to do that?
I just started using it recently too and it's changed my life :)
I'd personally always cache the wordlist/lookup. I had to do something similar to the boggle challenge: https://github.com/milesj/boggle-challenge/blob/master/Boggle.php#L146 The dictionary contained tens of thousands of words between multiple files. Even with data sets that large, the loops still didn't take that long.
You should still cast your number to a string and use substr to break the resulting string into gold, silver and copper. Keep trying, its pretty simple so im sure youll get it soon enoug 
The way they implemented it, the memory consumption was duplicated and that slowed down the performance (so, they gave up).
Reply moved: http://www.reddit.com/r/PHP/comments/2cx327/how_to_make_this_array_search_system/cjk5uwb
&gt; How can I insure that one of these 5 buyers don't simply install on 100 domains, post the script on forums/share with friends, etc? The short answer is that you can't. If hackers are intent on cracking popular software like Photoshop they'll have no problem pwning your PHP scripts. Why not run it as an actual SaaS and host scripts for customers? Maybe for a monthly fee, instead of selling your source code. If SaaS isn't possible, your best option is to ignore piracy. A user who pirates is either unwilling or unable to pay for your software. You can't force them to become a customer. 
Could you not create a database table with fields: past, present, future (ate, eating, eat). Then search the table when given a word: SELECT CASE WHEN past = 'ate' THEN 'past' WHEN present = 'ate' THEN 'present' WHEN future = 'ate' THEN 'future' END as tense FROM words WHERE past = 'ate' OR present = 'ate' OR future = 'ate'; Use prepared statements to pass in the word. And add indexes to the past, present and future columns of your table.
Doing saas is the simplest route. Technically you could set up your app as desktop software. i.e. package it with a custom WebKit browser, but I don't think it would be worth the effort
Yes, look into composer config --global Also, if you're doing more than a handful of packages, consider setting up satis or packagist.
that's good thanks I'm gonna save this in case I want to implement it later :)
The trend these days is to just make the software free-to-use for non-commercial use (and possibly also limited commercial use), and then licensed at tiered prices for commercial use. This model works very well, for two reasons: 1) Those using it for commercial purposes are extemely unlikely to jeopardize their businesses by opening themselves up to legal troubles just to save themselves from paying for your software, and 2) You gain loads of good karma and free advertising by not being a jerk and charging those who aren't even making money off it (e.g. non-profits). Everybody wins.
Did you ever know that you're my hero, and everything I would like to be? I can fly higher than an eagle, 'cause you are the wind beneath my wings.
Can someone save me the trouble of googling and going through pages of things I don't know to point me to the definitive guide to blade templates? Curious as to what they're like
Yeah, set it up so that you can sell it as a service. It's going to save you a ton of headaches down the road when it comes to licensing, dealing with stolen software, etc.
You can also globally install packages. I've got phpunit, phpcs, and phpdoc installed that way, which greatly reduces the number of development dependencies for the projects.
I did some digging, it looks like the global argument has the config and installed packages stored on a per-user basis and not in a single, system wide location.
So you want a function to return a random sentence which follows those broad options? Is that what you're asking? 
After a bit of Googling, [this StackOverflow question](https://stackoverflow.com/questions/205411/random-string-that-matches-a-regexp) seems to have the most information about this topic related to PHP. Particularly, [ReverseRegex](https://github.com/icomefromthenet/ReverseRegex) and [Parsley](https://stackoverflow.com/questions/205411/random-string-that-matches-a-regexp) Parsley seems to not support ? and ReverseRegex seems to advise against it. I'd assume you could get the same effect with {0,1}, though. [edit] Other languages found during my search: [xeger for Java](https://code.google.com/p/xeger/), [String::Random for Perl](http://search.cpan.org/~steve/String-Random-0.20/Random.pm), [rstr for Python](https://bitbucket.org/leapfrogdevelopment/rstr/), [exrex for Python](https://github.com/asciimoo/exrex)
http://laravel.com/docs/templates#blade-templating
Take a look at a project I created: https://github.com/KendallHopkins/FormalTheory. It implements Regex in PHP using a DFA. It allows things you normally can't do with regex, such as enumeration, negation, intersections. I also have a live demo at regexengine.com. Here's an example of where I counted all possible solution to a regex. It should be pretty easy to translate this to enumeration or random walk to generate examples. https://github.com/KendallHopkins/FormalTheory/blob/master/test/Tests/RegularExpression/CountTest.php
Is English not your first language? That should read "should". I can help you with editing if you need.
I'll be interested mostly to see how you handle front-end dependencies and built files. Do you put the minified CSS in the in the git repo? Do you deploy from Git? Do you deploy and then build on the server?
It's early here, and I'm pre-coffee. What do you mean by customise by expression? Maybe if you give an example function call that you'd ideally like to use, it'll help my slow, slow brain! 
you can install it as a composer user, and put it in the path for all your users
You can use the integrated webserver for dev-systems, so you don't have to use an apache. http://php.net/manual/en/features.commandline.webserver.php
If you have php installed locally you can run the built in webserver from the command line.
Well, there are easier alternatives which will take care of configuration for you. You could, for example, install EsayPHP or XAMPP on windows. These are pretty easy to use. The easier solution, IMO is to use PHP's own webserver (for 5.4+). PHP 5.4+ has its own webserver that you can use. It's not meant to be a production ready web server. You basically have to run the command __php -S localhost:8080__ and (given you have php 5.4+) it'll start running a web server whose document root is the current directory. More details on PHP's own web server here =&gt; http://php.net/manual/en/features.commandline.webserver.php
the nerdy part of my brain just jizzed. I was about to make this from scratch!
If you're looking for something a bit more substantial it's worth looking into a virtualization solution like [vagrant](http://www.vagrantup.com/) and VirtualBox. Here's some useful example Vagrant files â€“ https://github.com/adlawson/vagrantfiles 
You can use the integrated web server, but if you are trying to host a production website, you are going to want to figure out apache2. Its pretty simple to get set up, and theres lots of tutorials around.
Vagrant is the future. Especially when it comes to provisioning boxes with scripts so you can build and destroy it at will
I think he means it returns a sentence that would return true if tried to match that regex. 
so, whats the current best solution?
The biggest positive effect of this should be a big reduction of whining posts on phpstorms blog "But when do we get Blade support? I need it urgently!" Hopefully the next fad is quite a bit of time away...
Saving for future reading. 
For what problem?
the problem vagrant solves - preconfigured environment which may be different for every project on single machine.
Docker, then.
Out of curiosity what do you find so complicated about setting up Apache?
Have you looked at WAMPP, XAMPP, LAMPP, MAMP? You couldn't ask for a simpler way to install Apache, MySQL, PHP and PHPMyAdmin. Failing that newer versions of PHP (5.4+) have an inbuilt server called by php -S localhost:8080 for example. You should really try and learn how to setup Apache (it's really not that hard) and will be useful in fault finding and your future as a developer :) As for vagrant vs Docker. Docker is a Virtual Environment whereas Vagrant is a Virtual Machine. Ironically docker is usually provisioned by Vagrant / puppet. A quick comparison can be found [here](http://www.scriptrock.com/articles/docker-vs-vagrant)
Just buy a cheap hosting. I have gone both routes (I have personal servers too) but I find the web one to be excruciatingly easier/simpler/faster/more efficient due to the hasslefree workflow I have. All the overhead will drag you away from your sweet PHP time.
Not entirely sure what you mean by this. If I understand you correctly then: yes. The book will assume the reader has an application and how that application can/should be deployed and how to manage the lifecycle of it.
Another alternative I recommend is [AMPPS](http://www.ampps.com/). I use it on my Windows and Mac machines. One advantage it has over XAMPP is that it provides a browser-based UI for setting up virtual hosts. It will modify your /etc/hosts or your Windows hosts file automatically.
These are topics that will be discussed in the book. Git will be one of the ways to deploy, but other tools will be also discussed in the "Tools" chapter. Concatenation, minification, etc will be discussed in the "Assets" chapter.
Apache is too hard, so learn virtualization, a Linux distro, vagrant, and apache. I like how you think.
Wamp takes like 2 minutes to install. 
This is trivial - you just generate random strings of 30-100 letters and then check them against the regex in a while true-loop. Time consuming, but trivial. 
http://php.net/manual/en/features.commandline.webserver.php &gt;"app/console server:run" if you use a symfony app &gt;"artisan serve" on laravel I'm sure other frameworks will have their own commands
Just for ease of searching, I'd structure it: wordlist["word"] -&gt; array("origin","tense"); so for running: wordlist["run"]['origin'] = "run"; wordlist["run"]['tense'] = "tense"; wordlist["running"]['origin'] = "run"; wordlist["running"]['tense'] = "present tense"; wordlist["ran"]['origin'] = "run"; wordlist["ran"]['tense'] = "past tense"; That way, all you have to do is check for wordlist[Search-term]['origin'] and ['tense'] to see if it exists and what it is. Should be a bit more resource-friendly than string-searching values of arrays. But even more resource-friendly, if you use databases made to search through huge lists. Arrays work, but they are expensive on your resources. Especially multidimensional associative arrays. 
&gt; must have at least one method ... If, so then that is what interfaces are for imho. Besides, you never know what StartableInterface() may need to implement in the future. To be on the safe side, separate your concerned always. 
Do consider LAMP/WAMP/XAMPP. One click installers are easily available and you can get running minutes after installation. If you are interested in web dev, it helps to know how the backend works too. One big benefit of running your own production server locally is that you can test changes and even run developmental sites before deploying them live. When you combine that with the power of tools like Git, Subversion or Mercurial, you can go really far. :)
so shared code couldnt be read or changed. I saw this in some plugin i was using once and its alwasy a dick move. 
Yeah, I downloaded xampp and set it up, but my php files arent running properly in it. I put them in the xampp/htdocs folder but theyre still not working
Except it doesn't stop that at all. PHP can be relatively easily "decompiled" from opcodes, so you have to do something like having essential parts of the application as extensions (which then severely limits your potential install-base and you have to keep the extension binaries up-to-date as new versions of PHP are released) or remote web-services.
For PHP there's never been a good reason. Disk space is cheap (and at 7KB, you're not saving a significant amount anyway). Unlike with JS, CSS and HTML, there's no bandwidth saving because PHP source files are never transferred to the client.
I am already decent at html and css with less than a week since I started it. Im not the type of person who gives up easily, but this apache thing just wasnt working on my comp. I downloaded xampp and installed it though, but I can't get it to run my php still
[Imgur](http://i.imgur.com/Ala8k9m.gif)
The answer is: it depends. From the context you've given, there's no way to tell. My rule of thumb is that interfaces should be adverbs that describe the responsibility present. If the code is really startable, then that's fine, and use that interface name. But if it describes a more general concept, then generalize it. Let me give an example from real code: The [PhpParser `NodeVisitor` interface](https://github.com/nikic/PHP-Parser/blob/master/lib/PhpParser/NodeVisitor.php) has 4 methods: interface NodeVisitor { public function beforeTraverse(array $nodes); public function enterNode(Node $node); public function leaveNode(Node $node); public function afterTraverse(array $nodes); } I've worked a lot with that package, and I've never needed more than 2 of the methods at the same time. So is it worth splitting that into 3 or 4 interfaces? I don't think so. The current interface describes the behavior of a Visitor quite well. And while from a practical standpoint you may not need them all separated to use, they all are together required for the abstraction that was made. And that's the key. Don't make an interface because you want to specify a method. Make an interface to specify an abstraction. Startable and Stoppable sound like a similar abstraction, so I'd likely put them together into a single interface (again, depending on the underlying meaning of those verbs).
Maybe you should learn some basics, before you start giving advice.
I just made a simple echo hello world program and saved it as .php in the /htdocs folder, but when I navigate to it through file///C:... it just displays the full text of the code and doesnt actually run it. The only thing I need php for is to update an img, text, and link across multiple pages. So I figured I can just link the php function in the html, so when I change the php file all the html files will update. If thats wrong let me know please...
That answer was totally worth the down votes!
I develop in an offline environment to keep things safe and secure. 1) Install VirtualBox 2) Install Debian Linux in VirtualBox as a VM as a desktop system (no Apache, MySQL, etc YET) 3) apt-get install apache2 4) - apt-get install php5 php5-mysql libapache2-mod-php5 5) - create test.php in /var/www containing: &lt;?php phpinfo(); ?&gt; to make sure everything is working. 6) apt-get install mysql-server mysql-client and then apt-get install phpmyadmin Point your browser to localhost and you're off and running.
Just rofl.
Which is why I hoped they'd rather create some kind of "template interpretation engine" that could be fed by a json- or XML-file, thus using the crowd to provide the actual interpretation and just supplying the hard coding stuff. But alas, they chose differently. Hopefully Laravel will stay a while before the next framework with their next templating engine comes along.
Besides it's stupid to minify PHP, they didn't even renamed the variables/methods to have shorter names to minify it :D
I would love to hear the author's thought process about this, maybe it's just intended as a gimmick? Either that or they've come from doing front-end development and not realised that it's totally unnecessary (and even counter productive) for server-side code.
[Version-eye](https://www.versioneye.com) does this, i think there are a few others too
I tried wamp, but the installation had tons of errors and files missing. Then I downloaded apache and the windows visual x64 things but they wouldnt run in the command prompt. I got xampp now though so I'm fine
Thanks for sharing that. Actually it does one part of it, monitoring releases. My idea is more like a project dashboard tool that you can self host and configure yourself.
An alternative approach is duck typing: assume those methods are available and call them, and if the user passed in something wrong, well, they'll get an exception.
Lot's of wtf's here... This isn't valid PHP: echo &lt;br&gt;; Neither is this: print{"You are beautiful"}; This compiles, but is nonsensical and useless: $Country=array('America','England','Japan'); echo $Country; And then there's the text, which even if you ignore the nuances of an ESL author, is still problematic (like using `keyword` when the term should probably be `identifier`, and using `frame` in a context which it doesn't exist).
So many horrible horrible mistakes. Do the Internet a favour and delete this article right now, then don't produce any more until you've actually coded some PHP. This is so bad I'm reporting it for deletion as it's worse than useless.
Hi everyone. I'm the dude who started www.versioneye.com. The initial ideas was to get notified about new versions. But in the meanwhile VersionEye also shows you the licenses. Security and links to changelogs are the next step. It's not super official yet, but there is a self hosted version available, VersionEye Enterprise. A big company is using it already inhouse, to track their own developed modules which are not open source. The feedback so far is very good and a official landing page is coming soon ;-) 
I know!
While it isn't ideal for many applications, I've seen compressed (or "minified") code as useful for single-script applications like Adminer. It helps for transmission over the internet. But, your normal everyday code? Nope.
I'm going to play devil's advocate here and suggest that minifying _could_ be useful for embedded devices. However, I'm not sure which types of environments would benefit from saving a few kb's... probably none in the modern age.
No need, i converted a minifies package to composer, took me like 3h. Dont do it, its serverside 
Bad tutorial... claiming single and double quotes are the same. To put it simply single quotes are literal strings and variables will not be expanded. whereas double quotes will expand variables. To view an array clearly use print_r and wrap with &lt;pre&gt;&lt;/pre&gt;. 
You could also have the 3 different interfaces and have each client implement whatever of the 3 interfaces it implements. Then check using a similar method to /u/mikedelfino 's comment above to see whether it should have that method or not. example: class ClientOneAPI implements StartableInterface, StoppableInterface { public function start() { return 'started'; } public function stop() { return 'stopped'; } }
Nice work ! I was looking for an idea for my first open source project, but looks like you already thank it through, kudos to you ! 
Now working since 3 years on it. Currently tracking more than 400K open source projects from 27 languages every day and collected a whole bunch of meta information. For example 1.5 Million license informations to OS artifacts. In the beginning I didn't thought that it would be so much work. I totally underestimated everything. But now it's to late, I keep moving :-) 
Every class with public methods has an interface &gt; [this is the nature of an interface](http://php.net/manual/en/language.oop5.interfaces.php) So you **should** have at least one interface. However sometimes this interface is just too broad to specify as a dependency, in which case you then specify a separate interface just for that behaviour (or group of). I would probably go with interface ClientInterface { public function start(); public function stop(); } interface ClientDetailsInterface { public function getDetails(); } class Client implements ClientInterface, ClientDetailsInterface Another reason that leads me to believe that the ClientDetailsInterface should be separate is because I very much doubt that stop() and start() actually have anything to do directly with the property (and its value) of the getDetails(). By breaking those methods into separate Traits will better indicate the interfaces for those traits which can then be combined together etc ...
Ok, I got it now. Any subfile of htdocs needs to be written like http://localhost/subfile1/subfile2/file.html
It wasn't a genuine question, I am a mean old dev!
 public function getNameAttribute() { return $this-&gt;attributes['first'].' '.$this-&gt;attributes['mi'].' '.$this-&gt;attributes['last']; } Then at the top of your model class put protected $appends = array('name'); Which will then allow you to do $user = User::first(); echo $user-&gt;name; // John Doe Smith
Oh god. Content spinning is like the hottest thing in blackhat SEO. Makes me spastic with disgust. 
+1 for .phart files
Hmm. Okay. So that worked, but like most things I still only have a basic understanding of WHY that worked. Let me try my hand: So basically, the $this-&gt; has to point to attributes first, because the eloquent model doesn't actually store the data in it's fields, it stores it into the "attributes" array. Then, we use the function get[WhateverYouWantToCallThisProperty]Attribute() to set the attribute, and we add it into the $appends variable array so that Eloquent knows to load it into the 'WhateverYouWantToCallThisProperty' property of the final model when in a View or Controller? So if I wanted to add another field, for say office and I had the db columns `office` and `building` I could do something like this: protected $appends = array('name', 'officeBuilding'); public function getNameAttribute() { $mi = $this-&gt;attributes['mi']; if (strlen($mi) == 1) { $mi .= '. '; } return $this-&gt;attributes['first'] . ' ' . $mi . $this-&gt;attributes['last']; } public function getOfficeBuildingAttribute() { return $this-&gt;attributes['office'] . ' ' . $this-&gt;attributes['building']; }
Yeah, I have an instance of Satis running. What I am trying to do is avoid having to list it in every composer.json file, I want to set it globally so it is automatically searched.
That is what the composer.lock file does. You should commit it to your repo, so when you are deploying with `composer install`, you'll always get the same version. This also means you should *never* run `composer update` in any automated fashion. More info [here](https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file).
This is exactly the purpose of the composer.lock file. It keeps track of exactly what version of each package was installed. When you run composer install, the versions from the lock file are installed. It's composer update that will install the latest versions. TLDR; ensure both composer.json and composer.lock are in your source control, unless you're writing a library.
Absolutely. But the interface should contain all the methods required for an implementation to do its (highly focused) task(s). One of the most simple examples might be something like this: interface StringFormatter { public function format($str); } This would be a great interface. The purpose is clear and highly focused. SRP plays a huge role here.
Close. $this-&gt;first does work, but you can manipulate it and $this-&gt;attributes['first'] is the actual data from the database. get[WhateverYouWant]Attribute() allows you to set that attribute, so then you can call $this-&gt;whateverYouWant and get that result. protected $appends = array('whateverYouWant'); just tells eloquent to make that function be a real attribute when you dd(Model::first()); you'll see 'whatverYouWant' set in the object.
Sure. In fact, some times it might even be fine to have an interface with no methods at all. See [marker interfaces](http://en.wikipedia.org/wiki/Marker_interface_pattern).
Maybe output buffering is turned off on the web server while on the dev box it is,check your php.ini to see if it on or not
I contacted iPage support a couple times. And they told me the php.ini file looked fine. Said it was most likely a "scripting" error
There is a pretty severe drawback that isn't mentioned, which is, method statics are actually global variables, not instance variables. So every instance of a class will share the same set of statics. For example: class S { function v($v = null) { static $save; if($v != null) $save = $v; return $save; } } $a = new S; $b = new S; $a-&gt;v(1); echo $b-&gt;v() . "\n"; $b-&gt;v(2); echo $a-&gt;v() . "\n"; Will show that $b-&gt;v() contains a 1 (when it hasn't been set), and $a-&gt;v() contains a 2 (when it's $b that's been mutated not $a). Also, with regard to the second drawback listed, there might be something odd going on with his specific test case, but, I can't reproduce it: $o = new stdclass; $a-&gt;v($o); $o-&gt;test = 1; var_dump($a-&gt;v()); returns class stdClass#3 (1) { public $test =&gt; int(1) } as one would expect.
Do have access to the file tho? 
Do I have access to the file? I never checked honestly, using a hosting site is completely new to me. I will check to see if I do though when I am home
That said, you could make something like this work in the general case by doing something like: class S { protected $_id; public function __construct() { $this-&gt;_id = //generate something unique } public function __destruct() { $this-&gt;_field(null, true); } public function field($value = null, $destroy = false) { static $values = []; if($destroy) { unset($values[$this-&gt;_id]); return; } if($value !== null) $values[$this-&gt;_id] = $value; return $values[$this-&gt;_id]; } } That is, by having a unique id field that can disambiguate instances of the class, and a destructor that clears the field. One could go further, and make the combined setter/getter be a protected function with a separate public interface to provide access control (to prevent public access to setting, or triggering destroying the value.)
I heard the reason for this is to minimize the time needed to deploy new versions on production. Basically during transfer the application behavior is undefined, so it should be done as fast as possible. It's also a bit easier to manipulate around with just one file. Personally I'm neutral on minifying, I don't see any significant gains nor drawbacks.
Could a custom var_dump be written using reflection? Perhaps use some sort of filtering system or look at the doc comment for something like @hidden maybe? $r = new ReflectionClass($object); $props = $r-&gt;getProperties(); foreach ($props as $prop) { $comment = $prop-&gt;getDocComment(); if (tag($comment, '@hidden')) { // Hide property } else { // Recursively dump property dump($prop-&gt;getValue($object)); } } Or something of that nature?
&gt; I am already decent at html and css with less than a week since I started it. You might think you are, but unless you're some kind of child prodigy you really aren't. I've been writing software for over a decade and like every other professional programmer here, I still haven't stopped learning.
&gt;Drawbacks To This Approach You might get slapped by anyone who has to maintain your code? 
Try output buffering: ob_start(); Place it on the first line of your file(s). Not really good practice but we'll see past that. It's weird it does work on your dev-box if output buffering isn't on. I'm guessing you got the "**Headers already sent**"-error? That's because you already echo'd something to the screen. Headers always have to be sent first and only then you can start echoing things. ob_start(); captures whatever you echo and only sends it when either the buffer gets full or the script has run, thus fixing that issue. &amp;nbsp; About the file upload: I'm not really sure what the problem could be. My best guess would be that you haven't set the correct permissions on your upload directory. &amp;nbsp; Next time try to format your post. It's really hard to read ;)
Thanks for the advice, I will give it a shot when I get home, However right now I am including my header.php on all my pages. At the very beginning of the header I have the session_start(). So there shouldn't be anything being echoed before that. I will try out the ob_start(), but if I am using header.php for all pages I should just put it above the session start there correct? not on all the pages
Funny, I've done something akin to this. We have a number of dynamic sites with a range of vehicles, to generate a sitemap, I read the rewriteRules from the .htaccess file, and then populate the links with the correct info. The short version is, I rewrite the regular expressions as c-formatted strings ([\^-/]+) becomes '%s' and ([0-9]+) becomes %d. Then I loop through the makes and models to generate the links. // RewriteRule ^([^/-]+)/([^/-]+)/([0-9]+).html /car.php // Convert to c-string $rule = '%s/%s/%d.html'; // loop through cars $cars = array( array('toyota','corolla','2013'), array('toyota','camry','2013') ); vsprintf( $rule, $car[0] ); // toyota/corolla/2013.html vsprintf( $rule, $car[1] ); // toyota/camry/2013.html
This hasn't been documented yet (don't ask), but PHP 5.6 will introduce [a __debugInfo() magic method](https://wiki.php.net/rfc/debug-info) that allows you to control the var_dump() output for your objects.
https://github.com/nicolas-grekas/Patchwork-Dumper
Great to hear you include stuff you need everywhere! You can indeed place ob_start(); in front of the session_start(); and hopefully that fixes that error! Don't forget to report back so we know! ;)
Most of the common use cases can be easily picked off the unit tests. As for extending the API, that might be a bit tricky. I'd be happy to write the code to allow for random walks given that someone would actually use it :)
Well my homepage looks decent sofar. I guess I've just got the basics down
Thanks for the info! I have updated my post with this :)
Tests aren't really proper documentation. If you don't write documentation, nobody will use it.
never mind, I figured it out
Any device that would benefit from that scale of minification would benefit more from not using PHP in favor of something more terse.
Yeah, I admit the chances of it having any real applicability is practically 0.
looks like it worked =) I no longer have to refresh to see that I logged in. I am able to insert data on certain spots of the site now, but some still can't. Probably a small code change I need to do. I am still getting error messages like this in the log in iPage though. PHP Warning: session_start(): Cannot send session cookie - headers already sent by (output started at /hermes/bosoraweb074/b294/ipg.dynimecom/functions.php:3) in /hermes/bosoraweb074/b294/ipg.dynimecom/header.php on line 5 PHP Warning: session_start(): Cannot send session cache limiter - headers already sent (output started at /hermes/bosoraweb074/b294/ipg.dynimecom/functions.php:3) in /hermes/bosoraweb074/b294/ipg.dynimecom/header.php on line 5 edit: nevermind I think I was looking at old errors, when I refreshed the error log I was expecting it to clear out the old errors lol
Ah yeah I gave up long ago on installing and configuring server setups in Windows. It does suck and eventually you'll install something and end up wasting a lot of time debugging configuration for something really simple. My personal setup that I rarely have to do much messing around with config wise: 1. Install VirtualBox https://www.virtualbox.org/wiki/Downloads 2. Download xubuntu 14.04 http://xubuntu.org/getxubuntu/ *I use Xubuntu as it's really light on graphics so super fast, I've had a issues and find on a lot of machines Ubuntu 14.04 can run really slow because of its GUI. Plus I just want it primarily for Unix command line and to run a server* 3. Install apache - enter terminal and two commands: sudo apt-get update sudo apt-get install lamp-server^ https://help.ubuntu.com/community/ApacheMySQLPHP 4. In terminal 'chown -R username:usergroup /var/www/' *This makes your user owen of the /var/www/ folder; particularly for when using samba (step 6) this will make life a bit easier* 5. Set the IP in your Windows host file (C:/windows/system32/drivers/etc/hosts) 6. Install samba to enable folder access in Windows: http://rbgeek.wordpress.com/2012/04/25/how-to-install-samba-server-on-ubuntu-12-04/ Best thing with (x)ubuntu is it's ubuntu, so there's shit loads of help via Google. If you're not used to Terminal just try it, it sucks at first but you'll pick it up really quickly and realise how much nicer it is than trying to edit config files in Windows and mess with various services. If you want any help just reply or message me and I'll try help! It really gives you total control (and usually you won't have to really edit anything), and is the closest replication to a live apache server I've found.
So the transfer time from deploy machine to server is slow and that leaves app in unstable state? Surely a better fix is to transfer from deploy to tmp folder on server then do a local copy to real folder? Then transfer times can be as slow as you want, but the local copy operation will always be fast and broken app time minimised.
Great! I still don't understand how it could've worked on your dev-box without ob_start(). If you need more help you can always post at /r/PHPhelp.
I rarely get asked to write code during an interview, however, there have been a few times where I had to write code outside of the interview. The following come to mind. - Had to do the boggle challenge and have it turned in within a few days (weren't too strict on the time frame). https://github.com/milesj/boggle-challenge - Had to implement a File/Folder tree class system that would recursively map out a directory. Had about 24 hours to turn this one in.
Conceptually this is fairly straightforward stuff. Just parse the regex, turn all the pieces into generators (random, iterators or whatever), and concatenate the results of invoking them all. Good luck parsing PCRE with PHP though.
That Lowrey sure is a hearthrob!
Is "docblock everything" really an attribute of quality? Create docblock just for the matter of docblocking everything?
I think they mean make sure everything is documented with docblocks. not empty docblocks. Solid documentation is indeed an attribute of quality
Not PHP, but I applied for a dev position as a Classic ASP developer. I figured, even though I had been a php dev for about a decade, this would be ok. Before getting an actual interview, I needed to pass their coding interview. I had 45 minutes to do the following: * fix an example of connecting to a SQL database with their ASP library. * write a piece of javascript that would do some calculations (can't remember exactly what, just remember needing to do a parseint). * use CSS to style an html table All of this was open-internet, so any issues I had I could research, but thankfully I didn't have many. After that test, there was a 15 minute essay on "we're need to do X project, what questions would you ask." I did the test and then left. Got an email 20 minutes later that I had aced it and that "no one aces the test, when can you come back to interview." Should have been a red flag (no one aces those tasks with open internet access?), but I needed a job. It turned out to not be a good fit. 
Yep, solid documentation is quality, but they did not say that :) If you ask me what I think is good docblock, is docblock containing not only method description like: `setText` - sets text, but with method usage examples. If I don't write examples, I don't write docblock either (unless created by IDE). In perfect world, I'd like to see all docblocks to be like this https://github.com/Codeception/AspectMock/blob/master/src/AspectMock/Proxy/Verifier.php#L61 But back to question, they say nothing about quality of docblocks )
It looks a lot like the league of extraordinary egos.
Aka compile
One of the best things you can do to increase your efficiency/productivity is to plan what you're doing before doing it. Break large problems up in to smaller ones and use a ticketing system to prioritize them. Break this set of tickets up in to milestones and create a timeline. I realize this sounds like a no-brainer but you'd be surprised how many people design software off the cuff with no clear idea of where it's going.
yeah, they should probably expand on that
Document your code using something like PHPDoc and if you're not doing something *quick and dirty*, try to find a good framework that can do some of the heavy lifting and from validations.
learn java, then J2EE, then go crazy in applying every design pattern and highly-abstracted architectures you can find into your php apps. it's the latest trend here. your php app needs to be future proof for any imaginable feature that might come. oh and be sure to use the correct terms everywhere. people go ape-sh*t about it.
Perhaps. Depends of the code is actually useful. I'm going to take a look. 
There is this list out there of "stupid interview questions when hiring a programmer" and this is one of them. I had to do it once when I was interviewing for an internship. The test had no basis in reality since your suppose to work as a team. The thing I was supposed to do was copy paste an online resource it turned out. In reality you just wouldn't let an intern / new employee hanging like that. 
Use an MVC. I prefer Laravel.
Getting a good grip on vanilla PHP should be first. Though I love and use Laravel as much as I can.
Hi, no google. Just write the code in a paper. I do the same as what you do. I just know what to look up in the internet. Just so happen that list have already amazed me before and I just know that I have to put it in array and explode it directly. Haven't done any cheatsheet of my own yet, i think that is a good idea. But I have snippets of functions that does specific things. Example, a snippet of time conversion to something like 1 hour and 45 minutes ago.
Try not to be stupid!! I mean don't go the google-"php guestbook tutorial"-copy'n'paste-way. I'm not a big fan of starting with a 'big' framework. Find a problem and think about a structure before you start. It nearly doesnt matter which problem like mentioned before. After you think you have finished, look how other people have solved that same problem and try to understand. You might refactor you code (or some parts) after that, try to replace some parts with better ones. It wont help to have a working script/class/app/whatever if you dont understand how it plays behind the scenes or even on stage :) Back to topic and error managememet :try to understand how to use exceptions (try, catch, throw, forward (maybe an exception handling class...)). After all: be a pro, make millions and millions and remember people in this thread (share your millions) :) 
Thank you. I haven't been copying/pasting. I haven't even been using frameworks (yet) so I can learn on my own how to do everything. I'll look into exceptions, though.
This approach does not make me happy and will get a -1 in a code review from me. If a class says it implements a method in an interface but always throws an exception then it's violating the Liskov Substitution Principle.
Even better, use symlinks. Have your site DocRoot be a symbolic link. Just deploy your code to something like /var/deployed/&lt;unique-id&gt;/, then when the transfer completes update the symlink to point to the new repo, then delete the old one. Instant cutover, broken app time ~~minimized~~ eliminated completely.
Use a framework. Learn design patterns. Learn/use source control.
Or even look at it.
I think you're better off writing a recursive function that limits the depth printed. I believe [Kint](http://raveren.github.io/kint/) does this out of the box. One should never go out of his way to make inferior design decisions just so that `var_dump` behaves a little nicer should you need it.
&gt; not checking to see if all of the forms have been filled if(!in_array("", $_POST)) { //all forms are filled } Just my 2 cents :)
You should delete your post since it's completely nonsensical. [This post](http://www.reddit.com/r/PHP/comments/2czksk/hiding_variables_from_phps_var_dump/cjkoopk) thoroughly explains the issue. The code doesn't do what you seem to think it does inside of a class. 
Learn to use composer and leverage community packages. In your example case you'd want a validation library. For example, utilizing https://github.com/Respect/Validation use Respect\Validation\Validator as v; $formValidator = v::key('field_one', v::string()-&gt;length(1,32)) -&gt;key('field_two', v::alnum()-&gt;noWhitespace()-&gt;length(1,15)) -&gt;key('field_three', v::numeric()); try { $formValidator-&gt;assert($_POST); } catch (InvalidArgumentException $e) { echo $e-&gt;getFullMessage(); }
I really like this. Being able to use it like below would be even better, i.e no need to store $this-&gt;callable, call_user_func_array($callable, $resolver-&gt;resolve($callable, $parameters)); Traits would also be nice :) 
I didn't realize you could use in_array, I normally did each parameter with ||.
For a bit more info on this you can also look up accessors and mutators
No Problem. Didnt want to rebuke you, its just that ive seen many people starting that way :) Most important : have fun! Greetings from germany
 /** * Get the day of the month * * @return integer The day of the month */ public function getDayOfMonth() { return $this-&gt;dayOfMonth; } This is an example of noise docblocks. They should be avoided, and we don't need it at all. Having a clean, readable and therefore maintainable code is what you should focus.
Some links that always go around here. http://www.phptherightway.com/ http://www.oodesign.com/ - OO Design Patterns http://overapi.com/php/ - PHP Cheat-sheet Regarding forms, you'll probably want to use Javascript to generically check for Form-fields with "required"-attribute on Submit, before actually submitting. In the end, that specific problem is just about certain fields not being empty. that can be done generically. You have to verify the input in any way, but it helps reducing php-errors, as you can just go and check for any required field being empty (or default value). But in a way it depends on how much forms you need. If your whole project is about forms (survey site for example), you might want to build a generic system that builds and evaluates forms automatically. For just a few contact-forms, that's a bit too much though. Unless you have too much time on your hand and feel like exploring that option a bit. /myfewcents
They have a website. And a logo. How can you even deign to doubt their authenticity?
Pierre Joye was incredible oppositional and negative. And some of his arguments were silly - e.g. he started out by arguing that a 100% performance increase was not important, and that they should work on the user friendlyness of the extension interface instead. It seems to me that much of the percieved controversy was just one man's no-holds-barred opposition.
At my current position, Lead Developer, I assist in new hires for my department of which I tend to apply a small coding test. Must be something fast (tops 1 hour), non-work related, something fun like little games: I say the rules, you build. I apply the test in some kind of pair-programming, remote or physical, but I keep my eyes on his coding all the time. On this tests I basically want to get a feel of how someone tackles a problem: Does the candidate apply TDD or does it test at all? SOLID principles? Clean code? etc.
My tips may not be as cool or new, mine is rather simple but not always executed. Assume Nothing, But Verify and Validate everything.
Thank you for the feedback. I thought about passing a callable along with parameters as well, but the disadvantage is that you need to build a reflection object every time you do a resolving, even if you do it for the same callable. Storing a callable in a resolver allows to optimize this. But I agree that there are use cases when this optimization is not necessary, and for that purpose I'm thinking I will implement functions: resolve_callable_arguments(callable $callable, array $arguments); resolve_reflection_arguments(ReflectionFunctionAbstract $reflection, array $arguments); and utilize `resolve_reflection_arguments` in the resolver.
I feel like I should add this to my post, but that would feel like stealing... Would be stealing. This is something you should learn to do with your projects as you go along for sure, it will also help you learn to do what is one of my weak points at work, estimating the time for a task. I personally use Redmine. It's built in a ruby, not php, but its simple, clean and does everything I need.
I would suggest always using some abstraction to interact with the super globals. So a class that sits between you and $_POST. 
A. Don't use var_dump. B. use error_log and trap specifically for what you are debugging, and dont lazily dump the entire object hierarchy. C. View error logs using tail. 
&gt; 18 years, still always learn something new if not daily, then weekly. Yeah, 15 years or so here, and absolutely... the options are learn new stuff constantly, or watch your career stagnate and die. 
Just to be clear, the example I gave was something I would **not** do.
&gt; I keep my eyes on his coding all the time I would just walk out of the interview. 
There is no denial that a good documentation is an attribute of quality. This discussion is about on whether "Docblock all the things" (sic) brings quality or not. I say no, and instead I propose "Docblock public APIs and abstractions".
At a previous company, we used to give candidates an hour to code a simple guestbook. They had access to a laptop with a full development environment, and to the internet, and were left on their own. You'd be surprised to learn how many failed the test, just because they deemed it too simple. Usually they forgot input validation, or did it wrong. Now whenever I must hire first-year interns who don't have much programming experience at all, I start with a fizzbuzz because it shows which candidates can actually become programmers. 
May I ask you why? I mean, that's what [Pair programming](http://en.wikipedia.org/wiki/Pair_programming) is. If you don't like Pair programming and/or the benefits it brings I wouldn't have a second interview with you (where I would apply this).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Pair programming**](https://en.wikipedia.org/wiki/Pair%20programming): [](#sfw) --- &gt;__Pair programming__ is an [agile software development](https://en.wikipedia.org/wiki/Agile_software_development) technique in which two [programmers](https://en.wikipedia.org/wiki/Computer_programmer) work together at one workstation. One, the __driver__, writes [code](https://en.wikipedia.org/wiki/Source_code) while the other, the __observer__, __pointer__ or __navigator__, [reviews](https://en.wikipedia.org/wiki/Code_review) each line of code as it is typed in. The two programmers switch roles frequently. While reviewing, the observer also considers the "strategic" direction of the work, coming up with ideas for improvements and likely future problems to address. This frees the driver to focus all of his or her attention on the "tactical" aspects of completing the current task, using the observer as a safety net and guide. &gt;==== &gt;[**Image**](https://i.imgur.com/NBMIsPQ.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Pair_programming_1.jpg) - *Pair programming* --- ^Interesting: [^Extreme ^programming](https://en.wikipedia.org/wiki/Extreme_programming) ^| [^Agile ^software ^development](https://en.wikipedia.org/wiki/Agile_software_development) ^| [^Code ^review](https://en.wikipedia.org/wiki/Code_review) ^| [^Saros ^\(software)](https://en.wikipedia.org/wiki/Saros_\(software\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjleao4) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjleao4)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I think you've got the order backwards, but I agree with these: source control first, design patterns, then a framework.
&gt; I feel like I always miss something when parsing forms. You're not. The language has a batteries-sold-separately policy when it comes to web security. Try the _filter_ extension on PECL.
I absolutely version control our source. We primarily use Git.
Looks really nice, just add a simple invoice generator/tracker and I'd install this immediately. Then you can advertise it as an all around small business tool.
I just won't understand why they would need my email just for downloading ... Unless they are selling it and/or sending some stupid newsletter which probably is impossible to unsubscribe -.- How am I even supposed to use tools like wget to download that to my server?
It looks like a lot of work went into this. Can I make one suggetion, that you get a designer to even out some of the rough edges. I saw enough small inconstancies from the screen shots to know that its developer lead. It looks like a really nice project. 
I just downloaded it, used scp to copy to my server, then installed it. You could just upload to Google Drive and wget that way as well. 
For the candidate, it's pair programming with a total stranger, and that stranger has your fate in their hands. In my opinion, the inherent asymmetry makes that a recipe for uneasiness. 
Agreed, was looking for this on GitHub, nothing so far, but that would make it a lot easier to install and make it much more accessible via cli. 
I remember learning for loops, they changed my life. No longer do I have to 80 lines of code for one thing!
I am currently moving all the files to github. Will share the link once its done. For email: I am not going to send you any stupid newsletter. your email is just to let you know if there are any updates. Also I am in process of making in-app update system (like wordpress). Once its done i will no longer need your email address.
Absolutely, yes. Docblocks are useful primarily for two reasons: * IDE integration for features which are ambiguous or impossible based on the language syntax and context itself, and * Automated generation of documentation from the source code (using e.g. [phpDocumentor](http://www.phpdoc.org/)). That doesn't mean you can't write quality code without docblocking all the things, by any means, but it's always nicer to have it than not.
You obviously took the name way too literally. It's just an amusing tip of the hat to the [LoEG](http://en.wikipedia.org/wiki/The_League_of_Extraordinary_Gentlemen).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**The League of Extraordinary Gentlemen**](https://en.wikipedia.org/wiki/The%20League%20of%20Extraordinary%20Gentlemen): [](#sfw) --- &gt;___The League of Extraordinary Gentlemen___ is a [comic book](https://en.wikipedia.org/wiki/Comic_book) series written by [Alan Moore](https://en.wikipedia.org/wiki/Alan_Moore) and illustrated by [Kevin O'Neill](https://en.wikipedia.org/wiki/Kevin_O%27Neill_(comics\)), publication of which began in 1999. The series spans two six-issue limited series and a [graphic novel](https://en.wikipedia.org/wiki/Graphic_novel) from the [America's Best Comics](https://en.wikipedia.org/wiki/America%27s_Best_Comics) imprint of [Wildstorm](https://en.wikipedia.org/wiki/Wildstorm_Comics)/[DC](https://en.wikipedia.org/wiki/DC_Comics), and a third miniseries and a graphic novel published by [Top Shelf](https://en.wikipedia.org/wiki/Top_Shelf_Productions) and [Knockabout Comics](https://en.wikipedia.org/wiki/Knockabout_Comics). According to Moore, the concept behind the series was initially a "*[Justice League](https://en.wikipedia.org/wiki/Justice_League)* of [Victorian England](https://en.wikipedia.org/wiki/Victorian_era)" but quickly grew into an opportunity to merge several works of fiction into one world. &gt;==== &gt;[**Image**](https://i.imgur.com/NODRhZC.jpg) [^(i)](https://en.wikipedia.org/wiki/File:League.jpg) --- ^Interesting: [^The ^League ^of ^Extraordinary ^Gentlemen: ^Black ^Dossier](https://en.wikipedia.org/wiki/The_League_of_Extraordinary_Gentlemen:_Black_Dossier) ^| [^The ^League ^of ^Extraordinary ^Gentlemen, ^Volume ^II](https://en.wikipedia.org/wiki/The_League_of_Extraordinary_Gentlemen,_Volume_II) ^| [^The ^League ^of ^Extraordinary ^Gentlemen, ^Volume ^III: ^Century](https://en.wikipedia.org/wiki/The_League_of_Extraordinary_Gentlemen,_Volume_III:_Century) ^| [^The ^League ^of ^Extraordinary ^Gentlemen, ^Volume ^One](https://en.wikipedia.org/wiki/The_League_of_Extraordinary_Gentlemen,_Volume_One) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjlh3st) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjlh3st)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
This is probably what I was thinking about looking for (heh), but the screenshots aren't very helpful. Any video or summary what this is for? These screenshots need real life data. Or perhaps a demo. I'll still give this a try at work but I'd much rather learn if this is a replacement and/or supplement for our current project management app (iceScrum) or issue tracker (in the process of setting up).
Bookmarked for playing with next week. Quick note. You have a typo on the download page. "Extendsion"
Suddenly, Apache is crystal clear.
I don't think it matters who says it, or how many times it gets said as long as someone brings it up. It's a common industry practice so add away. It's as much "stealing" as it would be if someone drew yet another diagram of a wheel.
Why must you force a lead by requiring an email address? You know I'm just going to mailinator and giving you a bogus one right? It's such a nasty anti-pattern that so many people try to implement. I'd be more than happy to supply my email AFTER I've downloaded and tried the product.
Noted. But as I mentioned in earlier comments the only purpose of your email is to notify you for the updates. 
Why would you give out your mail? I use john doe's all the time. 
Do you mean to make the resolver invokable? $resolver = new CallableArgumentsResolver($callable); $resolver($parameters);
All done with default error level on the biggest polish hosting platform (Home.pl) 1. Wont install due to `$data['prefix']` beeing undefined in InstallController::postDatabase 2. Can't finish installation due to beeing unable to load resources from /install/ (last step, creating user account); bypased that by unbinding submit even from the form 3. Can't login, as clicking the button dosen't do anything (once again, bypassed by unbinding submit) 4. Fails after logging in (http://i.imgur.com/GmOS3jR.png)
Thanks for the link. Your resolving algorithm looks a bit different. I'm curious how your container will resolve the following: $callable = function (DateTime $foo) { ... } $parameters = ['foo' =&gt; 'bar', new DateTime()];
You shouldn't care _how_ the method works. You should care what the method _does_. That's why good method names and good documentation are so important.
Looks promising, but imo there are better alternative for developers. But it looks nice and has a great amount of useful features for the ordinary man. That is probably also who it is designed for, but then the self hosted part I don't get.
What are these alternatives?
&gt;You have a typo on the download page. "Extendsion" And in the title of this post.
one thing that comes to mind is http://openatrium.com/
It doesn't try to map types in the given parameters, there are 2 ways to resolve a parameter: - either by an array key matching the name - either by a container entry matching the type So here it would be `bar`. The idea is that a callable can take 2 kinds of parameters: values and services. Services come from the container, and values come from the array.
His comments were somewhat reasonable. The internals are now nastier in some places, and performance isn't everything.
Hi, sorry I am sorry that my reply is this late, was not on Reddit that much. With that I meant that in order to set up a test for helper, you would only need to call Mage::app() in the setUp method of your test class. You could then easily call any helper methods in specific test methods. For blocks for example you would have to mock entire layout in order to test it. Now if for some reasons you call other stuff inside your helper methods you would have to do some more work in order to isolate, I just meant that the set up process is easier with helpers. Hope that helped :)
Yeah, that way it can be substituted for the original callable and would/may not be noticed.
Some of his comments very reasonable on the surface and in isolation, if you assume good faith. The mixing in of incredibly unreasonable and butthurt comments in between (e.g. completely dissing the 100% performance goal) makes it very hard for me to assume good faith. Once you lose faith in his ability to make technical comments in good faith, it just becomes a waste of time. You can see most of the other contributors on the internals mailing lists are currently just ignoring him, for the same reason. And the [RFC vote is currently 34-0](https://wiki.php.net/rfc/phpng), so it would seem that PHP developers in general are not taking him entirely seriously.
What's wrong with not thinking performance is the only objective?
The latest Github update has some decent stuff for your git repository. There is also Github Enterprise, Trac, Redmine, HuBoard (for Github) and quite a bit more.
&gt; This hasn't been documented yet (don't ask) Apparently when the patch was written, the author forgot to update the NEWS and UPGRADING files, which we use to know what needs documenting...
Thanks for the feedback. Why do you think my solution will not handle the large input? I have tried it on large input and works perfectly well. Don't think it's 2 seconds though. I think that your solution way overcomplicated and that you took harder way to accomplish the result. You know for this kind of stuff you always want to take the easier path. But after all I am glad if your solution works :)
It's not always safe to substitute the original callable and personally I would avoid doing so. And it's not very clear what `$resolver($parameters)` does - returns resolved array or calls the callable.
Huh?
And your soul with it.
Not the op, but in the title it says php files are working.
Do you remember what the fundamentals were for the guestbook? I would love to set up a test scenario outside of an actual interview.
What type of positions did you apply for; Entry Level or Sr. Developer?
Look in /Applications/MAMP/logs/php.log. You can use Console.app to open the log - it will give you a good clue. If all other files are working, create a info.php file next to them with: &lt;?php phpinfo(); // no closing tag at eof If that doesn't work, check to make sure your .htaccess doesn't restrict phpinfo(). If all else fails, open Terminal.app, type php, drag the info.php file to the terminal (it will become the path to the file) and press enter. You should either get HTML or an error. HTH! 
1. Your indentation is wrong 2. Missing use directives or super weird autoloading 3. you have a function named "__"?? seriously?? 4. Static methods 5. Poor naming 5. Underscore method names 6. Commented out code that you committed 7. No dependency injection 9. Poor directory naming/concern seperation (what is a directory called "classes" supposed to contain?) This looks like a rewrite of CodeIgniter mixed with laravel Facades/Static classes (or whatever they eventually turned out to be)
A factory design pattern should be used if you want to create and/or modify multiple objects that relate to each other some how. If you want to create a single object then just use a constructor or a method in that object's class.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
I'm using the pattern to abstract the object creation and prevent code repetition anytime I need to create an Member object with the data from the request.
The Github readme has a typo. # Only Rewrite URL if file not exits I think "exits" is supposed to be "exists"
I think what you're doing is fine: you're using a Request object to create a Member object but using a factory to eliminate creating any dependencies between the Member and Request classes. I would also convert Member's member variables to private and create getter and setter methods for each of them.
makes sense. it reminded me of NSObjects
1. Use composer to generate your autoloader instead of writing your own. Add an [autoloader section](https://getcomposer.org/doc/01-basic-usage.md#autoloading) to composer.json in your framework and core projects. Your class and namespace structure will likely need to change to conform to PSR-4. That's a good thing. 2. One of the best things about the recent PHP "renaissance" is framework interoperability. If I'm using ZF2 but like Laravel's Eloquent ORM and Symfony's translator libraries it's all good. I can throw the individual dependencies into my composer config and off I go. Likewise, you may get users who love one part of your framework but don't want to have to use the whole thing. Consider breaking your core into smaller logical projects. That means you're providing a series of libraries instead of a framework, but that's also a good thing. 3. All of your class names begin with "CC". It's probably an absolute pain to tab through the frameworks classes in an IDE. Use logical class names in a "ClanCats" namespace and avoid jargon. 4. There's a lot of statics here. Make plain ol' objects. 5. You may be reinventing a few wheels. Some of the core classes look very close to some of the SPL classes and built-in functions. It may be easier to extend base functionality than rebuild the whole works from the bottom up. All that said it looks like it probably works well. Go on with ya bad self and thanks for sharing. :)
I guess I can only offer 15 years of anecdotal evidence. I have never worked with great code that was not well documented. In fact, I would go so far as to say, poorly documented (docbloc'd) code is a code smell that is indicative of a substandard code base. People who cannot make the time to document code are either poorly managed/ over-committed, which leads to a substandard product, or are writing code on the fly without consideration of the larger picture, which also leads to a substandard product. Get over it and just start doing it. I guarantee your output will improve, and if it doesn't, it will at least be well documented for the next poor guy who has to inherit it. This is a sort of 'pascals wager' situation. Why do so many logical and intelligent people resist acceptance of this reality?
That doesn't seem like pair-programming since it doesn't sound like you're aiding the candidate program. If anything, it would just make me slightly uncomfortable. I know this would make some very uncomfortable. 
Naming your translation function __ is actually relatively common amongst frameworks. Using something like t might be better, but, again, __ isn't uncommon.
&gt; The "__" function is the shortcut for the translation, I did not see a problem there. Any suggestions how to call the function and keep it short? FWIW Drupal calls theirs 't'. I've always wanted to make a function called `__`, so you can go right ahead as far as I'm concerned.
I looked at this project, and have some feedback: * This application is useless for a single user. To create a project you have to add a collaborator, which has to be a second user of the software. * Code is very messy, and heavily mixed between typical Laravel code and plain php. Use Blade or don't, try not to mix it so much so things are easier to follow. * I looked at a few views, and noticed that all of the ones I looked at where the complete page. Why not use a master template, and separate some things out for reuse? This would be a nightmare to make changes to in the current form. * Your install process in interesting, kinda like the idea of it, but some things could be improved. Why slow down the speed of showing what system tests passed or failed for a self hosted project like this? * Why use older versions of Bootstrap, and why mix some pages using bootstrap and some not? I could go on, but after about 10 minutes I got bored and deleted it. Goodluck. 
Oh, woops. That was supposed to be index.php. Let me edit that.
A factory is only concerned with object *creation*, not modification. In other words: * `MembersFactory::createFromRequest(Request $request)` makes perfect sense. * `MembersFactory::updateFromRequest(Member $member, Request $request)` makes no sense. That being said, your "update from request" behavior *itself* makes sense - it just needs to be placed elsewhere (or you need to rename your `MembersFactory` class so as not to confuse other developers).
"Multiple objects" is definitely not the only use-case for factories...
Preemptive "sorry" if I misinterpreted. On the posted php script 'page' that isn't seen by the user, upon successful login have this code displayed. &lt;script type="text/javascript"&gt; window.location.assign("http://google.com") &lt;/script&gt; Assigning the window location will redirect the user on the main page even though the code is on the posted page. If you run into any issues where it reloads but doesn't show updated data like if they just made a page change, make sure you do something like &lt;script type="text/javascript"&gt; window.location.assign("http://google.com/?nocache=&lt;?php echo time(); ?&gt;") &lt;/script&gt; 
I believe this also works for jquery/js, just having the javscript on the post page as I showed. I use it for Growl/Toastr notifications, to display a success/error message on the same page when a form is posted. Alternatively this should work. Response of course being success results function from the ajax *success: function(response) {}* if (response === 'Successful login') { // stuff here } else if (response === 'Invalid login') { // stuff here } And just echo/display "Successful login" or "Invalid login" on the post page.
Hmm well good luck! 
 $.ajax({ type: "POST", url: "index.php", data: datastring, success: function(data) { if(data.status == "valid_login") { window.location = "http://google.com"; } }, dataType: "json" }); Then have your index.php return the response in json format. For example, echo json_encode(array('status' =&gt; 'valid_login'));
You were allowed PHP and MySQL, and were given credentials for a database on the local development environment. You had an hour to code a web page that would list guestbook entries, and allow the visitor to leave an entry. That was all. We hired some people who didn't have working code after an hour, but whose code was nonetheless sound. Just like we wouldn't hire some who had working code, but way too many mistakes and oversights. 
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
My apologies.
IMHO 'guywithalamename's complaints are preferential/overly critical and don't mean your code is bad. "\_\_" is a great name from an i18n wrapper. Magento uses "\_\_"; and it is similar to the gettext alias "_". Pro: It looks like it is easy to learn (overall) Con: method names are a bit confusing (CCModel has "_assign" and "assign"... what?)
You're not using the pattern because this is not a factory class, it is just a *static factory method*.
Given you're using Chrome, you can open the inspector (F12), change to Network tab and see what kind of response is index.php returning. &gt; I don't quite understand how to return data from PHP and check it. You just echo it. But make sure that is ALL you echo. So you can use: echo 'valid_login'; return; // or die(); 
That was my exact point, that it makes no sense. My problem is the "to be placed somewhere" or "to rename" part, i don't have any idea where to place this code or how to call it.
L10n() is a nice way to call your localization function. It is reference-able and has actual semantic meaning that one could look up if they didnt understand. It also looks like eleet speak for 'lion' which is sweet for remembering what its purpose is - I used to have a printout at my desk that said 'don't forget to feed the localization lion' with a picture I drew of a lion. I spent like 3 hours shading the upper lip. Probably the best drawing I ever did. 
&gt; Static methods, cant agree with you here. They work, so how can they be in general just bad? Static methods are considered harmful, specifically to testability ... and have been forever ... everywhere ... here's an article relating to Java from 2008, just to drive home the point: http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/ The same applies everywhere ...
Factories are generally for constructing object instances during runtime, specifically to hide construction complexity, and not for persisting them in a database. That's a separate responsibility and one that is occasionally handled by a repository pattern, although I'm on the fence about that. If what you need to do is persist the update, that responsibility may belong with the original handler (in fact, it could be the exact same function taking a complete object instance). If what you actually need -- and that's not what it sounds like -- is to modify the same instance after construction, irrespective of persistence, what you need is setters for the relevant fields.
Close, but those are two different things. IIRC localisation (l10n) is language only, whereas internationalisation (i18n) also concerns layouts according to cultural differences, left-to-right and formats, like numbers and dates. There should be a few blog articles around.
This looks promising, downloaded it, tried to install it. Can't install. Can't get past the database section of installation. Says error, no problem with SQL either.
I humbly suggest that they should not. - The argument that they are easier to find is unpersuasive with modern IDEs. You can also accomplish the same thing via namespacing and/or directory structure. - Their use underminesthe semantic nature of your code, making it harder to read. When you type hint on an interface, what you really want is a concrete instance of that interface, so the 'Interface' suffix is misleading. function order(Product $product) {}; -vs- function order(ProductInterface $product) {}; The customer is ordering a "product" not a "product interface"; your code should emphasize this. - It is my experience that if you cannot resolve your naming scheme once you've dropped all prefixes and suffixes and are forced to come onto "base", "abstract", "default", etc., there is an abstraction that you're missing. Avoiding meaningless/generic/ambiguous prefixes and suffixes simply leads to better code.
You make a compelling argument, and I'm inclined to agree, but it's worth noting that some [code quality tools](https://insight.sensiolabs.com/) require an *Interface* suffix otherwise they consider your code to be low quality.
Wow. Take a look at a deploy tool like Capistrano, you won't have these issues
That would be a silly reason to consider code low quality. So silly infact I would call the test low quality.
yes, no, yes. Wouldn't it be easier to ""Just Say No To Abstract Classes" :)
IMO the convention you use is not as important as much as the consistency of it's use. If I have to try and do something in someone else's code base, it's far easier to find my way if I see a pattern in their naming scheme. I may not agree with or prefer the pattern they chose, but that's fine, as long as I can understand it. Trying to decipher code that switches conventions several times is like trying to read instructions on how to make a cake written in 6 different Asian dialects.
I think that your interface argument depends on how you read it. I'd read: function order(ProductInterface $product) {}; As "A function called order, that accepts an object that has the interface of a product" - which then is a lot clearer in my opinion compared to just `Product`. You aren't ordering a product interface, you're ordering something that has the interface of a product.
Your ego has nothing to do with your code quality. Take for instance Maverick, his ego was writing checks that supposedly his body couldn't cash. He was still one of best fighter pilots of all times. Big Ego, Good Fighter Pilot. Maybe he wrote shitty code though.
Code Style should not be a part of Code Quality checks.
I'd say this doc block could be improved. "The day of the month" could be confusing. Is this a 0 based day or a 1 based day? I hate you javascript date library.
I got it, but thanks for the information.
Which proposal?
Yes, as I mentioned, i have Repositories for storing the object to the permanent storage. And yes, what i need to do when i mean "to update the objects" is to modify the same object instance. I can modify the values for the fields with setters, sure, but that's not my question. My question is where to put the part of the code in which i use those setters to modify the fields' data. Some "basic" solution to achive the crating and updating is this - http://pastebin.com/ae2c4Asq but as @drrck2403 said, I think it doesn't make much sense and can be confusing.
In php I would use require_once instead of include, in case file does not exist and no error handler is used, message about error is more brief. (sorry for my english, I'm not a native speaker ;))
No, you're not overlooking anything. This is a common first step in PHP, yes. It's by no means the top end of application development, but it will be servicable in the way you're thinking of. A templating engine like Plates is a better option, but might be beyond you at this point. Note that you can't do this to index.html as index.html won't be parsed by PHP. You would need to make sure that your files are .php files.
Right, I messed up the title. My index is .php. Also, will there be any problems inserting a &lt;?php include 'xxxx.php';?&gt; into the quoted part of an echo function?
What if you, for example, want to update jQuery to a newer version? You'll need to change it in many places across the views. The routes.php file is also a bunch of mess.
Same here. I tried use shorter strings for the database name, user name and password and I still get the "Oops!" screen with no debugging info. Connecting from the command line works fine.
If you subscribe to [domain-driven design](http://en.wikipedia.org/wiki/Domain-driven_design) (which I highly recommend), this modification behavior probably belongs in a service. That being said, it's such a simplistic case that I might be tempted to put the behavior directly in the controller. Hydrating an object isn't business logic (which absolutely does **not** belong in your controller), so it *might* be kosher to include in a controller (seems like a gray area to me); but it could also get way out of hand if the hydration itself is complex or verbose. So, I guess my advice would be to make a judgment call here. If updating your `Member` entity takes a lot of code or introduces a lot of complexity - create a service to do it. If not, consider just hydrating it directly in the controller.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Domain-driven design**](https://en.wikipedia.org/wiki/Domain-driven%20design): [](#sfw) --- &gt; &gt;__Domain-driven design__ (__DDD__) is an approach to [software development](https://en.wikipedia.org/wiki/Software_development) for complex needs by connecting the [implementation](https://en.wikipedia.org/wiki/Implementation) to an evolving model. The premise of domain-driven design is the following: &gt; &gt;* Placing the project's primary focus on the core [domain](https://en.wikipedia.org/wiki/Domain_(software_engineering\)) and domain logic. &gt;* Basing complex designs on a model of the domain. &gt;* Initiating a creative collaboration between technical and [domain experts](https://en.wikipedia.org/wiki/Domain_expert) to iteratively refine a conceptual model that addresses particular domain problems. &gt;The term was coined by Eric Evans in his book of the same title. &gt;==== &gt;[**Image**](https://i.imgur.com/FPa667v.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Coding_Shots_Annual_Plan_high_res-5.jpg) --- ^Interesting: [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^| [^OpenMDX](https://en.wikipedia.org/wiki/OpenMDX) ^| [^Object-oriented ^analysis ^and ^design](https://en.wikipedia.org/wiki/Object-oriented_analysis_and_design) ^| [^Agile ^software ^development](https://en.wikipedia.org/wiki/Agile_software_development) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjmdp0e) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjmdp0e)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
 $func = new function($b, $c, $a); call_user_func_array($func, [$a, $b, $c]); The above would not work; it seems that the idea behind resolving callable arguments is that it is the responsibility of the higher level classs to determine in which order to pass the args to each individual lower lever classs.
Sure, just make sure you don't include (or require) anything dynamically - especially when it's something that can be controlled by the user - unless you are very confident that it can't be exploited. This could allow hackers to gain access to information on your server or include remote scripts to execute on the server. http://en.m.wikipedia.org/wiki/File_inclusion_vulnerability#PHP
There is nothing in app/storage/logs. Chmodding the folder to 777 doesn't generate logs either.
I'm not planning on having any user inputs except for a search box, and maybe a like button. Will I be fine?
I tend to follow DDD as much as i have knowledge about it. I want my code to be structured better and because of that I asked this question here :) The code for filling the object with the data is about 25 lines. But i have the same code when i need to update the object. That's why i didn't want to leave it in the controller (to prevent duplication). I guess it would be okay if i create a MembersFillingService or something similar.. but what about the Single responsibility principle, in this case?
&gt; It is my experience that if you cannot resolve your naming scheme once you've dropped all prefixes and suffixes and are forced to come onto "base", "abstract", "default", etc., there is an abstraction that you're missing. Avoiding prefixes and suffixes simply leads to better code. I couldn't disagree more. Avoiding prefixes and suffixes leads to giving things less intuitive names just to make them distinguishable, and that hurts readability.
Except require, require_once, include, and include_once all do completely different things. If you must ensure a template file is loaded, require should be used. The *_once varients should be used only if you must be absolutely sure the file won't be loaded more than once, like a class or function library.
First law of security: trust no user's input and where possible, never use user input to do anything.
Style directly relates to readability, which also directly relates to the quality of the code. If i cant read the code, its quality isn't that great. Even if it gets the job done.
Abstract classes are NOT a bad thing lol
That doesn't work. &lt;?php breaks from html to php, and it's already in php. 
Unfortunately, PHP does not have named parameters yet, so that's just how it works for now. If it's that important to you, you have two options available. "Fake" named parameters by using an associative array: $func = function (array $params) { /* ... */ }; call_user_func_array($func, ['a' =&gt; $a, 'b' =&gt; $b, 'c' =&gt; $c]); Or, make use of [reflection](http://php.net/manual/en/book.reflection.php) to determine the correct order and reorder as needed.
Not that this is by any means a requirement to follow PSR, but the PHPFIG group has a bylaw for their stuff saying that they should be: * *Interface * Abstract* * *Trait https://github.com/php-fig/fig-standards/blob/master/bylaws/002-psr-naming-conventions.md. When writing my code, I follow this too.
That's the implmentation details; what I am asking is that in DIP the lower level classes are supposed to satisfy the higher level interfaces (which I'm including the method signatures), and I'm thinking that asking the higher level class to figure out what the lowel level class needs is a violation of DIP - not only that, but it becomes even more uncertain when trying to determine what is "availalble" for the lower level classes to use.
Hey I see you've recieved an answer already so I have nothing more to contribute, but I'll just ask you to, in the future, post questions like these to /r/PHPhelp? We're all for helping, but it's nice to have this stuff centralized in a seperate sub. :)
'Foo' in that example, should never be anything other than an interface. If you're typehinting on abstract or concrete classes, naming isn't the problem...
So would I echo up to the &lt;?php part, then make a new echo after the ?&gt; ?
Same things happening to me.
Problem is not SQL either. I tried logging in with the same credentials using phony admin. Works.
Do not forget to sanitize user input and you should be fine.
Open in PHPStorm, ctrl+alt+L.
www.laracasts.com, This is all I have to say. I know it is very focussed on Laravel, but it is an excellent resource for modern PHP development. Run through the free tutorials and even learn Laravel, even though I don't current use it in my daily life I have found that it has taught me so much about being a better developer.
I will check it out when I get some time. Thank you. 
No biggie, in general people are good at helping on here as well. :)
I've been reading [Clean Code: A Handbook of Agile Software Craftsmanship](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) and chapter two discusses this, and agrees with you. Interfaces should not be suffixed with 'interface', and if you run into naming issues (wanting to name the interface and the class Product) you should lean towards naming the interface Product and the class ConcreteProduct. I started following this practice and it makes a lot of sense after you start working this way. If I'm making an interface it means anything which implements it should be valid, so I should never type-hint a concrete implementation, I should only ever type-hint the interface. Adding the Interface suffix is just adding verbosity and possible confusion.
I firmly believe that interfaces and traits should *never* have their type in the name. It's completely unnecessary to name an interface `ControllerInterface` as the name `Controller` is more than enough to define its behavior. I do however use the abstract name, as the base abstract class implementation is always `AbstractController`. I also try to name all my interfaces using a verb (an action) or noun (a thing), like `Controller`, `Helper`, `Translator`, `Model`, etc. The same goes for traits. Why would I call a trait `RequestAwareTrait` or `CacheableTrait` when their names alone provide contextual definitions on what they do (and usually outside the scope of what a class can do). I like to use adjectives for naming, like `Cacheable` instead of just `Cache`. When it comes to architecture, I use the following namespace approach. &gt; vendor\package\interface &gt; vendor\package\interface\class This would result in classes being organized as such. &gt; Foo\Mvc\Controller (interface) &gt; Foo\Mvc\Controller\AbstractController (abstract class) &gt; Foo\Mvc\Controller\RestController (implementation class) Any classes that do not inherit from an interface, or any traits relating to a package, would be found in the root package folder. This approach has been working really well so far and is easily understandable to me. If you would like any examples projects, I could provide some.
The SRP, in a nutshell, advocates that any given class should only have a single responsibility. As described, your `MemberFillingService` would be adhering to the SRP, as the class has only one responsibility - updating members. Likewise, `MemberFactory` only has the single responsibility of creating members. So, you're good on that front. To muddy the waters a little bit, though, how atomic your "responsibilities" are is *wide open* to interpretation. Some responsibilities are more obvious than others.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
But I'd end up with diplicated code - ex. http://pastebin.com/u5vtVVhU? P.S. I can't simply create new object when i have an request to update it because the existing one will create some internal data (as ID, etc.).
&gt; I'm thinking that asking the higher level class to figure out what the lowel level class needs is a violation of DIP But this behavior is the entire premise behind DIP... The goal of inverting the dependencies is to push them *up* to higher level abstractions, thereby making the lower level classes more reusable, maintainable, and testable. On a sidenote, pushing all these dependencies and "glue code" up like this is the reason dependency injection containers exist (to further abstract the code that pieces the puzzles together).
&gt; require, require_once, include, and include_once all do completely different things. I wouldn't go that far, the biggest difference between require and include is that include produces a warning on failure and require produces a fatal error. In fact according to [the manual](http://php.net/manual/en/function.require.php) they are essentially identical. 
I assume you're talking about this: class DoctrineDatabaseUserRepository extends DatabaseRepository {} abstract class DatabaseRepository implements UserRepository {} interface UserRepository {} ...in which case, I would pose the question: what happens when you have user repositories that have nothing to do with databases (or Doctrine), but share code with those that do? What do you call that abstract base class? Sorry, `UserRepository` is already taken for your interface, and you can't use prefixes or suffixes.
In an ideal world, I completely agree. But that's not a very practical stance when talking about the entire community in general, while using a language that is perfectly okay with allowing you to typehint any of them.
This is exactly [what I did for this website](http://st-armand.com/). Every page has an include lib.php statement which brings in the menu and all the formatting. It works fine.
You could reuse your service in the factory: http://pastebin.com/nzmf16tA
Not sure what you are doing. If you are mixing html with output from the include, then do: *echo "abc"; require "xxxx.php"; echo "cde";* Again &lt;?php is used to switch from html mode to php mode. ?&gt; goes back to html. To output a variable, *echo "test:$variable";* works in double quotes only. Php looks for $ in double quoted strings. You can end the string, and use the string concat character "." to put an expression inside the string: *echo "time: ".date("Y-m-d H:i:s")." test";* 
Possible confusion? how so?
Thanks, I'm still pondering this; Are you saying there are no more contracts? Inverting the dependencies means that they're resolved prior to being passed (so that the higher level class don't even know what they are), and typically when they are injected into the higher level class that is done under contract (a known interface), but now it seems like saying ok this object will work but you have to figure out how (i.e. what the order of the parameters should be) ... and if we are to push this glue further up the tree they will all conform to a single interface but internally would know to pass on those dependencies (e.g a proxy or decorator) ? For example my current dilema, listeners are just callable and have no interface (per se), a bunch of these listeners are subscribed to an event, now some listeners might only be interested in say the http query params, and others might be interested in a Form object, or even the event object itself; when the listeners are notified, how are the arguments to be passed to the listeners to be determined, by inspecting each listener and trying a best match algorithm - wouldn't this inspection result in some kind of interface (common contract). 
Well, I think the second part of what you said might be a bit excessive (no sites on the internets would work). :) but, yeah, always sanitise and validate your inputs and more importantly, understand basic security concepts such as SQL injection, XSS and file inclusion vulnerability etc.
As I mentioned in the initial reply, if these naming constraint pose a challenge, it's an indication that you're missing an abstraction. You should identify it and extract it to an interface. The scenario that you pose, contrived as it may be, illustrates this point beautifully. If you have code shared as you've described and the shared code can't be included in an abstract class higher up the inheritance chain than DatabaseRepository, you're very likely missing an abstraction. if it -can- be, and you're just suffering from an inability to name it anything other than 'default' or 'base' I'd suggest that there is going to be -some- defining characteristic of the concrete implementation components of that abstract class which is there to guide your naming if only you work to uncover it. Naming is hard; struggling to find the name which emerges from the concept/implementation in question is a very important part of what we do. As an excercise, the following example includes shared code (eventing, in this case; could be logging, anything, really) between database and non database repositories included in an abstract base class without coming onto generic naming, so it -is- possible... interface EventGenerating {} interface Repository {} interface UserRepository extends Repository {} abstract class EventGeneratingRepository implements EventGenerating , Repository {} abstract class DatabaseRepository extends EventGeneratingRepository {} abstract class FilesystemRepository extends EventGeneratingRepository {} abstract class DoctrineDatabaseRepository extends DatabaseRepository {} class DoctrineDatabaseUserRepository extends DoctrineDatabaseRepository implements UserRepository {} class S3FileSystemRepository extends FileSystemRepository implements UserRepository {} 
If there's one thing I know now that I didn't before it's that this is something the PHP community is quite divided over.
Nah, let him have that belief. It makes him easier to weed out in interviews.
I can't do it that way because the "create" method is static, but I'll find a way. Thank you for the help, it's much more clear for me now.
You should worry about this on your 2.0 version. Right now nobody knows your product so there's no interest in pirating it. I don't mean to be harsh, but the only software that's easy to get illegally is the quite popular one.
Given the support for auto-completion, I'd say the IDE argument is a wash. However, IMHO your semantic argument is flawed. The whole point of an interface is that it guarantees how an object acts, not what it represents (it makes a promise of *how*, not *what*). In your example, your code requires some type of object that acts like a product is defined to act, and doesn't (or shouldn't) care if it actually *is* a product (or anything else). In other words, your code expects an object that can be interfaced with in the manner of a product, not a product object. Semantically, you're consuming a *ProductInterface*, not a *Product*. 
This may help. My setup: CentOS 6.5 nginx 1.4 PHP 5.5 MariaDB 10.0 Could it be a MariaDB/MySQL issue?
&gt;I'm wondering if that is a violation of the Liskov Substitution Principle? If your typehint is an interface, then does that mean you are bound to the methods that it defines? Yes, and yes. 
Yes, definitely.
I imagine that the typehint was left somewhat broad in the interface to allow alternate implementations. PHP will not allow you to typehint on a specific implementation of an interface if the method signature has been defined in an interface. If the author was comfortable with the Eloquent implementation being tightly coupled to an Eloquent Model, the only option would be to use a guard clause: public function updateRememberToken(UserInterface $user, $token) { if ( ! $user instanceof Model) throw new InvalidArgumentException(); $user-&gt;setRememberToken($token); $user-&gt;save(); }
It all depends on what is the standard you agreed on each project you are working on, but I like FIG naming conventions as well.
Ok, so what code style should tools test for then to tell quality? Each team has a different style, however each can produce the same level of quality code. Hence, style is not quality. So long as there is a set and consistent style, it should be irrelevant to a code quality tool looking over stuff.
You completely misunderstood the question, so let me try to illustrate in a different way that is hopefully more clear. I'll give you the prefixed/suffixed naming and structure, and *without adding to or modifying the structure in any way*, please offer up how you would rename these four classes/interfaces: // A repository representing a MySQL data store class MySqlUserRepository extends AbstractUserRepository {} // A repository representing a 3rd party web service class WebServiceUserRepository extends AbstractUserRepository {} // A parent class for the previous two repositories that holds shared behavior (perhaps search criteria parsing, or something of that nature) abstract class AbstractUserRepository implements UserRepositoryInterface {} // The user repository interface implemented by all of the above interface UserRepositoryInterface {} In particular, I'd like to know how you would disambiguate `UserRepositoryInterface` from `AbstractUserRepository` without prefixes or suffixes.
I'm looking to implement a google plus implementation, which will be similar to the eloquent one, and I suppose this isn't a half bad solution.
Neither. It should just be an instantiable class ([Symfony](http://symfony.com/doc/current/components/http_foundation/sessions.html) does it right).
Thank you very much :)
Is there a reason why multiple instances would be bad? Would each write to difference persistence layers? Why not create one instance and pass it to every other object?
&gt; Interfaces should not be suffixed with 'interface', and if you run into naming issues (wanting to name the interface and the class Product) you should lean towards naming the interface Product and the class ConcreteProduct. I can't figure how a prefix on the class is "better" than a suffix on the interface. I suppose it's less typing overall if you're type-hinting interfaces instead of concretions, like you should be, but meh...
So just use dependency injection through the project? I had the idea of singleton in case during development you wanted to use the Session inside of difference other classes. Laravel seems to use a static class, but then CakePHP seems to use Singleton. I hadn't checked Symfony.
So what do you name your implementation in the case where there is only one implementation? For example, this is how I would name them: interface WidgetInterface {} class Widget implements WidgetInterface {} If you don't use the `Interface` suffix, you'd have to rename one of them. A lot of the times you have multiple implementations (e.g. `FooWidget` vs. `BarWidget`) and you can skirt the problem, but it doesn't always work out that way...
I agree with /u/drrck2403. You should use a simple instance. Then you'll find yourself wondering how you access this object from your code scope, since you instantiated it outside. As a heads up, global variables and the Registry pattern are not good alternatives, in my opinion. Dependency Injection would be a better approach. Basically it means you give the necessary objects as parameters when you instantiate classes or call methods that need them. To keep track of these dependencies automatically, you may want a [Dependency Injection Container](http://php-di.org/).
Yes, you should absolutely use dependency injection throughout the project.
Just a note that this has nothing to do with Laravel, it's a generic PHP question.
What you're calling a 'ProductInterface' is merely a code conceptualization of a 'Product' in the business domain. Code is inherently more semantic if it utilizes the language of the business domain. If your 'ProductInterface' isn't modelling a 'Product' in the business domain, the problems extend beyond naming. This is an excellent explanation: http://verraes.net/2013/09/sensible-interfaces/
A prefix on the class adds meaning - it describes the implementation. You're still able to recognize interface from implementation easily. The suffix on the interface adds no meaning. And the real benefit is exposing previously undiscovered abstractions.
Without seeing the implementation of AbstractUserRepository, you've crafted an unsolvable challenge. My position is that there is -something- about AbstractUserRepository that makes it more than just the default. It's the uniqueness of that implementation (and if there's no implementation in the abstract class, why have it when you already have the interface?) that should guide your naming.
Well I was referring to select, radio, or others that have static values but XSS attack may target
Don't think I've ever ran into that instance if they are in the same namespace as I would never just call it `Widget`. It would always have a name associated, so it would just end up as `FooWidget` or `BarWidget`. However, I have ran into instances where the class name matches the interface name, but is in a different namespace. Which I allow since the fully qualified name is different. Example can be found here: Interface: https://github.com/titon/framework/blob/master/src/Titon/Http/Request.hh Class: https://github.com/titon/framework/blob/master/src/Titon/Http/Server/Request.hh But that's the only exception I can think of as the HTTP package was annoying to architect. 
This library relies on 5.6 and on `nikic/iter`, and is mostly just an illustration of how currying can be implemented in PHP.
You're certainly well within your rights to choose to structure the packages this way, but there are far more disadvantages than advantages, in my opinion (especially if you're only doing it to not have to use an interface name suffix). Consider your view package, for example. You have a `Titon\View` namespace, in which you have a `Titon\View\View` interface, but also a `Titon\View\View` namespace, in which you put your actual views. So, now you have... * Namespace redundancy (`Titon\View\View\...`) * Confusing organization, since implementations are in different namespaces than their interfaces (requiring an unnecessary `use` statement) * An interface/namespace conflict (`Titon\View\View`), requiring you to use an alias for one or the other if you need to `use` both in the same file I don't know, man. I think I'd much rather just call it `ViewInterface` (or `IView`, or whatever) and get rid of all this baggage. ;-)
I guess that depends on whether the author was using "Concrete" in the same way we use "Abstract" (e.g. `ConcreteProduct` vs. `AbstractProduct`), or whether it was being used to specify a certain type of product (e.g. the building material "concrete"). I was assuming the former. If s/he meant the latter, then what happens when you have no specificity qualifiers? What if *all* products are just instances of the same class? Are you going to create &lt;# of product types&gt; different new classes just to avoid calling the class `Product` in order to reserve that name for your interface? Or are you going to pick some silly prefix like `BusinessProduct` or `GenericProduct` or some such?
If there were absolutely no alternative (and I believe those cases are very few and far between), I'd got with a generic prefix on the concrete class rather than a generic suffix on the interface. As I've said, a primary advantage is to force you to wrangle with naming and to expose overlooked abstractions; you're not going to want one interfaced with a suffix and the rest not, and you lose too much by suffixing them all, so I'd prefix the single concrete class. That said, I'd suggest that a system where all products are instances of the same class likely doesn't accurately model the business domain so the whole question is theoretical.
&gt; there is -something- about AbstractUserRepository that makes it more than just the default That *can be* true, but it's very often not the case, though (as it isn't here).
In regards to your bullet points. * This only happens when an interface coincidentally is named the same as the package, which I agree, is less than desired. You would still have a similar issue with `Titon\View\ViewInterface`. * If anything it's less confusing in my opinion. You know exactly where to find implementations. I find interfaces + implementations in the same folder a bigger issue when multiple interfaces and their implementations are also present (too much clutter). My preferred approach negates this. * Use statements are a non-issue IMO. * I do not understand your last bullet point. No aliases are ever needed. But I see where you're coming from. A lot of these points would be irrelevant if the namespace and interface didn't share the same name. I have been trying to think of new words for those package names but no luck.
No, there are definitely still contracts. Just so we're on the same page, when we talk about higher/lower, we're talking about the object graph. For example: class Foo implements FooInterface { private $bar; public function __construct() { $this-&gt;bar = new Bar(); } } class Bar implements BarInterface { private $baz; public function __construct() { $this-&gt;baz = new Baz(); } } class Baz implements BazInterface {} $foo = new Foo(); In the above code, the dependencies in the object graph are all at the bottom. The classes are creating their own dependencies. And those dependencies are locked in, and non-substitutable. This is bad for flexibility, extensibility, testability, and a bunch of other -ilities. The goal of the DIP is to push these dependencies *higher*: class Foo implements FooInterface { private $bar; public function __construct(BarInterface $bar) { $this-&gt;bar = $bar; } } class Bar implements BarInterface { private $baz; public function __construct(BazInterface $baz) { $this-&gt;baz = $baz; } } class Baz implements BazInterface {} $baz = new Baz(); $bar = new Bar($baz); $foo = new Foo($bar); Now all the dependencies have been pushed to the top of the graph. All of our classes are now easier to maintain, much more flexible, and testable. The problem this leaves us with is that if we push everything to the top, we'll eventually have an unmaintainable, unorganized mess at the top-level for applications of any significant size. Enter dependency injection containers.
&gt; Is a discussion about OOP best practices really a support question? No.
&gt; you lose too much by suffixing them all Such as? &gt; That said, I'd suggest that a system where all products are instances of the same class likely doesn't accurately model the business domain so the whole question is theoretical. I'd suggest the opposite. It's very rare that you need anything more than a single `Product` class, and most e-commerce software reflects this. You *definitely* wouldn't ever create distinct classes for each product; that would just be a maintenance nightmare.
Laravel doesn't use static classes, it uses [Facades](http://laravel.com/docs/facades) (More or less Proxies),
The post you linked makes the same argument you are, without really adding to it in any meaningful way that I can tell. You (and this author) are saying that a method is semantically expecting to operate on a "Product", so the typehint for a "ProductInterface" is misleading. I'm saying that's not true, that your method is (or should be) consuming *something that acts like a product*. This may represent a "Product" in the business domain, or it may represent something else (maybe a coupon or a discount that needs to act like a product for rendering or total calculation?). The point is, semantically speaking, your method is consuming an interface that describes how a product acts in the context you need to consume it, not a product - a *ProductInterface*. This point is supported (in my mind at least) by the fact that in a real application, a domain object like a "Product" is going to be represented by a class that probably implements several interfaces to describe it's behavior in different contexts (maybe rendering to HTML via a *RenderInterface*? Validated via a *ValidatorInterface*? etc etc). The hypothetical renderer method doesn't care if it's rendering a product or a category or a static block, just something that *acts like it can be rendered*. At the end of the day, I'd say it's personal preference more than anything, as long as it's done consistently throughout a project. 
That part is clear to me; once the dependencies have been injected, the question is how do they interact with each other, are there any contracts? what about when the dependency is just a callable type, whose interface should be satisfied, the signature defined by the higher class or the lower class, i.e. who should be specifying the signature of that call? 
You're absolutely correct, and this is a design issue in Laravel that breaks Liskov. You should raise an issue on Github for it.
&gt; I'm saying that's not true, that your method is (or should be) consuming something that acts like a product. This may represent a "Product" in the business domain, or it may represent something else (maybe a coupon or a discount that needs to act like a product for rendering or total calculation?). The point is, semantically speaking, your method is consuming an interface that describes how a product acts in the context you need to consume it, not a product - a ProductInterface. If a coupon in your system behaves like a product, your domain model and your business domain have diverged. Bring the model in line with reality and you will find that you needn't come on to the artifice of maintaining concepts like "something which acts like (but presumably isn't) a product". Your argument that a renderer doesn't care whether it's rendering a product or something else is a complete red herring - you'd type hint there on 'Renderable' (note the lack of suffix, but it ought indeed be an interface). A renderer renders a renderable. Yes, we know that something is a renderable because it implements a certain interface, but that's merely codespeak. Focus upon modelling the domain; your code will read better and BE better (you won't fall into traps like squinting one eye and calling a coupon conceptually identical to a product for certain applications, for instance...).
It isn't here because it's a contrived example. As I said earlier, without seeing an implementation in context, the proper name isn't going to emerge; it's a challenge which can't be met (and which therefore doesn't provide much learning value here).
PSR-2, is a good starting point, and several tools can use this as a style to check for. But there are common sense guides to follow when conforming to a style. &gt; Each team has a different style, however each can produce the same level of quality code. Yes, if their styles aren't bat shit stupid. Its still definitely quality. Without a doubt. Putting all your code on one line IS NOT high quality code, example of style affecting quality.
Yup :) me too
And this is why Laravel bugs me. New people jumping into this project who don't understand how the facades work.... It sets a bad example. 
What defines the method signature is up to you. If you want the higher class to define it, then you'll have to use one of the two solutions I mentioned before (array or reflection). If you want the lower class to define it, the only thing I can think of would be creating a class that defines `__invoke()` with a method signature that defines whatever that lower class is going to call, and then typehinting your dependency to that class instead of `callable`: class MyCallable { public function __invoke(FooInterface $foo, BarInterface $bar) { // ... } } class SomeOtherClass { public function a(callable $callable) { // Here, the method signature of $callable is *undefined* $callable($this-&gt;foo, $this-&gt;bar); // may or may not work } public function b(MyCallable $callable) { // Here, the method signature of $callable is guaranteed $callable($this-&gt;foo, $this-&gt;bar); } }
That's a big question, to be honest. I assume this search field pretty much just let's you search for videos by title and then takes you to a search page with links to those videos. So the question you need to ask yourself is how complicated you want your approach to be and how much maintenance do you feel is worth it. For instance, do you want to maintain the list of videos and the related links or do you want something that automatically figures that out? Do you want to go through the extra work of saving this data to a database which then gets searched against? Is it a lot of data? What sort of database do you want to use or is available to you? Etc etc. I mean, you could start with the simplest solution, which is a csv or JSON file containing your search data. Every time you add a new video, you'd have to update that file yourself. Of course you'll need code that loads that file and iterates through the list and returns relevant links on search. This is simple, but just requires maintenance and starts to be slow once you have millions and millions of videos. Or you could go the extra mile and use something like MySQL for your data and have some code that automatically adds new videos to your database and makes sure your index is up to date. This is much more work, but still simple enough to make sense for a smaller project. It scales better than the previous solution too. Then you could go bonkers and over engineer the solution. Use a clustered MySQL database or mongo or what not with lucene or sphinx as your search engine. Your daemon monitors your video directory and adds new files to a queue on rabbitmq, which then dispatches a job to update the database etc etc. Tons of work and something big, highly trafficked websites need to deal with. Requires a lot of maintenance. But you'll be able to handle tens of thousands of queries a second. Lol And there are many different kinda of solutions like this that have the same aim. It's complicated. :) So, it really comes down to your requirements. In my opinion, if PHP is all new to you and this is just for a small personal website where you aren't expecting tons of traffic and you don't have millions of videos, then maybe the it's solution would be best to start with (KISS principle) and then iterate further if your requirements change.
I use this one in some of my projects: https://github.com/reactphp/partial
Well you're technically right (the best kind of right), they aren't really facades. I was going off the term their documentation uses http://laravel.com/docs/facades .
It is not a contrived example at all (we actually use that exact structure at work, in fact). But if you want a simpler example, with code, here you go: interface AnimalInterface { public function isHungry(); public function eat(FoodInterface $food); public function speak(); } abstract class AbstractAnimal implements AnimalInterface { private $satiety = 0; public function eat(FoodInterface $food) { $this-&gt;satiety += $food-&gt;getNutritionalValue(); } public function isHungry() { return $this-&gt;satiety &lt;= 0; } } class Dog extends AbstractAnimal { public function speak() { echo 'woof'; } } class Cat extends AbstractAnimal { public function speak() { echo 'meow'; } }
No, this is a specific design issue in a specific bit of Laravel code.
... which will hurt your project on the long run...
&gt; This library relies on 5.6 You should add that to composer.json
Partial application is cool, though it is important to point out currying and partial application are doing different things. Partial application binds an argument and returns a new function with that argument applied. Currying makes it so all intermediary function applications return a function ready to take the next argument (up until all required arguments are present then it executes the function with all arguments). **Currying example** $fn = fp\curry(function ($a, $b, $c) { return $a.$b.$c; }); $fnWithAApplied = $fn('Hey '); $fnWithBApplied = $fnWithAApplied('there '); echo $fnWithBApplied('indeyets'); // Hey there indeyets 
Interestingly I actually had that, but after I added `nikic/iter` it didn't work with it's requirement of `5.5` for some reason. It wouldn't let me install. Maybe a bug in composer? EDIT: See here specifically https://github.com/camspiers/php-fp/commit/86d665149d1b635c1aaed189462eebc5743b363a any ideas?
I'm sorry, what? The code above is working - I'm looking for advice on how to make it more efficient. The kind of discussion I thought folks here would like. Your comment is less than unhelpful.
Interesting if I use "php": "&gt;=5.6.0" I get: &gt; Problem 1 &gt; &gt; - The requested package php could not be found in any version, there may be a typo in the package name. &gt; &gt; Problem 2 &gt; &gt; - The requested package php could not be found in any version, there may be a typo in the package name. &gt; &gt; Problem 3 &gt; &gt; - Installation request for nikic/iter ~1.1 -&gt; satisfiable by nikic/iter[v1.1.0]. &gt; &gt; - nikic/iter v1.1.0 requires php &gt;=5.5.0 -&gt; no matching package found. &gt; &gt; Problem 4 &gt; &gt; - Installation request for camspiers/bench dev-master -&gt; satisfiable by camspiers/bench[dev-master]. &gt; &gt; - camspiers/bench dev-master requires php &gt;=5.4 -&gt; no matching package found. But if I use "php": "&gt;=5.6.0-dev" it works fine.
Guys, Please do the following to resolve the error. 1) Go to app/controller/InstallController 2) Please delete the following line 'connections.mysql.prefix' =&gt;$data['prefix'], (line no. 39) 3)Save the file and start over. This would resolve the error your are facing during installation. If this doesnt help let me know your email and will mail you the config files.
Whatever you put, make sure you feel like you're actually worth that amount. They will expect their money's worth from you.
Are you applying for a corporate job? If not, that's really weird. Giving you numbers will be meaningless as it varies from country to country, city to city etc. Do you have other opportunities? Are you sure you NEED to work at this place? If you have other opportunities, think how much you'd like to earn and multiply that by 1.5. If they'll reject you without room for negotiation - good, you dodged a bullet. Those types of companies are all about money, and probably see you as a tool to get their job done. If they'll accept it - good, you'll be making more than you hoped for. If they want to negotiate - somehow good, you will be able to work something out.
You might want to find a better medium for some of your questions than /r/PHP. This isn't to say that what you're asking is *necessarily* off-topic or unwanted, but I think you'll find a much better response and more helpful feedback from some place like #phpmentoring on Freenode IRC. The tone there is much more about helping people to learn and expand their expertise. The reason your previous post was removed was that it was a "support thread", which is something we try to avoid, as it isn't the sort of content that many readers want coming through their front page. Instead, ##php and #phpmentoring are much more appropriate venues for support and constructive criticism.
Thanks for the feedback, I'll refrain from these kinds of questions in future.
makes sense, as there wasn't stable 5.6.x yet
They're bullshitting you, of course. They sure as hell do negotiate salaries, they're doing it right now. If they weren't negotiating they would say "the starting pay for this position is $X and that is non-negotiable" which does happen broadly speaking but usually not for developers. Normally employers ask what your compensation requirements are. It's advantageous for them because if you are way over the range they're willing to pay, they can just counter with their range. But if you come in under their range they save money on you and can come off as generous by giving you a little more than your ask (even if it's below the bottom of range they were willing to pay) It's a little underhanded but it's very standard so good luck on changing that. Also it does make some sense when it's you coming to them. If they come to you saying they're interested in hiring you, make them come up with a number first. If you sought them out you should be ready to give them a figure if they insist on it. So them saying it's non negotiable, no counters possible, blah blah blah, is a way to make you feel scared that if you go too high, they'll just say no and walk away even if they would have said yes for a slightly smaller amount. Oh no! But what is the magic number that I shouldn't go over!? This is bullshit and very underhanded. It's all in the language. "What are you honestly worth?" after suggesting that they will not counter with a lower offer. One of two things is happening with that field: 1. They are being underhanded shits by trying to tie applicants to a lower salary than they'd otherwise expect, but they will review all applicants and if you really fit their needs but came in over their expectations, they will still ask to make an offer even if it doesn't match your salary. 2. They are the same underhanded shits but have a strict filter (program or person) to throw out any application that doesn't fit under a certain upper limit. If you go over or put in a non-numeric amount they might not consider you at all. I would put $0 or $1 or "let's discuss this when we feel like the position is a good fit for both of us". They're not going to make you a serious offer with those amounts so it forces them to revisit the issue later on. I would prioritize salary negotiations thusly: 1) Always try to delay any numbers until after you have interviewed each other and both feel excited about the prospect of you joining. Some places state up front the range they're considering. That's great so go ahead with them if the range would work for you, but again don't talk about *your* numbers until later on in the process. 2) Always see if they can come up with a number first. Again, this is unlikely especially if you applied to them, but I would stand firm on it for cases where someone is trying to poach you. And in those cases never reveal what you're currently making. 3) If you need to give salary reqs (and hopefully follow priority #1 above), always ask for something in the upper range of whatever market rate is in your area (or above that if you're already at that level). If they like you they may offer it, and if you are genuinely above what they can offer they will counter but usually be very accommodating on other perks so be sure to get something else in return if they come back with a lower but still acceptable number. 
&gt; makes sense, as there wasn't stable 5.6.x yet Yep, this seems to be it!
Yeah I agree apart from it working without the nikic/iter requirement
Like you never had to learn? Jesus, at least hes trying.
I'm not bashing him, I'm bashing laravel, specifically the facades. Props to /u/exonintrendo for picking up something new! I just think laravel teaches bad habbits, or just fails to teach good ones.
using the facades will hurt you in the long run
&gt;They're not going to make you a serious offer with those amounts so it forces them to revisit the issue later on. Doesn't force anything. They could just exclude this applicant and not bother with the hassle.
Gotta keep that laravel kool-aid topped up regularly
try adding "minimal-stability" key https://getcomposer.org/doc/04-schema.md#minimum-stability "dev" is a safe bet, but "RC" should be enough (as current version is 5.6.0RC3)
The topic tends to generate as much bad information as it does good. You'd be much better off using a [profiler](http://www.xdebug.org/docs/profiler) then seeking advice on specific bottlenecks.
I guess he was saying that this is not a support subreddit, and yes a question about a problem in a PHP code doesn't belong here. Now the mods don't seem to care, but these questions should be posted to stackoverflow or /r/phphelp or whatever.
Yes and no. I agree that most companies are about earning money, but there's a difference between "normal" companies and companies that are focused only on money, they don't care if the people they employ will quit after 1 month, because there are countless other suckers that will do work for minimal pay that will replace them in a hearbeat.
How about giving a pull-request like: public function updateRememberToken(UserInterface $user, $token) { $user-&gt;setRememberToken($token); if (is_callable($user, 'save')) { $user-&gt;save(); } } This allows for the extensibility of the interface approach, whilst also admitting in the code that 95% of the time it'll be an eloquent model. The duck-typing on the non-interface methods allows for the optional, convenience functionality. Potential balls-up should a custom object implement a different save method I suppose. So maybe not such a great idea. All of which thinking aloud brings me to agreeing with the solution melokoton proposes: a SaveableUserInterface or something. EDIT: Still prefer this to willroths solution, which blocks a lot of custom objects.
 I've refactored the library, so now you can use `resolve_arguments()` function )
The comment by Mathias Verraes is also very interesting (as always)
&gt; 120/yr What does that mean?
You can sit there and optimise code all day long, but if the optimisation offers no noticeable benefit for the end-user, all that work would have been in vain. Instead, you should focus on producing quality code which is easy to maintain and extend, and instead optimise once the situation calls for it. Now, it's also important to know where to optimise, which is where profilers come into play. 
You can generate the barcodes using PHP, save each in an image file. Attach the images to a PDF with as many labels as you want. There's plenty of resources online on how to make barcodes with PHP and how to create PDF's with PHP. Hope it helps. 
This post says it all!
about 4 cents an hour, geez
Seconding this. If a company acts like this, even before you work for them, imagine what they do with their employees. Don't deal with assholes.
Senior developer. But don't consider it too serious. For example, when I was at Booking.com in the interview they ask to create an interpreter for brainfuck (https://it.wikipedia.org/wiki/Brainfuck) and a creating a language for SQL. For the same title (Senior). I think really depends on the company. Another example is Spilgames.com. As a normal Software Developer ask me to write a library for handling REST requests (POST,GET,PUT,HEAD,PATCH etcc..) without being aided of any library or framework and write test. (I used a library, I didn't write tests and they hire me)
I wouldn't respond to that - a company that is unwilling to show some level of flexibility or engage in an open discussion on a sensitive topic is not a company I'd want to work for. If that's how they talk to candidates, imagine what it's like working there.
Very deep...
Put down one number that you'd be happy with, but don't undercut yourself. If that doesn't work out then you don't get a job that wouldn't pay enough to keep you there long anyway.
The page results and a master list of all my videos
What you fail to realize is that if your abstract class implements the interface and you are absolutely certain that no possible alternate implementations exist, you've an unnecessary redundancy between your interface and your abstract class. Nothing is gained by having the interface at that point, simple type hint on the abstract class and be done with it. Note that in my experience, this circumstance is very, very rare. There's usually a missing abstraction or other issue with the code giving the naming challenges (like the violation of the Interface Segregation Principle in your example).
This. They're hoping you undersell. For example, they have a budget of $80,000 per year for a developer, but you put that you require $70,000. It still fits with all federal and state mandated regulations, so they just saved $10,000.
In this context, it doesn't make any sense. I *have* unfortunately seen minified/obfuscated PHP used when someone is trying to protect their source code. One realm this seems to be prevalent in is third-party non-free Magento extensions. Many of them have some sort of common helper or model that does most of the work (sometimes including an "activation" feature), and will sometimes be obfuscated. I even had a recent one where the entire extension helper was eval'd as a base64-encoded string. That took about 10 minutes to reverse-engineer into a normal class file.
I wouldn't answer that question until having been interviewed. At this point I have no idea what the company does or what would be expected of me. If they can't accept that, then look elsewhere. There is no shortage of developer jobs out there.
Ran into all the same issues. He falls to note that you need write permissions on app.php and config.php. I gave up debugging the app when the final create admin form would not even submit from what looks like broken js.
That's sort of meaningless without more context that is impossible to have without working there (or knowing the current team). I'm *worth* far more than $100k/year, but not in all companies. A business that doesn't have the operational infrastructure to extract the most value from my skills will not be able to get, say $200k in value from me. That's my not fault. In another situation, I can easily generate $300k in operational value (increased revenue, decreased operational costs), so paying me, saying $120k is a no brainer. tldr: You're "worth" what value someone can extract from you.
I don't have "prefix" in mine. Line 39 is for the MySQL password: $newDbConfig-&gt;toFile(app_path().'/config/database.php', [ 'connections.mysql.host' =&gt;$data['host'], 'connections.mysql.database' =&gt;$data['database'], 'connections.mysql.username' =&gt;$data['username'], 'connections.mysql.password' =&gt;$data['password'], ]);
What I never understand is why companies want to save a couple of grand on developers if the company and what they are selling is profitable? 
In business, it's all about the bottom line. That hiring person gets to say they saved the company $10k on their next performance review as well.
Setting a page name also helps with &lt;title&gt;
And, they could offer you $72-75k to make it look like they're really interested, and value you more than you value yourself, while still saving some money.
I've turned down jobs at high profile companies just because they would force their toolkit on me. My argument is that a developers IDE is his most important tool, it makes no sense what so ever to enforce an editor on them that doesn't work "for them". It's as if you're actively trying to disable your workers. I now work as a developer of Komodo IDE so I guess I did finally accept a job where they force an IDE on me ;)
Right. I should have reworded that as "They're not going to make you a serious offer with those amounts so it forces them to *either reject your app or* revisit the issue later on." I guess my point was do not play their game, and if they reject you for what you put in a form field asking a ridiculous question, then it's really not worth working for someone who is already demonstrating that they can't be bothered to even pretend to give a fuck about your end of the employment deal.
Agreed.
&gt; Because if they save money on a profitable product then their profit goes up? Just because something is making money doesn't mean a company isn't always looking for new and innovative ways to save the bottom line. But in economics the unseen is just as, if not more, important as the seen. Sure you save a couple of grand, but why look at it like that? How do you know it's profitable in the long run? Why not approach it as finding the candidate that fits better which would increase productivity but costs a little more? 
pre-mature optimization is the source of many bugs and regressions.
I think some sort of code review forum would be interesting. perhaps not here but a new subreddit might do.
http://www.reddit.com/r/codereview
We don't typically refer to an application's design as "optimisation", as the term mainly applies to efficiency or resource management. Anyway, if maintainability and extensibility is your goal, adhering to the [SOLID](http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29) principles would be a good starting point. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SOLID (object-oriented design)**](https://en.wikipedia.org/wiki/SOLID%20%28object-oriented%20design%29): [](#sfw) --- &gt;In [computer programming](https://en.wikipedia.org/wiki/Computer_programming), __SOLID__ (__Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion__) is a [mnemonic](https://en.wikipedia.org/wiki/Mnemonic) [acronym](https://en.wikipedia.org/wiki/Acronym) introduced by Michael Feathers for the "first five principles" named by [Robert C. Martin](https://en.wikipedia.org/wiki/Robert_C._Martin) in the early 2000s that stands for five basic principles of [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming) and [design](https://en.wikipedia.org/wiki/Object-oriented_design). The principles, when applied together, intend to make it more likely that a [programmer](https://en.wikipedia.org/wiki/Computer_programmer) will create a system that is easy to [maintain](https://en.wikipedia.org/wiki/Software_maintenance) and extend over time. The principles of SOLID are guidelines that can be applied while working on software to remove [code smells](https://en.wikipedia.org/wiki/Code_smell) by causing the programmer to [refactor](https://en.wikipedia.org/wiki/Code_refactoring) the software's [source code](https://en.wikipedia.org/wiki/Source_code) until it is both legible and extensible. It is part of an overall strategy of [agile](https://en.wikipedia.org/wiki/Agile_software_development) and [adaptive programming](https://en.wikipedia.org/wiki/Adaptive_Software_Development). &gt; --- ^Interesting: [^Object-oriented ^design](https://en.wikipedia.org/wiki/Object-oriented_design) ^| [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^| [^Interface ^segregation ^principle](https://en.wikipedia.org/wiki/Interface_segregation_principle) ^| [^GRASP ^\(object-oriented ^design)](https://en.wikipedia.org/wiki/GRASP_\(object-oriented_design\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjn4xai) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjn4xai)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Okay, we get it.
Thanks
Yea... Thanks for trying to contribute, but this conversation has absolutely nothing to do with economics. The entire point of a company doing this is because they can charge you exactly what you put down, especially if it's under what they're initially offering, as that's what you're expecting to get paid. So five months down the line when you find out that you're the lowest paid developer they can fall back on, "well, during your hiring process we asked you to tell us EXACTLY what you were worth. This is what you provided us with, and we were happy to oblige."
I've decided that asking the higher class to resolve the arguments (and their order) is a violation of SOLID principles. In my mind, the ruling factor here is that the method signature belongs to the domain of the higher class (typically there is just one receiver who also belongs to that domain). So it is the responsibility of the receiver (listener) to provide a mechanism to interface with the higher class domains interface. Providing a dedicated listener for that domain would be prefferable to asking the higher domain to dynamically use Reflection and to create a cached version of that file; just make a concrete one. Further still; using DI would allow a decorator to be used and neither class would even realize (easier when its a just a callable type). Thanks. 
I hate to say, but something like this would only work on someone who has done no research into their own field of expertise, and quite frankly, if you haven't so much as done that, then you don't deserve a decent salary.
The same as it is for super mega ultra projects.
Great. Thanks
You're just a little bit off. With Pimple, you don't (or at least generally *shouldn't*) pass the entire DI container in to the class being instantiated. Instead, you pass it to the callback function that's used to generate the class. Like so: $container = new Pimple\Container(); $container['foo'] = function() { return new FooService(); } $container['bar'] = function($container) { $foo = $container['foo']; return new BarService($foo); } $bar1 = $container['bar']; $bar2 = $container['bar']; Note above that you can optionally pass the `$container` to this callback function, if you want to pull any dependencies from out of it. In the Pimple documentation, they shorten that to "$c". If you pass in the entire DI container to the class and then just pull whatever dependencies you want out of it from inside the class, this is called "service location" and, while it has valid uses, in most cases it's an anti pattern. I.e., instead of this: class BarService { public $foo; public function __construct(Container $container) { $this-&gt;foo = $container['foo']; } } $container['bar'] = function($container) { return new Bar($container); } You'd want to do something more like this: class BarService { public $foo; public function __construct(FooService $foo) { $this-&gt;foo = $foo; } } $container['bar'] = function($container) { return new BarService($container['foo']); } The second example is generally preferable because now, the class is not at all dependent on the internal state of the DI container. The class needs no knowledge of the DI container to function. Also, you can see the class dependencies just by looking at the constructor. With the first example, there's nothing to stop you from initializing dependencies sort of willy-nilly throughout the class. That could cause some hard-to-track-down errors. I wrote all that out basically because the gist of your question seemed to be asking whether you're required to use Service Location with Pimple. And the answer is, you are not. With either Pimple or Laravel you can use Service Location, and with either container, you should avoid it in most cases. Where Laravel's container really shines IMO is that it provides automatic resolution of any dependencies that are type-hinted in the class constructor. You don't even necessarily need to bind the dependencies on the container, unless you're binding an interface to a concrete implementation. So the Pimple code above in the first code block, which creates `$bar1` and $bar2` --- that could all be replaced with this: $container = new Illuminate\Container(); $bar1 = $container-&gt;make('BarService'); $bar2 = $container-&gt;make('BarService'); Pretty neat. 
http://nvie.com/posts/a-successful-git-branching-model/ - I follow this workflow regardless of version control or project I'm working on. Everything starts off in a sandbox and moves into the dev cycle. 
Been thinking about the View/Controller double name issue and I suppose I could move those up a folder on a case by case basis. I still like my organizational approach though. Thanks for the feedback!
So, basically you're advocating that when we reach a situation where this comes up (not hardly as rare as you're trying to make it seem), we should cripple extensibility by removing the interface - thereby making it impossible for alternate 3rd party implementations to be injected into your code unless they extend your abstract class...? And with that, throw out proper design by coding to a concretion, rather than an interface? All to prevent having to use an "unnecessary" affix? No thanks; that's not for me. I'll deal with the "disadvantage" of not running into naming conflicts that prompt me to reevaluate my design by simply paying attention to my design/abstractions in the first place.
&gt; The argument that they are easier to find is unpersuasive with modern IDEs This makes a huge assumption that you're using an IDE and not something like Vim or Emacs.
You should **never** pass around the container itself (no matter the implementation), as that's actually treating it as a registry/service locator, and it will absolutely ruin the maintainability of the rest of your code (all your dependencies will become "hidden", since they're no longer explicitly defined in your constructor/setter method signatures).
Actually, I would advise *not* doing that. Regardless of how you choose to structure things, consistency is *always* the most important thing. Keeping it as-is is definitely better than doing it conditionally here and there.
I agree with this. Plus having `ProductInterface` makes it easier to understand that you're not requiring a class itself, but a class that implements that interface.
There really isn't. However, as long as you'll always be working on arrays, you can have a function like this: http://bpaste.net/show/gdHCVLzYxMvkNtfDkJLZ/ which will let you do `get($data, 'bar')`. Also look into Symfony's HttpFoundation component. http://symfony.com/doc/current/components/http_foundation/introduction.html
Yeah I still tend to agree. I haven't fully decided on what approach to use as it's been in the back of my mind for months.
The answer is there's no such thing as a rational actor. I don't think anyone here is disagreeing that trying to undercut your salary costs like this only serves to drive away the intelligent and talented people that you really would yield you greater gains in the long run. They're explaining the reasoning behind the hiring tactic, not justifying it. The company is stepping over dollars to pick up pennies.
You omitted the 3rd option, which is the one we're duscussing. The class is *not* the only implementation, but it has nothing unique about it. You keep proposing that your two scenarios are the only ones, but that premise is blatantly and demostrably wrong. If nothing else, there could be no difference other than where the implementations come from (e.g. your own and a 3rd party's). This does not mean that the implementations will be the same, just that those implementations do not warrant a unique name.
I would answer the question, but phrase it broadly: &gt;I require a competitive salary that is inline with my experience and the responsibilities of the job. Additionally, I will require paid time off. Other benefits, such as retirement plans, paid medical, flexible working hours, on-site food and beverages, a gym or paid gym membership, transportation reimbursement will be factored into the total compensation package. Then you have a place to bargain with. You want $120K and they say the best they can do is $100K. Can you get an extra 2 weeks of vacation? Does that include paid medical? There are many factors to "compensation". Your salary is just one of them.
PHP has a low barrier to entry, and so it's often common to find crappy code in the wild. I've never seen someone just output html in a function like that though, I've seen heredoc sort of used similarly but it was fit for purpose. Also: /r/shittyprogramming
&gt; Is this or has this ever been a normal practice (bad code) This is normally bad practice. ;-)
Ignore them. The League is doing good things. I often find myself checking your guys stuff out before I use anything by anyone else. Chances are yours is better made and doesn't get a few pushes and then abandoned. Keep up the good work and brush off the haters.
Yes it does. Using "facades" like this is teaching people to use statics when they shouldnt be. There are plenty of other examples, but you are a fanboy, and im not going to waste my time arguing with you.
Technically, they do the same thing, but the first one uses statics where statics are not supposed to be used. Again, several reasons why the second option is better.
if you are going to be the only person looking at the code, and you get everything thats happening, then it may be ok. &gt; it's not like by using them I'm going to somehow forget that and start throwing singletons into my code all over the place. You mean like the OP is asking? &gt;.&gt; This literally just happened. Beginners picking this up arent going to understand, without reading, what is going on with all these statics. 
There are actually some situations where you have to pass the container. Otherwise you deal with massive circular reference issues. But normally, you are correct. It should be avoided at ALL costs.
Other than "confusion of what a real facade is" please give valid reasons why Laravel's Facades are gonna hurt you in the long run.
* Using statics when they shouldnt be used * Teaching people to use statics all over the place. This isnt even the first instance i've seen this issue * Having the "use" statements at the top for the facades makes it difficult to know what your class is actually using. * It is smelly code.
Do you always get angry this quickly?
I was referring to what the word optimisation means, rather than the context you've described. Perhaps my naivety is what separates me from veterans like yourself. :)
Anyone who knows what is going on with Laravel and it's facades understands that if they see `use Vendor\Project\Facades\Class;` at the top of the class then it's being resolved out of the IoC container and they should probably look for the `Vendor\Project\ClassServiceProvider` to see what is going on. You're just being ignorant of the framework and refuse to understand how things actually work and use that as a crutch as to why newbies get "confused"
if you oversell yourself (intentionally or not), and they can't determine it in a job interview, they probably won't be able to determine it in the regular job position either. Not saying it's right or good, just a scenario I've seen played out multiple times. 
i know perfectly well how it works. But i'm not the issue here. You keep skipping over the part where i say it teaches bad habits for people learning. Stop getting so goddamn defensive over this. Someone has a different opinion than you. Its ok. Get over it. Move on with your life.
You clearly do.... lol
I learned it. Never taught me bad habits. Has it taught you bad habits? Stop spreading misinformation to conform with the masses of Laravel haters and be educational towards newbies.
http://en.wikipedia.org/wiki/Program_optimization
Eh, not always the case. You can bullshit qualifications - you can't bullshit results.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Program optimization**](https://en.wikipedia.org/wiki/Program%20optimization): [](#sfw) --- &gt; &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), __program optimization__ or __software optimization__ is the process of modifying a software system to make some aspect of it work more [efficiently](https://en.wikipedia.org/wiki/Algorithmic_efficiency) or use fewer resources. In general, a [computer program](https://en.wikipedia.org/wiki/Computer_program) may be optimized so that it executes more rapidly, or is capable of operating with less [memory storage](https://en.wikipedia.org/wiki/Computer_data_storage) or other resources, or draw less power. &gt; --- ^Interesting: [^Optimizing ^compiler](https://en.wikipedia.org/wiki/Optimizing_compiler) ^| [^Interprocedural ^optimization](https://en.wikipedia.org/wiki/Interprocedural_optimization) ^| [^Semidefinite ^programming](https://en.wikipedia.org/wiki/Semidefinite_programming) ^| [^Stochastic ^programming](https://en.wikipedia.org/wiki/Stochastic_programming) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjncs6m) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjncs6m)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
This is how WordPress handles templating. It's the worst approach possible. I'd highly suggest staying away from it.
Thanks for the link! Any suggestions on how to apply any of these tips to the code I posted?
clearly not everyone.
Depending on how small, I may just open up sublime text and incrementally hammer away at it while running the project on my local server. Yeah, I *should* use git... 
&gt; I don't deny that, but I think they're useful enough as a tool to respond with education, not necessarily avoidance. I'd rather teach them the underlying side of what DI normally looks like first, instead of starting them off with facades. Be it symfony, zend, or even pimple.
Again, not always the case. You can take that chance, or you can be the guy who gets fired for not knowing what the fuck he's doing and has to live with that 2 month position in his job history for the rest of his career.
nothing is 'always' the case. My own experiences are that it's far more common for people to fake stuff and get away with it for a long time vs getting "caught out" in a short amount of time. If your team was that good at spotting BS, they wouldn't have hired the person in the first. EDIT: No one sane would keep a 2 month stint on a resume where they got fired. They'd just have a larger gap, if it mattered at all.
What? No, that's not true. Don't mix up Wordpress with Wordpress's plugins (which are quite often written by messies)!
I'm also speaking there :-D I look forward to seeing you in Boston!
Yes, they definitely use this approach. This is the 1st file I even looked at. Just imagine all the other ones. https://github.com/WordPress/WordPress/blob/master/wp-includes/class-wp-editor.php#L990 Don't defend WordPress :O!
&gt; This is ~~normally~~ always bad practice.
I'm a little late to the game. Others have posted some positives and some negatives. But I'd like to call to your attention one particular issue that I think is an especially virulent negative. In your [framework.php](https://github.com/ClanCats/Framework/blob/master/framework.php) file, you assign some configuration to what appears at first glance to be local variables -- $path and $directories. Though, as it turns out, these aren't local variables at all. You can't choose to name them differently, for example. Because they're actually global variables. Other code relies on those variables existing and being named exactly $path and $directories. And that other code that stealthily relies on those global variables is not only in another file, but it's in a whole other repo. The [wake.php](https://github.com/ClanCats/Core/blob/master/src/wake.php) file of your core repo. You end up with parts that are tightly interconnected in non-obvious ways. In framework.php, it's not obvious where, when or how these variables get used. It's not even obvious that they need to have a very specific name to work. And in wake.php, a whole other repo, it's not obvious what these variables are, what values they hold, or where they got set from. Global variables are evil. Avoid at all costs.
*s/optimise/make testable/g* and you've got it made. Code that's broken into succinct, testable units is generally easier to understand and extend. 
So name it based upon your algorithm. What you're not even considering is you naming difficulty might be a smell that something else is amiss.
I usually use notepad as my editor but I've recently upgraded to wordpad because the font's a lot easier to read. I then use filezilla to upload it to my live server on the internet that everyone can see. haha jk
I don't know if this is a learning exercise or not, but if it's not you're far better off using their official SDKs.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
Thank you! Should I delete this then?
Without any context, `curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,FALSE);` seems like a Bad Idea. 
So you say `curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,TRUE);` would be safer?
Yes. It would also break any misconfigured PHP installation that isn't able to find the root CAs it needs to validate TLS certificates correctly (of which there are many, as I understand it.) If you're deploying that on boxes you control, there's no reason not to do it right, and you won't have to worry about DNS spoofing attacks compromising your payment system.
I'm speaking as well, looking forward to meeting you!
I'm totally allowing for that option. I'm telling you that if it's true that there's nothing unique about the implementation, and nothing else is amiss, and hinting on an abstract class is insufficient, then add a relatively meaningless prefix to the concrete implementation as Bob Martin suggests. The question was should this be a rule and to that I answer a resounding no! because the value is in code quality which comes out from this naming exercise. That's all too often lost by reliance on meaningless and unnecessary prefixes and suffixes. 
That looks a lot more complicated. What would the benefits be?
i dont say either of those though. I say "This arguments needs an object that implements ProductInterface" and that makes more sense to me because i know its an interface without digging into the code. Though im not sure if im agreeing with you or not, because it seems half your argument goes against your example? idk.... lol i could be sleep deprived.
There may be a very compelling and practical reason to pass an array by reference, but in general, don't. Passing by reference is almost never the right way to do something, at least when talking about the explicit reference that you make by prefixing a variable name with an ampersand. In order to write code that is modular and doesn't cause side-effects, you should either pass a copy of a thing and return the modified thing, or use some object that can change its own state predictably in situations explicitly defined by its interface (or API if you will). In your example here, there is absolutely no reason to pass `$value` by reference, and if I were reviewing your code I would ask you to change it. You can achieve your goal of warning-free array access with normal, by-copy arguments: function get_param($key, $default_value = null) { return !empty($_GET[$key]) ? $_GET[$key] : $default_value; } // In use: $bar = get_param('bar'); $baz = get_param('baz'); Note that this solution also saves you the hassle of typing `$_GET` over and over. If you really need a general use function that saves you the boilerplate for any array under the sun, just pass the array and key as separate arguments. function get_param($array, $key, $default_value = null) { return !empty($array[$key]) ? $array[$key] : $default_value; } // In use: $data = [ 'bar' =&gt; 'Hello' ]; $bar = get_param($data, 'bar'); // =&gt; 'Hello' $baz = get_param($data, 'baz'); // =&gt; null If you want to merge $_GET and $_POST together for convenience, you can get all fancy and do that within your function. For performance, I would suggest writing it in such a way that you only call `array_merge` once per request, since the request parameters generally don't change during the life of the request. You can do this with some singleton or static class or variable.
install phpMyAdmin, then just export then import?
That docblock really sucks when it comes to @param types (either missing, or just null...), which can be uber helpful with stuff like PhpStorm hints and autocompletes. I hate using trash packages that don't use @return to type hint the return value, because my IDE goes dead. I don't want to have to jump to your source to figure out what you might be returning. Tell me; tell my IDE!
How exactly is there a server involved with command line migrations? Do you mean getting tripped up configuring the service information for the command line tool? Which tools have you tried? If you want to use the really powerful ones, you're going to have to figure out the command line.
I mean installing the tools on my local machine. If I'm having trouble on my local machine... I'd rather not worry about it on my production machine. &gt; If you want to use the really powerful ones Are there non-powerful ones that don't require a command line tool?
The solution is a simple modification to the function definition: function var_set(&amp;$value, $test, $default = null) { if (isset($value[$test])) { return $value[$test]; } else { return $default; } } $data['bar'] = 'bar'; ///////////////////////////////////////////////// Print "** BEFORE **\n"; var_dump($data); $bar = var_set($data, 'bar'); $baz = var_set($data, 'baz'); Print "\n** AFTER **\n"; var_dump($data); Result: ** BEFORE ** array(1) { ["bar"]=&gt; string(3) "bar" } ** AFTER ** array(1) { ["bar"]=&gt; string(3) "bar" } 
What do you really like about it @lexbi? @Taleria - maybe you can help answer this too. I am new and I am trying to figure why this works better over other alternatives? What would be my other alternatives?
Important point: Are you *unable* or just *unwilling*? Being unable makes sense. Being *unwilling* means that this is posing itself as an opportunity to learn. If that's the case, I'd suggest take advantage of that opportunity and make use of the best tools available for whatever job you're working on. If this is the case, don't let the CLI scare you off. I like GUI myself, but sometimes you just gotta get down and dirty in that command line interface. If you're *unable*, you may still be able to run migrations without the CLI, however if you can't find anything that does the job, maybe make something yourself. For example, take an existing CLI tool and execute it via `passthru()` or `exec()` (obviously **security** is going to be a major concern here). **That being said...** Have you tried Laravel, for example? In Laravel, I know what while you can call: php artisan migrate:make name_your_migration_here And php artisan migrate Apparently, you can call artisan commands from within PHP code, like so: Artisan::call('command:name', array('argument' =&gt; 'foo', '--option' =&gt; 'bar')); http://laravel.com/docs/commands#calling-other-commands http://forumsarchive.laravel.io/viewtopic.php?id=5252 *Note: I have not tried this. Let me know if this works for you.* **Then again...** Even getting up and running using a modern framework like Larvel, or really, leveraging the power of PHP's `composer` tool is really going to require you to use the CLI. So, if it's an "unable" situation (e.g. in production) then you'll be fine. If you're unwilling, you ***really*** need to learn. 
No. Stop it. This is your chance to learn. It sucks being in that uncomfortable zone of "I don't have any clue how this works" but we have all been there. Learning the basic CLI/server stuff will make you a better developer. Just tough it out, watch some tutorial videos on vagrant and keep at it until it clicks.
Traditional
What about an array/object of regexes? Just loop and validate each field against the corresponding part of the array/abject.
Many facts were harmed in the making of this.
&gt; According to job search engine Indeed.com, PHP job listings peaked around 2011 and have since plummeted nationally. As far as I can tell, this is the only evidence offered by the author to justify the article's premise. Problem is, [CSS and JavaScript show the exact same pattern](http://www.indeed.com/jobtrends/php%2C+css%2C+javascript.html). Should we write an article about the decline and death of CSS and JavaScript? I'll believe you, OP, if you can produce solid evidence, but so far you don't have it.
I'm likely not going to be popular - but I'm an Ops guy, I don't code more than 20hrs a week. http://hutton.systems/blog/posts/2014/Aug/10/apache-24-development-environment-php-vhost-composer/ Workflow: Get project, make folder, edit hosts file. Start breaking things.
Write your own into your app! Write the migrations into a big array (one command per entry), make a table in the database called migrations, and write a program that checks the migration version in the database, and automatically runs any new migrations in the array and saves the new version number.
This is just a terrible idea. There are so many good tools for managing migrations already.
You're unable to export the data first?
There are a bunch of requirements. And honestly, I cant find an example that would accomplish the same as an IPN anywhere.
Well you can deploy to multiple environments for a start. Most services I've found only let you host the repo. Or if they do let you push, it's for a ridiculous price. If you don't want to pay, &amp; it's for just 1 repo, you could use a combination of bitbucket &amp; dploy.io
The two are semantically equivalent in most regards. The difference is that singletons may implement specific interfaces, while static classes aren't as flexible. Just use whichever fits that context. There are technical differences, as well, but they're usually not that significant. StackOverflow's got your back as usual: http://stackoverflow.com/questions/519520/difference-between-static-class-and-singleton-pattern
The default button look terrible and this has nothing to do with PHP.
FTP ^^* ^^hides ^^*
Does this do the job? http://php.net/manual/en/function.filter-var-array.php
0. mkdir project 0. cd !$ 0. git init 0. &gt; README.md 0. git add . 0. git commit -m Begin project 0. sublime_text .
You might be experiencing what Gary Bernhardt calls "proficiency paralysis," where you think that something is so massive or difficult that you'll never be great at it. Stop thinking that way. You don't have to be great at using command line tools to save yourself hours of time. The more you experiment and learn, the more uses you'll find for your skills. Everything you don't know how to do is an opportunity to add useful and reusable tools to your utility belt. 
It's interesting that the only comment here that actually attempts to answer the OP's question has been downvoted so much. I agree with everyone, the OP should learn the command line. But downvoting an actual answer? C'mon.
It is indicative of a pattern of behavior that suggests thoroughness, forethought and attention to detail. 
Do you have this stuff on Github?
Sounds awesome! Saved! I'll let you know when I get round to trying it
Good explanation on not suffixing: http://verraes.net/2013/09/sensible-interfaces/
It uses the old IPN - PayPal will deprecate that eventually. I'd advise updating to the RESTful API.
&gt; PayPal will deprecate that eventually Could you provide proof link? On the PayPal documentation is no notes that IPN will be deprecated.
I wrote an article about this subject, but I didn't write a tool to do it. You can go one step further and make it a dev requirement in composer and use composer's post-install/post-update script blocks to install your pre-commit hook. Here's the article: [http://tech.zumba.com/2014/04/14/control-code-quality/](http://tech.zumba.com/2014/04/14/control-code-quality/)
If you do it the 2nd way with redirect, someone will figure out how to bypass the authentication part and just do the registration. Registration would have to figure out activation code is valid at that time.
Holy shit. This is exactly what we need at our company. And exactly what I eventually what I wanted to write eventually. I'm so excited to try this out! Thank you!
It makes perfect sense. The less things developers are required to do manually, the more chances they start using it. I will try to use your experience. Thank you.
:D
I just published the free sample of the book, hope you'll enjoy it!
I just published the free sample, all feedback is appreciated!
&gt; I'm suggesting dropping meaningless prefixes and suffixes like 'default', 'base', 'abstract', 'interface' I'd agree about `default` and `base`, but not for language features such as `abstract` and `interface`. The first 2 are too ambiguous since they're not a part of the language, and their definitions are fully derived from the context, so they're essentially just noise words. I'll be the first to strike noise words from names when it makes sense, not only those 2, but also words such as "manager", "handler", etc. However, the latter 2 are explicit call-outs to language features; features which have very strict definitions and roles (that transcend the language at hand), and have a large impact on the way they're used, and thus passing that info along in the name is highly beneficial IMHO. 
/u/ck-on is correct, but more generally, you *need* to perform validation when the restricted action is being performed, because you will necessarily have very little control of that entry point (consider manually sent POST requests). I submit that your uncertainty may stem from your choice of naming. It suggests a focus on the validity of a URL in its entirety, where in reality it is only a small component that is actually relevant. To wit, `yoursite.com/registrationURL/task,activateAccount/?linkid=###########` will always be a semantically valid^1 *URL*, but `###########` can at any given time by an invalid ID (token). Your second solution smells of a generalisation that doesn't really make sense, even if you can ostensibly reuse it for other functionality (e.g., password resets), and that definitely would not be enough to ensure final validity. ^(1)How you handle invalidity is up to you. You are in your right to throw a 404, signalling that the concrete URL is technically invalid *right now* (it may become valid in the future), as well as to perform redirect.
Cheers mate will give it a read asap!
The way I understand it, there's no way to do that in PHP. If you want a PHP script to run on a schedule, you make a cron job. Otherwise, PHP only runs when someone runs the script (i.e. visits the page).
A couple uses I saw: * [NelmioApiDocBundle](https://github.com/nelmio/NelmioApiDocBundle) for rendering the API docs * The HTML format for the resources. One of the main features of the [FOSRestBundle](https://github.com/FriendsOfSymfony/FOSRestBundle) is to enable you to create format agnostic controllers. But honestly, doesn't make much sense to me. I can only see the usefulness of the HTML format for development (the web profiler for testing resources is nice).
Yea a bit sloppy, I'll look into changing visibility and adding accessors. The lack of comment is bad though.. I'll fix that
I'm considering moving temp links data to redis and eliminate the db call all together. --edit, scratch that, I just moved it all to redis which is much easier since it handles the deletion of expired records for me.
I like this solution, is it workable for arrays with multiple levels? $foo['bar']['baz']
curl. Will do the request, gives you enough information on status codes, timing, etc. Guzzle if you want a little more flexibility. Then just run a cron every X seconds.
You can use http://www.hashids.org/php/ and actually have the expiry time encrypted in the link.
if you need to check only a few of your fields for "not being empty", I'd create an array with the field-names of those fields and do a "foreach item in required array, check if matching post-field is not empty" If you have a "missing" array, that starts out empty, you can use that method even to return "error: fields 1, 2, 3 need to be filled out". Still a few lines of code but nothing compared to checking each by hand. 
Another Rails fanboy trying to justify their love for a language no one uses or cares about by claiming the sky is falling on PHP. PH*Please*.
This is going to break so much code! One of my favourite ways of obfuscating PHP code is defining multiple defaults in a switch. I'm going to have to go back to using variable variables now. Edit: just to clarify, that was sarcasm.
Download and extract a zip file? Is source control something foreign to you?
Now that's pretty cool 
And here is an example provided by the paypal team using the newer RESTapi. https://github.com/paypal/rest-api-sample-app-php/
If this had *any* chance of getting accepted, it would *finally* fix things like: var_dump(md5('240610708') == md5('QNKCDZO')); // returns true! But it just won't happen. I can already hear the usual people screaming their lungs out *"this is not the PHP way!"*.
Don't get me wrong, I'm totally okay with correcting those (huge) quirks, but all those weird cases could be avoided by using === instead of == .
I havent thought about doing that. Awesome idea!
Honest question: What use case do you have for obfuscating PHP?
True, but if this sort of fix is *ever* going to happen, the next major version would be the only possible time to break BC.
Your pics are loading quickly, it's just that you have many large images. For me, it loaded 22MiB in 23s; or roughly 1MiB/s. Speed it up by reducing image file-size. Also: Your pics are not cached in the browser -&gt; so every page reload they are re-downloaded. (google: ETag, Last-Modified headers in php) Injections: PDO is good, variable placeholders is good. Can't say more about security without seeing the code. If you trust your users (IE, because you verified their email addresses and/or you know them) then a captcha isn't necessary - but you shouldn't trust users. /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC
I wrote one of these for my company. I was having issues with the piped input in certain scenarios, so I had to result to storing the changes to a temporary file. How did you work around this issue? I don't actually see where you are calling phpcs to see what the final input is. FWIW some features mine has that you may want to add are: * Allow user to configure hunk vs full file mode via `git config` * Advanced prompting (ex: You must meet these requirements because blah blah blah) * Displaying issue errors in-context. PHPCS will say X error happened on line 123. My output surrounds line 123 with some lines of context.
&gt; Sometimes when I load a page the pictures seem to be loading slow. Is this because I have a set height for the pics but the width is set to auto? No. It's because your website's page weight is 22,5 MB. If you're going to display an image at fixed dimensions, resize it to that and optimise the images. Also, fix your caching. You should read this: https://developer.yahoo.com/performance/rules.html and grab this: https://developer.yahoo.com/yslow/ &gt;Also I don't know too much about sql injection and security in general. I did all my inserts using pdo and used placement holders for the variables. When it comes to SQL injections specifically, as long as you're using placeholders for values, and not constructing anything else of the query manually from externally supplied data, you're safe. I can't say anything about the other security aspects of your website, though. 
Didn't know about phphelp. Thanks for the reply though
thanks those links will be useful
default, default and variable variables? It must take you 10x the effort it takes others to profile, debug/test your application. 
Seems reasonable to me. Let people who wrote broken code\* burn! \* fixed typo
There's only one use case for obfuscation: confusing idiots.
&gt;broken coke 
Am I the only once that's concerned that valid syntax is going to be invalidated within a 5.x branch? IMHO, changes such as this should target a major version. That's why major versions exist...
When I first started learning PHP over 5 years ago, Lynda.com's video tutorials helped me a lot. I think videos are much more efficient than books can ever be when it comes to learning stuff like coding. So, I'd say look for visual material rather than books. 
Is that New Coke, Diet Coke, or Coke Zero? Maybe it's American Coke because we don't use real sugar...
I'm gonna go ahead and listen to you.
Learn by doing. Think of a project, a website, or app that you want to make and make it. 
That was sarcasm. Hopefully.
Are you seriously against removing support for a code branch *that never gets executed*? Seriously Anthony? Quoting Sara: &gt; While this impacts syntax, it doesn't really modify what is valid PHP, it just solidifies what best practices should consider correct. If this thing was removed silently, 99.9999% of people wouldn't even notice, let alone object to it.
I learned PHP through w3schools's tutorials, but I would not advise this route for anyone starting today. You might try this: http://www.phptherightway.com/pages/The-Basics.html
If I read this correctly, I don't have to create a virtual host for every folder in /var/www/? This changes so much... 
Rather than relying on cron and DB for scheduling, take a look at https://github.com/chrisboulton/php-resque
&gt; Are you seriously against removing support for a code branch that never gets executed Not at all. I am against making valid syntax today invalid **in a minor release**. [From the release process](https://wiki.php.net/rfc/releaseprocess), under minor versions: &gt; Backward compatibility must be kept I know this is "minor". But with the recent history of "make an exception for everything we want" isn't healthy for the project IMHO. If you have a process, you should follow it. Otherwise it's just pretending and limiting those that follow it, because "if I can get enough votes, who the hell cares about process"... &gt; If this thing was removed silently, 99.9999% of people wouldn't even notice, let alone object to it. Which is why major versions can clean up BC breaks. This seems like a shoe-in for that. 
Honestly though, Anthony, what does it even break? Any default-cases that precedes the last one will never be executed - it's dead code, there's no point for it to even be there. This is really just about fixing a mistake in PHP's parser. Since this case is already disallowed by the PHP specification, I'd consider this a bug, and the RFC+Patch a bugfix, therefore making it a minor release. 
I completely get that. But the thing that we all agreed on doesn't say: &gt; Backward compatibility must be kept, except for bugs nor &gt; Backward compatibility must be kept, except for minor things that don't affect many people nor &gt; Backward compatibility must be kept, except for the things we want We've done MUCH bigger breaks in past minor version. And I think those were wrong as well. I want to see PHP get to a point where there's a major every 3-5 years. Where there's a minor every year in between. Where all releases are easy to upgrade to, because the breaks are planned and not arbitrary (and hence have deprecated notices if possible in the minor before the major). And that starts by being strict about syntax-level BC. It doesn't end there, but it starts there.
Read the edit: &gt;Since this case is already disallowed by the PHP specification, I'd consider this a bug, and the RFC+Patch a bugfix, therefore making it a minor release. If there were a bug in, say, PDO::prepare that would allow you to execute arbitary SQL code, surely you wouldn't argue that you should up the major version number because fixing it would cause a BC break by not allowing people to exploit said bug? &gt;Backward compatibility must be kept, except for bugs Bugs is not something you would want to keep. You should not maintain compatibility with bugs, but rather the expected behaviour. 
&gt; is already disallowed by the PHP specification You mean the one that hasn't been voted on? The one that's still in discussion? The one that's still actively being reviewed, and MAJOR bugs fixed? And no, I'm sorry, but even fixing a break from the spec isn't enough to make syntax changes acceptable in a minor. If you want to fix syntax, increment the major and ship. That's the whole point of version numbers... I'm trying to get the point across that major versions aren't something **anyone** should be afraid of. &gt; Bugs is not something you would want to keep. You should not maintain compatibility with bugs, but rather the expected behaviour. Depends on the bug. Any large enough bug should be considered a feature. For example: you *could* call the fact that traits have state (properties) a bug. Because the original paper they were implemented from **strictly** mandated that they could not have any state whatsoever. So does that mean I can simply write a patch that removes that giant piece of functionality, because "bug".?
&gt; So does that mean I can simply write a patch that removes that giant piece of functionality, because "bug".? I'd say those who wrote the trait implementation didn't really know what a trait is, but yes, fixing that shouldn't require a major version bump. Remember [this](https://bugs.php.net/bug.php?id=48487) or [this](https://bugs.php.net/bug.php?id=49521)? It is astonishing that an outrageous bug like that isn't fixed "because BC".
I think that's a decent enough idea, though it seems a little hand-holdy to me. That said, I have worked on &gt; 1k line switch statements before and if such a situation had arisen it would have taken me forever to sort it out.
PHP scripts can run for an indeterminate amount of time just like any other script. This is how COMET is implemented with PHP. Cron jobs would be the better solution for this particular job though.
(((((((((((((Why?)))))))))))))
I think it's a "we fix a weirdness in the implementation by updating the engine". I think this should absolutely be fixed. Just at the right time, in the right release. That's all I'm saying...
I think despite my previous statement, this argument is compelling.
Professionally speaking, I agree with the "don't use PHP for everything" advice, similar to the "don't roll your own framework" advice. But for learning PHP, I'd suggest the opposite if you've got the time. Use it for everything: roll your own framework, design your own ORM, build your own template system, write your own file-based job queue. It's like playing with matches, or getting sloppy drunk, or running on wet cement. Many people learn fastest by trying and failing. Doing so will shine a bright light on PHP's strengths and limitations; it'll make it crystal clear why everyone is telling you not to, and it'll give you a greater appreciation for the other languages, frameworks, and libraries that other folks have built.
I first learn it by watching [PhpAcademy](https://www.youtube.com/user/phpacademy), then just by books about OOP, and doing my projects. 
Personally, I see this as a bug. It's obviously unintended syntax, and produces unreachable code. And bugs are allowed to break backwards compatibility, even in patch releases, so I think releasing it in a minor is good form. Edit: That being said, there's no harm in leaving it in until 7, though, so I kind of see your point.
&gt; But it just won't happen. I can already hear the usual people screaming their lungs out "this is not the PHP way!". For good reason, too. If you don't use the tool right, bad things will happen. WTFs may arise. Pain will be had. And rage will ensue.
This RFC was dead in the water the moment it was submitted. I respect the time and effort that the author expended in creating it, but there's quite literally zero chance of this ever happening.
One other point. It's not a bug [if it has a test written specifically for it](https://github.com/php/php-src/blob/master/Zend/tests/034.phpt). You could call it a useless feature. Or a poor design choice. But it definitely was intentional (or at least expected functionality which was tested for).
Lynda.com. Kevin Skoglund is the fucking man. My only bug with it is we learned mysqli for database stuff and I personally like PDO much better. 
unfortunately i cant help, all i can offer is an upvote, but could you please explain which issues you had using the doctrine odm? i was thinking about using it with Symfony2.
Started using PCs when I was 12 (had a windows 98 PC) at the time. Always played with the settings and software (even though I had no games or even internet at the time.) By 13, had AOL Internet and kind of started to get the feel of the internet (my sister and I used to be on roleplaying websites lol) Came 14 years of age and one of my favorite websites was shutting down at the time, was so sad. The owner of said website gave me his credentials and said I could run it from now on, he showed me the basics of how to use the software (Webs.com, formally Freewebs.com) and everyday during and after school I would work on that site. I only learned about PHP in my 16 years of age because I was tired of HTML and wanted to customize stuff on my own. I joined 110mb.com and would mess with those forum softwares (myBB, vBulletin, etcetera..) until I officially settled on a custom build PHP code and since then have been using said code. I'm 21 now and even though most people have progressed (using better versions of PHP), I still manage to use my old rusty code and improve it every year. 
It's a bug, alright. It's an implementation bug most importantly. Uncovered and brought forth because HHVM couldn't possibly emulate it. (And why should they?) It's not a bug that poses security or crash potential. It's just uneeded code. And "removing support for ... [the bug]" in this instance is just weasel-wording for "lets break legacy code". The quote summarizes it equally well with "solidifies what best practices" should be. **Introducing** fatal parser errors for *otherwise functionally irrelevant edge cases*, where none were before, just to suite coding style preferences (even if totally valid), in a minor release no less, does not speak of professionalism.
the RFC for multiple default's have more upvotes and created more comments than THIS? I just don't get it just PHP things
Yes, we generally know about and expect bugs before we fix them.
Look into `ifsetor()`.
Yes it does :D precisely why I documented the build. More to come on interactive debugging.
Thanks guys. Yea I definitely don't want to stay with only PHP, but I think it'll be a good start to getting into coding and learning some of the basics and details.
Alright thanks! I do have a couple 'rough drafts' on paper, which I want to make reality.
&gt; It's obviously unintended syntax PHP having grown the way it has, the internals are barely documented, and its specification has been mostly behavior and implementation defined. The fact that this is even possible in PHP, given how the internals have grown, should indicate that this is "intended behavior" even if no one thought to restrict it.
PHP CodeSniffer can also be run on save in various editors using whatever standard your heart desires. This is better IMO, since you can fix the code as you go, rather than waiting to commit. * Vim: https://github.com/joonty/vim-phpqa * Sublime: https://github.com/benmatselby/sublime-phpcs * PHP Storm: http://www.jetbrains.com/phpstorm/webhelp/using-php-code-sniffer-tool.html At my workplace we use these tools along side our [Singularity](https://github.com/behance/singularity) application which spins off Jenkins jobs to determine a good or bad pull request.
Do some research into [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller), [MVP](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter), [MVVM](http://en.wikipedia.org/wiki/Model_View_ViewModel), and [architectural patterns in general](http://en.wikipedia.org/wiki/Architectural_pattern) to get an good understanding for what you're trying to do. If you use a well-known and generally accepted framework, then it's most likely they're implementing some standard architecture. The primary takeaway you should have from reading up on these architectures is the separation of concerns and responsibilities. If you're doing a single-page application, then the following is a little more difficult to imagine a clear-cut separation for. Application logic should not be in anything that's "front-end". Typically in an MVC system, the "front-end" is comprised of the layouts, templates, and views. There's usually forms to submit to login and edit things in a dynamic site, but the views are complete pass-throughs that send that render the forms and the application logic handles everything else. A good way to visualize the separation within a php application is look at the php as the business logic and the html/js/css is the view or "front-end". The html/js/css aspect can done using templating engines such as smarty or twig or even basic php; the latter is typically done using an alternate syntax which also helps mentally separate everything. A good place to start digging is the [templating section at php the right way](http://www.phptherightway.com/#templating). You can also take a look at the sample applications the major frameworks provide to see how they do the job. Frameworks can be explained in a way that's like a person's preferences. Many frameworks do the same stuff and most do it well. Some may offer features you require that influences your decision. It also could just end up a preference between pushing or pulling models to or from a view and how your brain processes it. I use Zend Framework for most of my stuff instead of Symfony solely based on personal preference since both are great choices. There's always many different ways to do something and you're most likely just seeing differing approaches. So long as the decision isn't a result of blatant stupidity, it usually doesn't matter how it's done so long as it's maintainable and can be changed in the future in the event it's determined to be broken or a wrong decision. To directly address the point in your example, the way to do so is with a fallback mechanism. When somebody is logged in, then you pull the data related to them and show it, otherwise you pretend they're a default user and gets whatever the default user is supposed to see. If they need to log in to see a page and aren't, then the default user will see an access restricted notice. The rendering side of the system that actually creates the html and such doesn't care what the content is and just shows what's given to it. If you're making a forum and logged in users only see unread posts, then the list of posts passed to the view is only of unread posts whereas someone not logged in has all posts passed to the view. The mechanism for doing such authentication is always in the business logic area and even then it's often separated away further into a service that's automatically done before the application proper is triggered. Obviously, it can be hard on the resources if everybody gets custom information every time so the way systems get around this is to cache anything and everything for as long and as often as possible yet still reasonable. I hope this helps guide you some. If not, feel free to ask for directions.
MD5 is pretty insecure these days, I think SHA1 might be more suitable.
Okay, but the same one-way principle applies. Once I sha1(word) and put it in sql, how can I UNsha1(word)?
You can use mcrypt for this and just store the resulting encrypted value as a blob in your database. To decrypt it, you'll just need the blob value you stored and the key used to encrypt it. Take a look at this for some examples: http://php.net/manual/en/function.mcrypt-encrypt.php
&gt; If you don't use the tool right, bad things will happen. WTFs may arise. Pain will be had. And rage will ensue. This reminds me of Apple's infamous *"you are holding it wrong"* response to the iphone's antenna problems. How about we *fix* the tool, instead of tiptoeing around its limitations?
It seems odd to me that you would encrypt simple data like name and favorite color in the database because you're worried about "anyone perusing the db". I'd focus your energy on ensuring that your database is secure, instead of encrypting all the data in it. If someone has access to your database, wouldn't they just as easily have access to your project's source code? Put simply, anything that can be two-way encrypted can be decrypted with minimal effort. Anything that is one-way encrypted (ie. Bcrypt) will be next to impossible to decode. While I understand your question, I think you're going about it the wrong way.
I see the flaw in my logic. Thank you. I will look into how to implement AES
Is AES built into php or is there a recommended API for it?
AES is built into the mcrypt API. If you're dealing with passwords, don't encrypt them, use the [password](http://ca2.php.net/manual/en/ref.password.php) API. Also, why the hell do each of your posts have 4 upvotes? I have no idea how cake-day works so I don't know if that's it.
I think it's something about JS (JQuery) !
&gt; Yeah, why do a simple solution yourself when you can use someone's bloated proprietary solution I think you're confusing "simple" with "brittle and error-prone". Why re-invent the wheel when they're giving away performance tires down the road?
Wow you've gotta be a loose unit to deploy code that'll test that one. 
Well once it's identified as a behavior, tests can be put in to make sure that it stays consistent until someone deliberately wants to change it. Someone might have (poor) code that depends on it. And knowing that this behavior exists is pretty important for a PHP core developer because it could prompt them to push back some changes to switch statements. They don't want to break BC on a minor release. I'm maintaining code that could easily contain something like this, and I wouldn't want a php 5.4.x update to suddenly break my site because the devs didn't know that it changes this behavior.
This is not my article, I just found this article useful for me and decided to share.
Phpchart is good
&gt; I mean, honestly, the extra default-cases can't even execute because the engine can only hold a single reference to a default-case, so, unlike your example with the traits, there's no actual change in functionality The problem is: If you accidentally have two `default` clauses in any of your switches, then current PHP runs that fine. Then you update and now it will blow up with a syntax error, potentially bringing your site down if that switch statement is in a part of the code which is not covered by your tests. 
So... you can also do this with `php -a` and `psysh` as well (and `psysh` is better IMO).
I don't know about curl exec, but I've used proc_open before for something similar. You start the command and use set_stream_blocking to make it non blocking. That way you can fire off a bunch of ping requests simultaneously. If you need the return value, just make the stream blocking again right before reading from it while the others continue in the background.
&gt; Does it still cause the external server to load the whole page? The ICMP doesn't request the page it's a low level internet protocol that is often used to check a host's (server but really any internet connected machine with an IP address) connection status. If you're interested check out: http://en.wikipedia.org/wiki/Internet_Control_Message_Protocol &gt; This seems to be the fundamental backbone of this operation, as proposed by my google researching Awesome, if you have any questions just shoot. Also keep in mind that when using https://github.com/reactphp/http-client you have to build in your own time outs. It doesn't do that for you and if something hangs or doesn't completely get through it will run indefinitely.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Internet Control Message Protocol**](https://en.wikipedia.org/wiki/Internet%20Control%20Message%20Protocol): [](#sfw) --- &gt;The __Internet Control Message Protocol__ (__ICMP__) is one of the main protocols of the [Internet Protocol Suite](https://en.wikipedia.org/wiki/Internet_Protocol_Suite). It is used by network devices, like routers, to send error messages indicating, for example, that a requested service is not available or that a host or router could not be reached. ICMP can also be used to relay query messages. It is assigned protocol number 1. ICMP differs from transport protocols such as [TCP](https://en.wikipedia.org/wiki/Transmission_Control_Protocol) and [UDP](https://en.wikipedia.org/wiki/User_Datagram_Protocol) in that it is not typically used to exchange data between systems, nor is it regularly employed by end-user network applications (with the exception of some diagnostic tools like [ping](https://en.wikipedia.org/wiki/Ping_(networking_utility\)) and [traceroute](https://en.wikipedia.org/wiki/Traceroute)). &gt; --- ^Interesting: [^ICMPv6](https://en.wikipedia.org/wiki/ICMPv6) ^| [^Smurf ^attack](https://en.wikipedia.org/wiki/Smurf_attack) ^| [^Ping ^\(networking ^utility)](https://en.wikipedia.org/wiki/Ping_\(networking_utility\)) ^| [^Internet ^Protocol](https://en.wikipedia.org/wiki/Internet_Protocol) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjov5cg) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjov5cg)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I use https://github.com/Seldaek/php-console which is really nice.
I just wanted to say thanks for such a detailed response, I've sent you a message.
I already knew C and HTML - PHP is kind of like a mishmash of the two.
&gt; can also do this with php- a, Not quite the same. &gt;As of PHP 5.1.0, the CLI SAPI provides an interactive shell using the -a option if PHP is compiled with the --with-readline option. You need a php compiled with read-line. Do you know what happens when you give php-a on a build with out readline? Nothing. no error messages..nothing. it even prints out "Interactive mode enabled"..and ll just sit there and ll just keep accepting whatever you type in with out any output..wtf php? I may be missing something, but I think something like this is much more usable than php -a when working with small multiline snippets.
You can find a lot of useful information on http://www.phptherightway.com/ Basics: http://www.phptherightway.com/pages/The-Basics.html Databases: http://www.phptherightway.com/#databases
&gt; How about we fix the tool, instead of tiptoeing around its limitations? I don't want a tool that I have to fix before using. Do you?
https://github.com/leroy-merlin-br/mongolid I've used this for a short while. Before I came to my senses about NoSQL ;)
"Are you seriously against removing support for a code branch that never gets executed?" not sure what do you mean, the suggested patch will also prevent multiple default cases even when all of those would be executed: http://3v4l.org/eZdPU
Second this, alternatively SVG + HTML5 Canvas tag. 
Ill give it a try thanks
I used https://phpacademy.org/ a lot when I was learning PHP Alex does a great job. Classes, although not necessary will be great benefit to you in the long run. PDO vs mysqli doesn't really matter, I prefer PDO as it supports more than just mysql. Build something small, a blog, a photo gallery. Try and use OOP/classes when you build it. Then maybe try using a PHP framework (I use Laravel, but I dont wanna get into a debate about which you should use but it is beginner friendly) I learnt a lot of OOP from using frameworks but some say you shouldn't use a framework until you are fully comfortable with OOP, I guess it depends on the individual. There are also sites like http://tutsplus.com and http://laracasts.com for learning PHP.
How about tying http://php.net/manual/en/function.xml-parse-into-struct.php and file_get_contents to give you a nested array of objects matching the datasource, then create a template and output the array data into it.. Won't be much work tbh.
To be fair, javascript is a prototype-based language, not class-based. Object oriented programming in general should be familiar though, regardless of what languages you are most comfortable with.
&gt; Any default-cases that precedes the last one will never be executed - it's dead code, there's no point for it to even be there. As edwardly points out that's not true. But regardless, if I'm not mistaken making this change will cause a fatal error if code is already out there with multiple defaults. Unless the PHP manual already clearly states you can't have multiple defaults, it's not a bug in the parser. At the most there should be a warning in the next 0.1 increment, with the breaking change coming in PHP-next.
&gt; I don't want a tool that I have to fix before using. Do you? I don't understand. You'd rather use a broken tool than to bother fixing it?
That example is not really about multiple defaults, it simply examplifies switch statements without breaks. Having multiple defaults without breaks is just as broken as having them with breaks.
Here's what I'm confused on. Is all of this achieved in one single file (for example, do I put all this code into one index.php file) or is this something that's broken up into multiple files, and I have to call on all the elements via the array in the index.php file? 
Because you can't fix what isn't broken. The non-strict equality operator works intuitively in this case. "0e####" is a perfectly valid numeric string. And comparing numeric strings uses numeric comparisons. Nothing shady is going on here, and the only way you'd be confused by the outcome is if you *use the tool incorrectly* (read: you don't use `===` for comparisons where you know both expressions are the same type). Your proposed "fix" would cause WTFs of an even more nefarious and common kind, like `"1" != "1.0"`. No thanks.
I've showed you an example where the multiple default blocks will be executed(as opposed you saying that this change will only affect dead codepaths), and the proposed patch would throw a fatal error on that code if accepted.
No. It is simple. I would use another. 
&gt; The non-strict equality operator works intuitively in this case. It works *as designed* but it certainly doesn't work *intuitively*. &gt; read: you don't use === for comparisons where you know both expressions are the same type What? md5() always returns a string so *I know* both types are strings. &gt; Your proposed "fix" would cause WTFs of an even more nefarious and common kind, like "1" != "1.0". No thanks. Not *my* proposed fix, but yeah. I can accept int(1) being equal to float(1.0), but string("1") should never be equal to string("1.0").
Here's the barebones of what you want. Note that this was written in a few minutes, and is by no means neat, tidy or a complete solution to your problem: $xml = simplexml_load_file("http://www.construction-contracts.info/xml_feed/buildingrss/stage/Plans_Approved.xml"); foreach ($xml-&gt;project as $project) { print "&lt;tr&gt;"; print "&lt;td&gt;".$project-&gt;title."&lt;/td&gt;"; print "&lt;td&gt;"; if (! empty($project-&gt;image)) { print "&lt;img src=\"".$project-&gt;image."\"/&gt;"; } else { print "&lt;img src=\"my_placeholder.jpg\"/&gt;"; } print "&lt;/td&gt;"; print "&lt;/tr&gt;"; } 
Consider cross-posting to /r/lolphp. The apologists here won't appreciate it, they'll just apologize.
Last time, being a fan of The Big Bang Theory and Star Trek, I asked the candidates to implement a PHP version of the [Rock-paper-scissors-lizard-Spock](http://en.wikipedia.org/wiki/Rock-paper-scissors-lizard-Spock) game with only two players at a time. It was interesting to see some using simple arrays, others using more complex and OOP solutions. Or even starting simple and realizing the urge of better a structure.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Rock-paper-scissors-lizard-Spock**](https://en.wikipedia.org/wiki/Rock-paper-scissors-lizard-Spock): [](#sfw) --- &gt;__Rock-paper-scissors-lizard-Spock__ is an expansion of the classic selection method game [rock-paper-scissors](https://en.wikipedia.org/wiki/Rock-paper-scissors). It operates on the same basic principle, but includes two additional weapons: the [lizard](https://en.wikipedia.org/wiki/Lizard) (formed by the hand as a sock-puppet-like mouth) and [Spock](https://en.wikipedia.org/wiki/Spock) (formed by the *[Star Trek](https://en.wikipedia.org/wiki/Star_Trek)* [Vulcan salute](https://en.wikipedia.org/wiki/Vulcan_salute)). This reduces the chances of a round ending in a tie (from 1/3 to 1/5). The game was invented by Sam Kass with Karen Bryla, as "Rock Paper Scissors Spock Lizard". [*[non-primary source needed](https://en.wikipedia.org/wiki/Wikipedia:No_original_research#Primary.2C_secondary_and_tertiary_sources)*] &gt;==== &gt;[**Image**](https://i.imgur.com/tDK8x7j.png) [^(i)](https://commons.wikimedia.org/wiki/File:Rock_Paper_Scissors_Lizard_Spock_en.svg) - *A diagram explaining the outcomes of the game* --- ^Interesting: [^Sam ^Kass](https://en.wikipedia.org/wiki/Sam_Kass) ^| [^Rock-paper-scissors](https://en.wikipedia.org/wiki/Rock-paper-scissors) ^| [^The ^Big ^Bang ^Theory](https://en.wikipedia.org/wiki/The_Big_Bang_Theory) ^| [^Morra ^\(game)](https://en.wikipedia.org/wiki/Morra_\(game\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjoyxmm) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjoyxmm)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; It works as designed but it certainly doesn't work intuitively. What's unintuitive about it? Bearing in mind that PHP is not a strong, strictly typed language, that is... &gt; What? md5() always returns a string so I know both types are strings. That's what I was saying. Using `md5(...) == md5(...)` is an incorrect use of PHP. You should *never* use loose type comparisons when you know both expressions are the same type. Here, you know they're both strings, so you should be using `md5(...) === md5(...)`, which would have prevented the "issue". &gt; I can accept int(1) being equal to float(1.0), but string("1") should never be equal to string("1.0"). Well, I disagree. I think it would be even worse if int(1) == float(1.0), int(1) == "1", float(1.0) == "1.0", but "1" != "1.0". Non-transitive ~~implicit casting rules~~ comparisons for casting that doesn't involve data loss is *absurd*. *Edit: Need more coffee this morning.*
that's because you're using fall-throughs. this is equivalent to it being part if the last switch-case. fact of the matter is that the redundant defaults won't ever get triggered and if you have multiple defaults, it's most definitively a mistake. either way, this discussion is pointless since ircmaxell and I have already met a consensus. 
print? Use echo you heathen. /s
What if I'm stuck with this pile of gargabe they call stdlib, because it's where all the jobs are (on my country)? I tell you, if it wasn't for all the amazing work the PHP community did on improving the environment I would have quit web development and started selling boats. Or cocaine.
&gt; Non-transitive comparisons for casting that doesn't involve data loss is absurd The == operator is already non-transitive so it wouldn't make it any worse :) &gt; What's unintuitive about it? Bearing in mind that PHP is not a strong, strictly typed language, that is... PHP's loose comparison was intended to make it easier for newbies (i.e $_GET['foo'] == 1 when the url is ?foo=1 should just work) and that's an acceptable stance. But then, that friendliness shouldn't come back and bite said newbies in the ass. Do you think a newbie who doesn't know/care about types (a crowd which PHP specifically caters for) would understand why `md5('240610708') == md5('QNKCDZO')` returns true? There has been *many, many* public exploits based on this, so I'd say no.
Thanks for your help
Thank you very much sir
One of the things I am quite fond of, is to avoid arrow coding. Notice how your branching makes you indent the code more and more. public function newBaanGroup() { if (!Input::hasPostData()) { $this-&gt;setFocusOnHTMLElement('baan_group_name'); return; } /* What does this line do? */ $this-&gt;requiresInput('baan_group_name', 'You need to set a name for the new group'); if (!$this-&gt;requirements) { $this-&gt;setErrorMessage('A group with this name already exists.'); $this-&gt;setFocusOnHTMLElement('baan_group_name'); return; } // Ensure no group with same name exists if (!$this-&gt;baanGroupIsAvailable($this-&gt;baan_group_name)) { $this-&gt;setErrorMessage('A group with this name already exists.'); $this-&gt;setFocusOnHTMLElement('baan_group_name'); return; } /** Here is the stuff the function actually should do! The stuff above is validation */ $this-&gt;mysql-&gt;setSQL('INSERT INTO baan_groups (group_name) VALUES (?)'); $this-&gt;mysql-&gt;setParameters($this-&gt;baan_group_name); $insert_id = $this-&gt;mysql-&gt;execQuery(); /** Query failed, do error handling, if it should never happen (validation above) you should raise an alarm eg sms / email or similar. */ if (!$insert_id) { $this-&gt;setErrorMessage('A group with this name already exists.'); $this-&gt;setFocusOnHTMLElement('baan_group_name'); send_email("dev@foo.com", "Database is down?"); return; } $this-&gt;setSuccessMessage('New group "$this-&gt;baan_group_name" created.'); $this-&gt;sessionSet('baan_group', $insert_id); Router::redirectTo(); } Regarding the framework stuff. You seem to enjoy a simple coding style, which is perfectly fine. You also seem to want to write sql and do the mapping yourself. I think a bit of time looking at a simple framework like codeigniter may help you, decide if you want to use a framework or not.
Totally using print now. Reminds me of the Qbasic days. 
Or... confusing competent developers.
Yeahhh, thats my *problem* with it. I don't want to remember that.
Thanks! I'll be testing this. Are you aware if $timeout is in seconds or ms? &gt; to to lol.
Sir, I'm afraid I'm going to have to ask you to get off the internet.
Seriously, google: php opcache flush http://php.net/manual/en/function.opcache-reset.php Git post pull hook: http://www.manpagez.com/man/5/githooks/ Furthermore, there should be no need to flush the cache manually when one of your (included) files change, opcache will do this for you. :/ /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC
Quick note - you linked to the pulse and not directly to the project: https://github.com/websiteduck/Run-PHP-Code
Oh. Sorry about that. Thanks for the correction and the link.
The pretty much defacto standard for dynamic front-ends is the front controller pattern with MVC and a routing engine. Some key points: **1. All requests get routed through index.php.** This is crucial because bootstrapping can happen once and in one place **2. Part of the bootstrapping process is to define routes and load a router** Routes are defined via a configuration or registry, and basically say "When this URI is matched, call this controller &amp; action". The router parses the URI, reads the routes that were defined, and then invokes the appropriate controller/action (or closure). Things like authentication filtering is either defined as part of the route itself (via a filter of some kind), or is handled in the controller. **3. A view object is created and returned in this controller/action or closure** The controller calls your business logic and ties it into a view or response object. That object usually contains the template that will be rendered, any variables data necessary for the template, and maybe assembles a layout if the templates themselves aren't doing that. **4. At the end of the request, the "dispatcher" or what ever class called the controller/closure then renders the view** All this does is include the appropriate template file, or potentially load from cache, maybe with some output buffering, or syntax compiling (twig, blade etc). Or maybe it's just a simple redirect, json, or XML response. That's the basic gist of what is considered the standard these days. 
I'm jumping in here late, but I agree with both sides here. The Laravel Facades are nice syntactic sugar, but they should only be used when one understands a few things: 1) How Laravel's IoC works, 2) How they affect testing, 3) Where to use them, and where not to use them (using them for accessing static helper classes, but not using them as shortcuts to model classes). Where we might disagree is here: I think the onus is on the developer to learn proper code styles, not on the framework. The framework shouldn't explicitly force you into a bad habit, of course, but in this case Laravel isn't doing that. Facades are not required to create an application -- an entire app can be made with dependency injection using the IoC container.
For my entire career: Windows + phpMyAdmin + PHPDesigner. Then the first day at my new job: "Here's Ubuntu, here's Vim. GLHF". Best thing that ever happened to me. 1. Get yourself a cheap laptop (laptop is key because trackpads suck and there's no mouse to tempt you into lazy slowness) 2. Put Ubuntu on it 3. Install PHP (Apache is probably already installed) 4. Install MySQL server 5. Install Git 6. Install Vim 7. Live in the terminal. Sleep in the terminal. Eat in the terminal. You will become a more proficient and flexible developer. It will be painful and awkward as fuck for a long time, but eventually you get better and faster.
Or professional. Seems liked an amateur project backed up by some company.
http://ihaveabackup.net/2013/10/19/invalidating-the-opcache-in-php-5-5/
seconds
Actually, we did emulate it. We emulate lots of PHP's idiocy.
Even if its an internal project, I'd recommend at least looking into using a micro-framework like Silex to structure your code. And use composer to bring in other dependencies. Also, avoid the tempation to reinvent wheels, unless you want to learn how to build that wheel (ORM, templating, routing, etc..). And reading http://phptherightway.com never hurts.
I just tried it after reading that, and can't believe I haven't been using any of this shit until now. I usually go though a lot to try a script. (as in start my virtualbox ...) :/
You're missing what I'm stating. As of the introduction of this behavior and allowable syntax: PHP's behavior is defined by its implementation. PHP's implementation allows multiple `default` blocks. Ergo, the behavior is "intended" or "by design," or whichever phrase suits you. Yes, it's a bug. Yes, it was probably unintended by the implementer. However, because of how PHP is developed and has grown, it's important to consider that code might actually rely on this *even if it does nothing*.
Yeah, that is an interesting bit of code that demos two features that we should delete from the language.
If I saw code that looked anything like that in production use, I would do a git blame to see who wrote it, find them, and ask what they were smoking (and if I could have some).
It's almost like Duff's device, except even more insane.
That *is* interesting. Thanks for pointing out that we need to be removing goto from PHP!
I would use [bindParam](http://php.net/manual/en/pdostatement.bindparam.php) , It should look something like this. $sql = 'SELECT * FROM `shashi_users` WHERE name=:uname AND password=:pass'; $sth = $dbh-&gt;prepare($sql); $sth-&gt;bindParam(':uname', $uname, PDO::PARAM_STR); $sth-&gt;bindParam(':pass', $pass, PDO::PARAM_STR) $sth-&gt;execute(); Here is your code fixed (Please use bindParam) $sql = 'SELECT * FROM `shashi_users` WHERE name='.$uname.' AND password='.$pass;