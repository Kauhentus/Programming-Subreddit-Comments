why? this is what we use
How does compare using a Windows Server to Linux servers? For the tasks like loading a database, editing database with something like mysqladmin, creating user permissions, installing project dependencies, compiling(?), adding a new "virtual host" for project, etc. Is this something that you can do in Windows server too in the same way in a Linux server?
I skipped vagrant, so, docker seems easier to me than vagrant.
This sounds interesting. Do you know of any good tutorials to walk someone through getting that all setup and working?
If you're using docker-compose you can do &gt;docker-compose exec myproject-php bash
Here is shameless self-plug: [Ubuntu on Windows 10](https://ayesh.me/ubuntu-bash-windows-10-wsl). If you have Fall Creators update, all you have to do is just install the Ubuntu "app" from Windows store. After that, it's pretty much the same steps you'd take to install PHP, Apache, etc. Digital Ocean guides are great for that. 
I'm in the same boat currently. Are there any articles/learning resources you came across that finally made Docker click for you? 
windows.php.net + Apache Lounge + virtual hosts + MySQL installer. You can have live foo.bar:82 with PHP 7.2 and baz.quz:81 with PHP 7.1.
This proposal is not to make it a requirement. It's an optional thing you can do in order to make your code more clear, similar to type definitions.
What you've described can't happen in PHP. We don't have pointers and you can't deference things. http://blog.golemon.com/2007/01/youre-being-lied-to.html
YES
I think there's a fundamental difference in view point between developers who work on many sites for small clients versus those who help maintain a giant beast for just one. I suspect it is the former who drive many of the short-lived framework fads.
this stupid "war" again... please... https://media.giphy.com/media/ToMjGpx9F5ktZw8qPUQ/giphy.gif
&gt; Common tasks like being able to reliably rename a method and all uses across the codebase requires a smart tool - one that is aware that code is more than simple text and one that can do tasks beyond simple text manipulation. Those are not common tasks by any stretch of the imagination. &gt; Have fun renaming a method named 'run', 'execute' &amp; their family in vim - when more than one interface / class defines a method with the same label you need a tool that parses the code into an AST and can perform static analysis to do this reliably. vim fails at this because it's handling code as text. This scenario just isn't something the average developer will ever come across, and it's not one that *any* developer - average or not - will come across regularly. &gt; And IDE's do this out of the box with a greater reliability out of the box. I want to be fixing bugs / delivering features, not wanking off over configuring my tools. The respective feature sets of the vanilla programs are not very useful things to compare. No one uses vanilla vim for a daily development environment, and every user I've ever known has their configuration in a dotfiles repo ready to rock on a new environment. The "wanking off over configuring your tools" is pure fiction. &gt; When I move to a new job / get a new machine I simply download the IDE, open the code and begin working. This process is even simpler and faster for the average vim user (not that it happens regularly enough to be a major factor either).
xampp is good, no reason to move away. its php!
Try using docker (docker compose) and jwilder/nginx-proxy to run multiple independent projects simultaneously.
&gt; it's not possible to deliver features (write code) fast while at the same time keeping the API stable. &gt; if we merge PRs without a sufficiently thorough review, potential bugs can make their way to production that the author didn't anticipate. It sounds to me like you don't have any confidence in your automated testing. That is where I would focus - tell them you need to clear some tech debt to be able to speed up future development and make sure your testing covers the majority of use cases and all critical workflows.
Yes please. Hell, make strict mode require it. 
&gt; Your vagrant file doesn't really translate into a hosting/cloud environment at all Don't throw all your requirements in Vagrantfile - use a proper tool like Ansible, Puppet, Chef, etc.
I shouldn't be too hard on you: Bitnami isn't *completely* awful, but when you're dealing with Wordpress, there are much better standards nowadays that encourage modern development practices. At minimum, look into [Laravel Valet](https://laravel.com/docs/5.5/valet), [Composer](https://getcomposer.org/), and [Bedrock](https://roots.io/bedrock/). You'll be able to at least manage your plugins as composer dependencies, and update everything - including the Wordpress Core - through Composer itself. It uses an alternative directory structure that completely separates your application logic (themes and plugins) from the core itself, so it's pretty great when it comes to version control as well (you're only tracking the things you actually need, not an entire Wordpress instance). Additionally, it uses [PHP Dotenv](https://github.com/vlucas/phpdotenv) to manage wp-config values across multiple environments. Valet allows you to set up a local host that operates directly on your machine without virtualization, and runs as a background process without the need to turn on your local server. It also automagically maps any subdirectories under a "Parked" directory to a {subdirectory}.dev website, so you don't need to alter your hosts file each time you want to serve up a website. Valet is still not nearly as powerful - or as encouraged - as Vagrant or Docker, but it's good for small-scale apps that don't require much in the way of technology and need rapid development. If you're not on a Mac, [there is a Windows fork](https://github.com/cretueusebiu/valet-windows) that I was able to get working, but it was kind of a pain. Still: Learn [Docker](https://www.docker.com/). Or at least [Vagrant](https://www.vagrantup.com/). It completely eliminates the "works on my machine" issue when you have multiple devs on the same project.
Did you make a tutorial too. I've tried it out several times and looked at a few tutorials over the course of a few years and still couldn't come up with something that actually worked how I wanted. I finally gave up a few months ago and hired someone to build a vagrant file and provisioning scripts for me.
Laravel Homestead unless you really need Apache (supposedly there's a way to use Apache in Homestead but it never worked for me).
After having vagrant fail on me randomly for no reason a few times I moved to laragon. I’ll never look back. 
I've given a few conference talks, and wrote two blog posts [\[1\]](https://jtreminio.com/2013/06/make_vagrant_up_yours/), [\[2\]](https://jtreminio.com/2013/05/introduction_to_vagrant_puppet_and_introducing_puphpet_a_simple_to_use_vagrant_puppet_gui_configurator/).
I wouldn’t say it was 90%. The code was a lot more uniform back then, especially since everyone was using the same library. We’re there monolithic spaghetti apps? Of course, but it’s my opinion that people are hiring developers left and right that have barely any knowledge of vanilla js and are focusing more on specific frameworks.
Laravel uses a dependency injection container to auto resolve dependencies. If I'm following the article, the author is suggesting not just using Laravel Facades (a contentious topic) but using the App facade that let's you manually call the injection container via App::make to instantiate inline. It can be useful for factories to receive the app container as a dependency that is injected to then instantiate the concrete instance while autoresolving its dependencies, but using App::make in a static fashion as a substitute for service providers is just weird and not how to do it. 
Just checking: Is Yii still a thing?
Good points throughout, but I'm wondering what you mean about this: &gt; There is a clear lack of maintenance for core Symfony bundle and php libraries the past 3/4 years. I'm really worried about the situation. You know that Symfony 4 just came out, right? Unless you're referring to something else I could be misinterpreting?
With docker compose, you can create a mysql service container with almost zero configuration. Map a volume containing the sql migration and you have your mysql setup within your docker-compose.yml Use a docker file for your apache/php setup and reference that in your docker-compose.yml file
Question...who actually used pass by reference in functions? Is this widely used? If so, what are the advantages to just using a separate variable to store the returned value instead?
Standard library functions `sort`, `array_push`, etc take by-reference parameters.
When I started reading this I couldn't understand why you'd want this in, but reading those examples made it perfectly obvious. Really hope this gets in, and it'd be nice if this was required in strict files too. 
same here, using vagrant + virtualbox. it works like a charm. I also used XAMPP in the past but with vagrant/virtualbox you have more freedom.
I've not tried `Valet` on Windows but it sure is awesome on macOS. Consider trying [valet-windows](https://github.com/cretueusebiu/valet-windows) as it makes all of this so much easier. Seriously, it feels like magic. That's a Windows port of the macOS version. While it's a Laravel project it does not require Laravel. Also, it doesn't bundle PHP/MySQL but it does show a one-liner to install PHP.
thanks for the insight! looks like I've got studying to do!
Its one of the main issues I've had when using JSONAPI.
I'm waiting to see PHP 8.0 performance!
I use it sometimes for things like recursive array functions. 
We just deploy feature branches to our test environments before reviewing and merging into a main branches. This allows the app devs access to continue their work/testing, but also sometimes leads to use needs to change the current feature branch deployed or merge 2 feature branches together to continue testing.
Just manually install/configure Apache &amp; MySQL. You will learn more by configuring this yourself , versus depending on a ready made solution. That may or may not have a trial expiration. 
Check out Laragon. It's pretty sweet and easy.
You can ssh into containers. Just turn the service on in the image and forward port 22 to something else with the -p knob. Then you can ssh to your docker machine and specify the port you forwarded. 
Using `Dockerfile`s is about to be old news too, don't get too comfortable. [Habitat](http://habitat.sh) finishes the evolution vagrant and docker started and lands on a whole new level. Docker adapts the VM ecosystem to containers while habitat brings containers into direct service of apps. Soon we'll laugh about the days where we'd take a base image someone bundled a bunch of dependencies into that got closest to our apps' needs, threw a bunch of commands at it and hope it ends up in the right state, and then through our app on top and hope it all comes together. It all seems so quaint after you take a trip with habitat. With habitat, there is no operating system or distribution or base image your application runs on top of. Your application declares exactly what it needs and an environment is created for it. It's every piece reimagined for the container era
Like a lot of PHP, it's about writing less code (i.e. classes) to carry the data. `in`/`out` vars do this in other languages, and there's no reason that PHP shouldn't have similar (as long as it's performant)
For example I use it for a complex DTO (data transport object) that I "fill up" in a series of processes where previous results are used for further calculations. Much easier to automatically bring into the function all I need and have the object fully ready for next stage on exit. 
Additionally it'll be very easy for static analysis tools to add rules to prohibit the use of pass by ref vars unless they have the `&amp;`, which would pave the way for future PHP versions to deprecate and then eliminate the usage.
You can't ssh but you can run bash. You can do `docker exec -it container_name /bin/bash`. Mostly functionally equivalent to ssh'ing into a VM.
I have a bash function in my bashrc that lets you jump into/out of docker really easily, may as well dump it here; function docker-shell() { # Run shell in named docker container. # Arguments: # $1 - string to search for (container name, image name, bound port, etc). If not given, assume only one container. # $2 - shell to use (defaults to /bin/bash) local searchstr="${1}" while :; do [[ -z "${searchstr}" ]] &amp;&amp; local container=$(docker ps | sed '1d;s/[\t ].*//;q') || local container=$(docker ps | sed '1d;/'"${searchstr}"'/!d;s/[\t ]\+.*$//'); echo "${container}" | sed 2q1 &amp;&gt;/dev/null &amp;&amp; break read -e -i "${searchstr}" -p 'Multiple matches found! Please specify search pattern&gt; ' searchstr done [[ -z "${2}" ]] &amp;&amp; local shell='/bin/bash' || local shell="${2}"; shift 2 docker exec -it "${container}" "${shell}" $@ } Usage: `docker-shell [container/image-name/port/etc] [shell] [...additional]`, where container/image-name can be partial (and isn't required if you're only running one container), and [shell] is also optional (defaults to /bin/bash). Shell can also be a particular command - so you could, for example, do `docker-shell php_container find /var/www/html -type f -iname '*.php' -exec chmod a+x {} \;`
Yes!
 &lt;meta property="article:published_time" content="2017-01-01T09:29:53+00:00" /&gt; &lt;meta property="article:modified_time" content="2017-09-27T06:30:51+00:00" /&gt;
You could try and specify an API through swagger. Generate a dummy (docker) image for it and deploy it locally or on a server. Also create a test that compares your swagger and routes and check if they are in sync (run in build/pre-push). You could even create a build script that notifies people of API changes through chat or mail. Once the actual API service is done, replace dummy images with dev/test images.
&gt; Those are not common tasks by any stretch of the imagination. &gt; This scenario just isn't something the average developer will ever come across, and it's not one that any developer - average or not - will come across regularly. This sounds like you're tooling prevents you from effectively doing this type of change, so you don't do it. Don't conflate your approach (derived from the limitations of your arcane tool choice) with normal development practices. We're not talking about a sophisticated requirement here; renaming things (variables, methods, classes, namespaces) is *super* common for anything but the most legacy of projects. &gt; The respective feature sets of the vanilla programs are not very useful things to compare. No one uses vanilla vim for a daily development environment [..] Because it's an awful tool to write code with out of the box. *Any* IDE, whether it's an IntelliJ IDE, Visual Studio or one of the open source tools like Netbeans / Eclipse is fully functional out of the box, providing common refactorings, syntax highlighting, common error detection/linting functionality etc. Again, your expectations are set by crappy tools - it turns out the rest of the world doesn't suffer under the yolk of a tool designed around TTY and computing restraints from the 70s. &gt; This process is even simpler and faster for the average vim user (not that it happens regularly enough to be a major factor either). How? Because vim is pre-installed? In your previous comment you espoused the value of finding the correct set of plugins / language servers / etc - these certainly don't ship in any OS I've used. If you're talking about your dotfiles, it turns out that pretty much any UNIX program (whether terminal or GUI based) does this - it's certainly no unique selling point for vim.
Seems like you lack automation to deliver faster (at least once every day). Do you keep a CHANGELOG of your API that you communicate well to all teams ? &gt; we don't need to worry about CI being stable all the time How long does it take to run all your tests ? If it's more than 15 minutes, you need to refactor your pipeline.
I'm not talking about Symfony, but the third party bundles that form its ecosystem. A bundle like FOSUserBundle is super old and hasn't aged well. Symfony ACL is abandonned. https://github.com/symfony/security-acl/issues/31 And all other important bundles (FOS, KNP, etc.) are sometimes missing critical bug fixes or enhancements.
I was thinking of learning either PHP or .NET. What would you suggest will better for me?
not that old i guess
that's the fun of internet you just might find an article on programming written by dothraki langauge :D
you da real MVP
It could also help (a huge help) to build a PHP to Javascript transpiler.
It's somehow funny that in my opinion the quality of those articles is mostly very poorly made when laravel wins... 🤔
Here's a quick example of an advantage with Docker. I wanted to see if my codebase would ~~bork~~ work with php7.2. 1 change to my docker-compose.yml - changing the php-fpm image to a 7.2 version docker-compose up -d Ran my tests and boom, no it didn't work, turns out I needed a later version of Guzzle.
&gt; However, the call inc($i) does not contain any indication that the variable $i is passed by reference and may be modified by the function. [...] &gt; If an call argument is marked by-reference, but the corresponding declaration parameter is not a reference, an error is generated. Okay, that sounds great, but what about bugs introduced by the **opposite** breaking-change? What happens when: 
If I understood you correctly, you don't need to pass objects as reference variables. Function fill ($dto) { $dto-&gt;name = "bar"; } $dto = new Foo (); Fill ($dto); Echo $dto-&gt;name; // bar
Comparing speed by using 2 different kinds of projects, comparing 3rd party tools as if it's part of the framework, shorter code means that's it's better?, doesn't understand middleware priorities, doesn't understand twig.... this article is pretty useless.
&gt;4. The call-writer doesn't get any warning to update their code and leaves it as a reference It does get a fatal error: &gt; // Fatal error: Cannot pass reference to by-value parameter 1 [compile-time]
Sometimes you are making modifications deep within nested object structures. Passing all that crap back and forth can take a lot of time (and typing), which slows down execution and makes the code harder to follow.
Do you use some API documentation technique so that API can be specified without writing code? If yes, then what is the reason front end teams can use automated mocking while waiting for you to provide complete API?
Tests only tests against absence of specific bugs. Semver* nor spelling mistakes can be caught by automated testing. Heck even doing silly think like overlapping endpoints 'cause everybody forgot about that other endpoint wont be caught. *In PHP that is. If API is expressed solely by types then there do exist tools that validate semver promises.
&gt; you need to refactor your pipeline. Or just install more RAM and CPU. In non trivial cases, RAM+CPU is way cheaper then developer time ;)
Internals Discussions. https://externals.io/message/101254 
Just spend 1 hour with it, trust me, it's not at all difficult to work with.
Whelp, never mind then, my bad.
Nope, we used it at work, so I was forced to use/learn it. I think that's mostly the best practice to learn sth., using it. Maybe simply create a dev environment (don't use existing docker images on hub, build them yourself) then you learn how easy it is. 
In this case it is actually an array. Never thought of making it an actual object. I'll check if that will work and whether there is an advantage to it. Anyway, your example is from a practical perspective the same thing. 
&gt; It all seems so quaint after you take a trip with habitat. Whatever you're tripping on, maybe cut back a bit?
You can change delimiters in Twig as well https://twig.symfony.com/doc/2.x/recipes.html#customizing-the-syntax contrary to what the article hints to. Twig also has verbatim tags as it was mentioned in comments. You might want to check the Twig docs and fully rewrite the template section. " while in Symfony you can only validate a model." What? You can validate whatever you want https://symfony.com/doc/current/validation/raw_values.html "Symfony, validation rules were called Assertions" Dude, they are called Constraints https://symfony.com/doc/current/validation.html#constraints "Laravel, on the other hand, uses ... magic methods .... easier to understand" OK "Thanks to the ability to access services from the global variable, you can use any service you need in any place you need. " So service locator anti-pattern is +1 point to Laravel? I'm sorry but this article needs contains a lot of errors and is beyond saving.
&gt; What’s the main difference between them In theory there's not much difference between them. &gt; What's the difference between theory and practice. In theory, there's no difference. In practice there is. The main things for me are: The speed difference in bringing boxes up makes life so much more pleasant. Because docker layers each step of provisioning boxes on top of the previous layer, it means that if you need to tweak the final steps of a build, each iteration of change can be done in about 10 seconds. At my previous job, changing a single line in the vagrant file would take about half an hour to see the result. The Docker way of provisioning is much simpler than puppet/chef has, which is what most people use for vagrant. This makes it much easier for me to get boxes running, but then also copying one service from one project to another is about 1 minute to copy the relevant docker file across, and then add it to the docker compose file. Trying to copy service from one vagrant box to another was a complete nightmare. Closer equivalence to production environments...we use the docker images as the basis for provisioning the real servers through Terraform+Kubernetes. Although TF +Kuberneters still requires quite a bit of jiggery pokery to get working, that is all hidden away from the developers. For vagrant, there was a huge amount of crap throughout the vagrant files to allow them to be deployed through that, which made life harder as a developer.
Definitely the first one. I have experience with both and the second one always turns into a big mess over time.
Geez. Didn't we just get rid of it?
I don't think this is necessary. Just convert it into an object, done.. This might only be important when dealing with arrays, period. Never specific values like $i = 0; or $count.
array_walk people use it all the time, it allows you to do array_walk($array, function(&amp;$val){ // do stuff });
It's poorly written and you don't appear to know either framework very well, or good software development practice in general for that matter.
And finally all that stuff will be sqashed to a single "atomic" commit :D
tl;dr php closures have their own variable scope and ability to 'use()' variables from outside the scope while Javascript's closures have access to the full outer scope. 
It's about the code review process ;)
&gt; PHP is losing support from large companies. Facebook, Wikipedia, and Baidu are all using HHVM This is pretty wrong; Facebook do use HHVM (they created it after all!) but [Wikimedia](https://www.mediawiki.org/wiki/HHVM) are dropping HHVM support entirely. Outside of Facebook / WIkipedia I'm aware of no other large HHVM deployments.
While I agree with the over all point here... Vagrant doesn't need to run a VM per project. Being that vagrant is booting up a full VM, as long as you configure it correct, you can put as many applications as you need on it. You just need to add an entry for each to your hosts file. I've got 2 vagrant instances running right now; one has 4 projects on it, the other has 16. That being said, Docker is still going to be a more portable solution.
Thank you!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Not really, it does not add any new features.
&gt; function &amp;passthruRef( I feel like I'm missing something here. What would be the purpose of returning a by-ref from a function/method? Just to be able to chain it inside another function that accepts a by-ref?
This article is not mine, but I agree with your opinion about the author.
Apologies, I misread your comment.
PHP has a build in CSV parser. The [SplFileObject::fgetcsv](http://php.net/manual/en/splfileobject.fgetcsv.php) method gets a line from file and parse as CSV fields. $file = new SplFileObject("data.csv"); $file-&gt;setFlags(SplFileObject::READ_CSV); $file-&gt;setCsvControl(';'); foreach ($file as $row) { list ($fruit, $quantity) = $row; // Do something with values } 
&gt; no language has except PHP This assertion is false. AFAIK C++ has this one, as lambda capture expression, required to not break "not pay for what you dont use" philosophy.
Rokkitt raises some good questions you need to think about! You ask this question more or less as a development question but I think this is wrong. You describe a phase of change is going on in the company in which you experience the feeling that you need to "loosening" up. You don't need to "loosening" up (actually you do, but in another way ;-)). You need to start talking to you colleagues! Don't point fingers! Find the bottlenecks in the business processes of the company and fix them just like you would debug code. I understand you want to keep the API stable and solid. Hell, if all other tiers depend on it...! But that is also a problem; ALL tiers depend on it. You see now? Businesses change over time and require updated business processes. I don't know your company but I do know that if a whole team is waiting for you to finish the job it's not your fault! There is something wrong in the business process or solution stack. 
I like to use this feature a lot. Example I use it for: // some parsing, file churning and stuff // ... foreach ($parsedData as $data) { // more processing // ... $queue[$id] = function(SomeEntity $e) use ($stuff1, $stuff2, $stuff3) { $e-&gt;setStuff1($stuff1); if ($stuff3 &gt; SOME_CONST) { $e-&gt;setStuff2($stuff2); } // ... } } $thisIsActuallyResultFromDB = [1 =&gt; $someObj, 2 =&gt; $someObj2]; foreach ($queue as $id =&gt; $callback) { $entity = $thisIsActuallyResultFromDB[$id] ?? new SomeEntity(); $callback($entity); $entitymanager-&gt;persist($entity); } $entityManager-&gt;flush(); It mimics `INSERT ON UPDATE`. Makes sure it updates data if it exists. Because no data leaks into the scope of the closure and variables passed by `use` are copied, I can pass same variable names into closure in a loop and each closure will have different data remembered. Because of it I don't have to create an indexed array with all variables which will be required by a closure and map them from there after the fact. I can do it directly.
But nobody had knowledge of vanilla JS back in the jQuery days either. Newer frameworks are promoting native and functional concepts more than jQuery ever did. 
I don't think creating more than 3 commits improves the review process for the PR you posted. It's only 3 lines per file, which are probably easy to see why. Better ask for things that are unclear than doing a lot of work to write these if they're squashed anyway.
It really depends on how "strict" you are. They *may* have some valid points but just need to be balanced or tempered with some structure. If your procedures are keeping things from being able to move forward then you're doing something wrong.
For quickly hacking on something, sure. You will run into misery using a different setup to the live environment when deploying your applications (unless you're running xampp on windows server, which I hope you're not).
My first php package. Any recommend for improvement will be highly appreciated. :)
A useful tool I found was https://portainer.io/ which allows you to do some things from a web page.
&gt; This sounds like you're tooling prevents you from effectively doing this type of change, so you don't do it. Don't conflate your approach (derived from the limitations of your arcane tool choice) with normal development practices. First of all, I can appreciate when I see a good argument (regardless of the truthfulness behind it), and this is one, so kudos for that. However, it's trivially refuted, as my own preferred tooling isn't the extent of my experience with codebase changes. You forget that IDEs are much more popular across the development landscape than vim is, and that, like most professional developers, I work on teams. I talk with my coworkers. I run planning meetings. I do code reviews. I see pull requests. And I generally have a very good overview of what is and is not done regularly when it comes to code changes, far beyond "the limitations of my arcane tool choice". And, to hammer that point home, I spend a lot of time working in the open source community on major projects, where all of these same points can be reemphasized. I have a pretty good grasp of what is and isn't done commonly by the average developer, and project-wide naming refactors are highly uncommon. &gt; Because it's an awful tool to write code with out of the box. It's definitely suboptimal, but certainly more productive than an IDE out of the box. That much isn't even up for debate. Vim excels at the things you do most common when writing code, and that much comes out of the box. Hell, even the OP recognizes this much, as s/he considers the best working environment to be an IDE *with a vim mode plugin*. How *either* tool comes "out of the box" is not important, though. It's trivial to add plugins, and you only need to do so once. Vanilla vim is "awful" in the same sense that a vanilla browser is "awful" because it doesn't come with your preferred ad-blocker or password vault. &gt; How? Because vim is pre-installed? My (and most vimmers') new machine setup is just a git clone of my dotfiles and execution of the installation script. It takes roughly 15 seconds to go from a clean machine to working in my preferred development environment. And, yes - vim comes preinstalled. But, again, even though vim takes the cake here, I don't consider it a selling point, because this isn't something you do regularly enough for it to matter. Just don't try to dangle your "out of the box productivity" in front of me, because I'll just chuckle. &gt; If you're talking about your dotfiles, it turns out that pretty much any UNIX program (whether terminal or GUI based) does this - it's certainly no unique selling point for vim. We're comparing vim with IDEs here, so what is or isn't unique to vim among UNIX programs is pretty irrelevant.
Please check out my bingo-functional library. I've recently released version 1.4.0. The link is https://github.com/ace411/bingo-functional
I still recommend trying to follow 7 syntax and code "rules" (keeping mysql deprecated, no register globals, etc.) Mainly for two reasons, 1. Easier conversion down the road. I'm not a fan of automatic conversion, and frankly I believe it's always good to review old code if given the chance. 2. Most of what was deprecated, was done so for a reason. Just because something flawed/vulnerable is available, doesn't mean it should be used.
If you want to write a PHP to JS transpiler, an explicit &amp; would ease (i mean a non explicit &amp; ruin a slim/fast PHP to JS transpiler) the implementation. 
What kind of features are we talking about? My gut feeling tells me that adding a new feature should ideally not jeopardize existing api endpoints at all. Is your API design maybe too specific and use-case oriented?
I tried to switch, but had huge MySQL performance issues. The database is over 40GB and from what I could gather, HyperV accessing the host file structure is what causes the problems in performance.
Can confirm. It took me about a half hour to get everything set up. I ran into some large technical restrictions though and had to revert back to an AMP solution (Ampps for me).
Correct, in C++ a lambda is its own scope and variables can be "use"d via the capture block. { int a = 1; const auto adder = [a](int arg) { return a + arg; }; printf("%d\n", adder(5)); } Though unlike PHP, C++ can do implicit capture by using = or &amp; in the capture list to capture by value or ref, respectively. [=] { return x + y; } // x and y auto captured by value
I like using and and or to do some simple validations and attribuitions, like: - $flag == 6 and $php_we_can_do = 'hell yeah'; - $flag == 6 or $flag_is_not_six = 'not 6'; 
Regarding Wikipedia running HHVM: plans are in the works to migrate to PHP 7 - https://phabricator.wikimedia.org/T176370
Since php is written with c and c++ is fancy c, I assume its possible in c as well.
Use Docker
Docker is great but not everything is containerized. Mac is ideal because of homebrew, native CLI and Laravel Valet is realllllly nice (even if not doing Laravel). My recommendation for windows is work on getting the Ubuntu from windows store setup and just use that. 
Is the code base a pile of spaghetti? I could understand your concern if you're working with something that is difficult to maintain. If you go by DDD, you're in the wrong here. Start fencing in your technical debt and writing tests for the things you're really afraid will break? It's an agile obsesses world right now, and business needs are why we all have jobs at all...
&gt; Command lines felt weird, like connecting to a container to use the PHP command like from SSH felt like I wasn't doing the good thing ? ?? Are you saying you connected to the container through SSH in order to do something on the command line? docker-compose exec service_name command Example: docker-compose exec php-fpm bash 
&gt; While you do still need a VM, you only need one VM That's not true for Windows 10. It has native Docker.
&gt; Vagrant always needs 1 image per project Nope. It only needs different images if your projects have different environments. Otherwise, it's fine to reuse images for as many projects as you want.
This has been super helpful. At work I have two servers running docker containers for internal apps. Portainer is set up to connect to both daemons which is really nice.
Nice post
Did you really? Lol
Click bait
Kind of wish there was a way to allow variables from the current scope pass through to closures though in some instances. class SomeExample { public function blah() { return function() passthrough { $this-&gt;someService-&gt;someMethod(); }; } } vs class SomeExample { public function blah() { $someService = $this-&gt;someService; return function() use($someService) { return $someService-&gt;someMethod(); }; } }
This is terrible. Please don’t encourage people to write apps like this. 
That's a usual Perl construct. Things like `fopen $file or die;`
This sounds great but if I submit a story it would be how I touched the entire code base in freestyle while simultaneously thinking of a solution and building it. 
Ops... i didnt know that is an usual Perl syntax. My bad, sorry. 
There are very, very few uses for return by reference. It's usually only used for `function &amp;__get()` and `function &amp;offsetGet()`, to support things like `$obj-&gt;magicProp[] = 42`.
They make some really good points. I'm not sure about this proposal now.
This method of commits can force you in taking a step back and first spec out what you want to do. You could also just use this for refactors and for new features use the "old way"
&gt; Outside of Facebook / WIkipedia I'm aware of no other large HHVM deployments (can you name any other companies than the three you already listed?). Box and Etsy are two other large companies that use HHVM. That's just off the top of my head, I'm sure there's more. The point is that large companies that used PHP and could be contributing resources to PHP's future are instead choosing HHVM. &gt; For serving a plaintext file; something that should be done by your webserver alone. If you look at (pseudo) real-world scenarios PHP does much better (6,805 for plain php5 vs 3,677 for nancy-mono - and PHP7 roughly doubles perf when compared to PHP5). I'm not sure how much trust I put in that benchmark. MySQL / PostgreSQL are both not very popular in the .NET world; I would expect .NET to do better with SQL Server as that's more commonly used. Regardless, this ties in with the ecosystem "+" I gave for PHP: whereas PHP has rock solid libraries for just about anything, .NET is still catching up. There is no reason why .NET cannot be faster than PHP in equivalent benchmarks - the work just hasn't been done. &gt; I'm baffled as to why this would be a point in C#'s favor, unless you're working for Microsoft. You can host C# and PHP apps on any cloud hosting platform. Yes, it's true, you can host your app anywhere. My point is that Microsoft sees Azure and .NET like peanut butter and jelly. Thus, Microsoft is investing heavily in .NET to bolster its Azure ecosystem.
Ah, good example. Thank you
Thanks, have a code example? Would love to see one.
If you want to learn how to program well, learn C#. If you're looking to build an app quickly, use PHP.
thanks, that Docker Integration tool looks interesting
It will also detect Docker files and let you remotely build a new image/spin up a container. And supports docker-compose.yml run configurations. I haven't messed with these too much yet
Isn't that only for Windows containers? Otherwise you still need to use Docker for Windows, which uses Hyper-V, which is indeed still a VM. If you're planning on using Windows for your entire stack, including production - then fair enough.
Oh sorry, I was thinking of the pre-hyper-v method of using a Virtual Box VM. Yea, technically a Hyper-V VM is spun up. As far as the user is concerned it's transparent, fwiw.
What's the point in use vs just passing in a variable into it? Just cleaner syntax? When you declare an anonymous function you might do $anon = function($var){ // do stuff here } $anon($someVar); or $anon = function() use($var){ //some stuff with $var } $anon(); I know one doesn't need to be called with the extra variable but is that the only difference? 
I guess I'll give it a try!
cool story bro.
NO.
Sometimes you don't have control over what arguments get passed to the anonymous function, such as passing said function to a framework method. Typically this is the case, as anonymous functions are often used as callbacks to other methods.
Came here to say this haha
In your 2nd example $var is bound (by value) to the context of the function held by $anom variable. This is a huge difference with just passing it through every calls in terms of scope &amp; usage. This is also known as closure https://en.wikipedia.org/wiki/Closure_(computer_programming) It is equivalent to the following construct ``` $anon = new class($arg) { private $arg; public function __construct($arg) { $this-&gt;arg = $arg; } public function __invoke() { // use $this-&gt;arg; } }; ``` 
Go is pretty cool. Syntax is rough, but yeah, its fast as hell
&gt;It is a compiled language so deployment is that much easier. Wat lol
it is not an either-or situation btw, can easily use php and go together. in my case my api is still on Laravel but I moved all the bottlenecks to Go. Like image resize, accessing a database, running long background tasks, redirects, etc... thats how microservices work
Yes. Static compilation means that you don't have to install nginx, ten PHP-* plugins, or run composer install. You'll still need to make sure your application stays running but you could argue that there are less steps involved when deploying a binary.
&gt; Static compilation means that you don't have to install nginx, ten PHP-* plugins, or run composer install No but you need to run your server as a daemon and make sure it doesn't go down on panics. &gt; or run composer install yep, just go get like a cowboy and fetch HEAD, who cares what you get? it's web-scale /s
`$this` in particular works in PHP 5.4+ https://3v4l.org/aBR5f It's the other variables in the method scope that you'd need to `use` (or `passthrough`, with your idea)
&gt;you don't have to install nginx You can run a PHP app without a web server too. But you shouldn't and you shouldn't run a Go app without one either. As for the rest of it, all you've done is move your deployment steps earlier in your cycle. Library and plugin management didn't magically disappear because you compiled your application. 
To address your first and last point I'll refer back to the only part of my previous comment that you didn't quote. All I said was that it's arguable which requires more work. For your middle point: what? Static compilation includes dependencies with the binary. You don't install them from the production machine. You don't "go get" anything. That's the advantage of distributing static binaries in this case.
&gt; For your middle point: what? Static compilation includes dependencies with the binary. You don't install them from the production machine. You don't "go get" anything. That's the advantage of distributing static binaries in this case. Just like you don't run composer install on a production server, you rsync, at worse, or deploy a phar archive. Stop saying stupid shit.
&gt; What’s the main difference between them From a technology standpoint: Vagrant emulates an entire computer (a "VM" or virtual machine) so you can run a complete operating system. Have multiple projects? You'll need multiple VMs, each with their own virtual disk and operating system installed. This requires lots of storage ( and CPU/RAM if you're running multiple VMs at once). Your VM will also emulate things you probably don't care about like USB devices, a video card, sound, etc. Docker only needs a single Linux kernel to run on. If you're already using Linux as your main OS then your containers essentially run like a native program would - no VM is necessary! On Windows, Docker will essentially create and use a single shared VM for all of your projects. (These descriptions aren't 100% accurate, but close enough for the comparison I'm making.)
&gt;It toke me two days to feel comfortable in Go. That explains it.
&gt; yep, just go get`like a cowboy and fetch HEAD, who cares what you get? it's web-scale /s You are either dishonest or you don't know enough about Go. You have https://github.com/golang/dep for dependency management and there have been many earlier solutions to the dependency problem. Also i might want to add that since Go is a statically typed language you can actually see if things blow up.. whereas dynamic languages like PHP and JS have a much bigger problem with this because you don't know what the hell is going on until you run it
&gt; You are either dishonest or you don't know enough about Go. &gt; You have https://github.com/golang/dep for dependency management and there have been many earlier solutions to the dependency problem. give me a fucking break, plenty of go pundits don't even use any form of dependency management aside from go get, you are the dishonest person here. &gt; Also i might want to add that since Go is a statically typed language you can actually see if things blow up.. whereas dynamic languages like PHP and JS have a much bigger problem with this because you don't know what the hell is going on until you run it lol, development, staging and all that bullshit, + tests...
5 month later : "How I rewrote everything in Rust!"
Some statements of this blogpost are disturbing: &gt; So instead of inheritance you have to do composition and it is very limiting compared to true OOP. I'm not "composition over inheritance" mantra warrior, but I wouldn't say the lack of it is very limiting. &gt; Unfortunately Go does not have anything like method_exists() so... It's a hack anyway. &gt; in Go you have to know exactly what is going on in your code, in advance. OOP (dependency injection) is not much different. &gt; I really do not want to do any massive rewrites in the future only because I have chosen the wrong underlying framework. If application core (or cores in case of microservices) is independently deployable (as it should be) its environment change wouldn't cause massive rewrites. I think it might be too early to jump into something as difficult as microservices. Especially as it's first implementation, in new language, with some gaps in general OOP/FP concepts.
&gt; give me a fucking break, plenty of go pundits don't even use any form of dependency management aside from go get, you are the dishonest person here. Trying to frame it as a disadvantage of Go is just absurd. The user ultimately has the choice to use whatever he or she wants. If you want something similar to Composer then you have plenty of options with Go. Also, many people actually commit their vendor dir into source control which prevents many of those issues. 
Why are you so toxic? Can't you have a normal conversation? This is also a reason why I prefer Go.. the community is just much better and less toxic.
No the author of the program. It has been flying under the radar because it mostly Chinese developed. After working with it for a day, its impressive. Installation: &gt; sudo apt-get install php7-dev &gt; git clone https://github.com/swoole/swoole-src.git &gt; cd swoole-src &gt; phpize &gt; ./configure &gt; make &amp;&amp; make install And add to your php.ini ( cli version ) &gt; extention=swoole.so Some sample code: &lt;?php $http = new swoole_http_server('0.0.0.0', 9501); $http-&gt;on('request', function ($request, $response) { $response-&gt;header('Content-Type', 'text/html; charset=utf-8'); $response-&gt;end('Hello World'); }); $http-&gt;start(); And on your command line: &gt; php yourfile.php Some benchmarks: &gt; ab -n 400000 -c 200 -k http://192.168.178.21:9501/ &gt; &gt; Server Software: swoole-http-server &gt; Server Hostname: 192.168.178.21 &gt; Server Port: 9501 &gt; &gt; Document Path: / &gt; Document Length: 11 bytes &gt; &gt; Concurrency Level: 200 &gt; Time taken for tests: 3.065 seconds &gt; Complete requests: 400000 &gt; Failed requests: 0 &gt; Keep-Alive requests: 400000 &gt; Total transferred: 71600000 bytes &gt; HTML transferred: 4400000 bytes &gt; Requests per second: 130509.84 [#/sec] (mean) &gt; Time per request: 1.532 [ms] (mean) &gt; Time per request: 0.008 [ms] (mean, across all concurrent requests) &gt; Transfer rate: 22813.73 [Kbytes/sec] received Fairly sure its under performing as i have only started to play around. Memory usage with 12 workers, hits maybe 40MB.
&gt; Why are you so toxic? Can't you have a normal conversation? This is also a reason why I prefer Go.. the community is just much better and less toxic. Ha ha ha ha .... Martini's author is laughing his ass off reading your comment. There is nothing more toxic than the Go community. Go grep iris on r/golang, you're a joke.
Here's a sneak peek of /r/golang using the [top posts](https://np.reddit.com/r/golang/top/?sort=top&amp;t=year) of the year! \#1: [It came to them with a message](https://pbs.twimg.com/media/DEjApdzXcAAlhH7.jpg) | [68 comments](https://np.reddit.com/r/golang/comments/6na5sy/it_came_to_them_with_a_message/) \#2: [Go 2, please don't make it happen](https://i.redd.it/7t1p88ct13ez.jpg) | [287 comments](https://np.reddit.com/r/golang/comments/6rxfjo/go_2_please_dont_make_it_happen/) \#3: [The struggles of a C programmer switching to Go](https://i.redd.it/2ckqvxbhib0z.jpg) | [18 comments](https://np.reddit.com/r/golang/comments/6dwm8t/the_struggles_of_a_c_programmer_switching_to_go/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
Good bot, proving my point. A bunch of change averse zealots, that's all the go community is.
Spelling mistakes could be caught by linting and static analysis, correct? You should have unit tests and e2e which can cover most if not all stated business requirements. imo if you can't cover your worries in an automated way things should've been built in a different way. I don't wanna come off harsh or anything, that's just been my experience.
This is simply not true. Dependency management in Go is a solved problem, and there is an emerging gold standard for it. I don't know a single Go developer who does not use either `dep`, `govendor`, or `glide`, and we are all moving over to `dep`.
Why shouldnt you run it without nginx? Go is stable and save, and there are webservers written in it.
&gt; This is simply not true. Dependency management in Go is a solved problem, and there is an emerging gold standard for it. &gt; I don't know a single Go developer who does not use either dep, govendor, or glide, and we are all moving over to dep. i'm not going to buy your bullshit, I've been in the go community since 2011 I know everything that has been going. Go do that with someone else, thanks. Some people vocal people in that community don't believe in dependency management period.
Well I write Go for a living and my experience is completely different. Please point me to these vocal people you speak of, and then point me to a community that has absolutely no vocal people who don't always go along with the herd.
r_golang is full of this petty drama so is the google group, not going to waste my time more with this shit.
if you say so
Amazing.. I very much want to give this a try. Do you know if can be used without the swoole-http-server ? Basically I really just want to use it as a queue consumer.
Can you give an example of rough? The only thing i've found that's weirded me out a bit is arrays/slices have the brackets in front of the type, not after.
The number of steps involved in deploying a binary and deploying a PHP build artefact should be exactly the same. &gt;install nginx, ten PHP-* plugins, or run composer install If you're doing any of these things at deploy time, you're doing it wrong.
Same reason you use one with PHP: HTTP server is your first line of defense against the Internet, you want something that can take a ton of punishment and just keep working. Also, features? Rewrites, static resource serving, TLS, HTTP/2, all forms of catching, compression, negotiation, protocol upgrade support (websocket tunnel), everything tested to no end by billions of requests / s worldwide.
Yes, you can do almost everything: TCP example: https://github.com/swoole/swoole-docs/blob/master/get-started/examples/tcp_server.md UDP example: https://github.com/swoole/swoole-docs/blob/master/get-started/examples/udp_server.md Another communication example that is useful: https://github.com/swoole/swoole-docs/blob/master/get-started/examples/design_communication_protocal.md I remember somebody wrote a queue consumer but where this was posted ... the issue with swoole is, that a lot of information is in Chinese. Google Translate is your friend but a lot of examples being posted in Chinese makes it harder to Google Search / find.
Please inform yourself.
I wonder why you have to be so agressive when people tell you they disagree with the people you disagree with.
Yeah, I was about to pop in and say this too. I looked it up once when I found out PHP did it that way and found it weird coming from JS where closures are less explicit. Anyone know of any others?
Caddy has currently all of these and its written in go.
Read this in the Spongebob pirate voice https://www.youtube.com/watch?v=wuzyX1YiUYk
What an poor, condescending, overgeneralization. Even if you're running docker your going to be building the system piece by piece with all of those dependencies getting added. Same for Ansible, same for whatever shit work code you're writing.
are you serious? Yeah.. Uhm.. Even Node doesn't do this, nor does php. It's why they have a composer.lock or a package.lock file. It saves the original dependencies for compilation, and once you persist this, only time it ever gets upgraded is when you manually pull in updates.
Wasn't this posted here recently?
It's a web server, not an app
Yes, I am aware of how composer and npm/yarn works. I assume that you are also aware of issues like left-pad? If you commit your vendor directory then you have truly reproducible builds and you don't depend on a network connection (or github / whatever) being available. I am just telling you how people use this. How YOU use it is entirely up to you, but the options are there. 
&gt; Unfortunately Go does not have anything like method_exists() so... &gt; It's a hack anyway. Details?
The only reference i found was a post a year old and the url posted 2 years ago. That is why i posted it. Maybe somebody mentioned it before?
&gt; give me a fucking break, plenty of go pundits don't even use any form of dependency management aside from go get and keep boasting about it, you are the dishonest person here. Come on, you're complaining in a place where we talk about PHP and half the posts are terrible outdated tutorials, people still using mysql_* and PHP 5.3 and others that haven't heard of dependency management.
You have no idea what you're talking about.
The reason method_exists is a hack is, that it means you're not 100% aware of what code is available. In an Interpreted language, this is a common issue since people can/must include other files. Whereas with a compiled language you should have all the code available when you're compiling it, a missing method should be detected by the compiler so you can fix that error. So since it's only been added due to the design of the language it would be classed as a hack.
Then you run the web app you wrote in go behind caddy... thus putting it behind a web server.
Based on your comments in this thread I find it very hard to believe you have any significant experience in professional go development. Please stop spreading this misinformation. It really helps nobody.
That's very interesting. Do you happen to know of any good article on starting with microservices and combining Go with PHP? 
No but really, it is pretty basic to start. Just create go counterparts of whatever bottleneck that you have as public or private APIs and use them in your PHP application. For us, it started with file manuplation, PHP was having trouble on small instances with large files, so we created an image resizer with go and started sending all requests to that endpoint internally. Than we needed a fast link shortner service like bit.ly and created that in go, and instead of trying to use PHP for that we just use linkers api endpoints. After almost 2 years we have 9 small go apps running along with a single monolithic laravel api. I am pretty sure there are resources out there. But I do not think you need to setup a service discovery system etc in order to start. 
&gt; The concepts are universal, you only have to learn the new syntax. I don't believe that statement is universal. Certainly doesn't apply moving to C, or to Haskell.
The point of micro services is that you don't "combine" languages but that you might develop one service in PHP and the other in Go depending on the service requirements. The services can communicate with each other through HTTP.
You absolutely 100% can do this with go and it will work fine. Many people choose to terminate SSL or load balance with an external web server or proxy but it is not required. Go's http package is entirely capable.
Why is a dummy API needed? Just spec the service and those guys can mock it.
Are you using an RPC library of some sort for the service communication?
OK kids, let me tell you this; programming languages are mostly irrelevant, it's eco-systems that really matter. Also, there isn't a one-size-fits-all. Go and PHP are actually great examples of this. The following is a generalisation. If you're building (or mostly working on) typical business style CRUD applications (large or small) then PHP is a great language and eco-system to solve that problem with. Performance wise you're mostly IO bound anyway so how "fast" the language executes doesn't really matter that much. You also have a great body of resources, expert knowledge, frameworks and libraries at your disposal. However, if you're working on more algorithmic or comp-sci type software, e.g. implementing a high performance key/value store or distributed database, then a different type of language might be more suitable, e.g. Go. I get it, software devs like to solve software problems more than they like to solve business problems so getting to use (or to push for) new shiny things is a very common scenario in our industry. 
No. Some of the early stuff uses curl, some newer stuff uses guzzle. I choose to use SQS and or Redis wherever I can to trigger since the api already uses redis and sqs for pretty much everything. 
I am pretty sure what you are describing is a Load Balancer. You definitely don't NEED to put something in front of it, in fact Go is actually being used to write web servers and load balancers https://github.com/mholt/caddy https://traefik.io/ 
Benchmarks: Go vs PHP Swoole ( Ryzen 1600, 8GB, 12 Threads ) ab -n 400000 -c 200 -k http://192.168.178.21:9999/ Simple "Hello World" application. Golang 1.7 ( 13 MB memory increase during bench run, peek core 66% ): Requests per second: 116883.16 [#/sec] (mean) PHP 7.0 + Swoole 2.0 ( 11 MB memory increase during bench run, peek core 71% ): Requests per second: 132634.70 [#/sec] (mean) Yes, i am not joking ... No hanky panky. Simply straightforward tests. Both seems to be using around the same cpu hovering between 30 and 50, with both peeking into the 66/71% range. In other words, its impressive results. I am sure that Go will show a better memory usage and potential performance when real life performance is tested that go beyond simple output but not to bad for PHP+Swoole.
You sure showed me. Fuck offfffff
I do not know what PHP installation you did but most of the time you do it one time, write down the exact calls you need and put them into a shell script for the next time. Running Go for each change is also not free because it involves a extra step and a small delay ( that grows if you have a heavy application ). That is one of the advantages that scripting language still hold. It may not be a big step but after a while it does grow and starts stacking on each change.
This is not a surprise for me. I mean if you are comparing a simple Swoole hello world server without a lot of user code within the inner loop against its golang counterpart, then you are mostly comparing C vs go. 
True but if one comes from Apache + PHP or any of these combinations, then the results tend to be less favorable. Just for fun, i tested Apache2+PHP7: Requests per second: 40929.02 [#/sec] (mean) And a memory usage close to 350MB... And all cores hitting 85 to 95% usage. Painfully so ...
You shouldn't ask object about it's interface or type - it should be implicit. It's usually used in some runtime meta programming shortcuts like method name from parsed uri or swaping abstraction with generalisation - one class resolving various types instead various implementations resolving concrete type (lack of generics makes it easier to tolerate).
We have many medium to heavy traffic applications, some PHP and some not. We spin up some number of VMs with esxi and build their images with Ansible, which pushes the modules onto the base image we've created. These modules consist of dependencies, network services such as file shares, environment and configuration, and the new version. Once these are all created we move the old instances into maintenance mode and run whatever migrations are required with the new version. When this is done we swap them out. The process is pretty much identical except for our compiled applications except that we don't require the interpreter as a dependency. As for compilation time it just depends on whether or not your dependencies need recompiled. In any application this overhead can be minimized with a good dependency structure. I don't think it's a useful difference in deployment cost but I do think the original comment was less useful.
Ah, okay. So, essentially, I build one micro-service in Go, e.g. a thumbnail generator for my uploads, and when the time is right in my app to upload and generate the thumbnail, I make an HTTP request to the API endpoint of the Go micro service and get back a response? Is that how it generally goes? I'm very intrigued
5.1 is old, unfortunately upgrading to 5.2 for us would be a large task.
That is correct. However, when going down the micro services path, don't go overboard. You usually only want to use micro services for periphery functionality, the thumbnailer is a good example. Another typical example is logging or sending notifications. *Don't split your core business logic into micro services.* Do a bit of googling, there is plenty written about micro services. 
Named returns seems kind of rough to me, it just looks like you're returning nothing but you're returning x and y: func split(sum int) (x, y int) { x = sum * 4 / 9 y = sum - x return } Having a short hand for variable declaration `k: = 3` instead of `var k = 3` just seems like extra fluff that isn't needed. At first, seeing Go use "x int" when I'm used to "int x" from Java, it looked bad. After using Typescript which has `name: type`, I could probably get used to Go`name type`. 
Just use Node.js or Go ...
The reason you put a web server I front of php is because php is not an http server, but your clients are http clients. php-fpm for instance speaks fcgi. 
Yes, but you do it at build time. Not on deployment. 
Did you turn on opcache and set it to never expire? If not then that would not be a good example.
Unfortunately, some of us are forced to still use it in 2017. Many senior devs at the place where I work are crazy about it and they use it, much to my dismay, on every greenfield project. They hate other frameworks with a passion.
heres a good article using go/grpc/protobuf to build a simple microservice: https://ewanvalentine.io/microservices-in-golang-part-1/ The series isn't finished but will hopefully provide a good overview of using go for microservices. 
Swoole has been existed for quite a while. It gets promoted once a while in PHP community... I just ignore it after evaluated it once. Other than using PHP language, it's too different from any PHP stuff. You'll need to complete overhaul your PHP project to use it. (memory handling is different, you'd get into trouble using some spaghetti). Personally, I'd just learn a new language with a bigger community/eco-system. 
That's impressive! I'll use it for sure in my next Hello World application!! 
Just use c++ or fortran. 
Simple project, reasonable budget for a very small job, defined expectations... Go get em peeps!
A good start would be getting to know how to use docker and docker compose. Everything should come together after.
It's literally one binary file that acts as the server and your program that's about 50 times faster than php
You absolutely 100% can do this with PHP and it will work fine too. If you don't understand why it's still a bad idea then I suggest starting with reading about what servers like nginx and apache do.
If you think that's a proper ops setup, I don't know whether to laugh or cry.
Oh this looks cool, but seems like there could be callback hell like node before last year
Are you being serious? 
None of that stuff is exclusive to nginx.
PHP wont do it as well as Go can and does. I suggest you start reading up with reading about what Go's http package does.
Yes.
Cool. It's not a hard project. Everything is in BitBucket but I don't know how to code and my developer recently left.
PHP vs. Go is not the point of the conversation you're in. I suggest you read the comment train you're replying to.
No, the point is you don't understand what Go's http package is capable of doing, despite the fact that there are several people telling you otherwise in this thread. 
It's cute that you thought that this was going to elicit some kind of debate, but everyone just realized what a shitty article this actually is instead.
JMS has had a bundle for this for a long time: http://jmsyst.com/bundles/JMSDiExtraBundle/master https://github.com/schmittjoh/JMSDiExtraBundle
It's really just a shorthand for reflection. Compiled languages have reflection.
And my point is, as I've said repeatedly, that having a single application serving content by itself is a bad idea. Unless Go's http package can load balance to itself, proxy to and from itself and restart itself when it fails without any outside service, which would all be amazing as they would violate causality in the universe itself, running a single web app serving itself is *fucking moronic*. So, unless you're going to show me the part of Go's http package that can spawn hooks in time and 4th dimensionally tunnel to its own past process, you ***really*** go read up on what web servers do.
&gt;Unless Go's http package can load balance to itself, proxy to and from itself and restart itself I think you're confusing load balancing and web and application serving and other service tools. Web and application servers doesn't load balance themselves, you need another server that act as as a load balancer to do so. For monitoring, deployment, or general fleet workflow, you'll need some sort of fleet monitoring paired with an orchestration, such as Deis, Kubernetes, Cloudwatch or something. It's perfectly fine to load a go's http package into a fleet of hosts sitting behind a load balancer.
I'd suggest https://laravelshift.com seems to work well.
Load balancing, proxying and application serving are all capabilities of web servers, despite the existence of specialized tools that can handle those responsibilities in more complex manners. Apache and Nginx absolutely can and do load balance between application instances and even multiple physical servers. &gt;It's perfectly fine to load a go's http package into a fleet of hosts sitting behind a load balancer. But setting up those hosts and a load balancer is also a deployment step as installing web servers and plugins. The topic of this comment thread is the top comment OP's nonsense vision of go somehow magically not requiring any additional deployment steps beyond just putting a single go web app on a server and starting it to be production ready.
Hi, I can do 1 and 2. And maybe 3. Ive never built a notifications system before but Im sure I can come up with a solution. And nunber 4 doesnt sound too dificult. If I underatand it correctly. 
And I found a small error on your main site. https://tephe.org/the-tephe-team/ Under "Timely Pilot Testing" it says "lauch" instead of launch. 
Hi, Regarding IDE - there's nothing better than PhpStorm. Yes, you need to pay for it, but it's the best thing under the sun for PHP development. Also, there's a 30 day trial that you can use and students get a discount. Next, let's address your question about versions. There is no huge difference between PHP 5 and PHP 7. You can finish your course and begin building a project on PHP 7. Just try using the new features that PHP 7 has. But if you are a Java developer, it should be even more natural, than what PHP 5 has to offer.
PHP 7 is not that different from PHP 5.6, so it should be enough to check the migration guides: * http://php.net/manual/en/migration70.php * http://php.net/manual/en/migration71.php * http://php.net/manual/en/migration72.php All new features should have code examples explaining their usage. If you want an actual IDE, PhpStorm is a no-brainer. Since you're a student, you can even get it for free (https://www.jetbrains.com/student/).
forgot to say, my pick is `is_files_only`
I really just think you're moving the goalposts in this thread. Of course if your want to build an entire production infrastructure to handle significant load it probably isn't sufficient to run only a single go binary. But that's not the same as "you cannot use go with a without a webserver" which is essentially what you started out arguing. 
 $anon = function ($response) use ($out) { $out-&gt;write($response); }; $promise-&gt;then($anon);
LB is a tool which you put in front of your HTTP server, it doesn't replace it. Most LB will know how to do TLS to be able to do what's called HTTPS termination, they're NOT full HTTP servers.
Nothing new. 
/** * @param boolean */ $filesOnly = true;
I strongly prefer to prefix booleans with `is`. Between the two of those you have, no preference. Although I’d suggest making it a method that you call rather than a public property (`$cleanup-&gt;isFilesOnly()`)
Dude, you're FAST! Only 2 years since release and you already came up with such in-depth analysis
&gt; You shouldn't ask object about it's interface or type - it should be implicit Except, PHP used [duck typing](https://en.wikipedia.org/wiki/Duck_typing), which essentially means "if method **eatAllCookies** exists, we must be dealing with a cookie monster", by simply allowing you to call any method on any object and then figuring out at runtime if that method exists, no **CookieMonsterInterface** needed. **method_exists()** is a good aid for this, that allows you to do thing like "if this monster is a cookie monster, it should eat all the cookies" in a simple, concise manner. Related to the linked article, [Go does support duck typing](https://medium.com/@matryer/golang-advent-calendar-day-one-duck-typing-a513aaed544d), but goes about it a slightly different way: If **CookieMonsterInterface** dictates that **eatAllCookies** should be defined, then any object that defines **eatAllCookies** will automatically be implementations of **CookieMonsterInterface**. So to implement an interface, you just implement all its methods in your ~~class~~ struct and you're done.
**Duck typing** In computer programming, duck typing is an application of the duck test in type safety. It requires that type checking be deferred to runtime, and is implemented by means of dynamic typing or reflection. Duck typing is concerned with establishing the suitability of an object for some purpose, using the principle, "If it walks like a duck and it quacks like a duck, then it must be a duck." With normal typing, suitability is assumed to be determined by an object's type only. In duck typing, an object's suitability is determined by the presence of certain methods and properties (with appropriate meaning), rather than the actual type of the object. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
I wouldn't really sweat over if it is a `private` property. [PSR-1 doesn't](http://www.php-fig.org/psr/psr-1/#42-properties) either However, I'd personally go for `is_files_only`because it reads natural and `is` conveys it's a variable. You should not however use public properties for this. Because this is a flag and it affects how the class behaves (as opposed to data), this should be a class method, such as `setIsFilesOnly(bool $flag): void` and `isFilesOnly(): bool`.
PHP have a built-in http server, not that I would use it.
I prefer `isFilesOnly()` too or you go give up on the condition and be more domain drive like `deleteOnlyFiles()`. You also should do comment it good so if the variable is not self explaining, the comment will do it. 
Avoid old PHP lessons like a plague. They were helpful and many PHP programmers here today learned from them. However, they pushed forth practices that are considered terrible today. Of course they were top notch at that time, but we have to move on. http://www.phptherightway.com/ - This is an excellent resource as a quick reference to the modern program architecture. You can learn the syntax and language basics from anywhere; php.net or the first result that comes up when you search "PHP tutorial" (may gods have mercy on me). I haven't used this but I have heard good things about Codecademy's PHP course: https://www.codecademy.com/en/tracks/php For some example codes, look for existing packages. You can search packages on https://packagist.org, and the ones with any downloads often (not always) tend to be ones with a good architecture. Lastly, take a look at PHP Standardards Recommendations [here](http://www.php-fig.org/psr/). Many poplar frameworks/CMSs follow them and you'll be able to easily collaborate with such projects once you are familiar with the patterns. As for libraries, if its installation section says to `require` a file other than `vendor/autoload.php`, know that this is a pre-Composer package and you should have your glows on when you use them.
All my booleans are `is_*` or `has_*` when `is` seems weird. 
&gt; if method eatAllCookies exists, we must be dealing with a cookie monster And when expected method doesn't exist then you have a bug, that doesn't need special language constructs to manifest itself. 
What determines if the flag is on or off?
Swoole community: https://www.swoole.co.uk/community Swoole docs: https://www.swoole.co.uk/docs/
Also pretty cool: [PHP 7.1+ Swoole v1.9.5 vs Node.js Benchmark Test](https://www.w3c-lab.com/php-7-1-swoole-v1-9-5-vs-node-js-benchmark-test-php7-swoole-beats-node-js/)
Ah, I see. It's still better to have this option to return by-ref, even though it is something that probably shouldn't happen regularly. Probably related - would it make sense to do something similar to the splat operator? &gt; function a(...&amp;args) { &gt; a(...&amp;$vars); 
Just use other people to do your programming for you.
I like how wherever you ripped the images from had them as true color PNGs, and you've downgraded them to GIFs using pixelated subsampling.......even though the images don't need 256 colours to display them.
&gt; you should have your glows on Is that a colloquialism or a brainfart? 
It doesn't really matter, because it's a long running script that's anyway compiled only once. OPcache only matters because of its optimizations, not because of the cache functionality.
Sorry a typo. I meant to say gloves. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[removed]
If you're just looking for a brief(ish) overview, then my [PHP 7 Reference](https://github.com/tpunt/PHP7-Reference) articles provide a nice summary of the new features and changes in each of the 7.x versions.
What a nice "objective" comparison.
ok,thanks
I don't like to use external dependencies, like gcc or something like that. I like the approach from [ReactPHP](https://github.com/reactphp) which uses just pure PHP (no further extensions). It's maybe a bit slower but I never had a use case, where I needed this extra performance. Well if you really depend on high performance you wouldn't use PHP at all, I guess.
You can help the Symfony community to grow by involving in the components development/testing, by creating good articles about symfony.
Jetbrains offer a free 1 year pro subscription for education purposes you should definitely check if you are eligible. https://www.jetbrains.com/student/
I can help you with all the requirements. Maybe even more. Please PM me.
The issue that some people have with it being "different", is the same issue people will have when they are running Go or any other language that uses its own http server and coroutines. But then people also need to learn the new language and deal with that language its idiosyncrasies. Very few of the new languages have a big eco system. Go being probably the exception. Crystal, D, Nim, Rust, ... are all languages that lack in there community and eco-system. Let alone the learning curve. You will get into trouble with ANY language where you use spaghetti. Swoole is indeed more useful for a senior developer then somebody just starting out. Somebody starting is better off with apache+php but people who start out also do not need to extra performance, non-blocking, coroutines etc...
Did a few quick benches to show the differences. If you want to prove a non sarcastic point, then please do a few more detailed benchmarks.
I think this is a great idea - being able to quickly and easily know values used as references is very useful. I put in a feature request for PHPStorm to include hilighting to the same effect: https://youtrack.jetbrains.com/issue/WI-39134
opcache was active and irrelevant in tests like this. And it does not expire in a short test like this.
An ascetic messenger - isn't that an oxymoron?
I always found that statement exaggerated how PHP is slow. The reality is that language like PHP are not so slow as one assumes but they way PHP is used slows it them down. Blocking IO calls, lack of coroutines, the constant loading and unloading... If one benches pure PHP CLI with non blocking code, then the results may actually surprise people. Especially with PHP 7+ ... &gt; I don't like to use external dependencies, like gcc or something like that. You do not like to use external dependencies so that assumes you also do not use any PHP extensions? Like for instance php_gd2? ... The whole GCC simply compiles the C code down to a PHP extension just like GD2. All the libraries that PHP uses are all C extensions, with the only difference that i posted how to do it manually. So you compile it only one time or you use pecl &gt; pecl install swoole That is it ... its not like you need to recompile for every change like Go. Swoole simply adds the advantages of Go with C speed to PHP but it still keeps PHP its dynamic nature.
oh. that's little embarrassing. 
If you want a video to watch with some code examples of all features introduced in php 7 Laracasts has some very useful playlists. https://laracasts.com/series/php7-up-and-running https://laracasts.com/series/whats-new-in-php-7-1 these series are free but a lot of the content is charged at a monthly cost On using an IDE: I would highly recommend PHPStorm. like TheFaustX suggested try and get a student licence. There is also a vim emulator plugin that you may find useful to ease your transition: https://github.com/JetBrains/ideavim And laracasts also has a video series on how to use PHPStorm: https://laracasts.com/series/how-to-be-awesome-in-phpstorm I hope this is useful 
Could make a performance comparison with amphp/aerys + amphp/parallel? I am very interested in both but haven' got time to set it up and write some test code.
But one big advantage of ReactPHP over Swoole is that ReactPHP is written in PHP. The work done on Swoole looks amazing although I'm not able to assess if it's a good idea or not, but the fact that it's a big PHP extension written in PHP is really appalling.
The exact reason the author has for wanting `method_exists()` is this: &gt; For example I have a single applyEvent() method that can delegate the event to onFooEvent() methods based on the event type which makes the code very clean. So the basic idea is, if `onFooEvent()` exists, call it; if `onBarEvent()` exists; if `onBazEvent()` exists, call it; etc etc. Sure, there are more elegant ways to get the same result, but this isn't terrible in my opinion. On the other hand, if a object parameter is passed in that plain and simple needs to implement a specific method, then yes, checking with `method_exists()` adds very little (though even here, you could argue that a controlled shutdown is better then a hard crash in some situations).
Made a page for free online coding, hacking, tools resources. https://www.ashot.org/links.php Hope it helps.
Here you can find some PHP related resources: https://github.com/odan/learn-php
Opcache, by default, checks for changes every 2 seconds. Your test seems to run longer than 2 seconds. You could check your hit rate to see for sure.
They could be on RHEL 7 (or a derivative) that is maintaining their version of 5.3 until at least 2020. They should absolutely be migrating; but the building hasn’t burned down yet.
Yeah, I'm in the process of upgrading one of our RHEL 6 servers to 7 so we can go to 7.1. It might take a few more months with all the red tape. 
In small project it really doesn't matter but when project gets bigger the second approach gets really messy. So I'd choose first one
Before you ask, why not use &lt;alternative xyz&gt;? The main motivation is that most solutions are written in nodeJS. Which is fine, but we didn't want to have the NodeJS installation and overhead just for checking the style. Hence why we created this project.
I am really willing to help and have sent a PM
&gt; But enough of PHP. &gt;Let’s consider a smart community. Like Scala. &gt;The Scala community is mostly smart hackers that care about writing the most obscure code only they can understand instead of solving real world problems. Who does this guy thinks he is ?
&gt; but this isn't terrible in my opinion. For me it's close to something like this: if ($a === 2) return 2; if ($a === 3) return 3; ...
Thank you all for your contributions, now I have no doubts that `is_files_only` (`isFilesOnly`) most correct name to use. 
why did he leave?
Tiny nitpick because I find it more intuitive and shorter, use `-it`... think "interactive".
I'm all for inclusiveness and agree that diversity is a positive thing for many reasons. But the recent focus I've seen from Symfony has me a little worried. I've seen so many communities go south when trying to push diversity to the forefront. Things can become primarily political. You get fun committees that the stereotypical SJW types maliciously worked their way into so they can push their agendas in the name of others. And you get things like a CoC(which some attempted to impose on the PHP community as a whole, but failed.) Drinking the kool aid becomes mandatory if you wish to contribute to software development in that community. A recent example of this kind of environment and what can happen would be the forcing-out of Larry Garfield from the Drupal team/community. I haven't seen any developments since April/May of this year, but my info could be outdated. I think it's a noble goal, I think it's a worth while goal. I also think that Javier and others have shown signs that they will, at the least, resist the scenario above. But it's worrisome nonetheless.
I picture it more like this: foreach (['onFooEvent', 'onBarEvent', 'onBazEvent', '...'] as $onEvent) { if (method_exists($obj, $onEvent)) { $obj-&gt;$onEvent($payload); } }
Any specific reason as to why calling it a sniffer (versus a linter which is the term I know) ? Reading the title I was thinking it was about detecting if the code is from css or less (as I user-agent sniffing)
https://www.reddit.com/r/PHP/comments/7g4j19/organizing_code_into_domain_modules/ 
Haha fair point. It is heavily inspired on the PHP code sniffer. Hence the name.
to preserve my mental health i simply avoid working on laravel-based systems
the point of TDD is to SLOW DOWN your development. If you're going "too fast to write tests" most likely your code has lots of design problems and is not thought out well
He’s a really talented developer and we couldn’t afford the time needed.
your first point is especially important. I think a lot of people look at 100% coverage and just get discouraged by the amount of work it is. I try to start teams at 20% coverage and move that slowly up to about 80%. The point is you have to use some kind of "driver" to run your code while you are working on it. you may as well make that driver a test. At the very least you've got something there to build on even if your test is simply a black box that verifies that some input generates some expected output.
Responded to you 
I'd say hyper-correct solution is not to use `bool` property at all and replace the inevitable `if` statement with proper strategy pattern. 
Someone tell me why I should get excited about this. I never thought php would be competing (and winning) with node
I hope not
I actually ended up writing (or attempting to write) a framework for my own use, using slim, mongo, redis and swoole. You can find it here https://git.karbowiak.dk/karbowiak/Aeternum Hopefully someone can glean something from my shoddy code :P
I presume you meant to write aesthetic? :)
I used to write PHP extensions in C, and I don't believe there were any other options at the time. If you wanted to extend PHP, it had to be done with vanilla C. The title makes is sound like it's an option, so just curious is PHP can be extended with other languages now.
Here's a "deliberately simple" demo using Docker. https://github.com/DHager/docker-php-library-demo
Ahhh yes lol 😆 
The only thing this 1999 website is missing is job ads from DICE and Monster.com
The PHP practitioner and beginner series from Laracasts although not free are great resources https://laracasts.com/series/php-for-beginners 
&gt; Box and Etsy are two other large companies that use HHVM. That's just off the top of my head, I'm sure there's more. As am I, but pretending that 4-5 examples is a trend feels pretty disingenuous. [Wikipedia](https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites) is the best source I could find for language popularity across the top dozen or so sites (by traffic) and C# isn't used by any of them, whereas PHP is used by four (and hack two) - what you're arguing *may* be a case for using Hack/HHVM but it's a pretty weak case for using C#. &gt; I'm not sure how much trust I put in that benchmark. Why use it as an example then? In the same vein it's using a version of PHP that's [approaching it's EOL](http://php.net/supported-versions.php) &gt; MySQL / PostgreSQL are both not very popular in the .NET world; I would expect .NET to do better with SQL Server as that's more commonly used. Could the difference in drivers really make the factor of 2 performance benefit to bring it on par with PHP5? I'm willing to concede that C# isn't in it's native environment here, but that much overhead from an unoptimised DB driver doesn't seem likely. &gt; Yes, it's true, you can host your app anywhere. My point is that Microsoft sees Azure and .NET like peanut butter and jelly. Thus, Microsoft is investing heavily in .NET to bolster its Azure ecosystem. What specific changes have Microsoft made to C# / the .NET platform to uniquely take advantage of Azure? The only thing I can image is making infrastructure management / instrumentation APIs available and easy to use; great if you want to go 'all in' to your cloud platform but it provides no benefit to day-to-day tasks.
Yeah, this way no one will figure out the code is pointless. How about `$obj-&gt;execute($payload);`? Too simple?
&gt; First of all, I can appreciate when I see a good argument (regardless of the truthfulness behind it), and this is one, so kudos for that. Thank you :) &gt; [...] I have a pretty good grasp of what is and isn't done commonly by the average developer, and project-wide naming refactors are highly uncommon. It sounds like you're suggesting that renaming things is an uncommon task, something that programmers rarely do; I simply don't buy this. If you're exclusively developing library code this would make sense; your public interface is a contract that you must maintain; but most developers aren't working with those kinds of constraints. &gt; It's definitely suboptimal, [...] Vim excels at the things you do most common when writing code, and that much comes out of the box. Except renaming things. And warning that a deletion is unsafe. And automatically implementing stub methods from an interface. And moving functions from / to parent classes. And warning that a method doesn't exist on a class. And displaying code coverage information inline. And navigating to method declarations defined in other files. I have no doubt that with enough plugins you can get vim to do all this, but these are features that are critical to allowing you to efficiently work with and incrementally improve code. &gt; My (and most vimmers') new machine setup is just a git clone of my dotfiles and execution of the installation script. It takes roughly 15 seconds to go from a clean machine to working in my preferred development environment. That's true of *any* UNIX tool, including IDEs. Jetbrains' IDEs do this. Eclipse does this. Netbeans does this. If neither this, nor the fact that it's preinstalled, contribute to setting up a new machine being "simpler and faster for the average vim user" then what is?
Or, first downvotes. Thanks whoever you are=)
So what does this one have that the free version doesn't?
Ultimate has new checks + enhances e.g. NPE checks, isset variables existence.
Will we lose out on features in the free version? And why hasn't this been integrated into the core of PhpStorm yet? I'm paying a fair amount for this IDE, don't want to have to pay extra for something that should be available by default. And yes, jetbrains should pay you.
EA Extended will get own new features (e.g.https://github.com/kalessil/phpinspectionsea/milestone/21), roadmaps are separated. Not all of our colleagues want to have this level SCA in IDE, so including into core might be not the best idea (just imagine the amount of support they have to take on top of current one). Understandable =) But hey: EA Extended is there, free and not going to anywhere.
The EA Edition makes you pay extra to get all the features… EA at it again (joke)
Have you checked out docker? As @Terr_ 3 points said. You can find almost any setup in github to try. Once you learn how it works, you can make almost anything. I use it daily. Docker is built into phpstorm.
Add some logic inside the for loop that checks if the iterator is a multiple of 3 (this is what modulus is good for) and adds the row wrapper tags only when that is true. It's slightly more complicated than that but that should get you going in the right direction.
(Y)es (i)t (i)s :P
you don't need the wrapper div class="row" though. CSS: .one-third { width:33.3%; } 
Hi If you're using a grid system it should support multi line columns somehow. So potentially you can have all those columns in one row. But to do so in PHP I'd have a count ($i) an if statement that checks if $i is divisible by 3 with no remainders (i ÷ 3 = 0). If true it's output the end and start of a new row. 
&gt; It sounds like you're suggesting that renaming things is an uncommon task, something that programmers rarely do; I simply don't buy this. I don't know what to tell you. It just isn't. I can count the number of times my current team has renamed a method or function over the past few months (for 7 different codebases, mind you) on zero hands. And you're free to peruse the history of any major public project on github, library or not, and you'll come to the same conclusion. It's just not something developers do much of. &gt; Except renaming things. But, it's not common at all. And even if you just went buck wild and decided to rename all the things one day, you're still falling short by several orders of magnitude compared to how often you use the things vim excels at (dozens of times per *minute*, every minute you spend coding). &gt; And warning that a deletion is unsafe. Depending on what exactly you mean by this, my plugins do this for me. &gt; And automatically implementing stub methods from an interface. My plugins do this for me. &gt; And moving functions from / to parent classes. I never do this, but it seems like a trivial task for a plugin to do. &gt; And warning that a method doesn't exist on a class. My plugins do this for me. &gt; And displaying code coverage information inline. I don't personally use them, but there are plugins that will do this for you. &gt; And navigating to method declarations defined in other files. My plugins do this for me. &gt; And much, much more... I guess so! But I'm sensing a trend here... &gt; I have no doubt that with enough plugins you can get vim to do all this, but these are features that are critical to allowing you to efficiently work with and incrementally improve code. Ah, well, at least you knew this already. I'm not sure what point you're trying to make if you already know you can do most of this with vim, though. That you can't do it without plugins, so therefor IDEs are better? I think we both know how weak of a point that is. It's really not even worth making. &gt; That's true of any UNIX tool, including IDEs. Jetbrains' IDEs do this. Eclipse does this. Netbeans does this. If neither this, nor the fact that it's preinstalled, contribute to setting up a new machine being "simpler and faster for the average vim user" then what is? It took me longer than 15 seconds just now to find the download link for PHPStorm. But, let's say you had the URL already in your OS clipboard. Well, it took a minute and a half (209MB @ 18.2 Mbps [2.275 MB/s]) just to pull down the installer. And another little bit to install and start up the actual program. I'll go ahead and presume that you're correct about it being able to pull in all your pre-saved configuration settings, fonts, color schemes, plugins, extensions, and whatever else you enjoy using in your environment; and that said configuration is easily distributable and maintainable in VCS. I'll also be generous and not include the time it takes an IDE to pull in a large project for the first time (which we both know is non-trivial). I was *still* up and coding while you were in the kitchen grabbing a beer. So, enlighten me how, exactly, `git clone &lt;dotfiles&gt; &amp;&amp; ./dotfiles/install.sh` is not faster/simpler than the former process? And, again, it bears repeating that I'm only even talking about this because you tried to assert that this was a strong point of IDEs. Personally, I think new environment setup ease/time is completely and utterly pointless to talk about. The whopping *minutes* you save or lose either way for something you do so infrequently (even less than renaming things!) is just ridiculous to dwell on.
&gt; If you're using a grid system it should support multi line columns somehow. So potentially you can have all those columns in one row. If it's using floats then probably not. If the 1st column is longer then the 4th column will go next to it (under the 2nd) instead of under the 1st.
Thank you very much I've got it now using the following code. :) if ($i == 1 || ($i/$products) != 0) { echo '&lt;div class="row"&gt;'; }
Thank you very much I've got it now using the following code. :) if ($i == 1 || ($i/$products) != 0) { echo '&lt;div class="row"&gt;'; }
&gt; you don't need the wrapper div class="row" though. Sounds like they're using a pre-defined grid framework, so they probably do need to.
Well I was using the Skeleton CSS framework for the page and didn't want to change it, but tbh I wouldn't have thought it would be that easy to create a grid layout. :D 
What does EA stand for? Can this be used on the Free version of IntelliJ IDEA, or does it require their proprietary extensions?
Fair enough ! Nice project anyway
Take a look at laradock.io and you will be happy.
&gt; Docker is built into phpstorm. There is Docker *support* in PHPStorm. It's not built in.
Yep, start with the documentation.
But it looks like this one is highly coupled to the symfony framework and there's a different handling in controller classes. My library only requires the DI component and doesn't know anything about controllers or framework related stuff. Another benefit of my library: You can easily create own annotations and do everything that you can do in a compiler pass.
http://php.net/manual/en/language.types.string.php#language.types.string.parsing
so wait how would I apply this to the url though? anytime I try parsing it i just get nothing in return
&gt;you're moving the goalposts &gt;heres an entirely seperate criterea from the discussion of the entire thread to explain why i think im right Why even accuse me of something you know I haven't done if you're going to do the same thing in that very post. Was that Freudian or what? &gt;"you cannot use go with a without a webserver" which is essentially what you started out arguing. No, that's not what I started out saying at all. I said Go doesn't make deployment any easier because its a compiled language. Why are you flat out lying when literally anyone can scroll up and call your bullshit? You've devolved this argument into childish lies and nonsense, so I'm going to leave it. I don't know what's wrong with you.
NetBeans is a free IDE and provides great PHP support. My whole team has been using it for years and it provides version specific autocomplete and hints. 
Electronic Arts :) I'd like to know too. Everywhere I look, it's called "EA extended" only with the abbreviation. 
Put a $ in front of your variable in the url string.
One neat thing you can do with this, and something I've done occasionally in the past, is you can pass the closure back to itself using `use()`. This is really useful for recursion. So, for example: $recursion = function($array) use (&amp;$recursion) { if (!empty($array["children"])) { foreach ($array["children"] as $child) { $recursion($value); } } // do stuff }; $recursion($array); This is useful where you only need recursion in one spot. That way you're not creating another named function just because you need to recursively call it. And, if that logic is only needed once, it keeps it encapsulated within the surrounding related code rather than somewhere else.
Hm that is indeed very interesting. Thanks for the response
Udemy.com has had some insane deals lately. You may still be able to get in on them. They basically have videos that walk you through a topic. Web dev is a big section of that site.
 $url = "http://api.openweathermap.org/data/2.5/weather?zip=" . $zcopy . ",us&amp;APPID=077cfa899ac2d8d52599c47a8c4d12e9"; 
EA stands for Enterprise Applications and you need PhpStorm/IdeaUltimate (which has PHP support).
People often referencing to this variant :) "EA Extended" = "Extended for Enterprise Applicetions", it's not best naming, but it a little bit late to change.
there are other options to develop php extension. For example, C++ language, the creator of swoole has also made a project PHP-X(https://github.com/swoole/PHP-X) to wrap Zend API and zephir-lang made by phalcon team.
What you're sending to the API is literally the word "zcopy" instead of a zipcode.
We just find it is less prone to error. It takes no time at all to add an end point which returns some test data. In the past we have found that the front end guys mock it wrong or the backend guy implement it wrong without noticing. It also helps if the specification changes. We have a single implementation to update to the new specification rather than two. I have nothing against front end devs running their own mock server. For us we found it works better for backend devs to control all api calls both complete and incomplete.
&gt; there are other options to develop php extension. Yes, any language (even bash, python... or PHP), only the binding has to be made in C. For C++ [PHP-CPP](https://github.com/CopernicaMarketingSoftware/PHP-CPP) allows to directly bind exposed classes/functions in C++. 
wait, pay for a static analyser?
Wait, pay for IDE/OS?
There is also zephir, so you don't even need to know c or cpp to develop php extensions.
Just use asm
But if serious, first deals already closed. Such tools are demanded, e.g. Php Inspections (EA Extended) runs analysis on the fly - you don't waste time in `push - break build - analyze - push fix - repair build` loops or your time is expensive, or you want to go to family at 5pm.
It would be very useful to list them all, after all that’s what you are trying to sell ;)
Right, while the list is not too long let's what you get on top of Extended-version: - Core interfaces usage correctness: new inspection - Insecure 'array_rand(...)' usage: new inspection - Isset operations variables existence: new patterns - Non-optimal regular expression: new patterns - Null reference: new patterns - Unnecessary variable overrides: new inspection - 'array_keys(...)' misused: new inspection - 'compact(...)' variables existence: new patterns - 'file_put_contents(...)' race condition: new inspection
Can you use ultimate and extended at the same time? Or will ultimate always have the same features as extended? Since you mentioned that both plugins have separate roadmaps. Also people not agreeing with it should look at tooling like resharper for visual studio. 
Using them in parallel is not intended (I noticed multiple glitches in this scenario). All EA-Extended changes are getting merged into Ultimate and work without a license while we don't enhance them. E.g. in the features list NPE inspection listed as enhanced - it'll not work until trial/license gets applied. Agree: ReSharper, PVS-studio and etc. are a good example. 
There are good reasons why it's widely used these days: if you something goes wrong with the business, the product can be discontinued on next renew round.
&gt; If one benches pure PHP CLI with non blocking code, then the results may actually surprise people. Well that really depends on what you are doing, and what you are comparing it against: http://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=gcc&amp;lang2=php
Use whichever you find easier to read. The tiny amount of memory you save will not even be measurable.
The difference is tiny: [1](https://3v4l.org/L279j/perf#output) vs [2](https://3v4l.org/V4t6E/perf#output).
It's the same. In fact I'm not sure you can even measure the memory usage difference. If I were to guess I'd say it depends on when the garbage collector kicks in on either case. If you're worried about memory, try fetching a row at a time instead of fetching all at once. One little thing to do to improve that code readability is to setAttribute PDO::ATTR_DEFAULT_FETCH_MODE on the connection object, so you don't have to use it every time.
Yes. Have you used the EA-Extended plugin before? It can detect many possible bugs and can save you a lot of time, making you a better programmer at the end. /u/kalessil puts a massive amount of time (see the issue queue in EA extended) on this plugin and we should be grateful he decided to keep maintaining the free version.
I would expect that an even faster approach which might consume very little memory is to fetch one record at a time from the statement: while ($article = $stmt-&gt;fetch(PDO::FETCH_ASSOC) { But as has been already pointed out, it's very doubtful you would notice any difference. Personally I always use the $articles = $stmt-&gt;fetchAll() which isolates the actual processing of the articles from the database code. 
It should be the second one, as a database interaction should be never intermixed with the output. By the time you send even one byte to the browser, all the database interactions should be done.
Hacklang is going to start *requiring* this syntax in the next release: https://hhvm.com/blog/2017/11/17/hhvm-3-23.html#call-time-pass-by-reference Obviously PHP has different goals in mind than Hack and may choose to do something different, but always interesting to see how closely-related languages deal with similar problems.
We use [JSON-RPC 2.0](http://www.jsonrpc.org/specification) for our large backend PHP web application. The advantage is that you have a single endpoint (URL) and can send everything using the HTTP POST method. Our enterprise customer only allowed GET and POST requests through its highly secured proxy/firewall servers. Therefore, REST was blocked with all these different HTTP methods like PUT, PATCH, DELETE etc. and could not be used. You only need to maintain a single route in your application that simplifies maintenance and development. Updating a JSON-RPC 2.0 API does not break the URL schema because you have only one URL. There are many other advantages. I can't think of any major disadvantages because it is the best solution to all my problems with company firewalls and proxies. A general problem of all Json (RPC and REST) oriented protocols is the lack of schema validation. However, JSON-RPC 2.0 has a standard request, response and error object.
This isn't Hacker News.
fetchAll() is not the right place for a while or foreach. I would only use fetch() within a loop to fetch all the rows. The the first example is just fine.
Technically it's all right with foreach 
Why foreach it's not a right place to iterate an array? 
We do because we have few resources but lot of operations. It just maps better to our use cases. 
I actually have an application that runs on Xampp in production. It's a small private wireless network with 6 to ~50 clients that access a web app served by a laptop. I have a kit that contains the primary client devices and the wireless AP, but we have set up half a dozen laptops that can run the system using Xampp. The system is designed to collect specific data at events without access to the internet or using the internet. 
I have always advocated JSON-RPC over REST. REST is an attempt to shoehorn the HTTP method "verbs" into an API. This tends to fall apart as soon as you go beyond basic CRUD functions, and you end up spending half your time pondering "what verb should I use for this" instead of just writing the stoopid code. With multiple endpoints, multiple HTTP methods, and non-standardized responses, there isn't much discoverability for the consumer of the API to benefit from. With JSON-RPC you can get rid of the pointless complexity and gain predictability. One endpoint URL. One HTTP method. A standardized format for messages, responses, and errors. The only minor drawback is that it is not the architecture du jour -- your teammates might need some convincing.
I use `json-rpc` because of it's simplicity to implement, and how well it fits in with other code. ``` $j = new json-rpc($url); $gr = $j-&gt;greeting("John Smith"); $sum = $j-&gt;math-&gt;sum(1,4); $ok = $j-&gt;customer-&gt;delete(17); $info =$j-&gt;order-&gt;get(7); ``` All of my function calls look like normal PHP function calls. It's easy to pass data around and get objects/hashes back. When the server side adds new methods there is nothing to do on the client side to add support for new methods. The client code to implement json-rpc is [generic](https://gist.github.com/scottchiefbaker/43a479178f6850e70ea0) and ~50 lines. You can use the same code for every end point. Each REST implementation is it's own beast that requires custom code on the client side. **tl;dr** speed to implement, simplicity, and consistency with other PHP functions.
I am trying to get interesting discussions, rather than "Laravel vs Symfony" or "Look at my revolutionary php framework" kind of discussions
It's not new/shiny or sexy. It just works... well.
&gt;I would do it this way therefore the other way is incorrect Wow that's a really compelling arguments thanks for posting.
You're gonna have to add a lot more details on what you are trying to accomplish
Apples to oranges. You could maybe encode a pdf in JSON or represent it in HTML but I don't know why you'd want to do either. Modern browsers can display pdfs in an &lt;iframe&gt; tag
I'd argue that assigning it to a variable first is a better way to do it because it improves readability and it would allow you to loop through the array again if needed.
My pdf has a table, so i want to present it as a html table 
If you're speaking of extracting text from a PDF, I can recommend "seta pdf extractor" (non free).
We use something in between: - GET endpoint for all queries (views on data) - POST endpoint for all commands (actions that change something) The responses are heavily inspired by REST. It's working really well so far, everything that the application can do is represented in the API. We also considered using REST, but we found that doesn't really work well for an application built around commands and queries. I guess the REST hype originated from developers who used active record to build CRUD apps?
That's not what I said. I said calling the fetchAll() method **within** a loop is not the right place. Using fetch() within a loop is ok.
Thank you /u/ayeshrajans =) I'm really happy to have such a great community =)
he is not calling the fetchAll() method within a loop 
&gt;you need to pay for it Is not a need, Is a choice, you can choice between pay, or use EAP versions, but there was a thread months ago of a user saying that EAP was not available anymore and someone said that it was an user trying to avoid to pay the licence using the EAP and it got banned or something. So I don't know the point of EAP versions anymore, besides that you can also use a cracked activation server. 
&gt;Let's grow the Symfony community by adding a code of Conduct. If you want to make grow the symfony community instead focus on making Symfony framework great again... 
&gt; foreach ($statement-&gt;fetchAll(PDO::FETCH_ASSOC) as $article 
That’s still not within the loop, it’s in the control structure. `fetchAll()` will be called before any loops are iterated.
Be nice.
The `fetchAll()` returns an array containing all of the remaining rows in the result set or or `FALSE` on failure. Depending on the configuration, it can happen that your loop will go through despite errors. And that is exactly what should not happen. Example: https://3v4l.org/R2uLV
1. Your example is wrong. 2. It contradicts with your own words where you said they first example is fine. Make your mind first, whether the first example is fine or your loop will go through despite errors.
Totallt agree, not sure how the iteration is implemented and I guess it might depend on the underlying driver but iterating on the query object should be better than fetchAll Note that the only cons is that this way you cant iterate twice without issuing the query again
I think we're both just passing each other by. Thanks for the nice talk, though.
While a REST interface is usually easier to understand, RPC is a better fit for how many applications actually work. Generally, REST services will have to map a function or method (e.g. getItems) to a resource URL. The client side then maps the resource URL to a function or method. RPC services skip the annoying middle step of mapping back and forth to a resource URL. This is often a good fit when you control both sides of the application. A major downside to RPC interfaces is that they're as disorganized as the developer is (sprawling function lists with lots of nonsense arguments?), where REST is inherently organized by resource type. I.e. I consider RPC first for internal projects, and REST first for external APIs where 3rd party developer understanding is important. 
I use [`fguillot/json-rpc](https://github.com/fguillot/JsonRPC). It's clean, flexible and has an easy to learn API, and it's installable with composer, which is nice.
Maybe tcpdf can do that? I don't think you're going to get a ton of help here so you'll have to trial and error yourself, but start by googling terms with tcpdf in it
$cleanup-&gt;files(); If ($cleanup-&gt;shouldCleanupDb) { $cleanup-&gt;database(); }
It returns false when it fails, not an array with one element that's false. Your example is wrong.
I would move up the code which checks if a file cleanup is needed (e.g. $cleanup-&gt;files_only), create a separate function to do the actual file cleanup and refactor any common code in to separate functions/classes. This allows avoiding the boolean flag, more about this [here](https://martinfowler.com/bliki/FlagArgument.html) while using this [google search](https://www.google.nl/search?q=clean+code+boolean+flag) where [Clean Code](https://www.google.com/search?tbm=shop&amp;q=clean%20code%20book) refers to the book I first read about this.
However, it's best to explicitly handle the failure before trying to process the results. You won't loop over a non-result, but there's a good chance you'll at least want to log the error. It's not a perfect example, but the idea certainly has merit.
&gt; you end up spending half your time pondering "what verb should I use for this" The remaining half of time is spend pondering: - "what HTTP status code should I use for this" - "what URL should I use for this"
&gt; would be the forcing-out of Larry Garfield It still gets me furious thinking about how the community treated him, and how they even cared about his personal life the way they did. Yes, I totally agree on your point as well.
I usually fetch before the loop so I can check for a null or false return. 
100%. You definitely will want to catch/check for that error. However OP saying the foreach loop will execute once from the return from the fetchAll() when it returns false is wrong.
I second this. Udemy has been a great resource for me. 
FETCH_ASSOC because `0` and `1` are meaningless and error-prone
 Do you know that PHP is able to log errors by itself? There is nothing best in this idea of explicit handling of every single function's result. It will make your code a complete mess polluted with hundreds of thousands absolutely pointless conditions. You should handle an error in two cases only: if you expect an error and have a certain handling scenario or if there is a separate function to get an extended error message. But in the latter case you should write a wrapper for the function, and use it instead of constantly checking the result. Otherwise just leave your functions' results alone. So in your application code there should never be such blunt conditions just in case.
Spot on. You can spot this pattern in many other areas. I mean the pattern of attempting to stuff so much information into a tiny place that is fundamentally incapable of representing that much information. 
0%. You definitely don't. What would you do with it anyway?
The question has been changed?
An what you're going to do with that information?
FETCH_OBJ, mostly for the byref. 
For my project I mostly use an ORM, and never touch raw PDO. But in case you are tinkering with PDO directly, I would recommend fetch assoc as a default fetch mode.
second this. unless OP is managing a site as big as google where the tiniest optimization can save them ten of thousand dollars in electricity bill
I will doubt this is faster. Fetching the entire resultset at once save roundtrip times and context switches, and better utilizes the CPU cache. 
Though it will make two loops over one. But still, who cares
FETCH_ASSOC in all cases, except when fetching a single result, such as SELECT COUNT(*) FROM ... WHERE ... in which case I access it by index.
We have a REST API for direct access to table data. Once in a while, we need to provide the ability to invoke certain actions that don't fall neatly into REST paradigms. In these cases, we offer JSON-RPC, in a somewhat unusual way: Instead of having a single JSON-RPC endpoint, you post the JSON-RPC data to the table's endpoint (the Content-Type is what indicates that it's JSON-RPC). The methods that are available are table-specific. Although the method may involve other tables as well, the permissions are governed by the permissions of the table that the method is defined for.
didnt want the node installation and overhead???? wow fuck me.. 
...in which case you have to use [fetchColumn()](https://phpdelusions.net/pdo#fetchcolumn) without any hassle with modes at all ;)
With the occasional `PDO::FETCH_ASSOC | PDO::FETCH_GROUP | PDO::FETCH_UNIQUE` for good measure
Ah, thanks 
Given you already set fetch assoc as a default mode, you won't have to combine it with these modifiers explicitly
What do you mean, by ref? The only mode that indeed fetches by reference is [PDO::FETCH_LAZY](https://phpdelusions.net/pdo/fetch_modes#FETCH_LAZY), but has a limited use as it won't work with fetchAll() 
Oh nice, that's the kind of stuff I was looking for about 2 weeks ago to add to the `pre-commit` jobs on my company's projects with Parallel Lint, PHP CS Fixer and PHPUnit; while those three are super-easy to set up as (small) dependencies with composer, having to run in a weird manner gulp/webpack/whatever node stuff in a pre-commit job was really a mess as it doesn't output proper exit codes (and sometimes, some small conventional projects should not require nodejs). The only other solution I have is to use Assetic, but if I can keep this Lint/Sniff/Test jobs from too many dependencies, that would be awesome. Nevertheless, still have to find some non-Node JS sniffer/linter.
Hrm, I wonder if there's any possible difference when using (un-)buffered queries. ([`PDO::MYSQL_ATTR_USE_BUFFERED_QUERY`](http://php.net/manual/en/ref.pdo-mysql.php)
You are probably confusing the question. it is not fetchAll() vs single fetches in a loop, but a very slight difference in style in using fetchAll(). As of unbuffered queries, the only case where they are applicable is a full stop for fetchAll() (as saving memory on the resultset you definitely don't want to waste in on the array), so they should just never meet in the real life. 
&gt; Your local docker file can pretty easily be tweaked into a deployment ready one you can run in production. Don't get me wrong, I don't want to sound mean or disrespectful, but Hell just don't. The assessment "use docker from dev to prod just the same way" is from my humble point of view dangerously misleading: production environment problematics are just too far away from dev environment, from security to performances, to be aligned from start to end; I mean rwx permissions, shared volumes and even containers themselves should vary from dev to prod as you absolutely do not want to prioritize and achieve the same things in those different contexts. What you deploy should be the 'built' app, with a pessimistic approach in terms of grants, tools and dependencies, and basically a dedicated strategy which should be really different from your development stuff. Doing things otherwise may feel more comfy for the developers, but that's what lead to some terrible security breaches we basically read everyday in the newspapers. *** To come back to the original topic: * Docker on Linux is just, purely and simply, a "go" to me; it's meant that way, is faster to put in place and at use, than any VM (Vagrant or other) with shared folders will ever be, and does not have more constraints than VMs. * On the other hand, Docker on Windows is far from being an obvious choice: Docker has to run a VM, which limits the performances, and *cannot handle permissions on shared volumes* (defaulting and forcing to 740). If your app has built-ins grants constraints on read/write stuff, it is a no-go. So, to my opinion, if you want to switch from Vagrant to Docker but are not on a Linux environment, you should consider the latter step first. Finally: as a non-Linux user I did not switched to Docker for development environment (yet? I mean at some point if I was only a dev in my company, I would have done that already), but we are definitely on our way to use Docker for testing/QA/production environments and CD/CI (already started, but it needs to be assessed and processed on quite some time by people who actually know sysadmin stuff well, which is rarely the case for developers). 
Well, I respect your decision, is totally fair and is always welcome to have more alternatives out there. But I'm sure you would spend much fewer hours of work by just installing node and the required tool than creating a new CSS lint software. OTOH, keep the hard work!
proper exit codes were a must for us, since this is integrated in our internal CI. Which expects a proper exit code. So have a look, the workflow is the same as with PHPCS, even giving similar results (console and checkstyle).
Not trying to boycott this thread, but with stylelint you don't really need gulp/grunt if you don't want to, just run on your terminal: &gt; stylelint "foo/*.css" There's really no difference with calling cs fixer or any other command.
Oh okay thanks, I'm going to have a look at that, too! If I can have both Linting and Code Sniffing on both backend and frontend easily, it'll be a Hell of an improvement!
From my use of PHP Parallel Lint and PHP CS Fixer : * Parallel Lint will look for syntaxic errors and stuff like that * PHP CS Fixer will suggest PSR-* compliant syntax (and fix it for you if you want). So, basically from my understanding: * Lint will check for things that may lead to runtime errors * CS will check for things that may lead to difficulties to maintain the code.
There's no reason to do that. Just use `docker exec -ti &lt;container-name&gt; bash`.
FETCH_GROUP and FETCH_UNIQUE look pretty useful, do they have any drawbacks or quirks? Dang, I need to do a PDO refresher, I might be missing out on some huge time-saving features. http://php.net/manual/en/pdostatement.fetchall.php
`FETCH_ASSOC` almost exclusively because if you use `$result_array[5]` in a script then someone adds However, `FETCH_NUM` could potentially be faster and more memory efficient if you use a database type like reddit use to have where the main contents was a single table with just 2 or 3 columns. Rather than bloating the array with strings as keys, you could be fairly certain that the `$result_array[0]` would always be the first column and the structure wouldn't change. `FETCH_OBJ` is about the same as ASSOC, whichever you prefer.
When you use them together it's basically `FETCH_ASSOC` with the first column as the key, so you get: ``` $users = $db-&gt;query('SELECT id, u.* FROM users u')-&gt;fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP | PDO::FETCH_UNIQUE); assert($users[14]['id'] == 14) ```
Here you go, https://phpdelusions.net/pdo/fetch_modes#best
You can have it without fetch group though
I know what you're trying to say but you're doing an awful job of it
Number of loops doesn't matter.
Yeah I mean, we should be installing a shit ton of packages on every machine instead of running a single binary. #DevOps
That very well may be. Plus it's easy to scaffold REST endpoints.
Or just use Docker.
Again, this is more work than needed. Docker accomplished what Vagrant can't and does it instantly.
Never do this, please.
No it doesn't... It still runs as a VM (HyperV)
That isn't native... It's literally a VM using HyperV rather than Virtual box.
I'm sorry, but a provisioning script is preferable to a prebuilt and versioned Docker image? 
Vagrant is a headache and problematic. I fail to see how having provisioning scripts is better than a versioned Docker image but whatever.
I wouldn't dismiss the number of loops that easily, especially after nitpicking on the CPU cache. As long as there are only a dozen rows to fetch, it doesn't matter indeed. But give it seceral thousands and see.
Why not? I do it for Jumpbox containers. Keeps users off host, but allow access into specific nets
With `false` you will get a warning. Not really better. https://3v4l.org/LShXe &gt; Warning: Invalid argument supplied for foreach() 
I used to prefer FETCH_ASSOC over FETCH_OBJ, but nowadays i like FETCH_OBJ more because the code looks waaay cleaner. I have not touched the other fetch modes much, but seeing the answers here i guess i will use some of those in the future
which ORM are you using ?
Doctrine
Outside symfony? 
Yes, I am using it with Symfony. Never had a chance to lay hands on Propel, si I just have no idea.
A warning is what exactly you want here. 
I'm the case of the foreach skip doing it so a warning isn't thrown about not being passed a valid array. 
When properly used, fetchAll() will never give you false or null. So such a condition would be superfluous. When improperly used, a warning is what you actually want, so such a condition would be rather harmful. So in case of fetchAll() it's better to just leave it alone. 
iterating over the query object is just a syntax sugar for the consequent fetches. So if you don't need an array, this method should be preferred.
I set the [platform](https://getcomposer.org/doc/06-config.md#platform) in the composer.json so that it doesn't matter if composer is run from outside. {"php": "7.0.2", "ext-something": "4.0"}. &gt; even more crazy is the ssh command of the official composer image: Just......put that into a script named composer_update.sh, so you don't need to remember it? 
At our company we have a shared base image for PHP7.1, based on Alpine, from which our application and dev-tools images inherit, so they share the exact same configuration, but the application does not know anything about composer itself. The docker command can easily be normalized by creating a bash alias, or even better a bash function, which would behave similarly to a local installation of docker by just calling `composer &lt;command&gt;`, the volume `$PWD:/app` in this case ensures the composer executable has access to both the composer.json and is able to write the vendor/ folder into the application folder.
I mean byref when it comes to using an object vs array after the record has been fetched.
How does that work when a package requires an extension not in the php image? And yes,i could replace the command byba script,but then ill just end up with dozens of scripts for each container...
Zame question here, what if a composer package requires a specific php extension?
Centralized, multi-platform (Javascript, PHP &amp; Python) and "generalized" imho: https://github.com/ccxt/ccxt
&gt; How does that work when a package requires an extension not in the php image? The code would fail, and I would see that, and so correct the list of extension, or install the missing extension. &gt; but then ill just end up with dozens of scripts for each container... Dozens? Really? Also, so what?
the reason why swoole is awesome is that in swoole2.x it brings out coroutine. the hello-world benchmark is useless. in io heavy backend, swoole2.x make a high performance without call-back hell.
Sounds like a pain in the ass.
You're really making it more difficult than it needs to be. For development, it's a lot easier to use an external volume (like --volume $PWD:/app) and run composer (locally, on your host) in the directory of your sourcecode You should only need to run composer using `docker exec` when you don't have php or composer available locally. Typically for running in production, you would run composer/npm/etc first, then copy your sourcecode directory into the image during build time (using the Dockerfile COPY directive)
grep -Ri "PDO::FETCH_ASSOC" * | wc -l # 211 grep -Ri "PDO::FETCH_COLUMN" * | wc -l # 9 grep -Ri "PDO::FETCH_NUM" * | wc -l # 4
 &gt; ssh'ing into a container is very cumbersome Why do you need to SSH instead of attaching a terminal? &gt; how do you run composer? There seem to be separate containers for running composer, but they have their own php setup? I'm not quite sure how you mean, but here's how I do it: https://github.com/DHager/docker-php-library-demo 
I generally go with *is* on booleans, but sometimes, *has* sounds better and I gowith that. In this case, I would use has_only_files, it sounds better, and has implies true/false via the possessive definition of has. Semantics though. Not a big deal.
the verbosity can be cutdown by bash alias and helper bash functions.
Stick all the volumes mapping in your docker-compose.yml file. You can setup running user, and entry point shell script in your Dockerfile. Just stick composer install in the entry point shell script.
Re. ssh: in most cases, it shouldn't be required for you to ssh into running containers. From my experience, I had to do it only to check for changes in files (which were not mapped as volume), or to have access to certain processes. There's a quick workaround to log in to the running container without ssh: `docker exec -it {container id} sh` (or bash or other shell which is installed). Re. composer: I always install Composer as a binary on PHP image. If your project requires some specific extensions this approach will allow you to use composer without any problems. There's no need to keep a separate php instance just for composer. Also I'd say that one should use composer always through PHP service. Re. docker-compose problem: if you see that one of the services is not running cat its logs (in your case: docker-compose logs mysql). In most cases you will see why the service failed to work. One more thing - I'm strongly against using images which combine two, or more applications (like apache+php). There should be a separate apache service and separate service for PHP(-fpm)
Yeah I mean, we should have a monolothic single point of failure for everything instead of properly separated responsibilities. #CowboyCoders
Forgive my ignorance, but what’s the point of docker if you’re gonna run stuff locally anyway?
exactly, I dont want to install every version of php and the needed extensions for th eproject locally, that's why I'm using a container...
one for symfony console, one for composer, one for mysql, one for redis... doesn't sound like a neat solution
&gt; Re. docker-compose problem: if you see that one of the services is not running cat its logs (in your case: docker-compose logs mysql). In most cases you will see why the service failed to work. I know I can check it manually, but why doesn't docker compose tell me, "hey I couldnt run this container"... no I have to manually check if everything works after doing docker-compose up...
Id suggest running the composer install on the host machine but if you want to avoid that &gt; \# docker exec -it ContainerID /bin/bash \# cd to/path/needed \# composer install However I notice you are talking about docker compose and using a docker run command that you just do not need to do. Let me show you a very basic docker-compose you can use for development. https://hastebin.com/ozubatoqar.rb And to build my web image to exactly how I want it I use a nice Dockerfile I created: https://hastebin.com/ibisepoxus.php Now there are 2 'issues' with my basic setup. The first being that my php and apache run in the same image. You can change that really easily. The second is I mount my drives, makes the docker experience slower. Once you are more advanced you can use rsync or any other folder sync you want, or just use the cp command. So to break this down. I have a project folder. In that folder I have they 2 files, and a folder called public which holds my public facing app. I just have to run docker-compose up -d and everything I need runs. So the docker-compose. We have 3 services running. My Mysql service image which is v5.6 and takes its root password and new database from a .env file - you can hard code this instead. the .env file is just a file you would put: MYSQL_ROOT_PASSWORD=password123 MYSQL_DATABASE=databaseName The redis container which just sets up a basic redis container if we wish to utilize it. The web container. The web container yu can see binds my public folder to the docker container path /var/www/html/public, it also binds ports 8080 and 8443 (Everything within the containers will use 80 and 433 but from outside in we use these ports to stop any conflicts). Next you will see I have set that the image depends on the mysql and redis containers coming online and that they are 'linked' to this image, basically meaning the web container can talk to them. the tty option just keeps the container alive, and the build: . just tells out docker to look in our root folder for the Dockerfile in which to build this image from. Its all simplish once you play about with it. The Dockerfile looks a bit more complex but not really if you look at certain sections. First off we are just defining the image we want to pull, I am using Centos 7. Next I am doing a console run command to install specific packages I may need or want to use. After that a run command to setup my ssh and copy over any host ssh key I may need. We set the root password I install apache and exim - you can easily just use an nginx or apache image and link it in the docker compose file. Next I do another run command to update the php version to 7 and pull all the extensions I need for my project. I configure apache here - but again you can use another container. I install composer and magerun as I am a magento dev so I may need them. I then install node because my FE's like having access to it on the container in case they are not at their usual workstation and want to be able to quickly start to work. Finally I do my initial file add, setup timezones and then expose my ports and set apache to the foreground to ensure my container stays alive. It is a lot of text but I commented the dockerfile so it hopefully makes sense and I hope the docker-composer file is simple enough for you to edit as you need and go from there without much troubles! Best of luck. 
read my other reply
It's more complicated. Process started correctly, and after a time it died. For Docker, it's a signal that container stopped working. Yet it's unclear to tell the reason *why* it stopped working (usually error log takes more than one line).
Hi. I'm teaching myself PHP, and I recently ran into a problem in my code. I'm trying to populate a drop down box from a mysql database. now I've been able to get the information to the drop down no problem but when I select an option that has words separated by a space it only sends the first word through to the variable that the form is being set to. Now I think I've narrowed the problem down to the value not having double quotes but when I add them they cancel out the double quotes for the echo statement. can anyone give me some guidance? here's what the code looks like; Category&lt;select name="category"&gt;&lt;/p&gt;"; &lt;?php foreach ($dropdowndata as $value) { echo "&lt;option value=$value[name]&gt;$value[name]&lt;/option&gt;"; } ?&gt; &lt;/select&gt; Thanks in advace.
$lines = file('names.txt'); If (in_array($checkme, $lines)) { // match} Something like this?
yes, if this uses $checkme (the input) to check if the name is found in the names.txt/$line. does it check each line of the .txt individually, and does the string on each line need to match the input/$checkme exactly? if the answer to my question is yes, then that should work.
Since ddproxy gave you a solution, I will play the requisite asshole and question your premise: why are you storing names in a textfile, instead of a db? Even sqlite or mongo would be a better solution long term. 
The point of Docker is so you don't need to install anything on the host (php, composer, node, npm). Typically for production most people use a CI tool (Jenkins, CircleCI) to install the dependencies using the same OS as their image so there are no native library build issues. If you develop on Windows and package windows binaries into a Ubuntu image, you're gonna have a bad time. 
My project is a proxy which you need to follow my instagram to be able to use. People enter their instagram, and the site will forward them to the proxy. I was too lazy to use instagram api, so I just copied all their names to a txt file. I'll just update the file when I get home from school. I know it's some terrible data management methods and very inefficient, but I just wanna get this site done by tomorrow. At school they block pages, so I wonder if I spread this link which allows them to go to any site through an in-browser proxy, I'll get a lot of instagram followers lol.
This won’t quite work because `file()` keeps the new lines attached. You’ll either want to use `array_map` with ‘trim’, or use `"$checkme\n"` in your code above. 
I know this is off topic but what will you gain out of getting these follow requests on instagram? Are we talking thousands of followers or a few here and there? Technically there’s no way you can fully benefit from having this audience type adding you on Instagram if all they’re looking for is access to a proxy. Instagram isn’t the best monetisation platform for this use case. 
 system("grep --silent " . escapeshellarg($name) . " test.txt", $result); if($result === 0) { etc... }
I’m in high school right now, and all the proxy sites are blocked. my website with (my name).com does work though. So, it’ll just get my name out there to possibly other schools in the county under the same internet blocks. It’s just for bragging rights and convenience at school. I can add games i want to play in class too. I’m pretty sure the internet security blocks advertisements at my school, so ads wouldn’t really work, even though I might try. Also, if people regularly use my site, they’ll eventually see my social media website i’m working on but haven’t published (because the site is kinda like a portfolio of my projects) and maybe get users.
I'm sorry but wtf are you talking about?
It does tell you
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Sublime Text and VS Code are both great. Both customizable with a lot of plugins/packages that improve PHP integration. But, you can always just use http://www.jetbrains.com/phpstorm/eap/, which only gives you 30 days but since they update once a month, you can pretty much have a perpetually valid license if you keep updating.
VScode, Sublime and Atom have enough plugins to tackle against fully-fledged IDEs. Especially if you are beginning, you might not need every features phpstorm would give you.
You could also try NetBeans if setting up various plugins in atom/VS code is a pita. 
PhpStorm EAP would be an option then: it's 30 days free.
Why not eclipse for PHP?
Dear God man
Netbeans was my first IDE. Would take up a lot of memory at times, but a decent IDE.
 WORKDIR /app ADD composer.json composer.lock ./ RUN composer install --no-scripts --no-autoload ADD . ./ RUN composer dump -o composer is installed inside application image.
&gt;Why not eclipse Let me stop you right there... 
Vim is always there for you. Once you get the hang of something like `di”` or `ct?` you'll find it hard to go back. I use it for php, game development, all sorts. Gvim on windows, macvim on Mac and just vim on Linux. `di”` **d**eletes everything **i**n current double quotes `ct?` **c**hanges **t**o the next **?** on the line Loads of tutorials to help learn, cheatersheets etc. 
And after those 30 days, you get another 30 days.
If you are a student (or a criminal that happens to know a student) you can get a free license of phpstorm. Vscode is awesome too. 
I've tried a bunch of different ones, but I always seem to fall back to Netbeans. I just can't seem to get the same environment I'm used to in Netbeans in other alternatives.
&gt; Unfortunately Why so?
Netbeans is a good choice if you just want to open it and use it. Another good choice is VSCode, but it may require some time setting things up. Watch here https://laracasts.com/series/visual-studio-code-for-php-developers
&gt; Our enterprise customer only allowed GET and POST requests through its highly secured proxy/firewall servers Are PUT or DELETE less secure than POST? 
Even better, you normally getting a new EAP with those 30 days =)
Even better, you normally getting a new EAP with those 30 days =)
A static binary does not have anything to do with "a **monolithic** single point of failure".
Being an open source maintainer helps, too.
Never tested this, but maybe the [PHP plugin](https://plugins.jetbrains.com/plugin/6610-php) works also in the IDEA Community Edition?
If you are working on multiple projects that have different requirements (different versions of PHP/MySQL, different caching configuration etc), docker makes it easy to manage per project. Plus if you are working on a team, your docker configuration is versioned with your code, so you can just checkout the code to any machine, type docker-compose up, and you have a fully functioning development environment. Also, as we move to cloud hosting where layers are generally separated between smaller services, you can use docker to run multiple containers that more closely represent the a production environment running multiple services. Plus, it means your host system doesn't get all clogged up running services, you can just type docker-compose down and all system resources are freed up and services removed.
Have a look at docker compose, makes it easier to coordinate the services in your dev environment. Here's a docker compose file that I use to get you started. nginx: build: docker/nginx ports: - "80:80" - "443:443" links: - "php:phpfpmupstream" volumes_from: - php environment: TERM: xterm php: build: docker/php links: - "mysql:mysql" - "solr:solr" - "redis:redis" volumes: - .:/var/www/html environment: TERM: xterm mysql: image: mysql ports: - "3306:3306" environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: wordpress MYSQL_USER: wordpressuser MYSQL_PASSWORD: wordpresspassword TERM: xterm volumes: - db:/var/lib/mysql redis: image: redis:3.2 volumes: - data:/var/redis/data environment: TERM: xterm 
This is why I never really got into containers. They're nice for some projects, but I always end up with real virtual machines for the larger projects. Either i'm doing something very wrong, or docker is way too much work for what it gives in return. I put instructions in readme.md for those projects.
Do sysops care?
And I just realized I need to add new/modified inspections numbers at plugin page as well, https://github.com/kalessil/phpinspectionsea/issues/683. Thank you for your comment!
I upvoted you, I use Eclipse PDT with PDT extensions from community, and it works very well. I'm almost on-par with PHPStorm features, and it's way better than Netbeans. For all those who think it's slow, actually indexing might be sometime, but aside of that, it's not. For all that care, I don't know where this "Eclipse is slow" myth exist, it is when you installed too many plugins and didn't configure it right - in all other case it's a decent and very, very flexible IDE. I would never recommend Sublime, it's not an IDE, and as of today, I'm also using VSCode from time to time, and VSCode is slower, it tends to freeze and crash very often.
Haters do hate, but hate is almost always triggered by ignorance.
Yea you're right. I've worked with PHP Eclipse this for a couple of years! It is slow with big projects, but I've noticed that PHPStorm has basically the same indexing issues. It's a fine IDE to start with, it also is more intelligent than the other free ones available. 
Just stop yourself, don't speak about something you don't know nothing about.
Does this mean that one has to install a new EAP version every 30 days?
I'm not sure, but I think so.
Netbeans, Eclipse, Atom, VSCode among others. If you wanna give PHPStorm a stab without paying, I recommend you the 30 days free trial. If you are an open source maintainer or a student, you can have a special license for your work. Otherwise I find PHPStorm pricing quite reasonable for what it provides.
You should use Netbeans, it's totally free.
I'm mentioning an EAP as the person needs a short-term solution. If you plan to use EAP for regular work, that yes, you have to take overhead installing new versions every 30 days.
I have to second the using Netbeans. Before I switched to PHPStorm full time professionally, I used Netbeans professionally, it has an excellent git plugin for VCS, also you can install http://plugins.netbeans.org/plugin/62424/darcula-laf-for-netbeans, and it also has pretty good support for JS &amp; Modern PHP refactoring capabilities and intelligent code-complete like PHPStorm. Not as pretty but very powerful feature set.
I like this one. Perhaps this works faster than fully reading file in PHP. 
In case people missed it, Atom now has "ide" plugins. https://ide.atom.io/
Even with a subscription of PhpStorm, I use most of the time vscode for PHP Development. The PHP Intelephense extension is awesome. I wrote a post on medium about it https://medium.com/@beeblebrox3/my-visual-studio-code-setup-9b488a119e24
[removed]
Can't imagine why suggesting Eclipse got downvoted. It takes a lot of resources, but it's also *doing* a lot. If resources are an issue, I run Sublime, such as on my Gallium OS Chromebook. Netbeans is primitive. Webstorm / PHPstorm are nice, but they're very limited in the languages they support. Eclipse handles C++ fine (PHPStorm doesn't), and has support for Haskell. It's nice not having one IDE - one language, outside of specialty cases (Qt / Android native).
If there's a PHP user group near you, you might be able to get a year for free. My local group got given licenses that they would raffle off. That's how I got mine and after a year, I was able to upgrade at 40% off and 2 years for the price of 1.
If you are student just participate to there the program where they are giving you access to all products.
I have used eclipse since I got my first programming position. Through the years have tried other IDE's and come right back. The full integration of Git in the UI, the ability to switch languages from C++, to PHP, to Javascript. Fuck the haters its definitely continuing to get better and has worked for me. Yes, back in the day I needed to restart Eclipse daily, random crashes are practically gone. I reboot once every couple of months now. Definitely the best FOSS IDE there is. 
You want [Eclipse](http://www.eclipse.org/downloads/eclipse-packages/). Fuck the haters. 
look at the output of the command I posted.... it does not telle me anything
&gt; Why do you need to SSH instead of attaching a terminal? to run composer, bin/console, to query the database to check something, to clear redis cache, to clear varnish,.... just to debug something...
I'm sorry you are thick, but: I want to execute symfony's bin/console, that needs to run on the php image.. maybe I want to manually query redis to debug something, same for mysql etc... when developing you just might need to manually work with the services.....
thank you for taking the time to give an actual useful answer :)
Didn't downvote, but PDT doesn't really work that well for me. I have had quite a few issues with preference dialogs not loading, errors/warnings highlighting not updating properly, having to reinstall due to other strange issues etc.
Vim is not an IDE, vim is a lifestyle. I am horribly behind on shortcuts though, could you point me to a good source? Thanks in advance.
Yup, it happens sometime, and I know it quite well since I'm using nightly since a few years (yes, I like to live on the edge) - but they never remain longer than a few weeks, month at worth. Of course using a nightly always give you all sorts of bugs, but none never prevented me from working comfortably in the end.
Why not use [`docker compose exec`](https://docs.docker.com/compose/reference/exec/)? docker-compose exec service_name bash
I use Atom myself and I love it. However, if you are used to and enjoy powerful IDE capabilities, Atom is not for you. Their *official* IDE, that you refer, to is utter garbage. - Autocomplete is horrendously bad and slow. - Some times dies with code errors. - Autocompletes completely worthless and seemingly random things. - Most of the time takes 5+ seconds to autocomplete anything. - Type hints work (of course primarily in PHP 7+), albeit still extremely slowly. However, type hints in docblocks causes extreme load times of the suggestions window. - The syntax parser regularly pukes or hangs (10+ seconds). - Gets easily confused with identical class names, even when namespaces are fully quantified and different. - Clicking a PSR-0 or PSR-4 autoloaded class occasionally freezes the editor. There are so many issues and bugs, and the team behind the IDE is simply not handling or responding sufficiently: https://github.com/atom/ide-php/issues
I'm wary of important numerical values as array keys, might be perfectly safe but in my opinion it's asking for trouble. $users = $db-&gt;query('SELECT CONCAT('a', id) AS temp_id, u.* FROM users u')-&gt;fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_GROUP | PDO::FETCH_UNIQUE); I'm not sure if it's good practice, but should be just as fast if they're hashed anyways. If you did that in javascript you would end up with enormous arrays. var temp_array = new Array(); temp_array[200000] = 'oops'; console.log(temp_array);
Nice resource, thanks.
Well....the debugger doesnt work anyway...so..PHPStorm provides nothing that text editors cant give you.
Friends don’t let friends http :) https://www.jetbrains.com/phpstorm/eap/
There are vim plugins for PHPStorm. Shortcuts like the one you mentioned are nice, but not IDE features (autocomplete, generators, code analysis etc). Using a vim plugin inside PHPStorm gives you the best of both worlds.
You are welcome. It took me quite a time to perform all tests and compile results into the article. Hope you'll find something useful for yourself.
I mean, notepad++ still works fine for me :shrug:
Komodo Edit? https://www.activestate.com/komodo-ide/downloads/edit
Hi, So I'm having some issues with shell_exec(). For example, with a very simple "mv" commandline, it won't work when the script is loaded in the browser but will when executed via commandline. So, instead I used the rename() function to move files... Is this the best way to do so?
I’ve used both quite extensively and prefer Doctrine. I did really like Propel for a long time and one thing that really worked well was migrations. But in the end, Data Mapper felt more “right” than Active Record. Single responsibility and what not. I absolutely love Doctrine. After the initial learning curve it’s just so powerful and well designed. If you’re tossing up between the two, read about Active Record vs Data Mapper pattern and decide what feels better to you. You can’t go wrong with either. 
Let's celebrate the fact that the annoying guy pointing people at misspellings of PhpStorm hasn't shown up yet. 🎉
What is your concern actually? Arrays in PHP are hashed maps, so such a code will give you just one entry. Anything ese to worry about? Like I said above, this "magical sequence" is rather a cargo cult code, and given you set fetch assoc as a default mode, irt should be just $users = $db-&gt;query('SELECT id, u.* FROM users u')-&gt;fetchAll(PDO::FETCH_UNIQUE); 
I'm using NetBeans for PHP, HTML, CSS, SCSS and it's great. Also if you like VIM bingings there's jvi plugin which is perfect.
Yarharhar and a bottle of rum
Regarding you `y` why not just use [array_column](http://php.net/manual/en/function.array-column.php)?
Np. This sub is not usually for help topics so people usually point you to one of the relevant subreddits or ask some base questions not probing so far but I'd recently helped someone else with this so thought I'd give you the basic run down with somewhere to start. You can remove the redis image entity if you don't plan to use it and add in an Apache or nginx image as well as using a native php7.1 image if required assuming you find one that's suitable. Docker is very powerful but many people get out off by a lot of wrong advice or over complications. Best of luck
I would call y() *keyBy*.
Precisely why I posted this! It's easy to look-over simple stuff some days. I did not realize the third parameter existed. So `x()` and `y()` can be replaced with `array_column()`. Whoops.
You can always run composer install --ignore-platform-reqs
yeah, no
Regardless the fact there is `array_column` when something re-indexes an array by some key why not just calling it `reindexBySubKey`? You seem to actually be able to write what it does in a sentence: &gt; the function y() is for re-keying an array based on an array-of-arrays So in those cases a name is (*almost*) never far away.
Thanks :)
Don't use separate composer container. Bundle it into PHP container normally.
Given than the main source of such arrays is a database, PDO can give you y-formatted arrays out of the box, returning an [array indexed by id](https://phpdelusions.net/pdo/fetch_modes#FETCH_UNIQUE) right off the query: $data = $pdo-&gt;query("SELECT * FROM users")-&gt;fetchAll(PDO::FETCH_UNIQUE);
I like that. I had actually had it before I just renamed it `rekeyBySubKey` but that just looked so wordy. 
The PHP plugin depends on Ultimate-specific modules, so will not work for Idea CE (tested).
I'd guess shell_exec() will be forbidden when loaded from the browser due to configuration. It's also best in my opinion since if you have any injection into that function you have a very big vulnerability. I would definitely recommend using the rename-function.
as of the x(), I don't really get it. can you provide a usage example?
It's not a hardship especially, unless you want to do something urgently, then your 30days has definitely passed.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Not really https://www.reddit.com/r/PHP/comments/669y8x/apparently_the_phpstorm_eap_program_is_now_closed/
named returns are optional, you could have that as func split(sum int) (int, int) { return 1, 2 }
lol @ trying to point how bad other dependency managers are by referencing npm. Package.lock wasn't even a thing not that long ago. 
https://blog.jetbrains.com/phpstorm/category/eap/: the last EAP is from December 6, 2017, while the reddit link is something like 7 months old.
Some choice statements from the article. &gt; Finally, I know this topic makes many people uneasy, especially white males like myself. &gt; A lot of us have spent most of our time in this industry with mostly white males. *grabs popcorn* P.S. I'm a brown man from southern Africa. Where are all these mostly white males of the industry that I keep hearing about?
I just use vagrant w/ the latest version of php (or install other versions if necessary and update the vhost to point to the correct phpX-fpm) and nginx vhosts. Setup a few scripts to enable/disable certain supervisor scripts if I have a project like that and that's about it.
https://www.reddit.com/r/PHP/comments/669y8x/apparently_the_phpstorm_eap_program_is_now_closed/dggsq9k/
Seems it was a case that EAPs for minor versions required a license key. It's something new.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I was using EAP sharing stats, information and bugs as here was recommended as a way to use PHPstorm for free and help them to make the IDE better. But instead of that I got in a jail once the licence expired, I wasn't able to open phpstorm and work on my projects, and when I tried to download a new version there wasn't any available. You cannot imagine my frustration on being sharing stats, usage information, and everything thinking that it was the price to use the IDE for free but it wasn't 
Use rename unless you're moving uploaded files, in which case there is [move_uploaded_file](http://php.net/move_uploaded_file) which first "checks to ensure that the file designated by filename is a valid upload file"
It works for meh
Man, I'm really sorry if my comments are interfering with this bad experience.
&gt; it's eco-systems that really matter Agreed, completely.
&gt; (from 7.2 use PASSWORD_ARGON2I, before use PASSWORD_BCRYPT). Argh, use PASSWORD_DEFAULT. You'll be auto-upgraded to ARGON2I when it's been in core long enough (two minor versions) to become default. You then also save code-rot if a better algo is added in the future and it becomes the default.
This was a bad experience. But it was months ago. Your comments looks like if you were working in Jetbrains. In general I don't feel confortable with that kind of responses. 
That's fully understandable (and not working in JB), sorry again
&gt; Webstorm / PHPstorm are nice, but they're very limited in the languages they support. Eclipse handles C++ fine (PHPStorm doesn't) I don't find it limited that a PHP editor only works well for PHP and a JS/CSS/HTML editor only works well for JS/CSS/HTML. PHPStorm doesn't work well for C++, you don't say. But all those IDE's give you way more features than Eclipse for their specified languages. And if you want to use other languages, look at other JetBrains IDE's. If you want C++, use CLion. If you are using Go, get Goland.
Nowhere on their website does it say that you "pay" for the EAP version by submitting usage info. If anything it says the opposite by stating right under the download link that a valid license is required. Besides, their developers also need to eat and JetBrains also has to keep the lights on. 
Of course it works.
If you can regularly attend a local PHP meetup, there may be a chance you could win a one year license for PHPStorm from a monthly draw. My local meetup has sponsorship from the jetbrains folks, so that is how I obtained mine. 
Every major framework has a microframework. See Laravel and Lumen for exemple. Check out Symfony if you need more a library-like framework.
I didn't realise micro frameworks exists. thanks a lot. will take a look at them
For a long time, there was a situation where the default memory limit in eclipse.ini was too small, so eclipse worked very slowly until you manually edited it. This strongly influenced the reputation. There are also a number of unsolved annoying problems that can not be fixed until now. For example, if you forgot to specify "derived" for a directory with compiled and minimized .js files and did a search for files that found something in *.min.js, trying to display long lines in the search results window may result in a complete hang of the IDE. So it's not perfect. But I use it for a long time and don't want to change for something else because of multi-language richness. 
I do PHP professionally as my day job. My company hasn't written vanilla PHP in at least five years. It's always in some type of framework or CMS. We mostly do Symfony but Laravel is a totally viable choice. &gt; mainly because I'm very likely will be using 5-10% max of the frameworks ability And? That 5-10% could save you tons of time.
Check out new Symfony 4 and it's Flex system, they have change way you build your application, you can only use parts of framework that you want, and you don't even download parts you don't use. See more at https://symfony.com/blog/symfony-4-a-new-way-to-develop-applications
do you have good resources for working with symfony from scratch? 
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
Is your code fully test covered, stress tested, peer reviewed and fully documented? Is anyone that is going to start working with you instantly going to be familiar with the router, db abstraction, view rendering, dependency injection container, service registration, session integration and form handler? I'm guessing no, and that's reason enough to use a framework. When you start a new project do you have all those features completed by just pressing enter because you used a framework?
&gt; PHPStorm I'd like to interject for a moment. The IDE you appear to be referring to as, PHPStorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
Here's a start http://symfony.com/doc/current/create_framework/index.html
PhpStorm is free if you contribute to open source.
Is your code fully test covered, stress tested, peer reviewed and fully documented? Is anyone that is going to start working with you instantly going to be familiar with the router, db abstraction, view rendering, dependency injection container, service registration, session integration and form handler? I'm guessing no, and that's reason enough to use a framework. When you start a new project do you have all those features completed by just pressing enter because you used a framework?
May use Sublime Text?
I'd like to interject for a moment. Oh, nevermind. Seems you've learned something.
&gt; phpstorm &gt; phpstorm I'd like to interject for a moment. The IDE you appear to be referring to as, phpstorm is in fact called, PhpStorm. Don't worry, I don't expect developers to pay attention to details, but you would do yourself and everyone else a favour to get it correct in future.
I've used Eclipse in the past, and it isn't too bad, although the feature set isn't as extensive as PhpStorm. Eclipse is my go-to open source IDE. One caveat, however, is there's a lot of work required to get it to work with debugging. PhpStorm is kind of the gold standard here because it's so extensible and debugging doesn't require a ton of sysadmin knowledge. I've also used Visual Studio with PHP Tools, but I found it way too full of bloat.
https://www.reddit.com/r/PHP/comments/7j002e/free_alternatives_of_phpstorm/dr38spl/ He just did.
I have started to use Slim, it's enough of a framework to do the basics and add on the bits you need. It's useful to have an appreciation of frameworks as they are used extensively, so worth doing a project in at least one of them so you can get the principles of how they may work.
I use PHPStorm at work and it easily takes up 900MB of RAM. I use Netbeans at home and I don't have memory issues. That tells me that Netbeans is more memory conscious.
Are you the same guy that does this in every pHPsTORM thread? I gotta say I admire your persistence in the face of downvotes 
yeah, you're right. I only recently noticed that they started putting in package.lock for npm. it was a thing for composer since day-1.
So you preferred a DIY solution. I respect that.
References: https://stackoverflow.com/questions/18817615/managing-relationships-in-laravel-adhering-to-the-repository-pattern/18992000#18992000 https://laravel.io/forum/02-07-2014-best-practice-separating-custom-model-functionality-from-eloquent
I think the closest option would be Aptana Studio. It's a native application (unlike Atom or VS Code), is a fully featured IDE without needing dozens of plugins to provide basic features like FTP (unlike Sublime), and is a regular desktop application (unlike Vim or Emacs). It's based on Eclipse, but much more polished.
Adobe Brackets and Sublime Text are enough for simple stuff. But neither come close to PHPStorm. Worth supporting the developers.
My first two years were spent thinking that I did not need to use a framework. I saw them as too much overhead, too much to learn, and I wanted to do things my way. Finally, I decided to learn one of the popular PHP frameworks. It changed how I develop and I consider myself a much better developer now. If you don't want to take the time to experiment with a framework, then I recommend at least taking a look at [Patrick Louys' No Framework Tutorial](https://github.com/PatrickLouys/no-framework-tutorial) on GitHub. It's an easy-to-follow guide that walks you through the basic set up of building your own micro framework. Definitely a great starting point for someone to understand how a modern PHP application might be structured.
i've never had PHPStorm use more than 300MB......
Maybe he does know about eclipse.....
phpstorm
phpstorm
phpstorm
phpstorm
phpstorm
And why is that? Like...if you can understand what I mean...does it matter?
phpstorm
phpstorm
phpstorm
phpstorm
If it was only a couple of IDEs, it wouldn't be bad. As an aside, PhpStorm and Webstorm (and CLion also) aren't really separate editors. Jetbrains core editor (IntelliJ IDEA) has a pluggable architecture, like Eclipse. Their C / C++ plugins haven't been updated for a while, so they weren't compatible with IDEA when I trialed it last summer. CLion is an older version of the core IDE, and doesn't look like it'll be updated soon. There's a lot of cognitive overhead in shifting editor-to-editor. It eats time out of the day. To a degree, you can't get out of it. If you're writing native iOS, you *have* to use XCode. To the extent I can control it though, I'll use one full-featured IDE. Eclipse supports every language I use, and does so pretty well. It has support for some I don't use often, like Forth (used in FreeBSD's loader). It has excellent support for Ruby, Python, Perl, and shell. I end up using those often enough - configuration management with Puppet (Ruby), server-side scripting with Perl, ML stuff with Python. Not changing IDEs, or reverting to command-line Vim, is really nice. Eclipse has had more development support than any other IDE (because of its backing by IBM): something north of $80 million USD so far.
Sorry to hear you had that experience, Eclipse is a really nice IDE for me. I haven't had those sorts of problems with PDT. It *is* a hungry dog, for sure. Giving it six cores and 32Gb of ram pretty much cures all of Eclipse's warts imo. It does a lot when you have all the bells, whistles, and watchers turned on, and Eclipse can efficiently multi-thread most of that work.
He honest to yourself: just like most of PHP folks, you're just scared by new things and too lazy to learn and that's your real excuses not to learn a framework. Even though your question sounds weird in 2017, as though you would ponder on the question whether you have to buy a car, or a horse carriage or go a 20-mile route on foot every day.
Maybe, but still, insulting and without any argument. Troll spotted.
Codebase size? I've never seen my memory use that low with phpstorm.
&gt; back in the day I needed to restart Eclipse daily A lot of that is due to improvements in the JVM that Eclipse runs on.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I don't think it really matters if you only use 10% of a framework. Maybe there will be a slight performance hit, but this will be negligible in most projects. If it saves time it's likely worth it. Time is the one thing you can never get back.
I had high hopes for Atom. I have a Chromebook that I really like -- it has 14-hour battery life easily. I hacked Gallium OS onto it. The hardware is a little limited; a two-core ARM CPU and 1 gb of ram. I had all of the problems with Atom you describe. I ended up switching to Sublime on the Chromebook. I've been meaning to do an Electron project (Atom is written in the Electron framework), the idea of using React in a desktop application is pretty neat.
You can download the PhpStorm EAP for free for a limited period I believe https://www.jetbrains.com/phpstorm/eap/
PHpSTorM?
even a noob is able to read the rules before postin
A debugger requires either a compiler than can embed debugging tokens in the executable (like gdb for C / C++) or access to the internals of the interpreter (like PHP / Ruby / Python). The IDE isn't compiling the PHP language you're using -- it has no way of interacting with the runtime for debugging purposes. The only maintained debugger I'm aware of for PHP is XDebug, and it needs to be compiled into the language. The IDE is simply a *client* for the debugger, just like a CLI debugger client.
+1 to this. XSS and other securities are built in to many frame works, it’s the primary reason I’d use a framework when dealing with others private data
I used netbeans 5 years ago. I use PhpStorm nowadays and absolutely love it. Memory issues sometimes arise when indexing a project.
"i need to have a simple php application on my wordpress site done in eclipse" I think we are done here...
I think your low-effort meme shit is getting deleted.
with vendors 34511 files, 13420 PHP files. 1214385 lines of PHP src dir 491 files, 456 PHP files, 43074 lines of PHP Currently using ~150MB 
Lot of people will say "just use :help" but I find it quite hard to read. Check out /r/vim top posts for some cool tidbits, generally though I just think "there should be a better way to do that" and look it up case-by-case. I'd start with disabling your arrow keys so hjkl becomes more natural (it's the only thing that broke the habit for me) Then practice moving around with text objects, https://vim-adventures.com/ can help with the basics there. Also worth running through http://www2.geog.ucl.ac.uk/~plewis/teaching/unix/vimtutor. Thats not tailored to you, but somewhere in there you'll find something cool (I probably will too, 7 years of use and I still learn) Check out registers too, and marks. Quick one: `mm` (Mark into mark register 'm') which saves your current cursor location. Then you can go do other stuff and jump back to the location using `'m` (to mark m), because its just a movement you can also delete to mark m (`d'm`), move to mark m (`g'm`), yank to mark m (`y'm`), format to mark m (`='m`). And you can use most symbols for marking, I just use m because I'm lazzzyyyy. If you didn't know, you can use the usual commands win visual mode, so `vwwwy` would yank the three words you just highlit. Remember you can use P to paste behind cursor (p pastes in front) and O to open new line above (o opens below). CTRL-A and CTRL-X add or subtract from the next number after the cursor (even if i' not immediately after) which lets you do some nice macro stuff when doing data entry. Ok, this is way too long now. If you have any specific Qs feel free to ask :)
Here's a sneak peek of /r/vim using the [top posts](https://np.reddit.com/r/vim/top/?sort=top&amp;t=year) of the year! \#1: [Alright gonna learn Vim properly this time](http://i.imgur.com/xfzwh7F.jpg) | [111 comments](https://np.reddit.com/r/vim/comments/6j7oe5/alright_gonna_learn_vim_properly_this_time/) \#2: [vim cheatsheet desktop wallpaper](https://i.imgur.com/CjREO9t.png) | [14 comments](https://np.reddit.com/r/vim/comments/6xolj4/vim_cheatsheet_desktop_wallpaper/) \#3: [The Hottest Editors](https://xkcd.com/1823/) | [28 comments](https://np.reddit.com/r/vim/comments/64z8di/the_hottest_editors/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
I appreciate your comment about the matter.
Then try expressing the subject you are putting up for discussion using words, like a professional, rather than posting a shitty meme. 
You start with business logic, don't you? Well, don't poison your business logic with framework. As for infrastructure or I/O - use frameworks always.
Right, that's the reason why some people do it. But we should not forget to add: It's called micro-optimization and not worth it in this case.
This. Slim is wonderful at what it does. Need an ORM? Add Doctrine to your project and boom, you have an ORM. Need a template engine? Add Twig. The beauty of it is you're free to use any ORM, and template engine and any other things you want. 
I see only one reason for going without a (micro) framework - the joy of solving (low level) architecture riddles. Unfortunately, your only chance to succeed is not finishing anything for probably another couple of years (you'll burn out your enthusiasm on wrong approaches otherwise). I guess the happy middle would be taking some micro framework and trying to fit your app core between infrastructure it provides - for CRUDs it will be almost empty class sometimes (where "all arrows meet"). Then picking parts of the environment you don't like or simply want to challenge and trying to do it your way.
Holy shit talk about a spam account in the wild
What? You're gonna leapfrog node? :)
Keep in mind that Silex (the Symfony framework) will reportedly EOL next year, although the Symfony components are so easy to mix and match that I doubt anyone will really notice. 
No exceptions ... haven't to check return values all over the place gets tedious.
Well I like your argument. But sadly, but the business usually becomes integrated with the framework. Opinionated solutions around infrastructure do bleed into business logic easily but are hard to remove. You may have a business without a web app, but a web app is it's own business.
Hihi, thanks, now I finally know. Was also always curious to know what EA stands for in the plugin name. :)
Well, as you maybe still know, I'm one of your early supporters here and asked about one year ago how I can support you for that great project here on Reddit. Not sure what it was in the end, but I think I bought you something from your Amazon wishlist or something like that (really can't remember anymore). I definitely think the pricing is absolutely fair and worth it. But, I have two remarks to make: 1.) As someone said already here on Reddit, you want to sell your Ultimate plugin, thus you should make absolutely clear what's the difference to the free version. And not only do you want to sell it, but you also want to make sure people are happy about their purchase and not disappointed, because most of the Inspections currently are also included in the free version. 2.) I don't really get the pricing. Me, as an employee, why should I buy the commercial license for my employees instead of the personal ones, if they can still use it commcercially? Is the only difference the support level (SLA)? If yes, you should also make that more explicit. I don't want to guess when I buy something. Within 2 minutes I should have all important information required to make a good decision: Buy it or not.
Thanks a lot for the write-up! I should have been more specific, I know the basics, simple movement, yanking, pasting, visual. However I am very low on intermediate stuff, I have done simple macroing, but I didn't know about marks and registers, or deleting between quotes. Thanks for that, already subscribed to r/vim and if you have any more advanced stuff and feel like writing it here, I will be very appreciative!
I like the general idea behind it, but truth is, at least we found out in our team, it just doesn't work with most developers and most will give up soon or go back to 'lazy' commits again. ;)
I whish this comment wouldn't be so underrated.
/u/Andreas_91, it was an item on my wishlist a year back =) Remarks are fair: 1) On the radar: I added implicit specification that it's a commercial product, that free 2 weeks trial is there the + amount of new/enhanced inspections. Agree, the most reasonable way to make people happy with Ultimate is to push Ultimate ahead, I thought so; do I miss something? 2) On my list. Intended is separate SLAs + clear separation between individuals (incl. freelancers) and companies (personal and commercial licenses accordingly), but I'll revisit the pricing page. Should I also add infomration abou 2 weeks on the pricing page, how do you think?
When I start a project, I immediately initialize composer for autoloading. Projects without composer are an unimaginable horror. Since I've already got composer, I immediately install symfony/httpfoundation, because PHP's standard library's HTTP functionality is... ugh. And since I want nice and comprehensive errors, there's no way around symfony/debug. And I want routing. The old .php per route approach makes me die inside. So symfony/routing it is, and a front controller. And in that front controller, I need to bootstrap my application... I could write that myself, or use symfony/http-kernel. And of course I want to be protected against XSS by default and have a sane way to write my views with layout inheritance, filters and such, so I have to install a templating engine like twig. And of course I want dependency injection to decouple my code... and configuration, to make the whole thing work at alll, and I don't want to write the boilerplate code that ties everything together myself, so I might as well just use frameworkbundle... And at that point, one might as well just use symfony framework standard edition (Or flex).
1.) Well, I hope we talk about the same page? I'm talking about that page here: https://kalessil.github.io/php-inspections-ultimate.html I'd actually expect a concrete list of checks that are better or only implemented in Ultimate version instead of the free one. I think especially devs are interested in concrete lists instead of too much of marketing blubb. Your current list: - "Extensive checks" - Aha, but I also have extensive checks in the free version, haven't I? - "Professional support" - Okay, great, but I usually don't need support or expect to need support. My expectation is I install your plugin and it makes me happy, i.e. finding bugs or code smells. - "IDE integration" - Sure, but isn't the free version integrated in the IDE as well? - "Insightful checks" - Great, but the same point again: Difference to free version? Sorry if it sounds hard, but for me, it's not concrete enough. What's the clear difference to the free version? I think it's better you provide a very concrete list as you posted here on Reddit. A concrete list with all inspections in the free version and in the commercial version and if some checks are better in commercial version than free version (but exists in both), then indicate it somehow. 2.) Well, it's your project, but in my view, I wouldn't separate between freelancers and companies really. I'd offer them the same license, price and support level and then maybe a special SLA for enterprises that are in need for it. Currently, it's a bit confusing for me, which license to choose. Moreover, keep in mind: Pricing should be simple and straight forward. Not too many choices. Something like 2 license types: "Private use" and "Commercial use" should be absolutely fine. I'd then add SLAs as an additional "block", if a corporation is in need of. Personally, I wouldn't add information about the trial on the pricing page. Why? Because my intention, when I visit pricing, is not really to find out, if there's a trial or not, instead I'm just interested in what the price is. But that might differ, depending on the people. I'd run an A/B test on that as soon as you have some relevant traffic on the pricing page and some metrics / sales. But otherwise, I'd follow the KISS principle. ;)
&gt; I'm not a big fan of using existing frameworks, mainly because I'm very likely will be using 5-10% max of the frameworks ability. One of the advantages of frameworks is consistency and forward planning. Frameworks need to be generally useful and will take into account use cases you might think are relevant to you but will become relevant over the course of the project. Using frameworks also helps other people understand your code. If you're interviewing for a junior developer there's a chance they've used Symfony before versus the zero percent chance they'll have experience with "thing I wrote to fix this specific problem."
&gt; Come on, /r/php/, grow up. Do not pretend this question deserves any discussion in 2017. It deserves a discussion in 2020 or 2049. If someone doesn't understand why people do things a certain way then they should be welcome to ask even if you feel like it's obvious.
Its might be because of the "working directory". Are you using absolute paths? If not check `getcwd` and `chdir` http://php.net/manual/en/function.getcwd.php http://php.net/manual/en/function.chdir.php
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
1) It's the same, page: will update the page with concrete details. (BTW, that;s not harsh - I like dealing with direct and well-structured feedback). 2) I'll reduce pricing options to max 3, that's for sure (KISS is the right thing here =)) Working on 2-minutes decision-making scenario!
Is it wise to have my Laravel app deliver images (for example so it can manipulate the size if required) or should I just set a bunch of relevant sizes when the image is uploaded, and link directly to the image?
I'm definitely pro this RFC. I mean, I understand the con arguments in internals as well. Sure, you can say it's the IDE's job to make code more readable for the developers, but on the other side, making such a important side effect explicit and definitely obvious is really important I think.
Howdy, I suggest you read through the tutorial (you can start it with `vimtutor` in the console), and that you get familiarized with the `:help` and `:helpgrep` commands. That way you can know *everything* without even googling things up. Otherwise there's a couple of handy resources: - [Vim tips wiki](http://vim.wikia.com/wiki/Vim_Tips_Wiki) - [Vimcasts](http://vimcasts.org/) (and maybe also the book by the same author [Practical Vim](https://pragprog.com/book/dnvim/practical-vim)) - Many more things at /r/vim (there is a wiki full of tips and resources). - And to get your skills going, you might want to do some [Vim golfing](https://www.vimgolf.com/).
I was thinking "who cares what CSS looks like?" but I bet a lot of people do, as much as I care what code looks like. When I have to write CSS, or especially modify someone else's, it's a jungle of ultra-specific selectors and `!important` suffixes, duplicated selectors, and the only thing I want to do is get what I need done and get out of front-end code ASAP, yet I spend hours fighting with simple things. I think I understand how the people who wrote some of the code I've had to work with felt. I wonder if they knew they were incompetent? The ones with no spaces between anything on one line, with single letter variable names, where turning on `display_errors` causes the browser to almost crash from getting so much to parse...
We had a very similar experience with Go. While rewriting legacy we made a small-to-medium sized library in Go to... manage files, in short. Then we started building another core of the system in Elixir and another in PHP. I know it seems like a recipe for disaster but it worked more or less flawlessly... until we needed to extend the scope of files in the Go service. Oh the horrors. Month later we arrived at the goal of those three services working and the longest time we wasted was in Go. In summary, i like the language, i like the premise of it and the speed of, not only the execution time but also development time, but now i think of it rather as a prototype-building language or maybe another file-related service. Definitely not for large architectures nor sophisticated data processing.
&gt; i think of it rather as a prototype-building language Now where have I heard that before...
 It's not Go, it's you. Perhaps you don't have as much coding experience as you would like and perhaps you don't understand basic fundamentals. That could be the problem here. As someone who has 10 years of development experience in multiple languages. Sure I found it hard to do complex things and not having the high level functionality I was used to, going from PHP/Python to Go. But with now 2 years development experience with it. I didn't find &gt; The bytes/strings/json/http handling is also not pleasant to work with. difficult at all. &gt; Go + micro services = no. Sorry to say, but this is flat out wrong. Taken from another posting of mine: Some things I do with Go:- 1) Image generation (screenshot) 2) HTML to PDF generation 3) Image conversion PNG -&gt; HTML (for emails) 4) UI Notification (alert after job finishes processing) 5) Sending emails to 10s of millions of users. 6) Posting statuses on social networks 7) Leveraging hugely a MQ network and a heck of a lot more. My entire backend is microserviced and allows me to have development silos where I could work on a specific problem without impacting the project in a way a monolithic application in PHP would. Additionally, I have well over 100k lines of Go code for a backend. Of course you can integrate business logic into Go. &gt; PS: I gave it another two days but it's just painful to work with Go. It is a low level systems language and the lack of OOP is too much. It is a low level system language and that's what makes it so awesome.
Some basic proof-reading would help this article a lot. It was painful just to get through the first few paragraphs... 
Good articles, time for the Go fanboys to calm down about their overhyped language. It has some solid use cases but it is NOT going to take over the internet. 
&gt; but you would do yourself and everyone else a favour to get it correct in future What, and miss trolls like you? That would just be a shame! PhpstorM for life! 
You just diverted me from future mistakes. Thank you.
If possible, make the upgrade incremental. There were a lot of changes from 5.3 to 5.4 that could be considered breaking. I think I nearly killed one manager with just that transition a few years back. From there, it should be an easy jump to 5.6. It may be officially EOL, but the various distros will support it for a while longer. That should buy enough breathing room to jump to 7.x just before 5.6 gets to be too stale and crusty to use any more.
Lol
Go v2 will fix it all, then v3, v4, v5, v6.... all the way up to Go 2020.
I'm late to the party but you should take a look at AWS API Gateway. Your team or the mobile team can use it to rapidly mock endpoints that will unblock their development, generate client SDKs for them and help you jointly deliver some pretty solid spec before implementing anything.
It's pretty rigid and opinionated. Some examples: * Makes heavy use of arrays not only for app configuration (understandable) but for constructors too (annoying because many classes simply take one argument, a giant configuration array) * Promotes code generation * Up until a recent release, it required the composer-asset-plugin to be installed globaly via composer * Does not lend itself to unit testing (depends on your definition of the term, unit, but to me, when I'm trying to unit test a model, I don't want it to touch the database, ever -- so if you share my opinion, you're in for a world of hurt) In addition, the quality of 3rd party packages is average at best and the community is quite small.
It was?
Medium is really slipping.
&gt; It doesn't work that way, you have to issue commands to it from your host machine. `docker exec -it {id} /bin/bash` ?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Maybe done with Go?
Well I don't think it's the right place to post (/r/golang should be the right place). I have been writing Go, Node.js and PHP for quite a while now. I don't think golang is overhyped; nor it's a silver bullet. There are systems like Kubernetes, etcd, and so on that are implemented in Golang and they work really well. I think problem is people trying to use Golang for EVERYTHING! There are so many things I would disagree with in the article; but I won't disagree with the fact that if you want language with dynamic nature (Ruby, PHP, JS) and you expect to find those conveniences in **Golang** you are flat out doomed. And reading this article this is the exact feeling I get, somebody was like *"look look a cool new toy"* and the herd followed. 
Kind of off topic, but what do you use for HTML to PDF generation? Been looking for something that gets the job done quickly on go :) 
I think the problem is not with Go, but with the OP's level of experience. Both PHP and Go are good languages. He will probably try something else next. I'll be wating for his "From PHP to Go to PHP to Rust to Rails" post on Medium. 
Also looking for something to do this. I want to take it out of our php app and into a go microservices
Thank you again Scott for your tireless efforts to help improve the PHP ecosystem.
I'm not going to diagnose your issues with Go from that short description, but maybe your unfamiliarity with Go was the root issue rather than the size of the project. Many large projects have been written in Go. If you try to write Go like you would PHP, you're going to have a bad time. If you try to write Go like you write Java you're going to have a bad time. Write Go as it was designed, for problems it excels at. &gt; until we needed to extend the scope of files in the Go service. Oh the horrors. I have no idea what this means &gt; sophisticated data processing I will agree with you here. I find higher level languages like Python, or Java suitable for these problems.
Thanks man. Had a quick 5 minute read and already looks very very helpful. Bookmarked for the weekend!!
Thanks for the reply. I really like Yii, used it in a lot of projects, big and small, but you really hit the nail on the head there with all of those points. I've yet to find something similar to yii's grids for laravel though.
Oh now I know what to read after work. Thank you!
`SELECT field, field, field` - ASSOC, many fields `SELECT COUNT(*)` - COLUMN, one result
Thanks Scott!
Love it! Thx!
And same improvements goes for JetBrains products, such as PhpStorm !
What what what? PDF to JSON?? http://i0.kym-cdn.com/entries/icons/facebook/000/021/464/14608107_1180665285312703_1558693314_n.jpg
Thank you for that!
This, I too am looking for a good solution
Right now I'm leveraging wkhtmltopdf under xvfb-run via an exec.Command line. What I'm doing is really custom and by generating the html from a boiler plate, means I can use something like wkhtmltopdf and get good results.
Ah, too bad. I'm doing something very similar, except that I can't utilize non go dependencies. I have played with gofpdf but it's not as easy as feeding it html and getting a pdf out. 
Yeah, obviously we weren’t seasoned Go veterans but then we switched to Elixir and it was just... easier, faster and more expandable on the fly, hence why we switched to Elixir/PHP for the rest of the system. Though i’d love to give Go more time and more projects.
&gt; It is a low level system language lol GC
As with every "Frameworks Benchmark" take it with a pinch of salt. Here's the code used for the "Hello World" and "REST API" benchmarks: * https://github.com/phpbenchmarks/symfony-4-0 * https://github.com/phpbenchmarks/laravel-5-5
I've been using Slim, but didn't like how it does dependency injection....so I wrote https://github.com/Danack/SlimAurynInvoker which allows you to use the Auryn injection library with it. It also allows you to return 'stub' responses from controllers like: return new JsonResponse($data); which get put into the PSR7 response, which I find a lot simpler than having to touch the PSR7 response object in the controller. 
Both sucks. They push idea of processing data in PHP, when you actually can do it in mysql few times faster. Now I use Doctrine, because I can not choose. But at the end - pure SQL + PDO is way to go. And having in mind, that you can write views, procedures and functions. Why the fuck you would need to use ORM at all. Like you change databases 5 times a day.
wkhtmltopdf or chrome headless are the two sanest choices. 
Good stuff. Thanks again!
Return of the security troll.
What do you think is troll about the blog post?
1) Who checks the tests? Code reviewer right? ;) 2) Even if somebody covers all API endpoints it's still not enough. Tests are static defense. Requirements change, you have to rework relevant tests (and assume that breakage in other tests are symptoms of genuine errors). Code review can catch some of those bugs. Can catch misunderstanding (that is tests that test wrong things), or even find faults in API design. Code review can not be automated. Though code review may be prime example of "true scotch" argument :D. After all if it can be automated it should. Humans on average can't beat computers at mechanical tasks.
Did Fabien change the title, or did /u/tigitz add the Laravel reference? Actual article is about how much faster Symfony 4 is than 3.4
Not the blog, the person.
care to explain? 
In the past 12 months I have... * Helped about a half dozen companies recover from near-catastrophic security incidents * Proved the merits of libsodium adequately for a [unanimous vote to add it to the core](https://wiki.php.net/rfc/libsodium), despite myself not having vote karma * Rewrote (most of) libsodium in pure-PHP, as securely as humanly possible, to support PHP 5.2.4 - 7.1.x so that open source software can be made forward-compatible with 7.2 * Developed an open source project to make [CACert.pem file management](https://github.com/paragonie/certainty) a no-brainer in an attempt to make e-commerce plugins stop disabling certificate validation * Continued to write blog posts that people [find](https://twitter.com/DazeEnd/status/940564985184432128) [informative](https://twitter.com/dimalezhnev/status/940482296595001344) and [valuable](https://twitter.com/FishFaceMcGee/status/940560371009708033) I fail to see how any of this qualifies my character as "troll"-like. Maybe we have different understandings of the term?
No he didn't, I highlithed what to me would be the most interesting statement in his article for r/php as a whole and not only its symfony users. 
Speaking of Symfony speed I didn't knew that Symfony 2.3 &gt; 2.8 &gt; 3.4... We shall thank php 7 really ... http://www.phpbenchmarks.com/en/benchmark/apache-bench/php-5.6/select-version/symfony.html Symfony 4 is just not loading all components, which seems to be heavier on every release... 
I don't know how good is the apache test, but this is something to be worried about Symfony 2.3 &gt; 2.8 &gt; 3.4 . http://www.phpbenchmarks.com/en/benchmark/apache-bench/php-7.2/select-version/symfony.html Isn't symfony 4 a microframework or modular? Are components getting bloated? We achieve better speed than 2.3 just not loading those? Besides that symfony 3.0 was faster than 3.4, perhaps speed will decrease for symfony 4.{lts} too? PHP 7 seems to be the real improvement. http://www.phpbenchmarks.com/en/benchmark/apache-bench/php-5.6/select-version/symfony.html 
What's the best way to get those uploads back to clients? I discovered `mod_xsendfile` a few months ago and it has been great for freeing up php processes that used to be stuck dumping files with `readfile()`. Other than the obvious "don't send /etc/passwd" (I've set up the XSendFilePath to limit specifically to the desired folder) are there security implications of using this?
If author can read it - there is much more and much faster frameworks than symfony, laravel and zend.
Php on swoole is faster than GO, so what's a point? I guess memory leaks will be only problem.
I'd have to audit `mod_xsendfile` to be able to recommend it in good conscience (and I obviously haven't done so yet), but `readfile()`has been my usual solution here. If there's a better way, I'd be happy to hear it as well.
Seems like a great package but too bad we don't have MySQL 5.7 on our servers yet...
This is great, Thank you!
excellent work! thank you for making this
I have a *very strong* hunch they are not making it a fair fight. Disable all the middleware (cookie encryption, session, etc.) that is turned on with Laravel by default. Optimize opcache for a real production server. Sure, I can remove all the components from Laravel 5.5, build a CLI to let you add them all back in when you build an actual robust application, and then claim that stripped down kernel is "faster" than Symfony, but it's deceptive IMO. Laravel provides a "real" experience out of the box. I don't like removing a bunch of stuff people will have to add back in anyways in order to appear faster.
Thanks, and happy Reddit birthday.
He can't, he's achieved absolutely nothing so instead has to come here and bash those who are helping the community. The only troll here is saltub.
To be fair, the benchmarking platform Fabien referenced is taking the default installs of each framework's starting application (i.e. a Flex project or laravel/laravel). It's not putting the two on an even playing field, which skews results. So to me all it is saying is that what each framework is using as their basic out-of-the-box platform, which has different biases toward what is available with little to no extra work, has massively differing performance metrics. Build something like Laravel's site in both frameworks, or Symfony's, or something more realistic than these generic hello world things (hell I'd even rebuild https://github.com/joomla/framework.joomla.org in both just for the sake of argument), and use those metrics for comparison. That's really where anyone who makes a big deal about these metrics will get data that can make a real argument from.
https://i.imgur.com/MJakHgD.png The only time Laravel is mentioned is in a single bullet point, don't sensationalise titles on /r/php please
Surprise surprise, the one and only solution to all the problems PHP devs encounter is to use Paragonie products! Best way to do crypto: use Paragonie products Best way to do SQL: use Paragonie products Best way to do a CMS: use Paragonie products Best way to do anything: use Paragonie products
1. The word "products" here is incorrect, as we are not selling them. They're available for free under very permissive license. 2. The best way to do crypto is to use the Sodium cryptography library, which is not something we developed. That was the work of /u/jedisct1 and built upon the work of many cryptography luminaries. 3. This article doesn't prescribe *anything* about how to "do a CMS", which tells me you're approaching this from a preexisting bias, presumably from a previous blog post that mentioned the security flaws in the cores of other CMS projects that are absent in our project. If you're not acting in good faith, it becomes very difficult to interpret your actions as anything but a direct, personal attack, which is not allowed on /r/php.
1. Doesn't change anything. 2. Paragonie did develop libsodium_compat, which is the only way to do libsodium on PHP 7.1 and earlier. 3. Paragonie developed the Airship CMS. Maybe it wasn't mentioned in your post but you spam it a lot all the same. If you feel my post is a personal attack feel free to report the post to the moderators.
1. Okay, then propose alternative libraries that solve the same problems as securely as what we've produced.
Neither. Use composer to assemble the libraries, that you need. But make the architecture yourself.
1. The SQL thing is a sham. It's just an opinionated approach to doing SQL with no real benefit over PDO. 2. You can't do PECL with Composer. Depending on the company adding a new server dependency like the PECL extension might require you go through a lot more red tape than simply adding it to your composer.json. 3. Fair enough.
&gt; The SQL thing is a sham. It's just an opinionated approach to doing SQL with no real benefit over PDO. [That's factually incorrect](https://stackoverflow.com/a/12202218/2224584). Going out of our way to use *actual* prepared statements provides a real security benefit over PDO. Everything else in EasyDB is just for usability gains, and if you don't care about that, fine, write it off as window dressing. But the code-data separation property that actual prepared statements provides, and emulated prepared statements do not, is necessary for a system to be provably immune against SQL injection attacks.
You were probably right when this was first posted, but Taylor has made this all about him now anyway.
As it is tradition. 
&gt; Taylor has made this all about him now anyway Why do you say that?
And yeah it is exactly why Go is overhyped since some people are trying to use it for everything, only to realize that it fails at some tasks it isn't meant to perform. 
If you keep editing your comments it's going to make following the conversation difficult. &gt; You can't do PECL with Composer and Composer is a lot more convenient than PECL. And like I said earlier, I think Paragonie knows this because otherwise why would they have invested so much time in the polyfill? If PECL was the walk in the park you're implying it is then developing a PHP polyfill was just a waste of time. I don't think it was a waste of time and I don't think you think that either. I said it was mostly useless on 7.2, which is true unless you need `ParagonIE_Sodium_File` for doing crypto on large files on a system with low memory (e.g. a Raspberry Pi). I didn't say it was totally useless, or mostly useless in general. The article also says that everyone should run 7.2+. &gt; If PECL was the walk in the park you're implying it is then developing a PHP polyfill was just a waste of time I was replying to the original version of your parent comment that said that sodium_compat was the only way to get libsodium before 7.2. PECL was also an option. It wasn't the easiest, most convenient option. In many situations it wasn't even available.
Thank you for this great "new year's resolutions" checklist. Most have been ticked, but we gotta tick 'em all ;)
Thanks, I wasn't up to date with a few points. I understand that the article is a quick rundown of the important points. But what I found lacking is the CSRF suggestion. Using form tokens is cumbersome, inherently incompatible with caching and maybe even a bit too old school for modern ajax heavy apps. Could you add sane alternatives?
&gt; Using form tokens is cumbersome, inherently incompatible with caching and maybe even a bit too old school for modern ajax heavy apps. https://github.com/paragonie/anti-csrf/releases/tag/v2.1.0 &gt; Could you add sane alternatives? The best alternative is [SameSite cookies](https://www.owasp.org/index.php/SameSite), which kill allow you to kill the entire bug class with minimal effort by preventing your session cookie from being attached on requests that originate from different origins.
But java has generics!
Because he’s spent 4 hours (what I assume is his entire waking day so far), crying on Twitter, running his own “benchmarks” under his own conditions and writing blog posts about how unfair this comparison is. All this whilst completely ignoring the entirely reasonable points made in an article that almost everybody already takes with a pinch of salt anyway and practically nobody really cares about that much.
You can learn go basics quick. But if you don't have a background with a similar language (like C), you should aim for months of learning the mentality that drives go (et al). Of course you cannot expect to map each aspect of a PHP app to a go app. The runtime model is completely different. Worse if you aim for heavy concurrency/parallellism, if you cannot draw your algorithm with every detail on a whiteboard - hung over - then you will fail. All that doesn't even comes close to ship stuff. The failure here is that go was perceived as an easy language and expected to be easy.
Very welcome. I've been thinking about other stuff that's in my daily arsenal, probably the most important is Windows. Aka splits. `CTRL-w` then `CTRL-v` for a vertical split and `CTRL-s` for a horizontal split. Each one can be split multiple times. When working with OOP code with nice small files I can have 6 to 8 files visible at once on 4K screen. Only 4 on Macbook Pro with a decent font size. Then use `CTRL-w, w` to cycle through or `CTRL-w, [hjkl]` to the window in that direction, can also map that to something more convenient, though I don't any longer. `CTRL-q` to close a window, use `:e filename` to open stuff as normal. This is probably one of the bigger timesavers for me in reality. I find opening files via cli so much easier than navigating with Windows style trees guis, so being able to open pane and open file fast compared to say sublime text having to right click to change layout, find the right one, then scroll through giant tree list to find file.. blah. Another thing is the % symbol being the current panes file path, so you can do `:! git diff %` to quickly see what's been done and then the same to commit the current file. `:!` runs she'll stuff so you can feel or whatever, can be slightly faster than `CTRL-z`ing and then `fg`ing. 
The real article should be "Symfony is getting slow in every release so we removed everything and now seems to be at par of 2.3 release"
Taylor Otwell made his own comparison ... https://medium.com/@taylorotwell/make-correct-comparisons-6ccc2216242d
Thanks for this, I'm just learning PHP coming from another language and this helps get to know the ecosystem. Cheers.
&gt;A monolith is not a monolith 
I'm sure a lot of people are aware laravel has a lot enabled out of the box. Which is cool. Plus any sane dev would disable unused components in a framework for production use. Anywho, we still enjoy using laravel at work when we get the chance. Keep up the good work. Don't let these things get to you.
Yeah, wkhtmltopdf looks awesome, but I was hoping for a Go only solution. I'll probably end up writing a wrapper for one of the existing pdf libraries to make html to PDF easier. 
I do recall seeing this on /r/golang but it's gone now. Probably deleted because of the incoherent ranting.
Breaking news ! less code go faster ! if you don't start a session your code will run faster ! These comparisons feels a bit dishonest and the post looks like a marketing / SEO thing more than a real comparison. A barebone symfony 4 should be compared against microframeworks like Zend Expressive or Slim... Even the comparison with Symfony 3.4 has no sense, it should have been compared to Silex.
What's the *real* question you want to ask?
No.
Lol, no. Seems like something only a python developer would ask. From a purely technical stance, PHP is too widely used and supported. 
&gt; That's factually incorrect. Going out of our way to use actual prepared statements provides a real security benefit over PDO. Quote from your link: If you use Modern Versions of MySQL (late 5.1, all 5.5, 5.6, etc) AND PDO's DSN charset parameter (in PHP ≥ 5.3.6) you're 100% safe. So no, there's no real security benefit to wrapping PDO.
symfony - framework for masochists :) it has ugly YAML/annotations everywhere, it has no middlewares and its validator is a nightmare - no thanks. i'll stick to laravel :) to be honest - in every release they are ripping off more and more laravel features/ideas...
I don't remember /r/php deleting any posts regarding some Go fanboys moving from PHP to Go, lol these go developers are so sensitive and insecure.
I think Taylor responding to this title is very reasonable. Especially considering its literally his job to defend his framework. I'm actually thankful laravel's developer is willing to respond to criticisms. It gives some valuable insight for those of us trying to make the tough decisions about what to use.
Definitely seems like I've been out of the loop on a few of these things. Bookmarking, reading, and then sharing with the team.
[Yep. Brand-spanking new.](http://i0.kym-cdn.com/entries/icons/facebook/000/000/128/slowpoke.jpg)
Performance always seems to win using the web server over PHP but I would like to hear the security take on mod_xsendfile (apache) and X-Send-File (lighttpd) and X-Accel-Redirect (nginx) vs any PHP solution (Aside from misconfiguration issues like external redirects, no file filtering etc).
&gt; Writing code has to be pleasant experience. Writing code is like painting or sculpting. You have to have a passion for it. You have to love it. Otherwise, what's the point? You'd be better off working behind an assembly line for some car manufacturer. Hang on now. Just because someone doesn't love programming you're saying they should work in a factory? What if they don't love working in a factory?
You want the result of two different randomizers to return the same if they're given the same seed? Can you describe what you're trying to do a little more? 
You are right. for example, random_with_seed (1); // result 3 random_with_seed (2); // result 6 random_with_seed (1); // result 3 random_with_seed (1); // result 3
You show up to a discussion about Symfony with nothing constructive and start throwing bullshit around. Shocking. 
Check this out instead: https://github.com/paragonie/seedspring
thx i will read it
Sounds like a good choice to me. If you found something that works well for your team and the problems you're solving that's great.
Are people trying to cache out their articles on reddit? This article is shit. Like actual shit. 
I am immature. Does this require Paragonie? Will I have to install it? Or can I copy only algorithms and function definitions?
You should use `composer` to install it. https://getcomposer.org/doc/00-intro.md
The RFC has now an implementation. See the new discussion thread on internals: https://externals.io/message/101323.
How would this work with an autoloader?
This looks morę like a hashing algoritm. Look up md5 as reference.
&gt; Plus any sane dev would disable unused components in a framework for production use. When Symfony did this, it was a bad thing. Now that Laravel does this, it's a good thing?
There's an example in the page being linked: ``` { "autoload": { "psr-4": { "Vendor\\Lib\\": "src/" }, "files": ["src/bootstrap.php"] } } ```
My 3.4 is actually faster. There's a feature flag for the container you can turn on and on top of that, 3.4 doesn't make services private by default yet. That's why 4.0 looks so much faster than 3.4 :)
He wasn’t responding to this title, he was responding to the article, and he can’t have been responding to criticism because there wasn’t any. Also, his job is to build software, not complain about other people building software. The reasonable response to somebody taking a piece of code they have written and making it better is “congratulations, I’m interested to see how you’ve managed that”, not “yeah but waaaaaaa”. Especially when your own bit of code relies on it so heavily! This reaction is overly defensive, if not fearful, and if I was going to use software creators reactions as a decision making tool (I don’t) then I’m not going to pick the software created by someone who reacts like Taylor does. 
Lol the shitty PHP developers are here to act tough
You should use Scott's seedspring, as linked elsewhere in this thread, but it's also worth noting that `srand()` still exists in newer PHP versions. The change is that it's now an alias for `mt_srand()` in PHP 7.1+ instead of the system `srand()` function.
Yeah... and no architecture or any OOP principles. Because of such crap as Laravel we need to deal with code vomit.
GO and facepalm yourself!
That is not random. According to definition in statistics random numbers must be uniformly distributed and unpredictable, and independent.
I also saw that mt_srand does not support seeding In any case, I have solved the basic algorithm in another article. It is not the latest technology, but it is still popular. Above all, I do not require highly accurate technology. I am just doing a lot of useless work. 
&gt; I also saw that mt_srand does not support seeding Where did you see that? That's literally the entire point of `mt_srand()`.
it IS shit! that's why I posted it here and asked people to answer based on that article
I like the idea, but i think it's almost impossible to avoid the proliferation of declares mentioned in the RFC would this pass. All the future RFCs would mention the ability to toggle settings as a way to avoid BC, with every new RFC more declares, until it's unmanageable. I know it's a slippery slope fallacy, but I can totally see it happening. Using Babel with Javascript I'm starting to get used to such optional features, but unlike Babel, which generally only adds new syntax, the examples in the RFC about strict compares, for example, completely change the way the language works, even if for the best. But there's hope, just like Babel we could have presets of declares, like php8, which would have all the stricts enabled, and them with community self regulation it would become a defacto standard until someday in PHP 10 we remove all the looseness, but it's highly optimistic to expect that
Don't feed the troll but.... - YAML/annotations are optional - Symfony Framework is built on middlewares so they are supported for sure - The Validator component is very powerful
I think it's too bad that Fabien has to get himself to the point where he involves other frameworks to compare. It is funny though that Taylor has his own history of unfair comparisons and when it happens to himself now he gets all whiny about it :D
http://php.net/manual/en/function.mt-srand.php
Library implements [Trytes encoding](https://github.com/tuupola/trytes) as described by [IOTA](https://learn.iota.org/faq/trytes-and-trits) project. Trytes are equivalent of bytes but in [ternary](http://homepage.divms.uiowa.edu/~jones/ternary/numbers.shtml) number system. 
The first parameter on that is an integer seed
&gt; maybe it's less hacky and more explicit then included files with declare I don't know - explicitly listing specific strictness flags sounds much less hacky and much more explicit than relying on some magic version number being present in a file. As these strictness flags have actual names, it's much easier to understand what level of strictness is required than knowing what the magical number 8 implies.
The link says: The Mersenne Twister implementation in PHP now uses a new seeding algorithm by Richard Wagner. Identical seeds no longer produce the same sequence of values they did in previous versions. This behavior is not expected to change again, but it is considered unsafe to rely upon it nonetheless.
&gt;Identical seeds no longer produce the same sequence of values they did in previous versions As in: you will still always get the same sequence for the same seed every time you run it, it's just that the sequence will be different to what you would have got if you used php5.1.
I can not find your ripple on the link.
&gt; he involves other frameworks to compare. What else could he compare it to (other than previous releases, which he did)? Lets be realistic here; Laravel &amp; Symfony are the most popular frameworks for developing new PHP projects. It only makes sense to (try!) and compare the two like-for-like.
Does your comment mean I have to use an older version of php? It is difficult. I mentioned in the text that I no longer support it. I know that it was supported before.
No, the link content is right. You're just misreading it. You're reading it as "mt_srand used to produce a deterministic sequence, now it doesn't", but what it actually says is "mt_srand used to produce deterministic sequence X, but now it produces deterministic sequence Y"
You're misunderstanding what it says. (That's almost certainly my fault, since I wrote that paragraph.) You can still use `mt_srand()` to seed the Mersenne Twister random number generator. The only change is that the sequence of numbers you get for a particular seed changed has changed a couple of times: once in PHP 5.2.1, and once in PHP 7.1.0. (You can get the 5.2.1-7.0 behaviour back on PHP 7.1+ by passing `MT_RAND_PHP` as the second parameter.) I would still **strongly** suggest that you should use seedspring, but you _can_ do what you want with `mt_srand()` and `mt_rand()`, provided you understand (a) that the MT random number generator is poor by modern standards, and (b) it's not guaranteed that you'll get the same sequence of random numbers for a given seed across different PHP versions.
The previous version of the same framework would be good for me. Now it looks like Laravel is way slower but it's comparing apples to oranges which is unfair and it only leads to framework bashing. I always admired the Symfony for not looking so much at other frameworks and not to defend their choices on social media.
OK The meaning of the link is that there is a difference between the two versions Still being able to use the seed Is this right? I can not speak English. that's not my language. Your ripple was very helpful. But I will never have to use seed spring. I used 100MB free hosting, and in just a couple of years I added only 9 lines of code. This is a very trivial thing, so there is no reason to install anything like that. What I want is not speed. It is not a perfect distribution. And I have already solved it.
There are some edge cases, but in general Doctrine does not pus anything like that. And ORM is not for changing databases. Got any particular case you're stuck with? Feel free to post a question right here in /r/phphelp and we'll try to show you how your task could be solved on the database side using ORM
TL;DR: let's take an old man PHP (5.4), tie his hands (mod_php) and make him fight with younger unrestrained folks.
Excellent article. Thank you for keeping us safe and secure, Scott!
Then laravel heavily depends on Symfony and he says it rips laravel features xD
http://symfony.com/doc/current/create_framework/index.html
A more interesting side by side would be to have all those requests be sent out to a DB server and see what, if any, performance differences you get there. What happens when Go slaps MySQL or PostgreSQL with all of those non-blocking I/O requests? Do you really save time with Node throwing a stack of asynchronous calls to a DB rather than one at a time? It is an interesting article. Just don't feel like it's much value from a web development point of view. Other than a configuration file, there's very little in the way of just plain old files I'm working with to produce a display.
You're obviously here to argue, right? If they implemented a new tag which interprets the encapsulated code with *all the stricts enabled*, what is there to misunderstand? I'm sure if they implemented a new tag it would be documented thoroughly and news of it would propagate very quickly throughout the community. People aren't going to be caught off-guard by its use, and if they are, then there is a very good chance they're not going to understand anything this RFC covers either. I'm actually just going to suggest that you didn't really read the RFC at all, because it does seem very much hacky and less explicit than just implementing a new tag which would enforce higher strictness of encapsulated code. This RFC is not addressing the problem, it is adding to it. The problem is that PHP does not enforce high strictness. Neither will this. All this RFC is doing is moving your declares out of each file. You still have to enforce strictness per file, but you will now do it from your bootstrap under the facade of enforcing strictness per namespace (it's still per file). There are downsides and risks and limitations and restrictions all mentioned in this RFC. And again, it still doesn't address the problem - people will still write code to whatever standards they want, what this RFC does is make that code interop with your more strict code - how great for you and your project. Alternatively, if we had a new strict PHP tag (I'd rather call it &lt;?phps than &lt;?php8), then we have all the context we need, from the tag alone, to understand the required strictness of the encapsulated code (very strict!).
Symfony 2.3 | 23,694 Symfony 2.8 | 17,069 Symfony 3.4 | 14,277 Symfony 4.0 | 27,495 Do you know how to compare numbers? or your mind is simple ignoring what do not what to see 
Out of curiosity, what problem are you actually trying to solve with a reproducible set of random numbers or the ability to reproduce a certain number based on seed? It's not a very common thing to use, and there might be a better solution to the problem as a whole.
Passing this on to a local college's CTF team that I do some advising for. PHP apps almost always how up in the scenario's existing services so resources like this are invaluable to new members.
Active support for php 5.4 ended four years ago. If you really want to be fair, use the latest version of each that is included in the RHEL SCL.
&gt; &lt;?php8 that would make the file enable all the strict declares as of PHP8 That's very unlikely to happen. There are people who still think the weak types is a better solution, and they would complain about having to change all of their code to have declare(strict_type=0) at the top. 
Well, the common/semi-layman term would be pseudo random number. [Read more here](https://en.wikipedia.org/wiki/Pseudorandom_number_generator). I'm sure Scott can point out 20 reasons why PRNG doesn't technically fit here, but it's an effective term for a higher level discussion =D
I honestly had a blast reading this thread. The misunderstanding from obvious use of something like Google Translate made this incredibly funny.
Maybe at first it looks fine but keeping things strict in class is integral part of this class (its logic) so it's not a good idea to let others change, sometimes whole point of your app, library etc. (and in 99% cases break it). Some time ago I was very skeptical about declaring it in every file and also wanted to do it globally. But I got used to it and now it doesn't bother me (IDE is writing it for me). Generally it's the same case as declaring (or not) strict types globally in php config (but just in smaller scope).
Tylers back lol, some people just don't like friendly competition. Some would look at this and go 'this is an attack' while others would take this as a chance to improve the performance of their code to compete with the competition. 
Actually at my job I use C# and ASP.net, but oh well nice try. Just shows how delusional and pathetic Go fanboys are, they really believe in nonsense.
Got downvoted by stupid Go fan boys, they can't make valid argument so they resort to downvoting, which will not change the fact that Go is overhyped and will never ever take over the internet.
[quote]Always escape on output, never on input.[/quote] I do both on habit, am I a bad person or just a paranoid one?
Validate on input. If you're expecting an email address, make sure it's formatted like one. "Escape on output" means storing any valid data (even if it contains XSS payloads) wholesale in the database. That allows your database to be the single source of truth and if an XSS filter bypass is discovered, you have the original payload to work with when upgrading your filter rather than a convoluted/half-escaped version.
&gt; There was a comment in the internals about adding a shortcut, like &lt;?php8 that would make the file enable all the strict declares as of PHP8, i think this idea deserves to be considered, maybe it's less hacky and more explicit than included files with declare Let's see how this work. Ideally it works like this: function calls inside of `&lt;?php8 ?&gt;` could require the `&amp;` at the call-site. How do we implement that? We'd need to hook into `SEND_REF` and `SEND_VAR_EX` and maybe a few others to tell them they need to error if they don't use `&amp;` but only in `&lt;?php8 ?&gt;` blocks. We probably don't want to duplicate opcodes for this purpose. Maybe we can use `extended_value`? I'm not sure if any of these opcodes already use it, though.
I'd make an argument about how your conclusion is fallacious, then watch you post something that is either a personal insult or just plain unrelated, I'd call you out on it, and in the end you'll just delete all your comments anyway. So really, whats the point of trying to argue with an obvious troll when I could be more productive elsewhere. 
With `namespace_declare()` working on other namespaces, isn't there a security threat from injecting a serialized class which changes behavior elsewhere?
Sure... 
&gt; the only thing I see is you without arguments. Yeah, my whole comment was about how I wasn't going to make any arguments because reasonable discussion is something that you can't seem to grasp. Have a nice day.
Seriosuly wtf. This returns 1 echo 0 == 'something'; 1 wtf.
It's basically the same as If($i == (int) 'dupa') Because $i is an integer it tries to compare it as such. 
its trying to convert 'dupa' to a int. since it is not possible it converts to 0.
[removed]
I know PHP has weak types but dupa is clearly a string
Yes, but you are comparing the later with an integer, so it tries to convert the later to the same as the former, which is an integer. Because a string cannot be an integer, it ends up being 0. This is why you always use === when comparing things and concert your data types properly. 
Caveat: If you're comparing a sensitive value, use `hash_equals()` instead of `===`. Rarely, if ever, use `==`.
From the docs: [PHP Comparisions](http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison) &gt; If you compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison performed numerically. I'm afraid you will have to consult sophisticated theology if you want a deeper "why" type explanation. On the other hand, === makes all things better. 
Seriously wtf. `===` is what you need. Don't blame the language, blame yourself for not knowing its basic syntax.
Just try 0 = ‚something‘ :)
Um, -- is still a damn equality operator. I understand that it's not doing a type equailty here, but what goofy PHP conversion rule is letting 0 be equal to a string in any conversion context?
Isn't it possible for a tag like &lt;?phpstrict to automatically call a set of declare(), i.e. everything that can be done with a declare() could be done with a new tag?
I'm not talking about the creators of the framework. I'm referring to people that use it eventually.
&gt; &lt;?php8 Why **&lt;?php8**, why not a new file extension **.phps**trict or something. There was some discussion earlier that PHP needs a new file type for pure PHP code which can do away the opening tag. I don't know how its going to evolve but I think it can incorporate all new changes which are a treat to BC - just a thought by the way.
The problem is that adding new things to `strict` in future versions is not compatible. Adding a new thing like `&lt;?php9 ?&gt;` they have to opt into does not have that issue.
and then I'm the one talking bullshit I see. 
I'm not sure I really get what you're referring to here, but generally speaking: If there is a security threat, then it's not a new one. If you are able to trigger a `namespace_declare()` call during unserialization, you can likely run arbitrary code, so you can also do whatever you want.
"Sensitive value"? More specifically passwords and password hashes. Although timing attacks should've been rendered impossible much earlier by rate limiting. Also `==` is mostly the only right approach when working with numbers, because your integer may turn out a float through an innocent operation (or auto-conversion on overflow for 32-bit PHP), with no fraction and `(int)` 10 is not `===` to `(float) 10`.
Maybe `namespace_declare()` can fail or fatal, etc if it's being called from a file that declares a namespace outside what's being declared by `namespace`. Otherwise, maybe adding options to the `namespace` keyword itself would be cool, especially if it applies to all the sub-namespaces under it: ```php &lt;?php namespace Foo\Bar { strict_types =&gt; 1 }; ``` I have no idea if something like that is possible given compile time vs runtime.
Why not strict mode enabled by default in PHP 8? it seems simpler and cleaner.
Good ol echo dupa; 😂
Actually I like that. It means that you specifically have to opt-out of new features, which honestly should be kinda frowned upon.
If you need performance - use Phalcon PHP https://phalconphp.com/. It's really good as a framework If you don't really care about performance, just use a framework of your choice. That's all!
because if you change the defaults all code written for PHP7 would stop working in PHP8, suddenly all libraries would need to be updated, and people would consider not updating their code because it's too hard. It's called a backwards compatibility break. It's like if browsers renamed &lt;a&gt; by &lt;links&gt; and all old sites would not have links anymore
He was responding to a so-called benchmark that said symfony 4 was three times faster than laravel.... and that was clearly false. When such a ridiculous claim is being made you don't think its reasonable that he responds? Especially considering he uses benchmarks for marketing purposes quite a bit, just look at the lumen home page. Taylor clearly loves benchmarks. The fact is laravel and symfony will always be on par in performance and its ridiculous to compare the two. Laravel uses: * symfony/http-foundation * symfony/http-kernel * symfony/process * symfony/routing So for the purposes of this benchmark you may as well be comparing the same framework. They are mostly running the same fucking code! I don't understand why Taylor is getting so much hate here. WTF is going on. 
Toptal needs a button that instead of [Hire Brad](https://www.toptal.com/resume/brad-peabody) I can leave a comment like "Brad Peabody has absolutely no idea what the fuck he's talking about. Do not hire, this fucker probably still uses &lt;BLINK&gt; and &lt;FONT&gt; tags"
It's amazing how old shit articles tend to resurface and spread around the internet. I've seen this posted in a few different places today. Some good stuff at the beginning but using out of date stuff across the board, especially on PHP, and makes the incorrect assumption that mod_php is the only way to use PHP, then proceeds to write a CPU-intensive benchmark (sha256) when he's supposed to be benchmarking I/O.
Because the file extensions aren't really processed by PHP interpreter. Nothing in PHP itself forces you to use the extension php either.
OOOOOOOld.
I think both approaches are valid depending on the situation. Are you likely to need different sizes in the future? If so then something like Glide makes that really easy. However in a high traffic situation linking directly will have lower overhead.
The benchmarks don’t “say” anything, they are just numbers put up for anyone to look at and draw their own conclusions. They also are not false, they are very accurate representations of each framework run under the conditions they state they are run under. Neither the benchmark site, or the creators of Symfony have said anything that evens starts to suggest these figures are representative of real world use, nor do they make any claims that these figures mean any one framework is better than another. The only two people I know that have read these figures and come to that conclusion are Taylor Otwell and you. I would suggest that, and his previous performances in relation to other non stories that he has decided to make all about him are why he gets such flack. Software engineering is not a good field for egotistical people. Also, just because Laravel uses the core of Symfony to run does not mean running a benchmark on it means you are practically running a benchmark on Symfony. There’s a hell of a lot of code piled on top out of the box and if you honestly think that, I would suggest you don’t really know Laravel that well.
&gt; just because Laravel uses the core of Symfony to run does not mean if running a benchmark on it you are practically running a benchmark on Symfony Its pretty damn close once you cut out all of laravel's middleware. The benchmark in the article had Symfony running without sessions. Laravel has sessions by default unless you remove the middleware. It has a bunch of others too like cookie encryption, check for maintenance mode etc. Once you remove that the benchmarks are pretty damn close. And it would be interesting to know what percentage of laravel code running is actually just the symfony components at that point. Surely you can see that the articles results were skewed. And its not just me and Taylor saying it. I'm glad Taylor refuted them because honestly I may have missed it just reading the article. And honestly I wouldn't even had cared that much if I didn't see some weird Taylor Otwell hate happening in the comments. Nobody's perfect but I saw nothing wrong with how he handled this. 
It’s not “skewed” because it never states any different! It clearly states that they are run on the base framework as it comes, out of the box. As I said, neither the article or the benchmark site states these are real world use cases, and most people are capable of grasping this. 
If you don't use the language correctly, it will bite you, yes. Just like with java you use `.equals()` instead of `==` most of the time.
&gt; "Sensitive value"? More specifically passwords and password hashes Password hashes contains a secret salt which alone defeats hash comparison timing leaks, so frankly hash_equals() is not needed here. Straight string comparison operations (like MAC comparison) may benefit from hash_euals().
I may be wrong, but the salt doesn't really have anything to do with defeating timing leaks. Timing leaks are equally defeated by hashing without salt.
The salt (as long as secret and unguessable to the attacker) makes the attack impossible as the input given to the hashing function is not known to the attacker (the input is mangled with a secret, thus it is not what the attacker sends to the target system).
https://github.com/nulpunkt/yesql-php Wrote this at work because I was sick and tired of the normal database abstractions and basically just wanted to write sql when I interacted with our database. I blatantly stole the idea from https://github.com/krisajenkins/yesql which I really enjoyed using on one of my side projects. tldr; small library for database interaction, for people who love sql.
Some flavour of javascript has `function(id) {}.bind(null, id);` But it's a ball ache to use at times
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I dont see how a salt defeats a timing attack. If that's true then send me a reference on it because that's news to me. Salts prevents use of rainbow tables.
It is because the attacker doesn't know what is being compared on the string comparison. This is where timing leaks become a problem: if (token === secret) But when the input gets mangled you can't do, as an attacker, the comparison anymore: if (hash(token, secretsalt) === hash(secret, secretsalt)) Same applies to passwords with salts (salts just happen to prevent the timing problem while they were not designed to do it). Here is a good discussion about this (scroll down a few paragraphs): https://lists.randombit.net/pipermail/cryptography/2011-December/001862.html
Maybe improper file system rights. What are the rights on your session directory? Are you executing this code as the same user your web server is running? 
Hi, as they work in 99 % of all cases, and those rights normally aren't changing i'm pretty sure the directoy rights aren't responsible. I just made an edit, that the session file isn't empty, we try to get the data from the session-storage but don't get null.
Thanks, now I'm with you. This email and its parent explains it better I think https://lists.randombit.net/pipermail/cryptography/2011-December/001861.html
who the fuck is "taylor" anyway?
This might be a dumb question, but are you 100% sure you (or a library you're using) isn't calling `markImmutable()` somewhere? I highly suggest you search your entire codebase for `markImmutable()` and see what turns up. I bet you're calling it in some cases without meaning or realising you're calling it.
"New process for each request" for the I/O model for PHP is incorrect. Processes will be reused for multiple requests. At least if you don't cripple your Apache config.
Hi, thanks for the advice - we have that function once in our framwork but it is never called. And we always do the same routine, that's the huge problem for us and why we cant identify the problem.
mod_php is faster than php-fpm for single requests as it doesn't have the network overhead for communication between Nginx/Apache and php-fpm. I'm not talking about single server scalability, but yeah, hardware is cheap.
&gt; but it is never called Are you really sure about that? Like 100% sure? I would put some logging in above and below the `markImmutable()` call and see what turns up in your logs. I think you'll be surprised...
laravel creator
Larator. *** ^(Bleep-bloop, I'm a bot. This )^[portmanteau](https://en.wikipedia.org/wiki/Portmanteau) ^( was created from the phrase 'laravel creator'. To learn more about me, check out this )^[FAQ](https://www.reddit.com/78ilq0).
Yep we log it now, but we are 100 % sure in that case sadly.
Are you calling writeClose at any point? Let's say, closing the session before downloading a file or anything like that as this will set the session as immutable.
Can you please read the article and verify the number of requests used thank you very much in advance
Yep we were calling writeClose for thumbnail performance, we just quoted it out and gonna test it. // close session. we don't need the session file to be locked for image generation. $manager = new SessionManager(); $manager-&gt;writeClose(); } 
IDE wise, I have yet to find something better than PHPStorm 
Always: PhpStorm, Composer, PHPUnit, php-cs-fixer Sometimes: Blackfire for profiling Coverage: PHPDBG
Sheer curiosity, how does it compare to Zend Studio? We recently switched from Dreamweaver.
phpunit for unit testing, vim for editing (with [ALE](https://github.com/w0rp/ale), [phpcs](https://github.com/squizlabs/PHP_CodeSniffer) and [phpmd](https://phpmd.org/)), git for version control, composer for package management. I'd recommend using [vdebug](https://github.com/joonty/vdebug) as well if you have vim, so you can run an interactive debugger (requires xdebug to be available).
Vim as your primary “IDE”? Get outta here with that bullshit, hipster!
Zend Studio is like a better Notepad++. I never count it as an IDE. PhpStorm has lots of build-in features for complete development process. VCS integration, database management, integrated console, npm helpers, test and debug features, built-in rest api client etc...
XDebug - the most important tool, without a good debugger, you're not a good developer.
I've tried emacs, NetBeans, PhpStorm, Eclipse, Atom. No other editor is as nice to use as vim in my experience. And vim works great for every language I work with, not just PHP. 
Always use strict type comparison. Things get even more interesting if a string starts with a number: (int)'dupa' // 0 (int)'5dupa' // 5 But the string is not empty, so: (bool)'dupa' // true So casting it twice, makes it: $cast = (bool)'dupa'; (int)$cast // 1 
Vagrant, PhpStorm, xDebug, Composer, PHPUnit, PHPVCR, PHPCS, Blackfire, Dash and probably a others that I am forgetting at the moment.
For me, *PhpStorm* being my primary editor, I couldn't recommend it less. Install the plug-ins you need, like phpspec integration, EditorConfig, Symfony integration, PHP toolbox, ... Also using some command line tools for "quick research", like *ag* (silver searcher, a bit grep like) + *sag* (a wrapper to quickly jump into your preferred editor, like PhpStorm or vim), some *git* aliases for code archeology, ... And I'm also hooked on *Dash*, which is an online/offline documentation lookup tool --- If cli apps &amp; libraries count as well: - *composer*, obviously - *xdebug* extension (debugging), a real time (&amp; life) saver :) - *phpspec* (TDD) and/or *phpunit* (unit testing) I also have them installed globally, and behind some bash aliases, as it's slightly shorter to type Takes a small bit to get into TDD, but wouldn't be able to live without that anymore... 
Ignore him. I use the Code Editor in cPanel and it works great. *Nah, I'm lying, you're nuts.*
don't know if trolling or not, but it is possible. I have to admit, though PhpStorm is my primary IDE, I rely on *vim* / *fzf* a lot to quickly jump through matches code sometimes. Also, a remote (staging) server has no PhpStorm on it. So instead of going through a 10+ minutes deploy cycle for a few quick code line changes during "exotic behavior", *vim* would be my go-to there as well... :)
I am really using vim, I don't know why this is constituted as trolling. But apparently even explaining my POV is being downvoted here for not adhering to the popular norm, I guess.
adminer.php for quick database actions.
Wait ... didn't you know that there is only _one_ proper, acceptable editor for everyone to use? ^/s I just happens to also be _your_ favorite editor, but that's just a coincidence.
Nah, I upvoted ;) I have to admit I use vim too, a lot. Just not as my **primary IDE** (on my main machine). And technically, it's just a "text editor", not a full-fledged IDE. Depends on the plugins installed, probably. See my other reply, though ;)
Vim is actually not an IDE, but a dawn good editor, I don't use Vim for coding, but for many other tasks. Use the editor you're the most comfortable with dude. But in my opinion, for someone who did use Vim with an awful lot of plugins and custom config, when the time comes you need a real IDE, Vim is just not it.
Eclipse + PDT + PDT extensions from the PDT extensions group has a nice PHP support, it's not as good as PhpStorm when it comes to external tooling support (I mean PHPCS, Symfony helpers etc...) but regarding the language support, it's very, very good (on par I would say with PhpStorm) - moreover, it's a complete IDE with many things out-of-the box, debugging, supporting both XDebug and the outdated Zend Debugger, it has almost all features PhpStorm has, PHPUnit support, console output support, very complete Git support (and other VCS but it has been a long time I didn't use another than Git); refactoring (yet sometime a bit buggy with PHP, but that's due to PDT and not the IDE itself), very powerfull history compare and restore tools, etc, etc...
That time had never come for me. Been using vim+Unix as my "ide" for ten years in php, node, and python projects.
&gt; Blackfire sorry for the pet peeve but, "you couldn't recommend it more", right?
well, I used it in my previous company. We don't (yet) at my current one. Probably the reason why I forgot it from the top of my head. But yes, that's an awesome tool for tracking down performance issues / bottle necks and such... ;)
Why these many tools? It seems overdoing.
Thanks for HTTP headers I didn't knew these, and for window.opener, is very cool and dangerous(?). I can run alert "hello world" in cross origin pages I guess this will be useful for some clients working in advertising and things like that. 
Yeah adminer is pretty good, lately i've been trying to use phpstorm's db feature more. https://confluence.jetbrains.com/display/PhpStorm/Databases+and+SQL+Editor+in+PhpStorm
Sorry, that is not what I meant, I accidentally tagged Blackfire accidentally. I just meant you said "couldn't recommend it less" when you wanted to say "couldn't recommend it more". :D Either way that is irrelevant for the question here, just me being picky.
oh. Still a nice tool, though. Not sure if it is "must have" for really small projects, like simple PHP websites or small blogs, but yeah... Guess the "less" is a bit too literally translated from Dutch. As in: I would not recommend it less... than anything else. But I get the 'confusion'. Totally not meant in an ironic, or something. So I'll change that. :p
Or you could save the tedious hours of configuration to make it PhpStorm, and just use PhpStorm.
Note that its not yet officially available for php7.2
caffeine
NetBeans, Dbeaver, fish as default shell, git ;)
And sometimes alcohol when you have to read badly written code.
It’s funny because it’s true 😂
Not to mention once you have it connected up it can help you with your SQL queries because it can see what the schema is. 
I wouldn’t call it BS. I went to a meet up a few weeks ago and was absolutely floored at one guy’s VIM set up. When you look at it objectively with the proper plug-ins it’s an IDE. 
Out of curiosity, what was the path leading to this setup? I mean, what was the problem with other IDEs, which Eclipse is solving (or this is a personal preference).
I use VIM for the same reason. The hotkeys also translate between operating systems. I have a really tough time because I develop on GNU/Linux, Windows, and Mac. VIM gets a lot of hate. Don’t worry about the people that are downloading and arguing, they just don’t understand. 🤘
Each of those tools perform a different job. In my last job I used a very similar toolset. 
php-cs-fixer phpunit phpmd 
For me is: - php packages: phpunit, phpcs/phpcs-fixer, phpdebugbar, faker, phinx (for database migrations) - Composer - Git - Vscode / Phpstorm - HeidiSql - Docker / Vagrant (to test multiple envs)
It can be built from source. Works great for me. 
Other than lots of coffee? The first thing would be the latest--or at least a currently supported--[version of PHP](http://php.net/supported-versions.php) * [Git](https://git-scm.com/) * [Composer](https://getcomposer.org) * [PHPStorm](https://www.jetbrains.com/phpstorm/) * [Vagrant](https://www.vagrantup.com/) or [Docker](https://www.docker.com/) * [PHPUnit](https://phpunit.de/) * [Xdebug](https://xdebug.org/) * [vimeo/psalm](https://github.com/vimeo/psalm) or [PHPStan](https://github.com/phpstan/phpstan) 
Vim standalone might not be considered an IDE, but with the right plugins (such as vdebug), you can get all the neat features from an IDE, without the slow startup times, and usable on any OS or machine (even remote) with minimal fuss. Also no need for IDE-specific files to (accidentally) pollute the codebase. I understand vim is not it for many people, if only due to the steep learning curve, though.
Your sexy naked wife is a must.
Hello, we are *not * a form filling or webinar consultancy, but instead we are working on a data security platform that can help automate compliance. However I'm here to to point you to a an easy primer on GDPR, that we hope helps people https://kinant.com/gdpr/gdpr-faq.html
Yes, I can understand your point of view, and I have to agree that PhpStorm has the best support especially when it comes to plugins and tooling ! But I remain with open source software, there's no way I will never use PhpStorm :)
&gt; Just because someone is more comfortable with a shovel than a backhoe doesn't mean it's okay if they use the shovel for a large excavation. I added a small part about that. But it was probably during when you were typing ;) &gt; What I found is that people tend to over-rely on [autocompletion]. True that. &gt; Any computer professional has zero excuse to suck at typing. Once someone can type so that their eyes never leave the screen and their keyboard becomes an extension of their brain, then the idea of saving a trivial amount of typing makes no sense. And though I can follow your reasoning till some extent, I personally disagree on that. I know lots of different types of programmers through the years. Some friends are really great at finding impressive &amp; concise (readable) algorithms for a solution... but are not able to type blindly. Doesn't make them "bad programmers", IMO. Because other people might be able to type faster &amp; blindly, they would hands down spend more time on the same task / issue, and potentially have a lot less elegant solution. It's a bit like comparing apples &amp; pears. And, that's a completely different discussion than what this thread's about / intended, so I'm going to wrap up on that note.
Probably 90% of my work is in the realm of maintenance projects (fixing bugs, extending applications, dealing with performance issues, etc.). From that perspective, if you anticipate that the application you're writing will be maintained by someone else in the future, or that it will lie dormant and *you* will be coming back to maintain it in 6 months or a year, absolutely use a framework. I can't tell you how many applications I've been brought in to troubleshoot, and a major part of the problem was that they were written from scratch with no understanding of proper application architecture. They, over time, became their own homegrown mess of a framework, but with none of the extensibility, documentation, and performance that comes with a framework such as Symfony, CakePHP, CodeIgniter, ZF, or the like. The frameworks out there have already been through the pain of hitting limitations, and being rewritten or refactored to implement the kinds of functionality that is needed for long-term maintenance and applications of any size, and have been peer reviewed in a sense by thousands of developers all over the world (many of whom are far smarter than I am). Now, do those frameworks vary in complexity? Yes. The problems you're solving out of the box with Zend Framework may be way overkill for a small application, so something simpler may be in order. Slim may be exactly what you need, or it may not. You have to pick the right tool for the job (being familiar with the different frameworks helps).
From the original comment it doesn’t sound like it “just works”. I’ve used both Eclipse and Netbeans in the past and it was an awful experience.
So people who don’t like or use Eclipse are stupid. Got it.
&gt; Some friends are really great at finding impressive &amp; concise (readable) algorithms for a solution... but are not able to type blindly. Doesn't make them "bad programmers", IMO. No, they're not necessarily bad programmers (and I have worked with the same sort of people), but being a bad typist isn't why they're a good programmer. :) Nobody is worse off by being a better typist, and what skill is more fundamental than that? And the thing is, it's not that hard to improve. I tell people all the time, there are only a couple of secrets, and secret #1 is don't look at your fingers, look at the screen. Secret #2 is put stickers on your keycaps so you can't see the keys and not be tempted to look at them. Most don't listen, of course. I did this with my son when he was about 13 years old and he's like the fastest typist in his high school. Ah well.
For me, it's because Eclipse has good support for a variety of languages that I regularly use. Jetbrains products don't (like PHPStorm, built on their IDEA core IDE with plugins similar to PDT). The Jetbrains products do have nice support for React debugging that Eclipse lacks at present.
Nobody else using VS Code? I was using PhpStorm but I find VS Code much more enjoyable and snappy. I'm sure it lacks plenty of the advanced features though. 