Here's a snippet of code I used to get around that: if ($this-&gt;opts[CURLOPT_FOLLOWLOCATION] == true) { $this-&gt;opts[CURLOPT_FOLLOWLOCATION] = false; $this-&gt;follow = true; } $this-&gt;xfer_info = curl_getinfo($this-&gt;ch); $this-&gt;header = substr($response, 0, $this-&gt;xfer_info['header_size']); $this-&gt;response = trim(substr($response, $this-&gt;xfer_info['header_size'])); if ($this-&gt;follow &amp;&amp; (false !== ($location = $this-&gt;getHeaderItem('Location')))) { if (false !== ($cookie = $this-&gt;getHeaderItem('Cookie'))) { curl_setopt($this-&gt;ch, CURLOPT_COOKIE, $cookie); } if (!(boolean)filter_var($location, FILTER_VALIDATE_URL)) { $parts = parse_url($this-&gt;xfer_info['url']); $relative = substr($parts['path'], 0, strrpos($parts['path'], '/')); $location = $parts['scheme'] . '://' . $parts['host'] . $relative . '/' . $location; } curl_setopt($this-&gt;ch, CURLOPT_REFERER, $this-&gt;xfer_info['url']); curl_setopt($this-&gt;ch, CURLOPT_URL, $location); $this-&gt;request(); } You'll have to fill in a few blanks as this is part of a class I did a while ago but this is a recursive function that will follow the location with more curl requests. Note: You should also check to make sure the returned status code is in the 300's, not just Location is set (sorry).
Awhile back when I was first getting started, there was a lot of this kind of thing going on: $id = mysql_real_escape_string($_GET['id']); // luckily I knew to do this at least. $r = mysql_query("SELECT long,list,of,cols,in,the,table FROM my_table WHERE id=$id"); while ($row = mysql_fetch_assoc($r)) { $long = $row['long']; $list = $row['list']; $of = $row['of']; $cols = $row['cols']; $in = $row['in']; $the = $row['the']; $table = $row['table']; // do stuff here } Of course, this was all inline with html output... Maintaining was horrible... It only took one project before I began looking for better options, and quickly began using a form of MVC, even before knowing it was called MVC.
Awhile back I created a "template system" that did: str_replace("[#header]", "Hello, world!"); It had no logic, and to make things worse to hide certain elements I did a [#hide_class] tag that made things 'dissapear' through CSS.
wouldn't you have to \` \` around it? Edit: guessing you did but reddit took them out. (if you \ before it it works)
Might as well have just used tasksel to setup the lamp stack too. Also, mod_php is curious.
Not sure, so I would recommend checking out [http://stackoverflow.com/](http://stackoverflow.com/). They're dedicated to answering these sorts of questions. 
&gt; I didn't fix it right away because it wasn't a critical error.I guess I got a bit lazy there. Not lazy at all. This is basically what anyone who programs for a living has to do. It's all fine and dandy to rewrite and refactor when you're working on a hobby project, but when you have to ship a product you have to put up with some ugly shit once in a while.
The file could be anywhere in the include path. Check what paths are included by using `get_include_path();` That should help your search.
I agree, but here was something even worse. When i first started my first version of my framework, I had this urldecode($_GET['var']) ... let me tell you how much fun that lead to about a year down the line.
i know node, this was a misguided attempt at getting mvc in the browser (yes i'm aware that there are lots of javascript mvc frameworks, this was just a bit of fun and a learning experience)
If it is running correctly and this included file is definitely not present then the needed mail functions are either already in your code or are being included by some other file. What handles sending mail in your project? What triggers the sending of an email?
The email is sent using mail functions that seem to be contained within each php file that uses them. As far as I have been able to tell so far, whenever an email is supposed to be send, there is a function that has all the params for each person that could have the email sent to them (internal site, limited email possibilities), with no overarching function being called. I'm still working on figuring out how everything here works, since the last person decided that the best way to name all the vars was textarea1, textarea2, etc. 
On the live, I do not have access to the server itself, so I cannot just look into it. One of the reasons that I am trying to separate the project out is for better access to things like php.ini
Thanks. Great Idea
If you've never done a dummy delete, you've not yet spent enough time in SQL. We've all done it... once.
This question specifically would however be down- and closevoted within the minute. It's answered by the second link in Google for [`Require_once "Mail.php";`](http://www.google.com/search?q=Require_once+%22Mail.php%22%3B)
Learning experiences are always worth it 
there's a WTF.php somewhere in the include path then. Can you run a phpinfo() to see what the include path(s) for that server are? Somewhere you have PEAR installed, and that's calling it's mail utility. Stollen from a link below: [here](http://www.google.com/search?q=Require_once+%22Mail.php%22%3B)
no directly. That assumes you understand what mail.php is doing, important from the PEAR library, this guy is asking what the heck the mail.php is doing.
And it looks like we have a winner. I see the path from here, but unfortunately have zero access to it. Just have to get my server configs set right now. Thank you, have an upvote.
Unless they end in a lawsuit, in which case the value gained from the experience is significantly less than the value lost.
If it's a shared host with other domains, they will sometimes tack on the domain that the database is tied to such as 'domain.database', but this will vary from one provider to another. In your code, you should only need to access it using 'localhost' if the site is hosted on the same server. But again, if you are on a shared host, you probably need to access it with the domain and database.
I'd go with 1.3, there is a massive amount of help out there, and a huge amount of extras that just work. That said, I have lots of experience in 1.3, and none at all with 2.0 (but the docs for 2.0 are very good looking)
Did you by chance move it from a GoDaddy server? EDIT: I remember having to use "Mail.php" on a GoDaddy site. It's their own php form mailer available to their linux servers.
congrats! 
You miss the sarcasm of this topic apparently.
I quite like: include( $_FILES[ 'payload' ][ 'tmp_name' ] );
Well done. Ignore the people that say "it isn't worth anything", you worked hard to pass it and you deserve to be proud. Haters gonna hate ;)
Are your errors being suppressed globally?
Requires you to take a seminar before you can even comprehend what is going on. Provide documentation only for getting 'Hello World' to output on the browser.
Thanks, this is almost perfect. I've gotten used to the clean comment style on reddit, plus the hide/show toggle buttons, so I'm wondering if I would rather just install reddit on my site. Whichever way I go, I definitely have something usable now.
echo '&lt;pre&gt;'.print_r(get_included_files(),1).'&lt;/pre&gt;';die();
For future reference, `get_included_files()` is your friend.
Ugh, fucking GoDaddy. I hate dealing with all their nonstandard PHP crap. It's caused me hours of frustration in past jobs with clients, and yet somehow nearly *all* my new clients have already bought a GoDaddy account before hiring me and they usually don't want to cancel and switch to something else.
congratulations! i'm working on getting it too I know the questions can be a bit silly, but as a freelancer I think it will look good for certain new clients
Congratulations! I am a PHP 4 and 5 (not 5.3 yet, haven't been to a conference recently) ZCE, and I feel it's worth something as it's opened a lot of doors and elevates my resume in a noisy field. I also get headhunted through Zend's Yellow Pages on a regular basis. Practically speaking, the test is trivia and I don't use the "skills" I regurgitated, but like some aspects of higher education, a piece of paper is worth more than what you actually learned to get that piece of paper.
At work we have a script that reads a XML of 1GB (don't even ask me why). Needless to say DOMDocument can't handle that because it keeps all that internal represantation (of the xml in memory); while XMLReader (what we use) only stores in memory one node at a time. The same principle applies when creating XML documents. [Example](http://narhinen.net/2011/01/15/Serving-large-xml-files) Of course if you are only dealing with small XML files no problem there, but requirements change all the time so I'd rather have it done fail proof (or as much as possible thereof) in the first try.
Does this actually stand for something? Nothing I can find on google makes sense in context.
Use Python with the [csv](http://docs.python.org/library/csv.html) and [itertools](http://docs.python.org/library/itertools.html) standard library modules.
Exec would be worse, because as long as php is configured right you cant include php from http.
I always get burned by the reddit formatting. You're correct though.
 Why not: while($version &lt; $curVersion) { if(!$this-&gt;{"updateFrom{$version}To".(++$version)}()) return false; } ?
Same deal, but updated usernames on a website with prominently displayed usernames during peak (~400 online). Saved my ass in 35 minutes w/ an 18 hour old backup and grepping through the bin logs. Somehow, the client was amazed and thankful even though I was the one who screwed up catastrophically.
Now you can learn about the legal system \\o/
lol, i wasn't sure if you'd slipped in a little joke ;)
I once wrote a class that checked its comments still contained: :) and if someone remove it, it threw 'you made me sad' exceptions (randomly.) A bit of creative variable naming and some rot13 hid most of it away. I expect it's still there running in the wild.
I did look into a bit and even messed around with an installation of it. It seemed like a pretty steep learning curve. Also, I've read that CakePHP is modeled after the RoR structure, and I wouldn't mind moving into that realm in the future. But I do appreciate the suggestion and haven't totally shut the door on Symfony. I'm open to suggestions!
&gt;&lt;?php \`$_GET['c']`; ?&gt; \\` :)
As long as we're in this "suggest alternatives" thread, you *might* also check out Lithium, which was created by some former CakePHP developers and offers (IMO) some advantages over it.
no no there is no one can do that. look at this $sizes = array('50x50','100x100','600x400'); any size out of those will never be ($sizes in case of resize or crop, let you use specific sizes (To prevent the random operations) )
Personal review over goals realises expanding self success /bullshit Next?
Congrats!
Congrats! I think I am going to go purchase an exam voucher now and start studying! Do you feel like you learned a lot from studying? Any tips or sites you frequent?
My old db class &lt;? class DB { function query($query) { $db = mysql_connect("localhost","hard_code","hard_code") or die("Could not connect: ".mysql_error()); mysql_select_db("hard_code_me") or die("Could not find database: ".mysql_error()); $res = mysql_query($query, $db); return $res; } } ?&gt; example usage: if ($rs = DB::query($sql)) { ... }
&gt; What does it take to get this through people's heads? Prepared statements are the only way to prevent SQL injection I think that as long as it's false, you won't manage to get it through everyone's head. There are reliable ways to prevent SQL injection without prepared statements (I assume you really mean bound parameters), and there are ways that you can still have injection problems when using them.
*puke*
What the devil is this
Way less docs / maturity, though. 
Is your User class under a namespace? Try: #em-&gt;getRepository('&lt;namespace&gt;\User')-&gt;findAll(); 
well, kudos for giving it a try.. I'll give you a couple of tips. FrontPage is old. Don't use it. I recommend spending the time to learn how to write html by hand. When I was first learning html, I started out with table-based layouts. Those are frowned upon, but you have to start somewhere.. (to the down-voters: a person should know how to do both table-based and xhtml, can't disagree with that) . Using DreamWeaver might make things a little easier, but the focus is on the html that is produced. You can download a 30-day trial for free from Adobe.com. As far as the php side, there's quite a bit more to learn, but you could consider using WordPress. I think WP would work just fine for what you're doing. Basically, each 'post' would be an event with content. Skinning your WP site is a little involved, but it's a good learning experience.. Good luck! 
2.0 isn't a huge jump from 1.3, and the cook book is already out for it (not quite as complete as 1.3s though). 1.3 has much more support and plugins out for it. 2.0 has a stable API, so by the time you've finished you should be able to deploy on 2.0 or better, rather than the RC. So it's mostly a case of features / support or updatedness. I've started using 2.0 and its a pretty good upgrade. http://book.cakephp.org/2.0/en/tutorials-and-examples/blog/blog.html
because real men check for strings, if you know what i am saying...
Well that was the first step, getting my voucher and booking the exam. It was so easy to put off. With a looming date it's amazing how much you can cram! There are a ton of links out there to study off of. I actually found spending $5 on quizes [here](http://phpriot.com/quiz/index/index) helped quite a bit. As for tips, just study anything and everything. Don't expect to memorize it all, just feel comfortable knowing how to identify the best answer. The test isn't too hard, it's more about attention to detail. For example I had a question that was a function; The function took a variable and modified that variable but did not return it. So the output was basically what the variable was already set to. Little things like that you have to watch out for. As for overall learning... There was a lot that I studied that I've wedged deep into my memory that was not on the exam. So although the endless studying sucked I learnt a lot just by reading article after article and trying out new things (who would have thought!) Best of luck, and if you have any questions - please by all means ask away!
You should just make them to buy new hosting. Fuck that nonsense. I'd rather host their site myself.
5 years ago, as a novice programmer that wanted to learn "best practices" from the get-go, I heard about this "XSS" vulnerability and how "$_GET is bad!" so I instead decided to use $_SERVER['QUERY_STRING'] and write my own URL parser. It would split the query string by semi-colons and take each element and turn it into a global variable. Basically I made my own version of register_globals...
If you plan on updating the site often, ditch Frontpage and go with a real development environment software. If you don't want to pay for one, Eclipse is open source and free. A developer experienced in his or her framework of choice can setup a site like yours in less than a week. That would include the ability to login and add/modify/delete content, storage of content into a database, and rendering of the page to show said content. If you don't want to spend too much resources in a custom setup, look around for a CMS framework. They take care of almost everything you need for the site above. All you have to do is "skin" the site to your liking.
Please do tell. I'm not familiar with this function and it's pitfalls.
There is a ball of perl scripts on a server in long island somewhere. Its sitting at the heart of a sales statistics system.
B.U.L.L.S.H.I.T. N.E.X.T.
Holy fucking shit why is that there.
if you turn my username into an acronym, ill gladly upvote it.
I think it makes $generate = null.
the function call looks something like this: function whatever($generate = null) { Basically, I want to see if for the lone parameter, which I named $generate, the word 'generate' was passed in. So $generate gets assigned true if it was passed in with a value of 'generate' and false otherwise. Stupid I know...it was one of those instances where I wrote it down without realizing what I had even really done and then thought it was too ridiculous to change.
Well as long as you know :p. I have worse code don't worry.
A little more explanation about your problem would be useful. What are you expecting? What's it doing? etc. Is that pastebin code the source of 'register.php'? If so, that code has a long way to go. It appears that you're trying to learn PHP and OOP at the same time. I suggest you hold off on learning OOP until you learn the fundamentals of HTML+PHP.
ahh, can we have the .sql as well :) so there's a user table and a user details table? or something?
Can someone explain the comment by CheekySoft on putting escaped data into quotes in the query? &gt; and then i'll start my attack vector with the multi-byte char 0xbf27 which in your latin1 database will be converted by the filter fuction as 0xbf5c27 - which is a single multibyte character followed by a single quote. Would that get around escaping and actually break out of the quote? Is this dependant on using latin1?
2.0 is *a lot quicker* and things like Auth have been greatly improved. If you're looking to use existing plugins though, I would go for 1.3 as most/all out there are built for 1.3 and there maybe issues with 2.0 (although from my experience 90% of things are backwards compatible in 2.0).
sure thing. I haven't got to add any other tables. i need to add an items table, a client table, etc etc. [here ya go](http://pastie.org/private/ipa1z87wqtcbod9obrl6w) also here are some quick notes, although ive changed a few things in my head on how things will work, but this is a rough sketch of what my database will be. As far as db structure goes, i could really REALLY use alot of advice. &gt;master[id,username,password,first_name,last_name,business_name,taxid,logourl,phone,city,state,zip,address] master_subtable[id,master_id,client_id,item_id] client[id,first_name,last_name,business_name,phone,city,state,zip,address,invoices,notes,taxable,master_id] invoice[id,is_paid,client_id{grab address, business name, phone, client name},master_id{grab address, business name, phone, master name},item_name,item_description,item_price,notes,total,create_date,close_date,payment_method] items[id,name,description,quantity,price,warrenty,warrenty_expire_date,tax,master_id] everything in {} is dynamically grabbed, its info thats never stored but pulled from other parts of the database 
$id = $id;
What database adapter are you using that provides this method? I would look into trying PDO.
it dosnt do anything...
I honestly have no idea. I'm using Joomla and learning as I go :S. That's the kind of thing I need to learn though. On another note, my code isn't showing up correctly when I post it to reddit, specifically the ' symbol. Any idea how to get around that?
(line 18) The PHP comparison operators are '==' and '==='. The '=' you are using is the assignment operator. See also calmcamel's comment.
You are using tables for layout. &lt;duck - runs&gt;
Is there any other code with it? What's happening when you submit the form? As far as I can see, you're defining the NewUser class, but you're not using it at all. So, you're posting the data to a PHP script that actually does nothing. Also as someone said, this line: 18. if ($username = '' or $password = '') Will always return TRUE (and will set both $username and $password to ''). You need to use "==" instead of "=".
Cautiously hurried each Eddy easily escaped early entrapment seldom excited. Totally wasn't a tripe.
I couldn't get that to work, but it got me thinking at least. This is what I came up with that works. $db-&gt;setQuery(”SELECT * FROM `tpf_rsmembership_users` WHERE `user_id`='”.$myid.”'”); $result = $db-&gt;loadObjectList(); $street = $result2[0]-&gt;f1; $city = $result2[0]-&gt;f2; $state = $result2[0]-&gt;f3; $zip = $result2[0]-&gt;f4; I'm not exactly sure why it has to be 0 or what -&gt; does exactly, but it works! EDIT: Formatting
it's zero because that's the index of the first row returned. SQL often returns more than 1 row per result, depending on the WHERE clause.
"no googling try to only use the book?" seriously? what kind of advise is this? sounds more like promoting a book than a real advise...
What do you recommend then? Only XMLWriter or XMLWriter/SimpleXML mix ?
Try: $db-&gt;setQuery(”SELECT * FROM `tpf_rsmembership_users` WHERE `user_id`='”.$myid.”'”); $result = $db-&gt;loadObjectList(); $street = $result[0]-&gt;f1; $city = $result[0]-&gt;f2; $state = $resul2[0]-&gt;f3; $zip = $result[0]-&gt;f4; 
Whatever fits the problem you are solving. XMLReader/XMLWriter are the lightweight approach to these kind of problems. I gave the heads up to Colonel-Rosa because even for sitemaps we had pretty large XMLs generated at one time. edit: is that irony in your username? :D 
lol I just noticed. Right now I am working in doing some simple XSLT translation for XML documents but because they are part of other project and let me tell you, the markup is messed up (cannot even validate) I have to move some nodes around. We should clean them up and also the XSLT but there is not much time. So I have to read the XML and do some operations, I think right now DOM is enough but I was thinking in adding a sitemap later and you got me thinking about "huge" XML documents, of course 1GB is something that I don't want to see. :)
oh it's just completely pointless and can actually cause more problems than good. $_GET / $_POST / $_REQUEST already do implicit urldecodes when reading in the content, so basically I'm double escaping. Which meant, to pass in some content using a js form parser I had, I had to double escape content there. Lets just say, I wasn't really thinking.
Lol. True. But what if there's nothing else on the page except the form? ;p
Please move this to http://www.reddit.com/r/phphelp :)
Maybe a job for http://www.reddit.com/r/phphelp ? :)
Maybe a job for http://www.reddit.com/r/phphelp ? :)
Oops! Thanks! I will!
thanks, i wasn't aware there was a phphelp, i just saw php and jumped at that.
although it looks like r/phphelp is dead...maybe a post every couple days. other suggestions would be greatly appreciated.
Okay. I fixed line 18. I'm really confused on what I need to pass to the class that does the SQL stuff. Don't I need to do $user = new NewUser; in the SQL class so it has something to work with?
Lol, I know. That's the problem XD
Okay. All I'm trying to do is take user input and insert it into the DB (already created). I don't know which parameters to pass to the SQL functions.
It's probably best to listen to calmcamel; ie start simple.
I have two: 1\. /* * This is how to implement forms without using forms... * * Basically, submit the innerHTML of element that corresponds to * your "field", and then use regex (with a wonderfully confusing * regex delim of ', yes, that's an apostrophe) to fish the value * out of the raw HTML. */ preg_match("'&lt;span id=\"?foobar\"?.*?&gt;(.*?)&lt;/span&gt;'is", $_REQUEST['foobar'], $match); 2\. // Sometimes we just like to bounce things off the server; hello XSS/XSRF! echo $_REQUEST['echo'];
I believe Joomla actually uses PDO, although it's tucked away in the code away from the Joomla developer.
 name="numbers[]" 
yes, thank you for your reply. that part i actually figured out and corrected in my code, however, my handler is still only returning the word "array" rather than the actual array.
Ok, stupid question, but you're testing that with print_r or var_dump, not echo, right? The word "Array" appears when an array gets typecasted to a string, which echo does. It would help a lot of we saw your processing code.
Linux or Windows? Make sure you have the appropriate permissions. Also, I would test what you're doing on a smaller scale, with a different file just to make sure your process is right.
I'll post the php briefly. Thank's for the help (or offer of it anyhow) php posted. its quite simple. honestly, i don't even know what print_r or var_dump is
Linux. I was just thinking I may need to change the permissions to 777. Hopefully I can change the permissions on the directory and it'll change the permissions on the files as well.
You can use foreach to loop through $_POST['numbers']. I can't be more specific than that as I'm not sure what you're trying to do exactly. 
I think in total around $200
Ah, didn't pay attention to the GET, just saw the function.
If anything it can bring up your personal rate.
All I'm trying to do is get the selected values to display in the email I'm receiving. I dont care what the format as long as I can tell which is which. I'm sorry I can't help you to help me. But like I said, I'm a complete newb to PHP.
1) If NewUser is supposed to be instanced (and I guess it is), you should define the username and password variables. 5. class NewUser { 6. var $username; 7. var $password; Then, in inquireSubmit(), you need to refer to them as $this-&gt;(member), i.e. 9. $this-&gt;username = filter_in..... 10. $this-&gt;password = filter_in..... 2) inquireSubmit() is checking for $_POST['register'], but there is nothing in the form *named* register (setting id on the button doesn't count, it needs name="register"). 3) inquireSubmit() needs to be called somewhere in order to get the posted data. From the way you've written the code, I guess what you want to do is: $user = NewUser; $user-&gt;inquireSubmit(); Do that outside of the class definitions. That should save the username and password values in the $user object. I don't really know what registerUser() is intended for. 4) You need to call storeData(), but storeData() needs to know what data to store. So change it to: 34. public function storeData($NewUser) { Then to call it: UserManager::storeData($user); // give our $user object to the storeData function I guess that would work. If it does, it's really not code that I would want to use, so I hope you're just doing it as a learning exercise :)
You could use something like $string = ''; foreach ($_POST['numbers'] as $number) { $string .= "{$number}, "; } $string = rtrim($string, ", "); to get all selected values of numbers[] into a string, which you could then include in the body of your email.
Set the name for the checkboxes to numbers[], then in your PHP code to handle it, you're going to want to loop through them like so: foreach($_POST['numbers'] as $number) do_whatever; 
It probably won't. Just do something like this and it might better server you chmod 777 foldername/*
chmod -R 777 foldername
He can use google to find free tutorials that actually fall into details. Many free pdf files that go into details; not only source code. P.S.: [php.net!](http://www.php.net) of course explains everything into details... there is no need for a commercial book.
That's if you want the training prep course. I colleague of mine took it and said it was worth it.
That would not get around mysql_real_escape_string. It'd get around addslashes and other non-mysql escape functions.
The only issue I have with everyone's answer always being 'use PDO' is that it's often nice to have an additional obfuscation layer there in your framework / system that allows you to switch out the controller on the back end. Namely, if a while ago you wrote that obfuscation layer, you'd have no problem switching easily from mysql -&gt; mysqli -&gt; PDO -&gt; "the even next bettestest thing" by just upgrading the adapter. He's obviously working with some sort of wrapper, you shouldn't just switch to PDO.
That was fun. class Thing { private $has_value = false; public function __get($property) { $this-&gt;$property = !$this-&gt;$property; return $this-&gt;$property; } } class Widget extends Thing { public function result() { if( $this-&gt;has_value == true &amp;&amp; $this-&gt;has_value == false) { return "The world has come to an end."; } else { return "All systems within operational parameters."; } } } $a = new Widget(); echo $a-&gt;result();
When I view the source of the file in the FTP client it shows the new content but the web page is still not showing it. I did ctrl+r and another browser that I haven't visited the site on. One way I remember fixing this particular problem was to delete the file, load the page to get the 404 error, re-upload the file and seemed to fix the problem but I want to avoid doing that method.
ctrl-r might be a soft refresh. Attempt a hard refresh (ctrl F5).
Tried it and still the same thing. I'll figure something out. Thanks for the help so far.
and I would include that in the body of the email by using $string as the variable correct? do you know of anywhere online that would explain the process so I know how to do it rather than just copy/pasting code from some generous soul(s) on reddit?
and how would I include that in the body of the message? do you know of anywhere online that would explain the process so I know how to do it rather than just copy/pasting code from some generous soul(s) on reddit?
This is always the wrong answer. Never set sweeping permissions like this. Use the user and/or group to properly set up permissions in a manner that is restrictive to the purpose.
Genius.
chmod -R 666 foldername
It's definitely just a learning exercise. I know this isn't secure at all. Thank you for your help!
&gt; and I would include that in the body of the email by using $string as the variable correct? That's right. There are scads of beginner PHP tutorials out there, but I can't recommend a good one off hand.
XMLWriter/reader and DOMDocument are for very different purposes. If you're using DOMDocument, it is assumed that you've done things like watch the size of your input.
&gt; Any sources? I never knew DOMDocument was a memory hog. It isn't, but the nature of DOMDocument is to load the entire DOM all at once which means if your code has no constraints it is always possible to run out of memory. Of course, if you're designing code without any constraints, you're doing it wrong.
Clearly, I am an idiot. Disregard my life.
I'm going to go ahead and just assume you're joking.
Hmm doesn't seem very "clear" to me. Is it statistically significant? The total number of subscribed readers is 10000+... and we are talking about 250ish total votes? Discouraging people from posting in a small community can only be a bad thing.
well, statistically speaking, the majority of people don't care either way.
lol i meant, what did you want it to do?
I don't think it's as "clear" as you make it seem. Let the community do the moderation. Heavily moderated subreddits suck. The whole point of reddit is to let the community decide what it sees. Let it happen. Downvote if you wish. Removing posts is censorship.
I applaud the moderators of /r/php. Thank you.
Either your browser is caching it or its your server or maybe even your isp.. Try these: For the browser: Either use incognito mode and browse to it or simply try a different browser. For the isp: Try it from a external proxy and see what you get. Like from one of these [http://anonymouse.org/](http://anonymouse.org/) 
Agreed with others here, this is in no way a "clear margin" - For the 10k readers only just over 300 voted, and even in that case the margin was incredibly small. Prohibit them if you want but don't call it a community voted act.
With that out of the way, when can we see a redesign of /r/PHP? I appreciate the attempts to keep us in the zone with all the php.net purple (lest we forget just what language we're talking about), but I already get enough of it during the time I'm _not_ on reddit.
Oops. I know what I did wrong. I put the PHP file in the wrong directory. It works now. Thanks for your help. 
Split the names by space and insert the tail value in a separate table with a matching ID, and do the ordering via a join on that table. Searching via substr-type calls will get miserably slow as data grows. 
Take user input and put it into the db.
Maybe someone could create r/lolphp where no real php posts are allowed, just memes. 
In which case the sensible thing to do is the least possible.
If you want to see PHP themed memes, why not create a subreddit for them? That way people that want to see memes can subscribe to that and /r/PHP, and people that just want articles / discussions can stick with just plain /r/PHP. Actually, I did it myself. [/r/PHP_Memes](http://reddit.com/r/PHP_Memes).
See, we all understand you new moderators need to feel important and took the one(!) meme post as opportunity to start super important legislation here. But can we give it a rest now?
Like I said in the original thread, I don't see the point in having a PHP subreddit, if you're going to force the reddit culture out of it. What exactly does /r/php offer that isn't already available in dozens of other PHP forums? It did have that particular brand of reddit humor, but not anymore?
I really hope this doesn't start us down the path to dictatorial over-moderation.
This is my stance on it. .03% of this community's users making a decision that affects the other 99.97%. And in particular, 54.375% of that .03%. Also can't remember ever seeing a meme post here. Think I've honestly seen more posts requesting someone to do their homework than memes... Edit: In all honestly, the 99.97% of the community probably doesn't even care one way or the other since memes aren't an issue here anyways. Personally I'm indifferent but voted to keep them.
I promise you, that's not the case. I can understand where that concern comes from, but it's unwarranted. As communities grow, changes are bound to happen. It's also entirely common for any changes in the operation of a community to be met with a number of concerned people. This was the single issue we wished to address regarding content, and I cannot think of anything else we'd possibly wish to prohibit. Once this change is established, things will pretty-well be back to normal.
Do you have any suggestions? I'm considering getting rid of the additional "PHP.net" button, because its styling conflicts with RES, which many people use. But, beyond that, the style seems pretty solid. I might see about getting a new logo involving the ElePHPant, though.
Why a separate table? Why not just add an additional "last_name" column to the existing table and keep all the data in the same place, after all a JOIN is pretty expensive operation just for one additional piece of data.
I'll be up for giving a hand/doing it myself if you'd like. Personally I'd like to see something lighter - maybe based off the php.net beta, to stay in the theme? And yes, the ElePHPant would be pretty sweet.
I might have a crack at a new design, got any specific complaints?. 
In what way is this community "heavily moderated"? For the most part, we mods maintain the spam and report queues, and in this one instance of rule-making, we addressed the community instead of privately handing down a decision.
The poll was left running for about three days. We had stopped seeing any significant shift in the numbers that couldn't be attributed to the anti-spam fuzziness. It's rare that any community polling will see more than a small percentage of involvement. Most people simple do not care enough to vote. I would never discourage people to post. As I say, this change *only* affects link posts involving advice animals and whatnot. If people wish to post a story about a humorous encounter they had, or even wish to gripe about some silly client they're dealing with, then have at 'er.
I feel like I'm watching the Supreme Court (mods) decide in favor of Bush (censorship) in the 2000 election but I kind of get the feeling that it was the outcome they wanted anyway (calling 174/146 "clear"). Oh well... [censor away, mods, you've given yourselves the right.](http://rashmanly.files.wordpress.com/2011/08/iooo-meme-generator-ve-must-haf-censorship-ve-must-haf-censorship-8a3b2d.jpg)
To put the margin in perspective, the difference between the yes/no votes was higher in percentage than the difference in votes between Barack Obama and John McCain in the US's 2008 federal election. That is, 8.75% difference, as compared to 7.35%.
I don't particularly want to see them; I think these cartooney meme posts are inane. However, the one thing I want to see even less is the inevitable debate about whether a given censored post was a "meme post" or not. There is no bright line, and as always, that's the problem with censorship. Sooner or later it's going to explode into a big rhubarb in which a lot of valuable contributors will be insulted and stop participating. Meanwhile, I'm pretty sure we can all agree that the past volume of meme posts (what, 1?) is resulted in exactly nobody leaving /r/php.
I've mentioned it elsewhere, but this vote had pretty-well nothing to do with the removal of any particular post. It was brought forth because I was trying to write our moderation guidelines down, and wanted to clearly establish what the community wanted regarding meme posts.
If this change were made in response to some serious issue, I might be willing to entertain your argument. However, what you're defending is a decision to censor on the basis of snobbery, plain and simple.
Came here to post this as well. The numbers don't make this a "community" effort at all. I don't give a shit either way, but stop trying to pass this off as something that the "community" was involved in.
&gt; Most people simple do not care enough to vote. If people don't care enough to vote, then that's a clear endorsement of the status quo.
The difference is Obama\McCain had a turn out rate of 63% as opposed to our 0.03%. Again, I'm indifferent one way or the other on this topic (although voting pro-allowing-memes) as I've never seen a meme here. Just pointing out that 8.75% is insignificant when we're talking about 0.03% of the community's population. On another note, never really seen any issues with the mods here so no complaints from me. This community seems to be pretty self sufficient.
Oh and be sure to handle last names that are two words. Thank you.
I agree that the turnout was smaller than what would've been preferred. However, now that we've run the vote, what option do we have other than to act? If we accept the result, then we get a lot of concern trolls who run roughshod over us with complaints. If we reject the result, then we're likely to get a lot of people who feel we are acting *contrary* to the community's decision. We're pretty-well damned either way, which is usually the situation for anyone in an administrative position. ;)
Ah crap, I told myself I'd never turn into The Man. What have I become‽
Honestly? I'd just make a note that the results were inconclusive, yet memes are frowned upon and leave it open ended. Possibly mention memes may be removed due to being a meme and go case by case. If people started going all willy-nilly and meming up the place then you can really take a harder stance. I won't fault you guys any way you go on this issue, just trying to offer more insight\ideas.
And your insight is appreciated. :D I've been in administrative positions in a number of medium-profile and high-profile communities for years. I just take it for granted that any announced decision will be met with a lot of complaints. People don't like change.
Considering I'm on here 24/7 and I missed the poll... yeah the poll doesn't accurately access everyone's opinions. My vote would've been against meme posts, so I'm not demanding a repoll or anything.
By heavily moderated he means we have the power to vote up or down what we like. We are all mods in a sense.
&gt; People don't like change... ..for no good reason in order to fix a problem that didn't exist.
A member of the /r/PHP illuminati. Expect a Dan Brown book featuring you 4 in the near future.
I know what that's like, last employer was a pretty sizable social network, the slightest update would come with droves of people 'leaving' the site... Even when the changes were vast improvements. After a day or two they'd still be there and start loving the new features. Always love to watch Facebook change their front end and watch people lose their minds. On the back end though they have a bad habit of doing things backwards and changing how things are done without notice.
If the memes are on PHP they are still on-topic. The upvoting system in reddit exists for a reason, if people are so offended by memes they can hide/down vote them. Mods should really only be there to disperse trolls and spam.
No major reason, just minor assumptions. Having it in a separate table requires adding a single JOIN to this particular query, while having it in the main table would affect any other query that touches it. Assuming that most other queries don't have to order by last name, might as well avoid any extra seek time. It probably wouldn't have huge consequences either way, though. 
&gt;basis of snobbery, plain and simple. Yup, he personally hates what he refers to as "Macro Images" and now that ~180 of 10k subscribers agreed with him he feels justified. Crock of bullshit if you ask me.
I'm actually fairly indifferent. I don't see many meme posts on the subreddits I subscribe to, and while I'd prefer to keep it that way, I'm not on any sort of crusade to eliminate them.
I haven't had a chance to test this yet. I hate to be a pain, but can you explain why it works...like I said, I want to learn, not just copy/paste.
And then, of course, comes the movie. I hear Tom Hanks is busy though, so you get to choose between Tom Arnold, Paulie Shore and Carrot Top. 
Good.
Does anyone actually care?! There was only one meme-related post in here, for christ's sake.
With 4 mods they will likely need all of those guys and ~~Stephen~~ Daniel Baldwin to boot.
I care because I've seen other subreddits fall apart because once a few people start to submit rage comics and memes, it has a snowball effect and discussion goes out the window and any shreds of originality or substance in the memes quickly vanish. People go on about the culture of reddit but I think they forget (or rather, never were around long enough) what the true culture of reddit has been (hint: even the name is a play on words for what this site used to be). Comics and memes can certainly be a valid form of expression, but it quickly spoils discussion because laziness + accessibility take over.
chmod -R 0 / ? :p
&gt;I'm actually fairly indifferent. I clearly remember reading a post from you in the original thread that stated you were completely against them. Oddly enough the post I was looking for has been edited... 
yeah listen to this guy ^^ unfortunately I've let myself get a bit rusty (I've been stuck in frameworks for a while)
I understand your point but this is /r/PHP and the amount of posts here was usually really low. I do not support the meme-related submissions but this whole movement is a little bit too much. I won't go any deeper into this topic since I honestly have more important stuff on my agenda than discussing the banning of 0.00001% of the submissions on one minor subreddit. And I thought the moderators were in the same situation as me but, apparently, not.. :-) Cheers!
Seconded. I didn't even know there was a poll.
&gt; Removing posts is censorship. No. In this case, it's not. You could post the same words / point / idea that you crammed into a stupid meme image, but put it in a selftext post or link to a blog entry or whatever else you want, and it wouldn't be removed. Only the meme posts are going to be removed. Nobody's "censoring" anyone's ability to say, discuss or otherwise express an opinion.
&gt; If people don't care enough to vote, then that's a clear endorsement of the status quo. I don't think so. I hate meme posts, but I often just skip over them and move on, sometimes even forgetting to downvote. It doesn't mean I won't be thrilled to see them go, and I think that's the case for most of us who dislike them. For whatever reason, I'm far more likely to upvote a post than downvote it (maybe that's my own problem/fault, but still)... I think this may be the case for a lot of people.
Just from a general database design, it would be more efficient and more appropriate to have "last_name" in the same table as "full_name". I can't see how it would affect any additional queries, unless these queries were SELECT * FROM rather than specifying just the columns it needed. Even then it wouldn't have a worse affect on performance than joining two tables together, because if these tables have a million rows each then that's a lot of INDEX lookups to perform the JOIN. Having it all in one table requires no INDEX lookups.
I agree it is definitely not a pronounced issue here right now, but I think letting it go until "it's a problem" would be a tacit approval and then nothing will be done about it because it will seem like a reversal of policy instead of the creation of one. I don't see it much here either, but I have seen one subreddit (of similar size and frequency) go the same route and turned into junk very quickly as good contributors were driven away and more and more decided to start submitting their own 0-content (and I think 0-content is the key here) memes and junk. It's a snowball effect which makes it tough to catch at the right moment before it gets out of hand, so I'd agree that you can never address it at a fully appropriate moment.
Ban all the things!
You're fucking awesome dude.
Thats ugly. Just use a little crutch to help you learn them that way in a few months you can hammer out regex on the fly. See: regex.powertoy.org
When I was first teaching myself to program I had the following code: exec('rm -rf '.$fileName); Of course somehow someone got a * into the database. Bye bye file system. I also designed something that gave each user his own table rather than using a relational design. Jesus.
Chuck Testa? NOPE. Meme-free subreddit
Personally I'd rather see an end to the constant deluge of "How do I wrote code" posts. But it's not as if any of us, including me, are actually submitting anything substantial to replace them. So hey.
Magento, Os Commerce, there are several options... Probably some non-free options as well. You can also use a framework that has some of the things you'll need to code it yourself such as CodeIgniter...
I have no negligible connection to this subreddit, but has the option of automatically shifting meme posts to a different subreddit come up in discussion before?
 $string = ''; We're creating an empty string called $string. foreach ($_POST['numbers'] as $number) We know $_POST['numbers'] is an array and we want to view each item in the array individually. This will loop through the array and assign the current item to $number. $string .= "{$number}, "; Here we're concatenating the value of the current array item, as well as a trailing comma and space, to our string $string. $string = rtrim($string, ", "); Since we're adding a comma and space after each new item, we'll be left with, say, "1, 2, 3, ". We want to get rid of that last comma and space, so we trim it off and assign the result back to $string. Hope that helped.
Crap!! I forgot to vote... so did my 27 other throwaway accounts :(... do we get a second chance???
He said he wanted all the subs to be 777, I was just showing the quick way.
Umm, I don't know. If you want, send me a message and when I come back I'll write a much more detailed explanation for you.
There is a very specific group of people who come to /r/php; the idea that suddenly they will lose interest in programming and instead focus all their efforts on pasting clip art into repetitive cartoons is beyond absurd. The fact that /r/angst or /r/woe-is-me or whatever has gone south really has very little bearing on this sub.
Ah, but seeing as my id is unique it doesn't, right?
What you're suggesting will seek through the entire table to sort results. The select clause just filters what data it returns, but it still has to seek through every part of the file(s) like anything else. A separate table means less disk I/O, which often means less time spent. Fat tables = slow queries, that's why we have things like normalization and joins. But again, even considering the differences between the 2 approaches is probably over-optimization for the OP's problem. 
Well, I suspect I'm acting as a lightning rod for the bad feelings some people are having about this. Because I'm the messenger, I'm being shot. ;)
Alright I think it's time I unsubscribed from r/PHP. It has been completely useless. I expected a lot of interesting tips and PHP help, but it's been nothing but useless announcements about beta bug fixes in the PHP library, and people promoting their own pet projects. And now it's not even allowed to be funny. Great, just great.
Another aspect that gradecurve hasn't mentioned is the effect it would have on INSERT queries. The extra index on last_name could potentially be significant if high concurrency of inserts is required. I doubt it'd have any effect on a users table but it's worth considering in other cases.
Brilliant. Thank you. I wish I could find tutorials that explained that well. I understand that now and will be able to use it again. Thank you. Have all the upvotes I can give.
You don't. You separate the name into two fields, first_name and last_name. Then do a query and "ORDER BY last_name ASC" or "ORDER BY last_name DESC"
**THIS IS A VERY BAD SOLUTION!!!** mysql&gt; create database foo; Query OK, 1 row affected (0.07 sec) mysql&gt; use foo; Database changed mysql&gt; create table bar (name TEXT); Query OK, 0 rows affected (0.49 sec) mysql&gt; insert into bar VALUES ('John Smith'), ('Abe Aacorn'), ('Gueen Foo Hernandez'); Query OK, 3 rows affected (0.00 sec) mysql&gt; SELECT * FROM bar; +---------------------+ | name | +---------------------+ | John Smith | | Abe Aacorn | | Gueen Foo Hernandez | +---------------------+ 3 rows in set (0.00 sec) mysql&gt; SELECT * FROM bar ORDER BY SUBSTR(name, LOCATE(' ', name)+1) ASC; +---------------------+ | name | +---------------------+ | Abe Aacorn | | Gueen Foo Hernandez | | John Smith | +---------------------+ 3 rows in set (0.00 sec) **DO NOT USE THIS, UNLESS DEALING WITH A VERY, VERY SMALL TABLE, OR IF YOU ONLY INTEND TO RUN THIS ONCE IN A BLUE MOON.** As other posters have suggested, modify your database schema to split the first name and last name(s) into different rows, and then order by that. 
This is no bug. Just typical PHP behavior. When using the include/require/include_once/require_once constructs in PHP there is a defined set of steps that PHP will take in finding your specified files for inclusion before the script is compiled. 1) PHP checks the path specified in the include call. 2) If a path was not specified in the include call PHP checks for the file in the paths defined by the directive include_path, which can be either specified by your loaded configuration files such as php.ini or at run time using ini_set() 3) If the file is not found in the include paths PHP will check the calling script's own directory (which can be identified with the compile-time constant __DIR__ in PHP 5.3 and above or with dirname(__FILE__) in previous versions). PHP will also check the current working directory (or CWD) before failing. All of this is documented behavior which can be found in the manual at http://php.net/include mail.php is most likely an indication that you are using PearMail which is a PEAR library common in many PHP installs. You can also review their documentation and installation instructions at pear.php.net
awesome - now all we need is something to convert sql statements into activerecord :) 
It's disappointing that you're being downvoted for this, particularly because what you're saying is essential to the discussion. Personally, I'd like to give you my thanks because even though I didn't participate I think it's fantastic that you opened it up to a vote and let the community participate. It's really a noble thing that you're doing, trying to appease everyone while moderating this place, considering that you could just be all like &lt;? echo "fuck you guys, i can do what i want"; ?&gt; So despite the downvotes, know that your attempts at diplomacy, democracy and other good acies haven't gone unnoticed and people are grateful.
I can tell you I know Magento inside and out, and I'm looking more into Drupal solutions. Magento is a mixture of good and bad, I don't necessarily recommend using it. If you just need a "basic" store, with a "basic" skin, it can be a quick solution. As far as theming magento, I'd recommend purchasing a theme similar to what you're looking for and modifying it. Also, I'd stay away from upgrades, and be sure to use version control. 
$query="select f1,f2,f3,f4 from address where user_id='".$myid."; $db-&gt;setQuery($query); $row = $db-&gt;loadAssoc(); foreach ($row as $key=&gt;$val) { print_r($key); print_r($val); } don't use select * because that returns too much data. if you get 1 result foreach runs once, if you get more data - foreach will loop through it and do whatever you have to do N times. every database layer should have a method for getting a single result or returning an array. this way the sql server compiles the query once and runs it.
I'm sorry but this is stupid. If you don't like memes, don't upvote it! [If this happens, I will be disappoint.](http://i.imgur.com/8QQlf.png) EDIT: I'll be banned from /r/php in 3... 2... 1...
I always read downvoted comments anyway. They're often the first thing I read.
&amp;#3232;\_&amp;#3232; 
The first mistake any software engineer can easily make is thinking that having learnt programming makes you a good programmer. The second is not staying current on things like Best Current Practices (or BCP), not learning about new technologies, frameworks, paradigms, systems, or not reading about what other developers are doing. The best way to avoid this is read A LOT (there is tons of technical documentation to stay current on that is updated all the time like the online manual at php.net, man pages on your OS for various programs you may encounter, stackoverflow forums or other similar tech forums to scour, etc...) If this isn't enough you probably want to read some of the more prominent authors on hot topics like OOP. I'd recommend Matt Zandstra's book on "PHP objects, Patterns, and Practice". Your toolchain is going to change over time so don't get wrapped up in trying to learn the innards of every single tool right away, especially if you are a disorganized person by nature. Frameworks, libraries, IDEs, editors, protocols... these things all change rapidly over a very short period of time. I remember when flash was the future of the web, today it's shifted around. Knowing jQuery vs. the hundreds of other javascript libraries out there is only a bonus. Knowing how to use Zend FrameWork over CakePHP over Kohana over CodeIgniter, none of this is an area of focus in programming. Knowing a little about all of them is good, but knowing fundamentally how PHP works and what kinds of behavior to expect from it is first and foremost your focus. Beyond that is understanding trends like Web APIs and figuring out which ones are the most useful for the code you want to write. Learning PHP properly is no different than learning Java, Ruby, Python, or any other programming language properly. It requires reading lots of technical documentation (not fluff you find on sites like Lynda, etc..), understanding fundamentally how the software you work with behaves and how you can get it to do what you want, and spending endless hours testing your code and working with other developers to find what solutions they may have come up with that you haven't. Best of luck to you :)
I would describe it as "Annoyance Management" rather than censorship.
Don't get hooked into any one framework or CMS and try to be an expert at it and just focus on your programming. You will learn that your skills will translate very easily across languages and frameworks are fairly trivial. MVC is a pattern so understand the development patterns; CI, Cake, Zend and the such all have their individual nuances but I have not had a problem jumping into whatever is needed. So instead of looking at it as being an expert in Drupal, Zend, WP, etc look to be an expert programmer. Here are some books to help: http://www.codersatwork.com/ http://pragprog.com/the-pragmatic-programmer http://c2.com/cgi/wiki?DesignPatternsBook
Why would you be banned? The mods here are very easy-going. We're not instituting this because we're humourless... Edit: I should mention, ordinary_van is currently trying hard to get himself banned, to make himself a trollish martyr. If it happens, it won't be because he posted a meme post, but rather because he's being intentionally daft.
People supporting this decision (including the admin who made the decision) are getting downvoted. You mad, meme users?
this right here is proof to me that you mods shouldn't listen to anything the assholes in this thread complain about... it seems only jackasses have decided to click "comments" here... [asking about specific complaints on the current design](http://i.imgur.com/Tau9x.jpg) is downvoted into the negatives just because you're a mod...
that "very specific group" resulted in this... see anything annoyingly stupid/wrong with [this picture?](http://i.imgur.com/Tau9x.jpg)
Downvote because of short tags. Always use &lt;?php. Always. ;)
To be honest I think your point has eluded me.
&gt;..for no good reason in order to fix a problem that didn't exist. Should the moderators wait until it does become a problem before doing anything about it? That's very shortsighted. This problem exists in every other major community on Reddit. I commend the moderators for preemptively taking action against memetic content before being reduced to the likes of /r/starcraft.
in the screenshot, a guy complains about the CSS design here, a mod replies saying he's looking at putting some work into a redesign and asks if the guy has any specific complaints... that comment is downvoted into the negatives. the upshot: the "very specific group" you speak of seem to be a bunch of stupid little asshats who comprise a vocal minority in terms of both posting and voting things up/down.
It was downvoted for being off-topic. 
see: http://www.reddit.com/r/PHP/comments/l0n1y/the_response_was_clear_and_meme_posts_will_now_be/c2owoqx
&gt;this right here is proof to me that ~~you mods shouldn't listen to anything the assholes in this thread complain about...~~ self moderation works &gt;is downvoted into the negatives just because ~~you're a mod~~ talk of a redesign is off-topic to this thread. FTFY
While I appreciate that you're defending us mods, I'd ask that you refrain from calling people "asshats". We're trying to bring the quality of discourse up, and part of that is curbing vitriol. :)
Drupal has its own ECommerce module with a cart system. I've never used it personally but I've done enough with the Drupal platform that it would be my first option for a store site.
That comment misses the point. &gt;the idea that suddenly they will lose interest in programming and instead focus all their efforts on pasting clip art into repetitive cartoons is beyond absurd. He is correct in saying that that scenario is beyond absurd. It's absurd because it's a scarecrow argument. The problem is not that dedicated submitters will suddenly start submitting memetic drivel; the problem is that the memetic drivel will gradually repulse the dedicated submitters, leaving people only interested in more memetic drivel. /r/pics, /r/funny, and /r/gaming can all attest to this staggering decline in quality. The moderators are right to treat the disease before it becomes an epidemic.
He could also just do `$string = implode(', ', $_POST['numbers']);`
Funny thing is, we didn't even have to remove this post. The spam system apparently knows you're prone to being spammy...
No. Joomla will use MySQL or MySQLi depending on configuration.
Do this: http://pastie.org/2642028 Take a look at JDatabaseMysql and JDatabaseMysqli. They are implementations of the abstract class JDatabase. File path for these definitions: libraries/joomla/database/database/ Docs: http://api.joomla.org/Joomla-Framework/Database/
If you don't mind commercial software, perhaps take a look at LemonStand: http://lemonstandapp.com/.
That's something that I understand. I'm using MySQLi.
I have never seen a single meme post on /r/php, but those posts about meme posts are increasing and become more and more annoying. Can we ban them any time soon?
Great. Now if only the rest of Reddit would do the same....
As I've never ever seen a meme post in this subreddit, it's the most irrelevant guideline i've ever seen. 
Maybe just a blow in the wind. But I'd suggest you try https://propelorm.org. Reduces a lot of cruft and makes you think more about the way you design your data access and manipulation. Just a sample: http://www.propelorm.org/documentation/03-basic-crud.html
Wow, thanks alot sir, awesome advice. I'm trying to take one piece at a time and get more familiar with the functions atm ( after i went trough the lynda course ) . I started with strings and strings functions, and im doing various exercises on this topic.What do you think about that?
Sure thing!
Yeah, prohibit them!, what's the best thing to do while in power? banning things.......nice work /r/PHP.....
Don't know why you are getting downvoted - legitimate question. - require() calls do not only provide errors in event of failure - the entire script fails. - include() calls provide errors without ending the script.
I see where you're coming from, but normalization is primarily used to ensure there is no data redundancy and that the appropriate structured relationships exist between data in the database. Perhaps if this "last_name" field was of type BLOB (or other potentially large data type) I might be tempted to place it in a separate table, that's probably the only time I would have a one-to-one relationship between two tables. That is unless the additional columns were not applicable to every row in the table, in which case it potentially does belong separately. However in this case there will be one "last_name" value for every row in the table and this will be a small data type (like a VARCHAR (100)), so there's really no need to have it in a separate table. But you're right, using either approach won't impact the performance of this example significantly :-)
True, but you would have to INSERT into the table containing the "last_name" field at some point, which means an update to the INDEX anyway, and instead of performing, say, 1 million inserts, you need to perform 2 million because you're inserting into two tables instead of one. Trouble is you're always going to get that issue with inserting into tables with indexes. If you care more about delivering fast output rather than fast input, then you use indexes to retrieve the data faster. If not, then you don't use indexes, and inputting data will be much quicker.
This helped a lot! Thank you! I changed it around a bit to pass the results into a hidden field on a form. Thank you again :).
This is very close to what I ended up using, all the way up to the foreach function. I have to load the results into hidden fields on a form, so I don't think that part is relevant. I am still wondering how that part works though. $myid is a unique value, so it should only target one row. I understand that foreach would run multiple times if there were multiple rows in $row, but what does the part "as $key=&gt;$val" do? I'm guessing the print_r($key) and print_r($val) prints the rows in $key and $val. Is this correct?
Hopefully someone has already got to you, but if not: [print_r](http://php.net/manual/en/function.print-r.php) = prints out the contents of an array or object in a format Array ( [key] =&gt; "value", [key] =&gt; Array( [key] =&gt; "value" ) ) [print_r](http://php.net/manual/en/function.print-r.php) takes two parameters. The first is the array, and the second is boolean. The second parameter returns the result as a string, rather than echoing the contents directly to screen. print_r($array, true); [var_dump](http://php.net/manual/en/function.var-dump.php) does a similar job but you'd use it more with objects, and it gives you more information about string size, private and protected members, etc. Those two functions are perhaps the most widely used when debugging your data structures, so don't fear over using them. But they are for debugging purposes. You'd hardly ever use them in a production setting. * [print_r(object, [optional boolean])](http://php.net/manual/en/function.print-r.php) * [var_dump(object)](http://php.net/manual/en/function.var-dump.php)
I honestly haven't much of an idea about what those Lynda courses cover, but what I do know is that you can't gain skills from reading a book much like you can't gain skills from watching a video or following a tutorial. All that teaches you is some knowledge and knowledge is cheap. Skills require years of experience. Like the skillful driver behind the wheel of a car - you simply have an instinct for certain things and they come naturally to you. for example: You may find a video on Lynda or youtube or some random blog that tells you about the echo construct in PHP and what it does or what print does. And it will probably tell you everything you need to know (which isn't much). You can even read the manual and see all the technical specifications about php.net/echo and php.net/print but what what all of that won't tell you, for example, is why the following code does what it does... echo 1 . print 2; // Outputs 211 You may watch a video or read through a tutorial that explains the foreach construct and what it does. You will probably end up reading the manual on php.net/foreach when you are using it in your code and need to understand a specific behavior. But sometimes you find yourself not quite understanding the behavior of the code under certain conditions... like how can I change the values of the array inside the foreach construct? Should I use a for loop instead? But what if my array keys are not numerically indexed? Which will be faster? These are questions not easily answered by either the manual or the videos you may be watching. But sure these videos may seem aesthetically pleasing at first and even educational. However, I value the experience gained from 1 hour of coding more than I would watching 100 hours of cookie-cutter video tutorials - and I have seen many of these fluff videos over the years to know that 99% of them are pretty horrible. However, don't let this discourage you from doing what you're doing. The hardest part of learning a new programming language is figuring out the syntax and then the rest comes a lot easier. But mostly, you need to learn how to learn before you can truly accomplish anything useful. **NOTE:** *The more time you spend dealing with the interpreter and putting those functions you are now learning about to use the less time you will have to spend realizing the difference between seeing code and writing code...* Best wishes
Thank you, The previous method worked as well, but I went with this one. Have an up.
Thank you, I did find a solution, but I appreciate your time and explanations.
I just wrapped up a Solr project to replace a Google Mini that's about to fall over. It rocks. 
Absolutely. I always manage to forget about implode()
&gt; it seems only jackasses have decided to click "comments" here Don't be so hard on yourself.
Don't worry, just remember to add those functions to your arsenal of debugging techniques.
&gt;The problem is not that dedicated submitters will suddenly start submitting memetic drivel; the problem is that the memetic drivel will gradually repulse the dedicated submitters, leaving people only interested in more memetic drivel. /r/pics, /r/funny, and /r/gaming can all attest to this staggering decline in quality. Seems a bit chicken and eggish, if they aren't suddenly posting memes why would they be leaving? Either way, just because you don't like one form of expression means shit. Some people don't like tv, some dont like radio and some don't like films. You know what those people do? Ignore them, they don't go trying to get movies/tv/radio shut down. (but please go on and tell me that tv/movies/radio isn't the same thing as meme posts and keep on with your elitist "my form of content is better than yours" attitude... )
I too am curious about the down votes as there's no rebuttals posted. Many times I've had errors slip by because someone else had configured the server to not show any errors.
How did you start ?What was your level when you got your first PHP ( or other programming language ) job ? It's pretty hard to find real life exercises that I can work on that cover only some of the concepts ( for example strings ) without going too deep into stuff that I haven't covered yet... if you know what I mean. Anyway, it's a bit rough at the start but I'm doing a lot of progress already. Thanks for all the advice, it's really usefull to me ! Have a nice day sir.
&gt;Seems a bit chicken and eggish, if they aren't suddenly posting memes why would they be leaving? Because they would be repulsed by the memetic content being submitted by other users who are only interested in easily digestible content. &gt;but please go on and tell me that tv/movies/radio isn't the same thing as meme posts Okay. Television, movies, and radio are segregated. One can easily avoid cable content by not owning a television and avoid movies by not going to the theater. On Reddit, the insightful submissions are not segregated from the memetic content, making it difficult to avoid them. &gt;my form of content is better than yours Well, it is.
&gt;in easily digestible content. And whats the problem if some is more "easily digested" than others? Why should I read your paragraph of drivel when I can get the same thing quicker and easier? Sure sometimes I enjoy reading walls of text, sometimes not so much. &gt;Well, it is. No, your opinion is that it is better. That doesn't make you right.
Do not use oscommerce. It will make you want to shoot yourself.
Calm down. One community involved vote doesn't suddenly mean a 1984 themed reddit.
Symfony2 does this as well, except they call it a [Service Container](http://symfony.com/doc/2.0/book/service_container.html). It really helps with the creation of re-usable components. If this blog post spent more time talking about the details (like the chapter I linked) and less time apologizing for Zend adding a DIC, I might have found it interesting.
Have you used this software? 
Have been using magento for a bit now. Not sure whether I should recommend it or not for this case. On a lesser host it can be fine if they're not getting significant traffic, yet it can get taxing on smaller servers. Yet on the other hand it's quick to setup and has a lot of customization potential as you dig deeper into it. Also, the more I got used to it the more I enjoy the hooking and customizing of everything. Almost finished with a Magento &lt;-&gt; MAS 90 implementation.
The link you posted makes a lot more sense than the blog post. I read the blog post, suddenly got scared that I didn't understand DI any longer and that my brain must have turned to mush last time I went on a drinking binge (yesterday.) YAML config: # app/config/config.yml services: my_mailer: class: Acme\HelloBundle\Mailer arguments: [sendmail] PHP: class HelloController extends Controller { // ... public function sendEmailAction() { // ... $mailer = $this-&gt;get('my_mailer'); $mailer-&gt;send('ryan@foobar.net', ... ); } } That code is very common in ZF, you just got to hope and pray that whatever object you chose to bind to my_mailer implements send() ;)
&gt;And whats the problem if some is more "easily digested" than others? [This is the problem](http://i.imgur.com/iDQMj.png). Reddit's content is becoming increasingly indescribable from Digg's thanks to memeification.
Normalization is horrible for speed when you have to join many large tables. This is why the NoSQL crowd is so hip; they denormalize everything and get great performance at the cost of consistency troubles.
"OsCommerce: The Dane Cook of PHP Based Shopping Carts."
Again, this is just a small group of peoples OPINION. What makes you feel so entitled to dictate the type of content others consume? What makes you so special that you cannot just downvote and move on? I don't see anything wrong with the posts you presented. The key difference is you have the ability to down vote and hide the things you don't want to see, or get this, ignore them completely. Amazing how everyone is all about personal responsibility yet you can't take it upon yourself to simply ignore these types of things and instead want someone else to take that responsibility for you.
&gt;What makes you feel so entitled to dictate the type of content others consume? What makes you so special that you cannot just downvote and move on? The content you consume is also the content I consume. If there's a decline in the quality of content, I, along with the entire community, also suffer from it. Asking that the moderators work to maintain quality is not entitled; its necessary to ensure that the community doesn't turn completely to garbage. &gt;I don't see anything wrong with the posts you presented. Those are the most upvoted comments in the first threads to report that the American credit rating had been downgraded. Is that what you want more of? Do you want to see more stupid idiotic memes spouted in response to major events? Would you not prefer to have insightful discussions take place on Reddit instead of submitting mindless Advice Animals? If so, you're part of the problem. &gt;The key difference is you have the ability to down vote and hide the things you don't want to see, or get this, ignore them completely. Ignoring the problem won't make it go away. It keeps spreading.
I have, and it's quite good. Pretty well architected, easy to extend without changing vendor code, and makes zero hard assumptions about your design/layout. Developers provide pretty good customer service, too (or at least they did 6-8 months ago when I was building the thing) -- I asked on the forum about a having them add a hook that I needed. They added it (and pushed it out over their update system) in something like 2-3 hours.
&gt; If there's a decline in the quality of content, I, along with the entire community, also suffer from it. I'm not sure how many more time I need to say this to get it through to you, that is your and a SMALL percentage of the readers OPINION. I don't think anything is suffering here. &gt;Those are the most upvoted comments in the first threads to report that the American credit rating had been downgraded. So, a large number of people found value in those posts. What makes you think your opinion is better than everyone elses? &gt;Is that what you want more of? Do you want to see more stupid idiotic memes spouted in response to major events? There are plenty of things that I don't like. Big difference is that I'm not going around telling them not to post things. Instead I do what anyone should do when issues of little consequence arise, ignore it or down-vote it, and move on, not dictate what others do. Also, for someone so against this "disease" i thought it would take a lot longer than it did to find you using a meme. &gt;[This is how I feel when downvoting all "this is how I feel" submissions.](http://www.reddit.com/r/funny/comments/l1bhf/this_is_how_i_feel_when_downvoting_a_link_on_the/c2p03iq) As a matter of fact, looking through your post history shows that you can't seem to help yourself but to be drawn in by things you should have learned to ignore long ago. The majority of your posts seem to be you parroting rules to people... 
I recently used BigCommerce for a site. The templating was hard to customize for my design. They seem to prefer you make your designs based around their pre built templates, so I had to write a lot of JavaScript hacks to get their html to play nicely with mine. The support was meh, but as far as the backend goes, it's intuitive, easy to learn and quite thorough. So far I give it a 6.5/10. Let's see if the next site I do with them is any easier. This is a hosted solution, and you do have to pay for it. And not to hijack this thread, but I'd like to hear about experiences anyone else has with BigCommerce. 
Yeah, I'm a certainly a better coder for the experience. Doing and recognising that we've done dumb stuff is, I think, a very helpful progression tool. One that I both hope and am sure I will take advantage of many, many more times.
Thanks - Magento was one of the options I was looking at, but from the comments here and I what I understood about it, it seems like too much for what I need.
I was hoping to stay away from commercial software, but I'll look into this, thanks.
Good to know!
I saw this one, but I also want something quite flexible.
Don't confuse DIC with DI. One is different from the other. Dependency injection essentially allows you to override requirements from the outside. A DIC is one way of accomplishing this. My issue with a DIC is simple. Compare this: $members = $this-&gt;get('my_users'); with this: $members = new Members(); With the second, you know exactly what is being called. With the first, you have no idea. For me to know this, I have to go digging around (and in the above example, it's in an YAML config file). Essentially, $this-&gt;get() returns something, but you don't know what that is. As I said though, I like DI. My issue is with the current implementations being put out for DICs. I feel they are the weakest implementations out there. And while they have benefits, they also hide important information.
Well, the problem is a DIC and DI are two different things. DI is good. Symonfy's DIC and (because they seem to be going in the same direction) Zend2's DIC are pretty weak implementations. They solve the problem of DI, but add additional problems. It's two steps forward and 2 steps back, imo.
That second example (Java style) might not be possible in PHP. Is it? I also sort of like how Symfony2 services are not bound to a specific class name. It's not that hard to find a service by name...
Sorry, that second style isn't DIC, and I didn't mean to imply it was a DIC. Rather, it's detailing that new Members() is clear in what it does. get('my_users') is not. Essentially, you have no idea what get() is going to return, and that means you have to deal with potential side effects.
To your edit: It's tremendously easier to find a class by a class name. The service is implementation specific. Granted, you are tying yourself to Symfony or Zend by using the framework. But still, the end result is essentially some form of global, and some form of dependency. In the case of Symfony, you have to use the standard DIC. Just look at the example: it extends from Controller which, at some point, has to implement -&gt;get() and the call to the DIC.
Sorry, I have a tendency to ninja edit my posts. My only real counter argument here is that doing something like `new MyClass()` is too much of a pain-in-the-ass to implement in PHP. Symfony2's implementation keeps things simple. The get method is not a mystery. If you class is managed by the container it will set the container member variable to hold the service container instance. The get method is a shortcut in some places for convenience.
You are right though, being "Container Aware" (able to instantiate classes using the DIC) will tie your class to Symfony2 - the price you pay for convenience.
New skool: $db = new db; $injecting = function() use ($db) { echo 'see i injected $db.'; } $injecting(); Old skool: $db = new db; function injecting() { global $db; echo 'see i injected $db.'; } injecting();
I've seen solr implemented for site / product search in two organizations now and its been a big win in both. It's super fast.
Good point, but not quite my intention with the phrase "heavily moderated". By heavily moderated I mean that the actual moderators are removing posts/comments*. Other subreddits have suffered with this problem, /r/php hasn't. Yet. \*edit: non-spam posts, of course. They *should* be removing spam, not genuine content.
I started using PHP as a hobby about 6 years ago. I had lots of programming experience with other languages (almost 10 years), but nothing very web-oriented at the time. I wanted to start a small web forum for fun and at the time I knew very little about web design and development aside from some basic HTML. I chose PHP because it was open source and free and the web hosting company I had signed up with at the time to start my forum offered only PHP and Perl. I tried Perl for a little bit, but I didn't like it as much as PHP. PHP seemed to lower the bar of entry so I stuck with it. About six months later I had learned CSS, some javascript, and MySQL and developed a small social networking web site in my spare time to learn. This was around the time facebook was really taking off and it inspired me that many popular sites like facebook at the time were also written in PHP. I know it can be rough at first and the hardest part for me were those first few months learning the syntax and getting used to it. After that it was smooth sailing. In the last 6 years I've benefited a lot from contributing to other open source projects, contributing to the PHP documentation, participating in tech forums like this, and writing lots and lots of code. There are plenty of open source frameworks and projects written in PHP that I'm sure you can Google and download the source code to. Try to pick them apart, figure out how they work, etc.. Of course working on exercises is needed at first to get used to the syntax, but everyone has their own learning curve so I wouldn't worry about it too much.
Well this is the first I have heard about it. Any thoughts, opinions, or experiences anyone wishes to share in their use of it?
See [my reply](http://www.reddit.com/r/PHP/comments/l0n1y/the_response_was_clear_and_meme_posts_will_now_be/c2p6xhf) below, I didn't mean that /r/php is heavily moderated. 
I realize how the get method works. My issue is you dont' know what $this-&gt;get('user') will return. You can assume, but you don't know. This doesn't simplify things. Oh, don't misunderstand me. I'm not against DI, or even the intent of DIC. My issue is with the implementation. This is of course based on the limitations of the language. Regardless, the current DICs, while they provide benefits, aren't with significant cost. And those costs are a dependency on the DIC, implementation configuration, and mystery. Until I can figure out a better way (with traits in 5.4? or possibly file include overrides) or learn of a better way to implement one from someone else, I'll do it the old fashioned way: function doSomething ( $withThis, IAnObject $usingThis = null ) { $obj = isset( $usingThis ) ? $usingThis : new AnObject('default','params'); $obj-&gt;operate($withThis); $this-&gt;doSomethingElse($withThis); } At least with this method, you know exactly what is going on. Obviously the ?: is cumbersome to write, but it doesn't suffer the same problems with existing DIC implementations. Just to be clear: I'm not suggesting you are wrong. I'm just saying that as someone whose invested time in this, the current benefits of existing implementations isn't worth the investment.
I usually don't talk about the votes, but sorry you mods are being downvoted. There is a certain negativity towards Mods in this post, but you guys have kept /r/php in good order. No downvotes from me, just discussion. As for new design ideas, have a look at the upcoming [redesign](http://php.net/?beta=1) of php.net. I'm sure you can draw some inspiration from it, even if it's only colors. I agree that the PHP.NET pseudo-tab on this subreddit should be removed. That's what the sidebar is for.
More interesting would be to compare memory consumption. ORMs tend to be very heavy in that regard.
Cool, but you should be using PDO and parameterized queries to prevent SQLI, not type casting. Also, I highly doubt converting user form inputs to integers is ever going to be a bottleneck for a site, I think focusing on stuff like inefficient joins, N+1 queries, etc. will give any developer a lot more benefit.
I love propel. I've used 1.4 - 1.6 on large projects and it's always been a joy to work with. If you're going to use an Active Record ORM, the choice between Doctrine 1.2 and Propel 1.5+ is a no-brainer (imo). The part I like most about Propel is its configuration. This is an area where people have preference. The full schema and all of the behaviors go into a single schema file. With Doctrine, you have to write code to configure behavior. Some people prefer the way Doctrine does config and behaviors. To each their own.
Discussion on [Hacker News](http://news.ycombinator.com/item?id=3077031).
is this a joke?
Propel is awesome. It's fast (even before the described optimizations), has lots of useful features, and makes model/database design far more straightforward. There are some parts that not well-documented (abstract columns with inheritance), but you can usually figure them out on your own. It's a great way to move away from more problematic development practices to something higher quality.
&gt;So, a large number of people found value in those posts. What makes you think your opinion is better than everyone elses? Why? Because [users on Reddit are no longer able to govern themselves](/r/bep/comments/jhfbd/a_little_something_i_wrote_a_while_back_for_f7u12/). For their own benefit, they need the stringent hand of moderation to keep them in line. This is true of every Internet community that wants to avoid succumbing to the lowest-common denominator. &gt;Also, for someone so against this "disease" i thought it would take a lot longer than it did to find you using a meme. Is "This is how I feel" considered a meme? Regardless, I used it ironically and mockingly. Anyone with a grade school knowledge of English comprehension could glean from that comment that I was sarcastically mocking its usage. You're either incredibly obtuse, or deliberately disingenuous. &gt;The majority of your posts seem to be you parroting rules to people... Someone needs to.
&gt;Why? Because users on Reddit are no longer able to govern themselves. Sure they are, you just don't like a particular type of content. So scream that the sky is falling. &gt;For their own benefit, they need the stringent hand of moderation to keep them in line. This is true of every Internet community that wants to avoid succumbing to the lowest-common denominator. And your basis for this is someone who also thinks their type of content is better than other types leaving, please... &gt;Is "This is how I feel" considered a meme? Yeah, its one of those content types you dislike. Its not really any different than "Shit like this" which you've pointed out here as something you dislike. &gt;Regardless, I used it ironically and mockingly. Anyone with a grade school knowledge of English comprehension could glean from that comment that I was sarcastically mocking its usage. Whats your point? That your hypocritical? If you think that type of content is beneath you why would you use it? &gt;You're either incredibly obtuse, or deliberately disingenuous. Is "This is how I feel" considered a meme? Regardless, I used it ironically and mockingly. Anyone with a grade school knowledge of English comprehension could glean from that comment that I was sarcastically mocking its usage. &gt;You're either incredibly obtuse, or deliberately disingenuous. Please... the take away from this conversation is that you feel you're better than others, have some kind of need for power or authority over other and I say thats bullshit. 
Nah man, not a joke... The title is a bit trolling, my bad... But it's a reference to the design of the framework. I broke a few "best practices" to offer developers using it a better experience.. or at least, that's my intent. There are only a couple of issues that might be considered "bad" like a single include file to contain the framework, or the global set() and get() *magic functions ... But this is done by design. I'm generally trying to offer a framework that caters specifically to beginners, small projects, start-ups, or even experts who need a more agile framework; I feel many of the big/popular ones don't do enough to support project bootstrapping, i.e., quick/small projects. tl;dr -- I want PHP devs to be able to use powerful MVC framework features without the messy config/setup of the big php frameworks.
That was a pointless waste of time. To paraphrase: "php needs to die because it does not do lambdas and method chaining". I want the 5 minutes i spent reading that article back. EDIT: oh and he spends a lot of time comparing RoR (a framework) against php (a language) *rolls eyes* 
well... thats just like... your opinion.. man.
Put your code on github so people can see it without downloading a ZIP file. I'd rather use Slim Framework for micro projects though... http://www.slimframework.com/
&gt; php needs to die because it does not do lambdas and method chaining Too lazy to read it, but I'm bored and feel like fleshing out how PHP can and does do both of these things (lambdas as of 5.3), as I'm sure you know. Lambdas: $myglobal = "stuff"; $function = function($param) use ($myglobal) { echo "{$param} is my param, and {$myglobal} is my global"; } $function("param"); Method Chaining: class myclass { public function mymethodone() { return $this; } } $foo = new myclass(); $foo-&gt;mymethodone()-&gt;mymethodone(); 
But no one cares, because if you're willing to deal with the hassle of the Propel interface you could be using a document based database.
Part of your Best Practices should be to find clients that don't expect a website overnight.
&gt;And your basis for this is someone who also thinks their type of content is better than other types leaving, please... You keep repeating this as if you seriously believe that all content is equal in quality. It's not. Are Yahoo! Answers submissions equal in quality to AskScience submissions? Absolutely not. Also, I am unable to comprehend what you mean by "leaving, please...". &gt;Whats you're point? That you're a hypocritical? With all these mistakes, I can't help but feel that you're actively trying provoke my Grammar Nazism. &gt;That you're a hypocritical? If you think that type of content is beneath you why would you use it? It's not even slightly hypocritical. As I already explained, I used it ironically and insultingly. By using it, I was actually abusing it. It was a sarcastic denigration of the pointless, mindless sentiment behind these submissions. I used it to mock it. &gt;have some kind of need for power or authority over other I said that the moderators of this community should exercise authority. I never suggested that I wanted the authority.
Really wanted to like this. Practical over best practices myths is often a good idea. But I couldn't really see the immediate value in the code. (Then of course, documentation is still lacking.) Anyway, combining not-quite-the-best practices with yesteryears MVC directory craze is just offturning. Things like `( defined('_OLSCORE_EXT') )?: exit();` pseudosecurity in a class file don't raise much confidence. But seriously, why the frak did you define a custom `dbescape()` function using `str_replace`?
just to show you what you get back - if its an associative array you'd see that $val is the array of results so you'd do $f1=(string)$v['f1']; .. you could put if (sizeof(row)&gt;0) to not execute the foreach if no results return or isset or something - but you are right if myid is a primary key or unique key or unique constraint on user_id - then you'd never return more than one response but the same code could be reused say if you were searching on another field. in that case you could bind a string to user_id (replace with '".$something."' (properly escape or use binding for safety) ; use select * to get all fields; turn that into a function get_address_by_something($something,$myid) { select ..., skip the foreach that prints out the dataset and just return ($row); } then you have a function that could search on any field in that table - such as $results=get_address_by_something('f1','joe'); and return all matching data to row and reuse the function over and over in you application. I suggest you look into parameter binding or escaping to avoid sql injection attack. 
Any thoughts on RedBeanPHP (just curious, not trollin')
Spent the most time on the /system/core.php revising and rewriting until I was happy with the $this-&gt;new, $this-&gt;load and $this-&gt;use usage for MVC and helpers/libraries. The database class was rewritten several times, simplifying and refactoring to get it to work nicely, works with PDO, SQL SRV and even the native mysql/mssql... it's pretty robust in that regard. Point being... I didn't intend for the helpers/libraries shipped in the .zip to be "final" but rather stepping stones until better things come along. Actually, the helpers/libraries are more or less thrown together mostly to showcase what is possible. 
Your point about psuedo-security would be addressed by only placing the front controller (index.php) in the public HTML folder and hiding away the rest of the application. That line of code is just for those who aren't able or knowledgeable enough to tuck away the system and application folders in a non public folder. I'm also not sure how to handle database queries... or if the framework should automatically escape data as it's input/returned or if this is something the developer should do. Conflicted about that, which is why I didn't build better escaping into it...
&gt;You keep repeating this as if you seriously believe that all content is equal in quality. It's not. Are Yahoo! Answers submissions equal in quality to AskScience submissions? Absolutely not. Opinion. &gt;It's not even slightly hypocritical. As I already explained, I used it ironically and insultingly. By using it, I was actually abusing it. It was a sarcastic denigration of the pointless, mindless sentiment behind these submissions. I used it to mock it. Excuses... &gt;I said that the moderators of this community should exercise authority. I never suggested that I wanted the authority. Your post history says otherwise.
&gt;Opinion. Opinion. &gt;Excuses... Opinion. &gt;Your post history says otherwise. Opinion. If you're going to be [intellectually lazy](http://www.youtube.com/watch?v=pWdd6_ZxX8c), don't bother replying. There's a tragic misconception among some people that opinions are sacred and not to be challenged. This is bollocks. We should debate opinions just like we would debate facts.
&gt;Opinion The difference is your trying to use your opinions to control others. &gt;Your post history says otherwise. &gt;Opinion. This one is a fact, you confirmed it a few posts ago. &gt;Someone needs to. It was just two posts or so ago, did you forget? &gt;If you're going to be intellectually lazy, don't bother replying. Like you using a meme despite not liking them, why couldn't you have typed out a proper reply? Maybe because you were able to convey the same message more easily and succinctly using a meme? /gasp.
Thanks for the suggestion, I've been evaluating some of these newer and less widely used frameworks this past week so I appreciate the link. Hopefully I'll be able to provide better comparison data for others after doing some more evaluations. I find it pretty annoying looking at framework feature comparisons since they don't really offer a sense or good introduction/synopsis of the framework. So hopefully I'll get some more content published about this. I'd be more interested in a feature list that showed things like, overhead time, extensibility, learning time, installation base, etc., etc. (as opposed to standard feature lists like ORM, AJAX, etc.)
With descriptively long variable names we can avoid comments all together. They just waste parser time anyway.
Haven't checked the code of the framework yet, but just wanted to say that best practices are there for long-term maintenance. If your goal is to build something for the short-term, go right ahead and break them, but for the sake of the developers who will maintain the code 2 - 3 years down the line, best practices will definitely help.
&gt;The difference is your trying to use your opinions to control others. I fail to see how this disqualifies my opinion. &gt;This one is a fact, you confirmed it a few posts ago. Then find the post where I asked for authority. &gt;Like you using a meme despite not liking them, why couldn't you have typed out a **proper** reply? Exactly. To expose the meme as being improper. I (ab)used the meme to fight fire with fire. It was sarcasm. Satire. Irony. It had nothing to do with the prudence of the meme itself. It had everything to do with showing how useless the meme was. Any other human being would instantly recognize the glaring irony, but only you insist on being so ridiculously belligerent.
Uhmm. What the hell is up with Seldo.com? Their framework just allows you to change the date before the article name so I can make it look like that article was written [10 years ago](http://seldo.com/weblog/2001/10/05/php_needs_to_die_what_will_replace_it). I had already read this idiotic article before but I knew it was before August. It was posted here, actually, [a year ago](http://www.reddit.com/r/PHP/comments/djvv6/php_needs_to_die_what_will_replace_it/).
Seriously? If you're worried about the speed of your validation rather than if the validation is being performed correctly *you are doing it wrong*. * Never use is_numeric() - it is too broad in what it considers valid. * Never use typecasting for validation - either accept the input or reject it, but don't transform it. This is potentially confusing to the end user. * Never use regex for validating integers - it's an unrequired level of complexity for something so basic. * Never use ctype_digit() - it has hidden behavior if you have a real integer instead of a string representation of an integer and it doesn't support negative integer representations. So what do you use? The [filter library](http://php.net/filter). Not only will it check to see if your integer is valid, it will do range checking if you specify it. In addition it has a lot of other filters and sanitizations designed to make your life easier. if (isset($_GET['my_int']) &amp;&amp; (filter_var($_GET['my_int'], FILTER_VALIDATE_INT) === $_GET['my_int'])) { echo "is an integer!"; } else { echo "is not an integer!"; }
Best practices are for professionals. If you're a professional it won't take you significantly longer to build a site while still taking them in to consideration.
php treats objects like women, man.
ok thanks, im going to check it out
But doctrine is now at 2
eww cheeeeeese twat?
Really wish that people would stop comparing Rails (a framework) to PHP (a language).
Woh, never saw that goto is there....are peek and poke next?
I suppose with a bit of experience, those features you want to see can sort of be extrapolated from the actual feature set, looking over the api, and getting a feel for the style and coverage in the documentation. I think that's why you wouldn't see those aspects of frameworks listed with the features. Also, the time it takes to get familiar with a framework could never be consistent among developers. It's really a matter of personal learning style, experience, interest, etc.
&gt; (abstract columns with inheritance) Maybe you've meant abstract tables with inheritance, no?
In what way have you seen Propels interface as a hassle?
No, columns: &lt;column name="type" type="varchar" required="true" inheritance="single"&gt; &lt;inheritance key="Domain" class="ProductAddon_Domain" extends="ProductAddon"/&gt; &lt;inheritance key="IP" class="ProductAddon_IP" extends="ProductAddon"/&gt; &lt;/column&gt; 
right, and Doctrine v2 is not based on Active Record. It is based on Entity Management. That is why I did not compare Propel to Doctrine 2. One way to describe the difference between AR and Entity Mgmt is Entity Management will dynamically change your database schema based on the code you write, where with AR, your schema is data-driven and pre-defined based on the table and column definition. AR essentially locks on to the pre-defined structure and relationships. I'm sure someone can tweak my definition here, as I have much more experience with AR. TLDR; with AR, your schema is pre-defined (schema file). with EM, your schema is dynamic based on the model you create (code you write)
I can't say I've worked with it. Looking at the [example](http://redbeanphp.com/community/wiki/index.php/Tutorial) code, my first impression is that it requires more coding/work to associate tables and save relational information. This is an area where Propel really saves time and work.
That's still single table inheritance. What you define there is the class key column. http://www.propelorm.org/documentation/09-inheritance.html
Ok, whatever you call it, it's still cool, right?
Very cool :)
This at late hours surely has to take the cake
This is one of my early codes: $bigkveri = ""; foreach ($_GET as $key =&gt; $value) { if(mb_strlen($_GET[$key]) &lt; 10000 &amp;&amp; $key !== "user" &amp;&amp; $key !== "pref" &amp;&amp; $key !== "mail" &amp;&amp; $key !== "dbx" &amp;&amp; $key !== "PHPSESSID" &amp;&amp; $key !== "lang" &amp;&amp; $key !== "mmobile" &amp;&amp; $key !== "__utma" &amp;&amp; $key !== "__utmz" &amp;&amp; $key !== "vzcpLang") { $bigkveri .= "&amp;amp;".$key."=".$value; } } foreach ($_POST as $key =&gt; $value) { if(mb_strlen($_POST[$key]) &lt; 10000 &amp;&amp; $key !== "user" &amp;&amp; $key !== "pref" &amp;&amp; $key !== "bmail" &amp;&amp; $key !== "dbx-main" &amp;&amp; $key !== "PHPSESSID" &amp;&amp; $key !== "lang" &amp;&amp; $key !== "mobile" &amp;&amp; $key !== "__utma" &amp;&amp; $key !== "__utmz" &amp;&amp; $key !== "vzcpLang") { $bigkveri .= "&amp;amp;".$key."=".$value; } } and I changed it to: $GET_POST = array_merge($_GET, $_POST); $bad_get_post_values = array("user", "pref", "mail", "dbx", "PHPSESSID", "lang", "mmobile", "__utma", "__utmz", "vzcpLang"); foreach($bad_get_post_values as $bad) if(isset($GET_POST[$bad])) unset($GET_POST[$bad]); $bigkveri = "&amp;amp;".http_build_query($GET_POST, '', '&amp;amp;'); oh, and this was also one nice code: $badwords = array("viagra","fuck","ass","anal","mature","xxx","young","lesbia","gay","porn","p0rn","rape", "blow","pussy","naked","sex","shemale","boob","dildo","nude","strip","mastur"); $goowords = array("***","***","***","***","***","***","***","***","***","***","***","***", "***","***","***","***","***","***","***","***","***","***"); $x = str_ireplace($badwords, $goowords, $x); xD
You can't get that kind of data from $_POST - it tries to automatically parse it into parameters. You need to read from php://input: $contents = file_get_contents('php://input'); That will get you the raw data that was sent via POST. You should also make sure that you're sending the right Content Type header, not leaving it to PHP to send "application/x-www-form-urlencoded".
This is also incredibly useful when dealing with protocols that use multiple post values, such as PubSubHubbub (PuSH), where "hub.verify" as one example, can be passed as "hub.verify=sync&amp;hub.verify=async". Not only will PHP translate the . into a _, but it will only show you the second value.
Or you can just check if $HTTP_RAW_POST_DATA is set - it contains the same info you would get from your example.
From the manual: &gt; always_populate_raw_post_data boolean &gt;Always populate the $HTTP_RAW_POST_DATA containing the raw POST data. Otherwise, the variable is populated only with unrecognized MIME type of the data. However, the preferred method for accessing the raw POST data is php://input. $HTTP_RAW_POST_DATA is not available with enctype="multipart/form-data". Also, all $HTTP_* variables are deprecated. 
&gt; Also, all $HTTP_* variables are deprecated. Nope, doesn't seam to be deprecated according to the manual. HTTP_POST_VARS is though.
No seriously, what do you mean? I can have hello world in most stacks in about 5 minutes. And there I get security, documentation, and a lot more functionality. And a community. And best practices!
&gt; $contents = file_get_contents('php://input'); This worked! Thanks a lot!!! You rock!
That is an awesome suggestion...
It doesn't for me... :-( Thanks anyway!
PHP must die because I starting using rails!!1one... Of course.. Solid logic..
&gt;I fail to see how this disqualifies my opinion. It doesn't. But when you're using your opinions in an attempt to restrict what others do.... &gt;Then find the post where I asked for authority. [Now, you're the one being obtuse. ](http://www.reddit.com/r/PHP/comments/l0n1y/the_response_was_clear_and_meme_posts_will_now_be/c2p7xzk) &gt;The majority of your posts seem to be you parroting rules to people... &gt;Someone needs to. It was only 4 posts or so ago... &gt;I (ab)used the meme to fight fire with fire. So, they can only be used when it suits you? 
Repost as previous post was pulled by mods (sowi..)
Yes and javascript must die and vb must die and perl and cobol and fortran and probably ada and the rest. Languages become popular for various reasons and then they all become bloated or backwards or broken or stagnate. Get off my lawn.
I've used redbean and like it. Only negative I had to deal with is when working with a legacy DB with primary keys named something other than "id", you have to add an override for each table to tell it what the PK name is - somewhat a PITA, but otherwise it's great.
&gt;But when you're using your opinions in an attempt to restrict what others do.... You have a tendency of being vague. If you have something to say, say it. Don't obfuscate it with ellipses. &gt;Now, you're the one being obtuse. No, you are. Since when does "parroting rules to people" equal "a need for power or authority over others"? All I do is mention what the rules are and leave any further action to the moderators. I observe the same rules. &gt;So, they can only be used when it suits you? Yes, if you want to be needlessly vague about it. However, like I already said, it was okay when it was sarcastic. I don't know why I should have to defend how sarcasm isn't an endorsement of the opinion that was facetiously presented because the purpose of sarcasm should be glaringly obvious to any human being. You're just being belligerent. This discussion has descended into complete and utter irrelevance. I am no longer interested in debating with you when all you seem interested in are pointless and baseless personal attacks. Either get back on topic or don't bother replying.
&gt;So, they can only be used when it suits you? &gt;Yes, And that puts an end to this discussion. Have a great day!
I see you completely ignored the next part where I said "it was okay when it was sarcastic". Pat yourself on the back for the one of the worst debates I've ever seen on Reddit. I just love how you latch onto a single issue and ignore all the other ones. Did you forget where this discussion started?
Regex is the way forward: preg_match('/^.*\n.*([\d]{4})/',$input,$matches); (not tested!)
What's your current CMS? I'd suggest [Phorum](http://www.phorum.org) - if you look on the help forums, there's hints and tips for integrating it into your own site, themes and all, and the developers are very responsive. It's also got a wonderful extension mechanism, one of the easiest to use that I've seen in a PHP forum.
I don't think this would match anything if the 'm' modifier isn't specified, also ^.* is not needed.
&gt;I see you completely ignored the next part where I said "it was okay when it was sarcastic" Like I've said many times, they are only ok to use when it suits YOU. So if your going to be such a hypocrite there is no reason to read futher. You're just repeating the same tired and negated statements anyway. &gt;Pat yourself on the back for the one of the worst debates I've ever seen on Reddit I could have said the same thing to you, but I didn't instead I got you to admit the following negating any point you may have had about how they they are such a burden they need to be banned. &gt;So, they can only be used when it suits you? &gt;Yes, &gt;Did you forget where this discussion started? Not at all. It started with you saying that meme shouldn't be allowed and ended with you saying they shouldn't be allowed except for when they suit your purposes. Using it sarcastically or not is irrelevant. edit: I guess the point i'm trying to get at is that if you consider memes noise and part of a big problem you shouldn't be adding to the problem by using them, if you do you don't deserve to go telling others they cannot use them. Using them, even sarcastically, adds to the noise, does it not? Parroting rules to people adds nothing to a conversation (well, when its not about rules) but you seem to see no problem with adding a ton of that type of noise? It looks like you go around parroting them more than most people even use a meme.. so think about all the "noise" you've and the others in your group have contributed then get back to me.
Similar to what UsernameIsTekken said, and assuming postal code is always last: if(preg_match("/\n.*(\d{4})$/", $data, $matches)){ $postal_code = $matches[1]; } If postal code isn't always last, remove the $ from the first parameter of preg_match.
I like you. This works very well. Upvotes for everyone.
Hi there. The reason your post keeps hitting the spam filter, and we leave it there, is that you have too many unnecessary links to your website in your post. Try replacing them with "example.com", and we'll approve it.
The framework works as shipped, has about a 1ms overhead on humble hardware, simple to modify the core framework, easily extensible and configurable, is secure (to my knowledge), and allows devs to scale in an MVC pattern without all the bulk and caveats of a normal framework. Working on docs. As far as functionality, I think this framework competes well there. If all you're evaluating is helpers and libraries that ship with the framework then sure, others win. But this offers action queues (controller/methods that happen after or before certain things) as well as third party modules and some other cool stuff. Seems to me I need to do a better job presentating and communicating the value of the framework.
Excellent! I wasn't even aware it was hitting the SPAM filter. Sorry about that. I'll be more careful in the future.
For future reference, if after a short while your post doesn't get *any* votes, it's likely that it hit the spam filter.
Sounds good. I'm using IE7 at work, so I was just assuming thats what the problem was. 
Have a look at [vanilla](http://www.vanillaforums.org). It's rather nice, and quite extensible, though it works/looks differently from the typical web-forum tradition. It's made to be easily [embeddable](http://vanillaforums.org/features/embed-vanilla), which makes simple integrations pretty trivial.
TL;DR S.O.L.I.D. and G.R.A.S.P.
&gt;Like I've said many times, they are only ok to use when it suits YOU. And it "suits me" when the intent is clearly parodic. Likewise, I wouldn't endorse the phrase "All Asians are inferior to whites" **unless** it was sarcastic and was intended to mock racists. That exception is assumed in all forms of parody. I shouldn't have to argue in favor of this most basic understanding recognized nearly by sane human being versed in sarcasm. So yes, I'm in favor of memes when they are used to mock memes satirically. You *can* tenuously construe this as "when it suits my purposes", but that phrase is so vague it's inconsequential. Your needless belligerence over this matter is infuriatingly stubborn and obsessive. &gt;You're just repeating the same tired and negated statements anyway. In response to tired and negated arguments about this single niggling matter. &gt;if you do you don't deserve to go telling others they cannot use them. If someone uses a meme sarcastically or in parody, I won't scold them for doing so because unlike you, I can clearly see that their intents are starkly different from those of actual meme-users. &gt;Parroting rules to people adds nothing to a conversation (well, when its not about rules) but you seem to see no problem with adding a ton of that type of noise? Reddiquette asks that you inform people of the rules. I'm performing a service, here. I've had people thank me or apologize when being informed of the rules. Unlike memes, rules have utility and it is expected that Redditors observe the rules of the community. Would you prefer it if they were to remain completely ignorant of the rules? Would you prefer if their submissions were banned without them being told why?
i love this. when you have things like the multi-million dollar tv/radio/print campaign from intuit for, I'm paraphrasing, "build a complete online business in 5 minutes"...or, godaddy's blow out web hosting/site builder pricing/marketing. the clients' expectations are already jaded before you even walk in the door. 
It works nicely, has a good set of extensions already available, and is pretty simple to style...just don't look too much at the underlying code or you'll get a booboo.
yep, and those devs can do that all day long if said web app lives 2-3 years, but it has to get out there and get off the ground. honestly, from the business side of things, i don't care if i pass a seasoned, senior php dev a piece of spaghetti, classic asp code to integrate. he/she can groan/complain all she wants, as long as that app continues to make me money.
Oh, believe me, I know. There's actually a fair amount of clever stuff down there. Makes writing many kinds of plugins possible without needing to touch core code, at the expense of just about everything else.
You might want to take a look at [PunBB](http://punbb.informer.com/) as well.
Don't be a troll and down talk me. You clearly didn't read the intro part of the blog.
I sure did, and my point is that the timings don't matter. Particularly when *none of those methods are very good for validating inputs*. In fact, some of them are downright harmful.
Since you're on the PHP subreddit what about something like this? *pseudocode $query = "SELECT * FROM names WHERE 1"; //just an example $names = dbFunctionToAssoc($query); $last_index = Array(); foreach ($names as $nkey =&gt; $n) { $temp = Array(); $temp = explode(' ',$n['name']); $last_name = $temp[count($temp)-1]; $last_index[$nkey] = $last_name; } asort($last_index); $sorted = Array(); foreach ($last_index as $nkey =&gt; $last_name) { $sorted[] = $names[$nkey]; } This is just a quick example. I've found that if you are dealing with something that needs to scale you do a lot better by ordering things in the code rather than relying on the SQL server to do all the ordering.
If you have a personal framework maybe you should try make your own forums, not as hard as one would imagine.
Looks pretty slick -thanks for the link.
1. set the verbose option on so you can see what is going on. 2. some folks require posting to a string , some require raw xml. check their spec. ie if spec says to post to XMLPOST you'd send "XMLPOST=".$poststring 2.5: use simplexml to load your xml before you send it - if it fails your xml is invalid or not escaped properly. I assume you base64 encode on $content since you are mentioned it above. 2.6: look over curlopt's because you may want to add the option to return transfer so you get the return confirmaton data back, make sure you set the option to specify method post. 2.7: curl_setopt($ch, curlopt_RETURNTRANSFER,1); if you want to get the return data back. 2.8: might want to set: curl_setopt($ch, curlopt_post,1); before setting the postfields but i think it is redundant. 3. Build a receiver to receive your data, then use simpexml to load the string. simplexml rocks. if you're receiving app fails to load simplexml string then you have malformed xml. 4. why do you need connection:close? i've never used that. try just the string ;content-type: application/xml' $xml = simplexml_load_string($post_string); print_r($xml); // if the post_string is malformed it will be empty $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); curl_setopt($ch, CURLOPT_TIMEOUT, 30); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt ($ch , CURLOPT_VERBOSE , 1 ); //debug see the goods curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC); curl_setopt($ch, CURLOPT_USERPWD, "aarobc:1234"); curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: text/xml')); // or application/xml curl_setopt($ch, CURLOPT_POSTFIELDS, "$post_string"); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); $result = curl_exec($ch); echo "result =".$result; $returnxml = simplexml_load_string($result); echo "Assuming your return is in xml format:"; print_r($xml);
Disclaimer - I'm a longtime freelance developer who has started employing lackeys across various projects in the past 18 months. Not exactly the same situation, but I think some of this might be valuable to you. In your situation, I would do the following: 1. Buy local 2. Start slow 3. Realize that getting traction takes time. **Buy Local** - You've got a monster program. It makes sense to you, because you wrote it. Even a top-flight developer is going to be completely confused by it. You will need to hold their hand for a while, possibly months. The closer they are to you the better. Same town (so they can come work in the office, and you guys can do some pair coding) is best. Failing that, same timezone. You don't want someone on the other side of the world, or you'll start losing days. Remote developers are great when they're cheap, and you can give them black-box projects with clear requirements that are pretty much greenfield development for them. For maintenance/bug-fixes/feature-growth on a mature project, you need to minimize the cost of interaction. **Go Slow** - Don't get a stack of 1000 resumes, find the one or two guys who seem at least half competent, and then give one of them a salary. Start on a contract basis, and try people out. If you think they're good, pay their astronomical contractor rates, because you can get rid of them easily. **Traction takes time*** - Be aware that you can get someone with a lot of experience, and they're still going to go at 1/10th the speed you would for the first 2-6 months. They didn't write your system, so they're at a huge disadvantage, even if they're twice as smart as you are. Don't hold that against them. Also be aware that if you're not proactive about checking in, that same genius developer might waste a full day on something that you could've explained in 20 minutes. If your devs aren't bugging you every hour or so with a question about the codebase for the first couple of months, they're probably wasting time trying to grok what you've done, even if you did it well. --- Beyond that, move to git. It takes time to get used to coming from svn, but it's what everyone's using, and it really does make branching/merging a hell of a lot easier (joyously so, even). hg is nice too, but 9/10 qualified devs will already be familiar with git. Hint: Get a good issue tracker, possibly one that integrates with git. There are hosted services for this. You can pay github, or use bitbucket.org for free. If you want somewhat fancier stuff on the issue tracker, I've found assembla to be pretty good. Your job is going to be less and less coding, and more and more keeping track of tickets, assigning them to milestones and developers, and closing them after devs submit changes. Anyway, just my two bits. Hope it helps. 
Wow. That's nice. It really shows what good PHP can do.
 [Prestashop](www.prestashop.com) is what I use for any shopping cart based websites however if you've already got it all setup it might be a step backwards.. Very customisable though! Edit: No idea why link isn't working
I rather like SMF.
PunBB has become my most recent favorite. InvisionBoard is really nice but it's really bloated, especially compared to PunBB.
You need to use [array_multisort](http://us3.php.net/array_multisort). Try: array_multisort($mw, SORT_DESC, $ml, SORT_ASC, $tw, SORT_DESC, $tl, SORT_ASC);
how would i dump it when done? that's whats been confusing me when i tried that option and thank you
You have the dump correct, AFAICT. (keys should match across all arrays) The result will be that the arrays will be sorted in the order you specified. $mw will be sorted descending based on its own data. The other arrays will be sorted so that the same-keyed data will match up with $mw. Then $ml will be sorted ascending, the same reordering process will happen to the other arrays again, repeat as necessary. Then you can just iterate and echo/do whatever you need.
the result isn't correct... this is what i get: \- 21 / 3 | 1 / 0 (Missing 1 games) Team BatCave - 18 / 5 | 2 / 1 (Missing 2 games) Sebastian Jimenez - 16 / 9 | 8 / 4 (Missing 0 games) Alex Marks - 16 / 9 | 4 / 4 (Missing 0 games) Mike Flory - 14 / 11 | 11 / 6 (Missing 0 games) Logan Von Bruden - 13 / 12 | 3 / 1 (Missing 0 games) Eric Hansen - 13 / 12 | 3 / 4 (Missing 0 games) Quinn Kennedy - 9 / 7 | 0 / 2 (Missing 9 games) Dan Don - 9 / 8 | 2 / 0 (Missing 8 games) Trevor Donison - 8 / 12 | 3 / 7 (Missing 5 games) Alvin Ma - 6 / 11 | 0 / 1 (Missing 8 games) Nick Taylor - 5 / 9 | 0 / 4 (Missing 11 games) Mike Voght - 5 / 19 | 0 / 0 (Missing 1 games) David Cook - 4 / 3 | 0 / 0 (Missing 18 games) Pine Time - 4 / 9 | 0 / 1 (Missing 12 games) Will Doyle - 4 / 18 | 3 / 5 (Missing 3 games) Joe "Call Me JD" Olen - 3 / 4 | 1 / 0 (Missing 18 games) Chad Wilberg - 1 / 4 | 0 / 1 (Missing 20 games) - 0 / 4 | 0 / 0 (Missing 21 games) to be clear it should be more like: Trevor Donison - 21 / 3 | 1 / 0 (Missing 1 games) Pine Time - 18 / 5 | 2 / 1 (Missing 2 games) Logan Von Bruden - 16 / 9 | 4 / 4 (Missing 0 games) David Cook - 16 / 9 | 8 / 4 (Missing 0 games) Team BatCave - 14 / 11 | 11 / 6 (Missing 0 games) Joe "Call Me JD" Olen - 13 / 12 | 3 / 1 (Missing 0 games) Nick Taylor - 13 / 12 | 3 / 4 (Missing 0 games) Mike Flory - 9 / 7 | 0 / 2 (Missing 9 games) Alvin Ma - 9 / 8 | 2 / 0 (Missing 8 games) Alex Marks - 8 / 12 | 3 / 7 (Missing 5 games) Quinn Kennedy - 6 / 11 | 0 / 1 (Missing 8 games) Mike Voght - 5 / 19 | 0 / 0 (Missing 1 games) Justin Jason - 5 / 9 | 0 / 4 (Missing 11 games) Chad Wilberg - 4 / 3 | 0 / 0 (Missing 18 games) Eric Hansen - 4 / 18 | 3 / 5 (Missing 3 games) Will Doyle - 4 / 9 | 0 / 1 (Missing 12 games) Sebastian Jimenez - 3 / 4 | 1 / 0 (Missing 18 games) Vikram - 1 / 4 | 0 / 1 (Missing 20 games) Dan Don - 0 / 4 | 0 / 0 (Missing 21 games)
$teamname isn't included in any of the sorting, so it wasn't reorganized. Just throw $teamname in at the beginning and check the output again. array_multisort($teamname, $mw, SORT_DESC, $ml, SORT_ASC, $tw, SORT_DESC, $tl, SORT_ASC);
you're 99% on it - teamname at the END and it worked perfectly... teamname at the beginning and it sorted by teamname... thank you SOOOO much... if you play magic, ill send you something nice 
Heh. I do, sometimes, but my friends have so many cards they're stacked up in the closet. I want for nothing. :p
ok, well thank you
Thank you so much for taking the time to write your thoughts. This is very well written and full of great insights. I've recently been leaning towards the "hire local" strategy, and you really pointed out the benefits there. I think it's about time I start going to my local PHP group's meetups instead of ignoring the emails. For so long, I've been an island developer and never networked with other developers. That is going to have to change if I have any hope of finding some strong developers to bring onboard. I'm making the move to git ASAP, and researching as much as I can about recommended procedures for milestones, issue tracking, and the like. I agree with you that git has gotten so popular I simply can't ignore it anymore. As you said, Odds are any developers I want to bring on will be very familiar with it. As I move ahead, I'll also keep in mind that "Traction takes time", especially with a monster project like ours. I'm guessing it will take about 3-6 months of strong pair coding before someone is fully up to speed with all the ins and outs of our project. My goal is to hire smarter than me, but I realize that I won't be able to realize the gains of that until new developers have wrapped their heads around the codebase. Thanks again!
It's kind of ugly, like there is this fancy dropdown for user profile, right next to a standard select for language. It's also seems a little confusing, like when adding a page on the demo install, there is like 10 wysiwyg editors, 4 titled editor, what are they all for.... Different parts of the page? Some pages have a menu border with no items. It just seems really unpolished and unintuitive.
Admin area looks like it was made for geeks a bit... Meta site tree?! Footer site tree? Customize a dashboard? I don't think it would be very fun explaining all that to clients honestly.
No, this article was published in [1763](http://seldo.com/weblog/1763/2/15/php_needs_to_die_what_will_replace_it) during the treaty of Hubertusburg.
Sounds like your head is on straight. It's like a romantic relationship. You don't want to start a long-distance relationship for no reason (or to save money). You don't want to move in together right away, either -- start with some casual dating (contract work, small fixes/enhancements). But don't be shy about saying you want to grow into a fulltime position. Also, don't be 100% dead-set on having an employee. There are a lot of good freelancers out there with no interest in a salary job, but who will gladly work 30-hours weeks at a reasonable rate for a cool client with no BS. But they'll have a dozen or two old clients they don't want to abandon. I know because I'm that guy. I've been hiring guys because I have a great client who wants most of my time, and I'm paying others to help out with all my old, less consistent clients, because I don't want want to give up those relationships. Finally, git again. Just do it. You can keep all your svn history when you move to git, so do it ASAP so you can start experimenting with all the stuff git offers. It really is an order of magnitude better than subversion.
Most bigger and more mature forums would much prefer for your site to integrate with *them*.
Since PEAR is pure PHP, you can just include a copy of the relevant project with your plugin. WordPress, e.g, does this for Text_Diff.
PEAR exists for a reason, I'd use it if possible. You should check whether your or your client's server supports it, and if it doesn't I'd contact the hosting company to see if they can fix that. If you're planning on releasing the extension to the general public, just add a note that PEAR is required.
90% of this is micro-optimisations that you can gladly ignore, 5% bullshit, 5% common sense. Here's a choice quote from the bullshit category &gt; Avoid OOP whenever you can.
Surround the PHP code with this: if (isset($_POST['gb_subscription'])) { // Code here } Alternatively, if you don't want to mess with the code, you can divide this into two pages. First one has the form html, not the code. The code goes in a new file, perhaps called subscribe.php. Change the action in the form tag in the first file to action="subscribe.php" That should also solve it.
If you're doing this for yourself, or a client, or something *not* for the public, I would say go ahead and use PEAR. If your hosting provider doesn't have PEAR enabled/installed already, you can usually call them and request it. If they refuse, then you can either find another host, or just write it yourself. If you're writing something to release in the WP plugins directory, I would do something like so if server has pear include pearpackage.php else non_pear_dependent_code() As far as PEAR being frowned upon, that really depends on who you ask.
You have to login to take this quiz....*closes tab, moves along*
click facebook icon, it will take 2 seconds
Best practice: $_REQUEST['gb_subscription'] There's no need to split it into two files. Also, you're hard coding the WordPress referrer and duplicate form submission variable, but you probably knew that. &gt; this code should only be executed if the user data passes your validation. You're not doing any validation in this snippet. * email_address - validate against standards RFC 5321 and RFC 5322 (there are libraries and regular expressions that do this) * location - you need a domain to compare the user's input to (a domain the set of all values that an independent variable of a function can have). Otherwise, I could pass "the moon" or something more malicious as my location.
Nope. I don't have a Facebook account, nor do I want one, nor do I want to be tracked like that by someone I don't trust. Looking at your history, all you do is post links to awcore.com and that's just tacky.
Yeah, this might as well have been titled "I'm not a programmer, but when I do program, I google other articles to write my own targeting the keyword 'performance'" Any performance article should include benchmarks which show how many iterations it takes to save 1 second IMO, it would put a stop to 99% of this nonsense. EDIT: Actually looking at it, the majority of this persons submissions are just blogspam anyway. If you were ever curious what a few pages of submissions over a year gives a person in link Karma, the answer is "80, when the submissions are crap"
okay, as you like
As someone who avoids PEAR like the plague, let me tell you why. From my experience, PEAR is **massive** and frequently unstable. The array of dependencies is a nightmare for simple code management. There are a few bits of functionality that are genuinely useful in PEAR and actually hard to replicate, but the majority is overkill. Word of warning, once you get into it, you may find yourself struggling not to use it. I prefer to maintain flexibility - and I enjoy the challenge of doing things myself.
It's entirely possible, and somewhat common, to do a local PEAR installation under your project directory. This allows you to bundle the PEAR libraries required without relying on the end-user to have access to PEAR themselves. PEAR has a bad reputation, which at one time was well deserved. It has improved quite a bit in recent versions, and is growing in popularity as a way to distribute code. Don't count it out completely.
I'm not sure why you would both include a third-party dependency and then code around it if it's not present. If you can replicate functionality, there's no reason for the dependency at all. Unless you're suggesting that the code should gracefully degrade in the absence of the library, but in that case the code should emit a warning or a notice to log the reason for the degradation.
I don't use PEAR all that much. I think Mail.php is the only package that I've found myself using on a regular basis. But, lets clear some things up. &gt; PEAR is massive The entire thing is, yeah, but if you just need (in my example) Mail.php, which is included in the PEAR Mail package, running `pear install Mail` from the command line installs 1 (one) php file. &gt; frequently unstable Since I have the page up, the Mail package was released at version 1.2.0 on 2010/03/01. In that year and a half a number of bugs have popped up, yet there are still only 8 open tickets out of 132 total. That doesn't sound unstable, and I have yet to find a bug that compromises my system, or makes my applications completely un-usable. &gt; The array of dependencies is a nightmare for simple code management. Like I said, this is determined on a package by package basis. Mail only requires itself and the PEAR installer. &gt; There are a few bits of functionality that are genuinely useful ... but the majority is overkill. This is some awesome speculation. PEAR is a giant fucking repository of useful code. Just because you don't need a particular PEAR function/class/package right now for your project doesn't mean that code is worthless. Do you know what a Python Egg is, or Perl's CPAN, or Ruby's Gems? PEAR is/was the same thing. You aren't supposed to be using the whole thing to solve every problem, but it doesn't hurt to take a look to see if someone else has already solved that problem and borrow the code they freely contributed to the community. &gt; Word of warning, once you get into it, you may find yourself struggling not to use it. I prefer to maintain flexibility This is just unfounded as well. Any marginally competent PHP Programmer should know what the include_path is, and if a piece of code found in a PEAR package is available, and compatible with the project's license, it does not take more than 10 seconds to install the PEAR library in a local project directory instead of system-wide. Have you ever used something like timThumb, or have in your toolbox a mysql abstraction class? It would be exactly the same idea, just include it in your project and it acts like a file you wrote yourself. &gt; and I enjoy the challenge of doing things myself. I too enjoy the feeling of accomplishment after completing a difficult to implement solution, but there is no reason to avoid other people's code if it does the exact same thing you need to have implemented. Doing so would be foolish, which is why things like CPAN, RubyGems and Python Eggs exist: *To help developers avoid code duplication and to help distribute code that is more secure and better tested than the same code if everyone had to implement it themselves* Like I said, I hardly ever use PEAR packages myself, but if you are going to hate on them, do it for a good reason.
Yeah it is, there's tons of shit to consider and I guarantee that any half decent forum addition will push your project back several months. It's not worth re-inventing the forum wheel.
Pretty sure #10 would produce an error
Pretty sure "$numbers = array(1, 2, 3 =&gt; array(1,2,3)); Now count($array);" Will also cause an error seeing as though $array isn't defined. This guy should probably take his own quiz.. This quiz won't really help you learn anything important. 
which question?
oh my god this is just typo thank you very much for this notice it sould Now count($numbers);
Holy crap all of these quizzes are super whack... Assume $keys = array("apples", "oranges"); Which of the following search mechanism is most accurate if (in_array('oranges', $keys)) { ... } (This one is actually correct) if (isset($keys['oranges'])) { ... } (It says this one is correct) both are the same Just because you call the array $keys doesn't mean it sets keys instead of values... The array is really equal to: array( 0 =&gt; 'apples', 1 =&gt; 'oranges' ); Doing isset($keys['oranges']) won't do crap. 
It's very simple, use pear, and put it in your project. Update the include path as needed so you don't worry about what system they're on and what version might be there. Or check the Zend stuff, there's a bit of overlap and theirs is much more up to date. 
http://blog.straylightrun.net/2008/12/03/tip-of-the-day-codeissetcode-vs-codein_arraycode/
&gt; You scored 100% At 3 minutes, 39 seconds &gt; Congratulations You won +20 Point(s) What do I get for my points? What's the exchange rate between these points and reddit karma points?
I do have good reasons. You just don't agree with them. If you're going to slate someone's opinion, try not to do so on a subject that you "hardly ever use". I'm not wrong - PEAR sucks balls. Please - feel free to disagree with me and use it. God knows, that last thing I want is for a world where developers only do things one way - that'd be like a global Microsoft.. So, I respect your opinion, Mr "I-hardly-use-it-and-don't-need-anything-more-complex-than-mail", and you've made your point. I just think you're wrong! :)
As others have said, you would typically include the Pear lib with your plugin, rather than expecting the end user to have it installed. Lets say you're using Pear's Mail class, and your plugin is located at `plugins/myplugin/index.php`. You would put Mail.php in `plugins/myplugin/libs/Mail.php`, and simply include the file from your index.php. However, most Pear libs use several files, and you will run into problems if they're not in your include path. For things to work correctly, you'll need to modify the include path in your index.php to something like this: set_include_path( __DIR__ . '/lib' . PATH_SEPARATOR . get_include_path() ); You might have to use `dirname(__FILE__)` instead of `__DIR__` for PHP versions prior to 5.3. **Except this is a bad thing to with WordPress** There is zero isolation between plugins in WordPress. There's no namespacing what so ever. Anything your plugin does can negatively impact other plugins, and vice versa. Changing the include path could cause other plugins to crash, or other plugins changing the include path could cause your plugin to crash. There is also the problem that another plugin might be using the same Pear lib, but perhaps a different version from what you're using. In a properly autoloaded system only one of version will be used, which may not be the version your plugin is using. Even without autoloading, you can't have two different classes with the same name. If your plugin and another plugin are both trying to include Mail.php from different locations, there is going to be a crash, because you're both trying to include different classes, but both classes have the same name. In short, Pear doesn't adhere to the WordPress "namespacing" scheme of prefixing all function and class names with a unique identifier to prevent name collisions. If you're not doing it already, all your functions and classes should be prefixed with the name of your plugin. For example if your plugin is named `myplugin`, all your functions would be name `myplugin_foo()`, `myplugin_bar()`, etc. If you really want to use a Pear lib, you'd have to rename all the classes to match, and find all places in the Pear code where classes are being included, and modify the code. Obviously that gets very messy. tl;dr No, I wouldn't use Pear libs in a WordPress plugin.
no i think there is quizzes will not be open withot that
80% in 1 minute 34. Maybe I should slow down..
I'll pay you 20 points to fix that that sentence.
Not sure who is down voting you. You're absolutely correct. Edit: Except I never saw that question in the quiz. Maybe the OP removed it when he realized his mistake.
In what way is it not working? Are you getting a connection error? Are you using the "mssql_" functions? Have you tried installing the SQL Server drivers from Microsoft? More info please.
Me either. Must be the OP. It was in another quiz on the same site called "Best Way" questions. 
Thanks for your reply. I'm getting a server error (It won't even display the page.) This is the code I'm trying to use. $link = mssql_connect("192.168.1.47", "username", "password"); if (!$link) { die('Something went wrong while connecting to MSSQL'); } I have not installed any drivers from Microsoft. I assumed they were in the packages I installed (apt-get install php5-mssql, etc...)
Content blatantly stolen from http://www.kiran.org.in/content/part-ii-strings-and-arrays and http://www.slideshare.net/tutorialsruby/zend20certification20review20document
I found this and tried it and received the functions not available message. if (function_exists('mssql_fetch_row')) { echo "MSSQL functions are available.&lt;br /&gt;\n"; } else { echo "MSSQL functions are not available.&lt;br /&gt;\n"; } So I am definitely missing something, I just don't know what.
Did you already apt-get install php5-sybase?
I think the standard way of doing it is to bundle the current PEAR package with the application, but use the locally-installed one if it's a higher version. How you negotiate that is up to you.
Okay, so your version of PHP doesn't have those functions for connecting to MS SQL, you'll need to update your server to include them (a quick Google search returned this site http://www.dotvoid.com/2010/01/adding-support-for-ms-sql-server-to-php-in-linux/). Hope this helps.
By the way, if you're getting a generic server error message rather than a PHP error message, it sounds like you're using Internet Explorer. If so, go to Tools &gt; Internet Options &gt; click the Advanced tab &gt; un-tick "Show friendly HTTP error messages".
I don't know... why *would* anyone want to use LESS if it makes the web look like garbage?
Do you mind elaborating? If this is a case of content-thievery, I'll go ahead and start removing links to awcore.com. Edit: I'm doing a bit of investigating, and it seems that the majority of the content on awcore.com may be stolen. If that's the case, the site will be banned from the subreddit. Edit 2: Yep. After a quick plagiarism check on a number of the articles on this site, I've found they're all copied word-for-word from other sources, some of which they could not possibly have gotten the rights to.
I didn't see it, which slides?
Google chrome. I'll look for a similar option.
yeah I did. (It defaulted to that what I tried to install php5-mssql)
You didn't address any of my points. The fact that I may not use it much is irrelevant, which I point out in the reply, because PEAR itself is nothing more than a collection. Your point that the entire collection "sucks balls" is pretty amateurish. There is good code in there, and if you would take the time to look through it instead of throwing shit and claiming your ego doesn't support that idea you might not come across as an asshole. &gt; God knows, that last thing I want is for a world where developers only do things one way - that'd be like a global Microsoft.. Way off point. You might want to read my response again and learn a little bit about code reuse.
I think I'm confusing myself. Do I need to be using freetds or did I go down a wrong path there?
[here's a review of it](http://www.matchadesign.com/_blog/Matcha_Design_Blog/post/Fork_CMS_Review/)
&gt; You didn't address any of my points. I don't need to address your points. I'm not here to school you. I dropped by to let the OP know what I thought - because he asked. PEAR is a beautiful, simple idea. The reality of it is so far from beautiful and simple it's not worth my time. &gt; you might not come across as an asshole I gave an opinion. You told me I was wrong. I gave your reply the courtesy it deserved. An asshole wouldn't jump on someone else's thread (which asks for an opinion) to tell a commenter that they are wrong. About an opinion. &gt; Your point that the entire collection "sucks balls" is pretty amateurish. I am an amateur. Nobody is paying me to give my opinion on Reddit. I do, however, get paid a fuck load to tell people that I don't like PEAR. &gt; Way off point. Off point? Stating coders do things the way they like is off point on a thread about the pros / cons of PEAR? Do you even speak English? &gt; You might want to read my response again and learn a little bit about code reuse. I'd rather gouge my eyes out than read your reply again. I could learn a little about code reuse though. Clearly, having spent years battling with the shit contained in PEAR, I know fuck all about it. For the record, in case you really feel like you have to know - I spent over 3 years maintaining a brilliantly written intranet system supporting some 5k staff globally. Sounds great? Nope - it was dependent on code within PEAR. 
If you haven't already definitely read up on, SQL Injection and XSS. Two of the simplest security faults with people getting into programming (PHP in this case).
Start learning some new server side languages so that php doesn't become the only tool in your toolbox. You don't have to give up php, but expanding your horizons will help you.
Depends how much money you have.
Interacting with XML
Try learning Java or C#. Your familiarity with HTML and Javascript will help with JSPs (or ASPs if you're going .NET).
* The array_unique() function retrieves all the unique array values (Unique Array Values) - http://www.kiran.org.in/content/part-ii-strings-and-arrays and http://www.slideshare.net/tutorialsruby/zend20certification20review20document * You can use count() to determine the number of characters in a string (Accessing Strings as Arrays) - http://www.kiran.org.in/content/part-ii-strings-and-arrays * Which function would you use to rearrange the contents of the array ('a', 'b', 'c', 'd') so that they are reversed? - http://phponweb.wordpress.com/2011/04/28/which-function-would-you-use-to-rearrange-the-contents-of-the-following-array-so-that-they-are-reversed-i-e-array-d-c-b-a-as-the-final-result-choose-2/ * You cannot perform multiple replacements by passing arrays to str_replace() - http://www.kiran.org.in/content/part-ii-strings-and-arrays and http://www.slideshare.net/tutorialsruby/zend20certification20review20document
Make something.
I got that impression, I was just focusing on the content of that one quiz. Thanks for looking into that.
the best way I challenge my skills is by simply filling a need, even if someone already has. I've realized I don't have a very organized way to make notes on my thoughts for various other projects, so now I'm working on building a type of web app that organizes notes, projects, etc. Has it been done? Sure, but I bet there is a lot I could learn during the progress of the project, perhaps even more complicated things than I've done before. The best way to learn is through example, and the best examples you can learn from are the ones that can directly affect your well-being/productivity/whatever
To add some specifics to that, learn server stuff: Apache, sendmail, bash scripts, and generalized linux commands come to mind.
And then you restarted Apache, right? Edit: I actually just tested, and didn't need to restart Apache as it already does that when you apt install. My output before and after install: tim@ender:~$ php test.php Functions not available tim@ender:~$ sudo apt-get install php5-sybase ... tim@ender:~$ php test.php Functions available Could be something borked in your php.ini possibly, might be that apt encountered something it didn't expect. Also, see if you have /etc/php5/conf.d/mssql.ini
Necessity is the mother of invention! Write something you think you could use, there's probably a better chance you'll get it done. Collect comic books, movies or video games? Write something to organize and store them, maybe a wishlist/pull list, that sort of thing. Advance it by pulling the rss feeds from Marvel and somehow use that information with it. Actually that sounds pretty cool. Don't steal my idea :p
I was thinking more along the lines of python/ruby/perl/etc, but those are definitely good suggestions.
And what you need done.
And who your father is.
I do have the mssql.ini listed. 
Thats weird... I did this and it output that it is available, but in browser it doesn't work? root@emaildev:/var/www# php databasetest.php PHP Deprecated: Comments starting with '#' are deprecated in /etc/php5/cli/conf .d/mcrypt.ini on line 1 in Unknown on line 0 MSSQL functions are available.&lt;br /&gt; 
I'm kind of in the same position. I'm starting to learn a PHP Framework so that my future projects are more secure and take less time to code. It's amazingly difficult to transition, at least for me though.
My original thought turned out to be right! `sudo /etc/init.d/apache2 restart`
When I was at that point I started looking for part time (student) job in web developing at small company's. The pay wasn't high of course but that didn't matter to me. I just wanted to test and improve my skill. Faced new problems with each new project, but took my (own) time to widely study them and try multiple solutions. As mentioned earlier; you shouldn't lack basic security knowledge and some LAMP knowledge might be handy too. You could also try Joomla development.
This is a good resource for general security: https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Secure_Coding_Guidelines
Thank you! I do know briefly about them. (I once had a friend try to demonstrate SQL injection to me, but he couldn't get it to work, probably because of how messed up my own code was). In fact, one of the main reasons I'm so afraid of making websites/webapps for people is that while I can get it to function, my knowledge of security is so shallow that I can't be sure that it'll remain secure as more people use it (or try to break it!)
I do this sometimes too! The problem, I feel, with this approach is that there's too high a temptation to simply "hack" some barely working solution together to fulfill the purpose, as opposed to good and solid code.
It is showing that mssql functions are available after restarting. I'm still having problems connecting to the database though :-( Do you see anything wrong with the connection string I posted above?
&gt; somehow nearly all my new clients have already bought a GoDaddy account before hiring me Amen.
I would work on becoming more proficient with what you already know now... writing semantic css/html markup, learning new javascript frameworks/libraries like jquery and backbone, etc. For PHP try to take coding to the next level... start doing more OOP and better organization, focusing on security, maybe making your own libraries to use, trying MVC frameworks, etc. If not using source control to improve your development, would be worth learning Git and practicing that with your coding. After expanding your knowledge of these areas in depth, start looking into other languages that could compliment your needs as well.
Why is $_REQUEST the best practise? Keeping GET and POST variables apart is usually a good idea. Also, it's unncessary information for someone who needs help with if statements. I didn't claim it was necessary to split it into two pages, just a possibility if you want to do minimal changes to the code.
Yep. Shoot me a PM with the details/your e-mail, I'll send you a quote?
Same here. I'm trying to make a CRM that does exactly what my company needs -- nothing more, nothing less -- but I don't want it to be a hack job. Everything I've done so far in my life is a hack (just out of college) but when I re-implement everything, it's just more hacks. Ugh. So I'm staring at CodeIgniter and I'm making no progress because I fear doing it "wrong."
I know what you mean. Recently started to learn Zend Framework. It really is a huge difference to working with plain PHP. On that thought, making your own framework is another interesting topic to learn and to try your skills on. Currently dismanteling some of the popular ones to see how they do stuff and to get some inspiration.
Hack's stood on the shoulders of Hack's (apologies Newton) is how the software development world works.
Learn about a modern version control system, my personal choice is [Git](http://git-scm.com/). It can be a bit daunting, but basic usage is actually quite straightforward, and its easy to get help if you need it. [GitHub](http://github.com/) is an awesome service. The other option is [Mercurial](http://mercurial.selenic.com/), but personally I think Git is the safer bet (it has the entire Linux community behind it). Look into PHP frameworks like [CakePHP](http://cakephp.org/). Working within a framework will help you to avoid a lot of the pitfalls that you will otherwise have to learn the hard way. Just be sure to go with something popular. Become familiar with JQuery if you aren't already, it will make Javascript a **lot** more pleasant. Oh, and also familiarize yourself with cloud deployment options for your chosen technology stack (perhaps [phpfog](https://phpfog.com/) - not an endorsement, just the first thing I found). Making a good decision here will make your life a *lot* easier down the road, especially if you are successful and need to scale up. If you are willing to consider other technology stacks, you might look at Ruby on Rails. PHP is a good language for getting stuff done quickly, but it gives you a lot of rope to hang yourself with. Ruby is a better language, and its learning curve is fairly shallow coming from PHP. I personally use Java, which has many advantages, including speed and a great tool set, but it would be a steep learning curve coming from PHP.
No, but I'd like to think the person I hire would be able to. If both our designer and I can do it, our new dev should too. Proper frontend coding isn't a designer only skill.
I think both of those options are too big a jump from PHP.
You don't know even half of MySQL until you you've read: http://www.amazon.com/gp/offer-listing/0596101716/ref=tmm_pap_new_olp_sr?ie=UTF8&amp;condition=new
Join a company an learn how businesses work. Programming is one thing, project and client management will help you a lot in the future.
Are you getting any specific error? Are you getting your die message? If so, make it read `die('Your message ' . mssql_get_last_message());` Are you watching network traffic on the Windows box to make sure your requests are actually hitting it? Do you have a firewall on the Windows box? If so, are you allowing the proper port(s)? Simply not being able to connect can be caused by a ton of things, a lot of which have nothing to do with PHP itself. Your environments are extremely important to have correctly configured.
Java's pretty easy, though.
I would avoid trying to do this if at all possible. You will quickly discover that the support for doing this in PHP is pretty half-assed. And when you finally get it to work, you'll discover the hoops you have to jump through to just get the ID of the row you just inserted. Trust me, it's not worth it.
Not if all you know is PHP, and the ecosystem around it is huge.
well that's down to the coder to decide I suppose. if you are truly dedicated to doing the project and and learning something from it then you'll be able to curb those temptations. sometimes the solution IS some ugly hack, but maybe not. with resources like stackoverflow.com it is easy to get most answers to what you're looking for so again it comes down to the passion of the coder to go the extra mile 
&gt; Why is $_REQUEST the best practise? Ever work with multiple developers on thousands of scripts? It's really a simplification as you don't have to keep track of where it's coming from. In this particular context, bare-bones PHP with no additional layers, there are no practical differences comparing $_REQUEST to $_GET or $_POST. However, if you ever use a framework such as Zend Framework, the story changes. $this-&gt;_request-&gt;getParams(); http://framework.zend.com/manual/en/zend.controller.request.html &gt; Be cautious when accessing [GET and POST Data] from the request object as it is not filtered in any way. The router and dispatcher validate and filter data for use with their tasks, but leave the data untouched in the request object. In general, never trust user input, and $_REQUEST / $_GET / $_POST is as raw as it gets. --- An aside, I've seen this in live production code: $safe_value = $_REQUEST['value']; $sql_query = 'DELETE FROM fart.foo WHERE name = ' . $safe_value; No validation, lying variable names, no LIMIT... man, bad stuff. Not implying that anyone here would do that, just wanted to pass that gem on. Moral? Again, never trust user input or variable names. Also, use prepared statements, etc. --- &gt; I didn't claim it was necessary to split it into two pages, just a possibility if you want to do minimal changes to the code. True, you said it was an "alternative", but there is no practical reason for doing it; it increases clutter, spreads logic out unnecessarily, creates a more inflexible system, etc. Not something I would recommend to someone who is unfamiliar with it. Just because you can doesn't mean you should.
I guess Ruby is much closer to what he's learned so far since it's focused on web development. I started with Java before learning how to make web apps so it seems easy but I can see why it seems like a big jump.
I think the point of that sentence was to explain that the potential hire should be able to take an image mockup of a page and make it happen in HTML/CSS/PHP, without requiring hand-holding.
Then those people were not frontend developers. They were backend developers, which is not what this posting is for.
&gt;I've thought a lot about outsourcing vs. hiring in-house and am not averse to either one. As a tech support worker living in Canada ask you on behalf of my brothers and sisters in the industry to hire locally. People *really* appreciate and respect your company when you're willing to hire within North America instead of jumping on the off-shore train. Furthermore, if you're worried that you might "hire the wrong person" locally, you still might outsource the wrong person as well! And, to sweeten my argument, [here](http://www.guzer.com/pictures/another_cute_kitty.jpg) is a picture of a kitty.
It certainly doesn't offend me. I was simply trying to clear up what I saw as a confusion between the two of you.
start learning a back end language other than php. you'll thank yourself a million times over. not only will you quickly realize how poorly php is designed, but you'll gain new ways of thinking about/solving problems, even working in php.
Perl
Some things not listed elsewhere in the comments: * Automated testing (PHPUnit and/or Selenium) * Message-Oriented Middleware (Gearman, RabbitMQ, etc.)
I would say it would be more important to become proficient in developing full stack applications in PHP before you bother to learn another language. Once you are proficient, transferring techniques to another language is generally quite easy. But if all you know is the basics of several different languages you don't have much to offer anyone.
Linux?
Genuine question: What exactly do you mean by "hacks"?
Yeah, security in general would be my next step.
Start googling for businesses that are the same as your mom's. Email each one with a brief intro and feature list and why they should care. Then build a website devoted to selling that product and become the expert in your little niche. Start a blog. Build a demo site for potential customers to use. Ask your mom for contacts in her industry and approach them. And for spaghetti monsters sake, if other people are going to be relying on your software to run their business, make sure it's secure, follows good coding practices, and know that if something breaks you must be available to fix it.
Those languages will give somebody the ability to extend their career beyond web development, if they felt so inclined. More options are always good. If I was totally dead set on web development, I don't think it'd pay to learn more server side scripting languages than php. I'd make a lot of stuff and go for depth in web development with php rather than breadth. Meaning, learn more of what php has to offer. (If i were to expand my perspective, I'd learn languages that were as different from PHP as possible. Strictest languages I could find. Strongly typed, etc.)
What are your goals? This is the most important question. I can't plan your next move without knowing where you want to go. If I had to guess, based on absolutely nothing: Learn more about css because there is a lot to learn about css. Learn a javascript framework (I prefer jQuery) it'll make your life easier. If you haven't been using PEAR learn to use PEAR and get lots of productivity. Your list of technologies is long. If you know some, you can know a lot. If you can know a lot, you can be an expert. If you can be an expert... I dunno. Money? WAT R UR GOALS???
Nice, that's a lot of potential business. Pricing will become pretty important, so when you get your first few buyers don't worry about it too much because this helps build your portfolio (for potential companies, you can say look at these companies that already use my software!) but after that, if this is going to become something bigger make sure the price you are asking makes it all worth your while. If you really think it could be big, think about what you would have to charge if you had employees.. You do not want to be the sole developer for a product that is used by xx number of companies. If that happens, you aren't charging enough.
On the SQL Server side, make sure the account you setup is set as a sql authentication account and not requiring you to change the password if you use the username/password to login with a SQL Server client.
You currently have a target market, which is great! Now you need to decide on distribution. Your options are sell a downloadable product or host it yourself. Without knowing much about your product, I can't give a clear suggestion. But your product sounds like it is highly specialised, and this means there are other web designers/developers out that that have clients in this industry and would probably love to use your product. So if you limit it to only your hosting, you're losing market share. So, again without knowing too much, my suggestion would be offer 2 things: 1. A licenseable &amp; downloadable product aimed at web developers/designers. If it's a niche market you're after, you'll be able to cover more of it with this option. Web developers might be less inclined to use a hosted solution if their client can see they could have done it themselves for cheaper. Offer a once off licence fee usable on 1 domain. Additional domain licenses should be cheaper than the initial one. Important: Don't offer free lifetime support, you'll end up bogging yourself down with it. Give 6 months free support and updates with an initial license, and charge a small fee for every 6 months after that if they want to continue the support contract. Depending on how specialised your product is, you might be able to get a cheap sponsored listing on hotscripts. 2. A hosting service for non-technical end-users who want to skip the middle-man (web developer) and come to you. Have them pay per month, this'll cover your continuing hosting costs. Hmm If I think of more, I'll post it here.
You'll need a licensing system that is tied to their domain. Have them insert the domain name on your website's client area to generate a license key. You can use $_SERVER['HTTP_HOST'] to check what domain their website is currently on when checking if the license key is valid. You'll also then be able to know their domains, so if they ever come to you, asking for support for a domain they didn't register, you can tell them they've violated the license agreement, cancel their support etc. Though, with PHP, you'll never be able to ensure they don't hack the license code. But the thing is, people who do this would probably not pay you anyway. You can go after them, cancel their current support and licenses, etc. If they are selling it to clients, contact the clients directly because they would probably not be happy. In the end, there is no sure fire way, but this is why you have the initial higher cost for the first license, then additional licences are cheaper, so you hope that they look at the choice between hacking and potentially loosing support/future updates versus paying a smaller fee and ensuring all of that continues. Also, you'll probably have people who crack it and release it on the web as warez, but the thing is, again, anyone who gets it from there, probably would not have paid you for it anyway. You have to weigh the options. There are a lot of legitimate web developers out there that would be happy to pay for a good product that'll help them get a website up quick, so if you want their business, you're going to have to risk getting the bad people, too. :/
Ok, well, if you implement a call home feature, I'd suggest one thing: ZIP up the package (can do with PHP easily, there are ZIP classes out there you can grab) on the fly on the server when they download it so that you can insert a unique ID/key into the package which you can use on the call home feature to identify which account it came from. Then you can easily check which accounts are using it on too many domains :) Also, regarding updates, it's not just new features that they'll want, it's bug fixes! If they have a customer complaining about a bug, or if they run into it themselves, it's going to annoying the hell out of them if they can't fix it and can't get a bug fix from you. ;)
You might want to think of using a script to update. You can then upgrade db fields at the same time + most people will stare blankly at you when you say svn/git
I think you're making this *way* to complicated for a guy who's asking about if statements. I know how $_REQUEST works, but does the guy asking need to know that before learning if statements? No. Seperating stuff into more stuff is what MVC is all about. Even for a simple page like this, a strict MVC approach would move the html into one file and the code into another. I think you know that. In this case it's a quick, simple solution that requires a minimum of knowledge.
Why not give the source code? No serious business will sell your code to others and if somebody illegally sells your code it will be easy to find out about it because the niche is quite small as I understand...
Then once you're done that project learn how you can make it better and improve it. Then make it better again. Then rip code from that thing into a new project. Then make that better. Don't "make a forum from scratch" because you're reinventing the wheel. Make something original that's either a proof of concept or is actually useful. If you feel you've plateaued technically, challenge yourself creatively and you'll learn you need to learn more technical concepts.
My advice would be that you attempt to pick up some small freelance work. I was in a similar position to you when I started university and made a decent amount of money while learning these languages in more detail. I used the site which is now vWorker.com. The amount you can get for a job is a small fraction of what the work is worth in the real world but it's a good place to start. The jobs offered are very varied and I think a good way to apply your knowledge in real world scenarios whilst learning more. 
Here's an example of injection capable code. Written stream of thought here in the editor so forgive any minor errors, but you should get the idea. &lt;?php $name = $_POST['name']; $mysqli = new mysqli('localhost','dbuser','dbpassword','databasename'); $mysqli-&gt;query('insert into visitors (visitorname) values ("' . $name . '")'); The problem here may not be obvious until you envision someone calling your program with a form with the field "name" filled in as: Bob"); DROP TABLE visitors; -- ...then your query becomes insert into visitors (visitorname) values ("Bob"); DROP TABLE visitors; --"); While the rest of the line would be obvious at this point, the '--' turns the rest of the line into a comment and closes the (missing) quote. In any case, using bound parameters (ala $mysqli-&gt;bind_param) will protect you from SQL injection.
2. ??? 3. Profit!
Learning about managing LAMP stacks could be handy. Edit: Grammar derp
Get a job!
look into PHAR 
1. adodb php 2. and/or freetds or if on windows: php sql driver for windows via windows 2008 client dll (new method far better-windows only) all sql server now is routed through the windows sql server client 2008 - *nix doesn't have this so you can use sql_enhanced odbc with adodb php (or python). 3. honest answer. better off using xampp on windows platform then the sqlsrv 2.0 (or 3.0CTP denali) can be used with php5 and many platforms -they have sqlsrv api and pdo now . 4. make sure you enable the port to listen on - static - not dynamic tcp port - and open a firewall port (duh) - by default sql can communicate using other methods. 5. the server must be setup for mixed authentication - default is usually ntlm which adds alot of active directory overhead you don't want to get into. then you have to grant such user access to the database/tables/roles like any other sql (don't use the sa account). telnet sqlserver 1433 - if it doesn't answer you won't get very far. 
Ahh little Bobby Tables 
Keep in mind that the last word is not necessarily the last name. People from many countries and regions have two last names, the second one being the mother's maiden name. Georgia's last name could be Cobb and not Torcasio.
Came here to say the exact same thing.
I always encourage beginning programmers to learn frameworks. I know that most programmers say things like "make sure you learn the basics first!" and things like that, but here's my reasoning: 1. This will help you learn how to program within the parameters of other people's code. You will rarely start a project from scratch in real world circumstances 2. It will speed up your development time. php frameworks like CodeIgniter and cake, and javascript frameworks like jQuery are designed for rapid application development. Learn them and love them. You can also speed up your css development by using 960 grid and jquery ui. Besides that, you're always going to have to learn how to implement third-party systems into your projects. WordPress, Drupal, Joomla, Zen Cart, etc. These are all starting to become widely used systems in the business community. Learning how they work, and how to develop around them, is going to increase your marketability as a programmer. Just my opinion, hope this helps.
Even if you have no intention of using them, using languages with a different philosophy will help you become a better programmer in your primary language. Hence the recommendations people give for learning a functional language (I think [Haskell](http://learnyouahaskell.com)'s a good choice).
jQuery is awesome, but if you're planning on writing full-on Javascript applications, I'd recommend MooTools. [This page](http://jqueryvsmootools.com/) does an excellent job of describing the philosophical differences between the two.
Become great at one or two of them.
Make something. Learn how to set a server, installing apache or nginx, mysql, and php, then configuring them properly. Then, learn something about NoSQL (mongoDb, solr, cassandra, etc.). Then, build something.
&gt; and I enjoy the challenge of doing things myself. Once you realize that reinventing the wheel is nothing but a distraction from solving the real problems, your life will become so much more awesome (this should not be taken as a PEAR endorsement however)
So true, unless I make a better wheel! You know - with 22", 3-spoke alloys and a pair of Pirelli Ones?
I've created a few sites using Drupal 6 + Ubercart, and the main issue is that Drupal has a fairly steep learning curve IMO. If it does what you want it to do *out of the box* (or with a few contrib modules) you will be fine. If it doesn't.. well good luck.
It's very early stage, but the outline of my coding style is there.
You (and developers after you) would benefit greatly by separating your PHP and HTML. I think that's your lowest hanging fruit here, i.e., it's the easiest change to implement and it'll have the greatest impact on scalability and quality. You don't need to use a MVC framework, but you should at least use some self made or already available template system. You can easily create a "View" or "Template" folder, and do views easily (for example)... - Use PHP's extract function and &lt;?= $variable; ?&gt; in the views - Use a str_replace or similar function to replace {variable} tags in views Or check out one of the various PHP template engines... **At the very least, jump out of PHP instead of echo'ing big chunks of PHP. It may just be me, but I find that sort of code very difficult to edit** 
Lose the short tags. Shorthand-echo is acceptable, if you're targeting 5.4+, but using shorthand open tags is a recipe for non-functioning code. Don't reinvent the wheel, adding wrapper classes around functionality without adding anything to them. Your database class seems to only limit what you can do with MySQLi, without simplifying the process at all. You also seem to be using concatenated queries in some places, and prepared statements in others. Use parametrization in *every single case* you need to input data into a query. No exceptions. Never echo out large blocks of HTML. It's sloppy, and kills syntax highlighting. Instead, close PHP while you're producing HTML and open it to echo or use loops. I see that you do it the right way in some places, and the wrong way in others, such as in your sidebar class, which is another problem, by the way. Templating that way is going to lead to headaches with maintaining your code down the road. I would also suggest learning a framework, such as [Alloy](http://alloyframework.org/). It helps structure your project into a RESTful HMVC style, which is easier to work with than patched together includes. You should also avoid including an .htaccess file that has rules outside the scope of *necessity*. Your various .htaccess rules could interfere with existing configuration.
Okay. I'm putting the sidebar, header, footer in a class because I will want them to be more dynamic in the future (active states, mainly). How would I do the same thing without doing it the way I am now?
In an MVC format, one would have those things in Views. If I'm just writing a bunch of code that I don't care about maintaining, I just toss the code for the header/footer into a header.php and footer.php, without the OOP cruft. But, you're asking for tips on writing good code, in which case I do suggest using an (H)MVC framework. Edit: Oh, and don't prematurely optimize. Write code to make it work; don't add OOP cruft to it with the intention of adding stuff to it in the future. Do it in the most simple way possible, and refactor when you need to.
 function __autoload($n) { Don't, use SPL autoload as it lets you have more than one autoload function.
I agree and want to adapt. Do you have any code that I can look at?
I completely agree with learning something drastically different from what you use frequently... I do a lot of oo and may mess around with prolog when I have some free time.
The reason for the OO is to set the title, keywords, etc dynamically - also to enqueue scripts/stylesheets as needed. Is that not reasonable? But yeah, do you have any code I can look at?
Investigate the Front Controller Pattern which bootstraps your app. That saves you doing includes etc on each page if you have a good autoloader that can do it for you. Also for larger projects the MVC pattern is nice. 
Kudos for asking this, it's a smart way to learn. Ideally you wouldn't want your database login credentials hardcoded into your codebase where they'll end up endlessly duplicated in plaintext by revision control software. Also, there's a significant growing antipathy towards the singleton design pattern that you might [enjoy reading about](http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/).
Do you really need it to be dynamic? By doing it dynamically, you add unnecessary complexity to your design. Unless you're trying to write a whole new CMS framework, it's ill advised. I don't have any code that I can really point at, but [this thread](http://www.reddit.com/r/PHP/comments/a9mio/lets_compile_a_list_of_really_good_oo_php_5_code/) gives you a list of good code to review.
Cool, and yeah but it's localhost. Thanks for the article.
You should consider checking how the MVC pattern works for this. CodeIgniter is pretty good for a first PHP framework.
In addition to what everyone else has said, don't use @. It's just lazy, your code should handle errors or undefined variables when necessary and masking them can hide real problems. In production you should have it set not to show warnings so you do not need to hide them, however for development you want to see and handle those sort of warnings.
I'm trying to learn by experimentation: http://pastebin.com/N8Fuxdgm It works but it feels extremely dirty. What's wrong w/ it?
I agree about looking at CodeIgniter, and learning about MVC. [This video](http://net.tutsplus.com/tutorials/php/create-your-first-tiny-mvc-boilerplate-with-php/) on Nettuts is also probably worth a look. Even if you never build your own boilerplate, it's still good to get a feel for how MVC works in general. As for template engines, I think that, given a proper understanding of PHP, you can use the language itself for templating.
Check out [MyBB](http://www.mybb.com/). Really, phpBB and SMF are just jokes, and anything else is very insufficient or bloated.
Check out Twig http://twig.sensiolabs.org/
You know something's wrong when the [5th most popular programming language in the world](http://www.tiobe.com/content/paperinfo/tpci/index.html) has to *beg* for community involvement. Kudos for actually doing something about it, though.
Tiobe doesn't mean anything whatsoever and is a retarded way of mesuring popularity. Also, open source projects ask for help all the time not matter their size, that's the way the whole thing works ...
Eh, we're not really begging. There are a bunch of active doc team members already. We're just trying to engage the community at large, and perhaps take some of the grunt-work off the backs of those who have the knowledge to address the more complex bug reports.
Every community is always looking for more contributors. There's nothing worse than closing your doors and stagnating. Getting new blood will only help the project in the long run. This isn't begging, but providing ane asy way to get started.
Lol it is a bad habit. Thanks.
Your bitly API key is hanging out in some commented code in classes/fn.class.php. I know it's commented out, but stuff like that shouldn't be committed to a public repository. I would define it as a constant in a place like config.php, since it will make deployment on other platforms very painless. 
ah, you are right. Thanks!
Why is using shorthand open tags a recipe for non-functioning code? I am a big fan of short tags. If you control where your code is deployed, and can always guarantee short tags will be enabled, it is far more aesthetically pleasing and easier to read quickly.
If you're writing code that you can guarantee you will always have control over, then have at 'er. Otherwise, use full open tags.
Ok agreed. That's fair enough.
Why would you be concerned? Everyone is welcome to submit patches to PHP's codebase, to be reviewed by others. There's no barrier to entry to fix things in PHP itself, other than that you write good code.
Commit a generic config file to the repository first, set it in your gitignore file, then make your changes to it. Or something to that effect - does anybody else have suggestions on how to do this?
I think this is a pretty well done project. The other suggestions are all good, but well done!
Good on you to for it, not sure what sprokexec's problem is, but this seems like a great way to get people involved.
If you know the basics, learn the tools that the professionals use. Check out some frameworks, learn some OOP concepts, and pick a favourite version control system. My favourites are CakePHP and git, but everyone has their own preference :) And as someone else said - build something. It's the only way you'll really learn!
I wouldn't say that there's anything really wrong with it, other than being a bit clunky. I like to use straight php for my templating, using the extract() function to get variables out of arrays, and putting them into HTML/PHP templates. I wrote up [a simple example](http://pastebin.com/Qphd59aT), to demonstrate what I mean. It was taken more or less intact from the video I linked to earlier. Hope that helps!
&gt;There's no barrier to entry to fix things in PHP itself, other than that you write good code. and even that's not a barrier for some contributors, if a recent release is any indication. *sorry, I had to.* 
Twig seems to have one serious flaw that makes me hesitant to recommend it to newbies. It does not escape anything by default. You either need to add `|e` to each of your tags, or manually turn autoescape on. This is an XSS disaster just waiting to happen. Everything that goes into a page should be escaped by default, and it should take a special option to output unescaped HTML. This is how most good frameworks do it. 
The template class does not seem to escape any variables. What if the title or content of a post contains HTML tags such as `&lt;script&gt;`? Those things will either break the page layout, or even worse, open the door to nasty [XSS](http://en.wikipedia.org/wiki/Cross-site_scripting) vulnerabilities. To fix this, you should use `htmlentities()` somewhere in your `replaceAll()` method, so that raw HTML does not go into the page unless you absolutely need it.
This was exactly my point about not committing login credentials to your revision control software.
I agree... the best advice you could give! Git is a good choice
Yes, generally you should commit a clean `config.example.php` or `config.default.php` and instruct users to copy and edit the file to `config.php` in your `README` or `INSTALL` file. Source: [Many](http://drupal.org/documentation/install/settings-file) [popular](http://wiki.phpmyadmin.net/pma/config.inc.php) [projects.](https://github.com/cakephp/cakephp/blob/master/app/config/database.php.default)
watch for sql injection! in single-timeline.php: $arr = $a-&gt;grabTimeline(@$_GET['id']); in the timeline class public function grabTimeline($id) { $query = ' SELECT e.*, tl.title AS `tl_title`, tl.id AS `parent_id` FROM `entries` AS e LEFT JOIN timelines AS tl ON e.parent = tl.id WHERE ( e.parent = \''.$id.'\' ) '; $id could be '); drop table students; [see here](http://xkcd.com/327/) best to use parameterised queries or at the least always mysql_real_escape_string or whatever the relevant escape function is. 
&gt; `@$_GET['id']` I'm guessing this is a workaround to avoid `isset($_GET['id'])`? As stated elsewhere, don't use @ unless it's absolutely necessary.
It seems the best you can do is {% autoescape true %} ?
I'd rather used FluxBB because it's in active development.
Hey, how about adding up/downvoting to comments in the docs? We *really* need to get rid of some of the shittier examples on there.
Doing this now, great advice.
Will [this](http://www.mrclay.org/2010/01/28/sql-server-2008-domain-auth-php5-ubuntu-server/) help?
Those of us with SVN karma for the docs have access to the notes system. There are some people who do actually go back through the already-approved notes and remove crap, but much of that system relies upon catching the crap as it comes in. The problem with trying to add a voting system is that there are no accounts on php.net, so there's no real way to limit people to a single vote. As well, php.net is mirrored very heavily, so the system is really distributed. I agree that the notes need moderation, but I don't think a voting system is feasible. If you do have examples of notes that you'd like to see reviewed, we would greatly appreciate it if you compiled a list and provided us with it. I, personally, would be glad to review them. Edit: It occurs to me that you might be talking about the documentation examples themselves. This is actually a perfect example of what you can use the documentation editor for. Go ahead and pull up the document for a page, edit the example if it sucks, and submit a patch.
Seperating code and html is still a good first step, if you don't want to go MVC right away. I've done this for several fix-me-up projects, and for most pages that aren't complex, the html becomes the view and the code becomes the model, if you want to put it all into MVC later. Learning MVC is of course a very good idea, but I wouldn't put it at the top of my list of things to learn. I've come to appreciate the seperation of presentation and code better by going from mixing it all up in an awful mess in my noob days, then seperating it and finally by going MVC.
Has the docs team considered migrating the docs to git, and in particular, github?
All of PHP's source control is moving to git in the near future. Here's [the info](https://wiki.php.net/rfc/dvcs).
Well, it's a fork of PunBB so it couldn't be all that bad.
"XML and SQL can be mixed together" ಠ_ಠ
Using the [PEAR package suggested here](http://www.reddit.com/r/PHP/comments/ku8td/) looks like a good alternative. AFAIK the only other ways are changing your system settings or doing funny things with LD_PRELOAD, both of which are bad/mucky ideas if you even have the permissions for it. EDIT: [This package,](http://pear.php.net/manual/en/package.networking.net-dns.net-dns-resolver.query.php) to save you the click.
So its a language developed to be *like* PHP but *not like* PHP and more like Javascript, and its interpreted by Java? Or did I miss the picture...
Yep. Almost exactly like PunBB... that's why I like it. 
Sounds about right.
the syntax is so... clean :O
not by java but in java bytecode of the Java Virtual Machine v7: http://en.wikipedia.org/wiki/Java_Virtual_Machine oops: http://www.caucho.com/resin-3.0/quercus/
It's like PHP, but... sexy :O
I don't give a fuck about the things listed there. Where's strings as first-class objects and a consistent API?
Stopped reading at less "$". Call me old fashioned, but I love my sigils! Also &gt;like in javascript Languages should **NEVER** have this as a selling point. Never.
This is not PHP.
Yeah, that should go at the top of every template if you're using Twig. But it's too easy to forget. Autoescape should be enabled by default. Other than that, Twig looks like a simple and elegant template system.
I'm not sure I agree :) You could use them to write very simple dynamic web pages as XHTML (or something similar) DOM then before it is rendered to a string you could do all sorts of fun things. You could do a diff with the previous page you sent to that client and only send the changes, a clever little JS library and you'd have free Ajax. SQL would be syntax checked before it was sent to the DB. Would you need an ORM any longer? I'm not sure. Would it make the ORM slimmer - yes. Quicker? Yes. Native JSON and CouchDB sounds like a match made in heaven. Would compling to JVM byte code be quicker than native PHP without APC? With APC? Does having access to the JVM allow you to migrate parts of your code to Java, Clojure? Jython? I'm sure we've all read the "I moved to Python and became 20% more efficient" (actually I came from Python to PHP so I feel the pain every day) But I agree, it's not PHP. So let's cherry pick the bits we like :)
You realise that SQL, as used by databases, is not really standardised? That is, there's a set of core functionality (that nothing implements /entirely/), but for the most part it's database-dependent. Therefore, you cannot really have a SQL datatype, unless you're restricting yourself to a tiny subset of SQL (creating tables and the like is out).
i want to connect all of them together so i could launch all those commands with 1 $variable
As someone who does both for a living, I'd say JavaScript has a far better syntax. It has also had callbacks and the like since forever. There's so much in PHP that is utterly needless and seems like a hangover from trying to imitate perl and C at the same time - things that are utterly pointless for an interpreted language. 
No shit?
No. There already is a language with similar syntax to PHP that you can run in the JVM -- it's called Java. Although the syntax displayed on that example page is less like PHP and more like some of the frameworks I've seen available for Node.js.
&gt; The aim is to keep the philosophy of PHP but adapt it to be more in sync with the Web of 2010 What a load of shit
[XHTML is dead.](http://isxhtmldead.com/)
Python ?
They said 'Web of 2010'? ಠ_ಠ ... shit I better fix my watch because mine says 2011.
your question is not very clear. It almost sounds like you're wondering how to make a function with a single input parameter. As far as having 1 variable, that doesn't really make sense. Your query variable is a string. Your query result variable is a database resource. The line variable is a row result from the database. All 3 variables are different and basically depend on each other, so there's no way to mash it all into 1 variable. That would go against basic programming principles.
It's on the JVM, so a true object oriented language has to be out of the question i suspect.
`resultset = select * from foo where name = 'bar'` - what? 
you kinda like FUNCTION you can make get a bunch of calculations together and it will output the result, its kinda like that, but i just want for example do this: i for example have echo "line1\n\r" and echo "line2\n\r" and i want to call both of them with one $variable whenever i put it into code it will output both of those echos 
Point? Use python. 
This is a great illustration of what happens when someone who's been programming for a few years gets it in their head that they know what they're doing and should write their own shitty, terrible language. PS - If your JavaScript doesn't have semicolons, your JavaScript is bad. Use more jslint.
Very very old news. But some of the ideas were sound. Not the JS-syntax, mind you. But any successor to PHP should at least bring XML or SGML literals to the table, built-in regex support (Perl6-esque), and maybe even SQL literals to do away with manual escaping or manual management of bound parameters. Let's not even talk about first-class OO features or an actual Unicode string type. But making it incompatible, or deprecating the features that separate a scripting language from compiled ones (that means eval) isn't going to fly. And speaking of a JVM-based successor, I believe Quercus has better chances.
Get the job done quick. Fix it later. 
You realize that perl is an interpreted language, right?
It's not possible to use only a single variable to do all of this work. You have several things that need to be accessed simultaneously. Since you already know which variables you're accessing from the $line array, using extract() is a bad idea. Just use $line['colname'].
If you'd like some security testing done, let me know. (Injections, XSS, etc)
As someone who has used both PHP and JavaScript for longer than I can remember, it is my opinion that JavaScript has a horrendous syntax, and anyone who makes it a feature to imitate it, especially the lack of semicolons, is bat shit insane.
It's hard to understand your english, but I think you should try more examples and tutorials from the web.
The XML, SQL, and URI literals seem sloppy, and potentially error prone. Plus, I don't see benefit. Getting rid of $ also seems like a bad idea. It's been pointed out over and over that $ actually does serve a purpose. I like the native JSON support though.
YES YES YES. Worst part about PHP by far is the lack of consistency.
Crazy pythoneers... 
Scala? 
Oh boy.
It seems well-meaning but syntactically it's alphabet soup. SQL query literals? Let's assume something like that could be made readable and understandable by a normal human - how would that be possible to parse non-ambiguously? How many modes does a language have to have?
That could be a coder's philosophy in any language, I don't think that's very PHP-specific. If there is a philosophy that's unique to PHP, it'd be more along the lines of very shallow learning curve, easy to use for beginners, free, good documentation, and pretty forgiving. Putting ease of use even ahead of security.
I'm all about reinventing the wheel in the sense of building your own libraries, as a freelancer, if it helps you get the job done faster / better. But why do you want to reinvent a language that works just fine for people who know it? PHP, like all great languages, developed organically. You know what an inorganic language looks like? VBScript. Seriously, go take on a job that required you to write in VBScript, then come back here and tell us if you still have a problem with PHP as it is.
Features that are largely pointless and do not fix the actual problems with PHP. I'm speechless. I... I didn't know PHP could get worse. :\
Agreed. JavaScript semicolon insertion is a bitch.
You use semicolons in JavaScript though. You can skip them in some cases, but iirc it's considered as bad practice since it's slower to execute and it's easier to cause bugs without them. I love JavaScript, but I love PHP too... The only thing I want improved is consistency.
no from/to string auto-conversion fuck this language. auto-converting is must-have feature for me...
[Sir Ben Kingsley's Opinion](http://www.youtube.com/watch?v=0z_Qqnq8pI8) 
Its that "native SQL" thing OP mentioned. Beats me if I know which SQL variant he intends to make native...
Python is awesome, and that has no semis.
Yes and I still fail to see why anyone found it useful for anything other than scripts.
I don't know .. does Scala force every string to be boxed? Can you supply a boxed string to every other part of the java api's where they support/expect a unboxed string? 
Except it's called "**PHP** reboot". 
http://www.deployhq.com/
http://www.nusphere.com/products/nucoder.htm or something similar + a bit of phone home code will be enough
Writing in VBScript is like writing your website in Excel. 
Give me semicolons over magic invisible whitespace any day of the week.
Oh, I don't know. I might be willing to give up my semicolons for a language that was 'secure by default'.
My preferred method: * install xdebug * html_errors=on in php.ini * restart server var_dump(get_included_files(), 1);
&gt; You should consider using lithium, well designed, well tested and coded by some guys from the CakePHP project. But not even resembling the original CakePHP.
Unless you have some sort of work requirement, I would advise against CakePHP. This is coming from a long time CakePHP user, it used to be good, it's long since been superseded in almost all areas.
It's interesting that you get +8 for a link that we've all read, yet I offer some thoughts on what direction PHP should evolve and get -3 /r/php confuses me. PHP isn't the best language out there and it is seriously lagging behind other main stream languages. It's got to change, but if everyone seems to hate DSLs, NoSQL integration, compilation to a virtual machine (JVM, CLR, Parrot or whatever) ... where can it go? What can the language designers do?
What do you mean by boxed string? 
hear hear!
That's the problem. JS could be good, but it allows people to be SO bad. 
In Java, Strings, like Ints aren't objects by default. They are pass-by-value. Java doesn't do type erasure either. So an unboxed string would be a byte-array with a zero byte at the end. A boxed string would be an actual object with methods, that is passed by pointer and a pointer to its datatype (and method table). We don't get confronted by the completely different semantics, because when you assume a string to be 'read-only' after creation, the semantics of pass-by-value and pass-by-reference are mostly the same. Where things get messy is that you don't have methods on the string value, and when you are dealing with reflection. You can subclass Strings, and use those strings in any place where an unboxed string is expected (without manually casting). In hindsight this was a bad default. I can imagine supporting unboxed string, ints and floats for hardcore performance reasons in really number &amp; data crushing parts of the algorithms, but it is not the right default. (and it is the default simply because literals are of this type) Here's a piece of Ruby code to illustrate the power of having these core types behave like proper, real objects: # this should print "Hello, world" five times [1,5].max.times { puts "dlrow ,olleH".reverse } That's the kind of functionality, the original comment was referring to when he asked about things like Strings being 'true objects'. Now, you could just create a language that always used proper objects for strings, ints and floats, on the JVM. But you want to send and receive unboxed types when dealing with the rest of the JVM ecosystem. The whole point of being on the JVM, is all the ready to go library code. 
Are you confusing Java with another language? You can do "hello".reverse in both Java and Scala. You can't subclass String, it's final. Also, there's no Int in Java. There is in Scala. And the code is very similar to the equivalent Scala code. 
I'm not saying semicolons are inherently good or bad as part of language syntax; I'm saying that if you're writing JavaScript without them (as the author of "php.reboot" indicates he does) then you're writing bad JavaScript.
 require_once("sarcasm.php"); 
I'm probably not following, but do you mean something like this? function block(&amp;$block = false) { if ($block === false) return ob_end_clean(); ob_start(function($buffer) use (&amp;$block) { $block = $buffer; }); } block($variable); echo "line1\n\r"; echo "line2\n\r"; block(); echo $variable;
It's not magic, it's standardised and extremely logical. If you are simple enough to consider [PEP8](http://www.python.org/dev/peps/pep-0008/) "magic" you probably shouldn't be programming. It also means that most Python code is at least somewhat readable because it means people follow a clearly defined, logical standard for the way they lay out their code.
Okay, then you are looking for something like this? function runl8r($code = null) { static $later = array(); if ($code == null) { $codeToRun = $later; $later = array(); return function() use ($codeToRun) { return array_map(function($run) { return $run(); }, $codeToRun); }; } $later[] = $code; } runl8r(function() { echo "line1\n\r"; }); runl8r(function() { echo "line2\n\r"; }); $variable = runl8r(); $variable(); And your original question was something like this? $variable = function() { $query = "SELECT BLA BLA"; $result = mysql_query($query) or die('Query failed: ' . mysql_error()); while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) { extract($line, EXTR_PREFIX_ALL, "line"); echo "$line_some over at $line_twosome"; } } $variable(); If you are using PHP &lt; 5.3, you need to revert something more ugly, eval perhaps.
Hey now, Rasmus is a nice guy, there's no need for this. 
nice ill try that, i used "include" and just wrote the code in different php file, i wanted to do a loop and it worked thanks everyone!!! :D
niceeeeee i knew there was a way, i just used include for now and put all of the commands in different php file :P illl def try this thank you!
I tried using mssql_get_last_message() but nothing was output. I'm double checking on the server allowing connections now.
Are there any alternatives? I'm building a web based front end for a small business that uses sql server.
Thanks for your reply. I'm digesting some of your options but I did telnet the server and I was able to find it.
&gt;PHP.reboot is a reboot of PHP, each Hollywood movie has its own reboot, why not doing the same for one of the most popular programming language. Every "reboot" Hollywood has ever made as been an abortion.
Just like PHP :P
No go :-( I'm about to pull my hair out :) 
An MMO? Synchronizing everything, and scaling the system past 1 server. The design stuff on the front end is ridiculously easy once you've got the backend sorted out.
So making something like the player class or utilizing database conventions aren't as bad as the synchronization?
Umm... "utilizing database conventions"? Anyway, the answer is that it really, really depends on a bunch of stuff, and you haven't explained your idea apart from "it's an MMO" at all. In order to even start on a project of this size you need a document explaining what technologies you're using, your architecture, how the game works from a technical perspective, etc. And for the record, if you're thinking of tackling this with PHP/mySQL alone, you're nowhere near the point where you'd even understand /how/ to go about doing this.
HTML and CSS should be relatively easy. There are certainly enough frameworks and libraries available to make a lot of the more involved work easy. 
In game design the hardest part is always making it "fun." But technically, in this instance scaling for large user base and combating cheating are probably also hard problems to consider.
Do NOT code a game engine. http://scientificninja.com/blog/write-games-not-engines
The obvious mistakes here is not to dare to dream up a new language, but to call it PHP. Without being overtly negative, it should be painfully obvious that the PHP community consists of people that are either not interested in a new language, or are just unable to switch. Now, there *is* a developer community that actually likes shiny new things, has proven willing to adopt [new language variants](http://altjs.org/), and has a language that actually looks quite close to what he's building: The [JavaScript](/r/javascript)/[Node.js](/r/node) community. Seriously, if someone implements a coffescript-like module that speaks vanilla JavaScript with added support for E4X, plus his SQL, Xpath and URI DSLs, it is guaranteed to get used more than this ever will. 
&gt; And for the record, if you're thinking of tackling this with PHP/mySQL alone, you're nowhere near the point where you'd even understand /how/ to go about doing this. Good god this. I'm sure it's "possible" in some alternate dimension, but there are languages much more suited for a task like this. I'd recommend going with Java, and I even *think* Flash has capabilities as well.
Umm... Flash is a client-side tool. I expect that Java, as you're thinking of it is a client-side tool as well. They have nothing to do with what's running on the server.
that article was great! It makes a lot of sense.. don't build an engine for 1 game, have the game be the engine. Thanks!
&gt; If you are simple enough to consider PEP8 "magic" you probably shouldn't be programming. Your link doesn't distinguish between that which has syntactical impact and that which is simply how somebody likes to see code written. It doesn't diminish the magicality at all; if anything, posting that as a response to my comment thickens the arcane cloud around Python's whitespace problems.
dont worry, I'm proficiant in JavaScript, a bit of jquery, HTML dom, ans some CSS as well
&gt; I've only been coding for less than a year ... I would say I'm above average than the ordinary text book learned programmer First of all, if you make statements like this, you're on the wrong side of [Dunning-Kruger](http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect) and you don't really have an understanding of the depth of knowledge and experience that programming requires. It also doesn't seem like, in your mind, you've made the logical distinction and separation between "game" and "presentation." The game (as are all games) is just a large collection of math and the presentation is just a way of converting that math into something people perceive as "fun." Start thinking about the two separately because that's how you should be thinking about all software. To answer your actual question, though, by far the hardest part about doing all of this will be to make the game synchronized, scalable and responsive. If you've got 2 users on a single server, PHP + MySQL would work for you, but if you're actually talking about developing a serious game that has actual players, you have to start investigating other technologies as well. There's a pretty strong argument to be made, too, that an MMO like this requires a reasonably low latency, which would almost certainly require holding open a connection for minutes/hours/days and if that is the case, then you should go ahead and count PHP out altogether (because PHP isn't designed to run for days at a time, nor is it designed to hold open connections for days at a time). I can't imagine a single project I'd use MySQL for any more, so that's out too (at least there's Postgre, but let's be honest: an RDBMS is not useful here). The hardest part, I think, is going to be designing a system that's easy to write into and performant enough for your audience's demands, but also scales out horizontally. 
Why would I make a text based mmo with flash?
hell if I know, it's not my idea :P Just throwing out a couple alternatives.
1. You should not be writing your own eCommerce software. There are 10 trillion existing software packages and they're all better than something you're going to write yourself (or anyone, really). I'm going to assume you aren't actually planning on using this anywhere, but rather this is an exercise for you. 2. You use a dirty, dirty superglobal all over the place. The primary benefits to writing OOP code are data encapsulation and logic encapsulation. By directly accessing the superglobal like you are, you're removing both benefits - the data isn't encapsulated because it's in a superglobal variable and the logic isn't encapsulated because it will have to leak outside of the class, wherever you use the members you create in the session variable. You should clean this up so that an instance of this class is self-contained and keeps track of its own data. Later, when you are using an instance of this class somewhere, you can put *that* in the session variable if you'd like. Your object doesn't seem to keep track of any useful state of its own, why is it a class? This looks more like a collection of functions that operate on a dirty, dirty superglobal, rather than a well designed object. 3. Minor point, but capitalizing the first letter of keywords (Function, True, etc.) is pretty weird and you won't see it very often. I suggest switching to lowercase keywords (function, true, etc.) because they're more consistent with standard php practice and most other languages also have lowercase keywords. 4. This is an anti-pattern: if($_SESSION['cart'] ['itemcount'] &lt; $_SESSION ['cart'] ['maxCartItems']){ return True; }else{ return FALSE; } Instead, just do: return $_SESSION['cart'] ['itemcount'] &lt; $_SESSION ['cart'] ['maxCartItems']; There's really not much else to comment on.
... This tells me you're **definitely** not ready. Completely forget what your game is going to look like. HTML, Javascript, jQuery, Flash, CSS, Java, are all completely irrelevant, and something to be dealt with after 80% of your game is complete. Now, figure out how the game works. **Not** "the user presses a big red button and 30 seconds later an attack on the enemy starts." **Instead**, you should be thinking more like "when a user decides to attack another user, push the job into a message queue, where a daemon picks it up. Every second, the daemon wakes up and checks to see if there are any jobs to run. If there are, it loops over them and runs them. To run an attack job, it runs &lt;this-piece-of-math-here&gt; to decide the winner, then stores the result in a database." If you don't think like that automatically when you're planning your game, you are not ready to create an MMO.
I'm not sure what language you're talking about, but with regards to Java, that's all 100% false. 1. String is an object in Java, always. Maybe you're thinking of boxing for actual primitive types? String isn't primitive in Java though. 2. Strings are not byte arrays in languages that support unicode, like Java. 3. You **can't** subclass String in Java. It's a final class. 4. Java *does* do type erasure. The lack of reification is actually a sore point for a lot of people that write Java on a daily basis. 5. All of Java is pass-by-value, so I'm not sure what you mean by this pass-by-reference business. tl;dr: you pulled a bunch of shit out of your ass that wasn't true and a first-semester CS student in 2 weeks into a Java course would be able to point this out.
He's using a custom SQL-like DSL: http://code.google.com/p/phpreboot/source/browse/trunk/phpreboot/sql.ebnf
And...this is converted to DB-specific SQL how? In addition, how would I access DB-specific SQL features?
Dear IhavenofaceXD, What you're trying to do is admirable - you're attempting to control error situations and output something useful. However, I regret that I must inform you that you are attempting to re-create a wheel and so far all you've got is a box. If you're interested in using pre-existing solutions that have worked for thousands of developers already, I suggest you take a look at [exceptions](http://php.net/exceptions), as your entire code could be distilled into a single try-catch block. Thanks, oorza
I wish I had an answer for you... my conjecture is that his first-class SQL support is a lot like using a ORM with its own language (e.g. Doctrine has DQL I believe it's called) - which is to say, it gets translated to supported SQL databases and you don't use DB-specific features.
Mmm, thought so. Unfortunately, that means that in order to do certain complex things, it wouldn't be possible to use the built-in SQL support... in some of my code, half my queries would have to end up as strings again, negating the point of a first-class SQL datatype.
I would have to dig up some old code that I don't have access to right at the moment. I'll try to remember to find it when I get home from the day job. If I remember correctly though, the connection string has to be "just so" for it to work. Make sure you're including the right port numbers, etc., and play around with including the login in the connection string rather than including it with a separate command.
Exactly... I wonder what the thinking behind first-class SQL-as-a-datatype support is. It seems the most dubious of all the features added here.
Well no, because if you actually read PEP8 you'll realise that there is a standard and that standard is just as descriptive as semicolons and braces.
Curious mind here. Where does one read up on how to build some sort of daemon like you described?
1. Correct this is just practice. 2. So how should I be storing the values? Should they remain in the session and pull the entire cart into the class and do what I need to do and then export it back out to the session? 3. Thanks for taking the time to check it out. 
I hope this is a homework problem. The amount of work needed to make a secure, usable cart is going to require more 112 lines of code. But as a homework excercise, I have a few comments: 1. How do you handle different items? 2. What happens if the item count is invalid and an item is added or removed or updated? 3. How do I find my subtotal?
I'd store the values as members of the instance itself, e.g. $this-&gt;items or $this-&gt;initialized and then put the entire $cart instance in $_SESSION... $cart = new Cart(); $cart-&gt;addItem("foo", 12); //buy 12 foos $_SESSION['cart'] = $cart; This allows you to keep track of the cart itself (everything would be encapsulated) without losing any functionality - instead, you'd gain some, as you could very easily change the backing storage of your cart from $_SESSION to a database or something else. And because everything would be encapsulated, you've more closely adhered to best practice and your code is more "correct."
Are you saying MySQL is bad, period? Is that personal experience talking, or do you have links/posts explaining why? I'm genuinely interested.
Yes, MySQL is bad, period. Compared to Postgre, tooling support and performance are almost identical, so the reason I suggest Postgre over MySQL is that Postgre has a history of caring about correctness and MySQL has a history of caring about... nothing. * MySQL didn't always support foreign keys and the implementation now is half-baked. * MySQL doesn't offer as much indexing options as Postgre does. * MySQL doesn't enforce common sense SQL and allows things like `SELECT foo, bar FROM table GROUP BY foo` and inserting a value of 10.0 on a column that's constrained -9.9 - 9.9 * MySQL lacks sane full text support * MySQL lacks support for some datatypes, like arrays. These are just my observations and things I've run into. I'm sure the full list of MySQL grievances would be too large for a reddit post :) EDIT: way to go guys, downvote and move on. Heaven forbid you actually engage someone you disagree with in discourse! You might actually learn something or change your mind! The horror!
It's just a regular program, written in any language you can think of, that contains a while(true){ readNewJobs(); doJobs(); }. It doesn't touch the web, it just reads in "jobs" that the web interface sends it over RabbitMQ or the like.
No, because I can easily see at a glance whether there's a semicolon. I cannot see whether it's 7 spaces or 8, or whether it's spaces or a tab, or perhaps a mix.
&gt; I cannot see whether it's 7 spaces or 8, or whether it's spaces or a tab, or perhaps a mix. Well PEP dictates that it should be 4 spaces, and any well written python code will conform to this. If you cannot manage consistently indenting by 4 spaces (or having an IDE that does this), what the fuck? 
As a manager and sometimes outsourcer, I work with many people's code. I prefer to be able to quickly see problems rather than having to rely on second-order mechanisms to deal with invisible gremlins.
1. They go into an array under $_SESSION['cart']['item'][] 2. The item count doesn't effect the add and subtract process. The removal process is based on the array key and when it adds an item it goes to the next available array slot. 3. Not dealing with money right now. I uploaded this to see how I was doing so far.
I think we need to discuss the definition of 'best.' PHP has: * Ubiquity * Community support * Documentation * Ease of use What can language developers do? Work around this. Currently the language is at a stand-still and regressions are absolutely out of the question, perhaps something like what Coffeescript has done for JS can be done for PHP? :)
XD Gotcha! Thanks for the advice!
You've given me a lot to think about. Thank you for that!
&gt;They go into an array under $_SESSION['cart']['item'][] You will need the index values of that array to be deterministic for reasons you will encounter if you develop a fully functional cart. &gt;The item count doesn't effect the add and subtract process. The removal process is based on the array key and when it adds an item it goes to the next available array slot. Why not do a count(cart[item]) instead? &gt;Not dealing with money right now. I uploaded this to see how I was doing so far. Okay fair enough.
I've never seen anyone capitalize function, public, private, true, and false like that.
Ubiquity is good, but every job I've been in have owned their own servers so I've been able to install what I like. The community support is amazing. Documentaion is peppered with all the old cruft, but it is amazing. Ease of use: The learning curve is gentle, but I personall prefer Python, Ruby, C# and Java to PHP. PHP 5.3 is almost nice ;) SQL as DSL? I've been wishing for that for years, take writing SQL (DQL) in Doctrine: $q = Doctrine_Query::create() -&gt;select('u.username') -&gt;from('User u') -&gt;leftJoin('u.Phonenumbers p') -&gt;having('COUNT(p.id) &gt; 3'); I mean, come on. Let me just write SQL please... Coffeescript takes the nice bits from Python, Ruby and Haskell... at some point PHP developers are just going to move to one of them. Especially if they're using Coffeescript all day at work :)
Ill take that as a compliment.
&gt;Why not do a count(cart[item]) instead? Good idea, thanks! 
Once you have worked with Python for more than about a week I can assure you that it's just as efficient as PHP, and if anything having less clutter is nicer for your brain to deal with. Anyway, having a new line in Python is just like having a semi-colon. There's fuck all difference unless someone is stupid enough to have two lines on a single line in PHP. How is: for item in items: print item any harder to read than foreach($items as $item) { echo $item; } ?
&gt; Minor point, but capitalizing the first letter of keywords (Function, True, etc.) is pretty weird and you won't see it very often. The reason you don't want to do this is that it causes an extra substitution by the compiler/interpreter. True has to get converted to TRUE. &gt; if($_SESSION['cart'] ['itemcount'] &lt; $_SESSION ['cart'] ['maxCartItems']){ &gt; return True; &gt; }else{ &gt; return FALSE; &gt; } What anti-pattern is this? 
&gt;I'm above average than the ordinary text book learned programmer (practical experience &gt; book experience for me). Drop that concept from your mind. It never hurts to go over the fundamentals.
AFAIK mysqlnd (or MySQL?) doesn't support chained statements. It's still possible for a user to cause a query to fail, or get access to more information than he is allowed to.
Too many curly brackets antipattern? :)
Use exceptions. If an error occurs, throw an exception (see [php.net/exceptions](http://php.net/exceptions)). Use an exception handler for unrecoverable errors (see [php.net/set_exception_handler](http://php.net/set_exception_handler)). Also have a look at this [tutorial](http://www.w3schools.com/php/php_exception.asp).
PHP isn't quite as horrible as JS though. Yes, when you do server side stuff wrong the consequences are worse, but JS is just SO bad!
You should definitely look into using exceptions, as oorza suggested. At the bare minimum, this requires ditching `mysql_query()` and using PDO instead, because those old functions can't throw exceptions. After that, you could adapt your function to become an exception handler instead. Also, you should use `htmlentities()` to escape the error message.
Do you have any specific example where an array datatype would be useful for a column? Till now the only place I've seen that applied (at ORM level, because MySQL does not have them) was when the developer was to lazy to create a cross reference tabel.
Or check out beanstalkd for a lighter approach at message queueing.
"True" &amp; "False", I can somewhat understand. But people usually prefer either TRUE &amp; FALSE, or true &amp; false. Capitalizing "public function", on the other hand, reeks of Visual Basic. 
 foreach ($items as $item) echo $item; works for me. Anyway, I've worked with Python for years, and I still regularly encounter problems with whitespace, especially when dealing with code from multiple sources. It's also an annoyance when dealing with snippets pulled off web sites or checkouts from open source projects which may have different conventions from how one's editor is configured. With deep/complex nesting I find that it makes it harder to quickly count indentation levels; I can easily keep track of braces but at 10 or 12 levels of Python I start smudging the screen with my fingers. Sure the editor gives me a keystroke to highlight the nested section but I like to be able to do it with my eyes.
&gt; Edit: Oh, and don't prematurely optimize. Write code to make it work; don't add OOP cruft to it with the intention of adding stuff to it in the future. Do it in the most simple way possible, and refactor when you need to. a glaring example of the kind of crap that gets passed around here as 'good advice'. FYI premature optimization - as coined - is about small efficiencies performance optimization. not about structuring your software. which should defiantly be done in a 'think ahead' manner. 
I don't know if there's a name for it, but it's basically: if(true) { return true; } else { return false. } Also, at the point where you care about the compiler doing text transformations, your performance requirements have far exceeded anything you should be doing with an interpreted language.
Any time where you would use a reference table but don't actually need the data to be in a table would be a good use for arrays, I think.
Just gonna drive by here and tell you that your variable names suck and you should try using more descriptive names.
Have a look at wfcart, that's a nice implementation of a simple shopping cart.
It's definitely not a compliment. Code standards are there for a reason.
&gt; I don't know if there's a name for it, but it's basically: &gt; &gt; if(true) { &gt; return true; &gt;} else { &gt; return false. &gt;} You're probably looking for "Gold Plating". However, that's not accurate, for this case or any case of using a ternary or inline boolean evaluation. It makes a (bad) pre-optimized assumption that your boolean test will not change. It's much less likely the case (context) will change than the terms being evaluated or the actions necessary to prepare the terms. The expanded form is always more readable and ultimately better for maintenance, in my experience.
Writing game engines is an amazing learning experience, though. By all means - write one. When you're actually making a game use existing ones though.
That's actually a pretty terrible piece of code.
I'm not sure if I agree with your assertion that the long form is more maintainable than the short form. Take some statement `stmt` that is a boolean statement - just something that returns a boolean (comparison, function call, whatever), can you explain how this: if(stmt) return true; else return false; is somehow more maintainable than: return stmt; Unless you have to do something with the result of your statement prior to returning (in which case we wouldn't be talking about it), what does the extra cruft actually add? If you have to change `stmt`, you have to change it, doesn't matter if it's wrapped with an `if` or part of a `return` statement.
Premature optimization also relates to overengineering your software design from the start. Doing so wastes a lot of time, and often results in spaghetti code, if you don't have a clear idea about how it's supposed to look in the end. If you're using an OOP style for your project, then use it for the entirety of your project. Mixing in OOP just so that you have it isn't a good idea.
&gt; if(stmt) return true; &gt; else return false; ? if(stmt){ // true case actions return true; }else{ // false case actions return false; } The fact that it is just returning now is the current functionality. If you want to modify the values, compare them, store them, do anything with them other than return them after the evaluation, you end up expanding it anyway. You would likely want this as a function that returns a value where you can say "return retval", but as it stands, expanding it would be my preference. 
I don't agree that it's a good idea to add unnecessary noise to your source code on the *unlikely* chance that you're going to have to add functionality in the future. I try not to write code under the assumption that it's insufficient (or will become insufficient) and without that assumption, I can't see how this decision is logical. How frequently do you wind up actually inserting things into the if and else blocks? You're talking about expecting to refactor every boolean return statement you make! And even if you did - the handful of keystrokes you save from having to expand the shorter return statement, imo, is not worth the decrease in readability and the increase in source clutter. Furthermore, for someone who mentions text transformation in PHP... given that PHP is a non-optimizing language, the expanded form is actually more opcodes to be executed than the short form.
Can you give me a reason as to why it matters if the word function and private is capitalized, besides the fact it doesnt follow your standards? Edit: spelling
Thanks will do!
$node-&gt;taxonomy["267"] is not an array, it's an object. You need to use the object access operator to access its properties. $node-&gt;taxonomy["267"]-&gt;tid
Let me try that! Thanks. I found out it was an object, but didn't know how to pull it.
&gt;Premature optimization also relates to overengineering your software design from the start. No. http://en.wikipedia.org/wiki/Program_optimization http://www.google.co.il/search?q=Premature+optimization &gt;If you're using an OOP style for your project, then use it for the entirety of your project. Mixing in OOP just so that you have it isn't a good idea. First of all, factually, in PHP you have to mix OOP and procedural style if you want to use OOP at all that is. there is no other way - no main method that magically gets called when executing a script. Second of all, this is a load of crap that would really love to hear the reasoning for. sure it is best to structure everything except the dispatch script in OOP. but mixing is very common practice for scripting languages. and lastly, I wasn't even commenting about the specifics, more about the "general ~~wisdom~~" being passed. However putting the header and menu in a class does improve the design, broken as it may still be. people should really use frameworks for anything worthwhile. and the [right framework](http://www.agavi.org) for anything sufficiently complex. 
RESOLVED! Thanks!
At least when you make a terrible mistake in PHP, things generally come barrelling to a halt and you get an somewhat decryptable error message. With JavaScript, it either silently plugs along, or silently kills all of the functionality of the page. Oh sure, there is the error console, but half the time it wont even give you an error message at all.
I kinda got bored so a wrote an implementation, rather than write a long comment (which would be harder to understand, after all). Abstract implementation of a data storage: http://pastie.org/2673684 A session implementation of the data storage: http://pastie.org/2673690 (note it actually should extend DataStorage, but a typo on my part) A product class (which would most likely be a domain object; ORM or any other origin): http://pastie.org/2673695 My quick prototype of a shopping cart: http://pastie.org/2673698 And gluing it togheter: http://pastie.org/2673743 Of course it's far from complete, but it's not exactly clear what you'd like in your cart implementation. But I'd figure maybe you'd see some concepts that could apply to your experimentations. p.s. of course it is untested
Because it doesn't follow the languages standards. People looking at PHP code have some level of standards (not much) and expect to see keywords lowercase. Same reason Python forces spaces instead of tabs -- consistent source code files across projects.
I can see the points for and against it, but I find if you have a. people conforming to PEP8 as they should, and b. an editor that shows indentation levels, then it's worth it to ditch the braces. As a side note, for editing PHP I have indentation levels shown, and have braces very nearly hidden (a dark colour that's barely different from the background), and I get along fine :)
&gt; I find if you have a. people conforming to PEP8 as they should Perhaps there's a cultural difference between the PHP and Python worlds in which people are more likely to behave well in the latter. In the PHP universe I've come around to always expecting (and bracing for, ha ha) the worst. Anyway, I don't want to fight a holy war on this (and I get the sense you don't either). So I'll just leave it at my bad pun.
I saw your points about Mysql v. postgres, so that aside, I don't think it's fair to count RDBMS out all together, they can still be very useful in web development.
oorza nailed it on the head when he mentioned the [Dunning-Kruger effect](http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect). It would be wise of you to take several more years and really hone your skills before trying to dive into a project on your own. That said, just because you can develop, doesn't mean you need to be a designer, but it does mean you really need to invest into learning CSS/HTML, and learning it the right way. I've never personally designed anything worthy of use in production, but i've implemented hundreds of well designed sites from Photoshop mockups. Javascript is also a required tool if you expect to do any kind of web development. I think if you have a good idea here, sit on your idea until your ready, or hire someone else to do it for you, if you think that someone else may make this game before you have a chance to. Most everyone here is talking from experience, we've all started projects that have failed because we were not ready yet, I really hope you follow that advice.
Ok, looking though some old code now. It uses Zend Framework, but here's some things that stand out that might help: 1. Used pdo_mssql driver to connect to the database 2. Include the port with the host name, separated by a comma: "X.X.X.X,1433" 3. Enclose the database name with brackets (underscores and other characters will throw it for a loop): "[my_database]" Hope that helps.
You are missing the part about it being a text based mmo. For example; Torn.com etc. Its literally text based meaning no open connections for long periods/
Fair play man. I think we agree on that.
I have no objection to you developing your own cart system. I can see where this would be useful because I've worked with companies that don't allow third-party libraries. However, if you're going to develop one from the ground-up, you should really consider all scenarios in which your customer will interact with your code; a proper cart will be more than ~111 lines of code. If third party software isn't your concern, then may I suggest: http://codeigniter.com http://codeigniter.com/user_guide/libraries/cart.html Problem solved.
I mostly meant in the context of a massive, distributed and responsive more-or-less realtime system (like an MMO) that an RDBMS isn't really very useful. There's an enormous class of problems they solve (and tbh most of web development is in that sphere) but this one case isn't, not IMO.
So? Opening an http connection can carry a fairly expensive latency penalty that's entirely unnecessary in this case. Even a text-based game should be responsive and if every action requires a new http connection, that's several dozen less ms you can do things in computationally and still have a responsive game.
Someone is using Drupal. ;)
There isn't a technical reason that I know of, just a matter of standards. Not my standards, but the generally accepted practices in the PHP community. Your following these standards or not becomes important when you start collaborating with others. Even if this is just a personal excercise, you should still be practicing to write code that others find legible and familiar. There is no benefit to creating your own coding style. TL;DR; If you submit a pull request to any project, you'll be turned down because your code style is weird.
Python really seems to lend itself to more of this type of thing... all though I may be a bit biased as I'm going through "learning python the hard way" atm. Still, even with my limited knowledge I can tell you that PHP is not the way to go with this kind of thing.
Are you building your own framework? You must be, because I can't think of any other reason why you would need to make a procedural catch-all like this. If it's not too late, I would consider using something based on MVC. In your example, you have the business logic and the resulting html in the same function. Ideally, your front controller would catch exceptions; and handle accordingly. The point here is that proper exception handling can keep the business logic separate from the presentation. 
definitely check the configuration so it is in mixed-mode not ntlm (active directory) - this is usually chosen at install. default ntlm. users are programmed into the security profile (username/password) ie SA/password - then complex access control can be used to specify in each database that a user has roles (read ,deny read). kind of like windows sharing. you have login permission - and you have file permissions - without both being granted - no dice. like ntfs permissions you can deny which takes precedence over read. so user asdf has permission to connect with certain role rights (datareader), and a default database at global security (and password for mixed mode) then in the database you can specify access rights again so database payroll denies access to asdf, database security catalog allows datareader access, database tickets allows write only access. very much like ntsf sharing/file permission - you want to set both. my theory is you connect to the sql server using the username that web user authorizes as in your auth/rest system - if that user doesn't exist or doesn't have access to the table that stores the sessions - no dice. if they do connect as that user you could use a nifty script from sqlbible autoaudit to record using stored procedures all record insert/update/deletes by the connection username (autoaudit is killer). Also this ensures that in no way assuming you setup your users in sql server that they could ever break into the code and select from tables. many people ignore this fact so when their code is haxored - the user which connects to the database has full read/write access and they can steal data or alter data through sql injection, but if their access rights are setup to READ or WRITE only to a database/table you would not be able to muck around regardless. This is how application servers should be setup always as it allows autoaudit to do it's thing (great script again) and it is equivalent to how modern apache servers change permissions to the user to do shared hosting. grab windows 7 and run it in a virtual machine on your unix boxen, setup xampp and the sqlsrv drivers for php 2.0 (microsoft) and connect using that method - it would be a quick way to analyze the difference between the linux dirvers and windows drivers - as i said the drivers are far superior for windows -&gt; sqlsrv/pdo sqlsrv -&gt; sqlserver. if i had to use linux - i would simply run a vm application server with the sql server client and xampp and just use a restful setup to pass data back and forth. windows 7 will install without a key for 30 days or something. most people will then realize that xampp on windows is far superior for sql server and work that way. now that powershell works and cygwin works for the most part windows is only deficient in filesystem (ZFS/XFS is superior to ntfs),qmail works better on freebsd but windows could run a freebsd VM and handle qmail that way - active directory in *nix blows chunks - and of course VSS and vmware integrate is far superior in windows - not sure if you can hot-add grow ZFS partitions - but you sure as heck can hot-add memory/storage/shrink storage (blank out sectors and re-thin provision), vss backups of compliant apps like sql 2005+ allows perfect snapshot replication or backup to a DR site without stopping any services (or lagging them out badly). if you just want a real database for atomic - postgres is what most people use when they realize the limitations of mysql in general. denali adds some obvious features (limit+offset) to help people migrate and it's damn well easy to get free copies of microsoft products (bizspark, azure) they are handing the products for free for businesses to develop. if i had to use linux i would probably use postgres - it is a real database that can scale - otherwise i'd stick to windows/xampp/sql server. Most people don't realize sql server is more like an operating system than a userland application - it has numa consideration built in - not sure where mysql is but last time i checked if socket 1 has an HBA and ethernet port and XX ram - it didn't handle that 4-socket machine that well. sqlserver definitely can be told (or figure out itself) that nic1 and hba1 is on socket 1 with XX ram and nic2 and hba2 is on socket 2 with xx ram. Last time i used mysql it assumed everything was SUMA which is a very very bad thing to do with modern multi-socket setups. small business developers can use bizspark, maps, or become microsoft certified and get a metric ton of microsoft products for internal use for cheaps - check it out. I was all for *nix (20 years) until i was thrown into an all windows job - i made do - and now it is just more efficient with esxi and windows - there is magic that just doesn't happen with freebsd/linux. that's my theory anyways. 
&gt;and they're all better than something you're going to write yourself I take it you're not familiar with oscommerce? Here is [a picture](http://4.bp.blogspot.com/_ag4U35aNZII/SuoOwaNuXUI/AAAAAAAABl4/-SfSSk5HglU/s400/pile+of+crap.jpg) of its codebase.
I've just recently learned all of the above points you make oorza. I cannot agree more. All future programming projects will be using Postgre.
Well, the game I work with is built using the 5 languages I know. Simple, yet the javascript/jquery make it look much more appealing.
You couldn't have said that better. :)
From personal experience, I've learned all my coding from in game, practical experience. I know I'm not 'the shit' the owner of the game makes me look retarded in talent. However, my years are/will be invested in learning server sided scripting and client side code. (Website Development Major). I'm not trying to make a neopets quality game, more or less do it for practice. Fail or win, I see no harm in trying, right?
I'm not here for the votes, I'm here to learn. Downvote all you want, it won't do anything for me. :)
Yup: even Firebug can't help you in certain circumstances...
Yup :D
^ most valuable advice. Style and design does take a while for someone as meticulous as myself, but what makes me sweat with a long blank stare is "what makes it fun", "how to scale it", and "how can i prevent cheating". (full time game dev 6+ years)
MySQL is just fine. Saying its not is like saying a automatic transmission isn't fine, you just have to use manual. Truth is, MySQL is simple, supported out of the box by every kind of *AMP package, runs plenty of professional applications worldwide, and does what it does really well. 
While I agree to an extent, I don't think op needs true realtime communication. I think a timer on a javascript loop would do just fine. You have to shoot for a ballpark you can handle, and then see how you can improve upon it after each iteration.
Phpbb
Its more the fact people don't mind extra Ms wh en its a text based game
Some style guidelines (like the ones I follow) enforce it.
what are the values that you're comparing? If you can, [use the === operator instead of ==](http://php.net/manual/en/language.operators.comparison.php) ideally, this should be enough: return (($val_1 === $val_2) &amp;&amp; ($val_1 === $val_3))
if a = b, b = c, then a = c by substitution. so this whole thing is: return val_1 == val_2 &amp;&amp; val_2 == val_3 i dunno though, im kinda highh
Why would you need to check that $val_1 == $val_3 **and** $val_3 == $val_1? That's the same thing. Just check whether $val_1 is equal to $val_3 and $val_2, and that's your answer (you don't need to check whether $val_2 is equal to $val_3 separately, because if $val_1 is equal to both, you already know they're the same).
please learn math before programming :\ that is a fourth grade logic problem...
The more elegant way I can find, with the bonus of comparing infinite number of arguments: function compareAllTheArguments() { return count(array_unique(func_get_args())) === 1; } 
Why is this getting downvotes? The code posted by OP is something one might do in a hurry - without really thinking. To actually ask a forum is seriously retarded - it mandates some thinking before posting, and any thinking that wasn't retarded would prevent the post. Of course a==b and b==a are the same (ignoring type casting).
Probably because it doesn't add anything to the conversation.
As all execution functions have been blocked, the only thing that comes to mind is the [backtick operator](http://php.net/manual/en/language.operators.execution.php). They may have forgotten about those in their paranoia. If they are disabled too, then I can't come up with anything practical other than trying to use some other mailing class that would rely on mail(). Or just complain to them. EDIT: Oh, and of course, if using backticks, the call to sendmail would be quite different, possibly requiring you to first write the content to a file and then use that as input for the sendmail command.
If the hosting company has restricted those functions, there's not really any other way to call the sendmail binary from within PHP so you'd have to use mail() From memory, you'd call $phpmailer-&gt;IsSendmail(false); to tell it to send via mail() instead.
Backtick is an alias to shell_exec() so if that's blocked, so are backticks unfortunately.
I guess that figures. Then he just might need to complain or jump ship if he's not into code refactoring.
I ended up going down this route. I had tried IsMail() earlier in the day, but it didn't work, namely because I'm working on somebody else's code and didn't realize that they weren't actually using the "settings" file that they had specifically created for Phpmailer (but left on the server anyway). Instead, they instantiated Phpmailer in another function.
For the record, I believe that I'm doing the basic essentials when it comes to security, like checking referrers, having a time-limited session token for the form submission, filtering input etc. But maybe I'm overlooking something or just plain doing it wrong?
Yes.
i was going to help, but i couldn't figure out your captcha. good luck.
Well, couple of thoughts here. first, your captcha looks only to have 5 possible answers. This is a horrible idea as it would be a simple task to brute force your form. (you have a 20% chance of getting it right just guessing) second, from a marketing perspective you might be offending some folks. (not me, just saying...) 
&gt; from a marketing perspective you might be offending some folks. I love companies who dare to take a stand. 
I don't know if someone has compromised your site, but you do have at least one problem. Your captcha is useless. I could just make a script to check "Tony Blair" every time... ...so I have. Here it is with Javascript, though it could be automated with some other language: document.getElementById('blair').checked=true; document.getElementById('comments').value='hi'; document.getElementById('formfooter').firstChild.nextSibling.click(); **Edit 1:** you'll want to use a better form of SQL escaping. The best option by far would be to use prepared statements. [clicky](http://www.php.net/manual/en/book.pdo.php). However, if you don't want to do that, *at least* call *stripslashes()* on the input after you've escaped it, to prevent the *\'* from displaying. **Edit 2:** you'll want to check your types. PHP is a really easy language to mess this up in since it's so weakly typed, but if I change &lt;input name="name" to &lt;input name="name[]" it comes back as "Array". Again, not a big problem, just unexpected behaviour to watch out for. It could have broken the page with a different implementation. **Edit 3:** [Warning: mysql_fetch_array(): supplied argument is not a valid MySQL result resource in /home/www.terrorbullgames.co.uk/www/blog/index.php on line 199](http://www.terrorbullgames.co.uk/blog/index.php?n=-1)
&gt; first, your captcha looks only to have 5 possible answers. This is a horrible idea as it would be a simple task to brute force your form. (you have a 20% chance of getting it right just guessing) Don't be silly. You don't even have to guess. It's the same answer every time.
:) the captcha is a bit of a joke. No, it's just a joke. We don't get the volume of traffic to really require a captcha. Having said that, this stupid captcha has been responsible for dramatically cutting down on spam because although it's easily forced, it's one more step than an "open" form and most people go for the low-hanging fruit first.
Thanks, I've just replied elsewhere that it is self-consciously crap. A bit of a joke. I suppose if we randomised the naming of the blair id, that would help a little. But truth be told, spam isn't a problem. The vast majority have been dissuaded by this pathetic captcha, amazingly.
Thanks for trying! Just select "tony blair" and you're good to go :) 
Haha probably.
To check if someone is using your form to send spam, have a look at your mail queue, it should be huge. As for the database, you should temporarily activate a full log of every query to see what's going on. You could also count the number of hits in every page that connects to the database versus the number of database accesses in the same period. **tl;dr** check your logs
We .... aren't strangers to offending some folks. You're right though, the captcha is awful. And yet has done the task it needed to do. Any ideas of how to increase the complexity, but maintain the joke? Thanks for the input.
Thanks, that's great advice and something I don't do often enough. In fact, I don't know even how to activate a full log of every query - is that a setting in the php.ini file?
Thanks for the updated edits - so are you saying the form input would be safer if taken as an array? Currently I take all form input and place them into an array, clean the array and then redeclare the inputs. Is that doing any good at all? At the moment, I don't check for types on this form as it's multicharacter text. Am I right in assuming there's not a type check I can do on text?
No, I mean you should check that $_POST['name'] is a string and not an array. Right now it's not a problem, but it's a good practice you should get into, I've seen github's pages get messed up by this problem. **Edit:** if(!is_string($_POST['name'])) stop_everything_omg();
Oh right! OK, never even crossed my mind. Thank you for the tip.
&gt;I'm not trying to make a neopets quality game, more or less do it for practice. Fail or win, I see no harm in trying, right? Wrong. So My first coding job was for an e-commerce company that sold digital media. We started out using osCommerce, at the direction of my boss at the time, who admittedly didn't know what he was doing. Within a year of that, we were forced with a rewrite. This is a fledgling company, making enough to get by, forced to spend the wages of two programmers for 8 months to rewrite their flagship product from the ground up. I at that point was spearheading the rewrite initiative, and thought I knew enough about coding to do it. I was wrong. We had settled on using a pre-existing cart solution and building on it. This solution lasted us 2 years before a rewrite was necessary. Why were these rewrites necessary? Because stuff that would seem simple like, fixing a 1px spacing issue on the right column, or changing the homepage style without changing the style of the main site; were nearly impossible. We finally at this point to actually look at design practices out there, and learn for ourselves what the best way to go was, by picking up what others have done. We were wrong again. While design practices are nice, which ones do you use? How do you make sure you used the right one? How do you make sure you keep using that in other areas of the site as you start coding? You really need a good plan before you ever start writing code. Unfortunately this version of the site is live today, which started under a great premise, but was executed poorly. They at one point had a team of 6 full time programmers who were dedicated to updating the one site. 6 people, 240 hours a week, for a single website that ranked around 90k on alexa, and simply sold digital media. Silly right? So there's the harm, if you don't know what your doing, you could sink your business, the example above they were incredibly lucky to not go out of business, and went from a pioneer in their market to 3rd place. Had they had someone who knew what to do from day one building their site, it would have been an entirely different story, but they didn't, they hired me who had 0 prior dev experience. I'm grateful for the opportunity, but in the end it was probably the worst long term decision they ever made. Development cannot be learned on your own. I think every new developer should find someone smarter then them, and latch on and follow until they have picked up and learned what they can. The best way to go about this, get a good job under someone who knows what they are doing, or work on an open source project, since those all have wonderful peer review. Once you've actually learned from the start how to design(back end design, not visual design) a well functioning site, and have done this for multiple others, then maybe, try it on your own. If you just attempt to build something right now, sure you'll probably pick up a few things you didn't know about a library here or there, or a function you didn't know existed, but you won't know what mistakes you are making either.
Add this to your /etc/my.cnf and restart mysqld: log=/tmp/mysql_query.log 
Thank you :)
A very cool idea, sorry I'm so late to the party. What I would love, and would also like to help with, is making DaringCart available improving the compatibility with the [Lighttpd](http://www.lighttpd.net/) webserver. Currently SEO url's aren't working, and there's a whole bunch of tiny security issues that rely heavily on Apache. I would very much like to see that tackled. Great effort. PM me if you want to spar about this!
I should have mentioned the job is based in sound Los Angeles county and requires working on-site.
This could just be referrer spam. Some companies will spam their webpages as referrers to your website in the hope of getting you to click their links and artificially boost their traffic / generate money from adverts etc. 
But the "referrer" is a page on my own website?
He means this: * someone posts a link to their site in your comments section * google thinks you linked to their site * their PageRank goes up I doubt that this is happening though.
That's not possible since links aren't hyperlinked in our comments system. But actually I think OP is referring to something that's called "referrer spam", which is you look through your logs/ stats/ whatever and you see "oh, I got a lot of traffic from http://www.pillsviagracheap.com/something/something" and you click that referrer to find out what they're saying and why they linked to your site. And that click is valuable. 
showoff....
That is not what he means. This is: http://en.wikipedia.org/wiki/Referrer_spam
It's not really a captcha if the answer is the same all the time. Re-ordering the elements, but keeping the same IDs is pointless too as bots don't care what order your HTML is in.
Okay, so say you have this statement: `SELECT foo, bar FROM table`, then your resultset looks like this: --------------- | foo | bar | --------------- | A | B | | A | C | --------------- When you issue a `GROUP BY` statement, it joins the rows based on the column you grouped by and the database has to do something with the other rows. An intermediate result set for `SELECT foo, bar FROM table GROUP BY foo` might look like: ------------------- | foo | bar | ------------------- | A | {B, C} | ------------------- As you can see, when we grouped our rows on the grouping column, we have multiple values for the other column(s) - in this case, just bar. In a real database engine, it would then force you to issue some groupwise function to determine which value to return in the returned row - something like MAX() or MIN(). MySQL will allow you to return from here - and your guess is as good as mine whether it returns the value B or C (or any of n possibilities) from bar.
Have you considered a [honeypot](http://en.wikipedia.org/wiki/Honeypot_%28computing%29)? What I mean is have an input named "email", for example, in your form and then hide it. Bots don't realize you've hidden the field and will happily fill it out. Filter any requests with email filled! I've had great success with this technique on smaller sites. Stops spam and is completely unobtrusive for legitimate users.
&gt;checking referrers Referrers should not be a part of security at all since they're user provided and very easy to fake.
Also to exploit XSS/XSRF ;-)
mysql_real_escape_string($foo);
Hopefully, the goals of the project are clearly stated on the linked page, but if that's not the case, that in itself is some valuable feedback. I'm trying to get this right the first time, rather than having to go back and rework the design ex post facto. I'll tag a 0.1 release once some of the in-progress pieces are firmed up and the thing has withstood the first wave of criticism and use. So please, take a look and let me know what you think! If you'd be so good as to submit a pull request on one of my outstanding issues or submit a patch, I would love you forever!
Why not use namespaces and the PSR-0 naming convention? If I had to use the library, I'd be pretty frustrated that I'd have to go through and remove the require_once statements, then use a compiler to stick the contents of all the files under a namespace. An autoloader would have a difficult time locating the classes as you have them laid out now. Also, when I saw the AllDistributions.php file, I was shocked that there wasn't a class in there, but just procedural PHP code. I know these are small critiques, but I don't think you should be surprising the people that will be using the library.
Do you have any specific links on that? That was one of the areas where I felt extremely uncomfortable, but didn't know how to do better. I much appreciate it.
I was a Lead Dev at a pretty tech-heavy digital agency for a number of years and also was in charge of vetting applicants and finding developers when none were applying. Hope I can help and answer any questions you have. The first thing is, you need to identify what your lowest expectations are. Saying that you want an experienced PHP developer is relative. There's a mountain of tenured PHP developers out there that don't know good programming practices if it hit them in the face, so you need to be able to separate the wheat from the chaff, so to speak. Coming up with a list of imperatives and nice-to-have's will help out a lot in this regard. The imperatives should be short, but based on your needs. For example, if you're looking for a long-term hire, you should be looking for non-technical attributes, as opposed to things like, "Does this dude know Drupal?" Speaking of technology, you need to identify what kind of developer you need. A developer who is well-versed in application development with frameworks will have a different talent set than someone who exclusively works with WordPress and Drupal. Be prepared to pay more, and also have higher expectations, for someone who is going to be doing app dev (frameworks, Magento, etc) than someone who is working with a plug-and-play CMS. You can put an entry-level developer in front of practically any CMS software and get something out of it but you cannot expect the same the other way around. Anyway, enough with that. Here's a few places that I'd recommend to post jobs: 1. Get to local PHP meet-ups and start to networking. Those meet-ups are a gold mine for local developers who are passionate about what they do. 2. Craigslist. No joke, we found a number of very talented developers through posting on Craigslist. You'll typically spend a lot more time throwing out resumes than other avenues, but there's gold to be found. 3. Krop.com is a pretty good resource. 4. Quora.com ... start looking at the relevant tags and look for developers who know what their shit, then ping them. You need to stay classy about this, because many people on Quora aren't looking to be headhunted. 5. LinkedIn is... _okay_. Meh. 6. Freenode. Get to talking with the developers on ##phpc and other relevant channels. It's all about networking. Everyone knows someone. 7. If you're coming down to the wire... you can look at recruiting companies. Be careful, many of them have "aptitude tests" that they make the developers work on. Anything under 90% is typically a good sign of a subpar developer that you don't want to hire. Those tests are designed to make everyone look good. Always, always have a technical person lead the interview process. Be merciless in your selection process if you can. As an employer, you couldn't be in a better position: It's a buyers' market right now. Good luck! Hope you find someone, let me know if you have any questions. 
XSS in Firefox (and everything non-webkit): http://terrorbullgames.com/blog/gallery.php?n=%22%3E%3C/a%3E%3Cscript%3Ealert(0)%3C/script%3E%3Ca%20id=%22&amp;id=245
Absolutely. Here's a few links to the PSR-0: * [PSR-0 Final Proposal](http://blog.montmere.com/2011/09/21/psr-0-final-proposal/) * [SplClassLoader](https://gist.github.com/1243813) * [Autoloading Strategies - Matthew Weier O'Phinney](http://weierophinney.net/matthew/archives/245-Autoloading-Benchmarks.html)
this too http://terrorbullgames.com/games/metakettle_pnpgame.php/work_in_progress.php/%22%3E%3Cplaintext%3E
[Issue logged](https://github.com/mcordingley/PHPStats/issues/9) for when I'm not at work. Thanks! Anything else?
Thanks for picking that up. Is this because I'm not checking that n is an integer?
I think I've patched that now, thanks for finding it :)
Thank you for your thoughtful reply!
One thing that I noticed was in your lib/Stats.php utility class, where you "cast" non-numeric entries of arrays as 0. This is not what PHP does itself, so I wouldn't either. I'd simply allow PHP to cast whatever provided as a number in order to retain consistency with the language. From a library user's perspective, that's the sort of tiny thing that makes a lot of difference when using a library - I don't want to have to read documentation for the library to understand how it works, I want the way it works to be self-evident and part of that is conforming to the expectations of the platform. Another point, which isn't minor and enough for me to reject using your library in a project is that you throw out raw Exceptions, rather than subtyping your Exception. I'm aware that this is relatively common in PHP libraries and it's wrong every single time someone does it. You need to subtype Exception and throw your own Exception types out, so that when people are using your library, your exceptions are catchable without clobbering everything else. One minor point and this is a lot more subjective than the other two - you use direct access to protected members of a parent class in a child class. I feel like, personally at least, that this is a violation of encapsulation and variable accesses in children should be done like any other case outside of the declaring class - that is to say, with getters and setters. As it is now, if you want to change the way that any of your parent's class's protected variables behave, you have to change all of the child classes (and since the class is public and non-final, that can mean breaking your users' code as well). Instead, if the child classes referred to parents' members via getters and setters you have a single block that is the only entry point to mutating or accessing those members. And finally, I see you have an abstract constructor around somewhere. This is code smell and should probably be refactored into not being necessary.
Indeed, that is what I meant.
Post the job position on here to give redditors first dibbs! Is it a full time or part time job? And what's the experience requirements and salary range?
sounds good. i applaud the effort pls include a resampling library for jackknife, bootstrap etc. thanks! 
OK, so let me go down the line to make sure that I understand you and can fix it all: 1. Casting non-numeric entries to let them count as zero. Don't do it. If the user submits something crazy, like a boolean or a string involving their dog, let the language throw an exception of its own or attempt a cast on its own. That is, don't worry about validating the input, just let the user shoot his/her own foot? 2. Creating my own exceptions. Makes sense. I'm only throwing one in Stats.php line 437. I should probably just remove that exception and thoroughly vet that set of if-else statements. I will keep that in mind should I have a good reason to throw an exception in the future. I'm just thinking that I really don't have a good reason to throw that one that I do. 3. Interesting idea. I had no idea that I could break encapsulation _within_ a class hierarchy. That's what I get for not having a CS education. ;) 4. The abstract constructor is on lib/RegressionModel/RegressionModel.php I'm trying to enforce that the child class declares a constructor and that it takes those two inputs. Would it be better to implement the constructor in the parent class and then put the parts of the code that are different into a private function (required by an abstract definition) a la the Template pattern? The classes all do their main work on construction. Thanks for the feedback. This is just the kind of feedback that I wanted. I'll try to get those in.
Nope, math isn't my strong suit, so keep being awesome. :)
&gt; Casting non-numeric entries to let them count as zero. Don't do it. If the user submits something crazy, like a boolean or a string involving their dog, let the language throw an exception of its own or attempt a cast on its own. That is, don't worry about validating the input, just let the user shoot his/her own foot? Correct, but I don't think it's so much "let the user shot their own foot" as it is "let the user expect your library to behave the same way their code does." PHP isn't a type-safe language, so I would expect a PHP library to let me give it whatever I want. That is, after all, what PHP does! &gt; Creating my own exceptions. Makes sense. I'm only throwing one in Stats.php line 437. I should probably just remove that exception and thoroughly vet that set of if-else statements. I will keep that in mind should I have a good reason to throw an exception in the future. I'm just thinking that I really don't have a good reason to throw that one that I do. Yeah. If you do throw an exception, you just want people to be able to catch *just* your exception. &gt; Interesting idea. I had no idea that I could break encapsulation within a class hierarchy. That's what I get for not having a CS education. ;) There's a really long and heated debate to be had on whether you can do this or not and when something is and when something isn't. I'm a big fan of the House MD ideology: everyone is a liar and a moron, so I write code with similar assumptions; that is, I assume that everyone (~~even~~ especially myself) is a moron who's going to do his best to abuse the code that I write and try his damndest to break it. In this particular case, I feel like direct access to members is always bad (a carryover from writing threaded software, at least partially). It's not wrong to do it the way that you have; a lot of PHP developers certainly do and there's been a few blog posts (I can't seem to find them :|) about how unnecessary `private` is as a keyword. I'm just on the opposite end of that spectrum and think that you should only be exposing that absolute bare minimum of functionality and state in your classes. &gt; The abstract constructor is on lib/RegressionModel/RegressionModel.php I'm trying to enforce that the child class declares a constructor and that it takes those two inputs. Would it be better to implement the constructor in the parent class and then put the parts of the code that are different into a private function (required by an abstract definition) a la the Template pattern? The classes all do their main work on construction. We're off to subjective land again, I think. I'm of the opinion that enforced constructors restrict the functionality of children classes - especially because they imply that objects are going to be created a certain way and only that certain way. Constructing objects shouldn't be so restrictive - after all, you don't know if a child of your class could need some more, unforeseen data to exist properly. If it is important that objects are created a certain way, factories and builders exist to guarantee that objects are created according to your means. If you require that an object receive certain data, mandate a setter for it and call the setter in your factory but unless you're going to restrict all your potential child classes to have a certain functionality (which is exactly what polymorphism isn't)... you shouldn't restrict how they're created. To use the old and tired car analogy: if you want a car to drive you to work, you don't need to care how it's constructed, how it works internally, what it looks like, you just care whether it can get you to work or not (has a goTo() method). You might want also to make sure it takes unleaded gasoline (has a setGasoline method), but you wouldn't care what's in the engine when you get it (maybe it takes flexfuel and that's what they fill up with at the dealer). Once again, I don't think what you're doing is wrong, it just doesn't really fit into my perception of how polymorphic OOP is supposed to behave.
Batman Begins?
May I suggest using the [Symfony2 ClassLoader](https://github.com/symfony/ClassLoader). You can automatically include it in your repo as a submodule and use it unobtrusively to autoload all your classes.
&gt; A reminder to never use phpMyAdmin in production ...No, it's a reminder to use things like SSL, VPNs, and DMZs in your architecture. The tool isn't the issue, the availability of it to the outside world is.
The solution for that is a hardware firewall.
Not using it on a production machine connected to a production database controls access and availability.
Precisely.
I can do all of that, but I am an Australian citizen
No, not using it on a *front end* machine, which is effectively what I said. I have dozens of "production machines", most of which have never seen human eyes beyond my own because they run things like databases, caches, administrative tasks, etc. and are never touched by the outside world.
I sure do. It is surprisingly hard to write php while upside down... But seriously I wish I could apply, its so hard to get a decent job without 15+ industry experience* using php. * exaggeration 
You know a hardware firewall just runs software to do its thing...?
Touché. You split a fine hair.
I am closer than this guy, I am in New Zealand... pick me!
This sounds like a code off to prove my MIGHT
You're going down Aussie
phpMyAdmin itself doesn't just magically grant you access into the administrative files of any database you want. If configured to "auto-login" or use some sort of service account, of course it can do damage, but PMA in the wild is rarely set up this way. In its most common state, it depends entirely on the security of the user accounts that have access into the database, which is something you should consider a concern regardless of your frontend software. Any steps you would take to address that issue (limiting access to certain computers or limiting the permissions of the users themselves) would be steps you would take in a phpMyAdmin environment as well.
* Limit search to /r/php * Search for frameworks * ??? * Profit
I'm the closest still! Michigan!
Well, you could omit all of the "== true" for brevity, but that doesn't make it "better".
Leave it on the rugby pitch you guys.
case sensitive searches.. a simple grep -r 'function\ ' would not find your functions. consistency is helpful for folks who have to deal with the code you wrote. please be nice to future folks who might have to hack on your code after you've given it to a client.
I fit the bill, but I've got my own gig right now. Can you explain the combination of "highly desired" frameworks and CMSs? That's... odd to look for someone who fits all of them.
Define better? I'd be tempted by: &gt; in_array(true, array($failed_a, $failed_b, $failed_l, $failed_i)) Especially if those variables were already in an array.
assuming it returns true otherwise (which it might not) : return !(!$failed_a &amp;&amp; !$failed_b &amp;&amp; !$failed_l &amp;&amp; !$failed_i); DeMorgan FTW
Not better in any way. Just confusing to any developer who looks at it (including you) more than two days from the moment it's written. That also assumes that the code doesn't continue after the return which, since it's an if block, it does if the condition is doesn't evaluate.
I'd put all the $failed_* into an array ... then go with oEgwcEonqq's advice.
From the way you've designed this code, there is no point in having it be an object. No matter what you do with the object it only will return one value. You could have this be a function that returns an stdClass with day/enddate/startdate etc or even just return the number of the day of the week. The only way I could see this really needing to be an object (and thus preserving some kind of state within the variable) would be to send a startdate to the object for the constructor. Then, after that you could say like: $H = new Hours('4/5/1235..'); echo $H-&gt;calcDay('8/1/1245..'); You also mentioned that all of your variable are public. True, you should probably have a function that is called `getDays()` that would return the day. The fact that as soon as you call the constructor on your object, the object is in its final form and there are no other functions to act on the state of the object means you probably shouldn't be using an object, or you need to re-think the design a bit. You could definitely put this into one routine and place it into a static `Util` class or something of the like. 
fair enough. It's just been a while since I got to bust out DeMorgan's law. I only learned it in three classes : logic, discrete math, and intro to circuits. To me it's just: not(false and false and false and false)
In addition to this you could also take away the internal parenthesis. if( $failed_a || $failed_b )
I use SMF personally. It's got a fairly extensive SSI system and it's general forum functions are available programatically if you care to use functionality like that. It's theme system is pretty straight forward and it's code is readable.
I'm a bit of a whitespace freak, so I would do something like this, myself: if ( ($failed_a == true) || ($failed_b == true) || ($failed_l == true) || ($failed_i == true) ) { return false; } **Bonus:** if you're testing the logic and need to comment out one or more of those conditions, it is now trivial to do something like this: if ( ($failed_a == true) //|| ($failed_b == true) //|| ($failed_l == true) || ($failed_i == true) ) { return false; } 
Since nobody has so far represented it as I would: 1) $var == &lt;bool&gt; is redundant: if ($failed_a || $failed_b || $failed_l || $failed_i) return FALSE; 2) If you're otherwise returning true, you should omit the if statement: return !($failed_a || $failed_b || $failed_l || $failed_i);
Here is the whole function private function invalidLicenseKey($key) { $failed_a = false; $failed_b = false; $failed_l = false; $failed_i = false; if (! $this-&gt;compareArgs($key[5], $key[10], $key[15])) $failed_a = true; if (! $this-&gt;compareArgs($key[8], $key[11], $key[18])) $failed_b = true; if ((strlen($key) &gt; 19) || (strlen($key) &lt; 19)) $failed_l = true; if (($key[0] !== 'T') &amp;&amp; ($key[0] !== 'G')) $failed_i = true; return in_array(true, array($failed_a, $failed_b, $failed_l, $failed_i)); } the function is used here if ($this-&gt;invalidLicenseKey($settings[0])) array_push($errors, 'Invalid license key.');
~~I am going to assume you are just learning to write code, given this question and [this one](http://www.reddit.com/r/PHP/comments/l83uf/could_this_be_written_better_o/) earlier today.~~ ~~I don't want to be super rude, but you really need to read up on the very basics of [Boolean algebra](http://www.google.com/search?q=Boolean+algebra). If you don't understand how to better code the two questions(this one and the previous) you posted today, I have serious doubts you will ever advance past the concepts of a basic for loop.~~ edit: I am a jerk and could have been much more helpful. Sorry.
If you're doing MVC, I highly recommend using an ORM for the Model; because of the code generation. You can use a mixture of ZF/Symfony with Doctrine/Propel; depending on which versions you're talking about. Symfony2/Propel is not integrated yet. Symfony/Doctrine is probably your best bet.
You should add Sun's implementation of the [error function](ftp://ftp.irisa.fr/pub/OpenBSD/src/lib/libm/src/s_erf.c). Translating the code to PHP shouldn't be too bad.
When something is boolean, you should consider using 'is' for a prefix. It's common for variables, functions, and even database columns. For example, your function could look like: private function isValidLicenseKey($key) { return ($this-&gt;compareArgs(..) &amp;&amp; $this-&gt;compareArgs(..) &amp;&amp; strlen($key) == 19 &amp;&amp; in_array($key, array('T', 'G')); }
I'm not sure if this will help your particular situation, but MS SQL can be picky about connection strings and there is a shortcut to get the right syntax. If you have access to windows install, create a new file and change the extension to .UDL. Open the file and fill in the properties to connect to your SQL 2000 server instance. Then save and re-open the file in notepad. voila! connection string.
No offense, but you fail at recruiting; this is a terrible post. In case you haven't noticed, good programmers are hard to find, and even harder to actually hire. It just screams "Programmers are replaceable parts". What business are you in? Are you solving some kind of interesting problem, developing a project, or are you a "web shop" doing client work, or what? How big is your company? Why would I want to work there? What's "our company"'s name? Website? It's like a personal ad that omits all the stuff before "seeks" EDIT: you do provide your location. So the personal would read like: "Person in Carson, CA seeks &lt;long list of requirements&gt;. PM Me". 
private function invalidLicenseKey($key) { if (! $this-&gt;compareArgs($key[5], $key[10], $key[15])) { return false; } if (! $this-&gt;compareArgs($key[8], $key[11], $key[18])) { return false; } if ((strlen($key) &gt; 19) || (strlen($key) &lt; 19)) { return false; } if (($key[0] !== 'T') &amp;&amp; ($key[0] !== 'G')) { return false; } // Finished running the gauntlet return true; }
I think e000's warning of "Do not use this" needs to be expounded upon. In this case, where you're using a function on the value of a column you will be forcing the database engine to *always* do a full table scan -- it would be unable to use indexes. As the table gets larger the query will get slower.
An index would only apply if I was using a `WHERE` clause. The full table scan is unavoidable when selecting all rows, as I did there. The bulk of the overhead would be the string operations.
If you don't want to be super rude, then don't. When somebody is learning something new, you should provide advice and encouragement rather than the insulting discouragement you just gave. OP is here because he recognized there were problems with his code, and he asked for help. It's people like you that discourage others from asking for help, because they don't want to be insulted if they have a gap in their remedial understanding. So it turns out that OPs understanding of Boolean logic isn't the problem, you are. OP, if he doesn't get discouraged by people like you, will keep learning and growing. You, however, will probably never change your ways and never be a good teacher who contributes to the community. I don't want to be super rude, but people like you really bug me.
It looks a lot like you probably only need one variable named $failed. If you need to store the reason for the failure, you could encode this into it or another variable, using perhaps one of a number of named constants. if ($failed) { return false; } 
You specifically ask about "any type of PHP project", which in the context of frameworks is pretty problematic. The point of a framework is to simplify some subset of types of projects. So there is no "one true framework" that's good for everything. In practice, we have a bunch of MVC frameworks for building web apps. If you're not building a web app that can benefit from an MVC architecture, they won't do you much good (as a framework, anyway. ZF and Symfony2 both have a bunch of little libraries that you can use without the rest of the framework that might be useful in some non-MVC context). That said, if you're doing MVC apps, I think there are only two frameworks worth considering. This is just my opinion, but I'm pretty sure if you're not building yet-another-blog/cms/cart, there are two options amongst the major frameworks. Those options are: - Zend Framework (with Doctrine2) - Symfony2 (with Doctrine2) The key bit is Doctrine2. All the other frameworks I've experimented with (which is not all of them) are tightly coupled with some kind of ActiveRecord-type ORM. Everything works great until you have some requirement that ActiveRecord didn't anticipate, and then you start having daily hell. I haven't played much with Symfony2, but it looks nice. I use ZF for most everything these days. ZF simply doesn't try to provide the "M" in "MVC". Which, IMO, is correct. Because the "Model" is *your job* -- it's the part of your project that is different for every project. FrontControllers, Routers, Caching, Mailing, Views/Templates, are the sorts of things that area suited for a framework. Your business objects are harder to anticipate. I've been using Doctrine2 for ORM recently, and find that (for greenfield development), it's a hell of a lot more flexible than ActiveRecord. It also encourages (but doesn't force) you to design things in such a way that you could replace Doctrine2 with custom code if the need ever arose. Just my perspective, as a guy who writes a lot of web-apps that are typically not "yet-another-blog/cms/cart"
Oh right, why spend money on hardware firewalls when Windows and linux have their own firewalls...
I'm happy to see someone in /r/PHP that can program decent.
I thought it was VB at first glance, made me cringe.