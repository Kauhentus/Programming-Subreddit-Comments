Thank you for your input and this is the reason I'm here. I'm not on a time limit so I am willing to learn security loop holes and trying to make sure I learn PHP the right way.
AND short-circuits as well. The only time it would make a significant difference would be if you did `isset($foo) &amp; is_array($foo)`, because that won't short circuit (it also won't do what you think it will, so it should be avoided as well)...
This is a process that doesn't take days, or weeks, or months but years. I work with developers that have been doing this for 5+ years who I wouldn't trust with handling sensitive information. Don't take it personally, but you really should consider hiring a seasoned developer who has worked with e-commerce/healthcare for a number of years.
You didn't click "view code" http://www.phpbench.com/source/test9/12/ while($i &lt; 2000) { isSet($notSet); is_array($notSet); ++$i; } is not the same as if (isset($foo) &amp;&amp; is_array($foo)) // ... if (isset($foo)) { if (is_array($foo)) // ... 
I second jtreminio's opinion. Find someone with a lot of experience working with e-commerce/healthcare/hr programming. I've been programming for a short while, and while I'm starting to feel very confident in my ability to do a lot of stuff, one thing I will probably never feel entirely confident in is handling sensitive information like you mentioned. Its a continual process of fixing security holes, discovering new ones, and putting in safeguards to keep people from mucking things up. Basically its something you really need to specialize in to do it right. On a basic level I see some problems with your goal: Email is incredibly insecure. You should probably look into it yourself, but its often delivered in a plain text format, available to anyone doing some snooping on your activity. The other issue is how your emails are later stored. Storing sensitive data in a database is relatively tricky as well. While yes you could store it encrypted, like I said before, you need to be continually addressing security issues and updating your encryption standards. Long story short, pay someone else to do it.
I started playing with this last night and created a service provider for Silex this morning. Still very much in progress, but here it is for other Silex users: https://github.com/rchouinard/silex-plates-provider Hopefully the README makes usage clear, but I'm open to feedback and contributions. :-)
You should send the service provider in as a pull request so people dont have to go hunting for it :)
I realize that now. Thank you. A redaction is imminent.
The issue is that the images you are resizing are too big and requires more memory than is available. Either deny images over a specific size or raise the memory limit.
Security loop holes is almost an entire career on it's own. edit - I would also like to point out that I have been coding php professionally for 7 years and the only way I would be comfortable dealing with social security numbers is on infrastructure that I was not responsible for and the people who were responsible for it seemed competent and were aware that I was storing SSN's on one of their servers. In other words I would never do this on my home server where all of the security up to and including the router had been set up by me and only me.
I only want to suppress this one particular error in this particular location. I catch and notify on all other errors, warnings and notices so I do my part to prevent world burning. But on these image functions, you want to suppress errors because the errors aren't always even errors that'll cause a problem. The recoverable-jpeg error in particular straight up says the jpeg was bad but GD will figure it out and go on. So I want to suppress output from these functions and just rely on the return value. But just for this specific error I can't get it to suppress with @...so I get emailed when this error I expect/don't care about/am trying to ignore occurs and I'd rather just not be bothered by it.
Registering a shutdown function should work as well, surely.
because it's a fatal error. It stops PHP completely. The fatality doesn't come from a particular line in your code, rather. it comes from some other place where it can't be suppressed. I don't think you understand the gravity of this error is what I was joking about. It can unintentionally cause a lot of harm, you should fix it, not suppress it.
Hold on... You have two accounts?
you don't?
Ya I understand the reason for the error, I was more interested in why the @ symbol is failing to suppress it though.
Seems not possible? http://stackoverflow.com/questions/3836524/can-i-catch-exit-and-die-messages
Because it's a fatal error. You either need to change your error reporting level for the script, or you can suppress it using register_shutdown_function.
The part that caused most of the fuss has now been altered. Thank you all for pointing it out and (mostly) keeping a cool head about it.
RES
Set up an RDS instance on AWS. You can be in the free tier for a while but what I would recommend once you need to scale is setting up multiple RDS instances in multiple availability zones (so if one datacenter goes down, your database is still up). You can start with read-replicas though. But to start you should be fine with one RDS instance. Don't worry much about AWS going down, it doesn't happen often. Still hasn't affected me since I started using AWS a couple years ago.
Ok that makes sense. So I guess my best bet would be to lock the image size to something reasonable. Thanks for the info.
Thanks for responding! I'll give that one a gander, I've always been a fan of the O'Reilly books. 
You really should not ask for the SSN until the person is actually hired and you fill out their relevant tax forms.
I can remove SSN and have the applicant fill out that portion at our office if that means I can get something going. 
Thank you for the response that clears a lot up. I am okay with a steep learning curve. If anything I will take it on as a challenge.
Testing is definitely something I have not started thinking about yet so this advice is invaluable to me. Thanks for pointing that out. It is not something I would have discovered until I was most likely deep into coding a project.
I will disable the SSN field and have the applicant fill it out at our office.
I am okay with a steep learning curve. I love those light bulb moments. I have had a couple of those while learning Symfony2 already.
Perfect, after reading all the responses in this thread I think I am officially sold on Doctrine after reading your reply. I think I will come back around to Propel at a later date, perhaps once it has reached 2.0, to see what I am missing out on. Thanks for your detailed response.
Here you go! Voil√†, problem solved!
I've always measured progress in baby steps.. progress is progress, no matter how small
I believe I have fairly good knowledge of SQL. I did a short co-op job while in university where I worked on an Oracle database writing queries to generate reports, and auditing data. I have also, thus far in my PhP career, just used the base PhP MySQL commands to directly manipulate the DB. Though I will admit, one thing that has always been at the cusp of my understanding is table relationships. I get why you use them, and I understand how to use them, but I do not understand how to manually create them or the most efficient way to do so. Would you recommend any reading material on that topic?
Oh that must be very distressing starting something and not being instantly good at it.
&gt; I don't even see an ending in sight You're just starting and you already learned the most important part! Your friends have been doing it a long time, of course they'll be much further ahead. Can you compete in a marathon when all you've been doing is sitting on a couch eating potato chips? Start small. Start here: http://www.phptherightway.com/ Spend some money on books. Read code. Read code. Read code. Have fun.
Thank you everyone for your responses. You have all been very detailed and answered all my questions and more. I think I am set to continue my journey in Symfony2 using Doctrine. I really appreciate the time you all took to write a response. I have read them all and took something away from each post. Thanks again, Crushnaut.
The internet can be very overwhelming, I would recommend going back to yer good ol' paper books! Most tutorials you see online for php are specific and quick. Books on the other hand go through everything you need to know. It might be annoying to grab a book when you perhaps already know the basics, push yourself a little and once you get through the first two chapters in the book things will become interesting and challenging. Also, with programming there isn't really an end. Perhaps look for some PHP user groups where you live, it's a great motivation and they are usually very helpful!
I like it. Bookmarked for the future when I am sure it will come in handy. You do not give yourself enough credit though. Your graphic is perfect for the exact reasons you stated... &gt; some text to demonstrate the issue, why it happens, and how to solve it Perfect. Thanks again.
In case you missed it, he posted it in response to my comment.
I think this is your best bet. A job application isn't that sensitive, but a Social Security Number is. This way you still get to build something interesting without putting people at risk.
Thanks.
Honestly, I could do something like that and I understand the security behind it, but I still don't feel comfortable doing it. I would have them write that information in person if that's an option. It's always better to error on the side of caution. If I had to do it. The first thing I'd make sure I did was have the sensity info stored on a separate database that was hook up via a receive only ethernet cable. That's the first step of a lot of others. If that gives you any idea how complicated it is.
You can't retrieve the exit code of the thing exiting from the thing doing the exit. Think about it: that makes no sense--you haven't exited yet, so it doesn't (and can't) know what the exit code is.
I wouldn't think it would be too far outside the world of possibilities. Registering a callback via register_shutdown is called after exit(). So you are in fact running code after (for example) exit(1) is called, but before the process is finished. Having a hook into what *"would be" the exit code isn't that crazy. * I believe you can call another exit inside the register_shutdown callback.
Work history is still somewhat sensitive, ditching SSN is a great start. I would also ditch the emailing of an application and instead just email a link to the filled out application. Hmmm not so fast. If you do this you are now storing the applicant information in a database and giving your online application form the ability to retrieve and maybe even edit it. Oh wait entire work history , home address and phone number able to be retrieved, sounds like we still need to secure this information behind a login and password. Uh oh now we need a user management system. For a professional developer who can just dip into the toolbox of projects past and pull out a user management system and some tools to quickly build a basic crud app this isn't really a big project. For someone who barely knows php or programming at all this is not going to be a quick endeavor (nor is it likely going to be a successful one). After 7 years I still occasionally cringe over things I wrote a year ago.
This is the first time I've seen anything graphical that was also this clear and simple to use as far as crafting websites or layouts. This could become a *great* teaching tool in particular, as it helps create a model of how web development tends to evolve throughout a project: you start with simple variables, PHP functions, etc, and eventually start building "filters" and "data containers", all to produce a final result. It's a mental model that I've not seen before but makes complete sense. You've definitely piqued my interest! When will this be up on Github!? :P
Bundling bridges would be a PITA, but Silex and Laravel service providers are a single class under a different PSR-0 namespace, therefore its fairly standard for people to bundle them in.
Hmmmm... That actually gives me an idea. I have a server here at base running SQL Server 2008 and I might be able to send the information straight here instead of an online database. 
Somewhat of a technicality, although I think you made my point to an extent. To be clear: I want int|string $status variable defined in this function http://us3.php.net/exit. Not the int $status defined here http://www.cplusplus.com/reference/cstdlib/exit/.
properly securing a database and a server is its own can of worms. tread lightly. edit: words
Right, and I'm saying that is never exposed anywhere, and if it were, it would be advisory at best because of things like shutdown handlers and whatnot. Until the C exit() function is called, there's no actual exit code.
&gt; An online database Why would MS SQL be less online than another database? I don't know of any databases that go online without custom configuration.
Thank you! I will be taking security measures to insure the data is secure.
Agreed.
Don't reinvent the wheel. There are many great Applicant Tracking platform out there. http://recruiting.jobvite.com/ Full list: http://www.indeed.com/hire/ats-integration
Knowing that it is illegal in some places to require that a person give you a SSN over the internet unless it is encrypted or over SSL would make me pause in sending the SSN through email after receiving it. I suspect there will be at least a few places where doing so would either breach similar statutes or more general ones. Not to mention if there is a breach of your email account now that person has access to all of your collected form submissions. Have you considered a database? Get the form post across SSL, encrypt it with industry standard public key encryption where the machine that has the key used to encrypt doesn't have the key to decrypt. I still would have severe reservations doing this without a lot of experience in PKI and similar projects.
I know these, but something in me says that web developer shouldn't be writing daemons, and managing threads. There must be a better solution.
The test_helpers extension lets you override exit: https://github.com/php-test-helpers/php-test-helpers I definitely wouldn't use something like this in production, but I feel like it's worth adding to the conversation.
Obligatory [PHP Objects, Patterns and Practice](http://www.apress.com/9781430260318)
A good lesson to learn early on in computer security - if you're handling sensitive data, building something from scratch is almost never a good idea. There are existing libraries, frameworks, etc which have already been put through the ringer. Use them. Using a new or novel approach to securing data is almost always a terrible idea. Just ask Adobe... That said, if you didn't already have enough reasons to not collect SSN here's another: There are laws and regulations that come to play when SSN, Credit card, Bank, Drivers license or other similar personal data is involved that can invoke serious penalties/fines, bad enough that it put you in personal bankruptcy or can shut down your org if there's a breach. Specifically, both Massachusetts and California have aggressive privacy laws. It doesn't matter where you're located, if you receive and store sensitive data about residents of either state, and there's a breach, the find is based on the number of people in the DB. If you have 50 names in your DB from one of these states, multiply the fine by 50. If you have 1000, you can pretty much count on shutting down. This isn't to discourage you, it's great to you're getting into development and PHP. So, two things it's best you learn early: TL;DR - Don't invent your own way to secure data, other people have already solved these problems and - if it involves sensitive personal data, it's not a good learning opportunity. 
4th edition is coming out soon too I believe. ^oops
Memcache is simple and great. However, I tend to prefer to use redis for sessions because it can be durable. If you keep sessions in memcache, and memcache needs to be restarted for whatever reason, all sessions on that memcache node are gone. My default posture is redis for session storage, and redis-or-memcache for just about everything else.
Not sure I understand... Are you saying a developer shouldn't have to worry about details related to their work? Or that web developers are somehow not good enough to work with threads?
No, again I say this has literally nothing to do with MVC. Why do you keep insisting on that? You're just going to confuse people. &gt; Personally, I dislike nesting PHP too much into an HTML document. Of course. &gt; On a side note, I've played around with using DOMDocument to build my HTML documents I just threw up. 
Why not? If you already have the user initialized, then just call that and it takes care of everything. Otherwise you need to grab the userid somewhere or something that makes that user unique and then pass that along to change the password.
How has this not been posted already? http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/ Go read that, in its entirety. It has become THE final argument against PHP. Your friends may be inarticulate about why PHP is bad but I assure you: PHP is fucking awful. Avoid it when possible. Learn Python, a) Because it's beautiful. b) Because it is popular and only getting more popular. c) Because learning other languages is good for you. In fact since lerning Python, Java and C# my PHP has only improved. This doesn't mean that you can't make good stuff in PHP. I have been earning a living with it for over 10 years. I'm proud of my PHP work. If you target cheap hosting providers you really don't have a choice. I'm not saying you should not use PHP ever at all, but if/when you are in control of the deployment platform do yourself a favor and learn to build a project using Flask+Supervisor+Nginx. Even if you don't like it (and why wouldn't you?) I can guarantee that you are going to learn something from it and that can only make your PHP code better.
to second what this guy was saying, let me share a story with you. I'm a developer with about 10 years experience, A few years ago I took on a client who needed a new website done. I never had access to their existing site, but noticed they had a contact form whipped up. It was at a url like: http://www.example.com/survey/survey1.php so I thought to myself, I wonder what software they are using here, I decided to go straight to http://www.example.com/survey/ only to find a web directory showing me all the files available, there was an obviously named admin directory there... so I went to http://www.example.com/survey/admin/. From here, It required no login, and immediately offered survey form results from a mysql database. Turns out, a previous version of this form had peoples credit card numbers, active card numbers were here. The best part? this particular piece of open source survey software had a fancy little widget on the left side with a quote: "The difference between genius and stupidity is that genius has limits - Albert Einstein" Even funnier is the fact that Einstein was never quoted saying this. So I contact the client, who didn't seem to care, and I want to say still 2 years later it was still up. If there's any lesson you can learn from this, learn it here: Hire someone, don't try and learn it yourself, it's not a matter of time taken, it's a matter of mistakes made. You can only protect your code against what threats you know about.
I think you are doing it wrong. Any program that use exit codes is meant to be executed by 3rd party programs and not being embedded in them. What is meant to be embedded will use some other manner of error triggering, like exceptions for example.
Me too! When I first started learning web dev. First thing I did was go and get like 10 O'Reilly books. Great stuff.
Of course I'm not saying that. Ridiculous, where did you get that?
Don't use &lt;?. It makes XML a pita to write.
[/Serious]
From Brandon Savage, "Mastering Object Oriented PHP." http://masteringobjectorientedphp.com/?cta=front-page
The link does say 4th edition. Publishing date will be on December 18th. But, you know.. There's always PDF. 
Looking forward to this being redone, really liked the prior copy even though they used wrong keywords, but was written prior to them being confirmed. Either way, great book.
I think you need more information, if you want code to actually change the picture, that would be javascript. PHP is only good for counting the votes and determining which picture to display next. function changePicture() { return $this-&gt;votes &gt;= 100 ?: false; }
Aye. Go for a full ORM. But he seems extremely new.
Ah, nice!
There is no ending in sight. You'll always be learning. 30 years from they'll still be new stuff to learn. You won't probably ever catch up in that you'll know all the same old facts as your friends. You'll catch up in that as you learn the new stuff coming down the pipe you'll eventually know as much about it as anyone else. An example. A new PHP coder probably just wants to skip learning the old mysql functions. They deprecated and shouldn't be used. Just jump to the next step of learning PDO or an ORM. So they might never catch up to someone that had to use those functions and knows every little detail about the mysql functions. However in a week or two you may learn how to use something like Eloquent, the ORM for Laravel and actually be ahead of someone like me who hasn't even had a chance to look at it yet. Now all of a sudden it's I know more about old stuff that can't even be used anymore but they know about all the new stuff that's actually useful. That's one way new coders catch up overtime. Also a proper login form is actually pretty hard if you want it to be secure. It looks easy, but there's so many details to worry about.
Wish I was doing it wrong. But no, some of the plugins that are extended from a base abstract class are using exit codes. Others extend the same abstract class but throw exceptions. It basically came down to which is harder, refactoring all plugins to use EITHER exit codes OR exception. Or have the capability to accurately catch both. In the end I'll be refactoring everything to throw exceptions. Your assumption is that someone "meant" what they were doing. I'd suggest it was about 15 years of various people doing whatever they wanted and/or learned at the time.
That's not an option. The difference between is "secure" web script and an "insecure" web script isn't the script itself, but the server configuration and database configuration. &lt;form action="post" method="form.php"&gt; &lt;input name="SSN" placeholder="SSN"/&gt; &lt;input type="submit" value="Submit" /&gt; &lt;/form&gt; Depending on where I put this snip it of code, it could be the most secure form in the world, or the worlds' worst form ever.
One of my gigs is to develop about a dozen HTML emails per month. This is almost *exactly* what I need, in terms of a dead-simple templating class that I can use as part of my build process. I'll ping you if I turn it into something for the world, but in the meantime, THANKS for creating/sharing this, I definitely appreciate it for exactly what it is, as well as for what it isn't. 
do you mean COMET (aka long-polling)? Not sure about it slowing down over time (mostly client logic), but this was one technique to avoid making lots of requests
thanks. i feel like this is the cleanest way to handle it. 
ok, Thanks for the info.
Good lord.
PHP is the language and [Laravel](http://laravel.com) is one of a number of frameworks built using the language (my favorite personally, though there are other good ones too, like [Symfony](http://symfony.com/) - components of which Laravel implements). Frameworks allow you to focus on the business logic of your application without having to recreate the wheel every time. For instance, Laravel comes with routing, MVC structure, an ORM, a DIC, authentication, a templating engine, etc. etc. These are things many applications use, so it's a waste of time redeveloping them from the ground up for every project. This doesn't mean you shouldn't try to *understand* how the framework is accomplishing these things though by understanding the code, regardless of experience level, and your skills will improve by seeing how experienced devs do things. Frameworks don't solve all security issues for you, though, and aren't a replacement for knowing the language itself well. For example, you still need to be sure you're not trusting external inputs and so you should validate them first, but you can use the framework's validation capabilities to help you do this. You're doing the learning thing right. Keep asking questions, delve in, and create something. 
I did [this](http://www.isidewith.com/poll/965572) page using PHP + Ajax. Feel free to use the JavaScript. Also, if you expect heavy load, use APC with a 1 second timeout so you are only hitting the database once a second instead of once a second/user. 
[Separate your concerns](https://en.wikipedia.org/wiki/Separation_of_concerns) into classes and autoload them using [Composer](http://getcomposer.org/) with PSR-0 ideally. For instance, you might have a class that models a user in your system. The class would have properties for the username, first name, last name, age, etc. and methods for manipulating the user like findById() (a static method to load from the DB and create a new instance maybe), updatePassword() (to hash and store a new password on an instance maybe), etc. Another class might be responsible for handling routing, a different model, processing a mail queue, etc. **The idea of separations of concerns is that each piece of code should be responsible for a single, focused job and it should do it really well, and nothing else.** Sidenote: many frameworks come with a lot of this functionality for "free" and allow you to extend it as needed. For instance, instead of writing classes for all of your models (users, to-do items, to-do lists, etc., for instance), you can use a framework's built-in ORM and modify only as necessary.
I went ahead and added yet another line (w.isDone) after the yield to see if I got any different results. When it worked fine, I got a true, when it broke, I never got to that line.
Okay! Here's an update. I went ahead and split the long script into many smaller scripts AND I converted the bad code into good PDO scripted code and so far, that combination seems to be working flawlessly. Assuming that this continues, I'd like to thank everyone for their answers and for pointing me in the right direction. Kudos to all of you.
Same applies for design!
Are there going to be a Iot of people online watching it? I'm more curious for the application, because it could be interesting.
Apache has an X-Sendfile module and header for doing the same thing as X-Accel-Redirect. In addition, you can just use fpassthru for sending static files located outside your webroot. My front-controller has a special-case handler for static resources that can serve resources from any application path. It is limited to serving Javascript, HTML, and images. My application framework, for example, has javascript for components and that code lives with other framework files in the /lib/ folder. 
Comet is just keeping a connection open for long periods of time. This would make a complete http request every couple of seconds or so.
PHP is critizised not because it's a bad language - because it's not - but because it's one of the languages that is taught early in universities (at least in Europe) as part of web programming courses. And because it is everywhere, it gets a lot of bad rep. The reason behind this thinking is that an IT person, at an average, is expected to know some PHP. But a developer knowing another language, like Python or Go, is considered someone who can actually code because the language is not shoved under their nose (though I've gotten my university to teach Python instead of archaic Pascal already in the first programming course nowadays). Point is that there's a lot more good software written in PHP than people expect. At the same time, there's also more shit. At the end of the day what is important is the end result. If it is good and the code can be maintaned well for future developments, do it. PHP or whatever.
I was on my phone, so couldn't really get too specific, but here's what I meant now: location / { root /path/to/project/public; } location /internal/ { internal; alias /path/to/project; } The `internal` directive specifies that only internal redirects (`X-Accel-Redirect`) can use it. With this, `X-Accel-Redirect: /internal/app/some_module/static/style.css` will get mapped to the correct file internally. If you've got the decoupling part sorted already, then stick with what you've got. (The Mediator pattern is useful if you need deeper integration without a central repository of module callbacks, but not everyone needs that.)
&gt; Apache has an X-Sendfile module and header for doing the same thing as X-Accel-Redirect. In addition, you can just use fpassthru for sending static files located outside your webroot. Awesome, I thought it'd have something similar. I'd strongly recommend using it.
You should be able to define everything with the router. Some frameworks use the controller/action/id method, this isn't really a router per se. A router should enable you to define a pattern and direct where it goes. For example, in Laravel 4 you would define Route::get('/something/{id}/somethingelse', array('uses' =&gt; 'Controller@functionName')); This pattern of something/{id}/somethingelse can be changed around however you want, you can make it {id}/somethingelse/something if you'd like, it'll always call functionName() in Controller as long as the pattern is matched. Alternatively, you can define other types of routes, such as resource routes which direct all traffic to a controller and rely on certain functions being called certain things, for example in Laravel 4 defining Route::resource('photo', 'PhotoController'); Would send /photo/* to PhotoController, it expects everything to be in a set pattern, for example {id}/edit would call the function edit() in PhotoController. Laravel 4 routing information is here: http://four.laravel.com/docs/controllers Symfony 2 routing information is here: http://symfony.com/doc/current/book/routing.html Both of the routers above can be used independently of the framework and installed via composer. Edit: started writing on my phone, realised it wasn't a good idea.
A lot of modern development uses REST in the following way: - GET to /collection returns all models (probably paginated) - POST to /collection creates a new model - PUT to /collection does a mass update (likely not necessary for most apps) - DELETE to /collection deletes all models (likely not necessary for most apps) - GET to /collection/:id returns single model - POST to /collection/:id does nothing - PUT to /collection/:id updates single model - DELETE to /collection/:id deletes single model That said, you can of course configure your router and controllers however you want, but you may need to setup additional routes if the resourceful feature of your router doesn't do it the way you want.
Thanks for the explanation. I was using Toro because it's really straightforward and simple. As far as I can tell, (I forget the syntax) if you define ('/users/', 'UsersHandler') then it will look for and create a new instance of the UsersHandler class and then, depending on the http request method, use either the get() or post() method of the handler, making it impossible to define an action for the handler (I think). Currently looking into Klein and a couple other routers, but using one from a framework is probably a good idea.
That's my basic understanding. I think what I'm trying to figure out is editing something, which would be PUT, but how to show the form to enter the information prior to updating the entry. So /collection/:id/edit would call what controller? I think that's where I'm mostly getting stuck.
Clean Code by Bob Martin is the book I always recommend to co-workers. The examples are in Java but not hard to understand at all.
You know, that it's possible to use WebSockets and non-blocking I/O with PHP as well? There is [Ratchet](http://socketo.me/) as an option for setting up WebSockets. And for non-blocking I/O you can use [React](http://reactphp.org/). Not everybody has an own server to install Node.js on or wants to use Heroku or something like this to get it run, what isn't that bad, because Node.js isn't always needed just to build an interactive, real-time app. Get a little bit more open minded.
I would display the form in response to a GET request to /collection/:id/edit - that's pretty standard. Alternatively, depending on your application and its needs, you could have GET to /collection/:id return the information and toggle a form on the client side (i.e. "Click here to edit!" replaces the static text with form fields, but still on the same page) which PUTS back to /collection/:id.
He's (She's?) saying that this is a waste of a developers time. It should be a solved problem. Like set_headers or _REQUEST is.
It may be worth looking at [Head First Design Patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124). It is in Java, but if you have som familiarity with OOP and PHP syntax, the theory all transfers over beautifully. This might be advanced in that its talking more about patterns and when to use what, not as much basic OO theory, but if i remember correctly there is one chapter which is an OO Refresher. If you've never seen any Java code it may throw you off a bit, but i have incredibly limited java experience and found this book very useful. I would also recommend playing around with a modern framework like laravel. Using it to make a very basic crud application as a learning exercise should demonstrate the value of an OO approach, without requiring you to learn everything about OO up front. 
You have you final bracket in the wrong place, you need to close the if statement before stating the else and the last elseif wasn't closed as the comment beginning with "//nothgouH print" commented the close bracket as well. I have reformatted your code to make it easier to read, but the only change was moving the bracket from after "The Placename entered was incorrect" to before "else". You also never need the closing PHP tag :) Code: &lt;?php $placename = $_POST["place"]; $option = $_POST["option"]; if ($placename == "Houghton Regis") { print "Placename entered correctly&lt;br /&gt;"; if ($option == "initials") { $initials = "Houghton Regis"; $initialsfw = substr($initials,0,1); $initialssw = substr($initials,9,1); $upperfw = strtoupper($initialsfw); $uppersw = strtoupper($initialssw); print "Initials = $upperfw $uppersw &lt;br /&gt;"; } elseif ($option == "second") { $second = "Houghton Regis"; $secondword = substr($second, 9, 5); print "Print second word = $secondword&lt;br /&gt;"; } elseif ($option == "reverse") { $reverse = "Houghton Regis"; $reversefull = strrev($reverse); $reversefw = substr($reversefull, 0, 5); //sigeR $reversesw= substr($reversefull, 6, 8); //nothgouH print "$reversesw $reversefw &lt;br/&gt;"; } } else print "The Placename entered was incorrect&lt;br /&gt;"; 
You could use NodeJs in addition to PHP for pushing. Might be too much for your case.
Fellow noob here, but I think you've got a problem with your curly braces towards the end of the code. This line: else print "The Placename entered was incorrect&lt;br /&gt;";} is included in the code block from the previous elseif statement, because you've commented out the closing curly bracket for that. So, I think the final few lines should look more like this: elseif ($option=="reverse") { $reverse = "Houghton Regis"; $reversefull= strrev($reverse); $reversefw= substr($reversefull, 0, 5); //sigeR $reversesw= substr($reversefull, 6, 8); //nothgouH print "$reversesw $reversefw &lt;br/&gt;";} } else {print "The Placename entered was incorrect&lt;br /&gt;";} Also, I've just learned that if you want to show code formatted nicely on Reddit, start each line of code with four blank spaces.
You insist, that Node.js the best tool for this job is, although it obviously not necessarily is. So no, you're not really open minded.
Further to this, I thought I'd make some quick recommendations. POST check: you should always run isset() as a basic check to ensure the form was posted correctly. If this script was run by getting rather than posting it would throw an error as the array index (place and option in your example) aren't set as there is no posted data. Strings: Avoid using double quotes in PHP unless you're using a string which includes variables. PHP always scans strings in double quotes to check whether there are variables to replace, in simple strings you should use single quotes so PHP knows it can ignore them and doesn't have to scan them. Also when comparing strings, you may want to make them case insensitive as 'houghton regis' would be valid, but would fail with this comparison as it's looking for 'Houghton Regis' Print: Hopefully your print functions are just for debugging, you should always try to separate your logic from your view, and printing directly from a script possibly isn't ideal but it depends on your situation. If you're using this multiple places it may be better to create a function and return a value. Formatting: I have found from my experience formatting code can help reduce errors, however a good IDE can also help. In this example if the code was laid out it may have been easier to see the bracket was in the wrong place or that the comment had broken your if statement. Assigning variables multiple times (such as assigning "Houghton Regis" in each if block is unnecessary, unless you're working with objects the original variable is untouched when running it through a function. $result = strrev($placename) would leave $placename in it's original format and assign the change to result. If you're running the same function a few times (such as strtoupper) there may be a better way to do it, in this case you should uppercase the string before splitting it that way it only needs to be called once. Here is the code with the changes I mentioned, I probably have missed some stuff but it's late :) &lt;?php $placename = isset($_POST['place']) ? $_POST['place'] : null; $option = isset($_POST['option']) ? $_POST['option'] : null; // Do a lower case comparison so it doesn't matter how it was entered if (strtolower($placename) == 'houghton regis') { // Single quotes here since our string doesn't contain any variables print 'Placename entered correctly&lt;br /&gt;'; if ($option == 'initials') { // Convert case here so we don't need to do it later $initials = strtoupper($placename); $initialsfw = substr($initials, 0, 1); $initialssw = substr($initials, 9, 1); // Keeping string double quoted here since it contains variables print "Initials = $initialsfw $initialssw&lt;br /&gt;"; } elseif ($option == 'second') { $second = substr($placename, 9, 5); print "Print second word = $second&lt;br /&gt;"; } elseif ($option == 'reverse') { $reversefull = strrev($placename); $reversefw = substr($reversefull, 0, 5); //sigeR $reversesw= substr($reversefull, 6, 8); //nothgouH print "$reversesw $reversefw &lt;br/&gt;"; } } else print 'The Placename entered was incorrect&lt;br /&gt;';
Thank you so much! I'm only in my 6th week of learning PHP and it's an uphill struggle. I really appreciate the help my friend (:
You my friend are an absolute legend! I'm definitely going to start formatting my code similar to the way you have, it makes it a hell of a lot easier to read and debug. I was also unaware about PHP always scanning strings that are in double quotes, that is very useful to know. If only I had you around for part two of this work as I'm yet to understand outputting two dimensional arrays to an HTML table. God I feel like such a noob!
Good luck, even the people who know PHP are learning every day :) stick with it and you'll definitely get there.
Thank you for all of your help, enjoy some Reddit Gold for your troubles (:
Aw man, thanks!
I use thia AliasMatch trick I picked up from http://mwop.net/blog/why-conventions-matter.html You may need to update the expression to match your paths but it lets you keep your resources in the module's directory but serve them via a publically accessible URL You could also have a build script that runs on release and copies (and minifies) your js and css files to directories in your doc root. AliasMatch /(css|js|images)/([^/]+)/(.*) /path/to/module/$2/public/$1/$3 
Bingo, that's how [Laravel does it](http://laravel.com/docs/controllers#resource-controllers) and I find it satisfactory. Half the time I want to grab that simple form and just change it a bit, half the time I'd rather construct my own form entirely and this enables that. GET /collection/id/edit returns a form whereas PUT /collection/id updates that specific one. Laravel fakes PUT requests with a _method hidden field in the form.
This definitively looks like the sort of thing I'm looking for. As for minifying js files with php, When I get at that point there are even better things to do like serving coffescripts but I'm getting ahead of myself. Thanks for this recommendation.
This is a key feature in the Emergence (http://emr.ge) framework's ActiveRecord implementation, and was actually initially developed for your exact use case for the open-source school framework Slate (http://slate.is) It does neither of your suggested techniques, instead creating only 1 table that has an additional column called `Class` of type enum. All types are stored in the same table, and on retrieval each row is instantiated to its stored Class type. The fields of all the types are aggregated together, and the fields of all sub-types are forced to support NULL and defaulted to NULL. This makes it easy and quick to query records of multiple types at the same time either by common or unique fields. Your models might look like: class Person extends ActiveRecord { static public $tableName = 'people'; static public $fields = array( 'FirstName', 'LastName', 'Email' =&gt; array( 'type' =&gt; 'string', 'notnull' =&gt; false ), 'Notes' =&gt; 'clob' ); } class Parent extends Person { static public $fields = array( 'WorkPhone' ); } class Student extends Person { static public $fields = array( 'ParentID' =&gt; 'uint' ); static public $relationships = array( 'Parent' =&gt; array( 'type' =&gt; 'one-one', 'class' =&gt; 'Person' ) ); }
And these would be the [changes for the still maintained 5.4.22](https://github.com/php/php-src/blob/PHP-5.4.22/NEWS). Interestingly they differ a lot from those in 5.5, this time. 
I have no idea what your first OOP book should be, but your second should be [Refactoring](http://bc.worldcat.org/oclc/41017370) by Martin Fowler.
One glaring concern for me is that "en" and "nl" are not environments, they are locales and should be treated entirely differently. 
A large number of columns, if indexed on the columns you select/sort by most, has little run-time detriment...whereas doing joins all the time has a huge run-time cost. Also if you plan your models well it really doesnt get that big, my largest multi-class table ever has maybe 15-20 columns. 
Do you know what this paradigm is called? It's kind of like a polymorphic association where the tables are pushed together. 
&gt; but having all templates and controllers in a few directories is getting unmanageable This is the crux of the ["Package by Feature vs. Package by Layer" tradeoff / problem](http://www.javapractices.com/topic/TopicAction.do?Id=205). You are currently doing it "by layer", which makes sense for very small projects, but which quickly becomes a mess in anything else. I'd recommend against that and go back to the way you had it before, which is ideal for modularity IMO.
They forgot a commit of mine that made it in, in the changelog. `json_decode(' true');` no longer errors.
That one and [this one](http://nostarch.com/oophp.htm) from no starch press really helped me out. I read them together.
That seems to work with 5.5.5 as well? $ php -v &amp;&amp; php -r "var_dump(json_decode(' true'));" PHP 5.5.5-1+debphp.org~quantal+2 (cli) (built: Oct 28 2013 13:13:01) Copyright (c) 1997-2013 The PHP Group Zend Engine v2.5.0, Copyright (c) 1998-2013 Zend Technologies with Zend OPcache v7.0.3-dev, Copyright (c) 1999-2013, by Zend Technologies with Xdebug v2.2.3, Copyright (c) 2002-2013, by Derick Rethans bool(true) 
It is definitely steeper but well worth it, you will be a lot more "powerful" in what kind of applications will be within your power to build. I use doctrine and wouldn't even go back to ActiveRecord for CRUD, I only want to use doctrine. Good luck.
It may have gone out w/ a small release or something, 5.5.5 here doesn't show it: http://3v4l.org/GYLSW
Oh, I found out why: Debian/Ubuntu/Fedora/some other distros use a different JSON package than the default one.
I think I could have used a better example for the domains. That said; I did ~~make it clear~~ try to express that translation/locale management should be done without the need to involve environments. Perhaps I should have stressed that more... :/ Edit: do you think this will help? https://medium.com/on-coding/26cdc75e4810#06e7
If you need it refreshed "instantly" then the only way to do it is via WebSockets. If you can wait a bit, ajax regularly in the background would be okay. If you must do it in PHP, [Wrench](https://github.com/varspool/Wrench) or [Ratchet](http://socketo.me/) are both pretty good solutions. But, PHP is not really ideal for long running processes, so you may wish to implement something in Node.JS for the server component instead.
Ok, both of those make sense. I will adjust the post in the next few days. Could I trouble you to look over it again once it's been fixed?
Thanks. Also thanks for helping constructively.
Anyone know a repo for CentOS 6 that has PHP 5.5.6? I'd rather not build myself.
And where is the new cool stuff for PHP 5.3? I hate my life.
Good to know. I've been using the Webtastic repos, but they are stuck at 5.5.3 for some reason. :(
For HTTP request methods, you are correct. The confusion is due to REST reusing the verbs with variable degrees of agreement since it isn't standardized. I've seen different RESTful applications interpret the verbs in completely different ways or ignore them entirely and use the url scheme alone.
I'd say an essential for learning php (especially if your learning it your self) is just to read. I began learning php originally just by coding and ran into similar problems like this all the time. Reading books changed me forever... I'd say this is an essential: http://shop.oreilly.com/product/0636920012443.do O'Reilly has books for everything you can imagine. the 'php cookbook' is really good too. AND if your ever in trouble with a default function or variable, go to www.php.net and search it there, after all they created it! The key is practice and not giving up! 
Because upgrade. No shinies for you. 
But Ubuntu 10.04 is what I have to use, I hope we can upgrade soon... Long term support is sometimes jsut long term suffering.
In your example, I'd vote against making the connection in the controller, for a couple of reasons: 1) Your client becomes very hard to write tests for, since it now has a hard dependency on the network. 2) Consumers of your class may have messy dependency injection going on, where they instantiate a client and inject it into a service class that ultimately doesn't use it. I would do some cursory validation of the params passed to the constructor (port is a sane value to cast to int, hostname looks valid), and throw an InvalidArgumentException if that validation fails. As far as actually establishing a connection, I'd probably do it in some lazy way when the calling code actually invokes a method that requires the connection.
Perfect, just the response I was looking for. I have typically used the former style in the past, but I wanted to check and be sure. As far as lazy-loading the connection goes: what happens if I call a method which would return true or false if the connection is open? Would I then throw an exception stating that the connection failed? I feel like simply returning false would be unclear, because that could also indicate a normal "negative" response.
In the event of network failure, I'd simply throw a RuntimeException or some subclass thereof. The network going away is an exceptional condition. Something like this: class Client { protected $host; protected $port; protected $connection; public function __construct($host, $port){ if (! ctype_digit($port)){ throw new InvalidArgumentException('Port must be an integer'); } if (! is_valid_hostname($host)){ throw new InvalidArgumentException('Hostname is invalid'); } $this-&gt;host = $host; $this-&gt;port = $port; } public function connect(){ // if connection is already established, return. // else try to establish connection, throw RuntimeException on failure. } public function doWork(){ $this-&gt;connect(); // do stuff. } } If you want to get fancier, you can represent the connection as some kind of Adapter class and inject that into your client (so you can fake it for testing). The Adapter internals would be similar to what we're doing explicitly here in the client, as far as connection-managment 
Sounds great, and thanks again for your thoughts!
Can you explain why would I possibly want to convert all my errors into exceptions?
Thank you very much (: I actually have one of the O'Reilly books but its the PHP, mySQL, JavaScript &amp; CSS one. It's been a lifesaver so far.
They become catchable, or if uncaught, they will go through the exception handlers you supply. From here, your custom handlers can include raw text logging, emailing, db logging, etc. Where I work, I slowly deployed this onto our production machines. On every exception now, we 1) write to a flat file 2) log the error to mongodb and 3) email the error to all of it The bigger gain from this really isnt converting errors, its converting notices. Think about an undefined variable notice. The script will continue executing, potentially fine, or potentially could cause some serious issues, and you'd have no idea that it was happening (other than someone calling you to let you know something broke). The goal of this is to make PHP close to as strict as most other languages, and force you to handle exceptions that are occuring in your code, and also give you a clena means to notify you that they are happening. The question back to you is, what are you doing about notices and errors that you "know" aren't occuring sporadically. EDIT: I forgot to include what this did for us. We are a large company, so as you can imagine, sporadic errors can go unnoticed and unreported. When this was deployed we discovered several scripts that had the leagcy mysql_query() class not being checked for a result, and would cause and undefined offset notice when it was used and the server was unreachable. TL;DR There is no graceful way to handle errors and notices, so convert them to exceptions and let your customer handlers do somethign about them if they go uncaught.
Indeed, and it's nice that I'm not the only one struggling with architecture paradigms.
Hey, just curious: why would you prefer not to build it yourself?
I prefer installing modules (php-mcrypt etc) via yum. Sure I can get them from PECL. But then I have to configure the compile flags, and to upgrade you have to do this over and over...
Yeah I can see the advantages to that. Thanks for answering!
Seems they're there now: http://rpms.famillecollet.com/enterprise/6/php55/x86_64/repoview/
That repo is stuck on 5.5.3 though. I see now that they do make newer versions available through the webtastic-testing repo. Here's a post about PHP 5.5.5: http://www.webtatic.com/news/2013/10/latest-updates-in-testing-php-5-5-5-5-4-21-mysql-5-5-34/ Hopefully 5.5.6 will get there soon as well.
you can watch some tutorials i put together. The [primer](http://programmingarehard.com/2013/08/29/where-to-begin.html) and then [this one](http://programmingarehard.com/2013/09/25/getting-laravel-set-up.html) about getting a bunch of stuff set up, ie. laravel, git, sequel pro, phpstorm, phpunit, etc. 
Thanks I will look at it.
Oh yeah I've read that too! Super useful.
IMO you shouldn't mess w/ global state or class_exists or anything. Let the caller choose require_once instead of require or whether to hold global state or not and how/where they want to.
Convert everything. PHP code should always be free of warnings and notices. It's very poor practice to ignore them. 
You can use [this PPA](https://launchpad.net/~ondrej/+archive/php5-oldstable) and get 5.4.
Yeah, this is common too. I usually use PUT though and send the whole model back.
You'll need to capture the result, then use a loop to print it out: $st = $db_pdo-&gt;prepare("SHOW tables FROM &lt;db&gt;"); $result = $st-&gt;execute(); $rows = $result-&gt;fetchAll(); foreach ($rows as $row) { echo $row . '&lt;br&gt;'; }
You can always use the PPAs
Well thank you for the criticism I suppose. I bring up the fact that I am rewriting the class in the very first comment. I also bring up in that comment as well as in the readme that namespacing is going to be implemented. I will take points 2 and 3 as advice for my clean up. auto_prepend_file is recomended, yes. Please elaborate why it is awful in this case (while I'd agree all other cases would be bad design) The stupid rule of checking whether the class is defined would be taken care of with namespacing. My goal here, is to enforce proper development, and having full insight into error that are occuring. An error, or a notice should be unnaceptable, and its a pity that the PHP community continues to think that it is. Converting everything to an exception simply enforces better code.
~~Welp, you were half right. It's 2d array, so another foreach solved it.~~ ~~Thanks a bunch. It's the most brain far moment I've had today.~~ No, I'm...you know what, I'm going to bed. Good night.
I need users to be able to select a project to modify, but I dunno how many project are going to be.
How is a list of table names going to help you accomplish that? Unless the tables are named [product_name]_email, I don't think this is a good approach.
Haha, uh oh. I just took a glance at it before, but I basically came to the conclusion that it would be similar *in use* to some of the default Controller_Template functionality in fuelphp. Looking at it again, maybe not so similar at all. Sort of a "huh, cool but I can already do all that stuff in the systems I use" response. I probably should have just jumped in on the for/against the font discussion above. 
Echoing out all your html sounds like a massive PITA. WHY???
While I can't comment on a solution off the top of my head, I'd highly recommend you look into using existing date functions rather than putting something together yourself. Remember that at minimum, you need to be able to handle leap days ~4 years and such. There are so many edge cases with dates that I'd personally be scared to tie a potentially unknown function to billing and/or credits.
It sounds like you've set up a new table for each project? If so, why? Do you expect any one project to grow large enough to warrant it's own store? If not, why not just have an email table with a project_id relation?
I can use the browser tools or Firebug to debug the HTML if something is malformed. Not nesting HTML and PHP into eachother makes my PHP documents makes the code more readable, that's my experience anyway. Especially if you aren't working with a templating engine or framework that already neatly separates logic and layout for you. I often do not have that option. So I adopted the habit of not doing it if I can help it. I've been working on heavily modified Magento project lately, their layout/template files are a PITA to work with because of the relentless use of &lt;?php. This Magento template file is just one example of how this can get out of hand: http://pastebin.com/iC1D8xs5 This for example: &lt;?php if(!$_productCollection-&gt;count()): ?&gt; &lt;p class="note-msg"&gt;&lt;?php echo $this-&gt;__('There are no products matching the selection.') ?&gt;&lt;/p&gt; &lt;?php else: ?&gt; Reads better like this, (imo): if (!$_productCollection-&gt;count()) { echo '&lt;p class="note-msg"&gt;' . $this-&gt;__('There are no products matching the selection.') . '&lt;/p&gt;'; } else { It doesn't have to make the HTML that much less clear in your PHP files, I tend to work like this: echo '&lt;form id="firstname" action="' . $this-&gt;baseUrl('user/create') . '"' method="POST" enctype="multipart/form-data"&gt;'; 
You don't have to ignore them, it's just stupid for them to wind up being fatal. All these things will get logged if your server is set up properly.
The lack of indenting on the html in that pastebin file is a lot more concerning than the php tags. Seems like a lot of logic in the view as well. 
Oh there's all kinds of wrong with the Magento templates. 
this is a great book, but combine it with YouTube videos and plenty of hands on to really understand wtf they are on about. 
This could be done easily in using Doctrine ORM (implements data mapper) if you're comfortable. But there a are a few things you need to consider. - You want 3 tables with each with firstName, lastName, email etc... I'm assuming that you want that data in it's specific table... That would really defeat the point of inheritance. As you're trying to avoid repetition. You're better off using either STI (single table inheritance) where all data for all parents and children are mapped to one table. or CTI (class table inheritance) where attributes for the parent is stored on one table (IE firstName, lastName, etc) and attributes for each child class is mapped to it's own table. parent and children linked with a foreign key. You also need to be aware that parent classes must remain abstract. And the parent class should not be the target for associations as Doctrine would not be able to lazy-load the entity. edit: typosss
Multiple environment support! Excellent. Can't wait to get stuck into this. Thanks Davert!
I agree with [SkepticalMartian](/u/SkepticalMartian), converting notices and warnings is a bad design decision. Assuming that exceptions for notices and warnings would only affect developers smacks of not having much code in a production environment. You don't want your customers to suffer a fatal error for what would normally be a potentially harmless notice. For example, if I'm selling something on a website, do I want my customers blocked with a 500 error because a random display variable in a template was not initialized? There is a reason that notices and warnings are not fatal, and that is because they tend to be benign errors. It would be better to have monitoring tools in place, such as Newrelic or the like, to know if notices and warnings are happening, rather than hear about them from your customer service department (or angry boss) due to fatal errors.
PHP is written in C, not a library or extension... but just a program written in C. While being interpreted it gets "compiled" to an intermediate language opcode (think of it as a specialized assembly) and run on a virtual machine (this is the zend engine). This is how most mainstream interpreted languages work now. Compiling to C/ASM is not near as portable and is a lot slower.
The PHP language is compiled into an intermediate bytecode which is then interpreted by a runtime engine.
See also: http://www.php.net/manual/en/internals2.php and specifically http://www.php.net/manual/en/internals2.opcodes.php.
A lot of VMs these days use a JIT (just-in-time compiler) that will actually compile the language opcodes to machine code. The JVM that runs Java is most notable for this, and it is also what V8 (used by chrome and node.js) and HHVM (the new PHP runtime from facebook) do. It is very performant and also compiles rather quickly.
yes JIT is great, but it's not near the same thing as compiling to C/ASM. It only does does certain parts of the runtime that it's programmed to learn to optimize and compiles the code that's running the most often. So JIT offers the best of both worlds. However, PHP doesn't do this, (unless you like to live dangerously and use HHVM), so I didn't really mention it. I like to poke a little fun at the basic PHP implementation and say it's probably one of the least advanced mainstream runtimes (for this and other reasons). :)
That's a bit of a misnomer. Yes, JIT enabled VMs *can* and *do* compile opcodes to machine code, the majority of the code that's run is still executed normally on the VM. The only time that most JIT compilers will actually compile to native is in a loop (generally). When the same code is run under guarded circumstances close together. This is why benchmarks don't show a massive performance benefit between HHVM and PHP for normal code (there is one, but not big). But when you benchmark things like a [fibonacci generator](http://www.alexfu.it/2013/10/22/symfony-benchmark-on-hhvm.html), the JIT can really shine, and blow the doors off the native VM. But also note that if those guards fail (variable types change, for example), the complexity of the JIT process can actually cause a slowdown (since it needs to "JIT" on every loop, as opposed to once). Basically, it's not a magic bullet. But it can be pretty awesome when it works...
In absolutely no universe can the JVM be described as quick.
Perfect, this answers the question exactly. Short and sweet.
are you talking about running applets in the jvm 1.1? because it seems your information is a bit outdated :)
thanks this is what I was trying to get at.
Java 7 Update 45, applets take an age to even launch, and then I can watch them draw their UI elements one...at...a...time. God forbid you click on anything.
No; fire around 5 people and get the $10 Jira license. https://www.atlassian.com/licensing/jira But seriously, if you can afford Atlassian products, your life will be much easier. edit: PR accepted; reluctantly. 
You probably mean Java 1.7 
Storing user ID references to a separate collection; this is relational data.
Fatal is good. If you mistype a variable name, it's better that your program crash out than to continue and perform the operation incorrectly. A mistake that generates a notice in PHP is an error in most every other programming language for good reason. The whole distinction between errors, warnings, and notices is just more poor legacy design in PHP (and is somewhat arbitrary). 
I agree with the OP. Fail hard. Fail fast. Have better code. That doesn't mean you should be installing this onto your prod env tonight though.
I'm looking for a php(or .net) solr coder to whip up a simple shop cart. low concurrency, heavy sku (4mill). I think a hybrid approach to avoid stale (in-stock,not in-stock) approach might be wise. Just needs to have basic facet/breadcrumb search. hell if there is some code that will do the basics of faceting and paging, i'll buy that from you - really simple stuff - [instock - bit], sku,mfgpartnum,descript,searchable,price. I can work out the upload/commit and swap backend crap, frontend I suck at. 
&gt; you're judging by applets? that technology is dead man. Please tell that to Cisco, HP, and Dell then. It takes ~10 minutes for the Compellent Manager interface to even load these days.
This initial tutorial starts you from the basics of programming, so if you have some experience with some other programming languages then this will give you everything you need to get the syntax of PHP. But some of the underlying fundamentals might already be familiar to you. Try it out, the first chapter is available free and for any chapter that is published you can read the script for free. The content we have up there right now might be a bit lower level than you need, but we have more coming that could be a better fit. 
Its more than a bug tracker, but if you're hosting it locally check out http://phabricator.org/
I think they've been working on alternative interfaces but they don't happen overnight. So they already know. But you really don't have much to compare it to, other embedded VMs like PHP doing the same job would be 3x worse. However, that being said, these days in web applications the server side langauge is almost never the bottleneck, and front end technologies is where most of the optimizations need to happen. However, for most of the stuff I do. PHP does a lot of the end user stuff. but we send stuff to Java regularly to do the heavy lifting. Things like full text searching and things that require high concurrency and it works very well and is bleeding fast.
sounds to me like you are running them in a Client-server kind of setup where the server is actually sending the window information across an intranet. We use that kind of setup at my work (crappy software from the late 80's still being propped up) and it behaves very similarly. It has nothing to do with the JVM and everything to do with application architecture and crappy programming.
Yes. So many days passed, but it took lot of time figure out the cleanest way to implement multiple sessions.
&gt;Does it get interpreted to C, and then interpreted to assembly? lol2damax
You should check out Facebook's PHP Interpreter/VM. HHVM! www.hiphop-php.com While not yet fully compatible, it's a quite a bit faser.
I use Redmine, I wouldn't say I am in love with it though.
Yes, especially true in dev environment. I've never see any PHP warning that don't affect the execution at all. Most of the time, it is followed by an error, or the rest of the time the following code doesn't do what it should.
I like Trello, but sadly I don't think it's UI would do well with hundreds of points. As a to-do list on steroids it seems great, but as a bug tracker I'm not so sure.
I moved from Redmine to Jira. Sooo happy I did.
Care to elaborate on the high points? My main complaint with Redmine is it is painful to install/upgrade and the plugins to get what you want it to do (knowledgebase, kanban. etc...) can be a bit hacky
Can I get some information about the puppies?
Non-static methods require a instance of the class and can be useful for holding and manipulating data without exposing it to stuff outside of this instance. For example, you can create a new class object for a specific user, load some data, change some data, then hand that same object to other classes for farther processing, etc. Kind of like little containers. You can also use both static and non-static, like: User::Init( 1234 )-&gt;ChangeEmail( 'new@email' )-&gt;SendNotice(); Init() is a static method that returns new User(). The other methods are non-static, they process private data inside the User class and return $this for chaining. 
Commit rejected. Username indicates commits will be worse.
I thought about this, but think of this circumstance. A developer wants to include PHPErrorNet in his project as standalone, so it will be included in his ./lib folder. Developer then proceeds to deploy his project in an environment that already has PHPErrorNet auto prepended from another location. require_once will not prevent an error here. The only way to prevent an error is to see if PHPErrorNet has been defined. I plan on implementing namespacing, but this would still remain an issue even after that. This is the first I've heard of class_exists being bad practice, in fact I've seen several well founded projects use it, but I am open for further discussion on this, of course.
&gt; Compiling to C/ASM is not near as portable and is a lot slower. HHVM? If it was a lot slower, why would Facebook be doing this? :)
I saw a really interesting talk at RICON East about how people are trying to improve this sort of thing using [trajectory-based execution](http://www.youtube.com/watch?v=xdOqkiV-ET4) so there are a lot more potential matches for predicting code than just loops with "guarded circumstances" and whatnot. This will in the future give JITs an even bigger speed boost, right? 
They switched to a JIT enabled VM.
Well yes! They come well hydrated and untrained - consider it a blank slate ;) Enjoy!
Easy upgrades, super easy plugin installs, easy to use plugin marketplace.... Great Agile board plugin, great browser extensions for bug reporting. Great keyboard shortcuts...... Etc.
I would love to use Atlassian products, if only the price ramp up wasn't so steep - we're a small company and only just above the $10 levels (a few devs and about 10-15 end-users who would log issues). Bah
FYI, the V8 VM will never interpret opcodes. Javascript code that runs in it is always first converted to native code. More details here: http://www.jayconrod.com/posts/51/a-tour-of-v8-full-compiler 
&gt; Compiling to C/ASM is not near as portable and is a lot slower. Very true. C and ASM are not portable at all. That's why when using linux you have to either use a compiled version of the program that matches your branch-flavor or compile it yourself from the original source.
Try this $st = $db_pdo-&gt;prepare("ALTER TABLE email ADD COLUMN (:column_name) varchar(60)"); 
Exactly, don't quote the placeholder variables, PDO will take care of that for you during the replacing.
Does the database user have permission to alter a table?
well, shiver me timbers. hadn't noticed that. Compiled code is still much faster in general, but JITs are better for dynamically typed languages - especially if they are more long lived processes. 
I changed it to root just to make sure and the result is the same. Doesn't work.
I generally use static methods for any activity that is not dependent on state. I tend to model these functions around functional purity.
Doesn't return errors, or doesn't return any errors when you call errorInfo()?
To answer my own question, apparently I'm a dumbass and was trying to bind the column name. You cannot bind table and column names with PDO. Follow up code looks like this. $st = $db_pdo-&gt;prepare("ALTER TABLE email ADD ".$column_name." varchar(60)"); //$st-&gt;bindParam(':column_name', $column_name); $st-&gt;execute(); If anybody's interested, [this dude here](http://stackoverflow.com/questions/13405392/pdo-bindparam-issue) answers a lot better than I can.
I just answered by own question below. It was my own fault, I misunderstood how "bind" works with PDO.
I haven't tried to alter a table via a parameterized query, but my guess is the column name will have nothing to validate to so it will just fail. You are likely just going to have to do your own validation and create an exec call.
Actually you'll be surprised how much that "in general" is getting less and less true as time goes on. Even for non dynamic languages. I've seen benchmarks where the JVM beats C in a lot of benchmarks. I'm sure it could be said that compiled languages like C/C++ can "potentially" be faster than virtual machines. However, in the practical real world they often aren't. It's very interesting how far computer science has gone in language runtimes every year.
HHVM is faster than the old C-compiled version. You can even have it do deep inspection so that it compiles better, and their Hack piece allows static variable types, increasing that performance even more (that's not out yet though).
You're looking at it slightly wrong. You don't have "A Teacher who is a Person". You have "A Teacher role fulfilled by a Person". So, for example, you implement a Person table/model with all the info about a Person, and then you have a Teacher table/model with a one-to-one relationship with a Person. When dealing with databases, consider [Composition Over Inheritance](http://c2.com/cgi/wiki?CompositionInsteadOfInheritance) as one of your most useful weapons. Your models shouldn't extend from other models, ever, if you can help it.
You are looking for CSRF tokens, a simple [google search]( https://www.google.co.uk/search?client=ubuntu&amp;channel=fs&amp;q=csrf+tokens+in+php&amp;ie=utf-8&amp;oe=utf-8&amp;gws_rd=cr&amp;ei=3qqGUor8JcazhAf64oGwDg) (now you know of the term) will yield nice resources for you to read up on. Here is the [wikipedia article](http://en.wikipedia.org/wiki/Cross-site_request_forgery). I would reccommend [ircmaxell's blog](http://blog.ircmaxell.com/2013/02/preventing-csrf-attacks.html) as a link to read as well.
I think a more obvious mistake in a shopping cart would be POST'ing all of the item information to checkout (item ID, price, quantity, etc). The idea is the user could forge a fake POST request externally with a lower price. Basically, SAFE: cart.php - POST addproduct=1 - SQL query on the backend looks up the true price based on the product ID and fills the cart with it UNSAFE: cart.php with form posts id, price, etc. On my own page I could just do: (Assume a $10 product) &lt;form method="POST" action="yourdomain.com/cart.php"&gt; &lt;input type="hidden" name="item" value="1"&gt; &lt;input type="hidden" name="price" value="$1.00"&gt; &lt;input name="submit" value="submit"&gt; Now a $10 item would be added to the cart for $1. After that, you could show simple SQL injection vulnerabilities (not escaping inputs), or XSS attacks where users enter their name, address, etc. (imagine putting &lt;script src="evilurl.com"&gt;&lt;/script&gt; as my first name)
Just provide an alternative on the fly echo '&lt;th&gt;' . strtoupper($column_name ?: 'No column name') . '&lt;/th&gt;'; More about ternary operators can be found in [the manual](http://php.net/manual/en/language.operators.comparison.php).
I think I'm gonna do just that: foreach ($row as $content) { if(!empty($content)){ echo '&lt;td&gt;&lt;div align="center"&gt;' . strtolower($content) . '&lt;/div&gt;&lt;/td&gt;'; }else{echo '&lt;td&gt;Here be no value.&lt;/td&gt;';} }
I'm gonna take a stab in the dark and suggest you may want to investigate the EAV database model.
Never used symfony before but tried plenty of Laravel, Zend, CI etc. I would join, but I would slow down everyone. But I'm wondering, what do you guys usually do on a Hackathon? 
Some work on documentation, some on bug fixes, others on new features; all contributed to the Symfony project. However, during this hackathon, I will also give courses for those who never touched Symfony. You are welcome to join us!
I'll join if I'm not the only beginner then :)
Seems interesting. Never worked with Symfony but I am familial with Laravel and CI. Is there a general theme for the hackaton?
Phabricator It's open source. (FREE baby!) There's an API so you can make a simpler interface if you want, but the interface is nice IMHO There's a meme generator. 
A good JIT can outperform C code in the right conditions because it can use runtime-only knowledge in its optimizing decisions. But you're right about PHP. It works more like a game console emulator than a JIT compiler; it doesn't even use an intermediate AST.
To elaborate: the problem in a nutshell is that binding a value will automatically quote strings. So what you wind up with is: ALTER TABLE email ADD 'mycol' ... Which of course can't work since columns (if quoted at all) are quoted with backticks. Essentially, placeholders will only work in cases where a quoted string, literal boolean, literal NULL, literal integer, or literal float (everything but strings need to be specifically bound as their given type, or they may also be seen as strings) can be used. For example: $stmt = $pdo-&gt;prepare('SELECT foo FROM bar LIMIT ?,?'); $stmt-&gt;execute([0, 2]); would result in a query where all inputs are treated as strings that looks like: SELECT foo FROM bar LIMIT '0', '2'; but if you do: $stmt = $pdo-&gt;prepare('SELECT foo FROM bar LIMIT :offset,:limit'); $stmt-&gt;bindValue(':offset', 0, PDO::PARAM_INT); $stmt-&gt;bindValue(':limit', 2, PDO::PARAM_INT); your query will correctly be built as: SELECT foo FROM bar LIMIT 0,2
&gt; Aka the variable remains FALSE but the error just doesn't want to show up. That's because you just use a string literal without any echo. Take this as a sign that you should properly format your code.
I'll take it as a sing I need some sleep. Thanks for the input, I appreciate it.
It's not actually bytecode; the Zend engine just uses internal arrays of opcode structs. It's similar, though.
Well, both replies so far are valid, though it's less likely that even in a bad application that you'd post all data about the product. That said, I'd be tempted in my secure version to pass either the product name or its url slug and make the form fields differ from your database table. There are two reasons for this: * it obscures information from malicious users. They won't know how your tables are laid out and they can't see what number of products you have from the id (though I know that's hardly an issue but whilst you're doing things right you might as well do that) * csrf attackers could just send any old id along in the form and it'd probably work (I.e. Guess at a low number and the product will probably be there). That's tougher using product slugs because it has to be the name of a product. Again, not foolproof, but much better A note on xss though. Whilst it's not good to be able to execute java script on a page and all user input should be escaped, xss is only ever an issue where the java script gets executed when displaying to another user. Otherwise the malicious user is just annoying himself. All they can get is cookie data they already have access to. Still, play it safe and secure it anyway. Good luck in the assignment and it's nice to see someone considering security in such detail :-) 
Yeah but sometimes you'll need to user ref ids, even in mongodb.
We'll try to focus our efforts on 2.4. 
Let the database server do the heavier work, and then send the result to your application/script. I searched google for "compare two tables sql", and got quite a few relevant results. Having said that, I didn't really look at your script -- I looked at the problem from a design/architecture perspective.
What sort of comparison is being done here? Can this be sliced up and done piecemeal anyhow? If you cant break it down then you're gonna be using a lot of memory regardless.
Try optimizing the script then, perhaps there is a memory leak. I hear xhprof is good. Moving to a framework will only increase memory. Are you on PHP 5.4 or higher? That could help. Also perhaps try it with nginx and php-fpm instead of Apache, that is supposed to use less memory.
I see. You mentioned in your post it's a string comparison -- perhaps if you could elaborate on what kind of comparison it is exactly, it'll give some insight on how to solve the problem.
Had a quick look at your script. Correct me if i'm wrong: 1. Get rows from table 1 2. Do some processing 3. Store in a an array 4. Repeat steps 1,2,3 for table 2 5. Compare the processed data in two arrays Try using unbuffered queries i.e. instead of your data being all present in query buffer + a variable, you retrieve the data, process, save to a var and discard on the fly. Should halve the memory usage you currently have.
You're running out of memory because you're keeping several large tables entirely in memory as arrays. What makes you think this won't consume gobs of memory? You need to put some serious thought into the design decisions that are requiring you to do this. If this is something you'll be running multiple times, you seriously need to rearchitect. If it's just a one-time conversion script, fire up a large-memory machine on aws, give it tons of swap, set the memory limit to the moon, and do your run. 
I took a very brief skim through the code and it doesn't look like you're doing anything that advanced. I would agree with jamalhaija that you should let SQL do as much heavy lifting as possible. It's really very good at it. Much better than PHP would be. I would likely re-write a lot of your script to use a combination of stored procedures and functions (functions so it keeps your long stored procedure as clean and maintainable as possible).
Yes why not include a `LIMIT` clause in the sql and a 'last_updated (timestamp)` or `processed (boolean)` column to keep track of what rows have been processed. Then just iterated through the data piece by piece, kill the script, and pick up where you left off.
You can use unset() php function to delete data you already processed from php memory. You can also process records in batches using LIMIT in SQL only saving the result and using unset on everything else. Or use a temp table and only load one row at a time saving results to the temp table.
It seems like the problem has stemmed from the fact the data was not standardised when it was inserted into the database in the first place. If you need to fetch the data and perform several operations on it before you can use it for comparison then it sounds like you are not storing the data right to begin with. Anyway you don't really want to be performing comparisons over large datasets within PHP, you should let the database handle this. I'd suggest you give http://dev.mysql.com/doc/refman/5.5/en/pattern-matching.html a read through to see if you can find any helpful information that will allow you to perform the matching within the database.
Hi ultio, Im currently developing a PHP &amp; MySQL-based solution for a company's HR payroll, and one of the major problems (solved by a PHP script) is 'somewhat' similar to yours, in that it needs to process 100K+ records (biometrics time-in/time-out data) dumped in a MySQL table, and put the computed time in another MySQL table. Initially, I run the script thru the browser, but the running time was horrendous (1 hour+). I know that SQL query optimization can help, but orthogonal to that (and ofc the pressure of enterprise software deadlines!) I believe that somewhere in the PHP system I can increase the running time of the script, or even abandon running it in the browser itself - run it in the command line, for example. I initially went for the first alternative, which was increase the memory limit in php.ini. I think though that this memory limit in php.ini is bound to the apache environment (server) AND the browser (client). This setup requires your browser to be on 'at all times' while the script is running (please correct me if I'm wrong on this one). The inflexibility of having to run a script thru the browser eventually got me thinking of the command line alternative. After some searching, I found out it was possible to run my PHP script thru the command line, with ofc the following setup (I'm using Windows): - go to the folder where your script is - run php -f &lt;script_name&gt;.php - (ofc, php in my Windows setup is 'found' using the PATH environment variable which can be set in the command line or (easier?) in the UI of 'My Computer') This command line setup is what currently works for me, and I searched (and ofc proven) that there is no running time limit on this (I'm not sure on the RAM, though) Anyhow, I believe the command line is a far more flexible tool for certain 'hard' development tasks, and I've even heard good things about Symfony 2's Console Component (haven't tried, though). I also from your problem I can gain more insight in performance issues surrounding the running of data-intensive PHP-MySQL operations - it's part of my day to day job, anyways :) TLDR: It's sometimes better (and I'm using it right now for our data-intensive payroll system) to run certain PHP scripts in the command line rather than the browser
It likely is. For a generic web server it is not typical / expected that a single process would use so much memory.
Hi thinkspill, thanks for the info. I might actually use this so that when the user 'processes' the biometrics raw time-in/time-out data (in our payroll system), they can do so using the UI, rather than the CLI.
I would suggest fetching the records in batches (either using buffered read or doing reads in a loop using LIMIT x,y), processing them and inserting them into a local DB. Once you get 2 tables in there (one for amazon, one for your company), you run an SQL to find the matches (or non-matches).
Quick and dirty or not you've already reached a problem of scalability. I read through your script, architecture / schema issues aside, only solution I can think of to make this work in a similar fashion to what you've already done is to construct some temporary tables rather than keeping your entire query results in memory. It will be more CPU intensive and take more queries but it will work if you do it right. Rather than doing things like if(isset($catTranslations[$row["platform"]]) you'll be doing a query to your temp table. It will take longer to run but doesn't seem like time is necessarily a primary concern.
1. Fetch a row from amazon 2. Convert the row 3. insert into temp table 4. Repeat until done 5. Repeat 1:5 with your table 6. Use SQL (you created indices right?) to compare tables Will it take longer? Maybe. Will it not use all your ram? Yes. 
Well, SQL has a collection of [String functions](http://www.tutorialspoint.com/sql/sql-string-functions.htm), and you can find differences in your data sets with fairly simple queries: http://www.sql-server-tool.com/compare-two-tables.htm I really do believe that there is a way to do this with SQL...it may require some extra work, but it'll be an elegant way to solve your problem.
It is odd to recommend phalcon to a complete beginner after also recommending they go through every line of code in open source php projects to get a feel for the language...
Yeah should probably be intermediate to pro, but that said there are good ideas here with links to more.
It actually works quite nicely. Besides, when I say "Trello", I'm talking about Trello plus the myriad of third party tools that use it as a central interface, like https://www.burndownfortrello.com/
I also find it odd to advocate ditching Windows and then advocate cross platform IDEs. Why do I need a cross platform IDE? All my people use Macs and we like Sublime. 
It's more than that. Experience matters. You can't bypass experience building real projects by learning about new tools. In reality all this article says is "do the things you know you need to do on a regular basis to maintain your competency with your tools", which, if you have a clue, you're doing anyway. Typical sitepoint filler.
The "pro" doesn't think in just PHP. If that happens to be his speciality then great but the pro will recognize when tasks are better suited to a different technology.
&gt; unset() php function to delete data you already processed from php memory This is a common misconception. From [Stack Overflow](http://stackoverflow.com/a/584982/879047): &gt; unset() does just what it's name says - unset a variable. It does not force immediate memory freeing. PHP's garbage collector will do it when it see fits - by intention as soon, as those CPU cycles aren't needed anyway, or as late as before the script would run out of memory, whatever occurs first. &gt; If you are doing $whatever = null; then you are rewriting variable's data. You might get memory freed / shrunk faster, but it may steal CPU cycles from the code that truly needs them sooner, resulting in a longer overall execution time. 
This should be run as a CLI script instead of inside a HTTP request.
unnecessarily harsh on WordPress
Professionals don't choose the platform, business requirements do. The advice to abandon the windows platform is ultimately his personal opinion.
also, if you don't care about case, it's probably going to be faster to upcase stuff as you import, not each time you go through the comparison loop.
"abandon spaghetti code" OOP does not necessarily and, in most personally-identified cases, does not mean better than "spaghetti code". There is such a push against using straight-forward coding (such as those blanket-statements), that I have inherited projects using OOP that are absolutely harder to maintain and to follow than if they had simply hard-coded a lot of it. In my experience, the level of competence amongst programmers follows the traditional bell-curve with most people being average. An average coder always means some bad coding practices in their projects. The larger a project is, the more these pile up until the "working code", as a whole, becomes "bad". When new code is added, it simply becomes a bandage on top of a bandage. It's a waste of time in the real world to convert an entire project into your version of Kool-Aid. You are forced to work within the frame you are given. As great as it would be to sit on a cloud all day and think of ways to improve what is in front of you, production environments do not afford you that kind of luxury. "New" projects are rare, most projects are life-cycle-maintenance. I am not an expert by any means, but IMO, the missing link between "Beginner" and "Pro" is flexibility, understanding everyone around you does not love change for the sake of 'enhancements' and reinventing the wheel with every single task is not necessary or even admired.
The focus of the article was improving PHP skill, not being better in general, though I do see where you're coming from with this and I agree. The article does mention thinking of problems in real world terminology (which, when dumbed down, is what OOP is), though admittedly perhaps doesn't stress it out enough. I should mention, however, that I don't think one can learn to think critically and break down problems properly unless one knows OOP.
The recommendation of Phalcon wasn't meant as a direction to go learn it immediately. Actually, a previous paragraph mentions the beginner should first focus on basic OOP before even trying to focus on frameworks. It was merely a personal preference and suggestion as to which framework should eventually prevail in the ocean of existing ones.
The IDEs were merely suggestions. I often find myself working on OS X and Linux interchangeably, which is where the multi platform nature of those IDEs comes in very handy.
Agreed, when entering a project mid life-cycle, there's not much hope for an OOP rewrite if it's already a procedural mess. However, when starting anew, one should always strive for OOP. It just makes everything that more readable for future devs, especially if the blocks are sufficiently encapsulated and well documented.
&gt;With this knowledge, they apply for jobs and, unfortunately, usually fail. Why would that be unfortunate? The PHP world needs less of these people. On another note, I believe a good PHP programmer is not _just_ a PHP programmer. Experience in lower level languages as well as in completely other paradigms helps quite a bit.
&gt; Having to look up basic functions to see if they have the argument order the same is dumb. Welcome to programming. Java was the same back when I used it. The str stuff matches C conventions - which themselves weren't great, but at least they are familiar.
Having come to PHP from both python (django, pylons) and ruby (rails). I find PHP refreshingly straightforward, bare bones, and reliable by comparison. PHP classic is modeled on C. If you know C (and I used to do all my work in it), then it is very obvious and natural feeling. The newer dynamic object facilities are very nice. To paraphrase Stroustrup - there are languages people complain about and there are the ones nobody uses.
I think using an IDE can often times make you not advance as a developer. Being able to read your code unassisted is very much part of what makes a pro a pro. Just as I write without assistance, coding without assistance, while slower initially, makes you better and faster in the long run.
I think it is a good idea to use Apache Solr/php-solr to handle the rapid full text search,pagination,sort,breadcrumb/facet searching. Have you seen anything open-source (ala free not pseudo compiled) that has a good scale-out design? Whether you have a small 5000 sku or 4M sku, 5 users or 500 users, a good design should not have to be constrained by these numbers at all. Hell if you play to the PCI gods, you have to scale out anyways for separation of roles.
Procedural code isn't bad in itself. I've seen both beautiful procedural code and ugly-ass OOP code - as everywhere else in life, it depends on how it is used. Good procedural code, when organized properly (namespaces, coherent and logical naming, functions that don't cause side effects, etc.) can well be easier to maintain than illogical OOP code or an explosion in the design pattern factory.
This is a problem in the /r/php community. So many times someone comes in with a very simple project and little to no knowledge of programming in PHP and everyone pushes them towards the framework flavor of the month. If they don't understand the underlying basics these frameworks do nothing but harm. And there's something to be said for understanding when a situation calls for an OOP approach or a procedural approach. Sometimes an OOP approach is like using a sledge hammer and train rail spike where a thumb tack would do.
Honestly that's pretty much the only relevant bit of code needed (the formatting seems to be a bit funky on here, make sure you are reading that bottom line below the "code: " box. It is put inside of a regular html page and some example code for the modal would be: &lt;!-- Modal --&gt; &lt;div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"&gt; &lt;div class="modal-dialog"&gt; &lt;div class="modal-content"&gt; &lt;div class="modal-header"&gt; &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;&amp;times;&lt;/button&gt; &lt;h4 class="modal-title" id="myModalLabel"&gt;Modal title&lt;/h4&gt; &lt;/div&gt; &lt;div class="modal-body"&gt; ... &lt;/div&gt; &lt;div class="modal-footer"&gt; &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;Close&lt;/button&gt; &lt;button type="button" class="btn btn-primary"&gt;Save changes&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;!-- /.modal-content --&gt; &lt;/div&gt;&lt;!-- /.modal-dialog --&gt; &lt;/div&gt;&lt;!-- /.modal --&gt; 
Thinking like an engineer is part of being a pro as well as understanding the technology and features of a language. Someone who innately thinks like a programmer will also be stuck at the beginner level if they don't learn the frameworks, OOP, PHP details, etc. Being a pro is the sum of a way of thinking, programming language skills and knowledge, communication and management style, having the understanding computers and technology in general, and understanding customer needs. Plus a good dose of wisdom, confidence, and emotional maturity. You can't separate someone's way of thinking from their knowledge of one or more languages when discussing what makes someone a pro. The two go hand in hand.
&gt;It is put inside of a regular html page and some example code for the modal would be: By default, HTML files don't pass through the PHP parser, try renaming it to .php, and of course, viewing it through your web server.
My personal experiences lean in the originally assumed direction - on average, procedural code I've encountered was generally worse than OOP code. I agree 100% with you, though. 
True on both points, quite right.
"To be frank, and this might sound harsh, "WordPress developers" are no more PHP developers than people with Instagram are photographers." lulz
You've answered your own question already: "returns the number of rows affected by the last *DELETE, INSERT, or UPDATE* statement " You weren't using any of those three.
do not rely on the query result returning what you want. Instead parse what actually comes back from the query to determine validity. i.e. the data
&gt; I should mention, however, that I don't think one can learn to think critically and break down problems properly unless one knows OOP. I'll have to disagree with you. You can learn those skills without knowing OOP. C was my first real language and help me a lot in developing those skills. 
I'm a little disappointed that your SVN web client doesn't detect when to use singular notation.
Agreed, another minefield awaiting in many frameworks is that you are 90% done in a week but then you spend 6 months fighting with the framework to finish the other "10%" then end result is that you have effectively re-written critical parts of the framework in order to enable critical features of your project. I call this the "You can't get there from here" syndrome. 
Haha I like that. I'm going to quote you in the future.
As is his endorsement of Phalcon as the end all best framework.
I skimmed this article first and as soon as I got to the part where it said that all the code should be Object Oriented I decided not to bother with the rest. Being good at object oriented programming is important, but procedural code has it's place. It's not just about performance costs. Those who try to jam everything into object oriented programming regardless of whether there's any actual benefit from it are the same folks who end up making unwieldy programs which have completely undue complexity. Everyone who has to deal with the code later on will be face palming and asking why the author wrote so much junk code that needs to be sifted through but never had any potential of contributing anything extra in terms of what the code was meant to accomplish.
Yeah... seriously? I like PHP for what it is (and have probably used it more than any other language over the past couple of years) but.... If you're using PHP for everything, you're doing it wrong. I'd say an elite PHP programmer is really an elite *programmer* who knows PHP and knows when to use it. Wrote a [blog post](http://blog.mcdougle.net/what-is-your-favorite-programming-language/) about it at some point... it's like a builder using just a hammer for everything
The title is 'Becoming a PHP Professional The Missing Link'. I would agree with msiekkinen. One of the most important skills a pro would have is when to or when not to use php. Should we assume you are the articles author?
I feel like these posts are deliberately edgy and dramatic. There's usually some good knowledge and links in them but I always spend more time reading these comments; this is where the best stuff is. If anything, it stimulates good discussion.
Think that you should build your own framework. There are plenty great frameworks out there that are more than suitable for any web project. Seek and try them out and learn as much as you can. 
if you are going to deploy on linux you might want to develop on linux anyway. Doesnt mean you have to drop windows , as long as your dev envirronment is linux(VM ... ) . 
Are you an experienced developer just starting with PHP or is this your first excursion into the world of computer programming? If it's the latter then most pitfalls you'll want to avoid will won't be specific to PHP, but programming in general. Here a few important ones: * Avoid [antipatterns](http://sourcemaking.com/antipatterns/software-development-antipatterns). * Write [self-documenting code](http://stackoverflow.com/a/209089/900942). * When possible, use a framework (this is particularly relevant with [PHP](http://www.phpframeworks.com/)). * Avoid [premature optimization](http://c2.com/cgi/wiki?PrematureOptimization). This is by no means an exhaustive list but should give you an understanding of some of the things to avoid. If you want more thorough analysis of these concepts (and more) I couldn't recommend the book [The Pragmatic Programmer](http://www.amazon.ca/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X) enough. Every developer should have a copy.
In before someone says "using PHP"... 
Heh, I think you got downvoted for the first sentence there - but i see what you're trying to say. "What bad practices should I avoid? Answer: Thinking that you should build your own framework." And I agree, don't do it. Look around at the community and see what works for people. Building your own framework, while possible, is not ideal - mostly because it doesn't expand your own horizons. It locks you in to only the programming paradigms you already know, it doesn't expose you to some of the other ways to think about programming. Whereas using a framework that already exists exposes you to the coding style and thought processes of the developers on that project, many of whom have a lot of experience and knowledge. Don't be afraid to dig into framework source code, either. It's a treasure trove of knowledge.
Or work remote on the dev server. Servers are cheap. For $10/mo you can have an additional server identical (save for memory specs perhaps) clone of your live server. That's 5-10 minutes of an average dev's billable hour.
And you just convinced me to not make my own (,very likely to be shitty,) IoC Container and just stick with the one available to me a la Laravel. Also, I gave you both upvotes. Good on you. 
you have to visit lots of php website like http://www.codeasearch.com
Here's a quick and easy one. There are *lots* of PHP resources out there. Some are old, some are new. Some are well-regarded, some haven't aged well, some are crap and always have been crap. There's a very quick way to tell how trustworthy an article is. Look at the date and the minimum PHP version recommended. Here in late 2013, it is no longer safe to trust anything that targets PHP version **5.2 or lower**. It is probably not a good idea to trust anything written about PHP **prior to 2009**. Why 5.2? It was initially released in 2006. The next major version was supposed to be 6.0, with improved end-to-end Unicode support. Around the time that 5.3 was released in 2009, it became apparent that the 6.0 effort had stalled. (By the way, that also means that anything mentioning PHP 6.0 can be discarded as untrustworthy.) Some of the fallout of this failure caused some major changes to future release handling. As a direct result, changes in 5.4 and 5.5 have been driven by a greater degree of community input. There are major improvements to many aspects of the language and standard extensions that you don't want to miss out on. Why 2009? By 2009, a large number of PHP developers started to pay attention to and actively promote modern practices. This is reflected in the increasing quality and ubiquity of unit testing and various reusable libraries and frameworks. The average how-to or tutorial is more likely to reflect modern sanity if it's been made in the past few years. Another huge tell-tale sign, by the way, is any mention of the [`mysql_` family of functions](http://php.net/intro.mysql) (sometimes spelled "`ext/mysql`"). After being bad practice for literally a decade, it was finally officially deprecated in 5.5. Anyone that still recommends it should be deemed blatantly incompetent and immediately ignored. There are still horrible, low-quality shared hosting environments that don't have modern alternatives available. Don't give them your money. If you find an interesting article, how-to or tutorial about PHP, look around the site for a while and look for these signs. Also, a tip. Avoid using full-stack end-to-end frameworks until you know the language. A *lot* of good frameworks have small, independent, reusable components that are totally worth using. However, they all work differently, and all are not created equal. The "best" ones also happen to be the most complex, and I would never wish that level of complexity on a new developer. It's a one-way ticket to confusion and irritation. Learn bare-metal PHP first, and then you'll understand what frameworks can help with.
&gt;Also, thinking encrypting data like passwords is a good idea. Wait, are you saying *not* encrypting passwords is a good idea? 
The biggest problem I see with PHP developers is they don't understand software development and they become arrogant because they can get shit to work, but they can't see it's shit. Spend some time reading about the SDLC and software development best practices. You can get a good grasp on the basics in half a day. Please don't become another shitty yet arrogant PHP developer. They are fucking everywhere. Source: Worked in software development for about 15 years, quite a few of them in management roles. 
&gt;What are some bad practices I should avoid? Writing PHP.
They mean you should be salting an hashing, rather than encrypting.
I'm the author, yes. The article is not about when to use PHP because it's about how to be better when you *do* use PHP. Knowing when to use it or not is an entirely different topic.
Nope
I don't think words like "bullshit" and "excrement" stimulate good discussion, but to each his own I suppose.
How is it possible that so many people misunderstood the context? The article is about being better in PHP when you DO use it, not about using PHP for *everything*. It's a PHP related article published on SitePoint's PHP channel, it's not a "php is better than everything" article.
If you run into any source that tells you to use any of the mysql_* functions, immediately close it and never return. If it is a bound book, burn it. If it's not yours, you're doing the owner a favor. Another common mistake is avoiding the use of databases entirely. While advanced SQL can be tricky, everything you need to know for basic tasks can be learned in an hour. Avoiding using databases almost always leads to spending a lot of time trying to badly re-implement things a database will do for you.
To clarify for newbies, encryption is a two-way process. Data can be encrypted and decrypted. Hashing is (at least hopefully) a one-way process. You run a process on it that can not be reversed. Salting helps keep your hashes unique and unguessable (such as via rainbow table lookup). You want to hash and salt passwords so you can still check if they're right (by running the same process upon user login and comparing), but you *do not* want to store passwords in a form that can be reversed.
It seems silly to say it, but you'd be surprised at how often people don't do it: Sanitize variables before using them. If a user has touched anything that led to a variable, sanitize it before you do anything with it. Especially using it to search the database. A simple function like [GetSQLValueString](http://stackoverflow.com/questions/4458180/php-getsqlvaluestring-function) will save you a lot of headaches and make it easy to sanitize things throughout your code.
Rewrite the wheel. Don't immediately dive into frameworks (else you're just learning OOP, `$client-&gt;post($dataArray); blah blah blah`).
Check out the [Pimple IoC container](https://github.com/fabpot/Pimple) as a good example of a stripped down container manager. Even if you are not going to use it, taking a look at is tiny class is a great way to understand what is at the core of most other IoC containers.
bad practices to avoid? * Mixing HTML and PHP too much Obviously there's almost always going to be a slight mixing - PHP was built to embed in HTML - but keeping them as separate as possible will pay dividends re: readability and maintainability. * Avoiding OO Don't avoid it - you'll end up writing far more complicated and hard to read code if you studiously avoid ever writing or using OO techniques. * Skipping comments Use comments in your code. You may not be good at it now, but the more you comment, the better you'll get at it, and it will help you be thinking about your code as you're writing it ("how will I end up describing this?"). You'll find you'll write better code that will ultimately need less descriptive comments most of the time. * Avoiding testing Don't avoid understanding testing. Either dig in to PHPUnit, or learn something like codeception or even get started using straight selenium tools. All these will feel like you're diving in at the deep end, and you will be. But don't avoid it. Practice writing tests now. It will help you think about how to write testable code when you're writing code, and your code will be better for it in the long run. EDIT: Forgot one more: * Avoiding version control "I'm the only person on this project... it doesn't matter... I have backups... etc". Getting started with *any* software development? Learn version control. Git/svn/whatever - I don't care *as much* what tool you choose as long as you understand the basics behind one and use it. It will make your life much easier when you expand out and start using other peoples' code, or, more importantly, when you need help from other people. I get calls from people now and then who need help on a project. The ones who have a git or svn repository, can get me credentials and a a database schema (preferably a setup script/migration with at least sample data and tests)... those are the one who I can start working with in a matter of minutes. If everything is just on your local computer or on some remote host where I don't have access, or I can only FTP down 6000 files by hand... those are nightmares I rarely get involved in. 
As long as you have a linux server to test your work on before deployment i don't see the big deal. I have a good computer with dual monitors and Linux doesn't run smoothly. Tried Ubuntu and Mint. Could be the hardware, i don't know. Spent a week trying to get something good running to no avail. This is why I develop on Windows. Computer runs more smoothly, I find I develop faster as a result. As for deployment, i find only minor tweaks are needed between Windows and Linux. Once these tweaks have been done once work tested on Windows almost always works on Windows.
When someone bashes WordPress, you know they're a mid level PHP Dev... 
That's the general idea, however I'd recommend doing it in chunks of say 300 rows (depending on row size / memory available).
For me it would be: Escape all user input and make sure you understand how to manage/server a uploaded file safely. 
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC
Ah, that makes sense. I've always thought of hashing as one way encryption, which is guess isn't totally the correct definition. I read your comment above as "store them in plain text" lol
&gt; Think that you should build your own framework. I am the guy who has to maintain the projects written in such frameworks. Thank you! **NOT!** 
Echoing html. Writing long lines. Not using the alternate syntax when writing templates. Do not do this: &lt;?php if ($condition) { echo '&lt;p&gt;some text&lt;/p&gt;';} else { echo '&lt;div&gt;someother text&lt;/div&gt;';} ?&gt; Prefer this: &lt;?php if ($condition) :?&gt; &lt;p&gt;some text&lt;/p&gt; &lt;?php else: ?&gt; &lt;p&gt;some other text&lt;/p&gt; &lt;?php endif; ?&gt; 
For readable code I recommend following [Object Calisthenics](http://www.slideshare.net/rdohms/bettercode-phpbenelux212alternate). These are NOT absolute rules, just guidelines. As far as general coding practices, here's my two cents: Avoid inheritance. By this I mean avoid the `extends` keyword. Especially avoid extending built-in php classes. If you absolutely need to extend a class, remember to use the Open/Close principle. Keep your objects open for extension and closed for modification. In php terms don't use the protected keyword. Keep class properties private and public class methods should be final. 
Anyone of us isn't as smart as a whole framework community, they are designed to make things faster easier and more secure without having to be php Yoda's. They let you create without having to worry about the small stuff.
I would say to absolutely write your own framework. Just don't actually use it for any production applications, and don't publish it for others to use. I learned a hell of a lot about design patterns and various architecture when I built one, and it helped me to write better code when using other frameworks in other projects. 
No, use PDO or something else, `mysql_*`: This extension is deprecated as of PHP 5.5.0, and will be removed in the future. Instead, the MySQLi or PDO_MySQL extension should be used.
What do you use instead of mysql_* functions? I used to use mysqli. Is that a problem?
Yes. 
Basically if you want to make a project, just find a company in India to do it for you and once received you'll have an example have you shouldn't make your project.
I agree. Also, try writing your own Content Management System. Pick one of the various ones out there and try to reproduce all or most of its features, without looking at their code. It's a fantastic way to learn how to solve real-world problems.
PDO is better, but mysqli_\* is fine. EDIT: Let me expand on that a little. PDO is better in that it has a much better API, plus it supports multiple database backends. So, porting from say MySQL to PostgreSQL is pretty easy (as long as you don't have vendor-specific queries). PDO is a little heavier than mysqli_\* though, so if you have a pretty small app, you might want to factor the small performance hit in. As far as security and such, they are both adequate, assuming that you make proper use or prepared statements. My main gripe with mysqli_\* is that it's just a pain to work with in its natural form. There is so many redundant extra lines of code, such as binding result variables, that you don't need to worry about with PDO. I always recommend finding or making a wrapper class if you're using mysqli_\*, to abstract some of the crappy API away. EDIT 2: Apparently I'm too dumb to escape markdown.
this is more of a security check, rather than good developer practice!
even thought the second is more readable than the first, I'd still say that both are a bad idea. use a templating engine, that's what I do, and it helps keep relevan things together. also makes the code **a lot** easier to read and maintain!
One could argue php is a templating engine (especially because the alternate syntax exists). I agree with you, using something like twig would be better, but the discussion is about php, isn't it. So my point is, if you're going to use php as a templating engine, do it like I said.
You should use no ORM, only PHP 4 features, no framework and create a layout depending on tables and inline styles. That is how many great PHP programmers started! Building your own cms is probably much easier that installing a proven software and only try yourself at writing a few plugins for it. If you are not cool enough for that: Use a proven CMS. If you got the server for it, you could try Plone, which is a great piece of software written in Python and therefore probably a bit more familiar to you, or else just try Joomla, Wordpress, ... You will probably learn more if you use a proper framework from the beginning. Writing all components from scratch in a new language without much experience may be fun, but I wouldn't put such a page online for everyone to exploit.
As for commenting, this is how I was taught how to comment: Before each object, do a comment block describing what the object does and when it was written. Before each method, do the same but in more detail: any arguments should be described fully, and the return value should be as well. If it requires any specific libraries, put in a quick explanation of why that library is needed and what bits of it you are using. Declare each and every single variable at the start of the function. Loop counters, EVERYTHING. Don't re-use loop counters, either. Comment each of these, stating what each is for. Any time you use a complex algorithm, like any of the named graph-traversal algorithms, make sure you comment the block it is implemented in with its name, where you got your reference implementation, and so on. Unless the what is somewhat hard to figure out, the why is always more important. Any other comments you toss in should be a roadmap of your thinking. In my headers, I always have to-do lists and dates and potential bugs that I think might arise.
Thanks!:)
Dealing with past contracting work my company has sent out I can verify this.
You're right, fixed.
You should start right now.
[High Performance MySQL](http://www.highperfmysql.com)
excellent, thank you!
There's also /r/learnprogramming for those looking to learn languages.
Another great example of pre-mature optimization and poor benchmarking technique.
Another good book is MySQL by Paul Dubois. It's not as in-depth as High Performance MySQL, but if that book is over your head, Dubois's book is a good start.
also /r/coding also /r/webdesign and /r/webdev for similar ish subreddits
SQL anti patterns by bill karwin. 
I've got 3 sites for friends businesses on WordPress. It's perfect for them. They don't need to know how the back end works to run a decent site. 
&gt; Using constants is a good idea if you have values that never change. No. It isn't. Using global constants pollutes the global namespace and adds to poor structure and architecture. I worked on a system once that had about 400 global constants, defined in around 30 different files. It was a nightmare.
Oh dear. The things I had to fix to get things to work. I spent as much money fixing it as we did getting that mangled piece of crap in the first place. 
Why the downvotes? It seems like a simple little framework.
Yes and no. Yes, the best frameworks have components that can operate independently. This is true. But that's not the same thing. A car has wheels. But wheels are not a car. &gt; It can be easier to conceptualize this by thinking of frameworks as a collection of related libraries. Yes. Easier. But **simply not true**.
Seconded..one of the best books I ever bought when moving from procedural to php programming. 
Depends on the language and tools available. With PHP, you will be able to debug remotely, breakpoints and all.
In the context I don't think it was. The author was talking about how to be a better PHP developer, and looking at WordPress' horrendous code I can't see how working on it would ever make you a better PHP dev. Sure it works, but it's a mess of spaghetti PHP and HTML all mixed in together. People hack together a site with that, then think they are the shit, and that's why PHP gets a bad rep.
I disagree. I used CodeIgniter to build a site not very long after I had first started using PHP, and it was such a positive step in my learning. It got me to learn OO concepts which is fundamental to being a good dev (and it is, I'm sorry). It may not always be necessary for an application to be fully OO in it's design, but understanding what objects/classes are and how to create/use them is absolutely fundamental if you want to become a good programmer in a high level language, and faffing around writing procedural code of your own for a year wont teach that. 
Interesting insight. Never saw the connection before.
I think I'm most excited for the artisan tinker command. 
Tinker has been improved a bit. In 4.1, if your system supports it, the [Boris REPL](https://github.com/d11wtq/boris) will be used. If your system won't run that, we fall back to the current 4.0 tinker environment.
Dudette... did you not read my post? I'm new to this. Your feedback, while appreciated, is not helpful to getting me to the next level. Edit: Not a dude.
Edit: read that all wrong, sorry.
Ohh good to know! BTW, Thanks for your hard work man! We're building our new startup with your framework. Can't wait to use those new relations! :)
Thanks!
For production why not something more like New Relic? Xdebug wouldn't really make sense in a production environment unless that same environment doubles as your dev environment on the side. In such case it is also very easy to setup a second PHP build for each site. Why worry about the security / performance of Xdebug when you can just not, I guess is what I would say. :) Unless you have a clear reason for wanting to enable it on your live site, then there's no reason to put it there.
Never heard of New Relic! Awesome! I will check that out. I am assuming that the build status and code coverage pages are just from a dev branch of a project then?
Perhaps you aren't aware that one can run xdebug over an SSH tunnel. It's pretty freaking awesome.
Interesting article. I've never seen Silex used in such a way before. I've only really used it for small REST apps or prototyping.
I will be using New Relic to assist with making sure production is running smoothly and also tracking our servers that are running. I understand now that xdebug is dev/test purposes only.
The only point of xdebug in production would be the profiler which is why I recommended new relic instead.
Markdown (or restructured text if you want more formatting options). It's readable in a text editor, super easy to write and maintain, and you can easily display it online with basic formatting (titles, code blocks, ‚Ä¶). This is very popular on GitHub for example.
You're right, I fixed it that it's now leveraging the power of Boris REPL.
big donkey balls. seriously, gotta be good code here.
But it is so fast! That is important, because PHP is like C! I am a bit tired of those blog posts.
Try commiting after issuing an execute: $stmt-&gt;execute(...); $dbh-&gt;commit(); 
&gt; And there's something to be said for understanding when a situation calls for an OOP approach or a procedural approach. Sometimes an OOP approach is like using a sledge hammer and train rail spike where a thumb tack would do. I agree with this statement, however I think it's important that you asses those situations on what might be. A procedural might be the best fit at conception, but chances are great that said project will expand and evolve. Even though the OOP approach seems overkill, it can save you alot of headaches in the future. I'm by no means an expert, but I believe that thinking outside the box, in this context the obvious procedural solution, helps you grow as a programmer. It might not be the best fit in hindsight afterall, but it will likely give you new insights. 
because the most pitfalls are avoided and best practises forced
oh hey, someone ask about inserting in to SQL and he already sanitizes input :) Good Job Sir!
&gt; Using constants is a good idea if you have values that never change. Yes. It is. (Generally) Constants are good for performance, for maintenance, and for productivity (yay for modern IDEs). His mention of an undefined constant resulting in the constant name or the laughable use of the constant() is really puzzling and related to each other, as I've never seen either in production. Why you would every discuss using global constants (like this article) is a red herring. Globals are bad. Constants or not. All constants should be part of a class resulting in a static constant. The differences that someone might not know about are benchmarking the use of statics vs constant statics, which behaves as expected. Static constants are more performant.
You're right, but irrelevant. Constants have value and merit in their place, but as you say, that place is in the relevant class. Nevertheless, the only reference to class constants is benchmarking "const" the context of which is unclear. Every example given is clearly using **global** constants. I'm not arguing your point, but what is said in the article is wildly different from what you're saying, and that's what I'm arguing against.
Generally it's recommended that servers don't send the X-Powered-By header (configured in php.ini) and Server header (nginx/apache/other) ;)
The website needs some left and right margins on mobile :( Also, how was the route speed up of 100% measured?
I didn't! Thanks, I'll check that out.
Editor: [Sublime Text](http://www.sublimetext.com/) LAMP if you're on Linux, theres many packages available to install this, find one for whatever distro you use: [LAMP](http://en.wikipedia.org/wiki/LAMP_\(software_bundle\)) WAMP if you're on windows: [WAMP](http://www.wampserver.com/en/) (I've never used this specific one, found it on a google search looks pretty legit though.)
Stick to a text editor like Sublime Text. An IDE will toast your netbook. As far as running a local server is concerned, you're also probably going to run into trouble there too. Maybe try PHP's [built in server](http://php.net/manual/en/features.commandline.webserver.php). Less to worry about. Honestly though, you really will need an upgrade sooner rather than later. Programming is stressful enough, no reason for your hardware to make that worse. 
Sublime text FTW. When you have more power phpstorm is great. I can't reccommend Zend Studio any more. 
How old is your netbook? I have a 3 year old netbook and it runs the latest version of Netbeans just fine. Lots of people are recommending Sublime. Sublime Text is fine but it isn't an IDE. By all means give it a go but if your looking for IDE functionality Netbeans should do you just fine. As for apache I have xampp running on my netbook. Again no problems. https://netbeans.org/features/php/ - http://www.apachefriends.org/en/xampp.html Also, how old is you PHP book? You want something that at least cover's PHP5.3. Ideally 5.4. (5.5 was recently released) 
I got the context; it sounded like someone who couldn't do it and gave up because it is hard or different. Now with IIS Express and WebMatrix, development has never been easier on Windows. For 10 years I have been developing PHP on Windows and deploy to both Linux and Windows. Never had a problem; I am just sorry that the author is continuing the worship of Linux when in reality the platform is, again, a business decision. 
@pan069: You can use $app-&gt;offsetGet('key'), which is nearly the same syntax as in every other DIC. So probably you try to explain, what kind of "more professional" you would like to get?
Is the problem the commiting to the DB or even the objects variable isn't being set? There's a whitespace missing in the query: rating)_"."values Try it. EDIT: just realized, I'm replying to a 11 hour old thread. You've solved the problem by now. Sorry man.
For an editor on Windows, I would recommend PSPad. Rich in tools, fast. http://www.pspad.com/en/
I wrote this a while back, might help shed a little light on how to set it up: [PHP Debugging over a VPN](http://yellowsharkmt.com/2012/08/28/php-debugging-over-a-vpn-with-phpstorm/)
thanks a ton! got both installed and plan on doing some late night catching up! 
let me link you the book i currently have, the book is in my car and the car is with my brother at work right now, as soon as he is back i will link you the book according to the latest edition and i hope you can tell if its still up to date. 
so far I have this, notepad++ and sublime, i guess ill put each to the test and see which one clicks with me. thanks! 
For the next few months the netbook is my only option since I just renewed my contract all around and i have to pay for essentials at the moment. I guess a text editor is better imo for the time, at least I can still make scripts and all. 
&gt; but chances are great that said project will expand and evolve. Even though the OOP approach seems overkill, it can save you alot of headaches in the future. That's part of the "understanding when a situation calls for an OOP approach or procedural approach" part. If your project is something that's going to expand, even if it's small at first, you'd take proper steps in the first place. Some things however are just hacky little side things that you know will either be replaced by a better solution later or never looked at again. 
And this is the reason Laravel and Symfony are awesome.
?
Hmmm, the answer has been deleted. Well what I meant is it's nice an loosely coupled, so much so that individual components can be used outside of the framework.
this isnt responsive, so no mobile compatibiltiy
XDebug should not be enabled in production. You run tests (and code-coverage analysis) locally on your dev machine. Or if you're using CI this may be done automatically by some other server, but not your production server. After all, you want to see test failures and coverage *while* you're developing and not once you push it to production ;)
yes they are
When learning something I prefer a big, opinionated framework with lots of beginner friendly documentation to guide me through their way of doing things. It helps you understand the overall concepts that you can later apply to different projects, even without the same framework. I feel like Silex would be too minimal to teach anything on its own, and is better to use once you already have the concepts down and just want to get things done. However, in this case I suppose they had a teacher to guide them through the concepts, so the framework didn't need to do all of the "teaching".
I don't think I need to provide the context when the context is clearly the article?
Can the Aura spam please stop? The spam is almost getting as worse as PHPixie.
In built REST routes and 5.3 compatibility.
Eek no worries then :) just pained me haha. 
I was trying to be generic and picked the wrong acronym. Oops.
no, it isn't API. It is basically a small web application where I wouldn't normally provide documentation, but I think the users may need something more than a one time demo for example.
You should hit the IT department over the head, because that is not how spam protection should work.
Actually Greylisting is a very common spam prevention technique. The first attempt to deliver the email is delayed as "temporary unavailable" and the sending server will requeue the email after a specific time period and the receiving server will accept the second attempt. The email must be the same email and session or the greylist will not recognize it as a retry. If you send two emails one after another they will both be delayed and the user will receive two emails and it will not bypass the greylist. Most spamming servers will not attempt a retry since they try to send as many emails out and will not attempt the retry. There is really no way around this if the school has greylisting because the receiving server (the schools) will always delay emails from an address it has not received emails from before and you have no control over their email server. If you delay the email from being sent it will only add to the delay for the user. This can only be solved by the school reducing the delay timer within the greylist configuration or removing it entirely. 
All of the events are actually documented very well, right here: http://laravel.com/docs/eloquent#model-events
I don't hear anyone complaining about all of the laravel posts. The article has code and opinions and discusses topics that may be of interest to people.
I would recommend learning OOP. I used this book (see below) and it helped me get a good grasp on OOP concepts which will be beneficial if you ever wanted to start using other programming languages. http://foundationphp.com/pos/
I recently bought "PHP Objects, Patterns, and Practice" for our new intern. I havn't read it cover to cover, but from what I saw, it appears to be what you are looking for. 
&gt; I've ventured into OOP, but struggle to see the benefit for the small applications I've created. There isn't really. One of the problems with the way OOP is taught is that it becomes very obvious that the overhead of using (let alone learning) OOP is pointless. The fact is, the trivial examples used don't really benefit from OOP. OOP and good architecture is actually hard to do, and the abstractions created are often unintuitive. The benefit comes when you have multiple objects, complex structures, reusable components, etc. The bigger the project, the more benefit things like OOP (and frameworks) provide. If you've only worked on basic systems you wouldn't have necessarily seen the need yet. But there definitely **is** an objective (no pun intended) benefit. &gt; when I poked around they seemed like learning an entire new language Frameworks aren't necessarily easy to learn. There's something called an "innovation S curve", that also applies to OOP and really to any new skill. Essentially it says that productivity when learning a new skill will actually drop. You have to learn it, and it's hard. But gaining that new skill will increase your productivity beyond where you were before. Accepting that fact and embracing it is a key to a good career. Frameworks do a lot of new things, they change the way you access a lot of things. But they do so for the better. You should definitely learn some OOP before you jump into Frameworks, but don't put them off too long. They're the way of the future. (I recommend Laravel, btw.)
I recently wrote sphinx docs for [a php project]( https://github.com/iFixit/alertinator/tree/improve-documentation) for the first time, using [doxphp]( https://github.com/avalanche123/doxphp) for the api docs. Added a Read the Docs webhook and it was good to go. 
A link to a question? That's very interesting! Let's post all stackoverflow questions here.
if you really must send a second email, it would not be in a sleep function. you'd have to place the second email into a database with a timestamp and send it from a separate script called via cron.
yay
This is very old school, but we have procedures that support writing and publishing DocBook XML based manuals. We typically produce administrative, developer, and user manuals even if they're very brief. The publishing options are what took us to DocBook. You can write once and publish to a great variety of formats. It's also proved to be easy to teach to others. But if you're the only author and the only output will be web based, I would echo the Markdown recommendations.
I really appreciate the responses, thanks guys. It seems I need to wrap my head around OOP and will likely grab a book to do it and go from there. Thanks again.
I agree, now it has a margin on mobile and it's responsive with the new Bootstrap version :)
Thanks for the doxphp reference -- looks interesting and useful.
Looks great, but no SASS support? :(
If you already know some about PHP, perhaps this tutorial will help you to get into OOP: [http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/](http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/)
OOP when you are not doing anything big is essentially a library of single use classes and methods. It is incredibly important when you start larger projects, and even more so when you start getting into abstractions, tests, and lots of other stuff that is more advanced. Frameworks are a good way to learn OOP and help you develop a website quickly. They can be almost like another language if you aren't familiar yet with the OOP side of things. After you are familiar with OOP, it is just a library of functions that work together to speed development. I would recommend learning an easy one first like Codeigniter before going into some of the bigger ones. Follow the flow see how the objects interact and what exactly is happening. It can be difficult, but learning the source is always the best bet at seeing what is going on. A good intermediary would be to use a package to handle something you do a lot of. Swiftmailer is one of the first packages I used to send emails via SMTP and reused at several spots in my code. It will atleast get you used to using packages throughout your code. Think of things you do over and over in your own small project, and then write a object for those. It could be sanitizing requests, or echoing out an HTML table of data. Those sorts of things will get you into the habit of writing your own objects.
Not sure why you got down voted. I get a little weary of people saying to newbies, "Learn A Framework". Maybe the newbie should learn to crawl before they walk or run. They should understand how to do things without frameworks before they jump into frameworks. Even it's just little experiments and not live sites. Then they should learn a framework. 
Well, despite what people say about Our being redundant in small applications I'd have to disagree. Generally speaking, you're going to be writing small applications with a view to learning the basics and eventually working and earning building applications for real. If you just say "well, I'll do Our when I'm working for real - it just takes too long now", then it's like learning how to shoot with a banana. You're gonna go to war and get shot to hell. OOP is, in my opinion, something of a cornerstone to gaining not just a knowledge of the language but of formal programming principles in general. These ideas will take you well beyond the basic CRUD systems and into 'enterprise-level' programming. It takes you - as a figure plucked from the air - 20 percent longer to write small to medium applications using Our once you have a firm grasp of it, but the maintainability of those applications goes through the roof. At least it does if you write code in a way that allows you to extend it later. Now, that might not seems useful to you now if you think you never want to update that code. But only fools say never. If it can happen, if it could happen, then plan for it happening. You don't have to write the solution from day 1 but writing your code with it in mind will save you headaches in the future. When I first started doing OOP I fell foul of favouring the quick and dirty solution over doing it 'the right way' from the off. I quickly learned the headaches of having to crawl back through 'spaghetti code' to find and fix issues or to add in new features. Now, I've been a PHP developer for 5 years and I'll never write code that isn't object oriented. Using something like Netbeans, you can automatically generate your getter and setter methods which saves you hours in a large project, or you can be all snazzy and use magic methods (try not to, though as I find it causes more issues than it solves and it breaks auto completion in IDEs). Not only does it make your code better, hemp you understand the advanced principles of programming and give you a foothold in MVC frameworks, but perhaps most importantly of all it makes you far more employable. You may not think it now, but poorly written code will genuinely fall over under the stress of several hundred requests per second (a relatively small site by today's standards). Trust me. I've seen it happen. OOP is no magic bullet. You can still write bad code, but it does at least help you to think about your solution in a way which let's you avoid many common mistakes and what's more, allows you to fix them more easily (in one easy to reach place) when they do arise. Those talking about performance penalties are talking in fractions of a second that frankly are out weighted by the benefits tenfold. It's the weakest argument against writing code properly that I've ever heard. The only downside is that OOP takes longer to write in the first place, but once you get into the swing of it you'll be knocking out CRUD methods in 20 minutes. I've just started using the Zend framework (version 2), and my development time must've tripled if not worse - that's one learning curve I wouldn't wish on anyone - but the code I'm writing is so extensible that it should be usable many years into the future, and in time I'll be much quicker again. The serendipitous consequence to such difficult code is that heading back to plain old OOP is a breeze now. So yeah, seriously, don't think of OOP as an inconvenience. It's a skill that is highly valued (if not essential) for the majority of professional roles, so if for no other reason, it's one worth mastering. Give different patterns a go. I myself am guilty of not learning more design patterns and now coming to Zend I am regretting it. They're easy to understand with examples to look over, it's just a question of remembering them. Hope that helps a little. Can you tell that I'm a big OOP evangelist? 
I agree with this. If you're looking to get into deeper concepts but don't want to jump right into Symfony2 then this is a good stepping stone. Jeffery Way's Laracasts.com are helpful in understanding some of the concepts before you get started. Jeffery goes fast so just be prepared to hit the pause button. :) Also, check out the Laravel irc channel for a nice little community of people that you can ask questions when they arise.
I came to this thread to say the same. Check out Laravel, and spend a few bucks on Laracasts.com to save some time. 
I've got an eye on trying my hand at iOS development in the near future which uses MVC if I'm not mistaken. Thanks for being so passionate about OOP, if I was hesitant before I'm now convinced. I know code can get very messy very quickly, even for a small application, and I hate coming back to struggle through what I've written to change up some functionality, add something new or just review it so perhaps moving to OOP will help with that.
Well, I couldn't comment on iOS, but it does use some proprietary SDK (who'd have thought that from Apple heh) I believe. I'm just keen to share what I wished I knew years ago really. Learning OOP isn't as tough as people sometimes make out but it's not exactly a doddle either. It's also not massively slower to develop - especially when you put that besides the benefits. That said, I stand by what I said about OOP not being a magic bullet. No programming principle is. You still have to apply best practice and logic to it, and that's the bit where experience steps in and even after five years I'm not the best at it. That's why I'd suggest getting your head around different ways to write good code early on before you learn too many bad habits. I couldn't even name half of the OOP design patterns now, and whilst I did learn them all a few years ago, I find that if I don't use them and keep the knowledge sharp, it'll soon be cast out of memory because it's quite tough to remember and if it's not necessary there's no point remembering it heh. It's just I really need it now! One thing I've found helpful is to theoretically 'stress test' your ideas by asking yourself whether they'd easily be adapted to do something else similar or to extend current functionality. One good example I could give from my experience would be a basket class. You wanna add products, right? So you have an addItem() the method on the basket which takes a product ID, gets the product and adds it to an array. When you first start, that might seem like a good idea, but what happens when you need to be able to add, say, gift vouchers to the basket? You have to completely rewrite addItem() to accept something else. So you change the parameter it takes to be an ID and type and use that to look up the item. Still, very restrictive, so you split it into two methods. One for addProduct() and one addGiftVoucher() where you pass in an instance of Product or GiftVoucher as needed. Much, much better than our first example. But, we now need to be able to add, say, services to our basket. We need to add in a third method to the basket class, but we're tightly coupling three other classes with the basket class. One method is involved with validating objects from another class. This goes against the single usage principle (every method does one thing). The solution I'd go with is a 'BasketableItem' interface, which dictates what methods you need available to add an item to the basket. The three classes (product, voucher and service) all implement that interface, and you then have one single addItem() method on basket which takes an instance of that interface. That way, the basket doesn't care what item you're adding to it, so long as it is add-able as defined in the interface. This keeps your code simple, clear and extensible. Hopefully that sort of makes sense. See, all of these examples were OOP but only this last one gives you flexibility and keeps your code clean. So, even knowing how to write OOP isn't necessarily enough. But it's a damned good start :-) 
that a neat little app. Unfortunately I don't have a mac though.
We use Sqlite for a project because IT was going to take a while to provide us with a MySQL database. It's small, and lightweight, but limited in functionality. It works for what we need it for though.
I just started down the path of learning Symfony. I have been at it for a couple weeks now and I am seeing light at the end of the tunnel and it is fantastic. I have gone from thinking I know a lot about PhP to knowing I know little. HOWEVER! I can also see where I am going to be in a couple months and I am excited to be there. Before I started down the Symfony route I would say I would have been in a position similar to you. I had written a number of small applications and a small CMS (content management system) from scratch. Right before I started into Symfony I rewrote my CMS using objects. I also had experience with OOP from Highschool and University programming classes I took. Thus, you may want to start with some basic OOP stuff before getting into what I have outlined below. I thought I would atleast show you the route I have taken in the last couple weeks that I have found extremely enlightening and rewarding. * [Composer](http://getcomposer.org/) - Dependancy Management ([using composer video](http://www.youtube.com/watch?v=QOldVDVYnAE)) * [Git](https://github.com/) - Verision Control ([getting started in GIT video](http://www.youtube.com/watch?v=U8GBXvdmHT4)) * [PhPStorm](http://www.jetbrains.com/phpstorm/) - IDE * [Sublime Text](http://www.sublimetext.com/) - Text Editor * [Namespaces](http://php.net/manual/en/language.namespaces.php) - Simple concept that I didn't even know existed until about 3 weeks ago. Since then I have started to REALLY see their advantages. * [TWIG](http://twig.sensiolabs.org/) - Templating * [PSR](http://www.php-fig.org/) - Coding Standards * [Doctrine](http://www.doctrine-project.org/) - ORM aka Object Relationship Mapper (aka makes working with databases SUPER EASY) * [Symfony](http://symfony.com/) - Framework ... but it is better IMO to think of it as a series of tools that work together to make your life easier. And they all tie together to work wonderfully together. Like Doctrine + Validation + Forms ... it just makes me so happy to see the synergy amongst these disparate libraries. * [Symfony's Book](http://symfony.com/doc/current/book/index.html) - even if you do not use Symfony I recommend reading some of the chapters in this book. It will enlighten you to some of the tools that are available to developers that you probably do not even know exist. The opening chapter is also simple, but amazingly inciteful and made me rethink the way I envision web projects. So, overall this is the path I followed on my own journey to go from that basic level of PhP to a more intermediate level. I think you will find this path as rewarding as I did. Learning these tools and processes is by no means an overnight thing. You are right to say it is like learning a whole new language. It kind of is. It sounds like you are not necessarily looking for immediate tools you can use to make your workflow better NOW, but instead you are looking for a journey that will take you from a basic user of PhP to a more advanced one. That is what I feel I am attempting to accomplish and I hope my own story helps you.
We run a Postgres database because when it was time to chose the database, MySQL was years behind Postgres with Geomatic features. SQLite is good for small databases or databases with little or no concurrency.
This is a fantastic response. Whilst my question really focused on "what's logically next in the language", taking my development / workflow to the next stage is something I really wanted to look at too. I'll be coming back to this reply a lot. Thank you.
:-)
@jesse_dev sure, I am going to remove it. When I was submitting it didn't show anything. May be different time zone.
I've been incorporating MongoDB into a project and loving it so far. It's very easy to use and is quick when dealing with large data sets.
I'd like to mention that MariaDB (which I use) is a direct "drop in" replacement for MySQL and uses the MySQL drivers. 
You really need to look at everything out there. If you want a conventional solution, look at other dbms systems, but you have a very broad variety, from real time dbms systems, to traditional dbms, to value key stores, to data warehousing solutions. I personaaly have worked with Oracle, MySQL, MS SQL Server, SqLite, Vertica, Access, CouchDB, Hadoop.
I wasn't aware that there was a specific maria db client for php.
Can you give me some examples of why it'd be in my best interest to use noSQL for a project considering I'm already experienced with MySQL?
I don't know where people get the idea that it takes longer to develop an OOP application vs a procedural one. With all the IDEs and frameworks available for all sorts of different projects it is ridiculously fast to start any type of project.
there isn't, the client is shipped with the maria package AFAIK.
I rewrote software from ground up. It's not an easy decision but sometimes it's necessary. Basically, you have to find a solution where the new and old system can coexist for a while, so that there's no downtime. At my old job, they had a custom PHP4 CMS, no unit test, all procedural, globals everywhere, no models; all custom sql query.. Everything on phptherightway.com but done the other way! BUT! It was working, and there was users on it, and more features was needed, so downtime was a no no. Some background: this was a private ERP/MRP software. There was SQL injections everywhere but since it wasn't accessible from the internet, they didn't care. gasp. Anyways, we settled on symfony2 and active record. The strategy was this: since our front-end was always getting data from ajax, we could simply point use the old front-end with a new backend. Some views weren't using AJAX yet so we also did a wrapper to simply curl calls the new backend. We did all new features in new backend. Instead of bug fixing a feature - depending on the complexity - we rewrote it in the backend. It was faster - simpler - cleaner. It took a long while to port everything since we didn't focus on the migration - only on new features and bug fixing. By having a new base, we basically migrated without really focusing on it. It also was refreshing since you see shitty code and you translate it into super clean code. Awesome. So to summarize the plan we took: - Make the auth system decentralized so that both system can access it or something. - Do new features in new backend, link it with old frontend. - On free time: port features to backend; write unit test for those. We never got around to porting the frontend ... so it's still a mess, but at least the business logic is clean, and the migration was transparent, it wasn't costly, code is now unit tested. Anyways man, deciding when and how to do a rewrite is never an easy decision/task. Good luck! 
If you use it often and you start many projects with it, then maybe. In other occasion NO, just dive in a new project, use what your learned so far on it.
There are very few instances where you want to use NoSQL over a relational database. The most common use case that comes to mind is user sessions, where you need access to that information on every page load. You can also use it as a front end cache for a very large app where complex joins are expensive (think Tumblr.) Another example is some sort of real-time service, like an online game, that requires extremely fast reads and writes of lots of data. NoSQL databases are best used in tandem with a relational database. Unless you know what you're doing, you never really want to have a NoSQL database power your whole app. You end up rewriting a lot of the relational aspects in your application layer when your site gets more complicated instead of having all of that sit at the database layer written for you. If you're really interested, I'd suggest looking at how some big name sites use it: http://readwrite.com/2011/01/02/how-twitter-uses-nosql
I'm still bothered by the Input::get approach. It seems like it should be a class member or action parameter.
MySQL is just SQL, you will have no problems using any DB in SQL family. So there is no problem. Just learn something else.
Define "large".
Code wise they are a 100% drop in replacement, but don't come compiled into PHP. You have to remove the default mysql client libs, install maria's and recompile your extension. In all seriousness though, from what I've seen, you need to be doing a fuck load of queries and maxing out your hardware to make this worth your time. The performance difference isn't that significant in synchronous environment like php. But for environments like Node.js it can be huge. 
You might be better off asking outside the bubble of the php community. The majority of people will never have used anything than MySQL/Postgres and a few nosql solutions. There are excellent large database solutions available from oracle. IBM, Microsoft etc with the caveat that you pay ;-)
To add to Crushnaut's post: Composer - this is the way all third party libraries should be installed, absolute must. Git - use version control even for the teeniest tiniest projects, absolute must (you could look at other vcs, but git is arguably the best). IDE - for large projects (eg symfony) this is essential. Use Netbeans if you don't want to pay for phpstorm. PSR - standards are very important, might as well use the same ones as everyone else :). Doctrine - this is advanced, I wouldn't stress about understanding it immediately. Frameworks - It's important to understand what they are trying to achieve, Symfony is an advanced framework and will probably cause you a lot of frustration starting out. There is another microframework based on the symfony components called silex, and even a [12 part tutorial](http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1) on building the actual framework by it's author - highly recommended. OOP is part of any code you pick up these days, you need to move towards this paradigm. 
I saw a comment that already said that the SQL part is more or less the same-- and I agree to a point. The big difference I have run into is less differences in use and more differences in installation/administration. So, install away. Check the config files. Try out code snippets for basic benchmarking for your most burning questions about suitability or limits. Most of the ones suggested are free and the ones that aren't free can still be installed for free on a trial basis or for non-production use.
The general consensus for quite a while has been that phpstorm in the best IDE for PHP. Having tried a bunch, I agree.
SQLite is maybe the most simple database to set up. I use it for most my rapid prototyping projects. Migrating to a full-fledged Postgres or MySQL is fairly easy to do when needed.
I think sublime text would probably be most similar to emacs, while still adding a lot of the "nice to have" features of a full fledged IDE. 
Not strictly PHP but every programer should know this, imho: [Clean Code: A Handbook of Agile Software Craftsmanship ](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) You really only need to read few first chapters. 
Yes I expected people to recomend phpStorm. But it's going to be hard to shell out 100USD when I think I will ultimately go back to emacs. What about net beans ? We were forced to use eclipse at a previous employer and I found it to be cripplingly slow
How is Postgres PHP driver? Do you use array column type? Last I checked it, it was returning string for arrays which you had to parse yourself get it into PHP array. Does the driver support quering arrays without writing straight SQL? What about JSON and hstore?
Even though they're all Java, the performance is like this... Eclispe is the slowest from my understanding. I hated it in general when I tried it (years ago). NetBeans varies - Was pretty slow on my old laptop. There was some issue when I was using it that was constantly reading files from my project for some reason, even images. Has probably improved since I used it. Never had any slowness type issues with PhpStorm at all really. If you happen to be a contributor on an open source project, you might be able to get a [free PhpStorm license.](http://www.jetbrains.com/phpstorm/buy/buy.jsp#openSource) I used NetBeans before PhpStrom. It's pretty good, definitely worth a go if you want open source. Like anything, just make sure you give it a decent chance before you go back to your old way of doing things, like a month at least. At this point I'd never go back to non-IDE coding.
There's a lot of bad rep for both Netbeans and Eclipse out there, mostly due to the fact that in the past, they were both rather slow, depending on your setup. This has improved a lot over the years. Netbeans 7.4 loads very fast on my system, to the point where I wonder what kind of setup the people who complain about it are using. PhpStorm is getting a lot of praise these days, but the settings design is not logical, in my eyes. Setting the compiler individually per project is a hassle. Netbeans has this as an option, but it doesn't force you in to it, simply taking the default php executable from the start. Not being allowed to have more than 1 project open at a time is also not very fun. And the fact that PhpStorm refuses to start debugging a Symfony site if you don't have PHPUnit installed and properly set up for your project. How this setup is accomplished is something you then have to figure out yourself and google is not at all helpful. All things that happened to me. Sorry for the rant there.
PostgreSQL is rock solid EDIT: If you wanna just learn and explore look into different kinds of database such as the NoSQL ones
Suppressing errors when calling methods and functions. Don't do this @your_function_name($param1);
I was in the same place not long ago. Jquery is great for adding interactivity. I don't think you'll have to rewrite the whole thing provided you've written the code well. As for making it look native, responsive design is your friend. I would use percentage widths or maybe a few media queries to change the layout for different resolutions. 
I've worked with MongoDB, it's great if you need a flexible database where you can do.. well, pretty much anything with. You sacrifice all the nice data-integrity features of standard SQL for flexibility. I think it's absolutely fantastic for prototyping. Basicly you save objects instead of rows, and where a row of a table is pretty well defined in your database, that object isn't and can be pretty much anything.
obviously this is still a work in progress but why should we use this instead of something like [codeception](http://codeception.com/)?
ignore... human error in there somewhere, as the unix time is the same...
I've worked with PHP and Oracle + MSSQL. Both have "free" versions you can try out and if you're looking to make money via a job one day best you learned both of them. They're both PDO and easy peasy to setup on windows (still figuring out MSSQL on RHEL, specifically getting the PECL driver installed around our draconian security policies).
For obvious reasons I suppose! Thanks!
Sure, but seeing as this is posted in the PHP sub-reddit, I am guessing that the OP is looking at databases that people use with PHP.
The reason is because of your PHP date format. Take a look at the [date formats](http://us3.php.net/manual/en/function.date.php#refsect1-function.date-parameters) and also look for duplicate format characters in your string.
Not as high performance as Phalcon - An MVC framework written in C as a PHP extension http://phalconphp.com/
For the love of everything that is holy, don't use MongoDB. I'd go with couchDB or Redis
‚ÄúWeb scale‚Äù
Codeception is great for full stack testing: integration and acceptance tests in particular. The variety of matchers they offer via modules is incredible. In that regard, codeception is amazing. But since it's built on and wraps phpunit, I always felt that the style of writing tests didn't offer the same flexibility I've found in BDD test frameworks in other languages. For example, let's say half of the specs in the test suite for a class require some setup and teardown, which might conflict with the other half. Simply using the classes' setUp and tearDown methods will run them before all specs, which isn't what we want. You could group the specs into 2 test with dataProviders if the logic was simple, but if things were more complicated? As far as I know, with phpunit, codeception and phpspec, you'd likely be looking at creating a separate TestCase for each of those scenarios. So, depending on how much you care for the "syntax" of pho, the style of grouping specs into nested suites is likely one of its strong points. And much less important, I like that pho has a basic --watch option for running tests, listening for changes and rerunning as necessary. Avoids the need of other packages like guard. (Edit: that said, it still needs to be improved by using inotify if available)
You can have multiple projects open in PhpStorm now. One per window.
&gt; There's a lot of bad rep for both Netbeans and Eclipse out there, mostly due to the fact that in the past, they were both rather slow, depending on your setup. they still are on i7 3rd Gen and 16Gb of Ram &gt; Setting the compiler individually per project is a hassle you don't have to, you can set the default. Thats only for the language detection. But phpstorm detects your installed php version if you don't set anything &gt; Not being allowed to have more than 1 project open at a time is also not very fun. you can open as much as you want, since V1 &gt; And the fact that PhpStorm refuses to start debugging a Symfony site if you don't have PHPUnit installed and properly set up for your project not true at all, you only need to setup xdebug or zend debug (or how the other module is called) becuase you need that for debugging, nothing more needed &gt; How this setup is accomplished is something you then have to figure out yourself and google is not at all helpful. All things that happened to me. Sorry for the rant there. the documentation is well written 
I've built several apps in Symfony and worked with it at multiple organizations. I love it, but you're on crack if you think it's not opinionated.
check MVC PAttern first too, Pro PHP MVC is a nice book tho
&gt; opinionated this statement is more opinionated then the framework, laravel isn't opinionated at all. Its more loose than Symphony 
&gt;they still are on i7 3rd Gen and 16Gb of Ram I work on a laptop with an i5 from 2010 and 4GB of ram. Netbeans runs very smooth for me. &gt;you don't have to, you can set the default. Thats only for the language detection. But phpstorm detects your installed php version if you don't set anything That doesn't do me any good if the project won't run. I tried it just now with a simple one-page PHP script. Make a new project with existing resources. The debug option was disabled. Couldn't even just start it. Button was grayed out. Sure, PhpStorm might know the version you're running... but how does that help me? &gt;you can open as much as you want, since V1 Well I've never been able to figure that one out then. &gt;not true at all, you only need to setup xdebug or zend debug (or how the other module is called) becuase you need that for debugging, nothing more needed And I'm telling you: PhpStorm refuses to start the debugging session, giving an error related to PHPUnit. No special configs or anything else set up. &gt;the documentation is well written That's a **very** ambiguous statement.
I can't tell whether you've found the issue or not... but I'll play captain-obvious anyway. **m**.d.Y h:**m**:s one of these `m`s is not like the other.
&gt; I work on a laptop with an i5 from 2010 and 4GB of ram. Netbeans runs very smooth for me. tested it like 10 mins before, not smooth at all. &gt; That doesn't do me any good if the project won't run. I tried it just now with a simple one-page PHP script. Make a new project with existing resources. Debug option disabled. Sure, PhpStorm might know the version you're running... but how does that help me? phpstorm is not a server lol... PHPStorm has nothing to do if your script runs or not. It helps you with right autocompletion or syntaxhighlighting, traits, [] etc are only avaible at 5.4 but not 5.3 or before. &gt; Well I've never been able to figure that one out then. open project &gt; choose project &gt; open in new window... &gt; And I'm telling you: PhpStorm refuses to start the debugging session, giving an error related to PHPUnit. No special configs or anything else set up. I don't have phpunit installed but xdebug and can debug a symphony project &gt; That's a very ambiguous statement. everything is covered with screenshots in the documentation
Didn't know about the Postgres json functions and data type. I'll have to check it out. I'm a little bit addicted to phpMyAdmin... any recommendations for a visual interface for Postgres?
Yeah - its lightweight.... another option is CodeSleeve - https://github.com/CodeSleeve/asset-pipeline
Some people use it for unit tests too.
**I** don't know what the other m should be but **I** def**i**n**i**tely agree there **i**s someth**i**ng wrong w**i**th hav**i**ng m tw**i**ce.
BIG data
If you want to bring your PHP to the next level, I recommend befriending yourself with a popular and modern Framework of your choice (Symfony, Laravel, Zend, Slim, one of those) and re-build your web app from scratch.
PhpPgAdmin - http://phppgadmin.sourceforge.net/doku.php
you see laravel code once a week, you see aura posts twice a day... (once happened that 5 posts in 1h came up)
he isn't well recognised, his spam yes. he has bad reputation in the php community for his spam/ignorance/bad behavior against his readers and the god fathers of php the same reputation I have for being an asshole because I say what I think.
... and this is related to PHP, how?
Looks very nice and the implementation seems quite clean, but I'm not sure of the use case. I'd imagine FSMs are usually used with low level languages (reminds me of my VHDL days - ugh!), so are there practical, real-world uses case in a PHP application?
I was going to say SQLite. Since it's a flat file, it works really nice if you're working on a project where you're going to need to be able to box up both the code and the database for the client or for building an web-app that needs to say run off a CD.
Reddit was rewritten for instance, seems to have worked out well.
&gt;Should I look into adding Javascript into the PHP (...) Let me know how that works out.
As long as it's unique and on-topic content, I don't see an issue. If you don't want to see it, vote it down. As for your laravel count, I see 5 posts on Laravel, and only 2 on Aura in r/php's new tab.
Why did you make your console option parser instead of using [one that's already well-maintained and documented](https://github.com/symfony/Console)? It has [a dialog prompt](http://symfony.com/doc/current/components/console/helpers/dialoghelper.html), a [progress bar thinger](http://symfony.com/doc/current/components/console/helpers/progresshelper.html), and [even tables](http://symfony.com/doc/current/components/console/helpers/tablehelper.html).
there are 3 laravel posts on the front page where 1 of that is a question. The problem is with the aura posts that the come on the same time, laravel posts are spread over days, and made by different users (because most of the time those are blogs).
Frameworks are, by their very nature, opinionated. And that's fine. They should have opinions, and believe strongly in them. Being opinionated doesn't mean you cant' swap out components, or that you can change things up. Good frameworks are opinionated. Saying Laravel isn't opinionated is a strike against it.
I see 6 on the front page (because I see 100), 3 of which came in in the last day according to reddit. &gt; and made by different users (because most of the time those are blogs). So? It's a Laravel topic, something I couldn't care less about. I don't care who posts it. Hell, I much prefer the author posts it! At least I know then that they can answer here. &gt; The problem is with the aura posts that the come on the same time This one was submitted 23 hours ago. Prior to this post, the last one was submitted 7 days ago. And even if they were posted at the same time, if they are unique, quality content, what's the problem? Maybe the issue is that *you* just don't want to read it. If only Reddit allowed people to vote on these things in a democratic way so as not to impose the will of just one person on everyone. Oh, wait, you know that, because you downvoted me because I hurt your feelings because I called you out on your lies.
&gt; This one was submitted 23 hours ago. Prior to this post, the last one was submitted 7 days ago. And even if they were posted at the same time, if they are unique, quality content, what's the problem? he could make a mega post, there were times he spammed 4 articles on the same time here on reddit. &gt; Maybe the issue is that you just don't want to read it. If only Reddit allowed people to vote on these things in a democratic way so as not to impose the will of just one person on everyone. I don't read things I don't want to read, I don't make a huge thing about it. &gt; Oh, wait, you know that, because you downvoted me because I hurt your feelings because I called you out on your lies. I didn't downvote you lol... I did now, because of your last sentence
The first acceptance vote was [pulled](http://www.reddit.com/r/PHP/comments/1nks5e/ps4_voting_has_been_pulled_voting_is_closed_and/) because of confusion with the specific wording, but the idea was liked by a significant majority. After a few revisions, it was decided that the document should be started over with a fresh PSR-0-like base, with elements from the existing PSR-4 documents sprinkled in for extra goodness. Now we have a super-doc which is simple as hell, but very clear and has great support. If we can pass this vote it'll be an accepted (live) PHP-FIG standard, which will be nice.
There are several routes you could take: * **CMS** - build a basic content management system for your app if you haven't already, this'll give you a great opportunity to delve a bit deeper into server side validation, input sanitation and expose a few quirks about how PHP &amp; MySQL handle the same data differently. * **ORMs and DBALs** - Object relational mappers and database abstraction layers are fancy names for handling data persistence in databases. They'll save you from enormous suffering and wasted time if you put some effort into learning them. [Propel](http://propelorm.org/) and [Doctrine](http://www.doctrine-project.org/) are usually considered the top contenders * **Responsive design with CSS3** - you mention it in your OP, so this will be a likely direction for you. Have a look at cross-browser compatibility in CSS, media queries and even CSS3 transformations/animations. You might also do well to study grid based layouts and some mature CSS frameworks like [YUI 3](http://yuilibrary.com/) or [Blueprint](http://www.blueprintcss.org/). * **Semantic markup &amp; templating** - I assume from your post that you haven't been working with PHP and webdev in general, so you should take a look at some templating engines and semantic HTML markup in general. It helps with SEO and is generally a good practice to try and reflect the content of your pages with semantic markup. * **Javascript (frameworks)** - need I say more? Obvious candidates are [jQuery](http://jquery.com/) and [jQuery UI](http://jqueryui.com/). If you want to seriously get into front end Javascript, try [angular](http://angularjs.org/) or [ember](http://emberjs.com/); but before you do, I advise you to: * **Build a RESTful API for your app** - this will make you think about your application in a more abstract way and force you to take a look at routing, server side redirection and HTTP in general. A [good framework](http://laravel.com/) will be your best friend here.
The Console component is nice, though I found it to be a bit verbose. An alternative I could have used is [php-cli-tools](https://github.com/jlogsdon/php-cli-tools). In the end, it was only a few classes (that, admittedly, should be cleaned up). Plus, it may have looked silly for a small test framework like this to have dependencies that need to be tested with other frameworks.
While I typically use MySQL when setting up a new PHP project, I've worked on PHP projects that use Oracle, SQL Server, Postgres, and Sybase databases. One of the larger systems I worked on was a payment processing platform that was available in different flavors, such as *NIX/Oracle, Windows/MSSQL, *NIX/Sybase, etc.. and the web-based admin was the same PHP code for each. Knowing the differences between each DB made developing a lot easier since you knew what you could use between them and what you would have to fork off for each version.
phpspec is great! Not sure how you'd want to compare the two. phpspec is certainly more mature, and of a higher quality. I think in the long run, pho would aspire to become more like phpspec, with a different take on organizing the specs, rather than something like behat/mink or codeception.
&gt; I don't make a huge thing about it And yet you are pissing up in here whining about these posts? &gt; I didn't downvote you lol... I did now, because of your last sentence People down voting me for stating demonstrated facts is fine. Still better than making shit up.
We should totally go to /r/psychonaut and tell them that PostgreSQL is acid compliant. It will turn into the most used database in a matter of days
Who downvoted me for that? 
Not really. It's a brave new world in PHP, and relying on other projects isn't out of the norm. I used to have my own console class, but ditched it in favor of php cli. I still have a console class that wraps php cli to give me project-specific console functionality.
haha, it's a shame I hadn't seen this beforehand. I like your idea of using events in the runner, which probably makes for a more flexible design. And I like that you came up with the same idea by exposing "$this-&gt;propertyName" within the scope of suites and specs. I had been going back and forth between that style and using an explicit getter and setter as currently seen in pho. I wasn't sure how much magic is too much, though after seeing your examples, I'm leaning towards the simplicity.
Thanks for the efforts in pushing this forward, /u/philsturgeon. It's been a long journey. 
Reddit is a fickle hive mind.
You're right, and my comment on verbosity is unwarranted given that writing the classes necessary to achieve the behaviour was clearly much longer. I did fight with the idea of bringing in a handful of dependencies to speed up dev, but I suppose I saw it as a bit of a learning exercise to build everything from the ground up. I wouldn't take this route with other projects though.
Very well said
https://www.youtube.com/watch?v=b2F-DItXtZs. Watch it in its entirety But in all honesty CouchDB and Redis are fine. With MongoDB you have no reliability that a successful write was indeed successful
Tell me about it. Nearly there!
Oh my god thanks for this. My biggest gripe of PSR-0.
As a completely different point (in addition to the month error above, plus a hint to avoid problems like that in the future), you don't have to call date with time(), plus you can use combined formatting if you're just doing a quick check. Use date('c') or date('r') for something like this. They give you ISO or RFC formatted dates, automatically.
Always use joins. 
hm... I didnt make shit up, you did. &gt; And yet you are pissing up in here whining about these posts? I didnt start the conversation, theres a difference between I dont give a fuck as long as someone isnt telling bullshit or someone started the conversation. Its the same as the questions: how you doing?
Will it be a MUST to use at least two namespaces e.g. \Vendor\Package\ClassName when using PSR-4 then? That's what's mentioned in the Meta document. Unless that was only proposed, but rejected.
Also, SQLite would be a great choice for embedded devices. 
&gt; I didnt make shit up, you did Oh? &gt;&gt; you see laravel code once a week, you see aura posts twice a day &gt;&gt; laravel posts are spread over days And then... &gt;&gt; The problem is with the aura posts that the come on the same time, &gt; This one was submitted 23 hours ago. Prior to this post, the last one was submitted 7 days ago. A 6 day difference is not the same time. Laravel code only once a week, or over days? But when I actually count, it's 6. &gt; I didnt start the conversation, theres a difference between I dont give a fuck as long as someone isnt telling bullshit or someone started the conversation. Its the same as the questions: how you doing? What did you just say? I'm gonna assume English isn't your native tongue, and suggest you chill out, because I don't think you want to be saying what you are actually typing. Seriously, chill out. Your whining like a kid because people are posting on topic posts in PHP.
WTF are you babbling on about? https://groups.google.com/forum/#!topic/php-fig/L8oCDQCzDcs
42
Looks good. If I had voting rights, I would absolutely vote to accept it. 
Redmine is OK-ish. One thing I like about it, is that it's not butt-ugly, and non-technical clients can work with it. 
Exactly. Model observers are extremely useful in many cases and well worth reading up on and playing with.
In addition to focusing on learning how to write better php you should also spend some time learning the tools used to evaluate your web applications. Many people new to web development just focus on what the browser is rendering and use that as the sole means of evaluating their work. If you are not already using and familiar with firebug or the firefox/chrome dev consoles you should start there. The web developer bar and the wave toolbar are some other good tools. CSS Lint, JS Lint and the HTML validators also provide helpful feedback when learning web development. An ability to evaluate your own work with a finely honed critical eye is a key aspect of a good developer, until you can both spot and explain the difference between the good and the bad, chances are you are producing more of the bad than the good. I have worked with "web developers" that did not have a solid understanding of html, css, javascript, cross browser compatibility/open web standards and it amazes me how blind they are to how bad their front end code is.
I'd say is the _best_ solution is to use Gearman but it's not the easiest. Trying to do things in the background with exec would work but it's difficult to manage those background processes and know when each one is done. pcntl_fork I have no opinion on really. I think you should just use curl_multi_getcontent(). To get around the memory limit maybe chunk the urls you want to get content for. By that I mean get something like 5 urls at one time. Once that's done just iterate to the next 5 urls until you're done.
The first thing I'd ask is how you are limited by the current framework? You mentioned that you already have time restrictions and existing expectations of your team by executives. Re-writing may not be the best appoach, however if there are very specific things that Kohana cannot do for you, perhaps you could achieve them using something like a message queue and offloading specific things to a new application without rewriting the entire thing. Very few times are you going to get to rewrite from scratch because of your personal preference (or your team's preference), it's a very hard sell to non-programmers like managers. I remember the topic the other day about professional/beginner programmers and a great comment was about flexibility and working with what you've got, this may apply here.
Start with a new branch and track all the sub-tasks required for migrating. You'll probably want to do every feature step-by-step. In the meantime, make sure that every new feature gets correctly implemented on both branches. Alternatively, but you have to be very careful with this approach, it is very likely you can 'proxy' (local, in PHP, not HTTP) all unknown requests straight to the code-base of the old framework. That way can you can build all new stuff on the new framework, and you can migrate things as you go. The biggest risk is that you now have a framework in a framework, and if you're not diligent enough this situation never changes.
Two things we did. One: We started taking over "routes" from the old framework and ported them to the new framework by removing them from the apache conf file and allowed our "new" framework to take over responsibility for it. (previous code was spaghetti which relied on apache conf files to route them correctly, if your coming from a decent MVC then you'll have to figure out how to make that happen) Two: We built out a service layer that is specific to our business. The service layer holds our domain objects and logic. We slowly refactored code from the "old" framework to these new objects whenever we took over a route. Hopefully our pure domain logic will never again be held hostage by another framework. So one "page" at a time we would slowly refactor. We had to somewhat maintain two code bases. Touching the old code base only when required, with any "new" dev only under the new branch. Our options were limited so a full one time rewrite didn't make sense, so while this probably isn't the best of ideas, it worked. Three years later, we are still moving stuff over. Some things we just hadn't needed to touch in a long time.
Much easier to understand, still don't love the whole idea, but the document is better.
English is not my native tongue, might be the problem, but let me ask some questions. This seems to be an updated PSR-0, correct? Will the PSR-0 still be required? Are they (PSR-0 &amp; PSR-4) able to co-exist? What is the community's problem with PSR-0? If anyone could answer, I'd be very happy! 
I started PHP working on the Xaraya CMS, and used ADOdb, a PHP 4 library for abstracting databases and handling bind variables, well over ten years ago. One of my tasks was to test out different database types, so yes, I can understand that. 
That is a really good approach and I think it could work well with the way our current code functions. Thanks for the advice!
Come to think to it now, it does't. Wrong subreddit.
Yeah sounds good. I found this: https://github.com/bizonix/MultiCurl
What are your concerns?
It could definitely be considered PSR-0 v2, but calling it PSR-0v2 would confuse people even more. Is PSR-0 suddenly unsupported? Do I have to upgrade? Am I bad for still using PSR-0? Who knows! PSR-4 is a different autoloader and one day we might add a note to PSR-0 saying "this is no longer a valid spec, use PSR-4" but that would be year(s) in the future. Basically, we don't change specs, but new ones can be created.
Read the meta document and my comment above for answers to that question :)
Meh, well I don't agree entirely but it's an incredibly minor point. It just makes sense to me that the autoloading comes first, then comes the style guides then some interfaces and whatnots. Like I said, doesn't matter. Thank you for your hard work, you guys are the best thing to happen to PHP since namespaces.
They were the order in which we happened to define stuff, there is no semantic meaning to the order of things. PSR-4 is Autloading (again) PSR-5 is Cache interface PSR-6 is DocBlocks PSR-7 might never happen PSR-8 could be a replacement Style Guide for PSR-2 etc. 
That is why I'm staying away from Laravel. Static methods everywhere. 
If you go for a glue-less framework you may be able to integrate your existing codebase a lot quicker and have an easier transition.
Yes! Underscores in class names are not directory separators!
I'm also a PHP dev in London. Just got a new permanent job, but am thinking of switching to contract in about a year. I was wondering how possible you think it is to earn 60K a year by working for around 35 weeks a year as a PHP contractor in London (assuming competence at a senior dev level)?
How about this trick? Jasmine + PHPUnit http://codeception.com/10-04-2013/specification-phpunit.html I think PHPUnit with BDD style definitions is the most powerful combination. But pho looks pretty nice. Just it needs the full features implemented: JUnit reports, custom assertions, code coverage, mocks, etc
State machines aren't something I've come across in PHP much, your site would pretty greatly benefit from some "what is it and why should I care" section.
This is the kind of thing that belongs on phpthewrongway.com
Mine too! https://github.com/chuyskywalker/rolling-curl
I have no idea why the downvote brigade annihilated you. Symfony2 is a great framework, but it's not fast -- generally speaking, it's one of the worst performers for [basic tasks](http://www.techempower.com/benchmarks/#section=data-r7&amp;hw=i7&amp;test=json&amp;l=sg).
It's all in the [meta document](https://github.com/php-fig/fig-standards/blob/master/proposed/psr-4-autoloader/psr-4-autoloader-meta.md). Essentially, before namespaces were a thing we had to pretend they were, using _ to mean /. Now a namespace separator means a a directory separator instead of both. Allowing both meant [weird shit](https://github.com/philsturgeon/psr0-naming-oddity) could happen, but was unavoidable for PSR-0 if it wanted to work with &lt; 5.3. PSR-4 will of course be 5.3+ only.
Well, it really depends on the existing code, we are kind of in the same bucket, but we want to move away from cakePHP... The real question is how tightly coupled is your code to the framework ?, If you implemented proper patterns like SRP, repositories, service providers, etc, the move should be quite simple, you just have to port the framework specific stuff, other wise it is not a pretty sight. In my case the initial dev team kinda did not give a rats ass on patterns, the only sensible thing implemented are repositories, but they are so tightly coupled to the framework that they also need a massive rework. We want to switch from cake because it is darn slow, and also it has a lot of mysterious issues like sometimes losing some of the post variables... Anyway, the good part in a port is that you can make a a lot of improvements on your business logic and rewrite some of those festering todo's üòä. Anyway, good luck, and maybe let us know what the framework of choice is for the port.
Here's the revised post: https://medium.com/on-coding/26cdc75e4810
i think laravel is the current cock of the walk
Trolling? Those ain't your granddads statics.
&gt; Most routing systems combine the ‚Äúrouting‚Äù task with the ‚Äúdispatch‚Äù task. [..] Aura.Router v2, because of its truly independent nature, only does routing. Isn't that just decoupling stuff for the sake of decoupling? I'm trying hard to think of a situation where I would want this. To me it just seems like using this would require people to write extra code to tie these things together again. 
Ouch...
Anything that changes state would be a use case, I don't think I've ever built something that couldn't have used an FSM somewhere.
Drupal is not that hard. You guys probably don't have anyone who knows how to do things right. You need to hire someone with Drupal as their core competency. Else, move to something else. Saying that it is Drupal's fault won't take you anywhere. Drupal is awesome and can help you get a lot of customization if you do it right. TLDR: Find a Drupal pro if you have a lot already done, otherwise move to something you guys know better.
What's wrong with Kohana?
Once you go beyond CMS functionality, Wordpress has very little to offer. A webapp on Wordpress means writing the majority of it with no support from the framework. No ORM, no controllers, no templating, etc, just a bunch of code centered around a single object (the post). I don't think that would help in this situation at all.
What I would recommend is breaking the tasks up into smaller pieces and start adding them into the new framework. How, you might ask? Pretty simple in concept: Add the new framework to your application as vendor code. Split the application routing to either load the new route(feature) or the deprecated ones. The app will still use the same DB and even the same frontend assets so no porting all the time. We are a SCRUM team so we split our work up into 7-14 day sprints where every dev gets to port the old feature into the new framework and it's been working successfully for us. Our old framework is EZComponents and the new one is laravel 4.x (4.1 when it releases) No down time with little to no bugs due to the fact that we are not allowed to commit new code without the unit tests for it.
I will tell you what we did. Old website developped using Drupal 6 but twisted to the point where the basic documentation of Drupal was rendered false (like the basic authentication mechanism had been changed instead of creating modules). So devs stalled and a lot of very bad choices had been made performance wise (try creating millions of articles to store some objects). 3 month to convince management that the shit they poured hundreds of thousand of euros in needed a full rewrite. 4 months to do the rewrite using Symfony 2. And a 15s to load page (yup, the freakin' homepage took more than 10s to load when not in cache), became a less than half second one. After that, when new functionnalities needed to be added, it was like a breeze.
Absolutely the right choice and probably absolutely impossible to convince whoever is in charge that this change needs to happen.
I chuckle every time someone suggests WordPress. Tribes have built amazing structures out of dung and straw. Doesn't mean I want to.
DB2 is a very well database system. It has a free license for medium systems. http://www-01.ibm.com/software/data/db2/express-c/
This was my first question. Severely limited? How is that even possible? There's a SINGLE class that takes your request that you can override! No matter what framework you use, it's ALWAYS going to be that way.
Drupal dev here. I can't answer your question without specifics. What kind of app are you developing? E.g. if it's an accounting package, then Drupal is suitable as a basis, but if it's an online graphics editor then Drupal isn't. Database structure: * It would seem convoluted if you don't need the functionality it provides. It's worth knowing that if you add extra db functionality - e.g. extra tables or another database, you don't have to use the Drupal structure, and it can still interoperate. E.g. if you don't need Views it can just be a module with its own db structure, and if it does need Views, you can provide Views integration functions. * It would seem convoluted if you don't understand it and can't predict it - e.g. if you add a new field and can't predict what it will be named. Read some books and the discussion thread that lead to this design. Continuous integration: * Lots of people use CI with Drupal. If you are having problems, it suggests you have something wrong in your workflow. * If the database structure is changing, you should be using Features or one of the similar modules, and/or making use of hook_update_N and the module schema hooks so that the db changes are captured in code. Regarding estimation - there are two things here that can make a massive difference: * If you don't know/understand your tool then you have to learn each time you do anything, and it's hard to estimate how long it will take to learn an indeterminate amount. Plus you will make beginner mistakes and later have the impact of those. * If you don't understand the interdependencies then you can radically underestimate the number of changes you have to make when you change some functionality. This is especially true if you haven't centralised that functionality. It could be that you are seeing the lag between architecture and functionality. Often in large systems you have to do a lot of architecture work before seeing the first useful output (interdependencies at work again). Then suddenly, everything comes together and there's a huge jump in functionality in a short time. Sometimes while working on that architecure, you still have to show progress which is visible to the client. During this time, those changes can be difficult. Suggestions: - It's too late to send yourselves to DrupalCon, but there's a DrupalCamp somewhere near you soon. Send everyone. - You should have more than the Pro Drupal 7 Developer book on hand. 
Unless you already have Drunpal / Framework 'x' devs in your organisation, drop the framesworks and just code in pure php + jquery. Much less learning other people's coding style ('framework'). 
&gt; "How would you word recommending a change when they'll be naturally opposed to starting over?" This is probably the most important point, and it's one nobody has covered yet.
Why are these the best choices? How much time and money would it cost to implement? Would the devs have to learn a new language? What would be the costs? The benefits? Assume that I, like a typical stuffed-shirt supervisor, have zero experience with this sort of thing, and little interest in learning complicated new concepts. In short, sell me on it.
What's with the downvotes? You post about "a high performance php framework," well, I'm posting about the fastest one out there. Prove me wrong.
Well, "I want to use an FSM somewhere" is not a use case because that's basically inventing a reason to use something without actually needing it.
Then you are a masochist.
Whilst everyone is keen to press their favourite solution, if you are five months down the line and there are "increasingly urgent client deliverables" then starting again is an unlikely commercial avenue to appeal to either your management and customer. Drupal is very hard to pick up and run with. If you didn't have any experts when you started, you need to get some in. I know they are difficult to find and recruit as permanent staff but you will be able to source some consultancy from a dedicated Drupal company. It will be expensive, but not as expensive as throwing away 5 team months worth of work. They will be able to work out why you're having trouble - for example you say &gt; The Drupal database is so messy and convoluted that it makes it hard to work with but are you sure you should be querying the database directly, or is there a better API that will perform the database access for you? In most cases there are. &gt; to use Continuous Integration methodologies Plenty of large scale Drupal projects use continuous integration methodologies. We do. &gt; The platform/framework itself throws off our agile development approach as we just can't time estimate tickets anymore. Again, plenty of Drupal shops are using Agile development very successfully. If you increase your expertise it will improve your ability to estimate tickets. If you can't source any consultancy then the wider community can be very helpful, in IRC and in local meet-ups if you have one near you. I wouldn't have my career if it wasn't for those forms of support. I don't particularly want to get in to a framework flame war - I'm just trying to help you with a potential pragmatic way forward. Most importantly of all - good luck!
This is a very difficult sell after 5 months of work.
Because [Taylor said so](https://twitter.com/taylorotwell/status/390920323232567296), almost none, no, none and INFINITE. Bam. Nailed it.
WordPress has it's place. It's great for small brochure sites with quick turnaround. We all know the codebase is terrible
He won't which is why so many websites are shitty CMS spaghetti code that takes so long to load. When they hate this site enough, they will have it rebuilt and they will (hopefully) have it done by someone that knows what they are doing and sometimes that means using the CMS, other times it means not brutalizing it. I can't tell you how many clients bullied my small webdev shop into making a monster only to have the site rebuilt in something else or by someone else a year or two down the road... without all of the features that I argued against in the first place.
OP was about extending a CMS. I don't doubt WP can be used for a simple blog. But extending it? 
No, but "I have something here that changes state" is. 
[Why You Should Never Use MongoDB](http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/)
[Why You Should Never Use MongoDB](http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/)
I knew there was a drama going on around PHP but didn't know it exists this much. Not logical or rational discussion, just simple... dissing? :D
Good lord stop using phpMyAdmin right now. If you're on Mac check out [Sequel Pro](http://www.sequelpro.com/). [Induction](http://inductionapp.com/) looks like a good bet for a Postgres alternative to this. [Base](http://menial.co.uk/base/) is a great (paid) SQLite alternative. When I used to develop on Windows I used [SQLyog](https://code.google.com/p/sqlyog/).
We had the same experience at my former company. Our internal client wanted to migrate away from the in-house CMS based partially off of Zend to a dedicated CMS (under threat of being canned, so nice of them). While Wordpress would have been the easiest for them to use, it was severely lacking in what was needed for the business side. We went with Drupal 7 and had the same experience. Estimates went from pinpoint accuracy to "probably a 2, but possibly an epic. I dunno". Depressing for me until my boss noted that the work I was accomplishing was 3-4x faster regardless of shitty estimating. Once the other devs and I got familiar with it, things went better. My current project is integrating a never-before-integrated backend into Drupal Commerce, with lots of funky business rules along the way. It's about to launch after just over a month of dev/testing. I can't get into specifics, but it would have taken a normal framework at least twice the time to get this project going. The learning curve is steep, but evens out afterwards. Also, Drupalcons are great for learning and a hell of a lot of fun. I've never had any issues with CI and Drupal. Can you explain your difficulties a bit more?
Appropriate username.
Why the hell are you using MySQL in Windows? Windows is perfect for ASP and MSSQL. For open web technologies, it's a third class citizen behind Linux and Mac. It's no wonder you prefer MSSQL when you're working on a platform dominated by that stack.
I'm curious, why are you not deleting the whole row completely when emails are removed and inserting new rows for new emails? This seems inefficient and a pain to maintain in the long run.
BDD is more invaluable the further along in the project you go. You'd be surprised how many regression issues you catch as long as you have the test coverage.
Laravel is all php and the packages I've listed perform various functions which assist in developing a web application in short order. * Jeffery Way's generator allows for creation of scaffolds for models, controllers, forms, views, migrations, seeds, pivots, and test directly from your cli. * Laravel IDE Helper does exactly what is says, generates a file to assist your IDE in accurate auto completion of the L4 framework. * Ardent adds self-validating smart models for the L4 ORM; validation rules directly inside your model, automatically hash passwords, and ingest validated inputs all by simply adding a few properties to your model. * Presenter (Presenter Design Pattern, nuff said) * Administrator builds an administrative back-end directly from your models and uses ardent (aware) validation rules, with some minor configuration you'll have a working back-end in short order. * Former assist in the creation of form markup for various front-end frameworks such as Bootstrap and Foundation. * Intervention assist in image manipulation and image caching. * Using IoC containers you can easily create database agnostic controllers using the Repository Factory Pattern, completely separating your database queries from it's controller, and that's just the tip of the iceberg. * Front-end frameworks...do I really have to explain? Also, I'd typically recommend building an API first before implementing the view, but time is of the essence in his case. IMHO Laravel is well documented, easy to pick up, even if you've never touched a framework. And with the packages I've listed its probably the fastest way to single-handedly build a fully functioning, feature filled web application in less than weeks time (two, if it's your first go around). TBH I'd have to write a pretty sizable book to go over the speed, efficiency, and many benefits that the L4 and it's community written packages have to offer. *# git commit -m 'reworded IoC bullet point'* *# git commit -m 'more derpage clean up, need sleep'*
I agree -- it's bad to get locked into a framework since the flavor of the month changes weekly it seems. I would rather see a developer grasp the basics instead of trying to learn all the nuances of a framework.
Inheritance is the point of OOP and comes handy in large applications. Not every project requires OOP, but to flippantly dismiss it is myopic.
For someone starting out, it's a good learning exercise. But no one here is suggesting that you use it in production.
Considering sessions are usually saved in a file, check if they're saved in tmpfs rather than on disk. Is this your own server, or shared webhosting?
I did, when I started using PHP (Wordpress V1) never touched since
that was Q1 2004/2005 I think
I've touched it, washed my hands and never came close to it again.
Very very little. Not because I think it's bad, just simply because I don't want to do that sort of programming. &lt;opinion&gt;With drupal and WP it feels as though it's a house already built that you have to rip out walls to modify. I just want the bricks. That's why I'm ok with frameworks and not drupal/wp.&lt;/opinion&gt;
Not saying it's inconsequential, but does it matter that much? From what I know, 100ms is going to be generally imperceptible to humans. And as /u/3onyc alludes to, sessions will by default interact with the file system; when a session is started, a file is created, and after each request the session data is serialized and written to that file. When a request comes in, PHP takes the incoming session ID and looks for a file with that name, and if it finds one it has to read the file and then unserialize the data. Also, file-based sessions can generate deadlocks if you use asynchronous processes, e.g. if you have a request that is already in progress and then another comes in from that same user -- the 2nd one will have to wait until the first one removes the lock on the file before it'll be able to read the file itself. You can get around this with non-locking session mediums (like a DB), but then you introduce the fun world of race conditions.
Is the search function broken for anyone else? I can reach doc-pages by using php.net/[function], but the search appears to be broken.
&gt; they're using Drupal 7 as the framework I think this is your main problem; Drupal is a CMS, not a framework. The difference being that a CMS is meant to be an out-of-the-box solution, where you may just need to tweak some things (turn on/off specific modules, setup a theme, input some copy text, etc.) to get it where you want it to be. It's not meant to be the starting point for a large application (unless that application is mainly a CMS at heart). OTOH, a framework is exactly that -- meant to be a starting point for building your own application. A framework typically _won't_ offer much, if anything, out-of-the-box other than a lot of building blocks which you can use to build your app. &gt; Is it really a smart idea to use a CMS with some extended functionality to develop a truly custom web app? No, it's a terrible, horrible, very bad idea. I think whoever thought it was a good idea doesn't know what they're doing. CMS's have always tried to make it easy to develop additional modules and themes, but that's usually the end of the development effort to facilitate any customization, and their code was never meant to be extended and enhanced, whereas frameworks were written from day 1 to do so. So, it sounds like you needed a framework, but instead opted for a CMS. There is no way to correct this other than to move to a real framework, unless you want to forever be paying the technical overhead of forcing it to be something that it was never intended to be. &gt; What would YOU do? It sounds like you're probably in a very hairy situation. Someone higher up than you decided this was a good idea and ran with it, and since you're still trying to force it even given the recognized problems, the powers that be are likely willfully ignorant and/or too egocentric to admit their mistake. Bringing it up will only anger this person, who is likely either your boss or your bosses boss, and given their past decisions, likely not open to debate about the issue. You can try to prove your point but you may face blowback from it as well. I'd split your offtime between rewriting in a framework and updating your resume both.
Have you disabled "Google AJAX Search API" with something like Ghostery?
Works perfectly fine, what I dislike however, is that you seem to be unable to enter the exact function name, and then get redirect to that page. (meaning you'll have to click the first result before going to the function)
¬£300+vat per day, you really should set aside 40% for tax/VAT etc (but you'll not have to spend all that and you can dip into what's left AFTER you pay our tax bill :p ) So that's ¬£1800 a week, minus ¬£720. Leaves you ¬£1080 a week. So to take home ¬£60, you'll need to work just under 60 weeks a year... :p so that's a no.. But working 35 weeks (1080 * 35) gives you: ¬£37800 of cleared funds. (Plus a yearly bonus of the remainder of your tax fund) I'm FAR from an expert.. but will happily put you in touch with my accountant who has been with me for 7 odd years and its amazing.. personal and has saved me ¬£1000's..! All the above, gets even nicer when you're earning ¬£350 / ¬£400 etc... :) PM me if you want my accountants details..
It's a VPS with SSD. Disk speed is quite impressive, so this should not be a problem. In php.ini I have: session.save_handler = files Do you suggest trying to change that? Any suggestion?
Pretty bad on mobile. 
I do have Ghostery; that's probably it. Pretty shitty that they switched to that API then.
You are right for one change. If I do several changes and each of them adds 10ms or 100ms, I'll soon have a very slow site. Also I believe it matters for google, if my site is 30ms faster then my competitors site, my search result may be above my competitors.. 
Games? Workflows (user registration, shopping carts, etc.)? Sure, you can do it without the lib, but the purpose isn't simply to allow you to do something, it's to provide a clean, concise, and consistent method of doing so. You could hard-code that stuff into your app, but how can you guarantee that you don't have an edge-case in your logic whereby a user can bypass a required section of the workflow? With a FSM you can easily have a separate component that is much more conducive to testing.
It's a bit more than that. * The toggle menu button sometimes doesn't work at all. * search bar is missing margins * Content is missing margins (sits right at the edge of the screen) * Content peaks over the edge, creating a horizontal scroll etc. The site's clearly not ready for prime time.
So brave.
Well since we're already at rock bottom, I can't get downvoted much further...
I use it at work sometimes, there is quite a high demand for Wordpress on freelance sites so I'm surprised you didn't touch on it in 6 years. It does get frustrating at times because of its limitations.
As someone that thought frameworks like Laravel couldn't help me much up until a few months ago, I'll offer some feedback. When I decided to learn Laravel I had plenty of PHP experience, but almost none of that was using a framework. Within a couple of hours I was able to write database-driven apps with Laravel. Using a framework has made me so much more efficient and allows me to churn out the tools I need very quickly and (perhaps more importantly) I have fun doing it. The end result is always faster, cleaner, and more maintainable than anything I had previously written, and anyone with some PHP experience should be able to jump in and maintain / update it with ease. Is Laravel the right framework? I don't know, depends on your needs and style. A framework is definitely a way to go though.
Of course this is on the weekend that I'm going to Ottawa! I would love to learn Symfony though :)
Why would you go there on mobile? Do you write many php programs on your phone?
Sorry for so much of the flak you are getting here; alternatives are nice and healthy. I think it is a nice project and I'm always miffed at how PHPSpec wants me to mock everything and it really hurts the typehints throughout my code. I would rather have just the describe/should/in/etc syntax than stubbing everything. I also like the dspec link posted by another user. 
Drupal is not hard, true, but only if by "customization" you mean adding a few blocks and maybe a nice little banner. Other than that, I don't know how much functionality you've ever added to Drupal, but it's not exactly the best written CMS to work with and build on. You look like you're still a student, so I'll just assume you lack the experience in corporate and enterprise level web development to understand how painfully wrong you are :P
Anymore I dictate all of my code to SIRI.
This is a great question.
The sad part is this theme has been in beta for many months now. I have been using it since June. Those are some really basic issues that require less than a couple hours to fix, plus a bit more for testing and deployment. There is no excuse.
No, I didn't downvote. I don't see any reason for that. So, since session_start() is called on every request (I have to do so, right?) the session file will be touched with every request the user does, thus slowing down every request. Or did I understand something wrong?
I meant 60k gross, rather than net. What I'm essentially asking is do you think around 35 weeks work at ¬£350 / day (or more) is feasible in terms of there being enough work around. In terms of tax I'd go through on of those umbrella company things. I'd want to go via a recruitment agency too, because they'll pay you weekly, instead of worrying about getting cash out of the company. 
Wordpress would certainly be a better CMS than Drupal. We run an enterprise level system of 5,000 websites on a single WP installation. Most people here put down WP simply because they lack the experience, but if you know how to properly plan a project, you can certainly extend WP way beyond drupal without even modifying the core. 
No, you don't _have_ to call `session_start()` on every request -- only the requests which need to access the session data. If you have a user session with logged-in states, then yeah, you'll need it for every request that would require knowing about this (for instance, to get the user's ID to show them their specific data), but for anonymous requests -- say, to view an 'about' page which may not require any user-specific data -- then you shouldn't need it there.
It's accurate, at least.
*Challenge accepted.*
The search has been using that API ever since bing started charging for search results a couple or so years ago.
You could try a memory based handler, memcached, or apc/apcu depending on your php version? There are many other options for session handlers.
Sounds like you'll be fine. Just make sure you pick an umbrella... Get one with good reviews. I've had mates get large tax bills cause the umbrella took liberties &amp; my friend had to pay the gov for non payment of taxes...
They aren't statics. They are shortcuts to the class members using the __callStatic() magic method. http://laravel.com/docs/facades
Why wouldn't I? There are lots of times when I'm not at the computer and feel the need to look things up for the time I get back. For instance, when I'm in the bathroom, when I'm waiting for the bus, when I'm in the coffee room grabbing a cup, etc. I think you're underestimating mobile. 
Agreed.
I sure hope they fix this asap, I use this a lot.
Plenty of people use zf1, but there's really not that much to discuss if you ask me. I've never used a framework that had a huge community following though, so I not even sure what I'm missing out on in terms of discussion. Any time I've had to google a question regarding zf1 though, I've typically found an answer. 
This might not solve your use-case, but if you know a function name already, you can add it directly to the url and it'll bring up the appropriate man page: http://php.net/strpos
Zend's community stinks, because while the framework is fantastic (IMHO), the people who use it are all completely mute apparently, which paired with rotten docs means pain. The learning curve we had to face just figuring out how to use the \Zend\Db library _properly_ was huge! Shame really, because the more we have used ZF the more we love it. Really great framework, especially if you are willing to learn it well, and are willing to extend it so it meets exactly your needs.
Having taken this same route ourselves, can't upvote you enough
So much pain! I'm going through the tutorial on the site and it's confusing as all hell. Would it be more advantageous (for a newbie like me) to start learning Symfony/Laravel because of the better community? Or stick with Zend?
Well, I think it's kinda ignorant to just outright dismiss Wordpress as a viable option to build solid websites with. ^You ^should ^try ^it ^for ^an ^hour ^or ^two ^and ^_then_ ^dismiss ^it. 
Are you will to record these and share them later :) You know, for us who are not in Montreal
Depends on your goals really. Most likely unless you are building something industrial and massive, something friendlier like Symfony might be right for you. We used to use Symfony and for sure, right out of the gate it was a lot easier to use, but it fell down in the end because it wasn't as phenomenally extensible like Zend is. Zend is really designed in such a way that you can extend anything, in any way in your own namespace and it just works, and works well, no matter what. Unless you are the kind of person though who intendeds to take all the base objects and extend/enhance them, the learning curve and crappy community aren't worth it.
&gt; Would it be more advantageous (for a newbie like me) to start learning Symfony/Laravel That depends on _why_ you chose ZF2 in the first place. IMHO (and slightly biased) opinion Symfony and Laravel would be better suited. Symfony is pretty solid, and feels 'consistent' throughout. Laravel sometimes gets dismissed as being the "hipster framework du jour", but that's just dumb. It's well thought-out, and has good documentation. As an added bonus: Both use composer, which is probably the best thing to happen in PHP for years. 
allright, thanks! In that case, it doesn't really matter! Thanks a lot - problem solved!
Excellent summary! I currently use both Elastica (Full support for manipulating indices and types, good for bulk indexing data) and nervetattoo (Accepts a JSON string, so good for building complex queries using lots of filters). I am surprised by the speed difference with the official client though, if not the memory usage. Guzzle isn't a lightweight library, but I wouldn't have thought it would have so much effect on response time.
Pity the next/previous page links have not reappeared yet.. I might try to hack it in with https://addons.mozilla.org/En-us/firefox/addon/dotjs/ or similar in the meantime.
*Okay Google Now, less-than sign question mark p h p line-break line-break e c h o single-quote Hello World single-quote semi-colon* ^This ^might ^take ^a ^while.
Not a language, but tool(s): master a CSS preprocessor or two. We use less. My god, how much better our life has become since our projects became based on .less.
I have be programing with PHP for just about 10 hears now, and have just picked up python and am loving it. So much better memory management. Very very fast when working with files. MySQL is very easy to use in python also. I think I am going g to get along well with python, using it on the back end and keeping PHP for the front end stuff.
Nothing is wrong with Kohana itself. Our implementation of it though is really bad and the core has been hacked to shit by the old dev team, keeping us stuck on a really old version and is requiring an unnecessary amount of maintenance. Switching frameworks is just one of the solutions we are exploring to address these issues. I was just wondering if anybody had successfully done it and how they went about it, not looking to get into a debate about frameworks or whether or not we should stick to Kohana. 
LESS is definitely great, we use it on my current project and it makes it easy for even our product guys to change the colors/font without bothering us. 
The GitHub repository is at https://github.com/php/web-php ‚Äî we'd love some help in the form of pull requests! Edited to add: those issues are now (hopefully) fixed and filtering out to mirrors. Pull requests or bug reports for other issues would be welcome!
I have created some very large websites, including corporate ones. I have even worked on websites where we connected Drupal via cloud platform to support the surge of traffic during an Award function. Yes, it was a popular celebrity award show website with some not so easy customized blocks. With that out of the way, I never said Drupal is the easiest CMS. I only said it is not that hard. My advise to OP was, if you are already half way through get someone who knows Drupal else go to something else. I am sorry to know about your habit of assuming stuff, but I would like to tell you there are a lot of people like you and they all have a normal life. 
I've just pushed autocomplete support for the search box, which should mostly fix this. It should start appearing on a server near you in the next few hours.
Yup OP has forgotten a key part of projects - fail early. And apparently all the script kiddies here don't appreciate me saying drop the framework either.
If you are coming from PHP, Python is a great choice. You can learn in over a week-end.
I don't see a chapter outline anywhere, or more of a description than "Growing a RESTful API from prototype and through multiple versions without binning the whole thing is hard, but possible".
&gt; -gem system is arguably the best package manager You're correct that it is arguable, because I have nothing but headaches when dealing with gems. What a god awful system.
I screwed up. It's all there now.
Can I ask why you can't use libgit2/php-git? I would personally just set my composer to have a requirement of the extension.
Bootstrap invaded the world xD 
I want to get to a point where everything I write can be setup automatically with composer, bower, and whatever else (with the possible exception of "standard" modules you'd reasonably expect to find on any php installation). But most importantly for now, this is for software that could be deployed on environments where arbitrary binaries or modules can't be installed. AFAIK there is no way to add something like php-git without putting the module on the filesystem and enabling it through the global php.ini.
I think the major issue at stake here is, how much customization is necessary? A custom post type or two, ok, workable. Lots of custom models and a need for moderately complex relationships between them, well that's not going to be much fun to implement without proper routing, controllers, views, templating, ORM, autoloading!!?! How about having to write sql like [this](https://codex.wordpress.org/Making_Advanced_Taxonomy_Queries#Examples) to get a few relationships w/ tags and categories? 5+ joins for a simple query makes me want to strangle someone. 
I'm still not all that convinced by it, it's modern*er*, but not really modern. It's a definite improvement, but not quite far enough really to be called modern I'd say. 
Thanks, it's pretty sweet, however, might be even more sweet if the highlighted suggestion would be the first suggestion instead of the last which is always 'Search php.net for *xxxx*'. Nevertheless, this is already much better.
It's a possibility, but I'd have to implement some mechanism to avoid loading data when I don't need it. This is probably better then what I'm doing now, but I'm not 100% convinced it's the better way.
I've found you can change pretty much anything through hooks without touching the core code at all. Its something I miss in any other PHP app I need to work in. You can pretty much change anything in drupal without touching the core. 
Python is sooo powerful, so easy, and also fits into the internet. C is fun when you mix it with ASM and also pairs nicely with Python.
You can learn the basic stuff in like... an hour... coming from PHP :) It's the libraries and the doing of the stuff that you get to focus on w/ Python :)
Zend Framework (both 1 and 2) contains a lot of very good components which are really useful especially in enterprise-grade environment. The problem is that the developers designed them as part of a framework (Zend Application thingiee) which is really hard to understand and to work with, especially if you are new at this. If you look to use some components, you can find tutorials for each on stackoverflow or on just random google search - but putting it all together might be more painful than you think.
i hear ruby is great at doing things the way Ruby does things. It does things one way, you learn it, and then you're quick. Except, Ruby is slow to run. Twitter started with Ruby, moved to Java, and now I think they're now using Scala which I hear is the next generation of web technology :)
I suppose you could provide your data in the sidebar from a different controller and instead use a HMVC pattern to retrieve that data. &gt;I've read about ViewModels, but I'm not sure they could help me here They wouldn't. ViewModels are used to add another level of abstraction between the controller and the view. This allows you to automatically switch between ways of outputting your data, be it HTML, JSON, XML or whatever. 
It should highlight the first suggestion if you press down. The search php.net for‚Ä¶ link actually can't be selected via up/down due to the way the library we're using works ‚Äî the styling being confusing is my fault!
If you are not afraid of the Microsoft world, I heard C# is a very well designed language. Basically Java but without the bad parts. I'm in a similar position as you. When I have some more free time I'm either going to learn Python or C#. 
Did you just recommended someone to use Laravel in a company?
Parts of the layout are broken in Chrome. Documentation's search box is too far to the right.
I'm definitely interested in a more comprehensive look at API development than what you find in tutorials and such. The chapter list looks good. I'd also be interested in a basic chapter on the front end side of things. As far as a general approach and what kinds of things to take into consideration based on how the API will be consumed. You would know better than me though if the front end part of a system might be relevant to the API development itself.
I'm not familiar with CakePHP so bear with me here, but what about creating a sidebar class that can organize your calls for data? Basically a controller for grabbing this kind of data/html content. Something like: class Sidebar { public static function example_sidebar_data() { $articles = Articles::where(...)-&gt;get(); $other_data = OtherData::where(...)-&gt;get(); return array('articles'=&gt;$articles, 'other_data'=&gt;$other_data); } public static function example_sidebar() { $data = self::example_sidebar_data(); $view = View::make('example_sidebar') -&gt;with('articles', $data['articles) -&gt;with('other_data', $data['other_data']); return $view; } } That way you could call Sidebar::example_sidebar_data() if you just wanted the data, or inject the entire sidebar html with Sidebar::example_sidebar(). You should be able to use those methods in the controller or view depending on how you wanted to structure things.
Drop the framework so you can build one yourself?
Well, usually, to get to know a language better, you need to start to get your hands dirty... At least that's what I do... 
Support for that was removed some time ago while by accident, we've yet to figure out the issue and put it back in. All our time has been took up by CSS and responsive features.
We had this feature for a long time, like a year ago, Levi reported some issues with it recently and took it out. Do some testing if you do add it back in or ask Levi what the problems there. I hope the problems are gone now :)
Can you take a screenshot please and report it on bugs.php.net ?
Kyle, can you make a PR for us so we can review it since toggling user notes is a requested feature that hasn't been worked on yet .
A proven method that works well is the use of View Helpers, these are essentially classes that you register from your controller or module load that you can reference from your templates. &lt;div class="sidebar"&gt; &lt;ul&gt; &lt;?php foreach($view['sidebar']-&gt;getItems() as $item): ?&gt; &lt;li&gt; ..... &lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; &lt;/div&gt;
On bugs.php.net: &gt; Before you report a bug, please make sure you have completed the following steps: &gt; - **Used the form above or...** There's no form above. https://bugs.php.net/bug.php?id=66129 Example images: http://imgur.com/a/uawe2
Sure, to get to know it well you need to use it. Python you can start using in an hour or two. C, on the other hand... or perl...
(former) ASP.Net (C#) developer here. Now I dev in PHP. Taught myself Python. Thought about Python web dev but haven't made that switch. Tried Ruby, disliked all over the place. Summary: The power of C# is very easy to wield. Python is simplicity central.
Cheers mate. That is a good suggestion. I did not know it was open source 
It could be but generally it's either using a little CORS or using PHP to proxy the request through to the frontend. Either way this does not effect the_design_ of an API, but it is relevant to "working with APIs" in general. I'd be interested to hear if other people want this too.
this works for presentation logic, but I still need the controller to set all the data (at least in CakePHP)
Wordpress is almost never the best solution. It is often the easiest solution. Very popular, but you aren't missing anything special.
I use CakePHP exclusively for projects at work. There are a number if ways to handle this. If it's the same sidebar you're constantly loading you can think about grabbing the data in your AppController and setting it to the the view. This way you could render the sidebar in your layout and it will be available in all your views (be careful if this information is expensive to gather, if so, try caching it). If this sidebar is, for example, specific for each controller you could gather and set the data in your beforeFilter() of the controller. This way you only gather and set the data in one place but you will still need to render it in each view. A final solution is to use the extending feature of views (http://book.cakephp.org/2.0/en/views.html). This lets you define a sidebar in your layout and overwrite the contents of it in the views where necessary. I prefer the first option when it's mostly a static sidebar. I guess the last one doesn't apply to your problem since you specified you were duplicating a lot of code. Let me know if this helps!
Levi's issue was pretty much "jQuery UI bad", honestly. I haven't used jQuery UI for the reimplementation, and it seems solid enough.
Would be nice if it would select the first suggestion in the first place, but guess that'll have to do then. Also, [lel](https://easycaptu.re/YzufF.png).
It looks nice :-)
I love Python too, I use it as much as I can for automating processes, especially with [Fabric](http://docs.fabfile.org). I've been using it for about 3 years &amp; I've found it be extremely useful, and pleasant to work with &amp; learn about. I hope to actually do more Python work eventually, and less PHP. I'd recommend giving it a go!
I like this a lot, looks like what the HMVC pattern tries to do (from what I've read so far, I may be wrong). Probably wouldn't fit with CakePHP (not that I can't use, it's just not the way the framework is designed). Thanks!
Ha! Thanks for that; I'll throw something in to deal with the overflow.
It's been in beta testing for months, yet you didn't bother to report bugs then and now you complain. You should have filed these bugs months ago. *There is no excuse.*
is it still possible to revert back to the old theme? Edit: It's not that I don't find the theme aesthetically pleasing from a pure design standpoint, it's that I feel that the usability has decreased. PHP.net for most is a reference manual that we can spend a lot of time staring at (in addition to staring at code all day.) This new design is significantly brighter (harder on eyes) with less contrast and increased line spacing between text. It's making my brain work harder to traverse the documentation and identify keywords that draw me to areas that I'd otherwise get to much quicker. IMO, this illustrates a timeless lesson - good design is not just about embracing the latest fad (flat aesthetic), but actually consider your user and their *context*. /r/web_design 
Quite. Many times I've been in work waiting on the coffee machine and have looked up a function to see it's return values on my phone.
The only criticism I have is that it's too bright. I code in a dark theme in my editor so it's a little hard on the eyes to go to a website so bright to look up documentation. If I'm reading a website with a white background I'm essentially staring at a lightbulb, and I really don't like it. I already lost some of my eyesight due to being a stupid kid who would play video games in the dark at night, so I'm understandably overprotective these days.
You say you're a novice, but are the other team members seasoned Drupal developers or not? The Drupal ecosystem is vast and complex, and you really should have some experienced people on the team. Drupal uses a quite unique procedural approach to PHP development (at least it does up to now, the next version is going to be completely rewritten using standard OO patterns), but if you know the API and modules you can whip up any custom functionality very quickly. The way the database is structured is quite easy to be honest if you know your way around. It is quite heavily normalized, but that is because Drupal does not make any assumptions on what you plan to do with the data, and tries to be as flexible as possible. We are using agile and CI all the time and it works very well for us. Our estimations are not worse than those of the Java guys working next door. We use all the usual best practices, full unit test coverage, Selenium testing across all major browser platforms, ... And yes of course Drupal is a good fit for custom functionality. That is one of its biggest strenghts and the reason why it is used often for very large government and corporate projects. It has long outgrown its humble CMS beginnings. On the other hand Drupal is not the ideal tool for every project. It is very large and quite slow. If you would for example need to write a data store backend for a mobile app, or a single page website, or something other simple and lightweight then don't use Drupal.
Have you enabled the OpCache (5.5) or the APC (5.5-) module? You'll find serious magnitudes of improvements with those. Also check your web server's KeepAlive settings.
Well, I can tell the same story the other way around. Many times I have been handed an old, gnarly, twisted website that was built in Zend or another framework and was left in the care of support desk "developers" for several years, adding workaround on workaround. Then rebuild the whole thing in Drupal with a handful of people, and deliver a vastly improved and blazingly fast version in a few weeks time. The problems that these projects have are never with the underlying technology, but rather with limited budgets, continuous changes of scope by the client, and the urge to deliver "business value" over long term solutions. In the end it does not matter which technology you use, as long as you get your architecture right, and have the guts to rewrite whole parts when requirements change, rather than try to patch it up and leave the cleaning up for "later".
I don't know why it was done in psr0, but I am glad it is gone. We have always used classes like "\blend\app\model\News_Comment" and it always bugged me that prs0 wanted the underscore to be a directory separator even though the actual file was sitting in BASE/blend/app/model/news_comment.php
&gt; We've had to develop an extensive internal library that sits on top of zf2 in order to make it work like a cohesive framework on par with symfony or laravel I'd be interested to know a bit more about this. Is your library open source, or can you provide a bit more info on what it does?
WordPress has some decent DB functions built-in, and there's no reason you couldn't use an external ORM. and it doesn't have controllers because it's not an MVC framework. you have to start thinking about your logic in terms of actions and filters, not controllers.
It's one tool for your toolbox. Use it when it is appropriate, and understand that if you have a hammer, not everything is a nail. 
We have built some websites using it. It's not tooooo bad for putting together a basic site. The admin UI is quite attractive and easy to use which is a compelling feature for many clients. I can't say we've ever looked at using it as a platform or foundation to build a complex, custom web application however though.
Thanks! I don't love having to use AppController or beforeFilter for this, but seems to be the best options for CakePHP.
I did not notice them mate. Not until Nicoon pointed it out. I never browse the site on mobile. 
I think exec() the git commands is your only other option. I did something like that for a project recently.
i will try to help you to post interesting articles about zf2, there are some really good blogs out there :)
For your second argument, you should use an email table and a project table. Combine those withe a many_many relation table. I would really recommend you to not continue with the current setup.
This might be true but you will need an large amount of in-depth knowledge about Drupal to be able to do this. the OP does not. My personal experience with Drupal is that it's a "content framework" not an "application framework". Drupal can be great for building "websites" that require content management. To build an application, where the web tier usually is only a layer of the entire app, I would strongly advice to use something more suitable such as Zend Framework 2 or Symfony 2. 
The folks on #drupal-ci on Freenode can help with Continuous Integration and Drupal
I'm planning on Python myself. Much as Ruby on Rails sounds good (It's so elegant. Have you guys heard about how elegant it is? Really elegant!) but I think there's too much domain crossover with PHP without really adding a whole lot to the pot. Python, on the other hand, has a broad range of potential uses distinct from PHP's business.
I like it, clean and modern. There will always be naysayers with any change, it will blow over in a week. Well done.
Python, Ruby seems to be losing it's share of the market and Python is growing growing growing. edit: Not saying ruby is bad, before someone hits me with a hammer or something.
Zend Framework 2 is much more a set of components than an actual framework. The only real framework part of ZF2 is the MVC module. This means that ZF2 is much more flexible but it also means it is more difficult to use for new comers. If you want to be guided through the means of a framework then Symfony 2 is much more suitable however, in my opinion, ZF2 is way more powerful (when used right).
As someone who hasn't really used either framework, but has been reading up on Symfony a lot lately.. This seems hard to believe? From what I've read it seems like Symfony is EXTREMELY extensible. In what cases does Zend excel? 
Wait, they just updated? Did they do a slow rollout? I mean, they updated for me at work weeks ago?
&gt; Accessing variables of other types (not including arrays or objects implementing the appropriate interfaces) using [] or {} silently returns NULL. http://php.net/manual/en/language.types.string.php
It is not a fault of a standard for not complying with everybody's code structure out of the box. :)
Wow, I wasn't aware. That page is a behemoth. Thanks!
I went from C, to ADA, to Perl, to PHP. Been doing PHP for over 10 years now. For the past few years I've been doing a lot more Java and it's actually helped my PHP. 
Probably the fact that you can organize your specs into nested suites with their own hooks (setups and teardowns). That offers a bit more flexibility. For example, https://travis-ci.org/danielstjules/pho/jobs/14292662#L221 With a lot of other frameworks, that output would be linear, divided only by the individual files/classes.
I use Mac OS X and it's good. If you want Linux I'd recommend checking out [System76](https://www.system76.com/) which comes with Ubuntu pre-installed. But you can install Ubuntu on any machine so really any laptop will do.
16 GB for vim? Even VS only needs 6.
One of the only times I will still upvote "so brave".
I have an i5, 8gb, and just a 500gb hd. I do all my programming on it and it works just fine. I use Sublime and Chrome for most of my development, and rarely hit 5gb of ram (maybe with office apps, and firefox and gimp open all at once). My work area is two 28" monitors, with a keyboard, mouse, etc. I just dock my laptop and use it as a 3rd monitor. I am upgrading to 4th gen i7, 8gb ram, 500 gb ssd in the next few months, but honestly it won't be noticeably different when it comes to programming, just faster at loading the apps and booting, with better battery life. 
In my opinion, bootstrap is being used brilliantly here- it's changed enough that you don't notice the bootstrap unless you really look for it or inspect the elements. I think the biggest problem with bootstrap is people sticking with the default CSS and templates, which makes their pages look like lazy cookie cutter designs. But at least they are pretty.
PHP type juggling makes a ton of sense if you understand a very little bit about the VM and don't have a ton of baggage from other languages (which all do it differently: PHP is an odd duck in a line of geese). It can really trip up people experienced in other languages, but it also makes for some nice PHP conventions that work well with the hairy, unprocessed and unreliable data that a website gets. In short: it works well, but it also works differently than you might expect.
It is possible he plans to also run VMs for development sandboxes on the machine as well in which case more RAM = better so you aren't worrying about the VMs eating it all up.
Yea, its great for web data, and that's actually exactly how I found it. I was processing a collection of models using `map` and `reduce`, and I realized that I was attempting to add values based on an array key of a variable that might be null, and I wondered how I hadn't seen it. No errors or anything. Like my link says, I've been programming with PHP for almost 8 years now, and there are still things that catch me off guard, although they're usually strange cases like this where I'd normally check if the value existed first.
See. *This* is a prime candidate for /r/lolphp.
&gt;I already lost some of my eyesight due to being a stupid kid who would play video games in the dark at night This is a myth. There is no long term damage, only short term strain and exacerbation of existing conditions.
You've passed you insert query to a string, but you haven't executed it. You need to run mysqli_query, the same way as you did with your select statement. Also, escape your inputs by using mysqli_real_escape_string.
Was about to say this. Having more cores may also help, though I am not sure about this. Also, I would prefer something that generate less heat. I use one with AMD and it gets really hot making it nearly impossible to place it on your lap. But you should not work with a laptop on your lap anyway( easier said than done). Also try to get one with a non-glossy type display.
So they just wipe your account every so often? It's like an automatically-recycling throwaway...
I'm an unlucky wordpress plugin developer.
Yea... my boss jeeps trying to tell me that.
&gt; Posting code without formatting &gt; Not mentioning the actual problem &gt; Not attempting to Google the issue and fix it yourself Seriously? At least put some effort into it before asking random strangers to do your homework for you.
I have a mac with the same spec's you've listed. It's not the specs that make it good, its the quality of the unit as a whole. If i couldn't stretch to the mac, i'd settle for a decent laptop running centos.
Most have worked with it, but it's not something anyone enjoys working with. I really believe that as programmers, both freelance and professional, we'd much rather simply work from scratch than having to figure out the intentions of other programmers for a project. At least that's my opinion. 
Don't go for same type + paradigm combination (dynamic + OOP), go for something different to broaden your general understanding of programming.
omg i said as joke D: Bootstrap OP
Pretty &amp; easy to use ;)
I'm pretty surprised too :P, it's certainly harder to find jobs when you strike WP off the list. 
This may not be the answer you're looking for, but if you want to be able to control git through a web browser, the node.js ungit project may interest you: https://github.com/FredrikNoren/ungit
I looked at them for programming on the move a couple of years ago and decided that the steel frame or whatever they use while making them solid also made them too heavy for me.
Scala
Sequel Pro looks promising. I'll have to check that one out. It looks like it will at least save me from having to open ssh tunnels from the command line to get to remote servers. I don't know if I'm using strange ports or what but I swear my tunnel gets dropped every 5 min or so, drives me insane!
You might be interested in Sony Vaio Pro 13, has everything you need and it has a great keyboard! [Sony Vaio Pro 13](http://store.sony.com/vaio-pro-13-ultrabooks/cat-27-catid-All-13-Ultrabook-Pro)
It's a great resource if you take it with a grain of salt.
&gt; new to subreddit &gt; read the title.... &gt; obviously i have... 
&gt; As an added bonus: Both use composer, which is probably the best thing to happen in PHP for years. This is not really a bonus anymore, almost every mainstream php framework out there uses composer nowadays.
I haven't. But I have helped some colleagues in figuring out some stuff regarding their work which involved wordpress. 
If you clarify what you mean by 'manipulate Git repos', then you may get better responses.
You'd rather start from scratch? Your clients must have big budgets!
It's probably got something to do with the fact that on most of the freelance websites, the majority of projects are fairly small &amp; the majority of the clients have low budgets. With the massive amount of plug-ins &amp; themes available, Wordpress is often a good fit for this type of work. From the perspective of a developer it's often not the best choice, but for the client it can be a different story imo.
i used both macbook pros and cheap comodity dell notebooks with some extra ram, both run fine, for bigger projects with huge database i mostly test remote though (i.e. i dont run a local database) except SVN integration which always sucked on mac in comparision to windows, and the lack of something like 'total commander' i would always prefer os x over windows, windows has killed my productivity very often with 'stuff' (not working updates, crashes, whatever) 
Might be covered in "Creating "Finder" classes for thin controllers AND thin models"; but it would be helpful to know not only how to build the API but how to build an internal API consumer for multi-interface applications. The kind that provide an API and an interface, where the interface controllers/models make calls to the API...
It could be session locking. If you have multiple assets being loaded and they're all on the same domain, some of those might be hitting PHP and possibly a session_start() ?
Yeah PDO should always be used, was just trying to show him what to do in the current example. Somehow missed this was a Login/Password submission...password should indeed NEVER be stored in cleartext, should be encrypted and preferably salted. 
Whatever reason you think you have for writing your own system ignore it, use a framework.
Are you saying that you are developing locally, but your database is located in a remote location that requires internet to be accessed? If you perform at least 5 queries per request, it will be slow due to the overhead of internet communication being able to exchange messages between your script and the remote mysql server, not because of anyone's computer. I strongly suggest not developing using a remote mysql server, unless it's accessible by LAN.
Looks more like you are looking for a gaming laptop than a programming laptop xD If so, probably any specs you would be willing to choose as suitable for your laptop will be suitable for games, and any machine suitable for games is even more suitable for programming :D What you should really be concentrating on is making sure the keyboard and touchpad are comfortable enough to use, as the specs will probably be good anyway, but if you get one with a keyboard you don't like, you will be stuck with that keyboard.
Laravel or Symfony are my personal recommendations but there are plenty available.
Any HTTP Client?
You can install all the software with: sudo apt-get install apache2 libapache2-mod-php5 php5-mysql mysql-server You might also need to sudo a2enmod php5
Slow performance is what i would expect from MySQL running under windows. Especially with large datasets that are read from you harddisk. Maybe you better install all that stuff into a VM (Virtualbox is fine).
That's kind of a different topic. However, [Guzzle](http://docs.guzzlephp.org/en/latest/) is not a bad starting point for consuming APIs within PHP. If you want to do it in-process, it's more a case of correctly separating concerns, providing API endpoints doesn't make a huge lot of difference there.
Thank you for the correction. :)
No the database is also located on the same system I am running XAMPP on. if i go to localhost and access the database it runs like I am accessing a remote site on dial-up. it actually runs faster when I access it on Godaddy
"Slow performance is what i would expect from MySQL running under windows." Please go home.
Yii is powerful, simple, and has amazing documentation and an awesome start-up guide. 
+1 for Laravel.
If he is new with PHP it will be tough to dive into a framework as all of them expect some sort of previous experience.
one last question, where do I put my scripts? when I enter "localhost" in firefox I get the message that the server is running, can you tell me how I can run the server manually if need be and where I have to store my scripts? 
I've always installed lampp from [here](http://www.apachefriends.org/en/xampp.html), since it comes with most of the stuff I need. How better would you say installing everything separately is, compared to lampp?
&gt; Share some experience? That's how I stared. I reinvented the wheel so many times a became an expert about wheels. Here's what I did and what you can do: 1. Write your own CMS/forum/framework. 2. Progressively get better. 3. Realize your CMS/forum/framework is now a pile of poorly architectured crappy code. 4. Learn to use Symfony/Lithium/Slim and rebuild your CMS/forum. 5. Progressively get better. 6. Congratulations, you now are a PHP master. 7. Now that you know everything and that you're fed up with PHP, install and customize a Wordpress because it's good enough for what you want. 
Yeah, I am thinking pretty much the same as you right now. The only reason I have not done that is the security problems. Is there any tutorials that goes through the basic security issues and how to avoid them? I'm thinking about injection etc.
Your document root is at: /var/www Start the server: $ sudo service apache2 start Stop the server: $ sudo service apache2 stop Restart the server: $ sudo service apache2 restart In addition to the advice above, I always prefer installing LAMP stack with tasksel. It installs all additional tid-bits that are nice to have: $ sudo apt-get install tasksel $ tasksel $ Select LAMP server and install
The default place, where that 'it works' message comes from, is /var/www/ (Assuming its the same as Debian) It's configured in /etc/apache2/sites-enabled/000-default You could change the document root there to be somewhere in your home directory, or you could chmod 777 /var/www
I'd say Javascript, full stack. http://mean.io is a good place to start. 
&gt; Is there any tutorials that goes through the basic security issues and how to avoid them? Plenty. The problem being that if you don't know security, you can't really tell if the tutorial is shit or not. Three things to remember: 1. Never trust user input. 2. NEVER trust user input. 3. I like making lists. To avoid SQL injection: use PDO prepared statements; to avoid XSS: escape everything you output to the user unless it is from a source specifically designed to return HTML code. For the rest, [OWASP](https://www.owasp.org/) is a good resource I think. 
Whatever problems he face is better than to write shitty and unsecure code.
If everyone knew how to make [and consume] Good API's; who would need to read your book? :) Edit: well I guess it doesn't really matter how they are consumed. Just an idea. 
Do you use that on your production servers too? How do you get security updates? I tend to use the method that's closest to what I do in production, and in most cases that means using my distribution's packages.
A couple words of caution. I'm about 90% sure that the binaries for php5 for debian systems is still 5.3 -- if you require a more updated version of php follow these steps: `For PHP 5.5` sudo add-apt-repository ppa:ondrej/php5 sudo apt-get update sudo apt-get upgrade `For PHP 5.4` sudo add-apt-repository ppa:ondrej/php5-oldstable sudo apt-get update sudo apt-get upgrade The above assumes that you already have a version of PHP already installed, if not replace sudo apt-get upgrade with sudo apt-get install php5 If for whatever reason you're unable to get `add-apt-repository` to work, simply install sudo apt-get install python-software-properties And you'll be all set. 
I see there are a few rolling-curl projects. This one https://github.com/takinbo/rolling-curl has a class called RollingCurlGroup. Yours doesn't have that. I'm confused what they use it for. Can you explain why yours might be better than MultiCurl or this other rolling-curl? The MultiCurl one also limits the number of open requests to whatever you specify so as to avoid the DOS issue. Do you see any issues with their implementation vs yours? I like your implementation.
trust me, use wordpress - you will still learn a lot if you use the custom post feature and the hooks/plugin system, - this is stuf you can handle your own - otherwise i would advise searching for a team first, a CMS no matter how small can really cost a lot more time than you might think now.
Just tried accessing the database in phpmyadmin and it is lightning fast. I will have to do more learning and persevering and see if i can move forward with it. thanks for the advice
I've been using Thinkpads for ages ... Currently on a W530 running a variety of OSs. - I7, 16gb, 1920x1080, raid, mobile broadband ... Perfect for work. 
__JavaScript.__ Hands down. A ton of new languages that are coming out are based on concepts that come directly from both PHP and JavaScript. If you learn the root language, it's easier for you to pick up anything that they spawn down the road. If you already know JavaScript don't stop with it until you're a master -- and if you are a master, look into [Go](http://golang.org/). It's attracting huge attention because it executes so damn fast. 
It was a vis sa vis statement. Meaning I would literally __like__ to start from scratch, not intending that I literally always start from scratch. Besides, my company has a tool belt of proprietary frameworks that we use for projects such as this.
I hear horror stories on /r/LinuxActionShow from system76 users way to often to endorse this post.
thank you so MUCH man, really helped. now I am all set to get back on coding. 
This may not be the case, but I know there are some issues with WAMP and connecting to a local database using 'localhost' (I noticed this when developing with Laravel, might be the same with XAMPP.) Try setting your host to 127.0.0.1 instead of localhost. Again, it's a shot in the dark!
thanks. doing this.
No way I'm using it on production servers! It's just for development.
Our development division runs on Lenovo T4x0 Thinkpads (i7, 16GB, SSD+HDD in Ultrabay). Resolution is 1600x900, but we all have dockingstations with 2 2560x1440-screens anyway. I also think the new [T440p variant](http://shop.lenovo.com/us/en/laptops/thinkpad/t-series/t440p/) features a 1080p screen. 
Just to be clear, I run multiple VMs at the same time. Run zero games, and just want a big screen.. well because. :) 
To be honest, I've tried a variety of things (Lenovo, hp, etc) and the best development laptop for me so far has been a 13" MacBook Air. 
&gt; zftalk I'm going to check this out after work! I've never heard of IRC before so I'm pretty excited :)
its good to have one for testing stuff, while you can do that with virtualization software or bootcamp i still try to have both and to use both to get a better feeling of how my users actually use my products - but thats really the only excuse i have, i prefer macs otherwise
So, if using PHP for both the API and the regular web front end that consumes and displays that API, would you normally recommend building your API and front end on different domains rather than in the same app/framework on the same domain? Perhaps this is on a case-by-case basis. Right now I'm experimenting with structuring a Laravel app using Kirk Bushell's [An Alternative Application Workflow In Laravel 4](http://kirkbushell.me/laravel-4-an-alternative-application-workflow/). In a framework agnostic explanation, basically using packages/modules to separate out the concerns. In my case, I have the following packages setup using the workbench feature of Laravel: data, api, admin, and web to start. The web package controling the front end display and consuming the API using Guzzle.
join #zftalk and #zftalk.dev :) if you don't want to download an IRC client just use https://webchat.freenode.net :)
On a side note, what clients don't support HTML anymore? I often experience issues with html+text emails than just simple html or text emails.
my hosts files has 127.0.0.1 localhost Are these not the same by default?
Yeah, I know. I really hate that term too, to be honest. I kinda felt dirty when using it here.
Any time. Additionally you can use this: `sudo ln -s /var/www /www` to create a system link to your web server directory to an easy to use location. Sometimes it'll be located in `/var/www/html` instead, before you do it ensure you know which one you have. This'll make it so you can eliminate the long directory tree for your web directory as it'll be located in `/www` instead of `/var/www` or `/var/www/html`
Sweet. 
~~Can you check this again about in about an hour (so after about 19:00 UTC), please? There are a couple of commits from Hannes working their way out to the mirrors that should fix this (it's weirdness in how Opera handles BASE tags, basically).~~ Or not. Help wanted!
what is the output of 'grep display_errors /etc/php5/*/php.ini' without quotes ? What kind of share are you talking about, Samba? NFS ? I like to use 'scp' to copy single files and 'rsync' to copy multiple files. rsync -avz -e ssh /home/david/ root@192.168.5.2:/home/david/ this copies all files from local folder /home/david/ to remote server 192.168.5.2 in the folder /home/david/ 
You can always download PHPMyAdmin and use that for your mysql gui. Create a Virtual Host in Apache and you are good to go. The configuration on PHPMyAdmin may be a pain though, so it might just be easier to learn how to do SQL imports from the command line instead. Being on linux means a lot more command line and a lot less GUI in the beginning.
I have a similar setup, but I have experience with Linux too... what I do is setup the VM with Webmin, PHPMyAdmin and Samba (to map to the /var/www shaes). Webmin lets you setup apache virtual hosts pretty easily so you can work on multiple projects from the same server. Learning this stuff takes some time - but once you get it down you will love it, especially once you get some revision control working in the mix too. Also - make sure you have bridged networking setup on the VM so it is on the same subnet as your computer instead of a different subnet - will save you some headaches. 
Sounds great except for one problem: Sequel Pro connects via SSH. That is certainly a really strange issue to be having. Look into the [ServerAliveInterval and ClientAliveInterval](http://unix.stackexchange.com/questions/3026/what-does-the-options-serveraliveinterval-and-clientaliveinterval-in-sshd-co) settings in your server and client SSH configs. If both of these are set to zero then you're not set up to keep the connection alive and it will drop in extended periods of inactivity.
I always thought so, but there is a difference when you switch them: http://forum.wampserver.com/read.php?2,91602,page=3 Also, I meant database host, not *hosts* host :)
Things that are easier than convincing the suits that they should allow you to start over (read: abandon sunk costs) * Chinese Algebra * Quantum Physics * Getting a camel through the eye of a needle * Escaping the "friend zone" * Building an Iron Man suit in a cave with a box of scraps * Uninstalling Norton AV
I know you're trolling, but it's a legitimately useful newsletter that not all 24,748 readers of /r/php are subscribed to and it might help someone.
Having a bad day? No ads, they use Mailchimp which isn't spammer-friendly, and they post only once a week. It could be a lot worse, they could be calling people morons without any evidence.
&gt; I would like to import my database (it is in my shared drive location I put in the VM) [Solution here](http://www.cyberciti.biz/faq/import-mysql-dumpfile-sql-datafile-into-my-database/) &gt; I would like to be able to light up my website I have created (in the shared drive also) "_Light up_"? Care to explain? &gt; I'm just so lost. This is my 1st attempt of doing it on linux, everytime I tried to get a dev enviro setup on windows I just failed out. Get used to some of the basic commands, read a little up on bash, and learn how to use `apt`.
Assuming you're using apache/mysql, I suggest you go take a look at http://puphpet.com, setup a vagrant box using that. It'll give you the following: * Option to install phpmyadmin * Option to populate a database from a sql dump file * Most important, you can map shared directories from your host machine. That way, you can edit files in your IDE.
Great work providing this newsletter. It certainly deserves a wider circulation. 
I was in I.T. for 10 years and went through Dells, Macs, etc, for 100+ employees ... and Thinkpads (owned by IBM at the time) were always the most solid, no frills, 'get the job done' devices. They aren't perfect of course, but support is US based (assuming you're in the US?), and relatively helpful. I'm currently running Ubuntu on an older w500 for some projects -- but I'm mostly on Windows 7 (and OSX via VMWARE) on my newer w530. I'm a full time (self employed) developer and use this almost exclusively. I also have a newew MacBook Pro which is nice, but doesn't 'do enough' for me. *Also do yourself a favor and grab one of [these](http://support.lenovo.com/en_US/product-and-parts/detail.page?&amp;DocID=PD015702) ... does wonders for productivity and really portable. Good luck!
&lt;3 phpweekly. I don't normally look forward to news letters but I do find phpweekly interesting. Keep up the good work dudes.
No worries. Since you have manually installed all packages, there is nothing to install :) I am guessing all the additional packages got pulled as dependencies of PHP / Apache. Some additional piece of info: Add your user to www-data group sudo usermod -a -G www-data *username* Make www-data owner of /var/www sudo chown www-data:www-data /var/www Make sure all new files created in /var/www are owned by www-data by default sudo chmod 2775 /var/www The above steps will ensure that your user (and all that belong to www-data group) can easily edit all info within /var/www without requiring root access all the time. Also apache runs as user www-data so you will avoid many situations where you will need to manually change permission on folders. You're good to go :)
Thanks a lot.
I might dig through pear mail to see what they do, thanks. The issue I'm having is with yahoo mail in particular. The HTML email is getting cut off at the boundry for some reason. When I use swift mailer, it works fine. I would like to know what they are doing to prevent the issue so I know. Thanks
Does anybody know if they accept donations?
Yeah, SSH connection is a must because I only allow connections on my databases from localhost for security purposes. I figure maybe Sequel Pro will re-init the connection when it drops, will have to see though. 
I've worked with it a bit. The pros: I think it's great for small websites that need just basic functionality and an admin interface, and importantly... need it set up quick/cheap. I also think it lets designers do a lot of the setup work and only requires a dev once the site is 80% of the way there, on the smallish projects I've worked on. The cons: Hate, hate, hate the organization. Usually logic has to go into views and that makes me sad and angry at the same time. Object relationships are annoying to set up, and the post-centric code is awful. Everything is a post really? If I want a custom object (not a post/page/article), every single property other than title, date, etc is stored in it's own record in the post_meta table and if you want to query based on those properties, you get to join the post_meta table to itself multiple times. It's just dumb. Bottom line though is that I can come in do 2 days work on a site after a designer has done the nitty-gritty, the customer ends up with some moderate customization, and hopefully I never need to look at it again. Edit: Also, using the global keyword basically ever makes me rage. And... and... ok, I'll stop now. 
cant help you with that, we dont have problems with that - as far as i know - using the exact code i quoted
Very poor article. Doesn't bother explaining much about why nginx would be better than Apache at serving static files. It also ignores the fact that the event MPM for Apache is now stable in version 2.4, which effectively gets rid of many of the differences between Apache and nginx when serving static files.
As others have recommended, Python is likely your best choice. It's easy to learn, has fun-to-use web frameworks like Django and bottle.py, etc. I would not recommend learning node.js. While knowing Javascript is a must for web development, there's no reason to use such a terrible language unless you're obligated to. There are so many other languages that could solve the problems node.js "solves" in a much easier and faster manner.
I've only touched it to create a plugin that replaces a page with some other content, I've no idea how themes works yet, I found it interesting for the job I was tasked with, even down right enjoyable to learn something new (not saying wordpress is good/bad code, just saying I enjoyed performing the task)
And a decent layout.
Oh honey, it's hard. When you go from what you know to something alien. There are going to be those times when that thing you could do in your sleep on Windows will go unsolved till the next day or longer. But, persevere. *nix does more with fewer resources more securely. You will come to love it. I have used webmin as someone else had suggested, it is very good for $0. Excellent even. Or... you can try to add a GUI desktop. Google KDE or Gnome or XFCE. I'll monitor this post. Pick one thing that is wrong that bothers you most. Add a comment describing what you want to happen, the end result, and possibly why you think it isn't happening. I and possibly others will help. --I am only helping because it looks like you have taken initiative and I respect that.
Echo the sentiments of the other comments thusfar. Nothing profound or interesting really. Ironically, one of the slowest loading websites in recent memory. I do appreciate the irony of a security blog post on a WordPress site though =).
Can't say I know enough about either of those two to really compare them, but mine does support a limit to the number of open connections so as to not DOS the snot out of somebody.
&gt;What exactly does this operator do in a general sense It's for accessing static functions and properties, i.e. things bound to the class rather than the specific object. So for instance, a method written like this: public static function doSomething() { ... } ... is bound to the class itself and shared among all the instances and accessible via ::, where-as a method written like this: public function doSomething() { ... } ... is bound to the instance and only accessible from an object reference. 
From old dos days... and a little bit of Linux experience... I will collect the info here that others posted and be back. Ty
Thanks. I think the root of my troubles is my misunderstanding of static methods. This clears some of that up. I will have to do some more reading.
Right here.
This is a garbage article. It looks like a bait to sell a $59 ebook! Ridiculous. tl;dr Use nginx and php-fpm. REVOLUTIONARY! Pffttt....
I had noticed a few errors in the previous update, but most seem to have been fixed! On page 15, in the Routes table, the Route for List Users seems wrong (takes a {id} argument) - not familiar with the Laravel syntax though. If I run into more, I will post!
At first I thought the newsletter has a link to [Wave Framework](https://github.com/kristovaher/Wave-Framework), but apparently another package is named exactly the same. Sadly the authors did not look for a project with that name already existing - and also being a PHP MVC framework. There's no way to contact a user through GitHub?
Yes. My first experience with Python making a script to move music files around... I was testing the commands.. lost many many gigs of my music collection. I know how to access my shared folder, but wasn't aware of command line search, so that I awesome. I am sure I can add the db to mysql with your instructions. Thank you. I'll get back to you on the rest when I get to it. Thanks.
Objective C and making of IOS apps.
Code hard, fail fast, leave a good looking PR?
what exactly is a mess in zf2?
&gt; I look to the Security Context documentation but I do not see a constant defined called AUTHENTICATION_ERROR or LAST_USERNAME. The class SecurityContext implements the interface [SecurityContextInterface](http://api.symfony.com/2.3/Symfony/Component/Security/Core/SecurityContextInterface.html) which in turn defines those constants. So saying SecurityContext::LAST_USERNAME or SecurityContextInterface::LAST_USERNAME is the same thing.
OK great, I will make more of an effort too to post things :)
Thanks, fixed! The tables were screwy and thats fixed, and all other formatting issues should be resolved. Adding a new chapter tonight so let me know how I'm doing.
*its
Hi (author of book here), The downsides in the book (of course!). In summary, they are mainly the same as those of regular web apps, although with a custom browser like Klathmon appears to use some are mitigated. The biggest downside is either having to have a network connection or deploy a LAMP (or similar) stack on each machine. There are a number of graphical toolkits that allow you create native PHP apps though, without HTML, webservers, web browsers etc. The section headings in Chapter 4 will give you a list of those. And of course, for small apps (granted for more technical users) you can do interactive CLI scripts using the readline libraries and so on.
The way we are structuring the application is that we will basically write the application as if it was a web-app, but will run it via PHP-CLI and output the result to a bundled browser with everything removed (it's pretty much the "web-view" part of your browser, no menus/bars) So far the downsides are pretty manageable (and these are just the ones off the top of my head): * Working in the web-app system takes some getting used to (especially for desktop-oriented guys) * The "framework" we've created is kind of large, about 200MB for just the browser and PHP engine (and some other associated stuff) * The "browser" is custom built (using chromium-embedded as the engine) so issues in that are ours to fix * we had to create our own "frankensystem" of manipulating the browser window size and position. (Pass the info to the browser in a cookie that gets read by the browser (in C++) that actually modifies the window shape and size. * There is no way currently for us to create a system tray icon or anything, although we don't need this functionality. Overall it's much more good than bad, and has allowed us to port a significant portion of our application in INSANE time.
Looks interesting. Just bought a copy!
This could actually be a really good book. Considering most of my tools I tend to write in PHP because of the huge library and portability among linux. My last employer actually wrote their entire CLI toolset in PHP as well.
Many thanks, I hope you find it useful. If you have any comments or questions when you read it, don't hesitate to contact me. (author at phpbeyondtheweb.com)
Interesting. I've actually done a couple Windows-based systems (hybrid web-based/Windows) for clients in the past that made use of a native component program with an embedded browser object (IE, though) and it worked out ok. However... &gt;The "browser" is custom built (using chromium-embedded as the engine) so issues in that are ours to fix &gt;we had to create our own "frankensystem" of manipulating the browser window size and position. (Pass the info to the browser in a cookie that gets read by the browser (in C++) that actually modifies the window shape and size Those two points are significant enough to scare me away from doing something like this in a system that's intended to be around indefinitely. The second bullet just sounds kind of hacky, no offense. I guess what matters is that you're happy with it and that it hasn't bitten you in the ass! Thing I like about PHP is just the raw productivity I get from using it. Thanks for the detailed response.
&gt;I can honestly say that PHP is now my language of choice This is the saddest thing I've read all day.
And this comment is the ballsiest thing I've read all day. (Honestly this was my initial thought too.)
One thing that tripped me at first was: "Kapture uses Laravel which has the joys of having Database Seeding baked in." "So what is Kapture? Do I need it? Should I use it?" I did end up figuring out that it's the company you work for ;)
The first part is a bit intimidating, but our actual code is only a few files. The second part, while definitely hackey, is also pretty small, like 10 lines in C++ (which just gets run on each page load), it's really only used to make the initial window size something not-insane. Overall it works and it has the nice feature that everything is separate. If we decide that the "Browser" we created is wrong, we can swap it out for one written using the Qt framework that takes care of all of that for us, or something in JAVA if we want.
We actually solved the "lack of obfuscation" issue by writing our PHP in a PHAR and encrypting that which is decrypted on application startup. It's not NSA level secure, but it's enough to prevent our competitors from stealing it all.
Just bought it. Mainly due to interesting table of contents. I didn't find theAdobe Air, Titanium, etc.. products that great. Wondering if I missed the boat on understanding them well enough.
Hi there. We don't thanks. We are putting a couple of links in at the moment but keeping them subtle. It takes the three of us some time to collate and check everything but we're doing it because we enjoy it. I've personally benefitted for years from PHP and its nice to give back a little. Feel free to submit something that you feel would be good to include. 
Actually I agree :) We are thinking about it, but like most of us we're struggling for time just putting it together. 
Thanks! We do make some mistakes and sometimes the wrong article slips through (we are told by many when this happens!) so its nice to hear that people enjoy it. Feel free to contribute suggestions - Two out of the three of us are really friendly ;)
PHP is fine. It's a grown language that fills a need. A lot of places are going towards it as a primary language because it's easier to fill job roles in and satisfies the requirements.
Are you going to be selling a hardback copy eventually?
Just bought your book, thanks! Looking forward to reading it. Just to clarify, I bought the book because I'm currently learning PHP for web based applications, have been wondering lately about general computing related tasks you might be able to do with it and have written some basic stuff. This book should help in that endeavor. 
According to the source: interface SecurityContextInterface { const ACCESS_DENIED_ERROR = '_security.403_error'; const AUTHENTICATION_ERROR = '_security.last_error'; const LAST_USERNAME = '_security.last_username'; 
It's not as bad as people make it out to be, but there are still some cripplingly irritating things about it. In particular, this includes weak typing and the merging of lists and hash tables into one data structure; we run into a bug related to one of these... once a week, maybe, on a 1.5mil LOC codebase?
The problem seems to be he didn't try any comparable systems; those languages all serve different purposes (they're not scripting languages).
HA. An Intro is definitely on the todo list - thank you.
&gt; but they all have different outlines, objectives, etc Well, yes. Your question is far too vague. You need to provide more details. *What* do you want to learn?
Wouldn't it be simple to just disassemble the binary to get the encryption keys/methods though?
I looked into it. The maintainers (coastal forge) are turning it into a commercial product https://www.tidekit.com/ In doing so they will be leaving tide-kit to rot. Unfortunately they have missed their own deadlines multiple times and are not providing much information why. On top of that they are doing a kind of "raffle" to see who gets into their first round of customers. Regardless of us being a national company looking to use their product, they would give me no assurance that i could get into their "raffle" system. Not only that but they have no financial backing and were unwilling to sign an escrow agreement. (If they go out of business, they won't give us the source code, so we would be belly up unable to change/improve our product)
yes, but it's one line of defense, and really only serves to make it more trouble than it's worth. On top of that we have IP rights to all the code, and a few other tricks, but the encryption just served to be another layer, and to help the "higher-ups" to feel better than having readable source on our clients machines.
Good site to begin learning PHP - http://www.phptherightway.com/
In my opinion php.net is one of the best programming manuals available for any language. It reminds me of the Waite Group's programming bible series from the late 80's, specifically the feature where every function lists/links to other related functions..
I'll second the use of phpmyadmin.
Too expensive, oh well I'm sure it's a good book.
Any downside to using a fork? Apparently you can make it disassociate from the parent: fork forks, setsid tell the current process to become a master one (no parent), execve tell the calling process to be replaced by the called one. so that the parent can quit without affecting the child. &gt; $pid=pcntl_fork(); &gt; if($pid==0) &gt; { &gt; posix_setsid(); &gt; pcntl_exec($cmd,$args,$_ENV); &gt; // child becomes the standalone detached process &gt; } &gt; &gt; // parent's stuff &gt; exit(); what about these (running a script in the background, would PHP still wait on it?): shell_exec('command &gt; /dev/null &amp;'); shell_exec('command | at now'); shell_exec('command | at now &amp; disown');
So you're the jerk who got /php on Leanpub? Looks interesting, might check it out when the wife gives me my next allowance.
First, I don't know the answer to your garbage collection question. Second, I really don't know much about PHP. However, I have a suggestion. Instead of having each part use shell_exec to start off the next script, have a parent script use shell_exec to start each of the parts. I'm sure you can come up with some simple way to know when each of the parts is done before kicking off the next part.
Well the garbage collection question kind of determines if I can use this solution or not. If the parent in your example waits on the scripts it sets off, that's the same as if I made a chain of scripts.
For best results in terms of flexibility and features, i highly recommend that you get a VPS. Digital Ocean, Slicehost, Amazon EC2 are all viable options. Cost of VPS has also lowered alot lately.
Maybe rethink your architecture? We're dealing with that and many other pesky issues with message queues (RabbitMQ). Steep learning curve, but so worth it. Another way is supervisord, all code in a single big chunk with some way to store where it left off (DB or a file); supervisord relentlessly executes the script over and over and it's up to the script to read that DB or file and execute the corresponding code and change the DB state when appropriate and die. A third way is cron, runs all the time (every minute for example), your code checks that it's the only copy running and essentially the same as supervisord, Cron is available in all *NIX flavors, and there's a windows equivalent if that's your thing. Your web app (v√≠a ajax or something) primes the DB and the script will pick it up in the next run. You're right about limits. PHP is meant to die() so design with that in mind.
I'm guessing you are on a windows machine and want to do your actual development/coding there, then use the LAMP VM to run/test it? Sounds like you need to configure some apache named hosts and install phpmyadmin. Part of the problem is going to be that how the apache config files are spliced up (and even where your default web root is) seems to vary from distro to distro. So if you do not know how to configure apache very well then you should locate an apache config guide for ubuntu. Sounds like you already have your folders that are shared between host and guest working, so I wont go into that. First thing you should do is figure out what your development site urls are and go add them to your hosts file (on windows for sure and it wouldn't hurt to add them to linux as well). This will allow you to use name based host resolution in your development environment (ie you can have more than 1 dev site going at a time on the same IP address). For windows you will want to edit the C:\Windows\System32\drivers\etc\hosts file and enter the development url of your project's site, point it at your VM's ip address: #Replace 192.168.0.99 with the IP of your vm, replace example.com/example.net with the website urls for your projects. 192.168.0.99 dev.example.com # development site for www.example.com 192.168.0.99 dev.example.net # development site for www.example.net For Linux edit the /etc/hosts file and enter the development url of your project's site: sudo vim /etc/hosts 192.168.0.99 dev.example.com 192.168.0.99 dev.example.net Next you need to configure apache to listen on your ip address/port AND set up named hosts for your project sites (remember your distro may not use these exact same conf files and they may not be in the same locations either): Edit ports.conf to make sure apache is listening on the port you need: sudo vim /etc/apache2/ports.conf NameVirtualHost 192.168.0.99:80 Edit httpd.conf to configure some options (in this simple case turns directory listing off): sudo vim /etc/apache2/httpd.conf &lt;Directory /&gt; Options -Indexes &lt;/Directory&gt; Set up your websites: sudo vim /etc/apache2/sites-available/example.com &lt;VirtualHost 192.168.0.99:80&gt; ServerAdmin admin@example.com ServerName example.com ServerAlias dev.example.com DocumentRoot /srv/www/example.com/htdocs/ ## this is the path to whatever directory your html files are in CustomLog /srv/www/example.com/logs/access.log combined ## this is the path to wherever you want your log files &lt;/VirtualHost&gt; sudo vim /etc/apache2/sites-available/example.net &lt;VirtualHost 192.168.0.99:80&gt; ServerAdmin admin@example.net ServerName example.net ServerAlias dev.example.net DocumentRoot /srv/www/example.net/htdocs/ ## this is the path to whatever directory your html files are in CustomLog /srv/www/example.net/logs/access.log combined ## this is the path to wherever you want your log files &lt;/VirtualHost&gt; You will want those directory paths for logs and doc root to be pointed at your shared location. Enable the websites: sudo a2ensite example.com sudo a2ensite example.net sudo /etc/init.d/apache2 reload Some tips on using vim: * If vim isn't installed install it sudo apt-get install vim * You need to hit the "i" key to go into insert mode, if you are not in insert mode you can't insert new text. * Hit the "esc" key to get out of insert mode, when out of insert mode you can hit the "u" key to undo changes (like for example that crazy edit you just did because you forgot to enter insert mode and just started typing). * To save a document hit "Esc" (to exit insert mode if you are in it) the type ":wq" * To exit and abandon changes hit "Esc" (to exit insert mode if you are in it) and type :q! * To find text hit "Esc" (to exit insert mode if you are in it) type "/sometext" where sometext is what you are searching for.