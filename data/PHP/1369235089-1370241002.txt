Completely disagree and your logic is flawed. Essentially what you've said is "I've created this tutorial on how to do it but you will need another tutorial to know how to do it". You say bycrypt would be confusing but isn't it more confusing to give examples using sha1 and then say don't use sha1?
I said it deserves a separate tutorial, because it is not as simple as sha1(). To really do justice to it I will have to talk about explaining the hash, generating the hash, verifying the hashed passwords, using salts, explaining the repetitions. Do you really think if I had used bcrypt and not explained all that, people would have understood what was going on?
You explicitly compare with `true` and `false` when this isn't needed. For example, you needlessly check `if (empty(x)===true)` when the shorter `if (empty(x))` means the same thing, and `if (empty(x)===false)` when the shorter `if (!empty(x))` means the same thing (because `empty()` doesn't return anything truthy that isn't precisely `true` or anything falsey that isn't precisely `false`). `Location:` headers require an absolute URI, e.g. `Location: http://www.mywebsite.com/next_page`. The relative URIs like `"register.php?success"` you use break the spec. `INSERT INTO ... SET` is MySQL-specific syntax that won't work on other database systems. If you're going to be using PDO, you may as well make some effort to make your SQL portable. You shouldn't be catching exceptions and printing out the error message to the user using die(). Error messages can leak important internal implementation details that can facilitate an attack. if you're just going to die() in the handler anyway, you shouldn't be catching the exception in the first place. Let it bubble to the top instead so that the script is automatically terminated and the error logged to the error log (on a production system) or printed out (for debugging only, on a development system), depending on the setting of [display_errors](http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors). You don't escape the user's username when you print it out to the page (in the memberlist and after signup), so the user could be embedding any HTML/JS code in there they wanted and have your website display it. You should be passing it through `htmlspecialchars()`. This is a persistent stored XSS attack. Your login system is vulnerable to a [session-fixation attack](http://www.webdigi.co.uk/blog/2009/php-session-fixation-attacks/) where an attacker can trick a user of your site into logging into a session ID that they control (by having the victim follow a crafted link to your website). Afterwards, the attacker will be logged in as the target user.
+1 for that book. It's how I started. I love git for its branching ability. I can work on new ideas while keeping a stable branch which the production site is based off of. 
Agreed! That's actually helpful. It's so easy to say someone's code sucks...but if you actually want to be helpful, recommend something better. That way we can all get better! I'll start. Anthony Ferrara created the helpful [password_compat](https://github.com/ircmaxell/password_compat) library that is [forward compatibile](http://www.php.net/manual/en/ref.password.php) with PHP 5.5+. Check that out for better password hashing.
sunnywill, I am not really sure why people are lampooning you for writing a tutorial. I went through looking for errors like a lot of other peoplpe on this page and all in all your code is (mostly)secure as far as I can tell. Reporting a different error on registration for usernames that exist- This is standard practice, how else will the person know what to fix? You don't do it on a login attempt, which would be a security vulnerability. If anybody can point me to a registration page that doesn't give a "that user name is taken", I would be very surprised. SQL Injection - You use PDO for every call to the database. As far as I have read, this will prevent sql injection. http://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection Email Verification - You are a little weak here, but not enough to be considered a security vulnerability. sha1($username+$microtime) is not cryptographically secure, so it is possible to validate your email account without registering a real email or validate another users account. But, no real harm can come of this. Most people would be tempted to use this code to also create password reset tokens, you do not do this (or have any password reset functions), so hijacking an account seems impossible. Password Storage - As other people have pointed out, sha1 is not as secure as most cryptographically secure hashes. The NIST moved away from SHA-1 in 2010, and it is recommended that others do the same. I think you should highlight this in your tutorial and give links to other hashing functions and an article about salting. I agree with you that it might not be in the scope of your tutorial (PHP OOP and PDO), but it should be mentioned. All in all, I think this a good tutorial for OOP and PDO. And to those that say it isn't, I would like to see some proof of concept code or psuedo code that backs your statement up. PS - This is how I create validations codes, when needed. http://stackoverflow.com/questions/1846202/php-how-to-generate-a-random-unique-alphanumeric-string/13733588#13733588
Curious why mention only, when you can fix the tutorial? Its like saying, listen to me, but not completely!
Like this: $arrayMax = function ($max, $value) use (&amp;$arrayMax) { if (is_array($value)) return array_reduce($value, $arrayMax, $max); elseif (is_int($value)) return $max === null ? $value : max($max, $value); else return $max; }; Then you can call array_reduce($theArray, $arrayMax). Your solution works perfectly fine and may be preferred; I didn't realize the recursive part when I mentioned it doesn't handle nesting.
I don't know, there really are so many things that I could have included. Perhaps, I'll create a series, starting from this tutorial and add/fix things and eventually create something bigger.
 else if ($users-&gt;user_exists($username) === false) { $errors[] = 'Sorry that username doesn\'t exists.'; in the login section, it seems you are informing someone that the username they entered doesn't exist. So, say I wanted to know some usernames to try and bruteforce well i can just do a bunch of usernames with crap passwords and see which ones don't return that specific error. so maybe of [bob,matt,joe,steve,john] I will now know [john, bob] are valid usernames. Where if it just returned a generic "The username or password you entered was incorrect" I would have accomplished nothing. Again, it was just a cursory glance so it might not be the case but it seems your returning that error to be displayed to a user attempting to login.
On a registration page with a CAPTCHA stating a username exists is fine, but on a login page returning that a username doesn't exist is bad (if there is nothing slowing down requests such as tracking login attempts and banning, or a CAPTCHA) You can fly through a huge list of possible usernames and narrow them down to ones that exist.
yup, the git scm book. i didn't know about it until i found it randomly :)
I'm torn between saying it is good for understanding the concepts, and that it is bad for not following proper security measures. I can't help but think showing a new programmer the proper techniques is infinitely more helpful than to just say "oh and by the way you shouldn't use SHA1 because SHA1 is not as strong as BCRYPT." Remember, programmers are lazy and they are going to the easy route (EG: copy pasta of this code).
Thank you so much. I really appreciate your comment. For Email Verification I think I'm going to edit the code and use uniqid and use sha1() for only part of the string. And I'll link some tutorial regarding BCRYPT. Thanks again.
If u have error_reporting ON while developing and error_reporting OFF while debugging, you will be fine. For those that want to log errors, they can have it that way by using display_errors settings changed. Similarly, for those that want security against session-fixation attack of XSS or anything else, then they really will have to look for other tutorials. You cannot cover all these things in just one tutorial. Most of the things that people are complaining about deserve separate tutorials, and discussing them in this tutorial will be missing the point.
You really should move the comment up higher, near the usage of sha1. Yes there are a lot of things you could have done, but if you are making a tutorial on an authentication system, you really should exercise extra care with storing passwords. There are a lot of copy-paste coders out there these days.
I created and prefer using [Bullet](http://bulletphp.com/) for building applications with REST APIs. It's a different approach to serving requests at specified URLs than other micro-frameworks, but I really enjoy it because I think the nested nature of routes make a lot of sense, especially in the context of a REST API.
It might be that the remote host is configured to show different error levels, if any. It would be easier to guess what's wrong if you could provide an example error message.
Thanks. Error messages start with undefined (nonexistent) variables. Yes, the same source produces undefined variables locally and runs properly remotely.
That is definitively because you have a lower error reporting level on your local machine, find your php.ini and change your levels to E_ALL ^ E_NOTICE (which is the default that your host probably runs). Don't forget to restart your web server.
Actually it's a good idea to use recent versions on a development machine as it makes you aware of deprecation of features in case you will need to update later on. The absolutely best thing would be to also use a staging server (possibly a virtual machine, as you explained it) to test the code before putting it in production.
I would not recommend this at all! You should always show notices in a dev environment and fix the errors, instead of just hiding them. Seriously... wtf.
* Use bcrypt * Why would you limit the password length? It becomes a hash anyway.. This is bad. If I want my password to be 60 long, it should take it.. 
solid app. I'm also a fan of http://code.google.com/p/gitextensions/ 
There's quite a few things that could be screwy: * v5.2 and v5.3 have significant differences. Always run the same versions in both your dev &amp; deployment environment! * Is you host running PHP on Linux? If so, there are some differences between that and Windows (for instance, what magic constants return). If your host is running Linux, set up a virtualbox with the same environment to server you dev environment from, or use a subdomain or second domain to do dev work on your host and restrict access to it. * Have you checked the output of phpinfo() on both environments and made sure they're the same? This is generally the fastest and easiest way to get you php.ini and plugins the same in both places. * Have you checked that .htaccess files in folders on your host aren't changing php.ini values or other magical fun stuff? Good luck!
This is really cool, I didn't know that Mustache could be used in PHP.
Good tip, I'll do it right now
What will fix the session fixation security hole?
OK, many good hints here... I will need to look into changing the PHP version used by XAMPP (if I cannot get ten Vagrant working). I'm pretty sure it's Linux. I like the virtual box idea, but it it beyond my skill set right now ;p A subdomain might do it too, but I want to be able to do the PHP debugging from Netbeans. The .htaccess file on the host is blank.
Whilst I agree in part, it's not always realistic to use up-to-the-minute versions of software. Whilst its ideal to use current, you're normally best off sticking with the OS supported versions of PHP (so 5.2 in CentOS 5 for example) whilst also having a solid upgrade path planned out with your customers/host/ops team etc Edit: it's also very easy to release buggy code, even with unit/component/system tests , if all of your environments are not aligned.
You should be able to do remote debugging using Netbeans. I know for sure you can do it using PhpStorm from IntelliJ (my favourite editor). I wrote [a tutorial on using remote debugging for PhpStorm](http://www.mysolutions.it/phpstorm-server-xdebug-configuration/) that should give you some good hints on how to get it set up with Netbeans. [VirtualBox](https://www.virtualbox.org/) is free and makes it a snap to set up a Linux virtual machine. If you install CentOS (which is most likely what your server is running), setting up a LAMP is just as easy as XAMPP - there are tons of tutorials on it. If your .htaccess files are blank, then that's one less thing to worry about :) phpinfo() should take you the rest of the way home to getting the environments sync'd, once you get the PHP versions the same.
Exactly ;)
I will create a second part for this, in which I will add bcrypt and other security measures and other features to the system. I will append it's name with 'Part 1' and provide a link for the new 'Part 2'
Could you elaborate on the 'session fixation security hole'?
Of course, you have to decide between stability and features. Either one is not always the best choice.
I have to say your sir sunnywill are a genius ! Thanks to you now I can make a full fledged website. And a website with TUTORIAL that is amazing for the internet. R.E.S.P.E.C.T. Guys check out my website www.beaconwatch.com, I created this with the help of sunnytuts lemme know what do you guys think.
Oh, indeed. That's why the 'upgrade path' bit was in there. Having worked with a dev ops/online ops team to upgrade our PHP version from 5.2.17 to 5.3.3 I see it from both sides; the PHP guys want the shiny new features which make our lives easier, whilst the OPS guys need to provide a stable, always-up, platform for it to run on. As it turns out though; sitting down and talking face-to-face gets the plan drawn up PDQ, then it's just a case of getting the resource approved to implement it...
May be this will help: http://www.youtube.com/playlist?list=PLfdtiltiRHWFpdDFSYb47xBGRZd2ISjNO
Why not use diff?
I stopped reading when he went on to call twig "a real template engine". This simple templating class is almost a carbon copy of the one found [here](http://codeangel.org/articles/simple-php-template-engine.html).
This helps, thanks!
Missing link?
Why not take the Slim object out of the Collect class, into index.php? Create a Router class that simply accepts the Slim object and adds routing to it. Then add a route to the Collect class, and make it a really "slim" controller; it's doing too much right now. Preferably a RESTful controller. Also move the database stuff to a database model/library. Lastly, run the Slim object at the end of index.php.
I have found a lot of different versions of this technique and they're all pretty identical, there's no real alternative way of creating a template system without output buffering if you don't want to deal with complex string operations. This is merely my own interpretation making it shorter and simpler. Also, in what way is Twig not "a real template engine"?
Sometimes console and web server have different .ini settings? Don't they?
why would twig be any more "real" than this? it insinuates that engines which do not follow twig's example are somehow not "real template engines". If we were talking about php, and in some comment I said "of course with a real language like python..." what would you take from that?
Is it with the ftp commands by any chance? I had some problems deploying something for a client on XAMPP where the ftp fetching methods would just hang. There was no cause I could find, but the problem simply didn't happen on a similar version running on a Centos server. Ever since, I've just not had much confidence in XAMPP at all. Go with the Vagrant/Virtualbox approach already mentioned and try to get a Linux (or whatever) VM that is as close to the host as possible (i.e. use the same distro).
You have a valid point and I agree, I'll change my wording.
There have been a number of instances where functions have just *not done* what the documentation says they should do. We just gave up eventually.
Choosy mothers choose diff. Sorry, I could not resist. Mostly because I don't know exactly what to look for. **chrisgedrim** suggested that I use diff on the output.
I have similar things from the last time I upgraded. There was something else that was preventing me from going all the way to the newest; I can't remember what now.
Sidenote: I saw what others had to say about PHPStorm. I was ready to change over to that except for a few points... I shouldn't change horses in mid stream. This project is close to the end, I am the only developer (except for some code that we hired done). I would be investing too much time in changing over. PHPStorm costs too much for me right now. Our budget is so slim that people are ready to cave this project.
No, no FTP commands at all. The PHP is dumping errors for undefined variables.
Vagrant will likely have way too much ramp up time for a single dev on a hurting project compared to just installing virtualbox &amp; some kind of *nix for the interim.
Sure. When you start a session with session_start(), PHP sets a cookie called PHPSESSID with a long random string as the value. This string is used as an unguessable key to identify the visitor, so that when they make their next request and include their PHPSESSID cookie, their $_SESSION data can be restored on the server. In this system, $_SESSION is being used to remember which user is logged in. If the user has cookies disabled, another mechanism is needed to send their PHPSESSID with their request. Normally, you do this by enabling "session.use_trans_sid" (it's off by default). That causes PHP to automatically add PHPSESSID to every url you render on the page, like this: http://www.mydomain.com/members.php?PHPSESSID=9cdfb439c7876e703e307864c9167a15 If you don't have use_trans_sid enabled, you have to manually add the SID to URLs yourself: echo '&lt;a href="/members.php?', htmlspecialchars(SID), '"&gt;View member list&lt;/a&gt;'; But the OP's system doesn't manually render SIDs on URLs, and use_trans_sid is probably turned off, so why am I mentioning any of this? Well it turns out that, until PHP 5.3.0, there is a setting called "session.use_only_cookies" which defaulted to "0" (and many hosting providers will still have this set to zero). This means that, whether we add session IDs to URLs manually or not, PHP is still looking for PHPSESSID in URLs. And there comes the hole. I'm an attacker. I visit the website. I check my cookies and I find my PHPSESSID was set to 82786c47f09f312369fbe492593bc0f4. Now I send an email to my victim: &gt;Hey Bob, does the memberlist look funny to you? It's not showing up for me. &gt; &gt;http://www.mydomain.com/members.php?PHPSESSID=82786c47f09f312369fbe492593bc0f4 &gt; &gt;Thanks, &gt;Dave When the victim clicks on the link, PHP will read the PHPSESSID from the URL and will find that it's a valid, active session. The same session that the attacker is using. Hey, I got a reply back from Bob: &gt;Dave, &gt; &gt;It looks fine for me. I had to log in to view it because the members list is members-only, did you do that? &gt; &gt;Bob The problem is, when Bob logged in and the server stored his user id into his $_SESSION, that's the very same session that the attacker is using. So now the attacker is logged in as Bob. The solution is simple. When Bob logs in, we should create a new session ID for him. That way, the only person who could know his new session ID (which is needed to be logged in as him) would be Bob. That's simply accomplished by calling [session_regenerate_id()](http://docs.php.net/session_regenerate_id) after logging the user in, but before storing their new user ID into their $_SESSION.
I've posted the details above now.
what about error_reporting
Just recently switched to [Vagrant](http://www.vagrantup.com/) myself from the more traditional MAMP style development environment. This is a great recommendation—and I think we need to get the word out about this incredible tool. Having said that, it is a little much for more novice PHP developers, especially those not overly familiar with Linux. But if that's you, install it anyway! It's an amazing way to learn Linux. You can have a "box" (fully functioning Linux operating system) up and running in literally minutes. Mess around, install some stuff, setup your own LAMP environment, and if something goes wrong—just delete it and start over! I recently learned how to setup a PHP queuing service with [Beanstalkd](http://kr.github.io/beanstalkd/) this very way. Because there is no risk (it's just a virtual machine), you can learn much faster than if you're working on a real system.
It's funny, I read a tutorial very similar to this years ago, and have basically used this approach ever since. I'm more of a "use PHP as a template engine" guy than a real template engine user (like Twig or Mustache). This tutorial illustrates a nice way of using PHP as a templating engine.
Usually the answer is yes. SELECT * is a performance killer in any database that supports covering indexes. And even without them, shipping the extra columns over the wire can be costly. But don't take my word for it. Fire up a database profiler and look at the actual query costs. Fix the expensive ones first, then work your way down the list.
&gt; Is it worth spending a day of your time to (maybe) reduce the execution time of a page from 38ms to 37ms? Maybe. You shouldn't just look at single call performance. You also need to consider how much memory that query is consuming in your database's cache and how much bandwidth it suck up on your I/O and network. The database is a shared resource, so you have to treat it with a lot more care than you would other code.
I'm a total n00b and on Windows too, but literally just faced this issue two weeks back. I went the command line route, in fact, I thought this was very helpful for me: http://learnaholic.me/2012/10/12/make-powershell-and-git-suck-less-on-windows/
Yeah, they're quickly becoming more of a json-&gt;template formatting syntax than a specific engine. in nodejs applications I use mongoose (http://mongoosejs.com/) with mongoDB. This allows to build a very fast model, slim controller, and all my view is based on mustache syntax. I would definitely be willing to get on a PHP MVC utilizing a json helper style to use a similar layer. Good stuff all around.
&gt;Figuring out how to use Vagrant definitely takes longer no shit
Thanks.
No offense taken. Hit up the gearman mailing list if you have questions.
Heh, Tim Bray, author of the XML spec does not agree with you. http://www.tbray.org/ongoing/When/200x/2003/03/16/XML-Prog
&gt; Having said that, it is a little much for more novice PHP developers, especially those not overly familiar with Linux. That's why I created [PuPHPet](https://puphpet.com)
For those who are don't like static, check out https://github.com/auraphp/Aura.Filter/
&gt;I am not competent enough to build an application from scratch, especially security wise. Can you give me some pointers or tutorials on how to go about learning enough to build an average PHP app? Merely reading tutorials won't remedy that. Security is no light matter or something that can be added on as an afterthought, and frameworks won't take care of every security concern for you. You need to keep constant focus on security throughout the development process and have it be ingrained into the very fabric of your application. 9 out of 10 websites have *serious* vulnerabilities, and some of that fault I would in part attribute to tutorials. People writing tutorials are often not much more experienced than you are and write them to share what they have just learned, thus propagating what very often are bad coding practices and lousy security. You need to be reading the literature and keep up with any developments in the field. Use tried and tested methods, try and keep in line with the security community consensus, and avoid rolling your own. You need to read, read, read, and then read some more. Security is *hard* and should not be taken lightly. 
If you are validating int, what is the problem using is_numeric ? In aura we use is_numeric to check integer, is_numeric($value) &amp;&amp; $value == (int) $value; See https://github.com/auraphp/Aura.Filter/blob/develop/src/Aura/Filter/Rule/Int.php#L57
.. Well, the title is right. Can't go much simpler than that... Anyone know a good link to get up to date about these generators with less simple examples?
I know, I think I've read books and books of material and am trying to get my hands dirty. So I'm asking for [/r/php](http://reddit.com/r/php)'s opinion because I know a lot of you are pretty knowledgeable and will be able to tell me whether a tutorial or material is worth something or not.
Thanks.
I haven't looked too much into generator, but could someone check the following situations? function a() { yield 0; yield 1; echo "end"; } function b() { while (1) { yield 1; } echo "end"; } // Prints "end" after 2 iterations? // Or never prints it as no more yields exist and therefore the function is stopped? foreach (a() as $foo) {} // Throws error as $key can't be implemented? foreach (a() as $key =&gt; $foo) {} // Never prints "end"? $i = 0; foreach (b() as $foo) { if (++$i == 10) { break; } }
The only thing it's useful for in that comparison is the empty string edge case, and you can actually solve that without it. Ex: (string)$value == (string)(int)$value;
Thank you. Nice to see a different approach. I assume both works perfectly. Can you show me an example where the one above I gave fails.
These are the test case I ran $value = ''; var_dump((string)$value == (string)(int)$value); var_dump(is_numeric($value) &amp;&amp; $value == (int) $value); $value = '1'; var_dump((string)$value == (string)(int)$value); var_dump(is_numeric($value) &amp;&amp; $value == (int) $value); $value = 1; var_dump((string)$value == (string)(int)$value); var_dump(is_numeric($value) &amp;&amp; $value == (int) $value);
Why does the function stop at `yield` in the third example, but doesn't on the first?
Ok, thanks, that's good info from a security standpoint. Any good resources on making a CMS app using latest PHP coding practices? So I am looking for something that goes from start to finish and explains everything in the process.
I can offer you the exact contrary: http://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html (Not an introductory read though, this is about advanced usage of generators.)
&gt; Prints "end" after 2 iterations? Yes, correct. &gt; Throws error as $key can't be implemented? Nope. If you don't specify a key, then you'll get auto-incrementing numeric keys. The same way it works with arrays basically. For more info have a look at this section of the RFC: https://wiki.php.net/rfc/generators#yielding_keys &gt; Never prints "end"? Also correct :) If you wanted to *always* print end, even if the loop is aborted using `break`, then you can use a `finally` block (also new in PHP 5.5): function b() { try { while (1) { yield 1; } } finally { echo "end"; } }
Thanks! Didn't know you could `yield $key =&gt; $value;`. Reading the RFC, your `finally` example and **specially** about the new `send()` method makes my head hurt a little!
Thanks! Now I just need the goldy lock one :P
I use Vagrant (provisioned with Chef) to quickly throw up VMs that are almost identical to the production server the project is going on. It uses synced/mounted directories so any changes on either side are reflected immediately in the other. It's by far the best dev environment I've used - by using a VM you can develop in a mirror of your production environment and vagrant just makes it easier to set them up and share across users/operating systems/computers etc. EDIT: Just a note, whatever IDE/editor you use should be independent of the application environment. It shouldn't matter if you use sublime text, netbeans, eclipse, notepad whatever.
You mean having a blog post that covers the same topic as a previous blog post? I would hate to imagine the community if no one wrote about something that had been previously written on!
We listened to what everyone said when we submitted last week and I'm pleased to say that we have added a screenshot, latest issue, archive and an RSS feed. Hopefully that will help and apologies for being a bit stupid!!
This. I use vagrant with chef to mirror the production data as well. It's by far been the best environment that I've ever used. Concerning IDE's, I started using PhpStorm a few months ago with much success. It's been discussed at length^[[1]](http://www.reddit.com/r/PHP/comments/p76xt/whats_so_good_about_phpstorm/) There was a recent post about a configurator for Vagrant for use with PHP and puppet [here](https://puphpet.com/) which looks pretty nice if you want something basic.
Vagrant(using https://puphpet.com/ to generate the config)
&gt; read other people's code instead of tutorials Good tip. What are, for instance, examples of a well-written CMS? Or an app with MVC architecture? Examples should also have security in mind, of course.
what about stateless authentication ? this is the hardest thing to do right in a webservice.
I usually develop on Windows (mostly via Aptana lately) but deploy to Linux, so I run a LAMP stack on a Debian VM for testing. Whatever environment you're working in should be able to recognize the VM's files, so you don't need to "upload" anything -- just save the way you normally would. Sublime Text is great, by the way, and I use that for a lot of things. The only reason I prefer Aptana for web development is because I have to upload, for a lot of clients, and Aptana handles that well. I wish it weren't written in Java though. 
Trying a demo vagrant file. Says it's going to take 45mins to download/deploy :-|
You only have to download the virtual machine image once (per computer), you don't have to spend 45 minutes every time. Are you using the default precise32 box? The image is not very big, unless your internet is very bad it should be a fair bit quicker than 45 minutes.
Vagrant supports different providers. Currently you can use the VirtualBox provider for free. There are VMware providers, for VMware workstation and fusion, but they are sold as paid plugins (in addition to the license for VMware workstation/fusion)
Another advantage to this is you can reuse (perhaps with some minor tweaks) your Chef cookbooks to deploy the actual production servers. The only potential downside is that I've found VirtualBox's shared folders to have terrible performance. I'd recommend you use NFS, or if not available because your using a windows host, write a chef recipe to mount a network share manually.
If your considering sending large volumes of email I'd recommend looking into a dedicated mailing service. Either something like Amazon SES if you just want something to handle the delivery of mail or perhaps a service like Mailchimp if you want a more all-in-one solution. Also in direct response to your question I'd recommend you avoid, if possible, long running PHP scripts. PHP was never really designed for writing long running scripts and only fairly recently has added support for garbage collection (which must be enabled manually). 
I used PhpStorm for several weeks, and I really wanted to love it. But ... it's ... so ... damned ... slow. On an 3 Ghz i5 with 8 gig of ram, it just wasn't responsive enough. Right now I'm using Sublime Text 2 with some IDE plugins. It's not ideal, but at least I'm not wasting time every day wrestling with it. ;)
- Win 7 + PhpStorm (great IDE, just search this sub for "phpstorm") - Shared files with an Ubuntu VM running LAMP. IMO, you got good advice: you should definitely consider switching to a VM running a linux server. My personal suggestion would be to look into Virtualbox and Ubuntu, and then move into setting up a LAMP stack. Vagrant is good stuff, but I've got a beef with it that keeps me from using it (bridged network with static IP... how freaking hard is it?), so I just created my own Ubuntu Virtualbox, installed shit myself, and I just run it in headless mode so it's not clogging up my Windows taskbar. Anyway, my bottom-line opinion: a VM is the way to go, and PhpStorm is a kickass IDE (especially if you get xdebug in the mix).
The original one is from 3 days before and was frontpage /r/php. So even if it's "inspired" then at least mention the source. There's something called *plagiarism* and this looks like it.
First, everything you said about email I agree with. Your second paragraph, however, I must point out: &gt; [By default, PHP's garbage collector is turned on. There is, however, a php.ini setting that allows you to change this: zend.enable_gc.](http://php.net/manual/en/features.gc.collecting-cycles.php) Additionally, PHP has always had a garbage collector. It was only in 5.3 that it was made "better" by implementing the algorithm described in the quote link that could handle circular references. As well, PHP does just fine for long-running processes. Sure, there ~~might be~~ are better things out there, but if your entire application is in PHP then it makes some amount of sense to stick with it.
Yeh, obviously you have to have an image of the OS you want to install on the VM - they generally aren't on the small side. However, as the other guy said you only have to do that once per image+computer (you could always move them between computers with a memory stick or whatever if your internet is slow everywhere).
Plagiarism? What are you talking about? They both talk about code complexity. One uses FizzBuzz, the other doesn't. Plagiarism is taking someone else's content and claiming it as your own. It does not cover writing about a subject someone else already covered.
You might want to make use of the [SwiftMailer](http://swiftmailer.org/) library they also have a few [plugins](http://swiftmailer.org/docs/plugins.html) that would handle these limits. You might also want to look at another email provider. Somebody has already mentioned Amazon SES however, there are others like [Sendgrid](http://sendgrid.com/) that are pretty good.
Yes, it's hard, so I skipped it. I implemented a sort of like amazon request signing authentication for a company internal web service. It is very similar to one of the example in symfony's tutorial. The authentication middleware/listener listens on Kernel::REQUEST, then inspect the requested controller. If the controller implemented the AuthenticationRequiredInterface, the the listener will do the authentication/request signing to determine the request should go on or return error response. Otherwise, continue the normal request/response flow. By using controller "tagging", controller can be fine grained to represent a resource. e.g. /dogs 
This is a good question. Here are a few things I recommend learning. These are things that I found myself having to learn as I began writing more serious PHP applications. In no particular order: - Dependency Management ([Composer](http://getcomposer.org/), [Packagist](https://packagist.org/)) - Online File Storage ([Amazon S3](http://aws.amazon.com/s3/)) - Testing ([PHPUnit](https://github.com/sebastianbergmann/phpunit/), [Mockery](https://github.com/padraic/mockery)) - Logging &amp; Error Management ([Monolog](https://github.com/Seldaek/monolog), [Whoops](https://github.com/filp/whoops)) - Queueing &amp; Daemons ([Beanstalkd](http://kr.github.io/beanstalkd/), [Pheanstalk](https://github.com/pda/pheanstalk)) - Password Hashing ([password-compat](https://github.com/ircmaxell/password_compat)) - Caching ([APC](http://php.net/manual/en/book.apc.php), [Memcached](http://memcached.org/)) - Email ([Swift Mailer](http://swiftmailer.org/), [PHPMailer](http://phpmailer.worxware.com/), [Mandrill](https://mandrill.com/), [Postmark](https://postmarkapp.com/)) - Image Manipulation ([Imagemagick](http://www.imagemagick.org/), [GD](http://php.net/manual/en/book.image.php)) - Databases ([MySQL](http://www.mysql.com/), [SQLite](http://www.sqlite.org/), [Postgresql](http://www.postgresql.org/)) - Version Control ([Git](http://git-scm.com/), [Github](https://github.com/), [Beanstalk](http://beanstalkapp.com/)) - Debugging &amp; Profiling ([Xdebug](http://xdebug.org/), [Codebug](http://www.codebugapp.com/)) - Frameworks ([Laravel](http://laravel.com/), [Slim](http://www.slimframework.com/)) - Coding Standards ([PHP-FIG](http://www.php-fig.org/)) There is tons of help online for all of these—just Google it. By the best way to learn is to actually try them. Install them, write some code, see how it works. Now, learning some of these things can be difficult in a shared hosting environment, or even on a local MAMP style development machine. This is where [Vagrant](http://www.vagrantup.com/) comes in. I've been pumping this tool a lot, because it's an amazing way to learn Linux, and also learn new tools like the ones I've mentioned about. Vagrant allows you to quickly create (and destroy) virtual Linux development systems right on your own computer. Good luck!
Ok, now that's what I came here for. Thanks, it's time for me to start digging into code.
WAMP is great for development. It was way easier to set up than I had imagined, and it's great to be able to work on stuff even when you're on airplanes and things where wifi isn't available. I went with http://www.wampserver.com/en/ after doing some research on the various options and it works great for me. I also wrote a PHP script to sync changes to my live server.
Well, for starters, every Reddit sub would only have 1 post. But then how would I waste my time in this world ? HOW ?!?!
I've noticed this too. Actually freaked me out at first since my application was suddenly showing much slower page loads. Really not a super big deal in development mode, unless your application does a lot of file system interaction.
It is interesting you should mention this. I have been evaluating an application written in CI (but poorly written) as I will be addressing some speed issues. So I had two criteria by which I was "scoring" frameworks: 1) How easy is it to learn? I won't be maintaining this app forever after all. 2) How fast is it? In both, CodeIgniter actually beats Laravel. Does it have all the fancy bells and whistles that Laravel does? Not all of the, but it is really fast (usually in the top 5 when comparing requests per second). Not only that, but the documentation is great (which is good for the person(s) taking over the app when I'm done with it). Don't get me wrong, Laravel is fun to use and really super slick. But when it comes to ease of learning and pure performance, CI is the winner. 
Depends what you want to do. 1) You just want to use someone else's code and make something that works as fast as possible? use pre-built code. check out hotscripts.com, you can probably find a news content system that does exactly what you want. 2) You want to improve your coding abilities, but don't care about design. Here I would suggest you take a look at something Code Ignitor or Kohana and learn to use a MVC framework. (or write your own MVC and then onto your news system). Check out Twitter Bootstrap for easy templating. You can even pickup Twitter bootstrap themes for cheap that will take care of all of your GUI and design, you then just need to work on the programming aspect. In my personal opinion I think it's better to be fluent with programming vs design, you can always find a design or a template to slap on the front of your code. The code/backend/what it actually does is what is important.
I know this thread is a little old now but my tool of choice is Sublime2 for writing my PHP and other web related languages ... worth a look. With that said I have been keeping an eye on PHPStorm as an actual IDE. I guess the real question would be "do you really need an IDE"
No, Vagrant is for you, give it a try. Vagrant has completely changed my workflow and opened up a lot of new methods for me to test and develop new things. E.g., I have a vagrantfile that loads up an entire replica of a production environment with about 8 different vms (web, db, memcache, varnish, solr, monitoring, queue, and workers) for integration testing and to launch this environment all I need to do is run "vagrant up" It is truly one of those tools that will make your life easier Also, adding the vagrantfile to your project repo = huge bonus. Please do yourself a favor and check it out thoroughly.
really you should move hosts, but if you must stay then simply place emails into a database instead of sending them. next, a cron job can call an email script to send and remove x number of records from the email queue table.
For PHP i use use brewed PHP and normally the builtin server, for DB anything that the project needs, just install with brew, actually i use homebrew for almost everything nowadays... When i was starting with web development i got started with mamp/xampp/etc but those days are gone. If you do development on windows, then i also want to suggest vagrant. SublimeText as editor, and dash for documentation, and alfred for quick app switching. ITerm for terminal, with some custom stuff from dotfiles. As you can figure out im on OSX macbook pro, with a external big ass screen. Finally as a sidenote i would recommend flux, its great for the eyes, use it for 1-2 weeks and you are hooked!
I think even a computer science degree might not introduce you to more than you know now in regards to programming, you might get a little better math background but from what I understand CS courses generally don't go deep in to programming techniques, they focus on a broad understanding of programming languages and how to write simple programs. The real learning is through interfacing with colleagues and constantly keeping in touch with the community and reading articles about programming, etc. This subreddit and PHPMaster.com are good sources for learning advanced PHP techniques and ideas. There are plenty of others, but in essence you are going to learn the most from reading blog articles and subsequently plunging yourself in to similar problems and solving them with similar techniques to what you have learned but not yet applied.
The way i personally do it (im on a mac as well) is i have a single folder /Projects on the root of my hard drive and have build virtual hosts within the native apache installed on the mac for each of the folders so that i can setup any custom rules as needed. This /Projects folder is also the root of my SVN server (sorry been using SVN for 10 years and never bothered switching to GIT) so that each of these project folders is actually a folder within the SVN tree. I have another application that i wrote myself that monitors SVN for any changes and if any are found runs a custom (although they are all pretty much the same) script to deploy my code to an external host so that co-workers/clients can see my changes. Ive never seen any huge benefit to using a VM to develop on myself, at least unless you are using windows that is in which case there can be the occasional tiny difference in the way PHP/Apache works.
I don't think /r/php is the best place for this question, as the language of PHP is only a minimal subset of all of programming languages out there. Programming covers a vast array of mediums, from the microcontrollers which keep your car running every day, to the engines running the latest games. Do you want to learn more specifically about PHP? Or more about web-based programming? Or more about the lower level architectures of programming (operating systems, embedded hardware, etc)? Programming is a very generic term, and saying you want to fill the gaps in your knowledge of programming is like saying you want to fill the gaps in your knowledge of science. With that said, the type of resources it sounds like you would be looking for are the ones that describe techniques and practices expanded across many languages. Some possible subjects include: - Understand the [programming paradigms](http://en.wikipedia.org/wiki/Programming_paradigm). The major paradigms of Object-Oriented and Functional are most important. Good programming happens when you understand the paradigm you are working with, and use the features of that paradigm to write clear and efficient code. - Knowing what a [data structure](http://en.wikipedia.org/wiki/Data_structure) is. There are many levels of data structures; in low-level embedded programming, you may design a data structure to map to memory a certain way. In operating systems or low-level C programming, you are concerned with linked lists and binary trees for searching. In high-level programming, you may be concerned with how you should store and query data to the database (these are often closely related to [design patterns](http://en.wikipedia.org/wiki/Software_design_pattern)). These are all examples of data structures at one level or another. - Perhaps learn a bit about TCP/IP if you are interested in web-oriented programming. It's amazing how many web developers do not know how many layers they are sitting on top of, nevermind how these layers actually interact with eachother. These are just a couple of suggestions to get started. As I said, Computer Science and Programming have become incredibly broad fields, and there are so many directions to go as far as learning is concerned.
When I started studying CS at college-level, I already had a working knowledge of programming and I could probably get a similar job to what I have know even if I didn't attend school. Skeptical at first, I went to programming, data structure and algorithm classes which covered everything from the beginning. I understood how simple things you take granted for work, e.g. sorting, searching, data storage and retrieval. I understood algorithm complexities and implications of different approaches to allocating memory. I was motivated to do a lot of problem solving I would otherwise wouldn't do - I'd certainly give a lot of time to /r/dailyprogrammer exercises. I'd participate in Google Code Jam, AI Challenge, not to mention, they are great fun. Graphs are a must-know for a good programmer - so many things can be abstracted with them. Discrete math is cool - it's much closer to applied science than calculus. Everything where you use less Google and more of your analytical and problem solving skills is great! Soon, we'll have a lot of people which are able to quickly find solutions to known problems, but few which know how to solve new ones.
Yeah... please don't ever program professionally.
I feel as if you're leaving out rather substantial amounts of information here. &gt;I want any ideas how to make his life hard so he will no longer continue? Why do you wish to punish a third party which has absolutely nothing to do with the situation you're currently in? By the sound of things, it's your "team" that you should be angry at, not him. 
Wow, I can see why they're moving on to a different programmer. 
Vagrant takes the work out of administering VMs. I used to not use Vagrant. I had gotten my time to set up a VM from scratch down to productive to less than an hour. However, I would always walk on egg shells because I knew if I screwed something up that I couldn't recover from I would need to start from scratch again. With Vagrant I have no worries. Screw something up? pthththt `$ vagrant destroy &amp;&amp; vagrant up`. Wanna have multiple environments? As simple as creating a new folder. In ~15 lines I can tell Vagrant what folders I want to share, what to name the box, what IP address to assign to it. It's incredibly powerful and has completely erased my previous worries about VM management.
Thanks! It was originally a labor of love and frustration, but now I have a great guy pushing commits and it is great fun working on it!
Oh grow up. 
Could've fooled me.
If you get JSON, just save it in a variable and do a foreach and echo out the stuff you want. More seriously, take a look at some of the api packages on packagist, most of them get their data as json, you can find good examples how to implement you own api. Dont forget to share your package on packagist! Good luck! 
At home I actually use a full hardware server set up as a shared hosting environment running ubuntu server. I have a directory shared via Samba, which is mapped to my windows computer. Instead of working on the files locally, I actually edit them right on the server through the mapped drive, then make backups after any major change, or the end of the night (whichever comes first). After years of working with VMs, I still hate them. My development server at work is the same setup as above, except it's a VM on Proxmox.
windows, notepad++. working on remote machine via putty &amp; winscp. tried eclipse and aptana, but synchronizing projects using composer is too painful.
This. It's really not all that hard to write and if depending on how you implement it you can also get a good idea of who you've already sent to.
I've developed locally for years, mostly Zend Server. Recent job change, I wanted to give Boxen a try. It's a project created by Github that they use to on board developers so they can work within 30-40 mins and commit code on their first day. They are mostly Ruby shop and do some NodeJS, but there is a project you can add to get PHP running on nginx
https://github.com/mattheath/puppet-php
This is selling vagrant to me more and more. I will have to have a thorough look into it when I next get the chance. Thanks for the advice!
Definitely use mandrill. Soo convenient.
Just about to dive in.. gotta say though already I love this idea :) Edit: Didn't work. :( Here's some of the output.. [default] Importing base box 'precise64'... [default] Matching MAC address for NAT networking... [default] Setting the name of the VM... [default] Clearing any previously set forwarded ports... [default] Creating shared folders metadata... [default] Clearing any previously set network interfaces... [default] Preparing network interfaces based on configuration... [default] Forwarding ports... [default] -- 22 =&gt; 2222 (adapter 1) [default] Running any VM customizations... [default] Booting VM... [default] Waiting for VM to boot. This can take a few minutes. ←[31mThe VM failed to remain in the "running" state while attempting to boot. This is normally caused by a misconfiguration or host system incompatibilities. Please open the VirtualBox GUI and attempt to boot the virtual machine manually to get a more informative error message.←[0m *** When I open virtualbox I don't see anything listed, I don't see any vm's or anything.. not sure what went wrong.
I used XAMPP + TextMate before moving to a virtualbox with ubuntu as an os, xampp again as a lamp stack and aptana as an IDE
Do people execute the same code for production &amp; development? My code may has many debugging statements, displays errors/warnings, queries a different DB, etc. I have a PRODUCTION constant that gets set true/false based on the server hostname. That lets me do stuff like: PRODUCTION and echo "DB rec = $rec"; Do other people do something similar?
I use mandrill as well, but for a newsletter type thing, mailchimp might be a better choice.
I use FreeBSD jails. Each jail is like a lighter-weight VM, a chroot on steroids in unix terms. Each jail uses the same FreeBSD OS, but jails cannot interact with each other or the host system. Applications in one jail won't effect the host system or another jail. Jails can share the same Apache/PHP/whatever executables, or each jail can have it's own copy of an app. Jails are easy to set up, don't use as many resources as VM's, and are pretty secure. Read more at [http://en.wikipedia.org/wiki/FreeBSD_jail](http://en.wikipedia.org/wiki/FreeBSD_jail)
from someone who did computer science at university, trust me you missed out on NOTHING! I was just told to read a particular book (Matt Zandstra - PHP Objects, Patterns and Practises) and that cost me £3k for the course and £3k for the accomodation.
just for fun, is your name Jeremy or Rob?
Thanks for the offer, maybe I'll take you up on it when I get stuck on a particular problem :)
You might want to browse through [Coursera](http://coursera.org) and [Udacity](https://www.udacity.com/). This is a great era, there are all kinds of college level CS classes you can take online for free and continue to learn and grow. Take advantage of it! If you have never had any formal training I would recommend starting with Harvard's [CS50](https://www.cs50.net/) course. Great class. You can wait until it 'formally' starts or just download the lectures and homework and such and do it on your own anytime.
They also tend to focus on system level stuff. Studying CS is great if you want to build a lexical analyzer or want to write a scheduler for an operating system, but it isn't going to help you understand anonymous functions/objects, callbacks, closures, and so on. These are all very vital things to understanding javascript (especially with node.js or jquery) and php. I highly recommend wikipedia, because it has great information on some of the more technical structures you will encounter in your software development life. Things like regular files, pipes, berkley sockets, and the like are NOT complicated constructs. In fact they were designed to be as simple to use as possible. I'd honestly start with data structures. Linked lists, trees, stacks, networks, and the like are vital to understand even if you never ever implement them (because nowadays we use databases to model data more often than not and they are properly optimized and will handle it faster than your own code ever will). Next, I'd add communication between processes: signals, pipes, semaphores, and so on. Sockets are sort of in this realm but deal with networked machines.
Start with a book, Clean code, it will change your life as developer. After, if you already know about oop, patterns and dto you can start with tdd and phpunit
I have a vps that is linked to my desktop and the production server via openvpn. I setup both the development and production servers basically the same. The development server does have more perl modules though. Then i mount the vps via sambe to my desktop, and edited my host file to point to the dev server. Works well for me.
Virtualbox + vagrant + puppet To generate the vagrant config file puphpet is amazing! 
Do you mean things like unit testing? Or design patterns (such as singleton?)
- Linux desktop (Ubuntu 12.04LTS) - Nginx web server (compiled from source) - PHP-FPM 5.4.x (latest, compiled from source) - Virtual hosts per web application/project - Git for all version control - Sublime Text 2 and NetBeans for IDE's And some VirtualBox instances just for IE7-10 testing from modern.ie. Setup notes for those here: https://gist.github.com/magnetikonline/5274656
Take a look a fuelphp and use bootstrap. Don't use a dated cms because you will eventually regret it.
I would suggest setting up a basic ubuntu server or centos virtual machine. Setup a very basic LAMP stack or whatever you use and take a snap shot. When you start a project you can start with a new snap shot and build it into what you need, when you're done with the project, you can move the vm off your machine for safe keeping/use to to build the production setup. You should look into Git for version management. Netbeans has built in git features which will commit and push your files out to the vm server, it's really just a couple clicks and it is great for managing all of your files. You can even run shell scripts from Netbeans by hitting F6, and then instead of setting it as /usr/bin/php set it to /bin/sh and off you are with your shell script to push data around for that project. 
Are you trying to run the CLI tool in the VM or on the host machine? It won't be able to connect to the MySQL database running on the vagrant VM if you are running the CLI tool from the host unless you tell it how.
Hey, can you submit a bug report to the github page? Please paste your Vagrantfile!
Nah
As someone with a bachelors in software development, you haven't missed a thing. I feel the exact same way. There are big gaps in my knowledge and I don't know how to fill them.
intval () returns 0 when it fails. What happens when you cast the value instead? (int)$variable. EDIT: Decided to take a look at the QueryServer () function. It's returning an array so intval () will fail. It seems that the array being returned does not always have the same indexes either, thus, you need to have code such as: $return = QueryServer ('127.0.0.1', 8888); if (is_array ($return) &amp;&amp; isset ($return['Players']) &amp;&amp; ctype_digit ($return['Players'])) { $playercount = (int)$return['Players']; } EDIT 2: Consider using PDO instead of the mysql_ functions, for both security and because those functions are now deprecated. 
Ha, I was in a hurry and couldn't think of the word (I'm not a native english speaker). I'm passing the player count to intval.
I slightly disagree, I'm currently employed as a programmer and a CS student. The things that are important to productivity are learnt at work but the true conceptual stuff is coming from school. I used arrays for like a year in PHP and didn't truly understand then until I took my Data Structures class, then things conceptually fell into place and I use them much more efficiently now, keep in mind this is just one small example. I'd say you can easily get by without the degree but the confidence and mental connections are worth it if you have the ability to go for a degree, even just an associates would be an amazing foundation.
Instead of using Dreamhost sign up for a real hosting company like Rackspace Cloud Servers. Then set up your own SMTP server to handle all your outgoing mail. Cheapest server will run about $10 / month but it won't work well.
I agree with you. I didn't complete my CS degree, but from what I saw during that time was eye opening. For me it was also the Data Structures class - maybe it's just THAT class, lol. At any rate, seeing Arrays, Linked Lists, Maps, Trees, and all the different Sort-Types expanded my thinking for sure.
I'm actually using a raspberry pi as my dev server. I run Samba on it to allow file access from windows. It's running raspian, nginx, php-fpm and mysql, the web root is on an external drive. It's not fast, but it works, and it's more or less the same environment as my VPS, the only difference being the VPS is centos.
&gt; You explicitly compare with true and false when this isn't needed. For example, you needlessly check if (empty(x)===true) when the shorter if (empty(x)) means the same thing, and if (empty(x)===false) when the shorter if (!empty(x)) means the same thing (because empty() doesn't return anything truthy that isn't precisely true or anything falsey that isn't precisely false). That's not "wrong". This is basically a "religious" question. I could argue the same way: if you know that empty() will return true or false, why NOT compare exactly for true or false? The ! statement is a code smell (syntax smell) because it's very easy to overread, so i wouldn't recommend to use it. If i want false, i compare === false. In ifs, php does a lot of stuff by itself, and if you want to be 100% sure, use ===. I made it a habit and did never regret it.
The purpose for prepared statements is not to enhance security. That's a side effect a lot of developers "utilize". Please use prepared statements when you need to have a prepared statement and use PDO::quote when you don't need them.
You're not missing much except that you probably are just not using the mainstream language for thinking about your coding process. If someone who was a CS graduate was pitted against you, they might end up coding a similar architecture as you, but they would explain it differently. So you will understand their code quite easily if you pore over it but won't quite grasp what their explanation is all about except the basic general idea. If you want to get mainstream thinking in your coding process then join anyone of the online classes (like udacity, coursera, etc.) and you will get mainstreamed quite easily.
&gt;why NOT compare exactly for true or false? Because it's Boolean logic. When you say if (function() === true), you are saying "if function() returns true, and furthermore true === true, then execute the if statement". But we already know that true === true. Checking that Boolean logic still holds is redundant. Suggesting that the use of the Not operator is a "code smell" is frankly, ridiculous.
Clever use of __toString. Im going to copy that. :-)
if (!$var) is a code smell, while if ($var != $var2) isn't. It's very easy to overread, and it does the same as == false, which is more clear. as i said: using === instead of nothing is purely religious, you can do it but you can leave it that way. In our coding standards for instance, ! and ifs with no comparision is prohibited because it's a source of error + less readable than comparing to something. Explicit is always better than implicit, therefore, every if should contain a comparision.
I have literally never seen a large scale codebase that has "avoid if (!$x)" in their coding standards. Can you point me to one that isn't yours?
I love you !
What CS graduates are thought is how to think and attack a problem. A good foundation of general programming principles can help you a lot! Here are a couple of really good books you should read: [Code Complete: A Practical Handbook of Software Construction](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=tmm_pap_title_0) [The Mythical Man-Month: Essays on Software Engineering](http://www.amazon.com/The-Mythical-Man-Month-Engineering-Anniversary/dp/0201835959/ref=wl_it_dp_o_pdT1_nS_nC?ie=UTF8&amp;colid=1IOKZXVZ1CIZR&amp;coliid=I3DJGDFY1LQ7NJ) [Clean Code: A Handbook of Agile Software Craftsmanship](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) 
Everyone's saying Vagrant. I was very excited to try it out the other day, but no matter what configuration I used, it was just SO SLOW. Apparently this is an issue with shared folders, and I'm on Windows so NFS is supposedly not an option. I tried configuring the Sublime SFTP plugin to sync the files instead of using the shared folders, but I still couldn't get it to speed up. I'd love to use Vagrant, but until I can figure out this issue, i'm sticking with EasyPHP...
tl;dr version: * Profile * Use an accelerator * Switch to class map lookups for autoloading * Cache stuff
Just a FreeBSD VM with the usual suspects. I use Kate for editing, nothing over the top or unnecessary.
Use [forward ports](http://docs-v1.vagrantup.com/v1/docs/getting-started/ports.html)?
I wonder though, why the earliest build is [four megabytes bigger](http://downloads.php.net/dsp/) than the RC1...
I think two things can help you : Reading and writing. These are the two things self-taught people usually don't do, that would help them improve lots of their gaps (no offense or criticism here...I'm not self-taught by I have some gaps as well :). First, reading books can help you. If your plan is to be better at web development, you should start with generalist knowledge such as Object Oriented Programming, Database Basics and Network Basics. Target non-technical books first ! While they may sound boring, you'll find informations in non-technical books that are not written in more technical books. Learning OOP by reading C++ books -- or worse by reading PHP tutorials -- is not a good way to acquire a solid knowledge on this topic. You have to switch your mindset from "I want to learn how to do something in some language" to "I want to understand what something relies on, so implementing it is perfectly clear and logic in my mind". Second, writing can help you learn or figure stuff. When working on a project, you should think, then write, then code. And what is great about not skipping the writing part is that you usually realize mistakes when writing them down. If you don't write, you'll notice these mistakes while coding. And it's too damn late to not have an impact on your project (and your mood). Organize the things you write, and read/annotate them again later. Some of the things you'll write about a project will be even more valuable when the project is done ("I'll never do this thing that way again" is a strong learning sentence !). So yeah, read and write.
Yes as mentioned try using port forwarding. MySQL by default runs on port 3306 so that is the one you'll need to forward. 
C.R.E.A.M.
It's very similar to running Ubuntu in VirtualBox...in fact that's exactly what it is. Except Vagrant makes the setup (and teardown) of that virtual box extremely easy, fast...and best of all, portable! With a simple `vagrant up` command, Vagrant creates a virtual box automatically with the distro I choose (Ubuntu for me), then runs a provisioning script that I wrote—which installs Apache, MySQL, etc. While I'm developing, if I break something, I just `vagrant destroy` the box, which completely removes the entire virtual box. Then `vagrant up` to start fresh. And clearly all my project files are not deleted—they are saved on my computer.
Wow, that sounds very easy, I'll give it a try.
Php is a preprocessor itself actually. I found these: CCPP http://code.metala.org/p/ccpp/ pp4php: http://www.monperrus.net/martin/pp4php I'm not really sure why you'd want to do what your talking about, because if php doesn't do what you want, your probably using the wrong tool. But when your only tool is a hammer, a lot of things look like nails, right?
RC2 does not fix any major bugs.
PHPStorm is the best PHP IDE IMO. Even if you aren't doing hardcore large projects this shit will pay for itself after the first project in the time it saves you. You should try and mimic your production environment as closely as possible, this will help keep bugs related to the environment at a minimum. &gt; I currently develop in Windows (everything is Windows, apache, mysql, php) but run on CentOS in production, there is a lot of code that is in play to just to make this work, but it sucks balls, don't do it. Develop on a virtual machine (vagrant like others have said), this is the best way to go because it keeps your local machine free of unneeded stuff and allows you to spin up multiple vms if you needed to do extra debugging/testing for those funky edge cases. It'll also allow you to (assuming deployed to Linux) get almost a mirror image of you production env. When you talk about file transfer this is where cool features of shared folders come into play, with both [VirtualBox](https://www.virtualbox.org) and [VMware Player](http://www.vmware.com/products/player/) you can create shared folders that auto syncs files to your VM while you edit them on your dev machine. By the time you've saved a file and hit your browser it'll already be sync for you to view it.
I also use notepad++ but I make use of its SCP addon and just edit files right on my dev server. I have an old netbook running some sort of ubuntu that I use as my development and testing box, and my final server is always different as I generally assemble smaller sites.
I'll give this a go thank you! :D
This seems to be the best option using shared folders. I have done it before I just didn't instantly thing about it (for some bizarre reason). I think I'm going to stick with sublime (as I mention I don't want to pay any money just yet) and try out the vagrant VM. Thanks!
PHP is a preprocessor (its name, as you might know, is a recursive acronym: "PHP: Hypertext **Preprocessor**"). So, you're looking for a preprocessor for a preprocessor, thus the yo dawg (xzibit meme reference). Yo dawg, i heard you like preprocessors, so we wrote a ^preprocessor ^^for ^^^your ^^^^preprocessor. 
Your link is anchored to a post from march :/
sooooo it makes php into python?
Not sure why you're talking about {}. You know you can omit those, right? if($foo) ... or if($foo): ... ... endif;
Hey, that sounds like my job!
OMG haha. Thank you so much bro! 
At least try the 30 day trial of PHPStorm so you can see what you're missing. It. Is. Awesome.
every time i read "you just need to run **composer update**" i feel like punching little babies. there is a specific command to update the classmap: [dump-autoload](http://getcomposer.org/doc/03-cli.md#dump-autoload) 
I wrote a one at http://pratphall.org. It's not great and I don't really maintain it, but it works well.
Here's [the actual news post](http://php.net/archive/2013.php#id2013-05-23-1), plus the [full change log](https://github.com/php/php-src/blob/php-5.5.0RC2/NEWS), which isn't terribly exciting (although a couple of crashers were fixed).
Please tell me you're joking... CSS? Sure, It SASS is very useful. JS? I suppose, though I'd rather you just learnt to use the language. HTML &amp; PHP? LOL.
So you can preprocess your preprocessor's processing before it processes your process
Great points! Thankyou! The PropertyAccess component, seems to be very helpful. I am definitely going to use it. 
Looks amazing man! Is this a big task to accomplish? Just to confirm it's just a pre-processor? 
* The command line is extremly powerful. Most sysadmins know this, and PHP frameworks often recognize its power. For instance, the CLI tool can extend an existing code by adding a CRUD interface for a given DB table. Or it could migrate the DB schema. At least Symfony and Yii have good CLI tools. * I would highly recommand PHP frameworks for any non-trivial project. Structuring your own code without a framework is painful for a large codebase. * I don't know Laravel, but the preset 3 most popular frameworks (Symfony, Zend, Yii) can use a simple "layout + content" template system. The layout is generally defined by default, but each action can select another one. * Laravel is the right choice if you like it. Each framework should be powerful enough to do what you want here. I feel that Symfony2 and ZF2 are too heavy (Java-like, or "entreprise-ready"), and I prefer Yii which I can grasp in its entirety, but you should build your own opinion. And of course Yii also has defects.
I run: * Win7 + phpStorm * VirtualBox running ubuntu server The VM: * Runs dnsmasq which I use to point all .dev domains back at the VM. * Has a little script to help facilitate the adding of new sites (on their own sub-domains) to the server. * Runs samba which I use to share the directory above all of the docroots. * Runs PHP as FCGI and can easily switch between various versions of PHP. * Projects are stored in SVN. **Question:** This whole vagrant/chef/puppet thing - is it better than my current setup? I could see it being useful if I were working on a huge project with more tailored hosting requirements, but I just can't see the advantage when it comes to fairly generic and small php+mysql sites. 
I updated my example so that maybe you're able to pick up on how that translates into the view. I realized the matching names may have been confusing so I changed that. Does what I changed make a little more sense? Or are you more curious of the actual internals and how it's doing it?
Just curious, how would you recommend improving a query like that?
You can use a [fulltext index](http://devzone.zend.com/26/using-mysql-full-text-searching/), but results are generally poor and often misunderstood. If you want to improve searching you'd use something like [solr](http://lucene.apache.org/solr/). There aren't really any good pure PHP solutions for doing searches like this. PHP is the wrong tool for this kind of job.
Upvoted because Datatables is pure awesomeness. Not that OP's project isn't good...but I haven't been in a situation where I needed anything besides Datatables. *Edit : After a closer look, Laravel 4 integration seems really good and more useful than I initially thought. I'll test that out this week-end ! Also, spelling.*
Thank you
Yep, that is exactly it. And keep in mind you can use the @foreach and other things in those views. So you could pass an array into your 'with' and do something like (using Eloquent ORM) $users = Users::all() return View::make('users', $users); Then in your view @foreach( $users as $user ) The user id is: {{ $user-&gt;id }} The user name is: {{ $user-&gt;name }} @endforeach (This is making the assumption you have a User Eloquent model created and that database table that Eloquent maps to has an 'id' and 'name' column associated to it. Interchange those as necessary. And yes, your idea with the @layout is exactly what I'm doing. There are other even cooler things that can be done using View Composers which can be handy... though they certainly are not required. These blade templates are then "compiled" into PHP located in the laravel/storage/views folder and referenced. You can see the resulting PHP code that comes from the Blade template engine to better troubleshoot things.
Check the github repo. Plenty of skeleton applications in there.
I'm thinking he could make an adapter for his plugin which used data tables and get the best of both worlds. What he's doing probably wouldn't be that hard to adapt either, and the end result would be a choice of front ends.
Install xdebug instead.
Certainly hope you don't try and run this on any circular references...
The query is also filtered by category &amp; tag, so the number of rows would be somewhat limited.I'll definitely check out those links though. Out of interest would it be faster to remove the 'LIKE' part of the query, and do that kind of filtering on the resulting array using PHP?
Just saying, but this commercial software, They want you to buy a license of $150,- a year.
Ok, it's [here](https://github.com/puphpet/puphpet/issues/27)
The way I see it is that, if you make a habit of always using prepared statements and binding values, you can be more confident with your code at the end of a project. When you are fighting for every inch of performance, then I think you might want to use them only where they are neccessary.
Actually its 45.00/quarter or 150.00/year. you subscribe only to get what you want/need. Its open source and you have unlimited usage rights. you only stay subscribes to receive updates on any of the 33 composer packages available.
It really depends on the volume of returned results, and how you perform the filtering.
At least use your company's account if you're gonna defend it.... Besides that, This isn't very opensource either if you have to pay for it. Quoting [Wikipedia](https://en.wikipedia.org/wiki/Open-source_software): "Open-source software (OSS) is computer software with its source code made available and licensed **with an open-source license** in which the copyright holder provides the rights to study, change **and distribute the software _for free_ to _anyone_** and for any purpose." 
In wordpress? I would just put all my html in a template directory and probably write a simple function that takes an argument that is the template file name path and another that takes an associative array or object of variables to pass into the template file.
When i was playing around in ruby land, i found posts like this helped. http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html
His original post is also a good place to start https://igor.io/2013/02/02/http-kernel-middlewares.html
This was my thought as well. Nice datagrid, but datatables is more mature and widely used
I think because I am a bit old school. Open Source has always meant to me that the code is open and not closed. people can change and do whatever they want to it, its not encrypted etc. I never really equated open source = free. But I get that it is implied so I need to figure out a better way to go about it. I am with you, I am no expert. Just a developer trying out a rather unique business model, I expect to stumble along the way.
Of course. There's always room for a different take on things.
I'm excited about the OP cache and the array_column() function is kinda neat.
Exactly. The freedom to experiment is amazing.
If you're using a GUI app then use a SSH tunnel. You are not connecting to "127.0.0.1" in relation to your desktop computer, because MySQL is not running on your desktop computer. You are running MySQL on the vagrant box, so you need to SSH into it first. The username and password for your vagrant box is vagrant / vagrant.
Any model related function or attribute that spreads over multiple controllers, or that will do so in the future should be in the model so you can keep your code dry. and not have to repeat that function in said controllers. Any model related function or attribute that will only be in 1 controller and will not spread to others in the future should be in the controller itself. Because it does not require repetition. As easy as it sounds. I have not found any good examples sadly. You have to understand a code base to get examples.
Might want to proofread that article. (Assuming it's yours)
An unnecessarily large test file was included. This will be fixed for the final release.
I'm very capable of understanding a codebase - I've just never seen anyone point to a project and say, "yes, this person is doing it right"
Please, do not put imaging code into your database models. Put that in separate libraries/helpers/services/bundles whatever you'd like to call it. Not everything needs to be either M, V or C. Some of the code simply just belongs to the "business" side of your application. Of course your controllers will then *access* those parts, and save the results *via* models. Much more important than Fat models &amp; thin controllers, are SOLID classes where all classes are essentially "thin".
&gt;Certainly hope you don't try and run this on any circular references... Why spoil the fun...?
This is how I have always understood open source to work too. If you want to charge for a copy, and charge for support, then you are well within your rights to do so. So long as the recipient has all the source code, and you do nothing to prevent them from customising the product for their own needs, then you are fine and good. 
Indeed
It takes logic that might otherwise be done in the main application (set via configuration options or whatever) and moves it to it's own, testable unit. Take the session. Fairly closely tied to the request and response. So it makes sense that, rather than relying on something like a service locator to create and find the session object, we can use the request directly. More specifically, we can use a middleware to set that up for us so our application doesn't have to worry about doing it before using the session. This would also give us the opportunity to [better handle cookies](https://github.com/stackphp/session/blob/master/src/Stack/Session.php#L46-L54) than something that wasn't aware of the request/response lifecycle. Using middleware also gives you a way to modify requests/responses without having to worry about hacking into your frameworks core or creating an awkward subclass that replaces a method and copies most of it only to change a few lines.
https://github.com/johnrich85/wp-related-posts/blob/master/wp-content/plugins/weeb-related-posts/weeb-related-posts.php#L85-L88 You don't need those lines at all.
I would put html in an external file, and include it. And give themes a way to override it (via [`locate_template`](http://codex.wordpress.org/Function_Reference/locate_template)). So, you allow themes to have a `related-posts.php` file that you'll use. $related_posts = some_logic_to_get_related_posts(); ob_start(); if ($tmp = locate_template('related-posts.php')) { include $tmp; } else { include WP_RELATED_POSTS_PLUGIN_DIR . 'fallback_template.php'; } $content = apply_filters('weeb_related_posts_html', ob_get_clean(), $related_posts); That would give your end users the maximum amount of flexibility while still providing a sane default. 
Laravel is pretty clean. But no codebase is perfect, there is always someone who can write it better, smaller, prettier, and more accurate. This is why opensource works. And also, this is your code will almost always look bad in someone else's eyes.
It depends on how the library is called. Does it require a lot of configuration? Then making a specific builder would be perfect. A *Builder* is basically a class that instantiates another class and configures it. The builder can then be called from anywhere: controllers, daemons and command line tools. So instead of duplicating configuration to instantiate a library image and resize it to a thumbnail and apply a grayscale filte, you create a GrayscaleThumbnailBuilder that wraps the library and is reusable. (By the way, this example is the perfect case for *Decorators* to combine different imaging effects. Anyway...) Might seem too much *at first*, but in the long run, this makes your architecture a lot more expressive, DRY, SOLID and maintainable. There's much more to object oriented programming than just MVC. Learn some patterns and read about code quality. It will improve your architectural knowledge and confidence.
+1 Dumping variables to screen and in HTML too?! non-sensical?! is almost like solving problems with pen &amp; paper, once you tried xdebug.
Yeah, it probably doesn't matter. 
I would vote you instead focus on the skinny model, skinny controller paradigm. If your models are just ORM subclasses, that's good, let them handle data persistence and perhaps validation/relationships. Put your actual logic in domain objects, service objects, etc. For example, image manipulation has nothing to do with data nor is it really specific to one model. It is an ideal case for a service object, which is really just a plain old php class that performs some kind of service for other objects. Your controller will ask it to do whatever is needed with an image when needed. It leaves your model more testable (because you no longer have to worry about this image manipulation code running during a unit test) and gives you an isolated class you can more easily test as it only does one thing (resize images, or whatever). 
Another +1 for mandrill, really great service.
And yet, I am eternally grateful that the latest uses of php use it like a programming language, and not some HTML stuffed with tags like an html pre-processor would imply.
If someone wants to do a bit of meta-programming that you cant do directly in php proper, i say more power to them. I don't suggest using it in production but it's a great learning experience. Sure you could do it in php proper with full on code generation, I see plenty of that in the wild these days, but let him toy around with other styles of meta programming. 
Just because you can doesn't mean you should.
Great, thanks to your help and a little extra poking around by me, I've got it all figured out. This is awesome!
Why are you using different ports for different sites anyway? Why not just use subdomains or something.... If you insist on using ports why not just make aliases then?
Oooh yes, that does look like an amazingly useful function.
Drunk code review notes: * Remove closing ?&gt; in PHP only files. Don't want to inject nasty \n's into the output stream on accident. * Your indentation is a bit odd, hard to match brackets in weeb-related-posts.php * Really your spacing standards are a bit all over the place. Some where() are spaced out from the parenth but if's aren't. Same with extra returns after {. * Your class members should have docblocks * Your docblock usage and head comments are inconstant across files You'd fail my code review, but it's all ticky-tack standards bullshit. Assuming the code actually does what's advertised. I'd probably just pass it on to QA and let them rip you a new one when it didn't match the spec.
A little more research from my perspective. http://opensource.org/faq#free-software 
Screw XDebug, use XHProf.
This is on the development end, not public end. And this is for where ports maybe be used instead. I happen to do things this way and find it easier to manage.
Sure you should. The former is for one-liners like if(!$something-&gt;isValid()) throw new FooException("Something isn't valid!"); The latter is often used when templating with pure PHP, because tracking braces through HTML is a bitch and a half. Explicitly saying what is ending is very useful.
speaking of first plug-ins, what's the best example of a "hello world" plugin?
Oh man, I don't know where to begin. First of all: congrats on your first app. Next let me say that I absolutely hate the idea for your app and subscription whoring on youtube in general. This is almost as bad as asking people to click "like" to get to see some content. Then there are the restrictions: * File name can not be more than 20 characters long. * Wrong file type. Only ZIP and RAR files are accepted. It would be nice to know such things before selecting a file, let alone before uploading it. The restriction on the number of characters in the file name is somewhat arbitrary and ridiculous. Then, when I pose as a user trying to download a file, Google OAUTH asks me for the following permissions: &gt; sub4zip is requesting permission to: &gt;&gt;Manage your YouTube account &gt;&gt;&gt;View and manage your videos and playlists &gt;&gt;&gt;View and manage your YouTube activity No sane person should accept this invasion of privacy and threat to security just to download some file. But we are in luck, since your app hands out the file even if the user has not subscribed to the channel and declined the request for permission.
that title made me chuckle on the front page
i've been using siteground for a couple years and they've never failed me, have a couple apps running fine on their servers
What you're looking for is an agent. Sort of like how movie stars or celebrity athletes have people who go out and vet jobs for them, or real estate agents who do all the legwork in selling a house. Generally only the top programmers have agents, it's not very common yet. Since the agent will take a percentage of the profit in any given job. There may be a service out there that will do this for less, but it's doubtful that it's worth it. If you don't know how much your time is worth, how to properly write a contract, or how to deal with clients then it would be better for you to find a gig at a company where the pay is steady and you don't have to deal with the business aspect so much.
Also, you should probably sanitize user inputs like Youtube user name and file name some more..
You need to check the reputation of the person giving you the quote. Demand references and talk to those references about their experiences. Look at sample work, etc. Also, get other quotes (a free way to check if a quote is reasonable). If you get 5 quotes, and any of them are extremely off from the others, they are probably garbage. 
I see. Yes, I misunderstood. Sorry about that. From what I can see in your code, there doesn't seem to be anything wrong. The only thing I can think of is $server_data['cache'] either does not exist, or is an empty string. This would likely produce 0 when you try to convert it to an int. So to fix, I would probably change the code to something like: if (isset ($server_data['cache']) &amp;&amp; ($server_data['cache'] = trim ($server_data['cache'])) != '') { $server_cache_data = explode ("-del-", $server_data['cache']); $players = (isset ($server_cache_data[1]) &amp;&amp; (int)$server_cache_data[1] &gt;= 0) ? (int)$server_cache_data[1] : 0; } else { // Either cache was missing or was an empty string, so handle that situation here. } If that still doesn't work, and I have a suspicion that it won't for some reason, right after the mysql_fetch_array () line do a "var_dump ($server_data);" to see what $server_data actually contains. I'm guessing there's a problem coming from the database. Let us know how it goes and if possible, any output that can help us diagnose the problem.
Find a better editor with auto-complete.
The included "Hello Dolly" plugin?
Indeed, I use [Sphinx](http://sphinxsearch.com/) on a very large, highly trafficked Wordpress site. It powers related posts, auto-complete on search forms, our custom search engine, and "did you mean?" suggestions. I wouldn't imagine using a LIKE query for anything larger than a 100-200 posts blog.
This is the oddest thing I've read all day.
The basic idea is to provide a mechanism to provide subscriber only content. I don't see what's so massively wrong with that. &gt; Requiring it from a user to get something is basically spam. Uhhh no, it's just exchange of currency (subscribership) for goods. I don't see where users are *forced* to subscribe to anything, or subjected to intrusive communication? 
I'm using Laravel on a current project, mainly because I wanted to try it out to see how it worked. It seems pretty good, and authentication is top-notch - I use an external CRM connected with a REST interface - [this one](https://github.com/academe/sugarrestapi) - to hold all the users, and it just plugs in as driver to the auth system with minimal wrapping, and works flawlessly, and best of all, *easily*. Coming at Laravel from fresh, I find the documentation is thorough in providing details of how all the parts work, but does lack a bit in recommending how those parts are put together, i.e. some good structural approaches. That may be on purpose, giving you a big box of tools and the freedom to use them to build your application in any number of a dozen different ways. That is just something to be aware of - you really need to know how you want to build your application before embarking on Laravel, because it will not guide you. For auth, take a look at how the routing works, in particular the filters. Once you master that, it takes a lot of the auth functionality, auth checking etc out of your controllers and into the routing. Your controllers don't need to check, "Is the user logged in? What it they are not?", because the routing makes sure the user can only get to the relevant controller if they have the correct auth status in the first place. So - stick with it. Learning a framework can feel like a long, steep road, but once you "get it", development can be extremely rapid, without compromising on security and flexibility.
In this case, 'data' is just $data in the view. These are equivalent in blade: &lt;?php echo $data; ?&gt; and {{ $data }} If you want to HTML escape $data, then use: {{{ $data }}} This is assuming $data is a string, which I am guessing is not (when is "data" ever a single string?). Just access data's properties or elements like you would in any PHP script.
It's not really a shock to me that people around here have never heard of it, [but it does exist](http://www.businessweek.com/articles/2013-04-10/silicon-valley-goes-hollywood-top-coders-can-now-get-agents). I expected a wave of ignorance regarding it. Most PHP freelancers I've met don't even know how to write a contract, never mind figure out how to represent themselves. There are places where all they do is vet freelance jobs, negotiate contracts, and assign them to programmers from a pool of highly trained professionals. Something most people here really aren't.
Just shop around, get a few other quotes.
I'm sorry but I don't see the advantage of adding another layer of complexity. I mean PHP has deficiencies but nothing so drastic that you need a pre-processor. The only reasons I can understand JS pre-processor is because coming from classical to prototypical inheritance is difficult and ECMA5 is missing native module definitions.
get more than one quote, also a website usually requires more than one person to make (at least if it is professionals) which is why the price often is higher than expected, we even charge around 1.000 for building webpages based on wordpress, its just not worth going lower than this usually cause it requires a lot of communication which sometimes costs more time than the design process for the blog in the end
array_column() ... HELL YES! Also there is a [backport on GitHub](https://github.com/ramsey/array_column) for using it with older PHP versions! OP Cache.... if this is the Zend Optimizer, then meh. Not really adding anything we can't get already. It is just pushing the actual stable release back for no real benefit.
I'm using Vim. Enlighten me please.
Unfortunately php is a really bad tool for doing this. Have you thought about memory usage? Go look at http://www.percona.com/doc/percona-toolkit/2.2/pt-table-sync.html instead.
Congratulations on waking up from your coma.
&gt; Why do PHP frameworks such as Zend and CakePHP require using CMD to generate "boilerplate code" when CodeIgniter and Laravel doesn't? Is this hard to learn because I just gave up as it seemed tedious? Beause boilerplate is what is it ,boilerplate. You could code it by hand everytime you create a new project , but that would be silly.
&gt; Is Wordpress still a thing? It's bigger than ever.
Creating an application using php, and creating a website, are concepts at very different levels. You should separate the two. I can "create a website" using wordpress, for example. That may happen to use php, but the fact that is does use PHP is often largely irrelevant. But then, you may have your own reasons for putting your site on a PHP platform. We really don't know enough to come to any conclusions. So, my main thought us that you may be asking the wrong question to start with, and there will be plenty of people who will take advantage of that. Edit: typos (posted on my phone earlier, and editing is more than a slight pain)
No, if some are way off the others, you ask *why*, and don't stop asking until you understand why. 
PM me if you would like me to give the quote a once over. Edit: I'm not going to be quoting for this work, as I am already snowed under with projects and cannot take more on. If I can lend twenty minutes of my time to a fellow redditer, then I am happy to do so. Take my advice and opinion, or leave it, keep it to yourself or broadcast it, agree with it or rip it apart. I am easy, whatever :-) 
&gt; There aren't really any good pure PHP solutions for doing searches like this. PHP is the wrong tool for this kind of job. I absolutely agree with this, but in many scenarios I find myself limited with only PHP, some cases worse than others.
Look to where Java is going and PHP usually follows. 
Often these solutions don't have to reside on the same server PHP is on. These search technologies don't have to be limited to single projects. You can use it for several at the same time if you want. You can't do anything about crap hosting, except change your hosting. If you design something with the wrong tools, you can't really complain when it doesn't work very well.
Thank you 
One thing you need to keep in mind also, is the ability of the programmer. You can have the same project done by two different people, and one will be worth a lot more because it is built better or may be more user friendly or something like that.
I don't think your comment is particularly odd, but I think you missed that OP is a client looking to buy a website, not a programmer.
Google "how much should my website cost" and you'll find articles that answer your question.
... I heard you like preprocessin' so I got a preprocessor for your preprocessor so you can preprocess while you preprocess!
httpd -S does that
Agree 100%, the one that is extremely off might just be the shop that takes the time to do things right that wont lie to you and cut every corner to do a half assed job for a payday.
Web design companies I've worked for in the past have charged between 50k to 100k for creative and design implementation into WordPress. 
You should probably handle URL typos slightly better than an unhelpful 404 page: http://www.sub4zip.com/file/Xsa/ Also by uploading a small number of files, I think if you actually want to stop people just searching the list, you need to randomize the upload link slightly better. I uploaded: http://www.sub4zip.com/file/Xsb/ then: http://www.sub4zip.com/file/Ysb/ so I tried: http://www.sub4zip.com/file/Wsb/ and you should disable error output on production sites.
I'm a senior dev at a small but relatively busy web agency. You'll probably spend 5-10k on a designed + developed + supported website with a frontpage and interior design only with under 20-30 pages. If you have a lot of content or data add another 10k. If you need a lot of custom functionality add another 10k. If you need ecommerce solutions add 10k -50k depending on how many products or custom integrations or if you need to import existing customers or orders.
&gt; memory usage? What memory? The script itself will use about 100-200kB, and it all will be freed after the execution. pS. Not saying I like the idea.
Web developper for 15 years here, I would say $1,000 is a very ~~good~~ low price, I do not know anyone experienced in my area (Canada) that would tackle a full project for that price. I mean, at $25 / hour (totally underpaid rate) this is 40 hours to churn up your website. Take off 10 hours of administration, paperwork, client meetings etc .. you are left with 30 hours of developpment time. This is enough for a quickly slapped up web-site, when all goes well. I have managed this in the past but never had results I was proud of. So the figure is very lowball, depending on the standards you are aiming for. However, many students or young freelancers are willing to lowball their quotes to build up their career. Low paying work is better than no work. And some of those kids actually put out great work. Check the portfolio (always). If you have a good feeling andthe communication is good I would say go for it. You can always consider giving a bonus if your expectations are reached, like I said $1,000 for a website is very cheap. The agencies I have dealt with in past years will do not consider projects under 100k, and I personnaly do not take clients on the side for projects under 5k, most are closer to 10k+. Well built projects require a minimal number of hours, and programmers need to eat drink and pay the bills like everyone else.
well i suppose most of that part is the design then, if you create a logo CD/CI and such then of course this is a lot (though 50k seems a lot over the top nowadays), but just a basic wordpress blog with a simple design is done in a day
50k isn't an uncommon bid for dealing with very large companies. It's a lot of hassle.
but 50k sound more like a team of guys working for 1 or 2 months, not like a single person working on a website - and as we are talking about a single person here 50k would be huge.
Randomised base64 uuids should work well. Heck, six characters from [uppercase+lowercase+numbers] gives you 10^10 possible files before you start having trouble generating uids...
As a web developer also for 15 years (coincidence), also in Canada, and I could still make a website for $1k. It all depends on how ready the client is to make the website. If they know what they want, have their content ready, sometimes in 2 days I can get the website done with a average/good quality, using a CMS or my own framework. Of course nothing to complex. I usually call those "business card" websites, with just a simple "Home - About Us - Products/Services - Contact.". For companies that don't have interest on a strong on-line presence, and just want to be there, it's the best and non expensive solution. Time is what makes the price. In many cases the development time is very short, and what takes time and effort is most of the time having to deal with insecure clients that don't know what they want, what they need and don't accept your opinion and advice because for them you are doing it for the money and not for what is best for them. Usually they have no ideas and take everyone's else ideas but never the ideas of the professional that they should trust that will do the best under the quoted price. These type of clients should be avoided, as it will always be difficult to finish any project for them. Clients that have their ideas and aims well defined, or are fully open and trust your work, always brings good results for both sides even when the budgets are low. That's why I use to say that most of the time what's going to define your gains in a project and its success, is not the price or the amount of work, but the personalities that you are dealing with. There's the opinion that students or amateurs can do jobs for cheaper price but that is not completely truth. Experience helps developers to take quicker decisions and work much faster. Any developer with more then 5 years of experience can do in 1/4 of the time and with higher quality and charge the same as a student. But of course, experience developers prefer to work in 1 project for $5k, instead of 5 projects for $1k 
50k will cover about 8 weeks of a high end consultant, isn't that outlandish. 
Yes, I can readily admit I was generalising. I can also pop out a site for 1k, heck I have done some for a few hundred dollars for special cases, like close friend &amp; family with limited ressources trying to start up a business. There are exceptions, like yourself. This is why at the end of the comment I told him it could be a sensible choice. 
I have two obvious benefits off the top of my head: 1. Speeding up PHP for everybody who uses the core version without teaching them about an optional extension. 2. We won't see any more "Oh but this core feature will be tricky to integrate with APC and the only person knows how to do that is Rasmus" bullshit, because APC is going away as an op cache. It's a shame to see the stable get pushed back, but im fine with PHP 5.5 becoming considerably quicker out of the box.
This is true.. and that is helpful info for installing it. Again, though I guess I've mispoken as to what the issues I ran into were, which was setting up git on your server so you could push changes from your local machine to the server. A current post on /r/webdev actually linked to this explanation of how to do it: http://caiustheory.com/automatically-deploying-website-from-remote-git-repository#comment-119182
Definitely open to something other than symfony (I mentioned I was thinking of making the API a Slim app in the original post). It's what we build most of our clients' sites with, and what we'll build the frontend site with, but the API is a separate application, and I thought something else might be better suited. I hadn't considered Phalcon, and I don't know why I didn't. Thanks for the reminder, I'll give it another look! I'll check out Klein and Flourish too. You're also right that just because we aren't using Zend or Symfony, doesn't mean we can't ape their structure and conventions. 
I understood your point... But anyway, we shouldn't lower our rates just because we can work well and fast, otherwise we may end up killing ourselves working and people will just under valuate our work because of the price. We should know where to put a line and refuse to work below that, except on some specific cases like you just said, like friends, family...
Okay, Flourish is out of the question. No DI or namespaces, slathered with static method calls, not stable, and worst of all, coded with tabs not spaces ;) [Klein 2](https://github.com/chriso/klein.php) on the other hand is cute as buttons. Odd that it calls itself just a router when in some ways it's more featureful than Slim. However it lacks Slim and Silex's middleware concept, which I'm quite keen on, and it's only about 2 weeks old. Phalcon looks very good (aside from its Model layer, but that's optional). I'm going to have to kick its tires a bit more. Thanks again for the tip.
You're reading that wrong. It says that the buyer has the rights to study, change and distribute the software for free to anyone and for any purpose. So still, the owner can distribute this commercially. [Source](http://opensource.org/osd.html)
OP here; this is my largest PHP project to date. Would love some feedback on the way this project is structured, especially around calls to the database and efficiency. 1. 'Spoiler' post created on database 2. Get the post's insert_id from database 3. Send a tweet with the text of "[user's input] + http://spoil.rs/[insert_id]" 4. Upon success, grab the tweet's timestamp and its id. 5. Save these to the database (modifying the row which was created in Step 1) 6. Redirect user to http://spoil.rs/[insert_id] I've noticed a few times that Steps 4-5 will fail. The tweet is still sent, and the link inside the tweet still works. But in my database, there is a value of '0' for the tweet's id and a null value for the timestamp. I think this is because Twitter sometimes takes a few seconds to post the tweet? But I can't be sure. Being somewhat new to PHP, I implemented a check to see if the variables exist yet. If they don't, I sleep for a few seconds and try again. Is this the best way to do this? Or is there another method I should be using? $parameters = array('status' =&gt; stripslashes($enteredTweet)); $status = $connection-&gt;post('statuses/update', $parameters); $tweetid = $status-&gt;id_str; $tweettime = $status-&gt;created_at; if (($tweetid == '0') || ($tweetime == '')) { sleep(5); $tweetid = $status-&gt;id_str; $tweettime = $status-&gt;created_at; }
you can easily develop a basic api in php or use a framework like slim. oauth 2.0 is a nice way to go too, because is easy to call and ingest, but it increases the number of calls I'd you're going to use it as a session key system. there are two ways to go with oauth 2.0, like Facebook you could forward to an auth page, redirect to another with a token, then allow for someone to use the token to get all the information they need in one or two simple calls. or you can make the person use the token for all calls and implement a refresh token system. this would mean that for every call against your api the api would have to validate the token. if any other apis were involved then they would also have to validate the token. all of these calls take time, and especially for mobile, you want to minimize the total number of api calls from the client.
I guess the way to think of it though is that ports are an unsigned 8 bit integer. But a name is several characters. Therefore ports should be easier to remember. Edit: Sorry it is 16bit. So if you want it to be easier with virtualhosts you are permitted one or two letters.
If you're already using Symfony why not Silex? Should assist somewhat with code sharing between API and the front-end. 
First off it's a 16 bit unsigned int (0-65535), not 8 bit (0-255). Also I don't see how something like: wordpress.localhost is harder to remember than something like localhost:8089 especially when you could have many of ports to pick from.
If I may ask, which ERP?
that can't be good. 
This is cross-posted with the GIS subreddit. I just released this geocoder today. It's written PHP and uses the Geonames geocoding service. It tries to cache geocode results in an SQLite database. It's stupidly simple, with a single optional parameter and a single public method. The parameter is an optional path to specify a location for an SQLite database. The method is called "geocode" and takes an array of place names. It returns an array of GeoJSON Features which you can create FeatureClasses with, or use however you want. It's a piece of larger project I'm working on, but seemed semi-useful on its own. Comments, pull-requests and suggestions are all welcome! 
some redditor wrote this a week ago: http://coreymaynard.com/blog/creating-a-restful-api-with-php/
http://www.php.net/manual/en/language.references.whatdo.php
I think the genesis of flourish was pre namespaces. Back when it first came out micro frameworks weren't really available in PHP. I haven't had any problems with the code but I also only used portions of it that I needed. I see someone referred you to fat free. I enjoy the concept of it but I found the DSL more constraining than I was comfortable with and Phalcon is accomplishing the same things. AND it does it with an ORM that doesn't make you want to hurt small animals.
Thanks, I'll check it out!
Good points, thanks! I definitely want to avoid doing auth on every request. I'd assumed that refresh tokens were for maintaining long running sessions (days, not minutes) and that a regular access token would be good for multiple requests. I've clearly got some more reading to do. :)
Silex isn't out of the question (I've used it several times before and I like that it's symfony-esque), but it's an order of magnitude heavier than Slim (and about half the speed on a hello world - possibly a difference that'll diminish once both have to do some heavy lifting), and if I code properly with plain classes as services, I'm hoping that I should be able to get the same code reuse benefit with Slim + a DI container. Food for thought though, thanks.
I know it'd make it less stupid simple, but I'd recommend abstracting the cache out into its own class so that it reduces the responsibilities of your geocoder class and makes it easy to swap in an alternative like redis or memcached. Otherwise my only other notable concern is the blind http request via `file_get_contents`. But then the alternative would be introducing another dependency like Guzzle, and then you end up looking so much like [Geocoder PHP](http://geocoder-php.org/) that you may as well use that instead :)
Please don't take offense but I'm going to put on my pedant hat: &gt; possibly a difference that'll diminish once both have to do some heavy lifting This is pretty much almost always going to be the case with most every comparison you could make. However, in this case given how stripped down both are, if your application gets to the point that the difference between Slim and Silex is a big enough deal breaker, it's time to move to C and eke out native performance. Or, more bluntly, don't use hello world benchmarks in your decision making process, they tell you nothing. Make the decision based on what feels better stylistically to you and what you feel will be more maintainable in the long run. In the end your time spent programming is far more expensive than compute time in the AWS farm (and I don't mean hippie feel good expensive, I'm talking real $$ in lost potential). Either way Slim is good sauce and you really won't go wrong with it. 
Warning: GPL v3.
Any object that implements Symfony2's HttpKernelInterface is such an application. Frameworks that do this out of the box include: Symfony2, Silex, Drupal8, Laravel4. But you don't *have* to use any of those frameworks to implement said interface. You can just implement it yourself in your own code. But it does mean that you need to use the HttpFoundation Request and Response objects.
To elaborate, arrays are copied by default when you use them in an assignment. To refer to the array to actually change it later, use the &amp; operator to get a reference instead. It's absolutely *expected* behavior! 
I would recommend Laravel 4. It has fantastic "resource controllers" which combined with the Eloquent ORM is unmatched.
Refresh tokens are intended for simply obtaining a new access token when your original one become stale. This makes sense for times when a person closes their browser and comes back hours later, or for services like Netflix where a show can be playing for an extended period of time without API interaction. I was on my phone earlier so it was difficult to type out, but the logical flow for the intended purpose of OAuth 2.0 is a guest attempts to log into a site using a 3rd party such as Facebook. The site redirects to Facebook's login page (or popup or iframe). The guest enters their credentials and the Facebook page directs the parent window to the same URL by with a access token query string parameter (or hash tag). The access token is then used by Javascript or server-side code to obtain the user information, typically via the Graph API or JSONP requests (good for hours). The originating website now has a valid 3rd-party user who has authenticated, it has the profile information, and it has the corresponding login information to match with its own user database. Now the website can refresh to the logged-in state and use its own session management system. Facebook calls are no longer needed from this point on. If the user closes their browser then the PHP session token is lost but the access token persists. The website can retrieve the Facebook logged-in state and automatically log in the guest. There is a different variation on this where the website uses an in-house API that is OAuth 2.0 gated. The website would request an OAuth token when the guest logs in. Once the token has been obtained it would use that token for every request against the API. This can be getting a profile, checking posts, getting comments, etc. Some companies decide to create a new API for every resource, leading to 10 or more calls just to log in a guest and get a complete profile. Each of these APIs would individually need to validate the access token and return a proper error response when it went bad (sometimes set for 15 minutes). The consuming client system would then have to identify a stale token response and perform an automatic refresh, then attempt the entire request again. This puts the logic of assembling the guest information and error fallbacks on the client-facing layers or the middle-tier PHP request controllers.
Considerably still only as an option... Default would be worth it. As long as it is still an option to turn on there is no "quicker out of the box".
No offence taken, I'm kind of ashamed to have fallen into the pointless benchmark trap that I've warned others away from before. :)
Thank you for the advice, though I tried to port forward ( I guess wrongly) and it doesn't work, on what port on guest should I use? I tried: config.vm.network :forwarded_port, guest: 3306, host: 3306 
Alright, that helps to clear things up, thanks!
I haven't used your script, however I think it's an absolutely brilliant idea, good job for completing it. 
I changed `thevariables.score = scoreText.text;` to ` thevariables.score = String(score);` and the score works but the player name now doesn't work. Doing the `var_dump` gives me: Notice: Undefined index: playername in /submitscore.php on line 4 array(1) { ["score"]=&gt; string(3) "375" } Name: Score: 375 Line 4 is `$playername = $_GET['playername'];`
Because you're never sending the player name. 
Check out some frameworks documentations, or better, make one! Check out Phptherightway, try to develop some simple idea/site on your localhost (blog, note manager, whatever). Or you can check some publications about PHP. If you are interested in web technologies, dive into HTML, CSS, JS et cetera. Anyway, just a question about this course, was it object-oriented, did you consider it good?
If you want both the score and the name, you need to do it all in one pass, it looks like you're doing it in two? Have you tried something like: { this.addChild(scoreAdded); scoreAdded.x = 165; scoreAdded.y = 85; var url:URLRequest = new URLRequest("./submitscore.php"); var thevariables:URLVariables = new URLVariables(); url.method = "GET"; thevariables.score = scoreText.text; thevariables.name = nameText.text; url.data = thevariables; navigateToURL(url,"_self"); } &lt;?php $scorefromflash = $_GET['score']; $namefromflash = $_GET['name']; echo ("Score: ".$scorefromflash . " - Name: " . $namefromflash); ?&gt;
That would be why, I was trying to do it in two passes. Thanks :)
No problem, good luck :).
Yeah I usually go there quote often for the Python stuff when I've not touched Python for a while. I do enjoy it because I learn best by doing, so when they give you examples, then tell you to try it for yourself it's pretty exhilarating. The point system is pretty good and it counts the amount of consecutive days you've visited so it gives you more of an incentive to come back and do some more. However, it has a long way to go but has great potential. 
Whatever you do, MAKE something. You can have all the theory in the world, that does not mean anything if you can't put it to use. Learn by doing is my motto.
As I said in my post, I am making something. I work for Flexera Software and I'm currently supporting InstallShield, AdminStudio and InstallAnywhere. The script I've made is to help me with a lot of the frequent tasks I have to do such as somebody looking to return a license, or request a maintenance fulfillment; so my script does a lot of my email responses for me. We also have a reporting service, when I enter a customer's serial number, it will show me how many machines it's on and show us if it's out of compliance before I allow them to reactivate. The report is extremely confusing so my next addition to the script will be to iterate through the report and show me specifically what machine, if any, the serial is currently on. I am coding, I just want to know how to progress so I'm moving forward rather than doing the same thing over and over.
I'm in the process of doing the same with Slim. How many clients will be talking to the API? Mine is only used internally so I'm simply passing a key with each request and enforcing SSL.
Well since I plan to build the site on top of it, potentially quite a few: at least one client per concurrent request, give or take caching of shared content.
Google isn't far off, as there are a lot of books out there that can help increase your understanding light years at a time. As you already know, applying what you know is more important though. However there are some lessons that require a bigger project than a help script at work. Build yourself a framework. Start small, with, say, a blog. Then refactor the code until you're happy (or a code review site can't offer anymore suggestions), and start adding onto it: Forums, Todo list, Private Messages, Galleries, plugins, themes, everything. This way you'll learn the importance of modularization, security, and data safety, among other things. This way, you will learn how to approach big problems by breaking them down into smaller pieces, requirements that say 'I don't need a fancy ORM until x feature becomes needed' or 'maybe this validation script isn't as strict with email addresses as I need it to be now.' You're on the right track and I wish you well! Remember, above all else, have fun with what you do.
I think as a blog it is fine. Unfortunately, as a CMS for an actual website, I feel like it's trying to fit a square peg into a round hole. 
The sad truth is that you now know more than some open source authors. Find a project you like and chip in! :)
you should add SSL support(with a randomly generated self signed cert) some setups can't just turn off SSL
After learning the basics, it's generally coding. You can do a bit of freelancing in your free time or build websites for your friends for small fee. Otherwise, here are few ideas which will help you learn more: 1. Make a scraper using curl and parse some data (using DOM methods). Additionally, you can also use regular expressions to parse the HTML ([although it is highly not recommended](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags), but it'll help you learn regex quickly). 2. Use the data you scraped above and use imagemagick and gd to make some nice graphs. 3. Learn how to use AJAX (this is not really PHP, but unless you learn frontend languages, PHP is not that fun too). 4. Learn best security practices. Learn about XSS, SQL injection, CSRF. Learn how they work and how to avoid them. If you want, you can go into lot of other attacks, but these are the most common ones. 5. Learn how to use databases with PHP. Learn atleast one Relational database (MySQL is pretty easy and quick to learn), and one NoSQL (MongoDB?). 6. Learn sessions and cookies by making a basic user registration and login system. You can throw in a forgot password feature too, if you want. 7. Use Twitter api to create a basic twitter client. It'll help you learn oAuth too. That's all. I'm out of ideas. If I remember more, I'll update.
I'm not advocating scraping HTML. I recommended it because, it's a good way to learn some important concepts (DOM, Regex, curl/http, why-not-to-use-regex-to-parse-HTML). Lastly, it'll also teach him why it's a bad idea to scrape HTML. Learning by doing is the best type of learning.
I put this together in an hour or two the other day to monitor the status of my VPS at FlipHost. It's on GitHub: https://github.com/tlongren/vps-status Example can be seen here (this is hosted on Heroku): http://status.longren.org/
Except you are, the only thing you seem to speak out against is using regex to do it. He'll learn more by using well defined structures than he will slogging his way through someone's markup, especially since that can change without notice making it difficult to understand what happened if it suddenly breaks. You can use all these methods on something more predictable, and still gain valuable experience.
I think my issue is that some of them, particularly the ones written by agencies, don't really stand out. They list too many buzz words that I see as being irrelevant. Of course, there is a need for some of them to ensure the right people are applying but some adverts seem to list every framework and cms under the sun as if it is a requirement for the job (maybe they are in it for the keywords). I really just wondered if anyone had had greater success with attracting applicants with a certain style of advert. 
How hidden does it need to be? I'd go for a session variable.
If the project is strictly programming (ie. it does not include purchase of licenses or other expenses) then the developer must be able to provide a detailed quote with a list of tasks and the number of hours required for each of them. Simply ask for a breakdown of that quote and post it here, we'll be able to tell if it's legit or made up.
To be honest I hate it when job listings talk about "PHP ninjas" and "dynamic and competitive environment". Just list the skills you need.
Can you send them to the page that processes the hidden variable first, and then have that page redirect them to the other page. In other words do it in sequence rather than simultaneously.
I assume you're asking about &lt;input type="hidden" /&gt; ?
we need the information to exist after the session has ended. how could we store the info w/o having to use a database?
Thanks
I don't understand. What is the usecase exactly? Persistent, hidden secrets are often stored in the *database*. That's not rocket science to set up. As a last resort you could try encrypted decryptable cookies. But no guarantee that cookies aren't wiped. Then you're back at square one: a database.
** we are trying to pass the string to "newuser.php" while directing the user to "pg8.php" &lt;form method="GET" action="pg8.php"&gt; &lt;input name="input1" type="hidden" &lt;?php echo "value=$i1" ?&gt; &gt; &lt;input name="submit1" type="hidden" &lt;?php echo "value=$fr"?&gt; &gt; &lt;input name="submit2" type="hidden" &lt;?php echo "value=$tl"?&gt; &gt; &lt;input name="submit3" type="hidden" &lt;?php echo "value=$fc"?&gt; &gt; &lt;input name="submit4" type="hidden" &lt;?php echo "value=$ct"?&gt; &gt; &lt;input type="submit" name="submituser" value="continue"&gt; &lt;/form&gt; &lt;form method="GET" action="newuser.php"&gt; &lt;?php $string="$string.{$i1}.{$fr}.{$tl}.{$fc}.{$ct}";?&gt; &lt;input type="hidden" name="newuser" value=&lt;?php echo "$string" ?&gt; &gt; &lt;/form&gt; 
You can't post two forms to two different pages in the same request. 
List the positives in your work environment, what makes you want to go there every day (apart from the money).
Check out using [Zabbix](http://www.zabbix.com). It can give you a bit more detail and email alerts.
Looks cool. Thanks for the info.
I'm on a high to be honest, and when I'm out and about doing other things, coding is all I can think about. I will admit that I have used PHP before, and I've used it with MySQL, however I never got as far as I am now. And I've also bounced from language to language for the past 10 years with 6 months gap in between. I don't know why I begin learning one, then quit. So far I've stuck with PHP again, and as I said I'm really exhilarating, I feel like it's a rush and I'm quite pathetic really because I start thinking up algorithms for real life tasks. $walking = true; while($walking == true)... lol
Stop this immediately! Multi-step forms need to be implemented with session variables. Hidden inputs like these = madness! 
How is fliphost? Their prices are really competitive.
I've been really, really happy with them. Alex, who I assume is the owner, is quick to respond to support requests. And basically everything in the Linode Library can be applied to FlipHost.
The next time I go to a dev con I'm wearing an "I like fat models" shirt.
Looking for a PHP Warrior Pirate Master to bring excitement to a fiery and exciting startup! Requirements: 10+ years HTML5 and PHP 5.3.
An mssql middleware client called Response. Colinear (the producer) had been producing it since the DOS days. Regardless on the age of the client itself, the database is normalized very well and performs just great. Regardless of the client performance ;)
The three biggest motivators for me to apply for a job (in order of priority): 1. My match to the description. A lot of people will shy away from applying if they see a technology that they've never heard of before. I find myself most often applying to jobs with a "nice-to-have" section. 2. The wording of the description. If there are too many "cool and hip" words, I might feel right at home since I'm in my 20s, but I also think that it will become a dent in my salary. 3. A chance to prove myself. It takes a lot of time for me to send out my resumes, so I don't really want them all to be lost in a sea of other job applications. If the post asks for a github or stackoverflow account (typically as a plus), I'm definitely applying. However, I would advise to hold coding challenges until after you have an applicant.
I've read the title and all your comments here and I don't get what you're trying to achieve. Whatever it is, something tells me you're totally overthinking it.
If the APP is purely consumptive, Laravel is a terrible choice. You should definitely consider using it for any admin our front end work you want to do, but you want the API as lean as humanly possible. This is just my personal opinion. I'm even against ORM when writing an API. Get as close to metal as the tools you are using allow
Mention you look for a person who prefer Linux over Windows. It usually do the trick ;-). If you provide MAC to your employees mention that as well. 
What is the use-case for this? We might be able to help better if we knew. You're answer for this in the comments of the top comment doesn't help at all.
There are 2 killer features which PHP has been waiting for a long time: * compiling to binary (yes I know about HipHop but it's not a complete solution) * something like Java servler which prevents from executing the same bootstrap code over and over and over again
Thanks.
Formatting please. Impossible to read this is.
Exactly this. Apart from listing the requirements, put a heavy focus on why they should give their time to you. We somewhat do this on our jobs page and team page http://sidigital.co/jobs
Fixed. Cheers.
Get code on github that's your resume, any places hiring just want to see your code. Your resume is an afterthought, just write code and push it.
Just give the job to me. I kick ass and will relocate anywhere in the US and I will take any offer over your city's median wage (or below if it will be going up soon enough after training and whatnot). My personal experience is hopping between freelance projects for the last three years. List all the technologies the job will have to interact with, than divide them up into "we can train for this" and "They really better already know this." Then decide how quick you want them to be able to be ready for a full workload. If you need them yesterday, more of the techs will be required and you will want someone with more experience. If you are expanding and have time to train, then a lesser experienced person will cost you less and will be able to develop their habits with YOUR organization rather than importing some other organizations style.
Thank you for the ideas, you have given me a lot of inspiration and plenty of ideas!
I completely agree and I was exactly the same when I saw PHP appear because I had wanted to get back into it. As I said in a previous post, I think that Codecademy has great potential.
That made me smile, I even quoted it to the wife!
This will not give you duplicates. Doing a select query on a table without a where clause simply returns the entire contents of the table. It's the presence of joins that can introduce duplicate rows. For future reference, if you find you have query that is returning duplicate rows you can the distinct clause. e.g. SELECT DISTINCT * ... Note: [You should be aware potential performance issued when using the DISTINCT clause.](http://dev.mysql.com/doc/refman/5.0/en/distinct-optimization.html)
cookies or in memory using memcached or redis. OR you could just use the database. write to a file maybe? but using the file system is a bit slower, so i dont do that.
I don't think this will give you duplicate rows. What this query will do is fetch *all* the rows into memory/temporary table, sort it randomly and then select the two first rows. Keep in mind that from a performance point of view this query is absolutely terrible. It will always result in a full table scan so query time will scale proportionally with the size of the table, so if you end up getting a lot of data in there the query will eventually time out.
I keep getting syntax errors.. :( http://www.summercup94.site50.net/index.php is the link. What I would like is that all the games are displayed horizontally. So the table should be cut off after the first "FINAL BOX" and then continue to the right. To be honest I actually started looking at the code for the first time this afternoon and this is my first time attempting to make a website. So I am a noob at this :) &lt;?php Require "DATABASE.php"; print "&lt;table id=\"LatestGames\"&gt;&lt;tr&gt;&lt;th colspan = 7&gt;Latest Games&lt;/th&gt;&lt;/tr&gt;"; $result = mysql_query("SELECT gameresultsID, GameID, teamID, OppteamID, GoalsFor, GoalsAgainst, Overtime FROM gameresults WHERE Season = '$Season' AND HomeorAway = 'HOME' GROUP BY GameID ORDER BY gameresultsID DESC LIMIT 20"); $numrows = mysql_num_rows($result); if ($numrows == 0) { print "&lt;tr&gt;&lt;td&gt;&lt;b&gt;** No Scores Available **&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt; "; } else { while ($row = mysql_fetch_array($result,MYSQL_BOTH)) { // Home team Wins, No Overtime if (($row['GoalsFor'] &gt; $row['GoalsAgainst']) &amp;&amp; ($row['Overtime'] == 'N')) { print "&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['OppteamID']}'&gt;&lt;img src='./StandingsLogos/{$row['OppteamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['OppteamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsAgainst']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['teamID']}'&gt;&lt;img src='./StandingsLogos/{$row['teamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['teamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsFor']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;font size = 4&gt; FINAL &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;a href='./BoxScore.php?GameID={$row['GameID']}'&gt;&lt;font size=2&gt;&lt;b&gt;BOX&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"; } // Away team Wins, No Overtime elseif (($row['GoalsAgainst'] &gt; $row['GoalsFor']) &amp;&amp; ($row['Overtime'] == 'N')) { print "&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['OppteamID']}'&gt;&lt;img src='./StandingsLogos/{$row['OppteamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['OppteamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsAgainst']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['teamID']}'&gt;&lt;img src='./StandingsLogos/{$row['teamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['teamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsFor']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;font size = 4&gt; FINAL &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;a href='./BoxScore.php?GameID={$row['GameID']}'&gt;&lt;font size=2&gt;&lt;b&gt;BOX&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"; } // Home team Wins, Overtime elseif (($row['GoalsFor'] &gt; $row['GoalsAgainst']) &amp;&amp; ($row['Overtime'] == 'Y')) { print "&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['OppteamID']}'&gt;&lt;img src='./StandingsLogos/{$row['OppteamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['OppteamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsAgainst']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['teamID']}'&gt;&lt;img src='./StandingsLogos/{$row['teamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['teamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsFor']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;font size = 4&gt; FINAL OT &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;a href='./BoxScore.php?GameID={$row['GameID']}'&gt;&lt;font size=2&gt;&lt;b&gt;BOX&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"; } // Away team Wins, Overtime elseif (($row['GoalsAgainst'] &gt; $row['GoalsFor']) &amp;&amp; ($row['Overtime'] == 'Y')) { print "&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['OppteamID']}'&gt;&lt;img src='./StandingsLogos/{$row['OppteamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['OppteamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsAgainst']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['teamID']}'&gt;&lt;img src='./StandingsLogos/{$row['teamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['teamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsFor']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;font size = 4&gt; FINAL OT &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;a href='./BoxScore.php?GameID={$row['GameID']}'&gt;&lt;font size=2&gt;&lt;b&gt;BOX&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"; } // Tie, Overtime elseif (($row['GoalsFor'] = $row['GoalsAgainst']) &amp;&amp; ($row['Overtime'] == 'Y')) { print "&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['OppteamID']}'&gt;&lt;img src='./StandingsLogos/{$row['OppteamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['OppteamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsAgainst']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['teamID']}'&gt;&lt;img src='./StandingsLogos/{$row['teamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['teamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsFor']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;font size = 4&gt; FINAL OT &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;a href='./BoxScore.php?GameID={$row['GameID']}'&gt;&lt;font size=2&gt;&lt;b&gt;BOX&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"; } // Tie, Overtime (0-0) elseif (($row['GoalsFor'] == 0) &amp;&amp; ($row['GoalsAgainst'] == 0) &amp;&amp; ($row['Overtime'] == 'Y')) { print "&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['OppteamID']}'&gt;&lt;img src='./StandingsLogos/{$row['OppteamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['OppteamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsAgainst']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href='./TeamPage.php?ID={$row['teamID']}'&gt;&lt;img src='./StandingsLogos/{$row['teamID']}$Season.gif' width = 50 height = 25&gt;&lt;/img&gt;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;{$row['teamID']}&lt;/td&gt;&lt;td&gt;{$row['GoalsFor']}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;&lt;font size = 4&gt; FINAL OT &lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;a href='./BoxScore.php?GameID={$row['GameID']}'&gt;&lt;font size=2&gt;&lt;b&gt;BOX&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"; } } } print "&lt;/table&gt;&lt;br/&gt;&lt;br/&gt;"; //--------------End of Final Scores Code---------------------------- ?&gt; &lt;STYLE TYPE="text/css"&gt; &lt;!-- #LatestGames th { font-family: Arial; font-size: 16pt; color:white; font-variant:small-caps; /* IE10 Consumer Preview */ background-image: -ms-radial-gradient(center, circle farthest-corner, #404040 0%, #000000 100%); /* Mozilla Firefox */ background-image: -moz-radial-gradient(center, circle farthest-corner, #404040 0%, #000000 100%); /* Opera */ background-image: -o-radial-gradient(center, circle farthest-corner, #404040 0%, #000000 100%); /* Webkit (Safari/Chrome 10) */ background-image: -webkit-gradient(radial, center center, 0, center center, 506, color-stop(0, #404040), color-stop(1, #000000)); /* Webkit (Chrome 11+) */ background-image: -webkit-radial-gradient(center, circle farthest-corner, #404040 0%, #000000 100%); /* W3C Markup, IE10 Release Preview */ background-image: radial-gradient(circle farthest-corner at center, #404040 0%, #000000 100%); } ---&gt; &lt;/STYLE&gt;
What youre describing is why we use a Model/View/Controller pattern. What happens is, you post your data to the main index.php which initiates the router which selects from a series of different controllers which instantiates the desired model class and renders the view. or you can hack and slash your code in a way that can never be improved or upgraded -- i think most of us learn this lesson the hard way, so dont be discouraged. Let's take your form post for example: &lt;form action="http://example.com/user/register" method="post" &gt; It's posting to user/register, your router takes this and instantiates the user controller, which calls the registerAction() method. this method may instantiate a User object to set and save user parameters. Once the work is done there, the controller can redirect to the desired page route. Maybe a path like this: http://example.com/thankyou/ Which instantiates the router again, the Page controller is loaded by default since it's base path isnt "user" or something, and the PageController opens the Page model which loads up a template and is rendered as you desire. 
Agreed, buzzwords only pull a certain crowd. You won't get the skinny jeans, starbucks drinking, hipster programmer; but you'll end up getting more experienced professionals.
I can think of two ways to do it. Both involve you pointing the form page to pg8.php &lt;?php // this is pg8.php //generate a request to the second page //could use cURL or several other methods file_get_contents('http://domain.com/newuser.php?data=whatever-url-safe-data'); //do stuff ?&gt; Alternatively, you could do this in javascript (assuming you use jQuery): //include this in the form page $('#form').submit(function() { $.ajax({ type: "POST", url: "newuser.php", data: "username="+username; }); }); 
If its a new project, what you're going to want is a developer that's actually interested in the project - not one that wants to just "get paid." They'll love (and want) the pay, but you want them to want the project too. So your description would ideally talk about what you'll be doing, why you're doing it, and what kind of challenges the developer will have to face/work with while working on it. Developers want these few things: * A project they enjoy working on * Money to keep them fed and buy the things they want * A Good challenge or two to keep them sharp, maybe a new technology to start working with if it's not too in-depth
Yeah... did you even *read* the original question? Redirection is not an option and we're operating on pretty much zero knowledge of the case we're attempting to solve. I'm assuming if he wanted to submit the form and then just redirect, that would the *obvious* solution and has already been ruled out. 
Agreed. I was going to say put something about yourself / your company in the ad.
I've been programming for 15 years now. I'm exactly the same way.
do a get/post to your pg8.php get the variable and send it via curl to the other page.
My old company is hiring again. This is their ad campaign. http://i.imgur.com/anccE9N.png They'll be putting up adverts at train stations in the local area. I think it's pretty good.
This is what the OP said in one of the comments, one *to which you replied*: &gt; ** we are trying to pass the string to "newuser.php" while directing the user to "pg8.php" This is, by definition, not possible with redirection. The form needs to land on pg8.php in this puzzle. Whether my solution is good or not (and judging by your tone, I'm guessing there's no acceptable solution but your own), my two solutions both meet the criteria, unsexy though they may be. I'm not responsible for the OP not understanding HTTP or that redirection is possible, but both of these proposed solutions do what the OP asked, which was the point of the post. 
Clever!
&gt;But the opposition is tough, nodejs, ruby, and python 3 all are looking good and the keep coming strong. I think it is more important to understand good design principles and to be able to switch between languages easily as your projects demand.
Github. Go check it out. It's basically a social network for coders.
A talented PHP developer knows about http://www.php.net/manual/en/function.override-function.php
Why not just copy the way Reddit does its ranking? http://amix.dk/blog/post/19588
Just send them the normal resume, when you get an interview they'll ask for code samples. Then you direct them to your github account. 
SELECT DISTINCT `blah` FROM `blah` ORDER BY RAND() LIMIT 2
What errors?
[Jan Kneschke's ORDER BY RAND\(\)](http://jan.kneschke.de/projects/mysql/order-by-rand/) post includes excellent alternatives. TL;DR: get the range of your ID values and pick random integers within that range. Dealing with deleted records is the hard part, but maybe slightly biased randomness is okay for you.
If you have an auto-increment id column with no gaps (e.g. no deleted rows), you can fetch the count of the table, grab two random integers between 0 and count, and fetch those rows. That will give you a near constant time search regardless of table size. If there may be gaps you can just fetch first row with id &gt; your random number. But for a small table in a situation where performance isn't a huge deal, just order by rand.
This isn't a framework exactly, but you can use it to implement the mvc design pattern: http://auraphp.com/ Hope that helps.
&gt;This is, by definition, not possible with redirection. The form needs to land on pg8.php in this puzzle. Yes, it is bloody possible with redirection. You point a form with a hidden input element to newuser.php, do your shit, then output a Location header. It's a simple [Post/Redirect/Get](http://en.wikipedia.org/wiki/Post/Redirect/Get) pattern. &gt;and judging by your tone, I'm guessing there's no acceptable solution but your own Your two solutions just happens to be exceptionally bad. You should never do either of these things. In the former you're executing a server-side request for something which should be requested by the client, and in the latter you're introducing a JavaScript dependency.
I enjoyed using [Aura.Sql](https://github.com/auraphp/Aura.Sql) for my DBAL access. It's not ActiveRecord (which is generally frowned upon anyways) but that general "quick insert" you're looking for is well supported. Combine Aura.Sql with something like [Silex](http://silex.sensiolabs.org/) or [Slim](http://www.slimframework.com/) an you have something super light-weight. There will be more heavy-lifting than with CI. If you want check out a Silex skeleton project I created for one of my projects [here](https://github.com/dcousineau/orlex-standard). It gives you more large-scale framework style controller classes with Silex and has Twig and Forms already set up. To work with Aura.Sql just add it to the composer.json file and initialize it as a service in config/common.php and boom, you're golden. 
Happy to help.
[Silex](http://silex.sensiolabs.org/) would be a good MVC "micro" framework. It's as small (or big) as you want it to be and built on Symfony components. Doctrine's [DBAL](http://www.doctrine-project.org/projects/dbal.html) is worth a look for the database stuff, it provides an [API similar to what you want](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html). Doctrine also has some [already existing](http://silex.sensiolabs.org/doc/providers/doctrine.html) Silex integration if you decide to go that route.
CodeIgniter has a lot overhead? Just wow o_O
I mean compared to a very basic mvc framework that just implements a very basic model/view class. to be fair CI is defintely fast enough (90% of all frameworks are fast enough, the overhead from almost any framework is tiny... even wordpress (obv not a framework)... lots of shitty bloated code... still loads fast). But sometimes its just nicer to have a cleaner code base.
Why is active record frowned upon? I find when generating search results it is much easier to do something like this: if ($_POST['type_of_content']) { $this-&gt;db-&gt;where("type_of_content",$_POST['type_of_content']; } if ($_POST['in_category_id']) { $this-&gt;db-&gt;where("category_id",$_POST['in_category_id']; } than forming the actual sql (which i tend to do with something like this: $sql = "select * from table "; $where_array=array(); if ($_POST['type_of_content']) { $where_array[] = " type_of_content = '$type_of_content'"; //actually escaped/binded to value } if ($_POST['in_category_id']) { $where_array[] = " type_of_content = '$type_of_content'"; //actually escaped/binded to value } if (count($where_array) &gt; 0) { $sql .= " where " . implode(" and ",$where_array); } in this example it is quite straight forward... but if it contains lots of ORs etc it is much easier with CI's active record 
Active Record is quite common in frameworks now. You should take a look at ORM. Laravel does a good job and I feel that it's not too heavy!
Yii isn't bad. Does the basics.
There's [Wave Framework](http://www.waveframework.com/) that is slightly more than just bare bones, but it is hierarchical-MVC and is entirely API-centric and can be used to build both websites and infosystems or backends for mobile web services.
For the second he's have to and id not the first 
So what you're describing in the first example is a **query builder** not Active Record. Active Record would look like this: &lt;?php $post = new Post($conn); $post-&gt;setCategory($category); $post-&gt;save(); Active Record describes a OOP pattern in which an object represents a single record in a given database table and contains all the logic on how to persist itself (note the save method). This is generally frowned upon as it's great on paper but becomes very messy and unwieldy in applications more complex than a simple blog example. The generally preferred approach these days is an ORM (object-relational mapper) which would look more like: &lt;?php $post = new Post(); $post-&gt;setCategory($category); $entityManager-&gt;persist($post); $entityManager-&gt;flush(); However that's neither here nor there. Aura.Sql is going to give you a good query builder and if you *reaaaly* want to map your DB results to objects, you can use [Aura.Marshal](https://github.com/auraphp/Aura.Marshal) which can simplify the task of mapping raw DB result arrays to objects, **or** you can use [Doctrine](http://www.doctrine-project.org/) which is a much more heavy-weight, fully featured ORM that may or may not be to your liking.
Nice to know you work with Aura.Sql @dcousineau . Aura.Sql do have a unit of work implementation. You can see the code here https://github.com/auraphp/Aura.Sql/blob/develop/src/Aura/Sql/UnitOfWork.php But I agree it is still not documented.
AR tends to be inherently very untestable.
I would take your problem in a different way than yours : Before going towards more advanced PHP stuff, are you sure you have a flawless knowledge of the basics your websites run on ? A few questions you should ask yourself : * Do you know exactly what an HTTP request is ? What about the various cache mechanisms ? * Do you know how your web server works exactly ? And how it interacts with PHP ? What do you know about content negotiation ? * Do you know how a database works ? What about indexing ? These are 3 big topics you can most likely improve your knowledge on. And the beauty of it, is when you know these topics well enough, you will naturally come back to your code and notice various things could be done in a more standard/clever/efficient/elegant way. I'm sure Lao Tseu had a sentence about looking down at the roots to learn about the tree top, but I couldn't find it. So I'll just add I'm happy I took this as a next step, when I started thinking I had mastered web development :)
Good to see they fixed the single quote styling that made it look like the code would error out on line 8! http://f.cl.ly/items/2K3W0b1R3X0T1L0D2m04/image.jpg 
lol. Guess you're somewhere along the south. Nice pic.
Our designer took the pic. It's a good campaign (despite my snarky remark!) https://twitter.com/tomomalleycat/status/338640744401227777
If something could be buggy like that out of the gate though and it is already pretty late in the cycle, why even include it? You *should* push it off to the next major release. That would give much more test-time to find and fix bugs. It is pretty stupid imho how late this is coming in and it is just being thrown in like an afterthought for such a major feature.
Try http://phpixie.com/ It contains a basic feature set, a very easy to use ORM and keeps out of your way
I wouldn't go as far as your last sentence, especially in this context (building an API with PHP is already far from metal). But nonetheless I agree on the fact that an ORM is a little too much for an API. I would advise, just like [Grammernatsi in his post](http://www.reddit.com/r/PHP/comments/1f1og4/best_practicetech_for_building_an_api/ca67x7z), the use of Laravel, but would probably choose raw DB commands in my models. And make a big effort in thinking through an efficient data cacheing policy.
I think I get it. But I can't see a single real world situation where this could be handy. Or maybe then I don't get it ?
I've not used it for that long but [Silverstripe](http://www.silverstripe.org/) is pretty nice.
Nice project. I don't see the point of it though. In my test suite I just test up to the layer that interacts with curl. From that point, I trust that curl works the way it's documented. This seems like over-testing? 
Isn't this what CodeCeption is for?
You could build your own, test and try components and find out what you like most. Just add a composer.json in a empty folder and get on packagist and start searching. Obviously you need a router (maybe the symfony router?) and maybe a orm (maybe laravels eloquent?) add only the stuff you need, and you will ens up with a framework just as big as you need.
Kiss MVC.
fat free plus redbeans
Use the same brief from different reputable agencies! Most agencies will quote you FOC. Look for agencies that have experience in your specific sector, and ideally ensure they're located near you as face-to-face communication is always best. Above all else ensure you have a contract in place before the chosen party begins any work! Make sure the contract stipulates you own the website domain name, get your own hosting package, and ensure the agency you choose provides a warranty for the first couple of years ensuring its seamless operation. They should also ensure the site is compatible with any legislation applicable in your region as data protection laws are getting ever tighter. Final point: If the website is going to have bespoke functionality, ensure your Intellectual Property clauses are properly constructed.
This one is the best: http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html it's by the author of PHP, and is very simple and straightforward.
&gt;If there may be gaps you can just fetch first row with id &gt; your random number. This suggestion would disproportionately favor records with a lot of deleted records below it.
ORM is an abstract name for an implementation of converting database to OOP data, one of the examples would be the AR pattern. What you're thinking of is DM - Data Mapper.
Some great resources to further your learning: Read up on all the "right" ways to PHP: http://www.phptherightway.com/ Being secure is handy: http://phpsec.org/projects/guide/
I just posted this in a similar thread, but... Learn security: http://phpsec.org/projects/guide/ Learn the "right way" to PHP http://www.phptherightway.com
Very true, I stand corrected
Why don't you want to use a database? They exist to store persistent data, which is exactly what you're trying to do. 
It's billed as an integration testing tool, which seems a bit off the mark to me. If you are integrating with a remote service and you have a client, it's much easier to just jail/stub all of the calls you aren't testing directly. If you're unit testing with someone else's components, it's easiest to mock and replay. In this case, it feels like the examples revolve around PHP builtins (like file_get_contents()) that sometimes_ have a remote component. In that case, it seems like a useful tool; the only freedom you have in injecting your test double into a built-in function is to point it at a server of your choosing. Short of writing out a file to that remote location before the test and then reading it during the test, this tool seems like a good option. I wouldn't call it over-testing, because but I would appreciate if the author sold it a bit more carefully for the kind of testing it's most useful for.
&gt; You point a form with a hidden input element to newuser.php, do your shit, then output a Location header. It's a simple Post/Redirect/Get[1] pattern. I don't know why he'd ask the question at all if that was an acceptable solution. That's the obvious solution and one that no one writing PHP in production would (should?) ever have to ask. &gt; Your two solutions just happens to be exceptionally bad. Mmm. I bet you're a *joy* in real life. &gt; You should never do either of these things. I wonder if you've ever worked with actual code in real life. I'd doubt it, outside of your own stuff. Using file_get_open() is absolutely a real-world case and operations like that happen in production code ALL THE TIME. Given the original parameters, it still seems like the right solution, because I read that posting to newuser.php and redirecting to pg8.php not being the desired result. If that's legal in this example, it's the obvious solution. Of course, you've decided that's the *only* result. I hope you feel you've helped the OP. But if this is what /r/php is like, it's no wonder it's so slow.
&gt;I don't know why he'd ask the question at all if that was an acceptable solution. That's the obvious solution and one that no one writing PHP in production would (should?) ever have to ask. You're assuming he knows better. I'd wager he doesn't. &gt;I wonder if you've ever worked with actual code in real life. I'd doubt it, outside of your own stuff. I'm in the employ of one of the larger consultancy firms in the Nordic region, I work with actual code in real life every day. &gt; Using file_get_open() is absolutely a real-world case and operations like that happen in production code ALL THE TIME. I'm talking about the way you're using it, not the function itself. Requests which should take place on the client-side should never be executed by the server. &gt;because I read that posting to newuser.php and redirecting to pg8.php not being the desired result. According to? &gt;Of course, you've decided that's the only result. I hope you feel you've helped the OP. But if this is what /r/php is like, it's no wonder it's so slow. Stop being an ass.
Thank you for the article. I must say that I do get your point about chaining, however I am not convinced that the proposed solution is better than the problem.
I wouldn't call cakephp lightweight. 
Instead of having an OAuth plugin for symfony, laravel, ZF, cakephp, code igniter, silex, drupal, joomla, agavi, YOLO and whatever other framework you can come up with, this would allow to implement such cross-cutting HTTP level functionality *once* and have it work with all of them (assuming they implement HttpKernelInterface). In a way that is both re-usable and composable.
Agreed. I avoid any company that uses words like "ninja" or "guru" in their job title/description. It tells me that management is young and inexperienced which should be avoided like the plague.
I'd assume you'd compute some sort of rating value then multiply by an easing function based on the original date of publication. Make the easing function approach zero at infinity, and old articles will drop rankings accordingly. This also means that you only have to compute the presumably heavy rating value (the one based on content analysis or whatever) once then use that figure every time you need to ease the content. You'll need to recompute every time the rating func changes, but meh. Assuming you've got ridiculous amounts of content, you could even save yourself the cost of the batch and compute and cache the final rating (content + easing) on the fly when users search. You'd end up with a partial set of daily/weekly/hourly ratings, but it might be less work overall.
I didn't see anyone else mention this, but namespace your **functions** in addition to your constants. `related_posts`, `title_filter`, etc. could easily break if another plugin or theme is using that function name (/u/droolproof183 already mentioned this about the constant `PLUGIN_DIR`). Best recommendation is wrapping all of your functions in a unique class name (Weeb_Related_Posts) so you don't have to worry about that. At the very least, prefix your function names with `weeb_`. I did just notice that some of your functions in are a class, so you should just convert the rest of them. I'd also highly recommend looking into the Object Cache API and add caching and smart cache deletion. Or you could just save the related posts in the database, but still need caching to retreive them. Whenever a post is saved, you could run your query to find related posts, save them (or cache them if you run the query on page load), and then update your database/cache when the post is updated.
When this was first published, it was an object lesson for many in ... how not to do it. It also explains a lot of what's messed up about PHP, and why. I'm being diplomatic here.
What is DOM parsing exactly? Can you parse data that's on a page? In a report in work, which is in a table, the idea is to check whether a serial number is active on a machine or not. I have a list of MachineIDs (which is something we generate based on CPU, RAM, MacAddr etc), it has dates, whether the serial was deactivated or activated on a machine etc and the list can be miles long for large companies such as Microsoft of IBM. I would like to make my life a little easier by parsing that data to give me some statistics such as 'Activated x times', 'Deactivated x times', 'Currently in use on x machines', 'Currently not in use' and so forth. Is this possible?
DataTables is pretty bloated with tons of stuff you can easily add in yourself with one line of jQuery.
It varies by license, but you're basically correct. I could pay the $45 to get the latest copy of this software then just put it up on Github for anyone to download. Or equally, I could go ahead and sell it for $30 or $100, whatever I like.
Nothing teaches better than doing. Find yourself a project to work on that interests you. Doesn't matter if it's useful to anyone other than yourself. Working on small projects to satisfy my own needs is how I learned probably 90% of what I know. Do you have any hobbies that you could design a website for or apply the knowledge you learned in your books? I'll give you some examples of projects I started for myself that really helped me learn. 1. Bookmark manager. This was a really small one I made because I wanted to save website bookmarks hierarchically and have a title, url, description, and notes associated with them. I learned about jquery-ui's [sortable](http://jqueryui.com/sortable/) interaction and just for fun used sqlite instead of mysql. 2. Cocktail recipe and liquor library site. A friend bought me a cocktail recipe book and I went a little overboard with my home bar. I wanted a website that I could enter cocktail recipes and the types of liquor I had in my bar, and it would show me everything I could make. This one taught me a lot about ajax. 3. Task tracker. I saw something on reddit a while back about [habitrpg](https://habitrpg.com), a website for tracking tasks and "leveling up" based on the tasks you complete. At the time there were a lot of stability issues and I wanted to be able to have different task categories so I could track work milestones and lifestyle goals separately. I decided to learn about twitter's bootstrap framework while recreating my own task management solution. 4. Timetable builder. The university I attended had probably the worst timetable building software ever developed. Students would need to write out their schedules in pencil and have an eraser handy to come up with a schedule that did not have overlapping courses, and it usually took 3-4 hours of frustration. I built a tool for building a timetable. I learned tons on this one. I used ruby and watir to write an automated web scraper to log in under my id, look up each course's info and add it to my db (the university would not give me db access), I learned cron to have it run every day and email errors when the university changed the site so my script did not work, I learned ajax for typeahead completion while students typed in the courses to add for each semester, and I learned how to edit a third-party jquery week calendar to work the way I wanted. Students add their courses for each term, then go to a calendar view that shows a week of their schedule. There are radio buttons to choose between lectures, labs, and tutorials and the calendar updates live after each change. There's also a "generate schedule" button that will attempt to find a conflict-free schedule that students can tweak to their liking afterwards. I threw it online, told a few friends, and now around 600 students use my website to build their schedules each term. I didn't make any money from any of these websites, but I know so much more than I would have without these projects. Try to find some fun projects to do to practice the things you read about while simultaneously accomplishing something useful and fun. You'll encounter interesting problems that will lead you to new things to look up and learn about. And the projects ensure the learning doesn't get dull and stays fun. **Edit:** Spelling in a couple places
I tend to try to come up with why I like to come into work. Highlighting the cool stuff I get to work on. I also highlight things like office location and nearby amenities. I get so many personalityless job postings that apparently are in no business domain, located nowhere, and for some reason need superstars. Stand out by actually explaining who your company is and what you do.
Stop trying to "learn php" and start learning advanced programming techniques. A lot of programming is language agnostic, so open your mind up to books and materials which don't just deal with php. In fact, learning a new language may help to make you a better PHP programmer by exposing you to other communities and ideas.
The way I finally taught myself OO code was pretty much this. One thing to note, I only really started to learn OO after I looked back at all of my first "Objects" and just said "WTF am I doing?". You really gotta just dive in and fuck up. And you WILL fuck it up.
If this were a full on project I'd definitely at least upgrade file_get_contents to use libcurl or something nicer. Making the cache configurable would be a good idea too. The way it is fits the needs of my other project well, so I probably won't change it, but if someone else feels strongly enough about it to submit a pull request, I wouldn't be against it. 
Got a preference for an alternative? I'm happy to at least consider it. 
Yeah, what really helped me was learning a language that needed variable types declared.
This is pretty cool. I use httpbin.org for Requests, but this may be worth a look. Any idea if it has a SOCKS proxy mock?
I didn't figure out OOP until I took an OOP oriented Java class. I don't recommend Java out of spite for them not supporting a few things (such as operator overloading), and since I prefer C++ for those sorts of things, but it is a WONDERFUL language to actually learn.
I use a similar library for Rails apps (VCR/Webmock, which has the advantage of being able to 'record' interactions so you don't have to programatically mock them). My use case is basically one of two things... 1. Apps without a great design, where 3rd party calls aren't easy to isolate. While in an ideal world such code wouldn't exist, when it does it's handy to still be able to mock out the service calls. 2. Full stack integration testing (Cucumber/Behat). Since such things use a headless browser to actually test the app as a user would use it, there is no good way to mock out bits of the app (nor would you really want to) so intercepting http requests and mocking them is handy. 
The idea here is to enable support for overrides - a requirement of some of my customers in order to enable custom functionality while the core code remains the same. It's entirely optional, together with versioned classes. But do give me ideas how to do this differently, I'm always open for such feedback, so thanks :) 
Just write as much as you can. 
my path from pre-oop to feeling like I finally understand why to use OOP principles and when / how to implement them has been: cakephp (briefly) &gt; yii &gt; laravel &gt; Symfony 2 &gt; starting now on ZF2 shortly after getting serious with learning MVC for work reasons, I started by trying to use a framework. I experimented with various - and only really got a basic grasp of why after trying yii properly for a project. I then redid the project in laravel - improving it but it was still a complete shambles really. Then I got the headfirst design patterns book: http://www.amazon.co.uk/Head-First-Design-Patterns-Freeman/dp/0596007124/ref=sr_1_1?ie=UTF8&amp;qid=1369730778&amp;sr=8-1&amp;keywords=headfirst+design+patterns I cannot recommend that enough. It's in java but you should be able to grasp it - the main thing is the way constructors are named after the class name in java threw me at first, but after that, its very similar indeed. Don't pirate that book either - I have tried it in pdf and I bought it in the end, as its not a very easy book to read if you dont have it on paper. From there, I read about half that book and was able to apply what I had learned to how these MVC frameworks were working - and that was without ever touching the MVC chapter. Learn about why / how to abstract, factories, why programming to interfaces is super important, and a ton of other things that will take you from being somewhere around beginner / intermediate, to comfortably intermediate heading towards advanced. 
Have a question regarding API responses. Is it ok to use custom (unassigned) HTTP codes? (API for internal use, won't be public)
I don't have any access to the company's source code/databases as we only get access to it as an end-user. Whatever it is I do, it will need to iterate through the list assigning them to variables and then make the comparisons based on that. The list isn't THAT long, but if it's a small developer using a node-locked license of InstallShield, it merely a few rows long; larger developers such as Ubisoft or Intel, the list can be anything around 100 rows long. It may not seem like much, however when you're trying to see when they activated and deactivated successfully, when they failed to do either, whether it's still in use or whether they're using it out of compliance, it's quite time consuming so it would be great to take the data from an end-user's perspective and throw out some simple statistics to go off.
I would absolutely recommend starting with the [Symfony2 versus Flat PHP](http://symfony.com/doc/2.0/book/from_flat_php_to_symfony2.html) tutorial first. This explains in very easy to follow steps why different parts of an MVC framework are needed. Each step adds a different element, slowly transforming a 'flat' blog example into a structured app. It's a very good read even if you have no interest in Symfony 2 itself, as it explains first principles very elegantly.
It should be noted that his Laravel v3 book had already been published. This is for Laravel v4 (still in beta, getting very close to finishing up the first release of v4).
Thanks for that! I've read a few paragraphs and I'm quite excited to proceed with the rest of it. Based on what I've read so far, I've only ever written flat PHP, and I think the reason for that is because any book I've read, or any basic tutorial I've followed always display the code this way, mixed in with the HTML and display. Come to think of it, the fact that I've only ever coded with flat PHP may be the reason I keep getting overwhelmed and fail with each attempt to start.
The book isn't 100% complete but you get all the new content as it is released. Recommended reading for anyone who spends time on PHP projects. Even if you don't use Laravel you will probably learn something about the framework or PHP in general that you can take away and use in your work. 
One of my learning projects was a sudoku solver. I've been coding for a while, but I came from straight-up functional Perl to PHP, and never quite got the point/hang of OO. I forced myself to write it that way. Finished it, too - somewhat ironically while waiting for other students to finish lab work in a Python class.
This comment rather puts me off. Not necessarily because I should take one man's opinions, but because I was already wandering what was in it that wasn't in the docs and this confirmed that hypothesis. &gt; I bought the book, but unfortunately most if it is just documentation rehash (and the documentation is more extensive). Just like the last book. Seems like a money-grab to me. Why can't you just work on making the official documentation better? If there are going to be chapters added that detail an app's development from start to finish, then it'll be worth $29. The book says that such chapter(s) will be added, so we'll see how it turns out. Hope I don't have to wait too long for the real content to be available. I know people will be tentative to share (steal) but would anyone with this book or the previous one mind screenshoting 4/5 random pages to give an idea/preview of what's inside?
Another option would be to take a look at Laravel. There's a number of very well done video tutorials on NetTuts, and a few books (one of which I think came out yesterday, called Code Bright). It's a very easy to use framework, but pretty powerful. It's not as old as some of the others that have been out for a few years, but I quite enjoy the coding with it.
The book is only $30 and has a 45 day money back guarantee. Buy it and try it all for your self, if you don't like it enough to pay for it, get a full refund. There will be plenty of free resources surrounding building applications with Laravel 4 in the coming weeks and months.
I'm more looking at creating my own framework so I can learn the architecture and learn the language inside out. I'll definitely bookmark those sites though, I appreciate all the resources I can get
I'm not 100% on this, but I think nettuts also has something about creating a framework on there. May be a JS framework though, not certain. 
You can usually find a proper HTTP code for your response. Most use those or simply create their own. If you are writing a RESTful API there are no hard rules.
DataTables works great for my customers, out of the box, and I have better things to do than spending days trying to detect and remove the bloat. To be honest, I chose a few years ago to stop caring about how bloated that kind of JS components can be. As of late, Data Tables is the one I use on a regular basis, but I also used several YUI widgets that had the same reputation. It's not the first time I read or hear that, so I would be interested in a couple examples of bloat in Data Tables, since you seem to know the topic and care about it.
I've not seen that CodeCeption offers HTTP mocking?
I was reading the Laravel docs for the first time last night and they're very well written (tho there are some areas that need improvement).
jquery.js: 91 kB, datatables.js: 69 kB. That's 160 kB of Javascript every time you just want to sort a table.
I could give you other stuff, but it would just be a list of the plugin's features. What gets me is that DT has an extensions feature, but still has tons of crap in the core like theming. I think my biggest issue is that it takes a ton of configuration just to get a simple, sortable table (as opposed to the complex table by default). Last time I used it I had to set up a global variable with the options so that I could use it on each page.
Agreed, loaded VERY slow. (35 seconds) Also, for whatever reason GET failed on: https://s.curatr.com/piwik.js I tried to access it directly and it was working fine -- not sure what the issue is there.
I wish there was a nice acronym for this, like "MVC" but for "model, view, controller, business-logic/service/utilities/whatever".
Hmmm, it looks like there might be a problem with a css file being mistakenly filtered through cssembed and ballooning in size due to embedded data uris. Eeep!
I have bought it right when e-mail notification came, and so far it seems as a well written piece of book. As a CodeIgniter guy I think I need something written in a more fuller words than actual L4 docs, and this satisfies my needs so far.
If you take a look at the table of contents and the Laravel docs, you can see that the contents are very similar, so it seems like the book just expands on the standard documentation.
@myalterego, you might enjoy PPI 2.0, it's a barebones framework allowing you to plug in any library you like, such as DoctrineDBAL or Aura.Sql for example. Here's an introductory tutorial for you to review and decide - www.ppi.io/blog/1/tutorial-geolocation-with-foursquare-and-google-maps
Ah, no, it doesn't. Disregard my comment, I glanced over the github page a bit too hastily and misunderstood its purpose. 
The L3 (Laravel 3) docs and book are both good, and complement each other nicely. However, what both lack is a good guide on the best workflows to use and the best ways to structure an application. By "best", I mean the approach that will be quick, easy, and won't be kicking you in the nuts later on. Laravel gives you a big box of lego bricks, but falls short of showing you good ways to construct anything sizeable. I will leave this book until it sounds like it fills those gaps. Also the L3 books was never finished, and many feedback and corrections have been posted by readers nearly a year ago, but have still not been incorporated. It discourages me from moving to the L4 book. This is as much feelback to the author as it is opinion on this thread. So far as the style goes, I do like the L3 book. It takes you through in a step-by-step manner, building up concepts in layers. IMO it works well. I do find switching between the book and online documentation a lot, because both have details the other misses. 
When exactly will L4 be released for download? I was told today, but all I can find are ways to grab from git, which I can't do on my shared hosting...
I'm a [fat free framework](https://github.com/bcosca/fatfree) fan, for its size and simplicity.
I truly learned OOP when I started using ZF1, which forces you to observe OOP concepts and design patterns at some level and encourages it a lot. So I'd say start using a framework that would encourage you to write decoupled, OOP-driven, code. Symfony 2 and ZF2 comes to mind.
Tell the dudes at leanpub.com that their SSL certificate is probably broken, Chrome is giving me the big red screen of death. EDIT: vulgarity
Uh, it's verified by COMODO CA Limited. Sounds like an issue on your end.
It's live now. http://laravel.com 
It was okay in my Chrome (Version 27.0.1453.94).
L4 was released today. Edit: in 90 minutes from now.
Yeah, seriously. This doesn't seem to be nearly as cunning and evil as the people in this thread are making it out to be. I think some people just go a little overboard criticizing other peoples' work.
They get overzealous on the "free-as-in-beer, share everything out of the good of your heart!" idea. Sometimes that's great; sometimes people need money to buy food.
still beta
I like Kohana (http://kohanaframework.org/). The irc channel and docs are pretty helpful.
huh? [laravel.com](http://laravel.com/) [Reddit Post by Otwell](http://www.reddit.com/r/PHP/comments/1f7ubi/laravel_40_officially_released/)
Nettuts has a very good [tutorial on how to roll your own framework](http://www.youtube.com/watch?v=CGiIVQPaOJQ). Really gives you insight into how most well-known PHP frameworks operate on a low level.
Excellent. I've been waiting for this.
So is Laravel a must try or yet another framework?
I think most people seem to really like it. It's the third most popular framework on Github (behind Symfony and CI), so has gotten pretty popular. Take it for a spin!
Thanks!
Congrats, looking forward to checking this out
I really like it, its use of lambdas is pretty cool.
Good job! Wonderful framework!
Procrastination pays off again. Thankfully I didn't start that project 3 weeks ago like I intended. :)
Is there a collection somewhere of open source apps using Laravel 4? Would be useful for beginners trying to learn about application structure, etc
&gt; nerds!
When I downloaded it an hour ago, it had "BETA" in file name.
every year will be the year of php :D long live php
I clicked this link, then immediately thought "Hey, I could post this to reddit!" First-world reddit problems.
I like jQuery. It took a bit of getting used to since it doesn't look like JavaScript much, but in the end it's .. mostly one thing. Skimming the Laravel docs I see Composer and Packagist, Carbon, Blade Templating, there are Artisan commands using IoC Containers, Eloquent, Facades - how much of these do I have to learn before I can confidently use Laravel? I know PHP, but I don't recognize any of those :-/ Is that because I mostly stick to the back-end of things?
jQuery is a Javascript framework for client side code. Laravel is a PHP framework for server side code. They are distinct.
Is this production ready versus Laravel 3?
Out of the box a 404 gives a full stacktrace with global variable dump. I didn't play with it too much and have to head home from work now, but it's not production safe out of the box. Might be a config value to switch into production mode though.
Yep, just a composer update.
Start simple. Just do some basic routing. Knowledge of IoC, Facades, Blade, etc. are not necessary. No templating engine outside of plain ole' PHP is required. No ORM is required. Just start with the basics and ease your way into the more advanced concepts as you get more comfortable. It's very much a framework that grows with you.
It's a config switch of "debug" to "false".
I started my project 3 months ago.
Absolutely. Laravel 4 has nearly 2000 unit tests. That's almost three times the amount Laravel 3 had. It's more stable than Laravel 3. Also essentially every feature that was in L3 is in L4. Plus the addition of many new exciting features like the unified queue API, better CLI, better testing, etc.
Well considering version four was literally just released, probably not.
I do a lot of work in Python / Rails, but also use PHP for a lot of stuff and recently decided to look into a framework to learn. After digging quite a bit, I really love how Laravel works through and through. It was a bit challenging to get used to some parts of it, but once you do it's really quite well done.
We plan to release a three.laravel.com site. However, the Laravel 3 docs ship with the framework itself, so can be accessed offline.
i need a laravel 3 | laravel 4 comparison on whats different and new, for the lazy. Good work though, im excited for the composer piece.
I'm aware of that, I'm one of them; but I doubt there is much out there public facing.
Gotcha, I'll just have to wait :)
Thank you! That gives me much more hope :-) Indeed I have very little MVC experience, usually there are other people on the HTML/CSS side of things, and there are too few here (small town) who are into the newer way, technical side of it. I'll have to save up a few weeks and get down and dirty with it, hopefully with someone who knows all the modern browser quirks.
When "some" is used as a qualifier, yes. Some very large open source projects are still functional spaghetti code. But luckily not all.
Much appreciated, I'll check those out!
Exactly. Although I am not very great at PHP, I understand that a lot of programming is just learning to think abstractly and implement certain methodologies.
Yeah, flat coding can make your application pretty convoluted and we all know PHP doesn't need anymore of that!
same boat here. contemplating spending a few weeks moving to L4 anyways.
i might be moving a project over from L3 to L4 and i'll probably write about the migration process. doesn't seem to be much out there.
how would you compare Blade to Twig for someone who's only used Twig? How about Eloquent to Doctrine2 for someone who's only used Doctrine2? (I did google eloquent vs doctrine .. didn't find much useful)
I really appreciate your leverage of core PHP principles and re-use of tested mature packages instead of reinventing it all like other frameworks tend to do. I have used zend/yii/symfony etc all with varied success and so far Laravel looks promising.
I forgot where I read this (maybe Twitter) but were there talks about a pro screencast series based around Laravel made by the creator?
A quick perusal of the docs will take care of that. It's faster, it does more, and... well... thats it.
im glad you agree, i just installed laravel 4 to replace a project that i started a couple months ago, trying to find something to replace the oauth bundle i was using :(
&gt; Whether your a PHP beginner or architecture s/your/you're
I'm missing a profiler :(
That's incoming!
https://github.com/loic-sharma/profiler
Read the [introduction](http://laravel.com/docs). You'll have a better idea. For me, it's the learning curve (at least to prototype a simple application quickly).
1. Laravel will have 6-month dev cycles. 2. 4.0.* will be stable and have bug fixes only I think. 3. Reference 4.1.* in composer to get the 'bleeding edge' version with new features. 4. Just run 'composer update' :)
It's been out for half a year now. Where've you been? The whole point of this 'release' is that it is officially production ready.
+1 for your last sentence. Nothing else will beat that.
&gt; "web artisians" [mfw](http://imgur.com/4SdOIbY)
Really?! I've just downloaded and started learning Laravel yesterday -_- P.S. congrats, so far it's a lot of fun :D
Is any particular reason why you wouldn't consider installing it through composer? I do realize there are some disadvantages of using composer for autoloading, however, I believe using it to install dependency is superior than installing it through manual copy and paste. What is a good set of installation instructions than 1 to 2 command lines? // PHP Composer composer.phar install // Java Maven mvn install // Python PIP pip install // Ruby Bundler bundle install // Linux APT apt-get install 
Congratulations mate. Great work.
Blade is simply 10-11 regular expressions run over the templates to convert them to plain ole' PHP files. It's not as advanced as Twig, but it does have the main stuff you probably want (template inheritance, etc.). Eloquent is more of an ActiveRecord style ORM, while Doctrine uses the repository pattern. Even when using Eloquent, I tend to abstract my Eloquent calls behind Repository classes for better testability. Eloquent is a little quicker to get started using, in my opinion. I like Doctrine though, and it should be pretty easy to use with Laravel 4, thanks to the great work of the Composer team!
Yes, I am working on those screencasts this week.
There is a poor market for WYSIWYG editors with Markdown support. The only one that has come up most often is [Hallo](http://hallojs.org/demo/markdown/), and I've seen a couple mentions of it being buggy and adding random HTML (like spans) to the output. For the actual PHP back-end part, nothing beats [PHP Markdown](http://michelf.ca/projects/php-markdown/). For some more info on Javascript-powered front-end solutions, there is some good discussion in [this issue](https://github.com/dybskiy/redactor-js/issues/2) for the Redactor WYSIWYG (which is pretty nice).
Not using Laravel I guess... we're required to use Drupal at work. :( I guess it's ready then. I'll try to check it out on my spare time.
we started our project 4 months ago... using the L4 beta, meant a few trip ups here and there as functionality changed over time, but it was great decision in the end
Laravel does have a Rails feel to it where it has certain conventions to make development faster. The Eloquent ORM plays a big part of this, but you don't need to use it - you could instead use the Fluent query-builder which is much like CodeIgniter's "ActiveRecord" query builder. Composer doesn't need to be installed on the server, it can be if you want that kind of flexibility but you can still just run `composer install` on your local environment to get all the dependencies and then just upload everything (including your `/vendor` folder where Composer installs it all) to your server like you would with any other files and it will work just the same. At the end of the day, you can use Laravel much like you would CodeIgniter though you'll find conforming to it's (reasonable) conventions, you'll save yourself a lot of time, headaches and repetition!
I would import the data as a whole, without doing any comparisons, into your database first. Then I would do any modifications from there, preferably directly in the DB if possible. I don't know what kind of logic you're doing that takes 3-5 hours and crashes -- 300,000 rows of text is not a lot (depending on your content). Just make sure to do this in a dev environment, use transactions to prevent oops, back up regularly in case of oops, etc.
I started with just the routing, templating, and Eloquent (although I built my own databases - didn't much care for the command-line ORM builder). It was very easy to get up and running.
Not really. A breakout of new functions and changes would be helpful. 
I guess I'll come out of my ZF2 bath and take a short L4 shower to see what it's like :-)
Since when does Cake even implement MVC? It is nothing but a badly written Rails clone.
**Anybody got experience with both Laravel &amp; Yii?** Would love to hear some opinions about the differences between them and what your prefer. I've been doing PHP on &amp; off for 14 years and have always just used my own little semi-framework (basically just a single controller and a basic custom active record class). After a bunch of research, I've just starting using Yii on a fairly big project. Obviously the best way to find out the differences are would be to also give Laravel a go, but I'm unlikely to get around to that any time soon. So just curious to hear opinions from people who have already used both.
Comments are no longer showing for me. That's a bit worrying.
I'm interested in this too :)
This submission has been linked to in 1 subreddit (at the time of comment generation): * /r/laravel: [Laravel 4 is officially released](/r/laravel/comments/1f9bbc/laravel_4_is_officially_released/) ---- This comment was posted by a bot, see /r/Meta_Bot for more info.
Apparently people were talking about torrenting the book in the comments, and where to find it
I recently inherited a Yii project that was done by a pretty shoddy programmer, so it's not perhaps the best comparison. But to me Yii is a lot more messy than Laravel. I quickly ditched it in favour of Laravel. It largely boils down to Laravel using anonymous functions and statics. I find you can write much cleaner code that is easier to read.
What's New in Laravel 4: https://tutsplus.com/course/whats-new-in-laravel-4/
Nice introduction post.
Me too. I've just found all the L3 documentation has been lifted out and replaced by the L4 documentation. Google is full of dead and incorrect links now. That was really not well thought through. If they know the version number is going to keep changing, and the docs are locked onto a version, then why not actually make use of that fact and put the frickin' version number into the URLs for the docs. The worst bit is, there is not one *single* word on the [documentation pages](http://laravel.com/docs/introduction) about what version it covers. It is the same reason I'm not leaping on to the L4 tutorial book that was posted here - it takes just one day and legacy users are like, *fuck you mate, you're behind the times now*. Things move forward, and that is great, but please do it with some kind of migration plan and respect for the legacy users that got laravel to where it is today. Nearly finished my project now (a job site portal with SugarCRM as the data store behind it), so I'm not looking to migrate for this project. I'll try L4 next, and hoping the form handling workflow and the config file override structure is a little less cumbersome.
You could use something like LINQ if you want to treat your data like a database https://code.google.com/p/phinq/
I've been a php developer for 16 years, I know what I want better than an automated script. Not that I'd use a phar (maybe I would I have a utility that expands phar back to normal file system) but have you ever considered making a phar? Currently I have a proprietary framework, I have the ability to use any third party code in it (like yours) all I have to do is extend the main class of the package I want to use. If I wanted to manually install this, what files do I need? Can I just allow my autoloader to load the files? In my mind some of that is a bit hairy since you're working with threads. It's just a suggestion. 
From your comment history: &gt; AFAIK, there are no MVC frameworks for PHP. The frameworks that advertise as "MVC frameworks" are actually badly made Rails clones (which as never intended to be an MVC framework to begin with). I don't know what you were expecting in a thread looking explicitly for PHP framework tutorials. No one forces you to call frameworks the same way everybody else call them. The fact that your personal opinions diverges from the mass doesn't mean you need to be a douche about it.
how easy is it to say, swap out Eloquent for Doctrine? I've got a lot of time invested in Doctrine, don't really fancy rewriting the whole schema in a new format
I wish it was a screencast but regardless, I'll purchase it the second I get 15 USD on my PayPal. :) Pretty offtopic but how do you read e-books? I have a 22" monitor and reading it with adobe reader hurts my eyes. Is there anything I can use on software side of my computer?
Just to be clear: + The hackers did not break into any website + The hackers had the hashed values and were able to find the original password + These passwords were hashed with the relatively weak MD5 algorithm 
I am curious whether the salt was the same for each record or not? Also, does he say which type of hash is used?
I see Solus still hasn't fixed their memory usage part of their API. They are reading it including cache etc, which it shouldn't be. http://tbx.me/b7AR.png They read 107 instead of 36 - I reported it ages ago and they said they'd fix it, although it never happened.
Here is a list of functions that have changed: * All of them
Oh yes, the routeing. Really read up on that, because knowing how the routing works and setting it up right can pay dividends later on in the project. I have just reorganised a whole bunch of pages on my app - moved them around different URLs etc, and that was all done with just a few tiny changes to the routeing. The controllers didn't need a single change. The structure of the site when seen from the web and structure of the code and controllers within the site, are completely independent (if you want them to be).
If I had pointed out that Cake uses outdated (php4) syntax artifacts, global state and other bad practices, would that change anything. 
I don't think accessing other classes by globals is good practice. You could make them static or into singletons (although some consider singleton an anti-pattern). Better would be some kind of dependency injection. I'd love to see a tutorial on that level of oop, since that's where I am at, and everyone else at my workplace is even worse :(
It's a little sensitve - It's for my bachelor thesis. What would you do with it? :) I've managed to cut it down to 29.000 rows only with duplicated values, so now I need to do a conditional deletion. In the status column I have 13 different values which I've ranked from the one that weighs most, to the one that weighs the least.
L3 came with the documentation...
I did the same with a project from two months ago. It's paid off pretty well for me, I haven't noticed any super big hangups to the code base in the past 2 months.
Beside me not seeing the link between the "MVC" status of cakephp and those things you point out, yes my personal appreciation of your post is directly proportional to the explanations, examples, and sources it contains. If you'd like to go more in depth with specific examples, it'd be relevant to this thread as an example of what to/not to do.
Just in case: It's for my bachelor thesis and it would be nice if I could get a good result now and if I could do it in a clever way make an extraction on the last day of writing and do the process again and make some small adjustments in my analysis before handing in the assignment. I'm doing a thesis about local internet providers compared to google fiber :) - This is used to get the market share as precise as possible.
why so many Symfony devs and not even @rasmus ?
It's because its a CSV file and my professor said I could do the trick in Excel by writing a macro and doing some conditional formatting.. But it can't handle all the processes.. And I've done a little programming 10 years ago where I used PHP and mySQL and I suddenly remembered that they are a lot more effective than M$ office.. My problem is I haven't coded for nearly 10 years and everything I tried just fails.. :/
How about doing something like this: public function __construct($database, Bcrypt $bcrypt) { $this-&gt;db = $database; $this-&gt;bcrypt = $bcrypt; } I agree this will create a more manageable code, but I'm not sure if there will be any performance benefits with this method than by using global variables
Imho doing anything with dependencies means adding an automated process. Php tried for many years (you should be familiar with this) to get by with a mediocre method of dependency management(fetch/install/autoload libraries, not talking DIC's here) and the result was an incredible case of NIH in just about every major php project because it was just so frustratingly difficult to pull in the dependencies that arbitrary bits of code want. I for one welcome the latest attempt of the PHP community to handle package management.
Relevance? *ducks*
They exist: * [EpicEditor](http://epiceditor.com/) * [markItUp!](http://markitup.jaysalvat.com/home/) * [Markdown Live Editor](http://jrmoran.com/playground/markdown-live-editor/)
Include it in composer.json, create the connection in IoC, build your models however you normally would.
You don't need to use Blade Templating unless you want to template with Blade. You don't need to use Artisan commands unless you want command line interaction. Learn the things you need to learn one at a time, there is no need to learn everything instantly.
I'd not really call any of those WYSIWYG editors. They just display a preview next to the "raw" markdown editor. A WYSIWYG editor would just display only that preview you see in those editors but it would be editable. It would then provide some method to get the markdown from it, although the markdown would not, by default, be visible to the user.
&gt;What is the cause of this error You likely didn't call the script with [whatever.php]?url=[the url]
[move_uploaded_file()](http://php.net/manual/en/function.move-uploaded-file.php) does special checks to ensure that the *source* file was really uploaded by PHP, but I'm not aware of any special checking on the *destination* filename.
The OP asked for an editor which supported markdown, and had a WYSIWYG editor. Any Markdown Editor which has Preview functionality is a WYSIWYG editor. Tadaaaaa.
I like calibre for reading ebooks on my computer. Helps keep them organized too. http://calibre-ebook.com/
Oh I agree, I love xdebug. I use this in cases (like on the dev server at work) where I don't have control over what's installed on the server, and the bosses won't install xdebug for me. It works well enough to get the job done, without being too much overkill.
[See my comment here.](http://www.reddit.com/r/PHP/comments/1ezgv3/yet_another_better_var_dump_super_lightweight_so/ca88r2h)
Didn't think about that actually... How would you do it? Assuming you can't use a better tool...
I wouldn't reinvent the wheel.
Very nice.
Are you also removing the SQL injection vulnerability by parametrizing the POST variable? IIRC with MySQLi you have to loop through the values and dump them into an array to do what you are doing. (I ended up going with PDO since it made a lot more sense to me.)
In the general case: mysqli_data_seek($salesresult1,0); $row = mysqli_fetch_row($salesresult1); echo $row['Fname']; In this case, as it's always row 0, there's no need to seek. $row = mysqli_fetch_assoc($salesresult1); echo $row['Fname']; This is more work, but this is because `mysql_result` is a really ugly solution. EDIT: In 5.5, there's no need for the temporary variable as they fixed the bug: echo mysqli_fetch_assoc($salesresult1)['Fname'];
hey dude. check out these youtube videos. i couldn't grasp the whole mvc concept, because i get lost reading docs. but i found these basic tutorials and have been diving into laravel path without hiccups. http://www.youtube.com/playlist?list=PL09BB956FCFB5C5FD
&gt; mysql_result is a really ugly solution. It's very handy, and I'd say not at all ugly, for things like "select count(*) from blahblah" where you know there's going to be exactly one row and column no matter what. I figure most people have written their own wrapper by now after moving on from mysql_. But it would be nice to have it in the mysqli extension properly.
What if he isn't using that Auth system? I'd just use Sentry :)
Outside the scope of your question, but I'd really suggest that you take the time to encapsulate your database interaction now, while you're running through code. If you wrap up all of your DB interaction now, it'll be super easy to make these types of changes in the future (when the `mysqlsi_*` {for MySQL super-improved} comes out, or when you switch to using PDO, or whatever your backend is). Yes, it's an undertaking, but it's worth it.
Turn your brightness way down (0-10%) and keep the reading window thin 
What you just did is in fact dependency injection! Dependency injection is also known as Inversion of Control. In your original case, your class was dependent on the fact that the global object you were accessing has to be initialized somewhere. This may lead to some ugly errors if the objects are not created, are overwritten, etc. Essentially, your class was responsible for finding and/or initializing the objects it depends on. With Inversion of Control, you are literally inverting the control of object creation and object loading. Instead of your class being in charge of that responsibility, some outside object will need to create and **inject** the **dependencies** into your class. There are a few methods of accomplishing this, and the one you described is called Constructor Injection. There is also Getter/Setter injection (fairly simple): $myClass-&gt;setDatabase($database); And the service locator pattern. This is where you pass a container of some sort into an object, and you can use it to retrieve named objects: $locater-&gt;get('database'); The advantages of IoC are widely known and accepted. It makes for cleaner and more **strict code** (which PHP is awful at, since it is not a typed language). If someone uses your classes in their project, they know exactly what dependencies your classes have (more so with constructor injection, not so much with service locator). If you need to provide mock objects for testing, it's way easier with IoC. As far as performance is concerned, you will not see an increase; perhaps even a decrease if a heavy Dependency Injection Container is used. However, at this point, you are trading a minimal performance hit for a more well rounded, development friendly design pattern.
If you know there's only one row then echo $db-&gt;query($query)-&gt;fetch_assoc()['Fname']; 
Thank you!
&gt; fetch_assoc()['Fname'] That part doesn't work in 5.3, right? It's hard to use that stuff until there's more widespread deployment of newer PHP versions.
I'm not saying that you can't be productive without a debugger. Sure there are times when seeing things on the screen is useful, even though them times be rare. But have you considered switching to developing on a virtual machine instead of a shared (I assume) development server? A single shared development server to me, sounds like a huge technical debt. You cannot move and innovate quickly with it. Also a single point of failure when it goes down unexpectedly or for maintenance. 
I totally agree. I develop everything locally, and push it to a dev / staging server for testing before going to production. I don't have control over the environment on the dev server though.
/u/utowel Awesome job with Blade, it's by far my favorite view layer.
Catching exceptions just to run die(); shows an extreme misunderstanding of how exceptions should work. It's fine to want to ultimately handle an exception in order to log or otherwise report it, but throwing an exception just to die() serves no purpose at all.
Pretty cool to see this. I just posted something similar above. I came to the same conclusion myself without reading up on it or anything after playing with MVC for a year or so. Initially I found myself putting all business logic in my models, but this quickly became hard to work with, because I'd end up with these huge models that were trying to do all kinds of different, and often unrelated things. Eventually I decided to encapsulate the isolated business logic I required into seperate classes, but it wasn't until speaking to some Java guys at work that I realised this is a fairly standard thing, and that these classes are generally referred to as "services". This is the pattern I now use, and it really helps keep things manageable. I look at code I was writing just 18 months ago and cringe a bit, but I guess that just means I've improved somewhat as a developer. It's cool to read a post like yours and know that other people have come to the same conclusions though :-)
So in theory I could replace DataMapper 1.8.2 that I have in CodeIgniter 2.1 with Eloquent? That would solve so many problems on another project of mine.
Mind if I ask more? Why would you need to *vardump* on a *staging* server? Staging seems to me like it should have already debugged code running on it. You should then only need to stage-test the code by looking at the results (the frontend output) and the staging database insertions (the backend output). 
In case you still need it: https://github.com/laravel/laravel/tree/3.0/laravel/documentation
Just read through that post, very informative and easy. Thank you so much for posting that.
Sure! The reason I var_dump on staging is because so many people are using the same server, and the database often has weird data in it. It helps me know more quickly if a bug is due to weird data on staging, or if it is actually a bug.
In reality, any hash would be. This is basically just brute-forcing the hashes by creating every string possible with specified characters and checking it against the hash.
Please post here when they are done! :)
I use Markdown a lot in web apps, typically with [PHP Markdown](http://michelf.ca/projects/php-markdown/) for the conversion. I find some users (non-technical folk) still need help learning how to write it, so I created a jQuery plugin that adds a simple toolbar tool a textarea. This has been quite helpful. You can check it out on [Github](https://github.com/reinink/jQuery.Markbar). Be warned, it's certainly not production ready yet.
I don't understand, are you saying we should not do both together, but why? What I am doing here is using exceptions to get a more specific error message, and yes it is for debugging or even keeping a log of it; also I am killing the script if there is any error, because as far as I know, Php will continue reading the rest of the script, if you don't die it. 
No, you're using exceptions completely improperly. An exception should either be handled with code that allows execution to continue, or it should be allowed to bubble to the topmost level. The behavior of the exception is to continue backwards to all the calling elements until it is handled, or it reaches the top level (the global scope). If it is not handled, it will show a backtrace and halt execution. it will not continue to execute anything unless you handle it at some point and let it continue. Ironically, the backtrace you suppress by doing what you're doing is actually worth more to you than the message because it tells you where the error occured, and what exection chain got you there. Getting a message like "Database query failed!" might not be as useful in a large application as a backtrace. The point here is when you're designing applications and libraries you want to give all the calling objects an opportunity to handle the exception. Sometimes people will set up a global "catchall" at the topmost level to catch all unhandled exceptions and log them (a fairly common practice, usually just called "an exception logger"), but this is always done at or near the application entry point. Think of it this way. What happens in your registration script is the database goes down, and you decide that you'd like to give the user a friendlier error? You could do this right at the point you make the call, or you could do it at the point the unhandled exception hits the topmost error, allowing you a single place to render that template. I realize you mean well, and that you're trying to help people, but code like this is part of the problem with PHP tutorials. What you're doing is no better than mysql_query(..) or die(mysql_error()); which is actively discouraged by any professional PHP programmer.
Is it possible to install this just using composer? Symfony seems to have a method of doing it, eg: php composer.phar create-project symfony/framework-standard-edition somewhere/ 2.3.0-BETA2 
I'm guessing you're not actually using PHP 5.5 since the mysql extension you're using is deprecated in 5.5. http://www.php.net/manual/en/migration55.deprecated.php
Migration write up would be awesome!!
This is exactly where I am at too! I've been going over dependency injection with little success on fully comprehending it. What I'd really want to see is OOP + PDO + Dependency Injection, where there is a simple authentication system + blog or something. It'd probably be like an hour long, possibly more. If you've ever watched the codeigniter video instructionals, very similar to that I guess. I get confused when dealing with sessions and databases using dependency injection. I'm not sure why some tutorials use static stuff and others don't. If there were a concrete tutorial that gets me up and running, I'm sure it's going to really help make it click. 
Create an interface ApiInterface with all functions in common, then define setApi() in my_class as: public function setApi(ApiInterface $api) { $this-&gt;api = $api; } and getUsers or other functions: public function getUsers() { return $this-&gt;api-&gt;getUsers(); }
In case you're wondering why you're getting downvoted, it's not because the method you've listed is entirely bad, it's because you think this is about performance. It isn't. It's about decoupling components so they're not joined in a way they can't be separated.
Sounds like you may need a [factory pattern](https://www.coderprofile.com/coder/VBAssassin/blog/2/practical-use-of-the-factory-pattern-polymorphism-and-interfaces-in-php)
Build 4 additional classes that wrap your 4 API wrappers and provide a single common interface (either subclassed from the same base class or implement the same interface). Then just instantiate the one you need (by name if you want) and pass it to the rest of your code. 
True, it was a mistake to not show how to use bcrypt in the first part. In fact, this was one of the reasons why I made this Part 2, in which I showed how to modify the code to use bcrypt() along with adding more features. It would have been more easier to show it in the first Part itself. But perhaps this tutorial could also teach people how to change their code if they had used sha1() or md5() or some other method and use bcrypt :D I have changed the Warning message and informed that I'll show how to use bcrypt in the next part.
Yeah, that's cool, I'm just saying don't "warn" someone you're teaching them the wrong way, always teach the right way.
Why is no one doing it then?
 interface ApiInterface { public function getUsers(); } class Api1Adapter implements ApiInterface { protected $api1; public function __construct(Api1 $api1) { $this-&gt;api1 = $api1; } public function getUsers() { return $this-&gt;api1-&gt;getusers(); } } class Api2Adapter implements ApiInterface { protected $api2; public function __construct(Api2 $api2) { $this-&gt;api2 = $api2; } public function getUsers() { return $this-&gt;api2-&gt;get_users_list(); } } Then.. class MyClass { protected $api; // ... public function setApi(ApiInterface $api) { $this-&gt;api = $api; } public function getUsers() { return $this-&gt;api-&gt;getUsers(); } // ... } $myclass = new MyClass; $myclass-&gt;setApi($api); //... $users = $myclass-&gt;getUsers(); Or: class MyClass { protected $api; // ... public function setApi(ApiInterface $api) { $this-&gt;api = $api; } public function getApi() { return $this-&gt;api; } // ... } $myclass = new MyClass; $myclass-&gt;setApi($api); //... $users = $myclass-&gt;getApi()-&gt;getUsers();
Great job! I will use this tutorial shortly and take the comments from Reddit into consideration.
That seems pretty out-dated, and fairly IBM-skewed--surprise, surprise. A reading list is a great idea, though. I may have to steal that and improve upon it.
I'll have to agree with you. I'm not really seeing much contribution from Rasmus to neither the PHP community (in terms of code, practices, projects etc.), nor the PHP language itself (in terms of new language features). The only reason he seems to be suggesting that we listen to Rasmus is because he created PHP, which is a very poor reason IMO. 
You are getting down voted but no one is really trying to explain why they think you are wrong. The best pattern for this problem is likely the Adapter pattern. a good PHP description of this is [here](http://phpmaster.com/practical-aspects-of-the-adapter-pattern/)
http://phpmaster.com/practical-aspects-of-the-adapter-pattern/
Great. Let me know if you find any issues with the system.
Yeah, it would be nice to know why I was wrong. Time to go read more. Good thing I actually enjoy the process of learning. Thank you for the link.
if you're comfortable with administering your own server, i'd recommend digital ocean. good price for what you get.
It annoys me actually, most programmers enjoy learning new things and a lot of times I see comments that have downvotes with no explanation. We all should help each other learn
Please do.
Maybe no one wants it ;)
Definitely digital ocean, you can launch a VPS in under a minute with a LAMP stack on 12.04.
&gt;Price is the main factor Shared hosting is your best bet. There are thousands of companies in the hosting market...choose one based in the country/continent you target.
You shouldn't test the controllers.
not a good list, this is 7 years out of date.
Yes. But if an object with many dependencies can be considered as a unit, why cannot we consider a controller as a unit and test it as such?
You do.
Other than those two links, what are some other good resources for learning PHP?
Try www.littlenimbus.com, got a site there myself It's from /u/KineticColor
Doesn't mean I don't want to see a video tutorial on it.
Depending on the project, you might check out [AppFog](https://www.appfog.com/). They offer a free tier which works well to get smaller projects running. Only drawback I've run into so far is that they're still on PHP 5.3 and MySQL 5.1, if that matters to you. For my larger projects I use [Zerigo](http://www.zerigo.com/) VPS and DNS, and I've been very happy with them.
I haven't used pure Debian before, but apart from the location of the PHP Xdebug extension installation and its configuration files, it should just work I think.
Watch PHPStorm's website for sales. I am more than happy to pay for it. 
sublime text is the winrar of editors. it gives you a free trial. forever
PHPDoc deserves a mention, if you're doing OO code.
Bought this and it's an excellent read so far, I'd (stupidly) disregarded automated testing as a waste of time until now.
This should be sorted in two separate parts. Checking if a category can be created properly should be done in a unit test for CRUD on the category. The most you should need to test in the controller is to just asserts that it worked fine and maybe mock out your db to acknowledge that the insert function was called properly. Knowing that the call functions in your other unit test should be sufficient enough to assume that it's fine calling it the same way in the controller.
It's very biased towards sublime text, which is not a bad editor, but there are others too...
We use PHP Sundown at our company (it's a C extension) http://pecl.php.net/package/sundown
PhpED is also worth looking into, what it lacks in features it makes up for in incredible speed (even faster than visual studio) on account of being completely native and written in a combination of delphi (for ui), c and assembly.
Don't these get proof-read before they're actually voted on?
Also if you are the owner or work on an opensource project, they will give you a license for free.
Yeah, I just copy/pasted my "Knowledge" text file, as I am using Sublime in my development environment, I don't think it's farfetched that topics closely related to the IDE and the language appear in that regard. :) But they are solely my views and in no way are they the only option. I encourage everyone to suggest alternatives and improvements.
In ST2 searching commands is **Ctrl + Shift + P** ;), but the settings are all in JSON files, which might be tad too Spartan for some. None the less I'm a big fan of JetBrains and their approach. I extensively use IntelliJ for Java/Android development and it's been a godsend, both in UX and programming. I'll keep a lookout for a PHPStorm sale though!
One database handler, and just make each model call the handler's query-function.
Wow, sublimetext looks amazing. I can't believe I've never seen it before. I'll definitely be giving it a shot tonight.
-1 for https://phpbestpractices.org/ It's not on GitHub, is filled with multiple bad practices and to suggest an improvement I have to download Alex's GPG key to email him? Nope.
Amazon EC2 Instance, free for the first year.
Don't take this the wrong way, but this is sounds a lot like a "I don't know how to drive so I'll build a car in order to learn" approach. If you want to learn more about MVC and PHP in general, I suggest you take a look at some solid MVC frameworks already. Codeigniter, Kohana, Laravel, Symfony, just to name a few. That being said, one DB handler.
Ah yes, this is exactly what will help. Thank you! 
When in doubt, search on Github: https://github.com/search?l=PHP&amp;q=markdown&amp;ref=cmdform&amp;type=Repositories (ftfy)
I use CakePHP a lot and I was always content with Textwrangler. Looks like I'll be checking out some new tools.
Dear Mr Sturgeon, I would certainly like to know what those bad practices are. As a voting member of PHP-FIG and occupying a position of Lead Engineer, such insights must be worth sharing! I removed the link, let it be known that I meant no harm in mentioning it and I don't care about virtual currency. ;)
I ran it free for about 6 months before I wanted to try out the beta (v3). It is well worth the money.
That was a great read, thanks for linking. I had no idea Etsy's dev team blogged like this.
This is probably the most comprehensive "Getting Started" tutorial for Composer that I have seen (outside of just reading Composer's documentation): * http://daylerees.com/composer-primer Code Quality tools: * PHP Code Sniffer: http://pear.php.net/package/PHP_CodeSniffer/redirected * PHP Mess Detector: http://phpmd.org/ And in terms of general PHP reading, I keep an eye on these blogs (obviously, some of them are redditers :) ): * http://philsturgeon.co.uk/ * http://blog.ircmaxell.com/ * http://www.garfieldtech.com/ * http://fabien.potencier.org/ * https://igor.io/ * http://nikic.github.io/ * http://mtdowling.com/
Very nice and clearly explained! Mind if I add them to the top post? Yeah, I already assumed I could endure the wrath of the PHP Gods by showing my less-than-professional way of doing things, but I see that as a learning experience. ;)
Netbeans has a CakePHP plugin.
That is very true. I am well versed in both object oriented and procedural PHP, javascript with and without jQuery (although given a choice I'd prefer to use it to make AJAX and accessing the DOM a bit easier). I have worked with both MySQL and Postgres, and some with the C# and MSSQL. I take sadistic pleasure in working with SQL code and learning how to do it better. I have also done a few smaller projects in Perl (please don't hold that against me, that was in 2004 before I knew better!). For languages outside of web development, I am also familiar with C, C++, Java (although I'd rather not, but I will if I have to), and VBA (because who doesn't like to overcomplicate their spreadsheets?). I can work comfortably in any dev environment but I prefer Win7 or Linux with XFCE. Most of my projects are hosted on the good old fashioned LAMP stack, although I have experience with nginx as well. For examples, I have built projects ranging from band websites to a custom built funeral home obituary manager. I have deployed sites with upwards of 50 articles to those with just a few pages. I pride myself in building the sites quickly in a manner that makes them easy to maintain. I am proud of the fact that I have been called back many times for advice or additional projects by several clients. I studied Computer Science in college, covering everything from the basics of programming and data structures to system level code like shells and schedulers. Do note that my previous comment was a combination of me being slightly bitter about recently not getting chosen for a job I really wanted and me trying to be a little silly to lighten my own mood. If you seriously want to talk and have work though, send me a PM. I am not the best you will talk to on these boards, but I like to think I know what I am doing. I am also usually a much more humble person :p
Okay, I just tried some PHP debugging and it's not working. I have XDebug installed for another IDE, so I just changed the idekey setting and restarted apache2. The package is installed, I'm not getting any errors, but the second I try any functionality of the debugger, Sublime will just hang and I'll have to restart it. The webpage is opened properly, but I can't debug because when I try something, the editor hangs. I have installed Python 2.6 and copied it to the /lib folder, but I'm not even getting an error message. The editor just hangs. Can't do anything anymore expect close it. And I have configured XDebug for port 9000, as expected. Also, there is no clear indication, when the debugging start, what line it jumped to.
 list($name, $domain) = explode('@', $email, 2); echo $name;
No problem, I was a bit direct in my comment :) If you are still on the lookout for something, email me a copy of your resume and I'll let you know...I have a few companies looking for PHP developers right now. You can send it to contact@socialmatchbox.com -Bob
Quite right. Using ?&gt; is bad practice.
The function called strstr() was made for this. http://php.net/manual/en/function.strstr.php
Exactly. Packagist is one of the places not polluted (yet) with mediocre/unmaintained(!)/uninteresting/unfinished/little-PoS libraries. I hope it keeps its quality level for a long time.
Ah, then I don't know what to say, sorry for the bad experience! Does it show anything when launched from the terminal? Or does it just hang? I'm using nginx as server and PHP-FPM as parser, but I don't think that matters much. This is how I can use it: I can place and remove breakpoints through Ctrl + F8 at the correct line (quite unwieldy). Then I push Shift + F8 and I pick "Start debugging" The browser will start (but not print) and Sublime will halt at the first breakpoint that was set and print out the Xdebug information in the bottom tab. Now in Sublime I push Ctrl + Shift + F6" to advance to the next breakpoint. Each time I advance the Xdebug output changes until I reach the end of the document. Then the browser loads the page again in full.
Thanks very much for contributing all that! It were eye-openers for me. I'll add those points to the top post!
Right, just tried it again and I must have missed it the first time. I'm getting the errors that the articles list as incorrect python version. But I downloaded 2.6 and compiled from source, as the article in question suggested. I'll try doing it again. Last line says: ImportError: /home/koen/Sublime Text 2/lib/python2.6/lib-dynload/pyexpat.so: undefined symbol: _Py_HashSecret
You should add some vagrant and puppet/chef resources to this.
Thanks! I always love threads like these...Im personally in that nebulous "decent but not great programmer" area, and am trying to consume all the written material possible to get better. Thanks for organizing the OP and getting the thread rolling :)
This was the one I did, http://blog.bitbadger.net/index.php/2012/11/22/error-importing-pyexpat-in-sublime-on-linux/ I couldn't find it before, but this was the correct version (and adds the symlinking part). I'll add it to the OP.
Right, I compiled the 2.6.6 version and now it's working. I must have not been paying attention and gotten the 2.6.8 version. Neat that it works, but I'm not exactly liking the view. Everything is listed under each other and all content is fully displayed. I imagine this may lead to very large lists on occasion. Here's hoping for better things in Sublime Text 3. Thanks for your time.
or the underutilized fetchColumn: $name = $db-&gt;query("SELECT name FROM table WHERE id = 4")-&gt;fetchColumn()
Glad you got it to work! And indeed, there's plenty of room for improvement there. What IDE do you normally use?
Thanks, I'll have to look into those, as I haven't used them yet. Feel free to add links that have helped you understand its meaning/purpose or inner workings.
Probably underutilised because it doesn't exist in mysqli, which was the point of this question: http://php.net/manual/en/book.mysqli.php
Sure. Here's a good one: http://net.tutsplus.com/tutorials/php/vagrant-what-why-and-how/ Also the site itself of course: http://www.vagrantup.com :-)
When I started learning PHP, Netbeans 6.5 had just come out(which is the version at which they started having PHP support). I've stuck with it over the years.
This doesn't explain why OP is using an RC build...
Thank you very much! I think I will do that when I get home.
echo current (explode ('@', $_session ['Email']));
He didn't say he was. It's quite plain to anyone able to read in-between the lines that he is rewriting the code because of the upcoming PHP 5.5 release which will have deprecated ext/mysql.
I agree with pretty much everything you've said (this is a pretty good overview of DI and IoC), except for the part here you intimate that PHP is awful at producing strict code. This isn't a problem with PHP, or its lack of strong typing - it's a problem with programmers being lazy and/or uninformed. It could be argued that PHP makes it easier to be lazy, but at the end of the day it's a programmer's choice.
Having to use explode and a temporary variable was one of my biggest pet peeves about php. Thank you for this. (Although it got better with php 5.4)
I've probably misstated my php skills. I've done a lot of programming before but just not much PHp/web applications. I'm also looking at frameworks such as CI as I go along but I find they are a little too complex for me right now. Thanks for the advice though :) Edit: Also, I disagree with your statement: &gt; I don't know how to drive so I'll build a car in order to learn I would say a better analogy would be: &gt; I want to be a mechanic so I'll build a car from scratch
If folks do publish shit then it wont have many stars or installs. 
I was to understand that regular expressions are generally (if not, always) faster than PHP functions. For that reason, I would use this code: $email = 'abc@gmail.com'; if(preg_match('/^[^\@]+/', $email, $matches)) { $email_start = $matches[0]; echo $email_start; } Although this code looks more daunting, it may be good to know the alternative (and potentially, faster) way to perform this action rather than `substr()` or similar.
The problem with that is that caching can only really handle static stuff (html pages, pre rendered pages,etc). what about registering new users, updating your email address, etc?
Wordpress documentation has also handy coding standards at http://make.wordpress.org/core/handbook/coding-standards/php/ For PHP news I also visit http://planet-php.org/
After a few terrible experiences with netbeans, I have switched to aptana, which is another great free IDE. I love sublime text, but I found the built in FTP to be lacking. 
It's the perfect editor. I went from Zend Studio to Sublime Text 2 trial, and when Sublime Text 3 came out I purchased a license. To anyone reading this, it's the best money you'll ever spend if you're a developer.
For your query on PDO , have a look into https://github.com/auraphp/Aura.Sql . About learning MVC I suggest reading through the README in https://github.com/auraphp/Aura.Router/ https://github.com/auraphp/Aura.Web/ and you will recognize how you can bind those components to make an MVC framework of your own. Also there are good articles http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1 http://symfony.com/doc/2.0/book/from_flat_php_to_symfony2.html
This really is scraping the bottom of the barrel for topics. Come on, people.
Are you looking for this maybe? http://www.php.net/manual/en/function.parse-ini-file.php
FYI, your last code snippet is missing an endif.
I'm just getting back into development after a very long break. One thing I learned way-back-when is that *goto*s are generally bad because they create code that's difficult to follow and debug. Normally there's another way to structure the code to make it cleaner and more predictable. Isn't using returns in this way the same thing as using a goto unnecessarily?
i am a intermediate-ish user, and I probably just use maybe 5% of Sublime Text 2's functionality (various plugins/package control, projects, cmd+p and a few snippets is about it). I can't really imagine it being much better. Do you think I would still benefit from going to Sublime Text 3?
true but short of reinventing the wheel or give away a good business idea that's all there is to talk about with php, really...
No. Sublime Text 2 works fabulously well. If you're not going to use Sublime to it's fullest, then it's probably not worth the upgrade for you.
Json is your friend.
I assume you're talking about a return from an include, and not a return from a function. Using a return from an include's global scope is something that is very rarely (if ever) done. I would agree that if you're using this behavior it points to a problem with how you're building things.
Just FYI you can access the L3 docs [here](http://three.laravel.com/docs). But I agree, they should have versioned URLs for the main docs pages.
I haven't used any cloud, but what's wrong with ec2?
I also mean a return from a function. We were taught that all functions should ideally have only one exit point and that's the return at the *end*. Placing returns other than that was considered generally bad practice since it creates multiple exit points and thus works just like a goto with all the associated gotchas. However, this was C/C++ so I don't know if there are other considerations when it comes to PHP.
I've been using netbeans for years and am very happy with it. What would I have with sublime text that I don't with netbeans?
Assuming you're using Apache as your web server, you want to use mod_rewrite. There's many tutorials online that will help you. Essentially, you map URL patterns to other URLs. A quick Google search that should help you get started: https://www.google.com/search?q=mod_rewrite+beginner+tutorial There is similar functionality in almost every other web server out there with varying levels of difficulty. For example, nginx is incompatible with mod_rewrite, but it isn't too difficult to figure out even though it feels like it is when you're coming from Apache.
I'm sure you are aware of this, but I want to mention it anyway: Keep in mind that most web servers like apache deliver files without a .php extension as plain text. This means if your config file is under your document root, anyone who knows it's there can access the contents. This is particularly undesired if you store database authorization in such a file. You can circumvent this by prepending &lt;?php /* to your file and name it .php. You can strip that first part from the file content and parse just as you would without this measure. 
Alright, I'll look into that, thanks very much! :)
I can really recommend PHPStorm. Probably only use less than a third of the features and it's awesome. I've used IDE's in the past and what always put me off was the speed. Or the lack thereof. PHPStorm just surprised me. It's awesome.
I honestly haven't looked into it much, I just watched some of the GIF's on the sublimetext website and did a little bit of reading. What kind of tasks do the shortkeys take care of? 
JSON really isn't necessary for settings.
in ST2 there's shortcut keys for a lot of things, but they're all defined in JSON, which can make understanding them quite hard (and editing them a little tricky). Each plugin can add new ones (and you can add your own as well). If you want to try PHPStorm, it offers a [30-day trial version](http://www.jetbrains.com/phpstorm/download/).
If by "near future" you mean up to 2 years away.
First, use file_get_contents to open the file. Create an array with each line in it using explode. Use a for loop to go trough each line and use explode again to extract data before and after the = sign. 
What are some lightweight ones you lean towards?
Thanks for your comment. I'm currently playing around with that and it is kind of hard to grasp, but I'll eventually get it, hehe. :)
yeah I also use a mvc framework for projects that don't necessarily need the functionality of a blown out cms, which is most for me. 
I'll give it a shot, but considering how much code I write in my spare time and a personal license is only $99, I'd say it's worth it if the outcome is increased efficiency and speed.
like [slim](http://www.slimframework.com/)
Slim is a good one. Even when I have to write some things from scratch, I at least use some libraries to handle requests. I started this one, but I gotta admit I don't use it that much: https://github.com/danielgsims/pully Sometimes I just want to write some of my own plumbing, but I generally don't for clients. Frameworks help you develop faster.
If you're going to write a from-scratch system, I hope you only do it once. There's really no need to reinvent the wheel every time a CMS-based project comes up.
&gt; bloated/heavily modified CMS I find people use the word bloated when they really mean feature rich or that the item has a higher learning curve. Just because something has a lot of features, or a lot of options, or hell, even contains a lot of code does not make it bloated. Consider software that contains 50k lines of code and uses all 50k to run, or software that contains 250k, but only needs 25k at any time to run. Far too often people will refer to the 250k as evidence of its bloat. On the other hand, people will also use bloat to refer to anything that is more complex than they are used to. Just because something is complex does not make it bloated software. Quite the contrary, I often find in this case, the "bloat" actually does more encourage higher quality software than would otherwise be found. That what people are really calling bloat is their own misunderstanding of what really helps quality. Obviously, exceptions exist.
"feature rich" "Bloated: Excessive in size or amount", **bloated doesn't have to mean bad**, it just means the amount of available features in this case isn't necessary for every job. Niche specific projects doesn't need every feature of a CMS, so why use a cms when you only need a certain piece of it when you can easily write custom code to do the same thing (possibly in a shorter time) rather than trying to mod a cms to do a specific task? That's all I'm trying to get at.
One thing I wanted to add, if you need to Google for more help these are called clean URLs. If you Google for clean URLs you'll get crap loads of tutorials.
Noted! Thanks a lot! :) &lt;3
 &lt;?php foreach(explode("\n",file_get_contents('http://link_to_text_file')) AS $line) { $content = explode("=", $line); $data[$content[0]] = $content[1]; } ?&gt; Can be accessed using *echo $data['allowRegistration'];* for example.
First you complain that he was using ext/mysql, now you're complaining that he's upgrading his code to mysqli, thus future-proofing his code? Yeah, you're just trolling. Good bye. 
I haven't done this myself, but there shouldn't be a problem with any of this. PDO has a MSSQL driver (http://www.php.net/manual/en/pdo.drivers.php). I'm not sure exactly what DLL files you are talking about, but I know that PDO has specific DLL files for each DB so we may be talking about the same thing. Look at PHP.net's documentation for MSSQL for PDO, it should be all you need to make the connection work.
Thanks for the reply, just looked that up. I think it might be possible the only problem is its a module so it is going to be hard to find out where the function is to update the cart but I will have a look. Thanks again
thanks for your input
Not yet mentioned - security. This isn't to say every single CMS/framework out there has 0 exploits, but most have fewer than what the average developer might be able to build together, especially when said developer is focused on not having 'bloat' or 'excessive' lines of code (or, sometimes, focused on speed at all costs). And this isn't saying that many developers can't write good secure code that is safe from common attacks. But many I know *can't*. Following the conventions and practices of a framework or CMS that's already been used by thousands of people for years will give you a higher chance of avoiding security exploits, even if you have to put up with some 'bloat'.
For read-only sites I will usually write all my own code (borrowing heavily from previous sites I have made). For sites that need user accounts and interaction I use a CMS if I can, or an MVC framework. Once you start dealing with account security, access permissions and uploads it's usually better to use something prebuilt. You get security updates, and all the common gotchas should already be taken care of.
I was surprised to not see a [`strtok()`](http://php.net/manual/en/function.strtok.php) example yet... echo strtok('johndoe@aol.com','@'); // johndoe
it depends on you and on the project i guess. how could anybody generalize this? for smaller/private projects i always try new stuff just for fun, it may be counterproductive but who cares, i see new stuff and don't get bored. if it comes to "serious business" you may want to stick with what you are good with... i prefer lightweight frameworks
sublime is very versatile and extendable. also, it has multiple cursors and vintage mode (just to name the two best features imho). i never really used netbeans, so i cannot say, what's better. but i am using sublime text and it's awesome. try it!
This is why I build with Expression Engine. You don't 'modify' anything, you build your site around it. 
Define counterproductive. You'll learn something from using a lightweight framework, but the fastest way to get a CMS site up is still wordpress. 
Yo dawg, I heard you liked template engines, so I made a template engine in your template engine so you can template your templates.
i'm happy with laravel 4 
&gt;I mean, it's not well coded if HTML and PHP is mixed all together, right? No, that's a misconception. You can mix PHP and HTML just fine. PHP itself is a template engine, and template engines like smarty mostly only add another level of abstraction on-top of that, which might, for the most part, be unnecessary. What you should do is separate your business logic from your presentation logic. Look at [Zend\View](http://framework.zend.com/manual/2.0/en/modules/zend.view.quick-start.html) or [Savant](http://phpsavant.com/) for examples. 
Micro Framework- does this just mean lightweight?
Well, all kinds of stuff, opening classes, commenting out selected code, switching lines up and down...
I've inherited a PHP 5.1 site which runs on a windows server and connects to a MSSQL db on different Windows server. I recently updated to 5.3 and had to update the PEAR package that was being used to access the databse. The new package is MDB2: http://pear.php.net/package/MDB2/redirected As for security we're connecting the web server and the db server with a VPN. I love using MDB2. I can easily call stored procedures and build dynamic queries. It was a pain in the ass to get everything working well on the Windows server with PHP and I imagine you'll have a much more easier time getting it going on Apache.
phpDocumentor standards are the norm and are supported best by IDE's. Some of the code in phpDocumentor isn't quite ready for building the best documentation pages (I've apigen is good though). Also, it's kinda in flux (see some differences between https://github.com/phpDocumentor/phpDocumentor2/blob/develop/docs/PSR.md and phpdoc's website) such as use of the "static" type, whether to use @var or @type, etc. My rules are simple: document all exposed items (and non-exposed if you can), no @return void, no need for |null on @params that already default to null, no "array" but always the types (e.g. string[] or (int|float)[] or even mixed[]), no need for english sentences on self-explanatory things (e.g. I have single-line doc block methods like /** @return bool */), etc, etc.
Template inheritance alone is something you cannot do with PHP out of the box which I don't want to live without today. There is a multitude of other reasons to use a template-engine, for example automatic output-escaping. Twig lists quite many reason to use Twig (or any other template engine) on its [project page](http://twig.sensiolabs.org/).
&gt;Template inheritance alone is something you cannot do with PHP out of the box which I don't want to live without today. You can do template inheritance in PHP. If by "out of the box" you mean baked into the language, then you're not really being fair. &gt;Twig lists quite many reason to use Twig (or any other template engine) on its project page. None of which is particularly convincing, nor honest. The above two links I provided should be more than sufficient to disprove it. No-one is suggesting that you should use PHP as-is without appropriate layering, that's quite ridiculous. 
http://apigen.org/ is a pretty good alternative
download the book code bright, it goes in depth for laravel 4
I built [Nest](http://tthomas48.github.io/HTML_Template_Nest/doc/index.html) which I think gives very nice html pages while allowing tag libraries that are just HTML tags. It works much like smarty. So you could do something like this: $view-&gt;addAttribute("greeting", "Hello World"); &lt;html&gt; &lt;bpt:header /&gt; &lt;bpt:body&gt; &lt;h1&gt;${greeting}&lt;/h1&gt; &lt;/bpt:body&gt; &lt;/html&gt; I also heavily use mustache on the client side now.
The real question is, what is wrong with using a framework? The only reason you should not use one, and build your own, is if it doesn't meet your requirements. I see too many guys out there who call themselves 'minimalists' and want not a single line of code that isn't necessary in their code base. Get over it. There will probably be features you don't use but you're going to save yourself tons of hours by starting with something that someone else spent tons of hours coding.
But if you start a using a library for "view"-specific purposes, it really doesn't matter if you use plain PHP or a syntax specific made for this purpose. Every good template engine compiles down to php anyways.
[The quickstart guide](http://laravel.com/docs/quick) should bring you on track, it covers the basics of routeing, models
It's absolutely stupid to try to answer this in general.
&gt;it really doesn't matter if you use plain PHP or a syntax specific made for this purpose. Precisely why one can argue that it adds an unnecessary level of abstraction. It raises the question that, if the abstraction doesn't bring anything to the table other than a different syntax, then why add it at all? I'll be fair and admit that there is one benefit that abstractions have compared to PHP: They can be shared with the client-side. Of course, this only applies to those abstractions which exists on multiple platforms, like mustache, not something like twig, which is PHP-only. This particular use-case is really small, however. All other reasons that has been touted as a benefit with these added abstractions has also been found to apply to PHP as well. Of course, you're free to use whatever you want to, but please don't go around claiming that your method of templating is any better than mine is, when truth be told, it isn't. 
Multiple cursors sounds like a nice feature. I'll have to check that out.
you should add [Rove](http://rove.io/) and [Phuphet](https://puphpet.com/) to the Vagrant section. I haven't used them just yet but they look very promising
It may just be me, but for MOST projects I'd rather use a framework (light or robust) to do most projects. I HATE relying on CMS(s). Not only are their exploits widely known and sometimes difficult to patch, but as you've said, there is a ton of bloat.
For most projects the PHP documentor of choice is absolutely nothing. Far too many 'programmers' release code these days without proper documentation. It makes me sad. The very fact that you're looking for something to help with documentation, however, gives me hope.
I use twig because of. 1 . A template inheritance that works as I expect. 2 . Facility for horizontal reuse of template code via the 'use' function. 4 . Easy to extend by adding functions, filters etc. I don't think it really matters if you use php or a different library. What matters is that the concepts like template inheritance can be used when making templates so that you don't have duplicate code in them. If you can do that with your template engine or with php easily, then I think its enough.
Although it's not an entire MVC framework, I've had a TON of success with [mustache](http://mustache.github.io/). Simple, and easy to learn.
"Counterproductive" is not totally wrong. Of course you can build any website -- simple or complex -- without using a framework. There's nothing a framework does that you can't do without it. But you have to realize that even small projects might have specific needs that would make using a framework a good idea. Let's take an example : You are planning a 5 days project, for a very simple website with a basic user subscription/authentication system, few forms and a few scripts to gather and store the inputs in a simple database. Authentication...writing the code to handle that will take you ~3 hours. Forms...user input...database...this should raise the "SQL injection" flag in your mind. Writing and testing the code to prevent SQL injections will take you ~1 hour. Forms also mean validation...writing the code to validate user inputs and handle the erroneous ones with error messages and all, will take you ~4 hours. So in the 5 days you planned, you have 1 full day of work dedicated to things that aren't the core of what your customer needs (collecting specific data from customers). That's 20% of the time you're supposed to work on that project. While this is perfectly acceptable, and while you are fully capable of doing it well, this is not very smart to do it that way. Because instead of writing all that code, you could use a framework that deals with these things out-of-the-box, and charge 5 days despite you only work for 4 and can spend the 5th one doing something else. So in a way, writing 100% of a project instead of using a framework, can be counter-productive. As usual it heavily depends on the project...
Stack traces are much easier to understand when they reference the code you wrote. 
Most templating systems will work just the way you describe. The only alternative I can think of right now, that works a little differently is XSLT. It combines some XML data with an XSL layout. XSL being a way to describe a layout...in XML. So basically XML with more XML on top of it (just the way it should be, right ? :). I can't say I like this, but it works pretty well and is more widely adopted than some would think. I would advise you to stay around the common PHP templating systems...Modern ones bring templates inheritance, which is a simple yet very powerful mechanism to structure your templates and share/reuse stuff between them. You should have a look at [Twig](http://twig.sensiolabs.org)...it's IMO better than Smarty.
It all depends on budget and timelines. If you have the budget for it and the timeline to do it, why not build it from the ground up? You have to keep in mind that a modern CMS takes care of many things for you that may not be apparent you will need right off the bat. Do you want to have to write document versioning? Do you want to have to write a permissions model? Do you want to have to write a asset manager? Do you want to have to write the whole administration section? (the list goes on and on.. and when it comes down to it yes we all "want" to write these things) With most modern CMS's all you need to do is create your theme and put in your content. If you have to write the whole CMS.. well somebody will undercut your price and do it for a fraction of the amount in a shorter period of time and likely be more reliable.
&gt; I find people use the word bloated when they really mean feature rich or that the item has a higher learning curve. And here I thought it meant 'does a lot of things I don't need it to'. But no, it can't be that, because that's a completely reasonable stance, and what would you attack?
An easy and efficient solution is to have 2 copies of your database, and the ability to select which one your website connects to. Here is how it goes : 1. Copy your production database A to B 2. Run your update scripts on B 3. Ensure all went as planned on B 4. Point your website to B 5. Delete A Or you can even do this at the tables level : 1. Copy your production table A to B 2. Run your update scripts on B 3. Ensure all went as planned on B 4. Rename A to A_old and B to A (takes milliseconds) 5. Delete A_old This off course works best on smaller databases.
or you could simply do something like this &lt;FilesMatch "\.(conf|ini|log)$"&gt; Deny from all &lt;/FilesMatch&gt; and it would throw 403 on files with those extensions, this is in apache, either the conf or .htaccess
Depends on the project but anything I write from scratch now I do in RoR. Cms for any fast php implement that doesn't need much scripting. 
I agree, this is what I was taught me as well. But then again that was Java. My question is do those same rules apply in PHP. I mean i understand it's probably a holly war of sorts because i can see the point to both side of the argument but is there really that much of a performance gain when cutting the codes execution short? I mean if an application is on a server that properly utilizes caching etc is there really any bonus to ending execution early? 
i usually use wordpress as theres a high chance they want a blog anyway, and wordpress is easy to syndicate and easy to abuse as a CMS (especially since it has post types) the wordpress installation is mostly "parallel" i.e. i still built a project specific renderer/portal that is not using any wordpress code, the customer then can use wordpress to manage his content (to which some already are used) but i still have code that is up to my personal standards in the project itself.
I'd go a step further and say that *most* developers write insecure code. With a well known CMS though other people are finding and reporting those issues and people are fixing them, all for "free". If you write the code, it only has a few users at most, and no one is going to do a security review on it or report an exploit.
I am going to look into this for sure! Thank you very much! 
Sounds like you might be interested in [data mappers](http://martinfowler.com/eaaCatalog/dataMapper.html). An example: interface BlogPostMapperInterface { public function findById($id); public function findAll(); public function save(BlogPostInterface $blogPost); } interface BlogPostInterface { public function getId(); public function getTitle(); public function setTitle($title); } $mapper = new BlogPostMapper; // create post $post = new BlogPost; $post-&gt;setTitle('My first blog post!'); $mapper-&gt;save($post); // retrieve a post $post = $mapper-&gt;findById(1); // update post $post-&gt;setTitle('My modified blog post'); $mapper-&gt;save($post); // retrieve all posts $blogposts = $mapper-&gt;findAll(); 
You must not work for the government 
i like the way savant3 is set up, personally, but i haven't used it for any large scale projects yet.
Can you point me at one of these widely known exploits that will let me hack an up-to-date version of wordpress?
Laravel 4 looks like it would be nice for us Django guys that sometimes have to use PHP.
Aha that makes sense! Thanks!
It is a good alternative for documentation generation, but for coding standards it is basically the same thing.
why would you copy it? Just wrap it: function newParse($something) { //extra functionality here return parse_ini_file($something); }
[Phocco](https://github.com/rileydutton/phocco) is a PHP port of [Docco](http://jashkenas.github.io/docco/) and is a nice new take on documentation generation. You should check it out if prefer a side by side formatting of the code and comments. Plus, it looks gorgeous! Edit: Forgot to include [sourcemakeup](http://jquery-jkit.com/sourcemakeup/)
That CMS sounds terrible, use a different one.
It's not with any one specific CMS, it's with all of them. I just don't see the point in having comprehensive features for a small project. A fast web is a happy web.
PDO makes this fairly trivial. Say you have an Interface namespace MyNamespace { /** * Interface DataMap * @package MyNamespace */ interface DataMap { /** * @param \stdClass $obj * @return object */ public static function fromGenericObject(\stdClass $obj); } } Use PDO to fetch objects as a class. Out of the box, doing this will set all of your properties to strings. Using the DataMap interface, an implementation of DataMap using a class User: // MyNamespace DataMap methods // -------------------------------------------------------- /** * Creates a properly instantiated User from a generic object. * * @param \stdClass $obj The generic object to be converted to User * @return User An instance of User */ public static function fromGenericObject(\stdClass $obj) { $ret = new User(); $ret-&gt;id = (int)$obj-&gt;id; $ret-&gt;username = $obj-&gt;username; $ret-&gt;firstname = $obj-&gt;fname; $ret-&gt;lastname = $obj-&gt;lname; $ret-&gt;email = $obj-&gt;email; $ret-&gt;active = (bool)(int)$obj-&gt;active; // is '0' or '1' $ret-&gt;created = $obj-&gt;created; $ret-&gt;_new = false; return $ret; } The PDO wrapper (which has its own copy of a PDO object) can the fetch objects of a specific class, with the class properly instantiated public function fetchObjectOfType($class, $sql) { $args = func_get_args(); array_shift($args); $stmtObj = call_user_func_array(array($this, '_query'), $args); if (false === $stmtObj-&gt;exec) { return null; } $stmt = $stmtObj-&gt;stmt; if (class_exists($class)) { $interfaces = array_values(class_implements($class, false)); if (in_array('MyNamespace\DataMap', $interfaces, true)) { /** @noinspection PhpUndefinedMethodInspection */ $obj = $stmt-&gt;fetchObject(); return $class::fromGenericObject($obj); } } /** @noinspection PhpUndefinedMethodInspection */ return $stmt-&gt;fetchObject($class); } ... private function _query($sql) { try { $stmt = $this-&gt;_pdo-&gt;prepare($sql); $args = array_values(func_get_args()); array_shift($args); $numArgs = count($args); for ($i = 0; $i &lt; $numArgs; $i++) { $p = $i + 1; $t = gettype($args[$i]); switch ($t) { case 'integer': $stmt-&gt;bindValue($p, $args[$i], \PDO::PARAM_INT); break; case 'string': $stmt-&gt;bindValue($p, $args[$i], \PDO::PARAM_STR); break; case 'boolean': $stmt-&gt;bindValue($p, $args[$i], \PDO::PARAM_BOOL); break; case 'array': case 'object': $stmt-&gt;bindValue($p, json_encode($args[$i]), \PDO::PARAM_STR); break; case 'NULL': $stmt-&gt;bindValue($p, null, \PDO::PARAM_NULL); default: $stmt-&gt;bindValue($p, $args[$i], \PDO::PARAM_STR); } } $ret = new \stdClass(); $ret-&gt;stmt = $stmt; $ret-&gt;exec = $stmt-&gt;execute(); return $ret; } catch (\PDOException $ex) { $error = (int)$ex-&gt;getCode(); if (23000 === $error) { throw new UniqueKeyException($ex-&gt;getMessage(), 23000, $ex); } throw new DatabaseException($ex-&gt;getMessage(), (int)$ex-&gt;getCode(), $ex); } }
Any time.
You saved me key strokes.
&gt;Of course you can build any website -- simple or complex -- without using a framework. There's nothing a framework does that you can't do without it. But you have to realize that even small projects might have specific needs that would make using a framework a good idea. I said **CMS**, think joomla, drupla, magento. My counter argument was to use a framework or simply doing the code yourself for specific niche projects.
I do. This is a list of platforms in New Zealand currently running on Silverstripe. Most of this is govt. http://www.silverstripe.org/who-uses-silverstripe-cms/
Read the end of the topic description. 
Indeed. Hated as it is, one of the few plus points about Java is that Javadoc is at least built in the language design so there's an incentive to write documentation (however minimal it generally ends up as).
I didn't see passive aggressiveness in that question. Take it easy. You did state "widely known exploits that are difficult to patch". OP only asked for an current widely known example. Which I would be interested in also. &gt; just because it's widely used doesn't mean there aren't exploits that just haven't been found yet. This is true. In fact their popularity is one reason why their security issues come to the fore. But if your only true concern is security, my response would be this. &gt; just because you wrote it doesn't mean there aren't exploits that just haven't been found yet. All you truly done as far as security goes, is remove the popular part. 
Oh yeah, didn't understand your question the way I should have...nevermind
If you want to go with best practices, don't use events. Events come from frontend/desktop land where user interaction is continious and non-linear. In the PHP request-response wrold you really have just 1 event and that is the HTTP Requests, so you can build clean linear code. Events are a very tempting way of doing things, but they end up as spaghetti code where event listeners are added/removed in random code places. Another bad thing with using events is that they basically allow changing the application flow at runtime or even result in a deadlock (if you have events thrown from event handlers of other events that rely on first events) etc
I guess the advantage would be that because it's an extension, it will perform better than an OAuth package written in PHP. Also, there's more chance of it becoming a standard PHP extension that any other (it's highly unlikely though). The disadvantage is it has to be installed. If you don't have that sort of access, obviously it can't be used. Whenever I have needed to use OAuth, I have personally always used [tmhOAuth](https://github.com/themattharris/tmhOAuth). Is there anything special about it compared to the PECL package? Nope. It works, so that's why I used it. The PECL package also works, so use it if you have access to it.
Always try to keep all your textual files small and autoloaded, because the autoload performance overhead is just nothing compared to the maintainer's cognitive overhead when dealing with and scrolling through a single huge textual file. XML is not going to help either, so switching to a more human-friendly format like JSON will definitely help. 
You have no idea what trolling is. OP posted something that made no sense. He's not actually using 5.5, or at least shouldn't be.
If the project has no chance of ever being updated in the future then you're right, no need to CMS it. But most of the time, if you've done a good job, then a client will come back asking for one thing after another, they want to add SEO, they want to add eCommerce, etc. If you've built on top of a CMS then adding additional features by way of plugins becomes doable, and you've left the door open for future work. Another reason is that building from the ground up is a waste of time, once you lose interest in that part of the coding process, it will feel very unrewarding. When you get to that point in your career, going with something where most of the features are prefabricated is a lot more efficient and enjoyable.
It's not so much for a performance gain than to shorten or simplify the code.
If i'm not using mappers, I will return an array of objects, then you iterate over them as per you second example. Pro Tip: You can define an array of objects in your docblock so you dont lose visibility of what your method is retuning. Most modern IDE's will pick this up so you don't break your auto-complete, it amazes me how many people don't know this. EG: A method return an array of blogpost objects would have a docblock like this: /** * @return Blogpost[] * */ 
&gt;If you want to go with best practices, don't use events. That has to be the most silly thing I've heard all day. Event dispatching is the norm nowadays, and that's a good thing. 
If there was no passive aggressiveness formulated from that response, then I suppose I'll say that I'm sorry. ;) True, again. However, because I did write it I would have intimate knowledge of the entire code, not just forward facing functions and classes like you normally see with a CMS (like wordpress) and would be able to pretty accurately 'lockdown' features that could possibly be exploitable until it's fully tested for exploits. Again, not perfect; but what in our field is?
So you say: &gt; I was told that it was counterproductive to build my sites from the ground up rather than using a (modified) CMS. Which without context is a pretty hard to say if the person who told you that is wrong. For all we know this was a discussion about a series of projects that are all similar, and all have a need for a plethora or common functionality found in any number of CMS systems. And that's it. In which case, the advice was probably well founded. If you were told this as a broad blanket statement on how to be a developer, this person is either very lazy, very inexperienced, or both. Not in the realm of developing, but in the realm of knowing that no CMS, framework or language will ever be the best way to provide a solution to your client. On top of that, there are environmental concerns to be weighed. Server stack, what works for you, talent pool, support and resources. The list goes on. For example: I work in enterprise development built on systems ranging from hand-rolled (raw PHP) MVC frameworks, to Symfony2. I have just inherited a rather large website built on a popular CMS. A CMS I love to use and extend, and have done so for many projects. Although this implementation is solid, and really quite well done, I feel that the decision to use this CMS for such a huge project was a bad choice. Not because the CMS or underlying framework is bad/insecure/difficult. But because the primary benefit of choosing a CMS over a hand rolled solution is lost when you find yourself fighting against said CMS to give the customer what they need. The bespoke nature of the application steps well beyond the core benefits of the CMS when weighed against the flexibility of building a completely tailored solution with just a framework at it's heart. (in fairness, the reason why I love this CMS is that it has an MVC framework at it's heart. Just not as powerful as others) The point is, there is no one foundational solution to all problem cases. No good developer should ever find themselves in a position of thinking that system X is the answer to all needs as a developer. A good developer has a toolkit, and enough knowledge of each tool's strengths and weaknesses to rapidly get a picture of which tool is more suitable to act as a solution as they read the spec.
nope, that's perfectly fine. You might want to add something about the context of the status to the variable name; eg is it the server's status or a user account status?
&gt; Does it make sense to call the function as a variable with the same name of status? If you are referring to that in the function you are returning the value in a variable called **$status** and you are later assigning that returned value to an outside variable names **$status**, then, assuming that the code in the function is not working directly with the outside copy (either by using **global** or getting it passed by reference in an argument), nothing is wrong with that.
Silver bullets. My experience is that if you are doing something boring then a CMS or at least a MVC can make things go really quickly. But if your project is unusual I find that what happens is that you get to 90% done using the CMS in no time at all and then you spend 180% of your time trying to finish; often by removing the CMS. 
The term you are looking for is "scope". The scope of the first $status in your example expires at the closing brace. After that, it's like it didn't exist. So there's no problem re-using the variable name in a different scope.
The argument would be that its not doing all those things you dont need. A properly done CMS will only use the features you enabled that you do need.
That's a really interesting way of doing it. So you just hook up a different Php app to the Wordpress database in order to serve the front end?
This is all very subjective, but to call every single CMS ever heavy and bloated is entirely ridiculous.
Could you name some that you believe are not bloated?
Thanks for your post
There's no real benefit in using an extension for Oauth, but there's a few reasons not to. I know the first thought most of us have is, "Hey, it's an extension, so it must be better, and faster!", but Oauth isn't cpu intensive, so there's little to be gained from using an extension, and you're sacrificing flexibility.
here are some links that i found enlightening , they all involve the HttpKernelInterface from symfony. This is being adopted by all sorts of projects these days like laravel4, drupal, and ezpublish. You can see the advantages here: http://www.reddit.com/r/PHP/comments/1ez51s/stack_httpkernelinterface_based_middlewares/ http://stackphp.com https://igor.io/2013/02/02/http-kernel-middlewares.html and an example of how to create a basic framework on top (step by step) http://fabien.potencier.org/article/53/create-your-own-framework-on-top-of-the-symfony2-components-part-1 
Pyrocms, bolt.cm and elefant.
Just to clarify, slim is a light weight mvc - not a cms! Though it can handle bundles that can create a cms using composer 
I'll give you Bolt, but I can't consciously agree with PyroCMS and Elefant. Sorry.
I use [Doxygen](http://www.stack.nl/~dimitri/doxygen/) and love it. Go with Doxygen.
What makes them bloated and how does Bolt differ?
yeah, perfectly and the best practice. :)
As I grow older and more cantankerous, I have come to realize something: I probably suck at the parts that do all the real sensitive stuff more than I think, and I don't really like doing them anyway. I am tired and lazy now, and this makes me a better developer. I will allow someone else to reinvent those wheels so that I can get back to reddit faster.
Chances are, even if your custom built project has a handful of security holes, a script kiddie isn't going to break in through a known exploit like you would on a more popular framework. If you do have a professional black hat on your ass, you might have larger problems to worry about 
Easy, by attaching handlers impplicitly and actually using OOP. E.g. class Post{ protected $plugins = array( Plugin classes, function etc ); } Or you can use an array to define them implicitly elsewhere. This would still keep your flow linear.
I just downloaded the latest source for Zend Framework 2 and Symfony 2 framework. They both use regular phpDoc style comments. So if the two big players are using phpDoc style comments I would stick with that. There'll also be other tools around to convert the phpDoc style comments into various formats for your documentation (someone mentioned apigen.org already). Also it works really nicely with NetBeans and probably some other IDEs. If I've documented a method properly with phpDoc, then I call that method from another place, Netbeans picks it up and gives me 'intellisense' on it (the method signature details etc). It's like using Visual Studio and C#. So good. You'd have to be nuts to go with some random comment format that only one tool to convert those comments into documentation. What happens if everyone stops using that tool? You going to convert all your comments to something else? Too much work.
Ooh! Thanks very much! This looks easier! :)
This is another case for "the right tool for the right job". If you don't have a lot of templates, you don't need a full fledged template engine. It's the same as you don't need a full-stack framework or a CMS for a website with only 4 pages. I'm really in favor of using PHP as a template engine (with a savant style construct) rather than using something like twig or smarty. But there are definetly use-cases for template engines.
I was looking for some conclusion in the end..
Anyone try wave? Seems interesting but might have a large learning curve. 
Here is an article from a little while back: http://web.appstorm.net/roundups/data-management-roundups/8-fantastic-lightweight-cmses-you-should-try/ Most of those are still active. Newcomers include Statamic, CraftCMS and plenty of others. Whenever you say "All X's are Y" you are wrong. 
Guzzle is a HTTP Client, and has nothing to do with REST APIs whatsoever.
"More flexible" is a bit of a misnomer. If you're in complete control of your server, and it will only ever be installed on that server, then there is no harm in using some PECL. If you're using Chef or Puppet its just another line in your manifest/recipe. If you're making distributed open source software then definitely go with a composer package instead.
I really don't like calling a method then having to go hunting for a property to know where that result is. If you call a method, return a value. Automatically "objectify" each of those rows to save yet more method calls.
If you're using ubuntu, it's apt-get install php5-sybase It will work for simple query. You're going to run into problems if you have to use stored procedures. 
Yo philipobenito, I'm really happy for you… I'll let you finish. But [PuPHPet](https://puphpet.com) has a 30 second LAMP (and LEMP, and LNPP) stack! A 30 second stack!
There's a difference between security exploit and gaping hole lol. That's just carelessness on the developer's part. 
Just curious, what features do you feel it lacks? I have been using it for going on 4 years (and don't use over half of the features it does have). Not knocking how you feel about it, just curious.
This basically is same as event dispatching? Isn't it, in this case, you just limit down the scope to specific class only. Your `Post` object still need to loop through the plugins array and invoke them at some point like // inside of the Post class public function save() { foreach ($this-&gt;plugins as $p) { $p-&gt;preSavePost($this); } foreach ($this-&gt;plugins as $p) { $p-&gt;postSavePost($this); } } In this case, your plugins are still modifying the application runtime. I don't really see how can you avoid your plugin modify your application flow and still allow them to add functionality. 
I like Slim it's soooo easy. Learning laravel 4 soon...
I started one as a side project a while ago. Main focuses were to make routing to auto-loaded classes easy and to have request and response classes make working with headers, status codes, etc. a little easier. The request class has cURL functionality built into it, too. Feel free to check it out: https://github.com/pjdietz/wellrested 
So using your suggestions and the suggestions of /u/Fubseh would the following be more proper? class BlogPost { private $title; public function __set($property, $value) { // perform checks $this-&gt;$property = $value; } public static function findByKeyword($kw) { // do DB query $blogPosts = array(); foreach($result as $row) { $post = new BlogPost(); foreach($row as $key =&gt; $value) { $post-&gt;$key = $value; } $blogPosts[] = $post; } return $blogPosts; } } Or would the static method ideally be placed elsewhere? I know you said static methods should be avoided; this is just an example to see if I understood what you're saying. Thanks!
Laravel is simply beautiful, it's quite easy to use, I've used codeigniter, yii, django, I have tried to learn several others like cakephp, webpy, ruby on rails... I've found laravel quite intuitive. Would definitely recomend it.
By more flexible, I mean you have the power to fix critical bugs yourself. Unless you have a C guy on your team and you're comfortable modifying and building extensions, you're up a creek without a paddle if you find a show stopper bug in the extension. 
Yes that's what I meant. :)
One handler, most mvc uses a Singleton design pattern to insure 1 handler. Creating database connection is really really resource intensive and it's better to pass around one.
You sure it's not the strategy pattern? Cuz he's manually setting it's api, ie choosing a strategy? http://en.wikipedia.org/wiki/Strategy_pattern I groked over the adapter pattern, I'll read it more in depth when I get the time \&gt;___&lt;. Edit: Wow, you're right, this pattern (Adapter pattern) is actually neat. Thank you!
Ah, I hadn't stumbled on that yet, I suppose `key` and `count` isn't so bad though. 
Yes, though it was more a chasm than even a hole, in this case. 
Yeah, I suddenly had the realisation that PHP uses pointers so I've just used that.
It is fine since the two $status dont point to the same variable. now if you were to use Wordpress and do this i would be carefull how variables are named since wordpress uses global variables ( which is a bad practice ).
Thank you all for your answers!
Not any features that I care about (I use phped on a daily basis and own but wouldn't touch phpstorm), but if you look at phpstorm with its git support, framework support, etc you can see which ide has more 'modern' features 
I use Glesys.se which is a swedish based provider, maybe a bit more expensive than digital ocean but definately worth a checkup! http://www.glesys.com/vps.php You may customize your VPS a lot more than for example on digital ocean (from what I can see) and it's super easy to change it during runtime. I recommend OpenVZ for php apps, but it does not work at all for jvm-languages.
I really like it, but they fucked up with the documentation really bad. I have 2 L3 apps which I probably won't update. 
Just for completeness' sake... // Add some more validation yourself ... :) $settings = []; foreach (file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) { list($key, $value) = explode('=', $line, 2); $settings[$key] = $value; }
not sure if you are asking something more complex, but could it be that you are just wanting to load something for a subdirectory for the domain? like example.com/blog .... in which case you would just put a file called index.html or index.php in that directory and it will auto-load if you refere people to example.com/blog in your link....
Man, something like this is really annoying to me $registeredToday = User::where('created_at', '=', new DateTime())-&gt;get(); One little change of the where function would save a lot of typing over the course of the project(s). function where($column, $value, $operator = '=') Boom. Everyone gets to save 7 or so keystrokes most of the time they use where.
In the past years we have various written codeigniter applications (frontends, extranet, api) working with common models, handlers etc. Now I need to rewrite our old API to a RESTfull one. I rather make it in laravel or slim, but I have to rewrite so many common models which other-ways can be easily used if I create a codeigniter API. But I don't want to ( not to mention the client won't pay for the extra hours prolly ):( Anyone know if I could use those codeigniter models within another REST API framework?
Guess I've been using the data mapper design pattern all along. In my regular MVC framework I replaced the "Model" part and created mappers (I called handlers) which handled my data and "objectify" this data as actual models (in stead of models just returning database objects on request). Lets call it a Model – Mapper - View – Controller application I'm always having trouble getting outside the one-to-one mapping though, especially when I have a huge domain with lots of models with a lot of relations. Do you know of any good examples of data mapping pattern with a lot of multiple model relations? 
I would highly recommend line 4 of that being: $content = explode("=", $line, 2); So that settings that happen to have an equals in them get parsed properly.
Have you tried something like this: [Codeigniter Rest Server](https://github.com/philsturgeon/codeigniter-restserver)?
A friend suggested the exact same thing. I didn't think about it. I tend to go for the complex solutions, lol. &gt;&lt;
This, I used to work for a small property agent. I charged them just $500 because all they basically want is a nice website and they already have all the contents for the website. * Simple HTML * A downloadable floor plan * Does not mind the site is from themeforest All I needed was change some pictures, scan and change the logo for the property and basically everything is done. If the client is okay with coming to my place to work with me on the site while he does his paperwork beside me. I have pushed up an entire live site within 4 hours. $500 for 4 hours of work, it's pretty alright I believe. :D
I've used [Sami](http://fabien.potencier.org/article/63/sami-yet-another-php-api-documentation-generator) for a couple of projects. It doesn't seem to be very popular, but works well enough, and I like it's incremental update feature.
Look at fuelphp. It's codeignighters smarter more handsome grandson
"Guzzle is a PHP HTTP client &amp; framework for building RESTful web service clients." I think it's kind of nice he included something for the consuming side of REST APIs.
Fact. You either get stuck maintaining the damned thing, securing it, and migrating it to newer platforms. As a developer, you narrow your skills and marketability, depending on your career options, and also restrict the ability of new coders coming in to pick up and be efficient. And frankly, i always think twice before even accepting an interview with a company that has its own homegrown system. Often they're looking to replace someone who quit or to relieve someone hating life, and you'll be the new on call, all the time guy
PS - I would do this with Drupal in about 45 minutes. 
I have been using Phil's Rest server in production for about a year now and have to say that I'm quite happy with it.
Get out of my head! I was thinking the exact same thing. 8 years ago when I jumped into the development world, I had a big case of "if I didn't write it, it's shit" attitude. I spent more time re-inventing the wheel everytime I took on a project. Since discovering how much more productive frameworks and CMS tools can make me look with much less effort on my part, life has been better.
Looking at your specific example, what you really need is an MVC framework with built-in form handling, such as Laravel. Having to explicitly set values for input fields etc. is an unnecessary hassle. Incidentally, you may find this useful: https://github.com/darkimmortal/Laravel4-SmartyView
Thanks for the plug mate!
You can do that with a view or a simple sql statement. You state you have different tables for each game. Why don't you combine all the games into 1 table so you don't keep making the same table over and over again.
Well I am reusing the same structure, but the data is different each game. What SQL statements should I be using I be using and where can I find view in phpmyadmin?
http://dev.mysql.com/doc/refman/5.0/en/create-view.html Basically, a view is a predetermined select. 
I would rather have clean code than commented code. I worked with one guy who either didn't indent or indented in a way which was completely unreadable. If he missed a parenthesis, we would have to spend ten minutes realigning everything just to get to a point where we could find the missing parenthesis. Obviously, both would be great, but I'll take clean, readable code any day of the week.
Clean code. Always. I feel like reading clean code would eliminate the need for much commenting. Going back and changing, debugging, etc would all be easier if you could not only see comments but what the hell was actually going down.
I've learned to enjoy writing similar to how Robert Martin outlines in his book, [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) If I were to write this specific code by it, it would look something like this: function retrieve_all_items_from_storage() { $result = DB::select("SELECT id, item, description, cost FROM items"); return $result; } function format_item(&amp;$item) { $item-&gt;item = "Hello " . $item-&gt;item; } function get_all_items() { $items = retrieve_all_items_from_storage(); if(empty($items)) { return array(); } foreach($items as $item) { format_item($item); } return $items; } However, I would never write my example into my own projects because there would be a lot more complexity to it. For instance, I would have the retrieve_all_items_from_storage implement a data mapper, and have it return a Collection object, where I would do $itemCollection-&gt;isEmpty() instead of empty($items). It would also be organized into a multiple classes because of the nature of the functions. So while this is not something I would condone in your software, I firmly believe it is almost always better to have your method names define what a block of code does, rather than jamming it all into a function and commenting it out. -- Edit -- I seemed to have missed the original question. If I had to pick, I would say the second block of code for similar reasons to what I outlined above.
I'd definitely prefer the clean code guy. Good comments are nice to have, but easily readable code is absolutely essential as far as I'm concerned. With PHP there's really no reason to "save space" like what your first example is doing.
I would choose clean code if I had to pick one, but I agree with you. For example, when writing Python, I break the style guide on tiny little `if` statements because I think this looks stupid: if y &gt; 10: x += 1 And I think this looks just fine: if y &gt; 10: x += 1 Any more than one line and I'll split it up, but otherwise I say one line is just fine. I don't feel any differently when I write PHP. Any programmer worth their salt can read single line conditionals just fine.
I think clean code is preferable. However, this also isn't the greatest example because the comments in the first one dont really add to the understanding of it. They mostly come off as noise to me.
"do you guys like shitty code like 'if(count($items)&gt;2) foreach ($items as $k=&gt;$item) {', or do you prefer clean code?" This question is too biased to be useful, and both pieces of code are written confusingly (*item* is both a field and a row? Come on dude). This is how I would write it, and I would name the variables correctly so that it would be self-commenting. return array_map( function($item) { return (object) array('itemField' =&gt; 'Hello ' . $item['itemField']); }, DB::select("SELECT id, item, description, cost FROM items") );
the big thing is organization and naming conventions. if you have those two things i can find what i'm looking for and start to make assumptions without needing to read line by line.
clean code often doesn't require much commenting because it explains itself.
Sure, it says "RESTful web service client", so its a client and not something you use to build you API. That was the goal of the article afterall: &gt; Therefore, herewith a compiled list of some most popular and actively developed PHP REST API frameworks worth consideration and further evaluation on your project basis: Guzzle does not fit into that at all, so this article is comparing apples with... people who eat apples. Besides, Michael choosing to use "RESTful" in the Guzzle slogan is a weird one. A HTTP client can interact with a RESTful API server because REST is a set of rules which work within HTTP. It could also interact with SOAP or XMP-RPC or JSON-RPC or WhateverTheHell and still just be a HTTP client. "REST" is trendy though, just like the word "framework". ;)
Comments are only valuable if they say something beyond the obvious. "Iterates through items" is only useful if you've never looked at code before. If there was something odd about how you are iterating through the array, then it should be commented regardless of how clean the code is Edit: I should say I can tell at a glance what example #2 does (granted, I've seen a LOT of PHP, so the thing practically already reads like English anyway), but with example #1, I need to read over each line because the comments gave me a false notion that something tricky was being done. It ended up waisting my time. 
The comments are pointless. I can see its iterating through a data set. Go with the clean code.
PHP doesn't use pointers, it uses references. There is a huge difference ^^
Demo here: http://booksmithy.org/
These comments are literally useless, they add no value: //-- get the items //-- iterates through items They just restate the code exactly. The only comment of value in both examples is the first one. 
Second one, no doubt. I believe code should be self-explenatory, especially in function or variable names. Comments are there to explain something which the function or variable name cannot do on its own.
Not only is it rather pointless to show the code for this (it won't have any real use to anyone), the rather simplistic PHP portion could have been written a hell of a lot better.
Title states "simple". I share it just in case somebody is interested. If you are interested then go ahead and improve it. If not then please keep comments like "could have been written a hell of a lot better" to yourself as they are not constructive.
You could also check out [Silex](http://silex.sensiolabs.org/).
hmm.. the question was more about the style and comments, not about the code itself. I wrote whatever came to me first in a couple of secs. Calm down, son. 