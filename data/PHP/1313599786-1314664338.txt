I have a related question regarding a project I'll be doing soon. Would you write XML just by outputting text or is it better to use some kind of a library?
What exactly don't you like, if you don't mind me asking? I've thought the validation rules in the model are mostly a pretty good system, for instance... 
Well, if you would have read the article, you would have seen why I made that assertion...
I would argue the exact opposite. This advice is more important to those sites that doe not make use of good security practices. Those are the ones who will have a vulnerability that will enable this style of attack. And the whole point was simply salting a hash is not enough, as that's not resistant to brute forcing at all...
This is how I personally work with designers (I currently do freelance work for a _very_ high end design firm): Spec out everything. Get on the phone (works best for me) and talk about every button (link, action, whatever) and how it should react to user input, page loading, AJAX interaction. Get documents on everything that is to take place in the web application so that your talks are organized. I then leave it up to them to design it. They are in charge of usability. It's what they are there for. Then I usually go off and do some prototyping/library building on the backend until I have something to work with on the frontend. EDIT: once you have something to work with make sure you note _any_ problems immediately and share it with the designer. The sooner you have all problems out in the open the better/quicker the project will move forward. Sidenote: If you are using a framework and they are going to be working along side you, make sure they know you will most likely break things out (header, footer, body, nav, sidebar, etc)... This can throw a lot of designers off as they are used to adjusting just one file.
Could you put everything together. Then render all the views in a browser, with blank css and send them the html source for that. Then they can create the css file without worrying about all the views.
Create and agree on a set of [wireframes](http://en.wikipedia.org/wiki/Website_wireframe) before anything.
Well, generally they'll send me a bunch of full HTML files with the js/css and then I will go through ripping the pieces out and putting them in their respective views. At this point (if they work in the repository or on the server) they need to know where to go to edit the files if they need to. Otherwise they'll just send new updates of the full file and I'll take the updates out and put them in the views for them. All depends on how competent the designer is with Frameworks.
Can you explain why you like cake better? I'm a fuel guy myself but I would like to understand its shortcomings to other frameworks so I can help make it better.
Thanks man! Alot of useful info!
Use smarty. Have the designer give you html + css mock-ups generated in dreamweaver the way that he wants them. Then you change them into templates and embed smarty tags and minimal PHP logic. If at all possible meet with him in person to discuss and storyboard the flow of your app. 
Also, if anyone has any tips/tricks about how to get past the damned windows live login, that would be awesome.
I would also ask the designer if they have a preferred method of collaboration, and how much PHP experience they have. If they know PHP then they may want you to simply make the data available in array/variable's and they'll handle the rest.
&gt;Use smarty This suggestion made me want to cry.
Can you explain why? I've come across many complaints against Smarty and the argument almost always boils down to "Because I don't like it".
generated in WHAT!
Programmer here. I stopped caring what Designers use a long time ago. Not my problem: don't care, don't want to care. If they need to change some layout, the Designer just gives me a new web page and I spend about 10 minutes copy and pasting smarty tags. That's a much more appealing solution to me than spending half the day digging through div tags and playing with css properties. 
Problem number 1 - we can't connect to your 'localhost'.
can you provide the source code you're using, and a mysqldump of your table?
**Sure. My CSV looks like this.** "id","name","address","lat","long","coordinates" *[I've populated it with 1 entry which successfully loaded to the database]* **I created my table using the commands:** CREATE TABLE `markers` ( `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY , `name` VARCHAR( 60 ) NOT NULL , `address` VARCHAR( 80 ) NOT NULL , `lat` FLOAT( 10, 6 ) NOT NULL , `long` FLOAT( 10, 6 ) NOT NULL , `coordinates` VARCHAR( 4500 ) NOT NULL ) ENGINE = MYISAM ; **I then use this php script named "phpsqlajax_genxml2.php" [and where I'm getting the error]** &lt;?php require("phpsqlajax_dbinfo.php"); function parseToXML($htmlStr) { $xmlStr=str_replace('&lt;','&amp;lt;',$htmlStr); $xmlStr=str_replace('&gt;','&amp;gt;',$xmlStr); $xmlStr=str_replace('"','&amp;quot;',$xmlStr); $xmlStr=str_replace("'",'&amp;#39;',$xmlStr); $xmlStr=str_replace("&amp;",'&amp;amp;',$xmlStr); return $xmlStr; } // Opens a connection to a MySQL server $connection=mysql_connect (localhost, $username, $password); if (!$connection) { die('Not connected : ' . mysql_error()); } // Set the active MySQL database $db_selected = mysql_select_db($database, $connection); if (!$db_selected) { die ('Can\'t use db : ' . mysql_error()); } // Select all the rows in the markers table $query = "SELECT * FROM markers WHERE 1"; $result = mysql_query($query); if (!$result) { die('Invalid query: ' . mysql_error()); } header("Content-type: text/xml"); // Start XML file, echo parent node echo '&lt;markers&gt;'; // Iterate through the rows, printing XML nodes for each while ($row = @mysql_fetch_assoc($result)){ // ADD TO XML DOCUMENT NODE echo '&lt;marker '; echo 'name="' . parseToXML($row['name']) . '" '; echo 'address="' . parseToXML($row['address']) . '" '; echo 'lat="' . $row['lat'] . '" '; echo 'lng="' . $row['lng'] . '" '; echo 'type="' . $row['type'] . '" '; echo '/&gt;'; } // End XML file echo '&lt;/markers&gt;'; ?&gt; **When I browse to that script (phpsqlajax_genxml2.php) I get the following:** ***This page contains the following errors: error on line 2 at column 1: Extra content at the end of the document Below is a rendering of the page up to the first error.*** and if it's any help... the page is blank.. The only html listed is a line break &lt;br&gt;...&lt;/br&gt; 
ok let me set this up on my laptop and see what I get when I run it
Because smarty's template system is a meta language that doesn't need to be there. All it does is recreate something that php already innately does. Then it turns around and quite pointlessly translates it back in to php. The issue with smarty is that it adds an additional layer of complexity for no good reason. It does not make anything appreciably easier, and it ensures the learning curve is higher because you wind up having to learn smarty when you could just use the php you already know. What makes more sense to you? 1) Me giving you instructions in English, which you then execute or 2) Me giving you instructions in Swahili, which you translate to English, then execute
Remember to include the "phpsqlajax_dbinfo.php" it will look like this &lt;? $username="username"; $password="password"; $database="username-databaseName"; ?&gt; **edit: also thank you so much for doing so**
Guess I can't read 
We use [balsamiq mockups](http://balsamiq.com/products/mockups) at work. It has a free trial and is really easy to use.
both examples worked flawlessly for me. The only way I could reproduce the error was when I omitted the root tags by commenting out these 2 lines echo '&lt;markers&gt;'; echo '&lt;/markers&gt;'; make sure they aren't commented out, and make sure they aren't on the same line as the comment that is prefixed with "//". Below is the exact code I used (I hardcoded the username, password, and database name): &lt;?php function parseToXML($htmlStr) { $xmlStr=str_replace('&lt;','&amp;lt;',$htmlStr); $xmlStr=str_replace('&gt;','&amp;gt;',$xmlStr); $xmlStr=str_replace('"','&amp;quot;',$xmlStr); $xmlStr=str_replace("'",'&amp;#39;',$xmlStr); $xmlStr=str_replace("&amp;",'&amp;amp;',$xmlStr); return $xmlStr; } $connection=mysql_connect ("localhost", "web", "supersecretpassword"); if (!$connection) { die('Not connected : ' . mysql_error()); } $db_selected = mysql_select_db("databaseName", $connection); if (!$db_selected) { die ('Can\'t use db : ' . mysql_error()); } $query = "SELECT * FROM markers WHERE 1"; $result = mysql_query($query); if (!$result) { die('Invalid query: ' . mysql_error()); } header("Content-type: text/xml"); echo '&lt;markers&gt;'; while ($row = @mysql_fetch_assoc($result)){ echo '&lt;marker '; echo 'name="' . parseToXML($row['name']) . '" '; echo 'address="' . parseToXML($row['address']) . '" '; echo 'lat="' . $row['lat'] . '" '; echo 'long="' . $row['long'] . '" '; echo '/&gt;'; } echo '&lt;/markers&gt;'; ?&gt;
That's a bad example, because (to me) Smarty is ridiculously easy to learn. The first time I used it, it literally took me 10 minutes. It's actually almost verbatim the same argument that I've heard before. I'll grant that it's your personal preference, but allow me to rebut. 1) Templating is a valid concept to have, and in fact, the concept exists in other languages (Java and .NET). The fact is that on the web as a platform, separation of presentation layout from the presentation data is a great thing. 2) Translating back to PHP is not a bad thing. Java JSP's *just translate* back to a Servlet, I believe the same is true for ASP.NET. 3) Yes, you could technically implement a Templating system in PHP. Again, this is true of other platforms as well. The problem, unfortunately, is that it's far too easy to sneak business logic into your presentation code, where as to do this in Smarty (while possible) is quite cumbersome. This is exactly what a good language and framework *should* do: i.e. make best practice things easy, and make hackerish things hard and ugly-looking.
&gt; That's a bad example, because (to me) Smarty is ridiculously easy to learn. The first time I used it, it literally took me 10 minutes. 10 minutes you wouldn't need to spend if you were using php directly. To be clear, this doesn't mean "no templating". It means "no meta languages for templating". &gt;1) Templating is a valid concept to have, and in fact, the concept exists in other languages (Java and .NET). The fact is that on the web, separation of presentation layout from the presentation data is a great thing. I'm not arguing templating (I should have made this more clear), I'm arguing against the method used for templating. For example, [this](http://codeangel.org/articles/simple-php-template-engine.html) is a decent example of a simple template rendering system that doesn't require a meta language. &gt;2) Translating back to PHP is not a bad thing. Java JSP's just translate back to a Servlet, I believe the same is true for ASP.NET. Just because other things do it, doesn't mean it's the right way to go about things. &gt;3) Yes, you could technically implement a Templating system in PHP. Again, this is true of other platforms as well. The problem, unfortunately, is that it's far too easy to sneak business logic into your presentation code, where as to do this in Smarty (while possible) is quite cumbersome. This is exactly what a good language and framework should do: i.e. make best practice things easy, and make hackerish things hard and ugly-looking. This isn't a problem with php, it's a problem with your programmer. If he can't tell the difference between presentation and business logic, you need a new programmer.
that doesn't actually resolve anything. Model by definition is the logic encapsulating your data. Kohana keeps this nice and seperate by having regular classes, you could also call these libraries. Our ORM library is extended by a model class, which makes that a model layer for a specific table. Any custom functionality related to that model is in that model class. Now I can see a Form being a model, as a form is data you need to work with and validate. But what you're not realizing, is there is html being done outside of a view, that form library render function is handling custom html all in the backend. The problem here though is form data while it could be considered a model a controller should handle all user input, which form data is clearly input. If anything a controller would be necessary to send a form model the input in question What a good form library needs: * Ability to easily communicate the data with a model, regardless if an ORM is used or not. * Ability to produce canned html * Ability to EASILY produce completely custom html on a case by case basis * Ability to EASILY reuse completely custom html(or even parts of it) in other forms. * ORM or other type library still needs to deal with validation before saving, since there are most likely strict rules about what can enter the database. So here's the real solution to this problem, because you need Model View and Controller to properly resolve validation: HMVC. With HMVC, you can easily make the whole process follow MVC. You can also make it as flexible as you need it, and finally you can easily make a canned form HMVC request which handles basic forms.
Any way to get more than just the last 5 games played? I'd like to be able to see the last time I played any of my games...
I bloody love frameworks
Seems there are a few things that can cause this. Your code... I can barely read, due to formatting, but if it is the same code MMDeveloper posted and you're still having issues, then my guess would be you have a newline character or BOM at the end of the file where one shouldn't be. Delete any extra whitespace and try leaving off the closing ?&gt;
Hmmm. I'm still not getting her to work. Are you using XAMPP? I wonder if a different server technology would be more efficient? *edit: and WOW thank you for spending the time to do this*
&gt; 10 minutes you wouldn't need to spend if you were using php directly. To be clear, this doesn't mean "no templating". It means "no meta languages for templating". Fair enough. But I consider that 10 minute spent **one time** a valid trade-off for years of time pulling my hair out debugging layout issues within PHP output. &gt; I'm not arguing templating (I should have made this more clear), I'm arguing against the method used for templating. For example, this is a decent example of a simple template rendering system that doesn't require a meta language. Again, this solution works if you're always just using echo statements and being disciplined at keeping business logic out of your presentation page. That's fine. But there will come a time, say at 3am when the app is crashing and people are screaming at you because the site's down, when you'll be tempted to sneak a few method calls in there, just for now. Or your company decides to hire the CEO's nephew as a programming intern, or they outsource part of the code to a Russian outfit, etc... And then before you know it, your presentation layer is a mess. I've seen it happen. &gt; Just because other things do it, doesn't mean it's the right way to go about things. No, but if lots of other things and other people do it. They might be onto something. &gt; This isn't a problem with php, it's a problem with your programmer. If he can't tell the difference between presentation and business logic, you need a new programmer. Easier said than done. Our Senior Dev is leaving us and moving out of the country, and we've been looking for a replacement for the better part of a year. We still haven't found anyone that matches the requirements. On the more serious side, this is a rather flippant answer to a more serious problem: i.e. "If you do XYZ wrong, you need a better programmer". The thing is, programmers are human and make mistakes. If this logic is true, then we might as well be programming in C since it's technically possible to build a web app &amp; templating engine in that language as well. The role of a good language/framework *has* to be to enforce good programming practices. Otherwise, why have *private*, *protected*, and *public* member methods and vars? Couldn't you argue that it's the programmer's fault for accessing methods which are meant to be private? A good programming language &amp; framework cordons the programmer off into the realm of good practices, so that he actually has to make an effort to do something hackerish (like sneaking PHP code into a Smarty template), and even then it should scream *this is a really ugly hack*.
I'm just using a standard LAMP install. I have a WAMP install on a desktop in the back of the house and the same code works fine there too. arandomgeek made a good point though. are there any special characters in your test record? Any newlines, non-alphanumeric characters, etc? I'm not sure a different server technology would make a difference because this error is an XML malformation error, not necessarily a syntax error in your PHP.. This is a logical coding error which is dumping out a malformed XML document which is causing the error you're seeing. Try changing out the "header" line and seeing what the "XML Output" really is. Maybe that will give you a hint as to what the issue is. header("Content-type: text/plain");
&gt;Fair enough. But I consider that 10 minute spent one time a valid trade-off for years of time pulling my hair out debugging layout issues within PHP output. Why would you have issues with PHP output? Can you give an example. This doesnt make sense to me 
designers send PSDs. why have them convert it with dreamweaver?
This won't answer your question, but it bugs me ;) function parseToXML($htmlStr) { $xmlStr=str_replace('&lt;','&amp;lt;',$htmlStr); $xmlStr=str_replace('&gt;','&amp;gt;',$xmlStr); $xmlStr=str_replace('"','&amp;quot;',$xmlStr); $xmlStr=str_replace("'",'&amp;#39;',$xmlStr); $xmlStr=str_replace("&amp;",'&amp;amp;',$xmlStr); return $xmlStr; } Really should be: $string = htmlspecialchars($string, ENT_QUOTES); I'm assuming that what shows up in reddit isn't actually what you have, and the entities are just being misrepresented. 
Is there a way to get to your achievements without logging in?
Not unless you log in.
No. That's what I've been working on for months is trying to figure out how to log in using cURL. There's people who have done it, but aren't willing to share how...
I've done a little bit of research on this and I found that Microsoft want you to go through [XCDP](https://secure.wikimedia.org/wikipedia/en/wiki/XCDP). But you have to [apply](http://www.xbox.com/en-US/Community/Developer/Home)...
That program is closed. I've applied to that program no less than 50 times over the course of 3 years.
Just try not to use Comic Sans.
You have web designers send you photoshop files as layout? [Edit] To the person downvoting me, you can fuck off.
Log in to what, exactly?
Can you link to the page you are trying to get the link from? 
Xbox.com+Windows Live
I am logged in; is there something special I'd need to do with the API now?
Sure. I'm trying to grab the keywords in the Google Ad box at the top of, for example, [this page](http://ezinearticles.com/?Stay-Away-From-Someone-Who-Wants-To-Coach-You,-Part-Two&amp;id=6491368).
???? You've never had to change your PHP output according to new customer specifications? *I* don't understand how that's possible. These are all real-world cases that I've had to deal with in the last month. 1) You have an existing multi-step web signup form. The customer wants to move an input field (say a promotional code) from step 2 to step 1. Your customer also wants to only display promotional code based on a new set of radio buttons, e.g. "1) I have a promotional code, 2) I have a customer email 3) none of the above". 2) You have an old school inlined PHP report with embedded HTML echo statements. There's HTML, HEAD, BODY, and TABLE tags around the main body of the report. The actual code is a large switch statement based on the input parameter: e.g. if the input parameter is a date, then search by date; if the parameter is a name, search by name; if the parameter is empty, display the actual form for the user to enter name and date-range. The customer wants you to add a new search parameter (say email address) and also wants you to add the ability to limit the number of results displayed (e.g. 10 at time, 25 at a time, 100 at a time, etc) and also add the ability to page through the result set. 3) The company just hired a 3rd-party consultancy agency to renovate its main web presence. The main page is a conglomeration of menu bars, a flash banner, a product portal which displays the latest product high lights, a signup/login widget, and a new promotions portal which dynamically displays the newest on-going promotions. You are tasked with reordering the various components into a new layout, removing the menu bar, replacing the signup/login widget with a new design, and adding a new "chat help" portal.
They are full of awesome! (most of them, anyhow)
You cannot do that with PHP. Javascript output can't be switched on by super simple means. (Though it might be possible to reverse engineer the AJAX retrieval scheme, if that's where the outputted data originates from.) Look into PhantomJS for the easiest current option to achieve your goal. No, it's not PHP.
Basically u need to automate chrome or firefox and get the generated text from them. Consider selenium, or watir/watij/watin 
I know a tiny amount of Ruby/Watir, and I was just now writing some small code to see if I could do it that way. I did end up at least seeing what I was looking for using browser.showLinks, but I don't know how to make that... do anything. Do you know of a way to just print the results I get from browser.showLinks to a text file? I've tried looking up or just running every combination of terms I can think of, but I can't seem to make it work. All I ever get is a carriage return in an otherwise empty text file.
The html for the form is being rendered inside the view, via a set of view-specific helper functions. The submitted form input is sent to a controller. The controller creates an new instance of the form object, and applies the data from the http request to said object. The view functions that render the form are able to be passed options so that each piece of a field is rendered how you want it.
Not a PHP solution, but you could probably get the job done w/ [PhantomJS](http://www.phantomjs.org), which is available on Win and OSX.
I dont think you realize that you can do those things in PHP just as easy as you can in smarty. Im actually quite confused on why you think smarty would make those things easier. 
yes, this is standard with every designer/coder i have EVER worked with. You live in web bizarro world
So you have to recreate a photoshop layout in html? God, I feel sorry for you.
*Easily* would seem to be a relative word. I've already said in a different comment that it's perfectly *possible* to create a template engine on top of PHP. I would argue against it being easier than in smarty. If you're actually getting paid to twiddle with HTML tags and CSS properties as part of a programming job, then more power to you. Me, I'm paid to write code, and every designer that I've worked with has given me an HTML document. 
Make 2 curl requests * POST to the login form, grab the response cookie * Grab the profile page and send the same cookie You could also use the cookie jar functionality of Curl. Also, please don't use regular expressions to parse HTML :(
yes, its called hand-coding html/css. its what everyone does. youve been in a bubble for a while im assuming.
&gt;it's perfectly possible to create a template engine on top of PHP this is what you dont understand. PHP ISSSS a template engine. it doenst need anything on top of it. Anything you can write in smarty, i can write in PHP and it will be more readable, faster(didnt need to learn new syntax), and better understand by a wider variety of developers. &gt;every designer that I've worked with has given me an HTML document. designers design in photoshop. they send the psds to coders who create html im starting to thinking youre making all this shit up. 
It's not that simple. Trust me. You have to wade through mounds of javascript to grab certain variables and whatnot, then post to the form, then go through about 5 redirects, then renew the cookies every 30 minutes. It's a royal pain in the ass.
Practically all of cake is about you not having to write code. How much you stick to cake's standards and how much boilerplate code you write is pretty much a direct inverse relationship. Almost every single common-sense, is-the-right-decision-for-90%-of-apps decision or code path, automatically happens for you anyway. So you *only* write code to customise things. Routing happens automatically, in a common sense fashion, without you having to write a single thing about routes. You can write an app, if you want to, without ever touching manual routing. It has common sense modularisation: * Common *model* functionalities get encapsulated in shareable *behaviours*. (want to have your model hold hierarchical data? Make it behave like a tree) * Common *controller* functionalities get encapsulated in shareable *components*. (want this controller to be able to email users? Give the email component) * Common *view* functionalities get encapsulated in shareable *helpers*, for dynamic code, and *elements*, for more static code. (Helpers seem similar to fuel's 'ViewModels') * Entire app functionalities (i.e, HMVC) are encapsulated in *plugins*. (similar to modules for fuel) These things are integrated automatically simply by naming them as properties in the appropriate class, or simply by existing. They will contain default, makes-sense functionality by default, or you can customise them as needed by declaring parameters in arrays for those properties. Cake's model storage functionality seems abstracted a level away from fuel's. Models have find(), save(), delete() for interfacing with data (and a couple of others). You can use cake's default datasources for models, or construct your own. This means a cake model can be representing a normal SQL database, or an amazon DB, or an IMDB or twitter scraper (or more, see [here](https://github.com/cakephp/datasources/tree/master/models/datasources)). Whereas fuel's seems to be much more heavily coupled to normal SQL databases. It seems a bit more mature and well organised. Validation for instance, is a default part of models, and just requires setting parameters. Errors will come out automatically from cake-generated forms.
Arg! You're reading Cake 1.1 documentation! I would definitely wouldn't want to use that version these days. Try http://book.cakephp.org/view/1143/Data-Validation instead :) In short, yes all of that is quite possible. [This](http://book.cakephp.org/view/1151/Multiple-Rules-per-Field) addresses your specific query, for instance. In general, the form helper will generate a form as close to your model as possible. Auto-generating views will spit out form code for you that just needs to be customised. But obviously there will be a lot of the time that you have to tell it exactly how you'd like your form 'spat out'. The advantage of using it, is that it automatically integrates model validation errors and CSRF security when you use those. Still not exactly sure what you mean in terms of the templating, but Cake, unlike languages like symfony which take the view that you need another templating language on top of PHP to make your views pretty, decided that well, PHP was designed as a templating language itself (shock horror), so let's just use that over generating yet more overhead.
are you trying to create fake clicks for your adsense?.. if so remember you could get banned!!
Why regular expressions over DOMDocument?
If you say something like "what is your username and password" and a user is willing to fill that information in, you can use various PHP5 classes to fetch data from inside of the account. Is this what you mean?
Use iMacros or similar instead if you want to run it in your browser.
So really the biggest thing for you is convention over configuration. Fuel takes the opposite approach and values config over the *magic* convention (that wasnt meant to sound bad or anything). Routes are the same in fuel as in cake. I think I have only written 1 route rule &amp; that was for a custom short link. You're right about not being as mature. Fuel is only ~10 months old and just hit 1.0, much of that work was just getting the core as stable as humanly possible. The next steps will be adding more of the nice to haves. As for validation in models I know you can do such things with the ORM layer but I have not played with that feature of orm much yet. Models do focus on RDBS right now but with the addition of packages (or "cells" as they will soon be known with the addition of a package manager system due around version ~1.2, which will be a sort of rails "gem" system) anything can be overridden &amp; extended to fit your needs. I do hope you actually download fuel and give it a spin though. At least look through some of the sample applications dan horrigan (dhorrigan on github) and phil sturgeon (philsturgeon on github) have written to give you a better idea how a simple app is written. BTW: thanks for the logical discourse on a framework instead of the normal "OMG THIS SUCKS!!!11! FRAMEWORK XYZ IS SO MUCH BETTER" without giving reasons lol. 
Haha, no no no. I just want to see which keywords are associated with particular text. Like the man says, "If you need to fake your clicks, you should probably just get out of internet marketing."
lol.. no problem then, just making sure... but do keep in mind that scraping google links or too many connections may still get you listed as a bot and cost you your google accounts. There was a story of a redditor not so long ago who lost his gmail, google voice and plus over a scraping tool he used. anyways back to your problem, I have never used PhantomJS but it looks promising. However here is what I would do if I was you... build a chome extension (easier using jquery) and parse the dom for the links and send it to your php script. If you doing it in a linux server, you can load up chromium with your custom extension using command line.. navigate to the page.. parse it, redirect or ajax the variables to your php script and close the browser automatically when done!.. Well good luck anyways!
I'm hoping that since I'm scraping ezine, and not google specifically, they'll leave me the hell alone. I'm not planning to interact with the links in any way, just load up the pages and see what keywords correlate with what content. I've hacked up a sort of workaround in Ruby, making a HUUUUUGE database via PHP/MySql with just the URLS in it for every single page, then writing a hidden-window Watir script to pull each link individually from the DB, scrape it, then remove that url. I wrote a Windows Scheduler Task to call it up once a minute, but I can only do like 5 pages in under 60 seconds so by my math it'll take about 3 days just for the initial MINOR scrape, haha. But hell, I ain't busy. I'll look into PhantomJS at some point, but Javascript just seems really daunting to me for some reason. I happened to have a bit of Watir experience from before so I lucked out, but in the future I know eventually I'll have to JS m'self up. Thanks everybody!
Version control. In my last job, the designers never used VC and it was a bloody nightmare to manage their emailed files with my Git repo. My new job, everyone uses SVN and we never tread on each others toes. It can be a pain getting a designer to learn SVN, Git, Mercurial, whatever, but in my experience, the rewards are well worth it.
haha I know exactly what you mean, I have spent many hours trying tto bypass that windows live javascript login thing so I could spider achievements. I know for a fact that trueachievements.com spiders achievements regularly but I doubt they would share the tech that makes them unique.
Negative, there's some JS that needs to be executed on the login form as you submit it.
I'd try removing the trailing '?&gt;' at the very end of this file. It can sometimes cause a newline to be rendered and the script will exit when it hits the end of the file anyway so it's not required.
I know that; I didn't know if there was some way for the API to use a cookie that had been set on my machine.
&gt; Anything you can write in smarty, i can write in PHP and it will be more readable, faster(didnt need to learn new syntax), and better understand by a wider variety of developers More readable: Disagree. The syntax of smarty is easy to figure out even if you didn't know smarty. Faster: Disagree. If you have a web designer feeding you HTML documents, this is actually slower. better understand: It's not that hard. Smarty is easy as hell to learn, and it's not black magic voodoo. &gt; designers design in photoshop. they send the psds to coders who create html If this is your experience, then I understand your opinion. However, if you can conceive a world where web designers actually use Dreamweaver (or other tools) to create HTML docs, then can you not see that it might be easier to deal in smarty templates? &gt; im starting to thinking youre making all this shit up Lol.
You can use Mink for your HTTP client. http://mink.behat.org/ It was created to test websites, but you can use it for a crawler if you really want to. It includes 3 drivers (Goutte, Sahi and Zombie.js (headless)) Both Sahi and Zombie.js can run javascript on the website. Take a look, I think you'll enjoy it.
&gt; yes, its called hand-coding html/css. I would personally call it a bad allocation of programmer time. &gt; its what everyone does. It's not. &gt; youve been in a bubble for a while im assuming. Nope. Come to DC and I'll personally introduce you to several designers that work like this. To be fair, 2 of them asked me what format I would like the layout: psd or html. Easy choice for me, since I don't have photoshop and have no plans to spend my billable hours tinkering with color pallets and pixel offsets.
 ######################################### # files.php $files = glob(dirname(__FILE__).'/files/*.mp3'); if ($files) { echo "&lt;form action='zip.php' method='post'&gt;"; echo " &lt;p&gt; Choose your files: &lt;/p&gt;"; foreach ($files as $file) { if (is_file($file)) { echo "&lt;p&gt; &lt;input type='checkbox' name='files[]' value='{$file}'&gt; {$file} &lt;/p&gt;"; } } echo " &lt;input type='submit' value='Download' /&gt;"; echo "&lt;/form&gt;"; } else { echo "Dir is empty..."; } ######################################## # zip.php if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !isset($_POST['files'])) { header("Location: files.php"); } $filename = tempnam(sys_get_temp_dir(), 'ZIP_'); register_shutdown_function(function () use ($filename) { if (is_file($filename)) { unlink($filename); } }); $zip = new ZipArchive; $zip-&gt;open($filename); foreach ($_POST['files'] as $file) { $zip-&gt;addFile($file); } $zip-&gt;close(); header('Content-Type: application/zip'); header('Content-Disposition: attachment; filename="Songs.zip"'); header('Content-Length: '.filesize($filename)); readfile($file); 
I've been around people not understanding the pointlessness of smarty so i can get over that, but this other part is killing me. Can you send me a link to a website that you coded where a designer sent you an html document? 
Here's two: [Team Continuum](http://www.teamcontinuum.net/), [Yakabod](http://www.yakabod.com/) I actually *understand* why you think smarty's pointless. I just don't *agree*. There's a big difference.
I think I may have fixed whatever was wrong before... Now I'm just getting connectivity errors like so... Warning: mysql_connect() [function.mysql-connect]: php_network_getaddresses: getaddrinfo failed: No such host is known. in C:\xampp\htdocs\phpsql_genkml3.php on line 5 Warning: mysql_connect() [function.mysql-connect]: [2002] php_network_getaddresses: getaddrinfo failed: No such host is kn (trying to connect via tcp://server:3306) in C:\xampp\htdocs\phpsql_genkml3.php on line 5 Warning: mysql_connect() [function.mysql-connect]: php_network_getaddresses: getaddrinfo failed: No such host is known. in C:\xampp\htdocs\phpsql_genkml3.php on line 5 Not connected : php_network_getaddresses: getaddrinfo failed: No such host is known. What fields should I correct for these errors (in the dbinfo.php)? I have my username listed as "root" my password is correct too. I haven't changed "server" though. What should I put there? Also I have my database as "aps,"
This is why you hand code and dont use dreamweaver... &gt;html &gt; body &gt; div #pageContainer .ui-widget-content &gt; div #BYOPMasterLayoutContainer . &gt; div #BYOP_div_1285778672 . &gt; table #BYOP_table_1285778672 .layoutBorder &gt; tbody &gt; tr &gt; td #BYOP_td_1_1285778672 .layoutBorder col66 &gt; div #display .dropTarget &gt; div #toolProfileBox21 . &gt; div &gt; div #display21 .ui-corner-all &gt; div #richText &gt; div .ui-widget &gt; div . ui-corner-all &gt; h1 harder to maintain, page is twice as "heavy" as it has to be, tables when they shouldn't be used. If it works for you, that's great, go for it. If I inherited a website with code like this i'd be depressed.
&gt; This is why you hand code and dont use dreamweaver... If you insist on hand-coding your HTML, I can see why. But it's also why I gave up hand-coding. BTW, all of that is generated mark-up &amp; content. The whole backend is actually a CRM that generates dynamic PHP code and templates on the fly from XML and database settings. They actually edit that page using an ajax editor which updates the page layout and component list in real-time. It's pretty spiffy and highly complex. I'm guess by your comment that you've never actually dealt with high-complexity enterprise websites?
That website is not complex.
Lol!!!! You should see the source code. Okay, so let's see the most complex website you've worked on. :-)
I can see the source code! We are apparently talking about two different kinds of complexity. Header, nav, 2 column content (with basic items in them) and a footer...not complex. Give me one more chance to change your mind on smarty. Read this.. [http://www.galengrover.com/php/php-template-engines-and-why-theyre-unnecessary/](http://www.galengrover.com/php/php-template-engines-and-why-theyre-unnecessary/) The code comparison is useful, but what i really want you to read is the links to the forum posts by voostind. He explains my thoughts on template engines much better than i can.
&gt; I can see the source code! No you can't. HTML mark up is not source code. Are you sure you're a PHP programmer? &gt; http://www.thecampauthority.com/packinglistapp/ Is a one page site i made, and its much more complex than that. I don't see much beyond static HTML and an ability to signup for an email list. You don't seem to even have a mail form for the "Contact Us" link. What portion of this website is actually PHP driven? 
I'd hate to see the code that triggered that bug
I thought Google provided a tool to see that in their control panel?
WE were talking about designers sending you html instead of artwork and i ask you to send me an example. had nothing to do with PHP. anyways...read that link i sent you if you get some time. you have a github account? 
&gt; WE were talking about designers sending you html instead of artwork and i ask you to send me an example. had nothing to do with PHP. anyways...read that link i sent you if you get some time. Except we're in a PHP subreddit and this is a thread about a how a php programmer should collaborate with a designer. I did read that link. It's the exact same argument. &gt; you have a github account? Nope. How about pastebin?
githubb and pastebin are nothing alike, nevermind.
I know they're nothing alike. I'm asking if you wanted to just paste some code into a pastebin to show me. Heck, I'd even be happy if you just answered my questions and tell me what part of that website is actually PHP driven? Because I suspect that while that website may be quite spiffy and complex from a hand-coded HTML page, it's nothing compared to an enterprise web app that may have to deal with thousands of users, hundreds of groups and permissions, millions of data objects being shared between each of the groups, and not to mention 5 separate installations that must run the same core source code ontop of customized content and configs.
It wasn't an example of PHP complexity. I thought you did frontend coding too. I was talking about frontend complexity. I wanted to look at your github account to check out your code.
I do some front-end coding, but it's mostly working around existing HTML markup and writing javascript. For layout and css tweaking, I rely on a full-time content designer, because that's his job to worry about which font/color/pixel-size to use. &gt; I wanted to look at your github account to check out your code. I wouldn't be able to show you Yakabod's source code even if I had a github. It's proprietary and their customers are governmental departments. So... what's the most complex (programming-wise) website you've worked on?
Surely it's some generated code, but still... 280,000... damn.
I realized the disconnect we were having. Everywhere i've worked designers have only done design. They hand off their PSD to someone who does the handcoding of the layout (html/css/js). That happens to be me a lot because i can do back end and front end stuff. I PMed you my github account. Not many complex things on there right now, but you can get a gist of where im coming from. You should really read those posts i sent you on smarty =)
Where have you been all my life?
It's a volume problem. I'd have to pay for access to the API if I wanted to do it more than a handful of times. And, well, after I found out that I couldn't do it, I DESPERATELY wanted to figure out a way to do it, haha. You know how programming is.
I think the disconnect is that you can't seem to comprehend that someone can understand what you're saying and yet disagree with your conclusions. &gt; I PMed you my github account. Not many complex things on there right now, but you can get a gist of where im coming from. I get the feeling that you've mostly worked on simple one-off websites with not-too-complex business logic, that generally don't require that many developers. &gt; You should really read those posts i sent you on smarty =) Already told you that I've read them. It's the same argument that I've seen over and over: 1) I don't need to use it, or PHP is already a templating engine. *False argument. An arbitary custom-written templating engine doesn't enforce the separation of business logic from presentation the way that smarty does, and a broken templating engine (from software entropy) is worse than having none at all.* 2) I don't want to learn it, or it's too hard to learn. *Disingenuous. It's ridiculously easy.** Both arguments are pretty weak.
then you arent using php correctly if you can't separate business logic from presentation
I'm going to go out on a limb and guess that what you actually meant to write was: &gt; then you arent using php correctly if you **can't** separate business logic from presentation But that's still not what I wrote. I said a customer-written template engine doesn't **enforce** that separation. It's purely up to programmer discipline, and as such is highly vulnerable to software entropy. 
Do you really like to do things right? Are you the same vic cherubini that messed up IRP?? 
So after a quick dip in the 1.0 source, I noticed that PHP comes from "Personal Home Page Tools". I've been working with PHP for over 10 years and I learned something new today. Cheers!
Probably just a loop for an IN list.
Is that you, stringer? :P NOTE: SpeedFC doesn't given ANY vacation days off for the first year. They offer six figure salaries because they have damn-near 100% turnover rates every 6 months.
Yea, 2,800,000 parameters is a shitton. 
Having 28,000,000 parameters would be impossible to read.
i love the fact you have to put the word "competent" in a php job ad.
Obviously knowledge of PHP is required, but anything in particular?
What kind of idiot thinks that 280 million parameters is a good idea?
Having more than NaN bound parameters is simple madness! 
that's complaining about the hostname for your mysql database server. I noticed in the code you posted, you had "localhost" coded in as a constant and not a string. I'm not aware of PHP pre-defining the constant "localhost". Try putting "localhost" in quotes on your connect() statement. If that still doesn't work, try 127.0.0.1. You'll need to use the hostname that the database server (and your user account security in the mysql database (users table) is set to use. For example, if you have the database server set to run as SomeHostName, yet you only gave the root user access to any database on "localhost", I don't think you'll be able to connect, you'll have to give root permissions to any database on "SomeHostName". Since this is probably not the problem (it's only the issue in rare cases), I'm betting it's in your connect statement, just need to wrap the word localhost in quotes. --edit, sorry for the delay, I haven't been working in my office today or tomorrow, I've been commuting to other districts.
*Phapper*, short for "PHP Fast Mapper".
If you have access to a linux/unix box, you might get some ideas from "grep orm /usr/share/dict/words". I particularly like chlorofORM, but brainstORM and perfORMer are also good.
I have access to dozens of Unix/Linux boxes. :) I now have 377 more words to consider, thanks! (Edit: oddly, the words file I have includes an 's word for 1/4 of the words in it... Down to 284.)
&gt;According to government records, the only names not yet trademarked are "Popplers" and "Zitsels".
**C**omplete **U**niversal **N**ode **T**ransfer **F**acilitation **L**ibrary **A**s **P**HP **S**ource
Add me on skype, joellarsonweb. I can help you with any issues you have or run into. I also love the idea.
i would connect only when needed and not keep the connection open during a session as it will be idle a lot of the time you need to avoid sql injection, so use PDO and only parameterized queries consider htmlpurifier to avoid xss.
this is the only option
Ok, and a link on this? Anyone who visits the site could vote which requires an open DB connection.
&gt;not looking to use a framework since this is a small project Wait, is that one of the better reasons to actually use a framework?
That sir, I don't know. I'm not proficient at any of them, so learning a framework would double my time on this project. 
Also, the only available website is www.clownpenis.fart
Well, I've had some pretty simple XML interaction to do with two or three XML-backed APIs, so nothing big - I was just looking for something easy and with as little performance hit as possible. I can write XML pretty as easily as anyone, but handling your XML tree like an object is pretty useful. The automatic validation (well, OOP error overloading) is very useful too.
Seriously, no matter how much I say it, I always receive shitty CVs. It's like people don't even read my job descriptions.
This guy really helped me out and gave me some direction. We talked all night and cybered, twice. He's good.
I think the more important thing than the release of 5.3.7 is the fact that 5.2.x won't be supported anymore. Most web hosting companies use 5.2.x.
The reason that probably isn't being prioritised in the news now is because it's old news: 5.2 dropped to security updates only early last year and hit end of life in December, so there have already been a couple of 5.3 releases since then.
Hey not a bad article, here are a few of my (mostly scattered) thoughts: - PHP is interpreted in the sense that it compiles syntax into a virtual machine "opcode" representation which is then interpreted at a pretty decent speed. Opcode cachers such as APC cut out the initial syntax compiling step. - The HipHop compiler (translator is more accurate) takes PHP source and rewrites it into C++ as best it can (ie. using C++ classes etc) and then links directly with a new implementation of the PHP standard library. This can of course improve speed dramatically but you do lose out on some features (it only implements up to 5.2 IIRC). - PHP cannot do "X": Many languages cannot do "X" without some form of extension, and of course there are loads of extensions for PHP, including an FFI (which should allow you to access nearly any compiled library function). - PHP is very flexible, and can be used in many places you wouldn't expect, eg. the [Raydium](http://raydium.org/) game engine uses PHP as it's scripting language - PHP documentation is awesome. It is readable, accessible and usually contains examples, I don't know why others complain about this. - I would say that PHP projects/code is some of the most reused code around today.. considering the amount of copy/paste programmers ;) - PHP can definitely scale, like any other language, it depends on careful architectural decisions and plenty of caching. As you mentioned, people are likely to hit a DB bottleneck before PHP :)
shouldve used an unsigned number of parameters.
yeah sure - but why? Why not just put a hard limit in place? You want more than 1k parameters in a query? fuck you. write a better query
 $stmt-&gt;bindParam(':blogcomment1', $blogcomment1); $stmt-&gt;bindParam(':blogcomment2', $blogcomment2); $stmt-&gt;bindParam(':blogcomment3', $blogcomment3); ... $stmt-&gt;bindParam(':blogcomment28000', $blogcomment28000); Profit?
Check out Lithium. It might save you a bunch of time.
Agreed. Sincerely, Long Integer 
Don't forget SEO. I took some time to look at googles free key word tool to see what people are searching for to find tools similar to mine. I ended up calling it 'open flash chart' which is a combination of the most popular key words people search for when looking for charting software. Without any research I'd think orm object store mysql php are all interesting search terms.
Greatly summarized thoughts! Separate thanks for mentioning Raydium - looks interesting!
hiring the same type around LA/SD. ;)
Basically you can also include an attachment (or more) - that's the difference functionally. Really though there are 2 pieces worth noting other than that. Firstly it uses PHPMailer which allows WordPress to easily do things like attachments. Secondly it supports the WP plugin hooks - so plugins can alter emails etc. 
wp_mail is a function defined in wordpress that uses the PHPMailer class - http://sourceforge.net/projects/phpmailer/ so you can use wp_mail only if you use Wordpress. The PHP mail function is low level and you have to do all the work by yourself (eg. set the headers); if you want to send an email with attachments or if you want to send an email to multiple email addresses the header section can be quite complex. The PHPMailer class takes care of these details for you. 
After a bit of Googling it looks like wp_mail() is a Wordpress wrapper for sending emails with a syntax similar to built in mail() function. wp_mail() wraps around PHPMailer and supports attachments and other complex tasks more easily than mail() alone.
I am not competent, but I am keen to hack away at your pretty code.
One has a wp_ at the front of it. I would have thought that was obvious.
Ah, yeah that makes sense.
Thanks for sharing, if you want to save your time you can use software like Office Backup, it's easy to use and reliable software for [backup to Amazon S3](http://www.office-backup.com/amazon-s3-backup-software.html). 
Why don't you go read the function and find out?
What library did you use?
**Scrap it**. There's around a dozen useful and lean ORMs available for PHP. Most of them are availalbe under academic licenses (BDSL or MITL). So releasing one under the reciprocal GNU GPLv3 (as it is actually called) is kind of pointless. More so as you mentioned no unique features.
I disagree, I don't think there can be enough open sourced versions of anything. As long as they all learn and benefit each other.
In practice this is not what happens. The wheeloritis in php frameworks or web cms/portal scripts does not raise the overall quality. It's important to draw the distinction between libraries and applications however. A richer choice in applications at least benefits the users (even if that makes it more tedious to find the right choice). Regarding frameworks and libraries however, throwing in yet another just adds to the API poisoning. And more importantly: OPs choice of license is kind of asocial in that area.
Both myself any the company in question will continue using it, so the option to scrap it was never on the table. The options available in that regard are to keep it private or to release it open source. My choice is to release it open-source. Regardless, it has some notable advantages over some comparable ORMs.... That's not to say however that it's better in every way, because it isn't; Other ORMs also have features this one doesn't as well.
One is well played the other is plain.
Database access is generally the biggest bottleneck to the speed of any application. It is the last place you want to cache things. Caching to file is the first stop and should serve your needs well. If you find that it isn't good enough or you need more features then you will need to look at things like memcache. I would recommend that you use [Zend_Cache](http://framework.zend.com/manual/en/zend.cache.html) because you don't need the rest of the framework in order to use it. It will also save you a lot of time and a serious headache if you [read this](http://www.yewchube.com/2009/03/zend_cache_backend_file-auto-clean-causing-problems/) before you use Zend_Cache. It's a stupid thing but once you know about it it's easy to fix (1 line) and is the only blemish on an otherwise great cache library.
Use an existing caching library, like [Stash](http://code.google.com/p/stash/), to handle caching for you. Then if you change your mind you're just changing a configuration file in order to switch from flat file to database. Stash will also handle cache invalidation and cleaning. Disclaimer: I wrote Stash, so I'm horribly bias.
Memcached / Redis. Stash is a nice interface to them.
Haven't had a chance to play with it yet but it looks pretty elegant to me... &lt;?php /** Database example: */ require_once "Database.php"; $database = new Database("readWrite"); /** Counting all in Table */ echo $database-&gt;number("tableName"); /** Counting all in returned from query: */ echo $database-&gt;numberRows("SELECT * FROM tableName"); /** Inserting */ $table = "tableName"; $fields = array('id', 'name', 'surname', 'phone'); $values = array('2', 'aName', 'aSurname', '9999999'); $database-&gt;insert($table, $fields, $values); /** Querying and displaying */ $database-&gt;query("SELECT * FROM tableName"); while ($row = $database-&gt;fetchRow()) { echo $row['id']; echo $row['name']; echo $row['surname']; echo $row['phone']; } ?&gt;
It looks like a pretty standard database class, with the big downside of it not using PDO and therefore being expensive to repurpose for other databases.
Some notes from looking over the code. * This is a **MySQL** database interface class. * Lack of visibility declaration on methods. * Member variables are all declared private. What about inheritance? * Prints errors instead of returning them. * No exceptions used. * Can't rely on standard return values. In all I wouldn't recommend it. If you can use PDO to handle these things for you, it will make your life a lot easier than this would.
Having problem with APC and memcache (session handler) with this release.
Pass a config array into the constructor of your class instead of hard coding the password/user in the class. This allows the class to be used more generically. Better yet, define the database class as an abstract class with abstract functions. Extend that class with the functions implemented in the classes. abstract class Database { protected $user; protected $pass; function __construct($config = NULL) { $this-&gt;user = $config-&gt;user; $this-&gt;pass = $config-&gt;pass; } //implement common functions such as connect, countRows, etc in this abstract class function connect() { //code to connect } function lastRowCount() { //code to count last row count } abstract function update(); abstract function drop(); } class dbWriter extends Database { function update() { //code to update database... } function drop() { die(get_class($this).' does not implement drop function'); } } That is one of way of separating readers and writers. Alternatively, you can implement the whole class like you did and pass into it an array of accessible methods. Or make the abstract class more generic and have it accept data from different medium, ie, database, files, xml, etc. Like I said, there is many ways of handling this problem whose approach is determined by current requirements and potential requirements later down the road.
I've never got karma before :o
My thoughts exactly.
Sorry to break it to you, but you may just want to use PDO. It has all the necessary methods to validate and save data. Also, instead of mysql_* I would suggest you use mysqli_* . PHP has deprecated mysql_* 
SimpleXML
They're using parameters. Each of those NAME= is a parameter, like a variable, and the part after the = is the content. Parameters are separated and joined together with the &amp;. The script on the page is changing which content it shows based on what's in that variable. You'll notice more and more things like news sites are including things like ref=twitter&amp;country=usa or ref=facebook&amp;source=link etc. Then they pull the information from that variable and then store it to get stats on where you came from. You can retrieve those with $_GET : [$_GET](http://php.net/manual/en/reserved.variables.get.php) Edit to add: In your example, it would look like this: index.php?content=form or index.php?content=about_us or index.php?content=widget_list Then they would use a function to read the $_GET['content'] parameter, and act on it by including (using include(), or require() ) the appropriate content file, or possibly calling a database field or something like that. 
In this particular example, the php file leveraging the use of the $_GET parameter. It is a global array that contains all information that is passed in through the URL. So, somewhere on the page, index.php is doing a check for a variable contained within $_GET. For example: ?route=information/contact check would be: $route = $_GET['route'] if ($route == 'information/contact') { // display contact information page } 
File-based cache will be the simplest (file_put_contents); additionally you should place it in the webroot/public_html, so that Apache can serve it directly (without involving PHP), which will be very fast and will allow you to easily use mod_expires, mod_deflate and etags for client caching and compression. To invalidate the cached file, just overwrite it. Nice &amp; simple.
if you're using Apache as a webserver, [mod_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html) will typically handle this kind of routing. edit: you may also want to familiarize yourself with [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) to better understand why such routing methods exist
When you click a link on a web page, the web browser takes requests information from the server (taking you to the link). The server (most likely apache) will take the URL request and try to find the file that matches (up to the "?"). Apache is probably configured so that some files are handled as executables and are run and then take the output of the program (index.php) and respond the user with it. All PHP code will run before the user ever sees the webpage (unless you are using ajax). You either need to update the PHP so that it handles the $_GET/$_POST request variables and alters the output, or you need to have your link &lt;a href="contact.php"&gt;Contact&lt;/a&gt; request a different script.
That conditional will always evaluate as true as you are using assignment (=) rather than comparison (==). One of the many common typos that can drive a developer up a wall when debugging!
fixed it, thanks
This is a great way to go if you just need something simple, and you don't get much faster than skipping the PHP layer. (Unless your webserver does static file caching in memory itself as an additional layer of speedup).
Amateur hour, really. * What if you want to work with more than one resultset at the same time? * Doesn't escape values. * What if I want to insert NULL as a value? * What is all this nonsense: $update = str_replace('""', mysql_escape_string("NULL"), $update); $update = str_replace('" "', mysql_escape_string("NULL"), $update); $update = str_replace("''", "", $update); $update = str_replace("' '", "", $update); 
Your original post still has $route = 'information/contact' not ==
Just wanted to add that it would be a good idea to sanitize the data from your $_GET variables as well to prevent SQL injection and XSS attacks.
This is probably a single point of entry MVC system. Every request goes through the index. The controller changes what happends depending on those parameters. An .htaccess mod rewrite takes the url and formats it correctly for PHP.
One extra thing, do NOT do the following: $route = $_GET['route']; if ($route){ //display corresponding html page echo file_get_contents($route . '.html'); } It might seem like a great time-saving idea at first but since your users can put anything in the URL field, they can display any file on your web server. For instance, if they set the route GET parameter to the following: /../../../../etc/passwd# the web page will display the contents of your Linux server's passwd file. One way to get around this is to whitelist the pages you do want the user to access: $route = $_GET['route']; $authorizedRoutes = array('contact','products','gallery','whatever'); //check if your GET variable is in the list of authorized routes if (in_array($route,$authorizedRoutes)){ //display corresponding html page echo file_get_contents($route . '.html'); }else{ //throw an error or display something by default } (this is still not optimal as it requires modifying your index.php file each time you want to add a page to a site but it works well enough for small sites AFAIK)
Your code will also throw a notice if there is no route param in the GET request, i.e. on the home page.
thanks, this works just fine for the project i'm modifying!
This guy is right. Also, instead of mod rewrite, they may be just using directories and having an index.php controller in each directory. 
If you aren't using error_reporting(E_ALL | E_STRICT); then you're doing it wrong. 
I'd like to point out that you see GET and POST as well in AJAX and forms. These two HTTP methods do the same thing, but POST allows for longer data submit/requests cuz you're not literally encoding it into the url (well, technically you are, but you don't see it, or that's how I see it). [GET vs. POST](http://thinkvitamin.com/code/the-definitive-guide-to-get-vs-post/ "GET vs. POST") article.
My prof pulls the names of the available pages from his database instead of manually coding it. Kinda cool :)
I use Memcached for caching simple web service responses, works really well.
I use a per session token instead of changing the token 
Maybe I am missing something, but that doesn't seem like it would be very effective in stopping CSRF.
Something relevant that might interest you: When you visit a URL (like this one "http://www.example.com/fish/aquarium.php?category=glass") the whole thing is sent to the server and the web server can interpret it any way it wants! To elaborate, in most servers if you visited that URL the server would load the 'aquariam.php' file from the '/fish' directory and pass the parameter named 'category' with the value 'glass' to the aquariam.php file. But, this is only customary. If the server was designed to, when you typed in the previous URL it could load the file 'porn.jpg' from the '/hidden' directory or run a random program. Let's look at a simpler URL: "http://www.example.com/". If the server was configured weirdly, it could load a different file/program if you typed "https://www.example.com/" instead, if you omitted the slash at the end, or the www. The point is, what the server does with the URL you typed is completely arbitrary. However, customarily it interprets everything before the last slash as directories and everything after the ? as parameters. The reason I explained all of this s because you will often see websites, especially blogs, with URLs like the following: "http://example.com/blog/2011/07/05/hello-world/". Yet, if you look at the PHP source code of the website there is no directory "2011" or "hello-world". This is because the site is using what most call "pretty URLs". Instead of having slashes, dots, questions marks, and equal signs interspersed throughout the URL these are simple and clean. It is relatively fun and easy to configure an Apache server to use pretty URLs with a simple .htaccess file. If you would like to learn more about this, once you get your head around parameters google "pretty URLs".
The fact that a unique token exist prevents an attacker from simply adding a GET request in an IMG tag for example. If you're worried about a man in the middle, you should use SSL. 
I update the token before submitting a form. Form submission javascript has something like $.get('ajax/token-server.php', function(newToken) { // do the real form submission here with the current token }); So whenever the form is submitted, it first grabs the correct token from a little token service you have setup and then submits the form.
How do you verify its your site making the token-server request.
do something like this. $_SESSION['array']['storyid'] = $token; i had a problem where i had to allow multiple items to be edited in a control panel. the problem is each of these items had their own entire panels with multiple pages and if i stored the item's id in a session, you couldn't edit multiple items at the same time, i had to include a reference in every link and form so it accessible via get, you don't have this problem, you only need to verify. anyways, storing it in an array where the key is the story id will make storing multiple csrf tokens possible.
By the same token (pun intended), it would probably be adequate to use a constant per-user token that gets submitted with each form. I think it's worth putting in the little bit of extra effort to renew it each login session, to mitigate the impact of other types of attacks that might expose your token (things like man-in-the-middle). But the basic idea of this CSRF protection approach is that the user needs to include in the form submission some data that is unknown to third parties. If you're using a POST form, there isn't an easy way for a third party to discover your token, so the lifespan of the token isn't super-critical to its function. Keep in mind that the submitted values in GET forms can be exposed via HTTP REFERER headers.
That's exactly what I mean by a per session token.
After re-reading the [OWASP documentation](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_\(CSRF\)_Prevention_Cheat_Sheet) (Synchronizer Token Pattern section), it seems that one token per session is okay. When I was originally looking into it a few years back, I could have swore OWASP was recommending a unique token per form/request (which is why I was regenerating a new one each time). They mention this in the last paragraph, but even say it has usability issues (which I am running into now with browser tabs). Thanks for your input!
It's amazing what we can do with the technologicses these days.
To paint an even simpler picture, the php script can output whatever it likes, and so as others have mentioned the HTTP protocol allows you to specify parameters when communicatiing, so you can same something like index.php?show=mario. Then the HTTP server passes to php this information, which in turn decides that it should output a mario image. The possibilities are astounding really. Keep studying. :)
Mostly correct. However it's $_GET and $_POST. Also there is $_REQUEST but should not be used due to security issues (especially that it includes cookies in the array). Example: if ($_GET['show'] === 'mario') { echo "It's a me! Mario!"; } Later you will learn how to 'sanitize' the request, so that users cant mess with your script due to clever tricks.
The token-server checks the requesting user's session just like any other page on the secured site. The session is a nonced-hash of user details like IP address that created the session, browser details, etc. If your token server is open to sessionjacking then the rest of the site is, too. This should always be done over SSL or secure VPN.
Uhh the point of CSRF Tokens is to prevent a different site from tricking a user into sending a command such as delete content. If this malicious site requests the token while the user is logged in, it will still return the token...
How would the malicious site retrieve the token? CSRF prevention is stopping the form submission and it is still accomplished. Say you are a malicious site and you craft the link &lt;img src="https://secure.example.com/ajax/token-server.php"&gt; And a logged in admin views this page. What are you going to do with the token? You aren't receiving it. It will show up as a broken image to the user. Unless you can show an example of how you as the malicious site would retrieve the token and then re-submit a tokenized form, I don't see anything wrong with this approach. Having a service that sends out a secure token behind a session-backed login is no different than having any other page on the site serve up a token in a hidden form field. And if you can show me some way of having a user call a remote token server with your server receiving the data, I will thank you for the information and fix my error.
 var token = ajax('https://secure.example.com/ajax/token-server.php'); var link = '&lt;a href="http://example.com?action=delete_everything&amp;amp;token='+token+'"&gt;Free Porn&lt;/a&gt;'; Hey free porn cool! *click* oh shit everything is deleted.
Caching for how long? What's the max age of the data? If it's short, use memcache; if long use a file.
Your right, my point was more that there is no reason to update it every page load, doing it on the first session or have an expiry time of x hours will work just as fine without the need of all the complex ajax form updating that will break if the user runs noscript.
Default each form to a per-session token. On the forms with more stringent requirements, generate a new token.
I use to work for online marketing, but im new to wordpress site creation. came across http://www.connectdigitalmedia.co.uk/integrate-wordpress-plugins-for-email-newsletter-campaigns/email-marketing-blogs/2011/08/ page, after reading i need to know the exact difference between wp_mail() &amp; PHP's mail(). I couldn't find the proper link in net. Got good response for my post in reddit, thanks to everyone :) I'm reading related stuffs now..... any good reference, please refer to me :) Regards Franklin
*same origin policy* prevents that..
Or more precisely, change the token only every time the permissions change.
&gt; PHP has deprecated mysql_ Technically incorrect. The PHP documentation team wants to begin marking the mysql functions as deprecated after the next major release, with the actual throwing of `E_DEPRECATED` waiting until after 5.4 is out the door. Chomping at the bit, here. I want it dead.
&gt; What is all this nonsense Kinda looks like someone thought that Oracle nulls were a good idea?
memcache.
Connection Timed Out :( Edit: Cache - http://webcache.googleusercontent.com/search?q=cache:http://www.addedbytes.com/blog/if-php-were-british/&amp;hl=en&amp;strip=1
Absolutely. I was just illustrating parameters. I prefer POST over GET if possible, but sometimes writing custom URLs like say in an auto-generated email requires using GET.
Why?
Agreed. I was a big fan of PHP until I learned some other languages (mostly Python which made me hate PHP).
If you use md5 with crypt(), do not upgrade to 5.3.7. There is a hotfix planned as 5.3.8 coming out very soon. Bug: https://bugs.php.net/bug.php?id=55439 Revision: http://svn.php.net/viewvc?view=revision&amp;revision=315218
I guess british programmers work 24hrs a day to make a living then...
Of course :) I didn't mean to step on your post, just thought that I should offer more info cuz I can. I've noticed a lot of new web programmers think about functions at X language-specific instead of it's a functionality that is accessed via a function. The whole MVC thing that's mentioned below.
I'd use it if the syntax was valid, just to piss other people off.
Given that he just changed a bunch of reserved words and function names, I wonder if you could change those in the PHP C source and compile your own version of Imperial PHP.
I would use this purely for the british spelling.
Why not allow up to lets say 10 different tokens to be used. That way they can have 10 different tabs. If you make the token long enough there will still be a very slim chance an attacked would be able to guess one of the 10. 
Could you alias keywords like 'perchance' to 'if' in PHP? I tried using define, it didn't like it...
No... there is no PHP equivalent of a C-like preprocessor. You could probably make one. You'd code one way, but the pp would just convert it back to normal before it was uploaded to/executed on the webserver.
I always wonder what it's like to have to program using spelling that you don't use, even for HTML and CSS. Even worse for people who don't know or had to learn English.
You could wrap the functions directly in php to the new ones.
"color/colour" has got me a few times over the years, but you do get used to it. And, i've never known connection to be connexion!
The p in preg does not mean 'perform'...
Thank you!
1) The lowest severity level, E_NOTICE, is triggered for accessing undefined variables, properties, or array indexes -- all things which can be real bugs and logic errors. 2) `error_reporting()` suppresses the handling of the error but PHP still generates the error internally and that is very slow. For best performance, your code should never trigger any errors, warnings, or notices. 
Were I drinking coffee (or tea) at the time, I would have to clean my screen off. I started laughing as soon as I saw £variable_name.
You couldn't change $ to £, though.
Check out [r/improviseit](http://reddit.com/r/improviseit) for more about the site. The link contains a .sql file and a series of php files. If you want to install it on your own web server, just set the variables in database/db_connect.php to match your database, and log in with user: admin pass: admin. What can you do with this code? Many many things! It has a content management system that is displayed via an aspect management system that is integrated with a chat console. The content management system is used in a recursive manner- it contains and edits the exact code that it runs. Users have the ability to interact with bots, whose code is also stored in the CMS. 
What does it actually mean?
function (peasant, royalCastle)
It designates that the regular expression used is a *perl compatible* regular expression
let the nonsense commence.
That's bullshit. There was one thing where you would need to click a link that someone had made to redirect to your store. That was the only security hole there has ever been and its fixed.
They have other competitive rates as well.
It's not my hosting, I just use them and wanted to get the word out.
eww Php &lt; 5.3
[There are no less than four CVE vulnerability notifications about Opencart](http://www.cvedetails.com/vulnerability-list/vendor_id-9599/Opencart.html). Four is slightly more than one. Further, the one specific problem that you mentioned -- it's called [Cross-Site Request Forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery) -- wasn't just *redirecting to the store*, it was allowing third parties to cause a user that happened to be logged in as an admin to perform certain actions automatically. Coincidentally, the Opencart author blew off that problem in pretty much the same way you just did.
Fucking Spam. Can we band kinglime and banana97 before those assholes ruin this subreddit? Also, 250MB for bandwidth? Are you kidding? Fucking spammers and their bullshit hosting plans. Fuck off.
oh, you and Banana97 are such big fans of that company you just have to go whore it? Fuck you, you're a spammer, and you're not fooling anyone by making a second username, we know that's you.
well what did you expect from a company that advertises by spamming? If they were a legitimate company, they wouldn't be spamming. Also, the guy created a second account so he could comment on this thread (and spam in other subreddits). Who in their right mind would give some skeezy businessman like that their credit card number, or even rely on them for a mission critical website?
There are a few circumstances where you could need to set a different error reporting level other than E_ALL | E_STRICT. For example if you were working on an old application and the business didn't have the budget to re-write it. Or if you were using a library, template or really any PHP code written by a third party that didn't play well with some error type like E_STRICT.
this is interesting: http://cleanwebsolutions.com/FAQ.aspx answers all of my questions :) 
or use rename function?
I thought it was more likely to be "perl" than "perform", but just went with what [the manual](http://uk.php.net/manual/en/function.preg-match.php) said.
Connexion is a [very old spelling](http://en.wikipedia.org/wiki/American_and_British_English_spelling_differences#-xion.2C_-ction) of the word.
I moved to Linode recently and left my swap disk at 256 meg. Oops! And I was out yesterday so it took me ages to sort it out. Should be fine now. Thanks for posting the cache link though.
Some videos from the PHP UK Conference: http://vimeo.com/user6188686
^(what|wut) you talkin(g)? about wi(l){2}is\?$
If regex is what you need to learn, I would recommend http://www.regular-expressions.info/ and http://regexpal.com/
It sounds like you have a lot of the bases covered already. Regular expressions are basically a language on their own, so a book or some tutorials dedicated to regular expressions would probably be best for that. I personally haven't ever felt the need to learn more than what I have needed to get the job done with them, but I also don't do work where I end up needing them very often. So, unfortunately, I'm not going to be much help there. It's hard to point something out without knowing more about your current level of knowledge. Do you have any code anywhere that can be looked at? If you are looking for ways to improve and can take some criticism, that might be the best thing to do. If you just want some ideas of things to do with PHP that you maybe haven't learned yet, here is what I can come up with off the top of my head: * A command-line utility. This will get you working with input from the command line (or stdin). The manual entry for working with [I/O streams](http://php.net/manual/en/wrappers.php.php) will probably be helpful * Working with multiple processes. This way you can start up a new long-running process from your main PHP process. The manual states this should not be used when running PHP from a web server. [Here is the applicable manual section](http://www.php.net/manual/en/book.pcntl.php). And actually, there is a lot of low-level stuff you can read [in this section](http://www.php.net/manual/en/refs.fileprocess.process.php). Most of it is probably not useful in day-to-day PHP stuff, at least not for most things PHP is used for. * Writing/consuming web services with PHP. You can [start here](http://php.net/manual/en/refs.webservice.php) * Write your own PHP extension. [Start here](http://www.php.net/manual/en/internals2.php) * You can also just go through [the entire manual](http://www.php.net/manual/en/index.php), since basically every feature of PHP is going to be in there That's all I can think right now of regarding features of PHP. But like I said, it sounds like you are already familiar with the functionality that is useful for *most* web-based PHP applications. So maybe you are looking to improve the design or style of your code. That is going to be a lot harder to give concrete advice about since a lot of it is personal preference, and there is no one right way to do things. Do you build things in a very object-oriented way? [This site](http://www.oodesign.com/) appears to have pretty good descriptions of a lot of the design patterns used in OOP. The examples are in Java, but the concepts should be helpful. Again, I have no idea of your level of knowledge, I've seen people all over the place after 4-5 years of experience :) Hopefully at least some of this is helpful or gets you started down the right path.
Wow brilliant stuff, thanks so much! :D Havent done anything with extensions or command line yet.. Processes I haven't touched either, lots to learn here! Thank you again!
I would strongly recommend learning to work with remote source - be it API or SOAP WebServieces (both writing clients and servers). Will def. comme in handy down the road.
You're welcome. Good luck :)
At least one object method would have to be added.... $obj-&gt;phap()-&gt;phap()-&gt;phap()-&gt;phap()-&gt;phap();
http://mailchimp.com/ is the biggest player in this field. You'll want to make sure that you have explicitly been given permission to mail them as the mailchimp terms of service are very, very strict and if you do not follow them you absolutely will have your account disabled. Writing emailing yourself does not necessarily result in it going to the spam folder, though. If your non-profit already has an email server which sends email then you can safely use that, if not then I recommend mailchimp.
^w(ha|wu)t\s(are\s)?(yo|)u\stalkin(g)?\sabout\swi[l]{2}is\?$
Seriously fuck regular expressions. I like to think I am adept at programming in a few languages but regular expressions are like my double dutch.
Here's an excellent book- [Advanced PHP Programming](http://www.amazon.com/Advanced-PHP-Programming-George-Schlossnagle/dp/0672325616/ref=sr_1_1?ie=UTF8&amp;qid=1313943690&amp;sr=8-1). The table of contents should make you happy- I. IMPLEMENTATION AND DEVELOPMENT METHODOLOGIES. 1. Coding Styles. 2. Object-Oriented Programming through Design Patterns. 3. Error Handling. 4. Implementing with PHP: Templates and the Web. 5. Implementing with PHP: Standalone Scripts. 6. Unit Testing. 7. Managing the Development Environment. 8. Designing a Good API. II. CACHING. 9. External Performance Tunings. 10. Data Component Caching. 11. Computational Reuse. III. DISTRIBUTED APPLICATIONS. 12. Interacting with Databases. 13. User Authentication and Session Security. 14. Session Handling. 15. Building a Distributed Environment. 16. RPC: Interacting with Remote Services. IV. PERFORMANCE. 17. Application Benchmarks: Testing an Entire Application. 18. Profiling. 19. Synthetic Benchmarks: Evaluating Code Blocks and Functions. V. EXTENSIBILITY. 20. PHP and Zend Engine Internals. 21. Extending PHP: Part I. 22. Extending PHP: Part II. 23. Writing SAPIs and Extending the Zend Engine. 
If anyone else is interested in this, other than some sample code written in Perl that Craigslist had on their Bulk Posting API page, I found nothing that exists to do this. So I'm writing a Zend Framework Web Service client to do it but, at least at this point, it will require a paid CraigsList posting account to function.
Bannana97 owns that company. If I wanted to whore it I would use my affiliate link.
That's the exception that proves the rule.
Just to add another alternative (although I have no real idea how they compare, since this is the first time I've seen mailchimp), but there's also [campaign monitor](http://www.campaignmonitor.com/). 
Those videos are useless with the shitty quality of that recording. 
http://rubular.com/ http://txt2re.com/ http://gskinner.com/RegExr/ In order of how much I use each. Rubular is good for fine tuning regex, but the AJAX can be a little frustrating sometimes. txt2re is good for quickly generating regex, but can be a little greedy. RegExr is another tool like Rubular, I don't use it that much.
Yeah but wrapping functions doesn't require recompile.
Sounds to me like it's time to install Ubuntu, or whatever Linux distribution you want. Regular expressions date back to the 70s and Unix. I can't imagine interacting with nix operating system without regular expressions -- they're like second nature. It's the same for any experienced engineer because *nix is unavoidable if you want to solve complex problems effectively. I think you're ready to direct your efforts into learning about the various systems that surround your programming language (and, more importantly, other programming languages). If you use PHP as the catalyst to learn then you will slow yourself down considerably. So here's the task for you. Get a VPS at Linode ($20 a month, it's worth it for career growth). Build an image gallery using Python (instead of PHP), PostgreSQL (instead of MySQL), and Nginx (instead of Apache). It'll take some time and it'll be frustrating at times -- don't give up. Oh and if you haven't been using a distributed version control system, add that to the mix. I suggest Git in combination with Github so you can make use of the massive community out there. You can also use Mercurial or Darcs. Give yourself a month to get it all done. What's 1 month? Heck make it 2 if you have freedom to do so. When you need help, jump on irc.freenode.net and ask for help in #linux, #nginx, #postgresql, and #git. This task alone will open a brand new dimension for you. It will certainly make you a much better PHP programmer because you will come to appreciate the language more (and appreciate it less in certain areas, but that's a good thing).
Regular expressions are not that complicated. I don't consider myself smart by any stretch and I use them every single day with no problem.
The best thing to do is to learn another language. It will give you profound insights into PHP.
MySQL is quite honestly utter shit for fulltext searching. Unless you have a small site with not much traffic then it's not really worth it. Instead you should use a search daemon like [Sphinx](http://sphinxsearch.com/) or [Lucene](http://lucene.apache.org/java/docs/index.html). It's quite a bit more involved but the performance and search results is just so much better.
Thanks, I'll look into that. =)
Toss in another vote for Sphinx. Really killer results. And, yeah, like the man said, best to just steer clear of mysql for this. (I've also used Lucene, but I prefer sphinx.)
We used Solr in our latest project, with quite good results, so that's another thing you might wanna check out.
It's probably a good idea to use something dedicated to searching, like mentioned in the other post. But if you can't do that for some reason then you can do something using all MySQL by just building your query dynamically. Something like: //terms the item must contain $contains=Array('contains','these','words'); ///terms the item cannot contain $not_contains=Array('does','not','contain'); $sql="SELECT col1,col2,col3 FROM table WHERE Status='Open'"; //at least one of the searched fields must match each of the searched words if(count($contains)&gt;0) { $arr=Array(); foreach($contains as $idx=&gt;$word) { $arr2=Array(); $arr2[]="searchcol LIKE '%".$word."%'"; $arr2[]="searchcol2 LIKE '%".$word."%'"; $arr2[]="searchcol3 LIKE '%".$word."%'"; $arr[]='('.implode(' OR ',$arr2).')'; } $sql.=" AND (" .implode(' AND ',$arr).")"; } //none of the searched fields can match any of the $not_contains words if(count($not_contains)&gt;0) { $arr=Array(); foreach($not_contains as $idx=&gt;$word) { $arr[]="searchcol1 NOT LIKE '%".$word."%'"; $arr[]="searchcol2 NOT LIKE '%".$word."%'"; $arr[]="searchcol3 NOT LIKE '%".$word."%'"; } $sql.=" AND (" .implode(' AND ',$arr).")"; } //$sql now contains your compiled query Based on your example text I can see that you already know about SQL injection, so I'll assume that you will somehow escape all of the applicable parts in my example above. I left that out for clarity. If you are using PDO, you could use a named parameter for each of your search terms, or do whatever else suits you. This is going to get the pants beat off of it by anything actually designed to do fulltext searching, but I've had to do similar things in situations where MySQL FULLTEXT was not an option and I was not in control of which services I could install on the machine. It can also be a temporary workaround while you get a better solution in place.
Key phrase here is "every single day". I agree, they're not that hard but every time I come back to them, I've got to hit the tutorials again because it's been three months since the last time I spent a couple of hours using them. If you use them every day, it's probably second nature to you.
Also, if you don't want to use Java for your project, look at [Zend Lucene](http://framework.zend.com/manual/en/zend.search.lucene.html). It's a port of the java one, and works just as well.
Considering it's written entirely in PHP I'd much rather just go with Sphinx. (which I use anyway so maybe I'm biased) It's completely written in C and works blazingly fast.
The problem with this approach is that %WORD% forces a full table as MySQL indices are left-prefix sorted. That's fine if you have only a small amount of data, but once you get into the tens of thousands of rows it becomes a significant bottleneck and it will only get worse as you scale your data.
What would you rather use for string matching and manipulation? Regular expressions are fucking awesome.
Great point, and I agree that my example is not the optimal solution!
A couple years ago I ordered 'Mastering Regular Expressions' by O'rielly and read the first 80 pages of it to get an understanding and i've not needed to look at it since. Another tool that I love is RegexBuddy.
Have the decency to buy an ad or GTFO.
Periodically or on-write/change build a cached keywords table that you don't have to use wildcards on or something maybe? It's a lot more work to build, but if you want to explore the doing-it-on-your-own route, it would be an option for gaining speed. This lets you build your own results scoring matrix, too, if you really want to explore the idea. If you just want it to work, go use Sphinx like other people have suggested. :)
Don't get me wrong they are so awesome when they work and I wouldn't use anything else, just they are my kryptonite. 
Make sure you have strong knowledge of PHP OOP features, such as [Interfaces](http://php.net/manual/en/language.oop5.interfaces.php) (Make sure you check out the [predefined interfaces](http://php.net/manual/en/reserved.interfaces.php), they can be useful). A good working knowledge of [references](http://www.php.net/manual/en/language.references.php) is important as well. When learning regex, you should make sure you can validate a phone number according to [this](http://en.wikipedia.org/wiki/North_American_Numbering_Plan), an IP address, and an email. But not basic email validation, cover as many fringe cases as you can. A lot of the PHP array functions are underused but can be very powerful and make your life easier. [Check them out](http://ca3.php.net/manual/en/ref.array.php). In particular, [array_keys](http://ca3.php.net/manual/en/function.array-keys.php) will return an array of the keys of an array, [array_map](http://ca3.php.net/manual/en/function.array-map.php) will apply a function to every element in an array, and [array_flip](http://ca3.php.net/manual/en/function.array-flip.php) will exchange the keys with the values. Make a backup script that backs up your MySQL database via cron using PHP. The script I wrote will create a separate SQL file for each table, and database and store them in separate folders, GZip them up, delete the temp files/folders and email me a notification that the GZip was created with a link to the path. If you want an extra challenge, write a PHP script that runs on your local machine and routinely checks your email using IMAP functions. If an email from your cron job is detected, have it download the MySQL backup using FTP functions. That will introduce you to the IMAP/FTP libraries. Try to identify some things you, a friend, or a family member does a lot in their job that could be automated, and write a simple, user friendly script to automate it. A great example is anything relating to spreadsheets. That is all I can think of for now.
If you don't want to throw 20$ a month for a linux server, you can get a VPS from Amazon, their Micro instance is free for the first year. (After that it's about 15$/mo)
As opposed to Hiring incompetent PHP developers... Why did you feel the need to specify that? Do you really believe someone is going to read that and say to themselves "well fuck, I'm incompetent, so I won't apply for that one".
Another vote for sphinx. Word of advice.... Do a global update (yum update all) before attempting an install. FML. Also, had great luck so far with version 2.0.1 spefically. Beta, but does some cool stuff.
Buy [Mastering Regular Expression](http://www.amazon.com/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/0596528124) and you'll essentially have the /[A-Z]/i guide for regular expressions.
Needlessly obfuscated. Using a character class or capture for a single character serves no purpose. /l{2}/ is functionally the same as /[l]{2}/ and /(l){2}/ with the exception that (l) will return in the capture set. "(g)?" serves no purpose because it is the same as "g?" unless you really want 'g' in a capture.
I totally agree about Lucene. We used Solr at my last job; it was a dream come true. Made searching so much easier. There's a bit of a learning curve, but, once you get the hang of it, it's so easy.
i like simpleXML
dont do it!
Piling on, but sphinx has saved my bacon on many projects. Fast, flexible, easy to work with.
regex.
I've used Zend Lucene, was pretty easy to implement. Also have used Sphinx which worked well. Really can't go wrong here.
Thank you! 
yeah. no. it isnt. not by a long shot. long as in from one theoretical side of the galaxy to beyond the background noise radiation.
What's your issue with Symfony 2?
just that you had to put a 2 behind it to make it better... galaxy, long shot, we're there again.
A tongue-in-cheek submission to contrast against spam posts such as http://www.reddit.com/r/PHP/comments/jpg39/how_much_do_you_pay_for_web_hosting_how_about_2/ But really the free tier of AWS is a great way to get started and gain familiarity with setting up a linux distro by hand :)
Not sure that these are going to be options. although they look like they would be perfect, my host doesn't allow daemons to be run on the server ( shared box ). Is there a way for mysql to do a * except ( a,b,c ) search? If this turns into a bigger thing than I am anticipating, then I'll look into a dedicated box and running the search servers. For now, I think mysql will work if I can solve the above problem.
If you have anything more than a few thousand rows of data then I'd recommend a VPS if you're going to do searching. If you're on a shared box then the full table scans will just use too many resources and get your account disabled unless they can upsell you. But yeah sure, you can search on only some rows, mysql documentation on fulltext searching has all the details on that.
This is really good advice. Seeing things from a different perspective is a good idea. Also take a look into improving the quality of your work and ensuring quality standards with unit testing/TDD and other PHPUnit tools. Do some investigation into continuous integration servers (Jenkins is IMO the best). jenkins-php.org. Also I hate to put it this way but getting into a "real" programming language like Python would be a good move and make you look at PHP differently. 
It's dangerous to have them as hidden variables because a user can change them; meaning you need to then revalidate them every time. I'd suggest you stick them in a session. You could just make an array with them all in and serialize() it, stick it in 'step1' in your session etc
If partial form fill is important (for example, this is business critical form and you will have somebody call/email the visitors that start but do not complete the form), then stick it all in DB, otherwise use _SESSION. 
cool. thanks! 
appreciate the input
make sure your PTR records are setup and you wont have a problem assuming your not a open relay server.
Why the heck do you need to serialize it if it's in $_SESSION... :S
There are many, many ways to do this... all quite simple. One way: have form 1 submit to form 2, which stores form 1's data in $_SESSION. Do the same for form 2 to form 3. Form 3 submits to a 'final result' page, which then rechecks all the data in $_SESSION, and if valid, stores it and tells the user everything went *okay*. Simple enough.
Rofl. That's true.. I was thinking serialize for posting it, but actually, just stick the whole array in there :/
There's also a note about it on php.net home page - http://www.php.net/ &gt; [22-Aug-2011] Due to unfortunate issues with 5.3.7 (see bug#55439) users should wait with upgrading until 5.3.8 will be released (expected in few days).
If you're learning frameworks for the first time, I would recommend a stable one with a large userbase first, before one still in rapid development..
The basic idea of a framework is that it might double your time learning it for this project, but if you learn it properly then it will halve the time it takes for your next few.
jquery.
the 2011 answer to this is to learn Javascript
like this: weightlosscalc.org Keep the form on one page, use jquery or some other javascript to present it to the user in multiple parts.
You should look into Zend Lucene. It's native PHP based, so it doesn't have any running daemons.
I would further what Shinhan says, save the data as you go, then there would be a complete field in the database when you submit the last form. Save the fields between pages so if someone wants to come back and complete it later, they can do so it easily. 
I appreciate the thought but please save your money :P Sounds like you're going a different route now and the required PHP extensions weren't compiled into the installation of PHP you're using. Put this code in a script and run it from the browser and post the results. &lt;?php $ext = get_loaded_extensions(); natcasesort($ext); echo "Loaded Extensions: &lt;br /&gt;" . implode("&lt;br /&gt;", $ext); ?&gt;
Loaded Extensions: apache2handler bcmath bz2 calendar com_dotnet Core ctype date dom ereg exif filter ftp gd gettext hash iconv imap json libxml mbstring mcrypt mhash ming mysql mysqli mysqlnd odbc pcre PDO pdo_mysql PDO_ODBC pdo_sqlite Phar Reflection session SimpleXML soap sockets SPL SQLite sqlite3 standard tokenizer wddx xml xmlreader xmlrpc xmlwriter zip zlib *edit* Which maybe explains this? Fatal error: Class 'domxml_new_doc' not found in C:\xampp\htdocs\phpsql_genkml2.php on line 26 *edit 2* I tried using this class in another document and still got the same error. &lt;?php $doc = domxml_new_doc("1.0"); $root = $doc-&gt;create_element("HTML"); $root2 = $doc-&gt;create_element("CSS"); $root = $doc-&gt;append_child($root); $root2 = $doc-&gt;append_child($root2); echo htmlentities($doc-&gt;dump_mem()); ?&gt; and it returned: Fatal error: Call to undefined function domxml_new_doc() in C:\xampp\htdocs\test2.php on line 3 Is there a way to "install/include" this class? Or another class with a similar function? 
And the actual article is at http://threatpost.com/en_us/blogs/serious-crypto-bug-found-php-537-082211
oh god it links to a reddit clone. we've gone deeper into the dream!
Ok sorry for the muddled responses. I'm being clear as mud, right? Okay so when I use the first method... I'm now past the connectivity errors and it's now going as far to even run the script. However, as I mentioned earlier, instead of displaying the text, it's being downloaded by the browser as a .PHP Upon opening it, it appears to be the correctly formatted xml file. So why is it doing this? I found mention of this in an online forum of someone also having a very similar problem using this class. *brazilbear, Right off the bat, I can help you with the .php/.kml problem. It's not a problem. Remember this is server side scripting, it's not meant to be saved as a separate KML and then loaded into GE. It's meant to be loaded via a &lt;NetworkLink&gt;. So you would load into GE a KML that would look something like this: &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;kml xmlns="http://earth.google.com/kml/2.2"&gt; &lt;NetworkLink id="Pizza"&gt; &lt;name&gt;Follow Concordia&lt;/name&gt; &lt;visibility&gt;1&lt;/visibility&gt; &lt;Link id="Pizz-URL"&gt; &lt;href&gt;http://localhost/pizza/phpsql_genkml.php&lt;/href&gt; &lt;refreshInterval&gt;60&lt;/refreshInterval&gt; &lt;/Link&gt; &lt;/NetworkLink&gt; &lt;/kml&gt; Then this &lt;NetworkLink&gt; would reach out to phpsql_genkml.php, get the KML data and load it into GE. The bottom line is the PHP doesn't have to have a .kml extension. As for your other problem I'm not sure, I have to dig around for that answer. Hopefully, ManoM has an answer. mwill * So maybe I'm having the same problem?
surprised noone has suggested this method yet. if you need to dump all the data to the database, dump after each part, but flag the record as not completed(using a field with a boolean value, most prefer tinyint for this, others enum). after the final page is done, dump that pages data as well as flag the record as completed.
This is really the best answer. Nowadays having to load the page 3 times for a simple registration form is just plain annoying.
Who actually uses md5 for security any ways?
Because then you end up with a bunch of half-completed records cluttering your database from people who never get to the last page.
Sessions are a reasonable solution but they're not good in the general sense because they limit users to using your form in a single window or tab. Serialize the data, put that in the hidden variable, and tack on a MD5 hash to detect if the user modified it. Better still, use a framework that handles it automatically.
Chrome on Windows and Linux. Does anyone else notice this?
ok so it's generating valid XML, this is good. Now it's just a matter of mime typing. Before your script starts dumping data on screen, is there a header() statement defining the Content-type as *application/xml*? if so, and your browser is still prompting you to download as a .php file, this is a server issue. Chances are you just need to do an "AddType" in the apache configuration to associate the *application/xml* mimetype so it's not treated as a binary downloadable file mimetype such as *application/octet-stream* I know this probably doesn't sound clear but it sounds as if you just have a simple mimetype problem left (which tells the browser how to re-act to the output).
Similar positioning issue in FF/OSX. Looks like it's been absolute positioned by the subreddit CSS, just in the wrong place...
it does a lot more than reddit i.e. allows you to tag any post, embed pictures &amp; videos and also tries a novel approach to model online reputation systems. it also have an rss reader. disclaimer: i'm the developer http://zizindrin.com/home/faq
Correct. And the formatting is correct. However I'm actually not sure it is supposed to "dump" to the screen. The tutorial lists the name as the file as: phpsqlkml_expectedoutput.kml while mine is phpsql_genkml.php.... I'm not sure if it is supposed to be a .kml or .php file extension? 
I would personally just make them 3 separate form pages, and store the intermediate data in your session. I wouldn't rely on passing around hidden variables since that may be spoofed (e.g. with Firebug).
But probably .kml as seeing that would be more useful LOL
its right border is offset to the edge of the search reddit box on ff4/linux
I'm using chrome ( 14.0.835.94 beta-m ) and it looks ok? [screenshot](http://i.imgur.com/6oMkr.png)
Too busy rushing around trying to fix crypt()?
It's better than mine, but shouldn't it be next the saved button?
RES does play a roll in this, but even without RES it's [really awkward](http://i.imgur.com/IJkTx.png).
this is r/php not r/css, that's why
it's because that element is actually located in the right sidebar with the other information that is easy for mods to update. then they absolutely positioned it up onto the nav bar level. You can easily specify the x dimension (top:52px) but since the width of the layout is fluid, they just took a guess and put it at (right:305px). If you change the width of your window, you can make it line up just right. I agree though, kind of awkward. Since it's just a link it seems like it would be fine if left in the sidebar.
gotcha.. yeah you'll need to edit the webserver (or simply the .htaccess file if your web server allows one) AddType application/x-httpd-php .kml That will cause your .kml file to be processed as if it were a .php file on your server. Add that to your apache config (or .htaccess file) and rename your php script to .kml and hit it via a browser.. Should work.
[Fix revision](http://svn.php.net/viewvc/php/php-src/trunk/ext/standard/php_crypt_r.c?r1=315218&amp;r2=315217&amp;pathrev=315218). Looks like a 3-char bug.
How is "good benefits" equivalent to zero vacation days?
thats pretty cool actually
It is when you shrink your screen size, compared to your first screen shot.
I cropped out several hundred pixels to make the image less wide without taking away from the message. The second screenshot is originally 1068 pixels wide while the first was 1684, cropped to what you see in the link.
61400 results (http://imgur.com/T3SX6?full)
I can't decide if i'm excited by some of the ways to cut code re-use with these, or horrified at some of the crazy confusing monstrosities less experienced developers are going to come up with for this.
You could store several key/token pairs (up to a certain limit) on the session and destroy them after use after. Not particularly efficient, but if you create a pair per form requested you still have the protection while not being limited to a single tab.
Fair enough, it's just I don't use RES and have a larger gap between the PHP.net link and my userbar (Win/Chrome).
rofl. something awesome like this: trait TheKitchenSink { public $yep; ... public function unrelatedMethod1(){ /* ... */ } ... public function unrelatedMethodN(){ /* ... */ } } class GoldenHammer { use TheKitchenSink; } $gh = new GoldenHammer; look, ma, i can use whatever i want wherever i want!
Seeing over 100k+ results on my search
It depends on whether or not they can pick it up later. If there is a way to pick up the survey later one, this method will work. That being said, I would include a way to clean up the database once in a while of unfinished entries.
Do you know the changes between 1.4x and 2.0? There are quite a few improvements. You give me the impression that you don't really know what you're talking about - Perhaps you just don't like Symfony. Maybe it's just a personal preference rather than fact. Most modern PHP frameworks are awesome.
I dislike the cargo cult mentality of PHP development which continues to add new features but neglects to fix any of the things that people actually care about. 
thanks?
I was going to say this too. No sense loading up PHP and a db connection.
PHP 101
Fuck, I can't believe I read the entire discussion so far. Anyway, just wanted to say I share your views regarding Smarty and template engines in general.
This is such a great resource since the PHP manual doesn't exis-oh, wait.
I'm going to guess that I'm missing something very obvious here but why go through the hassle of setting up some proxy to relay results for you over one incorrectly formatted return? Why not just fix up the set of results that need reformatting?
Why not just fix the error using JS?
The solution to that is as simple as writing a cron job to clear records older than X days that haven't been completed.
Yeah I agree. You can still write the data to DB or even to session after each step if you need to via an AJAX call, and your user doesn't have to suffer through an overly long registration process extended by unnecessary page refreshes. The real best answer I think though is to ask yourself why is your registration process so complex that requires 3 separate steps? If there is a way to streamline it, you should. Many modern registrations I've seen basically ask you for an e-mail and password and you're on your way. That is how it should be if at all possible (I realize this isn't always the case depending on your project).
Apparently, I am trying to solve my problem in the most elaborate way possible. Damn. Ok, so I got the following error in the Google Chrome Javascript console: Uncaught SyntaxError: Unexpected token ILLEGAL The object it refers to is the result from a $.ajax query and I have no idea how to access that result. The first thing that came to my mind is that if I changed the JSON object, I would prevent the error from happening instead of solving it. I can catch this error somehow and edit the JSON object?
Whew thought I was gonna have to make a question on Stack Overflow for this.
This article would be an order of a magnitude more helpful if it actually used keys in the arrays and showed the output of ksort and krsort, rather than leaving key sorting an afterthought
Traits are useful in concept. But in PHP, I feel like this is a feature that (like namespaces) is only really helpful to the rare PHP applications that are so big they shouldn't be written in a language so unwieldy as PHP at all. Once your class frameworks get complicated enough to need this sort of thing, chances are you're doomed anyway due to the dynamic &amp; loose typing, unstructured error handling, and driven dotty by typing $this-&gt; every other line. (&lt;/rant&gt;)
I didn't mean to imply there was no solution for it; but the whole thing is now much more complicated than it needs to be. Storing the intermediate page values in a hidden field (serialized and compressed is my preferred method) is far simpler and self contained.
No need to down-vote me. Storing page values in a hidden field is a horrible security risk and the serialization is an unnecessary performance hit. If you don't need to persist after each step, store them in session just like everyone else does, no serialization required.
I didn't down-vote you. But I did just up-vote you back to 1. Storing page values in a hidden field isn't a horrible security risk -- they entered the values in the first place and you should never trust the client either way. I include a hash to detect modifications and reject the whole thing if it doesn't match. Serialization is not a significant performance hit (and using sessions *does* a serialize just the same). Certainly any database access is far and away more of a performance hit than anything. Storing stuff in the session can get easily confused if the user is accessing your pages in more than one browser tab. 
Actually; the article would be an order of magnitude more useful if it didn't get EVERY SINGLE EXAMPLE WRONG. sort() returns a boolean and operates on the array in-place (it being passed by reference) Everyone should run FAR AWAY from w3helper.com on the basis of this extreme stupidity.
Appreciate it, and you do make fair points. It isn't a significant performance hit, especially compared to a DB insert/update. But why would the user ever be going through a registration form in separate tabs? Bah I guess it could happen though... I tend to shy away from using hidden values for sensitive data like passwords though just in case.
Hah! Good point, I didn't even catch that :|
Regexes are tricky, but kind of like riding a bike. Once you know how to do it, they come "relatively" easily. My recommendation to get better at regexes is to give yourself a small side project that involves HTML scraping. Try building your own search engine that takes a search and returns the results from Google and Bing. This type of project will get you up to speed rather quickly on various regex skills.
This can be done a variety of ways, JS, Sessions, etc. Here is my favorite way of doing it that doesn't cause you to lose sleep over losing sessions and such. 1. Setup a MySQL table that will store all the data and have the first column be lead_id (or something similar) that is a primary &amp; auto incrementing id. 2. Program each step of the form to validate and post the fields it collected to the above table. In the event of a first page post, you should grab and remember the lead_id. 3. The subsequent second, third, fourth,... steps simply pass a hidden variable (lead_id) to the next step in the form process. Additionally, each page can do a SELECT on the lead_id to gather all the data posted up to that point. This is especially helpful if you want to tweak later questions based on earlier answers. 4. ?????? 5. Profit. 
Actually clicking through to the last link returned, google only gives you 575 results. That's a lot of links it doesn't want to share. 
Because I can't. I use JQuery $.ajax for a JSONP request. If an error is encountered, the error callback is called, but you do not get the data associated with the request in the error callback. So I can't edit the data. I've delved through the JQuery code, and as far as I understand it, the response to the JSONP request has to be converted to script in order to work. This conversion fails due to the double quotes floating about. I do not know how to access the response in this case, because I really do want to edit it in JS if it is possible.
And when I say JSON.. I mean JSONP. My apologies. As far as I can tell it is not possible to access the data when a parse error has occurred, which is exactly the case with free roving double quotes. So I can't fix it in JS and will fall back on the PHP proxy option
Son, you just have a small resolution... it's nothing to be ashamed of.
I don't know off the top of my head but I think one work around is to not specify you are receiving JSON so that jquery doesn't try to make sure its correctly formatted and return an error instead leaving you with a mostly correct formatted json string. You could then do whatever you need to do (find and remove the extra quotes by the sounds of it). Then convert to a json object?
Have you looked through the documentation for $.ajax? I think you should be able to set dataType to "text", or maybe even hook into the jsonp callback to manually deal with the returned data. You should be able to do it all in JavaScript though.
How are you doing your requests? cURL? If so, I'd suggest you read up on [curl_multi_*](http://us.php.net/curl). You can perform multi-threaded URL requests. It takes a bit of setup, but it uses a lot less memory than forking. curl_multi_init() has a basic example.
What are you doing with the fetched data? Forking will start a new process and the calling script will continue on without waiting for it to finish. It's also not reliable to fork when running from a web server. What exactly is triggering the fetching of the remote data, and what do you do with it afterwards? If the rest of your script relies on the fetched data, you really have no choice but to wait for it. An option for background processing is to set up a cron job.
file_get_contents() for now, but it doesn't really matter what I use. I'll look into curl_multi. Thanks.
After looking into forking, it isn't really what I need. The retrieval is triggered by a user, and needs to be immediate, so cron won't really help. Thanks.
If you are looking for a somewhat more advanced solution, have a look into [Gearman](http://gearman.org/). It allows you to farm work out to multiple servers, or run jobs en-masse. It has a PHP module available for it, and it quite easy to setup and use. As NedRyerson mentioned, you don't want to do pcntl_fork from a web server environment. In the case you are in a web server, Gearman is an excellent choice. As Signe pointed out, cURL also have some mutli-processing built into it. If you aren't firm on using PHP, Python has excellent [multiprocessing](http://docs.python.org/library/multiprocessing.html).
While my methods might not be the cleanest, it works... What I generally use, is ob_flush(); You have to initialize it with ob_start(); at the top of your script, then use ob_flush(); flush(); after each instance that you want the page to draw (At the bottom of a for loop or something). Still though, it's going to take time to run through all those tasks, but it will make the page appear to load faster. I've also used a combination of this, as well as embedding iframes, where Im firing off each instance of my loop into seperate iframes passing $_GET parameters, once the iframe loads, I use javascript to grab the data within those frames.... Helps speed things along.
I'm getting 248k results, up to page 60..
i do stuff like that with node.js edit: i really get downvoted for suggesting a solution by pointing out php is not made for this and it would be easier in a language OP probably already knows? ... you people make no sense. always use the best technology available which is easy put to action. async file requests... i did this stuff in php for years but now i know that php is just not made for it so why waste valuable time on it.
Then don't cast the data received as JSONP. Cast it as regular text, fix the error, then pass it to a JSONP parser. If you can't do that, then jquery 1.5+ can accept a "converter" that you can use to pre-process data if the expected value is different than the actual. In this case, make dataType a custom type and in the converters section, add a function for json and format the raw string properly. Return the formatted string and/or json formmated string. $.ajax({ dataType: 'customtype', converters: { 'text json': function(txt) { var fixed = fix_me(txt); //code to decode fixed to usable object. } } })
Or maybe it considers them duplicate content?
The title of this submission raised my heart rate a little. I thought some PHP devs were forking PHP or something.
In 2011, would you bother with a backup option in cases users don't have Javascript? Progressive enhancement/graceful degradation?
LGPL lts you do some of that, but if you sell consulting and NOT the actual code, anything is OK.
aka mail spammer in the biz
I have been doing that for a long time - but with the project I am working on now I am no bothering and just redirecting client with Javascript disabled to a page that asks them to enable it or to upgrade their browser. We put in a lot of effort in previous projects on good progressive degredation, but it simply wasn't worth the investment. The number of non-JS clients is very low. I would do it for something like a blog or comment stream, but not a web application. The other change I have made is using templates for the entire UI and pre-setting just a single div in the actual page. Having every div in the html and juggling with show/hide is too much of a pain for larger apps.
I've done something almost identical in code to what you want to do with pcntl. It gets a bit confusing but it works great; you can spawn child processes that essentially will run certain parts of your code and the parent (initial) process can get their results back. It's great for parallel tasks when you want to limit the children as well as get information back from them. $pid = pcntl_fork(); if ($pid == -1) { die('could not fork'); } else if ($pid) { // we are the parent pcntl_wait($status); //Protect against Zombie children } else { // we are the child } That's a basic example of how to do a fork. You can fork as much as you want and just control it in a loop that waits for children. Edit: feel free to ask me for help if you have code etc
Normally that would work, but JSONP is quite the misleading name. It is padded JSON, padded in the sense that it is formatted as **functionname(data)**, where data will be the JSON part. Basically a JSONP request is the same as entering the URL in the src="" part of a &lt;script&gt; tag; it's a direct request for a JavaScript literal so to say. As far as I know it's the only way of getting around the Access-Control-Allow-Origin policy of browsers. Well, this or using CORS. I am no web developer and I just quote what I've read on the web. Cross-domain requests is the only option for me, but it would seem that badly formatted JSONP is just cramping my style...
Can't. I use dataType "jsonp" because that's the only data type that allows for cross domain requests.
I have looked into the JQuery code to see how $.ajax() handles this. The catch is that with JSONP being a cross-domain-request, there is actually no data being converted so to say. As far as I can tell the JSONP callback is either called and you have the data, or it is not called and you don't have the data. That is all the converter for JSONP does. The idea with JSONP is that you request a server some data and give the name of the JavaScript callback function which the server will use to pad the JSON data. The result is **callback(JSON data)** Basically you could just put the JSONP URL directly in the src="" of a &lt;script&gt; tag. So this is where it goes wrong. If the JSON has some bad formatting, it will nevertheless be directly eval()'ed by the browser (or the JS runtime.. or something like that) in order to execute the script. Since the eval fails, the function is never called and the data never became accessible for alteration. edit: sorry for got to mention why I couldn't use the 'customtype' dataType The requests I make with $.ajax() are all cross domain requests. I've tried other data types, but I keep encountering the same origin policy; apparently JSONP is the only cross domain data type, since it is a JavaScript type and you can always load JavaScript from other domains.
Yes, me too, but just now. [http://imgur.com/CDMrT?full](http://imgur.com/CDMrT?full)
See how a project like mysql licenced it. Could you not have a GPL "Community" version, then a premium version which is licenced seperate?
We had issues with our autoloader, but only from the cli. For some reason it kept pushing the script name through the autoloader as though it were a class. Didn't have time to investigate, but we had to roll back immediately.
If your code is PHP 2.0 compatible, you're doing it wrong.
Ah, well then. Sorry my suggestions were of little use. What game server is it? Have you checked their forums/bug tracker to see what others are doing to work around the formatting? Maybe someone will have already come across this and provide a fix. *bah, I'm guessing you have if you've made your way here to ask... 
Yeah, I'm at my wits' end. It's a Monday Night Combat Dedicated Server. I think for now I am just going to use a PHP proxy to reformat the JSON data. Will have to pass the username and password as URL parameters for now, well either that or simply host the entire thing. I just wanted to make it a downloadable admin tool that anyone can use from their desktop by simply opening a html in their browser. But you need the username and password in order to do the requests, and so does the proxy defacto :/
Use system or http://stackoverflow.com/questions/45953/php-execute-a-background-process and http://nsaunders.wordpress.com/2007/01/12/running-a-background-process-in-php/
Took a look over at the forums it likes like its still a pretty new and evolving API. (or a pretty big afterthought)
It looks nice - I like HMVC frameworks as they solve several problems with trying to do things like widgets. Also find their ModelView concept interesting.
The non-abbreviated function names reminds me of Objective-C/Cocoa Touch methods.
Just getting started on it the now, so far I am loving their command line tool, Oil. Very useful. 
Yes, you are right about that. I understand from the forums they use some sort of Unreal based server but have rewritten the JSON handling. Even though much could change in the API, I also get the impression it won't be very soon. The web-admin part of it is not widely used, well, not untill some cool tools come out first I suppose hehe. 
Also, from Engine Yard's blog: http://www.engineyard.com/blog/2011/engine-yard-and-orchestra-join-forces/
I like the look of it. It seems like they took the Symfony idea and went in the opposite direction of the Symfony developers - simple, easy, flexible. I look forward to using it on my next project.
Tried it last weekend. I wanted to write simple application that grabs data from Runkeeper API and shows pretty charts. [Runkeeper is using OAuth 2.0](http://developer.runkeeper.com/healthgraph/registration-authorization), so I quickly found [OAuth package](https://github.com/julesjanssen/fuelphp-oauth2) on GitHub, dropped it in packages directory and was able to connect to API without a hitch. Consulted FuelPHP documentation couple times and it was quite helpful. Everything went better than expected. &gt;Edit: added relevant links
Can you give me a use case as for when you would need this function?
Technically, he's correct (the best sort of correct), but this is the sort of stuff that nightmares are made of five years down the line.
If you're interested the FeedWordPress plugin does everything your looking to do. You could look over that code to see how they accomplished it.
It's indeed a very painful example, but I can see it as a necessary evil in some cases due to the lack of "finally" in try/catch in PHP. Still, not something I would want to have to implement/maintain and there are better ways to work around it than that.
Look into [PECL HTTP](http://pecl.php.net/package/pecl_http) — it has a much nicer interface than curl (but uses curl in the backend). Also, as mentioned, gearman is a great way to background these long-running processes.
Coming from a Kohana and CodeIgniter background everything looked familiar but with many improvements. I'll try using it for my next personal project, but until I've had more time to play around with it, I probably won't be using it for any work projects. As Allyant said, Oil is a nice addition that would make starting a project much faster. 
Not really sure what you mean.. The table seems to be rendering for me just fine and the HTML looks alright.. What do you mean by a `tr` showing up? 
i think you meant to post this in r/css
It's all in your CSS. Your reset.css file sets the border to 0 for a lot of page elements. Your main.css file sets some of the borders back to "1px solid #0073A4", but not all of them. In main.css, around line #679 you can change this: #content td { border-left: 1px solid #0073A4; .... } to: #content td { border: 1px solid #0073A4; .... } And it should add borders all the way around your table cells. Now, this is intended to be helpful advice and not offensive to you at all, but this is really on the lower end of the difficulty scale in regards to web development. You will most likely save yourself time and your company money by paying someone qualified to do it.
Learn Python. Not joking. 
&gt;I'm working on finishing up a new page for the company website, and I'm faking the fact that I know what I'm doing because.. well.. I don't. Then it's time to quit so you can find something you know how to do.
Fuel is a mix between Kohana and CodeIgniter. Almost all the developers for Fuel have previously (or still are) CodeIgniter developers. You can see the influence of CodeIgniter in the code. Unlike Kohana, Fuel comes with a lot of features included in the core package; This isn't to say Kohana doesn't have these too, but they chose to have them as additional git repositories/modules. Including a Mongodb driver would be something that in my opinion would be an additional package As for the code, they have really ridiculous methods: /** * Generates a html title tag * * @param string page title * @return string */ public static function title($content = '') { return html_tag('title', array(), $content); } There's no need for this, I don't understand why you would ever need it. Some functions don't have the best of names either. /** * Hydrates the input array * * @return void */ protected static function hydrate() { static::$input = array_merge($_GET, $_POST); if (\Input::method() == 'PUT' or \Input::method() == 'DELETE') { static::$put_delete = parse_str(file_get_contents('php://input')); static::$input = array_merge(static::$input, static::$put_delete); } } It's better than CodeIgniter, but I believe there are some better frameworks out there, namely Symfony2, Lithium and Kohana
/r/html would make more sense to me
It isn't my position here. I took a basic web design class and they asked (As I'm the IT person) if I could do it, I said sure. I only do basic updates and maintenance. It works, and they're willing to pass it on to a professional if I don't think I can handle it. I'm not afraid to tell them that. 
Thanks.
I appreciate your help. I may not even need to edit it, the boss told me it looks fine as it is. So, I may end up leaving it. But, in the case she changes her mind, thank you for helping me pinpoint it. I know some about web design, but I don't know near enough. I know a little about graphic design too, not enough to be put in a job, but I do the graphics here too and now I have a meeting at noon with someone wanting me to do graphics for them. I have no clue what to charge, I just dabble in it for fun, not for job. This web design stuff will never go further than a few updates here and there, I hate it.
The table shows up, but the horizontal line, (&lt;table row&gt;/&lt;tr&gt;) doesn't show. NedRyerson pinpointed it for me, it's CSS. I'm terrible at this.
Maybe work your way up to the project, but you can tackle it. Really all you're doing is going through a preset set of conditions. So you'd start out with say, SELECT * FROM districts. When they select a district, you do a SELECT * FROM schools WHERE district_id = &lt;district&gt;. When they select that, you do a SELECT * FROM subjects (maybe go so complicated as to only pull subjects present at that school). You'll end up with a series of ids by which you'll do a final SELECT * FROM documents WHERE district_id = &lt;district&gt; AND school_id = &lt;school&gt; AND subject_id = &lt;subject&gt; which will give you the final curated list. Commit yourself to a prototype phase. Do it short, sweet, and dirty. No design, just a proof of concept to yourself to try out techniques. Most important rule about prototypes though is you burn them when you're done (not really delete it, but start from scratch for the final product, just use the prototype as a reference, don't attempt to refactor the prototype). **tl;dr** Yes, this is a great job for an RDBMS like MySQL and PHP will handle it just fine.
Being new to this type of coding, I feel like I have the tools to do what I want to do, but how I go about it throws me off. This gives me an idea of where to start, thanks for your help.
If you are trying to verify if it's an XML feed from a URL, then just check for XML and ignore anything else. What if they're submitting an image? Then this returns 'text'. You should just make something like is_xml(), since I can't think of a time when you would need to know whether or not a document is XML, HTML, or "other" instead of just one of those three - is_xml, is_html, etc. If it starts with &lt;?xml, minus comments (never used these in XML; is it valid to start an XML document with comments?), return true. $document = ltrim(preg_replace('/&lt;!\-\-(.+?)\-\-&gt;/', '', $document)); // you may want to use "anything that's not --&gt;" instead of .+? Then check the first 5 characters to see if they are &lt;?xml
That's a good idea, although 90% of the code would then have 2 separate licenses. Would that matter?
ok. Thanks for the input. There will probably be a few modules which would be very similar, but the community version would have less functionality than the premium version.
Please understand-this is our bread and butter. So I read this post as: "Dear r/PHP, please help me take 'yer jobs". The fact that this isn't even a PHP issue makes it all the more painful. 
&gt;**Most important rule about prototypes though is you burn them when you're done (not really delete it, but start from scratch for the final product, just use the prototype as a reference, don't attempt to refactor the prototype).** Don't ignore that part. If you are new to this than your prototype is going to suck, and you're still going to be tempted to use it. Don't.
I'm just going to revert to deleting this post, as I can't obviously get it clear enough that I'm not employed as a web developer. I know a bit, they asked if I could handle doing this and that, and I said yes. Thus' far, no issues. I just was getting frustrated with trying to figure out why my table wasn't working, so I thought I'd go here. Not only did I hit the wrong subreddit, You all are completely offended. Haven't you ever heard of taking a job that you know is above your head, but googling to make ends meet? Yeah, well, that's where I'm at today. I don't do web stuff but maybe once a month, to twice a month at most. I'm in IT, I do support, servers, hardware, firewalls, networking, etc. I do graphics for the company too, although I don't know any more than just googling to figure out how to do certain things in Photoshop. You do what you have to do to provide for your family. I'm married, I have a 9 month old son, and I provide for both of them on a 12/hr wage for everything I do listed above. So if I can inch in a question to a community that obviously knows more than I do about the topic at hand, to ensure my ass is covered with job security, you damned right I'm going to do it. Can you blame me?
Weirdly enough, it doesn't really matter- as the owner of the project you can release it under multiple licenses, both an open source and commercial variant. Package your upgrades under that commercial license only. When choosing the license for the open source part you have to ask yourself how much freedom do you want to give your users over that bit of code. If you want them to do whatever they want- include potentially writing their own premium upgrades- then use a non-viral, non-restrictive license like the BSD or MIT license. If you hate freedom and want to lock your users out of making their own commercial modules, use a viral and restrictive license like the GPL. Symfony 2, being released under the MIT license, is free and won't restrict your licensing ability at all with regards to your own code.
I agree, starting with a clean slate once a system is established is very important (with any type of coding or web design).
I was thinking of learning Perl next, any reason for Python over Perl?
I would still suggest making them separate, even if you use both, for extensibility purposes and pure ease. if (is_xml($document)) { // do whatever } else if (is_html($document)) { // find link } else { // invalid file } &gt;definitely could split up the detection into is_xml(), or is_html() functions, but since i'm specifically looking for two cases, or 'other', i figure it's more efficient to only do the cleaning once You can do the cleaning once and still use separate functions. Just run the clean HTML through the functions, or make the cleaning a function. function is_xml($document) { $document = clean_document($document); // check if it's XML } &gt;doing a preg_replace on a potentially large input file - could quite well be a bottleneck in certain cases. You will likely only need to remove comments from the beginning, which will speed up the replacement. preg_replace('/^\s*&lt;!\-\-etc/', ''); // make sure to check for multiple comments too! &lt;!-- --&gt;&lt;!-- --&gt;&lt;?xml I would consider wiping everything in front of XML: preg_replace('/^.+&lt;\?xml/', '&lt;?xml'); But the problem with this would be the string &lt;?xml appearing in a non-XML document, like a TXT file on how to create an XML file. &gt;if it is necessary to remove comments though, do you think using "anything that's not --&gt;" instead of just using the "U" ungreedy modifier is better? i had thought that making it ungreedy will make the matching stop at the first ending match - basically turning .+ into "anything that's not whatever is after .+", but I'm not a regex expert so any advice is appreciated. IDK how the U modifier works. The way I learned it, the ? after the + makes it stop at the first match, but I have had trouble with it in the past. It may be that .+? is only valid in JavaScript while PHP requires the u modifier. I don't know. I'd just say test it and see what works.
That is exactly the job for PHP+MySQL. Or any other web programming language + any other SQL. Best way would be to first gather all the criteria and lay out the DB accordingly (normalization) - it will help you in the searching/narrowing down process later. I don't really think that the project is over your head - start small and keep on expanding it. Read up on database normalization.
I fail to see how this is PHP-related, other than the fact that you mention "PHP" in your technology stack; can you better explain just exactly how this is a PHP issue? It sounds to me like you're implementing a protocol that you don't fully understand. 
meh
I am building a large e-commerce project on it now. And, for the most part, I love it. If I was to offer a critique it would be that some of the documentation is weakly worded and there aren't really enough good examples out there yet.
The answer is, don't write a prototype.
At the end of the day, PHP needs to interpret the data it's receiving. The WS protocol dictates that the data encoding is UTF-8, so the fact that it's not coming in as UTF-8 is either a problem with the sender, or a problem with PHP's socket management. And on top of that, the question is still: "how do you parse binary data into UTF-8 *with PHP*?"
I see, due to the way jquery supports JSONP requests, there is no pre or post filter hooks supported in the ajax call. So with that laid to rest, is there a specific reason why you need to do the cross-domain request? Why not just ajax into your server and use php to perform the request to the 3rd party and json encode the data properly (ie, use curl to perform the request)? That'll get rid of the JSONP hoopla and the ajax request becomes a same-origin request with a JSON data type that is formatted properly by your php code.
I don't see anything in the documentation which indicates that the PECL HTTP module supports multi-threaded retrieval.
PHP *is* made for this sort of thing. Javascript is definitely NOT made for it. Forcing the end-user to make hundreds of requests that the server should be making, *and caching*, is patently ridiculous.
You sound extremely confused; you have no idea where the problem even is....is it with the client or with PHP's socket handling? I seriously doubt that you've uncovered a bug in PHP's socket handling (though that _is_ possible), but after reading the [Wikipedia article over websockets](http://en.wikipedia.org/wiki/WebSocket), I think you're missing some very key points in the implementation. Without seeing your code, though, I have no idea what you're actually doing wrong. What does your "PHP WebSockets backend" do if it's not actually, you know, doing the _backend_ aspect? &gt; And on top of that, the question is still: "how do you parse binary data into UTF-8 with PHP?" Um, you never asked that question, and so to say "the question is still" is absolutely false. Your original question was essentially "I have this random data, how do I decode it?" Anyways, here's your [answer](http://lmgtfy.com/?q=how+do+you+parse+binary+data+into+UTF-8+with+PHP%3F).
People actually use it? Almost no new projects are starting at Perl at this point, except at shops that are very heavily invested in Perl.
I want to make a downloadable package that people can use from their desktop. The bulk of this project is simply client-side code. I encountered a small problem which forced me to setup a PHP proxy and this is only minimal. I host this proxy and won't mind the traffic, I just don't want the hosting element of the admin tool to be mandatory. The fact that I already had a PHP proxy setup made me consider this an option for the JSONP problem I described. I have decided I am going to use the proxy to reformat the JSONP data. My guess is it will be temporary, as soon as the game server has been updated I won't be needing this fix anymore anyway. 
I took a look at it this morning after seeing this post. It looks good - nothing revolutionary that I can notice after installing the app and running through the code and reading the docs. I'll stay where I'm at unless something really different comes along. 
Of course I sound confused. I wouldn't be here if google had the answer. There are several WS specifications, and my backend handles one of them correctly. Another one has a different handshake, but still transmits UTF8 payloads. The third sends binary data, which isn't covered in the wikipedia article you so graciously provided. The binary it sends might be framed strangely, or there might be something else going on, but regardless it doesn't convert to readable UTF8. I'm here *because* I'm confused, yet you're saying that like it's a bad thing. There's no r/websocketsimplementationhelp subreddit, and I figured I'd find someone helpful here who has already implemented WS in PHP and knows the pitfalls. Instead, I found you.
node.js *facepalm
Very immature.
Instead of trying to make the user wait, set a timestamp on the action in the DB (a time at which the action becomes 'valid'), and show the user a page that says "traveling..." and then refresh the page a few seconds later. If they refresh before the action is valid, just show them the 'traveling' page. In your code, you should really be using a single update query, not two. (You don't need a semi-colon at the end of each query, either.) $XQuery = "UPDATE users SET X_Coordinate = ".$travelPath[$i][0]." WHERE username = '$player'; "; $YQuery = "UPDATE users SET Y_Coordinate = ".$travelPath[$i][1]." WHERE username = '$player'; "; should be $Query = "UPDATE users SET X_Coordinate = ".$travelPath[$i][0].", Y_Coordinate = ".$travelPath[$i][1]." WHERE username = '$player'"; Right now, if your DB were to fail somehow, you could end up with a user who had traveled to their X location without making it to their Y location. e.g. Someone going from 1,1 to 10,10 could end up at 10,1.
would that not make the user suddenly jump to the destination point without actually moving on the line between them? I was thinking that i could use $updateInterval = $travelTime / count($travelPath); to continually update the users location as he gets closer to the destination but if using timestamps it would require one timestamp for each updateInterval or am i missing the big picture?
This fixes the [crypt()](http://php.net/crypt) breakage in PHP 5.3.7, as well as another bug in 5.3.7 that caused problems with SSL connections to MySQL when using the mysqlnd driver.
Is there a point in making the DB traverse the whole path? I can't imagine one. Are you going to show the user a new page at each coordinate change, or perform new calculations for each change? If not, the delay is simply an artificial game mechanic that you're adding to relay to the user that traveling takes time. There's no reason not to just jump the DB to its new location, but force the user's browser to wait a specified length of time.
My point is that you don't seem to be at the point to ask the right questions; you have to know which questions to ask if you expect to get relevant answers. Sorry if I'm crass, but it doesn't sound like you've done due diligence on your part.
That's fine, licences are not exclusive, a lot of projects are under the GPL and MIT licences at the same time (the user picks one which suits them).
I have a map that shows player locations and planets/stations I also plan to have some sort of combat system where users can intercept each other. Im aware that it might be prone to produce alot of queries To use the timestamp solution i would attach a timestamp to the user and then check if we are past that check then update the coords 
I don't blame you one bit, friend. I do think you are underpaid, however. Good luck with your son. 
How about implementing a travel table? Store starting and ending X and Y coordinates as well as starting and ending time. If you need to calculate current position, you can figure it out at any point in time during the travel. You'll know exactly when they should complete their travel because the calculated value is stored. Instead of only checking the user table for position, you always test the travel table first to see if they're moving. If they are, use that information and ignore the information in the user table(or update the user table if you would rather). If you check the travel table and determine that their travelling should be completed already, then you update the user table with the end coordinates and delete the row from the travel table. You can also use the travel table to test to see if someone tries to begin travelling while they already are. All this information could also be stored into the user table, but it feels like it could keep the data smaller to make the data temporary and only useful while the travelling is happening. Looking up information for every player for map purposes is possible with this scheme. Watch for every online player or nearby player(whichever rule(s) you choose to use) and check all their positions according to the travel and the user table. For each player, do their travel test(are they done travelling? update user and delete travel row) and use the data accordingly. Also for the future, in case a lot of people log out while travelling, you can implement a cron job at some interval who's only purpose is to do the travel test on every entry in the travel table to keep it cleaner.
Kinda hard to understand without what parameters are being input into the function. Within the first IF statement, are all subsequent IFs supposed to be ELSEIFs and you should be breaking out of the control statement? Otherwise all IF statements will be evaluated. 
yeah, every time you change the current lvl, its not kicking out - its going to the next if statement and evaluating again.
yeah, every time you change the current lvl, its not kicking out - its going to the next if statement and evaluating again. also the if for "4" is commented out, so it does nothing probably, thats why its disappearing. this is nightmare code. re-do it.
you guys didnt let me down that was the problem so simple yet I derped on it. Thanks a bunch
Here's my thoughts: you are working on a project of one or two people...keep it simple, communicate and have a plan. It might be more overhead than you want for such a small team. If you're organized, you might not need to use a specified methodology.
Great. I think this is the answer I was looking for. I think I'd want to have the community version under MIT, and have my commercial code licensed with a commercial license. Thanks!
mmm... well wouldn't Ruby be used more than Python atm? I really dont know anything about Python.. 
I think im underpaid as well... working towards my degree to change that. 2 years left. Possibly less. If they dont give me a minimum of 20hr after that, ill move on. Cheers.
actually, I'd say the exact opposite. ALWAYS have a specified methodology, even if you create your own. If your team is small like you say, you can leave out a lot of the things like kick-off meetings, stakeholder documents (signoff, project charter), as well as a lot of the ongoing communications like milestone updates and all that. But you'll ALWAYS want to make sure you have your scope document, work breakdown structure, change requests, and to that you'll want to add anything your company requires. (everyone's process is different) 
Quick question. The two people you're talking about, is that only the developers? Or are you saying only two stakeholders altogether? For software development, you're going to want to look at an agile methodology, right now [Scrum](http://en.wikipedia.org/wiki/Scrum_(development\)) is one you might want to look into. It seems to be the most popular, especially with smaller teams, as it tends not to turn into a paper tiger.
If you don't get any bites from someone with WS experience, I'd be willing to look at it a little more provided that you can supply a [fiddle session](http://jsfiddle.net) with the client code required to send the data (if I understand correctly, this data is being posted from a web browser which supports web sockets). From there, I should be able to point it at my own server and have it send the data there, no? Is [this](http://blog.chromium.org/2011/08/new-websocket-protocol-secure-and.html) the correct spec? Also, why aren't you using the latest version, [or at least 10+](http://blog.chromium.org/2011/08/new-websocket-protocol-secure-and.html)? &gt; As such, we’ve updated Chromium to support the latest version (draft-ietf-hybi-thewebsocketprotocol-10) on the dev channel (14.0.835.2). Given that the specification is now in “last-call” and and no further breaking changes are expected, it should now be safe to use WebSockets for production application development. EDIT: I hope you're not using a distro of Chrome which implements something other than WSv8... EDIT: [Is this what you're looking for?](http://stackoverflow.com/questions/7040078/not-sure-how-to-frame-data-in-websockets-draft-08) I don't think you'd necessarily need to know c# to port that to php, if that's indeed your answer...
The two people is me and one developer. I will be acting as part time developer and part time PM. 
how many stakeholders altogether?
This can be done using php, I suggest finding a framework and working with it to do what you need to do.
im trying to make this work but either it is too late or somehow im not understanding how to workwith timestamps in mysql as i keep getting 0000-00-00 as timestamp. im adding this variable: $deltaStamp = time() + ($updateTime); as the timestamp $updateTime is the time in seconds that is to be added to time 
the choice for SQL depends on how well strucutred your tags are (what you're looking for is a way to "tag" the contents so you can filter results). SQL works pretty well for structured data, databases from the NoSQL group (that involves several types) are better suited for things like user-generated tags, but you could do that with SQL as well. an example, if every document has an owner or several owners a property or a relationship in SQL would suffice, on the other hand if the documents may be tagged with the topic or topics they refer to you could either create a generic tag entitty and specify the name of the tag on the relationship on a SQL database or use a NoSQL database such as redis and create tag entities where the name is part of the key and they point to a list of documents. either way you'll be able to filter the documents based on the search parameters so the decision depends on the details of your system and how well each solution performs there.
I hope someone ran the unit tests.
I agree, until I see something that makes me want to change, I won't change. Fuel doesn't show me something that I am wowed about.
A bit more verbose, but this is what I really meant by being organized and having a good plan. Well said!
Thing you might want to investigate / try: * What byte order is the sender using? * Have you tried saving all of the output to a file and executing "file" on it if you're on Linux? * Are you sure it's UTF-8? Use an encoding detector if "file" cannot figure it out. * Have tried checking to see if it's been compressed?
Thanks--I did figure it out. The newest WS spec actually uses an entirely different framing protocol for data transmission, so there was metadata in that binary that needed to be waded through first.
This is the way I would personally handle it, if the "hate freedom" comment didn't give that away ;-) I have a lot of open source code myself- since you're using Symfony2 actually you may want to check out [Stash](http://code.google.com/p/stash/), which has an experimental symfony2 bundle in source control. The library itself is fairly mature (it's being used in some sites that do millions of hits a day, without issue) but the symfony side is still missing some of the required features for releasing a bundle. Okay, the point of that (before I got sidetracked by whoring out my projects) was that releasing my code under a permissive license has been very beneficial to me.
Thanks--*this* is the type of standard redditors should live up to! I have figured the problem out. You're right in that it's because of the new, radically different framing procedure in the WSv8 (draft 10) protocol. It's new enough that it's not too well documented, and there's not too many libraries that support it. I eventually was able to figure out to read through the latest draft, and was able to parse the frame appropriately. Only Chrome v14+ uses draft 10 of the WS protocol, so almost none of the clients actually had this problem (in most linux repos, 12 is the standard chrome build). Version 6 of the protocol (chrome 13+ I think) uses the new handshake, but the old framing, which is why I was able to handshake properly for WSv8 but not read any data. WS is a moving target, so I now have to support both handshakes and both framing procedures to support the users. Thanks for your help!
Glad to hear that you got it worked out! And yes, there's sometimes a method to my madness :)
Quite a few people did.
Not really. Ruby really isn't used much outside of Rails, whereas there's a lot more python in general (non-web) use. 
You seem to be asking a very specific question (my script does not work, why?). You need to be more specific in the details you give otherwise nobody can help you, like maybe some code, or the error you get? Some code with expected result vs actual result with a given input would be the best.
Pdf Button info: Post to my script/URL, as complete PDF PHP Code: &lt;?php $fileatt = "http://www.may072011.com/Client%20Information.pdf"; // Path to the file $fileatt_type = "application/pdf"; // File Type $fileatt_name = "test.pdf"; // Filename that will be used for the file as the attachment $email_from = "noreply@gmail.com"; // Who the email is from $email_subject = "Your attached file"; // The Subject of the email $email_message = "Thanks for visiting"; $email_message .= "Thanks for visiting.&lt;br&gt;"; // Message that the email has in it $email_to = "zapchic@gmail.com"; // Who the email is to $headers = "From: ".$email_from; $file = fopen($fileatt,'rb'); $data = fread($file,filesize($fileatt)); fclose($file); $semi_rand = md5(time()); $mime_boundary = "==Multipart_Boundary_x{$semi_rand}x"; $headers .= "\nMIME-Version: 1.0\n" . "Content-Type: multipart/mixed;\n" . " boundary=\"{$mime_boundary}\""; $email_message .= "This is a multi-part message in MIME format.\n\n" . "--{$mime_boundary}\n" . "Content-Type:text/html; charset=\"iso-8859-1\"\n" . "Content-Transfer-Encoding: 7bit\n\n" . $email_message .= "\n\n"; $data = chunk_split(base64_encode($data)); $email_message .= "--{$mime_boundary}\n" . "Content-Type: {$fileatt_type};\n" . " name=\"{$fileatt_name}\"\n" . //"Content-Disposition: attachment;\n" . //" filename=\"{$fileatt_name}\"\n" . "Content-Transfer-Encoding: base64\n\n" . $data .= "\n\n" . "--{$mime_boundary}--\n"; $sent = @mail($email_to, $email_subject, $email_message, $headers); if($sent) { echo "Your email attachment has been Worked."; } else { die("Sorry but the email could not be sent. Please go back and try again!"); } ?&gt; when the script is executed i get the reply "Sorry but the email could not be sent. Please go back and try again!"
You should indent your code with 4 spaces for it to be more readable on reddit: like this Try to remove the "@" before the "mail" function call (what is it supposed to do?). Also, allocating a variable just for the return code of mail is inefficient. Try this instead: if (mail($to, $subject, $message, $headers)) { echo 'mail() Success!'; } else { echo 'mail() Failure!'; } If your email still cannot be sent, it may be that the server is not configured properly. PHP cannot magically send emails on its own if it can't talk to an SMTP server (you need to tell it which one). Hosting companies generally take care of this already. 
Can you script send mail if it doesn't include an attachment? E.g. mail('test@example.com'.'Subject','Test Message');
still, lithium.
Good to know maybe I'll look into Python then, thanks!
Anyone know of a way to install it without reinstalling the whole IDE?
I reinstalled and it carried all my settings over (what flavour of metal is your head?)
IIRC, to get timestamps to use the current time in mysql, you may need to specify them at table/column creation by using the DEFAULT CURRENT_TIMESTAMP as part of the timestamp column parameters. You could conversely perform an alter table to update them.
Fuck yeah! I love netbeans support of PHP. At the moment I'm rating it way over eclipse'. I think it's a nicer interface in general as well.
when $currentlvl is 15 and $kpin is 3 or above, it should increase by 2...
My most indispensable resource when it comes to tracking down HTML / CSS layout problems is the Firebug extension for Firefox. You can also get by with Chrome Developer Tools, which is built into Google Chrome. [Download Firebug](http://getfirebug.com/) If you're going to be doing anything like the above, please do yourself a favor and learn how to use Firebug (or Chrome Dev Tools). Basically you just click the Inspect button in Firebug, then click on the HTML element you're working on. It'll show you all the related CSS that is affecting that element, with a little checkbox that lets you toggle the CSS rule on or off. The page updates in realtime so you can see exactly what is happening. You can also directly edit HTML in Firebug with the same effect.
The creation of an anonymous function involves object instantiation, so it's relatively slow, but actually invoking an anonymous function is faster than invoking a regular function since the runtime doesn't have to look the function up. These are according to my own tests, so take them with a grain of salt.
This is really the correct way to do this. Forking is *way* more overhead than necessary.
^ this. Yes, it costs money. But if you are serious about your Pee Ach Pee, its awesome. Netbeans runs a close second, but I just find PhpStorm to be more intuitive.
Your field should be set to DATETIME. Then you can use FROM_UNIXTIME($deltaStamp) to convert UNIX time to MySQL time for INSERT/UPDATE queries and UNIX_TIMESTAMP(fieldname) for SELECT queries when outputting. Using a DATETIME means you can use MySQL time functions, like ADDTIME(NOW() + INTERVAL 10 MINUTES).
Here's another possible solution. It may be buggy, and it may not even do what you're wanting to do, but it's here regardless :) function prepFilters ($filters) { $r = Array(); foreach($filters as $name=&gt;$value) $r []= 'get'.ucfirst($name); return $r; } function filterPilots($filters,$pilots) { $pfilters = prepFilters($filters); $r = Array(); foreach($pilots as $p) { $methods = get_class_methods($p); $diff = array_diff($pfilters,$methods); if( !empty($diff)) continue; $matched = Array(); foreach($pfilters as $method=&gt;$value) { $matched []= $p-&gt;$method() == $value; } if( !in_array(false,$matched)) $r []= $p; } } 
With [200 failures](http://gcov.php.net/viewer.php?version=PHP_5_3&amp;func=tests), it's hard to notice one more.
Respectfully, this has absolutely _nothing_ to do with PHP.
I loved NuSphere, the debugger is way more advanced than XDebug, but NuSphere's search functions sucks so bad. It turns out that it's easier to fix all the other bugs in NetBeans than it is to get NuSphere to fix their search :(
&gt; The simple fact of the matter is that PHP has gotten complacent. They have been releasing with failing tests for so long and maintained reasonable stability that there's no apparent incentive or benefit to do so This annoys me with PHPs' releases. When I compile from source I do a `make test` to make sure everything is in order and have failures, always. I submit the report to the developers, but nothing seems to change. You summed up my thoughts perfectly, lets hope the PHP developers can get their arses in gear and get those bugs fixed.
PHP being open source, is it possible for someone like you or me to resolve these failed tests?
Depends, I have zero knowledge of C and don't plan to learn it any time soon.
&gt;simple, easy, flexible. Maybe the first two..
cool. I really appreciate your input. I checked out the source code for Stash. The code is concise, and well-formatted. Your unit tests look pretty good. Is there an advantage to using Stash instead of Zend_Cache ?
[Relevant](http://qa.php.net/reports/)
Now in my personal experience I've never actually worked on a project with more then 5 to maybe 7 people, this is mostly however because at the company I used to work, no project team would have more then 5 or 6 people. Multiple teams could work on the same project, in which case the team leads simply had direct contact to work out compatibility and responsibility together with the PM. At that point agile will work just fine. Just assign a team lead to each of those that regularly communicate about how the components will fit together. A good example of this on a larger scale is perhaps from one of the talks the games company CCP gave about how their switch to agile development has helped them work more efficient. http://www.youtube.com/watch?v=GqsReCZD4hc
I dropped Netbeans for PhpStorm back in February or so. No regrets as it is similar but better (and much faster). If you wait for one of there many sales you can get it for half price. $49 for a tool you will use all the time is well worth it.
Would you rather have the tests not be there so no one knows the bugs are there? 
yes/no/maybe, C really isn't that hard if you take some time to learn it, the biggest problem will probably be learning about the PHP code base, and the specific code on which a test fails. Also, it's not so much about fixing failed tests, but more about fixing bugs. From my understanding a good way to start is actually by writing tests for bugs ;) Test are not written in C, but obviously if the point is to eventually start fixing bugs, having a good test to do that is the first step. So while you write tests you also read the code and get an understanding of what it does. Depending on where you live there may also be community events called testfests, I know at least phpbenelux (dutch/belgium PHP community) does one roughly each year. There are certainly people here with the knowledge to teach anyone how to write tests, and can get you started with becoming a contributing member. These php user groups are obviously the place to be anyway if you want to get involved in the community. 
The biggest is probably that Stash uses a hierarchal system for grouping items (you can nest cached items, and deleting one of the parent nodes clears out the children), while Zend_Cache uses a tagging system (each item gets one or more tags applied, and the entire tagging group can be removed at once). The difference between these two approaches isn't the main point though, it's how it's applied consistently. Every handler in stash- all of them, including memcache and apc- work with this hierarchal system. Zend_Cache, on the other hand, does not supporting tagging across every one of it's back ends. In fact, that's been a huge sticking point for me when developing this. I will not add a handler into the stable system until it's working in a consistant way as the other handlers- which means passing all the same unit tests. The only differences have to be in the options passed. The core Stash class has built in request-only caching. By using a static variable to store anything taken from or placed into the cache, Stash is able to reduce the number of calls to the persistant handlers (skipping filesystem or network access). It also allows Stash to run without any handlers at all, which besides helping with debugging still provides for some performance improvements. Stash also has a lot of different invalidation methods and stampede control. The invalidation methods let pre-generate items before they timeout, or reuse old items while another request is regenerating the item. This makes it so the heavy code that's being cached only gets run once. With ZC an invalid item may cause a stampede, which is where many requests run heavy code at once causing overall performance to degrade. There are a lot of little differences too. The Stash multihandler can take an unlimited number of subhandlers, as opposed to the ZC one which only allows two ([there is no two!](http://en.wikipedia.org/wiki/Zero_One_Infinity)). Stash distributes cache misses, which makes it so an empty cache doesn't cause cycles of misses. Stash also has a more intelligent serialization scheme than ZC, only forcing serialization for larger multidimensional arrays and objects while using less intense schemes for scalar types (this is, of course, unit tested to death). So yeah, that's the basics. Let me know if you have any more questions- I love talking about this library.
I don't think anyone was under the impression that the tools were at fault for this failed release.
All I want is FTPS T_T
http://blogs.oracle.com/netbeansphp/entry/ftp_over_tls_ssl ? :)
Use [pastebin](http://www.pastebin.com) when you want to show your code to someone.
For what purpose? If you're looking to compile it to an executable, [HipHop](https://github.com/facebook/hiphop-php/) is going to serve you better, as it optimizes along the way.
!!!!!!!!!!!!!!!!! Finally! Now to test and see if it can ignore certificates....
Well, first of all I read this blog post by the author of phc : http://blog.paulbiggar.com/archive/a-rant-about-php-compilers-in-general-and-hiphop-in-particular/ and it seems that hiphop may have some limitations (like not running eval, etc.). Although obviously he is not a impartial source. He mentions performance issues on phc and I don't know if he is talking about the compiled code or the performance of the compiler itself. That's why I am reaching out to this subreddit. That being said any experience on hiphop would be welcome too. I downloaded both and intend to try out both. 
no reason to.
First off, I'm currently working for Facebook, so perhaps am biased in the other direction of that post. I've also never used phc, so I can't really compare the two. Looking at development activity, HipHop is under much more active development compared to phc, which hasn't had a commit within 2011. Heck, reading that article admits that the author hates php. the rphp project also doesn't have any recent commits, making HipHop the only php compiler (that I know of) under active development It is true that HipHop doesn't support some php functions, but in general well written code shouldn't need them. There are plenty of ways to get around using eval(), and will probably result in a better product. One weird part of HipHop though is that it implements php differently. There are some features of php 5.2 that aren't fully supported; there are some features of 5.3 that are well supported, but not exactly the same (namespaces gave me a bit of trouble in July, but haven't tried more recently, might have been fixed. I've heard some php 5.4 features have been implemented, but to be honest I'm not sure what they are. If you're using HipHop, you are also not using Apache, or a web server you are comfortable with. You will need to learn a new configuration syntax, new deployment setup, etc. If you are just using it for personal projects, that might be an issue.
good
Git for sure.
In general, php execution is not going to be your performance bottleneck. Your database is going to be.
Yes, I have all of those concerns myself. Thanks very much for your input. My main idea is to see if either would be applicable to a large scale application like Magento. This is the only app I have seen that seems CPU bound quite often. Plus it's just fun to play with new tech and keep up to date. :-)
Now now, Bazaar is a fair choice, and I heard good things about mercurial. Umm but yeah, git for sure. Votes seem to reflect this sentiment pretty well actually :) https://wiki.php.net/rfc/dvcs/vote I actually find it a bit funny, a few years back when this was all brand new it was commonly said that git was just too spartan too complex to use, don't know exactly if anything actually changed or if it just took a while for people to "get it", but now I just hear everyone raving about git. In my own experience, once you go git, you just never go back.
I use mercurial because bitbucket supports free private repos
I'd also be interested in this, for the same reason, though magento is actually also very i/o bound. Much of it due to SQL queries caused by the Eav structure.
I use assembla, they support free private git repos.
hi
Excellent. I enjoyed reading your response about Stash. It sounds like you're doing things right, and the project is on a good path. I will remember Stash in the future, and probably play around with it this fall/winter, when I start coding my e-com cart. Right now I have a 28 table db schema, that is ready for an ORM. I was thinking I'd go with ZF/Propel for a while, but now I'm really looking at Symfony2, since over-riding code is as simple as changing the route =&gt; module mapping. anyways, have a good one, I'll check on Stash in a few months.
HipHop is platform dependant compiler for a cross-platform language. ಠ_ಠ 
Thank you for this. I'll look into it. :)
Just the same most people probably use 2% of SVN features. But with a large (i.e. Global) public project git (or any other dvcs) is a Godsend. Feature-branching and merging become easy and natural. Nevermind the fact that there are dozens of amazing professional services like bitbucket and github.
For anybody who's going to have a public/private "central" I'd recommend either Mercurial with Bitbucket (which provides awesome free public project hosting and great value premium hosting for private projects with lots of people working on them ) or failing that i'd use Git and Github because that's what everybody else on reddit uses and it's hard to fight the trend. EDIT. Also Git was created by Linus Torvalds :)
an open source project doesn't really need many private repos... and for the ones they do im pretty sure they can throw down $22 a month for a private org account. im sure they pay way more than that right now to host their own svn servers
I really hope git with github wins in the end. Many projects that have gone this route (such as jquery) have said that it was one of the best things they ever did because of the increase in community involvement.
Git just makes sense, but I'm surprised they aren't insisting on using cvs.
I don't think Xyploat even read the link. What is this, Slashdot?
Git is overly complex for 99% of the php projects developed, but for the 1% of large projects, and the php repository itself, git is very useful because there are so many hands in the...kitchen, or whatever.
Bitbucket hosts public repos completely for free (Here's some existing clients: https://bitbucket.org/explore) and if you need more than 50 users to access a "private" repository you can buy an unlimited private user package for $80/month. The space and number of public repos is unlimited.
yeah you get unlimited teams for private/public repos for $25 at github. and again they wont need many private repos. plus if you read the article github will be more of a public mirror to git.php.net so any private repos they need can be hosted there.
first time I heard about assembla. thanks for suggestion! 
Had a quick look at Litium, the first command in the Quick Start tutorial is "sudo pecl install mongo". Installing Mongo just the kick the tires of the PHP framework? Maybe next time.
I don't think they've ever needed private repositories.
First of all you need to explain yourself better. You want to submit a pdf form to your email? Or do you want to send a copy of a pdf hosted on your server to an user's email address using PHP? There are a few mistakes in the code. [Look here](http://pastebin.com/VTGtzieq). Line 34 looks like the last part should be on a new line, with a ; to end the previous part. The same with line 38, a comment ends it prematurely. Not having used `mail()` in a long while I'm unsure if everything in the `$headers` variable is needed and/or correct. Clarify what you're doing and you may receive better advice.
The PHP project relies on donated hardware/services. No cash transactions. Except for the php.net domain registration, but Rasmus donates that. :)
Good to know, but I'm sure github would donate some private repos to have another large project hosted there.
From that point of view, it would make sense to write database in php ;)
Simple company or simple project = use SVN .. anything complicated or possibly will become complicated .. use Git.
phc is a tool for a very, **very**, specific purpose. What you are *probably* looking for is the APC extension, which will allow you to cache the "compiled" PHP code (opcode). The purpose of a PHP compiler is to translate PHP code into lower-level instructions in C or C++. This is useful for when you need to obfuscate your code, but in reality, a better solution for that is to write an extension for PHP which performs the sensitive tasks.
Why should they be insisting on using CVS?
We're getting a bit off topic here, but... From my experience of first switching to Git in my private projects and pushing through a change in my work to switch from SVN to Git, I really can't recommend SVN for anything. SVN isn't really simpler than Git (or any other DVCS for that matter) -- all systems have their things to learn before you can use them effectively. In case of SVN setting up and maintaining the central/shared repo(s) is way more work than what you would have with Git. Doing anything slightly more advanced than committing and updating (such as branches and merging) is ridiculously cumbersome in SVN compared to SVN. The fact that advanced features are less usable doesn't make SVN "simpler". And although you have the possibility to setup DVCS in very elaborate schemes, it doesn't mean you have to. For small well communicating teams, each developer having their own repos plus one shared repo where everyone can push works marvelously. Back to the topic... Good for PHP finally moving to DVCS. 
Sorry, forgot my closing sarcasm tag.
I already use APC. I guess from what I read most php functions are very thin layers between actual C libraries so perhaps this would not give great performance benefits. Still no answers as to whether anyone uses it though that may be an answer in of itself. ;-)
Lithium supports all common database back-ends: * MySQL * SQLite3 * CouchDB * MongoDB Take a look at the [using data sources](http://lithify.me/docs/manual/working-with-data/using-data-sources.wiki) tutorial.
I don't understand this. What's so great about SVN? I use Mercurial (I'm sure Git is just as suitable) even if I'm just working on my own , let alone when I have to work with others. Personally, I have never really been able to get on with commiting my code into SVN at all.
Although your bottleneck in this case would be the high random seek times of hard drives.
You can't have large, successful PHP applications?
it's there: http://www.php.net/manual/en/class.httprequestpool.php if you can't install that, then curl_multi_* isn't overly difficult to understand.
Most *extensions* implement their functionality by wrapping C libraries, but things like the PHP Standard extension do implement a fair amount of novel code. Even if you don't know C, I'd recommend taking a peek in the [php-src ext](http://svn.php.net/viewvc/php/php-src/trunk/ext/) part of the SVN repo, and looking over a few extensions, such as standard, mysql, etc. It gives you a better understanding of how little "magic" there is on that level of the PHP engine. The thing about phc is that it has very, very few use cases, and it mostly a novelty. You're unlikely to find anyone who has used it seriously.
&gt; This happens because the flock command is non-atomic i.e. more that one instance of it can run at the same time against the same file. Cite your source. Provide example code and a mechanism for proving that `flock` is non-atomic and that you can get simultaneous *exclusive* locks on a single file. I ask this because the way `flock` works is universal across all languages on all platforms that provide the system call... and is atomic by definition.
git is amazing. mercurial if you are going to have a lot of developers on windows; git on windows is not always obvious, have to use cygwin.
Simple company or simple project? They all grow in size and then migrating and teaching people about how git works is a pain. Do it right from the start, it's much easier to get started with git/hg rather than SVN with dedicated server and repo.
You should have just suggested they rsync the source on the server weekly, joke may have been clearer :)
hrm. maybe it's just simple for me because i've been using svn for so long
You can but they're more difficult to code and maintain than in other languages, and with much less guarantee of robustness.
Yep, that's the whole point of flock(). If it really isn't working for him then either he didn't compile PHP with the right flags or something's seriously wrong with his OS.
2 SVN diehards (wont accept any DVCS) 1 guy for Bazaar (but will accept Git) 6 for mercurial (and none other) 
I have used SVN for about 10 years and once I used git few years ago I honestly cannot recommend SVN or CVS or anything central to anyone, git/hg are just so much more intuitive once you learn them. Give git a chance, you can do all the commit locally to see how it does them, how history works, how easy branching it, etc. You can even use git locally and commit to SVN when you have something stable. git allows you to commit very often and branch effortlessly.
No, i didn't at first -it's /r/php so by default i assumed it would just be a self-post by a college student or somebody who lied in the interview to get a job as a web developer. i thought that the information was useful so i left my post up *disirregardlessly*.
PHP.net says that you can't necessarily trust it for multiple threads, but for multiple proceses it's OK. If you're using pcntl_fork() to spin up multiple processes though, you're going to have to use something else. At least, that's what I make of the documentation. I am not an expert in this area.
You can write bad code in any language.
Of course you can. That has nothing to do with it.
&gt;Once your class frameworks get complicated enough to need this sort of thing, chances are you're doomed anyway due to the dynamic &amp; loose typing, unstructured error handling, and driven dotty by typing $this-&gt; every other line. Sounds like it does. The issues you brought up (dynamic &amp; loose typing, unstructured error handling, using $this-&gt; (is that even an issue?)) are all pitfalls of bad programmers, regardless the language. 
Simply use the 'x' and 'c' modes with fopen(). 'x' and 'x+' will create the file if it doesn't exist, and immediately grand an exclusive lock. They will fail if the file already exists. 'c' and 'c+' will create the file if it doesn't exist. If it does exist it will give you a file pointer to the beginning of the file (like r/r+) allowing you to manually call flock(). As others have stated.. flock() *is* atomic. Calling fopen()/flock() is NOT atomic, but it can be *safe* as long as you use the above flags.
Or maybe he's running on a network filesystem (NFS, SMB, etc.)
Or the msys distribution
Git is actually more intuitive on the command line than in any GUI, for me. A GUI will give you easier access to the commands... but it won't teach you how to use them effectively.
I have to wonder which is faster: PHP querying MySQL or PHP reading JSON/XML/CSV cached in RAM?
You can configure it to be entirely unicode, at least well enough that you'll rarely run into any problems.
I'm wondering why you think it can't. It requires some thought while you're doing it. You need to take special care when using php string functions to ensure that they are multibyte safe. Many string functions treat a single byte as a character with no regard for multibyte encodings. You have to ensure that the page is sent in a unicode format, that the database connection is in a unicode format, and that your database tables have the appropriate encoding.
do you have a need or requirement for such an endeavor or is it just academic? 
If you work with non ascii stuff, eg japanese or chinese with two byte characters you need to use the mb_ functions for eg string length or else you get the wrong character count. same for regex, if you want to use the characters directly. mysql should be fine, but I haven't used that "database" in ages. I am a postgresql man.
Can you compile php scripts to executables without a web server with hiphop? I use PHP almost exclusively on the back end.
I'm wondering what you're working on that *doesn't* support Unicode... UTF-8 is ubiquitous and standard these days...
They are going to pick Git. Not just for popularity, but also for affection. Since Git is largely using Perl5, which has some resemblence to PHPs awful syntax tidbits; it'll win over Mercurial and Bazaar - that are based on Python. I believe there is some language disdain which affects the voting, as Python is a more contemporary language and can be perceived as threat, losing developers after accidental exposure etc.
Out of curiosity, what made you switch to postgres?
For completely new code it is not any harder than not doing it. As long as you give it 1% of your attention, it just works. Updating large or complex old code bases that do not have good test coverage to do anything is always risky, time consuming and monotonous, so people don't do it unless really forced. 
Maybe, if his OS doesn't support remote locks. But then, if he's opening a remote file to do file caching (caching is the context of the article) then he's still doing it wrong.
It's fair to say that absolutely nothing you've just said factored into my vote, but I do like a good conspiracy theory.
Just configure your MySQL tables to work with UTF-8. Set the connection to use UTF-8. Set your HTTP and HTML headers to UTF-8. Use the mb_* functions to make string manipulations. And there you go, 100% UTF-8. Is there anything that I am forgetting?
Depends on every individual transaction. Sometimes it's faster to read a table into an array and then do various sexual things to the array. Other times it's faster to do your processing at the query level.
If you make an XML feed it needs to be Unicode. You could try putting the whole output buffer in utf8_encode(). That seems way too easy though.
&gt; For completely new code it is not any harder than not doing it. As long as you give it 1% of your attention, it just works. Total load of rubbish. The mb extension isn't nearly as useful, nor as intuitive, nor as well documented, nor as featureful as native string support. It's a kludge and a hack and should be entirely unnecessary. PHP developers need to stand up and demand real unicode support from the language.
Nope. But all of that is haaaaaaaaaaaard. /s
Joe Schmo, Web Developer doesn't want to bother to set it up. It takes more time, more effort, and probably more security measures.
I think the biggest issue is that most MySQL installations default to latin1_swedish_ci, so people merrily create tables and leave them as that, instead of switching it to utf8.
Here's a handy [PHP UTF-8 cheat sheet](http://developer.loftdigital.com/blog/php-utf-8-cheatsheet).
There's no way unicode sites need more security measures. In fact, when *addslashes* is used to escape quotes in SQL queries, multibyte quotes go right through it, but non-unicode MySQL databases still recognize them as quotes, creating SQL injection hole in applications. It's really worrying how many developers made that mistake.
Postgres is for hipsters who haven't realized that all the cool cats are using No-SQL these days.
Yes, I was ignorant of that, hence "probably" :) I am careful enough not to use native queries. DB wrappers are my friends.
No. When you create a database set it to utf8_general_ci. Any table, the same. And every field in that table, too. It's just boring but very easy, for example with phpmyadmin. Then the meta html header for utf8. And into your php mysql_connect, in the end add mysql_query("SET NAMES utf8");. If it still does not work then check your server headers, that might be a bit difficult now. You won't need utf8_decode/encode anyway. Don't. Touch. Them.
You nailed it. Make sure everything is UTF-8 from end to end and you are good.
Oh, you don't need the MySQL-tables to be utf8, you can use create them with latin1 and stuff them full of utf8-data so it's very inconvenient to try to manage them with any sort of tool. \*sigh\*
I have nightmares with that.
&gt; There's no way unicode sites need more security measures. There are many, many such ways. https://www.owasp.org/index.php/Canonicalization,_locale_and_Unicode
Not to mention the 64-bit requirement.
I surely don't. Here's the book i learned it with: http://www.amazon.com/PHP-Bible-2nd-Tim-Converse/dp/0764549553
At first this seems like a harsh comment, but in reality, it's one of the best bits of advice he could give you. Much of learning programming is not knowing how to do something and figuring out how to do it. I've solved obscure problems that would have taken me days if I hadn't found sage advice on some random podunk forum. But for the record, I've always found these websites helpful as a beginner: * W3Schools PHP - http://www.w3schools.com/php/default.asp * W3Schools HTML - http://www.w3schools.com/html/default.asp * W3Schools CSS - http://www.w3schools.com/css/default.asp * W3Schools JavaScript - http://www.w3schools.com/js/default.asp * W3Schools SQL - http://www.w3schools.com/sql/default.asp You'll need to know all of the above technologies to be a properly rounded web programmer. This looks interesting and informative as well * ZEND PHP 101 - http://devzone.zend.com/article/627 And if all else fails, [search the PHP manual](http://php.net/docs.php). There are *loads* of crazy comments with example code and best/worst practices. 
Phpvideotutorials.com
 ..................._„„---, ..........._„~"¯ . .„-" ........„-" . . . ,-" .....„"¯""~--„/ .../:::::::::::,' .,':::::::::::::|..........................................._„„„---~~~~----„„„_ .|::::::::::::::\.............................___.„-~"¯:::::::::::::::::::::::::¯"~-„ .|::::::::::::::::"-„...................,~'¯¯::::¯"~„::::::::::_______:::::::::::::"-„„------„„_ .'|:::::::::::::::::::¯"~-„„__....../::::„~""~-„:::l„-~""¯¯:::::::::::::¯¯""~--„i"¯:::::::::::¯'-„ ..'l„::::::::::::::::::::::::::::¯¯"'|::::'„:::::::::|::::::::::::::::::::::::::::::::::::::::::::„-~~--„:::'l ....\:::::::::::::::::::::::::::::::::"-„:::¯::::,-"_,,------,,:::::::::::::::::::,,--~--„_::i:::::::::'::„' ......\:::::::::::::::::::::::::::::::::,'¯"**'/':,-' . . . . . . \::::::::::::::::/ . . . . . "-„"-„__„„-"„ ........"-„:::::::::::::::::::::::::::,i:::::/:::i . . . .". . . .l:::::::::::::::"„ . . .". . . .\::\:::::::l ..........."-„:::::::::::::::::::::,-':l:::::i::::', . . . _„„„--'~~""¯¯¯¯¯""~--„„_ . . .„-'::::\::::::|-„ ..............."~„_:::::::::::„-":::|:::::l::::::,'-~"¯................................¯"~',:::::::|::::::|::"-„ ....................¯"~-„„,-"::::::l::::::::::,/..............................................."-„::::|::::::|:::::\ .......................„"::::::::|:::::::::::|..................."~........-"...................\::::::::::|::::::\ .........................l_::::::::|::::::::::::l....¯",~--,__.....__„,„,,____,„,---„~""`.,|::::::::::'|:::::::'„ .....................i"¯. ¯"„„~"|::::::::::::::\,....."-„:::\_|¯¯::::::::::::\_|:::::„-'....../::::::::::::|::„-~~'-„ ......................¯"""¯.....|:::::::::::::::::"~„_..."--„_::::::::::::::::::_„-"....„~"::::::::::::::|-'-~~"¯ ..................................|:::::::::::::::::¯"„--"„-„__.."""~~~~~""¯._„„~'-~":::::::::::::::| ..................................|:::::::::::::::„~"...........¯¯""""*****"""¯¯..."-„::::::::::::::::::'| ..................................l„-""~--„„~"............................................."~„_:::::::::_,| ................................."-----~"¯......................................................."~-„-"¯ . '-„ .........................................................................................................¯""""¯
The URL routing looks very nice and clean / simple.
Sorry, made a bunch of edits. The jist was that yeah, there are a lot of one stop shops for learning the basics of php (like in the above examples I edited in), which is where you'll be learning the most, however. I pointed out that there are a lot of really useful important things you aren't going to learn from an online manual, like how to fix a bug with an error code that makes no sense to you (there will probably be a lot of them). You can get experienced quick if you build off of the past experience of others, but you'll be unable to help yourself if you don't get into the habit of Googling extensively. I'd even suggest reading a book on using Google, there are a ridiculous amount of things you can do that the average user doesn't take advantage of. &gt;**Give a man a fish, you feed him for a day. Teach a man to fish, you feed him for a lifetime.**
Just in case anyone hasn't heard, there is a [more recent version](http://www.php.net/releases/5_3_8.php) with a fix for the `crypt` bug.
If you already know how to program I think you'd be better off just using the [php documentation](http://www.php.net/manual/en/). It's my #1 php reference, and you don't need to be taught what a for loop is, just how php's syntax for it is, though I think the manual may even explain that and go at a more tutorial pace than not.
SQL question: Say you're not using phpmyadmin, or in my case, say you have a table with over 200 columns in it. Is there no way to do a wildcard change for the data type for all columns in a table?
Honestly I don't know. If it were me I would write a script for that. Or perhaps… http://yoonkit.blogspot.com/2006/03/mysql-charset-from-latin1-to-utf8.html
Can someone give a quick explanation to me why everything should be in UTF-8? I haven't put any thought into this stuff when building a few applications witha PHP and MySQL back end and would really like to know what all the fuss is about.
There actually was a time when that was the only way to do it.
Except latin1_swedish_ci is a collation not a character encoding which means you probably go on your merry way without a UTF8 table too. Collations have nothing to do with character encoding, and everything to do with sorting order. This tipoff here is the "ci" part, which stands for "case insensitive". What you want to be looking for to determine character encoding is the CHARSET parameter which you can check with a "SHOW CREATE TABLE mytable;".
&gt; Performance: Quercus outperforms a straight mod_php implementation by about 4x (for Mediawiki and Drupal). **Quercus roughly matches PHP performance with accelerators like APC.** [Problem?](http://cache.ohinternet.com/images/thumb/2/2d/Trollface_HD.png/615px-Trollface_HD.png)
So, basically it's as fast as an usual PHP setup with a PHP accelerator. Still, nice.
There are definitely advantages to this. (and probably also disadvantages) I really just wanted to point out the sensationalist title. :/
utf8_general_ci is not a character encoding it's a character collation. If all you're doing to your table to make it UTF8 is changing the collation, you're doing it wrong.
not exactly sensationalist. php doesn't come with APC by default, and there are many other comparable accelerators to APC. The point being that with out having to employ op code optimizing/caching the java implementation matches c based php with op code optimizing/caching. Imagine if a similar technique that APC uses can be added on top of quercus causing it to excel beyond the php/apc bracket of performance.
&gt; not exactly sensationalist. php doesn't come with APC by default Uh, if you can install this then you can install a PHP opcode cache. &gt; and there are many other comparable accelerators to APC. So? I don't get what your point is by this, so long as an opcode cache is used it's all good. &gt; The point being that with out having to employ op code optimizing/caching the java implementation matches c based php with op code optimizing/caching. It matches because it's already done. What an opcode cache does is essentially what Java does when it compiles a program. &gt; Imagine if a similar technique that APC uses can be added on top of quercus causing it to excel beyond the php/apc bracket of performance. Which is also why this makes no sense. The similar techniques are already done so they can't be done again. Ultimately what they're actually saying is this. "Opcode cached PHP is 4x as fast as native PHP! And comparable in speed to opcode cached PHP!" Thus why it kinda is a sensationalist title.
The character collation is essential (well, you can always store it in another collation and do magic on the code side).
&gt;Uh, if you can install this then you can install a PHP opcode cache. I wasn't implying a accelerator was hard to install but that it wasn't installed by default. It's one extra step that isn't included by default in the PHP package. That was my point, just an extra step, not a hard or impossible one but an extra one. &gt;Which is also why this makes no sense. The similar techniques are already done so they can't be done again. Ultimately what they're actually saying is this. It makes perfect sense. PHP is c based, the PHP interpreter takes a PHP file, and creates op code then runs it. Accelerators take that op code before being ran, and optimize it, some even cache this. Java itself is an opcode cached/compiled language, you're right. But it's not Java we're optimizing with a accelerator to quercus but PHP. I don't know enough specifics of it to say for sure that some kind of huge optimization could or couldn't work with quercus. Yet you rule it out completely because of a limited understanding. That doesn't make any sense. The title isn't sensationalist because it was comparing apples to apples. A php interpreter compared to a php interpreter. APC added onto PHP makes it now a php interpreter with an optimizing/caching module. Huge difference there.
Not only that bit, all the other "advantages" listed are also normally already part of your basic professional PHP deployment. In other words: Quercus is a nice proof of concept, but offers nothing to get particularly excited about.
I'm the current maintainer of phc, and the author of the blog post you listed in another comment. I can answer any questions you have :) I think you're asking is "should I use phc instead of PHP"? I think the answer is no. The generated code for OO constructs doesn't work all that well, and we don't support libraries which do weird shit (which is to say nearly all of them). I would recommend HipHop instead. There isn't a good reason that phc could not have been a great compiler, but it never gained the traction it needed for that to happen. It's well designed and well architected, and working on it is painless compared to other compilers I've worked on (and certainly compared to PHP itself). But nobody is working on it, least of all me. We do quite frequently get people coming in who want to use it, but it seems none have the desire/ability to do the work phc needs to come back to life (which is of course understandable). I would still recommend that people use phc if they want to write a tool for PHP, perhaps to do a certain refactoring. But I wouldn't recommend it for production code, and indeed you're unlike to find that it supports all the features you need for modern code.
HipHop has limitations, but phc does too (like most OO!). I guess the difference is that phc could be made not have it's limitations, which is more difficult for HipHop. However, that's a little fanciful since no-one is working on phc. I haven't used HipHop, but I would recommend it over phc. That said, please do try out phc, especially if you're interested in contributing fixes back to us :)
&gt; Looking at development activity, HipHop is under much more active development compared to phc, which hasn't had a commit within 2011. For all intents and purposes, phc is dead, and the chances of it being resurrected are pretty low. &gt; Heck, reading that article admits that the author hates php. Actually I do hate PHP, which is why I'm not working on HipHop :) &gt; the rphp project also doesn't have any recent commits, making HipHop the only php compiler (that I know of) under active development Last I heard, the rphp authors had stopped working on it, and were working on the Crack scripting language (but I last heard about a year ago). &gt; There are plenty of ways to get around using eval(), and will probably result in a better product. For people writing their own code, I agree. But I think the problem lies in that many people want to use packages which require eval(). I did some research which showed that 40-ish% of packages I downloaded from sourceforge use dynamic constructs, which I think are the same ones HipHop doesn't support, while phc does. 
This is only true so long as you have only one server. When you have enough users to have more than one webserver (with db on other boxes), then performance improvements will correlate linearly with savings, due to requiring fewer servers. (Also, a faster PHP implementation will delay the time you need to move your DB to another box).
&gt; This is useful for when you need to obfuscate your code This is also useful when you want better performance. APC is one way to get better performance, but is not the same at all as compilation.
I don't have the numbers to back this up, but I would be willing to claim that a well-tuned APC configuration will perform *better* than code compiled with phc. PHP is, despite some people's uneducated claims, very well optimized, and performs a great deal of code optimization during code pre-processing. It pre-generates a robust set of code paths for well-written code, as is the benefit for compiled code. phc is subject to a significant amount of leaky abstraction, because it loosely translates between a high-level language (PHP) to a lower-level language (C++).
Your statement is quite simply false. If you're going to call others "uneducated", then get your facts right first: phc does not compile to C++, it compiles to PHP's C API. Beyond that, everything else you've said is just opinion, and I disagree with all of it. As someone who has done the numbers (you can check out my PhD thesis to read them), phc is (or was at some point) about 33% faster than PHP. The overhead from parsing in these figures was negligible, so APC wouldn't help anything. BTW, PHP does almost no "code optimization" during "code pre-processing", unless you have a weird definition of those terms. At best, it has fast-paths for likely types, but that's not "the benefit for compiled code".
It's a good idea to set it properly, sure. It just has nothing to do with the actual encoding of the data.
I'm having trouble finding any empirical data on their site. Where's any data to backup the 4x performance claims? Hey guys, I made an implementation of PHP in C and it's over 100x faster... oh, did I fail to mention that I only implemented `echo`? Where's the API reference -- as in, which PHP functions, classes and extensions are supported? They single out JSON like it's a big deal, so it doesn't sound like they have a full implementation. While the concept is interesting, this submission is unnecessarily sensational and the referenced page contains very little information other than a few trite examples.
Um... how does this handle that java static elements are global to the server where php are per instance??? Also, what doesn't this support? I'm guessing eval is out...
Some companies have sys admins that handle server configuration issues, including Apache setup. In fact, some companies don't let programmers have a say in server configurations (web server and DB server).
Sorry, my jab about some people being uneducated was relating to the fact that some people will bluntly claim that interpreted languages are "slow" because they aren't close enough to the metal. This is an uneducated claim in that it completely ignores the great deal of optimization that goes on during the preprocessing of the script. The gains of compiled languages over interpreted languages are usually completely lost in the fact that compiled code isn't well-optimized, and takes longer to write. ~~Also, phc *does* translate to C++, or rather it translates to an abstract syntax tree that exists in C++ code. Please see [here](http://www.phpcompiler.org/doc/latest/gettingstarted.html#gettingstarted).~~ You're right. I was reading the wrong thing. I've now looked in the phc source and found that it generates C code. I'd be interested to read your thesis, if it relates to this matter. I am entirely open to being proved wrong, and in fact I would enjoy it, as it'd be something new to learn. ;) However, I'd be interested to see whether you took opcode caching into account when benchmarking phc against PHP, as a great deal of the execution time difference could exist in the processing of the script into opcode. If that's the case, you should also, then, take into account the time it takes to have phc compile the PHP script down to an executable. Also, when I speak of code optimization, I'm talking largely about the optimization that exists in the translation of the opcode to engine instructions. The PHP engine contains optimizations for various instructions, so those optimizations are done *before* the PHP code is compiled to opcode, in a sense. I'm not an expert on the matter, and, as I say, I'm open to being proved wrong. I do, however, know a fair bit about it, so I'm unwilling to accept arguments from authority, for your having done a thesis on the subject. ;) Edit: I'm wondering if I've bit off more than I can chew, here. :P Looking at your PhD dissertation as we speak. Edit 2: I'm feeling like a massive idiot. I see that you're a developer for phc, so... yeah. Edit 3: Excuse me while I step off the curb into the path of an oncoming bus.
the public dev and productions servers work awesome.. I use subversion control on my dev site. I'm talking about them getting their local copy to work. I'm curious how someone writes php code for 12 years and never setup a local development environment..
I would find it very hard to believe that a developer of 12 years has never configured a Web server. I'm not sure how that's possible. At some point, probably several, they would have had to set up local instances such as this. Somebody who started with PHP 3 (if he truly has been developing for 12 years) or even PHP 4 (11 years) should know this stuff. Hell, any credible Web developer, regardless of how long in the field, should understand the complete stack upon which they build. 
Because it's rare that a coder needs to do that. A "local development environment typically consists of and IDE, a SQL environment (shell or gui) and and ftp client (unless it's integrated in the IDE). Also, as someone else said, setting this stuff up is often the responsibility of IT anyway, not the developers. It sounds like you have a more complex system than the vast majority of other dev shops. Give your devs a break.
Wouldn't you find it odd that a developer of 12 years has only worked on job-related projects, has never set up a server for themselves, and does not understand the complete stack their jobs depend upon?
In large companies, coders only deal with mod_rewrite to the extent of presenting the re-writed url to the view. For smaller companies, they might have to setup the whole server in which case they better know how to do it.
Rare? I've only worked at one shop (anecdotal, sure, but several locations around the US at various sized companies) were developers were not expected to test locally BEFORE committing code and pushing to stage. If your managers have you committing before you test, your process is broken.
You should of tested them before you hired them. One company I applied for made me go through 4 rounds of testing. The companies with the shitty devs don't test the people they hire. Usually because the people hiring don't know code. If you are a web developer you have configured an htaccess file at one point or another. You should of configured a local webserver. Especially if you have been doing it for 12 freaking years. Yes they are lying. 
Yea because its totally different and it takes hours to convert every Linux PHP program to Windows PHP. /Its fucking sarcasm you people
I believe the standard Apache2 LAMP stack for Debian-based Linux systems (like Ubuntu) have mod_rewrite enabled by default. Most programmers nowadays who set up their own dev environments never have to deal with Apache configuration.
[Hello World is 404](http://www.caucho.com/resin-3.0/viewfile/?contextpath=%2Fresin-3.0&amp;servletpath=%2Fquercus%2Ftutorial%2Fhello%2Findex.xtp&amp;file=hello.php&amp;re-marker=&amp;re-start=&amp;re-end=#code-highlight), as is the link to the [release notes](http://www.caucho.com/resin-3.0/features/resin-3.0.27.xtp) from the latest version of resin ... And the copyright notice is from 2006. Is any of this real?
Well, if it runs Drupal and Mediawiki, it should implement most of the most important features.
There either is no data, or if there is data it's dubious at best. You can't compare two language implementations for performance without bringing the underlying platform, the native compiler + libraries, and the optimization skills of the programmer into the picture. Having said that, the concept of the two languages coexisting under one interoperable umbrella is interesting.
I understand your incredulity, but keep in mind that 12 years ago mod_rewrite wasn't really being used popularly. Most people didn't mind paths that looked like this: `/path/to/file.php?var1=foo&amp;var2=bar` Hell, most people weren't even using proper MVC frameworks. mod_rewrite's popularity rose with the emergence of MVC frameworks and a greater understanding of the importance of SEO. So companies wanted their paths to instead look like this: `/path/to/file/foo/bar/` I didn't start adding "friendly" URLs to my projects until around 2004, which was only 7 years ago. That was the first time I ever had to set up mod_rewrite on a server (and configure the .htaccess files manually to rewrite paths). Since then, I've never had to enable mod_rewrite manually, because the standard Apache2 LAMP stack comes with it enabled. And I've never had to write an htaccess to rewrite paths since then either, because it's built into pretty much every PHP framework imaginable. In other words, if I had to manually do it today, I'd have to Google how to do it. EDIT: For perspective, have you ever been on a larger company's website? Most of them are **still** using ugly paths in 2011. 1. Bank of America's debit card page's URL is `/deposits/checksave/index.cfm?template=debit_card_program` (Cold Fusion, but still ugly) 2. Nissan's page for the Maxima's URL is `/maxima/?intcmp=Maxima.vlp.Homepage.Home.P1` 3. Wendy's page for their nutrition information is `/food/NutritionLanding.jsp` (JSP(!), but still ugly) 4. Amazon is probably the worst offender. This is for the Kindle: `/Kindle-Globally-Graphite-Display-Technology/dp/B004HZYA6E/ref=amb_link_357186542_4?pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=center-1&amp;pf_rd_r=08REF34D4DZR6JW8QK7M&amp;pf_rd_t=101&amp;pf_rd_p=1314784822&amp;pf_rd_i=507846` These are **big** companies and they're not using friendly URLs.
I completely agree. I test all hires with a few decent programming challenges which are usually concise but slightly complicated and I only let them use pen and paper (I ask for pseudo-code). If you can't rationalize an algorithm in your head or how you would go about it without sitting there and changing two characters at a time then re-testing I can't begin to imagine how long it would take somebody to write a full application. In regards to .htaccess files.. I would say that somebody who has been a developer for 12 years, would DEFINITELY have used an htaccess file at some point. Even if that means you were trying to do a joomla! or wordpress install and you started freaking out because whenever you navigated to your file it came up as something else. At the same time, just because he has known PHP for 12 years doesn't mean that he is avidly learning PHP and writing in it. He probably just dicks around from time to time. Finally, I would definitely expect that they should know how to install an XAMP stack. There are tons of times where you need to install a 3rd party application (I just had to do this to combine PDF and FDF files) and you will need to understand things like chmod, chown, and how to access the application. This guy is full of shit. 
Hmmm, what counts is if they write PHP really well. .htaccess rules and local dev environment stuff is not all that hard to get a grip on and it'll probably come fast. As in a few weeks. Where they are trailing behind, perhaps they've made up for in being great programmers - That's stuff that doesn't come over a few weeks. But really, you can't expect a programmer to be comfortable with a LAMP stack. I do my best to be familiar for varying freelance work, but here at my fulltime job, I'm not allowed to touch that stuff. edit: I know there's more to system administration than can be understood over a few weeks. I just assume these guys can understand *enough* to function on the team after a few weeks.
I've been developing for 12 years (for companies large and small, including government gigs) and I have never had to even work with a local test environment much less set one up. Typically there is a test server that developers use and then vsync or something over to production when it's time to go live. Having individual test environments just seems like a waste of time and effort, not to mention the support issues which you have already encountered.
Bear in mind you hired PHP *programmers*, not PHP *installers*. For example, I have a mac. It has PHP and apache built in. There is literally no set up, beyond installing the OS and putting files in `~/Sites`. No, seriously. Fire up localhost, there they are. I'm also of the opinion that a URL and a file path being the same reduces maintenance time, so I avoid rewrites. If you hired them with a grace period, apologise. Say you got it wrong and fire them now with a months pay. Programmers are perfectly fine with being tested before being offered a job, so next time test for what you actually want.
Have you read the manual? * [On Windows, this value will always be 192](http://uk3.php.net/manual/en/function.sleep.php) * [This function is not implemented on Windows platforms](http://uk3.php.net/manual/en/function.sys-getloadavg.php) * [This is not true on Windows](http://php.net/manual/en/function.set-time-limit.php) * [or semicolon in Windows](http://php.net/manual/en/ini.core.php) .. and then I got bored I get that windows is a viable development environment, but yes, it does take hours to find all the little bugs/'features' in "Windows PHP".
Edit: My apologies, I wrote this before I saw your edits. I don't think you should feel like a massive idiot for your comment. You were wrong, sure, but that's how we learn things :) That said, you were only slightly wrong, and I think your understanding of compilation etc only has a few misconceptions. Please don't be discouraged - compilers are cool, and it seems like you'd really enjoy working on them. I don't mean to make this an argument from authority, but I did write a great deal of the code we're talking about in phc, so I do know what I'm talking about. I think some of the things you're saying betray a lack of understanding of, say, compilation. But as you say, there's lots to learn here :) &gt; some people will bluntly claim that interpreted languages are "slow" because they aren't close enough to the metal. Right, but this is true. Now it may be that the speed of the code doesn't matter, but it just isn't true to say that PHP is "fast" compared to, say, C or C++. &gt; This is an uneducated claim in that it completely ignores the great deal of optimization that goes on during the preprocessing of the script. No, there just isn't a great deal of optimization during the preprocessing, rather the exact opposite. Compilers have a great deal of time to spend optimizing their generated code. Interpreters, meanwhile, have almost no time to analyse the program, they just have to run it. &gt; The gains of compiled languages over interpreted languages are usually completely lost in the fact that compiled code isn't well-optimized, and takes longer to write. I don't think you can prove this, and I'm certain it isn't true. &gt; I'd be interested to read your thesis, if it relates to this matter. My [PhD](http://paulbiggar.com/research/#phd-dissertation) described "the design and implementation" of phc, so it is a little bit relevent. Chapter 4 discusses the optimizations phc does, and how it generates code. I think it should be mostly readable to a non-compiler-expert, if not I can help decipher it. &gt; Also, phc does translate to C++, or rather it translates to an abstract syntax tree that exists in C++ code. Please see here. That's just the intermediate representation. It compiles this to C code afterwards, and runs that through gcc. &gt; However, I'd be interested to see whether you took opcode caching into account when benchmarking phc against PHP, as a great deal of the execution time difference could exist in the processing of the script into opcode. My tests ran at the command line, not in the browser, so APC wasn't usable. I measured the parsing time, and determined it was a tiny portion of the run time, so APC wouldn't have helped any way. &gt; If that's the case, you should also, then, take into account the time it takes to have phc compile the PHP script down to an executable. I see why you say that, but that doesn't make sense. You want to measure the run time for the user. The user doesn't need to wait for the compiler to run, so it doesn't make sense to measure that. &gt; Also, when I speak of code optimization, I'm talking largely about the optimization that exists in the translation of the opcode to engine instructions. The PHP engine contains optimizations for various instructions, so those optimizations are done before the PHP code is compiled to opcode, in a sense. I'm not sure what you mean here. I think your terminology is a little bit confused - what do you mean by "translfation of the opcode to engine instructions"? The "engine instructions" are opcodes.
no they don't but sudo a2enmod rewrite takes care of it. Happy Birthday!
Not at all, it allows you do stuff like really fuck things up to see if you can make them better plus it means you can avoid issues with code mould by only checking in "good" (already tested) code to the staging server. I have scripts that allow me do to this pull_project foo snapshot foo /some/path/somewhere push_project foo The overhead once set up takes seconds. One of the sheer *joys* of programming under Linux is that if you have to do something more than once it is fucking easy to automate it. It also means that you don't embarrassingly break the staging server in a retarded way :). EDIT: I use Mercurial as a source control system so alot of the content of those scripts is hg stuff but as I do alot of drupal work and it puts *alot* of its configuration in the database and it does not handle large files all that well (its one major weakness for my uses) it is easier to do something clever with rsync and tar files (time stamping the archives), it works well for me
After writing the last comment, I went and figured out who I was talking to, and promptly put my foot in my mouth. :P But, at the risk of looking like a bigger idiot, I'll explain why I believe some of those things to be true. &gt;Right, but this is true. Now it may be that the speed of the code doesn't matter, but it just isn't true to say that PHP is "fast" compared to, say, C or C++. PHP may not be fast compared to C or C++, but they exist in different realms of purpose. PHP principally interacts with database layers, SAPIs, etc. Insofar as this remains true, I think it's reasonable to say that having existing, well-written code act as the intermediary to those components, rather than interacting with them directly, as one may do in C or C++, there is a gain in performance as a result. One probably *could* write C or C++ code to interact with those components more efficiently than PHP can, but that would take much more effort to do. C and C++ are great at computation. They are not so great when it comes to making it quick and easy to integrate with complex application components. &gt;No, there just isn't a great deal of optimization during the preprocessing, rather the exact opposite. Compilers have a great deal of time to spend optimizing their generated code. Interpreters, meanwhile, have almost no time to analyse the program, they just have to run it. A better way, perhaps, to put it would be to say that the PHP engine is well-written, and well-designed, such that certain code paths are optimized during PHP's compile time, so when those instructions are called via the opcode, that optimization is already done. &gt;I don't think you can prove this, and I'm certain it isn't true. Why do you think that companies like Google, Facebook, Twitter, and many others use interpreted languages in a great deal of their infrastructure? They use lower-level languages where computation efficiency is important, but when it comes to rolling out workable code quickly and efficiently, there's no substitute for interpreted languages like PHP. If there weren't drastically significant workflow gains to be had in using interpreted languages, then we'd all be writing our applications in C or something else close to the metal. &gt;That's just the intermediate representation. It compiles this to C code afterwards, and runs that through gcc. I quickly struck that through after I looked at phc's source. :P &gt;My tests ran at the command line, not in the browser, so APC wasn't usable. I measured the parsing time, and determined it was a tiny portion of the run time, so APC wouldn't have helped any way. I'd be concerned with using that methodology to come to conclusions in something so formal as a doctoral thesis. The vast majority of applications written in PHP make use of a web server and database (MySQL, usually). Looking at PHP from a CLI perspective completely ignores the potential real-world gains had through opcode caching, multi-threading via Apache, and so on. &gt;I see why you say that, but that doesn't make sense. You want to measure the run time for the user. The user doesn't need to wait for the compiler to run, so it doesn't make sense to measure that. No, you want to measure the run time under load. Running single instances of the PHP engine, and comparing that to single instances of a precompiled executable is just not going to provide realistic benchmarks. In the real world, PHP operates in tandem with a multithreading web server, through something like FastCGI. It also often uses an opcode cache, or at the very least gains the benefit of kernel caching of certain data. I think it would be worthwhile to re-run your tests in a way that negates the time that PHP takes to re-run the interpreter each script call.
That's like saying you can't expect a mechanic to be comfortable with using a wrench. php is a tool, as is the application stack supporting it. To be a good steward of a system, you need to be well-versed in its entirety. Not just one aspect of it.
Even more so, this is like saying you are a mechanic (You know how to work on cars, or PHP) but you don't know how to put gas in the car or work a pump (Stuff like MySQL / Apache). If you "can't expect a programmer to be comfortable with a LAMP stack." you should **NOT** consider yourself a programmer. Sorry. 
You realize that the people coming in here and downvoting and not giving responses are not developers. They are little PHP script kiddies who are butthurt and are whining because they think things like this shouldn't be their responsibilities. It's people like this who give programmers a bad name. Arguing about this here is stupid because the number of people who frequent this subreddit and can actual program are slim. 
Not sure why this submission is getting downvoted. It's the kind of hack that's like nails on a chalkboard to look at. But at the same times, yes, as samandiriel mentioned, it can be a necessary evil. But it's still painful to read.
dunno why the down votes? quite amusing
Shit I knew how to use both .htaccess and web.config for url rewriting after just 1 year of using php. If they have been doing php for 12 years, it must have only been for work and in an environment that was set up for them.
That is the old page, long since moved to http://quercus.caucho.com/ .
The sensational part of the title is that it's 100% Java implementation. The part left out of the title is the implication of having full access to Java libraries from php code. In general, if you're using PHP, execution speed is a secondary concern. (Although you may not want to get any worse, I suppose.)
wow thats just about the last thing i'd ever want..
I too would like to see some data on the benchmarks. I've tested quercus in a decently sized java server and it was a disappointment. It was more than 4x slower than a server with similar hardware with a default apache + mod_php install, if I can remember right. Also come one, nginx + php_fpm + apc is the beez kneez
&gt; I think it's reasonable to say that having existing, well-written code act as the intermediary to those components, rather than interacting with them directly, as one may do in C or C++, there is a gain in performance as a result. But if we took the exact same code and made it much faster (say, with a compiler) then we have the best of both worlds, right? &gt; A better way, perhaps, to put it would be to say that the PHP engine is well-written, and well-designed, such that certain code paths are optimized during PHP's compile time, so when those instructions are called via the opcode, that optimization is already done. I follow what you're saying. To be fair, the PHP authors have made an effort to have "fast paths", where for example an addition opcode will first check "are we adding two integers". But there's only so much of this that can be done, and it has a limited effect. But this doesn't actually discuss compilation vs interpretation; this is actually a static vs dynamic language thing. phc also has to generate those checks, the difference being that phc/hiphop can statically determine that an addition contains two integers. So for example, PHP must do: if (type(op1) == INT &amp;&amp; type(op2) == INT) return INTVAL(op1) + INTVAL(op2); else ... On the other hand, hiphop might be able to do: return op1 + op2 But there's far more than just eliminating these guards. Compilers can do fantastic things like inlining, which removes the cost of the function calls (very high in the PHP interpreter), and then much lower level things like scheduling and register allocation. PHP can't do any of this, and in fact is so many layers removed from this that it couldn't reasonably dream of it. &gt; Why do you think that companies like Google, Facebook, Twitter, and many others use interpreted languages in a great deal of their infrastructure? They use lower-level languages where computation efficiency is important, but when it comes to rolling out workable code quickly and efficiently, there's no substitute for interpreted languages like PHP. Those companies use interpreted languages in places where the speed of the code doesn't matter; I think we agree on this point. I think that might have been the point you were making; I read your initial statement as saying that this proved that interpreted languages were fast. You're not saying that are you? If so, then I'm pretty sure you can't support it. &gt;I'd be concerned with using that methodology to come to conclusions in something so formal as a doctoral thesis. The vast majority of applications written in PHP make use of a web server and database (MySQL, usually). Looking at PHP from a CLI perspective completely ignores the potential real-world gains had through opcode caching, multi-threading via Apache, and so on. When writing a thesis, one spends a good deal of time thinking about the validity of the experiments, and yes, this was an important concern. Firstly, the way phc generates code, its able to take advantage of things like multi-threading via Apache (if it didn't, then it wouldnt have been the end of the world, because PHP has almost no multi-threading in the language, but I digress). Parsing is a concern, but I think I answered this above: the amount of time in the benchmark spent parsing was so low as to not matter. So a cache wouldn't have helped. &gt; No, you want to measure the run time under load. Which still doesn't include compile time, so I'm not sure what you meant above. You have a good point here though. Measuring a "representative" load is incredibly difficult (even agreeing on the meaning of "representative" is hard). &gt; Running single instances of the PHP engine, and comparing that to single instances of a precompiled executable is just not going to provide realistic benchmarks. It does if the vast majority of the benchmark time is spent in the "request" portion of the benchmark. &gt; In the real world, PHP operates in tandem with a multithreading web server, through something like FastCGI. It also often uses an opcode cache, or at the very least gains the benefit of kernel caching of certain data. Sure, but you could keep going down this rabbit hole. What I wanted to show was that it was possible to compile code that ran faster than the PHP interpreter, using my compilation techniques. Did I show that? Yes. Do we have definitive evidence that this would carry into the web server? No. Does it seem like it would? Yes. &gt; I think it would be worthwhile to re-run your tests in a way that negates the time that PHP takes to re-run the interpreter each script call. I think you've got another breakdown in terminology here. PHP is fundamentally run by the interpreter. You might be talking about startup costs, but I suggest you measure them and determine if removing them entirely would even slightly change the result (answer: I did, and it doesn't).
&gt; TL;DR .. new programer says been coding php for 12 years, they can't get their local dev environment to do any url rewrites. am i being lied to? You hired someone on basis of what they said, without checking. Yes, very probably you are.
The latest release looks quite cool actually. It even implements `phpinfo()` and claims to support PHP 5.3.2 (luckily also with our unbelievably retarded namespace syntax): ## Quercus PHP Version =&gt; 5.3.2 System =&gt; Linux 2.6.35-30-generic amd64 Build Date =&gt; 20100511 Configure Command =&gt; n/a Server API =&gt; CGI Virtual Directory Support =&gt; disabled Configuration File (php.ini) Path =&gt; null PHP API =&gt; 20031224 PHP Extension =&gt; 20041030 Debug Build =&gt; no Thread Safety =&gt; enabled Registered PHP Streams =&gt; php, file, http, https ## PHP Variables Variable Value _SESSION string(0) "" _SERVER["PATH"] /bin:/usr/bin:/sbin:/usr/sbin _SERVER["PWD"] /var/lib/tomcat6 _SERVER["LD_LIBRARY_PATH"] /usr/lib/jvm/java-6-openjdk/jre/lib/amd64/server:/usr/lib/jvm/java-6-openjdk/jre/lib/amd64:/u _SERVER["_"] /usr/share/tomcat6/bin/catalina.sh _SERVER["CATALINA_TMPDIR"] /tmp/tomcat6-tmp _SERVER["OLDPWD"] /tmp/tomcat6-tmp _SERVER["LANG"] de_DE.UTF-8 _SERVER["CATALINA_PID"] /var/run/tomcat6.pid _SERVER["JSSE_HOME"] /usr/lib/jvm/java-6-openjdk/jre/ _SERVER["HOME"] /usr/share/tomcat6 _SERVER["LANGUAGE"] de_DE:en _SERVER["SERVER_ADDR"] 127.0.0.1 _SERVER["SERVER_NAME"] localhost _SERVER["SERVER_PORT"] string(4) "8080" _SERVER["REMOTE_HOST"] 127.0.0.1 _SERVER["REMOTE_ADDR"] 127.0.0.1 _SERVER["REMOTE_PORT"] string(5) "47469" _SERVER["SERVER_SOFTWARE"] Apache PHP Quercus(Open Source 4.0.7) _SERVER["SERVER_PROTOCOL"] HTTP/1.1 _SERVER["REQUEST_METHOD"] GET _SERVER["DOCUMENT_ROOT"] /var/lib/tomcat6/webapps/quercus/ _SERVER["SCRIPT_NAME"] /quercus/index.php _SERVER["SCRIPT_URL"] /quercus/ _SERVER["REQUEST_URI"] /quercus/ _SERVER["REQUEST_TIME"] string(10) "1314399286" _SERVER["SCRIPT_FILENAME"] /var/lib/tomcat6/webapps/quercus/index.php _SERVER["PHP_SELF"] /quercus/index.php _SERVER["HTTP_USER_AGENT"] Opera/9.80 (X11; Linux x86_64; U; de) Presto/2.9.168 _SERVER["HTTP_HOST"] localhost:8080 _SERVER["HTTP_ACCEPT"] text/html, application/xml;q=0.9, application/xhtml+xml, im _SERVER["HTTP_ACCEPT_LANGUAGE"] en,de-DE;q=0.9,de;q=0.8 _SERVER["HTTP_ACCEPT_ENCODING"] gzip, deflate _SERVER["HTTP_REFERER"] http://localhost:8080/manager/html _SERVER["HTTP_CACHE_CONTROL"] no-cache _SERVER["HTTP_CONNECTION"] Keep-Alive And if you're wondering, it seems to support beyond base functionality of the php.net distribution. http://pastebin.com/x4Jz6Ung **Edit**: It even has PDO now. Can anyone dig up a manual or something that documents all the extra features?
yeah, this. One place I heard about had people using local code editors linked up to edit code on the live server (like, they Ctrl-S in textpad and it sftp's it up or something like that) hahaha yeah... but seriously though. Server config was done by 'the server guy' and the vast majority of PHP coders neither knew nor cared what the server was. So these coders had zero experience of LAM and zero experience of WAM, it was just the "P" that they knew. Which imho is no way to develop, but it takes all sorts I guess. So yeah, it can happen. Sounds more like an interview failing to me if OP believes otherwise.
Oops, that's embarrassing. I meant to write latin1/latin1_swedish_ci to cover both bases. That's what happens when you write about databases at 7:39am while still in bed.
Clarify "work **with** PHP". They're programmers, according to you, not web developers. A programmer who writes assembly or C (insert language here) may not have appropriate knowledge of a web stack.
Ya sure, I'll sum up some of the stuff **PHP Questions** - What is the difference between include and require? - What does something like this do: $a = "b"; $b = "c"; echo $$a; - What is the difference between single and double quotes? When should you use one over the other? - What is the difference between print and echo? - Which is faster? echo 'hello' . 'world'; echo 'hello', 'world'; print 'hello' . 'world'; - etc. **Algorithms** - Write a function that returns the factorial of a number. (I describe a factorial as being 5 x 4 x 3 x 2 x 1 etc, factorial of 1 and 0 are 1) Without the use of loops. (Meaning you need to write it recursively) - Write a function that takes in an array and outputs that array in reverse order WITHOUT the use of a second array. (Just one temporary variable as I explain that reversing a large array can take up a lot of memory if you create a whole new one) **SQL** - I will typically ask them to join two tables and use an aggregate function such as `SUM()` to test that they know how to join tables, use aggregate functions, and know about the `GROUP BY` **Others** - Sometimes I've asked people to write a basic CRUD interface that can add people's names, and then search for them (So I guess not all of CRUD). Hence why it is a good idea to have your localhost setup!! - We've also shown people a bug that we found in a wordpress template that one of our clients was using and asked them to debug it. Most of this stuff isn't very complicated but I'll just watch how they do certain things and ask them either why they did it or what they were thinking etc. so I can actually get a grasp of how they work. Sometimes they get nervous and can't think and I help them along, it's not to sit there and grill them. 
So PHP 5.4 will be just as fast as "Quercus" as it includes APC. So who cares?
I can't disagree with that -- but if you do enough times then it's pretty easy. I run PHP and Apache on Windows and have installed it a million times. 
I've developed very large PHP applications in Windows and deployed to Linux without any serious problems. Some code exists to handle the minor differences but that is all. The convenience of developing in Windows trumps the other issues. 
Yes. You basically compiled it down to the binary version, then you can pass a path to that binary and it will execute it in console. (if the particular file was compiled in)
It should support 32 bit, I know they put some work into making it compatible. I haven't compiled the version on github recently so perhaps that's changed. If it doesn't compile on 32 bit, that's a bug.
I agree, and I think the fact that they didn't take the time to expand their knowledge to that level, in 12 years (!), says a lot about their passion for programming. I deploy LAMP servers for clients (SSL, vhost, etc), on top of deploying the code via subversion. Technically, I've been programming professionally for about 5 years. I get called a rockstar a lot :)
Technically, HipHop does have eval() support, but it is incredibly slow, and might only work in the interpreted mode (hphpi). You have to explicitly enable it though, and it yells at you. The hiphop interpreter is much slower than the stock php interpreter, since the end result is compiled code and you don't need a super fast environment for testing, just fast enough.
.. until you get a project that was written in the root of /var/www/ . that _never_ happens /sarcasm . the amount of shit that is dealt with "nowadays" is not much better than it was in 2006. if you can't handle other people's shit, you're not much better 
Let me know if you have any questions about any of them, I'd be glad to let you know what the answers are and why! PM me or just reply to one of my comments here :)
Why not check the `Content-type` header? HTML pages are `text/html` while XML feeds are either `text/xml` or `application/xml`.
I don't particularly like the second bullet for this reason: Having the right answer can be worse than them not knowing. Why? Because if I see someone use that in their codebase and it isn't absolutely required/documented I'll punch them in the throat. No one gives a shit about the 4th bullet, and the 5th bullet doesn't matter (There are a billion more places to optimize than your damn echo statements) For algorithms maybe the first one is useful, the second is checking to see if you have a CS degree not if you know what you're doing. The correct answer to the second algorithm bullet should be array_reverse(), if it's not they're doing it wrong. SQL stuff, useful if they're going to be working with raw SQL, if not an appropriate question for your ORM/other abstraction layer The first bullet in (Others) is the most important of the whole set, it shouldn't take a halfway competent developer more than maybe a half hour to setup the entire stack if you don't want anything fancy
Someone asked for input about it in the [PHP internals list](http://marc.info/?l=php-internals&amp;m=130660488626048&amp;w=1). I gave it a [try](http://marc.info/?l=php-internals&amp;m=130663564614842&amp;w=1) (skip until roughly half the response). Short story -- it uses more memory and is far from 100% compatible.
Awesome, I could answer all of these. Also, at my previous company I had resigned and they asked me to help hire a new programmer. One of our applicants didn't know what a loop was. Apparently, he had watched a Ruby on Rails video and was confident he could catch on. It was for a Senior PHP Programmer job...
I haven't tried to compile hphp in a while, but if it's supposed to run on 32 bit systems then the docs at https://github.com/facebook/hiphop-php/wiki/Building-and-installing are incorrect.
how hard is it to install a wamp server? it's already packaged! Also they should know mod_rewrite. I learned that my first 6 months. I'd say look for other people. Your'e wasting time with these bozos. 
Hey that's cool. I'm not going to argue best practices here, I'll just say that yeah, indeed, I can understand why a web developer might not know how to set up a local test environment. We've apparently run in different circles, employer-wise. As I've said, pretty much all the development environments I've used had a test server rather than local environments. In most cases all the servers were administrated by an IT person, with varying responsibility as far as mod_rewrite, module installation and configuration issues go. In fact, I only learned about mod_rewrite a few years ago when I saw other sites (and CMSs) starting to use it. Again, I'd say give the devs a break. Judge them on their code, not their knowledge of your system. There are a lot of ways to develop web applications... you probably should not assume the method you use is universal. Edit: I guess I did open up the best practice argument above. Sorry, I'll just concede that one... it may not be a waste of time/effort - I guess I'd need to see it working in action. I'm a bit skeptical, but I don't really want to get into a big back-and-forth about it.
&gt; it was comparing apples to apples Sorry but that just shows you don't understand what this is at all. It's not comparing apples to apples. It's more like comparing a packaged PHP setup to a source code install. This is not a PHP interpreter, this is a PHP interpreter with an optimizing/caching module, plus an application server in the form of resin to handle their other advantages such as load balancing and distributed session store. (which PHP already supports via memcached) Also exactly what makes you qualified to say that I have a limited understanding of this? For all you know I might be the most gosu Java programmer this world has ever seen.
FYI - APC will be built into the 5.4 PHP core.
I mostly agree with you. I think you misunderstood. Those arent pass/fail questions. Its to understand their grasp of PHP. Read my last paragraph. I too would punch someone who used a double dollar sign. However knowing SQL is important. If I asked you to make the basic CRUD and you used an ORM id be worried.
Agreed. As for the CRUD + ORM I'd allow it in this scenario: They know what they're doing with it AND it's the ORM you use at the company. Example: It's a Symfony developer position, if they write a CRUD from scratch I'm not going to hire them (too much training time, etc. etc.) But if they do the correct thing and use Doctrine + Symfony to build a full CRUD system in 5 minutes I know they know Symfony+Doctrine
To rebut only the last point - it makes no sense whatsoever to presume that everyone you talk to on the internet about Java is an awesomely gosu Java programmer.
But it makes sense to base your argument around the fact that the other guy knows nothing? That's a solid way to get your arse handed to you and look like an idiot...
And there you are assuming a false dichotomy... you're doing well with the fallacies today ^_^
Experience tells me that most people online are retards, so while it might be a logical fallacy you can consider it a lesson taught by experience. One that just keeps getting proven true every day.
A) LAMP != WAMP, so they might have used a GNU/Linux machine before. OK, but they haven't ever installed Apache? B) PHP runs in environments that are not Apache. Any web server can run it, in theory. In fact, you can run it without a web server. C) Many PHP devs probably FTP into a third-party hosting site and use their already-configured environment to build a site. That allows them to circumvent having to install anything, so even if they haven't installed a web server, they might have used one. D) I've been using PHP for years, and have never used mod_rewrite. I've heard of it, but never used it. Then again, I wouldn't say I was a PHP developer.
It's not the development environment, it's [freedom](http://www.gnu.org/philosophy/why-free.html).
I'm interested (genuinely) in how Windows is a more convenient development platform than Linux for PHP, I've tried both and for me it was completely one sided however I am always interested in looking for a better way to do something. 
It's all cool, programming is a relatively new field and structured software development is even newer, we are pretty much making up best practice and approaches as we go, there is often no one right "answer" to which approach to take (which is one of the cool things about the field I think). EDIT: In the long term I think this may change but I can't imagine what the final shape will be.
Personally, I've always worked on either third-party hosting sites or on web servers set up by people who are specialized in server and network management. I still know how to use mod_rewrite though.
Instead of lots of these $locationname = $node-&gt;location[name]; Just do $location = $note-&gt;location; and use $location[name] instead of $locationname Also you may want to separate the setup into a separate php file, to separate the view/display from the backend code as much as possible.
**Good**: * Using PHP's alternative syntax within the HTML; it's clearer what's going on compared to random opening/closing brackets that misalign * Hard work being kept separate from the HTML (ie logic/view separation) * Whilst it isn't perfect, I understand what's going on and can follow the code quite easily **Improvements**: * Those while loops would be much better as foreach loops. I find myself using while and for loops only in rare cases, and it's usually for fairly low level stuff, such as file handling, or old school raw database functions (mysql_*) which is (usually) better served with a framework or library abstracting it away. * When appending data to an array, there's no point in using a variable to define the index, so instead of $freeadmission[$fa] = ... you could instead do $freeadmission[] = ... which automatically creates the new key * Stick with echo, there's no point in using print. I could give you some bullshit about the micro-performance gains, but it's more about it being the de facto * Some of the variable names are vague/not very descriptive (eg. $datedate). It would also be good to separate the words, either with $camelCase or $underscore_separator so it's easier to read. Whatever convention you choose, stick with it for the duration of the project. * The conversion of the short day of week to the full string could be done like $weekdayFormat = array( 'MO' =&gt; 'Monday', 'TU' =&gt; 'Tuesday', 'WE' =&gt; 'Wednesday', 'TH' =&gt; 'Thursday', 'FR' =&gt; 'Friday', 'SA' =&gt; 'Saturday', 'SU' =&gt; 'Sunday', ); $dayoftheweek = $weekdayFormat[$datedate[1]]; or better yet, using PHP's built in date functions for something like: $dayoftheweek = date('l', strtotime($datedate)); (I'm not sure what variable will hold the full date string for the strtotime function, but I assume you have one.) * Using strings without quotes for array keys. Eg. $node-&gt;field_minimum_age[0][value] This actually defines a new constant called 'value' and it's value is set to 'value'. Always always always quote your strings, so write this as $node-&gt;field_minimum_age[0]['value'] instead. * You're using PHP's short opening and closing tags in the HTML, but only sometimes. Why not always use it when writing HTML? You could write &lt;div class="minage"&gt;&lt;strong&gt;Minimum Age: &lt;/strong&gt;&lt;?php print $minage; ?&gt;&lt;/div&gt; much shorter like &lt;div class="minage"&gt;&lt;strong&gt;Minimum Age: &lt;/strong&gt;&lt;?=$minage ?&gt;&lt;/div&gt; instead. It looks cleaner as well as requiring less typing. * This if($faa &gt; 0): echo ', '; endif; could be if ($faa) echo ', '; Which forgoes the &gt; 0 (if the value is &gt; 0 then it's true), and single statement if's don't need to be opened/closed. My rule of thumb for single statement if's is that if it's less than ~50 characters, don't create opening/closing brackets. Anything more and it'll be more legible with the opening/closing brackets and a the contents on a separate line, like if ($faa) { echo ', '; } * Actually, that whole while loop statement could be a single command: &lt;?=implode(', ', $eventtype)?&gt; * There's a couple of fairly lengthy lines (such as $website = ...). I'd look at either breaking them up on to separate lines, or creating several statements. Something like $website = sprintf('&lt;a href="%s" title="%s" target="_blank"&gt;%s&lt;/a&gt;', $node-&gt;field_website_link[0]['url'], $node-&gt;field_website_link[0]['title'], $node-&gt;field_website_link[0]['title']); is much more readable, and doesn't require horizontal scrolling to read. * If your code is version controlled, then delete code, don't comment it out * Speaking of comments, where are they? I could probably do with a couple around the date formatting stuff, just briefly explaining what format the date is coming in as, and what you're trying to achieve with it * Keep indentation consistent. You have a couple of while loops where the closing bracket is at a different indentation level as the opening statement, and the body of the loop is at the same indentation as the opening of the loop. I actually thought the while loop was already closed, and was trying to figure out why there was a random closing bracket **Clean code** A highly subjective matter. There are many opinions on what's clean and what isn't. PHP is influenced by many different languages and has many different ways of doing things. I've seen people calling projects that I think are a pile of steaming shit elegant and clean, or calling what I call elegant and clean a steaming pile of shit. For me, I tend to err on the side of the Java influence, so OOP, camelCase, PHPDoc. I also like using PHP's built in functionality to do as much as possible; you'd be amazed at how many times I've replaced ~50 lines of code with 1-2 as someone's never heard about a built in function called wordwrap, or something like that. You're on the right track though; everyone has opinions, but as long as I can * follow the code and understand it * easily modify it without weird side effects, or having to change the same thing in many different places then it's probably fine.
It's odd they never wanted to understand how to do stuff locally in 12 years...but it's certainly possible their interaction with PHP for all those years was based on making/editing PHP files, uploading them to the server and messing with MySQL that was setup elsewhere. It's entirely possible and while I think it's odd, it's equivalent to mechanic never learning how to drive a stick. It's odd it's never happened - but it's entirely possible the need never arose.
I disagree about using date() and strtotime() to perform a one-to-one string mapping. They're slow functions and it's good to get into the habit of not using them unnecessarily. I'd also disagree about using an array. Yeah it works, but it seems a bit wasteful in terms of memory to create a whole data structure just because it allows you to use nicer syntax. A switch-case statement is the right thing here.
I disagree with what you said, for the simple fact that the performance difference is tiny. I'm of the opinion that the best way to write code for web development is to write it well, then, if you hit some kind of bottleneck, look for the simplest changes that make the biggest differences. I guarantee that you will *never* need to optimize out strtotime, or date, and you'll most likely never need to worry about use of classes or arrays when it comes to representing data (unless, of course, you're looking at huge amounts of data, but then you're in the realms of actual optimization, not wasting time worrying about one method being 0.0001% faster than a different one, or the time of the developer who comes in after you and has to change eleven switch statements instead of one array). 
&gt;Also exactly what makes you qualified to say that I have a limited understanding of this? For all you know I might be the most gosu Java programmer this world has ever seen. Yes you might be. But that wasn't what I was referring to. I was referring to your understanding of Quercus specifically, to which your posts have clearly shown a limited understanding to me. It isn't an insult, I don't expect you to be an expert over something you barely saw on reddit a yesterday. The article in question while talking about a caching module like memcached doesn't talk about any kind of opcode caching/optimization, which is the performance benefit provided by APC. If you've seen something aside from this, then let me know. The title of this article ALSO clearly points out mod_php, which is an Apache module. You're now saying it's unfair because theirs is built around resin, well mod_php is built around apache, i still fail to see how this changes the apples to apples comparison? Also, while load balancing and distributed session store are nice advantages from resin. No mention was made of actually load balancing their tests which leads me to assume in the interest of a fair test, they didn't do this. I would be happy to install both interpreters, install drupal or something else, and run my own tests on it to see what the comparison is. I don't think anyone has called into question the validity of the tests yet, but just in case. But either way, [_vinegar](http://www.reddit.com/r/PHP/comments/jv6zw/quercus_100_java_implementation_of_the_php/c2fizun) made a good point, but the current stable version of PHP doesn't have this benefit, so we're still talking apples to oranges here.
I think you are right to suspect. I know others are chiming in that it's uncommon for a PHP dev to have installed PHP. That just isn't true. While most PHP devs will be the first to tell you they know little about linux administration(unless of course they've spent years doing it). I looked it up, if these guys really have 12 years of experience they worked with PHP3. Throw out questions to them you can glean of PHP's history, given they lived through the experience first hand, they should be able to easily recall what happened. Stuff like the PHP5 initiative and PHP4 end of life should be obvious. Also questions about specific changes between PHP3 and 4 would be things they should know about. I do find it very odd that someone with as much experience as they are claiming have never used mod_rewrite. I'm not suggesting that all devs learn mod_rewrite on day one(I didn't pick it up for a year or two) but with 12 years experience it really makes me question. Was this experience all at one place, or did they have jobs at several places? Maybe it might explain it if they only worked in one shop, which had people who set this stuff up for them. I've never personally worked in a place like that, but I know of places do that.
APPLY I don't really meet any of those requirements, but I do have delusions of megalomania I find the constant post about 'which framework is best' really anoying, but everytime I go in to flame some noob for their failing google foo, I end up reading some insightful comments and learnin' stuff. Damn you r/php
APPLY I mod the following: * http://www.reddit.com/r/emoticons (mod for &gt; 12 months) * http://www.reddit.com/r/derpcompany/ (mod for 6 months) Both small and not much happens in those. I'm an active reddit user and /r/PHP is something I visit daily, although I have (like monk_e_boy) been getting more annoyed with the PHP framework battles; Some users like to push their framework of choice which grinds my gears. I know I've probably talked about Kohana too much in the past so I'm not totally un-biased, but I've been trying to be equal in my posts lately as seen here: http://www.reddit.com/r/PHP/comments/jrmn0/so_now_weve_ask_had_time_to_have_a_good_look_at/c2elfyj Overall I'm happy with the general quality of the sub-reddit and appreciate experienced PHP developers such as _ircmaxell_ and _Lornajane_ linking to their blog posts. It'd a problem if they linked to something of poor quality, but both users provide good content so I don't see a problem. You might consider posting what time zone you're in. That way you can get a good spread among the moderators. I'm in England (UTC + 1 atm) PS: I also moderate a fairly big website (message me for the URL) and have a lazy approach to moderation. I'll only really get involved when a user is spamming, is abusive towards others and posts 1 or 2 word replies which don't add value to the website. My Github: https://github.com/ThePixelDeveloper
&gt; to which your posts have clearly shown a limited understanding to me. Based on what you've said so far I honestly have to laugh at your ability to judge such things. Not only do you not understand how Java works at all but you also don't understand how Apache and mod_php work. Just to restate it. Java is by itself exactly what APC does. Since they've implemented PHP in Java they have hopefully made it compile into the intermediary language for Java, thus providing the *exact* same feature APC does. &gt; doesn't talk about any kind of opcode caching/optimization, which is the performance benefit provided by APC The outdated site you link don't, but the [current website](http://quercus.caucho.com/) does say they have it implemented. So yeah, this *is* a really shitty benchmark they have done and it's most definitely not comparing apples to apples. They even link [this test](http://www.workhabit.com/labs/resin-backed-php-drives-4x-performance-improvements-drupal) which shows equally clue less testing with wrong statements like: &gt; The interpreter only has to be started once, as opposed to a new interpreter for each request as you would with a web server (either mod_php or fcgi) &gt; But either way, _vinegar made a good point, but the current stable version of PHP doesn't have this benefit, so we're still talking apples to oranges here. I fail to see the point of this at all. If you're going to compare a complicated setup with a custom php and a custom application server then you should compare it to an equally optimized PHP install, not a bare bones install. Most people install php via package management software anyway and these will include APC. 
&gt; Any web server can run it, in theory. In fact, you can run it without a web server. This is a bit of a generalization. The most common method to run php outside of `mod_php` (namely via Apache) is as a FastCGI server. Saying 'any web server can run it' is not only a generalization but naive too.
APPLY I don't mod any subreddits but I created and ran a ~70k post forum community for about 2 years. Being laissez faire admin couldn't have worked out better. In fact, I'm pretty sure a decent amount of people didn't even really know who was in charge, and that was fine with me. /r/PHP is a mix between news, tips/tricks and questions. I like it that way; unless the population / post flow drastically changes I really don't want separate subreddits for these things. It's also nice that it's more *community* than *category*. I'm GMT -8 (Pacific Standard).
Naive? "Most common" doesn't mean "only," you realize. I've never heard of FastCGI, either, by the way. I'm sure Nginx, IIS, lighttpd, and all the others either support PHP or are written specifically for one language. Or only for static files. And yes, it is a generalization, I suppose, because technically NodeJS, Flask, and other one-language-only servers can't run PHP without calling them externally (though I'd say that counts :) )
APPLY I think I can be fair and impartial for any PHP related discussion, though I am opinionated at times, I can respect other people may prefer one thing over another. I haven't moderated before on Reddit but I am active in this community and would love the opportunity. I have served as an admin for a minecraft server at [Aperture Games](http://www.agmc.in/). I've also served as a moderator on various forums over the years. I'm 28 years old, it's not easy remembering things I had access to when I was 15 or 16. I have been pretty active on reddit(though I do lurk a lot) for well over a year now. Also I think /r/php is one of the best communities. every time I come here I always see great inciteful comments from everyone and great discussions that are always on topic. I wouldn't change anything. If the community hew a lot I think changes would be necessary but at the moment I think things are prefect as they are. Disclaimer: I am also a developer with Kohana so that may be a conflict of interest, however I promise if made a mod, I would not give Kohana any undue attention that other frameworks did not receive. Edit: Reformatted comment 
I have a question about the "Stop Arguments" condition. How do the current mods define arguments? I'm of the opinion that a solid argument helps people grow their knowledge base and get rid of bad assumptions. Arguments are helpful to a community as they prevent them from becoming one big circlejerk. I also firmly believe that arguments should be done with logical arguments and not insults/personal attacks. So my question is basically whether arguments is defined as people getting catty and attacking the person rather than the argument.
Actually that list is ranked by relevance and popularity, so you're getting the best ones.
APPLY - I've got a four year badge and verified email. I'm fairly active on Reddit, very active as a lurker. /r/php/ is probably where I'm most active. I'm not currently moderating any subreddits but have current experience moderating large web communities on my own sites (message me if you want a link). I'm a full time web developer using just PHP and have written tutorials for UK magazines in the past (.Net). I think that r/PHP is currently mainly used as a resource for people looking for help / assistance, I don't mind this but I'd like to see more articles / tutorials, especially about more advanced topics. Maybe we could introduce a syntax into the subject of posts to help people differentiate them. E.g. Help: I've got a bug in my code and can't fix it. Tut: Check out how to make an upload progress bar with PHP, HTML and Javascript You get the idea.
I'll only apply if I'm able to swing my genitalia around.
I meet all the conditions... except the 1 year one. WHY did I lurk so long.
You can use java libraries - there's some very high quality software that is now available.
APPLY I've been a redditor for 4 or 5 years but had to create a new name because my last username had my real name in it, not smart. Not currently a mod for anything. I used to moderate popular gaming forums. I do have certain mod privileges on stackoverflow, though (because of my high reputation=]). r/PHP - Could use a little more activity. I've posted a few one-liner contests in hopes to help bring more discussion. I plan on doing a couple more soon. I work from home as a freelance PHP developer, so I'm on the internet pretty much all day every day. A lot of that time is spent on reddit.
Perhaps they are only supporting 32 bit again. I know that several months ago it was 32 bit compatible. I'll have to ask.
APPLY - I am currently a mod at r/magento. I am a full-time PHP developer and want to get more involved in the community. I have been a redditor for nearly 4 years, and feel like I have a good grasp on the culture and influences around it. Thanks for your consideration. 
APPLY I moderated (then late~~d~~r Admin'd) TalkFreelance.com for a number of years, I left the post due to change of ownership and have not been moderator anywhere else since. I'm applying regardless of not having the 1yr trophy because I feel that the criteria is unwarranted. I'm a laid back individual, mature, have experience moderating but just have not utilized an account on Reddit for over a year (9 months of having an account and counting). I am self taught in PHP, having started approximately 6 years ago. Unrelated qualifications are that I currently hold a web developer position at a startup, have freelanced for years, and have completed a university degree in commerce (though unrelated to PHP, shows commitment among other things) GMT-4 timezone I like that /r/PHP is welcoming to new coders. I hate seeing resentment of beginners because how else are they going to learn unless those of us who know and understand show them the way.
APPLY I don't currently mod anything of worth on reddit, but am admin / mod of a few forums, and run a popular user group which I'll message you if you like. I'm an active redditor looking to get more involved; I'm on here almost everyday. Russ 
APPLY I mod [/r/glutenfree](http://reddit.com/r/glutenfree), a 2 year old community, which I have modded for 2 months. It's a fairly niche community, so there isn't a lot of trolling or spam. I rather enjoy the current state of /r/PHP. There are a few surprisingly noteworthy people who frequent it, which gives the discussion a fair deal of value. I think the community could do with a bit of "evangelism", encouraging people to come here for support and advice. IRC offers quick-fire responses, but the discussions aren't archived in any meaningful way. The scattered BB forums on the interwebs are also lacking in value, because they're either only tangentially related to PHP, or they are littered with spam and "do it for me" questions. I think /r/PHP could offer a middle ground between the rapid response of IRC, and the permanence that forums offer (not to mention the search engine visibility that Reddit does). As for my qualifications, I've administrated several noteworthy communities in the past, including the internet security community [HackThisSite.org](http://hackthissite.org). I have a fair deal of experience mediating disputes, while also focusing on expansion of the communities. I should also mention, for what it's worth, that I'm a semi-active member of the PHP documentation team.
APPLY Active PHP developer and moderator of the iPad subreddit. Decent karma score. On reddit 25-30 hours per day.
APPLY I'm a moderator of: - r/codbo 5K+ - r/mw2 2K+ - r/mw3 1K + - r/callofduty (acquired ownership 2 days ago - we've gained 420 readers in 24 hours) &gt;One who takes a laissez faire approach to moderation. Agreed. &gt;An Active User. I am. &gt;An Experienced User About a year and a half, I think. In terms of moderation, I don't think r/PHP needs a heavy handed moderator etc. Most of time, arguments between people on here are usually on-point. I don't think I've ever noticed any personal insults or mudslinging. Maybe it's just because the Call of Duty crowd make you all look like a bunch of choir boys! :) 
You want me to work on your site for free? No?
APPLY 2 year trophy, verified email. On reddit nightly, and now my wife is on it too. Don't currently mod anything as I've never had a need to. Thoughts on r/PHP? It's okay. Sometimes a little repetitive (which framework is best?), mostly dry stuff, but sometimes an interesting nugget pops up. I don't imagine too much controversial stuff pops up in here (except maybe which framework is best - then it's gloves off).
 /* COMMENTS, COMMENTS, COMMENTS */ Your code is seriously deficient in comments. While it all makes perfect sense why did what you did today, in six months you'll be scratching your head wondering what you were thinking. More comments.
that's not what he said... he wants to write code...
APPLY I dont do much of anything really..
Sorry bud, one of the conditions it to participate 48 hours a day on Reddit.
It really seems like he wants someone to help write his website for him. If im wrong i apologize, but it seems other people agree with me.
I stalk this user for a long time, recommended. 
APPLY I mod over at r/Omaha, r/Nebraska, r/flood2011. All of small and nitch specific but at least they are active. r/PHP is a bit like an oreo it can be rough tough and a little sweet but once you get that cream in your mouth god its hard to swallow just one.
Apply to /r/gonewild
APPLY I'm addicted to the color orange-red. I'll answer mod mail like a boss. I don't moderate anything on reddit yet. I think /r/PHP is a fine. It keeps all of the PHP discussion in the one place where people will not mindlessly bash the language. This may be a deal-breaker, but my favorite posts are the weekly "what framework should I use" submissions. I love 'em. edit: I appreciate people voting for their favorite candidates, but hopefully people will realize it's silly to downvote every other person in this submission. I don't think this is going to be decided by a vote. :)
perhaps you are better at reading between the lines than i am. i took a literal read and it seems like the dude was just looking for a coding buddy... like in martial arts you got your sparring partner and shit... i might be wrong though.
APPLY I moderate no other communities. Coder for 15 years, was ircop for 10 - does that count? I think /r/php's a bit lacking on the activity as well as the broadening of what php englobes.
That disorganized collection of sentence fragments you're replying to immediately made me think of [this](http://www.youtube.com/watch?v=5hfYJsQAhl0).
&gt; I feel there's to much love for FuelPHP I'd be interested to hear more about this. Is it possible that people like it because it's good? For what it's worth, I think it's a pretty cool framework.
&gt;Which is faster? echo 'hello' . 'world'; echo 'hello', 'world'; print 'hello' . 'world'; you might be dissuading experienced developers by asking such useless questions in your interview process, no offense. I spend a considerable amount of time in my work looking at the syscall-level results of PHP execution, for what would be called microgains. I couldn't tell you offhand the opcode-level difference between using the concatenation or the comma-separated strings in `echo`. **edit:** # php echotest.php ops: 1000000 comma: 1.6319999694824E-6 concat: 1.5746998786926E-6 # php echotest.php ops: 1000000 comma: 1.5535571575165E-6 concat: 1.5686230659485E-6 [testing code](http://pastebin.com/as4mpgqB). **tl;dr: there's no measurable difference. **
Needed to use cURL again this evening for the umpteenth time, and I just got fed up with how repetitive it can be, so I decided to throw together a object-oriented alternative, just wrapping the usual `curl_setopt` functions. Maybe this will be useful to someone else. I also welcome any pointers or criticism you may have.
Instead of using getInfo (or besides getInfo) create a getHeaders, getSizeDownload, getContentType, etc so you avoid using the cURL constants outside the class.
Yeah, that's a good idea. ~~That's probably the next thing I'll implement.~~ [Added. Thanks!](https://github.com/BauerUK/PHP_CURL/commit/d1394e470e7c3a4a770a03594f25ad844ad85dcf)
I was definitely looking for a coding buddy. If I wanted to find someone to work on my website for free, I wouldn't spam reddit for that. I would never even expect anyone to work for me for free. Sorry to confuse you. I don't want people to think I'm trying to take advantage of them. I just want to meet some new friends that are as interested in programming as I am. Not trying to bash anyone here...
Object-oriented does not mean you have to make it obnoxious. * The copy&amp;pasted method declarations are entirely unwarranted when cURL provides a straightforward parameter push API. Your entire class could/might be slashed down to a single __call() wrapper. * Setter methods reveal a misunderstanding of proper OOP design. [Origin and Analysis of getter/setter methods](http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html) * And obviously newcomers go with popular instead of appropriate. But maybe we do need some license education in /r/php? 
While I agree with what you said, I think you could have phrased that differently...
&gt; Object-oriented does not mean you have to make it obnoxious. No intention to make the code obnoxious in any way. I aimed for straightforward and readable. Could you elaborate on what you think makes my approach obnoxious? &gt; The copy&amp;pasted method declarations are entirely unwarranted when cURL provides a straightforward parameter push API. Your entire class could/might be slashed down to a single __call() wrapper. That's fair enough, but if everything is expanded out and in plain sight, it means it's easier for a newcomer to the code to see clearly what methods are available. Not to mention that editors with auto-completion ability aren't often clever enough to discover magic method handling. &gt; Setter methods reveal a misunderstanding of proper OOP design. Origin and Analysis of getter/setter methods I come from a C# background, a language which I feel has a strong approach to using getters and setters. However, I feel PHP's implementation of getter/setter methods using the magic `__get` and `__set` methods isn't clear enough, nor is it type-safe enough for my requirements, especially when there is a predefined list of parameters in the curl scope -- what's the harm in writing them out individually, and falling back to generic `setOption` and `getInfo` methods in the event that the underlying framework expands past the capability of the wrapper?
Long time admirer, good coder, very friendly. Would work with again +++++++
you should reword your post then, because 4 people agree with me that it sounds like youre asking us for free work.
A well reasoned response. This subreddit is chock full of critics that assume that because you did something differently than how they would, it means you're ignorant. I like this class, I'll probably use it next time I need to do a web request. Thanks for posting it.
Yes, it pretty much looks like you wrote it with another language in mind. Javaisms and CamelCase are very prevalent in PHP nowadays; it is not always appropriate considering the base language however. In this case you are incompatibilizing. Shortening out the underscores from the constant names to get method names might look fancy, but it's not a simplification for moving from the procedural to the objectish API. (From that I also surmise you aren't aware that method/function identifiers in PHP are case-insensitive?) I get the part about making the method interface discoverable for autocompletion. But I generally resent that this should be the driving or only factor for class design. (IIRC both Eclipse and Netbeans support @magic method declarations without heaps of wrapper methods.) Obviously you also keep some state in your class for the addHeader convenience method and others. I'm not sure it's a good approach to separate the state out of the curl handle; but yes, for that you would very much need your individual methods approach. The `__get/__set` workaround of PHP is certainly not comparable to real OOP languages like Python or C#, but again using getters/setters aren't the most appropriate concept to begin with (even if cURL very much qualifies for low-level interface edge case). I don't understand the point about type-safety though. Again sounds as if you were battling the language semantics too much. In case I'm still coming off as slanderous: I don't particularily like the push-procedural API of cURL in PHP (or that everyone thinks libcurl was just a HTTP/FTP request library). Your wrapper class is certainly a step-up from that, particularily as well-documented as it is. Just seems way more code than necessary. And the non-library license thing.
why CURL::init() instead of new CURL() ?
Just a suggestion, but it might be interesting to make it fall back to using stream wrappers/contexts in the event that curl is unavailable.
If you read the class, you'll see he made it so you can do it either way.
I came in to suggest that ircmaxell be nominated. His writing is good, and his responses to critical comments are often well thought out and tempered. I think he'd be ideal for the position, assuming he's interested.
take a look at multicurl...
it always is, i work for a huge web hosting company and trust me, its like two command lines and done.
Thanks! I never really got in to commenting, but will for sure from now on.
No, the because location[name] is oart if a string, it's not the default value, so I shouldn't do that, right? Also what is the advantage of splitting the set up code into another file? it adds more files to load and if I want to edit it, I have to open two files. These are both serious questions, as I am a novice coder still.
Wow! I didn't want you to think I ignored you, so give me time to reply to everything you said. Thanks
&gt;Those while loops would be much better as foreach loops. I find myself using while and for loops only in rare cases, and it's usually for fairly low level stuff, such as file handling, or old school raw database functions (mysql_*) which is (usually) better served with a framework or library abstracting it away. I have never used a foreach loop, and while reading [this](http://php.net/manual/en/control-structures.foreach.php), it is slightly confusing. I'll look in to it more to adapt my code. Why do you prefer foreach though? Is it less text, or faster, or just the right way to do what I'm doing? &gt;When appending data to an array, there's no point in using a variable to define the index, so instead of $freeadmission[$fa] = ... you could instead do $freeadmission[] = ... which automatically creates the new key I am not appending data in my situation, the data is there, and I'm saying, while there is a value, echo the value. Like if $i[1] contains something, then print what ever it contains. This is because the number of values can be any number really. Am I still doing it wrong? &gt; The conversion of the short day of week to the full string could be done like $weekdayFormat = array( 'MO' =&gt; 'Monday', 'TU' =&gt; 'Tuesday', 'WE' =&gt; 'Wednesday', 'TH' =&gt; 'Thursday', 'FR' =&gt; 'Friday', 'SA' =&gt; 'Saturday', 'SU' =&gt; 'Sunday', ); $dayoftheweek = $weekdayFormat[$datedate[1]]; Thanks. I will save this snippet for future use, and change my code. &gt; Using strings without quotes for array keys. Eg. $node-&gt;field_minimum_age[0][value] This actually defines a new constant called 'value' and it's value is set to 'value'. Always always always quote your strings, so write this as $node-&gt;field_minimum_age[0]['value'] instead. [This is what I'm pulling from.](http://imgur.com/VCcYU). As you can see, value is actually defined and contains data, so is this still true what you said? I will use quotes though from now on as good practice. &gt;You're using PHP's short opening and closing tags in the HTML, but only sometimes. Why not always use it when writing HTML? You could write &lt;div class="minage"&gt;&lt;strong&gt;Minimum Age: &lt;/strong&gt;&lt;?php print $minage; ?&gt;&lt;/div&gt; much shorter like &lt;div class="minage"&gt;&lt;strong&gt;Minimum Age: &lt;/strong&gt;&lt;?=$minage ?&gt;&lt;/div&gt; instead. It looks cleaner as well as requiring less typing. Thanks for this, I didn't know about that tip. The code I use, I put the short tag. There is some code mixed in from the original source [which you can see here.](http://api.drupal.org/api/drupal/modules--node--node.tpl.php/6/source) &gt; There's a couple of fairly lengthy lines (such as $website = ...). I'd look at either breaking them up on to separate lines, or creating several statements. Something like $website = sprintf('&lt;a href="%s" title="%s" target="_blank"&gt;%s&lt;/a&gt;', $node-&gt;field_website_link[0]['url'], $node-&gt;field_website_link[0]['title'], $node-&gt;field_website_link[0]['title']); This also is new to me, but seems very useful, let me see if I understand how to use it correctly: $website = sprintf('&lt;a href="[FIRSTVALUE]" title="[SECONDVALUE]" target="_blank"&gt;[THIRDVALUE]&lt;/a&gt;', $node-&gt;field_website_link[0]['url'], /* THIS IS THE FIRST VALUE */ $node-&gt;field_website_link[0]['title'], /* THIS IS THE SECOND VALUE */ $node-&gt;field_website_link[0]['title']); /* THIS IS THE THIRD VALUE */ And the only reason to write this is because it's cleaner, it's about the same amount of coding/text, right? &gt; If your code is version controlled, then delete code, don't comment it out Ok. &gt; Speaking of comments, where are they? I could probably do with a couple around the date formatting stuff, just briefly explaining what format the date is coming in as, and what you're trying to achieve with it Never commented, because before now, I worked for myself and never thought about others reading my code. &gt; Keep indentation consistent. You have a couple of while loops where the closing bracket is at a different indentation level as the opening statement, and the body of the loop is at the same indentation as the opening of the loop. I actually thought the while loop was already closed, and was trying to figure out why there was a random closing bracket. Yeah, I've been trying to find a php code beautifier / code formatter, but since my php and html are all mixed in, it's hard. Plus when I start with a base file, and work around it, it's tricky for me sometimes if they don't indent using the same number of spaces as my editor does. Thanks for you very lengthy reply, and I wanted to do you the courtesy of replying to everything, because you took the time to do all that for me. 
I just compiled it under 32 bit Ubuntu 11.04. Definitely works. Still running the unit tests right now. EDIT: The tests segfault, so there's obviously something wrong :S
APPLY Currently modding [/r/meme](http://www.reddit.com/r/meme/) not amazingly active so I don't really think it counts. 3 year member, verified email. I've been bumpin around /r/php for almost all 3 of those years. It's a great community that avoid a lot of the /r/programming problems. don't expect to be chosen but figured I might as well throw my hat in the ring. I'm on reddit day in and day out. 
Because of a (still unfixed?) parser bug new Foo()-&gt;bar() // Parse error: syntax error, unexpected T_OBJECT_OPERATOR
I've yet to ever encounter an environment that didn't have CURL, but I've several times had to work with web hosts that disable remote streams for security reasons (I don't get the logic, but it was their policy). Granted, I only work with *nix based hosts. Might be different for Windows based.
You can't assume that just because you have it turned on, that everyone else does too.
dude its like asking if a server has php installed on it, its a common php extension, mod_sec rules still guard it. 
Sadly much of this is reflected in my experience, XDebug is just a complete mother fucker to set up with Netbeans which is pretty tragic as Netbeans is easily the most capable PHP IDE I've come across in every other way.
&gt; No, the because location[name] is oart if a string, it's not the default value, so I shouldn't do that, right? I'm not sure what you mean here. &gt; Also what is the advantage of splitting the set up code into another file? it adds more files to load and if I want to edit it, I have to open two files. [Separation of concerns](http://en.wikipedia.org/wiki/Separation_of_concerns) As much as possible, you want to keep the display of data separate from the logic itself. If you don't, eventually you will end up with a length file that does a lot of different things. This inter-mixing of data-retrieval/processing and the formatting of the data for display, adds difficulty to debugging in the long run. A very popular design pattern for the web is Model-View-Contorller (MVC) (Wikipedia)[http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller]. It is so popular because of this separation of concerns. Even if you don't use the full pattern, just having the data processing separate from the view is a good start. Now, if this is for a website with only a handful of pages, it's not as big a deal, but as it grows its important to have more structure.
This is not a bug. [Constructors](http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming%29) aren't meant to return values.
APPLY
&gt;I have never used a foreach loop, and while reading this, it is slightly confusing. I'll look in to it more to adapt my code. Why do you prefer foreach though? Is it less text, or faster, or just the right way to do what I'm doing? Foreach loops are much cleaner and safer. They're cleaner, because you're not having to maintain an incrementing variable, and instead of accessing the array values, they're instead given a variable name which you can then use. They're safer, because some people don't like starting array indexes at 0, or they'll delete a value without resorting, so an index is missing, and then when you're trying to access that value using your incrementing variable, it's undefined and you get a PHP notice. **Example of it being cleaner** $fa = 0; while($node-&gt;field_free_admission[$fa][value]){ $freeadmission[$fa] = $node-&gt;field_free_admission[$fa][value]; $fa++; } vs. foreach ($node-&gt;field_free_admission as $admission) { $freeadmission[] = $admission['value']; } &gt;I am not appending data in my situation, the data is there, and I'm saying, while there is a value, echo the value. Like if $i[1] contains something, then print what ever it contains. This is because the number of values can be any number really. Am I still doing it wrong? By using a variable to put the value in an array (eg. $array[**$i**] = $value) then all you're doing is defining the index which contains this value. By forgoing the $i variable, it will automatically use the next available index, which is safer than relying on a variable, and easier to maintain since you don't have to think about the $i variable. &gt;This is what I'm pulling from.. As you can see, value is actually defined and contains data, so is this still true what you said? I will use quotes though from now on as good practice. Yes. What they mean is, the string 'value' is a key for the array; a constant is something completely different. A constant is like a global variable, but once the variable is set, the value can never be changed. Constants are defined by using PHP's [define](http://php.net/define) function, but PHP has a quirk (feature?) wherein if you write an unquoted string (in your case *value*) then it will either create a new constant with the value of the constant being the same as the constant's name, or it will actually use an existing constant's value (so if someone has already defined the constant *value* with the value *'test'*, then you will actually be trying to access *$node-&gt;field_type[$et][**'test'**];* in your code. You can read more about constants [here](http://php.net/manual/en/language.constants.php). &gt; This also is new to me, but seems very useful, let me see if I understand how to use it correctly: &gt; &gt; $website = sprintf('&lt;a href="[FIRSTVALUE]" title="[SECONDVALUE]" target="_blank"&gt;[THIRDVALUE]&lt;/a&gt;', &gt; &gt; $node-&gt;field_website_link[0]['url'], /* THIS IS THE FIRST VALUE */ &gt; $node-&gt;field_website_link[0]['title'], /* THIS IS THE SECOND VALUE */ &gt; $node-&gt;field_website_link[0]['title']); /* THIS IS THE THIRD VALUE */ &gt; And the only reason to write this is because it's cleaner, it's about the same amount of coding/text, right? Essentially, yes. It's a nicer way of injecting values in to a string, but it also means that you can define the string as a variable, then use it multiple times with different values (eg. if you have 4 links in the same format, but with different href's, then you can define the link string as a variable, then use sprintf to create new strings with different values for each of the links). I think sprintf is quite nice, and has a couple of powerful features. I used to use it for creating queries to the database, though these days you have prepared statements which do a similar thing, but also help with security. You can read about sprintf [here](http://php.net/sprintf). Don't worry about the length of the reply; I've been moving in to a more senior/team lead position recently, and it's disheartening to see how many developers aren't interested in learning how to write clean, readable code. I'm just glad to see someone giving a shit.
IMO, this happens frequently in places, where development is not the main source of income for the company, because they will hire the cheapest developers. They are inefficient, but can probably get anything done that is needed, given enough time. I have several colleagues wih 3-5 years of experience, missing fundamental stuff, like not knowing the difference between 'single quotes', and "double quotes", don't know how to set up virtualhosting in their own environment (they put every project into it's own folder, below a single htdocs/ folder), don't know how to write a query that counts how many times a value appears in a column, or haven't used any kind of version control before. Don't even start on "advanced" concepts, like OOP, or MVC. I have a hard time explaining them why putting logic into templates is a bad idea.
sorry for the late reply, I read your comment on my phone and haven't had a chance to respond until now. I'm no java expert, but I have built a [few things in java](http://www.github.com/nodren). I do know enough about it to know that .java files are turned into .class files, which are essentially opcode that is parsed by JRE. A .jar file is a .zip file essentially. You are right, Java does by itself what APC does, for Java. I'm talking about an APC for PHP. Unless I misunderstood what Quercus does, I don't think it's creating JAVA Opcode, it's using Java to interpret PHP. Thus, as an interpreter of PHP it could opcode the php code, just as the C implementation did. The fact Java is opcode cached is irrelevant to if PHP is opcode cached. &gt;The outdated site you link don't, but the [1] current website does say they have it implemented. So yeah, this is a really shitty benchmark they have done and it's most definitely not comparing apples to apples. I saw their website when poking around for the source code repo. I notice you mentioned they said they supported the APC API. There is a distinction here. The APC API refers to the memcached like functionality built into APC, not the opcode optimization/caching feature like found in xcache or zend optimizer. See this quote from OP's article: &gt;They can also use the PHP APC caching API since the APC functions are included with Quercus. Hopefully that can clear up any confusion on the matter. Yes they support the APC API for caching random bits of data IN your PHP code that you write around the APC API, they don't magically create php op code or even cache that. If they do, it isn't made known on either page. &gt;They even link [2] this test which shows equally clue less testing with wrong statements like: &gt;&gt;The interpreter only has to be started once, as opposed to a new interpreter for each request as you would with a web server (either mod_php or fcgi) I agree with you, that statement is wrong. That doesn't necessarily mean their test scores are inaccurate though. I think it would be worthwhile to do testing of our own if you think those numbers are fudged. &gt;I fail to see the point of this at all. If you're going to compare a complicated setup with a custom php and a custom application server then you should compare it to an equally optimized PHP install, not a bare bones install. Most people install php via package management software anyway and these will include APC. So what if APC, and all the variants didn't exist? Would Quercus be unable to fairly be judged against PHP because there isn't a viable performance enhancing alternative? See this debate started with one main point: The title of the article was sensationalist. The title clearly says "Straight mod_php". That to me doesn't mean "PHP plus some extra stuff to make it as fast as quercus". Now if the title left out a clear definition of what variation of a mod_php install, i'd call that sensationalist for sure, as it was trying to incite people by a "wow 4x huh... ohh nevermind" but it clearly stated what the 4x difference was against before ever reading the article. I fail to see how that's sensationalist.
As pointed out, constructors can't return values, so this means method-chaining goes out the window. You can, however, just use the constructor to instantiate an object and then use that as if you had used the static `init` method. $response = CURL::init("http://google.com")-&gt;execute(); ... is more or less the same as ... $curl = new CURL("http://google.com"); $response = $curl-&gt;execute(); ... so it just depends on your preferred coding style, really.
Some benchmarks: * http://css.dzone.com/news/php-template-engine-comparison * http://gonzalo123.wordpress.com/2011/01/24/php-template-engine-comparison-part-2-versus-plain-php/ * http://gallir.wordpress.com/2010/08/13/haanga-vs-django-vs-h2o/ (in Spanish, the numbers are connections per second)
It seems pretty sweet however the documentation on their website is incomplete.
I was sceptical, since I know that Twig too compiles templates into "plain PHP", and its those compiled/cached PHP files that get run. So... I figured that it too should get a worse, but similar time to plain PHP (i.e. it should be similar to Haanga) However I tried it myself (just the simple templates), and the results seem similar with Twig underperforming by miles compared to Haanga: **Twig** Array ( [memory] =&gt; 2.7654113769531 [seconds] =&gt; 0.067757129669189 ) ----- Array ( [memory] =&gt; 1.2012481689453 [seconds] =&gt; 0.03874397277832 ) Array ( [memory] =&gt; 1.2012481689453 [seconds] =&gt; 0.048196077346802 ) Array ( [memory] =&gt; 1.2012481689453 [seconds] =&gt; 0.028223991394043 ) Array ( [memory] =&gt; 1.2012481689453 [seconds] =&gt; 0.034213781356812 ) Array ( [memory] =&gt; 1.2012481689453 [seconds] =&gt; 0.037163019180298 ) **Haanga** Array ( [memory] =&gt; 3.0516738891602 [seconds] =&gt; 0.025389909744263 ) ----- Array ( [memory] =&gt; 0.68997192382812 [seconds] =&gt; 0.0095860958099365 ) Array ( [memory] =&gt; 0.68997192382812 [seconds] =&gt; 0.0066239833831787 ) Array ( [memory] =&gt; 0.68997192382812 [seconds] =&gt; 0.0051949024200439 ) Array ( [memory] =&gt; 0.68997192382812 [seconds] =&gt; 0.009645938873291 ) Array ( [memory] =&gt; 0.68997192382812 [seconds] =&gt; 0.010024070739746 ) N.B. In each case, the first run is worse because they're doing template compilation. Here's what Haanga generated: http://pastebin.com/9MKRixuK Here's what Twig generated: http://pastebin.com/mRMp34L4 **EDIT**: Basically, Twig's just a little bit more inefficent, since it uses multiple function calls wherever a variable is inserted into a template. The test particularly highlights this problem, since it loops 1000x over a row where it injects 3 variables. These are the sort of thing killing Twig's performance (x3, x1000 in this test!): echo twig_escape_filter($this-&gt;env, $this-&gt;getAttribute($this-&gt;getContext($context, 'row'), "id", array(), "any", false), "html"); 
Yes it is. Constructors don't return values, the operator `new` returns a value. The assignment of that value works: `$a = new Foo()` so everything else should work as well. This is pretty common among all other languages with a `new` operator.
public function setPostQuote(array $value) { // update our local copy if it has changed if($this-&gt;postQuotes !== $value) { $this-&gt;postQuotes == $value; } return $this-&gt;setOption(CURLOPT_POSTQUOTE, $value); } I don't think you're actually updating your local copy there. Beyond that why are you even checking if they're the same? Are you trying to tell me there's some massive performance gain? If this check has any meaning why are you calling setOption regardless?
I wouldn't have said this so nicely, ass.
That's true :( However, there are some [nice examples](https://github.com/crodas/Haanga/tree/master/examples). You can also check the [templates used in Meneame](http://websvn.meneame.net/listing.php?repname=meneame&amp;path=%2Fbranches%2Fversion4%2Fwww%2Ftemplates%2F), which is a Spanish digg-clone site which uses Haanga and has about 1M pageviews daily.
Anything of us in the curl wrapper I wrote some eight years ago (time does fly!) http://phpxref.sourceforge.net/phpxref-xaraya/nav.html.gz?modules/base/xarclass/xarCurl.php.source.html.gz The curl function was fairly new back then, and I needed a wrapper for a CMS that could fall back to a workaround if curl was not installed. Anyway, there may be something of use there (the chunking stuff perhaps, assuming chunking is still relevant).
Nice idea and nice execution, but will never match the best template engine for PHP : PHP.
One plus for WIN is the available PHP release (plus *all* standard extensions) is always the most current and available immediately for download. Where as on \*nix, it always depends on how quickly OS package maintainers can patch it, build it, test it, rinse, repeat, and finally package it. Building PHP from source on *nix isn't that easy - sometimes needing hackish patches to just get one PHP feature to work as advertised on their OS. And sometimes, getting that just won't happen - like the newer mysqlnd missing from most common \*nix builds, leaving out the availability of a few handy mysqli class methods. Unfortunately, that lag time for \*nix releases can easily hurt WIN in the cross-compatibility area. If you made a PHP project using the most up-to-date PHP version (currently 5.3.8) on WIN, it could easily break if you copy it to a *nix server (usually still ~5.3.4 I believe for most common distros using OS supported repos).
That may be so but this isn't a bug. If there was a language specification then we might be able to call it a bug. But PHP has no official language specification. However we know it's written in C++ and is heavily influenced by it, so we can maybe look to C++ to see what's going on. Traditionally the *new* operator allocates memory for the object and returns a reference to the uninstantiated object. Overload *new* in C++ to see this; you return a pointer to raw memory, not an object. Which is why with the way C++ evaluates expressions, you can't chain from *new*. But you can force evaluation after instantiation with parentheses, e.g. foo* x = (new foo())-&gt;bar(); Unfortunately PHP can't do that either, so you might be able to make the argument that the with-parentheses version is bugged, but again, going back to the fact that there's no spec, you can't really call it a bug.
Can you explain why PHP on WIN is a bad idea?
Right, you can't call it a bug. You could just call it an illogical limitation. 
Nicely informative, thanks for the post! Good to know.
wow, just what we need!
&lt;?= _('oh rly?'); ?&gt;
Very cool!
It's not really that obnoxious. While I agree that there is certainly a more elegant solution, this is a solid framework that with some refactoring can be really lightweight and useful. Personally I like the approach better instead of the default cURL wrappers. It's more verbose and well-defined.
PHP *is* already a templating engine!!
Obviously. But you must find the best balance between ease of developement and performance. Writing things like `&lt;?php echo htmlentities($something, ENT_QUOTES, 'UTF-8'); ?&gt;` each time you want to print a variable is not right (of course I am exaggerating a bit, but you know what I mean). Also, there are other advantages: you can let frontend designers fiddle with your templates without breaking your code (remember what happened to Tumblr some months ago), or if you are providing a blog-like service, you can let users customize their themes safely.
PHP3 was a templating engine, php5.3 is a programming language. Using a separate template engine than php itself has a huge number of benefits- and with modern template engines that compile into native php you end up with a best of both worlds situation.
No one will ever convince me that a templating engine for php is a better idea than using straight php as a templating languate.
* &lt; blitz. TIL nobody knows blitz.
&gt; That may be so but this isn't a bug. If there was a language specification then we might be able to call it a bug. But PHP has no official language specification. If there were a specification, we would be able to say whether the bug was in the specification or in the parser. Since there is no specification, my only option is to to call it a parser bug. I certainly don't think it was intentional. &gt; However we know it's written in C++ and is heavily influenced by it, so we can maybe look to C++ to see what's going on. That might be a little misleading. PHP is written in C and the object system is much closer to Java than C++. &gt; Traditionally the new operator allocates memory for the object and returns a reference to the uninstantiated object. Overload new in C++ to see this; you return a pointer to raw memory, not an object. I think wvenable was talking about the `new` operator (which allocates, initializes and returns a new object); you're talking about what C++ calls `operator new()` (which controls only the first part). &gt;Which is why with the way C++ evaluates expressions, you can't chain from new. But you can force evaluation after instantiation with parentheses, e.g. foo* x = (new foo())-&gt;bar(); The C++ equivalent of Java's `new Foo().bar()` wouldn't be `new Foo()-&gt;bar()` but `Foo().bar()`, which parses perfectly. After using `new` you own the pointer, so dropping it on the floor would be bad form.
&gt; $this-&gt;postQuotes == $value; &gt; &gt; I don't think you're actually updating your local copy there. Oops, you're absolutely right. That's a comparison rather than an assignment, and a legitimate mistake. -- I'll get on that. &gt; Beyond that why are you even checking if they're the same? Are you trying to tell me there's some massive performance gain? No performance gain I guess, but since `CURL::addPostQuote` calls `CURL::setPostQuote`, I figured a simple check would prevent unnecessary updating. Maybe PHP handle's this on a lower level, maybe not. &gt; If this check has any meaning why are you calling setOption regardless? `CURL::setOption` is called because there's no in-built way to append an existing option, this has to be called every time no matter what. Allow me to elaborate. These two examples are essentially the same: $curl = CURL::init("ftp://example.org/") -&gt;setPostQuote(array( "foo", "bar", "baz", "qux" )); $curl = CURL::init("ftp://example.org/") -&gt;addPostQuote("foo") -&gt;addPostQuote("bar") -&gt;addPostQuote("baz") -&gt;addPostQuote("qux"); However, since functional cURL has no form of appending array arguments (in this case CURL_POSTQUOTE) a `setOption` call must be made every time in order to update the curl handler with the new collection of FTP commands. You may be right, in that it's inefficient to compare the existing value before re-assigning it. It's an edge-case scenario, and probably unnecessary, and I'll definitely look into it. Thanks for your feedback!
I know you're a Kohana guy and that's cool, but you can't pick two really obscure methods and paint the whole framework as stupid. Hey, I am a core developer and I've never even seen those. Kohana is great, but you have none of the command line features we have, no migrations, your REST implementation is nowhere near as full and the list goes on. Kohana is awesome too, but it does not do a lot of things that Fuel does.
I would encourage you to either post an issue about things that dont make sense in the documentation repo, or send a pull request with your improvements. The best people to point out flaws in documentation are those who don't fully understand how something works.
thats why you write &lt;?php e( $something ) ?&gt; after you create a view helper function, `e`, that echos an escaped string
what are the benefits?
never heard of it.
&gt; for PHP: Blitz. FTFY
Tried it. No matter the template engine you will name, PHP still does it better and faster. It's not an opinion, it's a fact. If you work with designers that are doing integration, then may be, but they shouldn't do that in the first place, that's what integrator are for.
you did read that blitz is a in C written extension, right? i did benchmarks around 4 years ago. complex spaghetti code vs blitz both with xcache enabled under lighttpd. blitz was faster.
Didn't need to read. Like i said, i contemplated using it and put it on the test on a real life situation, and the slight difference of performance they was with straight PHP on tests, where actually quite significant in production. Try not to pay too much attention to what i say though, i tend to have a very high bias to high traffic/high load setup, where every fraction of execution time matters. Quite honestly, Blitz is pretty much the only one i'd consider seriously if i had to use a template engine.
ran good on &gt;10k/sec and 40-50k at peaks. it's now all replaced with node.js which is faster than php. way faster esp. for the db intensive adserver (clickout/burnout/$cap/impcap/clickcap/rtb) and full path tracking.
In your testing code you are using parameters for both tests.
You have to enable PHP in the Apache configuration. So there literally is setup.
Check out mustache. The goal is logicless templates, not abstracting templating but separating concerns. 
Hey thanks for the encouragement Phil. I'm pretty self-conscious about posting issues, as it's somewhat unclear to me what the assumed level of experience is. Some of the community members appear to be fish in water, whereas I feel like I'm maybe still doggy-paddling. I can't tell if the intent is to convert people who are already familiar with similar frameworks, or to go after people who might have little or no MVC background. I've picked up on some RTFM vibes (understandably), and I really don't want to be "that guy." Therefore, I've tried to avoid spamming the forums with inane questions. That said, I've been keeping notes on things that haven't clicked for me. If, in a month, I still feel like there's a better way to explain something, I will definitely make a pull request or two. Here are a few items off the top of my head: * More advanced routing examples. Ran into some situations where I'm not sure if I should use the routing system or sidestep it. For instance, what if I have a number of optional named parameters, I just end up creating a cascading list of routes, but I feel like there should be some kind of an OR notation. The forum conversations surrounding routes seemed like pulling teeth, so I just assumed not ask. * Fieldsets and Fieldset_Fields were confusing to me the first time. It would be cool to have something in the docs that explains a situation where you'd definitely want to use Fieldset and when you might be better off just avoiding it. Is it *just* for creating and handling validation in an OO way? * When to *set* versus when to *bind* variables for use in a view? I couldn't find that explained anywhere. * Recently ran into some issues with Mongo that might need some further remarks in the documentation (depending on how the community weighs in on it). * The distinction between modules and packages could be made much clearer. Having now written several packages and modules, it's very clear how they are meant to be used. But I remember thinking "wtf! they're saying the same thing!" the first few times I read through the descriptions of each. Thanks again for replying and staying engaged with the community and the project. I know it can't be easy. I'll do what I can to pay it forward.
I don't see what the big deal is. Just go MVC, then PHP Alternative Syntax. Finished.
Which all on its own is a bad idea. Display logic is not a bad thing.
People keep touting the "benefits" of over-engineered template systems, even though there really aren't any. "Trust me there are benefits" is not a good argument.
I code PHP for 5+ years and I have configured apache+php on windows/linux hundreds of times but I am sure I will still have problems with trying to set up IIS+PHP+mod_rewrite. Who the hell uses IIS+PHP? This is retarded...
Read more carefully. This idiot wants his programmers to run PHP on IIS...
you read it again. they both have apache and IIS servers. the so called devs with 12 years don't know both mod_rewrite on apache and web.config on IIS. 
http://alexeyrybak.com/blitz/blitz_en.html#basics-scope $body = &lt;&lt;&lt;BODY {{ BEGIN list }} ================================================== list #{{ \$_num }}, x = {{ \$x }} {{ UNLESS sublist }} empty {{ ELSE }} -------------------------------------------------- {{ BEGIN sublist }} row #{{ \$_num; }} v = {{ \$v }}, x = {{ \$x }} {{ END }} {{ END }} {{ END }} BODY; .. &amp;#3232;\_&amp;#3232; 
it's decent quality content in a very slow subreddit..
i'm not sure what you're referring to. edit: ah, i see it. that was a mistake from correcting formatting when i pastebin'd. the results are correct. i updated the link with the right code.
Have you considered re-writing / porting phc to compile to Java bytecode, rather than to actual machine code? The JVM PHP implementations I've seen all generate Java code rather than actually compiling PHP and there is a real need in that area (I think, anyway).
&gt; Using a separate template engine than php itself has a huge number of benefits No, it doesn't. The "its easier for designers" argument fails because I don't see how is learning templating syntax (whats the plural of syntax?) easier then learning a little bit of PHP (just enough to work with templates, not write full programs). Btw, our designers also hate templating engines and prefer PHP templates (even though they don't know much PHP).
Need to escape that asterisk at the start, or it'll start bulleted list: \\* &lt; blitz.
Yea, lets learn **another** language to get questionable benefit :/
First example in the [manual](http://mustache.github.com/mustache.5.html) describes a conditional statement and then says "We call it "logic-less" because there are no if statements, else clauses, or for loops". Fail.
That's like asking which political party you want to vote for (in a non US country where there's more than 2...) There has been a [ton](http://www.reddit.com/r/PHP/comments/idlxk/best_php_framework/) of [discussion](http://www.reddit.com/r/PHP/comments/ista4/good_php_framework_for_making_a_web_app/) on this in the past but apparently people are never satisfied with it. Honestly, Reddit is not a good site for a discussion like this any way. The question is repeated so often that the only people who answer are either extreme fans or new people. I know I personally am pretty tired of the groundhog day disease that Reddit apparently suffers from when it comes to frameworks.
Zend because I like it and have a bunch of experience. There probably isn't much discussion about the newer frameworks because, well, they're new.
exactly.. it reminds me of COBOL. wtf?
Zend Framework
oh, sorry. If in 12 years You more or less don't know how to install webserver, something is wrong with You. In 1999 PHP was very young and there weren't much PHP programmers at all...
Not this discussion again. It's going to boil down to people telling you to use the framework they use. Everyone likes to think they're right (even me) so recommending something they don't use would be like telling themselves they're morons. Here's a quick run down in alphabetical order * CodeIgniter - Out of date and lacks features. See FuelPHP or Kohana * FuelPHP - A Kohana fork which has a strong community of former CodeIgniter developers. Includes a lot of features out of the box * Kohana - Lightweight HMVC (internal requests) framework. Doesn't have all the features FuelPHP does in the core, but can be added as modules. * Symfony2 - Lots of features, very good documentation and well designed. * Zend - Less of a framework and more a library of classes. Well tested and widely used. PS: There is now a sub-reddit called [/r/frameworks](http://www.reddit.com/r/frameworks); It's only a few days old and would be more suitable. They don't have a lot of readers so I'm not sure of the response you'd get. 
I would use Symfony2. It has all that latest and greatest new PHP object oriented stuff and there is rumor that the next version of Drupal will be developed using it as well, which would give it a huge push in popularity because Drupal developers would have to learn it as well. As a web developer, I would base my decision not on what was necessarily the BEST framework (Although I think Symfony looks good), but what is probably going to be the most in-demand moving forward. However, for any company hiring, mostly they ask if you have any framework experience and you just need to learn the specifics of the one they choose to use. I know Zend gets a lot of play and there are certifications, but I have very rarely come across job ads asking for people who know it. 
And you've laid out the reason why I asked this in the first place. I did my best to elucidate the requirement for justification, but as some of the comments already show, this thread might just wind up being a poll for what people already use. I've edited the post now to be more clear. I'm hoping for some rational discussion where people actively weight the pros and cons of each framework. EDIT: &gt; Everyone likes to think they're right (even me) so recommending something they don't use would be like telling themselves they're morons. I don't think that this is necessarily axiomatic. I've certainly made bad decisions (and then realized they were bad long after it was too late to change) before and recognized them. I've also had to work inside frameworks that I wouldn't choose to use, but I wasn't given the choice.
Not me, I never learned COBOL :D But every templating engine also has (at least slightly) different syntax.
&gt; That's like asking which political party you want to vote for (in a non US country where there's more than 2...) People don't usually (here in America at least) choose their political parties rationally. Anyone choosing a framework with anything BUT rational arguments is a bad developer. 
Personally I would use kohana 3, but that's just because I'm most familiar with the kohana way of doing things today. In the current market though, zend framework pretty much dominates everything ;) Zend has done great marketing it to companies, and developers have been quick to adopt. Personally I'm actually sad that I did so many codeigniter and kohana projects and haven't really learned ZF yet. At least here in NL and probably NW europe, perhaps with the exception of france (hi symfony), zend framework is the key technology to have on your CV. It's getting into the silly region where it doesn't even matter what is better or more suitable, companies simply ask for zend framework because it has become an industry standard.
I use Cibonfire for my latest project. It is Codeigniter with additional features to faster start developing. It's something between framework and CMS.
That would be fuelphp. And for JS, I might go for batman.js.
People always make decisions rationally, they just don't make decisions based on what other people find rationally. Most of the frameworks do the exact same thing, they just do it in different ways and which way you prefer is largely up to what you've previously been exposed to. A lot of people would say developers who code in PHP are bad developers because surely no one rational would ever code in PHP, I often see the same kind of argument used for and against frameworks. Stuff like "bloated", "lean", "agile" etc are all arguments used based largely on either stylistic preference or just straight propaganda. And with all due respect to the good developers who hang out at Reddit, the far majority seems to be (based solely on personal observation) to be rather new to the practice and anything but capable of knowing what makes a framework good. Coupled in with a weak basis for argumentation (not just a CRUD web app) I don't think there'll be any really good argumentation here. But hey, I'd love to be proven wrong. Oh and I did specifically say non US, here in Denmark where we are currently undergoing an election there's quite a lot of passionate people using a whole lot of pathos argumentation. :/
Symfony2, all in. Awesome MVC framework. Designed to be flexible and powerful. Only drawback: Way too many ways of doing the same thing
Yii I don't use it at the moment, but it looks more modern than CodeIgniter and more OOP, without forcing me to use ORM and templates (both of which I hate).
That is awful.
No love for CakePHP or Lithium?
I hear Lithium is very good, but not tried it myself.
&gt; Anyone choosing a framework with anything BUT rational arguments is a bad developer. Most of the time, especially in the Ruby and PHP realm, people just pick what's popular.
not saying it is a bad thing. Not using MVC isn't a bad thing, but using MVC has benefits over not using it. Mustache is just a way to force you into a design pattern. If you don't prefer the design pattern then you wouldn't want to use mustache anyway.
I had a friend try and do some stuff with Yii. It is supposedly the fastest framework in terms of request-per-minute but it is not friendly to use. The code is not intuitive in the least bit and most articles seem to highlight the very steep learning curve associated with Yii. Not only that, but Yii (pronounced Yee) is annoying to say.
It isn't a failure, it's intended that way. Kohana Famework has an awesome implementation of Mustache called [Kostache](https://github.com/zombor/KOstache). You'll see there's a PHP class behind each view, and any actual logic goes there. It isn't meant to be the fastest solution but to simply implement a design pattern. I only brought it up because the goal of Mustache isn't creating a templating language in PHP but a library that implements a design pattern. Not everyone will agree with that design pattern just like not everyone agrees MVC is the best way. However, my point was made, that there is need for a template engine in PHP if it's goal isn't just to be a template engine.
Cake, because I already know it.
I compared FuelPHP to Cake recently, and by that comparison it has very little features out of the box. 
Nintendo seem to have sold enough units based on the same scheme :)
Yes, I believe you were lied to. I find it impossible that someone has coded PHP for 12 years and NEVER used mod_rewrite (in some capacity) or configured LAMP as well as WAMP servers. I could buy it from someone coding PHP for 4 or 5 years, but NOT 12. Oh, and I see many responses about testing developers. I have hired many great developers over the years and have NEVER "tested" a developer. (But have asked a few developers to build a sample user tracking application.) However, I have let a couple of developers go when they could not live up to their claims. I have usually been able to pick out the frauds through conversation during the interview.
You are on the right track. Build a piece at a time, and grow the application little by little while also trying to plan some parts of your next phases so you do not trip over past bad ideas. Sounds like one thing you will spend most of your planning stage on is a "tagging" system that allows your data to be thoroughly labelled. (This could be as simple as a text field in resource table with comma separated values derived from the tags table, or a resource table, a tags table, and a link table that allow you to link item #1 from resource to item #200 from tags.) I also would not recommend doing a prototype first, (because you are going to have LOTS of trial and error as you refactor at each phase) but instead use an Agile method of development where you do the work in time blocks. Then if you don't like the block you can just trash it without huge losses. Also, make sure to use some sort of version control. Subversion or GIT are popular types, while subversion has the smallest learning curve. This will enable you to roll back to previous versions if needed.
I can vote for symfony too. Not too high level to get in the way, yet abstracted enough to actually make things easier. 
Giving an example of a conditional statement, and saying "we dont use conditional statements" is a fail. or, more precisely a contradiction.
That's the problem with choosing without working first. To be sure Yii is the best I'd have to finish at least one project with Yii. At the moment, I had a chance to use (in a real world project) only CodeIgniter. I was pushing for Yii, but my coworkers preferred CI due to its simplicity. 
I work with CI 2.0 exclusively these days, purely because i dont really have the time to invest in learning a new framework, i however have never really had any 'serious' issues with it, whats the problem?
it isn't as much a conditional as a basic building block. say you have an array of key/values, you would operate it like so: {{#array}} {{some_key}} {{some_other_key}} {{/array}} say you had a multi-demensional array, array(array('key'=&gt;'value'),array('key'=&gt;'value2')); You would use the same section piece for that like: {{#array}} {{key}}\n {{/array}} and it would print: value value2 Say you had a boolean or something that isn't a null value, you can: {{#some_var}} this var isn't false or null! {{/some_var}} I think calling it a conditional isn't a fair statement. You can't add any sort of logic to it, you simply check against it, and based on what it is, something happens. 
I think it's funny a bunch of people here have gotten downvotes from others, this isn't a popularity contest. But that said, Even with my own name in the ring, I really want to add that Colonel-Rosa is an awesome guy. I've known him for quite some time and if you were to pick only one person as a mod, he should be it. He's always a great help around the Kohana community and for sure would be a great help around here.
&gt; I think calling it a conditional isn't a fair statement. Why? Just because its simpler (and much less powerful), doesn't mean your first example is not a replacement for "foreach", and your second example for "if".
node.js is server side javascript. It is also designed to handle real time communication between the browser and server very well, via the Socket.IO library. I've built PHP sites and utilized Node.js and Socket.IO before as php isn't capable of real time communication like that.
your right, it replaces foreach and if. But that doesn't make it a true conditional. a true conditional would allow you to say "If _blank_ is _blank_ to _blank_" like "if $var is equal to 1" or "if $x is not equal to 'something'". This is more of a "do something with $x". now "do something with $x" can mean "if $x exists" or "loop through $x" but again, those don't really qualify as a true conditional, because you'll never be able to write in mustache {{#some_var == 'something'}}
You forgot the people who use their own frameworks because they know how they work and can adapt better for specific implementations.
In my opinion CI fails because they have yet to fully adopt php5. Their latest release: 2.0 they did drop php4 support(which has only been end of lifed now for over 4 years), however they didn't really embrace what PHP 5 has to offer. They still expect you to use $this-&gt;load from a controller, rather then offer an autoloader. they dont utilize any of the SPL library stuff, any public/protected/private variable stuff in classes, no interfaces or other wonderful features added in php5. In short: Code Igniter is outdated, because they have yet to jump on the php 5 bandwagon, every other framework mentioned above has done so, and most have gone through full rewrites since jumping on the php5 bandwagon, which can tell you that there's zero excuse for Ellis labs taking so long to update code igniter. You will find, with whatever framework you chose, the learning curve isn't as bad as you think. My framework of choice had recently(like last year or two) gone through a full rewrite that changed everything about the framework, it was like learning a new one all over again. But at the same time, it isn't as bad as you think, you pick stuff up quickly and find you're way better off with the new framework then you ever were with the older one.
I did the same thing and came to the same conclusion.
Personally, probably CodeIgniter, but that's solely because it's the only PHP framework I'm familiar with. I'd like to give Fuel or Symfony a shot at some point, and I'm sure I'll be forced to take a stab at Zend simply because it's the "INDUSTRY STANDARD." *makes jerkoff motion*
The mods should just remove this post entirely. The framework debate is old and overplayed.
This is going to get downvoted, but here goes anyway. You said that you need something more than a CRUD, and I feel as if frameworks are pretty much just good for CRUDs. The site that I develop and work on has so much ajax, tabs, different ways to load things, complex sql, multiple database connections, that doing it with a framework would give me a headache. Not to mention that it runs on 8 web servers alone for PHP only that I can't imagine the overhead with a framework, it would probably need double that. People always say that it is quicker to use a framework, I totally disagree. It took me an hour to do the routing for our site. The database class took about an hour as well, with the exception of changes (IN queries function, query debugging, a match against helper, which has since changed to another library for searching). Others might complain that a lot of it is procedural and everything isn't object oriented. Sorry, but it works well and it is fast. I don't need to load hundreds of classes or functions or files every time I load a page. And the best part is I know the ins and outs of it and can make it do whatever I want.
thats one way. you can just build normal html tpl files.
Thats fair enough nodren and i definitely agree on your lack of genuine PHP5 functionality in Codeigniter, i was pushed into codeigniter through work, they used it and i just had to adopt it, i quite like its simplicity if im honest. its just a shame however that due to the nature of the web-sites ive currently got running on codeigniter (they're pretty large - ecommerce frameworks, analysis tools) porting to another framework, without a massive amount of work, is just unfeasable, without much gain. I would imagine there are others here i would imagine that dont have the time to learn a whole new framework to get a site out. On a side note my first 'step' into the wonderful world of frameworks was Zend, back when it was just released, and it instantly put me off, then again their was a lot of problems back then, maybe its worth reinvestigating.... Two years ago i gawped at the thought of using a framework, now i wouldnt do (pretty much) anything without one. - edit: because i thought only noobs did that :(
Nice summary. Just like to add: if you plan on having a long lifespan for your application, consider frameworks that take advantage of recent PHP features (like namespaces). Symfony2 being your best bet right know afaik. As it looks now, migrating to the next generation of frameworks will be hard of not impossible. I'm a Zend Framework user right now, but I would seriously consider switching to Symfony2 for a major new project as long as ZF2 is still nowhere near completion.
Zend is a monster, I personally see it as more a collection of useful libraries then a framework to facilitate fast and clean development. When I suggest trying a new framework, i would never imply rewriting something for the sake of using a new framework. I wouldn't do that and I think it's unreasonable to expect anyone else to do it too. Honestly, New frameworks are great when a rewrite is needed for other reasons, or when starting a new project.
Many people miss the obvious option — **no framework at all**. Writing just what you need yourself is a good option, for small projects and when you need to keep overhead down. You can still use a lot of the philosophies of frameworks, like code and presentation seperation. It can be as primitive as putting a block of code on top of your html and keeping all but the simplest PHP code out of the actual html below. Put code used repeatedly into functions that you include on each page that needs them, and voila, you have your own minimalistic and highly customized framework.
Codeigniter. I love it. Great documentation. Great community; small, firm and strong. 
After trying Typo waaay back in the day I must admit the thought of using an application framework created by the same folks makes me a little apprehensive. It could well have changed but Typo3 used to have a learning curve and a half to accompany its massive, sprawling self.
I nominate StoneCypher.
Either FuelPHP or Symfony 2, depending on the actual size of the project.
You're missing a bracket? 
No, that was just a mistype here.
What happens when you echo "$_GET['name']"?
Lithium, IMO, is too young. No solid docs yet
Why not open source it now so people can follow your blog AND the code as you work on it?
You obviously don't understand free software. The benefit is not that people give you feedback or improvements, those are merely side effects. The true benefit is the freedom given to you, your users, and other developers. Read more at http://www.gnu.org/philosophy/why-free.html Also, it should be free software, [not open source](http://www.gnu.org/philosophy/open-source-misses-the-point.html).
Now he may or may not realize the distinction between free software and open source, but you assuming he actually means free software is kind meh.
I don't assume that, but he *should* prefer free software because of its many benefits. That was the point of my comment.
By releasing your code when you are done with the build, you are at risk of refactoring the whole code base if you have missed something. Open source it from day 1, and make it free to get users and/or developers involved. Otherwise no one is going to offer any feedback if they can't use it.
Holy arrogance, Batman. The OP never said anything about the merits of free software vs open source software, and the two concepts are most certainly not one in the same. I don't even really know how or why you'd make the leap from open source to free software given this post or his blog article. Open source is exactly what the name implies: open. Making any statements beyond that is presumptuous at best. People get into open source for all sorts of reasons, and there is absolutely no person on this earth (including your Lord Stallman) with the authority to decree what intentions are right or wrong. The "true" benefit of contributing to open source is whatever benefit you get out of it. For some, it is the gratification of helping the community. For others, it is the freedom it provides all parties involved. And still, for others, it is the availability of feedback to make improvements from which themselves and the whole community can benefit. It "should" be whatever he wants it to be, and in this case he prefers that it is both "open" and "free".
This is really important. The feedback you may get when you finally release the code may end up meaning significantly more work for you in the longterm than if you had simply open sourced it from the start. It is generally easier to refactor code as it is being developed than it is after it is released.
Holy arrogance yourself, Robin. Free software is one thing that cannot be bad. So, there is no reason for me to assume he doesn't mean that--especially considering the growing number of people who mistake open source software for free software. And I agree that open source is only open, which is why OP shouldn't use the term. Free software connotes more clearly the wishes of the author, and *this* author's wishes (that he receive feedback and improvements) require software freedom, else people cannot possibly contribute to his software at all.
what he should and shouldn't prefer is his own (god damn) business.
I agree! But that doesn't mean I can't try to persuade him. Just like I can't stop you from trying to persuade me that I should just shut up and let others have their freedoms attacked.