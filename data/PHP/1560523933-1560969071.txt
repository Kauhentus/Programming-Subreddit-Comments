www.aaadesignagency.com ... it's good for SEO... no. 1 on search results
5cm erected ? Damn man your girl will leave u without explanations.
If those people have questions, yes that would be expected from them. One skim-through of the table of contents would've been enough.
Feature parity with other languages tends to make learning new ones easier, not harder. This, like many other features, is something you ignore most of the time until you *really* want it. Granted most people aren’t idiots like me manually implementing binary protocols for fun, but even for normal people this can come in handy occasionally.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This seems really really really odd. I would never want to use this because it seems to reduce clarity even while improving readability. So, now, I can easily tell the digits are separated by something that initially makes no sense.
Nah we good This subreddit is for talking specifically about the programming language, not shilling
Jealous? What would there be to be jealous of? The majority of spam and attacks come from those two networks. Those two networks do nothing to address reports about malicious activity on their networks. The rest of the community actually cares about what happens on their networks and their reputations. And they take action. Amazon or Rackspace for example will issue tickets and they will respond. As do most of us. I am sorry that you are no a shitty network that is run by incompetent people. But that's the fact. You're going to have to get over that.
Nah. Just use reload extension on your browser. Atleast for now
It's will create a `ParseError` in all PHP versions (4.3.2-7.4.0alpha) Good question, I should have added the 3v4l I made to verify that (fixed now).
the amount of market share they have? &amp;#x200B; you're being dishonest. they do address reports about malicious activity. they also requite i.d. to get an account in the first place (something they are not required to do.) &amp;#x200B; you don't have to apologize. that shitty network run by incompetent people has my servers running with multiple year uptimes. my VPN has been up for two years with a 100% uptime recorded by uptime robot. there is nothing for me to get over. i have no problem with those other companies you mentioned or whatever company you work for. this is just my personal experience.
It's available in a lot of languages, although the ones that I saw use a single quote, which is clearer. I think that they used an underscore because of other limitations.
Stopped as you mentioned vim. There you got your problem. But nice that you find out about software outside of the terminal. It has not to be phpstorm but something... or at least some plugins? lint? other php-cs? You came straight out of the black and white era... half way through 2019
There was a js thread last week :X
Thanks, I hate it.
This is actually what i need now. Thanks. I had a moment of real success today as i switched the nginx of my stacks and saw that nice blue-green deployment working beautifully. I did not test it with the php-fpm container. Thanks. I just blue-green deployed all the services now. What a coincidence :)
Just take your lastname with "IT Services" and go with it. You can change the name if you get one. You have to get to your own name. Thats something very important :)
Author here. That is a correct reading. I'm curious as to what advantages you've found over annotations. I'm normally in the same camp that Annotations, which amount to comments, shouldn't be driving code -- but I find the verbosity of XML a difficult pill to swallow. I've also found in the short time switching to them that I do actually prefer not to have to go to two separate places. Previously with YML I would generate base models based on the class meta data pulled from the entity configurations -- in some ways this was actually bad and moving to annotations has encouraged me not to simply make accessors for every piece of data, and think about the domain model more since I'm seeing how my domain model relates to my data model in one place. Beyond that, I do find it a bit curious that people seem to be focusing on this (as opposed to the actual solution presented in the article).
I think those that don't think this is a good idea haven't worked with large numbers on a large scale before. I really like this. I have had some projects before that had quite a few large, static numbers and this would have helped readability greatly. `if ($my_number &gt; 1_456_323_123)` is so much easier to read at glance than: `if ($my_number &gt; 1456323123)` even simple numbers like 10000000 Is that a billion? 10 billion? I would find myself either keeping a duplicate in the comments with commas (which then makes me update twice) or I would actually have to put commas into the number just to read it, then pull them back out.
This will refresh the document every 30s: &lt;head&gt; &lt;meta http-equiv="refresh" content="30"&gt; &lt;/head&gt;
``` $tenBillion = 10000000; if ($my_number &gt; $tenBillion) { ``` Or just use constants for such things.
Also I just read through a few of your historical comments and you're a snobby, gatekeeping cunt on almost ever single one of them. How about being helpful and forking the code as I suggested instead of being an insufferable teat? Until you do so and make yourself useful, please feel free to eat a dick you self satisfied prat.
❤️
You cannot.
I've done a lot of PHP and Ruby, and this is something I've always liked in Ruby, even though I rarely get to use it. It is nice to have parity in PHP finally.
[removed]
that's not a constant, this is: &gt;const TEN\_BILLION = 10000000;
&gt;People will still have a learning curve on it oh god, this thing takes like 5 seconds to understand
Your sarcasm is unwarranted.
No they DON'T address reports. I know this for fact as I have submitted tons of them. And those same ones reported continue to operate. I am sorry if you want to be in denial about it. There are plenty of other networks out there that can both keep services running AND address malicious activity from their users. OVH and Digital Ocean are not in that class. You just sound like you are mad that someone points shitty behavior by a shitty network.
\`\`\` const TWO\_BILLION\_FIVE\_HUNDRED\_AND\_ONE\_MILLION\_TWO\_HUNDRED\_AND\_SIX\_THOUSAND\_SIX\_HUNDRED\_AND\_EIGHTY\_FOUR = 2501206684; \`\`\`
&gt; Paamayim Nekudotayim Double colon, not semi-colon.
Spaces&gt;Tab
Thank you, I got it confused.
That's why I write the word "or"...
Or just use this helpful new feature in 7.4 that introduces numeric separators, so you don't have to do silly things like: const TEN_BILLION = 10000000; const USEFUL_NAME = TEN_BILLION; And of course, this immediately breaks down when your number isn't nice and round: const EIGHTEEN_BILLION_ONE_HUNDRED_AND_FOURTEEN_MILLION_FIVE_HUN...
Java, Python, Ruby and Rust all use underscores.
At least TypeScript, Python, Ruby, Java and Rust all use an underscore, languages that it's probably more likely a PHP programmer will be familiar with.
I was not as open to this, until last week. I was working with a codebase the used large numbers, and this would have made it much more readable.
You're looking for /r/phphelp, but make sure to post a lot more information and any example code that can reproduce your problem.
You're missing the point. If you need to use such large numbers hard-coded in your code then there is a reason for that. Those numbers have a meaning. You can name them accordingly. Instead of using `384_400 it would be a constant `DISTANCE_EARTH_TO_MOON` which is set to `384400`. Using this constant in your code makes it easier to read and comprehend.
Fair point. My case was very specific, it's true.
Nice. Thats perfect to integrate into wordpress.
No fork could help at a complete rewrite.
It was indeed to integrate into a WooCommerce site
Of course, that's what I was implying by `USEFUL_NAME`, however there are always going to be cases where knowing what the value represents while also knowing what the value is is useful.
Mm besides using vanilla js and changing the initial 'or' into an array with an includes I don't think it requires a complete rewrite.
Well, I'll be damned. Learned something.
you've given me zero facts and tons of opinion. i have no reason to care about your opinion. come back with some facts and i could actually get something out of this interaction. not one thing you have said makes me want to switch providers. obviously I'm happy with them otherwise i wouldn't pay every month. give me a reason to switch.
&gt; Other CI services like Travis or Circle CI are much better suited for this task. These services give you richer notifications and better performance **features like parallelism** and dependency caching out of the box. But from what I can see can run parallel actions in Github? Or is that Travis and Circle CI have better performance? If so, how is it better?
In my defence I switched from Vim to PhpStorm several years ago, at a previous job. And Vim has colours.
I don't think you own this code, I guess you could say it's Unowned
Lol nice find it is indeed
**Below is the code:** **My database name is: SBio Table name: users Column titles: name and passwd** **I am getting redirected to the same login page once I enter in my username and password on the login page.**
&lt;!doctype&gt; &amp;#x200B; &lt;html&gt; &amp;#x200B; &lt;head&gt; &lt;title&gt;User Registration&lt;/title&gt;&gt; &amp;#x200B; &lt;/head&gt; &amp;#x200B; &lt;body&gt; &amp;#x200B; &lt;h1&gt;User Registration&lt;/h1&gt; &amp;#x200B; &lt;form action="" method="post"&gt; &amp;#x200B; &lt;label&gt;Username: &lt;/label&gt;&lt;input type="text" name="user"&gt;&lt;br/&gt;&lt;br/&gt; &lt;label&gt;Password: &lt;/label&gt;&lt;input type="password" name="pass"&gt;&lt;br/&gt;&lt;br/&gt; &lt;input type="submit" name="Register" name="submit"&gt;&lt;br/&gt;&lt;br/&gt; &amp;#x200B; &lt;!--- Login Link --&gt; &amp;#x200B; &lt;a href="index.php"&gt;Login&lt;/a&gt; &amp;#x200B; &lt;/form&gt; &amp;#x200B; &lt;?php &amp;#x200B; if(isset($\_POST\["submit"\])) { if (!empty($\_POST\['name'\]) &amp;&amp; !empty ($\_POST\['passwd'\])) { $user = $\_POST\['name'\]; $pass = $\_POST\['passwd'\]; $conn = new mysqli('localhost', 'thanos', '\\$piderman2') or die (mysql\_error()); //DB Connection // $db = mysqli\_select\_db($conn, 'SBio') or die ("DB Error"): //Select DB from databse // &amp;#x200B; //Selecting Database// &amp;#x200B; $query = mysqli\_query ($conn, "SELECT \* FROM users WHERE user='".$user."'"); $numrows = mysqli\_num\_rows($query); if($numrows ==0) &amp;#x200B; { //Insert to Mysqli Query $sql = "INSERT INTO users(name, passwd) values ('$user', '$pass')"; $result = mysqli\_query($conn, $sql);
[https://codeshare.io/UbKVU](https://codeshare.io/UbKVU)
More downvote farming: if someone does this in a code example or test, it is more likely they will not be hired. You like your toys, but you do not understand what they convey as far as attitude and fitness for team roles.
I'm assuming the database contains some type of flag to indicate the type of user? Once login is confirmed simply redirect each user type based on that flag.
What's your reasoning behind this? For me it just shows that the applicant knows the details of the language?
Why not use the \`phpunit/phpunit\` image? &amp;#x200B; [https://hub.docker.com/r/phpunit/phpunit](https://hub.docker.com/r/phpunit/phpunit)
Vim with no plugins as your main editor is masochistic, totally agreed. However with the proper setup it can be a very good alternative to other text editors. That said, nothing beats an IDE like PHPStorm for languages like PHP imo. I can write statically typed languages pretty easily in a good text editor. But please give me an IDE to help with typing in dynamic languages/ones that straight up lack typing. Otherwise I'm stuck debugging simple mistakes I made early on that can be far from obvious. Hate to be that guy but I sometimes wish I could write everything in Rust for the type system/error messages.
This is not the subreddit you're looking for... in fact I'm not even sure PHP is the actual language you're looking for.
We have a custom migration system. XML is a bit easier to load in an parse. Yeah - XML in general is a bit annoying, but it works for us. I think there was a use case where YAML doesn't support one feature that you could do in the XML mapping (IIRC - this was about &gt;6 months ago). Presentation is key. If you don't like how something looks or feels, people will reject it, even if it maybe "better". We have multiple entity managers and a ton of DBs (a lot of them are the same structure, but are for different customers) in our project.
&gt; Hate to be that guy but I sometimes wish I could write everything in Rust :) Speaking of masochistic...
I am not in any way obligated to give you any facts. WTF do you want? Am I supposed to post log files and mail headers in order to make a post on here or something? Go the fuck away if you don't like it. I will sit here and post my experiences as much as I want to without caring about how much an asshole like you doesn't like it. I am not here to make you switch providers you self absorbed prick. I am sharing my experiences that happened. I could care less if you are happy with them or not. I could care less who you use. THIS IS NOT ABOUT YOU. Please get over yourself. You are free to use anyone you want including a shitty network who is irresponsible and harbors malicious users. You are free to use networks that are widely banned by many other networks. I could care less. Now please get over your own ego. I will be happy to do this all day. If it bugs you that I point out they are a shitty network, then I will just start making even more comments about how shitty they are just because you feel the need to go on and on about not changing. No one here cares. Not 1 bit. If it makes you feel better, look up stretchoid. An organization on Digital Ocean that claimed to be mapping out the internet, but provides zero contact information. Only a delisting tool which they ignore while they SYN flood networks. But I am not going to go digging through log files to post on here just because some obnoxious asshat seems to demand it.
haha, figured as much. thanks for the info.
I concur with Eloquent. Eloquent works really fine for simple crud but it falls apart with something more complex. I prefer to use raw query or query builder instead of ORM.
And that's exactly the response I expected to a request for what kind of "facts" you would expect.
The first time I saw this name, I got scared.
SEO strategy. What is your niche? If you don't have a niche then good luck trying to compete with the big guys. Now, let's say you have a niche (that it's different to have a field, a field is so generalist), then you could pick a name related with this niche and the field. &amp;#x200B; Now, let's say you have the name. Is the .com available? if no, then it's back to the drawing board.
tsk tsk.
PHPStorm changed all the space of a project with tabs and I got a lot of complaints about PSR-2.
I mean.... yeah, I kind of do. It's not that hard of a read. People shouldn't be commenting on RFCs if they're too lazy to get past the title.
i thought we were going to have a technical discussion. i'm not interested in your emotional outbursts.
I still wonder why it would throw an error though. Digit grouping can be different than only in threes, look up a crore, it's represented as 1,00,00,000. A lakh is 1,00,000. The 3v4 threw errors with their valid statements as well though so idk.
The feature isn't implemented in 7.4.0 alpha 1. It will be in alpha 2, released in a couple weeks.
Haha no doubt. I just feel so much more comfortable with my code knowing how many safety measures there are by design compared to something like PHP, or even Java which is probably my most used language. Learning Rust was like learning Assembly for me, it really gave me a new way of looking at how I write code and had changed my style for the better.
Yes, this platform has a functionality to manage the modules via composer. Composer is already integrated to Apache and NGINX servers out-of-box [https://docs.jelastic.com/release-notes-54#php-composer](https://docs.jelastic.com/release-notes-54#php-composer)
You sure that's the right link to your php codebase?
For balance, if a candidate showed such distain for a basic language feature intended to improve code readability in an interview, I probably wouldn't hire them. It speaks to a poor attitude towards pragmatism and a very rigid approach to development. I am fascinated to know why you seem to have such a strong reaction to numeric separators, a feature found in many languages and useful for code comprehension in number-heavy code, and why you think it's an indicator of unfitness for team roles?
I am not interested in any of your bullshit either that you have been spewing. Are you going to provide an example of what technical nonsense you demand? Not that I am obligated, but I am really interested in what exactly you are expecting here. If you're going to make these demands, it's on you to be more specific about your demands.
Uh huh. You're going to malign what you think I mean and then ask what I mean. I'm not interested. Just down vote and move on.
It is a Web development company
I have managed a very large number of developers. When they show an obsession with syntactic sugar, they are typically pedantic, arrogant, and useless unless you let them have everything their way. This feature is exactly the type of canary in the coal mine that I love. It shows me what problems I will have with a developer trying to use every single third party library he heard about one time in a chat, stalling projects and taking extra time to be fancy and explain to everyone how clever he is.
&gt; The DDD community advocates for unambiguous language. And yet even our own terms are heavily overloaded. &gt; These terms don't originate from within the DDD community so that's not surprising. &gt; DDD is like an abstract image, anyone who looks at it can interpret &gt; their own things into it. Each person will always come to a different &gt; result. Are you sure you read the Blue book? Because Evans spend a lot of time making it very clear what DDD is and isn't.
how is your network technically superior to ovh's network?
Also, please use **submit a new text post** instead of stuff your question in the subject. If the shitty new reddit design doesn't allow it, you can use old.reddit.com.
Probably the worst idea ever ! Why? Seriously !!!!
You should ask them how familiar they are with your tech stack / tools and maybe ask for a few examples of prior work. You can expect them to know anything from oop to frameworks and workflow. Some might have production level experience. It's your decision on if you want to hire them based on current skill level or investing in their growth / culture fit. Having said that, I'm looking for a junior PHP role and you should totally hire me!
For juniors, basic coding skills and eagerness to learn is key (and you need to be willing to mentor them, not set them wild and hope for the best). Don’t expect specific frameworks or tools, for the most part, and for the love of all things holy don’t make it a trivia contest. Basic OOP, basic MVC, and the ability to google stuff they don’t know - make sure you’re clear that they’re allowed to do that during the interview and it’s not the equivalent of a vocabulary test. Some SQL and/or JS depending on the role. Without knowing more about your company or the role I can’t offer much more, but hopefully that’s a somewhat useful starting point.
What is with you and this obsession with downvotes?
It's not an obsession, it's a prediction. This is r/php, actual field opinions are downvoted, junior dev fantasies address upvoted. It's a joke sub.
If all you care about is type safety, there are less painful languages to use than Rust. And I have PHPStan wired into Vim no problem. Sid the same with Psalm as well, but there’s not much advantage to using both in parallel. If you still prefer an IDE that’s cool too, but if you want real-ish time type checking you can have it. Tragically the LSP tooling in the PHP world is still a bit janky, so the legacy IDEs with years of specialization still have a bit of an edge. That is quickly fading though. And of course how well any of this works is directly dependent on your code quality, since a bunch of “something will return anything” will always devolve into spaghetti.
Here's what I'm noticing about you and the limited interactions we've had: 1. You feel the need to keep pointing out that everyone is downvoting you 2. You feel the need to tell everyone how you are a MANAGER and that you HIRE PEOPLE and that you are SUPER IMPORTANT and your opinions are SUPER EXPERIENCED Have you considered that maybe you're just being a cunt?
I didn't say the words you're putting in my mouth. And yes, I am a cunt. Thank you for noticing. Could you leave me the fuck aline now, other cunt?
Glad we're on the same page. Here's your updoot.
Again, the upvote or downvote count doesn't matter. It is a prediction in a joke sub, don't confuse it for giving a shit. I downvoted my comment to balance you out.
Like how you can do range('A', 'ZZ') to setup most of the excel columns you will ever need?
I will second the coaching part. I've had an intern who was nice, willing to learn, all the good stuff... Yet I'm still, after a few month's, going over his code for kinda basic stuff. My fault entirely fwiw. I've been caught up in the project and didn't take the time to mentor him properly. Please do better than I did.
\#learn to code
I have always mixed it. -&gt;where('u.id = :id') -&gt;orWhere('u.nickname LIKE :nick')
And if they stumble on a basic question but you get the feeling they know it, or are at least familiar with it through their ability to answer other questions keep in mind they are nervous and it's pretty common for anxiety to get to the best of us. Get a good feel for their personality and try to really get to know them and see if they would be a good fit for the team.
&gt; you get the feeling In Soviet Russia, the feeling get **you**! ^(this post was made by a highly intelligent bot using the advanced yakov-smirnoff algorithm... okay, thats not a real algorithm. learn more on my profile.)
To be fair, the number of plugins doesn't really matter, the code quality of those plugins is what matters. [WordPress.com](https://WordPress.com) runs 300+ plugins and they don't seem to be having a problem staying fast.
 [https://www.php.net/manual/en/language.operators.increment.php](https://www.php.net/manual/en/language.operators.increment.php) &amp;#x200B; &gt; PHP follows Perl's convention when dealing with arithmetic operations on character variables and not C's. For example, in PHP and Perl *$a = 'Z'; $a++;* turns *$a* into *'AA'*, while in C *a = 'Z'; a++;* turns *a* into *'\['* (ASCII value of *'Z'* is 90, ASCII value of *'\['* is 91). Note that character variables can be incremented but not decremented and even so only plain ASCII alphabets and digits (a-z, A-Z and 0-9) are supported. Incrementing/decrementing other character variables has no effect, the original string is unchanged.
This is not a long or complex RFC. Sorry for gatekeeping, but if you're not up to the task of at least *skimming* it to see if your question has already been answered then I have to wonder how you manage to survive in this profession.
Don't be a #toxicmasculinitydick #sjwforthewin
Hope this help. I remember my interview for a junior PHP dev position. Besides showing them some Laravel projects (Not much, mostly CRUDS), they asked me to write a function that prints the dates in YYYY/MM/DD format between 2 random dates that they could test, and i had half an our. And i did the most importan question that i could ever ask in a interview... "Can i use google? i remember there is a function that check if is a valid date, but i don't remember the name"... and they answer me "Sure, we are not evaluating your knowlodge, we need to see how do you solve a problem". So i google it and solved in less than 10 minutes. I got the job, and from there, it was all learning with the help of some mentors. The other 20 minutes were for asking me some SQL using MySQL data that i had for other projects.
Totally forgot about checking, if phpunit even has an image. (Still new to all this Docker stuff). Thanks for the link!
Yes, GitHub Actions can run in parallel. I mainly use CircleCI at work, and CircleCI also supports parallel jobs on their paid plans. With [Workflows](https://circleci.com/docs/2.0/workflows/) you can also build a massive pipeline on CircleCI and reuse stuff from previous jobs. I guess when you're already using CircleCI and you're on the paid plan, then why not just have everything there? The one feature I really like from Travis CI is matrix. Makes testing an OSS package on different versions super easy. - [Example .travis.yml](https://github.com/stefanzweifel/laravel-stats/blob/master/.travis.yml) - [Example build](https://travis-ci.org/stefanzweifel/laravel-stats/builds/538696279)
Nice
Hey I can get that job too I guess! https://stackoverflow.com/questions/19271381/correctly-determine-if-date-string-is-a-valid-date-in-that-format/19271434
I guess i got lucky :P
Why not use commas? We use commas when writing numbers in real life 1,000,000,000.00
Basic problem solving skills can go a long way. Perhaps ask them: - What problems have you previously faced and what they did to solve it? - What would they typically do if they couldnt find a solution?
I know how to code i was just frustrated and in a hurry man . ass hole
Junior or a beginner? Junior is someone who has at minimum half a year professional working experience. But I guess it's meaning and status it entails has been watered down in recent years. The answer depends on what kind of niche you are going to work. There are plenty of work to be done in rapid development where you need to ship code based on out of the box solutions. These might be more focused on such aspects as if you know specific language, framework, tools. That's your typical web agencies and consultancies. Just be careful not to end up in a code monkey position. &amp;#x200B; And there is product based companies which IT department makes their product which the company itself is selling. These will generally will have custom implementation of everything. Yeah they will still use popular frameworks and libraries. But the absolute bulk of the code is tailor made for their needs. In turn, there is less focus on specific tooling and more on general aspects and capabilities. Frankly, these companies may not even care what language you generally use for coding. As it turns out it's kinda irrelevant. All mainstream languages are very similar anyway. The main criteria seems to be if the applicant understands the problem s/he is solving. Easier said than done. Because this requires general intelligence (one you cannot train for) and familiarity with the language and what's capable with it. To illustrate, a silly example, imagine an exercise, you need to write a function which takes years as an arguments and output number of cows. The problem is this, cow starts having a calf after 4 years of living. Well, instantly, the applicant should understand that this is exponential progression. And instead of writing bunch of \`if\` scripts should implement elegant solution with perhaps a single for each loop. This shows promise that the candidate will be a good student and will grasp the concepts rather quickly. &amp;#x200B; On top of this, understanding design patterns is a plus.
That depends on where in the world you are, some cultures have it swapped (periods as thousand-seperator)
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
And this is how we can begin to civilise those people.
https://www.php.net/manual/en/function.eval.php Note: Because *this is a language construct and not a function*, it cannot be called using variable functions.
It's a language construct not a function
As others have mentioned, \`eval\` is in the same category as \`echo\` as a language construct. So to implement the code you've written, you'll have to wrap it in a function that can be used as a callback: array\_map(function ($a) { eval($a); }, $commands);
Just read [the docs](https://www.php.net/manual/en/function.eval.php): &gt; Note: Because this is a language construct and not a function, it cannot be called using variable functions. If you want to build a language obfuscator, you're going to need to read the docs more often. I suggest you get used to doing that. &gt; One of my main annoyances, is that IF you chose to use eval to hide some code, anyone can simply grep through your source code and can thus easily have a clean look at your original code. There is no way around this. Even compiled code can be decompiled, disassambled, whatever. The only thing you can really do is make it so when you do reconstruct the PHP code, the names are mangled so it's a little harder to figure out what's going on. I should probably mention ioncube here. I'm not completely sure how that works but it is apparently very good at obfuscation. Having said that, I had to deactivate it in our Plesk installation at work because it broke some of our sites. I would finally like to remark that at work, we use Magento and have put in a policy not to use obfuscated third party modules, because if there is an issue, we can't make a workaround for it or report it to the vendor. We have actually stopped using the Bubble modules because of this, the guy's company got bought up and they've started obfuscating their code and now they have lost our business as a direct result. Just saying.
I would ask them if they are able to design a full adder on paper with only Relais :)
Why do you have to use `array_map` when you can just use `foreach`?
Code obfuscation at the PHP level is completely pointless because it's trivial to capture and "decompile" opcodes. Not to mention your code is likely to take a significant performance hit. At the very least you're going to have to use an extension, or more likely engine level code to achieve this with any degree of success. If you want to write code others don't have access to, use a web-based service protected by API keys to serve a core part of the functionality. IonCube do this for their day job and even they can't stop [trivial decoding](https://www.google.com/search?q=ioncube+10+decoder)
I tend to use the image that will be running in production just in case it picks up any surprises.
ioncube goes a step further by using encryption. it needs to be loaded as a php extension so it can decrypt the file before hitting the interpreter
But, do you really need to test everything? No. If a method is simply adding numbers or concatenating strings, it doesn't need testing. Be sensible with unit testing.
Maybe you should outsource recruitment
According to Wikipedia it also converts it to bytecode first. So apparently it's able to decrypt it and then execute the bytecode - it's probably not easy to reverse engineer ioncube encoded PHP code, to say the least. But if the loader can decrypt it, it's still theoretically possible because the loader probably doesn't need an external service or private key to do so.
Yep. Also, php isn't the right language to use for this kind of things...
I am not a DDD expert, but I have read both books (blue &amp; red). I think the blue book explains it quite well and clearly. While reading the red book I had the feeling that I had misunderstood everything I read in the blue book. In a nutshell: The blue book recommends the separation of data from behavior. The red book promotes exactly the opposite and tries to tell us that objects with data and without (business) logic is some kind of an "anti-pattern". I think Mark Seemann can explain it a little better than I can: https://www.youtube.com/watch?time_continue=1994&amp;v=US8QG9I1XW0
I work at a company that is *full* of "senior" ::cough:: developers. There's a guy on my team whom I, naturally, assumed had 3-6 months of coding experience when I got there, especially when he said "I just started 3 months ago." Soon, however, he confronted me, saying, "You know I'm a senior coder, right? I have 15 years experience!" Suffice it to say, everyone around here is like that. The only junior dev, he's the best coder of the lot. NO ONE, not one of the 11 devs who were here when I started 2 months ago, knew what composer was. Had never heard of it, had never used it. The project only had PEAR packages. OK, sure, it's legacy right? The code certainly looked like a recent PHP4 migration. But NO! The CEO, everyone, tells me that the code was first started in just 2014. Anyway, back to Mister Senior from earlier. So yesterday, we were pair programming (read: I was doing his work while he mostly watched) and I said, "We should throw a `RuntimeException` here so that we can *really see* if this edge case happens." So he typed this: throwException('run time'); and he said, "I don't think we have exception support in our version of PHP." when we got a "function not defined" error. "You have never written an exception?" I asked, shocked. "I'm not even sure what an exception is, much less what a (he used air quotes) "run time" exception is." OK, so do you think a person who claims to have 15 years of specifically PHP experience ought to know what an Exception is? Yes or no? I honestly thought every junior with 6+ months would know that... The only junior dev here, he came to me afterwards and asked me why he was making what has to be substantially less money than any of these other guys, when he has never seen any of them, for instance, write an Exception. Iv'e been here 2 months and 15 days and you know what? Out of the 50 PRs I've reviewed since then, I am nearly certain I have never seen "throw new" or "catch" once, outside of my own code and the junior's.
Look, the point of obfuscation is not to "stop" someone from reading my code, but rather make it really hard. Also, you didn't really answer my question.
I missed that.. thanks.
I am looking for a coding partner, who can help me with the server side of a JavaScript game I've been writing, which would, finally, be multiplayer. This game is open source, you can find it in my GitHub repository: [https://github.com/tomaAlex/KillEmAll](https://github.com/tomaAlex/KillEmAll) . You can see a little snippet of the way the game should look like here: [https://tomaalex.github.io/KillEmAll/](https://tomaalex.github.io/KillEmAll/) .
Well, downvotes are very constructive. Especially that in this particular example `array_map` is clearly overkill.
Interesting, I didn't know that. Are there more language constructs that look like a function (())?
Could you explain a bit more in detail what you are expecting ? I might be able to help
Latest master of Psalm should have decent Vim support if you use w0rp/ale - fixed a bunch of bugs and turned on completion
[removed]
[I](https://laravel.com/docs/5.8/dusk) think you can check Laravel Dusk: [https://laravel.com/docs/5.8/dusk](https://laravel.com/docs/5.8/dusk) &amp;#x200B; You can use it to test any project, even if not built with Laravel
Miško Hevery's tech talks for google made a lot of related things to testing click for me: &amp;#x200B; [https://www.youtube.com/playlist?list=PLD0011D00849E1B79](https://www.youtube.com/playlist?list=PLD0011D00849E1B79)
That's some testing, but surely not unit testing ;-)
I’m confused as to what needs to “click”.
Are you planning on doing the server side as PHP? Trying to understand why you'd post this on the PHP subreddit.
There is some great content in these books: [https://grumpy-learning.com/](https://grumpy-learning.com/)
Just google it my dude. https://stackoverflow.com/questions/18144782/performance-of-foreach-array-map-with-lambda-and-array-map-with-static-function https://www.reddit.com/r/PHP/comments/65ihba/re_array_map_vs_foreach/
I didn’t “get” testing until I went through Jeffrey Way’s Laracasts series “Let’s Build A Forum With TDD”.
Begin with step 1.
yea, we have `print`, which can be called with and without the parentheses, some more examples: `list`, `empty`, `isset`
Here is my project \[php-todo-complex\]([https://github.com/ClearedFram3/php-todo-complex](https://github.com/ClearedFram3/php-todo-complex)) &amp;#x200B; It has a login system that uses sessions and saves users and their "to do's" to SQLite. I have started learning about auto loaders, OOP in PHP, and composer. What would a production PHP project look like? Any good examples of solid code? pull requests would be cool too :) &amp;#x200B; I am going to tackle a Medium clone after this, so I want to have my bases covered (for the most part) when I start the bigger project.
Here is my project \[php-todo-complex\]([https://github.com/ClearedFram3/php-todo-complex](https://github.com/ClearedFram3/php-todo-complex)) &amp;#x200B; It has a login system that uses sessions and saves users and their "to do's" to SQLite. I have started learning about auto loaders, OOP in PHP, and composer. What would a production PHP project look like? Any good examples of solid code? pull requests would be cool too :) &amp;#x200B; I am going to tackle a Medium clone after this, so I want to have my bases covered (for the most part) when I start the bigger project.
1) Turn project into advanced PHP project.
Hey check my above comment. Adding text to the body of my post wasn't working, so I turned it into a comment.
Would trying to create the multiplier functionality with PHP not be possible then?
Maybe look at something like symfony and use its features to remake your project.
I'm down, I've been looking for a new project :). If you're still looking send me a PM and I'll show you why you need *me*. 😉
Symfony or Laravel would be great as a start to add more structure to a project. Alternatively, use Composer and components to glue your own framework
Sequel should be called "ride the lightning"
Oh snap, is this guy an unemployed journalist? Yikes, oof, etc!
So it's a stack of WordPress templates. Nice try.
my mistake, sir
If it's multiplayer I would suggest you use websockets via Nodejs. You get closer to realtime events that way since you dont need http headers overhead + you could write it all in Javascript.
Good for you.
That's funny, because I use Neovim and I have syntax highlighting, code linting, excellent code completion, a very powerful fuzzy search, and the same sort of refactoring tools as PHPStorm.
Test driven laravel, ([https://course.testdrivenlaravel.com/](https://course.testdrivenlaravel.com/)) is more than just "unit testing", but it completely make the "click" for me.
There are lots of server-side languages, mayube the question was "why did you choose PHP" ?
&gt; auto loaders, OOP in PHP, and composer Play deep in these for a bit. OOP is one of those conceptual things that you'll achieve understanding in over iterations of practice and experience. Get using composer, and give a read through PHP-FIG's [PSR-1](https://www.php-fig.org/psr/psr-1/), [PSR-2](https://www.php-fig.org/psr/psr-2/), and [PSR-4](https://www.php-fig.org/psr/psr-4/) docs.
I got a master class from Sebastian himself. Not sure any book would have helped me personally.
[London vs. Chicago - Comparative Case Study by Uncle Bob &amp; Sandro.](https://cleancoders.com/episode/comparativeDesign-episode-1/show) After the course, I realized that unit testing is about facilitating your design and helping the structure of your code to be cleaner.
Hi all, &amp;#x200B; A couple of month ago I posted an article here about a new library I've been making: PHPTree. &amp;#x200B; I just released version 2.4.0 with new things, feel free to try it out ! &amp;#x200B; I improved the code coverage, code quality and the mutation score. It's now 100% everywhere \\o/ &amp;#x200B; I also created a small Symfony app to create online trees using Graphviz: [https://phptree.herokuapp.com/](https://phptree.herokuapp.com/)
Mai taining a hige production application and having to make a change to support new funtionality or fix a bug the first few times will make the NEED for it click pretty fast, but actually getting gud... that'll take practice
Its funny thinking about how you installed this and learned all this stuff while i learned real things.
Maybe a little explanation as to why it isn’t clicking would be helpful...
Not a book specifically on TDD, but "The Clean Coder" gives an excellent overview of why it's great in a single chapter
Agreed, though generally the more they have, the more likely it is they have bad ones, just statistically speaking lol
The TDD workflow can feel really weird when you're just starting out. It feels like you need to jump through hoops to get to the good stuff (writing actual code), atleast it was like that for me.
Unit testing != TDD
It didn't click for me until I learned how to use tests as Documentation. See, instead of creating something like `public function testChangeName()`, you should create somethign like `public function testCanUpdateTheUsersName()`. Then when you run `phpunit --testdox` you will get `Can update a user's name`. See the [**Use Cases**](https://github.com/phpexpertsinc/NeverBounce#use-cases) at my [NeverBounce API client](https://github.com/phpexpertsinc/NeverBounce). E.g.: ✔ Will validate a good email [[source](https://github.com/phpexpertsinc/NeverBounce/blob/master/tests/integration/NeverBounceClientTest.php#L39)] ✔ Will validate a catch all email [[source](https://github.com/phpexpertsinc/NeverBounce/blob/master/tests/integration/NeverBounceClientTest.php#L50)] ✔ Will validate an invalid domain email [[source](https://github.com/phpexpertsinc/NeverBounce/blob/master/tests/integration/NeverBounceClientTest.php#L61)] But testing the happy path is only PART of testing. You also need to test all of the obvious and then all of the discoverable *sad paths* and then **create a new test for each bug you discover**. Look at the entire test suite for [**Sad Paths**](https://github.com/phpexpertsinc/SimpleDTO#use-cases) on my [SimpleDTO](https://github.com/phpexpertsinc/SimpleDTO) project: SimpleDTO Sad Paths ✔ Cannot initialize with a nonexisting property ✔ Accessing a nonexisting property throws an error ✔ A DTO must have class property docblocks for each concrete property ✔ Carbon date strings must be parsable dates Each of these are autogenerated by `phpunit --testdox` and the project's build system autoinserts them into the README. Voila! Instant autodocumentation that even highly untechnical business people can read and understand. Take that! Behat! See https://github.com/phpexpertsinc/SimpleDTO/blob/master/tests/SimpleSadPathsTest.php#L58 for how.
Yes. Point being?
1. Namespace your code. 2. Use Composer. 3. Set up PSR-4 autoloading via Composer to autoload your namespaced code. 4. Start pulling in Symfony components into your project to simplify and structure your code. i. Start with the HTTP component. ii. Then pull in a router.
Lots and lots of Not True Developers think that all testing is a waste of time.
Can you go more in depth on namespacing and structure?
nope. just do it a couple of times and refine how you do it each time. take any n-tier / mvc application you have access to without unit tests, and add them. you'll quickly learn where to add them and where not to. what problems you have to solve in mocking and dependency injection to make the testing harness work. you'll do a lot of stuff you don't need to do and have to go back and rework it. do that a couple of times from different starting points and try it on a new system from scratch of the same level of complexity. then, you'll 'get it'.
The trick is to start with functional testing and proceed in a top down fashion. Like, write tests against HTTP endpoints first, check responses under certain conditions and once you see these tests skipping over certain cases that you'd like to check or where covering these from outside-in involves a lot of redundancy, only then you dig deeper and move to unit tests. &amp;#x200B; The reason testing doesn't click for a lot of people is because it is usually taught wrong. Tutorials generally start by showing you how to test single class in isolation which is totally backwards and not at all how people who actually adopt these test-driven methodologies [think about testing](https://vimeo.com/151390908).
Right. Really not sure what your issue is, here. It's quite clear what somebody wants when they say that the concept of unit testing isn't 'clicking' - they specifically asked for a course or content that lays the concept out well. Taking the mick out of them just serves as gatekeeping and rudeness. You say they should have given more. What did you bring to the conversation?
Test Driven Development, by Kent Beck.
**The London school of TDD sucks terrible!** Here's the difference: Say you have the following interface: interface Calculator { public function calculate(string $equation); } **London-style TDD:** 1. Create a mock of the Calculator instance. 2. Ensure that when `$calc-&gt;calculate('7 * 5')` is called that it calls the private method `Calculator::multiply(7, 5)`. 3. You'll need another test for `Calculator::multiply()` that makes sure that it is outputting the right number. Even if it is a private or protected method. **Chicago-style TDD:** 1. Call `$calc-&gt;calc('7 * 5');` 2. Assert that it returns `(float) 35.0`. 3. You really don't care what happens internally. Thus, you can *radically* refactor any/every class that implements `Calculator` and never have to worry about rewriting your tests, as long as they stay true to the same interface and results. Chicago TDD is definitely preferred and best in the PHP world. London TDD is more for languages with stable ABIs where you can compile new code against old libraries and *.o files and still need everything to work. But in PHP, every call is to new opcodes, at least on dev boxes w/o opcaching turned on.
what helped me get on board with testing was adding unit test to some old code that I had and finding a bug in the process that I never knew existed.
PHP in action awoke my interest.
I installed it as and when I needed it rather than bloating my workflow with crap I don't use like PHPStorm does.
Design your methods to do very specific things and unit testing will make sense. You'll soon find that it's a much better approach than var\_dump or print\_r in the browser. It's a lot more work but once you get the hang it of it, hard to go back.
Yes but emacs is a lot better. Think of it and waste your time even more. 2019 is here.
&gt; in a joke sub You're the only joke here, guy. You're acting like an absolute baffoon, with obvious confidence &amp; self-esteem issues. Highly recommend that you get some professional help. I upvoted your comment to balance you out.
Meh, ok then. My self esteem issues can't handle your childish comment, so I'll kill myself.
What makes you think I haven't tried PHPStorm?
$level++
Hello I'm a php developer in a small company. Here you code badly. For now I'm working as a backend and front-end developer. I do everything from html,css and js to the views, controlling and db programming. &amp;#x200B; These days we do everything "spaghetti", we have no doctrictine db layers, or any separation of concerns. Sometimes we even mix db queries with views. I do want to improve our knowledge. But to be honest I don't know where to start. &amp;#x200B; I'm learning deeper about MVC, but I'm seeing around It isn't the best anymore. I'm trying to learn php design patterns but are thousands. I'm looking for frameworks from slim to symfony or even laravel but I don't know if is a going choice to go deep to a framework without know so well this middle steps between pure procedural code till a full stack OOP php. Can some of you guide me through some kind of roadmap or what do you think it was important in your php development careers? Thanks a lot!
phptherightway.com
Are you the only developer in that company? If yes: Good luck. Make a long list of things you things are bad with their code. Order them by importance, then present only the 10 worst points. If they don't listen, cop out ASAP. If they pay half of that (provied you are right) ask them when the other part will done and document that. If you are not the only one: Gather your colleagues and explain your worries. Go to step 1 as soon as you have a consensus.
Ooh, it is "buffoon", just fyi. If you're going to call me stupid, spell the variant you choose correctly, numbnuts.
Basic CRUD, SQL and comfortable with assoc / multidim array and objects.
I don't know why I didn't mention Rust's fantastic borrow checker, which is painful at first but once you get it you feel like you need it. The language isn't suited for a lot of applications, but I wish there were more languages that were designed similarly. I haven't checked out PHPStan, but I want to be clear I'm not dissing Vim at all in the comment above. Rather I just believe for languages like PHP, an IDE suits me a lot better. "Something will return anything" is something I avoid at all costs, but sadly my colleagues don't always have that mindset 😔. PHPStorm becomes invaluable when dealing with those situations.
Definately wasn't a book. When I first read about unit testing, I understood what the people were pushing for, but in hind site I think those people were too zelous in you must have tests for every method. I also had a problem of trying to wrap my head on how to apply it to to more advanced things I was doing, like real time server communication, database communications and how to mock / stub those things. I change carrers and only dabbled i ln trying to figure it out for another 5 years. I started to read about TDD durring that time, and trying wrap my head around how to think in TDD was hard. What made it all click for me was watching this video (well and earlier version of this talk): https://youtu.be/EZ05e7EMOLM . Basically he goes into how TDD has be presented all wrong, and we dont need to have tests on every method, all we should care about is the output from the input and not focussing on testing all innards that get you the expect result, since TDD should make code simple, and should make it as simple as possible. I can't remember if this was in the talk, but the other key to TDD working is a well written business rules.
Hey, ellisgl, just a quick heads-up: **definately** is actually spelled **definitely**. You can remember it by **-ite- not –ate-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
This is insanely good advice.
I'm pretty sure you are a troll by now or a terrible developer. Maybe both lol. First of all, that's an oversimplification. &amp;#x200B; Secondly. **No, that's not how you do London TDD at all.** If you're testing `Calculator` class itself, you test it the same way as Chicago would do. If you are testing a class that is dependant on `Calculator`then your test double does not necessarily need to know anything about its behaviour but merely I/O. And if you're doing a proper TDD of an application that doesn't have an extremely complex design, then I'd say the outside-in TDD style is definitely the way to go. &amp;#x200B; `Chicago TDD is definitely preferred and best in the PHP world.` "PHP world" is basically the same as Java world. &amp;#x200B; I would suggest watching the courses that I've linked in my previous comment. Sandro makes some good points.
A number of my colleagues use PHPStorm. When in hack mode I prefer Sublime, where I don't have to worry about type errors while I'm figuring out the best solution. Once I've figured it out I turn on type checks (Psalm has a language server), fix any type errors introduced, and I'm away.
I have mixed feelings about the borrow checker. For systems programming where memory usage can be critical, it's great. For most other applications, I feel like it's overkill and you get most of the same benefits with languages that manage data structure mutability well. My preference (in terms of type systems and syntax) is Swift, but a lot of the tooling and libraries are still relatively immature for what I do. Full disclosure: the last project I tried in Rust was several years ago, and I understand the ergonomics of the language have improved a lot since (I also happened to be working with hardware i/o that necessitates bypassing a lot of the safety checks). PHPStan and Psalm are borderline-interchangeable, and have the same high-level goals. If you can get away with having either in a CI workflow and fail a build if people are writing garbage code, either are great. Most of us don't have that luxury, unfortunately.
[https://github.com/phpexpertsinc/SimpleDTO/blob/master/tests/SimpleSadPathsTest.php#L58](https://github.com/phpexpertsinc/SimpleDTO/blob/master/tests/SimpleSadPathsTest.php#L58) Mate, please use data providers. This test is BONKERS
Personally i always look at the best every ecosystem has to offer and try to fundementally understand it. In PHP there are two widely popular frameworks, laravel and symfony, which overlap in many ways. Being popular means that they solve many problems that thousands of developers find useful. So given that, read the heck out of them. Why they do things like that? What is the reason? If you don't understand something more fundemental in OOP practices it would be helpful to read more about that and really understand it, what it is solving. Generally you have to read on your free time. I don't think it can be practically done any other way. You have to invest a lot of personal time into this. Be strong!
First of all: test your code. You can TDD (Test Driven Development) and/or BDD (Behavior Driven Development), but at least do unit testing. &amp;#x200B; Understand and apply software theory like design principles (SOLID, KISS, DRY, etc) and software conventions and best practices (PSR, etc), architectures and different ways to solve the same problems in different context/circumstances. &amp;#x200B; Write a lot of code from scratch. Eg. pick your favorite framework, rewrite a component from scratch (router, DBAL, etc) and understand how and why you can achieve the same result. &amp;#x200B; **Our code is a side effect of our know how. Invest in your know how and your code will be better.** &amp;#x200B; ^(Sorry for the my english, is not my primary language.)
LPT: nobody knows or cares to put the effort into knowing whether you're 'trolling' or not.
I never said it was. But we do one thing that responsible networks do. We address abuse complaints and as quickly as possible. Every network will get complaints. And we all rely on each other to fix such problems. And networks that do not address abuse have to be blocked. Spamhaus has ranks OVH as the NUMBER ONE spam network in the entire world. As a result many of it's customers and blocked from other networks. See for yourself: https://www.spamhaus.org/statistics/networks/ So how is our network technically superior to the #1 biggest spam network in the world? By not hosting nearly as much spam.
delete
I've been learning TDD for a few months now (see my learning plan: [gist here](https://gist.github.com/Pen-y-Fan/5a56a255a4733a04e10c58176cbe5f57)), testing started to fall in place when doing the [Starting code for the GildedRose Refactoring Kata](https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/master/php). I hope this helps you.
Run a profiler and fix the problems.
uh it would seem pretty obvious, sorry that you had to do some research to spot a joke. btw this was an entirely boring post in the first place, but somehow 3 days later you're still reading 5 levels deep in an even more pointless side thread ?
Thanks, good to know
Are you confusing unit tests with integration tests? Unit teats shouldn't be hitting end points.
You realise this is a public forum right? Where posts are read sometimes a few days afterwards, and people who aren't the original recipient of the message can sometimes reply to you? I didn't do any 'research', you told the person you were trying to make a joke.
This. We aren't mind readers.
sure, that would make sense **if you had something to contribute**. but you don't. seems you're a bit like captian "ban you so hard ..." up there and just want to feel a bit superior or something.
I'll try harder in future to always contribute something to the discussion with my comments. Stuff like your previous contributions to this thread.
A lot of good responses here about testing in general For unit testing though, what I've found is that what you are testing is not that a specific feature works, but that under given scenarios the code does what you expect it does (to differ from integration or functional/acceptance) In this case, depending on what the "unit" does, you're testing that it calls out to any side effects you expect it to, that it doesn't call out to others (based on the scenario) and that it returns what you expect.
One small refactoring at a time. With bug fixes and feature refinements there is an opportunity to invest some time in refactor the areas you’re already touching. Also feature and unit tests are important to build confidence in the small refactoring efforts.
https://www.reddit.com//r/PHP/wiki/index you could just follow those guidelines tbh. jokes are fine, not really my fault no-one here has a sense of humour, they react with down votes but you don't see me delete/complain. on the other hand, both you and captain "I'm so imaginary powerful" up there have made this personal. you're replying to a nothing thread that doesn't involve you, in a three day old post for no other reason than to express your superiority in giving me life pro tips. gg mate
You know what? I actually think you're right. I was frustrated by the conversation between you two and picked you to take it out on. And once invested, I doubled down. I'm not usually like that, tough week.
wow that took an unexpected turn, sorry to hear your week is not going well, but good news, there's another one coming up that surely will go better :)
Every single one of those had slightly different annotations. They have to be coded literally and data providers would not work. The other reason I do not use dataproviders anywhere is that they interfere with testdox and output multiple lines for the same test. There's an open issue regarding that, but its' been open for 11 years.
Here's my latest creation: https://github.com/phpexpertsinc/ConsolePainter
Well obviously but you still want to make sure that your code acts the way it should, especially on legacy systems where they have “magical bugs”
We need a COC for people like you
Yeah, the maintainers have all let us down.
To be fair, the Lakh itself is separated like 1 00 000
I'm definitely not an expert and hadn't heard of it until about a year ago, but it was presented to me with commas. I'll take your word on it though, still looks bizarre af to me.
Let's all standardize on the _ for BOTH commas and periods, like our fearless PHP leaders!!
Because less than 10% of the people who have voting power have managed a team of, you know, *actual PHP web developers* in the last 5 years. They simple do not view *stupid people's* **terrible PHP code**, ever. Maybe NEVER! These people who control PHP? All they look at is *C* code from like the 1990s. That's one of the reasons PHP has gone down some bad paths in the past.
*Models* have IDs. The difference between Models and VOs is that Models have IDs and thus two Model instances will almost never be equal, because they both have different IDs.
Do you not know what CSS colors are?
Tetracyclic, i feel like you're just bitching because we have differing, and both valid, definitions of VOs.
Yep :-/ good catch :-/
Apparently, you're very wrong about what a DTO is. Man, i didn't need the comments. I was just trying to create something that could help teach people.
Man, it looks good. Hopefully none of the common trolls come here and deride it. The code looks really solid. From one Maker to another: Cheers!
I was with you up until the last paragraph. If you can only have one type of testing, then sure, go with Functional tests. &amp;#x200B; However, they work hand in hand with each other. Functional tests test that you're system behaves as required. Apart from being so much faster (so much faster), unit tests reduce the surface area that your functional tests need to cover. Want to check that your parser throws the right errors when given garbage input? You can use an isolated unit test (fast) or you build a contrived example via a functional test where you have to turn on the whole system to test one small path (slow). &amp;#x200B; I get it, so many unit tests are always green, and they seem pointless. But it's like accounting - you probably only ever need 5% of those records, but you don't know which ones they'll be ahead of time. It's much easier to build them when you build the implementation code, rather than six months down the line when you need to refactor. &amp;#x200B; My current workplace has two teams - one that aggressively maintains 100% unit test coverage, and functional test on the endpoints. The whole test suite runs in about three minutes. The other team has an ad-hoc mix of tests, including lots of functional and integration tests - and that takes 45 minutes to run. &amp;#x200B; I found that I never really got good unit testing until I started practicing proper isolation, with test doubles - mainly stubs and spies (For what it's worth, I almost never use a mocking library). That was the moment it clicked for me.
&gt; I was living on a single Subway $5 foot-long sub…each day You realize you can buy a lot more food in a grocery store with that $5. I don't know if PHP can help you be smarter in your shopping choices.
Corrosion of conformity? I went to one of their shows in the late 80s but they sounded like shit.
In 2019 the only code worth anything (to anyone) I see that obfuscates with eval() is malware.
Wow that's just straight out of dystopia
Link plz
https://laracasts.com
Ah! Totally missed the laracast part
&gt;I answered 2 packs of cigarettes and 2 pots of coffee a day. oh ye and $20 worth of coffee and cigarettes
honestly the more you write tests and see how hard it is to actually use your code you will start figuring out how to write your code better. it’s a long journey that can be helped with books and stuff, but at least for me hands on experience has been a good teacher.
I generally just open up with with what sort of programming they've done in the past, see if they can talk shop and where theyre at. Sometimes the juniors I hire have zero experience with with php, nothing a fee weeks of tutorials and working small issues while adding in some guidance cant fix. Sometimes they've been like caged birds at previous places but turn out being able to handle the most mindfuckery issues that's needed doing. Personality I find is more important if they're willing to learn and if they have a clue about IT/Programming culture in general. ie. Can they keep up with our #it-memes slack channel.
By the time I've paid for my hookers and blow... I can't even afford a butler! Gentlemen... This. Is. Democcccracy Manifest!
And what should I see? That `foreach` is faster than `array_map`? I have already figured it out. So, I rephrase my question: why you **have to** wrap it in a function and use `array_map` if `foreach` is faster, cleaner, and shorter? By the way, here is the benchmark: [https://3v4l.org/lR7SS](https://3v4l.org/lR7SS)
"Test Driven Development: By Example" by Kent Beck The examples are not specifically PHP but you still get the idea.
Not without writing a book. Take a look at some open source projects that use namespaces and [read the Composer docs.](https://getcomposer.org/doc/)
My issue is with the term, “click”. It’s loaded.
This is a habitual link, but did you visit it yourself recently? It stopped updating a couple years ago becoming more and more and more outdated. Not to mention that some topics are too sketchy and there is no overall system to learn topics one by one.
Also, you are not supposed to ask basic level questions here.
It is not like "can be called with and without the parentheses". It is called just without parentheses, whereas one can add parentheses around any expression in php.
`$level++;`
Php has been improved a lot since version 7. Hope to see more and more typed property and functions in php and packages. I have start implementing in my avored an laravel ecommerce too.
&gt;From one Maker to another: Cheers! Thanks, it's heartwarming !
It says this is backwards compatible. Does that mean somehow old versions will parse this or that it isn't required to use types so old PHP still works?
The latter.
Yeah, I realized that must be the case after posting.
noice
Clean coders by Uncle Bob are quite good and funby to watch
yeah
Hey thanks for pointing this out. It was a little confusing, the way I worded it. I changed it now to make it more clear that it's a non breaking change
I'm using the first alpha release to build a new project in (personal hobby, nothing for clients). I must admit typed properties are amazing and a joy to work with. It's really refreshing being able to remove lots of docblocks, and have more type safety.
Ah, yeah, that wording is more immediately clear.
There is nothing 'CSS' about #FFFFFF that's just a hexadecimal representation of and RGB value. Why not have a `class Colour` with `toHexString` and a `toRGBString`? Or do some kind of visitor pattern or whatever and have `ColourFormatter` instances. I'm just super confused about what all these classes are responsible for and what ideas or concepts they are meant to describe.
I really want to see something like shapes in facebooks hacklang language (a fork of php). It would help be string on the shape of an array being passed in.
Is it? It just means "become clear", right? What extra loaded meaning do you take from it?
It implies a certain level of doubt, or complete inability to understand. I’m pretty sure the latter isn’t the case if someone can write code at all.
Okay... I think you're stretching this point beyond reality. The meaning of 'click' in this context is 'become suddenly clear or understandable'. Lots of separate programming concepts are hard to understand for somebody who already understands a lot of other programming concepts. You surely know that. Maybe that'll click for you.
I'm so used to docblocks, it feels weird without them.
 I have a Symfony application that sells digital products. I integrated the PayPal server integration and I have the rest api done. Payments are sent correctly. Now I need to make it so when someone successfully completes a payment they get the correct file automatically downloaded. How can I do this? If you need more information just ask in comments.
Add a meta refresh tag to the payment complete page with the URL to the file in it which will then start the download automatically.
On my last project we had about 70% integration tests that often hit database directly and 30% unit tests to cover all the functionality of our application. Around 3 thousand test cases in total. The whole test suite run under 3 minutes. I wouldn't call that slow.
Don't expect for someone else do your freelance work for you and get paid for it.
On the other hand, you could pay one of us to make it work for you.
Do you want to use a typed properties polyfill? Here's something pretty close: https://github.com/phpexpertsinc/SimpleDTO I need to tweak this into a literal PHP 7.4 typed properties polyfill. I definitely can.
Try this: https://github.com/phpexpertsinc/SimpleDTO
Not gonna lie I was kinda bored of writing the usual ```php /** * @var Type $prop */ public $prop; ```
&gt; i thought we were going to have a technical discussion. i'm not interested in your emotional outbursts. I really love this response ;-) This is so how I feel when people gripe to me about my code reviews ;_)
The addition of Uninitialized is IMHO one of the bigger design mistakes in years. Adding *another* special null state and the strong potential for runtime errors is just bad design. There should simply be a step after construct that validates all the types.
Why are all of your java variables prefixed with a $? Also, I thought this was about PHP? /sarcasm
It's my personal project. This is a forum whete you ask questions, it says it in the description.
Docblocks aren't just for types. And docblocks unfortunately still have a richer type system than PHP has, for ex.: string|array[string]
I dont want you to code the whole thing, I just want to find out easy methods to do it.
Do I have to make a public path? Isnt that unsafe?
It's not a function, it's a language construct.
It doesn't need to be public. Are you using sessions? You could store the purchased item on the user's session. Instead of linking straight to the file you create a download script. The script checks the file they have access to and then uses readfile() to stream the file to the user. You will need to set the correct headers for this to work (content type and file disposition attachment). As an alternative, you could use some AWS services too. I have developed a system similar to this and the files are stored on a private S3 bucket. We have a Cloudfront distribution setup and via the API generate signed URLs. The user is directed to a signed URL which expires after 24 hours. What you do really depends on what your requirements are. Is this a one-off download? Will the user be able to login and download the file at a later date?
see? not so hard. thanks for the information.
I don't think you're correct. It can be written as `print('hello world')`; with no space between the keyword and the parentheses, so it is not just an expression wrapped up with ().
It is.
&gt; the addition of Uninitialized is IMHO one of the bigger design mistakes in years. Adding another special null state and the strong potential for runtime errors is just bad design. Guess what, the unitialized state for a property was always in PHP, you just didn't know about it. It's not a value. It's the literal lack of a property. You can't assign "unitialized" to anything, you can't compare it to anything. Previously it was equal to null in checks, while in some cases it was an error. Typed properties add one more case when it's an error, for semantic reasons.
It's good to have this, but ironically if your code is designed well, you shouldn't need it. Because: - Public properties are poor encapsulation, so they're rarely useful. - Protected properties imply inheritance, which is also a bad design in most cases (fragile base class, conflicts, poor separation of concerns etc.). - When a property is private, type errors are rare as the code is focused and edited by a single party. Whatever type errors you do will be caught by your IDE (from docblocks). So in good code this feature represents basically a slow-down. It's checking something that will almost never occur at runtime, and in stable code would never occur. It's like typed local variables. Not a bad thing to have as an option, but also not really much of a help either.
Because Laravel mix only adds value to people who are somewhat inept in front end development. Also there is no such convention of using Laravel mix, from documentation: &gt;If you've ever been confused and overwhelmed about getting started with Webpack and asset compilation, you will love Laravel Mix. However, you are not required to use it while developing your application; you are free to use any asset pipeline tool you wish, or even none at all. And if you think there is no "why's" here, please tell me how you will manage automatic critical css extraction with laravel mix.
This is really cool. Maybe in a close future we will see function overloading!
That's true. BUT I'd argue that union types can often be refactored to something more robust. If you want typed arrays, one could make custom collection classes using `\Iterable` and `\ArrayAccess`
Creating custom classes for basic concepts like unions and typed arrays solves the problem of "how I type this property" but it pretty much ruins everything else, because now you have to write hundreds of custom classes and box/unbox data within them instead of simply, you know, using docblock. There's nothing un-OOP about unions and typed arrays. The only problem is PHP doesn't support this in its type system.
I just want a onr time download and thats it. When users finish the payment a post request to /execute-payment. There I can get the payment details. I can make it so the post request returns the file, but it returns the file ad content on the page (text). When I return the file with a get request i can dowoload the file.
&gt; There should simply be a step after construct that validates all the types. https://signalvnoise.com/posts/439-four-letter-words It's a lot better to ask "what would be the problem with" doing something rather than assuming that it would be easy to do it. In this case, you would have broken Doctrine, and pretty much every other ORM out there.
Create an endpoint that can be polled against that checks the status of the payment then when/if it succeeds you can return a file to download?
Yes, a personal project that accepts payments. Yep, sure. No, it's not, read the description again.
Even without looking up I can tell it features a PHP 3 style spaghetti code and most likely an SQL injection
This is going to save me so many lines of comments.
Figured I'd leave a bit more of a detailed comment, just in case there are any beginners out there that are going to look at this tutorial. Firstly, please don't follow anything shown here, in a production environment. It feels like the author has seen other tutorials and was taking parts that he felt made sense at the time and applied them to this tutorial. For example, in one part he uses the bind parameter function for inputting a variable into the query, whereas another query he directly puts the unsanitized variable into query via string interpolation. This leaves your database open for anyone to be able to manipulate at their own will. Another example, in the delete script, the author checks if the input is empty and simply prints out an error if it is, but simply allows the query to continue, and subsequently the rest of the page (without fail.) For tutorials based around information that can be sensitive, i.e working with databases, etc, one should be aiming at providing the reader with the best practices of the goal in mind. This post doesn't do that, it's providing JavaScript which goes against a lot of the current conventions, and basic security has been thrown out the window. If you're a beginner, I would recommend looking into frameworks that provide a lot of the access to the database out of the box, to assist in helping you not include security flaws in your code. Whilst doing this you can then decide to learn what's happening behind the scenes by reading the frameworks code.
Docblocks don't enforce type safety.
Youre missing out that black hat seo pdf
Well, a cron job could perform this task every minute if needed. It's not real time, but there could be (of more or less importance) some considerations for the other end of continuously asking for reachability. If it's important to actually have a script running as a service, consider looking into [Supervisord](http://supervisord.org/) - I'm using it to have scripts working through my message queues.
i never did testing for the first 5 years of my career and that was mainly due to lack of a mentor. people have different ways of learning and i am one of those people who learned by doing and having someone review and explain what went right and wrong with my code. basically, my point is books will definitely help you but having a mentor will take you further. :) although i recommend some uncle bob's books. cheers! happy coding.
I agree. That is why last year I created this question: [https://externals.io/message/102831](https://externals.io/message/102831) , as a bridge between dynamic and static checks. Advanced users don't make silly mistakes and somehow don't notice them during development. &amp;#x200B; In time, with generics and other features, I think PHP team would implement this or some better idea.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This is my first time writing a blog post. I'd like to hear what you think - all constructive feedback is more than welcome!
So many down votes, in my opinion you kinda complemented PHP...
Personal project that accepts payments is totally fine, idk what are you mad about. I want to create my own store. Yes, it is. It is in the start of tge description
Use [PHP from the command line](https://php.net/cli) to run your script. For example, if your script is named ipaddress-check.php then you can run it with: &amp;#x200B; php ipaddress-check.php Your script will continue to run on the server for as long as it takes to iterate over and process the list of IP addresses.
I'm not "maligning" what I think you mean. I was commenting on the specific wording you used: &gt;It's a stupid, half a percent feature I will only use to disqualify programming candidates. &gt;You like your toys, but you do not understand what they convey as far as attitude and fitness for team roles. It's a shame you're not interested in actually discussing it. I didn't downvote you, I came here to discuss PHP and I'm interested in why you think a feature that has been valuable in many other languages when working on numeric heavy code is so bad and such an indicator of poor fitness for working in a team. Sure, the use cases for it are narrow, but that's true of many language features. When you're writing serious code to solve complex problems, features that improve readability and code comprehension can provide a significant material benefit. Why even bother posting if you're not interested in discussion?
How have they "let us down" by introducing a feature found in the overwhelming majority of modern programming languages? A feature that reduces the cognitive complexity of code without changing the functional meaning at all.
\+1 I like stories with happy endings. Also, I bet that it is the history of many Redditors.
yes, you're right. I've given it a thought and found out that we can do things like `print'hello';` TIL
I wonder why `parent` can't be used as a type hint, since we have `self`
Three questions: * a) Do you know PHP? * b) What tool or tools do you use? * c) (and you could do a tricky question). And that's it. You don't want to waste his/her and your time doing a useless memory test. Let's say the candidate says he or she is expert, so you must raise the bar with b) and c). Otherwise, let's say the candidate says he doesn't know PHP (or the candidate knows a little about PHP), then * End the interview, "we will call you back" and such. * The candidate is motivated and he or she is willing to learn (and to work obviously), then it sounds a good fit. Motivation is an important virtue, if he/she is able, then he could learn the basic in a snap. So, is it able?. * The candidate wants to learn at the expense of the business. Kick his/her butt out. About tools, let's say the candidate uses notepad++ = meh, Dreamweaver = danger, notepad (basic) = danger, sublime text = ok for a start, vim = kinda nerd but ok, he or she must knows Linux too, atom or visual studio code = nice, phpstorm = ideal. Of course, there are more tools: SSMS, Toad, SQL Developer, Navicat, Workbench or the ugly tools of PostgreSQL. Plus if also knows other tools.
Or if you want to be a hipster &gt;\++$level;
&gt; null is a value Oh, for Christ’s sake. The whole point of null is that it indicates no value is present.
Don't do this. Provide a unique URL (time based) that the user can use to get the file.
False? They could simply make everything billable, or not use the types?
Use Screen (https://linux.die.net/man/1/screen) on top of this and you will not need to have a CMD/SSH window open.
Wow! It takes over 30 minutes for exakat to analyze my 10 small projects (10,642 lines total, 8,479 non-comment lines). I am *positive* that TravisCI would HATE ME if I ran something so intensive on their servers. Not only that, I'd hate me.
No, but they can be used to enforce types with static analysis tools like phpstan etc.
The repository does not seem to exist (any longer).
Through Packagist I found the correct URL: [https://github.com/phpexpertsinc/ConsolePainter](https://github.com/phpexpertsinc/ConsolePainter)
It really doesn't instill much confidence if you think cyan is a light green: [https://user-images.githubusercontent.com/1125541/59557043-0a774b00-8f95-11e9-87cb-223afd9130ca.png](https://user-images.githubusercontent.com/1125541/59557043-0a774b00-8f95-11e9-87cb-223afd9130ca.png) This link is their main example output, as well as an example of their basic styles.
Between this Reddit post having important links being broken, the main example showing the library author not properly labeling, seeing or understanding colors (on a library that is all about colors and style), and really good and mature libraries out there that frankly do a better job at this, I would not pick this up. But I hope the author had a great learning experience out of it.
you could use [https://github.com/guzzle/guzzle](https://github.com/guzzle/guzzle) for this
No, they can be used to _check_ type safety. Enforcement can only happen during either compilation or runtime--docblocks affect neither.
After taking a more in-depth look, the author spent time to get 70% code coverage on a single class and 2 interfaces, with almost all methods holding the same logic. I'm not feeling great about the promise of stability there.
There is a post-create-project command that simply breaks, because it tries to invoke a script that is not there. Also, for some reason the library requires you to have the JSON extension installed, while it uses that nowhere.
Have you developed your laravel ecommerce solution or got it “ready” somewhere? I’m exploring some alternatives to Magento
Bloody typo. :-/
I'm following what the Bash colors are named. https://misc.flogisoft.com/bash/tip_colors_and_formatting
You found a legit bug. Thank you.
What would you do different? Would you please give me a link to your personally-created PHP projects? I always enjoy learning from fellow Makers.
Did you also mention that it laboriously checks all 13,569 stylization combinations?
All of the bugs that were found (the label for cyan not being in sync with the color, the extra create-project thing, and the bad repo link) have been fixed.
+1 for Laravel. I was in the same position as you until I decided to force myself to find the time to learn Laravel last year. Not only is my life so much easier, but I can do more in less time, impress the boss, and save myself headaches in the future. Visit laracasts.com and complete not only the Laravel from scratch course, but the basic PHP course (do this first). Around episode 15 I began to see that I missed a lot that has changed since I started writing PHP over 10 years ago, because I haven’t kept pace with development. You won’t regret it.
I think you got caught up in the Weeds of Perfection. You've definitely treated this gift like a half-glass empty type of way, for instance, bemoaning that the 70% unit test code coverage is done in a simplistic way. Simplistic approaches are good in our craft. Or that a simple mistake happened (I changed a background color to cyan and forgot to change the text, oops!). Instead, you should focus on whether or not this is a pretty simple and straightforward interface for colorizing a terminal.
This is awesome. Hope I get to use it on my next project.
Anyone know what protected ?string $name ,means? I am especially referring to the ?
it means it’s nullable, they mention it in the article
Thanks dear sir!
Can you please redirect me to the right subreddit?
o_O
Yes I have developed by myself with some programming concept like repository patter and solid principles and etc. You can take a look at here Below is more like a front end part https://github.com/avored/laravel-ecommerce Backend part is here https://github.com/avored/framework Give it a try and let me know if you have any issue.
Yes I have developed by myself with some programming concept like repository patter and solid principles and etc. You can take a look at here Below is more like a front end part https://github.com/avored/laravel-ecommerce Backend part is here https://github.com/avored/framework Give it a try and let me know if you have any issue.
If you're hiring a junior dev, be prepared to teach them. Look for someone that's willing and able to learn.
And you got knee-jerk responses, unfortunately, exactly as I expected. Runtime type checking is basically running a debug compile on production. The fact that they cannot see that, is sad.
Explain to me why this is not a problem with typescript.
I think that there has been lots of misunderstandings; my suggestion didn't in any way break anything, it only allowed speed improvements for regular users (not complete beginners). From my POV, opcache is far more dangerous; I have seen twice that people had trouble because of that (partial caching). Unfortunately, most people think of PHP as Wordpress only; the synonym of bad code. &amp;#x200B; But I am sure that eventually, PHP developers will find much better ways than my suggestion.
I've been on Internals. It can sit in the dictionary as a definition od "knee-jerk". You won't see depth of thought or reasonable mature conversation. They've found something to latch on ("no language config") and they'll just spew back sarcastic and mocking comments based on that idea alone. This is why it took years to have simple things like short array syntax in the language, or anonymous functions and classes. One problem with typehints, BTW is that scalar typehints will affect program behavior even if they don't fail. This is why unfortunately any such switch would have to keep the casting behavior and remove only the checks where they don't impact behavior. It's bad design to have casting scalar hints, but it's too late to change that.
Typescript does compile-time checks. Past that point, including integrating with other scripts, it will not do any checks and is no better than regular javascript.
It does compile-time checks. And then compiles anyway, even if those checks fail. So, again, are they stupid?
Wrong question. Try again.
There no wrong questions here. I just think you don't understand where types sit in the pipeline here. When a developer is made aware of a type error while they're writing code, they typically fix it. Type errors don't need runtime enforcement, and in a dynamically typed language, they don't even need *enforcement* at all. When the error is emitted, people take it into account. Because why the hell wouldn't you? And so PHP really doesn't need runtime enforcement, once you know you're running stable code. Because in stable you'd *never* need the checks in the first place. They'll never trigger.
Lack of a use case?
Docblocks add neither compile-time nor runtime checks. They _may be_ read by external tooling that can assert the type safety, but unlile typescript, it's not a significant part of the standard tooling or the compiler. Again, docblocks are not a replacement for real language type enforcement.
Honestly I wouldn't mind at all PHP adding a "load-time" static analysis pass, or shipping standard tooling for IDE to check typehints statically, that we can all standardize on. Yes, the situation is not sufficiently standard, everyone has made their own make-shift tools, because we lack a standard one. So the solution isn't "let's keep using runtime checks" because this is no way to develop anyway. Runtime doesn't provide immediate feedback. Static does. &gt; Again, docblocks are not a replacement for real language type enforcement. "Real language type enforcement" is done statically in all languages, *except* PHP. Give me another mainstream language with explicitly runtime type checks.
&gt;So the solution isn't "let's keep using runtime checks" because this is no way to develop anyway. Runtime doesn't provide immediate feedback. Static does. I'm not making arguments for or against any specific kind of typechecking, only commenting that docblocks combined with optional tools _are not the same as real enforcement in a language._ &gt; you just need to show the developer there's a problem, and they fix it. Oh my sweet summer child... you keep that eternal optimism.
hey man, do you have example how to use bunny? i'd open that link. theres an instruction but still cant understand dont know how/when to start.
&gt; Oh my sweet summer child... you keep that eternal optimism. You still haven't addressed why TypeScript has that optimism and the fact this optimism was warranted. Microsoft may be a bad word in many people's mouths, but they know dev tools. And based on what they knew, they decided this is how TypeScript should work. Even though "type" was in its name. The designer behind TypeScript has also designed Delphi and C#. He's one of the top language designers in the world, and highly respected. Would you "oh sweet summer child" him as well?
Typescript _does_ do compile-time enforcement. If your code doesn't typecheck, it doesn't compile (to javascript, without typechecks). Typescript is only fully typed if every bit of the application you're running has accurate type info. If any of it is incomplete, you are free to ignore the incomplete parts. That's not true with PHP's typed properties.
&gt; Typescript does do compile-time enforcement. If your code doesn't typecheck, it doesn't compile (to javascript, without typechecks). I literally told you the exact opposite few comments ago, which just shows me you're not reading. It doesn't enforce anything. You get errors, the code still compiles. Go check it yourself and then try answering again.
&gt;I literally told you the exact opposite few comments ago, which just shows me you're not reading. No, quite frankly I'm calling you a liar. If your code does not typecheck, you don't get a build. That's the whole value proposition of typescript: you can't violate the typechecker. And that matches my experience as well (we use typescript at work). &gt;It doesn't enforce anything. You get errors, but the code still compiles. The compiler never refuses to compile just due to type errors. Syntax errors are a deal-breaker, sure, as then it's unclear what should be compiled. But type errors are more like PHP's warnings. You get the message, then it keeps going. Go check it yourself and then try answering again. What? PHP blows up loudly if you violate type constraints. Only very specific, very legacy cases will do very specific, very legacy things that don't cause an error.
&gt; No, quite frankly I'm calling you a liar. If your code does not typecheck, you don't get a build. That's the whole value proposition of typescript: you can't violate the typechecker. And that matches my experience as well (we use typescript at work). Quoting the TypeScript documentation https://basarat.gitbooks.io/typescript/content/docs/why-typescript.html &gt; Type errors do not prevent JavaScript emit &gt; To make it easy for you to migrate your JavaScript code to TypeScript, even if there are compilation errors, by default TypeScript will emit valid JavaScript the best that it can. e.g. &gt; So you can incrementally upgrade your JavaScript code to TypeScript. This is very different from how many other language compilers work and yet another reason to move to TypeScript. So I told you twice something that I've verified is correct, and I asked you to verify it yourself, which is easy and quick to do. You didn't. And you said **"I'm calling you a liar"**. What do I get to call you now... ?
It can: https://3v4l.org/ME47e
My bad, it's added in the list now.
Check out Psalm's object-like array type annotation: [https://psalm.dev/docs/annotating\_code/type\_syntax/array\_types/#object-like-arrays](https://psalm.dev/docs/annotating_code/type_syntax/array_types/#object-like-arrays) It's designed to mimic Hack shapes.
Hey thanks, this is awesome!
&gt;vim = kinda nerd but ok Just curious, what's the value assessment of a "kinda nerd" here?
Why use them? \- they are a human readable, portable and extendable way of managing configuration. &amp;#x200B; File parsing is slow (filesystem I/O is a huge overhead in general) this is why the Gods Of PHP (GOPHP, patent pending) gave us caching. ANy framework worth its salt reads configuration once into PHP data structures which are then cached until you manually flush that cache (Laravel has artisan's cache:config, for example). Together with opcache, this configuration management method has exactly 0 performance overhead.
So let's bring this back to the actual point: do you, or do you not, think that docblocks are a valid typing system that can enforce type safety for PHP? Because that's literally where this started--not by appealing to the authority of the typescript developers (not even the compiler, _the developers_) in a fairly unrelated context.
I asked you a simple question several times, you kept deflecting, then called me a liar, and now you're deflecting again, without even apologizing for insulting me because you can't be bothered to check your facts. Now you want to talk about PHPDoc, when the "actual point" wasn't PHPDoc at all, but the ability to check PHP typehints (actual ones) statically at IDE/load time, rather than runtime. I don't mind having a conversation about types, it's a fairly interesting conversation, many pros/cons on all sides, but as I said it's quite tiresome when you're intellectually dishonest, incapable of recognizing facts, constantly mischaracterize and misrepresent my opinions, and can't remember (or maybe can't understand at all) what we're talking about. We're basically having no conversation at all.
I actually don't know if it is a valid type in 7.4, was just wondering
Two things I forgot last post: apparently we somehow have our build process set up to not ignore errors (I haven't cared about the actual tools behind our build process since we decided to go with react + typescript), and _what the actual fuck?!_ What is the point of a compiler that you can outright _ignore errors_ it emits?! In what world does that kind of a tool even make logical sense?!
&gt;I asked you a simple question several times I think you'll find it more accurate to say that you appealed to authority in a different context with a different tool for a different reason, and I refused to engage until now (and honestly probably should have continued to refuse). &gt; then called me a liar Yep, that one I'm sorry about. Apparently the frontend team at my company decided (rightfully, imo) that errors deserve to be blockers, and I assumed (wrongfully, I've now learned) that was the default state of being for a tool because that's how pretty much every tool ever invented works. &gt; and now you're deflecting again More like trying to drag the conversation back to what I _actually said_ instead of what you interpreted my words to mean. &gt; without even apologizing for insulting me because you can't be bothered to check your facts. I'm on my phone (which isn't an excuse), and I've just apologized. &gt;Now you want to talk about PHPDoc, when the "actual point" wasn't PHPDoc at all, but the ability to check PHP typehints (actual ones) statically at IDE/load time, rather than during execution. So once again, you've misinterpreted what I actually said. Here, let me remind you of what I actually said: docblocks do not enforce type constraints. At best, with optional external tooling, they can check type constraints, but they cannot prevent you from passing a string in place of an object. Only the PHP engine can--and then only in places where it's actually supported. Either you agree with that statement or you don't, but stop bringing up typescript and appealing to authority about what other compilers/tools do. It's frustrating when you misinterpret me for the apparent sake of argument.
It's definitely good practice, however it all comes down to cost and experience. Generally ask yourself some of the following: Am I alone on the project, or within the a team? Is the project a serious multi-year endevour or just a proof of concept that's meant to be discarded rather quick? Is the general xp in my team this high or that low? Etc. Like most things, it all comes down to it depends :) Less coupling does enable you to switch things around, or highlight important parts of your software, but at the price of added complexity.
&gt; what the actual fuck?! What is the point of a compiler that you can outright ignore errors it emits?! In what world does that kind of a tool even make logical sense?! Do your own research and figure out the answer. PHP can use the same system TypeScript does. You can still make the presence of errors a "can't commit" violation for your repo, that's up to every team to decide. But one thing we do NOT need, is constantly checking typehints at runtime. No language does that, except PHP.
IMO it's one of those "If time were no object" things, which doesn't really exist in a business environment where your programmers want paying and the CEO wants a product to sell. You can work towards it as a general goal, but is it really worth trying to abstract around everything
I found using PHPSpec made TDD click in a way it didn't before with PHPUnit. It made the workflow much better, partly by eliminating the need to write boilerplate for methods and things, and partly by encouraging a smoother flow from test to production code and back. It doesn't work well for everything, but here it does it's very good.
You aren't gonna need it
It's very good practice, and it's a good way of keeping your core logic very clean without any "frameworkisms". Helps immensely with testing. Changing framework and ORM are neither here nor there tbh - certainly it'd be easier, but in all my years not once have I done anything of the sort. &amp;#x200B; It's also the only sane way to use laravel. Anyone who's done laravel upgrades will know what I'm talking about.
It depends on the size of your project, but in general, I would recommend trying this approach whenever possible. It's not just about switching framework or ORM (or other libraries), but it's also about being able to upgrade to a new version of a framework without too many issues. Imagine you currently working on a project that uses Symfony 2. This framework is end of life and doesn't get any security updates anymore. You'd love to migrate to Symfony 4, but that has a different approach to certain things. If you would not use the framework-agnostic approach, you would now have to update your whole codebase to start using the new version. If you used a framework-agnostic approach, the problems would only present itself in the "infrastructure" layer where the connection is made between your application and the framework. This will save you a whole lot of work. Sure, it's faster to not use the framework-agnostic approach and you should definitely be pragmatic in choosing your approach, but there are certainly good reasons to use it. The chances of you switching framework are small, but the chances of your project living long enough to need a BC-breaking upgrade are certainly bigger. Keep that in mind when making your decision.
&gt; Less coupling does enable you to switch things around, or highlight important parts of your software, but at the price of added complexity. I'm not entirely sure that's true. The idea of reducing coupling is to reduce complexity. Sure, for some boiler plate crud that would mean you have to set things up a bit more, but for anything with business rules it should reduce it.
I don't think "so you can change framework" is a good reason, but separating the domain is absolutely a good thing to do. For example, when you just grab some framework and start creating entities you will all of a sudden have things like users that may or may not have email addresses. Should they actually have them? Code it. Do not let yourself save a user without one. But to do this you have to divorce yourself form the `persist` and `flush` mentality (or whatever your orm/framework does).
I would rather drop in a framework upfront to get the job done quickly, rather than fiddling with the supporting code. In the result, after a few months nobody will give a shit about that, so I consider that extra level of abstraction rather as a waste of time, sorry. Of course, there always is "it depends" option, but my practical experience says that a quick and working solution always has higher priority.
You might as well use no framework and just use composer libraries. Essentially that's what some PHP PSR compliant libraries are trying to do.
I would nuance this a little and make it a "is the time worth it?" thing. &amp;#x200B; As others have said, if this is a smaller project that will require little maintenance once it's up, will never be worked on by anyone else than a small team, then you probably don't need to do it. But if it's a product that's gonna live for a (hopefully) long time and will be worked on by a myriad of developers, then it can be incredibly powerful.
This is partly why there's a rise of SaaS/PaaS solutions. If your application is good, sell it as a service, don't obfuscate code. Obfuscation sucks. If you get really popular there's going to be a whole community out there that will have tools for code obfuscation tailor made for your application. There's no silver-bullet to be honest. Even if you were using pre-compiled language, you'd still have people that are able to mess with your code. That's how software piracy work. As such I've always found selling apps with obfuscated code to be dumb and a sign of a rookie developer (no offense intended). It's much better to modularize your project and sell modules and support rather than the whole thing but obfuscated. Have an installation fee if the client really wants it on their servers etc. In the end, if your client is a trashy person, they are going to do trashy things.
I think like everything in life, a balanced approach works best. Seperate your domain into your own namespace and classes, avoid code tied to a framework. Things like routing, session or other application level code, use the framework as much as possible. If you do ever need to move framework, the application level should be fairly trivial.
&gt; Sure, we are not evaluating your knowlodge, we need to see how do you solve a problem This automatically puts this company in the top 10%, because the rest haven't gotten the memo that it's 2019, and developers use Internet for work.
Sure, it all depends on the experience of the team though :) but you are right.
It really doesn't take any extra time to do, if it's been done from scratch or nearly from scratch. This is what an IDE like phpstorm comes to the rescue.
I would agree with this for short lived projects, but on long lived projects it's absolutely the wrong approach, and what eventually leads to costly rewrites further down the line.
Don't forget that upgrading your framework could also be seen as "switching frameworks."
Why use the framework at all then? I mean if you are going to roll your own string/array helpers and write your own abstraction of the ORM or whathaveyou, what's the point in using a framework in the first place? If you are not going to use Laravel's filesystem or authentication modules, honestly why bother with a framework? You are not taking advantage of anything. You are an expensive twat for my business with a big mouth. I think there's a smart way of using a framework and a dumb way of using a framework. And being 100% framework agnostic is a bit on the stupid side. I've done numerous Laravel upgrades, as I am kicking a project since Laravel 5.1 and it's 5.8 now. My code is hardly framework agnostic. Everything runs smooth, hardly any breaking changes. I only really had issues with the cache migration from minutes to seconds. But honestly, I was already using DateTime as a 3rd argument most of the time. So it didn't affect me all that much. I don't use the default folder structure so any directory changes hardly affect me. I find it really funny when people say it's difficult to upgrade Laravel and yet you have an automated service that will happily charge you 150$ to upgrade your Laravel installation without breaking your code. So much for it being a major headache.
Nicely done. I've written a few tree algos in our product (e. g. the navigation) and this would've spared my a few hours :D The graph-export is impressive. Definitely gonna use this! Just a nitpick: the link in the repo header ([https://not-a-number.io/phptree](https://not-a-number.io/phptree)) leads to a 404.
Anything can be misused. You can write a 3 LOC program and make it messy. There's no language in this world that can fix the inherently bad nature and logic of human beings. &amp;#x200B; However, in an ideal world where you're disciplined and seasoned programmer - generics help. That's all. They don't create a mess *just because* you used them. &amp;#x200B; Bluntly stating that *"x leads to messy code"* is just an opinion, not a fact. There's no tangible proof. You can state than preemptive multitasking leads to hard to read code. It's just way too ambiguous of a statement and you can't read my mind when I type something like that, you miss 99.9% of info required to come to the same conclusion as I did. &amp;#x200B; Re: *"poser devs*" - well, you want to compare yourself to better people, not to worse. There's no need to even think of those poser devs :)
Thanks ! &amp;#x200B; Feel free to use it and give me some feedback, I really like to know how and why people are using it :-) &amp;#x200B; Thanks for the broken links. Actually, I was using apigen for generating the documentation, but there is too much issue with it, so I got rid of it not so long ago. I will remove the link for now.
If u wanna see an example, I made it here: https://github.com/hgraca/explicit-architecture-php As others said, its good to decouple your application from the tools and delivery mechanisms it uses, but its not only a tech decision, theres business and teamwork concerns to take into account as well, so it boils down to "it depends".
PHP has a built in DTO: [].
&gt;Why use the framework at all then? The framework provides some glue to stick things together. If you've paid attention to Symfony at all you can see the "monolithic framework" is now mostly just a way to install and configure components. &gt;and write your own abstraction of the ORM The ORM **is** the abstraction. Models/entities should be POPO, and you fetch them from repositories. This is the most basic way to separate your domain. &gt;If you are not going to use Laravel's filesystem Why should you be bound to Laravels filesystem? Why not Gaufrette or Flysystem? This is similar to the problem the community has with Eloquent: you do it the Laravel way or you don't do it. &gt;I've done numerous Laravel upgrades ... Everything runs smooth Sounds like "works on my machine". Not helpful. &gt;I find it really funny when people say it's difficult to upgrade Laravel and yet you have an automated service that will happily charge you 150$ to upgrade your Laravel installation without breaking your code. LOL. &gt;I'm really starting to hate on premature optimizations. Like a well coded domain? Not really sure where prem optimisation fits here.
I think you misunderstand how it works. In your code, you depend on interfaces for stuff libraries (eg the framework) can do for you. You then implement these interfaces using the framework. You're still utilizing the framework fully while keeping it at arm's length.
Fair. Certainly with Laravel, less so with symfony.
"Clean Architecture" is a bit of a misnomer, as it's not clean, and it's not an architecture. It's a way to split components in an app, but it's hardly universal or always recommended. Framework independence is achievable for your business logic and it should be done IMHO. This doesn't mean ORM independence, though. ORM != framework. The presentation layer will likely be stuck to the framework. Templates etc. you have no much choice here. So it's not just a theory, and aspects of it are good practice, some aren't some are in "depends" territory. You need to be specific to get specific answers though. Every app is different.
Every time someone says "you aren't gonna need it", they should post their contact info, so people can come back and be compensated when they do need it.
Depends which part we're talking about. Because divorcing your model/business logic from your persistence layer (ORM or whatever) is actually quite the nightmare and 90%+ of people who try it do it wrong.
What has bash to do with this?
&gt;Tetracyclic, i feel like you're just bitching because we have differing, and both valid, definitions of DTOs and VOs. I only commented because you repeatedly refer in this and other posts to teaching people what DTOs are and in other threads you've flat out told people they're wrong for using the widely accepted definition of DTO and VO. I don't generally have an issue with terms being reused when the context is clear, it's accepted that it's not the typical usage and there's little chance of confusion (such as Laravel using the term "facade" in a non-traditional way). It's your attitude towards people trying to clear up the confusion and your initial unwillingness to accept that there is a more widely used definition of the terms that have led me to comment every time you bring this up. Can you provide any sources for DTOs being defined in the way you define them? If there were multiple widely accepted definitions for the terms I wouldn't have any issue, but they are such well defined terms that it seems like you're only confusing people by repurposing the acronyms for your own patterns and then telling people that they're wrong when they point out that these terms have existing definitions. If you have good sources for these terms having a completely different meaning in other contexts, it would be worth updating the Wikipedia articles. &gt; Here's other people who you need to yell at about how their DTOs shouldn't do validation. There's nothing in the link you posted mentioning DTOs and the original question doesn't seem to have anything to do with them. Did you link to the wrong thing?
&gt; If you've paid attention to Symfony at all you can see the "monolithic framework" is now mostly just a way to install and configure components. Install and configure tightly coupled components.
There are many ways to skin this particular cat that are easy enough to implement. With an interface based approach you never depend on concrete entities, which are problematic when you're not using a data mapper orm. It does require a more disciplined approach, but we do get paid to produce quality as well as quantity. Learning is as much part of the job as writing code.
Writing an interface feels like it solves the problem, but if you can implement an interface via only one dependency, you'd basically fooled yourself. So it's tricky. Components need to be decoupled through abstractions only in places where the abstractions can be simple, generic (as much as possible), and viable for multiple implementations. Otherwise why do you, right...
Google Charts?
You have a bright career ahead of yourself.
Laravel nowadays implements PSR interfaces in just about everything and since the beginning I've been dependency injecting the interface and not Laravel's implementation. But I'd happily leave Laravel's IoC do the resolving. And if something does change, like they changed the caching contract, you can just proxy it over, or do a little bit of work and implement that. IMO writing maintanable code following the DRY principle would benefit you even more, as you would save on time and if something does change, you are going to change only 1 thing. Let's not forget that every breaking change will require you to change code regardless if you are framework agnostic or you go hand in hand. I guess we are talking more about ... who's going to change less code to fix a breaking change.
Why, is it something something to do with js
They did and you still quit
About upgrading there's Rector that can help to upgrade. I did not use it myself to be totally honest but it has a lot of good feedback.
HTML5, CSS3(Less,Sass etc), JavaScript.. yes, read up on Progressive Web Apps (PWA)
By the way, I've read all your articles about architecture, thanks a lot!
If user consents then I don't see any issues. Show them the GDPR consent and explicitly state that you do this and why.
Oh sorry actually i wanted to know how to put your variable from phpmyadmin in to js ? Maybe I am in the wrong section
What was the intent when putting information to form. Yes, I agree that submit button is the best option (and intuitive to user) but the intention was there
No need to appologize, either you generate a json file and dynamicly display the progress bar or you generate the javascript with PHP(nasty and not adviseable)..
You think gantt chart ? &amp;#x200B; [https://github.com/neuronetio/gantt-elastic](https://github.com/neuronetio/gantt-elastic)
I never thought about it but it sounds really brilliant ! Not much work but possible big time-saves
If you need some decent examples, check jsfiddle or codepen
This entire article reads like someone taking a flamethrower and burning all RoR fans to dust.
Tkx :)
Only if they also get paid for the time and effort saved by not doing for the 99% who won't need it.
&gt;But I'd happily leave Laravel's IoC do the resolving. That's not where framework decoupling takes place. You can resolve dependencies any way you like in this context untill your production code doesn't know what instantiated it and how its constructor parameters were found. There are some subtle reasons to avoid auto-wiring, but its not framowork coupling.
Sounds like a plan. Wait, how do we know when we're in the 1%?
This already exists with .phpstorm.meta
Not it doesn't
Yes it does. &amp;#x200B; &lt;?php namespace PHPSTORM_META { override( \The\LoaderFactory::get(0), map([ '' =&gt; '@', ]) ); } &amp;#x200B; &lt;?php namespace The; interface LoaderFactory { public function get (string $classname); }
cool story bro
Good for you guys.
This is the link [https://www.phpdevelopmentcompany.com/](https://www.phpdevelopmentcompany.com/)
You're going to have to qualify how writing large amounts of adapter code doesn't take any extra time.
No need to be passive-aggressive, everyone was a beginner at some point.
A framework vs a language? Also with broken English? Sounds like classical image of a php dev to me.
And then they had a bright career?
There will be someone smarter, working for you, to let you know.
Everyone whos posting at blogs who have "smooth-scroll" arent good
Definitely possible. I think most stacks that are also capable of server-side can do this. But the original question was not clear what you had planned.
Fair point, but you see I don't consider myself writing framework agnostic code, or focus over it. Infact, if I am to export the libraries that I made, most of them would have to be prefixed as laravel-* because I really like the helper classes in `Illuminate\Support` etc. But when it comes to dependency injection it's good to find the root of where your framework is coming from. Bonus points if it is a PSR interface. I do believe that some people are doing overkill in going framework agnostic. At some point you simply can't create the swiss-army knife that everyone dreams of. You fulfill your use-case and you move to more important things. It's like preparing for RDBMS change when your project isn't even in the prototype phase.
I understand your concerns about Magento 2. This system is more complex than Magento 1 and requires a structured technical approach. Moreover, developers who will work over M2 project should have an extended experience in both Magento 2 website development and solving derived issues. If you do it right, the platform won't bring you the problems you described. I think if M2 website is deliberately developed but not in a slapdash way, the website will be well-performed and profitable. Here is an example of M2 website with tons of extensions and dozens of customizations - [https://www.opulentjewelers.com/](https://www.opulentjewelers.com/) . The site is stable and open to integrations.
An open source project can also use "did the type safety check pass?" as a policy for whether or not to merge a pull request, thereby enforcing them in a social sense.
Because it's never "large amounts" unless you're trying to fit a square into a triangle, and because a proper IDE does most of the work for you on this, including stubbing out the relevant test classes. Using the right tooling is essential to get stuff done well and quickly.
Totally related blog post: [https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5](https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5)
IntelliJ-LSP is coming along very nicely. There’s still some bugs in Psalms language server implementation that don’t play nicely with it however. The only one I’ve come across does have an open ticket and ongoing discussion so hopefully that will be on the road map soon.
Why you not use the annotation like ```php /** * @return \Name\Space\T[] */ ``` ?
"It does not work" will not help in anyway. Do you expect the users here to work into the void just because you cant describe a single error?
If you code is clean, it's super easy to just dump it into another framework and see it running smoothly. Most framework nowadays are just compilation of best practices, clean documentation and quality third party bundles. At least that's my feeling with Symfony 4.
/r/PHPhelp Also, supply error messages, and information beyond "It doesn't work". As a developer, you should know how frustrating it is for users to say "It's broken" without any further information - What's broken, what were you expecting, what is it doing instead?
Not sure what you mean. Generic types don't have namespaces, they are restricted to the method/class scope that they're defined in. Of course, with this feature you could define a `T[]` type: ``` /** * @template T */ class ArrayCollection { /** * @return T[] */ public function __toArray(): array { } } ```
in my opinion you learn more if you were to write an real application that does something. Writing frameworks is kinda easy and there are tonnes of info out there on how to do it. Even if you where to write something that has done before like a forum you end up learning more things. Do what ever you like on your spare time, i believe you can spend it on other things that you will learn more from.
Don't make the scaffolding of your application bigger than the application itself. Also the scaffolding has some anchor points to the application. It has to. It's made for that purpose. It's not a wild standalone scaffold in the breeze
&gt; Let’s Build A Forum With TDD https://laracasts.com/series/lets-build-a-forum-with-laravel
It won't pass the post data to the sql row. I managed to correct some errors in the code just earlier but it still won't pass the post data. I wrote my own error message system based on the language file. Oh boy I really need to get this done because I am planning on doing a demo and lecture in front of a camera / projector and show the mechanics of this beast I built.
It won't pass the post data to the sql row. I managed to correct some errors in the code just earlier but it still won't pass the post data. I wrote my own error message system based on the language file. Oh boy I really need to get this done because I am planning on doing a demo and lecture in front of a camera / projector and show the mechanics of this beast I built.
I'm not sure you're following what the code is trying to do. T itself is not a type. T is a placeholder for a type substitution.
Line numbers, php error logs, if you know where it's going wrong, dump /die the crap out of it. You built it, surely you can debug it?
I don't think it works like that: &lt;OPTION VALUE=\"$_Module_Administrators_SQL_MEMBER_ID\"&gt;Member String concatenation is with a .
10 Kloc should be more around 2mins than 30 mins. Did you run all of them together ? so, 10 x 10kloc in one go? that would be closer to that amount. Travis (and others) is tight on resources, Gitlab (and some others) works well with such amount of code, and some more.
It works without the . but it's sloppy.
I put too many documenting lines in there so now it just confuses me &gt;.&lt;
I've created a bulletproof library for PHP regular expressions with documentation. It's main reason is: PHP regexp fail silently (with warnings) and have complicated methods (3-5 arguments) and return types (arrays of arrays of arrays). The second reason is, with PHP regexp - there are gotchas - like empty string can mean not-matched group or matched empty group. The library always throws exceptions, has simple methods, and safes developer - by always handling edge-cases. Could you please guys tell me what you think? What to add/change/improve? :)
The Library is [T-Regx library](https://t-regx.com) :)
No, my co-workers showed me.
Considering you are calling it bulletproof I assume you prevent ReDoS attacks?
I figured it out. There were a few typos in the sql statement. It was member_first_namee should have been member_first_name
&gt;I've created a bulletproof library Is that a challenge for someone?
T-Regx throws a suitable exception when catastrophic backtracking happens :) Unless you ask about methods of preventing such patterns?
Yea, please break it! :) So I can make it even more error-safe
You guys know PHP regexp, right? when `""` sometimes mean missing, sometimes means empty string, different methods return different values, `preg_match()` cuts down unmatched groups, invalid/non-existent/missing groups are treated as once, etc. T-Regx is "bullet-proof" in terms of treating each of those cases separately, throwing exceptions when needed and avoiding false negatives and false positives.
If you start coding with a framework with plans to change it in mind, then you should start to wonder why you are using this framework in first place. When I use Laravel or Symfony, I have plans in mind to use either blade or twig and then Eloquent or Doctrine, if I have plans to use none of that then I won't even consider using them.
Does it have data providers?
In your documentation, in "Integration" tab, you could also post how to integrate it with TravisCI
Calling it robust already sparks much more confidence in me than using marketing superlatives like bullet proof. Saying handling 100% of edge cases is already on the wrong side of the spectrum (imo). As edge cases are going to be edge cases and you might very well hit more of them at some point. You can already plug it as a cool and much more robust regex library than the native `preg_*` functions no need to throw random marketing terms around. Also note I am not knocking of your work in any way, I just hate stupid meaningless marketing buzzwords.
You, sir, earned yourself a star :)
Thank you ! Very motivating !
When I said "100% edge cases", I meant "ensuring that the interface of functions exactly matches the arguments/result intention and consistency". For example, `preg_match` won't distinguish non-existent/unmatched groups. `And preg_*` and **many other libs** only quote special characters with `preg_quote()`, forgeting about quoting with `\Q` and `\E`. By "edge-cases" I also mean that replacing can be error-prone because php replaces `$1`, `\1` and `${1}` with special characters - T-Regx handles them - thus being more "robust", "reliable" - don't know how to call it :/
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thanks for your appreciation :)
When I click the API link in the footer I get a 404 response. I think there is one too many `/api` in the URL.
people use frameworks because it is faster, it forces to use framework specific style and structure. This seems like a bullshit no-framework gang is promoting. It sounds like a lot of extra work for nearly non-existing value.
It's fine. Ignore the one jerk that has nothing to contribute but complain about one tiny word.
If I'm not mistaken: [https://github.com/php/php-src](https://github.com/php/php-src) the master branch should be what will become version 8, currently.
See [https://www.php.net/git.php](https://www.php.net/git.php) on how to build PHP from there.
You may want to update the example output image in the README, which still uses the wrong colors.
Not much. I guess the author is of the understanding that Bash invented ANSI/VT100 control sequences, which are completely language agnostic. Any software emitting those control sequences to an output that is displayed in an ANSI/VT100 compatible terminal will use them to format the output.
Imo it's unfair that this comment is sitting at -4 this is a perfectly reasonable well constructed argument that contributes to the discussion.
A lot of times it is just theory, while yes you can spend time abstracting and abstracting and abstracting, why not just use the framework you have. Who changes frameworks? Upgrading should not be an issue either, unfortunately with popular frameworks like laravel who don't use semver - it is an issue. &amp;#x200B; While I do agree about keeping domain specific logic separate, I do not think for most frameworks you need some crazy abstracted pattern for interacting with the database, just use the ORM provided, or in the case of laravel, switch it out if you are that opposed to Active Record. If your company has unlimited time and unlimited money then sure implement all day long, but most of us work on tight schedules and have some "TODO: Fix later" or some such some where in the code base, either from previous developers or our selves. And if you are like me, single developer, fixed deadline, you do what you can yes, but you dont take these principles and concepts as scripture and start preaching them from the roof top. It all boils down to time and money, with the exception of domain specific logic should be separated out. Hell even delegating the controller logic tom services, dosen't take long. But again - time and money.
I'd recommend starting with php-amqplib and following the official [RabbitMQ PHP tutorial](https://www.rabbitmq.com/tutorials/tutorial-one-php.html). Or at least reading through it all. It will teach you a lot of the basics of how RabbitMQ works, and from there you'll have an easier time working with Bunny.
Is this for a web app? How does the excel file get there?
Try this https://github.com/rvoicilas/inotify-tools/wiki
https://phpspreadsheet.readthedocs.io/en/latest/
As others have mentioned, the only place to get "PHP 8" right now is to build it from source directly from the master branch. It should be note that PHP 8 is not even in alpha yet and as such is not feature complete. That's likely another year away or more, given that 7.4 (expected to be the final 7.x release) has only just had its first alpha release (and even that's not feature frozen yet - [7.4 feature freeze happens on July 22nd](https://externals.io/message/105925)) If you're interested in PHP 8 development, you should follow the internals [mailing list](https://www.php.net/mailing-lists.php) - there's also a web interface at [externals.io](https://externals.io/)
There is some Docker images available on the Docker Hub : [https://hub.docker.com/r/phpdaily/php](https://hub.docker.com/r/phpdaily/php)
Which is a _check_, not an _enforcement_.
I make no judgments about which phase to do typechecking in, so again, _stick to what I actually said_.
Maybe this youtube on how to "...Build a progress bar - Javascript..." will help: &amp;#x200B; [https://youtu.be/WrSRGzQeN2o](https://youtu.be/WrSRGzQeN2o) &amp;#x200B; Yes, you can pass a PHP variable to javascript, a simple example: var val = "&lt;?php echo $val ?&gt;";
https://www.youtube.com/watch?v=sbPSjI4tt10&amp;amp=&amp;t=2196
It is an enforcement.
No, _it is not_. An enforcement means _you cannot to it no matter what_. _I am perfectly capable of violating a docblock with zero repercussions._
And your pull request will not get merged if you violate the terms of contributing to an open source project. It's enforced.
Ok thank you
Yeah now i need to put the table i created on phpmy admin into this, do you know how can i do that And thanks you
Thank you for your kind words.
Thank you for an interesting read. I enjoyed that article.
Make an Ajax call to a rest api to get the data and then processes it into the format this library wants
We may do a web form, but it is currently specced that the user will place the excel file in a directory on a remote server.
Ok I'll try that, thanks again.
Look at how they pilloried my ConsolePainter post. Damn. People are mean.
I've been very specific in my term selection and very consistent with its usage. Disagreeing with my selection of term definition is not a way to argue about the merits of my chosen term.
&gt;https://t-regx url is broken. Does that count a breaking it?
https://t-regx.com :D sorry
I missed this vote, I obviously would have voted against this syntactic sugar bullshit. It wouldn't have made a difference, as it was outvoted 3 to 1. I'll make an RFC in the future to deprecate it ;) PHP still kicks ass! For every 5 awesome ideas, we'll get 1 bad one .. that's just how language dev rolls. viva la php
In my experience, it's better to give immediate feedback on the data that's on the excel file. We've moved from uploading the files, to processing them on the browser and just validating a JSON model.
Question: &amp;#x200B; On server side I create dictionary and json\_encode it: &amp;#x200B; \&gt;{ \&gt; foreach ($queue as $q) { \&gt; $newItems\["ID"\] = $q\['ID'\]; \&gt; $newItems\["DATA"\] = $q\['DATA'\]; \&gt; $result\[\] = $newItems; \&gt; } &amp;#x200B; then later on: &amp;#x200B; \&gt; $response-&gt;flush(json\_encode($event)); &amp;#x200B; &amp;#x200B; On client-side I receive JSON-structure that I put in variable "message". &amp;#x200B; 1. I assume the data sent over network should be serialized. How come Javascript's &amp;#x200B; console.log(message) gives me &amp;#x200B; \&gt; {ID: "198", DATA: "'homepage'"} is presented as JSON? Does javascript/browser automatically deserialize data? 2. Why would someone send data over network in string format? 3. Why additional quotes surrounding DATA:"'homepage'"? On server side $newItems\["DATA"\] contains string value. Why json\_encode adds another pair of quotes around it?
It's a false dichotomy to decide between to use a framework or to do it all by yourself. The main problem of many frameworks is that most libraries are coupled with the framework, they don't work without the framework. But there are libraries framework-agnostic and we could use it in our projects. **So, is it possible to work without a framework without reinventing the well?.** **Yes: create a project, install a library and that's it!.**
There's a lot missing here, but if you are fetching the data via, say, jQuery with the type set to JSON, then the fetching library will usually take the step of de-serializing it for you. Otherwise, yes, the data comes over as a string that must be deserialized.
Update: &amp;#x200B; I changed things on server side and sent string over network rather than json\_encode(PHP array) structure. &amp;#x200B; This time the message came out on client side as {ID: 198, DATA: "homepage"} - without extra quotes around DATA and 198 as integer type. &amp;#x200B; It seems like $response-&gt;flush automatically converts the data to JSON format and if you do it yourself with json\_encode the strings inside will be double quoted. &amp;#x200B; Note, I always receive JSON structure on JS side. My only question is - how come? I remember in Python /Django I had to do JSON.parse in order to get incoming string converted to JSON. How come PHP doesn't require that?
Yes,this was an external library with BX.ajax.loadJSON method ha-ha :) Thanks for the response !
wait what? It's not even supported in the language (AFIK) so why would PHP storm want it?
It is because I said that types are not that useful in some cases. I’ve angered the gods.
What is the consensus of having libraries declare global functions?
Same reason as people use @param MyClass[] Because it's useful for static analysis and autocomplete.
It's good in practice _sometimes_ (maybe even most of the time...), but you need to understand the motivations for doing so and the trade offs you are trying to make. The oft-given reason for doing this is to "separate your code from the framework", with the implication that this would allow you to change your framework at will - which is probably a lie and not something you are likely going to have to do. In my experience the separation is more about being able to use your code in a more flexible way. Business rules often need to be run in different places, under different contexts. Keeping your domain logic separated allows you to be more portable with that code and (for instance) call the same logic in a console command that would usually be called in a controller. It also makes sharing that code across multiple projects practical - which wont be the case if it's just jammed up in part of the framework somewhere. There are also benefits from a testing perspective. You can test your domain without the overhead of booting an entire framework around it. I've also found that treating "framework separation" as a continuum is more beneficial than the binary "separated or not". Sometimes it's expedient to throw stuff in the controller and be done with it. It depends on what tradeoffs you are willing to make at the time. There's not really a clear cut answer here.
What does exist in .phpstorm.meta? The letter "T"?
Add to your criticism that the blog overrides the default pace of scrolling so that the scroll-wheel on my mouse makes the page scroll much more than I am expecting it to. There's nothing "smooth" about that. In my head, web developers who do this are in the same category as people who disable right-click or middle-click, make the back button take you to a page that refreshes and pushes you forward again, inserting extra text into selections you copy to the clipboard, or otherwise breaking basic browser behavior. It's like, it works fine by default, no need to change anything.
PHP is one of those languages where it's easy to do a sloppy job the first time through, and writing flexible / extensible code is important. But it's also a very quick and easy language to learn, and one where there's a huge online community and it's super easy to look things up. Because of this, I would try to look for the more abstract, generalizable thinking skills and be willing to take someone who has no experience with some of the specifics. If someone has prior PHP experience, I would ask them to submit some example code, or perhaps even make them code a test project on the spot. (Allowing them full internet search during any sort of test...a real-world PHP developer is constantly searching for things, looking things up in documentation, etc. so you need to test them in this sort of environment, not an artificial "school" like environment where they need to have things memorized.) I'd look for the following: * readable code: choosing self-explanatory variable and function names commenting their code well * flexible, extensible code. This is a little harder to test, but you can ask: are things that happen multiple times are made into functions or methods? Does the person use parameters in functions to simplify things? Does the person seem to have a good grasp of OOP (IMHO is this is rare especially among PHP developers, lots of people use OO syntax but just write in a procedural style, unless you have real OO people doing the interviewing it may be hard to assess this, this is more important in large, complex projects) * knowing something about security (are they aware of SQL injection and prepared statements? XSS attacks? timing attacks? one-way cryptographic hashes? are they able to think like a hacker? Maybe even give them a script with a security vulnerability and ask them to try to hack it.) * people who ask questions about specifications rather than just accepting specs as-is. In small companies where PHP developers are more likely to work directly with people who are going to be using their applications, there needs to be a lot of back-and-forth like this and you want someone who isn't just gonna code, but is gonna actively question the specs and design a system that actually works. These are what I'd be looking for. Forget specifics...people can always learn the specifics quickly. What you don't want is to be stuck with someone who writes unreadable code that no one else can understand...someone who writes code with security vulnerabilities...or someone who writes code that works the first time but then when you need to modify it slightly it all needs to be rewritten...or code that does literally what was asked but isn't actually useful because the specs were wrong and no one questioned it. These are the things that are gonna affect your bottom line long-run!
I'm not sure what the deal is with people who have voting rights who are unaware of ongoing RFCs.. You're the ones shaping a language that's used by thousands, if not to say millions of developers. You're a small group of people with the privilege to collectively decide how the language evolves, as a userland developer I'd expect you to be responsible with it. I get that life gets in the way, all respect for that. But I would expect you to take responsibility to come forward and yield these voting rights. I don't want to be judgemental, but your comment triggered me in some way. Please don't take it as a personal attack.
https://github.com/devilbox/docker-php-fpm-8.0
can we not list each and every change? https://www.reddit.com/r/PHP/comments/c05bq2/php_740_alpha_1_released
It works if the function returns an array of T objects. But what if you want to return a Collection object (like a laravel collection, or your any itera me object) ? You'd need something like /** * @return Collection&lt;T&gt; */ Which doesn't exist in phpdoc as far as I know.
Yes
&lt;/thread&gt;
Are java, ruby, C# et al following javascript?
Hello everyone. After learning HTML, CSS and JS I'd like to move to PHP since it would open a lot of chances of landing a job where I live. To be more precise, I need to learn PHP, Laravel and MySQL. About the first two, I got my eyes on \*\*Laracasts\*\* and \*\*phptherightway\*\*. Anything else you would recommend? Thanks
In a statically typed language with option overloading its always 100% deterministic which path the execution will take. &amp;#x200B; In PHP the right overloaded function would have to be selected at runtime. The type of a variable which will be the option for selecting the right function can be changed at will. Therefore, in PHP option overloading would be a mess.
I hope multi-line short closure will become a thing, but right now this is good. I hope to do this one day: \`\`\`php protected fn setFilePath(string $path): static =&gt; { $this-&gt;$filePath = $path; return $this; } \`\`\`
Moms spagetti incoming!
Check out [/introduction#entry-points](https://t-regx.com/docs/introduction#entry-points) - you're free to use `pattern()` global method, but you can also just not import `bootstrap.php` :D and use class `Pattern::of()` :) It's all up to you. `pattern()` global function is only added after you import it.
Also `include`, `include_once`, `require`, `require_once`, `exit`, `die`, and `return`. I think there's a bunch more though!
&gt; I hope multi-line short closure will become a thing, but right now this is good. &gt; &gt; I hope to do this one day: &gt; &gt; ```php &gt; protected fn setFilePath(string $path): static =&gt; { &gt; $this-&gt;$filePath = $path; &gt; &gt; return $this; &gt; &gt; } &gt; &gt; ``` So, basically, you mean use "fn" instead of "function"?
`static` is not allowed as a return type. Unless you hope it is one day...
I find it hard to believe that you're testing every line of code with those tests, which is the point of 100% coverage. &amp;#x200B; (Not that I'm arguing that 100% coverage is sufficient to test everything, only that if you don't have 100% coverage, it is by definition, not tested.) &amp;#x200B; \&gt; The benefit of not covering **everything** in unit tests is you don't need to go and change a dozen of tests each time you tweak application internal &amp;#x200B; I honestly don't have this problem, and refactor mercilessly. I legitimately would like to know what this looks likes for you. What would be an example of this happening?
I'm looking for self hosted solution for receiving/managing messenger bot reservations. Anyone worked with/on something like this? If anyone has commercial software that I can self-host on my domain with simple bot integration I'd purchase it.
You really are a troll. Or an idiot, I guess ... who cares.
Calling people a "troll" is a really constructive remark, and an excellent way to express an argument, and lead a productive conversation. Good job.
A bad implementation of a builder pattern.
Looks like it. My younger self was experimenting on things. It was made around 2 years ago. My aim was just to visualise some steps through code.
like blanket accusing an organisation that works tirelessly to decouple and open source it's components of lockin without reason or example ... gg
I don't think you don't need to test every line of code. What you need is confidence and ability to iterate the feature set quickly without fear of breaking stuff. That what tests are for. &amp;#x200B; And so, I always think about which tests I'm gonna write rather than carpet bombing everything with unit tests, because what I often see when working on projects with a latter approach is either tests that mock too much (and involve a lot of redundant maintenance effort) or repeat same checks in several places. And that simply stems from the fact that all most applications have several level of abstractions. Say for example you tested repository in one place then call it from your service class. You'll need to either mock the repository call or repeat same checks in your service class tests. That sounds reasonable, only it doesn't work quite well at scale because at some point you service class includes validation, third API party calls etc. and so you eventually end up with Christmas tree of mocks when it would be much more efficient to just issue HTTP call to a controller and assert against its results (much less tests that cover much more area).
If this will be refactored, I will start with naming. &amp;#x200B; 1. I would avoid \`Handler\` as it is too vague. 2. Named setters instead of passing the property on method \`set\`. 3. Strict typing. I would avoid the possibility of passing multiple types in one method. Concise and robust instead of error prone if-ology.
&gt; Whatever type errors you do will be rare, and still will be caught by your IDE (from docblocks). It's a poor argument that simply says "things are only a little bit broken so I resent anyone trying to fix them". Eg: &gt;Whatever type errors you do will be rare, and still will be caught by your IDE (from docblocks). docblocks are not code. they do not catch anything real. I mean I have actually put bugs into production (through review) because the code relied on the property docblock being correct and of course it wasn't.
It's actually because, while you made a couple of good points about public/protected properties, you absolutely failed to address the fact that more typing is better, and made the false assertions that docblocks are just as good. Or maybe you're just an unrecognised genius. 50/50 I guess, we'll never know.
If you use doc blocs on private properties like he argues, then tools like PHPStan and probably many others can catch any mistake that PHP can with these 7.4 changes. His argument is that it would be cool if you could disable runtime checks in order to win some performance. Now I don't entirely agree with this myself, but the argument does meaningfully contribute to the discussion.
Well his system could potentially allow for this as well. protected function foo($a) { return fn() =&gt; $a; } protected fn bar(string $ba): string = $this-&gt;foo(); or something like that, which could be very cool.
Don't misrepresent my statements. I didn't spin up a conspiracy about locking people in and I didn't "accuse" anyone. Fact is, Symfony components are often over-designed (not always) and have bunch of dependencies on other Symfony-lore that could've been avoided. I don't ascribe this to intent, they just don't know any better, or they don't realize the negative side of these dependencies. You want examples? Let's see... What does an HttpKernel do? Let's ask ourselves if its core functionality has much to do with *most* of these dependencies it requires: "symfony/browser-kit": "^4.4|^5.0", "symfony/config": "^4.4|^5.0", "symfony/console": "^4.4|^5.0", "symfony/css-selector": "^4.4|^5.0", "symfony/dependency-injection": "^4.4|^5.0", "symfony/dom-crawler": "^4.4|^5.0", "symfony/expression-language": "^4.4|^5.0", "symfony/finder": "^4.4|^5.0", "symfony/process": "^4.4|^5.0", "symfony/routing": "^4.4|^5.0", "symfony/stopwatch": "^4.4|^5.0", "symfony/translation": "^4.4|^5.0", "symfony/translation-contracts": "^1.1", "symfony/var-dumper": "^4.4|^5.0", "psr/cache": "~1.0", "twig/twig": "^1.34|^2.4" You didn't plan on using Twig with your HttpKernel? Too bad, now Twig's part of your project anyway. This is just first level analysis. Because all of those packages also depend on a plethora of arbitrary symfony packages. Let's grab "symfony/config": "symfony/event-dispatcher": "^4.4|^5.0", "symfony/finder": "^4.4|^5.0", "symfony/messenger": "^4.4|^5.0", "symfony/service-contracts": "^1.1", "symfony/yaml": "^4.4|^5.0" Here's "symfony/config": "symfony/config": "^4.4|^5.0", "symfony/event-dispatcher": "^4.4|^5.0", "symfony/dependency-injection": "^4.4|^5.0", "symfony/lock": "^4.4|^5.0", "symfony/process": "^4.4|^5.0", "symfony/var-dumper": "^4.4|^5.0", "psr/log": "~1.0" Oh, lock, let's see what's in "symfony/lock": "doctrine/dbal": "~2.4", "mongodb/mongodb": "~1.1", "predis/predis": "~1.0 This is not even exhaustive. Just a few examples. So, congrats. You installed HttpKernel, and how you have like 30-40 other random dependencies, including YAML, Mongo and Doctrine. Much architecture. So decoupling. Very design.
Oh, I didn't realize I'm on Fox News and I need to go through all the talking points, or else I'm a communist or something. The whole point of my comment is that typing is most effective in certain scenarios, and it's much less effective, or sometimes even pointless in others. The more open a contract is (interfaces, public method arguments, return types), the more essential typing is. The more we move towards local state and implementation, the less we need it. It doesn't take being a "unrecognized genius" to realize that, it's a well accepted principle, that's also fully realized in languages like TypeScript (which is also built on top of a dynamic script). The fact this is too nuanced for your to grasp and you're reducing it to a single-sentence slogan is your problem. "MORE TYPING = MORE GOOD!" is how I'd explain types to a child, the way I'd tell a child "don't talk to strangers", despite you can't really go through life following this literally, can you?
&gt; Let's ask ourselves if its core functionality has much to do with most of these dependencies it requires: those are **dev** dependencies. didn't bother to read past that ... well, for obvious reasons
&gt;The more open a contract is (interfaces, public method arguments, return types), the more essential typing is. The more we move towards local state and implementation, the less we need it. The more typing we have the less problems we have. You are arguing for more problems and saying they're not very big problems. Genius. &gt;the way I'd tell a child "don't talk to strangers", despite you can't really go through life following this literally, can you? Yes, you can. Because reducing bugs in code is not the same as not talking to humans. There is no upside to sometimes having buggy code.
&gt; But for adults, types are a tool. Just type cast like an adult then, you tool.
Your code will run if your docblock is wrong, it will not run if a type declaration is. That is to say, with docblocks you may not notice you have passed the wrong type of argument until it shows up in production, but you can't not notice it with a declaration.
Do you think I'm stupid? Did you even read my post? I said that tools like PHPStan can tell you your doc blocs are wrong just as good as PHP7.4 type checking can before your code makes it to production.
1 thing that you should change, objects after the initialization must be valid. Remove that setters logic and pass all the necessary dependencies in the constructor. &gt;/\*\* &gt; &gt; \* The handler it holds &gt; &gt;\* @var \\DeltaX\\Mantrain\\Handler \*/ &gt; &gt; protected $handler; &amp;#x200B; After the constructor this is not true at all , the $handler is null and that is not declared in the doc-block.
1. I would like to replace \`Handler\`, but I have no idea on how I'll name it yet. (Ah, the pain of naming a variable.) My mind was wild back then and full of memes (hence the Mantrain.) 2. Maybe I could use a \`\_\_set()\` method. 3. I have no idea on how I'll make a strict typing on this, but strict typing is better. My mind back then abuses weak typing because it is easy to do so. Thank you for the suggestions!
you can have php + phpstan, or just php. I don't think the first option is just as good as the second. whatever floats your boat tho
I'm feeling stupid to ask, but how do you use it to signal which _actual_ type are you then using? The example in the tracker only shows the definition, not the use. Or I'm missing something.
So much this. &amp;#x200B; I've seen a lot of OO developers make this mistake. &amp;#x200B; It's not clear to other developers that the object after initialization is still in an invalid state. There's hardly ever a reason to not pass it as a constructor arg, and it leads to better design (i prefer to cut setters where possible, service classes often don't need setters)
I don't see Twig, YAML, MongoDB or Doctrine DBAL as a requirement, **even after resolving the requirements of the dependencies of the dependencies**. --- https://github.com/symfony/http-kernel/blob/master/composer.json "require": { "php": "^7.2.9", "symfony/event-dispatcher": "^4.4|^5.0", "symfony/http-foundation": "^4.4|^5.0", "symfony/debug": "^4.4|^5.0", "symfony/polyfill-ctype": "^1.8", "symfony/polyfill-php73": "^1.9", "psr/log": "~1.0" }, --- https://github.com/symfony/http-foundation/blob/master/composer.json "require": { "php": "^7.2.9", "symfony/mime": "^4.4|^5.0", "symfony/polyfill-mbstring": "~1.1" }, --- https://github.com/symfony/event-dispatcher/blob/master/composer.json "require": { "php": "^7.2.9", "symfony/event-dispatcher-contracts": "^1.1" }, --- https://github.com/symfony/event-dispatcher-contracts/blob/master/composer.json "require": { "php": "^7.1.3" }, --- https://github.com/symfony/mime/blob/master/composer.json "require": { "php": "^7.2.9", "symfony/polyfill-intl-idn": "^1.10", "symfony/polyfill-mbstring": "^1.0" }, --- https://github.com/symfony/debug/blob/master/composer.json "require": { "php": "^7.2.9", "psr/log": "~1.0" }, --- Now, tell me where Twig, YAML, MongoDB or Doctrine DBAL is a requirement for using HttpKernel.
I realised that it would be more neat if I put it on a constructor. I had picked up a bad habit back then.
There's a [detailed discussion](https://wiki.php.net/rfc/arrow_functions_v2#syntax) of the short closure syntax in the RFC. It considers the pros and cons of various syntaxes. The most concise syntax would be ($x) =&gt; $x * $y but it was rejected because it would complicate the parser. Multi statement bodies were considered but not included in the RFC since the overhead of the conventional syntax is smaller relative to the body. Though it would be desirable to have uniform syntax for all closures.
If you want to troll around I'm done here. I use types every day in my work, I understand the value of types and I'm a proponent of types. This doesn't mean they're always required. This **IS** childish, but I won't waste time explaining why, because you're striking me as a very dim fella, so far. Some homework, if you're willing to open your mind a little: https://games.greggman.com/game/dynamic-typing-static-typing/ http://wiki.c2.com/?BenefitsOfDynamicTyping http://www.cis.upenn.edu/~bcpierce/papers/harmful-mfps.pdf
/u/easterneuropeanstyle is correct, you're conflating an ID with an identity, but they're not quite the same thing, an object doesn't need an ID to have an identity. If we have an `RgbColour` value object containing primary red (#FF0000) it's considered to have no identity of its own. Its identity is predicated solely on the value it contains ^1, so if we create a second `RgbColour` object, also representing primary red, the two objects should be considered identical to each other (and requires the implementation of an `equals()` method to perform equality checks): $red = RgbColour::fromHex('#FF0000'); $alsoRed = RgbColour::fromRgb(255, 0, 0); return $red-&gt;equals($alsoRed); // true However if we had an object representing a button, with a foreground and background colour and created a second button object with the same foreground and background colour, we would almost always want them to have their own identity and not be considered equal. They don't need an ID field, because by default in PHP two objects with the same properties aren't considered equal. $button = new Button(); $button-&gt;setForeground(RgbColour::fromRgb(255, 0, 0)); $button-&gt;setBackground(RgbColour::fromRgb(255, 255, 255)); $secondButton = new Button(); $secondButton-&gt;setForeground(RgbColour::fromRgb(255, 0, 0)); $secondButton-&gt;setBackground(RgbColour::fromRgb(255, 255, 255)); return $button !== $secondButton // true This applies to DTOs. If we have two DTOs that represent a financial transaction, even if the payer, the payee and the amount are all identical, they shouldn't be considered equal, which is the default behaviour in PHP and most other languages. You might use a DTO to send the details of two pending transactions to a payment gateway and so neither have a transaction ID at this point, but they should still be considered to be two separate transactions with their own identities. It would be common in this case to use value objects for the transaction amount and bank accounts to ensure that these are validly constructed, but the transaction object should only ensure that it is passed the value objects it expects and nothing more ^2. $firstTransaction = new PendingTransaction( new Money('USD', 1200), new BankAccount('12345678'), new BankAccount('87654321') ); $secondTransaction = new PendingTransaction( new Money('USD', 1200), new BankAccount('12345678'), new BankAccount('87654321') ); // Despite having the same properties and no ID yet, our two transaction DTOs should not be considered equal as they represent two different transactions. if ($firstTransaction !== $secondTransaction) { $paymentGateway-&gt;processTransaction($firstTransaction); $paymentGateway-&gt;processTransaction($secondTransaction); } // The payment gateway can then use something like a `toJson()` or `toXml()` method on the transaction to serialise it for sending to the remote payment processor. This will likely then return a different transaction ID for each once they have been processed. 1. * [^Examples ^of ^value ^objects ^are ^things ^like ^numbers, ^dates, ^monies ^and ^strings. ^Usually, ^they ^are ^small ^objects ^which ^are ^used ^quite ^widely. ^Their ^identity ^is ^based ^on ^their ^state ^rather ^than ^on ^their ^object ^identity.](http://wiki.c2.com/?ValueObject) * [^A ^small ^simple ^object, ^like ^money ^or ^a ^date ^range, ^whose ^equality ^isn't ^based ^on ^identity.](https://martinfowler.com/eaaCatalog/valueObject.html) * [^In ^computer ^science, ^a ^value ^object ^is ^a ^small ^object ^that ^represents ^a ^simple ^entity ^whose ^equality ^is ^not ^based ^on ^identity](https://en.wikipedia.org/wiki/Value_object) 2. * [^DTOs ^are ^simple ^objects ^that ^should ^not ^contain ^any ^business ^logic ^but ^may ^contain ^serialization ^and ^deserialization ^mechanisms ^for ^transferring ^data ^over ^the ^wire](https://en.wikipedia.org/wiki/Data_transfer_object) * [^The ^solution ^is ^to ^create ^a ^Data ^Transfer ^Object ^that ^can ^hold ^all ^the ^data ^for ^the ^call. ^It ^needs ^to ^be ^serializable ^to ^go ^across ^the ^connection.](https://martinfowler.com/eaaCatalog/dataTransferObject.html)
**Value object** In computer science, a value object is a small object that represents a simple entity whose equality is not based on identity: i.e. two value objects are equal when they have the same value, not necessarily being the same object.Examples of value objects are objects representing an amount of money or a date range. Being small, one can have multiple copies of the same value object that represent the same entity: it is often simpler to create a new object rather than rely on a single instance and use references to it.Value objects should be immutable: this is required for the implicit contract that two value objects created equal, should remain equal. *** **Data transfer object** A data transfer object (DTO) is an object that carries data between processes. The motivation for its use is that communication between processes is usually done resorting to remote interfaces (e.g., web services), where each call is an expensive operation. Because the majority of the cost of each call is related to the round-trip time between the client and the server, one way of reducing the number of calls is to use an object (the DTO) that aggregates the data that would have been transferred by the several calls, but that is served by one call only.The difference between data transfer objects and business objects or data access objects is that a DTO does not have any behavior except for storage, retrieval, serialization and deserialization of its own data (mutators, accessors, parsers and serializers). In other words, DTOs are simple objects that should not contain any business logic but may contain serialization and deserialization mechanisms for transferring data over the wire.This pattern is often incorrectly used outside of remote interfaces. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Why not use http://www.slimframework.com/ ?
Stop using singletons.
Using something like PHP-DI instead of singletons is something I'm planning to do soon. Just need to figure out a couple things first.
&gt; but I won't waste time explaining You seem to type a lot and explain very little. Lots of insults and stupid analogies, but very, very little explanation. Fuck it, lets just take a look at what you wrote. &gt;If you want to troll around I'm done here. You say you're done and then write another couple hundred words ... &gt;I use types every day in my work, I understand the value of types and I'm a proponent of types. This doesn't mean they're always required. You're a self proclaimed expert who is both for and against things. &gt;This IS childish, but I won't waste time explaining why, because you're striking me as a very dim fella, so far. Not gonna waste time ... but you're still gonna write another 100+ words and link a bunch of probably rubbish. Also, insult ... &gt;Some homework, if you're willing to open your mind a little: Can't make a simple point so just link to some things that you happen to agree with &gt;The direction for most languages is actually more dynamic and less explicit typing. Java supports "var" type inference for local variables. C# has had that and dynamic typing (optional of course) for a long time. Ah yep, that's why php is getting rid of type declarations, and flow doesn't exist, nor TS. :rolleyes: &gt;In short, I like types, but I definitely don't want to be on the same team with you, if you represent team "types". Because you really have no clue what the fuck you're talking about. In short &lt;insult&gt; ** there is NOTHING substantial in your post at all **
I like F3 (fat free framework)
I read the word *handler* too many times in your code and now it has lost all meaning in my brain
&gt; there is NOTHING substantial in your post at all There were several links in my post. So one of these things happened: - You didn't check that content. Which means you're trolling, and I'd be wasting my time to bother with you. - You tried and it all flew over your head. Which means I'd be wasting my time to bother with you.
I’ve not used it, but there are issues with it, like the fact that the session is locked until the script is finished. Might be useful in a limited fashion, but for tasks like tour example of sending emails, queuing is better.
one of these? [https://github.com/iluwatar/java-design-patterns](https://github.com/iluwatar/java-design-patterns)
Will replace that soon. I see. Thanks for the insight. Something might be wrong in my logic when I overuse a word.
That's why it's a good practice to close the session before calling this function
So the php+phpstan option is objectively better in terms of runtime performance.
Love that you went from complaining about how the spaceship operator made it impossible for you to review code to shilling for your library with literally every post you make.
Not stupid at all. There's usually two ways: 1. Type inference 2. Explicit type through phpDocs Optimally, PHPStorm would infer generic types through the constructor parameters: ```php $arrayCollection = new ArrayCollection([1, 2, 3, 4]); $arrayCollection-&gt;push('Foo'); // Invalid ``` That's not always possible. Sometimes there is no constructor or no value of type `T` is passed to it. In those cases you should be able to manually define the generic types: ```php /** @var ArrayCollection&lt;T&gt; $arrayCollection */ $arrayCollection = new ArrayCollection(); $arrayCollection-&gt;push('Foo'); // Invalid ```
You can use session_write_close before sending the end signal to the client. What you cannot do after 7.0 is to reopen the session if the client isn't there anymore. I used it in a small project to make a progress bar showing the status of a big file import script. Yeah, I'm lazy and used sessions. 7.1 came around and I couldn't upgrade cause they thought it was a bug to allow a script running without a client to access the session.
Yay another F3 fan
https://externals.io for the bleeding edge.
``` /** @var ArrayCollection&lt;T&gt; $arrayCollection */ ``` Thanks, that was my missing link!
No problem! My example was wrong BTW, I meant to write `ArrayCollection&lt;int&gt;` or course.
I don’t think that matters, if a subsequent request comes in before the script exits, I believe the session will not be available.
Can confirm this is correct. session_write_close will allow a subsequent connection to be opened even while your script is running (I.e processing an expensive mysql query). Regardless of using the fastcgi function. You can use this technique to allow many concurrent connections from one user/client.
Sounds like a poor man's gearmand.
Why are the constants from `ANSIColors` used in `ConsolePainter` through inheritance? And what is a `ConsoleArtistGuild` why Guild? Also what is bolder supposed to do? For me it doesn't seem to do anything? Other then that it seems like this could be useful in some situations.
Well, the positive news is that no one has attacked you yet. That's pretty common around here for people who actually make stuff.
So, you are wrong
I'd recommend Auryn. I'd be happy to check out the framework later and try to implement it. I've been meaning to find some projects to submit pr's to (never done one).
Care to elaborate?
I think queued jobs are a much better approach.
&gt; You don't have a single test. Guys were getting onto me because I had just 70% code coverage. https://github.com/phpexpertsinc/ConsolePainter I have no idea how, and what to test, as many of the code I wrote is just glue between (hopefully) well tested libraries. &gt; You don't have any instructions on how to use your project. Check out my NeverBounce API Client for a good "howto" examples: https://github.com/phpexpertsinc/NeverBounce - &gt; You don't list what it can do. Check out my SimpleDTO project for a good case of that: https://github.com/phpexpertsinc/SimpleDTO. I use PHPUnit test functions to generate the docs automatically via --testdox. Just look at the text. Yeah, I actually never intended to publish this in the first place, just went "let's see how it goes" out of the blue. I'm not sure if it's worth it to document this, as it's just a play thing right now.
That and F3 looks interesting. I'll definitely bookmark them for later.
Umm well. session_write_close()'s manual page?
It's a useful big hammer, yeah. I've used it for flushing logs and other non-critical tasks in the past, just so shave off a little response time. But, anything critical I would use a queue, just sounder engineering. However, requires you to run a queue... :D
&gt;Maybe I could use a \`\_\_set()\` method. Please do not. Avoid magic at all costs, as it come back to byte your ass. Don't be lazy and please write the functions.
I'm aware of how this works, but my understanding was that fastcgi\_finish\_request() prevented the session from being reused, despite being closed. I just saw the additional comments that others had tested and proved that to be incorrect.
\`print('foo') . 'bar'\`
The linked article is excellent but it has been around since 2012 or so. I really don't understand the point of linking to it with no explanation. Homework assignment maybe?
I've never worked in flat PHP in the last 8 years, so I never seen it, I thought it was new, sorry!
Agree. Also, it hides readability, which is most important in writing software. ;)
Changing code in a git hook is not a good idea - any changes by automated tool changing the code should be reviewed manually before accepting which is impossible to do after automated changes are appended to the original changes of the commit.
I've used it for the use cases you described, and had no issues. But I still think using some kind ob job queue is the better solution. There are solutions with little ops overheads (e.g. https://packagist.org/packages/jms/job-queue-bundle if you are using symfony) that do the same job
Cant edit my original post... so here goes: I know that obfuscators don't add ANY protection at all. It may slow down someone, but it doesn't protect my code. The only reason I'm working on an obfuscator, is because I want to, and I am sure I will learn some things on my way (which I already did).
Queues are better. I've used it in a pinch (actually the Apache mod version) to handle critical timing issues when there wasn't enough time to implement a better strategy.
I'm going to shamelessly self-promote for a minute: https://stitcher.io And with less shame, "annotated monthly" by JetBrains is pretty good: https://blog.jetbrains.com/phpstorm/2019/06/php-annotated-monthly-june-2019/
&gt;You should always keep Homestead (and Settler!) up to date. When I bring my Homestead box online, I get this notice: Bringing machine 'homestead-7' up with 'virtualbox' provider... ==&gt; homestead-7: Checking if box 'laravel/homestead' version '7.2.1' is up to date... ==&gt; homestead-7: A newer version of the box 'laravel/homestead' for provider 'virtualbox' is ==&gt; homestead-7: available! You currently have version '7.2.1'. The latest is version ==&gt; homestead-7: '8.0.0-alpha2'. Run `vagrant box update` to update. But when you look at the release notes for this version you get a big warning that it's an alpha and you shouldn't upgrade unless you know what you're doing.
I use [grumphp](https://github.com/phpro/grumphp) to manage post-commit hooks to link not only the commit message but things like phpcs as well.
It's just not fun anymore after past 3-4 months getting like over 5 of these, so at this point, I'm just scrolling by to see comments with the attitude "I don't even care anymore"
I think this highly depends on your process. My current process would be: 1. Always working on a feature-/dev-/fix- branch, never directly on master. 2. Commit &amp; Push (theoretically this is where that hook is running) 3. Travis/Circle CI picks up the commit, runs tests. In some cases we don't do this until there's a PR 4. PR for code review + travis build 5. Merge into dev 6. Create a release branch from dev (When deploys aren't automated) 7. QA runs through the release 8. Merge into master &amp; tag 9. Canary deploy 10. Full rollout In this setup I cannot imagine auto fixing would be an issue as it'll get caught in the PR and/or testing phase. Personally though I've preferred not auto fixing for the devs and just blocking the commit using phpcs. From there for us it's as simple as `make fixcs` and then committing. Another thought here is how devs are managed + how are they rewarded. In the last team I worked with we had a number of devs with good vision into managing and automating best practices, however the company still rewarded devs for getting things done fast, not good. So like OP, it was like herding cats. I'd be willing to bet the hooks in place that stopped commits that didn't match code style didn't get reviewed after running the code style fixer either, but the process above likely caught most cases where anything went wrong. How does your team/process work? I'm also curious as to what process is in place for OP as well.
Right. Feel free to skip alpha / beta versions.
It's neither and not even comparable. PHP-FPM is a supervisor already (it forks into children, when they die - it boots them back up), but the function itself lets you execute code once output is sent to webserver. It's useful for cleaning up. Using it to do lengthy tasks can quickly occupy all available child processes, so it's nowhere near as useful as gearman.
Got that, thought you described in a _generic_ (&lt;--) way :p
I could live witch cs checker if it was running only on the master branch. The main advantage of using Git is its superfast branch and commit handling. I want to be able to create commits without being delayed by style checkers/fixers. Also, I want to run fixers over clean repository (with all changes commited or removed), so that I can distinguish my code changes from the changes made by the fixer. Also, the check is done every time, even on changes not requiring it - it slows down even more. Installing these hooks on every dev's machine is tedious and there is no guarantee that devs will not bypass them. Code checks should IMHO be done in CI environment after push (a compact piece of work, can consist of multiple commits), each dev then runs code fixers by hand, checks the result and fixes their branch. Reviewers and devs responsible for integration should be the main stop for the _unclean_ code to get to master.
Protip: This is no fiction at its possible today. &amp;#x200B; Here is a poc: [https://www.npmjs.com/package/whereamirunning](https://www.npmjs.com/package/whereamirunning)
Why didn't you post this as a link instead of a text post with a bit.ly url?
In the ci you can make dedicated cs fixer commits. But its ok that they are merged automaticly... Its the style the dev should have used while developing.
I commend you for posting this, it's always good to get feedback on your work. Other commenters are right, there are already a number of well supported, lightweight frameworks, but there's absolutely no harm (and some personal benefit) in implementing one yourself, even if you end up using a more well supported framework when it matters. For the purposes of your glue code, integration tests would be more appropriate than unit tests, as you can (hopefully) rely on the individual libraries to test their own functionality. Some basic sanity tests that, for example, make sure if you create routes, they can be called as expected; that non-existant routes error in the correct manner; that a simple template gets rendered properly and so on. That way when you make any changes you can be confident that everything still works as you expect it to and your changes haven't had any unexpected side effects to the basic functioning of the application. Any time you find a bug you can add a test to make sure you've fixed it and be confident it doesn't get re-introduced down the line. You could, for example, make an integration test that tests how you would _like_ a not found route to be handled and then refactor your `route()` code until the test passes. Also, good work on refactoring to use a DI, it will help you a lot as you continue to develop and test this.
The article is about pre-commit hooks, not about ci.
Dude. The only reason you'd ever want to let long-living processes continue after the user received input is if you don't know how to offload jobs to supervisord.
Docker won the war. Anyone actually prefer vagrant to docker?
Cloudflares anti scraping is trivial to beat
I put my Cs fixer hook in my prepush hook, and if any changes are made, the push will terminate, and the user can review the changed code before committing it
Queues are a thing for a reason. Such hacks are not guaranteed and really that method is meant to flush non-critical things which if they don’t execute nothing bad will happen. Laravel is a source of bad practices - don’t follow their practices...
Planet-php.net is a goos collection of blogs that write on PHP
Agreed. Not clicking that on mobile. Will wait for proper (re)post
We use it to do logging and such after a request is finished. We value snappy responses to the user so doing that after the request is valuable. And why would we ever send that to a work queue?
Only that ci is the better tool for the job of php-cs-fixer. But you can make stuff you want.
That sounds serious. I hope you reported those who attacked you. Don't let that stop you from sharing the things you're proud of.
https://www.w3schools.com/php/default.asp
For stuff going into core, RFCs for new features, etc listen to Derick Rethan's internals podcast: [https://phpinternals.news/](https://phpinternals.news/) [phpdeveloper.org](https://phpdeveloper.org) is another good aggregator. Finally (self promotion), I edit php\[architect\] magazine and books: https://phparch.com/
Let's just write numbers in morse code just in case we ever have to run a WWII submarine with PHP.
If anyone else is unfortunate enough to develop in NetBeans, before you waste your time, it doesn’t support git hooks.
Laravel is the obvious choice if you are sticking with PHP. Laracasts is a phenomenal resource for it.
At this point, why even a framework? Just take components you like or know well and bootstrap em together.
That's rather sad that 35% of respondents stated they don't use a testing framework
If you don't use PHPUnit and/or don't know how (nor use) xdebug breakpoints: You. Are. Not. A. Real. Developer.
Here's the alternative. It's a lot faster and easier. git clone https://github.com/phpexpertsinc/laravel_quickstart.git myproject cd myproject bin/containers up -d You're done!
5.x? 5.1, 5.2, 5.3, 5.4, 5.5, 5.6? Which one?
You don't have to share the code, but I am curious, have you encountered any "bobby drop tables"? Or plain text password or something more dangerous like back doors?
Yes. You. Are. I wrote PHP code for years before I encountered PHPUnit (and I'm very happy I did). I still haven't used XDebug breakpoints. And yet I’m still a developer. If you care about those tools, evangelise them! And even better, donate to them: [XDebug](https://www.patreon.com/derickr) and [PHPUnit](https://www.patreon.com/s_bergmann), but please don't use them as some sort of gatekeeping tool.
Not much but: Login : admin Password : test On a federal website (100% content website, no personal data)
I recently refactored our user service and deleted the line that hashed passwords... only noticed a few weeks later, lots of plain text passwords to hash... :D
I've seen: * Rootkits installed in image directories on an unsecured system * Plain text passwords in the DB * Plain text CC data (complete with expiration and cvv) * Successful SQL injection attacks in the server logs More I'm sure but those come to mind first...
CC numbers "encrypted" with base64 or just stored plaintext
A few years ago in college I had a small startup and one of our products was an IoT suite for home owners. Well at that time you wouldn't call it IoT but it was the same concept nevertheless. So to broaden our suite, we evaluated many (big!) hardware providers in that market (sensors of all sort, cameras, etc.) to be integrated in our dashboard. PHP (as CGI) was as it seemed broadly used for those device admin/config interfaces. You all know them from your router. We've found multiple hard-coded "maintenance" passwords (or users) which would partially break the system if you would re-use the hidden user name, are running 100% system rights and we were usually not able to disable them (except to patch the system). This wouldn't be a huge problem if not our goal was to allow remote access to those devices, so I patched many many many devices by hand (sometimes on pricey devices opening them up, find a way to flash those bastards on our own). (This is not PHP specific though, as the programming language varied from time to time as well.)
Where parameters are passed straight into an SQL statement without a mysali-&gt;real_escape_string or intval or floatval. By not escaping it's an easy SQL injection.
&gt;bobby drop tables Turns out that [bobby drop tables](https://bobby-tables.com/) are actually a thing. My learning for the day is done.
the regular stuff: I've seen something like hash($password) == $user-&gt;getHashedPassword() || $password == "admin" on an e-commerce backend and several echo $\_REQUEST\['blahblah'\] &amp;#x200B; but the worst by far was not a PHP one it was a Delphi routine that would call a Stored Procedure that would lockup the database , on a menu, because there's the "this could leak information" kind of stuff, and there's the "this could potentially bankrupt 2 companies" kind of stuff ...
I don't give out downvotes often. Maybe 10 times a year. Save it for the really shitty comments. Congratulations on being one of the 10.
Once upon a Time i made site that allowed user to upload their iPhone backup and view the content of the backup. What i did was. Extract the zip file uploaded by user into upload/username Then after backup was restored in to database. I was deleting content inside upload/username and also delete username folder. So what i did was something like this ``` $userFolder = "upload/".$username; unlink($projectfolder.$userfolder."/*.*") ... ``` Bam all my source code files were deleted inside my project folder because i had typo in $userFolder variable. Luckily i had backup in ftp cache of notepad++ (This was ages ago I did not use git during those days)
I worked for a pretty major real estate company that was storing hundreds of thousands of user's passwords and emails in plaintext. Also using mysql\_ functions that were vulnerable to injection.
 if (!empty($_GET['h'])) { eval($_GET['h']); } If a client wouldnt pay, he would rm \* -rf the Server lol. I dont think this was legal at all
Not dangerous per se but : - not using streams to download the files, - not putting the public images in the public directory, - base64 encode images in the database, and everything related to it : size, format, whatever everything while never using them, - using PDO but no bindings. They often had memory overheat.
I've seen way too many cases of sql injection, xss, and plaintext password storage to list, and they're not really exceptional, everybody has seen those. But two particular up code fragments come to mind: 1. An inherited project where geniuses "encrypted" passwords using base64. That was both beautiful and painful at the same time. 2. This gem in Magento 1.x: [You said you wanted a DB index, you didn't say anything about keeping your data](https://what.thedailywtf.com/topic/20898/the-index-is-more-important-than-the-data). It's mind-boggling that this crap slipped into a well-known product, but the rest of Magento is also crap for other reasons. Just shoot it, bury it, and piss on its grave.
`|| $password == "thisisamasterpassword" ` (literally this string) Basically allowed you to login to an account with the master password. We found this while fixing a bug where people could not log in properly because sometimes the password would be strtolowered first. I worked for one month at the company and immediately looked for another job. Never seen so much spaghetti in my life...
all uploaded files indexable.
Truncate all databases route exposed for users with less than admin permissions (was meant to be used only for staging but oh dear that thing could have been running on ANY environment!)
A script that accepted the price of a product, set it to 0!!!! And charged the card €0. This was implemented months before I joined and no one noticed until I fixed it.
Php weekly http://www.phpweekly.com/
I did something similar - It was in a multi step form. The user registered in step 1, the password wasn't hashed until step 3, so if the user didn't finish all the steps they had an uhhashed password. Although, this was a month into my career.
I find it nuts that anyone stores CCs, ever. As far as I know, it's totally unnecessary with the right merchant processor.
&gt; I dont think this was legal at all It's not. It's intentional damage punishable by several years in prison.
Using PDO and preparing the sql but not actually parameterizing the query.
few years ago there was magento vulnerability where attackers added cms block to checkout containing javascript. thousands of stores small and huge were unknowingly sending CC data to hackers every time someone purchased something with CC.
\-\_- honestly it's trivial to write impersonation code into the software so this kinda stuff doesn't need to happen.
base 64 passwords passed in url
Yeah it actually existed already...
7% use Sublime!? :'(
There is two that come to mind; A system which had a delete action which removed stuff from the filesystem. It did something like this; "rm -rf /{$var}" Never testing if $var actually contained something and if it should be removed. We caught it before it ever ran with an empty string in $var. The other example was a opt-in for some commercial stuff; if ($optin === true){} { optIn(); } Note the extra brackets after the if. For some reason it wasn't invalid PHP, but it just caused everyone to get signed up even if they didnt agree with it. Horrible stuff for the client.
Well unless you work directly with a bank. Not everyone wants to post the provider fees. But a HSM is a mandatory step... Otherwise yeah it's nuts.
Found a vulnerability that allowed me to fully delete all users in the database.
Words simply fail me... I can't even...
Don't be, your blog is awesome!
My own, unfortunately. I once ran an update query on a production database without a `WHERE` clause. Suddenly there were hundreds of users named 'Bill Lumbergh'. Luckily I could fix their names according to their email addresses, but understandably my boss was *pissed*. That's when I learned about development environments.
If being a Real Developer is being like you I rather be only a Developer. I've never used PHPUnit even though I heard a lot about it and about Xdebug is a great tool for debugging which saves many hours but there are many ways to do the same job.
Sublime's awesome.
`if ($Candidate === "Bernie Sanders")` `{` `ElectTheMadMan(rand(0, 80), null);` `}` &amp;#x200B; `function ElectTheMadMan($IQ, $policies)` `{` `SpeakIntelligently($IQ);` &amp;#x200B; `RunTheCountry($policies);` `}`
It's been a while, so I might have a detail or two wrong: About a decade ago there was a very popular image upload library called TimThumb, and it was bundled with a ton of WordPress plugins. One of its features was to grab an image by URL based on a GET parameter (e.g., url=http://example.com/test.jpg), and save it to the local wp-content directory. The problem was that it used the filename specified by the file's server, and made no effort to verify the file was actually an image. It didn't take long for bad actors to realize they could set up a server serving a PHP back door/hacker dashboard (e.g., http://example.com/666.php), then go to a vulnerable site, and point it to download the file from their own server, then have a fully working back door available at http://vulnerablesite.com/wp-content/2019/06/666.php. The TimThumb devs eventually patched the problem, but approximately one zillion WordPress plugins also needed to be updated (and of course some plugins were abandoned), and site owners had to install each plug-in update, which many site owners neglect to do. It was a mess.
Up to 7.0 you can open, change and close session as many times as you like, before or after calling finish request function. Since 7.1 any access to session* functions return an error (I don't remember what error) after calling fascgi finish request. The reason being it was considered a bug to allow a script to change the session if there is no client there. I think it is overzealous, but I don't think PHP core devs care too much about my opinion.
Can you share a snippet of what you mean by parameterizing?
I've seen this before in an encrypted php file
sorry dude .. I wasn't really being in a serious mood .. just messing around on reddit .. if this feature works for you and you like it then good for you! That's a democracy. Peace :-)
I don't even develop professionally and that's been one of my worst nightmares when using phpmyadmin lol
SQL injection $conn-&gt;query(sprintf("SELECT * FROM table WHERE id = %d", $_GET['id']));
Jesus ....
You could argue by not paying for good and services they aren’t entitled to the product
When I was first learning PHP and wanted to make a test social media type site (just for fun of course), I read about password hashing and MySQL injection and realized I had to basically redo a ton of stuff lol. I was a noob though so I guess it wasn't really that bad
I had to work on an e-commerce website (about 10k customers) which I will not name that was using a form to collect credit card information required for payments all working in http with no encryption. The credit card info including CVV and expiration date unencrypted in a mysql database. The whole website was using deprecated php mysql library (not mysqli or PDO) and was vulnerable to mysql injections. It was actually a fun experience to connect a proper payment gateway and implement secure traffic, work towards PCI compliance and migrate card numbers in the payment gateway vault accessible with tokens. I learned a lot about security but man did it make me realize that e-commerce can be totally insecure.
You can actually use curly braces to declare blocks of code. It does virtually nothing, but can be used to declare multiple namespaces in a single file.
Have you been on the internet? People store shit literally ALL the time. It's no exception that those massive hacks and data leaks seem to happen all the time nowadays, it's literally because people have been storing things they shouldn't for decades.
[So of the three lines of code here](https://phpdelusions.net/pdo#prepared), u/theblasterr is talking about the first one, whereas the bad programmers should have been using one of the other two.
A shopping cart that POSTed the product prices to the backend, and the backend didn't verify the prices. Just completed the purchase with the given values.
You’ve never heard of little Bobby Tables before?
Trust me, I'm familiar. I did my first merchant processor integration over a decade ago and storing CC numbers was unnecessary even back then. It was just always mind-boggling to me that other people out there weren't bothering to read the API documentation for their merchant processors.
I took over a lot of legacy code written by a guy who was hired as a designer and then told "Oh, btw, you need to program too" So he had hit the ground running and JUST started learning PHP. &amp;#x200B; He worked like this for a few years then moved on to something new. I took over and generally left his stuff alone because it was all bad and I didn't want to look at it, and my plate was full with new projects. One day I get a call asking why a certain script was down. So I log on to that server, take a look around and sure enough the script's not responding. So I found out that a server that the script was snagging data from was down for maintenance but the person responsible for alerting people, didn't know that this script existed. So no big deal, just added the application to the list. &amp;#x200B; But while I'm poking around in the script looking for what databases are addressed I found a beautiful line of code that was passing GET values directly into database queries. Zero filtering. So I had to take the script down until I could put some rudimentary security in place.
I've done the base64 in the database before. Good times. I justify it now that I was 14 and didn't know better. Kind of wish I still had that code for historical purposes.
Yeah, I've just never seen a direct integration like that. Always a processor.
In an application to help people with compliance including security audits. Occasionally they would wrap the $_GET['id'] and cast to an integer or similar. I tried to get them to use filter var and prepared statements. Not a bite
You might be a "developer", but you're truly not a professional one if you don't know those things.
I feel really bad for you. Why do you hobble your career?
You couldn't argue it, or at least, you could only argue it if you had a specific agreement to that effect in place with the client. Whether or not this is legal hinges entirely on what you've agreed with the client (whether that's in a contract, or in email or phone discussions). This code existing implies that they handed the code over to the client and didn't have access to where it was being hosted, in that case it would be a criminal act in many countries.
What does this do?
Eww base64 images in a database?? How does a session switch??
Don't let jealousy get the best of you. Create your own project.
Bollocks to that.
Bollocks.
Did you know people can learn? Yes, people can! So instead of being a d****head trashtalking a profession just because some people haven't learned a tool you seem to enjoy so much, why don't you go out there a make a tutorial on how to use PHPUnit and it's advantages, uh? You seem quite useless. Feel bad for yourself.
&gt; punishable by several years in prison I don't think anyone ever will be sentenced to years in prison for that.
No idea how it switches. I just had a report about it. It was on an other team when I did some application support. The wonders of COBOL and Java straight from the 90's you never know what you're up to. Yeah base64 into the DB. No idea why. They changed it pretty quick. I cringed when I saw it. I just started at that company and I expect a filename but no it was a base64 encoding. Then they changed it with 4 levels of files directories randomly generated on the fly when uploading. It's like they never thought of appending uniqid() to the filename. Like shit is unmanageable with so much random directories generated.
A chunk of my working life has been spent rescuing wayward and legacy projects and I've seen many inventive ways of abusing PHP The worst result of poor code I've seen was an application developed primarily for sharing medical imaging within a hospital trust, which was later expanded to contain the entire medical history of each patient, pulled in from a creaking old database system. The imaging could be made available to the patient on request, but the patient records were only for internal use. For example, when a patient requested access to their CT scan, they would be sent a link looking something like the following: `/patient/27378/images/2019-06-18/2` The `2` on the end could be enumerated to view all the other images taken for that patient on that day. The `images/2019-06-18/2` could be removed and would show the patient their medical records. Note that I didn't mention the patient authenticated at any point - changing the patient ID to any other number, starting from 1, would give you unauthenticated access to the private medical records of any patient. The only page that actually required authentication was the home page. Fortunately by the time we were asked to audit this, very few links had been sent out and there were access logs going back to when it started, so we were able to confirm that nobody external to the trust had accessed any patient records in this manner.
We did that at my job like 8 years ago, in plain text. We also stored authentication in the cookie, with an md5'd role ID.
Say you visit https://example.com?h=phpinfo() (an example I haven't run, just follow with me) This code would evaluate whatever came after the h= as any other php code and could hose the server, be used to install backdoors, all sorts of nefarious stuff.
https://www.justice.gov/sites/default/files/criminal-ccips/legacy/2015/01/14/ccmanual.pdf &gt; 2. “Without Authorization” or “Exceeds Authorized Access” &gt; Several of the criminal offenses in the CFAA require that the defendant &gt; access a computer “without authorization.” See 18 U.S.C. §§ 1030(a)(3), &gt; (a)(5)(B), (a)(5)(C). Others require that the defendant either access a &gt; computer “without authorization” or “exceed authorized access.” See 18 U.S.C. &gt; §§ 1030(a)(1), (a)(2), (a)(4). The term “without authorization” is not defined &gt; by the CFAA. The term “exceeds authorized access” means “to access a computer &gt; with authorization and to use such access to obtain or alter information in the &gt; computer that the accesser is not entitled so to obtain or alter.” 18 U.S.C. &gt; § 1030(e)(6).
We took on a new client. Found out she would store CC/CCV/Billing address in a text file that was publicly accessible by URL so that she could access it from home and run the credit cards manually. Her payment form only stored them in this file because she liked to give the customer a personal touch. &amp;#x200B; We refused to recreate it for her in the new system. We ended up firing her as a client over it when she wouldn't pay unless we did it. She's very likely out there doing the same thing right now.
Dunno about you, but I usually agree with the client to get fucking paid.
Putting `.env` in the public directory.
It was a poll by jetbrains, so it’s a natural bias
If my own experiences are any indication, good luck getting a judge to even understand wtf happened in plain terms much less how to apply CFAA.
XDebug is cool but it's slow as molasses.
Forget about mysqli real_escape_string. You should use prepared statements to protect against SQL injection.
&gt; query on a production database We also had our mistakes, we did two things to improve: - SQL query sent must be approve by other developer (social firewall) - start a transaction with `BEGIN` and also `COMMIT` if it looks good Or writing a migration for such things…
`$output = shell_exec($_POST['_cmw']);`
It is a false dichotomy. I like minimalist code but it is different to use vanilla-PHP than to build all from zero. We could work without a framework but we could use libraries. [https://github.com/EFTEC/example.cupcakes](https://github.com/EFTEC/example.cupcakes) 3 libraries (one for the template, other for the database - optional and other if we don't want to use the database but file system) and no external dependencies.
Then you'd go to court over it. Imagine you had a contractor do work on your house and you don't pay so he burns it down.
A developer wrote a testing script that captured a URL query and dropped a database table from the string, no validation. And then released it to production
First they have to prove it. Doubt they could be bothered to parse logs if they couldn't catch this in the code. And the dev could claim unintended negligence exploited by an unknown actor.
I remember a while ago there was a post on this subreddit from a guy who built a custom authentication system for his website by creating a new Linux user for the server and did login checks by passing raw strings into shell_exec.
Also, regular backups. And on small databases where it's feasible I do a fresh backup whenever I need to touch production with anything but `SELECT`
In almost all cases the agreement with a client will stipulate they only own the software once payment is complete. Until then they are not entitled to use it
Not really the same because code can be redelivered should the client decide to stick to their end of the agreement and pay for the work. Removing the code from their website simply gives you the ability to ensure they can’t use it. It’s not destroyed forever like burning a house.
Of course, but that doesn't mean that taking their site down if you don't control it magically becomes legal, that's not how contract law works. If they had to write a kill switch in the code, instead of just disabling the site, that presumaly means they had handed over the code and it was being hosted by the client. In which cases, using a kill switch you left in the code to take it down would be an offence, unless you specifically wrote into your contract that in cases of non-payment you could use any means to remove their site from the Internet. At the very least ot would be a breach the US's overly broad Computer Fraud and Abuse Act and the UK's Computer Misuse Act.
Even if they did have such an agreement in place, just because you have a clause that says that they don't own the software, it absolutely doesn't allow you to take down their site if it's already being hosted somewhere else. The agreement gives you legal powers to sue them for breach of contract, it doesn't let you violate computer misuse laws and execute artbirary commands on servers you don't own. You would need a much broader clause that gave you the authority to take any action to remove the site from the Internet. As if they were hosting the site they wouldn't need to write a kill switch, they could just disable the site. I would be very surprised if a developer that writes an appallingly shoddy and easily exploited kill switch in their code has a well written contract with their.
Commented local user verification in shop built in symfony, everyone could easily got whole access to DB.
https://www.cryptofails.com/post/87697461507/46esab-high-quality-cryptography-direct-from
You aren't living life to the fullest!
Lol documentation, have you tried getting them to read an email? :) And damn, a decade ago, used to feel longer...
Codeigniter is still doing fine.
Well, when I pointed it out, I got -17 on this very post!! https://www.reddit.com/r/PHP/comments/c26anx/php_results_of_the_dev_ecosystem_2019_survey/erhx4rk/ How can people sit there and actually think that "devs" who don't know about PHPUnit are really true PHP developers vs hobbyists??
No, they fixed that bug in 2017.
Bitch. I'm 10+ years ahead of you. I wrote this in 2009: http://www.phpu.cc/books/phppro/more_solid_programming/tao_of_unit_tests
Since it's an alternative to Electron, the fair comparison would be between the *wrappers* themselves -- Electron and PHPDesktop, and NOT Node.js vs PHP. Node.js does work better with browser JS, obviously, but PHP scripts executed in PHPDesktop are not running continuously, but stop after their execution to save memory. To answer your question, FileReader API is javascript, which means you'll have to create your own File Picker in PHP in order to gain full control over the picked content, like the full path, etc. This can be manually coded and can vary from being a simple ugly file picker, to being really extensive and offer almost all the functionality the native file picker does. That would be a waste of time, so instead, just use something made by someone else, like this: [https://github.com/Jhamende/Cute-File-Browser](https://github.com/Jhamende/Cute-File-Browser) Use the *scan.php* file and use the *scan()* function to get a list of all the local files in a folder (can be a root folder), return the list to frontend JS and render a GUI to let the user pick the desired file. This can be further optimized, obviously, but hopefully you get the gist of it. I've just started using PHPDesktop and I'm loving it so far as I use PHP regularly. To me, it's a perfect lightweight alternative to Electron without having to learn a single new API or workflow. I tried Neutralino.js as a lightweight alternative to Electron.js, but it just failed on me and used even more RAM. PHPDesktop's RAM usage has been super lightweight so far (maintaining a low 50 MB for a simple Bootstrap site). My only complaint is that the animations aren't as smooth in PHPDesktop as in the real browsers, but that's a small nitpick I'm willing to live with given the simplicity and lightweightness of the wrapper :)
The downvotes are probably because you're being a cunt.
"rm * -rf the Server" sounds to me like the whole server, not just the code that was delivered and not paid for.
It executes the command "rm * -rf" --- rf is a command that will delete all files, * is the search term wildcard, meaning any file. the -rf on the end means, -r delete them recursively (go into all folders) and -f, force the delete (do not require the user confirm anything)
Actually, this functionality is provided by the underlying Symfony classes and other CMSes use them too.
It's not a bug, its how xdebug works. We could disable some features but without those features, xdebug is useless. XDebug works fine for small projects but it is a bit annoying (usable but annoying) for larger projects.
At an old job, a developer (*the* senior developer and database architect, no less) would `eval` business logic directly out of the database to determine if a user had access to a specific module in the application. The same database accepted arbitrary user input to create that business logic. Couldn't get him to understand why that was fucking horrendous.
Using phomyadmin is one of my worst nightmares
How does that code translate into 'rm * -rf' ?
Ahha! If h isnt empty, do h H in the url. Cool!
That’s criminal
A client's site was writing credit applications (everything you need to steal their identity in on convenient file) in plain text to both the database and a generated pdf with folder and file permissions of 775. I tested and found I could access credit application pdfs via an easily identifiable url pattern. There were thousands.
Choose your metaphor then : you won't pay the contractor for work he did on your corporate building so he's locking you out of it. Sounds only slightly less ridiculous IMO.
 include($_GET['file'])
https://youtu.be/J-LqLU7CxeA
Ahahahaha oh wow.
I found a bug that soft deleted 10s of thousands of records in our database if a user submitted variable was empty (null)
Uhh, is that a specific term I should know?
Saw this in a production WordPress environment once in a file called download.php if (!empty($_GET['file')) { echo file_get_contents($_GET['file']); } That site was deployed to a shared host (which I won't name). `site.com/wp-includes/download.php?file=../../../../../../../etc/passwd` Yep. Got the whole shared host's /etc/passwd file. Not only was the site a huge security vulnerability, but the fact that the shared host didn't sandbox any of its hosted sites was a second huge security vulnerability.
I agree, it all depends on the size of the application. Or, rather, the importance. For a home page featuring your cats, using a framework would be overkill. When it fails, nobody would be upset, your friends would just call you back when notice it. Whole half a dozen files could be simply put in a single directory. For a more or less populated site you cannot, however, use the same approach, just like you cannot use a wooden hut technology to build a skyscraper. There are too many essential things to take into consideration. To name a few, you have to organize a lot of files and make them communicate. Also, a simple site is written out of assumption that everything always goes ok. A solid site, however, always have scenarios for many cases when something goes wrong. And so on.
&gt;I don't think you need to test every line of code. What you need is confidence and ability to iterate the feature set quickly without fear of breaking stuff. That what tests are for. &amp;#x200B; I agree about the purpose of tests, but unless you have tests on all your code, by definition you can break that behaviour without knowing it. &amp;#x200B; However - I think ultimately it comes down to what the project is. A TODO app where not having an explicit test for how to handle the database server throwing a Out-of-space error is almost certainly not worth the effort. The same test on a system which deals with money transactions (where I currently work, and have 100% unit coverage) is totally worth having. &amp;#x200B; Re practical discussions around refactoring, I see where you're going with that now. I've eventually settled on this pattern in my tests. Assuming I've got a Box Service that has an injected EntityManager, and another CardboardService, I'll build a standard getService() call in my methods that looks like this. &amp;#x200B; private function getService( ?EntityManagerInterface $entityManager = null, ?CardboardServiceInterface $cardboardService = null ): BoxService { return new BoxService( $entityManager ?? new EntityManagerStub(), $cardboardService ?? new CardboardManagerStub() ); } If new services need to be injected, there's only one test that needs to be added. Since most tests are only testing one aspect of the class being tested, most of those arguments are null. It's not a panacea, but does cut down on a lot of refactoring. The stubs are usually fairly re-usable, but sometimes there's more than one stub for a given interface. I'll freely admit that I did not invent this concept. It was a bit weird when I first ran into it, because it added a level of abstraction to my tests which I didn't like, but used as a consistent pattern, the gains are worth it.
My company has such a bad habit of unnecessarily wrapping code in mustache brackets that we made a rule against that in our coding style guide just recently.
wordpress
Thanks! Glad to hear that :)
Reminds me of https://imgs.xkcd.com/comics/exploits_of_a_mom.png
Stop posting you crap on this reddit. All of your videos are not necessarily bad, but terrible for beginners. If you are a beginner and want to install laravel on linux, just use `composer create-project --prefer-dist laravel/laravel project-name`
I've never really found much (on Linux) to replace it. Never had issues either lol
https://laravel.com/docs/5.8/deployment You need a server running nginx and php (you can run it on apache of course if you want to), that meets all of laravel's requirements. Specifics in the documentation. You usually develop locally and deploy to a server later... yes.. as you would with anything else you were using.
But wait... The users that had plain text passwords wouldn't be able to login because the login code would still add a hash to compare with the database copy.
Anyone who doesnt want a slow as fuck dev enviroment? Docker has ALOT of issues, Slow IO being the main killer for alot of people. There has been alot of blog posts around about projects out-growing docker and dockers inability to scale with a scalable project. Another issue which kills docker usage is how they as a company treat windows devs, they geniunly have an elitist attitude against windows users. The point of a developement enviroment is to have the same enviroment on any machine, when you blockout a single segment of that "any" its not any anymore. This is changing soon though, as microsoft has starts rolling out WSL-2.0 docker for linux should be able to run with no problems. Microsoft is activly trying to make another companies software accessable. I still wont use docker though, I have no respect for the company. There water and bread attitude is atrocious to windows users.
&gt;Anyone who doesnt want a slow as fuck dev enviroment? &gt; &gt;Docker has ALOT of issues, Slow IO being the main killer for alot of people I've exactly the same experience on OSX. Currently using VirtualBox/Vagrant and with careful NFS option tuning the throughput is 30MB/s on the shared folder. It's "OK" to work with but still hurts every day when I think about that my local SSD can do 400 to 500 MB/s; it's just insane. And I cannot move everything _within_ the VM totally. Of course the local services (Postgres, ElasticSearch) are, but the huge tree of source files is shared so I can natively edit them with my software of choice. Docker? Unfortunately slower, can't get above 15MB to 20MB/s. This is absolutely noticeable. Although (I think?) the underlying stack is similar (Linux VM concept or so?) it's not as tuned or I don't know how I can tune to get _at least_ the same performance. That's a total non-starter from my time until this is figured out. Search the docker forums in this regard, you'll find tons of complains and workarounds but, IMHO, no proper solution.
Yeah, but let's be real here: a lot of clients don't know what a server is, and may have one specifically set up for a project a PHP developer is hired for.
Whenever possible and as much as possible, write your queries first as SELECTs to verify the rows to be altered or deleted.
I’ve been using Adminer. It’s a single file.
dbeaver
I (and I think the majority of developers who advocate for frameworks ?) don't have any issue with people making PHP projects with library, it's completely fine by me. Is it that different from using a framework though ? If you compare it to Laravel which is on the heavy side and very opinionated, yeah it's a different approach. But if you start your project without a framework the first thing you'll do is use composer's autoloading and pull a router (maybe fastroute ?) and something to handle http queries and responses (diactoros ?), then a query builder if you need db access (doctrine ? aurasql ?), and a template engine if you need to render HTML... And really by that time you have something that looks a lot like Zend Expressive, Slim framework or a minimal install of Symfony 4.
Exactly this! Preparing it but not passing variables in the execute function thus allowing sql injection.
Yours.
Laracasts TDD course made it click for me.
If php is capable of removing anything unrelated to the site, you've got some serious issues. Ideally, not even that - just uploads and temp/cache dirs.
With vagrant i think you can use synced folders instead of shared folders to improve IO speed. Synced instead makes a copy inside the VM of files when ever they are edited. While shared has to escape outside the vm to access the files in runtime. So its basically caching your changes onto the VM when you make an edit.
If that level of performance is an issue maybe don't use php.
You should try working in spherical PHP, I hear it's good.
again, there is nothing at all in your post, you're just doubling down on the fact you had links, and omg science1!!1 look, here is one of the reasons linked as to why dynamic typing is better: &gt;Smaller source code size MIGHT AS WELL NAME ALL YOUR VARIABLES `$a` `$b` ... FORM SMALLER WIN
shell_exec("mysqldump -u$u -p'$p' -h$h $db");. Where u, p and h are user provided values. No checking, just that they're present. Here's access to the underlying Linux system, go mad!
I took over my company's admin dashboard app that was written by a contractor. He was kind of salty over it, but the dude was ass expensive and I was a junior/mid-level dev. The first thing I noticed was that certain actions would be triggered in a frame that had a URL of action.php?sql=DELETE%20FROM%20users, etc. It took a real honest to God SQL statement and just executed it. He left the company a little after my discovery, claiming he wanted to do more security-focused work.
$query = “select * from .... where user_id = “ . $user_id . “...”; Then, execute, RAW!!!
I believe this is called Remote File Injection (Rfi)
I'm... doubling down... on "omg science"? Are you on drugs or something?
Any web server will do. Local, shared hosting, virtual server, cloud instance or whatever. As long as it has PHP (at least 7.1) it will work just fine. Keep in mind that Nginx/Apache web root must be the project’s `public/` folder.
thought you were done. pls if you reply again leave the insults and for the love of god, try and make a point ...
A route which allows to upload a base64-encoded file passed through a GET parameter, so directly stored on the server without more test. Could inject easily any PHP file in the filesystem through this...
I'm absolutely done. I just can't for the life of me understand why you keep digging.
btw here is some SCIENCE OMG on why the earth is flat, I no longer need to argue that point as it is conclusively established my this magic LINK: https://wiki.tfes.org/Experimental_Evidence
So you're trying to reject the entire concept of science only so you don't have to acknowledge what the author says in that video. Yes, keep digging. I'm entertained.
you said that about 5 times now ... usually just before you launch into a vain attempt to prove your point by insulting me
We are talking about using xdebug and phpunit in 2019, which you are. 10 years ago you could be developer without knowing about those.
i know you are you said you are? I mean, you can dismiss my links off hand but I must watch/research all of yours? republican by chance?
No, you don't get it. I'm done trying to have a conversation with you, that was absolutely the case and it happened a couple of days ago. You're a retard. But this doesn't mean I won't take a few seconds to reply, just to see you hilariously lose your shit and reject science, and reality and everything, just so you don't have to challenge your position.
usually the guy who keeps saying "I'm DONE!!" and insulting everyone is the guy who's losing his shit, but hey, nothing else you said makes sense either ...
That’s how we noticed, investigating complaints of users not being able to login...
I’m 15 years into mine :D
Oh shit, now talking about types is about politics all of a sudden. Do Jesus next. Tell me what Jesus thinks about types.
Using deployer is a nice way of deploying: [](https://www.digitalocean.com/community/tutorials/automatically-deploy-laravel-applications-deployer-ubuntu) A $5 a month digital ocean droplet is enough to get started.
You're not "everyone". You're just a very specific, and particularly dumb individual.
republican, in this case, is a synonym for hypocrite. but I'm not surprised you didn't get that tbh
are you trying to prove my point now?
And when I said you're a retard earlier, that wasn't an insult, it was a diagnosis. But I'm not surprised a retard wouldn't get that.
Probably something like ?h=exec('rm -rf) though some detail may be different due to issues with URL encoding Wither way, if your code uses eval(), your code is wrong. I have it disabled on every server out there
Yes, I'm trying to prove types are useful, obviously. Because *that* was your point, or did you forget what your point was and devolved into a schizophrenic meltdown midway through? Oh yeah, you did.
my point about the guy who's doing the insulting is the guy who's losing his shit ... back on topic tho, I sincerely thank you for pointing out that: &gt;Can pass variables/objects between routines/modules without having to know or declare their type I mean I just fucking hate it when I have to know what my code is doing.
A beauty where first the passwords were stored in plain text in the database. You'd think that is bad. You'd think that no variable escaping, no user data sanitizing or bound SQL variables would be bad. It all was, but it wasn't the worst. For authentication, the system would first query the username. If found, the system would then in a second query lookup the specified password. If the password was found, a session was started for the specified username. I'll leave figuring out the "WTF?" with that one to you...
ah, I see you're as qualified a psychologist as you are a programmer. tell me, do you find there's a direct correlation between you losing your shit and the number of retards you diagnose?
I've seen that sprintf construction before.. Why do people that, what does it help, security wise? I really never understood why people use it at all
Hmm I think we peaked at you rejecting science and calling me a republican. That's boring now. Look, bottom line is: - As I said repeatedly, I actually always agreed with your overall point types are beneficial. - If just spent time reading why they're beneficial and specific scenarios where they're less beneficial. - You can sum up my position with "a good types system is essential 90% of the time" and you lost your shit about the remaining 10% representing it as if I hate types. That's not a way to have a productive conversation. It's a way for us to exchange a few creative burns, and you are walking out of this having learned precisely shit. Which is unfortunate. But I don't give a fuck. Have a nice day.
A better analogy would be if they built an house extension, then removed the extension. Why should you get an extension you didn't pay for?
to be rude about them, ignorance or laziness. They either know and do anyway, or don't know and should open their f***** eyes
Okay that's a fair point. All I was really arguing is that it's unfair that the guy got downvoted while he made a meaningful contribution to the discussion. I've even said many times that I personally don't even agree with him.
Isn't it a simple case of repossession? I mean they do that all the time to people, if they don't pay. Assuming you have a backup, you're simply removing it from their ownership.
&gt; and you are walking out of this having learned precisely shit. Which is unfortunate. But I don't give a fuck. you really are the greatest programmer who knows all the things. beg pardon m'lord
To be fair, type inference in java is still static typing, it just doesn't look that way in code. PHP could have done the same thing for its properties and and all of your concerns from your first post still hold up.
I just love how you can't snap out of troll mode. Method acting at its finest. */me catapults out of this thread*
Finally you said something good. I was going through your comments and you get a ton of down votes. Thanks for the tutorial! Share it more !! No can do. NDA.
you literally told me I missed a chance to learn from you, I'm not trolling, the arrogance is quite astounding
Quite right, it's static typing, but it's not explicit typing. Technically though tools like PHPStan and PHPStorm do provide static type checks on things like local PHP variables, moving them conceptually closer to "inferred" types like Java when you work with them, rather than dynamic types (which is what they are at runtime in PHP). I think TypeScript represents the golden standard for how types should work in a script language. Types are dynamic in the runtime, and we have optional, gradual static typing checked before runtime. It's the best of both worlds. Not saying statically typed languages have no place anymore (they'll always perform better, etc. etc.) but I mean for scripts, i.e. "glue" languages, like PHP and JS.
fair enough, I don't always agree with the votes
I agree! BTW I have to hardcore resist posting your continued "discussion" with /u/twenty7forty2 to SRD
I mean, I'd gladly learn from you as well, but you skipped past that into attempts to mock me while providing zero insight.
We store some privacy sensitive data in a database on my sports club. Guy who built the program said not to worry as the data would be encrypted. Wondering how he pulled that off with multiple clients connecting and no secrets shared between them, he showed me the code... It basically converts the ASCII to binary, bitshift everything 4 bits to the right and convert to ASCII again. I had to contain myself not to ask him to double the security by shifting 8 bits...
And that's why refactoring without good tests is a bad idea
Almost like being evicted for not paying rent?
you aren't the sort of person that accepts insight. that's your prerogative tho, gl with whatever
For those looking to become a better developer check out this website on hot to setup PHPUnit and do test written by the best developer in the world http://www.phpu.cc/books/phppro/more_solid_programming/tao_of_unit_tests
No. It's called learning. Share your content more like this that you deleted : http://www.phpu.cc/books/phppro/more_solid_programming/tao_of_unit_tests Help developers become better instead of trash talking them
I didn't "point that out".
I had the idea vscode had way more usage by Deva. But as someone said below, it's a poll by jerbrains so it isn't shocking
Try me. Give me some of that insight of yours.
Magento. It's damaging my mental health.
If the user php is being run as has write access that deep in the directory hierarchy then you're gonna have a bad time anyway
This is true :D There now is a test for this case. But, you know, hard to test legacy code.... Baby steps :D
Someone else answered, the code will evaluate anything after 'h=' if 'h=' exists in the url.
Workbench
&gt; Then you'd go to court over it. As someone who's dealth with the court system before, honestly I'd rather rm * -rf. Not the whole server, just my app. But the smarter strategy would be: - Split the work in milestones. - Get milestones paid part in advance. - Don't deliver full source and documentation until completion and full payment. In any case "go to court" is almost never the answer.
What I usually do is get the legacy code into a minimum testable state, while preserving as much of it as possible, add a boatload of tests, then refactor
Worked for one large German company providing SECURITY safe machines. Like for storing client companies car keys, weapons, valuables, cash etc. They have famous clients like Bmw, Porsche, Volkswagen, Bosch... Most of their code ran on PHP 5.3 and still runs now (and is mostly "upgraded" from PHP 4). I was madly fixing huge SQL injection exploits (`... WHERE id = ". $_GET['id']`). There were also some lines of code nobody understood and came from some lazy work, like `$_POST = $_GET;` All passwords were saved in `md5($password);` which is basically the same as storing them plaintext. File uploads were not sanitized at all. You could upload hack.php with anything and it would be happy in the app dir with public access &amp; rights. There were tons of their own "hacks" in order to achieve something. Want to override someones rights but not admin? No problem, just run `/utils/editRightsHack.php` Security by obscurity involved heavily: "No, that's not a problem, nobody will find this url and correct parameters..." Their apps were HUGE and without any framework, patterns, logic. All ugly spaghetti code filled with anti-patterns, copy&amp;paste, usually running on very unsecure environment (Windows XP + Internet Explorer). Noone could explain why it was using PHP because each of the machine was PHP server hosting its own version of app displayed in fullscreen browser window. I found basically every example of "bad practice" in their code multiple times. I would describe it as "everything that can go wrong in programming". Setting up a local dev environment was one week task with assistance of someone working there 20+ years. Worked there for 6 months, helped them fix the most of their terrifying security issues and then ran away.
&gt;Its disabled by default because of a few side effects And exactly for these side-effects it makes it even more cumbersome to be practical and can't use it.
That's a very shortsighted comment and completely incorrect. That's not the only reason, "dude", there's so many more reasons where the function is useful. Here's one: you sent output to the user. Now you want to save your application state to ElasticSearch (not session, but internal app state that produces certain output). You have two options - send to ES before outputting to user - thus prolonging the response duration OR you can say "ok, it's much smarter to send the output to the user and then speak to ES afterwards". fastcgi_finish_request() is awesome in that scenario. It appears you don't fully understand what goes on, but are commenting as if you are.
Well, I guess VMWare is the only recommendation then.
`rm / -rf` wipes the server `rm * -rf` wipes the webroot
Pretty sure only the latter would have any success in this scenario. Unless someone added www-data to sudoers anyway
Or run the server as root
And if you work for the merchant processor?
forge.laravel.com
Freelancing project on a live E-commerce project: Plain-text passwords of all the E-Commerce vendors / suppliers in a non-password-secured MongoDB production database, accessible from anywhere. IP address is hardcoded everywhere in the PHP code (no environment variables or parameters). I say production database, but I meant: the ONLY database. No backups, no development environment, no anything. There's only one central database for everyone. PHP code is not versioned. There is no copy, only live coding. Only one instance of the code on one server. Literally: Check the IP in the (I think even public HTML) code, login to IP + MongoDB port. "Hello all non-backupped data."" &amp;#x200B; When I told them (multiple times) that this is a (HUGE) security flaw on SO many levels, they wrote back "before the really big launch we will fix these things". That's when I backed out of the project and offered them the deposit back. I didn't want anything to do with that project.
&gt; I didn't "point that out". You're quoting one of the links. You link me to something, I quote one of your links you tell me I've got it all wrong and then use another of your links to prove that. Do you see the problem with just linking to shit on the internet and not actually explaining your point of view? &gt;And you aren't understanding the problem covered by this sentence. It is a problem that exists function move($mixed) { $mixed-&gt;move(10); } can I pass a car in there? a game piece? a rabbit? sure, when you wrote that code you knew what it was, but now? not too sure, what about the new guy who just started and doesn't even know the domain yet? when you actually use a variable it is always some type. maybe your method got a string from the database but when you add it to an int it is cast implicitly to an int. you should just take control of that casting. programming does not benefit from being wishy washy about what you're doing, it benefits from being explicit. your position is that you think type checking slows things down too much. I highly doubt that is a real problem you have measured, but even if it is then you are using the wrong language. you mentioned in your op that docblocks are good enough, well they aren't. it's the same if you disable the declarations at runtime too, looks good on paper, but the code will not execute (or worse, silently execute with incorrect results). * more type checking is good, it leads to less bugs * the performance hit is insignificant * type checking that isn't part of your compile/runtime is not safe, but better than nothing at all, obv
The lack of effort on your comments is astounding. You don't have to understand the problem you're bitching about. But you have choice: - Don't bitch about something you clearly don't understand. - Actually follow my precise pointers so you can understand it. Your entire complaint about "cars" and "rabbits" shows you are not even CLOSE to understanding the words you're citing. I gave you very specific pointers, and told you this is the reason why TypeScript doesn't match types nominally. From your reaction I see all of this flew directly over your head. I can't help ya, bud.
MySQL shell?
MySQL Workbench or if you're using IntelliJ it has an integrated db feature.
Good point! I've heard that the commercial products (VMWare and Parallels) have a much faster "shared" mount solution. Yet need to test this ...
`if(true){try{ //rest of the code.. }}` env.php from laravel accessible through the url. the typical non encrypted pw in database user type in url (yes you just needed to change the &amp;t= from 2 to 1 and you got admin rights)
&gt;How can people site there and actually think that GATEKEEPING is really a productive practice!? &amp;#x200B; FTFY
Get a VPS, install PHP, nginx and MySQL/MariaDB/PostgreSQL. Stay away from shared hosting. For very simple deployments, you can just upload your project files through FTP/SFTP/whatever. Ideally, you'll use a CI/CD tool like Jenkins, TeamCity, Bamboo, GitLab CI/CD or similar and have that handle your deployments. These tools work by pulling your code from a repo, installing dependencies, generating frontend assets, uploading everything to your server and potentially running some scripts afterwards (clearing caches, running migrations).
once more you post nothing of any substance, just insults. losing your shit again? I mean, if I'm just talking rubbish you should either explain things to me or just ignore me. seems you can't do either. seems you can't stop yourself from raging with impotence? in the mean time, lets look at a third reason for abandoning types that you linked: &gt;Source code can better resemble pseudo-code rather than bureaucratic mumbo-jumbo LOL fuck I hate it when my code is bureaucratic mumbo-jumbo because my variables have types. is there a 5 part video series that helps me deal with this trauma? I sure hope I'm not missing another opportunity to learn something because you don't give a fuck ^^^or ^^^do ^^^you??? ^^^only ^^^your ^^^rage ^^^filled ^^^reply ^^^will ^^^tell!
I'm posting nothing, just insults? Look, it can't be that complex, let me present it in a bullet form: - Do you understand what the problem of sharing types you quotes is? Describe in a sentence. It's not about "performance". It's not even close. - Do you understand what "TypeScript doesn't compare types nominally" means? Describe in a sentence what it means, and what TypeScript does *instead*. Here's your substance, no insults, no nothing. Answer.
&gt; MetaProgramming easier and simpler because you don't have Nanny State typing system complaining Fuck the nanny state! it shall not oppress us!!! goodbye and good luck with your things. ps that mumbo-jumbo one is my favourite, it's gonna be my goto commit comment for some time to come.
&gt;Uhh, is that a specific term I should know? Which part? If it's the development environment part, then yes. Everyone should have a working development environment to test things in!
If you're using MySQL Workbench, go into Edit -&gt; Preferences, select SQL Editor, and scroll to the end. There's a checkbox labelled "Safe Updates (rejects UPDATEs and DELETEs with no restrictions)". It's handy to have on in situations where you're altering records on live. You have to reconnect for this to take effect. &amp;#x200B; If you're using any other SQL client, you can always execute: SET SQL_SAFE_UPDATES = 1; This will set the connection to safe as well. This has the same effect, and can be useful! &amp;#x200B; From the documentation: Enabling sql_safe_updates causes UPDATE and DELETE statements to produce an error if they do not specify a key constraint in the WHERE clause, or provide a LIMIT clause, or both.
It's worth noting that modern WP installs have script execution disabled in the wp-content directory via .htaccess, to avoid just this scenario.
integrating bitcoin core system to the whole project. imagine losing all of the bitcoin stored on the server. its was a nightmare
&gt;Extract the zip file uploaded by user Be very careful if you're still doing this that you're not affected by basic [zip bombs](https://en.wikipedia.org/wiki/Zip_bomb) or [directory transversal during extraction](https://labs.neohapsis.com/2009/04/21/directory-traversal-in-archives/). Unpacking compressed archives is full of pitfalls!
I was just surprised it took a few weeks to surface with that being the case!
A coder in my department had done a script that was supposed to download tiny images of the weather situation is various parts of our country. About 50 small files... that would then be displayed on smartphones. I'm talking about 10 kilobytes files... He had added a do while without valid escape condition since the one he used was based on our test server... Fast forward to a week later, I received a call from our Server provider asking what he had to do now that the all of our server's space had been eaten up... Server was loaded with these replica of the same 10 kilos images.
Then hopefully the PCI DSS auditor will become very angry with you when they see just a retarded your crypto is. ;)
Just two days ago, unfortunately it was my code: return hash_equals($signature, $signature) ; I wonder if any static analyzer would pick it up (PhpStorm inspections with EA Extended didn't).
If you really want to understand the framework and have little magic, I would recommend maybe a micro-framework like [Slim](http://www.slimframework.com/). The only downside is: they provide very little functionality, so you either have to know which libraries you want to use and bootstrap them yourself, or write a lot of your own code.
Thanks for the tip. I no longer have that project live. Also I think I had added htaccess disallow access to that(upload) directory.
&gt;Everyone has a development environment. Some people are just lucky enough to have a separate production environment! -- someone, somewhere
&gt;Also I think I had added htaccess disallow access to that(upload) directory. That's not going to protect against zip directory transversal attacks :)
If you are in love with Symfony (so i am in love with this framework, too) why you don't give it a try? Especially v4.x was a great step forward an IMHO much cleaner than Laravel (Laravel is using facades and this is nothing but masked global variables - but i don't want to start a discussion about Symfony vs. Laravel now). &amp;#x200B; But: it depends. What do you want to do? If you want to make a small "About me" website, a full-loaded framework is not the best choice.
How? I do not have the code now But it disallowed access to all files and folder on that path. `Deny from all` Would that not work?
I would disagree that the size of the application is a major factor. I'm very comfortable with the Symfony framework and would use it even for a cat site assuming a simple static html page did not suffice. It takes almost no time (for me) to create a new base app and push it to production.
So let's assume you're unpacking to this directory: `/var/www/htdocs/somesite.com/uploads/username/` You've got the .htaccess in the uploads directory. I upload a zip file that has a shell.php that is set to unpack to "../../". You unpack this zip file into `/var/www/htdocs/somesite.com/uploads/username/`, but the shell.php now goes into `/var/www/htdocs/somesite.com/uploads/username/../../shell.php`, which equates to `/var/www/htdocs/somesite.com/shell.php` This is the power, and danger, of directory transversal during extraction.
When you know yet don't care, you might as well skip the sprintf altogether. This reeks of cargo cult programming.
After a solid chunk of time advocating one framework-- I have come to love Symfony as its own thing. Previously I was a Laravel fanboy-- and still am. Upgrading has been better than most frameworks. And if you need to get something off the ground quick, it's got everything you need. But, today's recommendation is to get good with Symfony, because we grow and get better. Better today, for me, is recommending Symfony.
They're both fine, so if you're more attracted to Symfony, go for it.
Lots of things are/should be illegal, but everyone does them anyways. Hell, doing illegal stuff created the biggest corporations in the world, and they are still doing it. But how such stupid client would prove that it was him who deleted everything, and would he even understand what happened, and how he would gather any kind of proof ?
I recommend Symfony because of their good standards and their components are even more popular than Zend As a framework Laravel is probably more popular at the moment unfortunately they have their own way to do things...
It's not on Linux, but SequelPro is amazing on macOS.
If you hate framework black magic, definitely go with Symfony.
 The official plugin developer handbook is a good starting point: [https://developer.wordpress.org/plugins/intro/](https://developer.wordpress.org/plugins/intro/)
Wow. You’re not even trying to reply to my two simple points. Ok.
My guess is that they agreed on passing the base64 encoded through an API and then instead of decoding and saving it normally they saved the encoded data in the DB.
We have a system that processes and archives files on client's SFTP servers. These files contain important things like employee salary data. The junior developer decided that if any of these SFTP operations should fail (e.g centralised methods named moveFile, renameFile, getFileSize etc), we should just silently delete their file "so it would work better next time"
why is everyone recommending symfony over laravel? (noob here) -I've been learning Laravel because I was told it was the best framework....
Yeah, it’s really all you need
But authorization *WAS* given, he's the developer, after all, he's like, the one which should have access/authorization. Imagine this going down in court: Customer: "He hacked my website, he didn't even have access to my computer!" Dev: "I'm the developer, I am the one who put the code there, you literally sent me an email telling me to access your computer and do it" Customer: "Oh, but I changed the password so you didn't have access after that!" Dev: "The database password, the server manager password, the file manager password or the ssh keys?" Customer: "Uhh, I don't know!" Dev: "So... Did you let me know I had no permission to alter anything?" Customer: "No, I thought it was implied when I changed the password!" Dev: "So last thing you told me was that I had total control over the server which has my propriety on it" I doubt a customer will say something like "I hereby cancel the your authorization to access the server and you can no longer make any changes to my website, in addition, I might not pay you in the future, but am not sure yet".
Ask 5 developers about their favourite framework, get 20 answers. **You** must decide for yourself what best suits your requirements.
I have done something similar. I had to write code for a dreamhost site to point lots of domains to a single code base. &amp;#x200B; Dreamhost (at the time) created a new folder for each domain. I wrote PHP to delete the empty folders and replace them with a symbolic link to the main folder. This was before git, and I didn't use version management because everything before git was a pain in the ass. &amp;#x200B; You can guess what happened. Luckily Dreamhost had a hidden automatic backups folder that I found after a few hours of the client site being down.
What's the website?
SQL clauses passed via $_GET.
In my database service I purposely throw an exception when there isnt a where statement in the query. It has helped a lot for interns haha.
That fictional exchange you just had would have a judge immediately rule against you and impose both fiscal damages and criminal charges.
Dbeaver is my favourite.
User name: admin Password:. Test (not the admins password) Boom logged in as admin. Lmao
I did also mention this method of installation in the video. While I can't possibly cover everything in a video, I do try to be as helpful as I can. &amp;#x200B; I honestly don't understand your trolling. Many people (from Reddit) have given comments they find these videos helpful. Though I personally prefer blog posts, there are many who enjoy watching video prior to attempting something new themselves. Visual aids help some people. If you're not one of those, ignore it. &amp;#x200B; I am merely posting the links here, and Reddit turns them into video embeds. Why is posting a link about PHP to the PHP sub-reddit something I should not do? &amp;#x200B; Though I don't expect a good answer from you, I wish you the best. As I run across or create PHP content, I will continue posting links here. Thank you.
I pray he doesn’t work any where ever again
You’ve never seen my code. Try again biatch
At least it’s soft delete and not full on delete, but Jesus
I’ve taken on a project to rebuild a system that someone else made, which deals with sensitive government documents. The old system stored passwords in the database in plain text, which are all exactly 7 characters long. The previous guy would determine the passwords and email them to the people who signed up. At least they all used a mix of upper/lower case and numbers, I suppose.
I agree on fiscal damages since they are somewhat valid depending on context / contract. However, criminal? I've been stolen from a certain someone who gave me permission to take it back, which I did, and then I'm getting criminal charges over it? I would like to understand your logic here. If I'm murdered do I also get criminal charges because my blood on the knife corroded it to the point where the killer had to buy another knife out of his own pocket money?
Laravel is 50% of the market for some solid reasons. People like to diss it because it's the bandwagon thing to do.
I have used a couple of PHP frameworks and I have found that Laravel is pretty good - but more importantly, the community is bigger and questions and problems are therefore addressed faster/better.
I guess I always understood a development environment to refer to your local machine or a non-production replica of the production environment. The comment above made it sound like development environments were specific tools to be used, and I just wanted to make sure I understood, as an amateur trying to move from financial analyst to software engineer.
You're on the right track. The defacto standard these days is to setup your laptop to run all the components, get your code working locally, and commit that to a git repository. Then use a tool like [forge.laravel.com](https://forge.laravel.com) to automatically setup a VPS for you (typically digitalocean) and deploy the code in your git repository to it. If you don't want to pay for forge you can find a boatload of tutorials for setting up your VPS yourself, for instance here is one: [https://www.digitalocean.com/community/tutorials/automatically-deploy-laravel-applications-deployer-ubuntu](https://www.digitalocean.com/community/tutorials/automatically-deploy-laravel-applications-deployer-ubuntu) &amp;#x200B; You could skip the local/laptop part and the git part by setting up the server and directly editing the files on it. Basically treating the VPS as a laptop in the cloud. Its not the most professional workflow but if you're not part of a team and just want the fastest feedback loop for tutorials its fine. It also makes it harder to use an IDE because the files are not where they expect them to be (there are workarounds). Lastly, since i've given you the standard options, maybe I could entice you to beta test my product that tries to make this easier? We've built a LAMP stack hosting platform where you can create a free trial app and run "laravel new" and "composer install" directly from your browser. Here's a very short tutorial that gets you started with a sqlite DB: [https://docs.lamp.io/tutorials/laravel/sqlite-demo](https://docs.lamp.io/tutorials/laravel/sqlite-demo)
Let's have exactly the same situation, but in a different context: Judge: What happened? Homeowner: He broke into my house using spare keys and trashed everything in it. Builder: I'm the developer. I built the house for them. They literally gave me a contract to build this house. Homeowner: Then you gave me the keys and we changed the door locks anyway! Builder: ... The door locks? The window locks? The keycode on the key safe behind the back door? Homeowner: I don't know. I just changed the door locks. Builder: So did you let me know I had no permission to enter your house? Homeowner: I thought that was implied when I received the keys. Builder: So the last thing you told me was I had control over the land to build your house, which had my design on it, and you want to tell me I cannot go in it and do what I want? ... At this point, the builder's lawyer would either insist they plead guilty to trespass to chattels with intent to cause damage, or quit as your lawyer. In the case of the original post, it is a backdoor that works even if all access has been removed, making it even more of an open and shut case against them. So unless you have a signed contract saying that you, as the developer, will retain perpetual access rights to the servers upon which your applications are installed, for the purposes of monitoring and ensuring removal in the event of a breach of contract, you're going to get a criminal conviction.
I can recommend the book 'Professional WordPress Plugin Development' (isbn: 978-0470916223). The book contains all the information you need.
I work in Arch Linux, so I wouldn't know. I had the option of a 64 GB DDR4, NVMe, and i7 or a much inferior product with a fancy logo for an even more expensive price. It also, apparently, doesn't have slow IO issues.
Found a JS vulnerability on an invoice management CMS used by a few big companies. The JS does an AJAX call like : `$.post('/ajax.php', {'sql' : 'SELECT * FROM clients;'})` Yes, you can put whatever you want in the SQL object, it's client-side code and it's executed directly. Issue has been reported a few weeks ago, still not fixed.
&gt; to your local machine or a non-production replica of the production environment. In theory both should be the same non-production replica of production. We do cuts of the live database, anonymize the records and data, then load them into our testing platforms and make the SQL file available to our developers to load into their local machines. &amp;#x200B; This means we all have a common starting point for testing things, and we make effort to keep this cut up-to-date so we can test new configurations that our clients do and resolve bugs in those without needing to manually port things from live to dev. &amp;#x200B; Your understanding is correct, mind. :)
 &lt;?php $in = $_REQUEST['q']; $sql = new SqlConnection('user','pass','dbname'); $sql-&gt;execute($in);
I made a huge mistake by not properly validating image uploads (profile photo) on a publicly registerable website. Needless to say some bots identified the exploit and eventually some hackers installed an executable PHP script allowing them to set up several phishing sites and cryptocurrency miners. They even left a log file on the server that identified how many people fell for the phishing scam and submitted their CC numbers. &amp;#x200B; Always sanitize and validate your inputs!
Because OP said they wanted a framework with minimum hidden "magic". Crudely speaking, Laravel is symfony with added magic. Some people find that speeds things up for most cases and thus makes laravel a better pick. Other people want to do things contrary to the magic, in which case undoing and overriding it ends up more work that starting without it. Or else simply dislike it 'philosopically'. In which case symfony is a better pick. Depends on the dev(s) and requirements, there isn't a right answer.
Ok, cool
Good answers here already, but I highly recommend taking a look at some simple plugins and walking through their code. Try the sample "Hello Dolly" and a few others too.
link?
literally
Generate the verify code to confirm email by hash(time()) And then a dozen of user has a same verify code...
Those reasons are that it's really easy to get into Laravel, **Convention Over Configuration,** similarly to Ruby on rails. Also, there are a ton of quality resources to learn from, e.g. Laracasts are amazing. &amp;#x200B; It has **loads of built-in features** as opposed to Symfony, where everything comes from externally. &amp;#x200B; However, Laravel follows **a lot of questionable practices.** Your code will be extremely tied to the framework, so upgrading your framework, not even switching frameworks, will be much harder. &amp;#x200B; Eloquent, because of being an Active Record ORM, will offer you a ton of problems. You will have no layers whatsover between your database structure and your code. Unless, you use Doctrine instead of Eloquent. &amp;#x200B; Laravel migrations are terrible compared to Symfony. Eloquent models are not autocompleted, again unless you use plugins and generate PHPDoc. &amp;#x200B; Generally, it enables you to write code that has bad design and terrible architecture. &amp;#x200B; I had been developing with Laravel for quite some while and there was always something in my mind, nagging me, because my code was unsatisfactory, models were shit, had lots of domain logic. When I've switched to Symfony, it was a relief, because it helps you do DDD, BDD.
`hurl new Exception();`
I use both!
Static methods are somewhat similar to global functions. For proper OOP there should be some creational pattern(builder, factory) for \\TRegx\\CleanRegex\\Pattern that could be injected in the code. Existing builder is also using static methods only(they are hard to replace).
Or just use a dev environment. Why are PHP programmers so old in their ways.
So do you not test your code after writing it?
Prepared statements already escapes it so you don't need to use real escape string.
Wow
Surprisingly but AWS is not easy or intuitive. I prefer (that it's also cheap) to rent a VPS, then you could connect via PUTTY (you will need the ip, user and password supplied by the vps) and sends the file via WINSCP (all windows apps).
Found in code from a previous client. I was brought in after he ran through a string of foreign Upwork developers, and I tried to quit the next day when I saw all the problems. He talked me out of quitting for a few weeks but the project was doomed and I split. I warned him, but he didn't listen. A year later the domain is expired so I guess he didn't listen.
If you did not pay for a product, it is not yours yet, maybe you can look at it, maybe you can use it, but fundamentally it is still not yours, regardless if it's a house or software. There are laws about not paying a house which lack on software development, no one goes around 'deleting' a house, they usually take ownership and sell it to someone who will pay it, that's how I believe things are solved. Whenever you call it 'delete' or 'trashed', it doesn't matter, it can still put it back in a minute or two, (to me) that is the difference on 'destroying' and also the third reason why your different context is wildly different compared to the original problem. &gt; ...when I received the keys That's the equivalent to "Everything is done, pay me"-moment in software, I cannot 'hand you' control over your server before that unless you tell me to do it. If my 'house-developer' gives me his set of keys I will tell him "No, I still need you to make that stairs I told you about" because anything else does mean I don't want him to enter my house, the keys are the "physical" proof that says "I don't want you in my house". Receiving the keys are the equivalent of telling the developer he cannot make changes to the server anymore, which, like I said, no one does in the software world unless they're planning on not paying the dev.
&gt; With modern cars, do we even really care about wearing seat belts anymore?
Laravel forge deployed to digital ocean is the easiest imo.
Not a great analogy if your point is that the developer must consider sanitization -- frameworks can abstract security away from the developer. However, it is important for the developer to be aware of the sanitization behind the scenes.
&gt; Like can you really fuck up when using a framework Yes. For a good example, consider the Laravel incident a while ago where it was thought that the database layer was providing full SQL injection prevention, but it turns out it wasn't sanitizing column names. People wrongly assumed that it did, and didn't bother checking, so therefore they had a gaping security hole. So yes, if the framework is actually providing a security step, then use it. You don't need to sanitize input that was already sanitized. Just make sure you understand what the framework is actually doing, and supplement it if needed.
Any help on turning something like [ ['id' =&gt; 1, 'parent' =&gt; null], ['id' =&gt; 2, 'parent' =&gt; null], ['id' =&gt; 3, 'parent' =&gt; 1], ['id' =&gt; 4, 'parent' =&gt; 1], ['id' =&gt; 5, 'parent' =&gt; 2], ] into a tree?
Probably lots that I don't remember. One that sticks out was when I was hired to do some work on a CodeIgniter application. I was sent a copy of the live database, which was full of plaintext creditcard numbers. Not only that, but the application was *full* of amateur vulnerabilities. I noped the fuck out of that one.
Automatic login after signup + long session duration is my guess
That is fascinating. Thank you.
oh yes you can. I have seen where translations were generated by literally taking users input and then generating php file which contains array of the strings user inserted which later is executed on server. one illegal character and your site is down, or malicious actor can inject anything into your code if he gets access to admin panel. That was laravel project. Your only limitation for fuckup is incompetence and imagination.
No. LOL. But this was a serious question.
If you use an ORM like Eloquent, it will do almost all of the sanitization work for you. But as soon as you need to start writing raw queries for edge cases, you need to worry about sanitization again.
Are you getting paid for the code you write? Yes? Then you're a professional developer. That's the only real crireria. Would you be a better developer if you knew how to test your code? Sure.
How long ago was this?
I recently ran across a question about unzipping files on [stackoverflow](https://stackoverflow.com/questions/8889025/unzip-a-file-with-php). It has decent answers, but the original question has quite a dangerous way to unzip files.
I didn't see it myself but its a good story at my company. A shop was created that passed its variables to the basket via GET variables. So when modifying the url to basket-add.php?item=your+mother&amp;price=10 you were able to order YOUR MOTHER for 10 Euro.
It has nothing to do with frameworks. The way to not worry about input sanitization is to use SQL with prepared statements. If you are using a framework, that does not actually mean that the SQL is secure. Instead you have to worry about the details of the ORM's implementation. Bottom line: if you are using a frameworks you actually **have to** worry about input sanitization.
THATS FUCKING HILARIOUS
I dunno. 6-8 months?
&gt;\[\['id' =&gt; 1, 'parent' =&gt; null\], \['id' =&gt; 2, 'parent' =&gt; null\], \['id' =&gt; 3, 'parent' =&gt; 1\], \['id' =&gt; 4, 'parent' =&gt; 1\], \['id' =&gt; 5, 'parent' =&gt; 2\]\] Sure ! A tree has only one root node (where parent === null), in this case, your dataset is invalid, so I removed the second line where id === 2. If you want to use PHPTree to build your tree, [here's the script](https://gist.github.com/drupol/8a8225575e8cbfebc05c90db61be78b3) Let me know how it goes :-)
Hm never heard about it. This sounds less like a Laravel flaw and more like a programmer shooting themselves in the foot. Variable in the column name that is affected by user input seems like a *huge* code smell.
First
Unsubscribed.
Credit card numbers, with ccv, stored with hashed code in the database, along with hashing keys in front end javascript to display decrypted numbers on screen. Pure genius from the arrogant 'hot young guns of programmers' school. Needless to say the business using this 'secure shopping cart' got hacked, subsequently fined for the fraudulent credit card usages applied - several hundred thousand pounds, and was out of business 6 months later from their cash flow being killed. I've been using it as an illustration of why you don't do stupid things with security for convenience or a few dollars reduction in processing costs ever since.
How about we stop excusing Laravel's shitty engineering. When you accept a "column name" as input, then it should not allow SQL injections, period. It doesn't have to be user input. It can be a bug, or anything at all. SQL injections shouldn't be allowed, unless the input specifically says "hey, any SQL expression goes here" or similar. Somehow, in my own home-grown shitty DB layer from 10 years ago I managed to check input for columns, and the largest PHP framework (supposedly) can't? Give me a break.