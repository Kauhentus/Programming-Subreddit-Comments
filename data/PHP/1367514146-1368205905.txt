Heh saw that after I posted. Sorry, I really shouldn't do code reviews on my mobile. Feel free to beat me with a stick, or multiple down votes, I'll let you choose.
Woops, seems I dropped the ball on that. Nonetheless, to quote from the stackexchange link you included: &gt; This doesn't mean it's not suitable, but there isn't a NIST recommendation to cite.
&gt; Wouldn't be optimal in my opinion as adding a video includes more than just inserting a row into a videos table, it would also need to create additional rows (I think the term would be pivots) as well as an image thumbnail Which is exactly why all this logic should not be in your Articles model, be it an Article\Update model or not. Your Video model handles the creation of a Video, the Article model handles creation of the article, and allows videos to be attached with methods as I described.
That's like saying "my two legged horse gets slower when I ride on it"
That just means that [PHPActiveRecord](http://www.phpactiverecord.org/) is slower than your ORM, and the one for "rails" and "django", which I can absolutely believe.
I honestly wouldn't develop anything until it out of Beta, (which L4 is currently in). So you can either tackle the upgrade to 4, which is probably a lot of hassle, or just sticking with 3. 
I feel like Redis would probably be the best way to go by storing each friend as a hash. I feel like a Cron wouldn't be worth doing because very seldom are people going to go back to the page. Why keep an updated list for when they never access it? Waste of processing power doing all that. So without doing that, the only other way it's user-provoked. And if you're going to do user-provoked, then it's essentially worthless storing everything. I feel like storing the friends after connecting, and refreshing only when a user prompts a refresh would be the best route to take. Just tested out a couple apps and that seems to be the best way of handling it. Disclaimer: never built an API for an iPhone app before :)
After some more time researching (a.k.a. digging around on Google), I've concluded that it is indeed the versioning difference. I found [this bug](https://bugs.php.net/bug.php?id=63305), and quite a few others, which explain it. It involves autoloading of traits, which our authorization library relies on significantly. I managed to convince my client that upgrading to PHP 5.4.14 is a better idea, and the project runs perfectly on the new setup. Hopefully someone will find this post useful someday!
Thank you. Will be looking at in this weekend. 
If the gifting portion is going to be used often (maybe once every few opens?), then I think a background job actually might be the best course of action. Especially if you can write to redis constantly, so even if they get to the gift page rather quickly, they'll at least have a large amount of friends already there.
L4. It's pretty stable at this point, so by the time you probably finish your app, L4 would be stable. Writing it in 3 and upgrading almost immediately after you finish your app would be too much of a hassle. Put the same amount of work into it, and keep it "future proof".
Thanks very much for your reply -- given the setup of your organization, I can definitely see how Vagrant would be incredibly useful. Right now, I'm only working with a handful of other devs (usually less than 4-5 at any given time), and we're not exactly in what you'd call a continuous/near-continuous delivery environment. It seems that a lot of the work that the other devs do on a daily basis involves maintenance and updates of existing small-scale client sites (I'm the guy who's been tasked with writing the new version of our old software). Can you think of a way that Vagrant might be useful in our smaller-scale shop? Again, thanks.
To me the background "prune" operation sounds like your best option. With that approach you know that you won't be updating friend lists via cron for users who never use that feature. As for which tool to use: as much as I love Redis you may want to consider using Riak or Mongo (require MongoDB to acknowledge writes: http://docs.mongodb.org/manual/core/write-concern) if you will end up with a large dataset. Redis needs at least as much ram as you have data so keep that in mind.
[Laravel Tasks](http://laravel.com/docs/artisan/tasks) would also accomplish most of the things described here, or at least enable you to easily write a bundle to do so. Create each of the tasks you pinpointed above, and they can all be ran from crontab with "php /path/to/project/artisan YourTask input1 input2 input3"
I'm trying to cover this as we'd do at work, so hopefully it's useful. I've not had a deep look at and aren't familiar with the library, so mainly syntax, layout and structure. https://github.com/mikealmond/MusicBrainz/blob/master/src/MusicBrainz/Collection.php This seems misnamed (or the file is wrongly named and the class is poorly named): class phpBrainz2_Collection https://github.com/mikealmond/MusicBrainz/blob/master/src/MusicBrainz/Release.php Consider line breaks if the GitHub page needs scrollbars (80-100 characters is normally the IDE/code style checking limit) $this-&gt;language = isset($release['text-representation']['language']) ? (string) $release['text-representation']['language'] : ''; $this-&gt;script = isset($release['text-representation']['script']) ? (string) $release['text-representation']['script'] : ''; Nice start at documentation, still a little thin. PHP doesn't have (many) IDEs that auto-complete so documentation is a way of avoiding reading the entire method: /** * Get included releases from the XML of another entity * * @static * @param \SimpleXMLElement $result * @param $entity string * @return array */ https://github.com/mikealmond/MusicBrainz/blob/master/src/MusicBrainz/ReleaseGroup.php TODO /** * @todo */ https://github.com/mikealmond/MusicBrainz/blob/master/src/MusicBrainz/Filters/RecordingFilter.php Is it just this file that's GPLv2? If you publish the library GPLv2 means your entire library must be GPL compliant. My understanding is that your MIT-esque license might not fit that. You should really (in my view) be up front in the LICENSE file about what's GPL and what's MIT, at the very least. /* This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 https://github.com/mikealmond/CoverArtArchive/blob/master/examples/getAllImages.php Might want to document your example code more heavily. https://github.com/mikealmond/CoverArtArchive/blob/master/src/CoverArtArchive/CoverArtArchive.php It feels like the MBID would be a property of the object itself passed in the constructor, rather than passed in every time. Also: `final private` The final is redundant (I believe it's normally `public final` in terms of ordering too) 
Hey guys! So I posted this 2 days ago and was getting a generally positive response, and some great feedback, but then sandrewh PMed me and showed me some problems with how I'd implemented the sandboxing. It was hackable! So I pulled it down, and yesterday he worked with me to do it right. I realize sandboxing is haaaaaaard, but that's no excuse not to try. :) Thanks sandrewh!
Thanks for the link. I really like the syntax. I may steal this and port something like this into PHP.
Like I said above, I already have this written. It works well, but it isn't OO and could use a little love. I'd be happy to work on improving it with you if you don't want to start from scratch.
You should let go of the thought that every subsystem needs to be inside/coupled to a specific object. If you think like that, you'll have models of very uneven sizes, some huge, some tiny, and you'll probably violate the single responsibility principal in the bigger ones. In this case, the Article model will become huge, unmaintable and untestable very soon. Instead of adding another method or separating by "controller action" which leads to duplication, try moving the functionality to a separate class. A class that is not a real object itself, but encapsulates a single functionality/subsystem entirely. For example, ArticleMediaManager (can't think of a better name right now) can manage an article and various media objects and manipulate the relationship between them. This way your article model will not bloat up with every new media type, and you get to test the attachment functionality separately. TL;DR create more classes but separate by functionality.
http://en.wikipedia.org/wiki/Message_queue There are a lot of Message Queue systems, several open source. One that has support for delayed messages should be able to do what you want.
All PHP code should be written with PhpStorm.
I understand why, but I am really against that, at least in final code. Perhaps it is a byproduct of all the time I spent doing java over the years, but I feel the class of the exceptions should describe why it was thrown. Sometimes you wanna catch all Exceptions, or just a subset of ReallyStupidException
Last time I checked, the Facebook API agreement prevented you from caching friend lists. You could cross-reference them with other existing lists you had, for example to add a Facebook link to each contact in the address book, but that wouldn't help you with Facebook-only contacts. Better look into it, because if they kick you off then the whole thing comes to naught.
That was kind of what I was getting at, but of course splitting it between creation, modification and selecting, I guess this is another possibility. Avoiding classes becoming "huge, unmaintable and untestable" is exactly what I want to avoid :)
[Nice work](http://gifmansion.com/GM/uploads/2012/04/jeremiahjohnson.gif)
That seems to be a very liberal stretch of what a Message Queue is. I agree that it's probably okay for delayed one-off tasks, but what about recurring tasks?
That looks really cool. I will play with it some more. Thanks!
Seems cool. For advice I would say write your tests first before you code a class. And inject your dependencies.
&gt;I'm not really interested in rewriting your code for you. I wasn't suggesting that. I was suggesting that we could work on it together, and I could give you a big head start. But with that attitude never mind.
I don't actually see anything in the terms that would say no. Am I missing something? https://developers.facebook.com/policy/
Check this out: https://gist.github.com/haykuro/5505173
Regarding where to store it--if you would use MySQL, but you don't want to put the strain on your main DB, what about a secondary MySQL database? As long as you don't need to join it into any of the main tables (and if you are considering redis, you clearly don't), that could work. 
In your example, some of it probably belongs in the view code. You'd have something that displays parts of a user profile, and then something that displays more of it. Both would consume the same user object but do different stuff with it. For a straightforward real world example of a class/object in PHP, look at `SPLFileInfo`. Your object has methods that tell you about the object. `$file-&gt;getSize()`. Each user object wouldn't necessarily be responsible for getting the data for that user. That's a pattern called ActiveRecord, and it makes for a very heavy object that's responsible for representing and managing an object's representation in both PHP and in the database. Another way is a bit easier to understand, I think, which is that a user is just a user, and then you have a database manager that's responsible for storing a user in the database. Each class does one thing. Classes should be specialised around one thing. So your `User` objects each represent a user; their name, their age, whatever. Then you have a repository class that gets users; call it `UserRepository`. You'd make a user repository object of that class and give it your database manager, and it would run a query on it that gets a bunch of users: `$repository = new UserRepository($database_manager); $repository-&gt;getUsersByPopularity(50);`. See where I'm going with this? By keeping your classes restricted to performing very restricted sets of tasks, I think things get less confusing. 
I break up my models into an object class and a data access class. So in your example, I would have models/Article.php models/dao/Article.php services/Article.php models/Article.php is strictly a php representation of the database object. So it only has properties, setters, getters and some other methods if you need, like toArray() models/dao/Article.php would contain all the methods that interact with the database. So here you could have insert() getDetail() delete() etc services/Article.php is the glue class. It interacts with your model and dao classes. It would be in charge of creating a blank article model, then getting the data from the dao and populating the model. If this sounds like something you're trying to do let me know and I can provide more examples.
Figuring out what the project manager/client/end user really wants is probably the number one thing I spend time on. After that it's deciding how to attack the problem. Coding is probably tied with reading documentation/searching for existing or "right way" solutions for the remainder of the time. I strive to never reinvent the wheel if I can.
Running Tests. Unit tests, functional tests, etc. Even with all the automation software available, as your application gets bigger, the amount of time that it takes to complete test suite gets longer and longer. 
Code for db-&gt;escape(): https://github.com/EllisLab/CodeIgniter/blob/develop/system/database/DB_driver.php AFAIK, it removes null bytes and translates single quotes to two single quotes It's good that you encode your input, as mentioned in http://ponderwell.net/2010/08/codeigniter-xss-protection-is-good-but-not-enough-by-itself/ The "cast to int" method of /u/waylonsmithersjr is favorable, but I as an devout paranoid would whitelist the input for numbers only.
Not chiming in on whether or not it is approved for hashing, but I'd like to point out that that security.stackexchange.com answer *definitely* is not a qualified answer. If you look at the edit history, you'll find that it asked "What's wrong with one of the SHA-2 functions?" before. Also, even the current body contains "I trust you're salting as well?", which clearly shows that the answerer does not even know what the PBKDF2 algorithm does (or at least does not know that it uses a salt.)
I used to test my code, then I started writing perfect code the first time, every time. J/K, my code is sloppy and I don't test it.
fixing other people's javascript.
Forms! That is why I always go for web frameworks. ugh! Validation, error messages, etc. are a waste of time. Thank you cake!
yeah I hear you, I think I'll start wrapping in db-&gt;escape() thanks
:)
edge cases
Internet Explorer
Refactoring. 10% concept and database things, 20% first prototype, the rest is refactoring the rotting code and testing.. What should be faster? Hm. My learning? I'm not sure. Sometimes my inertia to adapting totally new things pays off very well.. I think to write software must be identical to writing poems. Keep it short, concise. Say only what must be said.
I have zero experience with Laravel, but I'm highly interested in working with 4. Would you recommend I pick up Dayle's Code Happy book or should I wait for a book on 4 to come out? I've already taken a look at some tutorials and screencasts but I want to ensure I learn everything thoroughly. Excellent work with Laravel, by the way! I really love what I've seen and I'm looking forward to working with it full-time.
Cheers for the response i'd be interested in seeing some examples (Gist is a good way of sharing example classes/code https://gist.github.com/ )
That makes sense to an extent, but I'm curious how far you take that before you are abstracting individual atoms to build a molecule. Perhaps that is a bit extreme, so let me propose this. Is the idea of taking a similar group of functions and consolidating them into a class a good way to start learning OOP from a syntax and general use standpoint. Im sure over time I'll get more clever with it, but for the time being just working with objects, classes, and incorporating them into my daily use.
Questioning my career choices. 
... and? Of course you should use unit tests. But just because you use unit tests doesn't mean an unstable platform you build on suddenly becomes stable. It just makes it easier to fix things when they break (also to see WHEN they break). I was just letting them know that they **should** use Laravel 4, despite it's instability (which unit tests would help).
Lately it's been waiting for composer to update. :)
Badly written documentation. And emails. Friggin emails... ಠ_ಠ
Writing getters and setters, there is probably some cool Netbeans shortcut for it, but I'm too lazy to use it.
I haven't found a good one that works with php either 😣
Writing requirements specs. Hired a few coders to reduce my workload, but instead of increasing code output, all that's really happened is I'm spending my time crafting specs and getting the same level of output :(
Attempting to get proper requirements out of the stake holders.
CRUDING ... fortunately, i ended up creating an abstract CRUD controller and filling gaps with before / after event listeners when a model is mutated, with zillions of properties to customise. We should not be writing CRUD anymore , that's not interesting , only event listeners to customize CRUDING. What's interesting is the front-end, and the business logic in services, not creating READ INDEX CREATE UPDATE DELETE methods to edit datas.
I heard a lot of good things about symfony. For now, I really love cakephp. The convention over configuration philosophy works great for me. Way less code...
One project's development environment runs in a VM and the code checkout is a shared folder. File I/O is bad and pages take significantly longer to render. Need to buy an SSD ...
It's funny that you mention poems, because I feel that your post was somewhat poetic.
form validation and errors messages are pretty quick to knock up in codeigniter.
Ask an ye shall recieve... alt+insert https://blogs.oracle.com/netbeansphp/entry/generate_constructor_getters_and_setters EDIT: Thanks for giving me my one new thing learnt for the day.
Rewriting features due to poor project management.
Figuring out how every new php framework reinvents the same wheel and overcomplicates really simple problems.
I would say creating tests more than running them, but yeah testing for sure.
Procrastination....
I remember when we used to call those "bugs".
Dealing with the client who *absolutely has to have this feature they just dreamed up,* midway through development, and "the project will not move forward without it"
Put it on GitHub, anyway? I'm sure there are some people around here who would like to help if you made a post about it. I've got other stuff to work on at the moment, but there are 20,000 subscribers to this subreddit...
Also were you using 1.3 or 2.0? Thanks
I've been using L4 and haven't had any problems. It's very stable and is just awesome all around.
`file_get_contents` Or any of a dozen ways to read a file.
Haha.. thanks, but that was no intention of mine. :) As a non-English native, I might misuse some words in a creative way.. unwillingly if you say so.. Let's try a Haiku: Say only what must be said Refactor the rest
Reddit. I mean--no it doesn't!
what
Absolutely, but it's easily available and will probably do what you want. What you do is use cron and a database and e.g. every hour push 60 minutes worth of delayed messages into the MQ.
Client Emails. If you can help make this part quicker you're gonna be a millionare
This makes me feel better. I've never worked with other devs and I've been feeling like I am *really slow* with all the time I spend thinking, deciphering reqs, in docs, searching, etc. Especially when I watch those sample videos of frameworks where they show off "build a blog in 13 seconds!!"
As a freelancer... everything that isn't coding. Invoicing, banking, reading and sending emails, answering the damn phone, bloody telemarketers. Yes I am happy with my phone service, except when I have to answer the phone to tell people I'm happy with my phone service. Sometimes I wish I could just sit down and code while someone else went through all this stress. Tried to convince my wife to do it but she's seen what it does to me and wants nothing to do with it. At least I know I married someone smarter than myself.
Just a heads up, cakephp is SLOW! I'm not entirely sure how much a system like zend optimizer + or APC helps, but i have read a few places that CakePHP is REALLY slow. As a useless personal note, i once converted a system that was written in cakephp to plain php (for performance reasons) and found a 100X increase in speed! Of course, caching and etc might mitigate or remove this as a problem, but it is something to be aware of.
I totally agree. Unfortunately I work in an environment where the fact that the algorithm is sanctioned by NIST holds political (and possibly legal) value, regardless of whether it was actually sanctioned for the purpose of password hashing *specifically*. You could also argue that while NIST doesn't sanction PBKDF2 for password hashing, the types of security concerns and attack vectors that apply to password hashes would be very similar to those that apply to derived keys. If that's the case I'd say there's still some merit to the whole "NIST-approved" argument. In any case you can still use this library if you need PBKDF2 for other purposes and you aren't running PHP 5.5 yet.
Might not be at all something you can use, but being spoiled with php 5.4 i wrote a trait that i can put into my classes that uses magic methods to allow getting and setting to be easier. Basically it uses the magic method __get($property) to check if there is a function called get_{$property} and if there is it calls it, otherwise it attempts to return a variable of the same name. I don't know why i wrote that all out when i can just show you: trait MagicMethods { public function __get($property) { if(is_callable(array($this,'get_'.(string)$property)))//If the function get_(string) exists, call it. return call_user_func(array($this,'get_'.(string)$property)); elseif(isset($this-&gt;{$property}))//if its not a function, check if its a regular member, if so call it with a variable member variable... return $this-&gt;{$property}; else throw new Exception('Method "' . $property . '" does not exist.');//And toss an exception if neither exist; } public function __set($property, $value) { if(is_callable(array($this,'set_'.(string)$property)))//If the function set_(string) exists, call it. call_user_func(array($this,'set_'.(string)$property), $value); else throw new Exception('Method "' . $property . '" does not exist.');//Otherwise, throw an exception, do not allow setting of members even if they exist! } } as a side note: there is a small performance penalty using magic methods, but i have yet to find it anywhere near a problem even with functions that get called hundreds of times per execution.
Trying to fix a bug that just DOESN'T MAKE SENSE no matter which way I look at it. Then an hour later I realise I'm an idiot, rinse and repeat.
i never had a single line of php code that was affected by internetexplorer, you poor guy must do html/css stuff
while developing ... coding takes up most of my time, at the moment its actually 50% coding, 30% testing, 10% documenting, 10% debugging, changes a lot towards the end of a project though
Getting started. I can literally spend *hours* before I really start coding.
If a person sends too many mails per week - always call them and talk. They will want that to stop :) - at the same time it looks as if you're caring... but you interrupt their workflow, not them yours. I know, evil. Didn't have to do it so far..
If you're doing it right actually coding should be the thing you spend the *least* amount of time on. The rest of your time should be spent designing and running tests, making design documents, getting requirements, making and implementing data models, documenting your code, and tracking issues. 
Weeping.
ah... your explanation makes me feel better.
It's pretty much the opposite for me. I'd rather meet clients, do the requirements, plan the project, do the invoicing, than code. 
Dealing with databases and their mapped objects since our antiquated code follows no sense of naming convention. Some of the Phalcon developer tools help to make it faster to deal with but it's such a time waster.
Good thing we're getting C#-style automatic properties in 5.5. Oh wait.
Dunno why you got downvoted for that. Seems like a perfect use-case for traits to help ease a fairly old problem many people have. I actually hadn't thought of this; must keep it in mind. It might be worth adding a little [reflection](http://prototype.php.net/reflection) to keep private members private, but that's about the only problem I see.
I've yet to encounter "too many emails". In 17 years of doing PHP, I can't say someone ever sent me "too many" emails. I've heard coworkers complain about people that "send too many emails" and "overcommunicate". What's the opposite? What's the alternative? More phone calls? Things get forgotten or overlooked (or 'misremembered'). Fewer emails? You have less in writing for CYA time (on all sides). I will say a well-structured project management tool is a step above constant emails, but I'd rather have "too many emails" vs nothing or fewer emails. The only issue with emails is setting expectations as to when they'll be answered. If someone expects you do respond to their emails within 5 minutes every single time, there's a problem, but that problem would be worse if they called every 5 minutes too.
Nothing wrong with emails, agreed. I was thinking of a customer or boss that changes their minds all the time, do not think to an end etc. - it happens quite often that I explain to a customer why it is better to not have this feature but solve his problem in a more elegant and concise way than we both thought at the beginning.
Hit the nail on the head right here. If I hit any challenge that I don't feel is 'fair' (aka if I think it's someone else's fault directly or indirectly), if I'm not coding for fun I'll just ragequit for a few hours/days/weeks. 
sure, but imo it's still better to have all that written down than lost to the mists of the telephone. I worry more when clients are reluctant to ever email, and always insist on calling for everything; it's a double time burden and means they can (and sometimes do) deny things they asked for.
Yeup...haystack/needle, needle/haystack fucked me today...queue me feeling absolutely stupid for mixing it up.
You are absolutely right. I too prefer having something "in writing" for both partners of a communication. This is great when people have a workflow and todo-lists etc. I was only referring to a temporary "defence strategy" :) Like tennis when you try to make them run instead of them you..
VA?
Finding the fucking lost comma in my 250,000 looping csv that is causing a 1 cell shift on some rows seemingly randomly.... 
So, if I'm already using cron, why bother with an MQ at all? What does it gain me for the trade off of extra complexity?
&gt; I've yet to encounter "too many emails". In 17 years of doing PHP, I can't say someone ever sent me "too many" emails. I've heard coworkers complain about people that "send too many emails" and "overcommunicate". What's the opposite? What's the alternative? More phone calls? Agreed 100%. I work with someone who's always complaining about too many emails, yet thinks nothing of calling me up and spending an hour talking about something that could have been covered in a 5-line email message. Biggest productivity sink ever.
Virtual Assistant.
Today it was figuring out Zend Framework configuration (holy crap) as a new project may use it. As far as PHP code itself... it takes no time. I guess the big time suck for me is dealing with how various frameworks implement things. ... and in the non-PHP but still web dev related side of things today... a destroyed MySQL server that could not be reinstalled no matter WTF you did (turned out to be a screwed up package plus apparmor plus someone had gotten jiggy with chmod on some obscure dir for some unknown reason), meetings (always fucking meetings these days), being able to dynamically "select" a select option using jQuery in IE &lt;= 9 (seriously... I'll buy you a beer if you can solve this one... nothing obvious seems to be working), fidgeting with jQuery validation and the jQuery form plugin (I couldn't get things working like I thought they should so I ended up doing them like I was told in the first place... hmmm).
My primary job is not PHP related, but we were actually recently late delivering a modification to a client - but that's because we didn't even finish *negotiations* on the contract of the work until after the original due date that was set. So, I feel the whole "manager/client/end user" thing.
Yeah, the current snippet was taken out of a small site build that only really has 2 classes and nothing really needed to be private, however you could modify it like you said to include Reflection so private stays private, however that was just not something i needed.
totally. op doesn't get a single comment, but delivers anyway for the good of future man
I am going to try this. 
My top time wasters: 1- Debugging without a stack trace. Aghhhh.. 2- Verifying that i'm following best practices. Google searches, code formatting, i'm a perfectionist. 3- Designing the layout of my code mentally. This involves writing pseudo code, rewriting pseudo code, then rewriting pseudo code again to make sure i'm doing everything i want the best possible way, with the minimal amount of code.
The ability to programmatically add new "jobs" using restricted and separate user accounts in a scalable and portable way with finer time granularity. I assume the reasons you don't want to use cron are resource usage, security and time granularity.
reddit
Also I can never remember to implode or explode.
Even with complex data structures, Doctrine and ZF2 on large projects I've never experienced that many files needed per request. Might be a bit too much abstraction going on there ;)
I too have found CakePHP can be quite sluggish at times, but for me it's acceptable as I can get the project out the door and into the environment where it's required, *really* quickly. Once it's being used I get feedback about sluggish areas and I'll work around Cake to optimise those bits. I just find I can release code and tests more quickly which is what the businesses require. My disclaimer is that most of my work is intranet based, so having millions of hits isn't an expectation for me. 
Also, serialize vs. deserialize. I can never remember.
Reusable validation classes FTW!
I can solve it. But not in the ether. Show me some code.
I have a client who is awesome, aside from not trusting communication. He will send an email to tell me that he's going to call me at x time, and then immediately call me to see that I got the email telling me that he was going to call me later on to talk about a webmeeting that we need to set up for the day after. 
If you've ever tried to capture the name value of a submit button of a form in older versions of IE, you've had PHP affected by the browser, lol. Something I never made a habit of doing, but it was certainly an issue to some.
Writing proposals and quotes for projects that we will never win or the client decides afterwards that they're going to put on hold.
The list goes on..
i hate when people say: "hey, program that website for me!" and then after all the programming they say: "dayum, make some beauty here and there" normal people don't understand the difference between a programmer and a designer. :(
If you would write tests it would become less sloppy :) I can't count the number of bugs I discovered in my own code thanks to running tests. I've come to the point that I write tests for almost anything now, I just don't trust that it works if it doesn't have tests. But boy it can be boring and time consuming.
Yeah the thing is: A lot of developers cannot work with developers, and an even smaller amount of developers can work with non-developers. I worked with non-devs as well as dev almost my entire career, i don't know anything else, however, i still meet an awful lot of devs who treat non-devs like guinea pigs and aren't capable of explaining dev stuff in a way non-devs can understand. Really, coding skills can be learned to a certain extent, this communication stuff is much harder than any program. But i also experienced that some people tend developers as some different species, although we are not. So there are dark spots on each side. I even met people who blatantly lied to non-devs that they cannot fulfill $requirement, even though i knew they perfectly can. "We can't" is almost always a lie, you can in 99% of the cases, it's just a question of effort and time. Just a little rant, so TL;DR: Communication.
Why's that? As far as jobs go, you can do a lot worse than programmer.
Because you're binding, CodeIgniter is going to escape the attributes for you. You only need to escape manually (using the built-in `$this-&gt;db-&gt;escape()` method if you are writing a custom query with inline attributes, such as with the `$this-&gt;db-&gt;sql("SELECT * FROM users WHERE user_id = '" . $this-&gt;db-&gt;escape($this-&gt;input-&gt;post('user_id')) . "' LIMIT 1")` A better way to build the query, using the query builder would be: `$this-&gt;db-&gt;select('name')-&gt;get_where('users', array('user_id' =&gt; $user_id))` as that builds a database-agnostic query and does all the necessary escaping for you - easy!
Many reasons, none of which I'd like to discuss. Let's just say I earned more money and respect assembling car parts for 12 hours a day.
For file uploads, using a service that has automatic FTP deployments upon commits is ridiculously helpful. [Beanstalk](http://beanstalkapp.com) does this very nicely, even allowing you to specify different locations for each branch (making separate dev / staging / production environments a breeze). There are also places like Heroku, Pagoda Box, etc. that act as the hosts themselves. Granted, if you run your own server(s), you can install Git and skip the middle man entirely. If you use Git, there are a number of [Hooks](http://git-scm.com/book/en/Customizing-Git-Git-Hooks) you can use at various times to perform services before/during/after commits, in order to run validations, minifiers, etc. For asset files, I use [CodeKit](http://incident57.com/codekit/) to do that automatically upon saving files, so it's already done before I've even committed the files.
Or you could just use public variables/properties. I see no need for getters and setters unless you're actually doing something to the data before retrieving/updating the data in the object. Big waste of time if you ask me. If in the future you need to modify how the data gets returned from the object then you make a getter then, after that you can just do a find and replace throughout the project.
Not really a tool (or used daily for that matter), but [Rescue Time](https://www.rescuetime.com/) keeps me honest about how much bullshit I do throughout the week. It has improved my productivity enough to be noticeable.
Is there some good introductory information you would recommend on writing code that is easily testable and on writing the tests? That one guy from the /dev/hell podcast wrote that book but I've not looked into it. 
as a freelancer, this has been my living.. I'm sick of having to prove my skills with different people by doing this time and time again.
Compartmentalize your test suites, and configure your environment to select and remember the 'current' suite or test and run it with one keypress. I just did that in Sublime and it saves a lot of time. Of course, continuous integration helps too.
The problem is that this magic eliminates the possibility to use property declarations. __get() and __set() is not called if the property is declared.
what kind of testing do you do? TDD or unit testing, or just acceptance testing?
My usual reply to that is "does my desk look like its covered in crayons?!" I am paid to program, not push pixels about - if they want me to do both then they can pay me more to do both.
reddit.
I was sure I was not the only one.
isnt tdd = unit tests? for me at least it is i do unit tests &amp; selenium &amp; bigger projects and a lot of manual testing in startups :)
Tried using cakephp yet? (its terrible for over-complications)
This, so much this. I have done the same as you and written a base model class which has shared methods for get/set/page/post/delete/garbage collection/revisions/diff plus unit testing to ensure that the table has required fields and that each method works for each parent model extending it.
I tried alt+insert in phpstorm without noticing that link was for netbeans. I was pleasantly surprised.
Thanks for the suggestion, i'm trying it out now.
yeah damn straight. double the pay!
Switching to SSL/TLS is not nearly sufficient for "securing pages". Sure, it helps against traffic sniffing, but you shouldn't illusion yourself that your pages are anywhere near secure merely because of it. 
&gt;Procrasturbation FTFY
How do you test your tests?
A colleague of mine has been tagged as "overcommunicative" ("too many emails") at at least a couple of jobs, and yet... I never understood the problem, even when we worked together. If anything, I think everyone else was way too lax in providing any sort of written communication (email, wiki, whatever). Internal mailing lists would be *ideal* for many situations (easily add new people as required without everyone having to remember by hand, new people having access to history of previous discussions, etc), but they seem to have never quite caught on. 
I am glad I only have to dev for IE8+ I rarely have any IE wtf moments anymore.
You shouldn't be spending time on CSS. Switch to Bootstrap nao.
You spend time on css if you have a designer who provides psds for everything. Its prettier this way.
i agree with you, its just forcing to ssl and because of this title is maybe wrong, but this is other topic.
Have you looked into some of the ORM's that are available? 
This is only the case for public properties. If you declare a protected property __get() and __set() are still used. 
God I hear ya. I recently made a switch to dev work at a late stage (from teaching music!).. and I'm not sure the trade was worth it. At least teaching music I didn't have to constantly be "hitting the books" to learn some new API or framework or component. And there's sure a lot less "thanks for the great job" going on. And the money (so far) is not so different. But the dream was to be location-independent .. so at least I have moved towards that.
What is the purpose of doing this in a php function, rather than in the server configuration?
I understand, but that's the job of a front-end developer. If you're working with PHP directly, you should be more of a back-end developer. If you're doing both, I hope you're charging for both as well, since a good back-end developer doesn't necessarily make a good front-end developer.
reddit.
They're only bugs when you *don't* spend time thinking about them.
Follow @grmpyprogrammer on Twitter, he has some great explanations and is always open to answer questions related to testing PHP and testing in general.
Avoid writing naive setters and getters! https://developers.google.com/speed/articles/optimizing-php
Seems that /u/yeskia knows more than the rest of us.You should listen to him/her.
Just putting it out there to whomever might come across the post. Not everyone is well informed on the topic of web security, and it'd be wise to put in a word of caution. 
&gt;aren't capable of explaining dev stuff in a way non-devs can understand. Of course on the flipside I'm fully capable of explaining, its just that it takes more time and effort than the average client wants to spend to understand. They just understand "I want". I'm not even a "real developer" as I build Drupal sites. Sure I churn out a small custom module here or there or write some code for something, so that isn't inaccessible to me. Its just not cost efficient. I explain to every client code reuse and the difference between a module that was written and tested by thousands or tens of thousands of people who over the course of time also debug it vs building a custom solution that no one but us is testing and maintaining. I explain that a community provided solution may take 5 minutes, where writing it myself may take weeks or longer. They are usually still dissatisfied because they just know "I want" and then follow that with "Small budget!" I'm not going to overcharge people for learning how to do something, but its not going to be free either. Couple that with constantly changing requirements, and you've got a recipe for a site that you could have done with 100% of the features, 90% of them close to how the client requested them, and turning it from a $3k site into a $15k site that the client can't afford. It goes downhill from there. &gt;I even met people who blatantly lied to non-devs that they cannot fulfill $requirement I've found myself doing this or coming close simply because the explanation is too long. Its really something like "I can't do this with the budget provided because I don't even know enough to generate an estimate on how many hours it would require at this point". For example, in Drupal there is a module that provides an interface for building a sql query (essentially), but it ties into multiple systems in other ways and is pretty much a basic building block of Drupal. Its very complicated so giving a client direct access to it is absurdity (mostly). If a client wants to change things in Views, the thought of writing code to simplify the interface and provide direct access makes me shudder with a core system that interacts with so many things and provides so much functionality. Sure, it can be done, but I can't do it and they certainly can't afford it. &gt;"We can't" is almost always a lie, you can in 99% of the cases, it's just a question of effort and time. I try to explain this and get a feel for clients early on so I can tell what type of client they are. Do they have a low budget and will they compromise in areas that are not critical? Great. Do they have a high budget and want to tweak everything to work *exactly* the way they want it? Sorry, find someone else I'm not the right guy for you. I could provide examples but this post is already bloated enough. I think its sufficient to say that "can" has just as much to do with the skill set of the "developer", the budget, and the client as anything else and its all highly contextual.
personaly i didn't explore this options but i will, thanks
I ran into this issue myself in 5.4.6. I haven't upgraded yet so I'm not sure if it's fixed. Basically php crashes with zend_mm_heap corruption errors when using the insteadof operator with nested traits and xdebug running. Disabling xdebug fixes it. Ultimately I ended up ripping out any insteadof operators so I could debug.
Hold your job's hand and never let it go! Tell it you love it every day because you found a keeper!
Yeah but you still have to specify what goes where, and make the form to begin with ಠ_ಠ
This may reduce me to n00b status, but what are edge cases?
As much time as this wastes, I enjoy doing it because it makes me feel smarter than whoever wrote the original js. Haha
implode doesn't actually care about the order of arguments : implode(',', [1, 2, 3]) == implode([1, 2, 3], ',') With arrays it's mostly function(something, array) : in_array, array_search, array_key_exists, explode, etc.
Not what I meant, but that is helpful, so thanks!
Bugs brought on by pathways through your script/app that are so unique that you would never encounter them during normal usage, but tend to show up with alarming frequency upon launch. 
explode: Think of an explosion, one thing breaks apart to many (bomb to shrapnel / string to array) implode: Think of an implosion, a bunch of things compress into one thing (floors of a building to rubble pile / array to string)... A bit of a stretch, of course, so opposite of explode.
Figuring out what version of Joomla I am running then finding the corresponding documentation :-P
I use my town's online ticket payment system to pay all of my parking tickets. I use a spatchula to flip my eggs, pancakes, stir frys, etc. I use my volvo or bicycle to travel faster I use myself, because I'm a tool... wait what?
http://en.wikipedia.org/wiki/Edge_case Wikipedia to the rescue
Correct. I'm a full stack developer so depending on the project I'll code the frontend from PSD's to a template or take the template and code the backend. I enjoy both, but backend more.
thanks for your feedback, i will make post update
God yes. When I do frontend work I build it while viewing it in Chrome and it looks fantastic. Towards the end of the project my boss always says "how's it look in IE", and the hell unfolds.
I see! I'm more of front-end guy I found out last year, so that's what I've been focussing my energy on as of now. I do really enjoy playing with PHP and building things with that, but I enjoy pushing pixels a lot more! That said, it's important to make choices there, since it's probably impossible to keep up to date with all technologies in both areas with the current pace of technology evolving.
As a front-end developer, this is easily JS Fiddle and Sprite Cow. http://jsfiddle.net - quick environment to test html+css+js with js-framework and custom imports, code snippet sharing, etc. http://spritecow.com - CSS generator for sprite image files
Unfortunately, my application is wanting to go into beta in July so I'll be stuck on 3 for a little while to come. Any word on the future of L3? As far as bug fixes and whatnot. Kudos for great work on the Framework though. It's made my PHP development a breeze and truly enjoyable, which I know was one of your goals. My only complaint would be some of the undocumented gems that exist in the Framework that I've discovered through google or digging through code.
"Avoid doing SQL queries within a loop" is not a way to not be concerned by SQL injection ?
Figuring out where I missed a semi-colon or comma or quote or what-have-you.
Ow, just saw /u/slick0's reply. You can use join() instead of implode, I was gonna suggest split() as an explode alternative but the manual says it's depreacated..
Does it have to be a software based tool? http://css3generator.com/ is quite good when I'm dealing with front end stuff, though I don't use it *daily* Personally, I couldn't be without a good keyboard - does that count as a tool? (mine's a Ducky Shine II with Blue switches and o-rings at home, Corsair K60 w/ Reds at work due to less noise) - also, shoutout to /r/MechanicalKeyboards
Even though it sounds like you've already fixed it, this is a pretty generic, low-level symptom of an issue in PHP. On my Windows boxes we used to see it all the time on PHP 5.2 and 5.3, before traits, and so it's not always due to traits. The "mm" is _memory manager_, and this is a component of the Zend engine, and these errors can pop-up for a wide array of issues which are almost always going to be a bug within a PHP extension (possibly a core extension).
Thinking of variable names.
Wow, first of all: Thanks for the long post ;) This "We can't" has more problems than my text outlined, but you already provided some of the answers yourself. "We can't do that" lacks information "why?". You always can realize everything, BUT maybe it would require a higher budget, longer project time or simply more company resources. There are a lot of valid reasons to reject something, but you always have to provide reasons which the customer understands. &gt; Sure, it can be done, but I can't do it and they certainly can't afford it. That's the spirit, basically. Even you could do it, but maybe the quality would be not as good. But that's okay, just be honest about it.
Alright fella's that was a lot of help but I'm still having a little trouble. When I click submit, my last selections are taken back to the first selection in the DB. Also I get a couple errors when the form is initially loaded. A little more help would be great! If you do this in your test environment there is only 3 columns name, model, &amp; aomodel Here is my updated code: &lt;html&gt; &lt;head&gt; &lt;title&gt;Demo Drop-Down Box&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?php mysql_connect('localhost', 'root', ''); mysql_select_db ("test1"); foreach ($_POST as $key =&gt; $entry) { print $key . ": " . $entry . "&lt;br&gt;"; } ?&gt; &lt;form method="post"&gt; &lt;?php $sql = "SELECT distinct name from test1.crossref"; $result = mysql_query($sql); echo "&lt;select name='name'&gt;"; while ($row = mysql_fetch_array($result)) { echo "&lt;option value='" . $row['name'] . "'&gt;" . $row['name'] . "&lt;/option&gt;"; } echo "&lt;/select&gt;"; echo "&lt;br /&gt;"; $sql1 = "SELECT model from test1.crossref where name = '$entry'"; $result1 = mysql_query($sql1); echo "&lt;select name='model'&gt;"; while ($row = mysql_fetch_array($result1)) { echo "&lt;option value='" . $row['model'] . "'&gt;" . $row['model'] . "&lt;/option&gt;"; } echo "&lt;/select&gt;"; echo "&lt;br /&gt;"; $sql2 = "SELECT aomodel from test1.crossref where model = '$entry'"; $result2 = mysql_query($sql2); echo "&lt;select name='aomodel'&gt;"; while ($row = mysql_fetch_array($result2)) { echo "&lt;option value='" . $row['aomodel'] . "'&gt;" . $row['aomodel'] . "&lt;/option&gt;"; } echo "&lt;/select&gt;"; ?&gt; &lt;br /&gt; &lt;input type="submit"/&gt; &lt;/select&gt; &lt;/body&gt; &lt;/html&gt; 
I've never used Laravel. Is there a way to scaffold or auto-generate an app skeleton via the command line, similar to rails? I couldn't find anything in the documentation. 
- Looking up formatting options for date() - Wondering if it's needle, haystack or haystack, needle? - Digging through docs and code to figure out what type "getErrors" (or any other function) is going to return
That would be a massive waste of everyones time. Ignoring something just because it says beta without further investigation into its stability is moronic. Lots of people used GMail when it was beta for 5 years.
You should use &lt;insert whatever IDE/editor I use daily&gt; for everything. How dare you explore other options.
Ah does this really warrant a blog post? The implementation kind of sucks, you should just make a new class that secures anything that extends it and put those methods into a more common class to allow setting secure/unsecure within methods. Also don't forget to bubble up constructor to parent classes. 
*master of music (performance) here I could never do music education. I enjoy teaching privately, but getting up in front of a classroom full of kids would drive me insane. That being said, I gig almost every weekend so there is a fulfillment of performing/making music. That niche cannot be filled with computers. See if you can consistently perform somewhere to fill the musical void. Doesn't matter if it's a community group, as long as it's something. 
Yeah, I agree Thanks man!
Web Developer is no. 24 on the list. Still not too shabby. 
I don't use SQL for any kind of user-related information. Yet the last system in production I mostly coded has more than 200 users. The way is to implement all user-related operations with LDAP as the backend and use groups to express Roles. It's called RBAC and the concept has gazillions of standards, toolkits and whatnot on every layer, language and OS that you can think of. The important thing is that RBAC with an LDAP backend is how the big boys do it and it's not any more difficult to implement that a SQL solution.
Check out OpenLDAP ... http://www.openldap.org/
Not quite sure what you are asking, but I'm going to assume it's the second question in the title. 1. The tables in your database should be implemented to reflect your business model. At a bare minimum for handling user accounts, you'd probably want an id, a username or e-mail address, and a password field. The tables should at least be 3NF. 2. The passwords should be hashed with a password hashing algorithm, such as bcrypt. 3. Any random strings, such as the salt for the password hash, or the session's ID should be generated with sufficient entropy to prevent timing attacks. Leaving it to the default is not sufficient, and something like openssl_random_pseudo_bytes should be used instead. 4. The session ID should be regenerated upon login to prevent session fixation. 5. Protocol should switch to HTTPS. 6. Session cookies should be set to Secure (HTTPS) and HTTP-Only (won't be accessible via JS). 7. You should store various metadata about the user's connection (like the user-agent and IP). If they do not match up against your records, prompt for a password. 8. Never disable user accounts after X failed logins. It can be used as a DoS attack against users. Instead, add a delay to the connection before he/she can try again. Don't do this with sessions, because sessions can be cleared simply by deleting the cookie. 9. If there's a distributed attack, trying to gain access to a user account, instead look on the number of failed logins per minute, and if it is over a specific threshold, add a global delay to all login attempts. 
I hate getting knocked out of the zone by a text message or co-workers being noisy or asking questions. It takes some time to get back in. 
You intrigued me so I double checked it. On a busy page we have: * 51 ORM files. Each class usually requires 2 more fiels. This is auto generated by Propel. * 71 Application files (models, views, helpers, configs, etc) * 166 Zend 1.12.1 files 288 in total.
What's actually very useful is virtualization (VirtualBox, etc.) and provisioning (chef, puppet, ...) software. Vagrant is "just" the glue.
I was just teaching privately and at music schools as well .. not uni. And I am still performing (semi)regularly .. it's just the *time* thing. Programming is such a time-sink.. or at least it has been over the past 3 years for me. I basically started from ZERO, and after a few night classes and community college courses (which by and large I found to be pretty low-quality) I just started self-teaching. But it has been *tough*. Especially when you are on your own, without the framework of an office environment. Is the phrase "shaving a yak" well known? It's when you need to do A .. but you realize before you can do that you have to install B ... but before you can do that you need to download C .. which is incompatible on your rig until you update D .. and then a few more steps down the line you find yourself shaving a yak so you can do step "Q", which requires a shaved yak. And you say to yourself "Why the hell have I wound up shaving a yak?" I find myself shaving quite a few yaks. So yeah.. it's the time thing. I haven't done anything in my life so far that had such a "learn/prepare/extra-curricular stuff" to "actual work" ratio yet. Sometimes I question my wisdom. But hopefully it gets easier!
I kinda have 3 that are key for productivity, the first two especially. For time tacking, toggl.com, nice easy interface with good reports for stopwatch type tracking of time I spend on different tasks (has good mobile apps as well as desktop app in addition to web based) For project management, I have started using Asana.com Nice for keeping track of tasks. I did give Trello a try, but I like that Asana lets me have a list of today, upcoming tasks, pulled from the project tasks. For bug tracking of projects, I have a custom install of Mantis Bug Tracker (http://www.mantisbt.org/) The base setup IMo has too many extra fields and such not needed for my use, so I have it stripped down, and have two clients for larger long term projects that directly use it to enter issues they have, so a stripped down version keeps them using it more and not be scared off. 
Without a doubt just pen and paper - http://imgur.com/VGHubDW I scribble down everything. This is just a bunch of pseudocode I wrote until I got the solution I felt I wanted. Then I started to write some tests, code, more tests, more code, and finally got the code I wanted.
Why are you building a wrapper around a gift card balance checker? I don't think I'd ever use something by a third party to check the balance of my gift cards.
[caniuse.com](http://caniuse.com) Fast way to check if you're allowed to use this ^*new* ^^*super* ^^^*mega* ^^^^*awesome* ^^^^^*incredible* ^^^^^^*superlative-words* CSS~~3~~4 feature. ^^^You ^^^never ^^^are. ^^^:(
Hey guys, I'm looking for 'constructive' feed back on this blog post in terms of how it was written, etc. I think this is the longest blog post I have ever written and it took me more time that I would like to admit. Thanks!
[Trello](http://trello.com) for detailed project management, [Any.do](http://www.any.do/) for small tasks (not strictly work related), [Pocket](http://getpocket.com/) for managing knowledge sources.
Not exactly -- a tool like Bootstrap can still be very useful. You style the reusable Bootstrap components instead of your proprietary HTML.
Same here. I have a notebook filled with notes, sketches and psuedocode. Being able to quickly jot down ideas is so nice, plus I get a catalog of all my past ideas/work.
i'm doing it for myself. It would be much easier to check balances for all stores in one location than to have to navigate to the balance check part of the official websites every time.
2 and 3 could easily be solved by using an IDE.
ok, so I am ingesting a JSON file so adjust accordingly depending on your data source: I will include the loop for using the JSON data... that's useful to know how to do as well. This will generally get that data into most modern browsers form fields, including selects for (var key in data) { // avoid iterating over the prototype if (data.hasOwnProperty(key)) { // this sets the values in modern browsers but not older IE $('#' + key).val(data[key]); // this makes sure the data gets into into older, crappy versions of IE $("#theselectid &gt; [value=' + data[key] + ']").prop('selected', true); } } 
If this is such a huge time waster, why not use an IDE, which tells you this sort of stuff?
Sadly, the [vote](https://wiki.php.net/rfc/propertygetsetsyntax-v1.2#voting), at 60%, fell narrowly short of the 2/3rds majority vote required.
Start with four. 
Correct me if I'm wrong, but its not like watching a movie, where you should see the first one before watching the sequel. I would start with the latest
One thing I can recommend is take a look at the doctrine caching classes. They have a concept of a cache namespace (an integer), and another key that holds the current active namespace. What this allows you to do with memcached is never delete anything, since when memcached runs out of memory, oldest keys are flushed. It also allows you to group as many keys as you want in a namespace that are invalidated together. But the best thing it allows you to do, is create a new version of the cache first and then update the key that holds the current active namespace. This is essentially a "hot swap", once the new cache namespace is ready, all traffic uses it. This results in no slow downs on the public facing site, and you don't need a user of your website to regenerate your keys. You could use a cli tool using something like symfony2 console to handle this for you. I use this technique is an application that gets up to 3000 req/s, the users never hit the database, invalidation of cache is hot swapped, there are no slow downs. Your idea is still very good and would be fine for some cases, but in high concurrency, I wouldn't want to rely on a user of my site conditionally invalidating my cache. I thought your article was well written and it's obvious you put a lot of effort into it. The code samples are always appreciated.
[Newer is always better] (http://browserdiet.com/img/new-is-always-better.gif) I'm not really familiar with the changes in Laravel 3-&gt;4 but unless you find a specific reason to use the old version, newer is always better.
We can all be friends now! PPI Framework uses both Symfony and Zend at the same time allowing you to pick-n-mix the components that suit you on a per-project basis. The website is documented against PPI 2.0, we have been working on PPI 2.1 for the past few months now. http://www.ppi.io - http://www.github.com/ppi
Omg amen yes! I do too for those times I can. Sales reps HATE it!
Omg amen yes! I do too for those times I can. Sales reps HATE it!
The open office design is not at all condusive to programming productivity... if youre the only programmer
Enjoyed the post, was well written and clear. Blogging always takes longer than you expect :) You may want to take it a step further and mention that all cached timeouts should be randomized by a slight amount. Systems tend to synchronize across all your cached values, so even if any single cache type is "protected" with your method, multiple cache types may be hitting the DB at the same time as the system expires them en masse. By "fuzzing" each ttl (e.g. 1 hour +/- rand(10) minutes), few timeouts land on top of each other, smoothing out load and avoiding Thundering Herds
If you are working on code like a library, this can be a big pain in the ass for everyone. Getters/setters allow you to define the public interface to your code but change the internals later. If you use public variables and then, one day, realize you need validation...you are going to break any code that depends on your public variable
&gt;I don't use SQL for any kind of user-related information. Any kind user-related information = any kind of relationship user has with other entities or just "username and password and access roles"? In other words how do you manage user relationship? As far as I know LDAP is slow on writes,so not really good solution if user related information has lots of writes and system has 100.000 users? (shopping solutions, invoices, big CRMs, facebook like apps, etc..) your point is fair, but hardly argument "big boys do it" is solid one, when in fact it should be defined by application requirements, not trend. edit: CMs to CRMs 
I probably should. I just haven't taken the time to setup vim to do that sort of thing.
Bower. Takes so much of the pain out of front-end dependency management.
I wasn't aware that there were discernable standards in WordPress's code.
there are some captcha system with that it should work, but reCaptcha has a lot of protection against this kind of thing, the common Porn/Password scripts usually only work a day or 2 with reCaptcha generally it involves a lot of knowledge and usually needs more than just curl as you need to render a javascript. In the end PHP will make it very hard, there are ways to use selenium for this but in the end its a lot easier with phython/scrapy/selenium than it would be with php/selenium
Reddit
Care to share?
I heard the plot development in Laravel 3 is better.
BOOOOOOOOO
Oh god, #2 is such a big timesink for me. Write write write ... wait, can this be done better? Google search. Best practice, you should use a flarwarble object to multiply the hexagonal efficiency of your subcode. Rewrite everything to conform to this. Three weeks later find a blog post somewhere "Flarwurble Objects are the worst thing in the Universe, they are the software equivalent of HITLER! You shouldn't use them! EVER!"
MySQL Workbench? That is awful software.
The trick is storing the cookies. This is basically how advanced phishing pages works. - Query the page first. - Save the cookie or any session identifier. &lt;-- this is the important part. - Display the captcha on your page - Get the captcha value from the user, send it by POST along with the gift card and and the pin. Don't forget to pass along your cookies retrieved in step 2 or it won't work. - Retrieve results. In your case, the captcha is in element img#captcha-image. http://www.php.net/manual/en/function.curl-setopt.php CTRL+F for cookie, cookiefile and cookiejar. Good luck! 
Seems like it would be a kajillion times easier to just add a small random number of minutes/seconds to the expire time when things are being put into the cache in the first place. We've been doing that for years and pretty much never have the cache crunch issue.
A small dry-erase board is also super handy. I have one that is something like 2'x1.5'. It's the quickest way for me to get my idea down on something and out of my head so that I can start to parse out the complicated elements.
Thanks man, you bring up a good point. If I find some free time to do another piece on caching I will include it as one of the tips :)
 Class Watchmen extends Test_Runner_Test { public function __construct($someThingToWatch) { $this-&gt;watch($someThingToWatch); $this-&gt;watch($this); $this-&gt;watch($this-&gt;thingsImWatching); } } Etc. etc. ... watchers all the way down...
xmonad
Mine is heavily-based on Sentry, https://github.com/cartalyst/sentry I will omit fields like first_name and addresses. **Table users** id, username, password, activated, activation_code, activated_at, last_login, persist_code, reset_password_code **Table users_group** id, user_id, group_id **Table groups** id, name, permission, created_at, updated_at So far, with this, you'll have user / permissions. I try to never use single permissions per user and always use groups, but if you do need it, just need to add permission col to users. Now for the throttle. This is to prevent brute force attacks. It basically disables the login after x number of attempts **Table throttle** id, user_id, ip_address, attemps, suspended, banned, last_attempt_at, suspended_at. The logic goes like this: - Is user activated? If yes, continue - Is user suspended/banned? If no, continue. If yes, check when was the last_attempt, if it's more than x hours, set suspended to 0 and continue. Also check if it's from the same IP. - Is the password correct? If yes, login, if no: add attemps+1 and make suspended if attemps = 5. 
I do that instead of using getId() and setId(). The in my code I can just echo the value with $user-&gt;id() instead of $user-&gt;getId(). I'm lazy, so I merge both into one
You could also use magic methods for basic setters getters and have it fall back to a real method for more complex get/set operations
Thank you very much. This is very useful information.
&gt;your point is fair, but hardly argument "big boys do it" is solid one, when in fact it should be defined by application requirements, not trend. In general, Directory applications tend to deal with user information. This is a valid separation of concerns and a proper way to deal with user related stuff. Of course you can craft the same functionality in a vast and diverse quantity of ways, and depending on the requirements, most of those ways will be A-OK. I'm just proposing, that if you're starting out for the umpteen time to build user-login-and-related functionality, you might as well look as how the big boys do it. I'm not implying that I'm a big boy or not, but enterprise grade user-related operations are mostly based on LDAP. That's why there are sooo many enterprise grade Identity Management solutions and that's why AD exists. &gt; In other words how do you manage user relationship? As far as I know LDAP is slow on writes,so not really good solution if user related information has lots of writes and system has 100.000 users? (shopping solutions, invoices, big CRMs, facebook like apps, etc..) User related information such as privileges, roles, passwords, telephone numbers, etc. are perfectly fine residing on LDAP. User&lt;-&gt;user _relations_ are not. That's up to your code and many other unknowns. User&lt;-&gt;invoice relations are also not well suited to be expressed in LDAP. I'm not saying that everyone should drop SQL and it's marvelous relational operations, i'm saying that people should use the right tool for the job, and LDAP is great for RBAC which in turn is a great way to deal with users in an app. That's it :-)
Amen for Sprite Cow. Not a daily tool, but incredibly useful and time saving when sprites are involved (*especially* if I didn't make them).
I had never heard of Sentry before. Very cool, I am going to look deeper into this.
God, i hate that. It takes less than 10 seconds to find the answer in google! When i'm really, really busy or in a bad mood, i just send them the lmgtfy.com url.
Is this a placeholder incase you want to do more to it? I don't see the benefit over echo $user-&gt;id or $user-&gt;id = 2? It's not like these functions even do a check to make sure it should be an integer or anything like that. (sounds like a criticism but is intended as a question! :) )
In think this comes from our possessive attitude in terms of our language. It's not our language anymore.
I've met native English speakers that don't understand what they are programming haha
Well it depends. I think all frameworks ar slow but it id a matter of using the right tool for the job. Also cake has a very handy caching system. Eg: you can create cache files for your queries. These type of things are what I would do afterwards - optimize. Cakephp defintely has the easiest learning curve. Everything is so easy and handly. Once you use cake, it will be hard for you to use something else.
Yup. 
I definitely get that there are different tools for the job, and i have used cake but for what i do it's just not fast enough. I'm also not entirely sure why i'm getting downvoted so much...
Oh boy, you are defintely right about "higly modular but difficult to construct" - seriously, this is a big turn-off for me. Typing so much code for little stuff just doesn't make sense especially when there is a deadline.
Actually, questions like these are exactly like watching movies. The only problem is that I'm watching [re-runs](http://www.reddit.com/r/PHP/comments/1djzyj/starting_a_new_app_and_want_to_use_laravel_should/).
Why do something simple when you can do something *horribly complicated*?
No, and if you absolutely need the data under a VCS like SVN or Git, I'd write a trigger to, when one of tables in question is updated with data, write a new record to a third table. Have a cron check that third table, and if a new *unsaved* record is there, have it dump the contents of the tables into SQL files, and commit/add them to your VCS.
I don't like being able to do echo $user-&gt;id because properties should not be public. I was taught to only access properties through setters and getters to force proper sanitation when the class itself is not the one modifiying the value. Yes, it also acts as a placeholder for when I need to perform more actions against the value. It also allows chaining of metohds: $user-&gt;name("John")-&gt;email("john@gmail.com")-&gt;dao()-&gt;save();
If you think that's complicated, I'm sorry.
Man I love cake so much. Now that my team uses it they are forced to respect conventions. That was the easyest way to get rid of spaghetti!
Very related and on php front page. http://www.reddit.com/r/PHP/comments/1djzyj/starting_a_new_app_and_want_to_use_laravel_should/
Hmmm... this is weird. Can we have the bigger picture? Why should the data be on version control? If you're trying to keep track of changes, copy it in another table before writing it. http://stackoverflow.com/questions/2751808/how-to-version-control-data-stored-in-mysql 
How about not using curl directly but an http library that supports cookies (and scraping)? I wouldn't reinvent the wheel around curl these days. Brilliant people already have.
Oh, it made sense. But was it over-complicated for the task at hand? Absolutely. There's the classic paraphrase of Albert Einstein, "Everything should be made as simple as possible, but no simpler." I try to code to that principle. I see a lot of code that looks like [a Family Circus comic](http://1.bp.blogspot.com/-mGCbzj319lQ/TkBBuSjY9LI/AAAAAAAABE4/V_55Wl9f_MI/s1600/FamilyCircus090201.jpg). Don't tour the neighborhood when walking across the street will do.
I used cake out of choice for nearly three years. It taught me a lot about coding style and conventions I then moved jobs to a place that used Codeignighter and have since moved jobs again and decided to go with Laravel. I would not go back to cake given the choice now.
This seems rather over-engineered. YouTube simply add a small amount of variance to their cache lifetimes, and voila, no stampeding rush. Also, look at how http caches such as Varnish handle cache bursts.
The original comment you are responding does not solve the problem I'm discussing so I'm a little confused why you label my approach as over-complicated. Yes, there are different ways you can solve this problem, such as setting expiration date to infinity and using CAS to inject data directly into cache, or like another poster pointed out had a x layers of caching. All of those solutions are not really 'cookie cutter' (as in you can't just implement them in a wrapper that people can use) and require a more complex approach. Unless of course you mean that you can simply solve this problem by spinning up tons of MySQL slaves (if you only need to scale reads) then that's fine but I don't think throwing more hardware at something is 'solving' a problem :)
Duplicate post.
For anyone like me who was wondering what "3NF" tables meant, it refers to "third normal form", or ways of optimizing/normalizing your tables. [Here's some info!](http://www.andrewrollins.com/2009/08/11/database-normalization-first-second-and-third-normal-forms/)
Alright that sounds good. What do you recommend? Right now I'm having some issues I haven't even discussed here yet and a new approach might be useful.
Ooo thanks, I'll try remember that, although now when I think of a building exploding I naturally see floors as an array turning into a string, but how you said that they break apart makes a lot of sense.
I think 4 is releasing the end of May
The key, the whole key, and nothing but the key. So help me, Codd. 
Goutte is a nice scraper. It utilizes Guzzle which is the most popular curl wrapper. Guzzle has support for cookies. So: Goutte is a scraper with cookie support. Above libraries should let you focus on the app itself instead of the http details.
Haha. Yeah I'm fairly good at normalizing DB's, but I had never heard the term. I was like "Oh, okay, I do that already but now it has a name. Cool."
"Product attributes" is your fact table and should never change. Just add new attributes and group them to one active "product" id. "Products" is a slowly changing dimension. This you alter at will with a column denoting active-ness. Also, read Kimball data warehousing toolkit.
Interesting, I'll have to check it against my ZF2 project when I get home to compare :)
Based on the script, it's decreasing the font size down to 10, and then at that point breaks the text into new lines. It could be done a little smarter by doing a word count, and then breaking the text into new lines based on a general rule, before decreasing font size. You should enforce a more reasonable word limit than your first example, though.
Ah ok :) Fair enough. I guess I missed the RBAC part and I agree in that respect. However, &gt;User related information such as privileges, roles, passwords, telephone numbers, etc. are perfectly fine residing on LDAP. User&lt;-&gt;user relations are not. Just wondering: How do you handle a scenario when you have x amount of users and user related entities AND LDAP as RBAC? for example: I have LDAP as my auth and RBAC. Now, if I want to list all users and the count of their respective user relation data (eg number of invoices) and display their respective user related info (i.e. name, phoen number, role ) Do you do two septate database (assuming that LADP is *sort of* database ) calls and let the code handle that or do you store extra (or rather clone) data in SQL to handle these listings? Don;t get em wrong I am genuinely interested. Never used LDAP in web apps and always hated the mess that can happened with RMBC [mysql schema](http://i.stack.imgur.com/WG3Vz.png). However, when I try to visualize it I wonder how do you merge the two? 
I use Rescue Time as well, and wouldn't have thought to suggest it, but when I read your comment, I heartily agree. It's a wonderful way to evaluate yourself. I've been able to find when I'm most efficient, where to put my time and effort, and how to best balance what I do and when.
If you are using some kind of framework and it is has support for composer check out https://packagist.org/packages/venturecraft/revisionable This will let you save any change to a model with rollbacks as well.
If your thinking is to use ActiveDirectory for every day web site visitors, don't do that. It *may* be able to handle it but it wasn't designed for that. Use ActiveDirectory for a central user management system for your internal employees, then you can always authenticate off ActiveDirectory for your employees. You can also check out using something like [Shibboleth](http://shibboleth.net/) to assist with setting up a single sign-on system to tie in ActiveDirectory and other login systems to authenticate against.
Right now you're probably blowing up with a parse error because of the two dots between $dir and $file. Take one out and it might work, or maybe you wanted a directory separator there: $dir.'/'.$file There's a constant for the directory separator that you should use instead of the string literal but the above will probably get you going. 
ctrl+hover And yea, PHP is very bad for operand order, but ctrl+hover is enough to remind me.
The . operator was probably the hardest thing for me to remember when I started PHP. I always wanted to use + to concat strings.
Hey thx for answer. I was really thinking abut this design. But I'm worried is this type of storing changes often used or not?
[redmine](http://www.redmine.org) for issue tracking, [github](https://github.com) for code review and source code control, whiteboard, pen, paper
A good developer that can communicate and has an engineer mentality is a very rare commodity; I'm sad to say that the majority of the code I've seen during my career has been poorly thought out and unplanned in most cases. The project I'm working on right now is such a case. It sucks because it puts a limit on what computers and the internet can do for the average company, but on the other hand knowing how to do it right makes you look like a rock star. 
As mainly a project manager and dev. lead 90% of my time is in github reviewing &amp; discussing code others wrote. The remainder 10% is either coding or fixing others' code (if it's beyond their capabilities, like some exotic NodeJS and PHP connectors)
use HTTP auth, its possible to tweak web servers to use ldap/AD for http auth instead of htpasswd
What do they mean by AD support? Authenticating users against it? Storing and retrieving data from it? SSO? What's the target audience for the app? Expected daily users, unique visitors etc?
For internal applications where you have users that are logging into their computers with domain accounts, directory authentication is likely desirable. All of the applications I support that use directory services authenticate without any perceived delays. Using a separate repository to manage user accounts is redundant and higher risk than assigning permissions to groups that already exist in AD. Having users enter credentials unnecessarily is clunky and not preferred.
I use [adLDAP](http://adldap.sourceforge.net/) to authenticate against our internal domain controller when accessing the Ops tools for our site. The ops tools give the ability to disable parts of the site, access a customer's account without their password (read-only thought), change a customer's password or email address etc. The access to each of the tools are controlled by which groups a user belongs to... Curly starts in Customer Services? Add him to the CS group and boom; he gets account access, change password and change email address. Larry joins Finance? Add him to the FIN group and he gets access to Credit Check referral. Mo joins as a member of Online Operations? Add him to the OPS group and he can now easily configure all of the live servers from a single point
I totally second that. I wouldn't dare to say that i am like that, but i also think that this is the best balance and i aim for that. Also, it's really important to not overestimate yourself in terms of engineering and get opinions from other people. A lot of people think that asking questions or get second opionions about a solution is a sign of weakness, but i think it's a sign for good engineering. Because a big strength is to know your own weaknesses.
You have some options: 1. Use a plugin. This maybe bad, because plugins for major CMSes usally lack support of important features for sellers (not on the frontend, in the backend) 2. Paralell installation of a eCommerce shop software. This means you re-do the site, link the account systems and is usually a pain in the arse and a lot of work. The pro of this is, that you have specialized software for both needs. 3. Use a hosted third party shop-as-a-service. Least amount of work, but also limited in what you can do, because it's tied to the service you're using. Please keep in mind: The "checkout" script will grow. It will grow to a point where it's no longer sufficient to the clients needs. So choose a scalable solution in the first place. I would personally recommend solution 2, but honestly, the given information in this post is not enough for a real recommendation. So see this as general advice.
A better language than PHP :P
it is used - i'm not sure how common it is - the only other approach I've seen is to have shadow tables for each table - foo, foo_history, bar, bar_history, etc. no, i tell a lie. the other option i've seen - which I've been told is 'common' (but I'd never seen before) is to have a version or timestamp on a table, and just always *insert* into a table, and have code that tries to pull out data based on whatever criteria *plus* the latest timestamp or version. This felt very awkward to me, and meant that it was easy to write queries that might give you the wrong data if you didn't write your queries with the additional version/timestamp criteria. that approach might be useful if you need to compare data against historical data often, but again, felt weird to me. if you just need it for audit/security purposes, having it in one separate archive/log table seems to make more sense - that table could be partitioned based on date, and actually could simply be on a separate database/server altogether if need be.
Checkout FoxyCart. It's not a drop-in solution, but gives you a lot of flexibility, especially if you're trying to integrate with an existing site. 
Sub-domain it as shop.whatever.com, that was you can use whatever solution is best for you as a dev
damn - you're right - that's how it was done - although we had the other bits on there too for some other reason - the system constantly had to update the other rows to unset their 'latest' bits when inserting, but yeah, that was it. been a couple years since I worked with that system.
&gt;am in the process of cycling through each file in the directory Perhaps you'll want to have a look at the [glob()](http://php.net/manual/en/function.glob.php) function, probably your best friend when wanting to loop through files matching wildcard patterns. Also, if you're running PHP 5.1.0 or higher you can use [SplFileObject](http://php.net/manual/en/class.splfileobject.php) to open your files the OO way. A lot easier to work with. $files = glob('directory/*.jpg'); foreach ($files as $file) { $file = new SplFileObject($file); } **In case you weren't using this already**
Oh. Right. I remember having to deal with those in photoshop at one point in the distant past. Thanks for the link.
What I do is clone the user info at invoice time. This is in clear violation of even the 1NF but after a while it starts to pay off. You get to keep all the little nuances that the user information has accumulated over time and your queries are dead simple. Also you always have a pristine copy of the invoice even when the customer changed address a month later I am no saying that I clone ALL the invoice and it's line items, I only clone the user information ok? BTW I keep using the invoice as an example, but I keep track of many dozens of different properties (wharehouse, work orders, vacations, sick days, attendance etc) the same way. 
Thanks! I was wondering how to throw that in there. I kept trying '\' but that was messing things up. I keep getting this error when I try your method. I think it's really close though. Do you know why it isn't being converted into a string? "Catchable fatal error: Object of class Directory could not be converted to string in C:\xampp\htdocs\opendatumv004.php on line 33" edit: current code: $file_handle = fopen($dir.'/'.$file, "rb");
On the other hand I'd almost always recommend #3, unless they plan on providing support staff for the website. Either that, or they have requirements that cannot be met by #3. Most of the clients I deal with don't push enough volume or traffic to justify #1 / #2.
the updating of the rows could be done with a trigger to offload the update delay from the client to the server. i made a recycling bin type table before, but it could have been used for history as well. i just stored a serialized array of rows in a blob, along with the table name, foreign id, and timestamp.
Thanks :) The [four.laravel.com](http://four.laravel.com) docs are great. They might not look like much, but I've seen some sneaky previews of the new designs and they are excellent. There is no benefit to going back and learning L3 as L4 is out this month, and nettuts have been going mad showing off L4 functionality. [LaraCasts](http://laracasts.com) is also a great L4 only resource. As far as I'm concerned L3 is irrelevant from this point.
whats next!!
Are you hosting on a Windows box? If so, using NTLM/Active Directory is very easy, you can enable Windows Authentication in IIS. Use some sort of pluggable authentication system, don't just hardcode it to use the MySQL database. That way, you can easily swap out the authentication mechanism if you need to. A basic implementation of this could be an interface with all the auth methods, and one or more classes that implement this interface. :)
This is a textbook use for event sourcing.
try fopen($dir-&gt;path . '/' . $file, 'rb');
I won't go so far as to say that there's no such thing as a stupid question, but I will say that a stupid question is better than no question at all. And when it comes to weaknesses it's vital to know your weaknesses better than anyone else because knowing about them is the first step to overcoming them.
Objects in php don't usually have sane string representations - you can't just treat them as a string and expect to get the right thing back. Assuming you said something like $dir = dir($some_path) earlier in your file, fopen wants a path to the file *as a string* so it's expecting $some_path.'/'.$file as an argument instead.
Oh it's not the things you are unsure about, and that the question might be stupid. It's about asking questions even if you are absolutely sure about what you are doing. Of course, not about everything you're doing, but if it's something important -&gt; ask! Most errors come from people who were absolutely sure about what they are doing. Everybody is prone to that.
Thanks! What modificiations would you do to the code?
At my job we put our database changes into a Migrations directory. The sql files are named 1 alter_users.sql, 2 create_accounts.sql and so on. These are pushed to our GIT server and when we do pulls to our local machines a phing script runs. One of the many things the phing script does is automatically execute the new sql files. It's not perfect, but its the first time I've actually had a version controlled schema for a database. Works pretty well. Also makes pushing to master/production easier where we have clients on separate databases.
Hmm...good question. Actually I don't use much outside of Netbeans, Git, and Chrome. I do like [xhprof](http://pecl.php.net/package/xhprof) for analyzing performance. For database stuff I also have the mysql general log enabled (in dev only) and I'll use &gt; /var/log/mysql/mysql.log &amp;&amp; tail -f /var/log/mysql/mysql.log religiously to know exactly what queries are going to the database layer. PhpMyAdmin is also used a lot. 
It's funny, because in my opinion SilverStripe is a bad example of good OO and Drupal (8, anyway) is actually not that bad. edit: opinions, man
why is WP bad? it's not really oop but it doesn't mean that the design is bad. they just tried to make it as accessible for designers as possible.
I can't speak for Wordpress but in the company I work for the designers prefer to twig. So when we develop projects in Symfony2 it is actually easier for them to write their own templates.
Clearly a flame thread
I recently saw this while looking at laravel, so a question for both yii and laravel: why tabs?
I know full well about normalisation and denormalisation. "Normalise for correctness, denormalise for speed" as the old adage goes. However, a user account table does not need any normalisation, and should be at least 3NF regardless.
magento is pretty good for learning concepts from.
I think [Bolt](https://github.com/bolt/bolt) is interesting. It's built with Symfony components and Silex, however, so maybe not distinct enough?
I think they were trying to support PHP4 up until about a year ago so the code is very old fashioned. Even for procedural its not that great. The security has been patchy over the years due to an awkward and IMO insufficient db layer and I have very little faith in the plugin system.
Symfony 2 is one of the poorest pieces of design I've ever witnessed. I've had the misfortune of developing two major projects in it now, and whereas it can speed along development times, its internal structure is a hodge-podge of conflicting technologies and ideas. It is certainly not well-written. 
1. No MVC 2. Insane backward compatibility for massively outdated code that's been deprecated for years 3. Over 3,000 undocumented hooks. 4. Intermingling of code and presentation is institutionalized I could go on, but those are some of the main drawbacks.
adLDAP is awesome.
You guys sound like nothing ever written is good at all. This thread is ridiculous.
[XenForo](http://xenforo.com/) is probably one of the best examples, sadly not open source. Insanely well written without trying to pretend to be something other than PHP as a lot of frameworks do, or falling victim to a procedural style or poorly-implemented MVC style as many other forum systems do.
Nowhere did my question mention PHP
Aside from something like Laravel (which I agree with you on)... Zend Framework is a very good example of the latest best practice in OOP PHP and I think Yii is also a good, but different, example. Outside the realm of the CMS some other decent examples of OOP PHP include Swiftmailer, the latest Facebook PHP SDK is small and very understandable and a random example from Github that looks solid, tiny and easy to examine would by [my-orm](https://github.com/jaceju/my-orm)... it's not "mine", just one listed in the "most forked this month" category that looks decent. 
it's really not that hard to convert an entire directory tree from tabs to spaces, fyi. It won't break anything.
&gt;Intermingling of code and presentation is institutionalized I never used to consider it a problem because I was a newb but working with wordpress right now and it's really a pain in the ass to crawl through multiple theme files trying to figure out where some HTML is. Of course there's no talk of refactoring, it just gets to be more of a mess as time goes on. Well if it wasn't that way I might not have this job so good :P
There is no design.
I dare you to enable error_reporting E_ALL for your Wordpest installation. 
You'd probably like [PyroCMS](https://www.pyrocms.com/).
By a baboon with a roulette wheel. Sorry, that's offensive to baboons.
IMHO engineers tend to develop overly polarized opinions about different technologies and techniques they encounter. Its not indicative of a mature understanding in many cases but rather groupthink or rigidity. The flames are fanned by legitimate anxiety over keeping systems live and stable but it gets magnified way more than necessary frequently leading to overconfidence, over-conformity, etc. Modern conventions like mvc separation and testing are real advances because they really do make software easier to maintain and to remain stable in the face of rapid codebase change. However keep in mind that software is just a tool that people use. WordPress may be coded inefficiently but it is and probably will remain for a long time the most popular cms. Users do not care about technical elegance. They just want their tasks made easier to accomplish. WordPress delivers that. TL;DR Don't take yourselves so seriously. Its just code and no matter how well you build it now some kid will say its crap in 10 years
Is there a list of changes somewhere?
It tends to promote the writing of coupled, hard to test code. Granted, I have hardly any experience with SilverStripe, same with Drupal (even more so 8) but I thought this thread was about sharing opinions heh. I was mostly remarking our differing opinions, not trying to badmouth either.
I do a lot of the same things you do, I imagine. I've been trying to think of a better way to build themes that don't turn into a huge mixture of php and html, but wordpress doesn't really like that at all.
I agree, but I use it all the time. I think WordPress is a good example of how much more important it is to get something good enough out the door that works as opposed to making the most flexible and maintainable system ever. So basically, focus more on your product, not just your code. If you put flexibility and future maintainability as a first priority there's a good chance you won't ever get your product out the door.
If you are coming from CodeIgniter, you should start by learning OOP (I know, this sounds a bit inflammatory, but I am serious). Looks up what following terms are: - S.O.L.I.D principles - Law of Demeter - Dependency Injection - Separation of Concerns - Unit testing And no, if you are learning new framework, knowing the old one is not require. In fact, knowing the old one can be out right harmful.
There's no notable performance difference between the two when used in a similar configuration. The default configuration does differ a little; Twig's enabled-by-default autoescape feature makes a notable impact. Smarty is pretty much on life support. There's not a whole lot of projects still using it and updates are very sporadic. The [previous discussion](http://www.reddit.com/r/PHP/comments/16clpw/is_smarty_used_anymore_if_not_what_should_i_use/) has some interesting tidbits.
I put flexibility and maintainability as a very high priority for my internal system, and as a result of this, two years down the line we've STILL never had a bug end up in the live system and have been able to build feature after feature without causing unexpected issues down the line. Wordpress is a good example of how shit code can sometimes result in a popular system, but it would have been possible for the same end product in terms of functionality to have been written in a far cleaner, more maintainable and more extensible way, and if this were the case, you'd almost certainly be seeing a lot more impressive wordpress based sites now. Wordpress is a disgusting pig, and I refuse to work for companies that specify it as a requirement. I just assume the company doesn't take coding seriously.
Massive use of the global keyword. Massive use of presentation logic mixed with business logic, classes declared in the middle of files that have a tonne of other stuff going on in them. All of these things have nothing to do with "our favourite design patterns of the moment" and everything to do with very poor design.
Especially if you have a handful of plugins installed as most do.
Can't you just use mail() to send text messages?
There might be better ways to achieve you goal of sending SMS, but to answer your question: http://php.net/manual/en/function.shell-exec.php You need to be careful, but its essentially: &lt;?php $output = shell_exec('echo "TEXT MESSAGE" | gammu-smsd-inject TEXT &lt;PHONENUMBER&gt; -len 400'); echo "&lt;pre&gt;$output&lt;/pre&gt;"; ?&gt; 
Well, you're arguing with the wrong person if you think I don't agree with writing clean, maintainable, and extensible code. But I think the idea of "refusing to work for companies" because of some moral objection to WordPress' coding practices is just silly. Some would consider PHP quite the disgusting pig (including myself even though I work with it extensively), but I assume you still work with it? Why don't you refuse to work for companies that specify PHP as a requirement as opposed to using something many would consider more "pure", such as Python?
So it's you I should be barking on about implementing your [IoC Container](http://four.laravel.com/docs/ioc) as a glorified service locator, that depends on global state?
I don't like python as it happens. Last time I looked into it, I'm pretty sure python had no abstract classes, interfaces (pretty sure I'm right about this... it was a while back now) and didn't even have private member variables. Not sure why people like it so much. Php is pretty appalling because there are a very large number of shitty php developers using shitty practises based on shitty tutorials that still unfortunately exist online. However, the language has come a long way over the past few years, and the good developers are now doing things like unit testing, proper deployment (not just dragging and dropping via ftp), BDD via stuff like behat and are able to take advantage of some very well written libraries thanks to the likes of Zend and Smyfony. Php can be well written, but unfortunately has a legacy of shit, and I try my best to stay away from companies that are still part of that legacy where I can. Edit: not to mention some great stuff in the likes of Composer, which really does help dramatically in terms of finding and using external libraries, including sorting all the autoloading and namespacing out for you automatically. When it comes to avoiding companies that use wordpress, it's also related to the fact that I hate agency environments and agencies tend to use Wordpress and Drupal a lot. I prefer to work on web applications and be part of the design from the outset if possible. I've been lucky enough to have done this a few times over the past few years, and this is definitely where I'm most comfortable. I had to inherit one wordpress site recently as part of a wider system we were working on. It wasn't until I got it stuck into a virtual machine via Vagrant and Puppet that I was able to start properly working on it (also setup Xdebug on the virtual machine, which suddenly meant I could get deep intraspection on the code itself). I've been able to modify and build stuff now, primarily because of the virtual machine setup, decent branching via Mercurial and excellent breakpoint debugging I have in Xdebug. As a result of this though, I've also been able to see how utterly terrible the internal Wordpress code is. I generally keep away from companies that advertise for Wordpress/Drupal/Magento in the job spec, because I don't want to be tearing my hair out, and I don't want to work in agency environments in general.
I really dont know if Gammu can handle mail() or maybe i just cant figure out to set it up.
Thank you. Im gonne try to set it up tomorrow at work. But a quick extra quistion... What does the &lt;pre&gt; commands do?
I work for an agency and you're right, there's plenty of tear your hair out moments. However, I actually enjoy the varied amount of work we get to do all across the board and for many different large clients with many different technologies. Plus, the fact that I have so much experience working with all these different large companies and being involved in their workflows means I would be very employable at any one of them if I decided to leave for whatever reason. All that said, you've pretty much described the workflow *I* prefer for any project where I'm calling the shots. I do dev w/ vagrant and puppet provisioning building stuff with composer and relevant frameworks, symfony2 being one of them. Although I use Git, not Mercurial. But I'm not above working with WordPress or whatever other legacy technology a client calls for. I've never seen behat before though and it does look interesting, is it a replacement for PHPUnit?
When I started writing Laravel, I just used whatever Sublime Text 2 had as its default, which I'm pretty sure was tabs.
Give me a specific example. I don't use service location anywhere in Laravel 4 as far as I know - everything is either constructor injection or setter injection. Also, it would help if you gave me a **specific** example of how something in Laravel 4 made your app un-testable. I find it helpful to ground these types of discussions in the concrete.
Yeah, I worked in an agency myself for a while a few years ago, but really didn't like it. I inherited a few code bases that were just awful, and we had a sales girl who dictated the amount of time we were allowed to spend on each project based on the client's ability to pay us basically. We were also assigned a number of hours per project, and that was that. So I'd inherit some absolutely horrible code base and would be told "you have 15 hours to implement x y z". Total bullshit! I couldn't code that way. I found that people in those kind of environments were always under constant time pressure to "just get it working", and so would build hacks on top of hacks on top of hacks, which meant that by the time you inherit a project, changing one thing might break 2 or 3 other unrelated things. This, combined with the ridiculous time pressure meant I was always unhappy, always pissed off and always stressed out. Since then I've worked for some pretty big companies as a lead developer, and currently work for a very well known company (you'd know them if I said...). I've built a few internal systems for them and have had the luxury of coding and designing the systems from scratch. It's hard for me to consider working in an agency environment again, and my cv is easily good enough to get a decent job elsewhere if I'd need to. Behat is different to phpunit. I'd highly recommend this video introduction (it's a paid for thing - $12, but you can watch the first couple of videos for free, and they're very informative): https://knpuniversity.com/screencast/behat/intro Also, we'd use Git in my job if I had the choice, but for some reason the whole engineering team uses Mercurial, so we go with that. The workflow in Mercurial is very similar to Git though, so it's ok. I hate SVN though now, because the way branching and merging work in DVCS just makes development a joy. Using the vagrant + puppet setup with decent branching means we're able to experiment so easily with stuff too - it really has revolutionised the way I work for the better. Again, the thought of having to give all that stuff up scares me. I get what you're saying about wordpress, and I do actually have to use it in work right now as I say, but just in general, I would be scared off if a job spec asked for it as a requirement. I'm quite choosy these days to be honest, and would only seriously consider jobs that were asking for unit testing and decent experience with Zend/Smyfony etc, as I'd presume they took coding a bit more seriously. For me right now, it's more about making the right decision when I next decide to move on to a new job. I don't want to be working on horrible code that can make me look bad, if you get what I mean :-)
I plan to continue to implement any critical fixes or security patches in L3. I'm not putting any hard date on when that will end. I certainly plan to do it for a while.
And let's not forget, it allows in-app editing of its own source. &gt; My mind is full of fuck.
This x 1000. Every digital solution I have tried for organizing what's on my mind has failed. A big part of it is probably that I don't use any mobile devices and I would be separated from it whenever I'm not at home or work. But still, nothing has been better than just writing stuff down, copying it down again in a more organized fashion and crossing things out when they're done. Sometimes I open the text editor for brainstorming and just write lines with ideas on them too, but if it's worth keeping I'll at least email it to myself and leave it in my inbox until I either give up on the idea or take further action. I clean out my inbox about once a month so I will always get to it by then even if I've been ignoring it. That said, it brings to mind a couple of email reminder websites that might fit in this thread - [followup.cc](http://www.followup.cc/) and [followupthen](http://www.followupthen.com/) that let you email yourself reading reminders via a bookmarklet, or make entries that will be emailed to you at a later time. I don't really trust a third party to not go out of business and leave me hanging with all my data gone, so I use neither, but I like the idea and I think it would be a really useful feature integrated right into the email client.
Clearly a pointless comment.
I find mybb very easy to follow. Can't say that it's good exactly, but at least they are working on a rewrite and they have released new versions recently. 
I just started learning Laravel 3 a few weeks ago. Today, after reading this thread, I installed 4 and am more confused than I've ever been. 
When will these videos be available? I am new to Laravel and 4 is confusing the bejesus out of me. 
I was curious about this osTicket thingy so I looked their repository up and picked a file at random and found this: if(!strcasecmp(basename($_SERVER['SCRIPT_NAME']),basename(__FILE__))) die('Kwaheri!'); wat
The answer is obviously Magento. 
Have you tried using with Composer instead or is that possible? It works a lot better, IMO.
lol a downvote. who is the idiot who thought my comment was wrong, i have a few books for him to read
The source for CodeIgniter is pretty good. 
There is almost never a good reason to use a die statement like that in production code. They should be using a try/catch block.
It wasn't aimed at you, it was a general statement in addition to what you said. That's why i wrote "one" instead of "you". &gt; However, a user account table does not need any normalisation, and should be at least 3NF regardless. In this case yes, but as soon as the user gets more attributes denormalization can be considered.
At last.
Thats a good example of defensive programming
I linked to your own documentation. Was that not enough? Either your documentation is wrong, or your code is static-only.
The Amazon merchant framework is not bad.
I used to do this, but recently replaced pen+paper with a Surface Pro and Onenote. I set onenote to save to skydrive. Now my notes and myself are much better organized.
This may interest you: http://jenkins-php.org/ The template uses the tools you mention and some more.
Great post! Also, I found a broken sentence under PHP CodeSniffer where the paragraph just ends in the middle of a sentence.
Hey, thanks! Just noticed that, meant to mention that PHPCS can tokenize JavaScript and CSS as well.
I've used tabs my entire life, what's the problem with them? It is a serious question.
This is pretty awesome. This might be more useful than trying to build my own "dev machine" to automate most of this. Will have to give it a spin and see what I can do.
Just a hint for next time: If you do a release - yes, this also includes preview releases - include an overview of important changes. Thanks.
I posted this in regards to code analysis - I also don't like to have a GUI - but its still better than having no integration for the analyzed results (e.g. grepping through a textfile and having to copy paste filenames and edit like for example in phpmd) The next advantage is, that you don't need to configure and set up so many different tools.
*saved* I am always on the lookout on how to write better/more maintainable code :P
I'll have to give it another try one of these days, but it looks like /u/MikeSeth pointed me towards something that could eliminate it altogether. I'm most interested at the moment in getting the raw data from these tools to put into something 'a bit larger in scope'. I have a ton of projects with multiple developers, it'd be nice to see how their checks out as it comes in.
In a monospace font, which is used by most editors, tab is a character which hasn't the same width as all other characters. This makes rules like the "80 character maximum" harder, because tab counts as one character, but takes far more space than one standard character. It depends on the editor config if the code is readable for the user, or not. It has basically no downside using spaces instead of tabs, because you're still using the tab key to indent, but the editor makes spaces out of it. For interoperabilities sake, space indentation is established as the defacto standard among programmers. It's still mostly a "religious" question, where the "space-ists" are in the majority. It has no effect on your code whatsoever, but the "tab vs spaces" debate is as old as programming itself.
I know what it does. I just thought it was a rather odd choice to print out "Kwaheri!" like that. I realize now that maybe I should've bolded that part or something to be more clear... It just seemed so utterly random to me.
Not sure why you got all of the down votes... Have a up!
Careful is right. If you don't escape the text message properly, you'll allow people to inject commands into your server shell! At the very least make sure you're using [escapeshellarg](http://php.net/manual/en/function.escapeshellarg.php). As a matter of taste I'd recommend finding an SMS gateway with a API you can call instead, or using something like the [Symfony Process Component](http://symfony.com/doc/current/components/process.html)'s ProcessBuilder, which will escape arguments for you. 
Does well written take inconsideration the actual speed as well? In example of ZF / ZF 2 you might call it the best written framework but what good is that when default optimization can't really handle load that well... Maybe that is why zend tries to sell its own server edition as well :)
One thing I learned in years of this industry... Opinions on what a well written code is, is exactly that an opinion. Give a code example to a group of people and 7/10 will have a negative comment...
I developed a lot of applications with php that used an active directory for authentication. I recommend [adLDAP](http://adldap.sourceforge.net/). Many companies use active directory for their domain users, so if you think about using that for your users aswell, there will be no problem. Performancewise, i can't say a lot, because i didn't make "very large applications", but i would guess, that it wouldn't make a large difference.
Another +1 for Jenkins. We have GitHub fire off a post-receive hook so I get an email letting me know if somebody put a syntax error into a build or committed something crazy-complicated. Sure pre-hooks are more immediate, but if its not just you then having it check centrally is easier to maintain, especially if folks are committing to a feature-branch.
There are many ways to do it. Just to give you some ideas, Drupal does something like this: Table: Post |ID|Active_revision_ID|Created_at| |:-|:-|:-| |1|1|2013-05-02| |2|2|2013-05-03| |3|5|2013-05-04| Table: Post_revision |ID|Post_ID|Created_at|All_other_columns| |:-|:-|:-|:-:| |1|1|2013-05-02|...| |2|2|2013-05-03|...| |3|3|2013-05-04|...| |4|3|2013-05-05|...| |5|3|2013-05-05|...|
We use hooks at work for Mercurial and dependency integrated builds. Automated check-in testing (JUnit or PHPUnit) can also be run (and from that code coverage). So when I check something in, it runs check-in tests against the stuff I checked in, but also any dependent projects. That's pretty cool and very useful. Also, as another testing tool - something like [Selenium](http://docs.seleniumhq.org/) can be run on a test machine against a website - automated testing against actual user actions (log-in, add a post, do something site specific). 
mysqli's speed advantage is not significant enough to be a factor worth considering. PDO, on the other hand supports multiple database drivers out of the box plus offers more flexible parameter binding. I wouldn't suggest using ORMs... PDO provides enough power and flexibility for most use cases. Certainly more than mysqli.
Or you haven't actually looked at the code to see what is happening there. It is possible to access the IoC container instance that way, as the container itself is bound in itself for convenience. However, all of Laravel 4's code uses primarily constructor injection, with setter injection in a few spots. Controllers in Laravel 4 are automatically resolved via the IoC container to allow for automatic injection of any repositories or service classes you may need. You never have to use the container as a service locator.
But jenkins isn't an analysis tool - it just can bundle such tools.. Some month ago, I also wanted static code analysis for my projects. The best I've found was phpmd and phpalizer (which was already quite valuable). After fixing all found errors, I gave PhpStorm a try and found many other types of errors.. on the other hand, projectes I fixed with phpstorm don't bring up any phpmd errors. So I just use phpstorm (I tell you this, so that you see my reasoning, why I propose it to you) If you want to run the inspections without gui, there is a inspect.sh or inspect.bat too. I haven't tried it yet, but maybe it does the job too.
The point is that flexibility, especially at little cost, is better than rigidity. This might be especially important in a package, like Magento, that will be used in a variety of environments. Here is an example of the parameter binding: /* PDO */ $params = array(':author' =&gt; 'Bartholomew Smeenge', ':title' =&gt; $title); $pdo-&gt;prepare(' SELECT * FROM books WHERE author = :author AND title = :title'); $pdo-&gt;execute($params); /* mysqli */ $query = $mysqli-&gt;prepare(' SELECT * FROM books WHERE author = ? AND title = ?'); $query-&gt;bind_param('ss', 'Bartholomew Smeenge', $title); $query-&gt;execute(); You don't have to keep track of what the various placeholders represent (which can be annoying with larger numbers of them) and you don't have to specify the types.
I might sit down at some point and fix it up a bit. I'll message you I ever do.
You could do this in mongoDB, a json blob in SQL should work as well. I'd leave the schema as follows: backups = { id: ['int', 'primary_key', 'auto_increment'], date_created: ['datetime'], user_id: ['int'] object_id: ['int'], object_type: ['int'], object_data: { // jsonified - original version } } Then doing `SELECT * from backups where object_id = 42 and object_type=product order by date_created desc`, will give a complete listing of all changes. The disadvantages of this system are that it makes it impossible to search for specific changes, When was the product's named changed, and it also makes it difficult to determine which column was modified, since you have to compare each column to the previous column. On the other hand, this makes it really easy to roll back to a previous version of the object/row.
I know that Sublime Text has a phpcs plugin, you can probably find plugins for the other analysis tools as well. 
I'm not sure I understand your question. Why don't you put it in a variable and access it as many time as you want? $request = file_get_contents("php://input");
You're sending it a POST request, not checking that the values are !== false and so the PHP MySQL driver is converting those `false`'s into `0`'s in your database. There must be some errant AJAX request doing it, its not just going to happen at random.
http://php.net/manual/en/wrappers.php.php &gt; Note: A stream opened with php://input can only be read once; the stream does not support seek operations.
If you really want to do analysis at a high level of granularity, I would take a hard look at newrelic.com
Which hints that EACH stream opened that way can be read only once. Open a new stream.
Interesting post. Not seen pfff before. Definitely one to look at. I'd be interested in seeing more posts about it. I set most these up as plugins in Sublime Text, then switched to PhpStorm, where they're built in. Next step is making a pre-commit hook that my coworkers would all be happy to use. 
Thank you so much! I did a form validation and it now works. EDIT: Just checked, your name seemed familiar. I love the CodeIgniter template system you made, I use it in everyone of my scripts!
There is only one php://input stream per HTTP request, so you can read it once per HTTP request. In PHP world that realistically means you can only read it once.
Why not just implement [SplObserver](http://php.net/manual/en/class.splobserver.php) and [SplSubject](http://www.php.net/manual/en/class.splsubject.php)? And there's a simple example of that over at [Design Patterns in PHP](http://labelmedia.co.uk/blog/posts/php-design-patterns-observer-pattern.html).
OK, assuming that doesn't matter to you then the parameter flexibility by itself still gives PDO a clear advantage over mysqli.
sretno! :)
Very glad to hear that. Thanks for your response!
Indeed very annoying. The easy way is indeed using file_get_contents, and keep the result. But if you want to use streams you can use a memory stream. $stream = fopen('php://memory','r+'); stream_copy_to_stream(fopen('php://input', 'r', $stream); rewind($stream); The memory stream is seekable, so you can easily use it multiple times. In the best case scenario you should try to aim to do a 'first pass' in the auth system, writing to the temporary stream while you verify the integrity of the body. If the stream is huge you can use php://temp instead of php://memory. This will automatically use a temporary file on disk if the stream exceeds a certain size (4 meg iirc). Last point: OAuth only requires the body of the request to be used in the sig if it's of certain content-types. You could just try to avoid those content-types and pick a different one. This would take away the integrity check, but SSL should still guarantee this. In HTTP Digest 'qop-int' is optional to use.
Yeah, that's what I would like to be seeing - not just information on my own work, but everybody's, since there are a lot of projects moving fairly quickly. Definitely going to get it set up this week.
I'll definitely do a more thorough write up on it - the documentation is decent, but there aren't really any examples of using it. 
I agree with all but your last point. What distinguishes "good" code from "bad" code is mostly maintainability, as we all know. If you write bad code, it'll be harder to maintain, and therefor less likely to be maintained. *However*, if you write good code, it's more likely to be maintained, and thus the code evolves with emerging coding practices, rather than falling behind. So, I disagree with the premise that all code is "bad" to developers 10 years down the road, because "good" code never lags behind good practices. Just my $0.02.
You can install with Composer if you want to skip PEAR Headaches. PEARaches? "require-dev": { "phpunit/php-code-coverage": "1.2.*" }, "config": { "bin-dir": "vendor/bin" }, Otherwise, you'll want to make sure you are autodiscovering and referencing the channel: pear config-set auto_discover 1 pear install pear.phpunit.de/PHP_CodeCoverage Depending on where you are doing this and how you might need to sudo the last command.
Addslashes(). It will add the nessesary slashes to prevent the break in SQL. Then when you want to retrieve the data, use stripslashes()
I'd give you an example on how to instantiate a PDO object but I'm on my iPad. I'm sure another fine redditor here can make you an example of how to use a PDO object to run your query. Edit: [here's a pretty good example.](http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers)
An event dispatcher isn't a subset of the observer pattern, but it is similar. The observer pattern doesn't have events, the observable object merely notifies its observers that something has changed, and leaves it completely up to them to figure out what. If you're going to write about the observer pattern, then surely you should know this.
How to start a new ul only once on new roleID?
In my exaple the glade is passed as a separate parameter from the event, thus you can ignore the event completely in your handlers and just use thepassed $glade thus having a "pure" observer. I for one wanted to add something useful to the mix =)
hey, thanks for your response, but i already fixed it. forgot to update the post :'D i never tried composer, but i'll do in later projects. i tried ALL the pear things and it didn't work, so i manually fixed it by adding the libraries...
Actually this has two issues wrong with it: 1. If using the **mysql_** based functions, you should be using [mysql_real_escape_string](http://www.php.net/mysql_real_escape_string) to escape quotes. (mysqli_ has a similar function) 2. Once the data is in the database, you do NOT need to strip slashes, as the slashes are not stored as part of the data. (and note, mysql_ based functions are deprecated as of php 5.5, meaning in upcoming versions, they will no longer exist, definitely get used to mysqli or pdo)
I would sort the array first: usort($roster, 'compareChildText'); which is a user-defined sorting function that calls our custom function for each iteration: function compareChildText($a, $b) { return strnatcmp(strtolower($a['roleID']), strtolower($b['roleID'])); } a more modern version of this, just because: usort($roster, function($a, $b){ return strnatcmp(strtolower($a['roleID']), strtolower($b['roleID'])); }); as far as how to display in their own UL tag... maybe just: $lastRole = /* STARTING ROLE */ &lt;ul id="&lt;?php echo $lastRole;?&gt;"&gt; foreach(... if($lastRole != $value['roleID']){ $lastRole = $value['roleID']; echo '&lt;/ul&gt;&lt;ul id="'. $lastRole.'"&gt;'; }
Here is an example for what you gave: $dsn = 'mysql:dbname=testdb;host=127.0.0.1'; $user = 'dbuser'; $password = 'dbpass'; try { $pdo = new PDO($dsn, $user, $password); } catch (PDOException $e) { echo 'Connection failed: ' . $e-&gt;getMessage(); } // Prepare the statement to execute each loop. ? = placehoder // *NOTE: No need to quote data, PDO handles that for you try { $sth = $pdo-&gt;prepare('INSERT INTO `customer` VALUES (?,?,?,?,?,?,?,?,?)'); } catch (PDOException $e) { echo 'Query Preparation failed: ' . $e-&gt;getMessage(); } // use what ever below you have for looping... while ($lines = read_line_somehow()) { // Split the line up into the different fields if (preg_match('/^(.{6})(.{1})(.{14})(.{8})(.{6})(.{14})(.{10})(.{25})(.{25})/',$lines,$data)) { // $data[0] from above would return the the whole matched string, replace it with your index $data[0] = $i; // Your original code had you getting $p9, but not using it in the query. popping it off // the array so the array only contain the the items for insert $p9 = array_pop($data); // Note, $data is an array in the order of the ?'s in the statment above try { $sth-&gt;execute($data); } catch (PDOException $e) { echo 'Insertion failed: ' . $e-&gt;getMessage(); } } } // close the connection $pdo = NULL; In this example, I had it get the value for $p9 even though in the insert you never used it. I did this in case you used it for something else in your loop. If you don't need it at all you can change the **preg_match** line to the following, and get rid of the **$p9 =** line if (preg_match('/^(.{6})(.{1})(.{14})(.{8})(.{6})(.{14})(.{10})(.{25})/',$lines,$data)) { [EDIT: stupid typos... I need sleep... LOL] 
90% of what i do is ecommerce, and my advice is to keep a separation between your CMS and cart system. Reason is growth. Unless you build the entire system together with the same framework/architecture, one element will always hinder/limit the other. As one system is upgraded, the custom integrations may break or other unforeseeable nightmares can occur.
Also, don't be afraid of the **try { ... } catch (PDOException $e) { ... }** code, if you are not used to it, it can seem a little intimidating. I avoided PDO for a long time as it was so different (and I knew how to properly use mysql_ functions correctly), but once they announced getting rid of mysql_ functions, I forced myself to get used to it, now it is second nature. Heck, I'm just now forcing myself into switching to do most things in OOP (and I've been programming in PHP for 13 years). This was a great book for me http://www.amazon.com/PHP-Master-Write-Cutting-Edge/dp/0987090879 covers explaining OOP and other topics like PDO
Now that's extremely sparse information. I assume this sets up a virtual server which things like PHP pre-configured? Why would I use this instead of Vagrant or similar tools? 
Sounds interesting and like to try this out but I'd like some details on how it works before running an install script.
Wow this is fishy. No docs. No source. 
Half of the problem is sorting the array, the other half is displaying the results by group. array_walk doesn't seem to fit here.
[Relevant Twitter conversation with the authors](https://twitter.com/ramsey/status/331397176532008961)
templating(it's called Blade in Laravel) is optional.
It seems that you should tackle this earlier, but a specific solution for the case you presented is also to use switch. foreach(){ switch ($value['roleId']){ case 1: // Do whatever when roleId is 1. break; case 2: // Do whatever when roleId is 2... break; // and so on.... } }
I started with [Laracasts.com](http://laracasts.com/), then watched ["What's new in Laravel 4"](https://tutsplus.com/course/whats-new-in-laravel-4/) by Jeffrey Way, and finally went through all the [documentation](http://four.laravel.com/). I also subsribed to be notified when this [book](https://leanpub.com/codebright) gets published.
Talking about this is the most useless thing anyone can ever so. It doesn't matter, the authors prefer tabs, whatever.
For each role UL For each user If users role == role LI user /LI /UL I'd personally organize the users by role after DB results do that the view would only be worried about output rather than logic and output. 
It's much more addictive when you can actually do what you want with it.
What am I looking at, exactly? An editor? A learning tool?
I'd say PHP is more of a gateway language, like marijuana.
&lt;?= "My first line of PHP!" ?&gt; I'm being downvoted for showing the short hand? Hrm.
[planetset](http://www.planetset.com) 
If I am not mistaken, that is the PHP course on http://www.codecademy.com/.
i was thinking about the same thing.
It'll pass.
PHP makes me hungry and lazy. Also, I sit around asking my friends "What if $a == $b and $b == $a are really the same thing? Whoa..."
Last time I had a hit of Php it was a 12week project and long nights, that hangover...
Bah! PHP4Life. Ive been doing PHP alone for about 10 years now and dont plan on changing that anytime soon.
I can't downvote Phil Sturgeon. Instead, I'll just assume he's cleverly referring to the effects of being placed in the American jail/prison system after being arrested for carrying weed.
If you want to do _web_ development, then the PHP/MySQL one is probably better. The Oracle one does not seem to be about web development.
If you want to learn about web development, PHP/MySQL would be more beneficial to you. Oracle SQL DB are scarce in the web world - the license is pretty expensive. 
I went from quick basic to visual basic, then PHP, C++, Java, and then just said, "Fuck it." and realized I could pay rent from PHP through less work. 
blasphemous! your first lines should be "hello world"!!! how dare you break tradition
id be interested to see how you handle View classes and template files. id say youre on the right track, (optional) dont forget to namespace your classes. edit: why is the app loaded through the Error class? Is there a point to running initialize/load/index separately and not chained or not as one method?
Since when MVC has started to mean "my very code" ? 
Yeah, php is pretty drug like. It might start off fun, but soon enough you'll hate yourself for using it.
My View class is below. In my controller, I tell the View class what view to load and pass the data to the view as an array. Then in the __destruct(), I include the template page and explode the data. class View { private $views; function __construct() { } function load($name, $data) { $this-&gt;views[] = array('page' =&gt; $name, 'data' =&gt; $data); } function __destruct() { if(is_array($this-&gt;views)) { foreach($this-&gt;views as $key =&gt; $value) { extract($value['data']); require_once('views/' . $value['page'] .'.php'); } } } } In the view file, I just use the variables that were created from exploding the array. In this example, my $data array would have contained 'test1', 'test2' and 'test3' keys. &lt;html&gt; &lt;body&gt; &lt;?php echo $test1 . '&lt;br /&gt;'; echo $test2 . '&lt;br /&gt;'; echo $test3 . '&lt;br /&gt;'; ?&gt; &lt;/body&gt; &lt;/html&gt; I was planning on using namespaces, but I was waiting to do that once I got a little more development done. For your second question, I had it on my to-do list to make that change because I really didn't need to run those separately.
Baby steps, man. Baby steps. IMO, this complaint is irrelevant. OP is not a "good programmer", and people who use CodeAcademy are not "good programmers". When OP gets to the point where he needs to separate it out, that's when you bring up separating logic and view, but you don't tell noobs to do their first programming Hello World in Laraval or Symfony or CodeIgniter. It's just too complex for someone just starting out. Instead, you start simple. You just get it working. Once it works, then you work on making it better. It takes awhile to get from OP's level to best practices, and most of the best practices will actually hinder a noob, imo. They'll get so caught up in what's "right" that they'll have a hard time figuring out what works. It's like when a kid is learning riding a bike. You don't just put them on a 21-speed bike and tell them to go. You put them on a fixed-gear bike with training wheels. Once they've mastered the pedaling and turning of the wheel, then you take the training wheels off and hold on as they try to keep their balance. When they keep their balance, you let go and let them ride on their own. After awhile, they're solid enough at the basics -- pedaling, braking, balancing, turning, maybe even riding with no hands -- and then you get them a multi-speed bike, which is a whole new ballgame, and the sky's the limit. They've reached the point where they can start to implement best practices. Likewise when learning programming languages, you do the bare minimum to get results. Then you show them a little bit more, and a little bit more. As time goes on, the training wheels (mixed HTML/PHP) come off and that's when you introduce more advanced concepts like MVC and separation of code. My two cents, anyway.
It's a powerful thing when you learn how to make computers do what you want!
Aw come on, this is for people literally programming for the first time in PHP. Having your whole program in a single file makes it much easier to get a mental model of it. If you are writing this thing just for yourself, do you really have to worry about separation of concerns?
`%= "Perl's shorter."`
Short tags aren't always supported so they're generally discouraged. Damn shame too.
function bytesToSize() nevers returns $sizeformatted
Ok i like this ... the main problem was since i was using a third party oauth server lib ..coz its a pain in the a$$ to write one on my own given the short deadline ..will try this out .. 
This would be the ideal situation but the problem arises because the oauth library does a $request = file_get_contents("php://input"); and reads that data and discards it in a post request the reader according to this help post on [stackoverflow](http://stackoverflow.com/questions/3107624/why-can-php-input-be-read-more-than-once-despite-the-documentation-saying-othe) seems that since the data input is small the best way would be to duplicate the streams and have one you can rewind 
Id like to thank you for the awesome help .. Asanteni ありがとうございます
Shorthand echo is always available as of PHP 5.4. PHP 5.3 is on its way out the door. The plan is to EOL it one year after the release of PHP 5.5. So, soon, all supported versions of PHP will have shorthand echo available.
Good job on the hidden wit. 
PHP: Not even once.
I'd love to hear your thoughts on how I could improve this. Do you see anything that's blatantly incorrect or could be optimized? I only used to use procedural PHP and learned to use classes. Now I'm trying to learn how to use a bunch of classes together to make an MVC. Thanks!
Nice!
Are you doing freelance work? Did you have him sign a contract? If not, you always need to have a contract between you and the other party. The contract is designed to protect the both of you. It would prevent things like from happening--you could just keep what he has paid you and not give him any updates. And next time, get 50% up front--no exceptions.
Check out the Python course. It's nothing like the PHP one.
extract() may not be the best way to load variables into a template, and this doesnt let you add logic to your templates. Also, require**_once** wont let you reuse that template. I like the idea of loading the template into it's own class, so it has it's own set of methods: $this-&gt;view-&gt;load('list_users') -&gt;addData('key_one', $data_one); -&gt;addData('key_two', $data_two); $this-&gt;view-&gt;output(); Build the view class kinda like this: class View { private $data; private $page; function load($name) { $this-&gt;page = $name; return $this; } function setData($key, $val) { $this-&gt;data[$key] = $val; return $this; } function getData($key) { return $this-&gt;data[$key]; } function output() { include('views/' . $this-&gt;page .'.php'); } } Now you could extend the View from your custom controller: function load_classes($view) { $this-&gt;view = new $view; } which would call your new view: class View_Users_List extends View { function getUsers($format = false) { return $this-&gt;getData('users'); } } and use that method in the template: &lt;html&gt; &lt;body&gt; &lt;?php foreach($this-&gt;getUsers() as $user):?&gt; &lt;li&gt;&lt;?php echo $user;?&gt;&lt;/li&gt; &lt;?php endif;?&gt; &lt;/body&gt; &lt;/html&gt; 
If you are going to get screwed either way, well don't finish it. Stop it now. Fuck it! He won't pay you. 
I had a contract. It said nothing about providing updates that he coded into his website since I started. I didn't even think of that when I/we made and agreed upon the contract. It just said "re-code".
Cut your losses, don't look back. And make sure you get the client to sign a contract next time. 
&gt;you could just keep what he has paid you and not give him any updates. Yeah, and then I lose out on all the extra work I've coded that he hasn't paid me. However, he basically even went so far as to say "look I don't care if you don't give me any code at all, I've paid you what I've paid you regardless"
Agreed with this. You'll lose out on the work you've done so far, but it's better than having to deal with this guy.
Then you've just learnt a lesson about specifics. When someone says re-code, you need to really hammer out EXACTLY what that means. When someone says 'improve', 'upgrade' or 'change' then you really need to bullet point an exact list of what's to be done so the clients expectations and your results marry up. He sounds like an asshole, cut your losses. &gt; give me the files you've done and walk away I would quote that back to him and say no problem at all, that will be £x amount and I would also change your contract in future to have an 'early exit' clause. You remind me of when I first started freelancing, working for cheap rates for idiots that never pay. Charge what you're worth and make sure you get it - don't be an asshole, but don't be too flexible. If you went in to your bank and told them they'd get their mortgage repayment 'sometime next month maybe' then you'd be out on the street pretty quickly.
Your function does not have a return statement, so wherever you're calling it (I don't see a call) is basically getting back `null` instead of the expected format string. Plug: I wrote and released a stupid little component for handling file size formatting a while ago. Maybe it will help you: [ByteSize](https://github.com/rchouinard/bytesize).
I love when people get excited about it, it helps me feel more enthusiasm for what I am sitting here doing. Like, oh yeah! this is pretty fun. 
You don't lose out on that work necessarily. If he wants it, he needs to pay you for it. This is why you have a contract. You may need to just add this to your "Life Lessons" part of your brain and get a good contract. List out when things will be delivered, at what stage of the project, etc. I hate the situation you're in, but hopefully it will be a lesson for future freelance work.
This isn't a valid excuse to teaching bad habits from the very first lesson. Look at the lessons for other languages. They approach the language in a much better way. This approaches PHP in a very, very antiquated way.
Yep, well so far I've given him none of it. But like I already said, he basically said he doesn't care if he gets it or not. Something tells me he is hurting for cash and doesn't want to continue. Or his "donation drive" wasn't as successful as he thought and thus, doesn't want to feel like he is "paying out of pocket".
Good points. At work it's been realised that our testing isn't really good enough in all projects and I agree but there is talk of hiring someone to lead the testing which sounds like an extremely dubious move. Unless the new person has carte-blanc to tell all the existing developers (many of which will be their seniors) that their code is wrong and must be re-written it can't possibly work. You can't separate testing from coding or the testing is impossible.
There are always PHP jobs available. Granted, half of them revolve around fixing other people's shitty code...
Views are instances that contain all of the UI logic. They are **not** simply blobs of HTML. In context of web, view returns interface to a user (which, btw, is the browser, not the human). First of all, view instances should request data from model layer (Model in MVC is singular. It is a layer, not a class or object). For example: when you are listing some items, "page" is a strictly UI related concept. The model layer has no idea what "page" is. Same for structures like "menus". In most cases, the view assembles the site from the templates, based on data that it got from model layer. In some cases the information from model layer would indicate that there was a `POST` request to the application, in which case the view would respond only with an HTTP location header. As for the article, the only correct bits from that page are the first two paragraphs and the diagram. The rest is crap.
Here is another solution: I don't know the skills of the man you're working for. But you could also implement some "security mechanism" that destroys your work when you don't get paid until XYZ date. So you could be OK to your client and deliver your code and have a jocker in your pocket if he does not pay. If someone tries to trick you, try tricking back. After all it sounds not fair to me how he is treating you. And 50% up front sounds always fair.
No, it just speeds up the process.
I don't remember.
By that argument, I'd have to say a command line based tutorial would be a superior approach to getting immediate satisfaction. Shilling interpolated php is just giving some poor sap something he will probably need to immediately un-learn. Why start like that of you don't have to?
I've actually been brought on two companies as this exact thing - to get the developers' code into testable shape. I was brought in as a senior. The first company didn't actually understand that writing testable code, and writing the tests themselves, would require that their developers take some time at first to actually understand what needs to be done, why to test and how to test. Now I'm at a new company who seems to be much more receptive to the ideas.
But all this superfluous wrapper code just adds complexity which makes the baby steps even harder. Too much information, to many concepts a beginner needs to get a grasp of. &lt;?php echo "Hello world!"; would be a lot easier, wouldn't it?
I worked for a firm that bought some PHP that threw errors all over the place, and worked with a database... no schema created or attached. 
This one has been going around for ages in different versions, but this is the one I use: function formatSize($bytes, $round = 1) { $suffix = array('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'); for ($i = 0; $bytes &gt; 1024 &amp;&amp; isset($suffix[$i+1]); $i++) {$bytes /= 1024;} return round($bytes, $round).' '.$suffix[$i]; } 
That's a fair point, and I agree with you that &lt;?php echo "Hello world!" would be a lot easier. However, I'd say that HTML and CSS is way simpler to pick up than PHP. I'm not sure it's adding THAT much more complexity, and certainly not to the level than an MVC would bring, I think. And I think it makes a little more sense to a noob when you can say "ok, so if you want to output this and make it look like that..." ...but maybe that should be Step 2 and not Step 1? Meh. Who knows? I didn't build CodeAcademy. :)
You're looking to build, what, exactly?
Several years strong and not hating it or myself.
The usual approach to things like this is to precalculate an expire time, store that in the database, and run a periodic task that will clean them up (or run them, depending on the type of task you're doing).
How much $$$ are you going to be out total? I basically agree with most people here - drop it, and don't spend a single second longer thinking about it. Perhaps, to help yourself feel better - look back on the work you did for the project, pick out any new skills, methods you learned and that's what you've taken away! Experience is more valuable than money in the long run. PM me if you're looking to pickup any dev. work - assuming you're freelancing? 
Great post. I think that many developers are guilty (including myself) and that testing is ignored by too many. Lets not get started on security. 
PHP is interpreted.
I was thinking runtime compiled for some reason, my mistake. In any case, it was throwing errors all over the place and there was no schema attached. 
 Yes, you can copy files from one location to the next. [PHP Manual for copy](http://php.net/manual/en/function.copy.php) Two issues i can think of. 1. Any other device needs to be mounted and the location of where the files would go needs to have the proper permissions. 1. You php.ini file will need to be modified so it wont time out during the copy. How would you go about doing it? The way i would do it, is first have the file be placed on the main drive, then have PHP copy to the second location. Note: I've done something similar to this, and im not entirely sure if this is how it would work for you. Another idea that i have is have PHP run a terminal command to copy so PHP wont time out and your not stuck the same page till its done. So go ahead and give me the down votes, i know it sounds bad with the last idea i have. Its just a thought.
Its a good point. 
That's funny, I like your dry humour - it's almost British.
You can install PHP on it's own (Or XAMPP/MAMP) and run PHP files from Terminal. 
I found this after some searching: http://www.moreofless.co.uk/sublime-text-php-build-system/ It works well, just make sure you read the comments if you have trouble, the smart quotes in the blog post break the code.
My salary begs to differ.
With TextMate 2 you can run just CMD+SHIFT+R and bam, output. Same as Sublime Text, I imagine.
I took the Oracle course in college and now use MySQL and would recommend that you do the same. If you can use an Oracle DB you can use a MySQL DB, but you might not get a whole lot of other chances to use the Oracle stuff. It'll give you something else to add to your resume.
whoa, calm down. no need to bring *salaries* into it...
If you plan to work for a big enterprise, Oracle might be more beneficial. That said, you can take most SQL you'll learn in any DB system and use it in another.
spend some time browsing [r/lolphp/](http://www.reddit.com/r/lolphp/) and if you are looking for something more substantial, [this is pretty spot-on](http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/)
Had a quick play with it. Looks good. I'd change the min_length and max_length rules to be &lt;= or &gt;= rather then just &lt; or &gt;. Currently min_length(4) would not allow "test" as a valid input.
like hookers and blow.
and ob_get_contents() is like silly string on acid
He can file a dispute with PayPal claiming he did not receive what he paid for. Unless you can show PayPal specific items that he requested and that you delivered then you will lose. I think there may be a time limit for lodging a dispute though, a month or so, but I may be wrong.
Hah. He said psychological, not memory. Silly Phil. Put that bong down!
Ah... Well in that case maybe take the MySQL course. Two birds with one stone is definitely better than anything I said. Good luck!
I really &lt;3 [Boris](https://github.com/d11wtq/boris), a REPL for PHP that works fantastically. I have it aliased to `php-shell`.
 &lt;?php // I started PHP when I was 24 // I plan on living to be 100 years old $death = 100; $meth = 'PHP'; for($life = 24; $life &lt;= $death; $life++) { echo 'More '.$meth.' please?'; echo (isset($_GET['meth']) &amp;&amp; $_GET['meth'] &gt; 0)? ' Thanks, yo.' : ' I\'LL STAB YOU, BITCH!'; echo '&lt;br&gt;'; } ?&gt; I don't even... EDITS (thanks, acidzest; I had one too many last night when I wrote this): escaped the apostrophe on "line 11". Also, added spaces.
Never worked with ownCloud, so im no help with that.
I remember my first time. Feels goooood don't it? Congrats!
What would be a better approach to introduce the language without utilizing OOP?
Well this might scare of a fresh starter as long as he is not in the position yo really judge those facts. He needs to put them into context and decide then if they are a problem or not. Anyway just to put this "famous" (controversial) article into a different light, there is a good response from one of me more popular php gurus out there: http://fabien.potencier.org/article/64/php-is-much-better-than-you-think
About to start peeking at PHP (I tend to subscribe to subreddits such as this before getting to work on it, to get a sense of the community) and will probably wind up using Codecademy as one of my starting points, as I've done with Ruby and JS. The Ruby and Python lessons, e.g., are all command-line based, and did a pretty good job of conveying the basics. I will say, though, that until I started digging into Rails and finally started to try to understand this whole MVC business, I had no conception of a 'middle ground' between what I could do front-end with JavaScript and what I could do back-end with Ruby. A few things have started to help me close that gap: learning about .erb files, HTTP request methods, routes, and controllers, but there are few resources that bundle this all together for you nicely in a here's-everything-you-need-to-know-to-build-a-web-application. Concepts like CRUD, REST, DRY, etc., are rarely explained in detail in these kinds of courses, so often you might find yourself (as a newb) finishing a course and saying "interesting, but when/how/why do I really use this?" At surface level, from this screenshot alone, it seems like Codecademy is trying a new approach with PHP, so you don't finish the course and go "Fuck, now what am I supposed to do? I can write a (very) basic application, but have no idea how to allow people interact with it, no concept of how to interact with different files or a database, etc." Because of this screenshot – specifically seeing PHP embedded in HTML in these courses – I may be getting started on these courses sooner than later. Thanks OP! **TL;DR** From a quasi-newbish perspective, I think what Codecademy is doing here is pretty rad. Their Ruby/Python courses are great, but end at the command line. When you're completely fresh to a language there's a difference between un-learning (forget it all completely!) and learning how to do it more efficiently (keeping that in mind, here's how you do it better)
I really loved all of the talks. Next year maybe bigger venue and more speakers. As for the security talk, it talked about many different scenarios and dangers, not bad. Btw, the worst part was when some guy asked Miodrag from Limundo how they intend to protect themselves from bootleggers. I mean here was the guy speaking about technology behind one of the biggest sites in Serbia (very interesting talk), and some guy asks him about bootleggers of all things!
nice class i will try it 
There is a long and dusty road ahead of you, young padawan. Safe travels on your journey.
on linux you can make NFS drive and copy the files there
I believe the function load_classes() in your controller doesn't really match its purpose. Perhaps something more like load_objects() or load_instances(). You're not really loading a class you're instantiating them. function load_instances() { $this-&gt;view = new View(); $this-&gt;input = new Input(); $this-&gt;auth = new Auth($this-&gt;db); } I might be wrong here, just my thought.
You're right. Fixed it. Thanks for your feedback!
&gt; gigantic corporate environments where thousands of users are expected to be supported Just lol. You don't need to be Google to support projects that have hundreds of thousands of users.
Nice guys finish last.
That's nice repo. I have been working on my own PHP 5.3 Design Patterns framework https://github.com/RickWong/Phur. It's always funny to suddenly find out that one is reinventing the wheel...
I would use Laravel. It's not a micro-framework, but what is the matter with using a regular framework for a small site ? Great thing with Laravel is it provides a lot of stuff, but the stuff you don't need doesn't get on your way.
Depends on what the business logic involves. Sometimes you'd be better of using a CMS like wordpress. EDIT : I'm not sure what is a micro-site. You can have sites with a limited number of pages but very complexe business logic behind it. I dont evaluate the complexity of a project only on how much pages there is to code. You should detail your question.
dont go on , period. Or it means you are a sucker ready to work for free. And these kind of clients are not the kind of client you want to work with in the long run. I usually never deploy my code on the customer website server before i get fully paid. I always tell them that upfront. "I will only deploy the code on your servers when i get 100% of the money".
He's cursed for the rest of his programming life.
Ah I do remember that moment. So exciting to see it working and so much fun having dynamic content! This was back in the days of PHP 3 though, but still, was super exciting! (wow, over 12 years ago :O)
I'm not sure what a campaign website involves, so suggestion would be useless. 1. Can a CMS do what you want? 2. Do you need a framework at all? Something small like Slim (Silex is not actually all that small) would certainly be a nice start if you are running from scratch, but I'd have to ask if you need to start from scratch at all.
I have read this rebuttal article. Unfortunately, the author does little to address the actual issues with PHP as a language, and instead focuses on qualities of PHP that could be applied to any language. The facts that PHP uses git, or that many popular PHP frameworks are sharing code, or that it has a great dependency manager (which may be, I have not used it myself) has nothing to do with the quality of PHP as a programming language. The only point the author makes that I think supports PHP as a language is that it is easy for non-technical people to learn. That is, in some sense a good thing, but in another sense not.
I've edited my post above to show you the code. 
&gt;what are you making them for? Uh.. Their intended use? That is, archiving / packaging PHP files together. Could be useful if you're, say, delivering an application.
Sounds to me like you'd want Zend Framework. 
Look at the Python, Ruby, and JS lessons. 
I'd love to see patterns that use traits. I feel that sometimes people create convoluted patterns just because they have to support 5.3 and would otherwise make great use of traits. A personal question: I prefer to use a `SingletonTrait` than to extend a `Singleton` class. Would you also if you only had to support &gt;=5.4?
Yep, I got that. “Just wondering if they would be useful for things like build systems and other maintenance tasks?”
Drupal is worse.
+1 for Silex. Stays out of your way, but still helpful in getting the job done.
that one seems too bloated for me
True.... if you want to try something really new try this CMS www.microweber.net
You're going to have a tough time finding "expert level" without the "bloated" factor involved. But, on that note, I'd look at Symfony2. It is equally as expert oriented as ZF2, but from what I've heard, it has a different feel from ZF2. (Disclaimer: haven't used ZF2 before, but have used Symfony2. I enjoy it a lot.)
You're looking for an enterprise framework, but you think ZF2 is too bloated? Wat.
I've been working to replace a dozen or so shell and php scripts at work with a single Symfony Console application. I have a build system very similar to Composer's to package the app before it gets synced out to the utility servers. In this case, phar makes a lot of sense. The single file includes all dependencies and can be distributed and run easily. I've experimented a bit with deploying Web facing apps with phar, but it doesn't make as much sense in that context and I've encountered more problems than it solves. If you're interested in exploring phar, but don't want to create custom build scripts, check out [Box](https://github.com/kherge/Box).
*I'm a sham!*
Why?
I definitely see it being useful. Tag the version and have your build system / CI create a phar file that you can deploy. I want to start using it but I haven't had time to go through any tutorials and read up on it yet. Need to figure out: * How it works with autoloading * Performance impacts if any (and apc support) * Does it support multiple entry points. Can the same phar file run a and command line jobs (or is that the stubs job?) Updating production server by dropping in a single file with the build number in the file sounds much easier then rsync / backup and other update processes. Also more importantly it would prevent me from deviating from the build cycle and making a small change live to production just by editing a single PHP file. - Well make it harder at least. :)
Slow stuff should NEVER happen in the user request. The slowest part of this is going to be getting the file to your server, and as soon as thats done you don't want the user to wait for anything else at all. Any source you've seen saying do it immediately is written by somebody who is on crack. This needs to be offloaded to a background process as soon as it hits the server. Cron's dont run until they are fired every 5, 10, 30 minutes, which is forcing your server to wait for a while and do nothing, then do loads of work all at once. Background jobs however will happen as soon as they can, still maintaining the speed benefits of it not happening instantly. Beyond that, you probably want to look into getting that video to upload to your server in some sort of AJAX request too. This means they can fill out the form while that upload starts to save even more time. Vimeo do this themselves on their own web interface.
Neither Zend nor Symfony are bloated. They are full-stack frameworks. What this means is that nearly every low level problem you face is already solved, leaving you to dabble in the fun bits of your application: the business logic. You can also use all of their components individually, if that suits you better. See: https://packages.zendframework.com/ and http://symfony.com/components
+1 for laravel. check it silex, I think they just released a new version.
Many thanks for your answer Phil, and for confirming what I suspected. I'll look into Symfony2 background processes and also think about getting the ajax file upload.
captain obvious strikes again! laravel is good and easy to use for small sites.
That's actually not bad. It's not perfect or even my first choice, but i like it. Thanks for elaborating.
That's not a straight 1:1 though, as that implies that you're already in the interpreter's context. For the PHP example, it is going from SGML (HTML) context, switching to PHP and issuing the echo, and then switching back to SGML. I'm not a Perl expert, but I belive Perl would require just as many keystrokes as PHP would in this case.
Take a look at [Monolog](https://github.com/Seldaek/monolog) for a start. You can log errors to files or a database or have them emailed to you.
For a small site with fairly static pages, you can just use the router file and pass URLs straight to basic views with a template.
It REALLY depends on needs but you could be able to pull off a site like this using only the routes.php file in laravel. The advantage being that if (and this totally never happens) the requirements change drastically, you would be able to build out extremely easily. Still hoping for the Laravel CMS...
Looked cool until I saw that you needed to pay.. =\. 
http://php.net/manual/en/function.set-exception-handler.php
I would like to see more complex examples. In real life code is never that simple. In a mean time I can recommend this read http://sourcemaking.com/design_patterns
Singleton classes are a bit more useful with protected constructors so they can be overridden. 
Try Symfony2. I used Zend 1 for years and it was great. Zend2 is incomplete. There is a lack of documentation and it is very over-engineered. I'm new to Symfony but loving it so far. 
Someone might forget and make the constructor public, hence destroying the pattern. I have always used this way: final private function __construct() { $this-&gt;init(); } And using `init` as the constructor.
Even with proof, Paypal is very, very, biased towards the person who made the claim. Especially in cases like this, were a lot of work, research needs to be done, Paypal wont waste much time playing litigation. If it comes down to a Paypal dispute, the OP is in a bad situation, evidence or not.
I don't like using classes too. I find that writing classes takes longer and it somehow makes you write bloated code. Plain and simple functions are the best. We can just make everything with few lines instead of constructing classes, making stuff and then destroying them 
Can you go deeper into your thoughts?
Definitely. Edit: one might argue that traits are similar to class inheritance, in the fact that they add unrelated responsibility, albeit hidden in another entity, to a business object. It isn't different whether you use *User extends DatabaseModel* or *User { use DatabaseModel }*, both add database responsibility to the User object, which isn't ideal. I think the solution would be to write *pure technical traits* that contain zero business logic. That's why I think design patterns and traits fit together perfectly. Technical traits would be features like ArrayObject or Observer pattern. I look forward to the day that I can actually use 5.4 in production, then I'll definitely port Phur's 5.3 abstract classes &amp; interfaces to 5.4 traits.
&gt;Given that, do you think this paradigm is inverse to the Low Coupling principle of GRASP? No, I don't see them as mutually exclusive at all. Why do you think they would be?
Laravel 4 is probably your best bet, http://four.laravel.com/
No reason you can't lose any functionality... `array_merge()` to the rescue! function someFunction($param, array $options = array()) { $defaults = array('key' =&gt; 'val'); $options = array_merge($defaults, $options); // Do something... } Of course this is just one suggestion; what you do should vary by situation.
Don't get me wrong, sir, but you've completed misunderstood me. The directory crap was just an example – a bad one, ok. Take Kohana Models, for instance. When you write those classes, you gotta follow some conventions, such as prefixing properties with underscores and naming methods some crazy way in order to achieve the full ORM capability. Isn't that related to coupling?
have you thought of an external messaging queue service like http://iron.io?
Thank GOD you threw in that bit of misogyny. I was worried PHP folk were getting soft on that kind of thing. Maybe for your next script, you can do something like: &lt;? php for($i = 0; $i &lt; 100; $i++) { echo 'FAG!&lt;br&gt;'; } Cuz homophobia is also quite hilarious.
Seconded.
&gt;Expert, not enterprise. The distinction is irrelevant. OP claimed to be looking for something which embraces OOP practices, design patterns and best practices, something which enterprise frameworks imbue. Out of the more popular frameworks, ZF is probably most similar to the Java stuff OP is searching for and claims to miss. &gt; And since when has enterprise stuff to be bloated to be enterprise? It isn't. That was OP's claim. That "bloat" isn't bloat at all, but the very features OP claims to want. 
You shouldn't think of how big the framework is even if your project is small. I think you should focus on how easy to use it. +1 for Laravel
&gt;Take Kohana Models, for instance. I don't do Kohana, so I can't relate to what you're talking about. You sure it's just not a bad implementation? 
Nice to see, that I am not the only one, who fed up with this.
Yes, [FlightPHP](http://flightphp.com/).
I'm actually the developer of the MeekroDB library. Kinda neat to see its use advocated in things like this. I do want to improve the library, so I'm pretty eager to have discussions with people who have looked at it and hate it for some reason. So, what don't you like and why?
A very good deal. I also like Lynda.com videos , a lot of good stuffs for a month ( a month will never be enough to watch all the stuffs though ).
[Lynda](http://www.Lynda.com) *^if ^this ^link ^is ^offensive ^or ^incorrect, ^reply ^with ^"remove".*
They are not mutually exclusive, but in practice in a framework world this is usually what we see happening. Take CakePHP, CodeIgniter or Laravel as prime examples of this. When you upload an image, you can automatically resize that image by passing it config options. It then calls up the Image resize class. **Coupling**. When validation fails and you want to show the errors in the view, they are automatically bound to the view. **Coupling**. You use a "Form" class, which automatically makes validation errors available. **Coupling**. It can be avoided, but usually looser coupling = more boilerplate. For an example of how I see the comparison look at Laravel 3 v Symfony2.
Stop using Doctrine as well?
PyroCMS is [getting there](https://www.pyrocms.com/blog/2013/02/progress-with-eloquent-and-laravel), most of our DB layer is now Eloquent. I'll get 2.3/develop a little closer to stability then spin up a 3.0 branch.
Exactly my point. I knew I wasn't talking nonsense here.
I've used NetTuts for courses on advanced PHP, jQuery, and Laravel - and it's great. The instructor was Jeffrey Way each time, and for whatever reason, I can absorb and understand much more material with his videos versus Lynda. But what ALPHAMENSCH stated should also be considered: &gt;but only if you're fully going to dedicate lots of hours to it and want to learn. No point if you're going to spend a few minutes here and there on it.
http://www.codecademy.com/tracks/php Something like that?
Hehe no that's Artisan level ;)
not supporting HTTPS severely limits the usefulness of it, you may as well not have went through the trouble. HTTPS is not an esoteric feature that's specific to a certain tech stack.
Sure, but Doctrine is not framework specific. It's its own thing, and it's actually really fantastic to use all by itself. Symfony just happens to use it, too, but even that is not set in stone. There is *some* support for Propel and sf2. But since nearly all Symfony docs reference Doctrine, it's often seen as very coupled to Symfony itself. edit: clarity
Thank you so much for your reply!!!
It's **not** code coupling by definition when something happens after something else. It depends heavily on the *implementation* of these happenings: the code can be loosely-coupled, but still called automatically in a conventional order. 
Convention and configuration are about the application making decisions or not. They're barely about technical code coupling or framework modularity at all. Both *decisive* styles can lead to either *coding* styles. I think you might just be confused.
^ This, for outputting a nice error page. Plus http://pecl.php.net/package/APM for logging any PHP error to a centralized searchable and archivable database.
I didn't write it, but thanks for the compliments. I'm saying, if you look at all of the requirements for the bare minimum web server, you wanna be rocking basic HTTP input output and not a lot else. HTTPS is awesome, and if you need it, you want to install a web server. 
I [wrote a post](http://chrsm.org/2013/05/05/code-analysis-tools-for-php/) about this the other day. If you're not using namespaces right now, the best contender is Pfff, but PHPCS and PHPMD can detect undeclared or unused variables through third party rules.
Coupling is a measure of reliance between two units. If Class A must use Class B then there is high coupling. If Class A uses Class B but can also use an implementation if Interface X, then there is low coupling (the reliance is eliminated since you can optionally pass in substitutes). Frameworks usually demonstrate both high and low coupling depending on the granularity you take as a reference point. Within a specific "library" coupling tends to be quite high but higher level combinations tend to exhibit low coupling, particularly where substitution is essential for proper dependency injection. The use of mock objects during testing also promotes low coupling. For example, Zend Framework which does a lot less mocking than Symfony tends towards higher coupling between older components (it's been accumulating code since 2005 afterall ;)). Convention and/or configuration are therefore mutually exclusive from coupling. Coupling depends on entirely different factors - design, testing practices, use of segregate interfaces, and age. Older code tends towards higher coupling while newer code is spoiled rotten by Composer - who writes highly coupled code when you can grab such an abundance of dependencies online with ease for the first time in PHP's history?
I'm a subscriber and a happy one.
As you already know, Phars are popular for creating and distributing standalone command line applications. I have yet to see them be commonly used as web applications or libraries. There may be [some bugs](https://bugs.php.net/search.php?cmd=display&amp;package_name[]=PHAR+related) with the Phar extension that are preventing this from taking off. If you're looking to build your own Phars, you might want to take a look at [Box](http://box-project.org/) (disclaimer: I wrote it). Its purpose is to make the whole process a little easier.
...No? Currently there are well over a hundred domains.
Good post, there's definitely some confusion over the two that seems to cause people with unease over PSR-0 to avoid Composer or vice versa. More people need to know that Composer supports multiple autoloading schemes (even custom ones) and that conforming to PSR-0 doesn't necessarily mean one has to bother packaging their code for composer (particularly internal libraries.)
1.3 i'm sure. I haven't cared to revisit.
These two concepts are not inverses. Convention Over Configuration only specifies that the application make an *assumption* (not a *requirement*) about some piece of the design. If my class Foo creates an object of class Bar inside its constructor, then Foo and Bar are tightly coupled, because Foo *requires* Bar. However, if my class Foo allows injection of an optional instance of BarInterface, and and only falls back to creating a concrete Bar if nothing is injected, then Foo and Bar are only loosely coupled, because Foo does not *require* Bar. In the latter case, the *convention* is to use a Bar instance, which can (if needed) be *configured* to use a BarInterface instance instead - hence Convention Over Configuration.
I like nettuts+, I also enjoy [Uncle Bob's clean code video series](http://cleancoders.com/).
I have been in this exact same scenario and really want to help you avoid the mistakes I made. First of all, stop now. If he doesn't have the money right now, he isn't worth your time. The biggest mistakes I have made are agreeing with a client informally about a set of features and the client not having money and promising a position or future payment for work. If he is truly interested in your work as a developer, he will have no problem paying you. Secondly, you can get screwed with PayPal and people like this. I've had a client file a PayPal complaint against me for work I well deserved, and was told by a PayPal representative that because "my product does not have a tracking code or is physical" that it's not a *valid* transaction... it was total bullshit. I ended up losing the money. You can read my experience here: http://www.ripoffreport.com/r/nick-mccally/greenwood-indiana-46143/nick-mccally-mccalley-co-scammer-paypal-claim-stolen-source-code-ripoff-artist-falsif-710850 I wrote this about four years ago. It is still the first thought in my head when a client tells me they will pay later or can't. If you have any questions, just send me a PM and I can give you more advice.
I've found it to be quite good overall, particularly the Laravel tutorials. It's pretty cheap for what you get.
Try out PHPixie =)
The campaign website involves a promotion campaign for a product where users can register/login on the website, enter their promo codes and get a prize. The codes are sent to a 3rd party server through an API, which decides if the code is valid and if it's a winner one. So basically I don't need a full blown CMS or a full blown framework neither. These are the features I need to implement: * User registration/login + user dashboard where they can see their entered promo codes (also getting this list from the 3rd party server) * API handling with cURL * Static pages That's about it. 
My words exactly. You should have posted this toplevel. Anyway +1
+1 for silex
I am also just learning PHP. (Actually, I've been trying to learn for 5 years, but never get very far. I'm hoping this one takes.) It really is exciting to write a little script and it actually does what you intended.
This sounds alot like php-fpm running chroot, what's the difference?
Agree. IMO one of the distinguishing features of "decorating something" (or 'using the decorator') is that the something already has concrete, self-contained functionality; the decorator merely enhances / modifies that. In the repo example, WebService has absolutely no functionality of its own; all it does is delegate that out to other objects. A JsonDecorator should take an instance of a WebService and enhancing its output - formatting it as json after getting it from the decorated instance. Here, indeed, WebService is just implementing a strategy for choosing how to format its own output. It shouldn't know that its decorated in the first place.
I haven't use this but it looks interesting http://pecl.php.net/package/APM Monitoring extension for PHP, collects error events and send them to one of the drivers. SQLite and MySQL drivers are storing those in a database. With this extension you'll only need to set the configuration (database, etc) in php.ini and it's done. As a bonus, there is already a web interface scripts in the extension package.
Thanks. I've been harping on about this for a long time, and it's good to see it explained well and clearly. Phil tends to get fed up having to explain the same things over and over, and so creates blog entries like this to point people to. */bookmarked*
And you have no basis for that argument other than the fact that PHP -S doesn't include HTTPS, which is what we're discussing. It's a circular argument that falls down as soon as someone implements it for PHP -S. In other words, it's a great big ole fallacy that's employed because you have no real reason for not including it.
I read some a bit of your code for fun. Looking at your strategy pattern, here are some nifty things you can do with PHP's reflection: https://gist.github.com/Ivoz/5540156
I would honestly just use basic PHP... it has built in cURL, and a login / registration system is trivial...
Oh dear god give it a rest. This is not an argument anyone can win, I pointed out its one of many features "missing" from the built in web server, because there are lots of features "missing" from the built in web server. It's not been included because whoever wrote it didn't include it. Go and ask Moriyoshi Koizumi &lt;moriyoshi.at.php.net&gt; if you really want more concrete answers, or send a pull request, but definitely stop banging on about this to me.
* User registration/login = [Sentry 2.0](http://docs.cartalyst.com/sentry-2) * User dashboard where they can see their entered promo codes (also getting this list from the 3rd party server) = [Guzzle](http://guzzlephp.org/) * API handling = [Guzzle](http://guzzlephp.org/) * Static pages = HTML
I appreciate the review. I've recently pushed updates to both libraries addressing some of the points you've mentioned. I'll have more thorough comments in the next push. Thanks again!
Thanks for linking to the SPL exceptions documentation. I never knew all those existed before. I just wanted to let you know I've addressed all the points you mentioned and have learned a lot from them. Thanks again!
In my defense, the first code I ever wrote was a program to print "Hello World!" In C++. 
[/r/PHPHelp](http://www.reddit.com/r/PHPhelp)
I have started to learn PHP now on and off from CA and one thing that is throwing me is the switches and the loops. I will have to go back and go through those sections. 
Just a couple of suggestions, especially if you're not used to OO style programming. As a preface, some of the main points of OO are to improve code clarity and to separate functional units of your code into modules. - Having only one class per file is a commonly accepted paradigm. This allows you to also name the file after the class within, making it readable, and you know exactly what's in the file - Take the MySQL code out of the classes, and make another class that handles the database logic. A class named 'QueueData' for example. This would allow someone to come along and easily drop in their own database logic. For example, queue implementations like this are sometimes done with Redis instead of a SQL style server. - Related to the last tip, try using [Interfaces](http://php.net/manual/en/language.oop5.interfaces.php). They are a way of guaranteeing that a class has a set specific set of functions. Essentially, you could have an interface named 'QueueDataInterface'. Then, you could have classes such as 'MysqlQueueData' and 'RedisQueueData' that implement this interface. Both of these could be used interchangeably, thanks to interfaces. Hope this helps! Edit: If you'd like to look at some simple examples of what these look like in code, here's an example from one of my repositories, an authorization library I've been working on: - [Interfaces for some Authorization Classes](https://github.com/affinitydev/auth/tree/master/src/Affinity/SimpleAuth/Model) - [Implementations to some of those interfaces](https://github.com/affinitydev/auth/tree/master/src/Affinity/SimpleAuth/Generic) Note the naming conventions, and the use of interfaces. The point is for someone to be able to come in and inject their own "User" class, instead of using my own.
We actually heavily employ Gearman to do our job queuing. It works really well and scales nicely. The modules for PHP are easy to use and you don't have to re-invent the wheel. Just food for thought! :)
I recently started using airbrake for my PHP app. There's another service called DataDog that will connect with Airbrake and graph all the errors on a timeline. It's really handy to be able to see when errors were occurring, and how frequently. Highly recommend this combo!
Most likely is is the fact that you do not have the trailing slash when you define **$uploaddir**, so when you are using it, say the file is "test.jpg", you are in the end attempting to check for existance of, and moving to: /home/user/public_html/transfer/incomingtest.jpg Also, what if I am the third person to upload test.jpg. With your code, there is a (times uploaded -1) out of 1000 chance of overwriting something that exits. 
That's the value of a deposit - it helps weed out those who promise to pay without the capacity to actually do so. I agree with most of the advice above but it surely depends on your own pocket. If you can absorb the loss, then you're better off pushing time into another contract. If you need the cash, you could ask him to pay for the code and any further work upfront though it really sounds like he has funding problems. Also, since he actually has paid you some money, do yourself a favour and deliver something appropriate to that amount. If you are using version control (I hope so) divide the payment by your rate and find a commit that amount of time into your work perhaps. He has a website, don't let him turn it into a public pressure/reputation damaging tool claiming he paid you money and got nothing in return (those sort of things tend to be emotive and leave out details like contract breaches on their side). If that ever does happen, do NOT engage.
Testing doesn't prevent bugs, it detects bugs. It doesn't promote best practices, it enables their application. It's no wonder you misunderstand the value of automated testing when you need to use your own "buzzwords" to talk it down without being practical. Automated tests can be re-run very easily whenever you want. Manual tests cannot. There's no way I'm paying a team of developers to continually hand test code and applications after every change to check what got broken.
Also, just realized the project I have open has a admin that allows multiple attachments, here is a sniplet of the code I use, it allows multiple files, and strips them down to a-z0-9 characters only. It will then increment the number after the base of the filename until it is a free name. Also it will not let a filename start/end with a hypehn, and if there is no "usuable" characters, it will default to a filename base of "file". // ... THIS IS IN A MAIN CFG FILE define('UPLOAD_DIR','/home/user/storage/'); // NOTE: this is for allowing multiple files uplaoded at a time... foreach ($_FILES['attachments']['error'] as $key=&gt;$errno) { if ($errno==UPLOAD_ERR_OK) { if (!preg_match('/^(.*?)(\.[a-z0-9]*)?$/',strtolower($_FILES['attachments']['name'][$key]),$part)) { // for some reason, nothing matched, shouldn't, but just in case... $part = array(1=&gt;$_FILES['attachments']['name'][$key]); } $base = trim(preg_replace('/[^0-9a-z-]+/','-',$part[1]),'-'); $ext = (isset($part[2])) ? $part[2] : ''; if ($base == '') { $base = 'file'; } // set default in case no usable chars $endname = $base.$ext; $i = 1; while (file_exists(UPLOAD_DIR.$endname)) { $endname = $base.'-'.($i++).$ext; } move_uploaded_file($_FILES['attachments']['tmp_name'][$key], UPLOAD_DIR.$endname); // ... OTHER CODE THAT UPDATES DATABASE ... } else { // ... CODE TO HANDLE FAILED UPLOADS } } [EDIT: adjusted a typo from adjusting from original code]
Careful: filter_var($input, FILTER_VALIDATE_URL); This will validate almost all URIs - not just the HTTP/HTTPS ones, e.g. php:, data:, javascript:, etc.
This is awesome thanks, I realized that my "else" statement was trying to move files back into the temporary directory. I changed $uploaddir . $_FILES['image']['tmp_name'] to $uploaddir.$file_name) on line 18 and it seems to be working. I'm going to attempt to use the code you have here to add sequential numbers instead of a random number. Thanks for the help!
Been using mink with selennium and goutte for the application I've been working on. No complaints so far, and it's allowing us to try out sahi pretty painlessly.
no problem, yeah I missed that you were trying to put it back to the tmp file inside the upload dir, for me, it was cut off without scrolling here, so when I found the first issue didn't look so hard for other issues.
While I don't really see the overall usefulness of this, and it seems [there are other existing solutions](http://www.reddit.com/r/PHP/comments/1dxpm5/queuing_functions_to_be_run_later/c9uuogi). I do see some stuff in the code I'd improve upon though, so I'll give you my two cents. * I'm confused: is this supposed to be a _library_, or just an _example_? Because currently it seems very hardcoded, and would require the user to change the core of it - and then update the core again whenever there's an upgrade. * No declared visibility for (what seems to be) public methods - okay, there really only are __construct methods, but you get my point. This might also just be a personal thing. * "_Functions_" can only be declared as methods in the `Queue_Handler` class. What if I want the callback to just be a regular function? Or maybe a facade I made that handles some stuff? I suppose I could add a method to your class which just calls my custom callback, but that just seems stupid. * Add a namespace. Some people dislike namespaces in PHP, but it ensures that the user wont have to double check for (nor worry about) conflicts. A nice unofficial standard is [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md). And please note that I said unofficial, which means it's completely optional. I believe it covers the "one class per file" thing mentioned by /u/SomeCollegeBro as well. * And [as mentioned by](http://www.reddit.com/r/PHP/comments/1dxpm5/queuing_functions_to_be_run_later/c9uumxs) /u/SomeCollegeBro, your library shouldn't really worry about implementation details such as storage. Give the user an interface and have them inject an object that takes care of it - this not only gives the user more freedom, but also gives you less work to do, win/win. ~~Or remove all persistent storage from your library, and ask for callbacks to be injected, leaving how to figure out what callables to use to the user~~. EDIT: I noticed that you actually ask for a new callback for every iteration, so I'm guessing this is meant to run side by side with other scripts, which may add callbacks to be run, correct? Besides from that, I'd likely also change how callbacks are added to the queue. Having a class which is basically just a constructer just seems.. _odd_. Unless you had other stuff going on, as if it was a facade or something, but that isn't the case.
All the other stuff people have mentioned aside the biggest problem you'll have is with locking issues. Currently you have a race condition between a queue read and the queue lock. Multiple workers would eventually duplicate reads and work (which could be really bad news depending on what is in the queue). There is a feature in MySQL called select for update (or something like that) which Zend Framework's queue used to use for its MySQL queue implementation (not sure about ZF2). That might be worth a look. http://dev.mysql.com/doc/refman/5.1/en/innodb-locking-reads.html Otherwise I'd say just use Redis or something that has atomic queue management built in.
So I'm in the process of trying to implement your other script, and am having some issues. For whatever reason, I get a notification that the file has been uploaded, but the filename has been trimmed to just the first letter, with no file extension (so "chart.pdf" becomes "c", "image.jpg" becomes "i") and the files aren't actually being moved into the upload directory. Any idea what could be the cause? Here's how I have it implemented: $uploaddir="/home/korfoo5/public_html/transfer/incoming/"; if (!preg_match('/^(.*?)(\.[a-z0-9]*)?$/',strtolower($_FILES['image']['name'][$key]),$part)) { // for some reason, nothing matched, shouldn't, but just in case... $part = array(1=&gt;$_FILES['image']['name'][$key]); } $base = trim(preg_replace('/[^0-9a-z-]+/','-',$part[1]),'-'); $ext = (isset($part[2])) ? $part[2] : ''; if ($base == '') { $base = 'file'; } // set default in case no usable chars $file_name = $base.$ext; $i = 1; while (file_exists($uploaddir.$file_name)) { $file_name = $base.'_'.($i++).$ext; } move_uploaded_file($_FILES['image']['tmp_name'][$key], $uploaddir.$file_name);
speaking of spam..
If you are not doing multiple file uploads, get rid of everywhere you see **[$key]** , example: $_FILES['image']['name'][$key] $_FILES['image']['name']
Thanks for the advice! I fixed your first two bullet points. The last one I will leave for anyone who might want to use this for their own purposes as I would only need the MySQL implementation.
That did it! Thank you so much.
Good call on the locking, I've fixed that. I personally wouldn't want to use redis because if I'm queuing a bunch of stuff to be run next week I wouldn't want it sitting around in memory. If your queuing needs are very quick Redis would be perfect though. 
So I've taken a look, and I don't see anything in the documentation about queuing functions for later, just for divvying them out to workers. Does Gearman allow me to submit a function to be run next week?
glad to help
Oh that's an interesting use case, off the top of my head the best I can think of is to use a cron to fire up a worker to crunch through the jobs. (Not unlike how you seem to be doing it with your current setup) The jobs will stick around in the queue until a worker picks it up or it expires (this expiration time can be set on the actual gearman job server) All in all, for this use case you probably won't be saving much since you've already written the code. Gearman was more designed to distribute jobs to many workers by tossing them on a queue to pick work off of. We use it internally because a lot of the work that we send to the queue is long running so we want our app to be responsive while things magically happen on the back end all the while distributing the work to scale as we need to. As of this comment our gearman workers have crunched through 35,463,668 jobs in ~53 days or ~669,125 jobs/day :D
This is a very good point! One of the primary reasons we moved away from our MySQL based queue to gearman.
Your approach to settings doesn't seem to be well thought out in general (Caching/innefficient), but: function get_settings_array($field_name = ''){ $arr = $this-&gt;db-&gt;where('id', 1)-&gt;get('settings')-&gt;row_array(); return (empty($field_name)) ? $arr : $arr[$field_name]; } so you would do: $i = $this-&gt;settings_reader-&gt;get_settings_array('name');
row()? Would return an obj. So instead of result or result-array return $query-&gt;row();
yes. return $query-&gt;row_array(); further reading: [http://ellislab.com/codeigniter/user-guide/database/results.html](http://ellislab.com/codeigniter/user-guide/database/results.html)
You can just install it locally and run it pre-commit :)
Pretty cool. Some flaws I've seen: * http://d.pr/i/nKVe This question is not related to PHP * Your sample code uses PHP 5.4 array notation [1,2,3,4] but your evaluating server does not support it, it appears to be 5.3
Make your settings class load them all in the constructor, then have two methods, get_all() and get(). No point running queries each time you want something.
If it's for small one-off things you could run them online with [codepad](http://codepad.org/)
Great catch! Fixed now.
Regex is the wrong thing to use here, dude.
We want to add to the challenge every day. The advanced and expert level stuff especially, with a lot more boss questions that have different ways to attack the problems. Thanks for trying it!
&gt; is_null will return true if a variable **is not defined** or is set to null TIL! Thanks :D Edit: `is_null($doesntExist)` raises a notice, as I'd first assumed.
[no problem!](http://stream1.gifsoup.com/view/204031/the-more-you-know-o.gif)
Next time don't try and defend something you can't defend. Just say "I don't know why", and you'll avoid having someone continually point out that your argument has no merit.
In the case of a db error, $query-&gt;result(); will fatal and produce some potentially ugly results. Good idea to check if query is an object before trying to get the result.
Thanks, I'm accessing using row() now, works. 
You probably want to use PHP's DOM parsing capabilities, rather than just using regular expressions.
You should be doing this before it gets to the markup on the page. Assuming that's truly impossible for some reason, you could safely do it in JavaScript after the page loads. The below code is untested, good luck. From: [how to find and replace using jQuery](http://stackoverflow.com/questions/4455606/how-to-find-text-and-replace-using-jquery) Make sure to include jQuery if you havent already: &lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" &gt;&lt;/script&gt; Then add: &lt;script type="text/javascript" &gt; $('body').html( $('body').html().replace(/word/gi,'&lt;strong&gt;word&lt;/strong&gt;') ); &lt;/script&gt;
So, I've got a quick question. Is the point of the invoker to allow the ability to undo and such? I *thought* I was using the Command Pattern in an application, but I'm not using an invoker. I'm actually using a factory to return the object that I thought was a command object to then execute(). Is it always necessary to use an Invoker?
Row will crash too if you don't do an is_object on $result
i love how it allowed this answer :P //php function concat_three($a, $b, $c){ return "{$a} {$b} {$c}"; } $output = concat_three("Hola", "me", "llama");
How are the "edit this code so that" questions sandboxed?
Wow this is really cool. Good job.
Oof. First boss question fails on an iPad. Can't enter any input for the answer.
The "final boss" questions are largely confusing. Am I being scored on how short or long my code is? How clever? How robust? How few functions calls are used (the decimal rounding one says "bonus points" for not using functions)? How many edits I make? How long it takes? Ultimately, it appears that the answer is: None of the above...all correct answers get 100 points. This seems a bit disappointing. I was also not aware that the code would be publicly viewable, or I may have tried harder to format / come up with something clever or concise. Some more copy about how the "final boss" works would help the experience a lot. **Edit** You should probably prevent people from answering their own submitted questions. I just answered one that I had submitted last night, which means I A) got points for having a question accepted B) got points for answering a question I knew the answer to immediately. :)
I got to level 8 and then when I tried to preview the result to the Boss Question, there was an application error :/ I should have taken a screen shot and posted it here.
i like it :) i'm a huge fan of gamified learning tools (rosetta, khan, codecademy, sporcle, etc.) i really liked your sandbox "boss levels"; they helped break up the streak of multiple choice questions and kept it fun. in regards to giving feedback, maybe provide a little more information about the correct answer if i select a wrong one. it's not a necessity, but i am somewhat accustomed to that practice with similarly gamified education/quiz sites, e.g. khan academy, providing explanations if desired. keep up the great work!
Getting down-voted for asking a question is not cool. 
 Fatal error: Allowed memory size of 12582912 bytes exhausted (tried to allocate 7680 bytes) in /home/magento/app/code/core/Mage/Sarcasm.php on line 56
Oddly, most the pages load pretty quickly, but the first boss question errors out for me ("Application Error") after about 30 seconds.
Awesome, thank you!
I think many of use have had a go at developing a queue, I like to search github for them on occasion, thanks for sharing. I wrote my own called [LaterJob](https://github.com/icomefromthenet/LaterJob) I was concered with delivering metrics for example to prove that all email are sent within X hours of being queued. I could not found any php and mysql queue libs so had a go of writting my own. 
 &gt; The date string "g:i a, F j" will print a date in the form: I'm not sure that's a good question, surely no-one actually tries to memorise the 37 different format operators for date()? If it's just testing how quickly you can look up the answers, then that's okay I guess... **Edit 1** My profile page looks a bit odd too: &gt; 34 Questions Correct | 36 Longest Streak **Edit 2** &gt; True or false: &gt; empty(0) === empty("") Technically that's only valid code for PHP 5.5 Beta :) **Edit 3** You can vote for your own creative responses by calling http://www.metabright.com/tasks/x/vote?sa_id=x manually too. **Edit 4** Muhahaha, Level 11
Why not just run it on a virtual machine? I do this even on a laptop at one of the places I work, where I'm in a windows environment. I simply set up a VM and use it for anything windows can't do or I can't do with what is available. A simple setup with php and postgres and you'll likely have a winner. You could even have postgres running in another instance or on the host machine etc. lots of options.
I like so much the vim-style column selection mode. Yo can switch between line selection mode to column selection mode by just pressing Alt+Shift+Insert. It's very usefull for me ! :D
Live Templates (Zen Coding). In a php file, type forek and then press TAB. For HTML, they implemented emmet: http://docs.emmet.io/ It's damn amazing, and you can create your own live templates. Another very nice feature is the method generation for getters and setters, as well as for implement / override methods from interfaces or abstract classes. Just press alt+insert in a php file and check it out. The refactoring features are very awesome too ;)
You know MySQL can runs on Windows too, right?
OK, you made it sound like you were starting a new project on a Windows stack. I haven't experienced any issues using MSSQL with the PDO drivers.
Was anything broken in the process? (Perhaps just some comments?)
Xdebug integration.
I really want to like PHP Storm but I can't get used to the highlighting so keep going back to PHP Designer and it always feels so nice. Then I wind up going back to PHP Storm when I want a feature PHP Designer doesn't have. It's a vicious circle.
You can also do column selections using the middle mouse button :)
I've actually been trying PHPStorm this week. My problem is that I work on a remote dev server over SSH. Syncing in PHPStorm seems real iffy. Sad, really because the vim plugin seemed to really help me make the transition otherwise.
Or hold ctrl+alt and then select, that's what I'm used to from other programs. 
I have not tried PHP Designer, but I have spent a couple of years coding with Aptana. I had meticulously set up the syntax highlighting the way I liked it (no small feat in Aptana), and this is what mostly bugged me while transitioning to PhpStorm. However I was blown away by the speed (both Aptana and Netbeans lag far behind) and decided to force myself to get used to it. It took about a week to stop being bothered, and one more week to fall in love. I never looked back. Since then I am always being happily surprised by the abilities of PhpStorm on an almost daily basis.
Press TAB will auto complete the top item in a list when you are typing a variable name for example.
CTRL + N - Jump to a class CTRL + SHIFT + N - Jump to a file Use those _all_ the time.
Yeah you're right. everybody wants different things for url validation. You say verification for whether the user uses http:// or https:// or not, other people say length, MX and other stuff, and other people want to verify all the url types in the world and so on.. If somebody wants personal URL validator for himself, custom rules are for him! or If he wants to publish its own URL validator, he can just fork the code on GitHub and change url function in the code or extend the Validator Class publish his validator. That's why it is called Simple Validator, customization which is the most important part for a validator is very simple and strong! 
If I understand correctly (can't check it in Storm now), it's one of my favorite features in Sublime, didn't know Storm has it too.. For example, you have an array of domains $domains = [ 'abc.com', 'def.com', 'ghi.com', 'etc.com' ]; and you want to add 'test.' to each of them - you select a column and only write 'test.' once instead of copy-pasting it several times. Profit! (=
Composer integration. Setup path to composer.phar in settings and then right click on project -&gt; Composer -&gt; Init / Add package.
A note on those... If your class and file names are camel-cased, you can write abbreviations to navigate to it. You can also suffix a line number using : as a separator. Lets say you have an unhandled exception thrown on line 84 of *Acme\ExampleBundle\Form\ShortContactFormType* and you need to fix that, you can CTRL-N and write **"SCFT:84“** and hit enter.
If anybody knows the hack for this it would be appreciated: I'm working with a library that has classes which make use of __get() and __set() for particular properties. Is there a way I can (perhaps through specially-formatted comments) give PHPStorm some hints about what those properties are so that I can use the code hints and tab-completion? 
Try using [@method] (http://manual.phpdoc.org/HTMLSmartyConverter/PHP/phpDocumentor/tutorial_tags.method.pkg.html) for \_\_call and [@property](http://manual.phpdoc.org/HTMLSmartyConverter/PHP/phpDocumentor/tutorial_tags.property.pkg.html) for \_\_get()/\_\_set().
If you use Magento, grab the Magicento plugin. It adds things like auto-completion of XML (layouts, configs, everything) and automatic class names.
I've found using the deployment tools very helpful for working locally and deploying to a remote server. I have my dev server set for auto-update so I can test changes immediately. For prod, I manually deploy using the same tool after making my commits.
Mostly because of the sort of issues highlighted [here](http://hackingdistributed.com/2013/01/29/mongo-ft/).
On the Mac it's Shift-Opt-select
You can ctrl+click without that
Double clicking a tab expands the file editors to consume all available screen space. You can middle click a tab to clove it (all UI title bar/ tabs do this!) You can "rip" editor tabs and other UI components off the main interface and have them as floating windows. 
i don't think, this will be a problem. just keep his database. (never touch a running system) also, pdo drivers work good.
&gt;Settings &gt; IDE Settings &gt; Editor &gt; Editor Tabs Check out the tab closing policy. It automatically closes tabs when you cross a set limit of open tabs. &gt; Settings &gt; IDE Settings &gt; Editor &gt; Colors &amp; Fonts I love the Darcula color scheme. &gt;CTRL+TAB to switch between open files (handy when you are switching between two files a lot)
Thank you so much. The links were an especially helpful touch. Have some gold.
I would also like to know if there are any good arguments for switching from SublimeText 2 (or 3)... It looks good, but my ST works great and has a lot of the features it looks like PHPStorm is advertising.
What's iffy about it? Works exactly the same way it does in NetBeans. I have it set up to upload my files via SSH on save. Can even set it up to upload when the application loses focus. Super simple. Also, make sure "upload external changes" is enabled. Which will actively monitor all files in the project for changes and upload anything that has changed, immediately.
Yep, which is why I was initially excited about the "Final Boss" questions...I thought they had built some mechanism to grade the code examples on a rubric of sorts. I think the section just needs some more description about how it works ("correctness only", "publicly viewable later") and expectations will be set appropriately.
&gt; Edit 2 Technically that's only valid code for PHP 5.5. Beta :) It's valid back to 5.2.11: http://techtalk.virendrachandak.com/php-isset-vs-empty-vs-is_null/ , unless I'm missing something obvious here :) **Edit** Oh, I see. You have to set the variable first, and then reference the variable in empty(). Otherwise the pre-5.5 parser will explode.
I use Ctrl + B instead
I've been having a silly issue with code validation. It occurs for me in both OSX and Win7 so it must affect some of you too. Sometimes, if I edit an existing line of code, I may be typing in the middle of the line, and causing errors while making that edit. PHPStorm shows there is an error like it should, but when I finish making my edit to the line, and there is no longer an error, PHPStorm doesn't clear the error highlights and red marks in the right column. It continues to show this until I completely close out of the project and open it back up. Is there a way that I can force a file to be completely revalidated without closing out of the entire project?
Yeah, it was one of those weird functions that wasn't really a function. 
I had been looking at paying for the premium content; passed it past my boss who got the company to pay for it. They have some really good resources on there but only if your willing to dedicate the time needed to properly learn.
Eagerly looking forward to reading more tips/hacks. I've only been using PHPStorm for about a month now, but am already in love. In addition to what others have already mentioned: Ctrl-Shift-X: open command line, I use it mostly for Composer related stuff since the built in Composer support is still a bit wonky Ctrl-K: Commit to Git/SVN Alt-Enter: on most squiggly lines will bring up a menu of potential fixes (e.g. "import class" or "shorten fully qualified name" or "fix docblock", etc) Integration with PHP Code Sniffer + PHP Mess Detector + PHPUnit + XDebug is magical. My code has never before been so clean and nicely formatted. 
PhpStorm has this exact feature. I could never leave Coda (when I used OS X to do my work) becuase I loved this feature so much. In PhpStorm you just right click anywhere in your code and turn on "Column Selection Mode" or press Alt+Shift+Insert and you can drag a vertical line and when you type, it types on all those lines. 
As I said in a comment below, Column Selection Mode. You just right click anywhere in your code and turn on "Column Selection Mode" or press Alt+Shift+Insert and you can drag a vertical line and when you type, it types on all those lines. Saves a TON of time when you have to edit a ton of variables/sql/anything that is similar and you just have to make simple changes. 
Men have been calling other men 'bitch' as a term of disrespect since, like, the 90's. Don't be so easily offended. 
I keep trying to like PHP Storm (I normally use Eclipse PDT) but I keep running into this problem. If anyone has any suggestions I'd appreciate it. I use various templates in files, and have the templates directory configured as a variable. Such as... include $templatesDir . 'someTemplate.php'; Eclipse resolves the directory, and offers a dropdown of directories/files based on what I'm typing. Unfortunately, PHP Storm doesn't recognize it and gives me an error, and I really want to avoid checking and manually typing the file names and have PHP Storm thinking that every include is an error because it doesn't understand the $templatesDir variable. Does anyone have any idea of how to get around this? 
It's so easy to setup Xdebug. I love it.
If PhpStorm doesn't recognize the class of a variable, you can manually set it with comments. /** @var $variableName Some_Class_Here */
Oh that's beautiful.
btw, I updated the readme you can take a look at the custom validators.
Well yeah, now I know that it does :)
I find Coda to be more in league with Espresso, TextWrangler etc. It's more of a frontend dev tool PHPStorm is more comparable with Zend Studio, Eclipse/Aptana, Netbeans and so on. It's a fully integrated dev enviroment which can boost productivity and allows integration with a number of tools, workflows and processes: bug/issue management, composer, GIT, SVN, Jenkins, deployment and more. Not to mention full integration with your actual code base so that it autocompletes methods, classes and variables, and additionally lets you navigate your code a lot more easily too
I discovered this last week and it made my life so much easier. Having autocompletes, being able to access block controllers from a view file and having a module creator really do help me develop a lot faster
I must investigate!
I've used both Coda and PHPStorm alongside many other editors and IDEs to find a perfect coding tool for PHP. The results from this search for me is using PHPStorm when I'm working on any major application and SublimeText for an amazing text editor for quick changes/working on config files/messing with my deploy scripts. Coda is nice, but it is not PHP focused like PHPStorm. There are just so many nice features that Storm brings to the table over Coda. 
[Word Selection](http://www.jetbrains.com/phpstorm/webhelp/selecting-text-in-the-editor.html#d230435e441). Once you get used to it, you'll miss it in every other app. &gt; **To extend selection from the word at the caret to the piece of code the caret is contained in, use the following shortcuts** &gt; Press Ctrl+W to select the word where the caret is currently located. &gt; Press Ctrl+W successively to extend selection to the next containing node (for example, an expression, a paired tag, an entire conditional block, a method body, a class, a group of vararg arguments, etc.) &gt; *Note* &gt; While extending selection, keep in mind the following: &gt; Pressing Ctrl+W successively in plain text or comments extends the selection first to the current sentence, then to the current paragraph. &gt; Press Ctrl+Shift+W to shrink selection in the reverse order (from the outermost container to the word where the caret currently resides).
It does a fairly decent job of reformatting things - it can get a little overzealous in my opinion: It will modify this code: if ($foo) { } else { if ($bar) { } } To this: if ($foo) { } elseif ($bar) { } } While it is perfectly safe to fix this code I don't like when the editor modifies code like this - I prefer that it only moves comments, braces, keywords and that sort of stuff.
PHPStorm is highly customizable. I recommend spending some time in the Settings tweaking the settings to be just how you like them. You'll simultaneously learn about a bunch of the features. Middle-clicking function calls, classes and variables goes to the declaration. Middle-click dragging selects in columns, play around with it. Ctrl+P while in the middle of a function call will remind you of the arguments. Ctrl+downarrow (or up) while in autocompletion will break you free of it. PHPStorm error checking and autocompletion is fantastic. Make the most of it by always letting PHPStorm know what class your objects are (with @var).
I have this issue too.
You can assume a Command something like invokable. They should be invoked by somebody else. The main purpose of Invoker keeping track of the executed commands by encapsulating them. The intent of Command Pattern - encapsulate a request in an object - allows the parameterization of clients with different requests - allows saving the requests in a queue So Invoker is always needed.
No, nothing broke. I was pleasantly surprised.
Thanks for the feedback. There actually is a decay function applied to those answers in the stream, but you're right, there can be an echo chamber effect where the same responses keep getting upvoted because they are most visible. With that said, we do try to give visibility to newly submitted answers as well. There is a filter button at the top of the stream that allows you to sort by date. Additionally the default view on the homepage (when you're signed in) is to sort responses by date.
I found it last week too. Makes the XML files you have to create so much nicer.
Hey, sorry you had troubles on your tablet. We are definitely not mobile optimized at the moment. (The thinking here was that since we are primarily a service for developers, and since most developing occurs on a desktop/laptop, we'll go "Web First".) We do hope that in the next 3-6 months, we'll have the capacity to get a really cool mobile app out the door.
Glad you like it! Concerning your point about feedback on incorrect answers, we have a feature rolling out in ~1 week where a personalized "study guide" is generated for you based on the questions you missed. Since we don't want to break up the rhythm of the Challenge, the study guide will be emailed to you after you're done. This way you'll be able to work through it at your own pace and easily refer back to it if you feel compelled to.
Small grievance: IMO, by default, they should map Control-W to the Window-&gt;Editor Tabs-&gt;Close function, and not the Word Selection function (which is indeed pretty freaking awesome). For a lot of the software I use, especially in my work as a web dev, I'm used to Ctrl-W being the command to close shit. For example: Firefox, Chrome, IE, Safari, Fireworks, Notepad++, Thunderbird, Microsoft Word &amp; Excel... just to name a few, they all use Ctrl-W to close windows/tabs. Small complaint though, all that stuff is easily personalized under Settings-&gt;Keymap. 
Reformat code... *shudders*
Check this out https://github.com/jeremeamia/php-design-patterns &gt; Design patterns implemented using traits and interfaces with PHP 5.4. He's the developer of the Amazon AWS PHP SDK so you're in good hands :) 
You can set up a connection to an SQL database (anything with a JDBC driver). Check out View -&gt; Tool Windows -&gt; Database if it's already visible on the right side of the window. In recent versions, you can even tunnel the connection over SSH if desired. What's nifty about this is that it's also able to detect strings that look like SQL queries (as long as you're not building them dynamically). If you have a connection set up then it'll give you autocomplete and check options for your personal database layout.
Good deal. Thanks for responding.
This is an awesome tip that also works with both Eclipse and NetBeans based IDEs (and likely others with any kind of code completion).
I have tried that, but just by pulling the original offending line. The error just continues past that to the next line. Next time, I'll try it with the entire contents of the file. I was hoping there was some type of refresh button.
Does PHPStorm have a command to automatically align variable assignments? For instance, in Sublime Text 2, I select a few lines with variable assignments, hit Control-Alt-A and everything gets tidied up. For example: $var = "some value"; $another_var = "another value"; $third_var = "third value"; Becomes: $var = "some value"; $another_var = "another value"; $third_var = "third value";
It's PHPDoc style commenting, which is worth knowing regardless of IDE. 
PHP runs great on a Windows server with IIS and Fast CGI (we use this exclusively where I work; company is a large and publically traded);! Small tip if you are going to be using MS SQL then take the time to go get the windows php drivers, they are excellent and very well documented. If you have any questions or need help configuring up some data connection classes feel free to PM me and I can help you out! **Microsoft PHP Drivers MSDN Article: http://msdn.microsoft.com/en-us/library/hh335190(v=sql.10).aspx** **Download Link for Microsoft Drivers: http://www.microsoft.com/en-us/download/details.aspx?id=20098**
By remote, I mean not my desktop/laptop. I work in a team and a centralized dev server is part of our current process. Edit: Maybe that doesn't make sense. Our svn checkouts are on that centralized dev server along with Apache virtuals that point to each of our checkouts. Working with vim I can see a change immediately in my browser. This process is being changed (git vs svn, vagrant virtual machines instead of centralized web server) but what I have to work with for now.
What is this? A specific sf2 plugin or the CLI tool support + framework support plugins that come bundled?
It doesn't seem to upload them for me, although I need to go check on the settings from what it sounds like.
Well, there's a sync button and a sync keyboard shortcut that seem to do nothing for me. I would prefer not to right-click files or directories to upload/sync with my dev server. I'm used to working in vim on the dev server (my own repo checkout of course) and seeing the changes instantly in my browser (apache running on that remote with my checkout being it's own virtual). 
holy mother of god
Under Wrapping and Braces -&gt; if() statement: Uncheck "Special 'else if' treatment" if you want to disable this behavior. I believe it's off by default.
Observed the exact same problem on a co worker installation. We've 5 installations and this one had this problem. After fiddling around 2 minutes I decided to a) upgrade to the latest and b) purge all existing settings and start from scratch. That fixed it. 
I think you can tell it to invalidate the caches (see: File menu), but that may take a bit depending on the size of your project.
The textarea for the boss question wasn't nearly wide enough for me and not adjustable. Big pain.
I don't know if I would say it's "better" but you might be able to use something like the [Visitor pattern](http://en.wikipedia.org/wiki/Visitor_pattern) to implement your algorithm. This also lets you easily define points for diagnostic logging or the like, showing the changes in the underlying value every step without a bunch of log('something') calls in the middle of the actual operations. But, it would likely massively complicate your design which is probably not all that necessary. I would say if your code is already clear and fairly concise without *too* much repetition, call it good.
What you should have (imho) is a local development server. I run RedHat with PHPStorm inside it, along with apache/nginx, mysql, etc. I write code there, test it, make sure it works the best I can, then commit it to git. For git, I have a personal branch that I frequently commit to, and our team has a development branch that we commit working code to. Ideally, nothing broken is ever pushed to the development branch. Deploying code to our dev server is essentially pulling the git branch there. All of the real testing happens on the dev server. What advantage to you guys get from having multiple branches setup for your dev server?
I would argue that is broken functionality. It went beyond formatting and actually changed logic.
So? Dude asked for tips with PHPStorm.
Is it a scope thing where it's getting confused by $templatesDir not being defined in-file?
The number one thing that keeps me in SublimeText as my main editor is the [multicaret feature](http://vimeo.com/45368479). It seems very simple, but it's actually extremely powerful.
So your solution to not using an IDE is to turn your editor into an IDE. Got it. I use SublimeText as my main editor, but it's integration with stuff is *terrible* compared to any basic out-of-the-box IDE out there. Want to cause your PC to run like shit? Enable PHP linting and Git integration and then frequently modify a file. ST will launch multiple Git and PHP processes to try and validate your changes. They don't always close. And the integration with xdebug? HAH. Technically, but not practically. ST is a very good lightweight, programmer oriented editor. It does not hold a candle to PHPStorm and many other IDEs when it comes to project management and tool integration.
fixed an issue... i used attribute_exists instead of property exists... happens, when you blindly search and replace stuff...
Whilst not really a tip, the [Solarized](http://ethanschoonover.com/solarized) colour scheme is a available for [PhpStorm](https://github.com/cweagans/phpstorm-solarized). Hot!
I was under the impression that PHPStorm had this same functionality. 
Okay, that's what I'm seeing in your code there. Not the biggest php person, but it looks like under your invoker that $commands is an array... is this the case? Been a while since working with Php, I thought Arrays needed brackets of some sort after, so that kinda confused me at first. Another question regarding this... What I'm calling command pattern I'm using in the C# MVC framework. Could a controller be considered an invoker? Since it's a website it's stateless, how would I undo something in this environment? Looking at my code and yours, it really seems that my controller is the invoker. Not sure if you're familiar with C#, but here's the code I'm talking about. [HttpPost] public ActionResult Keyupdate(int id, FormCollection form) { IUser user = new UserModels(); if (user.Role == "Delta" || user.Role == "Admin") { IWWAFactory Factory = new UpdateFactory(); WWACommandpattern Command = Factory.CommandFactory(id, form); Command.Execute(); } return Redirect(Request.UrlReferrer.ToString()); } EDIT: Don't mean to bug you so much, I just still feel new at this and I'm trying to do things the *right* way instead of just whichever way works (which is a bad habit I picked up from php at first actually). EDIT2: IWWAFactory is just an interface for my factory objects, WWACommandpattern is an abstract class for my command objects. EDIT3: ha, sorry for all the edits. If controllers can't be considered invokers, it looks like I could just create an invoker, start using it, then I have a good command pattern?
I use constants in my project for this, and it still can't figure shit out...
I wrote a a tutorial on how to use PHPStorm with WordPress here: http://www.trotch.com/blog/wordpress-and-phpstorm-howto/ The main issue for me, as a plugin dev, was finding a way to "activate the kitchen sink" features of PHPStorm and keeping revision control of each plugin separate; so I could add and remove components as needed. Maybe this helps?
Yup, I changed mine to ctrl + middle click, because I kept hitting it when trying to copy/paste things.
There are a multitude of issues here, one of which being the use of $query to mean 2 different things, but the simple answer to your question is that you don't actually seem to have connected to the database.
 $query .= "keywords LIKE '%each' "; won't work... You would have to do something like $query .= "keywords LIKE '%" . $each ."'"; On a related note, **[mysql_*](http://php.net/manual/en/function.mysql-query.php)** functions are deprecated as of PHP 5.5.0. You should be using prepared statements instead (PDO or at least MySQLi). I'd run a `print_r($query)` after your `foreach()` to make sure your query is what you think it is. **Examples** $terms = array('some','thing','array'); $query = "SELECT * FROM search WHERE "; $i =0; foreach ($terms as $each) { $i++; if ($i == 1) $query .= "keywords LIKE '%each' "; else $query .= "OR keywords LIKE '%each%'"; } print_r($query); // results in SELECT * FROM search WHERE keywords LIKE '%each' OR keywords LIKE '%each%'OR keywords LIKE '%each%' $terms = array('some','thing','array'); $query = "SELECT * FROM search WHERE "; $i =0; foreach ($terms as $each) { $i++; if ($i == 1) $query .= "keywords LIKE '%" . $each ."'"; else $query .= " OR keywords LIKE '%" . $each . "%'"; } print_r($query); //results in SELECT * FROM search WHERE keywords LIKE '%some'OR keywords LIKE '%thing%'OR keywords LIKE '%array%'
i wrote a code to let me know if its connected &lt;?php $db_host = "host"; $db_username = "user"; $db_pass = "pass"; $db_name = "db"; @mysql_connect ("$db_host", "$db_username", "$db_pass") or die ("Could not connect to MYSQL"); @mysql_select_db ("$db_name") or die ("No database"); echo "Connected"; ?&gt; and it always shows its connected
Who said it was the last call? Don't make stuff up!
It could be. It is defined in a separate config file. I think it works in Eclipse by configuring the include path but that doesn't seem to help me in PHP Storm. I love the repository integration, the Jquery integration and the debugger, but this is pretty much the only thing that stops me from using it full time. The other useful aspect of this is that Eclipse will even open the file you're including with Ctrl+Click which saves a ton of time looking through directories. I also tried a constant, but then the whole point of it being a variable was the the include path is going to be different depending on which server it's on, so using it as a variable means I only need one config file.
It only changed logic if you were to later add an additional if statement to the else. Though I think a switch statement is preferred instead of multiple if/else.
Are you limited to only use php for this task? I would really go with some functional language like, say, scala.
Cool stuff. One comment is that the boss questions doesn't accept {$var} style formatting, which I sometimes instinctively use for readability in templates. For example, this: return "$a $b $c"; Is the same as this: return "{$a} {$b} {$c}"; But the answer was not accepted. 
Interesting news. I was speculating this would be the case. 
someone is a little defensive...
Agree 100%... A great var name would have been `$result` :P
In the example no logic was changed, but the idea that it is evaluating code and attempting to 'clean it' is scary when you are reformatting millions of lines of code. It's actually a feature because as /u/clutterskull pointed out there is an option to enable/disable it.
I'm not limited to php, it's just what the rest of that code base is using. Having it already done (ugly as it may be ATM) also gives me some freedom to explore other solutions. Not having too much familiarity with functional languages, are they relatively easy to interface with php (it'd need to be called from php)?
I tried Solarized in Sublime and found the gray to be hard to read with the Dark and I don't like the light version. I've come to love Darcula, for both editors and the entire IDE.
I have a feeling this has to do with the version of PHP we're running on the sandboxes. I'll check it out. We may be due for an upgrade =)
Nice catch on the voting for yourself ;) That certainly jumped up in the queue.
1. Read the hint box when starting PHP-Storm each time, there are tons of little golden nuggets to find. 2. If you do front-end development, install yourself the CSS-X-Fire addon and add the plugin in your Firefox with Firebug. From there on out every style you change in Firebug can be taken to your CSS/LESS files with a single click. 3. Also install the addon "key promoter". It will show you the keyboard shortcut everytime you do something with the mouse. Also, if you do the same thing several times during your session it will ask you if you want to add a keyboard shortcut to that function. 4. If you do HTML/CSS learn to use emmet. Type "table&gt;tr*3&gt;td*5&gt;a[href="#"]" (without the quotes) into a html file and then hit tab... type "w30" in a css file and then hit tab. Speeds up your development tenfold.
You can get around this by setting your include paths and telling PhpStorm about it. in your case: set_include_path(get_include_path() . PATH_SEPARATOR . $templatesDir); include('someTemplate.php'); Then go to Preferences-&gt;PHP and set your include path(s) for the project. After that, PhpStorm will see the file and wont show errors, then you can get all command-clicky on it :)
We execute the code on dummy servers that have no other use other than to run the code. Looking for a more secure and extensible solution, but for now its been working fine.
Do to technical difficulties i have lost the ability to read. 
Forgot where that useful command was again? Ctrl+Shift+A. Enter any keyword. I'll be here all day.
There are many ways to do something in software development as you know, but there are some rules while doing them. The pattern you're applying should be loosely coupled in your application, so you can use it in another application too. If you're new at this stuff you should take a look at **open/close principle** which is the general concept for design patterns. In your case, I think you should create the Invoker as a **model**, because it is part of your **business logic**. You can define an **ArrayList&lt;AbstractCommand&gt;** property in the invoker class and push the **ConcreteCommand**s in it, and define **undo**, **execute** methods for the Invoker. If you consider a controller as an Invoker, what'll you do when you need it in the another controller? edit: **Stack** class which is part of System.Collections would be better than **ArrayList**. All you need to do is **push** while **execute()**ing a command and **pop** while **unexecute()**ing
There are MULTIPLE issues with this code: - you are missing a dollar sign before every 'each' - why don't you do a count() before jumping into the foreach() to see if the number of elements is &lt;= 1? - there is no validation of user input and no checking of data types e.g. is_array() etc - this code is extremely insecure (well it would be, if point one were fixed...) 
Well....that works. Thanks :D Edit: Seems to require Ctrl+Space to bring up the options, but I can certainly live with that.
Anything that can replace that stupid default SPL autoloader with its wrong-case-sensitive naming requirement is welcome in my book.
Can you explain why you dislike it? If it is simply because you don't understand them or don't want to learn them, then yes it is bad. If you have a good reason why you don't want to use them, then no it's not bad. It also depends on what you are writing. Some things are very appropriate to use classes while others make perfect sense in a traditional scripted approach.
If the only reason you don't like them is because you find them confusing, that is not a good reason. You should practice or look at some better code.
Adaptor pattern. Write an object or method that converts your business objects into a SoapClient-compatible data arrays.
Well, this is a 6-year legacy environment and we're moving away from it pretty soon. I believe the original idea was to keep everyone's server config the same. We'll be using vagrant to do that going forward.
That's a good read. Thanks!
Oh my god key promoter is something I desperately need. Thank you so much.
Fair enough. Creating another model is what I meant by creating an invoker. Back to my concern about being stateless though... I'm having a hard time conceptualizing how this would work. I just don't see how an undo would work; once the action is complete and the new page rendered to the user isn't my original object gone? Is it completely necessary to have an undo method even? My "command" objects are updating a sql server database. My idea behind this was to pass a parameter to the factory to return the correct command object. It's healthcare related, so for instance if I post a form to change doctor info I get the UpdateDrInfo() object returned. The execute function basically just submits changes to the database from the object that is derived from the concrete class. Once the command is executed the user is just returned to the page they were on. Am I using the correct pattern here? I just don't see how an undo would fit in here...
It enables ctrl+click for twig templates and factory pattern ( get('....') ) and lots of other useful things. http://plugins.jetbrains.com/plugin/?phpStorm&amp;pluginId=7219
Of course you can. Thats not the point.
One problem I have is that I can't seem to get PHPStorm to look as good as Sublimetext. The font rendering is terrible on Ubuntu.
About damn time. Google always shits on PHP for no good reason.
Ah, no without any background I wouldn't go with other language of course. What about interfacing - it could be done as a web service (soap for example).
Load up the generated XML into DOM then add the attribute to the element. http://www.php.net/manual/en/domdocument.createattributens.php 
I've used redmine but I have to say it sucks. You have to use very specific versions of Ruby and gems and can't use the latest version. It was annoying to set up but I guess it wasn't that bad when it was stable. We moved away from this and I wrote my own issue tracking app in Drupal.
I use CakePHP all the time. I have built many REST web services using CakePHP. I have never had a problem. This includes big projects. I have used both CakePHP 1.x and CakePHP 2.x.
This is an option, but is extremely hacky. I may end up resorting to it though.
Google is about massive scale to the point where they reinvent technology simply to make it scale slightly better. PHP has a lot of good qualities and a lot of poor qualities. What Google cares the most about tends to be what PHP performs the worst in. I think this has caused them to underestimate the importance of adding PHP to something external like App Engine.
Looks like others have corrected your query issues. Regardless, you should look into using [PDO](http://www.php.net/manual/en/ref.pdo-mysql.php) as the MySQL extension is deprecated now and its usage is greatly discouraged.
People constantly say PHP doesn't scale. But then Facebook and Wikipedia prove them wrong time and time again. No one is telling them to switch search to PHP.
That's why most of the patterns can not be applied on web development effectively because you lost everything you have when the request is done. But you can store your invoker object in the **memory**, and you can access it in the new request. Or somehow you can store your commands in the database, and then retrieve and push them into the Invoker when a new request comes to you.
Facebook isn't running only on PHP, some of it is in C++.
could you give me at least some feedback instead of down/upvoting this?
Several errors in it though. For example the Singleton doesn't even have static member for getInstance().
Just a note, using @ on a function to prevent any reporting of issues is very bad practice. Kinda like using duct tape to patch a hole in the bottom of your boat
Nice class! You should consider adding unit tests, and composer. 
You use very poor examples. On Quora, someone asked why Facebook hasn't completely abandoned PHP. A Facebook engineer who has been there for a LONG time answered, and the summary is basically that it's a bad idea to switch languages quickly, but that they're avoiding writing anything new in PHP, and have coralled the worst parts: http://www.quora.com/Facebook-Engineering/Why-hasn-t-Facebook-migrated-away-from-PHP Relevant quotes: &gt; Facebook's engineers have managed to work around many of its flaws through a combination of patches at all levels of the stack and excellent internal discipline via code convention and style &gt; The preferred strategy is to write new components in a de-coupled manner using a better language of choice (C++, python, Erlang, Java, etc); &gt; it can be totally avoided in subcomponents where the language is grossly-unsuitable. As for Wikipedia, it scales 100% horizontally with 250 servers as of this writing: https://blogs.oracle.com/WebScale/entry/scaling_wikipedia_with_lamp_7 . Scaling horizontally is something that PHP is moderately good at, but is also the simplest and most limited method of scaling. Google scales in a substantially different way with their reliance upon Map-Reduce. PHP is mediocre at best when it comes to threads, interprocess communication, and non-blocking IO, all things VERY beneficial to large scale scaling. I have also personally put in a bug report complaining about the threading issue. The response was that PHP is *only* for websites. Websites don't need threads, so threads will not be in PHP. If you have to do *any* sort of backend process, PHP officially wants you to use something else.
If you have a PHP site that isn't scaling, then its most likely not PHP's fault, but the fault of whatever framework has been chosen, or just how the site has been architected. PHP is easy to learn for non-software engineering types, which is why there's so much shitty code floating around.
For the majority of sites, you're right. You won't hit PHP's inherent limits. My argument is that Google has gone far past those limits, and thus forgets about PHP in their day to day. That's all that I was arguing.
thank you! unit tests (i hate writing tests) and composer. will do!
Where are you seeing a difference? Both of those add up to exactly 199541748 1K blocks.
Forgive my ignorance, but what is a 1K block?
i don't share that opinion. i got inspired a bit by the [CComponent class](http://www.yiiframework.com/doc/api/1.1/CComponent) of the Yii Framework and i really like access control, but i wanted it in a much smaller scale. so that's why i made this. i also never meant to "extend everything from a single class". inheritance doesn't stop after one class "layer".
`man df`
disk_free_space () returns the number of bytes (b) that are free on a filesystem. Your df setup is showing the available space in kilobytes (kb). To convert b to kb, you would divide by 1024 (since there are 1024b in 1kb): 204330749952/1024 = 199541748
1) Ctrl-Shift-V to access to clipboard ring. 2) Local History of a file can be VERY useful if you break something between VC commits. 3) Alt-Insert brings up the generate menu (to generate getters/setters, and PHPDoc). Setting all of your PHPDoc with proper types will give you much better code insight and warnings about what methods expect. 4) Definitely turn on code inspections on code commit, this will help you find a ton of subtle bugs especially if you keep your PHPDoc up to date. 5) The Right Click Refactor menu (and learning the Extract Method/Extract Variable/Refactor Rename shortcuts) is amazing in its power. 6) Ctrl-A to find the keyboard shortcuts of the hundreds of PHPStorm features. 7) Ctrl-Shift-F Find in files is very powerful and usually very fast (everything gets indexed by PHPStorm). 8) The Regex tester plugin can save a bunch of time (though there are better stand alone tools). 9) Test Restful Web Service is very powerful, though I wish you could use it to debug your own REST services without having to manually setup the Xdebug/ZendDebugger variables. 10) The built in PHPUnit runner (though I wish you could configure the VCS commit to force a run of PHPUnit before allowing a commit). 11) Speaking of which the VCS commit window which allows for things like auto-format/optimize imports/seach for TODO's/run inspections. 12) Live Edit is pretty neat, but more useful if you are developing straight HTML rather than dynamic PHP. 13) The Darcula theme! There are tons more, but a lot of them have already been mentioned...
Can PHP be optimized or refactored so that it becomes good at those things?
I use SSHFS to help make my life easier. I am in a similar situation as you. This makes the whole thing seamless. http://en.wikipedia.org/wiki/SSHFS
Thanks, I figured I'd need to probably work with the database to make this work correctly. Thanks a ton for all the help. I always figured Command pattern meant that all the objects share a method to execute(). I've been learning everything from whatever books(design patterns I've been using Head First Design Patterns) I can find and sometimes certain aspects are lost on me. 
Having worked with benchmarking massively high-traffic websites, I can assure you raw PHP outperforms raw Python for most web application development. Python might scale better because it's easier to rewrite portions of it in C, but if we're rewriting things in C, then we might as well write a PHP extension.
A more fitting question would be: Is it sensible to do that if alternatives are available.
&gt; a Facebook engineer Who is conveniently now the CEO of reddit! 
I didn't realize it was the same guy. That's pretty awesome.
It would be very difficult. A LOT of PHPs internals are not thread safe because they never needed to be. Making something thread safe after the fact is ... tricky. In the end PHP is good at what it's good at and not good at what it's not good at. It probably doesn't register on Googles radar because it's just not good at what they do.
I should have simply said this. It's the much better question. PHP is not flat-out *bad*. It's just bad at Google-style problems.
Threading and non-blocking IO are wonderful performance enhancers. For desktop apps.
That reply is dated 2010 and Facebook still uses PHP. [Hiphop is a just in time compiler](https://github.com/facebook/hiphop-php/wiki) similar to how Lua and LuaJIT are the same thing but one is faster. LuaJit is not C++ in the same way Hiphop is not C++. That's just some oversimplified web meme with no real insight. [Hiphop's last commit was 5 hours ago](https://github.com/facebook/hiphop-php). Don't you think they would have stopped working on this if PHP was on it's way out? Yes they use other technologies. Maybe even favour them. But the idea that PHP is not an important part of their infrastructure, or that they don't write any PHP anymore, is total BS.
Since when is either PHP or Python not a "back end" technology?
Yes. That was my original point. Stop arguing with some imaginary straw man and look at my original post. Google spends most of its time designing and writing things that PHP would be bad for. Therefore, it doesn't enter their mind very much. Hence, their relatively late addition of PHP to App Engine. END OF POINT
I know we've had our arguments but I appreciate your work keeping this sub informed on the FIG.
Can anyone offer a comparison to Netbeans?
If you do walk away you need to get something signed to protect you. Paypal will give zero fucks when he wants to reverses the charges and they will hold you accountable. If he wont sign anything zero out the paypal account and detach it from your bank. start getting checks. Credit card payments are fast BUT when it comes to freelance work with small businesses it is safer to wait a few days for a check. Once its written, It's done. No charge backs.
You can handle HTTPS and still not be handling 'everything under the sun'. This represents a flaw in your thought process. You could have simply said 'I do not know'.
You can check out a working demo [here http://cmsfire.timnuwin.com](http://cmsfire.timnuwin.com) What works: Creating Categories Posting links Voting Commenting Why this ISN'T ready for production just yet. User Pages aren't integrated. No oAuth integration. No spam prevention. Also, I want to write the documentation up for the JSON calls.
just fyi - there's a code generator out there that generates code based on a WSDL. I've used it, and it worked out great for me: [link](http://code.google.com/p/wsdl2phpgenerator/)
please dont use soap :)
code with limited dependencys usually doesn't have layer upon layer upon layer of inheritance. Usually it has layer upon layer upon layer of composition :P 
Also you can type file paths into your search for even more accurate searches. We have a lot of similar named files in our code base and this is a life saver.
Improving HipHop makes already-written code run faster. This is not them working on PHP code, as you state, it's them working on the code that *runs* PHP code.
Better Formatting: &gt;1) Ctrl-Shift-V to access to clipboard ring. &gt;2) Local History of a file can be VERY useful if you break something between VC commits. &gt;3) Alt-Insert brings up the generate menu (to generate getters/setters, and PHPDoc). Setting all of your PHPDoc with proper types will give you much better code insight and warnings about what methods expect. &gt;4) Definitely turn on code inspections on code commit, this will help you find a ton of subtle bugs especially if you keep your PHPDoc up to date. &gt;5) The Right Click Refactor menu (and learning the Extract Method/Extract Variable/Refactor Rename shortcuts) is amazing in its power. &gt;6) Ctrl-A to find the keyboard shortcuts of the hundreds of PHPStorm features. &gt;7) Ctrl-Shift-F Find in files is very powerful and usually very fast (everything gets indexed by PHPStorm). &gt;8) The Regex tester plugin can save a bunch of time (though there are better stand alone tools). &gt;9) Test Restful Web Service is very powerful, though I wish you could use it to debug your own REST services without having to manually setup the Xdebug/ZendDebugger variables. &gt;10) The built in PHPUnit runner (though I wish you could configure the VCS commit to force a run of PHPUnit before allowing a commit). &gt;11) Speaking of which the VCS commit window which allows for things like auto-format/optimize imports/seach for TODO's/run inspections. &gt;12) Live Edit is pretty neat, but more useful if you are developing straight HTML rather than dynamic PHP. &gt;13) The Darcula theme! &gt;There are tons more, but a lot of them have already been mentioned...
Namespaces in Find Class... File paths in Find File.
Keep it civil.
App engine is not for Google. It's a service it's customers use. So your point is not even valid. It's laughable for you to even suggest that Google would use App engine for any of it's major services (like search).
But nobody does that. Phalcon is the only exception where somebody did something in C. HipHop is only good for facebook, and JIT compilers for PHP (like PyPy for Python) simply don't exist. If python has one advantage, then it is it's ecosystem. I like PHP, but if i look over to Python i can't help myself to envy them ;)
yes, thank you for telling, what code with limited dependencies is XD
Cool :)
yes. btw. you don't have to use any alias (x AS y) if your tables have all different attribute names. that's why you see some tables like "Person", where every attribute has a "P_" in front. edit: +1 for cats
Why not? And what would you use?
That's what I wonder as well. To my knowledge, there are a whole lot of people that do use template inheritance. 
&gt;Before this, I hated all tempating libraries and thought it was unnecessary as php can itself be used for this. &gt;The discovery of template inheritance completely changed my views. I fail to see how using PHP as a templating language is mutually exclusive with template inheritance. 
Better. imho, cause that's how the parameters are described when you comment a method. /** @var Some_Class_Here $variableName */ 
Smarty, Twig, Haanga all support inheritance, every site i've worked on the last five years has used some sort of templating...
Please view these SO threads http://stackoverflow.com/questions/789944/best-php-5-templating-techniques http://stackoverflow.com/questions/5888089/when-to-use-php-template-engines No one mentioned template inheritiance.. Even templating engines like smarty considers it an advanced feature.
I never said that Google uses App Engine for itself. I said that Google doesn't use PHP so it forgets about PHP, even when thinking about what to add to App Engine.
Pure Math stuff is one of the areas where I never managed to figure out a good usage of OOP. The two options I use for that kind of things are probably those you have in mind : 1. A monolithic Math object (or several smaller specialized objects) where you put your Math-related (most likely static) methods. 2. Put the Math code in your business-related objects. Something like having a ::getStandardDeviation method in the class you use to handle your collection of data. Both work, but both make little sense regarding what you are supposed to do in OOP. The two ideas I wrote down to improve that : * Traits could help you avoid duplicating some of your code. That's assuming you can use one of the latest versions of PHP. * Look at a couple Math-heavy Open Source projects' code to figure how they do it. Hopefully what they do can be transcribed or adapted to PHP.
the first one is from 2009, the second one is from 2011. i learned about template inheritance last year...
Which is technically still true.
I don't have a solid evidence or anything..it just appear to me so......
Here is PHP implementation of about everything (except auto-escaping) that is in Twig: class view { static $globals; function __construct($file, $layout = null) { $this-&gt;file = $file; if ($layout !== null) $this-&gt;layout = $layout; } function __toString() { extract((array)self::$globals); extract((array)$this); start: ob_start(); include $file; if (!isset($layout)) return ob_get_clean(); $view = ob_get_clean(); $file = $layout; unset($layout); goto start; } } view::$globals = new stdClass; function block(&amp;$block = false) { if ($block === false) return ob_end_clean(); return ob_start(function($buffer) use (&amp;$block) { $block = $buffer; }); } function partial($file, $args = null) { ob_start(); if ($args !== null) extract($args); require $file; return ob_get_clean(); } Some documentation here: https://github.com/bungle/web.php#views-layouts-blocks-partials-and-pagelets
Twig also comes with a C extension. There, I made your list complete :-)
I tried to love Darcula but I like more contrast. Eventually I settled on Cobalt, customized closer to Ruby Blue from Notepad++.
Could you post example output from `print_r($json)` ?
try this: foreach($json-&gt;data-&gt;children as $child) { echo $child-&gt;data-&gt;title . '&lt;br /&gt;'; }
Two main points I see: 1. What I call "forcing." If you use something like Twig, you can't get away with a template like this: `&lt;head&gt;&lt;?php echo Page::getTitle(); ?&gt;&lt;/head&gt;` Twig forces you to calculate everything and *then* load your template. I think this is closely related to what Joel Spolsky [calls "collocation."](http://www.joelonsoftware.com/articles/Wrong.html) 1. Easy integration with internationalization
It will be interesting to see which php modules are included.
A directory like the yellow pages. This would be for our existing clients to submit their business information.
Paul Jones said so in the email titled "Proposal: Package-Oriented Autoloader [LAST CALL]".... I did not make stuff up.... EDIT: In case you still don't believe me for some whatever reason, here are some recent comments on the group on this topic. https://groups.google.com/forum/#!topic/php-fig/qT7mEy0RIuI%5B126-150-false%5D 
From the front page of their GitHub Wiki. &gt; One of the explicit design goals leading into HipHop VM was the ability to *continue writing complex logic directly within PHP*. Companies with large PHP codebases will generally rewrite their complex functionality directly as PHP extensions in either C or C++. Doing so ends up reducing the number of people who are able to work on the company’s entire codebase. By keeping this logic in PHP, Facebook is able to move fast and maintain a high number of engineers who are able to work across the entire codebase. What's the opposite of continue? 
Thank you, captain_obvious, for reminding me to check out other math heavy projects. I have toyed with both 1 and 2, but neither feels quite right. Looking at the Apache commons-math library (per your suggestion), it seems they're doing a bit of #1, but with less static action.
I actually built a templating language - [Nest](http://tthomas48.github.io/HTML_Template_Nest/doc/index.html) based on JSP 2.0 (which is decent) to deal with the fact that no one was doing this well. I still don't really like how Smarty does it. It's very hard to see the actual page layout and drill down. With Nest you can build tag libraries (that can just be files on the filesystem), so your code looks like this: &lt;!DOCTYPE HTML &gt; &lt;html xmlns:page="urn:nsttl:PageTaglib"&gt; &lt;simple:header /&gt; &lt;simple:body&gt; &lt;simple:nav /&gt; &lt;h1&gt; Something in the body&lt;/h1&gt; &lt;/simple:body&gt; &lt;/html&gt; 
I work with PHP and it has gone a LONG way. My only complaint is with threading. That said, I would happily switch to Python if I could.
Thanks :)
Or, SHUT THE FUCK UP.
Paul isn't going to notice this feedback unless you drop it off on the mailing list or GitHub.
First you need to look at what objects are and when they make sense. A good way to explore this is the difference between objects and data structures. Objects hide their state and expose operations. This protects you from changes to the state, since the methods can stay the same. Data structures (or values in general) expose their state but are not coupled to a set of operations. This protects you from changes to the operations, because an operation can change without all of the other functions changing. Math deals with values. The structure of those values is generally well known and will not change. So trying to force math-related code into an object-oriented style usually bloats the code base. In most cases you're better off just using functions and values. You can use data structures to group values (can be stored in a value object). You will most likely have lots of functions operating on that single data structure. And the nature of those functions will likely change over time.
Yup, Composer is pretty nice.
That seems a bit silly. Surely the engineers capable of making sense out of their complex logic should also be able to learn a language besides PHP. I learned both PHP and C# by being assigned to projects where I had to know them. That said, I am glad I learned C++ under better conditions.
What's a Hot swapping algorithm? 
Going right along with this, is it just me that DESPISES that CTRL-Y deletes a line instead of redoing? It's second nature for me to sometime go back and forward like 10-15 times and if i blank and hit ctrl-Y it fucks everything up...
really? based on nothing? Then why did they just start the vote a few moments ago for this PSR? It was the last call... the title said it was the last call... the title of the email said it was the last call.... I really don't see what you are arguing against....
None of that goes against my original argument. People are no longer even cognizant of my original argument. They're merely piling on the guy that dared claim that PHP wasn't saintly.
short term cached sql query to checked logged in users from the database assuming you're tracking login times and whether or not they're still logged in, inside the database. Cache it to the session to update every so often, such as every 15 minutes or so pehaps when regenerating the session?
If you're using database sessions, you can simply count the number of updated sessions in the last few seconds. Good thing about this is that all requests including AJAX calls will register there. So you could perform lightweight AJAX calls to ping the server. Edit: you should definitely use database stored sessions anyway, by the way!
I don't think you'll have good luck with writing to a text file - why not let the database handle locking for you instead? Assuming you're using sessions, for each request: * insert the session id and timestamp in a table with just those columns * delete where timestamp older than five minutes * select count distinct session id from that table for your visitor count Adjust five minutes to suit, etc. Just a thought - I've never done it this way but it seems reasonable. 
&gt; What are the best practices for creating purely mathematical classes/objects? Don't use OOP. OOP is for modeling real world things that are adjectived nouns that verb things. The "red" "truck" "drives" to the "store". Red is a property. Truck is an instance of the truck class, which is derived from the 'automobile' class. "drives" is a method. "store" is an object that inherits from "building" and is fed to "drives". See how nicely that works? Now try to do that with a math formula. Yeah... Doesn't work so well. However, if heavy math is your thing, it's time to learn lambda's and functional programming. Your life will become much easier, I promise. http://www.phptherightway.com/pages/Functional-Programming.html
Or you could use Scheme, Common LISP, Scala, Haskell, or some other functional language. Worth learning even if you don't use it for this.
Yeah, I think composer.phar dumpautoload is better to use on deployment than composer.phar update. That said, I think composer used with static versions is probably better/safer in the long term since you have versions that can be easily checked all in one place.
Not sure how much usage you have. Thing like this are usually done with in-memory stores like memcached and redis.
That's why composer has the `install` command and a `composer.lock` file. `composer update` ignores the lock file and obtains the latest versions of your dependencies: you use this on your development machines and commit the lock file. `composer install` grabs the **exact** version specified in the lock file. And by exact version, I mean the exact git commit hash that was checked out the last time the update command was run. --- The typical production use of composer is as I described. On dev you will run `composer update` as the need requires (not all the time, but occasionally), you will commit the lock file, and on deployment you have 1 of 2 options: you can tarball the project directory wholesale and copy to server (completely bypassing composer in the first place) or you can checkout the project on the server and run `composer install` and be guaranteed that your vendors directory is in the exact state it was the most recent time you committed a change to the lock file. I personally use the second option to deploy two separate applications (one Symfony, on Silex, both using composer) over about 10 servers total for about a year now with 0 problems to date.
What? I don't even... Seriously, if Twig was this simple it would've been written this simply. Check your facts before stating them.
If you don't need "to the second" data, write the IP (or other thing to identify the user) to file/DB and mark the time of the event. On each visit update current user time and delete every record that wassn't updated in the last X minutes. And just display the count.
It's not mutually exclusive. But I think we can both agree that 99 out of 100 PHP "tutorials" out there write their views linearly. Honestly, I haven't ever seen a plain PHP example that uses some sort of inheritance over "partial inclusion". Good thing that frameworks like Symfony and Laravel are advertising this technique, since Smarty obviously failed to make it popular.
I've heard text-files are web-scale.
Or redis.
Thanks for cleaning that up...
If it were I, I would do something like count the amount of sessions (if you are using sessions, which almost everyone does) then store that into a database. I would update that number maybe 1 time every minute and display that number. A session isn't a 100% true number for what you want, but it is close enough probably. By storing it into the database you wouldn't have to do the counts every time someone updates the page, which could reduce load on the site. Could also allow for you to do some basic stats on the site if you choose (you would have to do some additional figuring, but could see things like when the site was busiest in 24 hours, daily averages, etc.