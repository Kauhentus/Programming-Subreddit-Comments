&gt; Maybe not under the name of FIG I agree. If Larry et al. want to realize the "3.0" plan, it should be as a new organization with a new name.
* Routing is alot easier than re-writing the php config file * The DB queries are alot easier to write * You can build a page wayyyyyy faster with templates in laravel * Better security all around 
Looks cool, might check it out.
Among other things, this exact information leak was one bullet point of many that led to n3w7yp3 (and other handles) being implicated in the Zero For 0wned hacks circa 2005-9 by DOXBIN. Because of the risk for harm, I'd generally discourage that.
Thank you!
No it's worse than that - the reset form takes an email address, not a username.
It was mentioned as a hard business requirement which puts the developer in the position of implementing it as safely as possible or quitting. Unless there was a strong expectation or legal requirement for privacy (the PayPals and Ashley Madisons of the world) I probably wouldn't opt for leaving.
Not quite sure of the goal, but a reset form where privacy is highly important will usually throw up a generic success page then send a reset email if the user is registered and an "account not found" email if they're not. That way you can only know if the email is associated with an account if you have access to the mailbox.
Use cases will differ but the one I run into all the time in ecommerce is users believing they have an account when they don't. You don't want to leave a customer ready to check out hanging in the wind.
Ah, that makes more sense! ecommerce, where making things easy for the customer is always at odds with security :P
+1, iI have my: rote_backend.php, route_api.php, route_front.php
There might be a cms that's well written out there. The issue is if it allows you to install plugins that aren't reviewed and you don't know much about coding, then you're setting yourself up for a big shit storm.
tl;dr gotta work
I would avoid it displaying the e-mail on the success message, if you return positive answer with a wrong e-mail you will freakout the user by thinking that somebody unknown will get his "password" even if we know that it's a token, etc. I would suggest writing something like "an email has been sent, if you have not received it in the 5 minutes, try again."
This actually seems really useful for CLI scripts. Nice!
PHP Brew is kinda nice: http://phpbrew.github.io/phpbrew/ So you can install multiple versions
Practice :)
I am really getting sick of those Laravel fanboys. Every second or third post or comment is advertising Laravel (exclusively) in some way or another. Not starting a discussion about Symfony vs Laravel vs whatever, just saying that it is extremely annoying to see Laravel being praised like this, and it is misleading for beginners or people trying to gain experience.
No, it doesn't. Why would you ever need to programmatically generate and store a list of all possible matches instead of just using `strpos()`?
Let's say I have the two options `create`and `crore`(taken from the Github page). With strpos I'd have to manually check every single option to make sure `cr` doesn't get matched to either, with this package I don't have to write that boilerplate. Yes, it sounds silly. But I like to keep my own code as small and intuitive as possible, and for that purpose it's more logical to have an array containing the possibilities instead of matching from strings. Oh, and: yes, it does seem useful to me. You have no say in that. :)
Why do you repost your library 19 hours after your first post?
Will remove the first post. After submitting the link to the repo I have created a blog post with a video demonstration so I wanted to share that instead.
An integer would be valid if it was 8 bit like the other channels (ie 0-255). But it's 0-100 which makes no sense for either system. 
Nice effort but this API works... backwards from what it should work like. :-) Instead of generating a map of all possible shorthands, which would geometrically explode into huge maps once you start having more commands, it should take a *shorthand*, and return only the commands it matches. Then the UI can ask the user to disambiguate ("You wrote cr, did you mean 1. crore or 2. create"), or error out ("Unknown command: delete"). It won't be too hard to get there from the current library. Remove the "generate" method and replace it with method "match": // Introduce the class into your scope use KamranAhmed\Shorthand\Shorthand; $shorthand = new Shorthand([ 'crore', 'create', ]); // Exact match. $shorthands = $shorthand-&gt;match('cre'); // ['create'] // Multiple matches (ambiguous). $shorthands = $shorthand-&gt;match('cr'); // ['crore', 'create'] // No matches. $shorthands = $shorthand-&gt;match('delete'); // []
Will do. Thanks for the tip.
Will you add support for HSL(A)? Or [4-digit notation](https://github.com/Fyrd/caniuse/issues/2249) ?
[removed]
How can people complain for over a decade that PHP has no standards, and then complain when a movement happens to implement standards?
&gt; which would geometrically explode into huge maps Actually map size would grow linearly at worst since any added command of length N can only add *at most* N shorthands. Generating the map would become more and more expensive, but in practice it would probably never be an issue. That said the API you suggest is a lot more useful.
It is really useful. I think Yii and CakePHP maintain their audiences because of this.
Yii has much more advanced CRUD generators. This is one of the biggest selling points for Yii
You should run composer,artisan, drush commands extra inside the codebox. Ideally this should be the only container you should ssh into You can run lamp and lemp envs without this also if you don't want to link to other containers using cli commands
This is exactly what I'm looking for thanks!
I used Yii once. It was a selling point to not use it again.
&gt; On the Internet, a walled garden is an environment that controls the user's access to Web content and services. In effect, the walled garden directs the user's navigation within particular areas, to allow access to a selection of material, or prevent access to other material.
I found most of my php jobs on Craigslist, but then again I live in New York City. I think there is a little more demand here.
[removed]
you should take a look at https://github.com/hoaproject/compiler
I don't think there's a `rm -rf`syscall. It says `-r` because it's actually recursive.
I liked this talk by Rob Pike from a couple of years ago: https://www.youtube.com/watch?v=HxaD_trXwRE It's about Go but it gives you the idea on how you could tackle the problem.
Well, I'm of the opposite opinion. I prefer convention over configuration. I like Laravel's design decisions and the tooling that comes out of the box. I like that it encourages code structure and design patterns. I love eloquents relationship building. etc... That's my personal tea.
Thank you very much for your summary! That help us a lot for a decision.
&gt; Dependency injection is done by $this-&gt;getFactory()-&gt;create{Dependency}(); With getFactory() returning a factory for that namespace. While there is a dependency container (they use pimple) it's only accessible as far as I can tell from the Factories, so you register your service with the container and then call your container in your factory. It's no where near as powerful as Symfony's. I'm curious why you find this bad. It means that the factory can be type-safe, and that it's not inherently dependent on Pimple or any other "stringly-typed" reflection-driven concoction. Seems like a good design. I exclusively use statically typed factories for injection myself. &gt; So if you're used to dealing with Doctrine like ORMs where you can have entities that represent the domain entity and the abstract away the data layer then you're going be displeased. Not a fan of ActiveRecord either, but if we have to be honest Doctrine's entities aren't true entities either. An entity's sole distinction is it has an "address", which is location + identity. And that's (like it or hate it) the database, and every PHP accessing it through ORM only creates entity "replicas" which are not guaranteed to hold the up-to-date state of that entity, or enforce any entity-set-wide constraints (like say unique email across all user entities). Having true entities as objects would require a very different architecture that is not typical for PHP.
anyone have advice for handling routes on an application with hundreds of thousands of unique SEF urls? Right now we use a mix of declared routes using typical regex routing but also fall back to the database to match possible SEF urls. I suppose a regex router works fine with SEF urls as long as they are namespaced with some sort of (id) in the url.
So, which language are you switching to then? And if all I needed to do was bribe my way to doing a keynote one day...
I appreciate your consideration; thanks.
I WILL HAVE YOU KNOW THAT I HAVE SEEN SOME SHIT THAT NO MEDS CAN CONQUER. There will be no chilling in this vicinity, sir, only eternal raging and gnashing of teeth!
O.o?
If it's just a URL you want to generate to allow others to access, one option could be to store the information in the database against an ID or hash and add that to the query string. When the URL is accessed, the page simply queries the database for that ID to pull the data it needs. As an example, this page uses a similar idea to save and share the colour options within the app designer section: http://www.appsfortourism.com/?uid=d2fe3923fb
Beat me too it, but I like your rewrite suggestion. 
Great, I'm glad you and PHP are happy. I hope you folks practice safe input. I'm uncertain if dependency injection is a metaphor for shooting yourself with drugs. But I don't judge.
I hope the downvotes don't mean people thought I was serious :|
Haha I bet. How many years have you been doing professional web development?
My advice is don't bother about "pretty" URLs. It doesn't matter. Browsers don't even show paths anymore! It'd be perfectly fine if it was something like: http://www.example.com/share/2309h20hr0823hd982hf0g2937gf93f34g7f712g97213gd973g97fg/ Where the gibberish part is unique and crypto-random. Or if you don't want to bother about rewrites, even this: http://www.example.com/?share=2309h20hr0823hd982hf0g2937gf93f34g7f712g97213gd973g97fg
I'm currently working daily on an app that is 10 years old, based on a hacked version of a PHP 4 framework and a mountain of forked pear code. It's been constantly modified for the whole of that 10 years, using lots of different sets of standards. It has been repeatedly modernised for new PHP releases, security updates, etc but has never had a full rewrite of any form. Currently I'm doing a bunch of AWS integration for offloading some processing, so very much mixing the old and the new. Attempting an overall revamp is beyond hopeless, just finding resource for fully retesting and revalidation makes it fairly pointless to start. The approach I generally take is to follow the pattern of the area of the app I'm in to try to keep each area of the code as consistent as possible for ongoing maintenance. When building greenfield features I'll keep the new code as separate from the main codebase as reasonably possible with as light as possible integration points between the old and the new. So, for example, I'll use the settings system, logger, router and action/view approach of the main app but will write a clean set of classes for the new functionality with as a few and simple function calls as I can get away with to use elsewhere in the app. Ideal world major new features will not be part of the app at all, but be their own projects built externally on another platform with an API for the app to access them as a web service.
Recorded this a while ago (it's JavaScript): https://www.youtube.com/watch?v=-1pJxTk0eW4&amp;index=11&amp;list=PLJu5TjHcHkIqdYttyeOBPzId_L8lGgjqk Thing is, the concepts are extremely portable to other languages. I've done the talk for PHP before, but I don't have any good recordings of it. :/
Wait let me think about this... 12? Maybe 13? The last 8 have been serious business. I don't know. I need more caffeine. And now I feel old.
Oh god, my coworker and I joke about how I'm in an abusive relationship with PHP. This is hilarious
It could be just me but as a user, I prefer when websites use pretty URLs so it doesn't break my "typing-flow". It feels weird having to type `?param=1234&amp;param2=4321&amp;id=1`. It also looks more professional in my opinion. While you are right that they serve the same purpose and neither has any advantage over the other, it comes down to preference. and on the note of preference OP did state &gt;My first thought was to generate a url with a bunch of parameters but it doesn't look very pretty. So they already said they do not want to go with the param-method.
I would love to know how to do this in C++ so I can make some little editors in QT or something. Last time I tried to do so, the vast complexity of dynamic types of data destroyed the idea. a .net alternative is nice, too.
&gt; It could be just me but as a user, I prefer when websites use pretty URLs so it doesn't break my "typing-flow". It feels weird having to type ?param=1234&amp;param2=4321&amp;id=1. You don't type URLs. You copy them and you paste them. I realize as developers we're used to "hacking" URLs by removing and adding segments, but that's not what normal people do. &gt; It also looks more professional in my opinion. Well, think about it. You're saying that "/" looks more professional than "&amp;". But ok.
How is dependency injection new in PHP? And seriously anonymous functions are making you happy with PHP? Anonymous functions is one the main areas where PHP is way lagging behind other languages. It sounds like rose colored glasses for your first love. Now if PHP started getting closures right, allowed you to either use or not use $ before variables in cases where it does not create ambiguity, still allow you to use $ to specify variables inside double quoted strings regardless of whether or not the original variable was created that way, and add support for calling methods and properties directly on a newed up object before it was assigned to a variable and without placing parenthesis around it, then PHP might actually be a desirable language. Then one of it's weaknesses, the $ would be its strength because you could still use it in strings. Then they might be able to get rid of their elephant logo and change the name from PHP to php with a straight face. Autoloading functions would be nice too, if it can be done well.
I fucking love this love story. 
This is neat. Before valet came out I had a standard docker-compose setup id pull into every project and customize as needed. I still do this from time to time because most of my co workers don't use valet, but this is also interesting. Cool stuff!
Looks like you've had some problems with your relationship with PHP. I'd know, she can be a total bitch.
CIE1976 support? https://en.wikipedia.org/wiki/CIELUV I hate you Philips Hue for making me learn this.
That's OK. PHP isn't perfect either. I don't use it personally, because it is very laggy compared to the awesome other languages out there! But when I do use it for experiments (hacking, etc...), there have been many occasions where I've wanted to call class methods and properties before I newed up an object - especially before it was assigned to a variable! (I admit I like the parentheses - they help me to see exactly what is happening). Same goes for using $ to specify variables inside strings - any other desirable language has a way to do this, why can't PHP? Anonymous functions make PHP coders happy because they make life easier than closures. It's clear that PHP wasn't doing closures right, and nobody wanted to work with them so they changed. It's nothing as good as the other languages out there though. In my personal opinion, autoloading won't ever happen in PHP - it's not possible because the PHP compiler it is too primitive. Edit: Holy shit I thought I was replying to a joke. It is not a joke. 
Well, ok. Thank you.
Dependency Injection is actually a metaphor for sex. True story. ^^Who ^^am ^^I ^^kidding. 
Hi, this tutorial is great. maybe you can try it http://nitschinger.at/Writing-a-simple-lexer-in-PHP/
I found 2 advantages with this approach 1. You don't even need to ssh into php-fpm container. Ideally docker wants us to not use exec features to ssh into it. 2. When you move into production you can completely ignore codebox container 
Not to say that Sublime Text isn't a good general purpose text editor, but is this specific (development build) release somehow relevant to the PHP community now?
Relevant to the PHP community? A lot of PHP developers use Sublime Text and this news might interest them. 
Rails-esque magic? Rails 3.x used to do automatic routing based on controller/action but that's been removed. Rails 4+ prefers resource style routing which Laravel also supports.
I use it daily for my php dev :)
If the "content" bit isn't required context in the first URL, why would it be in the second? A more apples to apples comparison would be `www.site.com/?1234` in that case. Otherwise, for a fair comparison, you have to use `www.site.com/content/1234`.
How do you deal with interactive debugging? I find the available xdebug plugins quite unstable, unfortunately, and I ultimately ended up using VSCode for PHP development.
&gt; humans are less deterministic than computers Humans are much more susceptible to social engineering though. :)
I created this package for a project I'm working on, and just implemented what I needed. Other color spaces are definitely welcome, either when I need them myself or via PR's :)
Planning to implement this at some point.
Push by a lean startup manifesto they are doing more and more good practices.... metaphor for sex can be easily done with every subject even with the more abstract ones. 
Time for the daily dose of low quality blog spam
What bothers me is that you have a fluent api for setName, but then you use a temporary variable to return the organization anyway.
&gt; Because the class being injected into is now aware of the method of injection. I prefer my code not to be aware of the injection system itself. This makes it a whole lot easier to test. Do you have an example from the Spryker code where any class is aware of the injection system? I would like to understand this point. &gt; While Doctrine has many many faults which makes me hate it, it will allow you to represent the entity within the code without being aware of the datastore. It'll allow you to have value objects which also aren't aware of the datastore. In Spryker these objects are called transfer objects and they are used everywhere. Maybe it's just a entity-manager or repository which you are looking for. But feel free to do that in you project implementation (and let me know how it goes :-) ) Fabian (CTO Spryker) 
I would typically do something more like echo $this-&gt;processResults($array1, $array2)-&gt;name; and private function processResults($array1, $array2) { if(!$array1 || !$array2) { throw new Exception("Could not find organization"); } return (new Organization()) -&gt;setName("/r/PHP"); }
I would personally do $organization = $this-&gt;processResults($array1, $array2); if (!$organization) { throw new Exception("Could not find organization"); } echo $organization-&gt;name; because I personally find it more readable, however you should do whatever you (and whoever you're working with) finds more readable, and stick to it!
Well, honestly I use an IDE like Netbeans for that purpose :) SublimeText is my quick-editor (php, html, css..)
what is new in this build related to php? i see something about builds that isn't and something about variables definition if i understand correcly
As a workaround you might want to try initializing an empty CarCollection before passing it to the function. The function then uses set-Methods to manipulate the empty CarCollection.
I'll try that out. One second
Taht workaround worked, thanks.
Nice, I'm glad it worked out for you.
[removed]
I use sublime for coding and MacGDBp when I need a debugger. 
Ask and ye shall receive: https://tehplayground.com/img/Dancing_bear.gif
The concept itself is not new, obviously. But PHP has such a low barrier to entry that continuously pushing best practices like these is important - we're getting newbies in all the time that need to be educated onwards and upwards.
It's a C thing actually. Open K&amp;R and you will see. Our fathers taught us so.
&gt; It could be that my background is in design It's definitely that. I think most people find HSL pretty logical to understand.
So you stick loads of var dumps into your code then yeah? Debug tools are not hard to set up, and are absolutely the way to go for the professional developer.
Education is the most effective security strategy.
Nice. Thanks, Forking it to suit our need
And we're trying to remove those as we see them.
Pretty URLs may not technically matter, but they do matter in other contexts. For instance allowing the end-user to see a linear tree of where they are within a site. Then there is the whole SEO aspect as URL patterns play into the algorithms.
&gt; Comes from the fact it requires me to either extend classes to override core bundle's dependencies Yes, that's an issue, but it's resolvable. In many cases (though not yet in all, but that will probably come), core classes implement an interface. You can use this interface to implement what you want yourself and delegate the rest (composition) - so what you want is possible in most cases. Where it's not - I would raise a support ticket that an interface should be added for a certain class - I'm quite sure Spryker will take care of this (and I'd also like to see this for all classes). The Unit testing part: getFactory() is only extensively used in Facades (at least in Zed). The Business logic itself should always lie in the business classes that are instantiated by the Factory - Facades just delegate. So the business classes are the things you should test - not the Facades or Plugins. If there is logic in there that needs to be tested in a Unit test, then some structure is wrong. Breaching DRY can also be avoided - actually it's a core Spryker principle. It might seem like overhead, but having bundles with clear responsibilities, while hard to maintain on project level, are worth it. If everything is in the right place, then the dependencies between bundles should be obvious. Then you pull in the facade via the dependency provider (in the factory) and inject it into the class in question. So the business logic resides in one bundle and is used where it is needed (and makes sense). Regarding code duplication in Zed and Yves - there are also ways to avoid that - although normally there are not many use cases for it.
&gt; PEP type processes &gt; ruin the language. Heresy! All hail Guido, BDFL!
The problem with hashID is that I need to pass text and possibly decimal numbers as well, from what I can tell this only supports whole integers.
have a look at https://github.com/cocur/slugify 
Hi, I'm terribly sorry. You are right, this is for /r/phphelp. I'm pretty frustrated by this problem so I forgot to look if there was a dedicated subreddit. :( Anyways thanks for your advise but I compared the two and they are pretty much identical, apart from a few environment variables. (Like lastpwd and so on)
I wrote my own router. Fastest one possible. Crazy simple. Super flexible. New team members can understand it in 5 minutes flat. Very productive. Example: www.myapp.com/item-view/2 Segment #1 is "item-view". I use a simple associative array with a key that maps to the controller name: "ItemViewController". * Can be remapped at any time. Therefore, very flexible. * Blazingly fast because array lookups are O(1) time. * Scalable to at least a few hundred routes if you keep your list alphabetized. www.myapp.com/item-edit/2 (edit item #2) www.myapp.com/items-view-all (view all items) www.myapp.com/user-view-all www.myapp.com/user-edit/4 www.myapp.com/product-view/78 www.myapp.com/products-view-all www.myapp.com/logout www.myapp.com/[noun-]verb[-modifier]/[identifier] etc... Notice how it lexical-izes nicely.
Pretty much do what you do, except for I always return null a.k.a "nothing" if there is nothing to return; } return null; // not needed, hate all you want, i always return null. And then i perform the check not unlike you do; if (null == $organization = $this-&gt;processResults()) { // Do something when there is nothing }
Browsers increasingly deemphasize or even don't show paths anymore. Regarding SEO, I doubt anyone wants to optimize their private share links. Use case matters. 
Don't worry about it. It's not amateurish. It simply fashionable to put slashes everywhere. Like most fashions, the logic behind it is mostly nonexistent. 
Good points. I definitely agree with #1 for production and you really should try to avoid it for development but sometimes you kind of need to. &gt; When you move into production you can completely ignore codebox container So, codebox would only ever get built in development? It would never actually run in production? If so, it doesn't really seem all that bad anymore. I think the only thing I do not really care for is that there would be two PHP boxes that you would need to have configured with appropriate PHP version and extensions. You're not the only one to do it this way. I have seen other people post about it this way and found other people doing it through Google as well. If it works for your setup, then that's all that really matters.
This is kind of writer's choice. In my organization they are uncommon, but sometimes present. However. You should **never** use assignment in compound conditional expressions. You are asking for trouble. These we ban. I.e. if ($a = foo() &amp;&amp; bar()) {} This sets the value of *$a* to *foo() &amp;&amp; bar()* which you might consider obvious, but trust me, it can seriously hurt down the line.
because?
i really love atom :) Unfortunately it has this [annoing bug on remote editing on FTP](https://github.com/atom/atom/issues/2539) 
What's *Laravel Feels*?
Unable to see find the source for your "AuditLog". One point for me is that I have to extend my classes from your Audit model - makes it hard to use an ORM or own structures. 
I don't use FTP, so it's fine for me :) 
Actually you don't have to do that. You can implement your own, the one is provided to save you some time. And the sources are in early stage, I'm still working on them.
Yes. But like you said it's not necessary to have this. Composer,drush etc can be installed on host machine also. Do you see any other problems with this setup? If have any suggestions please let me know. 
Hey OP, we understand that you need to promote your blog, but part of "creating conversations" is interacting with your audience and listening to them. I think your substantial downvotes are worth responding to. If you want to promote your business, find a technical area you are genuinely expert in, and write about it - that is much more of interest. How about PHP/Docker? What about PHP promises, or functional programming, or some interesting tips about Composer, scraping the web in an ethical fashion, or... Go easy on the "PS please hire us" at the end too - people are suspicious of commercial motives, as necessary as they are. 
This is only possible when the path you want to take is known before run time.
Same. I'd rather have more &amp; easier to understand. A coworker has a penchant for assignments in conditionals and it occasionally bites me in the ass &amp; confuses new devs.
Somewhat off-topic: I'm curious why you picked `false` instead of `null`? From the manual: &gt; The special NULL value represents a variable with no value. NULL is the only possible value of type null. 
Oh bleh. Would be great if we could get support for traditional method overloading...I hate Php internals.
If you click in the browser's address bar, the full URL will appear. You can also set the browser to always show the URL as well. In regards to the SEO, of course you are right when it comes to private share links, but when I read your original comment, I understood you to be talking as a general practice. Maybe I misunderstood, and that's my fault.
Yes finally PHP 7 &amp; ES 6 support, it seems faster for me too.
What is a competitive salary? Working for a few months should not pay the same as a normal full time job with a contract. And where are you advertising?
you're doing the right thing but unfortunately I have some shitty-spaghetti-old-school projects where ftp-editing is the only way. apart from that I stay away from FTP preferring any sort of deploy ;)
You haven't said what your expectations are or what they should be knowledgable about, so your post isn't asking the right questions here. I don't know what information you're presenting to potential hires for this project, but if you're expecting someone who is just a 'reliable and knowledgable php developer', you're not going to get anyone reliable, because reliable and experienced developers like to know what they're jumping into. Whether its a laravel project, whether they're building a new CMS, whether its creating a wordpress theme, or whatever it is. There is also an issue that if you're trying to hire someone to figure out the technologies, implimentation and everything else ground up, you're going to have a difficult time, because that is usually a Sr. dev position.
Budget is $60-$70k depending on experience. This is what we put in the job posting: Develop and maintain modules, hooks, templates and other modifications for our internal web applications Participate in business development meetings and occasionally engineering meetings Assist the other developers in larger scope projects Seek out new solutions to problems via new web applications that may better suit our needs, integrating them into our existing systems Assist our other web developers with maintaining and upgrading our internal web applications Qualifications: Must have: Minimum 2 years experience programming in PHP, MySQL Experience supporting LEMP/LAMP stacks Experience with git or other VCS/SCM systems Experience with HTML, CSS and JavaScript Nice to have: Experience in other programming languages a plus Experience with Expression Engine, WHMCS and/or Kayako Support Suite Experience with Redmine or other issue tracking systems Experience with video creation/editing Experience with creating graphical elements using PhotoShop, Illustrator, etc. Experience with A/B testing, conversion optimizing and funneling Experience working in an agile environment under Scrum, Kanban, Extreme Programming, or similar methodologies 
Budget is $60-$70k depending on experience and it's a full time job. 
What do you mean traditional overloading? Overloading by arity (number of parameters) or by types or ..? 
both depending on how you look at it...i.e. like java or most other OOP languages. I'd like to add that I think the reason you keep seeing people asking for named parameters is because they know internals doesn't seem to want (what I consider) 'real' overloading.
That's actually fantastic! I'm firmly in the 'put that "awful fucking loading icon" back' camp.
My reply was you saying that when rewriting the URL using `RewriteRule ^([a-zA-Z0-9]+)$ index.php?param=$1` that you 'need' to include the param name in then URL, which you do not. using `RewriteRule ^([a-zA-Z0-9]+)$ index.php?param=$1` and then visiting a URL like `www.site.com/1234/` makes the `1234` act as the param value, which is what I said. I use this exact method very often. I did not dismiss the validity of `www.site.com/?1234` so bringing that up is pointless as what I said has nothing to do with it.
People love the idea of remote jobs, they seem perfect. Live somewhere cheap and make good cash from somewhere else. The problem is, I dont live somewhere cheap. Most developers dont live somewhere cheap. 60-70k is what a Junior-Mid Devel makes in my city and there just arn't a lot of Junior PHP devels anymore. All those kids have shifted over to ECMA/JS. Suggestion, see if you can find a decent Jr. Java programmer, and teach them PHP. It will take them a few weeks to get salty, but its not a difficult language, and modern PHP is not a long way away from Java.
Adopt some of the Hack features?
&gt; Being able to set visibility on constants is awesome! No shit, the lack of a private const has been a real pain at times.
&gt; hooks *triggered*
I was on board til I got to the video section too -- then I was like wait what? I would not apply to that job and I have the other qualifications.
&gt; we are a hosting company out of Ann Arbor Michigan is the deterrent? Well duh. Home of the Wolverines? Get rid of that football coach of yours and maybe some more people might be interested. Roll Tide.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Use the CommandTester class http://symfony.com/doc/current/console.html#testing-commands
But are joomla, wordpress or drupal good for learning about cms?
You probably lost a lot of support to your argument at "roll tide."
How would we do arity overloading given that passing more parameters than defined is not an error because of variadics and `func_get_args()`?
The salary you are offering for that position is too low for a senior programmer. Just my $0.02
Rather than thinking about specific tools, I think it's better to consider what each of them is meant to accomplish. * Can you make effective applications on the server side? * What would you gain or lose by switching from PHP to Node? * Have you ever tried building a single page application? * Why would someone choose that approach instead of a normal web app with progressive enhancement? * When might either of these approaches be a better choice? If you can answer these questions and learn the concepts behind those goofy frontend frameworks, you don't have anything to worry about.
&gt; Budget is $60-$70k depending Seriously. I earn far more than that in So Cal.
Your budget is far too low for what you want. Increasing that to at least another $40k should get you a much better response.
I still use Symfony 1.4. And it works brilliantly. No longer is it receiving updates, of course, but thats another matter. Theres a lot of bullshit "change for the sake of looking professional" in this industry. Change can be good, but I feel like a lot of developers are all to eager to jump aboard the latest trend bandwagon at the earliest opportunity possible, and can lead to a lot of pain.
https://www.ricardclau.com/2013/02/testing-symfony2-commands-mocking-the-di-container-with-mockery/ 
Those were the days. Laying it out and slicing it up. I don't miss it.
So you need one person to do the job of 4 but only pay 70k?
You're unreasonable. I am a developer in Michigan and that is a entry level programmer rate. You're better off hiring an agency. 
Yes.
You guys would freak out in a third world country! I'll never get tired of seeing how much money people make in the US.
This is a ludicrous over-simplification of the migration from 2.x to 3.x What about twig and config usage deprecations? No mention of the deprecation checker from SensioLabs DE? (https://github.com/sensiolabs-de/deprecation-detector) Also, why does it mention 2.8 beta as a version to upgrade to in composer?
Cost of living in the US is much higher. If OP wants to hire a full-stack software dev in the US, he is going to need to come up on salary. Sure he can hire someone from overseas but his team better have a senior dev on board that can communicate project specs really well and be able to manage the project too. That in itself can end up being a full-time job.
PHP developer here. I meet the requirements. Your budget for the position is way too low. Nobody with my skills would consider something like that if not six figures. Sorry! (Possibly look to hire overseas?)
I am freaking out about those money. I could just apply for the programming part, hire someone else to do the video/ photo stuff , split the money even and still make a lot of money for my living standards.
You could have posted: "Entry level PHP dev, $200K" and you'd still have half this sub bitching about how they make more than that and it's not enough. The problem (and I say this as someone who's been hiring PHP devs for years and have had the same problem, thanks to my organization's refusal to use common sense) is that your requirements list everything and the kitchen sink, half of which are obviously not that important to you. Here's a rewrite: "Full-time PHP web developer wanted for remote position. $60-70K annual salary. Evidence of 2-years PHP/MySQL development required." Everything else can wait for the interview.
&gt; There are very few people who'd be interested in doing this, let alone fit all the requirements. And the very small slice of people with that entire skillset are going to cost 1.5-2x as much at a minimum. 
&gt; WHMCS That's the part that makes me scared - although I'm frustrated that OP seems to have removed this wishlist from their original post. If you're playing with WHM, you are not working with developers, I can guarantee there's a lot more Wordpress themes in this job than described. 
Precisely.
This is the correct answer. I'm a PHP developer and a business owner who's hired PHP devs. A competent full stack dev will cost six figures, a good-to-great full stack dev will cost you $150k+, depending on location. EDIT: because I don't like going into PHP debts
It is much of a muchness, really. Don't think about it so much, just go and build something. All tech has pros and cons, but at the end of the day the end user probably won't know the difference. The only time it becomes important is when you need to recruit others to walk your journey with you. When it comes to finding a job, at this point no matter what you do, you will need to learn "their way" of doing things because they all spawned at different points of tech progression. There are still companies stuck using Subversion instead of git, for example. On the topic of fancy, it works like fashion and moves in cycles. If you invest heavily in something, you run the risk of it becoming redundant. The trick is to focus on mastering the things that *don't change*. i.e good design patterns, older technologies that are still relevant (HTML, CSS) and have passed the test of time (jQuery, Twig). And finally but most importantly, always question authority and ask if there is a simpler way. This allows you to be agile and boil concepts down to their raw elements (the things that don't change). Like fashion, the best work is always derived from simplicity. If you find yourself in a web of complexity, consciously stop yourself and start again, asking along the way "Do I really need this X technology?". Most of the time, probably not. Some times the tools designed to make our lives better often end up making them worse.
Are you a backend programmer? You should definitely spend some time with node. Even if you don't stay with the framework, you'll learn some things that you'll want to take back to your comfort zone with you. Are you a frontend programmer? Same thing, but with the mixed bag of hot front-end tech. Refusing to learn what the kids are up to nowadays is a fine way to embrace your own obsolescence. 
Node is great. I use it when I need a long running process or threading. Gave React a shot, wasn't for me. Might try Vue. I use Express and Socket.io for any Node app that has a front end. 
Role is more a full stack at the moment, but I'm looking to move to move of a back end role in the future. Im not refusing to keep up, I just feel like the current js ecosystem is in such disarray that picking a tool set right now could be a waste of time once things settle down. But thanks for the advice, I'm going to do a few projects with node and react to get my feet wet thanks to everyone's advice. Appreciated!
Queue possible to make just with mysql table. or i even made it based on filesystem, just files inside folder as queue inside ram filesystem. but yes, rabbit mq should be better in this case, but not like opening the way, just as gradual improvement. i may have use case where i get lots of requests to reindex, but i don't want to reindex more often than each 5 minutes or maybe 1 minute. is there something to stack requests in queue this way? probably something like cron that check each minute or 5 if there anything inside queue and makes it all empty. if it is on same host, still installing new tool kinda like overkill. when it's just possible to use mysql table. "big flow of data from different source" probably this case. when data flow from lots of external sources. and there maybe lots of processing hosts. 
I mean php 7 is hip new technology.
Even if we assume the workload is still for a single position (e.g. about 40-45 hours/week), the rare combination of those skills is what really pushes the need for higher pay. It takes a lot of effort to be competent any one skill, let alone 4 different ones. Someone who has invested that much time in themselves is going to want to be well compensated for it.
Exactly. If it were for 20 hrs a week I might consider it. 
Yeah but it's not trendy. I mean let's be honest: if you post a selfie with php no one's going to invite you to parties unless you also have Laravel on your friends list.
Yeah, I fit in that skillset and would actually really enjoy that job, but 60k? LOL, hell no. I made much more than that with much much less on my plate, that's a hard pass. 
 I agree. I recently attended a presentation on React/Redux, and not being a big JS user I was taken aback by how much had to be done to accomplish something that would have been dirt simple with php/maria/mysql etc...
I was told Python was being used more. I was lied to.
probably because it's slightly harder to make a huge mess of react than it is with jquery.
that's exactly where i've been. the only thing that sorta matches the way i feel is ember, but then I have issues with some of the aesthetic choices. It's hard to beat their promotion of "stability without stagnation". I forked an electron app to mold it to my needs, and nearly the entire react stack part was out of date enough that upgrading it would require changing not just the some code, but most of it.
Someone may do it but to me it doesn't seem like enough money.
PHP and JS do two different things, for the most part. PHP takes a focus on server side and JS focuses on client (with the exception of Node). The reason there are so many JS flavors is because it's used for so many different things. Most of those technologies you listed are used for completely separate purposes. Except for Typescript. This competes directly with JavaScript. PHP, as we know, has been around for a long time. Build tools and dev tools have been streamlined to the point where scaffolding an app is as simple as someone just downloading Laravel and running a command. But what it lacks is innovation. Yes, frameworks have improved and evolved to the point where making an app is a pretty easy thing to do. JS is still very immature. But certain frameworks are highly developed and stable. For example Ember. Scaffolding an app is just as easy as it is in a PHP framework like Laravel. Much of the enterprise market uses Ember because of its reliability, and scalability. The company I work for has invested millions in applications running Ember. I recently was thrown into a project using React Redux. I was shocked by how streamlined the dev tools and build process were. The react redux community seem to have chosen one set of tools, webpack, babel, and npm for local development. Yes there are a lot of options in JS. But it allows you to build apps that are far beyond anything that is possible in PHP. And comparing the two is silly because they do two completely different things. 
It certainly has potential! One thing I don't like is the naming of your functions. All my models must now run a bunch of `$this-&gt;addField()` calls or `$this-&gt;add()`. These names will be interpreted by humans to be in relation to the current model (`User-&gt;add()`, `Spreedsheet-&gt;addField()`, etc). You should pick something more self-explanatory, for example `auditField`. How are you planning to store and index these logs?
Ember and Angular are similar in a lot of ways now. In fact the Angular CLI is based off of the Ember CLI. The platforms are very similar. And a lot of Angular 2's purpose is to make a better dev experience; to unify the build process and make everything feel less fragmented. This is a que from Ember. I can only speak for React/Redux, Angular, and Ember. But I can tell you that the only one of those frameworks that REALLY defy conventions is React/Redux. Ember and Angular still follow a MV* like architecture. Where React/Redux follows a functional and reactive model. 
the question is whether or not the tools are going to be obsolete or not in a couple years. this should also be a part of your decision.
Front-end JS you should try to keep up with, if you need to do front-end at all. Backend JS is a fad. It's primarily motivated by the fact that web developers need to learn javascript anyway. This makes it attractive to newbies who have yet to figure out that learning extra languages is inevitable. There will never be a language to rule them all, it's all about using the right tool for the job. Javascript is not the right tool for backend development. PHP is not going anywhere anytime soon and I can't emphasize that enough. It currently powers ~80% of the web. We'll all be retired by the time that number drops to one that should worry us. If competing languages worry you, you're better off fearing the compiled ones. In a time when [100ms extra latency costs you 1% in sales](http://blog.gigaspaces.com/amazon-found-every-100ms-of-latency-cost-them-1-in-sales/) the runtime performance advantage from a compiled language outweighs the quick development time of an interpreted one. Java has strong potential due to familiarity. Go is quickly gaining momentum.
Taking the bus simply isn't a option in most cities. If I wanted to take the bus here to go 9 miles it is 1.5 hours. That would be 3 hours of travel to go 18 miles, and that's assuming no breakdowns. It's faster to bike it, but then that assumes you have bike lanes or drivers who respect people on bikes... 36k in the US isn't very much money at all. As wrapids also mentioned, roughly 30% of what you make will be going to taxes... So that 60k is now 42k. And given our 36k costs... We're down to 6k of "extra". That 6k goes quick if you have medical problems, unexpected repairs, etc.
I mean, you could live somewhere cheap. The onus is on you, not the employer. I make senior level salary while paying a $670 mortgage. I just don't live in San Fran or Denver.
Yeah but what this guy and many businesses actually want is a unicorn. Example: I do actually fit all these requirements, i.e. full stack with asset creation experience. I used to work as a marketing manager and graphic designer, so I know my way around the Creative Suite. I can do video editing in a pinch. It's a rare combination but it exists. I am effectively the unicorn this business needs. But this guy doesn't want to pay for a unicorn and now he's whining that, somehow, there are no unicorns around to come work for him. He has yet to realize that 'not existing' and 'not willing to work for peanuts' are two different things. Fact is he's got the budget to pay for a horse and that's what he's going to get. If he's lucky, he'll get a competent horse that can strap a plastic horn to its head and dye its mane in rainbow colours. If he's unlucky, he'll get a donkey with a carrot duct-taped to its chin that sort of looks like a unicorn if you stand a mile away and squint. I'm going too far with this analogy but you get the idea.
You're not going to get a US based dev who will work for $10/hr and also be good at their job. Simple fact is anyone good at what they do can demand a lot more than the same salary someone working the Geek Squad counter makes, and even more than a 60k jr salary.
Angular: Released 2010. Other hip cool web technologies released that year: PHP 5.4. ReactJS: Released 2013. Other hip cool web technologies released that year: PHP 5.5. Stop pretending it's just "younger" and "hip" just because you're not proficient in it, it's getting a bit tiresome.
I've never found it necessary to manipulate a virtual DOM. I understand the advantages of it, but I typically work on apps that are essentially caretakers to a truckload of data, and having the coolest possible UI is way down the priority list.
I used Slim PHP on a few projects at a time where Slim was so barebones that our projects outgrew it easily and combining it with other packages was a pain. Now it looks like Slim had improved since, but I can't seem to see the point of using it when better alternatives exist with Lumen and Silex - and only for building APIs or very minimal sites where you know for a fact that it won't continue to grow and become something bigger where a "fuller" framework makes more sense...
I have no idea why you where down voted, probably because of truth.
damn never heard of Twig. I should look into it!
Wow. Yes. I guess I am doing that :) I didn't even know. Time to read up. Is Event Sourcing for practical? Are there good php implementation?
While you should definitely keep an eye on new technologies, you don't have to master all of these. Heck... most of the time you could get along with just knowing it's there and then use the appropriate tools for your current needs. Have confidence in yourself: you can always learn new skills/tools when it's needed. Also, don't let yourself lock in buzzwords or tools. You're not a PHP developer or a JS dev or a React dev... you're a professionnal, ready to adapt yourself to the task you are given.
I think you need to start looking in the Eastern European markets. Here in the UK the wages are lower than in the US but still lead devs are requesting around £80k+ in the City areas (about 105k US when I checked). The wages in eastern Europe are much, much, lower, senior devs in the Russian market are $50k US at a max, maybe that's where you need to start looking?
Very intriguing! Thanks for this. Will check it out.
For our company, we went from 5.3 to 5.6 to 7.0 in the past year. From 5.3 to 5.6, this was our average response time graph: https://gallery.mailchimp.com/faf4a337c6dc52ceda74396b2/images/5b0a168a-eb40-42ea-ac96-ae83695a3ddb.png We went from ~1000 ms to ~250ms! Then, when we went from 5.6 to 7.0: https://gallery.mailchimp.com/faf4a337c6dc52ceda74396b2/images/36e32f78-d055-4dbe-9bff-773f09946276.png We went down to ~100ms. So yeah, version upgrades definitely gave our product a *huge* performance boost!
curious whether your performance from 5.3 to 5.6 took advantage of opcache being builtin in 5.5. Did you use other opcache before that?
Ha! No, hadn't even seen that. And no, I wouldn't work on Joomla for the life of me ;)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
TIL I do the work of 4 people, but for nowhere near 70k.
I think most people are working with VMs nowadays. [Vagrant](https://www.vagrantup.com/) is very useful for that since it allows you to quickly install and provision a virtual machine (and if you have a new colleague or you mess up your VM you can just make a new one in a few seconds). If you want to easily build and configure a Vagrant box you can try [Puphpet](https://puphpet.com/), which is a web UI to configure and create a vagrant box. You could also have a look at [docker](https://www.docker.com/). regarding deployment there are a few services like [Laravel Forge](https://forge.laravel.com/) or [Beanstalk](http://beanstalkapp.com/), or tools like [Deployer](http://deployer.org/), [Rocketeer](http://rocketeer.autopergamene.eu/) or [Capistrano](http://capistranorb.com/) that will allow you to deploy from version control, handle dependencies (install required packages from composer or npm), do some tasks (maybe compile some assets ?), and switch production to the newly deployed version only if everything worked as expected so you don't end up with something only half deployed and completely broken as a result.
How did `twig/extensions` end up being more popular than Twig?
Read up on these technologies, do something small in it, ask yourself if you liked what you did and if you enjoyed doing it, if yes, keep doing it, if not, uninstall and never look back.
I think basic workflow is that you develop locally, submit to internal server via git, publish to external server. If you work alone, you can skip a couple steps, but as a group, everyone should have his own environment to work in and have a common development build all share. Usually in form of a git repository. (or via version-control of your choice)
Laravel Valet for most things. Anything bigger, Vagrant.
a vagrant virtualbox configured with chef - and make sure the virtual box is the same type of OS as the server the site will be deployed on. that way you dont find nearly so many issues where it worked locally but not on the server.
I use something I wrote. It lives in a vagrant box, installs docker, spins up bind, nginx, vault and consul containers, layers a serf cluster over them all and lets them chat among themselves to sort out DNS records, reverse proxy rules etc, then I build out the environments I need using config files which are a bit like docker compose, but more generalised and with some additional functionality (inheritance, pre/post-startup commands/scripts, secrets management, user/group creation, context switching, endpoint funkiness, database management etc) and it's got backup/restore functionality, debugging and a bunch of other good stuff built in. It's very nice. If I ever finish the last dozen or so outstanding items on my to-do list I'm sure you'll like it :)
Yes, and have been since PHP5 was released *twelve years ago*.
A few ways depending on the application and its needs: 1. Vagrant (often Homestead) 2. Vagrant - custom box for project with old code base, specific needs. Provisioned with Ansible. 3. Docker via a `docker-compose.yml` file &lt;-- more and more this one. [See here for a guide on how I use it](https://shippingdocker.com/docker-in-development/).
For bigger sites that require specific environments, I use Vagrant or Docker (with `docker-compose` as others mentioned). For small local projects, I use the PHP built-in server and local MySQL. As soon as I have to use Mongo, Redis, Node, etc I set up some kind of virtual machine. Unless someone provides me with a Vagrant configuration, I set up Docker.
Craft CMS
Locally: a pre-made Vagrant box that has everything I need, and that mimics my production environment for full-stack-single-server-apps 99.9%. Due to changing machines often, I don't do anything that doesn't work 100% identically across any operating system, hence Docker isn't an option. It's also a nightmare to deploy. XAMPP / MAMP and similar are (luckily) on their way out. You shouldn't use those. For hosting, most of my one-off projects, personal sites, even mid-to-low traffic sites live on a single $5 DigitalOcean VPS droplet. The enterprise stuff I work on is on Amazon, but honestly it would all work on a cluster of $5 droplets just as fine (just 15-20mil daily hits).
Sooo, you basically re-implemented the functionality of git using `git` ... Great for learning purposes I guess. But ... &gt; curl | sudo sh ... nope.
virtualbox + vagrant (equal settings as the ec2 host / provisioned by ansible) (on a case sensitive partition on osx) deployment by jenkins and ansible (triggered by bitbucket on staging/uat manual for production) local tools: phpstorm, pycharm, phpunit, behat, sublime text, git tower and sequel pro 
Mostly Vagrant - VVV for WordPress development, a custom machine I built for everything else. But slowly moving over to Docker
Good to know, I only used vbox 5 with rsync. I'll try it out at some point.
Vagrant + Vaprobash provisioning scripts (because they are easy compared to everything else and have no problems with windows hosts). I use my own Windows friendly fork at https://github.com/psihius/Vaprobash For PHP7 use the php7 branch with 16.04 Ubuntu. 
@ocramius why i shouldn't use | sudo sh
Every project gets a vagrant box set up. I usually use [puphpet](https://puphpet.com/) for generating the config. I use Linux for my host machine, so I set up NFS shares for each project that the VM will grab to serve the files. I use PHPStorm for my IDE, which plays nicely with all of that stuff. Deployment varies from project to project. If it's a really simple app, I might just pull from Git to deploy. If it needs some love first I might use Capistrano or similar to make build scripts. If it's really complex, you have to whip out the Jenkins and all that jazz. For hosting I usually go with either DigitalOcean or AWS.
I'm just looking for feedback about these relatively new web technologies, whether the community thinks they are fads or actual worth jumping into and learning. I'm not proficient in them, i don't use them daily as our shop is strictly PHP for web applications and only now warming up to Python for scripting. Thanks for your feedback though.
7, for sure! Better performance, (return) type declarations and the null coalescing operator make it an easy choice: http://php.net/manual/en/migration70.new-features.php
Because it contributes to uninformed users trusting random scripts from the internet with root access to their machines. To reiterate: The actions your installer does is not the issue; it is the way you suggest executing the script. 
&gt; VirtualDocumentRoot and DNSmasq Such a flexible setup. We use this for local dev, but also have with mod_vhost_alias on our staging server for client testing (with a wildcard DNS record for all our test sites).
Did anyone think Ruby was actually faster than PHP? I don't think this has *ever* been true... Using the default versions of PHP, Ruby and Python (and not things like HHVM, PyPy, etc) the performance has pretty much always been PHP &gt; Python &gt; Ruby. You don't write Ruby for runtime performance; you write it because you like the language Matz and company designed.
I have stuff written in PHP, Golang, Node, and Python. So naturally, Docker. For both local development and production. Personal projects, Docker too because why not? IMO it renders XAMPP/MAMP/Vagrant and even local Apache/NGINX environments completely useless. You don't need it anymore. Not to mention it's so easy to install, whatever you need is there, containerized, you simply need to docker pull docker run. Need a go env? PHP7? 5.6? Python? Node? whatever you want. Look it up on docker hub, run a docker pull and you got it.
I create a fresh [scotch box](http://box.scotch.io/) for every PHP project. 
Awesome, hope this gets through.
I love my VMs and I must wear many hats. Vagrant + Puphpet + PHPStorm + MySQL Workbench + Shuttle for SSH management + Cyberduck + Sourcetree + Koala for SASS + Ansible
vmware workstation, centos vm's and a script i have to set the OS up, i always host my clients on centos VPS's so it works really nice to be able to use the exact same env as production locally. I use windows for my desktop env, everything else is linux VM's
If you're doing enterprise stuff, always and you're absolutely right. I'd go for a virtual machine setup with Docker or Vagrant as well in that case. Many people seem to forget that not everyone here is developing enterprise-stuff, most people are working on small sites, little customer backends and most of the time even just fun projects they learn with. There's no need to build a huge development environment for that. The reason why PHP is the most used web-programming-language is mostly because you can open a new file, write PHP code into it, save it, press F5 in your browser and the results appear. That's how we all started, that's where everything we do here originates from and that will always be the preferred way of developing small and simple stuff. Let's never forget that. Vagrant and Docker are not bad technologies at all. It just bugs me that I see a lot of people telling me they "want to learn PHP" and the first thing they struggle on is installing the development environment and getting to know 1001 new CLI commands because someone told them there is no PHP development without Vagrant. There is and it works really well.
&gt; If you're doing enterprise stuff, always and you're absolutely right. I'd go for a virtual machine setup with Docker or Vagrant as well in that case. More like if you are working with any other people. Doesn't have to be "enterprise", just not someone learning the very basics. 
It is, but it's not public. However I don't get much time to code, so I'm resigned to the fact it'll be a work in progress forever and intend to open it up once a handful more bullet points are checked off my list and just build it out from there incrementally. Hopefully I'll get a decent amount of time to work on it this weekend and be able to post it up. The code will be hilariously scrappy, but it's going to make a lot of people's lives much easier. 
We're developing platform independant software here. It always depends on what you're developing. You're developing a CMS that you want to make Open Source and let other people install it? No problem on using your local machine for developing, as you need to test on several other systems anyways and your local one is simply one possible setup for it. You're developing a CRM for the company you work in and have a fixed platform for it? Either model your local system closely after the target platform or use Docker/Vagrant (Better, cleaner and easier in this case). Learning how to create an application with Laravel/Symfony can get pretty extensive and there is still no Vagrant/Docker needed in it.
You could try Stack Overflow Jobs. I guess it is expensive to post there, but I believe in paying for an advert you get access to their candidate search database. Given that the consensus is that your salary is low for the US, I wonder if looking at India or Eastern Europe would be worthwhile? Of course, you'd have to put up with a different timezone, but that can be a small price to pay for getting a developer you like, at a price you can afford. 
&gt; a business owner who's hired PHP debts Sounds like a very fishy financial instrument. Is that like a derivative, and is it legal? `:-)`
I'm using "Valet" when developing a Laravel application nowadays. Otherwise, I use generally Vagrant. I love to use Vagrant. Because, I can quickly configure virtual machine according to needed stack. **About deployment:** There are few ways to deployment. I recommend to watch this series https://serversforhackers.com/series/deployment In addition you can check [Jenkins](https://jenkins.io/) and jenkins-like tools also. 
&gt; which is coupled with a lot of overhead What overhead? &gt; There is no difference in developing it on a single virtual linux instance that's always the same or a Xampp instance that's always the same. Unless your production sites are running on Xampp, there's a big difference. You have to waste time by sending it through a CI to discover problems when you could have just not had the problem to start with.
Go to a freelance site like Upwork. Sort freelancers by rating. Discard any with &lt;5.0 rating, and any from India or China (most of those are shitfarms where a basement full of clones is hacking on as many as 100 projects at the same time) Apply salary range filter to hourly wage of those who are left. You'll likely end up with a south and/or east European freelancer pool, which isn't bad.
&gt; the file pointers on the system level don't get "lost" in the sense that you cannot access them but they are still taking up space on the disk. On *nix, generally, when you rm a file, it just removes the pointer to that file in the directory, and leaves the data alone. Each inode (which is the phyiscal representation of the file on disk), also keeps up with how many files are pointing to it (multiple files can point to the same inode, these are "hard links"). When an inode has zero files pointing to it, it is removed from the inode table, allowing the filesystem to reuse that space. See http://linoxide.com/linux-command/linux-inode/ &gt;When rm command is issued, first it checks the link count of the file. If the link count is greater than 1, then it removes that directory entry and decreases the link count. Still, data is present, nor is the inode affected. And when link count is 1, the inode is deleted from the inode table, inode number becomes free, and the data blocks that this file was occupying are added to the free data block list. So, if were just able to delete a directory, the inodes of all the files inside wouldn't know that their counter should be decremented. (which is basically what you said)
It's still the [filesystem](http://www.tldp.org/LDP/sag/html/filesystems.html), part of the kernel, to manage all of that. The firmware on the drive doesn't know or care about how the OS is managing its data. In RAID setups, for example, the filesystem still presents several phyiscal drives as one filesystem, but the drive itself doesn't need to know anything about that.
Personal projects, if on windows i tend to stick with xampp. If on Linux i install LEMP natively At work we use docker, so my linux os is just a place to run IDEs and virtually mount code inside vm dev environments, and use jenkins to bake that code snapshot into a prod version of the same container and deploy
+1 for Docker
For projects vagrant with Ansible for the setup. For small stuff local php/Apache with custom vhosts
DropBox as document root, wampserver (windows), MAMP (mac), custom PHP/MySQL setup (ubuntu), plus Gitlab to share files with partners. I find Dropbox convenient for the project files - everything is updated instantly on all my machines. Vagrant/Docker etc is always a headache. My "cool" days are over so now I can just use common sense.
Why not use the hosts file? (Assuming you don't have 100s of projects). And why .dev domain, it's a real domain now, which creates issues in Chrome. [.local](https://tools.ietf.org/html/rfc6762) are now standard for local development.
I love Docker. We've been using it at work, and wound up using Vagrant to build a virtual machine to hold the Docker containers inside it. It's not efficient, but was the "next best" option since there was no native Docker package available for Windows. Regardless, it's an awesome system.
Also NFS mount works quite fast on windows 10.
Routing, Logging, MVC, Service locator, Form's, Navigation, ORM, ETC ++
Vagrant using VMWare Fusion instead of VirtualBox. Big performance increase especially with projects with lots of files. Deploying, git over SSH or DeployHQ for some projects. Hosting: - Small: Digital Ocean - Big but without large storage requirements: Linode - Big with large storage requirements: AWS (EC2 + S3), although Linode and S3 works too. 
That's really weird. I basically have the opposite experience. I use Vagrant with VirtualBox exclusively on my Windows machine for development and have never had any issues with composer, npm, etc or file sync. 
I'm running Debian on my workstation, but I still use VM's. Indeed, it takes a bit more resources, but I have it to spare. The fact that you don't contaminate other projects is absolutely worth it. I have one particular project I'm working on that is a bit legacy and requires versions outside of the official repo's. I certainly don't want to taint my main system by dicking with stuff like that, or upsetting other projects from stuff like that. But as far as overhead goes, you could also achieve the same things with Docker, which has considerably less overhead.
You are exactly right. I think /u/TorbenKoehn 's point is that some general development stuff can be done without VM's and in certain peoples cases, they might not have any good reason to burn the startup time to setup a self contained environment
Well, when you use git over a shared directory, things are ridiculously slow unless you have a proper syncing solution.
I use the PHP built in server and XAMPP. It gets the job done for me. 
&gt; Form's &gt;ETC ++
Vm
I fire up the local php development server for quick stuff and use a vagrant box for more important and in depth things. I'm probably not an average dev though.
If I'm just hacking on random stuff, I sometimes will just use my host machine. I do have PHP7, Apache, MySQL, Postgres, python... a bunch of stuff installed on my workstation. But it's all basic generic stuff. No special configs, no special plugins. That stuff goes into project VM's. And if I'm working on a real app, I use a VM. I would argue that the time spent on setting up a VM (especially if you use something like PuPHPet - which is dead simple) easily outweighs any headache tracking down subtle bugs due to version discrepancies. 
Routing, IOC container, ORM, and sessions.
Could this be used maliciously to set strictness on classes that aren't intended to be strict? If I have package a and package b installed, and package b declares that the package a namespace is strict, is there any defense?
I was using Vagrant for quite some time, until I got the hang of docker containers. Now its containers all the way. Ephemeral, quick to stand up and bring down, easy to maintain consistency between dev, stage and production.
I just tried Puphpet and I get [this mocking of php](http://i.imgur.com/Xn0m4YP.png) &gt;:|
&gt; maliciously Any example? I can only think of crashes caused by this, but not actual security issues. Worth investigating.
I actually see some space for improvement here. If you think about it, tinkering with base functionality such as the autoloader already allows you to intercept file loading, and add/remove strict types, so this RFC just simplifies that by a lot (and allows proper opcaching). Consider that some AOP-oriented libraries already fiddle with other people's code, for good or for bad purposes, but it's quite awesome to be able to do that. At the end of the day, what you install locally is something YOU own anyway :-) EDIT: about the autoloading: * https://github.com/Roave/BetterReflection/blob/635e6983ac9cfc784065f40f6a2a6aa53734665d/src/SourceLocator/Type/AutoloadSourceLocator.php#L59-L89 * https://github.com/goaop/framework/blob/d231fad0b716f1c9311c3bed1a002ddcaefe5cbf/src/Instrument/ClassLoading/SourceTransformingLoader.php#L87-L110
Because I don't need to re-invent the wheel. It exists, and it rolls, and that's all I need to know.
I use it because it makes my life easier. Even if I didn't, I'd seriously just end up slowly building my own framework anyway. And I don't want to do that to people who have to maintain whatever I make. 
Sweet jesus...
You can break other people's code all you like. You don't need this feature to do that. But ... why? If you're using a library, why would you want to intentionally break it? If you're a library author, why would you intentionally sabotage another library? The only thing that'll gain you is bad publicity. This would be like Symfony specifying an autoloader for `Zend\` just to mess with ZF2. Sure, they *could* do that, but nobody is seriously concerned about this happening.
That definitely isn't normal. There may be some additional factors at play. Have you checked out [Vagrant WinNFSD](https://github.com/winnfsd/vagrant-winnfsd)?
I'm using wamp. Definitely not the norm around here though.
&gt; There are very few breaking changes on the 5.x line. That's perhaps a bit optimistic. From 5.5 onwards there's been the release process under which we're not supposed to break backwards-compatibility in minor versions, but previous 5.x versions included some BC breaks.
What do you mean by 'more configuration options'? What specificly makes you say 'limited in comparison'?
You can use the fully qualified name and ::namespace as a pseudo-constant and get the same effect, I believe. It definitely works for ::class. 
Oh cool. I was so happy when ::class was added, because I also feel wrong about using class names in a string.
Here you can find the official info for the migration: http://php.net/manual/en/appendices.php If you know the project and php well enough you can scan the relavant articles amd plan how to do it. You want to setup the project on the new environment anyways and check if everything works. I wouldn't expect too much trouble, except you are really bad at php or the project is really weird.
Depends. If you exclude webdev python is superior. But then again other languages are superior to python if you exclude its strong fields.
good to know, thanks for the heads up! 
You can't do that on win 7, huh?
If you want a quick vagrant box to try it out on I've been pretty pleased with [Scotch Box](box.scotch.io) 
Ride on Code Cowboy. Ride on.
&gt;You only make 32k a year because you haven't applied elsewhere. You can be an introvert who sucks at marketing themselves but you can still send resumes to places paying more. You make $15/hr as a developer. That is fucking ridiculous. Janitors make more than you. People at Best Buy make more than you. Homeless people pull more than that. Costco workers make closer to $20/hr after time spent. You have a specialized skill and are getting paid as if you have no skills. I'll be the first to admit I could have gotten more money, however where I live this is only slightly below average (as far as I can tell anyway). By living in a larger city, it is easily possible to get double the amount. Sometimes a poor paying job can be better than no job (especially when only one company follows up on your resume that you send in). Fortunately taking the job let me finish paying off my student loans before interest started kicking in. **Note:** I'm actually getting paid more than my last job (15k a year for manual labor)
Lawled .... ^^My reaction when interviewing 10+ year dev who said his ide is dreamweaver. 
Given the project name I'm assuming it's tongue in cheek
I'm told the latest versions use HyperV, so it uses virrualization, but not a full blown VM like virtualbox.
This is what I do with a small bit of pre-build and extra stuff on the prod host. I'll build my static assets with gulp locally (all in my deploy script) and tar that stuff to send to prod. This way I don't need to manage node packages in prod to make sure they stay up to date. Also once the code is on prod in my "next" folder I run composer and any db migrations right before moving www to last_working and then next to www. Works super for us. Also there are automated slack messages sent to our main channel so people know when a deployment is headed out and when it's completed. 
I did some things... I'm not proud of.
Did you think invention = reinvention?
&gt; 5.3.29 minimum. Worth calling out, that version is long EOL and you really should try and make a larger jump to something current if you can.
Nice video :)
It's actually turned out easiest to use IIS.
Samba share on a linux vm. Mounted as a drive letter and have a ip restricted page for dev. 
And I thought it was only me :)
It explicitly does not trigger autoloading
Same here. But I also have a wildcard DNS record tat points to 127.0.0.1 in our DNS server, so we don't need Dnsmasq.
Why do people keep using Apache instead of nginx? 
I spent ages setting up Vagrant etc, but instead have opted for Cloud9 SelfHosted (c9sdk) - it's awesome. I can login to my server from anywhere using any machine and everything is right there as I left it. 
+1 for vagrant
[removed]
Routing with a request and response object. Almost every time I choose Slim framework, it lets you implement it how you want which is important to me. Each project is going to be different so the framework should be tailored to that.
Or simply just use sudo apt-get install lamp-server^ 
Master the fundamentals, not just of the language, but HTTP as well as any other technology in the stack. The rest follows with experience. Using well written and popular libraries from packagist is also useful as well as looking through the source code.
I have much more sypathy for nginx, but apache runs everywhere so it is a no brainer and it does what it needs to do.
If you think about it, where would this declare go? We don't have a "namespace" file to autoload. Putting it in the bootstrap is not portable, say for Composer libraries, you can't force people to put something in their bootstrap through Composer (you can have an install script, but you can't just guess the bootstrap file and patch it). So what's left is putting the namespace declaration in every class of that namespace, so it can get triggered on demand as it's needed... aaaaaand we're back to square one.
Composer supports per-package bootstrap files under the name of a "files" autoloader. For example: // src/bootstrap.php &lt;?php namespace_declare('Vendor\Lib', [...]); // composer.json { "autoload": { "psr-4": { "Vendor\\Lib\\": "src/" }, "files": ["src/bootstrap.php"] } } This is how I imagine this functionality will be used, at least until such a time as we can have native Composer integration, in which case Composer will manage the details for you. Edit: I've added this example to the RFC.
When you say a shared directory, you mean the process by which the guest mounts the host directory, right? You're not actually developing on a shared directory from some remote server in the office and mounting that, right? If just the former, I highly recommend Parallels over VirtualBox. VirtualBox is a slug by comparison. It's not free, but the difference in performance is very real.
I think you may have just interpreted the question differently than intended. "When using php, why do you use a framework" as opposed to "Out of all the frameworks, why use a PHP one"
&gt; Comes from the fact it requires me to either extend classes to override core bundle's dependencies. This is just annoying I hate extending classes as it is and this seems to be directly abstraction over composition. The classes that contain the actual business logic (and this is where you spend most of the time) can be extended via composition and this is what we highly recommend. We described it in the academy here: http://spryker.github.io/development-guide/reference/core-extension/ The system classes, (especially the factory) must be inherited. This has a reason. When you do composition you need to delegate all methods. This is not only overhead when all you want is to extend a single class that is instantiated in the factory. For factory it is also bad when we release new versions. The factory is not part of the internal API which is described here: http://spryker.github.io/release/definition-of-api/ . Therefore it may happen that we add new methods to the factory in a minor or patch release. With composition you'll get an exception then because the new method is missing. With inheritance this will not happen here.
Ugh I gotta work on my PHP selfies, brb.
That's a very good way of looking at it. Especially the documentation and standardization.
I think people already mentioned the most important issues. a) A normalised system to do stuff helps with adding developers or someone taking it over as a legacy project. It basically makes access easier for other developers to work with it. b) Many core functions of any project are repetitive. Once you figured out how to handle user-management, login, file-operations, upload, etc., you don't want to write it again and again. Just adding them as modules to your project, as needed, helps reduce development-time and therefor costs, making you more competitive. c) By forcing yourself to apply a certain standard of coding, you are forcing yourself to write code well from the start. "I'll fix that later" is a common trap for developers, causing messy code that no one, not even the one who wrote it, can easily change later. If you organise the way you write code, you automatically also organise that code. So, all in all: to make things easier in the future. 
No that's an improvement in design. Maybe a fork from the original. Reinventing would be sitting around trying to carve your own wheel out of rock because you didn't want to use any existing ones. Only to end up with some oblong mess that functions half as well because you aren't as smart as you think you are. 
Then those files get loaded even if the component is never used in the given request. This is a very obnoxious feature of Composer. Not sure it's a good idea to promote it further. 
+1 Vaprobash We've been using it to build our development box for the last 2 years. If you just want to deal with bash, it's the best way to go.
&gt; I think it's annoying whenever you set up your environment you need a dozen of different tools and technologies. Not that I think VMs are the right solution for every project, but how is installing two packages (Vagrant, Virtualbox) that much different than installing Xampp? You also gain the advantage of one time config, since the configuration is stored in your project's repo. Your future self will never have to remember to enable mbstring, for example. As I said, to each their own, but if your complaint is setup time, VMs will decrease that in the long run.
If a `declare(strict_types=1)` in the file overrode the namespace default, then a library author could just as well defend against someone misusing this feature to disable their intended functionality. But of course, someone could just as well edit those scripts to delete that directive. It's all moot anyway.
No, that's a copy. 
Great idea. I felt like declaring this at the top of each class was rather kludgy. Since it feels more like configuration anyways I think it makes perfect sense for this to go into a bootstrap file.
Why do we need Redis for a blog system? If this is truly a fast blog it should be fast just using a database, no?
Shameless plug: http://phpdocker.io
Well have had enough. I don't even think it is possible to reinvent.
Awesome, I was looking for a markdown editor / parser combined in a laravel project!
for caching? Isn't it better than a database?
For class? I know namespace does not but could swear class does. Could be remembering wrong though, it's been a while. 
Yes,it's for caching.Redis is faster than a database like mysql,so it can get better perfermance with redis.
Mostly it's just pointless. It may also actually reduce the variation in the final hashed output, thereby weakening the effectiveness of hashing. I do not claim to be a cryptographic expert though.
Wouldn't it significantly increase the time needed to generate a hash though?
None of those hashing functions are slow. 10 rounds of bcrypt is probably much slower.
Woah, bit too much salt there, buddy. 
omg!
My blood pressure spiked just *looking* at all that salt!
https://media.giphy.com/media/qivbcSpS2mdAA/giphy.gif
Yeah, I was a bit younger and dumber, had just learned how to salt :D
&gt; For example, if I was to want to replace the translator in Symfony, I just create a service as translator. I don't need to know the details of the original translator other than the service id nor the fact that the original service id was an alias. It also requires me to copy and paste if I want a dependency available in another bundle. This may just be my very newbie error and I may be missing something, however if I am then it clearly shows that the dependency system isn't very explicit. So say I have a library bundle I want to use in Zed and Yves then I have to declare the service in both applications instead of requiring my bundle in both applications. This breaches DRY. (Breaching DRY seems a common issue in my opinion.) There are some other issues but I am not sure if that's Spryker or the project I am working on, however I feel like these are a symptom of the dependency injection approach. With Spryker there are several ways to interact with core (or project) bundles. Each bundle ships with a "DependencyProvider" which defined the bundle's dependencies. For instance this one is for the Sales bundle: class SalesDependencyProvider extends AbstractBundleDependencyProvider { public function provideBusinessLayerDependencies(Container $container) { $container[self::FACADE_SEQUENCE_NUMBER] = function (Container $container) { return $container-&gt;getLocator()-&gt;sequenceNumber()-&gt;facade(); }; $container[self::FACADE_COUNTRY] = function (Container $container) { return $container-&gt;getLocator()-&gt;country()-&gt;facade(); }; $container[self::FACADE_OMS] = function (Container $container) { return $container-&gt;getLocator()-&gt;oms()-&gt;facade(); }; $container[self::FACADE_SALES_AGGREGATOR] = function (Container $container) { return $container-&gt;getLocator()-&gt;salesAggregator()-&gt;facade(); }; return $container; } } As you can see the Sales bundle requires facades from other bundles, e.g the facade from the Country bundle (~ CountryFacade). In case you want to use another class instead of the CountryFacade for the Sales bundle you can overwrite the SalesDependencyProvider and exchange it here. You can add any class that fits to the SalesToCountryInterface (it's a implementation of the interface segregation principle btw). In the core we use bridges to decouple the bundles, but they are not needed in project code. In case you want to exchange the CountryFacade for the whole application (like your symfony translator example), you can overwrite the SalesFacade. In this case the internal service locator will use it, see return $container-&gt;getLocator()-&gt;country()-&gt;facade(); Maybe that's not intuitive, but it is easy to learn and documented (http://spryker.github.io/tutorials/zed/extending-spryker/) &gt; Routing, my issues have been within Zed. Which I can't find any routing builder classes. Also I've been trying to find controller/actions for endpoints being called from Yves so I was unable to use Symfony toolbar to find the code for it. Correct, Routing in Zed is hard-coded to bundle/controller/action. There was simply no demand to make it more flexible. What is your concrete use case? Btw: You can use the "repeater" to re-run the last call from Yves to Zed ( http://zed.de.spryker.dev/setup/transfer/repeat ). &gt; While I am on the fence about if this is a good idea or not. It doesn't seem that wise from my initial point of view, as some things are coupled by nature. Your Order will always be coupled to your Product attempts to make that not so will in my current opinion result in a system/codebase that doesn't represent the truth and therefore harder to maintain. Well, that's a bit theoretical. We are using DTOs since some years and did not get problems with maintainability. It's definitely much better than plain arrays where you never know the keys ("firstname", "firstName", "first-name", ...). I think the transfer objects are a quite good representation of the reality and still very decoupled. &gt; Also the over use of DTOs also make any attempt to do DDD quite hard since entity logic is no longer held within the entity but within other locations that are handling DTOs. The Spryker code consequently separates class that contain logic (e.g. business layer models) and objects with data (e.g. transfers, entities). Therefore most classes are stateless. As far as I understand DDD this approach is almost the opposite. We decided for this software design because it fits perfectly to a web application with a lot of CRUD. In my opinion DDD is great for other types of software like games when you naturally have objects with behaviour. But maybe its a matter of taste. &gt; It also results in a large amount of converter method/classes to convert DTOs to entities. This is needed because the transfer objects are conceptually not 100% the same as entities. But most of the time they are very close and the conversion can be done like this: $addressEntity-&gt;fromArray($addressTransfer-&gt;toArray()); and vice versa. &gt; Unit testing. There are so many classes that call getFactory or have other things kinda magically appear that unit testing seems like it's going to be hard and the code feels like it's not really testable expect from a UI/Functional approach. When you get this problem, you are doing it wrong. The classes inside the business layer which are behind the facade and factory are using plain vanilla DI with interfaces (random example: https://github.com/spryker/Discount/blob/master/src/Spryker/Zed/Discount/Business/Collector/ItemPriceCollector.php ) Best Fabian
And that's competitive how?
No point in uplifting any code base at this point with anything other than php 7, 5.6 will reach eol soon enough.
&gt; Then those files get loaded even if the component is never used in the given request. This is a very obnoxious feature of Composer. It's the only way to support things that can't be autoloaded.
Don't make a stupid argument then nitpick at people who are blowing up your stupid argument
I'd like to invite /r/php to review this new library before 1.0.0 is tagged. If you have any questions or can suggest any improvements please leave a comment here or raise an issue or PR on GitHub. Thank you.
This is adorable :D One thing is for sure. You can always point at this function and say, "I have **NEVER** cut corners when dealing with my users' security."
Hi there, [KickOff is a continous website monitoring tool](https://github.com/frickelbruder/kickoff) to integrate into your CD workflow. You can test, if your HTTP-Security header are still there after your depoyment (or in a cron), or whether your page delivers in less than 1 second or pretty much anything else you can think of. The advantage over tools like pingdom is, that you can integrate it easily into your continous deployment workflow and it is pretty easy extendible.
Doesn't look all that safe, you didnt use *str_rot13* anywhere...
At least you were USING a salt. Many major companies can't even be bothered to do that.
Feels like Java OverOverTheTopEngineering to me. Thoses where dark days for me ^^. You probably didn't write it for nothing, it must have legit use cases, but goddam, I won't go back that craziness path again
My mistake, and thanks for correcting it. I must have been thinking of static analysis tools that do the resolving, rather than the runtime process. I'll correct the original post.
Reminds me of my .NET AutoMapper days. Congrats on the release. 👍
I feel like making DI containers is something people do for fun because it takes a relatively short amount of time and it feels cool to see it work, https://github.com/mrferos/GenieDi I was guilty of this.
Although I had not heard of it, [AutoMapper](http://automapper.org/) does seem to be a similar idea, although I have trouble understanding how to use it from their documentation. I was hoping they would have published a value proposition but they have opted to just describe what it is rather than why it's useful. Having had experience using it, can you comment on the value of such a library? Do you think such a library would be useful in PHP?
If you're doing some kinda of .NET service oriented architecture it's a common library to use for mapping domain objects to DTOs. In our situation, we were also using IBM DB2 as our database and Entity Framework did not support that database natively, so we would sometimes use this library to map database results to domain objects or DTOs.
Tests are done in production.
My favorite part is the database escape at the very beginning (which I believe means it would actually fail if your DB is offline, thanks to `mysql_` implicit connection magic), followed by the return value's variable being `$salt`. A for effort, though.
What do you want protect with this fucking algo ? Ahahah
Macho programming 
I haven't looked at this project, but I can see caching things like articles, so that they don't need to be queried on each page load. While it might not be a tremendous speed increase over pulling it from the relational DB as a 1:1 comparison, the complexity increase is pretty marginal, and it is likely to be a significant speed increase if a large quantity of people are accessing the page at the same time. It's especially valuable if you're performing some kind of parsing or modification of the data from the database before rendering it to the user (perhaps it is being translated, or some other kind of transformation is taking place) as you can cache the modified data for future display, rather than having to modify it repeatedly unnecessarily.
good on you for posting that, friend
Education and work experience are weak. 2yr degree + 2 years at Uni, 3 years dev experience. My strengths are that I have an extremely strong set of skills, technologies, projects I've led. Learn quickly, self-manage, know how to communicate with business/exec types (requirements gathering, reporting, process calls, etc.) I also see resumes that come in so I know what a strong resume looks like. I've also seen resumes from people with 15+ years of development experience but they list XML and JSON under their skill-set and makes me just throw up in my fucking mouth. Unfortunately, HR and non-dev people look at that shit and think they're an amazing candidate. My resume basically looks like: yeah, I don't have a prestigious degree or certification, but I devour technical knowledge, have a track record of high performance, eat/sleep/breathe problem solving and critical thinking, am a reliable and confident leader and mentor, and am capable of transforming an entire business into new heights.
&gt; A factory is a creational pattern but Mapper does not create any new objects so I do not think it is a factory. I'm using the term a little loosely here, because the behavior is effectively identical. Instead of objects, it creates arrays (with schemas determined by the injected configuration). &gt; When Mapper receives an array it augments it directly. It copies the array and augments the copy, but what gets returned is a brand new array, and the originals are not modified. That's why I likened it to a factory. &gt; It seems useful to be able to define your data transformations in a separate class, i.e. as a Mapping. But *how* is that useful? As a potential user of the project, how does writing my array transformations in a DSL of object instances benefit me compared to writing them as PHP code?
The __set method throws if the key isn't set, but it shouldn't be set yet right?
Pretty unlikely considering the final hash is sha512. 
Thanks,cannot agree more!!!
I realize this. But a better solution is to either improve the autoloader in core, or stick to things that can be autoloaded. **EDIT:** Also, just as a side note, there's an alternative way: the autoloader *can* monitor if a class from a given namespace is loaded and only *then* run initialization code for that component. It complicates the autoloader a little bit, but the alternative of blindly running everything isn't better, especially in large projects.
&gt; Mappings are reusable and composable so you can compose mappings of other mappings. Some time ago I had to figure out if I want my validator engine rules to be directly composable, or they should be simple functions that people can compose by closures on their own. I wrote examples of one and the other and figured out that composing validators directly is much more clear and compact. I think your library needs similar before/after examples, because as it is, closure are already reusable and composable. There are reasons to do it another way: advanced introspection, code conciseness, handling aspects like code generation etc., but it has to be demonstrated. The best proof is a set of convincing examples. 
That is a valid reason. On my personal projects I play around with stupid solutions too :-) And don't get me wrong, a full page cache might be a good idea. But I feel like a blog engine should be fast even if you remove the cache, because there shouldn't really be that much work on each page load anyway.
&gt; I'm using the term a little loosely here, because the behavior is effectively identical. Instead of objects, it creates arrays (with schemas determined by the injected configuration). By that logic every function that has a return result is a factory. A factory is specifically a replacement (or an augmentation) for calling an object constructor through "new". This is a mapper, hence the name... "Mapper" :-)
Docker works great. PHPStorm is lagging a little. But some other editors/IDE can debug just fine.
You are correct, I am missing real-world examples. I am a big fan of contrived foo/bar examples but we also need some real-world examples because nobody is going to be convinced of its benefits otherwise. This library is actually [used in production](https://packagist.org/packages/scriptfusion/mapper/stats) with large and complex mappings but not only is that proprietary code it would be hard to understand. I will try to come up with some simple but clear real-world examples but any help with that would be greatly appreciated! I can write the examples but I'm lacking ideas.
For everyone wondering: Salting is adding a different string to the password for each user, pepper is adding the same string to the password for each user. The stuff that he calls salt, is actually pepper, the only real salt is adding the username in line 22. Using multiple hashing algorithms does not necessarily make the hashing stronger, its just more annoying for a potential hacker to crack them, as he needs to implement this himself and it takes more time to generate hashes.
It's cool to see it work, as long as it's kept away from projects... I've seen multiple projects' architecture massacred by indiscriminate reliance on autowiring containers.
Thank you anyway.You make to think why we need a redis cache in blog.Nice to meet you!
&gt; their skill-set and makes me just throw up in my fucking mouth Based on that sentence alone I would say you're worthless. The value of a developer is less his technical ability and more how easy they are to work with and you seem like a fucking cunt.
MD5 is still used 😁
It's a hard coded salt though, which is usually of limited use as someone could still compute a rainbow table if they knew the salt. That and two users with the same password would have the same hash. Proper salt differs for every record/user, as that makes rainbow tables useless. Edit: Oops, I didn't even realise the username was used in the salt. 
You should usually try to avoid globals. For one, it makes unit testing more painful than it should be (global state and unit tests don't mix well). It also makes it harder to reason about your data flow and *where* everything is coming from if you're using globals. Of course you need to grab the data from the PHP globals somewhere, but your app should really use an abstraction like [Symfony's HttpFoundation] (http://symfony.com/doc/current/components/http_foundation.html) (which is also what Laravel uses) to encapsulate it. 
Polyfill is a good example, albeit an extremely niche one. You could also initialize a polyfill explicitly: Something::init(). Module discovery is a very bad one. Why would you want all modules to be **re-discovered in every request**? I'm not surprised Magento would do something stupid that hurts its performance, but it's not an example to go by. 
I have maintained multiple projects closed-source that make good use of autowiring containers, both from a 'micro framework' where the injector was manually integrated and also in frameworks where autowiring is an option and exists by default. As long as code review exists to stop service locators and coupling to the framework, devs can write their code in a framework agnostic way and just utilise the infrastructure of the framework and injector to plug their code in. Perhaps the architectures you saw were massacred due to inexperienced developers and a lack of process, not because of usage of a single tool such as an autowiring injector (unless the injector was particularly poorly written, but then that's one library and not others and process is still the issue there).
This salt did include the username a few times, so two users with the same password would be different, provided usernames are unique
Out of curiosity. What has this to do with php? 
Ok here is a simple architecture problem. You have 10 modules in an app. Half need to log to one log, half to another. It's the same interface and implementation, but two different instances. How do you "autowire" this?
copy&amp;pasting your key to the authorized file isn't really best practice and rather tedious. you could just use `ssh-copy-id` instead
Tell your injector that there's an edge case. Upon encountering the logging interface, for these five modules, inject this concrete instance of the logger and for the other five modules inject either a different or default concrete instance of the logger. It won't be the same instance if it's configured differently (a different logging location). You can have a complete autowiring injector that's also configurable.
Patterns are learned when you have the kind of problems that they solve. If you don't try to architect apps, especially bigger apps, or if you stick to what a framework tells you to do, the chances are low that you'll encounter a situation where a wide variety of patterns do something for you. So... architect apps, design components, libraries, and you'll figure it out.
Good job, if hackers saw this code they'd roll their eyes so hard they'd be unable to finish their work.
Thank you!
&gt; Pretty unlikely considering the final hash is **MD5**. The total number of inputs to that SHA512 hash function is only as big as the total number of outputs of the hash with the least number of outputs. In other words, let's say for argument's sake you have a hash function with only two possible outputs (which would be ridiculous of course, but bear with me) and do this: $hashedvalue = hash('sha512', shitty_hash($secret_stuff)); You'll only get two possible SHA512 hashes out of that. If people would invent a SHA4096 hash, you're still only going to get two different hashes if you only put in two different values. This is what /u/rydan meant: the input of that SHA512 function ultimately came from an MD5 output. It's a pretty salty MD5, but the SHA512 output in the end will still have as many collisions as MD5, and actually many more, because there's also other hash functions that are called in the mean time, each adding collisions to the last. So apart from being very, very, salted, this hashing function is actually very weak by today's standards.
Best/Most commonly used CLI framework/micro-framework (that isn't tied to another framework)?
Yes I know they're trying to hurt me with their words.
This is a very non-specific question. PHP is probably not the right tool for building an entire search engine, though it could act as the middle layer of a site offering search capabilities. See http://lucene.apache.org/solr/.
So, would you call them *rocksalt*?
I'll respectfully disagree. Especially given that neither calling of a constructor, nor use of the keyword `new` are required for a standard object factory.
You're not wrong I guess. This convoluted MD5 depends on the username as well as the password. I don't know enough about cryptography to say whether a good code breaker could break these hashes easily if they didn't know the code, or how big the effect of the chaining of hash functions would be on the output space of this hash function: if there were a huge number of collisions then a rainbow table attack becomes feasible, but I'm not a cryptographer so I wouldn't know how many collisions there would actually be. Also, the fact that they would look like SHA512 hashes might be a deterrent to an attacker.
Nice refresher. Good job :)
Oh I'm shocked, I totally expected you'll admit being wrong, this being Internet and all. Here's the Wikipedia definition: &gt; In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects [...] rather than by calling a constructor. Transforming arrays has nothing to do with a factory, aside from both are functions/methods.
If you want to make a search engine like Yahoo, specifically, it's three steps: 1. Pay Microsoft for access to their Bing search engine. 2. Call their API in PHP through curl. 3. Put ads around the results in your PHP template. That's how Yahoo made a search engine. If you want to make a search engine like Bing or Google, though, then follow these steps: 1. Acquire funding of at least 20-30 million dollars for personnel and equipment. 2. Hire dozens of PhDs that specialize in big data, preferably try to poach specialists from competing companies. 3. Tell them to write a search engine and wait 2-3 years for them to be done and to crawl the entire web. 4. Call their API in PHP through curl. 5. Put ads around the results in your PHP template. Good luck! 
ElasticSearch is another good option, I use it in tandem with PHP.
Holy shit. Possibly the worst tutorial I've ever laid eyes on.
Post has been updated with a link to the ssh-copy-id method, thank you for the suggestion!
Last time I looked at the FOSCommentBundle (about a year ago) it didn't really support reddit style commenting and I wasn't able to find a good PHP package that did. It's actually a bit complicated to do the nesting and requires a [modified preorder tree](https://www.sitepoint.com/hierarchical-data-database-2/). I implemented something similar to what you described myself for a CodeIgniter site years ago. The link I posted above is a decent walk through with code example in PHP and that's what I used as a guide. If no one else give you a good suggestion you might want to give it a shot yourself. 
Another blog that doesnt really explain what you're doing, just how to do it. And I suspect this is here to generate income from the referral link to DO droplet. &lt;/cynic&gt; 
FYI, ElasticSearch is built on Lucene. ElasticSearch is easier to get up and running with, and has all of this "schema flexibility," but if you are setting about to build a very large index and performance is key, Solr will force you to be disciplined about field data types and other considerations that have a huge impact on the Lucene cache size and overall search speed. Just as an example, at my work, we have just a few millisecond search times in our Solr index of 7,000,000 products, whereas we use ElasticSearch (the so-called ELK stack) for system and manual debug logging and have fought against massive slow-downs due to hundreds of engineers adding random indexed fields. I guess my point is that the underlying technology is the same, it's the API and constraints that vary, and for small- to medium-sized projects ElasticSearch is much easier to get up and running with, but as the index size grows you'll want to keep an eye on schema consistency. A good bellwether for this is the Lucene field index cache sizes.
As dramatic as this algorithm is, I still don't buy that this isn't technically a proper salt - yes, there are flaws and can produce a weak salt in certain instances but: As /u/r_hcaz wrote, both the user name (more important than password) and password are used in the salt. I don't know whether the user name is in actuality an email address or could be something as simple as a single character which could make certain hashes easier to crack than others - but that really isn't the question. While a truly random, fixed length, IV based salt would have been better, a password of "password" would still yield a different SHA512 hash in the end for each user using this algorithm provided each user name is truly dynamic.
&gt; I'm not understanding why using a weaker hashing algorithm on the input creates a weaker output. Wouldn't the attack vector in this case be the input, not the output? I'm not disagreeing with anything in your comment, just to make that clear. So just to explain why the SHA512 output is weakened: let's say I build a site and I hash my passwords with the `hash_password` function in the following snippet. function super_secure_hash_function($input) { if (strlen($input) % 2 == 0) { $hash = "8y89T6^TwUaVbZrHg3#A59Sb5CPNH7JDC&amp;*u@cd4"; } else { $hash = "6ckW2&amp;97F4Z3ZD%R98MXvd^Xcx272fUY*qUZ@45N"; } return $hash; } function hash_password($password) { $hash = super_secure_hash_function($password); return hash('sha512', $hash); } As you can see, trying the passwords "spin81" and "scootstah" is enough to log into any account in my site, even though I'm using SHA512. The SHA512 function isn't the problem. The problem is the fact that I have a huge number of collisions in my own "super secure" hash function.
Not php, but check out Discourse 
Right - so you're saying that your "super secure" hash function is going to create duplicate inputs for sha512. Makes sense! As far as I can tell, though, there is still only a vulnerability if you either know the "super secure" function, or are able to make guesses through the system. If you simply have a database dump of hashes, then it doesn't matter. Obviously though that's reason enough to not do this. :)
Is 7.x following this process? It seems 7.1 has some breaks. Not that I think it's bad to have them, they help improve the language.
The Release Process RFC is only as strong a guarantee as the will to enforce it is. Arguably, some changes may be violating it.
I use frameworks because I want to work on my project not on the fundamental code. Laravel comes out of the box with something I always use: authentication, registration and password resetting. Also CRUD is a cinch. Don't need to reinvent the wheel. 
Ah ha ha
https://i.imgur.com/uP7rxwF.gifv
Thanks, seems like there's no way around to rolling my own. I've done that too myself once, but it was PHP4 years ago. I'm actually quite impressed thet there doesn't seem to be any demand for threaded commenting, despite (or maybe because of?) reddit being so prevalent. Well, thanks for the link, interesting concept using the tree structure! Its strength is the simple query, but the weakness is that on insert of a new comment, the whole tree to the right has to be rewritten since all left/righ ids change. I have some additional ideas at the moment floating around: * Use PostgreSQL JSON data type to store the whole comment tree as a JSON document pro: fast querying for whole tree con: slow write on comment add * Use PostgreSQL's [array types](https://www.postgresql.org/docs/9.5/static/arrays.html) or geometric data types for individual comments, map tree structure to geometric coordinates. (e.g. save a path of parent_ids in the array column) pro: fast query, fast write con: ? That'd be tying me to PostgreSQL, which is acceptable for me since I learned to love it anyways...
You made my day 😂
http://mylittleforum.net/
"Search" history?
Hurts a bit on the inside, doesn't it? I still think of my favorite kids shows as being 10 years ago. It's more like 22 years ago :( Fuck time.
Ok, thanks.. Hmm seems to show collapsed trees only, you have to click on each message individually to read the message. Don't know why anyone would choose to follow a thread in such a way. I'm afraid the code quality is unacceptable: https://github.com/ilosuna/mylittleforum/blob/master/includes/functions.inc.php
Good changes, looking forward to void, iterable and nullable types
I said same implementation, different instances, your example shows different implementations. But even with different implementations, it's sadly so much more verbose than basic PHP... new Bar($this-&gt;getSomeLogger()); It seems we've regressed compared to state of the art from 10 years ago, huh.
Yes, make them both extend the same base class. Read up on oop for a better explanation
include_once('otherfile.php');
His other comments, posts, I guess. He asked how to make a search engine in PHP a few days/hours ago. Probably a kid who doesn't have anything but maybe really basic knowledge of programming.
I also do this often, but use phpbrew to switch between different versions of PHP as needed. I'm starting to get more into virtualization though, but having a local LAMP stack is just so damn convenient.
Youtube monetizes in a number of ways. The most obvious is Video Ads and display ads. This is managed through a service called "DFP" which is a company that Google bought a ways back. Generally an adserver of this magnitude takes a year or two and 3+ developers and some support staff, plus a great deal of domain knowledge. You will have to narrow the question, for it to get a meaningful answer.
After releasing the first version (v0.1.0) of the library I decided to focus on a performance and see how much I can improve there while keeping the code readability on a reasonable level. The result of these experiments was a new v0.2.0 release with a 40% performance boost over the previous version. So, here is a list of my micro (and not only) optimizations: * Backslashed internal functions (https://github.com/rybakit/msgpack.php/pull/8) * Removed string castings to get rid of unnecessary copy-on-write ops on php5 * Replaced `gettype()` with `is_*()` (https://gist.github.com/rybakit/7288dc9ba86e22c260684adde988e2c1) * Replaced post-increments with pre-increments whenever possible * Replaced `unpack()` with `ord()` for int8/uint8/int16/uint16 (https://gist.github.com/rybakit/43a8857c19ea6834ceea77fd383337c3) * Replaced `pack()` with `chr()` (https://gist.github.com/rybakit/ec508858e78f93b86b11959e07998a14) * Sped up utf8 strings detection * Introduced type detection modes * Inlined `BufferUnpack::ensureLength()` Once all optimizations were implemented, I re-ran the `tests/bench.php` benchmark to determine the performance implications: **Before:** Packer BufferUnpacker 16.98ms 9.46ms **After:** Packer BufferUnpacker 10.42ms 6.41ms With the new Packer’s [type detection modes](https://github.com/rybakit/msgpack.php#type-detection-mode) you can gain even more performance speedup, e.g.: disabling utf8/bin type auto detection and forcing the packer to always use utf8 (the way the msgpack extension works now) can drastically improve the packing speed of the large (16- and 32-bit) strings. P.S. Although the native msgpack extension is still 2-4x times faster than the pure php implementation, in some rare cases the pure library outperforms the pecl extension over 18 times: https://gist.github.com/rybakit/59467489f2c424726b9411968b5b3b7a 
Uhhh, that's what auto-wiring containers usually use by default. Either way you can choose to bind an implementation via a factory or singleton. You're complaining about a non issue, or are using shitty containers....
You still don't understand what I'm saying, so tone down on the arrogance and try to understand first. Two differently configured instances of the same log class, go to two different sets of components. Not only would this not be easier with a typical "container", it'd be in fact far more verbose than simply writing the instantiation code "by hand". Also, it'd be slower.
¯\\\_(ツ)_/¯
I was looking at msgpack and its optimizations over json a few days ago. Do you know how this library compares to json libraries?
be able to map a command to a function or class method is pretty much all I would need. something simple, easy to setup without much work.
But you said it yourself, it is possible with rm -rf. So if they wanted to make a built in PHP function that achieves this, they could.
Central dev/testing server, same config as production servers. Every developer has a /home and can mount it via NFS/Samba. Everyone is putting his/her code in /home/$USER/$PROJECT/$BRANCH and can test live immediately on http://$BRANCH.$PROJECT.$USER.server.dev/ using the same test environment. Works well. Plus all the code lives on the server and is backed up automatically, so developers don't have to worry about backups. And everyone have the same development environment, no funny stuff with someone having a weird distro not being able to have the right PHP, mysql, memcached or whatever. This is the easiest for developers and you don't have to use VMs and stuff like that, developers shouldn't have to worry about all of that if they don't want to, they should just have to be able to concentrate on programming and not be bothered with sysadmin stuff (unless they want to, in that case they are welcomed to do whatever they want). On a personal level, for personal projects, I just fire up php -S localhost:8080 if the project is simple or apt-get install apache2-mpm-itk. Most of my projects are run by end-users on hundreds of different configs, from PHP 3 to PHP 7 (think PHP software that people actually download and install on a web host), so you can never really match "production" as every hosting service is different and it would be pointless to even try to test in a VM or else any of the weird stuff hosting providers do.
same here. i have never meet a single programmer who can use photoshop and even less a video editor. Most programmers I know wouldn't even touch a windows pc (me included) because simply the windows environment is too unfamiliar for us (why does 'ls' doesn't work?) asking a programmer for skills in photoshop is a clear indicator that you have no idea what you need. Its like asking a chef for skills at sitting tables.
if someone where to ask me if I can do video editing at an interview i would lost interest inmediately and asume they were purposely hiding information to lure people to the interview. thats a good technique for hiring entry level developers but not skilled programmers like OP wants.
&lt;gordon ramsay voice&gt;Over seasoned, undercooked. Take off your jacket and GET OUT!!!
Maybe aim a little lower on your first project?
I would say Sphinx over ElasticSearch its performance is far better than ES. Only problem is it's not got a low barrier of entry so a little research is needed which I know will put a lot of new comers off but the results speak for them selves.
I think you come across very arrogant and I think it's that which will hold you back rather than your skill-set or experience. We constantly employee people with very little or no education if they can prove they can code, I'd rather have someone who can do rather than someone who has a piece of paper saying they can do it. Here in the UK experience is everything, you will often see people offering mid-level jobs and only asking for 2 years experience and education doesn't hold much weight here when I browse other job listings. Why not just put your CV (resume) out there and apply for some jobs? You're in a great position in that you have a job so if the answer is a no you've lost absolutely nothing yet you've got everything to gain. Its honestly a win win. &gt; their skill-set and makes me just throw up in my fucking mouth A word of advice though, try not to have a opinions like this in the interview or in a probation period, arrogance is the quickest way to isolate yourself from a team.
Why don't you just ask Siteground? Generally, they offer a default version but you can configure your htaccess to use an installed later (or earlier) version. I did this for 5.6 back when they were still 5.4. I think you can even set this up from the control panel.
Also http://runscope.com
excuse me but the OP specifically wanted to build his own search engine in PHP, not just build a crawler around ES /s
Omg I feel you on the windows thing. I tried to help a friend with an issue on her computer and attempted to wade through the garbage that in the command line in windows... I was like welp I am useless here. :/
The post is new, the code example little old 
I think the thought of writing a search engine in PHP was simply out of the question, it can't compete with the C implementations noted in the above answer or even Java based ones like Lucene. I will be honest I didn't know anything about Zend_Search_Lucene but doing a quick google confirmed my suspicions about the performance of a PHP based search engine, I don't think it will be a good fit for a search engine. 
+ for codeception!
&gt; Here's a comparison for the 16-bit string #2 case: I do remember that I only tested that utf8 regex on php7 with the default `pcre.jit` setting (which is "on" by default). I didn't consider that someone may pack 16/32-bit strings without it being enabled ;) &gt; Which gives me 2.9sec with JIT and 5.6 without. This looks like a winner so far?
I worked for a freight company that had been in business since 1923. So, a ton of their core business logic was written in COBOL in the 70s-80s. All of that runs on an IBM mainframe which ran DB2. So most of the new .NET we would write would access that database since it contained like 90% of the data for the entire business. Some newer stuff would use SQL Server if they didn't need to access any of the stuff on the mainframe. My first job was an extreme mix of ultra-legacy and new .NET. :) TLDR: it was chosen before I was born. Some stuff was even still stored on VSAM files - hasn't even been migrated to an actual database yet.
You should also regularly increment the 'cost' option to password_hash() in order to keep up with the ever-increasing power of GPU password hashing. It only costs a couple of bucks to run GPU nodes in the cloud and generate rainbow tables for hashes. If it takes longer to hash your passwords (100+ ms) then it will be less feasible for someone to try and brute force them. 
Bro you should read more. The new thing in web security is using rot26 because it doubles the security ;) http://rot26.org/
Of course, but the point was that it isn't inherently bad when used for something like a nonce other than having a lower keyspace -- the problems with MD5 arise with predictable values.
Fool me once, Zuckerberg..
I've built nested comment systems in PHP before and I've found closure table to give good overall performance. The tricky part is determining which comments to eager load based on votes and depth. Reddits comment loading algorith is a bit sophisticated and nuanced, and relies on strategic use of no-SQL caching for much of its speed.
You can still test both - test the controllers as straight Symfony services, and then use WebTestCase to test the controllers by making an actual request to them.
I don't think that's too harsh. It has come to the point that I am able to guess who the OP is just by reading the title.
I had rolled my own before but you really don't want to do that, you'll have more issues with spam than anything else. I had my own commenting system with a binary tree, which worked fine as I didn't have thousands of comments. Then the spam began, added akismet - still nothing - even adding captchas didn't help at all. And it's not just spam you have to take into account, but also security issues such as cross site scripting - but I think Symfony does help a lot against that. So think twice before you start, I would als never put a whole comment tree in a JSON. To me, that's just asking for problems - specially when you want to add functionality later, such as a search or report button. Imho, the best way to add comments would be to just use a service like [Disqus](https://disqus.com/) and load the comments when they are scrolled into view for performance. It's fast and you don't need to deal with accounts or anything. Just my 2 cents!
[Frisby](http://frisbyjs.com/) / [Frisby2](https://github.com/vlucas/frisby/tree/v2)
The one thing I'm wondering if I can do (because I haven't had much time to play with it) without hooks is defining parameterized urls. For example, if I have ### Get a User [GET /user/{id}] if I can define what {id} is, as part of a config file. I think I may have to resort to hooks for it, but it would be nice not to have to
Try /r/phphelp
Oh there's that? Thanks!
I'm not sure, sorry.
No problem. There are also some irc channels you might be interested in (all listed in this subreddit's description) &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). You may also join us on at #phpmentoring on Freenode IRC for community and mentoring discussions.
Sorry I wasn't so clear Sphinx can be used with the most popular RDBMS (Postgres included), I was referring to the latest NoSql trending DB's, you *can* use other data stores but its messy and probably not worth your time. No, Sphinx creates its own index files (I'm not sure what structure they have or if they use a 3rd party DB) which are placed on the file system it doesn't use MySql for this. Returning large data sets is not an issue for Sphinx in my experience but I've never done it at a scale of 100,000 results so can't comment on that. There will be a point (obviously) where it degrades the speed of the resutls drastically. Sphinx uses an SQL *like* syntax (SphinxQL) to interact with it so pagination is a breeze by setting a limit on the end of the query. I would check the documentation to see if the query language could handle your specific use case but I'm not sure Sphinx is designed for handling and linking objects in that manner, its purely a full text search http://sphinxsearch.com/docs/current.html#sphinxql-reference
Go directly to PHP 7.1, why avoid it ? Just make sure your webhost supports it.
It all matters on how you're going to host it. The only reason to stick with PHP5.x for a new application is lack of environmental support (you have a cheap host that is not upgrading to PHP7, and dont want to roll your own or change).
Having production projects running on it, I do not believe it's too early to adopt PHP 7. If you have the choice, you should definitely use it. Key PHP 7 Advantages: * Performance improvements * Longer supported life (PHP 5.6 leaves full support in just 3 months on Jan 1st 2017!) * Most errors are now exceptions, which makes conditional handling much easier * Strict types, return types and scalar type declarations make for better code * Ability to use new features - some of which help to make your code more secure (new random_int/bytes functions) * Looser reserved word restrictions * Some libraries are now PHP 7 only * Breaks code which should've been updated long ago * Most 5.x code runs without major issues
I'm not a worthless cunt at all, who's judging who here? Do you have any idea how it feels to be underpaid, overworked, and in charge of hiring? Have you ever worked on a solo project for 2 years and watched your coworkers get rich off of it? I sifted through over 200 resumes for a job that explicitly states PHP and SQL are requirements. Out of 200 resumes we got 1 back that had PHP listed under available skills: the other was a .Net architect with a MS in CS and multiple BS degrees who's been in the industry for 15 years and puts XML on his resume. Not WSDL, not XSD standards... XML. Of course I had an opinion, but I didn't judge him. I called him. Know what happened? Guess. He was an arrogant judgmental cunt. He assumed we were "yet another LAMP operation" and said he'd come on as a spreadsheet jockey but wouldn't be doing any development. But you have a cool narrative and a lot of upvotes for a clever off-topic comment, so you're the man. You go, the man. You're cool on reddit.
I have two separate test suites -- one internal (regular Symfony WebTestCases) and one external (Node superagent tests). It duplicates the work somewhat but I find superagent tests easy to read and write. Both repos have Dockerfiles so I just boot up the Symfony app container and run the API testing suite against it.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I am looking for a transportation. What should I buy, a car or a horse?
I recently tried postman, it's great. 
While you're at it, install Certbot and the latest version of Apache, NGINX, etc and get yourself hooked up with HTTP/2. Take advantage of all the speed you can get.
it was mad haxx man, the one time... i did a stealth portscan of the fbi website - i used a php exec command to gain exclusive control of a wide-open port. Not even their firewall knew I was in! Sadly, my mom picked up the phone and dropped the connection:(
Always go with the latest if the host allows it, we've been using 7 since first release and have had no issues with it. You can use 7 and keep it compatible with 5.6, the performance increase alone justifies using PHP7. Eventually if you get comfortable with it and feel it is stable enough for you, you can refactor stuff and start using the new features.
You dont have to use the new features per se, but at least run it on 7, performance alone is reason eanough
and channels https://gobyexample.com/channels
I guess that the employee information is pulled from a DB, while the title is a static string? That would explain this, since it would mean that you are outputting correctly, but the information is not stored correctly in your database. Is the collation utf8mb4? Have you set the charset in your PDO connection? Also have a look at the [corresponding chapter](http://www.phptherightway.com/#php_and_utf8) over at phptherightway. PS: next time use /r/phphelp for this kind of question.
I would definitely go for PHP7, but for PHP7.1 it depends more of the libraries supporting it...
Your employee data is most likely stored in a different charset and is then read as a UTF8 string by PHP which would explaon this error. Honestly, without knowledge of the MySQL collation and all that it's difficult to say what you have to do.
&gt; Do you have any idea how it feels to be underpaid, overworked, and in charge of hiring? Have you ever worked on a solo project for 2 years and watched your coworkers get rich off of it? Welcome to society, kiddo.
Ok, let me try to answer that. We all can only guess. The real answer can only be answered by yourself when you go out to companies, apply for a job telling your salary wish and look at the response. No matter what everyone else says "you are at least 80k worth with that knowhow" if no company is willing to pay that much you're not worth it, end of story. How old are you? Which city/country? Based on your sentences some advices: 1. Don't say "shit" about work being done by your co-worker. That is highly disrespectful, no matter if he is skilled or not. Just don't do that and stop that attitude immediately. 2. Don't judge premature. "Angular 1.0 (dead, yeah)", it's far from dead. Don't talk like you know something for 100% sure but in reality it's only your guess. 3. Don't think you're the best. "Wordpressy shit my co-worker had set up I immediately began applying pressure to overhaul their system and bring everything up to par" So unless you're one of the best developers on the planet I highly doubt you "brought everything up to par", that is pure arrogance and unlikeable. Nobody wants to work with someone who thinks that way. The only people on earth who are allowed to do that are Steve Jobs, Elon Musk and Linus Torvalds. My tips to get a better salary/job: 1. Don't work in a team/company where you're the brightest bulb (not objectively but subjectively). 2. Be nice to everyone, even to people that are not so clever/skilled like you. Respect everyone. 3. Focus. In Germany I guess you'd get a salary around 40-50k/year (ignoring the attitude you showed us).
Have you tried the containers by Aura, Laravel, Symfony, etc?
While retreaving data from the databe use something like "set sql charset utf8" in your sql query, something like that. Then convert your PHP files to utf8. Set UTF8 at your HTML code. In your database, table, column use utf8. Finally send charset header with utf8. Oh, and in your HTML code specify your language, like French.
I generally re-implement authentication as a simple wrapper of https://github.com/psr7-sessions/storageless The logic is really really simple: `public function authenticate(Request $request) : ?User {}`. Trivial to write and test. Since it's JWT (depending on security domain constraints - remember that JWT is "trusted" until expiration) `public function getRoles(Request $request) : UserRoles {}`. Also trivial to write/test. All things that rely on `$_SESSION` are broken in a PSR-7 context, and probably for good reasons, given how limited `ext/session` is.
Meh, it's in RC already. The only reason why I didn't deploy it everywhere yet is the lack of support on Heroku until now.
Postman also has a cli that's pretty nice, especially for scripts which could be used to run some tests. https://github.com/postmanlabs/newman
+1 for being a good sport
You should instead of bashing someone who got downvoted try to contribute something. 
How is PSR-7 and $_SESSION in combination broken?
Looks good. A couple comments: - `zeroStructure` is a static method, you should call it using `static::` even when in object context. - Shouldn't `saveDeferred` be calling `saveDeferred`? - It would cleaner if you would import `Psr\Cache\CacheItemInterface` instead of using the fully qualified class name. - You could refactor the reporting part out of the profiler. i.e. Having a `HtmlReporter` class. - It's missing unit tests ;)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
If you're testing a REST API, there's no particular need to use PHP, since you're presumably hitting the API from outside. The company where I work uses mocha (the APIs themselves are written in Java, but the mocha test client doesn't need to know that), and I happen to like that. Since you're (presumably) coding in PHP generally, it might not be great to have to use multiple languages --or it might, I don't know -- but it's certainly a possibility.
Easiest way to do all that is with Caddy. You get HTTP/2 for free, and letsencrypt automated all in a bundle.
I'm contributing at least as much as you are :)
You have to check the encoding used in the database table as well
Laravel with Phpunit It is able to dispatch them through the internal application kernel. Besides some funky http origin stuff I don't remember a single problem we had in production which was due lack that the API testing isn't done from the "outside".
Validation is also big for me. Using Laravel, not perfect but having a shipping product speaks for it :)
phpunit + i have script which is dumps all json schemas from apiary. So in my tests i have something like: $this-&gt;signedInAs('testuser1@example.com'); $response = $this-&gt;request-&gt;get('/api/v1/products'); $this-&gt;assertResponseStatus(200, $response); $this-&gt;assertResponseMatchesSchema([ 'properties' =&gt; [ 'data' =&gt; 'Product[]' ] ], $response); If somebody interested in, I could try to put my stuff on github. It's not quite stable for now and I looking for new ideas. Earlier I used to use dredd but I didn't like it. I also though that is would be cool to write some kind of middleware between my tests and api, so it will check json schemas of responses/requests to make sure that i;m in sync with documentation. 
I also used such approach few years ago but it has downsides: - It's not readable - it's too verbose - It's breaks DRY p.s. I like to use gherkin for business requirements detalization, not for testing.
A working regex: const UTF8_REGEX = '/\A(?: [\x00-\x7F] # ASCII | [\xC2-\xDF][\x80-\xBF] # non-overlong 2-byte | \xE0[\xA0-\xBF][\x80-\xBF] # excluding overlongs | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2} # straight 3-byte | \xED[\x80-\x9F][\x80-\xBF] # excluding surrogates | \xF0[\x90-\xBF][\x80-\xBF]{2} # planes 1-3 | [\xF1-\xF3][\x80-\xBF]{3} # planes 4-15 | \xF4[\x80-\x8F][\x80-\xBF]{2} # plane 16 )*+\z/x';
I agree! Write more tests and make code adhere to SOLID principles. * Use composer, dependency injection everywhere. * Write unit and function tests. * Start using one of the coding standards more strictly. * Use Git, build system (I prefer Gitlab) so tests and other checks could be ran automatically. * Use some sort of wiki and document there everything. * Write documented code
I just sync everything to my private development server on Linode, because I mostly use PHPStorm for coding and it just nicely syncs each edited file quite quickly to the server. Also, there are other reasons - my local system is Windows, so this environment isn't matching the environment most of my projects has, also, I don't want to install anything locally to keep the system clean, and I am able to give the url to my clients so they can easily access the project for viewing the progress, test it out, etc...
There is a lot more you can do than that, though I thought this was common knowledge? IE: https://twitter.com/ConnorVG/status/614396292958134273 https://twitter.com/ConnorVG/status/720952537713651712 https://github.com/fideloper/larvel
A PHP counter running server side, wtf? [edit] sarcarsm =&gt; PHP can't do client side
For those wondering where those numbers come from: &gt; 500 million Symfony packages downloaded by the PHP community (note that this number refers to downloads made with Composer; the total would be higher if we take into account other downloads through GitHub, the Symfony Standard Edition ZIP files, etc.) &gt; &gt; We've prepared a dashboard at symfony.com/500million that displays the Symfony downloads in **pseudo real time and estimates** the date and time when we'll reach the mythical 500 millionth download. &gt; &gt; http://symfony.com/blog/the-road-to-500-million-symfony-downloads Every now and then, they retrieve statistics for _all_ symfony packages from Packagist (e.g. https://packagist.org/packages/symfony/), and then compare the evolution to estimate the speed. The displayed counter isn't "dynamic" (no websocket, no AJAX) for obvious performance reason (who would want symfony.com to go down, with its documentation, just before reaching the 500 million milestone?). Well that's my guess anyway, I don't have access to more information than you ;) .
I've been using phpunit and having it start its own php server. Then using guzzle to make http requests needed and analysing the returned response.
If all the PECL libraries you rely on are available for 7.1 now, go 7.1. Start investing now.
And people won't look at you weird for talking to your horse. 
why not?
I've been a php dev for a long time now, but I realised that moving to a new, hip technologies comes with many advantages. My experience is: 1. First, they are a lot faster to install and keep up to date. In the last days I've been trying to get Nextcloud (a php project) working on a vagrant machine and it's a lot of work. Compared to that, I got nodejs projects up and running in a fraction of that time. 2. Second, they are coming with a new mindset which is great for development communities. This mindset will push forward new and old technologies alike. 3. Of course, not all is great. New technologies bring back sometimes problems that don't exist in mature technologies. A small example is JS's way of handling date and time. I worked a bit with that date/time in nodejs and it was really bad :( My experience is limited obviously, but I recommend to everyone to play with new, hip and cool technologies and keep an open mind. Cheers! 
So undercooked that a professionally trained veterinarian could bring it back to life.
PHP supports Unicode. Emoji are in Unicode. Therefore, yes, it supports emoji.
@Raiden627 - Pulse now works in Apache or Nginx! https://www.pulsecms.com/blog-98-pulse-cms-with-nginx-on-amazon-ec2-and-fast-benchmarks
Guys, I did the counter, so let me explain some more details. The original source of the information (packagist.org) doesn't provide real-time updates. But they provide total downloads and monthly download stats for each package. We use those stats to get the average daily and per second downloads. Those are the values to simulate this pseudo real time. It's explained here: http://symfony.com/stats/downloads#stats-methodology The source code of the counter offers the entire JavaScript used to make the "realistic interpolation". If you find any errors or if you want to suggest improvement to make it better, please share them. Thanks!
I'd suggest adding a `++` after the first case to make handling of ASCII text faster.
[Done](https://github.com/rybakit/msgpack.php/commit/f18e402407921220f834556b49f7507931c4cf77). Thanks for the valuable comments!
Is your app/form sending the right encoding everywhere? 
PHP's string type is just bytes and so it also supports other character encodings, yes. You can also use CP437 if you like, though its emoticons are in the control characters range, so that might not work so well. &gt; PHP names btw should be utf-8 and aren't officially allowed to contain characters outside of a certain range according to the spec. Ideally, yes. In practice, that's not actually what the PHP interpreter does with source code. It acts like a traditional UNIX program and only assigns particular meaning to the lower 128 characters in a byte, with the top 128 left as undefined generic characters (they can be used in names, but PHP won't try to understand them). This means any 8-bit encoding which is ASCII-compatible can be used. The bytes don't even have to mean anything in any particular encoding. Actually, until PHP 7.1 comes out, you can even use the ASCII “delete” character in identifier names. Also, what I just said is only true when Zend multibyte is turned off, I think. When that's on, I believe PHP source code can also be in UTF-16 (and possibly UTF-32, I can't remember), which isn't ASCII-compatible.
I wasn't sure how Zend PHP actually handled names. Emoji working suggested that maybe it wasn't compliant to the standard, but what you're describing seems pretty far off. I hope we can agree it's best to stick with good ol ascii alphanumeric in practice :) &gt; Also, what I just said is only true when Zend multibyte is turned off, I think. When that's on, I believe PHP source code can also be in UTF-16 (and possibly UTF-32, I can't remember), which isn't ASCII-compatible. I wasn't aware of that, and apparently it's [compliant](https://github.com/php/php-langspec/blob/master/spec/09-lexical-structure.md#scripts). ¯\_(ツ)_/¯
...aargh, my arm!
Yes, you are right. In most places we explain that this refers to Symfony Packages downloaded through Composer (for example in this post: http://symfony.com/blog/the-road-to-500-million-symfony-downloads and this other post: http://symfony.com/blog/symfony-reaches-500-million-downloads). For the counter we didn't want to display "Total Symfony Packages Downloaded with Composer" because it's long and boring. And as we explained, this only refers to Composer downloads. For example, since a long time ago we recommend to install Symfony through the Symfony Installer (https://github.com/symfony/symfony-installer). This installer doesn't add downloads to neither the main framework package nor the individual packages (so the installer alone takes millions of downloads from us). And some popular projects using Symfony (such as Drupal 8) don't use Composer yet ... so there are some other millions of downloads missing.
Does it also count packages downloaded for use with Laravel ?
The documentation page is also a good read: https://hoa-project.net/En/Literature/Hack/Compiler.html There's no link to that from the project... Not sure how you would access it.
Absolutely no idea - like I said, I gave up searching for someone else's code. I'll still be interested to see it though, so I'll take a look. Thanks.
You should have the explode delimiter have a default but then allow for dot notation. 
Yeah, haha, I just changed it to dot notation in my project.
Has anybody tried this and getsentry.com? We use Sentry and I cannot recommend it enough. I was just curious where feature parody was.
Looking at the information schema it looks like it's set to utf8_general_ci. Which confuses the hell out of me more. Why would then explicitly statement my html as UTF-8 does it fix the wonky characters and ruin the database names, if the database collation hints that it's already in the proper character set...
And there's no way to distinguish Symfony pulls from Laravel pulls I guess.
As I said, you need utf8mb4. utf8_general_ci is not the correct collation to use with UTF8 strings (I know, it sounds strange. Read the link I posted earlier, it's explained there). You probably just have to use utf8_encode on the string to make it work properly. Try that.
I'd recommend you take an array by default, and then add this line: if (is_string($path)) $path = explode('-&gt;', $path); This way you provide a more canonical and robust interface that's easier to build programmatically (array is easier to build than strings with delimiters) and you could find even properties that contain the characters "-&gt;". And you still have the string version for convenient ad-hoc inlining of path literals in code (when the path is not built dynamically).
Great addition, thanks.
Yeah if I manage to convert it when it's called, it's more of a patch than a solution, so the entire framework of encoding will probably need to go through a revision. Thanks for the tips I should be able to pick it up from here!
Ahh... That makes sense. I'll allow it ;)
It doesn't pretend, it just visualizes estimated download velocity based on real data. 
I think the nicer solution to your problem is avoiding these chained calls. [The Wikipedia-page for Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter) explains advantages of avoiding them quite well.
&gt; The fundamental notion is that a given object should assume as little as possible about the structure or properties of anything else (including its subcomponents), in accordance with the principle of "information hiding". Thanks for the suggestion. My use case currently is two sites talking to each other via JSON api - and yes, the structure is currently quite rigid. You got me thinking though how it could be more adaptive instead.
I had a very similar question a while back. It was to get a value rather than checking for existence. [This](http://stackoverflow.com/a/36394832/1686932) was the answer.
It does not matter when you run it, by encoding the string in UTF8 it is a UTF8 string. Can you maybe send me an example of a wrongly output string (just copy the text to here)? Then I can have a look myself.
Is it considered good practice allowing parameters to be of different types? It's the only way as PHP doesn't have overloading (yet), but it makes the code very messy.
Am�lie Before I force the UTF8 it displays Amélie This is a name that comes from the DB which if I leave it as is without enforcing UTF8 in the meta of the php, then the subtitle of the report becomes employÃ©e when it should be employée 
Whether it makes code messy is somewhat subjective. You can easily document a type union in PHPDoc like so: @param string|array $path And it's possible that type unions and intersections will come to PHP before overloading (Java style) does, because it makes more sense for PHP's type system. Case in point, PHP 7.1 allows type unions in a catch() block. It comes down to design. In my opinion, people shouldn't go crazy with overloading, and it should especially be avoided in cases where it can cause ambiguous intent, or make it easy to trigger the wrong code path by accident. With restraint, however, it makes an API more expressive and succinct. In general I allow this when the same parameter can be specified through different types non-ambiguously. And another case where overloading is non-ambiguous is when the parameter number for each implied overload is different, for example: $query-&gt;where(['foo' =&gt; 123]); // 1 parameter $query-&gt;where('foo', 123); // 2 parameters $query-&gt;where('foo', '&gt;', 123); // 3 parameters 
For the record, here are my [benchmark results](https://gist.github.com/rybakit/717018d5f3292ef28fd9de6210f687aa): $ php -d pcre.jit=1 tests/bench_utf8_regex.php empty_loop 0.004 utf8 14.833 14.829 non_utf8 14.713 14.709 $ php -d pcre.jit=0 tests/bench_utf8_regex.php empty_loop 0.004 utf8 81.329 81.325 ^C 
 function getSQLRes($qry) { $mysqli = new mysqli($GLOBALS['DATABASEPATH'],$GLOBALS['DATABASELOGIN'],$GLOBALS['DATABASEPASSWORD'],$GLOBALS['DATABASENAME']); //mysqli_set_charset($mysqli,"utf8"); //This was commented out as apparently it gave issue where it would never convert properly, and the file was originally ansi, but has been changed to UTF-8 and it doesn't really change anything // How are you doing, dear connection? if ($mysqli-&gt;connect_errno) { // Bad throw new Exception(mysqli_error($mysqli)); } // Good if (!$res = $mysqli-&gt;query($qry)) { // Query failed throw new Exception(mysqli_error($mysqli)); } return $res; } It's generic and calling an included php file variables so didn't need to censor much, but I doubt this is of much assistance if this is what you were asking for. 
That's not the correct `preg_split` signature :c
Theoretically that should be exactly what I need. Strange that it doesn't work. Please test what `mysqli_character_set_name` outputs (with your connection as a parameter). Btw, if you want I can also tell you some things I'd do differently in regards to your code, but of course only if you want.
PHP cache slam defense using a semaphore to prevent dogpile effect (aka clobbering updates, stampending herd or Slashdot effect). More at Github readme. Pretty stable and mature by now. Also happy to hear about alternative ways or potential/real issues.
The output is giving me latin1latin1 I don't know why it doubled the output but yeah I think this is an indiciation of why converting to UTF is messing it up. Perhaps I have to pre-convert it to another encoding before bumping it to UTF8? Also feel free to give tips on the makeup of the code, this was someone elses work but i'm going to be taking over his position as he leaves, so as green as I am with PHP and family, i'm open to some code optimization
Try `echo`ing a constant string so you know wether the connection itself is faulty or something is wrong regarding your parameters.
 echo "&lt;table class=\"maintable\" border=\"0\" cellspacing=\"1\" cellpadding=\"0\" width=\"100%\"&gt;"; echo "&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th align=\"right\"&gt;$sell_caption&lt;/th&gt;&lt;/tr&gt;"; if ($res-&gt;num_rows &gt; 0) { while ($row = $res-&gt;fetch_array(MYSQLI_NUM)) { //$total += round($row[0],2); // No rounding anymore, when using split rep we apply the percentage, therefore it is not correct to round it before the end. decimals matter $total += $row[0]; // "&lt;tr&gt;&lt;td&gt;".Class."&lt;/td&gt;&lt;td class=\"val\"&gt;".Units."&lt;/td&gt;&lt;td class=\"val\"&gt;".Sell $."&amp;nbsp;$&lt;/td&gt;&lt;/tr&gt;"; echo "&lt;tr&gt;&lt;td class=\"name\"&gt;" . languageCase(utf8_encode($row[1]) . ' ' . utf8_encode($row[2]), true) . "&lt;/td&gt;&lt;td class=\"val\"&gt;" . format_currency(round($row[0], 2)) . "&lt;/td&gt;&lt;/tr&gt;"; } } // Total echo "&lt;tr&gt;&lt;td class=\"group1\"&gt;TOTAL&lt;/td&gt;&lt;td class=\"total\"&gt;" . format_currency(round($total, 2)) . "&lt;/td&gt;"; echo "&lt;/table&gt;"; This is the loop that runs from a different PHP file that the one where the mysqli function exists. When it runs with the UTF8encode line, what it does is this ----&gt; Am��lie Chapleau. So basically it adds again an unknown character rather than correct it from source. So I don't know if i'm catching it too late for the conversion or something along those lines...
I'll try to word my questions better next time so Google will make your life easier in the future. I would've happily settled for the `isset()` variation tho. That's awesome and I did not know that.
&gt; var rowid = $(e.relatedTarget).attr('data-id'); Was exactly what I needed to change, it's working perfectly now, thank you. I'm sorry I posted it here, I'm extremely new to programming and I'm really trying my hardest to continue to learn, and how to properly ask questions. I'm still not familiar with the terminology, but I hope to continue to get better. Thanks again for all the help everyone
&gt; Interestingly enough the example you give is exactly the type of thing I would rather avoid. (Not judging, just sharing opinions.) The reason is, at the start of that function there's a good amount of checking and normalizing you'll have to do. If I'd have to implement this function that accepts those 3 possibilities, it would look something like this This is how I'd approach it: public function where(...$args) { switch (count($args)) { case 0: throw new Exception('At least one argument expected.'); case 1: if (!is_array($args[0])) throw new Exception('Array expected for a single argument where() call.'); foreach ($args[0] as $key =&gt; $val) $this-&gt;whereInternal($key, '=', $val); break; case 2: $this-&gt;whereInternal($args[0], '=', $args[1]); break; case 3: default: $this-&gt;whereInternal($args[0], $args[1], $args[2]); break; } } I wouldn't use nulls, as that can be ambiguous: where('foo', null); // Where foo is null? Admittedly I wouldn't do this all over the place, but in APIs that are used excessively and not once in a blue moon, it's sometimes worth it to go the extra mile in designing a compact way of expressing the user's intent. Such APIs almost become a part of the language syntax for users. Think jQuery. I could've easily had three methods, instead: $query-&gt;whereArrayEq($array); $query-&gt;whereEq($field, $value); $query-&gt;where($field, $op, $value); If the API was part of something you'd call rarely, that'd be more clear, and easier to document. But if this is one of the cornerstones of an application framework, say the main way you interact with the database, then once you learn the three overloads, those name suffixes become nothing but noise to you every time you type or read them, as a user. So if the suffixes aren't there to help the user, then they're only there to help me, the library maker. And I should think about the user before I think about me.
I'm looking for feedback from the reddit community on this RFC. In particular do you think we should leave multi-statement bodies in Future Scope or include them as a voting option that needs 50%+1?
I have no idea about doing it in reverse. Is there any reason you can't just change the collation in the database? (with a backup, of course)
Coming from JS land it does seem weird that we wouldn't be able to use multiple statements. However in the interest of getting this landed, I would rather leave it out for now as I think there would be a higher chance of getting it in later when people start to use the new syntax.
For purely political reasons, multi-statement might be left for later, but honestly it would have to land at some point. I'd also miss the opportunities of using arrow functions as block statements for custom loop/conditional statements: $even = []; array_walk($numbers, val =&gt; { if (val % 2 == 0) $even[] = $val; }); This type of usage would require not just multi-statements, but also capture by reference, which, if we capture by value, won't ever come in a future RFC. This particular example could also be refactored to use array_map(), but that's only because it's very simple. Anything with multiple outputs or more complex logic wouldn't work with a "pure" array_map()-like approach. BTW, why wouldn't we be able to specify argument and return type? TypeScript seems to support this if the argument list is wrapped in parens, i.e.: foo =&gt; foo * foo; // Valid, no types. foo: number: number =&gt; foo * foo; // Not valid. (foo: number): number =&gt; foo * foo; // Valid, with types. Can't we support this? (float $foo): float =&gt; $foo * $foo; 
Wow! I like it! Pretty neat! Like using those in js! p.s. you made a typo https://monosnap.com/file/gTdkqEHAfNfnuTsBqIYPNUlQcMPUj9
Thanks! I've fixed the type in the latest draft.
I've not thoroughly tested it, but I think the following is really all you need. echo date('Y-m-d', strtotime('monday')); [Here's the documentation](http://php.net/manual/en/datetime.formats.relative.php) on relative dates in the strtotime() function. Importantly, "when the current day-of-week is the same as the day-of-week used in the date/time string...'dayname' does not advance to another day." (Edited for docs)
To determine if today is Monday or not, you'll want to use this: $isMonday = date('N') === 1; [As per the date formats](http://php.net/manual/en/function.date.php). A format value of `'N'` returns `1` if the day is Monday. If it is Monday, you can use the same date formatters and function to display the date in whatever format you need: $todaysDate = date('M j Y'); // for example. Timestamp param is optional as it will default to the current time. If it is not currently Monday, then you can use `strtotime()` like so: $nextMondaysDate = date('M j y', strtotime('next monday')); So putting it all together (with a little refactoring): $timestamp = (date('N') === 1) ? time() : strtotime('next monday'); $date = date('M j y', $timestamp);
And if I had picked by-reference someone would have likely said the same.
+1 for multi-statement bodies
Hosting your own mailing list is really a complex task, you risk having a lot of mails going directly to the Spam folder of your recipients. See http://www.list.org/
&gt; The sequence ~&gt; is donezo. ??? &gt; I'd rather align with JavaScript and C# than Hack JS &amp; C# don't use =&gt; for defining arrays, so there is no ambiguity there. PHP doesn't align with a lot of languages...
* Syntactically the code looks like it is in the parent scope, so it should ideally behave re variables as if it is. Having a variable in an expression bind long before the expression is executed just doesn't make much sense. * It's the status quo. [Most languages do by ref binding; those that don't often have immutable variables to begin with so it's moot.](https://en.wikipedia.org/wiki/Closure_(computer_programming\)#Lexical_environment)
I actually did an analysis of reference, variable and value binding. It's not as clear of a shot as you might think. I still have a TODO item in the RFC since I'm not sure how much of it I should share.
Whatever makes this most likely to pass. I definitely would *love* multi-statements, but if that would make this proposal less likely to pass I would rather wait to add them. Also, thanks so much for doing this. Seriously my most wanted feature in PHP.
Can you try to put into words specifically why you would *love* multi-statement bodies for arrow functions?
Yeah..I often don't use the `array_*` functions just because they look so nasty. `foreaching` actually looks cleaner.
Hmm, are you familiar with Sendmail, Postfix, Qmail, Exim, or any other MTA? If not, then you probably don't want to host your own mail server...
&gt; Is `(Foo &amp; $x)` a prefix to an arrow function or taking the constant Foo and doing a bitwise-and with $x? Clearly it's doing a bitwise-and (there is no arrow function!) Is there *really* any ambiguity in (Foo &amp; $x) =&gt; $x-&gt;bar(); ? You aren't allowed to put *expressions* in a function signature, so wouldn't that unambiguously resolve to a type definition? The only problem here is that you have do a lookahead to know it's a lambda function before you can resolve the signature, but you have to do that anyway for normal parameters, no?
I don't think so... Then field "id" in the response should be an int And field "title" in the response should be "Example Product" And field "description" in the response should be "Example Product Description" And field "sizes" in the response should be an array of ints And field... I will prefer something like Then new product should appear in catalog With step definition /** * @Then new product should appear in catalog */ public function newProductShouldAppearInCatalog() { $this-&gt;assertJsonSchema('product_details.json', $this-&gt;lastResponse); } Or even check it on the "When I submit new product in catalog" step right after response.
It's not a language ambiguity, it's a parser ambiguity. PHP's grammar is currently LALR(1) and we really would like to keep it that way.
`=&gt;` is the most common way to define lambda expression is most of the language. I think that stuff like `~&gt;` will produce a lot more confusion.
This would be amazing.
I'll save the terseness for comments, thanks.
Having spent a lot of time in Swift recently, I find them pretty convenient when you're doing anything other than super-basic `map`/`reduce`/`filter` operations. Which, admittedly, is probably &lt;10% of the time, but having a syntactically-consistent way to do it is very nice. In the context of arrow functions being syntactic shorthand for a closure, to me it doesn't make sense that it *wouldn't* be supported. Then again, I also feel that no brackets at all for the single-statement body is a mistake, which is probably a somewhat unpopular opinion (partially due to what's described in the ambiguity section, partially for consistency, mostly because I feel it's the best balance between concise and explicit)
larajobs.com
Yes. The more interesting case is if the reference is broken outside the closure, e.g. due to a by-reference foreach loop. It's somewhat ironic in that a by-value foreach loop would behave as if the binding were by-variable, while a by-reference loop would behave as if the binding were by-value.
 $total = 0; $categoryTree-&gt;walk($cat =&gt; $total += $cat-&gt;countItems()); echo $total; or // some code $profiler-&gt;profile(() =&gt; { // some more code }); // even more code or // some code $db-&gt;transactional(() =&gt; { // some more code }); // even more code or // some code $this-&gt;expectException(SomeException::class, () =&gt; { // some more code }); In all of these cases you'd want by variable semantics.
&gt; In all of these cases you'd want by variable semantics. by value. I don't usually write code that relies on side effects in outer scopes. I condier it the code smell (but yes it can't be avoided sometime). 1. I don't really know what `walk` is doing (probably recursively diggin the tree?) What I would do is ask only root nodes to count it's items and them will ask their siblings and so on. Or some kind of recursive `array_reduce`. This will make your function expressions to be pure functions. 2. Why content of a closure should has access to any scalar variables outside of the current scope by reference? I think that objects will be available by references since there is no way to make it pass by value in php. 3. The same as for 2. 4. The same as for 2.
Ruby and Swift both allow changes to be visible outside of the closure; my StackOverflow post is wrong. These languages have a variety of ways to define closures (each has approximately 4 ways if I remember correctly) and some of the explanations I read got it wrong. The vast majority of usages of closures do not seem to actually modify the closed variables. My guess is that people have been bitten by unexpected modifications and avoid writing the code such that it mutates the closed variables. I think this is a good thing overall but it made for some mistakes when researching.
Seconded. I would just add some `find | grep` to my Makefile and `make todo`, except I'm using PhpStorm :)
I had to google pretty hard to find those myself, I only know a bit of Ruby and absolutely no Swift. Doesn't help that all the terminology is so overloaded...
Agreed. Though I think it would be okay if brackets/braces were mandatory. [($x) =&gt; {$x*2}] // an array with one closure // versus: [$x =&gt; $x*2]
Yes, you can have very complex dependencies but not across suites nor different setups. This doesn't make sense. If you execute 1 test suite it should not trigger another test suite just to check if a test you depend on is passing. Nevertheless inside one suite you can specify dependency with classname:testname just as you do here
 fgrep -R FIXME src/ This is real quick, with just a command.
Is there a performance reason for keeping it LALR(1)? Not that it matters with opcache and the inevitable JIT that will come at some point.
What is going on. This reads exactly like an advert
Boy can you answer a simple question without talking about middleware? I have not a remote idea what you are talking about, not regarding my question.
&gt; Certainly there must be some forward thinking companies that want to use PHP with modern practices, prefer the use of PHP7, etc. Where are they? He he. No. No one in their sane minds will use Php (what ever brand new version of it) in 2016. Learn a better language if you want to stay relevant. And No, Php won't be like the next Cobol where you can get a huge salary for maintaining legacy code. So don't put all your eggs in that basket either.
Yeah, the `...$args`approach is easier to check. And a lot cleaner (Tho would need more docs). CI has a very similar [Query builder](https://www.codeigniter.com/userguide3/database/query_builder.html#looking-for-specific-data) to this and it confused the hell out of me at first. Especially because all cases are used throughout the code. They have the extra confusing thing of allowing the operator to be at the end of the first condition `$query-&gt;where("name =", $name);`. Anyway, great example, thanks!
Agreed on all points. I'd love this to pass, ideally with multi-statements, but I can wait for them.
It's new, but it's pretty common in other languages. I'm happy to see PHP keep with the times. The current ways will still work for those that want to use them.
You get more precise and detailed answers with more precise and detailed questions :-) In a PSR-7 app, you take a request, then pass it down to the app, which usually doesn't care about the environment (besides config), and just processes the request, then spits out a response. "Middleware pipeline" is just one common way to build apps around the PSR-7 spec, but you are not forced into it, so I will avoid using "Middleware" from now on. What I just described is what PHP generally does with `&lt;?php echo 'hello world';` for you, via the [FPM SAPI](https://github.com/php/php-src/tree/2083007813e20c4be1d9e4e30e5fd47018f24142/sapi/fpm) (or whatever other SAPI you use, apache2, custom, you name it). This has many advantages that make PHP very powerful when compared to, for example, Java, when running apps, because we have a "shared nothing" architecture, where the entire environment, including all superglobals, are garbage-collected at each request. Still, this means that we rely on some globals injected by the SAPI (`$_SERVER`, `$_ENV`, `$_POST`, `$_GET`, etc.), and every layer in your app now relies on those, and may write to those, causing a big mess ( http://c2.com/cgi/wiki?GlobalVariablesAreBad ). `Symfony\HttpFoundation` was an attempt (not sure if first, but certainly a "famous" one), to isolate that "globalness" into more manageable local state. After many iterations and many frameworks implementing a similar approach, we got to PSR-7 in order to make communication a bit easier across different libraries. That's step 1 of containing global state. Let's get at where it really hurts to have a global `$_SESSION` In traditional SAPIs, the entire bootstrap/tear-down cycle is wasteful from a performance perspective. We have OpCache and similar tools to speed things up, and we limit the negativity of global variables, but performance is still visibly bad. Much, much slower apps than what is achieved in nodejs, tomcat, jboss, etc. In order to speed up things, we are moving the responsibility of bootstrapping/tearing-down the environment into the application itself (written in PHP), and reduce the latency by using something like an event loop, or a threaded solution (https://github.com/amphp/aerys, http://appserver.io/, https://github.com/reactphp/http, https://github.com/PHPFastCGI/FastCGIDaemon). This way, we can keep some components "hot", without the need to re-build them at every app dispatch cycle. We can then let our apps live forever (ideally), and kill them just when there are issues (memory, performance, stuck somewhere). Indeed, we are introducing a series of problems, of course, but for a much greater performance. In those scenarios, relying on super-globals is even more dangerous due to concurrency and memory issues, so we encapsulate environment data in a `ServerRequestInterface` instance (PSR-7), and then pass around that object. Once that object is garbage-collected, we're done, so we solved that part of the problem. The same applies to sessions - a session is just some sort of user-agent-specific environment to be packed/unpacked by recognizing the user-agent from the request. Therefore, we unpack the "session" into a "session object" that is just retrieved through the request, which in pseudo-code is: `function getSession(ServerRequestInterface $request) : ?Session`. That's pretty much it from my PoV. If you strive for having manageable "request scope", but then don't care for `$_SESSION`, I can basically say that you probably don't care about having "request scope" either. We strive for isolating this "request scope" to fix global variable issues, and same should be for `$_SESSION`. Writing to globals is pretty much an absolute no-no for me, personally. To recap: * loads of work was done to read and isolate global state * standardization came up * libraries relying on isolated state (Request/Response objects) should still strive for not relying on global variables * long-running processes massively amplify the issues of global variables * libraries relying on isolated state should "just work" in the context of long running processes That's why `$_SESSION` just needs to die. Hope that clarifies it, without the need for the "Middleware" :-)
It's already mentioned in the RFC: it's an array key of `$var` with a value of `$n + 1`. If it was anything else it would be a BC break.
Not impossible: you just use the long-form.
I think you are looking for [Sendy](https://sendy.co). It uses SES but affordable, runs on PHP, etc. 
Given you have a `walk` method this presumably this means the object is `Traversable` too; instead use a `reduce` function that works with that. $total = iterable\reduce(0, ($a, $b) =&gt; $a + $b, $categoryTree); (Also, it still annoys me we don't have operator functions in the standard library somewhere)
You are going to get downvoted to hell but you are 100% correct. Almost everywhere I've consulted and worked for will not touch PHP (and for good reason). Python will land you many more jobs.
http://www.jobs.net/jobs/nabancard/en-us/job/United-States/Software-Engineer/J3G2BP6MDJDWV1LW0BR/ &gt; Salary Grade: 30I Haha, the job's even got a specific *salary grade*. This certainly looks like the kind of forward-thinking organization our OP seeks.
This package also uses `grep` command for a better performance. The advantage over PHPStorm is that you can use it in any environment without a GUI, say your development or staging server. Also, you don't have to customize the keys to match like you do in PHPStorm. Finally, it outputs the results file by file, in 3 formats: tabular, list, and JSON which can be used with your issue tracking system. Using grep is easy when you know what to look for. Suppose you want to find all the occurrences matching the pattern. It is not very convenient to specify a long regex pattern any time you want to track your todo comments. In addition, you can target a certain file type, again without a regular expression or wildcards in your grep command.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Riddle me this... You are subscribed to a PHP subreddit, yet you claim nobody uses it anymore. Not trying to create an echo chamber, but, why are you here?
Look for Laravel shops. It's a very modern, solid framework.
This package also uses grep. For finding all the keywords (todo, enhancement, bottleneck, FIXME, Fixme, fix-me, etc) in only PHP files, I write this: ``` vendor/bin/fixit scan --ext php src/ ``` Now, write the equivalent with grep. Some advantages: 1- It renders the results in 3 formats: table, lists, and JSON, which can be used with your issue tracking system. 2 - You don't have to specify the keyword (To do this in `grep`, you have do define a long regular expression anytime you wanna track the todo comments). Just imagine you need to match countless space characters. How many `[[:space:]]` or `[[:alpha:]]` will you have to use? 3 - It gives an overview of how many files scanned, how many files contain the pattern and how many matches found. 4 - You can define a certain file type to search, again without writing a regular expression. That's what I meant by real quick.
Variable binding is something I think would need to be there since the beginning since there are so many subtle things we could break by putting it in after the fact.
Right. IMO, JS gets away with arrow functions because it doesn't already have array operators/=&gt; in its syntax. and In rust, the last line of a function (with no semicolon) is returned - which could be adopted for PHP arrow functions only (since php has no arrow functions yet, no BC issue here right?). Anyway, I'm usually wrong.
I'm not sure if I can get the parser to accept both of these anyway: ($x) =&gt; { $x + 2 } ($x) =&gt; { $x + 2; } It seems like it might be possible while keeping LALR(1), but I'm not certain of it.
Please read my comment below.
2, 3 &amp; 4 can be easily done with grep done, use an alias if you don't wan to type it all every time. For tables and JSON I don't really care, but probably doable easily in CLI too.
I bought your book earlier today sir, thank you for it
But wouldn't :&lt;string&gt; always resolve to a type? There shouldn't be ambiguity for that, right?
Where are you? I'm in France and I can confirm there are many new projects and startup using PHP here. edit: Symfony and PHP 7 are very common
Same in Spain, altough most of them are digital agencies so they are looking mostly for "full stack" (php + frontend + server management). And it's a good place for the weather, but low salaries and old tools (e.g. I haven't seen an offer for a Symfony developer yet, and forget about Php7). Startups tend to go Python tough.
Yes I would consider HTML Purifier the best option. Its mature and battle tested, and also very customisable.
Aside of HTML purifier, there's also htmLawed http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/ which is my favorite, I discourage you from looking at the source code but its efficiency is terrifying :)
Northern England here, loads of employers looking for PHP devs. We rewrote our entire E-Commerce site (40-50,000 visits a day) in PHP7 recently, with Laravel 5.2 as the framework.
This. Also if you are doing something long like $this-&gt;someObject-&gt;someMethodThatNeedsCallable(/* ... */) inside an if statement which is inside a class, typing words `function` and `use` makes you run out of PSR's character limit and the whole `function ...` needs to be placed on next line makes stuff look way less nice (I'm thinking about CakePHP's [transactional](http://book.cakephp.org/3.0/en/orm/database-basics.html#Cake\Database\Connection::transactional) which in controllers results to `$success = $this-&gt;PollVotes-&gt;connection()-&gt;transactional(function () use ($votes, $id) {` which is already past 80-char soft-limit (88). Add 8 spaces for method indentation and 4 for an if statement and you are pretty close to hard limit). Now with multi-line statements the above example would look like `$success = $this-&gt;PollVotes-&gt;connection()-&gt;transactional(() =&gt; {` - 4 characters instead of 29 (!!!)
How do you handle your own reusable packages in different projects? I'm disgustingly guilty of copy pasting things like my date class and query builder to every project, which means I probably have 5 different versions of each now... Without making it a proper composer package (available for everyone), how to reuse your own code in a package like manner? 
Yes.
You couldn't even implement it in php, or it would be horribly inefficient: $f = $x =&gt; $x + $$var; $var = "foo"; $foo = 3; You'd have to keep all the parent scopes alive in order to resolve `$$var` in the closure *at runtime*.
Yeah, I get plenty of job offers from the Copenhagen area as well. For some reason recruiters also like reaching out for positions in London as well. The offers in Copenhagen is both in startups, older companies and agencies.
It's the tradeoff to not end up with subtle bugs in your code like foreach ($foo as $bar) { register_callback($x =&gt; $bar + $x); } Where you'd really want by-value. Because manual scoping is ugly: foreach ($foo as $bar) { register_callback(($bar =&gt; $x =&gt; $bar + $x)($bar)); } That's not to say by-ref has no benefits, but it has its disadvantages too.
Performance does come into in that LALR(1) is a linear-time algorithm, while GLR is, in the implementation used by bison, a worst-case exponential-time algorithm. For this particular case the time-complexity would likely be still linear (because parameter lists do not admit nesting), but the constant factor could be quite high because this would affect all parenthesized expressions, which are fairly common. But as Levi says, the main motivation here is tooling. LALR(1) is pretty much the common ground of what everyone can easily support. I certainly would have to jump through some hoops to get arrow functions with type declarations (and default values) working in PHP-Parser (as I don't think that kmyacc has GLR, so I'd have to do this using a lexer hack instead.)
I know how reducing works but I never got the hang of it tbh. To me this is really hard to read. My point is just that some operations are easier to write/read with a parent scope helper var. It's kinda moot since we established only value binding works for php anyway.
Loop variables without block scope are a caveat in javascript, but in practice I very rarely encounter it. The nicest solution would be block scoping, not just for elimininating this issue.
&gt; I'm just asking is it as quick as: Sorry, but it's just quicker than installing your package, figuring out how that works, then using that. I have a general purpose tool for searching files that I already know. I don't need a specific solution for a specific problem.
Thanks for the comment. However, this is not exactly what I expect when collecting To-do comments, because first of all it might return unwanted words, suppose I have a keyword named `todo` in `todo-markers-list.txt` and I also have a variable in my code named `$toDocument`; The command also returns this line, which I don't want. If you run this on a large code base you'll be surprised by the result. It also returns the whole line plus unwanted extra lines (Suppose a comment is in the same line as a PHP line) Additionally, it returns all the spaces before and after the keyword and between the keyword and its description. Finally, you don't know which file contain those comments. My goal was to capture all the comments no matter how and where they are written, in a way that can be processed by another application; With just a few words. Thanks for the thoughtful comment :)
"Local logging tests it seems to parse correctly. However, I cannot get this to work online." makes it sound like the host can't be reached. Or maybe the DB connection is failing, if you haven't checked that part with local tests. How are you sending it the data? What do you mean by "shouting?" I'm confused about why GoDaddy would ban you for posting some json data. Anyway, to debug, add *var_dump($gjson);* before your if statement, then make a request with curl using the public address. If curl can't connect, then that's the problem. If it can, make sure the data is being parsed correctly. If the data looks correct, increase the [error reporting level](http://php.net/manual/en/function.error-reporting.php) and check your logs for DB errors. A successful check should go something like this: curl -v http://blah.com/thing.php -d '{"type":"pokemon","message":{"encounter_id":"123","spawnpoint_id":"9090","pokemon_id":"555","latitude":"1.2","longitude":"3.4","disappear_time":"8"}}' object(stdClass)#1 (2) { ["type"]=&gt; string(7) "pokemon" ["message"]=&gt; object(stdClass)#2 (6) { ["encounter_id"]=&gt; string(3) "123" ["spawnpoint_id"]=&gt; string(4) "9090" ["pokemon_id"]=&gt; string(3) "555" ["latitude"]=&gt; string(3) "1.2" ["longitude"]=&gt; string(3) "3.4" ["disappear_time"]=&gt; string(1) "8" } } Also if you indent your code reddit will format it and make it easier to read.
Your first example starts to become very different when you need to throw in a `use` for outer scope variables (which is what makes FP in PHP a goose chase IMO). If the fat arrow syntax provides implicit closure over outer scope variables, that alone makes them worth it (far more than the removal of the `function` keyword)
Would it kill you to use a different token than =&gt;? There's a whole section of this RFC dedicated to disambiguation that would be totally unnecessary if, for this new language feature, you used a new token. How about =(), or &gt;&gt; or something...?
Are you talking of the DAL library in question or the demo code by the link?
Is singleParam =&gt; expr really worth the ambiguity it creates with [$x =&gt; $y]? I realize (singleParam) =&gt; expr also collides with valid array syntax [($x) =&gt; $y], but there's no legitimate reason to declare an array like that.
You can setup your own private composer repository, I use [terramar-labs/packages](https://github.com/terramar-labs/packages) but there are a few more variants out there. You can connect it to your private Github or Gitlab repositories.
Even in the case of using Markdown, I'd still pass it through HTML purifier just to be _extra sure_. Does no harm if everything is alright and will save your ass if something isn't.
Well, you can strip out scripts and such with such a tool to preview it safely, sure. Thing is, it might not be a very good preview, as it might look better than what users would see in their email clients. HTML email support is notoriously uneven and much worse than HTML on the web. Ideally, you would use something that strips away everything that, say, Outlook and Gmail do not support. I don't know if such a tool exists, however.
&lt;TROLL-MODE-I-DON-T-CARE&gt; Isn't this homophobic in a way ? &lt;/TROLL-MODE-I-DON-T-CARE&gt; So many stupid and funny things to do with this, tho
The code by the link is just a demo. While the code from the DAL library is prone to the same kind of injection, even despite no direct relation between the POST and the query. The reason is fairly simple though: it is not that obvious as you think. Feeding an array-style where/create/update information IS a huge security problem as you can see.
Rambling nonsense of course. I got into a discussion with a friend of a friend who is a node developer, he said that PHP was obsolete, old, and trash. When we started talking about features, stability, updates, architecture, etc. he came to the realization that his PHP knowledge stayed in the PHP4 era...and he finally had to admit that both PHP5.6 and PHP7 are amazing, specially PHP7, as long as you use them correctly, of course.
Yeah :) I found this already that i was going to use as a starter - https://quip.com/aO0pAZO9m9SG I think with htmlpurifier itll be quite simple. But yeah reliable previewing of emails isn't an easy thing to do ... maybe i'll use an api for a service like https://litmus.com/email-testing ...
Or even, bear with me here... Markdown -&gt; HTMLPurifier I know, I know. It's such a crazy notion. :\^)
No, **feeding column names from user input** is a security problem and a really obvious one. It's just as bad as feeding unfiltered user input as arguments/data and you'd never do that, would you? Not feeding column names or feeding them based on a strict filter is pretty safe. The whole injection the blog-person is talking about revolves around unfiltered column names in user input.
Whatever you end up using make sure it uses a whitelist of tags and attributes, and not a blacklist. It's the most basic principle of security.
Well, wording and naming has more or less importance for some people, depending on who you talk to haha. As for my part, I think it's really important to have consistent naming across all your modules and projects so that people working with your stuff know where everything is located directly. I explained these a little more detailed, as the other problems simply are just so obvious that they don't need extensive explanations and just stating `Name this like that and this` can always be pure nitpicking or subjective opinions. I tried to give valid reasons on why the naming should be consistent and what exactly is wrong with it :) I gave alternatives for Singletons: **Not using one**. Writing a singleton, you always have the choice to simply _not_ make it a singleton and let the class be able to be instanciated everywhere and from everyone (Just remove `static $instance`, `private` from the constructor and `static getInstance()`). Backed with a halfway solid DI container you don't ever need Singletons to be able to access the instances you depend on. Notice that most people don't implement singletons because they want _singletons_. Singletons originally were created to have thread-safe objects that are static over multiple threads. PHP isn't multi-threaded, we don't need these patterns. Most people implement them, because they want **easy access to the object, from anywhere**, a completely different reason. They just want the ability to call `::getInstance()` everywhere and to be able to do stuff with the object at any point. **This is as good as making it a global variable `$dbInstance` and calling it via `global $dbInstance` everywhere**. They want it, because they didn't grasp DI and IoC yet. If you want to create a second instance of e.g. a database connection or some kind of event loop or typical things you make statically accessible, you usually have a really good reason for it, or you won't do it. Most of these reasons come down to testing and mocking (which are really valid reasons). 
Ok, explain it for someone who didn't grasp DI and IoC yet. Given the OP is doing at the moment $email = Email::read(1); what should they do instead?
As mentioned elsewhere the short closures RFC failed... so even if that's what you vastly prefer it doesn't matter.
No frustration, what I am telling you is that this problem is in no way related to DAL or how you implement your DAL, it's related to feeding column names into your user input. I can **not** build my query dynamically and run into the same problem $column = $_POST['column']; $value = $_POST['value']; $stmt = $db-&gt;prepare("SELECT * FROM users WHERE $column=?"); $db-&gt;execute([$value]); This has _nothing_, and I can only repeat that, _absolutely nothing_ to do with DALs in general, how you implement it, why you implement it, what it looks like or how it filters data internally, it simply comes down to people feeding column names from user input. I can re-create this problem with any kind of DAL you provide me. If you say this library has this problem: So does Doctrine. I can feed column names into raw SQL there too, if I like. The question you should ask is: Why would you feed unfiltered column names into your SQL/DQL? That is the actual security problem here, not the way the DAL is implemented. 
One is happy to be of service. :-)
What I suggest you do, is to create a symlink to the new version: (1) Apache servers up the old version from the old symlink (2) Checkout/deploy in a new folder and finally (3) Setup the symlink to the new folder. (4) You can then remove the old version after a couple of minutes when you know that the files are no longer in use.
Just to elaborate, unless you disallowed web server to expose contents of `.git` folder your sources and configs can be checked out by anyone.
What would you recommend for those of us who use closures as code blocks with a reference, say, you might've seen this in Doctrine's DBAL: $dbal-&gt;transactional(function () use ($dbal, $row, &amp;$results, &amp;$insertId) { ... }); It's much shorter and less error-prone than explicitly opening a transaction, committing, catching exception and rolling back, and so on. However such closures need access to modify parent variables, because in a transaction you won't just get data in, you also want to get data out (result sets, insert ids of new rows, and so on). Arrow functions would clean up code wonderfully for those use cases, but if they capture variables by value, we can't use them here: $dbal-&gt;transactional(() =&gt; { ... });
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Using the return value is one approach, although it's about as verbose as the original closure syntax, as you need to spell out the variables twice. The short list() syntax helps a little bit, but still: [$results, $tagId] = $db-&gt;transactional(() =&gt; { $results = $db-&gt;find('Users', ['firstName' =&gt; $firstName, 'lastName' =&gt; $lastName]); if ($results) { $tagId = $db-&gt;insert('Tags', ['userId' =&gt; $results['id'], 'tag' =&gt; 'promotion']); } return [$results, $tagId]; }); // Use $results and $tagId for further logic. Also I suspect this would perform worse (we create a list, then decompose it), than having access to the parent scope directly.
As a further recommendation, do not change your production folder. Instead check out into a separate folder, switch a symlink and -- this is important -- make sure that the symlink is resolved at the webserver level. In nginx that would be using `$realpath_root`. This ensures that the deployment is atomic. An already running request will continue using the old files, while a new request will use the new files. Otherwise you can end up in the unfortunate situation that a mix of old and new files is used.
You see, there is no SQL here. You are sending your data not into SQL but into DAL. What are you doing is the most natural thing ever: User::create($_POST['user_data']); In Eloquent you can do it all right and it will be safe. So, it's the very issue with DAL actually.
It should be getModel() I think, but why did you make it static again? Wouldn't it be just a class name, like $db-&gt;get('Acme\Model\User')-&gt;read(1); ?
I use Parsedown for exactly this. Escaping support, all kinds of stuff 
No, never saw problems with that in a similar environment. Are there any errors produced by the git pull (you probably want to do a fetch and `reset --hard` instead so you don't end up with persistent changes on the servers)? What constitutes high traffic for you?
The person in your post is feeding columns into raw queries, that's the whole reason for his blog posts, that's what I was talking about and that "security problem" exists basically anywhere. That's like I'd do `DB::select('select * from users where '.$_POST['column'].' = ?', [$_POST['value']])` in Eloquent. You can reproduce that problem anywhere you like. What you're stating is basically that the `create()`-method doesn't check the availability of the actual fields in the database. Not all ORMs/DBALs do that, most have some other part that does validation logic (you'd never feed `$_POST` in there directly). Some ORMs (like Doctrine) also support databases where either the model doesn't know all table columns or the table doesn't know all model properties (Which is very common, e.g. for plain-password/encrypted-password validation and logic) Now, what would happen if I pass `id=1` in my post data in your example? Would it be able to determine that ID is not a field that I want to be filled by any kind of user input? As far as I know Eloquent (not too well, I'm more a Doctrine guy) wouldn't check it. So in any case, you have to validate your user input prior to feeding it into `::create()`, as you don't want your user to pass a (valid) `id`. As you have to validate it anyways, you can save the performance of checking fields twice. Many models don't fit their forms 1:1, so you require some kind of form builder and validator next to your ORM anyways (and you'd probably be able to make forms without ORM or entities) It is something you _might_ implement to gain additional security, but you probably have to point me to a spot where you'd do `User::create($_POST['user_data'])` directly, without any interaction with the request, the POST-data or some kind of form abstraction.
Nah, you're not getting a model, you're getting a model-gateway. That gateway get's the models. `getModel` is probably the worst name you can give it, `getRepository` (Doctrine), `getCollection` (ODM), `getTable` (ORM) or simply `get` are probably the best names to choose. `::class` is neither static nor a property/constant/method of any kind. It's a PHP feature. Using `Email::class` will actually return the fully qualified class-name of the `Email` class and it respects things like `use Acme\Model\Email`. It doesn't even trigger the auto-loader, it simply returns a string. If you don't use it yet, [start doing it](http://blog.kevingomez.fr/til/2016/01/15/php-class-keyword/), you'll love not having to write fully qualified class names into strings anymore and you don't need most of your `__NAMESPACE__` or `__CLASS__` spots anymore. Let me go into detail a bit so that you can understand. class Connection { public function getRepository($modelClassName): EntityRepository; } class EntityRepository { public function getConnection(): Connection; public function getModelClassName(): string; public function get($id): object|null; public function findOne(array $where): object|null; public function find(array $where): array; } class SomeModel { private $id; private $name; } `EntityRepository` is the gateway here. Once you call `Connection-&gt;getRepository(SomeModel::class)`, a new `EntityRepository`-instance will be returned (or loaded from the cache) which will analyze the model-class passed and determine which fields it has, which field-types and how it behaves. The Model itself doesn't extend anything, it's a pure data-class, it has no functionality whatsoever other than setting and getting data. The one doing the work is the `EntityRepository` (or rather, a lot of other classes like `Query` that will handle stuff). `EntityRepository` has access to the connection. Once you changed an entity, you save the changes through the `EntityRepository`. It remembers models that it pulled out of the database. Once changed, you call something like `$entityRepository-&gt;commit()` (`flush()` in Doctrine) and all changed items will be cumulated into efficient queries to store the final result in the database. To create a new entity, you just create it $model = new SomeModel(); $model-&gt;setName('Some name'); and let the `EntityRepository` know about it $entityRepository-&gt;register($model); (`persist($entity)` in Doctrine) #### What is the advantage of this? If you have an efficient DI container, writing your controller code will look like this: class SomeController extends BaseController { private $db; public function __construct(Connection $db) { $this-&gt;db = $db; } public function viewUserAction($id) { $user = $this-&gt;db-&gt;getRepository(User::class)-&gt;get($id); if (!$user) throw new UserNotFoundException(); return $this-&gt;view(['user' =&gt; $user]); } } No static classes involved, everything re-usable anywhere and you're always free to swap out any implementation. Feel free to pass a `LogConnection` that doesn't do any queries but simply logs them. As for your DI, you do nothing more than throwing objects in $di-&gt;add(Connection::class); $di-&gt;add(SomeController::class); $di-&gt;get(SomeController::class)-&gt;viewUserAction(5); An example of the DI library this could utilize can be seen [here](https://github.com/Talesoft/tale-di). Don't use it for production, it's a simple DI container that doesn't need anything, it works completely based on class-names. Using e.g. the Symfony or Laravel DI, a bit more of configuration is involved (or you have a cool annotation system). Something doesn't work and you gotta debug? Well, swap all them things $di-&gt;add(LogConnection::class); //Extends Connection and thus is also passed to setters requiring Connection
Boston. Facebook, Wayfair, etc. We need good PHP devs here. 
Thanks. That's indeed the thing that is worth to learn. I am working with Doctrine too, and there is no chance to see such a syntax, given all these repository names around. And your addition to the answer would definitely help the OP.
All I am saying is that the security problem in your blog post and his DAL are not related in any way as you can reproduce the problem in the blog post in any DAL you like lol. And stop saying I'm ranting or frustrated, I'm not. No sane person would throw `$_POST` into his create-method directly as there is no kind of validation before or after it **and it is not supposed to be there**. Validation is something a validator does, not a query builder. What if you want to target a database field that is not declared in your model? You didn't answer my question, what would Eloquent do when I pass `id=1` in my post data. Would it create an entry with ID 1?
Could it be OPcache ? - Have you tried to clear it? (Restart PHP on your server, and/or your webserver)
Nope, Eloquent wouldn't accept any field name unless given a written permission to. I suppose that it's their fault, and they should have allowed it freely, following your ideas of security.
The parentheses are optional with one argument, but you can still add them if you prefer.
No one's talking about faults here. Look at his library again, he has no way of telling the query-builder _"This property is allowed, this is not"_. Even though, he has to define the ID in some way, so it _is_ a valid property in any case. Would you call this a security flaw? I can simply pass even _existing_ and _valid_ fields and it's a security flaw, right? Because then you'd also need to point out that if he wants to define some kind of `ENUM`, he has no way of defining the possible default values and no way of checking those. Is that a security flaw? I can simply pass any enum values (enums would be simple varchars in his library, mostly) No, it isn't, it isn't even bad library design in general. It's just the fact that you need a validator in front of it, regardless of what you do and that you should never feed `$_POST` to anything that is not your own validation logic. The advantage, however, is that you can access fields that are not directly defined in your model (e.g. partial models that just update a specific part of a row). Also notice that his library doesn't create the tables, the tables already exists at the point of writing your models, it's a database-first design so it's actually very likely that some of his columns don't match the ones in the models. So, tell me, do I have a chance of updating a column that is not defined in my model with Eloquent without using DQLs? The security flaw here is that people assume passing `$_POST` to anything that's not a dedicated validator for user-input is secure if the library author says so (which would also not be the most optimal API design, considering SRP) Let me get this straight: **I never said you're wrong**. But you're simply not right either. Regardless of that blog post, let's move that aside. You can choose: 1. You want a safe, strict DAL that makes sure you can only access stuff that's defined clearly in your models 2. You are using Validators anyways and you need your database layer to be able to access more raw parts and things that aren't defined in your models If you're only considering 1., you're absolutely right, it's a security flaw. I am considering 2. as well, _that's_ what I'm trying to tell you. And considering 2. as well, it's not a security flaw, it's a specific design. Now if you ask me if passing `$_POST` to some (_any_) kind of DBAL create method is a security flaw, a user-land one, I'd continuously repeat **Yes**, that is one in most cases.
&gt; Google it I also like asserting things and then asking other people to look up my supporting arguments for me.
Any "specific design" that allows an SQL injection is a security flaw. A DAL that requires whatever undetermined external validation is a piece of crap that eventually will leak an injection in. Everything else is empty blowing, not worth the effort you spent writing it. I only wonder, why don't you argue the values part. Why don't you demand them to be already valaidated and properly formatted before sent to the DBAL. Following your logic it would be the most natural way.
Awesome, I'll check it out!
Inbox me. Basically I am PHP developer. I can help you in all ways. 
came here to say that. That's the way to git-deploy, the only way. 
I understand that, but that will still lead to inconsistencies. We'll need another PSR to sort that out, so perahaps it's better to nip it in the bud
This has been posted here God knows how many times..... But I will never not upvote this. It really is a great resource.
*Parity, FYI.
Exactly this. A shell script will do this very quickly and very little overhead to setup
Solid advice to be sure. &gt; make sure that the symlink is resolved at the webserver level I don't know what you mean by this; aren't symlinks always resolved at the filesystem level? I think I don't understand what you mean.
Thanks for sharing, this looks really useful!
wkhtmltopdf allows this if you run it against a patched QT. It also happens to be the fastest way to generate PDFs in PHP (because its written in c)
sooo, free karma...
If you pass a column name in the create method (or any of the methods that take an array of column =&gt; value) of an eloquent model, eloquent will add backticks. It isn't vulnerable to SQL injection but it will cause a query error. You can add the "fillable" property to explicitly declare a whitelist of mass assignable fields. Edit: forgot to mention you can't mass assign attributes without defining either a whitelist or blacklist first.
FWIW HackLang lambdas are this RFC plus block expressions and typing (and ==&gt; instead of =&gt;) https://github.com/phplang/phack already supports transpiling Lambdas to traditional PHP if you want to experiment with the core elements of the syntax.
From the sidebar: &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23%23php) ([nickserv registration required](https://freenode.net/faq.shtml#nicksetup)). &gt; You may also join us on at [#phpmentoring on Freenode IRC](http://webchat.freenode.net/?channels=%23phpmentoring) for community and mentoring discussions. Also see the [Subreddit FAQ](https://www.reddit.com/r/PHP/wiki/index).
This is good advice, you might remember to protect .git but forget about .env, .htaccess, readme.md, gulpfile.js, ...
[removed]
My personal recommendation is create a build and copy the build to the server into a folder with a unixtimestamp and then point the www (or whatever) symlink to that folder once your code and everything is ready to go live.
I personally don't see many negatives for going right to PHP 7. It's been pretty solid for me. The only possible issue might be whether some specific PHP extension doesn't work with it, but I haven't seen any instances of that yet personally.
I guess i'm not sure why i would use this setup over something like php -S 0.0.0.0:8000 or gulp + browsersync? And this is comming from someone who has to develop on and deploy to Windows / IIS
What's your background and/or skill level? We're based in the US and looking to hire a senior engineer (PHP7, Redis, Data Mining, Strong SQL, Reverse Engineering/Security skills a plus) and preferably someone who's capable of leading a team as well. Fully Remote. Salary negotiable but let's say $125k ballpark. PM me if you (or anyone else reading this) is interested.
Hey this is neat! I've been using satis for a while but hadn't heard of this project.
Uhm... I have this feeling that some people might find the sequence `&amp;=&gt;` a tad bit... vulgar.
This needs more upvote. Node people judging the php ecosystem because they've seen some terrible php4 projects without framework. I've seen worse unscalable and unmaintainable Node monstrosities projects so far. (I use both Symfony 3.1 and ExpressJS daily).
Breath
I'm struggling to understand what is "perfect" about this. What does OP even mean by perfect? This wouldn't work at all for me and projects I work on and OP even admits that...
You simply don't understand what I am trying to tell you Oo There are Models that don't have all column names registered but that exist in the database (e.g. Partial models). There would be simply no sane way to check these. More than that, did you ever notice that you can let column names have spaces freely? You just need to put quotes around them. It also varies from platform to platform, on many platforms there are quite a few more valid characters for column names. Doctrine doesn't put quotes around anything by default, is that also a security flaw? It doesn't do it, because quotes differ from platform to platform. It has been like that for many years now. Your idea of filtering a column name doesn't fit all situations you work with DALs, that is what you simply don't get. Be happy that Eloquent does it for you (and also restricts you that way, which is probably a good thing for someone that throws post data in DAL methods directly) but it's simply not as common as you might think. Look around Oo You're slowing your queries down because you do double filtering as any sane validator would validate any posted column names anyways and now you're telling me my ideas are dangerous because I _don't_ waste my performance? You're pointing something out as a security flaw which simply can be a design decision. I am not saying he made this design decision, but you'd have to point it out as a security flaw in any DAL that doesn't filter column names then and there are hundreds of them. Good luck. Don't fucking tell other people to grow up when you don't read and ignore questions. I am done with this discussion, think whatever you like. Have a nice day.
Using regexp to parse HTML is doomed to fail. Using code this poorly written - and with a YOLO factor going off the charts - is down right dangerous.
The difference is that you won't have to add all the metadata for each package you add, instead you can just define your repository like this: "repositories": [ { "type": "composer", "url": "https://satis.company.net" } ] and it will automatically check your repository for the packages.
Same, PHP and .Net are the main jobs here in the North. Ironic, I'm just starting out E-Commerce re-write in Laravel also.
sudo apt-get install apache2??
Very very useful, thanks
&gt; and he finally had to admit that both PHP5.6 and PHP7 are amazing, specially PHP7 Probably because he was sick of arguing with you...
[removed]
Been a Php programmer for more than 10 years. I can say with absolute certainty that Php is a steaming pile of shit, and should not be used for anything more serious than contact form. For people who really know the language well, know that it is a minefield, and hence cannot take a couple of steps without poking the ground ahead a dozen times. For people who doesn't know that it is a mine field (most of the people in the sub), things are easy. Their obliviousness helps them use the language without much concern. And hey, things work most of the time...So they go on ramblings about how the language is fine, and about php 'haters', and all... Thankfully, it seems that the development world has more or less moved on. But as with anything else happening outside, /r/php is slow to acknowledge and is still mostly in denial. It is really amusing, if not sad, to see...
Use `--link-dest /path/to/the/previous/release` while you're at it, to prevent transferring changes from last release again and storing identical files twice.
Ah, so you're not only great lord of all them DALs, but also great lord moderator of contributions. Just something to think for you, I decide what I contribute and what not and at what level. The reason I answered your questions was because I actually thought you don't get it and I wanted to help you, I was trying to be nice. You've been trying to be a dick. What do you think, that everyone here is retarded except you? You're not in /r/phphelp, you're in /r/php. Most of the people here **already can code**. You're basically the reason why I'll contribute less in the future. People simply don't like it being made fun of when they try to help people. But it's good that you're all grown up man! Well done :)
The only apparent feature "most people here" have is an overgrown ego ;)
Well, at least you don't, right? You're all grown up. Watch my GitHub, same nickname, don't try to teach someone stuff about a profession he's living off for 12 years now.
Most of them are probably by me and my vagrant provisioning script.
That's what I currently do, and I have to manually add every shared variable using `use`.
What would be the problems with implicitly closing over variables in current anonymous functions? And why wouldn't those problems apply to arrow functions?
So why not just add implicit closure to regular anon functions?
What makes you want this to be PHP? Couldn't you just set up a regular proxy?
How about nginx as a proxy server? Could have it listening on a non default port and leave apache responding as normal with nginx kicking in when required.
Thanks for sharing, I wanted to try this since they announced it but haven't gotten around to it yet. I'll definitely use this as a reference when I do!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Could a static function in an abstract class create an instance of a class that extends it? Example, this will throw an error "Cannot instantiate abstract class": abstract class AbstractObject { public static function newObject(){ $o = new self; return $o; } } class User extends AbstractObject { public $name; public $email; } $u = User::newObject(); //This would ideally create a new User object. var_dump($u); However something similar with Traits does work: trait TdbObject { public static function newObject(){ $o = new self; return $o; } } class Team { use TdbObject; public $name; public $color; } $t = Team::newObject(); //This does create a new Team object. var_dump($t); Is there a way to get this working with an `abstract class`?
you need to use new static. In PHP self is always the exact class the code is and static is the extended class: https://3v4l.org/q28oL this is so because this functionality was not available before PHP 5.3, guess the guys didn't have time to copy Java right from the beginning...;)
If you say _must_, you're likely to get dumb reasons like "..............." (if you require e.g. 15 chars) — Especially when people already said their opinion on mailing list or think the RFC is just bullshit. I wouldn't be opposed against an optional reason field; this really just would require someone to PR this to the wiki repo...
I'd have to flesh it out and think about issues like this. My hope is that most voters will have the decency to actually write a few words; but frankly, if you wanna be an ass and just put "........" then that's fine, it probably reflects how much thought you've given to the RFC.
But that's the point - it's a new syntax which means new parsing and lexing rules, hence why it *may* be easier to implement implicit closure. However, I can only speculate.
Most surprinsingly, it actually does it job pretty well, that's why I did ask you NOT to read the code :)
whoa. impressive
`&amp;&gt;` maybe?
Can you be a bit more precise instead of just throwing random complaints ? I started developing in PHP using Symfony 1.4 8 years ago then Symfony2 just 6 months after its initial release. I've delivered about 50 websites and 10 native apps relying on SF2. Ever since when I build custom stuff using php it worked 100% of the time (I've always implemented unit and functional tests with data fixtures) and it's fast. SF2 has always handled caching beautifully. Besides Php7 is incredibly fast compared to php5.6. I rely heavily on well maintained Symfony bundle, follow best practices and most importantly use the right tool for the job. Redis for caching or leaderboard, MongoDB for high write, Behat for BDD, Cloud services... I'm really curious to know clearly what you call "minefield" and how better it is using ruby, python or js. I've yet to be impressed by other frameworks. But I keep my eyes open.
I just promised everyone in my office that I would bring cake to work 9 weeks in a row if this RFC goes through! Good luck.
&gt; price of being pretty damn hard to read See https://www.reddit.com/r/PHP/comments/54rzp5/draft_rfc_arrow_functions_v12_now_available/d8537iu. "Hard to read" has not really stopped this exact syntax from being in JavaScript and C#; why do you think we're somehow very different from these languages?
"le tr0lling, haha I'm so funny trolling and making pipol m4d!" - n0t0ri0us9
Don't bother with this guy, just a troll/hater, if you see his post history it's full of shit and negative comments without actual arguments.
While i've found a sleezy way to patch this, this has been really informative. I'll be sure to save this so I can work on my downtime to cleaning up my code and implementing a proper solution rather than my patch function.
Pretty much any popular CMS (WordPress, Joomla, Drupal, etc.) will be able to handle this via various add-ons and/or plugins. Your best bet to start with would be to research each ecosystem and see what plugins are available for each discrete piece of functionality you want: * following users * sharing content to social networks * private messaging * etc. Then figure out which platform will be easiest for you to manage and maintain over the expected lifespan of the site, find out where you can host it, then make it go :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Redis is wayyyy faster than using a database. Do you even cache, bro? 
Still uses a 1MB raw :(
Excellent advice, dropped illuminate/support &amp; collections dependency 😉 https://www.reddit.com/r/PHP/comments/553asz/open_invitation_for_criticizing_the_best_php/?st=ITON620Z&amp;sh=2f9ffa4d
You might want to link to your develop branch then, as the hyperlink in your post defaults to master, which seems to still use the massive single JSON file.
Excellent advice, separated countries into individual files, but seriously comparing small json decodes vs php array, i found the json to be much lighter in both memory &amp; processing time (I'm talking blobs less than 1mb) 😉 https://www.reddit.com/r/PHP/comments/553asz/open_invitation_for_criticizing_the_best_php/?st=ITON620Z&amp;amp;sh=2f9ffa4d
It sounds like you are trying to remake twitter, albeit with a focused theme. You could try to piece together plugins with a CMS (wordpress, boltcms, joomla, etc) but some of this will have to be custom built. Maybe start with laravel and it is very user friendly, in my opinion.
I used to : 1/ Split passwords in half. 2/ Reverse the second half of the password 3/ md5 each one of these 4/ Splitting each part of the password in half 5/ Inserting a different random salt (5~10 chars) between each part of the password 6/ Concatenate 7/ sha512 8/ Reverse 9/ md5 I think it was safe...kinda...
I haven't watched the video so maybe I'm just repeating. The ticks mechanism worked by adding a `TICK` opcode after every statement (or every N statements). This TICK opcode would then call the callback registered using `register_tick_handler`. Usually this would be `pcntl_signal_dispatch`. This is *extremely* expensive. Not only does this mean that we have to dispatch much more opcodes, we also have to perform a full-blown (potentially reentrant) dynamic function call. The VM interrupt mechanism works differently. There is a flag in the executor globals which will be flipped if either a timeout occurs or a PCNTL signal arrives. This flag is not checked by every opcode, instead it is only checked when performing jumps, on the premise that a basic block will eventually reach a branch. (This is of course not entirely true, which is why interrupts are also checked in a few more places, such as function calls.)
Depends on which framework you use. Yii has support for custom class-based rules where you can wire both building and resolving to your own custom URL storage such as Redis.
Looks better :)
PHP 7.x is absolutely production ready. Why would you not update if you have the option to do so?
I have heard thatstory too many times over the years. Best to let some other people get on the bleeeding edge and then wait and see the bug reports.
7.0 is definitely not the bleeding edge (7.1 is). The speed boost alone in 7.0 was enough for a lot of companies to eliminate 30% of their servers.
well I definately have to give it a try .. however I need to build from sources and that is usually the big hurdle in the beginning. 
Yeh, that is an annoying hurdle. Just out of curiosity, why no package manager?
Are there any repos out there with 7.1 RCs yet, like remi etc?
We tried migrating to 7.0 from 5.5 when it first came out and the only thing we ran into were some third party tools that hadn't released versions for 7.0 yet. We are ready to try the migration again and most if not all third parties have caught up at this point. 7.0 is the version that ships with Ubuntu 16.04 LTS so you can be assured it is stable and production ready. All that said, you should read all of the upgrade guides between whatever version you are currently on and 7.0. There are some potential BC breaking changes, however the ones that we were affected by were mostly related to the way that PHP 7.x interprets things wrapped in curly braces (effectively changing the way certain code was interpreted). It's all documented in the upgrade guides.
Don't mind that guy. He has a point that field names shoudn't come from user input. But he has a very very small penis.
I've been testing from remi-php71.
actually the site clearly says "THIS IS A DEVELOPMENT PREVIEW - DO NOT USE IT IN PRODUCTION!"
The release candidate, or 7.1 in general? 7.1 is not just bug fixes. [Here's some more info.](http://php.net/manual/en/migration71.php)
7.1 is RC. 7.0.x has been production-ready for quite some time.
Slack (the fairly new business chat app) is built on a php platform. 
it says that for 7.0?
I just did a small-ish project for work. Our existing host (think commercials with naked ladies), which I had no hand in picking, had 5.2.x and I was using a lot of 7.0 features on my local machine without even thinking that our host would be way behind. Simple stuff like password_hash and mime_type. Moved the project to another host (Namecheap) after a few hours of refactoring still didn't work. How the hell can a blank docx file (or any docx for that matter) upload tank the sever when other much larger files are just fine. 
no relation
Doesn't Codeception provide something like this?
Digital Ocean VMs are $5 / month. Do yourself a favor and forget about shared hosting. 
They solve two different problems. Web assembly can be used for efficient client-side processing but most of the real work can't be done client-side. The backend provides a service to clients to use while web assembly does not.
&gt; When will PHP ver 7.x be considered ready for production? Months ago. &gt; unless I see real reasons and benefits for a leap all the way to ver 7.x. Are you unaware of what 7.x does, or do you just not care about the huge performance increase, bug fixes, significantly better developer experience, etc.? &gt; Best to let some other people get on the bleeeding edge and then wait and see the bug reports. There is no way you can realistically claim that the entire 7.x series is bleeding edge.
It tends to vary per site. We personally will be upgrading from 5.6 to 7.1 once it is released (we the don't upgrade to new major version until the next minor hits).
this happens all the fucking time and its incredibly annoying, but i guess it forced me onto chrome to keep a fixed version of FF installed at all times
Don't mind that everyone is fixed on a penis' size like you.
Posting a Reddit digest somewhere else is a good idea, it can get you some respect and traffic. Many already benefit from that. But posting it back on Reddit... Do you really think we are *that* retarded here?
You will be surprised, how many people find it useful.
Of course - that's what I just said. But not on Reddit, where you can get that list in one click
Let's make it your homework :)
I love you :P
I would assume that if you want someone to take you serious in /r/php you shouldn't bring up WordPress.
One issue worth pointing out is that many rely on Memcached, and PHP7+Memcached seems anything but production ready: https://github.com/php-memcached-dev/php-memcached/issues/213
With the ondrej ppa we've been using memcached with php 7 in production perfectly fine though :-)
Using it on 20 servers with no issue, so I'd say it already is.
This package has nothing to do with intl, tell me if I'm wrong: Is there anyway to get the following data for each country using PHP intl extension (demonym, capital, dialling codes, geo data, currencies, flags, emoji, that's just small chunk of the features) ?
See if you can use this: http://codeception.com/addons#codeceptionextensionrecorder Really easy to see where your tests failed so you can reproduce them in a browser to debug with your trusty debugger out.
WTH kind of post is that? There's literally no concrete info or links to follow to learn more whatsoever. How do we use this thing, where can we test it out?
Small hijack: Anyone know of any libraries/lists that have all major currency denominations? ie all coins/banknotes currently in circulation for a given currency.
Thank you for your interest. This is a TIL, not a give-me-on-a-plate post. You can test it on your own workbench server (course if you got any), the way explained by the link above. If you need more info, there is another, more in-depth post: https://software.intel.com/en-us/blogs/2015/10/27/high-performance-php-7
Interesting. I wonder how would this work for docker.
Wordpress is not the only software written in PHP
I'm referring to the article you posted. &gt;Now use the optimized binary to run WordPress and compare it side-by-side with PHP built the default way. The PGO version gets 7 to 8% better throughput on average.
Somewhere in [this talk](https://www.youtube.com/watch?v=MT4rRWKygq0), Rasmus claims that the standard PHP binaries are compiled with a Wordpress profile and recommends that everyone compile their own. It's entirely possible that the standard and custom binaries compared in the article were using non-identical setups or profiled against different workloads. edit: Sorry, I had a faulty memory of how he described his benchmarks around 31:00
&gt; I'm pretty sure the default PHP binary is already compiled against a Wordpress profile. Wow, the thought alone is amusing. It wasn't.
n'est-ce pas
oh, ignorant me. thank you, removed
&gt; unless I see real reasons and benefits **Huge** performance improvements, scalar (return) type declarations and the null coalescing operator are just a few "real reasons and benefits" to consider. We've been running 7.0.x since March of this year and haven't had (PHP 7 related) problems.
Well then, either the guy is lying or he's got another default build or like you said it's different workload.
[relevant](http://i.imgur.com/wnIaRyJ.gif)
No, thanks 
&gt; either the guy is lying Dude, you do know who [created PHP](https://en.wikipedia.org/wiki/PHP) right.... ...I find it a bit unlikely that the creator of PHP would be lying about something like that. Update: Watched the video and now see the others guys edit. Yep, Rasmus was talking about how you can optimize PHP for your specific use, rather than what the default is optimized for.
Sounds like it's the school chooses to enroll the students without drive. Do they think that making pages like prime number generators is useless? Are they enrolled in a certain department that you could make them work on projects that are more in line with their interests?
Anything same about zend engine ?
Does anyone have some article about changes in zendengine and what needs to be done with extensions to make them work for php 7.1.x if they are working with php 7.0.x ?
Tank you guys for the comments, I allready started using Drupal 7, again, and now with a new approuch, I managed to implement the theme in the CMS. You can take a look at beta.web-mee.com I allready have the features I needed with modules. Now the challange is to design around them.
Or https://github.com/winzou/state-machine
This isn't a PHP problem, or even a programming problem, but a teaching problem. It sounds very much like a generic situation of trying to teach students with no interest or drive. Maybe other teachers from other disciplines would have more advice?
Wow, you could build multiple php binaries optimized for running different parts of your code. Or you could build microservices and build a different php optimized for each service.
But they mentioned GraphQL, and so those two cancel out, and you can take them seriously again. OP knows what they're doing.
One important part of instilling a desire to learn is to make sure that the students understand where the basic building blocks fit into the larger picture. When you give them a prime number generator to code, tie that into some larger concept like cryptography. If you'll look at most programming training, the basic concepts are presented in the form of the blocks to build something like a blog or ticketing system. Show them how the topic will help them make the next 'facebook.'
The amount of upvotes for the post clearly shows that.
Dude I was helpingggg...
Downtown Detroit. Hit me up if you are interested.
My company has been looking for a senior php developer for like 5 months now......
Git is a version control system, not a deployment tool.
Which one?
It's a modern catastrophe.
Browsing through /r/PHPhelp is like going back in time ten years. A significant portion of developers haven't even reached the baseline of separating HTML and PHP. It's almost impossible to provide practical or useful advice when you have to start with "forget everything you know about PHP development".
PHP for the rest backend handling all DB calls, ajax calls in JS
PHP was my first language, and i didn't come from an IT related background. i barely even had a computer. Please don't use that an excuse. Also, don't teach number generators, that's way too boring to start with. Start with making stuff show up on a web page, something where people can easily see the results of what they're trying to do. I probably would have given up on programming, with the method you're using.
If you use a micro framework like slim, you can easily make PHP handle just the API and then JS handle the entire front end. Once you go mobile, having PHP only deal with the API is nice because all the API should already exist and it's pretty lean and easier to maintain. If you write the front end with PHP rendering, etc you end up with either a large monolith code base for the site and API or two different codebases, one of the API and one for the site. Having written both, I prefer the PHP API and JS front end approach. Plus you can host your front end on S3 or Github for free.
Idea: do you play any video games? Example : Pokémon Go (since sits the hot game right now) - have them breakdown what the game does, break it down into solvable problems - focus in a something that excites the class - have the class solve the problem - have the class solve the problem with php - have them solve the same problem in JavaScript I know it sounds big and visual but remove the visual, think text based or command line Make a small cursor based maze, you have a object that can move up down left right, if the object runs into a wall, what happens. How do we move the object, etc... Some thoughts on how much time you have, is OOP, functional or procedural your focus. Narrow this down to want you want them to learn
Technically, &lt;script language="php"&gt;&lt;/script&gt; is valid.
Hi /u/madeinos, I'd like to point you towards /r/PHPhelp for future questions. You might benefit from cross-posting to there as well.
I've you tried Elasticsearch with Kibana ?I use both and all the statistics that I can build with both of them is really awesome and so flexible. :)
Well 7-8% is not that great considering that web app workloads usually differ greatly.
This might explain why many PHP developers are terrible. Admittedly PHP is easy to pick up, thus a prime target for those who "dream to build the next Facebook." If your students can't write simple scripts then start back to square one. My old instructor would do this with an underperforming class. It didn't matter if they were a week from the end of the class, he would make everyone do exercises in class starting with chapter 1. It really deflated egos and made the offenders realize they need to take this career seriously. I love PHP to death but these stories make me sad. Good luck!
Someone please make a docker container that I can provide with a `warmup-php.sh`, and then runs pgo as one of the last build steps. kthxbai :D
It must be really important what stormpath does, because they have a hard explaining it.
What would the purpose of that be… calculating change?
Depends how you define the "market". Your end users likely can't give a damn what their app/site is written in as long as it works well.
in most POS systems you have to do a start count and an end count, ie count all coins&amp;banknotes. That's simple enough for basic currencies but if you have the same app for many many currencies...
wat?
Just a general question. Im working towards becoming a PHP developer but currently have only worked with a few CMS frameworks like WordPress, open Cart, xcart, and magneto. What would you as an employee look for in a "talented" PHP developer? I can write okish PHP inside those frameworks for sure on the junior level, but what would make me in your opinion a "talented PHP developer"? It would be nice for me to have an idea of what is required of high-end PHP developers. 
This is a pretty broad question on this topic, but generically it be something along the lines of the following for your first service. * Find a part of your code that can be abstracted to and API/RPC * setup new docker/ec2/droplet with whatever language you you want to reimplement the code in. * create any database locally on the server, or as a standalone db server (we have a couple we just call the DaaS) * remove all the business logic from your app with API calls instead Again it super generic response, but that's the method we've been taking basically. Find a slow part of your app, rewrite it in golang, register it in an API gateway (checkout go-kit), create new databases as needed, replace slow code with API calls. Just watch out if your planning on doing a lot of these, your app can slow way down. php is by default single threaded and your app becomes as slow as your total network latency. Though I'm not sure what multithreading would net you since you essentially need all of the responses from the calls to render the page. That is unless your using lazy loading on your front end to load content from your services after the page load. (Think banners, navigation, etc.) You can PM me and we can have a larger discussion if you'd like but I'm about to head out for dinner so I had to keep this semi brief.
While I started my career doing almost exclusively PHP i've since passed it up for more "marketable" languages and frameworks like Angular, Ember, Python, Ruby, Go, etc. There's not much of a market out there for pure PHP devs outside of wordpress work and i'd rather shoot myself in the face than work on wordpress all day. I think you'll find most talented PHP devs have taken similar paths and aren't interested in taking a pay cut to do a php-only gig. Don't get me wrong, I love PHP and a lot of my personal projects use it still but I do much more work in the other languages. I was actually a freelance PHP dev for a few years but ended up having to quit due to the onslaught of indian/chinese developers that would vastly undercut me even though the quality of work and reliability of the developer was generally far inferior. 90% of the jobs I got were cleaning up after chinese or indian devs that just up and left and the project almost always required a complete rewrite. Most of my PHP experience is with Laravel, Symfony, Zend Framework and even old school Code Igniter. If you have a need for someone you can send me a PM and I can get you in touch with some colleagues that still do it on the side if that's good enough. 
It looks like the developer's take on [Symfony Config](https://github.com/symfony/config).
sometimes i also think that teaching method is also needs to redefined, i start usually starts with basic php programs with loops conditionals and function then i move to html and finally combine both. what you suggest is this sequence is correct ? 
I myself use symfony but I think You should stick with zend. Probably migrate to ZF 3 as it will be easier
Relevant https://youtu.be/kb-m2fasdDY
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Members &gt; Team management Project + User &gt; Tasks management Make a stripped down version of asana.com, this is a nice web app to learn. There are some custom web components like date picker that can take you just a few weeks to do correctly. Building a google calendar style planning can also take you a lot of time. I actually did a project similar to freshbook + asana + google calendar in angular1 last year. This is how I learned angular. As for the PHP part, I built a nice API on top of Symfony2 + Doctrine2 + FOS Rest/User + JMS Serializer. Good luck.
Generally it's a good idea to add to your post a quick synopsis of what this is and why you wrote it. It looks well-presented and tested, certainly. Do you have some example projects that use it? 
1. Microservice architecture is far more expensive than monolith. So this should be dictated from business point of view (need to scale quickly), not from developer will to try something new. 2. You should have solid understanding of your domain to split your application into micro services (in DDD this is something called [bounded context](http://martinfowler.com/bliki/BoundedContext.html)). That's why there is no "guide" of how to build it. It's depends. 3. You should know what is coupling and cohesion (this is also related to 2nd point). Dependency mess will kill the project. 4. Sometime it is just easier to put all business logic stuff into monolith application and move some infrastructure to the micro services. This is how most of developers usually do the things. For example if you have some chatting functionality - you could move out it to separate microservice. Or file uploads for example. 
&gt; Most "micro" services are just service-oriented architecture for hipster devs that don't want to sound enterprise. Or just distributed system without single point of failure. This is what microservices should be really is. This is the core difference from SOA wher you usually has some kind of service bus (ESB for example like in old days). &gt; The definition of micro is really up to you, but I view it in MVC terms as a service that likely has a single model and maybe a few controllers. MVC is only declares how to decouple your application (M) from view (VC or VA or VP). So please do not mix terms. Microservice just should cover single [bounded context](http://martinfowler.com/bliki/BoundedContext.html). 
Get remote contractors. Will actually cost you less. 
I'd rather rewrite it in brainfuck than touch that code base. 
Probably a broader understanding of the landscape. Not just the php part. Understand the server, software, http(s) protocol, experience how apis work, what kind of data front ends and mobile apps expect. Then there's vcs related stuff, deployment options. Also within php have an understanding of laravel, symfony and/or similar frameworks. Experience in more strict languages such as Java or c# would a plus as it shows a different approach to similar problems. That's off the top of my head. I'm sure people can add to it. 
haha this is for XML/XHTML documents although I remember in 2004 someone made a client side plugin/extension for php3 that used the same opening/closing tags, and it was horrible :-)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I agree with @Shadowhand, I'm looking to Angular or Ember
Yes, I agree. I was thinking something like that myself. Thanks! Silex (Symfony, as it is more of a industry standard) for backend and Angular/Ember for JS frontend.
This is a performance issue. You have to load the jquery library file. Pure Ajax you do not
Versatility and architecture is subjective. Performance isn't.
Ive recently done this. Symfony backend and angular front end and the users love it and it has been great to maintain and extend so far. 
I tend to use PHP mostly for back-end stuff with JS html css3 with as little as possible extra libraries/API's as possible. Sometimes Using an third party solution speeds things up on the development side of it, but is also always comes at a cost, be it flexibility, readability or speed.
It's lightweight and easy to use. Does it matter what it actually does?
I'll give you only answers that are not subjective (i.e. this is *definitely the right way to do it*, not just my opinion): &gt; Should each service have its own data store? Absolutely. The purpose of a microservice is to force complete isolation of itself from other microservices, and this includes all their *state*, including databases, files, caches, and so on. The only point where a microservice touches another microservice is through their public API, which is defined using something simple and cross-platform, say, JSON messages over TCP or HTTP. &gt; How do you do joins? You don't do joins across services, but you can do multiple API calls and assemble the data you want. Running multiple API calls is normal business in the microservice world. For example you may ask OrderMicroservice "give me user id list of those who have ordered more than $2000 worth of goods at our store", then you read the userIds from that response and ask UserMicroservice "give me the emails of those users". That's an implicit "join", but without a join. And it's ok. &gt; What are the boundaries of a given service? As small as possible, without incurring big performance penalties. A microservice would typically manage *one type of entity*, say "users", or "products", or "orders". But in real-world scenarios, those entities might contain other entities, or an entity type might be tightly connected to another entity, they are highly cohesive to one another. Then a single microservice can handle multiple entity types. But be conservative. One reason you might want to make a bigger microservice is transactions. Transactions are much easier than "eventually consistent" interactions between microservices. For example in a previous project I coupled "orders" and "payment transactions" in the same microservice. That worked fine, but soon payments were needed for all other activities, and so this coupling would've been undesirable. I had to split "payment transactions" as their own thing, and make "orders" check if a payment is made "eventually" in order to get an order started. One trick you'll find indispensable to keep state in control across microservices are *immutable facts*. Mutable resources are very hard to get a hold of, everyone has a snapshot of a different state of the same resources, and they see past each other. But facts, in time and space, are immutable. Something happened yesterday 5:31PM and it won't ever change. So when multiple microservices read "what happened yesterday between 5 and 6PM" it's immutable, it won't ever change under their nose. Check "event sourcing" for more details. &gt; Do services call other services? Of course! It'd be absolutely impossible to do anything otherwise. But as I noted before, stick to simple, cross-platform ways to "call" services. Have a small, clear, strict API. Don't communicate through "side channels" like files on disk or database. **EDIT:** And one more thing. Microservice are typically not needed until either your production scale is too big for one app, or your development team is too big for one app. Until then, the wiser thing is to code "modules". Those are normal PHP classes that run in the same request, but which are "microservice ready", which means: - Modules never share state, db (just like microservices). - Modules expose one or more "endpoint objects" for their public API, i.e. $userService-&gt;getUsersEndpoint() and that's the sole way for modules to talk to each other. - Endpoints factor input and output as simple trees of arrays and scalars. Avoid complex objects in your endpoint communication. Think: can I easily serialize this object to something small over HTTP? Or does it contain reference to *half my app*. If it's a small value object like DateTime, then it's "endpoint-safe". If it's something big, with lots of state, keep it out of your endpoint APIs. - Also keep in mind that you can't pass "behavior" through endpoints (it's not serializable), so don't pass closures or other forms of the Strategy pattern through your endpoint APIs. Eventually as your app grows, you'll be able to refactor modules as microservices if you follow these guidelines, without breaking any of your code. Best of both worlds.
&gt; Silex Good pick. &gt; Angular/Ember React is probably better unless you know Angular or Ember
I would again argue with that assertion. It all depends on what you are creating. If your application is going to be making thousands of DOM manipulations all the time and whatnot, then, yeah, use something like React or Vue. If you are building anything else, performance is less of an issue and any other JS framework is good enough. Pick the right tool for the job, right?
I am using Angular at work, so it will also improve my knowledge, but I'll also see what React has to offer.
You are probably not paying enough. There's a small pool of really talented people in any skillset. If you want people to be in or move to your city that's a smaller pool still. Great people expect to work on projects that interest them and be paid well. If your product sounds boring and you want people to work for half what facebook pays a fresh graduate, then the only applicants you'll get are the ones that don't have the resume, skill or drive to either move to an A-list tech city, or work remotely for somebody who pays CA or NY salaries but lets them live where they choose.
Well if that's the case, I would stay with Angular
Yup, but I did tested it a lot, and it does really work. I also was really afraid when I saw it, but I decided to test it anyway. I surprised myself in a sense, I would never use such code, but as my tests was positive, I decided to keep it anyway. HTML Purifier does frighten me a lot more, having clean well-formatted code isn't a proof a quality or whatsoever: HTML Purifier is *HUGE*, seriously, and in order to fully understand I do think it would take an awful lot more time than htmLawed.
Well, my coworker is a software engineering grad who is pretty much solely a PHP dev. I'm a more well rounded computer science grad. So there's that.
Thanks very much, will be happy to take a look. If you can show how this would work with environment variable configs, that would be cool too - seems to be the way configuration best practice is going. 
Could catch. I recently refactored loaders and must have missed something. What's more strange is that the tests still pass. Thanks for pointing this one out.
Yes, and thank you for it - all ideas are most welcome. I have a few improvements to add, and they will probably be added in the order that I need them (unless someone wants to send me PRs, of course!). 
The "implementation and transition timetable" is here: &lt;https://groups.google.com/forum/#!topic/php-fig/Rf1Xfgix3Cw&gt;
[removed]
In large to medium or even sometimes smaller projects, it is nice to have objects that represent your configuration values. Think about it, config vars are used across your entire application. Wrapping them in an object gives you the ability to define functionality you just wouldn't have using an array or the dreaded global vars. Once you work on a few larger projects you'll start to understand. Hell, maybe even use Gestalt for your next project and see how it goes! ;)
RIP
No problem, I looked into why the tests were still passing too. I took the liberty to fork and make a pull request for the updates.
Can someone please please please make /r/phpfig so anyone who gives a FUCK about this can read about it there?
Wow, we are all incredibly surprised! ^/s
I'll definitely look into getting interns and broadening my search beyond just PHP. Thanks for the advice everyone!
Midwest. Eastern time zone. 
Why can we not instantly delete posts like this?
Should be able to simply pass the $_ENV superglobal into the `\Gestalt\Configuration` constructor. It accepts an array, instance of itself, or any `Traversable` :)
React is only view framework. Not whole MVC like angular/ember.
Well Silex is kind of waste. It's still based on symfony components so pretty slow. Maybe try phalcon for api ?
Jeez man, you practically ran a crusade against this, seeming to think that everyone believed you were right. In the end, no one cares about your fight about the different visions, and it looks like fig overwhelmingly passed this. And in response you decide to quit, and it looks like no one cares. I mean... Whatever floats your boat, but you made a giant deal out of nothing
How is this better than [Punic](https://punic.github.io/), which uses the [Unicode Common Locale Data Repository](http://cldr.unicode.org/) which was created specifically to work as a central repository for this type of information.
Just my impression. Could be wrong. That being said, really seems like you're making a mountain out of a molehill
I disagree here, though maybe I've been lucky. I've been a pure full stack guy (mainly LAMP) for 10 years and have never had difficultly finding good paying work. I am feeling the need to broaden the languages I know...
A microservice should really have a reason to be a microservice. Meaning you're working at scale that you don't have a problem eating a 50ms minimum delay added to your response (since you have to do a full http or https session to get data), the service needs to do one thing that has a good reason to be isolated from the rest of your stack (things with encryption or handling sensitive data like card numbers comes to mind), or you're providing the service to other groups (customers paying to use your API, other development groups in a large organization, etc). We went crazy with microservices for awhile and found that we were just adding huge delays to synchronous client facing processes from all network extra connections we were making. Half the services we were putting in place would have been better served to just be a library you bring in with composer off your own packagist instance. I generally am pretty wary of using a microservice with anything that's tied to a customer response (i.e. they need to wait while your app reaches out to this separate service) unless again it's doing something really important for you. Also I find a lot of developers like to cheat and make their services communicate through something like Redis (which is an awful idea for something like an authentication microservice, no encryption running through a system with an atrocious history of bad security practices) or a database. This completely misses the point of having well defined transactions through an API, you can do it but you should really either be using APIs, using a message backend like amqp/rabbit, or doing something pub/sub where everything's async and your well formed transaction is coming in the form of a worker waiting for (and validating!) messages that are important to them.
I'm aware they are not super related. It's just kind of a rule of thumb. If you're building an MVC service, it probably isn't micro if it's handling several different models and has dozens of controllers to manipulate them. Doesn't mean it can't be. If the models are all highly related and you just do a good job of breaking things down into small parts, you could easily have a micro service with several models and a bunch of controllers. I definitely agree that structural complexity doesn't mean functional complexity. I just believe structurally complex things are USUALLY functionally complex.
&gt; Microservice architecture is far more expensive than monolith There's a really interesting discussion to have around this. From an overhead standpoint, totally. I would never recommend such an architecture for a 1 or 2 person team. But at a certain point there becomes a tradeoff. From a server perspective, services tend to allow you to make more efficient use of your infrastructure (especially with containerization) at scale. Early on, it's definitely more expensive, but as you need more machines it (can) get much cheaper from the infrastructure standpoint. Also from a developer standpoint it can become much cheaper with scale due to increased ability to automate and isolate a lot of the cruft (authentication, rate limiting, fault tolerance, etc). Early on it's far more difficult to work with, but in the long term it drops quite a bit. From an operations standpoint, it's the same picture. Without a lot of automation built, it's far more expensive to run. But as you scale (both more services and more team members) a lot of that tradeoff starts to swing in the other direction. In short, I totally agree with everything you said (including the "far more expensive" line), just think that there's really interesting discussions to have around it that few have...
I broadly agree with the first part of your comment. SOA and microservice architectures are definitely very similar. To me the key distinction between the two is that you could quite easily have a system with a SOA, and have that system be one monolith. A microservice architecture on the other hand demands some pretty specific details, like a lack of centralised management, the need for build/deployment automation, scheduling concerns - and of course, a smaller area of concern. As OP has pointed out, that may be (and commonly is) a single piece of business logic. These things all bring about the need for other things like service discovering, health checks, distributed tracing systems, probably some kind of aggregated logging, etc. and you may never need these things with SOA. &gt; MVC is only declares how to decouple your application (M) from view (VC or VA or VP). So please do not mix terms. Microservice just should cover single bounded context. I believe that OP here was just meaning that if you were to build a microservice within an MVC framework that you'd _maybe_ have a single model to deal with, not too many controllers, maybe even just one. That's why OP started this with "in MVC terms" - they were not confusing the two, just using it as an example to make it easier to visualise in an easy to understand way the scale that a microservice might have. It is a pretty difficult thing to define, you could have microservices that are way different sizes, just because one has to deal with more logic than another that's really simple and stupid. I think it does just come down to keeping the number of concerns that a service has to a minimum.
plus with jquery you get promises, and all of it's helpers. You're also not reinventing the wheel. jQuery has been tested in the real world out the wazoo.
Nice work! Just a couple of questions: Which is the use case you have though about the observers? I'm trying to think why would I need them, and the only use case I've though of is revalidate that the config is still valid. Did you had something in mind when you did that? (Apart from the idea of programming the observer patter, which is fun enough :D). Another question, what do you think about processing Env variables. Like, if I have my db password in the DB_PASSWORD env variable, is `$config-&gt;set('db.main.password', getenv('DB-PASSWORD'))` the only thing I can do? Can I define it in the config file somehow? The other (last!) thing it's just asking you to clarify the docs a little. Those are well written, but some small things might improve them a lot, like: - examples in the first page - "next" and "prev" buttons on all pages - Examples using the default loaders (yaml...) - Full use case. Defining config, loading, and passing the variable around, just to give people an example of the "recommended" way to use the library. If you need help I could probably make a pull request, although I'm not a native english speaker... Either way, I'll probably try to use your library in a pet project soon, see how it goes. :)
&gt; But at a certain point there becomes a tradeoff. definitely! That's the point. There is a very small amount of projects that requires microservices.
Dass rlly interessin'.
It's just a poorly-conceived object wrapper for an array.
Fantastic. This means the FIG can get on with it's goal instead of pandering to your constant need to bikeshed. 
Angular2 will give you lots of features out of the box. So it's good for a personal project. Any other js framework would require a lot more time to go custom. I wonder how well Laravel handle building a custom API with proper JSON serialization. But my guess is that it would rely on SF2 components anyway.
[removed]
So far you've openly wished other people would commit suicide, and called a complete stranger a fuckwad. All because you don't agree with what they say. Who is auditioning for the high-school debate club, again?
&gt; Bingo. Now you get the meta. Not really interested in an explanation for your words. You don't owe me that any more than the FIG folks owe you an explanation for your questions or "Pretty much every time I(or anyone else) have said something bad about the PIGFIG". Perhaps the reason they don't engage with you how you prefer is as much to do with your level of discourse as it is with theirs. I can't imagine many conversations starting as you've started this one are winsome. You've demonstrated the very thing you say you're against.
[removed]
That looks the same as what he gave at the PHPNW unconf talk yesterday. TL;DR - and from a hazy memory: 1. experts in a specific field will be responsible for creating a spec and voting on it. 2. Vote threshold raises to 2/3 3. There need to be 2 implementations of a spec for it to be ratified/accepted. It all sounded good to me anyway, as a bystander.
Well, the CLDR doesn't contain any geolocation data, specific codes or flags, that's just few of many attributes that you can get from this package over the CLDR :) Take the following data chunk, none of it available in the CLDR: "geo": { "continent": { "EU": "Europe" }, "postal_code": true, "latitude": "54 00 N", "latitude_desc": "54.56088638305664", "longitude": "2 00 W", "longitude_desc": "-2.2125117778778076", "max_latitude": "61.5", "max_longitude": "2.866667", "min_latitude": "49.866667", "min_longitude": "-13.65", "area": 242900, "region": "Europe", "subregion": "Northern Europe", "world_region": "EMEA", "region_code": "150", "subregion_code": "154", "landlocked": false, "borders": [ "IRL" ], "independent": "Yes" }, "dialling": { "calling_code": [ "44" ], "national_prefix": "0", "national_number_lengths": [ 10, 11 ], "national_destination_code_lengths": [ 2 ], "international_prefix": "00" }, "extra": { "geonameid": 2635167, "edgar": 0, "itu": "G", "marc": "xxk", "wmo": "UK", "ds": "GB", "fifa": "ENG,NIR,SCO,WAL", "fips": "UK", "gaul": 256, "ioc": "GBR", "cowc": "UKG", "cown": 200, "fao": 229, "imf": 112, "ar5": "OECD1990", "address_format": "{{recipient}}\n{{street}}\n{{city}}\n{{region}}\n{{postalcode}}\n{{country}}", "eu_member": true, "vat_rates": { "standard": 20, "reduced": [ 5 ], "super_reduced": null, "parking": null }, "emoji": "🇬🇧" } 
[removed]
Oh yeah, if you're working with moodle it's a nightmare. That's probably your biggest issue. I wouldn't take a moodle contract for under $200/hour.
Unless you were poking around in serialized stuff, a simple recompile should be all that's needed. See [this PR](https://github.com/php/php-src/pull/2070) for details on that ABI break :)
This is everything that a container service should NOT be used to run. OpenShift and similar PaaSes are suitable for neatly defined apps that are run off version controlled source. They shouldn't be used as generic web hosts with file managers and visual database admin UIs (if you're going to do that, take it to a VPS).
&gt; How do you do joins? You don't need joins. Denormalization.
EmperorOfCanada - I've reported two of your posts, which could be deleted under at least (a) no personal attacks, (b) remain civil, (c) don't advocate violence. Please stick to a professional tone here - views on the FIG vary a great deal, and your dislike of it is not more valid than someone else's approval of it. 
[removed]
What's the (et al)? I thought Aura was the member project
I think really, don't take anything with phpmyadmin or similar to production at all (i.e. strip it, not give up altogether). They represent a huge security hole
Solar and Aura were member projects. There is a history of multiple projects being represented by a single voting member.
What have you tried so far?
Instead of following a tutorial, you should try to get the knowledge you need. Do you know how HTTP works? Do you know how an application communicates with an API? Do you know how guzzle works as an HTTP client? Try using guzzle to get any response, for example request google or anything. Once you got that running you should take a closer look at Twitters API and figure out how you could request this API. Anyways, questions like this are most likely answered in more detail in /r/phphelp but make sure you give some more context about where you are in terms of knowledge.
You're going to see more than 1ms every time you have to make a full TCP handshake along with the rest of OSI layer for whatever protocol you're using (http/etc) though my point was more that there is a performance cost that's easily forgotten every time you add another layer of extraction. I also suspect you will see more of a push for encryption between internal services as security breaches become larger and more frequent and shared cloud infrastructure becomes more and more prevalent. One large breach of AWS infrastructure (which I believe is inevitable) will go a long way toward accelerating this trend.
Whose consumer key and secret do those belong to?
I am myself a web-developer and had some problems with deployments being to complicated for smaller projects. Most of my 30 clients did very in-frequent updates and I felt I didn't want a SAAS. There for I created GitFTP-Deploy, where you only upload your changes from a local Git-repository via FTP or SFTP. I released the first version in July and I will release a new version with some more advanced features, like running terminal commands during deployment. Feel free to check it out. I am always open for input and feedback :-) https://eastwest.se/apps/gitftpdeploy. 
I'm not sure what you have said here that is even remotely controversial enough to garner nearly a dozen down-votes. Similarly, the ancestor comment is so bereft of value that I am astonished it has 21 points. I don't understand /r/php at all.
When you have a thousand servers to scale vertically, you again start thinking how to reduce the number.
You should look up youtube for some talks from 99er companies/people. They share usually quite a lot about how they do it and where the problems are. Also make sure you've read the article from martin fowler. &gt; Should each service have its own data store? In an ideal world it would be like that, because you can be sure that there is no overlapping between the services. Scaling, specialization and optimization are more reasons. &gt; How do you do joins? You don't join. You pull data from services and use it the way you need to. &gt; What are the boundaries of a given service? That is up to you. Usually what is practical and will give you a strategic advantage. &gt; Do services call other services? They can. But if you have a lot of services with cascading calls you can end up with large overhead and impossible to predict processing times. 
The PHP League has a really nice package to handle [twitter oauth](http://oauth2-client.thephpleague.com/providers/league/) for you!
Thanks for the positive feedback! The main use case I saw for observers is using them to save changes back to the config file(s). If you're modifying configuration values on the fly, maybe you will want to actually persist those changes back to wherever you are storing your configuration values. Think opposite of loaders. Might be overkill, but the observer pattern is fun to implement and there's no overhead if you choose not to use them, so they're there if you want. As far as env variables go, I'm assuming you're using the phpdotenv package. I _love_ phpdotenv and it's a shame I only found out about it after using Laravel, because there were so many previous projects I could have used it for! But whether you are using that package or not, env variables are stored in the `$_ENV` superglobal, so really you could simply pass this into the Configuration's constructor and be good to go. No need to set all the values like, `$config-&gt;set('db.main.password', getenv('DB-PASSWORD'))`. Working with phpdotenv might be a little trickier, something I will need to start experimenting with. Even in very specific use cases you should be able to load values in fairly easily, that is the whole idea behind using custom loaders. As for your last question, I always appreciate feedback on documentation. It can be hard to tell if your docs make sense to someone who doesn't know what your code does, so I will take all of your suggestions to heart. Your English seems great. I would have never guessed you're not a native speaker. If you'd like to contribute to the docs I would very much appreciate that. I myself will be making some changes this afternoon, but feel free to make a PR and we can collaborate together. I hope you really enjoy using this package. It's especially nice if you bind it to a DI container and can resolve it anywhere in your application! I look forward to hearing your experiences with it.
This habit of the local folks to criticize everything made me wonder at first, but now I find it boring. Are you being right from your own point of view? Sure thing. Does your opinion matter? Not a slightest. Why bother?
you're totally right about the ancestor comment. I upvoted it, but then reversed my vote to a downvote. Thanks. 
Hi, Thanks for your reply! CLDR does have info on continents and phone numbers (as far as I remember) and maybe even more (need to take a deeper look). But yes, some of the info is probably missing. As I said, CLDR got you covered on the official data (like the iso3166 code for example), and as for flag, you can you something like flag-icon-css or any other css sprite that works in a manner of `class="flag-[iso3166_code]"`. But if you need extra data (for example specific code that is not iso3166) then your package might come in handy! ;) Once again thank you for the time and effort you put into it! Good job! :)
I also struggle with this exact same thing. Currently building out a new platform which is going to be completely API driven from the get go - so instant thought was microservice all the things... only problem was we wasn't sure exactly what we would be building yet. After jumping back and fourth for a while I came to the conclusion that we should build out the initial version as a monolithic, but anything that felt like it could/should be a microservice would be pulled out as it's own package/service to at least give us a better starting point if we find we can/should make it a microservice. This gives us the advantage of not having to worry about auth, service discovery and other overheads that microservices brings to the table. Once we have a better grasp on the domain behaviour, then we will reevaluate microservices. 
And which one of those is for Twitter, exactly? (Hint: None are)
Make your own with oauth2-client?
I didn't say jk at all, actually. I will admit I hastily copied/pasted the link thinking I remembered twitter being in there when I saw the list the other night. That doesn't change the fact that it's trivial to write your own, though.
Everything of the above and mastering testing tools and frameworks. I'm not saying you should spend 3 times your dev time building tests, I mean you just need to be able to demonstrate a solidity of your features somehow. If you can setup a CI on top of your php projects, you're already better than 80% of php devs in the world. And trust me, the quality and speed of development of your projects will be nothing like you used to know once you build tests along your usual feature development. +1 for looking other languages and frameworks. I've been using jasmine/protractor with angular1, it's interesting to compare to PHPUnit/Behat.
Meaning is relative to context. 
It's all right that you don't understand something. If you don't understand, or your experience is too limited, or you don't see value for yourself - just move on, to another topic that you find more familiar. As simple as that. I am not an Intel emploee, and asking me to sell you a tech of which I am learned this very day myself is a strange whim.
I think this is a fair summary, except for the spelling issues ("Paula", "Aurora"). I'll say only that the acrimonious atmosphere is a result not of the vote, but of the secretaries having championed the matter in the first place, thereby aiding and abetting the complainants, one of whom (Larry Garfield) was one of the major authors of FIG 3.0. Incidentally, the secretary who brought forth the matter was Michael Cullum, the other major author of FIG 3.0.
I echo these questions. What's the point of GraphQL vs simple JSON?
Recently bought one of their libraries. Haven't been able to really dig in yet, but they seem very effective.
And with that attitude you'll never be.
Without know exactly what the problem is, it's most likely not related to MySQLi, but probably more either some [changed functions](http://php.net/manual/en/migration70.changed-functions.php) or more specifically, the [backward incompatible changes](http://php.net/manual/en/migration70.incompatible.php) which your query builder probably makes use of. You could try and run the query builder through the [PHP 7 Compatibility Checker](https://github.com/sstalle/php7cc) and get a list of places in the code you should be aware of, if you want to try and fix it yourself.
Or Silex, or... It doesn't really matter, you waste more time thinking about this than doing it in "something" and you'll never get started.
&gt; [...] should someone like me just jump into laravel before trying to build any formal understanding of PHP from wherever its base might be? No, you shouldn't. Using a framework isn't a guarantee that your code will work flawlessly, be secure or being easy maintainable. You could look at a framework as the chassis of the car; the chassis does indeed tell you stuff (just by looking at it) where the engine should be, where to place the tires, etc. And with a nifty manual, you'd get some information needed for what engine size, where to put the wiring, what kind of fittings to use and so on. Now, if you have no basic mechanic skills, you'll probably never get this car running (or maybe even assembled). Now, this is pretty crude, I know; but transferring this logic to you starting out with a framework without any experience will probably not be as big of a challenge as assembling the car, but you'd probably have a hard time getting things to work properly, staying safe and having it running smoothly. That being said, by all means - go; learning by doing can be a great resource combined with researching best practices.
One of those mysteries of the universe. Then one day someone with social influence will say "hey why not just use JSON here" and everyone will suddenly realize GraphQL is kinda pointless (as a dedicated DSL, that is). :-) The idea is solid though, I've been doing this before GraphQL (through a pure JSON API) and I felt validated to see someone else adopt a very similar approach.
why do u think symfony is better .. 
Good. Now stop posting this crap and using /r/php as your personal dumping ground. Your post and link has naff all to do with PHP, and everything to do with your own insecurities.
You can do this with a CMS where setup is largely point and click. But a framework needs deep programming knowledge, because it exists to help you programme your application. 
Statics everywhere, active record, problems with LTS versions, probably something more, but for me It's enough. 
Don't reinvent the wheel. Use https://packagist.org/packages/abraham/twitteroauth or https://packagist.org/packages/hybridauth/hybridauth 
I would say you would go with Yii2 it is really a good framework. 
Why not use something like https://github.com/m1/vars ? Seems to have way more downloads and support.
As far as I'm aware, they both should be OK general choices for a web site. But on the other hand, have you considered using only exactly the needed packages for your use case. For a startpoint, something like this in your composer.json: "require": { "symfony/event-dispatcher": "~3.1", "symfony/http-foundation": "~3.1", "symfony/http-kernel": "~3.1", "pimple/pimple": "~3.0", "symfony/routing": "~3.1", "twig/twig:~1.0" }
Thank you, In most cases what I need are user roles and the users email..but I have not thought about the case when a role is revoked..but anyway it means I can just serialize the user into the token and use it for authentication and have the token revalidate only when the user has changed or ttl has expired? 
&gt; I decided to go with JWT for auth. Both Lumen and Symfony relies on [namshi/jose](https://github.com/namshi/jose) to provide JWT signing. So both provide pretty the same level of security. &gt; with Symfony you have to go and get the user from the db on every request to be able to use the firewall.. Actually you could make lazy loading of user just providing instance of `UserInterface` from your user provider. But usually you check is user is blocked or whatever. Also some applications requires session invalidation and so on. Anyway you always has Doctrine's cache. I think this is more preferable thing to do.
Sure, but you'll need to have a system in place to determine if a user has changed with this approach, i.e. version number / timestamp of last change and then query that storage to determine if the token's user data is stale. You then have the complexity of issuing a new token with fresh user data back to the consumer - Do you send a status code and they re-auth? Custom endpoint required as you don't want them providing username/password again? Header on the response? I'd strongly recommend just storing any immutable data in the token (id and maybe username if your domain reflects this) and just retrieving the user from the DB as you're looking at a very cheap lookup by ID query. If you really must optimize this out consider returning a `UserInterface` instance that eager provides the immutable properties, but lazy loads in mutable ones on first access. 
Thanks..I already realized that I don't need to access the DB..with lumen I use firebase's JWT library and my own middleware..so it looks so much easier and simpler than with Symfony..on the other hand Symfony is more mature and the development time needed is afterwards a lot less..so I will stick with it and focus more on caching :)
You idealize a bit here. Most frameworks have an opinion how to do things, just like wordpress has. If you diverge from the opinion the framework may become a burden too. It may seem that people quickly create apps with laravel, but how many years experience do they have? Like the other guys suggested, don't just use a framework. Try to understand the concepts and how it is done. With your background you likely don't even have experience with unit testing. It won't help you with wordpress, but it is a basic technique for everyday work. Go and learn about it. Alongside of it you will learn things about OOP and some bad practices like global state and how to seperade things properly. Look into MVC and built your own framework, including tests. It doesn't have to be the new laravel, but doing something basic will teach you a lot. The day you have a good idea what laravel is doing, and why you can choose to use it. Regarding recommendations. For frontend/JS it is currently impossible. Everything is moving super fast and there is no clear winner, within 2 years the landscape will likely be totally different then now. For backend Symfony would probably the safest choice, but also rather conservative. Laravel if you want to be a hipster. Be aware that many frameworks heavily rely on symfony components.
Wow! You kinda quickly jumped to conclusions there. „Slow” is subjective at best. Even if it’s slower than phalcon or any other framework (you’d have to measure your particular use case), I don’t think it’s worth it to choose a niche technology over one of the industry standards, unless your application is performance-critical. OP didn’t say anything about performance so it’s safe to assume that Symfony will do just fine for him, and he most likely won’t end up locked in with a hard to manage technology. In other words: yes, I believe phalcon is faster than Symfony in most if not all use cases. No, I don’t believe it’s worth it (without knowing the project specifics) because the Symfony ecosystem is orders of magnitude larger, so it would be easier to find tutorials, libraries, help and developers.
Yep. I'm getting pretty tired of people using Notepad++ to write code and then wonder why they're not on-par with the rest of the team. This day and age, it's almost not an option to use a simple text editor to write code professionally. (Trust me, people do.) So stop being stubborn and get a high end editor.
We see your point of view, but would like to ask you some questions: - how would you send arguments in JSON in a clean way? (each field can have arguments). GraphQL example: http://graphql.org/learn/queries/#arguments - how would you use Directives in raw JSON? GraphQL example: http://graphql.org/learn/queries/#directives Above might seem to be complicated, but is really helpful in a lot of situations. 
Just cause you think it's right doesn't mean everyone else thinks it's right. Sometimes you need to learn how to lose a battle in order to fight another day. 
Thanks, looks like a good decision. Redis is the best tool for PHP session management. Here is detailed an explanation http://multi-programming.com/blog/php-sessions-in-redis. 
Exactly my thoughts on commuting as well. It's like 60% of the reason I took the job in the first place. To be perfectly honest even if I end up hating it, it's still better than a hour long commute.
Fair point.
Drupal, from my limited experience with it (a few months out of college), is actually reasonable if not good at its intended purpose (content management system with customizability), but in practice people tend to overuse it beyond what it's suitable for (most commonly, trying to use it as a general-purpose web framework) and that's what falls apart.
In all fairness most people tend to use most things beyond what they were made for. So I'll either love it or hate it basically.
Watch some of the [videos from the Drupal conferences](https://www.youtube.com/user/DrupalAssociation), it will help you understand how to approach Drupal !
Drupal is awesome and a pain in the ass at the same time. It's best for content sites that need more functionality (frequent polls, profiles, other custom widgets) than you'd usually want to wrestle with in Wordpress. My biggest advice is that if you ever consider writing a long php helper function Google to see if Drupal already has a hook for it (90% of the time it will).
Get down and dirty with a few tutorial sites like drupalize.me or buildamodule.com for a few weeks. I've worked in most of the major CMS's and Drupal is like any other: there are conventions and mindsets you need to have. I recommend building a few simple personal things in it to get the hang of it (blog, image gallery, community forum, etc)
An obvious downvote brigade in this thread
I'll probably end up doing that. It seems like a good idea, at least I can hate it/love it beforehand.
Hey man, I'm in a similar situation to you. Been working on the bleeding edge of PHP for the past two years and just took a new job (shorter commute, higher pay, etc) that's running PHP 5.3 and codigniter 2... Mind you, I just started a month ago, but I've been trying to focus on the positives. I have a fresh slate here to update a lot of their software. In fact, for one of their apps, I installed a new front controller that routes the request either to laravel or the codigniter project depending on a new router that I whipped up. That way we can upgrade in iterations instead of dropping everything and rebuilding. I also look for places in the code that could be implemented better or are in desprate need of refactoring. At the end of the day, though, it sucks going from interesting and engaging work to work that's tedious and outdated (I can't count how many times I've said "why are we having this problem? This should never be a problem!"). What I also ended up doing was starting a few side projects with friends, now that I have more mental energy at the end of the day.
Totally agree, I'm working with Drupal for almost 9 years now (not exclusively, but a lot) and it does suck at anything else than being a CMS. And its API is like HELL (yes, HELL with CAPS because it's a seriously huge hell).
Don't be stupid when listening to people saying that the brand new Drupal 8 is based upon Symfony, it's bascially a huge lie: while it uses a few Symfony 2 components, it's not based upon the fullstack framework itself, and most of Drupal 8 is once again the wheel being reinvented (it uses it own database component, content handling component, it uses its own everything except the Symfony's DIC actually). What I mean here is that if you want to go to Drupal, be aware that nothing in it looks like whatever you already saw, it's complexity is terrible, it may take months to grasp how to use it correctly, years to be able to pretend to know it. But, aside of that, if you're confortable enough with learning a new tool, don't hesitate and go, but be aware, the road's gonna be a long road :) Haters gonna hate and downvote me, but seriously, Drupal 8 is a good CMS, don't use it for anything else.
Red flag, as I said upper it uses a few Symfony 2 components, but it seriously does nothing like Symfony, it'll be harder to understand how it works if you assume it's based upon Symfony.
Compared to working with Laravel and Symfony, you will hate the shit out of Drupal. But being a lot closer to home and having more pay means you can start drinking sooner AND have the money to do so! But in all seriousness, the work you do is only a fraction of the job. The culture, your manager, processes, colleagues, and environment all have MASSIVE effects on the quality of your employment. Whether you made a mistake or not will be affected more by those factors than by the tech stack you work on IMO.
So, you took a job that centers on a technology you know close to nothing about. Then instead of educating yourself, you come up with some assumptions about Drupal, and you allow yourself to wonder (still without educating yourself) if you will like it or not. Speaking as an engineering manager, thank you for the reminder of how bad some hires can be even if they have related technical experience. It helps me stay on the lookout.
Consider moving functionality that isn't strictly CMS to other applications before upgrade time.
I have this framework I've been working on called PHPhaerie. I guess I could use that.
&gt; "The only down side about this job is that, well, it's Drupal". It's interesting to look at how we recognise or criticise languages/platforms/technology. It's like we've got an undocumented but widely-recognised "pecking order". Things like Haskell and Go are pretty cool. Drupal and Wordpress are not. They're *way* down there in that pecking order. But you know what else is often mocked and derided? PHP. &gt; "The only down side about this job is that, well, it's PHP". Cue sympathetic sighs. I've been a developer since around 2001, and I've almost exclusively worked with Drupal since around 2007, and you know what? It's alright. Sure, it's neither as elegant nor as architecturally pure as a number of other frameworks. It has quirks, oddities, "drupalisms". The "Drupal learning curve" diagram has always given me a wry chuckle, because there's some truth in it: https://www.commercialprogression.com/sites/default/files/drupal-as-a-jigsaw-28-638.jpg But you know what it reminds me of? It reminds me of PHP. It has history, that's how the quirks came about! It's had mistakes, some of which have been fixed, others buried beneath a thin veneer of API (but if you peek under the layer, you might wince a little). It has some rough edges, and it will hand you all the length of rope you need to hang yourself. Over the last 9 years, I've worked on Drupal sites ranging from small brochure-ware sites right up to multimillion pound multi-year projects. And although I'm normally hired onto projects for "Drupal", I've had plenty of scope to work with other languages on those projects. Ruby, for creating puppet manifests. Java, for integrating with ActiveMQ. I even ended up writing VBScript, for a client who needed some help consuming RSS from our Drupal site. So even if you're doing "Drupal", you generally don't have to look too far to find an excuse to use another stack every now and again. Is my opinion biased? Drupal's earned me a decent paycheck, sent me around the world, helped me speak at over a dozen tech conferences, and found me work on a whole bunch of really interesting projects. So am I biased? You betcha :-) 
I went the other route a few years ago... I moved to be closer to work. Went from 45 minutes to walk-able. That actually made work itself more enjoyable. Good luck!
This comment gave me an aneurysm 
It stands for PHP Hypertext Processor. Hope this helps.
Parents don't allow you to use Google or Bing?
They do, I'm just out of the loop.
I know latest version of Drupal is based on Symfony so you'll work with Symfony Components. What I don't like about Drupal ...and I work with Drupal 7 was all procedural and it had hooks....I didn't like it very much. 
The problem with WordPress is that there are a lot of terrible WordPress developers, which means lots of maintenance of shitty plugins/themes. I do lots of WordPress plugin/theme development (I'd say about 50% of my job, sometimes less sometimes more), and maintaining older sites done by "developers" who just install 12+ plugins to avoid writing code -- that's my least favorite thing about WordPress. 
This comment killed me. Am now dead.
&gt; your communications come across as someone who has desperately wants to prove they're knowledgeable enough to belong which is understandable given your confidence problems about your degree Thanks, you pretty-much nailed it. The problem I've found with recruiting sites is that recruiters/managers mainly look at your job title and ignore your skills (at least that's what I found with hired.com). I'm a data analyst but 90% of what I do is software development related to ETL and reporting/visualization/analytics. This has nothing to do with the company or the domain, these are responsibilities that have been thrown on my shoulders alone. Obviously, at an interview I'm not going to mention how the pay was crap, responsibilities that completely ignore any scope of training or job title, expectations were borderline unrealistic, I'm going to talk more about the opportunity I'm applying for. I'm just speaking off-the-cuff on reddit and getting jumped on by the stereotypical half-fact-conclusion pitchfork types, so I don't take it personally and I'm not really surprised. Given the amount of people in this sub who have a complete mental and emotional breakdown over the idea of jobs that require graphic design, web design, and PHP development from a single person... I don't really expect very many people to be able to relate to what I'm going through as a DBA/BA/QC/IT/Sysadmin/Dev/Data Analyst, with a boss who thinks all I do is "run queries", that makes less than the national average for any of those job titles. The shit I'm in didn't happen overnight, but I need to get out of it.