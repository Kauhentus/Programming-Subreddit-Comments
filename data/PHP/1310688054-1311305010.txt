Why not? Competition breeds innovation. It's not hurting anyone.
I stopped reading when he suggested that Laravel had a gradual learning curve. http://en.wikipedia.org/wiki/Learning_curve
This account could be... interesting. By the way, [here's one I made earlier](http://www.reddit.com/r/programming/comments/dpzma/regex_to_tell_difference_between_o_and_0/c123sw1).
It breeds innovation when people are trying to do things differently. The thing is, most of these frameworks are very similar and rarely do anything innovative. 
this !
I looked at that when it was initially released and it looked really promising but the documentation at that point in time was even more sparse than KO3. At work we just began rewritting our app in CI2.x so I'm going to be sticking with that for a while.
Haha - bad memories. Gather around folks, story form: I remember when I was first starting in my web dev career and I had to debug some hack-job of a osCommerce setup (before they even attempted to organize their code). A mess of hacks from previous dev - a tangle of java apps feeding data from the suppliers, additions were randomly placed in the code, no comments, whole sections commented out, random database mods and the list could go on. It was beautiful - they had some falling out with their host, had a secretary move the site from one server to the next - the new server was hosted by "the CEO's friend's son" (some kid who thought way too highly of himself) who wouldn't give me any help or access and had a completely different system configuration. It was a nightmare with no error reporting and when I had almost no real-world experience. I learned "die()" is a aptly named function - "Die(); Die(); Die();!"
Sounds risky. A better option is changing `error_log` path to a directory outside web root that you would have ftp access to. Though you might have to create the log file yourself and set global read/write permissions on it (god forbid 777 on *nix) depending on the setup.
I agree. But performance in many cases is not an issue. Especially if you cache most of your data results. Which you should most of the time. The op asked for the 'smartest' way. What did he mean exactly? I believe the smartest way is about writing clean and maintainable code and keeping things simple.
&gt; You're just as bad as the sys admin for not being able to come up with a solution to this minor issue than he is I'd agree there. Maybe best to suck it up and devise your own workaround or adapt to it instead of complaining. There are several ways to deal with this, even up to including creating a VM on your own system which matches this production server environment. This way, you have a chance to test the "live" version yourself before actually moving code to real production.
&gt; First of all, I was venting about it because I was frustrated Venting about a personnel issue within your company on a very popular website is among the worst possible ways to handle this situation. You're not an honorable whistle blower here with this situation. So, you are throwing a hissy fit rather than seeking out ways around this problem. As you said, you presented the problem to your manager. Time to move on.
Ideas are a dime a dozen and even if this one is truly original, execution is where the magic lies. My advice is to be as open about your idea as possible, talk to every programmer you know about it and hope that it is truly unique enough to garner interest. Professional developers are pretty good at spotting ideas/projects worth working on. If you don't have any funds to pay for professional development, the only thing you have to offer is the excitement/opportunity to work on something that is personally intriguing. If you talk to a bunch of people in the industry and they don't get excited or want to help you can pretty much bet that no matter how awesome you think your idea is that it isn't worth the time.
'... field IN('.implode(',',$ids).')'; or mongodb: {_id:[ida.join('.')]}
Never mind that. What does `$name` contain if not a likely sql injection attack.
You have excellent composure in the face of fierce criticism. Hold on to that trait.
Be careful about SQL injection, folks Check $ids before you use it. Make sure they're integers or whatever. 
Thats why I added "if the ids arent direct user input"
Sure. Oracle for example has a hard limit of [1000](http://stackoverflow.com/questions/4121093/sql-statement-in-contains-too-many-expressions). SQL Server has a soft limit [governed by system resources](http://msdn.microsoft.com/en-us/library/ms177682.aspx). MySQL has a soft limit governed by [packet size](http://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html#sysvar_max_allowed_packet). 
Agreed... instead of rolling your own, there are plenty of great frameworks already out there that could use more contributors. 
A minor version number jump or two shouldn't completely outdate all of the information in the book... if it's like any other software project I've seen, the book will still be at least 90% completely relevant.
&gt; And i wold stay far far away from CakePHP if you want to learn any good coding practices. Why is that? What bad practices do they perpetuate?
Sometimes it's possible to reduce the complexity of a problem, sometimes with some compromises, sometimes not. A lot of 'sometimes' in that sentence, and for good reason. Generalising complicated problems as never being able to be simplified is a bad one to make.
I love when companies hire people that don't know PHP then train them, instead of just hiring me. I guess using PHP for 10+ years is actually *worse* than not knowing PHP at all.
lets see ... - abuse of static classes - constructors do work ( thus untestable ) - php4 code - global state in core ( in form of singletons ) - mvc implementation is just wrong - complicated (cyclomatic complexity over 50) and poorly document methods in core classes 
&gt; DB's by default open for injections How exactly? It seems his compiler uses ? etc.
He is using PDO, but by default PDO is emulating the prepared statements. Thus removing all the benefits promised by native prepared statements.
What? PDO sends entirely different commands to the database for prepare and execute. What exactly are you talking about?
No it does not. Not be default. Look up what `PDO::ATTR_EMULATE_PREPARES` does and which is the default value for it.
Building new framework is like reinventing a wheel. Only .. you see .. all the php 'wheels' have been mostly rectangular.
Even though they may be emulated, they are still properly escaped, so this point is pretty much moot... Find me a injection possible with mysql_real_escape_string on a UTF-8 encoded connection, and I'll take it all back 
That's not nearly as fun though.
Holy shit, that's mad. I wonder why more people don't know about it. Is there any reason for setting this option to be `True` unless you're using a really old version of MySQL?
First of all, framework is **NOT USING** mysql_* functions. So there is nothing to take back.
I really can't take any project that ignores all existing programming (PHP or otherwise) standards and best practices without any kind of justification seriously. There may be thought behind it, but it smells like general cluelessness. It's just procedural code dumped into classes with zero comprehension of object oriented programming. And of course zero test coverage. Even as an exercise in writing your own framework it is pretty pointless.
Thanks. I thoguht about placing this in sql, but I figured since i'm workign with php, there might be a clever solution using PDO or something. If i don't have the values in a temporary table, it probably wouldn't be efficient to create it on the fly with php? I'll look into that "union select X", I'm not familiar with the union operator
If this was on someone's resume as a recent project, it would be an instant non-hire. Unless the author is a very young junior programmer with zero work experience and no formal training, *and* we could afford to spend *years* teaching them the basics. There are already way to many PHP-hacks out there doing cargo-cult OOP, and most of them are unteachable. 
If you're concerned about money, go get another job making more money then. You likely will never get much beyond annual COL raises at any job once you start there, so go get a different job and get a 30% pay boost overnight. At some point you'll be the one making the most, and you'll have people bitching about you earning more than them and not knowing something they do - it happens to many people eventually. I'd like to say it happens to everyone, but sadly, some people never advance to that point. Really though, go get a new job. The market in most places is just begging for accomplished web developers of all stripes.
And yet, when you DO try something different, you are basically told by this community that you should be doing it the non-different way or shouldn't waste your time.
If you wouldn't hire someone because you think they lack perfect OOP manners, I think I know a lot of people who wouldn't work for you if they had to. From a hiring perspective (assuming this was a 'recent' project for the author) I'd take from this that they're willing to try new things and are good at completing projects in the general sense. I'll happily take a bit of time to fill in any knowledge gaps if I knew I was getting someone who was used to seeing a project through and could at least **attempt** to think outside of their own box.
so, if i want to use this, I can't have commas in my URLs? It's not a common requirement, but it is something that is valid to use. :/
Haven't benchmarked it recently, but earlier it was for speed (prepared statements running on MySQL itself was/is rather slow) and for the query cache (prepared statements bypassed the query cache on previous versions on MySQL, not sure if this is the case today).
&gt; The op asked for the 'smartest' way. What did he mean exactly? When you're done preaching that the SQL shouldn't be gotten correct because you imagine there might be a cache in front of it taking the brunt, let someone else know. &gt; I believe the smartest way is about writing clean and maintainable code and keeping things simple. If you think a single join isn't keeping it simple, then I don't know what to tell you.
PDO is basically a garbage stack. The reason people like it is that once they've got PDO, they think they have an efficient portable gateway to all SQL which is magically fast. Even if you show them benchmarks, or point out critical basic speed things like bulk insert, they'll just throw a tantrum, insist you're wrong, and downvote you. &gt; If i don't have the values in a temporary table You're guaranteed not to, since temporary tables are cleaned up after every query. The query I gave you *makes* the temporary table. That's what the subselect full of unions does. select 'it' as example union select 'works' union select 'like' union select 'this'; &gt; it probably wouldn't be efficient to create it on the fly A hell of a lot less inefficient than using operator in. &gt; create it on the fly with php? You seem to be deeply confused. When you're writing something in a query, you're doing it in SQL; it's never anything more than a string to PHP. When you're doing something in PDO, you're doing it half-and-half in the PHP: PDO will fetch generic results then filter and sort them clientside in many cases. No matter what you do, if the join data isn't already in the database, then you are paying at a minimum the cost of putting it together as a string (the query) at the PHP side and parsing said string at the database side. Nothing will change that. PDO isn't magical. The only way to not pay that expense is to already have the match list at the database's side as data. Stop trying to psychically predict, on grounds of where you think it is, what will be efficient. Your internal compass is not yet sufficiently strong. Write the query both ways, and benchmark it at a range of data sizes. Before that, you're really just guessing.
EDIT: Clarity It is a little disheartening reading dismissive statements, "this is different therefore bad". It isn't great, but not because it isn't pure MVC. There are several important issues with the framework. Major Environmental (static) dependence from static &amp; configuration creep. Statics have been used liberally, breaking encapsulation all over the place. A lack of *dependency injection* has resulted in many areas of the framework being tied to each other in a non-intuitive, non-modular way. I should only need the class API to know how to use it: not the config api, not the config parameter requirements, not pre-defined config values, not which classes need to be in the include path. 'Abitary Files' seem to be used quite frequently. Routing/configuration/logic is found in "return array()" files (!) rather than being part of an *architecture* which has place-holders for the composition of logic. $route-&gt;add('GET', '/', function() { return new View(); }); would be better, with $route instanced and used in an appropriate location within the architecture. The lack of MVC/some dispatch system has obscured how the rest of the library can be composed into an application and this has lead to statics and configuration creep. My initial impression was that the author expected users of his library to take it and use it to build some problem/domain-specific architecture, however after seeing the example application i was disappointed. I found the lack of MVC initially refreshing. I think a functional library with object oriented state management is an extremely interesting 'research' area for php frameworks, and it is certainly worth while releasing some non-mvc frameworks which take this route. This is nevertheless a reasonable attempt for a person who hasnt written many frameworks before. Writing frameworks is an excellent way to improve design and conceptual programming skills; library programming is much more reliant on technique than application programming. 
when emulating prepares for older mysql clients, the PDO library uses the mysql_real_escape_string function from the *mysql client library* values in emulated prepares *are* escaped.
for those confused: this isn't exactly accurate. yes, PDO emulates prepare for older databases by default, but your bound values **ARE** escaped. for example, when PDO emulates prepares for older mysql clients, it passes bound values through the mysql_real_escape_string function in the mysql client library. native prepares are simply *better* at understanding your SQL, including dealing with meta-characters in values that would otherwise need to be escaped manually, because it lets the database handle it, which groks SQL far better. that certainly doesn't mean the PHP docs are wildly inaccurate where it claims PDO::prepare takes care of this with no mention of the PDO::ATTR_EMULATE_PREPARES attribute negating that.
alright, thanks for educating!
Any time. Thanks for being good spirited; that's sadly rare around these parts.
Way to actually provide some useful input. Upboat to you sir.
&gt; EDIT: there will probably be just 1-10 IDs Famous last words. I've said them, I've heard them, I no longer believe them.
Aye, fair play. Might do some benchmarking on Percona later 
Well, programming is one big hypocrisy...
At last. The online community has been advocating against the outdate `mysql_*` functions for years already.
I thought it already had been.
-1, inflammatory title. This is just a *proposal* to deprecate it. It has not yet been deprecated. I eagerly look forward to that day...
This is a proposal by Philip Olson, who has significant clout in the PHP internals community. I suspect it'll pass.
It has been unofficially "soft deprecated" for a couple of years, in that anyone with a lick of sense does not use it, due largely to its lack of parametrization support.
Oh, I'm sure it will as well. However, it hasn't happened *yet*. When it does happen, I'll be leading the street party!
Fine, but I would rather that they just killed it outright in the next version.
And then everyone gets upset because it breaks e.g. [Wordpress](https://core.svn.wordpress.org/trunk/wp-includes/wp-db.php). Something like this needs to be done slowly, even if people have been told not to use it for years.
That would be really stupid, as it would break literally millions of PHP files. The consequence would be that almost nobody would upgrade to the next version, meaning that other essential improvements were left behind.
It would be totally awesome you mean? Like 2004-2009 all over again with the mishmash of PHP4 and PHP5 support.
But even php.net still uses ext/mysql in many places, and we are a lazy bunch. :)
To be clear, it's a proposal to softly deprecate it, which means focusing on documentation while not adding errors or adjusting the PHP source. Sure the errors will happen one day, but ext/mysql is a special case so it's going to be an extremely slow process. Whatever the case, my main (and only?) focus here is education, and that will be implemented.
Agreed, and this soft deprecation will give you yet another resource (and in this case, the official resource) that both explains why, and shows how to move towards the improved APIs. It's going to be great.
No joke- the bug tracker being down for a week was particularly hilarious.
batch ftw.
Are you looking at the template files for each page? Make sure the sidebar is included everywhere you want it.
Post the form to the same page! then you can set all the variables you want and they will be preserved EDIT: Look at this pastebin. FTFY. http://pastebin.com/FW6N7upd
Wow, why is Wordpress still using it?
just realized I screwed up. delete the "else" part of the control statement and just stick $output = "blargh!" under the mail() function. sorry, won't let me edit the paste.
http://www.php.net/manual/en/book.mysql.php &gt; *jesse@php 15-Jul-2011 10:21* &gt; &gt; *In the future, new releases of php will rate the mysql_ extension deprecated, eventually will not be included in the code.*
Didn't they just integrate this into the standard library in 5.3? Not my fault, but the place I work at is using mysql 4 (upgrading soon, also I started recently), and it's totally incompatible w/ php 5.3 because of how the mysql lib is built in.
PHP 5.3 added the [mysqlnd](http://dev.mysql.com/downloads/connector/php-mysqlnd/) extension (mysql native driver) which, if compiled in, is used by both the mysql\_\* and mysqli\_\* functions as well as by PDO. It replaces libmysql. You can compile PHP 5.3 to use libmysql still, so you have the choice of either – mysqlnd is faster. What they are talking about deprecating here are the old mysql\_\* functions that don't even support all the features of MySQL 4.
The same reason they only required 4.3 until recently: Because of *awful* shared hosting.
I don't know why you're getting downvoted, it's perfectly valid. I think it's reasonable to assume that visitors to your website should have Javascript enabled. Why should you degrade the performance of your website and user experience of a vast majority of your visitors for such a very very few? It's like saying all cars should be built to be used by people without legs.
Why not just try and detect mysqli and fallback on mysql if it's not found? It looks abstracted enough for it.
You'll have to ask them. I'd expect them to be using it in 3.2, given the 5.2.4 minimum PHP version...
Interestingly enough, the headline doesn't say it has happened yet, it says that it will, just like you did.
For those who were as confused as me.. &gt; The objective of allRGB is simple: To create images with one pixel for every rgb color (16777216); not one color missing, and not one color twice. http://allrgb.com/
Removal would not be much of a problem. One could just redaclare most of the mysql_* functions as simple wrappers around PDO or mysqli.
Yup! The sidebar is declared in the template; it shows when there are no posts to display, but does not show when there are posts.
No, it says it will be, when in fact it's been *proposed* to be. There *is* a difference, even if the proposal is almost certain to happen. It's important to get this stuff right. PHP developers seem to latch on to the first bit of news that happens, despite changes later. A lot of people still seem to think that PHP6 is a thing, for example...
Eh, it's kinda different than that. I will make more than him, guaranteed, just not for another few years. And I can't really go to another job. Also, I'm not doing a web development "job", that's just one of my tasks.
Oh it is. :( A lot of the bigger companies (at least the ones that do that) are probably afraid that you're set in your ways and they can't get you to code how THEY want you to code, so they get newbies and teach them half-assed PHP.
As I also said somewhere else, I finally got it fixed, it just took a few hours instead of a few minutes. And since I posted to self.PHP, pretty sure I can post anything I want.
Lol, I think the Hivemind has Pseudo-permanent PMS.
Well, as stated several other times, the webserver is pretty securely locked down. I don't have access to the error_log or anything, and since it's just a mirror, I'm not going to write a logger JUST for that website. I should never have to touch the code on that particular server. 
Nope, blank page. Die doesn't print anything. Also, it's fixed, but thanks for the help.
I did fix it, and I wasn't asking for help. I just figured many people in this subreddit would understand the frustration and relate to it. Guess not, guess you're all perfect coders with perfect environments. I, on the other hand, have this one shitty environment that always hates on something in my code that works perfectly on my dev and primary servers.
Can't change system paths and can't chmod.
Sounds pretty close to what I'm having to deal with now.
I don't know about Wordpress but Drupal 7 is now usingPDO.
Use either [MySQLi](http://php.net/mysqli) or [PDO](http://php.net/pdo). The biggest reason everyone hates mysql\_\* functions is because they don't support a feature called "[parameter binding](http://www.php.net/manual/en/pdostatement.bindparam.php)" which makes it 100% impossible for your site to have the security vulnerability known as "[SQL injection](http://www.php.net/manual/en/security.database.sql-injection.php)". Technically you can write safe code using the old mysql\_real\_escape\_string() function to escape EVERY variable that you interpolate into an SQL query, but in practice, people always screw up. Plus it's really hard to read SQL interpolated with dozens of mysql\_real\_escape\_string calls.
Although I would use pdo or msqli there is no harm in using the deprecated mysql driver, especially if you're just learning. It's quick to get up to speed. It's common practice to escape your input and output, using mysql_real_escape_string() / htmlentities(). Do yourself a favour and download a php framework (I use codeigniter a lot). It will help your programming structure immensely.
Long story short: Because ~~some~~ most coders can't figure out how to properly sanitise input.
It's also slower and less efficient than mysqli, and if you use PDO and derivatives such as Doctrine, you can even changed underlying databases and the code will continue working.
Ensure that the sidebar is included on the post page.
The current [PHP MySQL Overview](http://php.net/manual/en/mysqli.overview.php) page will help, as it compares the three extensions. This will be updated while ext/mysql is softly deprecated, but it's informative today.
lol, I'm wondering if the OP is aware that you can disable ini_set for specific settings in PHP.
Isn't that a problem with the developer, rather than the language?
One of the first things I did when I learned PHP was write an abstraction class that performs my queries for me. This way I can just say $db-&gt;query($query); and not have to deal with fetch_assoc and all that fun stuff. I highly recommend it.
That is not an answer, as abstraction dosn't mean you wont be using mysql_ function. nemeth88 is 100% right.
Yes, but when using the alternatives less responsibility is put on the developer, so it is harder to write bad code. And that is justgoo for everyone. 
And apparently don't consider how much time and money (or rather, money and *more money*) they waste when they do this. And, you know... how rickety their code is going to be, and how disastrous it's going to turn out. Now that I think about it, I suppose I would vastly prefer to *not* work for a company that doesn't think that far ahead.
Which is better - PDO or msqli? edit: I think I remember the main advantage of PDO - database engine independent. (At work I have to write for ms sql so I use PDO)
There is some more information on what it does and does not do embedded in [this](http://marc.info/?l=php-internals&amp;m=131073409831187&amp;w=2) e-mail.
You use them when you are trying to access a static method for a given class. And , in general ( there always are exceptions ) they are sign of bad application design. Static functions usually are procedural in nature , and global in effect. Other place where you might see them is in a [documentation](http://uk.php.net/manual/en/book.reflection.php). But in this case it does not mean that methods are static .. Oh. And you can call normal methods with double-columns too, but it will generate error in E_STRICT mode.
Yes. PDO allows you to connect to different db vendors. Although in practice you may never need to do this, it just makes more sense to use PDO, considering it's going to do everything the mysql functions will. Real world example from me, a site i had made was moved to a server with no mysql, so I used the sqlite driver instead and it just worked. sqlite instead creates a local file of the data, versus talking to a server through a socket (mysql).
The [Singleton pattern](http://php.net/manual/en/language.oop5.patterns.php): &lt;?php class Database { private static $instance = null; private function __construct() { // connect details here } public static function getInstance() { if (self::$instance == null) { self::$instance = new Database(); } return self::$instance; } } // whenever/wherever you want database access: $db = Database::getInstance(); ?&gt;
Not engaging in premature optimisation is typically pretty good for performance (and maintanability of your code). Final rendering of data is normally such a small percentage of total execution time, you're often better served optimising your SQL queries and ensuring the proper indexes are in place. From a maintenance point of view, using HTML and only PHP for parts that require it will be far better going forwards. Having your rendering seperated from your business logic and data access will be even better.
Singleton in an anti-pattern which should never be used.
&gt; it's really hard to read SQL interpolated with dozens of mysql_real_escape_string calls Do people not wrap this stuff up in a class to handle the binding for them? I don't think I've used a mysql_\* function directly in an application since 2002, and have always gone through a protective layer such as adodb or some other wrapper to escape and insert (not *bind*, obviously) variable data.
Use a framework that handles templating for you so you don't make common mistakes. I like Smarty. Some are going to say just use PHP, but unless you know about various common pitfalls and are willing to code around them and implement your own caching, it's going to likely be inferior to Smarty in most ways. Cheers!
Please stop stating opinion as fact.
Use it to access [static](http://ca.php.net/manual/en/language.oop5.static.php) variables and methods. Also see [the docs on the scope resolution operator](http://ca.php.net/manual/en/language.oop5.paamayim-nekudotayim.php).
As I said in my post, I've looked at the php.net documentation and examples, but It doesn't really explain when or why it should be used...
Yeah.
The double colon is used to address static methods and static properties of a class, elements that are global to the entire class and don't require instantiation. Both are defined in the class by adding the "static" keyword before the "function" for static methods, or in place of "var" for static properties. Public static elements are frowned upon by developers of a certain mindset (particularly hard OOP enthusiasts) because they are part of the global namespace and can be called from anywhere in the application. This is entirely a matter of opinion and should be taken with a large grain of salt. There are also downsides to using static elements in PHP prior to version 5.3 due to the lack of [late static binding](http://php.net/manual/en/language.oop5.late-static-bindings.php) (subclasses calling static functions on parent classes). `self::` always refers to the class the code is running in, instead of the class the code was called from. So if object B extends object A, and calls `A::Foo()`, `A::Foo` knows nothing about B. 5.3 addressed this by allowing you to use `static::` to always address the calling source. It is good practice to only use static functions in two situations: 1. Stateless methods which have no need to save or recall any values outside of their own execution. 2. Factory functions used to maintain a singleton pattern, as samkellett described. 
&gt; Do people not wrap this stuff up in a class to handle the binding for them? There's lots of crappy PHP code out there, written by people who don't even know what a "class" is because it wasn't in the online PHP tutorial that they found somewhere like w3schools (which apparently has examples with no escaping at all…) Yes, you can use ADODB or your own hand-written class to do this, but why bother when PDO gives you the same stuff, for free?
Informative, thank you!
mysqli (and in some cases mysqlnd) are what you're expected to use. The hate on MySQL_* is that it doesn't use parameter binding, is slower, less efficient, et cetera. There's nothing wrong with a native database driver. It's just that that particular one was replaced with a better one, mysqli_ .
PDO is an abstraction. It carries costs - in some cases significant (particularly the loss of bulk insert and native extensions.) Most SQL, if you are careful, can actually be written portably. PDO is a good choice if you don't have the time or the skill, but if you need the efficiency, a native driver is better.
&gt; it just makes more sense to use PDO, considering it's going to do everything the mysql functions will. Except that it actually doesn't. Even simple, important things like bulk insert are completely missing.
If the method you're calling is defined as static (e.g. public static function getResults($start, $end)), then use "::". Otherwise, use "-&gt;". Same for variables. It's as simple as that. To put it another way, "::" takes a class on the left, while "-&gt;" takes an object/instance on the left. Maybe you don't really understand what static means. If you did, this would probably make more sense. I'm not sure how to explain it though. Maybe [wikipedia](http://en.wikipedia.org/wiki/Static_method#Static_methods) can help.
Thanks! Thats very helpful :)
Knew I was going to get called out on that statment. SQLite was just the real life example that I have. Couldn't be possible without PDO. The situation I descrobed was actually an oversimplification, as actually the data being saved is from piece of factory equipment (optical inspection machine), and the data needs to go either to a remote (or local) MySQL instance, or an sqlite instance somewhere. It helps keeps down the server administration costs to a factory that may be on the other side of the world with an already existing OS/hardware installation (to use sqlite that is).
This text is a little confusing, so to help clarify, mysqlnd is the preferred driver that can be used by all three MySQL APIs (ext/mysql, ext/mysqli and pdo_mysql). See also the [mysqlnd overview](http://php.net/manual/en/mysqlnd.overview.php) for details, and/or also the [MySQL situation overview](http://php.net/manual/en/mysqli.overview.php).
Balls. 
check out blitz template engine.
Don't sanitize your input. Use prepared statements instead. You get SQL injection protection for free and as a bonus you get cached queries on the database. When you use concatenated SQL strings you're forcing the database to compile them every single time. &gt;Calling PDO::prepare() and PDOStatement::execute() for statements that will be issued multiple times with different parameter values optimizes the performance of your application by allowing the driver to negotiate client and/or server side caching of the query plan and meta information, and helps to prevent SQL injection attacks by eliminating the need to manually quote the parameters. The same applies to mysqli.
Prepared statements are not just for security. They're also for caching. By not using them you might be taking a performance hit for no good reason.
There are valid reasons and instances to use singletons. They may be frequently abused, but that doesn't invalidate all uses.
Others have/will mention templates, my favorite by far is Twig. Clean separation of code and templates, automatic escaping, and the caching it (like Smarty) provides can save you quite a bit of processing time on displaying your templates.
You oversimplify. It wasn't until 5.3.0 that nd was even official, and that's not most hosting. The phrase "and in some cases mysqlnd" is correct, because most PHP applications are meant to be deployed, and relying on something that's only one quarter prevalent severely impedes deployment.
It would be a pain in the ass to write the HTML as strings with echo. Write normal HTML and use PHP tags when you need dynamic code. Also performance-wise, this is negligible, barely an impact. It's more a question of code maintainability. 
http://stackoverflow.com/questions/4629022/how-to-insert-an-array-into-a-single-mysql-prepared-statement-w-php-and-pdo
I love using mysql_unbuffered_query(). It doesn't look like there's a mysqli version of it.
[ezSQL](http://justinvincent.com/ezsql) - It's saved me buckets of time.
The answer will be totally irrelevant if you do 1 sql query.
singleton/static class. if you dont use "this", guess thats the most easy explanation ;)
I'd recommend PDO. Some of the functions (such as binding) are much nicer, and it doesn't lock you down to one database. If you are writing your application well and caching hard hit queries in memcached, the tiny performance difference will be negligible.
I hate them. With a passion. Nasty procedural insecure crap that has no place in 21st century code.
Even though it's part of SQL92, I don't think that method will work on Oracle, or versions of MS SQL pre-2008, so you've already sacrificed some of the portability advantage of PDO by doing it that way. /devil’s advocate. Edit: it doesn't work on [SQLite either](http://stackoverflow.com/questions/1609637/is-it-possible-to-insert-multiple-rows-at-a-time-in-an-sqlite-database).
No worries, [there's a substitute](http://stackoverflow.com/questions/1982016/unbuffered-query-with-mysqli#1982089). Anything you can do with mysql\_* has an equivalent in MySQLi :)
Template systems generally have ill affects on performance. You essentially have to interpret another language with PHP, but you still end up with the same result. So you might as well cut out the middle-man and use straight up PHP in your templates. People who maintain your code later on will probably thank you for not making them learn X template engines syntax.
Do both. 
Not trying to argue, but instead, simply want to help clarify it for people. And most people care about the API, and not the backend (driver) that drives it.
&gt; You get SQL injection protection for free and as a bonus you get cached queries on the database. Just a note, PDO emulates prepared statements for MySQL by default. You have to explicitly enable the native prepared statement support by by setting the PDO::ATTR_EMULATE_PREPARES option to 0. See [this post](http://www.mail-archive.com/php-bugs@lists.php.net/msg145859.html) on the mysql mailing list. However, the query cache only works for prepared statements in MySQL versions higher than 5.1.17, which is why the emulate option is a default.
Basically, it sucks. Try ADODB for PHP http://adodb.sourceforge.net/
I have always wanted to use CodeIgniter. Which one do you think is better (Smarty or CodeIgniter)?
Thank you! Separation of PHP and HTML does make sense. 
This. Thats all you need to know.
No there are not. You should not use a class which enforces its own *singleness*. Instead you should create object only once and then pass it to every other object, which needs it in the constructor. Singleton is just a different form of global variables. If you think, that global variables have "valid reasons and instances to use" in object oriented code , then go for it.
Okay. We're both working on the same application. How do you ensure that the object is only created once?
As others mentioned it is for static variables that are global to the class. One example (of many) where you would use this is if you want to keep count of of how many instantiated objects you have of a class. You could have the constructor increment self::counter or whatever and then each object would have access to that counter to know how many objects have been instantiated of that type. Also public static class variables were often used instead of namespacing before PHP had namespacing.
Do what I do, abstract the whole thing. That way all I have to update is my database classes and the rest of my code works just fine. That way you can switch between PDO and MySQLi. I have commitment issues, which is why I abstract a lot of things. I can change stuff under the hood in the abstraction without screwing with the majority of my code. I'd go with PDO unless your needs fall into the realm of needing some of the additional functionality of MySQLi.
By using a factory class for object which need that single instance. For example , you sometimes need a single instance of database in an MVC-like structure : &lt;?php $db = new PDO('sqlite::memory:'); $cache = new Core\Cache( /*cache config */ ); $factory = new Factories\Model( $db, $cache ); // then you provide this factory instance to all object, // which will need to build models ... // some other file: $user = factory-&gt;build('User'); // factory build instance of User class and provides db an cache // in constructor of User's constructor ?&gt; In addition to ensuring, that all Models have access to same objects, it also provides a seam. You can replace ingredients for unittesting. For example you need to test User class, but you need a fake cache or fake db. 
I've never used Smarty but it always looked monolithic to me. CodeIgniter is great but doesn't really have much in the way of template handling (there are a few modules I believe, but it basically lets you figure out your views) but it's a great system in general.
AFAIK, CI just released an update that made the entire codebase PHP5, so I fail to see how it's out of date.
Even with file storage you can have a "nice interface" for editing. A static html file can easily be read into an html editor text field and then saved back to a file.
That would actually clean up a lot of the web.
I don't know if I'd go as far as saying it sucks. It has very basic functionality. But I do prefer to use ADODB as well.
They are both different beasts. CI is a PHP framework. Smarty is a templating engine. I.E, they are not mutually exclusive, you can use Smarty WITH CodeIgniter. (Though CI does have it's own template engine, you don't have to use it - I'd use it over Smarty though...)
There is one built into the [core](http://codeigniter.com/user_guide/libraries/parser.html). It isn't quite as full featured as Smarty perhaps, but it works well.
But isn't $factory a global variable? If I want to access it from inside a class method, I have to use global $factory; don't I?
This won't weed out *all* the crap, but before reading any php tutorial, make sure it was publishe within the last 2 years. 
Just throwing this out there, I've not worked on anything like this but the first thing that comes to mind is to work with them as if they were two entirely separate entities. I would have the long running code doing its thing but add in something that gives status updates to a database. I would then have my jscript periodicity make requests that would query the DB (instead of interacting directly with the long running process) using the results to update the presentation side of things. (ajax/json)
How long exactly are we talking here? 30 seconds? 2 minutes?
I've done this before. What you need to do is start an output buffer then flush the buffers periodically (ob_flush). You _might_ have to buffer a certain amount of data before anything is output though. If you're not outputting a lot, but outputting to HTML you can buffer a few html comments using: str_repeat(40, '&lt;!-- Buffer --&gt;'); These aren't seen the browser, but will force a flush. That's the old school way of doing it without javascript. The better option would be to have an AJAX request poll a URL for status updates.
node.js and socket.io (or now.js) with forever. it will take you a few minutes to get used to it but it solves all those problems. edit: getting downvoted for suggesting the right technology, good job guys.
Your question presumes that Wordpress is well-architected, but the truth is that it is not. You may have seen Wordpress's hype about "The Ring" but really that is nothing but BS. There are two Wordpress-killers just coming over the horizon now: WolfCMS and Habari. Both are lightweight yet powerful CMSs like Wordpress, but both have better architecture.
http://codeigniter.com/wiki/Multiple_Applications/ 
if all the applications share some common ground you might want to work with overriding your controller and making some code that loads custom/config/routes/etc... based on the url or whatever works best. CI shouldnt be a problem for this.
Take what you have and put it on models. Make views and find a way to make a controller to do everything else.
*shrugs* It sucks to be "that guy." Leave your email in the code comments for questions if you feel that guilty and don't have enough time to fix it all. lol.
NO YOU DON'T .. jeez. You provide that factory **in the constructor** to the class which will create different models. Like your damned controller. Please. Go and learn what [dependency injection](http://martinfowler.com/articles/injection.html) is, otherwise i feel like trying to explain physics to 5-year old.
Oh OK. Fuck you very much for your patience in explaining that.
If your code is well written (not filled with magic and static calls all over the place), well documented and works fast, then there is nothing to be ashamed of. You have to understand that frameworks are not mandatory, neither is MVC. Besides, you would be more likely to suffer physical punishment if you were to write your application using some horrible framework ( like Symfony 1.x or CakePHP ) then for a well structured standalone application. On other hand, if your code really is a mess and in beta, then finish it, launch it and then spend some time refactoring and cleaning up all of it. P.S .. if you keep actually learning php ( sounds like you have been just flying on your C skills ) , and good OOP practices, then you might soon discover that all the popular frameworks are flawed in one way or another ( usually caused by trying to be like Ruby on Rails ). Especially when it comes to testable code .. 
[Relevant.](http://i.imgur.com/Scb9m.png) Seriously though, I was in the exact same boat as you. For the past year, I've been rewriting all the applications I've ever done in PHP to use Symfony. It is completely worth it. Your code will be many times more secure, cleaner, and faster (especially with Symfony). 
&gt; and this guy/gal will probably want to kill me just don't write there your coordinates! :) &gt; Should I do it? No. Try to create new project, and only when it will be done, you will have enough experience for complete refactoring.
Spend the next few weeks documenting your thought process and how it works. That's more important than anything else you could do.
Do a simple cut and paste refactoring, whatever is easiest and quickest. Don't spend another 40 hours on something with no noticeable benefit. Just make a new project and do it right the next time.
Hi I browsed those example. Unless I'm missing something, that looks like a dead, buggy solution. I do appreciate the feedback though:)
Probably 1 - 2 minutes. could be longer though.
Personally, I wrote my own framework much like CodeIgniter except abandoning the Model component for a Library model. Models always seemed kind of pointless to me, where as a library is a way to store and retrieve information. The Controller component then serves it to the View component. (Very much like Code Igniter). There are a few reasons I chose to go my own route over CodeIgniter. 1. More flexibility and control as you write it. 2. How you structure your classes and functions, as well as naming conventions will be your personal style. 3. Less coding time if you do it right. 4. Contractors are more likely to continue to employ me. 
I have old projects of my own and that I've taken over that are basically static websites with PHP tacked on. There is nothing fancier than a block of PHP code at the top of each page that needs it, and a few includes with general functions, database access and settings. It's dead simple and wouldn't impress anyone. But it works for its purpose. It's well structured and commented. It's definitely not MVC, but by seperating the code from the html in each file, you get some of the same basic benefits. I don't work like that anymore, except for mockups and tests, and maybe really simple, mostly static websites. It works for me and for others, however. That's what counts. Frameworks are good tools, but not for *everything*. Don't use a bulldozer when a shovel will do.
The real world lives on crappy code. Don't worry about it.
There is nothing wrong with spaghetti or procedural code as long as it gets the job done. An OO approach is only as good as how you architect the project not only for current requirements, but for future expansions and modifications. Frameworks do the job of taking the fundamentally used features of every site and wrapping them into a nice package so you don't have to code for those features. Frameworks do have their drawbacks. The biggest drawback is that you are forced to follow their coding paradigm and conventions. The second drawback is that some frameworks have an extremely steep learning curve. Just when you think you've mastered it, there is another layer of complexity to it.
NO. If you have something that mostly works, don't throw it away. You'll spend just as long rebuilding it to the same level of quality in the new framework. Better, as others have said, to make sure that the code is well documented and that you produce an architecture document and diagrams explaining how your system fits together to make the maintainer's job easier. Throwing stuff away and starting again means throwing away all your bugfixes too. Do so at your peril.
"There is nothing wrong with spaghetti or procedural code as long as it gets the job done." Get the fuck off my internet.
MVC EVERYTHING!!
http://codeigniter.com/user_guide/general/managing_apps.html 
Just by curiosity, why would you consider CakePHP a bad framework? I'm currently forced to use it and I don't like it a lot, but it doesn't seem terrible to me. Thanks in advance for the answer! 
I keep trying to get around to starting a project like this but from my research you should take a look at the [bonfire](http://cibonfire.com/) project. It's a CI setup to hit the ground running with app development. Save's you handling some pretty generic stuff. That's the concept anyway. Take a look, I've not got a chance to get dirty with it yet. But I do like the idea and what I've played with is nice. I keep meaning to write some LDAP support for logins.
REWRITE ALL THE THINGS!
You might need to read up on output buffering http://www.php.net/manual/en/function.flush.php From what I understand browsers won't always refresh data either. I suspect you should try a different method eg. use AJAX to call a new request every x seconds, or look into something designed to do this.
I'm learning CakePHP at the moment because I wanted to get into using a MVC framework and it looked good for a beginner. I didn't think until now that it might not be a good one to use. /goes off and checks out CI
Its based on rails, enough said.
Very neat! Never heard of bonfire. As someone who has used CI for some time this is very interesting. Thanks for sharing.
Comment everything! Way easier to follow anothers code if there are lots of comments.
Well , first of all the MVC structure is wrong. Views should be object which manipulates templates and models are not just ORMs. The core of framework contains a lot of legacy-oriented code ( some php4 ), a lot of references and global state ( in form of singletons ). Routing mechanism is weak, compared with some other frameworks. Most of application code is hard to test ( as in unit-tests ) because of singletons ... oh and there are a lot of arrays everywhere =]
Please, tell me more.
My biggest problem with cakephp is that their ORM is poorly designed and immensely inefficient.
What about CodeIgniter?
Borrow / buy a copy of Martin Fowler's Refactoring and read the first few chapters (most of the book is devoted to a list of refactoring patterns). Then refactor, don't rewrite.
thanks for all tips guys
There's not much to say to that. It sounds like you're a fairly good coder (though I reserve final judgement 'til I see some code). If you want to learn OOP, go find a few tutorials and learn it! Then do something simple with OOP, and come back here (or maybe /r/learnprogramming or /r/phphelp would be better) for some critique. Doing one year of a CS degree would also be a big help. And remember, while OOP is usually a good choice, it's not a panacea.
While there are other CSS libraries out there, I'm trying to make one that has as small a learning curve as possible. I've already got some ideas on how to expand this, but I thought it might be wise to see what others think might be most useful. Some ideas I've been thinking of adding: * A grid system generator * More open-source CSS frameworks, like I've done with the Meyers Reset. I probably would just collect them as stylesheets in an "assets" folder and call importStyles() to include them. * CSS3 functions to deal with vendor prefixes. (Editied to fix formatting goof)
It shouldn't take much to start thinking in terms of objects instead of functions. Your rom editing app sounds cool! I'm guessing you could create an object to wrap the level-related methods; and call that the 'Level' object. You could group your 'rom' functions into an object called 'Rom' , and have that object contain an array of level objects.. 
Have you tried university? Given that you have accumulated much of hands on experience, some theory wouldn't hurt.
The biggest thing I've learned when talking about frameworks is to have a thick skin. Everyone that uses a framework thinks their's is the best and all the others suck. If you like Cake, use it. If you like Zend, use it. If you like CodeIgniter, use it. You can write a good, efficient, well-performing, stable application in any of them. 
If you think you can make it through what is probably a boring book, there are a lot of books that would take you from where you are to objects and design patterns. I bought this one: http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098/ref=sr_1_4?s=books&amp;ie=UTF8&amp;qid=1310948102&amp;sr=1-4
As for seeing some code, here is the [mobster bot script.](http://pastebin.com/XpzrYvuj) Not sure why pastebin double line breaked everything.. Sorry for lack of comments to explain different pieces of it. The lines that echo a number were placed for debugging, it ran in a terminal so I could see where it would get hung up based on the numbers. edit: looking at my code, I really should have made the security check a function, since I use that block of code like 5 times.
Thanks for the suggestion. I need to discipline myself to stick to books like this.. I tend to download ebooks and scan through pieces of it, ignoring the rest. :/
I've considered going to school, but I have bills and payments for things, and I don't think I would handle school and work well together.
Heh, I just looked at the files for that specific program. Last modification date 2004. It's pretty messy stuff. :)
The answer is NO to a rewrite, but you should definitively refactor your code around a framework. Take a look at this article as to why you shouldn't just rewrite everything: http://www.joelonsoftware.com/articles/fog0000000069.html
The main issue would be scalability. Other than that it's not that bad. You can make a fast app with cake, but you won't be following the conventions if it's complex with high concurrency. 
&gt;Contractors are more likely to continue to employ me. I'm not one to just jump on a rage bandwagon, so I'm hoping your statement is completely misunderstood by me. But anyone who actively attempts to write shit code that noone else understands for job security needs to find a new fucking career. That shit isn't welcome, and your only burning bridges with employers AND programmers who have to clean up your mess after your gone. &gt;Models always seemed kind of pointless to me On a completely unrelated note, a Model in basic definition is a class/object that represents data for getting/setting. If a framework requires your models to behave or work a certain way, they are doing it wrong. ORM type libraries are great for rapid development, but should never be a requirement to use. I strongly suggest looking at other frameworks that let you create bare models that you can use however you wish.
&gt; shit code &gt;after you're gone. Hasty Generalization. It's not for job security, I don't have an issue with job security. That just happens to be a good benefit of it. I don't build for open source, I build websites that actually pay.
Consider [Fuel PHP](http://www.fuelphp.com) for future projects. It's built on/for 5.3.x so it has none of the PHP 4 legacy crap and cruft. It's largely influenced by Kohana but has some Code Igniter DNA in there too. I've been using it for about 2 months and kinda love it. Specific to your original question, I would NOT consider re-writing everything. Even though a framework can save you time and hassles in the long run, there is a learning curve and you probably won't be able to race through your conversion without messing something up or wishing you had spent more time familiarizing yourself with the documentation. Essentially, 6 in one and half-dozen in the other. The best advice has already been given: clean up, document and refactor your current code base as much as you can. Edit: added link, incase Google isn't working for you :)
I hope he's just being sarcastic or trolling.
There is nothing wrong with designing things from scratch. CMS were designed from scratch. Frameworks were designed from scratch. If your code is a mess, you should fix that. I'd recommend exporting code snippets into self-contained components -- like functions and classes that have uses outside of this specific program. // functions.php include 'functions/quick-create-table.php'; include 'functions/merge-query-strings.php'; include 'functions/mysqli-step.php'; instead of defining each of them in the single functions.php file. This will allow you to edit the functions faster (by finding them faster), export them to other projects, delete them easier from the project directory if no longer needed, etc. Messy code and from-scratch are not two things that have to go together.
I'm not talking open source I'm talking common sense. Locking yourself into a project is a horrible thing to do. Instead work hard and build something that doesn't require you to update it. You can only fuck over so many people before you are out of work.
Now I understand why I keep paying prostitutes despite never finishing.
I'm already using OOP, so I don't really think I need to export snippets since I've got everything encapsulated in classes. It's just that I have felt in love with the MVC-like frameworks that I've played with. Everything is so sorted... so clear..
My opinion on this issue is thus: it doesn't matter how you write your code, procedurally or otherwise. If it's bad, it's bad. In other words, you can write both good and bad code with both procedural and OO. Just because code is object-oriented doesn't mean it's any more or less functional than the procedural equivalent. For the record, I have comparable experience to you and have tried many different techniques of writing PHP. In the past decade I've written everything ranging from meticulously constructed OOP libraries to vast procedural scary-basements. Both kinds have their pros and cons, and personally I have been leaning towards the [no-framework framework](http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html) approach recently as advocated by the creator of PHP. Either way, don't feel bad. You have enough experience to quickly pickup anything you're confronted with. The learning process never ends, especially with PHP.
Thanks, this actually made me feel quite a bit better. I suppose I should take the time to learn how to correctly use objects, so long as I remember that it's not always the correct route.
Nice. Sounds like a worthy re-write! It's possible you could port it to something web-based. I've seen NES emulators built with javascript.
It is web based. You can't play the game online though, just edit the levels. You need your own emulator and rom to play it. (legalities)
I'm not exactly sure how Canada mobile services work, but here if you have att you just send a PHP email to phonenum@txt.att.net. I'm sure it is similar there, you can usually contact your provider and ask them how to send a text via email
symfony is set up for this out of the box: shared models and libraries, but each application is independently configured and routed. Not that you should switch, necessarily. I don't want to start a framework war (the best one is the one that you can get work done with), just offering that bit since it was mentioned.
getting the job done is the only real requirement of production code. The rest are just niceties.
Yikes... they're still using SOAP these days?
Code Igniter is okay. It's not great. ZF is better. Even better would be Yii or Fuel PHP frameworks. CI db abstraction is a POS in my opinion as it wont allow you to access different databases on the same connection. say you need an sql similar to: select * from dbname1.tbname1 tbl1 left join dbname2.tblname2 tbl2 on tbl2.tbl2Id = tbl1.id CI db abstraction won't let you do that, so basically you have to do your database manually or use a more powerful ORM which supports this.
Please, don't do that. CI is antequated. Try one of the newer frameworks. Try Yii, Fuel PHP, ZF or Lithium
I've done this before, and you need to contend with a few issues: - If you run PHP using FastCGI (for example, if you're using nginx, or suexec/suPHP with Apache) then you won't get incremental loading at all - at least not without modifying FastCGI and in the process remove many of the benefits of FastCGI. So you're pretty much limited to only using your application in Apache mod_PHP or as an old-style CGI. - Long-running PHP scripts, even if they use no CPU, are particularly taxing on your server, especially if you are using mod_php (which would mean you're using Apache's prefork MPM). While the script runs, even while it's not doing anything it'll be using up one of Apache's processes, and it'll be using up quite a lot of memory even if that script isn't very memory-taxing, because the same process has been used to run other PHP scripts. You only need relatively few of these to be running in parallel with other server requests and you'll use up a lot of memory or possibly run out of processes which causes new processes to wait. - Many browsers will not start rendering a page incrementally until a small initial buffer has filled up. For this reason, you may need to send a kilobyte or two of padding (a long comment tag) at the start of the page. Some browsers will even buffer it incrementally meaning you'd need padding for every flush. I have had problems with Google Chrome like this. - Proxies, either at your end or the client's end, can mess with this working. Sometimes flushing the buffer from PHP works and sometimes it doesn't. In this day and age I'd recommend polling using an AJAX script. It seems counterintuitive since it increases the number of requests to the server, but since each request will be very short-lived (returning the status and exiting immediately) it will scale better since a Apache/PHP process will not need to be kept open and waiting the rest of the time. If I did this again nowadays, that's how I'd do it.
[These guys are pretty cheap imo](http://txtzilla.com/) and their API is super easy to use.
Symfony 2 rocks
Or Symfony.
http://i.imgur.com/Scb9m.png
is that bad or good?
Drupal has [SMS Framework-module](http://drupal.org/project/smsframework). Provider we like to use is [Vianett](http://sms.vianett.com/) ([Vianett Gateway-module](http://drupal.org/project/sms_vianett)) Then we mass send them with [SMSBulk-module](http://drupal.org/project/smsbulk).
http://www.w3schools.com/sql/sql_join.asp
Or Kohana.
If you are going to go the MVC Framework route, Please have a look at Fuel PHP, Kohana, Symfony v2, and Yii. For the love of god don't use CodeIgniter.
fuelphp is actually copy pasta of kohana v3 with modifications
because most are garbage.
Symfony v2 + Doctrine.
Same issues as CakePHP.
Yeah, it is pretty good, though DIC implementation makes me weary.
PHP needs literal object notation and self invoking functions.
Could not disagree more strongly. It depends on your definition of 'getting the job done', of course. If he worked for me and had written a load of spaghetti code that somehow produced the expected output on the screen, I would not consider the job done, and would refuse to release it until he'd gone back and done it properly. The reason for this is simple - crappy spaghetti code leads to MORE time being spent in the long run, and stuff stops working and randomly breaks all over the place, because it's an unfathomable mess. Take the time to do it properly, and you'll end up spending LESS time working on it overall, and things will work and work well. It is never acceptable to write 'spaghetti code' to solve a problem. I refuse to accept it. 
Are you joking? It is never acceptable to write crappy spaghetti code just because you get something out quicker in the short term - you end up spending FAR MORE time trying to fix things when they break the second you try to change them. Perhaps you're just an amateur coder, which would explain your response. People who take coding seriously though would never accept that pathetic attitude. I've seen projects spiral out of control because of the "just get it done" attitude time and time again. Do it fucking properly. If you worked for me I'd force you to write some perfectly functioning code again if you'd done a shit job on it. Yeah you heard me right, and I stand by what I'm saying. Do your job properly or don't bother doing it at all. *Edit - just realised you might have been referring to the original guy above my comment. If so, please disregard my comments, obviously. It's not clear who you're responding to... Apologies if you're saying the guy above me, who advocated writing spaghetti code, is the troll...
Fuck that. How about you DO worry about it, and start writing good code? 
I think you misunderstood me. When I said "he" I was referring to owwmyeyes.
Sure... sorry for the rather aggressive response. I just get twitchy when people advocate messy code to 'get it done', because I've had to pick up the pieces many times. I've had shit coders write shit code that 'works', only for me to look bad afterwards because I have to pick up their crap and rewrite it to fix it, while also implementing new code. The most annoying thing is when you're in this situation with non-technical management. To non-techies, statements like "just get it done" appear to make perfect sense. I worked in a place where the so-called lead programmer had that attitude - he'd write awful code that would appear to 'work', and then would hand the project on to me. Of course, I'd then try to change things and things would break. It would take me ages to get anything done - eventually I'd rewrite his code so that we had the same functionality but it was properly written. Management had no idea what I was doing of course, and were always pissed at me, while the other guy was the 'genius' - because he "gets stuff done". So yeah. I'm still twitchy about this kind of thing...
He should, but it's not something he should worry about until he finishes something. Unless you'd want him to refactor his code everytime a new 'paradigm' shows up. After he finishes he probably should refactor if something is not a good practice. Just my opinion.
What my boss says to me: When coding, imagine that the next guy to work on your code is a serial killer and knows where you live
&gt; If he worked for me and ... which translates to: "I'm about to pull my cock out, and it's a big one too. Here we go, I'm pulling my cock out. Did I mention it's a big cock? It's so big I'm still not finished pulling it out, I have to unwind it from around my leg__s__ first. Almost there. By the way, did I mention my cock was large? Ah, done, there it is, all 8 feet of it, revel in the size of my cock bitches." Here's a clue: What you consider "crappy spaghetti code" is different from everyone else. Your "super duper awesome code" is someone else's "unfathomable mess". And what you consider an "unfathomable mess" may very well be clear, concise, and maintainable to your coding buddy across the room. It doesn't mean he sucks, you suck, or the code sucks. It means you're different people and you're better off worrying about whether or not the software in question works. I also don't believe you when you say that you would refuse to release a working piece of software because you felt like the code was a mess. Not buggy, not without issues, just "messy" code. You're lying about that.
Given what you say it seems you have the right state of mind for coding, so I think you won't have much trouble grasping other paradigms than imperative programming (which is not a bad paradigms, it is suited to a lot of things). I think you should put your hand in some other languages. Try a lower level language like C to see what's going on underneath with memory management etc, Try a language were you are forced to use OOP like Ruby or Java (or do some OOP in PHP), try a functional language like Scheme or OCaml or Haskell. Take your time! read tutorials, implement a few stuff in each languages and while doing it try to adhere to the paradigm and the idioms of the language.
Yeah. Except I bother to engineer my code. Sure, people have different methods and different preferences to writing code, but there is a fundamental difference between code that is tidy and sticks to decent coding principles, and code that simply doesn't. Example: I once worked on a project which required different levels of access depending on the logged in user. The menu would be different for each user, and some users could do some things and some couldn't. The code I inherited worked like this: Every single time checks were required to see whether a user had access to a resource the checks were copy and pasted from page to page, and menu item to menu item. Each check was a nested if loop mess that hard coded the user's id (had to do this every time, for each user) against the resource that the user was trying to access. So for every single menu item (which by the way, was also manually created on each page), you had to go through a set of hard coded id values hidden deep within nested if/else loops in order to figure out who was able to access what. The guy who made this managed to release the first version in record time, and all the management thought he was great. I came along and said it needed to be remade. Of course nobody was interested in listening to that, so we ended up continuing with what we had. So a month or so later, management tell me there is a new user type to be created, and some of the privileges for existing users need to be changed. I have to plough through an absolute shitload of cryptic, ugly, badly written crap in order to attempt to do what I'm asked to do. It took me 3 days to simply add a new user type with new privileges (there were hundreds of files with the menu output manually, individually, each time - the code was just copy/pasted each time) - and some pages stopped working for some users on a fairly random basis. I couldn't test all possible combinations on all possible files, so I end up looking like a dick while the guy who originally created the mess looks like he's the only one who knows what he's doing. Eventually I stripped it all down, and created my own ACL based system, so there was a PermissionsManager object that worked out who was able to access what based on their level of access. It worked, and I could add and create users with different levels of privilege easily. I also re-wrote the menu stuff so the code only existed in one place and was compatible with my permissions manager. You could change menu/resource permissions easily, in seconds and you knew it would work every time. I'm not saying I'm the best coder ever, but I am saying I don't put up with this shit anymore. And also, where you accuse me of lying - firstly, kindly go fuck yourself, and second, I'm not lying at all - I absolutely WOULD tell the guy to rewrite the code. As far as I'm concerned, code like the type I just described above, which is ostensibly perfectly working code that creates the expected output to the screen, is terrible and has to be thrown away. If you wrote that code in my team, I'd tell you to go back and do it again. I wouldn't allow it in, even if our deadline was today. If it took you a week to re-write it, we'd ship a week late. We'd spend far less time in the long term that way. Accepting that code would spell disaster for everyone. I'm sure some people are better than me, and I understand I'm still learning, but I put effort into engineering my code, and I expect other people to do the same.
High Five!
I've been slowly using up my [Clickatell](http://www.clickatell.com/products/gateway.php) credits and they work pretty well + have a few APIs to choose from to make things easy on the programming side. I'm not in Canada but they appear to support sending to Canada so you may like to give it a shot (there's a test link on the side too).
Fuel only borrowed 3 classes from Kohana, cookies, View and DB the rest is all developed by Fuel devs to Fuel Framework. That's like saying Kohana is a copy pasta of Codeigniter.
While I appreciate the effort on writing quality code, the library in it's current state does not bring any seemingly real benefit or innovation to the table. Since it does however parse the styles on the server side, there is some potential. See if you are able to come up with a solution that would allow to (the following is an unedited brainstorm without any in-depth analysis of the benefits or cons): * Provide Stylesheets specific to the browser (no more -moz-*, etc) * optionally: nesting and grouping (but this is where LESS and SASS is already good at) * dynamic style modification through objects (e.g.: $text-&gt;bold(), $text-&gt;apply($headerStyle), $headerStyle-&gt;fontsize = 18) * Stylesheet sandboxing. (e.g. disallow remote included pictures, htscripts, or allow only specific classes) * functionality that allows me to say &lt;div class='&lt;?=$style-&gt;grid("80% of parent (or of page)")'&gt; and it compiles it down to the correct e.g. grid_* * allows to easily switch between fixed, fluid or elastic layouts. (without rewriting of the stylesheets) * a way to provide a better text rendering (avoid type spacing issue known as "rivers") * an easy way of adding cross platform font implementations (e.g. $text-&gt;font('this.ttf'), would render either using css3 r cufon, or swf...) * allow to easily switch between wireframing and theming modes. (e.g. grayscale + lines and color mode with mixing options) * functionality for debugging stylesheets. (although Chrome Inspector does this great) * sort of design evaluator. With help of js, it automatically would create a footprint of the website and analyze the proportions and balance, and propose suggestions. (e.g. golden ratio, and general C.R.A.P.) * optimizer of stylesheets for e-mails. 
Besides, PHP shortened syntax, specially if you're using short_open_tag, is pretty damn good: &lt;? if($something): ?&gt; &lt;a href="#"&gt;&lt;?= $something ?&gt;&lt;/a&gt; &lt;? endif ?&gt;
I refer you to this http://www.joelonsoftware.com/articles/fog0000000069.html
This answer is totally irrelevant.
legacy :(
Cake does manipulate the templates you make. It has chosen PHP as the templating language. In this case 'view' could be another name for 'template', if you wish. You can interrupt cake's automatic view/template management if you wish, and specify exactly what it needs to do. The framework was *designed* with PHP4 compatibility as a goal. Not every server runs 5 (shock horror). The router, apart using slashes as a seperator by convention, lets you specify any regex to match. It follows 'convention over configuration', and so the arrays only come into play when you're specifying custom configuration. They're like simple objects/json - they're just there to pass properties and state. I haven't tried much of Cake's unit testing, but it does include extensive features to let you do so, using the SimpleTest framework. In CakePHP 2.0, they're moving PHP compatibility to 5.2, and using to the defacto-standard PHPUnit for unit testing.
We reviewed several frameworks for our next project in the company, and although I was partial to Yii, we decided on using CodeIgniter for the next project as its the easiest to learn and neither of the 6 programmers ever used frameworks substantially. There are only two things I hate about many frameworks: mandatory templating engine (I have never seen advantage to using templating engines over straight PHP, as code separation can be done logically without it) and mangatory ORMs. I have no idea why some people use ORM, to me they make no sense as writing complex queries with ORM is order of difficulty harder than with SQL and I can write simple queries in my sleep. Also, it's absolutely impossible for ORM to work faster than straight SQL queries.
&gt; If you wrote that code in my team ... Please put the cock away. I'm not on your team, you have no control over the actions of me or anyone else in this thread, and I don't particularly find the sight of an 8 foot cock pleasant. Now then, you would ship it with the plan of refactoring after it was shipped since the software works, you're just putting on airs. There's ideology, and then there's stupid. Yeah yeah, I know, your response is to ask me to go masturbate. It'll happen when I decide, not you. That engineering is why your coworkers can't stand your code even though you think it's beautiful. It's also the reason you can't "release the first version in record time", which is a __very__ valuable trait. You described the problem as being a DRY issue (copy/paste code), but you solved it by engineering an ACL system, which is used for flexibility, not DRY. You could just as easily have put the functionality behind a few function calls and called it a day. There is absolutely nothing wrong with hard coded data provided it meets your needs. Who knows, maybe you went to the clients and were told they wanted a super flexible permissions system and ACL would fit the bill? That would be a valid reason to completely throw away what's there and develop an ACL system, but the reasons you gave are not. So here's some advice: 1) 5 years from now the pundits will be telling you the "decent coding principles" you're using now were actually not decent. So stop worrying about it because no one with experience listens to the pundits anyway. 2) You scale the solution to the problem, not the other way around. If you don't need the flexibility of an ACL, don't add the complexity of an ACL. The initial cost + the long term cost are just not worth it. The reason for this is simple: complexity kills a project faster than any other factor outside of the human factor. You don't control complexity by throwing something like an ACL at an otherwise fairly straight forward permissions requirement. 3) The exception to 2) is if you have an experienced dev on your team advising that you should probably implement it. And when I say experienced, I don't mean "10 years of software development", I mean "this is the 3rd CMS I've developed, in my experience, 1-2 years down the road, the users will start needing X, so lets put X in now since the rest of the system will be built on top of X.". 4) The only reliable tool in your tool box is the lowly assumption. __know__ your assumptions, make as many as you safely can while still meeting the requirements (mathematicians call them "simplifying assumptions" for a reason), and design around them in a smart fashion. The rest is just pissing in the wind. You can have the most well engineered software in the world, but if the assumptions are wrong, it doesn't mean shit.
Useful reference: http://en.wikipedia.org/wiki/List_of_carriers_providing_SMS_transit
False. I am right now looking at the query I wrote on our CodeIgniter-powered website and it uses two different databases. The website has been in production for more than a month and is working fine. Unless of course you mean "ORM" when you say "DB abstraction" in which case I say: who cares, all ORMs suck.
It offers layers of security that is required by some clients, e.g. the NHS in the UK.
"Now then, you would ship it with the plan of refactoring after it was shipped since the software works, you're just putting on airs. There's ideology, and then there's stupid. Yeah yeah, I know, your response is to ask me to go masturbate. It'll happen when I decide, not you." Oh god, how I wish I could have put you in my position back then, and FORCED you to inherit a shipped version of that original code. I guess we look at things differently. You're happy to ship a shitty broken product, and I'm not. *Edit: You clearly didn't read what I'd said properly (something I've come to expect from the worst type of developers - the arrogant amateurs like you) - I pretty clearly stated that : "I once worked on a project which required different levels of access depending on the logged in user. The menu would be different for each user, and some users could do some things and some couldn't. The code I inherited worked like this: Every single time checks were required to see whether a user had access to a resource the checks were copy and pasted from page to page..." So there I've talked about needing different levels of user privileges which would enable some users to do some things while others couldn't. The project absolutely did call for *the level of granularity of control* that ACL can offer. It was something we needed badly, which is why his original, shockingly shit code that you'd probably think was awesome, was such a fucking nightmare and clearly needed changing. Secondly - I absolutely do (and did back then) have the level of experience to enable me to make that call. I've made bigger systems that can do a lot more on my own, and never had to deal with any of this shit. If you release code that's that bad, you end up never being able to fix the shittyness, because non-technical management don't understand the value of refactoring - that is, changing the underlying source code so that it is cleaner and easier to modify, but maintaining the same functionality as before. Did you read the part where I said the system fell on its arse all the time? Yeah, read that part again you fucking idiot.
Right technology, sort of because Ryan initially developed nodejs for network programming not web development as it is used now.
That isn't parameterized bulk insert, that's making a giant parameterized query and binding a huge number of things to it to fake it. They are tremendously different in performance terms.
Could you please elaborate? I'm pretty used to SQL so I think I would not use ORM. I can write &lt;?=$var?&gt; in the views so I don't need template engine.. The documentation is great. What would I be missing?
That's exactly what I'm afraid of!!!
&gt; Not trying to argue Except what I said was "in some cases," because it's usually not correct, and then in "helping clarify" you said "always," which is not correct. &gt; And most people care about the API, and not the backend (driver) that drives it. Citation needed. Everyone I know writing PHP wants their code to run on other people's boxes.
An OO programmer is not necessarily any better than a procedural programmer. I've seen tons and tons of fugly, awful OO code. The question is; if someone asks you to write a program that does X, can you do it and will it work? Do you know how to test it to get rid of bugs? Do you know how to write it so that it will be maintainable? Do you have a method for iteratively working on it to add or pare out features as needed? Do you use a combination of helpful function names, variable names and comments to keep your code maintainable? etc. Object-oriented programming is just an approach that may or may not help you depending on your skill-set. Is knowing how to read and write OO code a useful skill? Absolutely. But it's just a skill like any other. It's not going to determine whether you're a good or bad programmer on its own.
reducing technological debt has no noticeable benefit? i bet, at least the guy who has to work on the codebase after hermetix will disagree.
Well, the *Views* should not be *templates*. Lemme explain: I guess you know the usually separation of MVC structure. But people tend to forget that *View* is responsible for *display logic*. In the classical MVC (model 2) structure it is not so important, but if you use HMVC architecture, then then you start having little MVC-ish triads for subsections of page. Lets say you have a list of documents. That would mean that you have a DocumentListView class , which is a more specific case of a ListView. The class would require few templates : for list itsel, for a pagination ( which could be a separate view class , if you want ) and at least one more "empty list" template.. As for routing, the main issue i see is inability to leave out segments. Example: you have `/document/delete/42` , and `/document/view/42` .. but you should be able to match `/document/42` , and know that the left out part defaults to "view". And that if the second section is set, then ID is mandatory .. kinda like `/:controller((/:action)/:id)`. Though maybe there is such functionality and i just don't know about it. As for unittesting, you should not require to initialize whole framework to run your tests. Which is what you must do, if framework is abusing global state ( in form of singletons and global registries ) instead of proper dependency injection. 
AJAX is your friend. It won't solve the problem on its own but the suggestions from others of outputting to a shared resource during execution is good. Off the top of my head, I'd say make 2 AJAX calls. One to a script which launches the long-running script in the background and says "OK it's running". If you try to launch the long-running script directly with an AJAX call browsers will complain that it's taking longer than expected (especially Firefox.) Have the long running script output to a file, like "output.html", and with your second AJAX call which will happen, say, every 15 seconds, request output.html and put its contents in a div or whatever. You can have the long-running script output "COMPLETE" or whatever when its done and look for that in output.html to know you're done. 
Cake follows a certain type of HMVC (I don't know if you'd call it '*proper*' HMVC or not) with its plugins architecture; from what I've seen they work pretty well in making modular functionality that can be plugged into a cake application. Pagination is handled somewhat automatically in models through an automatic controller call (it does an automatically paginated version of data access depending on the parameters you've set). The views have a 'helper' which takes care of the extra logic/presentation in navigating the pages. Yes, cake's routes are perfectly capable of doing that and settings defaults for parameters. By default a route will default to the index action if its not included in the url, but you can change it to a different one. Read through http://book.cakephp.org/view/945/Routes-Configuration if you're interested in the full details.
I might be missing something, but I would have the data object classes as CI Models or Libraries, in which case you can use "$this-&gt;load-&gt;model( "MyObject" )" to load them. You could put that in the constructor of My_Lib and access your data via $this-&gt;myobject-&gt;id from anywhere.
i've got ~12 years of php experience (by far the language i've written most code in), and a bit of traditional cs education. and i feel like i know nothing. my code always looks horrible (at least 2 weeks later), my patterns are anti, my tools are inadequate. when i learned csv, svn came out. now that i'm comfortable with svn, theres git. still, i *know* i'm continually improving; only my standards rise too, and landscape is always changing. in my opinion (and experience): if you want to get better at what you do, learn something different - learn a different language or technology. if you want to improve your oop, try a (pure) oop language, like scala, java (nyah) or ruby. try a modern oop framework for php, instead of writing everything from scratch. learn javascript to understand first class functions and closures. learn haskell (or maybe clojure?) for functional programming. (also [learn python](http://learnpythonthehardway.org/book/), because it's nice.) i bet you by learning haskell you'll learn more about coding in php than by investing the same time learning php itself (if you're already an experienced coder), even though they're totally different - probably just because of that. you know procedural programming and you know nothing about oop. so, take the jump and start writing oop code. read the tutorials. dig through github. it will be awkward at first, and you'll feel unproductive and frustrated. but after a while you'll look at your procedural code and just know where the objects should have been and how the classes should have looked like and how you could improve everything.
Use the correct tool for the job. Objects are great for some things, but if you want to optimize your code using the least amount of resources, an object tends to have more overhead.
Well , the routing doesn't let you make that sort of rules. As for pagination, it really should not be in the Model, because Model should not be aware for concepts like "page" and "max rows". "Page" is a presentation concept, this makes the Model tied to the View.
Real life projects have real life ROI constraints. I'm not saying to leave the code a mess, but you have to think in terms of practicality and trade offs.
There is a new implementation in CI 2 called drivers where you have a library that then can call several child libraries. You should check those out it seems like that might be what you are looking for.
You should check out [Twilio](http://www.twilio.com/faq/international). Their API is EXTREMELY easy to use and I've used them for a variety of projects. The above link goes to their international SMS FAQ page.
[http://codeigniter.com/user_guide/general/autoloader.html](http://codeigniter.com/user_guide/general/autoloader.html)
the mysql_* functions don't support a lot of "modern" features, like prepared statements and, most important, parameter binding. personally, i'd recommend the pdo (php itself recommends it too). it's an abstraction layer, meaning it makes it *easier* to write database independent code (access is the same, but you still have to know your SQL, because that differs between db engines and pdo wont help you with that). but imo that's not as important as some of the other benefits: parameter binding helps writing secure code because it prevents sql injection attacks, while prepared statements are more performant if you call the same query multiple times (with different data).
thanks, but can I have those "models" in a directory such as application/libraries/my_lib/ just to have things organized properly (there will be about 20-50 such models and 4-5 different libraries)
Agree... it's also foolish to think a single framework can be the best choice for every type of project.
so can I create sort of a new category eg $autoload['dataobjects'] would I then create a new directroy called DataObjects? what if I wanted to further organize my classes into subfolders (sort of namespacing)? For example, suppose I have class MyClass in application/dataobjects/mypackage/MyClass.php would I autoload it as $autoload['dataobjects'] = array('mypackage_myclass') or in some similar manner? 
While this is true as a general principle in programming as an activity, in PHP-land the wide-spread hobbyism has lead to a proliferation of bad code. OOP attracts good coders much more than procedural style does, the fact that you can have good code in both bears no relation to the distribution of good coders in PHP world. There are many bad OOP coders, but I have hardly ever seen any good procedural php code. My concern then, is that you understand what good procedural code consists of, and it is *not* reducible to the utility of your program. That is, an amazingly useful application can be written terribly. If you want to be assured that you have mastery of good code design, procedural or otherwise, you need to have you code reviewed by people who know what they are doing. Listing accomplishments in terms of 'what programs do' may make you a guru in the eyes of management but not necessary amongst coding-gurus. A list of program design achievements might be, 'a procedural mvc architecture, a procedural unit testing library, functional-style php templating'. Could you give a presentation to coders expounding on the merits of procedurally coding applications, how you go about maintaining large procedural code bases, how testing and debugging should be done, how state should be managed? These are the questions I would expect an expert procedural programmer to be able to answer.
Would you like to explain how that would be useful for a program that only uses 1 table? (other than the error log table and program status table, both of which act completely independently from the users table.)
take a look at Nette Framework: http://nette.org/en/ 
Use Yii http://yiiframework.com - it's fast, clean and awesome
You should be able to use $this-&gt;library-&gt;load( "my_lib/MyObject" ) for files in application/libraries/my_lib/ http://codeigniter.com/user_guide/libraries/loader.html
I am a big fan of DataObjects or VOs (ValueObjects) as I like to call them. I keep them in my models directory in a folder called VOs. I am interested in hearing others' point of view on this. I started my application on a 1.7 CI install so maybe something new has popped up in 2.0. What I do is just load the VO in the model as needed using: require_once APPPATH.'models/VOs/PersonVO'.EXT; The VO does not extend model, seems like too much overhead when in my mind a DataObject should be pretty "dumb" (plus a save and load function if you feel inclined). Some of my VOs do extend other VOs. If you do need the CI "stuff" (like the db instance) then you can instantiate it using: $CI =&amp; get_instance(); 
Pretty much all of them are designed for applications. If you have control over your environment and can use PHP 5.3, you'll want to use one of the new 5.3 frameworks like [Lithium](http://dev.lithify.me/lithium). Otherwise are no shortage of good MVC framework options: CakePHP, Symphony, Yii, Kohana, Zend... Any of these will do the job and do it well. It'll come down to personal preference. I'd do a quick look at the docs for each and see which code style you prefer.
Too bad it's got little to no English documentation, it looks pretty decent...
I have no real world experience of using frameworks so if I were looking to use one I'd probably start here: http://en.wikipedia.org/wiki/Comparison_of_Web_application_frameworks Edit: Removed link.
Have you looked at SugarCRM?
Sym*f*ony2 is based on PHP 5.3.
Are you talking about a web service, such as a SOAP or REST API? If so, you might check out [Silex](https://github.com/fabpot/Silex). It's from the Symfony team, but is geared towards creating web services.
Yes I have. I'm looking to start from scratch.
Just speaking directly to the code, this really should be a class. You're not going to make a very good impression by making lots of global functions, which in turn use global variables.
[F3 Fat Free](http://fatfree.sourceforge.net/) is a great routing and database abstraction (ORM and querying methods). It has some great documentation and is dead simple to learn. That said, avoid its template engine 
[CodeIgniter](http://codeigniter.com/) - Definitely my favorite one. Solid, very well documented, live community, efficient. 
The first step is admitting that you have a problem, so congrats on that milestone. Now you just need to work to improve. Start small, but don't give up.
Ever thought about using one of the oop php frameworks? Once I started using CodeIgniter it really helped me get my mind around OOP and break from procedural code. It might be worth your time to write an application in one of these just to start getting the hang of it.
Hear, hear! I've started using Yii recently and I'm already in love with it. Everything is quite straight-forward, and if there's a module missing you've might just be able to use modules from other frameworks as drop-ins (I'm using some Kohana module for image resizing etc.).
People are very biased when it comes to this question. From what you say it sounds like you have little-to-no experience of frameworks. I'd suggest if you're undertaking a major project that you give at least a few of them a try. Here's my personal opinion of the major ones that no doubt other people will suggest here: * Codeigniter - Quite basic, but solid - with exceptional documentation and very low learning curve. * Yii - a bit trickier to get to grips with, but has decent docs. Lightning fast and aimed more at RAD. I imagine if you invest the time you could knock up some pretty impressive projects fairly quickly. * Symfony - I've only got experience with the older versions of symfony, 2.0 is supposed to be better. Average documentation, but good support for ORM/database stuff, if that's what you need. * Kohana - everyone here loves it, but documentation/userguides are either impossible to find or out of date. If you're happy just diving in and working things out for yourself, then it certainly has more than it's fair share of praise, but I prefer something with a little more support. Anyway, that's my opinion. I think CI is great for newcomers/smaller projects because it's just so damn easy, and yii is probably worth a look for something larger, or when you have more time to invest.
Twilio has an awesome API and is well supported. [1c per message to US and Canada](http://www.twilio.com/pricing/) Edit: pricing
give FUEL a try http://fuelphp.com/
You mean to tell me, that while doing the app is doing pagination, the model should not be aware that it needs to limit the number of results it returns and which result to start listing at? Router::connect( '/documents/*', array('controller' =&gt; 'documents', 'action' =&gt; 'view') ); /documents/14 will be routed to the view action of the documents controller, with a passed parameter of 14. Alternatively, you could omit making a custom route, and check if the index action gets a numerical parameter. If so, call the view action instead. Thirdly, you could just write your index action as the view action, since that is the one you want to be default.
phpframeworks.com is a worthless site. enough said.
Is there anything that is easier to use with forms? The app I'm making is going to mainly be forms and I read something about Symfony not being the best with forms. I've been looking at trying out Symfony 2 but if it's not great with forms then I probably won't.
what comes with phpmyadmin isn't enough?
Thanks for the notes, folks!
&gt; I guess we look at things differently. You're happy to ship a shitty broken product, and I'm not. This is what you said, and this is what I responded to (emphasis mine). &gt; If he worked for me and had written a load of spaghetti code __that somehow produced the expected output on the screen__, I would not consider the job done, and would refuse to release it until he'd gone back and done it properly. You also said this (emphasis mine) &gt; And also, where you accuse me of lying - firstly, kindly go fuck yourself, and second, I'm not lying at all - I absolutely WOULD tell the guy to rewrite the code. As far as I'm concerned, code like the type I just described above, __which is ostensibly perfectly working code__ that creates the expected output to the screen, is terrible and has to be thrown away. You're a liar, not because you claimed that you would refuse to ship a broken product, but because you claimed that you would refuse to ship a non-broken product because you didn't like some of the code. But it's telling that you had to try and move the frame of this particular thread of conversation in order for it to appear rational. &gt; So there I've talked about needing different levels of user privileges which would enable some users to do some things while others couldn't. But you didn't talk about the original solution not being able to meet those requirements, and that was (and still is) the point. He was able to solve it without the complexity of ACL's, perhaps he's a better developer than you are. Ultimately, I don't know what his code was doing, but I do know you spent a lot of effort describing the problems you encountered due to copy/paste duplication, followed by a description of how you solved this copy/paste duplication by ... throwing the entire mechanism out and adding the complexity of ACL's. Maybe they were warranted and maybe they weren't, but your solution doesn't naturally follow from the problem as you described it. Personally, I think you rewrote it because you wanted to, not because it was a sound technical decision. &gt; Secondly - I absolutely do (and did back then) have the level of experience to enable me to make that call. I've made bigger systems that can do a lot more on my own, and never had to deal with any of this shit. Which means you didn't understand point #3. Having x years of development isn't enough, you need to have written software solving the same types of problems before, which you clearly did not have, as evidenced by your "bigger systems" statement. The types of solutions that are acceptable on a large system are different from a smaller system. This goes a long way in explaining why someone might feel like a non-ACL solution is silly, hacky, and inappropriate, despite said solution clearly working. It's also why I specified what I meant by "experienced". That's a big part of the problem with our profession. The baseline skills are so transferrable that x years experience is virtually meaningless unless said person is developing the same types of systems at roughly the same scale. The solutions change too drastically for the non-baseline skillsets to transfer easily (hence point #4, you scale the solution to the problem, not the other way around). &gt; Did you read the part where I said the system fell on its arse all the time? Yeah, read that part again you fucking idiot. No, but I did read the part where you stated the system started having problems after you made your changes.
if i invest time, equipment and money, i can make stone bleed water. show numbers. frameworks are not religions. "lightning fast", "pretty impressive" and "so damn easy" are too subjective. maybe you should consider a career in marketing, not web development.
Yeah, Just because you called me a liar, I'm going to call you a cunt and end this conversation here. You're a cunt.
get a book "php 6 and mysql 5" by Larry Ullman. If i could find a digital copy id send it to you. great starter book. 
D'oh, thanks for catching that.
Maybe the Symphony framework?
HEY! I'm from 1982. I resent that.
Thanks. I just found [this](http://blograge.com/wp-content/uploads/2011/02/PHP-6-and-MySQL-5-for-Dynamic-Web-Sites-2007.pdf).
[lightMVC](http://www.lightmvc.com/) is a newer one. It is zend like, but without the massive footprint of zend. http://www.lightmvc.com/
Looks interesting. Thanks.
[PHPMyAdmin](http://www.phpmyadmin.net/home_page/index.php)
Are you upgrading from 1.0 or 1.2/1.3? If you are upgrading from 1.2/1.3 it should be quite painless if you are still using 1.0 you will most likely need a full rewrite. 
Just took a look at it. Great set of tools and docs. Thanks!
Just took a look at it. Great set of tools and docs. Thanks!
Wow, those are some awesome ideas! I know that this thing isn't anywhere near ready for prime-time (or any time, truth be told) in it's present state. As of now I still consider it *very* prototype-y, and wanted to get some feedback to make sure I didn't lock in any poor structure/design choices (k3n's comment is very helpful in this regard) and find out what sort of features might be useful (your comment kicks ass in that regard). Thank you very much for taking the time to look it over and give me your thoughts on it.
Yes, this is a strong trait and deserves recognition. And you'll progress, and look back at this code and laugh (or cry) as this is something we've all done and do. We all start somewhere. :)
last wurd.
those are popular options. not necessarily good options.
I have built many sites using Cakephp. It's easy to get started with and can be bent to fit your will with ease as you get more experience and pushed out of the way completely when needed. Also very easy to write and include components, etc. Edit - Cake has excellent form support with loads of helpers - ajax, etc.
CI isn't terrible with forms. You can write custom validation or use the built in validator. It also has a form builder class which is pretty helpful. Take a look at the documentation on the [Form Helper](http://codeigniter.com/user_guide/helpers/form_helper.html) and the [Form Validation Class](http://codeigniter.com/user_guide/libraries/form_validation.html)
Whatever - I'm not going to get into petty framework wars. The truth of the matter is they are all pretty much the same thing. They have some different ideas on how to handle things like form generation, routing, ORMs, etc, but at the end of the day they all accomplish the same thing. The differences come down to personal preferences. They are all well documented, well supported, active projects. I don't like Zend or Symfony, but I wouldn't turn up my nose at someone using them. Whatever gets the job done.
Code igniter + Zend form + doctrine. Rather than using full package of framework why not combine the good parts?
I've really been debating hard on whether a procedural vs OO approach was the best way to go. My reason for leaning towards procedural was simplicity. This was originally thought of as sort of a CSS templating system that non-programming designers could pick up with as little difficulty as possible. Since this was originally intended for just writing/optimizing stylesheets, where I wouldn't expect other programming work to be done, I didn't worry too much about global namespace pollution, as I didn't really expect there to be other PHP functionality at work to conflict with it. That being said, I've started to have concerns. The disregard I initially had for namespace pollution would probably cause trouble if someone wanted to integrate StyleWright into a framework, and as I think about adding functionality, the pseudo-code I'm coming up with is looking increasingly hack-y. The more I think about it, the less I like the approach I'm currently taking. I'll probably wind up refactoring it as a class. You know what, screw it. It's going OO. Thanks muchly, k3n, for getting me to rethink my approach. I probably would have eventually gone OO in any event, but now I don't have as much to refactor in doing so.
Aye, and I don't think it should be tough at all. Although there's probably further refinements you could make down-the-line, I think you should be able to refactor it as-is to a class in a few minutes. I know what you mean about not going that route initially, and it would likely not be as bad if you didn't rely on globals, where you had a handful of discrete functions that acted independently, but with the usage of globals as they are you're basically using them as instance variables. Happy coding!
Sounds like the typical employee who thinks they know more than their superiors. If you're as good as you say you are, you'd be the lead programmer instead of the other guy.
"I'm losing the arguement, so I'll resort to name calling and making emotional decisions."
It's a SEO site.
I wasn't losing the argument at all. I was 100% correct and was beating him easily. I could easily rebut everything he said, but why bother. He called me a liar based on one (completely true and accurate) statement I made. Why bother arguing with someone like that? He's also completely and utterly wrong. If you push me I'll bother telling you why. Frankly, I can't really be arsed then.
I left that company and am now a lead developer at a company called Electronic Arts. Edit: And in that company, I *did* know better than my superiors.
Kohana dev here. I think Kohana get's a bad rap on documentation, it's not nearly as bad as you think. For starters, Kohana has a built in php documentor, so every function is documented in the code, and formatted for web viewing if all you do is enable the [userguide module](https://github.com/kohana/userguide). Our actual guide on how to use the framework is in markdown, and committed under a guide folder under each module and under our core project. This means for any custom module you add, it's the same /guide/ url in your project to see the documentation. You can also view the documentation online at [github](https://github.com/kohana/core/tree/3.2%2Fdevelop/guide/kohana) or on the [kohana site](http://kohanaframework.org/3.1/guide/). I know our documentation wasn't so great in the past, but I really think we've done a lot since our days of using a wiki and requesting the community write docs for us. Cut us some slack will ya? :)
A significant omission in sync0pate's list: Zend Framework. It is a large and powerful framework. I've used it on a number of projects and it is quite capable and robust.
GluePHP to handle routing. Its very similar to flask for python or Jersey for Java Then find the components you need, then write your own code to piece it all together
Having the humility to know that you don't know everything puts you way ahead of many of the programmers I have run into over the years, the rest is just a matter of finding a good book and working through it. 
Um, seems like there's pretty extensive documentation in English.
He's also not a masochist.
Oh man, none of the links I clicked in the Programming Guide on my first visit were in English, I must've had very bad luck seeing as the ones I clicked were one of the few articles not in English. My bad!
I know I've been meaning to check back on the project for a while to see how it's coming along. The first time I saw it was around about version 2, and the docs were in quite a disarray. I still mainly use CI, but learning new things is always good. 
You make good points and while I don't really have time to address your questions I will say that I totally agree that OO encourages good practice whereas procedural seems to do the opposite. That said, it really depends on the skill of the programmer.
Have an upvote. If the project doesn't require compatibility with outdated versions of PHP, FUEL is incredible (as I'm sure Lithium is as well). It's so nice not having to deal with stuff like "abstract class MyExtraLongClassName extends SomeoneElsesReallyUglyLongClassNameToAvoidCollisions { ... }" and having a general nomenclature that is approachable and easy to understand. 
Yes. Because, as i said before, Model should not have a concept of "page". A correct model only contains *domain logic* , which does not contain such concepts. Things like "page" are part of *presentational or display logic*. View should request from Model the amount of data it needs. As for routes. In this case you can only set the default parameters , which is nice and all, but does not allow you to make other then linear rules .. and routing depends on the order in which you add the routes. I must admit that i am biased a bit about this because i, for my own framework, use a bit different structure for route definitions, in JSON format: { "main": { "priority": 0, "notation": "[/:controller[[/:action]/:id][:extension]]", "conditions": { ":id": "\d+", ":extension": "\.(?:html|json|xml|foobar)" }, "defaults": { ":controller": "site", ":action": "index" } }, "error": { "priority": 100, "notation": "/bad[/:id[/:action]]", "conditions": { ":id": "\d{3}" }, "defaults": { ":controller": "error", ":action": "show" } } } 
Why can't you just email people using their text email address? Many providers supply an email address for the phone. All you have to do is have a database with the list of providers and the formatting for the phone number. Someone would type in their phone number, and you would use your formatting to email them your text message.
I'm actually quite a fan of zend, it's all very well organised, but I didn't mention it because I think it's just too much of a learning curve for your first framework. Good spot though.
&gt; No, but I did read the part where you stated the system started having problems after you made your changes. Thereby proving my original post.
I briefly glanced at it and it seemed to list frameworks that appeared on the wikipedia page - I didn't look any deeper than that. Have removed the link.
Thanks for taking the time to reply. My opinion is based on experiences with the framework about a year ago, so perhaps a little out of date. I don't think I was overly critical, but I'm certainly willing to give it another go based on what you've said here.
Yii's forms stuff is quite easy, it generates basic forms for you which you can then customise. The one area where I think it might actually be easier to use than CI..
They were my unbiased opinions, posted in a comment on a web site, that I hoped might help one of our community.Not a fucking research paper... Anyway, enjoy your downvotes.
You're achieving the same thing through slightly different methods, I see no inherent advantage or disadvantages to either method. Dependency injection can be useful, but adds another layer of complexity that not all frameworks require. Or we can condescendingly insult people asking for help and understanding. That works too, I guess.
yeah if you haven't looked at it in a year then what you said is certainly valid back then.
This, and the related articles should be just what you need: http://php.about.com/od/learnphp/ss/php_forms.htm
Just from taking a look at the site I can see it's a lot better than previously... You've got a tough challenge to try and beat CI's docs though. :) Anyway, I don't think Kohana gets a bad rap around here - as I pointed out earlier, nearly everyone here seems to think it's the best thing since sliced bread!
A temporary effect on the initial page generation, after that the file is compiled and cached which will give a nice performance boost later on. That you get added goodies like automatic escaping and making your templates much easier to extend is all the better imo. Template languages are so dead simple I can't see anybody worth their salt getting hung up on learning to use {{if}} or {% if %} instead of if(). I recently reduced the page load time by about 18% on a site (~1.5 million uniques a month) by converting their templates from PHP to Twig. The initial page generation takes longer, but that is taken care of by cache warmups. Once it's cached it takes fewer resources.
Now add extensible &amp; override-able blocks, escaping, caching, and sandboxing. You'll find yourself creating your own templating system that would probably look a lot like Smarty or Twig.
I think you just made my day - lemme get at it. Much thanks dearest Redditor!
ohh not around here it doesnt, but in our own community we've had a pretty constant outcry about the docs, voices have since calmed but there's still a good amount of complaints :) I was actually pleasantly surprised how much r/php advocates kohana, I rarely even have to mention it around here because someone else already did :)
Ok, this is somewhat of a multi-part question, so I'll try to give you the resources you need to at least get started. 1. [The first thing you need to be familiar with is creating HTML forms. ](http://htmldog.com/guides/htmlbeginner/forms/) 2. Once you have the basics of creating forms, [you'll want to know how to process them using php. ](http://www.w3schools.com/php/php_post.asp) 3. Before you actually connect to a database and insert the data, you'll want to know how to handle the data you just got. You need to sanitize the data to make sure that the user hasn't used any malicious code to expose or destroy the information stored in your database. [Here's a very basic explanation of some of the tactics used to protect your data.](http://php.robm.me.uk/) If you have any questions about it, make sure you google a little more for XSS and SQL injection. 4. [Connecting to your database and inserting data. ](http://www.w3schools.com/php/php_mysql_insert.asp) Most web hosts will have an easy to use interface to create and view your database. Usually it's just in your user control panel. 5. [Emailing the registered user.](http://www.w3schools.com/php/php_mail.asp) There's a lot more out there than what I've listed there, but those are the basics, and I hope it will get you started on your way.
Start with the models, then the controllers, then the views.
Wow...I had already made the first form page and was coming back to thank the other poster in this thread - now I've got your feedback. ;-) Ode to the reddits!
I'm doing my Masters in SE. We had to create a tutorial on the YII Framework. How to set it up and how to create a test application. Let me tell you, I didn't have any MVC or PHP experience. The hardest part was getting apache and php to talk with each other lol, port 80 wasn't working for me. Even IIS was not installed. Anyways, setting up a shell application was easy and very fast, Yii creates all the folders and view. You get a working web app out of the box. The documentation is well written and there are [tutorials](http://www.yiiframework.com/tutorials/) on the yii website. We are in the same boat. My final project for the class will be to rewrite a flash/actionscript/coldfusion web app for work in HTML5/CSS3/jQuery/PHP Zend. I will start it soon. I am still working on my project proposal. I hope Zend is as easy as Yii. Good luck, looks like you have a lot of advice. Your post has hellped me too! Thanks! Update: OMG looking at all the [tutorials on Codeignitor](http://codeigniter.com/wiki/Category:Help::Tutorials), I think I might use this instead of Zend.
Wowowoweee 1.0. Good lord. I don't even remember all the things that are deprecated, but I'm sure it's a big list.
It's really not as easy as throwing on some html, throwing in some database inserts here or there, and shooting off an email. I mean, it is, but you shouldn't treat it so lightly or just settle on simplicity for the sake of saving effort. The best starting point for handling PHP forms would be [the PHP manual](http://php.net/manual/en/tutorial.forms.php). Note the use of `htmlspecialchars()` function and `(int)` type-casting keyword in the example. Though the output [sanitizing](http://en.wikipedia.org/wiki/Sanitization) examples won't give 100% protection, it's vital you understand the purpose of filtering input and sanitizing output. Starting from the bottom with security essentials in mind is the only way (IMHO) your site won't be a statistic the hour it's launched. There's [a few database options available](http://www.php.net/manual/en/refs.database.vendors.php). For strictly Mysql (one of the databases most commonly used with PHP), use the [Mysqli](http://www.php.net/manual/en/class.mysqli.php) extension or [PDO](http://www.php.net/manual/en/book.pdo.php) - your choice. Avoiding the old, generic PHP ['mysql' extension](http://us.php.net/manual/en/ref.mysql.php) is recommended by many. Also, familiarize yourself with [prepared statements](http://php.net/manual/en/mysqli.prepare.php). Not doing so, and relying on poor protection regular mysql functions give will make your site a juicy target for [attacks](http://en.wikipedia.org/wiki/SQL_injection) or ["accidents"](http://xkcd.com/327/). For email, see [the PHP manual](http://us.php.net/manual/en/book.mail.php). Protecting against email abuse is a whole other topic. Hopefully I haven't discouraged you.
Wow, very small and simple file. I'm not sure if I'd call it a framework. It is just a single, albeit, useful class. I'm going to bookmark it. I hate dealing with routing myself.
Anybody use [Recess](http://www.recessframework.org/)? I've not used it yet, but I applied for a job where they required experience with it. I applied anyway, and never heard back, but thought it was worth asking.
http://codeigniter.com/tutorials/ and they have 2 short videos on how to build a very basic blog in about 30 minutes. 
Nope, not discouraged. I am settling on simplicity for the sake of keeping the limited money I have. If I find that there is a real demand for the website that i build, then, I will go to a professional and get things done correctly. I have about $1500 to get a site up and running. Then i have some money for advertising purposes. Gotta start somewhere - and here it is.
Start with normal php. Then use frameworks
Start with frameworks. Then use normal php.
best answer ive ever heard "You have a problem and decide to solve it with regex. Now you have two problems." [PHP Simple HTML DOM Parser is your friend](http://simplehtmldom.sourceforge.net/)
In all seriousness though, at _least_ start with [basic PHP](http://www.php.net/manual/en/langref.php) to learn syntax, types, etc. From there, up to you. Frameworks were made to make the job of programming easier and less time-consuming by shrink-wrapping commonly used blocks of code, arranging websites for easy templating, tweaking PHP to behave more exactly as you need it to for the moment, etc. Personally, I'd recommend dropping all that and learn straight PHP fluidly. Not knowing PHP fluidly will, IMHO, hurt you down the road if you instead take the framework route or are stuck with one at work. It'll save you when the framework doesn't cut it for a situation, or when support for the framework or effort to keep it up to date dies - even though you're still dependent on it. But again, personal choice.
Hm, re-reading your comment, it seems you've already learned some of this. Oh well, no harm in re-iterating it. Looks like you've still got some learning to do, even with procedural code. Here a some things I noticed: while(!$fp) { break 2; $fp = fopen("http://mob-dynamic-lb5.mobsters09.com/mob/refresh_stat_manual?user_id=$uid&amp;auth_key=$auth", 'r'); } Wha? An unconditional break in a while loop? That fopen() will never be called. You'd be better off writing it as: if (!$fp) { break; } Break only applies to loops. I see this: while(1==1) { //while(true) or while(1) is sufficient //(code) if (stristr($info, "security check")) { //(code) break 2; } } But a bare "break" is all you need there. You copy-pasted your URL-reading code in multiple places. Put that stuff in a function. That makes maintenance so much easier (e.g. if you want to follow my next piece of advice). If you don't actually need the fine-grained control, use file_get_contents() instead of fopen()/fread()/fclose(). OK, not really programming, but still good to know: when using regexes, use parens to capture substrings, don't call substr() afterwards. I.e. instead of preg_match('/&lt;cash&gt;[0-9][0-9]{2,19}&lt;\/cash&gt;/', $info, $cash); $cash = substr($cash[0], 6, -7); try preg_match('/&lt;cash&gt;([0-9][0-9]{2,19})&lt;\/cash&gt;/', $info, $cash); $cash = $cash[1]; Also, that regex can be further improved: preg_match('#&lt;cash&gt;(\d\d{2,19})&lt;/cash&gt;#', $info, $cash); Note that by using # instead of / as a regex delimiter, I no longer have to escape the close-tag slash. Makes things more readable. Also, "\d\d{2,19}" is equivalent to "\d{3,20}". And as far as I'm going to go.
I say roll the dice, pick a framework, and run with it. The bigger the challenge, the greater the reward. What do you have to lose. Actually, if you want to be a boss, write it in 2 (or more) vastly different frameworks, and then in no framework, and outline the differences.
learn normal php first. you won't understand half of the code in the frameworks if you try to learn from them. also, this path will help you get used to the functions especially the ones that manipulate arrays. they are very powerful. fundamentals are key to any language. you will find yourself spending hours trying to fix a problem which can be solved easily if you know normal php. Then learn to make your own mvc framework so you understand the concepts. No matter what others say learn OOP then lastly, learn a framework. Good luck!
If you know ColdFusion (I'm assuming) it's safe to say that you know the basics of programming, so learning "plain" PHP is just a matter of remembering the syntax and which functions do what. Start with a framework. They exist for a reason: the build the infrastructure and provide convenience so you don't have to. Need to access a DB? You may spend hours designing and building your own DB class and, honestly, will likely get many things wrong. Use symfony or Zend and you have all the documentation on exactly what to do to access the db.
&gt; Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. aka REs don't do state, as required for any kind of structured parsing. A RE can tell you what you are looking at, but state is needed to tell you where you are and what that means.
(how do you call that “dirty”/“soiled” text???)
I often "over oop" things. e.g: * An array of parameters? No no! LET'S HAVE A REQUEST OBJECT! * A colour / hex code? NO! A COLOUR OBJECT WITH HELPERS TO CONVERT TO DECIMAL RGB (even though I'm not *using* decimal RGB) I call it object oriented masturbation. Sometimes I just can't help myself.
Sounds good. Is there any tutorial you recommend. As in you would say "hey if you do this php tutorial and understand it, you should be good to start using a framework" ? Just curious.
I don't know if this is a bad habit or a nifty shortcut but if I have to create a simple object, instead of doing $object = new stdClass; $object-&gt;prop = "value"; I'll end up typecasting it from an array as such. $object = (object)array('prop' =&gt; 'value'); 
I was kind of advocating the no-framework route, and instead cobble together some spare components. Doesn't look like OP has do to do anything so complicated that it needs a full featured, learning-curve inducing framework.
All things that can be achieved without adding yet another abstraction layer. I'm not sure where you're getting at. Different strokes for different folks, and I don't hate template engines, but you can't even begin to try and match up Smarty (and friends) against the very language it's written in.
I'm partially guilty of this. I love abstracting and decoupling the hell out of everything, and it's generally good practice, but there's a time when it becomes too much.
dismissing it as having no noticeable benefit is wrong, but all in all, i agree. the app is already in beta, so a rewrite would cause too much trouble.
regex is like violence. If it hasn't solved your problem, just use more.
If he is proficient in another language already, why bore oneself with relearning all of the basics. They are essentially the same. When I went from Java to PHP I started CodeIgniter and it was just fine. Granted, your advice makes perfect sense if he was a total noob, but it doesn't appear that way. It even looks like he went to college for it. 
Sure you can, because they (Smarty, Twig) just compile to PHP anyway.
I don't know Coldfusion at all, but if you have any experience you could relatively easily jump right into another language. I do recommend reading a book or a tutorial, but spending hours coding boring beginner level stuff learning about parameters, methods, etc would just be a waste of your time. The concepts are all the same. The syntax is just different (and maybe the patterns I guess - python works a bit differently than PHP when it comes to structuring a web app). You can learn syntax just fine doing a framework. That said, building your own framework would be better, but if you have time constraints (and it seems you do) and want something built and have something to show off... the framework makes more sense.
The point is, that stuff is deployed on crappy code every day. I didn't say code that didn't work, or was insecure, just crappy code. If you work too hard on getting everything right, you'll never release.
eventually one of you will die and the fight will be over!
Thanks for the suggestions. I definitely have a lot of touching up to do on my regex skills. I believe that break was added in later, and I just didn't bother to remove the fopen function. I was certainly aware that it couldn't be called after a break.
First learn the language. Then use a framework. I recommend you http://codeigniter.com - It's an excellent framework with a very little learning curve.
new EchoStatement(new ArrayBuilder(new AlphaChar("L"), new AlphaChar("O"), new AlphaChar("L")))-&gt;output();
I also prefer typecasting for simple "throw-away" objects. One line or fifty? One please!
EchoStatement::output returns a new string object.
&gt;Because HTML can't be parsed by regex Sure it can. It can't be done well but if you can guarantee the limits of the input (ie if the HTML structure doesn't change) then I don't see why not.
Richard Stallman can parse HTML with regex.
I'm guessing you read the title and responded based on it since he mentioned wanting to use CI in his post...
[This guy](http://stackoverflow.com/questions/4231382/regular-expression-pattern-not-matching-anywhere-in-string/4234491#4234491) can parse regexp with HTML. (Although yes, he's cheating, because perl's regexp isn't strictly regular, it supports state/stack).
I do this all the time. Im sticking with it until PHP can do this: $object = { 'prop' =&gt; 'value' };
Zalgo.
Happy happy birthday.. I'd say that this is the worst problem with java-taught programmers switching over to php- makes for nightmare maintenance.
I use empty() rather than explicitly testing for null, zero, empty string, count() == 0, etc. I don't give a fuck. Exceptions for strpos.
Soap makes me cry. I wish you good luck in your journey.
lols! In my head you had Bubbles voice from Trailer Park Boys :)
I have trouble sticking to coding style guidelines. I've managed to keep my methods camelCase, but variables always get written in whatever style first pops into my head. I might write $return_ar = array(); $newModes = array(); and not even notice it! :/
I tend to overuse the ArrayObject class.
Aww. I am such a Reddit noob. My bad. Thanks for letting me know :-)
You got your speed increase by using caching, not Twig. Either that or the previous templating was an inefficient implementation. You can't take simple PHP code and complicate it with a templating engine and say it's faster. Yes, smarty compiles the template syntax into pure PHP code. So how is this advantageous to just using the PHP code to start with? You're using PHP to generate PHP. 
Exactly... you are taking extra steps to get the same result. You don't have to write your own template system to use the features of smarty, they are already in PHP.
Thanks Remo, I agree. Coldfusion is a server-side language just like PHP but different syntax. I say this, not to make learning PHP simple :)
Wow thanks all, the PHP Reddit community is very supportive, even to newbs!
must ... not ... rewrite ... everything ... from ... scratch ... to ... satisfy ... my ... OCD. Fuck it! I'm rewriting it.
a little tip: http://www.php.net/manual/en/class.domdocument.php#domdocument.props.recover
I still use WordPress.
using reflections. bad.
That's just being lazy. Nice. +1'ed
Are you constantly switching between languages? Took me a minute to realize that it's because I see so much of other people's code through example that it's all technically valid.. and sometimes I get excited about a new way I never thought of.
That's funny - I do the same thing. Sometimes a word looks easier to read like_this, other times likeThis.
[PHP Objects, Patterns and Practice - Expert's Voice in Open Source -](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=sr_1_1?ie=UTF8&amp;qid=1311059264&amp;sr=8-1) I am only on page 65 and I got a good grasped of OOP. [Building PHP Applications with Symfony, CakePHP, and Zend Framework](http://www.amazon.com/Building-Applications-Symfony-CakePHP-Framework/dp/0470887346/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1311059392&amp;sr=1-1) Another great book. Especially if you havent decided which framework to go with.
I use the word "poop" when adding debug statements. It makes it stand out, but sometimes I forget to remove it.
http://net.tutsplus.com/sessions/codeigniter-from-scratch/ After this course, You'll know how to develop with CI. :)
[Zalgo](http://www.eeemo.net/)
You should still try to do whatever you can to do things properly though. The code probably became that messy in the first place because people who worked on it before had that same attitude. You'll actually end up spending much MORE time working on poor code overall, even though you may initially release faster than by doing things well. Eventually most of your time on projects is spent on maintenance rather than implementing new features, and you find stuff starts randomly breaking, sometimes going unfixed until a user in your live system reports the error. Take a read of this: http://en.wikipedia.org/wiki/Broken_windows_theory
Ditto. But instead of "for no reason" it's usually because they were doing it wrong.
not really a bad but I always seam to type things the long way - I still do shit like if (x == true) rather than just if (x) ... I just reads better in my head
I'm not sure your example using stdClass is the best possible practice either. I mean what about: class Myclass {} // put this somewhere $object = new Myclass; $object-&gt;prop = "value"; Then at least you can compare classes with is_a()/instanceof etc
Mine is using lowercase for everything. Class names, methods, whatever. No camel case, no underscores. myclass::myfunction() I've started to amend my ways and at least make class names start with a capital. On new projects. 
Refer to the docs. There will be things you didn't know you could do now.
On rare occasions I still use multiple ternary operators on the same line. As said, on rare occasions. $x === $y ? comp_function('something') : another_function($value) ? 'something' : some_falsy('x');
As they have rejected the `[]` array literal syntax, I think that if ever will be proposed, they'll ditch an literal object notation form as well.
I do that as well if the value isn't a boolean, and doesn't have a descriptive name. if($is_active) if($active == true)
That's not a problem until names don't get very long.
*Some people, when confronted with a problem, think “I know, I'll use regular expressions.” Now they have two problems* - Jamie Zawinski 
No, not really (lately at least). Though I do read a lot of code by other people. I wish my IDE could tell me about these things.
I've been using this a lot recently and it is wonderful. Parse HTML with Simple HTML DOM, parse the content of the DOM with regexes if needed.
No, he's written an HTML parser in regexp. The reason you "can't write an HTML parser in regexp" is that regular expressions are supposed to be, well, [regular](http://en.wikipedia.org/wiki/Regular_language). The problem is that they haven't been since the 60s (with the introduction of backreferences) - a purely regular regexp engine isn't very useful for "real world" situations, or at least, it isn't as useful as a mainly-regular-with-sprinklings-of-stack. (As you can imagine, using a parser that has bits of stack bolted on the side to parse a pushdown language like HTML is a lot harder than using a parser that uses a stack from the get-go).
I still don't use version control, I work on the production server 80% of the time (fuck my coworker and his pushes), I still use mysql and barely escape anything, I still write spaghetti code where logic is sporadically thrown into 500+ line multi page files with html split so you can never tell what the fuck is what, I think firefox's standards mode tick actually means my code is standards compliant ... Just kidding, that's my boss ... fuck my life.
Being a pedantic ass. mysql_fetch_array($y1, MYSQL_ASSOC)) =&gt; mysql_fetch_assoc($y1)) Oh sorry, you meant coding habits... ;) Seriously though, I'm a bitch to procedural. Which is fine on the small stuff, but not so much on massive bespoke e-commerce websites :x
switching between javascript and PHP sometime kills my attempt at keeping a steady pattern of naming. I try though!
All data is poorly formatted data and should be treated as such to program a quality website or software. 
What you do is you hand it off to a python script to process / parse it and use a library called [BeautifulSoup](http://www.crummy.com/software/BeautifulSoup/) 
Yeah, what I did up there is not a replacement for using an actual object. Its most notable for creating VOs and thats about it.
Happy reddit birthday!
Are those some unmatched parens?
WOW!!!!
This reminds me of C#
"I never look back, darling. It distracts from the now."
&gt; So , I was looking up info on how to try and parse html with regex. This is about the most eloquent answer I found. Then you haven't been looking very hard. That's about the dumbest answer on all of Stackoverflow. Popular and correct are not necessarily the same thing. And hardly anyone reads past the joke answers to the actual technical explanations. The more important point to consider here is however: **use cases**. If you are required to "**parse**" html, then obviously an html parser is advisable. If you however want to "**extract**" something from html, then using a text extraction meta language (= regex) is quite often suitable. It comes down to performance and maintainability. If you are not fit to write a somewhat resilient regex, then don't. And if you think 20 lines of DOMDocument traversal makes your code look more professional than two lines of regex, then go for it. And the more clever folks use phpQuery/QueryPath/FluentDom or whatever and whenever that is appropriate. The "regex are evil" meme alone isn't a good advisor for finding the *right tool for the job*.
yep, this is a reoccurring statement in our office.
that is amazing.
I'm pretty guilty of this as well. I've come back to a project to add a new feature 6 months down the road and scratched my head as to what all this code means. 
I'm not a huge fan of 'server admin' myself so take this with a pinch of salt. Can't you just sudo apt-get install php5-cli?
Already installed and also 5.3.6
I don't think that fix has made it into an official PHP release, so you'll need to download the source from svn and build it yourself. PHP 5.4 is still very alpha and not ready for production, yet.
5.3.7 isn't released yet? http://www.php.net/downloads.php I would guess, download the sources of the version of you want, then follow the INSTALL file. http://svn.php.net/viewvc/php/php-src/branches/PHP_5_3/INSTALL?view=markup edit: get the sources you want, then run ./configure --help and then make. Make sure to have needed dependencies, of course. Find out where apache's php module resides, and replace it.
Forgive my ignorance, but is there an easy way to move from a binary ubuntu release of php to one built from source?
Thanks :)
Thanks :D Yeah I bet.. C# programmers probably too lol
If you absolutely cannot wait for an official update from Ubuntu (or whatever your package source is), you will need to manually build and install PHP from source. If you have multiple Web servers to maintain, you'll probably want to build your own deb package to deploy. If you're going to go this route, just make sure that you back up your current configuration and uninstall the vendor packages first. If you try to install a source build over the vendor package, it will cause you a whole lot of pain down the road. The best thing to do would be to make sure you're sanitizing your data and try to avoid the flaw in your code, and wait for 5.3.7 to be released, or for the patch to be back-ported by the upstream package maintainer.
Easy? Depends on your level of comfort on the command line and building packages. Back up your configuration, uninstall the vendor (binary) package, and then compile and install from source. You might want to run a phpinfo() on your current installation and grab the configure command that was used to build it, then use the same on the source build. That will ensure things build properly on your system, and you get the same features as the version you removed. Also, be aware that you'll have to install several development packages in order to perform the build. If you have a spare Ubuntu system or a virtual box, you might want to do the build there and move the compiled binaries to production so you're not littering your Web server with junk packages.
Lack of proper error handling, and reverting to fatal debug mode. Like: if (something) { echo something_error(); exit; } Same vein as using or die(something). Not a good habit.
I worked on an IT help desk once...and I pretty much felt like that guy after two hours...quit the job after 3 weeks and I can say those were the three shittiest weeks of my life (all my family was raped and murdered by a three horned devil, I *had* penis cancer, and I'm living in the streets,...still nothing beats those three weeks)
That's how this subreddit works. Once you're in the cult, out comes the heavy hitters.
Can't you just disable php_socket extension till a binary fix comes out? 
I dont know what habit of yours is worse... your variable names or the fact that you use the mysql_functions
I use poop as well, but more frequently FUCK in all caps
Actually, I've taken this route and disabled the socket_* functions for the time being and wait for a new binary release. Just don't feel like going through the hassle of rebuilding the entire thing from scratch.
It's slightly (by nanoseconds) faster to just output html than by using echo. This thread got into template engines and how good/bad they are. Slightly irrelevant to the original question but... A good template engine has advantages over raw php for a number of reasons. Forces separation of business logic from data rendering. With the correct config, removes the ability to write php code in views Allows lower tech people to work in the views as they frequently see scripting template engines easier than php (It's a psychological thing). Numerous helper tags (date select creation, text formatting, text truncation etc...). There are more reasons but these are the ones that immediately come to mind. 
If you really need the patch (I'm interested in what kind of use case you have where this would be critical), you'd be best off by building PHP from the sources that Ubuntu use. See "[Building PHP from Source on Ubuntu](http://technosophos.com/content/building-php-source-ubuntu)" for a half-good introduction about how you could do that, but _be sure_ to go through the "Possible Alternate Route" instead of doing make install. It seems a bit weird that you're running a bleeding edge version of Ubuntu together with the need for patching a bug like this. 
id store the questions in a database like so +-------------+------------------+ | question_id | text | +-------------+------------------+ | 0 | "why is a raven" | +-------------+------------------+ and id store the questions like so +-----------+-------------+-------------------+ | answer_id | question_id | text | +-----------+-------------+-------------------+ | 0 | 0 | "just because..." | +-----------+-------------+-------------------+
thanks for the info on the question_id and text that will already help organize everything... for the answers.. each user could hypothetically have a different answer.. there arent correct answers for instance a question could be: How many pets do you have? What type of care do you drive? etc... I want to store the answers to the questions with the user would your suggestion work for that? 
If you wanted to store answers from each user for each question, then the suggestion above will actually do that, but you might also want to store a user id against it, unless all of your users are anonymous.
You need the full path of the DIR you're in. put the following at the top of a script and run it, it should tell you: echo getcwd();
 If each user can only answer a question once, then I'd store the questions in the database with the columns "id" and "question", and then the answers with "id", "question_id", "user_id" and "answer". Look up the mysql syntax for "replace into". This way if a user has already answered a question and does it again, it'll overwrite the first answer, otherwise inserts it. I think you'll need user_id and question_id as keys though. http://dev.mysql.com/doc/refman/5.0/en/replace.html Sorry for the formatting, I'm on my phone. 
This has nothing at all to do with PHP, so I'm not sure why a tutorial would cover that. This is instead entirely to do with Apache. Seeing as both your .htpasswd and .htaccess files are in the same server, you don't necessarily need the path like that. Try just '.htpasswd'. If that doesn't work, then try beta/.htpasswd (without the starting slash).
So it would be -- user_id answer_id question_id question_answer ? or could I lose the answer_id thanks for all the help on this guys
I would do: questions: {id, question} answers: {id, question_id, user_id, answer} The IDs for both tables are primary keys. 
I heavily abuse explode and implode because I'm either too tired or too lazy to write a regex. Edit: I also abuse gotos to fix memory limit errors in WordPress.
/beta/.htpasswd will tell apache to look in the root directory, then the beta directory, then for .htpasswd. So C:\beta\\.htpasswd on windows. beta/.htpasswd would tell apache to look in the beta subdirectory of the current directory, then for the .htpasswd file. So C:\apache_installation\htdocs\beta\beta\\.htpasswd. Notice how there are two beta directories in that path, that's correct (but not what you want). .htpasswd will tell it to look for .htpasswd in the current directory, so C:\apache_installation\htdocs\beta\\.htpasswd, which is what you want. If what I've said is correct, then I suggest you do some reading on relative and absolute paths to find out how they work.
I was 75% of the way through an implementation of a project before I realized that the remaining 25% of the code could be made 100% easier by moving into a framework (I had already built a very lean MVC framework, but it didn't have some of the functionality I needed.). Sometimes you just have to start over.
&gt;This has nothing at all to do with PHP, so I'm not sure why a tutorial would cover that. Because nearly all instructions for any php web application (wordpress, most forums, mediawiki etc) mention that you can utilize .ht files to protect your site and in some cases need to modify or add them just for the package to work. Based on the OP's description it sounds likes hes installing some kind of framework/cms/app.
I think the last time I needed to do this we used SilverPop.
phpvideotutorials.com
'REPLACE INTO' is pretty frowned upon, because it essentially does a DELETE/INSERT even if the data doesn't change. The proper method would be to use "INSERT INTO ... ON DUPLICATE KEY UPDATE col1=val1, col2=val2"
I think the guys already helped you with that. My small contribution is to change the order by rand() it's performance sucks and you have more chances of showing repeated questions. You can add an extra field 'showed' to the questions, increment it every time you fetch the question and then ORDER BY showed ASC. Or you can even do the query excluding the question_id's in answers for this user. I'm tired but something like: SELECT Main_Questions AS Question FROM Meta_Questions WHERE question_id NOT IN (SELECT question_id FROM Answers WHERE user_id = {user_id}) ORDER BY showed ASC LIMIT 1 Or something like that LIMIT 1
It wasn't entirely critical, I was just having trouble finding any good documentation on the practice. The reason it popped up was from a vulnerability scan, but I ended up keeping the 5.3.6 binary I have and just disabling the socket_* functions. It was really more of an educational exercise than anything.
Thanks, this did the trick and officially showed me I'm a moron! Haha
Cool breakdown, thanks dude. this makes a lot more sense now and I've resolved the issue. Thanks again.
Bingo! All it did was confuse me more haha. Thanks for the help, guys.
Probably deserves an AMA.
We're all learning, man.
I was going to mention something as well about getting a random question. Depending on how many possible questions you have, I would look at getting a random ID first, sticking it into a variable, THEN getting the apropriate question. What you'd doing here is querying the entire table to get 1 value. (I realize there's a limit, but there's no reason for the db to have to parse through the other fields). Start with something like: $question = mysql_query("SET @rand_id = SELECT rand(id) from main_questions limit 1; SELECT main_questions from questions where id = @rand_id"); There's probably a more elegant way to do that, but it seems to me that parsing through that text will slow down your queries. This leaves the processing on the db server instead of the php engine. Just a thought. EDIT: Ok, did some reading and found this code which works better. What I wrote above returns a random float number that's between 0 and 1. So, useless. SELECT id, question FROM main_questions WHERE id &gt;= (SELECT FLOOR( MAX(id) * RAND()) FROM main_questions ) ORDER BY id LIMIT 1;
I was/am under the impression StoneCypher is one of the guys that gets the most flak around this subreddit, while more often than not being the sole voice of reason. Mucho love for him and his posts.
This is supposed to be about yourself, go troll somewhere else.
I remember getting told off by StoneCypher for advising people how to hash passwords. BCrypt could take a salt with a combination of characters ranging from "a-z", "A-Z", "0-9" "/" and ".";I was generating the salt using bin2hex which meant it only had values in the "a-f" and "0-9" range (far less than the salt could support). The post is deleted, but thanks to SC for bringing stuff to my attention I had never thought about before. **tldr**: You can learn a lot from StoneCypher, listen carefully, but question everything. The last thing I want to do is tell people to blindly follow someone elses advice.
relax tiger
To be fair, just about anyone can be involved in developing PHP. For instance, I'm part of the PHP Documentation Team, and all it took was submitting a few patches to the manual to get Subversion karma. If you're interested in seeing how the decision-making process works, check out the [php.internals mailing list](http://news.php.net/group.php?group=php.internals).
I'm interested in where this is leading to...I'm upvoting this thread
"StoneCypher" has far less than the range of a-f, 0-9 characters. You *definitely* shouldn't listen to him.
*tumble weed rolls by*
He is very experienced and very knowledgeable. It's mostly the script kiddies or ~5 year vets that think they know something that give him the most flak. edit: fixed slack to flack - damned beer. 
Have you heard of the StoneCypher Utility? http://scutil.com/svn/ . If you look at the links on the right, you'll see a [link to his personal homepage](http://fullof.bs/john-haugeland/) "full of BS" (ironic?) . scutil isn't exactly impressive, unless there's something I'm missing. StoneCypher is a notorious troll around here, and you can tell he's intentionally trolling 'between the lines' of helping people.
[i'll just leave this here](http://i.imgur.com/0jDGm.gif)
&gt; It's mostly the script kiddies or ~5 year vets that think they know something that give him the most slack. Pretty sure you mean "most flak," as most slack is something different.
Oops, sorry yeah, you are right. Dang typos (and beer). **fixed**
Arrogant troll, whether or not he actually provides useful information from time to time. Autoignored.
Deadpan range subset jokes are a tough nut to crack it seems.
Wow, nice catch.
You're under the wrong impression. He's a troll and attention whore and he [created this thread](http://www.reddit.com/r/PHP/comments/iu7xw/stonecypher_can_you_tell_us_about_your/c26ph0z) to dupe people like you.
Ignored... but commented on.
You don't need a template engine to separate your views. At least not what I would consider a template engine. You could write something very simple that handles views separately from your business logic while still using real PHP code. There's nothing wrong with using PHP code in your templates. Using loops, if statements, even light formatting functions like trim or substr are all fine (although I prefer to have my data as ready to go as possible before going to the view). In my opinion template engines are completely redundant and offer no real world benefits. Anyone working on your code has an additional unnecessary learning curve to work on the templates. That may not seem like a big deal, but Smarty has a pretty hefty amount of features that aren't so intuitive.
I used this on a recent project, and I really like it. custom colors, pointsizes, chart grid, axes titles, etc. http://code.google.com/apis/chart/interactive/docs/gallery/linechart.html I'm not sure about any sort of license on it, but technically the project I used it on is closed source as well. 
You created an account specifically to discredit him, and he is the troll?
Something to note: If you're using LIMIT 1 at the end of your query you're not going to need a while loop to echo the results: $question = mysql_query('.... LIMIT 1'); $row = mysql_fetch_array( $question ); echo $row['question']; (You should also try to stray away from putting capitals in your field names / table names!) As mentioned in another thread you'll want to also have id (answer_id), user_id, question_id, and question_answer as fields. So the two tables are: questions (Q): | id | question | answers (A): | id | user_id | question_id | question_answer | and when you want to retrieve you can do something like: SELECT Q.question, A.question_id, A.question_answer, A.id AS answer_id FROM answers A INNER JOIN questions Q ON (A.question_id = Q.id) WHERE A.user_id = [user's id] To join all of the users answers with their questions. The resulting table would have | question | question_id | question_answer | answer_id | And you could iterate through the list and output the user's questions with their answers!
look up epic douche in the neck beard dictionary and you find him
any word that ends with "...tion" i always type "...tino" first, by accident i constantly switch between these_kind_of_variable_names and camelCase i use racist and misogynistic words for debugging
i don't think the framework is that important these days, as long as it has a good ORM library. i think it's more important to understand MVC, PRG and Hijax you're gonna end up doing a lot of ajax stuff nowadays if you want a modern app. check out frameworks mentioned here, but also consider extjs 
Oh how I love NetBeans auto-format. I spend half my life hitting alt/shift/f.
If you want to test the changes on another server, then you'll need to install the website to the test server too. You will also need a local copy of the files, because while Dreamweaver will let you work on files from a remote server, it won't synchronise them between your test server and your live server. Dreamweaver can use site definitions to upload, download and sync files between your computer and the remote server. So I would set up one site definition with your files and the remote test server, and another site definition with your files and the remote live server. You can then select the test server definition, make your changes remotely and upload them, test them. Once you're happy, you can then switch to the live definition and upload your changes there.
can you stop reposting?
While this isn't a PHP solution, I'd recommend Highcharts: http://www.highcharts.com/ It's a Javascript library for plotting chart data. It's got a 'wow' factor, it's quite interactive, extremely customisable and while it's free for non-commercial use, you can buy a license for it to use it commercially and the prices are very reasonable. All you have to do in PHP is turn your data into the appropriate format in CSV, XML or JSON and Highcharts will plot it for you. I have no affiliation whatsoever with Highcharts.
From just the other day: [http://www.reddit.com/r/ProgrammingNoLink/comments/iq572/superfast_way_of_getting_free_space_between/c26c7y9](http://www.reddit.com/r/ProgrammingNoLink/comments/iq572/superfast_way_of_getting_free_space_between/c26c7y9) Unbelievable way to talk to someone. The difference between this and most other times when StoneCypher's talking down to someone is that this user was being incredibly receptive and grateful to his advice despite his attitude, and he still continued to talk to them like they were a piece of shit on his shoe. Honestly, read the thread in the link. StoneCypher's whole post is just a pageful of grandstanding about how he was right and got someone to admit it. The user doesn't rise to the bait, so he just gets ruder and ruder. She completely acknowledges that he's right and asks for links explaining his point further, so he tells her "it's called college", and gives her http://stop.pretending, a link to a TED talk on being wrong, an article on recognising one's own incompetence, and an introductory article on learning python. Later in the thread he calls her out for downvoting that post, as if it were even a helpful post in the first place. He's a classic attention whore troll and if I were John Haugeland I'd be ashamed about the way I was presenting myself. Edit: gotta point out that this is just about the only post in this thread without a snarky reply from the man himself. Caught him with his pants down this time I guess. Edit: also felt the need to clarify that I wasn't "caught being wrong years ago", and this isn't a "fake troll account", as StoneCypher has repeatedly claimed. I am a legitimate person who thinks he's an aggressive bully. Edit the third: he continually justifies his behaviour as a way of shaking people up to get them to stop giving bad &amp; harmful programming advice. Why then is he [now](http://www.reddit.com/r/programming/comments/ivf3m/sorry_its_completely_slipped_my_mind_how_the/c278dbt) off doing the same condescending asshole routine to some poor bastard in a discussion about evolution? What's the justification for it in this context? It's pretty clear that he's just trolling and making excuses for it as he goes. I honestly think we'd be better off if he were banned.
As for library suggestions, I've had good luck with [PHP Markdown](http://michelf.com/projects/php-markdown/) by Michel Fortin. It's not the easiest code to extend, but you could post-process the text for your other tags. Markdown is designed to play nice with HTML, so you could always use tags like &lt;spoiler&gt;Santa isn't real&lt;/spoiler&gt; and they'd be preserved for additional processing.
This guy has started loads of arguments with me at random. [Here is an example](http://www.reddit.com/r/PHP/comments/g32qn/prepared_statements_binding_arrays/c1kse2p) where he claimed he was a '[college trained linguist](http://www.reddit.com/r/PHP/comments/g32qn/prepared_statements_binding_arrays/c1kvtqb)', accidentally quotes a 500 year old meaning of a word, that he had to look up because he didn't know. Hilarity ensues.
open flash chart 2. LGPL licence.
&gt;Why I Hate The GPL &gt;A personal viewpoint on the GNU Public License and &gt;ScUtil is MIT licensed, because the GPL is evil. LOL
IIRC bcrypt can make it's own salt if you pass in a hash without one. That said, he did inspire me to checkout the Whirlpool hash, which I use for things now, and wrapped for Python.
But once you unlock the winning formula, the sky's the limit. Keep at it, son.
jpgraph? not sure of the license.
Download it to your local webserver, i.e dev environment. [XAMPP](http://www.apachefriends.org/en/xampp.html)
Holy shit. He's even a master at trolling.
I've always liked using phpbb style bbcode on a website. I feel that it makes it much much easier to extend and you can optimize your own code much easier.
What's funny about that? I have a different opinion on licenses than do you.
&gt; "full of BS" (ironic?) Nope. http://rhetoric.byu.edu/figures/i/irony.htm &gt; scutil isn't exactly impressive, unless there's something I'm missing There is. Here's the doc page for just one of the languages contained. http://scutil.com/docs/sc.html#index Since you decided to try to troll my on my blog and behind my back in public, I'd like to see where your work is which is better. ---- Edit: I notice you immediately downvoted - less than 30 sec - but didn't hold up any of your work. So, I decided to go looking. All I can find is ZForms, a tiny model-view-controller plugin for making forms in WordPress, which not only is hilariously limited, but full of defects. Is *this* what you think constitutes impressive code? A bunch of buggy little calls into someone else's application? http://wordpress.org/extend/plugins/zforms/ It's like watching a waitress who thinks she's about to be the next big name complain about how whoever the big actress is is a hack. Wait'll you even get that far before speaking up, guy.
For something simpler with a nicer GUI try sql buddy. Really good and works well.
I have this cleaned up version of Michel Fortin's Markdown parser. I cleaned everything up, added phpdoc documentation, made some improvements where I could, and removed all the extra software-specific functions and helpers from the global space: http://pastebin.com/kA9NibwM
A bunch of fake drama from fake accounts, like the last two times.
Notice how you're now downvoted for being polite, reasonable and having a supportive opinion.
Actually, I'd like this thread to be removed. I have nothing to do with this.
So did the original poster. They're very probably the same person, whose last cleaned up troll account was TrollPointerOuter, and also existed for the sole reason of spreading falsehoods about me. Very sad, really.
Already had one at request. Nothing happened. These days the amateurs get led around by the fake accounts because they're gulliable, so it'd turn into a giant complaint fest like this one.
Man, you sure do like mis-representing what was said to make it look like you have a grievance. Oh I see, just edit the post as soon as I call you on it.
If you'd asked in private, I might have. Unfortunately what you've done is cause a public place for all the people who are angry that they've been shown to be wrong to gather and complain. And for that, I've got a bunch of script attacks against my hosting, and a bunch of lies about what I do and say. I've even got one guy insisting I made this post myself (I'd much rather it was removed) because he saw a gif someone else made where the letters in my name are an anagram of this account. GEE I WONDER IF THIS IS THE SAME GUY WHO ALWAYS MAKES FAKE ACCOUNTS TO TROLL ME AND THEN GETS REMOVED. Reference: http://www.reddit.com/user/TrollPointerOuter Most of the comments here are new users, or users created when the last one was destroyed then underused until today. Examples, besides the poster: http://www.reddit.com/user/b1gw0rm http://www.reddit.com/user/ShitMyHandsSay http://www.reddit.com/user/JustCollectsMyths http://www.reddit.com/user/CohrntSpy-StonCyphr You people fall for the same thing over and over and over.
i just let the users input html and use strip_tags to only allow ones I want. Run it through an instance of html tidy to make sure they don't do anything stupid, and we're good. For things like video embedding, they cant use iframe, embed, or object tags, so i wrote a script that if they paste in any youtube url into their comment it will automatically convert it to an iframe embed.
Thanks!
&gt; it's hard for me to find one that doesn't enforce some kind of open source licenses on my project. You should be able to find ones that are MIT-licensed, or BSD-licensed. These licenses both allow closed source use, and only require that you attribute the code in the source. Alternatively, LGPL-licensed projects require the source for the library to be published, but not the rest.
Notice how you're being massively vote manipulated for being polite, respectful and supportive.
Wat?
So everyone here is the same person using a 'troll account'?
Sectec Astronomy?
These are textbook mental issues; you should have them checked out. You're literally so defensive about your own arrogance, assholish nature of discussion, and contributions to FOSS, that you literally look up what other people develop just to make fun of them. LOL
Armchair psychological diagnosis. Classy.
yall are amazing! I used the tables the way yall recommended and am getting closer to the results that i need... right now i have it displaying a random question (still need to fix that code) but when you answer the question its properly placing the id's and q answers where they need to go. Im pretty sure its sloppy code, but i am very happy with the result as this is my first real php / sql project. ill try the code tonight for the JOIN and see if I can make progress on that. 
No. About half a dozen, currently. He does this *all* the *time*. He even brags about it. It doesn't take many voices to generate a fake crowd.
&gt; accidentally quotes a 500 year old meaning of a word False. You're just using this as an excuse to drag up old arguments.
Could you please publish the Why I Hate The GPL?
Yes, quite. I've seen enough douchebags on the Internet over the years, I can tell from what others have demonstrated in this thread that you're extremely rude, egotistical, and stubborn. I don't need to downvote you to feel better about myself, but you're more than welcome.
I'd like to know what project (attributable to you) you are most proud of is.
so this is something that a bunch of fake redditors do from time to time?
No offense, you have a * next to your text. That means you edited it many minutes after the first edit. Hopefully, people will start quoting others when they reply to avoid even the possibility in leu of a revision history.
no matter how much a person can possibly know, if there's no intention of being helpful then better stay away from forums.
frozenfire wrote: &gt; To be fair, just about anyone can be involved in developing PHP. Now I know you tried to be demeaning to StoneCypher, but you do realize that this is one of the very things that should be stopped, right? I mean, letting "just about anyone" be involved in an enterprise language is just asking for it.
[B1gw0rm](http://www.reddit.com/user/b1gw0rm), I hope you choose to remove your comment before you feel a sense of remorse in the future. That's a mean comment and something only a bully would say.
Um, the people he was replying to thought that Java was faster than C++, that C++ was slower than C (originally, their comments by lack of definition gave the impression that all C++ was slower than C, mind you), and that C++ code was somehow never interpreted. Cypher has an attitude problem; I did, too, when I was in my early 20s. But pure stupidity of others brings out his rage complex. He needs to just realize that he's smarter than most people and to not hold it against them, just like most people wouldn't hold a retarded person's lack of reasoning abilities against them.
What's the definition of a troll? Reddit says I'm one, but I'm clearly not trying to disrupt a community or say things to rile opinions of others.
Just one, trying to appear as a bunch.
1. stick to classic PHP 2. stay with classic PHP 3. learn even more about classic PHP 4. start looking at PHP frameworks 
&gt; I can tell from what others have demonstrated in this thread Mmm hmm. Four years of cherry picking. &gt; I don't need to downvote you to feel better about myself Right. That's what public attacks on a stranger for what you're currently doing serve. :) Have fun.
dissidents, what textbook mental issues are you seeing, exactly? And um, he looked up what they wrote cuz they did the same exact thing to him IN THE PARENT THREAD. Good lord! I think you're just trying to fight with him now.
I keep forgetting about it :D Sorry. Lately I've been bullet-focussed on my two SAASes.
You need to read Ayn Rand's [The Virtual of Selfishness](http://www.aynrand.org/site/PageServer?pagename=objectivism_nonfiction_the_virtue_of_selfishness). Then maybe you'll see how wrong you are.
This is a disgusting hit piece against a guy who has done nothing but try to clear up misconceptions and train people who should know better but don't. What happens is that he sees some outlandish response and goes into full-fledged righteous mode. Yes, he needs to chill and realize not everyone can or does know everything he does, and he needs to train. No, that gives no one the right to libel or slander him or otherwise attack him like this shitfest in here. 
sucks. You do come out a bit aggressive sometimes though (even if you're right, and most of the times you seem to be). You have to understand that r/PHP is a common place for newbies to ask their doubts, and having a senior developer pseudo-explaining you how you should have done x, while he also explains why you're an incompetent piece of garbage is not the way anyone could learn.
Yes! On /r/php generally the most negative posts are the most true. I mean, I have +3300 comment karma on reddit as a whole but -100 on /r/php and I probably earn more than 3 redditors on /r/php combined ;-)
[CohrntSpy-StonCyphr](http://www.reddit.com/user/CohrntSpy-StonCyphr) wrote: &gt; You're under the wrong impression. He's a troll and attention whore and he created [this thread](http://www.reddit.com/r/PHP/comments/iu7xw/stonecypher_can_you_tell_us_about_your/c26ph0z) to dupe people like you. Coming from an obvious sockpuppet, this is the most outlandish conspiracy theory I've ever heard, and I'm a Truther!! Besides! The person who created *that* thread is [widyakumara](http://www.reddit.com/user/widyakumara), an over 1 year-old account w/ 1100+ karma. You win the "dumbest argument of July 2011" badge.
&gt; You do come out a bit aggressive sometimes though Generally I do that when I think someone is ignoring what's in front of them, and doing damage to a third party by giving bad advice. In my mind, it's roughly equivalent to grabbing someone by the shoulders and yelling to snap them out of something. &gt; You have to understand that r/PHP is a common place for newbies to ask their doubts I have no trouble in this group. Don't be confused: this is my stalker generating fake outrage to annoy me, nothing more. I've been in there for five years. &gt; while he also explains why you're an incompetent piece of garbage is not the way anyone could learn. Again, only when they're damaging a third party by giving bad advice *and* ignoring it. What I'm trying to teach there isn't the tech, it's the "don't screw other people up by pretending to be something you aren't." You're working from a biassed sample. Notice that the people in the host thread who are standing up for me are people I've done that to. The vast bulk of the people I do that to thank me. A tiny slice of them turn into butthurt vengeance clowns who raise their torch at any excuse; you can see several here. That is *not* evidence that it isn't a good bulk action. Indeed, one of the people I did this to just bought me two months of reddit gold as an encouragement. After you've been here a while, you'll start seeing through the manipulation. It's just the internet. I appreciate the constructive criticism. That's entirely too rare here.
He can be very rigid and\or dismissive at times yet he can also post helpful advice, depending on the topic. For instance, SQL related questions. (Edit, toss security related issues in there too) **Edit:** I find it sad that this has more discussion than pretty much anything posted in PHP... We definitely did not need this thread to alter all of our opinions on StoneCypher...
How do you check your per-subreddit karma?
That's hilarious. I hadn't even noticed. :)
Why was TrollPointerOuter's account deleted? I'd like to know.
Well, I'm +1'ing every polite comment, so it's at least 2x worse than it looks.
Good lord ;o
Most 10 yr PHP vets don't know how to code; hell, they're my main clientele! The 5 year PHP "vets"? They'll get you killed.
This is not a troll account. I just don't have the time nor the inclination to spend countless wasted hours posting. However, I make an exception for people like you who deserve to have some shit thrown in their direction. You obviously have a great deal of knowledge and could be a great asset to people here on reddit. However, your willful decision to be the poster boy example of a condescending, elitist, anti-social, neck beard programmer is what makes most of what you say useless. It's obvious from your posts that you have zero interest in actually helping people, but rather post just to inflate your own sense of self-worth and ego. What's the view like from your ivory tower. 
What are they?
I understand this as well, if you're trying to help maybe you should just PM the op, so nobody is offended. Anyways, we're all grown ups (at least most of us are), this is not 4chan and I think we all have better things to do with our time than harassing users. If this is a recurring thing that's happened to you in the past, just try to avoid falling in the "-you're wrong! -no, you're wrong" loop when it seems to go nowhere. Just an advice. Have a nice day
Because he broke the bejesus out of the rules. Among the more obvious examples, he posted a ton of my personal information in public. The thing that finally got the Reddit admins to act was this, though: http://www.reddit.com/r/science/comments/i74hv/one_of_the_great_evolutionary_leaps_in_the/c21hz56
Welcome to the party! Now we each have our own /r/php attack threads!
Oh, this isn't my first by this guy.
&gt; I understand this as well, if you're trying to help maybe you should just PM the op Apparently you don't understand. I believe that the original poster is a fake account generated by my stalker. There's no point in private messaging him. Besides, I've answered him in the past. &gt; this is not 4chan and I think we all have better things to do with our time than harassing users. Obviously you don't. Evidence: this thread.
&gt; This is not a troll account. He says, having never done anything but to troll, then proceeds to troll further: &gt; deserve to have some shit thrown &gt; condescending, elitist, anti-social, neck beard programmer &gt; most of what you say useless. &gt; It's obvious from your posts that you have zero interest in actually helping people, but rather post just to inflate your own sense of self-worth and ego. What's the view like from your ivory tower. (cough)
I have my own stalkers on /r/php, too. All they do is go around attacking and downvoting me. Like literally 100% of their comments are attacks against stuff I say lol. One user is [lollercoaster](http://www.reddit.com/user/Lollercoasters). See [I have my own reddit stalker](http://www.reddit.com/r/AskReddit/comments/fx7fw/i_have_my_own_reddit_stalker_she_only_ever/). 
A project management application mostly called next.do, and a translation/internationalization/localization app for which I'm struggling to come up with a good name that is not squatted (it's currently called phrasematrix, but I will drop that name in a heartbeat if someone gives me a better idea.)
Yes, to me too. See http://www.reddit.com/r/AskReddit/comments/fx7fw/i_have_my_own_reddit_stalker_she_only_ever/
PHP is an open source scripting language for web applications and website development. Open source CMS like drupal, WordPress and Joomla is available for PHP development.
http://php.net/bbcode
I can assure everyone that I am not StoneCypher. I don't know why everyone is assuming that this is a "hit piece" or something. I thought that as someone who helped write PHP, he could give us some good information.
&gt; This is not a troll account. I just don't have the time nor the inclination to spend countless wasted hours posting. However, I make an exception for people like you who deserve to have some shit thrown in their direction Same here. Pretty sure this post will only fuel the paranoia though.
Most people learn not to behave like that by the time they're 14 or so.
is he harassing you online anywhere else? Don't know what the hell is wrong with some people
Sounds interesting. If you can, tell me more about the translation app. How close to launch are you? 
I'm close to testable alpha - maybe a couple weeks, but it's hard to tell, given that I also have a day job and a personal life, and things come up. Before I go public beta, I have to nail the server down for security purposes, and I don't honestly know how long that'll take; I'll also have to get payment stuff working, which in turn means I need a corporation, I have to pay for a little bit of lawyer and CPA time, blah blah. Given that I just moved 9 months ago, that also means I have to find a new lawyer and CPA (cross-country means new staff,) and so on. Plus this means I need to go get hosting at a second site for replication, set up a new set of backups, blah blah, you know the soft-shoe. Also, I'm just really screwed on a domain name right now. I hate the one I have, and I can't find one I like better that isn't squatted. (Help on these grounds would be appreciated: phrasematrix.com is a _terrible_ name.) So. I mean, for purposes of "can I use it?" Pretty soon. For purposes of "is this a real business?" That's several months, maybe half a year out. The early stages will be *only* i18n. l10n and g11n come later.
Will you prove my point by making sure you have the last word...let's see if you can stand not to reply...
pChart or flotr, the latter being JS, but I build a little class to build the JS, it integrates well and the charts look nice.
&gt;If you'd asked in private, I might have. Bullshit. You're not involved with the PHP language in any way. You didn't help write the language. You're full of shit. If you're not, just prove it here. Oh wait, I bet you'll say some crap like "I don't need to prove anything". Whatever dude. For someone who "helped write the fucking language" it's pretty strange that Google doesn't show anything to support it. &gt;You people fall for the same thing over and over and over. I know, people fall for the lie that you're an expert with loads of skill and that you "helped write the fucking language [php]" when you're just lying.
Oh you mean something StoneCypher would say?
Wow a StoneCypher apologist. Get a room you two.
&gt;they're gulliable, As someone who claims to have an exemplary knowledge of English, you can't even get the spelling of **gullible** right. Lol.
This is just another throwaway account so that someone can lie without consequences. What a surprise: they're the same links that TrollPointerOuter and KravenC always give. &gt; I think the admins should seriously look at banning him or getting rid of him. The speaker is just angry because he gets banned regularly. It's amazing anyone falls for this stuff.
Well, unfortunately you've created a drama mess which you refuse to remove.
I have been quite helpful. Don't be so gulliable.
Are you done?
He's just off talking shit elsewhere. The only thing that appears to actually be attached to his name is a tiny WordPress plugin called zforms.
I'm sorry that was not my intention. :(
He used to on IRC.
And after you finish you can rewrite it using pdo!!! :P (half-joking)
Actually, he's right. Just about anybody can be involved in PHP, and as I've often said, my contributions were relatively minimal. The only time I make this observation is when someone's pretending they've been around forever.
That's all this thread is here for, is so that one guy posting from (now) nine different fake accounts can make it look like there's a community uproar when in fact there is not.
Uh. He's making a joke about treating my nickname as a string. Range in the mathematical sense.
What does the app actually do though? If I were a user, what would I be using it for? I don't know much at all about localisation I'm afraid. Regarding the name, I think avoiding the word "phrase" and the letter "x" would be a good idea; "phrase" is an ugly word and the letter "x" always feels like a throwback to the late 90s / early 2000s when everything was cooler if it had an "x" in it. On an unrelated tangent, what piece of PHP code are you most proud of? Not necessarily an entire script, just a function or even a single line that you feel solved a problem elegantly or particularly concisely or whatever measure of pride you choose. I code primarily in PHP (with nowhere near the finesse or aptitude you clearly have) and always find your posts educational, even when they're confrontational.
And yet, given that you can fix it, you choose not to.
I second this if you can go with a javascript approach. I used it for a project that needed to generate a line chart based on a daily water level reading taken over the past 80 years. The graph was generated after the user entered a date range. I went with highcharts because it had the date range scaling built in. So if the user selected a range of 2 days, or 80 years, the x-axis values for the dates would change/scale on-the-fly. Another cool thing is that you can zoom in on the data set by dragging the mouse in the plot area. Also, by default, the user can also download a raster or vector image right from the chart. If you need a php only solution, pChart is fairly easy to implement.
http://reddit.dataoverload.de/karmastats/#stonecypher
&gt;Don't be so gulliable. Holy shit dude. It's spelt **gullible**. This is what happens when you pretend that you're a "college-trained linguist" and get your definitions from Wikipedia when in reality you're not even a rank amateur. You can't even get the spelling of a simple word right. **G-U-L-L-I-B-L-E**
&gt; What does the app actually do though? If I were a user, what would I be using it for? Moving forward I will assume you mean the translator, not the project manager. I will be covering three topics: i18n, l10n and g11n. However, from day 1, I will only cover the first of the three. The simplest example of internationalization is string table replacement. Consider the case that you are, I dunno, a flash game author. You read about how the Chinese knockoff of FarmVille (itself a knockoff, not making accusations) ended up passing up real FarmVille pretty quick largely due to that the Chinese speaking population is so large. So, you decide to make your game - for now let's assume it's a tower defense game like GemCraft - available to the Chinese userbase too. My application competes with Trados in the way that gmail competes with Microsoft Outlook - it's on the web, it's free, it's simple, it doesn't have 95% of the complex tools, but it does generally the same thing for a less intense crowd. So the first step would be you altering your application so that your various user interface strings get pulled from a datastructure, rather than being hardwired into place. Since it's a flash game, I'll just assume your datstructure is a JSON object, and that you're using property binding; these details aren't important, but context makes this easier to understand. You'll end up with something like var Language : Object = { 'fire':'Fire missile!', 'buy':'Purchase', 'upgrade':'Upgrade', 'title':'My awesome TD' }; Obviously there'll be a ton more strings, but you get the idea. Then you feed that - or a unix-style ticklist or a java-style central.properties or a Flex-style locale file or an XML file or a PHP serialized array or whatever - to my application. My application then does some internal juggling and storage, and goes "are these the strings you expected to see?" Then you say yes (or correct it), and tell it you want Chinese and Spanish, and in Chinese you want a translator with at least this quality of education, and blah blah. Once you confirm, you wait for humans to bid on the job, and once you accept, they work on their own time. Once one of them is done, the system gives you a random sample of their work with machine translations, so you know they didn't secretly give you a religious or political screed or whatever, and you're offered the opportunity to hire a different translator for quality verification. After that, you pay, and your chinese string table is delivered to you. Put that in, compile, and bang, your game is available to 25% of Earth that it didn't used to be. Localization - which is a later topic, not an earlier one - is "to Americans, use green for good/yes and red for bad/no; to Spaniards, use yellow and red; to Chinese, use red and white; et cetera. In America, use this trash can icon for delete; in Indonesia, use this X; in Saudi Arabia, use this centered dot; in Turkey, use this empty circle; in Japan, use this trashbag. " Those colors and icons are wrong; I haven't looked them up yet. I just made up examples to explain. Globalization is a complicated topic. It has to do with things like knowing how do provide the correct social cues when talking about things, et cetera. If you've ever been about to do business with a company only to look at their webpage and go "well, they're not talking about these three topics which every company like this talks about, so they don't seem legit," then that, in combination with not knowing what the signals are in some other country, is globalization. &gt; On an unrelated tangent, what piece of PHP code are you most proud of? The sql-backend portable internationalized n-gram search engine in Kayako SupportSuite 4, probably. I'm sure that app has been pirated to hell and back by now, so you should be able to get a copy to look at. Very little of my impressive work is PHP work. PHP is a "get it done" language to me. &gt; the finesse or aptitude you clearly have Kind of you to say.
&gt;I've often said, my contributions were relatively minimal. So you admit that you were lying when you said that you "helped write the fucking language"? Thanks for finally admitting it!
P.S. calling everyone 'retarded' who you happen to believe to be not as intelligent as you is fairly insulting and shows a lack of intelligence in and of itself.
I could absolutely use a service like that. Have you figured out your pricing yet? Do you have a mailing list set up for when you launch or do you have a twitter account I can follow to be notified when it's up and running? Another unrelated tangent: what resource would you recommend if I wanted to learn about best SQL practices both in terms of query structure and security (in a PHP context)?
I use PhpStorm and love it. If you want to try out a real IDE (like PhpStorm) but don't want to shell out the money a good one is Netbeans.
By creating a throwaway account all about him, you're just feeding the ego and giving him more reason to keep trolling. Don't feed the trolls! Get [Reddit Enhancement Suite](http://reddit.honestbleeps.com/), put him on ignore, and you won't have to witness his trolling any longer. 
&gt; Really, I'm surprised that he doesn't want to back up his claim that "he helped write this fucking language" Thanks, I was going to post about [that exchange](http://en.reddit.com/r/PHP/comments/husl3/another_complex_mysql_query_question/c1yt3sa?context=3), but you've covered it already. I love how he tried to play the _holier than thou_ card and admonished _me_ for throwing personal attacks and then he turns around and says things like "You're just some poser talking fog". He also kept on about how "if I understood the problem" or if I "knew what I was talking about", but none of my arguments were around the actual code at all -- but of course he had to keep presupposing all of his arguments by insinuating that I was clueless and didn't know how to solve the problem. &gt; In conclusion, he's a gigantic douche. Couldn't have said it better myself.
you can't stand being questioned and you have zero tolerance to people having doubts, even less being wrong. those are mandatory preconditions of the learning process so I believe you're not suited to teach. you either work on yourself in order to correct that or give up and isolate from the rest of us. what you've been doing isn't helping anyone. --- and for the record, I had the chance to experience your way of "helping" some time ago on IRC so I know why I'm saying this. please take it as it is, I don't hold any grudge against you it's just the way you're presently. hope you can change it in the future, I'm sure you have a lot to share just need to figure out the way to do it properly.
spoiler alert!
To be fair, no they don't. Absolutely not. One does grow out of it, but not that early of an age. Maybe closer to around late high school or early college. Well before StoneCypher's presumed age, so it's not a defense of his behavior here.
He (hopeseekr) didn't call everyone retarded who he happened to believe to be not as intelligent as him. He was using retarded in the literal sense as an analogy.
The term 'troll' comes from it's oldest meaning having to do with fishing. Somebody that is classically 'trolling' on the Internet is fishing for a negative reaction. They cast their bait, let's say a thinly veiled insult, and then they eagerly await a bite. If you find yourself being aggressive, insulting, or condescending without provocation then you're probably a troll. If you don't think that you do this, but a statistically significant amount of others say otherwise, then it's unlikely they are mistaken. Instead, consider that you could have some form of psychosocial disorder like Aspergers or Sociopathy.
&gt;I noticed in a few posts you said that you were involved in writing the language and also in the design of it. yes, he **said**, he seems to be saying plenty of things...
Drawing an analogy between people you believe to be less intelligent to you and the way you look at people with mental disabilities. Still sounds kind of shitty.
His example of a "mental disability" is just "objectively less intelligent to an extreme." It serves as a hyperbolic case of less intelligence to drive the point home. The point being, in fact, that you should not hold it against them or treat them disrespectfully. If you would not do so with someone with objective lesser intelligence, why would you do so to someone with subjective lesser intelligence?
Maybe, not bad to strive to be better though
If he was a man, he'd use a long-established account. This childish behavior is one of the reasons I gave up on reddit for a year. I guess nothing has changed. There are sooo many juveniles here, it's ridiculous.
I'm just annoyed that this shit still goes on in reddit. It's happened to me, to you, to many others. It's worth moving to some site that punishes such attacks. Seriously.
StoneCypher justifies his shit by saying that newbs spouting myths and rumours are a curse on programming. Condescending pricks are a bigger problem, though. Programmers are well known for being condescending pricks, people are wary of IT workers in general because of this trait, and it's thanks to people like this guy.
You could save the insults and point out where he lied.
This doesn't even mean anything. Are *you* done?
My recommendation would be to parse the BBCode into Markdown when possible, and into HTML when not. Then run the result through Markdown. Markdown processors allow HTML by default, so it'll do the right thing most of the time. When done, then pass the result through something like HTML Purifier for sanity and call it good. Oh, and a safety tip: Keep around the original post body, not just the processed one. It might take more space, but it'll prevent you from needing to reverse the Markdown process.
Google Charts
The problem is that he's been that way *all over the internet* for *years*. The chances of him "chilling" are pretty minimal at this point. The behavior should be shunned. Here on reddit, that means downvoting as unconstructive. Unfortunately this also feeds the whole persecution thing.
&gt;Now I know you tried to be demeaning to StoneCypher Actually, before today I had no idea who StoneCypher was, and wasn't aware that this was a troll thread. As for the latter part of your statement: You're a moron. PHP has flourished on account of its open-source nature. Without that aspect, there would be no PHP.
&gt; you can't stand being questioned I'm just bored of a bunch of people who don't know me judging my reaction to a bunch of obviously fake accounts made by one person trying to create drama.
Yes, this thread is full of fake accounts. That's the only explanation.
hopeseekr, you and I have talked many many times (in IRC as well), so I hope you respect what I'm about to say and don't think I'm out to just troll or cause drama. The fact is, StoneCypher is fucking rude and insulting. He may be an excellent developer, a great contributor to open source software, and maybe even a fantastic guy in person. However, when he posts on this site nine times our of ten he's being a dick. Helping people is great. Helping people so you have an excuse to insult them is childish. This place would be a much childish place without StoneCypher in it. If StoneCypher has a problem with this, maybe he should just stop being so rude to people who are just looking for help- even if this means he simply doesn't help them.
&gt; Have you figured out your pricing yet? No. &gt; Do you have a mailing list set up for when you launch or do you have a twitter account I can follow to be notified when it's up and running? I have a twitter for the project manager. I was waiting on making one for the translator until I came up with a name I didn't hate. &gt; Another unrelated tangent: what resource would you recommend if I wanted to learn about best SQL practices both in terms of query structure and security (in a PHP context)? Joe Celko and Bill Karwin.
&gt; So you admit that you were lying Nope. All I said was "I helped write it, though my contributions were small." You sure are desperate. 
"Hi, I'm a fake account that was just created today in your name, and I'd like to pretend the other accounts that were created today for the sole purpose of commenting in this discussion after cutting and pasting a comment from a banned account aren't also fake." (headpat) That's nice. Have fun generating fake karma to feel powerful.
Neato. Thanks. :)
The ease with which you lie through your teeth is disturbing. "I helped write the fucking language", is what you said. You didn't say anything about your contributions being small. You still haven't said *how* you helped write the language, or even what you did. Most probably because **you're full of shit.**
Notice how you're being downvoted? Those aren't "fake accounts" no matter how much you hope it would be. :) People are recognizing you to be the arrogant douche that you are. It is truly ironic that a thread that was originally intended to point out your supposed insight into the PHP language has turned into one where your douchebaggery is on display for all to see. Karma's a bitch ain't it? :) Peace. I bet you're going to respond to this comment. Please do it to prove my point! :)
I was going to delete it. Initially I thought I just caught you on a bad day when I saw your posts. It would seem that there are people in this thread who have legitimate grievances against you (from the links I see, anyway). By deleting the thread, I would be silencing them and that would be disingenuous. I didn't take sides when I started this thread and I don't want to take either side now. I will leave the thread as it is.
&gt; It would seem that there are people in this thread who have legitimate grievances against you They're all the same person. It's pretty easy to go over an active five year user and find a half dozen angry posts. It's unfortunate that you're going to continue fuelling this drama furnace you said you didn't want to create, that I very strongly do not want around. &gt; By deleting the thread, I would be silencing them and that would be disingenuous. Oy. &gt; I didn't take sides when I started this thread Right, calling on someone in public because you demand to know what they've done and don't want to go find the last several places where they answered, instead of asking them in private, isn't you doing something inappropriate.
&gt; Notice how you're being downvoted? By your fake accounts, yes. &gt; Karma's a bitch ain't it? :) Not really. This isn't karma; this is one impotent man generating fake accounts to pretend to be an angry crowd.
Take a look at Google graphs. It's really good. 
&gt; Notice how you're being downvoted? By your fake accounts, yes. &gt; Karma's a bitch, ain't it? Not really. You're just one man who can't make a point, generating fake accounts and vote manipulating to make it look like there's a group of people who agree with you. Since I don't care about Reddit karma, this doesn't affect me. Notably, I've already gotten two reddit gold gifts today alone from people who know that this is nonsense and feel bad that I have to put up with this every couple months when you decide you need to feel powerful again.
&gt; you either work on yourself in order to correct that or give up and isolate from the rest of us. No. &gt; what you've been doing isn't helping anyone. So far, I've got seven 500+ karma individual posts and six free months of gold that say that you're wrong. &gt; please take it as it is, I don't hold any grudge against you (shrugs) I don't understand why you insist on telling strangers what to do.
&gt;They're all the same person. It's pretty easy to go over an active five year user and find a half dozen angry posts. Could be, but it doesn't seem like it to me. I see five or six accounts who seem to have evidence of your behavior against them in their posting history. &gt;It's unfortunate that you're going to continue fuelling this drama furnace you said you didn't want to create, that I very strongly do not want around. I can understand that you wouldn't want it around because it paints you in a bad light. If that is the case, then maybe you can just change your behavior? I cannot delete a thread I created because you don't like what other people have posted in it. That wouldn't be right. &gt;Right, calling on someone in public because you demand to know what they've done and don't want to go find the last several places where they answered, instead of asking them in private, isn't you doing something inappropriate. I didn't demand anything of you. I thought that my post was polite. I was asking you to share your knowledge with us. I don't see how that's demanding. Anyway, I don't want to get into an argument with you. I seem to have a general idea of how that's going to turn out. I'm genuinely sorry that this thread turned out completely different from what I expected. Have a good day.
&gt; I can understand that you wouldn't want it around because it paints you in a bad light. That's not why, and I told you clearly why. It's clear that you're more interested in trying to deduce what people think than paying attention to what they actually think. Anyway, thanks for causing a drama nightmare then refusing to clean it up. &gt; I didn't demand anything of you. I thought that my post was polite. Polite means private, not public. &gt; I cannot delete a thread I created because you don't like what other people have posted in it. Yes, you can. You just won't. There's absolutely nothing wrong with deleting a thread which has caused an unexpected problem with no upside. You just choose not to. &gt; Anyway, I don't want to get into an argument with you He says, having called me out in public, creating dozens of arguments for me, many with fake people, then refusing to do anything about it. &gt; I seem to have a general idea of how that's going to turn out. Only if you believe all these accounts that are less than a day old when they talk about how I've acted for years, whose posts are literal cuts and pastes of the guy who's already been banned dozens of times for this stuff. *****Oh wait, I forgot: you're one of those, and you believe the others are real too. ;)***** &gt; I'm genuinely sorry that this thread turned out completely different from what I expected. Not sorry enough to do anything about it.
&gt;So far, I've got seven 500+ karma individual posts He says, after stating that he "doesn't care about karma".
array_shift actually takes the element of the array off of the array, so when you go to use it again, there are no more elements in the array. try doing something like this instead: foreach ($post_prints as $print) { echo $print; } 
Oh right, because if there's data that proves someone wrong which isn't important to me, then I shouldn't bring it up. (cough) Don't you have anything better to do than to make fake accounts and create fake community outrage?
You can loop through the array like this: foreach($post_prints as $print) { // $print is now one of the urls in the array } This way you aren't changing the array, just reading each element
The victim and persecution complex is strong in this one...
That's great! I replaced my project copy of the library with yours and I'll give it a test. It looks like Michel Fortin has a [GitHub repository for the project](https://github.com/michelf/php-markdown). It hasn't been updated since late 2009. If you haven't yet, you should fork it and send him a pull request.
Array_shift removes an element from the array each time it's called, so after your first iteration over the array, it's empty. Try using a for loop instead: for ($i = 0; $i &lt; count($post_prints); $i++) echo $post_prints[$i];
Indeed, Mobs suck Someone else is being mean? Awesome, I can be mean too!
Ahhh, I should have read up more on what array_shift does. Thank you, I will try this!
Also when you put `count($derp)` in a loop it evaluates the count everytime. A better way would be to do `$count = count($derp); while($count){ /* stuff */ $count-- }` which only evaluates the count once. That being said, use the `foreach()` like others have said.
&gt; I don't understand why you insist on telling strangers what to do. because that's what discussion forums are for :) you share information and give/listen to advice, it might be good or bad and it's up to you to follow it, ignore it or counterargument it and all that is fine... as long as you stay civil. that's the point where you fail, anyway keep believing that every account that goes against you is a fake one and that reddit karma actually means something while ignoring this whole thread and the reactions of the people around you, when you're ready to listen come back and learn from the rest as much as you'd like others to learn from you. ...or not! but then, why are you here?
Thanks for that tip, too.
I second Twilio. We've made the switch in our projects and have found them to be very reliable. You also can't beat the $1/mo per phone number to have a dedicated number for each app (so you can give them their own SMS ringtones, etc). Here's their [official GitHub repository for the Twilio PHP library](https://github.com/twilio/twilio-php). They just released the 3.0 update which cleans up the class namespace. They previously had classes named 'Response' and 'Redirect'.
I'm sure you've probably looked it up by now but you can also do a foreach like this `foreach($array as $key =&gt; $value){}` which is also nice.
&gt; you share information and give/listen to advice Not when the advice is strangers who have been aggressive and don't really know you making offhanded comments based on their vague memories of years ago. &gt; that's the point where you fail, anyway keep believing that every account that goes against you is a fake one I didn't actually say this. I named five specific accounts that I thought were fake, and the reason is clear: they're all less than 12 hours old, they're all making the same false claims, and their text is cut and pasted from an old trolling account called TrollPointerOuter that got banned. Be sure to argue with things I didn't say, then be confused why I'm not interested in your "advice," though. &gt; ...or not! but then, why are you here? For the 99% of the conversation which isn't people carrying years-old grudges as an excuse to complain in public in an inappropriate way. I realize you're confused, and think this post here represents my general experience at Reddit. It does not.
I bet his mom marks Mother's Day on his calendar every year with inch-high red letters saying "Don't Remind Me".
Don't, use Netbeans instead. Or at least try it out before you continue messing with Dreamweaver. 
&gt; a half dozen angry posts Paranoia, meet delusion. Delusion, paranoia.
Ha, glad somebody else noticed this habit too, fellow fake troll account.
my experience with you backs up the statements here, you're now in phase two which is nitpicking and being overly defensive, next is to go ballistic to suppress any further discussion. it seems you also need to learn how to listen even before learning how to speak, communication is bidirectional after all.
Are you done? I'm really not interested in being preached at by a stranger over someone's hazy memories from years ago.
it's ok, this is the web you can stop participating anytime you want. it's a shame that you're so emotionally blocked that you can't even stand a simple conversation that isn't even in person. well I wish you the best anyway so good luck.
&gt; it's a shame that you're so emotionally blocked This is why I don't take you seriously. If I tell you I'm not interested in your yelling, I'm "too emotionally blocked to have a conversation." Turns out that no, I'm just not interested in a stranger who pretends to know me telling me how to act.
Glad I'm not the only one.
well, I'm not yelling; on the internet that is made by using ALL CAPS like that so it's not the case nor the intention. I told you already, if you're not interested then stop replying because here on the web you don't ask other people to not do things to you, you simply ignore them but again I think you should at least consider the possibility because you never know where you can find something useful for yourself. (and you're right I don't know you but I do know the way you behave on the web so I'm simply referring to the image you project, I really hope you're not like this IRL).
&gt; and you're right I don't know you but I do know the way you behave on the web No, you don't. Please stop consuming my time now.
yes I do, I am seeing it right now or what do you think you've been doing here? also you have the off-chance that I might get bored and stop all by myself but it's unlikely, now I wonder why *you* can't stop?
This answer is somewhat legendary on Stackoverflow. I'm on there and on a given day there is at least one or two posts that ask how to parse XML/HTML via regex. I don't hold it against them because I used to do the same thing when I was younger and didn't know any better. Of course, then you quickly find out how regex is poorly-suited for the task! I always point them to the HTML DOM parser or an XML parser.
&gt; yes I do, I am seeing it right now or what do you think you've been doing here? Dealing with a bunch of strangers who think they know me, but don't. &gt; now I wonder why you can't stop? Oh, I thought asking you to stop was clear enough. I didn't know you were just angling for the last word. Have at it, then. I've stopped as of this message with you.
Look into titanium by appcelerator.
well it's not really a matter of having the last word, it's just that you have a reason to stop and I don't have any, it's the way "social interaction" occurs on the web. besides that, I started this thread with you in hopes of explaining what the problem is and why do you get these responses here, it's not because you're StoneCypher but because how StoneCypher is but sadly you refuse to discuss the matter with me so my chances end there. also, it seems you missed it but I don't claim to know you I'm just talking about your behavior on the web and the image you project on it.
Maybe we should start a sub-reddit r/trollStoneCypher
All of your posts are in defense of the guy, even though he's the one who is making conversation difficult and he's the one being extremely rude to everyone that he disagrees with or he perceives as "wrong". You call everyone else immature? Are you StoneCypher's mom or alter ego?
functino and his good friend $_SESSIOB .... every.fucking.time :(
I'm not attacking you, I feel pretty bad for you and your attitude. You'll grow out of it, though.
Pfft, it was probably spelled that way 500 years ago. Give him a break.
Same here... i like to think most of my code is self documenting though. Half the time if i actually write a comment youu knnow youre in trouble.
have an upvote
I've always felt that PHP was not the best language for this type of thing (and that C++, C, or even Python would be better), but if it works, who cares? Looks very nice.
Looks cool, but if it's Windows only, C# might be a better choice, or Python.
What's wrong with http://www.roadsend.com/home/index.php ?
There's a lot I can't exactly talk about on reddit. StoneCypher found my personal winter project, ZForms. It's the only code I've made available to the public. It's a plugin for creating and validating forms. It's similar to Gravity Forms, but it uses Zend_Form, and it's free. I think the plugin itself is a great example of how WordPress and ZendFramework can work together. It's also a good example of how a person can create MVC-based plugins in WordPress.
GAMEchief gets it. rbnc? I'm sorry, sir. I did in no way mean to refer to "everyone" as retarded. Frequently, my words get twisted by others and I am denounced in various derogatory terms, but for the most part it is misinterpretations on their part. I have tried, for years, to refine my methods of communication, to use more four letter words, to reduce my diction, etc., but people still say, commonly, that I just sound like a homosexual. That's not the term. I just hear that phrase a lot. Honestly, if I figured this out, I would be a lot happier.
Your statement is interpreted as &gt; You're textbook crazy. That would be interpreted by a personal attack by most people you lobbed such a statement at.
I don't like mobs and I don't like mob attacks. EVEN IF it's justified, which in this case it's not. There's a reason lynchings are frowned upon. You can tell this is a lynching because every post that comes to his defense and every single one of his comments are heavily downvoted, even when they aid the conversation.
At the end of the day, I'd rather work on beautiful code by "condescending pricks" than horrible code by "newbs".
-1 In the future, I hope you come across this comment and have a sense of remorse. That is something only a bully would say.
That's an observation... he has some serious ego problems. I truly do feel sorry for him.
I don't know. I haven't seen this level of misinterpretation outside of r/PHP. I've seen misinterpretation a lot, but usually people scold such a person. I am absolutely surprised anyone, let alone the majority, would upvote rbnc for making such a claim about your post. I dare say they are doing so deliberately, or merely carrying over disapproval from other comments of yours.
or Perl
I found [my exchange with him](http://www.reddit.com/r/PHP/comments/f9drf/how_does_reddit_handle_hierarchical_comments/c1eai5n) to fit well into your description.
Okay, so this works fine for printing the elements from an array, but how do I test if the array contains elements? I want to use something like this, to test if the array is empty (or not): &lt;?php if($post_prints !== '') { ?&gt; Do stuff &lt;?php } ?&gt;
I'm all ears for some constructive criticism of ZForms. Did you look at the code? As far as scutil, I think it is interesting that you tried to make your own unit testing framework. Assuming it works, why would I use it instead of phpunit? The code looks incomplete, especially since it's like 200 lines of code. 
"long running code" doesn't sound like something users should be able to start.
I know this will be unpopular in this subreddit, but PHP isn't a great language for this. Go for C# or Python. If you don't intend to port it anywhere ever, C# is pretty nice and easy to get started building Windows UIs.
&gt; I'm not attacking you, I feel pretty bad for you and your attitude. "I'm not attacking you, (attack)" Have a nice night, stranger.
&gt; I'm all ears for some constructive criticism of ZForms. Says the man who was already asked to justify his existing hilariously non-constructive and incorrect criticism of scutil, yet now wants to just avoid the topic. &gt; As far as scutil, I think it is interesting that you tried to make your own unit testing framework. I've made more than a dozen of them. &gt; Assuming it works, why would I use it instead of phpunit? Oh lol, you're just looking in the one language you speak, aren't you? Look in /erl/src . The PHP stuff is off in 20 other domains. There's a reason you'll find ScPhpCrypt in a bunch of large projects. It's just not in this particular library. This is my hobby library, and very little of my PHP code is hobby code. This isn't my only repo. You're just criticizing something you didn't bother to read the readme for. &gt; Assuming it works, why would I use it instead of phpunit? The PHP one in there? You wouldn't. I didn't even realize that was checked in there. I never bothered to finish it, because the project I was starting it up for I ended up writing in a different language. Why would you use what it was going to have been? Because my plan was to replicate a ruby tool called Heckle and a haskell/erlang tool called QuickCheck. But I never finished. Honestly I didn't even really get started. I didn't even realize that was in there; that probably happened during my last laptop merge. That's an Erlang library, dude, and you're complaining about how it doesn't look impressive because you're off in the PHP directory, after having been given a doc page you apparently didn't even look at. &gt; The code looks incomplete It is. It's in there by accident. READ THE WEBPAGE. IT IS AN ERLANG LIBRARY. A partial directory listing follows, because I guess you need help with a filesystem. Notice how one source file, sc.erl, is 190k. That's the one that you didn't look at the doc page for. The rest of those aren't in that doc page. Maybe next time you look at a library with the intention of criticizing it in public, you'll look in more than one corner directory for a language that isn't the library's language? Just saying. Here's what you can't find, apparently. Volume in drive C has no label. Volume Serial Number is DCD0-515A Directory of C:\projects\scutil\erl\src 07/20/2011 07:34 PM &lt;DIR&gt; . 07/20/2011 07:34 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 2,020 cmudict.erl 07/20/2011 07:34 PM 0 damnit.txt 11/20/2010 09:56 PM 14,163 heckerl.erl 11/20/2010 09:56 PM &lt;DIR&gt; htstub 11/20/2010 09:56 PM &lt;DIR&gt; misc 04/11/2011 09:10 PM 1,301 newhtstub.erl 02/03/2011 11:33 PM 1,063 readme.txt 04/03/2011 07:10 PM &lt;DIR&gt; sc 07/19/2011 10:24 PM 190,943 sc.erl 11/20/2010 09:56 PM 21,828 scutil.erl 11/20/2010 09:56 PM 3,791 scutil_testsuite.erl 11/20/2010 09:56 PM 6,838 sc_counter.erl 11/20/2010 09:56 PM 6,550 sc_cq.erl 07/19/2011 10:24 PM 2,442 sc_eqc.erl 11/20/2010 09:56 PM 4,873 sc_generator.erl 11/20/2010 09:56 PM 5,397 sc_lazy.erl 11/20/2010 09:56 PM 1,980 sc_markov.erl 11/20/2010 09:56 PM 6,571 sc_mtdf.erl 11/20/2010 09:56 PM 3,747 sc_pert.erl 11/20/2010 09:56 PM 4,503 sc_regex.erl 11/20/2010 09:56 PM 2,706 sc_signal.erl 07/19/2011 09:54 PM 9,651 sc_tests.erl 11/20/2010 09:56 PM 5,049 sc_text.erl 11/20/2010 09:56 PM 7,598 sc_time.erl 03/27/2011 10:02 PM 3,412 sc_todo.erl 11/20/2010 09:56 PM 3,851 sc_var.erl 11/20/2010 09:56 PM 9,198 sc_vector.erl 01/30/2011 10:25 PM 2,683 sc_vote.erl 11/20/2010 09:56 PM 6,779 testerl.erl 11/20/2010 09:56 PM 441 testerl_testsuite_behaviour.erl 11/20/2010 09:56 PM &lt;DIR&gt; tests 27 File(s) 329,378 bytes Directory of C:\projects\scutil\erl\src\htstub 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 3,481 htstub.erl 11/20/2010 09:56 PM 12,318 htstub_core.erl 11/20/2010 09:56 PM 15,307 htstub_default_webserver.erl 11/20/2010 09:56 PM &lt;DIR&gt; servers 3 File(s) 31,106 bytes Directory of C:\projects\scutil\erl\src\htstub\servers 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 1,512 foodball.erl 11/20/2010 09:56 PM 1,606 foodball_foodlist.erl_frag 2 File(s) 3,118 bytes Directory of C:\projects\scutil\erl\src\misc 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 2,108 kember_identity.erl 1 File(s) 2,108 bytes Directory of C:\projects\scutil\erl\src\sc 04/03/2011 07:10 PM &lt;DIR&gt; . 04/03/2011 07:10 PM &lt;DIR&gt; .. 02/26/2011 04:00 PM 4,617 bayes.erl 11/20/2010 09:56 PM 3,578 bit.erl 11/20/2010 09:56 PM &lt;DIR&gt; bridges 11/20/2010 09:56 PM 19,681 cards.erl 11/20/2010 09:56 PM 5,630 columns.erl 11/20/2010 09:56 PM &lt;DIR&gt; convert 11/20/2010 09:56 PM 8,603 dq.erl 11/20/2010 09:56 PM 378 hotcode.erl 11/20/2010 09:56 PM &lt;DIR&gt; htstub 11/20/2010 09:56 PM 2,670 htstub.erl 11/20/2010 09:56 PM &lt;DIR&gt; i18n 11/20/2010 09:56 PM 3,260 i18n.erl 11/20/2010 09:56 PM 6,963 installer.erl 11/20/2010 09:56 PM &lt;DIR&gt; irc 04/03/2011 11:55 AM 269 mealy.erl 11/20/2010 09:56 PM 9,084 net.erl 11/20/2010 09:56 PM 8,427 note.erl 11/20/2010 09:56 PM 6,683 parallelism.erl 11/20/2010 09:56 PM 2,669 purity.erl 04/03/2011 09:15 PM 4,827 voronoi.erl 15 File(s) 87,339 bytes Directory of C:\projects\scutil\erl\src\sc\bridges 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM &lt;DIR&gt; local 11/20/2010 09:56 PM &lt;DIR&gt; net 0 File(s) 0 bytes Directory of C:\projects\scutil\erl\src\sc\bridges\local 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 2,693 cpp.erl 1 File(s) 2,693 bytes Directory of C:\projects\scutil\erl\src\sc\bridges\net 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 2,760 actionscript.erl 11/20/2010 09:56 PM 2,799 javascript.erl 2 File(s) 5,559 bytes Directory of C:\projects\scutil\erl\src\sc\convert 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 4,708 weight.erl 1 File(s) 4,708 bytes Directory of C:\projects\scutil\erl\src\sc\htstub 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 2,658 tcp.erl 1 File(s) 2,658 bytes Directory of C:\projects\scutil\erl\src\sc\i18n 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 0 en_us_ascii.erl 11/20/2010 09:56 PM 0 en_us_unicode.erl 11/20/2010 09:56 PM 0 unicode.erl 3 File(s) 0 bytes Directory of C:\projects\scutil\erl\src\sc\irc 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 2,674 client.erl 11/20/2010 09:56 PM &lt;DIR&gt; server 11/20/2010 09:56 PM 2,756 server.erl 2 File(s) 5,430 bytes Directory of C:\projects\scutil\erl\src\sc\irc\server 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 2,701 botserv.erl 11/20/2010 09:56 PM 2,706 chanserv.erl 11/20/2010 09:56 PM 2,706 memoserv.erl 11/20/2010 09:56 PM 2,706 nickserv.erl 11/20/2010 09:56 PM 2,706 operserv.erl 5 File(s) 13,525 bytes Directory of C:\projects\scutil\erl\src\tests 11/20/2010 09:56 PM &lt;DIR&gt; . 11/20/2010 09:56 PM &lt;DIR&gt; .. 11/20/2010 09:56 PM 2,655 sc_cq_testsuite.erl 11/20/2010 09:56 PM 1,204 testerl_testsuite.erl 2 File(s) 3,859 bytes Complaining about the PHP directory of an erlang library for a guy who has more than 50 public repos is ... kind of silly, don't you think? Also, it's not "the stonecypher utility." That incorrectly suggests that this repo is alone. It's not even the biggest one. This is one of about 10 erlang repos that I've made public. I've made about 20 PHP repos public. None of them are in here. Honestly, dude. Let's see if you can even admit to being wrong without trying to spin it.
I'm sure it feels great to talk about erlang in the php sub-reddit.. too bad it has nothing to do with anything we're talking about here.. I'll admit it feels kinda cool when I post helpful answers in different sub-reddits eg drupal, django, wordpress, magento, but I don't let it get to my head..
Had this same debate with my team...ended up with BBCode since we wanted the content portability between our custom stuff and PHPBB (one of our mainstays, unfortunately). I would have loved to use Markdown due to the syntax, but it just wasn't for us. The BBCode extension is awesome, really fast, easy to work with, etc. There is a bug if you wrap the creation in a class (on windows at least), but other than that it's been smooth sailing. There are raw PHP implementations, but unless it's a two pass implementation (append unique ids to tags into the database, matches tags coming out), it can be pretty slow. (NBBC was a candidate for a while, but the speed was just not up to snuff). Since PHP and Windows is such a fickle beast, if you need a TS VC9 compiled version (Pierre doesn't have one available) I can email you mine if necessary (I'm hoping you're not stuck on windows like me, though). Good luck!
&gt; I'm sure it feels great to talk about erlang in the php sub-reddit So, let me get this straight. *You* brought up my erlang repo. *You* looked in the wrong language. *You* made a public criticism. Now, when I point out the hilarious error you made, it's my fault because the sub-reddit you chose to bring this up in isn't the right one for the language you didn't notice you were looking at? &gt; too bad it has nothing to do with anything we're talking about here Translation: "I can't admit that I criticized you in public behind your back for something I was completely wrong about based on my very limited reading skills." &gt; but I don't let it get to my head. Right, if you try to make fun of me behind my back, and I point out your mistake, it's me ... letting it get to my head. Honesty is really hard for you, isn't it? Maybe you didn't realize this, but when people google your twitter name after looking at your attempts at making a public work site, they're going to see you mocking someone in public for something you were wrong about, then refusing to admit it. If you saw a contractor make that rudimentary an error, while complaining about a stranger behind their back, then when called on it they wouldn't even admit it, would you hire them?
here's the deal man. You told me about your scutil in the php sub-reddit about 6 months ago. You have php code in the repo with the same 'sc' naming convention. All true facts, are they not?
&gt; You told me about your scutil in the php sub-reddit about 6 months ago And in six months you haven't even figured out how to find code in it. Now, you want to mock it in public, when you can't even read the front page. What a loser. &gt; You have php code in the repo with the same 'sc' naming convention Yes yes, keep tubthumping this one tiny thing, while ignoring that you're looking at an erlang repo. (yawn) &gt; All true facts, are they not? Describing the sun as round, larger than an apple and not made of cheese, as a way to ignore that you said it wasn't very hot and weren't looking in the right direction, is a collection of "true facts" whose only purpose is to distract the ridiculously obvious mistake that completely undermines everything you said. But yes, you can hyper-focus on the error you made, and continue to make criticisms from inside of it, if it makes you feel better than just admitting how stupid it is that you held up an erlang library after only looking in a php directory and said "this isn't very impressive." You're off in email calling me an amateur and acting like you're some kind of hardass professional, when the only piece of code you appear to have ever released is a tiny MVC form plugin for wordpress. I went to go put sc.erl on lisp.paste.org to show you how just that one file was six times the size and easily 20 times the complexity of your entire published codebase, while you're pretending to be some kind of superior coder, but lisp.org appears to have too low a size limit. :) Indeed, I can only get the first 1700 lines on there - already larger than your entire published source base, but not enough to get down to anything interesting. That one file alone is almost 7600 lines, but hey, you're entirely in the right to say the repo isn't much, then waffle over the one directory you weren't supposed to be in in the first place, because you can't read a webpage and forgot context from half a year ago, then want to hold up your mistakes as belonging to someone else. :) I mean sure, I have single SQL files, single C++ files, single PHP files, single Erlang files, even single CSS files larger than your entire published codebase. But the fact that you criticised a single erlang library who, when you sum the source files, is almost 40 times the size of yours, which OhLoh values at more than a hundred thousand dollars assuming the hilariously low default salary of $55,000 (which I note is higher than your consulting rate by nearly half,) when your library run through the same scanner rates less than a tenth that price, and your library is your whole work whereas this one of mine isn't in my top five? Yeah. You're best off pretending you're right. :) ---- Since your searching skills are some of the worst I've ever seen, and since you assume anything you can't find is a lie, here's the valuation you're almost certain to pretend is false, despite having been told how to find it. http://www.ohloh.net/p/scutil/estimated_cost
I highly recommend using an IDE, such as NetBeans with xDebug. Stepping through the code will help you better understand how your variables are being affected.
Well, I'll keep my eye out for the launch. If I PM you my email address could you drop me a line when you're getting close? &gt;Joe Celko and Bill Karwin Thanks for the suggestion; some of the material seems quite dense but it's exactly what I'm after. 
&gt; Well, I'll keep my eye out for the launch. If I PM you my email address could you drop me a line when you're getting close? Sure. Thanks for the interest. I'll drop you a line earlier, if you'll tell me which parts you hate. &gt; Thanks for the suggestion; some of the material seems quite dense but it's exactly what I'm after. Celko is better for problems you're likely to face in day to day. Karwin is better for "oh my god how did you do that." I'm not saying one is smarter than the other; just that one chooses to focus on practical, and the other on theoretical-as-a-teaching-approach.
&gt;I know this will be unpopular in this subreddit, but PHP isn't a great language for this. Seriously. Using PHP is like using a canoe on land.
&gt; If I tell you I'm not interested in your yelling, I'm "too emotionally blocked to have a conversation." I never get why you keep responding to people you claim to be bored of. You seem to allow yourself to be baited more or less indefinitely.
&gt; I never get why you keep responding to people you claim to be bored of. Dunno. Part of it is that people seem to believe these little drama flares when I don't stand up for myself.
&gt; I mean, letting "just about anyone" be involved in an enterprise language is just asking for it. I'm having a hard time mustering up the gumption to reply to a comment that uses the word "enterprise" without irony, but... No. Letting "just about anyone" have commit access to the main repo is probably not the best idea. However, welcoming, and then effectively filtering, contributions from the general public allows for richer and more diverse development than restricting input to a small, defined team. This is the whole point of open source. And there's a lot of contributions to PHP which aren't exactly Grace Hopper-level work — cleaning up and fleshing out documentation, shimming simple APIs into extensions, etc.
The funniest part is it turns out he wasn't even looking in the erlang directory in an erlang library. This is all because he looked in the directory for the one language he spoke, then gave up, assuming all the other directories were empty. :)
Translation: "nothing. But I've got this WP plugin" &gt; It's the only code I've made available to the public. No, it isn't. A bunch of your hilariously bad websites are still up. Unfortunately I'm not sure whether posting them violates Reddit's personal privacy rules, but they're really easy to find.
&gt; However, when he posts on this site nine times our of ten he's being a dick. It's never even dawned on you that you just don't notice the polite ones are still me, has it? &gt; If StoneCypher has a problem with this, maybe he should just stop being so rude to people who are just looking for help- even if this means he simply doesn't help them. You make too many guesses. My intent is to help the people receiving bad advice, not to help the people giving it. I succeed. 
Man, your post is one minute old and already downvoted. I feel like I have to say it wasn't me, since it was downvoted so quickly. Anyways, bullshit. You are rude to people asking advice as well. You may be right that the rude comments are more visible than the friendly ones, but that doesn't justify the rude ones. As I said, I don't think you're a bad person, and you may very well be a fantastic person in person and a great developer. I don't think you deserve the downvote brigade that is currently crushing everything you say. That being said, you could stand to be a bit friendlier, and you shouldn't be surprised that people are calling you out for being a dick when you are in fact doing so.
just to be clear. i'm from [yogyakarta](http://www.reddit.com/r/web_design/comments/g124v/reddit_lets_see_your_hometowns_website_ill_start/c1k50nh), [indonesia](http://www.reddit.com/r/opensource/comments/h74l5/firefox_enjoys_a_7080_market_share_in_indonesia/c1t4093).
If it's a programming gig you should know some basics. File permissions, users/groups, how to make backups, how to configure sudo, how to install Apache / PHP, how to run an FTP/webdav server, and basic shell stuff (killing processes, finding out what's hogging the CPU, moving files around, changing file owners, etc) Install Debian (without a GUI) in vmware / virtualbox and set it up as a test environment. Connect over SSH and install apache, php, wordpress, something like that.
&gt; I haven't seen this level of misinterpretation outside of r/PHP That's because it's not misinterpretation. It's a bunch of angry amateurs who've been scolded, banding together around one spammer who makes fake accounts to generate fake community outrage, because they think they're seeing community outrage, so they join in. Then they upvote each other and downvote me. There's a conversation I'm having - perfectly happy - in a different thread where I'm voted through the floor and the guy I'm talking to is voted through the ceiling because people are just going down mass-manipulating everything I'm in without even reading it. It's because proggit doesn't even begin to give a shit about reddit rules, which explicitly say downvote is not for punishing people with whom you disagree. All the same, you see assholes like McGlockenshire over there saying that everyone should just downvote everything I say because he imagines anything that disagrees with him is "not constructive." The problem is that reddit's moderator system doesn't function when the moderators themselves don't give a shit about the rules, so Proggit is full of a bunch of vigilante novices who don't know what the fuck they're talking about using the vote system as their personal vendetta stick. And I mean frankly, I love it, because it makes perfectly clear how low the quality of programmer and thought here actually is. Say anything about MVC not being the golden bullet that ends all problems? -20. Ruby isn't the cure for cancer? -30. The space shuttle shouldn't be built on python? -50, all your other threads down, and you're getting script root attempts. It's great. :) People seem to think I hate this, but I don't. The reason I love it is that I can see that these morons who get scolded carry grudges often for years. The guy who's making fake accounts has been at it since IRC for more than a decade. Why do I love it? Because my goal was never to teach them. It was to save the people they were getting bad advice, and to encourage them to realize that future bad advice will also get torn apart. And when they carry grudges for years, and waste hours manipulating the vote system, that means I got to them, and they're far less likely to give the amateur nonsense advice they gave. It also teaches the people receiving the bad advice to be suspect of the advice they get, *especially* in a radically poorly moderated subreddit full of amateurs who don't know that they're amateurs. One of the guys who scolded me as imagining himself to be a professional today hasn't even been employed for a full year, and has a public codebase he tried to shame me over that turns out to just be a tiny and bug-ridden blog plugin. I'm still laughing an hour later. Comedy gold, I swear to god. It's just one more way to measure my success. I mean if you look at the things people are quoting as stuff I'm supposed to be ashamed of, almost every single one is "stop telling that guy these things, they're completely wrong, here's proof." Some of them are /years/ old. Amateurs just cannot brook being wrong: since they aren't experienced, they don't know that being wrong isn't a sign of being experienced. I love it.
You should be able to build the server from the ground up and administer it. Here are a few examples: cron, bash, vim, restarting apache and other services, ssh/sshfs. Create hosts in Apache.
Oh, don't feed the trolls.
You know, I gave pretty much this advise to someone who decided to install Ubuntu desktop directly, had issues, and I think eventually ended up installing Windows XP instead. I think some people just dont like advice. IMO Installing a headless version of linux in a VM is the way to go for learning purposes.
&gt; Man, your post is one minute old and already downvoted. I feel like I have to say it wasn't me, since it was downvoted so quickly. Oh, it's been going on all day. Welcome to angry amateur mashing the punish button hour. :D &gt; Anyways, bullshit. You are rude to people asking advice as well. Examples? &gt; You may be right that the rude comments are more visible than the friendly ones, but that doesn't justify the rude ones. No, but the actual justification does. &gt; and you shouldn't be surprised that people are calling you out for being a dick when you are in fact doing so. I'm not surprised. I'm just bored, because almost every one of them is really just bitching that they were caught being wrong years ago, and they now see an excuse to circle-jerk a complaint-fest. What made you think I was surprised? I see amateurs do this to experienced developers all the time. It's not like I'm alone.
Nah, this guy does this every couple of months, and the culture here doesn't support anything smarter than drive-by skepticism towards complainers.
If you can tolerate client-side solutions, d3 - which used to be called protovis - destroys everything else on the market, server or clientside, java, javascript, flash or activex. However, gRaphael - which is much less nice looking - is quite a bit easier to use. I don't know what your priorities are.
&gt;Sure. Thanks for the interest. I'll drop you a line earlier, if you'll tell me which parts you hate. Definitely. PM sent. 
100% agree with setting up a linux environment and just playing around. The way I learnt how to use UNIX properly in a server-environment was through buying a cheap VPS and then just installing random things, configuring apache/nginx, etc.
It really depends on the job. Lots of people say that because they want PHP and MySQL, and don't know what the acronym means. Ask the job poster. All you can get here are guesses.
foreach is cool and all, but I'm pretty sure it is slower than for when you are not using non-numeric keys. $count = count($array); // "cache" this so that PHP doesn't have to re-count the length of the array after every iteration for ($x = 0; $x &lt; $count; $x++) echo $array[$x]; is, I'm pretty sure, faster than: foreach ($array as $value) echo $value; foreach is extremely useful for: $example = Array('key' =&gt; 'value', 'color' =&gt; 'blue'); foreach ($example as $key =&gt; $value) echo $key, ' = ', $value, "\r\n"; /* outputs: key = value color = blue */
How much is someone who knows that much (and a bit more) worth?
I sort of agree, but sometimes you just have to throw yourself into the deep end, otherwise you'll keep going back to what you know. I'd recommend installing it in a dual boot and try to commit to not switching back for some period of time. I also find the best way to learn how to get around a new area is to get lost, so YMMV
&gt; basic shell stuff (killing processes, finding out what's hogging the CPU, I would say that's more the admin's job and usually not required of a LAMP programmer ( but it's good to know) Edit: I'm not saying it's not basic unix/linux knowledge, nor that one doesn't need to know it, but when does it really fall on the developer to kill processes? If he's a new hire, they already have a server and someone is already administrating it. If it's a company so small they don't have an admin, it's probably shared hosting, so you don't have permissions to kill jobs anyway. I've never seen a company big enough to have their own employees responsible for server administration wherever there server is yet not have someone who's already administrating it.
This makes me laugh. Any developer that is worth anything should know this.
Once you know the command line, you live in the command line, you will be writing all your code in vi, logging into mysql to change tables via sql, then using commits to git to deploy. Just learn that shit
more than likely all you'll need is /etc/init.d/apache restart and shutdown -r now
&gt; And I really don't mean to be rude with you People who say this say it because they know that's what they're being. &gt; You are a dick, but we are cool bro bro bro bro. No. We aren't.
Thanks!
You should be able to implement a C-LOOK scheduling algorithm into the kernel with maximum efficiency, understand how to encrypt data with tcrypt.c, and similar items. Just kidding, of course. Most employers wouldn't even know the answer to your question. Just be comfortable using Linux's CLI, SSH/SFTP, Apache, permission settings, and the like. 
You've got pretty thin excuses.
I'd say you should know enough to set up and maintain the LAMP stack. So you should know how to configure and tune Apache, MySQL and PHP. This includes setting up virtualhosts, tuning Apache's MaxClients for a certain memory size, tuning the InnoDB buffer pool size, etc. You should know more than one way to safely backup a MySQL database and how not to do it as well. In my opinion, if they specifically put LAMP then you should know all the above. Some more nice-to-haves would be knowing how to use rsync and SSH, how to untar something, and know about Linux file permissions and how they affect security. It'd be nice if you knew and could explain why Apache/PHP processes should run as an unprivileged user, rather than root. It would be nice if you knew a little about how to apply upgrades (like security upgrades) to Apache, MySQL or PHP but this is heavily dependant on the distribution or if they are some vendor-supplied ones or whatever. If you know basically how it works in something like Ubuntu that'd be fine. They would/should probably already have a server admin if they haven't specifically included that in the job description.
I would suggest adding the -t flag. It's far better to wait a minute in case you have an, "Oh shit!" moment than to restart before realizing it wasn't the right time. shutdown -t60 -r now 
Out of all the things that LAMP is an acronym for, Linux and PHP are probably the most important. For what it's worth, we use Nginx, but we still ask for LAMP developers since it's more of a well-known term and figuring out various webserver software is simple enough.
If your script is killing servers, that's YOUR fault, not the server admin.
I'm against mob attacks and bullying. I will respond against both against anyone for any reason, even if they are being attacked for reasons I do not agree with.
I've watched this succeed and fail, though usually it ends in failure. I advise headless in a VM for a couple reasons: * it lets the users get adjusted to using their new system without having to immediately give up their old comfortable one * immediately giving up the old comfortable one leads to them spending hours first setting up a music player, reconfiguring browser plugins, setting desktop backgrounds.. * using a VM gives them much less to worry about screwing stuff up (especially as backups are much easier to configure if you have the disk space) * no hardware issues; it's better than ever these days but sound and video can still be a huge pain in the ass to configure * graphical environments *can* lead to laziness, especially with Ubuntu and RedHat. Use just the CLI in the same way that you'll be interacting with your servers and you'll be better prepared when the time comes.
In many shops looking for a programmer with LAMP skills you **are** the admin. You may not necessarily be dedicated or very good at it, but chances are they're looking for somebody that can do a bit of everything. Coming back and saying "well, my code is hogging the CPU, but fixing it is the admins job" isn't going to get you far.
Is it really just a choice between "shitty person" = "good code" and "shitty code" = "good person"? If yes, I don't want to live on this planet anymore.
Nobody is talking about lynching him(AFAIK). He's argumentative and he's pissed a lot of people off. What else can you expect?
&gt; Or maybe I'm just a big dummy! That's how it looks from here.
+1!!!! Just his mother? Just one day of the year? C'mon now, we can do better than that!
Wow...I used to think you were just a selfish, elitist, douche with no social skills. Now I realize after reading this drivel that you're a delusional narcissist with likely several personality disorders. Let me list a few common ones: Antisocial personality disorder, Avoidant personality disorder, Borderline personality disorder, Narcissistic personality disorder and finally Paranoid personality disorder. Since you like links so much...here's one: http://www.ncbi.nlm.nih.gov/pubmedhealth/PMH0001935/ Get help before it's too late. One question that interests me greatly...have you ever been wrong in a debate you've had here on reddit? Has there ever been even one time where you argued with someone here and realized that you were wrong and conceded that they had a valid point? I would be shocked if you could even cite one case.
You are a scholar and a gentleman. /tips hat
Yet another [example](http://www.reddit.com/r/PHP/comments/fmxeu/theres_an_easier_and_better_way_of_doing_this/c1h502h) of StoneCypher's trolling. Despite his multiple claims that this thread is the work of one person with multiple accounts, I assure you - I don't know any of you people.
Conversely, the first and only "argument" I've had on reddit was with StoneCypher.
This post gives me hope for the human race.
Every time I end up on a OpenBSD server using `vi` (well `nvi`) will annoy me in some way. I feel sorry for anyone having to use it rather than `vim` for coding.
Just so happens there is a [manual for PHP](http://www.php.net/manual/en/) on the PHP website.
php.net has a function manual. What exactly are you trying to do?
same diff
BBCode is so old-fashioned. If you're going so far as to allow video embedding, why not just use a full-featured HTML editor such as [TinyMCE](http://tinymce.moxiecode.com/) or [CKEditor](http://ckeditor.com/) on the client side, and sanitize the result with [HTMLPurifier](http://www.htmlpurifier.org/) to prevent XSS attacks? Both of those editors can be extended with plugins, so you could create specific classes and CSS to implement custom features such as spoiler alerts. (You'll need to be a JavaScript wizard to do this, though.) You could also do a bit of everything. For example, I'd prefer to have a full-featured HTML editor for blog posts, but only Markdown for comments, because I don't want videos embedded in comments. This is similar to how WordPress does things. But your needs might be different. 
PHP is a "cryptic code" - as are all programming languages. Just as Japanese or Hindi they're a language that you need to learn and train yourself to think in. As others already pointed out, the PHP website has a manual, and there are many books and websites dedicated to learning and understanding PHP and other programming languages. If you understand one programming language, moving to another is usually a fairly straightforward practice. They all have their nuances or oddities, but for the most part they all operate in (*generally speaking*) the same fashion.
&gt; It seems like some kind of ancient cryptic code Does all computer code look ancient and cryptic to you, or is it just PHP? If you know any other programming language, it shouldn't be too difficult to pick up PHP. If, on the other hand, you're new to programming in general... PHP might not be the best language to start with.
This sort of thing is pretty basic *and* necessary when working in any capacity w/ Linux. And if you're a LAMP guy, you should know the basics. Not saying you couldn't get by if you had an admin around all the time to clean up after bad code or module or what have you, but you're not worth much to whomever pays the bills if you don't know the "L" in LAMP.
1. Reinstall Ubuntu... SERVER, not Desktop, ya pussy. It's time you learn to love the command line. 2. Find a few walkthroughs about how to build a LAMP stack on Ubuntu; do them. 3. ??? 4. PROFIT
Well, yes and no. By putting the following in to a file you will get an endless loop (and eventually PHP will quit with a memory exhaustion error): &lt;?php include(__FILE__); // or the name of the file in this place However, if you just change the `include` into `include_once`, the problem disappears :)
fantastic!
Truthfully? If you are competent in your googling the L doesn't mean comes into it very little. If you won't freeze up around a command line there are a few things you'll need to do on occasion, but nothing you'll absolutely *have* to commit to memory.
The only thing I didn't like about PHP was that isset() wasn't in the docs as isSet(). 
I concur. I'd also specifically include installing, (re-)configuring, upgrading and monitoring all the tools you need to work with the *P* part of your LAMP stack.
So should you ever use "for($i = 0; $i &lt; count($array); $i++) {}"? 
Every time I get involved in hiring people to write PHP, I find myself wishing that more of the applicant pool had any *nix chops. You probably won't put yourself out of the running for a lot of gigs by not knowing Linux well, but you'll become a much more attractive hire as you learn it. Not to mention a better hacker. I don't dismiss applicants without the experience out of hand, but I fully expect that I'll have to spend a lot of time teaching them basic tools. A good in to this stuff is to get yourself a hosted server somewhere - a low-end VPS like Slicehost offers at $20/month is one decent approach to this - and start putting yourself through the paces of very basic system administration, including hosting whatever PHP/MySQL code you're working on now. I'm no SA. What I really know about networking would fit on half of a cocktail napkin and what I know about storage would just about take up the other half. That said, a few years spent keeping a handful of Linux systems going taught me enough to be a reasonably effective web programmer guy. Or at least a reasonably _employed_ one.
i started with netbeans. using dreamweaver because of its WYSIWYG
And LNMP doesn't make such a nice acronym.
http://php.net/isset Function names are case insensitive, so `isset()` is the same as `isSet()`.
Ever worked with a condescending prick? I have :(
Nice joke.
Install a usability focused Linux distro, force yourself to work with it and force yourself to use the shell where ever you can. It's difficult at first but it's not as hard as people make it out to be. Nowadays I can't stand setting up servers on Windows, Linux makes it a lot easier.
Can you give your actual and expected output? The source helps, but I'm not seeing what you're asking anywhere... Also, having the values of the radios be the correct answers is obviously easy to reverse engineer...I'd come up with some other way of doing that.
1. Paste large chunks of code using a pastebin, or at the very least add four spaces in front of each line so it's formatted as code. 2. You need to describe your problem. 3. There are better places for questions like this. First and foremost, [StackOverflow.](http://stackoverflow.com) 4. I know you're just starting out, but writing code procedurally like this is going to be a pain to manage on any project larger than this. I don't know what your problem is and if this error is caused by the fact you didn't format your pasted code properly. But you'll get an error from this. // Connect to the database $dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME) or die ('Error connecting to MySQL server'); if (isset($_POST['submit'])) { You've commented out the connect line and the if statement. Which means you will not be connecting to the database and you will have an unmatched brace. You want this: // Connect to the database $dbc = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME) or die ('Error connecting to MySQL server'); if (isset($_POST['submit'])) { Edit: One more thing. [Here is an example of how to ask a programming question.](http://stackoverflow.com/questions/6732589/javascript-equivalent-of-assign-by-reference) and actually get it answered, even is it's a stupid question (like this example is.)
You absolutely need to know how to navigate the gnu/linux file system structure, find config files, and edit them with a command line editor, such as vim or emacs (I prefer vim). Knowing [basic bash commands and scripting](http://baldwinsoftware.com/bash/) are a given. I love my debian server, but you're going to run into a lot more CentOS out there, so nevermind install ubuntu. Install CentOS.
That's because your submit button isn't a submit button. &lt;button&gt;Any content here&lt;/button&gt; - A generic button &lt;button type="submit"&gt;Any content here&lt;/button&gt; - A submit button &lt;button type="reset"&gt;Any content here&lt;/button&gt; - A reset button &lt;input type="button" value="Text content here"&gt; - A generic button &lt;input type="submit" value="Text content here"&gt; - A submit button &lt;input type="reset" value="Text content here"&gt; - A reset button &lt;input type="image" src="image_url" alt="Text"&gt; - An image submit button
I'd also add git, svn or some other version control. and grep and vi.
Here are some commands which I use frequently. They're in no apparent order, but might give you a starting point. I typically use Ubuntu for my personal stuff (home &amp; linode) and CentOS for work stuff. ssh scp git top cat vi grep diff {apache restart/reload/graceful command which are diff on diff systems} wget tar {install commands - apt-get || yum || whatever} mysql from commandline (includes mysqldump and other assorted commands) {how to make a virtualhost} {pipes - example: history | grep 'ssh'} sudo / visudo rm touch mkdir cd ls (with options, I usually set an alias for ll=ls -laF) chmod chown cp mv {dont forget your -R or -r 's) man or {programm} --help (sometimes -h) pwd {create users and modify their password/groups} 
Not too bad as long as you keep it tidy. Though documentation is helpful. :P
I don't get whats particularly cryptic about it. Can you give an example?
Generally using include_once to prevent problems due to a horrible code structure is The Wrong Way.
In this particular case though, what would you propose? Implementing a list of loaded classes yourself? I can't see how this is a horrible code structure
You should know how to SSH, including on non-standard ports and setting up authorized keys. You should know how soft links work, and other file system basics (scp, cp, mv, tar, gzip, etc.) You should know how to configure Apache, especially Virtual Hosts, SSL/HTTPS configuration and RewriteRules. You should know how to configure PHP and modify its behavior. You should know how to deal with MySQL via the command line interface, not just PHPMyAdmin. You should also know at least one VCS whether that's SVN or git (if you know one it's not hard to learn the others, IMHO.) At least the basics of all of the above are required to be a PHP developer. Depending on the company/position, they may let you "learn on the job" if you have significant competence in most areas but not all of the above. (i.e. you know your way around a Terminal but aren't yet familiar with configuring Apache yourself.) If you have a Mac, install XCode and set up Apache and MySQL, fire up a Terminal and start familiarizing yourself. If you have a Windows box then I strongly recommend installing Linux on another partition and doing your development there.
Try looking at [setFetchMode](http://php.net/manual/en/pdostatement.setfetchmode.php). Specifically, the most recent user contributed example from August 2010.
A quick one would be to use [http://php.net/__get](http://php.net/__get) You could store the result as class mysql_result { private $res public function __construct($data){ $this-&gt;res = $data; } public function __get($key){ return (isset($this-&gt;res[$key])) ? $this-&gt;res[$key] : (is_callable($this-&gt;{'get'.$key}()) ? $this-&gt;{'get'.$key} : false; } } This would (untested, just written in the editor) return the array key for $this-&gt;keyname, or call the function named $this-&gt;getkeyname() if the key doesnt exist in the constructed array. combined with __set you can update the values and then do a save() function for putting back in the db
"Everybody is a genius. But if you judge a fish by its ability to climb a tree, it will live its whole life believing that it is stupid." 
How nostalgic. I've discovered this function when I was 16 while messing around with PHP for the first time. It was the best discovery I've ever had, beside sex.
 class person { public $name; public $id; } $STH = $DBH-&gt;query("SELECT name FROM persons"); $new_person = $STH-&gt;fetchObject('person',array(123)); // second argument optional
Whatever you have to tell yourself.
Use a proper ORM, like Yii's ActiveRecord or Doctrine if you'd prefer a library rather than a framework. 
&gt; Now I realize after reading this drivel that you're a delusional narcissist with likely several personality disorders. Let me list a few common ones: Antisocial personality disorder, Avoidant personality disorder, Borderline personality disorder, Narcissistic personality disorder and finally Paranoid personality disorder. Ah, more armchair psychology. You're a champ. :) &gt;One question that interests me greatly Ah yes, after insulting me and questioning my sanity, *then* try to ask questions. That's the smart way to get what you want. &gt; have you ever been wrong in a debate you've had here on reddit? Oh, sure. &gt; Has there ever been even one time where you argued with someone here and realized that you were wrong and conceded that they had a valid point? Quite a few. It's been less than a week. Have fun telling yourself stories, kid.
Well, at the moment, my assignment seems to be to just try and interpret the code that is in front of me for the purposes of understanding if there is anything else that needs to be done with it. There is the possibility that the program is complete, and nothing new needs to be added or that I am supposed to do something more. 
I believe this is my answer. Thanks.
This was about the most smug thing I've ever read. If you're right that the discussion on here is of such low quality, then surely there are gathering places with much higher average levels of experience where you could discuss advanced issues with other professionals who would challenge you. Instead, and I'm paraphrasing you here, you enjoy being a big fish in a small pond and bullying those less experienced than yourself.
&gt; This was about the most smug thing I've ever read. Do more reading.
can't remember if php is prone to null bytes or not, if it is, then if someone supplies $name as ../../../../../../etc/passwd%00 for example then you're a bit buggered. [edit] yes, it is. tested on php 5.2.14, apache 2.2.17
I was asking the danger of including a file which is including itself, not the eloquence of the function itself.
Good point! I have a system sanitizer that will be able to cover this. 
Just don't use Nginx's creators name in place of the web server's name. LIMP.
for arrays I usually just do if (!empty($array)) { //do my loop here }
according to [http://phpbench.com/](http://phpbench.com/) you are incorrect. Even so, if you were correct, I'd bet almost anything that unless you're dealing with arrays that are HUGE, you're not going to really see any significant speed differences
Well I would go through the code line by line and look up what each function does and try to make comments about each. Eventually you'll be able to understand blocks and get the big picture. Do you know any other languages?
I'm not a PHP expert, so this might be wrong. If you're going to be modifying the array as you iterate, you might run into problems with foreach. Foreach operates on a copy of the array, so adding new elements won't affect the loop. In PHP5 you can iterate on a reference to the array rather than a copy, which may solve that problem. Another case is when your array has irregular keys (e.g. an associative array) but you want to know the numerical index as you iterate. For example, $array = array('first' =&gt; 'hello', 'second' =&gt; 'world'); If you use foreach($array as $key =&gt; $value) then your keys will be 'first' and 'second' rather than simple integer. If you use for($i = ...) then you will at least have the numeric index in $i. There may be a function to return the numeric index of a particular element, but I'm not sure what it might be.
Yep, last I tested it was prone to null-byte injection. [trim](http://php.net/manual/en/function.trim.php) should take care of it.
The desperation emanating from this post is palpable. I find it interesting that he says that he "loves" it when he was whining to the OP to delete this post because he "hated the drama". I picture him sobbing uncontrollably as he posts this, in a desperate attempt to convince himself that yes, he is still cool. &gt;Because my goal was never to teach them. This right here shows his douchebagginess. &gt;Amateurs just cannot brook being wrong: since they aren't experienced, they don't know that being wrong isn't a sign of being experienced. Describing himself right here. :)
You've been downvoted by idiots. Listen to this man - OP, you're currently on the path towards writing your own ORM, which I've done myself, and it's a process of reinventing wheels and rediscovering mistakes and workarounds that others have already done for you. Far better to spend your time learning a good solid framework and writing clean code on top of it than redoing all that work badly.
&gt; The desperation emanating from this post is palpable. And now he begins repeating what's been said to him. :D Imitation is the least sincere form of trolling. Thank you, and goodnight.
Worked perfectly for me. Thank you again!
See also "[Null bytes related issues](http://php.net/manual/en/security.filesystem.nullbytes.php)" via the PHP Manual.
I'm not working on a particular large project, but I'll take a look at it. Thanks for the info.
I assume this is a dev position and not a sysadmin position? If so, I'd say you *should* feel comfortable around the shell environment. Tar, scp, ssh, grep, find, ln, chmod/chown are fairly basic. You should know basic shell commands (mv, cp, mkdir) as well as understanding unix file permissions and knowing how to pipe commands together. You should also be able to use their revision control system, which will probably be cvs, svn, or git. You'll want to be able to use a CLI editor if you need to, e.g. vim, pico, or emacs. Vi is probably the safer bet as you can expect it on almost any system. Beyond that I'd say it's more of a mindset of preferring to run things in command line and an eagerness to learn. Most of the stuff can be googled, but the initial learning curve (to know what to google) is a bit steep. Nice to have: * Setup your own LAMP instance * Know MySQL command line interface (query, create tables &amp; db, setup accounts &amp; perms) * Know how to create a user account from scratch * Know how to use cron and at to run timed commands * Setup a samba server * Knowing how to backup and restore a server instance (including mysqldump) * Knowing how to install a package (deb, pkg, yum) * Knowing how to setup an apache virtual host * Knowing how to create rules in iptables/ipchains (although there are gui tools depending on which linux you run) * Knowing how to setup an sftp/ftp server 
Ah, but it's not about this project, it's about the next one and the one after. Each project is another step forward to making cleaner, more maintainable code. Learn from my mistakes and save yourself ages of development time by capitalizing on a good open source framework now, and becoming a master of it, instead of wasting your time making your own. Yes, there's a lot to be learned by making your own, but it comes with enough disadvantages that I'd only do so for a pet side project and not for something thats actually going to see real world use.
PDO makes that easy when you set fetch mode to object. If you need a solution where you have an associative array that you are turning into an object, check out [extract](http://php.net/manual/en/function.extract.php)
Wow can you say GOLD! Thanks all, this has given me place to start with confidence. I've never had this many comments before! I think because reddit has a strong PHP community xD
Have a look at this [nettutplus video tutorial](http://www.youtube.com/watch?v=i-U0NUexfSw). It will answer all your questions. You will encounter a problem when binding result variables for a query with an unknown number of fields. The solution is pretty simple: // Find out how many fields are going to be returned and setup a params array. $params = array(); $metaData = $stmt-&gt;result_metadata(); while ($field = $metaData-&gt;fetch_field()) { $params[] = &amp;$row[$field-&gt;name]; } // Call the mysqli_statement-&gt;bind_result method and bind the previous found result fields call_user_func_array(array($stmt, 'bind_result'), $params); // Get the rows. $result = array(); while ($stmt-&gt;fetch()) { $current = array(); foreach ($row as $field =&gt; $value) { $current[$field] = $value; } $result[] = $current; } 
&gt; If you need PHP 5 compatibility, you must use version &gt;= 2.9.3 (which is NOT yet available for Windows) Btw, thanks for the link, it's more or less what I've been looking for, if it really does compile with embedded server.
That's what I'm afraid of, which is why I've made quite a lot of extensive research before starting my project. As of now, my project is merely a prototype as well as a learning experience. When I start for real I'll utilize proper frameworks of course. Thanks for your insight into the subject, hopefully I'll learn something.
They probably want you to know some basic stuff like installing/configuring Apache, MySQL, PEAR, ACL,... stuff like that. And then have some command line programs knowledge (lftp, ssh, vim to name a few), and to properly configure permissions, mv, install, cp, delete stuff. I don't think they expect to be a guru 
I was eager to see the results, but disappointed that it uses array_keys instead of the automated $x key. That benchmark is for arrays with non-numeric keys, not sequential numeric keys, which deserve their own benchmark. The major difference between the one I presented and this one is the extra function call of array_keys and having to lookup the value in that array at every position $i. Instead of looking up the $i key in $aHash, it has to look up $i key in $key and _then_ look up that in $aHash. Which agrees with my original conclusion that foreach is faster for arrays with non-sequential keys. I'd love to see a benchmark for sequential keys, though. If it fails, for would essentially be useless; only included for backwards compatibility, it would seem.
You might be better off checking to see if the file you are trying to include is the file that you are in instead. Say you wanted to include the same file more than once in a page (I can't think of TOO many cases where this would happen, but if you are writing a CMS you shouldn't put yourself in a corner here. If you choose to use include_once, then you wouldn't be able to include the file more than once. Both ways will stop the recursion but choosing to use include_once will take away your ability to do things. 
frozenfire: Directly insulting me by calling me a moron just directly exposes you as an asshole, especially since I was nothing but polite and cordial to yourself.
Um. If you held the Olympic Torch for 30 seconds before passing it on to the next person, you would say, "I helped pass the Olympic Torch!" and you'd be 100% correct. I'm sorry. Most of these responses seem to be by people who have very limited IQs.
He accidentally added an "a"! Someone call the whambulance!
You should man the **fuck** up and use your main account! Otherwise, you're just a cowardly prick.
NEVER, I say, NEVER include a file of a user specified name. Far safer is to have a lookup table of strings which correspond to safe file names that you control. A common method for this is a database corresponding to files with UUID or random-string file names, or similar.
Would never still apply if i sanitize the shit out of that user specified name? It wouldn't be a big deal to have a table of names that are acceptable i guess either.
**Use CodeIgniter!** class MyModel extends Model { public function addPerson($name,$addr,$city){ return $this-&gt;db-&gt;insert('folks',array('name' =&gt; $name, 'addr' =&gt; $addr, 'city' =&gt; $city)); } } **It also automatically sanitizes everything for you.**
I don't think **-t60** does what you think it does. If you want to shutdown in 60 seconds rather than *now*, then: shutdown -r +1 is probably what you want (+1 = 1 minute)
Ok, so it's not impossible to do safely. It's just one of those things that you could forget to do some day, and leave a wide gaping whole in your system. You may or may not have been told never to use *eval() in your code either (if you haven't, look up why); it's roughly the same situation.
I like this quote and the ego boost it provided me, haha.
Nothing wrong with that. 
...asks the troll.
 &lt;?php $name = $_FILES['file']['name']; ?&gt; Lines 5, 6 and 7. You're trying to access an array index when it's not set, since this section of code runs every time the page is loaded, even when the user hasn't uploaded anything yet. Something like this works (even though it's not what I'd call ideal): &lt;?php if(isset($_FILES['file']['name'])) { $name = $_FILES['file']['name']; } ?&gt; 
Because the $_FILES array is empty until the form has been posted and wont post because you need a max file size field on your form before php will let you submit it. http://www.php.net/manual/en/features.file-upload.common-pitfalls.php 
**What you are doing:** Attempting to access an index (otherwise known as a key) named '*file*' from an array named *$_FILES*. **What the error is:** The key '*file*' does not exist in the array *$_FILES* **Reason for the error** The form hasn't been submitted yet, so *$_FILES* is empty. **Solution:** Firstly, make it exist. But more importantly, begin checking if variables (and indexes) are defined before attempting to use them. Example: if (isset($array['index'])) { echo $array['index']; // You could process the form here } else { echo "Oh, guess that doesn't exist. I'll do something else."; // You could show the form here } Hope that helps.
I'm not syaing a LAMP developer shouldn't know it, but I haven't see many scenarios where a *developer* is responsible for server administration. It's just not under their duties, is all. If he's a new hire someone is already administrating the box. If you want to make yourself more useful as a LAMP programmer learn stuff like command-line version control, command-line utilities like grep, find, etc. That will help you code and code more quickly. Leave the server administration where it belongs. 
That doesn't mean it's a developers' job to do this. Yes, killing jobs is a pretty basic thing. Command line tools such as find, grep, and version control are really what make you useful as a programmer, not the administration stuff.
If you forget your password, it's your fault, but the administrator resets it. If your script is killing servers, it's your fault, but it's the admins *job* to administrate the server and say, "Hey buddy, fix your script!"
I used to struggle and ponder over such questions. The answer is start coding your project *yesterday*. Stop worrying about ancillary details that you *think* will make or break your idea when in all reality stagnation and feature creep are the only two things you need to concern yourself with at this point. Why are you reading this? Get coding!!!
Good point. It hasn't stopped me but I am just curious.
the "MAX_FILE_SIZE" input is not required, just provides a convenience feature
It would be a complete re-write unless you spent the time building wrappers for all the codeigniter calls and mapping them to the new framework... which would just add yet another layer of complexity.
I still rely on explode, strpos, etc, because back when I started coding preg_match and the like were a sure fire way to really slow down a script. Now with opcode caches it's not much of a big deal. Every time I do this though, I pat myself on the back for shaving a nanosecond although I am not sure if it is faster anymore.
Deleting the thread won't make the comments disappear. All that will happen is that CoherentSpy's nick will be changed to [deleted]. And, um, while there are probably sockpuppets involved here, there are several (such as rbnc and tedivm) who are very real. You should listen to them.
&gt; Deleting the thread won't make the comments disappear. Oh. If it won't starve the fire of oxygen, then there's no point. &gt; there are several (such as rbnc and tedivm) who are very real. You should listen to them. There's no purpose in listening to people making judgements and arguments from a factually unsound basis. I mean, if you ignore the first couple, even dianetics is logically sound, and that's a guy who proposes we're walking ghost traps for aliens that got here on golden DC-50s through space. I'm just not interested. They can scraw in public like children all they want, doing things far worse than they're complaining about; I will not become interested. I have a longer response which I will make in private, because I'm really not interested in prolonging this in public.
have you considered re-writing without a framework?
ls, ps, cp, cd, find, chmod, chown, grep, tar, su, ftp, ssh, mv, vi, sed I recommend all of the above, but in my experience most programmers know ls, cd, nano and that's it. If the company you're working for has a system administrator, you wont be required to know much.
$_rd="";while(!is_file($_rd."angry_square.php")) $_rd.="../"; holy mother of god!
I was going to write about how sometimes it's easier to change jobs than rewrite sticky code, but this is an easy fix - use include_once.
xD I know. Is there a better way of me doing that? ;p It's just to find the root directory so I can be lazy and include files as if the including file were there.
define('CMS_PATH', \_\_DIR\_\_ . DIRECTORY_SEPARATOR); is basically what I use to define my root path as I rewrite everything to index.php.. almost everything 
That involves having the absolute pathname though, right? Whereas mine would find the relative pathname no matter where we drop the files? ;s Is there anything drastically wrong with my omgwtf-fix other than the fact that if angry_square.php isn't there it'll lock the server up for a while? ;p
It depends on the application's reliance on the framework's infrastructure and classes. Going from CI to Kohana is guaranteed to be a complete rewrite with very little copying &amp; pasting of existing code.
It's a pretty large overhead per-file-per-request. Disk IO is often the bottleneck, and something to avoid where possible.
'file' is the index you're trying to look up in $\_FILES. Before you submit the form, the $\_FILES array is empty, and $\_FILES['file'] doesn't exist. Try this: if(array_key_exists('file', $_FILES)){ $name = $_FILES['file']; } If you want to turn off these kind of warnings, you can change your 'error_reporting' value in your php.ini file and restart your server.
Yes, it's bad because it's a horrible idea when you have the __DIR__ constant available which will give you the absolute path to the directory that the file is currently in. As in, PHP supplies it. Meaning you have to do **nothing** to figure it out.
 define('CMS_PATH', dirname(realpath(__FILE__))); The while loop is a clever solution looking for a problem. The magic constants can be your friends. **EDIT:** The above works in all versions of PHP. If you're targeting versions &gt;= 5.3.0, you may use \_\_DIR\_\_ instead.
Disk IO is never the bottleneck, database access is. 100 queries on a page is far worse than 100 `file_get_contents`.
But, \__DIR__ is a Magic Constant that gives you the directory of the current file, if it is done inside "angry_square.php" it would give you the root directory of the CMS, so you don't have to make that loop to get it. for more info on Magic Constants can be found in [here](http://php.net/manual/en/language.constants.predefined.php)
It's pretty easy to add on to CodeIgniter when you need extra functionality. Just build it in CI and add on as you need it. 
 if (!empty($_FILES['file'])) { ... } Empty doesn't throw warnings for bad key lookups, but array_key_exists is faster. I tend to use `empty` for multi-dimentional lookups where the key could not exist anywhere in the chain, like: if (!empty($_FILES['file']['something']['omg']['even']['more']) { ... Also note `empty` isn't a strict way of checking "does this key exist?" but rather "Is there a real value? (not null or zero)" In general these are empty: * NULL * array() (where `count()` is zero) * 0 * 0.0 or NaN * false * "" 
 dirname(__FILE__) will give you the same as __DIR__ on any PHP version that doesn't have __DIR__
An absolute path would be preferable to a relative path anyway. Why would you want a relative path? Just use: $_rd = dirname(__FILE__) . DIRECTORY_SEPARATOR;
You'd maybe call it 'superfast', but then again your included files are brute forcing where the file that included them is, instead of, ya'know, just letting it tell them. CakePHP lets me get everything this can done and with a lot more things to do after that, and I've seen CakePHP shat on by a few people around here. That's not mentioning other frameworks. If you're not going to include any database interface code, why ask for database details? Also if you aren't, I'd focus your framework around features designed to implement static sites.
His framework currently doesn't do any database access, afaik. It does ask for mysql connection details though, for some reason...
And what, may I ask, is wrong with having the absolute path if php automatically provides it to you?
A good place to ask is #php on irc.freenode.net