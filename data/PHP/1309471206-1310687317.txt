I'm currently using symfony 1.4. For the most part I like it, but some things (especially the forms) can be frustrating. It's not very widely used in North America either, so it can be hard to find a knowledgeable person to help with problems (though I've had decent luck with stackoverflow so far).
Ah static class functions everywhere, the bastion of PHP developers that cannot shy away from ad-hoc functions of PHP4.
Bloated.
I don't think you took the time to look. In the "welcome" controller, just echo 'Hello World!' in the index() function. It takes two seconds!
Old.
About 2 months ago I started full-bore climbing the Yii learning curve. I got the basics down after a month, but got pulled to another project in early June. I hope to return to it soon. I like it. It takes a while for things to click, but once they did, going back to non-framework php was a little depressing.
I've been developing for 10 years; CodeIgniter and CakePHP are the best frameworks I've used.
I'm well aware of the the whole anti-static methods mentality. I've only ever seen two legit reasons to avoid them: 1. Inheritence issues in PHP 5.2 with static methods not knowing who the originating class is. This was addressed in 5.3 with the addition of using `static` in place of `self`. 2. Static functions cannot be overridden as easily as member functions, which causes issues with unit testing. None of the projects I've used this framework for have been large enough to need unit testing, but even if I did, see #1. Beyond that the stigma is *purely* developer *opinion*. The alternative is singletons and class factories, which are equally railed against by another mentality. I can't please everyone, but I can at least make my own life easier.
over architected. but strong
Sapphire. You can get it with the cms SilverStripe. 2 in 1, good to go on most types of projects.
That's a good start. Now they need PDO support.
No, that would be CI doing it wrong. No one bothered to test the release package to see if it worked out of the box. That was 6 months ago. Looks like version 2 is a lot better.
Best way to learn.
&gt;people make fun of it. Let's face it, you're using PHP. You're already getting made fun of, what's a bit more criticism. :P Really though, CodeIgniter is nice, just make sure if you're doing heavy database lifting to use something like an ORM ([Propel](http://www.propel.org) is very nice). CodeIgniters default Active Query can be a bit lacking in features.
Exactly. Try to find consensus about stuff like this and you'll be looking forever. There's a popular anti-singleton thread that turns you off singletons until some smart developer points out ways around common problems, that it's a perfectly viable solution to one set of problems, that the alternatives have drawbacks of their own, etc, and suddenly you're pro-singleton!
I find them useful in helper classes that act as function containers, autoloaded when needed and neatly organized.
There's a pretty active userbase which helps too, both in the official chat room and on Stack Overflow too.
You can do that with an extension/library. It's not native but it's available.
Ditto. [My framework is open source](https://github.com/codefocus/Whip), has a simple get-started demo but lacks documentation. Since I am in control of the framework's codebase, I know it does exactly what I need. Plus as an added bonus, I don't have to support anything less than PHP5.3, which means I get to use things like `__callStatic` and closures :)
I read the google groups digest every night. (well I used to, i've been slacking) And definitely agree that Cake is a great framework, well documented, and lots of people seem to be using it.
The only problem that I have with codeigniter (I use it all the time btw) is that models are nothing more than a database access layer instead of the place where business logic should be taking place. Makes REUSE a pain in the ass when you have to copy and paste form validation logic and other BS into different controllers that need to access the same model. 
Zend can do almost anything you'd need out of the box. ...and for your convenience, most of that is loaded into memory by default :(
Symfony seems not that popular on reddit. The v2 is currently at the release candidate stage and it seems promising (but maybe overengineered for some). 
If you haven't written your own small MVC framework, including routing, database abstraction and templating it's a great learning experience and you learn all the ins and outs and why they do things that way. I like to understand how something works before blindly using someone else's approach and never knowing how it actually works behind the scenes. The best documentation I've seen was on the Symphony site, it has very clear and easy to understand documentation and explanations as to why something is being done. Though from benchmarks it's one of the slowest frameworks. Yii seems to be one of the fastest in the benchmarks but haven't really investigated too much into it. Zend is really good if you just want to use a some of the libraries in it. It practically includes the kitchen sink. It's loosely coupled and I use the Mailer and Date libraries as they provide much more advanced functionality and features over the default PHP functions and they work pretty reliably. However I wouldn't consider using the full MVC Zend implementation as it's one of the slowest frameworks and it's also pretty bloated.
Same here. Also, by writing your own framework you often learn new ways of doing things. Registry pattern rocks :-D
please post some advice on best framework with sql server (2005/2008). Most important is use of guid/newsequentialid instead of auto-incrementers since php has an issue with int size limits (bigint sql server &gt; 64-bit php int). 
will the bigint be signed or unsigned? i'm trying to figure out how to deal with sql servers bigint (php 64 bit uses signed - bigint is unsigned oops)
There is a set of video tutorials that are the very basics here - http://phpvideotutorials.com/free 
care to explain #4 ? is it a dead end? no longer actively developed? 
I use CodeIgniter every day at wokr. I like it, no complaints. Of course I'm very new to programming.
It's fairly easy to ignore CI's model layer and use something else. For example, I usually use Doctrine ORM.
Cake is nice but I kind of wish it didn't try to copy Rails so much. I love rails too but I feel like some of the stuff doesn't fit in php as well. For example how before filters work.
I switched from CI to Yii during the long wait for 2.0. At this point I've got no intention of going back but wouldn't say I think CI is a bad choice. On the plus side the docs are great as are the fourms. The hello world story and quick start story is very good. The licence is a turn off. I'd rather have something that used one of the big four. This is vague but I think it has a bit of a hangover from the days of php devs only using FTP. For example it's support for bootstrapping from the shell was piss poor. This made it a less ideal tool for use in settings with more control. I still support to CI apps. I'd say try a hello world in it and something else (Yii) and see what feels right. 
However they completely ignore the purpose of objects (or even classes) and instead they are used as a place to shove loosely-related functionality together. It has no contextual meaning with relation to OOP in general.
So creating classes to be instantiated is *opinion*? Hold onto your hats folks, we're being taken for a long ride. I was under the impression that classes represent a blueprint for self-contained and repeatable (and unique) functionality, rather than just a bucket of junk functions only related by their parent class.
Seriously. I've developed commercially with symfony 1.x since January 2008, and love it. I'm moving on to symfony2 and love that more. I didn't really like CakePHP when I tried it in 2007.
Int size is always very difficult to work with. You might be interested to read a blog post I wrote, which is closely related to your issue. [NBT Decoder/Encoder for PHP](http://thefrozenfire.com/2010/12/nbt-decoderencoder-for-php/) is the post, and it basically details the process I used to work around the limitations of PHP, when dealing with binary data. NBT is the format that Minecraft Alpha used for its level data, and still uses in some form in Beta. It might be necessary to cast the BigInt to a string when performing your query, and then using an AP Math extension to handle it in PHP, such as [GMP](http://php.net/gmp).
They had me until the part about being designed around an XML configuration system... Too many bad Struts memories.
thanks, those are web-oriented as well but I'll take a look
How do you get a the group a user belongs to from the ACL? ...just a side question...
Symfony2! LOVE. IT.
I agree. Learning to write my own was a great experience for me and helped me appreciate the various MVCs out there.
http://codeigniter.com/wiki/PDO_SQLite3/
The only place where people make fun of me for using PHP is on Reddit. My clients certainly don't make fun of me for using PHP. In fact, they prefer it. Sure, PHP has some quirks in it. But it works well and gives me a great income.
Zend + Doctrine Use it everyday, and wouldn't have it any other way. Alot of "whats the best framework" will depend on the type of stuff your doing. I do alot of projects that involve background processing in large scale - mass consuming web services, notifications, thumb-nailing etc and Zend's setup has always seemed the most flexible and willing to do what I need. Edit: I think people misunderstand Zend as a framework a bit. CakePHP, CodeIgnitor and from what I can tell, the majority of other frameworks are convention over configuration. What this nets you is faster application development because there's usually only 1 way to do things which is defined by the framework. Zend is configuration over convention and setup in a manner that it doesn't tell you how you should do things - sure, it comes with a set of defaults, but it lets you change them to your heart's desire. In essence, Zend is a framework/library that urges you to setup your own "framework" in whatever manner suits you and your needs best.
Anyone work with FuelPHP much yet?
&gt; It's not very widely used in North America Maybe because it's French? But yes, I too use symfony and find the forms frustrating.
+1 for mentioning Propel
I extend CI_Loader and add an entity() and super() method to load abstract classes and their entities from APPPATH.entities/ and APPPATH.super/ They only include the classes without instantiating them into $this leaving you free to play around with real models in the controller by the regular $object = new Object() way.
I use CodeIgniter exclusively for all my projects, and usually grab new versions for each project, and have NEVER had a problem getting it working right out of the box.
Recently discovered Fat-Free which is a nice light weight framework
If you need to keep state (fetching User information and using it throughout the current execution), then instantiated is the way to go. If you want to use, say, a one-off method that returns an array of states, then static is perfect.
Killer PHP has some easy to follow videos. http://www.killerphp.com/tutorials/beginners-php/ Also, check Lynda.com to see what they offer. Its going to cost, but for the $25 a month or so, you have a huge library to choose from.
I'm using it mainly because my original supervisor on this project (who has since moved on) wanted it on his resume. I don't dislike it though. I'm not sure if we'll move to Symfony 2, as it's so different from 1.4 that we'd be looking at major rework. I'm debating whether to try Symfony 2 for a personal project or try something completely new. I've heard Yii mentioned a lot lately.
&gt;if you're doing heavy database lifting If you're doing heavy database lifting, don't use Doctrine, AR, Propel, or anything other than raw queries. 
Garbage men make good many too. 
Amen
First statement is true. Second, Zend can be used as a standalone library and is very modular, it only uses what classes you initialise. For example you could use just the Mail or Date classes and it won't load anything else.
If you're going with a Microsoft stack, why not use C#? From what I've heard, LINQ is pretty cool.
Can you tell me more about Zend? I'm starting to like the sounds of it more and more. :)
Crappy forms? Screw that.
I've been using Kohana lately and haven't had a problem at all. It's works well for everything I've been doing lately. :)
I'm actually studying Django like a motherfucker right now (enjoying it). I'm just learning a PHP framework on the side because I work with a bunch of custom PHP guys and anytime I have to edit something, the code just looks like shit crammed inside a shit bun with shit mayonnaise.
I say that static functions shouldn't be avoided, and you conclude that I mean one should never instantiate classes? Way to make a logical leap there, man. The entire purpose of a static function is for performing a task that does not rely on a saved state. Obviously for a task that does need to save state in memory you would use an instantiated object.
My own : https://github.com/Mikushi/TinyPHP It's an "old" version, the most recent just has better Redis support and few tweaks here and there. Main reason to use my own : - It was fun to program (not my first framework, i wrote 2 frameworks for my work). - It is meant to be fast (i did benchmark against .NET mvc framework, and on a "normal page" (rendering, few DB calls/cache calls, ..) it goes to 1200qps, which .NET barely surpass at 1300qps, and i'm sure i can do better). - It is meant to be simple, most of the framework out there are overly complicated (some for good reason, some not), and can be tricky to learn and fully understand. - It is fast to develop with it (as long as you don't mind writing your own SQL and HTML).
This. I initially stayed away because, on the surface, it seem completely over-engineered and full of obtuse configuration files. Once i started working with it though, i realized that its actually quite simple, but very verbose due to how static of a language php is. The configuration is still very extensive, but that is mitigated by sane defaults for most setups. Its also pretty damn fast. Oh, and in development mode, it automatically adds a toolbar to each page that lets you examine that request in full details. Fuckin awesome.
Half kidding, half serious. I worked with the Zend framework for about 6 months last year. Taking over another developer's work. For that particular app, and the vast majority of websites, Zend is complete overkill. If you don't think Zend is bloated, check what `get_included_files()` spits out. Just for shits and giggles. edit: Also agree with franktank that several features are over-architected. Specifically the way Forms are implemented.
[FuelPHP](http://fuelphp.com)
Where are your credible facts when you shoot all these negative comments down with your own one-liners?
I have and love it. It has taken the best of CI, Kohana and Rails and baked it all into one sweet package. They have a new system called "cells" (get it... Fuel Cells..) that will basically be a package management system (think ruby gems) in a central repo. That is still in development but I cant wait for it.
What resources would you recommend to assist with writing one's won framework. I have casually looked around the googles, and came up with a lot of outdated articles. It would be awesome to have a bit of a walk through or primer wot work along with. 
You think so? Zend Framework is a component library first, and optionally a MVC framework second. You can use as little or as much of ZF as you see fit, I hardly consider that bloat.
They're not crappy, really. I'm sure they work beautifully for 99% of cases. My form specs just seem to hit that 1% over and over again.
Not to be completely anal, but Zend is a company whereas Zend Framework is one product in their suite. ZF is, in my opinion, incorrectly named as it is a *component library* and not a *framework*. The difference is that you're free to use as much or as little of it as you like. In fact, you can blend ZF into other frameworks as well: I would even encourage it. A great example of using ZF with other frameworks would be using the Zend_Gdata (Google Data) or Zend_Service_* components. ZF, unlike most of the frameworks that have been mentioned elsewhere in this post opts for *configuration over convention*. This development methodology is extremely different from what you'll get from the likes of CakePHP and especially CodeIgniter. Where those frameworks cater to RAD practices, ZF is best suited for highly custom web applications where a more restrictive (and sometimes faster to develop) framework would become a hinderance. Another popular component library is [Zeta Components](http://incubator.apache.org/zetacomponents/) (was ezComponents). There are plenty of PHP framework zealots out there that love to knock down ZF, but in my opinion that is because they do not have projects that require the flexibility that ZF offers. That's perfectly okay, but it is unfortunate that more developers aren't educated on the differences and thus (edit: less) constructive on their comparisons of frameworks. I'd encourage you to check it out, and also keep an eye on the development of [Zend Framework 2](https://github.com/zendframework/zf2). With this new major version, many of the complaints people have are being addressed and will have a total revamp of the MVC components.
Zend Framework's Zend_Db component has an adapter that uses the experimental PDO DBlib that Microsoft is working on: * http://framework.zend.com/manual/en/zend.db.html * http://us.php.net/pdo-dblib Obviously use at your own risk.
PHP is enough of a framework as it is.
Same boat, up boat.
Yup. You say that like it's a *bad* thing.
lithium.
Can't you just type "cd app", and then press tab?
What's the alternative? To have all those functions dangling about in the global namespace and all loaded even when not needed? I agree that a class as a function container might not be in line with the original idea of OO, but it works pretty well, without detracting from how real classes work.
&gt; I said "you should ask what the problem is" twice, then gave up sanc·ti·mo·ni·ous/ˌsaNG(k)təˈmōnēəs/ Adjective: Making a show of being morally superior to other people. 
But it works, and is very neat. XML configuration is compiled to PHP initialization code (in production mode, XML is not touched on every request, only compiled once). You can define context-specific configuration, and you get free inclusion, validation and transformation - the framework itself uses it to guarantee compatibility of configuration format across versions. 
I've seen plenty examples of function that should be static but weren't, and the code was filled with bits like this: $obj = new Object; $obj-&gt;someMethodThatDoesntNeedState(...);
You're probably not going to find everything in the one place in one easy tutorial. * I quite like the [Application Flow Chart](http://codeigniter.com/user_guide/overview/appflow.html) for CodeIgnitor. I loosely based my implementation off that. * [Write your own PHP MVC Framework](http://anantgarg.com/2009/03/13/write-your-own-php-mvc-framework-part-1/) was reasonably helpful in getting started and structuring the code/filesystem. You probably wouldn't want to use the old mysql_ database layer there and make your own with PDO. * [Symfony2 versus Flat PHP](http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html) also very helpful in understanding how you go from basic PHP to MVC and how it works. * [Links And The Routing System in Symfony](http://www.symfony-project.org/book/1_0/09-Links-and-the-Routing-System) also helpful if you're going to implement some sort of basic routing.
If you're doing heavy lifting, bend your orms. Got it.
http://www.reddit.com/help/faqs
If he is using Windows, try one of the wamps things, if he's into *nix, just set him up a virtual . How about the classic hello world, sum numbers?. When I started, I had my O'Reilly php book that has very basic things, but they do involve web stuff, like create a form that says hello "username". Another approach, could be TDD , you just need the cli and phpunit ;) I don't know, set him up a story , like the one that is taught in the Spring by example book , that way you can focus on TDD and you have cli so you forget about web or even the same TDD by example book that has the money account story.
drop Doctrine into the mix and away you go.
This is fixed in Netbeans 7.1 (whenever that is released). http://netbeans.org/bugzilla/show_bug.cgi?id=198699
It's funny because I've programmed small freelance sites in PHP for like 7 years and finally 'got with it' only last year with a framework for a neat personal project. Went with CakePHP on a whim and never looked back. Never even gave rails a consideration. Or even knew what it was about. Me - "PHP is the only way!" Fast forward to last week, at my 9to5 we just started a Rails project last week and after going over tutorials all I could think of was "AWWWW YEAH, I already know the entire design pattern of this". It might be sacrilege to say it in this subreddit, but I'm really digging Rails :). Ruby syntax sure is a different landscape though.
This is fixed in Netbeans 7.1 (whenever that is released). http://netbeans.org/bugzilla/show_bug.cgi?id=198699
This is fixed in Netbeans 7.1 (whenever that is released). http://netbeans.org/bugzilla/show_bug.cgi?id=198699
I'm probably doing it wrong but for an arbitrary user I just set my model to go recursive when I query against it for something like the index action of users. It'll grab any additional data set up in your relationships between the models depending on how deep you want to go. For a user who is Authenticated or whatever you can grab it in the Auth. $user = $this-&gt;Auth-&gt;user(); $group_id = $user['User']['group_id']; If you want to grab the name of the group then obviously a straight up find first query with some conditions thrown into the group model will get you that. I do this on my AppControllers beforeRender to check if someone is logged in ( if($this-&gt;Auth-&gt;user()) ) and set some global variables for all of my views to use. This is so I can display the users name on the front page. If you are still getting comfortable with cakephp I **highly** recommend the [debug kit toolbar](http://cakephp.lighthouseapp.com/projects/42880-debug-kit). That plugin has probably saved me *days* of figuring out what the fuck is going on (usually something I screw up). [FirePHP](http://firephp.org/) is also a handy handy tool (you have [FireBug](http://getfirebug.com/) install, right?), but I'm still trying to find a good debugger for AJAXy type requests on the server side of things. For now, tailing the logs has done the job.
Implying that having the answer somewhere would stop people from asking the question. If people actually looked for answers to basic questions before asking, they would find it in search almost instantly.
Compiled XML? *shudder*
We just need something in the sidebar linking to the most frequently asked threads.
&gt; For example you could use just the Mail or Date classes and it won't load anything else. But then you are not using Zend Framework, you're just including libraries from it.
I'd love to see [phpass](http://www.openwall.com/phpass/) mentioned in a FAQ
Any FAQ for /r/PHP would end up being a PHP tutorial in it's own right.
I'm a huge kohana fan. I used to use CI and switched to Kohana I doubt I will go back. I definitely see why it's not for everyone (steeper than usual learning curve etc...). The HMVC vs MVC model is the big plus for me.
So many people overlook this. Zend is very useful for dropping components into legacy projects to improve functionality, and for including in other projects that lack specific tools. Yes, it /can/ be used as a framework, but that's entirely optional. And, from a purely personal perspective, ewww Zend_Form.
[How to properly hash a password](http://stackoverflow.com/questions/6340105/how-can-we-create-a-fairly-secure-password-hash-in-php/6340197#6340197)
Yeah it's designed to be used like that if you wish.
Which is a great idea, and people should be using parts of Zend they need. But at that point you are no longer using Zend the Framework, and this thread is about frameworks.
That doesn't really make sense as you can use as much or as little of the Zend Framework as you want. Powerful absolutely, bloated to novices SURE, someone that can harness it's power though will have a great framework without any extra baggage. 
If you use only PHP you are really wasting a lot of time and are not programming in a way that is feasible if your site or program grows substantially. 
I work on very large projects, the are very well designed, I don't need a framework to write manageable code.
What's wrong with str_rot13() ?
xor is all you need
Tell me which sites you develop so I can get the hell away from them. Simply `xor`ing a string isn't secure. 
brb, rewriting my sites
Maybe next you should look up "moral". (Maybe you didn't realize you were currently engaging in sanctimony?)
I'm okay with this if they pop up every 6 months or so. That's how I learned about klein and Fuel among other micro frameworks i've never heard before.
But it means answering questions with one link, although the "which is the best framework" example cannot be answered so it'd need to say that. Basically.
Well of course I don't. I was under the impression it ran remotely faster in benchmarks but according to 1137 I am wrong.
oh the TDD is a great idea! thanks :) we'll get into web later but for now I'd like to focus on the basics of programming instead of HTTP/HTML, client-side vs. server-side and all that stuff.
Yeah don't mind me, I completely missed the line where you defined it.
woooosh
I second this. Zend + Doctrine is great although I have to admit that both have a steep learning curve. Once you "get them" though... there's no way to go back. I do think CodeIgniter is the best framework for a beginner though, learning MVC + everything that you need to learn when using Doctrine (Entities, Repositories, Services) "the Doctrine way" can be pretty overwhelming at first... so at least checking CI out might always be a good first approach to working with php frameworks
nobody likes zend forms....nobody! I decided long time ago that I would just do my forms in plain html and then validate them with zend... otherwise you need to create decorators for everything (which might make a lot of people feel smart but c'mon!)
I'm currently using Zend Framework + Doctrine 2 but I'm very interested in CakePHP, what kind of projects have you done with it? How is development pace on Cake compared with development using something else? How does Cake manage relational databases?
make something moron proof and the world will make a better moron
Also, see [http://qa.php.net/reports/](http://qa.php.net/reports/) to view other peoples failed tests. Most fail due to poorly written tests, so cleanup is needed. You can help.
Hey, I resemble that.
Probably already linked somewhere, but I like the free book, Practical PHP Programming: http://www.tuxradar.com/practicalphp Doesn't get into web stuff until the fundamentals are covered. Has exercises at the end of the chapters (with answers provided later). It's been a few years since I've needed to reference it, so it may be a little dated ... I'm not really sure.
Google apps API implementation and send form are two examples. The class structure is so deep it's like Victorian Britain meets inception. 
Is there a git mirror of their repo? It irritates me that I have to even install subversion in this day and age. I know you can git svn clone, but that still depends on SVN, IIRC.
Tests done, problems found and reported. Hooray!
Traits received little fanfare because people are accustomed to less crufty and real OOP languages now. It is actually an academic workaround for fictional problems of multiple inheritance (and non-method closures of course). I'm very unconvinced the syntactic overhead makes up for the fewer use cases.
You bet your sweet ass there is! https://github.com/php/php-src
Hurrah!
I don't mean any malice, but shouldn't the most prolific web programming language and platform have their own buildbot and continuous integration system? 
Zend Framework for me. Really steep learning curve but once you get used to the structure it will blow you effin mind how elegantly majestic it is. 
Nice one, and thanks for the update :)
It's not the most prolific language / platform, that'd be Java. But either way, they really should. I don't think they do, either, but gross mismanagement from the PHP project shouldn't surprise anyone any more.
How frequently is this synced with the svn?
So, why aren't you asking this question at the [phpBB forums](http://www.phpbb.com/community/)? 
The problem with Zend's implementation of forms is not that there are "Many classes". The problem is that they're replacing one fairly trivial task (show / validate / process a form) with a set of tasks that are arguably more complex. The whole point of using a framework in the first place is that it should *save* the developer time. Zend's implementation of forms does the opposite. As a side note: Calling developers who don't share your admiration of a particular framework "novice developers", "newbies" and "full of shit" does not add anything to the discussion.
To be fair, he did specify the most prolific WEB programming language...
Java is still more prolific for web programming as far as I know. If you count web platform programming- if you count something like every-company-ever using hadoop - then there really is no contest.
I think the idea is to get the tests running on as many different platforms and environments as possible.
And again your very first sentence is a direct insult to the person you're replying to. &gt; As mentioned elsewhere, many class files and include files is not bloat. Many files loaded from disk into memory is exactly what I mean by bloat. Why load all the functionality that you're not going to use? Sure you can cache the output, if that is an option (sometimes it isn't!), but that doesn't make loading all this unnecessary stuff okay. &gt; ...because neither you or franktank understand... Again with the insults. You sound like a fucking 18 year old throwing a developer tantrum. I went through that phase too, 14 years ago. You'll grow out of it.
Considering they have "automate tests" as one of their [goals](http://qa.php.net/projects.php), I don't think automation is in place.
&gt; There is a use case there. Of course there is a use case. Pick any methodology and you'll be able to find a use case where that methodology is the most appropriate. If you have a web application where "hundreds or even thousands of forms" need to be generated from code, Zend_Form *can* be useful. My point was that *for most web sites and -applications*, all that Zend\_Form does is replace one syntax with another, slightly more convoluted syntax. &gt; The process of rendering and validating a form is not a trivial task It should be. If it's not, you're doing it wrong ;)
I have asked it there. http://www.phpbb.com/community/viewtopic.php?f=46&amp;t=2132213 Nobody has been able to figure it out.
We're talking about PHP here, mate! Probably every 3 years. Just kidding, the last commit was 13 hours ago. Worst case scenario, I'd assume it's daily.
I have to disagree with your last point. Sometimes you really only want or need a "simple" micro-framework like [Slim](http://www.slimframework.com/) or [Flight](http://flightphp.com/). You just need to use the right tool for the job.
ah great! that's what I was looking for many thanks :)
It's in the works. However, [gcov](http://gcov.php.net/) exists today.
[git](http://git.php.net/), [hg](http://hg.php.net/), and [github](http://github.com/php/php-src) mirrors exist. PHP is considering an official move from [SVN](http://svn.php.net/). Updates are about every hour, but I forget for sure. Will check. Only parts of SVN are mirrored today, but all mirrors do contain php-src.
This is true, and it provides a simple way for people to contribute.
I would encourage the op to try and do some basic stuff with zf components and see if it is worth his while to become familiar with the architecture. When I develop using zf I find myself hunting around numerous classes looking for stuff and its a bit painful when I just want to get shit done. So maybe try submitting and validating forms, access control, basic model and controller interactions, autoload some of your own vendor classes. All those things should be pretty basic to achieve quickly with any framework in my opinion but I think you'll find its not quite as easy in zf as it is in other frameworks. My opinion based on experience. The GData library is super fragmented probably because it covers so much stuff, if you have something that fragmented then good documentation would be handy. I wanted to interact with google calendar, this meant GETting stuf and POSTing stuff. You tell me how long it takes you to find an exhaustive list of arguments for POSTing data to google calendar. Count the number of classes you have to hunt through and piece together what relevant information you can send to Google calendar. e.g: time, date, title, person etc. How long to find out what the names of those arguments are and an exhaustive list. Go dora explorer! (count the time you spend doing google searches and hunting around zf documentation as well please)
I hear this a lot , and I'm 99% certain it's a misconception. AFAIK, the auto-loader only loads classes that are needed.
Great! ;) A few of notes. There's also an IRC window within the editor itself, each PHP manual page links [top right] to the XML source for editing, and the online editor seeks improvement so if you find a bug or think something could be more intuitive, then please say so.
http://www.php.net/get-involved.php is also interesting read. It isn't linked from anywhere though, just one of those `hidden gems`.
you might have some junk stuck in browser cache.. try a different browser, or shift+ctrl+R to reload without cache
Thanks this toolbar rocks! Ya...I'm a native php programmer taking the giant leap into the framework scene. At times, it seems more difficult to learn the frameworks than the language itself :/ Back to the original question...I ended up using acl-&gt;findByAlias and passing it a user-provided username. As you may conclude, I am trying to build a page that will allow admins to manage other user's rights. I found a couple awesome acl tutorials, but none mention this crucial step. Off to the drawing boards...
If you think of it as a "they", then you have misunderstood PHP completely. 
would certainly come in handy...
Nowhere near.
Why ask? Just start doing it, as you said worst case? You learn quite a lot about how truecrypt works!
This sounds awesome, give me a shout if you need a hand!
Problem: you're using phpBB.
Why do people always forego [php.net](http://php.net)? It's the greatest resource you'll find for learning PHP aside from Zend.
http://php.net/manual/en/function.shell-exec.php
Don't be hatin'. 
True, was curious to others opinion mostly
Did you have a copy of it installed prior to this fresh copy?
There certainly is a learning curve but I feel it's one more PHP developers need to tackle. What I see these days is many new developers turning to frameworks like Cake and CodeIgniter and building out a site; only touching controllers, views and models without actually understanding what's really going on. They follow the quickstart and the strict convention they force you into without understanding what and why they are doing it. These frameworks also have a tendency to, not purposely, mislead. A perfect example of this is models - Models are intended to be data providers and where your business logic lives; all too often (and I was guilty of this at first) frameworks correlate models directly to the database and getting/saving data to the database as the only function they serve.
Yes. I kind of abandoned this now and I think I'll be using MyBB instead.
Variable functions by string is the real anti-pattern.
that is true, when you start working with a MVC framework for the first time you tend to go the model == table way... I did it too, until I began using data mappers, I do however find it more organized now using Repositories and Services, and I don't think I would go back to doing things the way I used to... but maybe model==table is simply something most developers have to go through to later learn that there's a much better way of doing things. When you have never used an MVC framework before dipping into it can tend to be overwhelming... and specially with ZF which is such so big and has so many features. 
So far I've done 2 small personal sites that my friends and family use. One is site where we vote for movies and rank them, the other is a planner / scheduler thing for my wife to use for her clients. They both use CakePHP + MySQL with some jquery thrown in for UI shtuff. Both have have user based auth + email signups with the whole group based permission thing going on (users, admins, managers, etc). I wanted to hand write these very common functionalitys just to learn and definitely had a blast doing it. When you get the hang of it, development in cake is rapid and awesome. One nice strength in cake comes from the bake console. You can really quickly whip up admin controls in a jiffy. I'm not familiar with Zend, but the entire design pattern of Cake is [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) which basically means you design your database structure with the right relationships and then when you bake everything it just works. The real time sinks come from when you're doing something that isn't necessarily [CRUD](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete)y. If you really want to get a taste of cake I highly recommend just skimming through the [tutorials](http://book.cakephp.org/view/1528/Blog) over at cakephp.org
Sounds great, I've done a lot of Zend Framework/Doctrine 2 development recently and although it's great I wouldn't call it "rapid" development...maybe it's just me because I have only done minor projects so far and getting into more complex relational stuff is harder. Simple crud operations where you have two related tables can be a bitch (and Doctrine actually makes it easier but still... configuring the whole thing to work together and creating entities, proxies, services, repositories...not so rapid), so I might get into CakePHP even though there's probably more ZF related work out there
I don't get why people bullshit like this and for what reason? PHP is top, here's some source (it was a quick google): * http://w3techs.com/technologies/overview/programming_language/all * https://secure.wikimedia.org/wikipedia/en/wiki/PHP#cite_note-W3Techs_usage_statistics-38 
For cake, once you know the conventions of how to name your tables and keys it's stupid simple. The real awesome part about it is that during the baking stage it will parse through your database looking for foreign keys and define those relationships in your model. Creating a quick app that supports a behavior like tagging a post (3 tables) is a snap and you're up and running in literally less than 5 minutes. This automatic behavior scares some devs but it's just a script and it's really really easy to either just make your own models or just edit/rebake them later if you messed up the relationship between them.
They aren't mistakes, more like you are making life difficult for yourself. When I was working solo I got everything I knew from communities like this one. The things I mentioned come up rather regularly I think.
Well, it's not bullshit is why. What you've cited is hilariously inaccurate and here's why: If you read [this](http://w3techs.com/disclaimer) you'll find that they basically admit their numbers are useless and several of their assumptions are crazy. The largest portion of their numbers come from scraping and assuming based on file extension. Since PHP is the only language that has an operating model where file extensions matter, let alone have a default. Since PHP is the only web platform that uses file extensions at all, their numbers are of course skewed. And, of course, this really only covers public facing websites that happen to be ranked by Alexa, so the sample set is in no way at all indicative of reality and the whole thing is invalidated. Furthermore, this doesn't take into account anything but whatever the frontend is being rendered in and in cases where the vast majority of work is done in another language - like how much Facebook relies on Java with Hadoop and Cassandra servicing the largest portion of their actual heavy lifting leaving PHP to do little but render pages, for instance - it's not counted. In a case like Facebook, you would need to count both PHP and Java to be accurate but only PHP is counted. These types of surveys can never successfully and accurately give a perspective on what technologies are being used because so much of a website's tech stack is always going to be hidden. If you look at the widespread adoptance of Java tools like Hadoop, Lucene/Solr, Cassandra, etc. etc. I think you'll find that it is the most pervasive language, even if the people using tools written in Java aren't actually writing Java.
I liked tizag.com. It's very basic, but it's a great start.
I probably need to re-read it myself. Since I posted, I landed a job maintaining a company's web presence and I'm pretty afraid that I'm not good enough. I need a confidence boost!
If you have the most technically challenging thing you have ever written , forget the company, try to sell it. Don't give your stuff in a interview , and value your work. 
If you need help or want to collaborate working on this let me know, this is something Ive wanted to work on for a while! :D
The screenshot in the link is a preliminary demonstration. I'm working on options such as: * Intelligent shuffling (where it doesn't replay a song until they've all been played) * Better player, probably based on jPlayer or my own derivative instead of pure HTML5. * Better rendering (PHP threads?). Something gets stuck when files are clicked rapidly. * Installation. * Cover art, lyrics * BPM calculation which can be added to the database for mood playlists. * Visualization? Firefox is the only browser which currently support visualizations. * Other media support? (video?) The player website is installed on your own server. You can then add any songs you want to your own playlist. The idea is to share your song collection with your coworkers, family, etc. I'm ignoring the legality of sharing with your family/friends since I'm only listening to my own music right now. I want the website to be a bit like Grooveshark but utilizing HTML5, primarily developed for FF and Chrome (Android phones included).
no.
There's a reason that software companies have alphas and betas. Not everything works under ever OS or library combination. Running the tests on many configurations returns a more robust result set. Otherwise next time you report a but, they'll just say "works for me."
Have you looked over [subsonic](www.subsonic.org)? I've used it a bit and the features i have missed are: Tagging - Adding multiple genre/mood/tempo/whatever tags to my music would be very helpful in organizing. Sorting - Specifically by date, as i tend to find the music i search for in my collection based on the date i aquired it rather then names. But it does have a whole slew of useful features you could catch ideas from. Iphone/android app. Jukebox mode (play the music on the servers speakers). Transcoding. downloading playlist as podcast etc. I've found it extremely useful. Good Luck! 
What benefit does this have over making an MPD client?
I'm not so good at developing, but I can make nice interfaces, which is what a lot of open-source projects lack, so hit me up :) EDIT: And I'm also pretty good front-end
PHP does not support threads.
PHP does have semaphores mind
No problem. Expect it to have security problems. Just about everybody's does. Don't get angry or embarrassed; treat it as a learning opportunity.
Subsonic is java and closed source
I would also like to add that I created a few sample plugins and a sample application, which can be found [here](http://www.github.com/jokeofweek/sulfide-samples). I'm just looking for some constructive criticism and I'd love to have your opinions on what I'm doing right and wrong!
cool, I'm gonna be looking at their docs pretty soon then. Sounds like what I had been looking for. Thanks
Just real quick as I'm heading out soon. So far it looks really good, with clean code, and well documented. The only thing I can mention in the three minutes I've looked at it is to suggest using spaces instead of tabs. The reason for that is because github clearly defines it's tabs as being more spaces than you do. So when you've tried to line up multi-line chunks of code, it no longer lines up properly for others. Other than that, things are so far so good. I'll try to remember to check it out when I get back later tonight for more feedback.
No offense, but why do we need yet another php framework?
Alright, will do! Thanks for the feedback! :)
*You* might not need it, but it's a good learning excersise to write your own and see how others have done theirs.
I've just written my own framework myself, and I spent hours and hours reading about how to best handle database connections, configuration and other things I used globals for before. I see you've gone with the factory pattern for your database class, and it looks solid to me. I went with a simpler singleton class that basically is a wrapper for mysqli, and that was after many contadicting articles and posts on singletons. Another potential big no-no I found useful was to use helper classes with static methods as lazy-loading containers for what was previously an include file full with functions. I'd like to hear what you've based your design decisions on and your general philosophy, if you don't mind. I know it's not actual feedback, but it's always interesting to see how developers approach these issues when there's no one obvious right decision, but a million different solutions and opinions.
**What has been done right:** * **phpDocumentation** - Overall, very well documented code, especially core elements. * **Native PDO** * **Unit Tests** - Poor coverage, but at least some are done. **What has been done wrong:** * **Smarty** - Redundant. Smarty exists because people coming from ASP or JSP *know* that you need some kind of templating / rendering engine in order for embedded native code to work. This is not the case with PHP. You can natively (short open tags) embed PHP code in any included document. * ** View/Logic Separation ** - Your MiscController (among many others) contains a mix of included and inline text. I see no reason why your, in this case: pageContent, is not outsourced to a template file. * **&lt;?php defined('APP_DIR') or die('Cannot access file.');** - Absolutely unnecessary when file contains a class definition only. (This is a non-issue really) * ** File Naming ** - It is often preferable that you name your files according to class names. In this case you have class Language inside i18n.core.php. This however bugs only those who are OOP and autoloader fans. (me) * ** No MVC ** - I cringe a little bit every time I seeing native queries in the Controllers. (Yes, WordPress, you too!). I'd suggest that for every controller you use to interact with some persistent objects -&gt; create models. * ** Missing an ORM ** - Minor issue. Would love to see some ActiveRecord or DataMapping action there. Overall, your project is many times better then what where my first frameworks. Keep up the good work! *edits: readability*
That much is true, but I think the framework space is already populated enough in the php world...
[Don't use spaces.](http://www.codinghorror.com/blog/2009/04/death-to-the-space-infidels.html) GitHub's fuckup shouldn't be your priority.
I disagree: tabs for indentation, spaces for alignment. I wouldn't mention it (tabs vs spaces is just bikeshedding), but if you're already using tabs, IMHO it's better to stick with your decision.
I disagree. @OP: Keep tabs, enter the "show hidden characters" mode of your editor and make sure you are consistent (either spaces or tabs) when indenting the code. 
I'll make note of your name and PM some git information when I have it uploaded.
I have purchased Subsonic and am using it as inspiration. The problem that I've found is it doesn't have a very easy interface and the playlist support can use some work. The program itself is rather good.
The only benefit it has to me is it's as blank slate to do whatever I want with it - specifically I'm looking for smart playlists (BPM, favorite songs, least played songs, etc.)
I'll PM some git information when I have it uploaded. I can also make some UI layout examples that I have to get your opinion. Thanks!
As HertzaHaeon already mentioned, he is not putting his framework out for us to become avid users of it. It's merely an efficient method for him to get a peer review.
First of all, I want to thank you for your post. This is exactly what I came to this subreddit for, it was extremely helpful! :) I will fix the APP_DIR or die thing right away! I did not know that, and that will definitely help alot :) For the file naming, I had kind of a hard time deciding what to do, because some classes, such as the Plugin and Routing components, involve more then one class (for example plugin will have Observer and Observable). Any ideas on how to handle that? Also, thank you for pointing out the Smarty issue. I had just thought that frameworks traditionally came with a templating framework, representing the 'V' of MVC, but perhaps I had misunderstood. Really I was trying to use Smarty to separate the HTML from the PHP itself Overall, thanks for taking the time to give me all these tips, it really helped :)
Overall, it's more as a self-project and learning resource. By developing it, I've learned quite a lot about different design patterns as well as just general application architecture. Really, all I can hope for is that it might help at least one other person learning about these topics.
Alright, although I do think that the spaces for alignment is definitely a good idea. Things like the $drivers array in the [database.core.php](https://github.com/jokeofweek/sulfide/blob/master/core/database.core.php) file could definitely use some aligning.
Hey! Well, I did the exact same as you! It took me a long time to stick with the factory pattern for the database class, and I did lots of research through stack overflow and google on why it was better then just using a singleton pattern. I must admit, the singleton and lazy-loading containers are definitely tempting as they are convenient, but I think in the long run they just cause maintenance trouble. I definitely know the feeling about the large number of contradicting posts on singletons and patterns. The classes I'm currently stuck on is the session ones, so I am doing some googling on how exactly to approach that. I'm trying to keep it as simple and clean as possible. My overall goal really is to just provide a learning tool, whether it be just for myself, or for anyone else either writing an application, framework or just generally learning PHP. That's why I try my best to make sure it is well documented. I've also been using this as a way to learn exactly how unit testing works, and how to go about doing it properly. I must say the thing I had the most fun working on so far was the plugin system, as there is a whole plethora of different ways to implement this. Overall, I am trying to make it so that the system is very extensible, and I am also trying to make each component as independent as possible so that a user can easily choose exactly what components he needs, and leave all the other ones. Edit: Also, for the Config, I was kind of inspired by the windows registry, as I think it is a clear way of giving context to settings.
Exactly! I think reddit is a great way to get some kind of input on code, especially when you don't have a large number of sources available to you in person. It's been extremely helpful as I already have some modifications planned out in my head!
Of course you can embed HTML in a PHP file, but that's a terrible practice. Template engines like Smarty and Twig exist to separate presentation logic from the code. That makes it easier to work with designers or allow user-provided templates. It also provides scoping (more so in the case of Twig) to only make specific variables accessible to the template. It improves security since you can instruct the template engine to automatically escape all variables when you render them -- opposed to having to do that manually in PHP files. Template engines also make it efficient to add modifiers to variables. You may be able to get away with PHP short open tags on a simple web page, but a framework is designed to build complex applications.
Not much that I can add that hasn't already been said except maybe to encourage you to enclose your code in one or more namespaces to keep from cluttering up the global namespace. For example core.php's requires() that could easily conflict with other libraries.
Smarty is NOT redundant. We both know it. Ignore anyone who cannot grasp why templating engines are a good thing.
**Smarty is not redundant**... Smarty exists to simplify the life of large team by making sure that the people who are in charge of making HTML don't fiddle or add unwanted PHP code. It also greatly simplifies development by allowing you to create isolated templates with ease. **Have you ever tried to restrict scope inside a pure-PHP template?** (Prevent templates from accessing restricted classes/functions/constants) Short of rendering your template in a separate process or parsing the code manually, it's near impossible.
&gt; Smarty - Redundant. No, it's not. Short tags are not the only thing Smarty brings to the table. I don't want to get into a debate because everyone is free to use the tools they want to, but just because you don't find a use for a templating engine doesn't make them redundant, it just means you, 1 person, haven't found a need for it yet. I wouldn't build a project without one, and Smarty or Twig are fine for my needs, so I'm glad to see them included.
I've been evolving a PHP framework for a popular webapp for several years. I agree on plugins being one of the most interesting components. My main focus was making sure plugins had access to all the 'first class' functionality. They can provide new translation strings, resources, events, their own hooks, database migration patches, permissions, etc. Any app built with that mindset has its core functionality implemented as plugins too, which means that plugins have access to all the tools and services used to build the main app. I also agree on registries (i.e. key/value dictionaries). It's very efficient to store app settings and user preferences in a dictionary. Lookups are quick, and you can easily store that kind of content in memcached. Most of the IDs in my framework are namespaced strings; e.g. "plugin.some.extension.instance", "event.some.descriptive.name", "plugin.some.translation.string", etc. I use singletons everywhere and I've never had a problem. I've found it useful to group them under a Facade pattern: $db = Framework::getDatabaseManager(); $tpl = Framework::getTemplateManager(); $session = Framework::getSessionManager(); $cache = Framework::getCacheService(); $mail = Framework::getMailService(); Each object is a singleton that wraps a resource or service (e.g. MySQLi/PDO/Smarty/memcached/etc). The singleton could either return the reference itself (e.g. a Smarty object), or it could return itself and control the interface to the underlying dependency (better for scaffolding where you plan to change the dependency in the future w/o rewriting all the API usage). This scales really well, and the facade pattern is autocomplete friendly in IDEs like Eclipse/Aptana; although you'll need to use Javadoc at times when using indirection: /* @var $var Some_Class */ As mentioned elsewhere, having a data access layer is important too. You don't want to have dangling SQL queries in the code. I have data access objects managing CRUD with a lightweight ORM. I'm not a huge fan of the ActiveRecord approach since I work on enterprise software and my records tend to have a lot of interrelationships (joins, custom fields, etc). I've always liked Hibernate in Java, but even my most complex ideas have never needed that much abstraction (it tends to be more useful for a document-model database like CouchDB). Unit testing is a bit more complicated when you're not just testing a library of utilities and instead you depend on manipulating records in the database. I've found functional/acceptance testing to be the better investment because much strange behavior won't be teased out unless you're stringing together UI actions in exotic ways that outlier users would. Unit tests will make you more confident when making sweeping changes, however, because PHP generally won't complain if the syntax is valid until you actually execute a specific block of code; where Java will complain when you compile. This is common if you change a method signature in your API -- e.g. function foo($arg1, $arg2) -- but then you still have dangling instances of $obj-&gt;foo(1,2,3) or $obj-&gt;foo('a'). The invalid code will compile because it's syntactically correct, and you won't see an error unless the UI action you're doing actually evaluates it. Beyond all that, your code is clean, well-documented, and shows a strong understanding of OOP. The major test will be when you develop a real-world application with it, and if you'll be more or less productive a few years from now as a result of using it. The longer I use my framework, the faster my development gets. Clutter and redundancy get cleaned up because they're philosophically incompatible with the framework. It becomes easier to implement complex feature requests because they can be broken down into ways of reusing well-refined tools that already exist in the framework. If some feature request feels like something the existing tools can't handle, it's nice to be able to just invent a new tool -- which usually has the habit of being applicable to a hundred other requests that were waiting for a good answer. TL;DR Nice job! I've been working on a PHP framework for years and use it in a popular and commercially successful PHP project too -- and I consider it one of the best learning experiences I've had in my 18 year programming career.
Now: &lt;p&gt;Welcome, &lt;?=ucfirst($name);?&gt;&lt;/p&gt; &lt;? if($loggedIn){ ?&gt; &lt;a href='...'&gt;Log Out&lt;/a&gt; &lt;? } ?&gt; is completely acceptable code in the View; so are loops, functions calls and formatting. Granted though - you should not be writing queries, defining functions, classes or doing business logic there, and if you can't hold your self from doing so - then Yes, you'll have to incur some overhead and use Twig or Smarty. Previous statements also holds true if you as a developer expect your target group to consist of *non-developers*. 
+1 for Twig. I find it a lot better than Smarty because it is faster, consumes less memory and the code is of higher quality. I also agree that using PHP syntax for templating is a terrible practice. Biggest reason for me is that it is more verbose (this alone should be reason enough). Also, you are too easily tempted to put programming logic in your templates. Maybe you won't because you have a lot of discipline, but then your noob colleague will.
+1 I've been working with PHP for about 12 years (since PHP3). The natural tendency of someone starting out is to just embed PHP in other forms of web content because it's _possible_, but once you tackle non-trivial problems you quickly learn countless reasons why that's a bad idea. I've addressed some of those in my reply to the parent post.
Wow! This was an awesome post! Thanks for taking the time to write, and I especially appreciate you relating it to your own experience. I am looking around at various ORM approaches to see which I could implement. Also, thank you for introducing me to the facade pattern! Reading up on it now! In the future, I would love to use my framework in an application, I definitely don't think it's ready for that stage though. Although I was very impressed this morning at the fact that I managed to whip up the REST sample plugin and make a basic application to test it on my end in under 30 minutes, which was definitely an improvement in productivity. I do agree that unit testing can be sometimes hard to implement, what I'm having a tricky time is trying my best to make it so that each specific test case is independent from other test case results. So thanks for the very interesting post! It was very insightful, and I love hearing any kind of feedback, especially from another person who's worked at the same thing.
Sure, you could use any feature of PHP from a &lt;?...?&gt; block inside predominantly HTML/CSS/JS content. With a template engine, you're stacking modifiers like: {$name|trim|capitalize} You can also enforce HTML auto-escaping for every variable without having to explicitly add "|escape". In your example above, if my name was "&lt;script&gt;blah();&lt;/script&gt;" I'd be capable of XSS in your template. You could attempt to filter all user input so you could ignore escaping at render time, but that's a losing battle -- something will eventually sneak through (XSS in an email subject, an RSS/Atom item title, etc). With Smarty you can escape every output variable by default and simply append 'nofilter' when you need HTML and you're confident you've sanitized the content: {$content nofilter}
The biggest problems with pure-PHP views in my opinion is **scope**. How can you ensure without over complicating your code that no variables, no functions, no classes that you don't want accessible in your View are available to the template designer? Templating engines such as Smarty solves that problem very easily.
I had never heard of Twig before, so I will look into it and see about implementing it, perhaps as an alternate templating component! Especially if it has the benefits you state. Edit: Twig support has been added!
I always use Twig instead of Smarty when I'm allowing end-users to provide template content. Twig is faster and more efficient, but it also has a more sophisticated and secure sandbox for template variables. With Smarty3, not only can you grab anything out of the scope, but you can also run arbitrary code from a tag; e.g. {DAO_Object::delete(123)} This behavior can be very useful in the right hands and completely destructive in the wrong ones. ;)
Fair enough then. Makes sense.
I definitely agree in theory. In practice, Smarty3 doesn't sandbox the scope to the point I'm comfortable making Smarty templates editable by non-trusted users. I use Twig in those situations because it really locks the scope down.
On the topic of frameworks, Twig is maintained by the creator of the Symfony framework: http://www.twig-project.org/
By default it doesn't sandbox the scope tightly. However, you can [enable a few options](http://www.smarty.net/docs/en/advanced.features.tpl#advanced.features.security) in the class which locks it down. You can lock down Smarty3 by enabling [template security](http://www.smarty.net/docs/en/advanced.features.tpl#advanced.features.security). class Smarty_Security_Sandbox_Policy extends Smarty_Security { // disable all PHP functions public $php_functions = null; // remove PHP tags public $php_handling = Smarty::PHP_REMOVE; // disallow non-smarty modifiers public $modifiers = null; // disallow static class access public $static_classes = null; // disallow streams public $streams = null; } $smarty = new Smarty(); // enable security $smarty-&gt;enableSecurity('Smarty_Security_Sandbox_Policy'); That will prevent your static class from being available.
I would align this array like this (using tabs): protected static $drivers = array( 'mysql', 'pgsql', 'mssql', 'dblib', 'sybase', 'sqlite2', 'sqlite3' ); 
You can lock down Smarty3 by enabling [template security](http://www.smarty.net/docs/en/advanced.features.tpl#advanced.features.security). class Smarty_Security_Sandbox_Policy extends Smarty_Security { // disable all PHP functions public $php_functions = null; // remove PHP tags public $php_handling = Smarty::PHP_REMOVE; // disallow non-smarty modifiers public $modifiers = null; // disallow static class access public $static_classes = null; // disallow streams public $streams = null; } $smarty = new Smarty(); // enable security $smarty-&gt;enableSecurity('Smarty_Security_Sandbox_Policy'); That will prevent your static class from being available.
GRR! MY OPINION IS FACT AND NO ONE CAN SAY OTHERWISE!! ARGH!
Why are your template designers trying to use functions and variables that aren't given to them explicitly?
**They shouldn't.** That's the whole point. Thing is, on large project teams (25+ people), it's hard to manage what everyone is doing on a daily basis. And, if you are allowing for user modifiable templates, it's important to Sandbox it tightly.
That's definitely useful. I tend to use both Smarty and Twig in applications where I have developer-controlled templates mixed with user-editable ones. These usually are exposed in different places: the developer templates render the UI, and user-editable templates control email templates or profile content. A major part of my MVC flow is having plugin objects do something like {$obj-&gt;render()} at the appropriate place in a template, which starts a nested Smarty 'display()' cycle. I can't lock down Smarty entirely, but with the sandbox tweaks it certainly seems as capable as Twig for user-editable templates if there were two Smarty instances (one trusted, one untrusted). Twig may still be the better choice for its efficiency.
&gt; because some classes, such as the Plugin and Routing components, involve more then one class (for example plugin will have Observer and Observable). Any ideas on how to handle that? Split them. Put 1 class to 1 file. I resisted this for a long time, but experience has shown that this is really better.
Honestly I'd just prefer (and often use) something simple for template manipulation: $layout = new Template("layout.phtml"); $layout-&gt;pageTitle = "Homepage"; $page = new Template("home.phtml"); $page-&gt;items = Model\Blog::fetchAll(10); $layout-&gt;page = $page; // casts to string internally echo $layout; Then I just use simple PHP code inline in HTML. Page output can be cached when they are output for the first time, although this is often not necessary if the data is cached (memcached/something) since APC can cache the templates. Can you tell me why I should use a template engine that does anything more complicated than this? E.g. with a special syntax, etc. The only thing that springs out to me is that if a designer looks at the templates they need to understand some PHP control structures and know the names of variables passed to the template by the developer.
&gt; it's hard to manage what everyone is doing on a daily basis. So you're solving a project management issue by shackling your designers? Isn't that just keeping the foxes out by killing the chickens?
Exactly this. I *give* my designers access to $View-&gt;username; $View-&gt;message; Which I also [extract()](http://php.net/manual/en/function.extract.php) in case they want a shorthand: $username; $message; We define what each variable holds and we have a mutual agreement that nothing else (with some exceptions) should be touched. Before rolling on the production, the code is inspected, QA'd and finally included. I can see however, that not everyone gets to work in the same environment I do. Now that I have read most of the comments, I can see that the most prominent use case for using Smarty or Twig is where you work with people who you do not trust or have no contract with, and therefore are enforced to Sandbox their code.
Word of advice: use PDO instead of mysqli.
When the foxes are mostly college-level interns stating their first job with no concept of the importance of code security and not using what you shouldn't... **Yes**. The chickens are unaffected as they wouldn't use those resources anyway. The resources passed from the developer to the front-end templates the only allowed resources. So what's been implicitly given to the designers is also explicit. They can't get out of those bounds, not that they have to. Also, in my case, I have to give access to my templates to external designers that my customers choose. There is no way I can trust them with code they provide. Having a templating engine which is Sandboxed solves that problem.
&gt;That said, only a moron would use tabs to format their code. The article disagrees with your statement...
Actually, you can tweak those parameters to only allow the classes and functions that you want to allow.
&gt; interns stating their first job with no concept of the importance of code security and not using what you shouldn't... Yes. They're interns, it's your job to teach them these concepts. They're not there just to be cheap labor, they're there to learn. Why are you allowing interns to check-in code without review?
I can see that it might be necessary if there is high developer turnaround mixed with a different level of experience - I can't imagine training and inspecting code of 50 people, routinely. I'm in a lucky position though. I've hand picked and trained my team - We don't get to play in sandboxes.. :(
I'm not allowing them to do that. However, I have work to do on my own and having controls in place prevents them from wasting time implementing features with disallowed tools without having me hovering their shoulders the whole time. I am teaching them these concepts as they are also doing backend work. However, the frontend is sandboxed using a templating engine because: - Believe it or not, it prevents mistakes - Customers are allowed to modify/create templates of their own for their instance - It speeds up development time - Helps to keep the code maintainable
&gt; - Believe it or not, it prevents mistakes &gt; - Customers are allowed to modify/create templates of their own for their instance &gt; - It speeds up development time &gt; - Helps to keep the code maintainable Now these are good reasons to sandbox. Not being able to trust your employees to follow instructions... not so much. However I think #3 and #4 are relative and mostly opinion. If your file structure is setup properly and development guidelines are enforced, maintainability doesn't necessarily have to suffer. Having to learn yet another language in addition to PHP to build templates with can be a hindrance (that's the whole reason server side javascript is becoming so popular, people want to reduce the number of languages involved in building a site).
If you can't tell already from the replies you've gotten, tabs vs spaces is a very heavily debated topic. Ultimately it boils entirely down to individual preference. As this is your project, use whichever method you are most efficient with. What is important is maintaining consistency across the entire project. As far as your framework goes, may I just commend you on your *excellent* documentation. Probably more then you needed in some places, but very well done.
I am fucking sick of this ignorant subreddit telling me (and everyone who will listen) that I don't need smarty without having the first clue about the reasons I choose to use it. Not everyone needs it. Not everyone will use it. But will those who don't want it PLEASE stop forcing their view on the rest of us. FFS...
From a pragmatic point of view, I think the problem with pure-PHP views/templates is that it doesn't support template inheritance. [Template inheritance](http://www.twig-project.org/doc/templates.html#template-inheritance) is incredibly useful when working with website layouts. It allows you to specify defaults that you can later overwrite, so you're not repeating yourself and you don't have to create a separate include file for every little part of your website. My experience is that it makes your templates well-structured and easy to maintain. You cannot achieve that with just PHP includes.
Template !== View layer. Period. You don't wanna use MVC? Perfectly fine. MVP is probably more what you are after. You need a template engine because you work with incompetent "designers"? Please, go ahead. But pretty please, with sugar on top, could all PHP-devs that use templating engines in MVC apps stop using it *instead* of a View layer, and consequently a) stuff view-logic the templates can't handle all over the place, en b) add tons of utterly superfluous, hard to maintain code to translate objects to variables the template engine can handle. It is the #1 reason why even todays PHP-code, using modern frameworks still looks like pile of spaghetti.
&gt; But will those who don't want it PLEASE stop forcing their view on the rest of us. Only if those who do do the same.
Template engines solve the problem if they are added to the View layer as a solution to said problem. They however invariably turn any nice MVC application into a pile of spaghetti shit with no separation of concerns if they are used *instead* of the View layer, sending us right back to where we were with PHP 10 years ago. And that is exactly what I have seen *every fucking time* developers used Smarty. No exceptions. Although Smarty itself is a fine template engine, it unfortunately has become the tool of choice for incompetent PHP developers.
Yes, I will actually upgrade my own framework to PDO eventually. The mysqli vs. PDO debate does seem to favor PDO, although few actually think mysqli is bad per se.
Maintenance trouble is the usual warning for lazy-loading helpers, but I don't see any alternative. There's always a bunch of various helper functions that are general enough not to be connected to any of your specific classes, such as various output formatting and string handling. I've never seen anyone come up with a better place to put them, so I structure them all in a stringHelper class with static methods. Anyway, thanks for your reply. It's always interesting to see how others work, especially people near your own level of skill.
Making up your own non-standard file extensions like .core.php is out. ClassName.php is in. Also, the PSR0 standard is the new hotness in PHP file naming conventions.
Yeah, I kind of figured that out after the variety of answers aha! And thank you, I really appreciate it! I was trying my best to make sure that it was as clear and as easy to understand as possible, as I believe good documentation is one of the most important things in understanding a code base.
The View **exists to render the presentation layer**. That's **exactly** why templates exists... Now for your two problems: &gt; a) stuff view-logic the templates can't handle all over the place* Then that logic should be in the Controller or in an extension, not in the template itself. Don't blame the templating engine for its users. &gt; b) add tons of utterly superfluous, hard to maintain code to translate objects to variables the template engine can handle.* Again, don't blame the templating engine for its users. In the case of Smarty, you can work with objects the same way that a pure-PHP view would. *"We shouldn't be using knives because people cut themselves with them."* --- At the end of the day, it's not the templating engine which is in charge of organizing your code, it's **you**. If you can't do a good job with one tool or another, don't start blaming the tool. Blame yourself. So, at the end of the day: class HelloWorldController extends Controller { public function get() { $view = new HelloWorldView(time()); return $view; } } class HelloWorldView extends View { private $_time; public function __construct($time) { $this-&gt;_time = $time; } public function display() { echo "Hello World, it is " . htmlentities(strftime('%Y/%m/%d', $this-&gt;_time)); } } Is as valid as: class HelloWorldController extends Controller { public function get() { $view = Smarty_Factory::getView('HelloWorldView.tpl'); $view-&gt;assign('time', time()); return $view; } } /* HelloWorldView.tpl */ Hello World, it is {$time|date_format:'%Y/%m/%d'|escape}.
take a look at the slim skeleton and the lithium framework. and you'll see how yours compares.
You use Facebook as an example, but I'm not sure how accurate your assertions are (I don't work there) but they appear incorrect. According to this recent talk, it is [MySQL](http://www.percona.tv/percona-live/mysql-at-facebook-current-and-future) that does the heavily lifting. Regardless, this thread is off-topic. :)
Sure, platform exposure is a great reason for releasing tests.
I use closures to solve this.. posting from my phone, if you're interested reply and i'll share more when i'm back online. 
Sounds good, here's a little something I decided to try yesterday, new style for me, I usually do minimal stuff. WIP, obviously; http://screensnapr.com/-/uploads/gKYcIt.png UPDATE: http://screensnapr.com/-/uploads/c03V4a.png
Closures don't stop you from accessing static members from defined classes, creating new instances of those classes nor prevents you from accessing defined functions.
Python, C, JavaScript, MySQL and a bit of PHP under my belt. Lemme know if I would be any help. 
Your current GUI is pretty horrendous, just to let you know :) The logo is especially bad, also the usability of having the remove button right next to the play button is just asking for miss clicks.
Thanks! I fixed that up by moving the Core object from the Plugins file (don't know what I was thinking) to the core.php file, and added the functions which used to be global as static functions to the object! I'm assuming I should do this for the defined constant I use (APP_DIR) as well? Perhaps renaming it to SULFIDE_DIR would be a good idea as it would at least minimize name clashing?
Hello XSS vulnerability: &lt;p&gt;Welcome, &lt;?=ucfirst($name);?&gt;&lt;/p&gt; 
The great thing about namespaces is that you don't need to worry about renaming your generic-sounding constants and classes and functions. As long as they're declared in your namespace then you can go crazy. foo.php: define('sulfide\APP_DIR', '/home/foobar'); bar.php: namespace sulfide; echo APP_DIR; // prints '/home/foobar'
oh.. no, of course not. i was talking about providing a 'clean slate' scope-wise.
Ah, I see, I did not realize there was native namespace support in PHP! I'll have to read up on it! Thanks :) Have an upvote!
Which is broken with one keyword: `global` or `$GLOBALS`
They were introduced in 5.3.0. Looking at your readme again, you talk only about version 5, so now I hope I'm not steering you in the wrong direction! If you're writing for 5.0+ compatibility then disregard!
again, this isn't to stop bad actors; it's to prevent accidental variable re-assignment/usage.
Thank you.
Those are great. I'd also add a next/previous button. Play would have to become the pause button of course. If you don't mind I may want to use this idea, with your permission.
Go for it, I'll keep developing a UI for the project if you want, I've still gotta do volume controlls, next, previous buttons, though I'm not sure how I'll fit them in, i'll probably need to switch around some stuff. 
Which is why I thought I'd step in :) Nothing annoys me more than great web apps with bad GUI's.
Thanks.
I'm slowly going through some popular frameworks and gradually collecting ideas for my own. So far I went through Zend, Doctrine 2 (ORM) and Drupal 7 (I do know it's not really a framework). Drupal has godly form and rendering system so I'm sticking with it a bit more.
You're welcome. Let me know if you have any questions. 
I find it impressive that you manage to quote the only piece of opinion in a long article citing studies. I weep more and more for this world every day.
Any chance of a more permissive licence? GPL rules out a lot of projects.
The gist of the article was "don't rearrange your code needlessly". Xymak1y took that to mean "Don't use spaces", and I'm the one that got it wrong? At least what I quoted was actually in the article, even if the author said it in jest.
Given the context that the code is already using tabs then I don't see how he's misinterpreting it, the article actually was agreeing with him.
I want to keep it open source. I believe I can switch it to the LGPL, would that work? Also, keep in mind this is a pretty stand-alone script. I don't really see how the GPL would be very restrictive in this case. 
&gt; **Smarty** - Redundant. While typically I'd agree, Smarty's minimalistic syntax makes it appealing to kiddies who run screaming at the sight of code. My primary suggestion to is that if you do decide to use Smarty, move all your HTML into templates(i.e *.tpl) and quit [interpolating](https://github.com/jokeofweek/sulfide/blob/master/pages/home/HomeController.php)(line 16) with PHP. If not smarty, then write a [View](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) component as the PP mentioned. &gt; **File Naming** - ..i18.core.php.. Please do **not** do this, PHP 5.3 supports namespaces and the hardcoded autoloader runs significantly better than custom wrappers Instead separate each class into an individual file named after the class. MyClass.php is MyClass, etc. &gt; **No MVC** MVC is certainly a good suggestion, however it's worth noting that the creator of PHP advocates the [no-framework framework](http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html) approach.
The GPL is fine for free/open source software projects or services that do not distribute source (eg used to create a web service) because the licence only applies to source code distribution; this does mean that many projects can not use GPL'd code without licensing issues. My personal rule of thumb is that a whole system should be released as GPL but libraries and such should be licensed under the LGPL which offers many of the same protections but allows interoperability for code with less permissive licences.
Ah, I see what you are saying. Perhaps I will make a branch which will only be compatible with 5.3+ which will make sure of namespaces. For now I think I will try to refactor so that there is one class per file and go about some type of autoloading. Thanks anyways, I learned something that I didn't even know was in PHP!
Maybe you should think about posting the code to [Github](http://github.com) instead of just passing along a link to Pastebin.
So if you split it into 4 GB pieces, and then fread and echo them all in the right order it should work, right?
&gt; models are nothing more than a database access layer instead of the place where business logic should be taking place You can put whatever you want in the models, in fact I do so cause I find it a bit stupid to just fill them with 5 line functions. I'll also process the query results in the model.
&gt; I had trouble getting it to say "Hello, world!" out of the box as it would cough up errors and whatnot With all due respect, CI is about the simplest PHP setup to "install". You copy the files, change perhaps 1 or 2 settings in a config file and that's it. Even WP is more complicated.
it would help with cases like this: http://www.chrissterling.me/ss/2011-07-04_1139.png
You're right, it's childsplay
&gt; CakePHP, CodeIgnitor and from what I can tell, the majority of other frameworks are convention over configuration. What this nets you is faster application development because there's usually only 1 way to do things which is defined by the framework. Zend is configuration over convention and setup in a manner that it doesn't tell you how you should do things I'd say it's the other way round. In CI you need the config file and a controller. You can render pages, run queries and process data all in one single controller file. I don't think Zend would let you do that. I inherited a Zend project once that had me tearing my hair out. I ended up communicating with one of the Russian Zend core team guys who basically concluded there was a compatibility problem that could not be solved, ie. you're fucked. It's also slow as fuck.
Would have to split it with something other than PHP but it should
Agreed. I follow [Ryan Parman's guidelines](http://s3.ryanparman.com/php-guidelines/ch.strings.and.arrays.html#sec.arrays), specifically: "If any array elements have their own line, they all should."
If its on a *nix system you should be able to do it on the fly with some clever command line-fu.
If you looking for a non-restrictive license, try the [MIT License](http://www.opensource.org/licenses/mit-license.php).
Agreed! When you have a complex, change-friendly app where the view implementations would simply display templates and do nothing else, there's little benefit to enforcing an unnecessary academic rigidity. I've been working on the same popular PHP app for over 10 years. It's enterprise software, with 20,000+ installs, open source code, and it's used by EFF/Thinkgeek/Harvard/etc. We have an army of real-world users building plugins and extensions. I've had a long time to innovate, analyze the impact of my API/design decisions, iterate, and repeat. Not once have I felt stymied by using controllers to render views (via Smarty) instead of invoking view implementations from controllers. If I was building an app where I needed to swap out drastically different rendering engines then of course having a view layer would probably be beneficial. But the trend lately has been bringing mobile and tablet browsers closer to the desktop web experience, and I've found it much less necessary to swap out the entire interface than to simply include a few CSS/jQuery tweaks for mobile vs desktop user agents.
Ah, thanks. I will switch the license to LGPL tonight.
Hm. I guess I didn't think of this as something worthy of the venerable services of GIThub. :)
The script is now published under the LGPL. 
I am also very interested. I am looking for a non-Java alternative to Subsonic. Please send me some git info, I would like to clone your code and see where you are at.
Will do. It might take a little while. I'm in the middle of painting my house and researching git practices.
please please please use guid or comb or newsequentialid() instead of auto-increment int/bigint's for pk/fk table relations. this is the main thing i do not like about yii
I see your point. Now move to Postgres :)
Guess I'd better stop using method chaining and one-liners.
I could never get some of the advanced theming things down in Drupal so eventually migrated away.
Have you run your output through an HTML validator? Sometimes FF will attempt to "fix" broken html and you end up with things out of order. (That being said, I don't see any problems with your screen caps). You could also grab the page via wget or curl -O and check the source to confirm your server side is correct. Good luck, different outputs in different browsers is never fun.
Looks the same to me. I still see the word "test" in both displays. The chrome and FF tools are going to display their rendered version of the dom while view source is going to show you the raw content delivered to the browser.
are you doing this? &lt;? echo include('header.phtml'); ?&gt; You do not need to use echo, include will automatically take care of it
It looks like something is going wrong in the &lt;title&gt; tags, the second title tag doesn't have the correct syntax highlighting in the source code screenshot...
if I had to guess I'd wager you're running a cache like APC which compiles the files the first go round and then doesn't look at them again. try restarting the webserver?
&gt; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; I would try spreading those out over multiple lines. **Edit:** Downvote? This is a basic sanity check -- looking at his HTML that's the only thing that pops out to me as unusual. There *shouldn't* be a problem with the way he has it but when debugging something like this, why make assumptions like that?
Why the downvote? This guy is right.
No, he's not - that's how Chrome displays it. Check reddit source.
Oh, you're right. First time I notice this, sorry!
His problem is that the "rendered version of the DOM" has the _entire_ &lt;head&gt; contents moved into the &lt;body&gt;. That shouldn't be happening, ever.
That is just something Chrome/maybe-Firebug-too does. It will also do this with &lt;/script&gt;.
It also does it with &lt;/script&gt; and surely a few more tags as well. It kills my OCPD.
If it were a webserver cache, the source code would match. If it's a cache issue, it would be a cache in Firebug/Chrome, which - as far as I'm aware - doesn't exist, because that would defeat the purpose of the software.
Ha! Funny they didn't think this through. (Although I'm sure they have an explanation for it)
Aha! You are correct sir. Was so busy being right I missed that.
If you can write it off as a loss, can you estimate the loss of sales by it being made widely available for download? I'm not sure if the IRS plays by RIAA's rules.
$i_name_my_variables_what_they_are
Turn on invisible characters in your code editor and make sure you don't have a non-breaking space or something
I haven't but it lacks a good *tutorial\** we started by following the basics on [Language Reference](http://www.php.net/manual/en/langref.php) and diving into the manual but it's too easy to get lost so I wanted to give him a more structured approach. \* [this](http://php.net/tut.php) is a) web-based and b) way too simplistic to be of any use
out of scope &gt; ## what you should know &gt; &gt; Before starting this tutorial it is important that you have a basic understanding and experience in the following: &gt; &gt; * HTML - Know the syntax and especially HTML Forms. &gt; * Basic programming knowledge - This isn't required, but if you have any traditional programming experience it will make learning PHP a great deal easier. 
Use https://gist.github.com/ instead - it's a pastebin at Github. It basically sets up an instant, no-mess miniature repository, with changelogs and everything, for one or a few files. You can either just paste anonymously, or paste it from your Github account. Either way, it's way better than straight pastebin for this kind of thing.
True, but I think you may be going about this backwards.
Start by using a proper doctype and see what happens, also try to close your markup properly: &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt; &lt;link rel="stylesheet" href="/css/style.css" type="text/css" media="screen" /&gt; ... ... &lt;/head&gt; 
I use Drupal 7 for all intents and purposes as a framework. It's core is a little outdated in that it doesn't really take advantage of new PHP object-oriented functionality but like the above commenter said, its render system/form API is very nice.
`include` returns `int (1)` on success if you don't `return` something from it yourself. I believe OP should be seeing 1's if that were the case.
Doctype won't matter in most cases for a problem like this. But, not opening and closing tags properly or not putting them in proper order/hierarchy could cause this. In fact I don't even know if browsers pay attention to doctype these days.
TinyVC anybody? It's not quite MVC (as per the name...) but it does the job nicely and integrates with CoughPHP for ORM :)
Top link: "read the manual"
Your problem is that one of the included php files has a newline following the final closing php tag. There are two solutions to your problem: * Do not use closing php tags at the end of your files. * Do not have any characters following the last closing php tag. The symptoms are easy to identify once you know what the [issue is](http://phpstarter.net/2009/01/omit-the-php-closing-tag/). The simple explanation is that anything outside of php tags will be written to the output stream. When you include a file that has a newline after the last closing php tag you will see that newline first in your output. The main symptoms are extraneous data being sent before the expected start of the document. If any of your includes try to set header data, you will receive this error: &gt; Warning: Cannot modify header information - headers already sent This isn't well documented in the php manual because it isn't really a bug. It is 100% expected behavior. The problem is that people often close the php tag with extra data after it and expect that not to be processed. I've had to find the source of this problem so many times that it hurts. It can be a real nuisance to find the right file if you are working with a system that has many included php files. 
That is awesome. I definitely have to check it out. Edit: That is beautiful. I have moved it to Gist.
From my experience this may or may not happen depending on your settings (not sure which ones though). I remember I had this happen to me when I switched from Dreamhost to Rackspace. On Rackspace I had full control over PHP and Apache and went with the default settings that came with Ubuntu 8.10. On Dreamhost it was a some install that Dreamhost applies to everyone. Both were PHP 5.2.
This should not be the case. I'm (temporarily) [hosting a zip file](http://megasouldrill.com/closing_tags_examples.zip) that has a few examples that should clearly illustrate the problem. These files should be run with the php interpreter from the command line. There are 4 examples and then some included files. The commands to run them are: * php simple.php * php simple_include.php * php complex_include.php * php solution.php These examples should make it clear what is happening (at least to me they do).
I think you got downvoted because this has absolutely no effect. You could have all the html in your entire document on one line, and it would have no effect. Whitespace in html is just that, ignored by both server and browser.
&gt; Do not use closing php tags at the end of your files. Call me old fashioned, but I hate this practice. There is no reason not to close your php tags on included files. You just need the tiniest bit of common sense to do it correctly. It should be second nature to Anyone who writes php at all.
I hate closing tags. As a developer who also had to support the product, you'd be surprised how people manage to insert newlines at the end of files (Sometimes it's the result of UNIX &lt;-&gt; Windows Line endings conversions gone wrong). It saved me (and the customers) a lot of trouble by just chopping off all closing tags.
I'm curious. Can you give any good reason to actually close your php tags? Other than being old fashioned. To me it's a convention from other languages that people apply to PHP where it makes no sense. The end of a file already closes PHP execution so you gain absolutely nothing by specifically marking it other than potential problems.
I checked that I wasn't doing this. I had one echo functionthatprints(); but nothing changed after I removed the echo.
I suspected this might be the case. In my normal include files I don't have any closing tags. I do, however, have view files that get included, and they containg stuff like &lt;title&gt;&lt;?php echo constant('TITLE'); ?&gt;&lt;/title&gt;. So in these files, I do have characters after closing tags. What happens is: index script checks with action is to be executed, and includes that action (let's say homepage.php). homepage.php then does some processing and whatever, and then includes homepage.phtml. index.php and homepage.php do not have closing tags, but homepage.phtml has them in inline snippets. So it's and include inside an include. But basically the files are always included at the end of the parent script. So nothing runs after the homepage.phtml has been included.
I set notepad++ to show all characters, and the only stuff besides markup and code are carriage returns+line feeds
see this is the problem, PHP is a general-purpose programming language: it can run standalone, it can run as a desktop application, it can run as CLI, I've even used it for web without involving HTML generation at all so I don't think HTML to be a prerequisite. I know 99% of the use cases of PHP are HTML generation but I'm teaching programming not web, we'll get to the web later.
ok would you be able to supply your source code for the page that's getting messed up? It may be a simplified version of how includes work, but basically picture it as when you use an include('file.ext'), it's the same as copy-pasting the contents of file.ext into the file where it is being included. So if you take the file with the includes and follow it top to bottom, substituting the code from the include lines, does it appear as a valid html structure the whole way through?
To test my hypothesis, fetch the webpage using wget or curl. This will bypass the browser and the modifications that it will make to the document before displaying it (firebug and developer tools show the modified version). Once the file has finished downloading to your computer, open it up in a hex editor. This will let you see exactly what characters are at the beginning of your output. Usually the closing tag issue will produce newlines or carriage returns (usually both) at the beginning of the file. The hex values of these are 0a and 0d though I forget which is which. I always have to go to [asciitable.com](http://asciitable.com) to verify. If you see any of those characters before your expected output, the there is likely a closing tag with a newline / carriage return following it in one of your included files.
Test 2
http://www.gosu.pl/debug/ xdebug is good times. Also, can you post what changes you made that caused the issue? 
Xdebug looks useful. I've seen it before but never used it. I'll try to incorporate that in next time around, but I can't exactly throw that onto a production machine. We made a lot of changes in this push, so I wouldn't be able to post them all. I'll run some diffs to see if anything stands out to me, but I still don't know why this wouldn't be showing up on our development environment.
Looks to me like the cause of the memory issue is in the exception class, which is invoked when calling parent::__construct(). 
I'm thinking it has to do with the debug_backtrace() call since that is the line that is referenced in the fatal error (line 26). As anyone who's ever used the Zend Framework, the classes are crazy nested, so that backtrace can get rather large. That being said, this memory limit wasn't hit on our development server and now that it is on the production server, I'm not sure how to get to the bottom of it. How can I trace the exception being thrown without using debug_backtrace()? Right now I'm going through all of the code changes to see if any new exceptions are thrown or if any changes were made around places that caught exceptions in the past, but so far I'm coming up empty handed.
Make sure your php.ini settings are the same between production and development. If you have a very large memory size in development, you might not be triggering the error.
ini's are the same. Only differences are paths and error display.
It might be mistake to assume that this method has anything to do with the problem in question. Just about every operation in PHP allocates memory -- the actual problem is that by the time you get to this line all the memory has already been allocated. That allocation could have happened anywhere before the exception was raised. You might want to look at the code that triggers this exception rather than the exception itself. Since you can't get any traces, that means manually searching the code for every instance of `throw MUS_Exception`. BTW, what is with the debug_backtrace() call anyway? Exceptions automatically capture a stack trace there is no need to do it again. 
Try passing debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS). That should reduce the debug_backtrace() memory usage a bit to possibly help you trace the originating call to the exeption.
Keep in mind, this will only work if the box is running the very latest version of PHP (5.3.6).
Thanks for the idea. I went through and put error notices just before various exceptions were thrown just to see what is being triggered and I found the culprit. I'm going to work on changing the code to not have to throw an exception there which should bandaid fix the problem. The reason I call debug_backtrace there is because Exception defines trace as a private variable. I output (what I feel is) much more useful information in my dump, but in order to do that I need access to the trace for manipulation. I wrote this a long time ago and in hindsight, wish I hadn't bothered. Thanks for the help!
Unfortunately this server is still on the 5.2 branch.
&gt; The reason I call debug_backtrace there is because Exception defines trace as a private variable. I assume you never noticed the public `getTrace()` method? I'm surprised you noticed the private trace variable since it's not documented. 
I'm not sure, but that sounds expensive.
*facepalm* I'll have to check tomorrow and see if that method works the way I need it to. If it does ... wow lol
Isn't that just for PCRE backtrack/recursion though? (PCRE = Perl Compatible Regular Expressions)
rotfl
Kind of. I json encode php arrays in one script that has all my DB calls and then decode them in another and they become objects in the process. I've always just worked with them as objects.
This is trolling right?
if I had a line of code for every time I've heard that.... I'd have a pretty bulky and redundant framework by now
Its a serious inquiry and nothing more. We have contracts drafted to protect us as well as anyone that decides to work with us. No one is looking to screw anyone over on this.
Thank you for this, going to start writing my own :-)
I'm not sure, but **that** sounds like premature optimization.
I can accept that.
Are you using Suhosin in production? Its either memory limit in php.ini or Suhosin causing this. 
Yeah, I didn't think that through. Fair enough!
Sorry to sound negative, but ones that know PHP and css very well either 1) Hold a job themselves. or 2) Are running their own company. or 3) Don't have a job and are looking for one that compensates them market price. You're not going to find one that will work for free or next to nothing or with promises of having a part of the company.
Nope. Although I sometimes cast objects to arrays for backwards compatibility with existing PHP code.
I would say carry on; you likely have far more pressing performance concerns than array vs. object conversion.
&gt;And for the record, casting arrays to objects is expensive... How expensive?
Yup and it works just fine, thank you.
I get where youre coming from. I guess my thing is I would be going on more than just words. I dont believe in words alone.
Casting something as an object (stdClass) creates a copy of that object. Like so: $a = array(1, 2, 3); $b = $a; // there is only one copy of the array in memory, until $b is altered $c = array(1, 2, 3); $d = (object)$c; // $c is implicitly copied. Now there are two objects in memory when only // one is ever referenced Note that casting something as a primitive will NOT create a copy. I believe, but am not sure, that casting as an array also leaves only one copy of the object.
Symfony! Symfony! Symfony! Symfony! .. okay, fine, I really like Symfony. The URL routing is all I've ever desired, Doctrine is wonderful, and it's all around just well built.
Is doctrine integrated into symphony?
Codeigniter. Real simple and the docs are great
In regards to OOP I can say reading about Design Patterns, object oriented design ([SOLID](http://en.wikipedia.org/wiki/Solid_\(object-oriented_design\)) and [GRASP](http://en.wikipedia.org/wiki/GRASP_\(object-oriented_design\))) would be the best starting point. Next thing up, reading source code from PHP 5.3 frameworks (lithium, symfony) where you can get acquainted with the latest PHP features (most obviously namespaces), as well as applied design patterns. And let's not forget, learning a different language always helps.
I'm thinking it's something in the process.php file. Once you send the form it's supposed to trigger that file and send you back a success/failure message. However, everytime I submit it goes to the process.php file and stays there, not redirecting me back to the original page. 
I'd recommend symfony as well, just that I'd choose Propel instead of Doctrine.
Most frameworks are database/ORM agnostic. The newest Kohana works with Doctrine very well. I HATE HATE HATE YAML (ironic, since I mention Doctrine) so I stay away from Symphony. To hook up doctrine to kohana you now make sure your boostrap.php has: 'doctrine' =&gt; MODPATH.'doctrine', // ORM 'model' =&gt; MODPATH.'..\model\classes', // ORM You create a modules\doctrine\config\databases.php with your db settings: return array( 'default' =&gt; array( 'benchmark' =&gt; TRUE, 'persistent' =&gt; FALSE, 'character_set' =&gt; 'utf8', 'table_prefix' =&gt; '', 'object' =&gt; TRUE, 'cache' =&gt; FALSE, 'escape' =&gt; TRUE, 'connection' =&gt; array ( 'type' =&gt; 'mysql', 'user' =&gt; 'dbuser', 'pass' =&gt; 'dbpass', 'host' =&gt; 'dbhost', 'port' =&gt; FALSE, 'socket' =&gt; FALSE, 'database' =&gt; 'dbname' ) ) ); Drop your doctrine install in modules\doctrine\classes\ Create modules\doctrine\init.php with something like: &lt;?php /* Doctrine integration */ require Kohana::find_file('classes', 'doctrine/Doctrine'); // this is that Doctrine install spl_autoload_register(array('Doctrine', 'autoload')); // Getting kohana configurations for doctrine $db = Kohana::config('modules\doctrine\database'); // this is that database config we made // initializing manager $manager = Doctrine_Manager::getInstance(); // we load our database connections into Doctrine_Manager // this loop allows us to use multiple connections later on foreach ($db as $connection_name =&gt; $db_values) { // first we must convert to dsn format $dsn = $db[$connection_name]['connection']['type'] . '://' . $db[$connection_name]['connection']['user'] . ':' . $db[$connection_name]['connection']['pass']. '@' . $db[$connection_name]['connection']['host'] . '/' . $db[$connection_name]['connection']['database']; Doctrine_Manager::connection($dsn, $connection_name); } // telling Doctrine where our models are located if ( is_dir(APPPATH.'..\model') ){ Doctrine::loadModels(APPPATH.'..\model\generated'); // may need to create this Doctrine::loadModels(APPPATH.'..\model'); } // (OPTIONAL) CONFIGURATION BELOW // this will allow us to use "mutators" $manager-&gt;setAttribute(Doctrine_Core::ATTR_AUTO_ACCESSOR_OVERRIDE, true ); // Automatically free queries $manager-&gt;setAttribute(Doctrine_Core::ATTR_AUTO_FREE_QUERY_OBJECTS, true ); // Enable validation //$manager-&gt;setAttribute(Doctrine::ATTR_VALIDATE, Doctrine::VALIDATE_ALL); // this sets all table columns to notnull and unsigned (for ints) by default $manager-&gt;setAttribute( Doctrine_Core::ATTR_DEFAULT_COLUMN_OPTIONS, array('notnull' =&gt; true, 'unsigned' =&gt; true) ); // set the default primary key to be named 'id', integer, 4 bytes $manager-&gt;setAttribute( Doctrine_Core::ATTR_DEFAULT_IDENTIFIER_OPTIONS, array('name' =&gt; 'id', 'type' =&gt; 'integer', 'length' =&gt; 4) ); Some of this may or may not apply. But your doctrine config is exactly what it says. Run this in some controller/view to have the classes generated. The stuff in generated will always be remade from the current schema, the other classes will be created if they dont exist and allow you to create your custom behaviors. Doctrine::generateModelsFromDb('model', array('default'), array('generateTableClasses' =&gt; true)); I throw together sites all the time with Kohana. YMMV
I don't usually use mail(), I use a framework for dealing with mail, but it might be the headers you have set if it gets that far. Instead of email@email.com, put your email there and above that put like echo 'here';die; and see if it says here when you submit your form, if it doesn't you haven't even reached that point. If you want to, PM your msn/gchat and I can help you over chat.
It's symfony not symphony.
 1) make sure you call session_start(); on the index.php file. 2) line 23 of the javascript is missing a comma at the end ',' 3) at the end of line 74 of the javascript should be a semi-colon ';' not a comma. 4) the form always fails because of this part: //validate message is not empty if(empty($message)){ $formok = false; $errors[] = "No has agregado un mensage"; } $message is never defined and therefore the validation always fails.
Recently migrated from symfony 1.x to symfony2 after developing commercially since January 2008 with 1.x. Also switched from Propel to Doctrine2, don't think I'll ever look back now. Developed 3 small apps to learn symfony2 which makes me love it more than anything :)
Thanks, Ill change that. 
pm'ing now. 
changing these things, now. thanks.
You don't need a coder, you need a co-founder. You need someone who (a) believes in you personally, (b) believes in your business, (c) believes in your revenue model, and (d) is willing to put their own money into the startup in return for a fair equity stake. You are not going to find a competent and willing coder who is going to work for free, and especially not for magical future payments. 
Im curious why you don't just up the memory limit? It's clear your using more memory then php is allocating, why not add a few megs to it and be done with the problem? 
I do this sometimes for functions that would return arrays. Short example, not a real use case: $addr = $user-&gt;shipping_address(); $zip = $addr['zip']; Would be nice if shipping_address returned an object $zip = $user-&gt;shipping_address()-&gt;zip; 
CodeIgniter is great for beginners. Not my favorite, but it was the first I learned and helped me get the hang of MVC architecture.
I do this sometimes when I just need to return a few values. But usually I already have a class for whatever is going to be returned, in which case I can skip the array. A quick benchmark for micro-optimization lovers: (I just threw in `md5()` to make the function do something.) &lt;?php class Reddit { public $foo; public $france; public $value; public $hash; } function return_as_array($i) { return array( 'foo' =&gt; 'bar', 'france' =&gt; 'bacon', 'value' =&gt; $i, 'hash' =&gt; md5($i) ); } function return_as_array_cast_to_object($i) { return (object)array( 'foo' =&gt; 'bar', 'france' =&gt; 'bacon', 'value' =&gt; $i, 'hash' =&gt; md5($i) ); } function return_as_real_object($i) { $obj = new Reddit; $obj-&gt;foo = 'bar'; $obj-&gt;france = 'bacon'; $obj-&gt;value = $i; $obj-&gt;hash = md5($i); return $obj; } $time = microtime(true); for ($i = 0; $i &lt; 100000; $i++) { $foobar = return_as_array($i); $reddit = $foobar['hash']; } echo microtime(true) - $time . "\n"; $time = microtime(true); for ($i = 0; $i &lt; 100000; $i++) { $foobar = return_as_array_cast_to_object($i); $reddit = $foobar-&gt;hash; } echo microtime(true) - $time . "\n"; $time = microtime(true); for ($i = 0; $i &lt; 100000; $i++) { $foobar = return_as_real_object($i); $reddit = $foobar-&gt;hash; } echo microtime(true) - $time . "\n"; Results in my Ubuntu 11.04 VM: 0.28138303756714 0.30978488922119 0.38508105278015 So whenever you cast an array to an object, you incur approx. 0.28 microseconds of overhead. But this is 0.76 microseconds less than using a real class and assigning properties one by one. The difference might be larger if you have a lot of members/properties, but you'll have other problems if you're routinely manipulate objects with more than a few dozen properties anyway. 
indirectly related: sometimes it's helpful to look at apache's processes via [mod_status](http://httpd.apache.org/docs/2.0/mod/mod_status.html) 
Because it's smarter to find the actual cause and lower memory usage than to just throw memory at it. From the error message you already see that the allowed memory size is a whopping 512 megabytes -- something a normal PHP script would never use unless it was handling several large image files or the like. Even if it was legitimate memory use, I wouldn't want my server to be overrun by PHP requests taking up over 512MB memory each. :P
I'd use [Symfony2](http://symfony.com) myself, as it integrates with Doctrine2 extremely well and I know a number of folks using it for RESTful applications. There's even a community-supported [RestBundle](https://github.com/FriendsOfSymfony/FOSRestBundle) to give you a head start, if you're so inclined. Doctrine2 makes data modeling quite simple: you can create simple PHP classes and add inline annotations (via doc blocks) to define your DB schema. If that's too high level, you can always use its underlying DBAL library (a thin wrapper around PDO) for interfacing with SQL. Also, just to be objective, I'd suggest taking a look at [FRAPI](http://getfrapi.com/). I've never used it, but its a framework designed exactly for creating RESTful web services. Likewise, you might consider looking at micro-frameworks ([Silex](http://silex-project.org/) is one based on Symfony2's components). Many are stripped down to do little more than route to a controller action, although some offer ORM functionality (Silex has an extension for Doctrine2). These would probably provide the shortest learning curve, provided you want to build up from a nearly-blank slate.
true at the end.
I recommend Kohana. its a highly scalable and simple framework, also it support restful webservices. you can take advantage of simple, inbuilt ORM. 
Yes, the includes are in the right order and the structure should be correct. I think I figured out where the bug comes from. I started including all my stuff from scratch and eventually I found that I get the mystery char(s) once the css is included, so there is something in my css-file, not php related. I'll include the source code if this issue persists, nothing really peculiar about it.
PHP is very fast at handling arrays, so I'd stick to those. However, arrays use copy-on-write, while objects are always passed by reference, so use what suits your needs.
alright, I did a wget and turns out there are four chars at the beginning of the file that apparently cause the content before &lt;html&gt; in hex they are EFBBBFEFBBBFEFBBBFEFBBBF. I think this comes from the css, as it the problem only manifests itself when I include the css-file. I'll continue debugging, but it can probably be concluded that php is not causing this error. The chars (BOMs perhaps) are causing the output to drop into the body somehow (even though the markup is correct)
Never casting, but I always using objects as array using [ArrayObject](http://www.php.net/manual/en/class.arrayobject.php). Btw, using a proper IDE will expand the *']* by itself, such as NetBeans.
Yeah, I currently develop and maintain for over 2 years and application in symfony 1.0 and Propel 1.2 and it is a pain. But I have a couple of 1.4 application I am working on and Propel 1.6 is full of awesomeness. You might just want to take a look at it, it has improved over the years in orders of great magnitude. When having to work with Propel 1.2-1.4 and the Criteria shit, I'd understand your decision, but now there is no reason to leave Propel behind any more :)
I'd love an invite. Pagoda@thepfaff.com should do the trick. Thanks op!
FRAPI looks like it might do the trick for me on this one.
My thinking time far outweighs my writing time when coding, so doing something like to save a couple of keystrokes isn't something I'd ever do.
Invitation sent :)
Don't need one, but why on earth would someone downvote this? Are they somehow against generosity? 
Thanks! Looks awesome.
Exactly what I was just thinking...
This is a good overview of basic OOP in PHP: http://net.tutsplus.com/tutorials/php/object-oriented-php-for-beginners/
Guys, just sent all the invitations out. I was trying to keep some for friends but thought what the heck, just sent out 7 and I still have one left. Anyone?
[Alloy](http://alloyframework.org/)
I strongly suggest picking up the book [Head First Design Patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_1?ie=UTF8&amp;qid=1310046177&amp;sr=8-1). The examples are in Java (but simple enough to do with no Java experience) and easily adaptable to PHP. It teaches best practices, design patterns, and coding principles and explains *why* they're good. Once you start thinking and coding in design patterns you will be able to learn Unit Testing. After you know how to write Unit Tests you can then write code by TDD (Test Driven Development). Edit: It's also imperative you know about [PSR-0](http://groups.google.com/group/php-standards/web/psr-0-final-proposal). It allows PHP to easily implement the SR (Single Responsibility) principal.
I was actually just looking for somethig like this! I'd love an invite! rick@recursivework.com is mine! Thanks a lot!
I also have 10 invites for Pagoda Box - pm me your email if anyone is interested. (I'm going to bed now but I'll send them out when I wake up!)
Just sent it :) Enjoy!
I am currently writing an article / howto on this subject as well. This will be featured on http://www.meukinc.nl
Thanks a lot! I'm excited to play with it.
Exactly. 512M is already "too much"
Using isset() or empty() there would keep the notice from happening. !empty($test['surname']) ?: 'No surname'; 
That would be bad practise. I guess you can turn off error messages selectively if you really want to do this.
That would equal to print true/false : "No surname"; but I want to do print isset($test['surname']) ? $test['surname'] : "No surname";
It works for Javascript (with undefined, not null). Why not in PHP?
I'd definitely help where I can, is the git repo public?
I would recommended Pro PHP. It covers a bunch of design patterns and advanced PHP topics. That book made me a much better developer.
http://www.surveymonkey.com/
do you wanna use it for $_GET or $_POST? Then make a function that analyzes all those vars and if they aren't set make it null or false, then use the shortcut. However, I think you are making it way more complicated than it is just for the sake of using the shortcut.
Really? What happens if you run js code through JSLint without var declarations? I'm quite sure you get warnings too.
I think the notices stop getting thrown if you cast the array to an object.
On the same logic as jaimeeee, create a class/function that handles the query part of your requests. Make that function (you can use the '__get' magic method for a class) return an empty value. You can take it a step further and tie it to a validation class (optional so as to reduce tight coupling) so you can more efficiently sanitize inputs. Make all your references to POST or GET variables through that class. I was having the same problem until I saw your post and had that epiphany and so thank you very much! BONUS LINK: http://flourishlib.com/docs/fRequest My god, I love flourish...
Please PM me some more info.
&gt; Since the arrival of Google+, I wanted to get my pictures (2 years worth of simple snaps) from twitpic, and import them into Google+. Not sure that's a good idea... http://photofocus.com/2011/07/06/google-plus-read-the-fine-print-before-you-sign-up/ &gt; By submitting, posting or displaying the content you give Google a perpetual, irrevocable, worldwide, royalty-free, and non-exclusive license to reproduce, adapt, modify, translate, publish, publicly perform, publicly display and distribute any Content which you submit, post or display on or through, the Services.
This is funny, you deserve an upvote. :)
I remember being bugged by this many years ago. I played around with the PHP source and made a construct called issetelse. You could run issetelse($some_variable, "alternative"); and it was equivalent to (isset($some_variable) ? $some_variable : "alternative"). I also played with isset depth, allowing you to use isset() on deep nests of non-existing arrays without throwing warnings. (e.g. calling isset($test['key']) when $test doesn't exist wouldn't throw an error like it normally does). It was a fun learning experience, but ultimately I've avoided that sort of shorthand except for when inside templates. If you're going to be anal enough to write code that never throws any warnings, then it's safer to avoid shorthand in my opinion.
Thanks man! I'm printing those articles to carry with me. I think with this I'll be busy for a while :D
I bill $75/hr for Wordpress work, which is in the same ballpark as all of the developers I've talked to. The cheapest developer I personally would allow anywhere near something I have in production that I know bills $60/hr for Wordpress and the most expensive bills $125/hr. Everyone else is between there. After looking at Gigpress (sidenote: I feel like someone violently shit into my text editor - it's code like this that GETS SOLD that makes Wordpress so expensive as a platform) it looks like a 5-20 hour job, depending on the complexity of the specifics, how nice of an admin panel you want, etc. etc.
It's used for cases like this: function getPosts(arg1, numPosts) { // calling getPosts with one argument will result in numPosts being 10 numPosts = numPosts || 10 } getPosts("something") // numPosts == 10 It's another way of standard arguments (but it can be used anywhere).
Have you made sure you aren't hitting recursion somewhere in your code? Some functions don't bother checking for recursion (like var_export) and will happily eat up all your memory in the right conditions (passing $GLOBALS, deep self-referencing objects, etc). 512MB is a massive amount of memory for a PHP script to be using.
Hey man, thanks a lot! I'm looking forward to buy this book, it has nice reviews.
But if you do something like... var numPosts; ...it evaluates to false and is still given the default value in the function, right?
This was actually the subject of a fairly long [discussion on the php internals list](http://markmail.org/message/7wq6wn3zfjbpdjsf); I forget the consensus, if one was even reached, but your gripe isn't without merit.
That's the silliest use of casting there is (doing it solely for the syntactical "advantage").
I present the power of a function: function array_cautious_print($array, $key, $default) { print isset($array[$key]) ? $array[$key] : $default; } $test = array('name' =&gt; "John"); array_cautious_print($test, 'surname', 'No Surname'); Or, implement ArrayAccess and have it treat index access how you please. You could even implement __invoke to take a $key and $default so then you could merely do: print $test('surname', 'No surname'); So many ways to overcome firstworldproblems with firstclassabstractions. *edited to add php looking name for function.
Twitpic's fine print: http://www.ianvisits.co.uk/blog/2011/05/10/twitpic-changes-its-terms-of-service/ I think the terms, and the fact that twitpic is owned by some big corporation is more even worrying.
TIL about the ?: shortcut. That's pretty nifty, but this issue makes it annoying.
I'm too lazy to go looking for it but I'm pretty sure they redid or explained their ToS right after the public outcry about it and said they don't own your pics. Google, on the other hand...
Are you SURE there is no existing library or extension that can do it for you already? If not you can custom write your own extension in C http://devzone.zend.com/article/1021 also this article on topic of mathematical programming with php http://conf.phpquebec.com/slides/2005/Mathematical_Programming_with_PHP.pdf 
Not worth it to me. On my own time, I could certainly implement the additional features up to "Platinum" and come out ahead in just 4 years. And that's *if* I"m the only end-user, ever.
It works in most evaluated languages, really. For this simple reason alone, I find '?:' to be one of the most useless additions to the language that they've ever made.
By which you mean "all the other languages did it right years beforehand, so PHP had to go and fuck it up"?
We actually wrote a [blog post](http://blog.twitpic.com/2011/05/your-content-your-copyrights/) explaining that your pictures belong to you. And we aren't owned by some big corporation, in fact, we're made up of only 7 people.
Thanks, that pdf was really interesting. I'm using the JAMA libraries in Java for this kind of stuff, unfortunately its still missing a fair amount of stuff I'd use, but I'd be okay with coding that up myself. Most of the leg work is done and it appears Eingenvalue Decompositions (QR) are done...unfortunately I'm still worried about how slow it'll be with PHP. As I say, I do know a little C but I'd have a strong preference for Java if its all possible...do you have any idea about this?
You can use the php [exec](http://php.net/manual/en/function.exec.php) or [system](http://php.net/manual/en/function.system.php) functions.
http://rwatsh.blogspot.com/2007/03/integrating-java-and-php-web-services.html http://php-java-bridge.sourceforge.net/pjb/ 
I've thought about using these but wasn't sure if its the best solution...seems a bit crude. Thanks though! I'll have a go with this if there's not a more elegant solution :)
There's always the error suppression character '@'... $test = array('name' =&gt; "John"); print @$test['surname'] ?: "No surname"; Though imho, it's still always better to be safe and verbose and use `@` sparingly... print isset($test['surname']) ? $test['surname'] : "No surname"; Or... $test = array('name' =&gt; "John", 'surname' =&gt; null); As an aside, which side of this never ending argument do you prefer to take: permitting undefined vars without PHP complaining, or PHP catching use of undefined vars? Seems PHP just can't make everyone happy with this one.
You can execute the program and pipe the output of that into a php script.. within php: $fp = fopen('php://stdin','r'); $str = fread($fp);
You'd instead get 'notice: undefined property'
I have a custom class for $_GET and $_POST, so I don't get notices and secure the values automatically. My problem is that I don't want to use a custom class everytime I want to use the ternary shortcut, in any part of the code. I want to have it natively. FML.
I haven't tried JSLint, but in a browser you can have var a = {b: 1, c: 2}; alert(a.d); and it will be `undefined` and not show any error. In PHP I have to check that every array index exists beforehand.
Completely agree. I used to have many custom shortcuts, but as the time passed I decided to avoid using them. I realized that I was adding so many custom functions that I was no longer using PHP "properly", as most of the logical operations were taking place in my own functions. Now I prefer to have more readable and standard code.
I tend to use the last option along with `array_replace_recursive()`, but I really, really wish I could use the ternary shortcut. I mean, it's so fancy and new :( I agree that PHP throwing notices on nonexisting vars is useful for debugging, and haven't really thought about the implication of chaning this behaviour. But damn it is annoying that such a nice addition is rendered (nearly) useless...
They propose an interesting solution, where the first var is checked for its existance along with its value, so no notices are thrown when working with undefined vars/array indexes. Definitely what I would need!
If you can, my preference would be to do it as a PHP extension. I've done this before for mathematical output, and it's not horrible. If you can find an existing library with a C API that does what you need, creating a php extension to interface with it is fairly trivial. If that's not an option, my next solution would be to write something in whatever language and make it available to PHP through a REST interface or something. Will depend on your platform, but essentially a high performance server that can quickly respond to requests from your PHP app. This would be best if you essentially need to offload a lot of processing with little input (for example, I have these two values, now do all the calculations and return me an answer). You could do all kinds of things to power the API, from a Ruby/Sinatra type app that handles requests and passes them to the java environment, etc. Finally in last place, I'd just fork and do a exec on the binary. It works. It's ugly, but you do what you gotta do sometimes. The first option would be my strong preference. The latter is workable but could be difficult depending on the input/output needs and the load the app may experience. The last, though somewhat ghetto, would most likely be the simplest way to go though...
QuietArray class: &lt;?php class QuietArray Extends ArrayObject{ public function offsetGet($i){ if($this-&gt;offsetExists($i)) return parent::offsetGet($i); return NULL; } } use QuietArray as Quar; $quar = new Quar(array( 0 =&gt; true, 1 =&gt; true, 'test' =&gt; true )); var_dump( $quar[0], $quar[1], $quar['test'], $quar['undefined'] ); If you must thank me do it with money.
Be very very careful if you are using any user supplied input in the exec( ) 
It only gets inputted IDs from MySQL so its safe :)
This [ifsetor RFC](https://wiki.php.net/rfc/ifsetor) sums up the situation, although it's from 2008.
If you don't like yml, you are free to configure in xml or using php annotations.
Gearman is waaaay overkill for this. If you're focus is on doing this as quickly as possible, do this: your first request loop, go through the pagination and pull down all the photo id's. Then, in a second "loop" setup multiple curl instances and use [curl_mutli_* functions](http://www.php.net/manual/en/function.curl-multi-init.php) to fetch them all at once. Loop through the results and get on with life. Of course, that's semi complicated to setup, compared to just building up the list of photo id's and then doing a simple loop with `file_get_contents`, or even `copy($url, $localPath)`. The only difference being the time it takes. And, honestly, focusing on how long this script takes is rather silly -- it's not like it is a business critical process, and you probably won't even run it more than once or twice. Edit: To my point, I have a script that does some page scraping -- using the curl_multi setup, I can pull down ~375 pages in about 18 second, parse them using DomDocument/Xpath in about 2 seconds, and insert the resulting 7800 records into MySQL in 7 seconds. [2011-07-06 23:50:09] Fetching all pages... [2011-07-06 23:50:23] ...done [2011-07-06 23:50:23] Parsing... [2011-07-06 23:50:25] ...done [2011-07-06 23:50:25] Updating DB [2011-07-06 23:50:33] Inserted total 7808 
You should look into gearman for this, it's pretty much made exactly for cases like this.
AH, I figured there was an RFC but I failed to locate it with my brief search; thanks for finding it.
Consider, if you would, what I consider to be a far more elegant solution to problems like this. Solutions where some php script needs access to a compiled output usually involves, exec'ing the executable or possibly just dropping a file into a directory that the executable is watching and having the php sleep until the output is created. Both methods have upsides and downsides but are still rather forced. What i would do is, if you are creating the compiled program or have access to its source, code in some sort of network interface. What I am referring to is a lot like soap services or REST services. In fact, i've done a couple soap services like this before and they turned out really well. PHP has some excellent facilities for dealing with soap services and I've always been a fan of curl. I do not think setting up a small web interface in C and accepting posts from a curl request and returning a json encoded object would be very difficult. I also think that this method would prove to be the most reliable and easiest to manage. Happy Hunting.
I've never considered writing my own extension. I have a few uses such as accessing an older tibco rendezvous data bus that would be handy. Are there any books or resources that go into more detail on the subject?
So I've been experimenting a bit. I have a few restrictions which are causing me some grief. Effectively I'm a poor sucker and don't have direct access to my production server- I only have cPanel access, no direct terminal stuff. So I tried to do the exec thing running "java -jar /home/~blah/test.java" and nothing happens, ditto with passthru. exec('whoami') and exec('ls') work fine...so I dunno. All 777. I can't install the Java/PHP bridge thing either. So...given those restrictions do you think this is at all possible? I know how I'd do this if I had direct access (my ubuntu server is my testing server) but production is...well I can't access it properly :( Any ideas? Or do I just need to spend more to be able to do this?
Propel's future (beyond 1.6) seems a bit uncertain, based on [this blog post](http://propel.posterous.com/propel-needs-a-new-leader-do-you-want-to-take) from François. For a while over the last year, I recall some discussion that a future version of Propel would be built atop Doctrine2 with an added ActiveRecord interface. Not sure what became of that.
I see what you're saying... I just think this looks so much better when I'm stitching together HTML pages (yeah I've used smarty before): &lt;div class="row"&gt; &lt;a href="&lt;?=$product-&gt;url?&gt;"&gt;&lt;?=$product-&gt;name?&gt;&lt;/a&gt; &lt;img src="&lt;?=$product-&gt;image?&gt;" /&gt; &lt;/div&gt; vs this, which doesn't look as clean to me &lt;div class="row"&gt; &lt;a href="&lt;?=$product['url']?&gt;"&gt;&lt;?=$product['name']?&gt;&lt;/a&gt; &lt;img src="&lt;?=$product['image']?&gt;" /&gt; &lt;/div&gt;
yeah.... that isnt going to work... nope.. not at all... i have never, ever, seen a sharaed host allow you to exec anything. It is a MAJOR security risk, and... yeah no. You need a vps or dedicated server for that. period.
It isn't integrated, as much as it is easily available if you choose to use it. If you want it, it may as well be 'integrated'. If you don't, no worries.
I emailed them and they told me the same thing. Borrowing a friend's dedicated (well he's giving me a bit of space and setting up the parts I need for me) :) I'll be nifty and code in a network interface (its my application I'm making) and hopefully it'll work great. Thanks for the advice :)
I am aware on the ongoing talk about the direction of Propel. Whoever decides to take the leadership has total control of Propel's direction. As for your second remark, it all started with a github repo named Propel2 by the original author of Propel, from which I expect near to nothing as good as the current incarnation of Propel. Propel is fine as it is now, it even has a bundle for symfony2, although I must admit I didn't have time to take symfony2 for a ride yet. François did a great job to turn around the project, from an imminent failure to the great product it is today. If a new leader will emerge, and will continue development of Propel, at least as half of what François did, then I say Propel has still very much to offer.
* [imagettfbbox](http://www.php.net/manual/en/function.imagettfbbox.php) — Give the bounding box of a text using TrueType fonts * [imagefontwidth](http://fr.php.net/manual/en/function.imagefontwidth.php) — Get font width $width = imagefontwidth($font) * strlen($string);
I was using propelbundle (which is pretty much the latest propel for symfony2), but with it breaking constantly due to symfony2 being in heavy development at that point I switched. Like jmikola mentioned, the future of propel is kinda vague but I still like propel and their criterias :).
Depends on what CC. I absolutely LOVE my community college. I keep praying they turn it into a 4 year, but they've been saying it for 20 years and for 20 years it hasn't happened. Also depends on what type of classes you're taking. Techier classes have better students in general, but obviously not always.
What version of PHP are you using that `isset()` has a depth limit? $ php -a Interactive shell php &gt; var_dump(isset($foo['bar'])); bool(false) php &gt; var_dump(isset($foo['bar']['baz'])); bool(false)
&gt; The code is... interesting. It sucks?
If I worked with you and saw you committing code that did this, I'd call you out on it and ask you not to do it any more.
Guys, quick someone look through the documentation for me...
Link? Hard to find using just my phone.
However, if your SQL got hacked somehow, you are basically opening up the entire system to get rooted.
Looks cool. Consider making the video on front page larger, its hard to see.
this. Or just be able to trial the product without signing up.
The first option here is fairly reliable. I've had to do the same thing in the past and this worked out best: Start at your smallest font size (eg 9px) and then increase until imagettfbbox gives you the best match. I'm confused by the second option here, does it account for the fact different characters have different widths?
A couple points. 1. Very clever idea. 2. "Ducking" on the audio - please use it. Or just turn the music volume down - it's way too loud relative to the voice over. More voice (more words, not volume) may help as well.
It's hard to judge your backend skills without seeing the actual code. As for the frontend - you need some header+footer for the subpages, they look out of place :(
If your salary &gt; my salary I'd be like... okay.
Yeah, smashing potential users in the face with a demand that they sign up on the very first page they see isn't the best way of getting them to actually sign up. There are some important questions that you need to answer for people on your landing page, such as "Why am I here?", "What the hell is this?", "What's so great about this anyway?", and "Why should I give yet another website my email address?". Doing this in a nice-looking and concise way is a difficult skill and one that I definitely don't think I have developed enough personally. I've always thought that [these guys](http://litmus.com/) do a pretty good job of it though (not a shill).
Haha, it's probably not! I'm just scarred from my time working with quirky code left behind by an ex-colleague who was so argumentative that nobody would fight him over his random dogmas. For example, the dude hated the concept of templates, and instead of making his case to the rest of us on the team he just went ahead and wrote thousands of lines of view-layer code in his own idiosyncratic invented style. Now we're left with about a fifth of our 'template' files not containing anything remotely resembling HTML, but rather hundreds of lines of plain PHP string manipulation code that mix business logic, controller logic, and display logic, and gradually and painstakingly manicure bits into HTML output. Kind of left me with a tendency to overreact to anything remotely quirky looking in the way people code, sorry!
Aye PM me some more details as well, I may be interested in contributing to this.
To put it nicely, yes.
http://www.jamit.com/
First of all, this is a nice idea, and I wish you good luck with your PHP skills :) &gt; The Password field can not exceed 12 characters in length Why? These arbitrary limitations are frustrating and detrimental to security. **Edit:** Also, I broke the site. I registered as "&lt;plaintext&gt;" and [this is all I get on the main page](http://dl.dropbox.com/u/560089/doodle.PNG). This HTML injection would allow me to compromise other users' accounts. You need to do [htmlspecialchars()](http://php.net/manual/en/function.htmlspecialchars.php) when displaying anything that comes out of the database. As for stuff that goes into the database, I hope you're using either [mysql_real_escape_string()](http://php.net/manual/en/function.mysql-real-escape-string.php) or [prepared statements](http://php.net/manual/en/mysqli.prepare.php). **Edit:** Chrome's console is throwing this at me, you'll want to check it out: &gt; Unsafe JavaScript attempt to access frame with URL http://acrodoodle.com/beta/main/login from frame with URL http://www.youtube.com/embed/2y3U2-atnwA. Domains, protocols and ports must match. **Edit:** Maybe I'm nitpicking, but here's an UX concern: in the registration form, hitting the tab key after completing the email field focuses on the submit button - it should naturally focus on the captcha. **Edit:** [I shouldn't be able to register when logged in](http://dl.dropbox.com/u/560089/doublereg.PNG) (also double header).
&gt; does it account for the fact different characters have different widths? Nope, but it'll get you roughly there with ~95% accuracy.
Woops, I think I meant array_key_exists(), it's been a long time. 
FYI, /r/PHP is not the place to showcase your app. If you want us to critique your **`code`** or your application architecture, then post the code and we can do that, but there is nothing strictly "PHP" about your website. Just because a site was made with PHP doesn't mean that it should be posted here. And while it may have been a good learning project, I think the idea is pretty bad. That's just my opinion, but I don't see anyone actually _using_ it.
r/webdev will be the right place to showcase this site I believe.
Haha, thanks for the kind words man! It's been a lifelong dream of mine to have my code described as a "violent shit". Dream fulfilled!
I currently use [FPDF](http://www.fpdf.org/). It's pretty flexible and easy to deploy as an external library with frameworks. I have never used tcpdf, so I actually don't know how good it is.
The best solution I have found which will represent HTML output as a PDF is [wkhtmltopdf](http://code.google.com/p/wkhtmltopdf/). I use exec() to execute wkhtmltopdf on a PHP script which already outputs as HTML. Something like this: $inputUrl = 'http://somesite.com/some_script.php'; // URL to convert to PDF $outputPdfTmp = '/tmp/output.pdf'; // Temporary PDF output location (must be writable to web server) $outputFileName = 'the_filename_to_download.pdf'; // File name to use for download // Command to generate PDF based on HTML output of a URL $command = '/path/to/wkhtmltopdf ' . $inputUrl . ' -t --footer-right "Page [page]/[toPage]" ' . $outputPdfTmp . ' 2&gt;&amp;1'; // Execute the command $output = array(); $return = ''; exec($command, $output, $return); if($return !== 0) die('The command execution failed.'); // Set headers for PDF download header('Content-type: application/pdf'); header('Content-disposition: attachment; filename=' . $outputFileName); // Echo temp PDF output contents readfile($outputPdfTmp); // Delete temp PDF output unlink($outputPdfTmp); Edit: added some comments
thanks, and will do.
thank you!
I will give that a try, thanks.
Don't worry about it, and feel free to send me an orangered if you need PHP help :)
Ya this needs to be done somehow. Thanks.
Do not use TCPDF. It produces superior results but getting there is tedious. Use [DomPDF](http://code.google.com/p/dompdf/) instead.
I've tried a few PDF classes and generators that are pure PHP, but in the end, I'm most happy with wkhtmltopdf. Just build your HTML and send it over. Works great every time, with excellent rendering of form elements. Edit: Even better, I've used it in C# and Ruby apps as well, on Linux and Windows machines.
I just call it like I see it. No offense to you personally or anything, but Gigpress is horrible.
I'm currently using PDFTK. I'm not exactly sure how well it is to design custom forms at will. The way I'm using right now is to create a PDF with FDF fields in it. The PDF stays blank, I generate an FDF file and then this will merge them together with the fields in the PDF. You CAN rely on Adobe Reader to merge these for you but we can't require every user to have Adobe (or even be the default especially if somebody is using Chrome). That being said, this is a little more useful for inserting data into PDF's that are already created, not creating the entire thing on the fly. Edit: The corresponding PHP class: https://github.com/andrewheiss/pdftk-php
Came here to say this.
I'm quite pleased with how easy FPDF is to work with. We used it to build a certificate creator for an online learning program. Worked like a charm.
This looks really nice, does it bundle webkit into the binary itself, or do you have to install webkit separately when using it on linux/freebsd? [They have a ready to use PHP class on the site](http://code.google.com/p/wkhtmltopdf/wiki/IntegrationWithPhp).
The best option I have found is [DocRaptor](http://docraptor.com). You send it HTML and it gives back a PDF. It's a for-cost service, but it does have a TEST mode that is free. It is a webservice that implements PrinceXML, which is both costly (last time I checked $3800) and difficult to set up. I have yet to find anything even close to as good as this is.
That would actually be 12 characters because the hex char F == 1111 in binary. That said, this is rather odd. Have you made further progress identifying the source of the problem? I'm very curious to know what's going on.
look for your include_path in the php.ini
Cant upvote this one enough. Laying out HTML is infinitely more flexible, and allows you to templatize your PDF's. Create a template system, or use Smarty (or something), then you can lay the layout in the hands of designers without having to jack w/ Code.
Well, after I converted every included file to utf-8 without BOM, all the random invisible characters disappeared from the HTML output. As to why the meta and title jumped into the body tag earlier... I have no idea. I usually get UTF-8 (with BOM) to work even with files that render output, but for some reason every once in a while I need to set those files to utf8 w/o bom. And as to the number of characters, maybe they were multibyte unicode characters? As I only saw four "dots" (that's what they were displayed as in the texteditor)
FPDF is probably the simplest out there. See if it does what you need. http://www.fpdf.org/
you are missing a slash, also looks like your php.ini is broken, it should be include_path and not include
I used to like Doctrine's YML implementation, but for 2.x it's been easier to dev. with annotations. 
Well, it really depends on how it's going to be used and how you want to maintain your code. I like to encapsulate most of these kinds of things so that you can cleanly just make a `Slideshow` object without knowing exactly how it retrieves the data. Let's say in the future that you wanted to use something aside from MySQL. You would have to find every instance of creating a `Slideshow` and change all of the code before it so that your object would be able to be created with the proper data. Not good, and not fun. We still have the problem of needing to make calls for each of the `Slideshow` objects which the difference between 1 and 10 may not be noticeable but let's pretend we're talking about a larger difference say 1 vs. 1000 individual MySQL calls. For each `Slideshow` object I'm assuming that you are going to grab a number of pictures. You can apply this same idea to the slideshows. I'm hoping anyway that you aren't just going to find every picture you want and create a `Picture` object which in turn would do a MySQL call for each photo. You're probably either storing an array of pictures or creating a picture object with the data you collect all at once. Taking this the other way, you could create a `Gallery` object which holds multiple `Slideshow`s. You would take in the arguments as an array, or a range, however you would want to do it and query for all of this data at the same time as you would pictures to a slideshow. You would then pass that data you got from the query to the `Slideshow` constructor rather than an ID. Now if you wanted to only create one slideshow you can do that, and if you need to change from mysql you would only have to edit a few lines of code. Again, there are many ways to do the same thing. Some depends on preference, and a lot really depends on how you're going to be using it. If you're only going to creating a few Slideshows at a time it's not really something to split hairs about. I'm sure that lots of different people will do this different ways, I'm just putting in my $.02 of how I could see myself possibly solving it. I would also love to hear some other ideas or modifications!
Thanks for the response! I'll give that a try! (Creating a Gallery class to encompass 1 or more slideshows.)
I have very little experience with PHP frameworks, but this article by Rasmus Lerdorf appeals to my spartan side and might be relevant to the conversation: http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html It describes a simple MVC structured app which I have used as the basis for my amateur PHP projects. 
i use dompdf to build one page at a time and PDFTK to join the pdfs created on the server. this way i can create the page in HTML and CSS 
I'd recommend encapsulating it. As mentioned in the PHP documentation for mysql_connect, multiple connections with the same credentials won't reconnect, so no giant performance loss.
No, you don't want to create your database layer directly within your class. * Use PDO, that way you can build an **object** outside of your class and inject it. * Now you can mock that object in your unit tests. * Also, now you can run queries within your classes without being tied to a specific database AND you can still unit and functional test them. **isometriks** has handled your other questions.
The problem with doing $slideshow = new Slideshow($id); Is that what happens when you want to load a slideshow from something else? XML file, CSV file, different database. Now you have to edit the slideshow class. The way OOP purists would say to do it would be to create a slideshow reader class for each data source type and pass that to the slideshow. // Base slideshowreader that all readers must extend abstract class SlideshowReader { function getSlideShowData(); } // create on of these for every data source class XMLSlideshowReader extends SlideShowReader { function getSlideShowData() { //... } } class Slideshow { // the slideshow constructor takes a reader object construct( SlideShowReader $reader ) { // All readers have a function to get the slideshow data, because they extend SlideshowReader $this-&gt;data = $reader-&gt;getSlideshowData(); } } $slideshow = new Slideshow( new XMLSlideshowReader( 'http://www.alsdfj.com/slideshow.xml' ) ); $slideshow = new Slideshow( new CSVSlideshowReader( 'http://www.alsdfj.com/slideshow.csv' ) ); $slideshow = new Slideshow( new PDOSlideshowReader( $dsn, $user, $pw ) ); Now if you wanted to load a slideshow via JSON you would only need to create a JSONSlideshowReader and pass that to a slideshow constructor.
I came here to suggest this. It's certainly the easiest way to get good, consistent results, and if you want to do more with it, there's a PHP class on the site that will give you more control.
Many developers I know who only know PHP, including myself, describe a similar situation... we don't "get" objects. We simply see them as well organized functions. Then when we want to get serious about learning about them we read a good book. I recommend object oriented php. Read through that... soon you'll get your "aha!" moment like all of us do and everything will click in your head and you'll suddenly realize the usefulness of objects.
I used to have a blog class which extended an sql class i had written, now I use cakePHP which uses the MVC (model-view-controller) model. Still not gotten into it, since the documentation feels like they don't explain that much (I need to learn more about authorization which is quite unclear in the documentation and such).
Think about what your website does and how it is intended to be used. Generally, you can cover most things with a class for a single object and a class for a collection of said objects. There are other uses for objects such as routers and helpers. Applying OOP to the blog example, a blog class is a good idea because you are going to be working with blogs (as an item, or "thing") a lot. You will be loading them by url and/or by id, you will also need to activate and deactivate them, maybe you even have an editors notification e-mail when a comment or new blog is posted. Objects are also idea for encapsulation and abstraction. If you have a blog object and you give it a "save" method, you can put all the SQL in there. This means you don't have to write the SQL every time you want to save a blog and anyone in the future that might work with your code does not need to know how and what it does when saving, they only need to know to call the save method. Then, for example, say you decide you need to notify someone by e-mail when a blog is created - you add it in the save method and now everywhere a blog is saved, it also performs those additional actions regardless from where it's called. Validation is also a good thing to have as part of the object - it saves having to write the validation every time and again, not everyone needs to know what the validation does, only whether it passed or not. e.g. try { $blog = new Blog(); $blog-&gt;setTitle(''); $blog-&gt;setContent('My first blog post.'); $blog-&gt;save(); } catch (DatabaseException $e) { // Probably don't want the user to see this as it's potentially unsafe // To be honest this type of exception would be better handled within the blog class and return a generic 'database error, please try again' but I think this gives a good illustration of the possibilities error_log($e-&gt;getMessage()); exit('An unknown error occured, please press back in your browser and try again.'); } catch (InvalidArgumentException $e) { // Missing, or incorrect title, notify user echo 'Error: ' . $e-&gt;getMessage(); // Error: Missing blog title } A good application is encapsulated and abstracted in these ways so that programmers do not need to know how an object is saved or what goes on "beneath the surface" when you call a method. They only need to know what a method returns and how it can be changed by the arguments passed to it. This lets them concentrate on higher level features and business logic.
In this solution what if I wanted to load multiple slideshows at once? Like the most recent 5 slideshows? Would there be a better way than: $slideshows[] = new Slideshow( new JSONSlideshowReader('json.php?limit=0,1')); $slideshows[] = new Slideshow( new JSONSlideshowReader('json.php?limit=1,1')); $slideshows[] = new Slideshow( new JSONSlideshowReader('json.php?limit=2,1')); $slideshows[] = new Slideshow( new JSONSlideshowReader('json.php?limit=3,1')); $slideshows[] = new Slideshow( new JSONSlideshowReader('json.php?limit=4,1')); Edit: formatting
Did they have single post objects carrying methods and properties meant only for blogs? One of the points of objects is to keep properties and methods within the context where they make sense. That way you can't, for example, call a get_category_posts method outside a proper blog object and get unexpected results.
Having a single 'blog' class to model posts, categories and tags sounds like a mess to me. Blogs are composed of posts. Categories and tags aggregate posts. I'd at least have a 'Blog' class, a 'Category' class and a 'Post' class. The Blog class would contain things like the name of a blog. The Post class would contain the title and body of a post. A 'Category' or 'Tag' class would contain the name of the category or tag. Getting lists of posts, or categories or whatever, is a different concern from modelling the individual entities themselves. Some would argue that it's worth creating separate classes for it. At the very least, the logic for fetching lists of posts should be in the Post class, and definitely not in a Blog class. Edit: the basic idea is that if you're looking to change some aspect of the way - for example - categories behave, you shouldn't have to poke around some humungous Blog class, because it should be neatly encapsulated in a Category class with a stable API that other classes can continue to use without modification.
My personal preference it to keep Slideshow as a lightweight transport object (basically just a big block of getter/setter methods). I then keep a separate class (e.g. SlideshowMgr) to do factory methods, crud, and business logic stuff. For example: $oDbConn = mysql_connect(...); $oSlideshowMgr = new SlideshowMgr($oDbConn); $oSlidehow = SlideshowMgr-&gt;Get($id); kind of related, but I usually use a DB library like adodb and end up writing my own wrapper class for the database connection and connection factory. 
An analogy: // You don't care how the cucumber got to the store and in what ways it has been 'treated' in order for it to stay fresh longer, you only need to know that you are able to buy them $cucumber = new Cucumber(); $cucumber-&gt;setSize('large'); // You don't need to know how to build a basket (i.e. mine iron ore, refine it, produce an alloy using it, shape the alloy and weld it together), just that it's convenient for storing things in and how to store things in the basket $basket = new Basket(); $basket-&gt;addItem($cucumber, 2); // Lets add 2 cucumbers! // For arguments sake, each cucumber costs 0.20 echo $basket-&gt;getTotal(); // Prints 0.40 The idea is that things are going on that you, at your level, simply do not need to know about. So we use objects to encapsulate and abstract the complexities away.
But in that case, it means that if want the single view of a post I need to create a new blog object to get the blog's name and then a post object to fetch post's data, right? What about extending blog's class to create the post class?
I'm have been learning Objective-C since the last months and I totally get them there, it makes way more sense, somehow I just don't find that click between Objective-C and Objects in PHP. For example in ObjC it makes more sense that every object is a 'son' of another one, and the root one is an NSObject which contains all the basic functions of an object, the allocation, initialization. If it's an object the user will see, then it must be a child of NSView, which contains basic functions about appearing on the user's screen. However, I just don't find the need of using some objects in PHP, and that's when my whole idea of using objects in PHP falls apart.
Best book I ever read on objects is this one: http://www.amazon.co.uk/PHP-5-Objects-Patterns-Practice/dp/1590593804 
Try looking at a PHP framework like Lithium. It uses the same Model-View-Controller pattern as UIKit/AppKit apps do in Objective-C: http://dev.lithify.me/lithium/wiki/about
You are confusing data with representation of data. The data is the blog, it has a title, some content and a date. The view (HTML etc) is only a representation of that data. If you build your class with these two things together it becomes more difficult to get a different representation of the actual data. An end user will want to see your blog represented as HTML. An aggregator or other third party service will likely want your blog represented as JSON or XML. If your HTML is part of the class, you either end up with a massive class which has to deal with every possible representation of the data, or you have to duplicate the class and it's functions for each representation of data. If you build you classes based on the data, you then have the option to represent that data in any possible way with ease and without complicating the data classes themselves (models). As I mentioned in some of my other posts in this thread, this is where the separation and encapsulation of concerns comes into play.
Everything's included in the app. There's nothing else to download or install.
Well, it kinda makes sense. it was something like this: class Blog { private id = 0; private title = ''; private content = ''; get ($id) { $post_data = mysql_query(SELECT * FROM foo WHERE id); $this-&gt;id = $id; $this-&gt;title = $post_data['title']; $this-&gt;content = $post_data['content']; } getAllPosts() { $posts_data = mysql_query(SELECT * FROM foo); $posts_array = array(); while ($r = mysql_fetch_assoc($posts_data)) { $posts_array[] = array( 'id' =&gt; $r['id']; 'title' =&gt; $r['title']; 'content' =&gt; $r['content']; ); } return $posts_array; } function setId($id) { $this-&gt;id = $id; } function setTitle($title) { $this-&gt;title = $title; } function setContent($content) { $this-&gt;content = $content; } function save() { $query = mysql_query(INSERT INTO foo (id, title, content) VALUES ($this-&gt;id, $this-&gt;title, $this-&gt;content)); } } But I know the "get" and "save" methods are more of a "post class" instead of a blog one. The architecture of objects is the thing I'm struggling with.
Now that I'm thinking more about it, it wasn't a real "blog class", it was more like a "post class" that had some "blog class" methods, like getting all posts' data. Actually it works exactly like you posted it, create the new object, use the setters, and it could save. But it was also loaded as "blog class" in the index page, without setters and just for using the get posts methods. And this must me a newbie question, but using try{}, how do I get the "DatabaseException" or "InvalidadArgumentsException"? Is somewhere inside the class, or some generic PHP exceptions?
That looks very interesting, sadly my server doesn't have PHP5.3 yet, but I'll save the link, thanks!
There are two different types of actions you would do with blogs. First, you need to be able to display several as a list. Second, you would display a single one as it's own page. You would have a blog class which handled the storage and retrieval of various blog data (title, date etc). You would then also create what is called a collection class. The collection class basically feeds you several single blog objects, each with their own data; // Display all blogs from July $blogs = new BlogCollection(); $blogs-&gt;loadBlogsForMonth('July'); foreach ($blogs as $blog) { echo $blog-&gt;getTitle(); echo $blog-&gt;getDate(); echo $blog-&gt;getContent(); }
Thank you, I think I'll buy it sooner or later, I read the first pages and it seems that it explains exactly the doubts I have when I'm trying to code with objects in PHP.
The exceptions would be hand coded by yourself, deeper in the classes. Here is what the inside of the save method would look like (ish): public function save() { if ((filter_var($this-&gt;getAuthorEmail(), FILTER_VALIDATE_EMAIL) == false) { throw new InvalidArgumentException('Invalid author e-mail address'); } try { DatabaseObject::insert('tableName', array($this-&gt;getTitle(), $this-&gt;getContent(), $this-&gt;getAuthorEmail())); } catch (DatabaseException $e) { error_log('Db Error: ' . $e-&gt;getMessage()); return false; // save did not complete. } return true; // success } You could just as easily (and perhaps more sensibly) add this vlidation to a "setAuthorEmail" method and the try catch block would handle it just the same.
It took me a while to 'get' objects to be honest, but nowadays I can't imagine life without them. Polymorphism is something that just didn't click for me no matter how many times I read about it, but then the first time I encountered a problem that could be fixed by using it and recognised the opportunity, it suddenly completely clicked in my mind. I'd suggest using an ide that can read objects and give you decent code hinting, as this has improved my code and understanding of objects no end. Check out the zend ide or eclipse for php. Netbeans is also pretty good.
Get a local xampp running, while you can't use that particular framework in production, there is a lot in there that doesn't require 5.3 and you should start to see the advantages of OOP practices.
One of the problems with learning things online (and PHP has more than it's fair share of issues with this) is bad examples. The class you are describing is suffering from an identity crisis which is not helping your understanding at all. It begs the question; What is the difference between a post and a blog in this class? There isn't one, you have only blogs - that is what your data is. You can have one, or you can have several but they are all the same data model. It makes most sense to have a blog class which is concerned with a single blogs data and operation. If you need to be loading several blogs, then that is what a collection class would do. The collection class does not care about the internals of the blog object, it only needs to know how to find the ones you are looking for. So then you use the methods within the collection class to filter and sort through the blogs and return you with an array of single blog objects that match your filters.
try [CodeIgniter](http://www.codeigniter.com)... similar MVC pattern, but it runs on PHP 5.1.6. I've been using it to develop an app for tracking equipment loans for my company's Helpdesk. After developing apps without a framework previously, it's unbelievable how much easier it's made my life.
as orangePlus said. The reason phpinfo() only works is that it does not "include/require" anything and does not need to use the include_path
But in your previous example, the one the with the loadBlogsForMonth method, you are creating a new blog object that can display the posts, but just for that month? Also it looks like when you get the Blog for that month, it creates a new blog object with it's properties. But what I confuse is that, when using a blog object I can have a method to fetch all posts' data (just the data, not the representation of it), but I just want to fetch the id and title from the DB, cause I don't need the content, date or author for the main view, but I do need all the data to single post view. So it would make more sense to me having two classes, the blog class, and the post class. The **post** class will contain data of the the post, id, title, content, author, date and image. It will have an "init" method where I can set basic stuff like the id and title, some setter and getters for the post itself, and maybe a save method too. And the **blog** class could contain the blog's name, some other properties, and some methos like getPostsByMonth, by author, or some other stuff. But those methods could return posts objects with just the basic data (id and title) to avoid querying too much stuff to the DB. That's my logic, is that somehow good? A bad practice? Or am I totally lost here? **EDIT:** What doesn't make sense to this logic, is that, for a single view post, I would need to initialize the Blog Object so I can get the blog's title, and another to the post. That's where I feel very lost.
Also note that the path separator for Windows is ; and for Linux it's :
Speaking from experience, I started using objects about six months ago on a website for my small business. I took an introductory Java programming course and applied what I learned to PHP, a language I had worked with only procedurally for a number of years. Java is heavily object-oriented and that course gave me a good understanding of basic OO concepts. Why did I start using objects instead of the usual procedural programming that I was used to? Simply put, to keep my code organised. You see, I knew that the website I needed would be quite complex. Accounts needed to be able to buy a Product, an object that I've attached a bunch methods and attributes to. They place the Product into an Order, which has its own series of methods and attributes. All Products also belong to a particular ProductLine, and so on and so forth. There also had to be a whole admin back-end that my non-programmer partners needed to be able to use. The advantages are many and not entirely obvious if you haven't done any OO-PHP before. Firstly, debugging is a snap, The moment someone says something isn't working the way it should, I know exactly which object has the problem and the fix is propagated across the entire site. Adding functionality is also super easy as it consists of merely extending an existing object's properties or creating an entirely new one. If you're going to be the main go-to person for a reasonably complex website, start right away. In the long run, you'll be thankful you did.
I would build it to do both. You could inspect the first parameter, if it's an array attempt to initialize with that, if it's an integer do a sql lookup. But really if you are starting a new project you should find and use an MVC, and just follow their conventions. 
who cares, it's not a problem that needs to be solved unless you're a purist. If you really want to be a dick about it, wrap the require in a lambda.
that also increases the complexity and completely loses the advantage of locality of reference. 
pdflib. there is no substitue (just don't know about that whole HTML thing, but why would you want to be limited by HTML 
You've been given the proper solution. There is no such thing as a solution with no downsides, if you really want to make sure someone can't access global state, stop using PHP. It was designed to be accessible for a reason.
bhooks1234@yahoo.com I would love it if you still have it
I have two (sorta 3) separate objects. * Slideshow() - represents a single Slideshow + constructor takes an id and will pull that one from DB + if id is null, then creates a blank slideshow that I set values and then commit to DB * SlideshowSet() extends DataSet - represents a set of Slideshows + 2D array (or whatever implementation) of Slideshow data + constructor takes components of WHERE clause * Dataset() - represents any set of data objects + methods that manipulate 2D data It allows me to easily separate when I need a single vs when I need multiple records and still keep all my DB interaction encapsulated in the classes. Edit: This is similar to isometriks Gallery obj recommendation.
I've been trying out CakePHP myself, and yeah, the documentation is a little strange. It *is* detailed, but you sometimes have to flip back and forth between the "cookbook" (maybe several places in there) and the API just to figure it out. I like the framework, but I'm not impressed with the documentation.
I don't understand what the difficulty is with the single view post. You are mentioning a method in the Blog class called getPostsByMonth, which would presumably return all the posts for that month. Why wouldn't you just create a similar method, getSinglePost, that you can pass a Post id into and it will retrieve that single post?
I'll keep this simple. Use classes to promote code reuse and/or readability.
I totally know where you're coming from. I used to work at the DOT and there was a contractor who made like twice as much as my boss (who was a GS-15, basically the top dog) and he just made the stupidest decisions, but no one questioned him because he was like the "resident database expert." Furthermore, he wrote our whole software package that my whole team used on a daily basis, and since I was a lowly fresh college graduate, I had no say. Eventually he had to go back to India to find a wife and I ended up rewriting the software we used. I don't think he ever found a wife.
$foo = @($var)? : "bar";
save it as a .php file, and upload it anywhere in th htdocs or public_html folder. Then to run the script goto yourdomain.com/script.php to make the script load automatically when yourdomain.com is typed in, name your script index.php
You shouldn't have to put them in cgi-bin folder. Think of them as html pages with benefits.
Ok, so my scripts need to be on the public html folder? All of my PHP scripts? For example, I have a form that uses form.php with the post variable. Does form.php belong to public_html? It is a pure php file.
I have used domPDF and mPDF. Both have gave me great results.
&gt; It took me a while to 'get' objects to be honest, but nowadays I can't imagine life without them. Ruby helps with this. I just found them so much easier to understand in Ruby, where you have no choice but to use them and learn them, and they're presented very clearly due to the minimal syntax. Python would also server this purpose well. In PHP, it was easy to not learn them or convince myself that the way I was doing things was fine, whereas with Ruby, I had no choice. Not trying to turn this into a language debate, but for me, I needed the extra level of separation. Once I understood objects and how they worked, implementing them in PHP (or any other language, for that matter) became simple. 
Give them a .php extension and put them in the public_html folder (or sub-folders thereof) and access them just like you would an HTML file. The cgi-bin is for Perl scripts. You shouldn't need to do anything with your .htaccess file. There may be some stuff somewhere in a Site5 wiki or forums about adding an AddType handler to your .htaccess, but it is very old and outdated. Initially, Site5 offered PHP 4 and PHP 5 both, and to use PHP 5 you had to add the AddType handler. That was when 5 first came out, though, so it's no longer relevant. Technically you *could* add the line you posted above to your .htaccess file and parse HTML files as PHP (thus allowing you to put PHP code in them) but this isn't a good idea. Pages that only contain HTML do not need to go to the PHP interpreter (so leaving the HTML file type for them is good) and doing so is just a waste of resources, plus it makes things confusing when maintaining your code.
This is how you would load a single blog: $blog = new Blog(); $blog-&gt;loadById(4); echo $blog-&gt;getTitle(); // Prints "My 4th Blog Post" Loading a single blog from a collection class makes no sense because why load two classes when you only need to load one? The collection class is only going to return an instance of the class Blog anyway: class BlogCollection() { public static function getBlogById($id) { $blog = new Blog(); $blog-&gt;loadById($id); return $blog; } } You do not gain any useful abstraction or encapsulation by doing it this way. What you then have is a class which is supposed to return collections of blogs (one or more) which has a method that only ever returns one blog. This does not fit in line with the scope of the class.
mPDF, I've had it generating 300+ pages with data from MySQL, including embedding images. 
Thanks for the awesome answer. Another question: Since the php files will be in the public html folder, won't that make my code accessible to the users?
there are some seriously over-engineered workarounds here.... I feel like it's not the best solution, but this would work. function is($var) { return isset($var) ? $var : false; } $test = 'foo'; echo is($test) ?: "bar"; // returns 'foo' echo is($bleep) ?: "bloop"; // returns 'bloop'
Nope, because it's interpreted by PHP before it ever gets to the user. All the user sees is the parsed output from the PHP interpreter, and not the actual PHP code. Sometimes you do want to move the code out of the public_html folder, when it contains sensitive data, to prevent it from being displayed should there be an error in the server configuration, but that's not something you really need to worry about right now. It's easily enough done, but you need a solid understanding of how things like include paths, etc. work first. Basically, it should be very low on your list of priorities at this point. :)
No. As long as the PHP interpreter is running, it filters all PHP files before they are sent to the user. What anyone can access from their browser is not the PHP file itself, but rather the output from the indicated file. When you see an opening PHP tag &amp;lt; ?php you are telling the interpreter to stop just sending the page, and to instead evaluate and execute the PHP. At the closing tag, the interpreter stops, And it resumes simply delivering the contents of the file. 
If you know where to find how to pass in more variables into the authorization array (i want to add 'group' into it, that's it for now) I would be a very happy guy. And yeah, that's true, I've had to search for something and then read it on different places, like what functions the HTML helper have.
OK, thanks. You have been very helpful.
Thanks.
&gt;Since the php files will be in the public html folder, won't that make my code accessible to the users? As long as your server is set up correctly and PHP is running; no. However, in the event that something would break, you could place your files outside of the WWW root and use a front controller to load the resources that you need. 
Thank you. My host is very good, so I trust their security. Of course, once I start making real (and not practice stuff), I will look more into security. 
While your host might see to it that their servers are correctly configured and secured, it's worth noting that it doesn't protect you from vulnerabilities that you yourself introduce. There are lots of various security considerations that you need to consider when writing code. https://www.owasp.org/index.php/Category:Attack http://www.slideshare.net/joewalker/web-app-security
That's a very interesting solution. Simple and elegant (not perfect because PHP doesn't allow it). Thanks!
Thanks for the links. I will study about security once I get the basics down.
Thank you very much for all of your help, I think it really helped me a lot!
You shouldn't use a host on the internet while you don't know what you are doing (and that's not an insult, that's how everyone started). There's too much that can go wrong. It's safer if you install a web server on your own machine and learn there.
Where did this person get their website instructions from, I wonder? 1997? I don't mind the downvotes, but seriously, where did this person get there information from? There is literally no book or website or anything on PHP that tells you you have to run them in a cgi-bin directory. That information is like 14 years old and applies to perl.
There's nothing wrong or bad about instantiating more than one object. Don't try to cram everything into one class.
It will make the scripts accessible for the users to *run*, but they won't be able to see the code. They will only see what happens when the script runs.
Fair point. I don't know Ruby and I simply don't have the time to learn it now. I'm too busy with the things I'm working on at the moment to start a new language (that I wouldn't be able to use in work anyway) from scratch. It's a fair point though to say that a proper oo language can help you to grasp objects much faster. I've been a php programmer for 6 years now, and I have to stay I've gotten to a stage where in some instances I pretty much hate working with it. It's perfectly possible to write decent, oop code in php, and to follow a nice clear structure that leads to maintainable code that can be built upon, and this is what I strive to do whenever I have the luxury of starting something from scratch (which luckily for me, I occasionally do in my job). The problem with php is that it's so easy to pick up and become productive with it, that most people who learn on their own end up writing horrible, horrible code. As part of my current job I inherited the old company intranet. Let me tell you - it's an absolute nightmare. I forget what the option is called in php to automatically register $_GET and $_POST variables as variables within a script, but that is turned ON in this instance, so for one thing, you get variables appearing in the middle of a script that literally appear from nowhere. Suddenly you'll get something like: if ($deviceType = 'iphone'){ //code } Yet the $deviceType variable doesn't exist anywhere, and I'll be searching around scratching my head to figure out where it's come from. Not to mention it's a security risk. Other things I've experienced with the intranet - a bunch of include statements randomly appearing in the middle of a script, pointing to files that are (honestly) over 7000+ lines long themselves, which also sometimes contain defined variables in the middle of them. So suddenly, this $deviceType variable could be coming from somewhere deep in just one of many 7000+ include files (sometimes I'll find the variable actually is defined in one of these files), other times the variable isn't anywhere in the script at all, because the original coder expected it to come from a $_GET request. We've got html tables being output in the middle of functions that should only be doing database queries, we've got nested if statements with no comments in them that can go like 10 statements deep (makes me want to cry), and we have variables with strange names that don't seem to make sense and I'm scared of changing incase doing so would break something else down the line. This isn't that extra-ordinary in the php world unfortunately, and it's all because the original programmers never sat down to plan anything - they just hack stuff together until it works. Learning objects takes time, but if you do it properly and do it well, you'll end up with a system that has all the functionality you want and none of the crappness I just outlined above. Objects are the way to go. I'll maybe type up an example of polymorphism in practise in a real php environment later, just to show you how much better it is. When polymorphism clicked, I suddenly saw a whole new world of non-shittyness open up in front of me :-) *Edit: When I said 'you' regarding polymorphism there, I meant 'you' as in the op ;-)
http://www.reddit.com/r/reportthespammers/comments/ikv3b
"An app clone is a single instance of your app that can respond to one web request at at time." Wait what? So if I want to handle 10 concurrent requests at a time (considering a single page load typically generates several requests) its going to cost $324 a month? I must be seriously misunderstanding the purpose / meaning of this. At the end of the day this looks like its going to be expensive as hell.
I fins the person example to explain it best. So let's say if you created yourself in code you'd have the male human class that extends the human class. You can drill this down further if necessary. But in human you specify two arms and two legs. In male you specify the different reproductive parts you have. Now let's say you have one arm. Not all men do but you do. So make an instance of your male human class, with your name and change the number of arms. That is called a parent child relationship. The child overwrites the parent. You can also modify default variables in an instance of your class. The next important one is client supplier. imagine telling your instance of male human to walk. You would load up your instance and it would have stored as class variables two instances of the human leg class. Each instance can have different properties if say you have a bum knee and can report back that you experienced pain. Hope that example helps but the idea is to think in objects and design your code the same way.
or his first job was keeping up to date some old perl site.
**tl;dr** Objects are used to encapsulate data and to hide certain behaviors in order to make dealing with data simpler. **More Ramblings** Using your blog example, you could have a Post object that stores all data related a single post (text, date, author, etc). If you really want to go all out, you could create a simple MVC framework to make development of the blog much faster down the road. This would require a Router class and a bunch of other classes in addition to the usual Model, View, and Controller classes. We're working on developing and open-sourcing a PHP MVC framework, called Hub, that we initially developed for TwitPic, which is completely object-oriented. The way you pass data to the Views is by setting class variables in the Controller, which are extracted into any instantiated View using extract(). Wish I could show you some examples from it, but we should be releasing it soon anyways (I hope). Another thing that is under-represented in PHP is Namespaces. In Hub, our ActiveRecord ORM is namespaced in order to prevent naming conflicts with other classes in the system that are most likely user-made. So for example, all of the Model classes extend ActiveRecord\Model, where ActiveRecord is the namespace, and Model is the name of the class. Anyways, hope that helps to give you some ideas for areas to research!
:) If you're not using it already, this is where something like xdebug comes in handy - the stack traces are really nice for finding things. OOP and MVC are wonderful for creating cleaner, more organized code, but yeah, they do have a sometimes steep learning curve. And yeah, I agree. One of PHP's greatest strengths is that it's so accessible to anyone. That also leads to a lot of really bad code, though, because people learn PHP, but have no idea how to actually program. This isn't helped by the fact that PHP lets you get away with a lot of bad practices. 
I [wrote a PHP class](https://github.com/meltingice/TwitPic-API-for-PHP) for accessing the TwitPic API awhile ago. Should make doing this quite trivial. Yes I work for TwitPic, no we aren't stealing or selling your photos, but if you want to download your photos, then download away.
I just coded a blog in Java which is all OOP, and I created a "Blog" class as well as a "BlogPost" class. The Blog class had functions like "getAllPosts" that would simply return a list of BlogPost objects, which then had functions like "getText", "getPostDate", "deletePost", etc. There's no real rule for when something should or should not be it's own class or should be incorporated into another class, but I think in this particular example the hierarchy is pretty clear: A blog is a collection of posts, and the blog its self has it's own functionality separate from the posts themselves. 
 foreach( range( 0,4 ) as $n ) { $slideshows[] = new Slideshow( new JSONSlideshowReader( sprintf( 'json.php?limit=%s,1', $n ) ) ); } 
You can put them anywhere in any folder starting from public_html. Just make sure your form posts to form.php
In our codebase there's a single procedural (non Object) file - the dispatcher. This instantiates some required classes (router, exception handler, autoloader) and then passes control over. From that point on every single file is an Object (apart from views which are HTML and PHP, which is then included by and therefore encapsulated by a View class).
So tell us the reasons why you chose it, instead of just ranting.
Cool, I'll look into that. Thanks.
I'm sorry but I don't have any left. There was another redditor in the thread who said had some invites. Good luck!
Hey, I would love one if you still have one. bhooks1234@yahoo.com
Thank you very much for taking the time to write this, you actually nailed in some of the big doubts I had. As I mentioned before, one of my biggest problems was to find that "click" between objects in Objective-C and PHP, cause sometimes it's hard to know when not use objects in PHP since you can do it without them, but in ObjC you don't have another option. But knowing about abstract classes and interfaces is huge step. Thanks again!
I could easily do this. My rate is $50/hr. Pm me.
My rate as a php developer is $50/hr. and that is fairly low for professional development. What kind of compensation can the developer expect?
http://www.phpgolf.org/ doesn't take up enough of your time?
How are you storing the admin password? Assuming it's hashed some way and stored in the database, you would just need a form to take a new password, hash it the same way the old one was hashed, then store it in the database in place of the old password.
This is piece of cake. My rate is $50/day. Pm me.
This is piece of cake. My rate is $49/day. Pm me. (see what I did there)
I can easily do this. My rate is $0/sec. http://pastebin.com/RnEE6xyE
Damn you Indian coders!
This is piece of cake. My rate is $89/hr. (You get what you pay for)
 if(strlen($cpass) &gt; 20 || strlen($pw1) &gt; 20 || strlen($pw2) &gt; 20) //check if longer than 20 chars WHY?
&gt;md5 WHY?
why not...he is asking for free help
http://www.apachefriends.org/en/xampp.html Download and install that to get an easy webserver running on your machine. It's quicker, safer, and easier than running remotely.
Ask for free help, get bad advice?
 $sql="SELECT * FROM users WHERE username='$username' and password='$cpass'"; $result=mysql_query($sql); $count=mysql_num_rows($result); WHY?...aren't you sanitizing your input? And why aren't you using [prepared statements](http://php.net/manual/en/book.pdo.php)? if($cpass == "" || $pw1 == "" || $pw2 == "") ... [WHY?](http://php.net/manual/en/function.empty.php) if (isset($_POST) &amp;&amp; !empty($_POST)) //get variables from html form { $username= $_POST['username']; $cpass=$_POST['currentpassword']; $pw1=$_POST['password1']; $pw2=$_POST['password2']; } WHY?...aren't you checking if the fields are actually being set? if($pw1 != $pw2) //make sure the two new password fields match PHP string comparison is not case sensitive - [strcmp](http://pt.php.net/manual/en/function.strcmp.php) 
what is this I don't even
sent, have fun :D
Because it's quick and simple. Theres no real need to use something like bcrypt, it's just a (simple) suggestion box.
I'm sorry to receive a post full of Haters. I never thought that reddit would be this harsh, to a person who had some minor problem at php to complete his project. It seems it's no good from here, and i have to admit that i'm quite sad to see the "community" of php be.... like this. Thank you anyway. I Guess i'll be off. :s
[FuelPHP](http://fuelphp.com) Seriously, I absolutely love this framework. You can have a [rest controller](http://fuelphp.com/docs/general/controllers/rest.html) and there is an [ORM Package](https://github.com/fuel/orm)
Agreed, I love ternary ifs and didn't know of the ?: previously.
iirc, suppression character is both bad practice and slow.
&gt; can you make me the codes ? That there is the problem. People here are eager to help you learn, but we're not going to do your work for you.
I agree with codefocus but I also think you've absolutely no idea what you're doing. "I work with phpMyAdmin" you say but that is not even programming-related, it a tool for a very specific purpose that is *written* in PHP. even if people were willing to help under this circumstances it'll be impossible to just guess what the heck are you trying to do.
Don't try to build your site now. In 6 months when you hopefully have the skills to actually take on a large scale project, most of the code you write now you will look at and just want to shake your head. Just keep learning. MVC architecture, OOP, best practices, etc. It might also help to try to get a job. I did not know how to program well, efficiently, and I definitely didn't know jack about security before I got a job. If you want to build something that you're expecting to be BIG you need to have a professional level of skill to do so, or you risk many things - security, inability to handle too much activity due to poor planning, etc. 
Assuming a many to many relationship I would structure it: bands * bands_id * bands_name -- members * members_id * members_name * etc. -- bands_x_members * bands_x_members_id * join_members_id * join_bands_id to get all members in a band... SELECT * FROM members WHERE members_id IN ( SELECT join_members_id FROM bands_x_members WHERE join_bands_id = ? ) to get all bands that a member is in: SELECT * FROM bands WHERE bands_id IN ( SELECT join_bands_id FROM bands_x_members WHERE join_members_id = ? ) I find that these naming conventions can be a little bit of a pain in the ass but go a LONG LONG way in keeping your database organized as it grows in size.
You haven't missed out, at all.
For my current project unicode support and barcode features are a few requirements. TCPDF is my choice.
Agreed. I wrote [klein](https://github.com/chriso/klein.php) for this very purpose
How about creating a simple helper function there? function array_value($array, $index) { return isset($array[$index]) ? $array[$index] : null; } return array_value($test, 'surname') ?: $defaultValue; 
if that was the problem the whole time, why didn't you said so ? I have some "jiberish" code, but i have the problem on line 33. when i get home, i'll edit the post and put the Code i've had, but again, it's probably all messed up, because i took this project with 0 knowledge on php and html, and since then i've been... doing the things i need founding on internet and studying, because, again, i know very litle of php. In some hours, i'll edit the post and put my code then, and you can see what's wrong with it. I hope... 
I will be extremely realistic with my response. As I stated in my original post we are operating on a shoe string budget. We are looking for someone who is experienced in PHP development and possibly other web languages that deal with database input / output. Currently a developer could expect monetary compensation in the form of a percentage of the overall cost per project. Our hope is that this would eventually turn into a full time position and a steady income for a developer. As I also stated, we are not looking to screw anyone over nor are we looking to waste our time or someone elses. We are taking this business extremely serious and are moving in the direction to establish ourselves as a competent design firm. Do you have any examples of work you have done? 
It's all good.
Correct. The controller simply 'works out' what to do, then calls the relevant models and views, and passes the information received from the model to the view.
So if you are doing error checking in the controller do you need a controller for each page? 
You only need a controller method for each page. Depending on how complex the site is, you could get away with just one controller. That said, vaxt is wrong on some things. Input validation should definitely be in the model, and I'd put advanced querying there too. As a rule of thumb, you should be able to replace database storage with XML or CSV or something without changing a single line of code in your controllers and views.
&gt; As a rule of thumb, you should be able to replace database storage with XML or CSV or something without changing a single line of code in your controllers, view, ** or models.** FTFY 
The idea behind MVC is to organize the code in a clean way such that it's easy to maintain and easy to replace pieces if you decide a piece of current technology is not appropriate, or can be improved. You should keep your code organized such that any programmer can step in and start helping. If you are asking if it's okay that an application with 30 tables and 100 views all share one controller, then the answer is absolutely not. If you're asking if the Create, Read, Update and Delete screens of a specific entity share a controller, then yes, that is appropriate; each one of these views would have a method in the controller.
Would it be correct to say the controller is nothing but the framework organizing everything, loading the required classes, and pulling it all together? Or is it typical to have a controller, model, and view file for each page?
The main problem stems from the fact that most framworks that call themselves 'MVC', are in fact incorrect based on the original definition of MVC. (http://martinfowler.com/eaaDev/uiArchs.html) Controllers and View-logic are intertwined and don't do exactly what they were intended to originally. 'Model View Template' would be a more appropriate definition, where the Template generally has extremely little logic, and the View (or Controller) is responsible for parsing the exact request, pulling in the data from the model and loading the correct template.
&gt; I have some "jiberish" code, but i have the problem on line 33. Oh, line 33. That explains everything! &gt; when i get home, i'll edit the post and put the Code i've had, but again, it's probably all messed up Why didn't you do this in the first place? People here are very eager to help.
Models represent data entities - you ask them for data from the controller, then pass that data to the view. Unless you only had one model, I don't understand how you could organize your app in such a way that you only end up with one controller. I tend to organize my controllers on a functional basis. Each controller will talk to as many models as necessary to represent that piece of functionality. I find a big flaw in most MVC tutorials is to teach MVC as 1 controller per model style where the controller just handles the CRUD actions for a single model. That is not the way any real world application is structured...
Here's a good article from the TUTS+ folks: http://net.tutsplus.com/tutorials/other/mvc-for-noobs/
Business logic should be in the model.
The best, by miles, is PrinceXML, which has interface libraries to a bunch of languages, including PHP. However, it's either hundreds or thousands of dollars, depending on what you're doing. It's not clear, from your question, whether you're willing to pay.
You have a model for each table in your db, generally (this is very simplified and not often the case, but a good way to initially think about it). This maps an object in your code to a table. ie; a UserModel for the users table. You have a controller for each section of your site. Like a UserController. And a method within that controller for each "page" in a section... ie UserController#login for users/login, UserController#account for users/account/5 (where 5 would be passed into the account method as the user_id, which you would use to call $user = UserModel-&gt;get($user_id) ) Then you have a view for each method in your controllers.
You might like my article about MVC in the browser. https://docushare.xerox.com/dsdn/dsweb/Get/Document-9426/XRX-MVC.html
The point of the 3 types of objects (models, views, and controllers) is simply to act as a layer of abstraction to keep different parts of the application separated. For example: models access the database. You shouldn't have any queries anywhere else but your models. This is so if you decided to change database types, or schemes, you only have to rewrite your models. For views, its similar. If you decided to create a mobile version of your website, you could use the same models and controllers, but create new views designed for mobile devices. Controllers make calls to other controllers (and to models and views) to handle the processing and rendering of a given page. How you organize your controllers is up to you. The main goal in using controllers is simply to abstract out the application logic from the other parts.
Thin controller, fat model. http://www.youtube.com/watch?v=91C7ax0UAAc The controller should simply map the results of model methods to views.
said C libs are also documented.
This is a very good point. When learning MVC I spent a lot of time looking at many so-called MVC applications already out there. It took me a while to realise that most lack many features of an MVC approach. A common one is turning the model layer into a "data access" layer, with one model per table, pushing much of the logic *defining the data entities* up to the controller layer. I realise there is no real "pure MVC" and we do need a pragmatic approach, but when creating a new controller in an existing application involves duplicating masses of code from existing controllers, you know something is wrong.
+1 for PrinceXML. It may not be the cheapest solution in terms of price but if you factor in the development time saved trying to work with something like tcpdf it more than pays for itself.
Not to mention there's a lot of stuff Prince can do that I've just never seen any other tool be ready for.
A lot of people consider that models just represent persistent data, and that's wrong. Models have the business logic of your app. You may have models without a table/db and handling complex calculations, data retrieval and processing from API's or handling other type of complex events. This is important because I've seen a lot of people adding this kind of functionality to controllers. And it shouldn't be! Besides usually not being very DRY on most cases, the job of the controller is getting a request, getting the data from the models, choosing the way of replying (html/json/whatever), choosing the appropiate view and provide the view with the data necessary. If part of process (maybe a signup) involves sending an email, it shouldn't be on the controller, put it on a Model (may be the User model or if it's already too crowded, put it in an EmailSending model). Your controller should just get data, choose representation, choose a View, provide data to the View. And the "choose representation" is because sometimes you may want to build the data in a different way if the View should be a JSON.
Any un-flawed MVC tutorials you would like to recommend?
Um, I think you missed my point. Your comment has no bearing on mine.
here, let me connect the dots for you then. &gt; I take your point about those who've worked with the C libs underlying the PHP functionalities, but how many of those people are doing what you suggest and using PHP after having used the C libs? http://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q=strlen kablamo, lookie there. first link: PHP strlen second link: C/C++ strlen It's almost like keeping the names and the semantics the same gives folks the opportunity to more easily find documentation. whodathunkit? certainly not someone who's sole purpose for making an argument is blind PHP bashing.
Bad practice in general, yes. There are actually a [few cases](http://www.php.net/manual/en/function.ldap-error.php) (my example above _not_ being one of them) where it's needed. IE typo in username, password or some search string provided by the client which would otherwise cause a warning to be logged. These cases are one-offs though.
Enough with the tech, tell me more about the collection... To the point, I'd apply if I would be located in the US.
&gt; full-time position at our office in Los Angeles &gt; &gt; Salary starts out at $60,000 per year So maybe it's been too long since I lived in California, but that number strikes me as low for the experience level, given the cost of living in LA.
Thank you for posting this. It had all I needed, plus more! It helped me a bunch.
Starting out at $60,000 with only 3 years experience? That sounds fair to me.
You are right, because I was learning perl from an old book that belonged to my brother. I *ass*umed that PHP also used the cgi-bin. See why my username is phpNoob? =)
Thanks for posting this link, because it helped me to clearly learn about MVC. I'm noob to all of this, and it was very helpful. So much that it made reading the cakephp docs so much easier. You are awesome. *Got any more good links?*
Thanks for the link!
Definitely marketed towards internet nerds. How often do you see a **td;dr** in a job posting?
I'll send a code sample over in a little while.
Hi there, The site is www.met-art.com We are located in L.A. and Vancouver, B.C. but we don't mind hiring from outside of North America if you can work on PST hours. Send a resume if you want.
&lt;br style="page-break-after:always" /&gt;
met-art? you'll get my resume. when you say contract, how short of a contract are you looking for?
 &lt;meta content="&lt;?php echo $metatag; ?&gt;"/&gt;
The page is rendered from the top down. The entire script can be enclosed in &lt;?php ?&gt; tags or you can have multiple sections of php. I'll show you two ways of doing it: &lt;?php //bunch of code print &lt;&lt;&lt;end &lt;html&gt; &lt;head&gt; &lt;meta blah blah yada yada&gt; &lt;/head&gt; &lt;body&gt; end; //bunch of code print "&lt;/body&gt;&lt;/html&gt;"; ?&gt; and this also works with php: &lt;html&gt; &lt;head&gt; &lt;meta blah blah yada yada&gt; &lt;/head&gt; &lt;body&gt; &lt;?php //code for the body ?&gt; &lt;/body&gt; &lt;/html&gt; Also, you can use any print or echo statement in the first example. I just used the multi-line print statement with the word end, but you can use any word to designate the beginning and end. The only caveat is that the end of that multi-line statement has to be on it's own line with NO tabs or spaces before or after. For thoroughness, here's another example: &lt;?php print &lt;&lt;&lt;FOO anything you want to print here and you can use variables too FOO; ?&gt; 
Sorry, my php is lacking. Where does that go, and how do I adapt that to the specific meta tags facebook wants?
The thread is about consistency within a single language: PHP. The problem is that yes, PHP is consistent with C, for all the functions it uses from C, but then all the rest of it is completely inconsistent: there is no self-consistency. It doesn't matter whether the documentation for the C libs supplements the PHP docs for those C-inherited functions. PHP is inconsistent. This is a problem. Would you like it spelling out in some other way?
&gt;Do I include the &lt;head&gt; before the &lt;?php, or inside it, or just add the &lt;meta&gt; tags inside an echo "" tag somewhere Not sure what you mean by this, but &lt;meta&gt; is a subnode of the &lt;head&gt;. &lt;meta property="og:title" content="&lt;?php print($title); ?&gt;"/&gt;
Might I suggest getting a good understanding of HTML, PHP, and how they interact before you move on? You seem to have skipped straight over the basics and jumped in a little over your head.
Yep, totally did. Somehow print designer = can build a website. I'm picking this up as I go.
Ok, I think I get this. The .php file starts &lt;?php defined('_JEXEC') or die('Restricted access'); jimport('joomla.filesystem.file'); etc.... so then I add print &lt;&lt;&lt;end &lt;html&gt; &lt;head&gt; &lt;meta property="og:title" content="Page Title"/&gt; then more meta tags that facebook wants &lt;/head&gt; &lt;body&gt; end; Is that right? Does it matter if I add that stuff at the bottom of the page, or can I put it anywhere?
ok, try building a 5 page pdf. without breaking up the page content up into individual pages. then build that same 5 page pdf into individual pages and then join with pdftk. now have a cluster of people try it on the same server at the same time. let me know the details of your testing. 
i am more than pitty to see this post. I am more than experienced for this work as i have worked with lot of servers (clouds, as they are buzzworded), memcached, jquery, php mvc, mysql, optimizing mysql, sphinx, lot of porn websites, lot of streaming sites, lot of paysites, i know the drill, few projects even included met-art.com little bit :). i know how to protect from sharing accounts, how to detect phissed accounts, how to deny leechers and so on. And i love met art :( Little bit of me died when i saw this post, because i am at the moment committed to one long time project and i am too responsible to drop it. :(( ps: thumbs up for using nginx :) 
its even my reddit bday of which i was unaware till this post :)) 
6 minutes, 30 seconds (for members). Interesting, eh?
The header generally contains information about the page itself, rather than the layout. That means things like CSS, JavaScript, title and meta tags will go here. The body contains, of course, the body of the page.
It is contract in position but open-ended on length. Could be very long-term.
Yes, and I have free accts to all of our partners, too :)
Hey stop that pen testing... hehe I put this in just for reddit pentesters http://guests.met-art.com/search/alert%2528%2527hi%2527%2529%253B/
Yes, this much I know. My html and css are pretty strong at this point, but php is new for me. The question is where do I put meta tags in a .php file that doesn't have a &lt;head&gt;.
Full time only, eh? //Vancouver dev
We're too busy to do part-timers, unfortunately. It is a good gig though -- maybe better than your current full time?
Porn sites: where *coming* and going quickly save bandwidth and reduce cost. 
hehe, dont worry, i just wanted to see webserver software out of my curiosity :) no pentesting here :)) but to be honest, its not that hard to get password to metart site :) ( to almost any pornsite ) 
I guess I'm not really sure where the problem is then. PHP is generally a combination of PHP and HTML. So, in your PHP file set the $metatags variable to equal something. In your HTML output, call that variable as shown in the comments above. You just need to make sure the variable is set in the code before you set call it. For example... &lt;?php $metatags_property = "title"; $metatags_content = "The Rock"; ?&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Page Title&lt;/title&gt; &lt;meta property="og:&lt;? echo $metatags_property; ?&gt;" content="&lt;? echo $metatags_content; ?&gt;"/&gt; &lt;/head&gt; &lt;body&gt; Content &lt;/body&gt; &lt;/html&gt; You can get fancier and do arrays if you want... &lt;?php $metatags_property = array("title", "type"); $metatags_content = array("The Rock", "movie"); ?&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Page Title&lt;/title&gt; &lt;? for ($i=0; $i&lt;count($metatags_property); $i++) { ?&gt; &lt;meta property="og:&lt;? echo $metatags_property[$i]; ?&gt;" content="&lt;? echo $metatags_content[$i]; ?&gt;"/&gt; &lt;? } ?&gt; &lt;/head&gt; &lt;body&gt; Content &lt;/body&gt; &lt;/html&gt; Did this quick, and there are many ways to do that, but I hope that helps.
There is a performance penalty on this conversion. You may never hit it but it is there... arrays are fastest.
I hope by 9am to 6pm you mean flexible time, versus 45 hour work weeks.
There is also getTraceAsString() that can return the trace as a printable string.
Uh, this includes a 1 hour lunch break...
check the link in the OP's post. Models represent the data used in the application. How that data is persisted is an implementation detail. So if the model that represents the data, decides to connect itself directly with mysql functions, or if it decides to go the route of DAO, it doesn't really matter. Those are other patterns that fall into implementation details. The controller does feed information to the model, and what that model does with the information is again, and implementation detail. And that model may give a response to the controller to which the controller can set a value to the view. That last bit, is maybe where you could make a case. The OP's article espouses the observer pattern, but in a web scenario, where there is no "main loop", this doesn't really work. But my main point is, conceptually, it's just about what the model represents, and it should represent the data. anything beyond that is an implementation detail.
That looks right to me, but it's hard to tell depending on what joomla is including and such. For instance, Joomla may include a php file that already prints html. Give it a whirl and see if the page prints what you expect.
yeah but, 6pm? Man, all the news starts at 6pm, for a reason! Maybe culture is different down there in LA, but man... 6pm... I completely appreciate the need for sporadic overtime. Sometimes it's just necessary to pull in a long shift, but sometimes, you finish what you wanted to do for the day at 4:30pm, and you leave at 4:30pm. Sometimes, you get one of those slow days that just happens to fall on one of those good days, and you take 2 hours for lunch. Sometimes, shit hits the fan, and you're doing 16 hour days for a week. An obligation for 6pm is rather... blah.
Thank you for posting this. I sent you an email :)
[http://www.php.net/manual/en/function.getmxrr.php](http://www.php.net/manual/en/function.getmxrr.php) &gt; This function should not be used for the purposes of address verification. Only the mailexchangers found in DNS are returned, however, according to » RFC 2821 when no mail exchangers are listed, hostname itself should be used as the only mail exchanger with a priority of 0. EDIT: just use FILTER_VALIDATE_EMAIL, if you really have to know if the address is valid, send a confirmation email and have them click on it. Email address validation regex are unreliable and can often fail when they encounter unexpected forms of email addresses. EDIT2: according to the PHP manual page on FILTER_VALIDATE_EMAIL, even it is too strict in some cases... the best way is just to check and see if there is an @ sign.
This is actually how the work week is counted in much of the USA. When I moved from NC to Boston and discovered 40 hours meant 9a-5p (not 8a-5p) I was a very happy man.
Zend is great and probably the only framework job recruiters have ever heard of... the learning curve is steep at first but there's nothing you won't manage to understand in a 2 month period (happened to me and it's the first framework I tried)
oh hey look, the ole switcheroo, didn't see that coming. wait, yes I did. It's a fairly common tactic for folks that just flat out refuse to give someone a point. So I say go on, try it out. Admit that PHP having a standard library that mirrored C in a lot of ways made it easier for C devs to get into Python, and also made it easier for folks to look up the relevant documentation for said library. Go on, it won't hurtcha, I promise. Once you're done, you can qualify your admission with the observation that it isn't as important was it once was. If you're really honest, you'll follow that up with a statement about how you've been looking at decisions made years ago through the lens of today. 
At the very least, the questions invoked from your reading of the overview can be added to it.
&gt;So maybe it's been too long since I lived in California, but that number strikes me as low for the experience level, given the cost of living in LA. Depends on which area of LA. Near Santa Monica/Beverly/Hollywood/Burbank that's not nearly enough unless you share an apartment. A **studio** is about $1k / month in that area. Outside the metro area, living expenses get a little cheaper. I think it's a fair rate.
no, that's what this is for ;) &gt;error_reporting(0);
Average time on site, average time on page, or average time on page with a video / gallery?
I just took a job at another high-traffic site, I have the experience and all. Wish this was a little earlier!
Time on site.
http://i.imgur.com/C9sXh.jpg on ipad (mobile safari)
It is the most basic html file wtf?
check css and default bg color settings. i see that often on simple pages. 
you can also run it form the command line like so php -f script.php 
i do it sometimes cause i find it easier to read. casting will always hinder performance a bit. if its not necessary then you should probably leave it an array
i've been learning Zend over the last couple months and i do like the fact that im allowed to use only the parts that i need in my project and leave out the fat. so one vote for the Zend Framework
It had no css, so I put some there and added a doctype declaration. Anything now?
http://i.imgur.com/34wXZ.jpg whatever you did, it fixed it ;)
Making a deposit?
For research purposes of course...
I'm in the same boat. It's fun and exiting work. But the experience is never needed for any other projects I come across. 
something about this post, along with the comments about "i'm tied up working on another high traffic (possibly porn) site, otherwise I'd jump at this great opportunity', makes the whole thing seem kinda fake
I've maintained the same point throughout. You make good points of your own, none of which I dispute, and none of which addressed my point. What you can learn from this: 1) I'm not trying to win a debate with you 2) When you have a point to make, don't just reply to someone else making an entirely separate point: context matters
When I was starting out with MVC, no one explained it in a way I understood, I wish someone had written it out like this, (this is from a PHP MVC standpoint as per Cake, CI, rails): None of these examples will work in real frameworks they're just PHP psudocode. **Controllers**. Each controller is a collection of functions (aka actions or methods) called a class. The class' name usually relates to a database table, but not always. So for example, if you had a table in your database called 'page' in your database you might have a controller with various actions that a user can access related to that class (such as viewing, deleting and editing). Your controller class has various actions or methods such as edit, view, delete etc. Each of these actions is a chunk of sub-code like any other function. Example &lt;?php class page{ function view() { //view page code here } function delete() { // delete page code here } } Now, if you wanted to access the 'view' chunk of code on your 'page' controller, you would go to this url: www.yoursite.com/**page**/**view**/ That would tell your framework to load up the collection of page functions then execute the one called view. You might have many different controllers with various actions within one website. Some frameworks offer an easy way to get variables into your code via the url. Let's say you wanted to load a page based on an database ID supplied within the url. In this example the ID is 31234 www.yoursite.com/**page**/**view**/31234 &lt;?php class page{ function view($page_id) { //now we have a $page_id varibale which we can use to select certain stuff from the database } } Controllers never have direct database related code or html within them. Controllers are to react to user interaction (in this case sending of a url, but also cookies and GET/POST data) and based on that user information access various parts of the application such as database stuff (via a model, which we'll come to later), then pass that stuff into the views (we'll come to that later). GET,POST and URL stuff should only ever be accessed within the controller. **Models** Controllers sometimes are related to database tables. Models, almost *always* pertain to database tables. If we carry on with the 'page', example, i'll give you an example of a basic model. Again this is basic, pretend code. &lt;?php class page_model{ function get_from_id($page_id) { $database-&gt;query("select * from pages where id=$page_id"); return $database-&gt;result; } function delete($page_id)) { $database-&gt;query("delete from pages where id=$page_id"); } function get_all() { $database-&gt;query("select * from pages"); return $database-&gt;result; } } As you might be able to tell, the model is just a set of actions related to manipulating a certain type of data. In this case we're manipulating a database table. Models should never have HTML or access GET or POST data. Models should be the only place you access your database from in your application specific code. **Models and Controllers** This is how the relationship between a model and controller might look. &lt;?php // this is our controller class page{ function view($page_id) { $page_data=Page_model-&gt;get_from_id($page_id); } } If a user went to the url www.yoursite.com/page/view/453 Firstly the page controller would be loaded, then the view function would be executed with the variable from the url (453) set as a parameter. Then the parameter passed into the page model and the page database record returned. **Views** Views are your presentation data, mostly HTML. Views should never access the database or models. Views should never access get or post variables or cookies and should only contain the most basic of PHP functionality such as echo and loop control structures. I don't really need to show what a view looks like because it's just HTML and PHP, but here's an example of what one might look like &lt;!-- a_lovely_view.php --&gt; &lt;title&gt;&lt;?php $page_title;?&gt;&lt;/title&gt; &lt;h1&gt;&lt;?php echo $page_heading;?&gt;&lt;/h1&gt; &lt;?php echo $page_content;?&gt; The final part of the jigsaw is to get variables from the controller, into the view **Models, Controllers and Views*** &lt;?php // this is our controller class page{ function view($page_id) { $page_data=Page_model-&gt;get_from_id($page_id); $data=array(); //create a blank array $data['page_title'] = 'Hello everyone'; $data['page_heading'] = 'This is the heading'; $data['page_content'] = 'The Page ID requested was '.$page_id; // now push these variables using an array into the view we made above view('a_lovely_view.php',$data); } } So if our user went to www.yoursite.com/**page**/**view**/1234 the result would be &lt;title&gt;&lt;Hello everyone&lt;/title&gt; &lt;h1&gt;This is the heading&lt;/h1&gt; The Page ID requested was 1234 I hope that simplifies this for you. As an absolute beginner, I'd suggest CodeIgniter because its very, very simple.
Not really very interesting without knowing the standard deviation. If for instance you have 10 people staying 10 seconds and 10 people staying 10 minutes then your average time is roughly 5 minutes, but in actuality you have 10 people who do not engage with your site at all and a problem that needs to be solved. Unless of course it's paying members in which case it's all good. (Unless you have a high cancellation rate)
I have used Zend before, but it seems like overkill for this project. It's more of a prototype, so speed of set up and development is the real factor and I only need a fraction of what Zend offers. That said, my previous Zend work may have been done poorly and I just need to go and relearn a few things.
Good stuff. Thanks for the writeup.
well, depending on the project you might want to use a framework or a cms...sometimes you can solve stuff with a simple WP install.. sometimes you might need more...and Drupal can come handy...sometimes you need to create your own tools...and performance is a concern...if the project is not of the latest kind... the other two options might be good for you. And learning WP is way easier than learning a new PHP framework. Personally... I already use ZF, and I was thinking about learning CakePHP because I found it a bit overkill for certain projects...but 9/10 times, WP or Drupal can help me out there... I would rather learn a second programming language over a second framework
You forgot #3: When someone points out the flaw in your reasoning, pretend you're talking about different things.
thats why i dont write it to my portfolio/cv anymore. when they see it, they think you are too experienced and will leave them, or you will want huge amount of money .. 
When I tell them what I want I usually don't get a reply anyway... Thats why I started my own business... :)
do people still pay for porn?
Check out the CodeIgniter Framework for PHP, it's a really nice implementation of MVC and the user guide is really good and explaining how all these parts work together.
Sure, lots. 1) people who don't want to bother searching torrent sites or don't know how 2) people to whom $30/month is pocket change (or even $8/mo on a yearly) 3) people who know the sites that they like and they like having the entire back catalog available at top speed
&gt;1) people who don't want to bother searching torrent sites or don't know how kinda hard to believe if a person can get online that he can't find site such as youporn &gt;2) people to whom $30/month is pocket change (or even $8/mo on a yearly) &gt;3) people who know the sites that they like and they like having the entire back catalog available at top speed true i guess, i usually just fap to whatever free contents that i found. How do you guys in porn industry fighting the free loader site or home made porn? 
[Read it again.](http://www.reddit.com/r/PHP/comments/hc881/consistency_in_php/c1ubek9)
&gt;kinda hard to believe if a person can get online that he can't find site such as youporn Not to generalize, but I'd say if you're over 45 you probably aren't downloading a lot of torrents and you're more likely to have the disposable income to spend it on whatever porn you like. You won't find "MetArt" style content on Youporn. &gt; How do you guys in porn industry fighting the free loader site or home made porn? Those aren't our customers anyway. If you're happy to fap to whatever is free and out there, more power to you. We try and provide a type of content that isn't the same thing you see over and over everywhere else and it isn't a style that free sites do well.
said C libs are also documented.
You are welcome.
Thank for reply. I guess you guys in porn will need to be more "out there" to edge out the free/pirate stuffs.
pleasant job i see
Congrats!
Thanks!
Very cool! As a avid user of Kohana 3.x I can appreciate this =)
I've had worse.
september? presale? y u not post when released?! :/
I love seeing new pieces of documentation for Kohana. Can't wait to read it.
Repost =P
Any plans to Kindle-fy it?
yeah, already assumed that... that's why you're getting a downvote now and an upvote in sept. :P
Packt is releasing an ebook version, hopefully it will be available via Amazon by the release date. Unfortunately, I have very little information about dates. I found out what the cover looked like today when it landed on presale. I was very surprised to see the Sept release date, but again, I have no control.
Grrr! and Thanks!
Actually that article was pretty bad, because , while at the beginning they give a someone correct MVC definition, the examples the use are **not** MVC. Model is not a ORM/DAO and View is no just a template. And i wold stay far far away from CakePHP if you want to learn any good coding practices.
It might be *nice* implementation , but it still is completely wrong. At best you could call it MVP ( but only if you are extremely drunk ).
Nicely done. But in case of Kohana this is kinda a loosing battle. The 3.2 is soon coming out and there were pretty big internal changes from 3.0 to 3.1 .. they really love to reorganize things in KO core team. Thought at least some parts should stay the same .. i hope.
Something that was a bit of a realization for me is that many times, there are services that are delegated to by the controller. That way the controller simply outlines the process that and the actual details are abstracted.
Is this 3.0 only? I've only just jumped on the Kohana bandwagon, so this would be awesome, but I jumped on at 3.1, so I think this might not be as helpful to me :/
well said
Awesome! Feels validating to see our hard work have a book now!
Just curious - what's better about Kohana than, say, Zend Framework or Code Igniter?
No idea. People round here seem to love it though, but every time I've tried to use it I find that there's no documentation, and that whatever documentation there is is out of date or for a different version or blah blah blah - so it's not been worth my time. It may very well be the best framework out there, but if it's got no decent docs it's useless to me. A book like this would be really useful - but people are saying this book is already outdated - and it's not even out yet. Ho hum.
I used to wonder the same thing and so I usually add a further layer called BLL (business logic layer), where I do most of my processing. Controller calls the various models/BLL methods and passes the data to the view. The view just presents the data is given in the required format. Models simply represent some data. EG database table or form data. I also include static functions in the model that relate to manipulation of that data.
I'm going to come off as incredibly rude here. The point I'd like to make is: No-one I've talked to knows you in the Kohana community, you're not active in the forum, IRC and your github is pretty empty. So my question is, why are you the authority on the subject? 
How are you planning to stay up-to-date? With a release cycle of half a year for a major version, it's hard to have anything that is up-to-date at the time it will be published. This is a problem Sam de Freyssinet (core dev) has too. If this is a Kohana 3.0 book, then it will be obsolete when 3.2 is comming out, and 3.0 won't be supported anymore by the official devs.
While you can create a blog class that encapsulates the entire sites behavior. This is probably not the best way to go about modling a website. When designing an OOP, it is important to not only consider the structure of the end result - the blog - but also the structure of the technologies you are using to achieve this task, and how they interact - DB, server side language, template, routing, client side language. When this is taken into consideration, a design pattern along the lines of MVC starts to make sense. Where the purpose of the various technology interactions are encapsulated rather than the end purpose. This way, you develop a controller class that is extended to handle the routing. A model class that is extended to model data, etc. You might still have some additional object classes to represent complex interactions, but a lot of the time this is overkill.
Kohana is for developers who can help themselfs and don't need anyone to take them step-by-step. If that is what you need, then Kohana is nothing for you. But if you aren't afraid to look in the source and api-browser, then Kohana can be quite an easy framework which doesn't sit in the way (imo).
Sounds like a reverse ad verecundiam argument. Surely, his position in the community does not affect the quality of the content in the book?
I _was_ a technical reviewer of this book.
What does that mean, exactly? Also, the point I am making is that, if you're an authority figure, it does not necessarily mean that the things you write is good, and if you're not an authority figure, it does not necessarily mean that the things you write is bad. Material should be judged on its own merit, not by the position of the author. If the content is good, it's good. 
Wow. Well, I was contacted by Packt to write it and accepted - pretty cut and dry. I did not go "shopping" a book, and did not really consider writing one before they asked me to. As far as the community, there were several technical reviewers that are Kohana dev team and active community members who contributed to the book, a few are listed on the github/kohana page - I think they were the true authorities on Kohana, and really were invaluable during the writing process. 
I loved KO2 but when 3 came out I moved to CI2 because the complete lack of documentation and complete change in core was very unsettling. 
Thanks! You all did a marvelous job with feedback and helping to shape the final draft. I could not have done it without you all.
&gt; As far as the community, there were several technical reviewers that are Kohana dev team and active community members who contributed to the book, a few are listed on the github/kohana page Is it possible to find out who they are?
Hopefully Packt will acknowledge them individually. Feel free to PM me with any questions you may have.
Oh no, I thought the tutorial was good. What link do you suggest?
I'm glad to see someone taking a step to put out more information on Kohana as the official documentation for it is horrible, except for the API. I do notice that the book is based on 3.0 while 3.1 has been out for a while. Given Kohana's history of having site-breaking changes for sub-releases, users will have a hard time using that book for any version other than 3.0
yes, lol at the newcomer. Let's laugh him away from the language like a-holes.
If it's during the same request you could just do: $text = "Thank you for contacting us. We will be in touch shortly"; echo "&lt;script&gt;alert('{$text}');&lt;/script&gt;"; If you need to hold onto until a subsequent request, then you should look into using [PHP's sessions](http://us.php.net/manual/en/book.session.php).
It sounds as though you are looking to do something with AJAX. Check out http://code.google.com/edu/ajax/tutorials/ajax-tutorial.html for a quick explanation
The kohana API docs are thorough. You just need to know how to read API docs, rather than a user guide. I admit, kohanas user guide is a little light.
mail() probably won't work, it doesn't send all the headers you'll need to bypass spam filters. all you need to do in order to put the `echo` in a content box is to replace it with $output = "Thank you......."; then close your php and write the markup you want $output to be contained within and then &lt;?=$output;?&gt; where you want $output (the echo) to be shown. Not sure if thats clear :( 
The feature you're looking for is [sessions](http://www.php.net/manual/en/function.session-start.php). Once you start the session, anything stored in the $_SESSION array is preserved between pages.
I'm not saying it's the best way to do what you want; but, the way to store something for later is in a session. session_start(); $_SESSION['myVariable'] = 'test123'; Then on another page you can: session_start(); echo $_SESSION['myVariable']; 
AJAX is not a technology, it is a buzzword for a collection of technologies put together. And it doesn't sound like he needs this, all he needs is some simple session storage. 3 lines of code +validation 
The publishing process is longer than the development cycles of Kohana. I will try to supplement the text with posts on my blog, and there is a section explaining the major changes between 3.0 and newer versions.
Is it possible to have the form submit without even going to mailer.php. Basically...submit the form, the page stays right where its at but the value pops up in the context box.
What would be the best method to use? And would this be doable? Submit the form but never leave the current page? Then after the form submits, have the output popup in a context box or an HTML window that can then fade out?
Yes but you would need to use ajax with an onclick() to either post or get to the mailer script then it would allow you to output via javascript.
From Wikipedia: &gt;Technology is the making, usage and knowledge of tools, techniques, crafts, systems or methods of organization in order to solve a problem or serve some purpose. That definition makes AJAX a technology. From the OP &gt;output it in say a context box that overlays the main site. This can be done 1 of 100 ways. I was simply suggesting the OP may want to use AJAX and if they did I gave them a quick resource to look at and understand the technology.
I've actually been thinking about making something like this. I'm definitely interested in helping out. I'm mostly a designer/front end-developer but I also have experience in PHP and MySQL. 
"Better" is extremely subjective, my opinion of what's better may differ from yours. Disclaimer: I'm on the kohana dev team I personally like working with kohana because it gives me a nice amount of power without making it difficult to customise. While it's true that the documentation is not as complete as say codeigniter, the code itself is very well documented and (in my opinion) pretty easy to grok. I don't have much experience with ZF and it's been about 3 years since I last touched CI. At the time my reasons for switching from CI were: 1. it was very much grounded in PHP4 2. hard to modularise &amp; reuse code 3. updates were not very regular They may have fixed some of these issues in their latest releases, but **at the time** these were my reasons for switching to kohana. EDIT: slight rewording and formatting
Its still just a buzzword used by management to describe a bunch of technologies that has been around for the past decade or so. And its bloat/over-engineering for such a simple requirement.
I think people would be hoping more for a guarantee than a "try to", after they have invested in a book. Best of luck with it!
Edging out the pirate stuff is easy: it's full of viruses and rootkits, it's a bunch of re-hash of the same content over and over, and periodically they get busted, their money comes directly to your wallet, they go to jail, and you own the hard work they did with your resources.
Oh man. I have your site blocked because it's so badly designed.
[and again.](http://www.reddit.com/r/PHP/comments/hc881/consistency_in_php/c1ubek9)
A quick review of your posts shows me I definitely don't have time to get into a debate with you, so fair enough. We won't hold our breath waiting for you as a customer but if you want to make some specific points, we're always open to feedback.
Im totally lost as I barely know PHP if not nothing about it.
&gt; A quick review of your posts Ah, I made the mistake of talking to you after I dealt with a troll who can't read. &gt; We won't hold our breath waiting for you as a customer Mmm. &gt; if you want to make some specific points Not really. If you're really top N on Alexa (which seems startling, given that I'm only peripherally aware of you as having content floating around in a handful of sites - are you mostly organic search traffic or something?), you're doing better than I did. I made some side porn money, but nothing like that. And a lot of that will have to do with that you have custom content. But, I'll tell you, I haven't looked at a TGP/MGP style site on purpose in, I don't know, five or six years? I mean, it's like talking to the top of the Yahoo! stores. How are you going to tell someone at the top of their game, making more money than you ever did, that they're actually in the beginning of their decline phase, and that soon people won't know who they are any more than they do Persian Kitty or Danni's Hard Drive? Besides, I could just be completely full of crap. I barely hit my sixth digit in porn by year two, and I eventually exited, bored. All I'm saying is, well, GreenGuy had a good run too. Might be time to do something a little more aggressive than &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;img&gt;.
said C libs are also documented. hey, lets see if we can break reddit.
I'm pretty wasted right now so I think I'll go ahead and call it MVP.
the what?
&gt;I'm only peripherally aware of you as having content floating around in a handful of sites - are you mostly organic search traffic or something While I can't give info about traffic sources, MetArt is very old (12 years+) and has hundreds if not thousands of active affiliates (because we convert well). If you don't see our content much it is probably because you're not looking for the same type -- we don't convert from affiliates that show a lot of hardcore because that isn't our niche. &gt;And a lot of that will have to do with that you have custom content. Which is really all that matters. If your site is usable and the content is really good, it will sell. MetArt's design was relatively unchanged for 10 years and it has always been the top site for softcore images. &gt;Might be time to do something a little more aggressive than &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;img&gt;. You won't find anyone here (in the dev team) that will argue and that is a good way to put it. Inertia to change something successful is always tough to overcome.
You should definitely try [fuelphp](http://fuelphp.com/) I'm loving it so far, it's Codeigniter on steroids.
I like to abstract it out a bit more to business logic classes and DAOs (database access objects) in conjunction with the MVC pattern. This works especially well for gigantic websites. For the sake of this example, let's say we're creating a MyAccount page. Business logic makes a lot of stuff reusable. Since we can probably update the users name from the myaccount page, and maybe an admin panel somewhere, we just use User::saveName again, instead of having to rewrite it in the model somewhere else. Apologies for any syntax errors, I just wrote this up and didn't look it over too much. The DAO is another useful abstraction from your database. Say you want to store the name somewhere else besides the User table, say order for example. Then in your business class User::saveName method, you'd just have another call to the OrderDao to save the name there, too. My model is usually the largest class. Some may say I have too much logic in my view, and that may be a fair assessment. Disclaimer: This code is NOT safe, I just wrote it up really quickly and tried to keep it fairly simple. Always sanitize your inputs. class MyAccount_Controller { $model = new MyAccount_Model(); if(isset($_POST['save'])) { $model-&gt;save($_POST); } else if (isset($_POST['delete'])) { $model-&gt;delete($_POST); } else if (isset($_POST['cancel'])) { // some redirect code to go back } $view = new MyAccount_View(); $view-&gt;outputInfo($model-&gt;passInput()); } class MyAccount_Model { private $information; public function passInput() { return $this-&gt;information; } public function save($userInput) { $this-&gt;information['id'] = $userInput['id']; $this-&gt;information['preferences'] = $userInput['preferences']; $user = new User(); if(isset($userInput['name'])) { $this-&gt;information['saveNameResult'] = $user-&gt;saveName($userInput['id'], $userInput['name']); } if(isset($userInput['age'])) { // you get the picture } } public function delete($userInput) { $this-&gt;information['id'] = $userInput['id']; $this-&gt;information['deletionReason'] = $userInput['deletion_reason']; $user = new User(); $this-&gt;information['deletionResult'] = $user-&gt;delete($userInput['id']); } } class MyAccount_View { public function outputInfo($input) { if(isset($input['saveResult']) &amp;&amp; $input['saveResult'] === TRUE) { print &lt;&lt;&lt;HTML &lt;ul&gt; &lt;li&gt;The name {$input['name']} has been saved&lt;/li&gt;"; &lt;/ul&gt; HTML; } else if($input['deletionResult'] &amp;&amp; $input['saveResult'] === TRUE) { print "id " . $input['id'] . " deleted because: " . $input['deletionReason']; } else { print "something went wrong"; } } } class User { private static $userDao = null; private static function getDao() { if(!isset(self::$userDao)) { self::$userDao = new UserDao(); } return self::$userDao; } public function saveName($id, $name) { return self::getDao()-&gt;saveName($id, $name); } } class UserDao { public function saveName($id) { $sql = "UPDATE User SET name = $id WHERE id = $id"; // execute this however you feel like, PDO, whatever.. $result = // result of execution return $result; } } 
Well I figured out how to get a confirmation message to popup and fade out....I have my email form php file that sends the email....how would I process the form data without leaving the index page?
It's a buzzword referencing a standard set of JS functions for handling XMLHTTPRequest or ActiveX (for WIN platforms generally based on COM) to make a secondary http connection. Nothing more. Nothing new invented. Functions (and functionality) already exists. Someone needs to fix that wiki page or delete it altogether.
with Ajax, which is basically the xmlHttpRequest function in javascript. I'm not sure why leetneko is arguing here. This is exactly what people do when you need to update information 'without leaving the page'. 
&gt; If you don't see our content much it is probably because you're not looking for the same type -- we don't convert from affiliates that show a lot of hardcore because that isn't our niche. That would explain it neatly. &gt; If your site is usable Yeah. &gt; You won't find anyone here (in the dev team) that will argue and that is a good way to put it. Inertia to change something successful is always tough to overcome. Really, all you need is someone with a better idea who can execute it portably without hacks.
So to every client you state, or when writing about, or describing something.... &gt;we will implement a standard set of JS functions for handling XMLHTTPRequest or ActiveX (for WIN platforms generally based on COM) to make a secondary http connection rather then just say "we'll make an AJAX call" Ok....call it a "buzzword" (which I think in and of itself is a "buzzword"). It is a term to clearly transfer knowledge. If it is so common and understandable , I will prefer to say &gt;we'll make an AJAX call [ 18 characters ] vs &gt;we will implement a standard set of JS functions for handling XMLHTTPRequest or ActiveX (for WIN platforms generally based on COM) to make a secondary http connection [ too many characters for me to count after midnight ] In conversation where you use "buzzword", why do you not fully dictate what "buzzword" means? &gt;AJAX is not a technology, it is a buzzword should be &gt;AJAX is not a technology, it is a technical jargon that has begun to see use in the wider society outside of its originally narrow technical context by nonspecialists who use the term vaguely or imprecisely. Labelling a term a "buzzword" pejoratively implies that it is now used pretentiously and inappropriately by individuals with little understanding of its actual meaning who are most interested in impressing others by making their discourse sound more esoteric, obscure, and technical than it otherwise would be. &gt;Buzzwords differ from jargon in that jargon is esoteric but precisely defined terminology used for ease of communication between specialists in a given field, whereas a buzzword (which often develops from the appropriation of technical jargon) is often used imprecisely among non-specialists. you know, if you wanted to be precise 
"Buzzword" is pejorative. It implies an intentional propagation of a false or arbitrary definition or description of what a given process is for the purpose you describe: "impressing others by making their discourse sound more esoteric, obscure, and technical than it otherwise would be", generally for the purposes of marketing up a product or service. ... and your point? Do you mean to suggest the term "ajax" is actually familiar slang and not misused in the marketing world at all, or what? And, is conservation of characters is an abstract summary really that vital as you say is is? God forbid I go over 18 characters. C'mon, you went _way_ overboard in your reply.
you could always do something like serializing your data array and base64 encoding it if you don't want to use physical session on each page and make sure when you do another post that it contains the base64 string in it. which can later be decoded and unserialized again. Not saying this is a great approach but .net uses it for a while, or something similar to it.
As everyone already stated, the best way to do it is with AJAX. Here's how in n easy steps: 1) learn about AJAX, get some lib (using jQuery? it has its own, not using jQuery? I recommend feather Ajax) 2) construct the form, add an JS function that submits the data from the form to a .php file - the file is basically you if(isset($_POST['submit'])) part 3) make a callback on the ajax request that will display the box/overlay with the content returned from the .php file Don't really like / want to use AJAX? No problem - just add an hidden iframe and submit the form to it. Add some js validation to the form and display the box/overlay after submiting it.
Have at it bro - redefine 'technology' for the world. http://en.wikipedia.org/wiki/Technology
No you wouldn't. You could just pick it up from the $_POST variable. It's better to post to a separate script though, because your code will be cleaner that way. Actually you should use MVC if possible, but meh...
Why would you recommend using an iframe? Ugh.
Why not, really? Do take notice that AJAX is my first choice, but using iframe would allow you to implement a similar solution for user that do not have JS enabled (aside from displaying the overlayer with the success/failure message).
http://www.reddit.com/r/PHP/comments/ioon0/hold_a_value_after_form_is_submitted_and_output/c25f5n5 it sent 2 i deleted 1 of them, his reply above is the reply to that post. He asked if it was possible to do without changing the page. Ajax would be a way of doing that. He already has the code in order to do it to a second page. All he was asking was how to store the echo. 
Iframes are considered back practice. Basically, don't use them unless you absolutely have to. Note: I've never *absolutely had to*, so the chances are, you shouldn't either.
I You dont need to tell me that, but if it's required that the form work this exact way, and you want to make sure it works for people without JS it is a valid - though not recommended - alternative. Sometimes you just need to say "fuck this shit" and put a &lt;marquee&gt; on the page ;)
Use the "IN" method, it'll make you code easier to read and will be more efficient within SQL.
I just needed to use IN the other day, it worked perfectly
If You aren't using parameterized queries and the ids aren't direct user input then You could do something like this: $query = "select * from mytable where id in (" . implode(',', $ids) . ")"; Definitely better than separate queries as you only need one connection to the database. 
Do bear in mind that SELECT ... FROM ... WHERE id IN (SELECT id FROM ... WHERE ...)
&gt;where ID = 4 OR ID = 56 OR ID = 67... is significantly slower than IN() on a medium/large dataset and multiple queries even more so.
Try running the following queries and attempt to analyze the difference EXPLAIN SELECT .... FROM ... WHERE ID = 4 OR ID = 56 OR ID = 67... EXPLAIN SELECT .... FROM ... WHERE ID IN (4, 56, 67, 87, 142, 842, 900) 
Use IN but do realize that different db engines have different limitations of how many constants can be listed within an IN statement. And performance can degrade exponentially if you go too high. So if you start seeing a huge performance hit, it's time to load your values into a table and do a IN (SELECT) or an EXISTS.
HELLO FRIEND I HAVE SOLUTION $size_of_array = 0; foreach($ids as $id){ $size_of_array = $size_of_array + $size_of_array; } $i = 0; $results = array(); while($i &lt; $size_of_array){ $id = $ids[$i]; $result = mysql_query("select * from table where id = '$id'") or die("MYSQL ERROR"); array_push($results,$result); $i++; } foreach($results as $result){ while($row = mysql_fetch_array($result)){ echo $row['name']; } } 
FAKE. I real bad developer wouldn't have set size_of_array to 0 before using it. 
Don't forget to index!
This is much worse: $size_of_array = $size_of_array + $size_of_array;
Yes, a bit more efficient in SQL than any alternatives.
Sadly, mysql is horrifically slow at subqueries when the going gets tough. Everyone's advice about IN() is the better answer.
MySQL is historically crap at everything. That's nothing new. If you want decent performance, you have a crapload of finetuning to do anyway, and at certain complexity MySQL begins to suck so much I'd rather go w/PostgreSQL anyway.
Uhm... which is line 92? and whats does $aliasnum contain? That would help. If it use to work.. and the only thing that potentially changed is the contents of your db.. then that should be a clue as to what the problem is.
*whoooosh* What's wrong with /r/PHP? How does this comment have positive karma? *checks username* +1 to you sir. 
Line 92 is echo broad2gene(mysql_result($aliasresult,$i,"broad_ID")); Every single following line with a mysql_result triggered it. I checked the database (I presumed a column name was changed) but that isn't the cause. I plugged the query into MySQL by hand and it gave a result. Aliasnum is just the number of rows: $aliasnum=mysql_num_rows($aliasresult); I checked it too and it is an integer greater than zero. I think I'm going to tinker with some error checking in the code to narrow down the impetus more precisely.
Don't worry guys! I made it secure and OOP! class MySQLResults { function get_results() { $sizeOfArray = $this-&gt;sizeOfArray($this-&gt;ids); while($i&lt;$sizeOfArray){ $id=$this-&gt;ids[$i]; $result=mysql_query("select * from table where id = '$id'") or die("MYSQL ERROR"); array_push($results,$result); $i=$i+1; } } function printResults($results) { while($row = mysql_fetch_array($result)){ # The field name is name echo $row['name']; } // Return true to let everyone know this worked right. return true; } function sizeOfArray($array) { foreach($array as $item) { $size_of_array = $size_of_array + 1; } return $size_of_array; } } $results = new MySQLResults; $results-&gt;ids = array(1,2,3,4,); $success = $results-&gt;printResults($results-&gt;get_results()); if(!$success) echo 'There was an error.'; Edit: Added some debugging with $success.
Use IN, it's the smartest way. $query = 'SELECT * FROM `table` WHERE `id` IN (' . implode(',', $ids) . ');';
This is one of the best posts I have ever read in this subreddit. Thank you for taking the time.
OOP with a good jizzing of procedural code!
What, that's how the pros do it right? I mean I read it on a blog and copy+pasted them all together! Not much exaggeration, that code was loosely based code I've seen when I'd be freelanced to fix code done via outsourcing. My favorite to this day was one guy that explicitly assigned every single by hand, of 100+ items. That wasn't necessarily the bad part, the bad part is he assigned each item first, then did array_unshift to put it into array... Yet obviously that puts everything in backwards so he assigned his array in reverse order. To this day I'm still at a lose of words...
This code looks straight out of the 90's. Sorry, but sometimes the truth hurts. Please rewrite using mysql_fetch_assoc() (and not multiple mysql_result()'s) or better yet, mysqli or pdo_mysql.
XAMPP has had lots of security issues in the past actually. I recommend WAMP.
Unless I'm misunderstanding, this points to there being an error in **your** code. You can try to deflect blame all you want, but ultimately, it's your own crap work that has caused your problem, not the sysadmin's. Also, you should _never_ have `display_errors` enabled if this is a live site; **you** need to learn how to test code before you deploy it, and to use logging. 
Link?
No no, the code works 100% on my development server and on my primary production server. This one is a mirror for some customers that can't reach the other network. The PHP installation was not set up properly at all, and since I'm not allowed any kind of shell access or access to error logs, I need display_errors on so that I can see what's going wrong.
While the guy may be dumber than you, I'm not sure that not knowing how to do this is proof. But, I've had those thoughts before so, I'll give you the benefit of the doubt
ini_set doesn't work on this server. However he has it set up, I have literally NO control over it.
It's not just this, this is just the most recent thing that's hindering me.
Thank you for this! I just wrote a page where I needed a very specific set of results for a select box. This is great!
Same output. :C
Same output. :C
Have you checked if the mysq_num_rows values is correct? Does that query return the same amount or rows as what mysql_num_rows return? If you don't want to refactor so much code would you consider changing the for to a while($row = mysql_fetch_array($aliasresult)) or doing closely the same using mysql_fetch_assoc? You seem to be trying to jump to an inexistent row OR you've stumbled into a very bizarre sort of bug screwing up the resource. You should also try to move from a deprecated and old library like mysql to (at the very least) mysqli or just jump into pdo.
No offense taken - I've only been programming in PHP for a month or so. It's a summer bioinformatics project and the book I've been working from, Welling and Thomson, while excellent pedagogically, is a bit outdated.
You can do it with parameterized queries too, it just takes a bit more effort as you have to insert a question mark for each value and then add the ids to the parameter collection.
Sounds like he knows *exactly* what he's doing...
My eyes hurt from looking at that code. Code is pretty sloppy - first recommendation is to do $row = mysql_fetch_assoc(). That way you're accessing the $row variable instead of calling mysql() all the time. ie, while($row == mysql_fetch_assoc($result)) { echo $row['broad_ID']; } instead of echo mysql_result($aliasresult, $i, "broad_ID"); As far as the error you are getting, the internal pointer/coutner to the result set either can't find that row or field due to $aliasnum, $i, or the mysql_result set changing.
True. I just was offering a quick and dirty solution using the non-parameterized version :)
Simple solution. Print out phpinfo(), highlight the differences and let the sys admin take care of it. Let your boss know the ball is in his court since you have no access to change those settings. You're just as bad as the sys admin for not being able to come up with a solution to this minor issue than he is not knowing or wanting to turn on display_errors.
Have done that. Waiting on my leadership to actually find a new host now as this one won't adjust things the way I need them. Not so simple now eh? Pointing blame is easy when you think you know more than you actually do.
Upvoted for username if nothing else. Thanks for the tip, though. It's stuff like that which helps me out.
He's a web*master*!
I would suggest to take look @ http://r.je/mvc-in-php.html and then do some reading on theory behind Model2 MVC.
WAMP: http://www.wampserver.com/en/ Some people hacking XAMPP servers: http://www.rohitab.com/discuss/topic/19787-hacking-a-poorly-configured-xampp-installation/
Thanks!
It is simple. You're just throwing a hissy fit and making the situation more complicated than it needs to be because others won't cave into your demands. **If the server admin is smart enough to disable ini_set at runtime, he's smart enough to turn on/off display_errors.** Besides, like others have mentioned, it's not hard to trace down the issue in code. 
I stopped reading after seeing how routes were handled. Seems to be an unconventional way of handing off requests to a controller/view.
Never. I'd say "fuck people who aren't using javascript".
couldn't you just turn on error reporting from htaccess? php_value display_errors "On"
I think underscores result in code that's a lot less readable. I used to use them and then tried writing an app with camelCase and it came out a lot better to look over. I use camelCase for everything except functions (not methods), and I don't use global variables as that results in messy code. Working in objects means "$this-&gt;variableName" is a lot more distinguishable already. If I really need a global variable, I have a static class called "Config" or something and access variables inside it like "Config::$variableName" The reason that I use underscores only for global functions is to mimic the PHP language's coding style, like "parse_url()" or "mysql_fetch_array()".
I actually had the same issue, the routing was bad. The guy actually changed it but it looks like the docs haven't been updated yet... routes behave more like you'd expect now. EDIT: actually he did update the docs, I guess both ways work. If you look under the heading "Organizing Routes" you can now use something other than a monolithic file.
I like the Zend class name structure. Using it means you're less likely to run into class name collision.
I like it too, but it sucks to try to use other libs that have underscored class names.
First of all, I was venting about it because I was frustrated, not throwing a hissy fit. Also not making the situation more complicated than it is, and it's not my demand, it was a request. He's not smart enough to disable ini_set at runtime, his hackjob of a php installation just has tons of shit wrong with it. And it is difficult to trace down the code when you get absolutely no errors.
Maybe, didn't try that. Kinda assumed it wouldn't work based on literally nothing else working, ever. I got it all fixed up anyway though.
It's bad. - procedural code ( yes , static classes are procedural ) - DB's by default open for injections - unusable routing - weak access control - no unittests ( and code it self - untestable ) 
I'm assuming it committed suicide due to being horribly written.
You can always throw a `die('blah');` in there at various places to see how far it executes before erroring.
Use IN and **don't ever** use multiple queries if you don't have to.
Totally went over my head too.
... $ids = array_map('intval', $ids); // Then implode() as normal
Would you give some specific details as to which DB's you've had this problem with, and what kind of thresholds?
Regular users take 6 minutes, and members take 30 seconds... you have some kinda secret stash for members?
Operator `IN` is a terrible performance hit outside small groups. Generally, you're better off making and joining to a temporary table, with something like mysql&gt; create table foo (id integer, label varchar(50)); Query OK, 0 rows affected (0.14 sec) mysql&gt; insert into foo(id,label) values (3,'noshow 1'), (4,'show 1'), (5,'noshow 2'), (56, 'show 2'), (57, 'noshow 3'), (67, 'show 3'); Query OK, 6 rows affected (0.07 sec) Records: 6 Duplicates: 0 Warnings: 0 mysql&gt; select * from foo right join (select 4 as matchid union select 56 union select 67) as vbar on foo.id = vbar.matchid; +------+--------+---------+ | id | label | matchid | +------+--------+---------+ | 4 | show 1 | 4 | | 56 | show 2 | 56 | | 67 | show 3 | 67 | +------+--------+---------+ 3 rows in set (0.00 sec) If you also want to see the rows that weren't matched, switch to a left join. mysql&gt; select * from foo left join (select 4 as matchid union select 56 union select 67) as vbar on foo.id = vbar.matchid; +------+----------+---------+ | id | label | matchid | +------+----------+---------+ | 3 | noshow 1 | NULL | | 4 | show 1 | 4 | | 5 | noshow 2 | NULL | | 56 | show 2 | 56 | | 57 | noshow 3 | NULL | | 67 | show 3 | 67 | +------+----------+---------+ 6 rows in set (0.04 sec) For what it's worth, questions like these should be in /r/sql.
In has a terrible performance impact. Prefer to use a join to a temporary table.
You can just make a temporary table instead. http://www.reddit.com/r/PHP/comments/ipdal/best_way_to_select_multiple_separate_ids/c25p8f8
Try benchmarking them.
After that, try increasing the size of the id list, using a large bulk of generated data to filter against, and add a third strategy: `select ... join (select 4 as id union select 56 union select 67) as tempT on foo.id = tempT.id;`
They're both terribly slow. Compare joining against a virtual table assembled with union, especially as the data grows.
Dumber than you? I don't think so. You're asking to have _display_errors_ on in production; That's a huge mistake and you should know that. What you should have is an error logger that writes log files. If you're really smart you can even write your log messages to syslog and then have something like OSSEC email you when an error occurs. While your sysadmin does sound fairly stupid, he hasn't done anything wrong _yet_ so I'm giving him the benefit of the doubt.
I know rolling your own framework is a good way to learn to programme but PHP doesn't need more frameworks. Really. Just stop.
Can't tell if master-coder since birth.. (=_=) ..or just bad manners.
Dunno why you were being downvoted as that was entirely your point.. I understand your problem and know it all too well.. Good luck in getting it sorted! *Edit: I see it's my turn now.. cool guys..*