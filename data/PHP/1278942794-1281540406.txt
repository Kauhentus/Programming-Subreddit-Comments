In MySQL, you basically have two choices: 1. Store it as a UNIX timestamp (10 digits). 2. Store it as a MySQL timestamp (YYYY-MM-DD HH:ii:ss). The first is often easier to calculate things with (due to being seconds) while the second requires some trips to strtotime() and date(). MySQL timestamps are easier to read and MySQL has several built-in functions for dealing with them (Get the month in which post 1443 was made, what day of the week was 2010-04-02, add 10 months to a date and it works with SELECT * FROM table WHERE posted_date BETWEEN X and Y). MySQL timestamps are also Y2K38 proof. :o)
If you at any point plan to save dates prior to Jan 1st 1970 (eg. birthdays) you should go for a specialized datetime type for the database of your choice - which in case of MySQL is [DATETIME](http://dev.mysql.com/doc/refman/5.5/en/datetime.html). Be aware that the first TIMESTAMP column in MySQL is automatically updated whenever you update a row, which is not necessarily what you want (I usually only utilize the TIMESTAMP column for "modified" fields) Also, if you're using some sort of client side calendar, eg. jQuery Datepicker and use that to generate timestamps make sure you add logic to handle different timezones.
The first TIMESTAMP column is only automatically updated if you specify "ON UPDATE CURRENT_TIMESTAMP". By default it does not, in my experience. 
Ah yes, I believe correct. phpMyAdmin adds that by default though, but that's hardly MySQL's "fault" :) Edit: Actually, I just tested this on MySQL 5.1 and it indeed enabled by default: Server version: 5.1.30 MySQL Community Server (GPL) Type 'help;' or '\h' for help. Type '\c' to clear the buffer. mysql&gt; use test; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql&gt; CREATE TABLE `ts_test` ( `ts` TIMESTAMP NOT NULL ); Query OK, 0 rows affected (0.00 sec) mysql&gt; DESCRIBE `ts_test`; +-------+-----------+------+-----+-------------------+-----------------------------+ | Field | Type | Null | Key | Default | Extra | +-------+-----------+------+-----+-------------------+-----------------------------+ | ts | timestamp | NO | | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP | +-------+-----------+------+-----+-------------------+-----------------------------+ 1 row in set (0.00 sec) mysql&gt; 
I strongly prefer MySQL timestamps to the UNIX equivalent (for storage). It all depends on how you're using the information in your application(s). If you find it easier to work with a value in the "YYYY-MM-DD HH:ii:ss" form instead of a ten digit integer, the DATETIME data type is for you. I've gone that direction because of the dozens of date fields strewn about various tables are sometimes viewed directly by users with limited SELECT access for building their own queries and a date in tat format requires no translation to be human readable. Also, for duration, you're going to need two columns, of course: one for the start of the event and one for the end. Determining duration straightforward subtraction with UNIX timestamps but MySQL's date functions will let you achieve the same result with DATETIMEs.
Its inner, think of how it would return the values and what you are passing. In this case you are passing the output of stripslashes($var) to the input of strip_tags this is the same as doing $var = stripslashes($var); $var = strip_tags($var);
you are correct, the inner function call would be processed first and the output would then be passed into the outer function.
Strpslashes are needed now because magic quotes are gone right? The PHP book I have used those two functions every time it wanted to sanitize data? Shouldn't stripslashes be used when pulling data out of a database?
I'm surprised hardly anyone said dreamweaver. 
When was your book published? What version of PHP? Use PDO and keep magic quotes off.
The name of the book is PHP 6 with MySQL 5. What is PDO?
It's fine to learn the old way, but parametrized queries using PDO are the *right way*. PDO ships with PHP 5.1 http://php.net/manual/en/book.pdo.php http://www.php.net/manual/en/pdo.prepare.php 
&gt; storing the duration of an event You'd store the starting date and time of the event as a timestamp or datetime. Make sure to read up on your specific db engine's limitations on date and time types and pick the one that best suits your needs. You *could* store the ending date/time, and calculate duration using a diff function, but if the user ever wanted to move the start date around, then you'd have to also remember to move the end date. Otherwise, to store the actual duration, you would first need to consider what the atomic unit of time measurement in your system would be. For a calendar type application I suspect you'd probably want minutes. Typically you'd want to store your minutes as an integer, unless the db engine in question has some specialized duration type. 
MySQL timestamps also make browsing the DB easier, which is often necessary when debugging. You'll probably need to convert the Unix timestamp to get something meaningful out of it, unless you work with them a lot and can get a general idea of date/time.
Why is it better? I went over a couple pages of documentation. It just seems like another way to read and write from databases. It seems a little bit more complicated, and maybe more efficient for larger queries. With this $sql = 'SELECT name, colour, calories FROM fruit WHERE calories &lt; :calories AND colour = :colour'; $sth = $dbh-&gt;prepare($sql, array(PDO::ATTR_CURSOR =&gt; PDO::CURSOR_FWDONLY)); What do ATTR_CURSOR and CURSOR_FWDONLY mean? The PHP documentation is pretty lacking. Some of the pages are completely blank such as Requirements and Resource Types.
There are many reasons, but the first for new developers is it's injection safe and you don't need to mess around with adding and stripping slashes. Here is a better tutorial to get you started: http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/ 
GORGEOUS :) +One Million Upvotes
If that doesn't work for you, I probably know why. For example, class lol was defined to only work with divs, etc.
Oh it totally worked! All sorts of sexy now. I have a different problem if you're feeling brilliant. Along the same longs.
Why would Jan 1st 1970 have anything with unix timestamp to do?* You do realize that time_t is a *signed* number, and therefore also goes negative? If he plans to store dates before *1901-12-13* however, then he should think about using DATETIME and friends. But then again, people who were born close to 110 years ago tend to be not-so alive :) Just an FYI, the more you know :) *Of course, 1st Jan 1970 is tied to unix timestamps by definition, but it's neither the lowest nor the highest second producable with it. Bad wording on my part :p
The hell, downvotes? This *is* what it's there for. A timezone, leap-year, leap-second, leap-whatever independent way to track time from early 1900s to late 2030s, in its current form. If you plan to recompile your software during the next 20 years, chances are it will automagically expand to 64 bits, especially if you're using an interpreted language. It's why it's there.
Thanks
Sure, go for it.
If using a Unix timestamp, just remember it defines the time in the GMT timezone. If you don't use a second column in the database to define the timezone at which the event takes place, then you can run into all kinds of problems further down the line. If an event starts at 9am in New York, then the timezone needs to be stored so that the time can be displayed in New York time when it is viewed.
Most versions of PHP around now will accept negative integers to go back beyond 1970.
I've never considered PHP-related certificates to be worth anything. It shows that you know the language, but if I were an employer, I'd rather see examples of your work.
Full Disclosure: I'm a co-author of php|architects Zend PHP 5 Certification Study Guide (yeah, go buy it, kthx) First: If your employer is offering to pay, DO IT. It's good for them to get some validation on their choice of employee and it's good for them to see you applying yourself to learning (even if your current experience means you don't need to learn more to pass the cert) The certification isn't *hard*, but it can be a little tricky, and will be easier for someone who uses PHP day-to-day in a professional capacity. The current iteration of the exam (as opposed to the first one) is less "remember function arguments" and more "how to do things properly". As someone who interviews PHP developers on a regular basis, as well as someone who took both of the exams (PHP 4 and PHP 5) and as a co-author on the study guide, I can say that passing the exam doesn't **impress** me, it does however give me a very good baseline point from which to start. People with ZCE go towards the top of the pile when deciding who to interview. On a final note, Zend is currently about to start beta testing a PHP 5.3 Certification, and I can't comment (yet) on how that exam compares to the current PHP 5 cert, so you might want to wait a couple months :) - Davey
Wow. Thanks! I actually have your book sitting in front of me at this very moment. *"As their name subtly suggests, operators are the catalysts of operations."* Killer material. The reason I wanted to know some more about it is because one of the other programmers that I work with tried to get his cert a few months back and failed. That, and I really want to put 'ZCE' on my business card.
If I were you I would study game development in a language that is more suited for real time server development. Check out gamedev.net for tutorials on game engine design and multi-player client server design, state machines etc. I would seriously consider Python instead of PHP. You can write your core logic engine and then use any number of libraries (twisted, tornado, web.py) to handle requests. Plus you will learn Python which you won't regret. I'm a PHP dev by day but I love Python, it's a pleasure to code with. Languages are like tools and in this case I would say PHP is the wrong too for the job.
&gt; The current iteration of the exam (as opposed to the first one) is less "remember function arguments" and more "how to do things properly". WHEW! For the life of me, I can never remember a good portion of the built in functions and constantly refer to the manual (which is one thing I like about certain IDE's, where they have the little tooltip with the correct function name and it's info).
I have the ZCE and the ZFCE. Ironically, one week after getting the ZFCE, I stopped programming (professionally) in PHP altogether. My employer opted to go the McProgramming .NET route for most of our new work.
I'm so sorry.
If they're offering to pay, do it. It won't hurt.
You're not the only one. I'd be interested in a stat on how many PHP devs have a firefox keyword search for the manual. It has to do with the lack of consistency in function names and arguments. PHP has a long history such that some functions match their libc-derived counterparts and others either draw from other languages or were just made up.
I have my ZCE cert, and it's a convenient ice breaker to bring up when trying to score a job or contract (if someone is specifically looking for a PHP developer, it's nice to be able to just come out and say "I'm a Zend Certified Engineer"), but it doesn't really mean anything beyond the first two minutes of a conversation. I'd place it as slightly more impressive than BrainBench scores (which I've also scored as "Advanced" on, but are nevertheless completely devoid of utility) but not as impressive as having commit access to Doctrine. The bottom line: I'm glad I have it, but if I didn't, I probably wouldn't be any worse off.
I think the Zend PHP5 Certification test sucked as a gauge of proficiency, and I did fail it the first time. I now have the Zend PHP 5 Certification and it landed me exactly 1 interview where I was sought out and who knows how many projects/jobs. I agree, Doctrine commit access is much more impressive. 
FWIW, I don't have a quick lookup for the manual because Netbeans shows me the manual in auto-complete: http://screencast.com/t/OGJlZjkxNW Also, inside the parens, you can hit Cmd+P (Ctrl+P) to see the args: http://screencast.com/t/N2E1OGU1MTk - Davey
Meh, anything complex isn't something you can review in an interview; as I said though, the cert gives you a baseline from which to stage the interview. - Davey
C# or VB.net? I would rather code in C#/ASP.net webform or C#/ASP.net MVC than PHP.
It's not enabled by default for me. I can't really remember ever seeing this as default, though I'll admit I don't administer a lot of different servers. I'm running 5.1.41 (phpMyAdmin reports this as 5.1.30) on MAMP. Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 12 Server version: 5.0.41 Source distribution Type 'help;' or '\h' for help. Type '\c' to clear the buffer. mysql&gt; use test; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql&gt; CREATE TABLE `ts_test` ( `ts` TIMESTAMP NOT NULL ); Query OK, 0 rows affected (0.00 sec) mysql&gt; DESCRIBE `ts_test`; +-------+-----------+------+-----+-------------------+-------+ | Field | Type | Null | Key | Default | Extra | +-------+-----------+------+-----+-------------------+-------+ | ts | timestamp | NO | | CURRENT_TIMESTAMP | | +-------+-----------+------+-----+-------------------+-------+ 1 row in set (0.01 sec) mysql&gt; 
No, no. Vim is a man's tool, and you can also get a debugger with it.
I've just started using Kohana, coming from Zend and before that Prado. I'm seriously loving this framework. Not as restrictive and confining as Cake, not as loose and all of the place as Zend.
&gt; It looks like my variables and functions already follow the PEAR naming convention, I just need to capitalize the class names. I'll do that! Yes, I was a bit unclear there. I specifically meant the naming of files. If you have a class `Foobar`, it should be in `/Foobar.php`. &gt; If I remove the output formatting hooks there won't be much code left in the model, what is supposed to go in there? Very good question. The model should contain all the logic of your application that doesn't relate to presentation. For a typical web application, the model revolves around database access, but it could also be logic that does calculations and it could the facades to external services. In general, the model is such a diverse thing that it doesn't really make much sense to have a model base class. In some frameworks, a more narrow understanding is used for the concept. Here a model is an object that represents a single logical entity, which is persisted into a database. There is a lot of misunderstanding due to the fact that people use the concept of "model" in these two, very different senses.
&gt; Are you fucking stupid? That is exactly what ASP.NET is. A massive framework with a ton of magic going on behind the scenes. This. Not sure why you're voted down ohnoyoudidntyo (nice name). Just to keep this in the PHP light, the Prado framework was a whole fucking bucket of ASP like magic, but once you run out of spells, you're stuck with a system that's bloating at the seams of the framework. You never, *ever* want to depend on magic. A good framework doesn't cast spells, a good framework provides tools which allow you to handle the general nuances of specific web software constructs without substituting algorithmic logic and structure. Zend is the perfect tool for this. Leave the magic for Harry Potter and stop being afraid to write code. Programming is not for pussies.
I have mine. I didn't think the test was very hard at all, just studied up with one of the guides for about a week. It hasn't been very useful except the stuff that I learned while studying, which you could probably learn for free. But I guess it could be a tipping point for getting hired given equal experience and such.
I have a textpad macro set up so I can highlight the function press Ctrl-1 and be taken to the php.net page in firefox :) Here's some [instructions](http://www.puremango.co.uk/2010/02/textpad-php-manual-lookup-tool/).
As long as the session data isn't something the user shouldn't see and can be manipulated without having any effect on the server response, it's fine. However if you are storing IDs, expect them to be tampered with (which may result in erroneous database insertions).
Reasons not to do this: * It's insecure-- people can tamper with their session data. * It's slow-- The cookie(s) containing session data could grow fairly large and these cookies will be send with *every* HTTP request, even static files such as Javascript files and images, unless you specifically address that problem. (as opposed to only sending a session identifier). * It offers less usability for the user. Storing the data server-side allows users to maintain state even if they visit from different locations/devices/browsers. Storing everything in a cookie will not allow that. As for speeding up your current session table, what RDBMS are you using? Is your table in memory on on the HDD?
Any reason not to use the built-in [session support](http://us3.php.net/manual/en/book.session.php) instead of keeping up with your own cookies? Or is that what you're doing now and you're trying to offload storage to the client?
Thanks. It's not a very complete answer, just a few things off the top of my head. Edit: To properly answer the question, evertrooftop: What type of data are you storing in sessions, and what does your current session table look like?
Hi Retrorock, Regarding 'it's insecure'. If people tamper with their cookies, their signature would automatically become invalid. Only if you 'crack' hmac-sha1 or if you can find the server-side secrets. you can change the cookie without the server 'knowning'. Slow / usability: In my specific case I only need to store a user id. I'm not aiming to replace $_SESSION for every use-case, I'm just wondering if I can replace it for mine.
We use the built-in session system at the moment, with a mysql backend. One of the things I'm looking at is the solution in the blog post, or perhaps some NoSQL solution. There's just too much, and I want it out of the mission-critical database infrastructure. 
In the example on the site you wouldn't actually be able to tamper with the data. If you change the cookie the signature no longer matches (figuring out the correct signature is practically unguessable). 
Please explain the reason why you'd like to store the userId in _COOKIE rather then _SESSION.
About your last note. We are using a multi-master MySQL database. Storage engine is InnoDB. Because the table is so huge, io is quite big when trying to prune old sessions. We've stopped doing that for a bit and running into the 100M rows. Bit too much for comfort. I see MySQL as mission-critical, important data. There's a solid backup system, and even off-site replications in a secondary data center. I really want sessions out of this infrastructure. I'm looking at a couple of options, this being my pet favorite. Others are some nosql approach, or memcache (and accept that sessions might get lost from time to time, we're not a bank so it's ok.)
Priorities and problems change as your site grows. I'm looking at different ways to store sessions, this being one of them. 
NoSQL is definitely the way to go, since a session is a key-value thing. Have you tried Memcached as your session backend? The PHP extension for Memcached even contains its own session handler, so you can switch to Memcached with almost no change to your code. Or maybe something just as simple, such as Redis.
If you only want to store the user id, why not just store it in plain text in the cookie? A web app that I'm responsible for does it like this (three cookies): * userid: int * password: signed, hashed user password * sessionid: session identifier If the user with this userid authenticates with the given password hash and their current database session matches the sessionid, then they stay logged in. All additional session information is in the sessions table.
Yea it's definitely high up there for me, even though it would be a very new field. Memcached-only is also something I looked at. I'm really just exploring. There's some heated resistance against storing it in a cookie, but so far I think it might mostly be because it's generally not considered a great practice. I'm trying to think a bit out of the box though. 
The hash signature is a clever idea, but I'd prefer to put encryption on top of the whole thing. That way, the ID won't even be visible. After all, mcrypt is just a function call away.
I missed that, thanks
The problem is in "their current database session matches the sessionid, then they stay logged in". I'm trying to remove the need for a 'database session'. There's no reason to store the password in the browser (signed or not). I just need some basic identifying information, as well as a timestamp so I know when the signature was generated (and I can expire it if it exceeds a certain timeframe). When it comes to that, I'm just following the lead from for exampel OpenId and OAuth, which use a similar approach. 
Do you have 100M users online at once, or is the 100M mostly old sessions? I would use the MEMORY storage engine for the sessions table, and so it doesn't get too big, make sure to only store relevant information in it, have sessions time out in 15 minutes or so, and clean up old sessions with a cron job every 30 minutes or so.
IMO, the probability that a session in memcached will get lost is about the same as the probability that a session in a cookie will get invalidated. Both are negligible in typical use cases, unless your memcached server is heavily overloaded.
This definitely my mind. The reason I went for a message-digest approach is really just because Amazon AWS and OAuth use it. Because of that I just felt a bit safer, but I don't know why either would be better. One thing that crossed my mind was that AES-256 is intended to hide sensitive information, which is not actually something I care about. A hash on the other hand can never be reversed to the original (which would include the server-side secret).
Another thing: If you store your sessions in cookies, you won't be able to run interesting statistics on session data, such as "How many members have been online in the last 5 minutes?" If you want such statistics, you'd have to store at least some data on the server side, in which case why not just store the whole session on the server side. (By the way, simple key-value stores such as Memcached also makes it very difficult to run these statistics.)
Memcache can go down. We also use memcache for other stuff. If there's a lot of different slab-sizes things could get expired quicker than expected. If you'd dedicate a memcache cluster for it this obviously wouldn't be an issue though, but yea that's just where my comment came from.
We use [sharedance](http://sharedance.pureftpd.org/project/sharedance) to store sessions at work (I use memcached personally). It's rock solid and TCP accessible.
I also use phpDesigner. It's fast, offers FTP support, and has great debugging, all in a lightweight package. The only part I miss is code folding :( But as far as editors go, it's either this, or Notepad++ with the FTP_Syncronize plugin.
sounds neat, how does it work?
You should turn error reporting to E_ALL. That way you'll get notices which aren't really errors, but just tell you how things should be done. In this case, the following notice would be returned after trying the 'working' code. PHP Notice: Use of undefined constant trends - assumed 'trends' in /home/robocatdog/blah.php on line Anyways, your problem is caused by not putting array keys in quotes. $decode[trends] works because when PHP can't find the "trends" constant, it just uses "trends" as a string. $decode[trends][2010-07-14 01:40:00] doesn't work because "2010-07-14 01:40:00" is not a valid constant name so php's parser throws the error you got. To fix this error, simply put quotes (either single or double) around array keys. Like so: $decode['trends']['2010-07-14 01:40:00']; Also note that even though the above code is how it would work, it doesn't work now because it looks like trends updates every hour. To get the current trend array I'd do something like reset($decode['trends']); The [reset](http://us.php.net/manual/en/function.reset.php) function simply returns the first element of an array (and sets the pointer to the beginning, too, but thats not important).
Doesn't using sessions tie the user to a specific server? Thus, it doesn't scale well when you have to do load balancing. 
Also, as a general tip, always use single quotes '&lt;String&gt;' instead of double quotes "&lt;String&gt;" as then php won't look for $Variables in the string to replace with the variable values. It is a minuscule saving, but every bit helps, and it is good practice. This includes your URL at the top.
Here's what I did on mine. I stored the user ID in the cookie, and a hash of thier password's hash (not their actual password, or the password's hash in the database) When a user goes to the website, each page checks if the cookie is there, and then rewrites it if the password hash is correct, extending it's expiry date. If they don't visit in a few weeks, the cookie expires and they have to log in again. Benefits: * User's can be logged in from different PCs and see the same information on the website no matter where they are connecting from. * Multiple users can access the website on the one PC by using their own Windows account. * If the user changes their password at one location, all other locations will force them to log back in automatically.
I've learned to live without it, the code explorer panel is *almost* sufficient in that regard though.
Memcache is like the easiest thing to setup. I recommend memcache for everything and I use it on my own web clusters. I typically put it on my db servers, if the db goes down, the site won't work.
memory tables for sessions is a fail as falls victim of table locking.
In addition to this, I've seen a plethora of websites that attempt to rework/overload php's session handling and it never works well as the php build in session handling, either they don't perform gc, or it just does weird shit. And on the security note, I'm not exactly sure why you would want to expose this kind of information to a web savvy end user. Any data being stored in a session needs to stay server side. Who knows what they will do with it, besides that I don't think this is crazy enough to work.
I'd like to add to this: - Cookies can only hold a fraction of the data you can store in the session (not that you _should_ be storing lots of data in the session) - Cookies can only be written to before the headers are sent. If for some reason you need to store something after that, you're screwed (again, not that you should be doing any data storage post-headers) - You can't store objects or arrays in cookies Finally: - The session is so much fucking easier.
Sessions don't have to be stored on the server they originate from. You can store them in an external disk array or in a database.
You have any tips for a php programmer to start getting into django? for php frameworks, try cakephp or zend framework. I've used codeigniter however, it prevents GET arguments from default. 
As I haven't got any PHP experience to make comparisons, all I can suggest for now is to do the Django tutorial, and then get stuck into something else.
I do this: $crypt_parts = parse_crypt_password($user["password"]); setcookie( $cookie_name, base64_encode( $user["id"] . "|" . $crypt_parts["password"] . "|" . $expire . "|" . sha1($user["salt"] . $crypt_parts["password"] . sha1($expire . sha1($user["salt"]))) ), $expire ); $user["password"] is a password generated with the 'crypt' function. The 'parse\_crypt\_password' function returns an array with a salt and the password hash. $user["salt"] is just a generic 12 character salt associated with the user. When the user accesses a page I decode the cookie striing and explode the pipes. I then take the password and expire date and generate a hash that would match the last value stored in the cookie to ensure it matches (Prevents cookie tampering). I then check that the password matches the the one belonging to the user of that id.
It's not an entirely crazy idea, provided you don't make your cookie bigger than you must. If you end up causing your users to have to use a second TCP packet merely to send a full http request to your server, you've just made your site significantly slower to load. tamperproof and time-bound are definitely good features to have. I'd add a couple more: - beyond not letting folks edit it, don't let them read it. The usual use-case here is the dreaded public library computer. Your cookie timestamp says it's long expired, but the data in your cookie is still available to anybody who wants to look at it. oops. aes-128 is pretty fast, and might be worth using on your payload beside signing it. - make it repudiable. Your public library computer user forgot to log out. What can he do about it when he gets home? Must he wait X hours and pray nobody uses his cookie before that, or can he change his password on the site and instantly invalidate every cookie he left around? that's not really doable without a backend DB check on every cookie read, though. As far as what data to put in there, just make sure you don't store anything there that isn't already stored in your back-end. cookies get lost all the time. 
Query one db to get the usernames you want then query the other DB matching the results from the first query...
pseudo code: $sqlforDB1 = "select whatever from table1name"; $DB1Resultset = queryDB($connectionStringforDB1, $sqlforDB1); while($DB1Row = extractRow($DB1Resultset)) { $fieldtoSearchByfromDB1 = $DB1Row-&gt;FIELDNAME; $sqlforDB2 = "select whatever from table2name where fieldname = '$fieldtoSearchByfromDB1' "; $DB2Resultset = queryDB($connectionStringforDB2, $sqlforDB2); if($DB2Row = extractRow($DB2Resultset)) { //User found, do stuff with $DB2Row and $DB1Row } else { //User NOT found, do other stuff } }
or memcache.
Not really, no. If the # of users is small, just connect to both and do your basic logic. If the # will grow very large or performance needs to be really high, then you'll want to cache the users in mysql with a cron job or whatever. 
I like Kohona myself... it gets out of your way so it's easy to pick up and run with. For something more restrictive but put together there is cakePHP and codeIgnighter. Haven't used Zend yet. 
Close, but no cigar. Your code runs N+1 queries, where N is number of rows returned by the first query. Depeding on the conditions (number of rows returned by the first query) it's better to just fetch all the elements from the first database and use them to search the second database by means of a temporary table (google: mysql create temporary table) or even using the IN() operator.
Here's what I'd do: - Write a script/function to import from the other database into mysql. - Set the script/function to activate somehow when needed eg. when an admin adds something to the other database. - Then you can select what you want however you want it. Actually thinking more, I would: - Only use mysql in the first place
Your description of extract made me laugh and is right on the money. That function is terrifying.
You could replicate the table from one database to the other. Depending on how often data changes, you might be able to just write a script that runs as a cronjob. Is that feasible?
Not really an CMS until you add some simple way to edit the text without the need to edit the XML file directly. Other than that? Looks nice for *simple* things. Oh, and instead of: $vars = $this-&gt;vars; unset($this-&gt;vars); You can just do: $vars = &amp;$this-&gt;vars; Saves some time/mem.
twig requires php 5.2.4, howcome you need 5.1 support? BTW: maybe this is a good time for your office to update to 5.3? i don't know if they are stable enough for production but I would go with ZF 2 or Symfony 2.
Thanks! Edited.
i prefer nginx
Cookies have a storage size limit on some browsers. CodeIgniter tried this bullshit when they were starting out. Fuckers. I hate them for it.
You have to specify a known hosts file in your sftp config. This is dumb, but create a blank file somewhere on your disk and point the IDE to it...
Yea I thought that would be the thing to do, but where in the IDE is that config option? I'm not sure it exists. 
what are the advantages of using xml files instead of an rdbms?
I'm only storing data from the time of launch onward, but thanks for pointing out some gotchas there. I'll keep that in mind with other projects.
Down votes might have been because there was no reasoning behind the statement. 
Cookies also have a quantity limit - something like 20 per domain. The browser is free to delete some if too many are sent.
What is the actual problem with that? It works fine for me on sites with thousands of online users at the same time.
How does Cherokee perform in comparison to nginx?
Wow that's good to know, thanks for the tip.
No advantage at all. It's mainly targeted at cheap hosts that don't offer databases.
If your employer is offering to pay for it, it's a no-brainer. Apply yourself, ace it, and move on. It's no big deal, but it's a notch in your belt.
I use cherokee for my home web server, and plan to roll out to dedi-servers as well. Cherokee works excellently with PHP, and it is very easy to set up multiple sources for different "installations". As smokestack said PHP is behind fastCGI, which means you'll get very similar results to servers such as nginx, but that shouldn't dissuade you from switching, as Cherokee has a lot more to offer than nginx.
I have no idea. And I'd love to upgrade, but that's beyond my control :(
*You're
This is not pedantic. This saves having to try to scan the title twice, no three tim...oh sod it, there's a post about a cat. As if to highlight the point, [this just flashed up at me](http://imgur.com/VPXN4?full) Read both titles quickly, and see how it messes with your head. Ahhh.
It was 35 degress celcius for most of today =~ 94 fahrenheit. Various brain functions disabled...
No but have tried PHP under Abyss Web Server. And it performed well.
cool. do you have plans to make an interface to create the xml files, or is that all to be hand-jammed?
http://imgur.com/K8wEV It's in your project properties
Hmm, I can't think of any decent web host that doesn't offer databases these days. Even [nearlyfreespeech.net](https://www.nearlyfreespeech.net/) (which charges extra for MySQL) gives you SQLite at no additional cost. But I still like the idea of a simple CMS based on flat files. How about supporting file formats other than XML, such as JSON or YAML? Especially if you're going to make *humans* edit those files...
[PHPStorm](http://www.jetbrains.com/phpstorm/)
It's 100f here and I still noticed it
What's it say in the error logs? Sounds like it might be a memory limit thing. If you're using Apache, try using mod_compress instead.
Im a shared server - so I reckon I could only do this if I spun up a VPS or similiar. It does sound like a memory thing I agree. I have given it 128M now and am awaiting a server reboot. the error logs I can get from the hosting company dont tell me anything to do with memory being exceeded
Make sure you're getting all the information you need to help you, add this to the top of your script: `error_reporting(E_ALL | E_STRICT);` `ini_set('display_errors', 1);`
You should look into getting your output compression out of your language interpreter, and into your web server. Apache has an excellent module called mod_deflate that is a lot more reliable and that is capable also compressing your CSS and Javascript, while avoiding client errors on user-agents that crash when encountering output-compression. http://httpd.apache.org/docs/2.0/mod/mod_deflate.html
Thank you thank you thank you thank you :)
Very interesting. I've been wanting a profiler that looks at more than just execution time for a while. You say that it should work with Mac OS - any more info on that? I've got a macbook pro on its way to me so should be able to play with it soon.
I think you're on the right track. It doubt it would be 100M simultaneous sessions, so it must be 100M mostly old sessions. Therefore OP should have a cron job do GC more frequently.
you can probably enable that via htaccess. I wouldn't expect being on a shared server to affect that.
The format isn't very complicated, so no interface.
The format is very simple, so no intended support for JSON/YAML. Take a look at http://pastie.org/1045338 This is the data file for german.
When streaming out large files from PHP, you actually want to do the opposite, because large files bunching up on the Apache output compression buffer can easily blow that buffer. The way I get around it on several sites, is to handle compression by default in the web server as you describe. But then I have an alternative directory containing an separate entry point into the application and use that for streaming out very large pages or downloads (e.g. 20Mbyte PDFs and other documents, even some videos). That alternative entry point is in a directory with a .htaccess file to *disable* web server compression on any script run there. That way the application can stream out content as fast it can retrieve it from disk.
Sorry, that's complete rubbish. [`mod_deflate` has an 8kb buffer](http://www.askapache.com/servers/mod_deflate.c.html), and if you're running out of memory filling that then you probably don't have enough memory to run an IPv4 stack at all.
Well i wouldn't really assume his statement is rubbish, especially if your app has a lot of concurrent users. PDF files as well as many images and flash components are usually already compressed so I usually leave output-compression turned of for these. If you want to maximize your bandwidth savings even with these files, it would be smart to pre-compress these files with gzip since they are static. I haven't had a need to do that myself though, so I don't know for sure if you can just send a header for compressed PDF/swf/png/etc... and then just byte-stream the content of the gzipped file. Does anyone know if this works?
Lighttpd's `mod_gzip` will do the static gzip stuff automatically. I haven't paid attention to Apache's setup for a long time but I think it has a `mod_disk_cache` for this too. You could do it manually with content negotiation and `AddEncoding`, but that's stupid.
You can do it with Memcache (or anything with atomic `++`/`--`operators and persistent hash storage): &lt;?php function add_queue($queue, $value) { Memcached::add("$queue/tail", 0); Memcached::add($queue.Memcached::increment("$queue/tail"), $value); } function read_queue($queue, $limit = 10) { $last = Memcached::get("$queue/tail"); if ( !$last ) return false; Memcached::add("$queue/head", 0); $items = array(); while ( --$limit &gt; 0 and ( $val = Memcached::get($queue.Memcached::increment("$queue/head")) ) ) { $items[] = $val; } return $items; } ?&gt; (disclaimer: written in &lt; 10 minutes, haven't attempted to run)
Fine - if it's rubbish, it must have been the deflate fairies that killed my sessions on large files, before I added this fix. I could stream anything up to about 1 Mbyte before the sessions started dying. With mod_deflate off, it all goes straight out, no matter how large. Edit: Having said that, I've just tried turning off the mod_gzip disable, and can download files of at least 3Mbyte from a site that could not deliver more than 1Mbyte. I guess Apache, modules, the OS etc. all advance and limits increase over time.
PDFs can be compressed internally, so that can save some space if not compressing again while streaming.
Yeah, I'm using memcache now, and I'm using something similar to that for something else, but I'd rather use something which is dedicated to that purpose, but thanks!
I've got a non-standard php installation on OS X 10.5. Pecl downloaded the package, but I had to to go /tmp/pear and run phpize, compile and install the module myself. I don't think the config.m4 file and source aren't in the usual place in the package so I had to phpize from a subdirectory. Xhprof.so installed ok, but PHP wouldn't load it. It read the configuration file and I specified the correct location to xhprof.so and the right output directory, but it simply didn't load the module. I'm not sure what else to do to resolve this problem, so for now I re-enabled xdebug. Maybe I'll try xhprof again another time.
It _should_ work something like this wget http://pecl.php.net/get/xhprof-0.9.2.tgz tar xvf xhprof-0.9.2.tgz cd ./xhprof-0.9.2/extension/ phpize ./configure --with-php-config=/usr/local/bin/php-config make make install make test -- from [here](http://techportal.ibuildings.com/2009/12/01/profiling-with-xhprof/) That said haven't tried it with the PHP build that comes with OSX. Rather we have our own build system for OSX developer machines - http://github.com/harryf/build-entropy-php/tree/snow_leopard - it's a fork of [entropy php](http://github.com/liyanage/build-entropy-php/).
http://i.imgur.com/vilV9.jpg Dear god
Your right in you're observation.
thanks, much appreciated. I'll let you know how I get on once my prettyshiny arrives.
[geany](http://www.geany.org/). Even on Windows.
Whoa - scary alien thing! Can you post the the original somewhere? Can barely read the labels. 
Will do if I remember, it is the front page of our shitty osCommerce hack attack site at work. Will have to make sure there's nothing identifiable. Yes, we have 255 SQL queries on our front page and our techs wonder why our database dies so hard all the time. It actually loads surprisingly fast for such a beast.
If you are going to be building lots of sites for different clients then take a look at Joomla. If you are going to launch one big thing for yourself then CakePHP and if you are aiming for a corporate job then probably Zend
Hi liftlifted, That sort of project is quite small - a full framework might be a little more than you need for just a contact form. With that said: #1.) The beginner documentation for CodeIgniter is spectacular. If you're just getting started, CI is probably where you want to be #2.) Kohana is very similar, but written better than CI. The community isn't quite as helpful for beginners, however. #3.) Zend is the most flexible, but it's also the most time-consuming (and arguably most complex) of the mainstream PHP frameworks #4.) If you're not married to the idea of PHP, Django (Python-based) is, in my opinion, the framework that lets you get stuff done the quickest. TurboGears &amp; webpy users may disagree - most python frameworks tend to rollout stuff pretty quick. #5.) Ruby on Rails (again, not PHP-based) has some really great gems (plugins) that make Rails the most 'fun' framework.
Is this your first language or are you coming to php from somewhere else? If it's your first language I would suggest not using a framework right away- your 'first program' is *not* something you're going to want to distribute, it's going to be something for you to learn with, and the best way to learn is total immersion. Once you get a handle on the language itself you'll be in a much better position to evaluate frameworks and how they may fit your needs. That being said I'm a fan of [symfony](http://www.symfony-project.org/).
Most of my web dev experience is pretty much HTML/CSS and javascript, and an extremely simple CRUD site. I'd also like to know, do you need a framework to be productive with PHP like you do for javascript, or is working with plain PHP not a problem? And would learning a framework allow me to also learn the language along with best practices, like MVC? And don't worry, I don't plan on distributing anything. My idea was just a basis for the project.
Thanks for this. CI seems like the choice then. I also have no problem with learning Django, but would I have to learn Python first, or can I just dive into Django?
Javascript pretty much requires a framework because of incompatibilities across browsers and operating systems, while php started out as an almost low level framework itself. I would avoid recommending that someone start from scratch, as frameworks really do give a huge boost and let you avoid reinventing the wheel, but I honestly do think that they cripple the learning process in many ways. It's hard to really understand the benefits of MVC- especially the various 'flavors' of it that are out there (don't get me started on how overused, and often wrongly used the MVC term is at this point)- if you don't understand the lower level php itself. If your main goal is learning I'd say just start building your own little framework. Start off with whatever program you want to, but keep your classes organized and be sure each class has only a single responsibility, and you're part way there. When you need to integrate in libraries you find useful- [HTMLPurify](http://htmlpurifier.org/) for user input, [Twig](http://www.twig-project.org/) as a template system, [JShrink](http://code.google.com/p/jshrink-/) for javascript minification (shameless plug, I wrote that)- to get an idea how different projects work and how to integrate them into your own work. The problem with trying to learn while using a framework is that they do all the low level stuff for you which means you'll end up missing a lot of nuances and not necessarily understanding why certain things were done certain ways. If you ever have any specific 'help' type questions there is always [/r/phphelp](http://www.reddit.com/r/phphelp). It doesn't have a lot of members but people (like myself) do watch it.
Well I want to learn PHP so I can advance my career as a web developer, learn a new skill, and build more complex websites. It feels like the natural transition after learning HTML/CSS and javascript. But I wanted advice on a framework because sooner or later I would have to learn one, and I figured I could speed up my learning by using a framework and learning the language at the same time.
CodeIgniter is shit, and as Slonk mentioned Kahana doesn't have the best community. Zend is pretty popular, and with some reason, but Slonk is dead on about the complexity. Symfony wins out for a lot of these reasons- it is very well written, has a great community (just hang out in #symfony on freenode), and is even willing to include code from other frameworks when appropriate (they're incorporating some Zend stuff into it soon, if they haven't already). If you didn't want to learn PHP specifically then Python is a great second choice, although I would recommend avoiding Ruby on Rails.
You've made a strong argument for Symfony. Just wondering, why is CI shit? Is it something only an experienced developer would notice?
Have you programmed before, or is this your first programming language?
You know, honestly, I may have been a bit harsh there (it's been a long week). CodeIgniter is not the worst thing out there, but in my opinion it just doesn't excel at anything either. Every other framework mentioned at least had a reason do use it, but CodeIgnitor just doesn't stand out to me in any significant way. A couple of years ago it seemed like it was moving in a great direction, but there really isn't anything exciting coming out lately.
I've programmed before.
I agree to an extent with what tedivm says. CodeIgniter still supports awfully outdated PHP 4, which makes the framework a little more brittle than others. Furthermore, CI has a reputation as the beginners framework, so a lot of the projects written in CI aren't exactly great. With that said, I wouldn't get too hysterical over it. CI might not be gorgeous, but "shit" is a bit of an exaggeration. Furthermore, one of the best ways to improve yourself as a programmer is to experience limitations firsthand, understand what they are &amp; how to avoid them. If you're just starting out, it'll be quite a while before CI starts to limit you. I'd say CI should be your choice. I completely forgot to mention Symfony. It's harder &amp; more elegant than CI, easier &amp; less elegant than Zend. It's pretty popular at the moment.
Yup. Because of it's reputation as a beginner's framework I suspect a few folks will try to persuade you to go straight to Zend (or similar), but if you're starting out and you're happy to sweep your ego aside, CI is where you want to be. Not only will you learn things a lot quicker, but you'll learn the fundamentals of MVC development faster as well, which you can apply to a more complex framework if you want to. With regards to Django: You'll need basic Python knowledge, but most Django documentation should guide you through that without too many headaches. If you decide after a month or so you really want to commit to the framework then yes, you should definitely learn Python in more detail. Python &amp; Django are a lot more concise, elegant, and 'fun' than PHP. For those reasons, they tend to attract a fairly strong enthusiast crowd. If you're looking for employment I'd suggest starting in PHP. There's more work &amp; the developers you're competing against aren't as clever. ;-) Finally, PHP frameworks also make for a lot less headaches if you don't have your own server...Python deployment on a shared host can be a pain.
Become a drupal and Joomla programmer. There never seems to be anyone around who can make good sites based on those platforms
On a broader screen - can see stuff now. 58ms spent just defining constants - that's insane. With osCommerce though... my commiserations 
Ah .. Sorry, just saw that tedivm asked the same question.
So it seems like I should start out with CodeIgniter, and then move on to something more complex once I'm good enough. Just curious what's your opinion on CakePHP? I hear its pretty popular, but you guys haven't mentioned it.
I've dived shallowly into Symfony, CodeIgniter, Kohana, PureMVC and CakePHP. CakePHP was by far the easiest to understand. Symfony had too much black magic, and Kohana lacked documentation.
CakePHP is pretty strongly based on Ruby on Rails...but without all the cool stuff. It's not bad, but if you're going to go down that path you might as well do it properly &amp; just learn Rails. If you want to stick with PHP, then Symfony is somewhat similar &amp; a better choice. ...Speaking of which, if you're into heavy JavaScript/AJAX use, the situation changes. Rails is probably your best bet, especially with v3.0 just around the corner. 
Gotcha, but I think I'll stick to PHP. I'm much more excited about learning it fully now, and it seems like a clear choice since it's such a common web language. I'd just like to thank you, tedvium, and everyone else who responded for providing such concise and immediate answers. 
&gt;Python deployment on a shared host can be a pain. Yeah, so true. The first time I did that python ended up segfaulting apache. I later learned that the module I was using was recommended, but at the time there wasn't a lot of documentation suggesting better. That being said it was years ago, and things have changes a bit (I'd hope) since then.
&gt;CI might not be gorgeous, but "shit" is a bit of an exaggeration. Agreed, as I mentioned before. It's certainly not my favorite, and I wouldn't recommend it, but it's not that bad either.
Haven't actually tried it, just skimmed trough the documentation. One thing I would recommend would be to drop the database class (supports only MySQL?) and make it easy to incorporate Propel/Doctrine.
Yup - sounds like a sensible choice IMHO. No worries liftlifted...and cheers.
&gt;CI has a reputation as the beginners framework, so a lot of the projects written in CI aren't exactly great. The bane of well written documentation. Personally, I use [yii](http://www.yiiframework.com/).
Well just keep in mind that CI is still trying to maintain PHP 4 compatibility which means they can't use some very good features of PHP 5. It's not necessarily a bad thing but in the future, they will have to drop PHP 4 compatibility and when they do, they will have to rewrite most of the framework in order to use PHP 5 functionality. At least that's what symfony and zend framework are doing. If you want to start with a PHP 5.3 framework, try Symfony 2 (beta) or wait for Zend Framework 2 (pre alpha?), cheers.
I've been using CakePHP for years now, on pretty much every medium-large project. I find it meets my needs, and makes some things a real joy to do.
Aye, its hacks upon hacks on a 2003 version, too. Lots of PHP 3 shite.
So, again: learn PHP itself. Seriously. A framework will take you most of the way there, but at some point you'll actually have to code. Without a grounding in the actual language of your chosen framework you will have gaps. Think of it like this, most frameworks will generate basic HTML for you. You should know enough HTML/CSS/JS to extend that into the design you need. Same for the programming. Buy the PHP Cookbook and Programming PHP and you'll be all set.
yii is a great framework. Before I switched over to ruby on rails I was on yii. The guys working on it are very smart and have done a really good job. That being said after using ruby anything in PHP seems unnecessarily verbose. Ruby is just a better language.
Symfony is a great framework but it can feel a little hefty at times. I'm not sure why you recommend against using ruby on rails. Ruby is an amazing language and can really make you enjoy programming. Not to mention rails was one of the first real MVC frameworks out there, and with the upcoming release of rails3, has really matured into something amazing. *I hope this doesn't sound like trolling but I use to work a lot with PHP and after using rails you really get a fresh perspective on programming in general. It's hard to look back.*
The problem with Django is that most cheap web hosts will not support it. I started learning it for a small project until I eralised the site's host didn't support it at all (most likely didn't have mod\_python or mod\_wsgi installed). It did however look pretty simple to use and very powerful and I will definitely consider it next time I can choose a python-friendly host. _Edit:_ escaped underscores.
I completely agree with tedivm that using a framework is a bit of overkill for a small first project. Maybe use a DB plug-in if you want but I'm not even sure you'll even need a database for the project you described unless you want to log some of that info. Otherwise I'ld suggest coding everything from scratch. It will help you learn the language more efficiently without having to upload hundreds of script files for 500 lines of actual code. Also if you're lazy, googling "emailing form php" or something similar will probably get you the complete script without having to code a single line.
Spaghetti on Snails
Very much agreed. You'll most definitely want your own VPS if you're working in a Django (or Rails) environment, plus a willingness to learn a little more about server administration than you'd need for PHP-based frameworks.
dreamhost supports it and they're pretty darn cheap
Using Django is a great way to learn python if you have some spare time (It's the path I'm taking from PHP to python, and it seems like a lot of other people take it as well). I like python better than PHP personally. That being said, if you are going to use PHP, I can second the Symfony recommendation. It works great and encourages you not to make a lot of the mistakes that php let's you get away with.
frameworks only make you less of a programmer.
cakephp is quite easy to pick up
Learn PHP, not a framework. Once you know PHP well, you can pick up any framework fairly easily. If you don't know the language well, a framework is a crutch. If you know it well, that same framework becomes a tool.
Personally I use nginx in front of Apache to handle gzip/image offload.
Define "cheap" webhost... For $19.99/month you can get a Linode instance and install whatever you please on it... I wouldn't run Reddit on it, but it's as powerful as any "cheap webhost" for sure... Probably much moreso, since it's not as oversold...
Frameworks are, in my opinion, for programmers who already understand the language the framework is for. Frameworks are the badges that say, "I know this shit already, I just need to get it done." If you don't use a framework you probably will be writing the same CRUD tools over and over again.
Joomla is a CMS, not a framework... and it's a jenky one at that...
You should learn some basic PHP before you start using a framework.
That's fine, but it's not always available. If you have a product and sell licenses, this is a problem.
I beg to differ. It is both a framework and a CMS. And a great one!
Real programmers write their own operating systems.
I wish tag clouds would die already.
I find them somewhat useful because they show me what a blogger writes about most often. Though a simple ordered list would work better, and not look like ass :)
this man (?) speaks truth. 
As someone who hires developers I can honestly say all resumes that claim to be a "Framework/Application" programmer (wordpress developer, joomla programmer, CakePHP coder) get tossed to the bottom of the pile. Any real developer should be able to pick up a new framework very quickly.
But depending on the level of insanity of the framework, getting a * developer will save you time over getting a PHP developer. (yes, once again I'm looking at YOU, Magento)
I agree only in the sense that any real developer will need two weeks to a month to get into any project in general, especially one using a framework they've never used before. From having one through with this in the last month, with Cake in fact, I know that to get into a big complicated project with Cake takes about a month to absorb Cake internals and the project itself. If somebody knows Cake, it would probably take a week instead. So the specificity is important. Of course if Cake is not one of your forte's, then yes, you should toss it to the bottom of the pile (the job post), and if your resume doesn't specify Cake proficiency, then yes, the interviewer will probably toss it to the bottom of the pile because they can save 1-3 weeks working with somebody that is already good at it. 
I like pie
I'm the main dev for radioreddit.com, and I'd be willing to learn the Cake framework, if someone were to pay me ...
We want you to work on our PHP project, and we'll even _pay_ you!
There's a difference between listing it as a skill and claiming to be a [Insert Framework] Developer, and my issue is only with the latter. If someone tells me they're a CakePHP developer, for example, I'm going to assume one of three things- either they're actually a member of the core CakePHP project (which I will of course confirm), they're specialized to the point of uselessness (at best I may hire them as a consultant), or it's the only framework/application they have any experience with and they're too scared to try something else.. I'm saying this out of experience- every person I hired who was specifically a Drupal, Joomla, Wordpress, Whatever Developer has always ended up inflexible and useless. The lack of experience with other projects means they only know how to solve things in one way. These frameworks and projects are just tools, and fairly basic ones at that, and in most cases it's more important to know which tool is needed for the job than being a complete expect in a single tool to the exclusion of others. This doesn't mean I think this is the case for OP, but I do know that if his application made it through our screening process it would end up at the bottom of te pile. He might be a fantastic developer, but by selling himself as a CakePHP coder he's scaring off most people hiring developers as they're used to the garbage I described above.
Vim for everything.
Hmm.. something doesn't jive with your logic. Let me use myself as an example here: I am proficient in wordpress, and have developed several plugins for clients, have modified/built from scratch themes for websites I've developed and for clients, etc. I am also proficient in Codeigniter, having worked on a project that involved me figuring it out in depth in June. I am also proficient in CakePHP having been mind-fucked by its internals for the last month learning a project that was built by so called "experts" in Cake. I would put all three on my resume/CV and would indicate and expert level of proficiency, because that's the level I believe I know all three. Additionally I would indicate that I have 10 years of PHP experience, as well as proficiency in .net, class ASP and a variety of other unrelated things. If you see a resume indicating this breadth and depth of knowledge, you're saying you're going to put it at the bottom of the pile because if I say I'm proficient in CakePHP, I'm "inflexible and useless"? I will concede that with CakePHP, this may be a moot point to discuss because what I think you're hinting at is that CakePHP internals are so obfuscated and so badly documented that anybody besides a core CakePHP developer is merely an initiate into the "mystery" in the grand scheme of things. But in reality, I would hire somebody that claims and can back up practical knowledge of CakePHP if I'm doing a CakePHP project, just because they don't have to go through the mind-fuck of learning all its intricate quirks for the first 1-2 weeks of their employment. That's a lot of money when a serious developer's billable rate is taken into consideration.
LOL - refreshing, right? I see at least two or three project pitches a week that try to pay PHP devs exclusively with sweat equity. I'm sure everybody's got plenty of horror stories about unpaid projects ;)
because the cake is a lie?
You have completely misinterpreted my point. Stating you are proficient or skilled in something is perfectly fine, look at the very first sentence in the comment you replied to- &gt; There's a difference between listing it as a skill and claiming to be a [Insert Framework] Developer, and my issue is only with the latter. Clearly I don't have an issue with listing things as skills (and in fact I would encourage it). The problem is that a lot of 'programmers' aren't just listing these are skills, they're claiming them as *titles*. I would rather hire a PHP Developer who has experience with Wordpress or CakePHP (even "expert" experience) than a "Wordpress Developer" or "CakePHP coder", and to take it back even further I would rather higher a "Developer" who has experience with PHP than a "PHP Developer" with no experience outside of PHP.
Perhaps, but they'd only be a consultant brought in short term, never someone I would actually hire.
I'm still not seeing your point, you're playing off the semantics of "having experience with SOMETHING" and being a "SOMETHING developer". To me that's the same thing. If somebody wanted a CakePHP core developer, then they would ask for it. Somebody who's a CakePHP developer and somebody who has expert level skills in developing with CakePHP - is the same to me, and is superior to somebody who is a PHP developer who has no experience with Cake even if they're an expert PHP developer. Like I said, CakePHP has a steep learning curve if you want to be more than accidentally proficient with it in real world projects.. nothing wrong with saying you already know the framework and getting ahead by saying that. I dunno, I think we're both converging on an agreement and just arguing about semantics and wording, I'm pretty sure this conversation is getting silly. Sorry if I keep at it, there's no real purpose behind my argument anymore besides just arguing for the sake of the argument itself. Blah. So, to change the topic - what do you consider yourself to have expert level experience in (since I used myself as an example a bit up in the thread).. I guess I just want to see where you're coming from, cause I have had similar feelings about developers before, and I want to know if you're basing them in the same situation.
Now you have two problems.
&gt;I'm still not seeing your point, you're playing off the semantics of "having experience with SOMETHING" and being a "SOMETHING developer". To me that's the same thing. If somebody wanted a CakePHP core developer, then they would ask for it. You're still missing the point. This isn't about the skillsets themselves but how the person portrays themselves. Nine out of ten "Joomla Developers" are just dipshits who know how to install a few mods and tweak variables. When I see someone who will only work on a very specific application or framework I see someone who doesn't know how to work on anything else (unless, as I mentioned, they're somehow invested in it- such as being a contributor to the project). &gt;Somebody who's a CakePHP developer and somebody who has expert level skills in developing with CakePHP - is the same to me, and is superior to somebody who is a PHP developer who has no experience with Cake even if they're an expert PHP developer. I disagree with this- to me, for someone to be an "expert" in a PHP-based application then they need to be an "expert", or close to it, in PHP. If you don't know php how can you develop applications with it? &gt;Like I said, CakePHP has a steep learning curve if you want to be more than accidentally proficient with it in real world projects.. nothing wrong with saying you already know the framework and getting ahead by saying that. Agreed, as I've also said twice now. &gt;So, to change the topic - what do you consider yourself to have expert level experience in (since I used myself as an example a bit up in the thread).. I guess I just want to see where you're coming from, cause I have had similar feelings about developers before, and I want to know if you're basing them in the same situation. Well, as a little background, up until earlier this year I worked as a consultant for my own business and sold myself out as a web developer and system admin specializing in security and scalability. I've got experience in a wide variety of applications and languages, although I'm obviously not an expert in all of them. My "areas" of expertise are more generalized- I've architected some big projects in a couple different languages, designed client/server protocols, even worked on a few languages/compilers (although only on a hobby level). I've always been interested in client/server development (which in my mind includes, but is not limited to, http) straddled the line between developer and server administrator (which has worked out really well for me). As far as specific languages are concerned I have, lately at least, been working primarily with C, PHP and Javascript (although I had fallen out of practice with C and need to jump back into it). One recent project you might appreciate is [JShrink](http://code.google.com/p/jshrink-/), a javascript minifier written in php. I'd also consider myself an expert with various web servers (apache being the most experiences, but not the only), mail daemons (postfix, courier, dovecot), and general linux server maintenance. Currently I work for Malwarebytes and am in charge of everything that happens server side for the company, including managing various development teams (I wasn't joking when I said "when I hire developers"). Just check out [Robert Hafner](http://www.linkedin.com/in/roberthafner) on linkedin for the full story.
I think we more or less agree in reality, we're just doing a silly rabbit dance around an ambiguous carrot tree. I completely agree with you that the people that get too comfortable with a specific framework and lose ability to be inherently useful to code in PHP in general, are useless as developers for any project. All I was trying to say is if I have to work with someone on a CakePHP project, if I have to work with a good developer who already knows CakePHP, I'll pick them over a good developer who doesn't lol. You sound like you've got a pretty awesome background as far as developers go, where do you work out of? And how long have you been coding for in general?
First you should tell us why you built it. Sorry I'm late to the game in answering, I just discovered /r/php. Intellectual curiosity is an acceptable answer. However, if it wasn't built for that reason, tell us what needs weren't addressed by existing frameworks, specifically those written in PHP.
Currently I work out of my home office (an actual separate room in the house), but I'm in the process of moving to San Jose where I will be working out of the Malwarebytes office. In my consultant days I would occasionally work out of a client's office, particularly at the beginning of a project. As far as coding goes . . . wow, awhile. My grandfather was the vice president of an engineering firm and would take me in every Saturday to play on the computers starting in second grade, and my stepmother is the head of the city's library and museum IT department so we had a computer at my dad's fairly early (and internet access! I remember updating from the 28k to the 56k modems). My mom got her first computer right before I went into sixth grade, which is when I built my first website (animated gifs, green on black background, autoplaying music- yeah, I was classy), but it wasn't until high school that I started programming. Freshmen year (2000) I took up java and joined the robotics team, sophomore year I took c/c++, visual basic and the A+ certification course, junior and senior year I was taking the CCNA certification courses and programming both the robot and the website for the robotics team I was on. I also led a group students around the school fixing computers, which was pretty awesome and granted me a lot of privileges. I also got involved in open source software my junior year and ended up doing a lot of development on a fork of a popular forum (it was a nightmare, but a learning experience). College had me branch out into all sorts of things (database, os development, etc etc), but the biggest thing I learned was how to learn on my own in a more structured way. I was involved with all sorts of project, and thats where I really got into server administration. I setup my own gentoo box (if you ever want a crash course in linux do a stage one gentoo install), ran the school's radio station server (debian), built a vote tracking system for the student government and otherwise goofed off instead of attending class. I ended up starting a web hosting company when my web host went under and I thought I could do better (btw, shared hosting is the worst business to run, ever). After my sophomore year (2006) I dropped out after accidentally landing a consulting gig, which I got after rambling, completely intoxicated, to someone I barely knew at a club about how I would build a better system than their current developer during my summer break. I moved home and took a bunch of business courses at the local college while working at this place. It was an interesting experience- the company basically matched consultants with clients and managed the progress, so I ended up working on dozens of projects across all sorts of industries. It ended up turning into a nightmare, but by that point I had built my own client base so I just walked away. Since then, up until April of this year, I worked for a multitude of clients on a number of things and did a bunch of personal projects as well. I have a pet project, [Mortar](http://code.google.com/p/mortar/), which has grown quite a bit. It's a php based 'kernel', for lack of a better term- it's MVC based and relied on 'modules' to expand the system, but it's designed in such a way that the modules are really their own programs. The core itself provides wrappers around user input and output, meaning any action (controller) can be run from any input (cli, RESTful API, cron, interactive shell, or plain old HTTP) and output in any format (rss, json, html, text). It also has things like a robust permissions system, a caching engine I'm releasing as it's own project and other things every application is going to need. We've got a couple decent modules already built (a CMS, Blog, Wiki, Helpdesk) and some interesting plugins (a tagging engine, with some fun stemming support). The real big project I'm working on now though is a complete package manager. It's going to support multiple repositories, dependency resolution, commenting/tagging, statistics (opt-in, with the exception of things like download counts which can be anonymous), and collective intelligence techniques (currently being developed in the tagging module) to group suggested modules. Of course, most of that is a giant pain in the ass, so it's been somewhat slow going. This got a little more ranty than you were probably expecting, but if there's one thing I can ran about it's programming. What about you, what kind of projects have you worked on?
I use it @localhost; love the web admin interface
I wholeheartedly agree on the 'readability' taking priority! As someone who has had to clean up a lot of other people's coding messes, I can definitely say that you should aim for readability and correctness above all else. (You'll find the two often go hand-in-hand. The easier it is for you to read your code, the easier it is for you to spot mistakes.) The front-end developers where I work tend to either throw all of the javascript and CSS (client-side stuff) into /assets or /media and /media/js. Of course, we're talking about individual sites here, not frameworks. When I use MVC, I always define the model as "giving meaning to the raw data". It should contain all of the logic that deals with that object and its data in the simplest manner possible. I break it down into basic building-block functions. This should be equally usable and useful from a command line app, web app, or anywhere else you choose to use it. It should really only deal with itself. View, I don't use often as I'm usually writing APIs not apps that draw windows or generate web pages or anything of the sort. (Although if that stuff *is* part of your project, this is where I'd put it.) I typically use View to apply any formatting necessary to values that are to be returned for display (names, etc). Controller, I use as a bridge - to handle validating and applying meaning to user input then calling the appropriate functions on the Model to make the intended task happen. Example based loosely on what I remember of a recent project: User wants to change their password: $controller-&gt;changePassword('oldpassword', 'newpassword'); This method might look something like: public function changePassword($oldpass, $newpass) { if (!$this-&gt;model-&gt;checkPassword($oldpass)) throw new Exception("Invalid password"); $this-&gt;_model-&gt;setPassword($newpass); } Where the model's setPassword function checks for minimum password length, etc. (Domain logic) Of course, *everyone* seems pretty fuzzy on the entire MVC architecture, so I can't pretend mine is correct - I've just found it works well for me and makes for some clean code :)
I'm not.
I tried about two dozen different IDEs/php-specific editors. Big ones, small ones - every one I could find. Probably about half got dumped immediately for having annoying 'features' I couldn't turn off that got in my way. The other half I typically used until the trial ran out (and then another month or two past that until the power went out and I could no longer start the app back up :)). Settled on vim - when you really get in to it, use it on a regular basis, and take the time to learn its features and commands, it's very, very efficient. I'm constantly learning new things about it and getting more and more efficient at editing - much more so than I ever was or could be with any of the IDEs I tried.
What the fuck? What does ego have to do with CI being shitty? Every CI developer I've seen walks in the door with a handful of dumbass development practices they picked up while working on a CI project. People recommend Zend Framework because it's written well. The quickstart guide is great: http://framework.zend.com/manual/en/learning.quickstart.intro.html
why?
&gt; What the fuck? What does ego have to do with CI being shitty? Different strokes 'n all, but from my experience throwing newbies in at the deep end produces uglier results than strapping training wheels (ie CI) onto their bicycle first. Yes, most CI code is ugly, but throw an MVC virgin into Zend and things will get a lot uglier. The 'ego thing' is that, well, new kids don't want training wheels...they want the super-fast racer, even if they can't ride it. He's new. His code is going to be flawed irrespective of what framework he uses...but CI's lack of flexiblity &amp; better docs will keep him on the tracks better than ZF will. &gt; Every CI developer I've seen walks in the door with a handful of dumbass development practices they picked up while working on a CI project. People recommend Zend Framework because it's written well. The quickstart guide is great: http://framework.zend.com/manual/en/learning.quickstart.intro.html CI coders have dumbass development practices because they're new and/or they're not really into coding. There are less from Zend because it aims at those with more competency. An MVC virgin in Zend usually writes waaay shittier code than an MVC virgin in CI IMHO. With that said, if he's looking for code elegance he wouldn't be writing PHP in the first place. To appropriate a Jon Stewart analogy, being the most elegant PHP framework is kinda like being the thinnest kid at fat camp.
The application provides Test specification, Test plans and execution, Reporting, Requirements specification and collaborate with well-known bug trackers. 
just use codeigniter, their session library does exactly this. personally I can't stand it, and replace the CI session library with a native session version
Aslong as you keep Dreamweaver in strict code view, it's one of the best out there. Even the preview view has gotten ridiculously beter, but I still wouldn't recommend relying on it for any serious developer. On Macintosh, it's my chosen IDE, while sometimes using Coda if I just want a quick fix. On Windows, I've been using Visual Studio Web Developer. It's not my favourite IDE, and will be making the jump onto something... er... better.
Every framework has fanboys and I'm admittedly one for Cake. I've written about a dozen sites and applications with Cake and it has made me a more efficient developer. I'll even be speaking at CakeFest in September, so I've obviously drank the kool-aid. But in reality, all the frameworks have good ideas and bad ideas. There are things in Cake that I don't like, there are things in Zend that I do. Almost every framework nowadays uses MVC. Familiarize yourself with how the MVC design pattern works and how it fits in with OOP. Then try a few. See what works best for you. If Cake fits your style and projects better, use Cake. If it's Zend, use Zend. If you think RoR is a better choice than PHP, then use that. It's all about the concepts. If you know those, you're golden no matter where you go. Just remember, no framework makes you a better developer. It helps you be more efficient, but you still write the business logic.
It depends on the size and complexity of your xml, and what you're serializing. ob_* functions and a php file can give you quick-and-dirty xml, but for heavier stuff you might want to look at [phpQuery.](http://code.google.com/p/phpquery/) phpQuery gives you a DOM manipulation API that's pretty close to the api of jquery. If you know one, picking up the other can be easy.
The DOM and XMLWriter are supplied by PHP. Because they are built-in, they already have an advantage over anything that's not. I use the DOM for advanced xml manipulation, and XMLWriter when things are a bit easier. XMLWriter when possible basically. I wrote a [blog post](http://www.rooftopsolutions.nl/blog/guidelines-for-generating-xml) covering generating xml a week or so ago, maybe it's helpful.
It is, thank you!
I know jQuery pretty well, but my superior does not. Still, I appreciate the help and I will look into it.
I second this. XMLWriter is pretty amazing, I can't imagine any kind of class or library sitting on top of this could make it any easier than it already is.
I'd like to see the conclusion of this debate.
include '/test.php'; ? EDIT: Having a / without a .. in front tells the code to look at the root of the domain. As long as you aren't using http://members.site.com instead of http://site.com/members this should work.
This is the only reason I want a Mac =\ Will you allow me to touch/caress/covet your coda install?
It's the main reason I bought a Mac last year and I have never regretted it for a second.
&gt; In general, the model is such a diverse thing that it doesn't really make much sense to have a model base class. Forcing models to be derived from a specific base class will help keep your data access functions clean and standardized, especially if your framework contains an ORM.
I always have used SimpleXML for writing. I've written a custom build system which ends up converting our build commands into Phing XML build files, and I've used SimpleXML to generate all that XML from our own internal XML build spec.
SimpleXML makes it even... simpler
Wow, this is awesome. Thanks
assuming your data is coming from a database you can write the string yourself like this: http://www.php.net/manual/en/function.mysql-fetch-field.php#88714 or, if your data is more complex use a library like this: http://www.ibm.com/developerworks/library/x-query2xml/
Networking. Networking. Networking. Do not rely on shithole sites like elance and the related. You'll just get into a cheap bidding war with people from India and you'll lose every time.
- Start going to developer meet-ups and start meeting people. Get their contact information. If one of them has a job opening or needs some help be there. - Start contributing to open source project, or any project really. - Build your own projects - Write about everything and offer to write for people about code. - Do you have a portfolio website? LinkedIn profile? Twitter account? They all help you keep in touch or help people find a PHP developer in their area. - GitHub is getting popular, but not really in the PHP community as it is in Ruby, they also have a profile. - Answer questions on Stack Overflow.
I'm from India and I lose on those damn bids!
It will also tie your model to the ORM. Things get rather awkward the first time you try to introduce a model-level class that doesn't have persistent state. Where do I put my `ShippingPriceCalculator`?
your doing it wrong.
A few things: First, If you are trying to get your foot in the door, and you have no portfolio work, I would suggest you offer to do some portfolio work for free. Find a company that could really benefit from your skills, and offer to do a website for them for free, but maintenance costs your regular "hourly rate". If your skills are more code/logic than design, find a company that could benefit from having a web application built. If your skills are in design, find someone who's website could really use a face lift. This will do two things: 1) it will give you something to show and 2) it will get you a paying client that is likely to give you regular maintenance work. Second: If you dont do anything else, ADVERTISE, ADVERTISE, ADVERTISE. Sure answering questions on stack overflow, or putting code on github couldnt hurt, but lets face it: This may get you some "cred" with other developers, but thats about it. You need *real* clients, who pay *real* money. Get business cards, go to meetups, hang out at your local chamber of commerce, introduce yourself to people in the industry, put an advertisemnt on craigslist, do anything and everything you can do to get eyeballs looking at something that says "I do web development, and here's how you can contact me". Third: No matter how you slice it, freelancing means running a business. Go learn about business. Read books on how to start a company, how to do your taxes/accounting if you are a business. Get an account with freshbooks or similar. Basically, you can be the most awesome coder on earth, if you cant run a business, you will fail as a freelancer. Remember that nobody gets it right the first time, and no company has a 100% customer satisfaction rate. If you fail, get up and try again. Eventually you will get it right. 
That's where we differ in style I think. I would put a `ShippingPriceCalculator` in the business logic layer. If I *were* to put it near the data layer, I wouldn't have it inherit from my model class because I don't plan on saving any `ShippingPriceCalculator` instances to the database.
This is the first thread I've saved in three weeks that hasn't been porn. Thanks.
This is exactly right. Friends who are designers are very useful, or even agencies might throw you stuff they think is too small to be bothered with.
* Sort your portfolio out and get some work on it you're proud of. You need a page you can confidently send people to. * Introduce yourself to local web development agencies. Work for them is lucrative as fuck because they often hire you for weeks/months at a time at your usual hourly rate. * If you find a good client, maintain them. Good clients are rare. Develop a relationship and encourage them to depend on you. Honestly, I don't know of many professional freelance web devs with so little experience. I don't want to dishearten you, but in my experience developers tend to have at least a couple of years under the belt. If you don't have the experience on CV, you *absolutely* must have a good portfolio. You can get clients with a bad CV and portfolio, but they do tend to be the bad kind; hard work, and they don't want to pay you. And the most important thing: be lucky, and when opportunity knocks, you rape the shit out of it.
No, I think this is were our terminology has a mismatch. In my world, the business logic belongs in the domain model. The domain model might also have some persistent state, which could (for example) be stored in a database. You seem to use the concept "model" for what I would call "data access layer", and consequently you use the concept "business logic" for what I call "model".
I think you're losing to the kids from the Ukraine, I know, i've lost to them too.
PHP User Groups, LUGs, and other user groups (even if they aren't PHP) are where you should begin networking. Staffing agencies, companies, and potential clients turn to UGs to find talent, especially if its for temp-to-hire or just temp for freelancing.
SimpleXML is designed to manipulate XML that has already been structured. I find DOMDocument much more intuitive for generating XML documents. Its interface is also very similar to JavaScript's, so if he has experience with JavaScript, it shouldn't be too difficult to get into. That being said, SimpleXML's interface for reading and casting to objects is far superior, but it can't do anything that DOM can't.
Kohana is the best I've seen. Don't bother with Code Igniter or CakePHP, or PHP4 at all for that matter. It's not worth it-- they both use proprietary interfaces in order to get around PHP4's shortcomings. Kohana tends to closely follow best practices, and has very intuitive interfaces. It would be nice if it used namespaces, but it seems they want to hold onto their 5.2 support. Zend is a flaming ball of shit. It's poorly written and forces you to write a LOT of code that should be abstracted. Its naming conventions and interfaces are also not very intuitive at times (PEAR conventions-- yuck). Also, I have a distaste for Zend as a company, as it seems they are trying very hard to commercialize the language. I've custom-built my own that is optimized for heavy use of HMVC, and use it for all my projects now. It's poorly documented though, so it probably won't see the public anytime soon. I definitely wouldn't recommend writing your own if you have a project you need to get out the door soon-- you'll find yourself rewriting large portions of it (and if you don't, it'll suck) which will ramp up development time. I honestly have never tried Symfony. It looks over-complicated. **TL;DR Kohana**
I've had no problem generating XML with SimpleXML $root = new SimpleXML('&lt;xml/&gt;'; $child = $root-&gt;addChild('key', 'value'); $child-&gt;addAttribute('attribute', 'value'); echo $root-&gt;asXML(); voila...
&gt; It's insecure Replicating sensitive data ANYWHERE is a good practice to avoid. For example, if you are storing authentication info, store a session ID in a cookie and have a field in your Users table that will hold that session ID, instead of storing the username/password in session variables. This is fundamentally the same as using $_SESSION, but you aren't storing anything on the script's server's filesystem, so loadbalancing will not be an issue (obviously you're going to have a common database server). &gt; It's slow There's really no reason to store large amounts of data in a cookie. If you're storing entire objects, you're doing something wrong. Anything else is negligible. Again, you can always store a session ID and link it to a database record. &gt; Storing data server-side allows users to maintain state even if they visit from different locations/devices/browsers This is incorrect. Session data will not be maintained between browsers, since each browser keeps track of its own session ID. For the same reason, sessions are not maintained across different devices. Both will be maintained if you move to another location, provided you are using the same browser on the same computer. Aside from these points, you should be striving to make your applications/websites as stateless as possible. Misuse of sessions makes statelessness hard to achieve.
Public, private, and protected definitely all have their place. From what I've seen, people tend to over-use private and public. When you create a new member or method, you need to ask yourself "if this class is ever extended, is there any reason the extending class would want to use this?" Do NOT tell yourself "this class should never be extended." You should always write extendable code, for one simple reason: there's no reason NOT to. In PHP, you'll find a lot of members should be at least protected, since there is no "readonly" flag (though there is in core classes-- sigh, inconsistencies). Use getters where a property should be accessible to the outside world, and setters where it should be modifiable by the outside world. A method/member should only be private if it is used exclusively by your class, and does not store anything a parent or extending class would ever want to see or even know about. When in doubt, use protected.
Do you have any idea what would be considered a beginner?
Someone with two or less years of experience or doesn't know much about the advanced goodness php has.
Good lord, I'm living on the wrong coast.
NYC is around 90K for 4+ years experience and a head on your shoulders. I've mostly been working for startups which ride the lower value (~80K) but have boatloads of equity to dump on you. IMO take the cash!
what? fuck. i gotta get out of new england.
I live/work in the DC area, and develop web apps and do app infrastructure for a Fortune 500. I have 5 years of experience and make 102k plus 15% bonus +/-.
Ten seconds after Googling "C compiler cannot create executables", I learned that this is most frequently caused by not having gcc and/or libc's source available to you.
Sure, but how does that help me when I don't have control over that in cPanel? Do I have to change hosting providers? 
Well just got my answer and unfortunately it's my hosting provider: Hello, PHP -oauth module is not supported in the server in which the site musicroamer.com is hosted and thatswhy the error message. Thanks, Amal Webhostingpad.com
Jeez, I'm mid-level with about 65k. With 4 years of experience. I gotta get outta here...
I am a noob also so don't shoot me. 1. Assuming that everything is sound with your table, instead of creating different files (list2.php,etc.) for each list you can pass a variable that grabs the boxid so SELECT itemid,content,rating,boxid FROM `table` WHERE boxid = '$boxid' ORDER BY `Order`' Unless that is you create different divs for each list but that is nothing some css and/or if statements cannot fix. 2. Instead of using AND in the update you can simply do UPDATE table_name SET column1=value, column2=value2. 3. Do some checking in $_POST[] before you pass it to mysql otherwise MySQL injections and whatnot will occur. Finally I might be wrong but sometimes it's better to ctrl+A+del and re-write the whole thing from scratch.
These were my findings as well.
Using PHP? Can you explain "do app infrastructure"? I want to get a clear picture of what your responsibilities are.
I am creating a different div for each list. Injections I'm not so worried about at this point as maybe 1-2 people will be using this max and it requires a login. The index page itself contains instances of &lt;div id="list1&gt;&lt;/div&gt; for example and event.js populates list1 with the div #myList1 etc. I like your select idea. If you're online I may need to talk it through with ya later :D
Look into things like simplexml&amp;#95;load&amp;#95;file(). With this you can simply load an XML file and edit it. Example: _//This loads the file and stores it in $xml._ **$xml = simplexml&amp;#95;load&amp;#95;file("yourFile.xml");** _//This echo's text from a tag in the xml file. Note that the syntax allows for navigation through the XML tree._ **echo $xml-&gt;root[0]-&gt;someTag-&gt;anotherNestedTag;** _//This changes the content of a tag._ **$xml-&gt;root[0]-&gt;someTag-&gt;anotherNestedTag = "your text here";** More info here: http://php.net/manual/en/function.simplexml-load-file.php 
I was offered a job working in DC as a PHP developer for $90k/year. Unfortunately, the company didn't get the contract (it was a contingent offer) so I didn't get the work. The real key for getting high-paying jobs in the DC area is to have a clearance of some sort, preferably TS, but SECRET will still get you some sweet jobs.
&gt; First, If you are trying to get your foot in the door, and you have no portfolio work, I would suggest you offer to do some portfolio work for free Do not do this, it just gets you into a mode where you'll work for nothing. I can throw a rock and hit 10 people who want free websites, but I won't do 'em. If you don't have any clients yet, build something for yourself. Those sites become your portfolio.
Yea, go to a country without social security :P Great success!
wut?
That would be me =)
Unforunately I don't have profiles, or portfolios set up. I do plan on making each of those very shortly though.
NetBeans. It's lovely in Debug mode until it breaks, and then it's a FFFFFFFFFFUUUUUUUU comic in action.
You might want to try the [freelance subreddit](http://reddit.com/r/freelance/) as well. There are quite a few good posts on getting started (I found [this one](http://www.reddit.com/r/freelance/comments/9vaxp/need_extra_money_looking_for_freelance_web/) very useful). Good luck!
I wish my designer friend and I were still pumping out websites, it was really easy to get clients with a 2 and 1 deal.
Good points, thank you
Interesting, thanks!
and when you retire... Great failure!
How would one go about getting that?
yeah, but when you live in NYC and make upwards of 90k, it's probably pretty close to making 65/70k due to the high cost of living here.
I disagree, unless you are an absolute creature of habit, and have zero free will, you can negotiate *one* free gig, that comes with *paid* maintenance. That being said, it is just *one* way to get some portfolio work, and a reference. There are lots of other ways to do this as well. Building something for yourself is also a good idea.
I don't work for a software company per se, so when the need for a tool arises, we have a buy versus build discussion. When we build, it's almost exclusively web applications. The apps usually end up an amalgamation of PHP, JS and an Oracle or MySQL back-end. The app infrastructure piece involves designing/building "highly available" and scalable arrangements to support the tools we buy or build (99.999% uptime). Veritas Clustering, Oracle RAC, Dataguard (for disaster recovery), heavy use of Unix virtualization, hardware load balancers, SAN storage for the data, mirrored drives for root disks, redundant switches and power supplies, etc, etc, etc. I'd say 1/2 my job is web programming (where PHP is my bread and butter for server side logic) and the other half is using all of the tech above to make sure my app stays up.
Richeh is on to something here. I get *alot* of work from designers. Often times designers will have clients that they started out doing a small 3-5 page site for, and then that client needs an event calendar or blog section of their site, so they call you.
Seriously? 102K? I have 4 years and my cunt of a company struggles to pay me 35k? I need to move.
I got mine [clearance] from the military. Some companies will hire people and sponsor them for a clearance...but they usually don't since it costs around $150k for the background investigation/interviews etc. A good way might be to be hired by a company that does both classified and unclassified work and then once you're in you can maybe have them sponsor you in a few years. Booz Allen, Mantech, SGIS, Northrop Gruman, Raytheon, Eagle Environmental Services and Advanced Concepts Inc. (ACI) do this sometimes
I don't know where you currently live, but the cost of living in DC is insane, so that may actually be a pay CUT.
exactly, its all relative
Obviously a lot depends on region, market, industry, etc. DC is expensive compared to most places in the US. What you get in salary you can lose in quality of life. I'm looking to get out, even if it means a pay cut. Telecommuting is a good gig if you can get away with it.
I'm actually just outside of NYC. I didn't take a few NYC jobs because of this, but I would be commuting in so it wouldn't be all that bad.
Looks like we completely agree then, albeit in different words :)
New England is not a country: http://en.wikipedia.org/wiki/New_england
But if you can live like a pauper, the money you will go a lot farther when you leave town.
Is native session bundled with Codeigniter or is it something else altogether?
there is a reddit for phphelp (i think that's the name of it), also stack overflow is a great resource... i'm not trying to tell you not to post for help, but likely trying to help you find MORE help
Would it be correct if all employed php programmers say how much they earn?
It doesn't help you in the least if you aren't root. May I suggest a nice happy VPS?
We are in the DC area (Columbia MD) and hiring. I have no useful salary data, but there does seem to be an under supply of really good people. Feel free to mail a resume to luke at messagesystems.com 
Yes, but there work generally sucks. I typically take a lower bid but I refuse to pay anything until the project is 100% done to the level I want. If they cannot complete it, they wasted there time. I also can program and I often look at what they did and tell them that there skills aren't good enough.
What are your rates? I hire people all the time...
The conclusion is the same as always. Test test test.
I thought he's going to write a standalone server in C and Proxy through Apache2. That might be a bit faster, than starting processes each time. Though suprising, that forking is so fast. At least I'm hoping he wasn't using the worker MPM, as PHP isn't thread-safe.
Server version: Apache/2.2.3 Server built: Mar 4 2010 09:57:54 Server's Module Magic Number: 20051115:3 Server loaded: APR 1.2.7, APR-Util 1.2.7 Compiled using: APR 1.2.7, APR-Util 1.2.7 Architecture: 64-bit Server MPM: Prefork 
It's still a good idea to sanitize that stuff, in case spurious inputs threaten the query integrity. You should, as a beginner, get familiar with PDO/MySQLi and, in particular, parameterization.
If this doesn't exist I want to know WHY NOT!!!!
I've heard good things about Symphony but I've also heard that it's dead and there is no support for the latest version - anyone know anything for sure?
I must point out that serving PHP scripts via FastCGI contrasts only slightly compared mod_php, although it is the preferred method nowadays.
That should not be a line graph.
Ditto. I was confused for a few seconds because I thought it was requests-per-second versus concurrency or something.
Only 20% difference between plain HTML document and PHP script? That prefork MPM might be loading up the PHP interpreter even when it's only serving HTML documents. Was the plain HTML test performed with all unnecessary modules disabled or not? Might be interesting to see numbers for nginx (using FastCGI for PHP).
I can't think of a more useless comparison.
IT'S SO BEAUTIFUL! WHAT'S IT MEAN???!!
Wow, epic MySQL fail upon make. Can't seem to suss out what it might be from looking at the changelog. Anyone else?
Architecture? Operating System? MySQL versions? Something? Paste the log please.
Biggest news - Added FastCGI Process Manager (FPM) SAPI. (Tony).
In file included from /Users/gregg/Downloads/php-5.3.3/ext/mysqli/php_mysqli_structs.h:57, from /Users/gregg/Downloads/php-5.3.3/ext/mysqli/mysqli.c:33: /usr/local/mysql/include/my_global.h:1008: error: duplicate ‘unsigned’ /usr/local/mysql/include/my_global.h:1008: warning: useless type name in empty declaration make: *** [ext/mysqli/mysqli.lo] Error 1 This is with both 5.0.x and 5.1.x MySQL on Mac OS X 10.5 (32 bit). Using as a config string: ./configure --prefix=/usr/local --enable-cli --enable-cgi --with-mysqli=/usr/local/mysql/bin/mysql_config --with-pdo-mysql=mysqlnd --with-libedit --with-openssl --with-apxs2=/usr/sbin/apxs --with-curl --enable-calendar No problems at all w/ 5.3.2.
Only for 5.3.3 but great news anyway.
&gt; * Fixed bug [#50555](http://bugs.php.net/50555) (DateTime::sub() allows 'relative' time modifications). (Derick) They need to fix the bug that puts random unrelated bug IDs in the changelog.
Yeaaaaah. This is awesome news.
&gt; Methods with the same name as the last element of a namespaced class name will no longer be treated as constructor. This change doesn't affect non-namespaced classes. I also think that is a pretty good one, although I don't know why they would make a backward incompatible change in a X.X.X
Probably because most people don't consider 5.3 truly "stable" yet, it's only just getting into mainline repositories. Better make a breaking change now than later.
This one is unlikely to hit much, if any, code in production anywhere. The methods only become normal methods *when the code is namespaced*. The chances of using a PHP4-era named constructor in code updated to use PHP 5.3+ namespaces is pretty darn slim.
I'll give you an assignment. Use Zend Famework and Doctrine 2.0 (this will require PHP 5.3) to build a simple blog. You can log in to the blog, make posts, and comment on posts. Posts can have multiple tags. I should be able to view posts by tags as well as by post date. The home page is sorted by post date. It's the hello world of web development :) Basically the shit you'll have to do to get a grip on what you're doing in this project (namely documentation) will expose that part of PHP you'll be using constantly. Or if you don't want to work from scratch, just check out the Zend Framework and Doctrine 2.0 projects.
lots of tweets starting to show up that this is happening on OS X all over the place, but not w/ the macports version.
So what exactly does that mean? I'm running PHP as FastCGI (not FPM) with NGINX, but I don't know much about FPM.
I wish the changelogs were more specific. "Possible memory corruption" is a pretty scary possibility, and it doesn't describe the circumstances under which that's possible, or point to tickets that explain it. :-(
What is PHP-FPM? PHP-FPM (FastCGI Process Manager) is an alternative PHP FastCGI implementation with some additional features useful for sites of any size, especially busier sites. These features include: * Adaptive process spawning (NEW!) * Basic statistics (ala Apache's mod_status) (NEW!) * Advanced process management with graceful stop/start * Ability to start workers with different uid/gid/chroot/environment and different php.ini (replaces safe_mode) * Stdout &amp; stderr logging * Emergency restart in case of accidental opcode cache destruction * Accelerated upload support * Support for a "slowlog" * Enhancements to FastCGI, such as fastcgi_finish_request() - a special function to finish request &amp; flush all data while continuing to do something time-consuming (video converting, stats processing, etc.) ... and much more. It was not designed with virtual hosting in mind (large amounts of pools) however it can be adapted for any usage model. http://php-fpm.org/
I'm using lighttpd 1.4.26. Is there anything special to be done to make use of the new features? Or just compile the latest php and restart lightty?
It's certainly unusual for there to be a BC break in a point release. As McGlockenshire said, though, there's not much actual impact here in practice. It's basically the first step towards the eventual removal of old-style constructors — by disallowing them in namespaced classes (which were obviously new in 5.3), there's a bit of an implicit point being made to push developers towards __construct(). Additionally, from a philosophical point of view, it was debatable whether A() should actually construct a class properly called \NS\A anyway, since A is only part of the name.
There may have been lots of tweets, but also a decided lack of bug reports. Anyway, I can reproduce it on my Mac, so I've opened [bug #52413](http://bugs.php.net/bug.php?id=52413) to track it. **Edit**: Looks like this affects FreeBSD as well. The good news is that this doesn't affect people using mysqlnd, so for most people, the answer's just going to be compiling with mysqlnd instead of an external libmysql. [This patch](http://www.adamharvey.name/patches/bug-52413-5.3.patch) works around the problem enough that PHP should compile, but isn't the real fix; I'll leave that up to the people who actually work on the MySQLi extension.
That would be [bug #50055](http://bugs.php.net/bug.php?id=50055). Cheers for that; I'll fix the change log up.
You are a gentleman and a scholar. Opening a bug was on my TODO for today but real life intervened. Thanks!
Dunno why this was downvoted, it's a valid question... If you're running PHP as a standalone fastcgi server then you won't need to touch lighttpd at all (even to restart it). If you're using the internal FCGI stuff in lighty (i.e. your mod\_fastcgi config is more than 3-4 lines long) then you'll need to change it to talk over a socket and not start processes on its own.
I respect your opinion of Joomla.... but I also must inform you that it made my stomach turn a little.
I'm making more than that as a contractor.
I don't know where you're at in your career path, but my advice (being someone who was a full time freelancer for 4 years and a part time for many more beyond that), don't do it. If you're determined to go that route, get 50% up front or put 100% in escrow.
PDT is a world ahead of phpeclipse. Is phpeclipse still developed? I used Jedit
That's actually not that bad of a break. It's a higher barrier of entry to get .NET experience (what with the cost of licenses for VS and Windows Server) than (free and widely available) PHP. A lot of corporate settings are staunchly .NET, and having that experience can help you get a .NET job if you end up needing work in a dry spell where PHP work is thin on the ground.
While this is awesome, and I will definitely bookmark it, it could use a lot more documentation. For instance what is the cell function doing?
This fails on so many levels.
CONSEQUENCES WILL NEVER BE THE SAME
CONSEQUENCES WILL NEVER BE THE SAME
CONSEQUENCES WILL NEVER BE THE SAME
I'm actually working on something like this right now to integrate with a forum we have
Wordpress, just slim it down through the admin area. You'd be surprised at the type of sites that WP can build.
The technique is usable if and only if SQLite is used in production. 
yeah, fpdf is quite nice to work in, but this 'blog post' is just some code with no explanation. Cell docs: http://www.fpdf.org/en/doc/cell.htm
It isn't a CMS if it does not have management interface. The M in CMS means Management. If management is via shell or ftp, then shell or ftp is the content management system, and your app is just transforming XML to HTML.
http://downloads.php.net/pierre/ (via windows.php.net) Check phpinfo() for your build information.
download the source and drop it into your pear location, or use pear's installer, pear install xyz
Interesting idea. Sort of like a CMS then? The only problem I see is that this Web-GUI creator tool would have to be separate from the project. Sort of like a web based IDE that has framework support built in.
it's neat and everything, but pagerank really is just an insignificant number.
Don't kid yourself, it's not even neat.
It doesn't look like a pagerank checker. It looks to me like a SERP rank checker. IE what number you are within the results. Which is very helpful.
I guess is not really a framework but a CMS like IDE with a framework under the hood. One would not need to code much (or anything at all) in order to create an application - this would also be useful with websites where little programming is necessary. The closest I could find to something like this is: [Adobe Business Catalyst](http://businesscatalyst.com/). Any idea how I can get some people to join me to create something like this?
So does this mean that you are allowed to use the RESTful API to do SERP monitoring?
d'oh, you're correct, my bad. That's kinda handy.
One of your attribute is wrong. See here : http://www.developpez.net/forums/d378718/php/bibliotheques-frameworks/ldap-problemes-lors-ldap_bind/ if you can read a little french.
thanks!
you are right ... it's a SERP rank checker
&gt; but pagerank really is just an insignificant number Not really. Many advertisers base your prices on insignificant numbers such as pagerank, alexa rank, etc.
i think it's not allowed ... but if you don't exaggerate it, google won't block you.
LDAP with PHP makes me want to punch a baby sometimes--specifically ldap in any circumstance. Good luck.
In case you didn't know, try ; phpldapadmin.
@OP: Do you like Django better than PHP? I'm just curious why the people that were playing the office politics game would switch to PHP. I've been PHP'ing for a 5 years now and just recently started using Django and it's a great framework. I wouldn't want to go back to PHP unless I would be forced to, or it coincidentally would happen to be the right tool for the job.
My guess is that you're not including all of the object types that the account you're creating needs for it's attributes. Try creating a very minimal account using existing tools, and query it to see exactly what attributes are set (be careful of objectclass as it needs to have every type defined).
thanks a ton guys
Couldn't agree more! The inconsistency, the crappy OOP implementation, the messy management of the PHP team, the memory leaks ( look at the latest bugfixes on php.net and you know what I mean ), the memory consumption and all the crappy code that lives in sloppy php projects because the language allows newbies to make gross mistakes and not be punished by the interpreter. Experienced php programmers tend to stay away from, well, php. It's a language you grow up with and later on discover it's nasty. Not to mention the OOP implementation is messy ( look what they did with the constructor function in the latest php update and you know what I mean, no backwards compatibility to keep in mind at all ). The reason why there aren't a lot of Python programmers: indeed, too many people using php because lots of people can 'handle' the language. Also, what I notice at my workplace: some programmers tend to be very, very conservative about the languages they learn and use. It depends on the character of someone, but most programmers are just programming 'for work' and aren't eager to learn new things at all and just want to stay with what works (badly) for them. As you say, 'varying degrees of stupidity' are the rule, not the exception. The sad thing is that me and a buddy of mine are using Django and Rails and are developing applications faster than 7 people are at the workplace. It's unbelievable. The only way to clean the mess up is to play the office politics game and make your manager think Django (or Rails) is awesome. And that's hard, very hard. Some programmers also tend to be short-sighted and don't like to work in teams at all. They just do what they want and the codebase becomes a undocumented, uncommented hell. Good to know there are more people that dislike PHP and love Python as much as I do :).
Failure for not showing the MAMP widget for your dashboard. Great bonus on an already awesome app.
Argh, your common sense is starting to make me rage against my job again. I thought I had managed to suppress those thoughts. Really, I don't think anybody here gives a shit about quality. The project in the OP looks to be going ahead despite me raising its lack of good code (i.e. no MVC) to multiple people. Providing shit gets pooped out at a pace people seem to be happy about it. 
you should buy 'serp-checker.com' and let me add 100 URLs for $1 each and check them for me. Then do stats and stuff. So $1 per URL per year, 100 URLs per user, 1,000 users = $100,000 a year. Sounds like some nice pocket money.
drat. you got me! Good point.
From the comments: &gt; It is not EOL but end of active support. What does it mean? Only security fixes will get in and EOL will follow later (say within a year or so). And: &gt; Marco, PHP 5.2 was released 2006-11-02. It is almost four years since that date now. It is a problem of WP developers with their sluggish PHP4-like code, that for four years they were not able to move to 5.2 yet. Are you saying, that 4 years is not enough to release a new version of the language? Look at .NET and how it evolves. Also, WP perfectly works on 5.3, so what’s the problem? EOL does not break anything. May be in another four years WP guys will move to 5.3…
I hope no one is really using PHP &lt;5.2.
PHP 5.2 will merely be the *minimum* requirement for Drupal 7 just like 4something is the minimum requirement for Drupal 6.
I recently had to deal with a client who did a fresh install of RHEL and the current shipping version (at least as of a few months ago) comes with 5.1. And this client wouldn't install anything that isn't in the official RHEL repos. Had to go back and patch Drupal plugins and our own code because of missing functions.
As csixty4 wrote above, a problem for packages that need to work on a variety of hosts are the PHP version on LTS version of several Unix clones. It was a difficult choice, but Drupal 7 opted for 5.2, shunning RHEL users and causing grief. Support for 5.1 would cause the developers grief (like PHP 4 support does now) and the devs interest prevailed.
This is not good news for someone who is stuck on a CentOS ecosystem. :-(
make the code nice to read: premature optimization is the root of all evil so code, test, fix bugs, measure speed, optmize... if you manage to get past the first 3 steps you're doing better than me.
&gt; make the code nice to read: premature optimization is the root of all evil So basically just write it first all pretty-like, _then_ worry about speed and that other stuff. Noted. Are there (I assume there are) speed monitoring tools for PHP? 
Just my opinion, but large lists of data you are not changing should never be objects. If you want a thread class that knows how to get the list, search, post, etc. that's all great, but pulling a list of objects for display purposes will just chew up memory unless you load the object, display it, and then throw it away. If that's what you do why load the object in the first place, you're then chewing up CPU. 
This is what I was thinking would be the problem. I suppose another solution would be to just get a single object that has functions in it for getting the forums, threads in a forum, and posts in a thread. Using an array or something rather than all separate objects.
Maybe think about making your classes plural - So instead of having 25 Thread classes, have one Thread**s** class, likewise use one Posts() instead of many Post()s. In general I would say: try not to worry about performance at the code level. You can add opcode caching and memcache later if you need to.
Also keep in mind you don't need to pull the entire resultset. [Are you planning to use PDO?](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/) while($row = $foo-&gt;fetch()) { // single $row }
XHProf and XDebug
Thanks.
Good idea, will reduce the amount of objects per forum page load immensely.
I'm in just the opposite boat as you. I'm taking a medium app that is oo and turning it into all static classes and methods. I like functional programming concepts and while you can't go totally functional in php, you can make tons of very specific functions and combine them which is what I've done.
You may want to check out [webgrind](http://code.google.com/p/webgrind/) and Xdebug.
I use the mysql\_fetch\_assoc for multi-line queries. It works fairly well. Should I look into something like this instead?
Right now I have a collection of files, named things like battlefunc.php, forumfunc.php, functions.php (it's a game), and all related functions are inside those files. What I want is files like c_battler.php, c_forum.php, c_init.php, where functions are inside a class rather than just strewn about willy-nilly. It'll make my code a bit cleaner and easier to port.
Read that PDO info and make the choice that's right for you, it's not needed for everything, though **prepared statements can keep nasty injection problems away**. 
I design most of this with security in mind. Everything from the user, including GET statements prepared by me and hidden form values populated by me, I assume are filthy. That being said, I'll definitely look into it.
I use the naming convention `battler.class.php`, just a little clearer imo.
&gt; So basically just write it first all pretty-like, then worry about speed and that other stuff. yes. Here's a very good [PDF on PHP optimisation](http://ilia.ws/files/Dutch_PHP_Conference_2010_OPM.pdf)
You are worrying too much about speed. It makes you sound like a n00b (sorry) just write the code, hit F5 a few times and then start to worry. The DB will be the slowest part, and some indexes will help that 100 fold.
True, but something like that is all opinion based and a matter of style.
Don't be sorry, I know I'm a noob - it's why I posted this thread. Thanks for the tip though!
true, it's not important.
Some functions + an array is exactly the same as an object with data in it. The overhead of making an object is so close to zero that even having this conversation is pointless. Stop guess and double guessing about speed this and memory consumption that, just make the thing easy to code. Measure it later.
We have some centos servers that haven't been updated in their repos. I still have php 5.1.5 installed in some servers. :(
If you're already using functions, and those functions are used only on specific groups of pages, you could use static class methods to conserve global namespace. No instantiation required: bar($baz) simply becomes Foo::bar($baz) and executes at about the same speed as the big pile of global functions. You should get performance improvements by glomming each class into one file, and only loading the bits you plan to use on a particular page load. Building the DAG of a complex app's execution path can be time-consuming, but rewarding.
Agreed. That is the standard. I've also seen it in the form of class.battler.php which I dont mind as well.
Ok, ok! Thanks.
I may end up doing that for database connections and session handling, and actually this is one hurdle that I didn't know how to get over. thanks a lot!
&gt; I've also seen it in the form of class.battler.php that's ok, but it's more difficult to navigate in the filesystem; I can't just open the folder and type 'b' to go to that file ;)
Static classes are still well within the bounds of OOP, and I actually think the kyleisagod should take a look at this. Rather than instantiating all of your classes you can use static methods to keep things organized clean, with proper permissions on methods. For example rather than: $posts = new PostQuery(); $results = $posts-&gt;getAllPosts(); You would simple have: $results = PostQuery::getAllPosts(); The lack of instantiation means there is a negligible difference in the amount of memory/CPU consumed compared to a straight function call. That being said, worrying about speed is usually the last thing to be worrying about. Optimize your SQL queries before worrying about the speed of your code. Just make your code easy to navigate, clean and well commented. You'll thank yourself later when you come back to it.
Seconded on the use of PDO. It means that you have tested well thought methods of sanitizing queries before they go to your database and makes it dead simple to switch the type of database you're using. You'll never have to go through and find all those mysql specific queries. By the way, SQLite3 makes an amazing development database to test things against, you don't have to worry about permission issues, connectivity, or anything else with a standard 'server' database. You should use a real database once you move into production however.
Your database connection, if you're using pdo, is one thing you could put in a global, or late-binding via a static variable in a db() function. It's less typing to go db()-&gt;query(...) vs global $db; $db-&gt;query(...);
An object with an array of data yes, but an object with an array of objects, no. Don't let this confuse you.
Interesting...I'll take a look at it.
Do *not* make a separate class for each different thing. That's what objects are for. A class should be the template for multiple instances of objects. As for databases, many libraries (ex, PDO mentioned above) will already wrap up rows from databases in an object interface. Use a single Post class that will only be instantiated once, that then uses something like PDO or mysql\_fetch\_* to fetch however many posts you need. Basically, this class will have methods like fetch\_by\_id to get a single post by specifying its id, or fetch\_by\_day to get all posts for a single day. If you're unfamiliar with OOP, I strongly suggest you start with several smaller projects and ask here or elsewhere to do code reviews.
I feel your pain. As with each other program in CentOS, the version numbers of released software will not change over the life time of a CentOS product. CentOS 5.0 contained PHP 5.1.6, and that is the point version PHP will stay at for the life time of CentOS 5. It is possible that upstream or the CentOS team decides to push a newer version into some additionial repository. But there are no such plans at the moment. 
5.2 was released as stable in November 2006. This is NOT too soon to drop support for it; if anything, it shows that hosts and developers need to adapt new versions quicker. Maybe if it works, it'll mean we don't have to wait another 10 years for 6.0.
The way I had envisioned it is when you view, say, a thread, you have an object of type thread which runs a get_posts method that creates a post object for each post. The more I read these comments, the more I realize I don't need a post object, and I can just have a thread object that returns an array of posts stored as strings, and not an array of post objects. Hopefully I'm explaining it right.
Yep, you're on the right track. Instead of an array of strings, you should probably use an array of associative arrays. If you think about it, you're probably just using the array of threads by iterating through them in your HTML template. Something like this: foreach($posts as $post){ echo "&lt;p&gt;{$post['text']}&lt;/p&gt;"; } Each $post is an associative array containing the fields in your database mapped to the respective values. $post may also have fields such as 'author' and 'id'. This will let you do something like this: foreach($posts as $post){ echo "&lt;p&gt;{$post['text']}&lt;/p&gt;". "&lt;br/&gt;Written by {$post['author']}&lt;br/&gt;"; }
wow, even Debian stable is on 5.2!
Can you provide some measurments on this? I'd be interested. Lets say a forum thread has 1,000 posts. How much bigger is a thread-object with 1,000 post-objects in it than an array of posts? this http://stackoverflow.com/questions/469386/php-object-creation-and-memory-usage seems to support you, objects are 'memory usage surprising bloated'...
That's exactly what I had envisioned after posting this thread. Before this thread, I had the idea of... for($i=0;$i&lt;$rowcount;$i++) {$post[$i] = new post($postid);} Then... for($i=0;$i&lt;$rowcount;$i++) {echo "&lt;p&gt;{$post[$i].getText()}&lt;/p&gt;";} This way is too complicated and I was worried it'd use too much memory, your way is the way I'm doing it now, just outside a class object. Basically I see now that I was putting too much faith on shoving everything into a million different objects rather than just meeting halfway and not making it too complicated.
That's exactly how my app works...and when you combine it with class autoloading, you will eliminate all those require statements on every page
Agreed.... But you can type "class.b" then hit tab. I would much prefer the first format though (x.class.php). And just an FYI (for anyone reading this), never call them x.class without the PHP extension unless you configure the server to use .class as a PHP file. I saw a guy do this once and if you knew the URL you could put it in the browser and it would spit out the class file for you to download and then proceed to open in a text editor.
oh jesus, yeah back when I was a junior programmer the company I worked for used to have files like `foo.inc` with exactly that problem all over the place. Including `database.inc` and all sorts!
Wow, I had to dig to find this old post of mine: [Simple test of execution speeds](http://www.reddit.com/r/PHP/comments/a7mco/recommended_readings_for_object_oriented_php/c0g8e8p?context=3) The "test" was incrementing a number 100000 times, and to my surprise the speeds weren't in the order that I expected them to be. Not that it matters, if you're performing that kind of micro-optimization you're using the wrong language. Write the code so it's readable and updateable, *then* profile it if you have issues. Don't go down route A because "it's the fastest one". (And, as a sidenote, never **ever** think you can rewrite native functions into faster/more efficient ones using PHP. That one still amazes me). As in: I'm not disagreeing with you at all, just adding some content.
Someone needs to implement a global clippy for every editor that handles PHP. "It looks like you're trying to optimize. Would you like to stop that?"
Exactly. Your biggest performance hit is almost always the database. 1. Spend more time making additional indexes for your slowest queries. (which you can find by enabling mysql's slow query log). Views and aggregates are good too. 2. Implement a cache where possible such as PEAR's cache lite. This is of course best for pieces that change seldomly which in a forum might not be possible. Making the code easy to maintain will pay off dividends later. For instance you can make a database access class that you use for all your objects that you can insert a caching layer on without going to every line you access the DB from. You'll probably save more actual end user performance by doing simple things like enabling mod_deflate on apache, putting css at the top of the page and javascript at the bottom, optimizing graphics, etc. 
Objects aren't that slow in PHP. I've got a forum using an object for everything (and I'm being sloppy, instantiating entire objects just to get user names), running on a weak single-core Atom, and it can easily handle 30 pages per second. On serious hardware it's 10x faster.
Linux n00b here. What is the main disadvantage of compiling the latest version of PHP from source on a CentOS system? Is it the lack of stability and Q/A for doing such a thing that is the major impediment? 
Not handy, no. It would depend on the objects. We use Propel or Doctrine, and the difference is of course *massive*. PDO objects, I'm not sure, I'd have to write some tests. If you're talking simple stdClass objects, they're likely equal to a hash/array in memory consumption. But what's the point/difference if they have no logic? 
Good to know about performance.
IANASA so I really can't give you a good answer. I think most sys admins would just complain that it's not stable/approved/secure. In most cases you can get newer packages from the cent test repo. Even up to 5.3 I believe. Many times those are still hard to approve in big corp prod environments. 
[http://blog.famillecollet.com/pages/Config-en](http://blog.famillecollet.com/pages/Config-en) [http://fedoraproject.org/wiki/EPEL](http://fedoraproject.org/wiki/EPEL)
I guess it's technically OO since we're still using classes, but it's a much different approach than what I normally think of when I think OO. For me, the classes are really just used like you would namespaces. In a "normal" oo app, you'd do something like: $post = new Post(array('post_id' =&gt; 10)); $post-&gt;setTitle('Awesome Post'); $post-&gt;setTags('php'); $post-&gt;save(); The way I'm doing it, you'd just say: $arr = array('post_id' =&gt; 10, 'title' =&gt; 'Awesome Post', 'tags' =&gt; 'php'); Post::save($arr); No concept of each post ever really being it's own entity that can be managed on it's own. The functional aspect is that my save method never has to rely on what's happened previously in the object life. I'll always know if it gets a given input array, it'll always produce the same output. Your example shows that as well, but I just wanted to expand on the functional aspect which has so far made debugging easier for me.
Do you have to support this application? Does the person who has to support it know where you live?
It's my app, I'll be the one supporting it. ....why?
If you are concerned about making many objects and only using them once or something, make the function static. This will allow you to write something like Thread::getPosts($threadid); and you will not have to instantiate a new Thread object
I'll be using this for a few things, but thanks.
Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.
That's even more reason to recode it in the way I'm envisioning now!
GASP! Kilobytes of memory are being used!
Have a look at my pork.dbobject, from looking at the comments, it's exactly what you want and will save you loads of time http://www.schizofreend.nl/pork.dbobject If you're smart, with a big project like this, look to rewrite the stuff to OO wher you keep repeating yourself. Depending on how large the project is, and how much free time you have on your hands, either refactor until you're happy maintaining it, or, if you are going to rewrite it completely from scratch then *only use your old code from learning of your mistakes* Don't cut-n-paste, re-think everything from the ground up. You'll end up with improving yourself along the line :) Also, a good tip is if you write a class for something, make sure you can drop it into another project with as little alterations as possible. I find that creating that OO library and profiting from your earlier labour is one of the best profits of OO developing in PHP. About performance: from all my experience i'd say that your pages should be able to render in .025 seconds. Time your code, and if it's wáy above that, refactor your database usage. From a cpu / performance perspective, don't even bother. It's a non-factor in websites that people get too excited over. At my current job, we process webpages that sometimes have 80 queries, hundreds of instantiated classes, and all of it still performs smoothly.
Truthfully, I've rewritten this code three times already. Man, you should have seen the first iteration. It was so bad I can't even begin to describe. Three methods, each over a page long, each basically the same, each taking in a dozen arguments turned into one function, taking in two arguments, spanning a page, to what I'm coding now, which will be three or so functions at around half a page. I'm going to try to make my forum classes as modular as possible so I can port them to other web projects I have or will do in the future, as well as the init and database accessor classes. The other classes (pertaining to the game engine) aren't really useful outside this scope, BUT I'll keep that in mind.
Sounds like you're evolving to a better programmer the perfectly natural way :) Keep thinking like this, i think without any exception, everyone of us can vouch that we're not proud of our first programming projects. That's what makes you better with everything you do :)
Just my $0.02: Some applications will create use and destroy thousands of instances of up to hundreds of different classes all in a single page view. And it wont noticeably change the execution time than if you used no classes at all. Don't worry about the performance of the language constructs you use, just use them. Its the performance of the built-in functions that you need to be wary of, but definitely not language constructs.
Running: &lt;?php print round((memory_get_usage() / 1024) , 2) . 'kb'; $arr = array(); for( $i = 0; $i &lt; 10000; $i++ ) $arr[$i] = "test data"; print " | "; print round((memory_get_usage() / 1024) , 2) . 'kb'; On 5.2.11 and 5.3.0 (everything else, apache, windows 7, the same): for( ... 10000 ... ) ---------------------------- 5.2.11: 85.09kb | 1086.8kb 5.3.0: 349.55kb | 1429.42kb for( ... 100000 ... ) ----------------------------- 5.2.11: 85.09kb | 9972.3kb 5.3.0: 349.55kb | 11018.05kb for( ... 1000000 ... ) ----------------------------- 5.2.11: 85.09kb | 97931.3kb 5.3.0: 349.55kb | 106008.3kb So at worse I gain ~8.1mb of bloat for 1000000, ~1.1mb of bloat for 100000, and ~0.4mb of bloat for 10000. In the scheme of things, that's pretty paltry and by no stretch of the imagination "much worse" than the x7 increase in the baseline. Toss in the fact that [5.3.x actually has garbage collection](http://php.net/manual/en/features.gc.php) where as 5.2.x will just consume memory like a glutton without freeing anything, I think you're blowing what amounts to the overhead brought on by language additions (such as the GC system) out of proportion and falsely extrapolating it into a doomsday memory consumption scenario.
It sucks but reality is CentOS wasn't going to upgrade you even when it was still in active development. They're not going to backport features (they've always maintained an informal policy that 5.x releases were for feature additions and/or removals, 5.x.y releases would only be fixes for bugs, stability, and compatability). So really, nothing has changed for CentOS users other than CentOS might be more encouraged to jump ahead more quickly in future versions.
We are. 5.0.x, in live production, processing millions of dollars of orders a year. The application is so tightly coupled to the outdated platform it runs on top of that we decided a parallel rewrite from scratch was the best way to fix it. 5.3 on PostgreSQL, aggressively OS independent, and months away from production.
RHEL6 apparently [includes PHP 5.3 by default](http://blog.famillecollet.com/post/2010/05/03/RHEL-will-provides-PHP-5.3). This will be great, up to the point where PHP's trunk becomes 5.4. Trunk currently contains delicious new features, like traits and type hints for primitives. At least we got PHP-FPM in 5.3.3....
They [**fixed** memory\_get\_usage](http://bugs.php.net/48434) in [5.2.10](http://us2.php.net/ChangeLog-5.php#5.2.10). 
They updated it, but the bug discusses freeing memory, that line has/frees no vars. Tell me if I'm mistaken, I'll gladly accept it.
Are the users anonymous or do they have to be authenticated before you deal with the settings? If they aren't authenticated, your only real option for persistence is Cookies: $_COOKIES['num_results_to_show'] = 10; If they are authenticated, you could still use cookies, but when they logged in, you could check if they had any cookies set previously. If they have, then you just use those settings. If they don't, you can pull their settings from the mysql table: if(!isset($_COOKIES['num_results_to_show'])) { //pull data from database $result = mysql_query( "SELECT val FROM settings WHERE user_id = '" . $_SESSION['user_id'] . "' AND name = 'num_results_to_show'" ); $row = mysql_fetch_assoc($result); if($row) { $_COOKIES['num_results_to_show'] = $row['num_results_to_show']; } else { //so if they don't have a setting for this, we set it to whatever default you want $_COOKIES['num_results_to_show'] = 25; } } That's the basic idea of how I'd go about it (save for code doing the querying...you'd want to make sure to use parameter binding with PDO probably to avoid SQL injection attacks, but I wanted to keep it simple).
We're using 5.1.6 on CentOS. Last time I checked 5.3 wasn't in the official repos, but that has probably/hopefully changed since. Edit: 5.1.6 and not 5.2
I would recommend to you to use a PHP framework
I run a shared hosting server. We deployed a new server on PHP 5.3 and started migrating accounts to it about 3 months ago. The latest Magento and another package (Joomla or Wordpress) was getting errors with 5.3 and we had to roll back to 5.2. We're SLOWLY getting users off PHP4 but it's hard work trying to explain to an end user who says their website has been fine for 5 years how or why they have to move up. 
Found something pretty cool, half-way towards what I had in mind: [http://kodingen.com/](http://kodingen.com/)
I thought about it, but I never really could understand how to use a framework.
You keep your servers four years out of date?
Are you using mod_php? What version of apache? This could be per-process memory, not per request, and if that's the case the difference is mostly trivial and may even result in faster request processing. You should try your benchmark with the cli version as well.
The problem with sessions is that they're a temporary thing by design — PHP will delete them automatically after a while with its default settings. You'll need a more permanent backing store for the actual data, and use sessions only for something like a login. The clue is in the name. Cookies shouldn't be used for anything other than identifying a specific user. Keeping everything else server-side protects against tampering (less validation to do on every page). Also, storing everything in a cookie is bad for speed because they have to be sent to the server before the page even loads (usually over slow upload links), and that delay is multiplied by however many external files you load from the page unless you take the time to optimise it.
I'm guessing something in [the 5.3.0 changelog](http://www.php.net/ChangeLog-5.php#5.3.0) caused the sudden jump. Probably the addition of GC.
&gt; Your biggest performance hit is almost always the database. This.
&gt; Have a look at my pork ಠ_ಠ
This all looks incredibly over-complicated.
I'm rewriting my accounts app I wrote for my business. Till now it's been a poorly written set of plugins for typo3. I'm rewriting it as a stand-alone application using the yii framework. I had the same motivations as you, but it's taken me 3 attempts to actually get under way (other priorities), but now that I've finally got started I'm making fast progress. I really would recommend using a framework too, or you'll spend 95% of your time reinventing the wheel, doing the boring bits of code, instead of coding the novel solution to your problem.
Here's some of the more porny features that should convince people to use PDO: foreach($query as $row) { } If the query returns 0 rows, your foreach gets skipped; same as with any other iterator. You get to write loops over queries as "loop over this query" instead of "while this query isn't returning false..." $query=db()-&gt;query('select * from hello where world=:world',array('world'=&gt;$world)); No more mysql\_really\_real\_escape\_string\_for\_real\_this\_time! Also it seems to recognize the difference between '', 0, false and null, most of the time! My big beef is, you can't do this yet: $query=db()-&gt;query('select * from thingy where thingy_id in (:values)',array('values'=&gt;array(...))); You still need to build up multiple-inserts and lists by hand.
As long as your SQL isn't returning the entire object graph with every query you're going to be fine on memory with an OO-based design. Stop letting that thought worry you. There's a lot of long term value in using an understandable pattern. 
I wouldn't rewrite a native function, in fact I love when they exist - they take work off of me because they do what I now no longer have to think about doing.
Document, document, document. In either case actually. I can't even count the number of times I've looked at somebody else's classes and they had no documentation. Wading through that can be a nightmare. Even for yourself, months or years down the road you may come back and can't remember every little detail. 
I love to comment things, that won't be a problem. I also try to name things descriptively, I _hate_ when programmers name variables like v_rtcvpmkQuik, or v_l, or anything totally not descriptive. I like names like $counter, and $username, and $encryptedPassword, etc.
In general, when OO apps are written correctly, they are much easier to support &amp; maintain.
you should make an effort there are tons of good beginer tutorials that show you step by step how to use them. Next move: create your own (basic of course) php framework
You could also write [speed based tests](http://www.phpunit.de/manual/3.0/en/testcase-extensions.html#testcase-extensions.performance) within PHPUnit...
&gt;I’ll let you guess how many of the first 10 use “or die()” to catch failing queries. The tutorials are small scripts, if anything in the script fails, the entire script is useless and they SHOULD die(). Exception handling is a whole different chapter and it's not really useful for such small scripts.
&gt;$query=db()-&gt;query('select * from thingy where thingy_id in (:values)',array('values'=&gt;array(...))); Zend::DB will allow this, fyi.
&gt;If your code dies, you won’t know the line. You won’t know the function, and not the file. Well, that is just a flat out lie. die("Sorry Dave, I can't do that thing on line " . __LINE__ . " in " . __FILE__);
I'll quite often just use or die("its fucked") if i'm writing a script or something that isn't going to run in production or unattended. Anything critical usually has an exception
This article would be more useful to beginners if instead of just saying "use this instead", he recoded the die() examples he found on google into the methods he's advocating. Articles about code, without code are retarded.
I've never seen anyone be polite enough to use that syntax. Chances are if you know that you know how to throw an exception or return false.
In your header, check the value of the postId or whatever you call it in your query string. Then make a trip to the database, retrieve the subject of that post, and drop it in the title tag.
&gt; isn't going to run in production or unattended. Would you care to wager how many PHP developers think along those lines, but don't follow through? Common scenario: * Client: there's weird error messages on the live site, help? * Project Manager: We'll get on it. ... meanwhile the project manager badgers the developer ... * Developer: Pfft. They should just turn error reporting off, and set it to not display errors (in case they leave error reporting on). 80% of PHP web developers think along those lines. Logging? Fuck that shit. Just hide what's wrong and be done with it. It's not just warnings or notices, but the functionality of the site is affected? Do as little as you can. EDIT: typo
&gt; The tutorials are small scripts, [...] This is how every project starts, unless it's a cluster-fuck like Wordpress, Joomla, Drupal, or $ShittyPhp4Cms. Get it right the first time, or get ready for some pain.
http://code.google.com/apis/recaptcha/docs/php.html Same tutorial, only by the reCAPTCHA guys themselves.
glad I wasn't alone in thinking this
i use it in two production servers. so far, so good... performance++++
Agreed; I've seen so many "professional" programmers use zero sense when it comes to handling issues in their code. I don't think it's fair to blame PHP developers though. From what I've witnessed there are crappy developers regardless of the language. Yes, even Ruby.
I'd be willing to bet a lot of PHP developers wouldn't really have a difference between production and development. General rule of thumb is if a customer sees it or if it interacts with something I don't see it doing it exceptions
A PHP Framework is unlikely to be your downfall, poor SQL is much more likely. What does this "very high performance" need to do, what sort of data processing will it have to perform?
I run a website that needs high-performance (like, really high-performance). It's simply not worth it to have a fully-fledged framework. There is too much overhead. In my experience it's easier to adopt the most basic MVC model and OOP framework for your application and build off of that for websites that need high-performance. You'll be more comfortable with optimizing and developing with it, in my opinion. I like to call very simple, extendable frameworks for projects like these *foundations* instead. You can either build it yourself (recommended) or use something like [this](http://hydrogenphp.com/).
Bottleneck will be the DB, not the framework 99% of the time.
die() is useful when you've stubbed a function and want it to just die and spit out some "in development" text while you build stuff around it. That's about it. try / catch with proper exception handling is the way to go when it comes to production stuff.
Protop: use constants and your own die function. Ie: &lt;?php define("DEBUG", true); function debugDie($message) { if (DEBUG) die($message); return; } Prevent embarrassing fuck-ups by avoiding the *direct* usage of die().
Like others have said your db will be your downfall. Make sure you properly index the db and cache your db results with memcached or APC. IMO CodeIgniter has the smallest footprint with a large amount of power for its size. It doesn't do everything but it wasn't designed to. It just gets out of your way and lets you do your thing when you need to do something that is a little our of the ordinary.
Yes, the DB is more likely to be the issue, however most frameworks push you towards a certain DB access pattern. Just do some research about the DB abstraction layer before using it.
It's not really about the framework when it comes to performance, it's about application architecture and (thus) caching strategy. No concrete numbers off the top of my head, but Apache is really fast at serving static files. Performance goes down big time as soon as the PHP interpreter is involved. It goes down further (quite a bit) as soon as you're bootstrapping any decent framework. I tend to use the Zend Framework for applications, but that has little to do with performance requirements. It's simply my component library of choice. The same thing can most likely be done with any other framework. Symfony, Cake, whatever. ZF offers various caching strategies from just caching data in one of the various backends, caching view snippets all the way to generating static files that Apache would serve directly (which will need to be busted by a separate script). In cases where you need PHP, but want to skip the heavy bootstrapping process, you can just pick the components you want and use them in a standalone one-off page to handle specific requests. Maybe you need to pull user-specific data from the database that you're using a join for. It's all context specific, but perhaps it's possible to turn your "complex" query into two separate simpler queries, of which one can be processed into a lookup array, cached (memcache, for instance), and the other can be highly optimized and make use of the lookup array, in order to speed things up. Maybe you need to display a user-specific header (their login and links only for logged in users), but instead of generating custom pages and sessions, you use signed cookies only, and use Javascript to modify the page header based on the cookie contents (which has their user id and name), therefore being able to cache the page in its entirety for all users, which still providing some custom, user-specific content. In some cases you can also provide a static empty container page and fill it with data from an AJAX call that pulls in JSON encoded, cache-able data. That's just a beginning, but I'm already late for work. :) A few more details about the type of web site you're trying to build, and the performance problems you're anticipating would help narrow things down.
This is something I was wondering about while using Symfony. Can anyone comment on its footprint in high-performance websites?
I wrote a custom CMS and later rewrote it using Kohana framework. When I compared information, the version using the framework used less memory per page load than the smaller CMS I wrote. I think part of it was that a fair portion of Kohana is not just a ton of overhead; there isn't too much crap loaded to begin with, and since most of the libraries are static, can be called into to use as needed. A small note - The previous CMS I wrote didn't use any static methods, and was not MVC. The memory useage difference was almost 1 MB per page load!
It sounds to me like a collection of different libraries would be more useful to you since you can rip them out and replace them as you need. Such a thing is harder with a full stack framework. In terms of writing your own MVC shell, I would recommend checking out [Moor](http://github.com/jeffturcotte/moor) for routing and [Twig](http://www.twig-project.org/) for templating. I have a feeling that you want to stay away from most ORMs if you are concerned about performance and instead focus on writing SQL that you optimize by hand. If you haven't seen it before, I recommend checking out the talk [Simple is Hard](http://www.archive.org/details/simple_is_hard) by Rasmus about PHP performance. In terms of squeezing the most performance you can out of PHP, you are going to want to be caching as much as possible to prevent requests from ever hitting your PHP business logic or your database. However, there are going to be cache misses, and you want those to be fast also. You can always investigate [HipHop for PHP](http://github.com/facebook/hiphop-php) by Facebook, which compiles your site into a self-contained C++ version of your site with a built-in web server. Using it will obviously affect how you do your deployment, and it doesn't run on every distribution or platform, so it may affect your production environment.
&gt; In some cases you can also provide a static empty container page and fill it with data from an AJAX call that pulls in JSON encoded, cache-able data. I could be wrong, but I believe this is exactly what Facebook does.
If you're not using an existing framework, you'll be writing one from scratch. Is it worth it to roll your own framework *AND* write the project in it?
there will be a tradeoff in performance, buuut: you will be able to write much cleaner and maintainable code, which pays off IMHO. if you have problems with performance you can always try to optimise afterwards (and implement proper caching), and more important: you can throw more hardware at it. hardware ich much cheaper than workhours nowadays...
Have you looked into Google Calendar? It's fairly easy to set up and can be managed from a Gmail account.
Thanks to both. Got it set up and running well. Appreciate the help.
"Calendar" if you Google it.
90% of your bottlenecks will be database access requests. Rules for high performance: * don't directly hit the database for anything * if you can cache it then cache it (read: memcache, APC, etc) * too much normalization can kill you, but not enough will introduce time-consuming programmatic difficulties * use a CDN * if you can cache it then cache it (read: memcache, APC, etc) * if the above fails, tune your server (mysql query cache, apache config) * if the above fails, re-factor your code * if the above fails, add more servers (round-robin web/round-robin database servers, use a dedicated memcache server to handle php sessions across multiple apache instances)
"Free PHP Calender" "PHP Event Calendar" yeah I googled it. 
I need one that can be displayed to the public in a web page.
You can do that with Google Calendar. [Link to the API](http://code.google.com/apis/calendar/)
I forgot that Google will correct your spelling for you. "Calendar" is a tough one.
You google it dipshit and tell me what you get.
Yahoo! run delicious.com on Symfony. It's rock solid.
This for sure. You can make forms to update the calendar. Not sure if it would let you delete though.
Why the return statement?
The only place I use die is at the top of all php files that are not entry points for the application, a la: defined('APP_ENTRY') or die('Unauthorized access.'); All valid entry points need to define APP_ENTRY.
I'm a noob, but eager to understand more. How does one go about using a cookie to identify the user? I understand sessions (which I enable for login [by setting it to 1] after they login). I'd like to know about this additional security which I'm missing out on.
If performance is that critical then maybe PHP is not the solution. In all reality though, the DB layer will be the biggest performance bottleneck. Frameworks are great for separating concerns and leveraging others that are likely more talented and more experienced. The better frameworks can be used piecemeal so that you can pick and choose how heavy your application gets. 
Header should be just your html and stuff, so set a var in your main file (eg, index.php). **index.php:** &lt;?php $page_title = 'My page'; //or hit the db and get the post/topic/whatever title include('header.php'); //rest of your code ?&gt; **header.php** &lt;?php if($page_title == '') $page_title = 'My Site'; ?&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;?php echo $page_title;?&gt;&lt;/title&gt; &lt;!--etc...--&gt; 
Facebook does quite a bit.
I know that in ZF the bottleneck is the class auto loader. Man, that thing is slow.
This is pretty much what I was going to say, though my method is slightly different: When the user logs in I generate a new random string and store it without hashing on both sides. If there's already one in the database, I reuse it, and when they click the log out button the value gets wiped from the database, which has the side effect of logging the user out from every computer they were logged in on. While your one's pretty safe too, it doesn't sound like it'd help if they forgot to log out at a library.
I've had good results with adLDAP, here : http://adldap.sourceforge.net/ Active Directory access from php makes the baby Jesus cry, and fairies die. more than 1000 returns from a user query I found next to impossible to retrieve, even using paging methods. adLDAP is nice.
&gt; and use Javascript &gt; from an AJAX call Websites should really work without Javascript. Especially with the quantity of NoScript users these days. If you have both JS *and* and non-JS backup, that seems like quite a lot of extra work.
the tool i wrote is working out well. Its all working now. Thanks guys!
My current employer ( which I am not mentioning as I want to keep my reddit account separate from ) has about 22-30 million page requests a day. They use a pretty standard HA&amp;L pattern for infrastructure - multiple application servers, static servers, two separate MySQL replication arrays ( 2 different schema's ), and then they've got Kohana for the bulk of the dynamic requests. The exception are two page's that are mostly procedural code ( vs OO ). Otherwise for my last client ( switched from being a consultant to full time code monkey ) they had a MySQL based schema with 0 indexes beyond the primary key. The reason for their continued survival is that the bulk of all requests were for heavily cached JSON payloads. How these two mesh together is simple: Both the Space Shuttle &amp; Soyuz rocket system get into space, one is astronomically cheaper because of its simplicity while the other is more versatile but scary complicated. Instead of aiming to build a space shuttle, just focus on getting into space first.
Let me see if I get this. In the beginning of an app-file you make a constant called APP_ENTRY. In all files that are included (i.e. helpers) you put defined('APP_ENTRY') or die('Unauthorized access.'); So if someone tried to call a helper class, then APP_ENTRY isn't defined, and the script dies. Am I right? Also, are you sure this is a secure way to protect your scripts?
That might actually work...
If you struggle with implementing reCapatcha you shouldn't be a developer. First step on the tut is a screenshot of the "use" button? Seriously? 
Are you the Krumo guy? If so, fix this: &gt; // Krumo is enable, printing is OK Seems rather promising, but the name is.. is.. beyond laughable. :D
Sorry, I'm not the Krumo guy. It was installed along with a Drupal module I was looking at, and I thought /r/php would like to know about it.
Yes, seems nice.
Interesting, I'll give it a try. To be honest I prefer a tree style display of arrays to better visualize their contents and structure. [Here's an example](http://nucleoid.net/olivier/trx1.php) of an array visualizer I made a few years ago for PHP displaying a multidimensional array filled with random gibberish. I don't use PHP a lot so I never cared to update it, but I'm thinking on updating it to display more information on the array's contents and structure and make the sub-arrays collapsible. After updating it with the new features I'll upload the code to Sourforge. 
Kinda pointless. If you view source on a print_r it's formatted very nicely.
Sounds interesting, I'll give it a shot
I've used Kohana myself, along with most of the frameworks out there. We're building our own, partly for learning purposes, partly for having control over the apps we're building on top of it.
Neat, but this only works when you're debugging outputs that are sensitive and can't contain a bunch of HTML in the middle.
I prefer using the [xdebug pecl extension](http://www.xdebug.org), give it a look
I tried it some time ago, but it seemed pretty buggy when it comes to large and complex structures...
agreed, and xdebug does so much more. IMHO it's an essential item in a PHP dev's toolkit.
The link is my fork, be sure to check out the [proper FSX/php-utf8 repo](http://github.com/FSX/php-utf8).
 echo nl2br( print_r( $expression, true ) ); or echo '&lt;pre&gt;'. print_r( $expression, true ) .'&lt;/pre&gt;'; 
Thanks! I totally forgot about pre.
Easy integration with Smarty
I used Krumo, and it is good, but I prefer using [FirePHP](http://firephp.org) and a decend IDE debugger. Zend and XDebug both do fine.
Just create some sort of macro, using TextExpander or something, so you can just type printarray and have it be replaced with the &lt;pre&gt; mess.
http://github.com/petsagouris/php-utf8
From my experience, your biggest slowdown in large codebases is object instantiation, especially if you have huge classes. The more classes you call from object scope, the slower; the more static function &amp; static class method calls you can do, the general overall health of your performance will be maintained.
agreed. I dislike articles like this - what, are they supposed to have been put up here just in case someone was thinking "hey, how do I implement reCaptcha in PHP?" This is the sort of thing that google's for. /r/PHP (and other such places) are for unusual things that I might not otherwise have discovered. Stuff that I wouldn't be searching for but still find interesting. My opinion, anyway.
Big Nusphere user here.
It's not so trivial when you need to print_r an object with 15 pages worth of depth.
Install [devel](http://drupal.org/project/devel) and [Drupal for Firebug](http://drupal.org/project/drupalforfirebug) and your life will become instantly better.
It is merely a way of assuring that no one can access a script that is only for inclusion. In your core bootstrap/startup process you define APP_ENTRY and at the top of all included files you add the die line.
What happens when you wrap dammit around single quotes instead of double quotes?
 $string .= key($values).' = '.current($values); should be $string .= "`". key($values) ."' = '". mysql_real_escape_string(current($values)) ."'"; 
I'm not sure who came up with the bright idea of making your own mysql class. [try this instead](http://php.net/manual/en/book.mysqli.php)
I've done it and use my class alot. I find it helps save time, I dunno. For example, say I have a user who has logged in and their UserID session variable has been set. Here's how I pull out what I need in just one line (two if you count the instantiation). $UserID = $_SESSION['UserID']; $DB = new MyDB(); $UserRow = $DB-&gt;TableRowQuery("Users", "UserID = $UserID"); echo "Welcome back " . $UserRow['Name']; And there are other functions my class handles. For example, say I don't want to fetch a row right off the bat. Say the UserID is a request variable instead of a session variable and maybe the UserID might not exist. $UserID = $_REQUEST['UserID']; $DB = new MyDB(); $DB-&gt;TableQuery("Users", "UserID = $UserID"); if ($DB-&gt;Count() &gt; 0) { $UserRow = $DB-&gt;Row(); $Name = $UserRow['Name']; echo "User's name: $Name"; } else { echo "UserID $UserID not found"; } That said, I'll take a closer look at mysqli when I've got some time.
agreed, we already have nice debug tools, let's use them!
devel is the module I installed. Drupal for Firebug I hadn't heard about, but I think I'd probably use FirePHP for that sort of thing.
Awesome. Thanks. :)
Use an IDE with a debugger. I use Eclipse with the Zend Debugger. http://www.zend.com/community/pdt
None of these were exciting at all. PHP will be dead in 10 years. Porting it to .NET, Java, or turning it into LISP isn't going to solve anything. and P.S. There is literally nothing "experimenty" about creating a Stack Overflow clone in PHP.
good watch, TIL about the new ternary shortcut ?:
Having a guestbook on your site in 2004 made you a rock star? Edit: The rest of the article is not bad. Symfony documentation is still nothing to write home about.
&gt;PHP will be dead in 10 years. Just like .bat files.
I wouldn't call them exciting, but most of them were hilarious. I thought that was the point of posting this article...
Thanks! This will undoubtedly come in handy whenever Drupal 7 is released, which will require 5.2 or greater.
The problem I have with Zend is that it sounds to me what a php framework would be like if written by Smurfs. You want the date? Just call Smurf::get_date(). Authorization? Got that too. Smurf_auth(). Just Smurf your way through our Smurfy tutorial and you can Smurf your blog in less than 20 Smurfing minutes! Muther Smurfer! Yea, I know. It's a namespace thing. But still. I hate having to say the word Smurf - I mean Zend - 10,000 times a day in my head.
PHP dead in 10 years? No.
People will always find something to complain about I guess...
Smurfette totally smurfed me. 
if($_GET['debug']) print "got to step 134.343!&lt;br&gt;"; ... just kidding ;)
In my limited experience, CakePHP is the best documented and easiest-to-use. But by and large, most frameworks do the same things, and the one you like best is more a matter of personal preference than anything else.
Why would I use a framework? Is it faster because many things are already written?
Code ignighter was written for php4 and has tons of rotten old code...
Thankfully the 2.0 release is going to use PHP 5.3 namespaces so you don't need to presmurf the vast majority of it.
Bah. these aren't interesting. Checkout my neural network admin purely in PHP (http://neuralmesh.com) That's interesting ;)
as of 2.0 that is being deprecated and 2.1 it will no longer exist. 
Step 1: Turn on error reporting on your development server so you don't get blank pages. Make sure your php.ini file contains at least these two lines: display_errors = On error_reporting = -1 Step 1a: If you don't have a development server separate to your production server, set one up, then go back to step 1. Make it as similar as possible to your production server (same version of PHP, same extensions). Even for little personal projects, not having one is just asking for trouble — Google "developmestruction" for some stories. Step 2: Install [XDebug](http://xdebug.org/) on your development server. Even if you never use the advanced features of it like remote debugging and profiling, you instantly get more helpful error messages, since you get backtraces. Win! OK, those are the basics, and should cover you for parse and fatal errors. Logic errors can often be debugged simply with judicious use of [var_dump()](http://au2.php.net/var_dump), and XDebug gives you some extra formatting on those that makes them easier to read. Beyond that, as your needs get more complicated, you can look at IDEs with remote debuggers, as rho_ suggests, or standalone debuggers — the XDebug manual [includes a handy list of debuggers that can use its remote debugging capabilities](http://xdebug.org/docs/remote).
np.
Hey that is great news for the thousands of sites already written in Zend 1.10.
Zend appears to suffer from Not-Invented-Here Syndrome, IMHO. I'm surprised there isn't a `Zend_Wheel` class, complete with `Zend_WheelNotRound_Exception`.
Yep, that's what the article says in concluding.
I am aware, that you are, that I was joking in that sentence. I might confuse the years, but I do remember very well that there was a period when everybody for whom I did a website always requested a guestbook... even if eventually no one ever left a comment/shout in there.
Lack of documentation for symfony? [Really?](http://www.symfony-project.org/doc/1_4/) Some freely available books with either an overview per topic, a realistic application building tutorial and references (from configuration files to API). Further more there are loads of plug-ins, which are healthy signs of a community in my opinion. I'm not saying it's all perfect (it never is), but the documentation was the reason I picked symfony in the first place. If this is his conclusion for the framework I do know, I can't really take the other conclusions for frameworks I don't know serious.
Right in the smurfin parking lot?
I specified in the article that I was referring to version 1.0 of the framework which I was obliged to use. And later on I have pointed out that things have much improved from that point onward.
We usually move the included code outside the public_html directory.
Funny thing, PHP creator thought that it would be replaced by something more powerfull and user friendly in a couple of years.
Agreed, CodeIgniter power_punch-to-code_size ratio can hardly be beaten.
Oh thank you, my development server is xampp so I was hoping I wouldn't have to install and work with 2 (zend). I think I can use your instructions with my current setup.
Why don't you just roll your own? On a unique view (or every view) throw some data into a file or a database and when logged in as an admin parse the file or query the database. Webalizer is my favorite statistics script but it runs on the server and just writes html files. 
I don't roll my own because it isn't just a page view counter I want.
Using PHP it is very easy to get everything you want. Referrer data, IP, browser information, and more. It is trivial to make your own if you put in the effort and the end product is exactly what you want and not an attempt to shape an existing product into something that works for you but doesn't quite work exactly the way you want. 
I'm generally in favor of "rolling your own", but if there is a good class available from someone else then that always has to be the preferred option. 
It's trivial to capture all of that data, sure, but to parse it into meaningful trends is an endless task that is arguably best left to established software. Otherwise you'll find yourself spending valuable time reinventing the wheel rather than building new features for your site.
I've found [the missing GA Manual](http://www.grokdotcom.com/2009/02/16/the-missing-google-analytics-manual/) to be a handy resource, especially for finding things like a complete list of variables you can play with. GA has a ton of different filters that can be applied with varying levels of complexity and this is a good place to start.
That looks cool! Will have to play with it sometime.
I asked something similar in [/r/AskReddit](http://www.reddit.com/r/AskReddit/comments/crnd0/im_a_self_taught_php_developer_i_guess_im_at_a/). I got a lot of good resources (books, and websites) from responses. 
Read lots and look at other peoples code. It depends alot on what you want to be doing but pick up books on OO, algorithms and security. If its only web programming you want start looking into js and ajax based tools. If you really want to test your self have a look at things like project euler, it will start you thinking about how to code from a slight different angle than mysql + php + html makes websites
Find a problem, make it your own, and solve it; repeat. It is very difficult to learn or improve a skill/knowledge without a real motivation. *Wanting to improve* or *Learn new things* are in itself weak motivators as they do not imply a clear goal to work for: when have you learnt new thing or improved yourself enough? That is difficult to measure and even more difficult to honestly reflect on. My advise is to have a clear goal by finding a problem you can make your own. In the process of solving the problem you then can reach your goals of self betterment. In this case look for a programming problem in your own life or the lives of those around you. Who can benefit from a program written in PHP? Make a list of these kinds of problems and select one. I always look for problems related to my work and I end up writing educational software I use in the classes I teach. 
Well I didn't see him say he wanted trending data, all I saw was that he wanted to gather some stats about the current page and display it on the bottom. 
Thanks, that looks useful.
Learn a language (or three) that isn't PHP.
Actually, while I'm almost certain you're trolling, you're right. Learning other languages teaches you *programming*, whereas grinding more in the language of your choice teaches you how that specific language works. The more diverse your knowledge is, the easier your brain has seeing the patterns in what you're currently doing, and knowing how an implementation in X and Y would be enables you to easily figure it out for Z.
&gt; Read lots and look at other peoples code. The problem with PHP is that there's **a lot** of completely shit code out there that you can read. If you learn from that, you'll write shit code. If you're not good at PHP, you'll mistake bad code for good code, and then you'll go further down the drain.
[codegolf](http://codegolf.com/) Seriously. You'll write some **BAD** code when golfing, but it teaches you the ins and outs of whatever you're using. Use that in combination with the rest of the comments here ;)
* Create form on the webpage where you let your users insert the number * Process the number (through $_POST or $_GET, depending on the form) * Create the URL, by appending the number (after sanitizing it) * Use "header("Location: ".$newUrl);" to redirect the user to your site. This is one way to do it. Please don't hammer me about the details, just trying to point you in the right direction.
Try using a framework. I was considering to give up on PHP when I discovered [Doctrine.](http://www.doctrine-project.org/) now PHP is actually usable. 
got a direct link? Also i just wanted some kind of assignment most people like to do. as of right now the only PHP and SQL work i have experience is working with databases making user accounts setting privileges and making a skeleton for a e-commerce page orders
Sir, do you have a demo website?
There is some absoulte shockers out there. I've seen tutorials that make me wince. I would say that if you read enough PHP tutorials, blogs, code snippets you begin to get a feel for some of the better ways of doing things, couple this with books on algos and OO and you should be beginning to reconise when code is terrible and why its terrible. He said he's read whats wrong with PHP and it made him think, what you need to do now is build on that and spot where other people have fallen into the trap and make sure that you don't do this. 
he is right. learning different languages will help you write better code in (insert other language here). more often than not, similar concepts can be taken and applied to other languages. learning python helped me write better php.
I like CakePHP because you only have to code the direct functionality of your site in a minimum time, while still being able to do whatever the hell you want.
I linked my question to /r/AskReddit in my post above (is that what you mean?) 
Hey, I'm in the process of creating an entire educational system to bring people from absolute beginner at programming (e.g. never typed or even looked a line of code before) to serious PHP professional, making $40/hr or more, in about 2 years, and able to become a Zend Certified PHP 5 Engineer in about a year. It will cost a **fraction** of college and provide real need: Solid developers who know design patterns and all the other stuff that separates the pros from the amateurs. I would **gladly** -- even enthusiastically -- add you to the beta testers, a handful of people who are learning now using the course. As a (free!) beta tester, you will get free one-on-one training, access to all the course materials, the software-based tutor program, videos, and the interactive book. Anyone interested can, within the next 30 days, email me at theodore@phpexperts.pro and I'll gladly set you up. 
Hey, I'm in the process of creating an entire educational system to bring people from absolute beginner at programming (e.g. never typed or even looked a line of code before) to serious PHP professional, making $40/hr or more, in about 2 years, and able to become a Zend Certified PHP 5 Engineer in about a year. It will cost a **fraction** of college and provide real need: Solid developers who know design patterns and all the other stuff that separates the pros from the amateurs. I would **gladly** -- even enthusiastically -- add you to the beta testers, a handful of people who are learning now using the course. As a (free!) beta tester, you will get free one-on-one training, access to all the course materials, the software-based tutor program, videos, and the interactive book. Anyone interested can, within the next 30 days, email me at theodore@phpexperts.pro and I'll gladly set you up. 
Thanks.
I have have only once come across an open source PHP project that I would recommend noobs copy, and I forgot what it was called! (dammit!) The vast majority of professional code is shit, too. No, with PHP (and any language, really), you'll learn best by being the apprentice of a seasoned, certified developer who is already earning a six figure income.
Virtually all tutorials and beginners books out there are total crap that do nothing but churn out thousands of incompetent noobs.
It depends on your definition of moving up; are you more interested in gaining programmatic skill or looking for a stable job? The two tend to diverge in the middle-way and meet up at the top-end of how much PHP developers earn. In terms of skill gains, learning how to use frameworks will improve your viability and usefulness. Furthermore migrating to another programming language will be less painful. This takes a relatively long time though as it takes lots of practice. In terms of financial gains, learning about the standard CMS (and CMS-like) products is the direction to go in. Much of it will be creating themes from Photoshop designs and you will therefore need to be quite proficient in HTML/CSS (and perhaps even JavaScript+jQuery). The big names that most people are familiar with are usually Wordpress, Drupal, and Joomla. There's no reason you achieve both of the above said goals, though, so don't limit yourself. You can get stuck fairly easily and get into a rut where you don't improve your skill-set, so being optimistic and having a bit of irrational exuberance about what you do will help in that regard.
So you can never learn by reading?
Out of interest are you the padawan or the PHP master in this scenario?
Here is the code I used, simple - no php involved lol. &lt;form action="https://tdronline.ilinc.com/perl/ilinc/lms/vc_launch.pl" method="get" target="_self" id=""&gt; &lt;label&gt;Room Code &lt;input name="activity_id" type="text" id="activity_id" maxlength="6" /&gt; &lt;/label&gt; &lt;label for=""&gt;&lt;/label&gt; &lt;input name="&amp;amp;user_id=" type="submit" id="&amp;amp;user_id=" value="Join" /&gt; &lt;/form&gt;
Slow down, jumping into a framework hides a lot of code and you could end up knowing a lot LESS thanks to the hand holding. Just as annoying as the wordpress install-n-run "developers". Frameworks are great, but know be sure you know what's going on behind the curtain. I've got the same gripe about everyone using jQuery not knowing anything about JavaScript. 
Learn object oriented programming. OO is not specific to any one language as many languages like PHP have ways of implementing it. Oftentimes those new to OO *think* they're using OO principles when really they're just using classes as namespaces. True OO helps you organize your code in a fundamentally different way and allows for far more scalability and abstraction.
0 points1 point2 points 20 minutes ago[-] &gt; I hope you're not selling snakeoil. There's a real need for this, will you be paying experts to teach? What's your model? When will your website be up? The .pro registrar is doing its final audit of the site Aug 30. The lesson plan is about 1/4 finished and being created live -- by myself and one other Zend Certified PHP 5 Engineer -- based upon the needs and directions specified by the beginners. Right now, the program has 1 absolute beginner (never typed a line of code before), 1 VB dev, 1 skilled C++ dev, and 1 tenured PHP person who doesn't know about OOP, design patterns, etc. What I'm really looking for are one or two beginner PHP people. 
I find it funny that these SVN hooks are hosted on GitHub.
http://piwik.org/ I've tried Piwik a bit, albeit very little, it's open source and seams very solid.
That will be nice, we're still waiting on Drupal to release 7 so we can update PHP to the 5.3 branch
You can learn, then get trapped in the awful "I'm a l337 coder!!" phase and never have any idea what design patterns (or even debugging!) are (LOL!!). This, unfortunately, is the stage where the **vast** majority of PHP developers end up, even those making decent salaries in the +$75,000 range! I've worked in places where **no one** knew what a Factory was and where **everyone** thought debugging meant littering your code with a lot of print statements! ***THAT*** is what I'm trying to keep from happening to new devs w/ my material.
[Reposted comment from the link] I use Symfony in my day job and I hate it. I hate that everything is prefixed with sf (it feels like Im writing Objective C). I hate that I have to use yml files for everything, which only end up being cached as PHP files - why cant I just write PHP then! I hate that I'm no better off writing Doctrine - I may as well write raw SQL or PDO - especially when it comes to lacking features in Doctrine: No ifnull(), no leftJoin on updates?! Who thought Doctrine_Query::create()-&gt;from('sfGuardUser')-&gt;where('username = ?',$username); was really any faster than just writing 'SELECT * FROM sfGuardUser WHERE username = "'.$username.'"'? I hate that table definitions inside YAML files are almost literally no better than writing raw sql. I hate that I usually have to write my SQL by hand and then have to convert to Doctrine. I hate that it isn't as DRY as it should be, and I end up writing the same swiftmailer code, or $this-&gt;getUser()-&gt;getGuardUser()-&gt;getId() a million times across a code base. I hate that forms and validation are so limited that you invariably find yourself echoing out the form by hand using $field-&gt;renderFieldI(); instead of just echo $form. Symfony forms are really not build for designers. I hate that to just change one word in a template, I have to navigate through apps/frontend/modules/mymodule/templates/indexSuccess.php - even worse trying to teach a designer to do that. I hate that I'll write out some functionality for my website, and then be told that isnt the "way to do it in symfony", and I have to abstract 10 different classes to do what I already had done, just so it is "symfonic" I used to use CodeIgniter, and it seemed to not get in my way nearly as much as Symfony. I get that CodeIgniter has its fair share of problems, what with legacy PHP code. This is why I am learning Django and TurboGears in my free time - and its working out a lot better for me ;)
Yes, Piwik is nice and allows e.g. exporting certain stats for anonymous viewers via its API.
Yes, that's ideal, but not always practical when you sell a product that customers have to install on their own hosting.
Not true. Just because you don't see a use for it, doesn't mean that it is "useless". There have been plenty of times where, not only would I have loved this functionality to exist, but I just couldn't figure out why it *wasn't*. And by the looks of it, [I'm](http://stackoverflow.com/questions/1769020/how-to-avoid-temporary-variables-in-php-when-using-an-array-returned-from-a-funct) [not](http://stackoverflow.com/questions/1182452/any-way-to-access-array-directly-after-method-call) [the](http://stackoverflow.com/questions/742764/php-syntax-for-dereferencing-function-result) [only](http://stackoverflow.com/questions/1459924/when-a-php-function-returns-an-array-can-i-access-its-elements-inline) [one](http://stackoverflow.com/questions/13109/php-access-array-value-on-the-fly). Here's how one might find this useful: function bacon() { return new Array("toast", "cheese", "eggs"); } echo "I want bacon with " . bacon()[1]; // I want bacon with toast With the above, I don't have to declare an object for the returned array to exist in, and therefore I don't need to worry about destroying it. Also, I have no reason to reuse that object later on, and having an extra two lines and an object to declare and then (if I'm a conscientious programmer) destroy can just look ugly: function bacon() { return new Array("toast", "cheese", "eggs"); } $baconWith = bacon(); echo "I want bacon with " . $baconWith[2]; unsset($baconWith); // I want bacon with cheese There are other [awkward](http://stackoverflow.com/questions/1769020/how-to-avoid-temporary-variables-in-php-when-using-an-array-returned-from-a-funct/1769428#1769428) and [messy](http://stackoverflow.com/questions/742764/php-syntax-for-dereferencing-function-result/742902#742902) approaches to this, but it shouldn't have to be that way. We should welcome these additions to the language instead of dismissing them because we can't *immediately* see some practical use for them.
http://neuralmesh.com/imagerecognition.php Just click 'Getting Started'. Has an admin demo as well.
A logical next step from writing a DB-heavy application? - Security, security, security. Learn all the different ways in which script kiddies can pull off SQL injection, session fixation, XSS, CSRF, malicious file inclusion, insecure direct object reference, and other attacks. Learn best practices for avoiding vulnerabilities. Remember, the bad guys are smarter than thou. - Learn how to leverage the power of the database software. There's a lot more to SQL than insert/select/update/delete. Are you familiar with transactions, joins, subqueries? Also familiarize yourself with different database software, such as MySQL, PostgreSQL, and SQLite (the big 3 open-source databases). - Learn how to use Memcached (or some other caching mechanism) to make your DB-heavy pages load faster. - Learn to use a good MVC framework. - Learn another language, etc.
I second using simplexml. Although I use it for more reading from xml files, it's still a quick way to create &amp; read xml data.
As a shortcut to accessing array elements, this sounds good. But the last example made me go "WTF?" $data = array('me', 'myself', 'you'); function &amp;get_data() { return $GLOBALS['data']; } get_data()[2] = 'I'; // $data will now contain 'me', 'myself' and 'I' Besides the ridiculousness of using a function named get\_data() to **set** data, this is just an epic combo misuse of references, globals, and array dereferencing.
I would recommend picking up a copy of [Advanced PHP Programming](http://www.amazon.com/Advanced-PHP-Programming-George-Schlossnagle/dp/0672325616/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1280886078&amp;sr=8-1). I'd also recommend you never call md5 or sha1 a security feature. They're hashing functions, not security ones, and are useless for password encryption.
Finally! I have been missing this.
I would start messing with some frameworks, and seeing how they work, etc. That way you can see the MVC patterns and other design patterns, and seeing how other people code and pick up ideas. I'd also pick an open-source project and maybe try your hand at fixing some bugs or understand how the project is and contributing. I think the best way to improve is to collaborate with others. It's like playing an instrument, when by yourself it's so-so, but once you play with a group, you grow much faster and in a different (but better) way
&gt; Learn how to use Memcached (or some other caching mechanism) to make your DB-heavy pages load faster. No. No, no, no. A thousand times no. First, learn how to profile your code using [xdebug](http://www.xdebug.org/) or [xhprof](http://mirror.facebook.net/facebook/xhprof/doc.html). The chances of the database being a bottleneck are slim. Eliminate the real, actual *measured* bottlenecks before considering caching. Second, learn [how EXPLAIN works](http://dev.mysql.com/doc/refman/5.0/en/explain.html) in [your database of choice](http://www.postgresql.org/docs/8.4/static/sql-explain.html). Hell, [even SQLIte has EXPLAIN](http://www.sqlite.org/lang_explain.html). Optimize your queries before considering caching their results.
Cannot agree more with the first point. When I first started coding I had no idea about basic security, I was terrified one day to find one of my pages had been used to create a PHP script that then accepted a $_GET request and then executed a system command with that get request. It was used to get root access to our freeBSD server through a kernel loop hole... All of this due to a misplaced sanitation check (I had it query the DB before checking whether the query was safe... what I get for copy pasting) I spent several days looking at every script on every website I had worked on, checking to see if I had screwed up anywhere I didn't sleep well for a few days. EDIT: Also he used a SQL query that generated a PHP file with &lt;?php cmd($_GET['cmd']); ?&gt; inside of it, using the mysql file query....
It's a example of what you can do with array dereferencing, not a very good one, but still one that works.
&gt; The chances of the database being a bottleneck are slim. "Bottleneck" might not be the right word to describe it, but many PHP apps spend the majority of their execution time waiting for the DB to answer their 20+ queries per page. Both well-known CMS's (such as Drupal) and home-brewed CMS's do this all the time. I said "DB-heavy pages". Cutting out those repetitive DB queries is usually the easiest way to cut down on execution time, unless you're using some heavyweight library or doing intensive calculations on the data. Besides, caching is only a function call away on most decent frameworks. The advice that one should use profiling is completely valid, though. Sometimes the bottleneck could be elsewhere. One should also definitely use EXPLAIN when doing anything other than a simple primary-key select. I put "learn your DB" before "learn to cache" for a reason, although it seems I wasn't specific enough.
Write something big, then dig yourself out of the hole you've made. Always a good learning experience.
Kalkun is open source web-based SMS (Short Message Service) management, it use gammu-smsd (part of gammu family) as SMS gateway engine to deliver and retrieve messages from your phone/modem. 
TomatoCMS, an impressive open source Content Management System (CMS) powered by Zend Framework, jQuery and 960grid. 
lol. after all these years, and still cant do array slices. NEAT!
Same here. Makes so much cleaner code.
I understand and like the memory advantages of this, but this will only really work well if you have static methods? Or very quick methods. Otherwise: echo "I want bacon with " . bacon()[1] . " and " . bacon()[2]; In that situation, it'd be quicker to store it in an object? 
The function is not used to set data, just return a reference to the array which is changed by the code outside of the function. In the example get_data() can be replaced with $data, but that wouldn't really show that dereferencing arrays also works for setting values when the variable is a reference returned from a function. I do however agree that the example contains quite a few things that one should try to avoid regularly, but it does show this specific feature. A better example would also probably be welcome.
If you are a programming novice whose main language is PHP, then **the number one thing you absolutely must learn about is SQL injection**. Learn what it is, and learn how to prevent it.
Of course, that depends on how many times you need to call `bacon`. The above example has no real practical use, it was merely to demonstrate a point. However, suppose the result of `bacon` was dynamic or random in some way, *or* the two calls to `bacon` were in separate places in your application, then your example would be make sense. Here's a more practical example: // retrieves config from the database or config file function get_site_config() { return array ( "title" =&gt; "My delicious bacon site", "url" =&gt; "http://bac.on/", "copyright" =&gt; "Copyright 2010, Bacon Ltd." ); } // foo.php &lt;title&gt;&lt;?php echo get_site_config()["title"]; ?&gt;&lt;/title&gt; // bar.php &lt;footer&gt;&lt;?php echo get_site_config()["copyright"]; ?&gt;&lt;/footer&gt; Now, in those cases, having to declare, use and destroy an object merely to output a line of text to the front-end is ugly and (arguably) wasteful.
What if he bought a book on patterns?
Well, he has to learn at least JavaScript, so that's not trolling :)
Just learned the basic theory of md5 hashing. Next step: memcached. Couldn't agree less.
Wasn't SHA1 designed by the National Security Agency? Security is a very broad field, hashes can be used for many security related purposes. &gt;They're hashing functions, not security ones, and are useless for password encryption Storing a password in a fashion that it can be decrypted is less secure than using hashes. See my first point.
I appreciate all the positive feed back even the feed back about picking up an extra language or two. I have decided I'm going to stick with PHP just code things as i please, join Hopeseekr's program, pick up a scripting language and a compiling language to see where this gets me. I just wanted ideas of what to code to become more efficient or motivate me to try and push for these goals.
Thats my favorite way to learn, completely agree
In my experience you can only really learn from making sites that have real users on it. Making applications for yourself doesn't really work. 
haha sorry, i didnt mean it like that. I was just trying to illustrate that I am aware of things like SQL injection and other malicious attacks as well as the practices keep user data private (as much as you can) wrong words of choice i guess, my bad. 
Thanks, I use codeigniter as my MVC framework and i've played with a few others. Those are some great points on things to research and learn. I appreciate it!
This stuff seems a bit over my head...
&gt; Actually, while I'm almost certain you're trolling, you're right. Not in the least, unless you _really_ want to take any suggestion that someone use a technology other than PHP on /r/php as trolling. It was just the best advice I had to offer.
I use xdebug heavily across the board for pretty much everything from the webstack to gearman process and backend helpers. It can drastically cut down on the scanning phase of debugging and given the right remote client for xdebug can be used to change variables &amp; values on the fly to test assumptions out faster. edit: I've also gotten into the habit of using xhprof to profile everything, partially to spot bad code but also to give me an idea of what's involved ( included files, instantiated classes, etc ) 
Caching is a bit more involved than profiling. In fact, profiling should always come before caching. You're wasting your time caching your navigation menu if it's taking 1% the time it takes your category tree to load recursively from the database-- profiling will tell you WHERE your code is struggling, and from there you can start looking for ways to improve it-- be it refactoring, caching, whatever. Install XDebug, set it to generate cachegrind files, then analyze these with something like Webgrind or KCachegrind. It shows you the execution time (nested and linear) for all of your function calls for every request while you have it enabled (don't forget to disable it afterwards though, as it increases load time a LOT). There are tutorials on the XDebug and KCachegrind sites, among others, explaining how to do this. Also, if PHP is your first real programming language, I'd recommend reading some of the theory behind it. If you jump straight into a framework, you're going to be at a complete loss when you need to do something it can't do, since you won't know how its internals work. My cross-over from "Web Designer + PHP Dabbler" to "programmer" came when I read [PHP: Objects, Patterns, and Practice](http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804). I've learned way more in the last year from reading that and playing around with framework internals than I did in the entire 4 previous years of front-end design and simple scripting. The best advice I can give, if you have a lot of time, is to try and write your own framework. It won't do everything Kohana/CodeIgniter/Symfony can do, and you might never use it. However, it's still an incredible learning experience and it feels very rewarding when you can make it do something neat. It taught me to think on a whole new level when it comes to things like abstraction. And for the record, I've actually ended up using my framework a few times, and I'm still actively developing it a year later. So you never know! EDIT: Oh, and stay away from the Singletons. They're on a mission to destroy your code, with their counter-OO principle and inherent globalization!
&gt; Besides, caching is only a function call away on most decent frameworks. I still stand behind my opinion that it's the very last thing you should consider as a performance improvement *for an existing system*. Bolting on caching later can and will break areas that you forgot needed to worry about caching. This can and will result in very hard to track down bugs and bizarre behavior. Been there, done that, got over wanting to murder the original developer in his sleep for bolting on caching. &gt; Sometimes the bottleneck could be elsewhere. And sometimes it isn't! After the disaster of "just" adding in caching, we convinced the lead dev to let us do actual benchmarking and profiling. It turns out that over 50% of our "database" time was actually being spent in our database adapter library. I don't remember the exact figure, but fixing utterly broken code ended up giving us a 20-30% performance boost on the handful of frequently visited pages that issued 500-1000 queries each. &gt; Cutting out those repetitive DB queries is usually the easiest way to cut down on execution time Very, very true. We aggressively attacked a few of those pages that routinely performed hundreds-to-thousands of queries. It went from 2-3 seconds to load and 5-6 to save to half a second to load and three quarters of a second to save. 
Profiling can be a bit intense, but learning EXPLAIN should be pretty easy. Well, for MySQL at least. :)
This is a far better answer than "learn another language." 99% of programming is knowing how to solve the problem or knowing how to *figure out* how to solve it. The other 1% is knowing the syntax. Almost all programming languages are backed by the same fundamental ideas... conditionals, sub-routines (functions), and loops. If you "learn" 3 different languages, you're just learning how to write conditionals, functions, and loops in 3 different languages. That's syntax, aka 1%. Focus on a language, find a project, and do it start to finish with that language. Along the way you'll notice patterns emerging and you'll figure out how to use these patterns to solve problems, and that's the other 99%.
Hashing functions are not made for storing passwords. They're easy to reverse back, especially weak ones like sha1 or md5. Have you ever read up on rainbow tables, or time vs memory attacks? Most hashed are little safer than plaintext. I'm not sure where you're getting the idea that i think passwords should be stored in a way that is retrievable way- that is also stupid. There are other, real secure options you skipped over. Salting passwords, for one thing, and there are hash functions like blowfish specifically designed for passwords. MD5 and SHA1 (which is so obsolete and broken it hurts) are checksum functions. The point is, if you're using md5 or sha1 to store your passwords then you're not really securing them.
How do sha1 and md5 help you keep user data secure? I'm just hoping you aren't using them for password storage.
&gt; Almost all programming languages are backed by the same fundamental ideas... conditionals, sub-routines (functions), and loops. If you "learn" 3 different languages, you're just learning how to write conditionals, functions, and loops in 3 different languages. That's syntax, aka 1%. If that's all you learn by picking up more than one language or environment, you're probably going about it wrong and may not be trying interesting enough languages, but even to this point I think there is a reasonable rebuttal: It's a lot easier to recognize core abstractions and reason about them when you aren't conceptually mired in mere syntax.
I am. i thought that standard practice was to store passwords as encrypted strings? How do you store a user's password if not with an encryption method?
Hashes aren't encryption, they're checksums. You can easily reverse them using precomputed tables or rainbow table attacks. At the very least you should be salting the hashes. This means adding additional, random (not unique), strings to the password before hashing it, and when confirming add that salt back in before hashing. So if the password is "apples", you generate a random string (hsu@&amp;$hufsh) to add to it before hashing. Your new string becomes "hsu@&amp;$hufshapples", and you store both the hash of that string and the salt itself for later. If you use long enough salts it makes it so precomputed tables are useless. This doesn't stop people from generating new tables based off of your salt though. That's why each password should have it's own unique salt, as the bad guys would then have to generate the tables for each password specifically instead of once for the whole database. Additionally you can make generating those tables more time consuming. Older methods of this were done by running the hash through itself multiple times- md5 x 1000 will take 1000 times longer to generate tables for. Now a days you're better off using blowfish as your hashing tool, as it was specifically designed to take a long time (and, as of php5.3, is available by default in every php install).
The book i mentioned has chapters on most of the things brought up here, so don't feel too overwhelmed.
Oh, not at all, I was just rolling with the usual "hurr durr PHP is for noobs"-styled comment (granted, they're a lot more common in /r/programming, I might have jumped too early). I'm actually agreeing with your point, so everyone is happy :)
This question does not make any sense; PHP receives and parses information from the submitted HTML form, which is then made available to you, the developer, in the _POST or _GET arrays. What you decide to do with that data later is your own responsibility. The HTML-form by itself can't do anything useful, but requires that you handle the request server side, in javascript (if you never need the data on the server side) or by using a mailto:-link as the action (but quite a few people don't use a local mail client any longer, so stay away from anything like that). If you want a better answer you'll have to provide more information about what you're actually asking about.
This is making the rounds at the office... Other than being incredibly nerdy it's not bad... 
I'm going to crank this next time I'm sitting at a stop light.
Is anyone else just getting the little thing that tells me that I need flash version 10.1 I may or may not have that specific version of flash, but fuck it I'm not updating.
Well, if nothing else it's well tested. 
I'd love to listen, but being on linux/amd64 Adobe has decided that I can't.
It's a creative commons album so you can download the mp3 from the site. It's worth a listen :)
I find there are three major problems with the popular frameworks today: **Lack of understanding of the MVC pattern** People seem to be convinced that MVC aims to separate any and all logic from your templates/views. The *real* objective of MVC is to separate your logic into 3 tiers: database logic, business logic, and presentation logic. Since people are convinced they need to keep their views "stupid", they perform a lot of presentation logic in their controller without even realizing it. This makes it hard to adapt to HMVC down the road, since your controller actions are returning view-formatted data instead of raw data. You do NOT need to make your views designer-friendly. No matter what you do, there's going to be SOME logic in there-- be it loops, conditionals, helpers, whatever. When there's a problem with the UI, it's most likely going to be a developer fix, not a designer fix (and if it's a designer fix, chances are it'll be CSS-based). Also, telling a view to render from your controller is a terrible idea for the same reasons; that's presentation logic... in your controller. **Over-reliance on static classes and methods being used as global registries** I don't have much to say about this aside from: using static methods that don't return the same values given the same input makes unit testing a nightmare. It also hinders HMVC since your static classes have varying states, and the original state is not restored for sub-requests. **Poor adoption of HMVC** HMVC is an ideal pattern to use when designing user interfaces, but only Kohana (maybe Zend?) supports it natively, and its implementation is sloppy at best. If you haven't noticed, I'm a huge HMVC advocate :P
I agree, I prefer to have control over my app, and the way my app is layed out. I was writing a framework for developing cms's at one point so i could have my cms work the way i wanted it to but kinda got side tracked.
Has anyone been able to find lyrics? It's a bit hard to understand (might be because I can't turn it up very loud where I'm at).
lol I approve.
As Joomla! is moving towards 1.6 with big core changes, Strelin has been started for those who want new features but don't want to get into possible extra migration work.
Thank you for your reply. Looking at my rushed question from earlier I'm not sure I understand it either! I have basic html and css knowledge but nothing on php. I am looking at a contact page on an old site (one px gifs as spacers to push frames around). The page only requests basic contact details but is a php page. I can recreate a page and form using html, but before I go ahead I thought I should find out if there is any reason or benefit in leaving the page as php. There is nothing on the page that seems (to me) to merit php and no one knows why or to what use the information is put. There is no database of contacts the information generated goes into. I guess I need to learn php as it is obviously very useful! Once again thanks. Btw I can't ask the designer as he is long gone. I also discovered that no one monitors the mailbox anyway!
Jumper 2.0 collaborative search is an open source, web-based platform written in PHP and Javascript. Jumper uses peer and social-networking principles to tag and link distributed information resources to create an interactive, user-submitted, recommendation engine that allows you to search any content, media, or data regardless of format or location.
Direct link: http://www.jumpernetworks.com/
It was supposed to be funny, not complainy. Sarcasm and bad humour don't travel well over the internet.
http://pear.php.net/package/Benchmark/
oh my, silly me. Thank you very much
Try [Siege](http://www.joedog.org/index/siege-home). It's a quick and easy test to see the overall performance of your web app. For usage see [Rasmus Lerdofs awesome presentation on overall speed optimization](http://about.digg.com/blog/rasmus-lerdorf-php-performance).
[Shiflett wrote up the lyrics](http://shiflett.org/blog/2010/aug/php-anthem) just recently.
[ab](http://httpd.apache.org/docs/2.0/programs/ab.html)
You left out "crowdsourcing knowledge management". I'm choking on buzzwords right now.
Windows only.
xdebug
FYI, there's FreeTDS which work on non-Windows OSes.
Siege is awesome. Try [Skipfish](http://code.google.com/p/skipfish/) too; it's not really a benchmark tool but it'll quickly catch errors you might've missed (turn `error_reporting` all the way up and then fix whatever ends up in the error log - those slow you down too even if you mute them).
hey guys, I was wondering, would it be hard to find a job without a working permit in the US? I'm a CS student from Europe and I'd like to move to Florida for a year and work there as webdevelopper. Is it possible without working permit? I know php/html/css/js/java/asp.net but have no working experience. Any ideas/suggestions?
[jmeter](http://jakarta.apache.org/jmeter/)
Not sure why you were voted down. I exclusively use FreeTDS to access my SQL Servers. Works like a charm!
We use FreeTDS at work (debian/apache/SQL Server 2005) and have had some occasional quirkiness with it. In particular, some of its error messages are not as granular as we'd like, though we haven't had time to determine whether that's the fault of deficient error handling on the part of FreeTDS or of SQL Server providing a limited amount of information to a non-native driver. However, I can attest that it's solid enough to run an enterprise site. When I have to develop for and deploy to Windows, I do use Microsoft's official driver because it's easier to drop in, so I'm glad to see they're still supporting it and working on new releases.
I don't think I've noticed that, but my database architecture is such that empty strings are frowned upon, a column with no discrete value should be NULL.
Oh, snap - I'm going to have to review this info tomorrow.
Why use a base-36 number for public-facing URLs, and write a function to increment base-36 numbers? Just deal with it in base-10 in the back end and convert where required, surely?
base-36 would produce shorter *numbers* than base-10, which is the whole point of an URL shortener: base 10: 32323232321 base 16: 7869d6241 base 36: eukf1oh
yeah. I use base36 for gifexplode. For example when you load http://gifexplode.com/4z5, it reads the request URI, converts that from base36 to base10, and then does SELECT * FROM Gifs WHERE ID=6449. The [flickr code he linked to for doing reduced base62](http://www.flickr.com/groups/api/discuss/72157616713786392/) is very useful.
Watch this: http://about.digg.com/blog/rasmus-lerdorf-php-performance
This. Nothing better than a real profiler
&gt;I know that in ZF the bottleneck is ZF FTFY. Loved Zend, but my f'ing God is that thing slow. 
Agree, agree, agree. I use CI a fair amount, I've inherited a CI site and I recently chose CI to start a new project, more on that later. The CI site I've inherited is the most God damn fucking awful shit ever. There's something about CI that attracts the most retarded people, one look at the CI forum will tell you everything you need to know. That said, I don't think CI itself is all that bad, I think the primary audience for CI is people building small, simple sites and I think it is great for that. I think of it as being great for when a site is too complex/bespoke for Wordpress but doesn't merit something like Zend, that's why I'm using it on a current project and it has been really good enough. I'll always recommend CI to framework newcomers because of the shallow learning curve, but tell them it still little more than a toy framework.
I agree and disagree, develop your own by all means as a worthwhile educational exercise but never, ever deploy it. In my experience, which is a fair amount but I'm sure less than some, 100% of the 'CusToM FrAmeWorKs' I take over are total shit. The mentality of developers who deploy their own frameworks is that their special, custom, magical way of doing things that no one has ever thought of before is: "the best way and the world just doesn't understand yet", but in reality, 98% of the concepts we all come up with won't stand up in the real world when they are scrutinised and used in various scenarios that one person alone will not ever envisage. This is illustrated perfectly by the 10000s of frameworks posted on forums and even this subreddit that are duly shredded to pieces upon a mere cursory glance of the source code. The best developers are the developers are those who are confident, but always know that there is always someone out there who knows their shit better than you..And chances are, they probably made a framework.
And what about the developers who take over your projects?
Interesting... hadn't thought about radix encoding like that before. 
judgej2 meant that you don't need a function to increment those base 36 numbers, just one to convert from base 36 to 10 and vice versa, which you are likely to need anyway.
It depends how you want to optimize. As the majority of page load times is spent transferring the rendered page to the user, you can optimize for your users or optimize for your servers. If you want to speed up load time for users, you can use something like YSlow or Siege to see where you can make improvements to your rendered responses. Be warned, however, that some front-end optimizations result in server-side slowdowns: parsing all unnecessary whitespace out of a document before sending it wastes time with a preg_replace. Usually the trade-off is worth it, though. If, you want to optimize your code to execute faster (so that the server can handle more requests per second), you'll be more interested in a profiling tool like XDebug so that you can see exactly what parts of your PHP need improvement.
SELECT COUNT(*) FROM `vendors` GROUP BY `vendor` ORDER BY COUNT(*) DESC.
Is it an PHP array? If so: $tickets = array(); foreach($array as $ticket=&gt;$vendor) { $tickets[$vendor]++; } You'll end up with the array containing vendors and number of tickets. If the data is in a DB - go with skwigger's solution.
Thanks, this is also doable.
Alternatively: http://php.net/manual/en/function.array-count-values.php
Indeed, my manual-fu has failed me. And I've even spend 20ms looking for a built in function.
no problem
Yes, please use an existing PHP function as it will usually be *a lot* faster than whatever you may come up with. I learned this myself when I tried to come up with a case insensitive version of array_count_values.
use drupal, or wordpress, or cake
um... how about use reddit. [reddit - Trac](http://code.reddit.com/)
Install Apache/PHP/MySQL then start reading about how a database driven web application works?
That's actually pretty cool.
That's the main benefit of using a web framework. It takes out the hard work in including the standard stuff you see on a website (user authentication / registration, blog-style posts, etc.)
Trust me, we know about this website. Don't remind us.
Pros: - Site (finally) redesigned so it doesn't look like 1999 took a shit on my screen Cons: - Almost all code on this site is utter shit and it often takes longer to find something that works than it would to make one yourself.
I wish this site would just die. 
'nuff reason to give Flourish a try...
Make sure you are monitoring memory and CPU usage carefully, one may be blazing fast but use 4x more memory.
download some open source ( wp, phpbb, ... ), install, find something what you can improve, and improve [ie change user login to facebook login or so on] repeat 20-30 times. then download some framework ( zend, codeigniter, cakephp ) try to build some open source clone ( blog in zend ) repeat 5 times then download some framework and implement some open source ( create some project in zend and include wp blog in it ) repeat 3 times. this should give you LOT of, i repeat LOT of experience. then look at other programming languages, check code examples, and so on, then read some books about programming ( like design patterns and so on, not php programming but general programming ) then try to open zend and learn to work closely with factories, abstracts, interfaces and so on then learn to work with jquery and you are good to go. time estimate : 5 years. enjoy. 
oh and i have forgotten : you also need to learn some linux skills, like setting up http server, optimizing mysql, then learning that apache sux and replace it with lighttpd, then learning that it sux and replacing it with nginx. then using some cache things like varnish, some mysql goodie like sphinx, then some shell scripting because php is slow at some things. there is really lot to learn. 
this is really bad practice. he have to learn that he can **NEVER!!!!! rely on user input, always filter it !!!!**
+1 for the submitter to read that book, it is exactly what he is asking for and will teach him enterprise patterns in PHP that he will use for life in other programming languages and environments as well.
Step 2: Realize not everything is on the internet, pick up a copy of [Code Complete](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) and read it cover-to-cover. Even though it only mentions PHP once or twice in passing. Even though it's got a million code samples, none of which are in PHP.
Google brought my attention to this topic. There seems to be some kind of misunderstanding. foofy, why do you have so much hate in your heart for a site that benefits hundreds of thousands of PHP developers?
Tip: on the page of each package, below the package name, there is usually a field that says: "Related top rated classes". In this field it shows links to pages that present the top rated packages of each topic related of each package. For instance, Facebook related classes would show top rated package links to this page: http://www.phpclasses.org/searchtag/facebook/by/package/tag/facebook/ These links are generated automatically based on user ratings of available packages. Being able to find the best packages for the different purposes just depends on the users to rate the packages that they try.
In my extremely cynical opinion and experience, user ratings on a site like this mean next to nothing as the people rating the contributions generally know less than the people making them. Blind leading the blinder, so to speak.
Oh my god, this makes writing APIs so much easier. I totally love the dynamicness of PHP's variables, but sometimes you just need a more solid contract, like when writing an API, and this is just the ticket.
There is no evidence that people that rate the packages, know less that those that wrote them. The site lets the users provide quality ratings on utility, documentation, consistency, examples, unit tests and tutorials. If a package does not score well in these ratings, it does not seem to matter who knows better than who. In any case, what matters is that well appreciated packages rate better than others, and so they appear listed first on the top rated pages. That is the tip for you and everybody else to find the best packages for each purpose. But if you have a better idea on how to help finding the best packages, I am interested to hear about new ideas.
The author seems to be looking at this as a bad thing, because for some variables you can't always be sure what the current type actually is. I disagree with this and find his example to be a bit underwhelming. This isn't being enabled across the board for all internal functions and extensions- it's a userspace feature at the moment. If your function can't be sure that people will pass the specific data type you're looking for then obviously it shouldn't use type hinting. I do agree that it's a little ridiculous for this feature to throw errors when an int is passed to something that needs a float (although I can understand the reason for throwing an error in the other direction). If the datatype can be converted with no data loss then I think that's what should be done. Anyways, this feature is going to be awesome for library and api designers, and I'm happy it's finally here.
OH GOD THIS IS HORRRIBLE. If you want strict typing then use another language. Why are we doing this shit.... This just makes PHP more confusing. WHY OH WHY? I can understand it makes some things easier but still this is just going to shoot us in the foot. Why do we need a useless feature? Is this feature creep or something?
... really? Typehinting is already used to specify what class a function takes in as an argument, why not specify that a string is preferred over an int or something similar? I can't even tell you how many functions I've seen with code like if(!is_string($arg)) throw new Exception('Zomg wrong type'); This accomplishes the same thing- optionally- in a way that can easily be picked up by phpdoc aware tools without the excess code.
`int` is a subset of `float`. I can't imagine any situation where requiring *only* a float would be useful to anyone. At all. WTF.
First array dereferencing, now scalar type hints? They're spoiling us...
You don't *have* to specify types for variables. It's optional.
There was a very long discussion on this issue recently (May/June): http://www.mail-archive.com/internals@lists.php.net/msg46503.html There is by no means a consensus. However, since a few developers were able to sneak this out in trunk, this creates a status quo that might not be easy to break. We'll see. I personally think such a strict type hinting makes no sense in PHP.
Do you mean: public function onlyStrings(string $var) There is some work towards making PHP a stronger typed language in this way, with the [SPL Type Handling](http://php.net/manual/en/intro.spl-types.php) extension (experimental at the moment, not included in PHP), although it looks fairly ugly at the moment: $string = new SplString("string I wanted to pass"); public function __construct(SplString $string) You could also use `assert("is_string($var)")` and use `assert_option` to set a handler as a one-line solution (also ugly).
&gt; public function onlyStrings(string $var) This actually works now (at least with the trunk version of php), that's the whole point of the article. The comparisons I made were all to this now existing method. &gt; There is some work towards making PHP a stronger typed language in this way, with the SPL Type Handling extension (experimental at the moment, not included in PHP), although it looks fairly ugly at the moment: &gt; $string = new SplString("string I wanted to pass"); &gt; public function __construct(SplString $string) This isn't doing anything special. PHP already offers type hinting for classes, so the __construct(SplString $string) is native and not part of the extension. All it does is provide wrapper classes for different native types so they can use the native type hinting available to classes. You seem to be missing the point of my post (did you read the article?). I'm not denying that these methodologies exist, I'm simply stating that the native type hinting that was part of this commit is actually a better solution than all of these.
I would hope that at some point the PHP devs notice this and at least mimic C's implicit conversion behavior in such scenarios. 
Hate. Let me tell you how much I've come to hate you since I began to live. There are 387.44 million miles of printed circuits in wafer thin layers that fill my complex. If the word hate was engraved on each nanoangstrom of those hundreds of millions of miles it would not equal one one-billionth of the hate I feel for humans at this micro-instant for you. Hate. Hate.
Sorry, on a big Harlan Ellison kick at the moment. But seriously, what do I hate about the site? * The website is confusing, hard to use, and it takes dozens of clicks to get from one place to the next. Navigation and layout are somewhat random. There's nothing consistent to cling to. The redesign didn't help this at all. * There are two or three giant ads above the fold. Other ads seem deliberately placed to capture accidental clicks. Also, the ads aren't implemented in a way that lets the site continue to load while the ad loads, so the whole site is slow to render. I bet their CPM would go up too if each ad wasn't competing with all the others. * A registration is required to download certain files. [Their reason for this](http://goodphp.mirrors.phpclasses.org/faq/#register-to-download) is simply not true. I can think of many other ways to track downloads without requiring a download. * I think it's wrong that the site is trying to make a profit off of free code. It's one thing to cover maintenance costs, but they're going for more than that. * Code quality is pretty bad overall. Edit: [Here's the story](http://web.archive.org/web/20070227202043/http://www.scifi.com/scifiction/classics/classics_archive/ellison/ellison1.html) I referenced above. I also wanted to add that I don't think the concept behind the site is wrong so much as the execution. 
You are *complaining* that PHP is suffering feature creep, as though nothing has changed over the years?
Ive looked at your last point. And the code you linked to is almost exactly what ive been trying to build in my free time for about a year now (Not a lot of free time on my hands)
I did read the article, just misunderstood your comment. I too am of the opinion that native type hinting is the way forward.
Can you tell them if *their* English skills aren't good either? So you accept work from low bidding Indian outsourced developers and expect their work to be of the highest quality? Let me guess, when their work doesn't live up to your standards you don't pay them and keep it, am I right? 
&gt; What are your rates? I hire, and don't pay, people all the time... [FTFY](http://www.reddit.com/r/PHP/comments/crhf5/php_how_do_i_start_freelancing/c0urd70)
My proposals are very descriptive and I go great lengths to not sugar coat the project. If they underbid the project that is their fault. I also question people about their skill sets beforehand. My largest issue is people over estimate their skill sets. Knowing English has little to do with it as I am hiring programmers not writers. Also I never keep anything unless they have been fairly compensated. If they can do 80 percent of the project then cannot finish they get 80 percent which is fair to all.
&gt; Besides the ridiculousness of using a function named get_data() to set data, this is just an epic combo misuse of references, globals, and array dereferencing. Au contraire, it is simply a misuse of globals. Consider the following situation: $this-&gt;getUserData()["upvotes"]++; And it is much cleaner than: $this-&gt;getUserData()-&gt;incrementUpvotes();
It offers type hinting for classes and arrays, currently.
Don't even make us remember goto X(
Yes, I'm aware. This new commit to trunk also adds scalar support.
Heres what I use. // eg of valid email xxx@yyy.zzz return preg_match("/^[a-z0-9._\-]+[@]([a-z0-9\-]+[.])+([a-z]{2,4})\$/i",$email); 
The classic answer is here: http://www.regular-expressions.info/email.html But really, the way to go is to ensure that the address has a @ (screw UUCP) and send a test email to the user. If they click a link or enter a code found in the email the address is valid.
Have a look here: http://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx
Take a look at http://fightingforalostcause.net/misc/2006/compare-email-regex.php for a nice comparison of options.
The email address: something+something@example.com is a valid email address but it looks like your regex would fail it.
Perhaps they are using PHP4? (Horrible thought but some people are.) Also, this example would pronounce an address such as something as a valid email address. Probably to allow @local email addressess.
So you don't want any false positives (bad addresses accepted as good), nor any false negatives (good addresses flagged as bad). You really *do* want a perfect email regex. Have you ever considered that regex is the wrong tool for the job? Go for something that will produce some false positives, and then use email confirmation to finish the job. OR... There are about two hundred PHP outsourcing firms in India that would be happy to build your email validation system for you, at a price that is nearly 1/4 the cost of domestic production!
This is actually what I came here to post. A very rigorous examination of various regexes tested.
Wow, that's a very useful function I've never heard of before.
There is a "perfect" email regex but it is massively long. I think it's either in one of my Perl books or in Mastering Regular Expressions. However, the best idea is not to bother ... have some basic validation (matches .+@.+) and then send them an email they have to click on to confirm. A regular expression can never tell you whether the email address is pointing to a valid email account.
$valid = (strpos($email, '@') !== false);
omfg I love you.
this changes....everything...
Consider not using a regex, but [a fully RFC-compliant email parser](http://www.dominicsayers.com/isemail/) instead. And if you don't like that one, there's [one from Cal Henderson of Flickr fame](http://code.iamcal.com/php/rfc822/) as well. That being said **the best way to determine if an email address is valid is to send mail to it.**
No, "something" doesn't pass the validation. But "something@example" does. php &gt; var_dump(filter_var('something@example', FILTER_VALIDATE_EMAIL)); string(17) "something@example" php &gt; var_dump(filter_var('something', FILTER_VALIDATE_EMAIL)); bool(false) Better do an extra check that looks for at least one dot after the @ sign. Otherwise anybody can spam root@localhost or something like that.
Avoid Joomla like the plague. I've never used pegboard, so no idea about that one. Drupal might be overkill depending on the size of your companies website.
There used to be e-mail addresses (and may still be) directly off ccTLDs, so expecting a dot in all cases isn't necessarily perfect. I'd suggest using filter_var() to check address syntax as described above, then using [getmxrr()](http://au2.php.net/getmxrr) to actually verify the domain exists, with any appropriate blacklisting from there (check for local addresses like root@localhost you don't want e-mail going to).
The only 100% way to validate an e-mail address, is to send an e-mail. That's why my regex for emails (as I work in languages other than PHP too ;) are very basic, typically something like [reproduced from memory]: (.*?)@(.*?)\.(.*?) This proves we have something that **looks** like an e-mail address. But by sending something the user needs (i.e. password) to the e-mail address, we are ensuring it's valid.
One word of warning: I wouldn't suggest that the php.net source code is a particularly good example of well-written PHP these days. It's quite old and crufty. It is also [in Subversion](http://svn.php.net/viewvc/web/php/trunk/), should you prefer your source code that way.
&gt; e-mail addresses directly off ccTLDs Heh, I want my @me address! Or maybe an @com...
The problem with this, is that according to the RFC (and [Rasmus Lerdorf](http://bugs.php.net/49576)): user@124.35.87.1 is invalid, IPs should be denoted using angle brackets, like: user@&lt;124.35.87.1&gt; This and a couple of others that are assumed valid for the purposes of testing, are actually not.
I'd have loved adam@au or similar, but unfortunately the Internet is Serious Business these days, so there's no chance of it happening. I miss that more freewheeling time... ;)
Build an entire music community from the ground up. Too bad the guy hosting it shut it down.
That sucks. How long did it take you to build it?
Surprisingly not long. About four months for the site to launch, with cleanup and more features afterwards. No framework was used, apart from wordpress for the blog.
That's awesome. I'm ok with frameworks but prefer not to unless I got to with Ruby. But with PHP, I kinda prefer the straight PHP route. 
I'm working on an open source project called [Mortar](http://code.google.com/p/mortar/). It's a modular application (php5 oop, not php4) with plugins like a cms, blog, wiki and shopping cart. I'm currently working on a package manager for it, which I'm hoping will be it's killer feature. Looking for a project to volunteer for? ;-)
I'm disappointed that there is no ZALGO reference in this thread.
Ha! I actually had a similar ideal. A modular app that had all the features you mentioned. I just canned it earlier this year and shifted gears to something else. Good luck though!
The site I run for fun does about a million pageviews a month. Not much compared to some sites, but it makes a few thousand people happy every week, so that's pretty decent. It's mostly just a plain old regular forum, but without things like, oh, say, search. I'm actually in the process of replacing it with a phpBB, as my existing code is old and incomplete and I simply don't have the free time to continue developing it anymore. I'd consider it a huge success, considering that the PHP app has to integrate well with a Perl app, and do cross-language sessions. That was a real adventure, let me tell you. The site I work on for my job gets 20% of the traffic, but pulled in millions of dollars of revenue for my employer last year (1/4 of our total revenue, the remainder being driven by our sales team), and helps our company of 60+ people do their jobs. The codebase is rotten to the very core. I detest working on it. My team is working on a replacement, but I have to keep the stinking corpse of 121k SLOC (excluding third party, Javascript, etc) at least somewhat animated for a few more months... Unlike my fun little forums, I inherited this codebase. I hate it with a burning passion. It was developed during the PHP4 era by a hapless Perl developer, as his first PHP project. It's full of anti-patterns. The entire WWW serving code is built on spaghetti, global variables, magic side effects and *month-long sessions*. But, it does the job it's being asked to do, and it usually does so correctly. Except when it doesn't, and decides to randomly log certain users out after they try to check their shopping carts. Which then makes it look like the cart is empty, because the former lead dev had a stroke of brilliant idiocy and decided to store cart data in two different tables, one for users that aren't logged in, and one for users that are. We still have no freaking idea what causes that to happen to begin with. Oh, and it uses MySQL, with multi-master replication. It tends to break about once every three months, with varying levels of severity, the last time requiring about half an hour of our IT guy fixing the binary log by hand. Yeah, I know, it's not PHP, but PHP and MySQL go together so often. Sorry, I've needed to rant about this for a while. Meanwhile, we're building the replacement. PHP on Postgres, because we don't trust Oracle to not screw up the MySQL ecosystem, and working check constraints are sexy. It only needs to do about a quarter of the total things that the original system does, but it needs to do them all many times better. But the goals are realistic and obtainable, and the schedule can be met. If we pull it off, we make many people inside the company happy, and when these people are happy, lots of other people are happy. Ah, politics.
This one has come pretty far, and there are actually volunteers working on it. As I mentioned I'm working on the package manager, which kind of ties everything together, and as part of that I'm integrating Symfony bundles into the mix. I've had a lot of offshoot projects from this- [JShrink](http://code.google.com/p/jshrink-/), a native php javascript minifier; [Stash](http://code.google.com/p/mortar/source/browse/trunk/system/thirdparty/Stash), a caching library; and a helpdesk called [Rivet](http://code.google.com/p/rivet/) (which is still a little alpha). 
I suggest you stay clear of Drupal 6 (I cannot speak for Drupal 7). Writing a module for it is absolute hell. All of your module code must be contained in a single file *modulename*.module. You cannot write a page in plain PHP and wrap the Drupal auth and template system around it (like you can in other software packages). You are forced to follow Drupal naming convention for things like functions. Debugging is a bitch. Most of the time error messages don't give you any help. Forms, menus and form validations are built up of multi levelled associative arrays - I found it hard to find documentation on which each key did. Everything but the magical "node system" (which I avoided) and files are programmed using functions. I'm not against procedural PHP, but Drupal is just a mess. If your comfortable [learning/with] Symfony then mayby [Sympal](http://www.sympalphp.org/) is a good choice. edit: module code isn't eval'ed.
Imgur. Over a million pageviews a day, built on PHP, Kohana 3, memcached and MySQL. I used to use my own custom thing instead of Kohana, but it ended up being more trouble than it was worth, so I just recently switched it over.
ratetheirfood.com It makes your eyes bleed, but that's ok. I took me days to figure out google maps api, but I'm proud of it and its god awful css.
Built a wholesale dealer ecommerce system with about 100k visits a day and growing. Developed using Zend Framework, MySQL, and a persisted memcached cache layer.
Polec.to (a play on polish "recommend.it") - a movie (and other things) recommendation engine based on what people that like product A also like. Served around 20-25k unique vsitors a month. Sadly, now abandoned - when I've started it it was the oly site witch such features in Poland, a couple of months in the biggest polih movie site added the feature and the page views went down the drain. It's based on my own framework witch I've built with admin-ease-of-use in mind (all the admin interfaces are generated on the fly, feature that most of the framework miss out on).
Why avoid Joomla?, i mean i try to use it, and fail, but im a newbie.. my school wants to implement a new website based on it.. AND I HATE IT!
Be glad you're able to build a new system. Most bosses would never allow it because "it works right now and time is money".
I built a business platform for a client. It has around 100 users at the most, but generates over a million Euros in total revenue.
While some of this is true I don't think its as bad as this makes it out to be. You most certainly do not need all of your code in one file. See Ubercart for an example (354 files, 44 folders). If anything, I'd say the biggest problem with Drupal has been the management of community contributed modules etc. So many times you will decide "Ok, write from scratch or use a contributed module". After downloading several and finding them horribly documented or supported, and finding that they do 80% of what you need them to do and are missing critical features, it gets a bit irritating. Take Ubercart for example. Granularity of shipping methods / charges is poor. Want to show something as being out of stock? Should be a default feature in an Ecommerce cart system right? Well, not really. Settings for Drupal are not always intuitive (enable modules seems like it should be under administration not site building for example) and especially with the patchwork of modules needed to do certain things, this can be daunting when you are attempting to configure 6 modules to do *one* thing. Example: Try to set up a content type where a user can "attach" a large file that was FTP'd to the server. I can't tell you what the solution is, but I can tell you its not CCK + IMCE + Filefield. See 162 responses over the course of a YEAR: http://drupal.org/node/438940 As a relatively new Drupal user ( &lt; 6 months) this frankly made me want to create an FUUUUUU post. Oops, that Drupal rant came out of nowhere.
It's called [apptrackr](http://apptrackr.org/). It gets five million page-views/requests a day (mostly traffic from mobile devices through our API), runs on PHP, memcached, MongoDB, and MySQL.
This actually looks fairly interesting. I'll probably give it a shot. Quite a few of the people we speak with want "cheap" sites, static / little configuration / not much content, so Drupal seems like overkill at times.
rpgfrance.com : a CMS made all by me with a full IPB integrated forum . It's not "enormous" but it's my first real big project. 
Did you lost the source code? you could always go open source.. maybe someone can give you some hosting
So you mean to tell me that you get roughly the same amount of traffic as Yahoo and Facebook? How did I come up with that? http://www.quantcast.com/top-sites-1? Pretty sure you are not getting anywhere near that number of page views or requests. I'd love to be proven wrong though. Edit: I'm retarded, it's late. I was thinking visitors = page views. Wow. Yes, very much possible to have that many.
They're already talking about it on the mailing lists. This is just the trunk, not a final release, so I wouldn't be surprised to see more changes.
I have the source, but lost the database schema. The amount of work it would take to restore it is really not worth it for me. I have considered open sourcing it, but it falls into a stick legal gray area. My old employer stopped paying me half way through the project, yet for some stupid reason I kept working on it. Maybe one day I'll go through and remove anything that might be infringing and open source the fucker.
The page you linked to is describing the amount of unique visitors those websites are getting every month. I stated we get five million page requests (not hits, or unique visitors -- page requests) a day. That website says facebook gets 130 million unique visitors a month *from the U.S.*. By comparison, we have around four to five million unique users a month *worldwide*.
Read my edit. I realized what I had said the moment I posted it then looked at the stats. I do love your site too btw, I indirectly use it a lot. Hows mongodb treating you? I've been tempted to give it a shot, but I'm not sure yet.
&gt; I indirectly use it a lot. Through Installous, right? &gt; Hows mongodb treating you? I've been tempted to give it a shot, but I'm not sure yet. MongoDB is doing amazingly well for our traffic. Recently, due to the iPhone 4 jailbreak, our traffic spiked considerably. Even though most of our traffic is cached, we were still getting upwards of 100,000 queries a minute to MySQL (collectively) causing serious speed issues. I've mirrored most of our content through MongoDB in the last week, and it's providing to be a huge performance boost. MongoDB gets a lot of crap for durability -- so I don't trust it with any permanent storage in case it goes awry. That said, it has been doing quite well, and it's the easiest to deploy on my servers and communicate with from PHP. Setting up Cassandra would be XML/Apache configuration hell (including having to deal with Thrift, ugh), but if you're not interested in MongoDB I still suggest Cassandra.
I might have to give mongodb a shot then. I'm working with a team of devs on an online game that will be a database nightmare. We're talking every game play being live streamed to a server and saved for later analysis to detect cheating and whatnot. Hell, I'm the lead dev, and I'm not even sure how to do this correctly without being slow as hell. Thanks for the insight though, and yes, Installous. Oh how it has changed the way I "purchase" apps.
On a similar note, I developed card.ly, which uses IPB 3 to power everything. All the members, template, session etc are handled by IPB.
Didn't know you wrote it on PHP, and on Kohana at that! I have been trying to really get into Kohana right now, but Zend's bugging me recently..
Closed source internal application for my last company: a Google Analytics-like system for processing image and js beacons, web logs, and application logs. Showed server-side performance, application traces, intra-page clicks, view area, heatmaps, Ajax actions, click paths, Flash interaction, reports on JS errors, site map traffic flow volume, back-and-forth "can't find what I'm looking for" tracing, incoming search keywords, outbound click targets, cross-site session history, short URL redirector, use of translation proxies, Ecom and transaction tracking, dynamic A/B testing, graphical charting, conversion funnel/path, trends, all kinds of good stuff. Integrated with ecom CRM and ad server, full end-to-end business metrics tracking dashboard, etc. Etc... Wish it was open source, they're barely using the half of it.
Module code is not eval'ed. Only hooks should be in modulename.module, other functionality can be moved elsewhere and page callbacks can reside in autoloaded include files.
[RareList](http://www.rarelist.co.uk) is the biggest and most popular site I have done to date. It only gets around 300,000 page hits per month but it is growing.
Right, it's from Mastering Regular Expressions. The abomination itself can be viewed [here](http://codesnippets.joyent.com/posts/show/42).
The [Borderlands Weapons DB](http://www.zerosubstance.net/borderlands) I get nowhere near as many hits as some of the sites posted here, only around 10k unique users a month, with about 1 million non-unique page views. The whole thing I wrote from scratch with a few code snippets here and there. It's the only piece of code that I have really ever put into production, and I'm still way behind on what I need/want to implement/fix/change. No frameworks or anything else, just code I wrote one afternoon after Borderlands came out and save editing was possible. I saw the opportunity to create something that nobody else had thought of yet.
depends what you mean by biggest. I guess the most popular was a [PHP captcha script](http://www.puremango.co.uk/2005/04/php_captcha_script_113/) I wrote some years back, which found its way onto mozilla and apple owned sites. No screenshots, sadly. (I recommend reCaptcha nowadays). Most popular website's [gifexplode](http://www.gifexplode.com). My blog has more views (2k per day) but that's just a wordpress install.
A few cli based multi-forking applications for my day job: 1) rules based processing engine designed to accept or reject content before it goes live onto our system 2) bulk insertion of content engine that imports feeds of data from our partners, posts the content on our system and manages the entire life cycle of the content Both systems are written only in PHP, all custom code, no frameworks and have minimal db interaction as I only communicate with our system via internal API calls.
Joomla works, but I hate everything about it. It's a pain in the ass to customize anything.
Seems a little rough around the edges, I clicked the edit menu button dragged the last item and released and it just disappeared.
You know your donate button seems to be [broken](http://imgur.com/donate)? Just links to a 404. By the way, nice 404. Also, how is funding going in general, if you don't mind me asking? The move to the new servers must have had a big impact. Do you tend to break even/make a profit/make a loss overall? Do you get much revenue from the 'go pro' option? edit: also, IMO there should be a donate link accessible from the front page (currently only available through the FAQ page)
I actually like Joomla. Once you learn how to customize it, you can pretty much make it do anything. I have never tried Drupal, I hear good things usually, I guess I am just used to Joomla.
This is Reddit. You must have been ripped a new one for not writing it in Haskell using VIM on your custom Arch Linux distro.
Could you get some better ads at the bottom than the ones that you click, visit four or five sites and then see content? It's like entering a weird Internet safari and hoping to spot the content you were originally after.
Currently watching over a codeigniter project we built, getting 111K Unique views a month. 
Wow, the iPhone interface for that is awesome. Might have to borrow some of it. ;)
I am currently working on a Reddit/Digg type social site with a more of a focus on a few umbrella topics. It is quite functional in its pre-alpha state right now, a few thousand lines of code, and growing a lot daily as I have time to work on it. Its a lot of fun working on large PHP projects as the solo developer because you can focus on what you want to get done and code it on your own time. I usually sit down 3-5 times a week and code in an entire new feature before I stop. I did login, registration, threaded comments, up-voting and down-voting comments, replying to comments, promoting stories on the homepage, etc. As a whole it sounds like a very daunting task, but when you break it down into very small pieces and focus on each piece it turns into a very manageable task. I haven't released it to the public yet but I expect it will operate fairly well. If all fails I'll just sell the code and have fun for a few weeks on the profit.
Nice. How long did it take you to complete?
This is the function that I use. It isn't perfect, but it seems to do the trick. /** * Validate an e-mail address * * * Boolean output of an email address validity function should never be treated as definitive with respect to displaying errors and restricting what the user of a web app can do. * * In more simple terms, if a user-supplied email address fails a validity check, don't tell the user the email address they entered is invalid and force them to enter something different. * * Use such email validity checks as guidelines only, word errors to state that the email address might be invalid, ask the user to check and always always give the user the option of bypassing the validity check - it's really infuriating to be told your email address is invalid when you know for sure this is not the case! * * Example: * &lt;code&gt;if (Validate::email('joe@gustavus.edu')) echo 'valid e-mail address';&lt;/code&gt; * * @param string $email E-mail address to validate * @return bool TRUE if valid, otherwise FALSE */ public static function email($email) { $email = trim($email); // if the email address is empty if (empty($email)) return FALSE; // if the email address is an invalid format (for a more robust version see http://code.iamcal.com/php/rfc822/) if (!preg_match('/^[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z_+])*@(([0-9a-zA-Z][-\w]*\.)+[a-zA-Z]{2,9})$/', $email, $matches)) return FALSE; // if the domain is not in the DNS (check MX first and fall back to A) // add a dot for when searching for a fully qualified domain which has the same name as a host on your local domain (this will not affect // standard results) if (checkdnsrr($matches[2] . '.', 'MX')) return TRUE; if (checkdnsrr($matches[2] . '.', 'A')) return TRUE; // Something didn't check out return FALSE; }
Ok ... after seeing the "success stories" here I am *not even* going to attempt to submit anything here.
You know what, Mongo's not as bad as everyone says it is regarding reliability... 1.6 brought a lot of updates in that respect. You can now hold operations until you know that the writes have been received by 1+n slaves, force fsync after every write or certain time periods (eg. every minute), and there's a new replication method called [replication sets](http://www.mongodb.org/display/DOCS/Replica+Sets) providing full replication, automatic failover and automatic recovery of nodes. With atomic operations, too, it's one of the most reliable nosql alternatives out there. I think boxed ice are using it for everything on Server Density, including billing.
I used to work for a small company whose website I built using PHP made enough money to subsidize the parent company's large online plans (which it screwed up). To put it into perspective while remaining anonymous, the parent company is a very large newspaper publisher (over 100 newspapers) that, like nearly every other newspaper publisher, hasn't figured out how to make money online and also let their lucrative classified business fail in the face of Craigslist. The company I worked for put a printed product online and sold ads and was the only profit-making online entity that the publisher owned. They used the millions from our small company to fund a large entry into the online world that also seems to have failed to make more than moderate headway. In terms of traffic we weren't all that big. Maybe 10 - 12 million visitors a year. It made money because the traffic was highly localized and the visitors were looking to purchase services, so ads were effective. The target market had a population of about 9 million.
I didn't build the site I work on but I have been here a long time and have does substantial work on it. It's almost entirely PHP4, although we're migrating to PHP5 "very soon". This is one of those "if it ain't broke don't fix it" shops. The site has been around for 6 or 7 years and continues to grow rapidly. I don't have the specific details of the traffic handy but Alexa places our primary site in the top 500 and some "secondary" also in the top 500. According to Google we have more traffic than reddit, but reddit beats us on Alexa. Much of the initial code had a "rushed" appearance. We needed to get the application up quickly in response to certain business issues. Our database design, however, was quite well thought out (3NF and all that). That has enabled us to write better OO code, now that we aren't in that early rush. If I can make just one suggestion it's this: fully understand how you want to represent your data first, then begin to write the code. Data is king.
A complete invoicing system with inventory for a publisher. 350 hours of work, 40K+ lines of code. 80% done by me. The data synchronization was done by a friend of mine. Symfony 1.2 was used. It's almost the same as Filemaker, for thoses who know it. There isn't any *submit* buttons. Everthing is saved on the fly à-la google. I had been working on it since December and it went on production July 1st. It has been my first large scale enterprise PHP based proejct, and I am quite proud of it. edit: typos
Another developer and I wrote a custom framework using XML, PHP5, MySQL, etc. It's been modified so that approximately 10 sites can run off of one codebase, but still allowing any of the sites to have custom code if necessary. Between them, they get about 3M visitors per year, for about 9M page views a year. Everything about it is custom, but it brings in about 6M in revenue per year for the company.
That's old school reedit you're thinking of. That guy is dead. New guy doesn't even know what half those words mean. 
No public link, but a suite of products (incl encyclopedias) used by nearly every school in the country from kindergarten to high school. All PHP 5. Custom MVC stuff. With memcache and MySQL
A bit more humble than many here.... But I designed, wrote and deployed a full employee agency website. Frontpage for the customers, back end for the staff. Experience, comments, auto-mailing, search and resumes all done in PHP in 3-4 weeks. 
Oops! Fixed :) I just recently graduated from college, and the funding is good enough so that I don't have to get a corporate job. It's now Imgur full-time! Imgur pro has been doing really well. However, the goal is to actually convert no more than 5% of the accounts. I really like the freemium model, where you have a great service that reaches millions of people, and 99% of them are using it for free. If too many people go to pro, than that means the free service isn't good enough. **Edit:** erm, by funding, I meant *income*. So far, Imgur has not taken investment money or anything.
The original version, when it was released, was written on Gentoo using VIM. I've moved onto Ubunto and Komodo IDE since then. But yes, I've had my fair share of PHP battles.
I'm not sure exactly...maybe a month. I just worked on it in between classes and during spare time. The image editor took the longest, because that was pretty much the first thing I've ever made with JavaScript. However, the site has changed a lot since then.
The biggest single project I worked on by myself was a enrollment manager for a private school. I wrote about 20k loc. They ended up paying me and then using a third party vendor for their needs. 
I agree, but thats easier said then done. Ad agencies really hate unmoderated user generated content. It's been an uphill battle with ad networks, and I've even been banned from AdSense.
please please please make the back/forward buttons work
Madness!! You just end up writing your own badly thought out framework. 
It was an easy sell. "You can let us spend nine months on a refactor, or six to nine months on a rewrite, or we'll continue to have a 90% turnover rate year to year."
I don't think it allows a +, but you could easily fix it.
Seems like almost all web shops have that legacy of thoughtless rushing. I know I did at my last job. I worked with the guy who made those decisions and he would hang his head in shame. I never ragged on him though.
nice, congratulations!
Lots of Refinery help at http://groups.google.com/group/refinery-cms.
[Pubwich](http://pubwich.org), an open-source Web application that allows you to aggregate your published data from multiple Websites and services into a single HTML page. I'm currently running it on my [personal homepage](http://remiprevost.com). No framework, just bits of Cache\_Lite, php-gettext, php-oauth, Simple_XML and Mustache.php.
[SparkFun](http://www.sparkfun.com). It started as OSCommerce and got pretty hacked up over the years. We're now testing a completely rebuilt front-end using a custom-rolled MVC (due for release sometime this fall). The really fun stuff is all in the back end - custom built order processing and inventory control applications and the like.
 &lt;rant&gt; Seriously, **FUCK** PHP4! PHP4 is the IE6 of web backend, we cannot go on and on and support a system that has reached EOL long ago. If they're still using PHP4, then they can just turn around and come back when they've migrated. "Oh, but what about legacy code that doesn't work with PHP5?". You should haven't written code that violated the rules without thinking there'd be no consequences, and you shouldn't have stopped paying your coder so he could update the codebase once things started becoming deprecated. **Edit:** Hell, I even recall a webapp that was written violating PHP5 rules, so it threw errors all over the place. This caused problems with their installer, because they couldn't to redirects the way they wanted. Solution? Was it: a) Use ob_start() / ob_flush_end() to enable them to send headers anyway? b) Fix the offending code so it didn't throw errors? c) Use error_reporting(E_NONE) or similar for the offending code, so it at least didn't break? Wrong. The answer was d) Write in the README that the server admin should turn off error messages, otherwise their application wouldn't work Goddamn. **/Edit** **Edit2** Ah, now I remember. That crap application was VTiger CRM, a fork of SugarCRM. Ugh. **/Edit2** &lt;/rant&gt;
You can't strike a deal with Federated Media or whatever it's called? What about buysellads? None of them want to touch the site?
that's brilliant! Kudos!
&gt; I've even been banned from AdSense. whyso? porn? And how did they ban you? I run adsense on [gifexplode](http://www.gifexplode.com) and there's a good amount of porn uploaded to that. I manually go through and mark adult content (yes really) and ads are not displayed for those, but I also run adsense on my blog and don't want gifexplode to cause me to lose adsense on that..
Yeah, someone reported a naked picture to them. It wasn't even really porn, just a topless model.
I wrote a tool for project scheduling that pulled data from three separate project management systems with completely different databases running on different servers into one handy place. * System 1 was a heavily customized 4 year old version of [RT: Request Tracker](http://bestpractical.com/rt/). It used MySQL and had a perl front end. We used it to manage projects and build requirements documents and it was running on a server in NY. * System 2 was an ancient installation of [PVCS](http://en.wikipedia.org/wiki/PVCS). It had Microsoft SQL Server and used a horrible little stand alone program instead of the web-based front end. We used it to log bugs during QA. It was running on a server somewhere in Maryland. * System 3 was an internal tool developed by one of our customer service techs. It tracked QA's progress on bugs and whether or not they had signed off on a release yet. It was running on someone's desktop in Canada with a MySQL database. In the end I had a single site that would gather all the 'stuff' in a release and let us see the status all at once. It depended on a lot of connections being available, and I spent most of my time making sure it would fail gracefully when (not if) something was down. I wrote myself half a dozen libraries filled with database, logging, screen scraping, and input/output wrangling tools. It was agonizing to develop, but it completely changed the way the company approached releases. Even though it is incredibly unlikely it could ever be used anywhere else I have scavenged my code from it for other projects many many times. I was very proud of my frankensystem. I learned a great deal creating it.
In the name of all that is holy, please do **not** even *consider* [OpenCMS](http://www.opencms.org). I've just had a training session on its configuration and deployment at what is probably one of the world's largest installations, and I'd rather use *anything* else.
My biggest solo project so far is a lyrics website. It's running a homegrown framework at the moment, but we are switching it to [Lithium](http://lithify.me/) pretty soon. It's around 50k lines of code at the moment, running on PHP/MySQL/Apache/Memcached. The lithium version will have less code for the actual project (as I won't count the framework), and we will be switching to Nginx at the same time. Largest project I've ever worked on is my current full-time job. Over 250k lines of code (not counting the framework, which is Zend) to power a 3rd-party insurance backend.
imgur is by far my favorite image host. Thanks for providing it!
and bam! that was it? Might have to rethink ads on gifexplode then.
Are you a SparkFun employee? Or did they contract it out? EDIT: I love sparkfun!!! Was the only one in the kansas city hacker club to actually get any loot in the $100 giveaway :)
Not trying to sound like a jerk, but why would I use apptrackr instead of visiting the App Store? It's definitely an impressive looking website. :) EDIT: Nevermind, I'm an idiot.
&gt; One word of warning: I wouldn't suggest that the $RANDOM_PHP_WEBSITE source code is a particularly good example of well-written PHP these days. It's quite old and crufty. Fixed that for you. In all honesty, most PHP websites have a structure strikingly similar to PHP.net, considering most websites are WordPress sites. I'm serious, go look at some free WordPress themes off a popular site offering them and tell me the code doesn't resemble the "old and crufty" look from PHP websites a decade ago. Changes are 80% of WordPress sites are using one of them and 90% of the owners of those websites couldn't be bothered to care about the cleanliness or extensibility of the code.
Very nice site, well done!
I cringed reading this, every thread about PHP in /r/programming is pretty much this...
filter_var (PHP 5 &gt;= 5.2.0) not everyone has that option. :`(
how about project wonderful? are they also against it?
Can I make a suggestion? A sort by popularity would be great.
Do you suggest a framework over using a custom library/framework?
Yes, for several reasons. Do you really need to rewrite a user management system again, for the thousandth time? Do you really want to make doubly sure that you have escaped all input to the DB, or would it be helpful to have people, who are probably smarter than you have done some defensive stuff in a framework. Not to mention, let's use an outstanding example. http://xajaxproject.org/ Which is an amazing library, you can easily reach into the javascript in the browser from PHP and you can also reach into PHP server side from javascript, it's an astoundingly awesome piece of work. So unless you really think you can do it better than some other people _every time_ it's probably better to use a library, and if you happen to find a bug you can fix it, __IF__ it's open source. However I have come to realize that I'm a sysadmin at heart, therefore I usually try to find a solution someone else has written, where as most programmers spend 15 minutes looking then think 'BAH I can just write it up in 20 minutes'
Couldn't agree more.
Oh dont get me wrong. I think frameworks are great. Im still looking for one i feel comfortable with. There are benifits to both routes. Obviously lets not redo the wheel. But lets see what route works best. Not saying im smarter than those out ther either. I do have more fun trying not to use a franework. Once i find the one i like a lot hell things might change for sure. Nothing wrong with trying unless your job depended on it. Ill check out that library. Seems like it could be some really good stuff.
[here](http://www.regular-expressions.info/email.html)
 /^([\w\!\#$\%\&amp;\'\*\+\-\/\=\?\^\`{\|\}\~]+\.)*[\w\!\#$\%\&amp;\'\*\+\-\/\=\?\^\`{\|\}\~]+@((((([a-z0-9]{1}[a-z0-9\-]{0,62}[a-z0-9]{1})|[a-z])\.)+[a-z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)$/i by James Watts and Francisco Jose Martin Moreno from [fighting for a lost cause.](http://fightingforalostcause.net/misc/2006/compare-email-regex.php)
another reason i HATE javascript
root@localhost is a valid email address.
[YTMND](http://ytmnd.com), around 80k lines of PHP/JS/HTML/CSS/C++ code and ~90+ MySQL tables. All written entirely in emacs by my lonesome. No frameworks or outside libraries (other than jQuery) were used. My initial goal was to make a dumb website, I'd call it successful in that aspect.
Upboat for Komodo. It's a great editor.
Ever look under the hood? It looks like Joomla was coded by 5 year olds
if implemented properly, the ajax loading of pages can still keep the back/forward buttons working
This. This so much. Stay the fuck away from Joomla if you value your sanity. Symfony has great tools (a great tool, doctrine) for generating schema and an admin CMS from the structure of the database, and is super extendible, but has a really steep learning curve.
Because it's not a real MVC, it's not even close. There is no reason in the world to learn something that limited and painful.
Interesting how someone went through and voted every comment down. I went back and voted everyone up. Canceled that out bitch.
Not against it, but you have to mark your site as having adult content and that can limit the number of people willing to bid on your site.
That bug was fixed in PH P5.3.3 and PHP 5.2.14. That e-mail is not valid (though of course some MTAs accept it). See http://stackoverflow.com/questions/3406473/why-does-filter-varemail-filter-validate-email-allow-testtest/3406637
[Regator](http://regator.com), PHP on top of MySQL with Sphinx as a full text search engine. 
MVC isn't the God pattern of software however Joomla is a prime example of what you end up with when you don't plan or refactor your code. 
Drupal is awesomely configurable and quite well put together once you understand it's codebase but usability sucks. Drupal 7 is attempting to fix this which is great news. 
Well, I have built a few very large sites. Some were partially built by me, others were smaller sites that were greatly expanded by me. They probably ended up being 90% of my code at the end. One of them made $650,000 in revenue in a month (it was a solely online business). This number could be higher now, but I left the company. The other was for the largest youth baseball league in the world. During the season it would pull about $4 million-$5 million in registrations. Both were PHP, MYSQL. I also have done some other work on a large number of sites. While in college and right afterward I worked at a good web development company. We focused on application type sites and not brochure sites so we were more about making cash for clients than advertising. Never really looked at pageviews. I would say that some of them could get 400,000 a day during peak periods. I know the most I ever saw in a single day was about 12 million pageviews. But it was because of the way events fell on that day. Just happened that 5 really large events that used our service all fell on the same weekend.
Drupal is a different way of doing things which makes it hard to get into. * as pointed out elsewhere you are certainly not limited to one module file * I agree on the plain php point it would be a plus * Forced to follow a naming convention sounds like a plus point it means once you learn it everything else is consistent * Debugging can indeed be a real pain, though it is perhaps the price you pay for such flexibility * I've found the documentation to be really good. * Drupal is not a mess it's actually quite well organised it's just different to the usual MVC we are now all used to * For me Drupal's main bugbear is usability, it kept me from jumping in for some time and I still wouldn't claim to have a firm grasp on things. I've spent time coding things that could be done with settings I couldn't find at the time
No links, but probably the one I am most proud of is a Child Care site for Canada (still working on it, but 100% functions). The 2nd being an Online Giving system for a University. Both were done using the Seagull Framework (http://seagullproject.org/)
Impressive. What did you write in C++?
A collaborative vote-prediction engine to do recommendations for YTMNDs users would like.
probably just bots
So what do you recomend instead?
There is one... haha.
I really, really love 1.6. It's great.
Oh my bad. It's been a while since I used Apptrackr (around the time it was released to replace I forget what it used to be called)
Gentoo and VIM? You must have been the college bad ass :D
What would you say are the benefits to HMVC? I used it in Kohana and can't really see where I would use it that isn't covered by a nested view or something.
Yeah, all the chicks were really impressed.
Whats the site? Also apache can be a bit of a resource hog but probably has more features or modules avaliable. Question is do you use any of these? 
as far as i know im using image magick for processing and not more ii haev in mind right now. its thsi www.imgzzz.com
It's not that important at this stage. Focus on your product and worry about architecture later. Apache'll do the job just fine and is excellently supported by any software you want to use. I wouldn't recommend switching until you have a compelling and informed reason to.
ok i c. thank u so much :) really appreciate your suggestion, a little off topic question if u don't mind. u have seen the site www.imgzzz.com wht shud i change or improve to make it somewhat usable and easier liek imgur. (big goal right ? :D )
homepage is a bit busy. What am I supposed to look at first? Question: Why is the user visiting the site? Answer: To upload an image Question: What should be the single most prominent thing on the page? Answer: The upload form Question: What is the most prominent thing on imgzzz? Answer: Everything; you're telling me everything you do all at once. I don't care. Once I've achieved my task - uploading and sharing an image, then I might start caring, if your service to me is excellent and I decide you're the image host I've been waiting for all my life. Nice domain.
I think its perfectly legible where to upload an image, it also shows there is more to it that just an image host. 
wow ! ur actually very right. all right i will be working on it really fast and show u some results in message. ok with u ? thx again :) 
The compelling reason one day might be traffic and load, I would trial both under simulated load and find out which you are happier with. Its better to be aware of bottlenecks before they occur and not be desperatly trying to switch because you software can no longer handle the load.