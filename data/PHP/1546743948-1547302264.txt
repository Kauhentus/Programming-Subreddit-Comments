A Trait a simply collection of methods that help your class accomplish one type of generic/transverse things while remaining in the context of the class itself, so you can simply call it DoesSomething. Ex : LogsErrors, CachesHTTPResponses, GeneratesPDFs, CreatesInvoices, MonitorsChangesToModel, RegistersUsers, FlushesCaches, MailsErrorsToAdmin, etc. No need to include a t/Trait pre/suf-fix in the name, your IDE will know what it is and it will handle it for you. And the 3rd voice convention helps distinguish Action+Noun-Traits from Noun-models.
this was a really awesome comment instead of just the normal bashing of cms/framework
No, I am pointing your hypocrisy. Learn the difference. &amp;#x200B; &gt;Are you autistic or is your stupidity attained by severe training regimen So... autistic people are stupid? &amp;#x200B; &gt;You suck at trolling and please - keep using facebook products I will. &amp;#x200B; &gt; After all, you are the ideal target population, Dunning-Kruger in effect and zero capability of concluding on your own &amp;#x200B; You mean, the sheeple unware of giant conspiracies made by big companies, and their secretes reveled on reedit? &amp;#x200B;
Some others have posted links to the PHP-fig site, but I’ll throw in my two cents. For interfaces, they all describe something that **can do** something. I either do the normal *-Interface* or *-able* suffix. For example, *XmlInterface* or *Xmlable*. For traits I usually use the prefix **Has** as they provide functionality. For example, *HasJsonCast* or *HasMailNotification*
Laravel uses "DoesSomething" style in a present tense verb. Like "SoftDeletes" 
Personally, I don't believe in prefixing or suffixing interfaces, because the interface names are what you should be using *most* everywhere. 
You can extend a class that extends a class, etc. If two classes extended were to implement different constructors, who would be called first or not at all? Having a linear chain of extensions and parent calls is simpler to compile and keep track of.
Traits are to the rescue. 
I heard this a few times. But honestly, what does it cost to have a Interface suffix? CustomerInterface is not readable?
Short answer: no. In PHP if you will need to do multiple inheritance, you probably can split the common code out and make it a trait. It's avoidable. A trait is designed for such case.
From http://php.net/manual/en/language.oop5.traits.php : &gt; The semantics of the combination of Traits and classes is defined in a way which reduces complexity, and avoids the typical problems associated with multiple inheritance and Mixins. 
&gt; But honestly, what does it cost to have a Interface suffix? "Today I got into a CarInterface and drove down the RoadInterface to my local GroceryStoreInterface where I bought some FoodInterfaces with CashInterface from my WalletInterface." Every "Interface" suffix in that little anecdote is painful to read and stupidly redundant, because everybody *already knows* that the words -- like "Car" -- is a general label which tells you what aspects of the object are important while leaving out a whole bunch of unimportant specifics. 
I am glad to know if the thing I see outside on the Street is a car or a plan on how to make a functional car. I do not care about the suffix and do not really „read“ it. But I see it. This means I can see what is needed for a padameter on a typehint in a split second. Is it a Car, Jeep or does it just need to have some specifics of a car.
The decision to not allow multiple inheritance in PHP was done on purpose. Multiple inheritance makes it very easy to back yourself in to the diamond of death scenario. 
That article has tips for using composer after you've got it installed and probably know something at least. Different focus. 
are traits being abused though? I've never seen it in the wild...
How do other languages that have this ability avoid this issue? And can the same techniques be used here if they ever pass a commit that would allow for this
There’s also cases against traits. How does the use of the use of traits not fit this case of abuse? Or can it/does it more/less often
Many languages do not allow multiple inheritance. C++ is a language that does and it has virtual inheritance as a method of avoiding the diamond problem. In general, multiple inheritance is avoided in C++ because it is rarely necessary and adds both fragility and complexity.
Hmm why trait should be avoided? I find that trait fits this case nicely on multiple inheritance :)
Why not CustomerClass then too?
Because Customer represents a customer and CustomerInterface represents an Interface how to make a customer.
What do you think about it? https://github.com/sunrise-php/http-router View the work of the router with annotations here: https://github.com/sunrise-php/awesome-skeleton
How's it stack up to [Lumen](https://lumen.laravel.com/)? That's a baseline. Someone can critique the API affordances tomorrow. I'm tired.
Lumen is a framework (microframework), Sunrise Router is a router that works fast and supports annotations :)
It’s predominantly a router with the option to piece in components. The masses demand some benchmark figures! Or your head...
I hear about it in every thread that mentions them, but never once encountered a problem with them in the real world. On the other hand, I’ve seen plenty of gross messes due to inheritance (and have created plenty of my own in a past life) Any tool can be used to write bad code if you try hard enough. Most of them can also be used for good code. 
Huuuuge +1 for psysh (a.k.a. tinker for Laravel people)
The answer to the question has been given with a link to php-fig. You'll note the `IInterfaceName` is not a PHP standard. It's a C# standard.
In PHP a class can extend only one class. The inheritance may have several level a Dog is an Animal that is an Object. Many languages decided to not to implement the multiple inheritance, it's mainly a design choice. PHP, C#, Java, Python, have not multiple inheritance. C++ has multiple inheritance, it's not so bad but it may be hard to deal with. The diamond inheritance for example. A class A defines some methods has two children, B and C. B and C have some common methods too. Another class D extends B and C. What methods are used, the ones of B or the ones or C? That's where the `virtual` keyword is useful but it's another story. For novice developers it may be difficult to deal with the diamond inheritance. PHP hasn't this problem because it allows only one inheritance. That's a limitation, because to avoid repeating the code it's sometimes useful to "extends" two classes. Eg: a Car that works under the water. Is it a Car, or a Submarine? To fix this problem, language designers let use use interfaces. Interfaces are great to define a contract and a type, but it doesn't define any behaviour so we might repeat the same code in two interface implementations. That's why traits are there. Traits let you define attributes, methods, so it define a behaviour that can be shared between classes. When you design you application carefully, a multiple inheritance is not a problem. But for a beginner it can be. Traits are easier I think, so a beginner can deal with it with ease.
If you're working with such a large file, you may want to do a conversion outside of PHP such as with a tool like [pdftoxml](http://pdftoxml.sourceforge.net/) and read that with PHP. Side note: have you reported this error on the pdfparser github?
I had issues with pdfParser too. Try linux native **pdftotext** command. On debian you must install it first: sudo apt-get install poppler-utils And try to call command from php (maybe you can use symfony process component): pdftotext {PDF-file} {text-file} You can pass additional flags to this command.
&gt; All of your methods are still static I still not get it why it is bad. &gt; I use an old rule, if the method must keep states, then the method/class must be non-static. Otherwise, it could be static. Even more, if the method uses a singleton, then it could be static too. For example, a Dao (Repo) class, this class requires at least a state (the connection to the database or usually knows as $conn variable), so this class mustn't use a static method (unless it is using a singleton for connection). * Static methods are not OOP-compliantly but again, it is cargo cult of the community and we are not tied to 100% OOP. * Static methods are testable like any other method. In fact, to test a static method is most natural. * Static methods are easy to maintain and to debug. Why some people say the opposite?. * Recently somebody put a (so-so benchmark) showing that static method is fast than non-static. I tested it, and yes, it is fast (at least for PHP 7.2), it is a micro-optimization, but it is still valid. 
Personally I am not a fan of psr-7/15.
Nobody is holding a gun to your head to stop you from benchmarking this router, you know.
For a business viewpoint, I suggest you keep it to 5.6 PHP Group will not support 5.X anymore and still, it is not the same with the market, the PHP 5.X market is still huge, so the users, servers, and libraries. So, do you want more users or do you want to push people to upgrade PHP?. Why a project must raise the minimum supported version? : * Because it uses a feature that is only present in a new version of PHP. * Because it relies on libraries that only work with a minimum version of PHP. Why a project mustn't raise the minimum version? : * Because it is a discontinued version. Sorry, but it is not our call. 
I, too, had not been a fan before ... You have every right to dislike PSR :) But thanks anyway for your time!
https://github.com/mikehaertl/php-pdftk
My 2cents: * You must add Unit test. Why? because it gives trust (to developers). * I suggest you add composer and to add to packagist and all the stuff. In my experience, practically all downloads came from packagist/composer. * I suggest you add CI. Open source projects with Github has Travis-CI for free. It is a PITA to configure but it is possible. * **I like the minimalist design**. I personally cringe libraries and projects with lots of files and folders where a couple of files would do the trick. * Maybe you could add a template library, *cough* *cough* https://github.com/eftec/bladeone my library ;-) (it is also minimalist, one class) 
Nice. I've worked in hosting for a while and my eyes are lighting up reading about apnscp. It looks like a lot of work has gone into this! Will try and find some time to spin it up on a box and have a play. Really like the limited write access profiles for PHP, that really limits the scope of most common attacks.
Any plans to add chainable methods? So far it's looking nice.
Thank you very much, very nice to hear :) Yes, PSR describes Middleware logic. This has not been enough for the PHP community for a long time (IMHO)... You can see here: https://github.com/middlewares
I'm certainly too late to join the discussion, but everyone here says "frameworks are DIFFICUILT to write". I wonder why...
I suppose I worded my post wrong, I meant “stop it from running (because it restarts within seconds of being killed)” I wasn’t suggesting that was a complete solution. 
One short answer: Composition &gt; Inheritance &gt;Don't design your objects about what they are, but what they can do. &amp;#x200B;
Looks good, congrats!
How do you know if &lt;name&gt; can be extended, implemented or used?
wow these amount of downvotes seem a bit harsh lol
You use an IDE. PHPStorm, for example, will show a (c), (t) or (i) icon next to the entity's name in your code as well as next to the filename in your project tree. It will also autocomplete, show hints on hover, and add contextualized sidemenu items depending on what you are trying to do.
When the community expects to compare apples to apples, but instead he takes out a potato battery powered killer AI...
This is a typical case where PHP isn't suited well for the task. Use a dedicated tool: pdftotext [options] [PDF-file [text-file]] or gs -sDEVICE=txtwrite -o output.txt input.pdf 
Does ULID work well in a distributed environment? What are the chances of collision when generating on multiple machines? 
Facebook made React and GraphAPI which i like.
I think this is problem of the past as more and more developers use docker for development
PHP 7 still lacks many feature HackLang has like async/await, enums, generics, callable typehinting, property typehinting (will be in PHP7.4), type aliases, short lambda notations etc.
Looks good, have a small project that's going into prod soon that this could be of use, will let you know when it goes live, great work.
I don't understand how this can be faster than FastRoute/other implementations: https://github.com/sunrise-php/http-router/blob/master/src/Router.php#L95 It looks like there's no special handling when matching routes, it's just a basic loop and check-regexes? 
Sleep was and here am waking up expecting something more. Excellent delivery 
What about GitHub/Gitlab, filesystem or CLI? 
You probably shouldn't use a brand new *anything* in production..
Since a convention to do so exists, I think I'll switch to using suffixes (even if I feel that may be unnecessarily wordy) at least for code intended to be maintained/extended by others.
Traits are great when you have small pure methods that multiple classes can share. I tend to start each name with the verb, for example — ProvidesUserCredentials or UsesLogger. It’s a trait (no pun intended) that I picked up from Laravel. I feel like it really improves clarity within your classes.
[I'd recommend using this code.](http://lmgtfy.com/?q=html5+progress+bar)
&gt; I don't understand how this can be faster than FastRoute/other implementations: https://github.com/sunrise-php/http-router/blob/master/src/Router.php#L95 &gt; It looks like there's no special handling when matching routes, it's just a basic loop and check-regexes? But still, it's faster: https://github.com/sunrise-php/http-router-benchmark Than this: https://github.com/nikic/FastRoute/blob/master/src/Dispatcher/GroupCountBased.php#L12 In programming, I try to use the KISS principle. Perhaps this is why Sunrise Router is faster. 
&gt; Looks good, congrats! Thank you very much!
And when can I use it? :) I use, everything is good :)))
You can also see: https://github.com/sunrise-php/http-router-annotations-support
Nothing really changes except for what we display on the requirements page and readme. The minimum required version is still there, with a warning of it being unsupported (https://www.wondercms.com/requirements). Thanks for your input!
Actually Python has multiple inheritance and I think it by default uses that diamond method for resolving as well
Every router has trade-offs. I tend not to trust benchmarks I haven't closely examined. In most cases, though, you don't need it to be the fastest -- just fast enough. Then things like ease of use, integration, etc, are the differentiators.
Indeed you're right it's an error from me. I've edited my comment, thank you.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Non critical, it's fine.
&gt; Every router has trade-offs. I tend not to trust benchmarks I haven't closely examined. &gt; In most cases, though, you don't need it to be the fastest -- just fast enough. Then things like ease of use, integration, etc, are the differentiators. I already wrote here that I adhere to the KISS principle, therefore simplicity is the most important for me. Speed is only a consequence...
This benchmark tests 1 type of a simple route in the collection, which really doesn't tell anything. In real life you would have much more varied routes, like with host matching, more difficult pattern matching and such. For me this benchmark looks a bit flawed.
&gt; This benchmark tests 1 type of a simple route in the collection, which really doesn't tell anything. In real life you would have much more varied routes, like with host matching, more difficult pattern matching and such. For me this benchmark looks a bit flawed. In real life, I use microservice architecture. The host/port should be checked by an HTTP server, for example, nginx. Sunrise Router does not know how to check the host/port, so all the routes in the projects are simple... If you need more features in a router, it is better to choose another one, for example: https://github.com/auraphp/Aura.Router
What about just upgrading?
My latest project contains 183 routes. The most difficult route: /entity/{id&lt;[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}&gt;}/synchronize/{pid&lt;[1-9][0-9]*&gt;}/{mode&lt;(?:create|update|upsert)&gt;} Is this a difficult route? It seems to me that no :) The purpose of benchmarks was a simple search of routes in the collection.
Good stuff. Vue-tables-2 on GitHub provides an implementation of this: [https://github.com/matfish2/vue-tables-2/blob/master/server/PHP/EloquentVueTables.php](https://github.com/matfish2/vue-tables-2/blob/master/server/PHP/EloquentVueTables.php)
Finally somebody who supported nested route groups out of the box. Upvote just for that!
&gt; Finally somebody who supported nested route groups out of the box. Upvote just for that! Thank you for your vote!
That benchmark is completely broken, at least with regards to FastRoute. You are reconstructing FastRoute on every dispatch, which doesn't make sense. The whole point of FastRoute is that it does work upfront (including a good bit of slow validation) to be fast when dispatching. Of course, this does not work if you are reconstructing the routing state every time, without caching. In https://github.com/sunrise-php/http-router-benchmark/blob/master/benchmarks/FastRouteBench.php, init() should hold everything up to and including the `$map-&gt;getData()` call, while `benchFastRouteMatch()` should have only the parts starting with `new Dispatcher($data)`.
https://github.com/phpexpertsinc/ConciseUuid A normal UUID is 36 characters and looks like: d318fb95-5b49-47ca-abd5-326a60524e70 This is very long, and in base16, there is a lot of unnecessary space. ConciseUuid takes this, strips out the "-" and converts the base16 into base62 (0-9, a-z, A-Z). Here is the Concise version of the above UUID: Old: d318fb95-5b49-47ca-abd5-326a60524e70 New: 6QKnU3XheQMk3E6Vq1B4l6
Congrats! If there were tradeoffs to make it faster, what were they?
&gt; Interfaces MUST be suffixed by Interface: e.g. Psr\Foo\BarInterface. Are you writing Java code? I'm not using a FileSystemInterface: I'm using the FileSystem. I don't care if it is an interface or a concrete class which is in fact NetworkFileSystem or MemoryMappedFileSystem. I imagine coders going to buy a car "Hello, I'm looking for a VehicleInterface".
I care
What about Phalcon?
That's mainly a C-extension to PHP, so you would rather compare it to Go, Rust or C/C++ in terms of performance.
See [https://docs.symlex.org/en/latest/tradeoffs/](https://docs.symlex.org/en/latest/tradeoffs/)
You'll need to use HTML, CSS &amp; JS, I recommend to make a few sections, get the count of that, and toggle visible styles by the current index
In fact it would be good to see a benchmark based on the same requirements, just to get an idea. Some of that &lt; 1 ms overhead you see is caused by the Web server and PHP itself, so the difference might be very small in practice as PHP 7+ is well optimized. HHVM could also be tested.
The desired route FastRoute found faster, it is a fact. Benchmarks are not focused on finding a route, but on a comprehensive launch of the router. In other conditions, FastRoute will be faster, I do not deny it. Thank you for your interest.
HackLang shouldn't have broken compatibility with PHP.
What exactly is being bench-marked? How fast the text "hello world" can be rendered is not really interesting? I am having a hard time finding out what they are profiling on their website.
See [http://www.phpbenchmarks.com/en/benchmark-protocol.html](http://www.phpbenchmarks.com/en/benchmark-protocol.html) It's a simple Hello World test and a more "complex" REST API test. Source code can be found on GitHub. Of course the tests don't include calls to a database they only want to benchmark framework overhead.
So the test is how fast a framework does its bootstrapping?
I'd say the complete framework overhead, that means excluding database calls and business logic, as this obviously depends on the app. I've came across this benchmark while reading [**http://fabien.potencier.org/symfony4-performance.html**](http://fabien.potencier.org/symfony4-performance.html)
Can you iterate further on what the "abuse of traits" is?
Multiple inheritance is, in my experience, far more dangerous than traits. Then again, I've been taught and worked with composition over inheritance for as long as I've been programming, so traits aren't that appealing to me either. If I were to solve a problem of code duplication, I would use composition and delegate the work to a dedicated class. If that's not a good work around, traits are your next best solution. I'd advise against multi-level inheritance as much as possible. The best advice I ever got was, "inheritance is at it's best when your inheritance tree is shallow *and* wide."
this isn't freelancer mate
I'm sorry but the wrong padding kills me 😅
Ali G?
TL;DR : ULID is a spec to generate ordered, 26 character, base32 encoded strings. The strings are comprised of 48 bits of millisecond timestamp and 80 bits of randomness, for a total of 128 bits, just like a UUID. &amp;#x200B; Spec: [https://github.com/ulid/spec](https://github.com/ulid/spec) PHP Implementation: [https://github.com/robinvdvleuten/php-ulid](https://github.com/robinvdvleuten/php-ulid)
If two machines create a ULID at the exact same millisecond, the chance of generating two identical strings is ideally 1 in 1,208,925,819,614,629,174,706,176.
That part about Monotonicity is going to turn into a potential vulnerability for a side channel attack, especially for environments like Java that may serve multiple requests from the same instantiation. If someone were to flood the system with requests at the same time as anyone else is generating values then they could do +/- 1 to figure out someone elses "unique" value. I hope no one uses this for session ids, generated temporary passwords, or anything that should be anonymous (e.g. a Google Doc that uses 'only people with the link' enabled). The spec links to two PHP implementations. The one by Lewiscowles1986 (second in the list) doesn't implement the full spec (it only uses `time` instead of `microtime`) and the author has already abandoned it. The benefit of UUID v1/v2 is that it uses microseconds instead of milliseconds, thus much better granularity to prevent collisions even within the same system, and if you use a cyptographically secure random value instead of a static MAC address then it also has most of the benefits of UUID v4 as well. Top that with the optimization to use the binary string and rearranging the bytes, it's only downfall is not using Base32 for displaying them to the user.
I'm working as a VA and I do a lot of routine work (mainly connected with using spreadsheets). It would be awesome if you shared some cool scripts or other ways that you use or know of that can automate the work. I understand that this question is too general, but I can't put it any better since I only know the basics of PHP.
Python may be better to pick up for general automation tasks from a VA's perspective. What kind of things do you do that you'd like to automate?
Yeah exactly. Python coders have all kind of scripts to automate stuff
What is “coeurs” on their hardware spec?
Vive la France, vice le PHP 🇫🇷
Definitely useful, man. I’m going to take a look into this tomorrow. Thanks for the release. 
Lib with better test coverage: https://github.com/Spomky-Labs/otphp
Last week I automated some excel work with openpyxl. Super handy library!
I do a little refactor to PHPGangsta GoogleAuthenticator https://github.com/s3b4stian/GoogleAuthenticator
Hi, actually the demo is on docker where the instance is destroyed every 40 min, so we can't check there as they are only accessible within the instance. 
Dude, you asked for feedback, but now you're just acting super defensive and not accepting any. Not cool.
I agree with you. Benchmarks are not indicative. I answered @nikic that in other conditions FastRoute will be faster. I listen to everyone, maybe I don’t show it. Perhaps you need to rewrite the benchmarks, I do not argue with that. I do not defend myself, maybe I express myself badly.
I didn’t expect that instead of discussing the router, we’ll be discussing benchmarks. But I have problems with them, I agree.
Sorry, I did :) I was sleepy when I wrote...
You could consider adding [PSR-17](https://www.php-fig.org/psr/psr-17/) to the mix. That will prevent multiple implementations of `ResponseInterface` within a single application. And I personally like to set up stuff via the constructor. Being able to specify a set of routes and middleware in `Router::__construct()` would be awesome. But that is hugely influenced by opinion :)
Clickable link : [https://imgur.com/a/Cfs9DRi](https://imgur.com/a/Cfs9DRi) Please use /r/phphelp for help. And be more precise: How do you connect to your database ? PDO? Mysqli ? Doctrine ? ...
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/XbUYVu2.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20edgi9pk) 
Thank you for checking it out! :)
I referenced PHPGangsta's project as well, specifically the "getCode" method. It's a pretty solid work, I just want to avoid any string manipulations and pack/unpack functions in my implementation. :D
Hey Max, thanks for writing! Test coverage should be at 100% by the end of this week. \^\^
In my refactor, code updated to PHP 7, strict typing, rand function replaced with new random_int, Google qr code link generation removed because qr api deprecated, tests updated, It's work in progress!
However, at home, I will check your code :)
Yep do post it at /r/phphelp thanks! :)
What about adding protection from XSS/injection using tainted string or something similar?
I don't understand this subreddit. Someone asks you for the protocol, you give the protocol, and you get downvoted. People need to learn how to use the downvote button. 
Do not name your interfaces with prefixed (InterfaceX) or postfixed (XInterface) names. You introduce interface to not care about details, so essence of "X" **is really** X. Implementations are those special cases that need to be named with some words that distinguish those special cases among themselfs: Wrong: "InterfaceX + X + X2 + X3" Right: "X + DoctrineX + MockX + InMemoryX"
PSR naming conventions... are intended for PSR submissions. PSR do not propose their own naming convention the same way they propose PSR recommendations.
Could use some more standard libraries, instead of implementing everything yourself. For example baconqr. And there's probably a great base32 library somewhere.
No you do not. That's why you use interfaces in the first place. You do not care if it's networked file system or memory mapped file system or maybe those crazy long term storages where files are not accessible without human interaction ;) Thus you pull "essence" of file system into it's own thing, and relay on just it. This essense usually already have a name. So why add another sufix/postfilx? In english we talk about abstractions all the time (e.g. Car instead of Volvo XC/'2012), and nobody demands "CarAbastraction or GTFO" ;)
Not PHP scripts, but still funny for a monday start like today: [https://github.com/NARKOZ/hacker-scripts](https://github.com/NARKOZ/hacker-scripts) :-)
Then you need to change something. Logging is a must have. Datadog for example.
Aaaah, but where's the fun in that my friend? :D I'll look into baconqr as QR codes aren't that interesting to me (ISO/IEC 18004:2015 has \*cough\* 100+ pages). Regarding the binary-to-text encoders, I plan to implement all of the ones with public specifications myself. Implementing Base 16 &amp; 32 encoding in PHP was quite enjoyable. :)
It's french for Cores
Can you print screen your code snippet and manually write the approximate error?
Actually I need guidance brother can you guide me wait let me inbox you
Oops, sorry I don't have time to help, I thought it was an ironic post...
It is about dynamic text input for same type of inputs 
Thank you for your feedback, we will for sure check on this and add something there. 
If you asked like a normal human, you would've gotten an answer.
I'll take those odds! 
useful stuff man!
useful stuff man!
useful stuff man!
Something I do A LOT is download csv reports and reupload them to google sheets. The problem is that out of 10 columns I need only 2, so I need to delete the rest. I'm pretty sure there is a way to do make a script do it.
FWIW (I didn't downvote), but that page tells tells me exactly nothing about what in specific is being tested. It just outlines the minimum overview of how they work. And the information is \*really\* minimal. &amp;#x200B; What work is being done in the "Hello world" benchmark? Does \`echo 'Hello world';\` qualify? Does it render an HTML template? Does it render a full HTML page? Does it bootstrap everything the framework has to offer or does it strip out all things normally used in an application to the bare minimum for the simplified "Hello world" example? &amp;#x200B; Same for the REST benchmarks. Is there any page explaining what in specific is being tested (without going through random commits on github for each project)? &amp;#x200B;
please stop spamming bullshit about this crappy e-commerce package
Firstly, there's a subreddit for help: [PHPhelp](https://www.reddit.com/r/phphelp), secondly, you have a static method provided by DateTime class: `DateTime::createFromFormat` where you provide format and what to be formatted. Read about this [http://php.net/manual/ro/datetime.createfromformat.php](http://php.net/manual/ro/datetime.createfromformat.php)
Thank you for your feedback, we will keep improving our product and we believe it's just a matter of few months when you will find the same package as one of most used eCommerce package by Laravel Community. We will keep doing our good work for the benefit of Open Source Community and eCommerce. 
I don’t care. you’re touting this as some silver bullet e-commerce platform when it has no tests and no assurances or proof that it works whatsoever
For what you're doing, you might look at the scripting in google sheets itself. It's pretty easy to pick up.
you are hero
Thank you!
Bagisto is thoroughly manual tested and we have team who is dedicately working on it. TDD for Bagisto is for sure not upto par at this moment but this doesn't mean that it will create disaster for usage in production. Very soon we are going to use Blackfire and Travis CI for Bagisto and we will publicise our benchmarks and tests. 
The \`DateTime\` construct has 2 parameters - \`string $now\` and \`DateTimeZone $timezone\`. Although \`$now\` does accept a date string, \`9 December, 2018\` isn't a valid format - see \[Supported Date and Time Formats\]([http://php.net/manual/en/datetime.formats.php](http://php.net/manual/en/datetime.formats.php)) &amp;#x200B; Restructure your code to use the \`DateTime::createFromFormat()\` instead of using the \`DateTime::\_\_construct()\` like you're using. It will look like this - [https://repl.it/repls/AdventurousMotherlyDimensions](https://repl.it/repls/AdventurousMotherlyDimensions) &amp;#x200B; $fechaDesde = $\_POST\["fechaDesde"\]; //prints '9 December, 2018' $d = \\DateTime::createFromFormat("d M, Y", $fechaDesde); echo $d-&gt;format('Y-m-d'); //prints '2019-12-09' &amp;#x200B; Although, ofcourse you will want to do some string validation on \`$fechaDesde\` to ensure it is a \`d M, Y\` format. &amp;#x200B;
I just skimmed through, but it looks like you never get beyond 1 db node. I'm curious about how to manage multiple of those. 
Well... not in kubernetes for sure
I've also previously written a security focused enhanced version of PHPGangsta's original code with a lot of improvements that OP would likely want to look at. Because I kept the implementation minimal in a single source file, it's easy to compare with the original and gain a better understanding of what potential flaws were patched as well as improvements. [https://github.com/CraftBlue/GoogleAuthenticatorRedux](https://github.com/CraftBlue/GoogleAuthenticatorRedux) &amp;#x200B;
Thanks, I solved it this way: $dateString = '9 December, 2018'; $myDateTime = DateTime::createFromFormat('j F, Y', $dateString); $newDateString = $myDateTime-&gt;format('Y-m-d'); echo $newDateString;
Thanks, I solved it this way: $dateString = '9 December, 2018'; $myDateTime = DateTime::createFromFormat('j F, Y', $dateString); $newDateString = $myDateTime-&gt;format('Y-m-d'); echo $newDateString;
I’ve seen a ton of abuses of traits in code I work on. Traits full of nothing but abstract methods used as awful interface stand-ins. Traits with tons of calls to assumed state. IMHO you’re usually better off creating an instanciated class rather than a trait. Has-A is almost always better than Is-A
That was on purpose. Though it shouldn't be an issue. All you need to use a node balancer service.
One downside to the shortened version is the additional complexity of trying to verbally tell someone what that value is over the phone (e.g. customer support, another developer). "6, Capital Q, K, lowercase n, Capital U, 3, Capital X, lowercase h, e, Capital Q, M, lowercase k, 3, ...." I'd rather the UUID version instead. The dashes also make for a nice visual break point or restart point too. The ULID version is at least a little better in being case-insensitive and removing O, L, etc. If you're storing any of these values in a database it would be much better converting them to BINARY(16) and storing them that way instead (the ultimate of space saving and faster comparison). There are ways of converting a UUID v1 that are good for indexing, too.
Yes, do not use traits.
Well you'd need to set up a mysql cluster and make sure they arrange their own m/s relationships, and that new ones can be added and removed from the pool automatically. That's all a lot more difficult than having another php-fpm behind a load balancer. Rant time... Apologies up front. If you only make 1 part of your infra HA and scalable, then it's not really much of a scalable infra. In my experience the part of the infra most crucial, most demanding and most difficult to maintain, is the database. A standard industry web server for a run of the mill web app can easily run a thousand requests per second. Much more than 90% of all apps require. Have a few million records of data and some complex queries, you need proper database management. It seems like it's all the rage to make things crazy HA, just to say that it's HA. While ignoring the parts of the infra that actually need some proper fail over management. Annnnddd done. 
Totally agree and obviously this should be extended to `Abstract` prefixes and `Trait` suffixes aswell.
Is there any link to Google (as suggested by the name)? Or is it just named after one of the worst OTP apps by coincidence?
In the past, I would have disagreed, but today, IDEs are really good at syntax colouring and showing you the data types of everything, so there is no ambiguity.
This post was crossposted to r/webdev by u/pknerd ( [link](https://np.reddit.com/r/webdev/comments/adju58/deploy_your_first_scaleable_phpmysql_web/) ) Hi, i'm a bot developed by u/SoLoDas ! Pm him if you have any questions (before you ask: yes it is ok to crosspost, this is just a notifier. This bot was created for new.reddit users and mobile users as they can not see crossposts natively)
How do you name your setters?
what do you mean by scripting in google sheets? Use javascript to write functions?
I would love for PHP to have something like Python's `attr_accessor` or C#'s `get` and `set` accessors. To me all the getX and setX methods are the most aesthetically unpleasant thing about PHP. `$foo-&gt;setBar('eggplant')` is so cluttered compared to `$foo-&gt;bar = 'eggplant'`. It's ugly and distracting. Magic methods are awkward and hard to read, and making attributes read-only doesn't solve the real problem: encapsulation and data hiding.
I don't like the argument saying IDEs show it nicely. I do a lot of code reviews and I don't do them on my IDE
This style is great. Until English and its weird grammar that makes verbs and nouns the same words shows up, and you can't differentiate things like "isOpen()" and "doOpen()" because both are "open()" in that naming style.
Well-written article. Good arguments, and I enjoyed the extra info about tautology. I have been on board with eliminating prefix/suffix for `Interface` and `Abstract` for a while. I still use `Exception`, although that's really out of habit only and I should be more proactive about not doing so. It's a great way to become better with naming. I think dropping the `get` prefix from getters is a reasonable idea, however I think it's a greater pain point for a few reasons: 1. Not every getter simply returns a property. 2. Method names typically describe an action (verb). 3. IDEs and other tools automatically generate getters with the prefix. It's more manual work for the developer. (Perhaps PhpStorm and others have a way of changing this?)
That issue doesn't seem so insurmountable to me? If that's all you can come up with as a counterargument I would say, go for it and figure out what to do if you ever run into it.
Well this is also somebody's own weird naming rules. Seems kind of arbitrary to single out this one and berate the others? They may not be as awesome but it's not like those other rules weren't made up carefully by smart people.
What I did when I run into it, is go back to the classic Java-style naming for that object. There are basically two philosophies of naming: - You make the names generic, future-proof, flexible, but somewhat longer and verbose. Or... - You make the names sweet and short, like a domain-specific-language (DSL). Both approaches have their merit. But if your object will evolve or add a lot of features later on, you're much better off using the first option, because with the second option you're piling naming workarounds one after another and in the end... instead of having a n API that's easier to use, you have an inscrutable API in the style of 90's C standard API, where you either learn each method one by one, or you have no idea what the hell is going on. So basically: if this object won't evolve a lot, is simple, is focused, and it's used all over the place, like a little DSL, then sure, go for short naming. If this is one of hundreds/thousands classes in a project, will evolve unpredictably, and will be used occasionally, then you better stick to classic "boring" naming schemes. That's how I see it at least. It's what I've evolved to do so I don't cry late in the project, you know. There's place for everything, no single approach does justice every time.
But you could replace that with `opened()` and/or `closed()`, where `open()` would change the state to open? That seems like the most logical solution to me.
People being smart is not an argument. Readable code is.
See, English is weird in that way. The past tense of "close" is "closed". The adjective is also "closed". The past tense of "open" is "opened". But the adjective is "open"... So... To illustrate in a sentence: "Is the door open or closed."
Am I only one who doesn't like `throw CannotReopenTodoException::notDone($todo);`? What's wrong with `throw new CannotReopenTodoException($todo);`? Maybe someone could explain why it is better to use first instead of second one?
True, I was actually thinking about that when writing my comment, English isn't my native so I thought it would be okay. It does become problematic when you want to know if something was ever opened rather than currently being open.
&gt; Method names typically describe an action (verb) After looking at Smalltalk I see methods simply as messages, and a message may be named `description` without it being weird but not really `getDescription`. Besides the verb `get` implies changing the state of two objects in the world (the object that _got_ something and the object that was _taken_ something). Only through our training we defeated our intuition. Which results in every new generation of programmers asking "purpose of getters? why?" etc. &gt; IDEs [...] may be adapted.
Yes but if everybody came up with nuanced thoughts like that we'd have nothing to flame or circle jerk over, would we? In all seriousness, I had not thought about it like that. Makes sense! 
My PoV in short: - I've never used `Interface` and `Abstract`, never needed to, never will need it. - I use `Exception` because very often I have a companion exception to a class, like `Foo` throws `FooException`, and in it, the `code` points to the specific error (helps when you have like a hundred errors in a complex domain...). - I normally use `get` and `set` because it's more inambiguous, flexible to future change and evolvable as an API. But if a class is used very often, and is simple, stable and focused, I will refactor it with short names, as a little DSL. Thing is, we don't have to choose one of the other. Say, I'd often have a "complex" object with the full `get` etc. names, and then write a DSL facade wrapper, that has very short and sweet names for a commonly used subset of it. We can have both, yo.
`isOpen` is a perfectly fine name even if we eliminate getters. Many people chose `isOpen` because that's nicer than something like `getOpen` or `getIsOpen` in the first place.
Man okay like Normal human being can you help
You should write in DETAIL what your php problem is in the description of the post, you should also include your problematic code. In a reply you wrote "It is about dynamic text input for same type of inputs", that reply is HORRIBLE. 
Well it doesn't really make it more readable, just shorter and less repetitive. I'd argue that adding Interface/Exception is in some cases more readable than not adding it, because you know what the class is without even opening it. Where in other cases, especially if you use the full FQCN the shorter version might be more readable.
That's also a style I've seen in the wild, yes. Eliminating "get", but keeping "is" and "has". Many trade-offs and approaches.
Ok sir I will from now can you helping me
But this is exactly what I meant. You are from india aren't you
You can modify the getter/setter templates in PHPStorm, you can just remove the prefixes.
My view: Something like `setEnabled(bool $enabled)` would become `enable()` and `disable()` or perhaps `toggle()`. Something like `setName` may just remain as is or perhaps change to `changeName`, `changeNameTo`, `setNameTo`. Other than in entities, business models etc. I don't have the need to have mutable objects so &gt;95% of the code I write may remain as immutable objects. Some of them might have with-ers like the PSR-7 HTTP messages.
I am looking at this and thinking "it is too late for me to change now". And then, making some excuses to myself "i have too much legacy code to maintain", "why fix what ain't borked", and then realizing that I might be too old to change and then thinking "its past noon, rye and ginger is not even a real liquor". And then ... "For me method is something object does so it's name should reflect that - some action. When glancing over the code and seeing those "is" "set" "get" "has" I know what is going on without having to read that class. $foo-&gt;description() does nothing for me. I would assume that without argument it would call $foo-&gt;setDescription() and with argument $foo-&gt;getDescription() and then there is also $foo-&gt;description. " &amp;#x200B;
Ji bhaisahab
Yes
This is not a better naming convention for one reason - English. The author's cherry picked examples sound perfect. But in the real world you'll probably end up using a term that isn't clearly an adjective or noun. Beyond that, "some IDEs make it easier" is not a case for conventions to change. Tools go in and out of style, not everyone uses the same tools and even when we do, we don't use those tools for every instance in which we need to discern the context of a method call or instantiation. I see no valid reason to use these naming conventions simply on the whim that the author is annoyed by tautology when the existing conventions are used across the industry and academia.
How does it differ from [https://github.com/lelag/otphp](https://github.com/lelag/otphp) \#2FA #MFA #GoogleAuthenticator? #PHP #Security
I would argue that something being shorter and less repetitive inherently makes it more readable. Though I _sometimes_ prefer abbreviations for local variable names in very common cases over full names. For example `$req` and `$res` over `$request` and `$response`. So I might be biased. (I would still give anything that will end up part of the public API a full name, like `Request` and `Response`.) But I think there is a much better argument against this variant of Hungarian notation: That something is an abstract class, a class or an interface is an implementation detail and in client code I am not supposed to know the implementation detail. Any subclass (and that includes implementations of interfaces) is supposed to honor the Liskov substitution principle anyway so what should I care as a reader if something is a `Filter`, `AbstractFilter` or `FilterInterface`? 
Good point, haven't thought of it that way!
If only they supported Mecurial too
You never pull down the code to test it?
Best news 2019 so far
Could you provide a more complete example? I believe I could respond to that but I am not sure whether I would hit or miss what you mean.
Say we have a post with a title and enabled state. I would agree that a post may be enabled (`if ($post-&gt;isEnabled()) { ... }`). It reads like English. But if an object is supposed to do something how does that concept unify with `$post-&gt;getTitle`? Is the post supposed to go get the title? If we apply normal English then the post would have the title after we told it to go get the title. We wouldn't. Shouldn't it be something like `giveTitle`, `returnTitle`, or perhaps `copyTitle`, since that is what the method _really_ does? I believe the only way to not see a contradiction here is to ignore our intuition by years of getting accustomed to what everyone else did before. The alternative: see methods as messages and objects as recipients that may reply, the whole OOP world makes more sense that way.
If I didn't have the `get` prefix above, I'd have two methods with the same name, one is the action of "opening a channel" the other is fetching (returning, getting) the currently open channel. The situation is not unique, collisions just happens sometimes. We've evolved those prefixes in part to avoid them.
My question for a more complete example aims at the suggestion to change the design. For example I would consider a static (factory) method `Channel::open` instead of `$something-&gt;openChannel()` in order to open a channel. Or I would question the need for a `getOpenChannel` method since the channel seems like something that may be injected as a dependency.
I hope that don’t mind I cancel my subscription in response to this. That’s awesome. 
Nah, I think if we have to change the *design* due to a naming problem, we've really admitted the naming problem is serious, haven't we? In this particular case, opening a channel can't be static, because the object creating channels has injected context, it's an object, so... But to reiterate, we really shouldn't change the design just to work around naming issues.
Live for me right now, had to opt-in to the beta dashboard.
But that is precisely why I would opt to change it, a naming collision to me indicates a suboptimal design. To circumvent the problem by introducing an unintuitive naming convention (that just works because we got accustomed to it) to me is a dirty shortcut.
So you think the design of an object is suboptimal, because in **English, for this particular word**, and unlike most other words, the verb and adjective are spelled the same? Well... honestly not sure how you get there, logically. &gt; To circumvent the problem by introducing an unintuitive naming convention (that just works because we got accustomed to it) to me is a dirty shortcut. The "get" prefix may be everything else: boring, verbose, etc. etc. But it's definitely not "unintuitive". It's literally the industry standard across dozens of mainstream languages. So I'm not sure what you're saying here.
This news can't come soon enough for those sensitive database credentials I accidentally committed last month.
Reviewing usually involves looking at a diff either raw or in a diff analysis program sometimes as part of a group discussion. An IDE also isn't needed when pulling down code to test. Incorporating how a specific IDE functions or assumed to function as part of a development process and/or code standards introduces problems.
I disagree. Unambiguous names &gt; shorter names. 
Wow, I like Gitlab a lot... but the killer feature for me there was the ability to have private repositories. Personally this is a bit of a game changer for me. It's also definitely not what I expected when the Microsoft acquisition was announced...
&gt;Say we have a post with a title and enabled state. I would agree that a post may be enabled (if ($post-&gt;isEnabled()) { ... }). It reads like English. Sounds right. &gt; But if an object is supposed to do something how does that concept unify with $post-&gt;getTitle? Is the post supposed to go get the title? Again, sounds right. $post-&gt;getTitle() will fetch me post's title. Read it as "shut up and go and get that title". &gt; If we apply normal English then the post would have the title after we told it to go get the title. We wouldn't. Shouldn't it be something like giveTitle, returnTitle, or perhaps copyTitle, since that is what the method really does? Everyone will know what $post-&gt;getTitle() does. It is as simple as that, and if you keep all your getX() and getY() in the same place in file, it becomes so easy to see everything object can do for you. What convention you decide to use depends on how much legacy code you have and how many people you work with. 
But very limited collaboration options :(
yeah me too, no reason to pay now, so hope they are ok with that, not complaining tho
I typically prefix boolean variables with is/has. This reads better IMO (x.isOpen vs x.open) and it seems to avoid this issue. 
For the previous owners it was survival business model but for Microsoft costs almost nothing. Good to have it but still fuck microsoft and their billions. 
I've always seen, and used, the latter.
Just because something is the industry standard doesn't mean it is intuitive. Look something like the Fahrenheit unit or Imperial or otherwise non-SI units in general. They were the standard for centuries but the non-anglosphere world changed to something _much more intuitive_ such as Celsius and the scientific world needed something simple to convert and express relations between dimensions so for them just dividing/multiplying SI (base) units is the most intuitive. Standards change slowly. An analogy would be that the law is supposed to follow ethics; ethics may not be derived from law. With that out of the way we have to look at how _intuitive_ `getFoo` really is to someone who isn't already _accustomed_ to getters: $post-&gt;getTitle(); // Hey post, get the title! // Wait, from where? $title = $post-&gt;getTitle(); // And why am I supposed to have the title if // the post was supposed to get it? But: $title = $post-&gt;title(); // Ah, the $title is supposed to be the post title! Also we can still have a collision with the `get*` convention: $warrior-&gt;getWeapon(); // Hey warrior, get your weapon. Although in a case like this `get` may be replaced with `fetch`, `pickUp`, `grab` etc. - but then we are already looking for shortcuts to retain our conventions. Back to your specific case: You still haven't provided a full example so you are not giving me the chance to argue. You haven't explored the possibility that the design might be subpar, you simply skipped over any concerns. To me it is irrelevant whether there is a mistake in the English language (_open_ vs _open_). But to me it is not irrelevant that I as a client of such an object am **probably** (can't prove, you don't give me the chance to) supposed to use it like this: $service-&gt;openChannel(); $channel = $service-&gt;getOpenChannel(); **If** this is the design of the class it is simply broken because suddenly as a client I am not supposed to manage the internals of another objects. Encapsulation is broken. I am now required to know whether the channel was already opened or not. Why doesn't `openChannel` just return a channel? As a user of that class I don't want to care what channel I am provided with. And any other classes I write I can pass the channel via dependency injection. These are my points in addition the already mentioned ones. I'd wish if you address those instead of ignoring them.
I feel bad for Gitlab now, this feels like it will impact Gitlab
I can fully agree with the last part. I am happy to explore new ways but if I have to work with people I have to write code in a way that is understandable for most.
What if you want an incompatible constructor signature?
Yeah. Use the google apps editor to write custom functions. I've used it to import CSV, parse the data row by row and setup into custom columns and such. 
&gt; Just because something is the industry standard doesn't mean it is intuitive. How about the fact a function/method is an *action* in nature, so it's best represented by naming it after a *verb*, hence why methods tend to follow these patterns: verb() verbSubject() verbAdjectiveSubject() In that pattern "get" is just another verb. And omitting it is breaking the pattern, introducing the possibility for confusion when an adjective and verb are spelled the same. Quite simple, isn't it? &gt; Hey post, get the title! Wait, from where? Seriously? It's spelled right there... $fromWhere-&gt;getWhat() &gt; Why doesn't openChannel just return a channel? You keep arguing with the semantics of the methods in my example. The semantics are not subject to discussion. We have two methods with very simple functionality: 1. Perform the action of opening a channel. 2. Return an existing open channel, if any. One changes state, one retrieves state. These are *sometimes* combined in a single method, but it's often better to not mix read and write actions, as it may severely limit the flexibility of use and opportunities for optimization (as you might've heard about CQS and CQRS). &gt; As a user of that class I don't want to care what channel I am provided with. And any other classes I write I can pass the channel via dependency injection. These are my points in addition the already mentioned ones. I'd wish if you address those instead of ignoring them. You're honestly rewriting the scenario I presented. Not sure how this helps you make your point. You might've as well said "as I user of this class, I don't want it to do anything, and I don't want it to have any methods". This is not a solution to the presented scenario. It's just [pigeon chess](https://rationalwiki.org/wiki/Pigeon_chess). Either this, or you're still struggling to understand the example I posited, which is by itself the ultimate proof that naming should better be verbose but easy to understand, rather than short and confusing.
.gitignore
rarely. last time I did it was to change an unit test to see how a function was working. we have acceptance for testing whether stuff works which is done on a staging server
Hah! Indeed.
`notDone()` is an example of a named constructor. [Here is a good description with examples.](http://verraes.net/2014/06/named-constructors-in-php/) Definitely optional. Don't use them if you don't want to. :)
&gt; Isn't that an argument _against_ naming such a method `get*`? I suppose it could be. My thought process was: if a method has additional logic beyond just `return $this-&gt;property;`, then a method name of `property()` seems insufficient. I probably should have grouped it more with point #2 regarding actions/verbs.
So, at this moment i have my private repos at bitbucket and my OSS on github. I have no complaints about bitbucket, but is there any obvious reason to migrate to github ? (besides having everything organized in one place)
(\^ GitLab employee) We still have unlimited collaborators as opposed to limiting to 3, but you gotta do what's best for you man
They have to make “some” money. This is good enough for personal private projects. 
Competition drives innovation!
Check out [https://phptherightway.com/](https://phptherightway.com/) \--- best practices with a decent table of contents.
read the symfony docs.
Gitlab does a lot, but nothing in particular good. Even after the switch to google cloud, still quite some outages. You can not pay per paypal and they only allow yearly subscription. 
Wow now I can save $7 a month. Amazing!!!!!!!!!!!!!!!!!!!!!!
&gt; Gitlab They still have a free CI platform for private repos. That will be hard to give up for some.
The issue with named constructors specifically with exceptions is that they mess up the stack trace, as they get created when the exception is instantiated and not when it's thrown. Not a huge deal, but something to remember.
This is exactly what I was after - thanks!
It’s not a project goal (because it opens up a whole can of worms), but if you care about it Psalm has a type `html-escaped-string` that you can use to denote sanitised output. I’d encourage your to ticket issues/open PRs if you have ideas
I think I was a bit harsh now I've had time to actually think about it: CI Pipelines and Container Registry are probably more than enough reason to stay. It's nice having everything built in, as opposed to co-ordinating various third party integrations.
so I have to install this tool on my server
GitHub user that has always been interested. Keep doing what you do! produce as many cool things that feed your soul and whoever you pay for things in life. Don't worry about competing. I've used GitLab a lil bit too. All the stuff I do, there isn't much benefit from one to the others, but it worked, so the main reason I use GitHub is familiarity and that people ask me for my GitHub. I've certainly nothing against GitLab, it's a cool bit of kit. Things I thought were cool - self hosted version available - open source edition available If I had more documentation and I'd probably switch personal internal things instead of regular git + ssh, but that would be problematic for the business venture unless I was paying for a support tier. What you might be fighting is making a project so good, people don't want to rip you off. Anyway I mean the above as a compliment 
you should scrub history if you commit sensitive data. Oh and change the data if at all possible.
I didn't think you were harsh, just honest! We're overall pretty happy about this change with GitHub tbh, since we've always believed that free private repos are a good thing for the dev community overall. Our CI features are what we're really trying to stand out with, so glad you like them :)
I got to say, Microsoft, you continue to impress me.
why tho?
This reminds me of [visual debt elimination](http://ocramius.github.io/blog/eliminating-visual-debt/) trend.
Outages are definitely our biggest pain point, we've struggled a bit with scaling as our customer base has grown. But our CEO is making a huge push to hire in the areas we've been lacking, so hopefully the increased manpower/monitoring/availability helps us with our uptime
I think CakePHP went this way a few years ago. Not proven a good practice. Last couple of release most of migration guide is about moving from `$service-&gt;value()` to `$service-&gt;getValue()` to `$service-&gt;setValue()` - Rector supports this, but manual migration is really hard. Could sb from CakePHP share some experience on this?
Well thank you so much! In general we see the competition as a good thing, since we legit wouldn't be here if it weren't for our competitors in the first place. It also kinda lights a fire under us to improve more, which is always a good motivator. And, lowkey proud that we (probably) helped drive the change
Good for GitHub. Good for Microsoft. The future is personal data, and they certainly have the funds to pay for it.
I think you might have replied to a bot
then why not use interfaces? that's the worst possible use for a trait, since you can't check if a class uses a trait. I wouldn't call it tool abuse; it's just bad programming! :)
Thats perfect! But how do they plan monitazation? You dont want to tell me that Microsoft wont think about making money?
... said no one ever. 
what language is script editor using? Javascript?
Well, those are very different things. Sure, you can "manage sessions" with both, but there is a lot you can do with sessions that you cannot (or shouldn't) do with tokens. You may actually need both!
Those free hate on Microsoft are so old. Time to move on man
...but you *can* do either of `$foo-&gt;setBar('bazz');` or `$foo-&gt;bar = 'bazz');` ...? `bar` just needs to be a public attribute. getX and setX is just a paradigm. You don't *need* to do that. 
data is the new gold &amp;#x200B;
Bahahaha, come on...Google Authenticator App isn't that bad. To quote a great man, Todd Howard: "It just works." \*slowly backs away\*
&gt;want to know what business cases does PHP really excel at, specifically better than node. building CMS or any monolith
&gt; we legit wouldn't be here if it weren't for our competitors in the first place I never knew about that &gt; lowkey proud that we (probably) helped drive the change I figured as much. Night
use sessions unless you've a good reason (scaling issues for example).
IMO, Node is better at websockets and single-page apps. However, single page apps are bad. For everything else, PHP is better.
Yes. 
Why single page apps are bad?
Well SPA is more of a frontend thing. The api behind can be in any backend, it does not really matter unless you need websocket.
Ohh No...
Your contribution graph (on profile page) can include anonymised private contributions as well, if you choose to do that. That way, the graph is an accurate representation of your activity over time. I think if you move repositories from Bitbucket, the graph also includes activity from before that point (since each commit is timestamped).
Use the magic `__set()` function so you don’t have to trust the user when setting a property.
Usually they suffer from one of a few problems: * Slow. Sometimes a load of DOM mutations is worse than unloading/loading a new page. For example, facebook chugs on some devices. * Slow. Clients want animations on transitions. This is additional slowness. It's ridiculous that a website NEEDS a modern CPU just to browse the web. For example, even on devices capable of playing video 1080@60, the netflix interface goes down to a few FPS. * Doesn't fit the document-oriented model. Network connectivity problems are less obvious. If a problem happens, it leads to a page that doesn't load properly, but nothing indicates to the user that progress has stopped, and a reload is necessary. For example, any site with an infinity-scroll setup. * Doesn't fit the document-oriented model. Those DOM mutations are difficult to do atomically. For example, rarely, I see a youtube page with two videos playing at once, one invisible. 
Convinced me with the stats, might be useful when searching for a new job. Thanks.
True. I mean only in my opinion, Node is better for SPA because it also includes the option for angular.
I was a progressive enhancement advocate at every company I worked for. I changed my mind because of [PWA](https://developers.google.com/web/progressive-web-apps/).
Take my upvote for this answer! Token and session are doing different things. Use both!
You can write your entire application in PHP and use a service like [Pusher](https://pusher.com/), or even a Socket.IO server.
Can you give a use case? That can help give answers based on your goal.
Nice, I'll check it out! Thanks for sharing!
Huh. TIL. I'm surprised that isn't an issue I've experienced/noticed in the past.
Sessions scale if you do them right. 
But what about Bazaar?
That could be considered a bad practrice thou.
Overriding the default `__construct($message, $code, $previous)` is not really an option, since it makes subclassing (which happens a lot, when dealing with exceptions - and yes, that's a proper use-case of inheritance) very messy.
Great, I like GitHub a lot, but all most my personal projects is on bitbucket exactly because in GitHub we wasn't have this feature of private repository. For me as already mentioned here, it is a great feature and game changer.
I though first you need change all your credentials soon as possible. &amp;#x200B; 2 - Stop using credentials directly in the scripts, create a .env file for that and put those sensitive on there. &amp;#x200B; 3 - create a file .gitignore and put this .env on there &amp;#x200B; 4 - try find your commit which has those sensitive data and scrabble it soon as possible.
You could use the bitbucket for free, it's limited for 6 users, but if your company is small or just for you suits like a charm. 
Microsoft it's doing a great job, I don't see the point of so much hate, could you explain to us?
i know this is awesome but how is this related to php!? 
It's true. At night, I become...BATMAN. ;)
If you don’t have a good reason to use JWT (like connecting to micro services that can’t share state via php session storage) use sessions. They’re way simpler to work with and give you less troubles/maintenance/attack vectors out of the box.
The main reason for going with tokens is to avoid persistent storage on the server side. I've documented the advantages at https://github.com/psr7-sessions/storageless/tree/5.0.0#why I've documented the pitfalls at https://github.com/psr7-sessions/storageless/blob/5.0.0/docs/limitations.md Be sure to read both, and make an informed decision based on your own needs.
Hey Kumar, thank you for writing! That library only provides OTP functionalities, mine expands on them and allows you to implement 2FA without much hassle through a simple and well-documented API using an optional account manager - which will be greatly expanded in the upcoming versions by the way. I may upload a step-by-step guide for integrating it to Laravel/Voyager applications soon.
TL;DR: &gt; top things that make PHP a hot trend: - CSPRNG functions - Anonymous classes - Possibility to group import ads - Engine exceptions - The syntax of Escape code for Unicode Looks like an artificially generated article using random sentences. So we can tell in 2019 it will be a trend in blogspamming. 
how to do effective web development in 2019. let me know what steps are missing [https://www.technolush.com/blog/how-to-do-effective-web-development](https://www.technolush.com/blog/how-to-do-effective-web-development)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I still can't wrap my head around API authentication. I'm refactoring a legacy PHP application and everything has been $\_SESSION vars. I was following a tutorial that used a JWT library, and it made sense to me rather than passing the login credentials for every interaction to have a short-lifecycle token that, if invalid, would then require the username+password query. Now people are telling me this isn't the way to go. I still have the PHP mindset from 15 years ago. Desperate for help with it
nice! So does that mean gitlab is getting obsolete?
I see GL jobs advertised. How’s working remotely? 
Here's a [link](https://github.com/goetas/MultipartUploadBundle)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Comeneat provides online food ordering system like Just eat clone,Deliveroo clone,Postmate clone,Foodpanda clone,foodora clone,Grubhub clone,Ubereats clone,food ordering app clone,Swiggy clone,Doordash clone,Eat24hours clone,Zomoto clone.
my post is not a spam. i asked about web development process. it help me to choose right steps to take in web development.
Add another remote and push.
GitHub has a tool for it in the top menu, where you can create new repos, theres also a button for importing them
Yes and no. Running horizontally scaled out Master-Master databases is extremely difficult and very domain-specific depending on your consistency needs, but that is not really the domain of Kubernetes to which this article was written about. Pulling a figure out my ass, I'd say for every 10 applications, 9 of which would benefit more from a combination of back end and front-end caching far more than they would horizontally scaling the DB.
Self managed is why I'm staying with GitLab! Best "feature" in my opinion.
Tools go in and out of style but I doubt they will regress technologically.
&gt; facebook chugs on some devices. * all Facebook is the best example of what not to do on the web.
Google really should use that concept on their Admin, Play Developer Console, Firebase Console etc because it takes like 10 seconds to load a single page on either of those services.
&gt; **FATAL ERROR** Uncaught Error: Cannot instantiate interface FileSystem I see both sides to this talk, even if I'm more leaned towards having the interface suffix in the name it's not too much of an issue.
I have yet to find a good use for traits either way, especially since traits in PHP don't have any way of know what type of object it belongs to at any given time.
&gt; Nah, I think if we have to change the design due to a naming problem, we've really admitted the naming problem is serious, haven't we? It is kinda-sorta the point of Domain Driven Design: by interacting with your domain experts you define a Language for your domain. This language is what is implemented. And when you learn knew things and change the language it usually mean you have to refactor things.
What can of worms? If you have time to elaborate.
[Stop using JWT for sessions](http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/), and the associated followup [Stop using JWT for sessions, part 2: Why your solution doesn't work](http://cryto.net/~joepie91/blog/2016/06/19/stop-using-jwt-for-sessions-part-2-why-your-solution-doesnt-work/) for the inevitable "but what if I did X" replies. TL;DR: use sessions for your sessions.
&gt;Wow, I like Gitlab a lot... but the killer feature for me there was the ability to have private repositories. Personally this is a bit of a game changer for me. We use a mix of Github and Bitbucket in work, I have a few personal projects on Gitlab but nothing major. Even so, I can safely say Gitlab as a complete product is lightyears ahead of the above mentioned in pretty much every department. The fact Github has only now offered one feature Gitlab has always had doesn't make me want to jump ship or recommend it.
&gt;I feel bad for Gitlab now, this feels like it will impact Gitlab Gitlab is lightyears ahead of Github in every department, Gitlab has an entire development ecosystem built in, for free. Github isn't even close.
Is github actions similar to gitlab CI/CD?
Mainly, you download a few MB vs a few KB at a time
We typically use traits in concert with interfaces where child classes’ inheritance relationship isn’t congruent.
incompatible with what? constructors do not need to conform to the parents signature.
god damn, I was ready to put him straight on the "idiots" pile until I came to the conclusion: &gt; If you haven't noticed before, this entire post is just sarcasm.
ugh, named constructors, please stop.
 private function __construct($hours, $minutes) { $this-&gt;hours = (int) $hours; $this-&gt;minutes = (int) $minutes; } public static function fromValues($hours, $minutes) { return new Time($hours, $minutes); } This is such bull crap and you have simply moved the problem you are supposedly solving to a different function...
This is cool. I love the issues on Github. It's easier to track things. I'm using Bitbucket for private repos and Github for OSS. And now the question is should I move?
True sportsmanship!
I'm not going to play your stupid game of strawmans and calling debate techniques. If you want to ignore arguments, fine. However, you might want to rethink &gt; How about the fact a function/method is an action in nature Where is that coming from? A computer doesn't act. A computation is not an action. Do you name your hash functions `computeMd5`? Do you name the function to compute the area of a shape `calculateArea`? Is it (leaving PHP) `Array.reverse` or `Array.computeReverse`? Is `reverse` a verb? Do seriously just squeeze and press the design of your software just to confirm your unfounded believe that functions would be actions? Gosh. Leave me alone.
The constructor is always called statically, so I'd argue the LSP doesn't apply.
Be careful with assuming private github repos will keep your data safe. Their EULA states that they won't guarantee their use of encryption for data transfer. 
Whether you manage the internal state directly or through setters in the strict sense (i.e. methods that just do a single assignment and perhaps `return $this;`) isn't really different. Responsibilities are in the wrong place, encapsulation is broken.
Made this up (they are probably not in a straight hierarchy): class HttpInteractionFailed extends \RuntimeException implements MyComponentFailure { public function __construct(Request $request, Response $response) { // ... } } class HttpInteractionTimedOut extends HttpInteractionFailed { public function __construct(Request $request) { // ... } } The alternative is to have the callee assemble the `$message` (leads to messy exception-related code). I prefer removing the issue upfront: `__construct()` can't be touched, since breaking LSP is really easy when everything is `string`-based. Instead, each exception has named constructors only. A good example of how this implemented is in https://github.com/doctrine/orm/pull/6743 
So you didn't want to limit the inheritance hierarchy by the constructor arguments which I agree is nice for semantic exceptions, thanks for the reply!
no, gitlab offers free private repo with unlimited no of collaborators
PHP just works, you don't need to install anything fancy like node, you never even need to open a console/terminal if you don't want to. I use PHP and python all the time to quickly solve business needs. If a new project requires something weird with almost zero development time, I can make something in notepad and upload to a website/sharepoint/iss and its done. Then when something needs to be done properly, watertight and performant, I can reach for a framework, unit testing etc and do everything properly. Hooking up a system to ldap is super easy. Junior devs can quickly and easily start contributing to a system.
Micro$oft amirite?
&gt; Is reverse a verb? Yes, "reverse" is a verb... You're apparently so emotionally invested in this you missed what I said at the very start: minimal API design is warranted for objects with specific focus, that will be heavily used throughout a program. Then designing them using simpler names, like a DSL, is absolutely fine. But when you write a stateful system (as most are), where most of the methods produce side effects (as most do), then those are "actions", yes. You execute that action, something happens in the object or in the system, that wasn't that way before. Say, when you "delete" a user (pro tip: yes, that's a verb as well), that's an action you did. That user was there, now they aren't anymore. You didn't just "compute" the deletion. It's not just math happening. State is significant in just about any real world program you write, and that affects naming.
I'd go a step further and include the ```npm``` as a huge problem. Why? Well, dependency hell. Every fucking library no matter how large or how small, always have tons of dependencies with it. Hell, most of the packages i've seen use a package that does "toLowerCase()" on strings which is built-in in the god damn language since IE6 days but no ... let's use a bloody package. And what was that NPM hack attempt from some months ago. Some hackers gained access to some package that millions of libraries depend on, adds a crypto-miner in it and developers worldwide were shipping someone's crypto-mining bullshit. I'll take none of that, thank you very much. Javascript world is one huge mess. You have package managers for package managers and packages with thousands of dependencies and developers keep going down that spiral until something inevitably breaks and everyone is like that infamous shocked Pikachu meme. Jesus fucking Christ. 
Why monolith and not microservices?
 &gt;We use a mix of Github and Bitbucket in work, I have a few personal projects on Gitlab but nothing major. I like Bitbucket too; and I've got used to the redesign. Their CI Pipelines are pretty sweet too. I only noticed it yesterday - so haven't used it yet - but Gitlab once again wins though due to the container registry. I think Gitlab have pushed their competitors forward tbh.
that's not a question
I think it comes down to what you are building and comfortable you are with the tool. PHP is great for building and can do almost any business for that. But PHP would be a terrible idea for building a mobile application. In regards to the web development, the term "excel" is really about the developer. If you excel at node but are a complete beginner at PHP, what you build in node will easily be several times better than PHP. And vice versa for any language.
It looks like it might well be, I'm not part of the beta so can't try it out - but it certainly looks it.
I'm currently trying to learn PHP and I understand that there are two ways of concatenation. `$age = 23;` `echo 'His age is: ' . $age; //single quote` `echo "His age is $age" //double quote` &amp;#x200B; Now, with $\_GET, lets assume i have this URL "[www.website.com?name=Jeff](https://www.website.com?name=Jeff)". I would like to output Jeff in a string. The single quote method does work, however, `echo "His name is $_GET['name']";` doesn't. It only works when I interpolate that variable. `echo "His name is {$_GET['name']}";` What is the difference? When do i know when to use what?
best off asking in /r/PHPhelp
Interesting take, but the ability to use headers to control requests/responses makes REST a good fit for more complex APIs. If I understand this blog post correctly, sockets does not allow for any headers to be sent for requests?
Okay I will. What is the reason behind this?
Also CI.
No, it's just another indication that the submit post hidden field on here is stupid.
`echo "His age is $_GET[name]";` 
Generally because users can't be trusted. They could dump all kinds of stuff in there like malicious Javascript and your server would spit it out on the page. It's just rife for doing dangerous or unintentional things and should generally be avoided.
They target enterprises and businesses in general. Github is likely to be less of a money maker on it's own and more of a value-add to their other products, making more people sign up to their Azure platform as better integration gets developed between Azure and Github.
Read up on XSS
That's why I keep trying to introduce Upsource to places I work at. I *want* to review in my IDE, or on a site that's got the code inspection features of an IDE if I can't be assed bringing my IDE up
I know XSS, but didn't know it was because of this.
Well, so it seems this is the same things as textContent and innerHTML for JavaScript. How do i then avoid it or what is the usual process to use the $_GET variable to retrieve values?
I personally end up using `throw new SomeException()` in my personal projects, but I've seen `throw new UserNotFoundException::withId($id);` and `throw new UserNotFoundException::withEmailAddress($email)` in previous workplaces before and actually quite liked it. It seemed like a nice way to group the different ways an exception can be reached. Sure, you could just do `throw new UserNotFound('email', $email);`, but I did like having them defined as functions. It seemed clean
Well, that seemed to work, but why does is it for strings without single quotes and for assigning it to a variable with single quotes? `echo "His name is $_GET[name]"; //for string` `$name = $_GET['name']; //for variable`
also valid: `echo 'His name is '.$_GET['name'];` but be mindful that `$_GET['name']` can contain more than a name, don't forget to sanitize your input before accessing it, and don't forget to escape it properly depending on where it goes (database, shell arg, html, javascript, etc).
I'm just wondering why they removed the old php theme :/ much better than standard reddit theme, and vastly better than the new reddit redesign.
Exactly, didn't even know there was one
I just always wrap variables with the curly braces \`{$var}\`, the other benefit is visibility.
Ok, maybe that's the case I didn't see before. Makes sense now but only in some cases but not all. I think mostly it would be better to use `throw new Exception`
This. It simply seems to me that there are waay to many possible ways this can go right or wrong. I guess I'll do the same as JavaScript nearly has the same setup.
&gt;[www.website.com?filler=to-push-url-far-off-the-screen&amp;name=](https://www.website.com?filler=to-push-url-far-off-the-screen&amp;name=)&lt;script&gt;alert('hello');&lt;/script&gt; But someone could do a `window.location.href=https://scam-site.com/` Or if you insert that data directly into DB, they could do SQL injection attacks. `name=;DROP TABLE table-name;` &amp;#x200B; &amp;#x200B; &amp;#x200B;
Nice. Care to elaborate on why you have developed it? Is it in production use anywhere yet?
My dude. I second this if only because I love the answer of why.
most people who say that have absolutely no idea why. truth is it really depends on what your doing an din many cases it's just fine.
depends on what you're doing. if you're just going to echo it back out to the page use [`htmlentities`](http://php.net/manual/en/function.htmlentities.php).
This is going on because of the Microsoft Data Collection Thing.
&gt; PHP just works, you don't need to install anything fancy like node Well, strictly speaking, php does not work either unless you install it first and install any extensions your apps need. And I don't really see how node is fancier than php though I guess that might be subjective.
A lot of duplicated code, no class organization. 
You can use [htmlentities](https://secure.php.net/manual/en/function.htmlentities.php) or [htmlspecialchars](https://secure.php.net/manual/en/function.htmlspecialchars.php). See [https://stackoverflow.com/a/46491/5770276](https://stackoverflow.com/a/46491/5770276) for the differences.
Yes, it is used in production. &amp;#x200B; It uses makasim/values to describe models so there is no hassling with models \*(de)serialization, hydration, and recursion. It takes an already crafted array of data and sends it [https://github.com/formapro/telegram-bot-php/blob/1fd135d15bebba90a41de1af2985c1f2dadd8ad8/src/Bot.php#L50](https://github.com/formapro/telegram-bot-php/blob/1fd135d15bebba90a41de1af2985c1f2dadd8ad8/src/Bot.php#L50) Same for incoming hook updates, do json decode and init a model at once: [https://github.com/formapro/telegram-bot-php/blob/1fd135d15bebba90a41de1af2985c1f2dadd8ad8/src/Update.php#L28](https://github.com/formapro/telegram-bot-php/blob/1fd135d15bebba90a41de1af2985c1f2dadd8ad8/src/Update.php#L28) &amp;#x200B;
&gt;A lot of duplicated code, no class organization, api methods as separated classes are no go (at least without organization). Could you please go in more details on this, please? Cuz I strongly disagree with you almost on every point. Sure it misses some features. That will come soon. 
Oh, I just don’t want to turn it into a security product, or make any promises therein
For small business, your webhosting and internal hosting is likely going to come with PHP preinstalled, installing additional extensions would be extremely rare for that use case. I used Node as an example, because it requires a lot to get it up and running. By the time you've got a node server set up, you've probably finished the project in PHP.. The learning curve of learning about server management, what a VPS is, acquiring one, getting it all set up is pretty steep if you look at it from the bottom of the mountain, whereas PHP you can get people into it just by telling them "make a file, call it .php and drop it here" and visit the corresponding page in a browser.
Nice, there is a line there setting off my OCD ... return new AraayIterator($this-&gt;data)
It's very close to the original. One must careful not to be tricked. Try this one: [14 Tips to Write PHP Code that is Hard to Maintain and Upgrade](https://www.tomasvotruba.cz/blog/2018/11/26/14-tips-to-write-php-code-that-is-hard-to-maintain-and-upgrade/)
I always use normal string concatenation to add in an variable into a string because of readability. I think that using one version and keep to it is the best way. The alternative method I think about is printf or sprintf which also gives good readability and formatting controls.
Is this an internal or external API? What are you storing in the JWT? /u/NeoThermic posted a couple of good links that outline it in more detail. But here is a short illustration on one issue. &amp;nbps; If it is an external API, then I assume your user has: * to authenticate to receive a token * pass the token to authorize resource usage &amp;nbps; Which is all good as long as you don't store any type of sensitive data in the JWT, since they can be decoded and read by anyone. &amp;nbps; The main problem you now have is this: You have a user that has a compromised token, what do you do? You have no way of outright invaliding a JWT token. * Check the status of the user on each request? Kind of defeats the purpose of not wanting to require a credentials query * Set a TTL in the JWT token? Short TTL, you now have the inconvenience of having to re-auth frequently. Or design some sort of token refreshing, at which point you should just go with OAuth. Or set a long TTL, and now you're back to the issue of not being able to invalid it. 
For API authentication you should not use sessions. Your approach is perfectly valid, if done correctly. There are just two pitfalls to remember with JWT: normally they are not encrypted, so they can be read by clients and tokens are not revokable without extra server-side work (blacklisting)
laracasts.com has tutorials on PHP alone.
I can see imports of the same functions on few classes, I would usually go with some kind of basic class and extend it at this point. The constructor looks almost the same in few of them, surely it could be simplified. In time with more entities and methods added everything will be on same namespace level... 
&gt;Okay I will. What is the reason behind this? Please don't underestimate this advice. All GET params are coming from the user, even if you hardcode them yourself into your script the user can alter them very easily. Rule 101 never trust user input and GET params are the easiest input for users to alter to manipulate your application. Always escape before outputting any user submitted data to a page.
Grumphp [https://github.com/phpro/grumphp](https://github.com/phpro/grumphp)
* No unit test, no one knows what your code does and you don't know if it does what you expect. * Interfaces add contracts to the classes that implement them, having an empty interface is useless. ([https://github.com/formapro/telegram-bot-php/blob/master/src/ReplyMarkup.php](https://github.com/formapro/telegram-bot-php/blob/master/src/ReplyMarkup.php)) * You tried to use a strategy pattern with the markup classes but failed. * Package \`[makasim](https://github.com/makasim)/[values](https://github.com/makasim/values)\` should be replaced by a proper serializer in case is needed. Adding a hard dependency on your project to finally handle everything as an array, literally this doesn't make any sense. This needs a complete rewrite. * You don't have any exception handling at all. * Magic strings like \` self-signed-cert.pem\` or \` [https://api.telegram.org/bot%s/%s\`](https://api.telegram.org/bot%s/%s`). Use DotEnv files or anything like that. * Use dependency injection for components like Guzzle or values that can change through environments. I guess there are more, but this is something you can start with. &amp;#x200B;
I can't tell you the exact reason why, but $\_GET is an associative array, and $name is a variable. In your associative array, the key is a string, so you don't need to put your key between quotes. However, with multi-dimensional arrays, this doesn't work, and you have to use the simple quote way, by not putting your variables and arrays between quotes.
Welcome to php (both seriously and sarcastically). When accessing an array in code, you always have to use single or double quotes (which ever you prefer) on the name of the array index, like $array["key"] In your example, you are including it in a string using a technique called string literals and the rules there are different. See http://php.net/manual/en/language.types.string.php
Concatenation (joining strings together): `$name = $_GET['name'];` `echo 'My name is ' . $name;` Interpolation (squirting variables into string): `echo "My name is $name";` `echo "My name is {$name}";` `echo sprintf('My name is %s', $name);`
Not the OP of the comment, but I'd like to provide some helpful feedback and criticism. I think their `duplicated code` statement is a comment on the code not being very DRY. A lot of the classes include the following: private $values = []; private $objects = []; And (as they mentieoned) import: use function Makasim\Values\get_value; In theory, this could be simplified into a single Trait that they all use. Further, each class seems to use "get_value" a lot and in farily similar manners. So within this trait you could create: private function getValueOf(string $type) { return get_value($this, $type); } Then all your class-specific methods would use this internal function. It may not seem like a huge difference, but it does keep your code a bit more DRY and allows you to be more agile if you wanted to swap out/remove the `makasim/values` package. This is just one example of where things could be more DRY and less duplicated feeling. In regards to their `no class organization` comment, I think this is simply because every Class is in the root folder. I haven't looked into it enough to say what/where, but I assume things could be better organized into sub-namespaces. Finally, I think `api methods as separated classes` is a valid complaint about how users have to interact with the library. For instance, the current structure requires the end-user to import every class they need to touch for their goal. A more friendly approach may be to have the `Bot` class, or a new one, expose all of these classes and functionality via a public API. Will provide an example of this last one in follow up comment.
&gt; For API authentication you should not use sessions One can often read comments like the one I quoted, but there's almost never an explanation included that explains WHY. So, why shouldn't one use sessions for API authentication? What stops one from implementing an abstract interface that can work with sessions, JWT's (OAuth2, OpenID Connect or custom scheme) or even SAML's XML as a token? What if I have a tiny API that only my own UI uses? Why shouldn't I use sessions? &gt; normally they are not encrypted That's why we have TLS. It's not a problem with JWT but with the person who decides to use JWT over plain-text protocol. &amp;#x200B; &gt; so they can be read by clients That's not a pitfall. The issue lies in leaking tokens to services or people who aren't intended bearers. &amp;#x200B;
So for instance, right now this is the example code to set a Webhook: &lt;?php use Formapro\TelegramBot\Bot; use Formapro\TelegramBot\SetWebhook; use function GuzzleHttp\Psr7\str; $bot = new Bot('telegramToken'); $setWebhook = new SetWebhook('https://your.app/telegram-updates-hook'); // uncomment if use use self-signed certificate // $setWebhook-&gt;setCertificate(file_get_contents('/path/to/self-signed-certifcate.pem')); $response = $this-&gt;bot-&gt;setWebhook($setWebhook); echo str($response); Personally, I feel that as a user, the following would look a lot better from a code perspective. And provide a better/easier user experience: &lt;?php use Formapro\TelegramBot\Bot; $bot = new Bot('telegramToken'); // uncomment if use use self-signed certificate // $bot-&gt;setWebhookCertificate(file_get_contents('/path/to/self-signed-certifcate.pem')); $response = $bot-&gt;setWebhook('https://your.app/telegram-updates-hook'); echo $response; // Or if there's a good enough use case, let user control the response // and stick with the current strategy. However it requires users to // import the Guzzel `str` function. // echo str($response);
How do you generally deal with the session locks? The locking is usually what concerns me when I use PHP sessions. OTOH, the behavior without locking can be unexpected. 
Maybe unrelated, but do you know of any (open source) tool that checks for tainted strings and other security related issues?
Nope. People pay money for those sorts of things!
That. 
Thank you guys for your feedback. It is duplicated on purpose. DRY is about knowledge duplication, not the code. There is a trait [https://github.com/makasim/values/blob/master/src/ValuesTrait.php](https://github.com/makasim/values/blob/master/src/ValuesTrait.php) and [https://github.com/makasim/values/blob/master/src/ObjectsTrait.php](https://github.com/makasim/values/blob/master/src/ObjectsTrait.php) 
We do think this is probably their response to gitlab-ci, but it's just speculation on our part of course. Which like, as a company rep, I can't help but be a little nervous about it. But as a (former) developer who used to work for a company that just would not adopt any CI/CD practices, if they come out with a tool that's easy to use then it's probably good for development overall. And also would force us improve more too
It's honestly amazing, but I'm fairly introverted so it works for my personality type. I also just think asynchronous communication is superior. However I used to work remotely every so often at the company I used to work for, and it is a huge difference working for an all-remote company vs just being a remote worker (if that makes sense). Everyone knows the struggles that you might go through, so they're all very supportive. &amp;#x200B; Idk, we have a lot of stuff [on our blog](https://about.gitlab.com/blog/categories/culture/) about it if you're interested!
We're discussing best practices, not hard requirements.
There is soo much wrong with this... il'll point out what infuriates me. public TodoId readonly $id; So you created a class, to hold the TodoId, an integer. You created an int type class to store an int. Reinvent the wheel much. Following this you would have to make a new class for every repo your app would need and then you would need cast that to an int if you ever wanted to use in php function that accepts an int. Or would you reinvent the wheel again an create classes to access TodoId for these? and do it for all other repos in your app. &amp;#x200B; Ya didn't think so.
an "incompatible constructor signature" does not exist in PHP, and I've never seen it in any style guide or PSR or whatever. Why would you put this as a "best practice"? is there anybody noticeable who ever advocated for this?
&gt; Why would you put this as a "best practice"? is there anybody noticeable who ever advocated for this? Having worked with projects that did fucking things with their exception constructors (i.e. `(string, array)` instead of `(string, int, Throwable)`), and trying to pass a previous exception then getting a silent failure, I'd be the advocate for this if nobody else well. It's fucking annoying to work with exceptions with incompatible constructors. Do your fucky things that deviate from the base Exception classes in a static factory method instead.
What business problems would this code be used to solve?
I just want to say that I appreciate how you gave a thoughtful critique on the drawbacks of single page applications. As someone who is a fan of SPA, I agree with your points entirely. To anyone questioning these points I implore you to simply utilize the new Reddit SPA. The Reddit SPA uses far less bandwidth than it's predecessor, yet it always *feels* slower. It feels like a sub par experience and much of that is owed to the problems /u/adragons has listed above.
Very nice - any chance of getting unit testing in place?
Seems like you missed all of my points completely. ¯\\\_(ツ)_/¯ I tried tho.
&gt; eCommerce &gt; simple Pick one
2 in 1
You appear to be lost, and not just on reddit. But since that is the most help I can give you, please look at r/hiring
How are you benchmarking the router in term of being "faster"?
Sidebar rule #4: No help posts (not including discussion). /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). A good rule of thumb is that if you're asking how to do something, instead of why something's done, or how to better do what you're already doing, you're probably asking for support.
Some background, I've been writing about Microservices and use of functional programmings. I've also been looking at Librares like: [http://www.mibsoftware.com/php2cpp/](http://www.mibsoftware.com/php2cpp/) Given the size of the programs are relatively small and straightforward in functional programming, is it practical to turn this into C++ code for performance improvements?
I expected some sort of weird analysis using ML based on the title. Nope, just trying to bait some clicks by misusing an industry term. Spoiler alert: one-paragraph descriptions are not “deep learning”
No but check out hipHop
The issue is future version HHVM are no longer support PHP but Hack.
It's just the most popular app that deals with RFC4226 and RFC6238. There's also [FreeOTP](https://play.google.com/store/apps/details?id=org.fedorahosted.freeotp&amp;hl=en) I use both, I see no functional difference. Internally, I don't have any idea how either keeps the secret used to calculate the hash. 
Check Phalcon then if you still want to stay in php otherwise I recommend you take a look at Elixir and Phoenix for speed
&gt; What if I have a tiny API that only my own UI uses? Why shouldn't I use sessions? Even a tiny API might be later distributed to multiple machines. Say you have an endpoint /video/encode that takes a lot of resources and you want to move only that endpoint to another machine. If you opted for sessions, because you thought that "Eh, it will only ever run on one machine, so wtf" you need to do some major re-engineering, either eliminating sessions or setting up message queues or whatever, while with JWT you can use as many machines as you want and any one of them will be able to authenticate the user. &gt; That's not a pitfall. Yeah that's right, it is even often useful if you know the claims on the client side. It's just something to keep in mind.
So general scaling: Use a DB, even MySQL will work - just when your needs grow, then you switch to like Redis or some other solution. Locking: Depends on what you are doing. The session\_start() will lock it, to make it unlock do session\_write\_close(). Or if you don't need locking on a script and no session is needed, don't do session\_start...
I doubt that some kind of automated conversion will have good results, since C++ has different data structures and ways to handle logic. If they're simple, why not to just rewrite them in go and run without any layers on AWS Lambdas? 
I'm looking for remote work. Contact me 832-303-9477
yeah, doing that and using /u/artib25 remote change when dealing in repos that aren't up to date. thanks
Can you help us understand where is the bottleneck you have precisely with PHP microservices? You see, tons of microservices are written in the likes of Python around the world, and modern PHP is actually *faster* than Python. So script speed was really never a general issue here. Sure, PHP sucks at *specific* workloads (pure computation etc.), but most microservices do I/O, i.e. read input, validate, contact DB and disk, contact APIs, produce output. PHP is quite fast enough for the job. Converting to C/C++ won't help you and we have the empirical evidence: Facebook's HPHP. It was initially a PHP-to-C++ convertor. It gained speed in some areas, lost speed in others. Soon they realized they need a VM to run PHP code efficiently, converting it to C++ was abandoned. And then the original Zend based PHP got some optimizations, and became faster than Facebook's VM. Moral of the story? No silver bullets. Let us know where how and why is PHP slow for you, and we'll help you to make it faster, OR suggest how to use PHP with other libraries and languages. 
Thanks! And there is no real bottleneck problem that I am having, I am trying to develop best practices around PHP as Microservices. Per your point above, many services are written in Python, yet PHP7 has proven to be several times faster. But dev shops still do things like have an API or main site in Laravel and then services in Python and unnecessarily increase their overhead by having to support two languages when there is no clear advantage unless they are doing something around computation. My own personal opinion (be it right or wrong), I feel microservices are misunderstood. For example, when researching PHP Microservices, results like Lumen, Slim or \[insert framework here\] are discussed - but microservice can exist, and might be benefit with having no framework. So long-winded way of saying I'm trying to set the tone of what are microservices and what are possibilities and best practices when writing them in PHP. Converting to C is an idea I am playing with.
cool man, good luck with that
My stack and deployer is setup with GitHub and I don't program professionally. My day job is analytics technology dude and moonlight programmer. Thanks for the suggestion though, ill continue to use GitHub
GraphQL is pretty great, I'm glad someone is working on a php implementation, keep up the good work!
&gt; But dev shops still do things like have an API or main site in Laravel and then services in Python and unnecessarily increase their overhead by having to support two languages when there is no clear advantage unless they are doing something around computation. I wouldn't say it's overhead. Multiple languages is almost the norm with microservices. Typically, the API and the site are two separate teams. One prefers Python, the other PHP for the site, if both are PHP but the API is a separate service, you get basically the same overhead. &gt; My own personal opinion (be it right or wrong), I feel microservices are misunderstood and made unnecessarily complicated. For example, when researching PHP Microservices, results like Lumen, Slim or [insert framework here] are discussed - but microservice can exist without frameworks, and might be a benefit creating one without a framework. Yes they can exist without frameworks, it's just "an isolated piece of the puzzle that talks to other pieces over pipes and sockets". In general you only need microservices when you need full isolation. Full isolation so it can be a separate team, separate language, separate framework, separate machine (or machines), separate scalability, separate backups, separate updates, etc. etc. If you don't need at least a few of the above, you don't need a microservice, really. Jumping in with microservices too early in the project is harmful, it is unnecessarily complicated, no matter if all services are PHP or not. Likewise for C. I propose you write it in PHP and think "language neutral API". Then if need be, *ever*, you can take this API, and implement it in any language directly, no need for conversion.
Sorry by "overhead" I mean more from a business perspective. My background is mostly in startups where there isn't the luxury of having separate teams. Like having a small team of like 8 people with sharp deadlines and limited resources requires an understanding of the tools, best practices and conventions used in each language. If there isn't an obvious or compelling benefit for using one language over another, its just more work for the startup. 
Well, as I said if you don't at least several of the "separations" you cited, and "separate teams" was one of them, then most likely you don't need separate services (yet). So in that case it's best to keep it a single process, single app, but with well-defined "API" lines, so in the future you could cut there and split in services (and *then* you could rewrite in another language, if you need to, and only when you need to).
Hi jumpin in on this again, this [remote-work focused livestream](https://twitter.com/Vlokshin/status/1082730109289652224) with our CEO was just announced! Might be a good thing to watch if you're interested
Thanks! Added a reminder to my calendar.
What I've looked at so far is the [list of most recent bugs for 7.3 on bugs.php.net, including closed bugs](https://bugs.php.net/search.php?cmd=display&amp;order_by=id&amp;direction=DESC&amp;limit=999&amp;phpver=7.3&amp;status=All&amp;reorder_by=ts2). Ondrej has [patched](https://launchpadlibrarian.net/401837625/php7.3_7.3.0-1+ubuntu18.10.1+deb.sury.org+1_7.3.0-2+ubuntu18.10.1+deb.sury.org+1.diff.gz) two bugs since 7.3.0 was released: [Infinite loop in preg_replace_callback](https://bugs.php.net/bug.php?id=77193) and [OPcache optimization problem for ArrayAccess-&gt;offsetGet(string)](https://bugs.php.net/bug.php?id=77275).
Give this a try, you can also do functional and acceptance testing with codeception. https://codeception.com/for/wordpress
I guess I'm going for special chars since the languages I use have special chars as ö, é, å, æ...
Microservices are the Flash Plugins of 2025 SCNR
Been using it in test / dev on code which is running live under 7.2. No problems so far ...
Problems with Xdebug compatibility. They might be resolved with the next Xdebug release. 
This is the main thing holding me back at the moment. 
Generally speaking sessions don't need to be locked. They should only contain very specific identifier information, such as the logged in user id, and everything else should come from the database (or other storage method). If a user logs out their session should be destroyed and the id should be regenerated, and when they log in the id should be regenerated, so there's no chance for overwriting information in the session. What unexpected behaviour do you experience without session locking?
Sessions can be stored in Redis, thus allowing multiple web servers or internal services to access the same session data for authentication information. They can also be stored in the database as well, or multiple external services can authenticate against a central service (e.g. OAuth).
Lol they did a good think but fuck you lol what?
To add to /u/ImSuperObjective2's point I have two questions: 1. What problems are you actually trying to solve with microservices? Both technical and business wise. 2. What problems with PHP microservices are you trying to solve by converting to C++?
Album of screenshots using `-v`: https://imgur.com/a/wBb84bR Illuminate\Database\QueryException : SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 1000 bytes (SQL: alter table `users` add unique `users_email_unique`(`email`))
microservices are about scaling people. there is no need to scale such small teams so try hard to avoid microservices unless you really know what you're doing. you cant compare php and c. i would recommend that you should give it a try and spend some time writing a microservice in c. i guess you will learn quite soon, that it's not a good idea. topics like configuration management, logging, circuit breaking are really hard and necessary for for microservices. &amp;#x200B; &amp;#x200B;
1. Write the best practices for how small teams can get started with writing microservices with PHP. Framework vs non-framework, API Gateway vs Sockets, etc 2. My own personal curiosity of just pushing the limits of the language. The tutorials I have written are based on what I've been able to achieve with a team of 2 people. We were able to write and scale a system compromised of 15 microservices in a way that was easily manageable.
&gt; requires unsupported PHPUnit version Ignore the docs. Using PHP 7.3 and PHPUnit 6.5.13 right now. Not the latest and greatest but supported just fine. &gt; PHPUnit but documentation is sparse Do this to get better IDE auto-completion: http://kizu514.com/blog/write-unit-tests-for-your-wordpress-plugin-using-phpstorm-code-completion/ Look here for examples of how to do stuff in WP: https://github.com/WordPress/wordpress-develop/tree/master/tests/phpunit/tests A world of cringe, but if you work in WP it make sense. 
The opcache bug caused serious issues for a personal side project. I ended up reverting back to 7.2 and will wait until 7.3.1 to try again.
manual testing vs test-automation [https://www.technolush.com/blog/manual-testing-vs-test-automation](https://www.technolush.com/blog/manual-testing-vs-test-automation)
It's not the technicalities of sending email that are hard. It is domain reputation (yeah, among other things) that'll bite you in the ass, especially if you don't segment your transactional email domain from your business email domain as your transactional emails could get your primary email domain blacklisted if you fuck something up.
let's look at this. why you must upgrade php to 7.1 and above [https://www.technolush.com/blog/why-you-must-upgrade-php-to-7-1-or-above](https://www.technolush.com/blog/why-you-must-upgrade-php-to-7-1-or-above)
A couple of quick thoughts for your consideration: In `ReadTime::get()` you’re exposing the estimate data structure outside of where it is generated. If, for any reason, you need to change your data structure, you open yourself to another point in your code you have to maintain. I will grant you this is a trivial example, but it points more toward a habit of good practice. You could instead have the ReadTime::estimate()` method return the `read_time` property and ~~either keep the `get()` method clean, or~~ remove it completely since now `estimate()` returns the value you want. And if the data structure changes, you’ve reduced the code that needs to be potentially changed. I hope that made sense. The idea is to keep your API simple and easy to understand. Also, a generic method name like `get()` doesn’t really describe exactly what is being gotten. Am I getting the read time? Or the hours? Minutes? Some combination? Something else? I have to read your code to find out. Also, the name `get()` infers a read operation. But it in fact changes the state of the object. It has side effects. The more I think about it, the cleaner and more concise your API would be without the `get()` method. The `ReadTime::ltr()` and ReadTime::rtl()` methods both take optional booleans to disable LTR and RTL text direction, respectively. But, they also achieve this same functionality because they compliment each other. In other words, why would I call `ReadTime::ltr(false)` when I could call `ReadTime::rtl()`? In fact, passing `false` infers I’m disabling the respective text direction, but not necessarily that I’m enabling the opposite direction. I had to read your code to be sure of the side effect. You could document this, but now you’ve added an extra maintenance burden on your code. Don’t take this the wrong way. From one developer to another, this is meant to be a friendly code review. :)
Thank you for the honest constructive criticisms. I'll be happy to take a look at the code and see where it could be improved.
I've been running it on my dev box since one of the late RC releases in preparation for an upgrade of a work project. The work project ended up getting bumped to 7.2 instead of 7.3 mostly for reasons of package availability in prod, but 7.3 has been just fine so far. I do worry about XDebug a bit, though I think one of the recent releases now claims support for 7.3.
DKIM and SPF are pretty much required if you're doing this. Pre-negotiate with your hosting provider ahead of time as if your servers act disreputably they'll quickly find their entire IP range added to spam lists.
Well, many companies run their own mail servers. There are basically 2 things to keep an eye on: - make sure that your DNS mail records are correct (DKIM, SPF) - you are not sending spam (there is a way to opt out and all addressess are voluntarily given to you by clients). Otherwise many mail services will just block you. Check your emails with https://www.mail-tester.com/ periodically. 
It has been fixed now.
Thanks!
What is CABBAGE?
I know how to bulk mail on the darknet.
&gt; boss is not too keen on trusting it as it is unofficial I was drunk when I wrote runkit, and I was high when I pushed it to PECL. Your boss shouldn't trust it, period. Seriously though, there's no such thing as "official" when it come to open source. That extension really was written by one person scratching an itch, who then gave it to another person to continue scratching, who then got bored scratching it, so someone else picked it up. If they think any other piece of OSS (or commercial software) is any better, they're grossly mistaken.
I haven't been able to get xdebug to run with my rat trap configs in conjunction with PHPUnit that "worked" with 7.1. Admittedly, that may have some to do with my rat trap configs.
I use prophecy or Mockery for mocking. The only thing they don't do is mock internals, but you can extract internals to adapters and mock them. 
The hardest thing in my experience is each mail providers rate limiting. It is totally different for each one. Email Severs like postfix and exim can do auto retry for a number of days, but you don't want to ruin your reputation, so it is good to setup rare limiting per mail isp with as many queues for each as you need. It may be that you can get away with it at that level if traffic, but really make sure running afoul of rate limiting doesn't ruin your ip and domain reputation.
Or Ratchet if you want to write your websockets with PHP, or laravel-websockets (which uses Ratchet internally) if you want a Pusher compatible API
While it might be officially "unofficial", anything maintained by TysonAndre is guaranteed to be well-cared for. 
WhatsApp +917448241009
I would recommend mailgun
Adding on to /u/Gipetto, it is also the domain reputation of all the users of the shared host. Since it is a shared host, the IP address is more likely to become abused and put on blacklists. If you really want to self-administer the email lists, look at mailgun or sendgrid. You should be able to send 50k emails in a month for $20-$30, as long as all the emails are legit.
After having read the article, please explain to me why PHP is no good for single page applications? You can make a JSON API in any backend language, the only thing you’d be missing out on is server-side rendered first loads - and these are considered fairly advanced to setup in SPA land, so most people don’t even bother. Superficial article. 
Garbage content. This lacks substance and looks like it was written by some student with very little applicable knowledge.
Most used backend handler Express has 49 dependencies which can be seen [here](https://npm.anvaka.com/#/view/2d/express). You can check for other dependencies too. They are really not doing their jobs.
XenForo 2 is badly broken on PHP probably due to opcache. I've actually had those issues firsthand before I read about them. Developers recommend rolling back to PHP 7.2. More info: https://xenforo.com/community/threads/xenforo-2-0-12-released.157685/ https://xenforo.com/community/threads/php-7-3-0-issues.157481/
Well, given the only two PHP's drawbacks just do not exist - there is no such thing as mixing PHP and HTML in the modern PHP and there are a lot of tools for async PHP (PHP-PM, React, Swoole) - then PHP is the indisputable winner.
[Format-HTML-in-PHP](https://marketplace.visualstudio.com/items?itemName=rifi2k.format-html-in-php) solves a big problem
This article misses the main points and therefore is just a half-assed blogspam. Reported.
Who needs an slow IDE when you have Docker, PHP Xdebug, VSCode Chrome Debugger Add in all the standard PHP + JS extensions and now you have a real development environment and your editor is still fast. Plus if you decide you want to use Vue, React, Typescript, Flowtype you are not limited. How is this still even a discussion?
Being drunk/high yields the best libraries 👌
Xdebug 2.7.0 will support php 7.3 Its currently at beta1 Tried it yesterday via pecl all was fine for a while but my local nginx started throwing 502 errors that i couldnt debug when the extension was enabled
opcache on crashes PHP almost every time. had to disable it. Everything else seems to work fine.
Been rock solid for me, but the application I maintain isn’t terribly complex. 
Yeah. 2.7.0 is very crashy with 7.3 at the moment. 
[https://php.net/uopz](https://php.net/uopz) is an alternative ...
I suggest checking out Sendy.co one time cost, then it just uses amazon SES. 
That explains Doctrine.
His classes using the same behavior to control their values might be a reason to use a trait for but it is way less critical than having duplicates of your business logic, which imo is the main reason that DRY tries to tackle. 
Agree on the first, disagree on the second and on your conclusion. Coming from a PHP old schooler.
It explains most of my work, but I didn't design Doctrine, I can only estimate that the authors were drunk/high.
Like zimzat pointed out, you can scale sessions - the implementation detail can vary: \- you can use Redis / Redis Cluster \- you can use relational database / nosql \- you can opt in to have a pure cookie-based session, with encrypted and signed data inside the cookie &amp;#x200B; Issue of scaling sessions is solvable. Mechanism behind JWT is excellent, but implementation is what's lacking - people store JWTs in insecure locations and mishandle them, thus opening gaping holes in their apps. I mentioned that you can implement an interface in your API that can deal with sessions and JWT, making the mechanism behind authn/authz abstract and pluggable. IMO, it's better to focus on what the API should do rather than implement token-based access that you don't fully understand. Reason: doing so definitely leads to huge mistakes.
Well, the conclusion is a sort of mocking but what's wrong with the second one?
Why do you totally ignore coding standards like \`psr-2\` for example?
Second question why do you need the following comments in the code `/** * Import classes */`
Ok, fair enough on the conclusion. But ReactPHP and Swoole are really new technologies without wide-spread adoption (aside from China apparently) and are therefore \*still\* pretty marginal. That might change in the future, but for now, if you need to do async, it's safer to go with NodeJS – because it's literally built around this premises, because it's been around for years, and because it will be easy to find developers familiar with the technology.
Seems like you import global symbols which are classes but not functions, wouldn't be more consistent to also import functions?
Well, they'd remain marginal for sure, as being useless for most PHP apps, but it seems you are right on the maturity. PHP-PM first release is just turned 1 year today, and I haven't heard of it since. Though we are going to try it at our company and I will have the first hand evidence.
Cool, good luck. Make sure to just try it on a small project though, don't commit to it for a big &amp; important project unless you know it will be around for another 10 years. I made that mistake once with the Yii 1 framework (say what?) and now I'm still stuck with it.
[http://y2u.be/DHd\_\_ELe5nI](http://y2u.be/DHd__ELe5nI)
For anyone that might care. Docker for windows now ships with K8s. You need hyper-v to run Docker for windows (which basically means you need the pro version). &amp;#x200B; It's made my life a lot simpler for local dev with K8s, with Minicube being the alternative option.
Well using just a different process manager is not that global move. It can be enabled or deiabled without affectiong the codebase. Which is currently Symfony 3.4 and we are planning to migrate on 4.
Or any PHP code for that matter :)
Exactly my thoughts. From the way the article is written, it's clear that the author has no experience at all. Many statements aren't backed up at all and completely wrong, examples: &amp;#x200B; &gt; PHP was created to interact with the [traditional/relational database](http://www.ntu.edu.sg/home/ehchua/programming/sql/relational_database_design.html). That’s the reason it works so well with MYSQL, PostgreSQL and MariaDB. No.. it wasn't **created** to interact with those. At the time, the only free and somewhat-functional database was MySQL so naturally - PHP had a few functions to speak to MySQL. However, any language out there works really well with mentioned databases. &amp;#x200B; &gt; While Node.js is great for using NoSQL databases such as MongoDB and CouchDB as well as graph database systems like Neo4j with JSON. Although this can be done with PHP too, it is far more convenient with Node.js. Why is it "far more convenient with Node.js"? What does "far more convenient" mean? How are we supposed to know what this means? &amp;#x200B; &gt; PHP was developed specifically for the web, unlike its compeers Java and Python. Well, PHP wasn't developed specifically at all, originally it was just a wrapper around many C programs - it heavily resembles C for that very reason. &amp;#x200B; &gt; This means it is intrinsically equipped to work with HTML, servers and database. Just like Java, Ruby, Python, Kotlin, Go, C, Javascript in Node.js environment .. and the list goes on. &amp;#x200B; &gt; And this is one the characteristic that has made it a perfect server-side solution Back at the time, again, what made it popular was the fact you could embed it into Apache's process. It was thread-safe (still is) and you could add it to your web server. It resembled C, you created a file with .php extension and if you loaded it via http - it did some work, usually it was outputting some text. It gave you some superglobal variables that had info inside about the request (the `$_POST` and `$_GET` variables) and it was great. If you used PHP, you had no care in the world about data types, memory allocation, race conditions when writing to the same resource - you could just use something that resembles C but doesn't require you to do the 95% of code that's housekeeping. &amp;#x200B; Later on, we got PHP-FPM and we had the ability to scale to multiple machines. Web server was (is) able to load balance the work and decide which machine in the worker pool would receive the request and do the work. And that made it even more popular because it was super trivial too spin up PHP-FPM and add it to nginx's upstream. Need more computing power? No problem, get another server, hook it up - voila, you got more power. It's cheaper than getting a team of devs re-writing your slow app (and the app brings you value). &amp;#x200B; &gt; PHP also works perfectly with intensive web applications that require high computing and server-side rendering When you require high computing power, you usually opt in for a compiled language in order to utilize the hardware to its fullest potential. You wouldn't compute, say, something CPU intensive as blockchain calculation. You'd pull some data from somewhere (database, nosql, file, whatever) and spit out HTML. Serverside "rendering" is a bad term here - PHP simply spits out text. That's all. HTML is, ultimately, text. JSON too. Javascript too. So what we use(d) PHP for is - outputting some text after we pre-processed some data (pun intended, hypertext pre-processor) :) &gt; One of the issues with PHP is that sometimes the maintainability of codes can get worse. The reason being PHP is liable to mix the HTML and language syntax inside the HTML files. Thus, it causes dire issues when extending and adding new functionality. That's not the issue with PHP. It's not language's fault that programmer(s) are bad. Would you say C is a terrible language because PHP is created via C and PHP produces "bad" maintainability? Statements like this one make no sense. Modern PHP, with excellent object model, is FAR SUPERIOR when used correct compared to serverside JavaScript when it comes to maintaining the code. &amp;#x200B; &gt; Saying PHP apps are slacker will be extremely wrong. But when it comes to developing modern-day apps like [Single Page Applications](https://www.techuz.com/blog/single-page-applications-vs-multiple-page-applications-do-you-really-need-an-spa/), Node.js is the first choice of the developers. The reason being – JavaScript runs in the browser that makes the execution of small tasks swift and smooth. This one is just funny :) PHP spits out text. HTML and JS are text. So ultimately, your browser receives text. You're doing an SPA with PHP? It'll output TEXT. And that text - HTML and JS - you have to write. Ultimately, you're writing HTML and JS. Node.js on the other hand, immediately works with structures that browser works with - because both use the same underlying language - Javascript. And again, you'll write HTML and JS. In both cases, you.. write HTML and JS. With node.js you get access to many libraries other people created, but whether you use PHP to assemble the text or Node.js to assemble the text - **you're going to work with Javascript ultimately**. &amp;#x200B; "I'm creating an SPA with PHP" - no, you're not. You're using HTML and JS. You're thinking in HTML and JS. You're interacting with HTML and JS. &amp;#x200B; I already wrote a wall of text with what I think is wrong with the article and I haven't even reached half of it so I'll stop. The author had the best intention, but lacks knowledge and experience and thus provides readers with false knowledge. And that's VERY dangerous. &amp;#x200B; 1/10, would delete it if I were the author.
Useless click bait.
Useless click bait.
Gitlab seems nice! The one thing github has is demand. As 99% of OS software are hosted on GH its super easy to make PR and browse issues etc. 
As long as the DB is relational you can use laravel no problem. Name the models whatever you want and point them to whatever the table is actually named.
Sad blogspam is sad
Post your blogspam elsewhere. Reported
Almost as bad as the PHP vs Python "article" I saw on here a while ago. Absolute rubbish.
Seems like a situation where data mapper ORM would be preferable. I would go for Symfony, simply because it's more flexible and less opinionated, but it would be also probably possible with Laravel + doctrine.
It also explains Windows ME. [https://xkcd.com/323/](https://xkcd.com/323/)
TL;DR: Use github or relevant VCS for packages that needs to be specifically updated for your project and use that newly created repository in your composer.json.
Doctrine can be set on top of an existing schema quite easily. Symfony can also shoehorn itself onto existing applications, plenty of talks out there on how to gradually move a legacy app over. Only recommending Doctrine / Symfony as it is what I know, not saying it is better than anything else.
I'd start with Lumen and slowly add Laravel packages until you can safely remove them all from your composer.json and replace them with the laravel/framework package
I would normally agree, with recommending Laravel, but I don't here because Laravel makes a lot of a assumptions everywhere about column naming. It's pretty tricky to make sure you get it all correctly with Eloquent. The end result is much easier to use though (IMO)
What is the main difference between FPM and PM? According to github, PM says it spawns several PHP workers and this increases performance by killing bootstraping. FPM also creates PHP worker pools.
What version are you upgrading from? I had multiple issues with 7.2 since the count() function now outputs warnings.
Totally hear ya on that. I'm refactoring a legacy app into laravel right now and using the legacy table / column names, no timestamps etc. It has actually been very easy to override those conventions, and I'd like to see how another framework would make it any easier.
This is one of the situations I wrote [Atlas](http://atlasphp.io) for. Given a database connection, you can [auto-generate data mapper classes for the existing tables](http://atlasphp.io/cassini/skeleton/usage.html#1-2-1), and use those classes right away in any framework of your choosing.
With Doctrine you're not overriding any assumptions, you just pretty much define exactly what your schema is. So you don't need to worry about having potentially forgotten to override something.
As someone who has build and and now maintains an email marketing application, i wonder that nobody here mentioned the legal implications of doing what you are doing. You have to have a clear history of how your subscribers ended up in your email list (also clear written consent as of gdpr for EU people), you have to offer them a way to update their information and most important, a way for them to unsubscribe from you. You also have to take care of rate limiting, retries, bounces, and unresponsive emails, and really, much more. Mailing is hard to get right. This is why you pay lots of money to 3rd-party companies, because those people do this all day, they know what's the deal and they follow the law. Paying $300/month might be high for you, try using a self hosted application and see how that goes, but please, for your own good, don't do it by yourself. Sending in the way you are sending now, it is just spam. &amp;#x200B;
Laravel allows you to specify which table your model uses, and which column is your primary key. This is to override the assumptions laravel makes. It even allows you to specify which database connection your model uses
Yes of course, that's exactly what I'm referring to. But my point is that there's a whole lot of things you need to override to make it work as expected (timestamp columns, relation column names, etc) and it just adds a lot of burden on the dev to make sure they didn't miss some hidden override. I love Eloquent on a fresh project/schema, but IMO it's trickier to use on an existing schema.
are you sure it's a good decision to move to a framework? it may not be worthwhile depending on the current code quality, expected remaining lifetime, etc. for necessary changes, it might also be more appropriate to just add some new components to improve certain aspects (e.g. incorporating [FastRoute](https://github.com/nikic/FastRoute), or [Doctrine DBAL](https://www.doctrine-project.org/projects/doctrine-dbal/en/2.9/reference/introduction.html#introduction)), rather than overhauling the entire application.
It's actually not that much work. But I don't know how it compares to other solutions. Maybe the other options are easier.
What an amazing name
See my other replies, something like Doctrine would be more explicit
Thanks: I was feeling inspired :-P
For testing packages without publishing you can use a path repository: https://getcomposer.org/doc/05-repositories.md#path
FPM is basically CGI on steroids. An advanced gateway to run `php script.php` and return the output to web-server. Once completed, the php process dies and the new one have to start over. While PM sort of preloads php scripts so the new process have an already working copy without bootstrapping 
I don't think that is true. [In the configuration](http://php.net/manual/en/install.fpm.configuration.php#pm.start-servers), you can set number of child processes, how will they behave and when will they die.
Sending newsletter all by myself through 4 different servers I send somewhere around 150k emails a week and that's mixed with sign-up emails and forgotten password emails. Rate limiting was a bitch to debug because the information is not publicly available so I had to dig in postfix syslogs but eventually figured it out. Parsing those same logs to blacklist certain emails ("unresponsive emails" as you put it). People consent to GDPR upon reaching the website and I do have unsubscribe now page that has no extra actions (you just click and voila, blacklisted, with redirect to newsletter subscription page in case yo uchange your mind) I could probably reach this with only 1 server so make that 50 euro a month through Hetzner.de Honestly, 300$/mo. for 10k emails a month is a bloody steal. No amount of "hurr durr they follow the law" is going to change this. It's really not this hard. 
Yes, I worded it incorrectly. These FPM child processes you are talking about are sort of instances of PHP *interpreter*. To put it more bluntly, FPM preloads PHP interpreter only and PM preloads PHP interpreter *and* scripts. 
Does *script* mean opcodes?
I’m probably not qualifies enough to reapond but hey it’s reddit so what do you expect. IMO, changing the schema isnt that hard. You can write a simple php script to run the queries on each table to update/modify them, and then you can run that script on the existing db whenever youre ready for switchover day. 
Is there an alternative to floats you would recommend? 
As far as I understand, it's more than that. Opcode is not a machine code ready to execute, a computer still needs to read it and allocate all the code in the memory before the actual execution. So pm does, once. Depends on the codebase size the gain could be huge.
You can work with `ext-bcmath`, and always specify the precision
Did it on two Wordpress sites, no issues so far.
My conclusion is it's best to wait for 7.3.1 (that should be any day now) or even 7.3.2 due to Xdebug and multiple Opcache issues. Of course in the meantime one should continue testing locally and report bugs to bugs.php.net.
&gt;I was drunk when I wrote runkit, and I was high when I pushed it to PECL. FTR, neither of those two statements are true. I *do* regard runkit as a useful tool that got WAY too big for itself and is used far too widely for comfort. Some people use it in production, and that terrifies me. Meanwhile, regarding runkit7, I haven't reviewed any of his code, but if he'd been the one asking to become the official runkit maintainer four years ago, then his would be the official one. I may yet endorse him as Zenovitch has clearly stopped work on his fork. If the code does what you want, then use it. Also... Stay in school, kids. Don't do drugs. Just say no.
&gt; Thanks! And there is no real bottleneck problem that I am having, I am trying to develop best practices around PHP as Microservices. In my experience, it's best to build software around known best practices. Build it clean; build it correct. Use an appropriate framework. Unit test. Functional test. Get it right, then make it fast. We built out a small/medium API with a large set of complex business rules. It also had to be reasonably fast (&lt; 100ms response time was the target). We built a good solution within Symfony framework, but it was 200-300ms per request. That's pretty far from our target. Profiled the code and found a most of the latency was from database queries and object instantiation (we broke down the business rules into tons of small classes, configurable by business in a UI, then dynamically built). Since these things don't change often, caching was a perfect solution. Added in redis, safeguards for data integrity, and bam. \~50ms per request. Had we optimized too soon, we might've traded code readability or speed, or ditched a perfectly fine framework. Hardware is cheap these days. Dev time is not. Spend your money building good solutions. You'll always be able to tweak a good solution into a performant one, either with some tweaks or a little extra hardware. It's a lot harder to fix a janky solution built only for speed.
.. inspired by what?
1. Do this project has dependency manager (Composer)? 2. Does it have unit/functional/integration test? 3. Does it have any kind of isolation of controller/request part from application code? 4. Is any kind of dependency injection exists in project? I think these are most important questions before moving your code to any modern framework (database/ORM stuff is not vital at this step - it could be refactored later or never (case of performance) - frameworks can run without it. Ad. 1. I think it's obvious to move to composer (if your project is not using it yet). Ad. 2. Tests will be very helpful after refactor as you will be sure you didn't broke anything. Even before moving to framework the value of your app would increase much because od tests. Ad. 3. If yes then it's great! Refactor should be much easier. Basically you would have to init blank project of your desired framework and just move app code from one controller to the other. If not then I would consider changing it on the legacy project first (gradually) just to be sure that application code is not using something from this part (e.g. global variables like $_REQUEST). It would save you hard time doing it "on the fly" while moving to framework. Ad. 4. This would be the first "real" refactor (or migration if your app has DI) step in this process. And to answer (at last :P ) your question I would recommend Symfony 4. It's very lighweight and easy to configure. And there is a great chance, that after checking above 3 steps and then copy/pasting your app to Symfony, everything would work without much effort.
It's like two lines of code per model to override the table name and key field. Relations are a bit more complicated in that you also have to map the fields. This requirement is not a reason to not use Laravel. You gain so much with the rest of the Framework.
The Symfony server does not seem to run properly under 7.3.0 on ubuntu. It acts as though no server is available even though the process is running. I have to use: php7.2 bin/console server:start to get the server to run properly.
Laravel. Hands down. Eloquent will need some custom config (probably), like: 1. Override the table naming convention (1 line of code in the model) 2. Override the key field (1 line of code in the model) 3. When setting a relation the key and foreign key will have to be explicitly set. 4. May have to turn of timestamps. After that it will basically just work with your DB like it does with any other. 30 seconds more work per model, and you can create new schema in a more Laravel like way or keep doing the overrides.
The article doesn't say which one is better. just does -yet another comparaison between both ecosystems
 From our website hosting company: "We have reviewed [http://www.dramen.com/configurator.php?system=38](http://www.dramen.com/configurator.php?system=38) and noticed a number of PHP parse errors. The old environment was running PHP 4.6, while the new server offers PHP 5.6 or PHP 7.1. Because it’s 1) Going to PHP 4.3 to PHP 7.1 and 2) working on over 50 files, it’s a sizeable project in terms of scope. our estimate is about 32 hours of work Regarding the fix: It is $125/hr for a Junior Developer and $150/hr for a Senior Developer. In your case, it will most likely be a Junior Developer working to make your current website compatible with PHP 7.1" &amp;#x200B; Any ideas on where we should go for help on updating or should we just go with the offer from our hosting company? 
I have and always will use atom. With no php plugins other then the base language.
Has anyone managed to do this in a way that can be shared well between coworkers?
I'll leave that as an exercise to the documentation reader.
The image is flawless.
Sure, but that's a lot more complicated than using JWT, which authenticate users without needing to deploy another Redis or Oauth service. I'm not saying you should never use sessions where it makes sense, but for APIs I find it really difficult to even come up with a scenario where this is the case. Sessions are cumbersome on the client side: You cannot control from the browser which cookies you send to which endpoint. Maybe one service needs one kind of token and another needs another kind, with session cookies all tokens are always send, or even only one session cookie is allowed. What about authentication grants that you want to communicate with other companies? Are you going to make your Redis instance public so other companies can validate your tokens there or create another service for that? Maybe your other service is written in another language, suddenly you have to think about how to deserialize your data from serialized in PHP to that language. That's headache after headache, while I cannot even come up with one problem with JWT/Bearer Tokens that is not easily solved by 2 lines of code. And good tutorials exist that help you on the way. It also makes sense to start out with JWT which work almost in all scenarios and if you need to add some stateful logic (say a token blacklist), simply build it on top of them. 
&gt; IMO, it's better to focus on what the API should do rather than implement token-based access that you don't fully understand. But isn't that the problem with every technology, especially on the web? Not understanding something is no excuse. There are great tutorials out there for JWT and it is really not rocket science, quite the contrary really. While I would argue that getting sessions cookies to work as an authentication mechanism for APIs is real rocket science ;).
What i would say i can do all your stuff i am also a php programmer invite me on chat or pm me
Try authy or andotp. It really amazes me that people are even willing to use an app that doesn't even allow to backup your keys.
Try authy or andotp. It really amazes me that people are even willing to use an app that doesn't even allow to backup your keys.
It would help to know more about the PHP code that's running. Was the software purchased? Does it use any frameworks/libraries? Is it completely custom (i.e. were devs hired/contracted to build it)? It's hard to estimate a project size from number of source code files involved alone. Do you approximately how many lines of code there are? Or what the ballpark average number of lines per file are (is it 10? 100? 1000? 10000?) I can't speak from converting PHP 4 to 7, but I've worked on converting a rather large codebase (maybe 100k lines of code) from PHP 5.2 to 7.0. It was remarkably simple. I suspect PHP4 code will require a bit more work though to get it running well. A lot of the errors your host sees are probably mostly harmless (newer versions of PHP complain more loudly about bad coding practice than old ones), but if your business relies on this software, it would definitely be worth making sure it's working in good order and without vulnerabilities. &amp;#x200B;
To complement the comment above: [Money](https://github.com/moneyphp/money) for… money.
Since it is specific to a project, commit it to the project’s repository?
It was custom built in 2009 by a college student. Most of the website still works on the new server. The configurator that's on the link provided has about 650 lines. We're trying to get a hold of the original developer, but no luck yet. I've tried testing the code at 3v4l.org and it seems like our website works up to php 5.3 We need it updated to be compatible with php 5.6 minimally. Thanks
First of all, it is very outdated take on the Model. In MVC, the Model stands for the [whole application's business logic](https://phpdelusions.net/articles/mvc), whereas what you call a model is either an Entity or a Repository. Speaking of Entities and Repositories - yes, it is perfectly OK to interact with multiple tables. Modern ORMs, such as Doctrine ORM, let you to define the relationship between Entities (a data class mapped to a database table) and they will populate either the requested object and its related Entities. For example, read a record from the articles table and an Author entity will be automatically populated from the linked table. There are always tradeoffs with performance, but for sake of having the uniform interface and given you are working with tens of records at a time its OK.
&gt; Plus if you decide you want to use Vue, React, Typescript, Flowtype you are not limited. This right here shows that you've never used PHPStorm before. Not sure why you felt the need to comment on this when you obviously don't know what you're talking about. * [Vue](https://www.jetbrains.com/help/phpstorm/vue-js.html) * [React](https://www.jetbrains.com/help/phpstorm/react.html) * [Typescript](https://www.jetbrains.com/help/phpstorm/typescript-support.html) * [Flowtype](https://www.jetbrains.com/help/phpstorm/using-the-flow-type-checker.html) &gt; How is this still even a discussion? I mean.... it hasn't been a discussion for three months until you commented. Read what I wrote. There's nothing wrong with a text editor. They're great, and I use them all the time. You just can't compare Text Editors and IDEs because they're two completely different approaches to development. Saying something like "Who needs an slow IDE" shows that you don't have an understanding on how to work on larger projects in a team / Agile setting, and that you very likely don't have much experience in the field with working on enterprise software. And before you try to defend yourself on this point, no, a Wordpress WooCommerce store that you set up for your aunt that one time isn't "enterprise". You can keep using all of the tools in the stack that you described. It's a generally very good approach to development for smaller projects and teams, but it will start to fall short once you start scaling up the size of your team, application, or infrastructure. **tl;dr; Use the right tool for the job, do your research, and get yourself more experience in the field before talking**
 protected $table = "admin"; protected $primaryKey = 'admin_id'; public $timestamps = false; /u/qpazza what else?
We just setup a private composer repository. Which we also use for private packages. You can use the tools like satis, toran proxy or private packagist for this. If I maintain a forked version of someone else's package and want to be able to get updates from the original author I don't update the patch version, but rather append something. Say the original version 1.2.7 and I do a patch, I would use something like 1.2.7-p1. For a second patch 1.2.7-p2 etc. If the original author releases 1.2.8 you can continue to use the original versioning numbers and determine whether you're patches are still needed Also another way to handle patches is by using a package like https://github.com/cweagans/composer-patches. This will allow you to use the original package in your project. And apply a patch to that package in your project. For small patches this is usually easier since you don't have to maintain your own fork.
The fact that you need to ask what else is exactly my point.
Per your not above is why I am developing best practices. **Use an appropriate framework.** I've found frameworks have a lot of overhead that is unnecessary. My normal sites respond in 80-100ms. A microservice taking that long is bad. The bottleneck will be the network, but even there I want to keep things between 10ms and 80ms. One thing I've noticed is that routing in frameworks is expensive. Even with frameworks like Lumen, a regular HTTP Request is 25% faster than an HTTP request that is routed. And I am sure going deeper into frameworks, a lot of other bottlenecks can be found. **Object Instantiation** And here is where my beliefs start to cause a war. Because microservices can be relatively small in size, functional programming or the use of static I believe is acceptable and beneficial. Inversion of control and creation design patterns are way less impactful in microservices than monoliths because there are so few dependencies. My belief is if the state is not important, avoid object instantiation in microservices to improve performance. So its developing best practices around microservices which are different from monoliths.
&gt; not acceptable in certain business logic scenario, such as dealing with money, evaluating exam results, rocket science, etc. Rocket science in PHP? Sounds fun :p
I'm newish with Laravel, but AFAIK is that plus the foreign keys in the relationships. And I was saying three lines is small potatoes. 
Thank you very much for the explanations.
All good so far. The only problem I have is with phpMyAdmin. It works as intended but every time you try to do something there is a little warning about something. Really annoying
A very naive search can just use php to build sql statements that query data from a db e.g. select data from tableWithYourData where fieldYouWant like %userInput% A more complex model would use elastic or Sphinx but don’t get into that if you aren’t advanced in at least sql 
Unless your business is search engines pretty much no one writes their own search engine. If the website you are building is publicly visible then you should use an API to an existing search engine: https://developers.google.com/custom-search/ If the website being built is not publicly visible then you usually implement a search engine product on your intranet (like Apache Solr) and use that. If this is your case then you are mostly out of luck because this is way beyond the scope of some html and css. Furthermore if you wanted to ignore all of the above and build your own search functionality for a website that is just static html and css it can not be done with just css and html. At the very minimum you could try a pure javascript approach but you would still need to tackle speed (storing the indexed content) and user friendliness (natural language processing). 
First you should probably get your [requirements](https://en.wikipedia.org/wiki/Requirements_analysis) clear. There is really no such thing as a "general" search so you should first come up with what exactly you want to search. Searching static (HTML) web content is a lot different than searching a database (think of a web-store with "products" or a forum with "users"). If you have no back-end experience, a few days to get started with databases and a server-side language like PHP is probably too much unless you are super eager and maybe even have someone to help you out. However, realistically, I think this is probably too much if you are just starting out with HTML and CSS and if you are still in high-school (or similar). For a project like yours I would probably recommend to take some simple first steps with just JavaScript. You could implement a more complex element to your page and show your teacher that you took frontend work one step further. A random example I could come up with on the spot would be maybe a mobile-compatible slider element, you could use a library like Flickity to implement that, they also have great documentation (focus on the parts about "vanilla JavaScript" [meaning pure JavaScript without extra stuff like jQuery]): https://flickity.metafizzy.co/ 
Again, my entire point is that there's uncertainty here for people who aren't intimately knowledgeable with the specifics of Eloquent model internals. If you're migrating a legacy project, it's usually very important that things don't go wrong, because you often can't afford mucking about with that sort of thing. Especially if it's your first time using Laravel.
Take a look at swiftype site search, literally crawls your pages and builds an engine for you, and gives you some HTML &amp; JS to paste on your site. Has good customisability to make it fit in. If you really want to show them some skills use their API APP Search, but this will require at least some JavaScript knowledge.
It is also in the docs, and you can view the Model.php file to see what properties are protected or public. It's not hard at all. Any Dev should be able to do this
You're really not understanding what I'm saying. With legacy projects, you need guarantees. I.e. avoiding human error as much as possible.
You're really not understanding what I'm saying. With legacy projects, you need guarantees. I.e. avoiding human error as much as possible.
You can check the model class in illuminate/database/eloquent/model.php to see all the properties available. Other properties of interest are $keyType which defaults to int $inctementing which defaults to true You may also want to think about overriding the created at and updated at fields. Do this if your table has a date field that you need updated by laravel when the record changes That's pretty much it. With this you would be able to point an eloquent model at a DB table and query it. For relationships, you'd have to define the relationship methods inside your model. It's worth becoming familiar with the laravel docs for this part if you want to take advantage of this feature, but probably not absolutely necessary. Good luck
Make that 7.1 at the very least. PHP 5.6 is already deprecated and you don't want to do another investment or get hacked due to security issues that aren't being fixed. &amp;#x200B; That said, consider rebuilding the app to today's standards instead of patching it up to make it work with the latest version. 
Why wouldn't you set this up like every other react app, why does the serverside language matter for setting up react?
I've had a good experience with [brick/math](https://packagist.org/packages/brick/math).
I've successfully migrated legacy apps with custom frameworks over to Symfony. With Doctrine (Included in Symfony Framework), your database concerns are not an issue. Everything is customizable and you can [generate your entities from your database](https://symfony.com/doc/current/doctrine/reverse_engineering.html). Symfony also comes with some handy features like [bridging sessions](https://symfony.com/doc/current/session/php_bridge.html), specifically to make it easier to integrate Symfony into legacy code. Or run Symfony next to legacy code (keeping certain requests being handled by the legacy app and other requests by Symfony). I'd also recommend reading [Symfony versus Flat PHP](https://symfony.com/doc/current/introduction/from_flat_php_to_symfony2.html), it's a rather old article but it could provide some insights on how you can transform legacy to Symfony (if you don't already know) Either way, pick the framework you want to work with, in the future. I recommend you try out some of the more popular ones, read the docs and get a feel for them, create a basic blog and/or try to recreate/move/refactor some of the legacy code to the new framework. Find the parts you think might be hard to migrate and figure out how you could migrate them to the new frameworks, then decide which framework to use. 
Lol. The article is basically a "how to set up a React app + an index.php file". 
It may not be specific to the project. In most cases it isn’t. The `path` repo works for testing but breaks if that goes to production. So far my best ‘solution’ (incomplete in some cases) is to override the PSR-4 path in the `autoload` keys to some common path on each developer’s development environment, which will take precedence over the repository version when the auto loader is created. The drawback is that this only works for class loading within the application and not other files that may be part of the package, so sometimes it’s just not possible to use this approach. Would love to find a way that lets us work locally without doing a ‘commit-pull-merge-tag-push-composer update’ dance just to get the latest version for testing that won’t destroy the production environment. Feels really silly.
And it very easy to achieve with laravel. It's only a few lines of code. It would take me maybe 2 minutes to set up a model to read a particular table. But really you just need to tell the model which table le to use, and which field is the PK. Super easy. I've transitioned a couple projects from legacy code, even my own crappy code, to a laravel project and kept the database intact. I just basically went from spaghetti code to a laravel project. Essentially switched out the client. And the results were solid.
Disgusting.
Composite primary keys. Go.
 https://link.medium.com/58E6TGxJlT
Setup that way those development files are under the webroot...
replying to read again. ty
Because most React apps assume they are connecting to a node server, which will be serving up the index.html for you, so a lot of setting up react guides don't say what needs to be done, to actually get it being served.
&gt;Vairaible Yikes
What? React apps don't assume anything... React is just a JS UI framework. Typically in modern development react apps are served independently of the serverside, which is what I would reccomend. For instance I am using next.js for a project and that can be built out completely statically, and require no running server application at all(basically just static files on a CDN or something), or can use a node server for SSR. I would only use PHP for the backend API and serve React separately so you can scale it separately..(also I wouldn't use PHP at all but that is another story.) If you are using PHP, use it for creating your backend API and not serving your clientside. This guide is basically pointless, and also not a really ideal setup for an app.
You're right. I've also run into issues with tables that have composite primary keys.
&gt;I answered @nikic You didn't understand what he was trying to say to you. Your benchmark case is wrongly written for FastRoute, therefore it can't be representative (for any 'condition').
Since it is not using `create-react-app`, I would say it is not basically a React installation article. However, this article doesn't fit to /r/PHP, more like /r/javascript. 
There's very little point in using a relational database if you're not going to relate the data. It's often helpful to group all of the things related to a concept under the same names, like user models and a users table, for example. But that shouldn't imply that you have to limit yourself to only using that one table. If you have logic that requires a check on multiple tables that is more closely related to the users model, go right on ahead and put that into the users model.
I agree, not understanding something and using it is a big problem literally everywhere, not just IT. Now.. you mention great tutorials - quite honestly, most of the tutorials that I see are pure garbage but for some reason they gain attention. If you understand JWT and the principle behind using tokens - of course it's not a rocket science. But cookies aren't difficult at all. What's a huge problem is incompleteness in the tutorials - the drawbacks and what NOT to do is rarely mentioned. 
This is why PHP gets such a bad rap. Passing infomation in embedded varaiables on the page opens up all kinds of XSS issues aswell as using front end to verify "logged in" in this way is also dangerous for future requests and easily manipulated using client side dev tools and that is just sractching the surface. &amp;#x200B; As a cummunity we know all this already yet we still get low effort newbie articles that encourage bad practices. I can not down vote this hard enough. 
A few options: \- MySQL full text search \- Sphinx \- Apache Solr \- Elasticsearch
&gt; PHP has all the features I need Not async though.
I've got swoole for that. Yes, it's an extension. However, out of curiosity - can you provide an example of where, how and why you'd use async in PHP? I'm asking about real-life scenario, not tutorial example of "async file write" or similar. The thing is - you don't need async in PHP, just like you don't need threads (which you can also have).
no, it is an advanced guide how to set up react app + index.php file
Like ... two api calls in parallel?
it’s not about being hard it’s about other services that the database provides besides this portal
i’ll check those two out thank you 
Ok, great example, let's dissect it: with async call, what do you achieve there? What's your gain there? What did you optimize for? Async calls are great for allowing CPU do additional work (such as accepting new connections) while disk / network I/O are being dealt with. In PHP's case, nginx or Apache are your initial reactor with PHP-FPM master process being your second. You've got your efficiency from those. This is valid if we're in web (http) context. Also, you can fire-and-forget if you don't require the response or use cURL's [multi\_init](http://php.net/manual/en/function.curl-multi-init.php) which lets you achieve literally what you just mentioned. If you prefer, say, object oriented interface for the same task - there's [Guzzle and its async functions](http://docs.guzzlephp.org/en/stable/faq.html#can-guzzle-send-asynchronous-requests) (which uses what I mentioned under the hood). Do you have another example?
If I'm understanding you correctly, you're asking if you should define your relationship to another model/table in the model that has that relationship? That's been standard in most frameworks for a while now. There's even special markup in things like Yii2 to handle that bidirectionally. Say you have the User model. The user has a Parent ID column that's a foreign key to User. This ID determines which Parent User created a Child User. So the User Model Class would have the following notations: public function getParent() { return $this-&gt;hasOne(User::className(), ['id_user' =&gt; 'created_by']); } public function getChild() { return $this-&gt;hasMany(User::className(), ['created_by' =&gt; 'id_user'])-&gt;inverseOf('parent'); } (Apologies for the shitty markup style) This is Yii2's way of telling that a User can have a Parent relation, and that all Parents have an inverse relation to their children. This is a Yii2-specific notation that helps de-duplicate objects in memory for perf-reasons, but it also helps the developer. This example is for User&lt;-&gt;User relations, but it can be to other Models too. Other frameworks use different syntax for this, but this is how Yii2 does it, and I've found it a good way to manage your relations. You can see from within the Model what other models are related, traverse-able. In Yii2 I can then lazy-load and traverse these relationships via $user-&gt;parent-&gt;parent-&gt;parent to get the great great grandfather of the account.
Have a look into Algolia, it'd probably be free for your purposes.
In a nutshell: some fixes for core,com,date,exif,gd,imap,mbstring,oci8,opcache,pdo,sockets,sqllite3 and xmlrpc. Nothing so important (vulnerability bug) or vital, excluding gd (out of bound) and mbstring (overflow) Personally, I will stay with 7.2 for a while, my components only work with 7.2 but 7.3.
Why is the dev team recommending development be done in PHP?
As a side note, What other languages understand as Model, usually the PHP world interpreters as the REPO/DAL/DAO (service) class. It is how other languages understand what is a Model class (also called anemic domain model) ``` &lt;?php class Customer { var $idCustomer; var $Name; } ``` And it is how most PHP frameworks understand it ``` &lt;?php class Customer { public function insert($arr) {..} public function list($filter) {..} } ``` About your question. &gt; Is this still the case or has it become "okay" from a standards and performance standpoint for dedicated models to interact with multiple tables? Let's say that you are executing the next query: ``` select * from table1 inner join table2 on table1.field=table2.field ``` Question, in which class I should call this query?. In the **Table1 class**, in the **Table2 class** or in a **new class**?. The answer is, it depends on the context. Which table is most significative?. If table1 then, it goes into the Table1 class. There is another detail: Microservices. People praise it but it is a nightmare to coordinate. So, if you want to jump over microservice, then the answer is: you shouldn't join tables, so every class access only a single table. 
- PHP is a thriving development platform still - It's hard to answer this one as it always depends. availability for one. - it rather declined. It's hard to grow if you already have 90% of market share - It is not a true OOL as in Java. It just have some OO concepts bolted on. - PHP is an attractive language in the marketplace today, whatever it means. It is considered a bit 'old hat' by many illiterate folks
Still one of the most sort after languages and pays competitive against other stacks. PHP devs earn more than iOS, Android and Node devs in Australia. Has the best tooling out of any language I’ve ever used and is as performant as ruby or python. IMO the benefit of PHP over Node is that it’s not node. If you aren’t using PHP or Golang for web development in 2019 you’re doing it wrong
Different people are expressive in different languages. That's what matters. If you've got a team of people who can realize your or their ideas in PHP, instead - say, Python - then yes, PHP is a great choice. It's not language that matters, it's the people and their ability to wield the language / stack / ideas / infrastructure. No matter the language, a crap programmer is going to remain crap programmer and an annoying person will remain annoying - that's how it is. Questions like yours will produce many opinionated answers, especially when comparisons start flying around. However, if your dev team suggested PHP - that means, at least, that they know how to use PHP. Whether they use it good or bad - it's impossible to say. I'll avoid comparisons to node.js (which isn't a language but an ecosystem) and Java. &amp;#x200B; Some answers: &amp;#x200B; \- It's not possible to say if market share grows or shrinks. There are languages such as COBOL that's still in use, even though many people will tell you it's dead. PHP is definitely present on the market. There's an influx of new people, it's safe to assume they'll be using new languages, at least to begin with. \- PHP is object oriented and procedural. You can use one or the other or both at the same time. Most frameworks use both, and they do it extremely well and smart. &amp;#x200B; \- Any older programming language is considered a bit "old hat". I'm pretty sure that a few comments will contain buzzwords that you won't get in PHP, but that doesn't guarantee a single thing when it comes to creating something of value, be it for your potential customer or your own company. PHP continuously evolves, for the better. Last update featured 2x speed improvement, out of the box and the trend continues. In my opinion, PHP is easy to start with and very difficult to master. Any language is difficult to master, but only a few are easy to get started with. &amp;#x200B; Ultimately, the language is not the only gear in a successful project - there's so much more when it comes to IT infrastructure. Best of luck!
I assumed that maybe this article would dive in to getting SSR setup with PHP and React, which is actually worth an article on it's own, but it doesn't even touch that...
no
This fixes a number of problems that prevented a lot of people from upgrading to 7.3.x. If you had trouble with 7.3.x, give this release a try.
&gt; They should only contain very specific identifier information, such as the logged in user id, and everything else should come from the database So, a cookie is used to store a session ID, which should mainly be used to store just another identifier. You do realize that's the entire point of sessions: store an identifier in the browser, use that identifier to link to data in a safer more scalable place. Most places use a database rather than files &gt; If a user logs out their session should be destroyed and the id should be regenerated, and when they log in the id should be regenerated, so there's no chance for overwriting information in the session. Until something makes two requests at a very similar time: like when performing automated AJAX and there are multiple pages open. One request will block until the other closes the session: the other may be doing work that will modify the session-- that isn't necessarily known until after the work is completed. Disabling locking makes this a bit worse: say when using a security token that just changed. If the new session wins (written last): things look fine, if the old session wins: one of the pages is using session data that's no longer valid.
&gt; So general scaling: Use a DB, even MySQL will work - just when your needs grow, then you switch to like Redis or some other solution. Already do, but the locking seems to really limit the application. &gt; Depends on what you are doing. The session_start() will lock it, to make it unlock do session_write_close(). Or if you don't need locking on a script and no session is needed, don't do session_start... I guess I just suspect the API is flawed. Transactionally, when you add something to a database: you can have multiple concurrent writers that are only blocked by other writers. The session API only encourages one reader at a time: which limits concurrent requests, makes the page appear to block if something else goes wrong. Overall, it just seems pretty fragile.
What I liked about this post that it was short and not too difficult to read. The title is misleading though, it could be just me but when I saw it I thought "what, he's going to compare Traits AGAINST Interfaces? That's not even in the same ballpark". &amp;#x200B; The gist is that a Trait is language assisted copypaste while an Interface is a "contract". I think it could be improved further, but it wasn't the usual shameless self-promotion that we often find here. Expanding on when and why to use Interfaces and Traits, using open-source examples, would be something that I'd really like to see in your article because code speaks louder than words (yes, it's a shit analogy) :)
Terrible title. It's not dead, it's EOL - quite different. :)
PHP has an excellent community, it is true OOL, Composer is mature and extremely capable. PHP programmers spend their time writing code, instead of chasing The New Black. It like PHP. It's very practical. And it's got a ton of frameworks, packages and toolkits. PHP 7.x has impressive performance, so it's a good time to be a PHP developer.
Dead: "no longer alive" EOL: Literally "end of **life**" Sounds like the same thing to me. Anyway, you really shouldn't be using 7.0 or 7.1 anymore.
I know it's so long off... but I wants me some preloading. That's going straight into the ci/cd pipeline.
I think EOL as hospice care and near 0% usage statistics as death. Just my $0.02 from a passing pedantic fellow.
So... should be dead, but isn't... PHP Zombie!
HERE LIES **PHP 7.0** "WE LOVE YOU AND YOU WILL BE MISSED BY ALL" DECEMBER 2015 — DECEMBER 2018
I got hired (and got the salary I wanted) in my previous job because according to my director: "I am a great engineer who still choses to work with PHP" According to him, good engineers chose Java/Scala, Go, Nodejs and such...
Firstly, thanks for your feedback. It's a welcome change to the usual "responses" that blog posts get on Reddit. Appreciate that you've taken the time to constructively look at the post, taking in the good, and the bad. &amp;#x200B; In hindsight, the title is a little bit misleading, you're right, the use of "vs" makes it sound like I'm competing them, rather than looking at their use cases and definitions. &amp;#x200B; I'll be sure to drop you a message, or post on this /r/ again when I have my next post - hopefully improved with a few more code examples
It'll be quite the game changer, people don't yet realize it, I think. For example, it's suddenly plausible to have 2MB of precomputed data as constants, shove it in a PHP file, preload it, and it's now free with every page being rendered. Currently, when you have a lot of data, you tend to put it in the database and query it on demand, because including megabytes of content with every request is very costly. Eliminating all that I/O would be quite the step forward.
Because they have more PHP devs than Java devs. I'm a java coder and I'm the customer and the lead so naturally I'd like to use Java as I'll be able to validate quality directly in both design and code quality. In PHP I'll be flying blind. Is it the right framework? Is this the right way to implement a solution for this problem in PHP? I won't know. But I trust the team. I've worked with them for years so I'm deferring to their preference. Wish me luck
&gt; If you aren’t using PHP or Golang for web development in 2019 you’re doing it wrong I like your confidence. I want some of it! Thank you.
Typed class properties - isn't that already possible?
How did you guess the release date? Any source on this?
One of the things that I need to be cognizant of is the marketability of the technology we use. If the product generates suitors then I'd like the technology we use to aid the sale rather than impede it. So market perspective on the language could affect the value of the company.
Great information. Thank you. Glad to hear about the big performance bump!
https://wiki.php.net/rfc/typed_properties_v2
Agreed. We're under time constraints, which is why I was asking about php 5.6 as a minimum. Just in case someone could do that upgrade quicker than php 7.1 Thanks for your input!
I'm not so sure it's that big of a game changer. How is it any different than what opcache already provides? Yes, opcache does require the file to be called first to be loaded into memory, but then it is compiled and stored in memory. But, that's kind of an optimized solution already since you're only storing what you need instead of *everything*. Compared to a properly configured opcache, what does this do that it doesn't already?
It's a game changer because Opcache made what was slow, faster. And preloading makes it instant. It's like the difference between selling cheap T-shirts and giving out free T-shirts.
Types properties and variance!! It's like we won't have to fake our way to object oriented anymore! As for the preloading, I'm not sure how to feel about it, yet, having a clean environment in each request is a big advantage.
No. Indirectly yes using setters and getters.
PHP has had a pretty consistent release schedule since 5.6: http://php.net/supported-versions.php The posts says there’s no certainty yet.
Typing properties is the most important thing what is been missing from PHP and it's being an amateurish language compared to others. This is huge!
How is preloading faster than OPcache? Don't they do the same thing essentially?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
How is it faster or instant? In this model, the entire code base has to be read in? That takes a long time. &amp;#x200B; It has to store the entire code base, that takes memory. &amp;#x200B; They both store precompiled code in memory, so when it is needed how is this any faster assuming the code has already been read into opcache?
Because you're not considering a part that is hidden under the hood - Class hierarchy resolution. Although the opcodes are stored in memory, due to the dynamic nature of PHP, a class of a particular name could exist in multiple different files, and the file names and order in which they're loaded is determined by require statements and the autoloader. Once it's done all of that, it then needs to bind all of the results together to create the actual class definition. This is currently relatively slow. Preloading eliminates the need to do that slow class definition building on each request. It also eliminates the need to call the autoloader.
&gt; Null Coalescing Assignment Operator Just when you thought it couldn't get any shorter
This is where I disagree with you, however it depends who the product is aimed at. If your product is capable of bringing value, it doesn't matter if it's created with an abacus, punch cards, C, Rust, PHP or by-hand-assembly. To someone who's not a tech person, the fact you used PHP or Go is of very little relevance. You can create performant applications with PHP, yet you can create absolute monstrosity using Go that's slower than a snail. If you have a fast and modern car, that doesn't instantly mean you're an excellent driver, right? There's also an adverse effect - let's say your guys are capable of completing the project using PHP within 6 months, but you decide to go with Go (or Python, or Ruby, etc.). They need time to learn the language, and let's say they're done within 12 months (I'm being very generous here). You spent 6 months extra without any visible gain except the fact you can market the product saying "we use X", but you're carrying tech debt - your team aren't experts, it's likely they made mistakes, it's likely some learnt more than others, it's likely that paradigm shift affected someone's expresiveness so they're much MUCH slower with realizing their ideas.. and who guarantees that you made the right choice? When you choose between language A or B, there has to be an immediate gain. If your case is "I think that using a buzzword language might contribute towards marketing the product" - I disagree. Here's an example: a few years ago I was looking for self-hosted version of GitHub. I found [GoGs](https://github.com/gogs/gogs) and I found [GitLab](https://about.gitlab.com/) &amp;#x200B; First is written in Go. Second is written in Ruby. I really hate Ruby - that language doesn't fit my mental model, it doesn't mean it sucks. We went with GitLab, even bought the enterprise license. The fact it was written in Ruby had so little impact compared to the value product brought me that I can't express it with words. Make sure your assumptions are correct before committing a critical error in decision making. Good luck!
&gt; &gt; &gt; &gt; &gt; For example, it's suddenly plausible to have 2MB of precomputed data as constants, shove it in a PHP file, preload it, and it's now free with every page being rendered. This is already possible and does not require preloading. Opcache does not copy constants from shared memory.
You can think of pre-loading as opcache, but with better memory. Rather than just remembering the opcodes of each file, it actually remembers what the end result was in terms of class definitions, functions etc, so it doesn't need to re-calculate them each time.
Looking forward to it! 
great!!
\&gt; As for the preloading, I'm not sure how to feel about it, yet, having a clean environment in each request is a big advantage. It's just the classes / functions / constants which have been preloaded which are shared between requests - It doesn't keep your data / application state between requests.
PHP is like your dog and a version being EOL'd is like your dog dying. Yeah, it's still a dog, it's still there. You can technically still do stuff with it. But that'd be weird and you probably really shouldn't.
That thought is what worries me. I fear that's a widely held prejudice that will affect the perceived value of the technology we're building. 
They don't do the same thing. OPcache eliminates the compilation overhead (and adds some memory overhead) and leaves in the loading overhead. Preloading eliminates the loading overhead with essentially zero drawbacks.
Holy crap! I love the typed class properties. It's the one thing I've wanted as I'm from a Java background. This is great news!!
Gotcha, that makes sense and is a lot more informative than the article. That would save a lot of CPU cycles. Thanks for spelling it out.
&gt; How is it faster or instant? In this model, the entire code base has to be read in? That takes a long time. It doesn't work like this. First, it's not the entire codebase, it's whatever you choose. Second, right now the code you use is "read in" on every page request. With preloading it's read once per process (so basically once per thousands of page requests). Which one seems more efficient?
&gt; your guys are capable of completing the project using PHP within 6 months, but you decide to go with Go (or Python, or Ruby, etc.). They need time to learn the language, and let's say they're done &gt; within 12 months (I'm being very generous here). You spent 6 months extra without any visible gain except the fact you can market the product saying "we use X" This is the reason why I signed off on using PHP. I have to respect the skills of the team. I know buzzwords don't make great technical guide posts (just like my bs detector goes off whenever I hear someone say "Best Practices"). But not being a PHP dev myself is a big black mark against it (how do I directly validate quality? It's much harder if you're not fluent in the language. I'm spending mips on just understanding the thing rather than evaluating it). The currency of the language in the market is another factor, but is much less of one than my fluency. 
My bad, I had done it via docblock!
Isn't opcache shared between processes in PHP-FPM? So, it is read once and never pulled from the file again until opcache is cleared. &amp;#x200B; The code I use is *not* pulled in on every request from the source, it is pulled from opcache.
I've said this before on here, but FFIs are a big deal for me. We use a lot of ffmpeg at my work, the overhead of calling the ffmpeg binary over shell_exec is _huge_, being able to (preload) that in as an FFI dependency and call it natively would be a huge performance benefit and cost saving for us. PHP 7.4 looks like it's going to massively improve things for my company.
Dead : not living. Past EOL. PHP 5 is dead. EOL: at the end of life. Not dead yet, but it is recommended to upgrade as soon as possible.
Good times indeed: 5.6: `$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';` 7.0: `$username = $_GET['user'] ?? 'nobody';` 7.4: `$username ??= 'nobody';`
If you are Java coder, stick to Symfony. It is modern FW with infinite number of features, it is statically compiled (unique thing in PHP) so you can't make a mistake, follows best programming practices... and is crazy fast! Because of static container, nr of services won't affect the speed. &amp;#x200B; And you are familiar with annotations. Before you start; install phpstan and always use it on max level. Do that, and you will like at home.
PHP 7.0 will be supported on Debian 9 LTS till 2022.
PHP's object oriented features borrow heavily from Java's OOP designs. I learned the basics of Java in college, became an expert in PHP over 6+ years, and have recently moved back into the Java space. The OOP code I write in Java and the code I write in PHP are incredibly similar in style. &amp;#x200B; Many things will be familiar: * Accessors are mostly the same (public, protected, private) work as expected. There is no package private though. * Subclassing/Inheritance works the same. * Interfaces work the same. * Dependency Injection is a common and known pattern within many frameworks. * Namespacing works the same as Java packages (as long as you're using a common autoloader) * Dependency management tools should work roughly the same (PHP uses composer) * PHPUnit borrows a ton from Junit. Tests get expressed a little differently, but I picked up Junit/Mockito very quickly coming from knowing PHPUnit. Some things are different: * Dollar signs everywhere. These let the interpreter know what is a variable. * PHP has a dynamic type system. Values have types, but variables can store any value. * Since variables don't have a defined type they can store, they don't need declared first (no `int a; a = 5;`). Assigning a variable declares it and sets its value. e.g. `$a = 5;` * Types can be enforced for function arguments and return types. These are called type hints. * == vs ===. == will attempt to resolve any type differences first and will lead to things like 1 == "1" being true. === will prevent the type conversion. * There is no method overloading in PHP. There can only be one method with the same name in a scope. Method overriding still works as expected though. * Arrows instead of dots for object properties and method calls (I think this got borrowed from C++). `$someObject-&gt;setProperty($value);` instead of `someObject.setProperty(value);` in Java. * When referencing an object property from within the object, you must use `$this-&gt;someProperty`. PHP only looks at local scope without that. * PHP arrays are an optimized and heavily used datatype. Calling it an "array" is a bit of a misnomer, as it's closer to a dictionary, but it fills the role of array, list, dictionary/hashmap for the language. * PHP's standard library leaves a bit to be desired. It's not very OOP, but it is pragmatic and works well enough. PHP is a fantastic language overall and it's definitely been evolving in the right direction over the last 5 years. However, there are a lot of devs still out there that write bad code, and bad code in PHP tends to be worse than bad code in, say, Java. Make sure they use a good framework. I'm a big fan of Symfony (it's like Spring of the PHP world). I've heard good things of Laravel (an opinionated framework). I've worked heavily in Drupal 7 (would not recommend). Zend is another that I did not enjoy. Review the code. You may not be a PHP dev, but if something looks janky to you, it probably is. Couple things to get you up to speed. [https://phptherightway.com/](https://phptherightway.com/) \-- easy lookup of best practices and convention. [https://www.php-fig.org/psr/](https://www.php-fig.org/psr/) \-- community adopted standards. Notable documents are code style guides. and autoloading convention. &amp;#x200B;
I still have hope that generics will come eventually in php.
I wonder why we have to wait for so long. As soon as typed properties are merged, we could have new version.
PHP runs 80%+ of the internet. However, as the years drag on more and more of the pie will be eaten by JS/TS on the server if for no other reason than it is already used on the front-end. This trend will be exacerbated by the additional trend that more and more heavy lifting of your typical web app is being done in the browser and the server is being seen more and more as an API endpoint (REST or GraphQL or whatever). With all the previous being said I expect this shift to take 10 years or so to play out and become obvious. Nothing will happen overnight. By then we may be in a WASM world, front-end and back-end, but I can't tell that far out. WASM is a wildcard here. While it's clear a good chunk of processing will be performed by V8, or something like it, I am still uncertain whether the de facto language will be JS/TS or some language that is compiled to WASM. However, it is certainly obvious that if WASM becomes dominant then whatever we write for it will certainly be strongly and statically typed. One candidate for WASM is C# as it all of the benefits that a language like Java has (and its fan base) while not being encumbered by a terrible company like Oracle. We all agree NPM is ridiculous and terrible. Some solution will present itself in that space at some point simply because there is a desperate need for it. I fully expect SQL to still be used as well. However, it may have morphed a bit to allow it to be distributed while still keeping as much of its relational nature as it can. Java will continue to slowly wane over the next 40 years and become the next Cobol. If C# doesn't find a new life with WASM then it will as well. Python may continue to be used for teaching and academia. Any language that cannot run in the browser will slowly wane as well as all significant computing by users seems to be moving to the browser or derivative technologies (e.g. Electron, etc).
i'm just here to agree with a lot of these points. &amp;#x200B; `IMO the benefit of PHP over Node is that it’s not node.` \^ big facts. &amp;#x200B; `If you aren’t using PHP or Golang for web development in 2019 you’re doing it wrong` \^ even bigger facts. &amp;#x200B;
These but the preloader doesn’t preload opcodes. It preloads declarations. Which get defined after said opcodes get executed. You basically save on interpreting dozens of files. 
Sounds good to me. Less redundant code is good for my laziness, and arguably productivity.
Your questions will inevitably yield opinionated answers, but I'll try to give it a go: * Some will say PHP is dying (especially people from the JS community), but to be honest it's very much alive. True, it powers the vast majority of the web, but that's not what's keeping it alive: that's the community. New releases of the language itself are published yearly, and there are hundreds of very high quality libraries, tools, and frameworks. Composer is arguably one of the best package managers out there (the best in my opinion), you have mature frameworks (Symfony, Laravel, etc), interesting new paradigms (ReactPHP, Swoole), and overall a healthy and thriving ecosystem. * Compared to Java, it's simply leaner and faster to develop with, without sacrificing too much in terms of quality (plus, PHP types are non-nullable by default, which is a huge plus). Compared to JS, this is subjective but to me it feels much more structured. Plus, a lot of interesting paradigms that were popularized by JS are being introduced in PHP (middleware, for instance). In terms of performance, to be perfectly honest I would never recommend scaling at the language level, so they're "equal enough" in my view. *Thanks to WordPress, its usage is sky-high, so it's difficult to increase. * Nowadays it's used mostly as OO, with a sprinkle of procedural. For instance, there is no `public static void main` which gets automatically executed, it starts with a procedural script which usually then sets up a OOP environment for the rest of the application. * I think that depends on the country. PHP may not be fancy and shiny as other languages, but there's still a rock solid user base which thrives underneath the surface. But again, my local reality could be different than yours. Hope this helps you understand more of PHP!
it helps a great deal. Thank you. My mind is much more at ease from this thread.
Compelling view of future trends. Thank you. I'm not worried about having to re-write the product in 10 years. That sounds like a problem I'd like to have.
Same. They would save so much code bloat in the project I'm currently working on. There has been a [Generic Types and Functions RFC](https://wiki.php.net/rfc/generics) sitting there for 3 years now, but as far as I understand the process, there is very little chance of a vote without a patch and the RFC’s author is not a C coder.
I see. Personally, I'm terrible Java dev, because I know PHP. No matter what features Java has or how someone else can master it, I will be terrible Java dev. I prefer the language the team knows best. To your issue: &gt; In PHP I'll be flying blind. Is it the right framework? Is this the right way to implement a solution for this problem in PHP? If I have a project in Java (I know almost nothing about), I'd hire a Java consultant to help me with this.
Preloading is going to be huge for frameworks. It's also going to be a double edged sword - it means monolithic, heavy framework code can come back into fashion.
Actually, `??=` feature didn't get merged for last 2 years and there is no-one who would over take it - https://github.com/php/php-src/pull/1795#issuecomment-425748467
&gt; The title is misleading though, it could be just me but when I saw it I thought "what, he's going to compare Traits AGAINST Interfaces? That's not even in the same ballpark". I was glad I was wrong :) I had the same initial reaction. Nothing shocks me anymore, not after going back to school and tutoring some girls in python whose first question was “what is the difference between a class and a function”. Good work, OP.
https://www.tomasvotruba.cz/blog/2018/11/15/how-to-get-php-74-typed-properties-to-your-code-in-few-seconds/
I honestly cant remember what version of netbeans i used to use -- since getting phpstorm i have successfully repressed all memory of those terrible times.
Thank you. This is super helpful. You're making me believe that PHP is a lot closer in spirit to Java than I thought. I just have to get used to those arrows and dollar signs! I'll definitely be looking into the frameworks you recommend.
FFI under PHP right now is slow as molasses, FFI could be used to save memory but nothing more. 
I'll look into Symfony. Thanks for the tip.
PHPStorm
Press F to pay respect. PHP 7.0 was good but it was killed by PHP 7.1
F
If you can say, what kind of thing are you using `ffmpeg` for where you're calling it frequently enough that the overhead of the `shellexec` call is significant? I use it with PHP on a large project, but it's part of a queued service where each `ffmpeg` job is taking upwards of a minute, so the overhead of a call to it is negligible. Interested to find out what kind of work you're doing with it.
Notepad++, like god intended.
I'm the head of tech at a live streaming video company. We process millions of very small video chunks (around 1-2 seconds per piece where quality isn't particularly important) so the average encoding time is on the order of 100-200ms. Having a (performant) pre-loaded FFI would probably take ~20% of the processing time off, since we would be able to pick and choose the parts we need directly from libav instead of using ffmpeg. Recently we've been reimplementing some of our core in Rust instead, and the performance gains there have been incredible, so we're unlikely to actually use this PHP FFI feature in production, but had we not started on that journey, this would have been crucial.
I probably wouldn't use PHP if the goal is to produce a simple search implementation. I've used Lunr.js to create a search system on a static site before, and that's small and simple enough to be practical for that use case, but it would mean writing some JavaScript. If you don't already know a suitable programming language JS might be a better idea anyway because pretty much every developer has to know it.
Very interesting stream, thanks again.
I don't think it changes your code structure either way. If anything, I'd think it would discourage monoliths in favor of smaller, more scoped dependencies since in the simple/lazy case of `preload('*.php'*);` (if you will) you'd waste a ton of memory on stuff that will _never_ get used.
You don't really need to add recipe for private library to work.
"Pardon the interruption." I wish people would post less on [medium.com](https://medium.com).
Right, but the opcache still needs to be interpreted into code that's actually used by the runtime. The simplest explanation is that `class_exists('ClassYouNeed', false);` returns true with preloading, and false with only opcache. Or at least that's my understanding of it, based on reading the RFC. If you preloaded your entire application, you should in theory be able to not even have an autoloader (and not have to replace it with hundreds of includes)
Same here, just had to fix some warnings and install pecl-zip (not included anymore) . Using Smarty and good old libraries and no problems at all with production customers (on a critical day by day app use btw, but nothing extremely fancy)
True, but just a "compose require" is nice, so ideally I'd like to add a recipe to my private bundle(s).
[https://wiki.php.net/rfc/arrow\_functions](https://wiki.php.net/rfc/arrow_functions) really abandoned? Will be great sometimes!
PHPStorm as well
The docblock is useful for static analysis. It's not forced on execution (in fact, it's totally ignored)
It could be a breaking change, I think. So we have to wait until everything is ready.
Every time I see this, I keep thinking patrón instead of patreon.
Why use this if you can optimise your code or just use a worker and push a job? 
**Is PHP still a thriving development platform? Or is it like Java, where it's glory days are behind it?** A: Very much still thriving, although it does (imo) get some of that "old and outdated" reputation similar to Java. The PHP interpreter 7.x line from the last few years has made the language very fast for an interpreted language. Also, there's been a lot of promising work to address PHP's other strength/weakness (depending on how you look at it - I'll explain). Here's a simplistic speed test for calculating pi: [https://github.com/niklas-heer/speed-comparison](https://github.com/niklas-heer/speed-comparison) *(note: I suspect the hotspot compiler hurt Java's ranking here. PHP7 is fast, but Java should still beat it in an algorithm test).* While the interpreter for PHP7 is very fast, the biggest speed impediment is that each request from a web server that hits it is treated like a blank slate. This means any files that need to be fetched, framework bootstrapping, etc, all need to be done on each and every request. In the days when PHP was powering websites from different people that all shared the same host server, this stateless, start-from-scratch methodology made a lot of sense. Nowadays, the benefit of this methodology is less profound and in many cases you'd rather hold those files in memory and save the cost of having to reload them for every request. Along those lines, work has been done by multiple projects to trade away some of the statelessness of PHP in exchange for less setup cost. see: * [Swoole](https://github.com/swoole/swoole-src) = a C plugin for PHP that lets you run Golang style coroutines and/or powerful HTTP server from PHP code (but executes in C) * [RoadRunner](https://github.com/spiral/roadrunner) = Similar to Swoole, but powered by Golang. It uses [Goridge](https://github.com/spiral/goridge) to enable PHP code to call stuff written in Go and vice-versa. * [PHP PM](https://github.com/php-pm/php-pm) * [PHPFastCGI](http://phpfastcgi.github.io/general/2015/11/04/introducing-phpfastcgi.html) Of these, the most popular is Swoole, although much of its usage and development is from Chinese developers and businesses. That said, billion+ dollar companies [Tencent](https://github.com/Tencent/tsf), [Baidu](https://translate.google.com/translate?hl=en&amp;sl=zh-CN&amp;u=https://wiki.swoole.com/wiki/page/p-baidu.html&amp;prev=search), and supposedly Alibaba use it to power some of their services. The other big things these projects provide to PHP is parallel programming and the ability to utilize server PUSH technologies rather than having to rely on older methods such as long polling. &amp;#x200B; **What benefits does PHP have over node.js or Java?** A: It has better object oriented support than JS, and is easier to use then Java. That said, Javascript has been HTTP libraries and Java can better do heavy workloads on its own without needing to hand off to a C or GO library. **Is its usage continuing to grow os is its marketshare on the decline?** I would expect it's website dominance to slowly decline (because WordPress sucks and eventually something better will take root), but on the app development side I would expect it to stay steady and maybe even grow. **Is it a true OOL or does it just have some OO concepts bolted on?** True OOL. **Is PHP an attractive language in the marketplace today or is it considered a bit 'old hat'?** Suffers some of the "old hat" rep that plagues Java. If you want to use it, but are concerned about reputation, you could utilize Swoole or RoadRunner/Gobridge and say that your app runs on PHP+GO or PHP+C on the back-end.
It's not solving any problem I had, but it's subverting tools I loved.
Conceptually it has been worked on in that time. I met with a few people weekly for a while to brainstorm and work through certain issues. I decided to pursue the improved variance RFC, as it is a prerequisite to moving built-in interfaces such as `ArrayAccess`, `Iterator`, etc, to be generic, which I feel is an important foundation to build on.
I've lost count of the number of times I've switched from writing ES6 to PHP and wondered why the arrow function syntax is causing parse errors.
Ah interesting, I did wonder if it was related to streaming. Thanks for the answer.
/u/MorissonLevi I haven't caught this on the internals list, is this abandoned for good, or just this form of the proposal? Any other news on?
I can't type the whole code due to fact I'm on phone, but you can google for code on how to display from mysql using php and in query just add ORDER BY id DESC LIMIT 3.
I use phpstorm, because is the IDE with more automatic refactorings (so you can rename or move things without break everything). Has a lot of plugins that helps with autocomplete for frameworks and to avoid errors, like [https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-](https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-) .
`SELECT * FROM table ORDER BY id DESC LIMIT 3`
I created this library because when I used other php client library they seemed often too complex for my simple tasks (like call some API), huge and difficult to remember. Now I need some feedback 🙂 Do you like it? the library could be easier? the README is clear? Do you have some suggestions on how to improve the API? 
2015!? Holy shit... I still remember reading about the release. Time. *Flies*.
We'd like to have arrow functions, but unfortunately there are two very contentious points (syntax and binding semantics), that block this from going forward.
Be careful, &lt;code&gt;??=&lt;/code&gt; feature was accepted to PHP 7.2. But it didn't get merged for last 2 years and there is no-one who would overtake it - https://github.com/php/php-src/pull/1795#issuecomment-425748467
There is ever simple [migraiton path for properties with `@var` annotations](https://www.tomasvotruba.cz/blog/2018/11/15/how-to-get-php-74-typed-properties-to-your-code-in-few-seconds/)
I guess you could say... the feature couldn't coalesce assign an implementer. 
For anyone wondering WTH FFI is https://github.com/dstogov/php-ffi
Where I come from, a curl wrapper is not a HTTP client library.
&gt; Previously, most developers would have created a `final abstract BaseClass` from which most of their classes would extend. 🤔
Thank you two :)
I can't seem to find anything on Internals since the discussion back in mid-2017 Is that really where arrow functions died as a proposal? Over `fn` vs `function` and binding by ref or value?
&gt; no-nonsense ... focused on DX 🤔 At a first glance the code looks well structured, no doubt. Love type declarations (though I think there could be some more, like the arguments in https://github.com/fain182/diciotto/blob/master/src/HttpClient.php#L75 ). I'm torn about the PSR-18 interface (and friends) simply because I miss some equivalent to Guzzlehttp `$options` which, with it's flexibility, makes all the difference. I value well architectured software but in practice I need flexibility what $options does provide. I think when I want simple, I just use `file_get_contents()` but usually you don't, When I use an http client, I need things like: - logging requests - retry logic - mocking requests for my tests So, PSR or not, I would still go with Guzzlehttp at the moment. Good luck though!
/u/CODESIGN2 Thanks for the link. I am adding this module to the PHP 7.4 Docker image for playing around with: https://github.com/devilbox/docker-php-fpm/pull/89
I assume this is for a cam site and I salute you
Ha! It’s unfortunately more boring business-to-business stuff! 😂
The idea of Flex is that you are able to install and download all packages you need in one go. This works perfect for publicly available packages and with the flex recipes it automatically enables and configures the package itself. So the same can still apply for private packages, however your recipe is publicly available if you choose to use the Sensio hosted Flex and you are limited in the availability of aliases. However you can choose to use [a self hosted flex cache proxy](https://github.com/moay/symfony-flex-server) which basically allows you to add a private package repository like Satis and allows you to make private recipes in a private repository. So you are not entirely bound to the Sensio hosted recipe server. However I understand their business model for this. A few people try to host it themself (projects like satis &amp; the mentioned flex cache proxy) but most of them will just pay the fee for using private recipes and be done with it.
Oof
I want Silex back. 
Auto-increment id is not required to be in any order, only that it is unique. The table has a date_time so I’d suggest ORDER BY date_time DESC LIMIT 3
Netbeans 8.2 + mobile environment (homemade)
&gt; Java can better do heavy workloads on its own without needing to hand off to a C or GO library Are you saying that if I have computationally intensive work, that I shouldn't be doing it in PHP? I'll be doing database access a lot (writing and reading millions of rows) but my actual processing on them won't be so heavy. I assume that isn't a weakness of PHP given that it's the language of websites. &gt; If you want to use it, but are concerned about reputation, you could utilize Swoole or RoadRunner/Gobridge and say that your app runs on PHP+GO Thanks. I'll keep that in mind. &gt; I would expect its website dominance to slowly decline (because WordPress sucks imo and eventually something better will take root) Noob question: In what way is PHP wedded to Wordpress? Thanks for the thoughtful response. For a thread on 0 upvotes, this community has been extremely generous in their answers.
Midnight Commander :) No kidding.. Using for years with success. But now i am also looking for Editor/IDE. Which one of available Editors or IDE will autocomplete function names also from scripts included with include() or require() ?
I finally switched away to PHPStorm a few months ago. Its better. I still think there are parts of NetBeans git merge tool that are far superior to PHPStorm. NetBeans is also a tad faster, which is amazing, because NetBeans is slow. I don't like how PHPStorm opens different projects in a separate window either. NetBeans handled multiple projects open in a single window. Beyond that, PHPStorm wins. I'll have to checkout out NetBeans 10. I can't imagine it being better for PHP development though.
I keep doing that with `this.` and `$this-&gt;`
God intended for us to code in `vi` but windows devs couldn’t figure out how to exit the app.
And less room for mistakes. Spent some time tracking down a bug where the second term in the “before” version of this change was accidentally typed as a different variable that was one letter off from the first. 
I don't see how that changes anything. Monoliths are *already* loading everything into memory - on each request. This allows them to run faster.
&gt; The performance gain comes of course with a cost: if the source of preloaded files are changed, the server has to be restarted. Why does that need to be the case? Can't it watch the file system and listen to file events for changes and then swap the file in memory?
What about bounty system? I understand it is a complex issue and OSS doesn't bring money so bounties might change that.
&gt;it is statically compiled (unique thing in PHP) so you can't make a mistake For what it's worth the Symfony container is compiled, not your entire application, you can still make a lot mistakes, it will just check that your container config is sane. This also isn't unique to Symfony in the PHP ecosystem, as PHP-DI and other containers also feature compilation.
Unless a monolith is starting with 4000 lines of includes (or something functionally equivalent), it’s not likely loading that much on every request. Probably somewhere between 5-20% of the files. It just means a single large codebase (as compared to splitting into smaller dependencies or even separate services), not a disorganized blob of spaghetti code. Of course it doesn’t also mean it *is* organized either. Both exist. 
I am interested to why people don’t have @var annotations... Don’t most IDEs autogenerate them anyways? It looked like setting an empty value and typing “/*” was pretty standard practice. Surprised to see them lacking in Symfony. 
What IDEs auto generate them (without using an IDE function to create every class property)? I only include the @var annotations for properties referencing objects so my IDE (PhpStorm) knows their type for autocomplete/static analysis.
In Eclipse: If I type &gt; protected $var = “” Then type &gt; /* And press enter, it will write /** * * @var string */ I don’t have to use IDE functions to generate it, I just type. PHPStorm doesn’t do that?
I used to switch between Netbeans and EclipsePDT constantly. Then moved to PHPStorm and didn't look back. Netbeans always was ahead of the game in built-in features. But its also a bit slow and clunky and if there is a particular plugin you need that is available in eclipse or PHPStorm it will rarely be available in Netbeans. Netbeans feels like its built by a guy with some great ideas, but it lacks the community support the other options have. Plugin marketplaces are what makes modern IDE's. These days I'm actually using VSCode more than PHPStorm, and with the right plugins I don't miss many features. Plus its faster. &amp;#x200B;
Oh, yes it does.
I agree, I just didn't want to go into too much details to person still learning PHP. For the actual code, I gave an example of PHPStan; those 2 combined would give a sense of a real, static language.
If the sending and receipt severs support SMTPS (SSL SMTP) you could use that or send yourself an email about the new submission and fetch the data. 
For the record, you aren't _required_ to use flex. It just makes configuring dependencies easier. Honestly, I'm not building new projects often enough to really see a benefit. I like the idea of recipes, but agree that this implementation was likely created to be a revenue stream.
Not if it's running as CLI.
The answer you seek is here: [max_execution_time](http://php.net/manual/en/info.configuration.php)
im using actually a laravel app, i create a command for that task
ohh so that's applicable in my situation that im using a artisan command (which is cli) to run that task? right?
 [root@delta ~]# php -r 'var_dump(ini_get("max_execution_time"), PHP_SAPI);' string(1) "0" string(3) "cli" His comment confirms. It won't kill the process in CLI mode.
ohh okay men, thanks a lot!
Look into [Horizon](https://horizon.laravel.com/) if you haven't yet for queue management. It'll allow you to respawn failed processes and view the exception log too. It's good stuff!
As mentioned in the post.
I am of the philosophy, it is useful to build something to understand it. I am also of the philosophy that if you're home growing a library, it is ideal to open source it. While I will still use guzzle, I say kudos to you. Good work! 
This is my motto too. There is no better tutorial to understand something than trying to recreate that. And, most of the popular libs now, once were homegrown. Heck.....even PHP was homegrown by some random C guy. :p
[removed]
&gt; For the record, you aren't _required_ to use flex Usually when this is said, it turns out that the community uses precisely that method and tailors it's tools, processes, and libraries around it, making _not_ using the thing in question akin to shooting yourself or your career in the foot.
Netbeans fan here..... I won't say netbeans is the best IDE out there... It's not. But, it's enough to satisfy my needs. Netbeans 8.2 was okay, but aged a bit. Apache adopted netbeans and updated a bit. Netbeans 10.0 supports \^PHP 7.3. However, I did not find any ground-breaking update in it.
I like this website, the article was very readable, goes straight to the point and the design is clean. Good job!
cli should have max execution time disabled. You can always check tho.
So what where does PHP 4 fit on this? I still use PHP 4 for 1 project .
On opening another project you are asked whether to open in a new window, replace current or add to current. Seems to fit your needs :)
Just like it usually happens, when trying to do the "most secure way" you are overreacting. For example, PHPMailer apparently would use the htmlspecialchars function on all input data, otherwise it may spoil the appearance. Checking the size of each file to make sure it is less than the “upload_max_filesize” setting makes very little sense as in such a case a file won't be downloaded at all. Regarding the security in general, it is a wide topic. What kind of security concerns you most? 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I switched over to PhpStorm from Netbeans 7 right as 8 was released, and have not regretted it a single moment. I didn't realize it at the time, but Netbeans (while being a good free alternative) doesn't have many of the features that makes developing with PHP 100% fun and simple. Netbeans also have bad performance penalties and [does not support modern PHP](https://netbeans.org/features/php/#im1).
This made me laugh haha
I guess it could, if someone added that. Although this is one feature where Linux is behind Windows from my understanding. NTFS lets software watch for changes on the whole filesystem, whereas inotify on Linux only operates on a single folder, and not recursively. So anything watching a recursive set of folders need to watch them all separately. Still possible, just harder I guess. There's something newish called `fanotify` - I'm not sure how well supported it is though. That's my limited understanding anyway. 
How about increasing the PHPStan level one after another, or if that is too much, then enabling one rule after another, fixing errors as you go forward? 
There is not many bundles which have a complicated process, most of them are just about creating the `.yml` with default values which you had to do manually when without/before flex. &gt;The main issue is, why is the recipe not included in the bundle? I feel the same as a library maintainer, but the answer is easy: it is easier to keep track and monitor one repo than thousands of arbitrary repositories. &gt;I really don't like the idea to rely on a service maintained and redacted by Fabien and where you have to pay for private recipes in the future Well then you can keep your private packages elsewhere as usual and have a manual install process like before flex. No big deal is it? &gt;I understand that Fabien needs to make some money, but this is charging for a service that shouldn't exist at all Private packages management involve hosting a service to manage stuff. It's gonna take time and maintenance, I don't see why this should be provided for free. Same reasoning for Composer private packages by the way. &gt;so I don't think that should be the single reason to rely on the recipes repository. TL:DR; (and based on my previous answers) It's up to the maintainers because the workload for maintenance, guaranteeing the healthy state of the recipes and monitoring them is on them.
So you want a convenient feature but not read to pay for it? You're receiving a high quality framework for free and complaining that someone actually wants to get paid for their time spent on it? 
Love this tool.
If you don't like it, pick a different framework. You get this shit for free - change it if you want it in a different way. But this complaining about open source software, which you get for free to bootstrap your business, has to stop. You get free packages as they are, no rights derived.
Uh... your dog died 15 years ago but you just can't let go so you keep trying to play fetch with the skeletal remains?
&gt; Auto-increment id is not required to be in any order How's that? Got any example?
Phpstorm pisses all over Eclipse. Worth every cent.
amid the controversy patreon is in, maybe not the best timing?
RTFM
This doesn't really add to the discussion. To use your words...if you don't like it, don't read the complaints.
not to say you can't have both \`final\` and \`abstract\` on the same class
Really? See https://3v4l.org/YvGNS.
&gt; I feel the same as a library maintainer, but the answer is easy: it is easier to keep track and monitor one repo than thousands of arbitrary repositories. I don't agree. The bundle maintainer knows best what's necessary for the configuration, so it doesn't make sense to make someone else responsible for that part. And for the bundle maintainer it's easier to keep track of his/her own repo than a central repo. &gt; Well then you can keep your private packages elsewhere as usual and have a manual install process like before flex. No big deal is it? This is just repeating "For the record, you aren't required to use flex". &gt; Private packages management involve hosting a service to manage stuff. It's gonna take time and maintenance, I don't see why this should be provided for free. Same reasoning for Composer private packages by the way. The service shouldn't exist. Including the recipes in the bundle repo doesn't add hosting costs.
Yes, it says what I said, you can't have them both.
What's your point, then?
My point was that not only you can't extend from `final` as it was quoted by you, you can't even have both keywords together. &amp;#x200B; I meant to supply your 🤔with additional 🤔
I don't mind paying for a service like Blackfire, certification etc, which clearly solve a problem. But this unnecessary flex repo service is not there to solve a problem, but just to make money.
Because you're using Laravel, you should check out https://laravel.com/docs/5.7/scheduling You can also schedule Artisan commands: https://laravel.com/docs/5.7/scheduling#scheduling-artisan-commands
Well I’m concerned that I’m not really doing any security checks on the files that get sent to me by email. Someone could easily disguise a file as a png, jpeg or jpg simply by changing the extension. I’m not sure if that’s a security concern though because won’t my PC just interpret that file based on its file extension anyway (meaning that if it’s a png then my PC will only read it as an image file and hence it couldn’t cause any issues)? I read somewhere however that this is in fact a security issue but I couldn’t find where I read it and how to prevent it. I’m also concerned about the text inputs such as the name and email inputs. Does using the htmlspecialchar function on the input fields prevent just about all security flaws? As for checking the image sizes, I did that just so my error message would show up rather than the PHP error message which is quite ugly (not a security concern, mostly just aesthetics).
&gt; The idea of Flex is that you are able to install and download all packages you need in one go. This works perfect for publicly available packages and with the flex recipes it automatically enables and configures the package itself. This could work without creating the recipe repository, as I mentioned before. So there's no need to introduce a service like that.
YAUA - Yet Another Useless Article
And why is that a problem? Making money for a company seems like a good idea. 
First, are you really sure you need microservices :) ?
Why is there nothing really talking about how it works? Okay, it’s a deployer... Does it just `git checkout` on a remote host machine?
Many people around here use this? I might have to check it out. I've been wanting to automatically deployments with gitlab but might be interested in trying this as well. 
Thank you, your feedback is really valuable for me :-) `$options` is exactly what I would like to avoid, because often is difficult to remember and IDE often doesn't help in autocomplete and similar... I understand that for a minority of use cases this is unavoidable, but I am trying to satisfy the 80% without complicating too much the interface. I agree with you that logging requests and retry logic should be included, I will consider them for the next releases :-) (for the mocking I suppose that mock the psr18 interfaces should be enough, but I didn't try it yet) &amp;#x200B; What you do not like about the description 'no-nonsense....' ? :-)
I agree, thank you for the support!
Thank you for your suggestion, I prefer naming things for the goal they have instead of naming them on the implementation, but maybe I could make it more explicit in the README... &amp;#x200B;
I've used it for a small side project a while ago. I have to say I was impressed by how smooth everything was.
The political bias part? Given that this is about a technical project, I'd say it's not really affecting Doctrine Project. It's a platform: we may migrate to something else if/when needed.
It allows you to programmatically automate your deployment. If all your deployment is, is that you do git checkout then you can have it do that. But it can do so much more. Head on over to https://deployer.org/ to read the docs.
Yes, we deploy everything with deployer now. Have done for about 2 years. Great tool. We are moving to Kubernetes so it'll get retired then.
This should be in the title, it's easy to overlook. I assumed every accepted RFC will get to the PHP core or is told otherwise. This one is claimed as PHP 7.2, PHP 7.3 or PHP 7.4 feature, depending on the source. Even PHP_CodeSniffer has the token for it, but PHP does not :)
It's hard to put them on manually, that's all :) Symfony code base is huge, so any code improvements in this direction are stopped due to "maintenance overhead". With instant upgrade and Rector there is no such problem.
What controversy do you mean?
Haven't looked at it properly but I'm pretty sure it'll rsync/scp files across to their destination.
Btw, IDE doesn't autogenerate them, it uses static analysis and sometimes gets it right. But nothing can beat `@var` annotation. Good news is, [static analysis autogenerates them](https://www.tomasvotruba.cz/blog/2019/01/03/how-to-complete-type-declarations-without-docblocks-with-rector/#properties-without-code-var-code). 
I started reading the docs and lost interest after a while because nothing deploys all things and it doesn’t make clear what it does.
You really don't see the difference?
So it handles some of your deployment then? Not exactly a deployer as much as a code pusher.
Not only :D I wrote rsync recipe especially for machines on which you can't run commands but can send files to :)
That's my recipe :P but it can do waaaay more
No, it'll do more than that. It seems to be more or less a task runner that works over ssh. So it'll push code and then you can execute whatever other tasks on remote you need to do. Bit like capistrano (https://capistranorb.com/) 
It does deployment too.
supporting free and open concepts should be taken into consideration imho. whether it's speech or software.
It’ll deploy new docker containers and launch new VMs, then run SQL migrations?
Or beer ;-)
really easy for prototyping deployment, great tool! 
It can run migrations, support for cloud is based on whatever yoi like - if it can run commands then it can deploy to it, versioning handled via git - you can deploy master, tags, branches etc. Handles develop/staging/testing/production and more environments, multiple server configurations and bunch of other stuff. Is something missing? do a PR against [https://github.com/deployphp/recipes](https://github.com/deployphp/recipes)
You can write recipe for that. &amp;#x200B; TBH it's more of capistrano-like deployments.
I now understand what it is. Nothing about it makes that clear up front. Thanks.
&gt; `$options` is exactly what I would like to avoid, because often is difficult to remember and IDE often doesn't help in autocomplete and similar +1
&gt; http://lwn.net/2001/0809/a/adobe-pdf-vul.php3 That is an old but interesting post about hiding executable code within PDF's aimed towards windows users, whilst it is quite old and specific it is still applicable today. Executable code can be hidden in pretty much any type of file(jpg, zip, pdf, etc) the vulnerability is in how those files are then executed. &gt; https://stackoverflow.com/questions/21525125/check-image-for-malicious-code-and-delete-it &gt; https://stackoverflow.com/questions/690108/how-to-prevent-every-malicious-file-upload-on-my-server-check-file-type Those SO post specifically covers several use cases and how to detect them. By no means are these exhaustive, the defensive side of security is always playing a game of catch up.
&gt; So yeah, please change my mind :) So you want a different perspective but don't like what you read ? pls.
For the image types there is very little you can do. Although you can try to make sure that a file is a correct image file, just as not to send a deliberately broken file, but it by no means would prevent any other content in the said file. So, security-wise checking the extension is enough. Regarding htmlspecialchar it is quite the opposite: it's only **one** security flaw it prevents, which is likely not present in your case. However you can test PHPmailer adding some HTML tags to your inputs and then open the email and see what it will be. Regarding image size, I don't really get what wrror you are talking about. best to my knowledge, such an error is raised before your script started to run so I don'ty see how it could help. Besides, it's very silly way to prevent one particular error message from displaying, as you can (and should) set it once for all errors on a live server, not catching them one by one littering your code with thousands verifications. See my article on the [proper PHP error reporting](https://phpdelusions.net/articles/error_reporting)
Apologies - that made no sense! Have updated the post now. Thanks for spotting.
I want it too, but what I can't understand, is why the server reset is needed. This seems like a wierd decision for something good. Why can't it be more like opcode caching?
switch to slim, it's like silex, but with an active user group :-)
7.3.1 with xdebug working (on windows)
The error I get with the image size is that images can’t be posted to the PHP server if they above the max filesize limit. The file won’t be assigned a path i.e. $_FILES[“userFile”][“tmp_name”] will not return a path to the users file if it is above the size limit as set in php.ini. So if you try to add an attachment to a PHPMailer class using the above syntax you will get an error since no path was really given. Thanks for your help with the other two problems. I think I’m just being heaps paranoid about someone doing something malicious to my site or email.
thanks bro
Patreon banned someone for using the n-word on YouTube. 
Good insight. I wasn't aware of the limitations involved regarding inotify.
&gt; If you have a fast and modern car, that doesn't instantly mean you're an excellent driver, right? that's true; yet most people will judge you by your car and not your driving skills. The worst Porsche driver will often be regarded more highly than the most skilled Volvo driver. In the same way, many customers will judge you based on the language/technology you used, even though (or especially if) they do not understand a thing about the that choice. Just yesterday we had to deal with a customer who bitterly complained about us not using React for his project and instead staying plain JS - because he had it in his mind that React was the swaggy, modern way to do things and offers certain benefits; except the ones he listed actually have nothing to do with React and were utilised by our solution anyway. React would've been overkill, but the client apparently would've been more satisfied regardless. So in that regard, I do understand OP's concerns. It depends on what kind of business you run, what kind of clients you have. Ofc, if you're making some sort of consumer product, it won't matter much which language/technology you use and you should use whatever suits both the job and the team best; but sometimes the technology used really CAN be a big selling point. There's many companies out there that just hear about some recent trend and feel like they should hop on that in some way. 
&gt; Laravel recipe should not run `artisan:cache:clear` in deploy task Lol, whats a bit of a whoops... glad they fixed that.
If I recall correctly, it follows a `git checkout` strategy on the remote host(s). However, it is flexible and I'm using the `rsync` strategy, since my CI pipeline builds the artifacts locally in the docker container, which it then rsyncs to the remote host(s) and then changes symlinks to the new release version.
I actually use this with automatically deployments in gitlab. Snippet from my `.gitlab-ci.yml` file script: - test -f deployer.phar || curl -LO https://deployer.org/deployer.phar - php deployer.phar deploy feature --revision $CI_COMMIT_SHA And a snippet from my deploy.php host('feature') -&gt;user('site') -&gt;forwardAgent() -&gt;set( 'deploy_path', function () { $rev = input()-&gt;getOption('revision'); return "/ext/{{application}}/feature/{$rev}"; } ) -&gt;set('keep_releases', 1); 
PHP wasn't originally designed for multi-byte character encodings, in part because it is written in C which also wasn't. While some languages (Python) have tried to radically change the language to make everything Unicode-based, PHP instead added a few multi-byte libraries and called it a day. In the typical modern application you only deal with one encoding, UTF-8. It is a convenient encoding because it supports all of Unicode, so it is universal insofar as supporting basically any kind of text, because it is a superset of ASCII, so any ASCII text stays identical and single-byte in UTF-8, and it also has some features that mean it behaves well in software with poor multi-byte and character encoding awareness. For UTF-8, you can use classic encoding-unaware single-byte operations for things like string concatenation, searching within strings (if case-sensitive and you don't care about certain characters that can be represented multiple ways in Unicode) and splitting strings. So, for a lot of modern PHP apps, they only need to use mb_ functions rarely, perhaps only when converting encodings. However, try writing an app which searches within Shift_JIS-encoded text instead and you will have a much harder time without mb_.
I’ll have to put in a request for it at work. I just jump between eclipse for PHP and atom for sass and javascript. Only moderately miserable. 
I prefer to get it all out of the way at once rather than in increments. 
Well, good luck with that. 
Plz I can only get so erect.
Does someone ever used Flex on a an app? If yes, what are your feeling about it? Might help make this debate advance with actual feedbacks.
I completely understand where you're coming from. &amp;#x200B; The same way I don't tell BMW to make square wheels, I expect that the customer doesn't tell me which tool I should use to build their house. I'm the builder. I choose tools. I used to deal with that type of customer that you described and one of my goals was never to go through that experience again. Luckily, for the past decade - I didn't have to deal with a customer who demanded a specific tech stack to be used. If we get someone asking for our services and has that kind of vibe and demeanor - we refuse the job. I know that many aren't in a position to outright refuse work, however that's where I wanted to be and it's done wonders for my stress levels.
I strongly disagree with the "unfortunately". but really cool library. Thanks for the work and sharing it :)
That's a rather nice match. Congrats Nik
Some good stuff here: [https://www.reddit.com/r/PHP/comments/2c4rwf/mb\_string\_functions\_should\_i\_be\_using\_them/](https://www.reddit.com/r/PHP/comments/2c4rwf/mb_string_functions_should_i_be_using_them/) &amp;#x200B; &amp;#x200B;
Definitely! Awesome for him &amp; awesome for us! :) I remember seeing his tweet &amp; wondering where he would end up. Best case scenario :)
Visual Studio Code, I like fast / distraction free editor and do not need extensive IDE features.
I like it, however I heavily dislike the naming of `withCheckSslCertificates(bool)`. Seeing as it checks certificates by default, it should just be a method called `withoutCheckingSslCertficates()` which just sets it to `false`. Also, generally when you have a `with*` method, it means the object is immutable, however `HttpClient` is *not* immutable (and IMO it should be)
Unpopular opinion. At first I thought this initiative is for people who have an interesting topic to discuss but have no public speaking experience. It turned out that this initiative is of that kind that is intended to "force" the diversity artificially: to take people who have no idea what to talk about and to make them to talk about something. To me there are two ways to provide the diversity: to provide a minority with a possibility or to artificially force the equal representation, no matter of the quality of the representatives, but just for sake of the equal representation. To be honest, I don't think that the second option can do any good. Instead of making people to speak at a conference, I would rather offer them a training, to let them grow as professionals to the level where they can do some research and then share its result with the audience. Surely it will take more effort than just take someone, write them a speech and then make them memorize it. but it will be fair, both to the speaker and the audience. 
I forgot about slim! Thanks! 
This is awesome!
I agree and luckily it doesn't happen too often here either. 
Why would I use this over a CI/CD system like CircleCI/Pipelines/Jenkins/Bamboo etc?
TLDR: Jetbrains hired Nikita (guy responsible for PHP 7 awesomeness &amp; many other sweet PHP core things) and is paying him to continue working on PHP core things.
I see the difference, I don't see the problem.
Awesome people awesoming together is the awesomest awesome and we all like awesomes! Great news, looking forward to what they do together, I'm sure it'll be great.
"nodejs" ?
Sometimes - though not often - you really do care about a string as being an array of bytes. E.g. setting content-length, or splitting strings into chunks to fit in a particular buffer size that will then be reassembled the same way at the other side. A plain old `strlen` or `substr` is the way to go in such cases. But in almost all other cases, mb_\* is the way to go.
I personally use the non prefixed versions when counting byte size, either to supply the content length of a response, or when keeping track of buffers when transferring large size files or streams. When using the mb versions in those cases, you would be misrepresenting or incorrectly tracking data.
As a subscriber, I’m damn proud of JetBrains
Once upon a time we had a contract with Smile. It did not go well, the final product was completely broken, going back to what they did in order to make it work, we were astonished by the amateurism in PHP development. I just hope this news does not mean that Smile engineers will be more involved in SensioLabs's products development.
it makes sense, I will fix this... thank you!
How can you be concerned? It has *synergy* in the intro text! **SYNERGY!!**
We're looking to add a chatfunction for our website that uses php and mysql. Does anybody know of any good libraries etc. that we can use? May be paid services as well. Preferably we're looking for the following: 1. no cloud,self hosted. 2. suitable for all devices. 3. ability to make private chatrooms &amp;#x200B; Does anybody have any recommendations? Would be greatly appreciated!
I thought mc has no own editor, it just uses whatever external cli editor is configured, like nano or vi
Am I a cunt if I can't stand superficial and useless texts like this one? &amp;#x200B; alliance market leaders synergy common vision same values and ambitions extensive in-house talent It's written as if messenger of God Allmighty flew down from Heavens and graced us with the Word. It's so full of bullshit noise, I want to puke with every sentence I force my brain to process. I've never heard of Smile, I hope they don't fuck up with this.
You know the difference between back-end and front-end?
I'm the same. I'm not sure the amount of new features justifies the price year-on-year, but if they're hiring Nik to continue to directly work on PHP, then I am 100% happy with the subscription cost.
You can use the decimal extension. See http://php-decimal.io
It's actually the scale (places behind the decimal point). Precision is significant digits. 
should better leave projects like that to the big dogs.
Maybe?
HAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHA
Interesting. Although it's not quite the same thing, I find myself thinking of RogueWave acquiring Zend Technologies. Acquired Oct 2015: http://www.zend.com/en/resources/news-and-events/newsroom/press/3683_rogue-wave-software-acquires-enterprise-php-leader-zend-acquisition-broadens-enterprise-strength-across-top-five-development-languages Core Zend folks set to depart, Oct 2018: https://zsuraski.blogspot.com/2018/10/the-future-of-zend-engine-and-zend.html I wonder if something similar will happen here.
[https://www.google.com](https://www.google.com) start here
&gt; PHP 6 was supposed to add native unicode support to PHP. &gt; ... &gt; What is the legacy of PHP 6's collapse? &gt; ,,, Source: https://www.phproundtable.com/episode/what-happened-to-php-6
The Jetbrains tools are quite good and worth the money if you're doing professional development. I've heard the IntelliJ Community + PHP plugin combination gets you close to PHPStorm's bundled functionality for free. Might be something to try if you're waiting on work to pay.
"PHP instead added a few multi-byte libraries and called it a day." Seems like an unfair statement, or am just way too old now? &gt; PHP 6 was supposed to add native unicode support to PHP. &gt; ... &gt; What is the legacy of PHP 6's collapse? &gt; ... + The decision to use UTF-16 internally was made early on in the process (2005). + At the start of work on PHP 6, UTF-8 was not widely supported but during development, the industry started to standardize on this. Widespread adoption of this more forgiving encoding helped with a lot of the problems that PHP 6 was trying to solve and made the objectives less relevant. + The number of contributors who fully understood the problem was relatively small and the amount of tedious conversion work was large. + In open source, people work on what they are interested in and not enough people were interested in it. + Full unicode support using UTF-16 negatively impacted performance. + By 2009/2010, it had started to become apparent that PHP 6 was never going to happen. Source: https://www.phproundtable.com/episode/what-happened-to-php-6
* PHP is great at typical website/app workloads when it comes to interacting with a DB. Your table having millions of rows will be a non-issue as long as any joining and manipulation of the data is done by the database and all PHP has to do is handle the results. I once inherited a sales app that was taking hundreds of thousands of rows from a DB via several queries and doing data manipulation (sub-totals, mixing data from different tables together, etc) on the PHP side... it took 1-2 minutes to run a report. After rebuilding the app so that all the data manipulation would be done by the DB, the same report now loads in \~5-10 seconds. So when I say PHP isn't the best language for heavy computation, that's the kind of thing I'm talking about. That said... if you do need to manipulate data in PHP, try and use the standard library functions as much as possible because they are much faster than raw PHP code due to their implementation being in C. * WordPress is a piece of blogging software released in 2003 that has grown into a general purpose website content management system. It powers a large percentage of the websites in existence, in large part because there's a ton of plugins for it that can be used to add extra functionality to a site (captchas, forums, image galleries, etc) and a large eco-system of professional "WordPress" developers has grown over the years. WordPress was built using PHP, and professional WordPress developers technically use (and maybe on rare occasion write) PHP code, but for the most part a WordPress developer is better described as a Web Designer that builds websites for clients rather than any sort of software developer. Under the hood WordPress is a mess of spaghetti code (imo) and I've never felt it was particularly great software from a user standpoint either, but it's been the market leader for so long and so many tools and careers have been built around it that it has persisted in dominance. The bottom line is that WordPress and WordPress developers are all about producing web SITES, not web APPS, so it's a different market.
It depends on the auto-increment lock mode and the query. If you insert rows with a date_time, you shouldn't assume any relation at all between the id and date_time. In some cases there are a relation however. You can safely use last_insert_id() from a batch insert of X rows and read last_insert_id() + X - 1 rows from the table and get the inserted rows. If you have correct lock mode.
I usually sort by some column(s) *and* a id column, to get consistent order of rows if multiple rows has the same values. E.g. if you have a date_time and 2+ rows on the same second, the order within that second will not be consistent (between page loads or similar), unless you sort on date_time *and* id.
Good point!
If you’re using auto-increment on a table and also delete rows on that table, when the increment reaches the max column size, it can loop around and re-use the ids of previously deleted rows, therefore destroying the time basis for the numbers, but still keeping them unique. It isn’t something that probably comes up a lot, but if you have a datetime column, might as well use it since that’s what your actually trying to sort by in this instance.
I am afraid you are overthinking it. At least mysql would never re-use once assigned id to fill the gap from a deleted record. It will just issue an error. A datetime is not unique by definition. There could be a thousand records with the same datetime. So I don't get your point here either.
I don't think deleted auto-increment values will be reused. It's just that InnoDB before MySQL 8 doesn't remember the highest assigned auto-increment value. So if you have 10 rows → delete/rollback the 10th → restart MySQL → insert, then 10 will be reused.
No nigger 
Your inability to make a text post on reddit bodes very poorly for client/server relations.
Free as in free beer 🍺 
A good idea. I once wrote an article, how to find the player's rank based on the score, using this principle, https://phpdelusions.net/articles/rank_based_on_score
Another great reason to continue paying for PHPStorm!
It looks like an interesting experiment. Two main components of Symfony choose different ways to secure the funding: Doctrine went to Patreon, and SensioLabs AKA Symfony Core sold itself to a larger company. Patreon seems a more straight and honest way to me but it depends on the maturity of the community, whether there are enough people basing their business on Symfony (and therefore on Doctrine) are willing to support it financially. I am going to talk to my colleagues in this regard. 
Aha.. so this is why most of their projects where moved from sensiolabs to symfony branding. 
Can you imagine claiming to be a "professional PHP developer" and coding exclusively in `nano`, and on top of that, not even being aware you're using `nano`?!
I misread it as # Traits vs Inheritance Which would have been a much better article! **This** is just a junior-level description of the very basics of each language construct, something I teach my apprentices very early on, and very quickly.
&gt;The bundle maintainer knows best what's necessary for the configuration, so it doesn't make sense to make someone else responsible for that part This doesn't change, what change is that this work is done on another repository. and I agree, as _a bundle maintainer_ it is easier to keep track of it if it's in your own repo. It is however easier for the Symfony team to have a kind of monitoring and keep track of what is going on. So the choice has been to make it a bit easier for them (and also for the search of recipes) at the cost of making it a tiny bit harder for bundle maintainers (provided they want to leverage flex which they don't have to - and is not necessary either if you have nothing more than registering the bundle to do). &gt;The service shouldn't exist. Including the recipes in the bundle repo doesn't add hosting costs. That's a PoV. Another one could be to want to: - provide a search for recipes - being able to monitor/audit the recipes easily - ensure a minimum of quality standard is met (cf. the CI check done on the recipe repo) 
Mine only gives an option of new window and current window (which replaces the current project). If I could append to the current window, that would be nice. When I click on the help icon it takes me to a page on their site which shows the option you are referring to. Maybe this is a Linux bug?
Thanks for the feedback. I'll be sure to consider my titles better Ilin the future. I've had some hindsight with this one and yes, the title is wrong for the content. I agree that this was a basic post, and that was the idea. Just a small quick read that goes over the basics of the two constructs and what the difference is. Ill be making more advanced posts in the future. Just want to make sure i get this whole blogging thing down first 👍 
Maybe you can extend one of these to include chat rooms: [https://github.com/search?l=PHP&amp;p=1&amp;q=chat&amp;type=Repositories](https://github.com/search?l=PHP&amp;p=1&amp;q=chat&amp;type=Repositories)
To be honest, I think licence is very cheap. It is amazing tool that allows programmers to earn hundreds of times more. If Nikita would continue working on PHP itself (generics or at least typed arrays), I will gladly pay more money for licence.
You might want to get a security audit as well: http://www.dramen.com/configurator.php?system=38%22%3E%3Cmarquee%3E
Thanks for the detailed follow up. It is much appreciated.
using racial slurs is apart of "free and open concepts"?
10 is far better than 8 for web development, at least for me. Some things that 10 added that help me are phpstan support, conditional break points and better jsx support.
&gt; new features I mean... you are also paying for all the years of work it took to get to this point, and its a fantastic platform. We need to stop looking for only new features.
You're quite right — I guess I forgot about PHP 6 when writing that comment.
I would love to see lambda in PHP, though the new addition to typehinting is awesome! (as someone from a java background)
\+1 
the major difference is that Dotrine is not a company and has not employeed its developers. So you cannot really compare it.
&gt; $options is exactly what I would like to avoid, because often is difficult to remember and IDE often doesn't help in autocomplete and similar... I understand that for a minority of use cases this is unavoidable, but I am trying to satisfy the 80% without complicating too much the interface. Yes, I dislike too that no IDE can introspect this. In practice, a minor annoyance. However, I thought again about the PSR interface. I _guess_ the solution without $options would be a custom `Request` interface (based on the PSR) which adds all the stuff? Which then would solve the `$options` problem and can easily extended for custom stuff in a type-safe way by application. I guess I didn't see the benefit before and do now :-) &gt; What you do not like about the description 'no-nonsense....' ? :-) When you say "your product is no-nonsense" it implies others is "nonsense". Sounds hostile at least to me and, whilst your PSR interface is "nice", you library is totally inferior in terms of features to e.g. Guzzlehttp which _my_ opinion would be a total "no-nonsense" package. It's totally straight forward to use is able to cover 120% everyones needs. ^ The above paragraph is just a amplification of the vibe the this "no-nonsense" signals, in no way I want to diss your work. It looks good and each to his own 👍
W3 schools is a good start. You can also look at some online books, there are plenty freely available [https://www.w3schools.com/php/default.asp](https://www.w3schools.com/php/default.asp) 
Think of it as a task manager, intsead of a deployment tool. Create tasks and then bunch of th tasks to run in a spefic order to a local or remote loaction.
\&gt; if the source of preloaded files are changed, the server has to be restarted. Why, when it can be preloaded into memory with a timestamp and if the PHP file has an amended timestamp after that, then the newer version is compiled and preloaded, and the old one scrapped.
&gt; I expect the bundle maintainer to include a recipe if it seems that Flex is a significant improvement. So that's not a reason to rely on the recipes repository. You still need something that does what Flex does under the hood if you want those recipes to be automatically configured. A simple `composer require my/fancy-pants-bundle` doesn't install the bundle into your kernel as Flex does by hooking into Composer. Flex is a little more than recipes and aliases, if those two features don't suit your needs there are still other features within it to look at. Or, just don't use it.
I absolutely feel the way you do. There is in my opinion no valid technical reason to centralize all manifests in one repo. That being said, you can't blame Sensiolabs for trying to monetize their framework. They have to earn some money somehow... Their strategy might change now that they have been acquired by Smile though... &amp;#x200B; Instead of complaining, you could actually act. I mean, the interesting part of Flex is about running a post-install hook after package installation to automate a few tasks like registering bundles or editing .gitignore files. How hard is it to write your own Composer plugin that does that? I've considered working on a framework agnostic "flex-like" package a few times but never found the way to do it. In the meantime, I'm pretty happy to use Flex. Automating installation tasks is a must have nowadays.
For me Smile is just one of IT consulting companies that is just big, but not with high quality engineers/project/whatever. Ok they're specialized in open source solution, but to me it's not that different of a Capgemini-like company. They have a ton of money to burn, so... Like mentionned in other comment, I fear it will lead to similar situation like RogueWave and Zend. I hope it will not turn Symfony ecosystem into a cash machine.
&gt; If you don't like it, pick a different framework. that's not a different perspective, or an attempt to change OP's mind. that's just saying "shut up"
Well, when you got a clear cut opinion and daring sentences : &gt; but I invite you all to change my mind :) &gt; So yeah, please change my mind :) Hard to really change someone's mind with compromises. When you call people by their firstname only as if you really know them. &gt; redacted by Fabien &gt; I understand that Fabien needs ... You just have to put people in their place. 
&gt; I am going to talk to my colleagues in this regard. I am interested to hear what you find out, if you are able to disclose it.
[This](https://github.com/walkor/phpsocket.io/blob/master/README.md) might be useful
Wasn't aware of `fastgi_finish_request`, thanks!
Hi everyone, I have been working for web development agency for almost year and half. I'm pretty experienced with custom development on symfony/laravel. Recently friend contacted me to create a website for his boat tours company. He wants nice presentational website with blog and booking system for his boat (only one). Now I have free choice to chose tehnology/framework and that is problem. I'm wondering what do you guys use for this kind of websites. I have some frameworks/tools that I can use: * Laravel+Backpack * Laravel+Nova * Laravel Wink * Symfony+easyadmin * Symfony+SyliusResourceBundle+SyliusGridBundle * Maybe just settle for WordPress although I'm not familiar with it but it has some plugin and nice theme I can use. It seems to me that CMS could be overkill for this, but maybe I'm wrong? Any ideas? &amp;#x200B;
And he did good on his first day! https://twitter.com/nikita_ppv/status/1083768056692781056?s=21
That's nice. Not PHP.
Symfony Flex automates tasks you were already doing manually before, installing a bundle usually meant that you have to copy config, add it to the kernel and other things in the installation instructions. With Flex, the pain of those tedious tasks is gone and you have the option to pay and use it in your private repositories. &amp;#x200B; If you don't want to pay, nothing changes for you, you're just doing what you've always done. 
I meant merely to talk them into a small joint support for Doctrine.
While people can try to make a case about how general purpose code editors can be rather smart about code in some other languages, when it comes to PHP, there is simply no contest. Add symfony / laravel framework support on top. It also does javascript arguably better than VScode. Because you do get all the WebStorm functionality. You also get integrated SQL tool, which is really great too. Not to mention all the other environment and debugging tools JetBrain provides for all of their commercial IDE's, like Local History Cache which allows you to revist the code you wrote 4 hours ago at any time, compare it visually, re-order, revert it, merge it, do whatever all that without any git stuff. Yeah, just get it. It's worth all the damn money. The amount of time it saves for you in a year will be more than you spend. Although, once you get used to JetBrain stuff, you won't want to downgrade :/ so if you pick up language like Go, you'll want to do it in GoLand too.
Can any give me the opposite from this: bcadd(number\_format(pow(2, 64),0,'',''), $int);
 Can any give me the opposite from this: bcadd(number\_format(pow(2, 64),0,'',''), $int); 
I'd like to emphasize the fact that neither Symfony the framework nor Symfony the company are concerned by this: https://symfony.com/blog/a-business-model-for-symfony
I'd like to emphasize the fact that neither Symfony the framework nor Symfony the company are concerned by this: https://symfony.com/blog/a-business-model-for-symfony
I'd like to emphasize the fact that neither Symfony the framework nor Symfony the company are concerned by this: https://symfony.com/blog/a-business-model-for-symfony
I'd like to emphasize the fact that neither Symfony the framework nor Symfony the company are concerned by this: https://symfony.com/blog/a-business-model-for-symfony
Using a worker adds complexity, this is a middle ground. What his middleware is missing is a way to keep the script running even if the browser sends user abort - ignore\_user\_abort
It's not unpopular opinion, C3 conference in Germany is an example of this, great tech talks mixed with weird stuff. [https://www.youtube.com/watch?v=4Wk2A-7kBFU](https://www.youtube.com/watch?v=4Wk2A-7kBFU) [https://www.youtube.com/watch?v=XvH-Vpl5PeY](https://www.youtube.com/watch?v=XvH-Vpl5PeY) [https://www.youtube.com/watch?v=pIXshlPHHkU](https://www.youtube.com/watch?v=pIXshlPHHkU)
Everyone likes to be smug about Wordpress, but many thousands of people have profited greatly from it. It makes sense for it to use PHP because hosting is dirt cheap.
Doctrine is not part of Symfony?
Awesome! I love how Jetbrains dedicate their resources for OSS.
It has more features than I come close to using already. Solid basics and that’s what matters for me.
Well legally and even technically not. You can use Doctrine with any orm or no orm at all.
My friend, we boycotted every service that had banned someone for saying something racist we'd basically just be left with 4chan and gab.ai
There have been *so many* people who fail to make text posts on this sub recently that I just checked to see if it's disabled or something. NOPE! Works fine! Since you failed at making a Text post, let me spell this out to you more succinctly: https://www.stackoverflow.com/ is where you should go with this. Or try /r/phphelp, but good luck there, buddy!
So, uhm. This is relevant to Do trine how? Or is it some new rule we should always go planet-wide with boycotting *whatever* when they do something we may not like?
Can you guys update the UI? I tried moving to PHPStorm from VS Code and couldnt do it. The text and UI looks straight outta the 90s... I know that's no good reason to dismiss a great platform, but it hurt my eyes. 
Thanks! Personally I think PHP 7 is the version anybody should be using but there are still many companies having their systems not upgraded yet.
I’m afraid I never got my PhD in pure mathematics, but I’m pretty sure subtraction is the opposite of addition
That’s for PSR submissions, not actual code
The "keys" are supposed to be kept like that. If you can backup your keys, it means someone else in possession of your phone can take away the secrets required to generate OTPs. That someone else can be a person / well crafted app that exploits permissions in order to gain access. That's why servers that issue these usually give you 10 one-use keys (random strings hashed) if you mess up and lose your phone but need to restore the functionality on new device. For that reason, if an app allows me to back the keys up - I have to be aware of implications. I haven't heard of the two apps you mentioned, but thanks for that - I'll check them out. Please.. don't be "amazed" prematurely, sometimes there are valid reasons for certain decisions rather than just an oversight. Have a nice day.
JetBrains enduring PHP keeps getting better is just a business decision so that people keep buying PHP Storm Licences. It’s a good outcome for PHP but that’s really not their motivation.
Is like to emphasise that posting the same comment four times in the same thread can be considered spamming.
You are totally right that there must be some kind of Composer plugin which takes care of executing the recipes. That's not my concern, my concern is just the location of the recipes. Serious question, what other features of Flex are referring to by "Flex is a little more than recipes and aliases" ? 
&gt; It is however easier for the Symfony team to have a kind of monitoring and keep track of what is going on. So the choice has been to make it a bit easier for them (and also for the search of recipes) at the cost of making it a tiny bit harder for bundle maintainers (provided they want to leverage flex which they don't have to - and is not necessary either if you have nothing more than registering the bundle to do). Shouldn't the monitoring and keep track of what is going on include the source code of the bundle itself, and not just the recipe? The search for recipes could be a nice feature. As the recipe itself is not that interesting, should a search for bundles (and maybe monitoring the quality etc.) be a better feature? &gt; That's a PoV. Another one could be to want to: &gt; &gt; provide a search for recipes &gt; being able to monitor/audit the recipes easily &gt; ensure a minimum of quality standard is met (cf. the CI check done on the recipe repo) These are all valid features. I wouldn't limit it to the recipe and include the bundle itself. The quality of the bundle seems even more important than just the quality of the recipe.
Exactly my thoughts!
That is indeed weird, I'm all for diversity but the talks should be about tech and should not be of lesser quality than someone who doesn't belong to that group. I fear forcing diversity in this way will have the opposite effect in the long term.
indeed, the opcache bug was so random as well, like when i check the stacktrace i wonder how the fuck this random code managed to slip and when i go check the code it does not exists!! the transform to literal wasn't something i was expecting from opcache
Take a look at the Symfony framework, many of the components are inspired by Java. I know of a company that had a CMS in Java who have successfully moved to PHP and created their new PHP CMS in Symfony. I'm not a Java expert but I'm fairly experienced with PHP and reading Java code doesn't require that much effort, I'm sure it's the same the other way around. Keeping code quality in PHP isn't much different than in other languages, and there is plenty of tooling out there to promote quality code (static analyzers, code style checkers, ..). https://phptherightway.com/ is a good resource to quickly learn about the current good practices of PHP, which may help you decide if you want to go down the PHP road or not.
I got that far haha
Listened to this guy live talks, he's so into details, always interesting low level stuff. Great contribution to phpstorm team.
Other comments made me look into this. They banned Sargon of Akkad. Enough said.
* If you are a new developer and you want to earn a ton of money, then Java. Java per se is not difficult, but the whole platform/library/ide is a mess. However, companies pay a ton of money. * Node.js. Some developers want to learn a single language (big mistake), so they adopt Node.js. However, it is not easy neither the market is huge, so it is not a good bet. Why is it hard?. Node.js is asynchronous, it is good for performance but it is hard to develop. * C#. Surprisingly, it's a good language, the IDE is the best, the language works fine, it is well designed (C# is like a clone of Java but well done), the performance is fine, the salary is fine. However, it is from Microsoft and, for some people, it is the same to do wrongdoing or to be an open source heretical, sheesh. * PHP is the king of the front-end. I love PHP because it smells of freedom. It's quite slim, you could create a page without adding nothing more. Instead, if you want to add a library on another language, then you must add a framework (and learn it), Java (jsf,jsp,spring mvc), c# (asp.net, webforms,mvc), node.js (express,meteor) * Python is the Jack of All Trades, Master of None. Python shines in the academic world thanks to Pandas but its so-so in the business world (PHP beats to the death Python for web). 
Use this at work for quickly setting up an simple deployment pipeline for non container apps. Super easy to get going.
There is not a problem if the rules are fair, however they arent!. 
The team is using codeigniter. Is that something you're familiar with?
I l don't know about hundreds of times, but yeah... 
PHP is not any more "free" than other languages, if you want to create a website without a framework in Node, Python, etc then you can. And if we are talking "free" then most languages actually give you the freedom to do much more (without writing everything from scratch or trying to knock a round peg into a square hole), because they are commonly used in more areas than simply the backend of sites/apps. As for the web, PHP is a perfectly decent option, but it doesn't beat any other language for it these days. Every language you mention, plus numerous others (Ruby, Elixir, Go, etc) have excellent options / frameworks for building the backend of sites/apps. But then most of them have other benefits be it performance, more mature, more battletested features like concurrency (or simply vastly superior in that area like Elixir). Or other uses that make those languages attractive to companies such as JS being used on the frontend and for mobile apps, or with Python being used for machine learnin, data science, tolling, etc. The only aspect where PHP is king is for freelance web devs where PHP is a much, much more common choice to be used for smaller projects (massively helped by things like Wordpress) that have the type of work that a typical freelancer can do. 
I've briefly looked at it a long time ago, but haven't used it. As I saw it, it was more of a RAD framework, beginner friendly. I had my fair share with those kind of frameworks were everything was very tight coupled, I wouldn't recommend it. But don't take my word for it, as I've only glanced over it. 
If you're willing to sacrifice your sanity making plugins, then it's a great way to make money. I wouldn't be able to do that as a day to day job.
I’d ask for more but this is just gonna be hilarious. 
Thank you.