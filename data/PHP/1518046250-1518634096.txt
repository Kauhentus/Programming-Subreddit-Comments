He understands how it works, so it isnt ignorance. He’s choosing not to use it
I think it works better to have the big version number be primarily a marketing number. Like it would make sense to have Produce 4 ver 2.12.8 or something.
I havent worked much with PDO, but MySQLi is fairly easy and quick to learn. 
Damn I learned 5.4 not so long ago...
Thank you
Thank you, MySQLi it is.
5.5 and 5.6 don't have _that_ many new things, just check out the changelog and you'll be well on your way using the few new things there are. 5.4 -&gt; 5.5 =&gt; https://laravel.com/docs/5.5/upgrade 5.5 -&gt; 5.6 =&gt; https://laravel.com/docs/5.6/upgrade
Both are easy to learn. The benefit of PDO is that you would be able to use it with more than just mysql.
To few results. Try to search for eg "dispatcher"
Ewww
I don't think he does 
&gt; somewhere along the way data gets corrupted csv is probably borked and str_getcsv is likely being used somewhere- some csv code generation does odd things with quotes, commas, and newlines so things go screwy. on a project years ago it was a case of check number of rows, if number of rows != expected, reparse row/lines with fudged together auto-unborking logic.
I think it was 4,300+ people. It was pretty great. 
Given that the feature is aimed at systems running on multiple servers, would it be wise to document this caveat so that developers with multiple Redis servers aren't potentially introducing silent bugs?
I might be the only developer who uses Symfony, Laravel and Phalcon and a whole plethera of applications.
Well you cannot show flaws in the code, if you do not test it. So until tested it is flawless.... The best logic.
Laravel is too slow. 
This. When you store money or time values, always store it as integers. E.g. store money as cents and time as seconds since (or whatever resolution is appropriate for what ever it's you're doing). 
I'm maintaining a legacy app using Codeigniter at the moment. Wanted to add some tests to cover some important part. How do you test Codeigniter?
&gt; then you are out of lock* :3
And me with most of my projects still on 5.2 or 5.3...
Composer -&gt; Idiorm and/or Paris http://j4mie.github.io/idiormandparis/
Because they don't like his political views. He's an awesome coder, but how is it *that* relevant, amiright? /s
I don't mind learning and delivering, the only problem I have is that in my eyes I have received an unreasonable goal/deadline and wanted advice on how to explain it to my boss as such Here's a list of the things my boss expects me to do by the end of the week, as a junior I feel like I'm in over my head and that what he's asking is unreasonable but I don't have much experience that's why I'm asking for advice - First major thing I needed to solve was an automated import that starts of as an excel with millions of rows that jumps multiple server (drive-&gt;ftp-&gt;amazon-&gt;db-&gt;ftp-&gt;import), gets turned into a csv somewhere along the way and then imported, somewhere along the way data gets corrupted and the import itself takes ~12+ hours, my job was to figure out what/why/where/how data gets corrupted + the import time should be cut down do an hour ish. - Second point had something to do with redis, sockets en major delay spikes, which I have to pinpoint and fix, since I have no clue about what this means I can't offer any more explanation. - Lastly multiple chatbots where sending wrong/delayed or double messages and I need to fix that as well
That's the plan, biggest problem is that most of these things are job requirements so I'm learning them in my off time
Thanks for the advice!
Because it’s the internet
This is hilarious. You made my morning :D
They're both easy to learn. PDO is going to have more options.
Jeez. These are the first Laravel release notes I've read in years. It's incredible to see how far behind the rest of the webdev world Laravel still is.
Why not upgrade? Serious question as I'm new (ish) to Laravel. Is it hard to upgrade?
&gt; half ass-solution *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
It is? I would liie to see stats for that.
It's not really a marketing - it's more problem of "we cannot version without breaking stuff so we invent own versioning".
What breaking changes did it bring? As of 2.3 it followed semver, but with an unstable API. After 2.5 this stabilized and upgrading from 2.6 to 2.7 or even higher, I've had almost no issues. Updating Symfony is seriously one of the easiest things to do.
DAE LARAVEL IS GOOD?
SemVer doesn’t stop you from breaking stuff tho. Just asks that you clearly identify that break by bumping the major number. You can do that every other day if you want to. And doing it every 6-12 months isn’t all that unreasonable. 
Oh wow
How so?
Is there a link to the original post?
Can't find it on my phone. It was deep in the comments on a medium/slack blog post about slack upgrading to hhvm.
I built my own framework, what does that make me then?
Whops - sorry, was half asleep when I posted that. Yes, `memcache` is defintely not used for queues.
&gt; but what about jobs that take longer than 1 minute? Yep - it fully handles that. At the start of the cron - all scheduled tasks are filtered, so Laravel has a list of tasks ready to go. We store the timestamp of the start of that filtering - so we know when this "cron" minute relates to. So regardless of how long all the jobs take, they use the correct timestamp. Of course - if a job takes a while, a second process of that same job could start a few minutes later on a different cron schedule. Laravel has another feature called `withoutOverlapping()` - which ensures a job can be only running once at any time. Both can be used seperately or together, depending on the desired functionality. 
"bespoke artisanal wardrobe"
If it ain't have tests, and PSR compliance, and thousands of stars of github, and continous integration, and... /joke
Naked PHP warriors (aka 90% of the internet) are actually holding up bridges and house foundations all across the realms. They will join their brothers as soon as they can find a way to step out without having everything collapse.
Hah, i see we weren't that few after all. we were deemed mercenaries and removed from the tale solely because the Kingdoms couldn't, or wouldn't, accept our good handling of all the weapons. So we made our own, twisted, weapons and fight for the high bidder.
Thank you for your comments. I got what you mean and i will change "get_names" function to "name" function. 
[PHP delusion #4: mysqli is easier than PDO](https://phpdelusions.net/top#mysqli_vs_pdo)
I’m curious as to why you chose codeigniter?
Ever tried to fetch an assoc array from mysqli prepared statement?
So you can tell that your code is insecure as fuck, as you apparently never had an idea to use prepared statements
BC breaks in minor version in Symfony and in patch versions in Laravel happens. It's just mistakes and are fixed pretty quickly, stop bashing either of them for those :)
For one its the most starred project on GitHub. 
By itself it doesn't do much else than handle login and generate an empty dashboard, so testing it involves logging in once with bad credentials (to make sure it doesn't let you in), then logging in with good credentials and checking if it says "Hello World".
The [Laravel Docs](https://laravel.com/docs/5.6) and [Laracasts](https://laracasts.com/) are usually the go-to for learning Laravel and other libraries included in it.
Last week I was tasked with creating a "virtual wallet" that we were going to use to grant bonus money to users to use at their own will and also to issue refunds at. Since we're dealing with money here every wallet operation has to be locked into a transaction and this transaction has to be logged, with reason, so that if an issue occurs we could easily track it down. I think it was a fun side project. 
It'd be interesting seeing a PHP implementation that is not full of macro's, but I suppose that could be because I've not taken any time (maybe &lt;10 hours over a decade) to look at PHP C source code.
I have most projects in Laravel 5.2 and 5.3 too. It might take you from 2 hours to 4 hours to go from 5.2 to 5.3. 5.4 changes how mailers work and It's something I really don't have the time to try now. Other annoying change is that nested routes changed from not needing the 'as' parameter to needing it. And then on 5.4 routes had more changes. Add to that dozens of other breaking changes with each version and you get the idea. How do you ask your manager or client to keep changing things for no benefit every 6 months?
If it works and you're happy, do what you will, but Redis is a struct server, and RabbitMQ is a Queue. They are different things and depending upon complexity and setup are incompatible for some tasks without much engineering effort. This is the first I've heard of someone switching one for the other. Interesting... $reconnect = false; $processing_queue = $this-&gt;event_queue_name.'-processing-'.$worker_id; do { try { $this-&gt;connect(); $this-&gt;queuePastEvents($processing_queue); $this-&gt;waitForEvents($processing_queue, $callback); } catch (RedisException $e) { // we get that due to default_socket_timeout if (strtolower($e-&gt;getMessage()) === 'read error on connection') { $reconnect = true; } else { throw $e; } } } while ($reconnect === true); That right there. Service outage, n-duplicate queuing (maybe). Sockets timing out are not always great to recover from. Something in JS on the front-end despite the fact I despise overuse of front-end scripting is probably more sane than the try catch &amp; reconnect here. What were the reasons keep trying during socket timeot were chosen?
Naked PHP idiots = Wordpress. 
Mysqli does. But you don't. 
PDO, learn it once and use it for any DB engine you come across in the future :)
https://medium.com/@tedstein/thanks-for-correcting-me-on-expressjs-and-meteor-21f6409e9b71
Thanks, I was multitasking I guess.
is this just for fun or is their some higher goal behind this?
Erm, what are you on about?
Still not REST in any way though.
I said it all in my first comment. Your code is insecure as you have no idea of prepared statements. Otherwise you wouldn't have said mysqli is easy.
Don't mean to be nitpicking, but this isn't a "CMS" is it?
So well explained 😁
&gt; unlinke node where its hard to block Well, it is easier to make a blocking function in javascript than a non-blocking one in php :D &gt; php core would be rewritten, making it a new language As I said, "Could". I didn't said "should". People bothering about php async are people that think that php should move in this direction. For instance I would like to be able to have a php instance working like a persistent server, handling multiple requests, just like Node would do. Yet I am not sure if PHP should spent time going there, because : * I have no idea how many time would it be required to add non blocking calls where needed in the core * I have not yet found an answer to the question "At what cost does it become better to change language than improving this one", which is heavily linked to "Why are you sticking to this language, is it by laziness, or because you really like some features of it, or because you can't afford the productivity loss when changing ?" 
Why?
Damn. Make it sticky !
Cloudways looks like a pile of shit and this blog post only makes that opinion more valid
That doesn't mean anything at all
On the contrary. It means there are loads of people who absolutely love and back up the project. You don't see Symfony up there, even though it's what Laravel's built-up on. 
yea, me
The reason PHP is compared to frameworks, and why that might be fair, is `$_GET`, `$_POST`, `$_SESSION`, and so forth. Other "naked" languages don't allow you to instantly build a dynamic webpage. Is PHP a mature and ergonomic framework? No, it isn't, but it's more of a framework than Python or Ruby, whose popular frameworks implement HTTP within some layer.
Just finished 4 day conversion of Symfony 2 to 4. The setup time is getting shorter! *he says, with forced optimism*
I have a pet project written in go that parses PHP code and visualizes UML and call graph. There are wonderful libs written in PHP https://github.com/nikic/PHP-Parser and https://github.com/ircmaxell/php-cfg, I use them, but I need similar ones written in go. The parser written in golang have some advantages: it would be faster and don't require php to be installed.
If you don't have a sword you likely have a tool to work the land.
Upgrades get easier the closer you are to the latest but if you want to go from 5.2 to 5.6 it will require some work. Laravel Shift does make it easier though and worth the couple of bucks it costs.
So the contents of that page is loaded in with AJAX, suspect Simple HTML DOM doesn't support that?! PHP isn't the best for this kinda stuff, least not when it comes to also rending JS on said page - i'd look at something like nightmarejs.org.
Those would be the people, who do not use any of the frameworks, but instead have learned to ancient arts of YAGNI and SOLID, while wielding various packages from Composer. 
😂😂😂😂
Quick review. Here are the major issues I see: - you are mixing the HTML templates with php logic - no routing - extensive use of global state - everything written in the global scope (as in, no encapsulation using objects) - direct access to superglobals from any point in code ... sorry, but this is a mess, and I would not describe it as a "framework".
Style, OOP syntax remains constant when moving to PDO making it easier to understand... PDO requires some previous work (set the DSN string, set methods as required, etc) but with OOP MySQLi it's all ready to work... that's my point of view...
Haha, yes a weapon that shoots you in the foot.
You don't have to set the database connection details in `mysqli`? Wow that is one smart API.
You confuse frameworks and libraries. PHP has an extensive standard library which includes some web-centric functionality. In no way it would make PHP any more comparable with frameworks. 
But if that day happens no kingdom will be able to resist. That's why main smith of PHP-istan constantly improve PHP-ism for naked warriors.
Not really. It has a very specific usecase in which it excels: rapid prototyping. Basically, the way it is designed, it's best used for making quick throw-away projects, that you do not intend to maintain (nor have it maintained by someone else). Or for quickly making proofs of concept, that can be scrapped, when project is approved and you need to start writing the "real code".
Because it's not "real code" unless it's written with your framework of choice, right. /s
This man develops.
Curious, what flaws do you see with laravel?
Alright I guess I'll give this post a shot on the Ubuntu sub, thanks anyways 
Good luck! Hope you get everything sorted out :)
I recommend reading all the docs, then just build something... Clone some sure functionality. When you get stuck use Google... At some point you'll learn via stack overflow that there is a ton of useful functions in laravel that aren't documented necessarily. They're in the api docs though. When you start using api docs as much as regular docs then you can join the laravel army. If you want a horse and Lance though, you'll need to also learn some reactive frontend JS like Vue. Learning Vue and combing it with laravel is like having a squire to do the shit jobs you don't want to do.
I've used it but got bored of it. It's easy on the developer but then you have to do something that's not easy and Laravel usually makes it harder. 
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality! The FCC plans to kill Net Neutrality and it will affect everyone unless YOU fight for it!](https://www.battleforthenet.com/) | [4 comments](https://np.reddit.com/r/PHPhelp/comments/7eoq2o/join_the_battle_for_net_neutrality_the_fcc_plans/) \#2: [First time writing OOP can anyone check im on the right track.](https://np.reddit.com/r/PHPhelp/comments/65qzgl/first_time_writing_oop_can_anyone_check_im_on_the/) \#3: [Tutorial on getting xdebug to work with phpstorm?](https://np.reddit.com/r/PHPhelp/comments/70ho0c/tutorial_on_getting_xdebug_to_work_with_phpstorm/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
You probably need to look up, what is meant by "rapid prototyping": https://en.wikipedia.org/wiki/Software_prototyping#Throwaway_prototyping
check your network tab in the browser dev tool to see the ajax calls
So to fit in with the OPs analogy https://pinoytransplantiniowa.files.wordpress.com/2011/03/img_4603_2.jpg ?
Kinda. Though, the deeper problem is that /u/skylarmt seems to lack education/experience in application architecture. Then again, wast majority of proponents of a specific framework would have the same problem, but they use frameworks as a crutch. It is possible, that he might start learning at some point.
have you updated your wordpress ? https://nakedsecurity.sophos.com/2018/02/08/wordpress-users-do-an-update-now-and-do-it-by-hand/
Well. Bugs every week. There are some that don't even get fixed like this one: https://baraktawily.blogspot.com.ee/2018/02/how-to-dos-29-of-world-wide-websites.html But we are launching traffic filters for these kinds of stuff automatically, so all good..
A project which generates a lot of fanboyism has a lot of stars? NO.WAY.
Hey that actually worked.. but instead of executing that command on a new directory I used it on the default /opt/lampp/htdocs directory so that was fine. Thanks But now, my local Host shows &lt;?PHP echo 'Hello World'; ?&gt; Instead of just 'Hello World' haha. Does this point to an issue with Sublime? In the sense that Sublime doesn't recognize this as a PHP file..?
&gt; easy to patch your application with those breaking changes. The level of complexity shouldn't be an excuse though. 
And MongoDB is Webscale!
[Google trends](https://trends.google.com/trends/explore?date=today%205-y&amp;q=%2Fm%2F0jwy148,%2Fm%2F02qgdkj,%2Fm%2F09cjcl,%2Fm%2F09t3sp,%2Fm%2F05zvgrd) seem to back u this claim. It seems the most popular by quite a large margin. 
Oh right, now I understand! However, I'm looking at [another site](https://www.novocinemas.com/uae/movies) and even though they're using AJAX, they're not using method. I can see it in the "Preview" though..
Also, where are the tests?
the latest move from WP was nasty, disabling auto-updates while "forgetting" to patch a zero day [maybe it was google taking control?](https://searchengineland.com/need-speed-google-dedicates-engineering-team-accelerate-development-wordpress-ecosystem-291214)
There are no Wizards, just Magento Mages doing their own thing.
Makes sense. For the last 5 years, I was the manager or director and my shop didn't work on client websites, just company sites. I'm big on updates and we always tackled them as soon as it made sense. It sucks that your manager and clients don't see it that way.
I'll have to look into Laravel shift. 
Google has openly criticized WordPress earlier as well (mostly because of the component security and the amount of malware delivered via CMS sites in general and WP being #1). Wouldnt be surprised if they've made an acquisition offer to Automattic. 
&gt; now &gt; silex I got bad news for you my dude
Do you guys know of any way to watch the thing again? Will talks be publicly available at some time?
You can't really have unit tests in purely procedural code. There is no way to test code in isolation.
These read like paranoid rants, because many arguments are also in conflict with each other: - So DNSSEC according to these posts make them "more government accessible". I do not see how. Unsigned DNS has no protection at all, so anybody can try to manipulate DNS data, poisen DNS servers, etc. DNSSEC at least makes it harder to manipulate, with several different parts involved (registrar &amp; entity running the DNS), and it is also more visible if something changes / DNSSEC breaks. - DNSSEC according to the author has no value and no protection whatsoever ("almost no traffic with DNSSEC" - "DNSSEC is unsafe"). This is just rubbish. If you run your own local DNS server checking DNSSEC, it works perfectly and every request is checked. If you rely on another DNS server to verify DNSSEC, then the connection between you and DNS server is not secure and could be manipulated. That still seems much more difficult to achieve than having no DNSSEC. I do agree that DNSSEC is too complicated and that it could be a lot better. But currently, the only alternative is nothing, and securing DNS records does make a lot of sense. DNS over HTTPS solves different problems, namely the connection between DNS server and end-user (and the privacy that comes with that), so using both would be ideal.
Yeah, that makes alot of sense. I'll check them out, thanks! 
Magento Mages, wielders of the dark art known as Zend.
The arguments are as follows: * The only reason to use DNSSEC is if you want DANE, which replaces CAs with the DNSSEC zone signing keys. * The ZSKs are all accessible to world governments: * The zone signing keys for COM is owned by Verisign, which you can be assured the US government has access to. * The ZSKs for LY (e.g. bit.ly) would have been controlled by Gaddafi if DNSSEC was deployed before 2011. * There is no other appreciable security gain; TLS and other secure protocols assume DNS is insecure to no ill effect. DNS Privacy is a better solution than DNSSEC.
They are using the method POST in this url: https://www.novocinemas.com/movies/NowShowing and another one. There is even a breakpoint inside the ajax function. 
No they do not happen in Symfony, and if they do, they are either due to pressing security issues, or they are treated as bugs and regressed. See their VERY strong BC promise: http://symfony.com/doc/current/contributing/code/bc.html As a developer, I love that I'm able to rely on this, and don't have to worry if I just have to upgrade by a minor.
It's old news. This actually exploits a site which has a poorly configured ACL that allows unauthenticated users to create content (i.e. link sharing), you can use that as an entry point into the media manager and upload files. https://packetstormsecurity.com/files/138026/Joomla-Weblinks-Shell-Upload.html for more context.
No. It doesn't.
Alright so you've been hard on Laravel through out this thread. I've not used Laravel in specific just its sub project Lumen for an API and yes I have my issues with it though I have issues with all frameworks in all languages I've used. It comes with the territory. So what I want to know, in your opinion, which is the least shitty of the frameworks that you would prop up in PHP-istan
No tests, no PSR4 
Yes it's old.. But there's just a new active wave of attacks I guess..
I personally think, that the best approach is to avoid focusing on a framework, but instead to choose specific components (using composer packages), that match the requirements of your project. If you want a reclining chair, you would not buy a Boeing 747. You pick a router, http abstraction, DI container and a templating engine and that's about 90% of what you will need in an average project. Throw in an authentication and authorization libraries and call it 95%. Of course, this comes with a major downside - you need to have some clue about application architecture, or you need a team-lead with those skills. 
Worth noting that semver is in fact used for other Laravel packages such as Spark.
That's not an applicable critique of a procedural codebase. 
Well this is the third time today I've been pointed to that report, the first couple by people in a panic. So, obligatory "keep calm" commentary required. Now I'm just waiting for the obligatory "Joomla sucks" comments that usually come with any post about the project here in r/PHP 🤣
Get a life.
LOL :D It's more like the people suck who don't manage to get a vulnerability patched from 2016... 
You should get used to dealing with crap like this when you decide to use php and its technology stack.
You are correct. It's a framework boilerplate. Just a minor brain fart on my part.
Srsly, I was going to ask WTF is this posted as an image?
It would be a win for WP, php, and the internet if that happened.
Yes, but those are mistakes, it happens. I'm more worried about intentionals BC. For me, as a developer and package maintainer, the difference stands in the fact that Taylor can unilaterally decide that a BC can and will happen between minor releases (or even patches? Not sure). Instead, with Symfony this decision cannot happen. 
Well, yes, with a runkit, but that's just not practical..
Talks will be public in a few months or at least that is what they did last year.
&gt; poacher's club You want the animal dead, right? Works like a charm.
Word of advice... Just find something you want to build like copy something off indiehackers.com and build it. I recommend starting with laravel, and when you want to add Ajax learn jQuery. Once you've built something you're proud of replace jQuery with Vue. JS is way harder to learn because of all the tooling and there are tons of tutorials that contradict each other because so many people are very opinionated about the right way to do things. Laravel comes prepackaged with jQuery, Vue, and Twitter bootstrap. In 20 mins you can have a frontpage with login/register/forgot password and an admin section that is only accessible after logging in. It's as easy as : laravel new blog php artisan make:admin php artisan migrate If you want someone to mentor with let me know I've thought of getting a squire or something to help with stuff and teach them how to code, then maybe start paying them when they know enough if I find some freelance gigs big enough for the both of us.
Why would you even post this here besides for trolling? You already have your own containment sub for people unironically interested in this steaming pile.
Most modern frameworks are really just component libraries, so I'd say the story draws more from those who rely on strong, tested libraries and those who don't. The framework comparison is more to draw parallels to Rails, which is not a component library.
Read my comment again: I clearly state in both cases if it happens it's a mistake (I edited in regard of your comment about security to avoid any confusion). Also whatever Taylor decides he may be stubborn enough to not follow SemVer but he's not stupid and won't introduce BC breaks willingly in a patch version. Wether or not you trust him on that is another story :)
so untested code is the tree that fell in the forest with nobody around?
You can view and override the auth flow by looking at the api for the functions in the controller that are being called, a lot of plug and play with systems like devise similarly aren't super easy to configure without overriding the methods put into the models/ controllers. As for SoC you can get that somewhat if you use repositories and interfaces. I feel though a Dev can hit the ground faster with laravel, sure they might not know how to do repos just yet or why to use them, but I'd rather fix shitty code in laravel than a spaghetti code app with no templating system and every file being 50/50 html/PHP. I've had a lot of jobs migrating spaghetti or codeigniter to laravel. Lately I like using laravel mostly as a backend api and let Vue/Vuex handle a lot of the state.
I'm personally writing myself a framework to use in future project. Around 300-350 hours in, hope to finish the Login module security part, and maybe the Settings module reliability changes within the next 20 free hours I have. But, god, this is gonna take forever til it's properly usable. I'm on the verge of "stealing" some symphony modules, but for not my resolve still hasn't crumbled..
I had read it well. I'm not talking about mistakes. I'm talking about willingly choosing to introduce BC, and not following SemVer because of that. I'm happy to know that at least Laravel's patch versions are not allowed to contain BC, but that's not enough for me. And that's why I prefer Symfony, especially the component for lib development. 
Only place for authentication code to be inside of a controller should be for the "login/registration" pages. All other authentication checks should live outside the controllers. Otherwise you are actually breaking OCP, which is what's actually feeding into the "complicated to maintain" problem. As for *"can hit the ground faster"*: that's because Laravel is a rapid prototyping framework (as I mentioned in a different comment). And you do not need Laravel to get a templating. It's a single line in composer to get Twig. And that is by far not the only templating library out there.
Then you are **doing it wrong**. You do not need to learn to use composer.
Nice, what are my options if I'd like to see them now?
True, I don't have much experience with twig or other template systems except smarty and I like blade way better.
Applying for role of squire, sire.
I think you're setting the bar to high for developers, or you're setting too high a standard for a production app. Laravel is great for rapid prototyping, and it's also great for many production applications. I find it hard to believe that the problems with Laravel (which I'm not arguing against) are anywhere near the most signifigant problems facing most production Laravel applications, nor are they contributing any significant loss of business value.
repost it
I'd like something like this for composer.json My mind doesn't function without comments. I have no long term memory.
https://www.slant.co/topics/983/~best-cross-platform-gui-toolkits (Yes, wxPHP exists)
Sorry, but there are very few people on this planet, whose opinion I care enough about to read something that long.
That's OK. I appreciate that you took the time to share yours.
Wow that’s really helpful, so you’d recommend learning Laravel before JavaScript? I’ll have to look into it more then. I really want to be a web developer after I graduate so any advice is welcome. I’m still very much a beginner when it comes to the web based languages I’m afraid, my course is focusing more on C#. I will have to take a look and give it a try myself before I burden you with mentor ship haha thank you for the offer though. 
[**Here's your Reddit Silver, kafoso!**](http://i.imgur.com/x0jw93q.png "Reddit Silver") /u/kafoso has received silver 1 time. (given by /u/thisisnyrealname) __[info](http://reddit.com/r/RedditSilverRobot)__
Sadly a sizeable chunk of devs follow this flawed logic. This is why software sucks.
Feel like this would be more accurate if while the ruby people were busy paying attention to PHP JavaScript amassed a massive army and and surpassed them. Also this analogy doesn’t represent the sheer scale of the PHP army. 
So, because I happen to MySQLi all the code is insecure? All of my applications which have a MySQL backend make use of prepared statements. I haven't used PDO much as have found MySQLi to support all of my needs so far. I believe OP asked if MySQLi was easy to learn, which it is. Like OP, he recognises that MySQLi meets all requirements, so why change the wheel when it meets the exact same security standards as PDO code would.
Well, the *story's* setting was quite heavy on the superiority of framework professionals over the native php peasants :D If you want to talk about problems specifically in Laravel, that cause the largest problems to the business, those would be two: - performance (due to inappropriate use of Eloquent for usecases beyond scope of active-record) - maintainability (due to violations of SRP, OCP and SoC) 
downvote because differing opinion!11!!!!
It's a PHP framework, last I checked this is a sub for PHP related things.
Of course, one also can't ignore the smaller PHP armies as well. Though not as large, groups like the Lumenites and Slimists, and the Migratory Microframeworkites are less visible, but also carry formidable weapons.
fixed 
Ok how about this... "It's procedural".
https://laravelshift.com/
https://packagist.org/explore/popular?q=framework&amp;p=0
Thy ancient naked warrior shall swing his organically developed sword and slay the armies of n00b-istan
Please take a look at Serializard: https://github.com/thunderer/Serializard, it is already used it in several projects on production. Saved us problems with JMS Serializer.
I guess the author sees you naked ;-)
Google trends are only an indication of the popularity of a specific *phrase*, which could mean anything, especially that the underlying topic is so problematic it needs to be googled in the first place.
Then what does? [Packagist downloads](https://packagist.org/explore/popular?q=framework&amp;p=0)? Because that shows laravel at the top too...
No, I prefer Symfony.
/r/jesuschristreddit 
The videos should be available for paying attendees over the next few days. They said the video was one large file for over 9 hours of video so they had to export, cut, and edit all of that into smaller segments which might take a few days.
So how would I get to their JSON file? I'm a little confused with Google Dev Console
I’ve used shift. It’s a time saver but I’ve found that there’s still a lot of changes that need to be made afterward. 
Well, you could try the curl_* native functions from php to do the request or use a lib, like guzzle, to abstract some parts. The ideia is to simulate the same request that the JS do, that means, the same paremeters and values (when you learn how the api works you can change some parameters the way you want). Did you get it? 
[@Seldaek's latest tweet](https://i.imgur.com/pyAD32i.jpg) [@Seldaek on Twitter](https://twitter.com/Seldaek) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Anyone who needs uuids can just call the Ramsey uuid functions directly without any wrapper? This is exactly why I feel Laravel is too bloated and opinionated. Congrats on the release though.
I think he was referring to how the MySQLi API for prepared statements is atrocious. Therefore for you to be able to make the claim "fairly easy and quick to learn" would mean you hadn't used it. He was doing it in a round about dickhead way. Full disclosure, it made me laugh as I hate the MySQLi API as well.
I think I do. $ch = curl_init("https://www.novocinemas.com/movies/NowShowing"); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); curl_exec($ch); curl_error($ch); curl_close($ch); When I do this, it'll lead to me their Error 500 message. When I use the domain "https://www.novocinemas.com/uae/movies" I just get a black screen
Str::orderedUuid is the main helper that saves time there since it requires a little more customization. Thanks.
For the “nowshowing” they pass parameters, like post or get, for the url? What your devtool says? Look in the request part. there will be all the parameters. You are getting 500 because it is missing a parameter. 
Sounds definitely like a permission problem. I see that it worked for you to chmod 777 the htdocs folder. I would also recommend to check out symlinking your htdocs folder to a folder of your choosing under your user folder.
&gt;- Capitalizing the first letter of your folder gets really annoying if you work in a terminal. All that extra [Shift] massage for no reason. https://superuser.com/questions/90196/case-insensitive-tab-completion-in-bash
Like ArmageddonNextMonday said, you can use the http://cinema.bh/Handlers/SiteMasterHandler.ashx?method=GetMovies to get the data, as json, and then parse it using json_decode to navigate through the list. Something like this: &lt;?php $movieList = file_get_contents('http://cinema.bh/Handlers/SiteMasterHandler.ashx?method=GetMovies', true); $movieListJson = json_decode($movieList); var_dump($movieListJson); then, you can use foreach/for/while to navigate through the data. We can fetch the list from this url, because passed all the parameters needed to it, in this case the "?method=GetMovies"
I see POST, under Request Headers, "accept" = application/json, connection: keep-alive and X-requested-With: XMLHttpRequest
Yeah, it is there. In firefox it has a tab inside the request to see just the paremeters. For your lucky, the URL you are tring to get, it doesnt need any extra parameter. You can do simple like this: &lt;?php $curl = curl_init("https://www.novocinemas.com/movies/NowShowing"); curl_setopt($curl, CURLOPT_POST, true); curl_setopt($curl, CURLOPT_POSTFIELDS, ""); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($curl); curl_close($curl); $json = json_decode($response, true); var_dump($json[0]); var_dump($json[1]); foreach($json as $movie) var_dump($movie['Id']); If the url need more parameters you gonna pass they to the URL in the CURLOPT_POSTFIELDS, like here: https://stackoverflow.com/a/35046096
I'd say it's more of a regional thing but it's actively developed and used by no doubt thousands of developers so I'd say it's relevant. I can't comment too much on the architecture but it seems to try and keep up with most modern php standards and trends.
I totally agree on those two points. It’s easy to build a Laravel app that keeps violating SoC all over the place, and one of the big ways we do Laravel differently than what Laracasts would teach you is increase maintainability along those lines.
I made a small project a while back using Yii2, mainly because at work all the projects were built using Yii1 when I joined them, so I kinda knew the framework. It was also a go to because it has out of the box REST support, which was needed in my project. The other reasons you might want to go for Yii are: * [speed](https://github.com/kenjis/php-framework-benchmark) * Working with forms is really easy [url](http://www.yiiframework.com/doc-2.0/guide-start-forms.html) * I really like how Yii does authorization [url](http://www.yiiframework.com/doc-2.0/guide-security-authorization.html) * Built in code generator is quite powerful compared to other frameworks as far as I know [Gii](http://www.yiiframework.com/doc-2.0/guide-start-gii.html) And some basic reasons like: * MVC, always a nice thing imho * I kinda like working with ActiveRecord which Yii uses In the end you will always choose a tool that suits your needs, and I think there are certain needs where Yii fits perfectly. So to sum it up - yes, Yii is a very relevant framework.
Forgive the author. I've seen this trend here in the this sub. I think most of the people here have never worked on a non-trivial application and therefore don't understand how silly it sounds to make this assertion. I'm with ya.
You could still signup but for $25 dollars you are better off putting that towards 3 months at laracasts and getting them free.
Mysqli is faster but less portible
This is the type of statement a simpleton might make. Are you one?
Whoops If you rely on WordPress's automatic updates, you'll need to do a manual update to 4.9.4 to fix the issue.
people in reddit is pro laravel or pro symfony, so don't expect much. All framework are importants reddit is just a webpage for yonkis
Yes, I got that sad news, moving to symfony microkernel block now
Angular is not that f*ck, with typescript it feel more like home when coming from php But angularJs, I agree 
no u
I had to work with Yii 1 some months ago for the first time, because of my hob at that time, and I was really surprised how robust is that framework. I've been also reading about the second version, which is the first one with clean code and steroids. Also I'd like to say the Russian guy, behind the Yii maintenance and development, is also a member of PHP-FIG, being also a very active member in PHP community. All of those reasons make him and the mentioned framework deserve a lot of respect.
Thanks for your comment ;)
i was wondering where wordpress was. I see them as a huge mass of arquebusiers covering 40% of the field. Their weapons are powerful and they can easily run over any army. But their weapons are also temperamental and explode in their hands quite often. Also most are unskilled and will accidentally shoot their comrades in the back, or themselves in the foot. In any given battle they kill as many of themselves as they do the enemy. And if its raining or the conditions aren't exactly right their weapons just don't work. So they resort to grabbing them by the end and using them as clubs, even though they were definitely not designed for that purpose. 
may I ask to what?
And just two days after this tweet thread https://twitter.com/CiPHPerCoder/status/960760569740570624
&gt;you are mixing the HTML templates with php logic no routing extensive use of global state everything written in the global scope (as in, no encapsulation using objects) direct access to superglobals from any point in code In other words, idiomatic PHP4. 
I went with Bolt CMS when I move away from WordPress. Really happy with it so far. It's been over a year.
..and they all died a horrible deth
Hmm. First time I've heard of Incoming! Definitely piqued my interest.
That was my exact thought too.
Then wonder why your product starts to fail.
Looks very intriguing. I do something similar in the sanitize method of Laravel's FormRequest, but I love the idea of standardising it.
I used Bolt CMS for a new site and it was great. Easy to set up, create a theme, and modify with some customization. Backend is even cleaner and more intuitive than WordPress with plugins for my needs, so I felt more comfortable handing it over to a low tech admin. I say anybody who feels stuck on WordPress and isn't locked behind some crazy custom WordPress setup look for alternatives.
I disagree. The story said you start off naked and then graduate to using more and more tools until you have a collection of weapons and armour. You can choose to strip down to your favorite sword, shield, helmet, sandals, and underpants, but you have the qualifications to use 3x more equipment if you want. 97% of the naked fools are actual inexperienced naked fools with no real training or battle experience.
Another thing I like about bolt is that the devs are very active and talented. They have a super supportive slack channel too.
Does someone have to pay per month to have a PHP website? Was trying to get started on creating a .com site for blogging and posting projects. Any tips?
Interestingly enough, I started using Symfony due to an Indian company suggesting it. 
I've built several apps with both Yii and Yii2. I chose it for the the speed but I've come to love it's extensibility. I used cakephp before (years ago) and Yii is so much better.
I use yii2 for our platform. It is awesome. The grid system is very good.
Well dont really use PHP that much these days. On small semi-static sites i still default to PHP. Basically some router and tpl engine. Never anything as heavy and slow as Laravel though.
I'm too lazy to check for myself, but does this affect WP-CLI updates?
I have a friend who is not a backend dev and neither a server admin (he works with html/css/js though) and I recommenced him to move to bolt. It took him a while to get used to it but in the end he loved it (also the site became faster).
Test it on production! 
The fact you're even running WordPress says it as all 😋
Because PHP is a templating ”language” that has bolted on features with no regard to design. This is why PHP is such a mess today.
/u/pmjones are there any performance benchmarks? I know were very concerned with this aspect for Solar but I don't know if you're still concerned about it
You are welcome =) It's an awesome piece of software often fun working on it.
I'll just leave it here: https://www.youtube.com/watch?v=H7uON7rcv4g (about Yii2, with humor and charisma).
I've got about 15 side project ideas, but I lose focus fast, would be nice to have someone to collaborate with... esp someone with Laravel/Vue experience... 
The new setup does not support fanout, how did you solve that?
In Symfony they probably happen by mistake and are treated as regressions/bugs, but my experience with Laravel is quite the opposite - public interfaces or classes get renamed or changed in bugfix versions, and often issues get closed just telling people to update their code. One minor version release I remember, Laravel "deprecated" an interface, telling people to just implement the methods without using the interface - but their method of deprecation was to remove the interface entirely. You cannot say the two projects deal with BC and regressions the same.
All my sites automatically updated from 4.9.3 to 4.9.4 with no issue, and I have a lot of sites. 
That's a really silly thing to say. The fact it's insecure won't make it less popular. It just means your parents will call you more often when their devices get owned by cracked WordPress sites.
You compare a framework with a CMS? WOW, much skills, such knowledge!
I never pretended they have the same BC promise or policy. But I didn't seen any regression in a minor patch in Laravel since 5.2 or 5.3 and I believe it's going to continue that way and Taylor expressed more than once if that ever happens it's a mistake and he'll revert the regression ASAP.
More technically, 'a customer's blog', they want wordpress so I'm now in the business of running it.
PDO is significantly easier than MySQLi. In fact, *both* are pretty easy, and I would typically prefer to use some form of wrapper like [EasyDB](https://github.com/paragonie/easydb) (basically a secure wrapper around PDO) or [Doctrine's DBAL](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/) as they offer some niceties. Remember, both are just ways of talking to a database; your PDO (or MySQLi) specific code is going to be like....0.01% of your project; just a handful of lines of plumbing to let you write actual SQL queries to return data your actual code can manipulate. The SQL and the actual code matter; the glue doesn't. I get that you want to save time, but just pick PDO (or something built on PDO) and move on with your life.
// Process our raw form/request input into a User model $user = $incoming-&gt;processForModel( $_POST, // Our HTTP form-data array new User(), // Our model to hydrate new UserHydrator() // The hydrator above ); I suppose, `new` for model can be avoided manually by using serialize?
I'd like to see my UUID library ported to other languages.
PHP is free to use but hosting and domain name will cost you something. If you want a blog just use a blogging platform like Wordpress.com, programming is not the easiest thing in the world. 
ProcessWire for good. If you use WordPress for anything but blogs you are using it wrong. I switched to ProcessWire and Clients love it because the backend only includes fields that are used on their page itself. I struggled so much adding custom backend forms to WordPress... Never going back, except if client wants a freakin blog.
The only thing I don't ike about CraftCMS it's that you have to pay for it. OctoberCMS is Laravel based, 100% open source and a better option than Craft. 
I do use frameworks at work, I have years of experience with several, they are great for teamwork and in many cases save development time, but my personal projects are mostly build with no frameworks and very few 3rd party libraries. I also enjoy writing SQL queries instead of using ORM.
&gt; To use an analogy, it's like being passionate about food while everybody else seems to be passionate about McDonalds and everybody chastises you for cooking up a meal yourself instead of ordering a cheeseburger from McDonalds. They say "the cheeseburger is edible, why reinvent the wheel?" I would rather compare it to "I want to make fair money off of my time spent on a project, rather than either overpricing the quote or lower hourly rate as a side effect of having to start from scratch every time". Now, I do not like to use community frameworks, i rather use components and build something that is to my taste, which in my case means utilizing composer. Rewriting the logic and fail-safes of an httpkernel for every project, or the cli application, or request object, etc gets old after the first project, and it will only mean you charge your clients more than needed, or you don't get a high enough hourly rate (when comparing quote to actual time spent). Frameworks don't lack soul. They are the souls of our community, working together as one to minimize errors and failures.
That's not REST. 
I work in a larger ad firm so we deploy many projects over a given year. Using a framework ensures a standard across all our assets and just helps keep our sanity when deploying a project. Also helps when hiring contractors as we have a definable skill set we are looking for. This is just my opinion on this type of environment.
Here are the issues I see: - bundling frontend libraries with a framework is a terrible idea - directory structure has nothing to do with "MVC" - using singletons for DB connections will make it quite hard to work with multiple databases - all of it relies on global state or tight coupling to class names - you should have made a regexp-based routing, instead of hacky `explode()` approach - this has nothing to do with MVC - all code is tightly coupled. Haven't you heard about dependency injection? - don't use public variables for your entities - it's breaking object's encapsulation. - your PDO setup for mysql is wrong/vulnerable - no tests This is not something I wold recommend for anyone to use. 
It's purely a quotation of productivity. You have to be able to perform your work at a competitive pace, which is awfully hard without a base to build upon. Before frameworks were popular, most of us had our own custom skeleton we used for every project, along with all kinds of common includes for various functionality. This was basically a custom framework. If you're only working for yourself, you can continue getting away with that, but for anyone working collaboratively on a team, having a common, shared base is invaluable. A good compromise solution is to use a micro-framework that doesn't do a whole lot out of the box, and start adding what you need piece by piece. Personally, at this point in my career, I just want to get things done as quickly as possible, so that means as much code reuse as possible. Starting from scratch was much more fun when I was a younger man, back in the PHP 3 days.
I don't care about a mystical feeling for my project, I care about creating a usable, maintainable product that is easy for other developers to contribute to while working efficiently with the tools available to me. If "soul" is so important to you that you're willing to sacrifice one or more of those things, your priorities may be a bit out of order. "Reinventing the wheel" isn't bad if you have an improvement for your wheel - if someone else's wheel is too slow, too cumbersome or doesn't fit your design pattern, then make your own - but if you're reinventing the wheel just because you don't like that it's not ***your*** wheel, you're not thinking.
The company I worked for in a nutshell 
Love this one :)
I am most concerned that N+1 issues don't crop up during fetches, so the tests check for that, but aside from that I have not done any benchmarking.
The trick is to **use** a Framework, not to build on top of it. You don't need to build your code the way the Framework wants you to. Move your controllers to your own structure, accept PSR-7 interfaces and then tell the router to use it that way. Create your own factories and register them with the Service Manager. Accept only classes in your constructor, never use the service locator outside of factories. Build a layer around ORM, don't throw ORM code everywhere. Basically, decouple your code from your Framework, so that you're just using it as a tool for various functions, rather than letting it dictate how you build your code. It sounds like maybe you want to read up on Hexagonal Architecture. But to answer your question: When my code is coupled to the Framework it annoys me. When it's not, I love using the Framework. It lets me get all the small things out of the way and actually focus on what matters. On the meat of my code. On why my code exists in the first place
I’m a little biased (I run the company that makes Craft) but we absolutely love Yii here. It’s really robust and the codebase is remarkably modern, clean, and consistent, making it a pleasure to work with. We picked Yii after comparing several frameworks including Cake, Symfony, and others (Laravel was just a twinkle in Taylor’s eye at the time), and it was a choice that we were happier and happier with as time went on and we got to know it better. When Yii2 came out, so much had changed that we were basically going to have to rewrite the CMS anyway, so we did give Laravel a look then, just because so many Craft developers also use Laravel. But in the end we still liked Yii better for its speed and architecture. And as we rewrote everything on Yii2, we came to love it even more - thanks to all of its improved flexibility and features we found ourselves deleting 100s of lines of no-longer-needed code. And deleted code is the best code.
Was it ever relevant? I've never used it, don't know anyone who used it, never seen a job interview for it.
Indeed, I think it was you who shared this initially =)
Cool, see you in four hours (I’ve got about 30 sites to update). 
&gt; Does anybody else here not enjoy using a framework? I feel like it takes away from the soul of my project if it is built from classes somebody else has written You are of course welcome to your views, but surely you recognise how incredibly arbitrary the line you are drawing is? Even if you don't use a framework, you're using standard library functions you didn't write and internal classes you didn't write, all running on an interpreter you didn't write, which boils down (through multiple levels) to assembly instructions you didn't write, running on a CPU you neither designed nor fabricated, installed in a server you didn't build, talking to a RDBMS you didn't write, running across a network you didn't install or design, using protocols you didn't design, using networking stacks you didn't implement. Either you think the point of what we do is delivering a solution to customers by wiring together bits of functionality that other people have written (in which case your stand against frameworks is pointless at best, and harmful at worst), *OR* you think it's just about building something from scratch, in which case none of us have done **anything**; here's a bucket of sand; come back to me when you've managed to turn it into a CPU and made it boot. :) &gt; I'd much rather build something from the ground-up Sorry, you're writing PHP; it's about as high level as you get. If you think you're doing it from the ground up just because you typed `$pdo = new PDO(...$config);` I have some very bad news for you. &gt; The best fun I have I enjoy being told "wow, great job, I can't believe you shipped that feature so fast!" and then going home and playing *Gloomhaven*, but okay? &gt; And then if you vent about it, you inevitably hear the phrase "reinventing the wheel" a countless amount of times. ...because...you...are? I suppose designing a car would be fun too, but most of us just go buy a Toyota. &gt; To use an analogy, it's like being passionate about food while everybody else seems to be passionate about McDonalds and everybody chastises you for cooking up a meal yourself instead of ordering a cheeseburger from McDonalds. They say "the cheeseburger is edible, why reinvent the wheel?" To use an analogy, that's like stringing random words together that have no relation to the subject you're discussing. A better food analogy would be "I'm passionate about food, so I'm going to *go plant some wheat out back so maybe in 6 months I can start making flour for my burger bun* and start learning how to breed cattle, whereas you are going to the store, buying the best, premium ingredients, and creating a pretty god damn amazing burger from scratch." My burger will be faster, cheaper, and most importantly...better. (Speaking of which, someone did this! They spent 6 months and $1,500 to make a sandwich as "from scratch" as they could, including making their own cheese, killing a chicken, and growing a garden. And the end result wasn't even a very good sandwich. [Link](https://www.theverge.com/2015/9/17/9344597/man-spent-six-months-1500-making-sandwich-from-scratch).)
We use Yii in my company from ~4 years. Every new project starts on Yii2 - and yes, IMO is relevant; easy to learn, extensible and well designed.
Your analogy is simply wrong. With a framework, you are concentrated on the cooking, having first class ingredients at your disposal as well as various cooking utensils. Whereas starting with naked .php files is like starting with building an owen, prodicing earthenware, sharpening a knife, growing livestock,and poultry, tending a farm only to get a sandwich that after all these pains [would taste not that good](https://www.today.com/food/making-chicken-sandwich-scratch-took-six-months-1-500-t45091). 
I love how this post of yours is considered controversial, as if people are fanboys of WordPress and take offense when someone has a good reason not to like it....
I think I'm the Russian guy you're referring to :) Thanks for compliment but I'd like to correct: Yii isn't one-man-show. We're doing it together: core team, maintainers, community members... everyone. The project is for us all to benefit from co-maintenance, more testing, quality and stability.
It's a reasonable framework, with some nice ideas and good CRUD support right out of the box. However, I wouldn't recommend it to anyone to learn unless you have to for a job/interview. There are 4 other frameworks I'd suggest to learn instead: Symfony, Laravel, Slim and Expressive.
What's funny is, from what I can gather from folks that use WP, having language packs installed makes the auto-updater not break.
A very good point on the team and communication. I would also throw in a lifespan. While you're working on your homegrown app's business logic, some service parts like registration, reporting, session management and a multitude others would age and you would have no time to improve them. Whereas a farmework evolves in parallel, and you have first class recent state-of-art components of your site doing nothing.
The soul is your website/application. The thing that makes it unique and serves a purpose. But before it can exist, it needs some basics: a skeleton, nervous system, cells, organs etc. Those are just "flesh and bones" - common to all websites, and they are not part of the essence or "heart and soul" of the website. They are just plumping. Infrastructure. Mundane details. Do you really want to spend all your time building those same mundane details over and over again before you can get to the *really* interesting part of building out your unique application - it's heart and soul? Frameworks take care of that plumbing for you. They let you focus on the big picture and your application's "soul" without having to worry about the skeleton, nervous system, cells etc.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
They will be made public probably around Q4 2018. 
Same here until I applied for a job that used it. Bad idea. Coming from CodeIgniter, CakePHP, Phalcon and Laravel, both versions of Yii are particularly annoying to use. I'm surprised that just about everyone here is raving about it. 
Why?
 If you like coding for the sake of coding, by all means this is a totally valid viewpoint. However, if you like building and shipping products, frameworks provide you with a significant head start in the right direction. Coding "raw" is a good way to get an understanding of a language's fundamentals but after awhile all that coding gets in the way of productivity. With modern frameworks you can have a basic web app built out in just a few hours versus days or even weeks of "real development" using a text editor. Frameworks aren't supposed to have soul, they're just a tool, like a hammer or a saw that you use to build your product which is where the real creativity shines. But don't worry, most developers go through this phase. Just don't waste too much time on it. If you ever end up working with other developers, it's much easier if you all have a standard to rely on and oftentimes this is dependency on a certain framework. You're going to get more people to be able to help you if you're building off of Laravel, Symfony, Cake or CI than if you just write your own "framework" or build from scratch all the time. If you're just passionate about coding and enjoy the process then by all means code away!
Funny enough, I saw https://core.trac.wordpress.org/ticket/43242 come across the Trac timeline the other day (my company has WP clients, I follow it) and something about that jumped out as a red flag to me. Like maybe they are using a localized distribution, not just adding localization strings in the chosen language...
The soul is what you add to the framework. You go soul?
Imagine if you had to create all your ingredients, from absolute source? It would take years just to get to get to the point where you can make a burger. The seeds, the soil, the seasons, the harvesting, the feed, the nurturing, the vets, the slaughter...the list goes on.
Getting there, you could instead use binary if you're a purist! Not my thing though.
Did you rewrite your own date function instead of relying on the bloated and bugged php native function ?
Over the past few years I've made about 15 sites with Bolt. Modern design philosophy, configurable with yaml, twig for templates, and based on symphony. I love the contenttypes system for auto building the cms. I've even delved into the extension system and it actually uses an easy API to do everything. I've used my own extensions to do everything from custom search to a "like" system for user accounts. Bolt also has a great community and support. Being able to jump on slack and actually get help is a pretty big deal.
I prefer Symfony, I really don't like how many facades are in the laravel framework :/ But that's just a personal preference, nothing against Laravel per se
Wow I didn’t know this CMS and it looks pretty good. The only thing that would tip me over is a complete support of Postgres so that I can definitely ditch MySQL (MariaDB) off my server. But from their own documentation pgsql support is “experimental”. I’ll wait until it matures a bit!
Yii2 has some unique features like: 1. tightly integrated database layer (AR) which ensures great performance, optimisation and intuitive API methods. Other frameworks usually take third party ORM (Doctrine, Propel, Eloquent, ..) and then may suffer from overhead due to "extra" functionalities. Yii2 supports out of the box multiple RDBMS (mySQL/MariaDB, oracle, MSSQL, sqlite, PostgreSQL) and some others incl. NOSQL/fulltext e.g. Mongo, Cubrid, ElasticSearch ... 2. by default it does NOT use templating engine, which also contributes to good performance and lowers learning curve (PHP is already templating engine, Rasmus said once:-)) Many other frameworks use e.g. Twig or other templating engines... 3. It integrates bunch of UI frontend components (JQuery UI, bootstrap UI, ..) - you don't program, just configure - great time saver. 4. It has excellent HTML form builder with client (javascript) &lt;-&gt; server (ActiveForm) synchronized validations. 5. It supports REST out of the box (SOAP via extension). 6. has code generator (Gii) - it can generate AR models for DB tables, CRUD controllers with views, ... timesaver. 7. has many third party modules from OAuth, queues, ... Yes it is! :-)
Here you go: https://github.com/Ray-Di/Ray.Di
&gt; I think you're setting the bar to high for developers I think you're setting it too low. If you go look at the Golang community, it's pretty standard to denounce frameworks in favor of building your own architecture with smaller components. I see no reason why PHP can't be like this, also.
I manage about 30 or so Swedish WP sites for work and or me about half of them updated to 4.9.4 automatically, while the other required manual action..
Wow, nice to see you here. Thanks for your testimony.
Nice to know that :) thanks for your comment
I've switched to Bolt ~4 years ago and never looked back. It's a joy to use really.
Do you use wp-cli? wp core update 30 times. Done by a CI script.
What I hate most is having more comments that real code for every method
&gt; You pick a router, http abstraction, DI container and a templating engine and that's about 90% of what you will need I think you missed a DBAL somewhere in there ;)
But `pm.max_requests` means child process will respawn after handling x number of requests. I have 500. So, I need to decrease this value to prevent memory leak? Any suggestion to debug?
There is an alternative: [ne-on.org](https://ne-on.org/)
Not really. PDO is just fine, when you are writing custom [data mappers](https://martinfowler.com/eaaCatalog/dataMapper.html). 
Not sure I'm following what you mean here. The `new User()` bit here is just to show a quick example. What's often used in a more practical sense, is a model/entity is fetched from a DB or other source and then updated via request parameters through a Hydrator. Otherwise, a new model instance is provided.
Glad to hear it! 😃
We're using Craft 2 at work, and looking at moving to Craft 3 once it's full release is out. I'd say Yii 1/2 are both still relevant.
What bugs or bloat does the native one have?
This is the part where I bring up [Atlas](https://github.com/atlasphp/Atlas.Orm). 
Thanks for the informative reply! Some questions about it: - How are CAs more secure? Verisign, for example, is a CA (aswell as the owner of the COM signing keys) - there are very many CAs. So if you say Verisign is not secure, why should it be more secure as a CA than for DNSSEC? - Isn't DNS "integrity" a totally different thing than DNS transport security? If somebody poisons a DNS cache, then any transport security will not make that go away. Having a verification of DNS entries by different parties (registrar, DNS service, and all the root zones) makes it at least much harder to fake DNSSEC. Or if DNSSEC is easy to "fake", then it should be easy to demonstrate by those who do not believe in it. Basically, if you say "X is not secure" you at least have to show a specific weakness which can be exploited, otherwise this seems like a very simple argument which does not hold much water. I still get why TLS would be very good to implement for DNS, but I do not get why DNSSEC is per se bad. Of course if somebody has the signing keys then they can somehow circumvent the security mechanism - yet that is true for basically any cryptographic security mechanism.
I wonder if my shared host would do this? 
Uhm, it's not a rocket science to learn a new framework on your new job. It's silly to all your focus on some #1 framework and thinking that's what's gonna set you apart from your competition. Justin Bieber is also popular, doesn't mean he's any good.
I've been learning October CMS, but I'll check Bolt out too. 
Check out October CMS. It's based on Laravel. 
&gt; also a member of PHP-FIG So is SugarCRM. Not exactly an indicator of good code. 
haha nice typo I guaranty that my spaghetti sauce doesn't contain any demons.
I knew some were claiming PHP is evil but this is next level satanic stuff
I'm not taking about once you have a job. Everyone should feel free to explore and choose the correct tool for the task at hand. If two equally skilled developers apply for a position then the candidate who is already experienced with the tools the company is using will get the position. I'm suggesting that for the purpose of finding a new job that learning a more popular framework is a better use of time.
I told you that you couldn't handle the spicy one
I'm actively using Yii2 for years now and I just love it! Is Yii2 still relevant? **Y**es **I**t **I**s. For sure.
1. No N+1 problem. You'll see 1 query per relationship, not one query per record in the master set. 2. Something like this, copied from the [docs](https://github.com/atlasphp/Atlas.Orm/blob/2.x/docs/reading.md#fetching-related-records): &lt;?php // fetch thread_id 1; with only the last 10 related replies in descending order; // including each reply author $threadRecord = $atlas-&gt;fetchRecord(ThreadMapper::CLASS, '1', [ 'author', 'summary', 'replies' =&gt; function ($selectReplies) { $selectReplies -&gt;limit(10) -&gt;orderBy(['reply_id DESC']) -&gt;with([ 'author' ]); }, ]); 3. There's no yielding of *records*, only fetching; there is yielding of *rows* but they don't carry relateds with them. 
But why?
Try formating a midnight date with "ha" format. Or create a datetime for year 10000. But if you couldn't tell, that was sarcasm to point out the flaws of the argument : we ALWAYS use thrid party code. The standard libraries, our code editor, our operating system. Opposing "simple and clever" to "including [bloated] third party" is not an argument. Including a 3rd party ALWAYS have its pro and cons, and our role is to weight this and make an objective decision, not to go with some preformated idea that you must or must'nt use a 3rd party. And that's why I used dates functions as an example. That's 3rd party code, wich isn't perfect, yet everybody claiming that "i prefer coding without 3rd party code because X" always use them without thinking about it. When asked about, they'll say "why would I recode a function that already exist ?". Bam, that's the argument for 3rd party code that they always ignore, unless it applies for their own choices.
&gt; How are CAs more secure? Verisign, for example, is a CA (aswell as the owner of the COM signing keys) - there are very many CAs. So if you say Verisign is not secure, why should it be more secure as a CA than for DNSSEC? Because there's a nuclear option if they get compromised or go rogue: The CA/B forum will distrust their certificates, thereby causing their business to go under. With HSTS preloading, [certificate transparency](https://www.certificate-transparency.org) with Expect-CT, and public-key pinning, we have a big stick we can wield against any CA that gets compromised. With DNSSEC, we have no such enforcement mechanisms. We also get far less oversight/transparency because there is no analogous feature like Certificate Transparency. Indeed, the entire White Lies feature is antithetical to the goals of CT. If DNS integrity is a problem worth solving, something like Namecoin is actually a step in the right direction. Just, less of a cryptocurrency would be ideal. &gt; Isn't DNS "integrity" a totally different thing than DNS transport security? Yes, and DNS transport security is an actual problem for most users. ISPs use unencrypted DNS to spy on their users' browsing habits. &gt; I still get why TLS would be very good to implement for DNS, but I do not get why DNSSEC is per se bad. People want DNSSEC because of DANE. There is no other incentive for anyone to adopt it. DANE ousts the CA + CT ecosystem in place of one controlled by governments.
/r/webdev and /r/web_design are full of WordPress fanboys, who *do* take offense when someone describes how shitty it is.
I think now they've really cracked down on API access - the Windows Phone community had a 3rd party app which became unusable because, if I remember correctly, Snapchat started using push notifications to detect third party clients (well, the lack of push notifications being received).
&gt; The pellet with the poison's in the flagon with the dragon; the vessel with the pestle has the brew that is true.
ok most of us in the professional world have deadlines, we cant and dont want to reinvent the wheel on every application,furthermore reusing off the shelf tools and projects protects from the danger of introducing critical bugs into boilerplate code
I have constant spirits flowing out of my code. I can't blame you for having live demons. Sometimes our code needs to be evil.
Because PHP GTK 4.0 will take a while :D
 /** * This is a comment. * The line below this is a method, which is going to return true or false. * If the value is true, then the value is not false. * If the value is false, then the value was not true. * @returns \boolean */ public function getRandomBoolean(): boolean { // return true return true; // end getRandomBoolean() }
Why would you want to use PHP to build a GUI app though? There are so many better choices...
Built in templating engine? You mean php itself? 
It is the PHP way, after all
 I've found an ORM benchmarking project and I've added Atlas to it https://github.com/adrianmiu/forked-php-orm-benchmark |-------------------------------------------------------------------------------------------------------| | Library | Insert | findPk | complex| hydrate| with | memory usage | time | | --------------------------------:| ------:| ------:| ------:| ------:| ------:| ------------:| ------:| | PDO | 54 | 6 | 17 | 64 | 284 | 1,701,016 | 0.43 | | | | | | | | | | | Maghead | 584 | 7 | 469 | 346 | 383 | 10,485,760 | 1.80 | | | | | | | | | | | LessQL | 402 | 65 | 276 | 302 | 336 | 7,993,624 | 1.39 | | | | | | | | | | | AtlasOrm | 1753 | 15 | 458 | 625 | 999 | 5,896,872 | 3.86 | | | | | | | | | | | YiiM | 733 | 81 | 310 | 298 | 551 | 6,291,456 | 1.99 | | YiiMWithCache | 734 | 83 | 314 | 310 | 563 | 6,291,456 | 2.02 | | | | | | | | | | | Yii2M | 1476 | 177 | 440 | 649 | 1029 | 8,388,608 | 3.79 | | Yii2MArrayHydrate | 1478 | 179 | 444 | 274 | 878 | 8,388,608 | 3.27 | | Yii2MScalarHydrate | 1430 | 162 | 405 | 251 | 476 | 8,388,608 | 2.74 | | | | | | | | | |
It's fast, easy to use, easy to deploy, easy to manage, and has lots of great libraries and frameworks.
I've always liked the fact that it has a million un-namespaced functions to use. Now, other languages don't do this (think Math.pow in javascript versus just pow() in php) because its considered bad form, but I consider it one of PHP's strengths.
Well, yes
&gt; I can't for the life of me think of what kind of features are in PHP that make it better to develop in than other languages. To be frank, it doesn't have much. We make it a bit easy to do certain things because of `$_GET`/`$_POST` and we have a wide range of standard database drivers. PHP exists mostly because its advantages back in the 1990s/2000s were more pronounced.
Depending on where you live (for me at least), it’s the availability of jobs. At least it was; that’s starting to shift away from my specialties and lean more toward popular cms’ and front-end. Other than that, I stick with it because I know it through and through (with respect to how employers around here use it). I’m at that point in my life where I’m finding that my non-work passions are not computer related. 
I always knew /r/php and /r/paranormal were going to merge one day.
A percentage of PHP devs do not want to learn something besides PHP and jQuery..
Well that's just silly.
Bruh I'm lost, this method needs to be .ade clearer. It returns a string right?
Great movie
I probably just use PHP because I have a lot of code in it, and I know converting working projects to other language would be a waste of time for little benefit. It's hard to know which language I'd pick if i started today. I think probably node.js. Not that node is a special snowflake, but dispite all Javascript problems I really like it's syntax. Async is not extremely essential but having it is better than not having now that async/await saved from part of the promise/callback hell. Other language I have experience in is Ruby, it has a better type system, reads almost like english, without semicolons and all that, but I feel there's too little Ruby can offer over Javascript. Java I'd never use, I just took a look at Typescript, and even knowing that declaring types is a nice thing to do, I can't help but feel it's not worth it.
I feel the same about Node.
today I use plain old PHP to write rest api, it's easy and fast (edit file then refresh) on the client side I use html, css and javascript, because.. well.. it's easy and fast
Have you given Go a try? The language can be frustrating coming from JS's syntax sugar and flexibility, but it really nails the ecosystem aspects, I reckon. Package management is a breeze (mostly because the designers just ignored the difficult parts), the compiler is fast, and gofmt takes a load off the mind when reading and writing code.
none
SlimPHP
&gt; But I can't for the life of me think of what kind of features are in PHP that make it better to develop in than other languages. You can't because there are aren't. There is nothing that PHP has that isn't available in other languages -- perhaps in a better form. PHP is a product of it's time by the time version 3.0 came around, it was literally the best way to development web applications. The LAMP stack (Linux, Apache, MySQL, and PHP) was huge. But PHP 3.0 came out in 1998 -- 20 years ago. Since then plenty of existing languages and entirely new languages have come along. PHP has come a long way since that version and it's a perfectly capable language with a few warts -- but there isn't anything particularly special about it anymore. 
How wrong you are.
Nobody in 2018 has any business using MySQLi.
Nobody? Not even people who want to use advanced MySQL features (albeit few) that don't exist in PDO, but do in MySQLi? 
Nobody. If you're making database-engine-specific decisions in your application code, you're writing bad application code.
Thanks for this. I'll need to look into what appears to be a too-high "insert" value; issues and/or PRs on your repo acceptable?
&gt; especially if you look at kotlin, rust, haskell and other ecosystems that start from an advantaged position by having better type systems, better language design and less runtime issues. I'll start listing off sites built with PHP, and you start listing off sites built with any of those and let's see if we can figure this out..
It's not really an either/or kind of thing, and it's not like learning the one will lead naturally to the other. If you'd prefer to learn backend first, learn Laravel. Frontend, learn JS. Or go with nodeJS and use JS all the way through.
He said "worth their salt" which is absolutely correct.
&gt; Notably, it runs faster than other similar scripting languages... nodejs is significantly faster than PHP. If performance is your primary concern C#, Java, or Go are much better alternatives. 
Nowadays newest versions of php ouperforming Java and even Python. Also most PHP code and architecture looks better than Java or .Net. (Depends on programmer) PHP code is scalable, easy to intergrate new futures, easy to edit, thanks for it for microservice structure. With PHP you can do everything Always follow S.O.L.I.D (The first 5 principles) OOP MVC plus Templates structure and other good practices and of course, use strict types and you will be surpized of his speed. PHP is not the same as have been long time ago, &gt;7PHP - there Real PHP born. Also there are appearing more and more PHP backend based websites and this language is still popular.
PHP's core strengths are that it's oriented around handling single requests and cooperatively sharing hosting resources between many endpoints. This makes easy to comprehend, iterate quickly, parallelize development, and scale across multiple servers. PHP lends itself well to composing functionality from existing parts, building more bottom-up than top-down. It has a mature class system and increasingly well-adopted set of community standard interfaces. 
Is there anything he said that is wrong?
Well, he is wrong on almost on every point. That is if you care about the quality of the programs you write.. &gt; very powerful standard library The PHP standard library is such a mess, its unbelievable. No need to go deeper here, there is plenty of rants around the web. I have never used another language with as messy and poor standard lib as PHP. &gt; good documentation Meh. Id say all non-alpha/beta languages have good docs. PHP has user comments in the docs, that promote dangerous/wrong usage of the function described. That plus all the horrible PHP articles you can find on the net does not help either. &gt; best OOP support out of all dynamic languages This MUST be a joke. PHP has bolted on OOP semantics, that are definitely not the best. The first bolted on version of OOP came in PHP3 (IIRC) and had more bolts in PHP4, and PHP5. Its a mediocre at best. &gt; only dynamic language with first class support for enforcing types Ill leave this as a exercise for the reader... &gt; only language where you don't need to manage discarding state by yourself. It's destroyed automatically when request is finished. Very easy to write local, request bound caches. For PHP this is a good thing. I seen horrible PHP code, using global state all around. This one feature make PHP not leak memory and all the crap written can be gc'd. For more serious stuff this is still a limitation. How can you keep state around if you really need to? In PHP you must use a database of some sort. Theres really no other way. This also means PHP must start and stop your app on EACH request, making is slow as hell. &gt; Thanks to forking nature, blocking task doesn't block all other requests using this server process too This is NOT a php feature, this is the webserver. PHP has no async capabilities, it relies on third party applications to manage that. Also if you have a busy application your going to have to scale the webserver, as this is not possible to do in PHP. &gt; You can write/use PHP extensions for powerful core modifications Yeah, you could write a PHP extension in C. The fact is no one does. And the ones out there are really not maintained at all.
OP did include typescript in that list, and it's hard to deny it's place in web development right now.
Hello, thanks for your reply, I'd like to ask you for more elaboration on what you're seeing wrong so I can improve and fix what's wrong. The idea of the framework is to kickstart my php projects simply and rapidly, so something like singletons for DB might not be suitable when working with multiple database but It's sufficient for the majority of cases when you're starting a personal project or a prototype, and you're not forced to use these DB classes, they're just premade in-case you wanted them, also I am not trying to compare myself to popular php framework. 1. about **routing**, can you please elaborate why I should be using regexp routing instead of explode ? I thought about regex when I was reading about routing and checked some open-source routing libraries and some of them used regex, but my intuition that regex is an overkill for what I'm trying to accomplish ? I have only one planned addition is to be able to use regex inside a route param {}. 2. about **MVC**, can you please elaborate why "this whole framework has nothing to do with MVC" ? I mean, compared to vanilla php you now have separate models, views, and controllers, with functions to pass data between, render views and use layouts, etc ? on your second point maybe the way i wrote it betrayed me, indeed directory structure has nothing to do with MVC, I kinda meant that you have seperate directories for your models, views, controllers, I will change that thanks! 3. bundling Frontend libraries might be terrible idea, but it's there under the main idea of kickstarting projects rapidly, it's like how in ASP.NET template project has bootstrap or Laravel scaffolding using bootstrap. I will work on trying not to use global/static objects or states as much as possible, I think this will be done while I am building tests for the framework as I know these will introduces difficulties when testing, as a student I currently have limited experience with building tests, that's why I didn't build tests while building the framework concurrently, but from the feedback I gathered this is a domain I must conquer. Thank you again! 
That's just bs, if you believe that you never used any other language in your live (no, is does not count).
I’m having nothing but problems installing Laravel on Windows (probably why) so I might just stick with JS. Haha it’s such a pain. Thank you very much for the advice though. :) 
As long as it's fast enough, speed should be ignored.
With modern [PHP deployments](https://github.com/phpexpertsinc/laravel_quickstart/), you can set up an ENTIRE WEB STACK plus a Laravel instance pre-configured with userauth (login, register, etc.) with just 3 shell commands: ``` wget https://github.com/phpexpertsinc/laravel_quickstart/archive/v1.0.0+php7.2.2+laravel5.5.tar.gz tar xzvf v1.0.0+php7.2.2+laravel5.5.tar.gz ./install.sh bin/containers up ``` I mean, when I watch the [installation video](https://vimeo.com/254289186), I think to myself (and I ask you!): What other language is *THAT* quick to deploy a full-working webstack that I can just upload to a docker server, like Google App Engine, and have a prototype up and running in less than 5 minutes? I have never seen anything that comes close. This is even easier than wamp.
With modern [PHP deployments](https://github.com/phpexpertsinc/laravel_quickstart/) and Docker, you can set up an ENTIRE WEB STACK plus a Laravel instance pre-configured with userauth (login, register, etc.) with just 4 shell commands: wget https://github.com/phpexpertsinc/laravel_quickstart/archive/v1.0.0+php7.2.2+laravel5.5.tar.gz tar xzvf v1.0.0+php7.2.2+laravel5.5.tar.gz ./install.sh bin/containers up I mean, when I watch the [installation video](https://vimeo.com/254289186), I think to myself (and I ask you!): What other language is *THAT* quick to deploy a full-working webstack that I can just upload to a docker server, like Google App Engine, and have a prototype up and running in less than 5 minutes? I have never seen anything that comes close. This is even easier than wamp.
Coding naked, huh?
Guess we need to update the docs then: Postgres is fully supported. Heck, even bolt.cm itself runs on Postgres. Thanks for the heads-up. ;-) 
If you are using it: of course it is :)
It does not have any major big features. What it has is well-incorporated features that other languages introduced first, but without the downsides. PHP is always on the catching-up end of "features" for the most part, but it also incorporates stuff from all over the spectrum and mostly avoids doing the mistakes other languages did. It's a everyday tool, like a hammer - reliable and easy to use. It's not gonna be on the bleeding edge ever, but it also does not have to be. And it has a great ecosystem. Ecosystem is the best part about PHP - the level of collaboration and composer are unprecedented level of code reuse and tool quality is very high. It's hard to find the same level of ecosystem for many other languages. PSR standards, despite some of them being a bit controversial, are in general a very good thing and promotes interchangeability. On the performance part - it already wipes the floor with Python and Ruby and it's still improving. And that's without any JIT, and that JIT is being worked on actively and shows great potential. There are also stuff like PHP-PM that boosts performance to mind boggling levels for frameworks and libraries that do proper support for shared-request workflow (Symfony, Laravel and some other are supported out of the box). Basically, PHP is not better than any other language. It's best at being the best all rounder for web development doing almost everything just right.
Every bench mark I've seen has php7 being considerably faster unless you are talking about a ton of workers and async. Could you point out where it's faster and some data behind that?
Tbh though, that's just laziness and not a feature of the language. In this day and age is trivial to get good hosting for any Lang you want.
I'd love if you addressed the point instead of throwing a nah won't put there. I won't say I agree with 100% there but a majority there is correct as far as I have experienced. Would be nice to have another idea to consider than just a nope wrong.
Honest to God, half of those things describe as feature are terrifying in any other Lang. I wish three points they disagreed with were addressed, because I agree with most The standard lib is good? 
Honestly you can do the same for most Lang's. I just copy adococer compose from another project and an good to go.
OO *was* shite in PHP 4, got a bit better in 5, and has improved again in 7. It's no longer shit. And PHP 7 isn't generally considered to be slow. It's not the fastest sure, but it's fast enough for what it's doing.
It's pure for web development. It's not like Java or Python or C# etc. which are not pure web development languages.
Memcache or APC will store data between requests.
"Support for functional programming is pretty bad." What do you mean by that? In my experience most PHP developers haven't even tried hard enough to know one way or the other
A framework is only the frame of it. You can use a framework and only use classes you have written yourself. But you can also use classes someone else has written. but imho, only using classes by others is as stupid as only writing your own. A good well-tested 3rd party class can reduce your costs in development by a huge margin. Just throwing in 3rd party code and trying to make it work together usually isn't the most efficient solution either. Like most people already said here. Coding is a job. If you can offer the same quality of code in less time, aka for less money, you have an advantage over the others. You being the best coder in the world is not going to help you if you don't get any contracts. 
That is subjective, I’ve written my apps in nodes and it’s slow af, not to mention a resource hog. It all depends on what you’re doing 
Its difficult to go wrong with Python (+ Django). Theres also a Python CMS called Wagtail that i have heard good things about (dont use a CMS for anything myself) You get a similar development process than with PHP (edit, save, refresh), but with a sane language, that has tonnes of high quality packages available.
Why don't you just look at the code? It's not like it's very long. https://github.com/serbanghita/Mobile-Detect/blob/master/Mobile_Detect.php
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [serbanghita/Mobile-Detect/.../**Mobile_Detect.php** (master → 4da80e5)](https://github.com/serbanghita/Mobile-Detect/blob/4da80e5624199beaed556e82f2326e63e83d4869/Mobile_Detect.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply du16n12.)
"No longer shit" would mean a large refactor in the PHP codebase, with semantics cleaned up. New features wont make the old features "less shit" in any way. I have not seen any **real-world** PHP7 benchmarks (against the other big dynamic languages, Python, Ruby and JavaScript) but i have a hard time believing PHP can be faster, because its lack of async, and process model. 
Thats total BS. Please direct me a real world benchmark were PHP out preforms Java and Python.
WebERP
PyroCMS has so much deep inside that is not documented and visible at first glance. I've been developing a large scale application with PyroCMS for more than 1.5 years. But sadly it's getting way less attention than it deserves.
... I'm stupid :D
I only took a look at some introdutorial articles about Go Lang. I am a pragmatic guy, as I see it Go is all about performance and coroutines, right? I wouldn't choose Go now with what I know because the ecosystem is important for me and it's still has a small share. 
its forgiving :)
I reluctantly use php. I don't hate it, but I don't find it to be nearly as good as some of the newer languages out there. And I'd say the same thing about python. Python is just as insane and adhoc feeling as php.
Define "real world benchmark". IMO, unless you build the same app twice you won't have one. Even then, how you code it up will affect the performance for each language. And then that will only be relevant to this single app. And don't get me started on if it's even relevant once you get "fast enough". https://benchmarksgame.alioth.debian.org/u64q/php.html
What features has PHP taken from modern languages and done better?
Where are your tests?
Didn't say it was faster, just that it's fast enough not to be where the performance problems lie. 
In the todo list. I made a few, but i couldn't keep up with every refactoring i made.
&gt; Refactoring without tests is just changing stuff. https://www.thoughtworks.com/insights/blog/refactoring-book
&gt; Refactoring without tests is just changing stuff. https://www.thoughtworks.com/insights/blog/refactoring-book
Anonymous functions are verbose and require explicit variable closure and knowledge of references vs. copies. Perhaps that's what OP means.
https://medium.com/@mihaigeorge.c/web-rest-api-benchmark-on-a-real-life-application-ebb743a5d7a3 This shows PHP - specifically via laravel and lumen - sometimes being faster than django/python, and sometimes not. No Ruby comparison, and the comparison against Express has JS much much faster.
If you like "you get X for free", then you should take a look at Python, which is trying to include damn near everything in the stdlib.
SOLVED: it was noob mistake I made when naming the file. It works, for now. Thanks guys, I’ll remember y’all when I make it big 
Given the shared nothing architecture, you often lose any advantage you get from faster execution of individual operations.
What do you find insane and adhoc about Python? I've always found it to be one of the most intentionally designed languages in widespread use.
PHP is a HTML templating language. It is not a general purpose language. That (to me) establishes its limitations.
Globals are sure convenient -- until they're not.
It's not just Regex, they also test the HTTP headers.
Maybe before php7.x branch. In php7, they're skipping ahead of the pack.
Thx :) 
OP has a history of posting help posts across subreddits that always read like OP has done next to no effort to try and solve the problem he came across by putting forth a little effort in researching a solution. I would not fall in the trap of helping OP out by doing his job for him. This is clearly someone that doesn't want to learn how to fish.
Noted. I'll do it probably this evening
Summing up all languages are good, greatly depends on developer level and skills. There is no big difference if you gonna choose Python, Java, PHP or other language for Backend
Reading through docs for PHP-PM: *ISSUES* Memory leaks, memory leaks and memory leaks. You will also find leaks in your application. This would be a deal killer in any other language (and flagged experimental/beta, not widely deployed in production), but not PHP: But no big issue since workers restart automatically. Unfortunately `fork()` is the heaviest system call in the `POSIX`API.
&gt; This is even easier than wamp A *lot* of users will not use the command line, under any circumstance. So, for example, a containerized CMS or e-commerce application won't get looked at by that audience.
Oh it's *horrible*. Doing a simple filter, into map, into reduce will take more lines of code and run slower. We cannot refer to functions by symbol and have to use strings which makes a task like renaming a function more difficult. When taking a callable parameter you have no idea if the args you are passing are going to pass by reference or by value. There is no support for partial function application nor currying.
&gt; good documentation I would disagree. Lots of pages on PHP.net have contradictory or outdated information in the comments. A lot of the standard library pages are missing full documentation, requiring you to read through those comments. PHP extensions are more difficult to write (poor documentation on interpreter internals) than at least Node or Ruby extensions, and remove all of PHP's advantages in terms of easy deployment.
&gt; the ones out there are really not maintained at all. Even when ostensibly, they're important to a robust ecosystem - like the debugger or complex data structures.
Maybe, I don't think either of us will know what OP means unless they say what they mean, but either way I'd like to talk about the features mentioned: Verbose anonymous functions? I assume what we're talking about here is arrow functions, most likely from JavaScript The thing to consider with arrow functions is that JavaScript is a very dirty language, this is fine in JavaScript: () =&gt; window.trolol(); But this breaks the assumption that functions are pure input, output, if I came to test this function there's now hidden input that needs to be in place before I use this function out of "context", what context is at run time is a very hard thing to track in JavaScript with the except of $this in PHP, PHP is incredibly clean in this regard, arrow functions would help encourage developers to trash predictability by doing invisible imports (like blocks but that's another rant). The other thing to consider is that anonymous functions in PHP should be the exception not the rule, real functions give you re-use and a semantic name to your operation, a real function would typically require doc hints etc. If you're building your system in a reusable way ideally you should be using real functions and maybe returning anonymous functions if you're looking to do higher order functions. If you're just using anonymous functions on your Laravel collection all day you're missing a large amount of benefit from using a function first system. Maybe there's an argument for arrow functions that are forced to use `use` but then the only difference is the word `function` personally I don't find that terrible, other languages do use things like fun, which is cheeky but I'd rather it said what it meant directly, fun vs function to a beginner, one is more explicit than the other Honestly in practise I don't think PHP suffers from a lack of arrow functions in the same way that maybe JavaScript did, being explicit and predictable are good qualities, JavaScript was never clean to begin with it because its scope is invasive and leaky compared to PHP. Explicit variable closure again is not a problem in my eyes, I want to know what is coming into the function by reading the function definition not some declaration N lines above my current position. Or maybe even elsewhere in the code base, don't make me hunt for it. I'm not sure what you're alluding to via references vs copies, unless you're referring to PHP's infamous object system, scalars move between functions by copy and objects by reference. I try to use as little objects in my system as is possible in a "modern" PHP because change by reference by default is disgusting, and the ambiguity of the current state of $this and difficulty type hinting $this's properties makes me super uneasy, it also breaks pure input output functions because now there's magic $this that is context dependent. Honestly if you're wrapping up your data in an object just so you can type hint the name of data then you're doing it wrong we have variable names, doc hints and scalar types that can be used to identify data, arrays can be unpacked and their contents type hinted with any number of array iteration functions, you'll get copy by reference for free, if you're using real functions use the opportunity to use doc hints too. &lt;out of scope ranting&gt; My less favourite kind of debugging in PHP is object based, I'll observe a state in the object and then I'll need to figure out how the object mutated to end up with a certain state, so I'll try and find the method(s) that interact with the state. If I'm unlucky the state will change outside the object (which requires reading every interaction point), if not I get the fun of reading an entire class to figure out what the method is (hopefully the mutation happened near my call point so I don't have to do this). Once I find a mutating method, the fun has only begun, the state might have changed here, or it might have been inside the parent object, there's no way of knowing unless I know the type of the object at run time, so I get to search the parents and the parent's children implementations, they'll no doubt have some shit method names like set() so I'll put that into sublime symbol search and it'll be like yeah here's 5 million objects with a get implementation, which one LOL ? If I'm lucky state won't have changed by literal magic __get() somewhere in this clump of Java/Rails inspired bullshit. If I'm really unlucky there will be multiple methods changing state all up and down the inheritance tree and I'll have to follow the object that could potentially be deep in a stack for its entire life cycle, let's hope this usage case doesn't require a lot of steps to replicate in the application, (Please Derick make a time travel debugger save me from object hell) I think my heart sinks the most, when developers declare they have immutable objects in PHP, because none of them with properties attached have a real immutable object, honestly objects are leaky &amp; clumpy shit in PHP Honestly the mind share of OOP in PHP is terrifying please read some history on what OOP actually was supposed to be: https://medium.com/skyfishtech/retracing-original-object-oriented-programming-f8b689c4ce50 and compare it with your current house of cards OOP implementation I know when I started OOP PHP every time I came across a case where I couldn't re-use code sideways or I'd used objects for everything to the extent that unwrapping something deep in objects looked like an unreadable mess, I'd become so caught up in the abstractions that I wasn't type hinting, I wasn't naming things naturally and everything was confusing for everyone else who read it. I decided that I was just doing OOP wrong and that I'd need to double down on it which I think is what other developers do. Objects, Redis and entities are horribly abused in most code bases, if I can advise anything it's learn rambda js, learn how to do the same thing in PHP without any boilerplate code learn SQL properly and remember with properly normalised tables there's very few situations where you can't reach the moon with SQL the only exceptions might be graph databases, and stab yourself with a pen every time you write $this Honestly there needs to be a good book in PHP land on functional programming that doesn't require any boilerplate functions, doesn't use classes or if statements or foreach loops which reaches for SQL first when it comes to problems
It'll take more lines, but it'll do more than a loop would, it'll name its inputs, its outputs, its types, it'll actually name the operation, if you're lucky you might get some written english about it from the doc hints too Yes map, reduce, filter perform slower but if you're doing iteration that hard I'd be suspicious that you're trying to do a SQL operation in PHP, not to say I wouldn't appreciate speed ups here, I definitely would I'm not sure about functions by symbol, I don't think I've used a language with it, it'd be good if you could point to some resources on that, particularly the advantages? Personally I'd do a find and replace on the function name which I appreciate maybe could be done better, not sure what PHPStorm does in that scenario When you pass arguments you get scalars by copy and objects by reference unless otherwise denoted right? Partial functions can be done by returning a partially applied function from an another function an example of that is here: http://www.phptherightway.com/pages/Functional-Programming.html In practise I personally don't find much use for currying over partial application, but there are user land functions you could implement if you really wanted it, granted everything curried by default like f# would be cool but I don't think it'd really prevent anything &amp; implementing that in PHP would be a massive bc break
Memory leaks are an issue if you write code badly or 3rd parity libs are not very good. that's sadly was never a concern for php. but does not mean you can't write good code. Have been writing *nix daemons that work just fine without restarts for months.
That's why I didn't write that it has excellent documentation, just good. It's much better docs than most languages have. And comments are precisely what gives it lot of value. Yes, you can't rely they are always correct, but they fill in missing information, like lot of various usage examples. Not sure why do you think PHP extensions are harder to write than node/ruby. At least you have higher level Zend, instead of being forced to use c. Yes, it's good to avoid using extensions. It's also good to have an option to use it. I think it's clear that extension land in PHP is much more mature than in rest languages. Hence having things like pthreads and phalcon.
The problem is that there's so many different levels that all get grouped together. For example if 4 PHP developers who just install WordPress plugins for clients are comparing salaries with a "Senior" developer, the group rate might look pathetic but the one that's actually qualified is making really good money. Tl;Dr low level "developers" drag the average down, a lot. 
&gt; I'd be suspicious that you're trying to do a SQL operation in PHP What if it comes from an API? &gt; When you pass arguments you get scalars by copy and objects by reference unless otherwise denoted right? In this snippet we have no idea if `$tmp` would be altered or not by `$f($tmp)`: function (callable $f) { $tmp = 1; $f($tmp); // will $tmp's value change? } &gt; I'm not sure about functions by symbol, I don't think I've used a language with it, it'd be good if you could point to some resources on that, particularly the advantages? For instance in JavaScript I can refer to the abs method by name or symbol: /*...*/.map(Math.abs) In PHP you have to do `"Math::abs"` if it's static and `[$obj, "abs"]` if it isn't. &gt; Partial functions can be done by returning a partially applied function from an another function That's not language support for the partial application; that's just a regular closure.
Thank you
Generally speaking one of the major factors in developer salaries is the availability of developers in that market. PHP tends to rank near the bottom of average developer salaries because there are so many PHP devs out there with wildly varying skills and salaries. That said, if you have a high level of skill and experience, you can do pretty well for yourself in PHP and wouldn't typically expect to make much more just by switching languages. 
runtime type chekcs for a dynamic language are certainly a nice thing to have. php is a hackable open field you can build stuff upon, while other languages drag you in their quirks... 
Non gregorian support ? 
I just accepted a 105k offer as a full-stack web dev using React and PHP, but I imagine I'll be spending more time on the front end than the back, so this probably not helpful.
&gt; Does an engineer working in Symfony (for example) have a salary comparable to an engineer working with .NET? It's going to be driven in part (and, imo, mostly) based on the company/industry itself. Companies that can generate good value from their software efforts will pay well, whether that's in PHP or .NET or Java or whatever. I definitely know of people doing .net, java, ruby and php (individual people, not one person doing all of those) making &gt; $100k as a base salary, and not in SV. However, I also know people doing all of those tech stacks making &lt; $100k as well. For sr developers who can provide good value, I've not seen much difference in the top-end salary specific to language - it's more been tied to industry (which, however, do have biases towards some tech stacks). "because of the over saturation of designers calling themselves developers" It's not even that people call themselves developers. If someone puts PHP on their resume, people may assume they're a developer, when that person may not even classify themselves as one. There is a lot of overlap and a lot of assumptions in the PHP world which don't exist with, say, .NET on your resume. Fewer people would even assume you can put together a web site if you have .NET or Java on your resume; I've met more than a handful of "sr architect" Java and .NET folks who "don't do web stuff" (even when their applications are delivered via web). It's not *bad* or *wrong* (although surprises me a bit).
Also i don't think it covers the same area. I'm not familiar with carbon but it seems more manipulation oriented, while i'm only addressing parsing, converting and formating
Wow! Just wow! You now blame C std lib for PHP mindbending design decisions? Did you know, Python (as in CPython) is also written in C. And it has a very deep and beautifull design with a coherrent way. Same goes for Ruby, and JavaScript. Most high level langs ARE written in some form using C. I wont get into your PHP ”swoole” argument. PHP is sync by nature, so using any core stuff would block your async stuff anyway. Check this reddit for a post about this a few days back.
 That doesn't really answer my question. 
How much experience do you have?
using a `Transaction` doesn't improve things at all https://github.com/adrianmiu/forked-php-orm-benchmark/commit/6377575f99b5c65e7f0334749070f6e555fdf72e. I even tried to remove transactions for the other libraries so, in case I didn't use the `Transaction` correctly at least everything would be equal. Using transactions doesn't show any significant differences. I think it's natural because the tests use an in-memory sqlite database.
&gt; Does an engineer working in Symfony (for example) have a salary comparable to an engineer working with .NET? Well, maybe. That's kind of a really broad comparison. Typically Symfony and .NET are not used on the same type of projects. I would say .net is more enterprise level, although that is sort of changing with the .net core stuff. Senior PHP developers see salaries starting around 70k and going to from there.
That's nice, but your post is the essence why I'd quite like to see the end of salary discussions in this sub. Some folks are doing well, some are not. Some folks live in areas where good salaries are available, some folks live in expensive areas. Some folks are good devs and some are not. Some folks, also - would you believe it! - live outside the United States. Ultimately, these discussions aren't all that helpful, and I say that as much to the OP as well. If someone has a specific skill level in a specific city then maybe it has some value, but perhaps they should just approach a recruiter and get some real-world advice? 
as an employee with a salary or 1099/contractor? much easier to get to that level as an independent with skills, ime.
this makes me uncomfortable
You can get $100k+ easily as PHP developer (4+ yrs experience) in Seattle area
I don't know about the whole market (particularly outside the UK), but I have always earned a decent salary as both a salaried developer and now a freelancer. At the senior level I don't think there's that much difference between languages, though I have noticed a tendency for junior PHP roles to pay on the lower side. If you are good at what you do and can solve business problems then I think you can command a good salary/day rate regardless of what programming language you use.
Planning on going. Chicago was an easy sell for me.
Magento is a good niche market, if you can handle it, of course.
&gt; What if it comes from an API? If you're being given so much information that calling a function for each iteration is causing performance issues, then you may want to see if there's limits/offsets available from the API, if not roll the functions back to loops I find loops that have been written from functions are usually much cleaner because they do one operation at a time, badly written APIs are going to cause concessions in a lot of places to consume them, there's also going to be a point where the loops fail you too You'd probably need some streaming/generator based thing to work around that problem, without timing out, out of memory errors etc To me it's just another sign that there's something wrong upstream. &gt; In this snippet we have no idea if $tmp would be altered or not by $f($tmp): I suppose I'm arguing that functional PHP is usable, this particular problem in PHP doesn't really prevent functional programming for me, that said I'd like to know what languages do better here? I know languages that pass in types at call point but I've not encountered languages that do ref vs copy at call point &gt; That's not language support for the partial application; that's just a regular closure. My definition of language support is I can do the thing in the language without too much hassle, return a closure to get the to be completed function call, seems ok to me The feature is possible today without that much hassle, I'm not saying I wouldn't appreciate all functions curried all the time but it's not terrible as it is either That said I understand viability of something in a language at this level is purely a subjective thing, if you're used to functions giving you partials all the time you may resent having to doing it manually in PHP and declare it's not suitable which is fine, it's just good to know the specific reasons 
I don't consider installing WordPress with some plug-ins "development", tbh..
This, but to add to it, some employers don't understand this either. I had a company looking for someone with my qualifications, I applied, interviewed, and they loved me and wanted to hire me. They offered me about 60% of what I'm currently making. There are some technical differences between, as you said, the guy who writes a bit of code and configures wordpress, with a senior LAMP developer, who can run all the technologies. 
Ive yet to ever see anything above 80k in Canada although ive heard through the grapevine some architect positions that get close to 100k. It drops even more for seniors when you leave the GTA. Its one of the reasons why I moved to doing Java is the greater pay amounts.
First, I'm not a PHP guy. I work in a tiny field. The open source app I help companies manage runs one of the top 5 sites on the net world-wide. But it is written in PHP, so the bulk of my work is in PHP. So, it is with this experience that I say the following: given the right background and the right field of work, income from PHP work will out-pace the majority of other dev work. Working in more widely used platforms (e.g. WordPress and Symphony to a lesser degree) means you have more competition and that will drive down how much you can be paid. This applies to other languages, as well. Supply and demand is a real factor in how much people will be willing to pay for your work. If someone just needs a generic website, they aren't going to be willing to pay very much. If they have an established site and they need to find someone with a specific set of skills--someone who is comfortable maintaining other people's code when their original developer has completely left--they are going to be willing to pay more. 
Senior PHP developer at 70k....? Where?
You’re kidding, right? It powers over 80% of the websites you visit (including the site you’re on now). If it was 1998, I’d agree with you. But it’s 2018, and PHP is not just an HTML templating language. If you think it is, you either don’t know PHP or the last time you used it was probably PHP 4.
Me either, but they do which is the problem.
My mileage obviously varied from yours. I've ended up digging out the source to figure out why something was doing what it was doing quite a few times with PHP; edge cases are generally not documented. Tests aren't as robust in the language core, either, so there's not as much information you can glean from them vs. Ruby or Node for example (not to mention it's the only language that routinely doesn't *pass* its tests on a fresh compile). I'm not familiar with Zend extensions, I've only done C extensions to the interpreter. A lot of the recent work in core is very high quality -- the AST that `nikic` and others added, for example. The documentation for working on core or doing extensions is sparse.
Finally a library that solves the y10k problem! ;-) Nice work, thanks for sharing. :-)
&gt; (including the site you’re on now) Reddit is written in Python, not PHP.
I agree that his comment is outdated but reddit was/is written in Python.
&gt; So if I decide I'm going to stop using PHP today, what are my options for web development? I don't think, if you have an existing PHP code-base, that you should just change technologies. My point wasn't that PHP is terrible; it's perfectly average! It's still being maintained. There's still a community around it. But PHP has very little to offer new developers or developers wanting to switch from other technologies. I've got some very large PHP projects that are never going to migrated away from it. There is no economic advantage to that. But I am trying to use other technologies for net-new projects and I still haven't decided what to land on. 
Bingo.
Nope. Reddit has never been using PHP. 
Is this what Web masters do perhaps? 
After two weeks of solid Typescript I'm wondering why I'd go back. I've worked in PHP since 2002.
people who click "install" really consider themselves php devs?
Thanks, corrected. For some reason I thought it was done with PHP like Facebook and other large sites. 
I guess it's not really that bad. Java was the first language I worked in professionally, and c# was the second. Both of those languages are super standardized and we'll thought out. The naming convention are universal, and everything seems like it was planned out from the start. Python has a mishmash of naming convention and a mix of object oriented and procedural libraries. 
There's a crazy RFC on that topic
This same tired ass debate about the merits of languages nobody uses in real life because some elitists programmers think they're objectively better. Cool. Put them into wide-scale production and stop circle jerking. Until then, I'll take a less elegant language that is actually used to get real shit done in the real world. Have fun with your hobby languages though, nothing wrong with that.
PHP positions usually are not really PHP per say, but instead are CMS positions. You will need to use some shitty cms like Drupal. Becuase of this, salaries are often worse than in positions with a real programming language. If you decide to accept a PHP position, i urge you to find out what tools they use and why they use them. If you dont you will possibly be uo for a nasty surprise on hour first day on the job.
point and click ” Developers” probably are like 80% of all PHP developers. Its actually hard to find people willing to work with PHP on a actual application, and the website poiny and clicky developers are usually not qualified for the job.
How do you think these supposed get shit done "real" languages start out? There are many reasons large sites pick PHP/whatever tools at the start, such as the language being a personal preference of the original coder. As things progress, the cost of replacing these languages get too great to consider. Many problems are found with newer tech as they are tested sure, but do you think PHP is exempt from that? Facebook built HHFP and HHVM and even a superset of PHP to get around those limits for fuck sake. Big companies using the company is not an advantage in and of itself, and is by no means a measure of how good the language is.
I mean, maybe not hired to just install plugins but I think there's too many "PHP developers" jobs that consist of "I need a website", "I got you bro, *proceeds to install WordPress and their ultra-custom unique layer (batch of plugins they install with every install) and a custom theme (from theme Forest of course, with MAYBE a unique logo)*".
Its hybrid array/map with ordered keys is pretty fun to work with, but having to use array functions instead of method calls kills that joy. array_map() even puts the function first, ugly. Its string variable interpolation is easyish to read (vs say, bash) but JS string templates blow it away in power. It's pretty fast, which it has to be to completely re-initialize the application state for every request. Hopefully this will change. Variables stick out due to the $ prefix. This probably helps legibility if you have a terrible IDE. There's minimal mental overhead around tooling. The need to fiddle and keep up with constantly shifting static configs for stuff like webpack has a real cost. But that's kinda the point, in PHP you're stuck in the back end in an increasingly front end world.
I have 16 years experience. Where can I send my CV? 
It's hard to say if theres a skew but C# tends to pay more than PHP according to the annual Stackoverflow Survey. https://insights.stackoverflow.com/survey/2017#top-paying-technologies
I didn’t say 80% of the top websites. I said at least 80% of the websites visited (but, yes, the sample does include the top 10MM websites from Alexa that aren’t subdomains, redirects, or landing/parked pages for domain squatters). Nearly every leading web platform is programmed in PHP. And let’s remove CMS then (WordPress, Joomla, Drupal, vBulletin, etc.). It still dominates over 53-54% of the market in terms of server side languages. Python, Ruby, and JS (server side) combined only hit 1.2% of that. ASP.NET would be your next biggest contender at 14.2 percent. It’s why the market for PHP and JavaScript are always looking for people. It’s not going anywhere. The demand is there. It does it’s job and does it well. It’s more difficult to name websites that haven’t been built using PHP than websites that have. I don’t think there’s anyone who is *just* a PHP programmer. They know HTML, CSS, SQL, and JS, at a minimum. It’s what I’ve been doing for 20+ years now (while also using other languages when necessary). Claiming it’s a templating language is a legacy opinion. It likely means you haven’t recently worked with it, or if you do, it’s building brochure sites for some agency in WordPress, Drupal, Joomla, or Magento. Use RoR to rapidly deploy a web application. Use PHP to throw together any moderately sized website. Or use Python for something more resource intensive. All three though can do the same job, and finding the talent for PHP is going to be easier and more cost effective if you’re talking MVP. It’s got great documentation (avoid the comments), a killer community, and it’s extremely easy to find the answer or get help for any issue you come across.
Lol I love php. How can you not be willing to work with it. I'm excited to work with it. And OOP makes things a breeze!
;P 
I mean, Haskell is older than PHP and still isn't widely used so I'm not sure what you're trying to get at. Maybe it's just not meant to be used in web apps like PHP is.
A live demon of a PyroCMS tutorial. I guess that's what they mean by "fight fire with fire".
Seconded.
See, that's exactly the right question to ask. Salary is very location dependent. I am not an American but I expect a PHP job in Manhattan will pay much more than a PHP job in Boise.
Yeah but as an independent you get significantly less than that in take-home pay. So, it balances out.
I mean, I'm getting paid $15 an hour to use an MVC framework but my pay is definitely not normal.
You also have to pay full retail on health insurance, and deal with your own retirement fund. And then you have to maintain your own equipment and working area.
 I easily make $150k writing PHP as a contractor. 
I know a few devs that switched into Oil &amp; Gas industry in Alberta and are making 80-90k easily. But then again their skills weren't all that great and they've probably fallen into a position of project manager with very minimal work with code and more manage expensive enterprise cms systems.
As an employed PHP developer in Seattle, I've found the jobs to pay well but the PHP market seems thin here compared to some other places I've been.
Someone once told me PHP developers earn less, in part, because PHP is so heavily used by cheap startups compared to well funded startups that use trendier (and more costly) dev stacks. 
Check out https://www.codeigniter.com/user_guide/libraries/unit_testing.html And then I'd ask on the forums. I have used PhpUnit in the past https://phpunit.de/
Dell, Magento in production rules!
Can you quantify bad? I make about 75k as a senior developer which is on the low side for my area, however, I get a pretty good benefits package and my commute consists of walking to my coffee maker and then wherever I feel like sitting for the day. I get messages from recruiters practically daily with jobs that offer typically 10k more annually at a minimum, but the pto and other benefits dont typically pan out to make it really any better, coupled with me having to spend two hours a day pissed off at the jackasses in front of me for not moving forward. For me this salary is fine. I can pay my bills and buy whatever stupid thing I want whenever I feel like it, and I don't have to smell anyone else's breath or whatever rotten garbage they're microwaving for lunch.
Hear hear! Every time I suspect USD has been assumed as a default currency, I'm tempted to answer "rupees or euros?" `:-)`. 
Nice
mixed bag, at best. if you buy it through your own company, you don't have to worry about switching jobs and 'losing coverage' for x weeks/months (or getting 'worse' coverage at a different employer). You're free to use whatever retirement fund you want, with low fees, vs being stuck paying &gt; 1.3% mgt fees. You can miss out on employer contributions, but not everyone gives those, not everyone is generous, and it's often locked up ("vested") for X years before you actually get it (fired? switch jobs? you may lose 25-100% of your vested employer contributions). Assuming the amounts are ~ the same, I'd prefer to earn, say, $170k and take care of those issues myself, vs, say, $125k, and have those other items ('benefits', although that term really bugs me) provided by an employer. But that's a personal choice, of course. 
There's other people in the world besides OP. I opened this thread because I wanted to see an answer to his question. Some time later some other guy searching for this might come along and find some help in Jake_Jeremy's answer. You took the time to go through OP's post history. I wonder if using that time and writing an answer instead of that warning would have been more useful for that other guy in the future, searching for the answer to this same question or learning how to do mobile detection ? 
Not quite, where I’m from at least. Webmasters are basically sysadmins, programmers, developers, and support combined. Or, depending on their skill level, they might be just the person who knows how to contact those with the aforementioned skills. 
Log it don't print it to the user
The stuff of nightmares 
I'm 100% sure people have already explained this but in short: There are many levels of programming. PHP's just the gateway. I work for a medical company in NYC and make 6 figures because it's complicated as shit. PHP is just the tool we've been told to use. 
&gt; Assuming the amounts are ~ the same, I'd prefer to earn, say, $170k and take care of those issues myself, vs, say, $125k, and have those other items ('benefits', although that term really bugs me) provided by an employer. But that's a personal choice, of course. Me too. I was just pointing out that making $220k as an independent is very different from making $220k as a W2 employee.
Mostly anything they have added to the language since 5.3-5.4 days - every RFC discussion had mentions of other languages, how it was done, what mistakes were made and advantages and disadvantages became apparent. They never just copy-paste features from a specific language - it always goes through a filter and what fits PHP in it's specific role.
/r/softwaregore would like it!
You are correct. Self-employed. 
I doubt I make more than most Sr Devs. Taxes are roughly 50%. And then there’s the healthcare I don’t have because it’s too expensive. 
Ask for a raise
Posting Magento on that sub is cheating lol 
With that attitude I can honestly say that I'm developing co2 just by breathing..
I've used that site; I'm not surprised
Update linked in and glass door. You'll have more company come knocking than you want to care.
I make around ~100k/year as a consultant with one main client. I work from home, smoke weed, drink coffee and probably only put in about 30 hours a week. I'm 47, taught myself programming when I was 14 (apple II and trs-80s), never finished high school, but started working as a programmer/tech guy when I was 17 for local businesses and banks in my smallish home town. I got a degree in my 30s, but its a BA in history.
Such as?
Not a make or break for most people, but here are some off the top of my head 1. Async MySQL 2. Ability to get [more info](http://php.net/manual/en/mysqli.info.php) on query, like what really happened on an update query for instance. PDO somewhat has a way to do this too, but you have to set it in the connection, so it's an either or scenario, rather than giving you the option. 3. [Proper closing method](http://php.net/manual/en/pdo.connections.php#114822)
A multinational, enterprise-scale business debugging in production might say a lot more about a developer’s ethos than it does about any underlying tech. But, I’ve also been that guy who fucked up in production once or twice. 
I’ve only messed up production about a dozen times personally, and all thanks to semi colons
We all have that one grey beard on the team and that you can’t fire because he knows the most about the codebase, but at the same time does shit like this.
you in the US? that sounds high, but might depend on the state too. are you just 'self-employed' or do you have an LLC or similar structure? you can reduce your FICA payments by electing to file as an S-corp if you're an LLC - details would be better coming from a CPA in your area. But, pay yourself a 'normal' wage, then treat the rest as distributions. You'll still pay income tax on the whole thing, but you can save a moderate amount on FICA (note that this will lower your future social security entitlement).
I've seen them referred to as "site builders" usually.
Overall, I think it helps to debunk the myths that 'PHP is a toy' and only Java or .NET devs can "make bank". "perhaps they should just approach an experienced recruiter and get some real-world advice?" That advice is almost always going to be geared towards how to help fill a specific recruiter's open jobs at that point in time. If you have some specific questions, perhaps opening a new thread with those would spark some useful discussion? The advice from a recruiter - while not necessarily *bad* or *wrong* - is, almost by definition, going to be biased because they have a financial incentive to steer you towards whatever helps them right now, not what might be a better fit for your skills or goals (most of them don't really understand business operations *or* technical nuance - they understand sales). What's a DV?
\str_replace is slightly faster than just plain str_replace because it avoids all the namespace processing. Not by much but it might be enough to make a noticeable difference if you use the backslash for all standard global functions. Especially within loops. The readability is in the eyes of the beholder. It quickly becomes unnoticeable. In fact, the lack of a backslash starts to jump out at you after a bit. Symfony, one of the more popular libraries/frameworks, is slowly moving all their code to use the backslash.
I so agree. I just wrote a post about how using a framework is like trying to draw a picture with an Etch-a-Sketch. Recently, I wrote my own blogging engine in PHP usng text files and I have never had so much fun. You can check it out at https://lilaworks.com. I'm writing a tutorial on how it's put together. 
You can say the same thing about almost any language. Lets compare it to Golang for example.. Go is much faster, also easy to use, much easier to deploy (single static binary that runs anywhere), easy to manage (because of static types you actually know if your app break or not) and it has a much better std lib than php. 
In my first job the "CIO" had us code in production. Think about that. Only after begging for 2 years did we get a development server, still no SVN or GIT. FTP deployments baby! Any other nightmare you can imagine was a reality there. Amazing that my old boss appears to be in charge of Dell's front-end.
I tried it once. Just like I tried certain very bad drugs only once and knew enough to never try again.
Don't snitch on fellow programmers. Read the_real_programmer_manual
why am I not shocked that it's shitty magento.
I'm jealous of the US salaries. I would work overnight if I could get a remote jobs with salaries like that!
To be fair, this setup is good enough for 90 percent of showcase websites for SMBs. No need to reinvent your own cms everytime you create a contact form.
3 years, none of which is in PHP.
Magento 1.x is undoubtedly shitty, it has a shitty code base and a horrendous UI. *But* there is also a reason it is so widely used at the upper end of the eCommerce market: it is extremely flexible and when you're building a business critical system, you don't want to reinvent the wheel if you can avoid it. There are often better options now, better frameworks to build upon if you have the budget to do it right, or more focused eCommerce systems with better UX if you don't, but this wasn't the case for a long time. Often in computing (and life) if you think someone has made a bad decision because they're incompetent, there's a good chance you just aren't seeing all the constraints (or they actual are incompetent, to be fair.)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I don't think you will get something much easier than spinning up a 5$ digitalocean instance, copying the binary and running it. And now you actually have control over what you are running and you don't need to configure php + php-fpm + nginx / apache. 
If you simply use "reserve" cpu usage is almost 0 if there are no jobs. So your CPU usage is due to the nature or implementation of your job. 75% may not be so bad. I have an XML parse job which uses about 600% cpu, that means 6 out of 8 cores are busy. As for using another language, it depends on a lot of factors if that is a good choice. If your processing is dominated by something like parsing or compression, you should at least make sure that is done in native code. You can use php-cpp if no php extension is available yet: http://www.php-cpp.com/documentation/functions
Incidentally I was just fighting with this same Magento idiocy earlier. Here's a bit more context: As you probably guessed, Magento uses sprintf-style translation strings. But they don't have any decent way to get a translated string without vsprintf'ing it. You can probably see where this is going. Problem 1: they run the translation strings through the same function when they want to pass the strings to the frontend JS for dynamic translation, in which case vsprintf doesn't get any params and complains. Problem 2: It uses Zend_Validator for certain validation. Zend_Validator uses `%value%` markers that get str_replace'd during formatting. But before Zend_Validator gets the strings, Magento runs them through the same vsprintf'ing mechanism, and again vsprintf complains – their provided translations don't even escape `%` in `%value%`. Problem 3: if you want better error reporting, you will probably use `register_shutdown_function` + `error_get_last` to track fatal errors and whatnot. Yeah, these silent vsprintf failures will annoy you enough to filter them out by checking the error message or something similar. Fun times. Key translation code: $result = @vsprintf($translated, $args); if ($result === false) { $result = $translated; } Actual translated strings, atrocious grammar and all: &gt; "&lt;strong&gt;%s&lt;/strong&gt; requests access to your account" "%name% '%value%' is too short. It must has length %min% symbols." "After authorization application will have access to you account." --- And that's just one of the many many warts I have seen in Magento…
Look at it from the shop owner's point of view: 1. At least a while ago, Magento had far more features out of the box than the alternatives. (And some of them even worked as expected.) 2. "lots of extensions" =&gt; "I won't have to pay those grumbling devs for every addition I want to make". (The developers' warning that those extensions never work together with each other is just sour grapes, surely.) 3. If my current devs annoy me enough, I can take this project to another company that does Magento. Such companies are easier to find than ones specializing in $obscure_framework the devs want to use instead. Same for hosting, when my shop hits it big, I'll have no problem finding a dedicated Magento hosting provider.
Just ignore him. He always insults pretty much all PHP programmers since he is so much better than they are.
Seems that you could find interesting playing with the [swoole extension](https://github.com/swoole/swoole-src) extension: workers are there for you and is PHP-CLI by nature. It's easily installed with "pecl install swoole"
damn you hit a nerve there
that's the difference between users and developers
💪
in germany php salaries are good, sure you maybe can earn more with some other langauges like Java, but this is more or less tied to the market, not to the language (i.e. java is much more common in banking institutions who simply pay more) its hard to compare salaries across countries, but the "average php developer" salary here, is nearly twice the national average salary.
a modern tool to write PHP extensions https://github.com/7snovic/extskel
It's really unprofessional to blame Magento in this case. The truth is that if Magento doesn't behave in both testing/staging and production then another piece of software wouldn't behave the same either in both testing/staging and production. Magic still does not exist.
Just be specific: until a system is valuable enough so that testing becomes relevant. And a system that isn't valuable enough... well you don't want to work on it anyway.
No matter how fast PHP compiles (it's actually compiled, but this is nitpicking) it is a very slow workflow to test backend logic paired with frontend logic. So the advantage that you just named is rather useless.
Thank you for the considered reply - you make some fair points. I hear you about recruiters. I perhaps should have added the stipulation that it's a _good_ recruiter one actually knows. When I was last looking for work, I came across some terrible recruiters, and some I really trusted. If I rang up one of the good ones and asked for a guideline salary figure given a set of skills, location and hiring terms, I'd expect a quality answer. It'd be a way in which decent recruiters can maintain a good relationship with workers, so they have a decent platform to work from if a suitable role comes up in the future. My other thought around threads like this is that I am perhaps struggling with a cultural discrepancy between American readers and readers elsewhere. Here in the UK we're rather more cautious around talking about salaries, since we're much more likely to regard people revealing a high salary as an intolerable show-off. I can't ascribe any specific motivation to Mr/Miss Cheese based on their short contribution, but it's certainly worth folks being aware of this. DV = downvote `:-)`. 
It's the good damn `array_merge` After removing it https://github.com/adrianmiu/forked-php-orm-benchmark/commit/7fc2e8c90edd48ef4a22ddf070d71fe65e0e540f#diff-1f804059b382461ed6cc28a74d2d1e0d the numbers have improved |-------------------------------------------------------------------------------------------------------| | Library | Insert | findPk | complex| hydrate| with | memory usage | time | | --------------------------------:| ------:| ------:| ------:| ------:| ------:| ------------:| ------:| | PDO | 58 | 7 | 19 | 56 | 129 | 1,701,016 | 0.27 | | | | | | | | | | | Maghead | 399 | 4 | 299 | 189 | 273 | 10,485,760 | 1.18 | | | | | | | | | | | LessQL | 329 | 59 | 244 | 305 | 336 | 7,993,624 | 1.28 | | | | | | | | | | | AtlasOrm | 254 | 183 | 253 | 425 | 390 | 5,896,024 | 1.52 | | | | | | | | | | | YiiM | 696 | 79 | 294 | 290 | 523 | 6,291,456 | 1.90 | | YiiMWithCache | 690 | 83 | 295 | 289 | 518 | 6,291,456 | 1.89 | | | | | | | | | | | Yii2M | 1389 | 170 | 426 | 606 | 983 | 8,388,608 | 3.59 | | Yii2MArrayHydrate | 1397 | 176 | 422 | 276 | 863 | 8,388,608 | 3.16 | | Yii2MScalarHydrate | 1377 | 171 | 416 | 253 | 488 | 8,388,608 | 2.73 | | | | | | | | | | | PHPActiveRecord | 2016 | 175 | 384 | 1025 | 447 | 4,194,304 | 5.20 | | | | | | | | | | | Fuel | 2578 | 146 | 624 | 1173 | 293 | 12,582,912 | 4.86 | | FuelWithCache | 1742 | 24 | 466 | 934 | 43 | 8,388,608 | 3.25 | | | | | | | | | | | Propel20 | 578 | 50 | 1367 | 1231 | 1596 | 8,388,608 | 4.83 | | Propel20WithCache | 485 | 39 | 857 | 1068 | 1529 | 8,388,608 | 3.99 | | Propel20FormatOnDemand | 483 | 40 | 856 | 941 | 1526 | 8,388,608 | 3.86 | | | | | | | | | | | DoctrineM | 979 | 141 | 411 | 801 | 602 | 18,874,368 | 3.01 | | DoctrineMWithCache | 979 | 143 | 407 | 800 | 598 | 18,874,368 | 3.00 | | DoctrineMArrayHydrate | 968 | 139 | 412 | 416 | 342 | 18,874,368 | 2.35 | | DoctrineMScalarHydrate | 967 | 142 | 408 | 369 | 329 | 18,874,368 | 2.29 | | DoctrineMWithoutProxies | 975 | 143 | 417 | 599 | 662 | 18,874,368 | 2.87 | | | | | | | | | | | Eloquent | 1638 | 175 | 523 | 447 | 823 | 14,680,064 | 3.63 | | EloquentWithoutEvent | 1459 | 176 | 546 | 440 | 809 | 14,680,064 | 3.45 | |-------------------------------------------------------------------------------------------------------| Except for the find by PK
Nice! Good to see companies responding to the marker, although that is a difficult stack to find experienced people in.
Have you reported this to Dell? I think their devs would appreciate it. 
And then you're going to get hacked when you don't know how to maintain a server.
Appreciate the advise. Blocked!
I'm curious as well. I've said in the past 100k, but I don't think that would be much of an increase overall once I start adding up expenses. 90 minutes one way though... kill me lol.
I've worked with 2 or 3 recruiters who were *good* - good people, knowledgeable, took their time, knew their field, etc. Only one long term gig came from them (and a short term 8 week thing). This is over a period of 20 years talking to recruiters. People are very cautious about talking salaries in the US as well, except for online. It's precisely because there's such taboo about $ talk in real life that people feel OK about doing it online. It helps to know if you're doing OK, getting ripped off, whatever. There's an element of 'showoff' we ascribe here too, but the anonymity means they usually have little to gain from it online, and the sharing of info does help people know where they stand. Or, perhaps more to the point, that higher numbers are actually possible, and not just in the Bay Area holyland. Some aspect of those higher salaries are down to luck for some people, right-place-right-time, etc. But if you don't think anyone doing PHP ever makes more than $80k USD, ever, you'll be less inclined to negotiate or look for more.
Not what I would have expected. Thanks a ton for working through this.
I agree, the analogy would have worked better when intentionally putting effort into making very loud farts.
Correct, I did restart everything and that cmd line also gives the same error. I did some digging around in my php.ini file (I'm using MAMP right now). Here is what it tells me for the location of my extensions directory: &gt; extension_dir /Applications/MAMP/bin/php/php5.6.2/lib/php/extensions/no-debug-non-zts-20131226/ /Applications/MAMP/bin/php/php5.6.2/lib/php/extensions/no-debug-non-zts-20131226 However, when I go look in there the trader.so is nowhere to be found. https://i.imgur.com/lijBGVo.png This is what I added to my php.ini file as instructed. &gt; extension=trader.so Could this be the issue? I tried to copy and paste the trader.so into the extension directory but that didn't really work out.
During the last interview I had for a php developer position, I was asked a question that caught me off guard and I think speaks to the problem of drastically varying skillets: "so we see you have all these libraries and frameworks listed, but do you know how to write php by hand?" My resume was full of things like composer, Zend framework, symfony, phpunit, doctrine, etc... My response? "Yes, everything I make is coded by hand; those libraries are industry standard tools that I use to do a lot of the heavy lifting so I don't have to reinvent the wheel". Apparently the previous few php guys they'd hired fell into the category of "I can install WordPress and customize it, I'm a php developer lol".
If you count Hack as PHP, Facebook pays pretty well!
That's interesting, they seem to have two competing paradigms in the one project! Is there any advantage to that, say in comparison to taking an "opinionated" stance like Doctrine? 
It isn't really helpful to make an inaccurate generalization like you've done here. There are plenty of actual dev jobs. I mean, yes, there are jobs like the ones you describe that bring down the average salaries. Thankfully, it's becoming more common to see this postings described as "drupal developer" or "wordpress developer". 
Well, most devs want a decent tool to work with. PHP is not a decent tool.
I have seen PHP positions that was a Drupal job in discuise. 
For sure. These types of positions definitely exist. That said, any actual developer is going to do their due diligence and find out what sort of frameworks they are going to be exposed to before accepting a position
That would have been a better analogy, but off base. If you really want to stick with the fart analogy, then you would want to include picking out ingredients specifically made how they interact with your digestive system. Would you not agree they would be developing the farts then? 
Most businesses don't give AF, they trust developers to not run off implementing device drivers in PHP and the like. If you use PHP for the right things, it's a passable tool, just like other tools. Yes it has shortcomings, but so does C and people literally write OS kernels and device drivers and implement entire languages using that.
https://imgur.com/c8kPz55
London PHP salaries I've seen from £200k (only seen once) to £45k most citing "senior PHP developer", which I assume is the recruiter begging for you not to be incompetent. Most have other responsibilities besides PHP alone. Just be very worried if they want you to be full-stack + mobile app dev + PHP within a small team, because that can be shortened to "overconfident incompetent". The recruitment market in the UK is largely a waste of time IMO. You're probably better off going contract, just taking jobs friends recommend you for. The whole "only uses WP" vs "is developer", meh. If you can troubleshoot code, then you can troubleshoot code. Just don't be telling people you debug with var_dump or echo or die, and test by running in a browser. Take half a day (if that) to setup xdebug and walk through some code, write some unit tests, read some books (and the PHP manual). 
No tests.
I've been looking for something like this personally for a while. Thank you so much for submitting this, and I am so glad I found this on a whim while browsing through my front page. yes !! 
See it in action. Update the spreadsheet and see how the results change! (This is just a digital ocean quick and dirty droplet server, so it may go down at any time) http://45.55.156.77/golf/www/ 
A publicly viewable, but not editable, worksheet -- if you know the url, of course. Certainly I would not recommend storing anything sensitive in this method. 
I did try some other options, but since googles response is literally just straight json, this one seemed to follow the K.I.S.S principle. 
Heyo, nice library. Congrats on having Unit tests, having PSR-2/4 valid code, a .travis config. You are already miles ahead of some of the stuff that gets posted here. Small thing I want to give as feedback, I saw you used static calls for your logger calls. Have you though of how other people can test their code that uses your lib? As an example, consider this bit of code: &lt;?php declare(strict_types = 1); class SomeClass { public function __construct() { Console::log("Some class created!"); } } If I write a test for this class, I will have your logger output sprinkled in between my test output. There is currently no way to disable your logger or "inject" it into my class as a dependency. So while you can test your code nicely, the way you designed your lib might introduce some issues for other people their code when they try to test it. It is something you can consider when building the library further. Anyhow, good job!
Oh okay, that makes more sense. I thought that url scheme meant that it had to be a fully public sheet. It's an interesting concept. I don't usually like injecting dependencies on things I don't host / control, but this could be useful in the right situation.
Google allows you to set who is allowed to edit the sheet, you would just limit the edits to a specific google account. 
Thanks for the feedback, will consider this for sure and improve it in future. 
They see me Var_dumping, they hating, inherited code that's large and dirty
To your second point, youre entirely dead on -- but imagine a use case, like a golf tournament, where the tournament director wanted every player and spectator to be able to see the scoreboard on their cell phone... up to the minute. Give each player a link to a google spreadsheet. When they update it on their phone from the teebox, as soon as they enter their score for their last hole, the public scoreboard would automatically update. Real time up to the second leader-board! 
can you make the website you made with it public(this golf one) there's a few things that i dont quite understand in the example the video provided, so it would be great to see how it was implemented for my own use case :)
most json endpoints accept a callback url parameter ($_GET['callback']) so you can pull back via AJAX in JSONP format. TBH I wasn't suggesting pulling it in the front-end, then sending to PHP. Again if you used CURL as I mentioned, you could pass headers and body in the URL request to Google sheets so you could access private sheets, with sensitive data. The second part of my response was basically "don't do this, it's a bad idea"
Yea, the one linked after your edit. Thank you
Ah I see what you're saying. I'll take a look at that.
No problem, give me just a few... 
Isn't colshrapnel the author of phpdelusions and an excellent wrapper lib around mysqli? Pretty sure their work and Reddit comments saved my ass on several occasions in 2015/2016.
Only 2 files really File 1, the main one: https://pastebin.com/jqhjushV Youll see at line 82 a div with ID of tee-results The JS at the bottom of the script is simply redrawing tee-results every X seconds (Defined on line 119) And here is that file that it is hitting every X seconds to redraw the results behind the scenes: https://pastebin.com/XmHKnAwi 
Yeah, thanks for pointing it out, i was kind of lazy. But to improve this i think commit squashing - the way to go :)
It’s because you’ve installed it to your OS X PHP rather than mamp. Look at this article: https://www.lullabot.com/articles/installing-php-pear-and-pecl-extensions-on-mamp-for-mac-os-x-107-lion
Another riduculously cool thing -- So get the editor embedded in your page, &lt;iframe src="TheUrlGoesHere"&gt;&lt;/iframe&gt; and you have a fully functioning editor... really ridiculously simple. 
I have always worked as a freelancer but now I have three small children and I need a secure monthly salary. I live in Argentina but I can adapt to the schedules and other needs of companies, my biggest problem is that I can not move now I need to be allowed to work remotely 
Thanks for the advice. Itsn't exclusive for me to work in Seattle. I live in Argentina and for family reasons I can not move now. I need any decent company that allows me to work remotely. 
&gt; My point is if performance is your primary concern in a programming language, neither PHP nor Python or Ruby or nodejs are going to be your choices. That's a terribly cherry picked viewpoint. The reality is that performance becomes more important over time and staffing (skillsets, payscales, and range of abilities) and tooling is in place before performance becomes an issue. This is why there are postmortems on the massive rewrites and many companies that don't do postmortems at all. It's just the reality of business.
Yes, while (true) is the wrong approach to tasks. The code must be: while ($job = $beanstalk-&gt;reserve()) { } This example is using Pheanstalk.
This is one approach if you are sharding across multiple Beanstalk servers and reserve(0) which means reserve, but only if there is a job in the queue, fail otherwise. If you have lets say two shards and reserve(0) between them without any jobs, then your worker will go to high CPU as well. Our code does this: do { try { $this-&gt;next(); // cycle through the connections while reserving. // reserve-with-timeout &lt;seconds&gt; // A timeout value of 0 will cause the server to immediately return either a // response or TIMED_OUT. A positive value of timeout will limit the amount of // time the client will block on the reserve request until a job becomes // available. $job = $this-&gt;getCurrentConnection()-&gt;reserve(0); if ($job === false) { // don't put too much pressure on queues that are essentially always empty usleep(10000); } // we can run into timeouts in reserve, in this case $job === false, // cycle to next connection and try again. } catch (ConnectionException $e) { // something is down, wait a little before trying next usleep(10000); } } while ($job === false);
You won't have to nearly bankrupt yourself if you suddenly have to get heart valve replacement surgery though, so there's that :)
Thanks for the advice. I will update my profile on linkedin and try with glass door
Really? I don't know about that. I make 75K as an intermediate PHP dev in Winnipeg, Senior devs here would surely earn more than that. From what I have heard that GTA developer salaries are pretty comparable to Winnipeg, but salaries in Vancouver are higher. When you take in to account housing prices though, Winnipeg is a really good market to be in as a dev.
One quick hint would be to use your vendor name as the first token of the namespace. Imagine other Console components using the same namespace, that would screw things up. It's quite normal to see something like: use RolandsUsans\Console\Console; use RolandsUsans\Console\Modifier\Background; use RolandsUsans\Console\Modifier\Option; use RolandsUsans\Console\Modifier\Text; 
The average is heavily weighed down by the low end stuff like WordPress devs. PHP engineers who are working on more complex frameworks get paid pretty close to people doing equivalent work on any other language.
Great job thank you
Sounds like it. My experience has been that salaries in Toronto are "head of the class" in Canada, with K/W coming close. Never had any experience with Winnipeg's market, but the few times I've tried Vancouver the salaries have been embarrassing. It's good to hear it may have changed over the last few years. As you stated, the COL is terrible for Vancouver.
&gt; Probably not the best option as opposed to CURL There is nothing wrong with using PHP's native HTTP streams if you don't need cURL's additional features.
This was about Laracon Online, not Laracon US. Though i wish I could make the US one.
I personally use an event loop in my workers: https://github.com/tarantool-php/jobqueue/blob/26aa1cebf897c7d4c6d284c964bf553305082cbc/src/Runner/Amp/ParallelRunner.php#L36-L59
That's a great point. Make something other people need and open source it, then you've contributed a "wheel" other people can build on.
Well done! Thanks for sharing! You should make a small composer package so it becomes easier to find!
Very interesting. I'll give it a shot and report back, thanks.
&gt;they actual are *actually 
I don't see how this is a problem that's specific to go. You should know what you are doing no matter what programming language you are using. Also, I have seen enough free hosts that are running outdated software to know that they don't solve that problem.
&gt; I don't see how this is a problem that's specific to go. It's not a problem specific to Go. However, the ease of deployment that PHP can obtain is specific to PHP. &gt; You should know what you are doing no matter what programming language you are using. Not necessarily. Devops/sysadmin knowledge isn't a prerequisite to building a web app. &gt; Also, I have seen enough free hosts that are running outdated software to know that they don't solve that problem. Yes, unfortunately there's a plethora of shitty hosts out there. Trust me I'd rather be on a VPS that I configured myself. But, it's still a strength of the language that you can develop a site and hand it off to a client's cheapo shared hosting and they live happily ever after.
But not after you push it. :)
You could start with checking given input, expected output. Makes it trivially easy for anyone to complain and write a test-case. You should have every single thing the project does have a test. I'm guessing that's a fair bit of effort, so start with the cases you're using it for.
So essentially, one would develop farts with a FMS of sorts. I agree, that is a reasonable conclusion.
That's also the impression I got about the undocumented stuff. Very powerful, but not straightforward to exploit all those features. 
He is. However, I don't think being the author of good teaching material buys anyone the right to be abusive, and unfortunately he has crossed the line quite wilfully many times. I don't enjoy calling him out in this way, but equally, I don't like seeing people being abused in public, and sometimes the community needs to speak up. 
Gotcha, thanks. I recall it being mentioned a few years ago. Is it well maintained, in your view? I was gunning for Propel for many years, but unfortunately that died off due to a lack of maintenance and complex refactoring that never really went ahead.
 $stmt = $mysqli-&gt;prepare("SELECT col1, col2, col3 FROM table WHERE age &gt; ?"); $stmt-&gt;bind_param("i", $_POST['age']); $stmt-&gt;execute(); $arr = $stmt-&gt;get_result()-&gt;fetch_all(MYSQLI_ASSOC);
What about all the Symfony and Laravel positions? Your comment is a really skewed generalization.
Very cool! You should look into supporting PSR-3 so it will be usable with the plethora of tools that adhere to the same standard. It may take a bit of tweaking to make the styling parameters work, but I'd seriously consider using this in my various CLI projects with that change (especially since my default simple logger has been abandoned by the maintainer)
btw pushed README.md cases as PR against issue. Turns out parser was using a method format, not parse so I changed that to match the README API.
If your goal is to work on tiny/toy projects with clients that dont really know what they are doing then sure. If you work on more serious projects then go is by far easier to manage and deploy. go build -o app . FROM scratch ADD app / CMD ["/app"] 3 lines and you are done.
It's actually less verbose than cURL's API, so why not?
Made another quick little demo http://45.55.156.77/bar/
&gt; being the author of good teaching material buys anyone the right to be abusive lol, well you obviously didn't attend a catholic or fundamentalist christian elementary school.
I don't think Idiorm or Paris were attempting nearly as many features. Lots less to maintain. &gt; These limits are deliberate: these are by far the most commonly used criteria, and by avoiding support for very complex queries, the Idiorm codebase can remain small and simple.
I agree to an extent, though on a personal basis the thing that I actually dislike about a lot of frameworks is simply I don't like the way they've done something (the endless facades in Laravel for example) or I don't like the choice of db/ORM component (I dislike Doctrine for example, thought I appreciate it is the most complete PHP ORM). So for personal projects (if I use PHP), I usually take a middleground of either using a more minimal framework like Slim that lets me bolt on components, libraries, etc of my choice, or simply use no framework, but pick many components (e.g for http I might use Zend Diactoros, Symfony HTTP Foundation, etc, for routing fastroute, Sympfony routing component, etc) and then essentially write the 'glue', as both these approaches let me tailor the whole thing to my tastes and needs, whilst still largely benefiting from well tested, (hopefully) well written components. I think a lot of PHP devs look at things from a very narrow perspective, for example my last couple if jobs I've worked at a places where we used Node.js, and things are a lot more "free" as it were, more akin to what I described above, less obsession with monolithic frameworks. (though it is nice to see things like Symfony are moving to a more flexible system, but they still have a way to go).
Alright so I did all that and seems alright but now it's failing to load php at all. Here is my output. I think I've opened a can of worms... &gt; $ [SHennessy: /Users/SHennessy/ShiftAdmin/work/Sand01/public_html] php -v &gt; dyld: Library not loaded: /Applications/MAMP/Library/lib/libcrypto.1.0.0.dylib &gt; Referenced from: /Applications/MAMP/bin/php/php7.2.1/bin/php &gt; Reason: image not found &gt; Abort trap: 6
You keep saying "instantly", even emphasizing it with italics, but this isn't instant. You're just polling the entire spreadsheet every 3 seconds and pulling in the latest changes. The Google Sheets APIs allow for onchange events to be added to the cells, and use push notifications to only send data for cells that were actually changed. As you have it now, you might run into some quota limits if a few people leave the page open all day.
The pattern you're looking for is a "Service Container", also called an "IOC container". It's a way to give your controllers access to an instance of your twig object, while abstracting the creational logic away from them, and allowing for easy testing/mocking going forward. Take a look at the standard description of the pattern here: https://martinfowler.com/articles/injection.html
Does that file exist in /Applications/MAMP/Library/lib? If not does it exist in /usr/lib? If it’s in /usr/lib you can copy it or symlink it: ln -s /usr/lib/libcrypto.1.0.0.dylib /Applications/MAMP/Library/lib
MVC is a way that the program (site) works. To make it easy we store files in a similar way but it's not really necessary (but recomended) . Anyway I tend to have a bootstrap.php that loads my classes and database connections and most used files. On my controllers i use a include bootstrap. 
Is PHP dying? I’ve been teaching myself PHP for a few years now and I am finally reaching a point where I feel confident in my abilities as maybe a entry or junior level developer. But every time I talk to people I know they say that I’m wasting time with PHP and I should learn Python or Java instead. I no longer study CS in school, so everything computer and code related is something I teach myself. Is it worth sticking with PHP?
&gt; It sounds like maybe you want to read up on Hexagonal Architecture. Not the OP, but a big thanks for this. I am reading the below link now. http://fideloper.com/hexagonal-architecture
PHP isn’t dying, but web development is becoming more diversified in terms of languages. As a result, PHP is losing market share. With WordPress still gaining momentum, PHP is going to be around for a long time. For web apps that need to get the most bang for the buck with respect to performance, there are better options than PHP. Indeed.com has a great tool that lets you see job posting trends by keyword (eg: language). http://www.indeed.com/jobtrends If you’re looking to have a long career in enterprise web development, you may want to start toying with Python, Go, or Node, etc. If you want to focus on building for existing platforms like WordPress or Drupal (ie: plugins), then you may want to stick with PHP. Although I’ve been a PHP web dev for 20 years, this is just my opinion but I hope it helps. 
Fair enough! Go code does seem to rely a lot more on the standard library instead of a large ecosystem; I'm not sure how much that's because the ecosystem isn't that large yet, and how much it's the culture.
Ah yes. MVC confusion strikes again. Something that took me far too long to learn: an MVC app isn't *only* made up of models, views, and controllers and so code has the freedom to live wherever it makes reasonable sense for it to live. I'm not familiar with Twig or these "templates" you're talking about, but it sounds like they are their own concept, and thus should have their own place in your folder structure, and it's up to you to determine what should be. Don't confine your thinking to a *literal* interpretation of MVC. I really, really hate "MVC" in general because of this. Controllers are a useful concept for a class, as are views, as are models. But "MVC" itself should not be considered your entire architecture.
This was incredibly insightful. Thank you!
Sounds like it's a [facade](https://en.wikipedia.org/wiki/Facade_pattern) (not the laravel kind) over Twig. It's hard to say without knowing exactly what it does, but if it's simplifying calls to Twig, hiding undesired functionality, and maybe a little pre-processing then it's definitely a facade. I'd still consider it a template, though. Another possibility, depending on that the class actually does, is that it may be akin to the Responder in [Action-Domain-Responder](https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder).
MVC is NOT, by any means, is a way that a program works. *It's the way a the program (site) interacts with a client.* A whole program stays in the Model, and how it works is none of MVC's concern, it's just an internal affair of the Model.
MVC is a user interface paradigm, not an application architecture. 
I don't get it. Is it just one class that extends Twig functionality somehow? Why you are referring it as "them" then? Can't you please be a bit more specific in describing your problem? But yes, I agree with /u/phpdevster on the general idea: you are not in the hands of the Procrustus the Giant who will cut off any extra parts you will add to his MVC iron bed. If there is a specific code related to one of components, it can have its own directory all right, like Twig, DependencyInjection, Doctrine and such.
Sorry, should have clarified. I'm the HTML guy finishing up for our PHP dev. (who wrote the code) I'm not exactly the most proficient in PHP-- hence why I am here
Yes, I know and I agree. Unfortunately there are so many confusing articles and opinions made by multiple frameworks that describe *data* models / entities as the "M" in MVC that it has led beginners to think that all business logic goes in model classes, when in reality it's as you said: it goes in the model *layer* with whatever classes are necessary to model the domain. 
What is .travis config? This is the first time I heard it.
yeah, but compare the hours you need to work until its production ready.
Same here.. just to increase my salary, I was looking for new challenging jobs and had a nice speak at their location. I should do a small presentation about how I would plan and make a first MVP for a certain project. They also took their time to ask me questions about my CV and several other questions.. everything in English (normally you do this processes in German while you living in Germany). Well everything and they said that they like me, but since my English is not the best, they was like going down with +20k less than my expectation (I mean even I went down from my real expectations, just to stay at a realistic environment). Their expectations were just ~30% than I earn now, but since my current salary is not the highest, it's not really what I expected (I agreed a relativly low amount, because my whole experience come from learning everything from the scratch by my self and since my CV can't show my skills, I accepted that salary to have something in my hands to show.) My current job is really not the hardest (for me). It's not even expected that I have full stack capabilities. The new place is searching for someone that does nearly everything. I mean what do they expect? Why should someone that can do everything accept such a low salary? I myself wouldn't have problems doing everything, that's what I am doing my whole (developer-)life. Maybe not always the best possible way, maybe doing mistakes here and there, but come on! Even Microsoft, Apple, Siemens, Daimler Benz, Facebook, Instagramm etc, etc, etc, are doing mistakes constantly. Are the developers bad? They have many quality ensurance steps (like MS has a +10 Step to ensure that no bugs come life), but they still do mistakes. Why? Because we are human! Humans will always do mistakes. The important thing is to learn from that and try doing it better next time ;) &gt; Tl;Dr low level "developers" drag the average down, a lot. That's what probally is the most damaging part. The jobs that require little to no knowledge at all.. install Wordpress here and a template there.. or the jobs where they don't care doing mistakes. Just bring the plattform life, get me money and then go away. The "I want money the fastes way" projects that are guarenteed to die soon. Okey, I could sell my morals for a good amount of money (wouldn't you work for Apple for 100k$/year just because they let people in asia work for low budget?), but like I said.. the amount should be good and not for peanuts!
Hmm... PyroCMS is supposed to have a Shopping Cart module that comes with the Pro version. I've seen it listed in their 'Addon Lineup' on their Pro page for ages now. But now all of a sudden its gone. I can't find a reference to it anywhere. Instead I see this tutorial using some third party ecommerce solution. What the hell is going on here? I was going to pay for the pro version of Pyro but now its losing features? To the PyroCMS developers, I would really really appreciate some kind of comprehensive list of what is included in the Pro version. As well as detailed feature lists and screenshots of each pro module. Its really turned me off not knowing what is included or having the assurance of a future roadmap for all pro modules and features. This screen: https://packages.pyrocms.com/ Is not satisfactory. If I'm paying for (some of) these modules I need something a bit more substantial. Of all the CMS projects I've reviewed I've been most excited about Pyro. Please don't let yourselves down with poor marketing material and documentation.
underrated comment
Thanks for the suggestion. I'm not used to tests.
They will save you time remembering details on how things should fit together and aid in battling regressions in functionality.
They are literally just test-form what you had in your code but... Where the lib seems to default to machine time if no time source is not present I just checked date because all you're supplying is a date. I also missed the second mars test, because without running your algorithm it'd be impossible to get a valid date, and if I run your algorithm, it's not likely going to say it's invalid (self-referential). Next steps would be travis in matrix for 5.6-7.2 (which I'm happy to contribute as a second PR when I get some time).
Check docker or https://vessel.shippingdocker.com. Better
Care to expand on the Pros / Cons against Vagrant? Seems pretty much the same.
You can have different versions of PHP , switch to postgres , mysql easily. You can add different tools like ELK ... Also what helped me a lot is the fact that my local environment was exactly like testing and production environment since I used the same docker local setup to create them. I used vagrant + homestead ...then I switch to docker and for the past 3 year I didn't find a reason to switch back.
Yes, I know the theory. But until know, the only testing I was asked to do was 100% coverage unit testing, which broke every time we had to plug an evolution to the project. So it felt like coding Twice the samle thing for no gain.
Vagrant virtualises a whole machine. Docker virtualises environments. [Authors of both appear and answer the question](https://stackoverflow.com/questions/16647069/should-i-use-vagrant-or-docker-for-creating-an-isolated-environment) definitely worth the read!
&gt; They are literally just test-form what you had in your code but... But you took time to code a small PR for a useless library from a random guy on the internet :) &gt; Where the lib seems to default to machine time if no time source is not present I just checked date because all you're supplying is a date. You mean that testing would be easier with fixed samples ? &gt; if I run your algorithm, it's not likely going to say it's invalid (self-referential). I'll have to manually calculate the dates to add some samples &amp; tests. That involves some head scraching tho. &gt; Next steps would be travis in matrix for 5.6-7.2 (which I'm happy to contribute as a second PR when I get some time). Again, thanks, but again, that's probably a useless library, I would feel embarassed if you wasted too much time on it.
Thanks.
&gt; Coding "raw" is a good way to get an understanding of a language's fundamentals... Frankly it is an exercise that something a not insignificant number of PHP "devs" need to do, it is frightening looking at some of the questions posted on Laravel's discussion board for instance, people are asking things that aren't a learning Laravel issue, they are simply down to people not understanding PHP or to be blunt the basics of programming. &gt;With modern frameworks you can have a basic web app built out in just a few hours versus days or even weeks of "real development" using a text editor. "Modern frameworks" is debatable, I mean you mention CI in your post, that is infamous for not being 'modern', even things like Laravel are out of date in some respects, such as still being rather monolithic (Symfony does a better job of separating out components, but even that still has a way to go). The only real advantage of PHP frameworks is hiring people and saving on training (which given the rather mixed quality of PHP devs is perhaps more important than in most languages). Outside of that the advantages of a framework are quite minimal, I mean sure if you compare to coding from raw there is a big time saving, but if you compare to someone going to Packagist and pickling an HTTP implementation, a router, a DBAL, etc and then writing the "glue" to put it together there is far less difference. Which maybe for the OP could be a compromise, he could have more control over how he wants "his" code to work, yet use components that have been tested by millions of people like Symfony Http-Foundation or Zend Dictaros for his Request/Response. 
&gt; You can have different versions of PHP , switch to postgres , mysql easily. You can add different tools like ELK You can very easily do this with Vagrant, too.
Ok. Your are right you can use Ansible to install all that. But you can't install on AWS or DigitalOcean your local setup in a matter of minutes. Docker allows you to do that. 
&gt; but Redis is a struct server, and RabbitMQ is a Queue You are right and we might switch back in the future if there is a need for an actual Queue server for us. &gt; Sockets timing out are not always great to recover &gt; What were the reasons keep trying during socket timeot were chosen We might not be able to control the default php timeout for sockets. Default being set to 60s we had to workaround that with the poor informations we have an error string in an exception :/ We are not aware of a better mechanism with current phpredis implementation. And, of course, it cannot be tested as `default_socket_timeout` cannot be changed at runtime (we would have done that first).
Here is a curated list of Top Web Development companies to choose the best one for your project https://hackernoon.com/top-reputed-web-development-companies-in-the-industry-5fca3abf12cd 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
great examples. 
You might want to look at Symfony, it feels awesome to work with. 
Pubsub is highly unreliable, when your connection is out you will lose messages... just so you know :)
oooo neat :)
PHP isn’t going away. Stick with it. 
Java's core time package.
Yeah, but Vagrant are provisioning complete VMs, which can takes tens of minutes to spin up if you have more than a few - Docker does it much quicker, but is also less of a VM and more a containerization.
I've dabbled around with it as well, it's pretty nice. and probably has a big future, seeing javascript take over everything...
lol, until you want your composer container to run the same php executable as your apache container etc... it becomes an unmanageable mess too fast with docker.
I've never had luck with Vagrant. Can't stand the thing and the countless hours I've spent looking up the Ruby config equivalent of what I could've done instantly in Linux on the command line. So, no thanks.
I am struggling to understand you - we seem to be having a perfectly good exchange elsewhere, but this conversation is not productive at all. With respect, you don't know me at all, so "people like you" does not mean a great deal, and the material about religious education is a confusing non-sequitur. I am not minded to continue this conversation at length, but Torvalds does not buy the right to be abusive with his talent either. That has been very well discussed on the internet already, and I don't know what more we can add to it, other than re-hashing it. 
PHP isn’t dying. Those people don’t know what they’re talking about. A good engineer is a good engineer, no matter the language. 
you should be able to pull 6 figures in most major metropolitan areas with that experience.
&gt;Does an engineer working in Symfony (for example) have a salary comparable to an engineer working with .NET? In my experience .net developers get about 20% premium over PHP devs with equivalent experience and qualifications (degree). However high salary PHP-only jobs are getting harder and harder to find as more jobs expect you to be able to know some frontend framework (Angular, react) in addition to PHP. That is not to say you cannot make a fine living as a PHP developer. Where it exactly tops out will depend greatly on where you live and your level of experience. In Orlando, FL you are going to top out about 100k/yr as a PHP dev, where a .NET dev with similar experience and credentials will top out at about 120-130k/yr. Obviously in NY , LA or SF the top range will be higher. As to why ? I think the "php hacker" effect is really only at the low end. I have seen people apply for mid level developer positions regularly who are at best junior level with respect to skills, at worst, completely incompetent. However when we have advertised for senior positions I received almost no unqualified candidates. So at the high end I do not think the low level people are having any effect. I think its just that .net engineers are in much lower supply
The bytebuffer library from NodeJS. PHP desperately needs one as comprehensive as other languages!
Bout to owe you a dozen more postcards :)
We are still in some disagreement, but that was a much better statement of your view. So, thank you `:-)` Ultimately, the balance of hostility versus usefulness that people will put up with is highly subjective. I've seen people leave Stack Overflow because they found it too spiky. I tend not to like that, since I stick up for Stack Overflow a great deal. I am aware that folks leave the [Linux Kernel Mailing List because of Torvalds](https://duckduckgo.com/?q=linux+torvalds+mailing+list&amp;t=lm&amp;ia=web), and I _am_ sympathetic there, since my judgement is he's not a pleasant individual to interact with. Ditto some folks in r/PHP, I guess. So, we all draw the lines of acceptability differently - and that's OK. 
Don't think of it as mixing languages, think of it as a roundabout way of using `echo()` for text.
Depends on the language and interpreter. Essentially, php treats everything not wrapped in the &lt;?php ?&gt; brackets essentially as just an echo. So it works well with apache (or your web server of choice). I know something similar can be done with perl cgis, and I believe (correct me on this if I'm wrong, haven't done it first hand) nodejs can do it, although most people I've worked with with node just use it for apis and then maybe do a javascript front end but I digress. Anyway, yes, they can, it just depends on the interpreter for the language. Even if not, pretty much any modern language will have some kind of statement to echo until you specify otherwise (php has this as well). So, you could always use that
summon Cthulhu you say...
I wouldn't call it "mixing with other languages", but yes, as long as you have a file interpreted by PHP, the syntax rules remain the same, including one saying that PHP is interpreted inside PHP tags only. 
Fixed :3
Only faggots mix php with html 😡
He's not asking if his code would work. He's asking if he can switch in and out of other languages in the same script. He specifically points out bash as an example.
I agree that people should use PDO over mysqli but, &gt; If you're making database-engine-specific decisions in your application code, you're writing bad application code. This is not always true. Few people ever change or swap out one database for another. You can choose your database technology and make full use of its features in the same way that you choose your programming language. This idea that your database is a dumb store of bytes that should always be swappable at the drop of a hat is an old meme and myth.
For a small CLI script, there is nothing wrong with mixing PHP and HTML. That's one of the best things about PHP. 
This is pretty much unique to the PHP engine as far as I'm aware. What's actually happening is that when you are outside of a `&lt;?php` tag, the PHP engine just outputs whatever is there as plaintext. So in the case of HTML, you're just outputting plaintext HTML syntax to your browser. In this case you're just outputting plaintext to stdout. The answer really is that you're not "mixing" PHP with any other language. Thinking that way is misunderstanding what is actually going on here.
Programmers are creatures of logic. We're not saying that summoning Cthulhu is a good idea *per se*, just that the idea should be fully debated on merit after V1 ships.
Yes, he can, if the output of his PHP script makes a valid bash script and called properly
Yes.
Are you implying that the second one should not be allowed?
`E_STRICT` doesn't exist anymore ([as of 7.0](https://wiki.php.net/rfc/reclassify_e_strict))
`$arf` is clearly a typo – `$arr[] = 3` is what was meant.
Oh that's what you mean! Yeah, I totally support that. Sorry for the brainfart.
Travis allows testing builds (whole project setup), it's very useful. Travis CI is for free if you have open source project
You're right! E_DEPRECATED then, as I guess there's intent to remove it eventually.
&gt; More specifically, Can I mix PHP with other languages like bash or something? No
So you want all variables in PHP to be explicitly declared? 
All array variables, yes.
Sure you can! Mixing PHP and C is great fun: https://stackoverflow.com/a/16256052/778719
Putting a privately kept login on something doesn't mean I "worry so much", it means... there's the solution to my problem, available for me to utilize. It's not hard, it's not expensive, it's not complex to apply.
So the bug in this code is that the closure doesn't have a `use ($foo)` statement, and you want to catch that bug by making implicit array creation invalid, right? That seems like quite the edge case to make a backwards compatibility change that would affect most PHP programs ever written.
Psst... post an example of JavaScript... a CLI example. If anyone read his post, you would know the guy is talking about switching in and out of other languages like he switches in and out of PHP in his example.
Black is a moron and should be avoided at al cost.
Righto instead of downvoting after what Im assuming is just reading the title, give me a reason. I'm also a PHP developer, I'm not trying to shit on the community.
&gt; ... declared or simply properly be initialized before being accessed. I hate seeing `$arr['foo'] = 'bar';` in code and having not a `$arr = [];` or something like that before. Luckily where I work, such code won't make it past review.
&gt; Next steps would be travis in matrix for 5.6-7.2 Done :) Now I have a fully operational useless package :D Thanks anyway, it's always good to learn.
&gt; In Symfony versions prior to 4.0, it was recommended to organize your own application code using bundles. This is no longer recommended and bundles should only be used to share code and features between multiple applications So, keep using bundles except for the app core
I don't think that this will affect "most PHP programs ever written". It will only affect bad code.
&gt; That seems like quite the edge case Also for the second example, where something is *clearly* a typo but is easily missed. In my company's large codebase I found about a 5 : 1 ratio of "feature" : "bug" usage of this construct when turning on static analysis checks for it. That's a low enough ratio to warrant an `E_NOTICE` or `E_DEPRECATED` – not a BC change, but a warning that something's amiss. Creating arrays this way doesn't work in any other language that I'm aware of, so most programmers who use it are either seasoned PHP devs aware of the special behaviour, or people writing bugs.
Since everyone is black and you didn’t state your stance no one can agree or disagree
That dude is just a bad developer. A good programmer isn't one that knows how to write code - they know how to design code properly. Good design leads to good code, bad design leads to a mess.
Black may be a moron, but Red is advocating *waterfall*. They're both morons.
Look again, maybe the image is cached for you but there are multiple colours now
True, any design should evolve as you gain new insight while developing.
To some extend i'm probably guilt of stuff like this. On occasion i'll have an idea, and rather than design it i may make a small prototype to see if the idea would actually work. PHP is really flexible for just throwing stuff together, but that doesn't mean you should. On the other hand, when i first started working the company i worked at was very small. We didn't really have time or budget to design everything, unlike now, so we'd often prototype then extend the prototypes. It is without a doubt, the most nightmarish way to develop, maintain, and improve code. 
You're being downvoted because you're basically implying that the whole of php developers are like that while this is just one anecdotal event. Php is one of the languages with the largest number of free resources available to learn from and use so of course you will find bad devs. Also, prototyping your code instead of drawing diagrams can be just as valid an approach. To make a bad analogy, this is like you saying "I got this bad experience with this one guy from culture X, is this a valid reason not to like the whole thing? Oh, but I'm also friends with one person from that culture so don't assume I'm just projecting my prejudices."
Popup on a site like this➡️Goodbye.
Fair enough, that particular solution I had experience in before I started and knew what it was going to look like. I was more trying to counter his excuse to "it won't be perfect from the start, so don't bother doing it", and I probably should have said "update as you go" instead.
Not a PHP thing or specific to any language, that is just bad development practices that will hunt that developer (and team) as long as they keep that mentality.
OP is trying to protect code... Are you still talking about STBs? Either way: Just because you're not motivated enough doesn't mean nobody else is either. Someone *will* build an exploit. Then you're left with only legal avenues (DMCA, contract, etc), you've wasted a significant amount of time/money on DRM, and you've probably pissed off some legitimate customers (bugs/insecurity introduced by DRM, inability to use your product how they want, etc). I'm not saying you should make no effort to protect your IP, just that it doesn't make sense to go overboard. We have door locks on our houses. Door locks only keep honest people honest and deter the lowest motivation dishonest people. Password your box, patch it, do whatever simple and unobtrusive things are at hand, then stop. You don't need the expense and trouble of living in a bunker, and there will always be someone with a bulldozer.
We are all morons in this blessed day.
It was a single modal people... chill the fuck out.
Sure, but good design doesn’t have to be documented to be good design. 
Maybe it's a younger "cool to hate PHP" phenomenon on the back of PHP &lt; 5.3 days, but i definitely here it from my peers and most places online who spend more time in other languages.
I have some bad news.
&gt; It will only affect bad code So that's like 60% of total? (Probably even more? Considering all the Wordpress/Joomla/Drupal&lt;7 sites out there in the wild)
Still annoying though :/
You're describing agile, nothing wrong with that...particularly if you chuck some design/maintenance docs down at some stage before it goes to production.
God help you with the rest of the internet then lol.
With the context it easier to form an opinion on the developer. Unfortunately the problem you describe plagues are entire industry. I think it may be more prevalent in PHP as it is often treated as a “beginner” language that many people start with and then stick with. 
Yeah, I'm with you there. Designs shouldn't be so complicated they escape natural language.
Not really. Just submit your abstract at the site https://cfp.wavephp.com/ . Some people are including slides which is nice if you have them but not required. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
A PHP library to access Locations of Bangladesh https://github.com/alimranahmed/BDLocation
What are you using to catch it?
&gt; I believe (correct me on this if I'm wrong, haven't done it first hand) nodejs can do it NodeJS can't do this in the same way that PHP can. There's stuff like `console.log`, but that's the same as `echo`. The magic echoing of all unquoted text is something fairly unique to PHP, I believe, because of it's use as a CGI scripting language when it was created.
Add block
I would not do this, I would hook it up to an Ajax call that then sends the data back and processes it, its much more "secure" in the sense that there's steps along the way to clean up and filter the data.
Who would this be for and why specifically Bangladesh?
I would love to see, and might do this my self one day, Spring Framework From Java ported to PHP - Just because .... No real reason ...
An ER diagram is absolutely essential. I'm not sure how you could justify not designing your database before building it. But... honestly I understand not doing a Class diagram. In my opinion that kind of design is one of the failings in OOP. It leads to inheritance structures that look great on paper but in reality it creates class dependencies that are a hindrance and lack flexibility. This is why there has been a push towards functional programming recently. It might seem great to have a BookProduct Class that extends Product. Seems like great OOP. But in reality you are probably just better off putting a Type property on the Product class instead of creating a new class for every product type. 
Terrible, please don’t use thin font for articles.
Yeah like the other 2 said, bundles aren't gone and they actually made it where official bundles (doctrine, twig, etc...) are _easier_ to install and manage. Only difference is the default configuration and how simpler flex is approached compared to previous iterations. So for people like me that never got into SF2/3, 4 was a breath of fresh air coming from silex/slim/custom/etc...
neat!
&gt; I'll have to manually calculate the dates to add some samples &amp; tests. That involves some head scraching tho. don't do that bud. There should always be a third-party independent source. That way you can be sure your numbers are correct and not just compliant with your own code. Manually working out as opposed to using your library is still self-referential (what if the algorithm you're using is broken?). &gt; Again, thanks, but again, that's probably a useless library, I would feel embarassed if you wasted too much time on it. Meh, I won't. It's taken less than an hour in-between some really boring client work. That's mostly when I hit reddit hard, when I'm bored, or waiting for something to download or finish, or I can't face doing some form of work.
Nice. I hadn't come across this yet. Thanks for the link.
Okay, so, not out of the box... https://github.com/phpv8/v8js Pulling from docs... http://php.net/manual/en/v8js.examples.php &lt;?php $v8 = new V8Js(); /* basic.js */ $JS = &lt;&lt;&lt; EOT len = print('Hello' + ' ' + 'World!' + "\\n"); len; EOT; try { var_dump($v8-&gt;executeString($JS, 'basic.js')); } catch (V8JsException $e) { var_dump($e); } ?&gt; 
Just guessing but my understanding is that Bangladesh has a very large PHP community. 
`E_NOTICE` is emited on invalid array index access to prevent typos. Does anyone think that is a good idea?
Modperl has something similar with &lt;% but its really a template engine doing it. Other languages tend to use template engines as well, for example jinja with python.
Class design != ERD. Sometimes I do ERDs in lucidchart, sometimes I just scribble down a list of entities on a notepad. Sometimes I am practicing a more evolutionary design and the best place to design your class is to start writing code. ERD is a means to an end. The important thing is that your code has a design which is a robust abstraction of your business domain.
We use silver stripe
"too long; didn't watch" version?
Why would someone have an aversion to learning something new?
&gt; At least now you can consider yourself a DateTime expert. More important : now the DateTime is no more a magic thing that I use without fully understanding it.
&gt; There should always be a third-party independent source. There's a mars datation system based on day count since the date I picked as era start in my calendar. I'll compare it to the eraDayIndex that is calculated. &gt; That way you can be sure your numbers are correct and not just compliant with your own code Problem is : that code represent something that doesn't exist. Most of the components are tested with regular dates, few of them have been tested with my republican calendar implementation, but there isn't a calendar to compare to for each arbitrary calendar you can configure. I guess that means i'll have to test components individually. &gt; or I can't face doing some form of work I can relate to that :)
Also a +1 for not worth watching. Stopped after he went on rambling that "anyone who looks at enough reddit posts can break into your connection"
Yeah. If I run it locally in Docker on Linux, it runs blazing fast. Sub 1 sec page loads. If you run it locally in Docker on macOS, stop what you're doing and run it in Linux or use `docker-sync` as file sync is slow as hell.
Sorry, I'l do just that. Thanks!
Implemented fingerprint algorithm mainly in use for standardization and grouping similar values. For situations where you have users typing city/company/street/title in million combinations. It's an improvement over original algorithm by adding synonyms and removals in the process. https://github.com/vladan-me/fingerprint/ Here's a sample, all of this: $strings = [ 'Manager Client Services', 'Client Services Manager', 'Client Service Manager', 'Manager, Client Services', 'Manager of Client Services', 'Manager Client Services', 'Manager , Client Services', 'Manager-Client Services', 'Manager Client Service', 'Manager - Client Services', 'Manager, Global Client Services', 'Manager, Client Service', 'Client Service Manager II', 'Client Services Manager II', 'Manager-Client Service', 'Manager of Client Service' ]; becomes unified to "client manager services" Also, it comes with a package that works with Elasticsearch, it creates matching index/analyzers/filters/synonyms/removals... https://github.com/vladan-me/fingerprint-elasticsearch More details about each project in [documentation](https://github.com/vladan-me/fingerprint#fingerprint) and [tests](https://github.com/vladan-me/fingerprint/blob/master/tests/FingerprintTest.php) and [wiki](https://github.com/vladan-me/fingerprint/wiki/Savings) pages. Anyway, try it out and let me know your thoughts. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [vladan-me/fingerprint/.../**FingerprintTest.php** (master → 91e60de)](https://github.com/vladan-me/fingerprint/blob/91e60debbb508f4b84766b52c74a2ac8457bcbd2/tests/FingerprintTest.php) ---- 
You're right, it works! The reason is that *when loading a directory of services*, if an interface is found, and if only one implementation is found *at the same loading time*, then an alias is created, from the interface to the implementation. This behavior has been introduced in https://github.com/symfony/symfony/pull/25282
Docker4mac? -&gt; https://www.reddit.com/r/PHP/comments/7f127n/docker_php_xdebug_mac_high_sierra_firewall/dq9tl60/
Beautiful story! &lt;3
I use Yii2. It's pretty good!
I tried to run this in windows environment. Both from php bin/console server:run and localhost apache/mysql/php. Dev runs in about 8-10 seconds, prod in about 4 seconds. Also resources get loaded slow.
You can just go to the site and buy a ticket to get immediate access (to the goodies as well). 
Maybe he's testing how you handle stress. The correct response is to tell him you need time to get a handle on things. You not only need to learn the stuff, you also need to get a grip on the codebase. That alone might take a week. 
&gt; In .Net, if I have to make a change to API layer, I have to build. This takes ~3 minutes or so, and then another 30 second wait time to run the application the first time after you build it. Fuck knows why, it just is the way it is. &lt;1 ghz processor, doing full build instead of right thing, using ancient, pre RyuJIT .NET version, fuck knows how many ways there are for php shithed to fukup &gt; Debugging in both Java and .Net is especially annoying. Gotta stop running the normal servers and restart in debugging mode. Java has its usual startup time, and .Net takes forever to launch its debugging mode - 2 minutes or so. And all debugging has to be done in the IDE. What is attach? Baby don't hurt me. Don't hurt me. No mo. 
Imho, a good planning is the foundation for good code, but experimenting with code can be the foundation for a good plan. But the fact that you can get into php pretty easily and that most other higher languages tend to go through higher education first, definitely has something to do with phps bad rep. In a way, it's the same with JAVA and C++. A lot harder to get c++ running than it is to make java work. But if you don't know the basics, it's also a lot easier to make java work like crap. As I see it, php is quite similar. It's easy to get into but also very easy to get wrong. 
"good design doesn’t have to be documented to be good design" It doesn't. But if you want people to acknowledge it and use it, you better document it. If you don't, it might be the best piece of code ever written, but no one other than you will touch it. 
He's right though, all real world programs evolve rapidly beyond a UML schematic. This is called iterative design, it's not a new idea. Most changes in software development over the last 20 years have been to move AWAY from the 'design everything in detail before writing a line of code' approach, because sticking too strictly to your initial design traps you in a net of your own creation. A good programmer uses both a decent initial design and also a solid iterative working process to refine towards their objectives. This thread is really just a classic example of 'waterfall' versus 'agile' development, but everyone by now should really understand that you need to pick the best parts of both approaches and not get too tied to either.
Looks like the very early beginnings of a PHP alternative to numpy
But that doesn't really tell me what the use cases are :( I guess you could use it for linear algebra and vector based applications, but that's nowhere near my expertise nor my cup of tea, so I would like to know if there are use cases beyond that.
well, as @karmaceutical said, this lib is mainly for data science projects, where you have to manipulate with data a lot, before getting some visualizations or estimations\predictions. Another use case, is for instance if you are working with some kind of coordinates data-structure. Than matrix representation could be useful for you. Btw, take a look at this lib: https://github.com/seredenko/array-filter. Also interesting lib for filtering arrays in php. 
&gt; Calling you a moron was probably a bit much, sorry. you a good man, Reddit needs more users like you
awesome :) thanks!
There probably aren't strong use cases for standard web development, but if you use PHP as part of a data analysis stack, this could be the start of something very valuable. Numpy for python is the foundation upon which essentially modern AI and machine learning is built - nearly every package uses it, from SciPy to Sci-kit Learn to Theano to Google's own Tensorflow. 
Sometimes people will do everything they can to stay close to their routine, and sometimes they are not aware of it.
&gt; &lt;1 ghz processor, doing full build instead of right thing, using ancient, pre RyuJIT .NET version, fuck knows how many ways there are for php shithed to fukup Yeah I joined an existing project that was started by .Net programmers who have been doing .Net programming for many, many years. But sure, blame .Net's flaws on the PHP guy who A. Didn't design or write C#, .Net, or Visual Studio B. Didn't set up the project in the first place
There seems to be a problem with " in the input...
Ditto; I think I was able to escape " with \ to get it to work ... 
Fun little distraction, thanks. Last level seems weirdly out of place though.
&gt;Parse error: syntax error, unexpected '"', expecting identifier (T_STRING) in -(8) : eval()'d code on line 1
Just use single quotes.
&gt; SHA - SHA is created by NSA Sure, valid worry, but the initial setup and rounds in sha256 are [nothing-up-my-sleeve numbers](https://en.wikipedia.org/wiki/Nothing_up_my_sleeve_number), they're the first 32 bits of the fractional part of the square roots first 8 primes from the set 2 to 19, and the rounds are the same, but using the cube roots of the first 64 primes in the set 2 to 311. If SHA (and variants) used unexplainable constants (ala Dual EC DRBG), then we'd have concerns.
**Nothing up my sleeve number** In cryptography, nothing-up-my-sleeve numbers are any numbers which, by their construction, are above suspicion of hidden properties. They are used in creating cryptographic functions such as hashes and ciphers. These algorithms often need randomized constants for mixing or initialization purposes. The cryptographer may wish to pick these values in a way that demonstrates the constants were not selected for a nefarious purpose, for example, to create a backdoor to the algorithm. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
I can't get the absolute best score on 6 or 10, any pointers?
Bundles are for third party libraries and will still very much exist. Though if you think you need a bundle for your own app, you're still free to use one. 
I'll gladly take suggestions! (I may have been a little lazy with the last one)
The best score for 6 is awesome, it involves `session_id` (it was found by someone on twitter).
For the 10'th, look up PHP's use of &amp; ;)
Got it, thanks
This is such a cool idea! I've just begun learning HTML and CSS. Not particularly familiar with PHP... I really like what you did with the Bar example. Do you mind if I edit what you have created to do a daily todo list for my small company that each individual can edit and see that everyone is knocking out their discussed task from our 8AM meeting? 
hint: some use php 7 functionality you very rarely encounter :)
Oh geez. I think I'd better come back to this when my brain is working later in the day.
A UML you create at the start will never reflect the finished product at the end, that is correct. But you have to have a good initial design, or your architecture will quickly devolve into a spaghetti mess if it is more complicated than a few entities. And to make sure that that doesn't happen you should have an initial design. That doesn't mean that you have to create a UML diagram. But the way black dude talks about it he makes it seem like they don't even want to have an initial design, which honestly is just setting up for failure. Have a good initial design, and adapt that to the changing needs - that's what makes up a good architecture. But you should **never** go in blind.
I think the idea of Docker is that there is no “one size fits all” when it comes to an application environment. I feel like I have seen this a lot, everyone trying to fit everything into a nice little box. That’s great but it’s not necessarily great for everyone and kind of goes against the grain of what Docker is about.
It's not a bug it's a feature, you don't need to use `"` in any level :p
You are right to say this goes against the philosophy of Docker (and this is exactly what I'm saying in the blog post, at the section "Is this following Docker best practices?") Yet, I think this approach is pretty useful to gain some time setting up a project. And I believe being able to enable or disable a PHP extension with a simple environment variable is something quite new. By no mean I'm advocating using this image for all your PHP projects, but if like me, you start a new project every 1-2 months and if setting up a Dockerfile properly takes you 1 day, it's easy to see how you can gain some time using an image that does more than the bare minimum.
&gt; And you're free to have your beliefs. Let's say you were using MS SQL and now you want to switch to MySQL. Do you think it'll just work and not take considerable time to migrate? If you've written good code, it should be minimal. I moved a huge application from MySQL to Postgres in under a day because my team was wise enough not to marry the application to the database. &gt; I mentioned the advantages, and I don't see why you care if someone uses. Just doing my part to try to prevent shitty code out in the world. &gt; MySQLi and PDO and both pretty similar anyway lul &gt; and have barely any differences in syntax This was never about syntax. 
I got stuck on level 2. fuck my life.
Ah awesome, found the solution now
damn I need to know
My virusscanner blocks me from accessing the site :)
`$code = json_decode($request-&gt;getQueryParams()['code'] ?? '');` This is why
$160K salary (plus a 25% (annual?) bonus) on a full remote PHP position? Where is this company located? Thats well above the market average (even for senior level) pretty much anywhere in the US. Let alone remote. Not saying you're full of shit, but thats at least 30% higher than what most senior level PHP developers make on salary (with benefits)
Completely agree, there's nothing wrong with Yii it's just if you're exploring ideas and building a portfolio, it's easier to do in the frameworks which have a larger community or are used by more hiring companies. /annecdotal evidence
Cthulhu may be wondering: does phordijk even know what php or javascript is?
Hello, it's me, Hackerman. The most powerful hacker of all time. I can confirm HTTPs is dangerous. You can use it to hack time, and if you hack too much time, you'll be lost in the past, where laser raptors roamed the Earth.
This is so... terrible, on so many layers.
Lul? You must not understand prepared statements. Oh well, then I'll educate you. Let's do a simple insert. **PDO** $stmt = $pdo-&gt;prepare("INSERT INTO table (weight) VALUES (?)"); $stmt-&gt;execute([$_POST['weight']]); $stmt = null; **MySQLi** $stmt = $mysqli-&gt;prepare("INSERT INTO table (weight) VALUES (?)"); $stmt-&gt;bind_param("i", $_POST['weight']); $stmt-&gt;execute(); $stmt-&gt;close(); But you're right, there sooo different. My point is that first of all, there are advantages of MySQLi, and some people might want them. You clearly don't, so don't use it. Pretty simple, right? They are also already so similar in syntax, that it wouldn't be very hard to change it. Additionally, it's not like the switch from DB drivers is automated, so you'll be modifying your queries anyway.
Hello, it's me, Hackerman. The most powerful hacker of all time. I can confirm HTTPs is dangerous. Using an HTTPs modulator I am able to conduct a mainframe cell layer and hack the uplink to the download, and with the right computer algorithms I can use it to hack time. But be careful, if you hack too much time, you'll be lost in the past, when Laser-Raptors roamed the Earth.
Well, basically on every single layer that has, does or will ever exist.
Stop using Shitware, then.
Hehe you failed badly explaining yourself, but that's ok! 
6 was where I got stuck, too
I used closure methods here but got a terrible score due to length [function ($object) { (function () { $this-&gt;a = TRUE; })-&gt;call($object); }](#spoiler) :(
Same. Idk what I'm looking at, been doing PHP for 8 years.
Hehe, a bad guy! Hehe! You seem to be frustrated! Are you frustrated? Hehe!
Yeah, I'm a bad guy. And you're a hackjob script jockey with a bad attitude and zero consideration for others.
6 years here, I'm trying to find the absolute best score. It expects a function to be passed in as a parameter.
Trash
Hehe, why are you a bad guy? Hehe, is It because you are frustrated! Hehe!
With /u/mnapoli's hint I quickly worked out [Spoiler](/s "[$x=session_id,$x($x)][0]") which is close (25 chars). It took me some experimenting to work out the extra golfy 22 char version which is [Spoiler](/s "($x=session_id)($x).$x")
It returns an error 502 when I try to beat the score on level 4 :(
"File rights on a development environment" is currently a thorn in my side. All of the solutions currently available via searching the 'Net boil down to UID hackery, which leaves a bitter taste in my mouth.
Hehe, of course you are frustrated, it is clearly for everybody! Hehe, and who are you to have or don't have patience for developers like me? Let me tell you who are you, you are nothing, you are just frustrated! Hehe! 
Yep, I'm nothing. I'd rather be nothing than be you.
You can call functions via their string identifier ;)
I way overcomplicated that one. \Closure::bind(function ($a) { $a-&gt;a = true; }, null, Bar::class)
Hehe, do you want to be like me? Sorry, but I'm afraid that's impossible because you are nothing and frustrated! Hehe!
Hehe! Everything I say is Hehe! 
I'm not sure I understand how to do that :D
Hey, i got you even more covered : https://github.com/popy-dev/popy-calendar/blob/master/doc/y10k.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [popy-dev/popy-calendar/.../**y10k.md** (master → 96e5d9a)](https://github.com/popy-dev/popy-calendar/blob/96e5d9a8ed0a2c6a65f8fab2eeb5fbc5f90123f0/doc/y10k.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply du6x0z8.)
Hehe, I already told you that you can't be me because you are nothing and frustrated! Hehe!
Can you hack away my bullet wounds?
A handful of the best possible scores contain notices or warnings. I feel dirty.
I've been a dev for over 15 years and I work in dozens of languages. I looked up the answer to #2. This is just another test with obscure shit instead of any actually useful knowledge. A shame because the format is really cool.
Ooh I did [($x=session_id)($x)|$x](/s) instead
Hehe! Since you auto describe yourself as a trash, so you should throw yourself into the trash bin! Hehe!
Eh, it's more of a puzzle than anything. Some of that shit is obscure.
Relevant [blogpost by James Bennett](https://www.b-list.org/weblog/2018/feb/11/usernames/) also mentioned in the repo readme.md
It's actually eval https://imgur.com/a/IE1SF
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/5pCJpEH.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Eh the only reason i could guess that one, was because I've read about super shitty ways of doing encryption that were used 2000 years ago and even used for obfuscation still recently. It says nothing about your PHP knowledge or even your modern encryption knowledge.
Has anyone solved level 6?
Thanks for this. Why not use separate containers and wire them through something like docker-compose?
Currently working on six.... hmm.
Laravel is just a framework. It's not the be-all end-all for job experience. You should be flexible enough to be able to work with any framework you're given, otherwise you're digging yourself a hole. Frameworks don't last forever.
OP /u/mnapoli you may want to secure it a bit.... https://i.imgur.com/qf0mhuv.png 
I've been developing [Pilothouse](https://github.com/Pilothouse-App/Pilothouse), which is a lightweight, open source, CLI-based local development environment based on Docker. It has built-in support for WordPress and Laravel, as well as generic PHP projects. Pilothouse supports unlimited local sites, PHP 5.6-7.2 configurable on a per-site basis, automated hosts file management, SSL automatically available for all local sites, and remote PHP debugging using Xdebug. We have a Chrome extension to enable/disable xdebug on a per-request basis. Mailcatcher is available for viewing locally-generated emails, as well as phpMyAdmin. Right now it's macOS-only, but Windows and Linux support is planned.
The Bay Area is a microcosm. I used to see job listings that required Laravel and Symfony experience all the damn time in Orlando.
This is really poorly sandboxed, more fun ones to run in level 2: ``function(){echo file_get_contents('/etc/passwd');}`` The script running the tests: `function(){echo file_get_contents('/var/task/lambda.php');}` Browse the server: `function(){var_dump(scandir('/'));}` Here you can see the only php functions that are disabled: `function(){echo file_get_contents('/var/task/php.ini');}` &gt;disable_functions = pcntl_fork,phpinfo,ini_set,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,stream_select
maybe region specific? hell of a lot of laravel jobs here in germany, though it rarely is in the "mandatory" part but more in the "this is our stack" part
Yeah I was poking around the filesystem using `file_get_contents` and `glob`, messaged OP suggesting adding lots more to `disable_functions`. Couldn't get the AWS credentials though, not sure where they'd be on the filesystem, the PHP process doesn't have access to those environment variables. 
yeah it's that bad because exec is disabled but still
Here in Finland at least, the smaller companies wanting php devs, tend to list general framework knowledge as a requirement too. If example frameworks are listed, Laravel is amongst them. They tend not to list the required framework because they are leaving it up to the devs they hire to choose it. 
I've got `KCR4PXNlc3Npb25faWQpKCR4KS4keA==`
http://php.net/manual/de/function.is-string.php 
I do use docker-compose with this. Both are meant to be used together. The real thing that is new with this image is that you can enable extensions on the fly. For instance, using this image, you can enable XDEBUG using on environment variable like "PHP_EXTENSION_XDEBUG=1" or enable APCU using "PHP_EXTENSION_APCU=1". Obviously, this is something that needs to be in the image (you cannot use docker-compose to add a PHP extension to PHP). On the other hand, regarding node, you are perfectly right. You can use docker-compose to get a fresh version of node. Or, if you are in a Dockerfile building your project, you can use ["multi-stage builds"](https://docs.docker.com/develop/develop-images/multistage-build/) which is a great feature when you need a software for building something but don't want that software in the final image.
I've got `KCR4PXNlc3Npb25faWQpKCR4KS4keA==`
this will go from php challenge to hackme challenge lol 
btw, is gmail still blocking php files even if they're zipped?
Pass the decoded JSON into a factory method? 🤷🏼‍♂️
don't worry, it's some obscure old school string manipulation function (performs some rotation on the characters)
Thanks for the explanation. I would indeed separate all applications in containers (i.e. PHP, nginx, node all in their own containers) and maybe add a container for dev functionality (XDEBUG)
wow, just got it, damn thats ugly ._.
That's been rank 1 in my head, I'm just making sure there's nothing better like a simple cast I could be using. for example (my object) json_decode($json);
I see someone else found the `file_get_contents` function is allowed ;)
As others have said, a lot of it seems to boil down to region, some of it having to do with the tools companies are using. I'm working at a Minneapolis based firm and we've got two in-house Laravel projects as well as finishing two major client projects on Laravel (in comparison we have 3 Symfony projects for clients, two of them because of the choice of Sylius for ecommerce). As a Joomla "lead dev", I see the regionalism in the CMS market space too. As much as people crap on it, it does get a fair amount more use in the European market than in the US.
Seems it's a read only FS though, can't run `file_put_contents` :(
I do occasionally see jobs requiring Laravel experience (UK), but I don't think it's been around long enough. Bear in mind that a lot of software development involves maintaining business-critical software written several years (or even decades) ago, rather than building shiny new sites. I would expect there to be a 2-3 year lag from a new framework becoming mature to it showing up widely in job applications.
You can always have multiple factories for nested data too. So, say the root is a User and that use has an Address. You could have a `User::makeUser` and inside of that, it could call `Address::makeAddress`?
I know one obvious solution, but that is 47 characters. I wonder how the 22 character solution was done...
Yup... I couldn't complete lvl 8 because I was testing it on php5.6 where the solution throws syntax error...
Short answer: Yes. Medium answer: That's not how it works. Long answer: Rationally, you learn by building big projects, reading theory books (Domain-Driven Design, Clean Architecture, Test-Driven Design) and doing a lot of mistakes and redo things as you go. By doing that, you discover things like CSRF tokens, session handling minutiae, and all the rest of things that you don't even know a framework has to do, yet. But that's the problem: The unknown unknowns. How do you *know* what to learn, what makes a framework? How do you *know* what Symfony provides, without running into a problem where you discover that there's a pattern, a name and a best practice guideline around that? Think how you learn natural languages, or other fields: You don't learn all the verb declinations first, then all the words, and then start writing prose. You learn by constructing simple sentences ("The dog eats meat") and then play with tenses, try more complexity, different cases, etc. So: Pick a toy project, put it on GitHub or GitLab and grow it. Ask questions on IRC, or here, read more books (less blog posts), visit conferences, and accumulate knowledge organically. You'll do fine.
In Orlnado I see alot of PHP and WordPress Job desc which confuses me bc WP is the the jQuery of PHP you don’t need to know PHP to do WordPress Development. I started taking both Intermidate PHP and WP Dev courses at TTH and I stopped bc its like learned how to do the same thing 2 diff ways at the end of the day its just a static site. 
Thank you for your response! i constantly see people heading towards frameworks i was more concerned if me reinventing the wheel by avoiding them is the wrong choice. I love the challenge of designing these things myself and don’t want to depend on a framework. 
You get higher than the max score on level 3 if you input `true`
function($y){ return ($y === 'gehr' ) ? 'true' : false;}
Pretty small text box for 47 characters.
Good answer. You can just discard the argument and return 'true' doesn't matter how you get there. function($y){ return 'true';}
Can write to `/tmp`, but it seems to be a sandboxed temp directory not the real one.
Well, you're right. It's kinda professional deformation to handle both sides of if() :) 
I would say it says fairly a lot about your PHP knowledge. It doesn't say anything about how good your code or general programming skills are.
The first couple talks were enjoyable but I feel that it went downhill very fast from there. Also I don't care about spark. Uncle Bob will be at Laracon US over the summer so hopefully the content will be better.
Well. There is a function would should work but don't. SPOILER =&gt; https://3v4l.org/iMH53 Did I miss something?
Definitely agree with you on bad practice of "a bundle for everything". So for the purpose of reusable bundle we can continue developing bundles without breaking the Symfony4 standards or recommendations.
Not really, because there's many more than one answer to most questions. This could be a standard interview test.
I didn't even think of anything like that. I just passed in a closure that always returns 'true'...
Exactly, I've seen a relatively big app codebases where dozens of controllers are placed in src/Controller like you mentioned, which is fine for a demo app with few controllers but still. Traditionally we used to organize relatively large number of controllers (50 plus), entities (hundred and more) and services, into hierarchy that resembles business logic or domain design.
Not the most optimal solution, but I passed in an anon class that implemented __invoke
I feel like this is what a junior PHP dev _exepcts_ to be faced with in an interview vs. what is actually asked: "Sooo...do you do WordPress?"
&gt; This could be a standard interview test. Violently disagree. *Violently.* There is now violence happening.
This conversation has happened 1000 times across 1000 development languages. This isn't a PHP-specific behavioral problem.
I like solution #10.
If you get stuck, hover over this [hint](/s "use session_id()")
I work in Brisbane Australia, and a quick look on local job boards shows quite a few shops recruiting for Laravel. It's regional. Github stars are a bit of a pointless metric when it comes to actual usage. The only thing a lot of Github stars actually proves is that a project has a lot of Github stars. You can probably read the tealeaves by looking at stars + composer installations, but that's only going to give you a rough overall guide. Job boards for your local is your best bet. If you want to use a particular technology, relocate to a place where that technology is being used. If you don't want to move, learn the things that are being used.
No, just autism.
&gt; most employers are just looking for any general framework experience Of course they are. 1. they don't want to limit their options 2. they don't want a one-framework jockey because that raises a red flag that the person only knows PHP through the lens of the framework, and doesn't have a solid grasp of the language or the problems the framework is solving for them.
The key is to know that there's a very old form of encryption called a [shift cipher](https://en.wikipedia.org/wiki/Caesar_cipher) (or Caesar Cipher after a famous user of it) and that "gehr" and "true" have the same number of letters so one could be a shift of the other. A common use is to shift of 13. That is, if you see the list of English letters arranged in order along the edge of a wheel, and you rotate 180 degrees from the A position you'd see N; from B to O; C to P, etc. This is so common that there's a [PHP function specifically to do it](http://php.net/manual/en/function.str-rot13.php). Knowing that, and combining it with u/Akeniscool 's tip, you then know you can pass "str_rot13" is an argument, which the function will run "gehr" against, returning the string "true" :)
src/Controller is just the recommended default approach. I organize my stuff by feature and have no particular controller directory.
Eggplant length https://imgur.com/gallery/jHgcj
Was it done Microsoft style where you rename it to file.not_php and suddenly everything's great? 
I agree you should be using a wrapper or ORM
I don't know I'm gmail user and everything with &lt;?php in it was a big no no for gmail last time I tried
What about using __set_state http://php.net/manual/en/language.oop5.magic.php#object.set-state $instance = Foo::__set_state(json_decode($bar, true));
there's an easier way, I just never used the function so I never knew. Now I hit a rate limit lol
Lol. Maybe their downfall will be &lt;?not_php
Same here, made sense to me
Hack the planet, my dude.
"**Error**: Rate limit reached. Please try again later"
I’d upvote this again if I could
I... I should leave PHP alone
Agreed! This is excellent advice.
Aha! I knew that it was a Caesar, but I had no clue about the rot13 function. That explains it all now! :)
 people uses stars for different things, some says thanks with stars, other people like me uses to add to favorite to check later the source code or use it, and some other people stares things because is popular and want to display on his stared project but never used it.
this is an AWS Lambda function so they are only in the environment
is php using the .ini that you edited?
/tmp on lambda is ephemeral, it may or may not be there on the next request
You should be able to. Why are you trying to use a .dll file in Ubuntu tho'? Isnt that supposed to be a .so?
The unfortunate thing is PHP doesn't have the type information necessary to be able to just magically do this. You could write some complex thing that uses docblocks, but you really shouldn't…
I see Laravel jobs here and there and they are becoming more frequent. One thing you have to understand is how scattered the PHP landscape is though. I have seen job posting for systems written in no framework, Magento, Laravel, Cake, Symphony, Zend, Kohana, Wordpress, Slim, OSCommerce and probably countless others that I have forgotten. The people posting this jobs are smart, because they know if you know one or two frameworks like Laravel, Symphony, or Cake then you can catch on to all the others pretty quickly.
&gt;This is really poorly sandboxed good luck hacking aws lambda 
&gt; Laravel is virtually unused in the Bay Area, I've literally never heard of anyone reputable there using Laravel for anything. That's because no one in the Bay Area is writing new applications in PHP; the companies that have PHP have ten-year-old codebases, and thus ten-year-old frameworks. Laravel doesn't strike me as something that would be popular among tech companies. I would bet it's much more popular among web development agencies, for whom being able to host a bunch of low-traffic websites on cheap shared hosting is beneficial.
Yeah whats up with that? I don't seem to be able to do anything.
Only when I'm 99% sure that bundle will be reused with another in-house project. For core features there is no need for bundles.
I've been in an online interview where at least some of the questions were like that, with a 20 minute time limit. Was kinda discouraging.
That's fixed thanks!
I was stumped, until I read this comment. Took a moment to recall the arbitrary "str_" prefix... oh the days of 4. May they be buried forever.
I was going to post a new thread about this exactly thing - I'm an experienced programmer going back to the 80s. In late 90s/early 2000s I worked in industry as a web developer (ASP mainly). For the past 16 years I've been teaching (UK high school), mainly Computer Science. I've picked up various languages pretty easily. PHP is my current toy and I've built various tools for work with it. One for students to choose their options subjects, one for staff to track their CPD progress and another one for staff to be able to share work and assessments with students. They're quite big projects, linking to various MySQL or SQLite databases and given my prior experiences I'm happy that I can "do" PHP. However... I feel so out of date. I haven't used any frameworks, everything has been "hard coded". I read on here about people calling themselves PHP developers because they can install a WordPress plugin, but I worry that I'm too far the other way. I don't think I've ever used a framework and wouldn't know where to start with one. Any recommendations about where to start?
If you have to go through hoops to do the simple things, that’s a no go for me. If your task is to make something work, and their rules prevent you from completing it, talk to your boss. Don’t put that stress on your self. Or the project needs to be designed from the ground up not to need anything outside of localhost.
There is an offer for private Flex servers: http://fabien.potencier.org/symfony4-flex-private-repositories.html However I'm not aware of an on premise version. Maybe can you ask directly SensioLabs if they plan to sell on premise Flex servers?
&gt; level 2 any correction? stuck on level 2 too... 
pass in `function(){return 'true';}`
&gt;While in beta, private repositories are free. what is this? they "force" us to use recipes for 4.0 and then start charging money for it? for simply hosting json files? What am I missing here?
not finding the absolute best score, I agree. but if you can't solve it at all... it says a lot about your knowledge of php...
Blocked functions was updated to: &gt;pcntl_fork,phpinfo,ini_set,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,stream_select,file_get_contents,file_put_contents,basename,chgrp,chmod,chown,clearstatcache,copy,delete,dirname,disk_​free_​space,disk_​total_​space,diskfreespace,fclose,feof,fflush,fgetc,fgetcsv,fgets,fgetss,file_​exists,file_​get_​contents,file_​put_​contents,file,fileatime,filectime,filegroup,fileinode,filemtime,fileowner,fileperms,filesize,filetype,flock,fnmatch,fopen,fpassthru,fputcsv,fputs,fread,fscanf,fseek,fstat,ftell,ftruncate,fwrite,glob,is_​dir,is_​executable,is_​file,is_​link,is_​readable,is_​uploaded_​file,is_​writable,is_​writeable,lchgrp,lchown,link,linkinfo,lstat,mkdir,move_​uploaded_​file,parse_​ini_​file,parse_​ini_​string,pathinfo,pclose,popen,readfile,readlink,realpath_​cache_​get,realpath_​cache_​size,realpath,rename,rewind,rmdir,set_​file_​buffer,stat,symlink,tempnam,tmpfile,touch,umask,unlink,chdir,chroot,closedir,dir,getcwd,opendir,readdir,rewinddir,scandir,finfo_​buffer,finfo_​close,finfo_​file,finfo_​open,finfo_​set_​flags,mime_​content_​type So still not evolving enough to prevent getting that info
do you guys actually make diagrams of the code you're going to write?
I managed 32 characters with this monstrosity: $a=function()use(&amp;$a){return$a;}
Solved all except for the 8th... Totally stuck on this one...
Yeah if it's not too much to ask to leave it alone, I'd like to avoid taking down the whole thing as long as possible.
 highlight_file()
I would say that Laravel is the one to go now, it’s so elegant and powerful to use. You can go to LARACASTS and search for free content there where Jeffrey teach some of it, you will love it’s simplicity.
There's probably plenty of people that are actually trying to be malicious and aren't giving you feedback
Providing help for that is a bit different.
A clue for the last one I found: `function($y){echo $y('/bin/cat',array('/path/to/whatever'));}`
&gt;they "force" us to use recipes for 4.0 and then start charging money for it? Nobody is forcing you: it's an experimental feature and if there's enough demand for it I find reasonable than they charge for it. Exactly like for private packagist. &gt;for simply hosting json files? What am I missing here? They are charging for the private recipes feature, the fact that it's only JSON files matters little.
That's why I quoted force. But you can easily host your own package server, seems like it's not possible for recipes?
IMHO, this question mixes what it mean to write efficient code with library/framework familiarity. "Efficient code" follows from knowing purpose of code, and choosing right trade offs base on that purpose. Framework vs principled code is totally different debate.
What version is this running? I tried using boolval on #2 and it didn't work. :(
Each client having its own queue bound with the same routing key will ensure messages go to each client without being lost (and then having the client explicitly ack when it's successfully consumed the message). We do that all the time here with RabbitMQ and it's never been a problem and we've never lost a message (although we're not using PHP with RabbitMQ). 
It's really simple. Make sure git is installed on your machine/server, create a repository (I prefer gitlab) so go to gitlab.com, register an account and create a project - follow their guides if necessary. Then in command line: git config --global user.name "yourusername" git config --global user.email "youremail" git init git remote add origin git@gitlab.com:yourusername/repositoryname.git (accessible as a copy paste from gitlab) git add . git commit -m "message about your commit" git push -u origin master If you don't want to use the CLI there's plenty of software out there that will manage that bit for you 
Atlassian have a very good tutorial on their website for getting started with Git. https://www.atlassian.com/git/tutorials/setting-up-a-repository The git community is massive so if you have any problems there will be resources online to get you through. Depending on where your git repo is being held there might be some useful instructions to get your repo started if you use the site to create a new repository. Best of luck. Let us know how you get on. 
That's a great question. Let me try commenting out a module and see if it's reflected in `phpinfo()`
This guide is very useful in explaining the core concepts in an easy to understand way. [git - the simple guide](https://rogerdudler.github.io/git-guide/index.html)
A very good website to learn by practice https://learngitbranching.js.org/
You don't think PHP being a fractal of bad design[1] has anything to do with it being "designed" by someone who's very open about hating[2] programming? [1]: https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/ [2]: https://en.wikiquote.org/wiki/Rasmus_Lerdorf
That does explain a lot. Find it strange really. For most commercial use cases like ours, we’d even happily pay for an official API from the likes of Insta/Snapchat 
Frameworks are not magic, they are just a pack of packages and conventions about how to solve a problem. In PHP most of the times the things we call frameworks are trying to solve the problem of how to receive a request, dispatch it to the right controller and return the appropriate response. Of course there are a lot of other things packed together like ORM, commands, migrations, emails, and so on. But you can learn each of these points individually when needed. If you already use some packages to do this stuff then chances are the API will be similar.
There is a community initiative to re-implement the protocol: https://github.com/aurimasniekis/flex-server I don't think the official version is available on premise for now. But you're not forced at all to use the Flex server for Symfony 4. You can also install and configure bundles "by hand", it works too.
If you are using Windows on your development machine then you could also look at [TortoiseGit](https://tortoisegit.org/). This will add items into your Windows shell. When you right click in or on a folder, you will have options to create git repository here. Also when right clicking on a repository, you will have options to push, pull fetch, commit, view diffs, apply patches etc. If you are completely new to git I highly recommend this approach, given that the actual documentation for git is **NOT** n00b friendly. It pretty much assumes you are an expert on at least one previous version control system.
nice, looks promising. I know it can be done by hand but yeah, we're programmers, we should automate whatever we can.
nice, looks promising. I know it can be done by hand but yeah, we're programmers, we should automate whatever we can.
Here's two good practices I'd do on any project like this before creating the repo: * Take every vendor framework and 3rd party library and make it a managed dependency with [Composer](https://getcomposer.org/doc/00-intro.md) and [Packagist](https://packagist.org/?q=twig&amp;p=0) (you could do this with WordPress, but that's a little harder to get right with an existing project). * While doing that, throw in [phpdotenv](https://packagist.org/packages/vlucas/phpdotenv) or some equivalent to simplify hiding credentials and other environment-sensitive stuff from Git.
I know at one point Casper offered an API for Snapchat
Any reason to use gitlab over bitbucket? I've been using bitbucket for a few years for the free private repos.
Not really, bitbucket starts to cost money when your team gets bigger and it's not open-source but for casual use they're basically the same thing.
Dissenting opinion: The only advantage of gitolite is per-branch permissions, and it has many disadvantages. A private github repo is far cheaper than the time you'd invest in setting up gitolite.
yes my first interview question was about caesar ciphers and how I pass undefined constants to functions because I assume they'll become strings anyway
Most modern IDEs will automate much of this for you. [PHPstorm Gitlab integration plugin](https://plugins.jetbrains.com/plugin/7319-gitlab-integration)
Oh look, the incompetent is mad.
Laravel or Symfony. We have a guy on our team that is kinda like you. Very "old school" PHP and never used a framework - except a now every outdated one. But his knowledge of PHP is f'n outstanding. In under a year he completely caught up and is now a vital asset on our team. I would say he's "further ahead" that most because of his strong core knowledge of the language.
I wasn't lying, it was slumdog millionaire style
Unless I'm missing something, they would only charge for private repositories. Public ones will still be free. So if you *really* need private recipes, and are too cheap to pay for it, I suppose you could just run some composer post-install scripts.
You clearly have no idea about working in large corporations. It's not about some "rules" but about network security, preventing data leaks, preventing being hacked/penetrated, isolating departaments etc and so on. That's why there are self-hosted github/gitlab (etc), self hosted packagist (Private Packagist). And who knows, maybe self-hosted flex server will be available as well. 
&gt;$matrix = new np_array( nope, I'm out
Learning all the git terminal commands and understanding git are 2 very different things. Start with a good git gui like SourceTree or GitKraken or Tower. You've already worked on the project for months so it probably does not make sense to try to retroactively make individual commits with meaningful messages. Just start with 1 big commit of everything you have, except for the vendor folder, cache folders, the folders where site users can upload their photos/avatars/pdf files etc... any stuff like that which isn't directly related to the source code. You can put a .gitignore file in the folders containing the rules: * !.gitignore Remember that git only tracks files, not folders. If you have a folder whose presences is vital to the operation of your code but that folder is empty, put an empty .gitignore file in there so when your collaborators clone the project on their computer they get that folder. You need to pick a git workflow. How to name your branches, what the branches mean, when to make new branches, when/how to merge them, when to tag a release, whether to use SemVer (https://semver.org/) or some other approach.Understanding all of this is more important than memorizing the git terminal commands.
Yeah, I wouldn't work for a company with strict security policies either. /s
 function ($x) { return "true"; } 
Personally I would cut the interview short myself (respectfully). For the type of work I do and market myself for, that would just be a major waste of time. There are plenty of good companies out there who realize there are bigger picture questions to ask.
&gt; I know it can be done by hand but yeah, we're programmers, we should automate whatever we can. No. Automation comes at a cost and at some point there are diminishing returns. Symfony flex does not solve a problem I had and in OPs scenario I would simply not use it.
Why you are commenting without watching the video? It has very good points.
I need to change careers. I’m over programming. And this made me physically cringe reading it...
Yep, Swoole is self running. Example: Php7.0 webserver.php $server = new Swoole\Http\Server('127.0.0.1', 9501); $server-&gt;on("start", function ($server) { echo "Swoole http server is started at http://127.0.0.1:9501\n"; }); $server-&gt;on('request', function ($request, $response) { $response-&gt;header('Content-Type', 'text/html; charset=utf-8'); ob_start(); $_SERVER['REQUEST_URI'] = $request-&gt;server[ 'request_uri' ]; $_SERVER['REQUEST_METHOD'] = $request-&gt;server[ 'request_method' ]; $_SERVER['REMOTE_ADDR'] = $request-&gt;server[ 'remote_addr' ]; include ("index.php"); $html = ob_get_contents(); ob_end_clean(); $response-&gt;end( $html ); }); $server-&gt;start(); Running Swoole + php-pm sounds strange :)
1. NOT PHP 2. NO HELP THREADS
And level 11 seems actually like level 2 ([0 =&gt; null] is kind of too obvious?)
I'd suggest to simply head over to github and start a small sanbox project. Github holds your hand here and there to get you started and public repos are free. Start the repo, do a few commits and see what it does. Creating a repo is very simple, but getting started with the every day workflow may cause some headaches. I strongly suggest for beginners to start out with a master only workflow and get into branches later if you really need to. Also keep away from high level tools until you got the basics. To work as single person with an existing git repo you usually only need this: * git status * git diff * git add * git commit * git log * git push * git pull * git checkout * git reset You can look at chapters 1 and 2 to get started: * https://git-scm.com/book/en/v2 Brainfood * git is decentral. you have a local copy. nothing is synced until you push. * try to understand "staging", i.e. what changes with "git status" if you do add/commit/checkout/reset. * the repo is just a sequence of "diffs" not a file system, the result only looks like that. you can time travel with checkout/reset. * be reckless. it is quite easy to fuck up with git and quite hard to completely loose stuff. (with the commands mentioned above) 
&gt; You can utilize those features, just not in your application code. I understand what you say. My question is why? &gt; Write a stored procedure. Then when you move to some other DB engine, you just need to write a stored procedure in that DB engine that conforms to the same contracts. How is that better? Now I have code that doesn't even live in my git repo and it's not obvious it even exists for other developers. I'm really not trying to be an arse here, I'm just curious. &gt; If you do, you're objectively writing bad code that's hard to maintain over time. You are using the word *objectively* but it really seems like you mean *subjectively*. So again I'm really curious what makes it bad code to use database-specific features on the PHP-side of things. As an example, lets say I'm using Postgres json datatype and my ORM layer abstracts away from how it's actually being used. My app now supports MySql &gt;=5.7, Postgres and MSSQL 2016. Is your answer really not to use the json datatype (because stored procedures don't help here).