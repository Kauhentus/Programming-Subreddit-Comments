Added! DM me , i have discord. 
My partner was offered a job. I would have had to find a job. We ultimately didn't feel comfortable with losing my income since we weren't sure how long it would take me to find a job. Weird how? 
There are at least 2 different JS ecosystems. I'm assuming you are referring to server side so that would be Node. It will never replace PHP. While it seemed to catch on quickly, it has plateaued. In no way ready for mainstream enterprise level applications. For it to succeed it needs to branch away from JS. JS is not a server side language and never will succeed there. Python will most likely take it over with a much better server side and async design. Either of these just complement PHP to make a full stack. 
I would definitely like to join in. A discord would be awesome! I’m in the midst of learning front end languages so unfortunately I don’t bring much to the table but I would like to pick your brain and anyone else’s brain that may join 
Hi new friend.
Hi ya, do you use any CMS frameworks? I'm working with Joomla and WordPress for the last 4 years.
I'm a student and dipped my toes in PHP during an internship. I'll join if I'm welcome. :)
Skype: nitrophysix Discord: [https://discord.gg/RN7veS](https://discord.gg/RN7veS)
NEW LINK: [https://discord.gg/9x4fa44](https://discord.gg/9x4fa44) Everyone is welcome.
[https://discord.gg/9x4fa44](https://discord.gg/9x4fa44)
Yes I do :) [https://discord.gg/9x4fa44](https://discord.gg/9x4fa44)
Join my friend :D [https://discord.gg/9x4fa44](https://discord.gg/9x4fa44)
Join :D [https://discord.gg/9x4fa44](https://discord.gg/9x4fa44)
Agreed :D
lets connect :) From India working around Laravel for now
Next time you start arguing why don't you suggest you discuss something more productive instead? Clean code, architecture, design principles, etc are all universal and not limited by something as silly as which language one prefers. Which ultimately doesn't even matter, as long as you're productive everything is a-ok
That ain't fun though
What exactly does a 10 years of the dev experience means? what all things have you encountered and is there any tips you can pass over to the programmers who have just started out? Thanks!
care to share your skype id ?
In this case it is. Because most of modern libraries requires libevent extension or similar. But what will you do in cases when you can't setup this extention on your hosting and want some event design?
But in general you're right.
I do support this based on it being a common and handy language feature. I'm curious how PHP implements it for DateTimeInterface. Maybe others? If you're looking for examples, I would use it for ecommerce, money classes, for example MoneyRounded, MoneyPrecise, etc. 
Me too - learning php Linux because I started using AWS
So do I. Let’s connect 
Career change, mostly. I stepped out of the IT world for a while, and when I came back I decided to learn a new language. I always felt uncomfortable being tied to Microsoft as it made it more difficult to launch my own projects. This was when Azure was still in its infancy, containers didn't exist and as a result hosting your own windows server was expensive for both (virtual) hardware and licensing, compared to a debian/ubuntu box. I loved the language and the dev environment tho. Visual Studio has always been great and I still use vscode now for all web dev stuff. Having said that, ditching Windows as an OS has been the best choice of my professional career. 
1. It pays my bills and JS is a mess for the kind of work I find myself doing. 2. No? Number of programming languages isn't important, in practice. At this point, I can get up to speed on any of the C-family ones, or anything similar to Python or Go, relatively easily. 3. PHP is not going anywhere. I always that its only competition are the domain-centric languages like R, Erlang, or Lua. Languages that people may use for a non-web thing, but can be used for basic web development without learning anything new.
Healthy if you have some experience. I've had most of work fall from underneath me after a while, but finding a new job never takes more than a couple of months. I say this living in a major city that is focused on C# and whatever trendy language is happening. There is also a lot of remote work, which I do now. If you are looking for work, have a broad set of skills. PHP devs need to be generalists since in my experience, you're working for small teams or a one man show. Pay is not all that great, but there is often great job flexibility.
Should have used the Comparable interface instead of the __method approach.
I don't like the reference implementation of __equals and __compareTo in the RFC as it depends on float comparison which should be avoided if possible. Instead of using toFloat, you should use a proper implementation for comparison in Q. It is pretty easy for __equals: public function __equals($other) { return $other-&gt;den * $this-&gt;num == $other-&gt;num * $this-&gt;den; } For __compareTo, you'll need to check the sign of the denominators, as you'll need to change the comparison if ($a-&gt;den * $b-&gt;den) &lt; 0. public function __compareTo($other) { $dens = $other-&gt;den*$this-&gt;den; $signOfDenominators = ($dens &gt; 0) - ($dens &lt; 0); return $signOfDenominators * ($other-&gt;den * $this-&gt;num &lt;==&gt; $other-&gt;num * $this-&gt;den); }
My view is that you should pull all your data up front. The objects in the collection should have all the relevant data. The only reason it should be different is if your query or collection is so large it is just not practical to query everything. I suggest always viewing things in layers, from hardware to user, and you always want to move data forward and never take a step backwards. So in this case, you get your data from your database layer, collect it, transform it, send it somewhere, collect it, transform it, and so on.
If you are new and have the money + time, then go for it. It seems like the basics are all taken care of, but you can also learn from YouTube. For programming, I don't think there is much value in going in any order. I think learning as much as you can, and making connections as you go is better in the long run.
I just did the exact same thing. My first PHP site I did an MVC from scratch based loosely on ASP. Net MVC: https://comefund.me I see you take donations. If you register on my site you can raise bitcoins too :)
Hi @emailscrewed - 10 years of working in the industry of both web and software, mainly web. - Tips. - Study to understand not to remember. Watch videos, read, read read.
&gt;where's everyone meeting? how do I get an invitation? Whatsapp is no good dude. Most of us work on a PC. Although the PC app is available its shit.
 [https://discord.gg/9x4fa44](https://discord.gg/9x4fa44) 
&gt;nitrophysix
 [https://discord.gg/9x4fa44](https://discord.gg/9x4fa44) 
Oh - I see what you mean. I think there's definitely virtue to writing PHP libs that don't require obscure extensions. Even if the extension is actively maintained (which there's no guarantee of that) there's also a very good chance you'd have to manually compile it and idk.. obscure extensions can be a PITA! I thought you meant dependencies as in trying to avoid other third party PHP libs.
Pretty dope! I did the same, love it, but stopped updating it last year... You should consider adding eCommerce to the platform. I use my platform to spin up "instant" eCommerce websites to sell things.
It's definitely not dying. My buddy and I both made an app that achieves the same results. I swear to god, it's all bullshit from the JS/Node side. People praise node and other "frameworks" (although node isn't necessarily a framework per se) like "it can do everything and more, more efficiently, with fewer requirements/plugins/addons. Anyways, we have an app that accomplishes the exact same thing except, **my PHP app is faster.** Yes I had to install modules, but so did he. In fact, I'm pretty sure he installed more. PHP is not dead, I am not threatened. FB runs off PHP, eh kinda, but still - use that during arguments LOL.
It's definitely not dying. My buddy and I both made an app that achieves the same results. I swear to god, it's all bullshit from the JS/Node side. People praise node and other "frameworks" (although node isn't necessarily a framework per se) like "it can do everything and more, more efficiently, with fewer requirements/plugins/addons. Anyways, we have an app that accomplishes the exact same thing except, **my PHP app is faster.** Yes I had to install modules, but so did he. In fact, I'm pretty sure he installed more. PHP is not dead, I am not threatened. FB runs off PHP, eh kinda, but still - use that during arguments LOL.
I want a new friend
Join us! https://discord.gg/9x4fa44
Hello, I have been building software from 25 yrs, I never speech with an engineer or a programmer, for read things of other people I use groups on fb.
By any chance, have you heard of [GitHub](https://github.com), [GitLab](https://gitlab.com), or [Bitbucket](https://bitbucket.org) yet?
You probably do not want to use [Classmap autoloading](https://getcomposer.org/doc/04-schema.md#classmap) in development, but instead use [PSR-4 autoloading](https://getcomposer.org/doc/04-schema.md#psr-4). As part of the deployment, you could then [optimize the autoloader](https://getcomposer.org/doc/articles/autoloader-optimization.md) for production. 
I've been using PHP for about 5 years now. Just joined the discord!
I wouldn't really be comfortable making donations on a platform that is self described as "My first PHP site"
Very new to php but eager to learn! How can I best communicate?
Just joined the discord!
&gt; Perfection shouldn’t stand in the way of progress though. As true as that is there is also a counter argument to this. As soon as PHP adds a feature changing or improving that feature causes potential backwards compatibility breaks. As we have seen over the past few months even the tiniest BC breaks that are literally just bug fixes can cause pretty massive backlash even in otherwise pretty intelligent communities like this one on reddit. So my argument would be that, yes striving for perfection is a stupid waste of time, but no if we're going to add this we should add it properly. I think I agree that PHP doesn't need full operator overloading but the proposed syntax in this article using magic methods is definitely not the way to go.
I didn't even know phpclasses existed still.
go home phpclasses.org, you're drunk.
Why is that? I'm looking for good cases to support either approach. 
Tagging to join later
This is awesome thank you, I wrote that example in a few minutes to demonstrate how it might work but I'll fix this asap because it's definitely incomplete. 
It feels correct to go with Comparable interface, python choose the other approach, might be because that they don't have interfaces. Lets say we want more functionality (like operator addition), instead of adding *more* magic methods to a class, its better to have another interface there as well, its okay to have a magic method thing for **constructor** thingy, all other functionality feels more better to be in an interface. 
So nothing prevent the end user of the library to do `$cell = new class($address, $value) extends cell {};`
https://discord.gg/9x4fa44 - Permo Link
Nooooo. This article doesn't handle JSON escape characters for a start. A more general point is that beginners have a lot of other things to worry about; why waste their time rewriting standard functionality? Indeed, why *teach* them to waste time rewriting standard functionality?
That's because HTTP clients don't return Symfony responses.
why should I even care how my json is generated? Thats nothing a programmer should care about in my opinion. its like your next article is "how to manually write your echo command in php". 
I can see what the author is getting at - the ability to output "partial" JSON so you can efficiently iterate a large dataset to output a potentially large number of results without running out of memory or causing no output to be sent to the client until the entire output is assembled. I have achieved this in the past using a different method that still utilizes json_encode to ensure that everything is properly escaped / encoded by splitting on a known marker: https://gist.github.com/AllenJB/067fc43486ef299432425f20528dbb6d
Don't do this. Please, really don't do this. ... instead... First, go read about SQL Injection, because that is an almost perfect example of what NOT to do. Second, go read about what &amp;&amp; does when running a bash command, and think about all the horrendous things that a malicious user could do with access to what looks like an un-passworded sudo account that allows root access. Seriously, wtf were you thinking?
Wrong side of the bed again? :)
CQRS is nice, seems over the top when I first used it, but the advantage is more down the line when you need to change your data structure.
Hell, I would like to join too, casual gamer, full time frontend developer 😒
1. As someone else said, it pays the bills, and I get to see my stuff in use in the public domain - personally I like programming in general, and am not wedded to Web dev specifically. Regarding 'heat', what heat? It's a different way of achieving the same things, I think its bizarre to use something that was initially designed for running in a browser as a server-side language, but it works, and it gets the job done, it might not do it as swiftly as PHP can, but it works. 2. I'm at a point now where I can solve the logic problem, and then work out the syntax later - so I don't really care what language I need to write in. Generally the answer is 'whatever gets the job done fastest/cheapest/best dependant on business needs'. 3. HAHAHAHAHA... wait, you're being serious? HAHAHAHAHA, no. You only have to look at how much of the web runs on PHP, and the OS community to know that isn't the case.
&gt;Hey guys I'm the super smart and cool """Redditor""", wanna join my fan club
escape characters, too :)
You're shit.
cURL is the only way it's going to work as a POST. You could potentially use fopen/file\_get\_contents for a GET request, but that's getting a bit nasty. If you are writing code for someone, the first thing you should be nailing down is system requirements, to not do so is negligent of your responsibility as a programmer.
Hi, thanks I'll be more than happy to join
Hello Tania. That's a very good attempt for a novice. But yes, we are worried about the following article about your *writing* experience. As, truth to be told, programming is not only about writing. Mostly it's about support, maintenance and extending of the existing code. MVC has been invented specifically to ease the support and further development of the existing site. When followed blindly, just for sake of it, a "spherical cow" of MVC will give you little understanding of its real purpose and advantages. So I challenge you to rewrite your site from Wordpress to your own framework. It will be a very good real experience. Armed with it, you will come up with a series of great articles that will be a great value for the readers. As you can see, almost everyone is doing something like that. But very few end up with the continuous support and upgrade for a live site based on the educational framework, and such an experience will be truly unique. Practice makes perfect they say. But in our case it's more - practice makes a real thing from a mere toy, which could be nice but quite useless. Now to some feedback. - my special disappointment is your database class which you modelled after the culttt's article, because their class is one of certain reasons why I wrote [Your first database wrapper's childhood diseases](https://phpdelusions.net/pdo/common_mistakes) article. The suggestion remains: your real life framework will benefit from fixing issues in your database class. There are several critical problems that will become apparent on the real live site - a notorious "too many connections" error for example. - your view is a part of a controller. That tightly couples them, changing your templating system for another one will be extremely difficult. a controller should create a new instance of the view class instead. - tight coupling is a plague for your site in general. Take for example the way you are calling the action in the router. `$controller = new $controller($session, $userControl, $list, $comment);`. Seriously? What if some controller don't need comments? What if you will need another entity in the controller - a banner for example? The list of arguments will grow? You could use a configuration file to define services used by each controller. Actually, this list could be rather endless, but the main idea is that you judge, your mentor, your code reviewer should be the live experience, not some random passer-by. I insist on putting your framework to a real action, may be not to back your main site but not a completely toy useless site as well. Some service for webmasters or something. A forum! Use your framework to add a forum for your site. It will give you much more useful and solid feedback than any code review. 
How one finds such deleted posts? 
Next week we will learn how to write SOAP envelopes by hand, and how to create a zip file using notepad. Because knowing the transport details matters, children! also: escaping data is so old school.
Codeiginiter 4 release date supposed to be the end of 2017. Now you understand why users downvoted you.
This is horrible. Ok, I can stand a blogspam with 10000s iteration of "Best PHP framework" which is pointless but at least harmless as well. But such stuff is a true disaster. I wish ypu never had a site to promote at *such* a cost. 
Ok explain to me how it’s not better for beginners understanding how JSON is structured?
I come in to work on Monday morning and leaf through the posts fed through to the PHP Chat slack group while the caffeine kicks in :)
Awesome! 
ooh boy that's a lot of people, i don't wanna bother 
it is better for beginners to understand how JSON is structured. the problem is that *you* have no idea on that and your article being a bloody disservice. Your idea on the json structure is the idea of a proud 5-year-old toy plane owner on the aviation engineering. You don't even realise that your approach is a HUGE no-no, a textbook mistake. A red flag on the interview. Please delete your article and write in big red letters: under no circumstances you must avoid the built-in formatting function. That's all you can do to salvage your horrible advise. 
I see. what a fruitful occupation. keep going
Take a look at Numbase: [https://github.com/thunderer/Numbase](https://github.com/thunderer/Numbase)
1) JS is useful on the frontend, and for *some* tasks on the backend. But most of the stuff PHP is good at Node is bad at, and visa versa. (Although PHP seems to be catching up...) In general I find the JS ecosystem a bit tiring to work with (too much churn in the tooling), but Typescript is quite nice; maybe in another 5-10 years JS land will mature enough to stop being so painful to try and use. In any case, in general I'd rather be working with PHP than JS, but it depends on what the task is. 2) Yes. 3) No. Although frankly, I wouldn't really care if it was. I know a lot of languages; I picked PHP up in a couple of weeks when I took my current role. If my next job needs something else, I'll pick it up too.
Is there a reason why this depends on `php:^7.2`?
Not really relatable. 
React and Vue are frameworks for building a UI/frontend. If you need something more reactive than a plain vanilla HTML form, and something more maintainable than Yet Another jQuery Spaghetti Monolith, then yeah, go with React/Vue/whatever. That's how we do frontend apps on the web (and with electron and react native, frequently on the desktop and on mobile too). Whether React (or Vue, or Angular, or whatever) is "garbage" is...a hard question to answer. They're not *amazing*, but they're the best we have right now at the things they're good at. You aren't going to build a webmail client in Java or ASP.net or whatever; that ship has sailed. :) Express/Koa/Hapi/whatever are *horrible* frameworks for building a serious backend application. They're acceptable for microservices or acting as the terminator for a bunch of websockets I guess, but even there, there, there are alternatives. Are they "garbage"? Eh...depends. If you know JS, and want to throw together a lightweight REST API for your app, they're not terrible? I guess? &gt; do you think that JS with React for creating apps or webdev is superior to what php offer or Java / C# ??? That's like asking if a second hand tractor is superior to a prius. I wouldn't want to plow a field in a prius, and I wouldn't want to commute on a tractor. If your're wondering if the answer is React or C#, you're asking the wrong question. :)
&gt; I just can't stand the visuals. This is how my PhpStorm looks: https://raw.githubusercontent.com/brendt/photon-light/master/preview.png Is this really that bad?
A mutable VO still doesn't have any identity.
"Study to understand not to remember" nice ! and true ! 
Have you read the description? =) Library that you gave encodes **only numbers**, when BaseN main purpose to encode **strings**!
With blackjack and hookers!
Can we have a lunar lander too?
It depends on iterable at some points in the code, to reduce the code that had to be written. With a few modifications, it can probably broaden support to 7.1. How wide the PHP version support will become is still up for debate. Getting the initial version out there, to get feedback and battle harden the tool was the main priority.
I agree that it works more as a foundation that as a full-blown coding standard (I personally use the `@Symfony` and `@Symfony:risky` levels plus a few more extra checks on `php-cs-fixer`), but the thing about a foundation is that you build upon it, you don't contradict it.
Well, I believe words like "evolve it" and "refine it" are more suited to the process than "contradict it". PSR-2 was built based on common sense, and stats from GitHub repos and the like. It never claimed to be absolute, exhaustive, or always correct.
thank you, I'll keep that in mind
While I love DDD, it's not for every project and jesus it can be tediuos sometimes. 
What is your dev environment and machine like?
Any particular difference/advantage to https://github.com/maglnet/ComposerRequireChecker ? This package seems younger than the one we've built there, wondering if the projects differ at all in intent :-)
There's no less magic involved if we went with an interface. How these methods affect behaviour is a bit magical, but not how they exist. By making them magic methods it's as if all objects already have them by default (which they kind of do internally). It might *feel* less magic because there aren't magic methods, but they'd still be overloading operators and affect other functions, which is the same amount of magic. I imagine that PHP will use magic methods to implement operator overloading in the future. I can't imagine having an interface for each one, or what that would even achieve. Personal opinions. :) 
Such a great tip. I'll come drop by the discord. 
I wouldn't expect too much of CodeIgniter. There's a reason nobody uses it anymore.
&gt; not a substitute for university education. Which is just as useless for a php developer.
Certification means absolutely nothing. Experience and the ability to demonstrate your skills are far more valuable. 
Join to slack symfony-dev!
Any discussion I ever joined about clean code, design principles, etc. is at least as controversial as those about language and FAR beyond silly (eg. where to put opening curly brackets)
Ooh, okay, thanks! I didn’t know that was an option.
I was thinking about that. In reality, if I were to have an e-commerce platform, I’d want to use the most up to date and trustable framework because money and credit cards terrify me. And yeah, it’s fun to make one of these, but most likely not super practical.
Woa I screw up that one. I actually mean the opposite: if you have an immutable VO, you can skip some checks like are 2 VOs equivalent by checking if it's actually the same instance.
Ooh, cool, I’ll check it out! You’re like the 20th person to suggest I implement some sort of bitcoin on the site, so I should really get around to it, haha.
That you shouldn't mess with PHP
Yes, `$vo1 === $vo2` implies `$vo1-&gt;equals($vo2)`; but currently not the other way around - unfortunately.
Hey man, I've noticed all your comments seem to be antagonistic and that can sometimes be because the personal circumstances in your life are themselves negative. Maybe it's something you haven't noticed before, maybe you are aware and just feel down for some reason and see reddit as an escape to feel better by talking this way. In any case, remember that you are loved by at least some of those around you, and through more constructive social interactions, you too will in no doubt feel the positivity in your life. Be well.
As start: - https://www.phptherightway.com/ - git &amp; git-flow - docker - composer - linting stuff: phpcs / phpmd / ... - testing: phpunit / ... - what are ticketsystem is, like redmine as example - inline documentation with docblocks @see phpdoc - how to write technical documentation Books: - Pragmatic Programmer - Clean Coder
&gt;I read people's post histories This is how 12 you're being.
Fool
This is a marketing title. That what it takes to be a junior is always different from person to person, but in general "junior" is considered as the beginner title. That means if you are new to PHP, if you have your first job/experience etc. you probally gonna start as junior. From there your carrier starts.. you learn and learn and learn and git gut until you reach a point where you can change your ~~class~~ marketing title to either professional/senior/freelancer etc. each one with different skills, specs and builds to go. There are probally Top Tier guides to each ~~class~~ marketing title, Best in Slot, gearing choice etc. 
Edit your post, probably bad link paste :)
I suggest you to follow [this tutorial](https://github.com/PatrickLouys/no-framework-tutorial). It's very helpful! But nice try for a first attempt :) 
&gt; OK, but please don't use it It made my day.
Just joined!
Or ignore this terrible advice.
I've been developing for 20 years and I don't know everything on that list.
Link expired or invalid
I want to be your friend :D
What about a remote Webdev community? ;) nevertheless i‘d happily join. 
That's a nice resource...but he's using [Mustache](https://github.com/bobthecow/mustache.php) for templating, [FastRoute](https://github.com/nikic/FastRoute) for routing, [whoops](https://github.com/filp/whoops) for error handling, as well as something called [Auryn](https://github.com/rdlowrey/Auryn). My aim was to write all those things myself. 
Slightly off topic but what does discord bring to the table that slack doesn’t? I wouldn’t use “premium” for either so those features don’t interest me. My biggest gripe with slack is that every new “team” has its own settings. I need to setup my preferred settings every time, down to what my username appears as. I know discord has servers that are similar to slack teams but is my discord profile that same across all servers? The other issue with slack is that if a person I know is in 2 slack teams, I have 2 direct messages with them, one for each team. This drives me insane! I have to flip through multiple teams and multiple DM’s to find a conversation that was had. I’d like to join this group but not sure I want to download discord as the rest of my entourage currently uses slack... Has anyone tried Atlassians new slack clone?
How about Scalar Objects? https://github.com/nikic/scalar_objects
Well I would say that at least git is a must for 10 years already, and composer for 5. 
I would say that some items are questionable. Some parts are much better to be learned from within the working environment. I would shorten it to just - https://www.phptherightway.com/ - basic git - basic composer then to call yourself a junior developer and take the fultime job to learn the rest. 
What do you mean? CRQRS is terrible when you need to change data structure due the need to maintain ability to replay old events
Agreed
Agreed
You're not wrong but it's never really caused me any issues. Probably since PHP is my primary language I just do things automatically that I knew I need to do and don't see that as separate.
When looking for tooling that would achieve this, I could not find any package to do this. Perhaps we can help one another improving the search results for searches that are targeting this kind of package. The package you are pointing out does what I was hoping to achieve with the Dependency Guard package, although it does seem to go about it in a different way. Dependency Guard uses the PHP parser from Nikita to find all named code symbols and thus restricts itself to classes, interfaces and traits. Dependency Guard is using a blacklist approach to symbols that will be analyzed, packages that should cause violations and it automatically ignores violations for packages listed in the "suggest" links. Dependency Guard does not concern itself with differentiating between PHP extensions, as the Composer Require Checker appears to be doing, since they can be listed in the configuration. TL;DR: Intent is mostly the same
I'm a huge fan of DDD, personally. I haven't had much use for CQRS though.
[Link for the lazy.](https://stefanoalletti.wordpress.com/2018/07/02/symfony-docker-behat-browserstack-testing-your-app-like-a-boss)
You okay, man?
Discord offers: * Per-server custom emojis (if you are into that) * Dedicated voice channels * Dark theme * Unified profile (no new "team" settings per server), but can customize per server if you want * Activity awareness (shows what game you are playing, app you are in if you want, etc.) * (Opinion) Better mobile app * (Opinion) Better UI * (Opinion) Better link embedding 
I would still put in linting. Even if you learn something different from what your first job uses you still have a general idea of what it is and what it does.
Do you have a WhatsApp group? Or telegram?
How to spell "Developer" would be a good start.
You can always take those libraries as an example to write your own ones ;)
&gt; It costs $20/month You're doing something wrong. I'm currently paying the equivalent of $12.42 a month($149 a year) for their All Products Pack which includes: AppCode, CLion, DataGrip, dotCover, dotMemory, dotTrace, GoLand, IntelliJ IDEA Ultimate, PhpStorm, PyCharm, ReSharper, ReSharper C++, Rider, RubyMine, WebStorm.
I'm not saying a good developer shouldn't know linting; I'm saying if you throw that in you should throw in CI/CD, Testing, containers, on and on. The qualifications to be a "Jr" have climbed to such an insane height today that I don't feel any self taught or new person can get a break in any language. So the question becomes how do you define a "Jr. Developer"; is it someone a few years away from Sr or is it someone new to development?
Linting to DevOps is a huge jump. You just install it on your system and tell your IDE where to find it. Done and done. I don't disagree the other things you said. Just that linting seems pretty low level. It's just to make sure you stick to a standard.
I have only tested extensions available in my repository, so nearly all of the pecl ones, and a few from github (requested by users). This one is not available on pecl, and don't have any released version. BTW, build + test ok with 7.3
Slack has the emoji support, I thought. Bit hidden however.
Incredibly reflective.
english is not my main language , in french developer = développeur 
Colt is a paid instructor for major companies. And has millions of registered students. Well I do agree a lot of courses on udemy are complete shit. His courses are very robust and are much different. They have full-time teaching assistants and an active online community. I've successfully used his courses to train up nearly a dozen Developers from scratch at my office. These were people working in the support department with very little to no technical background and most were able to be junior front developers Within five or six months using this as the foundational knowledge base that they then built on as they did work. We've had several people who started out with these courses that are now legitimate Full Stack Developers working on hosted platforms for our clients. you should bother to review who he is before making a comment like that. He applies the Pareto Principle very well and teaches a strong foundation will basics and how to create a solid end product.
I see, thx for the info. There was a plan to bring this extension to PECL, the creator Nikita Popov wasnt interested in doing this himself so he appeared to be looking for someone else to do it. Would be nice if it will happen. 
Those standards are contextual and, to someone new to the trade, are meaningless until they are given a standard to use. Without a standard, just using Phplint is meaningless and has nothing to "learn". That's why I feel a Jr shouldn't need to learn it; let them learn it when there is a standard to follow. That's just my perspective tho ;).
Mine looks like this: [Pic](https://i.imgur.com/aKD8mCf.png) Note: That's just random code taken from [Symfony Documentation](https://symfony.com/doc/current/controller.html) I think it looks perfectly fine.
Ive been doing PHP for a little over a year working for my University. A couple months ago I was tasked with rewriting the website using Laravel instead of out own custom framework we were using. If there are any Laravel users here I would love to chat sometime and get some advice. 
Hi! I used this tecnique for the same pourpose, I wanted a class impossible to instantiate outside of specific class, I resolved the problem so: [https://github.com/linna/filter/blob/master/src/Filter.php#L92](https://github.com/linna/filter/blob/master/src/Filter.php#L92) Abstracting the class is a very good idea, permit to write less code inside the method that instantiates :)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [linna/filter/.../**Filter.php#L92** (master → 5f9fd01)](https://github.com/linna/filter/blob/5f9fd01cb572ae74fe2e342515eb04c5022343dd/src/Filter.php#L92) ---- 
1. JS is the flavor of the week; after its recent rise levels out, security holes will start to creep into sight. At which point, the main argument against PHP will become null. For Frontend, it's great and Vue is an example of it heading in the right direction. 2. Python, PHP, JS, C# 3. No but I like that it's hated so much; makes me feel like the member of a secret organization.
Sorry. I just assumed it would be PSR-based or it would come up in their other teachings. 
Transactions don't have to be within the framework, just records of them. Using a service allows you to push the security concerns to the processor which, honestly, has more money to keep up to spec.
Yeah I used that tutorial and swapped to AltoRouter
Holy comments, batman
I like comments as I code drunk quite a bit
Your take on an advanced PHP programmer?
Been doing PHP for 2 years. Would be sweet to talk to someone with more experience than myself!
I really enjoy php dev can I join? 
I would also love to make a new feature 
Hey man I can help you with that if you wanted to work together 
if you're changing the read model its useful, but if its the events you're updating then it can be a pain to upcast them etc.
Which library are you using for CQRS? Also in combination with event sourcing?
I've updated this now, please see: https://wiki.php.net/rfc/object-comparison#example
I think this sort of tick off tools list fundamentally misses the point of how to be a good developer. Mine would be more, for a junior developer * Can formulate algorithmic solutions for simple to moderately complex problems * Understands the process of abstraction, encapsulation and general OOPS and MVC principals * Can write understandable, well structured code, documented as needed but not over documented * Understands the importance of testing code as you develop it * Understands the concept of source control * Can work with other developers and if necessary, customers * Has a working knowledge of how to approach efficiently debugging code * Knows where to find the documentation and how to use it * Knows when to ask for help, and when not to Reasons being I'm not overly concerned as to if junior developer knows system X or tool Y, what I'm more interested in is have to got to the point where they can be given a moderately complex specification and they can formulate and deliver clean, efficient, code back that can be given to another developer who can then understand and build on it. 
1. I love how the web is evolving. I think building PWA's is awesome and at the moment I mostly use Laravel to build the api, and either Vue or React for the front-end so I don't feel the heat... not yet anyway ;) 2. I mostly write php (Laravel) but I do occasionally use Java and Golang for projects that need it. 3. No, not for now at least. There have always been people bashing on PHP and they will always bash on it. 
(ditto the working from home, and general long hours .... I've joined discord; not tried it before, but it looks slack like :-) )
Its my file.xml &lt;ServerStats&gt; &lt;Name&gt;Unknown&lt;/Name&gt; &lt;ModuleName&gt;Mercenaries&lt;/ModuleName&gt; &lt;MultiplayerVersionNo&gt;1157&lt;/MultiplayerVersionNo&gt; &lt;ModuleVersionNo&gt;1044&lt;/ModuleVersionNo&gt;
Show us code..
There is contect of my file.xml [https://pastebin.com/j1KRqFSn](https://pastebin.com/j1KRqFSn) I want display it on my php/html page.I dont get it how to do it. This xml file is stored on web hosting.
I'm 17 , well getting started there then going for advanced + laravel
You should research SimpleXML and/or Google how to use xml data in Php 
Using SimpleXML can be really painful. A little trick I picked up a while ago is to json\_encode/json\_decode the SimpleXML object like this: [https://3v4l.org/rVudj](https://3v4l.org/rVudj). Much easier.
Awesome. Now if only APCu didn't explode on FastCGI
Tis a valid point! :) 
...so it doesn't take method usages into account? Isn't that a pretty big flaw?
header ("Content-Type:text/xml");
How does it explode?
I don’t think he’s asking how to parse, he just wants &lt;code&gt; tags, no ? 
Xml file which I want use is autoupdated by game server.its no always The same. I want use data from that xml to use on my website.
What I realize is that many people here do not even read the question. I did not ask anyone to give me SECURITY related information, advices etc. My question is not about security at all. I just needed to know how to do what I am trying to do; not how to secure my webpage from hackers (who, by the way, will never even be able to get to it). 
Windows Server, IIS FastCGI / PHP 7.2.3 / php_apcu.dll 7.2.1 Seems to be an issue with parallel requests in a FastCGI environment as it doesn't seem to occur when only running a single php-cgi.exe instance. Haven't yet tried it using PHP-FPM. Fault bucket , type 0 Event Name: APPCRASH Response: Not available Cab Id: 0 Problem signature: P1: php-cgi.exe P2: 7.2.3.0 P3: 5a96430e P4: php_apcu.dll P5: 7.2.1.0 P6: 5a867b77 P7: c0000005 P8: 0000000000002880
In my experience, Slack is more workspace focused and Discord is more user-focused. Examples: * Direct Messages to other users are global to Discord, not per server. * One login grants access to all servers: you don't need to log into each server. * User preferences are global first, but customizable (e.g: color scheme is global, notification settings have defaults that can be configured per-server and per-channel. * Apps can be given access to your user account, and have access to the same things you have as a user: as opposed to just being per-workspace. There's probably more, but Discord seems to be easier to use for an individual, while Slack seems to be easier to manage for an organization.
I took another look through and found https://github.com/krakjoe/apcu/issues/67 Apparently, the shared memory model just isn't compatible with most FastCGI implementations. 
Always down for more dev friends. I don’t have skype or discord, I mostly just use twitter and slack. 
They don’t expect you to pick it up in a few weeks fresh out of uni. I don’t recommend creating an unhealthy work/personal life balance by trying to cram. They hired you with the expectation than you’d be fresh.
I have a lot of imposter syndrome but I’m very excited to learn and grow. The senior developer is very nice. He told me not worry much and just focus on learning more. I just wanna learn more and contribute but I’m just afraid of getting fired.
Hit me um, always up for a late night talk 24/7 at my pc
https://discord.gg/9x4fa44 - Permo Link
It really makes no difference if he’s a paid instructor. Nor does his reviews on udemy. He’s not a recognised expert in web development at all, just another guy who teaches people skills. We may as well be saying that if you’ve watched Jeffrey Way’s laracasts you are a certified laravel developer. As I’ve said here already, real experience is far far more worthy than “ I did a course on udemy with a well known developer”. I’d be very wary of any employers using paper over proof in their hiring decisions. That’s how you end up hiring some junior developer who only knows how to skin a wordpress site into a real front end developer role. 
I’m a php newb that could use a friend!
Edit: So, it seems. Just looking for a few friends didnt disappoint, we got 100s :D If your still looking for my skype: nitrophysix no matter what skill level you are OR discord: [https://discord.gg/9x4fa44](https://discord.gg/9x4fa44)
These are the type of points that would make me want to switch over to discord! Thanks! 
[You can learn in 10 years](http://norvig.com/21-days.html) ;) Seriously, though. If you've not yet read that essay, I highly recommend it. You can prepare yourself, learn PHP's syntax, study the books, etc, but the hours, days, or weeks you spend doing that won't come close to the experience you'll get once you're actually on the job working. Once you have set objectives, you'll learn what you need to accomplish the task(s). If your lead/senior and the rest of the team is comprised of professional people, they should expect you to have a learning curve and help steer you in the right direction. If I were you I would take some deep breaths, brush up on what you can, and pat yourself on the back for landing your first job. Congrats!
This is great. Thanks a lot of this 
I think interfaces are just as magic. If you want your class to be serializable to JSON, right now, you have to implement the `JsonSerializable` interface, which specifies you write a `::jsonSerialize()` method, and then some code will magically know to call it when appropriate. Would things be meaningfully different if instead there was a magic `::__toJson()` method, and instead of checking to see if your class implements `JsonSerializable` and then calling `::jsonSerialize()`, instead a check is make to see if your class has overridden `__toJson()`? I don't think so; both ways are just a magic incantation to reach the same end result. For me, I think interfaces make more sense if you're adding support you otherwise don't have, and overriding a magic method makes more sense for something that's always present. I *don't* think changing `::__toString()` to some sort of `StringifyInterface` makes sense; every PHP object needs to be convertable to a string, so everything has an implicit, inherent support for that, and we just want a way to override it. Writing `implements StringifyInterface` on some classes implies that the ones without it can't be converted to a string, which is untrue. Conversely, `::__toJson()` doesn't really make sense, because it's not a basic capability of PHP. In short, I think both are magic, and it could work either way, but a `Comparable` interface feels semantically wrong.
There isn't anything specific you can do that will make you learn the language to a highly productive level in only a few months if you're a junior just starting out. If you're senior-level coming from another language, then that's another story. If you want to learn a language, then write the most ambitious piece of software you have a desire to write using only the core without third-party frameworks or libraries. You'll quickly find problems in your thinking, oddities with the language the will make you scream, understand how much you actually leverage from others, and you'll learn at an exceptional rate. Specifically for php though, if you can't think of anything you'd want to do then a good starting point is to just build a blog with its own application stack. Treat your project like it's infected though so don't formally release it for people to actually use, but do ask for feedback. Tinker around with everything and break your stuff. Maybe try to build a system that requires a database, but without actually using a database; think of your approach and how you'd do that then figure out if you were correct by experimenting.
Nice to see ds on there. Thanks for this Remi :) 
When ever i wanted to learn a new skill in Development i always start building an small scale app which could be anything. Which ever learning i am follow (youtube or blog or any course or book or anything) just rather then copy and paste the code i always type whole code by myself which helps me to remember and get used to with the syntax and help me to remember function name and etc. I hope it helps.
As I've said the skills developed plenty of my staff. It's a great way to learn. The foundation built is enough to get a job. You can then start building other skills on their own. It works. 
Learn OOP and some MVC frameworks like zendframework/symfony or even some lightweight ones
&gt;If this was Python, they'd tell you it's not Pythonesque. Probably not - python does in fact support exactly that syntax 10 &gt; 5 &lt; 15 &lt; 60 &gt;= 60 will evaluate to True in python for exactly the reason you'd expect. It makes enough sense in python which 1) is often used for mathematical analysis 2) supports custom implementations of ordering.
I learned a lot playing with Wordpress.
I have trained plenty of newbies that come to our company. The second that they decided they knew more and did not have to learn anything was the day they were fired. Remain positive and be smart enough to do research. Your instructors should give you enough to jump start you without all of the answers. The rest you can research. You can expect a few months before you can contribute and even a year or two before you take over a task and that is ok. Ask questions and be afraid of no man and you will be fine :)
Thanks for the info I really appreciate it
It's weird that it links to gearman 2.0.4 on https://pecl.php.net/package/gearman There is an issue for over 2 years to get an up to date version on PECL the version there is from 2013 :) 
Like /u/nobrandheroes said, it seems to be a pretty healthy market. There are so many opportunities that it's hard to steal people away due to their job security/happiness. The only reason I'm browsing through this sub is trying to find possible recommendations for PHP app devs for my company, and it's hard to find many that aren't already happy where they are. 
You might be interested in [How Developers Stop Learning: Rise of the Expert Beginner](https://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/) by [Erik Dietrich](https://twitter.com/daedtech). 
Limiting to method usages would leave out a number of valid use cases where only the class constant of a symbol is used. Best practices aside, if I have a factory that holds an array with types as key and class names as values, giving me the opportunity to create an instance for a given type, there would be no explicit method usage on the registered class, but your code would indeed depend on it.
I really do invite you to prove how I'm wrong about that, since it can only help to improve the quality of the tool :)
Laravel
Is red or blue a better colour?
green lol
For gearman you have to use the pseudo-official fork on https://github.com/wcgallego/pecl-gearman
red i guess xP
Just use any framework 
No. Red.
Ok use CakePHP
ty baby &lt;3
That was a joke. Use Laravel or Slim, or Symfony, or Zend. 
&gt;That was a joke. Use Laravel or Slim, or Symfony, or Zend. I had seen something from CakePhp, is it bad?
It's old 
Oh, thx for support &lt;3 
Why not Symfony 4.x? ^__^ http://symfony.com/doc/current/quick_tour/the_big_picture.html
Have experience with both. I would recommend slim 3 from personal experience, because its really *slim* and what it does is it lets you understand how frameworks work easier. Laravel is magic everywhere you look, you will be able to write applications fast, but you wont know how it works.
Test them. Because everyone gonna defend his framework. For me it's Laravel : great community, simple and fast to code with.
Ah Windows. Yes, apcu doesn't seem to work properly on Windows :/
Go read about interpolation, then compare the "string" for the dodgy db insert to the 'string' for the even worse shell exec command. If you are not thinking about security in this day and age, you should not be coding. Frankly, if you can't see the problem with that string and why it isn't working, you need to go back to the books before you code any more.
I dont understand what you're asking here exactly. Offhand the code looks ok but I wasnt looking for syntax errors. 
You probably want to form the question properly (there is no question currently), and you have better chance if you post it in [/r/PHPhelp/](https://www.reddit.com/r/PHPhelp/) 
Given that when one navigates to the AvoRed demo site a popup appears that I cannot get rid of (demanding basically that I share AvoRed with the world), no I will not use AvoRed.
I recently started an app in Laravel having never touched it before. It's impressive how much stuff is available without much work; you'll be able to get an app up and running very quickly. I've never worked with Slim, but I've just had a look through the docs. It's a lot... slimmer than Laravel; it just gives you request handling and routing out of the box. I know if I started with Slim I'd spend ages mucking around with ways to handle db upgrades, CRUD, user auth, and all the other things every app needs. By providing defaults and conventions, Laravel encouraged me to ignore those and get on with the actual application functionality. If I had used Slim I'd still be working all that out, but my application components would be more independent and easier to swap out or tweak if the need ever arises. Both of these are valuable in different contexts and even at different points in the life of your application.
&gt; every PHP object needs to be convertable to a string Why is that ? &gt; I think interfaces are just as magic. For me its the other way around. 
&gt; By making them magic methods it's as if all objects already have them by default Is it *required* for *all* objects to be comparable ?
To me, it mostly depends on the nature of the work. Is it a short term contracting job? Pick a good "everything-and-the-kitchen-sink" framework like Laravel or Symfony that focuses on Rapid Application Development. In-house project with long-time maintenance? Pick a small one that one gives you routing and dependency injection (like Slim) and does not get in the middle and allows you to understand how everything works all the way down. Your programming expertise also matters. The less experience you have, the most likely you are to shoot yourself in the foot with the small frameworks that practically offer you a blank canvas (as opposed to the formers, that usually come with a codex of guides and "good practices" to do almost anything).
I have not yet had a case where I needed to determine if two variables held the same object, property wise - I've had cases where I had to determine if two instances of a class held the same data, which was usually determined by a single property (`id` for example, or a `uuid` or similar), in that case the class usually just had a method like: class Stuff { public $id; // say auto id from a database public function equals(Stuff $obj): int { if ($this-&gt;id === $obj-&gt;id) { return 0; } return $this-&gt;id &lt; $obj-&gt;id ? -1 : 1; } } Naturally, this more or less only works on one property without becoming complicated to implement.
We have so many interfaces that implement logic or indicate something (Traversable), ArrayAccess, Iterator, ArrayIterator, Countable, Serializable. http://php.net/manual/en/reserved.interfaces.php Why not `Comparable`?
Google, I presume.
latest version 3.6.6 was released 8 days ago and its already old to you?
Don't fret too much, if you sit side by side with a senior dev you are golden.
Does it really hold up against the others? Actually don't know. 
If you want to compare all the data, then it could be done by comparing serializations of the two objects. You have full control of how an object is serialized (as JSON) so can choose what is important (e.g. IDs), what can be ignored (e.g. caches, the content of injected objects, but maybe keep their ID) and the order in which everything is serialized.
New PHP versions are not actually released until XDebug is compatible with them :D
Where in the UK are you? I'm also in the UK.
Correct, but I've personally never had a use for comparing two objects that way, only as exemplified above.
cake is like any other framework its a toolset some will say its great some will say its not, it depends how you feel with it, for me its what i need and i use around 80-90&amp;#37; of what it has to offer with each project. I love its ORM, integration tests are mostly bunch of $this-&gt;get and $this-&gt;post, Chronos for time manipulation, phinx for migrations, it had security audit not long ago - [https://wiki.mozilla.org/MOSS/Secure\_Open\_Source/Completed#CakePHP](https://wiki.mozilla.org/MOSS/Secure_Open_Source/Completed#CakePHP) But as i said it really depends on you.
Not overly knowledgeable of php, but I’m fairly sure you can echo a variable like that, you have to do something like echo ‘hello ‘ .$varname. ‘;
&gt; I'm definitely not in favor of magic methods simply because they feel like operator overloading Using an interface here would also overload the operators, which is an unavoidable side-effect when you provide the ability to define ordering and equality. I also don't agree with your statement that if we overload some operators we have to overload all of them - why not only comparison operators? Even if just for now?
Unfortunately yes, because they have been since PHP 5. 
Our tool does the following: * Using interactive questions, determines whether to create a new major, minor or patch version * If you provide a \`--pre-release\` flag, also asks whether you want to create an alpha, beta or release candidate version * Based on the provided answers and the last Git tag on the current branch, calculates the new version number and creates an annotated Git tag for it * Pushes the tag to the remote and creates a GitHub release, containing a changelog (based on merged pull request titles)
As soon as you're doing something like `$this-&gt;foo-&gt;doSomething()`, you're depending on whatever is stored in `$this-&gt;foo`. Even if you haven't mentioned that class (symbol) explicitly. Maybe this seems a little contrived, but just think about a package the returns an object from another package. If you're calling a method on the returned object, you depend on it. If you don't, then you don't. Do you know what I mean?
 &gt; automatically ignores violations for packages listed in the "suggest" links Same tooling here, although moving to BetterReflection (higher abstraction) for some scenarios. The tooling should be in first place about reducing bugs coming from missing dependencies downstream, as well as fighting the terrible practice of "optional dependencies". Therefore anything that is statically referenced in this set: * interfaces * classes * traits * constants * functions *MUST STRICTLY* be included in the set of symbols available through the `"require"` section of `composer.json` (note: `"require-dev"` does not count). &gt; automatically ignores violations for packages listed in the "suggest" links This is something that I disagree with at design level: if the dependency is not there, the exit code should be non-zero. &gt; Dependency Guard does not concern itself with differentiating between PHP extensions We're trying to get that done with stubs, but it's tricky. Indeed, if your package (for example) relies on `"ext-intl"` and you didn't declare it, you are going to cause consumers some production pain. This is obviously my strong opinion, but what's the point of such a strict tool if it's not enforcing the invariants it's supposed to guarantee? :-)
honest question: why would you not set these things up using a CI server and a suitable workflow with pipelines and have it all there?
I'm not saying we _have_ to allow overloading all operators if we allow _some_. I'm saying that implementing an interface to make it sortable/comparable makes sense from my perspective more so than using magic methods. Java, Ruby, .NET, and Golang uses interfaces for sorting (and thus comparing) objects/arrays/maps, etc.; Python uses magic methods and this RFC proposes PHP to do so as well. I personally like the interface way better, as it enables you to actually _tell_ whether an object can be compared to another object of the same class. However, I'm just expressing my opinion here - I don't really care either way, as I have not yet had many cases where I needed to sort/compare objects on more than one property.
Did you hear about [RMT](https://github.com/liip/RMT)?
Thanks guys, this is very encouraging 
This project seems inspired by it, it's in the readme
Let me put it like this: if objects in PHP couldn't already by default be compared, I would 100% opt for an interface as well.
Good question - we actually use Travis CI for continuous integration and building release artifacts (as you can see in this repository as well). However we were lacking an automated way to create Git tags for releases and to create meaningful changelogs for the changes introduced in a version. This tool fixes that.
Yes, we did. We used it for a while, and even [created a changelog formatter for it](https://github.com/leviy/rmt-changelog-formatter), but in the end it turned out to be difficult to extend to suit our workflow. Which is why we created our own tool as an alternative.
Problem I've seen with telling people to pick a small one that doesn't get in the middle of everything is that if they are having to ask what framework to use, they most likely don't know how to code and organize that middle. At least the larger frameworks provide a unified structure for them to follow.
As someone who has to use it every day, its bloody awful. It's just a very dull framework, with no logic to how it works at all. Cake 3 is tons better than Cake 2, but still just feels like a slow, old bag of crap compared to Symfony and Laravel.
Nope, wouldnt touch it given the god awful title of this thread, and the misjudged idea to break your own demo with a broken english popup telling me to "Please Share it to the World".
Generics.
Here is one that I doubt if anyone has ever proposed before. Probably for good reasons. Make the new operator service container aware. On stackoverflow, I often see questions where someone has configured a service: MyService: $dep1: 'whatever' $dep2: 'something else' They then proceed to do: $myService = new MyService(); And of course encounter some sort of invalid argument error because the new operator has no knowledge of the service container. But imagine if you could register a container (like registering an autoloader) and having the above code work. The new operator would check to see if a service was registered for the class and use it if found. There would be many many details to work out but something like this might encourage the adoption of dependency injection. Which might be a good thing. 
Short closures. Async / Await
Now that's interesting.
Concurrensee support.
How much faster than whaever currently used 
How to break down a complex problem into smaller, understandable chunks and from there solve it. How to listen and absorb information from your mentor/superiors. The ability to recognise that your approaches are likely non-standard and suboptimal, but it's okay because you're a beginner. I always had the first one down. Took me years to grasp the second two, and from there my capabilities and prospects flew at lightning speed and haven't stopped.
True, and not even specific to PHP, it applies to any developer. But a university education gives a baseline of what an employer can expect from a candidate. Unfortunately, it is a hard filter in many companies. Meh. Good discussion tho!
I hate these questions, they offer nothing. They derail into pointless conversations andiduots spouting there favourite bullshit without solid facts of why x might be better, it’s all opinions really. There is no dis better then y and y is better then z. It’s allbased on your needs and the projects requirements. Why aren’t these threads deleted on sight?
More than anything ! Along with union types, sum types, a mixed pseudo type, and a compiler option to disallow untyped things.
Be able to generate a pre-compiled binary from a complete project, force the compiler to resolve everything at compile time and crash with meaningful messages in case of any error. In other words: make it statically typed and compiled.
Have you heard of [https://github.com/semantic-release/semantic-release](https://github.com/semantic-release/semantic-release) ? I think it's a great tool
Operator overloading like in C++
This would also unblock several optimisations, such as accessors/function inlining in bytecode, constant inlining as well, etc etc...
Replace -&gt; with a dot, I can't stand anymore typing those infamous -&gt;
anonymous functions without writing the "function" keyword, pretty much like JS arrow functions: just "($some) =&gt; thing($some)"
And suddenly everyone with a concatenated string has a broken app
Arrow functions &lt;?php $someVariableIneedInCallbackFunction = "super-important"; // Sort of verbose $admins = array_filter($roles, function ($role) use ($someVariableIneedInCallbackFunction) { return $role["is_admin"] == $someVariableIneedInCallbackFunction; }); // I wish this was allowed $admins = array_filter($roles, ($role) =&gt; { return $role["is_admin"] == $someVariableIneedInCallbackFunction; }); 
Only in case of name conflict.
goroutines
I was thinking Jenkins.
I don’t follow 
This lib is inspired by [nikic/PHP-Parser](https://github.com/nikic/PHP-Parser) and I compare with it. I have quickly make a comparison. In the benchmark, I try to parse all nikic/PHP-Parser sources with dependencies (1901 .php files) [https://gist.github.com/z7zmey/6572849f51f42aec6f70dccaec2e5139](https://gist.github.com/z7zmey/6572849f51f42aec6f70dccaec2e5139) ||nikic/PHP-Parser|z7zmey/php-parser v0.5.1 GOMAXPROCS=1|z7zmey/php-parser v0.5.1|z7zmey/php-parser dev| |:-|:-|:-|:-|:-| |1|10.7s|2.5s|1.3s|0.8s| |2|9.9s|2.8s|1.3s|1.0s| |3|9.5s|2.4s|1.4s|0.8s| |4|9.0s|2.5s|1.3s|1.2s| |5|9.0s|2.4s|1.5s|0.8s| |6|9.7s|2.5s|1.4s|0.9s| |7|9.9s|2.5s|1.5s|0.8s| |8|10.0s|2.8s|1.3s|0.9s| |9|10.5s|2.4s|1.4s|0.8s| |10|9.6s|2.4s|1.4s|0.8s| |avg|9.78s|2.52s|1.38s|0.88s| ||\-|x 3.88|x 7.08|x 11.11|
I think the Swoole extension, after it matures a bit, will probably keep more people in PHP, and cut down on the insane amount of NodeJS adoption.
Do you just want that or do you want actual closures?
There are a few edge cases which I feel would benefit from being added to the RFC: 1. Currently, == is reflective; $a == $b is the same as $b == $a. This would change that because $a == $b would call the equals method on only $a, or would it be both? What's the case when $a implements the magic method but $b does not? This is even worse for compareTo() as you're potentially creating scenarios where $a &lt; $b AND $b &lt; $a, which could cause internal functions which rely on comparison symmetry (potentially sort()) to loop forever. 2. You don't mention two separate types of object being compared. If $a has a typehint on its -&gt;equals() method, it will throw an error when compared with anything that's not that typehint, which is different behaviour than currently. 3. What happens when $a-&gt;__compareTo($b) == 0 but $a-&gt;__equals($b) is false, does this cause any issues internally? I think the RFC is very clear but there are just quite a few unknowns that I think should be sorted out. Also it might be helpful if you ensure that __compareTo() returns an int, and __equals() returns bool.
Good question. Because we didn't realize that until we we're already past the point of no return.
* Generics * Typed properties * Typed variables * get/set for properties * operator overloading * async/await * moving the return type to where the "function" keyword is as this notation is an odd one * the option to compile into a binary for performance * union types * short closures/arrow functions * "out" parameters (we already sort of have them but it's not a proper feature) * Proper collections, list, dictionary, hashmap etc support in the core * Tuples * warnings/errors replaced by exceptions * proper naming of functions * "object" chaining on scalar/array types to reduce nested function clutter * Enums I probably forgot some...
I want to have native support for things that are used for most of web frameworks: \- Annotations \- Autoloading without composer and "require autoload.php" \- Something like "Dynamic proxies" in Java [https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html](https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html) And only after that things like "Generics" and "Lambdas"
Are there any projects using this? It looks like it might be useful as a run-time scripting for Go-based applications, much like how Lua is used in Redis.
I will definitely have to let your comment sink in for a bit. I do think having "suggest" automatically filter violations is a "design choice" indeed, but I would not want that feature to go away as that adheres to my design philosophy when I create packages. However, perhaps that should be configurable. Regarding extension testing, I found that to be the responsibility of the `check-platform-reqs` command in Composer, but I'll have to look into your package to see if my opinion changes from that. I really appreciate your feedback. You're giving me lots of food for thought.
Currently, it is of the understanding that `$this-&gt;foo` is either given through the constructor, a setter or perhaps constructed on-the-fly, but in all cases, you would have the type of `$this-&gt;foo` defined somewhere and as such its symbol is found. So it is correct you are depending on what is stored in `$this-&gt;foo` and DependencyGuard, or rather, the PHP parser, will detect that.
If you never call a method on `$this-&gt;foo`, you still depend on it, because it needs to be constructed, still.
I'd love a Set data structure that's native, as well as a real array, not the hash map in sheeps clothing. 
Specifically why? What would they do for you, how would they benefit the code base that you work on? Whats wrong with the current way? At least contribute to the "why part"
 im kind of interested whats so awful about it? 
One thing we will never see, but I would love to see is: Fix the `$needle, $haystack`,`$haystack, $needle` specifically when it comes to things like array functions. I wouldn't mind seeing some kind of threading feature, like fibers for example, but most of all, I would love if we fixed some of the built in function names so they were consistent with each other we have a lot of `functionName` and `func_name` and `function_name` through out the core php library. Although I realize this will never be fixed.
DI sure is a userland pattern and it should stay like it. You can basically never see what kind of new attack vectors or deep problems patterns like these bring (class spoofing) and I don't know a single programming language that gives you automatic DI or would even attempt to do it (DI is not only for PHP, DI is a general OO pattern)
Buy yourself a PhpStorm license and don't suffer no more.
this is a very stupid suggestion. You could argue that "replace the . with x" where x is some other notation.
You can't. It takes years of practice. You cannot learn everything about PHP, the good and the bad in 12 hours or less. Regardless of what the web sites say. Build things, break things, get mad at legacy code, rip your hair out, put it back, love PHP, hate PHP and let it fester in your heart until you are a raging alcoholic who goes through AA and then realizes that "hey this language isn't ALL that bad." Or maybe that's javascript oO
I am not sure why this was down voted, I too learned from WP, my first job was working on a job board and I knew nothing of PHP so I played with WP, is it the best way to learn, no. But at the time we were working with ZF1 before moving to ZF2. I didn't even know how to traverse an associative array before WP.
`-&gt;` comes from C/C++ and is the same as `(*obj).property`. `.` and `-&gt;` have different meanings in C and the meaning for `-&gt;` is what objects represent in PHP (like, PHP objects are always forced to be passed by reference). That basically meant people coming from C/C++ adopt PHP easier and get less confused (in theory, in practice it made no real difference, people just get used to everything) As for using . as the string concatenation operator was a decision made because `'1' + '2'` and `'1' . '2'` do something completely different in PHP and both are valid use-cases (The first results in the integer `3` while the second results in the string `12`)
Does'nt matter, a decent parser will not be confused between the concat operator and the object member access operator.
Sorry, I only work with OSS software, and Eclipse is great.
We still can dream, anything that can improve readability and ease to write can be good. Anyway, I know they won't change it it would break everything that exists, I'm not stupid. Still, this -&gt; operator is stupid.
I never understood this choice. "C does this", "C does that" is a very stupid point, PHP has references, but in real life we tend to use it less and less, like in many other languages. Historically the parser was not able to use the same character for two different things, + was here for addition, so . was chosen for concatenation, then it was not possible to use the dot for object member access, so -&gt; was an easy choice because other languages did the same, so it was not that confusing. Anyhow, as of today, PHP has a real lexer, parser, builds and AST, compiles code, optimises it, etc... It's not a template engine anymore. I hate -&gt;. &gt; As for using . as the string concatenation operator was a decision made because '1' + '2' and '1' . '2' do something completely different in PHP and both are valid use-cases (The first results in the integer 3 while the second results in the string 12) Yes, and that's stupid, any statically typed language that does not do type coercition will handle gracefuly using the same + operator for two different operation, and would not allow you to use strings for an integer addition. This is something PHP is leaning toward with the strict_mode, and something that a lot of people actually want: static typing FTW \o/ 
But specifically, which you never answered, why? Why is `.` better then `-&gt;`
Actual closures would be nice. But as of now, the syntax is the thing that bothers me the most.
&gt; moving the return type to where the "function" keyword is as this notation is an odd one Actually I like the return type behind where it is in PHP, lots of languages do this: Rust, TypeScript, Pascal, at least it's near the parameters instead of being at the other side of the line. Everything else you say I agree level 9000 ! 
So you want a single operator to behave differently based on context. Is there even precedence for this?
All languages that use + for both addition and string concat. Hint: almost every language I know of (believe me, a huge lot).
It's not better, it's just that -&gt; is very boring to type with a french keyboard, almost painful actually.
Just go down the generic list of web projects. Reddit clone. Craigslist clone. YouTube clone. PhpBB clone. WordPress Clone. You'll quit when you get stuck on the first thing because "THIS ALREADY EXISTS WTF"
Already there. Hahaha
So it's a personal thing. Which doesn't really contribute to the over all conversation. I would have prefaced the comment with "personal reason"
You didn't tell us what type of project you are working on, so we don't know which framework to recommend. Are you working on an API, a monolith, something with hundreds of tables and relationships, a heavy frontend, something with queueing or sockets? Hell, PHP might not even be the language you should be using for your project.
https://i.imgur.com/DK1ckG8.png
&gt; It doesn't help when the PHP subreddit is like "OMG WHY! We already have 800 of X" and when some one comes along with a new approach or new solution or even new idea, the first few hours of that thread is hate before the "Why are you people asssholes" comments come and the praise rains in. I get it, its the way our community works. But at the same time, I am discouraged and then not wanting to build anything. Find pain points that are hard to remedy in the existing solutions. For example, I wrote [CipherSweet](https://github.com/paragonie/ciphersweet) because previously you had three options when confronted with the "searchable encryption" use case: 1. Searchable, but deterministic, ciphertexts 2. Randomized, but non-searchable, ciphertexts 3. Compile some insane fully homomorphic encryption project, then write a PHP extension around it, and hope the research project you just pinned your mission-critical/sensitive information to isn't trivially broken. (Except, in the case of homomorphic encryption, [it usually falls to active attackerss](https://paragonie.com/blog/2017/12/assuring-ciphertext-integrity-for-homomorphic-cryptosystems).) Neither of those options were attractive, so I designed a compromise ("blind indexing") and refined it over time until the time came to write a library. Then I wrote it. So far it's gotten roughly zero adoption, but on the plus side, it's received a modest amount of review from my peers with no negative remarks about the design (except "the documentation needs to be more explicit here", which was promptly addressed).
I'm partial to Laravel. It hands you pretty much everything you need out of the box so that you can get started on the actually important part, which is the business logic.
I don't get what a "personal project" is. Why do you want to build one? Do you really want? If not - why bother at all? If yes - well, why does it matter for you, what would people say? Take me. I am not into projects, I am more into articles. So I am writing them because I just can't help it. If i manage to sell it on Reddit properly it's OK. If I screw the title as usual and get around 0 - well, so be it. The article remains, no matter what people on Reddit feel about it. 
I'll add a FAQ section to the RFC to make some of these questions very clear, even when their answers are stated indirectly somewhere in the RFC. To answer them here anyway: &gt; Currently, == is reflective; $a == $b is the same as $b == $a. This would change that because $a == $b would call the equals method on only $a, or would it be both? Attempt `__equals` on `$a`, then on `$b`, then `__compareTo` on `$a`, then on `$b`, then fall back. &gt; This is even worse for compareTo() as you're potentially creating scenarios where $a &lt; $b AND $b &lt; $a, which could cause internal functions which rely on comparison symmetry (potentially sort()) to loop forever. `$a &lt; b` and `$b &lt; $a` is possible if `$a` and `$b` aren't instances of the same class, and it's the responsibility of the implementor to make sure that comparison is transitive. It's either that or we perform two comparisons per comparison, which is not ideal. Instead, we're putting more trust and responsibility on the implementor. &gt; You don't mention two separate types of object being compared. If $a has a typehint on its -&gt;equals() method, it will throw an error when compared with anything that's not that typehint, which is different behaviour than currently. Yes, if there's a typehint on `__equals`, it will fail. It's a nice way to guard against unintended comparison. This is different to current behaviour but doesn't affect existing code or use of `==`. &gt; What happens when $a-&gt;compareTo($b) == 0 but $a-&gt;equals($b) is false, does this cause any issues internally? No issues internally. This is a valid case, for example `Decimal(2.00)` vs `int(2)`, which have equal relative ordering but may not be equal depending on `Decimal` implementation of `__equals`.
A clean, perhaps namespaced, standard library. Maybe object representations of most types. Contract programming.
Addition and concatenation are very similar operations. Property access and concatenation are not. It seems far more effort than the confusion would be worth, especially since any editor / ide other than notepad.exe can autocomplete `-` to `-&gt;` 
A comparison with https://github.com/nikic/php-ast might also be interesting (it's not quite as comparable, as php-ast provides less information than PHP-Parser).
Most comments are always tied to a personal preference, as soon as it's about syntax anyway. Don't burn out, this one thread was a flame, a funny one :)
&gt; Addition and concatenation are very similar operations I wouldn't say that, but why not, I have no idea on how your own brain works. &gt; Property access and concatenation are not. It seems far more effort than the confusion would be worth, I don't think it would bring much confusion, for property access you don't have a $ in both sides :) &gt; especially since any editor / ide other than notepad.exe can autocomplete - to -&gt; Instead of typing "-" then "&gt;" you type "-" then "ctrl"+"space" nice ! Thanks for proposing even more finger exercise ! 
Nottingham:D
In PHPstorm, i type `-` and without any additional effort, it adds `&gt;`. But that is besides the point, you want an argument, i've seen your side, and now i'm done.
You have no fun in you, you just don't know where to stop.
`date('I', strtotime('2018-07-02 07:00:00'));`
&gt; I never understood this choice. "C does this", "C does that" That may be because PHP was initially a HTML template engine for C. Nothing more, nothing less. &gt; I hate -&gt; I'm pretty sure I can find some people that will say "I hate `.`". I don't like `-&gt;` either, but its existence has reasons and changing it is not worth the trouble. Changing this would break a lot of existing applications and would force companies to re-code a lot of their stuff. It would basically lead to people simply switching to other languages because they stop trusting the stability of things/the spec. There is no way to patch this without breaking basically every single existing PHP application that uses any OOP. &gt; something that a lot of people actually want: static typing FTW You have to view this from different perspectives. For the enterprise developer that is working with real CI processes, testing, linting, different environments and proper standards static typing might be a no-brainer (and even then, it isn't), but for the normal hobby-dev building the small company website for his lawyer friend it's rather annoying and he might not even actually need it. His security leak won't be that he passed a string to and int variable. If anything, it rather leads to it simply not throwing errors and him getting a working website (that may or may not sometimes send a mail with an empty title or whatever, but it works) The reason why PHP is so popular is because it's **easy**. It's quick to grasp. You don't have to understand data types in full to get into it. You don't even have to understand anything, you can build working websites by googling snippets together. I know people working 40h jobs as PHP devs and their only ability is to efficiently copy StackOverflow snippets and put them together. And it works. You might see this as a flaw, but for others it's the **power** of PHP. Drop an index.php on your 3€ webspace via FTP, hit F5 and you get a response. Name a single other ecosystem where you can deploy like this. Now, in contrast, imagine PHP would've been statically typed by default. Apart from the fact that it would've been **a lot slower** in earlier versions before 7.0, learning PHP would also be a lot harder and the community wouldn't be as big. Maybe it would've already died and other languages would've succeeded. Look at it. You can still put your untyped, procedural spaghetti index.php on your 3€ webspace and get a really quick and easy entry into the language. Even with PHP7.2, even with static typing implemented. And once you stepped deeper and feel confident enough, you can turn on strict_types, use composer, learn OOP etc. and enter real programming. For the fact that statically typed languages are more stable, better, faster etc., untyped languages are pretty damn popular, don't you think? Think about why that might be the case. Both have advantages and disadvantages. And PHP can simply do both. That's part of its beauty. 
it's easier to just use luajit instead of reimplementing PHP in go.
Scalar Objects. 
I was in the same boat years ago when I was looking for inspiration for something to build to sharpen my skills with a hobby project. Eventually I stopped trying to build something functionally useful, because like you said everything already exists one way or another. I've always been interested in game development, but I wanted to progress with Laravel. So I combined both and now I'm building a free to play text-based browser game instead!
On the other hand, people are always complaining that php never takes the lead in developing new features. So being the first to implement AutoDI might be considered a plus. At the very least it would give the haters lots and lots of new articles to write.
&gt; but for the normal hobby-dev building the small company website for his lawyer friend it's rather annoying and he might not even actually need it. I cannot argue against that, that's only a point of view. I do not agree at all with this statement: learning curve is probably a bit longer with types (but seriously, typing the basis for all languages... If you don't grasp types, don't do programming) but the code you produce is in the end much more comprehensive. No matter if you're big or small, types will help you produce code on which you will loose less time in maintenance, it's good for everyone. &gt; His security leak won't be that he passed a string to and int variable. You never know, simple things can prevent huge errors. Like everyone else, his security leaks will be dramatic. Especially if it leaks data from a lawyer, friend or not. &gt; it rather leads to it simply not throwing errors and him getting a working website Working even if it does not work as expected, silently hiding wrong behaviours, how great. &gt; You don't even have to understand anything, you can build working websites by googling snippets together. Worst idea ever. Don't do that. &gt; I know people working 40h jobs as PHP devs and their only ability is to efficiently copy StackOverflow snippets and put them together. It's so immature and irresponsible, those people should change their jobs to something they actually understand. It's self-degrading, I'm sure they're smart, they should use their brain instead, the world would be a better place. &gt; And it works. It always works until it doesn't. &gt; You might see this as a flaw, but for others it's the power of PHP. The power to write something you don't understand and let it do something that's probably not what you wanted, yay. &gt; Drop an index.php on your 3€ webspace via FTP, hit F5 and you get a response. Anyone can write a hello world. &gt; Apart from the fact that it would've been a lot slower in earlier versions before 7.0 You never know, maybe not, actually. If it had been a constraint from the beginning, the engine probably would have been very different. You can't rewrite the past and just say whatever makes sense to you like that. &gt; learning PHP would also be a lot harder and the community wouldn't be as big Community size is not relevant to quality or speed or performance or anything else, it's nice to have a lot of people around, and I like that, but you never know, maybe it would be the same size today if the language was different. &gt; You can still put your untyped, procedural spaghetti index.php on your 3€ webspace and get a really quick and easy entry into the language. Useless. &gt; Even with PHP7.2, even with static typing implemented Hum. &gt; untyped languages are pretty damn popular PHP is not untyped, JavaScript isn't either, Python either. The 3 do duck-typing, PHP and JavaScript also do type coercition, but internally, everything has a type, it's strongly typed. Just not statically. &gt; And PHP can simply do both. Sad.
``` foreach($iterator as $key =&gt; _){ // or `void` or `null` or whatever ;) } ``` so PHP stops initializing the object when I only want to loop over the keys. add `isBindable` to `Closure`; as now it is impossible to tell if a you can call `bind` on a `Closure` without raising an error, causing a lot of hacks in user-land. Minors: &gt;token_name return `null` or throw exception if the key is unknown and not some magic string value
It really depends on what you want to do. If you want to do it for the experience only, write some open source libraries that you can think of. This can be anything and it can also be existing stuff. Important is, that you wrote it yourself, understand how it works, why it works. Implement testing, linting, a real CI with e.g. travis, understand how build processes work etc. You'll love it for the experience you get and you'll love it for the free PHPStorm license from JetBrains if you're able to build something that some people actually use. If you want to earn money or get "fame" in the community (like, be the next Taylor Otwell or Fabien Potencier), you will go the long way with PHP. Writing an app for a mobile OS of your choice might be faster (for money, and wouldn't be PHP, except for a REST API, if you require any). You can be 99% sure that it already exists or something similar exists. Just *making it better* won't be enough. Look at WordPress, it's a big pile of junk and it still stays the most popular CMS. There are better, cleaner, more stable solutions out there, but there are tons of other factors that make WP the top CMS (size of community, amount of existing plugins/templates, ease of getting into it etc.) So if you want to write a CMS or similar, don't expect it to become popular anytime soon. Maybe in version 3 or 4 you'll have built up a small community already. I am programming in PHP for about 12 years now and I sacrifice a lot of my free time to work on personal projects. I am primarily writing two things, maybe it helps you: 1. Games. I love games. I never finished one, but I wrote hundreds of _half_ games. It's fun, it has no purpose other than learning and (maybe) earning money, if it will turn into a release one day. One day it's an RPG, then it's a soccer manager, then it's a card game, whatever floats your boat. And there can never be enough games out there. 2. Open Source Libraries. I wrote some own ones, some even have their 60-80 stars on GitHub, I contribute to some others. It gives me good experience, I know CI processes, testing etc. well, which helped me greatly when entering new jobs, I get good feedback to improve my code and I get my free PHPStorm license for it. It's also good for the PHP ecosystem, obviously.
My problem with "making a framework" is that sure, you might have some ideas that might improve some framework. But the amount of work to recreate what's already out there, including code, docs, extensibility - but not least the community and plugins already available is a MONUMENTAL task. If anything then maybe find a framework that's close to your preference and start contributing to it, standing on the shoulders of giants might not be a bad thing. If you want a personal project to have some fun, learn something and maybe even make something good then why not look into some service you could provide as a SAAS or similar, make a MVP and see how it goes? There are a lot of places where people could benefit immensely from their data being handled by a "smart" system instead of them typing it down and manually handling all aspects of it (lots of people still do). If you are so inclined you might also hook into the real world with some IOT stuff, Arduinos, rPis or similar.
&gt;I also suppose working 12 hours a day 5 days a week on a project for work doesn't help with the whole "side project time" aspect. When the weekend hits it's like "Lets binge watch netflex and work on my side project next weekend" I get this a lot too. I have so many unfinished personal projects, some spanning years. And of course when I decide to revisit them so much time has passed that I look at it in disgust and decide to refactor. The refactor is finished just in time to lose motivation/interest again and the cycle continues. The only thing I have found to help mitigate that is to just do a small bit at a time. I used to spend late nights and many hours in a single sitting working on the personal project thinking that was the best way to get it done. But I have found that just burns me out quicker. If I approach it from a different perspective of adding features/doing small tasks then I don't burn myself out nearly as quickly. There are times I'm "on a roll" but I force myself to stop and walk away from the computer and go do something else and will continue tomorrow or something.
Uhh what? Personal projects are fun stuff to do on your own. It could be a wall mirror with a display, fetching information from an api that aggregates news feeds, transport time tables, weather.. A plex clone with proper meta data, radio apps. There's lot of possibilities. Is it a requirement to be "considered" a great developer? No, it isn't. But it'll certainly help you learn, and it is certainly possible to earn money on a cool project.
A (http) micro framework is a great task to take on. If you get lost, there's tons of great projects to get inspiration from. Even if one don't "finish" it (trust me, you'll never consider it "finished"). It really helps understanding the internals of other frameworks, provided you conform to PSR-7 and PSR-15 standard (I'd personally add PSR-11 too).
Yeah, I don’t think Auto DI should be one of these features. It leads to more problems than it solves, for sure. Most of the time it’s a good thing to not be a shiny, funny, kinky language with magic features, but rather a stable implementation of existing patterns and standards. Not saying PHP is just that, but it’s on its way there imo. It will lead to it not being only accepted by a bunch of hype programmers, but also by large companies that have a lot of big applications written by a lot of people at once (where PHP is already well placed these days and which shouldn’t change)
C# style getters and setters : https://wiki.php.net/rfc/propertygetsetsyntax
Is this you? https://voat.co/user/SavishSalacious If it is, please get counselling. If it isn't, get a lawyer. For those who don't want to click, that user says, among other delightful things, that [racist epithet for black people] deserve to be enslaved.
&gt; mixed pseudo type why? &gt; compiler option to disallow untyped things. then you will need typed variables/properties and ability to define type of function/array shapes. I would also wanted to see such thing. p.s. psalm already have option "totally typed"
&gt; Whats wrong with the current way? there is basically no "other way" if you have any kind of parametrized polymorphism. And this isn't only collections, this for all containers. Listeners, serializers, normalizers, any method/function which have parametrized type. Current way is just make dummy interface or leave argument untyped.
why?
You see it from the perspective of someone that knows what’s up. But you fail to grasp the perspective other people, which are just starting out with PHP, have. I can go on and give you a million reasons now, you will write „Sad.“ below every single one and be strict to your own opinion anyways. And that’s okay, we all have some strict opinions. Mine is that programming is already complex enough as it is and no matter at what point you are, there is always someone next to you that can see things differently to you and might take other approaches, some of which might be better, more stable, more efficient, take less time etc., some of which might be the opposite. Good for you if you got it all figured out. I know that feeling well. But you having figured it out doesn’t mean it’s suddenly easy for others, too, and I don’t think it only took you a few weeks to get there. There are statically typed languages in the web. A lot of them. None which have have a popularity that comes even close to PHP. Watch how JavaScript, the next dynamically typed language people write their Backend in, gained popularity and while Java, C# etc. have been on the web for a long time, JavaScript is more often used as the language of choice for a web application today. Why is that? Why don’t you write your website in C#? There is Mono.NET, .NET Core, it runs on all platforms, it has the dot for objects just like you love it, it has annotations, generics, async/await. Isn’t it everything you want to have? So why are you here, writing PHP, chatting in a PHP forum? I suggest you try to answer that first and then maybe you’ll understand what I am trying to tell you. This is what you don’t see. You see your own perspective only and you’re limited to that. I am no different, and I am limited to that, too. And yes, I’d love to write my websites in C#, I understand and love all of its advantages over loosely typed, half-procedural code, just like you. We essentially have them same opinion, generally. But I can go and look statistics, I can look at how people next to me learn programming and you can clearly see that dynamically typed languages with just a bit of optional typing (PHP7+, TypeScript) are the most successful thing right now and prior to that it was dynamically typed languages that made up the web, all the time. Ease of entry is probably the most important factor here. And while it sounds horrible to both of us, suppressing errors is basically the reason why many people didn’t give up programming after a week. It starts there and maybe after a few months or years they understand it better and turn error reporting all on.
Yea I was overly pessimistic in my comment. And I very much agree to the "never finished" part.
I'm not home at the moment, but it was something like this : 8.30 wake up, eat, work out, start working from 9.30 or from 10 till 1, lunch 1 hour ( with notes added like ' think, search for more jobs, or basically try to do some info gathering ) , then work till 5 or 6, do some other shit and if your not busy at night work hour or two more. And every sunday I try to do some learning about, watch some tutorials etc, that's what I call investing in myself.
I don't see how ad hominems are relevant to this particular discussion. Everyone has their own lives and their own opinions on things, sometimes controversial. I don't agree with the stuff that's posted there, but I don't have to in order to have a normal discussion about PHP in here. What are you trying to achieve?
It’s entirely relevant. Whoever wrote the above needs to spend a lot of time away from a computer, talking to a professional.
I’m trying to help him. Whoever wrote the above needs to spend a lot of time away from a computer, talking to a professional. Recommending that they spend time on a PHP project helps nobody. 
method overloading was already listed in the post description
How did you manage to go out and connect with people? How hard was for you to get a remote job.
Except that it's the only place where it's pretty much different from the languages it's based on. The other types are all before the declaration, not after. The return type is a bit of an odd duck syntax wise and should've just been used to replace the function keyword for consistency in syntax.
Hi, I'm still a student. This is for a student project. I want to search an array of objects (book object with id, title, author, theme,...) I want to search title, author, theme properties of the object and allow partial matches. (I already have my searched variable from an input text) I know I have to use a regular expression but I don't know how on an object. I know how to search with the id for example, but it does not work for titles: $res = array\_filter($arrayOfBooksObjects, function ($e) use ($searchedId) { return $e-&gt;getId() == $searchedId; } How should I search several properties while allowing partial matches? Thank you.
If I were you, I wouldn't store any datetime on any database in timezone differnt of UTC. Your life will be happier this way 😜😜
My next php personal project will be a trading bot. I will gradually build it up from the granular level. To automate what I always do manually. So my trading will become more and more abstract. I've been successfully manually trading. I'm not sure I want to take a chance on someone else's bot lol.
As a suggestion, might be nice to release new versions similar to how the VS Code extension tool (vsce) does it: `vsce publish &lt;type&gt;` Where `type` is one of `major`, `minor`, or `patch`. So maybe it could look like: `release-tool.phar publish minor` Not sure how it works now, "Using interactive questions" is a bit vague. Looks like a cool tool though!
Looks incredible. 
&gt; Lets binge watch netflex Next project found.
Closures that *lexically* close over their environment. `~~use~~`
I have dozens of little scripts I've written, mostly under 200 lines, to solve little problems or annoyances I've encountered. Most people think way too big when trying to come up with personal projects. &gt; I also suppose working 12 hours a day 5 days a week on a project for work Far more important than finding a project idea is to *immediately* **stop doing this**. If you were working 9 hours a day that would be too much. This is going to destroy you, and no job is worth that. Stop working insane hours, start telling people that you don't have time to complete whatever they're complaining to you about, and involve your manager if you have one.
I would care less about finding a project that people would find useful and more of a project that helps you peruse your personal interests. You will be more likely to follow it to completion and be more interested in the final product. One project I found helpful and therapeutic was an api for my old baseball cards my dad used to buy me. The driving factor was not just getting better at my craft but also the memories I had as a child. Then since I was in charge of the data entry for each baseball card I wanted to find better ways of improving the interface and admin panel. Another task I did was using wordpress as a journal and then reverse engineering the structure of wordpress into laravel. I started this because I have been a developer for over a decade and never once used wordpress so I felt this was the only way for me to actually care about a wordpress installation. I was happy when I got it to the point where I could modify the content through either the official admin panel or the one I created in laravel. Was going to try and create a viewbag to handle all the template hooks but I got too occupied to add to my journal so it is also rotting away. Side note, both of these projects where in response to depression and the topics of the projects were recommended in counseling. I just found a way to tie it to my profession.
Hooktube is a youtube clone however it kinda sucks
Homework?
You could have used task runner: https://github.com/openeuropa/task-runner
Parse and split the input string then add the substrings together
Explode
[https://github.com/z7zmey/php-parser-comparison](https://github.com/z7zmey/php-parser-comparison) `nikic/PHP-Parser` 10.89 + 11.00 + 10.94 + 10.83 + 10.83 + 10.62 + 10.52 + 10.65 + 10.58 + 10.80 avg = 10.766 (base) `z7zmey/php-parser` 2.33 + 2.34 + 2.20 + 2.19 + 2.23 + 2.28 + 2.21 + 2.22 + 2.27 + 2.22 avg = 2.249 x 4.78 faster `z7zmey/php-parser@dev` 1.31 + 1.33 + 1.33 + 1.34 + 1.28 + 1.28 + 1.26 + 1.28 + 1.27 + 1.37 avg = 1.305 x 8.24 faster `php-ast` 0.60 + 0.59 + 0.55 + 0.59 + 0.58 + 0.59 + 0.60 + 0.59 + 0.58 + 0.60 avg = 0.587 **x 18.34 faster** It amazing! I did not imagine that \`nikic/php-ast\` extension is so fast.
https://3v4l.org/o4n3O
Was just about to put the same. You win
The real benifit comes in when you are working on a codebase of thousands of files. Writing those 5 characters many see as an unrequired task. Easily solved by templates but its such a mundain requirement that php files require \`&lt;?php\` when closing tag has also been optional for i dont know how long, before i started working with PHP. Im not saying completely remove it, that would be redictulous. Im just saying add an ini option \`allow\_pure\_files\`.
_sees "PHAR (recommended)"_ _check how is the PHAR built_ _sees a box.json file and Humbug Box 3 in the Makefile_ _feels happy_
Maybe http://php.net/splobjectstorage and http://php.net/manual/en/class.splfixedarray.php might satisfy you?
Now make it object-oriented and interface-driven with 100% code coverage and PHP 7.2 type-hinting.
PHP-Parser is not a PHP engine. It produces a syntax tree of PHP code for analysis. 
@[fanchoise1879](https://www.reddit.com/user/fanchoise1879) and @[confusedpurple](https://www.reddit.com/user/confusedpurple) First of all thanks for the Reply. As you have mention i have removed the share popup from demo site. 
Store the data in the database in UTC. If you don't you'll end up with weird cases where a date time exists twice (when the time falls back a hours worth of times happens twice) and it will be impossible to reconstruct the data. Then you can use the DateTime class to convert back to the time zone you're interested in. $date = new DateTime("2018-07-02 07:00:00", new DateTimeZone("UTC")); $date-&gt;setTimeZone(new DateTimeZone('America/Detroit')); // or whatever you're interested in echo $date-&gt;format('I');
If you use VCS to deploy, you're doing it wrong.
How do you add 1+2+10?
Besides learning the basics of PHP and getting familiar with MVC frameworks. Try to get a working copy of the companies web app on your own machine. Play with the code and make a mind map of how it functions. If code documentation is lacking perhaps you can contribute by adding to documentation to the code base. If you are going to be working on the iOS version later, you probably only need to be familiar with the end points of the php app. Knowing what those endpoints expect as data and what they produce with that data will go along way in learning the functionality of the current system and the system you may be building.
This is great advice, I have been working my way around the web app. Cheers 
 &gt; I really appreciate your feedback. You're giving me lots of food for thought. Feel free to CC me in on any new issues/PRs on your package - would gladly review and help out when/if I have time :-)
Check if the next index is 0, if it is multiply current index by 10, and skip next index. Could use a loop to check for multiple 0s in a row.
Events
Then I guess you probably need to use another programming language, PHP is not for you. 
I get your point. But as described the problem set would only allow each digit to be 0-9, so the 10 digit as the lowest value number isn't strictly valid input.
From the looks of it, I would need a copy of your Phar file in every single project - I currently have 140+ repositories, so if you release a new version I would need to replace 140+ copies of your Phar file. Am I right or am I missing something? 🤔 This looks like it could be a useful tool. At the moment, I use git-flow inside Tower (Git client for Mac) to create a new release and tag it. I’ve been thinking of ways to shorten the steps needed. 
It can be used to create fast static analysis tool or autocomplete backend.
Not the SPL! 
What about http://php.net/manual/en/class.ds-set.php? 
Yes. There are multiple libraries for encryption that produce the same hashes (strings) across libraries available in both languages and use the same keys (strings).
My intention is i dont want to make my endpoint accessible to spamming bots, i have an api limit of 20 calls per second, if some one with malicious intent makes a bot to continiously ping the endpoint, it will affect all of my android clients
If you’re just accessing your own API, I suggest using an SSL connection and not worrying if someone figures out the API key. Because no one probably cares that much.
https://en.wikipedia.org/wiki/Tarpit_(networking) "This is implemented in iptables by the addition of a TARPIT target." This is probably preferable to some application-driven mechanism, although that can work too.
**Tarpit (networking)** A tarpit (also known as Teergrube, the German word for tarpit (German pronunciation: [ˈteːɐ̯ˌɡʁuːbə])) is a service on a computer system (usually a server) that purposely delays incoming connections. The technique was developed as a defense against a computer worm, and the idea is that network abuses such as spamming or broad scanning are less effective, and therefore less attractive, if they take too long. The concept is analogous with a tar pit, in which animals can get bogged down and slowly sink under the surface, like in a swamp. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Its not in an actual version of php I can use yet is it? Phpstorm wouldn't autocomplete it for me. 
Spl seems like a weird hack and not fully what I desire. I had looked at those though and thank you for trying to help! :D
sodium\_crypto\_box\_keypair\_from\_secretkey\_and\_publickey() to short?
That would be back when I coded on notepad++
``` $foo = new \Symfony\Component\HttpKernel\DependencyInjection\MergeExtensionConfigurationPass(array()); ``` Yeah, give me autocomplete or give me death.
You know microsoft is pushing there web technologies universally now. Maybe a late move but [ASP.net](https://ASP.net) core and IIS run on windows. Visual Studio doesn't (yet) but visual code does plus you can use \[JetBrains Rider\]([https://www.jetbrains.com/rider/](https://www.jetbrains.com/rider/)) if you want to dev on linux.
A major cleanup of the stdlib. Real unicode support. This would dramatically increase the dx with PHP. Now its painful at best.
I still dont know how it works.
Did you just assume everyones gender.
Why not [phalcon](https://phalconphp.com/en/). The best framework is always the fastest framework
I'm using vscode on Linux. And I was amazingly positively surprised by how well it works. For everything else, I'm so used to Ubuntu, nginx, apache and bash, I don't think I'll ever go back. I applaud their efforts tho. They did make a good turnaround with all the open source stuff. 
I'm doing a small web page, I'm trying new things, my title work focuses on an intranet, but there is no framework and when it comes to practice lavoral knows the api restful, framework. Then I left behind with certain technogies that I do not know, and because I wanted to know the opinions of the community more than anything, I know there are other places to ask, but as a first post I thought it would be good. Sorry for my bad English
So I said.
Notepad here. Notepad++ didn’t even exist. 
Please tell me you don't foresake `use` directives....
LLVM support
Be curious, learn how things work even if it's not needed. Definetly put in some of your own time (provided you have healthy amount of work hours a week - ~40) 
Great idea for such a tool that handles every common step of release manager (any open-source project). How would you compare your changelog generator to this one? https://www.tomasvotruba.cz/blog/2018/06/25/let-changelog-linker-generate-changelog-for-you/
It's operator overloading in disguise. No.
Method overloading increases complexity and gives very little in return, is it even possible with PHP weak type system? Probably lots of confusing edge cases. And to what benefit? Personally I think that it is just confusing that you can call the same method name with different number of parameters and types, harder to read code. Only scenario I think it has some merit is overloading the constructor method, however you can solve that with static build methods on the class. Typed properties are nice to have, but does not really solve any substantial problems that I have in my code base. Okay, you can skip the setter and directly set the property itself, but I rarely change a property after it has been set, I work with my data object as if they where immutable. For reading properties it is good enough with phpdoc. Most important for me would be function names should have their own symbol to be able to use them as an identifier. Probably huge BC break and therefore not happening in the near future.
I use vim with no plugins. Come at me.
Better for what?
It already has almost of it, except that instead of doing link resolution at compile time, it does it at runtime, but pretty much everything that's in the engine is ready for it.
Said like that, that's true. I had hard time to get used to type declaration in TypeScript (it's always symbol: type) but it's very nice to use in the end.
"mixed" pseudo type is like the "any" type in TypeScript, when you use an API that has some undefined behaviours or changing return type you cannot express, it gives you a way to explicit that it's "dangerous ! undefined !", and in certain edge cases to tell the compiler to shut up when type cannot be resolved.
&gt; But you fail to grasp the perspective other people, which are just starting out with PHP, have. If you're just starting, you're learning, it does not mean in any way you can't understand types. Actually if you're learning it's probably the opposite since your brain is very active at this moment. And by the way, making things explicit such as types actually makes it easier to understand: type coercition does black magic, it does not make the whole simpler, in the opposite, it makes it implicit and silent and harder to grasp. I don't understand people that say that dynamic is easier to understand, it's not true, it's easier to write very quickly your first algorithms, but it's much much harder to understand, and much much harder to write _proper_ things with. It's not helping anyone in the end. Saying that I fail to grasp the perspective of other people maybe true, but something I'm quite sure of is that when you explain something, if you fail in giving half of the information, those other people won't understand you: types are half of the information in such language. I strongly believe that everybody has a working brain, but pretty much like everything, everyone has to train correctly to use it, and if you don't train them to understand stuff such as types, they never be autonomous, never, in programming with actual languages, even the most dynamic ones.
Nice suggestion! We've actually thought about this but it hasn't made it into the first version. To elaborate a bit on the "interactive questions" (perhaps I could have phrased that better), currently there are two ways to release a new version: 1. Providing a version number yourself: \`release-tool.phar release 1.2.3\` 2. Not providing a version number: \`release-tool.phar release\` (or \`release-tool.phar release --pre-release\`). When doing so the release tool will show the list of changes and ask yes/no questions until it knows what kind of version to release. I.e. "Does this release contain backward incompatible changes?", "Does this release contain new features?". Providing the release type as an argument could be a nice middle way between having to go through the questions and having to choose the version number yourself. Since we already have the version number as an argument, we will probably have to implement it as a flag though. Something like \`release-tool.phar release --major\` or \`release-tool.phar release --type=major\`.
I wish we could go one step further with the higher-order functions and do `$roles.filter()` or `$roles.map()` etc. Most collection libraries enable you to do this, but it'd be nice to have natively.
&gt;It amazing! I did not imagine that &gt; &gt;nikic/php-ast &gt; &gt; extension is so fast. Thanks. That was my point here [https://www.reddit.com/r/PHP/comments/8pilqg/phpparser\_written\_in\_go\_v05\_is\_realized/e0chaks](https://www.reddit.com/r/PHP/comments/8pilqg/phpparser_written_in_go_v05_is_realized/e0chaks)
CQRS !== ES.
Your scientists were so preoccupied with whether or not they could, they didn’t stop to think if they should.
.NET and Wordpress. The two nightmare situations for every developer, combined into the ultimate insane piece of crap.
It seems somehow too simple to think that we could just create a library to load through Composer and have aliases for all core functions that make sense. Even more consistent implementations, like adding alternatives function headers for sort functions which modify arrays in-place rather than returning them as they should. This page does a better job of explaining these problems: [http://phpsadness.com/](http://phpsadness.com/)
I'd rather write a whole system from scratch with C than tauch the abomination in the OP.
If you want, do what I did. I tried googling to begin with, for some open source PHP system for keeping track of/inventory of my movies. I have a tendency to be friendly when it comes to friends and family, of course you can borrow that movie. Back then it would result in them coming back with what they borrowed a few weeks later and I'd be like oh you borrowed that? I wondered where that went, my memory is really bad. So I build a system to keep track of all my movies and who had borrowed what, or if it was at home. Then I expanded on it for Games and Books, which I could also be lending out to friends and family. Perhaps do your own take on something like that?
It’s available as a PECL extension, and there’s a polyfill composer package, which also serves for IDE autocomplete.
I think I could approach that performance level without saving the node comments and positions. But static analysis and refactoring tools require that information. I am going to improve performance in dev branch by \~15&amp;#37;. And by using Goleng concurrency it will be enough fast.
All processional devs are using a decent IDE that makes these problems obsoleted. That's why there is no widely recognised solution despite there are constant attempts to create one. 
Yes, any reasonable IDE will have autocomplete and have hints for the parameter order, which makes this a total non-issue. Of all the things PHP needs, this has one of the worst payoffs in terms of effort versus reward. 
Nearby-ish. Just down the A1 a couple of hours! 
You'll hear people talk about IDEs, I find it something of a weak argument, as I believe that instead of relying on third party applications to make up for poor design, the functions should instead be intuitive and consistent in their conventions. The issue with fixing it though, is that the function names are already in place and used millions of times. You can't just flip the argument order and expect millions upon millions of errors. Now there is a way around this, and it's for the core PHP developers to claim the \php namespace and redefine all of the functions in it, but with consistent naming and argument ordering. This would have the benefit of it being something that could easily be backported using a single PHP file for older versions. With a suitable mapping, tools would quickly become available to one-click re-write vast amounts of source code to use these functions. But this would have to be done at the level of the PHP core team as the new methods would need to be "official" and appear on the PHP docs as well. No third-party solution would gain widespread traction due to these considerations. Who knows? It might happen. It just seems really unlikely.
Not really, no, short of using alternative libraries that you like better. It's something that could be improved with PHP but it'd come at a cost: introducing new functions with more consistency means you now have *two* sets of functions.
Would themes/plugins work within that? What about Wordpress updates? 
Since it's a phar, you can put it in a directory in your path and use it globally, just like Composer. We just haven't documented this yet as we are still figuring out the best practices.
https://i.imgur.com/DK1ckG8.png
oops, sorry, didn't see that, i'll delete post and repost there.
Exactly. So you will need to implement AST-&gt;opcode transformation + runtime.
Polyfill will probably not exist for the next version though. 
in that case, yes. But this should not be added before union types, since it may be overused. And in addition to union types we should also have type aliases. But again, this will require some sort of structural typing, so if function receives `email` type which is alias of `string`, you could pass actual string. 
Could you add also interbase and pdo_firebird for Firebird SQL support . Thank you 
There are libraries that fix these issues but I wouldn't recommend it because it adds overhead and it's another layer where things can go wrong, if you use these functions extensively - a bug sneaking in can have dramatic side effects. I'd recommend just using an IDE that shows you the parameters you have to use. Ultimately this is something that needs to be fixed in PHP, there have been a host of RFC's to fix these issues in one way or another. Not sure when or if it's even going to be fixed.
Hahaha :D damn
Yes they would. \[This article\]([https://www.peachpie.io/2018/06/tutorial-plugins-wpdotnet.html](https://www.peachpie.io/2018/06/tutorial-plugins-wpdotnet.html)) explains how, but since the creation of the SDK that Scott mentions in the article, you will only have to re-compile the plugin itself, not the entire project.
What? .NET is great to develop with.
All core extensions (part of php-src) are of course compatible, so don't need to be tracked on this list.
Yes, I agree, type aliasing is mandatory as soon as you have union types or sum types in! And yes, I do agree that it's dangerous to give the user a weapon to shoot his own foot, but in the context where you have billions of already existing lines of code, sometime you can't do otherwise than allowing this kind of sad tricks. All languages have the concept of "unsafe blocks" one way or the other.
Ha! I worked on such a project, called it SubsetPHP (it's on github). But ultimately you'd have to rewrite the entire standard library to support a better garbage collection strategy. And lots of other stuff.
That makes it quite a bit more interesting, thanks for the reply 🙂 I’d definitely be interested in a `self-update` command. I’ll be testing it today I reckon, I’ll probably build a Robo.li wrapper around it as my 140+ repos are in different locations and I don’t want to have to `cd` into every directory. Thank you for sharing 😄
What a wet blanket. 
Well, I wasn't aware of that package, it looks quite advanced! Judging from its README, I would say that our changelog generator lacks some of the functionality your package offers, such as distinguishing added and changed functionality, distinguishing different packages from each other, and linking to issues and diffs. Also, our tool currently stores the changelogs in GitHub releases, whereas yours saves them to a `CHANGELOG.md` (we did that before, but we use protected branches on GitHub and it was quite annoying having to create a pull request for every release just because the changelog was altered). In the future we might also support Git-tracked changelog files, and perhaps other ways to publish the changelog. Also, it looks like you have to provide a number of flags / arguments every time you use ChangelogLinker. Unless you use another script / tool to call it with the correct flags, this might result in inconsistencies in the changelog. We are trying to use sensible defaults and we are planning to support a YAML configuration file to avoid this.
"combined into the ultimate insane piece of crap" shit, you people are a bunch of downers. You're not critical of the project in any way that reflects careful consideration of the project. You just don't like the fact that it's WordPress or .NET.
We're not - we're using Git to tag versions as part of our release process. We then use Makefiles to create distribution tarballs which we deploy to our servers using Ansible.
- The fastest solution is just learning the API. In *most* cases it's just `needle, haystack` for array functions and `haystack, needle` for string functions. This "rule" gets a bit hairy once callbacks are involved, but nothing a quick trip to the documentation won't fix. - Also all IDEs provide a way to show you the parameters a function call needs making the point even more moot. - Finally: there is several userland wrappers out there who try to fix it themselves. If you are bothered that much by it use them.And yes they have their own drawbacks. - Finally 2: PHP could fix their own library. And yes this also has several drawbacks. Imo above is also the sequence of importance for you if you are looking for a solution. The inconsistencies (although wonky) is really less a problem as (mostly new people) are making it out to be. Sure I would prefer it if we had a nice, sane and consistent standard library, but at the same time I realize that changing it (through whatever means) comes with a cost too and as such might probably just not be worth it.
Found the author. I am sorry, I am sure this project was challenging, as well as fun, to complete. It's just that you literally searched the bottom of the PHP CMS barrel, and dug up WP from there. If you were to compile an actual framework like Symfony or Laravel, it'd actually be amazing and pretty useful, however out of all the good things you could compile into .NET you chose Wordpress..
Cool! Feel free to create a GitHub issue with any suggestions or to reach out to me if you have a question. I reckon that since we've built this primarily for our own use case, we might have to make some improvements to support other workflows as well.
This will become a problem if we want to have actual closure as that means we will need yet another syntax.
1. Hype ... Just like Ruby On Rails. People are already seeing the issues more and more. Bloated memory, npm dependency issues, ... 2. Yes ... Go, D, Pascal, ... 3. One word: PHP/Swoole! https://www.techempower.com/benchmarks/#section=test&amp;runid=6ac3fab1-b57d-4d97-ae06-6e0404f014df 6 swoole 296,310 86.3% Plt PHP 74 nodejs-mysql 92,649 27.0% Plt JS Comparing both MySQL implementations ... That is how PHP kicks NodeJS in the behind. And just about any other hyped language...
I’m impressed and horrified that this exist. WP has been in severe need of a rewrite for nearly a decade. It’s gotten to the point I only recommend headless CMSes now. 
I am not the author. I'm not associated with the project in any way. I'm just don't share your proclivity to shit on the ideas and projects of others. 
Yeah, I'm thinking a namespace where every core function is aliased in a clean and consistent form, using the base core functions, would allow full backwards compatibility and the option to use the new set of functions in new projects. Then, many years down the line it could be that almost all projects would be using the new function names and further PHP versions can remove the obsolete core set and optimise the new one.
Then just actual closures with a short syntax would be great for me :)
If I were to make a blog post exclaiming how I'd compiled phpnuke to Pascal would you think the end result was a good product? PHP on windows is a mistake to begin with, so taking that and suggesting that compiling whats widely known as being an awful cms system, using a very anti-php operating system and exclaiming that its good will not earn you any praise, especially on a php subreddit.
When you aggressively shove an idea into other people's faces (in form of an ad), you better be prepared for every bad aspect of it being shat on. And this specific project has a glaring bad aspect to it, that happens to be the whole project's focus (Wordpress).
Are you really working 60 hour weeks? I doubt many people would have time for side projects; once you throw in a commute and time for eating you're basically done for the day, right?
Nonsense :) It is neither old nor anything alike. It is one of the most modern rapid development frameworks. If you need enterprise go for Symfony etc, but if you want to deliver sth quick, CakePHP can be the most valid choice here if you like working with conventions - a red line that guides you.
It may make it a non-issue for you, but it does not for me. For me this remains a major issue despite using IDE's. Autocomplete does not help for parameter order, and hints break coding flow. It is a major productivity issue for me since I always have trouble remembering the inconsistent naming and order, and the tools provided by the IDE to query this information slow down my train of thought.
&gt; exclaiming how I'd compiled phpnuke to Pascal Oh please, do it for the lolz
/r/unrealisticexpectations
&gt; For me this remains a major issue despite using IDE's. Autocomplete does not help for parameter order, and hints break coding flow. I think you may need a better IDE then.
Author of the project here (not the article, that's Scott Hanselman). WP is not the only PHP project we compile, but it powers a quarter of the internet, so yeah we started from there. Symfony and Laravel are next.
I've used VS Code and PHPStorm. Which one is better?
Unlikely. A "complete e-commerce platform" is way to big of a project to fit into a simple tutorial. For what it's worth though, here's some rough steps you need to take: - Learn basic PHP (that can be done with tutorials easily be found on Google and YouTube) - Learn the basics of OOP in general and the PHP implementation of it. - Learn software architecture I'd say in a year or two you'd be ready to start working on the actual project - earlier if it's not too important that everything works as intended.
I don't see this as an ad, and it certainly doesn't seem to be aggressively shoved in people's faces. It's a link, just like every other one, posted here, every day. WordPress works for _many_ people. Your view isn't unheard of but it's certainly not how developers in general view it. 
First of all, this is an article written by Scott Hanselman and shared by someone not affiliated with the project. Also nobody in this thread other than this account is affiliated with the project, just FYI. Your view is slightly close-minded, but you're perfectly entitled to your own opinion :)
See above. Not an ad since nobody in this thread, or the author of the article, is affiliated with PeachPie.
&gt; If I were to make a blog post exclaiming how I'd compiled phpnuke to Pascal would you think the end result was a good product? I would take the time to look at what your project was doing, and if you asked for it, give constructive feedback (if I had any to give). Calling someone's project "ultimate insane piece of crap" out of the gate is the last thing I'd do because it would reflect malicious ignorance on my part. &gt; widely known as being an awful cms system citation needed &gt; very anti-php operating system citation needed &gt; exclaiming that its good citation needed &gt; not earn you any praise, especially on a php subreddit ...which I don't care about.
Yeah, I'd be interested to see this too :)
I never said or suggested the op was Scott. Scott’s not the sort of guy I’d expect to see on a pho subreddit. 
First of all, thanks for the reply. &gt;it powers a quarter of the internet I know you didn't mean to imply it's good, but god I hate this point. How many sites run on it doesn't make it any less shit. I have seen many trash tier WP workshops (and interviewed in a few, when I was young and desperate) that shit out WP sites left and right for low prices. The people that come to them don't want good systems, hell they don't even understand what makes a system "good". They just want some website to host their local hair salon business, they don't really care that it runs like trash under heavy loads, or that it'd be exponentially hard to add more complex features. Those are the sites that occupy the quarter of the internet you're talking about. I promise that if you judge based on combined revenue of all sites owned by a company, it goes far, far below 25%... /rant Now when you finish Symfony or Laravel I might actually be interested.
Fair enough!
One definition, for how good something is, is how easy it is for lots of people to make lots of money from it. This is something Laravel has in common with WordPress. Hell, it's what both have in common with the PHP language.
PHPStorm will happily tell you what parameters are expected and their order 
I assure you, nobody makes lots of money "because" of WordPress. There might be a few businesses running it that make lots of money, but that'd be because of their service, while the site is just a showcase website for it, maybe with some minimal functionality on top. On the other hand, I do personally know of some complex systems running on Laravel, and I'm sure there are in general ton of those, because Laravel is an actual framework that was also designed pretty well, in contrast to that procedural mess. Yeah, PHP in general allows people to make lots of money with less development time (aka effort), it's a great language, that's why we are all here. WP just takes the low quality to the extreme.
&gt; I assure you, nobody makes lots of money "because" of WordPress This is simply not true. I have made lots of money because of WordPress (granted many years ago). People in the WordPress community make lots of money from WordPress; creating themes and plugins and installations and commerce applications. Start-ups, who produce good plugins and libraries of resources, are acquired all the time. What makes you think "nobody makes lots of money because of WordPress"?
&gt;I'd rather write a whole system from scratch with C than touch the abomination in the OP. Interested to know on a technical level the reasons that you believe Peachpie is an ' abomination'. Looking at the project it seems to be an incredible technical feat rather than an abomination.
I actually do know OOP PHP. But don't know anything about software architecture. Is software architecture language based or similar to any language? (It would be great if you can suggest me some tutorial) I was intending to make a ecommerce website. But when I think about all the features and functionality it kinda frighten me. I get all confused and overwhelmed and lost.
Alright, I should have excluded WordPress devs from the list. What I meant is, no client that asks for a WP website makes lots of money "because" of WP. Also, I never said frameworks mustn't have a single procedural component, ever. I just said it's a bloody spaghetti ball of shit the way it's done in WP. Does WP have its place? Sure, like I said, not all people *need* quality systems, some just need basic websites and any added functionality is just a bonus. But those type of people would probably not care for the minuscule performance improvements compiling WP into .NET would bring. Hell, if you saw the PHP 7.3 talk, you saw how he emphasized the improved performance it had on badly written code, and specifically gave WP examples. My point is, PHP starting to make pretty good optimizations by itself, I'm not even sure porting WP to .NET would help much with performance at this point.
The actual compilation of a large scale PHP system into .NET code is impressive, actually. But out of all the PHP systems, he decided to compile WordPress...
I agree with you, but, if people do that, they'll kill community. All the plugins, themes, etc, is just going to die. Those are the only reason why people still use Wordpress, almost everything is already done.
&gt; .NET and Wordpress. The two nightmare situations for every developer, combined into the ultimate insane piece of crap To be transparent, I've never programmed with .NET professionally but have used .NET Core in one professional project and used it a handful of times in personal projects. So I might not be best positioned to give a professional opinion but I found it really nice to work with and (like PHP) has a great eco-system of tools and packages around it. I'm interested to know what technical reasons you have on which you formed your opinion that .NET is an 'insane piece of crap'?
Compiling symfony or laravel could be pretty useful for you, not for the most people. Wordpress is used by a lot more people than Laravel and Symfony together.
&gt;he decided to compile WordPress I don't know his exact reasons behind it but my guess would be because it's the most widely used so it would make sense to me to start there. To me it wouldn't make sense to use a perfectly architected project (if such a thing exists) which is only used by a few people. It would seem like a terrible waste of time for no gain/market penetration. 
&gt; Is software architecture language based It's the how to plan, structure and build a large software project, it's the part way before the first line of code will ever be written, so completely independent of what language will be used in the end to code it. Most of the time this part is skipped and kind be done "on the fly" while coding along, but large projects will ultimately fail if not planned and structured properly and all that kind of boring voodoo. &gt; But when I think about all the features and functionality it kinda frighten me. With good reason. The currently available solutions have been built by people with sometimes 10 to 20+ years programming experience and it took them YEARS with a large team to build them - not sure it can be done by a "one man team", these days.
Define "a complete ecommerce site".
You raise a good point, about the performance improvements of 7.3 vs. porting. Perhaps you could have lead with this, as a constructive criticism of the work. 
This community sprouted atop WP, back when it seemed like a good idea. They made their fair share, but now it only exists because there already exist vast resources to use with it, due to said community. I would also agree a rewrite is a bad idea - rather, new authors and contributors should focus on better systems to begin with. WP has already cemented itself as the fast, cheap and low quality option. Rather then rewrite it, just support better written alternatives.
Pretty sure VSCode has it out of the box. Just `ctrl+space` as you type the function. If I'm mistaken, surely the official PHP extension has it covered.
Yeah, nail meets hammer. Explained this below, WordPress powers a quarter of the entire internet, so it seems like a pretty good place to start.
I work from home
&gt; I also suppose working 12 hours a day 5 days a week on a project for work doesn't help with the whole "side project time" aspect. I refuse to work more than 8 hours a day. I'm already braindead after 6, so I guess this is why? Give yourself a break and make reasonable hours unless you think it's really worth doing this. Even with a 37.5h workweek I don't feel like developing at home, it's just too much effort.
&gt; But out of all the PHP systems, he decided to compile WordPress... They choose WordPress for the same reason, the first betas of PHP were benchmarked using WordPress. It is the same reason why the HHVM team didn't declare it as a PHP drop in replacement until it ran WordPress without any errors. Whenever PHP8 is released, which PHP project do you think they'll use to announce full backwards compatibility with?
If its not properly configured you get a "Loading..." tooltip that stays there for a while. It's real pain in the ass, I suppose that's what he's referring to. That and also a slowass computer. I don't know why people use bad computers with the premise "it's just coding man" and then complain about "IDE slows down my train of thought" I have an even better solution. Write your tests (you don't need param order for this), implement them, with pseudo code if you want, run those tests, fail, fix, move on.
&gt; slow ass-computer *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
PHP is doing an amazing job. Performance isn't the only factor here though (although fairly certain we will still be able to beat it in terms of speed), we also offer source-less distribution for added security, .NET tooling, and most importantly super native bi-directional interoperability. Not going to comment on the quality of WordPress over other CMSs, but basically we took the most widely used one to start, because it covers a huge portion of the PHP codebase and is a great POC for PeachPie. It's just the starting point. And since so many sites run on WP, it also offers the widest possible amount of clients the option of working with PeachPie. And you can believe us that plenty of absolutely top notch companies still use WP, including most companies you could name off the top of your head.
1. I don't like web development, hence I do php in a backend fashion. I do not feel threatened by Javascript, it's just another tool for another job. Luckily for us, Javascript is not really good at it either until it starts being a proper language. 2. I'm not good with them, but I have a side-project in C# which is quite nice to learn from, and I've done a bunch in Java for school. I can highly recommend picking some other language to play around with. 3. No, if anything, php is gaining more popularity.
If argument order is your only issue, then yes, that's how you fix it. But as others have mentioned, it's another layer that may fail. But that's how programming has been for awhile now. You don't like the STL/SPL implementation? Roll your own. There's plenty of plugins to enforce code guidelines, phpcs being something like a de-facto standard. 
This is a non-issue and in most cases the following applies: if it's an array function, then it's f(needle, haystack) if it's a string function, then it's f(haystack, needle) There aren't many deviations to this rule. As others have said, autocomplete in IDEs will solve this non-issue for you. My opinion is that you're being petty.
The solution is obvious: Don't use php if this is a show stopper for you. Good luck finding any other language without bad naming conventions or argument order. Might need to write your own.
This is like running doom on a washing machine. Cool, but ultimately pointless.
If you want something production grade, then I suggest you use something off the shelf. If you're doing it as a learning exercise, then you should probably choose something smaller.
Thank you for your cooperation. :)
It's for my exercise purpose to boost up my PHP skills.
Complete means All the possible actions, features and functionality a ecommerce site can possibility have.
They did attempt a rewrite, it was called Callipso or something like that (in nodejs).
Remove $ in front of variables. I mean, why?
So you have no idea what you want. Well you won't likely find a tutorial then.
Don't learn fast, learn deep.
Vbulletin?
And we are back to the opening comment: callipso is a front end for WordPress REST API (not everyone knows WordPress can work as headless CMS) :)
I felt a great disturbance in the Force, as if millions of .NET developers suddenly cried out in terror and were suddenly silenced.
12 hours still sounds like a lot for having some sort of balance
Yeah but this is /r/PHP where to to fit in you have shit on WordPress while you ride Laravel's dick.
&gt; My opinion is that you're being petty Denial is an ugly thing. There's nothing wrong with recognizing there is a reasonable improvement to be made. Pretending it isn't there or doesn't matter is not constructive. It affects more people than renaming ReflectionClass::isIterateable() to ReflectionClass::isIterable() or renaming zend_qsort to zend_sort, but there you go.
And alot of those addons are puketastic from a code point of view.
But who wants deal with WPs db mess really?
what is balance? when you have no friends, no family, no partner and you have debt, you work as much as possible especially when you rartley leave your house.
&gt; I’m impressed and horrified that this exist. This sums up this whole blog post. This is really awesome, but also really horrifying.
What have you tried?
https://tcpdf.org/
Came across something called fpdf. I'm a very beginner at this stuff. I really couldnt get my head around fpdf.
Didn't see a comment about it, might be a user I blocked my bad :)
What about using snappy (https://github.com/KnpLabs/snappy)? Should be easy to generate the html with a simple loop and convert that into a pdf.
&gt; I'm interested to know what technical reasons you have on which you formed your opinion that .NET is an 'insane piece of crap'? My opinion is not on .NET. It's on combining wordpress and .NET. 
I do, actually :) It is decent money ;)
&gt; I agree with you, but, if people do that, they'll kill community. It's worrying that their mentality is spreading. It would not kill the community at all. Sure, if they really wanted to be stupid they could go ahead and just release a new version with zero backward compatability. It would work if done in steps. Step 1 - get a team working on a modern replacement, built using modern coding standards, and with absolutely no vanilla php being left in the core. Step 2 - You perform a number of incremental updates to the existing core, mainly to push developers to update plugins, including deprecating old ways of doing things. As part of this the end goal is that plugins are updated to the point where its easier to make them compatible with the new system. At this point you also start formally warning developers of an upcoming major change. Step 3 - You soft launch the new version, keeping full support for the legacy system. All plugins being submitted to the plugin store must now meet certain requirements to be compatible with both WPLegacy and WPNext. In truth, the plugins would be written for the new system, with the old system having certain functionality backported to help make the transition for plugin makers easier. Step 4 - You continue to maintain both versions for a 12 month beta phase of the new system. 6 months in you stop new accepting plugins that are compatible with WPLegacy, and you start formally warning end users, in the form of forced notices in the admin area. Step 5 - After 12 months, WPNext goes gold, WPLegacy goes into depreciation, with security fixes being provided for 3 years. Plugin developers may no longer submit any updates, themes etc for the legacy system that are anything more than bug/security fixes. And then as a final step, you have a two way marketplace. Site owners can list their site as needing conversion, with a listing that would be automatically populated with the plugins they have. Developers can then bid on jobs, with the site owner picking the winner. This provides both an ecosystem boost in the form of revenue for developers, as well as a service to help move people to the new system. This has to happen at some point, wordpress really cant go on much longer as it is.
the core code isn't much better either
Equally as shit, so would be a good fit.
It's cool, but not sure if there's any advantage doing that.
If I were part ot wp core team I wouldn't offer myself to do any of that work. I don't think the effort worth it. I would preffer to left wp right were it is and work on something else. Just to be clear: I would love to see a new WordPress using the points you just put there, but WordPress users aren't developers, and those non-devs users are really happy with wp :/
I am using FPDF with FPDI for templates
Or make flash cards for all the functions and study like you have a final in 3 days.
&gt; From last more than 10 years I am working on WordPress. I think due to that I am incline toward wordpress I think you just don't know any better.
Well if you must, you could use this -&gt; https://www.youtube.com/watch?v=0AZRp_8TT0U
FPDF is probably the way to go to get up and running quickly. Use a template from the site to create a script that captures the form via POST. Designing the PDF may take some time. You can insert your data in a cell like so: $pdf-&gt;Cell(75,6,'Date: '.$input_field1,1); Use $pdf-&gt;output('file_destination.pdf') to send the PDF to file 
To answer the question about skipping empty data. Use an if statement to check if the data is !empty() then print Cell(). Maybe wrap it in a function so you don't repeat yourself. 
I accept it. very few people study technology from all angles. need to improve my awareness.
It really depends on which web browser you are using and whether you are using Session.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Type the function call with the name you'd like and the parameters you'd like first. Then make that static function in a static class like \Library\Strings You lose intellisense but it doesn't matter then because the way you want it is always in your mind.
You can use this Dom PDF library. [https://github.com/dompdf/dompdf](https://github.com/dompdf/dompdf) You just simply pass the Html/CSS to this Library and it will convert it into an PDF which is much easier
Or a few years down the line you flip them and make the global functions the aliases and allow them to be disabled.
Thank you for very in-depth feedback! I used to maintain Github releases as well, since most of PR ids and references are auto-linked. But people don't go there very often and it's Github-locked instead of repository-locked, so I moved to standard place instead. Making pull-request for release makes sense to me. Pushing to master is not really need and consistent workflow brings less wtf (where is the PR that did A?). To many options and sane defaults argument makes sense to me, I'll rethink the design to be sure it has added value. As for another script to call it with correct flags, that's the exact place for composer scripts (https://blog.martinhujer.cz/have-you-tried-composer-scripts/). I'll definitely keep following this tool. Thanks for sharing it with us
I still dream: $availableAuthors = $api-&gt;stupidApiCall() -&gt;filter(($book) =&gt; $book-&gt;isInStock()) -&gt;flat_map(($book) =&gt; $book-&gt;getAuthors()) -&gt;filter(($author) =&gt; $author-&gt;isActive()) -&gt;map(($author) =&gt; $author-&gt;getName()) vs the sane, but understandable: $availableAuthors = array(); foreach ($api-&gt;stupidApiCall()) { if (!$item-&gt;isInStock()) { continue; } $authors = $item-&gt;getAuthors(); foreach ($authors as $author) { if (!$author-&gt;isActive()) { continue; } $availableAuthors[] = $author-&gt;getName(); } } vs the lets try to use array_map and array_filter version $availableAuthors = array_map( function ($author) { return $author-&gt;getName(); }, array_filter( function ($author) { return $author-&gt;isActive(); }, nonexistant_array_flat_map( function ($book) { return $book-&gt;getAuthor(); }, array_filter( $api-&gt;stupidApiCall(), function ($book) { return $book-&gt;isInStock(); } ) ) ) ); 
PhpStorm, of course. 😍
Which theme ?
Used to be tmux/vim (for a decade+), but PhpStorm is so good that I haven't used anything but that in 3 years or so.
Phpstorm with dark theme 😘
Don't know about him/her but I use dark theme.
PHPStorm with Material theme
PhpStorm with Dracula (dark theme) with modified display of comments, so they are in yellow and more easy to see 
Is there anything else worth attention than PhpStorm? ;)
I'm using material theme it is dark but i have to take eye care not sure if dark one is the best
darcula but I switched my font to https://sourcefoundry.org/hack/
I'm using DejaVu Sans gotta check this one too.
I’m calling the police
Atom 
Sublime text 3
If you're broke NetBeans is a pretty solid alternative.
I’m finding more and more of my time in VSCode compared to IntelliJ / PhpStorm, and I can say that it’s catching up: the intellisense/ code completion isn’t there yet but it’s getting better 
Netbeans proud
Thepiratebay.org
I used to sue NB back in the days, but it felt slow. Since I started using storm I started believing in IDEs again ;) It’s pricey, sure, but I think it’s much better than NB.
Not sure this isn't more highly uploaded. If you have a shemale and you want PDF this Library is the most direct and obvious way to get to it. It is a little quirky but it definitely gets the job done
What, you don't like all your functions taking mixed arguments, and echoing out html directly sometimes, and other times returning a string? /S
VSCode. At my work most devs use PHPStorm, and a few juniors use Brackets.
Out of, potentially morbid curiosity, would a script that could do a full rewrite of your source code to support the "new" version be possible? If, for example, all global functions were dropped and everything became namespaced, we could then have it all standardised and potentially have an auto-migrate to fix it all. Obviously, that'd be insane to do, because no project could then be backwards compatible to multiple versions of php, but still, what would actually be a potential plan for this to happen?
Consider using LaTeX: https://tex.stackexchange.com/questions/14842/creating-fillable-pdfs
Come to think of it, neither have I. Does anyone, ever? Or is it just an interview question?
&gt; Out of, potentially morbid curiosity, would a script that could do a full rewrite of your source code to support the "new" version be possible? Yes. But good luck convincing everyone they need to run that script on their codebases and drop support for older versions of PHP…
Vim with GNU screen. My boss uses NetBeans and a coworker uses PhpStorm.
Neovim but sometimes phpstorm 
 I use Material Theme with Monaco font ([https://imgur.com/a/cB5n5rS](https://imgur.com/a/cB5n5rS)). This is good theme and better font for IDE.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/U63lkbR.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Previously Eclipse, previously Sublime, previously VSCode. I got tired of wasting my time screwing around trying to find the perfect IDE + plugin combination for my workflow after a tree trial of PHPStorm proved that already existed in a single package. 
Sublime 3
Same!
I'd rather keep my RAM.
I use a couple for various purposes. I'm a fan of Coda 2 for light projects, as it works as a very lightweight SFTP tool as well as editor - no uploading/downloading, changing you make to files are made directly to the server. That being said, the actual editor is trash so it gets annoying for anything heavier. I use Sublime whenever I have to actual use repos, since it's by far the prettiest - especially on a retina iMac. That being said it has an annoying bug with some Javascript where it doesn't close certain tags, so if I'm using heavy JS I'll switch to VSCode. I used to be a heavy Netbeans user, but the UI is just so trash that it pains me to use it nowadays. I've tried PHPStorm but it's basically a slightly faster Netbeans with a better UI which only works with PHP. The UI still isn't even close to Sublime, and if I'm having to use Git/don't need SFTP for a project it doesn't particularly have more features than Sublime. 
I gave vs code a go but I'm back. I'm back, baby!
Lol
I do agree with that its not 100&amp;#37; accurate with all the possible feature but it does the basic to medium level of job perfectly fine but in the event of Very advanced level of feature yes Fpdf and other Pdf library is preferred choice. In my case i use that one because i want simple PDF invoices and etc with simple feature its i end up implementing very easily and it saves a lot of time of development. 
60% phpstorm 40% vim
Paying $90/year for a single-language IDE that doesn't have particularly more features than Netbeans seems like insanity to me. VSCode is free and does everything that PHPStorm does and more, without only a couple esoteric features. But I still prefer Sublime whenever possible... 
Zend Studio and hating it. I bought Zend Studio 5.0 with Zend Encoder some 12 years ago or so, and I liked it just fine. It was a year license, but I realized that as long as I set my system date within that period, I could open it and then set the date back to normal. I had worked on hundreds of projects within it, so I was quite comfortable and the IDE did not impede on making progress. I kept using this outdated version for over a decade. It was dated and the debugger was stuck at PHP 5.x. It lacked support for namespaces. Well, eventually, it just stopped loading. Perhaps the config file was corrupted, but either way, I took this as a time to finally upgrade to a modern version of Zend Studio. The worst part was I was actively developing on a long-term project, so this made it impossible to work until I got the new system set up. So, I began using Zend Studio 13.5 and it was horrible. It was no longer an IDE created by Zend, it was instead Eclipse with some Zend stuff tacked on. Worse, everything I liked about the older versions of Zend Studio were gone. No more line wrap option (that maintains the line number), all the keybindings I had been using for 10+ years were different, and stupid things like how I can't keep the debug window pinned to the bottom of the layout unless I never close it. The absolute worst is no more easy project management. Before, for every project, I'd be able open it up and have only the project files open. I'd close the project, all the files would close. Opening a different project would then restore where I left off, all the same files open again. Eclipse/Zend Studio does have "workspaces" which is something like project management used to be, but instead, **every option** is reset to default in a new workspace. So after getting all the key bindings set up the way I like them, after setting up the code formatting (which is individually defined by file type) for PHP files, JS files, CSS files, etc., that becomes unique to the workspace. Create a new workspace and all those settings are reset to default. There are some obscured ways to copy parts of the settings from a different project, but some of the settings do not allow it. Another thing that pisses me off, Zend Studio used to allow code searching files in **any** folder, but Eclipse/Zend Studio only lets you code search files that are part of the project. This is annoying because I often want to find a bit of code used in a previous project. Also, Zend Studio 5.x operated differently in ways that I really depended on, like duplicating content. Before, you hit Ctrl-D and it would duplicate what you have selected. In Eclipse/Zend Studio, it duplicates the entire line. This was a nice feature in the old version because it didn't affect the copy/paste buffer to duplicate, so I could duplicate a segment of a line and then paste something after it. No more. So, I've known about PHPStorm for a while, but I've not used it. I think I saw stats saying about 60% of PHP developers use it, so I'm definitely heading that way. I'll have to get accustomed to the new IDE, and it will cost me some time, but I am trusting that it must be a far better system.
atom
Tried out several. None better than Atom to me. 
Sublime + PhpStorm.
Sublime is the Fastest IDE out there. The sFTP package (not free) is worth every penny if you have no choice in the matter (no repo). Packages I use: [HTMLPrettify](https://github.com/victorporof/Sublime-HTMLPrettify) [SQLtools](https://packagecontrol.io/packages/SQLTools) [DocBlockr](https://github.com/spadgos/sublime-jsdocs) [BracketHighlighter](https://github.com/facelessuser/BracketHighlighter) [CodeIntel](https://github.com/SublimeCodeIntel/SublimeCodeIntel) [Sublime SFTP](https://wbond.net/sublime_packages/sftp) [PHPCS](http://benmatselby.github.io/sublime-phpcs/) [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter) 
Try FTPSync!
&gt; Sublime is the Fastest IDE out there. That's a really odd thing to say. If other IDEs are slow enough for you to actually *notice*, may I suggest you need to upgrade your computer? 
PHPStorm EAPs are free to use, but you have to upgrade at least once a month. 
Used to use phpstorm, but switched to NetBeans now. 
Komodo. And I seem to be the only one haha. Maybe because I'm not in PHP 24/7 but also a ton of JS and XML and JSON. Komodo seems to handle it all pretty well except for XML. 
I've used Dompdf to do some pretty complex layouts, such as generating Avery label sheets of "job tickets" for manufacturing processes, that really need to be perfectly laid out otherwise you ruin expensive sticker sheets. I really like it. I also like that I can basically offer an application view in both HTML or as a PDF download without doing a tremendous amount of work to recreate the layout with FPDF layout commands. Having said that, when Dompdf doesn't work, its a real pain in the ass to figure out why. And I've run into that scenario numerous times. But it's still the right tool for the job for me
As I see, I'm the only user of Atom :)
&gt;I used to sue NB back in the days, Why did you sue Netbeans, did it do anything wrong? :D joke aside, vscode is pretty solid for the broke one, integration with xdebug is easy, inteliphense extension is helping a lot, git, phpstan, what else? it only lack database integration I think
Nusphere phped I know it is buggy and poorly supported, but tabbed ssh, sftp directory view and standard IDE features make it useful to me since i spend probably 50% of the time in terminal.
I wish phpintellisense worked better on VSCodr for me because I'd love to drop PHPStorm for it as I already VSC for everything else (Go, Python, frontend)
You don't find it slow, cumbersome, and ugly? I used to use Netbeans, but then switched to VSCode and haven't looked back.
That’s exactly why I like Sublime. It’s simple. I’ve been a developer for the past 25 years, and I enjoy simpler things that get the job done. 
Not an IDE user. Vim, tmux, and a boatload of plugins. Gives me a very functional environment that works locally and remotely over SSH.
I didn't say it's simple. I just said it lacks the features that make it an IDE. PhpStorm somehow manages to pack built-in semantic analysis, autocompletion and refactoring in an interface that is just as simple. And just as fast, unless your PC is a decade old. Paper and pencil is even simpler. But does it get the job done? If it lets you do all the work and it doesn't help by doing what an IDE does best, I'd argue it doesn't. But to each their own.
Fine. I like it because it’s primitive and it helps me pay my mortgage. Anything else?
Upgrade your PC. :-)
Upgrade your PC and try an IDE some weekend. It may pay your mortgage faster.
^^^^^^Notepad++ 
NetBeans (development version) monokai theme, some notepad++, con emu terminal with git bash (git cola also) ;)
as said here [https://ux.stackexchange.com/a/53268](https://ux.stackexchange.com/a/53268) it depends, but for example I have something in between astigmatism and keratoconus (still doing tests to see what's the actual condition) and for me it's much easier to read on dark background. so I try to switch everything on darker themes. the reason for comments in yellow, is because by default dracula theme has dark gray background and comments are light gray so it's gray on gray and when it's a bit sunny it's really hard to read them so for me it's waaay easier when they are in light yellow
Thanks buddy 
how much per hour do you bill out to your clients? paying 1hr worth of your annual salary for a tool which _saves you_ more than 1hr seems like a pretty good deal to me. 
&gt; That's a really odd thing to say. If other IDEs are slow enough for you to actually notice, may I suggest you need to upgrade your computer? So much this. You don't see graphic designers dropping back to paint because "photoshop is too slow"... The number of developers around who are content to make half assed tooling choices so they can run on a 5 year old potato boggles my mind. 
Vim, tried phpStorm and is trully awesome, but I type really fast, and I can't stand a slower ide :(
Seems interesting, but it's not on PECL yet. I saw your PR you made 2 years ago: https://github.com/nikic/scalar_objects/issues/27 Anyways, interesting extension.
Don’t be ashamed. Be proud. 
vim
Atom ftw!
Really? In a sub full of people who likely make their living by writing code you're going to encourage people to pirate software?
You can get DB integration with SQLtools. 
Yes! I have been using KomodoEdit for years. 
If you're using vim, make sure you install the [PHP Language Server](https://github.com/felixfbecker/php-language-server) plugin. Nothing else for vim or nvim comes close to it in terms of code completion and finding definitions. Another must-have is [Vdebug](https://github.com/vim-vdebug/vdebug), unless you enjoy printing stack traces and var_exports all over the page, then hopefully removing them before you commit, and adding them all back again the next time you need to work on something complex.
Intelliphense is much better but still requires a manual reload once in a while. Still worth it to me though.
Phpstorm. The first thing I did when I became tech lead was make it mandatory for every dev at my office. 
If there is noticeable delay when you type characters in PhpStorm, vim is the most heavyweight editor your computer can handle anyway. I would recommend the vim keybindings plugin in PhpStorm, but see above first, because you need at least 2 GB of RAM to run PhpStorm and your computer is probably scared by such a big number.
&gt;with GNU screen Lol no vertical split
I used that, but then switched to First Code and enable Ligature support. So beautiful.
I'm not sure if your comment is full of toxic waste or if you're going real. The vim plugin for most ide's are mostly incomplete, when I used phpStorm I just learned the phpStorm shortcuts. As I said, phpStorm is awesome, but I can't stand that little delay it has.
Notepad.exe
I used NetBeans then changed to Sublime. Sublime is way better.
VS Code. Most of the time, PhpStorm pisses me off. It seems slower every year. The xDebug extension for chrome w/PhpStorm is pretty handy though. 
I've been programming since 1997 and also use Sublime as well. The happiest I've ever been with a text-editor/IDE. Does everything I need.
I tried ligatures, but they were too distracting 
*Fira
These are good! https://www.material-theme.com/
Yep
I am not sure if they are still around but well over ten years ago I worked for a music company that was a subsidiary of AMTC and major competitor to Muzak... Anyway when I first got there they had a contract with Sirius to play their catalog of music they owned. I worked a quick flash (this was many years ago) and PHP/sql system to 'simulate' radio stations for them. I had actually already done most of the stuff for an individual project, my idea back then was that a radio station streaming stuff that was promo material could circumvent some copyright laws, so long story short, besides interacting with their database I already had a nice system. I had a terrible manager, though, and they also requested I pretty much disable everything. Everything. No visualizers. No volume control. No track skipping, obviously ... But it was depressing. I spent a lot of time just disabling features. I left them with a highly functioning and nearly complete project, but the reason i am posting here, is because it was incredibly easy and projects like this are even easier now with modern technology. I also recently did something very similar for a friend that is an artist. Replace Flash with HTML5 and JS, good to go, PHP and SQL on the back side... Very simple and fun project with instant rewards.
&gt;If there is noticeable delay when you type characters in PhpStorm, vim is the most heavyweight editor your computer can handle anyway. MUST be the computer. There's absolutely no way the program can be anywhere close to having faults. My 500g SSD with 16g RAM and 2.8ghz quadcore system must not be capable of handling anything more than vim. That's it. I guess I'll need to upgrade to something more modern and capable.
What if your editor is just plain Notepad though?
Has it improved recently? Last time I tried using it I ended up... rather sad. Then again maybe it was fighting with another plugin. 
Tonight, I am go asleep. Please to add me a friend and contact me, I would like discuss you this project and idea, maybe hear your progress. Working on something very similar ... Slowly.
PHPstorm at work, Visual Studio Code at home.
Yes , I'll always set my apps free they will end up there anyway.
$90 is still more than VSCode, which is free? I don't understand your point...
VS code will be very close in functionality after you've installed a smattering of plugins. I switched from PhpStorm to VS code and haven't had an urge to go back in 6 months.
My point is if a paid tool does one thing that a free alternative doesn't, and that one thing saves you cost of the tool over the life time of that cost (1 year, in PHPStorms case) then it wins the cost benefit argument and you should spend the money. I pay for PHPStorm happily, because no free alternatives I have tried have lived up to the lofty claims of their proponents that they are "just as good" or "do as much", and because the features on offer pay for themselves hundreds of times over the course of a year. 
Emacs, specifically Spacemacs. The code completion isn't as slick as I would like and the plugin for Xdebuy (geben) is a little clunky, but I love the interface and being able to move between files quickly.
If there are features you can point out that Netbeans and VSCode (both free) don't have, I'd be interested to know. Because I can point out about a thousand the other direction... 
+1 for Fira Code. I love it.
Work PC (read: expensive rock) has been long overdue for an upgrade. I don't see any plan for that happening anytime soon. Probably going to opt to work from home more often pretty soon here.
I’ll be your friend :)
I discovered PHP Language Server (and more importantly, [the LanguageServer-php-neovim plugin](https://github.com/roxma/LanguageServer-php-neovim) in mid-April, and it has worked flawlessly for me since then. If you're having trouble with the setup, [here](https://pastebin.com/YgFQhFUT) is the complete configuration I use for it (my `init.vim` is larger, but these are the only PLS-specific things). Neovim-only, Vim 8 will not work. Another thing I forgot to mention for PHP in vim is that you absolutely need Syntastic and phpmd for code linting/syntax checking.
You seem to think I'm here to convert you. I'm really not. You asked why would anyone pay $90 a year for something when free options exist. I explained why. Your claim though that VSCode and/or Netbeans have "about a thousand" features that PHPStorm doesn't seems pretty hilarious though. 
\+1 for me, so that makes 2 of us.
Vscode. I don't know any better
Thanks, I'm gonna give these a try at work today. I've been working with stock since vscode was released.
&gt;I'm not sure if your comment is full of toxic waste or if you're going real. I was mocking your slow computer. That was mean of me, I will stop. &gt;The vim plugin for most ide's are mostly incomplete, when I used phpStorm I just learned the phpStorm shortcuts. The vim features that IdeaVim's vim emulation lacks include plugin support, ex mode, and help pages. As far as bare bones vim stuff, it's more or less all there. It's a little frustrating to need to learn a different set of shortcuts to do everything than non-vim PhpStorm users have learned, but it's complete and everything is there. &gt;As I said, phpStorm is awesome, but I can't stand that little delay it has. You made me unsure of myself for a second, so I had to go back to PhpStorm and make sure there is actually no delay. Yep, no delay. I won't tell you to get a better computer, just don't try to use PhpStorm.
What plugins do you use for vscode? I get phpstorm through work but am scared to use if for some gigs.
I personally prefer [phpactor](https://github.com/phpactor/phpactor). I haven't used PHP LSP, but a friend tried converting it to me and was complaining about flaws that phpactor handled flawlessly. I'm not sure where they stand these days (this was back in Oct/Nov) but it's at least worth a mention!
Netbeans user here. Never understood how IDE can be slow.... It is just an editor with extra stuff. 
When you do make the switch be sure to check out Jeffrey Way’s video series on mastering PhpStorm on [Laracasts](https://www.laracasts.com/series/how-to-be-awesome-in-phpstorm). 
My IDE/Text editor history: notepad, notepad++, phpdesigner(so fast, but no money, junior), netbeans, zend ide, notepad++, sublime 2, sublime 3, phpstorm. Now i'm stable at sublime3 + phpstorm. Used to be vim/nano but they suck in epic proportions so I use sftp and sublime to edit server configs
VSCode with extensions. Sadly nothing i have found yet has intelisense for php traits in the inheriting class methods list.
I've only seen phpactor while looking around and have not tried it, but it's good to know that there's multiple options out there for php development on vim. I can't comment on whether the flaws in PHP LSP still exist without knowing what they are, but I personally have not had any problems. Maybe I should be more picky.
E mother-flipping MACS
&gt;MUST be the computer. There's absolutely no way the program can be anywhere close to having faults. I am not blaming your computer. Just don't put it in situations it is not comfortable in, like running IDEs. &gt;My 500g SSD with 16g RAM and 2.8ghz quadcore system must not be capable of handling anything more than vim. Your specs don't mean much if you bog your computer down with things like desktop managers, Windows 10, or anything from Apple.
No
I have an iMac Pro and PHPStorm still has the occasional lag spike. And it'll happily consume so, so much memory. With that said I could never downgrade to Sublime Text, but Sublime is still faster at loading files that are &gt; 25mb, and faster search/replacing them as well.
I used Atom for long time, but switched to VS Code this year since it has better intelisense IMO. And VS Code even has One Dark Pro -theme, so color coding looks familiar for me.
&gt;You asked why would anyone pay $90 a year for something when free options exist. I explained why. But you really didn't - you didn't provide any examples of features that PHPStorm has that Netbeans and VSCode don't. I'm genuinely asking "okay what are the features that save me 'countless hours' " and you're randomly getting defensive. I'm genuinely curious - if there are features that I'm unaware of that will save me "countless hours", as you say, I'd like to know what they are. &gt;Your claim though that VSCode and/or Netbeans have "about a thousand" features that PHPStorm doesn't seems pretty hilarious though. Not too far off when they both cover a dozen languages that PHPStorm doesn't, eh? 
You have had the heretical audacity to speak ill of our Lord and Saviour, PHP Storm. Why, this Brother was merely trying to show you the Storm in your heart that you have so readily turned your back on, for the good of none less than your very soul. Repent, or spend all eternity in the fire damnation of shill-vote hell.
Get so used to PHPstorm. Now trying to learn the VSCode. Not even close to PHPStorm but friendly with my laptop battery 
Then get a faster PC like MacBook.
PhpStorm is an absolute blast! But it’s not free... Visual Studio Code is very good and lightweight... surprisingly NetBeans is good for PHP too...
What? No. I meant a facility akin to goroutines or Erlang's spawn primitive.
There are numerous of plugins that you can use to extended the features. https://packagecontrol.io/ 
I'm running phpStorm on 3.3 GHz/16 GB 2016 MBP, and honestly it's become the slowest piece of crap I've ever used. Worse every year. Ran okay on my old 2013 MBP. I barely use any plugins at all (and I've disabled most), but it periodically just slows down so much that it ignores key strokes for a second, and it regularly loses autocompletion completely. I use it both for PHP and JS (Flow). I've tried switching to VS Code but there's so much stuff missing I immediately give up and go back.
There are, indeed. But when your foundation lacks some, well, foundational capabilities, the resulting plugins are quite wonky. The "I" in IDE stands for "Integrated". An IDE also has plugins, but it has its head screwed on right about a range of development basics it has to cover out of the box.
Phpstorm but I'm not sure anymore. Thought it needed better hardware to run smooth as butter. Got new hardware and still isn't smooth. But it's not like other IDEs are any better. 
Anything Jetbrains, and VS Code.
&gt;Work PC (read: expensive rock) has been long overdue for an upgrade. I don't see any plan for that happening anytime soon. Probably going to opt to work from home more often pretty soon here. it's not that difficult to accidentally experience some hardware damage so that a new rack is gonna be required 
I've been programing professionally since 1984 and I think you're nuts. :) But we all like different things.
Don't know better one, really
Sure... you're allowed to have both tools installed... I have various text editors installed for manipulating large files, etc etc... if you have a 25mb code file you need to work on though, that might be worth investing some time in fixing. I tend to only get lag spikes if i have too many projects open at once, and too many VMs running at the same time. 16gb MBP for me... rarely skips a beat.... not frequently enough for me to throw away all the convenience the tool gives me 
Let's see your portfolio site. Here's mine: www.typographist.com
In case there are not enough answers for you, https://www.google.com/search?q=site%3Areddit.com+inurl%3A%2Fr%2Fphp%2F+what+ide
Flash Player? No. I don't really have a portfolio site. But you can check out github.com/mrunkel for a smattering personal projects. It's amazing how far we've come as an industry. My IDE is 26 times larger than my first hard drive. :)
&gt; Sublime is the Fastest IDE out there Not to be pedantic, but Sublime isnt an IDE. It's a standard code editor. IDE's are generally a lot more advanced in terms of code integration. There are some great plugins for sublime that get you part way there, but compared to something like PHPStorm it can't really be considered anything close to an IDE. That being said, I use it and love it :)
Nobody mentioned UltraEdit yet so here I go. 
Ok, you win old man. ;) I didn't start professionally until 97 but my dad bought me my first computer that you would hook up to a TV. It used tapes to store data and was slow as hell. I was the first kid in my school to have a VGA color monitor which was pretty cool while all my friends were using black and white monitors. I spent most of those years modifying my autoexec.bat and config.sys files on my MS-DOS machine to get games to run. Good times. I clicked the follow button on your github page. I don't really have any public projects because I'm working on building my own company at this time so all my code is private. It's nice to talk with a guy that's been around the block though. :) 
I keep looking at it, but I spend as much time writing javascript as PHP and it doesn't look to me like the js support is as good as Netbeans, which is my current IDE. Am I mistaken? 
What IDE/text-editor do you use for PHP?
PhpStorm with Darcula theme :)
PHPStorm. If you take a weekend to really learn it, it is awesome. Especially for large codebases and debugging. For PHP I’ve worked with textmate and NetBeans in the past. I’m a big fan of JetBrains and have a personal “all tools” license with them for three years now.
iirc all of the LSP features weren't available yet at the time (all meaning what's available in agnostic LSP, not PHP specific). I like phpactor a lot - it's fast, has multiple options for finding usages/references, and the only thing it doesn't do that phpstorm does is use laravel ide helper. That said, newer versions of laravel don't need that, and I don't really find myself missing it, either.
How sinister. I love it.
Did anyone mentioned Geany? I use Geany as my main editor, I also use Nano from time to time (but beside I also have VSC, Atom, Brackets, and even LightTable). And of course I'd like to recommend everyone to discover Geany.
I just don't like constantly paying for updates (maybe it's because I'm the CEO and I have to pay for the software? haha). I'd probably try PHPStorm if it were pay once and use forever. Also for debugging, I've never had trouble debugging and I have a lot of pride in my clean code. I make sure there aren't any errors on both the server and client side. You'll never see any errors on stuff I push to production, like even in the browser console for javascript stuff, it'll be free of errors. I've used NetBeans in the past. I thought it sucked. I spent so much time customizing it and it was still really bad. When I was working on C# projects I used Visual Studio. I thought the best thing about it was the hotkey to take you directly to the class definition. I guess that would be nice to have in Sublime. 
That is a list of requirements for a junior role that belongs on /r/recruitinghell 
I've been using it with PHP Integrator (now Serenata) for a long time, but recently some issues prompted me to look elsewhere. Now I'm using PHPStorm, but I miss a bit the simplicity of an editor which isn't a full blown IDE.
&gt; Sublime is still faster at loading files that are &gt; 25mb Thanks, I got cancer after reading this sentence.
the difference is that some languages defines "unsafe" blocks explicit. Like Rust for example.
Don't hesitate to create a new library/project even if there is already other libraries/projects on the same topic. Find a subject you like and try, you will learn a lot and it will be fun. For example I love the concept of immutability so in my free time I develop libraries for common issues using immutable objects only. My php skills improved so much by doing this.
I've gone from Dreamweaver (3 and MX - when it was still Macromedia and not Adobe) when I first started out, to Notepad++ (which I did everything in for a good few years) to Netbeans, back to Notepad++ when Netbeans started to churn on windows, then back to 'beans when I switched to a linux desktop. Interesting thing, Netbeans runs faster (particularly find-in-files) on a Linux OS than it does on Windows, I can only assume there's something with the underlying system calls in the compiled Java that runs a lot better. Used Zend Studio for about a week after I got a perpetual licence for completing the PHP cert... never again. Now I'm using PHPStorm (light theme, with context highlighting changed to match Netbeans - because I used it for too long), and can't see myself going back to anything else as my main editor now. So many useful features I didn't know I needed until I had them. I still use notepad++ from time to time as my favoured text editor (not an IDE).
Ads are getting smarter. But this course is bullshit. It doesn't even hint at DRM. Music companies do not like non-drm streams. You'll be out of luck if you want to be legit. Spotify and just about any other music streaming services has a very cool DRM in place, where you can't just go and straight up rip all their audio files. They serve a proprietary format, often streamed in chunks and not a single file. With that being said, this course probably doesn't teach anything outside of setting up a LAMP/WAMP stack and using the HTML5 API to serve audio with javascript controls. This is why we dumped flash btw. 
Not sure why this is getting so many up votes? Maybe bots? It's simply blog spam promoting udemy affiliate links 
PHPStorm all the way.
PhpStorm.
VS Code, I like the idea of one ide for everything. Probably PhpStorm offers better tools for php anyway
&gt; You don't find it slow, cumbersome, and ugly? ..... I used to use Netbeans, but then switched to VSCode You're comparing Apples and Oranges. One is a full fledged IDE and the other is a text editor built in a web browser. Comparing Apples to Apples, Netbeans, PHPStorm and Eclipse all use roughly the same memory, same load times and same CPU percentage.
VSCode as it helps with everything, not just PHP. Working with JS/Sass is just straight up fun. I'm coding on Windows (as we have a C++ project for windows servers on the side, crazy I know) and having VSCode integrate so fucking well with WSL bash is so fucking awesome. Recompile static files on change all while in the IDE is just awesome. I basically made a fucked up Frankenstein toolchain with WSL and it just works under VSCode. I have NodeJS and PHP 7.2 installed over at the WSL and my VSCode works with them, since I found installing PHP easier on linux rather than Windows :D I know I'm wrong but I felt like it and I went for it and it worked out. 
True, but like TypeScript, for which "any" is also explicit, a "mixed" typehint would be explicit as well, that' the whole point of having it.
I've used Sublime and VSCode in the past and still use Sublime for quick edits and larger files because PHPStorm and Netbeans choke on them. I used Netbeans for years (about 5) then my new job offered me a license for PHPStorm so thought why not. I've been using it for 8months now and I've been left feeling totally underwhelmed and really can't understand the hype around it when compared to Netbeans. Yet to come across a single feature where I thought 'ahhhh this is so much better than Netbeans' or 'I wish Netbeans had this'. They are very, very similar in feature sets but the bonus with Netbeans is that it supports multiple languages so if you work with multiple languages (I have in ever job) then it's great doing it all in one IDE. Also my 2 biggest gripes with PHPStorm is 1) you need to open a new Windows for every project, this is a nightmare when working with microservices, even more so when the services are in different languages (PHP, Java and GO) Netbeans absolutely dominates PHPStorm in this area. 2) Netbeans automatically scans new files and provides intelligence (code completion, documentation etc) on those files. In PHPStorm you have tell it to sync the folders where the new files are which comes a pain over time. There's nothing 'bad' about PHPStorm it's a very good product but I find it hard how they can justify the price tag when it does nothing (very little?) extra than what Netbeans does for free.
Netbeans!
Microsoft is trying to compete with Google by offering WP support..
Because it's not LTS yet.
That's more C and less PHP.
Why not Linux? I develop on Linux and PhpStorm as well as VSCode and literally anything else, works well on Linux - you get the added benefit of having a Lenovo (recommended) laptop instead of a MacBook, which has USB ports and a proper docking station if you're into that sort of thing.
Assuming that you have your regex available, the simplest solution I see is iterating over all properties and returning true if any of them match. Something like $res = array\_filter($arrayOfBooksObjects, function ($e) use ($regexPattern) { $isMatch = false; foreach(get\_object\_vars($e) as $property) { if(preg\_match($regexPattern, $property) !== false) { $isMatch = true; } } return $isMatch; }); might do the trick. 
Don't be proud. Be ashamed.
Netbeans used to be best defacto php editor. For a long time, it was the best. Then phpstorm smashed it's head in with a sledge hammer and the rest was history. I mean, I had some major issues with netbeans slowing down on me bigtime, and then said F it, I'm moving to phpstorm, hope it runs faster and doesn't crash on me all the time. Then phpStorm turned into my favorite. Their JS integration is almost if not better than webstorm for framework integration, doesn't make sense but it just works better for me.
The last one reads a lot better. Also you should use strict checking: `variabele === true`.
The style of the left is called a Yoda condition. The benefit is that if you make a typo by writing "=" instead of "==" the compiler will throw an error, rather than assigning True to x. Source: [https://en.wikipedia.org/wiki/Yoda\_conditions#Advantage](https://en.wikipedia.org/wiki/Yoda_conditions#Advantage)
IDEs worked perfectly fine on the fastest computers 15 years ago, why are they so slow on 5 year old PCs today?
I personally prefer the second variation as it is easier to read in my mind. $isCompleted == true reads much better when scanning code. However the argument for the first variation is that if you mistype throw a syntax error and you will know immediately. In the second variation $x will be assigned the value true. As an example, the following will throw a syntax error if (true = $x) This will assign $x the value true if ($x = true) 
 doing this is fine as it'll let the next developer know that your typing is clumsy ^_^
If you have a nice IDE then it will detect errors like this for you. e.g. PHPStorm, in Settings go to Editor =&gt; Inspections =&gt; Probable bugs =&gt; Assignment in condition (tick)
There are none. The first one is supposed to protect against accidentally assigning to $x, but if you can remember to write `true == $x` you can remember to put double equals (of triple for strict comparison). Plus there are plenty of analysis tools like CodeSniffer that will pick up assignment in if clauses.
How do you deal with formatting HTML code in PHP files?
You may as well ask me why Far Cry Primal doesn't run on your Nintendo 64. Hardware platforms evolve. With that, the software platforms built on it also evolve. And with that the system requirements for applications built on top of them also evolve. You may want to refresh your memory and see what an IDE from 1 years ago did, you may be surprised how much you take for granted. Also IDEs from 15 years ago were written in C/C++ from teams dozens times larger than today's IDE teams, and they took longer to update, which in the modern ever-evolving landscape of new standards, updated languages, and heterogeneous developer workflows is untenable. In theory, software can always be faster. In practice, you have limited resources, money and time to ship a product and you need to keep up with the ecosystem. So it is what it is. You can adapt, or be left behind.
I did this too. I enjoyed using Sublime for my CodeIgniter projects but I switched to Vim eventually.
Only thing that took me back to ST3 was the lack of HTML code formatting in PHP files. Tell me, did you buy an ST3 license? I still cannot justify paying $80 for a text editor :(
https://github.com/swoole/swoole-src/blob/master/README.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [swoole/swoole-src/.../**README.md** (master → a86521f)](https://github.com/swoole/swoole-src/blob/a86521fbe15fd3fd24b72461f56ca3cbc9975599/README.md) ---- 
I'm not saying that it couldn't have been designed better in the first place, but that fact of the matter is that it wasn't, and years and years have passed since and many projects depend on it the way it is. Just because something wasn't designed correctly in the first place doesn't necessarily mean that fixing it would deliver overall value for the community.
Rapid PHP. It's simple and I like it a lot. Tried PhpStorm but hated it.
&gt; slow, cumbersome, and ugly Can't deny that. I'm a longtime netbeans user and that Java look is ugly as hell. Pretty sure it's as slow as it ever was, just hardware is fast enough now so I don't have to twiddle my thumbs for 40 seconds while it starts up. But it has all the features I want (intellisense, pop-up PHP manual, full xdebug support, integrated FTP) and I know all the goddamn keystrokes now!
Except that sometimes it's very useful and not considered an error. ``` if($result = $database-&gt;execute()){ // successful execution, do something with $result } ```
Hooray, I though I was the only Geany user! I use PHPStorm at work but Geany at home. What plugins are you using? I have the tree explorer plugin and that's about it!
Mousepad (https://github.com/codebrainz/mousepad) or Geany (https://www.geany.org/) at home. PHPStorm at work.
It is.
But is there a reason why not simply use if (x) or if (!x)
Thank you everyone. Ill stick with the latter. Ps. I encountered this in a pho code hence posted here. Probably got downvoted cuz not pho specific i guess
mostly because of this https://i.imgur.com/DK1ckG8.png
Atom 
I personally prefer to go the long way about this one. Don't know why, just do.
I don't. Frankly I've tried Atom and Brackets before and I succeeded in setting up neither to be able to deal with that, so I'm starting to assume this is normal, I'm just not supposed to mix PHP snd HTML together, it's bad practice or something. And when I have to, for WP themes for instance, I format it manually. Also, I haven't explored all the possibilities. I still have some trouble with my HTML Beautify. I just know that so far, as far as customization goes, VSCode beats everything else I've tried so far.
[ShiftEdit!](https://shiftedit.net) A browser-based IDE written in PHP for PHP! * Realtime collaboration * Terminal * Git integration * Code completion * FTP/ SFTP etc and loads more Full disclosure: I'm the author.
Does sftp save to the server when you hit ctrl+s? 
Yes. $x === true checks that $x is of type bool and equals true. !$x accepts a variable of any type, casts it to bool (using PHP's weird casting rules) and then compares to true.
FALSE == $x may have better readability if you are evaluating an expression rather than a variable. Since its a weird syntax, it becomes clear from the start what your intentions are.
* DOWNVOTE ALL LARAVEL THREADS * REPORT ALL LARAVEL POSTERS 
Still using Komodo 9.3.2, it's fast and everything is customized to my tastes. The only thing that I'm missing is some way to filter the file tree as I type.
Care to share your setup details? I too use Vim but I am in the early days of setting it up properly
Extract interfaces: [https://i.imgur.com/bhuEHTL.gifv](https://i.imgur.com/bhuEHTL.gifv) Refactoring code, rename and it'll change the references, namespaces etc. easier TDD: Full namespaced docblocks: [https://i.imgur.com/cWVqjhm.png](https://i.imgur.com/cWVqjhm.png) Extract code in to methods: [https://i.imgur.com/DXz9Lgo.gifv](https://i.imgur.com/DXz9Lgo.gifv) Constuctors from properties tonnes more... Download the early access for free, and you'll see how superior it is.
Yes, it’s an optional setting. It can update both remote and local copies if you want it to do that. Plus, It can do a 2-way Sync to download/upload files from/to the remote server. It can also use your SSH key to login instead of a password.
Because 1 more line in your code is the worst thing?
That's 1:1 what I was going to comment, lol.
&gt; It’s not possible, sorry. If the application is highly coupled on data level your plans are doomed, regardless if you successfully decouple other dimensions. Why?
What the fuck is wrong with you?
Thank you for clearing that up! 
I don't want an extensions. I want it embedded in the language. And I want goroutines - not an event-driven asynchronous &amp; concurrent networking communication framework. I want something as simple as `go f($a, $b)`.
&gt;I'm wondering *why* you would pay for stuff when other stuff is free. Because the thing you pay for could be more valuable to you than the thing that is free.
This, I cant recommended this enough. I moved from Netbeans to Phpstorm and the difference it made was amazing, such a nice IDE to use with plenty of features
£70 a year though, keeps us amateurs using our notepads
Vim. To those that use PhpStorm, do you not care that 99.999% of your RAM is eaten up by your text editor??
Symfony is my favorite PHP framework, I use it daily 
So I've not used Zend studio since version 10 or 11. I hated it too but it seemed like the most appropriate IDE as it was made for PHP. One day I tried phpstorm. Never opened Zend again. Give it a shot, you may never look back.
I use the exact same setup.
Two main contenders are symfony and laravel. In Europe Symfony is more used while I heard laravel is more used in the US. Both will land you good jobs and its not very difficult to switch between b them. 
learn symfony components, every major framework including Laravel is build with those components
&gt; see what an IDE from 15 years ago did, you may be surprised how much you take for granted these days. Like what? I can’t think of anything in newer IDEs that should slow them down. However you are right about the C/C++ thing, which is a shame. Instead of making the faster tools better (easier to develop with), we just used slower tools instead. 
1. Learn how to use Google [site:reddit.com inurl:/r/php/ best framework](https://www.google.com/search?q=site%3Areddit.com+inurl%3A%2Fr%2Fphp%2F+best+framework) 2. Learn to read the sub rules before posting https://i.imgur.com/DK1ckG8.png 
Probably something about backwards compatibility or working with either UWP, IE or Edge
vscode with vim plugins, i still want to use just vim, but the indenting plugins could use some rework/updates. Also there are small little bugs that won't get solved. I kinda feel that the vim IDE is outdated, but the vim way of coding is the best ever.
Guys, why do you assume it's a hardware problem?, I have a MacBook pro 2017 w/t 8gb. 
True, you wouldn't be taught that. Its how you teach yourself. But they were not asking how to learn critical thinking and problem solving, but how to learn PHP.
I worked with Linux (Ubuntu/fedora/Debian) for a long time (like, 5 years) before changing to osx. "Anything else works well on Linux", there seems to be always a chance that things doesn't works well, so, going to osx what's a good thing :), I'm happier now. Btw, I miss those Lenovo docks, they're awesome
Then how will js and laravel shills promote their preferences? /s
I've primarily used Ubuntu the past 6 years when developing, and I've only had minor quirks, luckily. I can't stand macOS nor the MacBook keyboard, so it's a no-go for me - but a lot of people like it or has no issue with it; as I usually say: _whatever works best for you._ Lenovo docks are the best. It's just not the same with those one-cable "docks" that they use for MacBooks (from Belkin) or the Lenovo ones for the Carbon X1 - I love the ones with a dock connector at the bottom.
Symfony is a great choice : * Great documentation * Huge community * All the components in the framework are great and can be included one by one * The source code is sweet, I learned things while checking it. I don't know Laravel, so I can't really do a versus here, but Laravel is based on some Symfony component. So checking Symfony before Laravel seems a bit logical to me. Hope you'll enjoy the post graduation life.
Well, you are can try to mimic but the architecture is fundamentally different. Better like it like a monolith, there's nothing wrong with them.
I would say laravel. I have landed two good jobs and one visa sponsorship on laravel skills. Symfony is a bit low level which might be a little tough to digest if you are just starting with MVC. Laravel is fucking awesome I love this framework because it's so easy to get things done with it and it has adopted all the strong features from other frameworks and languages. When you expand your skill set you will find the concept going beyond php into js, python, ruby. Anyway long story short it's fun learn both if you can. Don't do it for the job do it for the fun that's when you really fucking master it. Along with php skills I would say focus on a good front-end framework as well I like both vuejs and react. They are the best and it will give you an edge over other devs. All the best. 
Hi, yeah you are not alone! :) I use the following plugins: + Hml chars + Class creator + Window splitter + GeanyLipsum + GeanyVC + Genius Paste + Doc generator + Pair tags highlighter And that's all. Sometimes I temporarely activate some plugin (as Markdown preview). Beside, I've added several syntaxic coloration themes, so that I can change according to my mood... :)
&gt;while you ride Laravel's dick. Laravel has a lot of hate here TBH especially its creator Taylor, he often gets trolled here
I'd highly recommend becoming a polygot and not to focus on just one language (and less so 1 framework). The speed you can pick up new languages tends to slow down as you get older and more 'comfortable' with what you already know. Now is the time to learn deisgn patterns and architecture, and try as many different languages as you feel you can manage.
Yeah I was hoping that someone would be interested in bringing it up to PECL, as Nikita Popov isnt interested in doing this himself. 
&gt;In Europe Symfony is more used Have to disagree here in the UK, the majority of jobs I've seen that mention just one framework its usually Laravel. Although I have noticed a very positive trend over the past 6months or so (maybe copy and paste job listings from HR departments) in that they list something like "experience with a major framework" and don't list names.
Have you looked for extensions? I've downloaded one for node intellisense.
**https://stefanoalletti.wordpress.com/2018/07/02/symfony-docker-behat-browserstack-testing-your-app-like-a-boss/**
how long ago did you try? PHPStorm added [zero-latency typing in 2017](https://blog.jetbrains.com/idea/2015/08/experimental-zero-latency-typing-in-intellij-idea-15-eap/)
When I changed to the Mac, I was between a high end Lenovo and a Mac, reading reviews everything points that, lenovos keyboard are the best, also, MacBook touchpad are the best. I'm happy with the keyboard of the Mac :) Yeah, I really would love to have one of those true docks of Lenovo. Anyway, my personal preference give more weight to a system with less quirks, buying a PC to use with Linux felt like a lottery for me :( 
Everyone is listing Framework X or Framework Y but it seems a pointless statement to make without any knowledge of your local job market. Do you own research and see what jobs are asking for, you will most likely find a lot of jobs ask for experience with an application rather than a framework unless you're strictly looking at a custom software houses rather than an in house business development team. The majority of jobs listed in my area are for Magento/Wordpress (and others alike) based opportunities and are being hired by local businesses rather than a dedicated design/development agency. That seems to be where my local job market is going anyway.
Learn the freaking language, ecosystem and software development practices relevant for the internet tech field. Knowing a one or two frameworks will never land you anywhere except agencies that work as a conveyour.
I use Emacs
I also used Zend Studio until I tried PHPStorm. Do yourself a favor and download a trial ASAP. 
How many hours a year are you coding? (£120/£95/£71 for the full IDEA pack, which is well worth it IMO).
Funnily enough I do more jobs in Symfony though, whenever I land into a project that has already started. I prefer it anyway but each to their own.
Laravel is good to get started, but I'd advise against using all its built in magic all the time (eg facades instead of contracts) or it will be very hard to get your head around where issues are arising.
Yes. phpintellisense.
It was the past year, I lost a bet and had to use phpstorm for 3 months, ended using it a bit longer. And learned a lot from it and end adding some ideas from it to my vim workflow..
Ah gotcha, thought you meant the default intellisense for it.
Still far from PhpStorm's autocomplete in terms of actual code analysis though :/
Maybe a couple hours a week for the past 10 years. I'm not a developer, just a hobbyist.
The question is more like "how many hours a year are you coding *that brings in revenue*".
I don't agree with the "Great documentation" part or just maybe i find it personally lacking.
Nah, it's still worth buying good tools for your hobby.
Eh, we have a code style checking that rejects things like that. Assignments in if-statements are disallowed. A compliant version of your example would be: $result = $database-&gt;execute(); if ($result) { // successful execution, do something with $result } This eliminates the edge-case of "sometimes it's wanted" by making it never wanted.
&gt; Give a man a fish and you feed him for a day; teach a man to fish and you feed him for a lifetime The fish is the framework; PHP design patterns are the fishing. Learn PHP design patterns, so learning a modern framework won't be a problem.
£1 an hour then. You're right, that's tricky.
Learn PHP good. And any framework will be not a problem.
reddit at its best. A good article scarcely gets any attention but everyone is eager to share their 2 cents about framework of ide they are using, 100th time in a row :)
Your ignorance is so blissful, who I am to disturb? Cheers.
&gt;r Please elaborate and educate us all with your wealth of knowledge.
bbedit
This.
New PHP question for online tests! //What is the output of this program? //$obj = (object) [ 'test' =&gt; 1 ]; //$test = 2; //echo $print . $test;
Don't learn a PHP framework. Learn other languages, other databases, look into deploying applications, learn more of the basics. Learn agile and waterfall development and how applications are built. Your first job isn't going to be your dream job and don't set your goals on one language. My first job was making Objective-C and iOS apps and building websites with PHP and Ruby. Now I'm doing Go and Node/Python. Things change. Spend some time now if it has to be PHP looking at Symfony and Symfony components. Look a little into Laravel. Then dive into other languages, get that first job and then go from there. 
I reject that pull request.
I love the Lenovo keyboard and absolutely despise the Apple keyboards - I don't like the difference in layout and the "Command" key with it's weird functionality :p I've found that _not_ buying the most recent Lenovo will make Linux work quite well - Ubuntu even have a compatibility section on their website where you can find whether a certain model will work properly and what doesn't work, if anything. I've been lucky with my laptops and had no problems with Linux. _YMMV_. As usual. `$(date +%Y)` is _surely_ the year of the Linux Deskop. ;)
&gt; if you have a 25mb code file you need to work on though, that might be worth investing some time in fixing. Might also be worth finding a new job if you have to work with that.
&gt; The sFTP package (not free) is worth every penny if you have no choice in the matter (no repo). Why don't you set up a repo? There are free private ones and it would take a hour or two to set it up.
Yes. I agree. But As a consultant sometimes I don’t get the opportunity to do that when I’m asked to fix a critical/time sensitive issue.
When I was fedora fan, they also had one of those pages with notebooks who works on fedora and what bugs do they have. I wasn't able to find most of them in Chile :/. Also, I Had a samsung notebook who, in certain version of Ubuntu, some drivers stop working. That sucks, pay a lot of money for a notebook who could be killed by Linux?, I pass, MacBooks from the 2010 keep working flawlessly if you put more RAM and a SSD on them
That's is why I don't like code editors for PHP. None of the "InetlliSense" plugins I tried worked as it should. Atom-ide seems promise, but not quite there yet.
Shameless plug -- [I wrote a guide for tuning performance using JVM options in JetBrains IDEs.](https://github.com/FoxxMD/intellij-jvm-options-explained)
Depends on the font really. I use Hasklig which has a pretty limited number of ligatures. Honestly I'd prefer to use Fira Code but it has WAY too many ligatures for my taste :\
Use the EAP and reinstall the latest version when the license runs out ;-) Worth the hassle if you are learning as a hobby. Otherwise just buy the damn thing or get a job at somewhere that will buy it for you.
Macromedia Dreamweaver MX.
vim xD (technically a text editor, not an IDE, I know)
I agree with you for advanced functionalities, but to begin with and start using commons and simple components, the documentation is adequate.
It got a new admin theme this year. Have you seen it?
Does anyone know of a library that allows manipulation of HTML (from user input) in a OOP way? There are a few that are decent for reading HTML - querypath/querypath, symfony/domcrawler, etc. Both are not meant for rewriting HTML. I have a few use cases in mind: - Pre- and post-processing HTML before it is sent to a form (WYSIWYG editor). - Validation of user input (of symfony/validator type validation). - Unit/integration testing. - Taking potentially broken HTML (from user input) and writing out valid/predictable HTML. I've scoured packagist and github, but have come up empty looking for something. Is this a library that would be useful to others, if I decided to create it?
Yeah, I bought it. It's one of my favorite tools.
One potential benefit is that you can make the person reviewing your code very angry very easily, should you want that. Other than that I see no real benefits of yoga conditions.
I have 12 docker images running, GoLand, PyCharm, Chrome with a bunch of tabs, 10 terminal windows, Atom, XCode with a iOS Simulator running, Excel and Slack. I still have 6GB of 16GB of free ram, not sure what you're talking about. My uptime is 39 days. Everything is quick. Maybe you should get a new computer?
Not sure if this is a joke or not? Chrome and slack are both known ram hogs. Will assume you're being sarcastic but if you're being serious I worry for you bruda.
It was important 25 years ago... now it’s only useful if you’re a hipster or you want to piss off code reviewer. On the serious side - it may protect you from accidental assignments, but any sane IDE checks for this. Honestly for 10 years I NEVER made such mistake and I don’t use Yoda Convention.
&gt; First Code Did you mean Fira Code? I'm a sucker for fonts and a quick Google didn't return anything fir "First Code".
Great stuff
PhpStorm recognizes many languages out of the box. HTML, CSS, and basic JavaScript are all recognized and can easily be formatted.
Interesting!
Damn autocorrect! Damn you all to hell!
Add LocalHistory and WordHighlight to that list - both are quite useful.
&gt; VSCode is free and does everything that PHPStorm does and more Ha!
Same. Switching from Atom to VS Code was very easy and even though they're both based on Electron, I find that VS Code is much, much faster.
What a sad, pathetic troll
PHPStorm + Material Theme UI (plugin) + my font settings 
&gt; I'd probably try PHPStorm if it were pay once and use forever. Technically it has a fallback license - so if you stop paying, you can continue using the old version indefinitely.
Ouch, you stuck it out for a long time. I had the same pain when they switched to an in-house IDE to a tarted up Eclipse, it was just a long time ago and that pain has faded. I think that was either version 6 -&gt; 7 or 7 -&gt; 8 when it switched. I use one Workspace and just check out projects into that Workspace, never liked or used the concept of multiple. Multiple Projects in the one Workspace has worked for me for years now. I'll likely move the team to PHPStorm when our next upgrade is due.
[Don’t start with a monolith - Stefan Tilkov](https://martinfowler.com/articles/dont-start-monolith.html) [Monolith First - Martin Fowler](https://martinfowler.com/bliki/MonolithFirst.html)
Yeah, if you want features, PhpStorm is the way to go. I use Sublime because it's just so fast, nothing else can compare.
Why do you worry about me? They are all running fine and everything is quick. Not sure what potato you're using for a computer if PHPStorm is slow for you.
PHP Storm for real
Regarding code formatting, I feel you. I do struggle with it here and there. I'm a vim guy so maybe the friction I get isn't as great as what you experience. I should spend some time to see if there are any packages for this problem. But I probably won't. XD
PhpStorm is the de facto IDE for PHP. I mostly use Sublime because it's just so fast but lets not pretend that PhpStorm isn't a fully-featured IDE.
Exactly. Good value doesn't always mean the cheapest thing.
PhpStorm has very solid JS support, it supports all the JS features that WebStorm does.
8 core cpu with 16gb ram and a new rx vega 64 D: I never said it was slow, I said it consumes ram it just doesn't need.
mosh (persistent ssh sessions), vim with syntastic (colorized with auto php syntax checking on save). And of course chrome and/or firefox.
There is great talks for this topics: - [Microservices and Rules Engines – a blast from the past - Udi Dahan](https://www.youtube.com/watch?v=Fuac__g928E) - [Greg Young - The Long Sad History of MicroServices TM](https://www.youtube.com/watch?v=MjIfWe6bn40&amp;feature=youtu.be&amp;t=9m47s)
because it's data coupling which the one of the reason why you can't scale your teams (data sharing)
VS Code. I'm too cheap to buy PHPstorm.
VSCode with PHP DockBlocker and PHPCS extensions. I've found no reason to use anything else. The git integration is awesome with it too.
Why are you working 12 hours a day? That's insane, stop doing that.
Just be careful, make sure to take care of yourself first.
Yeah, that's what I wound up having to do, I just use one workspace and open and close projects as I need to, but it doesn't close the project files, so I wind up with 80 files open combined from multiple projects because I know I'll be bouncing between projects. It's maddening.
"Zend: The PHP Company" Wha???
&gt; Instead of making the faster tools better (easier to develop with), we just used slower tools instead. That's not really on the menu... What makes "faster tools" faster is that they leave more low-level decisions to the developer. The developer, armed with a broader view of the project and the ability to negotiate tradeoffs, can use that increased control to achieve better performance. There's an inherent trade-off between level of control and speed of development. There's no such thing as having both. Whenever you can make minimum-decision tools faster you'll also be able to make maximum-decision tools even faster at the expense of more developer time. If you want to build more faster, you have to let the developer make less decisions (e.g. how to allocate memory), which means less runtime precision. If you want tools that keep up best with the speed the ecosystem evolves, you have to sacrifice computing resources for dev cost. That's just the physics of the situation
&gt; And it'll happily consume so, so much memory. As it *should*, unused memory doesn't do any work for you. Productivity applications _should_ strive to put all available memory to work for the task at hand, not use as little as possible. Memory is a use it or lose it resource, and your active tasks should keep it full of things that help it make you more productive
Those articles can easily be outdated. As you should know, things change a lot in industry. It was a genuine question and I wanted recent answers. This is my first time posting in this sub reddit. Also, learn how to not be such a butthurt nerd. You arent a mod.
Notepad ++ Lool
Yeah whores are free compared to escorts. Side note: No offense to open source as I have my code in the public domain 
Sorry my post should’ve elaborated a bit better. I already know a few different languages and databases but I just wanted to get more familiar with PHP
I have astigmatism and glasses and can't stand looking at bright text on dark background - too much strain. I'm used to dark text on light background for ages. Yes, I'm serial killer. https://i.imgur.com/jObeP1r.jpg
Oh you're right it's likely because I often have too many projects open. And 25mb files aren't code files. That would be impressive. Usually logs or whatnot
Also, a repo doesn't help you avoid SFTP if your code needs to run in a remote or otherwise isolated environment while developing. Having to commit code to run each change is using git like a bad file transfer protocol.
~80-90% of developers who claim they know PHP - do not. Not really (it is not just about syntax - there is much more to it). And that's why a truly good PHP developer is actually paid on par with other developers who work in seemingly "more expensive languages". And that kind of experience has to be deliberate and takes really long time :)
Not code files. Logs or other dump files
vim
Jetbrains created top notch IDEs. For quick edit just Sublime/vim though.
Emacs 90% and PhpStorm 10%.... investigating VS Code.
Netbeans is free is and a really good PHP IDE out of the box. Download the PHP version. 
Oh sure, all five topics happened in this sub last month. Terribly outdated
Oh yeah, I don't mind that it does. I'd rather it use as much as necessary when on my desktop. But it can sometimes really bog down systems that don't have a ton of resources available. At my last job I had an MBP with 2 VMs running as well as both PHPStorm/PyCharm and it was not ideal. Not sure I can blame the IDE for that though, possibly was just expecting too much of a laptop.
Netbeans. Just install it and it works. No messing around with plug-ins or themes. I've tried PHPstorm, very nice. But I didn't really see a reason to pay for it. I simply don't get Eclipse. Sublime isn't an IDE IMO, it's a code editor that you can enhance to make it act like one but that's too much work. Same for Atom.
You should tell all these butthurt nerds posting here that. Apparently I am a shill even though im trying to become more familiar with PHP.
I think his point is that what you said is 100% subjective. The myth you stated is that (might slightly misquote, on mobile) “monoliths can’t be as good as microservices”. You’re not talking about architecture here at all. This is just some opinion that you’re claiming is factually inaccurate. 
This is a PHP SUB. Don’t comment just to complain. This is where a post like this belongs
Phpstorm
Sure, if you're serious about them. We don't know OP's situation.
I switched from Phpstorm to Rapidphp , Phpstorm is a bit slow and get around 360mb ram while Rapidphp only 60. My laptop's battery likes Rapidphp so do I.
Vim
PHPStorm $8.90 a month Netflix $10.99 a month I use PHPStorm far more than Netflix, well worth the cost. If you can afford to eat McDonals once a month, you can afford PHPStorm.
Good post that sums up the situation : https://dev.to/greg0ire/why-using-yoda-conditions-you-should-probably-not tl;dr: don't
Phpstorm also saves time, so you can watch more Netflix...
\&gt;Yeah whores are free compared to escorts. Not only is this not true (lol) but it also doesn't validate the point in question...
Do you have any refactoring configured? Link to .emacs.d?
PhpStorm with zeus theme
\&gt;but lets not pretend that PhpStorm isn't a fully-featured IDE I'm not saying it's not fully-featured - I'm saying it only supports a single language. 
I use PhpStorm, but that rental payment and the constant upgrade nags bugs the everliving shit out of me.
darcula\* "dark-ula"
I started using Laravel in the past few months, and I actually understand most of how things work. (Plus, it's seemingly easier to find tutorials for the parts I don't understand.) When trying Slim beforehand, I was really struggling with it because of its complexity despite its slimness. And that was with a working knowledge of PHP. Your mileage may vary, but I'd personally recommend Laravel over Slim.
&gt; It was no longer an IDE created by Zend, it was instead Eclipse with some Zend stuff tacked on. A few months after I was forced to upgrade to this version, is the point where I started trying other tools. I bounced around a lot for a couple years before I came across PhpStorm. I'm really surprised that Zend Studio exists anymore. I was actually going to comment this as a joke answer.
That's the first year, it gets cheaper after that, and if you insist on not forking over some cash you can keep using the last version you paid for indefinitely. Really, PHPStorm is *not* expensive.
I used that for a while. I think Sublime Text has taken over the space where UltraEdit shined.
I mean, that's not really correct either. It has support for other languages like JavaScript.
gotcha. there's no benefit, so that's why you mention tools that help with this. lol.
sublime, vscode. 
Fibers are in-progess, and they look like they'll be the concurrency primitive adopted by PHP. Other than that, we have multiprocessing and multithreading extensions, and I'm currently working on an implementation of the Actor model for PHP ([phactor](https://github.com/tpunt/phactor)), which is following Erlang-like processes quite closely. I also intend on experimenting with the CSP concurrency model later this year in PHP. Concurrency is gradually coming to PHP!
no. just runnin' in php mode and get wild now and then with projectile. although now that it's mentioned i'll be looking into it. also, i'm esoteric as a mother flipper so my choices aren't always logical. if they were i'd be running phpstorm because that's the shiz.
Emacs FTW
 ( True == x ) Hard to read. ( x == True ) Easy to read. ( x ) Best
SF mono and Source Code pro checkit 
My only issue with it (I use it everyday and love it overall) is finding a a nice theme feels hopeless. I can't find a theme that I like that looks like the screenshot once I install it. Anyone have some advice on this? What themes do you all use that don't make PHPStorm look like it's from 2003? 
Netbeans still has its use cases and I use it myself. I still fail to see how PHPStorm is worth of the hundreds of dollars price tag it charges, and even the cost of renewing an expiring license is too much for my liking. Of course PHPStorm is better than Netbeans if both are free, but we dont live in ideal world. 
Vim
beautiful been looking for something simple like this.
I currently use the Darcula theme, with the Solarized Dark color scheme. I'm pretty happy with it.
Ignore all feedback on this Reddit. It' s a legit \*terrible\* place to take any kind of side-project or business advice. Scratch your own itch. It's likely other people have that itch as well. I've basically built my whole career out of this. If you ever want to bounce ideas off of me just send me a PM anytime. 
Have you tried anything so far? My first thought would just be create the connection and then have a while loop with a sleep inside to control the delay. 
You don't. Just run your ssh command every 5 seconds. I would setup what user, private key, and server name to use in your local [ssh config](https://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/) so you can keep your command simple. ssh &lt;server&gt; &lt;command to run server&gt;
I moved from PHPStorm to VSCode about six months ago. PHPStorm is nice, and I miss the refactoring feature, but otherwise I have no regrets. I tried to go back and couldn't.
That approach seems fragile. It would be difficult to suggest alternatives without knowing what type of "local" app it is. (i.e. a website, cli, etc.) If your local app has web endpoints, consider creating an endpoint to receive POST data and having the remote server push data the data via curl script triggered by cron.
Yeah, that is a definite downside. 
Then how I will end the connection with Server?
I have configured Public-private key authentication over SSH. But I am afraid of Overhead and resource it will use. Connecting every 5 seconds with a remote server over SSH looks resource consuming task.
when you're done with what you need, break outside of the while loop and close. Or have it run for a specific amount of time and break outside the loop and close it. You didn't give much of an example of what you were doing, you just asked how to get data every 5 seconds without re-establishing a connection. 
consider creating an endpoint to receive POST data and having the remote server push data the data via curl script triggered by cron - that's what I was thinking as I have mentioned it in a post. But it raises one more question "SSH vs HTTPS, which type of connection uses more resources?". It's a web app. 
Have you heard of anyone doing what you're trying to do with SSH? Honestly sounds ridiculous. Using an https connection the way it was intended to use is going to be more manageable and reliable than trying to keep an SSH connection open with PHP. 
Also, website benchmarks are measured in hundreds or thousands of requests per second. Don't worry about a call every 5 seconds.
Agreed, also p01ymath, don't be afraid to try stuff out. Build something out and run it, monitor the resources, see what works and what doesn't work. It's honestly the best way to learn and can come out with some creative solutions.
I was trying to get it working today and accidently deleted my home dir! 
Tried many different editors over the years and always come back to Emacs! 
what is a headless crm? what have you searched for on github or google?
Yeah, it is ridiculous. I think the right way is to go with https connection from remote server to my app's endpoint.
Yes, in case I go with http method, I don't have to worry about a remote server pushing data over API endpoint. that can be managed in millions too. 
I will try it 😇
That is good. I know this idea is not proper, but I think going with http method is good. Like I can create endpoint on my app and let remote server push data to my server using API endpoint.
Headless CMS is a thing. Haven't heard of a CRM system being headless.
If your server can not handle an ssh connection once every 5 seconds, you don't have a server.
Yah, I think CMS focuses on handling pages and content. Searching for a CRM that manages contacts at minimum. I plan to use it in accord with Stripe.
Means no front-end included. Also searched this sub
resource consuming? Sending a few TCP packets is far off \`resource consuming\`...
I think the best way would be to create an SSH tunnel but in lieu of that... maybe something like this: &lt;?php require __DIR__ . '/vendor/autoload.php'; use phpseclib\Net\SSH2; $ssh = new SSH2('website.com') $ssh-&gt;login('user', 'pass'); $ssh-&gt;write("ping 127.0.0.1\n"); while (true) { echo $ssh-&gt;exec('somecommand'); sleep(5); }
Isn't most of the functionality of a crm function as part of the front end?
So you are really just looking for a database with api?
If there are already "800 of X", then go find the one that you like the most and send them a few PRs. We too often have people running off to do their own things and too infrequently have someone going to help other projects. If you can't find one, or you find none that you like, then you've just identified a gap in the ecosystem worth filling. For example, I once built a Money value object library. But then I realized that there were already a million of these things, and [one of them](https://github.com/moneyphp/money) was pretty darn good and the community had already coalesced around it. So, I killed my own project and sent them [a PR[(https://github.com/moneyphp/money/pull/384) for a feature that I felt they were missing. I know they're [working on the next major release](https://github.com/moneyphp/money/issues/393) and could use help. Of course, I'd wait until you're working sane hours. 12 a day just isn't sustainable. Your marginal productivity there at the end of each day may well be negative.
- Generics - Covariance/Contravariance
Sure, here is my [.vimrc](https://gist.github.com/shadowhand/baee516a43f84253d1c13d034032f03f). You'll need a [Powerline patched font](https://github.com/powerline/fonts) set in your terminal to use `vim-airline`. My personal preference is [Hack](https://github.com/powerline/fonts/tree/master/Hack).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [powerline/fonts/.../**Hack** (master → a08b1f6)](https://github.com/powerline/fonts/tree/a08b1f611edecbbc3554aa1ee5aad51bdc68f318/Hack) ---- 
Yeah me too. It's clearer and less ambiguous IMO
There is no benefit, but some people think there is a problem. For those people, there are tools to help. IMO using PHP-CS is better than implementing a rule to write unnatural Yoda conditions. Which, incidentally, don’t even solve the supposed problem properly (eg writing `if ($x = $y)`)
That's relief for me. 
It can handle an SSH connection once every 5 seconds. Even the smallest VPS plans available nowadays can do that. But the questions is for long term.
You can use the __get and __set methods or __call for further dynamic coding 
Although your wanting this as a php feature , I’d recommend HHVM built by Facebook, it compiles the PHP code 
It’s just the way the Tokenizer reads it, just like var in JavaScript 
At home: neovim{,-qt}, at work VS Code I can't stand using PHPStorm: it's slow as hell (java), it's ugly (java), and by using it you indirectly support Oracle (java)
To say you had no prior PHP experience , you’ve done an excellent job with the whole site. The thing with MVC you want that perfect balance of: - Functionality (Both Code and UX) - Security (PHP, CSRF,XSS,SQL) - Speed (No one likes a slow site) What database approach are you taking? EAV, OM, or just flat tables, Do you Cache your pages? There’s a lot more once you’ve built your shell. A website is never truly finished , there will always be something. Class Abstraction/Overloading with PHP can be very useful but can impact performance depending how cleanly you write code. MVC might be do it once but sometimes it’s too much for what you need out of a class/function so be careful when overloading classes PHP7 - This is a major PHP release in which you can define return types , It also allows anonymous classes. This takes steps out of the compiler reduces run time, which in effect is better for performance, as well as validating the inputs into the functions. Also namespaces , they can help with your directory/class structure , helping with debugging. Simple PHP optimizations such as swapping “ quotes for ‘ quotes when there is no variables in the string can reduce execution time as well as memory used, again a bonus. Only optimise when your code works. As for security make sure you keep libraries upto date as well as keeping up with vulnerabilities to keep your site as secure as possible. Finally , Don’t forget as part of the new GDPR laws , your using cookies , make sure to alert the user! Overall though, the colour scheme is great and it’s nice and clean, you should be impressed with yourself, this is a project I’d expect from 2-4+ years of experience in the industry 
Thanks , i understand the function array_sum , explode too but str_split no idea what it is
I also use Atom with a slew of packages and it's actually really nice.
Not likely but I also do not know exactly what you're trying to get. It's possible an API endpoint (as mentioned already by /u/CryptoCricket1) or even a message queue may be more appropriate.
[https://3v4l.org/ZjYHU](https://3v4l.org/ZjYHU) Well i learned it and did it this way.
Man.. this is a response to both comments.. this seems like such a micro detail. I never once considered changing the font.. but yeah darcula all the way.
As I understand it, headless means just object oriented classes, relationships and services coded for you. That way you instantiate what you need, deal with post values yourself and then you can use whatever frontend you want (could be plain html or to another api your code talks to). There does exist php CRMs but they tie me into using specific frontend.
Yes. I think I found one built on Slim! [Thrilled](https://getdirectus.com/)
Really, a font change can make a huge difference in readability, it's one of the first things I do with any software that gives me the option to do so.