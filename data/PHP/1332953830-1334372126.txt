You can toggle all the comments by clicking the speech bubble at the top or you can hide groups of comments by clicking the red markers on the left or right. I have been thinking about a user profile option to hide or show all comments by default but I haven't implemented anything like that yet. I think adding different background colors for commented lines would get really confusing and hard to read on reviews with lots of comments. That's why the red markers are along the sides to stay out of the way but still indicate where comments are located. The code area is as big as I can make it without sacrificing the markers on the sides. I do have a feature ticket to investigate expanding a review box to the maximum screen width (or if possible go to full screen if the html 5 full screen api will allow it). But that is currently on the back burner while core features are added and improved. Since I'm not a designer I am hesitant to make the home page a list as I would most likely make it look terrible. Once I get an actual design I'm sure the home page will be better. I'm not sure how useful search would be since people can name their reviews just about anything (and sometimes don't name them at all). About the only useful search metric would be by language and that's already implemented. I do have plans to add some additional filtering options which might help if you are trying to find a certain review. Those options would only be available if you have an account though.
It is Drupal 6
I can't read it. Click the formatting help button underneath the comment box and format it, so we can help you.
Geez. Way to make me look unreasonable :) Generally speaking, my models deal with everything that manipulates the data. If it's specific to an object, it goes in the model. Sure, permissions may come into it (can this object be deleted?) but by and large, I see permissions as a control structure -- hence the name Access Control -- and thus belongs in the controller. As far as views go, I'm willing to concede that you can control it via the view, but I think it makes more sense (for me) to define what gets shown in the view and let the controller decide where the user can go and what the user can do. *shrug*
The gmtoffset parameter is a float, so thats easy enough to achieve.. 0.5, 1.0, 1.5 etc.
205k is not a major startup, lets clarify the definition of a major sartup then - either vc funding in millions - or millions of users , 
yes, not in a 2-year window
half of new startup are built with php - yes , but it seems to be half - which does not get vc funding and grow much
There is a light yellow highlight that follows the mouse so you can mouse over a line and it will extend all the way to the red marker if you need a reference. Sorry I suppose I need to invest in a larger monitor. I'll fix it so that it will size correctly and fit the entire screen. Thanks for pointing that out to me. If you would like to come up with a design for the site. I would love to see it. I am definitely reaching my design limits here and have it on my list to get a "real" design after I finish the next sprint or two. I see what you are saying about wanting to revisit a past review that could be lost. Maybe I could implement something similar to watching on github to mitigate that problem. Searching by title just wouldn't be a good way to go about finding a review especially if the creator didn't set a title. You could end up with 50 results called "Untitled" which would be useless.
We have no plans of switching platforms. We do however offer native implementations for iOS and Android, written in Objective-C and Java.
Thanks, now it isn't working though, I'm trying to code a string of 0s and 1s based on checkboxes, so if 1st and 3rd are ticked then the string is 101... It's not printing anything now, &lt;html&gt; &lt;body&gt; &lt;?php $times=""; if($_POST["time1"]=="on"){ $times."1"; } else { $times."0"; } if($_POST["time2"]=="on"){ $times."1"; } else { $times."0"; } if($_POST["time3"]=="on"){ $times."1"; } else { $times."0"; } if($_POST["time4"]=="on"){ $times."1"; } else { $times."0"; } if($_POST["time5"]=="on"){ $times."1"; } else { $times."0"; } if($_POST["time6"]=="on"){ $times."1"; } else { $times."0"; } if($_POST["time7"]=="on"){ $times."1"; } else { $times."0"; } if($_POST["time8"]=="on"){ $times."1"; } else { $times."0"; } if($_POST["time9"]=="on"){ $times."1"; } else { $times."0"; } echo $times; ?&gt; &lt;/body&gt; &lt;/html&gt;
How do I make it line break? It won't work. It's on different lines when I edit the code. 
There's a function for everything in PHP :/ 
1. If it is code put four spaces at the beginning of the line like this. 1. put two newlines between lines that appear on different lines There is a full primer in one of the links at the bottom of the page too.
Why solve with coding what you can solve with a google-search, is what I always say. Well, never said it, but live by it nonetheless
You're not assigning the $times to anything. Each of those $times."0"; needs to be $times .= "0";
fair enough. I believe the current buzz is Ruby or Python but I did find this list of PHP startups: * SinglePlatform * Refinery29 * Warby Parker * Svpply * Skillshare * Targetspot * Tutorspree * Tumblr Keep in mind that anyone can write bad code. I have seen PHP used in some amazing ways and of course there are quite a few disastrous implementations. Also, keep in mind that there are a lot of established companies that happen to use PHP.
Cool, Bokmarked.
First of - how are you trying to make it work? Are you just trying to install an already compiled version of PHP on your computer and run it or are you actually attempting to compile the damn thing? In case of compiling, what are you using? In case of just installing, what is your platform? How doesn't it work? Please be more detailed.
removal of most global functions and moving more to a static class based system.
I totally agree... it's folks like him who give PHP a bad rep... SMH...
This thread should have been in /r/lolphp
Will I have to go on quests?
Agree completely. This is exactly what I've put in our coding standards.
You're a month late to the conversation, but I feel obliged to give you experience points for persistance.
I was thinking the same. I think he asked the question expecting to get a specific answer, which is, "No! No one is even using PHP anymore!" He's rejecting any answer that is contradictory to his expectations.
these are good examples
We just didn't feel the need to dedicate resources to setting up something we didn't need when we had pressing timelines. Your enthusiasm has made me think twice about finding some time to do it.
Write the binary logs to a mounted s3 drive?
Or, you know, &lt;?="&lt;form method='$method' action='$self' enctype='$enctype'&gt;"?&gt; ^\(I'm ^not ^advocating ^this\)
I didn't put much faith in unit testing but I recently started doing unit testing on a new project (after building my own unit testing / code coverage framework) and I've found it helpful enough to continue doing it. 
Yes, of course, it's right [here](http://www.reddit.com/r/PHP).
As a fellow Allman fan, you're totally right.
I've been using the ezcomponents mail class for many years, it's done everything I've needed. http://ezcomponents.org/docs/api/latest/introduction_Mail.html
Haha easy enough
I don't think you know what a strawman argument is.
Let me guess. You're going to attack my grammar next, right? Anything to walk away from an discussion feeling superior, rather than dealing with the actual subject matter.
when it looks up in the timezone array non of the offsets are in half hour blocks only one hour blocks. unless i need to learn a little more about date and timezone 
Am I missing something, or are all of the indexes needing to be recomputed every time your count busts above a power of 2? Not sure I explained that right, but the mask would change, and all prior indexes are invalid, no?
That discussion is so yesteryear. It's extremely simple to [convert between short and long tags](http://freecode.com/projects/phptags). So it's really just a style decision, and a five second conversion should you ever need it. (Never really understood the XML PI drama. Who uses an XML editor on PHP files?)
I recently did a tech talk at my job about unit testing, with a focus on PHPUnit. I can answer any specific questions. I may even be able to share the slides if I find them at home.
Wow, very good read. The analogy does make it easy to relate for others, and something we all should think about when programming. 
See, now _that's_ a strawman.
I don't need it, but I damn well will find a reason to use it.
Why? Really, what would break? You're just gonna make life difficult by making sure the code is aware of where it lives, which it shouldn't need to be.
it's not supported by the http protocol. see http rfc, location headers. (and no, this shit ain't like HTML, that you can just bend however you want)
Except one that tells you if a string contains another string e.g. something like this. bool str_contains ( string $haystack , mixed $needle )
Some shared hostings of my clients don't have it and if they don't have a such essential thing than daily database backups are also missing. Started writing local bash script to backup remotely, but some have no access to DB remotely.
Sorry if I made you upset, I'm just working on a DB backup for the CMS I'm using due that some shared hostings don't have the services that they should have, I have no desire to do it manually.
From what I've googled there is already a few PHP solutions out there that can be implemented. I'm more so looking for feedback from someone who has done this integration before I start hacking away at it. 
when you find out, id be interested in a pm. i am looking to work with MYOB which is more popular in Australia.
Your best bet is going to be exporting your QB data to a CSV file and parsing that. There is also the QB PHP Dev kit, located [here](https://code.intuit.com/sf/projects/php_devkit/). This will allow you to send to, or receive from, a QuickBooks database. I guess it just depends on how your CRM is supposed to handle this information. If you want orders to be placed in the CRM and automatically get shot to Quickbooks, this is probably your best bet.
Ace!
it's a bit unfortunate, but not a real problem if you just never use != or == with strpos. It's a bitch to debug though.
You could use strstr instead, I guess that's more reliable.
inspiring man! uphpotes for you, lol...
Wow this is great, thank you. Do you think you could elaborate more on your #3? Must I use one of the frameworks to get php to send the email? I would prefer to do it myself if at all possible.
http://php.net/manual/en/function.mail.php [edit] log all mails going out, you'll need to debug an email sent or you/your system gets accused of not sending it. You can BCC all mails to a logging gmail account.
lol.. i found this literally seconds before your response. I guess I should have rtfm before asking.
How much more reliable? Do you know of any common issues or have you had any personally? 
Yes, at least in parts. If the count overflows, [`zend_hash_resize`](http://lxr.php.net/xref/PHP_TRUNK/Zend/zend_hash.c#zend_hash_do_resize) is called, which reallocates the `arBuckets` in the correct size, and then [`zend_hash_rehash`](http://lxr.php.net/opengrok/xref/PHP_TRUNK/Zend/zend_hash.c#zend_hash_rehash) is called, which re-inserts all buckets. The rehashing process does not need to compute all hashes again. The hashes are stored in the `Bucket-&gt;h` property (without table mask). So PHP only has to apply the table mask to get the index and insert the bucket at the resulting position in the array. So rehashing isn't really that much work :) But the difference is still measurable: http://codepad.viper-7.com/yyoSXH.
I know it's needed sometimes but generally in terms of how the user interacts with your application the answer is "don't". It's all about reducing the number of barriers to entry. Web users have ridiculously short attention spans, you have to take that into consideration if you want your site to have any chance of succeeding: 1. Only implement registration if 100% necessary. 2. Allow user to sign in with already existing accounts (Twitter, Facebook, Google, OpenID) 3. Provide your own registration as a fall back. 4. Only implement email confirmation if 2000% necessary. 5. Email confirmation doesn't actually confirm their email address, it just annoys people. [Thanks to awesome services like this.](http://www.guerrillamail.com) If after all that you are still 100% convinced you want to design your application in that way I would highly recommend you use [SwiftMailer](http://swiftmailer.org).
the browser might just displays an error. say it's like writing HTML and don't use the &amp;amp;lt;html&gt; or &amp;amp;lt;head&gt; tag. it will confuse the shit out of a browser. it might work, it might not but for header responses you should always follow the RFCs otherwise it has pretty random outcome or no result at all. here ya go: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30 here you can read that modern browses tolerate non absolute URIs: http://en.m.wikipedia.org/wiki/HTTP_location Im not someone who gives a crap about RFCs or web standards and I mostly seriously don't care. but relative URIs in the header location was always a big no-no.
I'm not saying this is good, it's more like "I've seen worse".
My mistake - thanks for that! How would I be more strict and only retrieve groups where every row has the option value 'Yes' and not just one? For example name|group|option :----|:----|:---- item1|A|No item2|A|No item3|A|Yes item4|B|No item5|B|No item6|C|Yes Only group C would be returned, as each row matching group C has option set to 'Yes' I'm trying to avoid using nested queries if possible. Thanks again
Avoid creating superfluous vars and don't forget to encode: echo "&lt;p&gt;" . encode(truncate($description, 500)) . "&lt;/p&gt;"; function encode($string) { return htmlentities($string, ENT_QUOTES, 'UTF-8'); }
Exactly - I work for a local news station and our masthead showing the weather and changes based on sunrise-sunset to graphically show current weather conditions.
Try this: SELECT * FROM table WHERE `group` NOT IN (SELECT `group` FROM test WHERE `option` = 'No') 
Thanks Sydoka that works. Only issue now is speed. The table is approx 3k rows so I need to cache the sub query some how. Thanks again
Yeah.. Use HAVING instead (Jack9's query below). Also make sure you have an index on the option column. 
Come up with an hourly figure and multiply it by two, maybe even three. It *always* takes longer than you think it will. I'd say you're looking at at least a couple hundred hours total. Break down into each major feature and document each sub-feature - **Forums** * New Sections * Edit Sections * Delete Sections * New Post * Delete Post * Edit Post * Reply to Post * Lock Post * Delete/Hide Post (moderation) * Any voting on posts? * Permission levels to post in specific Sections? * etc... And maybe you think that would take 5 or 10 hours to knock out - apply the rule above and say 15-20. Feature creep or things you didn't think about will worm their way into your project somewhere and you need buffers. 
Even shorter : &lt;? if ($_GET['blank'] == 1) : ?&gt; &lt;p&gt;Please fill in all entries!&lt;/p&gt; &lt;? endif; ?&gt; Available if shortags is On on &lt;5.4 and always available if &gt;=5.4.0
3k rows is *nothing*. Get in index in there, and try it out. Don't start thinking about caching optimisation at this point.
ah that's exactly how I did it. Yet it seems either my client is a retard or I am overcharging. what a dilemma -.-
thanks for the advice. I already have a drafted contract that my previous lawyer wrote. all I need is a good way of estimating the price now... And it seems to me like most people just go by instinct and multiply by 2 or 3 :P
I would put, a minimum, 25-35k on this project. By yourself it will take you at least half a year by the time it is complete. BTW, your client is a retard, he/she will probably have a hard time not picking up the phone to have you committed if you throw them these numbers. In 2003 (yup, ie6 era) MY own high school contacted me (because of my background in dev, previous projects, rep.) to build a similar project. I quoted 70k...they laughed me out of the building and hired a douche down the road for 20k over 12 months. The douche down the road ended up paying back the 20k plus damages in 2006, as 1) the project never launched, 2) he was a tool and, 3) the school "creeped" the hell of the project. Every project I've been in where some of the features are: a forum, hosting, viewing and editing of doc, PPT and excel files online, distribution of files and quizzes, multiple news pages with a CMS, etc. Will ALWAYS, at minimum, take twice as long.
VC funding is not dependent on the language. The VC has to believe your idea can make them money. If I came across a VC who tried to dictate what language I use to build my platform, I would stay away. &gt;but it seems to be half - which does not get vc funding and grow much For everyrejected or failed PHP startup, you can find a failed .net, rails, python, etc... one that also failed. If your concept sucks it is going to fail no matter what language it is written in. The language does not guarantee success. 
That's because this function is for telling you where $stringX is in $stringY, the fact that it returns 0 when it occurs at the very beginning of $stringY is correct, and returning false is just a biproduct of this function ... Not its primary feature 
I agree completely. In my experience email based registrations cause more problems then they solve.
hahaha thats so awesome you sent me that link... i have geurilla mail in my tool bar! and thank you for the advice.. in my case the email confirmation actually is %2000 necessary. I will look into your swift mail recommendation.
But in some cases, wouldn't 0 == FALSE? I guess I would have to use the function, but it seems like it might be tricky to determine the state of the function.
Had a huge protect that I quoted 35k for once. The guy turned me down for the cheap route. Came back a couple of months later being burned and was ready to pay to do it right. Best feeling ever. Don't underbid yourself.
Out of curiosity, why did you opt to build your own framework?
Thanks for this. I find PHPUnit's mocking to be a bit lacking a lot of the time and I'm never really happy with the syntax. Looking forward to giving Phake a try.
PHPUnit is extremely good at unit testing and is considered basically a standard. However, recently someone linked a thing called [Codeception](http://codeception.com) that caters towards a more behavior driven testing (Codeception actually calls itself a BDD framework) which is actually very nice, especially for writing functional and acceptance tests. Currently, I'm still playing with Codeception in my free time but I feel strongly that I'll soon be moving my functional testing away from native PHPUnit tests in my professional projects. It's worth noting that Codeception actually uses PHPUnit so the two kinds of tests can, in theory, be combined... though there are apparently some issues with doing that. All that said, I will probably not use Codeception for straight-up unit testing. While the syntax provided by Codeception is helpful, I prefer a more standard unit test, where a Test one-to-one mirrors a class and most of the testable methods and behaviors, rather than 'scenario' based unit testing that Codeception provides.
Some of the problems: * People use fake and/or temporary anonymous email services, which negates the whole purpose of doing email verification. The only way you can try to combat anonymous services, is maintaining a list of those services, and blocking their use (Here, [I'll get you started](http://pastebin.com/FmexYzUg)). But dozens of these pop up every day, and there's no way to really keep a list of all of them. * On that same note, you have services like http://bugmenot.com/ which will let people skip your entire registration process in the first place. * You're going to get a constant non-stop stream of support emails from people that didn't get the registration email. Either their ISP blocked the email, or it's sitting in their spam folder. To make matters worse, the bigger you get, and the more registration emails you send out, the more likely you are to get blocked. Yahoo is currently blocking us for "spam", but the only emails we send are registration emails. We just happen to send *a lot* of them. Now anyone with a Yahoo email address has to create an email account some where else to register with our site. * People just won't bother to register. The reason anonymous email services exists is because people are tired of having to give their email addresses to websites. Especially if they don't know or trust the website, which is just about everyone you want registering.
Up voted for "multiply it by two, maybe even three". Whether you like it or not, there will be total "suck days". That is, some unexpected problem will come up that sucks down an entire day. Projects will always take longer than expected.
When I do estimates, I create a functional spec. List out everything the client *wants* to do, but not the technology to do that. So things like 'upload files here, display score results here', etc. Try to cover everything the system will do. Use that functional spec to then build a technical spec. You'll need a templating system, DB interaction, file system stuff, uploading files, javascript validation, etc. Go through the functional spec and figure out what technologies you are going to use to build Function X. Then estimate how long it will take. If it's over 8 hours, break it down further. Take that total, and double it. That gives you some buffer time. I usually add an extra 20% for admin stuff like meetings, paperwork, and the like as well for huge projects. You will end up with a large dollar amount. From there figure out what your down payments are and your payment schedule. I always suggest a down payment (I normally do 25-50%, depending on total cost). If the client doesn't want to do a down payment, don't work with the customer. Don't ever think that just because a client doesn't want to pay what you ask that you overbilled. Be confident, you are the programmer not the client.
It's the client / project manager. Everyone always thinks things will be easier, let me give you an example from my history. I used to work for a large e-commerce company. I was a lead, and they asked me to give them an estimate on a new site a client wanted. I gave them the estimate, 2000 hrs for the first phase (that pages were really complex with a lot of moving parts), and there were 4 more phases behind it. They told me I was wrong, and wouldn't accept the estimate until I moved the hours down. I lowered the hours to 1600 (they wanted lower, but I refused). I also started to clean up my resume, as I knew the project was never going to get completed in that time. They also only gave me 3 other devs and 2 months to get the work done (do the math...) ltdr : don't let someone that doesn't do this for a living tell you how many hours it will take. They are hiring you, they are paying you to be a professional, and they need to accept your professional opinion.
Keep in mind that isset() only checks to see that the variable has been declared and is not null. A variable can be set to an empty string and pass through isset() just fine. You have to do something like this to ensure the variable is set and not empty: if (isset($foo) &amp;&amp; $foo != '') { Which is why I think empty() is used so much; it's less verbose. You just need to keep in mind that [all of these values](http://php.net/manual/en/function.empty.php#refsect1-function.empty-returnvalues) will return true with empty().
Very good points. Especially the first paragraph. The rest is also good to know, it might be hard for someone starting out on their own to be able to turn down work when they have to worry about rent checks and such nots but you know you made it to a good point when you have the options to fire a client. Clients like this (if your and my assumptions are correct) will also often times try to get "small" changes made for nothing or close to it. Things that are never small or simple. Personally gave up freelancing for a full time a few years back but I do have one client I'll keep relations with only because I know he's someone that's a mutually beneficial partnership.
this is awesome, thank you for the link!
Very interesting. For me, size was not an issue because not only do we not ship PHPUnit with our product, but we don't ship our tests either. If you're willing, I would be interested at taking a look at your framework to see some of the differences. I bet making your own testing framework was a great exercise of ability. Props to you for that :)
TIL. Thanks!!
Yes, this, every fucking time. They talk you down to a set project price based on vague requirements and time estimates creating a set cost and deadline, then make small changes and need to have every change to the deadline and cost qualified to them. I quit freelancing because I basically sucked at managing myself and doing my own administration and hated dealing with the negotiating bullshit... which usually meant I would take the hit and make the changes rather than try and nickel/dime the client. I'm working full-time now too, but only because I found a startup with a team that I actually believed in, though I still see it as just a very long-term project since I wouldn't be able to stick around while it became corporate. I still have a good relationship with a couple of my old clients who were cool and gave me pieces of equity.
Important to note if you're truncating HTML, you might be cutting off the content in the middle of HTML tags, which will then go onto destroy the rest of your page. I've solved this for myself by running the resulting truncated code through htmlpurifier, which will close up any tags that remained open. http://htmlpurifier.org/ 
This is how I learned it when I was 15: http://php.net/manual/en/
I haven't tried empty() yet, but since I'm dealing solely with numbers I've switched over to is_numeric() and that seems to be working fine now. Not sure about any pitfalls that may have, guess I'll find out
The latest client I worked with is the largest single project I have taken on myself. The client was also one of the best clients I've delt with. It's basically a shopping cart integrated with their merchant account, with user registration and products to view, complete with a back-end for managing said products and orders. I had ~100 hours give or take into it, and they are only in about 5grand. Which is a hell of a deal for them but I also worked on the project part-time and it took almost 6 months, and they got screwed by their last developer so I felt bad.. :p hope that helps you get an idea of what you'll be working with.
I might be interested. I've been training developers in PHP at companies I've worked at for the last decade or so, from absolute beginner through relatively advanced topics - but I haven't ever taught in a formal setting. Are there particular topics that you all would like to have covered? It's a pretty big topic, and probably would require several distinct sections, depending on the general knowledge level. (And what exactly is the experience level we're talking?) Last, I've never done a ureddit course before - suggestions/protips, anyone?
The trick here is to always charge by the hour. Like others said below, break down the project into feature by feature, sub-feature by sub-feature, and estimate how long you think it will take for each one. Double that time. If the client is one that looks like they'll dicker over small details, triple that time. (That's not "guessing" -- it's based on experience and it's a good rule of thumb.) Give a project estimate based on that rate. Be sure to make perfectly clear that it could take longer depending on the circumstances (e.g., if they take too long to get back to you, features aren't clearly described, etc.), and the estimated deadline is just an estimate. If it takes longer, it costs more. If they want it sooner (not faster -- sooner), it costs more, because you'll be putting in overtime. Make sure you clearly delineate each feature. If they request more later or if they change the definitions of those features at a later date, it will cost more. You are not responsible for their indecision or inexperience. In the end, it's their product and they can make whatever decisions they want, but if you do what they ask and they change their mind, you get to charge them for the work that results from that decision change. And keep in mind: your time is valuable. You are a professional who knows what you're doing. They are paying you not only for the actual time at your computer but also for your expertise, your knowledge, and your advice. Personally, I tend to charge ridiculously high rates because of the above, but also because I consider my social life and my free time to be way more valuable than my "work" time. If you want me to work outside my normal 9-5 hours, then you're gonna pony up some cash for that. If not, I'll be more than happy to say "Thanks but no thanks" and hang out with my friends instead.
See my answer to judgej2 :) The client will only be executing it about once a week but when they do they'll be executing it multiple times. I would love to rebuild the site but this solution is sorta the 'best of a bad situation' type scenario
~~Cheers Jack this looks like what I wanted! I'll check it out when I'm back in the office tomorrow. thanks~~ EDIT: Looking at this now, thanks Jack
Hi Cookies. I'm trying to only select groups where every option is Yes. But thanks for the reply
/r/phphelp &amp;&amp; google
I feel you are spot on! yet I need the money atm, so I am just tying to come up with a fair price that I can charge and most of what I've read suggests that I've been right all along. It's just the he doesn't get it..
Good luck, you'll probably get more in depth answers there.
thank you! Me and my buddy are currently working on a website of our own, and I am just starting out on it, but he has got about a year exp doing it. He also has some C++ background. So I personally would like something that attunes from the beginning on what the basics are so I can understand most the videos and guides I find online. Any thing your willing to do though is greatly appreciated.
all the up votes to you.
I believe this is what you want. I'll add it here because what judgej2 posted got me thinking about it. SELECT `name`, `group`, `option` FROM `table` GROUP BY `group` HAVING `option` = 'Yes'; I input the sample data in your post into a database and tested it, it seems to work properly. Initially, it only gave me group "C" rows then group "A" when I switched the option values to "Yes".
[I gave it a second shot](https://www.reddit.com/r/PHP/comments/rj190/mysql_issue_filtering_group_by/c46g6wq)
Check out the quickbooks web connect API. It uses a browser plugin to wire them up.
In reference only to your question on redirecting urls: What does your server stack look like? In other words, what is the make/model of your host server OS (Linux, Windows, etc) and your HTTP/s server application (Apache, IIS, etc). This question of course has very little to do with PHP, but a lot of users here on r/PHP can answer that question.
Take a look at CodeIgniter. That will make URL parsing simple. codeigniter.com 
The long way to figure this out is download popular modern web frameworks and / or projects that are built with them (such as codeigniter, symfony, and the zend framework) and figure out when and how they use include and when they simply use functions. The short answer though is, use include_once to include files with functions in them that may also include_once more dependancies they have. Then call a function which makes decisions and calls more functions, and after all the logic and database calls are done being made, a function calls include() and includes a .php file containing html mixed with php that simply outputs the data which was previously looked up. It can (and does) get much more complicated and intricate than that with experience, but that is the basic framework for how a lightweight MVC is set up.
[Here](http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#PHP_2)'s a table comparison of many PHP frameworks. Larger PHP frameworks (such as Zend, Symfony) are generally enterprise-level frameworks, and so they are much more fully-featured (but generally larger in size) than smaller frameworks (such as CakePHP, CodeIgniter), but are much more difficult to learn. Larger frameworks many times have scaffolding features, as well, or other command-line tools. If you haven't already have used a framework that is MVC-based, has templating, uses DB ORM, you'll probably be stumped with Zend or Symfony, so perhaps start out with a framework with a smaller learning curve, such as CakePHP, CodeIgniter, or Yii. 
Your ideas are intriguing to me and I wish to subscribe to your newsletter. Also: http://forge.mysql.com/wiki/Top10SQLPerformanceTips and http://mysqltuner.pl http://www.howtoforge.com/tuning-mysql-performance-with-mysqltuner
The problem with a lot of CMSs is that they try to make one size fits all. Wordpress for example started out as just blogging software but has tried to expand beyond that now. If you want to do something different, I would suggest to find a niche and built a CMS that works for that niche. Maybe make a blogging site, it'll help build your knowledge of what goes into it. Or find a particular type of site you can use the CMS for, e.g. Real Estate websites, photographers sites, restaurants sites, and develop tools that are useful for those types of sites.
Not really reddit, but this is the way I learned and I feel I'm pretty good :) http://www.youtube.com/watch?v=iCUV3iv9xOs&amp;list=PL442FA2C127377F07&amp;feature=plcp&amp;context=C4067cefFDvjVQa1PpcFPPdtmhHct9ixxUWSQ_huq2tNSgptXBEBU= Credit to newbosten (bucky)
Almost there now Cookies but not quite If it helps - this is the process I'm looking for the query to perform (well, the query should return the same results) SELECT * FROM table GROUP BY group Run a test on each GROUP of groups to see if *every* row inside the GROUP has option = Yes If yes return group This would return only group value C As group value A contains rows that have option = No And group value B containts rows that all have option = No I can do this using multiple queries + PHP but was hoping to get it as a single query. Cheers! --- EDIT: Maybe this will be clearer SELECT * FROM table GROUP BY group Will return something along the lines of this group A item1 | No item2 | No item3 | Yes group B item 4 | No item 5 | No group C item 6 | Yes Then loop each GROUP to see if all rows with the same 'group' value have option = Yes If they do return those groups. (But only if all options are Yes) --- **EDIT2: After rethinking the issue I'm going with Sydoka's solution posted yesterday. Cheers for the help reddit** The query I'm using is similar to SELECT DISTINCT(group) FROM table WHERE group NOT IN (SELECT group FROM table WHERE option = 'yes')
Do you think its fair to say fuelphp is somewhere between your simple / enterprise categories there ? I use codeigniter having kept an eye on fuel for when I feel limited by ci. But I do use drupal so this symfony news has peaked my interests. 
By all means, learn those things, but there's no point in building something that you know will ultimately suck. Falcon13 is right, for a portfolio piece, you're better off writing something simple and elegant that could actually be used in production. It shows good project management skills to be able to limit your scope to something you can actually execute well.
It'll also make handling the pieces of the page, using templates and partials, much easier.
This is a good place to start, btw - most of the best frameworks in the PHP world steal concepts from Rails, you can learn a lot of good habits from it. Wordpress, otoh, does things in a, let's say, less-than-desirable way in many cases. It uses globals and voodoo all over the place, and they can't fix it as it would break backwards compatibility for most plugins and themes.
For a *portfolio piece*, it's nice to have full-featured code to show off to a hiring manager. (Just make sure you've got your unit tests in place for us. ;) But for production use, there's really very few good reasons to reinvent the wheel. This is one case where I wouldn't recommend eating your own dogfood, as it were. 
i built a cms, yes it sucked for a few years, but now i have a competent base platform to build any web site structure. Ive researched and just added functionaility as i learnt. Then i rebuilt it many times. I think its in its 8th or 9th reincarnation now. if i was employing, id rather see a competent large project than a whole heap of widgets that anyone can put together. And i did say learn the basics. If you showed me a databse connection class that stacked connections, cached queries, cached results and provided wrappers for mysql, postgress and oracle, id know that you were competent at working in LARGE development environments.
You see, a modern CMS is *even larger* than that. A database connection library is a reasonably scoped project, and a CMS is expected to *incorporate* one. I also think that calling anything smaller than that a "widget" is kind of a condescending attitude - especially since even your larger systems should be architected to work together like a bunch of smaller libraries that have no knowledge of each other. You said it took you 8 or 9 tries to get a competent platform: would you really want the first attempt featured on your portfolio?
The biggest benefit, in my opinion, to using a framework is encourage and enforce good development practices. Frameworks generally implement a design pattern (mostly Model-View-Controller when it comes to PHP webdev frameworks) and by following the pattern, you're forced to separate logic elements in a way that makes them cleaner, easier to maintain, etc. Of course, you still have to be disciplined about following the pattern. For the most part, even with a framework you can produce junk code to your heart's content. As to the different frameworks themselves, it comes down to the nature of the project and personal taste. Once you know what design pattern you're going to implement, you have a bunch of choices and most of the common frameworks are implemented very well. Some have small footprints and provide the basic skeleton of an app, some are very large and allow for very rapid development at the cost of extra overhead.
I don't know where you're reading that is emphasizing cake.
i didnt say tries, i said reincarnations. it got bigger and bigger and i had to rebuild some base classes to deal with the new stuff. It started as a simple blog, now its got shopping carts, payment gateways, and heaps and heaps of features.
i prefer the latter as well, which is why i went down the road of building my own base platform, i dont use a typical MVC architecture, its more of an application architecture. And i stack connections to connect to multiple dbases, stack queries for debug output, cache results for quik access, and a few more features like feeding queries into other queries usig concat_ws. It is also tied strongly to logging and error classes and provides its own error handler. Jump the gun and state i have no idea. Ha.
Yii doesn't implement coding standards or PSR-0. Yii's autoloading is a sad hack to stay with the times.
I use Cake all the time. I am in no way trying to defend it, but do you mind elaborating on issues with Cake?
&gt; And i stack connections to connect to multiple dbases, stack queries for debug output, cache results for quik access, and a few more features like feeding queries into other queries usig concat_ws. It is also tied strongly to logging and error classes and provides its own error handler. I didn't question *why* you did these things, seen in isolation they're all good features. What I said was that if I was hiring and a person showed me a class that did all of the stuff you mentioned then I wouldn't think "holy shit this dude knows what he's doing" but rather "holy shit this dude has a fundamentally flawed understanding of OOP, is this something I can fix or is he going to make my code base a nightmare?" It's pretty obvious from what you said that actually don't understand separation of concern properly, you state that "[it] provides its own error handler". Well it shouldn't, classes should be kept dumb and do a minimum amount of work, if your DB class is caching, logging or outputting then you don't have dumb classes. I honestly suspect you suffer from never having been on the other side of the fence. Your code probably makes perfect sense to you because you're the one writing it, but if you ever have to work together with someone then they'll think "wtf, I just changed the log class but the log format is still the old style." and then an hour later they'll headbutt their desk when they see that the DB class provides it's own error handler as well. Feel free to continue doing what you're doing, it's really my fault for having made you defensive, I really do hope that you try to look at your code from the point of view from someone who isn't intimately familiar with it. 
Use isset or array_key_exists. All those notices, agh.
To find ideas for small coding examples I tend to trawl vWorker or other such freelance job boards for people whom submit small under-paid projects such as "Could you make a Wordpress plugin that does xxx?" or "I have data in xxx format and would like it converted into yyy format and then selectable though a, b and c filters to output a pdf report." I have also found however, that all the jobs I take up are more interested in my ability to develop UI transactions that both look good and are coded efficiently. Because of this I ensure that I submit clean code with unit tests and a well put together front end with a few of those hand crafted java-script bells and whistles so many people are fond of.
it overwrites the error handler, i shouldnt say provides its own. and assume, whos the ass. suspect the other side of the fence. Until youve worked on 6000 hits a second sites, with 700,000 users registering in the first month. Ive worked on teams of over a dozen devs in teams of php flash and front end styling. Ill continue what im doing, because it works, its had multiple persons input and was developed with a stragtegy in mind.
its called growth.
upvote for quotes.
They all suck except for *insert your favorite framework here.*
I don't think CI any longer supports scaffolding
This is borderline offensive content.
Ohh, i actually didn't know that. Well, close enough.
Same use it for everything, no problem here
All depends on what you are trying to do with it. Every framework has it's strength and weaknesses. People tend to get 'stuck' on one instead of moving on and trying different ones. This is understandable as it takes a long time to get familiar with a framework and to be able to understand it's quirks, strengths, and weaknesses. In their case it sounds like they did not have someone on their team that understood the framework well which led them to either trying to do things the wrong way, general frustration of not really having anyone to fall back on when they got stuck, and/or just trying to do things with the framework that it was not particularly suited for.
You will probably get a lot more interest if you outline more specifically what you are expecting people to do, what you are hoping to develop, what you are willing to pay and when you are wanting it done by.
I have an order form page with a combobox (3 items) and two checkboxes. This creates a total of 12 combinations/scenarios of products. I need to calculate a number to determine each different scenario. For example, if the person selects the first item in the dropdown list and unchecks everything else, the product = 1 if the person selects the first item and checks one item, the product = 2 if the person selects the first item and checks both items, the product = 3 I hope this makes sense enough. I would like this to be completed within a day or two.
Thanks. I did to some degree above.
real programmers use frameworks.
Do you take Nigerian checks?
Form: &lt;form method="post" action="location_of_php_script.php"&gt; &lt;select name="combobox"&gt; &lt;option value="1"&gt;Option 1&lt;/option&gt; &lt;option value="5"&gt;Option 2&lt;/option&gt; &lt;option value="9"&gt;Option 3&lt;/option&gt; &lt;/select&gt;&lt;br /&gt; &lt;input type="checkbox" name="check1"&gt;&lt;br /&gt; &lt;input type="checkbox" name="check2"&gt; &lt;form&gt; PHP Script: &lt;? if(isset($_POST['combobox'])) $combobox = $_POST['combobox']; if(isset($_POST['check1'])) $check1 = $_POST['check1']; if(isset($_POST['check2'])) $check2 = $_POST['check2']; if($check1 !== "ON" and $check2 !== "ON") $plus = 0; elseif($check1 == "ON" and $check2 !== "ON") $plus = 1; elseif($check1 !== "ON" and $check2 == "ON") $plus = 2; elseif($check1 == "ON" and $check2 == "ON") $plus = 3; echo "Product ID: ". $combobox+$plus; ?&gt; Result: - Option one, unchecked, unchecked = 1 - Option one, checked, unchecked = 2 - Option one, unchecked, checked = 3 - Option one, checked, checked = 4 - Option two, unchecked, unchecked = 5 - Option two, checked, unchecked = 6 - Option two, unchecked, checked = 7 - Option two, checked, checked = 8 - Option three, unchecked, unchecked = 9 - Option three, checked, unchecked = 10 - Option three, unchecked, checked = 11 - Option three, checked, checked = 12 Disclaimer: not tested, and I advise you to add some serverside verification to check if the input is valid.
Thank you, that was my point. Developing a CMS is a long-term project, the first versions will suck or be very featured limited. My full-time job is to develop a CMS, It took the work of two people of a whole year to develop something I'm proud of (we had other obligations during that year, but mostly develop it). So ... should someone learn to and develop their own CMS? OF COURSE. Should someone do that for the only purpose of displaying it on the portfolio: NO Ask yourself: How many time will I spent developing dao? and security? and image manipulation? and caching? and plugins? and a shopping cart? and unit test?
I prefer pudding
No, `array_key_exists()` is 3 times slower. They don't do the same thing BTW - `isset()` will return false on a variable that has been set to `null`, while `array_key_exists()` won't. `isset()` also checks all the levels of a nested array, while `array_key_exists()` only checks the last one. Summary: Use `isset()` most of the time. Use `array_key_exists()` only in two situations: If you need to detect null but exists, and if the array is the result of a function call since isset only works on variables, you can't use it wrapped around a function call that returns an array.
I set out to hire someone... not to get the answer to the problem directly. Though it was pretty nice...
Agreed. I hate this "what framework do I use?" question with a passion. These people are just too lazy to research frameworks.
so.. what do you use now then?
PHP is the easiest language to learn IMO. If you want to further your understanding and save money try posting your problem/question on stackoverflow, you'll get different perspectives and hopefully gain the insight to troubleshoot in the future.
I would recommend using one of the more "lightweight" frameworks first, like CakePHP or CodeIgniter (there are others). It saves a great deal of development time. Tedious tasks like CRUD, pagination, data validation, authentication, ACL, and many other things are built in. I'm currently working on a project where they're asking me not to use a framework, because they're bloated and over engineered for the task at hand. While I really don't like having to reinvent the wheel, I get paid by the hour, so they're basically paying me for 10s of hours of stuff that would take 8-10 hours with a decent framework. My framework of choice is CakePHP, but find you that suits your needs and programming habits.
I have always done VB/c#/c/++ Although one day I'd love to pick up some web dev skills, I really don't have the free time. I have always contracted out my web work. Unfortunately my normal guy is unavailable for a while :/
You mistyped &lt;?php
Traffic density from 0.0 to 1.0, based on lat/lon!
Symfony 1 or 2?
http://ureddit.com/help
Why do you guys work in CodeIgniter and Wordpress? Isn't that kind of amateur?
Zend Framework especially makes it easy for you to produce junk code. Oh man the code I've had to maintain. There's also the danger of abstracting *too much* with ZF. I've seen classes that did nothing and were merely there because it "fit better" with the ZF coding practice. We didn't hire that guy again.
&gt;-59 comment karma Probably a troll account.
[Sunrise](http://www.youtube.com/watch?v=XTwbQlJKY5E), [Sunset](http://www.stlyrics.com/lyrics/fiddlerontheroof/sunrisesunset.htm) if ($this == $little_girl_i_carried || $little_boy_at_play) { // rhetorical } unset($growing_older); $she_got_older = file_get_contents('http://graph.facebook.com/' . $little_girl_i_carried . '?fields=birthday'); $he_got_older = file_get_contents('http://graph.facebook.com/' . $little_boy_at_play . '?fields=birthday'); $date = date('Y-m-d', strtotime('yesterday')); $was_yesterday = ($date == were_small($she_got_older, $small_threshold)) &amp;&amp; ($date == were_small($he_got_older, $small_threshold)); $she_got_cute = file_get_contents('http://api.flickr.com/services/rest/?method=flickr.photos.search&amp;sort=interestingness-desc&amp;api_key=' . $api_key . '&amp;user_id=' . $little_girl_i_carried); // We're gonna base this on age, somehow $he_got_tall = tall_date($he_got_older, $tall_threshold); date_sunrise(); /* !!! */ date_sunset(); /* !!! */ date_sunrise(); /* !!! */ date_sunset(); /* !!! */ $days-&gt;set_flow('swiftly'); if (time() &gt;= date_sunset(time(), SUNFUNCS_RET_TIMESTAMP, $latitude, $longitude)) { $seedlings = $sunflowers; while (we_gaze()) $sunflowers-&gt;blossom(); } } date_sunrise(); /* !!! */ date_sunset(); /* !!! */ date_sunrise(); /* !!! */ date_sunset(); /* !!! */ $years-&gt;set_flight_speed('swiftly'); happiness_tears($another . $season); // Introduced in PHP 6 $gift = wisdom_rand('en-us'); for ($day = 0; $day &lt; 5; $day++) { $they = array_merge($little_girl_i_carried, $little_boy_at_play); } natsort($they); $error = false; if ($they != $two_newlyweds) $error = true; $canopy = mysql_query('SELECT canopy FROM store WHERE person = "me"'); date_sunrise(); /* !!! */ date_sunset(); /* !!! */ date_sunrise(); /* !!! */ date_sunset(); /* !!! */ $years-&gt;set_flight_speed('swiftly'); happiness_tears($another . $season);
I hate it when projects like this will compare two code languages and insert a bunch more comments in the competitor so theirs looks shorter and cleaner.
This was SF2.
I laughed... a LOT! 
A troll by all accounts!
First: Get all position_ids of a real estate Second: use where_in('position_id',$array_of_position_ids)-&gt;get(); to get all corresponding clients
Hi! mmm can you elaborate on that? asterisk and php both have their own wtf's (and they tend to be fixed over time), but what do you mean by "unreliable combination"? I've been using them to create telephony applications for years (voicemails, prepaid applications, auto attendants, autodialers, etc)
Why not hire remote workers?
Can we stop this double-posting bullshit please.
WTF? What double posting bullshit? I just posted this link here to reach a broader audience to increase my chances on getting some help from the community. Wanker.
That's exactly my point. You're spamming two different communities with the same question to increase the number of people who look at and attempt to solve your problem. It's disrespectful of both communities and shows your only goal here is **rapidly get someone to solve your problem for free** You have people like Xpert85@Reddit giving a response and the fellows over on StackOverflow won't see. They do not have the benefit of looking at other responses and thinking "wow, maybe I'll just upvote that response instead of formulating my own!" instead they are going end up coming to the same eventual solution that is found here on Reddit. You're the goddamn wanker.
No, because position_ids are unique. if you're using the same position records for multiple real estates in a direct relationship, you're doing it wrong. Another way to do it would just be to have the join table include real_id, client_id, position_id.
&gt; You're spamming &amp;#3232;\_&amp;#3232; 
What if i send you a robotic arm that i control from my house? 
because agencies run on tight deadlines and fear
Two qualities seasoned PHP developers need are good documentation lookup skills and an distrust for code found on the Internet. I believe this come from those weird nuances you mention.
Not sure if you're incorrectly correcting my grammar or if you're saying accusing him of spamming was jumping to conclusions?
I see php jobs all the time in Columbus, I haven't had problems getting work in years.
If you have code like this in your app $foo = new Bar(); And you have not included the file which declares class Bar {} then PHP will pass 'Bar' to __autoload() to give you a chance to load the class and keep things going. Since loading every file and every class shouldn't be needed for absolutely every page \__autoload() can help you avoid this allowing you to lazy load class files as you need them. Of course within __autoload() the logic of how you locate is completely up to you. See this article for more information and also an introduction to PSR-0 http://phpmaster.com/autoloading-and-the-psr-0-standard/ 
Never use **__autoload** ever. It's better to use spl_autoload_register and provide a callback. For small projects I use an anonymous function. The function takes only one argument which is the class name and expects you to require the right file containing the class. This is a very simple example: spl_autoload_register(function($class) { require_once str_replace(array('\\', '_'), '/', $class) . '.php'; }); But for bigger projects you better use an autoloader class. It functions on the same way. Lots of frameworks have their own autoloader that you can plug into.
Thanks for this comment; I didn't know this function existed. I found[ this article](http://dissectionbydavid.wordpress.com/2010/11/03/php-spl-autoload-vs-__autoload/) comparing __autoload with spl_autoload_register. Would you say your motivations for using it over __autoload are in line with what this article says, or do you have other reasons as well?
The latter. Even if you take into thought that he posted both a SO and a Reddit post, I don't see how two posts are spam.
Plus using this, you can readily define types of classes, and have it search in that directory or whatever you want. For example: Model_Chicken could search for /application/models/chicken.model.php, attempt to require it and return an exception if it's not found.
My problem is that my resume doesn't ha e much professional experience to it. I have almost 7 years of self taught experience.
You can read the [UniversalClassLoader](https://github.com/symfony/ClassLoader) from the [Symfony2](http://symfony.com) framework which is the one I use by default. The one from [Zend](http://framework.zend.com) [Zend_Loader](http://framework.zend.com/manual/en/zend.loader.load.html) also does the job.
I like chicken.
Being a developer who has the pleasure of using Kohana for my day job and all contracts, I can say with confidence that you don't know what the hell you're talking about. Yes Kohana is originally a fork of CO, but the 3.0 version was a complete rewrite. Version 3.4 just came out in beta and should be going live in April.
Stere well clear of that stevedawson.com site if you want to learn php. I just downloaded his poker script to take a look, and the code is awful. 
What I don't get is where you specify what $class_name is, or do you not have to?
The project I am doing right now is trying to make my own MVC framework so that I can better understand how they work. That is why I am not using the default autoloader in most frameworks.
[filter_var()](http://us.php.net/filter_var) and [these filters](http://us.php.net/manual/en/filter.filters.php) will do a lot for you. Also take a look at this Flourish class. [fValidation](http://flourishlib.com/docs/fValidation)
Oh, okay. Thank you :)
I didnt know this existed, so I wrote my own :P 
Why throw an exception? That prevents proper autoloader chaining. It's best to return false and let the chain continue. 
Yeah... I would stick with one that has been thoroughly tested, unless it's just for a personal project or something.
they have a pretty nice library! thanks :D
Surprised nobody mentioned [HTML Purifier](http://htmlpurifier.org/).
You're still missing the point.
I was actually going to submit a post about these functions. I've seen a lot of sanitation routines over the years. Some of them in very large, popular frameworks, and none of them use the filter functions built into PHP. The Zend Framework doesn't even use them. I have to consider there's a very good reason why so many people ignore these functions. 
Umm.. Yeah? When using == it does. Edit: If it makes you feel better about it, they are both "empty" values. A '' is a string with no value, and a zero is a number with no value. Thus, they equal each other when using == comparison, because they both represent something devoid of value.
Yes. PHP is weak typed and the double equals sign doesn't do type comparison; false, zero, null and an empty string are all the same. Switching to three equals forces type comparison, so then it matters if it's an int or string. This also applies to at least Javascript. 
Gasp, really!?
Welcome to every loosely typed language ever?
Sure, but that error message is already perfectly clear. There are also issues with order of execution in the autoload stack. What if yours is towards the top, and another library is at the bottom? Your autoloader might fail to load the other library's class, and because it throws an exception you've broken the stack. If you just return false and allow it to fall through, that other library would load just fine. 
you can only use __autoload once and it's not very extensible. as a project grows, you may need to define multiple autoloaders to better separate and encapsulate logic. spl_autoload_register allows you to register multiple autoload methods. futher, __autoload is [marked discouraged](http://us2.php.net/autoload) in the php.net docs, and may be deprecated or removed.
Welcome to the wild and wooly world of dynamic casting! If you need to do strict type checking, use ===.
It is the kind of thing you want to be aware of. Also consider that both empty(0) and empty('') return true. See the [return values](http://us3.php.net/empty) on this page. So just in general you should know how PHP's weak typing works.
Who would like the fact that there will be total suck days?
Hey OP. Your code looks pretty decent. I'd keep a few things in mind as far as readability goes, for any future projects. Lines 19-30: $till = array( array( 100 , "hundreds" , $_POST['hundreds'] ), array( 50 , "fifties" , $_POST['fifties'] ), array( 20 , "twenties" , $_POST['twenties'] ), array( 10 , "tens" , $_POST['tens'] ), array( 5 , "fives" , $_POST['fives'] ), array( 1 , "dollars" , $_POST['dollars'] ), array( 0.25 , "quarters" , $_POST['quarters'] ), array( 0.1 , "dimes" , $_POST['dimes'] ), array( 0.05 , "nickels" , $_POST['nickels'] ), array( 0.01 , "pennies" , $_POST['pennies'] ) ); I indented your array to begin on the next line, tabbed over once, and then for its contents tabbed over again. Also, for readability I tabbed over before the comma, leaving the trailing space before the next value. It's also nice to have some structure there too, so the ending parenthesis got tabbed. Also, you don't need to parse anything, so just replace those double quotes with singles. It doesn't even really make any difference in speed, but the idea is that if you're not parsing anything why make it look like it? And FYI your echo: echo "There was $", $total, " inside the till. You need to leave $", $leave, " to have a balanced till. Please Remove $", $total - $leave, ":&lt;/br&gt;"; Is identical to mine: echo 'There was $' . $total . ' inside the till. You need to leave $' . $leave . ' to have a balanced till. Please remove $' . ( $total - $leave ) . ':&lt;/br&gt;'; Nifty script. Have fun.
People that get paid by the hour ;)
Doubt this is php related but, check your htaccess files for one
Dealt with this attack the other day. One of your included files has encode JavaScript which is loading the resource from that other domain.
The problem is the following: http://giantfunny.com/handle_generator/jquerymini.js The scripts generates a bunch of iframes on your website. Make sure that you remove the file and replace it with a proper copy, as well as patch whatever method they used to infect your site in the first place.
Thank you!!! I have deleted the file, I have no idea how it got there in the first place... So annoying. Do you still get the pop ups on the site?
It's the mages. They couldn't stand all the ganking, so they ganged up on you. Run for your life!
not rly just if you wanna use xml/rss(they start with &lt;?xml which is php shorttag and gives u a errror) u could get a problem the evil thing is just that if you would transfer it to a different server and don't set them to on over the .htacces file you could get a lot of error msg's ofc i am not 100% sure
Disable FrontPage server extensions if they are not in use. See: [remote code execution](http://technet.microsoft.com/en-us/security/bulletin/ms06-017).
Know how to use grep? If not, this is a smashing time to learn it. :]
Not really sure what you mean, how else would I update my site?
wtf? no konami code JS handler :(
Why should I use MDB2 over PDO?
 //we will give an unique name, for example the time in unix time format $image_name=time().'.'.$extension; //the new name will be containing the full path where will be stored (images //folder) $newname="images/".$image_name; //we verify if the image has been uploaded, and print error instead $copied = copy($_FILES['image']['tmp_name'], $newname); if (!$copied) { seems like its in there somewhere
Most, if not all, MVC frameworks support this. The URL gets mapped to an action within any given controller; you can map: * /services/billing - controller: Billing, action: Overview * /services/billing/claims - controller: SomeOtherController, action: Claims With any given framework you can explicitly set the routes yourself. Some do it 'automatically' if you allow them, but you can override this behavior.
The konami code has been embedded into PHP.net's website forever. This is not their april fool's gag, the perl camel is. 
Your solution does what you're asking. You could find a more flexible way to achieve it, sure, but it's obviously possible.. you're already doing it. What exactly is your question?
Is there a simpler way to do so without making a bunch of if statements.
That's weird, usually the braces help the parser know what to do. IIRC, the problem stems from PHP being a bit ambiguous on what it should look at first - the accessor or the scope resolution operator. Since it doesn't know which one you want, it just chokes. There's probably a better way to do what you're trying to do. Maybe you should be putting those static methods into the Derp class as regular methods?
I realise this is an old topic, but I decided to follow your other suggestions and figured out a way of revamping the command execution part of the code that could satisfy scalability requirements. Rather than a hardly-maintainable chain of if commands, I designed a complex variable that could hold one or more different commands (the array [$config['cmds']](https://github.com/andrewcaluzzi/ToyRobot/blob/master/config.php#L16)) along with different attributes pertaining to that command (the function it calls, number of arguments to expect from the user, conditions required to call and associated text to output in different scenarios). Was this what you had in mind when you suggested refactoring / the visitor pattern? Again, thanks for taking the time to read through and critique, much appreciated :)
I must ask, does $maindata come from user input ($_POST/$_GET)? If so, make sure you put in applicable security, like using basename() so people can't manipulate and potentially include any file on your system.
First port of call would be [PDO](http://www.php.net/manual/en/book.pdo.php), for all your database abstraction needs! Edit: are you referring to the actual database schema's or the business logic sitting on top of it?
I've been using Doctrine for some personal pet projects for about a year and I'm quite impressed with it. It uses PDO so that should be okay :) I'm actally concerned about both. I'm wondering if there's anything special I need to take into consideration when creating my models and working with my models through for example Doctrine. I'm also wondering how much work there will be to support multiple databases when the applications is going to rely on specialized views and stored procedures. I assume that most of the basic schema can be used on various types of databases if I make sure not to make use of anything special for a particular vendor. But how about the SPs and views - are they applicable across databases if I'm carefull not to make use of anything vendor-specific? Am I going to get a really hard time supporting all these various brands of databases?
Try: ${$lol-&gt;stuff}::someStaticMethod(); The extra dollar sign tells PHP to treat the return from the braces as a variable name. At least, in my head, that's what I see PHP doing.
You might be onto something, with the extra $, I get `Undefined variable: StaticClass ` and of course, $$ without the braces doesn't work.
that's not me, i did see that post though :3 i would love help either way 
i'm not old enough, which is why i would rather prefer paypal. i am not 18 yet but the person that owns the server is, too bad he wants me to use my info to process the info and stuff. that also makes it easier on me so i don't need to ask him for his info every time i need it.
There are a few other magic methods in PHP that are useful. Check out the docs on them here: http://php.net/manual/en/language.oop5.magic.php
Well, this is the whole essence of my question. I'm trying to start a discussion about best practices and pitfalls to be aware of when developing an application which needs to be available to run on a broad array of databases. This isn't my first time developing for Oracle, MySQL, Informix, DB2 or anything like that. It is my first time attempting to create an application which is compatible with as many as these databases as possible. It's not that I wont (or can't) draw the line anywhere but I need to know on which basis to do my decisions. I'm hoping for some hard-learned experiences and some tips regarding tools to use to ease the development.
If you are using stored procedures and views, you will likely run into compatibility issues between databases. If using these (SPs and views) is critical to your application, you may want to develop an abstraction layer (with db-specific adapters) for those, or look for some existing solution to avoid re-inventing the wheel. A simpler approach (that I've done before) might be to create a placeholder abstraction layer, where you have the framework in place to abstract away the functions but you target your primary DB directly via this layer, and worry about re-factoring porting to other DB types when the need arises (at which point you only have to re-factor your abstraction layer and not your whole application). Premature optimization and abstraction are devils. ;-) 
The other question I would pose is: Does your application really need to support many types of databases? What is the likelihood that someone will need to run your application in an environment where an existing database server is the *only* one available, and they won't be able to install something for your app? With cloud servers being affordable and easy to manage, the days of "one giant server that runs everything" are behind us, and most companies I've worked with set up individual servers for each app or service (within reason) they need to run. Maybe you've thought about this already, but if you are working on a self-contained application (versus something that must integrate with existing solutions) perhaps the work vs. reward of supporting a bunch of different databases isn't worth it? Obviously if you're working on a generic database management tool or some kind of DB analysis/reporting suite, ignore this post altogether. ;-)
As I said, dirty. Assuming he's not taking user input for this, it's safe enough. I'll edit to make you happy :)
This is a really good question and something I'm still thinking very much about. The problem is, that some of the customers we want to adopt this application run a pretty tight ship - very uniform and controlled environment. The environment this application is intended for will, in some cases, be implemented in have strict regulations they need to conform too which is one of the reasons Oracle has been introduced as a need-to-be-supported vendor since it's auditing features and transaction history is a must. Personally, I think this sucks. Trust me, I'd much rather narrow the supported database vendors in to a reasonable subset :) Cloud hosting of this application is out of the question - not that it wouldn't be able to, but it wouldn't make much sense :) Thank you for raising some good points, have an upvote :)
Thanks, I very much appreciate that.
Thanks for calling me out on it, I shouldn't have been that lazy in the first place :P
I would say then that once you have mapped out your application requirements and you have a relatively clear picture of your needs and functionality, consider hiring a consultant/expert for each major DB you want to support, just for a short-term contract to help you avoid any major pitfalls in your app design. 
thanks for the link :)
I use https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API
Why the fuck would you ever do something like this? ಠ_ಠ
This is possible with both Reflection methods and call_user_func() class Derp { public $static = 'StaticDerp'; } class StaticDerp { public static function derpaDerp() { return 'shabam'; } } $derp = new Derp(); $method = new ReflectionMethod($derp-&gt;static, 'derpaDerp'); echo $method-&gt;invoke(null); echo call_user_func(sprintf('%s::derpaDerp', $derp-&gt;static));
also, if anyone knows in what format a date output is required in a team fortress 2 server, that would help, because this is for a premium plugin
For starters (I like the old date-functions, but there is also a modern DateTime() class): $uts = strtotime('+1 month +1 day'); // Test echo date('r', $uts); The query: $query = sprintf("INSERT INTO MyTable (timeExpiry) VALUES(%d)", $uts); The SESSION: $_SESSION['expiry'] = $uts;
&gt;$canopy = mysql_query('SELECT canopy FROM store WHERE person = "me"); &amp;#3232;\_&amp;#3232;
Although this doesn't directly answer your question, you should ask yourself if you *really* need views, and stored procedures, as both of those features can create maintenance headaches. Both features are great when you have a dedicated database guy on your team, and you're writing your application to conform to the API he creates and manages. However using those features leaks application logic into the database, and that can create problems when you're the sole developer of the application. There's a couple [questions to ask yourself](http://en.wikipedia.org/wiki/Anti-pattern): * Do you really need those features, or are you just looking for an excuse to use them? * Can you accomplish the same goals as those features inside of the application? Views can absolutely be replaced with in-application queries. Is there anything stored procedures offer that can't be done in the application? * Are you attempting to [over engineer](http://en.wikipedia.org/wiki/Overengineering) your application? * Are you trying to anticipate client needs that will actually never or rarely be needed? For instance how many of your clients are *actually* using Oracle? And is it more trouble for you to support Oracle, than it is for them to use one of the databases your application does support.
Goes to show that even after ten years of coding PHP, you can still learn something. strtotime never ceases to amaze me with what it can do.
We're supposed to be using [PDO](http://us2.php.net/manual/en/book.pdo.php) now, actually. mysql_* is considered bad practice.
Couldn't that pass as answering this line? &gt; Is there a canopy in store for me? if any rows at all are returned?
^ This EDIT: By which I mean, he is correct. I am plenty aware of strtotime, but not of this particular format.
Don't use Reflection (highly inefficient) or some crazy syntactical mess. You can either assign the object property to a local variable and call the static method on the variable, as some have suggested, or: class Derp { public function __construct() { $this-&gt;_staticDelegator = 'Foo'; } public function __call($method,$args) { return call_user_func_array(array($this-&gt;_staticDelegator,$method),$args); } } $derp = new Derp(); echo $derp-&gt;someStaticMethod();
Check plugin docs, it could be literally anything.
I just went through something similar recently while developing a CMS that supports Postgres, MySQL, and SQLite. I originally planned support for those three plus Firebird, Oracle, and MSSQL but wound up having to stop after the first 3. Here are some things you need to keep in mind: - Naming conventions This one gave me the biggest headache. I originally started development using Postgres and went with using schemas to separate groups of tables. However several DBMS's don't support them (including MySQL) so I had to scrap that and append the namespace name to the beginning of the table name. So CMS tables began with 'cms_' and module tables began with their name. It provides quasi-schema support to make table names easy to find but keeps it compatible with MySQL and others. Then there's how you want to name database objects such as foreign keys, primary keys, etc. Some DBMS' allow you to have an object with the same name in several tables but some do not. In Postgres, for example, each table can have a foreign key named 'user_id_fk' in several tables without an issue. In MySQL, from what i've run into, you can only have one foreign key relation of that name in the entire database. I resolved that by appending an abbreviation of the table's name before the relation/object name to make each name unique. So that foreign key name would then be named 'cura_user_id_fk' (for a table named 'cms_user_role_affiliation'). *Then* you have restrictions each database might impose on name lengths. I hit a wall when I wanted to support Oracle and Firebird because they both have a 31 character limit for table/object names. So make sure to not be too verbose. - Research data types for each database Each DBMS does things slightly differently. Example: varchar. In Postgres it's 'character varying', Oracle (if I remember correctly) is varchar2, and others just plain varchar. SQLite considers all integer derivatives, such as smallint and bigint, as plain integers. Firebird's text data type is 'BLOB SUB_TYPE TEXT'. - Auto-incrementing fields This is something that can be done very differently across the board. For example, Firebird's latest stable release, 2.5, doesn't support auto-incrementing fields very easily and requires the use of a trigger for it. Postgres requires the creation of a separate sequence that is bound to a specific field/column. MySQL and SQLite simply support AUTO_INCREMENT in the table creation query. - Database build process I used PgAdmin to construct the original database. I then reconstructed it for MySQL using Navicat. From there I used a skeleton dump of the MySQL database for the SQLite and Firebird schemas with modifications for data types, sequences, and constraints. - Queries This is a situation where an ORM would come in handy since these DBMS' differ on many things. Some examples: MSSQL uses TOP at the beginning of a select query instead of LIMIT at the end. The LIMIT statement can have different syntax on non-MSSQL databases. Criteria, such as BETWEEN, can work differently. Grouping can work differently. Some DBMS', such as SQLite, support a limited set of syntax. That's all I can come up with off the top of my head for the moment. The main thing is this: it's a fun endeavor and you'll learn a lot but it takes a lot of work and research.
You can do both 
it pays to point out that there are some edge cases with this method because the value of a month is more or less ambiguous. When presented with +1 month, strtotime() will try to advance to the same day number in the next month. However, when that day number doesn't exist, it uses the number of days in the current month. ex: # lets say today is the 31st of May. June only has 30 days. $today = strtotime('31-05-2012'); # result: 2012-07-02 echo date('Y-m-d', strtotime("+1 months +1 days", $today)); Because of this, it is often better to use the [weekdate standard](http://en.wikipedia.org/wiki/ISO_week_date) when looking at recurring items. The value of a week is always 7 days, but the value of a month could be anything from 28 to 31 days.
Understood! I have heard about using routes just never dove into them. Thanks for the input - certainly going to read up on this and understand how it all works. Thanks!
Reflection is not much more inefficient than your magic __call method... Running 3 tests, 25000 times each... The 2500 highest and lowest results will be disregarded. For reflection, out of 20000 runs, average time was: 0.0000338213 secs. For __call, out of 20000 runs, average time was: 0.0000286073 secs. For public, out of 20000 runs, average time was: 0.0000178116 secs. Results: Test Name Time + Interval public 0.0000178116 +0.0000000000 __call 0.0000286073 +0.0000107956 reflection 0.0000338213 +0.0000160097 in a word... negligible. Gist of the test: https://gist.github.com/2287660 edit: I added a public method call to show the *real* difference between the three
*+1, Informative*
Grep usually won't help in these instances because the domain will be obscured through some form of encrypted javascript. What is helpful, however, is to look through the server logs and check which files are new/changed. If you can figure out when the offending file was placed on the server, you can typically match it up with a request to the site. That request probably contained some attack code which either directly or indirectly placed the malicious file. 
Get SQL Pocket Reference Guide and that should be a good point where to get orientation if what you're doing is portable between databases. That's what I do...
Bad advice isn't babysteps, imho. That's a step backwards.
Stop trying to get people to do all your work for you, you lazy fuck, and RTFM. 
Wow, thanks for that huge reply :P And i did RTFM but it was explained is such a vague way.. I tried to get it working following the manual but i just couldn't.. And believe me, i'm not lazy.. I've got all the code set up except for the date part..
I wrote an app that uses a pear library to interface with databases and have it working with mysql, mssql and postgresql. The biggest hurdle has been Oracle support since it's quite a bit different than the others listed. The biggest thing I've learned is to keep the queries as generic as possible and as has been mentioned already don't use vendor specific stuff if you can get away from it. I ran into issues where I had to re-write a bunch of queries since I was using double quotes which MySQL supports but Postgresql doesn't. 
because `spl_autoload_register` allows chaining and multiple autoloaders.
PHP deprecate something? But it'll break all the PHP 3 code that's still out there! ;) [Seriously, though.](http://us3.php.net/manual/en/mysqlinfo.api.choosing.php)
&gt; I like to hire Redditors - are there any here? Nope, there are no redditors on reddit.
You mean you don't appreciate the abundant phpmaster spam of shitty articles filled with advertising?
Welcome to r/php biggest circle jerk other than r/circlejerk
Just FYI if you create a DateTime object the constructor will accept strtotime-styled input as well
Sweet. An article covering PDO in Portuguese. Can we get substr() in French next?
I ran this through Google translator to get the gist of what it was talking about. Basically it's just an article that says a lot of people talk about pdo, mentions it has multiple database adapters and then tells you to find more information in the manual. No real information in it, weak article.
Great tests. Thanks for sharing them. I think most of us *assume* reflection would be a performance killer, because... well... Usually it is in other languages.
Which can be easily overcome by having your remote worker setup a web cam. That will work if you're the kind of person that absolutely needs to *see* your workers... working, rather that judging them by the quality and quantity of their work.
Is there a TLDR as to why to not just use Capistrano? I've found it works pretty seamlessly with symfony right out of the box.
awesome thanks
The whole concept of doing this is stupid. Please read up on autoloading in php.
After some further reading, according to [[this]](http://us3.php.net/manual/en/function.set-error-handler.php): &gt;The following error types cannot be handled with a user defined function: E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING, and most of E_STRICT raised in the file where set_error_handler() is called. I might be misunderstanding this, but it seems that given this, the bit of code I typed out will result in never receiving any email since the function will never be called for an E_ERROR type error. You should definitely test it before assuming it is working as intended.
I'm about to start one 
I am not sure about the details right now but you can register a shutdown function for php and in that function there is a way to check whether php shuts down because of an error or not. He will also want to check for more then just E_ERROR. I think &gt; E_ERROT works, but I am not sure. Sorry for being so vague, but I am about to go to bed. :-)
Logged in Boolean User Id number Display settings array Preferences array Assigned permissions array You could store things like geo location, incoming referrer URL, log in time, etc. 
also, I am not complaining, I really do appreciate your feedback but your rtfm response for the cache limiter question wasn't helpful in this case because the man page basically uses the the word define itself. I have a php book that i purchased recently and the description in there is ambiguous as well.
I would not recommend using PHP for something like this. It's due-able, but it won't be as optimum as using a low-level language for performance or something like flash/flex/silverlight for pre-built ease.
...especially if you are a lousy manager with no real-world experience or idea of how to judge their work.
I guess you missed the "See also the session_cache_limiter() documentation for information about what these values mean." part of that two-line paragraph. 
User data, shopping cart items, flash messages etc. 
thank you for your reply. when you say not to use large arrays in session vars, is that because of a performance decrease access them because they are on disk. Would it be better to query the database each time if the user is bouncing from page to page? If resources were an issue would I want to worry about the database or server more? Just curiosity and wishful thinking.. (for standard webhosting company, not my own home).
In all truth, you can use a simple Cipher class to store data in encrypted cookies and by-pass the whole session concept. Storing all the data in a cookie is secure enough for non-bank or government sites and frees your server from the task of storing and managing session files or database records. In addition, if you run out of storage in memcached you will find sessions magically get deleted which could bother your users. In other words, using cookies is tops for performance since it "crowd-sources" the storage needs and is available to any server that handles the request. However, when you no longer control the sessions (since you can't just wipe the DB table or memcached server) you have to plan tokens and iterator keys into your data as well. 
I need exactly what I need for my application. Same for permissions. If you have the perfect one-size-fits-all solution post it or gtfo. 
I already had a headache, and now it's five times worse. Redesign the home page and I might come back for a read.
You actually CAN pass an object into the session, as long as it is using the default serialization method (which includes the object name in the serialization). The object will be recreated the next time the session is started. However, you have to already have the object definition loaded before session_start() is called. That said, I wouldn't recommend it for any complex objects, just data models, and I'm not certain if it will pick up on protected/private variables.
Well, that's what I want. To use Flash.
That makes a lot of sense. The one load balanced server I've dealt with keeps unique visitors tied to one server, but I doubt all load balancers work that way. TIL, thanks!
That's only if you don't go the smart route and have www.website.com and static.website.com. The static version would be a cookieless domain, and it gives you a very simply option to swap that out with a CDN in the future which would be miles better as well.
&gt;&gt;In your opinion, would it be beneficial to a medium traffic website to store a session in MySQL? &gt;Not really. If the idea is to decrease the load time, then storing it in-memory using something like memcached would be tons better. I would like to interject slightly here. If there is the potential for the site to grow large enough to require a load balancer, then one should consider having your session data stored in the database. On several occasions I have been involved with coming up with architectural plans to work around local session storage. At the very least, use your own session handler code to store your session data (even if it is local). This allows you to tune the session handling based on the current needs of the site (memcached for when speed is required or mysql when load balanced cluster is required). You should learn and become intimately familiar with [session_set_save_handler\(\)](http://us.php.net/manual/en/function.session-set-save-handler.php)
Your XML data might already have an expiration date, which you might want to use instead. Check out the [expires and cache-control HTTP headers] (http://en.wikipedia.org/wiki/List_of_HTTP_header_fields). Although this isn't a coding solution, you could setup a [Squid proxy] (http://www.squid-cache.org/), set it up to cache all requests, and just point your script at that. I think by default it will cache xml pages, but you might have to configure that, although it shouldn't be difficult.
I must agree with this. If you really need to get name of static class from a property you could do it this way: $lol = new Derp(); $x = $lol-&gt;stuff; echo $x::someStaticMethod(); Also, if you need to have reference in property you can try with [singleton pattern](http://php.net/manual/en/language.oop5.patterns.php#language.oop5.patterns.singleton) and do it like this: $lol-&gt;stuff = StaticClass::singleton(); $lol-&gt;stuff-&gt;someStaticMethod();
I never said you couldn't. You cannot, however, pass an object by reference and keep that object in-memory, like the OP asked.
nice, that's great i enjoyed your response. 
Yes, you will need to make sure that you have a persistent PHP instance because opcode caching is shared. I use fastcgi. Instead of always caching again every 5 minutes, you really should just check the file every 5 (or whatever) minutes. The RSS feed should have a date/time field you can use and then compare that to the `filemtime($file)` of the file you have locally and decide whether you need to write it to disk or not. 
Jesus formatting is hard on an iPad. Here's the [thread link](http://www.phpfreaks.com/forums/index.php?topic=357095.0) if you wanna see it all prettied up. 
Gosh, that's an incredibly backwards way of doing things. MySQL has the [DateTime](http://dev.mysql.com/doc/refman/5.1/en/datetime.html) type to handle things like this, so the question is, why aren't you using it? To format the date, you got the [date_format](http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html#function_date-format) function. date_format(publicationDate, '%M %e, %Y %h:%i %p')
Think 'benchmark' would be a better title
My apologies, I was under the impression PDO had an ORM component attached.
either use the method from headzoo or use a switch() { ... } don't use autoloading if you do not understand what this means. It can easily mess up your code and produce more errors then you want...
I've found out MySQL time functions are much more acurate. $db-&gt;fetchone(" SELECT SEC_TO_TIME(60*$minutes) as mytimestamp "); // result is in hh:mm:ss format so get rit of last 3 chars echo substr($db-&gt;result['mytimestamp'], 0, -3); 
If you see this from this perspective, then ANY test will be useless, since a test would be at no time a real world case. The better way would be to have a script / application which runs on mysqli. then rewrite it into PDO and THEN run some requests against it.
You can approximate tests MUCH better than running things in a loop 100,000 times... Obviously testing your exact application is the best, but it's also not very useful to other people.
&gt;I wouldn't do it that way with date_format, personally, because that's presentation logic, and you've gone and stuck it in your data layer. It's generally a better idea to do it in the template as op has suggested. Eh, personally I would've transformed the results to [DateTime](http://php.net/DateTime) objects before that data even touched the template. So no, I wouldn't have used date_format personally either, but given OP's code, it doesn't appear that he was intending on changing the format. &gt;If you need several different date formats in places, you'll end up having several identical queries that only select that field differently, which means that you can't cache them as one query. It's just not pragmatic to do so. Neither of those statements are true. Surely you know how to use prepared statements. 
I use `mysql_connect()`, wrapped up in my own MySQL wrapper class. This is old-fashioned, I take it?
The function escapes strings for use within MySQL strings. So `O'Neal` is what would actually be inserted, though it may be escaped in the MySQL query itself, eg `INSERT INTO table VALUES 'O\'Neal'`
Not only is it old-fashioned but it's dangerous, negligent, and reckless. Prepared statements are simple and *very* easy ways to prevent (with 100% effectiveness) SQL injection.
 $input = "4'11\""; preg_match("/(\d+)'(\d+)\"/", $input, $results); list($match, $feet, $inches) = $results; $cm = $feet * 30.48 + $inches * 2.54; 
Could it be because the epoch was at Jan 1st, GMT. And since I'm PST it'd be 8 hours earlier?
Quite possible, indeed. The value you're passing to the date() function is either not an integer, or it is zero. 
Here you are. http://imgur.com/a/NTV1u
[preg_match()](http://us.php.net/manual/en/function.preg-match.php) looks for regular expression matches in the provided input ($input) and, if provided, stores the results in the provided array variable ($results). The regular expression breaks down as follows: / - start of the pattern (\d+) - any arbitrary number of digits as long as there is at least 1 ' - nothing special, just look for a ' character (\d+) - same as above \" - " character, escaped with \ / - end pattern The parenthesis around \d+ are optional but very important in this particular example. They tell preg_match to store the results in $results in a specific way... the entire match (4'11" in this example) will be stored at $results[0], the first parenthesized match (4) will be stored at $results[1], the second parenthesized match (11) will be stored at $results[2]. If you had more parenthesized matches, it would use further cells in the array to store those. Lastly, list() is used to store those results into specific variables for later use. EDIT: Also: &gt;Also if instead of "4'11\"" I put $input = $_GET["var"] would the code work? Yes, as long as the text contained in $_GET['var'] produces a match in preg_match().
Thanks!! So should I replace the "d" by a number myself or do I just leave it like this?
Just leave it like it is, \d is a regex special search pattern. See [[here]](http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/) for some more available patterns.
Then shouldn't you do the same with the PDO version? See [PDO::quote](http://php.net/manual/en/pdo.quote.php).
&gt; Last Insert ID Chances are you are inserting a single row at a time and if you need to insert a lot of data then it's a once-off operation. If you truly have a situation like that where you need to insert 100,000 rows in a situation that isn't a once-off run then bulk inserts and selects, then inserting again (thus using 3 queries instead of 3*rows queries) can be done and might even be faster if you're using a networked server. I'd have to test it to actually claim this, though. &gt; Simple Selects This does not really apply to the original example. And I would say that if you have a query like that then your brain should actually be screaming that something is wrong, because do you really need to search by name and age? Could you not instead search by id and thus optimize the query? The mere act of thinking "Am I doing this wrong?" Whenever you see a query in a loop solves so much and highlights problems. &gt; And if you had said that in the first place, we probably wouldn't be having this conversation. :) Indeed. But in my world nothing is ever black and white and I took it for granted that people would not assume it to apply to every single case ever. I should of course not have assumed this as it's the internet and the audience is way too large for such assumptions to hold. I still believe that my comments apply to the far majority of cases.
&gt; bulk inserts and selects, then inserting again Yeah, you said that before, and I still don't know what you mean. How exactly are you selecting if you don't know the row id? Everything else is only meant to disprove the notation that all queries easily fit into some nice, neat little box, and you can simply do bulk operations for them. &gt; I should of course not have assumed this as it's the internet and the audience is way too large for such assumptions to hold. Although this is /r/php, and it's easy to assume the audience is all noobs. :)
Thanks :)
&gt; Yeah, you said that before, and I still don't know what you mean. How exactly are you selecting if you don't know the row id? You know how many rows you insert, so after you insert you select with order by and limit, then you reinsert. Possible but no idea if it's sane and I'll be perfectly honest and say it's too much work to actually test.
This is exactly why. Also, non-numeric strings are interpreted as `0` if converted to an integer. Hence your code is interpreted as &lt;?php echo date("F j, Y, g:i a", 0)?&gt; and returns December 31, 1969, 4:00 pm accordingly.
I don't think that would work at all. Unless possibly done inside of a transaction.
* I would recommend [Datetime::createFromFormat](http://www.php.net/manual/en/datetime.createfromformat.php) to convert your $_POST['date'] to a DateTime object * Store the publicationDate result from the database in a DateTime object * Call -&gt;format('F j, Y, g:i a') on the new Object //$_POST['date'] = '04-01-2012, 12:01'; $timezone = new DateTimeZone('America/New_York'); // Does your &lt;input name=date&gt; placeholder use the 24 hour format? $date = DateTime::createFromFormat('m-d-Y, G:i', $_POST['date'], $timezone); // Does Your placeholder use the 12 hour format? // MM-DD-YYYY, HH:MM (am|pm) // $date = DateTime::createFromFormat('m-d-Y, g:i a', $_POST['date'], $timezone); try { $DBH = new PDO('mysql:host=localhost;dbname=test', 'root', 'password'); $DBH-&gt;setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION ); $title = 'Title Test'; $publicationDate = $date-&gt;format('Y-m-d H:i:s'); //$publicationDate = date('Y-m-d H:i:s', $date-&gt;getTimestamp()); $summary = 'Summary Test'; $content = 'Content Test'; $STH = $DBH-&gt;prepare('INSERT INTO articles (publicationDate, title, summary, content) VALUES (:date, :title, :summary, :content)'); $STH-&gt;bindParam(':date', $publicationDate); $STH-&gt;bindParam(':title', $title); $STH-&gt;bindParam(':summary', $summary); $STH-&gt;bindParam(':content', $content); $STH-&gt;execute(); $last_insert_id = $DBH-&gt;lastInsertId(); $STH = $DBH-&gt;prepare('SELECT publicationDate, title, summary, content FROM articles WHERE id = :id'); $STH-&gt;bindParam(':id', $last_insert_id); $STH-&gt;setFetchMode(PDO::FETCH_ASSOC); $STH-&gt;execute(); $result = $STH-&gt;fetch(); $date = new DateTime($result['publicationDate'], $timezone); echo 'Title: ', $result['title'], '&lt;br&gt;', 'Date: ', $date-&gt;format('F j, Y, g:i a'), '&lt;br&gt;', 'Summary: ', $result['summary'], '&lt;br&gt;', 'Content: ', $result['content']; } catch(PDOException $e) { die( $e-&gt;getMessage() ); } 
Yeah the website is quite hard to read, but I like the articles.
These would be associative arrays via post and they should work exactly as you have descibed. &gt; I should see a subarray in the $_POST called array with values "one" and "two". one and two would be the keys, the value comes from the input. Have you tried the minimal test case? &lt;?php if ($_SERVER['REQUEST_METHOD'] == 'POST') print_r($_POST); ?&gt; &lt;form method="post"&gt; &lt;input name="array[one]" /&gt; &lt;input name="array[two]" /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; This outputs: Array ( [array] =&gt; Array ( [one] =&gt; [two] =&gt; ) ) 
Yea, I'm using this: &lt;form action="/samplepost.php" method="POST"&gt; First Name: &lt;input type="text" id="fname" name="text1[fname]" /&gt; &lt;br /&gt; Last name: &lt;input type="text" id="lname" name="text1[lname]" /&gt; &lt;br /&gt; text3: &lt;input type="text" id="fname" name="text1[text3][text]" /&gt; &lt;br /&gt; text4: &lt;input type="text" id="lname" name="text1[text4][text]" /&gt; &lt;br /&gt; &lt;input name="submit1" type="submit" value="submit" /&gt; &lt;/form&gt; If I fill out each form field and print_r the resulting $_POST, I get the following: Array ( [text1] =&gt; Array ( [fname] =&gt; tolley ) [submit1] =&gt; submit ) I've used this functionality quite a bit in the past and never had any problems with it. Is there an apache setting for this?
ok, so every element in your form is an array.. Apache has nothing to do with this btw, it's all php. With what you posted you have this: $text1 = $_POST['text1']; //array $fname = $text1['fname']; $lname = $text1['lname']; $text3 = $text1['text3']; $text3Value = $text3['text']; ...
1. I didn't write the form, one of my coworkers did so we could test this. It's not actually being used. You are right though, each id should be unique 2/3/4. Just to test this functionality. We use it in other parts of our site correctly.
Ok, that rules out all the apache settings. Yes, that "should" be what I see in the resulting $_POST, but all I get in my PHP backend is: $_POST[text1] =&gt; Array ( fname =&gt; tolley ); $_POST[submit1] =&gt; submit
Care to substantiate your reasoning? I explained mine below.
The browser submits fields literally named 'a[0]' and PHP parses this string into an array. Browser submits POST request -&gt; Apache passes on verbatim to PHP -&gt; php parses POST into $_POST superglobal They are called "HTML Arrays" in the PHP documentation. http://www.php.net/manual/en/faq.html.php#faq.html.arrays This is not a webstandard, only something PHP does with the post request. In another language you'd have something similar to, $post['a[0]'] .
I checked the headers and all the fields where present with their values in the POST data
You have text1[lname] and text1[text3][lname] ... therefore i doubt PHP builds jagged multidimensional arrays... you will need all your field names to correspond to the same dimension, so text[1][lname], text[3][text], etc. I prefer to have an uppercase field name corresponding to a controller name or some such for clarity. So User[name], User[password], etc. then $user = filter... (... $_POST['User'] ) . 
Do you have the actual file for the html? I just ran a test and everything should work with [multi-dimensional arrays](http://arizonawebsitedesign.org/work/tests/array_post.php). 
This works on other servers, just not on our new one (PHP 5.3.8, Apache2.2.12, Linux/SUSE).
ok. well i am new at this so you will have to forgive me. maybe i am being a bit too concerned about database performance. i actually just started reading an advanced book on db's and am started to realize that I was being silly. my original idea was to have a central "control" object that would be made up of a "user" object, an "authenticate" object and also an object for interacting with the database. I was also going to store updated information in the object so that if the user made a review on something, that user's interface would reflect it and then i would update the database when he or she logged out. I see now that I must go about this a different way and I may have a bit more reading to do. Are you suggesting that I should query the database to verify the user's credentials each time a new page is loaded? I also am going to look into caching and memcaching as I don't really even know what these are and have a feeling that they may be part of a more elegant solution. Any other advise you have for me would be great. Also, in regards to your comment: | As for the performance implications of managing sessions in your database, remember that you only need to check permissions when a user attempts to perform a privileged action (post a message, read private messages, etc). | In my case, I would like to have the content be only for registered users, so I guess that anything the user does (other than attempt to log in) would be considered a privileged action. 
Run this sometime in the Zend Framework library: find ./ -name "*.php" -not \( -name .svn -prune \) -exec grep -EHni --color=always "function setOptions" {} \;
Ok, I got this from firebug: submit1=submit&amp;text1%5Bfname%5D=tolley&amp;text1%5Blname%5D=tolley&amp;text1%5Btext3%5D%5Btext%5D=three&amp;text1%5Btext4%5D%5Btext%5D=four I ran it through parse_str and I experienced the same bug. Seems like the [ and ] and being encoded?
Why not just use ruby? I just don't see a point to this
holy f*^% i feel like i don't know anything... cookies can be stored on the server? is that what they mean when writing the session to disk? i have three books at home and have read through the chapters on user authentication in all of them and I still feel like I know nothing. I wish there was some resource that would explain this topic specifically. I even read and hand-wrote every single php session function and description from the manual and still feel like I don't know them well enough to use them effectively. 
I will definitely look over it more thoroughly tonight. I agee with mjburgess, but I also don't see anything wrong with wrappers that make one more efficient or comfortable. The performance impact of your code is probably negligible. Readers may be confused (newcomers at least). However, its no worse than any other language that doesn't provide insight to how some things work 'magically'. Tl;dr is good job on creating something you find useful. I will let you know what I think when I have a chance.
This is the output that I get from parse_str: ( [submit1] =&gt; submit [text1] =&gt; Array ( [fname] =&gt; chris [lname] =&gt; tolley [text3] =&gt; Array ( [text] =&gt; three ) [text4] =&gt; Array ( [text] =&gt; four ) ) ) Which looks exactly right to me. If you're getting something different then that's definitely a problem. I used the following code: $var = 'submit1=submit&amp;text1%5Bfname%5D=chris&amp;text1%5Blname%5D=tolley&amp;text1%5Btext3%5D%5Btext%5D=three&amp;text1%5Btext4%5D%5Btext%5D=four'; echo urldecode($var); echo '&lt;br&gt;'; $array = array(); parse_str($var, $array); print_r($array); 
What version of PHP are you running? If that code I submitted gives you a different result, that's a very serious difference. There's no server/browser/whatever interaction going on just running a small snippit. 
You can also have many fields named "foo[]", and it will be received in php as foo[0], foo[1], as necessary. Just like actually assigning values to foo[]
I responded to him as well. He makes good points. I feel that if you know the language well enough, being lazy isn't terrible: I, as a programmer, try to make things easier on myself. This class is something that could do that - if not for me, for someone. If someone knows Ruby, they are hopefully capable enough to transition into PHP and understand the class itself. If not, there are more than enough resources out there to enlighten them.
Don't use '@'. It's bad practice, handle error appropriately. Which in case of PHP usually means writing your own error handler.
There's a long standing rule regarding using a language the way it's meant to be used. Meaning when you're trying to turn language X into Y, then just use language Y. That being said, I don't actually see anything "Ruby" about this, which I think makes it a fine project. All you've done is wrap native types in class wrapper, which hundreds of PHP devs have done over the years. Some thoughts: * Your methods are returning a native data type, rather than an instance of r. To me that doesn't make any sense. If I'm using your r class, then I want to work in the r world. The returned values should also be an instance of r. This also means I can't use a fluent interface to write code like this: $var = new r('Foo'); $var2 = $var-&gt;flip()-&gt;downcase(); **Edit** I see you plan on doing this, but why would anyone want to turn it off? * I see a lot of methods that return false. For instance the downcase() method returns false if the wrapped data type isn't a string. I'd prefer those methods return the original value untouched instead of false when the method can't perform any action on the data type. Also a lot of those methods can still be used on arrays. When the value is a string, lower case the string. When the value is an array, lower case all the values in the array. * You can have your to_s() method, but implement PHP's own [__toString()](http://www.php.net/manual/en/language.oop5.magic.php#object.tostring) method too. * Create an r() function, so I can use code like this: $var = r('Foo'); Which returns a new instance of r for the item. * You could have marked the whole class *final* instead of every. single. method. * Please don't do stuff like this: define("DEBUG", false); define("CHAINING", false); Unless you're going to namespace your class. Instead create static methods on the r class like r::setDebuggingMode() and r::setChaining(). * You should namespace your class. * Create unit tests for the class. All in all the code is good, but this isn't something I'd use. Representing native types as objects is fine when the language supports it, and the language provides boxing/unboxing. Otherwise it turns into a pita.
Ok, that's the same version I am running. Did you run the exact snippit of code I provided [here](http://www.reddit.com/r/PHP/comments/rt98q/question_about_arrays_in_the_postget_data/c48j7qg)? If you did, then something is fundamentally wrong with your PHP installation. If not, then I have a few other debugging ideas. 
Yes, see my pastie above, that's a raw log of all queries sent to mysql. You can also see in the PDO::mysql constructor: * [it enables emulation automatically](https://github.com/php/php-src/blob/PHP-5.3/ext/pdo_mysql/mysql_driver.c#L618) * And then overrides it if you set [PDO_MYSQL_ATTR_DIRECT_QUERY](https://github.com/php/php-src/blob/PHP-5.3/ext/pdo_mysql/mysql_driver.c#L634) * or [PDO_ATTR_EMULATE_PREPARES](https://github.com/php/php-src/blob/PHP-5.3/ext/pdo_mysql/mysql_driver.c#L636) So, unless you specifically pass this as the 4th parameter to PDO() array(PDO::ATTR_EMULATE_PREPARES=&gt;false) Then it emulates prepared statements via string manipulation.
Negative. I'm saying by default it emulates prepared statements instead of using native mysql prepare methods. See [this comment](http://www.reddit.com/r/PHP/comments/rsihg/pdo_vs_mysqli_performance_comparison/c48onuh)
http://php.net/manual/en/pdo.construct.php Using the OP's example with that parameter it would be: $conn = new PDO( 'mysql:host=localhost;dbname=pdo_mysqli', 'root', 'root', array(PDO::ATTR_EMULATE_PREPARES=&gt;false) );
I don't think screencasts help gaining time over text articles, but I welcome diversity.
I've looked into this and while there are solutions that do exist, my Javascript knowledge is not as strong as other areas. I'm capable of writing ajax request etc but using XMLHttpRequest with javascript and getting it to work in every browser would take a lot of time. It'd be nice if I could just ask the server for an integer via ajax instead of having multiple kbs of javascript on the page load, and for the progress bar not to work on some broswers/browser configurations.
You're not thinking about server load at all. Are you uploading files bigger than 1GB?
The submission of a valid username and password, or a valid long term stay logged in cookie, begins a session. If a current request doesn't have an existing valid session, they are not logged in. If they have a session, then we look up whether user is logged in from the info tied to the session. So it is possible for a person to browse a bunch of pages without logging in and without a session being created, allowing many pages to be cacheable severally. Technically it has also become much more complex than that. As part of preventing login CSRF (which is distinct from regular CSRF) I actually begin the session when they view a login page, before logging in. And I pass a token unique to that session in a hidden field as is customary in anti CSRF practice.
Most modern browsers can do this via asynchronous requests now. [plupload](http://plupload.com/) can do all the cross-browser heavy lifting for you.
I can't tell if you're joking or not, but Chrome knows the progress because it's responsible for reading the file and writing to the network. The issue here is the security implications of giving client side scripts access to these kinds of details (location/name/size of files on the system).
for arguments sake print_r($_SESSION) do you get ANY output
Sorry, forgot it's no longer free.
Agreed. Excellent demonstration.
Wow. I have nothing more to say -- that simply shouldn't happen. It has nothing to with the HTML, the browser, the server, or anything in between. Your PHP installation just simply doesn't parse the parameters correctly. And it's not even the version, since I ran it on 5.3.8 and got the correct result. 
So, you're testing for the existence of a session cookie, and only starting the session in that case?
Too lazy to do it right now, but I'd be curious to see some fuzzy stats on big libraries like this: Number of total lines of horizontally repetitive methods (setOptions, getOptions, getInstance, etc) / Number of total lines of (actual) code = % of the library that can (theoretically) be eliminated thanks to traits I know it's kindof a superficial way to measure code quality, but it'd still be interesting. Afterall, the library *is* getting pretty large (granted, this includes svn history): # du -sh Zend 149M Zend
Yea, I'm not sure what to try next.
I wouldn't call it that superficial. Code repetition is analogous in a lot of ways to denormalized data in a db schema. Yes your system can run fine with it and yes sometimes it's faster than refactoring so there are times when the technical debt is acceptable, but by and large it's in the category of things to be avoided.
And it's the issue of name spaces was solved with decent auto loaders that used first character uppercase, underscores and proper directory structure. I think the whole namespaces scheme they've introduced just makes things worse. Aliasing I believe is a double-edged sword. It's makes typing out thing faster, but remembering that you aliased some as bob relates to \xyz\def\monkeyboy\bob instead \mystuff\burrito\kitty\bob can become a PITA IMHO.
Seriously, I guess it's just because he's a beginner, but it makes me wonder--what MVC framework has he been using that only supports one controller and view?
Can anyone link to a basic writeup on traits?
[Here's the docs on it](http://www.php.net/traits). The examples there seem pretty straightforward
Well the problem is that people have jammed a lot of "non-repetitive" code into those option setters for lack of a better place to put it, so there will be a lot of this even with traits: /** * (non-PHPdoc) * @see Zend\Stuff\OptionSetterAndGetter::setOptions() */ public function setOptions(array $options) { // do some other stuff return parent::setOptions($options); } So that'd skew the above stats a bit.
THanks.
Flags are bitwise. Say you have four constants, TYPE_A = 1, TYPE_B = 2, TYPE_C = 4, TYPE_D = 8. You can use bitwise operations with them, like: $types = TYPE_A | TYPE_C; // ... if ($types &amp; TYPE_C) do_something();
Ok, here you go: http://pastebin.com/eCEfRnXj
I feel I should add (due to your downvotes on my posts) that I am not trying to give you a hard time about your excitement for a good new feature in PHP 5.4... But as a long-time PHP developer who works hard to write good code, I suffer from the stigma brought on PHP by the masses of shitty PHP developers out there who write terrible code. Traits, unfortunately, if used incorrectly, or gratuitously, have the potential to lead to even more unmaintainable or badly structured PHP codebases out there.. Traits are good, they are useful, but they are **not** a catch-all solution to every DRY problem, and I fear that they will be (ab)used in this manner, partly because they are "new and shiny", and partly because they potentially allow lazy developers to short-cut around good object-oriented design. 
I certainly considered that, but at this time, without having used traits yet, I'm not sure which creates a bigger dependency: relying on another class, or using a trait. I'm leaning towards using traits, as the dependency is at least spelled out in the class definition. In that way traits can be seen as a simple form of dependency injection.
Headzoo, I appreciate this feedback a lot. Using your feedback, I have made a lot of very major changes to the class. (Yes, you can take credit for them) * I created the `r` namespace and inserted the `index.php` file into the namespace as well. * I created the `r()` function that further shortens the instantiation syntax. Now instead of: `$foo = new r( $string );` You can do something cool like: `$foo = r($string);` * **More Importantly** I enabled global chaining for every single function. I halfway rewrote many of them because they were simply not returning the data properly. Now functions that actually modify the data in any significant way return the native `r` object and functions that return simple data do what they normally do. * On your urging (and common sense) I have completely removed **ALL** `return false;` return methods from **ALL** functions if they threw a false return on error or incorrect data type. Now, if the function gets an error that's not massive enough for an `Exception()` it just returns `$this-&gt;val;`. * Another common sense thing: I made the whole class `final` instead of writing `public final function foo() {}` a thousand times. Thought you'd like that :-P * I wrote setChaining() and setDebug() functions, and included options to enable/disable those on object instantiation. Now you can pass chaining as a second parameter on instantiation and debug as the third. `$foo = r("Pierce", true , false);`. Unit testing is coming soon, and I hope to have another round of additional functionality by the end of the week. Thank you so much for your feedback, I honestly think this class is now a lot better because of it. Let me know what you think! Pierce
Thanks - and my apologies - it's as you said, too simple to have any problems. So, outside of the box: * Check for non-printing entities, potentially UTF8 or otherwise, that are screwing up the page secretly? * Does var_dump give a different result than print_r? * Can you create a new page and paste the code in and see if it works instead? * Or a different more-simple form from scratch (use non-array variable names)? * Maybe post a copy of your php.ini file so we can see if there are any really weird settings? (like the aforementioned post_max_size)
I started using FastCGI and it helped performance quite a bit. I was forced to use Windows and it was painfully slow. http://learn.iis.net/page.aspx/247/using-fastcgi-to-host-php-applications-on-iis-60/
Yes, this is one workaround. On most of the large apps my company maintains all of the static content is served from an Amazon CloudFront CDN. But most people on here are not implementing that.
Cookies are only used and stored on the client's computer. All the confusion comes from where the **data** is stored - in the cookie, in the database, in memcached, etc.. If the data is stored on the server (and not in a cookie) then some kind of "id" or "handle" or something has to placed in a cookie for the client to bring back so the server knows which data belongs to which user. Just like you have a Driver's License so the state knows that you are the same person they have in their computer. Personally, I just skip storing the data on the server - and *stuff it all inside the cookie*, rather than just placing an ID in the cookie and placing the matching data in the database.
I'll help if you'll send me a link. Ps I played the game several years ago
Looks and sounds great. I only have one last piece of advice, and that's use a more meaningful namespace. Something like "Piercemoore\RubyPHP".
 &lt;?php $comment = new Comment(); $comment-&gt;set('This is awesome!!'); $comment-&gt;submit(); ?&gt;
But it lines up enough!? (If you slant your head.) Otherwise, browser type, version, OS etc. would be probably helpful ...
It generally works well to just output the expected variables for the UI with a var_dump() - unless you're building an API. If you're building an API than you can use something like http://hurl.it which allows you to GET/POST/PUT/DELETE et al. to pages and set variables and the likes. I've found it fantastic. Additionally, there are tools but I guess I'm not a "big boy developer" ;p
Looks like you are correct. `$stmt-&gt;getAttribute(PDO::ATTR_EMULATE_PREPARES)` returns `true` by default. This fact also appears in a comment on the [PDO::prepare page](http://us2.php.net/manual/en/pdo.prepare.php) from "public at grik dot net 07-Mar-2012 12:23". I'm not seeing _any_ mention of this anywhere else in the manual. I suggest you open a bug report/doc update request to get that clarified on the pages for PDO::prepare, PDO::__construct, Prepared statements and stored procedures, and several others where "prepared statements" for mysql are mentioned. I think this information is rather important, to say the least. In fact, MSDN actually states for its mssql driver ["By default, this attribute is set to false."](http://msdn.microsoft.com/en-us/library/ff628176.aspx). I wonder if even that is accurate.
Yeah. With Firefox things would probably line up if the font was a single px bigger. With IE9 the font would need to be much larger.
I am on the latest version of Chrome on Ubuntu and it doesn't line up correctly for me.
Same for me on Chrome/Mac. Removing the # wasn't necessary, but definitely can't hurt.
Let's try it with some indented code: &lt;?php public function initialize(){ $ctx = browsingcontext_Context::getContext(); if($ctx instanceof entidad_Entidad){ $path = framework_registry_ApplicationRegistry::instance()-&gt;get('rootPath') . "/foo/bar.html"; $this-&gt;setHtmlPath($path); } } ?&gt; 
http://www.baseball-databank.org/ nice baseball stats db with multiple tables
What's large?
Any better for you now? (Be sure to no-cache refresh)
That does seem to have done it (for both), yes...
Yes, the namespaces separate code bases. In one script I might have code like this: &lt;?php namespace Headzoo; class r {} ?&gt; And in another script I have this code: &lt;?php namespace Piercemoore; class r {} ?&gt; Now I can use both classes even though they have the same name in another script: &lt;?php $r1 = new \Headzoo\r(); $r2 = new \Piercemoore\r(); ?&gt; In the event that you're going to initiate one of those classes a lot, and you don't want to type of the long namespace name, you can use this code: &lt;?php use \Headzoo\r as hr; use \Piercemoore\r as pr; $r1 = new hr(); $r2 = new pr(); ?&gt; All that aside, your namespace should at least start with a completely unique identifier. Like "piercemoore".
I suppose the purple lines could be lightened up *just* a bit.
Neat idea, but I assume that you do not have regex-based routes then like `/user/edit/(\d+)`.
Write a PHP script to fill the database to your specifications.
 &lt;?php echo "Test."; ?&gt; Cool.
Yep, that or successful login credentials from a login form, the viewing of a login form, or a long-term cookie (from a previous selection of "stay logged in" checkbox).
How large do you need it? + Why don't you generate it on your own?
Use a integration testing library like https://github.com/ericbarnes/codeigniter-simpletest You can sent up tests that GET and POST to your controllers, including using cookies. Then you can assert things such as response headers, status code, text and patterns. Before I do any front end stuff, I get it working with predetermined requests. E.g. I POST msg_id and text using a certain test user cookies, and I expect to get back a success type response if the user has the appropriate rights. Then you can change stuff around in the backed and optimize/refactor code, and always know if you broke another part of your app. 
I think it depends on the project. I used to just use a test file where I called the main function from and then had print_r's and echo's within the other functions. More recently, and when working with objects, I'll put pertinent information into something like: $obj-&gt;Messages[ ] = $infoToKnow; And then print out that array in just a single place. It feels easier for me to manage that way. I've used PHPUnit a bit, but usually just for testing single, smaller functions that don't require too much setup to run. Primarily checking things like verifying certain values are equal to each other or checking Boolean values against what is expected. I know there's more that can be done with it, but I haven't had the chance to dig too deep into it. All this being said, I probably wouldn't fall into the "big boy developer" category either. 
Anything that works man, thanks
No prob..
Objects are instances of classes - classes are the blueprints, but when you actually create something, say $foo = new MyClass; it is an object. In most modern programming languages, almost everything is an object - that is its derived from a class schema. As for when to use classes it depends entirely on the problem you're solving and somewhat down to personal taste. I can't really reccomend anything specific, but bear in mind the question you will find yourself asking as you develop your skills is more "When should I not use a class?".
Use classes/methods if you want a robust, scalable, testable system - functions if you want an unholy clusterfuck. But seriously functions and classes are fundamentally different tools. A function does ONE thing like strlen or ucwords whereas a class hopes to encapsulate a larger concept. This facilitates design because you aren't worrying about implementation - you're working at a higher level of abstraction. Classes will still use private methods or objects that handle implementation but this complexity is hidden behind the concept of "A logger" or "An XML Parser". OO design is all about breaking things down into discrete concepts at varying levels of abstraction then building them up to create a larger system. For example you would probably want an abstraction for "a file" like SplFileObject. At a higher level you might "A filesystem logger" that cares about "a file" but equally "an XML parser" might also care about "A file". If you build the responsibility for "a file" into "a filesystem logger" than other classes would need to duplicate functionality. That being said functions CAN be useful for very specific things but many coding standards will mandate even simple functions are moved into abstract classes so rather than calling a something like reverseString() you would call String::reverse(). The reasoning behind this is that global scope is pretty much universally bad and although the latter function is technically in global scope, it's only the class name that's global not all the methods within (post 5.3 you can namespace functions but most hosting still hasn't caught up yet). So to summarise don't use functions, and if you do either use a 5.3 namespace or create the function as a static class method. Before registering a function consider if the function is actually part of a larger concept that can be a class.
You can't honestly expect moderators to cater for a 3rd party app.
Thanks. Out of interest can I use functions outside of the class in a class?
Yes. Try experimenting for yourself!
as soon as you write function myfunction(){ return; } it is available EVERYWHERE as myfunction(); If you write class SomeClass { public function myFunction(){ return; } } then it will only be available as $someclass = new SomeClass; $someclass-&gt;myFunction(); the other option is class SomeClass { public static function myFunction(){ return; } } which can be called anywhere as SomeClass::myFunction(); 
I know this is a dumb question, but I do this all the time: does the form have the enctype="multipart/form-data" attr? Also, check into doing this client side. https://github.com/pomle/jquery-dropUpload
Not the credentials. You need a shared secret to reliably identify the session, nothing more, nothing less. The user gets to the login page, sends a username and password (hopefully over HTTPS), and you start a session with this authenticated user. For this the server and the client needs to share a unique piece of information (a token, it's the session id). So you can store these tokens in a table as (user_id, session_id, start_time) or something. But, of course, you can just use PHP's session storage to store the user_id in it, so you don't have to look up the token every time. However, virtually any page gets complex enough to do a DB lookup anyway on every hit. So you might as well, use the DB. But it's a trade off. Always pulling fresh data from the DB versus reading the session file from disk might be slower, or .. if the DB has shittons of memory (InnoDB Buffer Pool for example), then it might be faster to avoid the disk I/O. (Then maybe your application server, where PHP runs, has a lot of free RAM used as file cache, so .. it depends. Always measure performance don't guess what will be fast, and know what you're measuring of course.) So, first worry about security, then usability, then performance.
Here's your [documentation](https://github.com/honestbleeps/Reddit-Enhancement-Suite/), there's more [here](http://code.google.com/chrome/devtools/docs/elements.html). Why does it need an API for a CSS change?
A good solution would apply the css rules on code:hover
You seem to be new to web programming. I highly recommend You this: http://learncss.tutsplus.com/ PHP and HTML+CSS are two different things. If It is one time project and You do not want to learn this You should use visual HTML editor, like http://www.w3.org/Amaya/ (free) or Dreamviewer (very expensive)
Yup, I'm new. That apparent, eh? :) However, I've built my entire site and it is fully functional. Now I am just trying to make it 'look' more professional. I realize this might not be the right way to do it, but I was more concerned about coding the functional aspects than the visual ones. Now it is time for me to make it look nice and easy to use. I realize PHP and HTML+CSS are different....I'm building in a vacuum so I don't really know my lingo too well. I will check out the css tutorial. I'm fairly certain most of my issues can be solved with good css implementation. I was just hoping for something a bit easier. Thank you for your reply.
Not exactly part of their job to cater to a browser extension...
So you want someone to do your work for free, in return for an undisclosed arbitrary share of profits if and when you reach an undisclosed arbitrary level of success? Wow.. uh.. no. I think the moderators should remove posts like this..
Okay... When phrased like that... I can see an issue.
You can also buy design for Your website from websites like http://themeforest.net only for ~15 USD and You'll get good looking design made by professional web designers.
Any self-respecting programmer avoids profit-sharing.
Sorry dude, I have to disagree. Each design is thoroughly reviewed by Envato staff before being accepted and there are many, many templates that are rejected (i.e. all of mine). Many of the people who make these templates are employed and have another job, they simply use themeforest, etc for some extra cash.
Like I said in the last paragraph, I'm not saying that there aren't hobbyists that can make good-looking designs. My point is that actual professionals are more likely to be hired and well-paid for their particular expertise. For instance, the company I work for gets paid in the millions for building websites and systems and for ensuring that our products doesn't just look good, but are built properly in other regards as well, such as usability, accessibility, security and wide platform support. 
Ok, I'll concede that point. However, I still give it a -1 FWIW. Now, if it could apply syntax highlighting....that'd be a different story. But that's probably not possible in this context.
I personally wouldn't want these changes. Half the point of this css change is making the code stick out while I'm quickly scrolling through the comments. I could however see the benefit in using much lighter colors until you hover over the code.
Of course, I'm not denying that, I'm just saying that vast majority of the designers on ThemeForest, etc, aren't hobbyists, but rather professional designers who figure it can't hurt to earn some extra money. I'm definitely not denying that if you were to hire a freelancer or company to design and code you something custom, it would be better. However, that being said, the stuff on ThemeForest is made by professionals, and not hobbyists (for the most part).
They might be people looking for a bit of extra cash, but after a quick glance at the source code of some of the templates, it is clear that they have only taken the design into consideration. So while some of these people might be professionals, their work on themeforest certainly isn't professionally built. But hey, that's what you get for buying designs at $35 a pop, I suppose. 
Fair enough I suppose. I guess it depends on what you get, some of them are pretty decent, whereas others aren't as good.
I, too, would really like that. RES is also on Github, so if nothing else perhaps one of us could take the initiative on if it's just 'a matter of doing it'. I believe there's also open-source syntax-highlighting JS projects out there, and so it's possible the hard part is mostly done -- it'd just be a matter of plugging it into RES's code.
You can view the live theme and review its code before buying, so if you buying duds you only have your self to blame. 
I don't see anything insecure about it, except maybe if the user enters "user : text\nanotheruser" in the "name" field which will make it look like there were two entries when there was only one. That and the potential risk of XSS in case you haven't htmlspecialchar()ed the content of the text file when displaying it.
Never trust user input (POST). Clean user input with something like : $personname = filter_var($_POST['name'], FILTER_SANITIZE_STRING); http://php.net/manual/en/function.filter-var.php
Well, if I'm understanding correctly, this is an issue with the formula you are using.. If you try to think about two different links.. Link 1 =&gt; 1 Day old, 100 Votes Link 2 =&gt; .1 Days Old, 5 Votes Equation: ( votes - 1 ) ^ .8 / ( age + 2 ) ^ 1.8 Link 1: ( 100 - 1 )^.8 / ( 1 + 2 ) ^ 1.8 = 5.46662 Link 2: ( 5 - 1 ) ^ .8 / (.1 + 2 ) ^ 1.8 = .7973 The equation you're using takes time into account, you would need to find a different method to gauge the weights of your links. If you take Link 1 into account again after two days, it becomes: Link 1, 2 days old (100 - 1)^.8 / ( 2 + 2 ) ^ 1.8 = 3.2568 So something with a lot of upvotes will want to stay higher in the ranks for longer, so newer things with less votes will get pushed below it. Eventually the time in the denominator will get really big and push the link down regardless. ** Not that there is something actually WRONG with the formula.. just that it won't achieve what you want... 
How do you read out the data? This isn't going to work smoothly if multiple people are submitting information.
You probably want to sanitize all user input...
You are aware that ^ in php is XOR and not POW right?
As you've mentioned you're more interested in learning about database structures, installing some existing scripts and study their database structure would probably be your best bet.
Should they also not worry if the changes don't work for IE users? (The answer is, of course, no--no one should worry about &amp;%!$ing IE users).
I think your confusing "Professionals" with "Experts" Common Misconception, a "Professional" means you get paid to do something, you derive income from it A hobbyist does something as a hobby with normally no income. There can be Novice professionals, and there can be Crappy professionals, being a professional simply means you charge money for your labor. There are all levels of "Professionals" Small Business can not afford a Million Dollar web design, hell I know large business that can justify it. Just because Firm X charges 1 Million, and Firm Y charges $100 does not make one less "professional" than the other. 
Sanitize for what? Newlines?
I'm not entirely sure about what the best way to answer your question is, so I'll give you my thoughts of OOP, primarily in PHP. When I write a web application, I have a set of classes. One is an abstract class called UI. Every view on the application inherits this class. In a different folder to these classes, I have files which are names as {ClassName}.content.php, {ClassName}.header.php, {ClassName}.footer.php. If one of these does not exist, it'll check for that file using the name of the parent class. I feel this is a good way to do the templating. It keeps the front end and back end separate. There is another class called Route, which I don't really inherit from, but I would consider this more of a library. Here is some code to explain better: https://gist.github.com/2323757 I never put any SQL queries in any of the view controller classes. I put all of these in models. I hope this helps - Someone else will probably give a much better answer. 
I know, sorry. :| And hmm... I shall try that tact! Thanks, 'cause I can only get so far on my own! I'm going to delete this thread now. :)
I'm still new to a lot of this, but I think it really depends on the complexity/readability of your script. I use functions when I just need something done once and it's fairly straight-forward. Objects and classes are handy when you're creating something more complicated-like image uploading and processing. The only real drawback to OO that I can see is that it takes a while longer to read over new code and figure out what is going on. So, functions for simple straight-forward scripts, OO for complex and information sensitive scripts. That's at least what seems to be the best.
No problem, glad I could help! (If you ask any questions,I might even chip in to help!)
**Edit 2**: Read Edit 1 first I think you're being unreasonably harsh to those that repeat the mantra. If they follow it, the data is always going to be safe. If they don't, they're going to run into bad situations. Bit of a Pascal's Wager scenario. As I see it, OP is posting a beginner's question and is getting feedback. IS OP going to run into problems? Probably not with this script. But the fact of the matter is, it is ~~good practice~~ probably a good idea to strip out anything unnecessary. If this is a plain-text form, you'll want to strip tags, (some) control characters, and even useless ASCII characters. It's never a bad idea to sanitize data you're about to store. **EDIT**: So my inbox tells me there's a shitstorm here. I think that my use of buzzwords and an overzealous need to show an example has created the wrong message. Allow me to clarify - I'm not here claiming that this is the solution to all of life's/PHP's problems. Yes, you need to evaluate what your data is/will be, how it is displayed, how it is managed, how it is stored, and all of the applicable types of attack that could be hitting your system. No, I would probably not sanitize this data one bit if it were my own system. But I'm not about to say that to someone giving me a simple example on user input and data management. I'm going to say that you should be wary of unknown data and act accordingly. I guess if this were a database example people would be less up in arms about "sanitizing because it's good practice". I'm more than happy to discuss good advice vs bad advice, as long as it's kept civil and logical.
Finally, a use for my Philosophy 101 class I took in first-year Uni.
I haven't used traits in anything yet, but it seems that you could overuse them to the extent that you end up with a mess of traits that are too tightly coupled to too much of your codebase. One little bug in a trait ends up breaking dozens of classes, and god help you if you have to refactor anything. Changing a trait can break all the classes that depend on it, and changing a class using a trait may break the trait's functionality (especially if the trait accesses members of the class that is using it). And on top of all that, you can have a crazy trait-hierarchy since traits can 'inherit' from other traits. IF they are going to do that, they why not just implement full multiple inheritance for classes? One of the qualities of a good design is isolation/separation of concerns. Change code on one class shouldn't have repercussions across the entire codebase. With traits, it's very easy to end up in a situation where traits and classes depend on each other in a complex crisscross fashion that becomes stifling. It then becomes a struggle to change or add anything because you have to make sure that you haven't broken trait X because you edited class Y, and if you did and you have to change trait X to fix it, you have to make sure that change didn't break classes Y,Z,W,A,B,C,D and traits G,H,I that all use trait X, and so on. Hopefully you can see how a chain of dependencies like this can easily get out of control.
The largest problem I can see that this actually prevents is that you could otherwise cause an error by passing an array into POST. Good point, though.
EOFs, nulls, newlines, html, javascript, colons.
Hi there, [click me](http://www.reddit.com/r/PHP/comments/rwleo/wondering_whether_this_simple_feedback_script_is/c49dks8?context=2), pretty please. He keeps babbling the same shit with no logical basis, just citing best practices he doesn't understand. There's a big difference between distrusting all input and overzealously stripping away half the data due to misguided paranoia. My point's not going to get across either way, so I'll speak how I fucking like.
I don't understand? I guess that's why I've been designing large-scale web applications for 9 years? There's a reason it's an oft-repeated mantra, no matter how much you dislike it. Yes, many people don't know what the fuck they're talking about when they give textbook replies. I've also taken user input and jammed it into a database table sheerly because sanitizing it in any way jeopardised the integrity of the data. What did I do? Made that shit safe and stored it anyway. The fact of the matter is, best practices need to be reinforced in the learning stage (OP, I'm assuming). When someone says "hey is this secure?" and you see user input being stored without any sanity checks, that's a red flag. If I saw *you* do it (a professional, I'm assuming) I would ask why and then listen instead of just clasping my hands over my ears and yelling "BEST PRACTICES". You need to learn and understand the rules before you break them. 
phpt.
Let's not just parrot the facts. If you're going to sanitize user input, you'd damn well better know what you're trying to secure your code against. Whitelisting works for some things, but the biggest obstacle to writing secure code is always ignorance.
Oh yeah absolutely. It's always a multi-tiered system. When you start getting larger and larger, you're de-coupling everything. I expect my workmates to have their shit together if they're dealing with input. Likewise, when I'm pushing and pulling from the DB, I make damn sure that the data is transferred safely. Redundancy etc etc
All the more reason to teach people how to think, rather than tell them what to do.
&gt;Can you demonstrate how this is true of traits, but not any other function? How are traits special in this regard? Since we're only talking about the internal implementation: only traits can use private variables from outside the class, so only traits have this problem. However this can simply be avoided by not using the private members of an object from inside a trait. 
&gt; only traits can use private variables from outside the class I don't think this is how it works, but ok. Should be easy enough to show it with 2 simple classes and a trait. Right?
&gt; The main problem with traits is that a trait can never guarantee that a class implements a certain method As I understand it, a Trait is added to the class signature. It's a guarantee that the features of the Trait exist on the class. It's class concatenation (so I've read).
I'm a redditor...though, I'm not sure how I can prove it.
&gt; By moving the functions inside your own classes it's becomes your responsibility to check if everything works as expected. By checking the signatures of the functions you are using. &gt; If you use a trait you need to check the source of the trait to make sure you don't break anything. Rephrasing the process doesnt make it different. If I call a method from a class that is wrapping another, I do the same process. I check the function signature to ensure I'm calling it correctly.
&gt;Can you demonstrate how this is true of traits, but not any other function? How are traits special in this regard? Traits live outside of a class but can access the **private** members of the class. Traits Also do not have any state that is both private to the trait and shared across functions defined in the trait. (Yes, you can hack something with static variables inside a function, but how many newbies are going to do that?) Here an example of commingling private state: (note I haven't used 5.4 yet, so the syntax may be off) trait tr1 { /* defined in traits.php in library foobarr9000 downloaded from http://myawsesomewebpage.com */ private $counter = 0; public function CountEventTypeAlpha() { $counter++; } public function TotalAlphaEvents() { return $this-&gt;counter; } } /** @author "Bad Luck Brian" * note: E_Strict is not turned on */ class EventCounter uses tr1 { private $counter = 0; public function CountEventTypeBeta() { $counter++; } public function TotalBetaEvents() { return $this-&gt;counter; } public function testme() { $this-&gt;CountEventTypeBeta(); $this-&gt;CountEventTypeBeta(); $this-&gt;CountEventTypeAlpha(); $this-&gt;CountEventTypeAlpha(); $this-&gt;CountEventTypeAlpha(); assert($this-&gt;TotalAlphaEvents() == 3); assert($this-&gt;TotalBetaEvents() == 2); } } why does the testme function fail? While it's easy to see with everything right next to each other, one could miss it in the real world where the traits and the class using them are scattered in different files. Now I'm sure you can tear that example all apart, but that doesn't matter. We are talking about what the average inexperienced PHP developer would do, not someone who knows what they are doing. Ugh. I'm not sure why I even care about this. I enjoy reading thedailywtf.com and can't wait for the first traits based entry to show up there. Then again, [duty calls](http://imgs.xkcd.com/comics/duty_calls.png) 
So a "Professional" firm that sells 1 Site for $50,000 is more "Professional" than a firm that sells 1 template for $20 to 2,500 people? 
But a trait doesn't know by which classes it is used, and hence can't check its signature. On the other hand, the class which uses the trait doesn't know, without looking at the source, which functions are required by traits. When dealing with inheritance the base class can (and should) always define explicitly which functions it wants to use, and what it's signature should be. Hence the child class can implement it that way, without looking at the source of the base class. The same goes with calling methods on other objects: you now how to call them only by signature.
Like said, you're severely misunderstanding what I am saying. Either that, or you're deliberately misinterpreting me. Go back, and re-read what I've said.
&gt; But the fact of the matter is, it is good practice to strip out anything unnecessary. Security by habit is not security. Either understand what you're doing or stop pretending to yourself that you're secure. &gt; If this is a plain-text form, you'll want to strip tags Why? &gt; (some) control characters Why? &gt; (some) control characters Why? &gt; It's never a bad idea to sanitize data you're about to store. Making random unexplained edits is not sanitization. Otherwise, you might as well remove everything else you can think of that might ever have an effect, and since you've already missed the big one, SQL injection, we can wager that you're pretty much just reciting things that some people do in some places so that you can feel like something has been done. Bad advice.
&gt; I expect my workmates to have their shit together if they're dealing with input. And this is why you got hit by an XSS attack.
It's better to have an angry person fixing bad security advice than to have the bad security advice stand. Please remember that downvotes are for people who do not add to the discussion, not for people you disagree with or wish had a different tone. This man is giving factually accurate comments to repair bad security advice, and he's below zero, while the clueless guy giving bad advice who's been attacked before is vote-positive. This is backwards.
&gt; There's a reason it's an oft-repeated mantra For the same reason that everyone screeches MVC, or pure-functional, or object-oriented, or design pattern, or pubsub, or tiered architecture: because amateurs are much more common than experts, and amateurs like to repeat things they heard. Frequency is not a good way to justify security advice. &gt; Yes, many people don't know what the fuck they're talking about You, for example. &gt; We've been stung once badly with XSS &gt; What did I do? Made that shit safe I rather doubt that, given the advice you're giving, and your track record. Just remember, there're other holes in your work, too. &gt; When someone says "hey is this secure?" and you see user input being stored without any sanity checks, that's a red flag 1) Encode output, not input 2) You keep saying sanity checks, but it's a binary stream. There is no such thing as a sanity check here. Every single bit pattern is legal. You're just repeating this to sound correct, and sadly, people are falling for it. &gt; I would ask why and then listen instead of just clasping my hands over my ears and yelling "BEST PRACTICES". Except that what you're doing is screaming "this is the right thing to do because it's what everyone does." The only difference between that and a best practice is that best practices have specific technical justifications, and you don't. What you're saying is "if someone criticized you, you should listen, instead of just yelling community." But several people are critcizing you, and your only response has been to ignore them and talk about the community and its mantras (showing a deep confusion over what a mantra is.) Does it bother you that you're doing exactly what you claim other people shouldn't be doing? &gt; You need to learn and understand the rules before you break them. Says the guy who's reciting a bunch of rain dances that don't apply to the situation, and admits openly that the reason he's doing that is because he's been recently compromised.
These are quite legitimate problems when you think about it. Another 'use' of this is to elevate a LFI to an arbitrary code execution.
[Here](http://vimeo.com/27454281) is a decent video that goes through a bunch of the filter functions
[riiiiiiiiiiiiight](http://www.phpt.org/)
This guy is asking for the simplest of all advice and a bunch of people in this thread are up in arms about evangelists reading from textbooks without any experience behind them. Your bullet points are good advice, but this isn't going to mean anything when reading the page on Forms 101. I'm not trying to be correct in all instances, just in general. Also, I'm politely ignoring your ham-fisted ad-hominem arguments. So *in general* it's good advice to not trust user input. I'm learning every day, so should everyone else. But let's just get real for a second and understand that OP is just (presumably) starting out and needs to get the basics down before delving into it further. 
Well yes, I agree that doing things "just 'cause" leads to the illusion of security. We design things here in the office with forethought as to what the possible avenues of attack are and manage that accordingly.
&gt; Except that you don't know anything about the project, what caused it, who was responsible, how it happened, or how we fixed it? I don't need to know any of those things to know that you're giving advice on something you haven't been able to get under control on your own projects, and the advice you're giving is how someone loses that control. It's like someone saying "You should steer with your feet, I know, I was in an accident three months ago," then protesting when someone says "yeah, there's a reason he got in that accident" that someone doesn't know how it happened.
It's always important to get one's unit tested.
&gt; Hey look I sense a lot of anger here. That's a convenient excuse, but your sensing is incorrect. I'm not angry. &gt; I have about 9 years experience in developing applications. That's nice. What matters isn't how long someone's been doing something; it's whether they give wrong advice. &gt; I'm actually genuinely curious as to why you think I'm giving such unsound advice I gave more than one clear explanation. Unfortunately you started playing "I'm going to read a stranger's emotions over a text channel in public to avoid what they're saying," and as such did not see them. &gt; I've had minor problems at best Discovered. You've discovered minor problems. There's a *big* difference, when you're talking about security. &gt; Send me a PM No. I'm not interested in having a chat with someone who "senses a lot of anger." You were giving bad security advice in public. I explained why it was bad. My goal is satisfied. &gt; I'm up for learning new shit all the time And yet your response basically guarantees that that won't happen here. Sounds like you're telling yourself a story. BP talks about how good it is to the environment for a reason. &gt; given your "enthusiam", I assume this topic is actually a specialty of yours. It is. But I don't like the way you're treating me, so you won't get the benefit of explanation. Do yourself a favor: when someone starts pointing out why your approach to security is critically defective, don't pat them on the head like a child and "sense a lot of anger." Get real serious and ask for help. You need it.
 EDIT: Oops, I totally missed that traits do support abstract functions (just found out). You were right, I was wrong. &gt;Anything that is relative to $this is required So you'll have to look at the source of the trait to find out which methods are required. &gt; &gt; the base class can (and should) always define explicitly which functions it wants to use, &gt;Can you rephrase that? Or give an example? If we have a normal class, than a parent class can't call a method which he doesn't provide himself: class someClass { public function foo() { $this-&gt;bar(); } public function bar() { //do something } } If you extend this class, than you will see the definition of the bar method in it's documentation. There are no calls to non existing methods, and that is not possible since someClass is not abstract. In an abstract class it is possible to do something like that. However, even in abstract classes you can explicitly define that you need such function, and you should do that. e.g. abstract class someAbstractClass { public function foo() { $this-&gt;bar(); } //Note: no error will be thrown when not defining this abstract method, but it is highly recommended to do so. abstract function bar(); } If we now only look at this documentation we immediately see that someAbstractClass requires a bar method, even better: you can't initialize any child class which doesn't implement the bar function. However, the trait version would look like this: trait someTrait { public function foo() { $this-&gt;bar(); } } The class and method definitions alone are not enough to tell the user of this trait that it should implement the bar method. The only way a user can find out that it should is by reading the source code. 
You shouldn't really just rely on inheritance for everything, object composition is a more flexible approach. You don't need multiple inheritance because you can just use another object's functionality. This is better because it supports the single responsibility principle - you defer the call to a class that is responsible for some specific thing like the database connection or whatever. A news list shouldn't really require much in the way of OO design. You just have a controller, a view, some kind of database connecton or abstraction layer (PDO, Propel, Doctrine etc.) and that's about it really. You should look at Symfony2 or one of the other big frameworks. It should make many things clearer.
To re-iterate what evertrooftop said, you want to use composition, not inheritance. Another way of phrasing it is "has as" vs. "is a." See example code: http://pastie.org/3744986
&gt;All plain text is sane by definition. And how do you make sure what the user is submitting is plain text? Don't assume anything sent over POST is only comprised of printable ASCII. &gt;Aggression is a common and appropriate response to a novice giving bad security advice and ignoring other people telling them why it's bad. The only novice here is the one defending a lack of input validation. Do you work for w3schools, by any chance?
&gt; And how do you make sure what the user is submitting is plain text? Don't assume anything sent over POST is only comprised of printable ASCII. There exists no datastream that HTTP can send which cannot be represented as an octet stream written to disk. I invite specific counterexamples. &gt; The only novice here is the one defending a lack of input validation. Then propose one meaningful form of validation. We'll wait.
PDO uses emulated prepared statements by default.
Thank you very much. I will PM you if I really need some help. :)
&gt; &gt; &gt; And how do you make sure what the user is submitting is plain text? Don't assume anything sent over POST is only comprised of printable ASCII. &gt; &gt; There exists no datastream that HTTP can send which cannot be represented as an octet stream written to disk. &gt; &gt; I invite specific counterexamples. &gt; http://jetlogs.org/2007/07/19/passing-input-arrays-in-php/ And every one of those can be written as an octet stream to disk. That's not an example of an encoding that can't be written to disk: that's an example of presenting a group of things as if they were a single thing, then relying on that it's a group of things to cause a minor inconvenience. So I guess I wonder if you have forgotten that the context was encodings, or just don't understand that PHP's hacky naming scheme for arrays isn't an issue of encoding at all. Maybe I should mention `serialize()` just to save time. &gt; &gt; Then propose one meaningful form of validation. We'll wait. &gt; How about validating size? The language (and nearly all webservers) already does this. &gt; Or is_string/is_numeric? Is_string will always be true; the problem did not make any claims regarding numbers to be valid input. &gt; Maybe check if it's even set? The result in the case that it is not is both well defined and what one would want in this situation. &gt; You could even remove newlines and tabs You seem to be confusing "show me one legitimate form of validation for the problem as described" for "provide me a list of every random text transformation you could ever imagine being useful." &gt; since dumping all of your user comments into a single text file would be absolutely worthless if you couldn't parse it properly. Apparently the poster doesn't think so, since that's what he's doing. I'll ask the same question again. Do you have any specific validations of the poster's actual question which need to be done? Notice that I am not saying "please come up with things that you imagine someone, somewhere might need to do." &gt; &gt; &gt; The only novice here is the one defending a lack of input validation. At this point you have presented no forms of validation which are actually productive or necessary for the problem as described.
&gt;And every one of those [...] just to save time. Yeah, except his script isn't using `serialize` (which would be a form of sanitization, so...) and it's assuming `$_POST['comments']` is a string. &gt;The language (and nearly all webservers) already does this. Oh, alright. We'll use the default `post_max_size` value of 8MB. Great! I can just spam his form with 8MB worth of text— each time, writing 8MB to a file on his server. Do you really not see a problem with this? &gt;The result in the case that it is not is both well defined and what one would want in this situation. If he has error_reporting set to show NOTICE-level errors, and his public directory is in his home directory, he just gave everyone his username. If he's on shared hosting, even worse. &gt;You seem to be confusing "show me one legitimate form of validation for the problem as described" for "provide me a list of every random text transformation you could ever imagine being useful." You seem to be [dismissing my valid responses as insufficient](http://en.wikipedia.org/wiki/Moving_the_goalposts). &gt;Apparently the poster doesn't think so, since that's what he's doing. He came here for assistance. Do not assume he knows exactly what he should be doing. &gt;At this point you have presented no forms of validation which are actually productive or necessary for the problem as described. It was at the beginning of my comment: make sure it's set, make sure it's not too large, and make sure it's a string. You don't seem to be reading anything.
&gt; &gt; And every one of those [...] just to save time. I love how you edit out what I really said to avoid the thing that makes you wrong. &gt; Great! I can just spam his form with 8MB worth of text— each time, writing 8MB to a file on his server. Do you really not see a problem with this? This happens with every size bounding system. The system you suggested is identical. If you're arguing with the default size, set it. There's no reason to reinvent the wheel just to get around its default size. &gt; If he has Uh huh. &gt; &gt; You seem to be confusing "show me one legitimate form of validation for the problem as described" for "provide me a list of every random text transformation you could ever imagine being useful." &gt; You seem to be dismissing my valid responses as insufficient. Cute, but no. None of your responses show validation that needs to occur under the original problem statement. I've given specific reasons why each answer you've given does not address the claim you made. Merely asserting that you've already answered, then providing links to things which were rejected, while carefully editing out the rejections, doesn't actually make your case. &gt; He came here for assistance. Not with what he wants to write down. &gt; &gt; At this point you have presented no forms of validation which are actually productive or necessary for the problem as described. &gt; It was at the beginning of my comment: make sure it's set, make sure it's not too large, and make sure it's a string. You don't seem to be reading anything. All three of those were refuted already: it doesn't matter if it's set, it's already checked for too large, and it's always a string. Repeating wrong things doesn't mean you've said a right thing. Let's let this end now. I'm tired of you insisting you're correct while mashing the downvote button and saying nothing that actually shows the validation you claim is necessary is actually in any way necessary. *Nothing* you have shown, when absent in this context, creates a threat.
Thank you for taking the time to talk about Traits last night. You are a smart one and it was a joy to hear your views on these rather abstract matters.
It is completely unnecessary to strip those things out in my opinion. If you are accepting data from a a textarea encoding and escaping them is generally the best option unless you know how the data will be used.
Well, a more complex route would be something like the namespacing that github.com does to map username/reponame to a URL: `(\w+)/(\w+)/branch/master`.
First thing I noticed, I feel weird whenever I see a non static method returning a static variable. Just personal preference, I try to keep my static properties/methods away from their non static brethren. Second thing, I saw no namespace, PSR-0 your components. If you don't want to write a collection class for product items or discounts, I recommend using [ArrayObject()](http://php.net/manual/en/class.arrayobject.php). I like it because it's easy to [append](http://www.php.net/manual/en/arrayobject.append.php) objects, iterate over them, [count()](http://www.php.net/manual/en/arrayobject.count.php), and [serialize()](http://www.php.net/manual/en/arrayobject.serialize.php). 
awesome .. yeah, I was just poking around with those non-static/static hybrid methods. I'll be making those static . I've been doing psr-0 with my other symfony2 hobby project, and I plan on dropping that in also. Extending ArrayObject is an idea I haven't thought of.. very interesting.. Thanks!
what is the benefit to minifying a php class like that? Is it just to get the file size down to 1kb?
Well, the full, commented, documented, IDE-ready file (which should be used) is more than 1kB. I included the "min.php" file because I knew there would be people that would say, "That's not 1024 characters!" if I didn't. :) So to answer your question, the benefit is fending off skeptics (not critics).
yes, agreed! I'm really thinking about extending ArrayObject, now that you mention it. Implementing interfaces is good practice also. I'll add that also. Thanks!!
I get the feeling you either meant to reply to @JerkyBeef or didn't read my comment. I never said anything about compressing the script for performance (or other) benefits. It's just proof the script is only 1024 characters.
* Edits, I suck at markdown.
Looks great. "Saved" for future playing around. :) Thanks op
why don't you tell us what you *really* think?
Absolutely. A value of 7 translates to about 128 rounds. That's very low by modern hardware standards. A value of 12 brings it up to about 4,096 rounds. High enough to slow down a brute-force attempt significantly, but not so high as to keep your users waiting to authenticate.
You're not very good at giving constructive feedback. I agree that it isn't an optimal way to setup everything, but not having to pass objects around is efficient, not laziness. 
Your method is fine, but so is the OPs. They're just different approaches. There's some advantages to pure OO (easier testing, less coupling), but mixing in some dastardly statics can also be quite convenient. DB is a great place for this since it will be used across most any model. Would you really rather write: $db = new DB(Conf::get('DB.USERNAME'), Conf::get('DB.PASSWORD')); $db-&gt;insert($sql,$binds); Than: DB::insert($sql,$binds); //DB is lazy loaded on first use Each time you need to access the database? The latter is my preference. If you want to call it lazy, call it lazy, but I think it's just a more efficient way to develop certain aspects of a project.
holy shit this redbean thing seems amazing...
The algorithm is fine, the modular crypt identifier is just ambiguous. $2a$ is perfectly acceptable and safe, but new hashes should use $2y$ to show the implementation used to generate them was correct.
Shameless plug: https://codetique.com It is made for getting feedback on code. The comments are left in line with the code.
You are not creating problems, people just want something to complain about. Some of use actually do understand the purpose of the minified version of the code, and that it's not actually meant to be used in that form.
Sure. I made some assumptions about reloading the data from storage. In this case, you don't want to read a feedback form chock-full of HTML or RTL-trigger characters. This wasn't covered in the question, so yeah, I was a bit overzealous in that regard.
You are all kinds of amazing, any way I could send you a donation of sorts? XD Also, should I use serialization? I asked someone about it a few days ago and someone else told me it's a bad idea and suggested that I "take advantage of the R in RDBMS, use relationships between the tables via foreign keys." and it went a little over my head.
No thanks, just try things out for yourself and keep learning this stuff. It takes loads of time and you should probably start smaller than an lolpro.com clone. Learn your OOP, a framework, write your unit test, etc... Like my boss says "Never give up, don't complain, and don't stay up late playing video games." Fucking hate my boss. _Edit:_ Serializing an object might save you a few table joins.I don't know how granular you're getting with calculating the formulas of the masteries, runes, etc.. It could be a nightmare if you refactor and all the objects in your database no longer work. I'm not sure what the right answer is, but I wouldn't be afraid to try it and change my code later if it was a mistake.
lol. I'm not too bad with OOP as I've taken basic java and C++ courses, but just really clueless with what's going on involving databases. I understand just about everything going on in the code you posted above, except I'm not 100% with how serializing / unserializing works. Thanks a bunch for the help though, you pretty much got what I needed into my brain.
Thank you too! I enjoyed this conversation as well and I'm glad I could learn something!
Objects are passed by reference so there's no loss in performance.
check out adodb php - nice round set of instructions. being able to autoupdate reads with hand written queries is a nice thing (might require your own DDL). also include win32 sql server (2005/2008/R2) and (2012) - cakephp has the best sql server driver implement that is simple and works without too many bugs (1 last i checked) - doctrine/symfony had none but was way too fat. yii had like 10+ and ci was clearly written for mysql (putting primary_key=null; in the sqlsrv driver was worth a laugh) - these are about 1 year old perspectives of course. things probably have changed. 
Example for what? That if you mangle your code, then you can fit it into a smaller number of characters? What exactly is the purpose of this example? What are its instructive qualities? In summary, I couldn't give a flying fuck about the size of your code, and nor should anyone else, as long as it's efficient and effective.
Thanks, i have a new release coming in a few days. Eventually i will add git support so you wont have to link to a github page to get code feedback.
What do those 1024 characters in compressed form really tell you? Do they tell you anything about how clean the code is? Or how good it is? No, no and no again! Using the good old gzip compression + base64 encoding + eval trick, I could easily cut down the size from 1024 bytes to 720 bytes. See the result: https://gist.github.com/2338106. Now, what do those 720 bytes of random characters tell you? They don't tell *me* anything at least. I can't read from the fact that it's just 720 characters, that the code is super awesome. Actually, I cut down his code size by more than 300 bytes, does this make me an ultra-super-clean programmer? No. So, please, stop telling me that the code size matters. Looking at the implementation I can see a big static, tightly coupled, pseudo-global, untestable mess. And that in 1024 characters (or 720!). So, please, spare me with the small-is-good talk. Yes, short *does* mean good in some cases, e.g. if you can implement some algorithm in a very concise and elegant way. But this is something entirely different.
Sounds to me like you're trying to use [preg_match_all](http://php.net/preg_match_all)
I did not complain, nor downvote.
Yeah I may have to end up using that...I was just hoping to match the whole thing and do it in one step instead of two.
Well for one thing the ?: in the first group makes it passive, which means that it won't create a backreference (or show up in preg_matches). Just taking that out will probably fix your issue, but I'm guessing you only wanted to catch the "option 1" "option 2" and "option 3" without capturing a b c? just move the parenthesis of the ([^\']+) group out to make it '/\[%condition:((?:\'[^\']+\'):{([^}]*)},)*\'([^\']+)\':{([^}]*)}%\]/' then your first (passive) group will be the 'a', and your first nonpassive group will be option 1. 
Not quite what I'm wanting. I want to capture a, b, and c, and also option 1, option 2, and option 3. Your version still doesn't get me a or option 1, though I still am not sure why.
Overall I think it looks good. However I would explain why you are re-arranging the default layout. I do the same, but I think you need to spell out the actual intent and why you are diverging from the default install. Same thing with routes. I think you need to *explain* your reasonings a bit more. What the benefits/costs are. Newbies (the target of your series) that read your article, then repeat those same concepts in the forums and IRC will get shot down by the devs. You say "for easier management", but that is subjective and _not_ a feeling shared by the devs, in my experience. 
I really hope that's not JSON (or some other standardized format) that you're trying to regex.
It just looks to me like someone's recreating the wheel. With so many data format choices out there, why invent your own that depends on regex? Perhaps it's not this guy (but the data source that he's dealing with) and so he has no control over it.
Thank you for the excellent feedback. I will correct both the explicit bool returns where applicable and change the functions to return appropriate values (Empty arrays and such). Also, TIL about using | for @return docblocks, thanks!
You're welcome. And I hope you see it more as _improving_ rather than _correcting_, because IMO as long as it works reliably it isn't really wrong. The suggestions are more along the line of creating code that is easier to work with.
Dependency Injection is not about making application development easier, it's about making components more flexible. You extend or alter the functionality of the classes by feeding it an implementation of an interface. By doing so, you: * don't get a tangled mess of multiple implementations within the same class. * make your code less tightly coupled. * get a better separation of concerns. * can cover unforseen use-cases without having to rewrite the class(es). * simplify the development of *components*.
What I did was have a table dedicated to the entire site activity. The table structure is the following, where activity_id is the primary key: activity_id, type_id, user_id, ref_id, time_posted For instance, lets have creating a new blog have an ID of 1 and posting a comment on the blog an ID of 2. Also in this table, is a reference to the activity object (ref_id). In creating a blog, the activity object is the blog ID. In posting a comment, the object ID is the comment ID. It is also useful to log who made this activity (user_id). So what I do is use AJAX to poll a page which queries this table. Based on the results, I format the activity differently. If I see the type ID is 1, I pull data from the blog table to get info on it. If I see an ID of 2, I pull data from the comments table.
Since I started using IoC containers, there's no way I could go back. Say I have a service that requires a repository plus some object that handles email, and finally a class that takes care of firing error events. I can configure all that in one spot and fetch that fully configured object.
What do you think of yii so far? Is it a good choice for a PHP semi-novice with a solid programming background?
from my experience, you should look up "long polling" techniques to essentially request an update from the server ever x seconds. if you want to server to push notifications to the client try looking up web sockets. 
The IoC Class that's been floating around lately is more like a singleton/factory locator. However, I agree, configuring all your objects and their dependencies in a single place is as useful as keeping all your configuration values in a single file.
&gt; not all IoC containers are on par with each other I couldn't agree more, and in addition, not all implement the *same concept* of DI. Like many MVC frameworks that don't view MVC the same way.
Which class is it? Pimple's pretty grand.
It's always seemed over-complicated to me as well. I don't pretend to know a lot about it, but the only compelling reason that I've ever read to use Dependency Injection is to allow relatively pain-free unit testing. 
thanks for that suggestion, I'm going to look into that for a project I have in mind.
&gt; public function &amp;get ($name, $params=array()) &gt; &amp;get &gt; &amp; please die.
nice work :) very nice and clear.
It's not complex at all, if your class depends on something, don't make the class create that dependency, inject it in. One example may be a mailing list class that needs a mailer class to actually send mail; rather than have the list class instant irate one (not really its primary function) pass one in when the lists created. Yes, this does aid unit testing (in this case passing in a mock mailer object) but it also leads to looser coupling and more flexibility.
That's why you keep calling the container to a minimum, preferably only at the very topmost level of your application.
You do it just like you did with the database records, but instead you feed it a zip code, or a city and a state. &gt;Like I said, I really don't know a lot about PHP yet... Perhaps you should remedy that first before jumping off the deep end. 
Please, sit down and tell me your feelings.
When PHP returns an object, it is always by reference so the &amp; is useless. It triggers a notice when used like you did: `Notice: Only variable references should be returned by reference` You _could_ do this though if `$baz` is a scalar: class foo { private $baz; function bar() { return &amp;$this-&gt;baz; } } But I consider it bad practice and using a set is probably best. 
You mean "has a"
Excellent explanation. One more bullet point: * can unit test your code much more easily.
Just keep in mind that anything you're using or learning about for the first time can seem complicated.
I don't think it is. I would consider myself much more advanced than a semi novice and the biggest problem is there just isn't enough documentation so you have to comb through it picking it apart trying to understand it, and that takes a lot of PHP experience. CodeIgniter I thought was easy to learn but it didn't take long for me to find that it wasn't what I was looking for, I'm looking for something a bit more enterprise level. Like I said, I think more nice tutorials need to be written for these frameworks and I think the ones for Yii are kinda shit.
DI is a cost you pay for other QA benefits.
Just FYI __autoload with serialize() is a pain in the ass.
There's two books out there for it.
You'll probably want to look into node.js and socket.io. See my other post in response to questionableherp.
Somebody's got a bug up his ass...
I honestly would not mind if PHP 6 fixed a lot of this, though, even if it means re-writing a lot of my code to make it more consistent. 
I'm really hoping for a giant backwards compatibility break. Not for kicks, but to correct all of the weirdness that's been piling on for well over a decade.
I still get paid plenty to write PHP code sooooo.... Thanks for the cheat sheet!
The first language I learned was PHP and I have to say that I'm pretty partial towards it; however, this guy brings up some very good points. The one thing that really stood out was the @fopen( ... ) bit. It's completely true. The PHP project is just like any long-term programming project out there. It has been worked on by so many different people and has had so many bugs that needed quick commits that the programmers got lazy and tossed in quick fixes here any there. As mentioned here, I would really like to see updates in PHP that fix many of these issues and make it a much more strict language. The one thing about PHP that keeps me coming back is its flexibility. Things like variable variables and their support for arrays can be extremely handy and are generally not offered elsewhere. Locking down the language would also give me an opportunity to go back to my old code and fix it all up. We all have those projects we piddled away at every Wednesday night for two years. Six months in and ten thousand lines later at three in the morning when an error comes up, we get sloppy and add in a $foo = false; above the line in question for a dirty fix instead of true debugging due to the ease. The variables transform from `$mainCollapsingObject = ...; // This is the main table in the script blah blah blah` to `$_clapsAzzzzzzzz = ...;` A new perspective at the programming language will give us an opportunity to look at our projects from a new perspective and it will turn this "bad design" in to a well structured language with one single standard as opposed to [this](http://xkcd.com/927/)
Actually most of that code was ported to 5.3, and the old PHP6 branch has been officially abandoned (as in this was a bad idea, let's move on) versus just no one working on it.
There's some interesting tidbits in here, but there's also a lot of stuff that is either flat out incorrect or a clear example of the author not fully understanding something, which makes me question how accurate he is about the rest of it. But, so what? Yes, PHP has a lot of stupid quirks, things that happen when a language is evolved instead of planned. Thanks for pointing that out, again, like so many other programming bloggers have done before. The article doesn't even have a proper conclusion, it just ends. No suggestions for what to do about this, no resolutions, he doesn't even recommend viable alternatives. It's just one big angry rant. If PHP is so awful, DO SOMETHING ABOUT IT! Create a language that doesn't suffer from these problems, is as easy to learn (needs a syntax we already recognize), as fast to develop in (HTML embedded, as much as the MVC purists hate it, is one of PHP best features), as simple to deploy with (has to work well with Apache and Nginx), and is as well documented. Developers will eat that up like rabid wolves. If you can't do that, then you are not helping anything, you are just adding to the noise.
According to [this presentation](http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6) last year from one of the lead PHP6 developers... They were quite ambitious and people got bored, nobody wanted to do the hard work for Unicode support (including bringing along critical libraries such as PDO) and very little of the PHP6 code (and none of the Unicode internals) were bought back in to trunk. AFAIK there has been no development on the Unicode branch (still considered "active") and nobody has issued or suggested an alternative :-/ EDIT: Actually, I don't see the unicode branch in the github branch list so I assume it's trashed by now. The presentation I linked is about 12 months old.
I wondered if this would happen. Glad to help, I think :D
* No stack traces? Really? * No debugging? Well, that's a surprise. * foo()-&gt;bar() is a syntax error? O RLY?
Well put. I'll admit that my submission of this article to /r/PHP is part experiment. The article does have some... incendiary... phrases but a lot of solid content and well made points as well. Would be nice to be able to prove him wrong about his "community of amateurs" comment instead of getting defensive about facts and hurling ad hominems. I'm impressed with most of the other comments in this thread, actually.
Even though I agree with many many many of the points made, I also agree that he made some factual errors. The three you listed are most of them, though I'd say that PHP has very weak debugging out of the box and relies upon third-party tools that can be a PAIN to set up. It is indeed possible to get fairly strong debugging if you put in the effort. He is also right in that some internal errors do not give a stack trace by default.
PHP has problems - many of them. Many of them are inherited (such as function parameter ordering, as it tried to clone functions from other languages), or are left-over from the earliest days of its development. That doesn't mean that an ad hominem attack of the programmers who use it is in any way justified, or justifiable. My biggest issues with PHP, especially going toward PHP6, is the lack of any willingness by -core to "start over". Take the parts of PHP that make it what it is, and rebuild the structure around it. Build in OOP from the ground up, get rid of the ridiculous function naming, ditch the kruft left over from 20 years of supporting "safe_mode" and other ridiculous hangers-on. His descriptions of PHP ("all the wrong tools") is... intentionally incendiary at best, and utter horseshit at worst. What it all comes down to is that he has grown away from a language and now he wants to insult it and anyone who uses it. As is typical, it's the "I'm not going to do anything about it, so I'll write a blog post instead" attitude.
I would agree with you if his degree of derision were excessive, or if his efforts to describe the reasons it deserves derision were less than proportional. In this case, he goes far and beyond justifying his criticism. I'd almost say he is too kind.
From http://xdebug.org/docs/install &gt; add the following line to php.ini: zend_extension="/wherever/you/put/it/xdebug.so" (for non-threaded use of PHP, for example the CLI, CGI or Apache 1.3 module) or: zend_extension_ts="/wherever/you/put/it/xdebug.so" (for threaded usage of PHP, for example the Apache 2 work MPM or the the ISAPI module). Note: In case you compiled PHP yourself and used --enable-debug you would have to use zend_extension_debug=. From PHP 5.3 onwards, you always need to use the zend_extension PHP.ini setting name, and not zend_extension_ts, nor zend_extension_debug. However, your compile options (ZTS/normal build; debug/non-debug) still need to match with what PHP is using. I don't believe that was as clearly documented the last time I tried, but look at all the special cases in there! Then there's this from the same page: &gt; Xdebug does not work together with the Zend Optimizer or any other extension that deals with PHP's internals (DBG, APD, ioncube etc). This is due to compatibility problems with those modules. You want breakpoints and other things that many many other modern language give you? I won't even bother quoting the relevant bits of the page, just read it and TRY to read it with the eyes of someone who hasn't done it before or someone who's used to working in something like C#: http://xdebug.org/docs/remote
That's patently ridiculous. Attacking the people who use the language over what he sees as problems in the language itself is egregious.
Nope, not using 5.2. But why were there ever three different names for the same thing? zend_extension, zend_extension_ts (thread safe presumably, is there a sane reason why I'd want to use both?), and zend_extension_debug? Just because the PHP devs you know have never experienced a language doesn't mean that it's not a valid point of comparison. What about it not working with Zend Optimizer, a product created by the same people that brought you the language itself? What about the trouble needed to go through for remote debugging? Screw it, let's not even go into remote debugging, how would you add a breakpoint to a function call and inspect the state of variables at that point interactively?
I can maybe see why you're upset. There are a few cases where he might be construed to be attacking any and all PHP developers. In most cases he's fairly clearly only attacking a type of PHP developer. You can't deny that they exist -- they exist in all very popular languages. I choose to believe that the points where he can be construed to be lumping all PHP devs into the same pot are him just getting too excited and not accurately explaining himself. Now, if you ignore what you see as a personal attack, what do you think of the points made against the language itself?
1. Load any client that implements DGBp 2. Add a breakpoint to the function in that client 3. Load your webpage/run your CLI script 4. Inspect the variables
Functions; $foo(). Classes: new $foo; Other variables? $a = $b? Why would you ever say $a = 5; $b = "a"; $$b;? I just don't get it.
The entire initial stance. I just clicked it closed after that. Now I have to give this moron ANOTHER hit on this nonsense. &gt; A language must be predictable. He never gives an example of what he means by "predictable". It seems to mean "a language should do what I think it should". &gt; A language must be consistent. Similar things should look similar, different things different. Knowing part of the language should aid in learning and understanding the rest. That's an interesting trick. Where one person's perception should always match another's. Naming is hard. It doesnt happen to line up for everyone in any language (programmatic or otherwise). &gt; A language must be concise. New languages exist to reduce the boilerplate inherent in old languages. (We could all write machine code.) A language must thus strive to avoid introducing new boilerplate of its own. All patterns allow for more complex patterns via combination. No definition for concise given, so anything he says seems to make sense if you want it to. &gt; A language must be reliable. Languages are tools for solving problems; they should minimize any new problems they introduce. Any “gotchas” are massive distractions. A bunch of tautologies that mean nothing. &gt; A language must be debuggable. When something goes wrong, the programmer has to fix it, and we need all the help we can get. I think he means "easy enough for me to debug without knowing the language". Good luck with that.
No stack traces out of the box, no. Perl has the same problem, and I complain about it there too. Method chaining was my bad! Removed.
Wait, I remember seeing one legitimate (although very stupid) use of it in OsCommerce! It's in the pointless `tep_db_*` wrapper functions for `mysql_*`. It goes something like: function tep_db_query($query, $link = 'db_link') { global $$link; // dumb shit... $result = mysql_query($query, $$link); // dumb shit... return $result; } Where by default it assumes a global `$db_link` holds the connection resource, but you can pass it a string to specify a different global holding a different connection. I guess they thought that was easier than just passing the resource straight in. Anyways, horrible idea, but there you go.
Pretty much. I mean, some of those settings are nice to have (like `xdebug.remote_connect_back`), but most don't have to be configured, yes. Your default IDE key is your username, or you just use the [really easy method](https://chrome.google.com/webstore/detail/eadndfjplgieldjbigjakmdgkmoaaaoc).
I've been developing with PHP for around 9 years or so now, and fuck, I would urge anyone to move away from it as quickly as possible unless they are utterly desperate for work. It isn't a "kick ass language", it is a fucking broken language that is starting to gain features that other languages have had since forever. It isn't "superb", it requires a huge amount of effort to write code that is even remotely as fast, maintainable, and secure as its contemporaries.
He has some points. I hate how strpos() and substr() have different variable ordering. I can never remember which is which and often do a google search just to find out. However I do love php. I used to be an asp developer and the system configuration/setup is just a pain. Php is easier to deploy in my opinion. 
Glad you sorted that out for us.
I got work doing it, I was still in the process of learning other languages to the level that I could do them professionally :)
&gt;If you can't do that, then you are not helping anything, you are just adding to the noise. But isn't educating people so that they can form more informed opinions helping someone?
Scala + play framework. 
&gt; Do you honestly believe that str vs string, underscore vs no underscore, ($needle, $haystack) vs ($haystack, $needle), array_ vs no array_, errors vs exceptions, and so on fits anyone's perception? I really think you're just trying hard to disagree. Won't even try to argue, by far one of the worst parts of the language &gt; for ($foo as &amp;$bar) is fucking insane. For loops in PHP leak the loop variable outside the scope of the loop, so that if you assign to $bar in the above case without first calling unset($bar), the last (or if break was used, the last used) element of $foo is silently overwritten. This is what he meant by a "gotcha". This is actually common in languages that don't have declarations for their variables, and you can reproduce the same effect with javascript if you decide not to use var. If you decide to use the same variable name for different jobs in your function - beyond i, j, k - you are getting what you deserve. Any code review should and will nail you for doing that.
I think "superb" is taking it a little far regardless of how you use it. It gets the job done.
Or, oooooor ...it's just because the time since the last "OMG, PHP is so bad, yo momma ain't so bad!" rant has been, oh I don't know, five minutes?! Honestly, yes PHP has problems, yes we all know it, yes we have read the arguments and counter arguments times and again, and it's boring me OUT OF MY FUCKING MIND!!! We know everything about it, and yet PHP is the five hundred pound gorilla in the web and as long as most customer servers only offer either this or perl (the exploded whale guts on you shoes of programming languages) I am not gonna go prancing around singing ladida.
Have you people never heard of an IDE??? Give phpstorm a whirl (full featured testing for 30 days without cost), you wil never have to use google again.
Why are 'pythonistas' always up themselves so much? The point of PHP is that is has a low entry-barrier and there is shedloads of work out there. It will pay your bills, and there are lots of frameworks which will take care of XSS etc. for you. Nobody has ever said it was pretty or well-designed, ever. Ruby's better than Python in any case.
Neither of your examples cover the use-case of the use keyword. The use keyword makes variables residing in a different scope available to the function. This...: function counter($start) { $value = $start; return function(&amp;$value) { return $value++; }; } .. is not equivalent to this: function counter($start) { $value = $start; return function() use (&amp;$value) { return $value++; }; } In the latter example, the return function does not take any arguments, but a variable from the parent scope is made available to it. $c = counter(6); //sets the starting position at 6. $c(); // $value is now 7 $c(); // $value is now 8 In the former example, the return function does take an argument, but the variable in the parent scope is never made available to it. In order to make it work, you'd have to pass the value as an argument to the function. $c = counter(6); //this does nothing to set the start position. $start = 6; //this is needed to make this work $c($start); // $start is now 7 $c($start); // $start is now 8 
You can also use: //Get the files extension $getExt = pathinfo($File); $checkExt = strtolower($getExt['extension']); Instead as it is a bit shorter &amp; easier.
Not sure if the scathing commentary would have made you/him look any less like an ass. What probably would have is examples of each done right. For some there is no good way of directly pointing at the same thing done right (for some the answer is just: don't do it at all). But if you had done that with a healthy handful it would have come across differently.
Memcached is very useful where it's useful, but it's still a tough sell. Not having APC though is surprising. I can't think of the realistic edge case where it sucks. You get magic performance updates for free by installing. Who wouldn't do that? The only negative I can think of is that some versions have been known to hard crash if you get APCs memory into a tricky state, but I'm pretty sure that the latest handful of versions don't do that.
I think I understand, I'll have to tinker with it a bit when I have a few moments to cement my understanding. I appreciate the explanation. =]
This article's awesome. And I like the language. The guy has been in the trenches. Thanks for posting.
Sounds like you're trying to do [nonces](http://stackoverflow.com/questions/4145531/how-to-create-and-use-nonces). Pretty well-documented. It might be worth looking at how [Symfony handles CSRF tokens](http://www.symfony-project.org/api/1_4/sfForm), too.
I'm going to be honest, variable variables was a pretty terrible example since I'd sooner create an array, but the point still remains that PHP has a lot of flexibility that isn't offered by other languages to allow us to do what we need.
This is a new topic to me, I will do some research and get back to you. Thanks for the direction.
Most favorite: arrays. They can be bent and twist into any shape and they're really powerful. Least favorite: weak types, namespace syntax
When I was reading it, at first I was thinking, "what a dick," but the further down it went, it was pretty accurate and left me with a solemn, "oh, right."
The "nonce" seems like a solution to my problems. Thank you.
if not php then what?
The doctrine ORM comes bundled with all two of the Symfony components that are required for the CLI tasks. As well as a CLI configuration file. https://github.com/doctrine/doctrine2/tree/master/lib/vendor/Symfony 
The problem is that any project that requires you to do years of development and has to be completely finished end-to-end to be used is doomed to failure no matter what the subject is. Converting every function and library to unicode all at once was never a good idea. Instead, they should add a separate unicode string type to the language right now and start building a new string API (potentially as methods) to manipulate those strings and make it completely incompatible with the existing string functions. They can slowly start piecing together that functionality without one giant project. 
Just a few errrors in the article: &gt; Operators are very fragile in the parser; foo()[0] and foo()-&gt;method() are both syntax errors. The former is allegedly fixed in PHP 5.4, but I can’t find mention of a fix for the latter. The latter doesn't need a fix because it always worked. Honestly, how hard is it to test that foo()-&gt;method() works? &gt; Objects compare as greater than anything else… except other objects, which they are neither less than nor greater than. Strict-equals on objects compares the references; but regular equals compares the contents of the objects. Two objects compare equal if the contain exactly the same fields and values. Seems pretty reasonable to me. &gt; + is always addition, and . is always concatenation. This is a good thing; JavaScript gets this wrong. &gt; There is no way to declare a variable. Variables that don’t exist are created with a null value when first used. Variables that don't exist issue a notice. You can deal with that just like any other error. &gt; Global variables need a global declaration before they can be used. Actually there is also the $GLOBALS array for this. I'll agree that's not much a solution. Globals should just not be used; if you want to use static class variables, it's a much better choice with a sane syntax. &gt; there’s no pass-by-object identity like in Python. I'm not sure if I understand this but all objects are passed-by-reference in PHP (since 5) and PHP references act appropriately when used as function parameters, etc. &gt; A reference can be taken to a key that doesn’t exist within an undefined variable (which becomes an array). Using a non-existent array normally issues a notice, but this does not. An attempt to use the reference will result in a notice but isset() and empty() operate it on it correctly. &gt; Constants are defined by a function call taking a string; before that, they don’t exist. You can declare constants in classes and namespaces with the const keyword. &gt; There’s an (array) operator for casting to array. Given that PHP has no other structure type, I don’t know why this exists. You can cast scalars to single element arrays and objects to arrays with the same structure. Both are actually very useful. &gt; include() and friends are basically C’s #include: they dump another source file into yours. There is no module system, even for PHP code. PHP is interpreted -- namespaces and autoloaders are PHP's module system. &gt; Appending to an array is done with $foo[] = $bar This is a good thing. &gt; empty($var) is so extremely not-a-function that anything but a variable, Empty is equivalent to the not operator but will also work on undefined variables -- that's why it requires a variable. &gt; There’s redundant syntax for blocks: if (...): ... endif;, etc. Useful inside of templates where matching { } is much more difficult. &gt; PHP’s one unique operator is @ (actually borrowed from DOS), which silences errors. Sometimes you don't care if a function succeeds; like with the unlink() function which will raise an error if the file you're trying to delete doesn't exist. &gt; PHP errors don’t provide stack traces. Not true. Debug_backtrace() will give you a stack trace in an error handler. &gt; Most error handling is in the form of printing a line to a server log nobody reads and carrying on. Assuming, of course, the programmer doesn't do anything to handle errors. &gt; E_STRICT is a thing, but it doesn’t seem to actually prevent much and there’s no documentation on what it actually does. E_STRICT (or lack of it) is for compatibility with PHP4. When enabled it will "warn you about code usage which is deprecated or which may not be future-proof." -- quote from the manual. &gt; E_ALL includes all error categories—except E_STRICT. Unfortunate naming here -- E_ALL is from PHP4 and prior and E_STRICT is all about PHP5. Including it in E_ALL would break PHP4 scripts running on PHP5. &gt; Weirdly inconsistent about what’s allowed and what isn’t. This author is confused why syntax errors would be parse errors but logic errors are not. &gt; PHP errors and PHP exceptions are completely different beasts. They don’t seem to interact at all. This is sort of true; PHP errors and exceptions exist in different universes but it's easy to unify them and PHP even provides a built-in exception ErrorException to do so. You can turn every PHP error into an exception with 4 lines of code complete with stack traces. You could even turn exceptions into errors but I wouldn't recommend that. PHP supports both procedural and OO programming styles -- this is not a bad thing. &gt; There is no finally construct C++ also doesn't have a finally construct. But C++ and PHP support RAII -- class destructors run when the stack is unwound so you can do your cleanup. Finally would be a welcome addition to both languages. &gt; function foo() { return new __stdClass(); } leaks memory. The garbage collector can only collect garbage that has a name. PHP is reference counted with a cycle-detecting GC. That would not leak memory. &gt; Function arguments can have “type hints”, which are basically just static typing. But you can’t require that an argument be an int or string or object or other “core” type This is true, but it's an ongoing discussion on how to correctly handle scalar type hints. For all the discussion about how PHP isn't designed the author takes issue with the thing they're taking their time on. &gt; Closures require explicitly naming every variable to be closed-over. Why can’t the interpreter figure this out? Because of the dynamic abilities of PHP, there is simply no way for the interpreter to ever figure out the variable to close over. The solution is actually a rather simple. &gt; clone is an operator?! Of course! &gt; Object attributes are $obj-&gt;foo, but class attributes are $obj::foo. I’m not aware of another language that does this or how it’s useful. C++ does it. $obj::foo doesn't make any sense, if you're accessing class attributes then you use the class name Class::foo. &gt; Also, an instance method can still be called statically (Class::method()). If done so from another method, this is treated like a regular method call on the current $this. I think. Only static methods can be called statically. The other calling methods statically is similar to C++ ... you can call parent class methods explicitly by name by-passing any overriding. &gt; new, private, public, protected, static, etc. Trying to win over Java developers? I’m aware this is more personal taste, but I don’t know why this stuff is necessary in a dynamic language This is personal taste not a valid critique. &gt; Subclasses cannot override private methods. That is the definition of private methods! &gt; There is no method you can call on a class to allocate memory and create an object. You can use reflection to create an object without calling the constructor. &gt; Static variables inside instance methods are global; they share the same value across all instances of the class This is the definition of a static property! &gt; Yet a massive portion of the standard library is still very thin wrappers around C APIs That is, in fact, the point. PHP is supposed to be a thin scripting language layer over C. It's expanded beyond that. Many of the poor naming conventions are not because of PHP but rather are the exact API of the underlying C library. &gt; Warts like mysql_real_escape_string, even though it has the same arguments as the broken mysql_escape_string, just because it’s part of the MySQL C API. Both the C API and PHP have both these functions for backwards compatibility reasons. This entire API is pretty much depreciated with both the mysqli library and PDO replacing it. &gt; Using multiple MySQL connections apparently requires passing a connection handle on every function call. Yes, exactly. That's the only way multiple connections could possibly work. &gt; PHP basically runs as CGI. Every time a page is hit, PHP recompiles the whole thing before executing it. Unless you use a free code cache like APC. It will eventually be built in. Most people don't need it. &gt; For quite a long time, PHP errors went to the client by default If you don't handle your errors, they go somewhere. &gt; Missing features Most of these are provided by frameworks just as they are in Python, Ruby, C#, etc. &gt; Insecure-by-default Most of these things are now removed from the language after being depreciated for years. 
debug_backtrace in your own handler will give you a stack trace. Even better: convert them to exceptions with a handler and the built in ErrorException class.
The problem with a slow transition is you'll have things that work on 5.5, then 5.6 comes out and only some stuff gets brought along, then 5.7 comes out and it has a few new features that nobody cares about... IMO, it's better to have a clean break and say "this requires PHP 5.5" or "this requires PHP 6", and not have weird little breaks of "well it could work on 5.x if we change this and this and this".
I love ORMs but I don't use them for every data access task in a single project. I think the biggest complaints about ORMs are when they attempt to completely abstract away all the details about the underlying data structure and storage. An ORM doesn't need it's own SQL-like string query language for example -- that, in my opinion, is taking it too far. But providing a solid API is not a bad thing.
The thing that always gets me about these lists are how developers from other languages gripe about ==. I'd say I use == around 99% of the time, don't have any memorable scars about being burned. I can't speak for the author but a lot o these lists use that one. And I think it's mostly from people who've never used the language. 
Oh. An article bashing PHP on the PHP subreddit. Downvotes. If you don't like PHP, **don't use it**. If you don't like PHP and still insist on using it (for whatever stupid reason), **fork it**.
Pretty easy - just stick in a record for each, with zip code and city in each row. Then pull them back out and iterate through to build options. Protip: in the real world, there are often multiple zip codes for each city, so your schema as presented there will cause problems if you expand past the limited choices you have there. Edit: You deleted your comment so I couldn't reply: Oh wait - The super-fancy way? Oh, well you should have [asked for that](https://developers.google.com/maps/documentation/geocoding/) in the first place!
Is there a particular reason that even a database would be practical? For something simple like this, it would be much more practical to have this stored in an XML file. Then you can just use AJAX to populate the list with javascript.
Also true - zip codes don't change very much.
This smells like homework. Just create a database table, insert the data, connect to the database and pull the records. Once you have the results, loop through them and print it out. This is extremely basic stuff, so you should have no problems figuring it out. 
A huge amount of that list is factually incorrect and much of it merely opinion. Many criticisms are simply that it doesn't work like Python without any regard for the fact that it does work like C++ or Java. 
&gt;but the **client** wanted it done in this way. Wait, what? You got clients when you don't even know how to pull data from the database and iterate through it? Not to be rude, but if you're taking on clients, you should know what you're doing, otherwise you'll be doing both the client and yourself a huge disservice. 
I downvote because it's a pointless article. Why complain about something instead of just fixing it? PHP is Open Source, anyone could make a fork of it and make it however they would like it to be.
You're right about the first part, but I just don't account for that anymore. It's 2012--I don't know anyone that disables javascript anymore. But wouldn't you agree an XML file would be easier than a creating a table just for this? What's wrong with using ajax for static content?
&gt; He mentions mysql_real_escape_string and E_ACTUALLY_ALL, both cases where you have to be more specific to have the result that would be expected when you take the name literally. mysql_real_escape_string isn't a PHP thing, it's a MySQL thing. The function is literally named that in the C API that PHP uses. The reason mysql_escape_string() still exists in both cases is for backwards compatibility since the functions have different signatures and do different things. More to the point, this whole mess has been replaced a long time ago with the MySQLi API. &gt; E_ALL should really mean all. This is again for backwards compatibility. I imagine that PHP shouldn't even have E_ALL and this would solve the problem now and forever. But E_STRICT exists specifically because of PHP4 programs running in PHP5. And many PHP4 programs use E_ALL. &gt; for ($foo as &amp;$bar) is fucking insane. It's interesting that you give this example because it's actually fully consistent with how variables are defined, how references work, and how the foreach loop works. The end result might be considered to be weird but it follows the rules perfectly. Everything else you said, I agree with completely. 
You don't even need a database for that if the data is static. Just create an array in the php file and loop through that and output the HTML code.
I want to custom order some dice with programming languages on each face. Just roll and pick, it really doesn't matter.
Thing is, PHP might be great on a Hello World benchmark, but because it has to re-initialise all of its resources on a per-request basis you have a massive amount of overhead that limits it hugely for real applications.
Several times he states that PHP doesn't have stack traces, which at first tells me he doesn't ever use Exceptions, yet later in the article he mentions exceptions a lot, so go figure. Regardless, I guess he never noticed the `debug_backtrace` function. At least twice he says that you can't do `foo()-&gt;bar()`. As someone who has written several chainable classes in PHP, I'm not sure what language he's talking about. His section on Error Handling has points from numerous different configuration settings. Sometimes it seems he's running with `E_ALL ^ E_NOTICE`, sometimes he's using `E_STRICT`, sometimes he's running `E_NONE`. He also can't seem to decide if he has `display_errors` turned on or off. He says it's impossible to catch an error with a try statement. Ignoring why anyone would ever want to do that, I guess he never discovered `exception_error_handler`. The author can't ever seem to make up his mind about if he wants PHP to halt on failures, or not. Sometimes he complains about things that fail silently, other times he complains about code that instantly stops execution (such as a class not being found). At one point the author states that variables don't have types, yet later on complains about type coercion and type casting. His complaints about having to use === make me think he just doesn't understand weakly typed languages. He mentions that you can cast to (array), but says this is pointless because "PHP has no other structure type". Guess he never uses objects? Like I said, there are a lot of things in here that he's totally correct about, but there's also a lot that demonstrates a lack of understanding. There's a lot of stuff in here that describes things that change according to configuration settings, yet he doesn't seem to understand what settings influence what, or the fact that most PHP developers will always develop under the same configuration for the majority of their career. A LOT of this article is also just his opinion that the way PHP does it is wrong, like his complaint about json_decode returning null for unparsable data. Who the fuck would be passing "null" into json_decode?
That's what I was thinking
My fork of PHP would have far less useful libraries and community than any of the other competing languages, which is most of why I don't use those languages. For example: in my specific case, I don't use PHP because I decided that's what I want, I use it because Drupal is written in it and I have found that Drupal is lucrative. Drupal would never switch to my PHP fork, it would be better off being rewritten in some more popular language. It remains in PHP because the downsides of doing so are cheaper than a rewrite; my fork of PHP would be even less better than PHP and even less worth a rewrite/port. Especially because the number of places my fork would be installed would be virtually zero. Even if I hired developers and made a PHP-plus AND ported Drupal to it (or saved myself effort and simply rebuilt Drupal in Python or Ruby), the communities involved have too much momentum where they already are, shared hosts would spend a decade adding support for it, enterprises would never switch, etc. No, unfortunately, it's not really an option to ignore the way the core PHP devs manage the project. If they cared about the things outlined in the article, they might not have built them that way, or they might be willing to put effort toward a "PHP 6" that resolves the problems. If the community+developers were behind it, that could succeed, and is really the only option other than continuing to be a mess (which is much easier).
Your article is bad and you should feel bad. Go back to writing COBOL or whatever it is you do. 
Yup, those I use from time to time in frameworky code. It's $$foo that I've *never* found a valid use for.
Re-initialise what resources exactly?
Exactly. My developer friends (who all use more reasonable languages than PHP) and I laugh at the shit that the OP article is talking about. Unlike them though, I suck it up use PHP anyway, and sustain that laughter all the way to the bank. There's not a lot of glory in PHP, you're not the new hotness and you're never going to be, it's also not as Enterprise-sanctioned as Java or .Net, so many developers avoid it. Additionally, PHP doesn't punish you for being stupid, so the developers that *do* use it are of low average quality. These effects combine to create high demand for people who are willing **and** able to come into a PHP project and clean up the mess of stupid.
Don't you get that a background layer is just a layer drawn before other layers? Just copy the image over to your canvas *first*, then proceed with the normal instructions. 
&gt;&gt;Subclasses cannot override private methods. &gt;That is the definition of private methods! Thank You! When I read that in the OP I completely lost respect for the post. I mean cmon how do you not understand the different method types. Also don't forget he also said: &gt;Subclass overrides of public methods can’t even see, let alone call, the superclass’s private methods. Which is again the very definition of "private".
&gt;It doesn't matter if most people have javascript enabled. Even if one person didn't have javascript enabled, that's one person that could've been enjoying the website just fine, had you coded it properly. Besides, there are plenty of devices and technologies which doesn't support JavaScript. It's something like 1-2% of visitors don't have javascript. In terms of capability, that number is coming down every minute with the millions of smartphones sold each month. Those numbers are also based on high-traffic sites--a user on an old phone is *highly* unlikely to visit your small site. I understand it's a matter of philosophy, but I just do not believe it applies to most small developers, and yet it is constantly rammed down your throat. This guy does not know how to iterate through data to populate a dropdown--do you think he's building the next Yahoo? He is unlikely, even in the course of a year, to encounter *one* user that does not have javascript. As iterating through the xml using php would be just as easy, it makes better sense to do it that way. I did not mean to say that I never account for clean degradation, just that I do not let it interfere with better design/usability/performance, because those things are likely to gain you more visitors than you'd ever lose to lack of javascript.
I'm no expert on the subject, but wouldn't it be easier to build and test against a sqlite:memory database in PDO?
[SPF Wizard] (http://spfwizard.com/ ) Will help you create the SPF record, it is a really straight forward processes. The SPF record indicates which servers can send mail for a domain, so make sure the server you are sending the mail from is listed if it is not the same server that receives mail for your domain. Headers are also VERY important. Your FROM: address needs to be a real mailbox, as some mail servers will call back to you to make sure the address you are sending from actually exists. Shared mail hosts (like hotmail and aol) will also use the input other users provide for junking mail. So if 10 users mark your mail as bad and 1 marks it as good, those servers are going to think your mail is still bad. If one of the people who has their mail put into the junk folder can look up the spam logs to see how your spam score is calculated that might also help you. Or you can [check the spamassasin score yourself] (http://www.mailingcheck.com/email-spam-score-check/). Which should give you a good idea why your mail is getting flagged.
Normally douchebags like you just downvote and move on, but you feel the need to actually announce your douchebaggery to the rest of [/r/PHP](/r/PHP) by being snobby about it. I'll do what I want and you can just keep on trollin'
No offense, but you're very likely way in over your head (based on the fact that you didn't do the due diligence to see if there were already solutions available). After nearly two decades in the industry, I would strongly suggest that you switch horses at this point and use an off-the-shelf solution. Pick a nice, popular system like Magento, that has lots of support and documentation. You'll save yourself dozens (if not hundreds) of hours of headaches in the long run. There's absolutely no way you're going to be able to create something even half as feature rich, well-tested, and well-thought-out as a package that's been around for years.
Thank you, I plan to. And thanks for the advice, it's interesting to poke around other solutions and see how they do things, everyone seems to have a slightly different way of getting things done!
It looks like he spent some time scanning through the /r/lolphp reddit because some mistaken stuff is taken from articles there verbatim. The whole thing about misunderstanding private is taken from an article posted there with the same wording. I'm not sure this author has even used PHP. I could complain about it all day but at least I know what I'm talking about! It's unfortunate this article is taken as seriously as it is. 
-I was impressed with just how many options it has but they seem too over the top, at least for what I need. It also seems very much made by coders and not designers so when it comes to design, layout, etc it is too restrictive in that sense. -That's what I thought. I'm saving delivery address, order history etc but no payment details -That's what I'm storing in the session- stock_id, product_id and quantity. I'm not too keen on temporary tables but I've seen them recommended often so I may have to look in to them more! Thank you for your advice :)
Yes. * Haven't you read the script? * Haven't you read the manual for the calls it makes? * Haven't you fiddled with the script, trying to understand how it ticks? These should've been the first things you tried before asking here. I'm not saying this to be mean, but for your future success as a responsible developer, you must be able to take certain steps to help yourself.
I really liked E_ACTUALLY_ALL, which is straight from PHP Sadness. He presents it like it's an actual constant. 
This makes so much sense. I felt like the entire article lacked any cohesion, like it was written by multiple authors with different levels of understanding.
I'm not quire sure where to even begin with all the issues here. &gt;I like to have things my way, know their ins and outs thoroughly and customise them to my exact needs. This attitude is called NIH (Not Invented Here) and is a warning sign of bad development practice. You shouldn't reinvent the wheel just because you don't know how a piece of software works - learn to use the tools you have. &gt;I have heard a lot of about Magento but not much good- big, over complicated, slow and you have to pay for a lot. Pretty much entirely false. The Community Edition is free, actually. It's definitely the pack-leader for PHP stores right now. (And even if you *were* paying for it, it's going to cost less than the hours you spent hacking away fruitlessly.) &gt;I'm not building the next Amazon but a small commerce site and even if it takes longer than planned it will be something to put on my portfolio! If you're trying to put the *design* on your portfolio, just work on good theming. If you're trying to put the *code* on your portfolio, any of us hiring managers are going to ask you why you didn't use an existing solution. *Then* we're going to ask to see your unit tests. ;)
Consider using a third party service, like sendgrid, for sending mail. The miniscule cost is well worth the headache of trying to send mail yourself properly. There's even a quick and easy server config way to make sendgrid use mail(), so you wouldn't even have to change any code (if you have that type of control over your server). 
Well, here is a quick way to check: &gt; $ dig txt google.com +short &gt;"v=spf1 include:_netblocks.google.com ip4:216.73.93.70/31 ip4:216.73.93.72/31 ~all" I mentioned this already, but just make sure the host you are sending mail from gets listed in that spf record in some way.
Hmm, having it be able to send through mail() is awfully tempting... A lot of the emails I've got fairly customized for different users, and that might be a feasible 3rd party solution if it can do that.. Thanks for the tip/lead...
Interesting, we're actually trying an A/B test with text emails currently, really doing it to see if more people would click through in the text version.. but interesting to bring up that it might also affect actual delivery..
Yes, if you're sending html, it's better to send it as multipart MIME, with a plaintext component as well. 
I completely agree. PHP is a workhorse and is even incredibly powerful for command line processing as well. We currently have a custom map/reduce style system for algo crunching all in PHP and it can process an amazing amount of data in a short amount of time. When huge companies like Facebook decide to rest on PHP as their framework language all the gripes and quirks become a moot point. Our small company has processed millions of dollars worth of advertising from it and as you say, it just works. One other huge benefit is that it is dead simple to get ANY developer up to speed on a PHP project. The coding format is so simple and easy that it helps alot with finding new developers. (I believe this was one of the core reasons Facebook relies on it).
Indeed. It seems to me one major disagreement this article has with the one that prompted it is whether or not it's a good thing for the language to have a low barrier to entry for inexperienced developers. A language's goal should be to stay out of the way of a good developer and let them do what they want to, but the author of the original post would seem to argue that by reducing barriers for inexperienced developers on simple projects they've introduced more barriers for experienced developers on complex projects. Call it elitism, but I think there's a lot of truth to that notion. I'm glad to see a thoughtful discussion on this. PHP is what got me into the world of webdev, and as my experience in the field grows I find myself consistently drawn to PHP, despite the language's numerous and often baffling shortcomings.
No problem. I used to be adamant about sending email through our servers myself, but once I tried sendgrid I'll never try doing it myself again. Looking at their pricing page (http://sendgrid.com/pricing.html), their cheapest plan is 10 cents per thousand emails and it does support the SMTP relay (so you can keep using mail() with minimum modification). But to set that up you'll need shell access to your server as well as access to the sendmail config file. 
Verify your SPF, along with the DNS entry, you'll also have to setup rDNS. Check to see if DKIM is enabled. Check your mail server at [mxtoolbox](http://www.mxtoolbox.com/). Also take a look at this article: [So You'd Like to Send Some Email - Through Code](http://www.codinghorror.com/blog/2010/04/so-youd-like-to-send-some-email-through-code.html)
Yes - this is what I wanted from the article. I'm aware that PHP does a lot of things "wrong" and has a lot of inconsistencies. I've learned to deal with and accept them as part of the language. I would have loved to see why/how the other languages "do it better". Might you happen to know of any articles along those lines? I'm all for growing my understanding of development in general, but I prefer things to be more educational than scathing.
- It is a personal project and so I can afford to mess up, learn from it and expand my knowledge. Plenty of ecommerce stores are custom built. - That just seems to be the overwhelming opinion when I search for reviews on Magento. - At the minute I freelance doing both design and development. If I can use projects like this to demonstrate to future employers I've got a good knowledge of PHP and MySQL then this is a bonus. Most employers I've come across are interested in the logic and methods used in achieving a solution, not whether I know how to throw a theme on OpenCart and call it a day. Thanks for the positive encouragement though! :) 
Personally, I would use a framework. It will help you to structure your application and will reduce the amount of work that you need to do as the framework will make certain tasks simpler. If it is your first time working with a framework then you may find that it will take longer to develop as you have to learn how to use the framework, and this may involve learning new paradigms and patterns. If you can afford to invest the extra time in learning to use a framework then I strongly urge you to do it; chances are you will appreciate working with a framework, and at the very least you will learn a lot! 'Frameworks' is a somewhat vague term. There are lots of different PHP frameworks and while they all aim to solve the same sort of problem (roughly) they each go about it in different ways. Web frameworks can be broken down into two broad categories: frameworks that do everything, and microframeworks. Symfony and Codeignighter are popular PHP frameworks that fall into the first category. These aim to provide everything you need: Routing, database access and ORMs, templating, etc. Microframeworks are much smaller and usually impose less restrictions on you (for better or worse). Microframeworks often only take care of routing (matching a URL such as http://example.com/users/pheter to a function that handles the request). It is then up to the developer to use other standalone libraries to provide the rest of the functionality that they need. Personally, I prefer this approach as I find it to be simpler. My current toolkit consists of a bespoke microframework which is similar to [Slim](http://www.slimframework.com/), [Twig](http://twig.sensiolabs.org/) for templating and [Paris](http://j4mie.github.com/idiormandparis/) for database access. However, while microframeworks are great for getting started quickly some people find their lack of features limiting, particularly as a project progresses. I realise that I have digressed into discussing the merits of different types of frameworks so to come back to your original question with a TL;DR: Yes, I strongly suggest that you use a framework if you can afford to invest the time to learn. I recommend that you play around with a few different frameworks to get a feel for how they vary and which appeals to you. Using a framework will reduce the amount of time that you spend reinventing the wheel, and may also decrease the amount of bugs and security issues that you might introduce as you ultimately have to write less code.
PHP 5.4 added a [built-in server](http://php.net/manual/en/features.commandline.webserver.php) (as various other languages/DSLs have), which is a nice replacement for XAMPP for simple PHP apps or for quick testing. 
**"inclued"**
&gt;The issue with using a framework is you have to include all the libraries that come with the framework, even if you're not using them. That's not even remotely true. Frameworks use class loaders which only load the files which are going to be used. Some frameworks even act like class libraries (e.g. Zend Framework), allowing you to use classes outside of the framework.
The examples on PHP.net are awesome. Much more useful than Java's doc structure. "Hmmm I wonder if it can do XYZ?" CTRL+F XYZ Huzzah!
Yep. Microsoft's is bloated, and Apple's is just... ugh.
Lol this guy looks like sinbad
 I don't offhand, but I do have some spare moments. Oh god, I'm about to write something long on a computer without RES. I WILL mess up the formatting. I'll try to fix quickly when that happens though. &gt; PHP is built to keep chugging along at all costs. Ideally you'd get "compile"-time errors for things that are incredibly likely to bite you in the butt. Use of an uninitialized variable gives a warning and makes things up. It ONLY gives a warning if you happen to execute that path, so manual testing is very likely to miss at least one path that would give warnings, meaning that even if you decide to be clean at E_ALL | E_STRICT it's not enough. This is how Perl, for instance, did it (and many many other languages, but when possible I'll stick to the most similar language for a more valid comparison). &gt; There’s no clear design philosophy. This is probably the most-oft criticized part of PHP. There's nothing they can realistically do about it now, but they really really should have picked and stuck to a convention, not used the convention of whatever language they happened to take inspiration from that day. Needle and haystack need to be in a consistent order. Period. &gt; Parts of PHP are practically designed to produce buggy code. Read the part after this. OP actually did explain a better system here. The idea is that if I do the easy wrong thing I want to know about it when it fails, not limp along and point blame at other parts of the code (where it finally did explode may be far from this -- the real source of the error). &gt; [= is] not transitive. "foo" == 0 is unlike any other language I'm aware of. Most high-level type-casting languages treat "" as false, and a string consisting only of zeros as false, but any other string as true. This would make = transitive. &gt; [] can be used on any variable, not just strings and arrays. It returns null and issues no warning. NOTE: I'm not sure if this is true, I can't recall making this mistake before. But this goes back to the above -- if I make a mistake with no sane way of handling it, don't make things up -- fail. Loudly. If an object implements some magic method, maybe, but otherwise an object with an array subscript makes no sense -- die. &gt; Unlike (literally!) every other language with a similar operator, ?: is left associative. Should have been right associative. Matches others and is more logical when reading from left to right. &gt; Variable names are case-sensitive. Function and class names are not. Be consistent. Preferably case-sensitive because it helps protect against really crappy programmers who will mix case and throw off your possibly-case-sensitive-by-default greps. &gt; array() and a few dozen similar constructs are not functions. I'm not sure WHY they aren't functions, but it is very confusing that $foo = "array"; $foo() doesn't work. It's inconsistent, and it should be made consistent. &gt; list() is function-like syntax just like array. I don’t know why this wasn’t given real dedicated syntax, or why the name is so obviously confusing. I sometimes think that I (being an ex-Perler) am the only one that uses this. I agree that the name is very confusing. For the record, Perl had no name for it, it was just parenthesis: `($a, $b) = @array;` &gt; Except you can’t do that reliably, because if someone passes a single object, casting it to an array will actually produce an array containing that object’s attributes. I can totally understand how the core devs missed that edge case. Making both operations explicit instead of implicit is how most languages would probably handle it. I don't know if any language that actually does this, so I can't give a concrete example but something like $object-&gt;toArray(), and array($variable) or (array)$variable (stylistic preference). I know that array($variable) is already in use, but if we're talking about how to fix the issues, I assume that it's theoretically possible to break compatibility because many of these require it anyway. &gt; T_PAAMAYIM_NEKUDOTAYIM I know the history of this. But still, the fix should be obvious. English was already the lingua franca of programming by the time PHP came out as evidenced by array_pop and other functions using english names. &gt; PHP errors and PHP exceptions are completely different beasts Ideally, PHP should have started with Exceptions. Barring that it should have re-implemented one in terms of the other or completely killed one off. There's no need to have both. &gt; you can’t require that an argument be an int or string or object or other “core” type I'm aware that they're discussing it and it's apparently contentious. I side with the author though that I should be able to require such a thing. Easily. MANY languages do this right. The closest in high-levelness that I can immediately think of is ActionScript. It even made a transition and did it smoothly. &gt; Extra arguments to a function are ignored (except with builtin functions, which raise an error). Missing arguments are assumed null. This goes back to dying loudly whenever you do something wrong. This would require a way to explicitly declare that you WANT a function with variable arguments if you want to use the func_get_args style. For a reference of how to do it, look at C, where a lot of the style of func_get_args comes from. &gt; Classes can overload how they convert to strings and how they act when called, but not how they convert to numbers or any other builtin type. Java does this I *think*. It's as simple as adding a __toInt(), __toFloat(), etc. function presumably. The problem with going too far is that it's hard to automatically use such a thing in PHP land. $iWantAnInt = $object; How would PHP know whether to use __toString(), __toInt(), or __toFloat()? You'd have to fix the no-typed-ness before this became super useful. &gt; There is no overloading for equality or ordering. More magic functions. In theory you'd have a method like __lessThan() that returned a boolean. Then you'd be able to use sort() on your custom objects without making a usort instead. This sometimes come in handy. The syntax for it in many other languages are horrible though so I rarely actually use this capability. &gt; As namespaces are a recent feature, the standard library isn’t broken up at all. There are thousands of functions in the global namespace. Taken too far this can be super annoying. Both Java and AS3 do this the more accepted way though. Something like (psuedo code): `use net.php.ArrayIterator` or optionally `use net.php.ArrayIterator as ai`. Hell, even Perl allowed this through something fairly clunky that nevertheless worked. &gt; At least a dozen functions for getting the last error from a particular subsystem (see below), even though PHP has had exceptions for eight years. Either exceptions as OP hinted at, or something like perror() in C. It technically uses nasty global variables, but it's at least a sane place that sane libraries use. &gt; For example, calling dba_nextkey without calling dba_firstkey will segfault. Obviously, don't crash. :-P In general any time the thing being wrapped is very fragile, PHP should make it less fragile. That's part of the point of being in a higher level language. This is of course assuming that there's a -sane- way to make it less fragile (I am not familiar with the quoted functions). &gt; strtok is apparently designed after the equivalent C function, which is already a bad idea for various reasons. Nevermind that PHP can easily return an array (whereas this is awkward in C), or that the very hack strtok(3) uses (modifying the string in-place) isn’t used here. The strtok interface is brain-dead and only still exists because it's part of some standards. There's NO REASON why it should have been copied at the time that PHP was invented. The functionality can be completely replaced with a much more sane interface by explode or sscanf or preg_match anyway. &gt; parse_str parses a query string, with no indication of this in the name. Also it acts just like register_globals and dumps the query into your local scope as variables, unless you pass it an array to populate. (It returns nothing, of course.) Legacy from the early days, but it always has been and always will be a bad idea to let external users define variables in the global scope. Thankfully this has an option to fix the brain-dead behavior, but it's still a fairly big gotcha for the lazy or those that don't realize that the option exists. The option should be required or it should just return the array. &gt; get_class($obj) returns the object’s class name. get_class() returns the name of the class the function is being called in. Setting aside that this one function does two radically different things: get_class(null)… acts like the latter. So you can’t trust it on an arbitrary value. Surprise! This might come down to limitations in the parser, but in either case it should detect that it's being passed NULL, realize that there is no sane way to interpret this, and die. Loudly. &gt; php_uname tells you about the current OS. Unless PHP can’t tell what it’s running on; then it tells you about the OS it was built on. It doesn’t tell you if this has happened. Die. Loudly. &gt; session_decode is for reading an arbitrary PHP session string, but it only works if there’s an active session already. And it dumps the result into $_SESSION, rather than returning it. Be useful without a session (cli inspection of sessions?). Return it. &gt; mktime’s arguments are, in order: hour, minute, second, month, day, year. This comes from the C api. There's absolutely no reason to keep strict compatibility. Fix the historical braindeadness. (in case you don't understand the problem: they should be in order to aid memory: second, minute, hour, day, month, year (or the reverse, just be consistent)).
ircmaxell: thx, agreed. I enjoy your posts.
The entire runtime environment, i.e *all* the resources. It runs a new instance every time.
It's not a new trend, mind you. They've been doing it for years.
First of all, thank you very very much for writing all this. I knew some of these things and understand why they're bad. Some of them were things that I have never even touched before, and others were things that I would never conceive doing (on purpose), such as using a -- on a string. I think your line "Most of these come down to trying to do SOMETHING when I, the programmer, do something silly" is my first thought that springs up when I see "anti-PHP" articles around. But while "don't goof up" is a good rule to live by, it's...a little hard to always be perfect ;). One of the nice things about PHP's looseness is how forgiving it can be and you can get stuff done quickly as a result. But sometimes it would definitely be nicer if it was stricter about some things.... Thanks again for your post. Will be things to keep in mind in my day-to-day and when picking up some of these other languages!
Only 7 bit characters are allowed in the mail header, so if you want to transmit names that contain more than 7 bit ASCII you got to encode them either in quoted-printable or in Base64.
"PHP has flaws" and "Somebody's got a bug up his ass" are mutually exclusive statements.
We need code that does what we want. So, we either build it ourselves - or use what has already been written (frameworks, libraries, etc...). Luckly the only setback of frameworks (that they often require including more code than you actually use) is being fixed as more people become aware of performance in their applications. Libraries that can serve as frameworks like Zend or Flourish are examples of people cutting back on extra junk and only loading what is needed.
And in many of those examples, other people later comment explaining exactly what was wrong the first example, and what a better way to do it is. Either way, I don't advocate copy/pasting the code from the examples...but they're still nice to have.
I knew someone was going to counter with apidock :) The server just happened to be down the moment I needed it most.
I would like to see a rating system on the comments. I've seen in many cases novice developers introduce vulnerabilities or use bad practices learned from these examples on their projects. I believe there was a talk about it at DEFCON as well that discussed the harm of copy pasting random snippets off of the web. 
The manual explains this in a very clear manner : &gt; This function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE. Please read the section on Booleans for more information. Use the === operator for testing the return value of this function.
Language zealotry is an exercise in futility. The fractal guy isn't the first to systematically dismantle PHP for its shortcomings and he won't be the last. But at the end of the day, the fact still remains that an immense amount of people use PHP and get the job done. I think PHP's huge success *despite* it's lengthy bulleted list of egregious design flaws is testament to its efficacy. 
Do you actually know why Facebook uses PHP? For all we know they decided it would be easier to write a PHP to C++ transcoder than it would be rewrite millions of lines of existing code. That doesn't mean they actually like the language, and it doesn't mean they wouldn't rather be using something else. Maybe Facebook is a lot like Yahoo, and they write the bulk of their code in C/C++, and only use PHP as a templating language. Until someone shows us some of Facebook's current source code, we won't know why they use PHP, and we can't keep pointing to them as proof of PHP's legitimacy.
I don't have a strong opinion on PHP, but it seems to me that one of the reason all the CMS he lists use PHP has more to do with historical reasons (ie PHP was there very early). Theoretically, Python existed, but no Web/HTTP friendly frameworks. If those CMS were rewritten today, they might or might not choose to use PHP.
The problem with @var is you need to know the class that 'mailer' is to write the annotation. Might not be a problem for small programs, but I like the idea of creating a separate service container class so you can do $services-&gt;getMailer(). If the IDE can't figure it out, neither can your programmer friends. I wrote a [blog about this](http://www.reddit.com/r/programming/comments/s3e58/dependency_injection_container_dic_for_lazy/), if interested 
&gt; "Lack Of Threading - This is true, but he lists it as a difficulty, and I list it as a positive, since **the application lifecycle is per request** (I'll expand more on this shortly)." thoughts: you only consider PHP within the context of a webserver which is a shame and even in that context the explanation of "shared nothing" is nothing more than an excuse, other languages have much higher performance in web precisely because they don't do that.
Well, that was quick. I've done a dist-upgrade on the Suse box and lots of PHP updates came down. After that, my test script successfully populates all of the multidimensional data to the $_POST array. I've reported the bug in the new LTS Ubuntu, where I also saw the same behavior. It's currently in beta 2. Vote it up if you care to. https://bugs.launchpad.net/ubuntu/+source/php5/+bug/978107
Awesome! It really is a good compilation of PHP quirks... I sincerely do thank you for the tightly compiled reference... Good luck in your ventures :). (upvotes)
It's called [first_unicode_implementation](https://github.com/php/php-src/tree/experimental/first_unicode_implementation) and is more like a tag than a branch, and was created so PHP 5 development could move forward. That's the reality of it. Roughly [70%](http://www.php.net/~scoates/unicode/render_func_data.php) of the functions were converted before it died.
Ok. I just wanted to clarify because your previous comment was a bit ambiguous there.
Try `AES_DECRYPT(post_content, "'.$dbKey.'") AS post_content`. Without the AS there, the column name is actually AES_DECRYPT(...), so you'd need to echo $row['AES_DECRYPT(...)'].
But still... anyone know what will happen to php 6? Will they float forever around v5.4.4.2.4.56.34.5?
This is a common misconception, I have no idea where it comes from, but it's not true. The PHP manual is not horrible, but it's full of inconsistencies, two-word Captain-obvious descriptions, factual errors and the awful user comments. Personally, Python's documentation is what I'd call very good, same goes for Ruby's over at ruby-doc.
I realize that this comment is over a month old, but I'd like to apologize on Reddit's behalf for downvoting it. Grammar should NEVER be compromised. I salute you, sir.
They have hired some of the best programmers in the PHP community, they aren't using PHP for just a templating engine. If I remember correctly, PHP is used as the main stack (which is then run through the HipHop) with Python as the glue between all the products. 
I can't stand the Java manual, the frames thing is awful and it's such a pain to scroll through hundreds (or even thousands) of libraries to find the one you need. (Ctrl+F isn't much help here either.)
PHP docs suck? are you reading the same docs as everyone else?
You should always start by looking in your error log (defined in your php.ini as error_log). If there's nothing obvious there and you really don't know what else to do you can always fallback to 'divide and conquer'. This is where you basically add error logs in your code to narrow down where the problem is. Start by adding something like "error_log('START');" to the very top of the script and "error_log('END');" to the very bottom. When you run it you will likely only get 'START' logged out as it's dying somewhere in the middle. Now add more error logs after the start and before the end and keep going until you've narrowed it down to a single line then figure out what's wrong with it (typo, invalid file path, whatever). This might not help with this specific problem if you already know the problem is in the recaptcha call but its very useful generally.
It'd look like &lt;insert your favorite language&gt; and definitely not PHP.
For your specific recaptcha problem I presume you are requiring in the recaptcha library but it's not finding it for some reason? If that's the case I'd expect your error log to say something like: PHP Fatal error: require_once(): Failed opening required 'recaptchalib.php' (include_path='.:/usr/share/pear:/usr/share/php') in [name of file] on line [line no] If that's the case check that it's definitely in that location and then check the file permissions are correct so that the file can be read by Apache (or whatever it is you're using). If you're using a relative path to the file try using the absolute path as that can sometimes work better.
Is there a good way to get at it while off-line though? I tried doing some work while on a long plane ride, and felt completely lost.
I don't use WAMP but this thread has a suggestion on how to configure the PHP error log: http://stackoverflow.com/questions/5095784/apache-2-1-7-in-wamp-wont-log-php-errors-to-php-error-log Not sure if that's useful or not :-/
Log into ##php on freenode, hang out in #phpc and start using [firePHP](http://www.firephp.org/) in Firefox
just a point on recaptcha, its a limiting system and cuts out disabled users, vision impaired, physically disabled and doesnt align with best practice for these kinds of users. I for one also hate using them and im able bodied. 
&gt;Can you elaborate on the directory traversal security concern? http://en.wikipedia.org/wiki/Directory_traversal_attack &gt;Also, could you point out the spelling mistakes? "SanatizePath", for instance. I don't have the time to read through your code at the moment. I'm at work, and I'm kind of busy.
Italian? Really..?
Wouldn't work. Use autocompletion instead.
It was interesting to read and try out. It ignored my changes however and my previous error log seems to be picking up other issues so all is ok there. Thanks for the pointer.
Interesting. It was set to E_ALL yet my version of PHP is 5.3.8. But even though I've put in a completely made up filename for require once, it's only giving me an error on a dodgy jpg it can't find in the banner.
Are you butthurt because I don't like your favourite language's docs? I didn't mean to offend you by saying that I don't like them, sorry.
&gt;But even though I've put in a completely made up filename for require once, it's only giving me an error on a dodgy jpg it can't find in the banner. Uh. You should be getting a E_COMPILE_ERROR if require/require_once fails to include the file. By the way, you might need to restart your web server after changing settings. 
I actually do have a job as a PHP developer and I live on the second floor. PHP sucks, I don't like it and you really sound like a douchebag.
I have worked with PHP for over the last 12 years...grew up with it as a developer. I do have to agree that it is incredibly easy to write absolutely horrible code in it...but then it is also possible to write very expressive, powerful and elegant code. I have written as well as continue to work with both varieties in my day to day work. I love PHP...it works well and I can write some pretty neat stuff with it in relatively elegant fashion. That said, sometimes I hate it...because some of the code I end up having to deal with is written like the stuff I wrote 10 years ago...and falls far short of 'good'. It's a mixed bag, but PHP at the end of the day is quite powerful...and it gets the job done.
Most PHP devs started out as from scratch guys and now program within a framework. You get code out faster and there is a community backing your core code. There is ABSOLUTELY NO reason not to use a framework. And don't give me the tired excuse of performance. It's a negligible hit and can be worked around with things like APC, Memcache, server upgrades, caching viws, and optimizing your own code.
What a coincidence, I just saw this on [Zend.com's webinars section](http://www.zend.com/en/resources/webinars/): &gt; [Introduction to Zen Coding](http://www.zend.com/en/webinar/studio/70170000000bisK-zencoding-20120124.flv) &gt; Learn in this webinar about moving from an HTML generator to advanced snippet system, how Zen Coding can be used with PHP, how to add your own snippets and advanced concepts such as how Zen Coding can be extended. &gt; Presenter – Roy Ganor &amp; Sergey Chikuyonok (47 min) January 24, 2012 But I've never heard of _Zen Coding_, I thought it was something cute Zend was doing as a play on their name.
I know about APC, but still, this is just trying to patch up the main problem: Serving a request with PHP means my whole framework needs to init, establish new database connections, etc, instead of just executing one function, rendering a cached and compiled template and be done with it. It's fast enough most of the time and cpu time is cheap, but it just looks like the wrong solution to me.
&gt;There is ABSOLUTELY NO reason not to use a framework. [You don't even know what a framework is.](http://www.reddit.com/r/javascript/comments/rvwv4/any_recommendations_on_how_to_learn_to_code_js/c497vwb?context=3)
You are seeing intent where there is none. I certainly don't assume that people here are all stupid and this was not meant by my post. But of course I tell everyone I meet that I am better than this dpgtfc guy on the internet. That's how I roll.
Yes, because it would be *impossible* to modify php and make it backwards compatible. There's no way you could, I don't know, have an INI option or function you call that would allow use of a modified, custom API, and there's no way you could just add the functions you want on top of what PHP already has. Yep. Impossible to make it compatible.
Google xdebug and learn how to use it to set break points in your IDE. Use an IDE like php storm or netbeans to do this.
You can set break points in your scripts with xdebug, so you can pause your script in the middle of execution and see the values of all objects, variables and arrays, and even follow through line by line to see what's going on. Also, the verbose output it produces to the screen is desirable.
Good job. Looking forward to seeing how the new design turns out. Also, I hope you're going to get a new logo. Edit: [Something like this](http://i.imgur.com/qLeEv.png), perhaps. 
Interesting!
Wow, so amazing. You must be the only guy here that knows *multiple* age groups. scnr.
read the whole thread, and you're still making a somewhat arbitrary distinction. "it's in the first 10 letters"... "profession" ?? People can be professional - be trained in the art, developed serious skill, conduct their business in a professional manner, and sell on themeforest. How someone chooses to market themselves doesn't automatically disqualify (or qualify) them as being professional. You're looking at the wrong signals. Many people on themeforest (and other places) may be hobbiests, but many may also be true professionals. "the company I work for gets paid in the millions for building websites and systems and for ensuring that our products doesn't just look good, but are built properly in other regards as well, such as usability, accessibility, security and wide platform support.". You don't have one person doing that. You have a team - professional design/ui/ux people, professional developers, professional sysadmins, etc. Just because someone is only one of those (design) but chooses to sell on themeforest doesn't mean they're not 'professional' or that it's not a 'profession' for them. 
Looks like it does resolve back to the hostname, and we don't appear to be on any blacklists.. Thanks for the tip about AOL cases!
The closest thing you'll get to Zen Coding in PHP would be using an IDE that supports macros or, as PhpStorm calls them, Live Templates.. So for example I type "forek" and hit Tab and it automatically turns into something like: foreach ($ITERABLE$ as $$$KEY$ =&gt; $$$VALUE$) { $END$ } And then it steps me through each of those $VARIABLES (so I can type what I want, then hit Tab to jump to the next one) and leaves me at the $END$ block to continue coding.. Most IDEs support this kind of thing in some fashion, and once you get used to it, it can speed up your coding tremendously..
I used google translate on the article and it just basically said how he was pleased with this bundle and will use it in the future. Not a lot of interesting content there. But here's a link to the [bundle](http://knpbundles.com/dustin10/VichUploaderBundle)
Yes, Zuck went with it early on. However, they had the option to move to something else as they grew and they decided to stick with PHP. It is a decision to continue to use it. Check this out: "As a programming language, PHP is simple. Simple to learn, simple to write, simple to read, and simple to debug. We are able to get new engineers ramped up at Facebook a lot faster with PHP than with other languages, which allows us to innovate faster." Source: http://developers.facebook.com/blog/post/2010/02/02/hiphop-for-php--move-fast/ One of the reasons they've stuck with the language is because they feel they can get any developer up to speed quickly with it.
This is why: "As a programming language, PHP is simple. Simple to learn, simple to write, simple to read, and simple to debug. We are able to get new engineers ramped up at Facebook a lot faster with PHP than with other languages, which allows us to innovate faster." Source: http://developers.facebook.com/blog/post/2010/02/02/hiphop-for-php--move-fast/ One of the reasons they've stuck with the language is because they feel they can get any developer up to speed quickly with it.
Cool tip and example! It looks like there is an SPF record for the domain... There are 3 IPv4 addresses in the listing... One of them resolves to mail.beltwaywebhosting.com, one to 173-203-215-111.static.cloud-ips.com, and one resolves to the site's domain itself.
Between this thread and the one I cross posted the techsupport subreddit the issue has now been resolved. Many thanks to those who gave their input, I learnt a little more today and gained a few different approaches to the same problem in the future :) Thanks! 
So useless blogspam in Italian then. Expected as much.
You're just being difficult for the sake of it. You're trying to be sarcastic, but you're right. No, there's not a way to resolve inconsistency in the API without changing the API... You really think that an INI option should be able to, for instance, flip the order of needle/haystack arguments to some (but not all) functions such that they're consistent? That would be FAR worse than the existing state of things.
*It'd look like PHP and definitely not PHP.* Wait...
No, **YOU** are being difficult. There is absolutely no reason that you couldn't rewrite the PHP API while leaving the old one in place - you could either code it into the existing main code, you could put your new API into an extension, or you could move the old API to an extension. There are many options available - your refusal to see them is just you being pigheaded.
Wow, I really like what you did with the logo. 
Thanks. I cleaned it up a little so it looks a bit more uniform: http://i.imgur.com/qVmDl.png
Putting such classes in namespaces would be fine with me also. I was just giving the most basic idea of what they could do that would make the language less cluttered
Functions in namespaces or just let 'array' be an object with methods is what I would prefer. But I don't think changes like these will happen anytime soon. PHP is usually pretty good with breaking old code, but they almost always do it by accident ;)
I love Symfony. There are many reasons, but mostly it comes down to preference. Symfony uses patterns and coding standards that I use-- when I look at Symfony's code it makes sense. Very seldom am I sitting there looking at something and saying 'wtf?' Obviously, there are other reasons.... Pros: * Very popular and very active. You can often times see the core developers respond on the mailing lists and they are nearly always on IRC. * Good use of well-established patterns. As I said above, at least for me, this leaves me feeling good about things when I dig into Symfony core code to see how things work. It makes sense. * Extremely flexible. If you find that you don't need the entire Symfony stack, you can pick and choose components and put them together in your own custom stack of components. A good example of this is [Silex](http://silex.sensiolabs.org). * Extremely flexible part two. You will have a pleasant time trying to integrate legacy components or third party (non Symfony) libraries because all it will usually take is a little bit of boiler-plate code to get Symfony and your libraries co-operating. Usually. Cons: * The entire 'Symfony Standard' stack is very large. * It can be very complex. * As noted, they aren't exactly afraid of doing backwards-compatibility breaking changes which is what is happening with the 2.1 release. This can also be argued as a pro since it means that they aren't afraid to fix bad design decisions. * It is one of the slower frameworks, though with a little bit of optimization this is hardly an issue.
Ha, not often a sentiment I saw on /r/PHP :)
IMO, he improved the readability. I *hate* mixing html and php. But then, I tend to use other templating engines/languages (namely Twig) instead of PHP for this kind of thing-- and what he did is along the lines of how a twig template looks. edit: and at least his indentation is consistent. Can't say the same about your own...
Both are pretty awful - I'd do about halfway between the two. My main complaint with the left pane is that there's mixing of inline php and spitting html out with echo statements - that's almost never my preferred method within a template. The right pane is actually pretty good, but you don't need a pair of php tags for every *single* line, just every block that's related. Most of my templates look something like this: &lt;?php doSomethingSkepticalMartianWontDisapproveOf($var); insteadOfFetchingRows(); ?&gt; &lt;?php if($rows) : ?&gt; &lt;ul&gt; &lt;?php foreach($rows as $row) : ?&gt; &lt;li&gt;&lt;?php print $row; ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; &lt;?php endif; ?&gt;
While the parser arguably takes more time to parse the additional tags, it's not going to be a human-noticeable difference. Especially with a caching mechanism enabled, it becomes a moot point. This is far more of a code maintainability + professionalism wtf than a performance concern.
Yeap, came here to say something similar. I'm writing php like that when it involves direct html interaction and treat the php blocks as HTML in indentation and opening closing. I even get a little frustrated when I need to setup a variable midway because that ruins the lines a little, should I put it in a *new php tag* (like in the right side image), extend the existing tag (putting the code in the same line as the for/if statement), or break the line (but then it's not conforming to my HTML style guidelines that require a tag to be on one row). Although I rarely code in PHP these days, I do love that language. It's easy to do what ever feels right to you, even if you think you should shoot the developer who wrote that code (happened to me many many times). **ProTip**: In your code editor of choice configure the syntax highlighting that the the opening and closing of php tags are almost mixed with the background, that way you won't notice them as much, and the code will feel more natural. [I don't know if it hampers or increases performance, just talking about code style]
Don't be a dick. Just say "You know, you don't have to put opening and closing tags on every line..." But if he knows that already.... wtf?
No...it's just that hurling insults around does not add to the discussion, and only serves to make you look childish and/or stupid. If you are trying to have a civil and constructive conversation it generally helps if you don't state blatantly off-topic and insulting comments. This is not some strange world view I have, this is just me having to point out what it means to have a discussion. I shouldn't have to do that...
&gt; You don't need the semicolons True, but I find I make fewer errors if I consistently always use them. &gt;you don't need &lt;?php print anymore if you're on 5.4 since &lt;?= is always enabled. We've [discussed the good and ill of short tags at length](http://www.reddit.com/r/PHP/comments/rg9od/short_tags_yay_or_nay/) but I still am not a fan of using them (for all the reasons I've listed in that thread). 
I have found trying to run source formatting without semicolons in Zend Studio really hoses everything up.
Hey, this is how I code when mixing PHP and HTML. I don't like the if: endif; thing, I use classic brackets if{} ; but that is a small difference. I like your coding better than the &lt;? other ?&gt; &lt;? annoying ?&gt; &lt;? coding ?&gt;
AH! The brackets! Let me bring you into the light, child. Curly braces are really hard to match in html templates in most editors. Most *especially* if you accidentally delete one. ;) If you use the end* syntax, you can almost *always* figure out what matches up with what - and more importantly, so can most designers you may be working with. I really very strongly recommend that syntax whenever you're working in templates. But in regular pure-php code, I would never ever ever do that. Uggggly.
Very good explanation. Some editors do have trouble with finding the closing bracket.
I think it's such a trivial problem as to not warrant this much energy from either of us. If you're in a situation where the semicolon is not trivial then it is the least of your worries.
It is a matter of consistency. If he switches between his templates and his classes and he doesn't put the semicolons in his templates, he is more likely to forget one in his class. If he just keeps his personal rule of ALWAYS ending a statement in a semicolon, he will likely reduce errors in non-template code.
As noted below, if you're in an environment where the worst that could happen is that you see it fatal and fix the missing semicolon this is a trivial problem. But if you're in an environment where this missing semicolon somehow makes it to production after _you_ missed it, your codereviewer missed it, QA missed it, pre-prod missed it and it _finally_ made it to live and lost money from a whitescreen... the fucking semicolon is the least of your worries.
When you could avoid the fatal error in the first place...? I do believe that was krues8dr's only point: "I find I make fewer errors if I consistently always use them."
That link seems completely irrelevant. jQuery, etc aren't really frameworks, they're libraries. Backbone is a framework, jQuery isn't. I mostly agree with systematical here. There isn't much reason not to use a framework of some sort, unless you enjoy writing lots of boilerplate code. If raw performance is an issue, you should probably be looking into some of the Erlang or Haskell stuff. Though, most people who have performance issues with PHP frameworks have them not because of the framework, but because of the code they're throwing on top of it. 
You insulted someone, you did not 'call them out'. You acted like an asshole...I think it would be understandable for someone to say 'stop being an asshole' on /r/php. Take what you will from that...
This is nearly MVC coding. If you code like this you may benefit very well from a framework like CodeIgniter. It will save you a lot of hassle. Unless you do primarily very small mostly static sites, then it will just be a resource waste... 
You are an amazing individual. I must confess that I am fairly new to php and have been doing this: } // end if Now that I know of the endif my life can improve! EDIT: the code formating isn't working even though it works in the Live Preview. I think it isn't updating from my edit.
I use this with MVCs all the time. ;) Good thinking.
I'm not sure performance is the only factor -- an ORM can reduce and simplify your code, but not in all cases. I've seen some very convoluted ORM query code that would be significantly simpler in SQL. I'm still trying to find the appropriate balance.
I could be generated by a script.
Ugh, that makes me cringe. I prefer to do everything inside &lt;?php ?&gt; and use echo or other outputs. Want to see some horrific PHP/HTML soup? Look at a ZenPhoto template.
That long opening syntax (&lt;?php) looks like shit. Why did the dev community all embrace that? 
sure all the dumping functionality can make it hard. But I'm talking about remote debugging. It allows you to step through code line by line as it executes so you can troubleshoot problems.
I wouldn't do either at all. Fetching data from the database does *not* belong in a template.
Sure thing. In my experience, they're the ones most likely to flag things as spam because their interface has a big button on every email to do just that.
Maybe he used to be a ColdFusion developer.
Well aren't you just a barrel of awesome...
I prefer to do: &lt;li&gt;&lt;?=htmlentities($row, ENT_QUOTES, 'utf-8');?&gt;&lt;/li&gt;
Check out the [Model-view-controller pattern](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller). Most popular PHP frameworks implement this in some way. In fact, it seems that MVC is widely agreed upon as "the way to go" for web development. Oh, and I'll just leave this here: [Symfony2](http://symfony.com/)
There is nothing wrong with writing php this way. It may not be as streamlined as using a framework, but I see nothing wrong with it as long as you manage your source files responsibly.
I solemnly swear that I do not ever *actually* fetch rows in my templates, and that my example was anecdotal at best. ;)
I'm ecstatically happy for you brave individuals who are running PHP 5.4 in production, but I'm afraid I won't be joining your ranks *anytime soon*. ;)
I hear this argument a lot, and I really seriously don't get it. Why add yet another language to your stack just to show a template? PHP is *already* a templating engine in the first place. Not trying to pick a fight, btw - I've just seen this same stuff since Smarty came about and it really seems like total madness.
We just use the short_open_tag directive with PHP 5.2 at work.
Agreed, the template language is ment to simplify things and take care of things like HTML escaping. Generally makes life easier for managing your presentation layer. Plus it all gets compiled down to that dirty looking PHP code anyways.
ITT: newbs and noobs
100% agreed. They are definitely still getters and setters, but personally, I only use them if absolutely necessary, and __set and __get forces me to keep my code compact and necessary. In most cases, I subscribe to what the article discusses. Use the objects operation methods for accessing and modifying data -- typically via other objects and not via direct interaction with the properties.
All it would take is APC, which this developer wouldn't have to lift a finger for. Though he is working at a place that hired him, so...
I can see why programming this way would be fine for quick and dirty applications, but for larger applications, wouldn't it clutter up the global scope with a whole lot of temporary/one-off variables (such as temporary string variables used to build SQL queries) all which will linger around until the end of the script? Besides, I thought that's why structured programming with subroutines were introduced; to break up and structure hundreds of lines of code, making it easier to read and maintain. I'm not sure I follow the logic? 
Now, that someone else answered already, I can just link it \o/ http://www.reddit.com/r/PHP/comments/s345g/php_sucks_but_i_like_it/c4b50oy
The link redirects to the homepage of tinypic
Hi Jim Can I strongly recommend the designer rethinks the home page. The box-grid view is somewhat hard to read especially with the serif font. Maybe a list style with each post below each other would be better. I messaged you previously regarding the code view page which I feel still applies. The border/shadow/spacing combo on the comments in the code is overkill. I find myself having to read the code -around- the comments; It should be vise-versa. Maybe create an option to hide/truncate the comments by default and then click to reveal? Lastly - Nicoon's logo design is great, the speech bubble would make a perfect favicon / app icon.
&gt;Can I strongly recommend the designer rethinks the home page. The box-grid view is somewhat hard to read especially with the serif font. Maybe a list style with each post below each other would be better. &gt;I messaged you previously regarding the code view page which I feel still applies. The border/shadow/spacing combo on the comments in the code is overkill. I find myself having to read the code -around- the comments; It should be vise-versa. Maybe create an option to hide/truncate the comments by default and then click to reveal? I completely agree with you, and I've voiced the same concerns to Jim on a previous occasion. Hopefully, this designer will be able to handle it in an elegant fashion. &gt;Lastly - Nicoon's logo design is great, the speech bubble would make a perfect favicon / app icon. Thank you kindly. 
If all you are doing is accessing the properties or maybe changing them directly anyways, why is it necessary to even have the getters and setters? 
Validation. 
As joshwoodward said, validation, but it's also a matter of exposing your API.
I cringe every time I see &lt;? vs &lt;?php. The first reason is short tags, far too many times I've moved someone else's project to a production server or demo server and it didn't work. Then I end up fucking around for 30 minutes before I realize it's a short tags issue and then enable it for the server. To me assuming short tags is enabled is as bad as assuming register globals is turned on. The second reason is because certain IDEs completely fail to recognize the &lt;? tag, I realize this is an issue with the IDE but it seems to be common enough that I would avoid using it.
Your code is extremely vulnerable, mind you. You don't appear to be validating your input at all, and all your SQL has gaping SQL injection security holes. PS. You shouldn't be using the mysql extension. Use prepared statements with PDO or mysqli instead. See: http://php.net/manual/en/intro.mysql.php and http://php.net/manual/en/mysqlinfo.api.choosing.php
The problem is for all of them
Actually, you should also post how you are running this code. IE, are you testing to see if POST data submits or just running it in general on a page? That part of it matters quite a bit in reproducing the issue.
I love how this stuff makes sense in their head so they go with it, until someone with a bit of sanity about them points out the glaring flaw. Your point about obfuscation and complexity are __spot on__. Anyone who chooses to use them because they're having a moral quandary about the usage of getters/setters is a buffoon imo. 
It depends on your needs, but direct access isn't necessarily an anti-pattern either. the idea of a POD exists for a reason.
Everything submits perfectly, I'm not sure how much more I can say. You'd probably have to look through the whole system to figure it out. Really odd problem, thanks for the help though.
You still haven't answered how you're actually getting to this code. Are you using it within something like `if (@$_POST['submit'] != '')` or something? Again, that part is probably kind of important. There's a good chance you're running the code twice in the first place.
This is what you said, and this is what I responded to: &gt; thoughts: you only consider PHP within the context of a webserver which is a shame __and even in that context the explanation of "shared nothing"__ is nothing more than an excuse Whether you feel like it's a different topic or not is irrelevant. When it comes to concurrency, Ruby and Python both take roughly the same approach that PHP does. The GIL prevents "true" concurrency, in order to achieve it, you use multiple processes, whith mechanisms outside the process itself for communication (IPC of some sort). The Web itself is also naturally concurrent. 15 requests come in at the same time, the web server does not do the requests 1 at a time, it does them concurrently. This "shared nothing" approach that PHP takes is analogous to using Python and Ruby's approach to concurrency, which is to keep the GIL and spin up another process(s). http://merbist.com/2011/02/22/concurrency-in-ruby-explained/ &gt; This GIL is a locking mechanism that is meant to protect your data integrity. The GIL only allows data to be modified by one thread at time and therefore doesn’t let threads corrupt data but also it doesn’t allow them to truly run concurrently. That is why some people say that Ruby and Python are not capable of (true) concurrency. ... &gt; However these people often don’t mention that the GIL makes single threaded programs faster, that multi-threaded programs are much easier to develop since the data structures are safe ... &gt; Multiple processes &amp; forking That’s the most commonly used solution to gain concurrency when using Ruby and Python. Because the default language implementation isn’t capable of true concurrency or because you want to avoid the challenges of thread programming, you might want to just start more processes. That’s really easy as long as you don’t want to share states between running processes. If you wanted to do so, you would need to use DRb, a message bus like RabbitMQ, or a shared data store like memcached or a DB. The caveat is that you now need to use a LOT more memory. If want to run 5 Rails processes and your app uses 100Mb you will now need 500Mb, ouch that’s a lot of memory! __That is exactly what happens when you use a Rails webserver like Mongrel.__ The problem is that people don't know what the fuck they're talking about, but they'll still do it with an air of authority, especially when you have some 20 y/o who's enamored with some non-PHP language, and since PHP is the language to beat on the web, obviously PHP's flaws become glaring, even if their language suffers from the same flaws. Both languages can be run under fastcgi (and are). The only real difference between PHP and RoR in that respect is that PHP relies on 3rd party solutions (APC), and RoR built it in themselves by caching and reloading based upon symbol access, etc. But at the end of the day they're basically doing the same thing, so if you're going to call PHP out on that, you damn well better start calling the other systems out on it too. 
I work with people who would modify any and every class member if they could. So yes, let's have them for the idiots
http://www.reddit.com/r/PHP/comments/s345g/php_sucks_but_i_like_it/c4bebsw
If you can find a framework that you like. Just use it. But the bigger the framework is the more decisions have been made on behalf of the user (even if the framework is modular). When you hit the wall with framework, it starts to get painful. I'm more of a build my own framework and utilize libraries kind of a person. Frameworks tend to solve too many problems while libraries/extensions are solving smaller ones. Frameworks introduce the problems of their own. You have to consider whether you are gaining from using framework or not. These days most of the code is in many cases on the client side. There you obviously utilize things like jquery and backbone.js. I think that the need for huge frameworks on the server side is a less of a concern these days.
I strongly encourage everyone to use accessor methods when writing oo code. I came in here, though, to say that it makes less sense in PHP than other languages (e.g. Java) due to php's loose typing. But, even in those cases, getters &amp; setters make it easier to add validation as your app grows. 
Oh I *always* use an MVC, but I *never* use yet *another* language for templating if I can possibly avoid it. Why re-reinvent the wheel?
Validation. Some properties are also calculated (e.g. Age from Date of Birth) and some are loaded on demand. 
I plan to, it's just tough because the comments are created using a modified preorder tree so I have to adjust the right values of every comment after the deleted comment. I'll bump it up in my ticket list.
I'll check it out. Thanks for the heads up.
Oops... you're missing something good guys! Here it is http://i.imgur.com/H0oIy.png
I can see your thought to quit, but do you think you could teach him to do better or are they your boss or something?
Maybe then next time show us how you cleaned it up and made it better...because the code in the left is also crap.
Why would you place more trust in a third party service than PHP's built-in functions?
&gt; Quite commonly those validation rules never materialize. I frequently see shallow getters and setters because people overplanned or didn't bother to add any rules later on. I don't see a problem with that at all! A shallow getter/setter is typically not going to be a performance or maintenance concern. Likewise, the flexibility is already present to allow you to easily implement whatever validation you'd like -- without completely refactoring the class (and everywhere that it's used). Likewise, pre-existing getters &amp; setters allow me to easily debug the lifecycle of a particular property; with logging, I can insert debug code to see when it changed, the callstack of when it was changed, and what it was changed to; likewise, I can see which other pieces of code are touching it. Yes, there are static tools and interactive debuggers that can also do these types of things, but sometimes spot-logging is all you need and is usually the quickest method for me. &gt; For enforcing typing it's significantly simpler to utilize __set() and a single typemap instead of copy&amp;pasted setters. Easy to add when you actually need them. Though it's more fugly in PHP to add implicit setters/getters than as in e.g. Python. The problem with the magic methods is that they may add a non-trivial amount of overhead to what should be a fairly simple method call, but I guess this depends on your usage. However, as you say, you have to build &amp; maintain some sort of internal metadata _in code_; even then, it's no panacea, as applications typically have to support more data types than PHP offers. An anecdotal example would be for strings: * strings to be inserted in the DB (and this is dependent upon your DB implementation) * strings to be used in the DOM * strings to be used in JS So, you can't simple say "sanitize string" because the definition of sanitize changes with context. So either you build a complex system of magic methods and meta data, which can turn into both a performance and a maintenance concern, or you do it rote-style and be done with it. So, in the end, it really depends on the requirements and the context.
There is a big difference between the IP a visitor hits your site on, and the IP that your server hits other sites on. I'm guessing you are using some shared hosting, so the server your website is on likely has several IP addresses bound to it. Now that you have a dedicated IP, apache is listening on that IP for you, and any requests that come in for that IP (either directly, or from a domain resolving to that IP), and thus the $_SERVER['server_addr'] is going to be the IP the request came in to. whatismyip.com is going to tell you what IP the server used to get to its site, which is going to be the servers' main ip address. 
If you want to check if the IP address has changed, check the DNS record for your domain name. When you purchase a dedicated IP from a shared hosting company, all that does is associate that IP address with your site in Apache so that you can use the IP address without the host and to allow SSL to be used. Outbound connections that PHP makes will still come from the server's main IP address; that's why "whatismyip.com" is reporting your old IP. If you want to change the IP address PHP uses when creating connections, you'll have to do all of your networking manually using sockets and use the [socket_bind()](http://us2.php.net/manual/en/function.socket-bind.php) function. EDIT: You can set the [address the socket binds to in a stream context](http://www.php.net/manual/en/context.socket.php) too.
I have a similar setup to what you described. The red markers on the left and right indicate where comments are even if they are hidden. I probably could pretty them up a bit by adding Nicoon's speech bubble icon instead of a red tab. It currently isn't open source. I'm not sure if I could open it up and still monetize it. I have plans on adding some premium features and using a freemium type model I still have a ways to go before I can do that though.
If you have the time, I would like to apply and/or have you peek at my code to critique it. I know that I am pretty under qualified, and in college so a full time position doesn't work anyway, but it would be great to see an employer's perspective of me as a potential hire.
&gt;So, I would like to know whether $_SERVER['SERVER_ADDR'] is the correct way of knowing the IP address of the server It all depends on network setup. For example, if all your servers are behind a load balancer, you may get internal IPs from $_SERVER['SERVER_ADDR']. Someone suggested resolving the domain name which isn't a bad idea. Really what you want is the domain's [ARecord(s)](http://www.zytrax.com/books/dns/ch8/a.html) since there can easily be more than one endpoint for a domain. An easy way to get all the ARecords for a domain is to use [gnu dig](http://www.hungrypenguin.net/dig.php?TB=2). Ex: dig google.com A +noall +answer would respond with: ; &lt;&lt;&gt;&gt; DiG 9.7.3 &lt;&lt;&gt;&gt; google.com A +noall +answer ;; global options: +cmd google.com. 300 IN A 173.194.33.41 google.com. 300 IN A 173.194.33.36 google.com. 300 IN A 173.194.33.34 google.com. 300 IN A 173.194.33.35 google.com. 300 IN A 173.194.33.37 google.com. 300 IN A 173.194.33.46 google.com. 300 IN A 173.194.33.38 google.com. 300 IN A 173.194.33.33 google.com. 300 IN A 173.194.33.40 google.com. 300 IN A 173.194.33.39 google.com. 300 IN A 173.194.33.32 If you want to do this with PHP and no external binary, you can also get a list of addresses using [dns_get_record()](http://php.net/manual/en/function.dns-get-record.php): $records = dns_get_record('google.com', DNS_A); Which responds with an array of records that look similar to: array(11) { [0]=&gt; array(5) { ["host"]=&gt; string(10) "google.com" ["type"]=&gt; string(1) "A" ["ip"]=&gt; string(13) "173.194.33.46" ["class"]=&gt; string(2) "IN" ["ttl"]=&gt; int(300) } [1]=&gt; array(5) { ["host"]=&gt; string(10) "google.com" ["type"]=&gt; string(1) "A" ["ip"]=&gt; string(13) "173.194.33.35" ["class"]=&gt; string(2) "IN" ["ttl"]=&gt; int(300) } (etc, etc)
Same. Also, no ORMs. 
oh lol
&gt;I recently found a tutorial online for a simple yet secure login system Out of curiosity, how do you know it is secure? &gt;should I have the code check if the user is logged in (via a session variable) every time there would be a difference in output of non-logged-in vs. logged-in. Normally, yes. However, you probably shouldn't check the session variable directly. Normally, you'd want to abstract the implementation away, and instead communicate with it through an interface. For instance, it would be a good idea to create an authentication class which does all of this for you, e.g.: $auth = new Security\Authentication($storageadapter); $authadapter = new Security\Authentication\Adapter\WhateverYouAreAuthenticatingAgainst(...); $authadapter-&gt;setIdentity($username); $authadapter-&gt;setCredential($password); $result = $auth-&gt;authenticate($authadapter); if ($result-&gt;hasIdentity()) //logged in { $user = $result-&gt;getIdentity(); } You could then pass it along to your view and have it check your identity. 
&gt; I'm trying to learn programming had have chosen as my language of choice. What? What language have you chosen?! The suspense is killing me! But seriously, [this tutorial on Tizag](http://www.tizag.com/phpT/) was very helpful to me when I was first learning PHP a few years ago. And the book [PHP and MySQL Web Development](http://www.amazon.com/PHP-MySQL-Web-Development-Edition/dp/0672329166/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1334255553&amp;sr=1-1) is huge, and I never technically "finished" reading it, but it's certainly got some good stuff in it and I would recommend you check it out. By and far, the best way to learn any kind of programming, is to just do it! Before I started reading programming books, I only knew exactly enough to do what I wanted to do. Choose a project to start with and keep Googling until you figure out how to make it a reality. Let us know if you need any further help!
&gt;I suppose by secure I mean that the article called it secure Just because the article claims that it is secure does not necessarily make it so. Sha256 is a fast hashing algorithm and is not suitable for security. Instead, you should be using a proper tried-and-tested cryptographic algorithm designed with both work factors and salts, such as bcrypt. Furthermore, there are tons of other security concerns besides the cryptography. Here's a cheat sheet for you: https://www.owasp.org/index.php/Authentication_Cheat_Sheet &gt;Why would one be advised against directly pulling the session variable to check? Because doing so tightly couples your code, making it difficult to maintain and alter, if one wished to. 
Ah I see, apologies, I somehow missed the red tabs completely! Look forward to seeing the next update you post
You want to learn a programming language, but you don't even know how to search (google or reddit)? This should be fun...
Learnt the most and at the fastest pace with the free videos from www.phpacademy.org Start with the basic tutorials and code as you go along.
I think this is the best response. SERVER_ADDR may only tell you what Apache/IIS/whatever *thinks* your IP is. It's not going to give you a good answer as to what the Internet thinks your IP is.
If your server is behind a load balancing proxy (or using packet rewriting), there's no way at all to tell the real external IP. Maybe your server is bound to 10.61.8.14, but if you use an outbound connection to detect the IP, the server may not be listening on the outbound IP. Additionally, if you are on a shared server that's not hosted in an outhouse, chances are the outbound and inbound IP will never be the same.
&gt;I see nothing wrong with it as long as you manage your source files responsibly One might argue that 400+ lines of spaghetti code in a single file is not managing your source files responsibly.
The fluent interface of Doctrine coupled with the easy to define object model and relatively thin API (you can get down to the nitty gritty with a single function call) make it very flexible. Doctrine has probably saved me close to two thousand man-hours of work in the last three years.
While you aren't mistaken, it could be put a little nicer. Yes, humans frequently over reach.
http://www.w3schools.com/ is the best site I've found for learning most web based technologies. 
If you were told that X.X.X.X was your new IP address, and you can reach your server at X.X.X.X, then it works. Anything else, and 90% of the hogwash other people here have written, is a waste of time.
Go back and rethink your choice, PHP seems to breed bad code, and bad coders. I'd suggest Python, Java, or C# are better starting points. 
Kids these days! .... back in my day we didn't have search engines! I had to teach myself various dialects of BASIC by bashing rocks together.
Well, google has it's limitations. If I were starting out I'd want to get the most out of my time too, and I trust this subreddit more than websites with high SEO.
[srsly?](http://i.imgur.com/ObyEa.jpg)
If you've never used them before it is a nice overview. 
I don't understand the hate they get. I'm yet to see a resource that is as quick and convient. 
They cover a lot of different technologies utilizing a standard documentation interface so the barrier to learning a new language is low.
While not a popular opinion here, as a 10 year veteran of PHP and someone who somewhat made this mistake himself, I can't agree more. If you really want to learn PHP for whatever reason then go for it, but if you want to learn how to program I recommend getting at least a basic yet solid foundation in C and then moving to a higher level language like the ones mentioned above. Learning PHP first will cause you to need to unlearn a fair amount should you decide to move on to a well designed language in the future.
If you Google "Google syntax", you can find how to use Google whilst bypassing SEO-spam sites. Google has very few limitations, besides the limitations you impose upon yourself through laziness.
Google has a personal Blocklist https://chrome.google.com/webstore/detail/nolijncfnkgaikbjbdaogikpmpbdcdef My understanding is that not only does this let you clean your results up, but aggregated data helps Google provide better results. My number one deletion; Experts Exchange.
&gt; somebody else made a mistake and learned from it. What makes you think he learned anything? He's still doing things by rote without thinking about them.
Thanks for posting this **completely** useless comment. Good day.
&gt;Is this a bad idea? Depends on what you mean. If you are referring to the ASP.NET Web Forms way of doing it, with postbacks and all, then yes it is. A website should work without the need of javascript. Javascript is an enhancement, not a core functionality. 
Well [/r/PHP](/r/PHP)... Was it shitty or did you find it useful? Changes?
Why do you hide Experts-exchange results, the answers are at the bottom of the page...just scroll down
Maybe even look into redbean, it is a very nice orm. [redbean](http://redbeanphp.com/)
http://www.experts-exchange.com/Web_Development/Web_Languages-Standards/PHP/Q_27673894.html Where? The model is horrible, I'd rather not deal with it at all, and jump over to Stack-Overflow
I personally don't - C# is reasonably well designed, if you remember *and apply* what you've learned there in PHP you'll instantly be better than many who learned to code from scratch in PHP. That depends a bit on what "experience" means, though.
Great article. The only thing is that I walked away from it still wondering why would I want Nested Sets? I understand that they are superior to Adjacency Lists but IMHO Nested Sets are good for querying subtrees and not much else. Querying direct children, deleting nodes, inserting nodes, and moving subtrees are all relatively difficult with Nested Sets. Not to mention that Nested Sets do not maintain referential integrity. Even Path Enumeration is easier despite having some of the same problems. All that said, I love your writing style and approach - I just wish this article was about Closure Tables instead of Nested Sets. * Edit: I accidentally a word
Perhaps I should expand upon the take away section. Nested sets have their place -- without implementing with a level number or parent id direct sub trees become complicated. Also, moving sub trees isn't so bad code wise. You just end up wreaking havoc on your database. :/ Perhaps I should write about closure tables next time! Also, would you mind placing your comment on the blog? I would love to get a discussion going over there so that people can hear what others think. I hate it when I arrive at a blog post and don't see what others think.
I've used the parent/child relationship, but as my applications get larger there seems to be a need for something more robust. I'll check out EAV though, thanks. 
I'd wager that on any website that sees significant traffic, that the percentage of "javascript disabled" or "has a device so ancient it doesn't support javascript" is trivial. Hell, my blackberry from 2004 has javascript support. 
nice list you found there.
You could store the schedule instead. I have an app that does that, but then you need to be able to store the exceptions... unless you will have millions of them, why not generate an event for each date? You can always link the series.
yeah, parent/child breaks down pretty fast. A combination of nested sets and level works great if your data doesn't change often but is bulky and often searched. 
Well, ASP.NET Web Forms does, at least. ASP.NET MVC is better in that regard. Web Forms work by wrapping the entire website in a form and adding hidden input fields for identifying what was clicked (called the view state). Event handlers are bound to buttons using the onClick attribute, which in turn sets these hidden input fields. It's a truly horrendous architecture. 
Another way is to have a hierarchy field, like so: ID Hierarchy Value 1 00 Item 1 2 00.00 First Child of Item 1 3 00.01 Second Child of Item 1 4 01 Item 2 5 01.00 First Child of Item 2 6 01.00.00 Third Level under Item 2 7 01.00.01 Second child on third level under Item 2 Then you can query it ordering by Hierarchy, or if you just want the children of Item 2, this: SELECT * FROM table WHERE LEFT(Hierarchy, 3) = '01.' ORDER BY Hierarchy I believe Drupal uses this method
Have you considered closure tables?
used this a I started learning PHP. It is very good since you have some "real" examples which you build in the tutorial: http://tut.php-quake.net/en/
this reply is better than the original article.
As everyone is mentioning closure tables, [here](http://dirtsimple.org/2010/11/simplest-way-to-do-tree-based-queries.html) is a good article, and [here](http://en.wikipedia.org/wiki/Transitive_closure) is stuff for people who speak math. tl;dr of hierarchical models is: use materialised path for small sets, use closure tables for large sets
&gt; PHP is already a templating engine in the first place. Because it does a shitty job. The alternatives are clearly superior. But that's just my opinion, man.
This is fucking disgusting, shame on you and Xeoncross.
if you want an easy to use javascript function to handle the client side of polling (not long pollig) take a look at http://www.eslinstructor.net/smartupdater3/
I find it really ties the templates together. You don't have to piss on it.
Which is a logical requirement for a .gov site, but not for lookatmydogpictures.com. It really depends on the budget and requirements for the given project. Yes, if you need to support a screen reader, high visibility, and all other accessibility stuff, this stands. Otherwise, web-based applications are replacing web sites. Those that rely on javascript (or flash, or html5) should consider the ramifications of making that a requirement.
That is reason enough for me to implement a viewstate or some other method of retaining state. Thanks.
Except when it doesn't.
Case example?
After rock217`s post I have added a requirement to the spec for it not to depend on client scripting.
I am actually literally doing the same exact thing for my employer. I use two tables for it. The first table is for the event itself, so it stores any information about the event. But it also has two columns "reoccurring" and "stop." If "reoccurring" is set to 1 then we know to look into the second table for its when it should reoccur. The "stop" column is the date to stop the event from reoccurring. The second table has two columns, one is the id of the event (in the events table) and the other is the reoccurring type (I have 7 types, 1 = daily, 2 = week days, 3 = week ends, 4 = once a week, 5 = bi weekly, 6 = every month, 7 = yearly) Then when I load the events into the calendar, I just check the if the current date of the calendar is relevant to the reoccurring type. **timestamp logic** = check if current timestamp is greater than event start timestamp, and if current timestamp is less than event stop timestamp... also since it's a reoccurring event, make sure you check that the current day doesn't equal the event start day because then you will have a duplicate event on that day. If daily: timestamp logic If weekday: check if date("N", timestamp of current day) is &lt;= 5, and current timestamp logic as above If weekend: check if date("N", timestamp of current day) is &gt; 5, timestamp logic Every week: check if date("N", timestamp of current day) is equal to date("N", start date of event), timestamp logic Every two weeks: first do the every week check, then check if date("W", timestamp of current day) mod 2 is equal to date("W", timestamp of event start) mod 2, timestamp logic Every month: check if date("d", timestamp of event start) is equal to date("d", timestamp of current day), timestamp logic Every year: do every month check, then check if date("m", timestamp of event start) is equal to date("m", timestamp of current day), timestamp logic That's what I did at least... ha
I just converted a project from limonade to [Laravel](http://laravel.com/) yesterday.
This is like shopping for toilet paper. You go to the store and walk to the aisle and there in front of you are 40 different kinds to choose from, and all you really want to do is wipe your butt. How anyone would choose between all those framework options, even with handy charts detailing features, is beyond me. It's impractical to try them all. I think the biggest things that help you make a choice are also absent from this chart, notably quality/depth of documentation, community size and support and frequency of releases/bug fixes. Those things are, to me, a lot more important in a framework than a lot of other little details.
- Why do you have two tables? From what I understand you make a 1-to-1 connection, so it could go to a single table. - When you render the calendar for the actual month for example, do you loop through every day in php? Or how do you do it? Thanks.
I wish the other metrics you mentioned were there. I found this site while looking for documentation on Fusebox, which appears to have almost no community behind it. I wish my company wasn't so invested in Fusebox, but you have to work with what you have. Maybe someday I can convince them to do a complete rewrite.
&gt; You can always keep track of the range of dates you've generated, too - so if the user tries to view dates outside of that range you can generate them on the fly. Yeah that's a good idea. I wonder what Google or Yahoo use on their calendars.. 
The third party will give you the IP that is bound to the outgoing interface on the server, which is often different than the incoming interface (to which webserver traffic is routed)
You can definitely do a single table, I still don't know why I used two tables, ha. When I render the calendar for a month, I loop through each day in PHP for that corresponding month and year. There's a multitude of calendar tutorials out there that will tell you how to do this easily. Inside the loop I reinitialize a variable that holds the current date of YYYY-MM-DD. And I use that variable to check in the events table for events on that date, and I use that variable (holding the date) to check on the reoccurring logic (that date is used as "current date" in my previous post)
Interesting methodology. Does that model have a name?
I never had any luck with the Linux solutions (can't remember everything I tired), but I did give up pretty quick. Have you tried using a windows solution running in wine? In my scenario the data source had an MDB and all the information on their website. I gave up on the MDB and just wrote a PHP scraper using simple_html_dom and cURL. I then built my database schema and populated that using the scraped data.
Not sure if they'd like WINE running on the server to get the data. My current attempt is reading in the output from mdb-sql and running it through a regex (http://stackoverflow.com/questions/1401317/remove-non-utf8-characters-from-string). It's getting further but there seems to be some slipping through, maybe between the chunk splits? I tried larger chunks but then preg_replace_callback seg faults. :/
You've moved beyond what I was willing to do. Of course I had a second solution and a lot of experience in scraping sites. Good luck.
I've been fiddling around with Laravel as well. I'm really liking it.
An handbook about SOAP and php
I've dealt with this problem before years ago. My solution was to have a connected Windows box serve the MDB data over a web service. Probably not the best solution but it was a working one. But there's a better solution if you have the time: MDBs do not scale well. If you think this database will grow to any sort of significant size I'd recommend migrating to a full-fledged database engine asap. You probably don't have the time to do this though. 
An individual database is created for each image set. It's basically the file type that the manufacture uses :/ We don't have the window's server and the box that the images get saved to are on a different network. Basically they do the scans and upload them to our NAS (Linux). I download them and put them through the script for processing (Linux desktop and server). I guess I could load up a windows VM and create a script that would process them.
thanks, the OWASP link is pretty interesting. funny how im in a security class in school and the teacher was just talking about OWASP. too bad we only go over theory and stuff, not procedures/implementation
 sort($array); Should work on its own. No need to do this $array = sort($array);
That's because the sort() functions operate directly on the array, [as stated in the manual](http://www.php.net/manual/en/function.sort.php). The correct solution would be sort($array), simply. 
It's linked to a text file, there's a link in my post. Here it is again. [LINK](http://pixelcabi.net/test/)
&gt; Warning: file_get_contents() [function.file-get-contents]: URL file-access is disabled in the server configuration in /homepages/38/d410866236/htdocs/test/image.php on line 6 This is your problem, your server configuration doesn't allow you to get get the content of remote URLs. If you have access to your server configuration, edit your `php.ini` file and change allow_url_fopen = Off To `On`, if you don't have access to this ask your host about enabling, though if it's disabled chances are they won't enable it. If you do manage to enable it, removing that comment from the beginning of this line header('content-type: image/png'); Should make the script work again.
 Also on OS X 1. IDE: PHPStorm 1. MySQL: Sequel Pro 1. SVN: Cornerstone for diffs/logs. CLI for ci/co/up's 1. MAMP for *AMP server. 1. Quickeditor: Sublime Text 2 1. Terminal 
I'm using iconv currently, but I'm still getting the error: invalid byte sequence for encoding "UTF8": 0xbf Atm the export is coming out in a proper format to use with Postgres' \COPY But yes, parsing that text and creating insert statements is my next idea. 
How do you find Sublime Text 2 compared to Textmate? I'm assuming you were a TM user before, if you weren't, then forget it. :-) I didn't list Textmate, but it's my "quick editor", but I've heard lots about SM2 and been debating giving it a try.. I just know my way around Textmate so much already, and it's only for quick stuff anyways.. What, for you, is the big thing with SM2 that makes you choose it over Textmate? 
cli, cli, &amp; cli. I also use firebug and vim/geany (used to use EclipsePDT, SciTE, and SublimeText).
Soap is terrible. Stop using it.
I don't have a great answer for you on that one - I've just never liked TM. I think it's mainly I don't like the aesthetics/feel of the app, so I never really used it. The pop-out drawer always bugs me, regardless of the app. SM2 just feels more integrated to me. I'm not a big fan of it's search/replace functionality, but otherwise it works for me. Typically, though, my quick editor is really a glorified notepad with syntax highlighting. I rarely do more than simple changes or small test functions in it. 
Thanks. I appreciate it. 
Fair enough.. I hate the weird pop-out drawer in TM too.. However, there's a great plugin called [Textmate's Missing Drawer](https://github.com/jezdez/textmate-missingdrawer) that integrates the drawer into the main window (like it should be), if you care. :-) 
The project I'm working on has been around for about 10 years now. Back then, there weren't many frameworks. I would rather take over a project that used a shitty framework then a project that didn't. With a framework there is typically enough documentation out there to pick it up quickly. Without a framework, you're probably going to spend more time figuring out the 'how and why' of the code.
[Wikipedia has a similar chart.](http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#PHP_2)
Vendor lock-in is a nightmare. The MDB to which I was referring was a log file for third party PBX software and there wasn't much I could do about it. So I thoroughly empathize. It might be a long shot, but you might be able to convince the vendor to upload a different format to you. I've been successful in doing that a few times.
Surprised to see no Aptanas. I use vim for everything these days, but before that, Aptana was my favorite. It's really quite good.
Pretty usefull when you have some anoying perfectionistic client :)
I've done this exact thing as well, don't feel stupid. When the vast majority of array manipulation functions return an array, then it's only reasonable to expect something like sort() to behave similarly.
Well, that one is **MUCH** better then the one I linked.
This post is great! I was just "shopping" for a new Framework. I developed my own framework and noted that there are much better ones than the one I have created, and I was about to switch to Symfony2, but thankfully I saw this post. The framework most like my own, but better, and more complete is ThinPHPFramwork. Going to give it a test spin. If it is what I am hoping then I may even do some development for the framework.
I noticed it's missing some though -- for instance, I immediately noticed that Agavi isn't listed....at least not in the feature table, it's actually referenced in a summary table above, though.
Seeing as how it is on Wikipedia, I assume you added it?
My favorite minimalist framework is [FatFree](http://bcosca.github.com/fatfree/). You should check it out.
I don't see it in the detailed table. Here's [the table I refer to as the summary table](http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#PHP), and it mentions Agavi. However, [the 2nd table which is titled "Comparison of Features"](http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#PHP_2) does not have Agavi, and that is the most useful of the 2 tables IMO.
Just wanted to share the Charles Proxy love. That tool has made my life orders of magnitude better. Everyone should have it.
Windows XP (UGH, but, work hasn't refreshed my machine yet...): * IDE: Netbeans * MySQL Management: MySQL Workbench * Oracle Management: SQL Developer * SVN: Netbeans (Subversion) * Prototyping: Axure (I don't use it but coworkers do) * Quick Editor: PSPad or Notepad++ * PuTTY and WinSCP * Firebug, Chrome Dev Tools
The community contrib on the PHP docs is helpful, definitely. Normally, when I'm looking for Java, I don't need examples as much, because everything works in basically the same way, so you know what you're doing almost by default. You make a good point. Have an upvote.
fyi ... future employers will be looking for magento experience
* OS: Linux-&gt;Fedora-&gt;Gnome (Primary) (Windows/Mac for testing) * IDE: gedit * SVN: http://subversion.tigris.org/ * Diff: http://meldmerge.org/ * MySQL Management: MySQL Workbench * Traffic Debugger: Fiddler2 http://www.fiddler2.com/fiddler2/ Traffic debugger * Image editing Utility: GIMP
PHP development on windows is usually terrible, but the PHP Manager that's available through the web installer is actually really handy, and takes a LOT of the pain out of configuring PHP under IIS. Also, there is a pretty nifty URL Rewrite module that will let you import .htaccess files and have them turned into web.config rewrites that IIS uses. Granted, Windows is definitely not my preferred option for PHP development, but it's come a long way in the past few years.
The point of having access to a community directed at answers to questions of a certain subject matter is that you can personally obtain a solution. In fact, many times I've googled my problem, I've come across a post on some forum with my solution being that of a reply to the thread, such as one you might find here.
These topics come up every once in a while and I love to hear about the latest tools everyone's getting into. OS: Mint 12 w/xfce IDE : Netbeans 7.1 with xdebug Firefox &amp; Chromium Firebug, colorzilla, LastPass Quick edits: sublime text 2 and vim (learning vim slowly) MySQL w/PHPmyadmin SVN Apache2 Various gnu/linux utilities 
I don't do a lot of PHP but: 1. Editor: Sublime 2 2. Database Management: Sequel Pro 3. VC: Git 4. Package Management: Homebrew 5. Debugging: xdebug/MacGDBp 6. Server: MAMP Pro I'm slow in my text editor, I really need to learn vim.
Almost the same setup, only difference is that I use gedit/nano on linux for quick edits.
No Smarty? Reminds me how out of date my website is. Oh well, stil works great! And I know smarty well. Totally not bothering to redo it..
Only really matters if there is other info to include across multiple files. I wouldn't be too concerned about spew issues by includes. :) 
iMac 24" and MacBook Pro. Both fully configured with the stock system servers. PHPmyAdmin with full mcrypt support, and Dreamweaer for raw coding!