What makes it different from every other framework?
FYI this is very alpha, I don't even have a domain name right now and I'm not sure these metrics are the one that will be kept for the release. Feedback on the metrics is by the way very much appreciated. If you want to try it out live: http://178.62.136.230/
`class_alias` kills reusability within components / libraries / plugins and there's no changes you could make to Composer to fix this. From what I've seen, class aliases are used to turn a class name from something like `FooCorp\Database\Query` into just `Query` so you can save some keypresses and maybe reduce cognitive load by removing the use of namespaces. Let's say in library "Foo" I alias `FooCorp\Router\Manager` to just `Manager`. Through out my "Foo" library code I'm just now just referencing `Manager` everywhere e.g `new Manager()` `Manager::get('thing')`. Then in library "Bar" somebody else aliases `BarInc\Container\Manager` to `Manager`. Within their library they are also just referencing `Manager` throughout their code. In my project I want to include both libraries so I stick them in my `composer.json` and start using it in my code but oh no my "Foo" library stops working and throws a fatal error. Can you see why? "Foo" has it's alias for `Manager` overwritten by "Bar". Inside the "Foo" library whenever we're doing a call to `Manager` it's not the object we were expecting, it's actually an instance of the "Bar" `Manager`. There's no way Composer can resolve this because it can't change the actual code within the "Foo" library.
There are no defining features you're not going to find in other frameworks, I'm not going to sugarcoat it. I've taken the (in my opinion) best from all worlds and made a conscious decision to leave out a lot of stuff (auth and database, most notably) so that it is effectively a microframework. I'm a big fan of Symfony components but not of the framework itself. I'm a big fan of Laravel's ideas like automatic dependency injection but it is very inconsistent and tightly coupled. Silex is nice but is still too far into the Symfony ecosystem for my tastes. I think the combination of Symfony components + Twig + auto-dependency injection + cascading configs, all designed well and loosely coupled classes, makes for a combination I haven't seen in other frameworks.
I was simply asking out of curiosity. If you want to take a ganda at some micro frameworks when out Slim and Flight. I'm with you on Symfony. I dislike it which is why I went with Laravel. Good luck with the development :)
[Nope.](http://www.reddit.com/r/lolphp/comments/2g7dix/a_cryptocurrency_whose_reference_implementation/ckgodbz) I'd tell you to use parameterised queries, but that would barely scratch the surface.
The application shouldn't need to be environment aware. If I'm understanding correctly, with the following there would not need to be any actual cascade interfaces/implementation especially since it is performing array merges, e.g $config = include __DIR__ . '/' . ENV . '/config.php'; // dev/config.php return array_merge( include __DIR__ . '/../config.php', [ // dev override ] ) I'm still interested in seeing the cascade idea.
I think asking the user to put logic/boilerplate code like this in his/her config files is unnecessary, and if I were to allow users to use other config file formats like YML, XML or JSON, they'd likely have to reimplement the cascade.
http://3v4l.org/vA6vT ? $legit_id = "345\0groovybaby"; ==&gt; NULL
I must admit I was a bit put off by the old design. This one looks a lot nicer though.
Take a look at http://www.phptherightway.com. There are several sections, including security and coding practices, that will definitely be helpful. 
So, c5 vs WP for your clients?
Thanks, I'll definitely take a look at it!
A few things to note first off: - SQL injections. If using PDO remember to bind your parameters. If on the off chance your using mysql(I). Remember to use mysqli_real_escape_string - CSRF. This is too stop forged requests. Basic principle is a token that gets compared from the form to another place to make sure the request came from the user and not a link he has clicked. - XSS. Not only do you need to escape input with SQL injections but also output so rogue JavaScript and such cannot be executed. There are many other things to take into account as well such as session hijacking. 
Luckily I don't think we will need a database for the form I'm working with because it outputs data to a text file and saves it to a specific directory, so it saves me some hassle dealing with SQL injections. XSS I think I've handled pretty well, but there are some fields that I still need to cover. CSRF sounds difficult to work with and I haven't really done much about that yet. I'll have to look up how to do this.
I found out what the problem is. There's something I need to set in php.ini file.
For coding **styles** I recommend reading the PSRs: https://github.com/php-fig/fig-standards/tree/master/accepted
Thank you, I was reading about PSR-1/2/3/4. I'll have to look into it further to see which style I'd use though.
still using mysql_connect? I haven't used PHP for a while, I thought people were using PDO instead now... 
fixed
__Learn the language for real. Don't treat PHP as something you can use without learning properly.__ I see people doing that. Don't be one of them. PHP has a language manual that is extremely easy to read. Go for it. Knowing the language in detail together with good programming understanding allows you to make decisions about which language features you should apply and reject to improve the quality of your software project. Unfortunately, there aren't many good books on effectively using PHP (I don't know any, to be honest). So you should learn the language, develop a deeper understanding of it, and this will allow you to filter the bad advice out there, get the good ones, and develop your own techniques. It may sound like I'm telling you to ignore all materials out there except the language manual and hope for the best. It's not. There are lots of good programming books that make use of other languages. You can get large chunks good advice from those. You just need the discernment to tell that X advice doesn't apply to PHP, even though it applies to some other language. You can also use language agnostics books. Like Clean Code or The Practice of Programming. Generally, you can't ignore all the accumulated experience out there in books and all sorts of other document formats. You gotta study them so you learn from the experience of other people. The issue is that you'll have to apply the "PHP lens" to find out what applies to PHP and what doesn't. Filtering bad advice is complicated, mainly when it's disguised as good one. Some people get ingo PHP not bothering to learn the language well and end up doing "Java in PHP", "C# in PHP", "Visual Basic in PHP", "Delphi in PHP", or even "C++ in PHP". Not knowing how to use PHP effectively, they restrict themselves as much as possible to what they know from the other languages so they can get job done. It's difficult to spot these people, but their pieces advice are probably the most misleading ones because they look good, specially if you came from the same languages as they did.
I think that makes sense. It's a rather niche need, but if you hacked it into composer it might be considered.
Thanks for the solid advice. I have programming experience in C++/Python, so I generally have an idea of how programming is done. However you are right - learning PHP is a whole different story. I find myself using the PHP language manual for finding the definitions of functions and what they do. Otherwise I usually reference Stackoverflow. I will agree with you learning the full language is the way to go. I've delved deeply in researching security practice of PHP forms, style guides for PHP (as in, best coding styles), and also using functions properly. I feel a lot of previous programming experience is relevant, which is why I feel justified only taking time to read about functions I'm using and important concerns such as security (XSS, CSRF, etc). Luckily forms aren't too difficult - its just making them secure which can be the difficult part. To sum it up, I'm learning as I go. I'm not an expert, but I have an idea of what I'm doing. I'm making sure to take care of the important things such as security when I'm working with something like this.
I have the feels now. Look bro, reddit is a hivemind, once people started seeing downvotes they all gangbanged on your shit. I did it because I was bored but this time people have a point. If it was a library to convert PHP to JS I wouldn't give a shit if it had security issues. But you're making A MOTHERFUCKING CRYPTOCURRENCY with bad practices. Don't get discourage on releasing shit on the future, just know we're all bad people and we will mock everything that doesn't conform to the last unwritten rules of the PHP flavor of the month best practices. It's ok to do drunk C style coding and all. But, once again, YOU'RE MAKING A MOTHERFUCKING CRYPTOCURRENCY and advertising it as a real product. You could even do real life damage, imagine if some naive kid just puts his whole savings on this and some 12 years old steal everything because your code is shit. There were people commiting sudoku over the bitcoin scandal. Don't ignore your father's work (Charles). Just delete this entire shit and start again. Come children, http://phptherightway.com. We have facades.
Link: http://www.concrete5.org/
Right... There are some important points to what I've said that are somewhat "hidden". For example, the people who do Java in PHP __do__ get job done. I particularly think it's not a good practice, but people do it because it's a way they can get job done. It's just that they could be doing so much better. I also have my &lt;other language&gt; accent while coding in PHP too. I do it mostly from my JavaScript, Lisp and TCL knowledge (the other dynamic languages I've mostly used). I've read the PHP manual once, but I don't remember many of the details. I need to re-read it. It boils down to using your tools effectively. It's not an easy thing to do. And you made me remember that I've forgotten to write about something. In writing PHP, your target is usually to build a web application. To build those, there are more tools than just PHP. Knowing to use the other stuff together with PHP tends to be as important. My take on programming is that it isn't so much about the language but about the properties you want your programs to have. Different languages will give you different means to do that. You gotta learn the means (the language and other tools), but you also gotta learn the ends (the thing to aim at; the ends you want to reach through the means).
You are what is wrong with the state of php development today. 
Fair play for having a go but people should not really learn from this. Firstly you really need to separate your logic from your presentation. Keep going though and never stop learning!
Well if you're a terrible programmer, it stands to reason you wouldn't have the skills to crack it either. 
Nothing in this thread shows that c-Darwin is willing, or even intellectually capable of accepting any constructive criticism. 
Few points * Get a code formatter for your blog * Fix your formatting of your code * **The problem of the display on a single page is a long continuous scrolling results. See difficulties** Well don't you have to generally scroll down and click the number anyway? So loading the results when you get down to the end of the page in my view is good for UX, saves a single click, which when viewing and browsing through threads/posts etc that 1 click can quickly turn into hundreds However, +1 for contributing :) 
That site is bad. It recommends strip_tags etc. Regarding security op should stick to my other reply. But I like that this site covers architecture aspects etc. 
When you talk about using other languages with PHP - are you actually talking about integrating these languages in your PHP code or borrowing habits from the use of these other languages? (I think I misunderstood your original point which is why my first response may have sounded odd) I started reading through the manual and I've already learned a few quirks I would have missed.
http://php.net/manual/en/function.strip-tags.php The first example from Kenji is kind of why I want to avoid strip_tags(). I currently use filter_var($somevar, FILTER_SANITIZE_STRING). It was implemented in PHP5 and is apparently very useful for sanitizing input (where needed). A lot of people think PHP is insecure because many people attempt to use it without learning about the workings of the language first(in my opinion). They don't research security or best practices - they look up code that does what they want to do and probably try to implement it. Thank you for your take on security.
&gt; There were people commiting **sudoku** over the bitcoin scandal. Do you mean seppuku http://en.wikipedia.org/wiki/Seppuku ? Nevertheless, you are absolutely right.
Well, I actually didn't specifically mention using other languages with PHP. What I did is talked about using other tools. It includes using other languages, but it's broader than that. I was referring mostly to the DBMS, web server application (e.g. apache, nginx, ...), caching system, and so forth. But as for using other languages with PHP. I only had to do that like everyone else, which is having to integrate SQL code inside PHP code. But I also mentioned in my replies the fact that I think there are good things to borrow from other languages. I surely do that.
Thank you! I will check it out. Also I'll take some time to learn Git in the near future. I hear it is an invaluable tool for development. 
I doubt it, c-darwin has ignored all constructive criticism in favour of stubbornly adhering to outdated standards. I apologise if I sounded harsh but when someone will not even take advise on board (especially when a swathe of people have stated it repeatedly) I count them as a lost cause. PHP has changed dramatically in the last few years and you need to be constantly learning. This sort of code is why PHP devs are abhorred by other devs. Not because PHP is the worst programming language in the world (it does have its quirks) but because of the amount of poor code being put out to the community by uninformed or uncaring devs. I'll happily swallow my words but first c-darwin needs to accept he fucked up and go back to the drawing board.
It's not just a problem of best practices, anyone can access any acount by just passing the id.
Nonsense. Try to use it.
&gt; Generally speaking: people who say php is insecure don't know what they are talking about. People who say this are mostly referring to the widespread dissemination of insecure methods and ideologies in the PHP community (several of which you're actually propagating in your comment here, actually).
https://github.com/ziadoz/awesome-php#php-books
sudoku is no joke
Ah, thank you for the clarification and the advice.
looks like normal PHP to me
There could be other logic to prevent that, I didn't bother looking beyond that line. The point is that line itself is horrible.
I checked this out and while they have a bunch of free videos, I wish all of it was free.
We are a big online sweets and drinks shop, by the way :)
Can you expand on your last bit "propagating in your comment"? I'd like to know what's so terrible about the post so I can learn from it, as the views expressed are more or less the same as my own.
&gt;I will give you a 15 euro gift voucher to use on my website :)... Get the fuck out, will ya.
I too would like to know, I dont think your comment was terrible, although it seems to focus mostly on storing textual content I think your comment that "Sanitizing is not needed in most of the cases" is too lax though. You still need to sanitise user content whether its escaped or not. Good comment on email header injection though. I find a lot of devs aren't aware of this, but its almost as serious as sql injection since it can effectively allow your site to be used as a spam email relay, and wreck your email reputation Also htlmspecialchars still defaults to ENT_COMPAT which doesn't touch single quotes. In most cases you should be passing ENT_QUOTES. So whilst PHP isnt inherently insecure as a language, its historic anomolies like this which makes it much more difficult to write secure code. 
It wasn't my post btw.
C5 over wordpress any day. WP code is a giant mess. 
Ah you do know that "size if the session" has nothing to do with size of the session cookie data. Session data is stored server side, not in a browser cookie. All the cookie stores is a GUID which references the session data on server. It is a fixed length. 
Session cookies are just that - they last for the browser session. What ends a PHP session is purging of the session data from the server. This is all based on expiry time - it doesn't matter they actual time of your server - the session with expire "X minutes" after it's creation. 
I think this definitely requires a "that's what she said"
Sorry, I can't help you as the question is not elaborated enough but for starters, I can tell you that the dynamic part of an URL starts with a question mark, not an ampersand. The following arguments are appended with ampersands, though. 
They're good to know, because that's how the community will code large libraries. Good idea to learn how the big boys are going to be doing it.
I didn't say it was terrible; it's just a good example of the same kind of unintentional spreading of misinformation that I was referring to. &gt; Sanitizing is not needed in most of the cases. Any input that isn't directly controlled by the developer or other implicitly trusted sources *must* be validated and/or sanitized. So, while technically true - you don't ever actually *need* to sanitize anything if you use proper validation instead - this is still a very dangerous comment to be making if you consider the intended audience. &gt; When saving this data, then just make sure that you properly escape all user input for saving it in a database. Eg real_escape for mysql The `mysql` extension has been deprecated since PHP 5.5, and will very likely be removed in PHP 7. The `mysql_real_escape_string()` referenced is also not implicitly secure, and there have been exploits that circumvented it in the past. &gt; or just use PDO with prepared statements. Prepared statements don't have anything to do with security. You were probably referring to parameterized queries here. It may seem like a pedantic technicality to point this out, but it's actually *very* important distinction, as you can still be horribly vulnerable to SQL injection using prepared statements if you aren't parameterizing your queries. For example: // BAD! $query = &lt;&lt;&lt;SQL SELECT * FROM personal_info WHERE user_id = {$_GET['user_id']} SQL; $st = $conn-&gt;prepare($query); $st-&gt;execute(); // Awww... your database just got pwned... :( // GOOD! $query = &lt;&lt;&lt;SQL SELECT * FROM personal_info WHERE user_id = :user_id SQL; $st = $conn-&gt;prepare($query); $st-&gt;execute([':user_id' =&gt; $_GET['user_id']]); // Yay, you're safe :) &gt; When displaying user input (doesn't matter if it comes from database or directly) just escape it properly with htlmspecialchars How to escape your output depends entirely on what context it's being embedded in. `htmlspecialchars()` is *not* sufficient for embedding output any old place in an HTML document. It's only sufficient in an HTML body context (between tags), and in a white-listed (see link below for more details) HTML attribute context that uses proper quote delimiters. Anywhere else, and you're XSSed. To piggy back on this point, there are also plenty of contexts within HTML that are **impossible** to embed unsafe output in, regardless of how you escape it. [Read here for more info](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet). &gt; or if you write Javascript then maybe addcslashes. This is not sufficient, and you *will* get XSSed if you do this. Generally speaking, embedding unsafe input into a JS context of any kind is playing with fire. There are only a few *very specific* contexts where it's possible to properly escape the input (see [here](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet#RULE_.233_-_JavaScript_Escape_Before_Inserting_Untrusted_Data_into_JavaScript_Data_Values)). I advise never doing this in the first place, as there's virtually always a better alternative, and in most cases, developers doing this are following poor design practices and just being lazy.
&gt; *an invaluable tool for development.* You can say that again!
&gt; I didn't say it was terrible I didn't say that you said it was terrible, it was just a turn of phrase to portray my understanding that you aren't in favor of that guys post. Ok, I actually missed the part about escaping input BEFORE entering it into the database, and I'm more than aware that mysql etc is deprecated. I use PDO. I didn't see that mysql part in the post and I totally disagree with it like yourself. AFAIC for a lot of things it should be entered into the DB exactly as was written... then, of course, you sanitize EVERYTHING on the way out. As was actually mentioned in the post I, too, use htmlspecialchars. Today I've become aware that this CAN be an issue in certain contexts, however, I write my HTML with double-quotes and have no reason to enter user input into any JS so it seems it's not an issue that affects me at this point. Nonetheless, the potential problems with htmlspecialchars were not something I had been aware of until today so it's something further for me to keep in mind and I'll probably gut my project and replace all htmlspecialchars calls with a wrapper function that properly calls the htmlspecialchars function (instead of having to remember to pass it the right params every time). PDO... yes, prepared statements with bindValue or bindParam. Obviously (to you and I) using PDO but not preparing statements where there is user input is just as pointless as doing any old mysql_query. The gist of the post, as I had read it, was "don't bother with sanitizing on the way in, but sanitize on the way out" which is my sentiments as well. The icky part of mysql_real_escape_string was a bit I hadn't noticed in the post and don't agree with, and the htmlspecialchars issues were new to me. More or less what you have said was the gist of what I thought the other post was getting-at, but apparently I can't read for shit. Thx for clearing-up the details I'd missed. I find it difficult to follow a lot of the things people jump up and down about because a lot of the time what they are referring to are situations I don't put myself in, at least as far as I am aware. It's hard to tell sometimes as some of this shit is so fiddly.
Or strip_tags *and* entifying, so you're not outputting unencoded content, but you're also not outputting messy text with HTML tags.
Sigh, do we really need this question every week? It's been answered over and over and over, and phptherightway.com is always the top answer.
you're the hero dcoin deserves, sir.
&lt;?php $key = $_GET["key"]; if($key &lt;&gt; "correct password"){ echo "error"; }else{ echo "correct"; } ?&gt;
Does your URL end with something like - .php?key=XYZ ?
Looks more like he just has "key = " instead of "$key = " in his code with that error.
It's not safe. Did you know that real "evil hackers" spend even longer than "a month" looking and learning? Imagine an evil hacker who started being evil towards PHP in the 2000s. Let's say 2004. That's 10 years, 120 months, of practice and experience they have had. Maybe they know some things you don't?
Stripping invalid input is **just as valid** as neutralizing it or rejecting it. It all depends entirely on your use case.
What about when you're working on a new application by yourself? For example, I was working on a web application by myself recently and it was a pain using TDD because I was refactoring as I went along because it meant changing so many tests. So instead I waited until I got to the first release. But from this point on, I must write tests first.
The thing is that strip tags only works with properly written markup. But browsers correct incorrect markup and interpret it different. So one could inject incorrect markup which would not be stripped, but interpreted on the client side. Got it? It's weird that people down vote because they don't know... 
How do you embed input in a script context without addcslashes? Did you notice the c? Are you aware that there are a lot of sites where you need to deal with input in a js context? Guess you are... So what are you saying ...?! Htmlspecialchars with ENT_QOUTESu is pretty good.. The point of prepared statements IS parameterized use of queries. Anyone who does bypass it with things like in your "bad" example needs to read what it is about. It's about parameters without the need for stored procedures which are actually for more complex things... Whatever. My point is that php is not insecure. Only fools write insecure code. Independent of the language. I'm not assuming that everyone is a stupid idiot and does "select from users where email = $mail and... " as a prepared statement. The would be just stupid and only a fool who does not rtfm would do this. To me it seems like you are intentionally trying to misunderstand 
They downvote because they *think* they know. When you think about it like that, it's not actually weird. Spend a little time in /r/phphelp - some of the answers provided there will make you weep for our species.
Uhhh, there isn't one?
The exact words I used was "almost never" which does leave room for certain rare cases where it might be appropriate. In the context of user supplied data it's almost never appropriate.
You got it 
This is the exact opposite of everything people at my previous job were doing. Quitting was a wise decision.
Lorem ipsum?
Test-first helps guide your design. By only testing the functionality you require (and test it thoroughly--happy path, boundary conditions, AND failure modes), you keep your API from getting too bloated. Changing your tests is just part of changing your code, because your tests are part of your code. They make sure you code does what you expect of it. But I suggest that if you're finding yourself frequently modifying tests when you refactor, you might be repeating your implementation in your tests. This is a smell of "too many interaction tests"; if you can find a way to rewrite your tests to use fewer mocks, you'll be much happier. As long as method X, with input Y, provides result Z, even your tests shouldn't care too much how it went about it doing it. This is why I try to only mock services, not entities.
&gt; How do you embed input in a script context without addcslashes? You don't. If you're trying to do this, you need to rethink your design. It's **never** necessary. &gt; Are you aware that there are a lot of sites where you need to deal with input in a js context? Guess you are... So what are you saying ...?! As I said, you never *need* to do it. Lots of sites *do* do it, but they don't *need* to, and it most often leads to them getting hacked (or being vulnerable to being hacked, in any case). There are plenty of ways to get user input inside a JS context without embedding it into the code (like AJAX responses, reading from the browser's DOM API, etc.). &gt; The point of prepared statements IS parameterized use of queries. Anyone who does bypass it with things like in your "bad" example needs to read what it is about. It's about parameters without the need for stored procedures which are actually for more complex things... Whatever. Prepared statements and parameterized queries are two different things. Parameterized queries prevent SQL injection, but prepared statements do not. I was just correcting the misuse of terminology, since it could potentially lead to unfamiliar developers using one without the other and wondering why their site gets hacked. &gt; Htmlspecialchars with ENT_QOUTESu is pretty good.. I never said it wasn't pretty good. It's perfectly safe as long as you use it in the right contexts.
[Seinfeld Ipsum](http://seinfeldipsum.com) Created by a redditor. I forget who. EDIT: Credit /u/soccal1157, https://www.reddit.com/r/web_design/comments/1tyypm/i_made_a_seinfeld_lorem_ipsum_generator_because/
/u/aequasi08, I think what I said applies to the points stated here. Here are a few constructive point by point responses: &gt; [The typical user has] no time for building an example app * We as users should make time. Most of us are benefiting commercially from this free tool, so if not for altruistic or time-saving reasons (read: the whole point of open source), we should be investing at least a small amount of time to make that tool better for our business, and therefore our pocket book. &gt; [The typical user has] no idea how to hunt down the bug * My understanding is that we as users don't need to know how to hunt down the bug if we don't have the skill to yet. Providing the app we are already building as a test bed with a description of what happened would still save setup time for whoever fixes it. &gt; [The typical user has] no idea how to insulate the relevant bit of the app that is broken (this goes in as more load on top of the maintainer of the project) * Even supplying a test bed saves time for any maintainer. That is time better spent elsewhere - fixing bugs, upgrading, updating, and building new things. &gt; ... this is...bug reports only...which makes it sound as if Laravel was in maintainance-only mode, and closed for suggestions unless the implementor provided a full-blown API * Over time who knows what tools like this could become - maybe they could help with non-bug related things. However, even if it only applied to bugs, the time maintainers save by not having to build test beds can be spent on the "suggestions" that /u/ocramius mentioned. /u/aequasi08 - is there anything you felt like I overlooked in this follow up message?
&gt; We as users should make time. Nice in thought, not gonna happen though. A lot of people simply do not have the time to do this. &gt; My understanding is that we as users don't need to know how to hunt down the bug if we don't have the skill to yet The user may not know exactly what is causing the bug, to find it, which can make it difficult to reproduce. Which also ties to the last point. All of this stuff can take a lot of time, which leads back to the first point of people not having time. &gt; Over time who knows what tools like this could become This doesn't solve the issue now, which is important. Your comments are good in a perfect world (that still somehow has bugs), but, I don't see that being the case.
Behaviour and functional testing would be suitable for this, a useful tool to implement these is Codeception: http://codeception.com/ If I know the application will change a lot, but the data that is displayed on the front-end will stay the same, I will go ahead and write functional tests. When there is any amount of refactoring to be done on lower level components, the time spent to add the functional tests will be completely justified, as the amount of manual testing is significantly reduced.
Is it even humanly possible to go a week around here without being asked to review someone's framework which brings *absolutely nothing* new to the table?
This is not how I would write code. But the people here on reddit need to stop jumping to conclusions about it being unsafe. Show an exploit, then we're talking. Some safety critical software is still written in C for gods sake. 
And none of them you will not be able to put into practice. You've tried :) That they are not an eyesore, I have them in a short time fix.
Create a plugin called hello_world. Depending on the CMS inject it somewhere to display it?
**posted a comment on your article: ** Ok, as we know this is ideal. But that is now how we think. When you got an idea, you want to test it fast (prototyping). Here you don't want to bother with tests because it is code that potentially will be dropped. So in effect, we always think of tests after having written functional code. So TDD IMHO is a dream, or could be applied in a wealthy big company. It is not because people are stupid if they do that: It is just the way human think &amp; act. that's the way it goes. The reverse thinking "write test first" approach never worked because of that. So that kind of writing is about making the dev guy feel guilt or shame. Wrong target. Now, I think that the problem is about how hard it still is to implement test code later on. The problem is still with the test tools, these are the guilty ones. (besides, codeception is the best in the php arena) 
Why do you dislike symfony? To complex? Or you have some objective reasons to dislike it? Just curious.
why not I'm curious
&gt; Some safety critical software is still written in C for gods sake. Isn't PHP written in C?
It didn't suit my needs when I needed to choose a framework. Laravel suited my needs better. I use the majority of Laravel and I found it super easy to et on with. Teaching it to other colleagues was also apart of the choice of framework. Even after a few days I felt a lot more comfortable with teaching it. 
I suspect you have newlines in field values. fgets treats those as EOL indicators. Try [fgetcsv](http://php.net/manual/en/function.fgetcsv.php) with correct delimiters and escape chars set. A good hexeditor can help you see what's going on.
An alternative is to attach NamespacedResourceResolverInterface to each config class so that they implement two interfaces instead of just one (ConfigInterface). I'm ok with the boilerplate config, all that explicit logic and configuration is happening right there with minimal effort.
To add to that: depending on exactly which OS the code is running on vs. which OS the CSV files are generated on, and depending on exactly how complete the documentation is, [auto_detect_line_endings](http://php.net/manual/en/filesystem.configuration.php#ini.auto-detect-line-endings) may be of use to you.
Just to note - unless you are uploading the CSV to a PHP script via a POST - upload/post_max_size have zero bearing on this. PHP file methods aren't limited by any PHP.ini settings/limits. More than likely you are hitting an EOL - or you are using PHP 4.3 or lower? (The manual page mentions a 1024 line limit for prior 4.3 versions?). 
That was a bit of a stretch because Im stuck. Im creating the test csv file programatically in PHP using file_put_contents, and Im not putting anything in the string im parsing that should cause EOL. Im totally stuck(!). I've also checked with vi and cant see anything.
Very cool ... 
Do not judge a CMS based on how it output something as basic as "hello world". Actually take a task or two at hand for the project and try to get it to work well. That will give you a good feel for the CMS/Framework.
I really like the direction of this. It's true a lot of "check out my new FW!" posts come through here, but most of them are fatally flawed and impossible to take seriously. I would say this is one of 2 or 3 new frameworks I've seen in the last year that a sane person might consider using --- once it arrives at a stable release, of course.
I would tend to think that the breadth of information out there on PHP is so vast and so reasonably complete that it only takes a search or two get you most all the info you'd need. With great sites like PHPtheRightWay and others you can chase near endless link chains without having to revisit the Googles. But then I may be completely off base LOL!
Alternatively, you can deploy smaller releases several times a day. Smaller patches are easier to understand (and review), and releasing often will test your deployment process more throughly (more use will hopefully reveal more bugs/edge-cases). In practice, the releases that give me problems tend to be big merges or those with backwards-incompatible database changes.
It looks like a trend with programming languages in general; an initial burst of interest that gradually levels out over time. Try adding java to the graph to see a very similar trend (albeit, much larger interest in general). This will correspond to major version releases as well. Also, as mentioned by PHP-Dreams, the much greater amount of information for how to do things in PHP probably contributes to this as well.
I think a better metric would be the [TIOBE Index](http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html). If you scroll down to the first graph, PHP's decline seems to have started around ~2009. You should also consider the disclaimer, quoted below: &gt; The ratings are based on the number of skilled engineers world-wide, courses and third party vendors. Popular search engines such as Google, Bing, Yahoo!, Wikipedia, Amazon, YouTube and Baidu are used to calculate the ratings. It is important to note that the TIOBE index is not about the best programming language or the language in which most lines of code have been written. The index can be used to check whether your programming skills are still up to date or to make a strategic decision about what programming language should be adopted when starting to build a new software system.
Job security for us PHP guys!
Ignored all constructive criticism? Someone submitted a PR to "fix" his security vulnerabilities by deleting his 50k lines of code in the project. Personally if someone did that to my project I would just leave the project as dead and do something else altogether.
&gt; Some safety critical software is still written in C for gods sake. Are you implying that C is unsafe?
Can also be accessed with: getenv($varname); http://php.net/manual/en/function.getenv.php
Is this method good for from a security perspective?
Why not have the details in a file that's outside the server's document root? That way they're not readable unless somebody gets access to the account/server...in which case you have bigger problems already.
You'd have to elaborate. Is it "good"? Yes. You want to be able to access those if needed. Unless you're vulnerable to some kind of security exploit, no one is going to have access to this. If you are vulnerable, access to these values are the least of your problems.
The server config file is still plain text and has no advantage over just putting the credentials in a PHP file outside of your web root. 
if you want to move forward with whatever it is you're doing, set disable_functions=phpinfo in phpini in production and it cant be executed
Also, if the session timeout is longer than the temp directory cleanup frequency, then the session file could be deleted before you expect by the temp file reaping processing. 
lol, good thing you got out maybe send them this article :)
&gt;No sorry it is illegal to crack into computers. Obviously there is none. Now fuck off.
I'm also interested in this. My general thought on it, though, and a possibly mistaken one at that, is that if your server is compromised to the point of someone being able to view / edit your files, you probably have other and bigger issues.
&gt; It does depend on the PHP configuration. Lets say session.cookie_lifetime is set to 0 (until the browser closes before the session clears) if you hit the maximum memory cap that the server is set to, would that cause the session to clear on it's own?
That's top notch
The default handler uses file storage so memory wouldn't factor into it. If the disk space were to run out you might have issues saving the session that *could* clear the session. If you are using an alternative handler (such as memcache) then yes reaching the memory limit could cause that. In the case of memcache the memcache server would remove old data in favour of new data if it's configured limits were reached. 
I read this as &gt;I'm too lazy to do my homework, why aren't you doing it for me
INB4 "Tens of dollars stolen with cryptocurrency code exploit"
You should be interacting with an actual MySQL database. Not mocking what the response should be from the database. Furthermore, I also test APC functionality from within unit tests and do not have any issues. Are you sure it's APC?
Command line PHP doesn't seem to like having APC enabled. I've done some googling and it seems to be a known issue. Also, I remember what it is that it breaks - it's not MySQL, it's composer.
my thoughts exactly! 
Pretty sure OP just had a brainfart whilst typing. 
A unit test should test a *unit* of code, without testing its dependencies. Redis, mysql, apc are all dependencies. If you would like to test the interaction with a dependency you should look at integration testing.
Thanks for the reply. This is the library that I'm working on: https://github.com/robertmain/UniformCache. I'm a bit tired just now so I might re-read your reply tomorrow when I have a bit more energy :)
So by that token, should I just test the parent caching class and not write unit tests for my adapters in the mean time?
When most people inquiring are pointed there, they read and learn then go Google specific things they find more so than generic searches. And if you can't remember specifically what you're looking for, yeah, you can re-reference then lookup what you may want.
This is wrong, wrong! We are taking about PHP sessions here - using $_SESSION[] - the data always saves to the server. Saving session data to the client would allow anyone to modify their session state - massive security flaw. PHP can associate sessions either as a cookie (session cookie with optional HTTP only) or passed around on the querystring (which should be avoided at all costs). In either case the only piece of data the client holds is the GUID back to the session key - nothing more. 
The first company I worked for released on sundays (not every sunday) this gave us a chance to catch live bugs before Monday(best thing was we got the time back in the week (sometimes double)) we would hot fix on the Tuesday after rolling back the components with errors on the sunday. This worked quite well as it meant very little(mostly no) interruption to our customers. The company I now work for release to Live any day of the week meaning we are constantly firefighting Live issues often the customer finding major issues that should have been picked up in testing (we have no automated testing at all so its every release is a massive risk (I am working to change this)), this is just awful as we get angry customers, which introduces scope creep as PM try to keep customers happy by giving them thus increasing the cycle of deployment issues. Having read the article the sunday approach is best imo, sure we have to work a few hours on a sunday now and then but we got it back, the customer rarely experienced massive issues and developers where happy enough to take extra time off on an appropriate day (quiet afternoon, going hope early). 
 var_dump($_SERVER);
You'll find the same strangeness with [Javascript &amp; JQuery](http://www.google.com/trends/explore?q=wordpress#q=javascript%2C%20jquery&amp;cmpt=q). I think Google Trends is kind of fishy.
Using WordPress and being able/wanting to program are two different things. There are lots of searches on iPods, but very little on iPod repair manuals.
More importantly, your credentials are still stored in plain text. You can not get around storing your credentials in plaintext. Though there are rare exceptions to that statement they are not worth mentioning. Furthermore, it is generally best practice to decouple your server environment from your code as much as possible. If you setup your code to make it reliant on specific server variables, you are making your code more obtuse and harder to move. Updating, upgrading, or switching your server is going to be more difficult. There are many reasons why everyone in the industry does not set the mysql login via Apache configs. I would strongly recommend you do the same, unless you are in a truly novel situation.
That's what we're aiming for. Everything will go into a merge request and master will be automatically deployed on successful build. I'm quite looking forward to not sitting through `cap production deploy` any more :-)
Seriously. I work for a company who just cranks out wordpress sites like a sausage factory cranks out sausages. Thankfully, I moved out of "the web development", where the "developers" run a script to set up a wordpress site in one click.
We used to do continuous deployment on a rather large project, but then the company got bought out and they have scheduled releases. Doesn't matter if there's a bug, you wait until the next scheduled release. And of course, they're at 9PM every other Sunday.
From a security perspective how you access it doesn't matter. More of an issue might be that you're storing sensitive data in a collection that is often dumped to output for debugging purposes.
And has the downside that the webserver user, not the PHP user, needs read access to it under a multi-site configuration where each site's PHP process pool runs as a separate user.
Using Laravel components in the start was actually my initial thought, but I disagree with too much of Laravel's code in terms of tight coupling, method naming etc. so I ended up dropping it. I agree with your opinion on Twig, and I could easily make twig integration a separate package due to the fact that the templating is only loosely coupled. However, not including a templating engine and asking the end user to implement the interface properly is asking a framework user too much. Truth be told, the main reason Twig is included is that Flask was my main inspiration, which includes Jinja in a similar fashion. I'm not sure what there is to benefit from forking Laravel and trying to clean up some of the mess rather than just starting from scratch.
True, but then you risk someone implementing the ConfigInterface expecting it to work, but then it calls an undefined method. The way to "solve" this would be to inject the same object twice - once type-hinted against ConfigInterface, once against NamespacedResourceResolverInterface, but that just sounds ridiculous.
Thanks! Out of curiosity, what are your other 1/2?
Promoting your blog with extremely basic PHP won't find a good response among this subreddit, which is pretty much entirely PHP professionals. edit: I've just gone over your previous submissions... please stop.
Thank you for your comments. I'm trying to guard data collection put in some blog it to myself. At the time I want to find out what people are saying or basic curiosity, I will say that I left in blogs. In fact, I have some information, but what is now, it is just something that starts, but thank you very much, that indicate the status of a recognized community info.
That depends on how the server is configured (and if it's Apache, which MPM is being used). 
Try not to promote illegal content.
Thanks, I'll look at that later.
Sure, but most configurations run the webserver under a single user.
Awesome stuff, like always! Why this: $websocket-&gt;on('open', function … $websocket-&gt;on('message', function … Instead of: $websocket-&gt;onOpen(function … $websocket-&gt;onMessage(function … ? If there are only 6 events, that makes the API more explicit (no need to read the documentation). Also, why is there a `Hoa\Core\Event\Bucket` passed to the callbacks for `close` or `open` events? (given there is no data passed around for these events)
1. The `on` method can be injected through a trait. 2. We can add listeners (through a child classs or at runtime) without adding a new method. 3. It offers a flexibility than `onOpen` &amp; co. do not offer (obviously). Why using `Hoa\Core\Event\Bucket` if there is no data`? Because we also have the source of the event and maybe, in the future, some other informations. So it adds flexibility, extensibility and simplify maintenance (prevent BC breaks for example).
How does this compare with rachet http://socketo.me/ &amp; autobahn http://autobahn.ws/js/ ?
This can add an additional layer of security. For example, you store encrypted DB credentials in a regular PHP file, and the "decryption key" is stored in your Apache server as an environment variable (and retrieved using $_SERVER['db_key']). If your app code leaks (i.e. via web server backup dump), the DB credentials are still protected by the key (and the adversary can not read your DB data even by installing hers rogue app on the same webhost as she doesn't have the actual DB credentials).
Well, Autobahn.ws/js/ is a Javascript implementation, not a PHP one. However, we use the [Autobahn Test suite](http://autobahn.ws/testsuite/) to test our library (in terms of respect regarding the standards, but also the performances etc.). About Ratchet, this is an “extension” (a component) of [React](http://reactphp.org/), whereas Hoa is a fully decoupled library. It has dependencies to other Hoa's libraries but you can remove and replace them by others. An interesting project would be to create a bridge between Hoa and React. In this way, it will be a direct “competitor” to Ratchet, which is not the case so far. I don't talk about other Ratchet's dependencies that might be important regarding number of LOC and sub-dependencies (like Guzzle which requires `ext/curl`), but since I am not an expert, it remains an open question.
Store the connection settings in a file (ini, php, whatever) outside of your webdocroot. E.g. set apache to expose myproject/public and place all your code and configfiles in myproject/config, myproject/src etc. This reduces the chance of the files being exposed by apache misconfiguration. If you want, you can still use apache's environment variables to differentiate between environments (e.g. set a APPLICATION_ENV setting and use that to fetch/process the correct settings file).
Is there a way to have Symfony2 continue a script after sending output to user? I need to send output ASAP, but have some db stuff to do, that users shouldn't have to wait for.
[The kernel.terminate event](http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate)
Looks like that's it. I kept finding some process information or manual solutions. Thanks!
Will be removed in few days ;-).
Why composer? why increase dependency hell with it, why in PHP? why it's not written in C as a PHP extension?
I heard somewhere that Google knows about them, maybe ask there..
Is there a php library for handling advanced search queries like this: name:rick age:5 birthday:"1-4-2009" city:"los angeles"
I expect this is good advice, I didnt know about gfetcsv() when I started. When I process the file I am using eplode and I use trim to clear escape characters (carefully, because string processing slows down the processing which I need to happen fast). However, the line cut off is happening before I start doing that. With fgetcsv() I assume all that stuff happens in a block of C and will execute optmially. I will have to try it out.
code added
&gt;This is a safe, non-judging environment for all your questions no matter how silly you think they are. Way to ruin the thread. You could probably figure all of these out with a search engine, but maybe the people asking questions here found conflicting results or actually not any satisfying ones at all. Show some respect and don't assume they are lazy.
&gt; which is pretty much entirely Laravel disciples :)
Maybe you can create a UI for the users to select their criteria?
Any book for advanced php that you could recommend?
&gt; Would this work? Short answer, no. `substr` is for finding strings, it doesn't do... whatever you're trying to do there. Some sort of regex, perhaps, but that isn't exactly regex. You could probably do some sort of `preg_match` on it, but I hate regex because I'm bad at it, so I'll leave that as an exercise (probably a test of google-fu).
Blatant error in your code: Incorrect usage of substr() - the second parameter (start) must be an integer. The value you've used in the second parameter of substr() also looks incorrect. It looks like you're trying to do a regex, but the specified string isn't a valid regex (no delimiters, incorrect regex for match on the attribute value). This is a horrible solution and is very specific. It requires that the src attribute is the first attribute, and is always immediately followed by an alt attribute. If you're trying to be able to parse any HTML document I would either: * Use an XML / HTML parser * Write code that pulls out &lt;img tags, then iterates over those to find the value of the src attribute
Why dont you write your own? Why dont you do it in assembly?
Generally, most people I've talked to started in the "roll your own" framework mindset and end up borrowing enough ideas from other frameworks that they eventually wanted to switch. Personally, I'd still use something small like Silex even for tiny applications if there's any sort of maintainability that needs to be done. Maybe a good place to start is [Create your own framework... on top of the Symfony2 Components](http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1) as it will give you a deeper insight into the magic that happens within the framework while still using a good bit of community tested code.
I am admittedly a below mediocre PHP user. I was attempting to alter some code from a WYSIWYG blog engine. function PageDesc(){ $post = basename($_GET[name]); $text = file_get_contents("posts/$post.txt"); $start = strpos($text, '&lt;p&gt;'); $end = strpos($text, '.', $start); $paragraph = substr($text, $start, $end-$start+1); $paragraph = html_entity_decode(strip_tags($paragraph)); echo $paragraph;} The above was being used to pull a paragraph from the the article to use as a description. I was trying to do something similar and find the first (and only) &lt;img src=" and the rest of the img tag after the url for the outer parameter. I agree it is very specific, but it is for my personal blog and that's how I always order my img tags 11/10. I will look into a parser, but I was trying to just use the code I had available (be lazy). Would it work if I set a fixed length/format for my img urls, then I could 1. find the img tag, 2. move forward 10chars (&lt;img src-") and 3. end at (previous value + "x"(the img url length))chars? 
For CSS: - http://cssguidelin.es/ - https://smacss.com/ I also found [htmlcsstherightway.org](http://htmlcsstherightway.org) and [jstherightway.org](http://jstherightway.org) via Google. The latter looks okay but the former looks badly written with little content.
It concerns [`Hoa\Socket`](https://github.com/hoaproject/Socket). There is a plan for libuv but feel free [to discuss with us](https://github.com/hoaproject/Socket/issues/new) (or [without using Github](http://hoa-project.net/Community.html))!
&gt; Something doesn't add up here
This is actually good news!
Is there a command to flush php5-fpm's file cache(if there is such thing)? I'm using capifony to install a symfony2 app and php is looking for a file in a directory that i've deleted. I think this is because capifony uses's symlinks but when i "ls -l" through every directory in the current release i don't see any symlinks to the deleted directory. I've been banging my head against this for hours because i'm so damn close to deploying my app! [SO question](http://stackoverflow.com/questions/25838566/flush-php5s-class-cache). I've tried restarting php with 'service php5-fpm restart'
Does this help: http://php.net/opcache_reset?
that's right. i'm looking at it. thanks.
&gt; Is it worthy to learn pure PHP when you have a good command of commonly used frameworks? Why? I am not sure what do you mean with pure PHP. So I will assume you are talking about programming in PHP without using your favorite frameworks. If I am correct in my assumption then yes you should learn more about pure PHP. Why? So that you know when to choose array_merge or a + operator to merge two arrays. Some one ITT asked [this](http://www.reddit.com/r/PHP/comments/2gfxts/php_moronic_monday_09152014/ckir27i) and you have two responses, php.net/fastcgi_finish_request and http://symfony.com/doc/current/components/http_kernel/introduction.html#component-http-kernel-kernel-terminate, and if you were good with pure PHP you may choose one over another. If you were only confident with Symfony you might end up using just the Symfony component which may be an overkill for your situation. Just my 2 cents.
have any idea if i issue that in the command line(php -a) if it will affect the process nginx is using?
I think you're right on both counts. I think preg_match can do it, and I think regex are a pain in the ass. But I'm going over the documentation now and I think I can make it work. Thanks for pointing me in the right direction!
Why not use a simple regular expression: &lt;img[^&gt;]+src="(?P&lt;src&gt;[^"&gt;]+)" here's an example: function PostImg() { $post = basename($_GET['name']); $text = file_get_contents('posts/'.$post.'.txt'); if (preg_match('/&lt;img[^&gt;]+src="(?P&lt;src&gt;[^"&gt;]+)"/m', $text, $regs)) { echo $regs['src']; return true; } // no img src found return false; } A benefit to this, is that you're taking for granted that your image tag will always be &lt;img src=... where as that might not always be the case! my code will still match if the image tag is like this: &lt;img height="50" src=...
[Spiffy](https://github.com/spiffyjr/spiffy-framework)! I forget what the other one was called ...
But you shouldn't, which is why kernel.terminate exists instead.
Can I ask how this project compares to [vfsStream](http://vfs.bovigo.org/)? I actually thought it was the same project at first, given the name similarity.
There are times where I have found the session to be stored directly in the cookie rather than a token being passed to the cookie.
so in this example $regs['src'] is the string between [&lt;img src="] and ["&gt;] ? Am I understanding it right?
that is correct. This can also be used to match multiple images in the same text as well.
Because you included the "m" at the end? I'm trying to read what I can find about regex, but it's a bit overwhelming when you come from primarily html/css with only copy/paste php experience
Saw a guy commit sudoku on the train, it haunts me to this day
Use a message queue for this kind of tasks…
That's great advice, thank you! 
The reasoning behind this implementation is explained here http://thornag.github.io/blog/testing/2013/11/05/mocking-filesystem-with-php-vfs/ (together with credits to vfsStream). The main rationale was to create something better tested, structured, maintained in composer etc. At the time vfsStream looked rather abandoned.
actually that was a mistake! The m flag basically means "^ $ match at line breaks" while i'm not using the ^ and $ So that could be removed... maybe this will help: &lt;img[^&gt;]+src="(?P&lt;src&gt;[^"&gt;]+)" Match the characters “&lt;img” literally «&lt;img» Match any character that is NOT a “&gt;” «[^&gt;]+» Between one and unlimited times, as many times as possible, giving back as needed (greedy) «+» Match the characters “src="” literally «src="» Match the regular expression below and capture its match into backreference with name “src” «(?P&lt;src&gt;[^"&gt;]+)» Match a single character NOT present in the list “"&gt;” «[^"&gt;]+» Between one and unlimited times, as many times as possible, giving back as needed (greedy) «+» Match the character “"” literally «"» To be able to match multiple images in the same text, you'd simply change the preg_match() to preg_match_all() then run through them in a loop: function PostImg() { $post = basename($_GET['name']); $text = file_get_contents('posts/'.$post.'.txt'); preg_match_all('/&lt;img[^&gt;]+src="(?P&lt;src&gt;[^"&gt;]+)"/', $text, $regs); foreach($regs as $matchNumber=&gt;$match) { echo 'Match number: '.$matchNumber.' img source: '.$match['src']; } } *fyi, i'm not testing this at all, I'm just typing it all right here into the text box*
I'm looking for a CMS, preferably built with laravel that I can develop with. Any suggestions?
CLI and other processes (FPM or mod_php) have different caching sets usually, so you will need to flush the cache from inside the process you need cleaned out. 
Why was it withdrawn?
How about [October](https://octobercms.com/)?
I like the idea of using ORM, but every ORM I saw seemed complicated, specially being built with design patterns (which I have yet to learn anything about) so, just by looking how most ORMs were being instantiated, initialized and assigned values for basic CRUD operations, as in this example: $blog = new Table('blogs'); $blog-&gt;title = 'I am new blog title' $blog-&gt;content = 'I am content'; $blog-&gt;save(); I created a class that allows me to do just the above. But I have a problem with it. First this is how the skeleton looks. &lt;?php namespace foo/bar; class orm { private $db; function __construct(pdo $db) { $this-&gt;db = $db; } function save(){....} function create(){....} function delete(){....} function read(){....} } As you can observe, it is as simple as it can get, but since I am injecting the database resource though the constructor, I am forced to have to give the class the PDO object during every instantiation. As seen in this &lt;?php // BlogModel.php namespace Model\Blog; use \foo\bar\orm; class Blog { public function showAll() { $db = new orm(new PDO()); &lt;-- this is the problem } } The problem here is that, I am wandering what design pattern is good/used, along with a simple example on how to hide the ORM's dependency, so I can use it without giving it the PDO object every time. My expected result would be &lt;?php ... public function showAll() { // any one of these three will do. As long as I don't have to provide pdo object here. $db = orm::table('blog'); $db = new orm()-&gt;table('blog'); $db = new orm; $db-&gt;table('table') } ... 
Can someone tell me, step by step managing project with php? Like planning etc but more specific? Edit: To be specific, I like coding but i am bad at project management, any suggestion?
October looks very nice. Should I be worried that it's still in beta?
I agree on the very nice part, but I'm not tracking its progress too often to tell you how production stable it is. It looked solid to me. A bigger concern of mine is that my clients have no effing idea how to use it and that was even before I started explaining markdown syntax :)
What's in $header?
See the discussions: http://www.serverphorums.com/read.php?7,1024133
I typically use the singleton design pattern for db objects. This way you just have a single instance which can be called when needed. http://www.phptherightway.com/pages/Design-Patterns.html
I have [heard all the evils things about singletons](http://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons) before I even knew what design patterns were. So, I am hopping for a better SOLID implementation. 
Elasticsearch is the only good answer nowadays. 
The technical term is SAPI. Each SAPI has its own cache.
This is a pretty classic problem. One way to solve is with a factory class. namespace Foo\Bar; class OrmFactory { public function __construct(\PDO $pdo) { $this-&gt;pdo = $pdo; } public function create($table) { return new Orm($this-&gt;pdo, $table); } } So now you do: $ormFactory = new OrmFactory(new \PDO()); ... $orm = $ormFactory-&gt;create($table); But now you're thinking. Shit. Now I need a global instance of OrmFactory. I'm right back where I started. This is where you need container. I prefer to think (and call) my containers Applications, whose purpose is to take your de-coupled components, and couple them in an opinionated way. namespace Foo\Bar; class Application { protected $pdo; protected $ormFactory; public function __construct() { $this-&gt;pdo = new \PDO(); $this-&gt;ormFactory = new OrmFactory($this-&gt;pdo); } public function getPdo() { return $this-&gt;pdo; } public function getOrmFactory() { return $this-&gt;ormFactory; } public function createOrm($table) { return $this-&gt;ormFactory-&gt;create($table); } } And now you'd have. $app = new Application(); $orm = $app-&gt;createOrm('foo'); This is a roll-your-own container, but there are many wonderful container classes out there, Pimple being the most straightforward and canonical.
Wrapping `foo()` would be your simplest option, but you can also get a closure of any function using reflection, e.g. $rf = new ReflectionFunction('foo'); $func = $rf-&gt;getClosure(); $func(); //executes foo 
I have no idea if this is even allowed but here it goes. I wrote a wanna be login system just for practice, I'm looking for somebody/anybody to look over it and point out stupid stuff I did. [Here's the link to Git.](https://github.com/JunkyPic/loginSystem)
You need an IoC container. It keeps track of class instances, in this case the PDO instance. Using dependency injection with the IoC container you only have to instantiate your PDO class once. I'm not the best at explaining things, but if you have a spare $9 you can sign up for laracasts and he actually creates a simply IoC container: https://laracasts.com/lessons/the-ioc-container 
I would suggest making the deprecated call the wrapper around the new call not the other way around. Plus, depending on policy you can also emit a warning or notice when calling the deprecated version.
Pure Dependency Injection ftw https://github.com/rdlowrey/Auryn
This doesn't really help the OP, as he'd have to replace all the uses of `foo()` with `$func()`, and could just as easily replace them with `bar()` instead.
Like /u/katharas suggested, the generally accepted best practice here is to deprecate the current function name, make it point to the new function, and slowly replace all old function names to the new one: /** @deprecated Use bar() instead. */ function foo(/* ... */) { return bar(/* ... */); } function bar(/* ... */) { // Old logic from foo() goes here. }
It's better to not use terminate event for that because you will still hold the fpm worker in hold for your DB stuff... I would instead use queue (RabbitMq) or any other messaging solution. Or you if it requires only inserting/updating data without receiving any feedback from DB then you could play with async queries, which in any other language that supports threads would be the only logical way to go in this case
I don't remember the name exactly, try to google "sara golemon php internals book", it's a bit outdated though but still after reading it you will understand internals pretty well. Also Nikita Popov's (aka nikic) blog
Symlinks are cached in an FPM cache. To clean it you need to call opcache_reset() using FPM which means you should put a php file with this call and call it using nginx (via curl for example), this way you should get into the right caching set and clean everything there.
Thanks. I have heard a lot about IoC containers. I didn't know the overall concept behind them was to provide classes with dependencies. That means it's a very important design pattern. I will check out the laracast. I hope they don't teach only the 'laravel-way'. 
The RFC as it stands is a (arguably bad) compromise that would lead to confusion. It would honestly be better to implement fully strict typing and introduce an optional 'strict mode'.
Wow, this is a very, very good idea. I like it. I could re-write my framework based on this concept. I don't know what design pattern this is. Is it the delegation? or is this what you referre to as IoC container? 
Yeah the videos are all for Laravel, hence the site name. BUT the videos are really good and go at just the right pace, and do help to show concepts that you can apply to non-laravel projects. He has a couple videos on dependency injection. And if you just go through the "I want to learn" part of the site, you can grab ideas on stuff to look up elsewhere. 
PHP is weakly and dynamically typed and so IMHO scalar type hints don't make a lot of sense unless function overloading is added in the same time.
This is an IoC container. I purposely did not use the term because sometimes peoples eyes start to glaze over with jargon. A few simple class examples can demonstrate the concept. You should check out [Pimple]( http://pimple.sensiolabs.org/), which helped me learn a thing or two about dependency injection and the inversion of control container pattern.
Unfortunately there's no `function_alias` like there is `class_alias`. Best you can do is this: function old() { return call_user_func_array('new', func_get_args()); } function new() { // do your real shit }
There's a lot of variables and vagueness to that question. Could you be more specific?
At least I can work around something like '0' == 0 by using a strict equality (===). In fact it's become something of a good practice to use === by default. What do I do when I really don't want to accept `foo('0')` in a function that's hinted `foo(int $bar)`?
I'd mock the adapter interface for unit tests, and then use a :memory: SQLite db for integration tests.
I don't follow, sorry.
Looks good. I should try it out in something...
&gt; What do I do when I really don't want to accept foo('0') in a function that's hinted foo(int $bar)? You wouldn't be accepting it. It'd be auto-cast to `int(0)`. You'd have to check for strings before you call the func.
&gt; scalar type hints don't make a lot of sense unless function overloading is added in the same time. Why? Runtime complexity is what type-hinting reduces.
I didn't know about `class_alias`, that's cool. If there were a `function_alias` that would be ideal. I wonder if I could propose that for 5.7?
&gt; Runtime complexity is what type-hinting reduces. Can you elaborate?
A common feature of loosely typed languages is f(x) -&gt; f(y) without restriction. x can be a class/object or a scalar/primitive. f(x^1) -&gt; f(y) f(x^2) -&gt; f(y) Implicit casting is performed or the datatype is wrapped up and ignored. This is the most common form of error in a dynamic language. Every single scripting language suffers these errors. Adding type hinting (hinting to the compiler what type it will get) means the compiler now, will only accept that input type as a part of the function signature. function(&lt;type&gt; x){ ... } f(x^1) -&gt; f(y) f(x^2) -&gt; error 1 Path of execution is blocked. If you add method overloading in the same namespace, you open (back) up more paths. f(x^1) -&gt; f(y) f(x^2) -&gt; f(z) 
Then what you want to have is static typing in php and not scalar type hints.
Has anyone used [RedBeanPHP](http://redbeanphp.com/) before? Is it ActiveRecord or DataMapper or something else? Can you compare it to Doctrine? If you work with Symfony and build big enterprise stuff and *don't* like Doctrine what do you prefer? **Disclaimer:** I think Doctrine is pretty awesome despite its flaws and I've built some big stuff with it tho not highly trafficked enough that it became a major bottleneck. Ran into some people lately who don't like it and can't quite decide if they know what they are talking about.
Modern implementations of Lucene these days are ElasticSearch and Solr with ElasticSearch appearing to be the winner at this point (though I've only used Solr).
Is there any benefit to using call_user_func_array over say just this? function old() { new(); } If the logic was the same, you would I think expect the same parameters, so what's the benefit? I've been coming back to php and am genuinely curious!
&gt;Core is NOT a framework, Core is a toolkit. If it looks like a feature-sparse duck and quacks like a feature-sparse duck...
Yeah that goofy namespace stuff, and other things like it, is the reason I don't use any hoa code
&gt; PHP (Status: Withdrawn (again)) That looks like Lisp.
This looks a lot like a framework. Also, no vendor name in the namespace is means it doesn't meet PSR0/4 standards.
People stopped trying to do things from scatch with PHP and just pick up Wordpress instead.
Some functions don't use specified arguments and instead use the ```func_get_args()``` function to access all arguments passed to the function. Hence you can't just have ```old($arg){ new($arg); }```. Since ```func_get_args()``` returns an array, that can't be passed to ```new()``` either since it would receive an array rather than several individual arguments, hence ```call_user_func_array``` is useful for calling a function and have an array of arguments injected as arguments. Hopefully that made sense.
Well, see, the problem in your example, is the presence of `(int)`. That's not good. That's a hard-cast, which means that it explicitly converts without **ever** failing, by design. So it's quite funny that you talk about validation, using a brute-forcing operator like that. And that's precisely what we want to be discouraging. `(int)` hides errors. Instead, if you simply pass the original value, it'll work when the data is valid (yay!). But if the data is invalid, and can't safely be cast to an integer, it'll raise an error. Way more safe than `(int) $data`. And shorter too. That's precisely why I think that strict casts are a bad idea. It'll encourage defensive programming by explicit casts, which will actively mask bugs that would otherwise be obvious with implicit casts...
&gt; There are many reasons why everyone in the industry does not set the mysql login via Apache configs. I would imagine that has more to do with portability and the path of least resistance than anything.
Not true....a local file inclusion vulnerability could be used to load the file if the web server user has even read access to it. They wouldn't need actual server access for that. It would be difficult to find, sure, but not impossible - especially if you were able to browse around the application source and find where it's accessing that file.
Damn... very thorough answer for such a trivial question, bravo for remembering things like that. I can't wait to seriously get to use 5.6 and play with splats. ``` new(...func_get_args()); ``` That's how it **should** be done.
I'm not sure which distro my client is using, but once I switched to storing the session data in a file and using a key stored in the session the session stopped clearing itself so I'm going to assume it hit the maximum memory cap and automatically cleared itself (basically working on a proxy which parses a lot of urls)
Hello, For my Monday question I'm curious about api library design. How would you structure a library that will implement many functions. For example a rest-ish api has 100 endpoints and I wanted to write a library to support them all. Bonus question: any examples of 'good' web APIs to emulate? I have heard twilio was pretty neat, any others?
I've edited my question, sorry.
If the function you're "aliasing" has no arguments, then yeah, this would obviously be simpler. But if you have more args then it becomes more unwieldy and then you're doing stuff like this. function old($username, $password, $hostname, $database, $port = null) { return new($username, $password, $hostname, $database, $port); } `call_user_func_array` with `func_get_args` lets you avoid having to think about the arguments at all. ALL of the arguments get passed to the "parent" function.
Please - I would love to see this. I doubt it's the case - sorry to say.
Thank you!
Maybe someone could add this question to the [FAQs](https://www.reddit.com/r/PHP/wiki/index#FrequentlyAskedQuestions)?
Never mind that there's rarely a good reason for overloading operators. It typically leads to confusion in code. Assume Python, which will allow you overload almost every operator: * Addition (to other lists) and multiplication (by integers) is overloaded on lists. * Addition (by string representable objects), multiplication (by integers) and modulus (with iterables for formating) is overloaded on strings. a*b # what is this? Often times, you'll have to inspect (visually, mentally) when you see two objects interacting in this manner. Are they numbers, strings, lists or some other object that'll act wonky? I'll admit, some overloading is acceptable (or even expected). But taken even a little too far, it starts to get crazy.
I need a little advice on the best tech for our situation. We're a media website that has new videos daily. Our backend users upload videos, which are encoded by a third party and then sent to popular video websites as well as displayed on our own site. We currently get a little over a half million page views per month on our site. The engineering team is comprised of five people: two junior engineers, one mid-level, one architect and one senior engineer. The team knows mostly PHP and JS, but have some minor experience with Python. We're about to start a complete rewrite of our entire codebase. The current code is somewhat based on Cake (so-not a fan) kind of like a fish stick is based on a fish. Projects that should take weeks take months due to lots of technical debt. The site is run off dedicated servers with 4 HTTP boxes (Apache + mod_php (5.3) and 1 (and only one) DB box. (I know the setup is lowsy. I inherited this.) For the next generation of our code I favor Laravel, the architect favors node (no specific framework), and my boss favors Python (again, nothing specific). I want to choose what's best for the team and the company as a whole. Python would be great, except our team isn't well versed in it and it would require too much time to ramp everyone up. Node is super-duper cool, it's written in a language everyone knows, and is wicked fast (or so I've read). My only fear with node is that is may not be mature enough to literally risk the future of the company on. Laravel may be somewhat slow, but if we stick Varnish in front of it and get a couple slave DBs, it'll do just fine until we need to upgrade again. Sorry if this is long-winded. It keeps me up at night. **Ninja Edit:** Forgot to mention, the architect wants to use Apache Thrift as middleware between the old system and the new as we're building it. One unmovable requirement is that we build this in pieces over time instead of all at once.
Tiny improvement: /** @deprecated Use bar() instead. */ function foo(/* ... */) { trigger_error( "Function foo() has been deprecated. Use bar() instead.", E_USER_DEPRECATED ); return bar(/* ... */); } function bar(/* ... */) { // Old logic from foo() goes here. }
"Compromise" is a loaded term. Sometimes it can mean a mutually beneficial solution. But sometimes it can mean a reduction of quality. Unfortunately too often we say one of those, but I think we end up with the other.
&gt; We're about to start a complete rewrite of our entire codebase. Before doing so, I highly suggest reading "[Things You Should Never Do, Part I](http://www.joelonsoftware.com/articles/fog0000000069.html)" by Joel Spolsky.
Look into Flight PHP framework, I've used it for a couple small *pure php* projects, it's great. 
I agree up to a point. But I don't think there should be an optional strict mode. function wantsAnInt(int $user_id) // strict mode function doesNotCare($user_id) // normal operation If you don't need strict checking then... just don't use it. 
&gt; Personally I don't understand why on earth type hinting scalars wouldn't just be strict, and shouldn't cast Because of the stringy nature of PHP data, you'd constantly have to be casting to make function calls and the casting rules in PHP are so permissive that they're useless. So having strict type hinting would, in practice, be almost like not having any typing hint at all. I care what you think, but you're still wrong. :) 
PHP code is not supposed to care about the underlying representation of values. In PHP (unless you specifically ask for strictness) the number zero is the same whether it's represented in 2's-compliment binary, IEEE 754 floating point, or as an ASCII string. These representations are all interchangeable. If you disagree with that then you disagree with PHP in a much more fundamental way than simply with scalar type hinting. 
then why don't we fix cast instead. if the value cannot be casted, then throw an exception. The point is, when a user casts a variable to int, then he KNOWs that that value can be used as an integer. That is the point of casting. When the calling code is willing to take the responsibility of the cast. It is like, "hey, I know what I am doing. Covert this to the expected type and let it through". But when we start accepting str for a argument type hinted as int, the calling code is not aware of the value being converted. And it is not apparent that it will fail for SOME values. And if you want old behavior, just don't use the type hint. 
Other people have answered the specific issue, so I'll tackle the actual requirement. But it's worth pointing pointing out that all you really want to do is refactor foo with a new name. A good IDE like PHPStorm would trivialise that, and would be a better solution than having two methods.
No, I'm fine with the way PHP works. But I'm also fine with allowing the **option** of allowing people to be more specific if **their needs** require it. Personally I would pretty much never use scalar type hinting. But I think it's a good thing for the language to support for people doing more ambitious and disciplined programming.
NO U &gt; you'd constantly have to be casting to make function calls Can you clarify what you mean by that? My understanding is that variables passed through a function should be type preserved. There should be no need to cast anything except, perhaps, initially.
It's not a compromise; it's the only logical way it could work. [Scalar type hinting is harder than you think](http://nikic.github.io/2012/03/06/Scalar-type-hinting-is-harder-than-you-think.html) Also see [this example](http://www.reddit.com/r/PHP/comments/2ggg60/scalar_type_hints_in_php_status_withdrawn_again/ckjm09z). 
It's a simple example, not a bad one. I could demonstrate the same concept a million different ways. And I could argue that getting values from query strings and post data is very common in PHP. But I will leave it to you to provide a counter-example where **strict** type hinting is of *any* value. 
Unit, integration, and functional/acceptance. Anything less and there's no way to know for *sure* that your app works. I prefer PHPUnit for the first two, and am still playing with things for the last one. I don't really prefer it, it's just the best of what's there.
I don't think you even need to do that. You can do this function old(...$args) { new(...$args); } no? Although you lose the type-hinting on the old function.
 public static function fetch(&amp;$f,&amp;$v) { static $m;$m?:$m=[]; if(isset($m[$f])) return $m[$f]; $t = strtok($f,'.');$q=$v; while(($q=isset($q[$t])?$q[$t]:'')&amp;&amp;($t=strtok('.'))); return $m[$f]=($t?'':$q); } wat.
We use Codeception at work. I love it because I can run unit tests in PHPUnit + their neato helpers and run behavioral style acceptance tests in the same suite. We've written our own suites and helper classes into it to make our lives easier. Extending it wasn't too difficult. We started out with separate PHPUnit and homemade Selenium-based test suites. They both migrated easily into Codeception. I highly recommend it.
Same here, I really have fallen in love with codeception. 
By default all the session data is stored in files anyway. I'd bet my left nut the server was cleaning up the session files outside of the PHP process and not following whatever timeouts you'd set. To help keep your code clean, you may want to look into [session_set_save_handler](http://php.net/manual/en/function.session-set-save-handler.php) if you haven't. It lets you implement the session saving/loading code on your own (you can go ahead and save it in files if you'd like) while still using the regular session functions and $_SESSION variable.
What does this have to do with laravel? I'm talking about unit tests and integration tests for any db centric library
You can write unit tests that work on some mock adapter. The underlying implementation could be some simple in memory key value store. Then, to test that your caching library behaves properly when integrated with a db, you could use sqlite, which can be ran in memory - making for very fast integration tests. 
Could be it, thanks again for the response.
Totally correct, didn't even consider that...
The thing is that issues and PR opened by collaborators (people that have write-access) are skipped. The reason for this is that it makes no sense to count them as real "issues" and collaborators might want to keep those open as long as they want. So that might explain why you see `100%`. Now for projects that have not many issues, it's up to the project maintainer to add the badges to the README, so if the numbers don't make sense (i.e. if there's not a lot of issues yet), it doesn't make sense to add the badge at all.
Better?
I'm crying right now because it's the first time i've seen Codeception. Why only now.
PHPSpec for the unit tests and Codeception for functional / acceptance testing. I used to use PHPUnit for everything, but the BDD tests and their syntax seem much cleaner and help me design better, IMO. I've also heard good things about Behat, but haven't used it yet - might have to try it for some of my upcoming projects.
Good catch!
PHPUnit to test critical units of code (i.e. certain algorithims, etc.) and Behat for full end to end testing.
&gt; we want this, but not like that Yes, I understand this. Let me rephrase my question: what were the specific issues with the RFC that caused it to be withdrawn? Seems this might be answered here: http://www.serverphorums.com/read.php?7,1024133 - if anyone has a tl;dr of that thread it would be much appreciated. (paging /u/ircmaxell).
Well, yes. This is a very common usage of PHP. It's exactly the sort of thing for which **scalar type hints offer no benefit whatsoever**. Let me reverse the argument. If scalar type hints hold no value, how do **any** type hints? Surely all the same arguments apply? Again, **if you don't want or need scalar type hinting just don't use it**. The point of them is to document and conform certain types of methods to ensure no hinkey conversions are going on, to make sure that. You're asking for a simple example. That is totally the opposite of the point. I cannot give a simple example, only a complex example. It's like saying "what's the benefit of OOP", the fact is in trivial examples it's useless. private function calculateShipping(int $quantity){ // quantity has to be a number return Shipping::FIXED_COST * $quantity; } // $cart has the quantity incorrectly set as an empty string: '' $order-&gt;calculateShipping($cart-&gt;quantity); // catchable error This is a pretty contrived example, and the benefit isn't huge, but this isn't intended to be a killer feature. It's not going to change the way PHP works. It's a way to ensure a method is called to requirements. Nothing more.
Behavioural vs unit isn't really a choice. Units have "behaviour" and you can use BDD to unit test. I keep hearing things about BDD, but I've yet to find a significant PHP project making use of it. I'm not what you'd call an early adopter, and since PHPUnit already does a great job I'm sticking with it for the time being. For functional tests I've just discovered [CasperJS](http://casperjs.org/). Love it! I used to hate working with Selenium (a couple of years ago now), but casper is just awesome.
B(DD) is fundamentally T(DD) but with a different wrapping. BDD tries to use terminology that better matches what you want to do, and it may or may not be successful at that, but other than that there is no practical difference between the two. The important distinction is between unit-level-, integration-level-, and possibly acceptance-level-testing, as /u/lord2800 pointed out.
&gt; It's a simple example, not a bad one But in this case, a simple example IS a bad example. Because type hints are meant to protect the programmer in implementation of complex processing ,that involves a lot of abstractions and in turn a lot of deep level function calls. So the value type hints (or lack of it) cannot be shown by a 'simple example'. It seems to me that the proper thing to do is to change the behavior of cast operator to generate an exception if the value cannot be converted in a meaningful way, along with the implementation of strict type hints. 
 $data = ereg_replace("[\'\")(;|`,&lt;&gt;]","",$data); $data = mysql_real_escape_string(trim($data),$this-&gt;connection); $data = stripslashes($data); $safeData[$p] = $data; ereg_replace? terrible...
Unrelated, but any plan to make Parsedown compliant with CommonMark?
I've used this argument in the past, but I think it is wrong. The key problem is this sentence: &gt; However, pass a non-integer value for the page query string parameter and it gives an error as expected. This is **not** expected behavior. A type constraint violation is a recoverable fatal error, i.e. it will completely break your application. That must never occur in a production system, even with invalid inputs. In other words, type hints are no substitute for validating your inputs. You **must** make sure that `$_GET['page']` is actually an integer, at which point you can perform the `(int)` cast safely. This is actually a problem that non-strict type hints introduce. With the strict typehints your code would immediately fail, which is your sign that you're missing a "validate and cast" cycle. With non-strict type hints your code will work on casual testing and fail spectacularly in production once the user enters something you didn't expect. One piece that is missing currently is the ability to easily perform a safe cast to int or float. There's a bunch of ways (`ctype_digit`, `is_numeric`, `FILTER_VALIDATE_INT`) which all don't work properly in all cases. I think a strict typing proposal should be complimented by something like this: if (false === $page = parse_int($_GET['page'])) { throw new \ValidationException('Page must be an integer'); } $records = fetchRecords($page); Alternatively the same with `parse_int` throwing an exception directly. So, basically, I think the important point is this: You must do input validation in any case. Once you do it, the integer cast is safe. The strict types approach ensures that you can't miss it, while the non-strict approach will work usually and crash the application in edge-cases. Additionally non-strict types are impossible to reason about statically: function get_str() : string { } function take_int(int $n) { } take_int(get_str()); No static analyzer (like the one provided by PhpStorm or another IDE) will be able to determine whether this is valid code, because validity depends on the *value* of the string, rather than just its type. With strict types on the other hand the analyzer can immediately inform you that the code is not valid. I think a lot of the value of type annotations lies in the ability to detect many type issues statically, like we currently do for object types. Lastly, I suspect that strict types will play a lot better with generics, should we choose to implement them at a later point in time.
I really only put the `(int)` there to make it clear `$index` will be an int after parsing. It's kind of irrelevant though, that piece of code isn't even there in this case (it's missing after all). My point was that I don't think PHP should simply assume it can validate the input ("0" being valid, "foo" being invalid) on its own, because in some use cases the input being a string *at all* may indicate an error.
We just recently made the choice between PHPUnit vs PHPSpec for code (unit and integration) tests and Behat vs Codeception for web interface (acceptance) tests. PHPSpec won over PHPUnit because it is by far more readable. The tests as well as the outputs read like English sentences and you know immediately what it's supposed to do. In PHPUnit the tests are peppered with assertions that are hard to read IMO assertEquals($string-&gt;getRaw(), $this-&gt;output); While in PHPSpec the assertions form sentences. $this-&gt;method()-&gt;shouldReturn(true); $this-&gt;shouldThrow('ThisException')-&gt;duringMethodCall($arg); PHPSpec and its required complement, Prophecy, however have much worse documentation than PHPUnit and we have had to hunt information throughout various tutorials and old presentations. Codeception won over Behat because you can write tests in PHP itself and don't have to incorporate a third language, Gherkin, as an intermediate step. Gherkin might be better if non-developers write tests, but that is not the case for us. The two language layers in Behat make tests more brittle in my opinion. Codeception also has a better documentation than Behat. There are other, smaller test libraries and frameworks, but ultimately I have rejected them because their developers might simply disappear one day and stop maintaining it. The larger the community, the less chance of library rot. I'm curious about the experience of others. Did we choose right? Time will tell, when we come to a big refactoring and after developers have come and gone.
Official Announcement: http://blog.jetbrains.com/phpstorm/2014/09/phpstorm-8-released-with-blade-behat-wordpress-remote-php-interpreters-and-more/ 
The script refreshes when the form action initiates ( http get ). Meaning the last value is actually the first in the array. Consider using $_SESSION to store the value. 
This man speaks the truth!
OMGWTFBBQ?!?!!11 Seriously, that code is a joke. Is today amateur hour or did I miss something?
Holy shit! This has been a loooong time coming. Finally we have 5.6, Blade and remote interpreters support. Time to renew my subscription I guess...
I have been using the EAP for a couple of months and it has been very stable. 
&gt; He She
Okay, thanks :) I'll give it a go
Don't you mean HackSploitation?
C is unsafe in the same way a road with no guard rails is unsafe, if you suck at driving its horrifying, but if you are moderately competent you never noticed the guard rails in the first place, cause you never got near them.
Do you have a link to your Autobahn test results?
In general, you should avoid creating functions outside of classes. If you have a collection of basic (stateless) functions you should probably use a static class, otherwise use proper OOP.
HTTP is a stateless protocol. It doesn't know what requests have been made in the past to the server. Once the connection closes, anything pertaining to that particular request is gone. When you make a new request, you start over with a blank slate. If you wish to retain a state, then you're going to have to implement that yourself by either using cookies, server-side sessions, hidden form variables or URL rewriting. Or you could switch to a stateful protocol, such as websockets. 
Anyone here using PhpStorm that has used Netbeans? Can you describe the differences? 
Listen to this man. you are making a mistake. You are better off refactoring parts one at a time. There is no guarantee that you will not have a new and improved pile of code that is just as shitty as the last. You will not likely see a good return on your investment. It is likely that the re-write might never see the light of day.
Have you looked at Apigility? https://apigility.org/
I'm not quite sure why you're starting an argument with me about this, but if you're looking for examples: https://github.com/laravel/laravel/blob/3.0/application/config/session.php#L19 https://github.com/laravel/laravel/blob/3.0/laravel/session/drivers/cookie.php#L42 https://github.com/EllisLab/CodeIgniter/blob/develop/application/config/config.php#L345 https://github.com/EllisLab/CodeIgniter/blob/develop/system/libraries/Session/drivers/Session_cookie.php#L715
I've been using it at work for about a month and a half and I can only think of one time I got a full-on error, and it didn't even crash the IDE. Thinks have been rock-solid for me.
I like this a lot! Thank you
Actually Codeception had me get my lazy ass started writing tests in the first place, I love how easy it is to get started and the docs are friendly enough for a beginner to understand
can't wait for 9.0 EAP !
I recently *evaluated* PHPStorm 7 and went back to NetBeans. PHPStorm has noticeably better static analysis capabilities than NetBeans and is somewhat snappier at carrying them out. I don't know how the rates of false-positives compare. PHPStorm has overall more configuration options and can, for instance, get much closer to PSR-2 than NetBeans can. However, I find PHPStorm's UI fairly messy compared to NetBeans'. What made me go back was jVi, which is leaps and bounds better than IdeaVim. IdeaVim may be the most superficial Vim emulation I've ever had to use, and I actually ended the trial prematurely because of it. I think vanilla PHPStorm is plainly better than vanilla NetBeans, but non-vanilla PHPStorm is not so much better than non-vanilla NetBeans as to justify the price. As it happens, vanilla PHPStorm is not good enough for me.
Yeah... No... There exist tools that do this already. Namely Varnish and the like. Don't bastardize Node to be a caching reverse proxy, when there are already FAR more capable and performant ones out there.
I agree .. I liked the idea of separation of concern in the article but using NodeJs to accomplish that is not the best option IMHO
Can I access objects/lists in the listeners?
I didn't use the EAP, but I've been waiting a *loooong* time for PHPStorm to have ST2-like cursors. I'm so happy now!
&gt; I've used this argument in the past, but I think it is wrong. So you have been turned to the dark side! :) &gt; This is not expected behavior. A type constraint violation is a recoverable fatal error, i.e. it will completely break your application. That must never occur in a production system, even with invalid inputs. Invalid inputs (when they are expected to be valid) should absolutely halt the application immediately. An application should never continue in that situation. &gt; In other words, type hints are no substitute for validating your inputs. That depends. If the input comes from the user, then it should be expected that you're going to validate the input and present the user with a friendly error message, etc. But if you accidentally forgot a validation, or this input doesn't come from the user, the application should absolutely crash. So on that, we agree. &gt; You must make sure that $_GET['page'] is actually an integer Isn't that a waste? In this example, the link to different page numbers would be something generated by the application. I would treat any non-integer page number as a fatal error because there is either a bug or a hacking attempt. If I can declare my function as only accepting integers, then I get automatic safety without a bunch of boilerplate code that I can do now without it. &gt; With non-strict type hints your code will work on casual testing and fail spectacularly in production once the user enters something you didn't expect. That is a valid point but without being able to declare the types of variables (full static typing) this just seems wrong. PHP will happy change the types of variables for you: $x = 10; echo gettype($x); // Integer $x = $x / 2.0; echo $x; // 5 echo gettype($x); // double And if a function expects a `string`, will I be expected to cast everything to string to use it? &gt; Additionally non-strict types are impossible to reason about statically: I love statically typed languages; I do my day-to-day work now in C#. And honestly, I think PHP is a more static leaning language than a dynamic one. But if you can't let me declare variable types then forcing casts for parameters is ridiculous. 
`shouldReturn()` is [a PHPSpec matcher](http://phpspec.net/cookbook/matchers.html), while `willReturn()` is a way to [create stubs in Prophecy](https://github.com/phpspec/prophecy). So those two are not the same at all. `shouldHaveCount()` calls and compares `count()` on the \Countable object or array in question. `hasCount()` doesn't seem to be a part of PHPSpec, however, as all matchers start with the word *should*. Agree with you on the lack of documentation though.
I think you'd be way better off by wrapping your third-party dependency in a class that implements an interface. That way, if you decide you want to use a different implementation, you can swap them out far more easily.
Hmm, the official PHP Storm 8 download page lists the build number at 138.2000. The last EAP release is 138.2071. eh?
It's been a while since I used Netbeans but when I switched it was because PHPStorm was faster and had slightly more features. Also, it was only $49 at the time (they have periodic sales) and that's a drop in the bucket if you use it for income.
&gt; I find PHPStorm's UI fairly messy compared to NetBeans'. The UI is pretty heavily customizable, actually. My current setup for PHPStorm makes it look a lot like Sublime Text.
This the process I use: 1. Start by writing a mess that works*. This is my prototype. 2. Immediately back up the high level output / functionality / use-cases of that mess with a suite of functional / acceptance tests 3. Start refactoring, leading with unit tests to guide the refactoring process. 4. Sometimes if it's a complex refactor, I prototype the refactor first to make sure I'm happy with the API I'm creating and how the code is meant to be used and how it will communicate. THEN I back up that refactoring with appropriate unit tests, and then proper refactoring implementations based on those tests. So I agree with you that dogmatic test-first TDD is silly, and can lead to nasty code design that tests well, but doesn't necessarily read well (or that sucks to use). *Of course, avoiding this mess is why test-first approaches exist now. Everyone always means well and super promise pinky-swears that they will refactor and clean it up, but shit happens and tornado sirens go off and they never get around to it and the mess remains. But my thinking is that if you have time to write tests, then you have time to start with a mess and refactor it. So following that, I don't agree with the article that testing and writing code are one in the same - but testing and REFACTORING are one in the same. Hence I'm coining a more precise term for testing: TDR - test driven refactoring.
List of what? Maybe you will have informations in the documentation: http://hoa-project.net/Literature/Hack/Websocket.html.
There is no better. Been using ParseDown Extra on my CMS since it's inception and have been very pleased with its performance and also their decision to implement the CommonMark spec.
How do I do this!?
You may take a look at: https://laracasts.com/series/how-to-be-awesome-in-phpstorm/episodes/2
What makes this release deserving of a major version number?
Other than the interface, isn't that exactly what I'm doing?
[What's new in PHPStorm 8](http://www.jetbrains.com/phpstorm/whatsnew/)
Behat is great. I use it every day at work and love it. My criticisms are that: * It's also slow. 3.0 is supposed to remedy a lot of this. * Fixtures aren't easily maintainable after a certain point. * Asserting responses using data tables can be a little messy at times Those aside, I love working with it. It catches so many errors that phpspec misses 
VI is better.
yep. take my upvotes.
Vim is not an IDE and if you are still using VI... god help you.
Just as an aside, they improved detection of simultaneous use of license keys on the same network.
The original proposal was for an "Implicit isset() in Shorthand Ternary Operator," but after popular demand ([see discussion](http://www.serverphorums.com/read.php?7,1018683)) it was changed to propose a new operator.
TDR, I like it ;-) moreover, the mess that you are doing may end up in a "no go" decision. Then you drop it all. It is better to drop less **code**. There are situation when TDD may be applied as it is "lectured" everywhere: when the product already exists &amp; you are extending it. or a defect you are about to fix. 
Anyone have the LiveEdit plugin working? Even after I install and enable the LiveEdit plugin, it's not available from View-&gt;Live Edit per the documentation. I also installed the JB chrome extension and launch a simple test.html debug configuration without any success. Booo!
Isn't this similar to Ruby's `||=` operator? If so, it's about time. Even then, it's about time that PHP is able to have more ways of writing code without overly complex statements for checking/etc.
"When PHP wants to become Java"
Have you found a way to put a cursor on each line of the selection the way you can with Cmd+Shift+L in sublime? Really hoping they have that bindable.
I would love this. And I definitely would rather have the new operator that's [similar to other languages (C#)][c-sharp-null-coalesce-operator] than changing the semantics of the short-ternary, as the previous RFC proposed. Changing the short-ternary would have just made it inconsistent to the normal ternary syntax... and inconsistency is not something we need more of in PHP. :P [c-sharp-null-coalesce-operator]: http://msdn.microsoft.com/en-us/library/ms173224.aspx
default is to hold down ALT and drag with your mouse an earlier EAP blog post, I've not upgraded to final so not sure if this has changed any http://blog.jetbrains.com/phpstorm/2014/03/working-with-multiple-selection-in-phpstorm-8-eap/
&lt;insert PHP 6 joke here&gt;
Appears good unless we're both failing to hit some edge cases; I've done this with e.g. $_REQUEST = array_map('addslashes', $_REQUEST); ..offhand I can't see a practical difference between the two, and that approach has worked for me.
if ur not using phpstorb ur not a real progmr
I upgraded to phpstorm 8 and it is not recognizing any built-in classes, any of my classes, any builtin php functions, or the __DIR__ constant. Has anyone else experienced this, or have any ideas how to correct it?
Just waiting for the Crack :)
This is PHP subreddit. If you need help with a specific product, then **turn to the people offering said product**. 
Thanks, that does still work!
I've been using the EAP so long it's like nothing new! but I have to say **Absolutely Superb Software**
&gt; Peer2peer chat is a one2one (person to person) webcam video chat using **nodeJS** for meeting connection. It is similar to google video chat service.
I have to agree about the Vim emulation of IdeaVim. I've been trying to move away from Vim for bigger projects, but IdeaVim is really basic and it has become a deal breaker. The IDE may offer a couple of helpful tools, but I'm still much slower to because of missing Vim commands. Have you used the Vim emulation of Eclipse? I'm wondering how it compares to jVi, as I'm not a fan of Netbeans. 
Ya, but the installation guide resides within a PHP file. We're obligated to assist now.
This would be great, hope it gets voted through. 
For starters, check for the plugin CodeGlance
&gt; The debugger is super easy to use and setup in PhpStorm. Yeah,well either i'm a idiot or it isnt explained properly,and i'm pretty sure i'm not an idiot.
Awesome. We've been developing using php 5.6 for awhile now and it's nice to have the syntax supported.
You need run the file in debug mode for it to work. "Currently the Live Edit functionality is supported only for Google Chrome and only during a debugging session."
Try Invalidating your Caches and restarting PHPStorm. (Under File)
Yeah, I did that. Apparently if you dismiss the orange "JetBrains IDE Support is debugging this tab" banner at the top by clicking the "x" (NOT by hitting Cancel), the session stops. So, you can live edit as long as you leave that banner notice up. Sortof annoying. Eh. 
Sorry, I was on my phone and hit send before I finished, and since I was on my phone I couldn't type out a long reply. If you decided to switch over to PhpStorm at some point I'd be glad to do a little walk through for you. Maybe you haven't been [here](http://confluence.jetbrains.com/display/PhpStorm/Zero-configuration+Web+Application+Debugging+with+Xdebug+and+PhpStorm)?
I see it supports Blade for templating, but how about the rest of the Laravel framework? Is the support there? 
It has a setting to use netbeans key bindings which I set it to when I started using it, still using those original settings.
Excellent, this is much nicer than changing the semantics of ?: IMO.
I am also in favor of this new operator... I hope that 2/3 of the internals folks with voting power are, too.
And paying JetBrains to make it more awesome every years is definitely worth it!
It's a bunch of 3rd party integrations + 2 features. Multicarat/seleciton and scratch files. I never look back from switching to PHPStorm, but while 7 was a huge improvement over 5, 8 gives me close to nothing. 
Hi, saw your sample proj. Thank you. Have a real world question for you. Since the angluarJS client app is an index.html file, how do you ensure user clients get the latest file and latest css or js files as you deploy the app? As you know the browser will cache the index.html and any included css/js file. (This isn't necessarily a angularJS specific question, but general SPA in production). 
Much nicer with a new "??" operator rather than modify existing "?:" behaviours. Would love to see this addition. 
Not starting an argument - it's just not correct information. I see where you are going with the examples posted though, but these are frameworks making the conscious decision to use a browser cookie for the actual session data storage. Which I personally find a very worrying concept. Note the first examples for Lavarel encrypt the session payload for storage - that has exploit written all over it. I'm on my iPhone so can't dig into what "encrypt" actually does (ROT13? Hashing? Etc?). But I would never consider this a good idea. 
Given that Laravel *uses* Symfony components ([check out the `composer.json`](https://github.com/laravel/framework/blob/4.2/composer.json)), you really shouldn't have too much of a problem mixing and matching as needed. 
If you can't even think of a basic utility to write as a code sample, you have no business applying for a developer position anywhere, for anything. That kind of job is suitable for someone with a college education in programming, or at least several years of experience in their language of choice.
Have you used both for non trivial projects?
Good point... 
Thank you for your input. I'm not familiar with coding etiquette, I'm only asking for help on the subject, not criticism. 
Fine, I'll try to be more constructive. Was the file `/home/busbank/busbank.com/Get+a+quote.php` written by you? If yes, go to line 45. Take a look at the first parameter you pass to `urldecode()`. Where does that variable come from? Trace it back until you can find where it gets set. It's an array. Were you expecting a string? Think about why you might have gotten an array instead of a string. Did a function pass back a value you weren't expecting? Did you mis-read php.net? Did you mean to use an index on that array? Was the function written by a 3rd party? What does their documentation say about the return value? These are the questions you need to ask yourself. If they don't give you the answer then post the entire contents of `/home/busbank/busbank.com/Get+a+quote.php` and I or someone else will take a closer look for you. PS: Your second warning "Warning: Cannot modify header information" is probably caused by the first -- as soon as the warning is generated it spits errors to the screen which in turn prevents you from setting additional headers. If fixing the first error doesn't fix the second, then you do in fact have a second problem. Focus on the first one first. 
For PHP, the closest way to do this in terms of convenience is: $bar = @$_GET['name'] ?: 'stranger'; $foo = @Inst::method($param) ?: $obj; I hope this gets approved.
If I can't completely turn off autosave yet, then I'm not interested.
So it's not a variable and that means it can't be populated. So itinerary_if_available is a reference assigned in the HTML form. Correct?
I can't conclude anything without seeing code. This is the first I'm hearing of `itinerary_if_available` -- I don't know what it is. At *least* paste me line 45.
 . "&amp;itinerary_if_available_" . urlencode($itinerary_if_available_)
Assuming `Model::get` returns an object, that's fine. If you have a function that possibly returns `'0'` or `false` or `[]` as a valid option then null-coalescing might be preferable. 
You can write really good code on both Symfony and Laravel. You can also write really bad code on both Symfony and Laravel. Your mileage will vary based on you and your team. Laravel is certainly not "rinky dink" compared to Symfony. In many ways, especially with the upcoming release, it *pushes* you towards more well architected code than Symfony does.
First part is dead on, half of the second part is. But, the &gt;it pushes you towards more well architected code than Symfony does. part, is definitely biased. Take it with a grain of salt.
To state my reasons for saying that. The library of interfaces in Laravel 5, and the documentation that is upcoming with them, encourages you to write more decoupled, well architected code than any Symfony documentation I have seen. But, yeah, my two cents.
You do want `urlencode`. You encode values if you're building a URL string, you decode them when taking them out. If you're still getting errors about arrays then `$itinerary_if_available_` (which *is* a variable BTW) is an array. Put `var_dump($itinerary_if_available_);exit;` immediately before this line to see what it contains. Also note that you likely missed a `=`. That line should be . "&amp;itinerary_if_available_=" . urlencode($itinerary_if_available_) However, I prefer building URLs this way: $my_url = 'http://domain.com/path?'.http_build_query(['itinerary_if_available_'=&gt;$itinerary_if_available_,'another_param'=&gt;$another_param); This takes care of putting all the `&amp;`s in there and escaping everything. ---- In response to your mysteriously deleted comment: `$_FILES['itinerary_if_available_']` is indeed an array. What did you want to put into your URL params? The file name? Then you need to use `$_FILES['itinerary_if_available_']['name']`.
The symfony documentation is more about using everything together, that does not, by any stretch of the imagination, mean that you cannot write beautify and decoupled code with symfony. Their documentation on the specific components themselves show it, but admittedly, that documentation is a little lacking.
Thanks but by commenting in here you risk starting a flame war and really I am not looking for Laravel's creator's opinion on this matter in this thread. I suppose I should thank you for not pretending to be someone else but you run an open source project, part of that is sitting back and letting the community critique it sometimes without stepping in. &gt; You can write really good code on both Symfony and Laravel. You can also write really bad code on both Symfony and Laravel. Your mileage will vary based on you and your team. I mean of course but that doesn't help at all, if we take this attitude doesn't matter what framework we choose. Why not CodeIgniter? You can write really good code in CodeIgniter and write really bad code in CodeIgniter... That is not helpful to me at all and if you read my post you will see I am looking for more specific comparisons from Symfony devs.
Not a Symfony dev, but: The main difference between Symfony and Laravel is that Laravel is far more opinionated. It makes a lot of assumptions about what you want to do and how you want to do it. If your opinions and preferences align with those, then you're golden. If they're not... well, you might well be better off with something more flexible and less opinionated than Laravel, such as Symfony. Rinky Dinky is... IMO... some ignorant bullshit. Laravel tutorial-level code has some training wheels on, there's no doubt. Basic facades connected directly with anonymous routes. Minimal or no testing. There's nothing wrong with that, it's a great way to get started. But more advanced, testable and better architected code is absolutely possible and encouraged. Laravel has a lot of great conveniences, such as Eloquent, and Blade. These won't be appropriate for everyone, and in some cases are replaceable with other components. But they're well made and efficient tools. In my opinion the Eloquent ORM is the single best PHP ORM currently available, assuming you are ok with an Active Record implementation. Both Laravel and Symfony can be absolutely used to make large, professional, quality applications in the right hands. You admittedly don't see a lot of large Laravel applications, because it's quite new still. Comparison of Laravel with Symfony is hardly fair if taken from the point of view that Laravel fails by not being Symfony, or because its approach differs from that of Symfony. If you're seriously going to look at Laravel as a useful skill I'd recommend putting aside your assumptions about it and taking it on its own objective merits instead of constantly asking "why isn't this more like Symfony".
&gt; Not a Symfony dev Ok thanks but have you built anything non trivial in Symfony?
I love how Laravel gets accused of being a one man show ("he's got 99.9999% of commits!!!") and then also having some massive hype-generating marketing machine behind it. No offense to you, more of a critique on the conventional "wisdom" that has formed around Laravel.
I will try and make these changes. I'm not sure where I can post my code in since it is PHP, so I can't use CodePen or JSFiddle.
Yeah, that's what I do now, but because the `@` operator has such a negative stigma (deservedly so), it makes me twitch a little and I have to reassure myself that it's OK in this circumstance. Kinda like the time I used a `goto`. Just kidding, I've never done that. 
Where should I put them then¿?
&gt; Why not do it? Just to learn something new. Because I'm potentially signing on to lead this thing's architecture for a year or moe. Part of that is deciding whether to keep it in this framework for the health of the project. That's my job. Also I have other projects that might be more fun to work on if I'm waking up everyday hating Laravel. Better to ask these questions now. Plus there's things I can do in Symfony that I seriously question Laravel can do like Compiler Passes. &gt; My opinion is that Laravel is Symfony. Ok and yet you say you're not an experienced Symfony dev and honestly its those people's opinion I'm interested in here.
Is this correct? . "&amp;itinerary_if_available_=" . urlencode($itinerary_if_available_) . "&amp;hs_context=" . urlencode($hs_context_json); //Leave this one be :) $itinerary_if_available_ = array("doc", "pdf", "docx", "jpg", "jpeg", "png"); $_FILES["file"]["name"]); $extension = end($itinerary_if_available_); if ((($_FILES["file"]["type"] == "application/msword") || ($_FILES["file"]["type"] == "application/pdf") || ($_FILES["file"]["type"] == "image/jpg") || ($_FILES["file"]["type"] == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") || ($_FILES["file"]["type"] == "image/pjpeg") || ($_FILES["file"]["type"] == "image/x-png") || ($_FILES["file"]["type"] == "image/png")) &amp;&amp; ($_FILES["file"]["size"] &lt; 20000) &amp;&amp; in_array($extension, $allowedExts)) { if ($_FILES["file"]["error"] &gt; 0) { echo "Error: " . $_FILES["file"]["error"] . "&lt;br&gt;"; } else { echo "Upload: " . $_FILES["file"]["name"] . "&lt;br&gt;"; echo "Type: " . $_FILES["file"]["type"] . "&lt;br&gt;"; echo "Size: " . ($_FILES["file"]["size"] / 1024) . " kB&lt;br&gt;"; echo "Stored in: " . $_FILES["file"]["tmp_name"]; } } else { echo "Invalid file"; }
Nope! That's why I said I'm not a Symfony dev. 
The current code is tightly coupled and poorly managed. For instance, I couldn't replace the DB layer without rewriting large swaths of code. The DB itself is over 300 tables, many of which are very, very fat.
Good talk. :)
Go away you elitist ass
In short: I consider my working files to be a repository of sorts, and I don't want my IDE to decide for me when to commit code to it. To me, an edit in progress is an unfinished thought. I do not want to have unfinished thoughts (read: broken code) automatically saved on every keystroke or tab change, regardless of how safe an environment I'm working in, or how many levels of undo are available. I might be working on multiple trains of thought at a time, and I don't want to have to finalize every thought in progress before my code will run again. There are other programs out there that handle autosave in a more elegant way that I could tolerate in an IDE. For instance, TextWrangler on the Mac allows you to exit the program without saving the current files being edited. Those files will be in the same edited state when you re-open the program. However, it does not replace the existing file until you explicitly tell it to save your changes. 
GitHub gists https://gist.github.com/ and pastebin http://pastebin.com/ and ideone.com are good.
To be fair, 90% of the marketing machine is the sometimes-rabid fanbase. 
&gt; Have you used the Vim emulation of Eclipse? So long ago that my opinion is worthless. I've completely abandoned Eclipse.
I just upgraded and have been using it for the last few hours. I am still finding that sometimes it's not as snappy as it should be. Haven't really narrowed down the exact circumstances yet though.
Thank You Here is my first version. https://gist.github.com/54315c2591e5cce9c416.git The second form is the altered version I tried with what you told me to do.
Return $row instead. You'll see what you did wrong
Try this - change: &lt;?php echo $healthgrades['CredentialNo'];?&gt; to &lt;?php echo $healthgrades;?&gt; 
You're awesome, thank you! I was staring at this for nearly 30 minutes.
No, but his comment was that Laravel does it better.
&gt; I've used this argument in the past, but I think it is wrong. Ha ha. You are learning, at least. So that is good. Let us just hope that all of you guys (the 'core' devs) will graduate from being morons to having bit of common sense before you turn PHP into a yet bigger cluster fuck with all your fancy stuff...but may be, then you will no longer will want to work in PHP. 
It doesn't discover the license server. I had to manually type the license server address.
This is pure opinion, I am a Symfony dev, and am in the middle of creating a mid size project with Laravel. I would choose Symfony every time over Laravel. Laravel performs great when building basic MVC applications, but starts to become less helpful when things get more complex (where Symfony is great). The documentation is incredibly slim, whereas Symfony has 2 sets of documentation (regular docs, and cookbook docs for specific examples). I am not convinced that the inclusion of Eloquent and Blade are adequate replacements for Doctrine and Twig. It is also not as easy as it seems to swap Blade for Twig, as things like form creation is done via Blade (the Twig Bridge Laravel package doesn't replicate everything, and I have encountered some packages with dependencies on using Blade). Twig has more features and is more documented, and Twig and Blade are similarly easy to learn, so Twig seems to be the best choice. The same goes for Doctrine and Eloquent. I would also struggle to justify the usage of Laravel on a large commercial project. Laravel has only been around for 2-3 years, with significant changes between versions 1-4. That is a lot of rebuilding and maintenance that is required to get the application onto the latest version of the framework, which directly translates into more costs for the project owner. This comment is of course filled with bias, as I am mainly a Symfony dev. I have avoided specific examples because I would no doubt be flamed for being too specific. Add a comment if anyone wants more specific comparison areas. 
I'm seriously hoping that $ProvID doesn't ever come in without hitting MySQL_real_escape_string first.
also I'm waiting for the fix...
For a php code sample, i recommend building a quick framework and show them that, make sure its small and simple and shows you using interfaces, abstraction, DI etc. if its too large they won't bother reading it all and could miss out the really nice code that could be hidden deep in the framework :) . 
I think it's funny that they say that there is only one problem with PHP's Elvis operator: it doesn't use `isset()`. Are they forgetting the fact that it's also left-associative? Ugh.
I've been using Parsedown for a while and I'm pretty happy with its performance, I don't think there's a better parser for PHP. Thanks for keeping it up to date!
Aaaaaaand it's here!
This thing I don't get is, why not ||? Both Ruby and JS use it, why deviate from that?
Nothing about what I said was elitist. If someone cannot formulate a simple code sample without help, no one is going to want to pay them anything. That's internship skill level, not developer job hunting. If knowing the basic first steps of your career before starting it is "elitist" to you, you have problems facing reality.
Yeah, that doesn't really mean much since Laravel fairly heavily abstracts the symfony components away. This isn't a good or bad thing, it just means that the knowledge that is transferable between the two frameworks isn't really any greater than if Laravel had used Zend components. My opinion, after having used symfony on a very large enterprise application and Laravel on a more medium sized is that Laravel is really good for simpler projects while still retaining the ability to be used for more complex ones. Symfony on the other hand, can be unnecessarily heavy for smaller projects but makes starting larger projects with it much easier. This goes beyond the base directory structure and autoloader of Laravel out of the box. Here's a good example. Laravel's container does injection by reflection. This is nice and useful for simpler projects were you may only have 1 service definition per class. Symfony's container, however, only does explicitly defined dependency injection. This means you have slightly more boiler plate and configuration code to maintain, but you won't find yourself fighting the container in that situation. Example of this in the real world I ran into: I had a connection class, that defined an address to connect to, some credentials, and then some addition configuration parameters which defined what type of connection it was and how it would send it's requests. The data it got back would always be the same. I needed to have a dozen of these connections. In Laravel, I would have to bake this functionality into the class. In symfony I can programmatically create service definitions based on my configuration. This means that I could define each connection as a service, and then create a service definition for doctrines ArrayCollection class that contained all of my configured connections. I then injected this collection into another service which would aggregate all the information from each connection. In a smaller project, implementing the ability to do this into the connection class itself wouldn't be an enormous issue, but these small "hacks" do add up and make maintaining your app more difficult over time.
I'd like to see a decent answer here too. I'm developer who often chooses to symfony. I haven't seen many answers to this question from folks who've actually used both. By default, the idea of an activerecord style ORM is a big turn off so i haven't investigated too closely.
Please don't say Laravel is symfony because it uses components. Knowledge of symfony components does that translate to Laravel unless you start going pretty deep under the hood because they are fairly heavily abstracted away. Not that this is a bad thing, it just means knowledge of one isn't very portable to the other. That aside, both frameworks are fine. 
As somebody who's used both, Laravel is great because it allows developers to implement the best practices without a huge learning curve. However, it is definitely not as powerful as Symfony due to Laravel being more opinionated. My personal opinion is that once you are fluent in symfony is that there isn't much reason to use Laravel. The ease of use Laravel provides isn't any benefit when you are already past the Symfony learning curve. I replied a couple of other times in this thread, so I'll let you read those replies rather than repeating myself. 
We prefer the term "advocates" ;)
Oh, good thinking. Current environment is Apache 2.4, with PHP 5.5. I'm hesitant to go back to PHP 5.4 to try it since I use a few "foreach as list" routines in my code, and that was just introduced in 5.5. I might switch over to 5.6 and try it out there. 
Wonderful! No objections here.
What makes it worse for Laravel, is that whenever there is a new point release (which is every [~6 months](http://wiki.laravel.io/Laravel_4#Release_Schedule)) Taylor stops supporting the previous version completely. This wouldn't be so bad if you could just upgrade to the next release, but so far *every* point release had BC breaks. So for large, commercially-important projects where long term stability is paramount, I'd go with Symfony. There is also an [open letter to Taylor](http://www.emanueleminotto.it/open-letter-taylor-otwell-laravel-lts) about Laravel's release process, which is worth a read. 
&gt; Drupal 8 is around the corner Source?
Guess I'll stick with Vim for now :)
Well Im waiting for some discount so I can buy it. 
There is also a gist [floating around the interwebs](https://gist.github.com/anonymous/8565929) that talks about the "with significant changes between versions 1-4" stuff... Some of the stuff in that [has been addressed](http://www.reddit.com/r/PHP/comments/1vvn9p/downsides_of_laravel_serious_ones_this_time/) by /u/utotwel, but there are still some serious concerns in there.
had the same issue when upgrading one of the EAPs. this was the solution.
I would also prefer it be right associative. The only concern I have is that it would add more fuel the "PHP is inconsistent" fire. 
Please vote for https://youtrack.jetbrains.com/issue/WI-24357
Sorry, this is not Elance :) The customer isn't always right, I wouldn't work for you guys. Try not to be full of yourselves when describing a product.
[Laravel doesn't use semantic versioning](https://gist.github.com/anonymous/8565929), while Symfony does. That right there is a show stopper for me. How can you rely on something that is going to break compatibility in minor versions?
If you want to code a new website, you need to learn Laravel Framework.
And for web applications Yii is a really good option. 
where can I vote?? :)
Isn't this precisely what version control is for?
Our lord and savior Laravel. 
What about using Silex for smaller projects?
Please, no! Yii is a death instrument in the wrong hands and that has lead me to hate this framework. You should not ever be able to call any stored information everywhere. We are long past ZendFramework 1 technology
I'd been using the EAP versions, and after installing this official version it said that my trial would expire on 17th Oct but then immediately popped up a message saying that my evaluation license had already expired and kicked me out. Removing just the ~/.WebIde80 directory caused it to hang on startup, eventually I tried removing **all** ~/.WebIde* directories and that worked. This problem occurred with build 138.2000.2262 on Ubuntu 14.04 x64 w/ JRE 1.8.0_20.
As someone who is happy with a different framework can you expand more on why Laravel is the only framework that it is possible to build websites in?
The only framework I use is Zend. I'm not sure I like it all that much, but I must use it for work and it seems very solid. Feels too complex though. I die a little every time I have to use a decorator with Zend_Form
Can't replicate using PHP 5.5.15 (OSX) php -r 'var_dump(json_decode(file_get_contents("https://gist.githubusercontent.com/DeftNerd/ba0c0b1d2153df82c34c/raw/8a41db8075af15b27341c5587769dae88e0d87f7/raw%20json%20from%20chain.com"), true));'
That's good to hear! Thanks! 
Never, under **any** circumstance sanitize something like an email or URL. If it's not valid (contains **any** invalid characters, etc), throw it away and reject it. Sanitizing (replacing bad characters, fixing format, etc) can introduce subtle vulnerabilities and make your application behave in incorrect manners. Specifically when validating emails, I suggest not doing it at all. Just try sending an email to that address (a verification email). If you get an error from the MTA, you know the domain was bad. If it wasn't received, you know the mail was bad. No need to restrict what otherwise may be valid just because you think it may not be.
[KnpLabs\Gaufrette](https://github.com/KnpLabs/Gaufrette) is one of my top 5 libraries (but just in usefulness, the code is actually not that good).
As much as I hate Laravel, he never said it's the *only* framework that it's possible to build websites with...
Can you tell me more about what has gone wrong? I really like Yii, and I am either unaware of the problem you reference, or worse I may potentially do this and want to know what I should stop doing.
I maintain mockery. I don't like the way that everything goes through one class method. Mockery::mock() currently gives you some kind of test double, that you can configure. I think it's really handy, but there could be a few more methods that provide much the same interface, but show more intent within the test and return doubles that restrict their usage: Mockery::mock(); // gets a mock Mockery::stub(); // gets a stub Mockery::dummy(); // gets a dummy Mockery::spy(); // gets a spy An example of the restrictions I put in place would be that I don't think expectations on mocks should default to zeroOrMoreTimes(), they should default to oneOrMoreTimes. The documentation is sketchy. We tried to pull it in to a separate repo and put it on readthedocs.org, which went well, but I've been very guilty of not keeping the docs up to date. We also had a lot of complaints that people liked the documentation being one massive README. 
Why do you hate Laravel?
Is there a good reason to do this over nginx + php-fpm? 
I have to use it for work as well. No doubt it is powerful, but it's so verbose and too much of my time goes down the toilet using it. Documentation/community is awful as well.
thanks, i took a look i'll try it out over the weekend and see how it all goes.
Does anyone still code PHP from scratch? Or do frameworks not suck any more? I self taught myself PHP in 2001. Frameworks were a PITA and used way too many resources. So all my websites were just PHP from scratch. I've been out of the PHP programming game for almost a decade (Jesus, where did time go: alcohol and women). Hell it looks like you guys finally have a proper package manager...
1. Use an autoloader. Composer is the most popular. There should not be any 'include' or 'require' statements in your code except for including the autoloader in your front controller (entry point) 2. Don't put html and php in the same file. Although php can be used as a tempting language, it sucks at it, and your code is a lot worse off when you try it. Use something like twig. 3. Your publicly accessible path should contain only publicly accessible files.. make a public folder and point your webserver there. That way, all your important class files are protected from being run with naughty URL. 4. Have a single front controller (runnable file) in your public folder. Use redirects to point all requests there, and do some basic routing in that file. Your public folder should just have one php file, index.php, plus folders for your static assets (css, images etc). 5. Don't store security details in your code, or your git repo. You published your db's root password for the world to see :-/ https://github.com/JunkyPic/loginSystem/blob/Test/db/MySqlSingleton.php#L21 6. Don't include dependencies in your repo. Define them with composer. 7. Don't commit log files to your repo. 8. Don't do work in constructors. A constructor should only initialise an object, nothing more. 9. Don't break scope. Accessing superglobals from within class method for example, don't do it. If the object depends on these values, then it should be given them. 10. You only need one query to check for valid details: SELECT id from user where username = :username and password_hash = :hash; sorry, that's quite a bit... just one more :) 11. Name things better. Think carefully about the name of everything. It really matters. "login_table" for example... What else would it be other than a table? The table should be called something like "user"
I personally like to use Cake for wordpress plugins...
Victory?
My question is, aside from the learning curve, how much time do you have to spend writing what looks like unnecessarily verbose code that in 99% of cases, *does exactly what Laravel's much more terse syntax does*, and how much time do you spend wiring up configs that you have to do almost none of in Laravel? I get that once you're over the learning curve, it's a non-issue. I'm talking about working with the actual syntax of Symfony vs Laravel.
From what I understand, one is the copy of the other (not sure which one, though).
zf2 is way better than zf1.
I use Laravel for rapidly building small to mid-size applications, but there are a few things I don't like. 1. It does not differentiate between the concept of transient session data (flash messages, for example), and auth session data. You can only store all of it in the database, or all of it in the filesystem. In my mind, transient session data does not belong in a database because there's no point in storing stuff that's only going to persist for one page request, but authentication sessions do make sense to store in a database since they do (often) persist (so you can quickly get users online counts in last X minutes, invalidate sessions easily etc) 2. Following #1, it does not provide support for multiple authentication sessions out of the box. Regular users should be able to remember their sessions forever, but admins managing an admin control panel or something should have totally separate, short-lived sessions for security reasons. 3. I wish the IoC had a more terse ways of binding abstractions on a per-caller basis. For example if ControllerA uses one implementation of DependencyInterface, but ControllerB uses a different implementation of the same interface, I can't easily wire that up in Laravel's IoC. I can only bind a concretion to an abstraction globally, not per-caller. Of course I can always new up the class and construct it manually, but that's harder to do with controllers than my own objects. 4. This is a very specific use-case and I can't fault Laravel for it, but I have a website that is not unlike Reddit - a centralized codebase powering multiple separate communities. (e.g. **mysite.com/somesection/feature** and **mysite.com/anothersection/feature**), but I want to be able to break those sections out into their own domains for branding purposes, without changing any code. That is, I want **mysite.com/somesection/feature** to be aliased as **somesection.com/feature**. But this doesn't work very well, and it's probably more do with web server configuration and configuration of the HTTPFoundation Symfony components handling requests for Laravel.
I disagree. ZF2 does allow you to get things done in a more modern way using better practices, however as a framework - which is supposed to help you develop web applications faster - the tools are harder to use, several helpful ZF1 tools were dropped, and the documentation is extremely lacking especially compared to how complicated it is.
I actually had a couple major problems with it. I had a few large HTML pages that chugged hard in the EAP but had no problems in v7 at all. The EAP also occasionally crashed spaces &amp; I would have to restart Dock to get my spaces back again. This was just last week so I'm hopeful they've done something to fix it since then.
The documentation for ZF2 is a train wreck. They got so caught up in the composer/php-fig culture that everything was written as if you were using each component in isolation instead of in, oh you know, their framework. The ACL is a good example. The documentation is all procedural snippets instead of guidance for how to hook it into the framework. You either need a third-party module that's done that for you, read some random dudes blog, or shove it somewhere and hope it doesn't cause tons of extra work down the line.
I use Symfony as my base currently, but am always looking at and trying new frameworks to see which best fits where. Symfony - right now - is the best bet for large scale, 50+ person organisations. Laravel - again, right now - is primarily used by agencies looking to replace codeignitor, and a small number of start-up / tech companies. This is purely my opinion, based on what I have personally encountered of the UK jobs market's listings for php devs. Symfony can be an overwhelmingly complex beast for someone new to the framework. Laravel feels easier somehow, and more welcoming. They have super cool packages (bundles) like Cashier and Sentry. I'm a human, I know what a Cashier is, and a sentry reminds me of TF2. This is fun, let's chose this one. Symfony is more like FOSUserBundle and Symfony\Security. These make me feel like a robot. Secure sounding technospeak that appeases corporate big-wigs that us software devs aren't just fucking about with the budget. Beep. So, in summary, for me, Symfony is the secure option for corporates (nobody gets fired for buying Cisco), whereas Laravel is brighter, more fun, and as such fits in with the agency stereotype. Of course, as I say, it's all opinion, but imo, the differences are 20% syntax, 80% perception. 
just bookmarked this thread! 
If you go to chrome://flags and enable silent debugging, you wont see that. but then again, if you have a ton of tabs you might miss that banner.
I'd say the amount of time writing boiler plate is, while still larger than Laravel, very minimal when compared to the amount of time implementing domain logic. I also use phpstorm with the Symfony2 plugin which actually alleviates most of that as it actually parses your container configuration and provides autocompletion based on that (it autocompletes service names and knows what classes those services resolve to). However, while still learning symfony (first few months) this definitely felt like it slowed me down a lot but after that initial investment I'd say now the time difference is negligible. 
Thank you! 
Praise be to the chosen Taylor, through whom Laravel speaks to us.
np, ldap integration is actually pretty fun as it opens up all kinds of workflow automation possibilities plus when you combine it with ajax it is all cool and snappy.
That's been an annoyance with PyCharm - I'll open it on my laptop (Ubuntu) and get prompted that the license is in use on my desktop PC (Win7). Interestingly though, it doesn't work the other way around: I never get the license prompt on my desktop/Windows box - only on the Ubuntu laptop. I've got no problem with the cost of their license, but perhaps they could do a better job at detecting an idle state on the various computers a particular license might be actively using at one time. If they can detect that license key is in use multiple times on the same network, then why can't they tell that there's no typing, no mousing, and no activity on one of those computers? It's a pretty minor complaint though; their software is a zillion times better than anything I've ever used to develop PHP &amp; Python apps.
Forgive me if I'm wrong, but isn't the only reason for right-associativity so you can build out a nasty shorthand if-elseif-elseif-else statement like this? I mean, if you're writing code like this: echo true ? 'a' : false ? 'b' : true ? 'c' : .... Then you should be shot. The entire point of the ternary operator is to shorthand a SIMPLE expression, not to one-line-Rambo a more complex if-elseif-elseif-else statement...
If you require the use of .htaccess. Ex: a shared hosting environment
Amen.
&gt; I wish the IoC had a more terse ways of binding abstractions on a per-caller basis. For example if ControllerA uses one implementation of DependencyInterface, but ControllerB uses a different implementation of the same interface, I can't easily wire that up in Laravel's IoC. That doesn't sound like something you should be doing... If you care about a specific implementation, then your dependency isn't an interface, it's a concrete class. 
I think /u/sirsosay was speaking to people who have indeed purchased it, but are using it on multiple devices (like a desktop and a laptop). Definitely agreed on the value though, it's awesome software.
As an interviewer, I don't want to see some code you cooked up specifically to show at an interview. I want to see code you've written that solved a problem you / your job / your client had. Writing stuff for fun or to learn is one thing, but I'm hiring you to solve problems for our clients, and I need to make sure you can do that. Just some perspective. If you're looking for a junior position, this may not be as strict, and some cookie cutter code may be sufficient. But anything higher is going to be a lot more critical of your skills and the code you've written in the past.
I feel I might be missing a joke here but I am not hating on Laravel, just the opinion that there is only one possible way to build websites. 
Hmm, what happens if you have a desktop and a laptop on the same network? I have a personal license and 3 machines at home, never had a problem.
Thanks for the feedback!
Same here. I plan on moving on due to it needing a new leader, but for now it's quick to deploy and I enjoy using it
Seriously. You haven't actually saved your files until you've Ctrl-K'd that shit.
Thank you for this tip xs, it's good to know! I do wish it was possible to display yet dismiss the debug banner without ending the debugging session, though. That would be ideal. I do realize this is a Chrome issue, not PHPStorm, but a guy can dream right? 
This is definitely incorrect. Two different services should be allowed to implement the same interface within the context of the same application. An example of this is doctrine repositories. You will have a different repository for each aggregate in your application. Each repository will implement ObjectRepository (unless you define a custom one). If you don't need to implement additional methods to your repository to query the correct result set then you should be able to typehint the ObjectRepository interface and not expect it to be the same repository every time (although this isn't the best example since the different repositories will have different return types, but you get the idea).
Same here, I've been running it since... April I think? I can't even remember how long it's been. For what it's worth, I've been pretty impressed by the stability of all the EAP releases; I've stayed up-to-date on the latest builds (as you must, considering the 30-day EAP license expiry) and have had no serious problems during its progression. Glad to see this release become official, I can't even imagine how much work went into producing it. Thanks jB!
I didn't realize the queries were to be written by users. Sorry, my stupidity.
It's interesting JB supports Yii out of the box but not Laravel, in August 2014. 
Ahh, cool :) I guess I haven't been hanging around enough to understand the latest happenings.
Well not to be like a n00b on 4chan who just built a blog for his dog, but I know WordPress pretty damn well, as I'm sure many here do. There's tons and tons of valid criticisms of it, but a couple that really annoy me: - static files: everywhere. everywhere... there's static files. - the lack of a formal way to do shit, like building plugins or themes. It shouldn't fall upon tutorial sites to provide longer-form examples of how to solve a variety of common web challenges. - the scariness of seeing requests to a metric fuck-ton of PHP/JS scripts in your plugins directory. Or better yet: Javascript being generated by PHP scripts in your plugins directory. ([Props to the folks at Revolution Slider, for allowing attackers to download arbitrary files from your filesystem](http://blog.sucuri.net/2014/09/slider-revolution-plugin-critical-vulnerability-being-exploited.html)) But with those criticisms in mind (and plenty of others), I was recently charged with the task of rebuilding a couple ancient/low-traffic sites, and I wound up choosing WordPress over Django, primarily because of the number of built-in features in the admin, the spam filter, the media uploader &amp; image selector, JetPack (+stats), and the custom post type feature. Other reasons too, but the bottom-line for me is that it still serves well as a certain type of tool, and so for all of the (mostly valid) criticisms it receives, it also kicks a lot of ass on several important fronts. But allowing access to all those directories &amp; scripts... it's bullshit. At some point it has to stop. Static assets need to go into a separate, collected location, and ajax endpoints need to go through admin-ajax. Anyhow, a WP hate-train could easily emerge, but I figured I'd mention a couple areas that personally cause me grief.
Good job on not making a crypto currency!
One free possibility may be [xhprof](https://blog.engineyard.com/2014/profiling-with-xhprof-xhgui-part-1). It's more of a profiler, but I don't see why it couldn't be used for monitoring, though it probably doesn't have alerting.
If you're in a shared host, you don't really have the option.
Graphite is an excellent tool for this. If you use one of the many StatsD client libraries, it should be super easy to add timings around those parts of your code. Then you'll start recording application metrics, and soon you'll have an insatiable hunger for data.
We had a 3rd party once who thought they were smart by creating a service into the application. Nothing wrong here. Now imagine you have the SiteController (I don't know if one is implemented by default, it seemed like this because one was located in the Yii class file and one was located at a different location inside the application): All your information runs through the missingAction with the full url as a parameter, ignoring the whole benefit of having seperate controllers with its actions that could behave differently, which in fact, they did by implementing several if-else statements. After that, depending on where you land, different modules are loaded that are able to rewrite the whole database via Yii-&gt;app ()-&gt;databaseService. I could go more in detail there but the keyword for me here is **Seperation of concerns**. Completely ignored and therefore more like a personal issue for me rather than a objektive one.
Maybe
First off, thank you for not barking at me, like some of the other responses ive got for making this software. second: whats wrong with HTML being outputted via php? it doesnt use MySql, so there isnt really another way. but if there is, and it doesnt involve MySQL, then please tell me
I agree with a lot of your sentiments here. It's well known that the reason WP doesn't improve on those fronts is that they don't want to break BC. But *clearly* that can't go on forever. At some point it either needs to change or else collapse under the weight of its own technical debt. So I'm just musing here, wondering what that's going to look like and if WP would even be able to survive the shift. 
The performance is pretty much on par. Both servers using a thread pool + event loops to service requests, and handing off to FCGI.
My experience with this has been with PyCharm on a Win7 box and an Ubuntu laptop: I get a pop-up dialog that says my license is in use elsewhere on the network, and it asks me if I would like to either a.) shut down the other instance of PyCharm &amp; re-validate that the license key is being used by ONLY one machine, or b.) shut down PyCharm on this machine. As mentioned in [my other comment](https://www.reddit.com/r/PHP/comments/2gjwy7/phpstorm_8_released/ckkwdob), this is kinda inconsistent - I only get the warning on my Ubuntu computer, not on my Windows computer. Another quirk is that if you just hit the "revalidate" option, it takes ~10 minutes for it to pop up that warning again. So in practice, it's actually something you can almost ignore. And so my understanding of the thread-OP's comment was that this feature is in the latest release of PhpStorm... but my experience indicates that perhaps it's not working on all platforms yet, so who knows? :)
His comment was that Laravel's conventions push towards a specific way of architecting an application (that is decoupled), and that Laravel has more convention and opinion out of the box than does Symfony. And, I agree that Laravel does that *more*. Some might disagree over whether it *needs* to be done.
What about the power and flexibility of the service containers? In Laravel would I have the ability to create a number of classes implementing let's say `FooInterface` and create a base service called `Bar` with the method `addFoo(FooInterface $foo)`. Is it possible that I could tag all the `FooInterface` services (e.g. with the 'bar' keyword) and have them automatically injected into the `Bar` service using the `addFoo()` method on container compile?
I don't see the benefit of this over Nginx. In fact, Nginx rules are much simpler than managing a plethora of .htaccess files. Unless you're using some antiquated PHP app that relies on htaccess, I really don't see the point. Hell, with Nginx + PHP-FPM + Efficient Caching, I can get Magento, a slow behemoth by anyone's standards, down to below 200ms response times.
well, it works perfectly without a database, i mean a database isnt really neccesary. also, i filtered all my inputs, so i still dont see how there is a security vulnerabillity. i know my code is really messy and looks like a five year old wrote it, but it is secure, and it works right out of the box with minimal and user friendly set up. If you want to talk about my code organization and practice, then i guess you are right, and i do need some advice, but my code isnt wrong, or buggy, or insecure, its just poorly written
http://xkcd.com/327/
So basically JavaScript's ||? I like it.
Try giving New Relic's sales team a call. They do negotiate pricing. If your applications are small scale, which your question implies, they'll likely knock the price down for you. If you're set on not using New Relic, you can rent Zend Server on AWS. For smaller scales, it comes out cheaper than New Relic. https://aws.amazon.com/marketplace/pp/B00JJADWV6/ref=portal_asin_url If you're set on rolling your own, you'll be spending your time custom gathering the data you want. Zabbix is a great choice for the monitoring platform in that case.
Based on the downvotes my only guess is that you want method overloading, but only for methods with same amount of arguments, and ofc your example would still require scalar typehints.
&gt; it pushes you towards more well architected code than Symfony does. hes saying it does it better than symfony. 
That does sound horrible, but it sounds like a horribly written controller done by someone who doesn't understand MVC. Yii does not advocate one controller per app, and even basic scaffolding generates multiple controllers. How do other frameworks prevent someone from writing shitty controllers?
Yes.
All session data is transient. I'm not sure why you'd want to introduce multiple session storage mechanisms for different datums. Seems like a lot of complexity and scalability headaches for zero benefit to me.
&gt;Since you never REALLY know what's gonna happen far enough in the future, and it pays to be a bit more flexible in this case.. No, that is how you end up with a mess. Increased flexibility often comes with a cost (not apparent up front often). Aiming for maximum flexibility indiscriminately is the novice mistake every single one of us make. In this particular case I ll go with the second one. Not because I ll always go with the less flexible option, but I don't see the need for the increased flexibility, right now. 
&gt; its just poorly written Poorly written code CAN hide bugs and security issues more easily than better organized code..
Not that the two are not equivalent: `array_merge()` replaces existing string keys, `+=` preserves existing string keys (generally making it a better fit for this use case).
Laravel uses an encryption key with AES-256 using Mcrypt by default. Codeigniter uses CBC using Mcrypt by default. I would say both are fine for development purposes, but I also agree that it is almost always not a good idea, especially for production use.
While it may be fun/interesting to do things without a database, there's a few key things that I think it's important for you to understand: First, this approach, of all the flat file storage systems, is still quite poor. It simply does not scale, upgrading is difficult, you can't switch out templates, and almost none of the code in the project is reusable if you decide to add functionality. Building something around storing flat JSON files or similar would be significantly better. More importantly, however, is that the quality of this code generally indicates that you would benefit from using a database, a tool actually made for this job, and spending more time focusing on making your code better. If you want to be a good developer, you have a long ways to go, and would benefit from avoiding detours with novelties like not using a database that really just make you seem hard-headed or like you have some religious hatred towards using the right tools for the job.
In my opinion, that defeats the purpose of type hinting an interface rather than a concrete class. The purpose of such should be that, regardless of what implementation of the interface is injected, the correct API and (ideally) return data will be available. Granted the API will be the same, what's to say that the returned data will be (stupid PHP and its lack of return type hinting)? I'm genuinely interested in why I might be "incorrect". You're example sounds like exactly something I would never do. Maybe there's another use case that would make more sense?
Well shit, you are 100% right. I've been laboring under the mistaken impression that you couldn't bind concrete classes into the IoC, only interfaces / abstract classes. 
Sarcasm detected / upvoted.
So type hinting the interface is just your classes way of saying that it requires an object that fulfills certain requirements (a contract as we call it). We shouldn't derive from this that only a single class should be allowed to fulfill this contract in the context of your application. It's pretty simple. By doing DI through typehinting it does make it require less boilerplate and easier, and this will cover most cases but there are definitely times where this is a limitation. There is an example in one of my more recent comments. I'll link it when I'm not on my phone. 
Option 2. `Array $rules = [], Array $attributes = []` has meaning to me. `Array $config = []` does not. You might want to encourage this type of usage in your docs: `$fieldBuilder-&gt;text($label)-&gt;setRules([])-&gt;setAttributes([])` if you are worried about having to add more parameters in the future.
The Enterprise FPC is pretty fast. Especially if it's stored in RAM via Redis . [link](http://magento.stackexchange.com/questions/4264/redis-on-magento-enterprise-1-13)
I did say efficient caching, this includes a FPC module.
Why would you answer "yes" if you don't understand the question? [Working with Tagged Services](http://symfony.com/doc/master/components/dependency_injection/tags.html). Edit: Someone's [butthurt](https://twitter.com/taylorotwell/status/512058755618324480).
I understand your description of what you want to do, just not Symfony tags: $container-&gt;resolvingAny(function($instance, $container) { if ($instance instanceof Bar) { $instance-&gt;setFoo($container-&gt;make('FooInterface')); } });
Wordpress is by far the easier CMS to use from the client's perspective. But it's also less powerful to configure from the client's perspective (unless you install a theme framework to augment its functionality). From the developer's perspective, they're both gross to customize when you have to get into the code level of things. Wordpress is probably easier because it's less abstract than Drupal is. To summarize: **Wordpress** - Easiest for clients to use - Easier for developers to customize at a code-level - Limited out of the box functionality, requiring you to dive into code-level customizations sooner than Drupal. **Drupal** - Harder for clients to use, but more flexible - Harder for developers to customize at a code-level (though Drupal 8 might be a different story since it's going to follow modern architectural patterns more closely) - More flexible out of the box functionality in terms of building taxonomies and layouts - This added flexibility can save you from having to dive into code-level customizations that you would otherwise have to do in Wordpress. This is of course totally ignoring the plugin and theme ecosystems for each, which I don't know enough about to really discuss either way. And how easy/hard it is to customize at a code level totally depends on what you're trying to customize.
Sweet! That sample really helped. I used it (with minor alterations) and it works without a hitch. No error messages; no problems. Thank you. http://imgur.com/a/SACmM And don't worry, I studied it and understood it before I made use of it. I am also starting to see what went wrong before. I'll try adding functionality to the calculator next. I think it'll be an interesting challenge.
&gt; So type hinting the interface is just your classes way of saying that it requires an object that fulfills certain requirements (a contract as we call it). We shouldn't derive from this that only a single class should be allowed to fulfill this contract in the context of your application. It's pretty simple. Agreed, that's the whole point of type hinting an interface. But, because of the contract, *every* implementation of the interface should provide the required functionality. Where is the need to inject a *specific* implementation? While writing that, I think I just answered my own question. I could see some sort of TransactionalEmailInterface being implemented using both SMTP and, let's say, Mandrill. Maybe you wanted to specifically use SMTP for one part of your app. It isn't your code specifically that requires SMTP, just a choice as the developer. Is that about right? That makes more sense to me -- it's not that your code expects a concrete implementation, you just might want to make that decision for the code.
The 2nd one is better but swap the order of $attrs and $rules. People want to *see* their fields before they start adding validation to them.
Same here. My existing project is using Codeigniter. For new projects, I may use Phalcon. I went through the basics of Laravel and didn't like it. Now I am going through Phalcon to decide whether to use it for new projects.
Cool! The need for that makes sense, I just haven't run into such a need myself. Thanks for the perspective. :)
No problem. I didn't think it was an issue myself until I ran into a case when I needed it. Thanks for the good discussion =).
I'm kinda stuck on 1.4 since a very big project of mine is based on it. Have you tried 1.4? How big is the leap to v2?
Not sure that's what he wants Taylor, pseudo code of what he wants would be: $container-&gt;bind('Bar', function ($container) { $bar = new Bar(); foreach ($thingInTheContainerThatIsAFooInterface as $foo) { $bar-&gt;addFoo($foo); } return $bar; }); Edit: The way we do this with Pimple, is have some sort of array they can append to, so: $container['foos'][] = 'key.to.my.foo.in.container'; Then the factory iterates over the keys, getting them from the container and adding them. 
The only issue comes when you want to define multiple services that resolve to the same class. Don't get me wrong, I think you've done some amazing work with Laravel. This is just one of the limitations of laravels container that led me to choose symfony over Laravel (although I still enjoy working with Laravel on smaller side projects).
I'm not sure how valid this is but I don't like how the index.php file in Laravel isn't in the root folder. I find it something of a pain to set up since for all my projects the index.php is in /home/some_user/public_html, then there's laravel being in /home/some_user/public_html/public
Ah! OK. Nope, we don't support that yet. Will look into adding that. Thanks for the explanation.
Can you explain more what you want to do, maybe with pseudo-code? It may be possible in Laravel, but I haven't documented it well enough. Or, if it's not possible I can look into adding it.
[http://oi44.tinypic.com/ngsimr.jpg](http://oi44.tinypic.com/ngsimr.jpg)
Is it required that either Wordpress or Drupal is used? I would avoid both of them as much as possible and would instead go with something like Perch. While it does cost money it's really not all that much and you will save that in developer time. It's also very customer and developer friendly.
Edit: Implemented for next release.
Here's how you'd get an array in and out of a $_SESSION variable &lt;?php session_start(); $example_array = array ( 'testprop' =&gt; 'testval') ; $_SESSION['my_data'] = $example_array; $result = $_SESSION['my_data']; echo $result['testprop']; ?&gt; Sorry it's ugly.
Wtf is with the downvote brigade? He asked a question and people are giving him answers. Nobody is replying and offering their input, just downvoting. 
Yea, running on Mac here.
What kind of support would you like though? I can't see what more they could really offer that can't already be achieved. I mean they could give you generators I suppose but why would they duplicate what you can already do between Artisan, Way Generators and snippets/templates? Don't get me wrong, I'm all for better tools for the framework I use, but I am struggling to see just what else they could add :) 
[Kibana](http://www.elasticsearch.org/overview/kibana/) on ElasticSearch? You do need to log your own data, but you might like that.
Thanks, but that problem has been solved :) Although slightly differently. http://imgur.com/a/SACmM. The way you do it, I think, didn't work for me. I believe it is what I tried, but with my untrained eye, I can't say I am completely sure.
Personally I really don't like option arrays at all. You always have to look at the docs or sift through code. Proper classes with accessors can be auto-completed by the IDE. 
What do you mean? I use it as a general guide if I need. But once you start using the structure window and bookmarks, CodeGlance kinda becomes obsolete. Imo
&gt; Drupal is for "developers" who build sites by point and clicking stuff Thank you for the reply! Can you expand on that? I always had the same thought that "drupal is for developers" in the sense it was "good" to develop with :) Looking at Drupal 8 only
Thx for the support! Probably downvotes because it might be a flamebaity question... but alas
thanks for the thoughts!
ty for the analysis! 
&gt; The problem is both have a rather outdated architecture. Neither follows any sort of MVC structure. Do you include drupal 8 in this?
That happened to me once. Though I was using cURL by itself, not as PHP's api. Anyway, I solved it by sending some browser agent details. Apparently, in my case the site validated each incomming HTTP request, and allowed access only those sent from browsers, and ignored the suspicious ones
Ok so lets say I wanted to allow the user to pass me a configuration, and from that configuration I would create services. For example, lets say I have a service that aggregates data into reports. It takes in a collection of Statistics objects, the only differences between each one is how they are configured. Lets say I have 4 different external places I want to query. The way I query each one is almost identical, but the credentials and url that is being queried is different for each one. The information they give back is the same So I would make 3 classes here. 1 which is just a basic connection class, with the credentials and location to query: Class ExternalConnection implements ExternalConnectionInterface { protected $urlToQuery; protected $username; protected $password; public __construct($urlToQuery, $userName, $password) public sendQuery($queryContent); //Queries outside service, returns data from it. } So now I want to query 4 different connections, the only thing that varies from one to the other is the credentials and url. I make a class that takes a single connection object Class StatisticsRetreiver { protected $externalConnection; public __construct(ExternalConnection $externalConnection) public getUsageInTimeRange($start, $end) { $query = //make query from params $response = $this-&gt;externalConnection-&gt;query($query); return $this-&gt;formatResponse($response); } public getUsageStatisticsByBrowser($browser) { $query = //make query from params $response = $this-&gt;externalConnection-&gt;query($query); return $this-&gt;formatResponse($response); } } Finally I have my report class Class StatisticsReport { public function construct($statisticsRetreivers) { $this-&gt;statisticsRetreivers = $statisticsRetreivers; } public function buildReport() { //Aggregate all the data from the different external connections, and build a report } } In Symfony they provide the Configuration class, where you can define basically a schema for the configuration options your bundle supports. For reference: * [The symfony documentation where I learned how to do this](http://symfony.com/doc/current/components/config/definition.html) * An example from the Framework bundle that ties the framework together by registering components into the container: * [Class which defines the configuration key/values that the framework supports out of the box](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php) * [Class which creates services/parameters in the container from the configuration](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php) So something like this in the Configuration class: $rootNode -&gt;children() -&gt;arrayNode('connections') -&gt;prototype('array') -&gt;children() -&gt;scalarNode('url')-&gt;end() -&gt;scalarNode('username')-&gt;end() -&gt;scalarNode('password')-&gt;end() -&gt;end() -&gt;end() -&gt;end() -&gt;end() Would allow me to go to the config.yml file and do this my_bundle: connections: connection1: url: http://example.com/api username: FrogPerson password: XXXX connection2: url: http://example2.com/api username: Hatman password: XXXX connection3: url: http://example3.com/api username: LizardZombie password: XXXX And I could then access these configuration values when defining my services as so. $retreiverCollectionDef = new Definition('Doctrine\Common\Collections\ArrayCollection'); $connections = $config['my_bundle']['connections'] $connectionCount = 0; foreach ($connections as $name =&gt; $connection) { // Definition($className, $arrayOfParametersPassedToConstructor) $connectionDef = new Definition('\Namespace\To\Connection', [$connection['url'], $connection['username'], $connection['password']]); $connectionId = 'my_bundle.connections.' . $connectionCount; $container-&gt;setDefinition($connectionId, $connectionDef); $retreiverDef = new Definition('\namespace\to\StatisticsRetreiver'], [new Reference($connectionId)]); $retreiverId = 'my_bundle.retreiver.' . $connectionCount; $container-&gt;setDefinition($retreiverId, $retreiverDef); $retreiverCollectionDef-&gt;addMethodCall('set', [$name, new Reference($retreiverId)]); } $container-&gt;setDefinition('my_bundle.report.retreiver_collection)', $retreiverCollectionDef); I would then make a service for each connection (multiple services for a single class) and then inject each one of these services into the Report class. I actually think this is one of the clunkier parts of Symfony that could definitely do with a rework to give it an easier to use API, but I really do appreciate having it at times as once I finish defining how to go from configuration to new services it makes maintaining it much easier and allows me fully seperate my concerns I'm not sure how this could be done with reflection based injection. What I think would be really cool is to have a combination of the two. A container that checks to see if a class is explicity defined to be injected, and if not then the container checks to see if there is an intance of the class or interface bound to the typehinted class, and if there is then it injects that class. That way you only write the extra boilerplate when its required. This isn't meant to be a symfony vs laravel example, its just an example of a scenario I did come across that I felt I could't adequately separate my concerns as well as I'd like with the features provided by the Laravel container. I tend to come across overly harsh in my criticisms often so I just want to restate that I do really like a lot of the work you've done (even when I do criticize some of your other decisions). =)
Not a requirement, but generally the support/community/plugins is better with something "large" I've found. Thx for the reply (I didn't downvote!) I will check out Perch for some due diligence 
Thanks, I have no idea who why someone would down vote this. I think too many people have developer boners over certain frameworks / tools :P
I'd really like to see this, but I'd really like to see a strict version, and a lax version: Allow a lax/coercive model that does not assign 0, false, or "" $foo = $foo ?? $bar; // $foo = !empty($foo) ? $foo : $bar; A strict model that allows $foo to be anything, even "", 0, or false $foo = $foo ??? $bar; // $foo = isset($foo) ? $foo : $bar;
Yeah so basically this post is not about attacking your project but realistically there's stuff that Symfony does that Laravel doesn't and instead of waiting for your next backward breaking release I think I'll just stick with Symfony thanks.
And another one of those things just got checked off the list ;)
Well shit. You gotta stop fixing my issues with Laravel else I won't have anything left to complain about. Good stuff Taylor!
&gt; Sweet! That sample really helped. I used it (with minor alterations) and it works without a hitch. No error messages; no problems. Thank you. Glad to help! Just keep in mind your application is currently vulnerable to cross site scripting attacks since you're not validating input and you're not escaping output(i.e. echo $value instead of echo htmlentities($value))
Can you post a snippet of what you did? I rarely deal with CURL, and far more rarely ever deal with headers.
I'm not sure I completely understand that, but atm I am running everything locally, so I'm safe as can be. Speaking in general terms, I know little about security.
According to the core team, there is only one beta blocker right now (see https://groups.drupal.org/node/440868)
If you are really against exec* type functions, maybe check out http://symfony.com/doc/current/components/process.html This uses the proc_* functions to run child processes but, for the purposes of this discussion, its just a fancy exec call - so it doesn't really serve as an answer to your question. What is the reason you don't want to allow PHP to use exec* functions? I understand there is some general FUD when it comes to using them, which may not be completely misplaced; system calls are powerful and if used wrongly can cause damage. But so can lots of other native php functions ( unlink, fwrite etc...) if used wrongly. If you know the environment your code is running in, and you use them with care, then generally speaking calls to system tools can be the most efficient way to complete a task. Manipulating large text files to the extent that grep/sed/awk etc allow cannot be done cost effectively (both CPU cycles and developer time) in PHP alone. 
Seconded, both drupal and wp are showing their age in both UX and architecture. I know nothing of Perch, but I do prefer apostrophe 2 for the same reasons.
&gt; apostrophe 2 that looks pretty spiffy! 
If you're willing to put work into it, for a complex content model, Drupal could shake out a lot more intuitive in the end though. For instance, if your editors are creating complicated objects with lots of relations to other objects, etc, then I think you'd probably end up with a fairly clumsy Wordpress user experience, but could make something fairly intuitive in Drupal. This is a pretty irrelevant point though, as hopefully nobody would be building that sort of complicated app in Wordpress to start with.
Except it literally takes 2 min to upgrade. Timed it. Enjoy typing boilerplate nonsense until your fingers bleed. :)
In PHP, add `CURLOPT_USERAGENT` to your setopt_ array. In the command line, you can use the --user-agent argument to specify a custom one. This will overwrite the default cURL user agent and fool the website (to some degree) into thinking the request came from an actual browser. Additionally, you can look into the access and error logs for more details. Also, I would double check the $apiPath variable to make sure it points to the correct path.
I personally recommend this [book](http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1430260319/ref=sr_1_6?ie=UTF8&amp;qid=1410997221&amp;sr=8-6&amp;keywords=php) if you're a non-beginner as you mentioned. 
A bit decoded: http://pastebin.com/WPyQetmR It *seems* to only send mail based on data that has been POSTed to the script.
The [PHP.net documentation](http://php.net/manual/en/appendices.php) lists all the language improvements for [5.4](http://php.net/manual/en/migration54.new-features.php), [5.5](http://php.net/manual/en/migration55.new-features.php), and [5.6](http://php.net/manual/en/migration56.new-features.php) with some examples. [PHP: The Right Way](http://www.phptherightway.com/) covers the latest tools, methodologies, and contributions to the PHP ecosystem. Skim through it for now and bookmark it for future reference.
If you favor BDD, consider [PHO](https://github.com/danielstjules/pho). It's simple and effective, it doesn't add too many bells and whistles to the mix and sticks to the RSpec/Jasmine style which I find much more approachable than say, behat. 
I disagree also. You get the ease of point and click for certain things where it makes sense, but you can also jump in and do it in code if you want too. Drupal 8 with its settings api let you do even more without having to touch the dashboard.
You have until November. Now go!
Tried that. Still no luck :(
So this changes massively if you're looking at Drupal 8, and as you didn't mention that up top, lots of peoples' comments here will be wide of the mark. There are huge improvements in the out of the box user editing experience in 8, originally out of an initiative called [Spark](https://www.drupal.org/community-initiatives/drupal-core/spark). Some of this is backported to Drupal 7 (but not to core) and when we show clients how well it does in place editing etc they tend to be rather amazed. I have no idea where Wordpress is in comparison - I'm sure they've been making their own improvements too, but it may be that Drupal is good enough from an editing POV, and you may want to look at your other requirements before making a choice.
enormous. Laravel is much more similar to sf1 than Symfony2
Smells to me like something more exotic in your Nginx config around determining what URI routes to pass on HHVM via FastCGI. 
Compare request headers.
I never used it in sublime to actually view the code, it is just ocd that the text is actually readable in sublime, and looks like blocks in CodeGlance.
I'm glad to see someone actually read and respected the OP's question.
I've been coding PHP for a long time as well, but instead of a book highlighting all the changes which are covered pretty well in PHP.net's own changelogs I will instead recommend this book: https://leanpub.com/php A bunch of stuff I should have known, but didn't!
Sounds like a redirect? See [Section 3.8](http://curl.haxx.se/docs/faq.html#How_do_I_tell_curl_to_follow_HTT) In PHP you do it like this: `curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);` Add it to your opt array, see if it helps?
My dream is that the debugger would keep running even with the inspector open. But as it is, open the inspector, debug dies.
Not a book, but I have learned a ton from Laracasts in the past year.
I know mocks, stubs, and spies but have never heard of a dummy. What is a dummy?
Have you tried clearing your browser cache?
Best user experience I've found in a CMS is Concrete5. Editing happens on the front-end (this is baked into the system, not a hacky addon). Also, users add discrete blocks of content to the page, instead of having a fixed fields (as with Drupal) or just 1 wysiwyg editor for the entire body (as with Wordpress). I've has drastically reduced training and support with my users because of concrete5. The arguments against C5 usually boil down to lack of dev community, lack of documentation, not as much mindshare as Wordpress/Drupal -- and those are valid arguments. But your question was specifically about the best user experience, and concrete5 is it. PS - if you do wind up going with Wordpress, do yourself (and your users) a favor and utilize the Advanced Custom Field plugin. Good luck!
Not really - but if you prefer working with Apache conf (I don't) then it's an option. Being able to compile Nginx from source in under a minute on basic hardware and end up with a short and sweet approx 200K binary sits with me much nicer than Apache these days :) 
I've had awesome results with Nginx and the FastCGI cache component, which is baked in - works a treat for Wordpress sites where most of your pages are static. https://gist.github.com/magnetikonline/10450786 A very handy thing to have in your bag of tricks. 
Wow this place is such a trash heap of stupidity.
&gt; I can't easily wire that up in Laravel's IoC. I can only bind a concretion to an abstraction globally, not per-caller. Of course I can always new up the class and construct it manually, but that's harder to do with controllers than my own objects. Actually, I haven't tried this myself but I *think* you can bind your controllers in Laravel's IoC container as with any other class. So you could use a function closure to return a new instance of ControllerA with one implementation of DependencyInterface, and use another closure to return a new instance of ControllerB with the other implementation of DependencyInterface. 
 &lt;p align="center"&gt;&lt;font color="red"&gt;&lt;b&gt;Incorrect Password&lt;/b&gt; &lt;br&gt;Please enter the correct password&lt;/font&gt;&lt;/p&gt; You should go back and learn how to properly write HTML before you even try anything with PHP.
Really? That's weird. These are on the same monitor @ 1920x1080 [sublime](http://i.imgur.com/fAGMrz5.png) [PhpStorm / CodeGlance](http://i.imgur.com/CoFUYRU.png)
It comes it a cellophane plastic wrapped container, right? Typically, larger 3rd party solutions are 'well' though out for the end-user, and as such, are tested, tested, and tested more for UI and UX importance. Developing something custom tends to also come with a lot of training, documenting things, and fixing things (ie; instead of downloading a patch that thousands of others have).
Thought that was pretty obviously a joke. 
Seriously? I made a joke. Ffs, does no one get irony if it's not concluded with "/s ;) lolol"?
it was.... lol
Its a 100% rewrite.
Because only the public directory of Laravel should be web accessible. Having it in the root means a lot more work would be required to secure your application. As potentially all of your database configs and such could be open to the world if someone knows the structure of Laravel.
The only advice you really need in this situation is: *don't make a form-builder*. It's are really bad way to waste time =/
It definitely looks... interesting, but why? Is there a use case or is it just for fun?
Sentiment analysis aims to determine the attitude of a speaker or a writer with respect to some topic or the overall contextual polarity of a document. The attitude may be his or her judgment or evaluation, affective state (that is to say, the emotional state of the author when writing), or the intended emotional communication (that is to say, the emotional effect the author wishes to have on the reader). [Read More...](http://en.wikipedia.org/wiki/Sentiment_analysis)
just read the manual and the change logs... they do a good job on updating you on new features. Only issue I have is when I have to go back to using an older PHP version and try to use new features or functions.
Not yet, had the plan on building this package a while back but never got around to it. Decided to do it tonight. :)
Did you manually compile that list of words? 
No, the default AFINN list of words is from [AFINN-111](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010)
Fair enough, but in Laravel when I call `Auth::user()` to retrieve the authenticated user from what you refer to as an application session, it's actually retrieving that data from a server session using the same driver that stores flash messages. In Laravel land, I cannot easily separate these two concepts. Hence my request to break application session / authentication session out of the same handling mechanism as flash messages and other volatile session information that needs nothing more than simple key/value storage. That way I could have application sessions in a robust relational table, while leaving server sessions in the native driver. Of course, I can go ahead and implement my own solution to this, but I would rather have support for this out of the box in Laravel since this is a very common "best practice" pattern for any social website. Especially in conjunction with point #2, about having different sessions for different user levels to help avoid session hijacking and fixation attacks of admin accounts.
Exactly that. Ia've talked to him on that matter already. Sadly his response was: "It works best for me". Well the best prevention of this, regardless the framework, is communication. If you leave unexperienced people behind, this is what happens on the next project. Therefore his company should start to understand why people turn them down more often and act with countermeasures e.g. a Workshop day where zhose people are able to learn the basics of software development and architecture. I am currently working in symfony2 context and once you understands the **Inversion of Control** I think you are good to go
This sounds great! Looking forward to seeing the well architected code and docs. Keep up the good work.
Here's a friendly reply you can use (for free!): "Laravel uses some Symfony components; we're very grateful for FabPot and the other contributor's work on these. Laravel also uses some other great third party components that play a big part. Much of the codebase is Laravel/Illuminate too, including IMHO some really nice bits of code."
So how does "Hey you worthless scumbag" score?
Also, social networks use sentiment analysis for years now, they analyze their users' mood, and a lot of other factors. A research engineer I know used a similar model for determining yearly suicide rates, etc. This can be used for many good things. Awesome job!
Check out the [new PHP syntax reference](http://codelegance.com/new-php-syntax-reference/).
Thanks, I'll have a look
I really like this. I have a question about a specific use case - this may be in the documentation, but I haven't spotted it yet. Our CI server pushes a zipped file to Amazon S3 for each build, and we then have a custom interface which lists the versions available, and allows us to pull one down to our live server. I wondered if there are any provisions for plugging in SDKs for S3 or cloud files etc. into rocketeer? My next question - is there any tool for a GUI? I'm very comfortable using the command line, but sometimes it's nice to be able to deploy/rollback code from your mobile - especially if you're already in the pub when you notice your 17:25 Friday release has gone wrong :)
Good news, the library seems to support reddit :)
I use both Drupal and Wordpress in my daily job, and have used ExpressionEngine, Concrete5 and various other CMSs in the past. IMO Drupal has too many ways to accomplish a task, it gets overly complicated to do simple things. Lots of things are stored in the database that makes working in multiple environments a pain and upgrading between major versions is usually a lot of work. Wordpress is fine for really simple sites. If I could choose any CMS to work with it would be [Craft](http://buildwithcraft.com/features/new). Its not free but its definitely worth the money.
It would have to be in Visual Basic. With a 10 meg pipe. I guess it could reside anywhere really. In my current set up its completely separate, and uses PHPSec lib to scp the file upto the live box. I guess something that just pulls the strings of rocketeer, essentially initiating the same commands as you would from the command line. Is rocketeer separated enough from the symfony/console commands to allow a Controller to be used to kick of the heavy lifting from an HTTP request? Thanks for your answers!
It is, 95% of commands usually just fire up a dedicated service, which can be done from anywhere. Other 5% being commands like "current release" and such but even then, it still calls internal methods. I'm used to treating my commands like controllers, just transport layer so, should be fairly easy to pull off.
I guess you got downvoted by those that didn't read the README. I'm wondering how it scores too.
What situation would *require* the use of htaccess? Shared hosting environments don't count since you wouldn't be able to set this up, plus if you had enough traffic where using FPM mattered you wouldn't be using a shared host. (Not to mention the cheapest plans on Linode/Digital Ocean are as cheap as shared hosting anyway.)
&gt; No, because text does not convey tone. Yes of course it does, if you actually *read* it. Come on, how could that have been a genuine comment?
Disclaimer : I am one of the core developers of Aura. Before using Aura, I have used to work on ZF1. I love aura for * to learn about the architectural decisions of a framework * it is not new, but from the experience of building other frameworks like SolarPHP, and a few components of Zend framework v1, Savant and many more Things I don't like are : * slow response for PR or issues . Actually we try to address this, but sometimes the wait time is a bit more. I could not blame the slow response time for none of the contributors are paid from aura. They have a family to look after, and work to make a living. From x-user who is new to aura, or framework they may find * hard, if you are new to depenedency injection * lack or missing informations for framework v2 * lack of good examples * less people in the community( may be ?) I with the help of /u/pmjones is working on documentation of framework to be fixed https://leanpub.com/aurav2/read and also working on examples https://github.com/harikt/Aura.Blog/ to fix some of the issues addressed. Thank you
The index.php *is* in the root folder. You should rename the `public` folder to `public_html`, maybe that will help you understand. That is the root. You have the folders like app, bootstrap, vendor alongside the public folder. In your example they should be at `/home/some_user/app`, `/home/some_user/bootstrap` and `/home/some_user/vendor`. The documentation doesn't bother explaining this though, so I understand how it's confusing.
 $foo = $foo ?? $foo ?: $bar; :D
&gt; You are aware of the predominant tone in this subreddit? Yes and it's not one of people demanding someone should program something in no time at all.
I didn't dig too deep into the implementation, but how would this library handle things like "not bad"; where the words are both 'negative' but when put together actually mean neutral/positive?
How does it compare to existing projects such as [phpInsight](https://github.com/JWHennessey/phpInsight)?
comparing wordpress and drupal is just wrong, sorry! wordpress is a blogging system ... drupal is a CMS of course you can "abuse" wordpress as a CMS but if you really want a cms dont chose wordpres, if you want a blog, chose wordpress if you want a CMS you might want to check out other cms like typo3 joomla etc, as drupal is only one of them, the 3 mentioned are all very elaborate ones, there might be much simpler ones yet that might suit your need. 
Nope. Nope, I don't understand.
Yea I didn't get the joke either because of your second sentence which can be interpreted as a sarcastic reference to something that is actually true (usually you don't want to incorporate everything everyone tells you to; you want to think it through).
It is only the default that classes are automatically resolved. At any point you can override the resolution rules for any class :)
Awesome. Thanks a lot for taking the time to answer!
Ehhh.... ok. You are out front (start) house with 3 rooms. Out front house is QR table with 3 QR code. You scan some QR code (room). This same codes are in every room: In room 'A' is code QR 'A', In room 'B' is code QR 'B', In room 'C' is code QR 'C'. For example you scan QR code 'B'. In smartphone browser display map, how to go from 'start' point to room 'B'. You go into the some room (but you don't know which room). You scan again code. If this room is 'B', in browser smartphone display information about this room 'B'. But if this room is not room 'B' in browser smartphone display map, how to go to room 'B' from room where you are. If In browser smartphone display information about room 'B', I scan other code 'A' or 'C', in smartphone display, how to go from room 'B' to room 'A' or 'C'. Now you understand? 
I think you need to break your problem down into something that doesn't require so much explanation. Posting a fairly complex issue like this, with a bunch of links to some code, makes it difficult to suggest a solution. Also, describing what you've tried already is generally useful. "I tried &lt;x&gt; but I got this error: &lt;e&gt;." etc. Personally, however, I don't think I will be any help to you.
i obiekt to non english variable names!
variables is doesn't matter in this scripts obiekt/obiekt1 = object/object1 
It's made to be used in production, AFAIK. 
What search terms did you use?
I don't tried anything yet, becouse I can devise how can I do this. I can't write otherwise :D Hmmm...I try. &amp;nbsp; 1. You are out front (start) museum with 3 rooms. 2. Out front museum is QR table with 3 QR code with picture. 3. You scan some QR code with picture. This same codes are on every pictures in other room, but next to picture is table with other 2 code QR 4. For example, you scan QR code 'B' from start place (out front museum). 5. In smartphone browser display map, how to go from 'start' point to room 'B'. 6. You go into the some room (but you don't know which room). 7. You scan code of picture. 8. If picture is the same picture on place start, in browser smartphone display information about this picture. **#####NOW IS######** But if this picture is not picture from start in browser smartphone display map, how to go to room with picture from room where you are to picture from 'start'. &amp;nbsp; #####NOW IS If In browser smartphone show information about picture 'B', I scan other code 'A' or 'C', in smartphone display, how to go from room 'B' to room 'A' or 'C'. 
Can't recommend [PHP The Right Way](http://www.phptherightway.com/) enough.. 
A good first step, but it shouldn't be a replacement for a validation email. I know it's a little extra work to do the randomized link generation handling and all, but it's worth it to not have bad addresses or data in your system.
Maybe it is based on the fonts I have setup, will have to look at it closer at some point.
`score:` -6 `Comparative:` 6 `Analysis:` Negative phrase.
Right now it splits the phrase up into their own words and compares them, it doesn't support words put together. 
It's useful to know a few things here: First: Apache 2.4 can be installed on 12.04 and 14.04 via ppa:ondrej/php5 - https://launchpad.net/~ondrej/+archive/ubuntu/php5 Second: Moving away from MPM Prefork is something I would definitely recommend (altho it necessitates using the PHP-FPM because its thread safe, over using the venerable mod-php). However, check out the difference between MPM Worker and MPM Event. Here is one of the better explanations about the difference that I've found: http://www.vps.net/blog/2013/04/08/apache-mpms-prefork-worker-and-event/ Third: The prescribed way of passing requests off to FastCGI (which php-fpm uses) in this article is overly complex compared to what you can do in apache 2.4+. By enabling proxy and proxy_fcgi, you can add this to your virtualhost configuration and be done with it: &lt;filesmatch \.php$=""&gt; SetHandler "proxy:fcgi://127.0.0.1:9000" &lt;/filesmatch&gt; Lastly, I would use Nginx if you have the ability to. It handles static files more efficiently and can do powerful things with easy configuration, such as cache results of requests proxied off to FastCGI (php-fpm). These slides have example: https://speakerdeck.com/fideloper/powering-your-applications-with-nginx Shameless plug: I have an eBook coming out very soon: http://book.serversforhackers.com. It covers all of this for Apache and Nginx in detail!
&gt; your second sentence which can be interpreted as a sarcastic reference to something that is actually true Are you talking about mattaugamer's comment or mine? Because their second sentence *was* sarcastic.
Well, it was made by Facebook to be used on their production server, and I believe they have much more than 200-400 page loads per seconds. I think there's something misconfigured here. Maybe you should run it on 1% of the request. Are you using it with XHGUI? It should also store stuff in Mongo, and you can configure it to set an age on documents and prune. Preferably, you should setup another cluster for the profiling so that it doesn't affect your production. Mongo should be easy to cluster, and if its running on SSDs it should be pretty quick too.
Never intended to imply that you should replace sending an actual email with mx lookup. What I was trying to say was that you could improve your email validation process with mx lookup. If mx lookup fails you can skip email sending, which can't be something bad. You can take the process further and also check for reverse dns for that email server. Regarding initial post, trying to validate an email address is not something I can agree with for multiple reasons. One of them is because there is no simple regular expression to solve this problem. You can view [this](http://ex-parrot.com/~pdw/Mail-RFC822-Address.html) fully RFC‑822 compliant regex, which is anything but simple.
If a user scans the qr code for room B from room C, it should show the path from C to B. Is that it? If so, you need to generate paths between all combinations of the rooms (as images probably). For example: A to B, A to C, B To C, B To A , etc etc. You all also need to generate QR codes for all combinations, like A to B, A to C, B to A, B to C etc etc. Then in every room, you need to put the QR codes that start with that room. For example, in room A, you put all the qr codes for A to B, and A to C. In room B, you put QR codes for B to A and B to C. When a user scans the QR code, and if it reads 'B to A', you can just show the image for the path from B to A from the set of images you have generated in step one.
mattaugamer's
That vendor name is because thats the name of my site. Everything I make that isn't for my company goes under that vendor namespace now. Which is usually fun or toy packages. Anything I make for my company goes under it's namespace.
I would prefer to see defined Rule and Attribute classes instead of arrays.
This is interesting in theory, but there are two weaknesses that prevent it from being actually useful. The first is that it relies on a wordlist with sentiment scores compiled by a single researcher. The second is that it is incapable of considering words in context. A far better approach is to combine lexical analysis with a large corpus of text (Twitter is great for this) and examine the frequency with which words and phrases in your input text appear in the corpus alongside known "positive" or "negative" words. The wordlist used in this project could be useful in this case. Combining this approach with a Bayesian classifier will produce far better results. The downside is that it will require some training. source: I did graduate work in natural language processing.
Ill shorten my answer: Yes it is the developers fault. 100%. It still does not taste my suites that I am able to expose everything from everywhere. That shouldn't mean that others aren't encouraged to try it out for themselves. Let's say I had a bad day back then and hope that you have a great time using Yii :)
Yes this is not the end. I have already planned to release it as a composer package. Thanks for suggestions. 
Yes i've seen that before, I can't help but think however an official edition supported by Sensio and in some way engineered by Fabpot would be more popular.
This seems pretty neat. I don't think I'd use it in any upcoming projects as I typically use Ansible.
Maybe put in place a router to handle requests. Route requests that you have not migrated to Symfony 2 to 1.4.
You're still confusing applications sessions and web server sessions. `Auth::user()` retrieves an authed user from the web server session. Whatever application-level state you want to tack onto it after that is completely up to you. Make your own table, tie it back to the session table via session ID (or whatever), expose it through a related ORM model, etc.
&gt;The second is that it is incapable of considering words in context. Yup, if, for example, I say "this package is fucking awesome" the overall score is 0 because "awesome" and "fucking" neutralize themselves. 
KNP is huge in the symfony world. Several of their employees are core contributors to symfony, and the head of the US side is the documentation guy for symfony.
I'm aware of who they are, you're talking about Ryan Weaver on the U.S. side. At the end of the day I wonder why Fabpot went and named it "Symfony Standard Edition" but then never released any other editions. I suppose my argument is the time has come to do so.
The array might have been generated using [var_export](http://us1.php.net/manual/en/function.var-export.php) which indexes arrays like that.
This is stupid cool.
I totally misread "Fabpot"
I was just looking at Symfony2 REST Edition yesterday. [link](https://github.com/gimler/symfony-rest-edition) It is authored by Lukas Smith . It might have something you're looking for
If you're using .htaccess, you don't care about performance. So...
I want to try the rad edition now... looks awesome!
This is the correct approach. However when building the sentiment engine into our search engine we found the Bayesian classifier was lacking ability with things like Sarcasm. So we modified our approach with some different algorithms which now detect sarcasm and other problems. Take it for a spin. http://engu.me Built with PHP :) 
Until recently mod security was only available for Apache which was why I liked using either the threaded or event based workers. 
Php fastcache. It's a nice way to switch caching types from apc, memcache, redis or sqllite very easily. 
Ah, cool. Always assumed mock's and dummies were the same thing.
I created this [ResourceBundle](https://github.com/ProgrammingAreHard/ResourceBundle) for this exact reason. It assumes you're building a REST API though. Some of the concepts will transfer over to non-REST projects though. It makes a lot of architecture decisions for you and, in my opinion, stays super flexible. It's very event-ful and decoratable(?) while staying away from magical stuff happening behind the scenes. 
Laravel just switched to using new release is 5 now instead of 4.3.
This subreddit?
So thanks for pointing this out, I was looking for something like this before I built my own. One question so far, how do I get it to stop asking me for a username/password for the repository when I have a deploy key for the server setup in the private repo? If I pass nothing when it asks, it still works like it should, but I don't want to keep hitting enter twice at those 2 steps. 
Nope. Drupal 8 is a major overhaul. Any criticisms of previous versions don't probably won't apply.
Everyone has to start somewhere. A little over a decade ago, one of my grade school friends asked me to help her maintain her Harry Potter RPG message board. I asked my parents for programming books and soon after, received four books - for HTML, CSS, Javascript and PHP. I read them religiously and learned a lot. I helped my friend maintain her forum for the next couple of years, and ultimately through that experience, decided that I wanted to become a programmer. I now work as a developer at the company where my friend's forum was hosted, and also worked at another message board company for several years during that time. Don't give up, but DO research ways to improve your skills as a developer. I've been in your shoes, and I'm sure I would have been damn proud of this code if I had written it as a new developer. Try not to take all this criticism personally; in the end, all of it will guide you and help you become a better developer. I look forward to watching CamelBoard develop.
Fair to say some of these fixes will need to land in 5.6.x?
That would be very sad.
instead of listing similar word with same score, what about using some regex pattern? ``` 'accident' =&gt; -2, 'accidental' =&gt; -2, 'accidentally' =&gt; -2, ```
I've been following Laravel for a while on discussions here (and reviewing its documentation) - on the one hand, you can see where the framework is trying to cover all the best practice bases... on the other hand, a framework is only as useful as the libraries you've built for it (as discussed in [If you've used Symfony extensively and have also used Laravel how does Laravel compare to Symfony in your opinion?](https://www.reddit.com/r/PHP/comments/2gm1kg/if_youve_used_symfony_extensively_and_have_also/)). If minor version changes affect the API and you don't have guaranteed patch releases for at least a couple of years, you're going to be playing catch-up frequently instead of adding useful new tools to your library (what's more, if you're building business applications, you'll be hard-pressed to convince your client that you'll need to spend billable hours on maintenance... but you'll get blamed if bugs or exploits become evident).
Pick a framework, sure. I'm not going to tell you which one to pick, but be sure to pick one that integrates composer and some form of database migrations. Saying that, Laravel is a pretty darned good framework to go with and quite accessible. It's not going to teach you how to be better at PHP, but how to be a better web software developer.
Ah right, I did mix that up a bit. FPM gets around the need for thread safety in Apache by being separate from Apache, rather than being a thread safe version of php (Which I believe is being developed as phpng?). Thanks 
Backwards compatibility is the argument, but it's not a reason to keep making things WORSE. Need new functionality? Five new .js files should do it. There is nothing that would hurt compatibility to place all that in an existing file. The problem it's developed like each developer works in a silo. Every person who "just adds a few more" all comes together to add a crap-tonne.
&gt; but when the project becomes more complex What would you say is this complexity threshold? What specific scenarios does Symfony shine? Also I never claimed that Laravel's terse syntax was more powerful, just that it doesn't limit you in any meaningful way.
We also swear a lot apparently.
fuck yeah we fucking do
Fucked-up voted you.
When are maintenance hours not billable though? In every situation I've been in that's ironclad in the contract. Laravel's changes can be annoying, but two hours upgrading are, in my experience, pretty standard. Clients always have the option not to upgrade. 
Bayes is great and all, but it doesn't always work. Especially for sentiment analysis with limited categorized data. It gets better if you increase N-gram size, but you need to increase your training data (exponentially?) to accommodate.
There are a few ways you can handle this. One would be stemming (Porter stemmer is popular algo for this: http://tartarus.org/martin/PorterStemmer/) Another approach could use something like Levenshtein distance (http://en.wikipedia.org/wiki/Levenshtein_distance). Stemming works pretty well, I've never actually tried Levenshtein for this because it seems computationally pretty heavy across a large corpus.
I work full time as a frontend/backend developer in .NET MVC, but freelance is PHP + Laravel (was CodeIgniter when I first started) developer. Laravel is one of the reasons PHP is starting to see a resurgence. It makes learning a new framework fun. All the while it is super easy to develop and employ. Not to mention that Laracasts.com is awesome. As far as responsive development goes you should consider a completely frontend workflow. I use Yeoman (grunt + bower) to easily create my frontend and have recently started learning Angular as my new FE framework. So Vagrant + Laravel + Yeoman is my main project creation. Probably cuts down a few days of dev at least.
This opens my eyes a bit, thanks for the perspective from the other side of the tracks.
&gt; How fucking hard do you need to make this? Spend a day with Joomla or Magento and you'll be asking yourself the same thing.
visit your candidate forums one by one, then post a topic with the title: "How do I use Laravel's Facades?" Pick the ones with the most comments/responses. You'll get your winner.
Could you elaborate on the first point?
I was getting JavaScript errors on every page that I tested, so nothing worked. Undefined function.
The first point is all about the active record pattern vs the data mapper pattern. There's a few blog posts about the pros and cons but this one is a good intro: http://russellscottwalker.blogspot.co.uk/2013/10/active-record-vs-data-mapper.html The basics of it is active record means your domain objects (the entities) have to know about persistence, which is a responsibility of the application, not the domain. Data mapper means the domain doesn't have to depend on the application. Active record has its place (it's great for rapid application development) but it makes it hard to write SOLID CODE.
On the login page it has a logo for "Green Lemon" not Green Leave? http://serverfordemo.com/green_leave/index.php/admin/login
Replace the '' by a strict null, that should make it stop asking you for them. I think that's mentioned somewhere in the docs but I need to add that to the "Credentials" usage section.
I like to think frameworks, at their core, offer 3 different major benefits. 1. Inversion of control. They take away the responsibility of pulling in and maintaining integration with outside libraries away from you and instead once you register them in the framework, it provides an easy way for you to access those in your own classes. 2. Battle tested components. A lot of what you write is extremely similar to what others have already written. Using a popular open source framework means that tons of other people have already encountered and fixed many of the issues bugs and strange edge cases you'd encounter if it tried to write similar tools from scratch. 3. Rapid development. Those tools listed in part 2 are already written for you and very well documented. They allow you to focus on the core of your application, the actual business logic. 
You'll probably hear this alot, but try Laravel. Read the Laravel docs, and I guarantee you'll make a simple login/registration app by the end of the day. I'd also recommend Laracasts, it's specifically tailored to Laravel and modern PHP development. (It is a paid resource, but at $9 p/m you can't go wrong) Try this Series: https://laracasts.com/series/build-a-laravel-app-from-scratch. I maybe preaching for Laravel here, but if you're a beginner it's the best place to start, especially as it's so opinionated it'll push you towards best practices and a secure way of building a login/registration app easily. Obviously go ahead and try other frameworks, but some can be pretty scary and generally throw people off. Laravel, however, is really nice to use. P.s. Imo, you've probably posted this question in the wrong place, a better place to start would probably be /r/phphelp. But I'll still help you out as much as I can. Resources: http://laravel.com/docs http://laracasts.com
so it's sessions and cookies that actually make a user be logged in?
If you're reusing the same arrangement of elements consistently (components and connections between them), good chances are that you've made your own framework. Libraries provide reusable functionality that you can use in many different structures. Frameworks provide reusable structure that you can use in many projects. If more people used your mysqli/Smarty/controller system (perhaps they do! I don't know), they could provide you really important feedback on how reusable the overall structure is. Big frameworks are just like this: many people contributing to share and improve a common architecture. There isn't a single technical thing that Symfony or any other framework has done that you coundn't do by yourself. You can write tests by yourself, implement any design pattern by yourself and create reusable code all alone. What popular frameworks can really help you with is their shared knowledge and community. Things move faster if more people are working on them. You can learn by using the technical achievements that a framework has implemented while delivering software powered by them. If you're interested in particular use cases, consider how hard would it be to test and prove your homegrown system in most distros (Ubuntu, Fedora, Windows, etc), many PHP versions, many servers (Apache, nginx, IIS) and countless different environments and situations. Symfony and many others have been proven stable under those conditions. You can deliver more and spend less time fixing things because other people will fix things for you. Perhaps you don't feel like you need all those extra use cases. Perhaps all of your projects are similar and Symfony would just bloat things away. The only way to know fore sure is to use and learn how they work. Remember, if you made a reusable structure, you can learn by seeing other popular reusable structures. 
ohh right, that makes sense. That's the bit I had no idea about, didn't know what keeps them logged in and so I couldn't look up how to do it. Thanks for the help!
Er, I think you are talking about Silex which I personally love very much.
&gt;and I always get the impression that it is a must to use a framework technically, it's not really optional: &gt; I use Smarty templating system ... I build my own classes ... and then obviously I make the controller pages calling the classes I made MVC. You are using a framework. You're just using a shit framework that only you understand. Patterns like MVC, request/response, IOC, etc are so well understood that it doesn't really matter that much what language you use, only that you use these patterns. .Net, Rails, Symfony, Django - they all do such an exceptional job of implementing these patterns that it's almost trivial to switch between them. You should ask yourself why you want to re-invent this wheel when there are already so many great wheels to choose from. BTW, if it's for fun or learning then I encourage you, but if it's for production then you are doing yourself and anyone else that touches your code a disservice.
I think that this is a good idea, but don't feel like your implementation lives up to the potential. This looks like a bunch of input boxes when it could be so much more, why isn't there a calendar that gives the head an overview of employee count on specific days? Why can't I see, when someone requests leave, that there is already x people off on that day? There's a ton of potential to make something really really good with this idea, have you tried speaking with your target audience (small businesses) about how they manage leave and what you can do to make it easier for them? I get the impression that for a small business that a spreadsheet would provide more value than this application at this point, but you could provide so much more value with a few core features. Also does distributing this through codecanyon make sense, does anyone want to download and host this sort of application themselves? I would expect this to function much better as SaaS, or at least provide a hosted version with a self hosted option.
If I may add to this with another key advantage: Community of developers. If you come across an issue there is likely to be dozens of developers who have encountered the same issue, making troubleshooting a lot easier. It also makes finding and training new developers in the future easier for the same reason. 
I've developed with PHP for years. But I chose to go back to ASP.NET. Mostly because in the PHP landscape there are so many frameworks, libraries and such that it's hard for me to know everything about every framework. So I worked with the Yii-framework because my employer was using that, but finding a job at another company was hard because no one else was using that framework. Another thing that disturbed me, was that PHP was lacking innovation. It gets passed by Java and .NET. For example, something genius as lamba-expression didn't reached PHP yet (yeah, Hack uses it). And also PHP is full of legacy stuff. So that's why I switched to ASP.NET. No regrets at all.
I think it's more subtle than that since PHP is already cut wood.
Can you please point me to an open source library you have architected?
No upgrade path to Symfony standard.
I don't know why you're getting downvoted for this, it's fundamentally true. People often forget that Ruby and Python have no intrinsic web bindings and that Django and Rails are "pure" frameworks built with them. PHP itself is a framework. Not a terribly well-organized one, but it has request, response, and server variables available that you can't even turn off when you run it on the command line. It was built to write web scripts, period. What a framework gives you is essentially organization, design patterns vetted by a large community, and interoperable boilerplate code for common use cases that can save you time when writing a more complex app. 
Wow, I just checked and you are right - not only are they still going, but it looks exactly like it did a decade ago - including tables for layout. I am speechless. 
Hello, It's funny, I'm kind of the opposite. I've used a frameworks for such while now, CakePHP, ZF, WordPress etc but I wondered about going without. Earlier this year, I've built a project without a framework to test that idea, you can read [this quick post](https://medium.com/@4d47/frameworkless-php-4148a2ae1ab4) about it. Hope you find it interesting for you. 
I've always been a little unclear on what the distinctions between MVP and MVC are. My rough understanding was that in MVP, presenters are tied to views, and in MVC, views are agnostic and the controller can do whatever it wants with whatever views it wants. It sounds like there is more to it. Can you explain a little further? That PDF didn't really help me.
Working in a Microsoft office as "the open source guy" I have to say I can see a lot of this. They are baffled as to why would would need anything more than cmd or powershell. They are resistant to build tools such as grunt/gulp. And they don't understand when I tell them the VS isn't very good when it comes to JS or PHP. They are some of the best and most passionate technologists I've ever worked with but the resitence to anything outside of Redmond can be almost unbearably frustrating at times.
My analogy I give businesses is: A project is "digging a hole" Php is: "a shovel" A framework is: "a ~~bulldozer~~ excavator"
Thanks for that, I'll have a read later on.
"This is the one shining negative here: .NET stunted my knowledge of HTML/CSS/Javascript" Interesting. I started with PHP and about a year ago I got hired into a .NET position. I found that that the developers here lacked basic JS/HTML/CSS skills (this may be due to a legacy codebase), but were good at knowing data structures, following better OO practices, and understood code flow better than me. This is probably partly because PHP is missing a lot of features that .NET has and partly due to my inexperience in a real programming position. In my opinion, I feel PHP stunted my knowledge of real programming languages.
Okay so in MVC: * A view object talks directly to a controller object. * The controller object talks directly to a model object. * The model object talks directly to a view object. Imagine a software application that controls the heating for a house. The software renders all the view objects on screen, including a 'temperature management' object. You tap on the increase temperature bit of the 'temperature management' view object, which sends a message directly to the 'temperature management' controller object with the message contents of 'increase temperature'. That 'temperature management' controller object talks to the whatever bit of the model that is appropriate e.g. tells the central heating to turn on. That 'central heating' model talks to the view directly and updates it to show that the central heating is now on. The key points of this are: * that all the objects exist and are active at once. * that they talk in a circle to each other. This is a completely different model to the alleged "MVC" in PHP where: * Requests hit a front controller e.g. app.php or index.php in the root of your web folder. * The front controller chooses which 'command objects' or 'command services' to run. (To be clear, the stuff in the controller directory of Zend, Symfony or Laravel frameworks are not really controllers - they do not decide what stuff to run, they just orchestrate communication between various objects) * The 'command object' fiddles with the model. * All the objects needed to display a page are rendered through a template to be output as HTML - this is the 'Presenter' bit. So imagine a web-server written in PHP that performs a similar role to the house heating control from above. * Clicking on the increase temperature button sends a request to the server, which sends it to the front controller. It does not send it directly to the 'temperature controller'. The front controller has to figure out which service to invoke. * The 'temperature manager' object talks to the central heating object and similar to above tells it to turn on. * But because the whole webpage needs to be redrawn, everything on it is re-rendered as HTML through the presenter, not just the single object that has been changed. Just to note, it is totally possible to implement 'classic' MVC in Javascript on _a_ webpage, where you can clearly have a set of model, view and controller objects for all the elements on that webpage. I'm not saying that MVP or MVC are better than the other - they are just different. But it is annoying that the PHP community is so bad at using names for design/architecture patterns correctly. Although the names are not that important, the concepts behind the patterns are, and using the wrong names makes it harder to think about what you are doing. 
And the same old arguments about whether the latest fads, such as OOP and separation of concerns are really something they need to leap into. It really is a shame. 
There's nothing in the whole code example which is even remotely OK.
&gt; So would it be appropriate to say that the distinction is that MVP operates on a page or screen level, and MVC is agnostic of the total picture and components operate independently from one another? Yes, though I'd put more emphasis on the fact that messages in MVC are passed in a loop, whereas MVP is a far more linear progression of messages. The HTML 'view' that is output by PHP is the final step, whereas in MVC the 'view' is not the end, as it's a loop and knows how to talk to controller objects. This shouldn't be too surprising, given the stateless nature of HTTP, where each request/response is totally separate. btw I'm not sure that PHP frameworks actually follows a strict MVP 'pattern' but they definitely process pages linearly are so are more similar to MVP than they are MVC.
I did the exact opposite as this guy.. I started to work with classic ASP developer, moved to .NET hated it and then accepted a PHP job offer. I will never regret my choice, as it opened my eyes to the wonders of the open source. My knowledge of html css and javascript is now pretty good. Actually even if my job is a php developer I mainly do javascript these days.
&gt; Just because you have models, views and controllers doesn't mean that you're using MVC [It divides a given software application into three interconnected parts, so as to separate internal representations of information from the ways that information is presented to or accepted from the user](http://en.wikipedia.org/wiki/Model-View-Controller) It doesn't need to be any more complicated.
You don't have to know everything about every framework. For example, I've never worked with Yii or Symfony - I learned CodeIgniter and moved to Laravel from that. I've interviewed and received offers from companies whose stack is Yii or Sylex and they expected me to learn the framework while picking up their codebase. Saying that every PHP developer should know everything about every single framework is like saying every mechanic should know everything (and every nuance) of every car ever made. That's what docs/manuals are for! You learn what you're working on. I guess some people will find a fault in anything. Oh, this language has too many frameworks to choose from? Better complain about that.
VS? 
No. PHP is a forest that has already been grown for you.
Will +1 this. I feel Python/Go/C helped me understand code flow much more so than PHP (and in turn made me a better PHP programmer). 
I think I see why I am getting confused. I've been building things in yii for a few years, and there is the ability (and sometimes expectation) for the view to call back to the controller. There is also ajax updating of page components without full page reload. It sound like what I am used to is a blurred line between the two, which is probably why it is taking me some time to see the difference between the two. Thanks!
I wasn't questioning OP's meaning, simply pointing out that building an app in PHP without an existing off-the-shelf framework is not necessarily the worst thing. I've built my own frameworks in PHP multiple times when the project was too small to warrant learning a whole new way of doing things. Especially with libraries like Aura and Hoa available, you can pick and choose the wheels that you wish to reinvent. 
&gt;Oh, this language has too many frameworks to choose from? Better complain about that. That made me laugh. Also, you get legacy .NET as well.
"jquery/1.3.0/jquery.min.js" ಠ_ಠ
I can't even....!
That's a great explanation of the differences, thanks. I'd just like to point out that this distinction is not unique to PHP, but to any server-side framework (Django, Rails, etc). As someone who learned MVC on iOS (even there it's not 'pure' MVC) and then came into the webdev world, that threw me for a loop for a bit. And now, in learning JS frameworks, I'm getting to know MV*. I do think that we use 'MVC' today to refer more to code organization than a design pattern. And for that it makes a lot of sense. The fact that we can break down (or further distinguish) MVC semantically into things like MVP, MVVM, MV*, MVW, etc can at first be confusing. Is there an example of a pure MVC design somewhere out there? Maybe not an entire framework, but something?
&gt;What would Symphony help me with - that would be hard to accomplish regularly? I've been a developer for about 20 years now and have played around with all types of frameworks and coding styles. Just recently (about 6 months ago) I decided I wanted to find 1 framework I would do all my PHP coding with. I finally settled on Symfony2 and spent the last 2 months working with it and continue to experience daily amazement about how fast and simple so many things are to accomplish (once you learn about them). The thing I like most about Symfony2 is that even though it is a framework it is very open to many styles of programming, and it has so much support for so many bundles. Want to use a template system? Ok Twig is included. Want to use a different one? Sure you can do that. Want to make your own or use PHP instead of template files? Yeah go right ahead. Want caching, or APC? Yeah it can do that, or not if you don't want to. It's so easy to match the framework to the needs of the project. The one downside is the learning curve. There are simply so many things to learn. For someone new to PHP it can be very challanging beccause you're not just learning PHP, you need to learn how to use Doctrine2, MVC coding practices, annotations, ORM, templating systems, OO programming practices, Composer, etc. Learning to do 95% of what Symfony2 has to offer is easy (great documentation, and so many things just make sense) but that last 5% is the most time consuming aspect. For example I'm working on a page that generates form fields based on what category you've choose (fields specific to automobiles will be displayed, vs choosing clothing sizes/colors). Setting up the database, controllers, templates and the code on inheriting various form data, and handling pages and validation was super easy and done in a few hours. But now I need to figure out how to access the submitted data on the next page to do the database insert. It should be super easy but have wasted a day trying to figure it out. I'm not saying it is better then any other framework but it is the one I decided was best for me and I love it. A few times a day I'll stand up and tell my room mate how amazing something is and show her (even though shes a designer and just doesn't care). But after spending the last 2 months working with Symfony2 I never want to hand code a site from scratch ever again.
...Using deprecated extensions and long out of date javascript library versions. And let's throw in an email validation regex that will fail with many perfectly legitimate email addresses just to boot. They did almost manage to not repeat jquery selectors in one case (they assigned it to a variable... but then proceeded to ignore that variable in most subsequent cases)
Visual Studio.
I think the bigger thing is that it's ***just a fucking anology, jesus titty fucking christ.***
I don't think it was meant to be a comparison.
I'm actually going to use this vague analogy strategy to derail the next meeting I'm in.
I have never met a .NET developer to use the "Visual Tools"... Because they're shit and no one uses them.
Either you're saying that frameworks are the wrong tool for the job, or you don't know a bulldozer from an excavator.
Success!
Yeah I meant excavator. I was in the middle of an edit and someone interrupted me.
Management doesn't see it that way. They think, at least in my case, "oh we use a shovel to dig a hole. But we can use an ~~bulldozer~~ excavator to dig the hole faster!"
Yes but osCommerce hasn't changed one single bit in the latest few years. Still the same old thing. Maybe only a few bugfixes.
&gt; Is there an example of a pure MVC design somewhere out there? Stuff written in Java Swing would almost certainly be a pure MVC design....though whether you want to force yourself to read Java Swing code is another question. I think Angular.js should be a real [MVC](https://developer.chrome.com/apps/app_frameworks) architecture - but I haven't actually used it in depth, and it allegedly comes with strong opinions about other design choices which are are not always awesome.
That be er AWESOME!!
If you need to port it, you'll have to do it by hand.
That's what I get for toilet redditing right after waking up...
Delphi was the pinnacle of drag &amp; drop... you could drag &amp; drop components, get clean code, and yet still dig deeper if you so wanted. Microsoft's autogenerated code, on the other hand... oh god...
I'm not sure what community you speak of, but I see a very clear path being cut out for PHP in the next coming years with an aim towards language maturity, bringing it up to speed in terms of certain missing features, as well as performance improvements across the board. &gt; No i'm not complaining about the amount of frameworks that are out there. But it's just one of the many considerations that I have for a platform. You just contradicted yourself - "I'm not complaining about the amount of frameworks that are out there, but I don't like a language that has too many". 
Oh no, please just no.
If you read it in Jeremy Clarksons voice, it's even more hilarious. 
MySQL instead of PDO or even MySQLi &amp;#3232;_&amp;#3232;
"An eye for an eye makes the whole world blind." Be the better man, Taylor. You've created an awesome framework, but is that all that matters? I encourage you to demonstrate that you're also an awesome person -- which I know is true because sometimes you do -- by not sinking to your critics' level when they flame-bait. *Choose* to be the leader who inspires and rises above the haters with a smile on your face. *Choose* to treat people with love in every instance -- even those who don't treat you with respect. Your personal legacy is far more important than the future of Laravel. I'm hoping for great things on both fronts.
 public static function removeEmoji($text){ // Emoji are not supported by MySQL's utf8_general_ci character encoding, require utf8mb4_general_ci // one source was feeding us "%F0%9F%8D%BB", an Emoji for "Clinking Beer Mugs" // Match Emoticons $regexEmoticons = '/[\x{1F600}-\x{1F64F}]/u'; $clean_text = preg_replace($regexEmoticons, '', $text); // Match Miscellaneous Symbols and Pictographs $regexSymbols = '/[\x{1F300}-\x{1F5FF}]/u'; $clean_text = preg_replace($regexSymbols, '', $clean_text); // Match Transport And Map Symbols $regexTransport = '/[\x{1F680}-\x{1F6FF}]/u'; $clean_text = preg_replace($regexTransport, '', $clean_text); return trim($clean_text); }
haha. I'm gonna put this in some obscure function in one of my projects. Only to find it years later and confuse myself or someone else.
Well if cutting your own wood is analogous to building framework-esque components yourself, and going to home depot and buying pre-cut wood is analogous to using a framework, then going one level deeper implies that PHP itself cannot be cut wood, it must be the forest the wood was cut from.
Have you ever considered that maybe competition drives innovation? When Fabpot or Taylor sat down to write their frameworks, don't you think they looked to see what's already out there, what works / doesn't work, etc.? 
Already did, friend.
MySQL's utf8_general_ci doesn't just have problems with Emoji, it has problems with *all non-BMP characters*. Why the HELL are you only removing emoji?
Oh wait... Was that a ":)" or a ";)"... No, maybe a" :') "... I can't remember which one drops all tables... 
&gt; What would Symphony help me with - that would be hard to accomplish regularly? Cleaner, more stable code, basically. Any major website is going to have at least these components: 1. Clean URLs, which implies PHP routing 2. Database access 3. Sessions &amp; authentication (users, possibly roles) 4. Form inputs and validation Now, you could of course build those yourself (or use existing components, as you do with Smarty for templating), and re-use them from project to project. That would give you a home-grown framework. But ask yourself these questions: 1. Is the code that I wrote stable and am I confident that it's reasonably free of serious bugs or unexpected behaviors? 2. Is the code that I wrote clean and easy to read? Do I have nightmares about modifying it or refactoring it? Does it follow SOLID design principles? 3. Is the code that I wrote secure? Chances are if you are a good enough developer that you can answer all three of those confidently with **"yes"**, then you are a good enough developer to know that it was basically a waste of time to have re-invented the wheel. There's nothing wrong with doing all of that for learning/education purposes, but when it comes down to it, a framework is going to give you a better tested, more stable, production-ready version of the thing you built while learning.
I met a guy once who insisted on using diacritics in variable names, to distinguish types. This is even worse.
I have a feeling a lot of new front-end web developers who are hopping on the one of the many front-end framework wagons (like AngularJS) are going to be similarly lamenting the choice to be a technician in a world of pre-build modules instead of sticking to real programming and daring to build their own stuff.
Just a friendly reminder for those that might consider use cases for this. Even in places where non-ASCII characters make sense in software (for example, Σ, θ, π, β, etc), it is often difficult to work with these variables. Most of us don't have these characters readily available to us, so using them often requires copy/pasting. Just call them `sigma`, `theta`, `pi`, and `beta`, ffs.
probably ;-;
/r/shittyprogramming
How??
Ne'r mind: function Alt+1 (){ echo "ok"; } Alt+1 (); would be: function ☺(){ echo "ok"; } ☺(); 
In my opinion, if wordpress was a virus with blogging features, then Linux would be a trojan with OS features, which is a way far of making any sense. They are both opensource projects with different scales.
On my Mac it was under edit&gt;special characters... menu in coda 2, but its pretty much that way for most apps like chrome. to get them to actually show up when outputted in a browser I had to get browser extension. 
You are the worst kind of person.
You have to make it at least a couple functions and variables, so when somebody on a machine that doesn't support emoji sees a box, they won't know which box corresponds with the call without opening it on their phone
As a bare-metal procedural coder turned object oriented custom framework builder turned Codeigniter connoisseur turned Symfony composer, im probably going to be repeating a lot of whats already been said here, but here goes: 1. You no longer need to reinvent the same wheel anymore. Im sure your MySQLi wrapper is nice enough to use where it's not being super annoying, but I will bet it's nothing compared to what libraries like Doctrine2 ORM and 'ActiveRecord' offer. You no longer need to write your own URL parser to figure out where to go and load in your code. You no longer need to worry about User Registration and Login flow with things like Symfony's built in UserBundle and 3rd party packages like FOSUserBundle picking up the slack! Basically: The only thing you need to worry about writing, is the business logic and front end display. Pass off all the heavy lifting to these other packages. If you feel you are writing a custom interface to something by hand, chances are someone else has already done an amicably good job at it and is taking code contributions for bug fixes and improvements in communities like GitHub. These extensions and libraries have a very good chance at being extensively used in the field for Development and Production based environments! So no need to worry that much about it :) 2. Consistant. Choosing a good framework to take to a project, is like choosing a weapon in a war. The job is your battlefield. Are you going to try and rely on a custom weapon you developed for yourself? Or would you trust in the battle tested Colt M4? This metaphore is getting heavy handed, but the point is the same: It's used by tens of thousands of other people concurrently, with an active community surrounding it. If you got problems, places like Stackoverflow can help out. If you got a unique problem with your own invention, you are your own best solution to resolving the issue. And while solving those problems can be fun, when on a tight deadline and youve written yourself into a corner, small bugs that come from not planning for a specific edge case can lead to pretty massive overhauls very easily and very quickly. It was a scenario like this that got me to even look at existing frameworks in the first place! 3. Nothing like hitting the ground running. Hey look, a new project? Awesome. $ composer create-project symfony/framework-standard-edition newproject $ cd newproject $ php app/console generate:bundle --- make core root code bundle here $ php app/console doctrine:generate:entity --- create a database schema with this tool $ php app/console doctrine:schema:update --force --- this will see your PHP classes called "Entities" and create a database schema automatically from them. This command will also do database migration and synchronization techniques if you make any changes to the Entity files. $ php app/console doctrine:generate:crud --- creates read or write/read routes and forms and controllers and unit tests for any doctrine entity specified. $ php app/console server:run --- sets up Symfony's built in server, so you can immediately check out your site in your browser by going to http://localhost:8000, no need for Apache/Nginx/IIS server setups or sub-folder development You now have a fully functioning dynamic site with pretty URL's and a standards compliant code. Did you write any code yet? You might think this level of automation might either feel like cheating, or that its now out of your control. But frameworks like Symfony do this to reduce the amount of completely redundant typing you'd normally have to do to do these very same things anyway eventually WHILE still giving you complete control. If you think a certain aspect of Symfony *should* allow a certain customization technique, chances are it is there already, jsut hit up the docs! It just gets it all the redundant crap out of the way as soon as possible so you can get to work doing whatever it is that you want to do with the site, that makes the site that site uniquely. Also, personal recommendation: ditch Smarty and go with Twig. You can use Twig in any PHP based project. I will never ever ever EVER look back, best template engine I've ever used. haha Good luck!
We ran into a problem with the clinking beer mugs, and I followed this Stack Overflow response: http://stackoverflow.com/questions/8491431/remove-4-byte-characters-from-a-utf-8-string/24672780#24672780 per your comment, it should be safer (more thorough) to use the snippet from this Stack Overflow comment instead: http://stackoverflow.com/questions/8491431/remove-4-byte-characters-from-a-utf-8-string/24672780#24672780
┬─┬ノ(ಠ_ಠノ)
"disappointingly create table foo;"
What in the loving mother is.. wait.. no.. oh dear god no! 
[（╯°□°）╯︵┻━┻();](http://3v4l.org/uPBOo)
I'm primarily a Magento developer. I also develop large applications using Zend and Symfony.
Ya know, with some hand writing detection, that might actually be practical.
Well, I develop mostly in Symfony at the moment and I really like the [Security Component](http://symfony.com/doc/current/components/security/index.html).
I know it may be tempting to go for the big frameworks first but I would really recommend just following an article on a really basic "vanilla" php register and login. It's easy to pick up a framework like Laravel and learn how to use it's own authentication classes, it's another thing to actually understand how to build your own. I would never suggest building your own authentication system / classes for a production system, but you should also understand how the level of abstraction you are using actually works. It goes a long way to making you a better developer and can make debugging problems a whole lot easier. That being said, dulldave has posted some great advice.
It's difficult to appreciate frameworks, OOP, design and architectural patterns if you have no experience with team work. Frameworks, except that they're big set of tools that help in rapid development, give you structure and force good practice. There is no need for new developer to read tons of documentation. Also quality of documentation and code for big and popular framework is much better than anything you and small team can develop. Also, frameworks like Symfony are very good tested. I don't mean just unit tests but mostly fact they're runed on many production server at the moment. Big community means there are many bundles ready for use right now. Have I mentioned amazing developers tools like debug toolbar and profiler? Have I mentioned following PSR-0,1,2,3,4 ? Integration with most popular PHP libraries like: doctrine, assetic, monolog or facebook API, etc. ? I can believe it's difficult to understand what is cool about frameworks and for example composer or bower until you work on small projects, specially in small team or alone. In real life there is no time for developing from sratch. You need tested solutions following standards right now.
I'm speechless.
Shit just got real.
I want to modify your analogy. PHP would be all of the materials you need to make a house. But, it's your job to make sure you left enough clearance for the dryer vent, or that you didn't forget to add plumbing for the upstairs bathroom. Laravel would be a Condo. You start out with a basic unit and fix it up. You are free to modify the Condo to suit your needs, but it starts out with most of what you need in place. Don't worry about modifying the outside, this analogy doesn't have HOA rules. but I guess the PHP analogy doesn't have a building inspector so it balances out.
LEAVE MY TABLES ALONE!!! D:
Don't ever fucking do this. Ever.
I dig it :)
I liked symfony as well, though you couldn't make per object rules. It makes sense, but it's what I needed.
Hey guys I wrote this one and come from the world of npm and bundler. Pretty awesome to use PHP's Composer!
["They should have sent a poet"](http://youtu.be/3deNVM3EWIc?t=1m42s)
Nice! That would be quite the way to "obfuscate" php code. Use that zero-width non-breaking space to make every variable and function to have the exact same "no" name but work correctly. All you see is a php file full of **​();** and **$​;** that magically works.
For Role Based Access Control, PHPRbac has served me well. For traditional access control lists, I've used Sentry pretty much exclusively save for Symfony with its Security Component. I've dabbled with Zend ACL as well, but it just wasn't my cup of tea; do try it out for yourself though, as I didn't find anything objectively wrong with it.
What I mean is that you have a separate controller/router, a templating system that doesn't "think" and then a "model" which encompasses all of your data and business logic. Call it what you want, I thought it was obvious what the web version of MVC was. HTTP is stateless, I don't think it's a good idea to have persistent objects. How long do you persist them for? It's not like users exit your web site.
Purely curious, have you tried out Laravel, and if so, what are your thoughts?
It's just architectural pattern. The point of MVC is separation Models, Views and Controllers. Form of communication between them makes no difference. Main difference beteen MVC and MVP is that Presenter keeps view logic but Controller keeps busines logic. MVC is not DESIGN PATTERN it's none of the following: - creation pattern - structural pattern - behavioral pattern http://en.wikipedia.org/wiki/Behavioral_pattern MVC as architectural pattern may be implemented in any way. Behaviour, so form of communication, between objects is not subject of MVC. Communication between Models, View and Controllers may be done by using many different design patterns for example adapter pattern. I'm terribly sorry but you're completly wrong.
You answered your own question - because you can use FETCH_PROPS_LATE.
&gt; Form of communication between them makes no difference. This is why you fail.
utf8_general_ci and friends don't support all Unicode characters, paradoxically. You have to use utf8mb4.
I'm going to hell for taking delight in this. OP is a very bad person. 
I suspect it's MySQL, but I have no idea. There's probably some error logging mechanism in MySQL you could use to check.
Ok thanks, I will do some more investigation. 
You can bet that somewhere in Asia, some programmers are using native words to name their functions, variables and write their comments. It's not just PHP either. Any language that supports unicode-aware identifier is fair game. 
This is why Php is going down the hole.
 protected static function request($method, $url, $params, $headers) { if($headers===null) $headers = array(); if($params===null) $params = array(); $method = mb_strtoupper($method); $contextHttp = array( 'method' =&gt; $method, ); switch($method) { case 'GET': if($params) { $url .= '?'.http_build_query($params); } break; case 'POST': case 'PUT': $content = $params ? http_build_query($params) : ''; $contextHttp['content'] = $content; $headers['Content-Length'] = strlen($content); break; default: throw new Exception('Unhandled method'); } $headerSb = array(); foreach($headers as $k =&gt; $v) { $headerSb[] = "$k: $v"; } $contextHttp['header'] = implode("\r\n", $headerSb) . "\r\n"; $context = stream_context_create(array( 'http' =&gt; $contextHttp )); return file_get_contents($url, false, $context); } GET/PUT/POST, data + headers, cURL-free, in just a handful of lines. What else do you need?
No, all arguments (more accurately, all properties they set) are required. If you're using a factory to make the object, then you inject the args via the constructor, they are required. If they are defaulted to null then they become optional arguments, which is not the intended signature of the object.
One starting place might be [Aura.Auth](https://github.com/auraphp/Aura.Auth) -- it's a library, not a micro-framework, but it should plug in nicely to anything. (I am the lead on the Aura project.)
Yep. Custom voters are awesome. Easily the easiest way I've seen to do very complex ACL rules.
thank you everyone for responding to the poll, I posted it here as one of my coworkers posted it to our programmers and only 3 answered, so I wanted to screw with him, we now have 144 votes, love it! hahaha, he wasnt sure what to think at first.
What is? this **🖕**? Suppose to be an Emoji for a middle finger. 
If your text is getting truncated at the point of a unicode character then, yes, you are getting a 4 byte unicode character and inserting it into a utf8 field and/or sending it over a utf8 connection and not utf8mb4. Rather I should say that is almost certainly the problem. It was for me when I had random text truncating issues.
This is what happens when your parser interprets any completely random shit it doesn't recognise as a valid identifier.
If you are doing it right you should have developed a small framework of your own by now. The thing is that we all hate to accept is that the people making laravel and symphony are 100 times better at it. Not using the code they produce is just arogance in my opinion. Yeah I could do the same thing without it but maintaining it 5 years from now would be hell.
Holy shit, it doesn't return a parser error... I may have to use this at work: http://3v4l.org/3an55
&gt; What would Symphony help me with - that would be hard to accomplish regularly? An extra fifteen minutes playing your favourite song at a subway station. You don't need to rewrite all your code to be using a "framework". 
I agree with you. At work we had this legacy form builder, that would set all these complex requirements that where matched server side via post. The proper CX (at least in eCom) is validate it client side, via something like jQuery.validate. the customer should see something immediately after doing something wrong, not wait on an extra page load. A/B testing client side validation in the checkout flow actually boosted some 5% conversion. All in all op, you should leave it to javascript. You should not advocate writing php in templates. I don't know your use case, but a form should be more if a "widget/layout" to a page.
To be fair, there's no reason why the parser should care. Emoji is just a Unicode character. It's no different than "A" or "B" or "Ф".
Is anyone writing production code in hack besides FB?
This blog is a giant troll waiting to be fed, look at the others article
some are using hhvm in production. wikimedia uses that (i guess) PS: Not hack (uses hhvm to run php)
Thanks, I'll check that out. I'm fairly familiar with Symfony, so this might be a decent place to look. 
Hey buddy, thanks for the link. I'll take a look.
[SQL Injection Vulnerabilities.. please...](http://imgur.com/R60LNJj) Seriously what is this, we're coming on 20 years since PDO has been a thing.
Gotta live on the edge
Ai, ai, ai... this is really bad. How can someone sell something like this? There is no input sanitization whatsoever... XSS is a breeze. OP: You should take your app down and fix the security issues, before anyone makes the mistake of buying it. Now I remember what's the real reason behind the bad reputation of PHP.
is there a way to upgrade to this version (if using hhvm to run php)? or do you have to uninstall 3.2 and then install 3.3?
GreenLemon is the company behind Green Leave apparently. So it makes sense.
To be honest. CI's active record is great and they automatically help you escape. The fact that I saw CI, I was already going "Hmm... Releasing an app that is written in a deprecated framework." Then I saw this and I doubt their expertise in using CI in the first place. This is NOT meant to happen in CI, and worse, they allow the error to show. All error pages should be suppressed and replace with a sorry page while logging it into a file somewhere.
Great to hear, I'm an avid CI fan, but with it being deprecated. I'm gonna dive head in into Laravel. Got a laracast sub and just finished downloading Jeff Way's Introduction. Will be going through with it in a month's time.
I am thinking to use PHPRbac on a project, but the I don't fell to confident when I look to the source code. Are you aware of others implementations of RBAC for PHP?
***Disclaimer***: I'm a long time CodeIgniter user and am recently learning Laravel because it's the next HOT thing and CI is getting deprecated, and the below observation is a result of my brief interaction with Laravel apps, and as such, I'm not writing these as an absolute statement. So if you think I'm wrong, I implore you to correct me. Which is why Laravel is a pain a butt to develop in if you're making a website for SMEs. They usually have very... Weird folder hierarchies, and 99% of them uses a webhost with cPanel instead of a VPS, but who could blame them? This totally eliminates Laravel as a "plug and play" web app. Not to mention most cPanel host do not offer shell access, and even if they do, it's heavily limited and composer cannot run on it, eliminating Laravel as a framework platform I can use for most SMEs. Which is also a reason why I'm not dumping CI anytime soon.
Have a look at [MyCLabs\ACL](http://myclabs.github.io/ACL/)!
9 months shouldn't even qualify for short term support, much less LTS.
Post of the year!
But for better user experience, it seems to me to be better to expire a membership at the end of the day (as in, for the user... so if they are in AU it will be many hours later than if they were in US)
use timestamps, they are independent of any timezone. they're just seconds counted starting on one fixed "event". So anywhere on earth, the timestamp generated in one moment are the same. just check in the current timestamp is smaller than registrationTimestamp+MembershipDuration and you know if the membership is valid. time zones don't matter at all in this setting.
You will first convert the AU end-of-day time to UTC and then perform the comparison on that value.
I guess they are working on it. See: https://github.com/auroraeosrose/hhvm/tree/cygwin_build
The answer to questions like this is always the same: always, always, always use UTC or timestamps based on UTC.
I'll second bash scripting. We use it liberally, and it builds a stronger understanding of the servers and infrastructure that your apps are built on top of. C is great because it gets you close to the metal, I'll always recommend learning C. It makes you think lower down the abstraction ladder. My surprising suggestion would be Java. A lot of people rip on Java for its relatively slow rate of growth and its aggressive namespacing, but Java's a great performant language. Learning Java is one step on the way to learning how to build Android apps, which is fun, and the really mature toolchains and libraries in Java teaches you a bit about why enterprise uses Java so much. Java is what you would end up with if you designed an object-oriented programming language from solid computer science principles. Python and ruby are great languages too -- my suggestion would be to learn one OR the other, I don't think you need both, and if you had to choose, go for Python. Python is great because of its rich ecosystem, especially in practical data science. If you're interested in a deep dive into data science and mathematics, go for R, but if you're more interested in the practical stuff Python's the way to go. Finally, if you want to *really* try something different, look at Lisp, Scala, or Erlang. All three are a totally different paradigm from the OO or procedural languages above. 
I've been using [jsTimezoneDetect](https://bitbucket.org/pellepim/jstimezonedetect) to update their time zone on login. I suppose you could use the ip to get it if they've disabled JavaScript. In my case it is sufficient to use a logical default since most of our business is in one time zone.
I got it to compile eventually by recompiling some of the dependencies...
They say Python makes you a better programmer overall.
&gt; Shell Script is really nice. You can learn a lot about unix, streams, file descriptors and automation. Is that the same stream as in like GulpJS?
English. And, python should be easy to learn. :)
Yep, systems like this should always be using UTC. On some occassions, I have used moment.js (momentjs.com) to convert dates and times in the users browser, using the timezone the browser uses. This way the only timezone my systems backend had to know was UTC, on displaying the JS would take care of local date and time.
If PHP (or JS) is the only language one knows, I'd heavily suggest getting acquainted with at least one language that enforces strong typing. It won't apply to PHP, but it will make you more wary of PHP's typing system and how to use it responsibly. I started off with Pascal and C, later C++, while also diddling around in VB6. C is really universal... you'll find it everywhere, and it can power anything. I suggest people learn the basics of C.
Recently subscribed to that and thought I was there...
Go-Lang, it's really easy to pick up coming from PHP and gives you all the amazing performance of a compiled language. It takes a bit to get used to as the object system isn't "classical" and every variable needs to be used else a compile error. It really does make you a better developer though as no error can pass unhandled and due to multi-return code is often much more vertical. I love Go and recommend it highly. It has genuinely changed the way I code for the better.
Python's *everything is a reference* mentality is a disease, and needs to be kept in mind every step of the way or face massive unintended consequence. 0/5 would not write Python again.
The strong typing is a great concept to move into. I found learning C after PHP was awesome because of all the PHP functions that are just transposed from the stdlib, and then going back to PHP I felt like I was making smarter programming decisions. Also, understanding memory and data structures is useful, period.
C's lack of memory safety I think is too big a thing to need to worry about. C is the cause of almost all of the worlds most catostrophic bugs.
Try changing your include in `header.php` to `include(__DIR__ . '/analytics.php')`
Found a solution. Instead of including this way: &lt;? include ../includes/header.php'; ?&gt; I'm doing it this way: &lt;? include $_SERVER['DOCUMENT_ROOT'].'/includes/header.php'; ?&gt; 
I recently started learning how to develop Android apps and strong typing was a real shock to the system at first, but I see now that it is beneficial and I'll definitely apply this discipline to my PHP code now even though it isn't enforced by the compiler.
Racket
Way to steal my code without attribution... [proof](https://gist.github.com/ircmaxell/4715602). ;-)
Can you jump right into C++, or do you need a background in C to understand it?
Sorry, had it saved on my computer and couldn't remember who to ~~blame~~ give credit to.
How much time did you give it? I was comfortable with that within a few weeks and it's never been a problem since. It's like the indentation in python. It's only an apparent problem to people looking in from the outside without familiarity, but a reflexive and entirely trivial notion to people who've spent time using the language.
Brainfuck. 
Whether or not python is a good learning resource is too subjective to be stated as factually as you did. The language is so easy and useful that you have to consider the capabilities you gain by *not* having to struggle with the language. I learned quite a bit beyond python because the language wasn't invoking as many "god damn it" moments as Java or PHP. For example, the REPL made it infinitely easier to try things out. I need a reference for half as many things because I only need to enter the shell and try it, rather than open a text editor, write a proper program and compile or run it separately. I do respect that value of strongly typed and compiled languages, I just value python more because python is a more concise and more "useful-sooner" tool.
Agreed, I didn't realize this was an issue people face because I never think about it; everything works just how I'd expect it to.
Seconding Java. I recently picked it back up after disliking it some years ago and am really enjoying it.
Yes, it is! The node.js stream API is inspired by unix streams. PHP also have a very nice low level [stream API](http://php.net/streams). 
Despite C++'s history, C++ is a completely different language from C. Not only do you not need to "know C" to learn C++, it is far more likely to get in the way of learning idiomatic C++. There are C-elements you *need* to learn about *eventually* because they are sufficiently prominent in and/or fundamental to C++ (e.g., bare pointers and `[const] char *`) but you can get far without them.
You can actually learn a lot from brainfuck! It is one of the smallest turing complete languages possible. My previous coworkers even started an educational project to build [an assembler on top of brainfuck](http://reinventingthewheel.github.io/). Not that useful for PHP developers though.
It may be a good idea to pick up either C, C++, Perl or Python, generally because they're all easy languages to ease into from PHP. Any lower level language such as C or C++ with a strong typing system would give you a better understanding of the mechanics of PHP. As a language I typically prefer C and PHP is largely based on C when it comes to a lot of the older features such as global functions, and it shows you exactly how difficult things like memory management and pointer manipulation is, and why a language like PHP was developed to deal with those things. That being said if you want to start getting more into a general purpose language that is as easy as PHP to pick up, you might do well with something like Perl or Python which will let you hit the ground running so to speak. Perl would be extremely easy to pick up since it's type coercion is almost identical, and it shares almost all of the syntax of PHP with a bunch of extra language constructs that take away the need for all of the cumbersome built in functions that PHP uses to deal with things like string and array manipulation. Python is just a generally well designed language (although I might get some flak for it's use of whitespace parsing). The thing about python is that it has a lot of constructs that are very different from PHP, such as a strong[er] typing system, that you may not have even realized were useful.
shell scripting? get a job hippie
What about a mobile development language? Give Swift or Java a try! :D
http://smalltalkzen.wordpress.com/ Try writing something in pharo/seaside if you want to have your mind completely blown
Java, syntax is incredibly similar to php except it's strongly typed, it's the easiest way to introduce yourself to another language that is familiar while also teaching you concepts that you wouldn't know from php. 
javascript
Part of learning C is learning how to deal with memory safely. Frankly I think every developer should have a background in C, if only so they can developer greater appreciation for their primary language.
C is not a prerequisite for C++, but I would recommend learning enough C to differentiate the two languages.
Encountered*
I really don't understand why you're being downvoted. With the prevalence of Nodejs... Angular... JSON as a data transfer... Whether you like the mean.io stack or are just getting acquainted, writing a site in angular, your frontend is agnostic of your backend system, it forces you to lean toward more RESTful and atomic services, which then opens up your site to more platforms... If I were to be back in my hobby-website days now, I'd definitely be looking at a Laravel stack with an angular frontend. Edit: Just because Js is not strong-typed doesn't make it a terrible language. I see that he said "other than javascript" but seriously, it's not just a scripting language anymore.
Shell scripting is a really useful job skill.
 if (version_compare(php_version(), "5.3.0")) { define(E_USER_DEPRECATED, E_USER_NOTICE); }
Because OP already implicitly acknowledged the importance of JS and SQL by leading off his question with "other than javascript". 
i think javascript is the best thing you can learn or become an expert in right now, because it is used for front end development obviously and also because of node.js in order to learn a new programming language however i would recommend jumping straight to using it in a real project (preferably not a crucial one though) i recommend this because personally i've never been able to learn programming languages just for the sake of learning them, i need to have a real use for them, for some reason my mind simply can't learn stuff that won't be used, stuff that won't solve an actual real problem.
Pascal? No. That's been a long dead language. As far as C for someone coming from PHP are you crazy? I have nothing against your argument about strongly typed languages but Java is going to be more in the domain of people doing PHP for webdev. 
a lot less useful than most programming languages as a job skill due to their platform specificity and lack of good string manipulation, as well as being extremely unmaintainable
All my functions will have emojis as names now. ಠ_ಠ 
A lot of people in this thread are confusing strong typing with type safety. A strongly typed language will offer a very different experience from e.g. PHP and JavaScript, but strong typing itself has no inherently valuable qualities. Additionally, "strong typing" is simply a poorly defined term that says little about a language. The recurring recommendations for experimenting with strongly typed languages should really be for *statically* typed languages, as these will offer a class of type safety that, by definition, is not available to dynamically typed languages.
Both your issues are completely solvable. The folder structure is customisable and you can put everything below public if necessary. Just edit the index.php file and put alternate paths in for the variables there. For example if your highest folder is the public root, put everything from the public folder there (index.php etc), then put the other stuff alongside or in a Laravel subfolder. Then, put "./laravel/app" or whatever in index.php. As for composer, server side CLI access is not required. Do all your installing/updating on your dev machine and upload the vendor folder.
Started on PHP, then to Python, Bash and finished on Perl. Personally I find I can do everything I used to do with the aforementioned with Perl. It might not be everyone's cup of tea but I love it.
If you work in windows powershell.
Shell Script is not a replacement for other languages, it's a tool. I'm not saying you need be an expert on it, but knowing the basics will certainly help. You'd be surprised how many [large companies](https://google-styleguide.googlecode.com/svn/trunk/shell.xml) with great jobs rely on it.
Apple Swift? Build iPhone apps while saying 'No' to Objective C.
Care to elaborate?
Interesting as I have a small idea for an iOS app. But I think I should start with Objective C before jumping to Swift. What do you think?
Thanks for your suggestion. What do you recommand to actually learn and fully understand C (beside looking into syntax stuff)? Is there some go to project for learning C? Something like writing a blog for webdev. :)
java or objective c/swift both are often used parallely in some companies so its good to know a bit about it, python is usually used instead of php at least in smaller companies / startups ... so it usually doesnt help within a single company to know both - except that python is a great choice too
It's a well-designed language supported by a large set of available libraries and tools. Key features include: * Static typing * Namespacing * First-class OOP * Generics * LINQ * async/await See **Summary of versions** http://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Versions
aramaic
This is not exactly the same thing, https://phpunit.de/manual/3.6/en/appendixes.annotations.html#appendixes.annotations.assert, but similar. I linked 3.6 since in 3.7 it was moved to skeleton generator class.
&gt; JIT Engine: The development of PHPNG was started with the motivation to research the implementation of a JIT (just-in-time) engine for the Zend Engine based PHP. Nope. &gt; Asynchronous Programming: The ability to easily implement support to the execution of parallel tasks within the same request Nope.
god damn that font is awful the 6 looks like an o with a tumor
You must be talking about batch. My bash prompt and her brothers grep and sed are making some rude gestures.
correct. javascript is the natural companion language to php because it is implied that the site will run javascript on the frontend. 