Can confirm. Most oil and gas companies use tons of bash...
Looks more like an accented "O" to me. But yea, not a good font. 
There's a pretty healthy Java web framework ecosystem: Spring MVC, Grails, Spark, Ninja, JSF, Strut. I don't have any experience with Lisp for web. Scala has Lift and Scalatra. Fun fact: scala is built on top of the JVM, and so are some dialects of lisp as well! So they both end up taking advantage of the ecosystem that Java built.
That's such an eloquent response to a well-written article. Here's my eloquent response to your well-written response. -1
Out of curiosity, why removed? We deploy our code with them physically present but not run.
The thing that got me with strong typing when I was trying to use it in a web setting instead of PHP was decoding json. Before it was never a problem it just becomes an array but suddenly I had to think of it in a whole new way.
+1
clojure is an interesting one as well running in the Java VM. Also Elixir version 1.0 recently released to run inside the Erlang VM.
I'm surprised no one has suggested [Ruby](https://www.ruby-lang.org/en/). It's elegant simple and powerful. There is an awesome web framework called [Ruby on Rails](http://rubyonrails.org/). It can be used to develop native mobile apps on [Android](http://ruboto.org/) and [iOS](http://www.rubymotion.com/). It's as useful as shell scripting when it comes to random scripts. It is also cross platform, it comes with OSX([RVM](http://rvm.io/) is better though), it's easy to install on [linux](http://rvm.io/) and [windows](http://rubyinstaller.org/). All in all I'd say its as light weight as python but as versatile as Java.
I also love Twig
argh ahh, yes, thanks! :D
at the most, what you'll have is one IF check for each function or method you define. it would be better if it could be included/excluded based on a flag/ini setting during compilation.
Have you seen or tried this http://php.iis.net/ ?
having them removed before a deployment, or by pre-processing your code for distribution (via "compile" or "build" flags?) would be fine.
To me also the usefulness of such a thing is a bit lost. If you don't want to use a class in a particular context just dont inject the factory responsible for building instances of that class into that context. As for preventing direct "new" class to a class I would say its a good idea to enforce it in such a way. To be honest the title mislead me thinking the post would be about the ability to create protected nested classes like in Java, which are actually immensely useful. 
&gt; "This is the one shining negative here: .NET stunted my knowledge of HTML/CSS/Javascript" I can see that. I don't write in .NET, but have (and do) work alongside them at different workplaces. When it came to HTML/CSS and JavaScript, they were all definitely completely oblivious. However, one .NET guy did the full spectrum. Rarity. But he was able to dive into the HTML to figure out what .NET is _trying_ to do, and fix it.
You can define a base directory for all your includes (in a php file located in the root of the project, this file should be used on every request) define('APPPATH', dirname(__FILE__)); //Elsewhere: include(APPPATH.'/lib/MyLib.php');
can you please elaborate on why ?
C#, (I hate MS, but they have some brilliant poeple)
&gt; Found this the other day: https://github.com/mperham/sidekiq/blob/master/lib/sidekiq.rb#L31 Works in java as well public class FunApp { public static void main(String[] args) { System.out.println("HERE WE ARE"); FunApp a = new FunApp(); a.ಠ_ಠ(); } public void ಠ_ಠ() { System.out.println("There we go!"); } }
HHVM LTS releases [have a support cycle of nearly a year](http://hhvm.com/blog/6083/hhvm-long-term-support).
A billion upvotes I would give if I could, good sir!
just like Ruby's "everything is an object" and TCL's "everything is a string?"
From PHP? Obvious choice is HHVM, hands down, for a large number of reasons: 1. HHVM is almost identical to PHP, which means you're already 99% of the way there. It would take you almost no time to learn it, and it will serve you well in the future. 2. HHVM is a MUCH faster, much more secure language (* see asterisk), and more proper language than PHP, and serves the same purpose of web development. Which, given how prevalent web development is, makes a lot of sense to learn. Especially if you're already working with PHP. 3. It will introduce you to behaviors you'll expect to see when transitioning to many of the other suggestions in this thread. 4. You have the opportunity to work with a much more strict run-time interpreter without having to directly move into a compiled system. Basically, if you're going from PHP.... I can't think of any good reason NOT to learn HHVM. It can be thought of as PHP++ Once you've learned that, go nuts with everything else in the thread. But since HHVM would take like.. almost no time to learn.. I would say it's the ideal next language to use after PHP. (Regarding the "more secure" asterisk: ... sort of... there's a lot of variables involved in that statement, so it's one of those statements that's just easier to say rather than give the full explanation.)
Interesting idea...
I'll Nth the recommendations for Java, but there's a couple of other options as well, which I think depends heavily on what you want your primary focus to be. ## Java If you're interested in BigData, ETL, OLAP, data integration, data management, etc... I would highly recommend Java as it pair rather nicely with PHP. E.g., Building a highly distributed parallel architecture for real-time analytics using the Spring framework or Akka is almost trivial these days. IMO the Servlet 3 JSR really opened the door for Java (and other jvm languages like Groovy and Scala) and helped to reduce the barrier to entry being allowing you to easily run multiple instances of an application with something like Tomcat or Jetty embedded for handling http requests. I prefer PHP for knocking our R&amp;D style work, prototypes, management tools, etc... but when it comes to the heavy lifting, Java has become my "goto" language. - [Spring Boot](http://projects.spring.io/spring-boot/) - [Akka](http://akka.io/) - /r/java ## Ruby If *aaS style applications is your cup of tea, I'd recommend digging into Ruby. The language is very succinct and after playing with it a little bit, extremely readable. The tool chain available is also absurd. I'd recommend you start with one of three tools, all of which are somewhat similar in what they do, but will augment your development practice with PHP. Take a look at Puppet, Chef, and Capistrano as they make getting into the Ruby work much easier. These tools are for managing servers and for deploying applications so you could use something like Vagrant (check out https://puphpet.com/) to get your feet wet and build automation tools in Ruby that deploy your PHP applications. There are just so many tools out there now written in Ruby that help with automating stuff that it pairs very well when you need to roll your PHP application out to 20+ servers, invalidate cache, modifying databases, etc. - [PuPHPet](https://puphpet.com/) - [Test Kitchen](http://kitchen.ci/) - [Capistrano](http://capistranorb.com/) ## JavaScript If you're more into the functional front-end of your applications and enjoy usability and interface stuff, I'd say delve into JavaScript as not only will you be learning lots of fun ways to fetch, collate, transform, and present data, you're also going to learn stuff that works on the back-end using nodejs. Mind you, it's not a 1:1 between what goes into a front-end application, and a back-end one (there are some tools out there that help make this possible, but it usually requires pretty comprehensive awareness of the problems your application will face before they happen) but there's plenty of overlap on the language's core to make using js on the front or back end pretty simple. Another benefit here is the maturity of the tools, community and the this probably has the lowest barrier to entry. - [AngularJS](https://angularjs.org/) - [Express](http://expressjs.com/) - [jQuery](http://jquery.com/) The cool thing about each language is that there's lots of companies out there looking to hire passionate people who are hungry for personal growth and aren't going to treat you like some kind of "ninja rock star pirate badass dude" and most of them are willing to pay into the 6 figures (well into those figures for some senior positions) and almost you would learn from each language is going to contribute to your skill set as a developer. Good luck! 
&gt; The fact that FETCH_CLASS doesn't bypass the constructor of the object it's creating makes it borderline useless. What's the use case for bypassing the constructor? Or are you instead suggesting that the fetch class mode should populate the constructor arguments with the returned data? Personally, I think the latter would be a bad idea - PDO should be a DB abstraction, not a half-implemented ORM. Trying to get it to automatically populate constructor arguments via reflection magic seems like it would be pretty brittle and error-prone. The alternative is just looping through a results and creating a collection of classes. Which requires, what, 4 extra lines of code (assuming you're wrapping PDO in a DB access class or something similar)? I'd rather be able to manage that myself.
I never understood the concept of the shell in Python. I played with the language briefly after learning C++, Java, and PHP. My professor tried to show me coding in the shell but it just didn't make sense. I fell back to coding in a file and then running in a shell and that worked fine for me. 
Perl
No it would not be fine to pre-process some code just to remove something which should not be in there in the first place. - Intended audience for porn movies are adults. You don't give such a movie to a toddler instead of Tom &amp; Jerry. - Imagine your OS would be installed with the tests for each package that you will use. --- I'm an Ubuntu *user* and I don't care about development stuff. - Imagine that your car would come with detailed schematics on internals. --- If that car would not be produced by Ikea, I don't care about car internals. If something breaks, I would go to service. Tests are intended for developers and should not leave their working environment. If something breaks in production, you will be the one which will fix the problem, not the application user.
Hey, speak in english. BTW are there any performance differencies between writing an extension in [Zephir](http://zephir-lang.com/install.html) lang and C++? Because creating extensions with Zephir is so much easier. 
Uhm.. yeah? That's exactly what I said. Even the short term support releases should be 6-9 months. LTS deserves at least 2 years.
Although Imagine is definitely a top contender, the fact that some of these libraries are still on Sourceforge or Google Code and haven't been updated for a while make me reconsider the author's definition of "best".
You have never heard of debug-builds of applications, have you? Where your production distribution/build is different from your development build? But share the same code base? If we all hold to the line of thinking that you have, we'd all still be using stones and sticks to build stuff. And your analogy relating this to porn is horrible. You might need to rethink that.
We also need PHP Hall of Fame.
&gt; [...] Where your production distribution/build is different from your development build? Different from what point and what exactly do you call "*build*" exactly ? We are still talking about PHP, right ? In PHP context you build for production with debug disabled and all development stuff removed or you build for testing, where you remove all development (*replicated production, right ?*) stuff but keep debug enabled. I don't know what you *build for development*, but maybe you can enlighten me. &gt; If we all hold to the line of thinking that you have, we'd all still be using stones and sticks to build stuff. I don't really know where exactly I *stole* all modern tools from you and I pushed you back to stones and sticks by stating that **development related stuff should be removed before a deployment**.
Creating PHP Extensions using C++ (SPA) - [66:14] + [1 YEAR LEARNING SPANISH] 
Good work sir. But not really. ;-) Phpthumb demo: http://phpthumb.sourceforge.net/demo/demo/phpThumb.demo.demo.php So, yes, it's an image manipulation library... So you've just checked the name and not even looked at the demo page... I imagine you checked the others in the same way? :-D 
Thanks a lot. :)
Hey, buddy! Just wanted to let you know that I finished the calculator and it works splendidly! It took a little while to get it working properly, because I had trouble putting every value in the arrays as a collective integer into a new array, but today I figures it out, using the implode() function. Just wanted to say thanks for that code you gave me early on.
Let me enlighten you. Read. Right now, even in production, almost everyone uses some logging package which logs info using different log levels, depending on the environment that you set. This is the same concept. You only evaluate/execute the test code, depending on your environment. If you can't get this concept, get started by learning how to use logging packages. Second, is come up with a build-task that strips out code flagged or annotated to be test code. Think migration files, or coffee script, or javascript minification, css linting, but for PHP test-stripping. If you can't get this concept, try out what I've just mentioned. I've just enlightened you. You're welcome.
To be honest, I didn't actually realize phpthumb could do all that - it's the only one whose site I didn't visit because I was "familiar" with it already. I would still argue that it's not an "image manipulation library". Sure you can do some manipulation with it, but you can also make webpages in Word and that doesn't make Word an "html editor".
Sigh. This is basically a fusion of C++ friend classes and Java inner classes that behaves like neither, and instead of being a language feature, lives both in run and compile time, piggybacking on top of a debugging facility and traits. It is a hack that does not belong in production code, and has a distinct stench of [bondage &amp; discipline](http://www.catb.org/jargon/html/B/bondage-and-discipline-language.html). The excessively clever hacks like abusing the backtrace here, using exceptions to communicate upwards, protected constructors etc make your code magical, which means it will be difficult for other people to figure out what's happening and why and, worst of all, where. The debug_backtrace() facility is not intended for normal use. The canonical example of this is Rails ActiveRecords, where the coupling is so "loose" you can't figure out which code path is taken without a debugger, and when you use a debugger, you can't understand how this instance or class was composed in first place and what effect your changes would have on other use cases. 
I know of a few sites that do image manipulation with it. But yes, it's ugly. ;-) 
The shell is really helpful for trying things, or affecting quick changes. I use it for things like: - Trying stuff, making quick queries or changes. - Avoiding googling for trivial problems. If I want to know what exception is thrown or what a property name is, I can just jump in the shell and test it. - Learning APIs. You can learn a lot by using the `dir` command (or tab completion) to list the methods and properties of an object instance or module. Then explore their docs with `help`. - Get information. Let's say I'm looking at a very large and nested JSON file (of potentially private nature), and I want to understand its structure. I can `open` the file in python, `json.load` it, and browse through `.keys()`, or write out the prettified json. - Calculator. I tend to use the chrome console if I want to do a simple calculation, but the python shell is just as well. - Working with timestamps. For example, the `arrow` library makes it easy to work with timestamps of many formats. I may just want to know the time between two dates, or convert timezones. - Generating data. If I want a bunch of random data, I could `dd if=/dev/random of=/tmp/file bs=1048576 count=1048576` , but in other environments or for more varied formats (like making 1 million trash rows of sample data to test the speed of a query), it may be a simple task to do it in the shell. My imagination is drying up, but I hope you get the idea.
I have never had a reason to stop using[ ImageMagick](http://www.imagemagick.org/). It can do just about anything.
I think you're confusing my suggested implementation with an endorsement for this method. Particularly this part: &gt; Whether or not you think it’s a good idea to do this sort of thing; this is one method for achieving just such a thing. I never said it's something that belongs in production code. It's merely the result of a what-if. Perhaps, taken less seriously, you can appreciate the exercise.
More info on why you think useragent is relevant might help. Are you not seeing the useragent on the other end of the request when sending from the centos box? Are you checking `curl_errno()` afterwards?
[Download Web Platform Installer 5.0](http://www.microsoft.com/web/downloads/platform.aspx) You will thank me later. It is the easiest way to install and configure PHP with IIS. Before I found this I struggled to get PHP to run correctly on my machine. Then I found this and in very short time I had PHP running perfectly.
Can you explain how you coded the site to allow the domain to be configurable? Are you editing the httpd.conf w/ a PHP script or something else?
Nope. I'm using a little known feature of Apache, which allows you to use what's called dynamic virtual hosts. In short, the server accepts any requests on port 80. It then looks for the directory `/var/www/domains/{{thedomain}}`. If it exists, then it serves it, otherwise it responds with 404. This is the extra configuration in `apache2.conf`: UseCanonicalName Off LogFormat "%V %h %l %u %t \"%r\" %s %b" vcommon &lt;Directory /var/www/domains/hexagon.sudosu.co&gt; Options FollowSymLinks # Allow main UI override, disallow all other sites AllowOverride All &lt;/Directory&gt; &lt;VirtualHost *:80&gt; # this log format can be split per-virtual-host based on the first field # using the split-logfile utility. CustomLog /var/log/apache2/access_log vcommon # include the server name in the filenames used to satisfy requests VirtualDocumentRoot /var/www/domains/%0 &lt;/VirtualHost&gt;
2.4.7 (Ubuntu)
So anyone can upload anything they want? What about concerns such as illegal content, very heavy traffic content, trojan horse / malicious content, etc.
Nope. As it says, static files only. There is a relatively advanced system in place which analyses all files uploaded and does the following and more: * Checks files against https://isc.sans.edu/tools/hashsearch.html * Modifies execution bit of files to ensure they can't be run * Denies uploads containing any of around 30 banned extensions
ok that appears to address the malicious content. Are there bandwidth usage limits?
Good point about the message, I'll fix that now. In my testing I haven't seen that tooltip issue, and you're using a non-standard OS so I can't really spend too much time looking into it. I can however confirm that it's working in FF, Chrome and Safari on OSX10.10.
Fixed message issue.
Yeah I figure it's something on my end. :) Keep up the good work.
Any upload size limits? Does it all have to go in one zip file?
It all has to be in one file, and can be up to 25MB.
What's wrong with Sourceforge and Google Code? Github is not some kind of magic sauce that makes libraries better (though, they make *browsing* them and working with them much easier, admittedly). Also, not being updated for a while isn't necessarily a bad thing. Although it *can* be, if the project isn't stable, that isn't implicitly the case with every project. Lots of great, stable projects are abandoned/unmaintained. *Edit: Note, I'm making no specific claims about the particular projects on the list, as Imagine is the only one I've worked with before.*
If you like that, have a look at [Eiffel](http://en.wikipedia.org/wiki/Eiffel_\(programming_language\)). It has even more "tests" included: Pre- and Post-Conditions which are further contracts for your interfaces (what should I receive and what will I return) as well as Invariants which should hold at any time. Also you may have a look at the concept "design by contract". There are PHP implementations [available](http://en.wikipedia.org/wiki/Design_by_contract#Languages_with_third-party_support).
Ah that's a shame, I've been using Jekyll to create my static pages on my latest site. It's awesome though.
&gt; a little known feature This is hardly a little known feature. It is an extremely common way to run multiple sites with a single Apache server. [Note: I misunderstood what roomzinchina was referring to. It is a fairly infrequently used feature]
Compared to the usual, explicit method, it's pretty rare. I couldn't even find much up-to-date documentation anywhere, except for one article on the Apache site.
That's cool, but, uh, Github offers me the same thing, but distributed over a CDN, backed by a fairly stable company, and with integration of my vcs (so I can just git-push and it's updated). Oh, and with Jekyll support. I don't really see the use-case here.
You're talking about VirtualHosts in general. What I'm talking about is *Dynamic* VirtualHosts, where each host is not explicitly defined. If you have a look further up, I posted some code where you can see that each site is not explicitly defined, but rather is based on rules.
Probably the hundreds of thousands of users which buy/write HTML themes, and don't know about GitHub. In fact, just looking through the comments on things like http://themeforest.net, it's evident that people are looking for a super easy solution which doesn't require you create additional accounts etc. But if you want to be negative, you could just, ya know, downvote and move on?
ah ok. You're right. 
He just said what he thinks about it. Negative opinions are good as long as they are not insulting and remain constructive. There's no need to be an asshole.
Maybe my reply was a little dickish, so I apologize to him for that. However, I do feel that his comment could have been slightly better worded to be more of a factual "what's the difference" style comment rather than a "look what I have, look what it does, yours doesn't do xyz". Maybe I'm wrong and thinking too much into it, not sure really.
Great, release your code as a library and we'll see how many downloads it gets :)
Looks like it's just a web based debugging tool. If you find a good IDE and install Xdebug on your PHP installation, you'll be able to debug even further in your own machine. I don't know about any good free PHP IDEs since I use PhpStorm (my company works with it so they pay the $100/year)... But [xdebug](http://xdebug.org) is right here. A quick Google revealed [this](http://stackoverflow.com/questions/116292/what-is-the-best-ide-for-php) which is probably a good place to start looking for an IDE
You're the one advocating making a separate standalone library, not me. I maintain a helper library for *my own projects* and I don't give a shit how many people download it. It's small, light, and suits my needs perfectly.
Thanks that was really helpful :D
you're welcome!
I agree with op, the whole `I don't see what the use case is here` mindset is pretty rampant on this subreddit. People feel unless the point of the project has some viable meaning and not just something the author did to do something different than what they do all day long, they get angsty about what is posted. 
Ok maybe not Google code but Sourceforge is a nest of adwares that has been left behind since a good while. While it isn't the website's fault itself, a library being on it not only turns me off but tells me the developper hasn't been working for a while or he would have moved his project long ago. 
I think that you need a thicker skin that that if you want to get feedback on an idea. Does everything have to be bubble wrapped?
Great, I'm sure they're a joy for other developers to work on.
The Mongo driver wont work with the preinstalled version on a Mac because its PHP 4. If you're looking to install the driver in a development environment theres a LAMP type package called Ampps that has it bundled, it may save some time.
Agreed
&gt; a library being on it not only turns me off but tells me the developper hasn't been working for a while or he would have moved his project long ago. It's pretty egocentric to take the stance that code hosted on a website that you don't like is necessarily due to the developer(s) not caring about it anymore. Did you ever consider that some people actually *like* Sourceforge, Google Code, etc.? Or that they may be constrained by their respective employers? I know - sacrilege in the Github era, right?
Well, maybe he doesn't see the use case here?
Sometimes I need a quick fix and can't be bothered to open the IDE (PHPStorm here too) for a single file. While lurking, I've discovered that you can put xdebug wheels under Sublime, which is the way I'm gonna go. Thanks for your input!
Ah, gotcha. Sounds good! 
It's designed to be super easy for those who don't know how to use Git. If you want git, have a look at Github Pages.
People are harsh here. I like it - i think it has its use cases for webdesigners, maybe less for web-developers...
Wow, damn. Yes, to make valid arguments and to try and get others to explore possibilities, some level of smartness/capacity is required. How is making writing tests easier not going to make you productive? Oh, are you one of those "tests are optional, i make shit work". The moment you started making analogies with porn and other irrelevant things, this other end gave up expecting a smart discussion from your end. Sheesh. You're the one who can't take no for an answer, or at least be open to explore a new concept. There's more to programming than what you see in PHP land. It'll do you good to explore other languages and their concepts, or at least explore concepts that you're not familiar with or haven't used/tried. I won't waste any more of my time on this. 
https://code.google.com/p/xdebugtoolkit/ http://www.krahn.org/2010/07/profiling-php-code-with-xdebug-and-cachegrind/ I wouldn't say these tools are equivalent, but a web version could be done using available tools for PHP.
He sure is cocky, but he seems to know what he is talking about. I personally see his idea as a good one. I know heaps of people that just want a nice easy way to host a simple website. A lot of people don't know how to use github let alone host a website.
I understand your concern. I figured it could be useful for users who speak spanish, which could be a subset of the /r/php userbase. 
if by "he" you mean me, your "obvious" conclusions are lacking support on evidence or facts. Cheers
but it says : PHP 5.4.24 (cli) (built: Jan 19 2014 21:32:15) Copyright (c) 1997-2013 The PHP Group Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies on my terminal isnt it PHP 5.4? 
&gt; He made a good point tho and wasn't rude There was definitely a rude tone to the comment. 
Noob here. What did you use for styling? It looks very similar to google style forms.
I'm what I like to term as a dangerous amateur with PHP. Years ago, I wrote the code for a site and back end that kept track of the organization's members, events, and a few other things. I'm trying to correct some past mistakes now. Hiring someone competent is out of the question, since the organization this site is for doesn't financially exist. It's just a shared hobby for 70 or so people, and my sorry ass is the best they've got. Web-wise, it all comes out of my pocket, and I can't spend more than the hosting costs. Today, I'm trying to close the avenues for SQL injections and XXS (not to mention separating the presentation, logic, and database code). I'm switching to PDO with prepared statements. I guess what I need to discover is how much filtering needs to happen before it goes into the database and how much needs to happen after. Presently, the site has a form where the public can enter an event request for the organization. The submission gets validated, then goes to the back end for review, before being approved for display on a public page. I even have some patched together code that trashes most bot data before it touches the DB (and there's a LOT of bots now, prompting me to finally deal with this). In my re-write, I guess I want to know how much and what kind of *filtering* I need to do after the validation BEFORE it goes into the DB. Then, how much and what kind should I do on the way out when it's displayed on either the back end or publicly. Feel free to ad any other advice as well. If it makes any difference, the submitted data includes personal contact info, physical addresses, email addresses, web addresses, short answers to brief questions, a few checkboxes and radio buttons, etc. EDIT: FYI, I'm working on typical LAMP shared hosting setup. NOT dedicated, or even virtual. I don't have full rights to MySQL, and I can't change any installations. 
look like you have os 10 installed ... so yes its 5.4 . how about using vagrant or docker to set up your work environment?!! thats would be much better than messing up your mac. I am using vagrant and this site puphpet.com , frankly the best thing ever happened to me since i got a mac . this would save you alot of time .
Uhm... HHVM is not a language. I think you meant Hack.
https://github.com/bradchesney79/PHP-OWASP-ESAPI-Canonicalization-Demo I make one change in the ESAPI code that prevents errors being shown on the screen. Validate on the front end to stop users from accidentally sending you bad data. Canonicalize, Sanitize, &amp; Validate on the server side just in case some numb nuts like me decides he doesn't need your form. Malicious or not you gotta put the kibosh on that kind of shenanigans. Whitelist where you can. (i.e. the 50 states, an abbreviation of 'SU' should fail with flying colors. It isn't on the whitelist.)
This is normal. Relax. Your PM should know (or will learn) that conditions on the ground are messy.
Where do I start with Laravel? I've never built anything using an MVC framework, and reading the quickstart guide doesn't really give me anywhere to go next.
That is interesting, I feel the opposite way. I think my application code is the more suitable place to do calculations &amp; processing-- using the data base for simple persistent storage. Data in &amp; out as fast as possible with little or no burden on the database host for most anything else.
Thanks! 
With homebrew? How do you recompile the dependencies?
Articles mentioning the PHP 7 version name? Uh oh, let's hope PHP 7 doesn't die and we have to skip to PHP 8 for the next release... /troll
Right. I get confused because I always google "HHVM" instead. Googling "hack" next to programming inquiries is not quite as effective. Awesome language. Cool, but remarkably impractical name.
Something related to php but not exactly php. Is it generally considered better/worse/neither to use something like bootstrap for frontend or to pretty much completely code it yourself from scratch? Ok, PHP. I know that I can use PHP to create html if I have the same html being used over and over and over. Something like footer comes to mind. However, in pure page performance standards, is it generally faster to code it page by page with html or to have php bring it up?
If you're presenting a project, the assumption is that it's meant to be useful, in which case a comparison with competitors (many of whom you probably aren't aware of) is useful, both for you and any readers. If you're presenting an idea that you *know* isn't as good as other options, but is merely as a learning exercise (eg your own blog, your Twitter clone, your to-do list app), then you should state as such.
The programming community has an unfortunate tendency to be overly brusque, and when you get steeped in it it can be difficult to remember that not everyone in the world is used to that style of communication. So, my apologies - I was overly rough. Also, FWIW, that is significantly better than the shit I was making at 16. I ran across some of that recently and, boy, it's awful in so many ways. So, be proud of what you've done.
Sadly not. http://stackoverflow.com/a/12202218/95992
It seems we're entering an era of jQuery for dev environment (http://i.stack.imgur.com/ssRUr.gif).
C How to Program by Deitel and Deitel. I used the fourth edition. One of the best programming books I've ever read. Detailed examples, thorough explanations, and plenty of good exercises/projects at the end of each chapter. Focuses on C, but has a decent section on C++ too. Has an intro to Java section after that, but you're better off getting a newer book on Java if you're interested. Quite a few changes to that language over the last 10 years.
I must assume you are in Japan, right :P
The great thing about Symfony is that you don't need to use Symfony (at least not the standard edition). [Take Laravel as an example](http://symfony.com/projects/laravel). The Standard edition itself is just a thin layer of configuration that glues all the components together (the bundle system). If you choose to use any other edition, all the components will still receive the same updates.
When using prepared statements you no longer have to worry about SQL injections, so really your next major concern is XSS, htmlspecialchars or similar on display will handle that. That's about all you should need to do for arbitrary text fields that are being pre-approved; unless I'm forgetting something obvious.
You can type-hint variable arguments.
Bootstrap is good. Writing it yourself is good. Do whatever you like. You'll probably work quicker using a css framework like Bootstrap, but it's no requirement. Raw html will ways be faster than php. That said, the speed of php for most things will be negligible if you use caching (varnish as a httpcache, and apc for caching the phpcode). All this means is that the html your php generated can be cached so it doesn't actually need to run the php to get the html (this is what varnish does). Apc is a little more complex in how it does its caching. Both are very useful and not too difficult to get a install with a basic configuration. 
Cool idea. Definitely could be useful. I wonder if there is a better way than debug_backtrace to do this.
This post is off topic for /r/PHP. Please refer to the sidebar for more information. Posting a website that was made in PHP doesn't always make it a good fit. You'll need to show the source code or have some technical content for it to be relevant.
With PHP natively including opcode caching since 5.5, APC is pretty much deprecated at this point and hasn't had a stable release since 2011 (or a beta release in the last two years). [APCu](https://github.com/krakjoe/apcu) is available if you still want user caching and is basically APC with the opcode caching stripped out.
nice one! I will try!
I am going to give another vote to Laracasts. Yes, it costs a little bit, but it is by far the best resource for learning Laravel (and more, since he hoes into a lot of design patterns and general programming stuff).
C is a weakly typed language, so is C++.
&gt; Java will teach you how to sell your soul to "corporate america." You'll gain an understanding of how Sun destroyed the field of programming through commercialization, misleading advertisements, and targeting the universities, and see how we're still paying for that today, but you'll probably be so dead inside afterwards it won't really matter. Can you elaborate more on this? I smell drama and I love drama! 
I hate 'companies' like your. This have nothing to do with PHP, GTFO.
its working already.. forgot to rename my php.ini.default to php.ini &gt;.&lt; tnx btw.. 
Does is need to be Laravel specifically? Symfony2 is a much more opinionated framework - it much more rigidly lays out how it want's things done - and would possibly be more suitable for someone who has not yet used MVC frameworks. What does everybody else think?
I have not worked with SOAPClient, but I have, unfortunately, used SOAP when connecting with 3rd party enterprise systems. I feel your pain. I think that most of the time SOAP use is either legacy requirement ... or because they don't know anything else.
No no no no! At work I spent 8 hours debugging a stored procedure/trigger. It fell over when I added something, and fixed itself when I copied the entire thing across from another db. It still isn't working exactly. The database's job is to store your data. It shouldn't know anything else except the relationship that you have defined. If you have logic in there, that's a potential code smell.
It's a spectrum, not a black/white classification. In any case, it's more strongly typed than PHP.
I'd use server-time to calculate the time-stamp and forget about actual "end of day". I don't think it's necessary to bother about single hours in a per-month-subscription, unless explicitly wanted by the client. When a user extends his membership, just take the timestamp you have and add the month you want to add to get the new one, if there is no active timestamp, a new one with actual servertime+duration is created. "end of day" would only make sense to me if I wanted to run a CRON every 24 hours to clean up. Then it would make it a lot easier if all ran out at the same time. 
lolz xD is that's real !!! they have to be kidding!!!
&gt; You don't need to prove to anyone how good of programmer you are. At least not to me. Obviously. Definitely on the same level as ones who still use shared hosting and still don't use Composer. /s
I like to use one index.php that has the html-DOM and does all the includes. When you have 2 options for a header, you can put the logic that decides which one to use in the index.php and just include the one you need. The upside of this is, you don't have to care about html-dom in any other file, as everything else is part of &lt;body&gt; or filled into the header in that one file. 
Documentation is here: http://hoa-project.net/Literature/Hack/Mime.html.
&gt; I want to know how much and what kind of filtering I need to do after the validation BEFORE it goes into the DB. None. &gt; Then, how much and what kind should I do on the way out when it's displayed on either the back end or publicly. `htmlspecialchars()` That's what you *need* to do. It's up to you whether you bother doing stuff like stripping tags before storing in the database. Because you're using htmlspecialchars, users inputting HTML won't cause any issues, but it may look ugly if their comments `&lt;i&gt;look like &lt;b&gt;this&lt;/b&gt;&lt;/i&gt;`. Or you may decide it's best to show it (e.g. if users want to actually post a code sample).
Is it only relying on the extension to find the mime type?
Bootstrap is good, but make sure you're not including more than you need. It's not uncommon for sites using Bootstrap to have 80% of the CSS unused by each page. &gt; However, in pure page performance standards, is it generally faster to code it page by page with html or to have php bring it up? If you mean, loading index.html instead of index.php then the pure HTML page will technically be faster since the server just serves it up right away instead of running PHP. But honestly it's irrelevant. The benefit of only having one file to edit when you want to change the footer far, far outweighs any possible benefit from using only HTML.
As I said, Google Code is more personal preference but yes, I'm sorry I stand by my choice, if the library is on Sourceforge *I personally* will not use it, and it's not just "because it's not Github", it could be Bitbucket, a personal Git system or something, I don't care. It's because Sourceforge has become a bad place, see articles like that for what I mean http://www.itworld.com/open-source/382088/was-gimp-right-leave-sourceforge
**Project:** CPA Spider **URL:** http://cpaspider.com **Description:** Affiliate Network (Publishers/Advertisers) **Platform:** Laravel + Composer + Artisan **Repository:** BitBucket [Private] **IDE:** NetBeans 8.0 **Tools:** XAMPP + GitBash + MySQL Workbench 6.1 CE *Most Difficult parts to make:* Offer Tracking (postbacks) and Stats *Most Interesting parts to make:* Payment Reports and Profile Settings **Commits** 177 commits from 2 programmers over 22 days. *Days 1 to 5* http://www26.zippyshare.com/v/47968994/file.html *Days 6 to 8* http://www26.zippyshare.com/v/8982206/file.html *Days 9 to 11* http://www26.zippyshare.com/v/13780910/file.html *Day 12* http://www26.zippyshare.com/v/1469043/file.html *Days 13 to 17* http://www26.zippyshare.com/v/23516646/file.html *Days 18 to 22* http://www26.zippyshare.com/v/4798838/file.html **Summary** This was such a challenging yet rewarding project to start. My brother and I both have extensive programming experience, having developed hundreds of apps in a plethora of languages (Visual Studio, Visual Basic, PHP, JS/jQuery, SQL, and more), and both of us were reading documentation heavily. Trial and error, determination, and a lot of beta testing finally brought success! **Best Features** * Add any offer from any network and track it * Track Geo Location, Browser, OS, and more * Graphs and Charts for Uniques, Leads, Conversions, and more * All your network earnings and stats all in one place * Audit other networks to find out who is scraping your earnings * Exclusive offers not available elsewhere * Industry-leading programmers with over 40 years combined experience * Tons of tools geared towards catering to the publisher * Fully-Responsive from web to tablet to mobile **Most Exciting Feature:** Audit ANY other network's offers! **Conclusion** My brother and I are happy to answer any (most) questions. We're slowly adding new offers every week and strengthening up the network, fixing bugs we find, and marketing the network. We're completely Publisher-centered rather than focusing on advertisers like CJ, Neverblue, and many other networks do. *Note:* We're also currently looking for affiliate managers, exclusive offers, and beta-testers. Have a wonderful weekend everyone. *Magic Plants* [xpost /r/Programming]
What are you doing? There was nothing but jokes in my comment.
Tell me about it. I needed to interface Laravel to OpenERP through the API. All I needed to do was look at outstanding invoices, and create payments for them. You would think that is a couple of days work, but months later we are still working through the finer details of it, involving reverse-engineering OpenERP (largely uncommented code), writing non-existent documentation, writing custom packages for OpenERP to wrap up some of the API actions. These things happen. I've written [this library to talk to the API](https://github.com/academe/openerpapi), because I couldn't find one that worked and had not been long abandoned. I know know far more about Python and OpenERP APIs than I *ever* wanted to know :-/ Similarly, I needed to link to the Helcim payment gateway. Oh there will be an Omnipay driver to do that...damn, no, [another new library](https://github.com/academe/omnipay-helcim). This one involved Helcim actually fixing the API for us, as I developed the driver. I'm guessing we were the first to use the "hosted pages" version of their gateway in anger *OR* nobody else has noticed the security issues they may be opening themselves up to (depending on their use-case). So - get frustrated, because that is what interfacing systems is like. However, don't always assume it is just you. It could also be *them*, and if you put forward the case, it can result in fixes to their API, which is time-consuming, but cool, and does take us all a little step forward. If the API provider has not left sufficient documentation to make it easy to use, then *give them hell, and make them work for their sins* ;-)
The page doesn't particularly make it clear *why* I should use it. Firstly, I can get a MIME like this: $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension foreach (glob("*") as $filename) { echo finfo_file($finfo, $filename) . "\n"; } finfo_close($finfo); &gt; The above example will output something similar to: &gt; text/html &gt; image/gif &gt; application/vnd.ms-excel http://php.net/manual/en/function.finfo-file.php &amp;nbsp; Secondly, and more important, MIME Types are nearly useless to bother detecting. Even if you you correctly detect the type, the data can still be corrupt. The only way to be 100% certain the file contains the data you expect is to actually parse the entire file. This means detecting the MIME and erroring if incorrect is more a *convenience* so that you don't have to waste user and processor time parsing just to find it's the wrong file.
Why don't people who use non-English variable and function names use accented characters even though both PHP and JavaScript support it? If you feel like it's easier to code in your language, why not go all the way?
This list is definitely missing **[Intervention Image](http://image.intervention.io/)**.
That's an anecdotal reason to avoid stored procedures. If done right they are a great asset and far more secure than inline SQL. I never said to use them for calculations and or logic. Although if you need to do a SUM for example it is far more efficient to do it in SQL and deliver the result to PHP instead of delivering numbers to PHP and then adding them together to get the SUM. It also keeps the code cleaner and if well documented much easier to troubleshoot. I prefer this to inline SQL any day. PS. If you're using PHP with IIS and MSSQL you can also use a service account in your app pool and never ever store the password in your PHP code for another layer of security.
Just one nit-picky thing: you should change up the dashboard landing page a little bit. I can tell right off the bat you are using [a predesigned dashboard template](http://startbootstrap.com/template-categories/admin-dashboard/) - the panels are a dead giveaway. I only know this because I use that template for starting new projects, it is the first result that comes up in Google for "bootstrap dashboard"! It is an excellent template, but it is also widely used. Changing it to something a little more unique could perhaps help brand recognition. For example: if a potential client has used a dashboard with this template previously, and had a bad experience, they may be immediately turned off to your product.
&gt; Most of my projects I work solo on That doesn't surprise me at all.
Laravel has no upgrade path to Symfony standard. See: http://www.reddit.com/r/PHP/comments/2gm1kg/if_youve_used_symfony_extensively_and_have_also/
&gt; nearly But besides that, since we're talking PHP, I'd wager that the time &amp; processor usage required to process the file is 9 times out of 10 not significantly different from erroring out early, thus negating an early error's convenience for the typical usage scenario.
Yeah, my apologies for the amateur audio. Laptop microphone. If there any any audio pros who know how to level that out, I'd be very eager to receive advice. (FWIW it does get somewhat better later on.) If the audio is too terrible to bear, please consider reading the paper at &lt;http://pmjones.github.io/adr&gt;.
Look at your log files to locate what went wrong. (php_error_log , located inside php/logs). Also don't copy over the old php.ini, its probably not compatible. 
Not your fault at all. I'm surprised its a laptop mic because it's loud and clear. Unfortunately the audience coughs are too. Also, thank you for the paper. Reading it now. 
I'm guessing you don't have a framework to help solve this? If I were to do the same thing of thing, I'd have the form and processing on different routes, as it keeps each one cleaner, and you can use a mixture of try/catch to send the error messages/session data. In your example, I'd go with your solution rather than depending on something to be set in GET to submit the form. Thats why I normally use a different route, then you technically only need to check if POST is set, then you can do your validation with no need to check for 'submit' or any GET variables 
Xdebug support in Sublime isn't very good / hard to use (in comparison with PHPStorm). PHPStorm 8 has the new feature to quickly open single files instead of complete projects ;)
Download the non thread safe version for windows. Usually in programs/PHP/5.6 Then go to your handler mappings in IIS and look for your current PHP CGI mapping. Click browse and locate the 5.6 php-cgi.exe and selected it. Reboot IIS. 
from the looks of it, this isn't a new concept, but rather how web development frameworks have gotten along with MVC thus far, but finally put into words, and new names for everything. MVC wasn't built for web technologies but rather for desktop apps, so it does make sense that things wouldn't translate perfectly over, and it's definitely not a bad idea to detail specifically how to accomplish MVC in a web dev environment. Model &lt;--&gt; Domain View &lt;--&gt; Responder Controller &lt;--&gt; Action This is also a good description of Action-Domain-Responder for those not interested in watching a 40 minute video: https://github.com/pmjones/adr
Anyone have any experience with [the Knp Rad edition of Symfony2](https://github.com/KnpLabs/rad-edition)? What were your thoughts?
What is the usual timeframe for Ubuntu to include the latest 5.x release in their repositories? Will 5.6 end up in 14.10, for instance, or will that likely not happen until 15.04 or later? It is against this company's policy to use a third-party repo for their basic tools (the LAMP Stack among them).
http://3v4l.org/97eilO Maybe the parser _should_ care.
I'm still open to the idea but bits of it still bother me. Controllers are reduced to Actions, which is great since now the Action class has only one SRP. But then the behavior of that method is being changed to doing two things instead of just its original one thing; this is further concluded when the action is so minimal that you only need the Responder - isn't that just the original controller action method? I still lean towards the idea that the Responder class should just be a representation of state and not perform any logic other than to manage its own state. This makes the outcome of the original "action" either a single method (the original action method), or a sequence of "sub action" methods (i.e event driven).
There's no logs being generated for PHP in that location. I just re-downloaded the 5.6 NTS version and tried again. Now for some odd reason, I can bring up the phpinfo() page, but I can tell the MySQL extension is not being initialized. I had this ealier, but after some playing around, I got the 500 error again. I haven't changed any code at this point, just trying to get php working. 
check out this table http://www.unicode.org/reports/tr36/#TableSingleScriptSpoofing ; realize it would be the same thing with variable names. Conclude it would be hell on earth. 
Can you do a post redirect get by only using request? I have been coding php web apps full time for 8 years and the only time I have used $_REQUEST was when modifying another persons code.
If your own colleagues are out there to get you, there are countless easier ways for them to do so than spoofing characters in PHP source code :D
SOAP is commonly used by .NET applications. The .NET applications are very particular on the order that the XML comes in. The PHP libraries like to output the code in a different order. Munging must occur to get them to place nice with eachother.
I've been doing Magento development on a virtual machine built with PuPHPet. I really like the simplicty of PuPHPet, however loading certain pages seems to take forever (20-40 seconds). I know some of these pages do hundreds of Mysql queries on a single request. What steps can I take to speed up my development virtual machine? APC cache has helped a lot, but other things I've tried, such as increasing memory of the VM and the number of processors, don't seem to make much of a difference.
You don't set a MIME type for PHP you set a handler mapping. Mime types are for files to be delivered to the client, php is server side code that can deliver pretty much any mime type to the client. [These instructions](http://www.iis.net/learn/application-frameworks/install-and-configure-php-applications-on-iis/using-fastcgi-to-host-php-applications-on-iis) work fine for IIS 8, basically you should do the following to run php on IIS: * Turn on CGI role-service * Install windows update for FastCGI * Download and unzip to c:\php (the x86 non-thread safe windows version of php) * Rename php.ini -Development to php.ini and modify the following settings: Set fastcgi.impersonate = 1 Set cgi.fix_pathinfo=1 Set cgi.force_redirect = 0 Set open_basedir = "c:\inetpub\" Set extension_dir ="./ext" Scroll down to the windows extensions section and uncomment the libs you need (like for the oracle client, cURL, etc...) Set date.timezone = America/Chicago * Restart the server * Open a command prompt and test php ex: c:\php\php -i * Configure the handler mappings * Configure PHP Process Recycling Behavior * Restart the server * Add PHP to the windows path 
Basically, IMO, your friend is flat wrong and kind of weird. He's mixing a get and a post value, which is an approach that will potentially cause errors in anything from a framework to an ajax request, but most of all because it's just... confusing. Your code should be written so a person can understand it - not just a computer. That it "works" is no substitute for reasonable and rational conventions. $_GET, $_POST, $_SESSION have specific and explicit meanings and places to use them. Use them properly and you make it more clear what is happening. $_REQUEST is the bastard lovechild of all of the above and is a good sign you're doing something kind of nasty. These kind of "tricks" are common, but they're hacky, and no substitute for good code. BTW, if(!empty($_POST)) You're welcome.
Probably to remove the $_REQUEST :)
20-40 seconds looks like a problem with shared folders (your VM is having problems reaching the files needed to serve the request). It could also be caused by xdebug waiting for a remote connection. [This could help](http://stackoverflow.com/questions/16724910/vagrant-on-windows-w-precise64-runs-php-very-slowly)
Thanks for your response. I am using shared folders and xdebug, so these could definitely be a contributor that I didn't consider before.
Your accept header make me recall two libraries . https://github.com/auraphp/Aura.Web/blob/develop-2/README-REQUEST.md#accept https://github.com/ramsey/mimeparse
That's what I thought. Is empty is coooll, but i don't care if certain fields are empty. I check fields right before the insert or update. Or before the submit in ajax then in the php.
Have you already tried right-clicking on the `MyBundle` directory and clicking on `Synchronize 'MyBundle'`? Maybe PhpStorm didn't detect the new directory for some reason (happened to me a few times). That did a trick for me.
You're friend is probably new at this, and experimenting with new ideas. Most people do this. It's healthy, but really most of the time our ideas suck. He didn't beat the odds, and this time his ideas sucked. * If you don't know whether your data is in `$_POST` or `$_SESSION` that means your program is poorly designed or you don't understand it well enough. Or you are trying to shortcut a little and save some typing at the expense of future readability. * To check if a page was posted to, you can either do what `mattaugamer` said; or, if you want to be even more precise, check if `$_SERVER['REQUEST_METHOD'] == 'POST'`.
Does anyone know where I can find a book or online resource for DB2 and php? Mysql is everywhere. If i need an example I can always find a Mysql example. But I have to dig to find any DB2 examples that aren't from IBM and make sense.
What's a good way of dealing with config dependencies? Say you have your config array and you need several (string) values from it for one of your classes. Should you inject each one as a separate constructor argument? Should you assemble a new array with each config property and pass that? Should you just pass the entire config array? Or perhaps should you use globals?
I should also mention he LOVES session variables. I would rather get info from database on each page but, he uses session like get paid for every session variable.
That's about what I thought on both accounts. I have a friend who is sort of acting like a bootstrap elitist, and I wondered what the general opinion is. Also, I figured pure html would be faster but not by much. Anytime I google anything to do with php speed I get debates over python/ruby/php. Thanks. :)
I would recommend spinning up a VM *(Oracle VirtualBox is free) and running in there. Using PHP, MySQL, Apache and the like in a Windows environment is hellish. In Linux, it is much more familiar. In the meantime, check your error logs as others mention. If you don't see anything appearing in there, perhaps the mod_php module for Apache is broken / missing. Check your apache configs (assuming you are using Apache, don't remember exactly how IIS works).
The reason php is "slow" is the same reason python and ruby are slow. They are interpreted languages (as opposed to compiled languages like C, C#, Java). [3 Minute Video On What an Interpreter and Compiler Are.](https://www.youtube.com/watch?v=_C5AHaS1mOA) This is still extremely fast, enough to the point that unless you need bleeding edge performance (99% of websites will not) it isn't a big deal.
Read again. I didn't said it had. Different editions configure and build things differently using all the same basic building blocks. Laravel is not even a Symfony edition, it just uses a lot of those aforementioned building blocks.
It was only an example. Things like this might happen if you go out of the standard ASCII table zone of comfort, without malicious colleagues. PHP might support unicode in symbol names, but I guess there are still meta-programmation tools, like frequently used regular-expressions applied on sources, which may not support them. 
I've considered converting this server over to linux many times, but I've go so much running on it, I'm not sure I can get it working again. Plus it's starting to show some signs of killing over I get the feeling. I may be sol within a year. This runs all personal stuff in my house, but it just took a lot of time to get it straight. 
He's not saying to use empty to check whether certain fields exist, but whether *any* fields exist.
&gt; Is empty is coooll, but i don't care if certain fields are empty. I check fields right before the insert or update. Can you clarify what you mean? The code I posted has nothing to do with specific fields. It checks to see if there's anything in the $_POST array, ie, was the form posted. 
I heartily recommend NFS if its an option for you! Unfortunately not supported on Windows hosts... There is an alternative (maybe Samba) but I am on the train and not at my Windows machine right now!
Check for a log file in C:\Windows\Temp I have a similar situation where i have to run PHP under IIS and that seems to be the default location for the log file.
My best guess is mysql functions that were deprecated
Well, if you use one of the CDNs for your Bootstrap assets, it *should* be cached. In this case, it doesn't matter if 80% of the code isn't relevant to your project because it's, essentially a sunk cost that's already been prepaid by the client. All you're doing is overriding the base code. This makes maintenance that much easier b/c you don't have to juggle which modules to include every time you explore a feature. Caveats for how/if you're compiling down from SASS or LESS and how your asset manager might work.
Ok, I got 5.5 working, I'll try 5.6 later as it kept giving me the 500 error. As I learned, nothing was enabled by default as it was in 5.3. The extension_dir was not set correctly either in the php.ini file (by default). Finally got my page up and immediately got the warnings that mysql_connect was being depreciated. So I've changed everything to mysqli_* and we're up and running. Thanks all... it takes a village.
If you are using the mysql functions (mysql_) instead of mysqli or PDO, that's most likely your problem, as @shif alluded to. Make sure display_errors is set to on, and that error_reporting is set to -1 (all errors and warnings and notices) to help you chase down your problem. FYI - this is a good rationale for always developing with all errors / warnings / notices on, because PHP will warn you ahead of time if you are doing something that will be deprecated in the future by way of a notice.
I had this error too after upgrading and found out that I was using a library that had a function that conflicted with a new PHP keyword ... 'YIELD' ... try looking for something like that. Hmmm, sorry after reading your post a little closer about the phpinfo() page...that might not be it if you are not including any other files with that script.
&gt; there doesn't seem to be anything here
Looks like you forgot to post the link (found it based off your username): https://github.com/nilportugues/sql-query-builder
Thanks, yep
Edited the post, thanks for pointing it out!
That's exactly how I understand it. Patterns predate their naming.
YMMV, but I feel the most user-friendly interface is [Grokbase](http://grokbase.com/g/php/php-internals). You can either have nested replies or sort the entire thread from oldest to newest.
As someone who is terribly afraid of spiders: please change your facebook page's profile pic
That looks very nice indeed, pretty much what I was looking for
This presenter sounds like a grade A asshole. Stopped listening after 30 seconds. Skipped ahead to 6 minutes and he was still on the "About Me" slide. Oh. Brother.
&gt; Well, if you use one of the CDNs for your Bootstrap assets, it should be cached. I'm gonna need to see some solid stats before I believe this. Fragmentation for these things is often way too high. I just viewed my cache in Chrome and I only had v3.0.3 cached (3.2.0 is the most recent). And this is *after* I visited both the Bootstrap site *and* the [CDN site](http://www.bootstrapcdn.com/) - neither use the cached version they recommend!
I would typically prefer option 1 (constructor argument) if there was one or two config options being used and option 3 (config as argument) if there was 4 or more options being use. If there was 3, it would probably depend on my mood.
Don't worry, he doesn't bite!
It's an age old argument that won't get solved here. Typically, the database can do things much faster (more efficiently) than the application code and often more reliably too; however it's also more difficult to manage the code and more difficult to debug things.
&gt; this isn't a new concept Exactly. I don't claim to have invented anything here (not that you are saying I did ;-) -- only to have recognized something that pre-existed in varying forms. I think the fact that there are other people already doing variations of the ADR pattern helps to confirm its validity.
Exactly right. :-)
Yes, I have often said that it sometimes takes people 2-3 years to realize they actually like me. It seems you are in the early part of that timeline. ;-)
looking at data structures like stacks, queues, b-trees, linked lists, hash tables. and then how do you measure how fast you can search that data based on how you structured it(algorithms)
I don't think I would personally use this, but I upvoted because I think it will be helpful to many others, and it looks like you put a lot of work into it. Good job!
What's the pros of having only one action per class? I see only cons. Same question with building the reponse in the responder instead of the controller.
Thanks :)! Just wondering, why won't you use it? Maybe becase it's not a standard library bundled within a framework? I'm curious. 
(/me nods) The pros come indirectly from following the single-responsiblity principle, although that depends on how you define the responsibility. The pros come more directly from cleanly separating the presentation layer. In a request/response interaction, we need to realize that the thing being presented to the client is the *Response*. That means any Response-building work should be separated out to its own layer. If that's true, having your controller set a header value or a status code is just as bad as having it generate HTML for the content. If we accept that the view being presented is a Response, then it makes sense to have something separate from the controller that builds the Response. Thus, the Responder. After that, it's a short trip to realizing that each controller method has its own set of HTTP header work to accomplish, and so each needs its own Responder, leading us to split the controller methods out to separate Action classes so we can inject the appropriate Responder classes. As far as cons, the only direct con I have been made aware of is that it's "more classes / more files." This is a true assessment, although I opine that if the number of files is the biggest problem in your codebase, maybe things aren't so bad after all. ;-)
Unsupported character seems likely. Also make sure that you set PDO to transfer the data in UTF8: array(PDO::MYSQL_ATTR_INIT_COMMAND =&gt; "SET NAMES 'utf8'")
&gt; I think it's a relatively good bet once a critical mass is reached Sorry but you can't come to that conclusion without any numbers or measurement. You had it cached, I didn't, that's pretty anecdotal right now. &gt; Plus, by leveraging the CDNs you're helping disseminate the files to reduce fragmentation and unnecessary payloads across the whole internet. Sure, but if 70% of your visitors don't have it cached, we're back to square one and loading 5 times as much CSS as necessary.
Skip to 21:00 if you want to actually hear about HHVM. Everything before that is just about how Wikipedia works and what their needs are. 
I came across this problem today &lt;?php date_default_timezone_set('UTC'); $date = new \DateTime('2014-09-22 00:00:00', new \DateTimeZone('EDT')); $date-&gt;setTimezone(new \DateTimeZone('UTC')); echo "{$date-&gt;format('Y-m-d H:i:s I T Z e')}\n"; $date = new \DateTime('2014-09-22 00:00:00', new \DateTimeZone('America/New_York')); $date-&gt;setTimezone(new \DateTimeZone('UTC')); echo "{$date-&gt;format('Y-m-d H:i:s I T Z e')}\n"; I would expect each **echo** statement to output the same thing. However the output is as follows. 2014-09-22 05:00:00 0 UTC 0 UTC 2014-09-22 04:00:00 0 UTC 0 UTC For whatever reason creating a DateTimeZone object using 'EDT' ignores daylight savings when converting to UTC. Does anyone know why this is? 
The single class SRP also helps encourage using only the resources you need. If you have a controller with multiple methods, but only one of them has a dependency that has been injected into the constructor, the DI performance overhead will affect other methods as well.
That author is a [real asshole](http://i.imgur.com/ueCiRF8.png)...
Great. The 500 error page appears if you don't have display_errors set to true, which is good for production environments where you don't want users to see your detailed error messages, but hurts you in dev when you want to see what is going on. Glad you got it fixed.
Are you network security Sam?
&gt; you can't come to that conclusion without any numbers This isn't /r/science and I am not publishing a thesis here. I wasn't trying to tout my opinion as gospel, just merely employing some rough Bayesian inference regarding my own experiences. &gt; we're back to square one and loading 5 times as much CSS as necessary Sorry, but you can't come to that conclusion without any numbers or measurement. For my projects I find Bootstrap's precompiled base CSS package is only about ~30% more CSS than is necessary. You used much less CSS, I didn't, that's pretty anecdotal right now. :p All kidding aside, it's up to you to decide what is acceptable for your project and its requirements. Personally, I'd rather have one big pill to swallow than have a hundred smaller ones. There's no universal right answer here. The fact that a centralized CDN exists which has [a *not insignificant* chance](http://www.bootstrapcdn.com/extras/popular) of being cached is simply a statement of fact. Because I can't quote you a precise value for the local cache coverage across all internet users doesn't exactly diminish the logic behind using the CDN. Even if we assume that only 5% of users ever visit a website using a Bootstrap CDN and only 50% of those users have a browser that caches the data, that's enough to convince a developer who's on the fence regarding which way to go. Not to mention, depending on your server setup, less overhead for you application and that much less to manage in a hectic development team. As a general rule, I'd say if your application is something that is used repeatedly by a customer base, then you have more leeway to deliver a bigger asset payload. If you have, say, an e-commerce website that is often judged by the initial page-load time, then you might want to seriously consider trimming as much fat off as possible. If you're trying to get a new application roughed in and time is a serious constraint, then I'd advocate using the CDN because it's dead simple and one less thing to worry about.
finfo can be very problematic. It could return incorrect mime types for valid files.
You're as bad as each other.
You don't even need either of these. if ($_POST) { // submitted }
I think the reason most people won't use it is because you aren't reducing the complexity of SQL nor abstracting it away. You still have to think and understand how to write SQL in addition to understanding your library nuances, at which point, what's the benefit?
True, but a user could also easily submit a file which seems valid to the MIME heuristics, but is actually not.
Care to provide context to your vague accusation? Honestly, I do not see why a moderator is taking his/her precious time to judge me, somebody who was just simply baffled at the response given by the author. I'm also not the one who made that comment in the screenshot.
I agree about the coupling issue; it was an example to indicate the retrieval of the request uri. The point is that there is available logic within the dependency injection layer which would otherwise be glue code.
No, I am not "someone" and I do appreciate the apology. Good to see there are still understanding people online who will amend their conjecture.
Well the maintainer never did a binary release of 3.0.0.1 so this release includes more that it seems at first.
Nice video, but his constant use if "um" every few words makes it hard to listen to this video.
The "about me" slide has been 44 years in the making. ;-)
Well played - error reporting should be the first move - always, and here it's worked :)
I think you have an extra semicolon in the 3.1.3 example.
Is needed to instatiate all those objects at once in the GenericBuilder’s constructor? Or is possbile to instatiate only the needed ones, like lazy loading, or lazy init. I just opened a random file without looking at the codebase at all :)
Only if they're all the same type though, no?
Yeah, I realised what you were getting at afterwards.
It loads and creates classes based on the query you build... only the factories are prepared to be used internally.
Actually I just came up with a better way of doing it because of your comment! Lazier loading will be implemented in the following hours!
Every time I've tried HHVM so far it's been unstable. I've encountered bugs (read: crashes) within minutes. I really don't know how they're running FB off there; hopefully it stabilizes soon.
Seems interesting, but the speaker lacks focus and it's like he didn't practice the talk before....
you can watch this as a start http://youtu.be/ZdP0KM49IVk
My experience is that it worked fine as well, so you're not the only one!
&gt; You should never store any data client-side (that is, in a cookie) that you need to rely on. Expect users to be malicious. Also, if you have super large cookies, you need to remember that those get sent on every request. I think he's talking about $_SESSION[] use.
Wow, that's amazing. Do you plan on selling its license? 
&gt; You still have to think and understand how to write SQL It will be ideal to learn sql before you start using abstraction layers.
 $_SERVER['REQUEST_METHOD'] == 'POST' $_SERVER['REQUEST_METHOD'] == 'GET' This sadly won't be of much use when handling forms that submit using a GET request. In such situations you would need to check for the presence of a known form field and value.
I'm the opposite. I seem to never have issues with it.
These are awful, both the php and JavaScript are terrible.
&gt; This presenter sounds like a grade A asshole. Ha ha..exactly! Have an up vote for saying it loud.
Not good. - jQuery 1.3 - Vulnerable to SQL Injection - No PDO - No error handling Pass. 
Thanks for your quality comment! Once the entire project takes off with a few hundred members we're planning on overhauling the interface. The focus is on the features while we still maintain it looks and responds very nicely. 
I think your question answered your own question. Why do any work or send any data that's not needed or requested? The server must do more, the network must do more, and the browser must do more. For what reason? The true answer will of course lie in your specific app requirements. For instance if it's common for the user to only look at part of the potential data then migrate elsewhere, don't bother generating or sending. But if you have 4 steps that are repeated nearly every time, get the first step out and displayed quick, then get the next three headed that way to improve usability and perceived speed. 
Yes, `ext/finfo`is nice but you don't have an OOP approach nor can't choose your types files (namely `Mime.types`) to add your own extensions. I agree with your second point. However, it is helpful to detect MIME types based on extension in a trusted environment. But the goal is not to detect valid or invalid file, this is a too large goal. Specific libraries for each file format must be used I think.
For now yes, but contributions welcomed!
Yup, we are removing all of them, as scheduled.
[http://tutorialspoint.com](http://tutorialspoint.com)
Just remove and install them explicitly via brew
Check out https://phpacademy.org/ for beginner content.
This is not a good reason to use `goto`. The compiler should be making the optimizations for you. You should not be optimizing for the compiler. If this is a shortcoming of the compiler and you have the sufficient know-how (which igorw likely does), then you should fix the compiler. Chances are these generated instructions have little-to-no impact on the executing code. Edited to add that there are probably some interesting stack implications with jumping to before the `try` statement from within a `catch` block.
I prefer reading via Newsgroups (AKA NNTP - Thunderbird supports this (under New Account -&gt; Other), as do some other mail clients). The news.php.net newsgroups server always appears to have problems (slow or just refuses to serve me), so I use news.gmane.org instead. GMane.org also offer a couple of different interfaces which I find easy to use.
Agreed, there is many poor public speakers on the circuit, unfortunatly this is one of them. There is nothing worse than trying to listen to someone who doesn't seem to know what they are saying next, it ruins the flow, thus the viewers/audience concentration.
Also, manual optimizations are often coupled to a specific interpreter. A newer version or alternate interpreter might optimise differently, and your "optimizations" might actually cause your code to be slower. This is one reason premature, and possibly uneccasserry, optimizations are bad. 
Thanks for the lengthy explanation but I think this is taking "single responsibility" a bit too far. We can't just put everything in their own layers. Why not having another single layer for the view, and another one to build the headers, etc. And if we believe that the controller is responsible for creating a response, why not let the controller have that responsibility? I had a look at your example on github and the code is spreads accross so many more files which I think is not convenient to work with.
It is not a premature optimization to write the most efficient version of some code by default. **Nobody** is suggesting that you go into your codebase and switch every function call or loop for a goto, of course they aren't. What Igor is [bravely] saying is that goto isn't *always* evil, that in some cases it can provide a tangible benefit, worth taking advantage of. It doesn't much matter what evidence he has to support his (factually correct) claims, if everyone is just going to parrot "goto bad, goto bad" ...
I also use Thunderbird. It's the best solution. Good interface and easy to read.
If opcache is enabled, the jump optimizations will be done ;)
Whilst I don't personally feel comfortable with ADR at this stage (and would still personally prefer all my "actions" in a controller that represents a resource), I think it's right that responses should be cooked up by dedicated objects. The controllers job in the web context has been moving more and more to the job of being a signal conductor - an action is requested, the controller goes and figures out what needs to happen and marshals all of the rest of your application logic to service that request. If you want to take it to the extreme, check out the CQRS stuff that is gaining popularity right now in the Laravel community - the controller throws a message object into a service bus where a listener picks it up and acts upon it, potentially raising events which other listeners then act upon. That's quite a number of additional 'layers', each with their own responsibility. Where having a dedicated response object comes in very handy is when you want to deal with concepts like content negotiation. Your controller can interpret the request (and specifically request headers) and then select an appropriate "responder" to service that request. So if you have an accept header of application/json on the resource /Widgets, your action (method or class) knows it needs to respond using the JsonWidgetCollectionResponder. If the accept header is application/xml you know you need to respond using the XmlWidgetCollectionResponder etc. Liberal application of the strategy pattern here keeps the content of your action (method or class) incredibly brief instead of stuffing every one of them full of the logic necessary to service both requests. You also get benefits when it comes to things such as handling response codes and so forth. So yeah, whether you buy into ADR or not, it makes a whole lot of sense to create dedicated response objects for your actions. This layer typically already exists in a generic form (symfony response object and it's peers for example), so it's really not a terribly new concept. 
Good to know. Why are they only done with opcache enabled, though?
Thanks! Let me know whatever you build with it!
Oh yes I'm already totally convinced too for the dedicated response objects. But here with ADR, it seems there is an extra layer, the responder. So now we have Controller &lt;-&gt; Responder &lt;-&gt; Response. I don't think the middle layer (Responder) is necessary. What you say about the controllers, sounds like the resolver or router job. I'll have a look at CQRS.
&gt; What Igor is [bravely] saying is that goto isn't always evil, THIS is the part that everyone should focus on. Not that it's micro-optimization, not that it's not needed, not that you should change the engine. The thing here is that goto HAS its uses, and using it isn't a sign of bad programmer. 
Everything igorw does is fantastic. I think I have a new hero.
&gt; In MySQL a straight join will remove duplicate rows from the result set &gt; STRAIGHT JOINS... which is actually a custom MySQL syntax for a LEFT JOIN These are both incorrect. A straight join forces the MySQL engine to perform the join in the order you have written the query, in the case where more than two tables are being joined, irrespective of how MySQL "thinks" the query would be most efficiently performed. In the case, TableA *JOIN* TableB *JOIN* TableC, MySQL may decide that indexes are used to better effect by joining B against C, then the result against A. If you know that TableB contains 100,000,000 rows, and every row will be joined against a row in TableC, where as only 1% of the rows will be joined against a row in TableA you may wish to force MySQL to always do (A JOIN B) JOIN C to greatly reduce resource usage. For the most part, MySQL would correctly determine this is the case, but if your indexes are not properly optimised (running OPTIMIZE `table`), then MySQL will not be able to decide in advance which indexes would be used to best effect. From the docs: *"STRAIGHT_JOIN is similar to JOIN, except that the left table is always read before the right table. This can be used for those (few) cases for which the join optimizer puts the tables in the wrong order."* Nice work with the library! Looks really clean and well written. Edit: I see you have updated your original comment: &gt; STRAIGHT JOINS... which is actually a custom MySQL syntax for a INNER JOIN and some proper filtering Unfortunately this is still not correct - STRAIGHT_JOIN is *additional* syntax that does not replace INNER JOIN/LEFT JOIN etc... Nor does it do any filtering whatsoever. With or without STRAIGHT_JOIN the result set will be identical. The only difference is the order of execution within the MySQL engine itself.
The initial question "why not use function recursion", the reasoning that it's better to use jumps is obviously correct. The most precise version of this code is the one that uses goto, it's the clearest to read, and to execute. I don't agree that it's correct or necessary to rely on optimizations that aren't part of Zend to write your code for you.
you're right.
Your welcome mate ;)
Does GMail support it ?
So I have created some code that replicates this. Though it relies on the prerendering kicking in (so you'll need to hit each of the files via the address bar a number of times) // test1.php &lt;?php function regenerateToken() { session_regenerate_id(true); $_SESSION["token"] = substr(md5(uniqid(rand())), 0, 13); $_SESSION["userAgent"] = md5($_SERVER["HTTP_USER_AGENT"]); } // Start a session. session_set_cookie_params(0, '/'); session_name("SessionBork_Test_session"); session_start(); $_SESSION["SentryUserId"] = '99'; regenerateToken(); header('Content-Type: text/plain'); foreach ($_SESSION as $k =&gt; $v) { echo $k . " = " . $v . "\n"; } Access test1.php followed by test2.php and you should see a bunch of session variable output. As soon as prerendering/fetching kicks in you'll start getting a broken message. // test2.php &lt;?php function regenerateToken() { session_regenerate_id(true); $_SESSION["token"] = substr(md5(uniqid(rand())), 0, 13); $_SESSION["userAgent"] = md5($_SERVER["HTTP_USER_AGENT"]); } // Start a session. session_set_cookie_params(0, '/'); session_name("SessionBork_Test_session"); session_start(); if (empty($_SESSION["token"])) regenerateToken(); // Complicate session highjacking - check the current user agent against the one that initiated the session. if (md5($_SERVER["HTTP_USER_AGENT"]) != $_SESSION["userAgent"]) session_destroy(); // Log in a the user based on the SentryUserId // ... logging in, setting userId, regenerating session $_SESSION["userId"] = '10'; regenerateToken(); header('Content-Type: text/plain'); foreach ($_SESSION as $k =&gt; $v) { echo $k . " = " . $v . "\n"; } if ( ! isset($_SESSION['SentryUserId'])) echo "\n--\nPrerendering brokeded me."; If you can get it hooked up to xdebug in an IDE or something you should see the hidden prerender hit to test2.php (which looks to be absolutely correct in the response)
This is great I was looking for something exactly like this.
Ok, sounds good. Only when I can easily understand what igor understands so easily will I use goto.
So are you trying to automate a checkout process? If so look at selenium or you want to go header less casperJS / phantomJS. You are not making any sense how can you expect anyone to know what you want, if you want ecommerce save yourself a headache and go with Shopify.
Quick delete it from the internet.
what is this heresy? GOTO is evil. My college professor told me so and I do not ask questions. &lt;/sarc&gt; Honestly, well done Igor!
Optimizing loops is always a good weak point to focus on. If a small bit of code is run thousands of times it deserves some closer scrutiny than something else that may be called once or twice.
Thank you all for the replies. Going to have a search through them now. Also going to leave this here; http://exercism.io/ I cannot vouch for it, as I haven't looked through it enough - but it has hit the front page today, oddly enough, claiming to be able to teach you how to code well enough to do it as a job. (Just in case anyone else is in need of sources) Again; thanks for the help! :)
Not to patronize, but it seems you didnt just oversimplify, but were flat out incorrect. Surely it's possible to produce duplicates in a straight join
I have to applaud the execution of the "goto defence" proof. Obviously this is some very elaborate trolling going on. =) But don't mislead people reading this. Though in PHP recursion is expensive (especially considering the limited stack size), when compared to a while(true) loop the performance benefits benefits of a goto statement are nil. Posts like these can actually be harmful to newcomers, because they create an illusion that language and operator performance are important to application performance, which they are not. What is important are efficient algorithms and that's what people should be optimizing instead. If you write a N^2 sort in pure C vs an NlogN sort in say PHP, the NlogN is still going to outperform. Some quick math: Lets say we want to sort 10000 elements: * N^2 would take ~ 100000000 operations * NlogN would take about 130000 operations * So even if the language in which we implemented the NlogN is 100 times slower than the language we did N^2 in we still outperform it. I actually remember finding a rather nice application for GOTO myself. I was doing an app that had multiple points of possible failure (dealed a lot with fragile external services). For each failure there was a "try again from some previous step" point. I tried doing it with whiles and parametrized breaks (like break 5; to go 5 while loops up) but the result was looking like a mess. So thats when I used goto, each failing point would just send a script to a specific checkpoint and retry from there, and it looked way more elegant. 
I am not intimately familiar with any of these concepts yet, but this looks similar to a command bus architecture that has been talked about at some of the php conferences lately. Basically the controller throws an object into a service bus which maps to a listener and then acts on it. Which then can raise more events, etc. The code I have seen for that is typically the C(-r)UD actions and that map to a handler. So CreateBlogPostRequest -&gt; CreateBlogPostHandler. From what I understand so far, ADR takes it a step further and has actions for every type of request and instead of going to a central bus for example it invokes the responder directly. So you have BlogReadAction -&gt; BlogReadResponder. It makes sense to me that if you are going to go this route that you wouldn't limit it to CUD actions and instead implement it for all actions. With that said: 1. Why not go through a command bus or central place that maps the actions to the responders? The only benefit I see with this, is that you can decorate the bus and have one interface that all actions and domains use to communicate with each other. 2. What differences do you see then with the command bus type architecture other than you implement more "actions". I am trying to figure out if everyone is calling the same thing different names or if there are some fundamental differences here. 3. It seems like your actions are coupled to your http layer. Wouldn't it be better to create some sort of transport class with serializable data that would be populated in the controller to pass to the action with any input data or whatever you need from the request? On the presentation from it seems to do the same thing of coupling it to the response or view. Would it be better to pass a transport object back with the response or view data and have the controller or something else actually respond? If this is all your business logic, it makes sense to me to try and abstract it so you can replace the underlying framework, symfony, aura, laravel, etc by altering only the "controller" with what gets passed to the transport layer and onto the "action". The drawback it seems is another 2 layers. 4. I read the Front-End controller omission section but I still think it would be nice to see on the expanded example code just some simple code that would demonstrate what the controller can now do in these different approaches. For example if you are handling authentication, access control, and validation in the controller, isn't the controller still doing too much then that why go further to strip out only the "Actions" and "Responders"? Or if your action is handling that, then isn't the action doing too much then? It seems difficult to know where to draw the line.
http://daylerees.com/codebright Also buyable as eBook.
I agree with the CodeBright recommendation. Also, a few months back, I put together a post on what I feel is the best way to start - http://laravel-news.com/2014/06/how-to-learn-laravel/ 
I have been exploring these same things. On laravel there are several talks about the "command bus" which seems to be a similar concept. Isn't the responder layer basically just a layer to instruct the response on what to do. Without that layer, where would you set response codes, view content, etc?
follow up to this for any future unfortunates... Make sure you are using 'Project' view, not 'Project Files' view. Also, this was crashing due to the Behat plugin. Behat Support is the official plugin, not Behat as I had wrongly assumed. 
&gt; Posts like these can actually be harmful to newcomers You don't sacrifice accuracy of analysis to fear. Who cares if telling someone that a knife is sharp, might cause someone to cut themselves? 
I would for example have something like this in my action: $this-&gt;view = new View('page.tpl', ['title'=&gt;'foo', 'content'=&gt;'bar']); $this-&gt;response-&gt;setCode(201)-&gt;addHeader('Content-Type', 'html'); or even: $this-&gt;response-&gt;setContent((new View('page.tpl', [/*...*/])))-&gt;render()); response being a generic Response object built by the controller/action. The controller then gets the result from the view and adds it to the response content (this is done after the action is executed). Only if I have to build very complicated responses I would put it it another layer/service, but so far, just adding some headers and setting the HTTP code (in most cases you won't need more) can be done in the action.
Hey , I am curious whether you noticed https://github.com/auraphp/Aura.SqlQuery/ ? Aura.SqlQuery don't use the PDO itself. Inorder to query you need to pass it to PDO or something like https://github.com/auraphp/Aura.Sql itself.
Aren't you just moving the controller logic to the action then? The action would be responsible for everything and just pass it back to the controller to inject. Why not leave the response within the controller action and have the action just process things?
Laracasts.com 
absolute the best book
Not sure what you mean. An example?
You mentioned that code snippet you pasted was in your "action", I assume you meant a ADR "action"? If so why not leave that code snippet right in the controller itself?
They're running on donations. Switching to a faster application stack could save thousands if not millions in hosting costs.
For the time being I did not build the service provider and its drivers. I will eventually (maybe this week?) because it just makes sense :)
When I do, i will do PDO and MySQLi
&gt; What Igor is [bravely] saying is that goto isn't always evil, that in some cases it can provide a tangible benefit, worth taking advantage of. [Yes, but it that benefit worth the risk](http://xkcd.com/292/)?
[This question on Webmasters SE](http://webmasters.stackexchange.com/q/33415/1010) implies that there are extra HTTP headers sent when Chrome and FF do prefetching. Check if it's still true, you can probably use them as hints to take some sort of action. I'm not sure if there's a way for the *server* to tell Chrome not to prefetch something *before* it's prefetched. The answer there indicates that returning 404 on prefetch is safe though...
Great! Thanks for the information. &gt; ... which likely wouldn't be worthwhile to include in the main compiler. I suppose this also fit into my last point: &gt; Chances are these generated instructions have little-to-no impact on the executing code.
A better point to focus on is what a code profile returns. Chances are the expensive operation is *in* the loop, and not the loop itself.
I think Laravel is so easy, its not that important for a beginner to *need* a book. The web page itself can give you a simple startup tutorial. Otherwise, as others have noted I would go for codebright and laracasts. 
It's not that `goto` is bad. The issue is that this is an inappropriate use case for `goto`. In effect, this has no benefit on the executing code, runs the risk of breaking in different PHP interpreters, and possibly has stack issues. In general, and in languages that aren't PHP, `goto` moves the stack pointer around and should be used with great care.
Your tone/wording implied that there is something inherently unsafe about the C language. Bad program(mer)s exist with any language. What do you consider "C-style" PHP? What checks do you need to repeatedly insert in C? I'm not trying to harp on you, I'm just trying to get clarification as to what you're driving at.
yeah, it is. I reverted to the text version ( a bit TLDR anyway too ;-)
Php does not place random bits into variables, Php does not allow you to read memory locations. These are things you have to guard against in C: initialize data structures, place string endings, etc. 
I understand that. But you're providing differences between C and PHP...not similarities. I'm asking what are the similarities you were referring to.
Hell, after a decade of people saying NEVER DO THIS, I'd be surprised if a bad programmer even knew what goto was.
Thanks for this useful article. Below my thoughts about it. Frist, I like this--&gt;The HTTP response is the View (not a template). **Domain** I think you should separate domain objects (db persisted) from "env objects" (session, application, and environment data). I think the latter are the one that may affect the responder behavior, while the db object only provide data to be inserted in the response. **Responder is the logic to build an HTTP response.** Namely, I think it is a generalization of the REST approach, because the Responder can decide how to build the response for example thanks to the extension in the url (/my/ressource.json vs /my/ressource.xml). IMHO Responder could also be called "Renderer", as it decides separately from the action how to 'render' the response. **"Model vs Domain"** I quite disagree with the initial statement, I mean IMHO I think the Responder shall not use Domain objects like entities directly: it should use data provided by the action. Or said differently I think you should say it uses domain data in readonly mode. (ie I see Domain as an ORM object, then translated to a pure array by the action for the responder). Plus you say it too, later in the article : *"...the Action delivers any needed Domain data to the Responder and then hands off to the Responder completely."*: **It is exactly how it should be (IMHO ;-)** **Controller vs Action** there is a lot to say about closure approach for actions, and to sum it up it often leads to the "courier anti-pattern" (https://r.je/oop-courier-anti-pattern.html) or use some ugly central directory (aka "container"). is it better? really not sure. **Next paragraphs** To me most of those design pattern seems to be "intellectual wanking" (french translated ;-), I mean too general to be useful in a web app context, except the RMR (Resource-Method-Representation), but appart for the different name, I don't really catch the difference. One of them shall die! **your example codes** Awesome work, My only comment is that I really think that most of the time it is possible to use a generic Responder. And That maybe the Redirects should be perfomed by the action, not at the responder level? Very interesting discussion (despite the audio ;-) 
Smells of blog spam
Right, if you compare the sbadmin2 to our theme it's significantly different from what anyone else can use, especially how we integrate it into Laravel, Eloquent, etc; Thanks for your comments!
&gt; What Igor is [bravely] saying is that goto isn't always evil, that in some cases it can provide a tangible benefit, worth taking advantage of. He's right. But his argument is wrong. This is not a good argument for goto, just the opposite, this is exactly the case where goto IS evil. Goto can on rare occasion be used to make code clearer and less redundant. This is not one of them. This is a problem all too common among PHP programmers. Worry about microseconds and micro optimizing while performing inherently slow tasks. This particular piece of code is intended for retrying failing operations such as network connections that are several orders of magnitude slower than the code being used. Clarity in the code is lost for gains that are utterly irrelevant. 
&gt; THIS is the part that everyone should focus on. Why? I mean it's true, but the entire thing serves as a perfect example of why people say "Never use goto." "Never use goto" is a good example of a [lie-to-children](https://en.wikipedia.org/wiki/Lie-to-children). It's not strictly true, but the cases where goto is useful are few and far between and it's perfectly acceptable to demand a rigorous defense of its use. "It uses fewer opcodes." is only an acceptable reason when you're working on very small, memory limited microcontrollers. "It saves a few microseconds" is only an acceptable reason when those microseconds actually matter. e.g. in long tight loops.
Exactly how many new trendy PHP JIT compilers get released every year? 
If you're retrying something thousands of times in your code because of a failure, I would say that's a big problem ...
37.5‰
So we should write only code that doesn't fail? I think your point is moot because fewer opcodes is possible without affecting the behavior, on the contrary removing the exception changes the behavior -&gt; that's not optimizing. It's like saying "I want to optimize my ride to work" -&gt; "Just don't go to work".
Just follow instructions on these 2 pages: http://php.net/manual/en/install.windows.manual.php http://php.net/manual/en/install.windows.iis7.php If you want command line, add this page http://php.net/manual/en/install.windows.commandline.php It really is not that hard. You configure a FastCGI handler module, not a mime type. 
Ha ha, certainly! So Sun initiated the Green Project to develop a language to unseat C++, but once work was underway Gosling and friends decided to shift gears and create an embedded programming language for washing machines, TV cable boxes, and other consumer electronics instead. Cable vendors didn't want it, the execution speed of its implementation was too slow, and the runtime was too bloated to fit most embedded environments. Then along came the web and Sun pushed HotJava and applets. Sun struggled to find a niche for Java from the very beginning. Once Java finally found its footing, Sun unleashed the marketing juggernaut. They changed their stock symbol to JAVA. They targeted the universities and established [Academic Java Centers](http://www.apnewsarchive.com/1999/Sun-Microsystems-Plans-Java-Center/id-335c7f24d16a17370ab2a110bac8568f) - partnerships that encouraged colleges to teach Java when there wasn't a real-world demand for Java programmers. Sun was manufacturing demand like De Beers and diamonds. Sadly, some colleges drank too much koolaid, went 100%, and don't expose students to anything else than Java. I'm not arguing Java doesn't have a place in one's education, especially now that the damage has been done, but simply that one's education can't be built solely around it. Without exposing students to alternatives, universities just churn out cookie-cutter programmers. Its criminal these institutions charge exorbitant tuitions and then withhold a proper education. As more and more graduates entered the workforce, the industry began to reflect a large percentage of well-intentioned but myopic programmers. They believe OOP to be the One True Paradigm simply because it's all they've ever been exposed to. Even then if another language's class-based OO model doesn't behave like Java's then it's somehow substandard. They argue whether JavaScript is OO because they've never seen objects without a class. They abhor global variables but happily use static properties and singletons. They contrive strategies to overcome the short-comings of OOP and label them "best practices" or design patterns. OP asked what to learn that would help uncover new ways of thinking. Look at how many of the responses to the question recommend Java... most of them explain because its useful or helpful to know. How many explain something about Java that would actually challenge one to look at problems differently? There's not much special about Java and what it brings to the table; it "perfected" C++'s syntax for defining classes, but it didn't invent the virtual machine or write-once-run-anywhere portability, it didn't invent checked exceptions, it offered nothing new of consequence. The only reason it rose to prominence was lucky timing mixed with some very smart marketing on Sun's part. Now the industry has commercialized. It's not the 1950s and '60s anymore; programming is no longer the purview of engineers and scientists. Most of us are just "assembly-line" programmers. That's good because I can still make a paycheck even though I'm not smart enough to be a computer scientist! But I can't help but feel sad when I see my coworkers and friends in front of their laptops 9-5, writing code but never questioning the way or why of the things we do. There's no spark or passion, no pride. There's financial incentive for companies to stay with Java as well. I've said before that Java is the new COBOL - a lot of legacy code has been written in Java and needs to be maintained. The cost of replacement is too high. There are other language paradigms, other schools of thought, other ways of thinking and solving problems... but everyone is too comfortable with Java and mediocrity to consider them. It's just like how scientific theories/discoveries face resistance and prejudice. How many times have we heard, "Oh, why another programming language?" There's still a lot to explore in programming and language design but no motivation to do so. TLDR: Sun took crap from their closet and manipulated universities to create an artificial demand for Java programmers as the commercial programming industry was in its final stage of "solidification." Now we're stuck with Java because it's what sheeple were taught and society shuns dissension. FML
laracasts is, in my opinion, the best of the best. That said, I highly recommend simply reading the docs through from start to finish. This will give you a really good overview of what Laravel does and doesn't do and will create some memories that the books / laracasts can trigger and develop upon. The documentation is great and when starting with Laravel that is the only resource I used. 
I laughed, reminds me of those damn BuzzFeed posts everyone I know on Facebook shares. I liked it. Also thank you for the post, it's very good. 
The empty void where WordPress existed is immediately filled by Joomla! Language usage statistics remain constant, but the internet is suddenly 20% more secure.
This would be the best answer if there were reasoning behind it.
But then PHP developer suicide rates would quadruple.
You can indeed divine probably 85% of what you need to know about laravel by skimming the docs and just tinkering around with it. That's how I learned Laravel. The rest I learned by asking people, looking through the undocumented APIs, and Laracasts.
It's awesome to have people reading my posts. Thank you vb2014
Does anyone have any topic requests for my next post? I've got a list of topics but I'd really like to source the idea from r/php :)
Everything being described here is already happening in the front controller. [The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object](http://en.wikipedia.org/wiki/Composite_pattern) The group of objects are the controllers, so the run method of the front controller is the actual action method itself. [the strategy pattern enables an algorithm's behavior to be selected at runtime](http://en.wikipedia.org/wiki/Strategy_pattern) The front controller uses a strategy pattern to determine which controller it wants to use for that particular request. The front controller's run or invoke might look like class FrontController { public function __invoke() { $this-&gt;router-&gt;__invoke(); $this-&gt;dispatcher-&gt;__invoke(); $this-&gt;response-&gt;__invoke(); } } In this example the Response class is the Responder class. Which leads me to suggest * ADR must also apply to the front controller * A controller does not have to implement its own ADR since it is already ocurring * A Responder class is not required (or it should be a type of Response ?)
I hope not.
If by "disappeared from existance" you mean a magical event that would wipe all wordpress installations, the answer would be ~40%: http://blog.websitesframeworks.com/2013/03/programming-language-statistics-in-server-side-161/ shows 78% of websites use PHP and 55% of those are Wordpress. Otherwise it would be approximately the same since people that made wordpress websites would switch to another PHP-based CMS. 
What I meant was "why bother about 2-3 opcodes when exceptions are far more expensive?". It's like replacing foreach ($arr as $var) { ... } with for ($i = 0, $count = count($arr); $i &lt; $count; $i++) { $var = $arr[$i]; ... }
&gt; I actually remember finding a rather nice application for GOTO myself You realize that to someone else's eyes the nested loop implementation would have looked better, to others still they would suggest something else altogether. Beauty is in the eye of the beholder, the point I think is being made is that it is plain wrong to assert that goto should *never* be used. I happen to think the more readable, more precise code is the one with goto with regard to igorw/retry, but eye of the beholder. What opcodes are generated and how it is executed is not important, just as unimportant as it has always been. What is important is that here is a self contained piece of code using goto, not killing fairies or slaying unicorns or doing anything else that the internet doesn't like; it's doing a job that we *all understand the first time we read it* with no ill side effects.
Hm, I'm not seeing a "itinerary_if_available_" anywhere. 
If Wordpress suddently disappeared from existence - I would dance a happy dance.
Laravel. Hands down
Kohana for the cascading filesystem, ORM w/ query builder, routing, HMVC, exception handling, and profiling.
You don't really about specifically clicking the `#submit` element, but submitting a form. You can change your HTML from `#submit` to `input[type="submit"]` in the future, but that doesn't mean the behaviour changed, just that your concrete HTML implementation did.
I like yii
Symfony2
Now thats something I can totally agree with
Symfony 2 - The learning curve is steep but pretty rewarding when everything clicks. It's only one I'd recommend to use in a corporate/business environment too (if that's important to you).
Fancy seeing you here! 
Oh no I meant that's how I would build the response in a good old MVC action.
I use Codeigniter, pretty simple to start, very powerful. edit: wow, gold? thanks a lot!!
Not so much a framework, but [React](http://reactphp.org/) is fun to play with - a node.js experience in PHP.
Would you recommend Silex for the easier learning curve and allowing to get into more advanced Sf2 components as you go?
I'm currently using [Fat-Free Framework](http://fatfreeframework.com/home). It's a micro-framework that provides a routing and templating system. I like that it doesn't get in your way and makes it easy to integrate into existing PHP projects - just unzip the distribution package and get started. Not a framework, but another library I'd recommend is [RedBean](http://redbeanphp.com/) - it's a zero-config ORM for PHP. Great for prototyping.
Phalcon
Yeah that's one thing that's kinda bugged me quite a bit with Laravel -- that it's not particular easy to swap a driver implementation. Take for instance the **Cache::set()** -- depending on your config it will either store in the database, or filesystem. No combination unless of course you go to the length of instantiating a new cache manager with the filesystem dependencies injected into it, etc. In other words -- a bit of a nuisance for something that should be simple. Sometimes you just want it to store in the database for that one thing. It would be cool if you could do something like: Cache::driver('filesystem')-&gt;set('blah', 'value'); @utotwel wink wink
phalcon if you know laravel, otherwise laravel
Holy shit. A reasoned, non-sarcastic response. Where am I? \*rubs eyes in disbelief\*
Lithium
http://www.reddit.com/r/PHP/search?q=framework&amp;restrict_sr=on&amp;sort=relevance&amp;t=all Edit: reason for downvotes? There are literally dozens of identical threads here.
According to w3techs.com: PHP usage share: 82.1% Wordpress usage share: 23.1% PHP share with no Wordpress: (82.1 - 23.1) / (100 - 23.1) = **76.7%** But like others said, the gap would probably be replaced by another PHP CMS.
37.5‰ == 3.75% 
The 55% is Wordpress's share out of all CMSes, not all sites. Also, those stats are 2 years old now, the most recent are on w3techs.com.
adapter?
As someone who has worked with both, just go straight to Symfony2. You'll have more trouble finding good documentation and other resources for Silex and Symfony2 just does things nicer.
Symfony2..... yet Laravel5 is promising
http://www.reddit.com/r/PHP/search?q=learn&amp;restrict_sr=on&amp;sort=relevance&amp;t=all
Absolutely agree on this. It's worth your time and money.
&gt; [don't upvote] nice try
OpCode != Runtime
Symfony2, the learning curve is overstated, the difference is negligible.
As presented, it's just noise. Patterns solve problems in contexts. What are those in your situation? Besides, a lot of patterns have similar class structures. Your __Something__ class wraps a __SomethingInterface__ object and delegate calls to it. It could be a decorator if for example you added some intermediate step (e.g. logging or persistence) in between the call to __Something__'s methods and the delegation it does. By the way, I'm assuming that at line 13, you meant a call to __something__ and not to __boo__.
Behat does nothing of the sort. It generates a scaffold from your Gherkin scenarios that you use for your steps, but you still need to write the PHP code to implement the step. Behat just means you can write automated acceptance tests in a way that makes sense to non-technical users.
&gt; need to write the PHP code to implement the step. I'd rather use casperjs/selenium for this sort of testing. PHP has no relevance. &gt;in a way that makes sense to non-technical users. But it doesn't translate. You can't give me an english spec that translates to code, so why would an english test be a good evaluation of that code?
Cake is pretty quick and easy enough to deal with.
Not joomla, please!
&gt; I'd rather use casperjs/selenium for this sort of testing Behat (and the equivalents in other languages such as Cucumber, Lettuce and Cucumber.js) are not a replacement for Selenium. They're a way of defining test steps to be executed in a browser, but don't provide a way of driving the browser. Often developers use Selenium with Cucumber or Behat. &gt; PHP has no relevance Yes it does. If you're building a web app in PHP, it makes sense to write your tests in PHP, rather than using another language like Ruby or JavaScript because switching context between programming languages slows you down. &gt; But it doesn't translate. You can't give me an english spec that translates to code, so why would an english test be a good evaluation of that code? What on earth makes you think that the English spec gets translated into code in some manner? The English spec is just a convenient shorthand for the actual test step. Like I said, Behat generates a scaffold for your tests from your specs. Each line of the spec maps to a function, and it's up to the developer to create code that implements that step inside that function. If you take a little care with how you define your steps to make them reusable, then you need only implement a few steps (ie click button x, go to page y etc).
No factory at all :P. BTW, factory will be helpfull in a polimorphic context
Yii 2, even though still in beta, is a beast. I love it. 
It's also worth mentioning [Laracasts](https://laracasts.com/), in my opinion one of the best webdev video series out there. 
Here's a good [comparison between Symfony and Laravel](http://www.reddit.com/r/PHP/comments/2gm1kg/if_youve_used_symfony_extensively_and_have_also/).
Well, basically it is a router class which may contain different implementations. This example may be more suitable: // new Cache( new RedisImplementation ) // new Cache( new SessionImplementation ) // new Cache( new MemcachedImplementation ) $cache = new Cache( new RedisImplementation ); $cache-&gt;flush(); //removes all redis cache entries $cache = new Cache( new MemcachedImplementation ); $cache-&gt;flush(); //removes all memcached cache entries Implementations are forced to use `CacheInterface` so they share the same functionality. Cache is just a router on top of it.
Things may be a bit more complicated when you're trying to map objects, but is there any reason the [DBAL QueryBuilder](http://doctrine-dbal.readthedocs.org/en/latest/reference/query-builder.html) couldn't do this?
That would be an [adapter pattern](http://en.wikipedia.org/wiki/Adapter_pattern). Edit, perhaps more accurately it's *adapter-ish*. We can't see the implementation of `RedisImplementation` or `MemcachedImplementation` looks like. To me, based on what's there, it looks like an adapter. Just [call it composition](http://www.reddit.com/r/PHP/comments/2hbh9g/is_it_a_pattern_if_so_which_dont_upvote/ckr6hcm) if it makes you feel better.
As best as I can tell this header is no longer sent. According to the Live HTTP Headers extension it does send a whole bunch of odd looking cookies along on the prefetch request but I'm not seeing those on the PHP end. I'm thinking that perhaps nginx isn't passing them on. I'm continuing to investigate
So simple you don't have to worry about little things like DI, namespaces, proper routing, tests, SOLID, an ORM.....
Why do you hate it?
Laracasts and http://daylerees.com/codebright/responses really helped me out. 
Try out http://phpixie.com 
Laravel. If you are interested in learn Laravel you definitely should take a look a laracasts. 
The problem with most php developers I work with, especially wordpress developers is that they tend to think php is the only language they'll ever need and will go out of their way to come up with a hackish solution instead of learning a new language. Perhaps this will change that. 
Does it still require tables for layouts? I haven't looked at it for years, but when I saw that, I said "nope", and went with Wordpress.
It's not a pattern. It's called [composition](http://en.wikipedia.org/wiki/Object_composition), and it's one of the foundational tennants of OOP.
From what I can tell, this seems pretty pointless. It'll make your computer hotter. Consider from a usage point of view. Who does this Cache class benefits? If it simply always delegates calls to the underlying object, it doesn't benefit anyone. What I think you want to do is something else. It seems to me you want to separate objects that need caching from objects that provide it. But that doesn't seem like what you're doing because to do that basically you need caching users to accept caching objects as parameters somehow (maybe through setters or constructors for example) and have a "third party" to select the appropriate caching object and put it into the caching user. __((EDIT))__ Just in case you're wondering where is the old longer answer that was in here, I deleted it. I had made the mistake of not reading your reply correctly. __((/EDIT))__
I am a core team member of http://auraphp.com/ . So as you guessed my personal choice is aura. The beauty is, the framework is made from components. You only use what you need. No more additional packages. Some of the problems are less documentation for the framework which we are trying to resolve with https://leanpub.com/aurav2/read and http://github.com/harikt/Aura.Blog/ . If I find sometime will try to write a getting started tutorial of Blog.
It's never *required* tables, at least not since 2008.
I'm an old CakePHP guy, but Laravel is looking more and more enticing...
I still like Code Ignigter :-)
DBAL still requires Doctrine. Such an overkill.
I might end up using a function map pattern to replace the switch-case. It is working like charm for https://github.com/nilportugues/validator
I used to hate the configuration, but when I saw that 1min of configuration could replaced 1H of work without a framework I felt in love with.
You will learn about the components as time goes.
Yes, this is adapter.
In your HTML
I've been using Silex, which is also written by the Symfony team. Silex is a wrapper around Symfony which aims to abstract away a lot of the complexity of Symfony, while still giving you full access to the raw Symfony components if you want them. The learning curve for Silex is way better than Symfony's learning curve, so you can get up to speed right away. Overall, Silex gives Symfony a real micro framework feel in terms of configurability and how quickly you can get things up and running.
I thought adapter would be if you had `class Z` that *didn't* implement `SomethingInterface`, but you wanted to use it in `class Something`. So you write `class ZAdapter` which *does* implement `SomethingInterface`. `ZAdapter` perhaps takes `class Z` as a contructor arg, fulfilling the requirements of `SomethingInterface` but using the functionality of `Class Z` to do it. The point being, to provide the functionality of `class Z` to `class Something` without having to change `class Z`. So unless my understanding of Adapter is wrong (and it may be) I don't see an example of an adapter here. I think /u/Mariobb had it right in saying that this is just plain old polymorphism. EDITS: clarity, I hope
Silex abstracts a lot of the Symfony functionality but with that it also removes some of the Symfony essentials such as the kernel and app/console script. I used to use Silex for some CLI apps but have now moved back to Symfony converting the Silex apps as I go. Don't get me wrong, Silex is great for back end work and writing APIs but lacks some of the features required to write a full blown front end and back end. Try adding Mailer to Silex.
I would go the extra distance and go straight for Symfony 2. It's well worth the extra learning curve. Don't forget to integrate PHPUnit tests ;-)
Learn as much about the service locator as you can. Here is a good blog for ZF2 topics. https://mwop.net/ If you want, I could go into details about my philosophy for building enterprise level ZF2 apps. I picked it up about a year ago at my current employer and have build a half dozen applications with it.
This kind of looks like a [strategy pattern](http://en.wikipedia.org/wiki/Strategy_pattern) to me. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Strategy pattern**](https://en.wikipedia.org/wiki/Strategy%20pattern): [](#sfw) --- &gt; &gt;In [computer programming](https://en.wikipedia.org/wiki/Computer_programming), the __strategy pattern__ (also known as the __policy pattern__) is a [software design pattern](https://en.wikipedia.org/wiki/Design_pattern_(computer_science\)) that enables an [algorithm](https://en.wikipedia.org/wiki/Algorithm)'s behavior to be selected at runtime. The strategy pattern &gt; &gt;* defines a family of algorithms, &gt;* encapsulates each algorithm, and &gt;* makes the algorithms interchangeable within that family. &gt;Strategy lets the algorithm vary independently from clients that use it. Strategy is one of the patterns included in the influential book *[Design Patterns](https://en.wikipedia.org/wiki/Design_Patterns)* by Gamma et al. that popularized the concept of using patterns in software design. &gt;For instance, a class that performs validation on incoming data may use a strategy pattern to select a validation algorithm based on the type of data, the source of the data, user choice, or other discriminating factors. These factors are not known for each case until run-time, and may require radically different validation to be performed. The validation strategies, encapsulated separately from the validating object, may be used by other validating objects in different areas of the system (or even different systems) without code duplication. &gt;The essential requirement in the [programming language](https://en.wikipedia.org/wiki/Programming_language) is the ability to store a reference to some code in a data structure and retrieve it. This can be achieved by mechanisms such as the native [function pointer](https://en.wikipedia.org/wiki/Function_pointer), the [first-class function](https://en.wikipedia.org/wiki/First-class_function), classes or class instances in [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming) languages, or accessing the language implementation's internal storage of code via [reflection](https://en.wikipedia.org/wiki/Reflection_(computer_science\)). &gt;==== &gt;[**Image**](https://i.imgur.com/fHdhziQ.png) [^(i)](https://commons.wikimedia.org/wiki/File:Strategy_Pattern_in_UML.png) --- ^Interesting: [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^| [^Dependency ^injection](https://en.wikipedia.org/wiki/Dependency_injection) ^| [^Post ^Pattern](https://en.wikipedia.org/wiki/Post_Pattern) ^| [^Workplace ^strategy](https://en.wikipedia.org/wiki/Workplace_strategy) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckr9cjg) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckr9cjg)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Not sure why you got downvoted? This looks like the right answer to me.
Yeah, laravel has motivated me to learn how to "build" my own targeted framework out of packages via composer. I think that has been the most revolutionary idea for me personally.
What sort of application are you building? I found the [Zend Framework 2 Cookbook (Packt)](http://bit.ly/1a5zoUf) to be a good resource for making use of the ZF2 components and putting them together.
Everybody used to. It's just been too many years with no updates.
I started a project using basic HTML and PHP without using any frameworks. It was okay, but I reached a point where things became complicated. After abandoning it, I restarted the project from scratch, using Laravel as the framework, and OH MY GOD. Frameworks make complicated things easier, and the outlook of the project is much better than it was before. Can't recommend it enough.
Man, my brain just doesn't understand laravel 
Right, in some cases Silex won't do what you want, if you're trying to do more advanced things. But for most people it'll do more than they'll ever need, and it's much easier to work with than Symfony by itself.
You always can add those things, there are plenty of libraries made for codeigniter out there. for example, in my CI version I have ORM, namespaces, a routing system exactly like laravel's...
This reminds me SO much of Ruby's Cucumber library.
angs? hate? don't know, don't mind XD like downvoting me for giving my oppinion should have some effect on me.
The two kind of remind me of Java Struts vs Rails, except both in PHP. I like them both but think they excel in different situations. Symfony is nice for more 'enterprise' sort of development, with different teams, good separation of concerns, need for modularized reusable code, etc. Laravel is good for lighter, smaller teams who want a more rapid development environment and easier learning curve. Not exactly an entirely accurate comparison but I think both have their strengths in different kinds of projects. 
I like phalcon, but I have to wonder if it's really a wise approach given the relatively stability of HHVM these days...
Yii2 is close to final release. It's amazing.
You can cram a half-assed (due to technical limitations more than laziness) implementation of each separately, or use something from this decade like Laravel that has them built-in.
IMHO it is **basic DI** (Dependancy injection) with basic use of inheritance. 
~~Maybe cuz there isn’t inheritance so cannot be polymorphism?~~ That's not always true. I read composition somewhere. Might be the correct answer and evolve naturally in a polimorph state. 
Actually now I'm starting to think [strategy] (http://www.reddit.com/r/PHP/comments/2hbh9g/is_it_a_pattern_if_so_which_dont_upvote/ckr97yp) is the best answer. Kind of a fun game, "*Name That Pattern!*".
I have not had the opportunity to use this in a professional setting yet, although we are working on setting it up. Specifications can have more info than the Gherkin stories are able to. I wouldn't say Gherkin stories are a replacement for specifications, more of a compliment. Basically the planned workflow goes like this: Customer: "business, we want this" Business: "development, we want this, here is a specification" Development (back and forth a few times possibly): "business, does this story accurately represent this new feature?" [hands story over] Development can program based on the story once it has been agreed on. There could be more details in the full spec, but for those most part the flow is outlined in Gherkin. In addition to having a nice flow plan, we also have a test suite to run against the new features once we finish development. The Gherkin language is very rigid which is also a benefit. 1) Given this happens, 2) When this happens, 3) And this happens, 4) Expect this Where a specification might not be a little more ambiguous. I'm not saying developers shouldn't have some creative freedoms, but sometimes it is better for everyone if the engineers have a solid plan. 
Symfony2
Well, I wasn't trying to nitpick why you created your library (your API is a bit smoother than Doctrine's DBAL... or rather, Doctrine DBAL's is a bit rougher than it should be). My knowledge of Doctrine just seemed to conflict with the statement that it definitely "couldn't do something." I do recommend learning/looking at Doctrine. There seems to be more myth than fact that goes around. Even if it ends up not being a good fit for your projects, there's a lot of good concepts and code there. Enough good ones that that I wish some other database projects would pick up on them. It is unfortunate that you have to use a DBAL connection with DBAL's Query Builder. Most of the QueryBuilder logic is in just a few classes (QueryBuilder, [Selected]Platform.php, and AbstractPlatform.php). It really should be abstracted out. The 16 classes it loads aren't very much, especially with modern opcaches. Its not much more than the 15 your query builder loads for similar simple queries), but just needing 3 would be a lot nicer. Especially since they have worked out a lot of difficult cross-platform issues-- work that can't currently be reused easily. Maybe Doctrine DBAL should make its query builder a more generic feature.
People are on about it because it's a good, solid (and SOLID) framework. The fact that you're hearing a lot about it doesn't diminish its quality. Additionally, I speak from experience. We built our last application in CodeIgniter and then switched to Laravel for our current one, and L4 is *light years* ahead of CI in every way. You complain about its "density," but you can get a CI clone running by learning very little if you choose, and gradually dig into L4 as you have the time and inclination. Again, I'm not "preaching" because the internet is on about this, I've been where you are, I was perfectly happy with CI, then I moved to L4 and you couldn't pay me (well, you wouldn't want to pay me enough) to move back.
If you like it and if it does what you need, don't worry about anything else. This whole Laravel situation is exactly what was couple of years ago CI. And I suppose Laravel will be, in couple of years, what CI is now.
What don't you get? After trying Silex, Symphony, Kohana and FuelPHP, Laravel is the only one that I actually like working with. The official docs are great for reference but for learning PHP they lack complete examples. For those new to Laravel (and frameworks in general) Dayle Rees' book [Code Bright](https://leanpub.com/codebright) is really good.
http://instantrimshot.com/classic/?sound=rimshot
Yii is good for getting something up and running VERY fast, but not much more than that in my opinion. Other frameworks outshine it in pretty much everything.
Oh, the HTML name is actually right; I changed it in the php now. Still not validating though, could it be because the quotes in "if (empty($_POST["firstname"])) {" should be single quotes or perhaps "if($_POST["firstname"] == "NULL")) {
Yeah, exactly. I absolutely agree with you in every single word. In fact, I did pick up a lot of concepts from Doctrine and DBAL itself. 
Yeah I noticed a few weeks ago they (well, one guy) are still doing development. I kinda wonder, what's the point now? Although simultaneously I'm interested to see what will emerge after all this time, how different CI3 will be.
&gt; But it doesn't translate. You can't give me an english spec that translates to code, so why would an english test be a good evaluation of that code? Preface: I'm pretty serious about BDD Firstly, BDD isn't about evaluation of code. That's what unit tests are for. BDD is a communication tool. It's not a tool for "When I click here, this happens..css..css..css..blah" (although you'll find bad practices like that in the wild very commonly). The reason why people use BDD like that is because they think the tests are good for regression tests, but they are not. I'm too lazy to link studies at the moment but feel to google some more on that topic. Basically, BDD will only catch 20% on average of issues during regression. That doesn't seem like a good investment. Where BDD shines though is bridging the communication gap between business users and developers. During develop it clarifies assumptions by specifying the business logic of the app. What I mean by this is that each BDD test should test a business function. For example, it could be "As a gold user I should see 5 things, as a silver user I should see 3 things.. etc.." and maybe the business user will come in and be like "No, as a gold user they should see 10 things." This is things business users care about. They don't need to see a test that verifies a popup opens when a user clicks a button, as they think in business terms on how the application is helping reach their business goals, not in its low level functionality. So now during development you're writing these automated business tests that the business users can easily understand (as in: "yes, that's how the app should behave"), and after development they are extremely useful for the business users. There's case studies of companies who had to restructure their company and consequently their web app, but thanks to having BDD the business users where able to easily sort things around on the site to keep the company afloat. That's why having human readable BDD is so important. 
1.Zend Framework (The Most Powerfull/Complex PHP Framework) 2.Phalcon (The fastest PHP framework) 3.Laravel (The most used PHP Framework) 
Well, it depends. What kind of site do you want to build and what features are you looking for? 
I wrote a blog a while back on how to use the service locator to handle dependencies. Check it out: http://www.booj.com/blog/handling-dependencies-in-zend-framework-2
Laravel is my favorite PHP framework. As a newcomer to MVC and web development, it really drilled down the MVC best practices and structures. Not to mention the community and tutorials available are amazing.
It depends, do you want a stable framework or one that changes a lot yet offers bleeding edge best practices and features? 
Absolutely. What he provides is a great intro to the Framework. I plan on buying the book too to get all of his updates.
Depending on what method something() does its either a proxy or an adapter. Right now it looks like an Adapter, but might turn out to be a proxy.
#[**Façade pattern**](https://en.wikipedia.org/wiki/Facade_pattern): [](#sfw) --- &gt;The **facade pattern** (or façade pattern) is a software design pattern commonly used with object-oriented programming. The name is by analogy to an architectural facade. &gt; &gt; The Facade design pattern is often used when a system is very complex or difficult to understand because the system has a large number of interdependent classes or its source code is unavailable. This pattern hides the complexities of the larger system and provides a simpler interface to the client. It typically involves a single wrapper class which contains a set of members required by client. These members access the system on behalf of the facade client and hide the implementation details. --- ====
As a writer of a book on Laravel (Implementing Laravel), I would *still* definitely recommend Dayle's book to get started.
L3 was a bit messy at some points, L4 was a huge improvement and is already very usable. In other words, why wait for L5? It's not even certain at this point if the next release will actually be Laravel 5 or 4.3.
nginx isn't my thing, but IIRC isn't there a thing you have to toggle in order to have it pass on specific HTTP headers to fastcgi handlers?
...quad..."Drupal"... 
Which rubric did you use to determine 1 &amp; 3? 
Phalcon 2.0 is being rewritten in Zephir. It removes most of the boilerplate and I think that in perhaps 3 years it could be made to target HHVM as well. This is not a goal of [Zephir](http://zephir-lang.com/) but I think that it will end up being one of its main selling points. Also the next version of PHP will be pretty speedy compared to 5.6 and will close the gap considerably.
This. The configuration can be a bit overwhelming at times, but as the project grows, it just makes things a lot easier.
The CI default behaviour of routing class/method to class::method makes it too easy to never properly structure your routing, leading to a badtime down the road. + lack of named routes, lack of http verb enforcement etc etc. It really shows its age compared to Symfony.
Yes. Laravel or Symfony2 :P Either one is fine for a solo programmer. You'll find Laravel extremely easy to learn and use (I've been using it for 6 months and rarely, if ever, need to refer to the documentation now), and once you feel like you've saturated your knowledge OR you run into a scenario that makes you feel like Laravel is making difficult for you, then you can learn Symfony. It's good to have more than one tool in your belt, but Laravel is by far easier and faster to ramp up on, and despite what others claim, it's perfectly fine to build very large, well-architected, complex applications. Maybe Symfony is easier when you get to a certain complexity level, but Laravel doesn't make anything so hard that it's impractical to do. The only knock against Laravel as a choice for enterprise-class applications is that it doesn't have any long-term support for previous major and semi-major verisons, and as of right now it doesn't follow semantic versioning (though it will starting with Laravel 5 in November). This means that if a patch comes out, even a minor version, it could break some backwards compatibility. Bear in mind that if you do go down the Symfony road, you're going to be dealing with bizarre code like this: http://symfony.com/doc/current/components/config/definition.html#array-nodes
What do you mean by rubric? Search the net and see yourself 
Already fixed it in some routing extensions. But yes, vanilla routing it's not very modern.
That's not really true, when you add a new library or extension you are upgrading it, not hacking half codeigniter, and usually you only have to make little changes, if any, in the original code. About big project sizes, in fact I have my doubts about Laravel (one of the reasons that I haven't still checked it), I have seen benchmarks of a lot of php frameworks and always ended as a slow framework.
yeah, that's totally what I think about it.
I would actually say Silex is harder for beginners because it doesn't encourage structure. You can build a single file website with silex (while theres not always a problem with that, it might not be best for learning)
Yeah, i'm not so sure on 1 &amp; 3... Symfony is just as powerful and complex as Zend Framework. And Laravel, while probably the most hyped at the moment, i dont think is the most used. Considering most of the upvotes here aren't going to laravel, but to Symfony/Silex, i'd say not.
i'd be careful learning best practices from Laravel.
It Still doesn't follow semver.
I have yet to get bloody fingers. And i have Had 0 issues upgrading symfony.... Taking just as long. 
Another Yii user checking in. I love it and would highly recommend giving it a try. Yii2 is simply fantastic. 
IN particular, check out https://laracasts.com/how-do-i as it's what I used when I first learned Laravel. It's also useful if you are extremely rusty and lacking the latest info on proper PHP development (i.e. using Composer and namespacing).
Try Slim, Fat Free. Fat Free is consistent and covers all the Web development needs (ORM, cache, routing, template...) in incredibly low lines of codes. And it is among the fastest. Slim is elegant, but need the addition of a few composer modules to be as good as fatFree. Mainstream: Laravel. Slow. The V3 was 10x faster that v4! Symfony, Silex: Run! Bloatware! 
The negative remarks against Codeigniter are a real shame. It was perfect in its day and its lagging behind the other PHP frameworks now and its best for a developer to move on, but that doesn't mean it needs to be kicked every time it comes up. We have mobile phones now too, but we don't go around crapping all over old cable phones. 
Maybe not best practices, but it has helped me to understand how the components of an MVC framework fit together.
I never talk from my opinion and this is proved by a poll you can see here http://www.sitepoint.com/best-php-frameworks-2014/ and for symfony i'll say looool :D may be can do most ZF can do but not complex and power as ZF ;)
I'm happy enough letting it be an magic box for most cases. The source code is ridiculously readable though so it's not too difficult to understand some things.
:) good
Again, Laravel is the most talked about, because the people using it are the most vocal. Members of the Symfony/Zend/Yii/Ci/Cake/Whatever communities arent as vocal as the Laravel community. Polls like that are heavily skewed. And as someone who has used both ZF1 and ZF2, and also symfony **extensively**, It is just as complex and powerful. You will not find something that zend can do, that symfony cannot.
Yah, the language used in Behat is Gherkin, it is either the same or based on Cucumber
How about using Behat with services such as Codeship ?
Ok, I updated my php and form, so hopefully it works. If not, still looking for feedback haha. https://stackoverflow.com/questions/26007289/hubspot-form-api-validation-file-upload
I am amuse about expecting the word "Laravel" poping up like a thousand times. I guess that this community give you some surprises sometimes.
Is Laravel 5.
Seconded. Once you wrap your mind around service containers and dependency injection it gets a lot easier all of a sudden. Haven't done any *really* big projects in it so I can't speak to how it all scales up with application complexity, but what I've experienced so far has been overwhelmingly positive.
/r/php doesn't like that type of humor
taylorbot?
Symfony2
Why downvote this? It *does* demonstrate DI and inheritance.
How do you handle DI for controllers, without bolting something like Symfony HTTP Kernel over the top? Some other exciting things about CI: - Globals, globals everywhere - Passing by reference all the time, in order to make those globals work - Stable releases with incorrect phpdocblocks to confuse your IDE (@return void even if it's gonna give you some data!) - DAL is also a big global! Why would you ever want to make more than one independent request in an application cycle? Welcome to cascading failures! - Tests? Lol what are tests. - Built in form validation / data formatting library directly manipulates $_POST.... by reference. Yes you can bolt a load of stuff to it for routing and database access, yes you can start using an autoloader for a lot of bits to get around the way the codeigniter loader works... maybe you can strap a DI container to your libraries and models... At the end of the day you've basically built your own framework. You say you're worried about Laravel fanboys, but really I think there's no reason other than brand loyalty to start a new project in CI. You're right, codeigniter out the box relatively fast, but by the time you've switched to using a different router, an ORM etc etc it'll be slowing down toward the speeds of the bigger frameworks, and unless you're very worried about marginal speed gains, well...
Symfony 1.4, use it daily on the only site I work on, and I love it.
hey can you give a quick summary of why to choose zf2? I used zf1 to create a large application and it was painful. So I switched to yii for the next version of it. Anyways. Please?
Really depends, but generally, i'd say false. Theres a lot of factors that go into the speed of the app. There was a post a couple weeks ago about a fast symfony2 app. I dont remember what it was, but it made the symfony blog.
wat. Why would you suggest a framework that has been End of Lifed.
https://github.com/reddit/ This should help you out :)
You seem to have confused "tenants" with "tenets".
Fat-Free also provides ORM, which is cool. One of my favorites due to it's lightweight nature. 
The most efficient way is to cache the result of pulling a comment tree from storage so it's not done as often regardless of how you actually do it. Specifically for the type of comments you're suggesting, you'll essentially be creating a huge [tree](http://en.wikipedia.org/wiki/Tree_%28data_structure%29) hierarchy with the post as the root node and each comment as a child node of its parent. Since reddit includes links to the parent, it's likely the tree is going to be similar in structure to a [doubly-linked list](http://en.wikipedia.org/wiki/Doubly_linked_list) where the child can point to its parent. A list can be thought of a tree with at most 1 child node whereas a comment tree like I'm describing would be a tree with any number of child nodes. The storage could simply be of the form where each node has an id and a parent so generating the entire tree would be inefficient using a straight forward approach which is why caching is so important. You begin with the root node, then search the comments for the ones that have the node as its parent. After you have the first level of comments, you recursively search the comments for the ones with each comment as their parent. This recursion is potentially a huge problem if the comments explode and reddit addresses this by limiting the depth of the comments to search through in addition to limiting how many comments to include in the tree. Once you have constructed the comment tree, you traverse the tree in your desired manner and render each comment node. Nested comments like this are far more difficult to manage than a simple linear forum where you search by forum post id and sort either by id or date.
As someone who first broke into frameworks with Silex before moving to Symfony, I can't second this strongly enough. Silex's documentation is so severely lacking unless you're experienced enough to fill the gaps yourself
Slow compared to what ? For what kind of site or app ? On what kind of hardware and architecture ? It's true that it's usually at the bottom of benchmarks but you have many caching and optimizing strategies available. Do you consider http://www.latribune.fr slow ? It's a Symfony2 app on not that much hardware, but with tons on caching.
CI3 will not be different. You can view it right now on GitHub. Whatever the new owners of CI to do with it from here on out, we'll see. My guess is they won't do anything that the community wishes would happen, because EllisLab will have passed it on to someone who "shared the same vision" or whatever.
thats true I guess , thnx
Since we don't have a comprehensive caching framework to efficiently manage these comment tree lookups as mecromace suggests, we've dealt with this by using a little bit of database denormalization. In our schema, we have separate tables for Posts and Comments. Comments have a foreign key to their immediate parent, which could either be a Post or another Comment. So, when trying to construct the comment tree, we were faced with having to do O(log(n)) database calls. Since that would have been insanity, we added a foreign key to every comment to point back to the root of the tree, the Post. When displaying a Post and its Comment tree, we simply do a select query on Comment where root_id = Post.id. We then reconstruct the comment tree in memory. Limits us to only two database calls (one for the Post and one for the Comments) for any comment tree of arbitrary size. But this really only works if you'll only be displaying comment trees that have an anchored root node.
make the comment table with 3 fields (user-id,comment,post_id,parent_id) now if the comment has no parent comment then make the parent_id value equals 0 :) however , when you pull the data that gonna hurt ouch! so either make a recursive functions or dig deep into mysql (its possible) but either way you have to cache the results for better performance and that's a must 
It's a depth-first vs breadth-first approach in what you want to do. I just took a glance at a couple threads and it appears their algorithm does something like this: * Grab all top-level comments sorted, but the comments aren't the full comments instead are meta information like just the ids sans content * Take the top comment and grab its content * Check to see if nested depth exceeds the limit (looks like reddit's default depth is 6) * If depth hasn't been exceeded, treat current comment like the root and search according to the first step above otherwise include "load more comments" link * If maximum number of comments has been reached, stop and include "load more comments" with a count of comments left to be processed * If child comments don't exist or have been processed, then proceed to the next comment in your progression and repeat So basically, it's a check against two items. The first is a depth check to prevent insane depth with the comment children and the other is a total count check to limit the entire list. When recursively working with tree nodes like this, it's common to pass through values telling each node information it needs like its depth in this case.
I just want to thank everybody. Some fantastic comments in this thread
Honestly I wish that I could. It's a project that's been going for the better part of a decade and there's so many things going on in it this seemed like my best option. I wonder if there is any software that can easily dump something very large
That's bullshit. Symphony is far from the only corporate framework. Your statement is pure ignorance. Please back that crap up with facts.
Must we?
How I solved this in high school: Store not only the parent_id, but the whole path from root to every node in the database as a string. Now you can get your stuff out with just 1 query :) I tend to like simple solutions...
Laravel
Not an adapter as the "something" class implements the SAME interface as the classes it calls. it does not ADAPT from one interface to another
I hate old cable phones. 
Watch your language kiddo
Codeception 
Can we please stop using "complex" and "powerful" like they're synonyms? 
A PDF about Wordpress? Well I'm excited!
That is just an example they give.
&gt; It's also currently the framework of choice if you're looking for a job. Laravel indeed.com search: 372 jobs Symfony indeed.com search: 460 jobs Symfony has been around longer, so it's not a 1:1 comparison. I'd say both of the most talked about frameworks these days have plenty of jobs (and growing). I say use what you can get sh*t done with! 
Well, not all sites are filled with static-heavy content as news sites where they can rely on heavy caching.
i actually don't think they are being used as synonyms in this case. I know the definition of the two words, and i would say symfony and zend are both complex, and both very powerful.
Because it still works amazingly well
Look into Nested Sets or Closure Tables. Those are the best rwo methods of implementing infinitely nested structure. The parent_id solution has a LOT of drawbacks which will become clear after reading on those two topics.
That entire github thread is the quintessence of why PHP is almost universally ridiculed.
it may work well, but it wouldnt be a good framework to pick up and learn, if you dont already know it
Didn't even notice that. It probably doesn't matter. When i was dealing with this problem i rewrote that function completely, but i can't remeber if i did it because of a bug or just because it didn't suit my needs. The main point is that it will build an entire tree with a simple foreach loop, and therefore won't be computationally expensive.
Why do you say that? Its patterns and principles are sound for the most part. Sure, they got a few things wonky (forms hello), but shit works and I get things done. Thats all you can ask from a framework.
Not really about Laravel, is it?
Because it will never receive any updates, or support, and the logic is old, founded on logic that isn't up to spec (specifically PSR). Which would you rather buy, a brand new car, or that same car, from 5 years ago? You are basically suggesting that someone should use windows 95, because hey, it works, right?
Using Slim now for a project. I'm in control and I know what's going on, and the code is fast. Combined with the Twig templating system, I believe I'll be doing all right.
&lt;.&lt; this is going no where. You are delusional. Not to mention you ignored the rest of my retort.
I wouldnt say its a framework that prides itself on best practices, but more getting shit done quick. 
the "leader" of the community, isn't religious about semver, naming patterns properly, and the framework is overzealous when it comes to magic... This is just a little bit.
you may be right about semver, although he has considered it. the facade issue (singular) is overblown. it's a framework feature, not a pattern. as far as magic, I'm not really sure how valid that is. the DI container does a lot behind the scenes, but it's all well documented. facades are optional and even discouraged outside of controllers. maybe there are other things considered too magic but I'm not sure what.
This looks great! I've been thinking a lot lately about how wonderful the Go(lang) style of concurrent programming is and how similar PHP's generators could potentially work using the value yielding and sending like channels, but I haven't had time to play with the idea. I can't wait to mess around with this. I know a lot of people saw generators as simply syntactic sugar for iterators when they debuted, due to the style in which most of us write PHP applications. It could take some serious work to get a decent amount of people use to this style of development, but its potential for efficiently handling certain tasks (concurrent async queued workers, micro services, etc) is huge. Let's hope it catches on. Good luck to you! Thanks again for sharing!
nginx +php-npm not affected. I tested with system("env") and php-fpm do not pass anything that is user input.
On the topic of adoption, one of the major drawbacks of such a system is that to see widespread use there really needs to be a good set of asynchronous libraries for all the things we already do so frequently in the PHP world (pdo, redis, etc), and furthermore those libraries need to be built on the same event loop in order to be interoperable. I'm hoping that by basing the kernel on React and trying to make the use of React's promise-based code feel very native inside Recoil that some of the issues are are mitigated to some degree. There is a growing group of people doing some cool stuff with React. Thanks for your interest :)
My point is, it works, as does my car. Its also probably faster than yours. In any case, I didnt suggest he should use it on a new commercial project. He asked for a new framework to try, and I gave him one. Whats your beef, anyway?
[snip] something close was already suggested
&gt; My point is, it works, as does my car. Its also probably faster than yours. Faster? You can't make that assumption without knowing what im working on, and how i'm doing it. Just like my car. You can't know how fast it is without knowing whats in it. And don't bring speed benchmarks into this, cause those are bullshit. Because you shouldnt be suggesting a dead framework as something for someone to try.
Why would you crosspost from /r/PHPhelp? If you asked your question there, that means that you know that… &gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help
&gt; switching context between programming languages slows you down being comfortable with multiple languages/paradigms makes you a better programmer. use the right tool for the job. &gt;Like I said, Behat generates a scaffold for your tests from your specs. Ah, so "I verb noun" is just arbitrary? That makes more sense.
The application is basically adding a bunch of different exercises for others to solve.
It is. My personal benchmarks (on a real machine, no VM) gives: * Fat free: 233 requests/seconds * and Slim: 152 r/s * Laravel 4: 22 requests/seconds * Symfony: 5 /r/S Best version of Laravel was the version 3. It has the same structure, with far less bloatware( L4 uses Symfony components), then its raw performance for same test is : 146 r/s before you ask: (PHP 5.3 &amp; APC activated. Results are identical with PHP 5.4) 
Silex is intellectual sham. It is not a microframework (it is as big as Laravel), as it is bloated, no good doc, it is slow, you should rather directly work with Symfony if you want to go in that direction. If you're looking for a microframework--&gt;Slim or FatFree
Ahhh Reddit/r/php! I always find a solution to something I am working on. (the other day was sentiment analysis). Today, this. Keep it coming team.
This illustrates both the Composite pattern (a.k.a. composition) and the Dependency injection pattern. If the SomethingInterface object was not required and could be set later with a setter (or had a default) then this would not represent the DI pattern, but still represent the Composite one. This is different than the Strategy pattern in that it is only related in selecting the algorithm and/or the driver. And the Composite pattern is about composing objects and which "executors" to use for a downstream action. It is a good patten to achieve decoupling. Instead of one class to always call a certain class it could accept a replacement object with an interface. And this way it achieves decoupling.
There's a couple of ways to do this - it's called Nested Sets. The first is to store the parent id on each comment. You should do this anyway, but trying to query on it gets really complex and can be slow. One way is to store the path to the node (a few people have suggested this). This is really easy to store, update and make exact lookups. There's a more advanced method. This is a PHP library I used to do something similar in a Laravel application (nested categories): [etrepat/baum](https://github.com/etrepat/baum). Read through the tl;dr. The benefits are that read queries are very fast, but inserting records is quite costly as you have to recalculate a lot of records (basically everything right of your new row). I would avoid the latter method - while "the right way" to do it, it's too costly to add new child rows. I'd probably go with the second method with some database tuning - if you use a database that supports field arrays, i.e. [postgres](http://www.postgresql.org/docs/9.1/static/arrays.html), you can also do partial matches while avoiding slow `like` queries: `select where ANY(path) = :parent_id`. (basically `in_array($parentId, $path)` at the db)
Serious question: Why where you trying to avoid NodeJS?
I've been investigating ways to achieve what I want in PHP because the team I'm working with are PHP devs with limited/no Node experience. I've no problem using it if there's too much hackery involved making PHP do what I want! It is definitely the better suited tool for the job. M
Fantastic work mate. Very exciting!
Don't have NodeJS on hosting... PHP is everywhere.
We use nginx + php-fpm at work and several public-facing machines have been affected. Nothing malicious, but we got exceptions from erratasec's scan of the internet. Here are the relevant headers from the requests: HTTP_HOST () { HTTP_ACCEPT */* HTTP_COOKIE () { :; }; ping -c 17 209.126.230.74 HTTP_REFERER () { :; }; ping -c 11 209.126.230.74 HTTP_USER_AGENT shellshock-scan (http://blog.erratasec.com/2014/09/bash-shellshock-scan-of-internet.html) The actual PHP exception is `UnexpectedValueException: Invalid Host "() {"`. All major server distros (RHEL, CentOS, Debian etc.) have already released fixed versions of Bash, so everyone should update as soon as possible.
Yep. As I said, &gt; intellectual sham It is an attempt to tackle the rise of microframeworks (like slim) that do basically as good as the mainstream fw without the bloat. 
This is similar to something I did a year-or-so ago (https://bitbucket.org/mkjpryor/async/wiki/Home), but more robust and with more features. I will certainly be taking a good look! Nice work!
Needing a semi-ELI5...am I understanding correctly that your library allows for asynchronous web applications with persistent resource allocation (local variables, objects, etc.)? If that's accurate, follow up question: When do the persistent resources get deallocated? (or is that "up to me" in how the application is written / how the recoil library is used) Edit: is this comparable to websockets? (I haven't ever used websockets but have read about it vs AJAX, which I am experienced in)
This is a great way to do async programming. I've used it before with [node-fibers](https://github.com/laverdet/node-fibers/). I'm not sure if strands is accepted nomenclature, looks like they're the same as fibers (except you can't implicitely call one). Is that right? Anyway, awesome work!
Actually the current patch is incomplete: http://www.openwall.com/lists/oss-security/2014/09/24/32 Some further discussion here http://www.reddit.com/r/netsec/comments/2hehgk/cve20147169_bash_fix_incomplete_still_exploitable/
Wouldn't It be better to just keep Symfony questions within the main programming stackoverflow to prevent dilution? There's lots of components shared or used be other frameworks or packages. I think it might actually make it harder for users to find questions and answers and dilute the quality overall to separate it. 
if nosql is an option, you can use nested documents (ie mongodb).
As far as I can tell, this is the first library other than Google (Java/C++) to make use of this data.
Regular expressions are not the best solution to parse HTML files. One of the best options is using [phpQuery](https://code.google.com/p/phpquery/), this way you can traverse the DOM the say way you do with jQuery.
Somewhat related is [Google's libphonenumber](https://code.google.com/p/libphonenumber/) - there's a [port for PHP](https://github.com/giggsey/libphonenumber-for-php)
but you're touching on functional testing? that has no language
Couldn't you just create a query to not return CommentText? And another one that does return only the CommentText? 
ZF1 is antiquate technology that uses ideas that date back to 2006. Times have changed and developer needs as well: please do not use ZF1 anymore, period. ZF2 is very flexible MVC-ish architecture (-ish because you can't do MVC over HTTP, and anyone who tells you the opposite is a liar), which means that you can take the "MVC" component and transform it into whatever fits your needs quite easily, as it's just event binding. You can do things such as completely replacing controllers with a command bus, or replacing the view layer with a serializer, or adding your own security layer in few LOC, like in following simplified example: $app-&gt;getEventManager()-&gt;attach( \Zend\Mvc\MvcEvent::EVENT_DISPATCH, function (\Zend\Mvc\MvcEvent $e) { $routeMatch = $e-&gt;getRouteMatch() if ($routeMatch &amp;&amp; $routeMatch-&gt;getMatchedRouteName() === 'the-thing') { throw new \CantTouchThisException('The thing is mine.'); } }, 1000 // high priority ); Compared to frameworks like Laravel and Symfony, you have more manual wiring to do, but then your components (your own business logic) will end up being more decoupled from the framework, because the framework itself will just be used to compose them via DI and event binding. Many see "more wiring" as "more work", but I constantly find myself trapped in client projects where people simply coupled everything to the Framework because of laziness, and then pay the toll later, when maintaining/upgrading their software. Also note that ZF2 is not a framework for everyone, and I as well would go with something like Silex if asked for building the typical "landing page" website with a couple of forms. ZF2 really shines when you start stacking up layers of business logic when building something more complex, like a specific CRM, a scheduling system, a reporting app and so on: these are cases where you hit the limits of what the customer wants and what the Framework allows you to do, and from my experience we don't really have those limits in ZF2, mainly because there is no strict way of doing things (except, hopefully, following decent design approaches :P ). I also note that regardless of your choice of framework, the main relevant point is that it's 2014, and you should NEVER let your core domain mix up with FW components: many libraries still suggest that, and if they do, then you simply shouldn't use them. All that said, for my apps I currently only use ZF2, SF2 and Silex, depending on the customers' needs: - ZF2 for very large applications with complex domain rulesets, and very extensive specifications - SF2 for mid-range applications, typically when a large developer team is involved, and that because the FW is less flexible (it's a feature, in this case), and there are some "accepted" "standard" ways of doing things that you can enforce - Silex for "landing page" websites, though I really prefer going plain-HTML on those, if possible. I can't tell you "use ZF2" or "don't use ZF2", as I'm obviously biased, but I hope this covers the use-cases. Hope this helps, though.
I thought some part of this article were pretty good, and learned a few things. But please, *please*, don't do this: if($string) statement; 
Agreed. Heck, PHP doesn't even have its own SE. There's no reason for Symfony to.
Yet another reason not to use PHP in CGI mode.
Great timing! I was looking for something similar yesterday
So would it be prudent to prefix every `true` and `false` with `\`? Might be a micro-optimization, but I have a few paths in my source that benefit from micro-optimizations ;)
Finally! Just what i needed.
Check out this newly released book: http://www.masterzendframework.com/
No, writing BDD for non-business reasons is a huge waste of time because the return is so low. I say a talk where the guy talked about using BDD to test CSS, which imo is very horrible. It's important to realize that BDD, during development, is all about having conversations. When you tell a client you're writing acceptance tests, they think you're testing it for them and that you know what you are developing. **BDD is more about having conversations that check everyone's assumptions about the feature, which is way more important than any tool that BDD uses.** This is why we don't call BDD acceptance testing anymore. Also the designer wouldn't have input on the business decision like with gold users or whatnot. It's generally the client laying the business goal, and in this example it's about showing subscribers get different content based on their subscription level, which is a business decision not a design decision. 
Is this serious?
How are the local and production folders different? Different puphpet or Vagrantfiles?
This would integrate into a ton of projects and will really impress the users if it was made to autofill a bunch of fields when the bare minimum of data is supplied. Do it though ajax and it would look great.
Why wouldn't it be? 
Best answer. Write complexity will go up, but in a forum you'll always have far more reads than writes. You can start to scale this by using a write only master that replicates to a read only slave.
That's correct, in theory it should be possible to combine them and control both hosts through one Vagrantfile, but I'm using Pupphpet, so found it was easier to just separate the two for now 
OpenResty does somewhat similar to this with Lua using Nginx event-loop (https://github.com/openresty/lua-nginx-module/#description &amp; https://github.com/openresty/lua-nginx-module/wiki/Introduction)
I'm not sure that that's a good thing. :) It seems that BDD or feature-file development is more like writing software tests for non-coders -- which is just annoying. 
&gt; There is a new in-depth tutorial that I still need to review/merge [...] At the risk of sounding entitled, please get this in. ZF's documentation has historically been *atrocious*. The user guide *is* good for getting started but is little help beyond that, and the official API documentation (in addition to being a study in lousy usability) has been useless whenever I've actually needed it -- typically when something takes an associative array as an argument. Documentation should be a much higher priority for ZF3 than it has been in the past. I look forward to getting through these resources.
If I see empty I actually have no idea what it tests for. Does it test for false or null or empty array or whatever. Just use === and pretend type juggling doesn't exist
Bash's problem is this: If an environment variable contains a specially crafted value, bash will execute it. If you're calling shell scripts from PHP and passing user data through environment variables, you're probably vulnerable.
It's only 19 lines so we should rewrite it every project?
If it were really 0.1, it only takes 10000 iterations in a loop for it to be an extra second! That huge! Also, I like being explicit. if `true` means something else depending on context, that's worrying at least :)
If the controller is doing much more than passing data to models, then getting back data and passing data to a view, it is probably doing too much. This includes validation. So, what you want is to validate in "the model *layer*" -- although not necessarily in "the model *class*". Your controller can use a Service Layer object to receive the data. The Service Layer validates it though a filtering mechanism, and then either invokes the underlying domain model logic, or passes a result back to the controller indicating validation failed. The dumbed-down controller can then pass the result to the view. I opine that the filtering mechanism should not be embedded in the individual model entities, but should be a class of its own that receives the data or entity and then operates on it. That keeps the entities clean, and allows you to build up a series of filters/validators for different use cases involving different entities. Hope that all made sense. (p.s. I will also plug http://pmjones.github.io/adr as a way of thinking about the problem -- validation is clearly not part of the Responder layer, and it's not part of the Action layer, so it must be part of the Domain.)
 namespace foo { use const true as false; var_dump(false); }
&gt; ZF2 is very flexible MVC-ish architecture (-ish because you can't do MVC over HTTP, and anyone who tells you the opposite is a liar) Let us not attribute to malice what is explained by ignorance. ;-) /me plugs http://pmjones.github.io/adr as a follwup 
&gt; If it were really 0.1 I said **less than 0.1ms** :)
It gets worse with capitalization: &lt;?php namespace foo; define('TRUE', \false); define('FALSE', \true); var_dump(true, TRUE); // bool(true), bool(false) var_dump(false, FALSE); // bool(false), bool(true) [**DEMO**](https://eval.in/198624)
How hard is it to upgrade a project when new versions of Laravel come out?
There's an infinite amount of numbers that are less than 0.1ms. You could have said any number higher than 0.1ms and that statement would still technically be true. By stating "less than 0.1ms" you do give a sort of indicator around which number you think it is. Or at least the order of magnitude. Even if it were half of 0.1ms, it would still be pretty large. But if you say less than 0.1ms, I don't immediately assume that your actual guess is 0.001% of that number ;) I'm just saying, 0.1ms would still be pretty huge :P and even half that would still be worth optimizing. **edit** sorry for the pointless argument :S
One option would be to enforce validation through the use of Value Objects. Instead of requiring scalar values for Email and Phone, use an Email class that will automatically throw an exception if it's constructed with an invalid address. For example: class Email { public function __construct($value) { if(!filter_var($value, FILTER_VALIDATE_EMAIL)) { throw new DomainException("[$value] is not a valid email address."); } $this-&gt;value = $value; } public function __toString() { return (string) $this-&gt;value; } } And in your controller/service/whathaveyou: $user = new User( $name, new Email($fields['email']), new PhoneNumber($fields['phone']) ); I left `$name` as a scalar because the only requirement is that it's not blank, which is trivial enough to check in a setter. Of course, as stated elsewhere, you'll probably still want some kind of validation for the form itself, which would provide better feedback to the user (ie, all the errors at once instead of just the latest error).
&gt; Does it test for false or null or empty array or whatever yes
Your approach makes it almost impossible to report multiple errors on the form like you were advocating. Consider what happens if a user inputs a syntactically invalid email and ditto for phone number. First exception wins. Also, validation is much more complex than "is this a syntactically viable email address?" You may need to reject email addresses that already exist in your database (e.g. user registration), or you may need to reject addresses pointing to certain domains, or ones that don't have MX records, etc. These are things you absolutely don't want to be offloading to value objects.
"Do both!" Totally, but do both *in the model (domain) layer*, not in the controller. And thanks for the Aura plug. :-)
I would imagine skimming the source code itself would be quite beneficial, too.
We tend to package up our little usual functions at work in this way, composer is awesome :)
&gt; though I hope it helps at least one sysadmin not shit his pants in fear unnecessarily. :) Sysadmins don't shit their pants enough. :)
+1 for Closure tables. Does not suffer the same type of write complexity as Nested Sets, does not have to redistribute the entire tree on every write / insert, but uses a crap tonne of rows.
Very clever. Even if it's only a few lines of code, I can think of many uses for this. Bonus points for unit tests. Nowadays, I rarely use any libraries that lack tests.
~~php is weird.~~ Programming is weird.
 beginning: try { return $fn(); } catch (\Exception $e) { if (!$retries) { throw new FailingTooHardException('', 0, $e); } $retries--; goto beginning; } &gt; **goto beginning** [Obligatory](https://xkcd.com/292/)
Curious: how would you construct the second, query, as in how do you limit the results to those you already know you want from the first query? The simplest solution I can think of is a WHERE..IN, but that query can get big and ugly
This is something Luis Cordova has blogged about as well: &lt;http://www.craftitonline.com/2014/09/look-mama-no-console-coupling-bye-symfony-welcome-aura-cli/&gt; In the article he talks about how to decouple the Commands from the Console. He uses [Aura v2 packages](http://auraphp.com/packages/v2) to do so but the concepts translate across to any library-oriented set of packages.
It's probably close to 0.0000000000000000001 per iteration. I can do a benchmark but I see not reason to waste time on such a thing. Just find something else to optimize. 
I went back and reviewed the presentation: I spend just about 2 1/2 minutes on the "read these books" slide (from 0:07 to 2:44) and then about 3 1/4 minutes on "these are some of the things I've done during my 15 years in the PHP community" (from 2:45 to 6:03). Maybe it felt like longer to some folks.
Ah, i meant to reply to the guy above you. 
Does this mean that my compulsive use of all capped booleans is technically inefficient?
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to [##php on Freenode IRC](http://webchat.freenode.net/?channels=%23php).
Hi there. Sorry just seen this as I hadn't looked at the messages. I had continued posting as hadn't seen it and just posted another. I had received positive messages from people on here who enjoy it so thought it had been fine. To be honest we run it at a loss and we have 11.5k people subscribing now so its a shame that I can't tell people about it. Thanks anyway
&gt; Your approach makes it almost impossible to report multiple errors on the form like you were advocating. Consider what happens if a user inputs a syntactically invalid email and ditto for phone number. First exception wins. I may not have been entirely clear in my first post, but the idea is that you'd validate the form separately. &gt; Also, validation is much more complex than "is this a syntactically viable email address?" Based on /u/Jemaclus's wording, "all fields are required and email addresses and phone numbers must be valid", I didn't think he was referring to business rules. My first thought is validating data the model has direct knowledge of. Things like whether an email address is unique belongs to an external service like a [Specification](http://en.wikipedia.org/wiki/Specification_pattern).
It's a similar idea, and shows that there is something wrong with the Symfony/Console library if people are having to re-write bits of it to be able to use it with their own application 'Runner'/'Executable'/'Dispatch' class. However, I am obligated to say that I prefer my own fork, as it's completely re-usable with whichever 'Runner' you use. Also the Aura/DI stuff keeps doing ServiceLocator-ish things which I prefer to avoid doing. e.g. in your link the Config for the application needs to be aware of Aura\DI, whereas in Danack/Console, the commands are completely unaware of what you are using for dependency injection. 
Relevant username. :&gt;
I don't think it's weird. It's case sensitivity working as intended. 
Believe what you will, oh cynical Mr. OliverSvanick. The timeline was this: 1. I thought I had solved the problem, and posted a blog. 2. I learned I hadn't, then searched the internets. Not finding any solution, I posted here. 3. Not getting a response, I googled again, found the solution, updated the blog, and posted to the thread. How will I ever convince you of my genuineness, of my purity of intent! I hope simple truth-telling will suffice.
&gt; I am obligated to say that I prefer my own fork Perfectly natural. &gt; the Aura/DI stuff keeps doing ServiceLocator-ish things Those are fighting words, sir, and I demand satisfaction! &gt; the Config for the application needs to be aware of Aura\DI In fairness, that's the Config for building the Container itself, not for building the application per se; cf. [the docs about the ContainerBuilder](https://github.com/auraphp/Aura.Di#container-builder-and-config-classes). Note that the actual application elements are themselves unaware of any Container being used. So, no Service Locator elements, "-ish" or otherwise.
Navicat?
Igor - This, along with your `goto` thread make me question your sanity. Why, Igor, why?
And? 
Yeah true, putting it in another table is just what I'd do, it doesn't need to be.
&gt; The closures thing is a bit of strawman, because you shouldn't be using the closures for anything other than a hello world. Not any more so than your argument.
Bro, don't take this the wrong way, but we don't need another micro framework. I really wished that everyone who spent time making one of these put their time to developing solid, reusable packages instead. To me this is really what PHP needs. &gt; Horus is just 1.8k of lines in one file, organized and well commented, But Horus Light version is just 36 kb, just include Horus.php or Horus.light.php and start writing codes . File size matters for front-end assets like JavaScript and CSS. It doesn't make ANY difference in PHP since the files reside server side.
Oh I definitely agree. And I understand where EllisLab comes from in the way they want to maintain the framework. I don't agree with it (most people don't), but it's their choice. And it's not necessarily a bad one.
Another way to think about it is a simple front controller sending data to a logic controller. The logic controller is where any logic that's context-sensitive sits or requiring information from several models. 
I want to drive. My neighbor's car is working. My car is not working. Why?
I'm sure I lifted some stuff from your library too ;) /u/igorw pointed me there during a discussion at some point.
This. We need to take the best features of the main frameworks, like Zend, Symphony, Laravel and Phalcon (for it's speed - I know it's not the most popular), and bring them together. Making a micro framework like this can be a great learning exercise, but for me that's where it should stay. Now I'm not saying what you've done isn't good, but even of its amazing (it's 1am so I haven't looked at your code, sorry) you're proving the point - put that amazing code into a pull request for a big framework and make what's already good, better. Little frameworks have a habit of burning out very quickly, leaving anyone who adopted it high and dry, with no support or future updates. Adding in what you consider to be new and innovative functionality to an existing and well-established framework helps to keep it alive and fresh. I say all this because sure, I might have a play with your framework. Might even use it for a small project. But for anything bigger or of importance, I'm gonna stick with what I know works, what's well tested, well used, well documented and most importantly - most future proof. Also, 1,000 frameworks all competing dilutes developer talent on each framework. 100 frameworks yields potentially 10x more activity and expertise in developing said framework. 
IIS?
So which files did you have to change that couldn't be substituted?
This is a tough question to answer well because many of the things you mention might very well be used along with Recoil, but are not directly related. I'll do my best :) The idea of persistent resource allocation, while not the goal of Recoil, should indeed be possible. You could associate a [strand](https://github.com/recoilphp/recoil#strands) with each user/session and resume it on each request, though this is probably not a good use of resources. It's also worth stating that such an application would be possible with any asynchronous framework that allowed you to keep a process running persistently. It's also not directly related to websockets, though again PHP can serve websocket requests asynchronously with or without Recoil (see [Ratchet](http://socketo.me/), an awesome websocket server implementation also based on React). **The cold truth is, Recoil doesn't allow you to do anything you can't already do.** What it *does* do is change the way you write asynchronous code such that it more closely resembles the synchronous code we're all used to - you call a function and a value is returned (or an exception is thrown), simple as that. There is some example code in the repository that shows how a problem might be solved with "vanilla" React vs with Recoil: Concurrent DNS resolution: - [with React promises](https://github.com/recoilphp/recoil/blob/develop/examples/promise-dns-react) - [with Recoil co-routines](https://github.com/recoilphp/recoil/blob/develop/examples/promise-dns) These aren't the simplest examples to follow if you're not already familiar with asynchronous programming in PHP using [promises](https://github.com/reactphp/promise). What should be noticeable is that, other than the presence of the `yield` keyword, the Recoil example looks very much like regular PHP code, whereas the first example looks a little more like what we're used to in JavaScript - lots of closures and callback passing - though the use of promises goes a long way to improving readability. In my opinion co-routine based code such as Recoil allows makes for a more easily maintainable application. This isn't really an ELI5, I'm sorry, but hopefully I've gone some way towards a helpful explanation. 
After your laracon talk I've come to the conclusion that I'm fucking dumb.
Yes! Yes! A thousand times yes! Symfony Console is awesome but sucks so much on this. Well except your solution is a bit confusing because of the naming: HTTP | Symfony | Your package | Suggestion ---|---|---|--- Route | - | Command | Route Controller | Command | - | Command I would suggest to keep the `routing` concept of HTTP, i.e. have a **CLI router** that takes a CLI `Input` object and returns a `Route` object. Then you would have a **CLI application** component that would (just like HttpKernel) use the router to find the route, then use a `CommandResolver` to instantiate the command, then dispatch to the controller using a `Dispatcher`. You could of course use the router alone. Symfony HTTP components: - Symfony\Router (they should have named that HttpRouter…) - Symfony\HttpKernel uses Symfony\Router Suggested CLI components: - CliRouter - CliApplication uses CliRouter This allows for a very decoupled component (the router) while still providing a high level solution (the cli application) friendly with dependency injection. Edit: also, I wouldn't do a fork. I would do a new library so that `Input` and `Output` and other classes like that can be reused without being rewritten. **TL/DR: CLI commands == HTTP requests** What do you think?
I think this is the one of the rare cases where a **goto** is not a mistake. 
Do you even PSR bro?!
May I have some more hours in a day as well? :-)
PHP isn't the only language that can redefine true, by a long shot.
Time to fire the client. Seriously. Once they ask 12 others the same thing they're asking you they'll maybe call you up and apologize. Dont hold your breath though. I'd rather starve than work with jackasses like your client!
FastCGI. different.
How exactly is the code hard to follow? If you're finding it hard to follow the problem is probably with *you*.
As @baileylo said, do both. But IMHO it should be in a **separate dedicated Validator class,** for a form or for a Model object, or for an array. a Model object should be **pure (POPO)**. You could also imagine a validator class that receive an array(coming from the form) &amp; return a POPO (if it is ok). There must exist 2 type of validation, because a form could correspond to several model objets (imagine master/detail ie order/articles). In my opinion, **using exceptions** for validation/filtering **is not what we want**, because in the end it forces the caller to see one error at a time (or it is slower): returning array is convenient, though less OOPish. 
I would give you several of mine if I could.
It's more difficult to notice the program flow and how it loops. How can you guys possibly be serious about this? &gt; the problem is probably you Really? Stay classy, Reddit.
Kevin Skoglund's PHP videos for Lynda.com are very good for absolute beginners. Some of them can be a little slow so you might want to load them into a program where you can adjust playback speed, like VLC. Still available on torrent I believe.
&gt; There is a new in-depth tutorial that I still need to review/merge, which is really much better and grasps SOLID to a decent level: https://github.com/zendframework/zf2-documentation/pull/1266 Awesome. I always hear from people that this is simple tutorial and don't do this way. Sometimes I too write like that. But it seems a wrong approach of teaching. Else you teach something wrong and they learn the wrong way. Good to see the work and thanks for linking it.
i just used this for a small project. worked like a charm.
Good work on it and the docs :-) . Some suggestion is please split the single file which is 1000's of lines. Thank you.
Good suggestion. Another thought is try injecting the global values rather than using it inside the class. I was looking at $_SERVER in the Router. I have noticed aura passes $_SERVER on the match method https://github.com/auraphp/Aura.Router#matching-a-route
functional testing would be testing things like an ajax call in a browser. if there's any programming language involved it's JS, the back end doesn't matter. &gt;The best way to get your head round this kind of BDD is to try it. The problem is I do unit/functional tests already. I'm trying to work out what all the fuss is about the B.
It's impressive, obviously.
BDD is more for the client than the developer. It lets you prove using automated tests that the app fulfills the spec and gives you a very clear roadmap for implementing it.
I see, so it's entirely functional? Would it be something a team lead creates from BA output, which then used to guide dev and validate features in UAT? Who would be responsible for keeping it aligned with business needs? PMs? I'm assuming you would still write complete unit tests and selenium suites to run side by side with BDD?
It's simply fantastic
how is the routing mechanism "powerful"? Please back it up with facts. For example: - at 30 routes how much computing time is saved for routing 100.000 requests compared to other popular solutions - what kind of routes other routers cannot detect but your library can? 
Updated.
i don't see how you can suggest they didn't write it to be reusable after you just got finished saying how composer uses it. Then there are all the other projects that do. However, i do think improvements like yours are needed.
By writing code? Of the router? Many people here will ask you why you need to add another framework to the stack. Only for fun and educational purposes? That's fine. And if you want to write your own because all the other frameworks suck, you should already know where to begin. I wrote an application that has user and group management, a rather simple but generalized and powerful permission management and many other modules that were used in (until now) four separate projects that I sold also. In principle, I could call that framework, started in 2003. But I know it would be stomped in the ground by even only an intermediate programmer from university for when I started, I didn't know much about object orientation and since I know, I don't see the advantages in my case. I have isolation as well, but I know I can't stop a running train that makes sense only because I have different habits and discipline of avoiding problems. I program (for money) since 1984, but I never did it full time. For sure I have ideas how to refactor my software to include modern principles - right now, I don't have time. Should I get money to develop another project, it will be put into refactoring of the codebase..
Could you share the files or link it on codepad.org or something? 
Good use of PSR. /s
Step 1 in asking for help: 1. Upload code to a paste service like codepad.org pastebin.com 2. Use a [SSCCE](http://sscce.org/) Anyway, you need to configure your MySQL setup properly with user accounts. This is separate from any database that you may implement that coincidentally uses users. Get MySQL workbench and try to connect to it with that and use the server tab to properly set things up.
When I was first introduced to Codeigniter, I was so enamoured with it, I had to rewrite it in my own style. I just _needed_ to know how the "magic" worked. Explore creating frameworks for self education purposes. Start with coming up with an entry point. It all starts with the URL after all. It's entirely up to you. Frameworks like Codeigniter and CMS's like to have an index.php as the application entry point, while others do not and explicitly prefer other files as entry points. Symfony2 for example, has two: [root]/web/app.php and [root]/web/app_dev.php. It expects you to be savvy enough with VirtualHost setups to point to the correct file based on environment context. Then create your URL parser. Codeigniter for example, cherry picks specific items in the url as: /controller/method/argument1/argument2/so-on/and/so-fourth, while Symfony2 doesn't and instead uses it's Router component to match entire URL patterns to explicitly specified methods within explicitly provided controllers Make your url's execute how you want the code execution to happen. CI and S2 utilize an MVC (Model View Controller) method of file layout and access. A friend of mine on the other hand, prefers to load in "modules" based on request, another likes to use a "Blocks" approach (site is entirely componentized) Choose a template engine. It's best to separate logic from display and a template engine is the best way to discourage macaroni code. It's not necessary, CI doesn't use one while S2 uses it's own Twig. Lots of developers like to use Smarty though. Or create your own template engine! (it's just for education anyways) Once you got a URL access point that can load up your display files and show them to the screen, it's time to talk about Database Abstraction. You COULD use an existing solution (such as Doctrine or Propel) or you could just write your own. (it's just for education anyways) This is getting long in the tooth, but yeah. ANYWAYS. *goes back to doing nothing*
Sorry but I'll probably stick with Silex for MicroFramework needs, it uses composer and has a solid battle tested router that almost looks exactly like what you're trying to accomplish here Good luck though!
Isn't this an sdk for a paid for service by luxstack.com? What's the motivation for working for free for them?
Do you not know how to do it yourself? It'd be a great learning opportunity for you.
^ this is probably a better idea. I'd suggest starting with composer as you can then use composer to add (and build the autoloader for) guzzle. I'm sure if you had an open PR people would happily provide feedback if you aren't 100% confident.
Those slides are excellent, thank you. Is there a (framework-related) reason [`GhostBuster`](http://ocramius.github.io/zf2-dpc-tutorial-slides/#/81), [`Blog\Entity\Post`](http://ocramius.github.io/zf2-dpc-tutorial-slides/#/87), and [`Blog\Service\PostService`](http://ocramius.github.io/zf2-dpc-tutorial-slides/#/88) have protected properties? It looks like no, both for the `ClassMethods` and the `ObjectProperty` hydrators.
Well it's open-source... So why not?
The errors you are getting are from mysql_real_escape_string() and mysql_query(). You're missing an "i" in these functions. You're going to use **mysqli_real_escape_string()** and **mysqli_query()**. Both of these functions requires 2 variables, and you're missing the database link. So what is happening now, you're just trying to connect to the database with the username 'sam'. This is what you do to get rid of the two errors. This will not make it work, but you'll get new errors, then you can go from there. 1. In "general": Add the database connection, so we can use it in the function. *function sanitize($link, $data)* Put the $link in the real escape. *mysqli_real_escape_string($link, $data)* 2. In "users"; Same here. *function user_exist($link, $username)* and *mysqli_query($link, $username);* and *sanitize($link, $username)* 3. In "login": *user_exist($link, $username)* 
Because there are no reasons not to. ;)
&gt; I would do a new library You should totally do that! I might even contribute a bit to it, though for the reasons to follow I probably wouldn't use it. Basically you're approaching the problem with an existing set of (perfectly valid!) assumptions, about what objects should be there, I've approached it with an equally valid set of assumptions: &gt; I would suggest to keep the routing concept of HTTP, i.e. have a CLI router that takes a CLI Input object and returns a Route object. When handling HTTP requests, I don't use Route objects. I use https://github.com/nikic/FastRoute which just requires a method, pattern and callable to setup a route. For the fork of the console, I'm setting up routes in a similar way with just a bit of info about the command and then the callable that needs to be called if it 'matches'. &gt;Then you would have a CLI application component that would (just like HttpKernel) use the router to find the route, then use a CommandResolver to instantiate the command, then dispatch to the controller using a Dispatcher. I don't have most of that stuff. The FastRoute just returns a callable to call, and the fork of Console gives you which callable to call. Just to reiterate something from the docs, this is the entire running of the console application (minus the config setting up the DI): // Find which command is appropriate $parsedCommand = $console-&gt;parseCommandLine(); // Pass in the callable, and the parameters $provider-&gt;execute( $parsedCommand-&gt;getCallable(), formatKeyNames($parsedCommand-&gt;getParams()) ); I just don't _need_ any of the other objects...once you start passing callables around, and have something that can execute them directly then all of the support objects just goes away. If you'd like to have them, and it's certainly not wrong to have them, then you should definitely start a lib on Github - it sounds like other people here would contribute as well. btw Although HTTP requests and CLI requests are similar, I'm also not sure that they are exactly equivalent... HTTP requests really do need to return a response object, containing the headers and body which is then sent to the client. I don't think CLI requests need to do this, and in fact shouldn't. They should be outputting directly to the requested output i.e. things that take a long time to run on a CLI (e.g. a job runner that is picking items up off a queue and processing them) should be outputting all their output directly, not waiting until it has finished. &gt; I wouldn't do a fork. I would do a new library so that Input and Output and other classes like that can be reused without being rewritten. Again, not a choice where one is obviously correct and the other is obviously wrong but I choose to fork because: * Maintaining a lib based on top of another evolving lib is more work than just forking it. * Some of the code in the other classes in Symfony/Console have crap in them that shouldn't be there - e.g. using exceptions for flow control. I haven't changed that yet, but would like to. But yeah - you should totally start your own lib if you don't like using Auryn as a DI, and want the 'Dispatcher', 'CommandResolver' objects. 
 function foo(DBconnection $conn, Logger $logger){ } //Creates a command name foo, that calls the foo function. $command = new Command('foo', 'foo'); // Assume that the program is invoked with foo as the command $parsedCommand = $console-&gt;parseCommandLine(); $provider-&gt;execute( $parsedCommand-&gt;getCallable(), formatKeyNames($parsedCommand-&gt;getParams()) ); The DBconnection and Logger objects only get created when the $provider-&gt;execute() method is called. Up until that time the 'references' to them in the type-hints are just strings. There's no need to initialize any 'lazy-loaded' references, and the function 'foo' doesn't need to know about a service locator to be able to get the services it needs to run....they're just injected when it is run. 
Have to try it, seems perfect for closed source projects :)
I don't quite remember how to do it. I could talk you about js charts and graphs, and how to handle foreach loops, but I think that if you look for "php js charts tutorial" in google, will give you a better example of what should be done. You don't need to worry about the database design. Sorry for my English.
So the takaway from this is... use mysqli?
I am definitely up for doing this with JS if you want to explain how? I just figured it would use PHP but if you think JS then sure
I always start with: &lt;?php
I basically have the opinion of: Put it in the database when a known slowdown is found in code, and can be best resolved by putting it in the database. You are correct in that the database is, in a vacuum, a *terrible* place for one's logic to live. It's hard to maintain (since it's outside of conventional files/source control), and SQL logic in general can be rougher if one's not used to it (especially if one has to do stuff more advanced than SQL queries). But it is also the place where data crunching can be done superfast, and such. It's good to not prematurely optimize, though. Sure, things can run faster in the DB, but if one's application isn't suffering from slowdowns, or the point of slowdown hasn't been identified yet, keep the database as simple data I/O until the need arises.
&gt;Not getting a response, I googled again, found the solution, updated the blog, and posted to the thread. Why don't just post it here? Stop acting like an Smartass.
I have tested it for Codeception. It has pretty complex .travis.yml instructions, still I can't guarantee any travis config will be parsed and executed correctly. Please create issue if you discover pitfalls.
I'd have to agree to with Stof and the github issue.
I definitely picked up on some of what you're talking about. The concept of maintaining resource allocation via green threads is definitely interesting and appealing...so out of all the information you've provided, learning more on that is the area I most apparently curious about, having no prior experience with promises or react. So while Recoil would allow you to associate a strand with each user/session resuming it as necessary, why does it end up being a poor use of resources? I understand that you'd have lots of "suspended" strands lying around waiting to either be resumed or destroyed due to inactivity...is that what you are referring to or is there something more?
"Flot" will do what you want, and it does it well: http://www.flotcharts.org 
I'm not really after something to do what I want, I want to know how to manually do what I want, but thanks for the link anyway, if I get stuck i'll definitely give it a go
Have a look at the route definition [here](https://github.com/mvc5/application/blob/master/config/route.php#L48), /application/jack/jill will result in the definition's anonymous controller function being called, /application will invoke the Home controller. And [here](https://github.com/mvc5/application/blob/master/config/service.php#L99) instead of the request uri being set as the path to match, it could be $argv[1]. Anyhow, thanks for sharing, its good work either way.
I'm not sure if this is the reason why he was downvoted, but polymorphism is specific to inheritance and not composition.
Seems like you're describing a general http proxy. Why not use existing http-proxies such as squid etc instead of building it yourself?
It does demonstrate DI, but it does not demonstrate any inheritance. Inheritance is extending a class with another class, not passing an implementation into a class.
The product owner should be aware of the business goals and be able to align features to business goals. Sadly, this doesn't happen enough during development. Ideally, the business users write the test but a developer and QA would have input in it as well depending on how specific the business requirement is. It's best to be written during a meeting so everyone can ask questions and check their assumptions. Also yeah, you would still do TDD as it's unrelated to BDD. 
Have a script that performs two main functions: download a URL to the server and display a file from the server. You'll need to pass the URL for either one of these as either a GET or a POST from a form, so it's not quite automatic if you'd want that. You can use the [cURL library](http://php.net/manual/en/book.curl.php) to perform downloads on the addresses you give it. Then when you go to retrieve it, it will be on the server and you can just serve it straight from the server using either a redirect or download. My suggestion is to base32 encode the entire URL and use that as the file name, that way files like "report.pdf" and "download.png" won't collide if they're from different addresses. Then, you should store the requested URL and the encoded file name in a database (or - if you really want punishment - a flat file) so you can quickly retrieve the file just from the URL. Also useful for knowing if something exists. That said, you probably should also look at /u/chem2's post, because he's right. I imagine you may not have that use-case though and either want to be selective about what you cache or you are on a server you can't install software on. If you have the latter scenario, make sure you also have rights to use the server to "cache" the files, because it may put undue strain on servers that aren't meant to be CDNs, depending on how much you abuse it.
It looks like the only setting that would affect this is in: &gt; Settings &gt; Editor &gt; Smart Keys (Enter) (Smart Indent) I don't think you can have PHP's tags have different indenting than the rest of the page unless you write a &lt;?php tag, then delete the indenting the page gives it and continue from there. To shed some light on why this functionality probably doesn't exist, it is because it common practice to keep a separation of concerns (MVC). Normally an view file with HTML in it would have php blocks that are only one line. These types of functions could go into a separate file and be included during the script execution.
yeah, combined with https://github.com/symfony/CssSelector, and it will work nicely or you can use https://github.com/fabpot/goutte for full crawler
You can achieve that using the http proxy from symfony2 project. You need to implement that basic HTTP Kernel and use the proxy middleware. Or just use something like varnish and create a VCL that override some of your source http headers before writing it to the cache layer. 
You can pass the database object in via the constructor and assign it to an object variable.
Well, I really like the smart indent on pressing enter 99.9% of the time, so I don't want to disable it. It's quite usual for me to do a bit of coding, move something around, copy paste some stuff (which always seems to result in crazy indenting), and then at the end just highlight it all and `ctrl + alt + i` to have it all nicely formatted. It's actually only a few functions that leave a HTML tree open, ie header and footer-type functions. If I put the footer function right after the header function, it kinda resolves and contains the madness. I know, I know... I'm doing it all wrong. I've got massive "functions.php"-type architecture and my concerns are not separated at all. In fact, they are happily married with 3 kids. I wrote this app about 10 years ago. It was my first large-scale programming project. It became really successful and I still need to maintain it, but I don't have time to re-write the thing (which is what it really needs). Thanks for taking the time to reply though!
Could you elaborate a bit?
I know how that goes. Legacy code has practically been my life. To get more insight on your dilemma, I would recommend filing a ticket with JetBrains and seeing what they comment on it. That'll be your best source of advice.
&gt;at 30 routes how much computing time is saved for routing 100.000 requests compared to other popular solutions if you want to know , just try it, other wise don't rate it, it is a very simply operation ^_^
/r/PHP is a not subreddit support. Please help /r/phphelp visit for
So, in the constructor: `global $db` and then `$this-&gt;db = $db` like that?
I would consider not following the advice in this post and instead reading this: http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
Pass the database object when you're creating a new instance of the class. class foo { protected $db; public function __construct($db) { $this-&gt;db = $db; } } $a = new Foo($db);
Sorry, but you have to understand that our time is very limited. The one making the claim should provide the proof not me to check every single idea someone has. The rate at which one can make claims far exceeds the rate of confirming/debunking them. If I were to make the claim that your framework is shit, that would be a different story and I would have to be the one to provide proof. This basic idea is called "the burden of proof". Wikipedia it!
And while we're at it, mark `$db` private.
Thanks! That worked perfectly.
Use protected if you want to remain flexible to inheritance.
I'd honestly never seen a goto statement in real life. I knew they were meant to "jump" somewhere, but I didn't even know how to properly use one or how they work. Looking at this code though, I immediately understood it. So for me it was not difficult to notice the program flow. That's one personal anecdote, yes, but I just mean to say it's not all that confusing *in this case*. I can *definitely* see how it would cause everything to go to shit if abused, though.
I disagree - the singleton is a serious anti-pattern (on that note why the hell is it on phptherightway??). You've still got a globally accessible god-variable - semantically they're identical!
I appreciate you may have just knocked this up as an example, but I'd totally recommend using Twig or something like that for your templates. I used to have header and footer includes back in the day, once you find templates you never go back Edit: I read the other comments, and now realise mine is pointless, didn't want to seem a tool
Maybe you can try wrapping all that HTML in ~~EOFs~~ Heredocs? You would have to change whatever echo statements are embedded in there to {$variable}. Alternatively if you can make the time to do so you can move all that HTML to other PHP files and just do a bunch of includes. It would be a tiny bit better. 
You might try looking at the Settings-&gt;Language Injections Those are how phpStorm figures out how to understand a language embedded within a language - turn off html and see what happens. You'll lose html specific syntax highlighting. Or perhaps you dont have html injections *on*. Either way, that might be where the problem lies.
It's considered an anti-pattern due to how it creates a global state in an otherwise stateless system. It's a special type of static class that ensures there's only a single instance of itself. Static classes allow for systems to make calls anywhere without having to instantiate an object beforehand in a similar way as a function library, but they don't care about the state around them and are called when they're needed. Singletons on the other hand care about the state so allow a state-based object to exist system-wide which is essentially a global object/variable. Global objects and variables are difficult to properly test in systems because the state they might be in isn't always able to be reproduced. Think of working on a large project with a bunch of people and everybody's writing to the same small set of files without version control. Sooner or later, somebody's going to overwrite someone else's work or somebody's going to test for one thing while somebody changes everything around without them knowing. The result is effectively unpredictable and hard to figure out reliably. Of course, global states aren't always bad. Singletons can be used efficiently and are commonly used as registries or repositories for different connections like having a global database connection and you obviously only want a single connection to talk to. So you might think I'm contradicting myself here and justifying singletons, but I really am not. In order to be an anti-pattern, three points must be met. The first is it has to be a pattern, which it is, and not just bad design. The second is it has to have more problems than benefits, and it does as I've already described. The third is the most important point regarding many people's disdain for singletons, and it's that there has to be a better solution. The better solution is dependency injection where you pass around your state-reliant object instead of retrieving it from the aether; pushing instead of pulling is another way of viewing it. By using dependency injection, everything's much more reliable and easier to replicate and test against. The benefits of dependency injection far outweigh the benefits of singletons thus it is often viewed as the proper solution, or "pattern", to use when you need a global state. The reason singletons are also viewed so black and white as anti-patterns is because in every situation where you might want to use a singleton, some form of dependency injection is a better option.
use [heredocs](http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc) function display_header() { echo &lt;&lt;&lt;HTML &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta ....&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="container"&gt; HTML; }
Audacity is free. You can open the audio file, select a bit of audio, and apply the "normalize" or "amplify" effect. That's a quick an easy way to do it. I'm sure Adobe Audition can do this as well if you have access to that, or maybe your favorite video editing package can help you out.
it worked! i cannot thank you enough! 
Isn't an IOC container a singleton? ;)
Untill now I'm using zf1 and it's easier than any framework i know even zf2... 
I don't think a big rewrite is really the best way forward always, you could start introducing smaller things like templating in places that you need them without doing a big rewrite and just start small refactor tasks until you can get to a happier place
wow this is really helpful!! I'll definitely give this a go! why use trig?..could just find the derivative ;)
Relevant xkcd, as always: http://xkcd.com/1425/
+1 for protected * http://fabien.potencier.org/article/47/pragmatism-over-theory-protected-vs-private * http://blog.astrumfutura.com/2011/03/private-vs-protected-methods-the-debate-that-never-ends/
Thanks - I'll check it out and see what PHPStorm does this that in terms of indentations. Either way it looks like heredocs would be a much better way to do what I am doing, since I don't need to then wrap every variable in `&lt;?php echo $var; ?&gt;`. 
Thanks - as with the other person who suggested this - it may or may not solve the issue I posted about, but looks like it could clean up my code.
I assume you mean laravel's IOC container - when used via facades it's semantically the same as a global or singleton, and this use of it is (rightly) criticised by many developers. When used to inject dependencies to the constructor (as /u/mecromace described) it really isn't different from any other DI container. Used properly it has the opposite effect of a singleton - the instance is provided to the class rather than the class requesting it. The inversion of control is the change in how your code accesses it's dependencies. 
Yeah I guess it depends how deep I wanna go with this current refactoring. I left the PHP world a while back and do almost exclusively JavaScript these days. I'm pretty up-to-date with my JS knowledge and skills - my PHP knowledge on the other hand has been left in a state of retardation. As you can see. And I didn't infer any toolishness from your comment, so no worries!
1000 lines? Pffft... try 4585 &amp; 4209 for my two biggest, baddest function silos! ;)
&gt; So why not? Because it's contributing to something that is only usable with one specific site? If it was an open project, where someone could use it with whatever bit coin server they wanted and not just luxstack.com then, hell yeah.
I will try that -- many thanks!
Yeah, just said EOFs because that's what I have seen used. To be honest, I don't use them much. 
fixed
During week more than 4000 have been studying Dcoin’s source-codes. None of them found any serious vulnerabilities. The one you found(40+ exploitable methods ) – is the result of your inattention and unwillingness to check the code above, where there is an incoming data control. Not to scare the other inattentive "specialists" like you I fixed the code.
Not to the same level as SF2, but had a project with it.
no you don't have to visit the page , the session variable is attached to the user session and so you can call it from any where , as why it doesn't show the variable value , well , you might have not assigned the value correctly. make sure that the value is entered in the database then in the second page make sure the variable is accessible . try to var dump the value in the second page and let me know what you get
The thing about composer is, in the year 2014 I do not want to download your framework and add it to my own repository. I do not want to manually upload to our webservers, write a script to move it to our webservers, or even use a git submodule. 100% of the 3rd party PHP code I use must be installable via composer or I won't even consider it. I think you will find this is a popular opinion. Your framework does look like it was a great learning experience, and I'm sure you had a lot of fun building it and probably even use it successfully in your own projects. But trust me when I say, today the PHP world is all aboard the composer train, and if you want people to use your work, then you will have to jump on as well.
The first post is confusing and self-contradictory; he's saying protected access is the pragmatic choice but that private access yielded better designs. This appears to be counter to his opening. He then says that you can have public access that is somehow exempt from the public API. The other post rambles in a manner that suggests a complete misunderstanding of basic OO principles, justified by the *ability* to invoke reflection in order to violate contracts. Whenever you invoke reflection, all bets are off and you deserve what you get for it. His willingness to break protected access is outright dangerous. I am most surprised that both posts are written by very active PHP community members.
Its editor vs. IDE. There are just some ("professional") things you can't do (well) in a simple editor. Like refactoring, code generation (eg. getters/setters), debugging, live code inspection (you see errors instantly), code reformatting (with complex! rules) and code completion. I know there are sublime plugins eg. for xdebug, but its just not the same. You can achive a lot with editors like sublime, especially with a handful of nice plugins, but you can't do everything. On top of that, phpstorm is very configurable. You just need to flip a few switches and it looks like sublime.
Why not use a captcha? Or why not use Javascript to fetch and render the form after the page loads? Or have it select the dog from pictures of cats? Or have a picture of a jar or peanut butter plus a jar of jelly, and then have them select the sandwich icon on the right?
:-|.... Ok. The API i'm using seems to be only in PHP. Could I just use JavaScript to stop trackbacks?
Use captcha, either made by yourself or one of the already established will work
&gt; Or why not use Javascript to fetch and render the form after the page loads It won't fix the problem because: * some spambots already have enabled JS * spambots will simply refer to file post-comment.php (with POST query) instead of sending query through your form Also: * it would render unusable this feature for all people who have JS turned off.
Stop writing code like that. Because you can, doesn't mean you should. Learn to use includes, or a templating library. It will make your life so much easier when you have to go back and change it later.
I do the same thing and render the charts with HighCharts http://www.highcharts.com/
Along with what everyone else has already said, being able to jump into the terminal in PHPStorm is huge, especially if you're using Composer. Also, while you can customize keymappings and snippets in both, it was considerably easier for me in Storm. I think it ultimately comes down to preference when choosing between the two in the end. But, you should give PHPStorm a fair chance (use it for a week and try out some of the niftier features like code generation, refactoring, class importing, etc.) before you completely write it off. 
To ignore a library just because it's, say, not "composer" ready, might be a little too conservative to be honest. There exists a few libraries I've now used that dont really have a composer package ready and are great single downloads. For example; a "browser detection" class, the only good one I came across was just a download, no composer. One could argue that I really should have made a GitHub repo and pointed a Packagist to it, but meh, sometimes a simple download is a simple download. Now that all said, im with you though. Composer is just too convenience $ composer create-project symfony/framework-standard-edition mysite BOOM. Done and done. mwahaha
Line 6, why are you checking for 'http://' ? It would never be expected from a hidden field whose value is blank.
The only time I've seen mod_cgi in use is one fairly old sites now, or sites that depend on legacy systems. But alas, I've not seen a great deal, perhaps someone would like to confirm that.
Can you post your code for the insertion and addition of the primary key to the session (or all the code on page 2)? It's likely something simple that you're overlooking.
smart Framework integration (Symfony, Yii, Magento, Drupal, AngularJS, etc with built in helpers to deal with those frameworks nuances), Deep Code Linking (PHPStorm can follow dependencies and allow you to zip around to definitions by Ctrl+Clicking), has updated to the date PHP specifications built in, proper code suggestion and completion, proper project manager, visual interface for Git, directory inclusion and exclusion, build tools, built in console lets you execute terminal commands to your project (so you dont need to open one), refactoring tools (that also keeps your git repo in check), and Alt+Insert can inspect your classes and generate Getters and Setters and PHPDoc blocks and missing Implements methods. Built in composer and packagist integration. "File watchers" auto compile LESS/SASS/Coffeescript files to CSS/javascript respectively on save without the need to run external tools. Plugins keep extending Framework and language integration (like Wordpress) Im not even 5% down the list of benefits... *Con*: it's powered by Java. But it handles itself extremely well, so it's not really that much of a burden, unlike Eclipse and Eclipse based software (like Netbeans and Aptana)
Don't forget to open and save your sessions
One of the worst codes I've ever seen. abstract class configuration { public function load() { $variables = json_decode(file_get_contents("engine/globals/configuration.json"), 1); foreach($variables as $key =&gt; &amp;$var) { $this-&gt;{$key} = &amp;$var; } } } Because keeping configuration values as an array or object propery is too mainstream. Wait, I've found something way more scarier. https://github.com/voomes/framework/blob/master/pages/index.php
Works with any typical extension iirc (ie. SQL,CSS)
This is not actually about PHP, but about Apache. The answer, as you say, is maybe. There are basically two ways two use PHP with Apache, you can use CGI which would require mod_cgi to be active in your Apache server, or you can use PHP as its own Apache module. The latter one is how it's normally done, PHP implemented as CGI is pretty uncommon. If the output of `phpinfo()` contains `mod_php5` then PHP is probably not loaded as a CGI module, and if that's true then ~~you don't have to worry about shell shock~~ (see edit below). --- Edit: Note that this comment only applies to PHP scripts. If your PHP scripts are being loaded with mod_php5 then attackers will not be able to exploit your server through PHP. However, I'm not sure if the presence of mod_cgi in itself is enough for Shell Shock to be a problem for your server: I'm not an expert on the matter. Thankfully, [you can find out for yourself](https://shellshocker.net/) if Shell Shock is a problem for you.
It is advisable to use GET or POST parameters (=hidden form fields) to pass information whenever possible. If you are doing redirection you can pass parameters on the query string, if the user is submitting a form use hidden form fields. Use session variables only for data that has to be available application wide.
I love magento. Best code to work on, bar none.
I haven't used phpstorm yet (I should get on that), but as for sublime text 3: setting custom keyboard short cuts, and customizing the color scheme were ridiculously more difficult than any editor I've ever used, to the point where I questioned why I spent money on the program. 
HighCharts user here. Can confirm. It is awesome. 
I was being extremely sarcastic.
Editor vs IDE. I am a huge fan of PHPEd but I've been testing phpStorm and I am very impressed. The performance is much better than I expected though I had to disable plugins and such to get it really responsive, but the unused variable detection is almost worth the price of admission. I need to figure out how to get the called method signature to pop up more easily but its somewhere I bet.
Yep. I use both. When I need to edit some json on the fly or maybe write some ruby for chef or some gem we might use, then I'll use sublime text. But when I'm working on our main application in Symfony2 I am regularly grateful for how much easier phpstorm makes everything. 
Drowning in a sea of xml and eav horribleness. 
Ah, yea. Everything was in XML. Keybindings were in JSON. In Storm you can highlight some boilerplate and use a quicksearch (shift + shift + search terms) and find "Save as new live template" (a.k.a. snippet). Keybindings are just a matter of looking up whatever command you wanted to map in the Settings pane and then recording the keys you want to map the command to. I think you can get Storm for free for a year if you're a student. Otherwise, it's still well worth the money, IMO. I've been through Notepad++, Eclipse (for Java), Aptana, and ST2. But PHPStorm has been the IDE I've been most productive on. 
I'm going to give it a try and maybe purchase the personal licence. 
Look into http://stopforumspam.com. They have a dead simple API to use, and it catches 99% of spam bots on my site. Combine that with /u/I-am-lying-right-now's suggestion, or maybe just implement a simple honeypot field (something a spam bot will automatically fill out, that you've made hidden OR hidden with CSS) and you can filter out the other 1%. If you go with a honeypot field, I recommend hiding off screen via CSS as very, VERY few spam bots are sophisticated enough to know when form fields are hidden by CSS, but many will ignore form fields with the hidden attribute.
I must have missed the tone of your text. Honestly, there's a learning curve, but it fits what my company needs lately. It's not so bad.
There are so many things wrong with this article, I wouldn't even know where to start.
Please try. I am a bit rusty and was about to give it a go. 
I use both for different things. Sublime is great for text manipulation and opening gigantic files, PHPStorm is the IDE I use to develop in.
I didn't include the page that I was trying to get the session variable from.
Thing one, you can't read it on mobile.
Article is a strong term. This really just seems like what the author thinks is good to learn for a developer. Though for a subreddit for PHP, it definitely doesn't focus on PHP that much. Also typos and grammar. 
Could always be a guinea pig for the [Early Access Program](http://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program). 
Oh, now how can I put it off any longer when you've linked me right to it. I should be able to start checking it out in 20 minutes, thanks!
posted a comment there too, but... to expect all of this under a 'jr' banner is a real stretch of the title. the definition of junior in general "someone who knows these topics, and just needs a bit of guidance now and then" is itself a stretch. Generally, in my experience, someone with a 'jr' title is just getting started - they're usually in their first position where they're going to be encountering real-world examples of many of these topics - this is where they'll get their experience. suggesting that they can educate themselves with a couple of days on wikipedia going over these topics is a horrible idea. at best, they're going to have a 5 minute overview, and may say a few key phrases in an interview, but it's wholly inappropriate to expect to be able to even skim enough. The OP may have a lot of experience already and is simply forgetting what 'jr' really is. As seasoned pro can look at a new framework or tech, and sometimes have a lot of understanding of it because they only need to understand the differences between 'established tech/tool' and 'new tech/tool'. Jr-devs won't have this experience, and can't glean it from a few days on wikipedia. Should people be aware of these topics? I don't see why not, but there's also plenty that was left out. The 'SQL' section basically just focuses on mysql. Why ignore postgresql and sqlserver? Why ignore memcache, redis, etc. Why shouldn't a web developer know about message queues? Why not suggest they should know more sysadmin skills? Why isn't vagrant on the list? importance of cron jobs? Nothing about composer? Nothing about IDEs? Nothing about vim/emacs? Firebug/chromedevtools? Funny coincidence is I was just pointed to phppixie a couple days ago, and vowed not to use it based on the quality of the project - the things the author chose to focus on in this article sort of reinforces my view of the mindset of the developer and his(?) priorities.
encapsulation. not incapsulation. it makes me wonder if the article was spell checked.............
why are you proud of this?
The PHP Linter plugin is pretty easy to get working in sublime. I tried using xdebug in sublime, but it was too clunky.
It's the same perverse pride of someone who won a beer-drinking contest I think. In seriousness, I know it is a bad state of affairs and was committed long before I knew any better.
Thanks. As I mentioned, it's legacy stuff I wrote 10 years ago before I knew any different. I'll certainly look into templating for the future.
I agree with most everything you've said, just one thing to note: Netbeans is **not** eclipse based. It's much better than eclipse on resources (and was one of the reasons I found it an acceptable option) but not even close to as nice as phpStorm :)
I ran PHP storm for a few days, but I just found that it really got in my way and didn't help me much at all. Other IDE"s I have used. Visual Studio - gah. Eclipse for Android - gah gah. Android Developer Tools - ok. FlexBuilder/FlashBuilder - based on Eclipse. ok. XCode - Best hands down. But just "love" sublime to build PHP &amp; HTML and JS apps. For me is about how responsive the app is. Sublime is lighting fast, PHPStorm is well, painful... I agree it has some great features. But you will be surprised what you can configure sublime to do. For deploying, I have shell scrips that do all my git pushing, committing and pulling to server via SSH. Short story, just to go slightly against the grain, I feel I am soo much more productive in Sublime vs PHP Storm. That would change if the IDE was as responsive as sublime. You can add comments like linting, class method autocomplete (sublime works with "code intel" plugin). But I find I just don't need it as I still read the class file. Lastly, I love having one editor for all my code. HTML, JS, PHP, SH, Python, Ruby, XML, JSON. 
It could be used as a singleton but shouldn't be. Just like a DB connection, you should be able to have many instances of an IoC container or service locator and pass them around. Don't access any of them either statically or with globals!
I just laughed out loud and woke up my wife while reading this. All the other glaring inadequacies of this article aside, I pictured myself asking someone in an interview ["What are a port?"](http://i.imgur.com/MphHaTR.png) and lost it. Although, judging from one of [OPs videos](https://twitter.com/dracony_gimp/status/467968654576214017), I'm fairly certain that he is [Janosz from Ghostbusters 2] (http://ghostbusters.wikia.com/wiki/Janosz_Poha), and english is not his first language. Give the guy a bit of a break. However, every time I see something by OP here (either peddling PHP's only brony framework, or talking about how he's going to "hack some Laravel sites" because of a vuln he didn't understand), a little part of me that still loves the PHP community gets stabbed in the throat. TL;DR OP has a reputation of being a bit of a PHP gutter tripe, and I'm pretty sure he's Janosz from Ghostbusters.
&gt; And if you think than I’m really overkilling the “Junior” level, you’ll be really surprised how many of these topics can be covered in just 2 evenings spent on Wikipedia. Also, my favorite. `DDOS mitigation` I could understand a bit if he mentioned load balancing, but ddos mitigation... really? 
So when using this how to I easily convert the object structures back to XML?
PHP Linter is horrible though. It only shows you line with error the same way PHP does. Which is not always the actual line with error, whereas PHPStorm underlines errors with red and does it right away. Once I switched from Sublime to PHPStorm opening browser just to see PHP Syntax error started to happen at least 10 less times.
&gt; opening gigantic files I don't know, it's quite slow with it compared to say, Total Commander's lister (F3).
Made a couple. It is amazing what happens with beer.
Glad to help
I am insanely confused right now. Back when I used it, between 5, 6, and 7, everything everywhere not only said it was based on Eclipse, but the entire software looked, appeared, and felt just like Eclipse with PDT built in. Projects, the menus, even the hidden files it creates was just like Eclipse... But now that you've brought that to my attention, I can't find a shred of evidence online anywhere that it was ever based on Eclipse. My entire perspective on that software and a large chunk of my nooblet web dev days has been entirely flipped I.. think I need to go lay down......
Advice from Matt Staufer on rewriting is this: 1. It'll take longer than you think 2. No really, it'll take much longer 3. Maintenance will stop while you rewrite it 4. There's so much domain knowledge in your current version 5. It'll take much longer than you think. The point of refactoring into new standards is that it'll update your code base while not wasting the client's time.
You guys rule so hard. Checking and merging in shortly. Thanks so much. :D
How is SQL section focused on Mysql? Normalization, indexes, foreign keys and joins exist in every SQL database. The InnoDB vs MyIsam part is just to to nudge people to look a bit deeper. I think I should have named the article: things that a web developer should be able to grasp. That would much better reflect my point. It doesn't really matter if the person knows these things at the moment, rather that those things shouldn't baffle him.
It does save file on every keystroke for me, both with SASS/coffee and without it. Probably this is configurable, but this is the default behavior.
around november
Thanks for your answer. I had a look in Symfony's issues, and I found that one: [#10639](https://github.com/symfony/symfony/issues/10639). Interesting discussion, and then closed by fabpot who obviously didn't read the whole thing. Too bad… Anyway, I see your point. I just want to say that I meant the "route concept" more than the route object. Today, Symfony commands define their own config (containing their route). Having the "route" outside of the config (either as object or something else) is separating routing from the command, which is good. And that's actually what you do. I hope things will evolve in the right direction in Symfony thanks to your PR. **Edit:** I have submitted a new issue on Symfony's repo: [#12063](https://github.com/symfony/symfony/issues/12063)
&gt; Don't have to worry about it at all or don't have to worry about the PHP aspect The latter: it's the PHP aspect that should not longer cause worries. You've made an excellent point. I'll go back and edit my original comment. If you have mod_cgi enabled, you may be vulnerable if Shell Shock has not been patched, but I think the vulnerability only exists if you have an actual CGI script on the web server that an attacker can exploit. Having said that, I should not be considered an expert on the matter.
Well if the error is not obvious I just do a ctrl-shift-p show error and sublime shows you the error syntax.
Very unhelpful answer for those of us who have inherited code... 
It was late and I'd focused on the "EXPLAIN" and the mysql table types. Generally speaking, understanding that there are tools to use for different database to debug/parse SQL statements, query plans, etc. is a broad enough goal without necessarily getting in to the specifics of any one tool. I agree, the title should have been different, or, more specifically, the 'jr devs should know this' should be dropped. Of course, you hold this belief, so it shouldn't be dropped, but understand that I suspect your view on this position is in the minority.
tl;dr "no, it doesn't need it". as you know php can be run by Apache via various different modules, mod_cgi being one of them. mod_php is arguably the most common solution, and it's not vulnerable to the remote code execution exploit because the environment variables (where the malicious code is usually injected via the HTTP headers) are not evaluated by a bash subprocess, ever, not even when invoking functions like "system" or "passthru". lately, another common setup is mod_fcgid for Apache 2.2 and mod_proxy_fcgid for Apache 2.4, to take advantage of PHP-FPM. the former *may* be vulnerable, i.e. when the FPM is invoked by a wrapper script instead of using its tcp port or unix socket directly (which is a better approach anyway). AFAIK mod_proxy_fcgid instead is never used with a wrapper script, so it should be safe. suExec is a common setup (e.g. cPanel uses that) and is vulnerable, because it does involve a CGI wrapper. the mere presence of mod_cgi shouldn't make the web server vulnerable, unless there actually are cgi scripts to be run.
Are you possibly thinking of Zend Studio?
If you're going to hide the honeypot field with CSS, make sure it isn't picked up by screen readers, or at least add a label explaining that they shouldn't check it. 
Good luck with that - I'm not going to get involved as the Symfony guys don't seem interested that interested in outside ideas, and seem a little bit nuts. However you should probably include the major bit that was pretty much agreed in the previous issue, in that the 'output' in CLI requests is not the same as output in HTTP i.e. &gt; HTTP Request = some form of input &gt; CLI 'Request' = some form of input. They map nicely. &gt; HTTP Response = a value-ish object &gt; CLI Output = a service to write the output to. That would probably make it clear to them that you're not trying to make the CLI stuff be the same as HTTPKernel 
The best advice that I can give, which applies to this question as well as many other decisions, is this: use the simplest thing that can possibly work. If the editor you are currently using is working for you, and if you don't feel jealous of people using editors that provide more complicated features, then stick with it. At the same time, don't fall for "proficiency fatalism" in thinking that just because someone you know is very good at a very complicated tool (like the UNIX shell, Vim, or Emacs) that you can't reach proficiency in it. Most of the time, proficiency is enough, mastery comes later.
Are you calling session_start() on each page that you're trying to work with the session?
I'm not someone who cares much about the spelling and grammar of someone for whom English is probably a second language. My comment was pointed directly at the content, not the delivery.
[like this](http://php.net/manual/en/soapclient.getlastrequest.php) ? [response](http://php.net/manual/en/soapclient.getlastresponse.php)
You do have to be *very* careful about that security wise.
It's a lot less "either-or" and a lot more "right tool for the job".
It's generally a bad idea to do what you want but... Create a htacess if you're using apache to redirect all Web requests where the request path doesn't exist into your one "generate" PHP file. This file can interpret the request Uri, generate the file on the server (with proper permissions) and then redirect the user to this same page. The redirection with take the visitor to the newly generated file. 
https://www.google.com/search?q=front+controller+php
Thanks, why is it generally considered a bad idea?
Why? Don't put sensitive data in your query string and use https so no problems with form data being sent. Sessions should be used for keeping the user logged in, all other data that you use on a page should be fetched on page load from the database. There are other useful examples for session variables but if someone is starting with php they should learn best practices and putting all data into session variables doesn't make sense.
&gt;Why? CSRF and redirect hijacking, among other things. I'm not saying you should never do it but you *do* need to be extremely security conscious.
Your codebase should be static. By creating files on the server you're mixing dynamic user generated content (which should be stored in a db, or storage platform like S3) with your source files. 
I would go with the PHP FIG standards. If nothing else because Symfony uses them (along with every major framework). 
I guess I worded it wrong. I just had to add a rewrite rule that would redirect http://mydomain.com/xxx to http://mydomain.com/view.php?s=xxx. The code would be static, but the webpage would change based on the value of $_GET['s'] I believe you answered my question. For some reason I thought it was a PHP problem instead of an Apache problem.
I might have read it wrong but my original idea still works. I'm in mobile so can't give you full examples but check out WordPress ' htaccess file for a hint 
Note how the first example gets connection parameters using Config::get(), so all the examples are using the same settings. The hostname is an IP. https://gist.github.com/anonymous/cc2cd7ea9ee62bdd7d9a
If I were to guess... he's implemented a reverse-captcha, the idea being that you insert a dummy input that's hidden from the user with CSS, which bots will blindly auto-fill. As for `http://`, my guess is he simply reused a pre-existing input for _website_.
This is blogspam that basically just repeats the [Jetbrains blog post on the subject from last month]( http://confluence.jetbrains.com/display/PhpStorm/PHP+Code+Sniffer+with+Symfony2+Coding+Standards+Integration+in+PhpStorm+-+Symfony+Development+using+PhpStorm).
by default the function returns null if you do not return something. &lt;?php $foo = myFirstFunction(2); echo gettype($foo); // NULL
The output from Igor's post appears to be generated by the Vulcan Logic Dumper, which is an extension you have to install. http://derickrethans.nl/projects.html#vld I have used it before with some success, but it is not perfect, nor very easy. Still, it allowed me to prove a couple of contentious points about certain function calls, so it can be worth it. :-) Good luck!
Also don't use close PHP tags unless you're about to write some HTML after it. Closing PHP tags at the end of files can only hurt you.
No, it's totally okay to not return a value from a function.
For quick testing, http://3v4l.org/ includes VLD output for PHP 5.5.
The short answer is "no," every function does not *have to* return something. As /u/diegosaintesteben said, functions without explicit "return" statements will return `null`, but if the function is generally used in a context where its return value is important you should try to return something for every case. In more detail, if you have a function like `initialize_warp_coils()` and what it does is go and change some values elsewhere, perhaps manipulating the attributes of the class it lives in, it doesn't need to return anything. You would generally call the function without capturing its return value, anyway, so there is no need. If there is some chance that `initialize_warp_coils()` could fail, you have two choices. You can catch that failure in the function itself and return `false`, or you can throw an exception. There are different schools of thought on this and the scope of that question is well beyond what I'm ready to type up for this answer so I'll simply say that it's up to you. If you elect to return `false` in case of catastrophe, it would be polite to return `true` when things work correctly. Now, if you have a function like `add_numbers($a, $b)` and it returns the result of adding the two numbers together, I can't even think of a reason you would call this without capturing its output. If you generally capture the output of the function, you should make sure to return an explicit value for every possible case. Explicit `return` statements will make your code more understandable and predictable. Don't rely on the default `null` return value. This brings us to the notion of "sentinel values." Given the function above, if you were to pass in something other than a number, there is no way your function can reasonably answer that question, and so you again have two choices: throw an exception (the generally accepted method), or return a value that could not possibly be a result of normal operation (like `false` in this case). You can probably spend the rest of the day today reading about sentinel values and exceptions. There are good points to be made on either side. If you are writing the application from scratch, you can just do what feels right to you.
I did not know this Jetbrains tuto when I wrote my post. It seems fitting that two articles that explain the same process are alike.
To expand on this. If you have a file like this: &lt;?php //Some PHP code ?&gt; &lt;--- Whitespace after the closing tag. And then the above file gets included somewhere. This will result in serving of the whitespace to the user browser, and then any calls that handle headers will fail as you have already returned the body. So not having closing tags fully fixes the issue, and does not have any adverse side effects.
Of course, follow PHP FIG standards is a good practice. Maybe I'm wrong but I think Symfony2 don't respect this standards and the (deleted) OpenSky standards was more permissive than PHP FIG and closer to Symfony2 standards.
&gt; a cost effective way This is where it falls down.
I'm trying the honeypot method, I implemented yesterday around 6 and I'm still getting spam.
Then should I keep it blank?
Yup
There are tons of ways you could do that. Personally, I would implement [ArrayObject](http://php.net/manual/en/class.arrayobject.php) , and create a toXml() method
~~Could you provide a case where you'd want to keep chaining past a method expected to return a value (other than $this)?~~ I'm silly, ignore me. 
All of this is pretty poor practice. Really just for fun.
You know what, nevermind. I should have looked at your example code properly rather than just glanced at it. You did provide a use case for this. 
Use monad-like chaining. Er, I'm not going to attempt to write a solution, but you want to pass things around as chained callables, which then get evaluated and any 'falsy' evaluation cuts the evaluation of the rest of the chain, and just returns false. Doug Crockford has a pretty good talk: https://www.youtube.com/watch?v=b0EF0VTs9Dc
I thought this was /r/MTB and was thinking [but that's what this is for](http://www.amazon.com/s/?ie=UTF8&amp;keywords=chain+breaker+tool+bicycle&amp;tag=googhydr-20&amp;index=sporting&amp;hvadid=43853952329&amp;hvpos=1t1&amp;hvexid=&amp;hvnetw=g&amp;hvrand=14120444265918152218&amp;hvpone=&amp;hvptwo=&amp;hvqmt=b&amp;hvdev=c&amp;ref=pd_sl_3wzb2cygn3_b). Anyway, made me think of [this](https://gist.github.com/aholmes/8319662) and [this](http://msdn.microsoft.com/en-us/library/ms173224.aspx).
I could've sworn having read the opposite was not only true, but also part of good programming principle. I can't find that link though.
Symfony follows PSR-0, 1 and 2: http://symfony.com/doc/current/contributing/code/standards.html
Maybe I'm blind, but I couldn't find a standard for handling multi-line conditional test. if ((foo === true) &amp;&amp; (foosgonewild === false) &amp;&amp; (!is_null(someFunctionCallThat($param1, $param2))) Or if ( (foo === true) &amp;&amp; (foosgonewild === false) &amp;&amp; (!is_null(someFunctionCallThat($param1, $param2))) Or something else??
Not sure if it's just a typo, but it's "opcodes", as in "operation codes", not optcodes. If you're googling around for optcodes (and Google doesn't correct it), it might add to your problems. 
Thanks I actually always close the PHP tag in just PHP files. This is a brilliant tip thanks, will start using this in the future.
I would go for NASM, it's going to hurt but you'll be a much better developer afterwards. 
Annoyingly, you have to pass references to the object that the 'monad' should be operating on: class UserMonad { /** * @var User */ private $user; private $test; public function __construct(User $user, $test = null, callable $previous = null) { $this-&gt;user = $user; $this-&gt;test = $test; $this-&gt;previous = $previous; } function can($test) { $previous = function () { return $this-&gt;user-&gt;test($this-&gt;test); }; return new UserMonad($this-&gt;user, $test, $previous); } function resolve() { if ($this-&gt;previous) { $callable = $this-&gt;previous; $result = $callable(); if ($result == false) { return false; } } return $this-&gt;user-&gt;test($this-&gt;test); } } class User { function can($test) { return new UserMonad($this, $test, null); } function test($test) { echo "Testing $test".PHP_EOL; if ($test == 'read') { return false; } else { return true; } } } $user = new User; echo "Test 1".PHP_EOL; $writeAndDelete = $user-&gt;can('write')-&gt;can('delete')-&gt;resolve(); echo PHP_EOL; echo "Test 2".PHP_EOL; $readAndWrite = $user-&gt;can('read')-&gt;can('write')-&gt;resolve(); Outputs: &gt; Test 1 &gt; Testing write &gt; Testing delete &gt; &gt; Test 2 &gt; Testing read i.e. the read cuts off the rest of the evaluation. If I was forced to use this pattern, I'd probably separate the 'monad-ish-ness' from the User because it just doesn't belong in that class: class Permission { /** * @var User */ private $user; private $test; public function __construct(User $user, $test = null, callable $previous = null) { $this-&gt;user = $user; $this-&gt;test = $test; $this-&gt;previous = $previous; } function can($test) { $previous = function () { return $this-&gt;user-&gt;can($this-&gt;test); }; return new Permission($this-&gt;user, $test, $previous); } function resolve() { if ($this-&gt;previous) { $callable = $this-&gt;previous; $result = $callable(); if ($result == false) { return false; } } if ($this-&gt;test == null) { return true; } return $this-&gt;user-&gt;can($this-&gt;test); } public static function checkUser(User $user) { return new Permission($user); } } class User { function can($test) { echo "Testing $test".PHP_EOL; if ($test == 'read') { return false; } else { return true; } } } $user = new User; echo "Test 1".PHP_EOL; $writeAndDelete = Permission::checkUser($user)-&gt;can('write')-&gt;can('delete')-&gt;resolve(); echo PHP_EOL; echo "Test 2".PHP_EOL; $readAndWrite = Permission::checkUser($user)-&gt;can('read')-&gt;can('write')-&gt;resolve(); /dat wall of code. 
Thanks for the confirmation, I suspected as much How did you mitigate this in the end? Ive seen various regexp's which sanitise incoming strings, but theres reports they can crash php on large blocks of text
Yeah, it's not only about headers. If you're developing anything that outputs in a binary / specific format, this type of thing can destroy you. I had a very long talk with one of my developers after I spent many hours trying to figure out why my dynamically generated images were not rendering. And FYI, this doesn't just apply to whitespace at the end of the file. After a regex search for php closing tags with whitespace turned up nothing, I found he'd accidentally left a space at the very beginning of the file and didn't think it mattered (since the rest of the application worked just fine). 
Chaining can be kind of tricky. I took a different approach by handling chained methods with objects and __call magic. There are probably some other similar solutions out there but [here](http://gist.github.com/jgswift/93da32faa228535ea4b4) is an abbreviated example from my package [jgswift/qtil](http://github.com/jgswift/qtil). The downsides are that it creates a lot of objects and you can't create links using reserved keywords. 
This is all correct, but I wanted to provide a simple example that would apply to most beginners. 
Comes down to whether you're ok with side effects and state...
Or you could just read it: &gt; The coalesce, or ??, operator is added, which returns the result of its first operand if it exists and is not NULL, or else its second operand. So you can do stuff like $x = $_GET['param'] ?? 'default'; instead of $x = isset($_GET['param']) ? $_GET['param'] : 'default';
Please see /r/phphelp or ##php on irc.freenode.net (as per sidebar)
i did a google search cant find.
Thanks for asking. I didn't realize the link out me in the middle of the page, and scrolling to the bottle didn't give me any useful info
Ah. In your example like Ruby's OR assignment operator ...... but I'm not sure that one chains as like the php rf/.
Which begs the question when you would ever want to use ?: over ?? ?: works exactly like ?? with the exception that it throws a notice in most cases where you would want to use it.
You have to wait for the coalesce operator, but I've used a coalesce function that works similarly for years. It's easy to write one.
I appreciate you've thought about it and made a conscious decision. I would go even further and make all classes final by default. The trouble with extensible-by-default is that you automatically opt into far more maintenance work. You shoulder yourself and your colleagues with a lot more uncertainty, and therefore work, down the road with this approach. In a lead position I would quite simply disallow the approach entirely; err on the side of *caution*.
Awww yisss. Gotta love changes that make code more terse and readable.
That's because `?:` was fundamentally flawed to begin with.
This is an implementation detail to account for PHP's lack of a true `void` type. Yes, it's true; yes, it's reliable; no, you should not code for it. You also can't tall if a function explicitly or implicitly returned null. Use explicit returns when you need explicit returns, and otherwise treat functions as having no return value.
php 7?, i don't know, that probably means 20 years from now
[For those of you having trouble accessing the website.](http://webcache.googleusercontent.com/search?q=cache:ZxOKiSoxHKEJ:phptest.club/t/roboci-run-travisci-builds-locally/170+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us)
don't use html inside your php functions?
Uhm... have you read the link in my comment?
In addition to ignoring `NULL`, this will also gracefully handle non-existing array indices. No more need to check `isset($_GET['id'])` to avoid a notice.
While I'm happy and appreciative that improvement are being made to the language, I can't help but feel that focus could have been spent on more useful features.
This is the first RFC I've seen in ages that I actually think is useful and helpful for PHP.
I would start calling one who understand this a (Senior) Software Engineer.
What would you then call a person I write about in the next post? Ubersenior? =)
I meant Software Engineer and (Senior) Software Engineer for the more experienced guy, like you :p
Well I did focus a lot on things that have a lot to do with Web, like networking and security, which would be kinda useless to somebody making a desktop game. So I couldn't generalize it under a "Software Engineer"
&gt; Threads vs Processes Vanilla PHP does not have threads. This isn't the first time I've had to bring this up on this sub, either. Next thing you'll tell me is that PHP has pointers, too (INB4: it doesn't). &gt; I’m unsure whether I should include functional programming here, since although it has become increasingly popular, especially after we got non=blocking I/O, but not everyone needs that. I think I understand that sentence, but I'm not sure. I think you're saying PHP is well-suited for functional programming because it has non-blocking I/O. Since what version has that been the case? Anyone reading along, if you want to do functional programming with non-blocking I/O, I suggest you learn Node.js with a functional programming library such as Underscore instead of trying it with PHP. &gt; HTML, CSS &gt; &gt; * Xpath &gt; * ... &gt; * Reducing page load time XPath can be useful, but not in a HTML/CSS context, AFAIK. XPath is normally used to traverse an XML document. If you're trying to parse HTML with it, you're probably doing something wrong unless you're scraping a website, begging the question: why are you scraping a website? Reducing page load times: you really think writing better HTML and CSS can reduce your page load time significantly? In my experience, long page load times are always created in the backend. If your page takes a long time to load, it's probably shitty PHP code or shitty database design / query optimization or shitty application design. Changing your markup or stylesheets won't make much difference. Also, this is me telling you that if you write your stylesheets in CSS, you're [doing](http://lesscss.org/) it [wrong](http://sass-lang.com/). &gt; Garbage collection and cyclic references I get why you're including this, but is it just me or are PHP scripts not supposed to take so much time that this becomes an issue? &gt; UTF8 support &gt; &gt; Regular expressions with PCRE &gt; &gt; Some cool CSS tricks =] &gt; &gt; Any branching model These go in your previous blog post, dude. You need to learn the difference between a junior and a medior developer. In that post, there are a lot of things that I think are much too advanced for a junior developer to know.
It depends on the type of game. Most desktop games have some sort of online functionality that makes it impossible to create without knowledge of network concepts. Also, I could argue that you don't need to know OOP to develop web applications. =D
In fact, this is not entirely true : https://gist.github.com/anonymous/5c69a0d859882e752d58
I included threads vs processes since I believe that this is fundamental computing principle regardless of its connection to PHP. Same goes for non-blocking IO etc. At first I actually wanted to include a NodeJS section, but I don't think I have enough experience in that field. The point is it's not really PHP-focused. I wanted to include both Xpath and Regex somewhere, but it's very hard to find a specific section where they would fit. So I put XPath into markup just because it can be used for DOM. "Reducing page load times" should be understoof as utilizing caching headers, uglifying, minifying, spriting images, loading js after dom, etc. I have to disagree on page load times being solely the backend problem. Especially when it comes to mobile where internet might be significantly slower. There is also the "rendering time", especially when there is a lot of JS involved moving things around. For example on slow connections gmail loads just fine for me, while even the simplest facebook page does so many AJAX requests back and forth that it makes the wait annoying. As for writing stylesheets in CSS, I included a "CSS preprocessor awereness" into the junior level post. Cyclic references become an issue when you start writing long-running cron tasks, so I thought they are important. I was thinking of including those things into junior level, but ultimately promoted them to middle. Perhaps I should move them back there, and move some stuff from there to here.
&gt; The point is it's not really PHP-focused. You should have thought of that before deciding on the topic title. &gt; "Reducing page load times" should be understoof as utilizing caching headers, uglifying, minifying, spriting images, loading js after dom, etc. I'd argue that those things have little, if anything, to do with HTML or CSS. Also, loading your JS after the DOM is ready? Talk about page load times... &gt; I have to disagree on page load times being solely the backend problem. Especially when it comes to mobile where internet might be significantly slower. There is also the "rendering time", especially when there is a lot of JS involved moving things around. For example on slow connections gmail loads just fine for me, while even the simplest facebook page does so many AJAX requests back and forth that it makes the wait annoying. I'd argue that *these* things definitely have absolutely nothing whatsoever to do with HTML or CSS, and fall into the application design category. When I said: "Changing your markup or stylesheets won't make much difference." I meant: "Changing your markup or stylesheets won't make much difference." and I did NOT mean: "Reducing the number of AJAX calls and improving your JavaScript code may make the page a lot more responsive for the user". Don't forget, the page has already loaded by the time you're doing DOM manipulation and AJAX calls. So by definition, those have nothing to do with page load time. Look, I see where you're coming from, but I can't read your mind. If you want to say something in a blog post, you need to write down what you mean, not something else. I can't respond to your thoughts, only to your words. What words you choose are part of your communication skills, and *that*, in my humble opinion, makes a good developer. The first reason is that explaining what you do and why it takes time is an essential skill for any developer. The second is that if you can't say what you mean in English, then I can't trust you to write what you mean in PHP. This may sound like a weird nonsensical point, but all bad developers I've ever come across have in common that they're bad communicators as well, and all of those write crappy code that I have a such a hard time grokking, that I need to do it over to see what's going on. I'm convinced that if they could communicate with others better, they could communicate with themselves and with the PHP interpreter better. &gt; As for writing stylesheets in CSS, I included a "CSS preprocessor awereness" into the junior level post. Let me reiterate: if you're not writing your stylesheets in CSS, you're doing it wrong. Save time and effort, both initially and in the long run, and go for a preprocessor. Being aware of them isn't going to save you all that trouble, using them is. &gt; Cyclic references become an issue when you start writing long-running cron tasks, so I thought they are important. Fair enough! I stand corrected.
The actual blog title says Webdev =) I but PHP by inertia in the subreddit)) Thanks ) I'll move some topics around, I guess I can move the page load times to an "optimization" group
I don't think that has support for php.
Actually, you should run php using php-fpm and use mod_proxy_fcgi if you're determined to use apache. Better yet, ignore apache and stick it behind nginx.
`?:` operates on values that are castable to false, where `??` is for null only. Example: false ?: 12 // 12 false ?? 12 // false 
Fuck yes!
No, many functions should not return anything. This is central to the idea of [Command Query Separation](http://martinfowler.com/bliki/CommandQuerySeparation.html), where any function that does return a value should cause no change in state (queries), and any function that causes a change in state shouldn't return a value (commands).
Writing the patch for this feature took a whopping 15 minutes, so I don't think you need to be particularly concerned about it taking focus away from other features ;)
Sure. Use a web request interceptor like fiddler, record the requests and responses that occur when you sign in manually, then recreate it with curl. Baby stuff.
&gt; fiddler Hey no reason to be mean about it. lol. Thanks though I'm looking into it. 
Definitely not taking crazy pills. Functional tests are important, especially at system boundaries or boundaries to third party code. In your ChatroomNotifier example, I would not mock Guzzle. I would write a test that proves it actually sends a notification to the chatroom, because this class lives at a system boundary where it's sending stuff to the outside world. There's no way you can know it works unless you check that it really does what you expect. But say you have a UserRegistrationService, and every time a new user registers, you want to send a notification to the chatroom. You would mock the ChatroomNotifier in this case, and set a mock expectation that `sendNotification` gets invoked when the UserRegistrationService is supposed to send a chatroom notification. It's safe to mock here because you've written a real test for the ChatroomNotifier that proves it works. You're also insulated against change to the ChatroomNotifier. Maybe you switch to Campfire instead of HipChat. You only need to update the ChatroomNotifier test, any test that uses the mock is still valid. Same deal with repositories. *Always* integration test repositories against a test DB. There's absolutely no other way of knowing that some custom query scope returns the correct result set without hitting the database, because you are relying on database features to get the right results back (where clauses, ordering, etc). Don't inject a user mock like you mentioned, that is absolutely not the right approach and leads to writing tests that don't test anything, exactly like you mentioned. But any other objects that use the repository can use a stub or mock in their own tests, since now the repositories have been properly integration tested and you know that their methods actually interact properly with the database. There's an obsession with test isolation that can be extremely confusing for people just getting into testing. I know it was for me, I actually gave a talk about it these sorts of struggles at Laracon EU (giving it again at TrueNorthPHP if you happen to be a Canadian! :) ). You shouldn't isolate for the sake of isolation itself. The most important thought going through your head when writing a test is "how can I prove this works?". Then write the test that you think is convincing proof that the code you are writing does what it's supposed to. Isolation comes with it's own benefits and tradeoffs, but it should *never* be a higher priority than writing tests that you feel confident in. Don't feel guilty about using real collaborators in your unit tests. There's huge benefits to it if they are cheap to make. Some people will say it's not a unit test if your not using a test double for everything that isn't the class under test but I completely disagree. No one would ever tell you to mock a DateTime object in a unit test. Don't feel guilty about testing against a database either. Some purists will tell you that if your tests have to hit the database that you're code is poorly designed, but that is unfair bullshit, especially for people who are trying their hardest to learn how to test. Saying that being able to write perfectly architecturally pure code is a prerequisite for being able to write tests is a damaging mindset. Writing any tests is better than writing no tests, and in a lot of cases it is absolutely not worth the trade offs in code complexity to avoid hitting the database. If your application uses an ActiveRecord ORM like Eloquent, it's not easy to avoid hitting the database in a test. That doesn't mean your code is bad or your tests are bad, it just means that you value the simplicity of the ActiveRecord API for your project more than you value sub microsecond tests. That's a perfectly valid trade off, and one that I make all the time. This talk is an excellent reference for writing good tests: https://www.youtube.com/watch?v=URSWYvyc42M It's Ruby but the principles are the same in PHP.
upvote this. I'm also new to unit testing and have the same confusion as you. Testing real data makes more senses for me. Would like to hear some voices from experienced ones too.
I care more if this allows me to not have to use isset for arrays
The only thing I would add to this is if OP is trying to add tests to a codebase that is previously untested, then the code might not be set up very well for unit testing. IE, the separation of concerns may not be terribly strong, and that's something that really shows through when trying to write tests. In order to properly test new code, I often have to make some structural changes that result in better overall organization.
Not to mention you've also contributed some hefty changes to PHP 7, eh?
Thanks for this. It's often hard to tell if you're getting bad advice, or just the same trivial examples over and over. It makes so much more sense to only mock when you have a functional test covering the thing you're mocking. It seems obvious in hindsight, and probably why no one makes that point when presenting the topic.
The primary reason I use mocks or doubles: testing failure conditions. You want to be very sure that you handle failures correctly but since ideally your code works and your infrastructure is ideally reliable... how would you test the failures? The solution is to mock them and hard-code the errors; this should make your code take the path to handle the error.
Oh, this is another good point. Mocking to test error states is a good idea.
The article is called "Things a Web Developer Should Be Able To Grasp", so I guess it's quite alright like it is. There seems to be a confusion between "Some things a Middle level PHP webdeveloper" and just "Web Developer". A PHP webdeveloper is good in backend development, so CSS should be left out. IMO the difference between a junior and a senior is that the senior should be able to adapt quickly to a new (existing) project and understand its code when he needs to. Of course, that involves being able to use dark-magic-named software and development methods. Edit: better with new line
Say I'm a frontend developer. Well then the article is wrong to at least 75%. It should include the difference between frontend and backend or at least say it's for both (which is not the case). By the way, DOM shouldn't be in "HTML, CSS and markup" part. Nor in JS part. The DOM is just a document with 2 API : a CSS API and a JS API.
I wouldn't say its 75% wrong. Would you say that data structures and architecture patterns don't work for frontend? Obviously you don't need the SQL part, but being a "suggested reading" post, you can obviously pick only the suggestments you like. Yes, DOM shouldn't be in HTML, but I didn't one to create its own section with just one item there =) 
This sounds pretty pretentious and extremely uninteresting.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Factory method pattern**](https://en.wikipedia.org/wiki/Factory%20method%20pattern): [](#sfw) --- &gt; &gt;In [class-based programming](https://en.wikipedia.org/wiki/Class-based_programming), the __factory method pattern__ is a [creational pattern](https://en.wikipedia.org/wiki/Creational_pattern) which uses factory methods to deal with the problem of [creating objects](https://en.wikipedia.org/wiki/Object_creation) without specifying the exact [class](https://en.wikipedia.org/wiki/Class_(computer_science\)) of object that will be created. This is done by creating objects via calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a [constructor](https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming\)). &gt;==== &gt;[**Image**](https://i.imgur.com/cExuIUe.png) [^(i)](https://commons.wikimedia.org/wiki/File:FactoryMethod.svg) - *Factory method pattern in UML* --- ^Interesting: [^Abstract ^factory ^pattern](https://en.wikipedia.org/wiki/Abstract_factory_pattern) ^| [^Builder ^pattern](https://en.wikipedia.org/wiki/Builder_pattern) ^| [^Creational ^pattern](https://en.wikipedia.org/wiki/Creational_pattern) ^| [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ckusvg9) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ckusvg9)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
OR, as an alternative, we could not.
The technical stuff is easy to teach - especially in person. The non-technical skills are the hard part. 
Captchas are really 2000's. You could implement four things (from best to... not so good): - a CSRF-like-protection. Each time the page is served it has a new token and you check if it's stored in session. If not, it's a robot or a person testing your security. - a timer of X minutes. If you get a message and the timer (based on session) is still valid, the user wants to flood your site. Here on Reddit the timer is 10 minutes. - a dynamic question (like "What is X + Y", with X and Y being at least 2 digit numbers but turned around ("10" becomes "01"). Then in CSS you can reverse that order, so humans will see "10" instead of "01". - an IP based ban. Store the IP adress of every message in a database with their email. If a message is spam, block the IP adress.
`#symfony` on Freenode is a pretty good spot.
Is this what passes as Senior in the PHP world? And you guys wonder why people look down on PHP developers. I would expect any fresh Computer Science/Engineering or even BIS Graduate to know 90% of this. Basically everything besides what's under PHP and NoSQL.
will check it out) thanks
You know they're skipping 6, right?
We are very pleased to announce the release of Yii 2.0 RC (Release Candidate). You may follow the instructions on yiiframework.com to install or upgrade to this version. This RC release includes about 100 bug fixes and 200 new features and enhancements. It is a result of five months of intensive development since the prior Beta release. During this period, we have received a lot of help from the Yii community users. We hereby thank everyone who has contributed to Yii and made this release possible. You are the best! See full announcement at yiiframework.com.
One of the best things about programming is that there is no one definite way of doing things, but there are more efficient ways of doing certain tasks or coding certain algorithms. So you need to keep an eye out for what makes sense to you for what you need to do. This is a very [popular tweet](https://twitter.com/ID_AA_Carmack/status/53512300451201024) by John Carmack which helps you understand that people providing commentary about how you need to do things don't necessarily understand the entire condition of what you are building.
no i didn't know that, but thanks for updating me about it nobody liked my comment and i don't mean to be a troll but seriously, i just gave up with php about a year ago, and i've been learning node.js lately
Hey bro I heard Node.JS is dying, you should learn golang.
R u a ninja or a rockstar?
meh! Real programmers write web apps in c!
The funny thing about beliefs is that they're all inherently correct.
it's okay, i like node because i like javascript A LOT, not because it's popular
Are you serious? Of course there are violations on a codebase this size, that doesn't mean that they don't try to follow the PSRs… I gave you the link to the Symfony documentation, what more do you want?
Can you share yours? I've tried, but I end up with a function that adds variables to the global space when testing array indices. For example, after calling my own: echo coalesce($deep['array']['index'], 42); I will get `42` printed. But if I now do a `var_dump($deep);`, I get: array(1) { ["array"]=&gt; array(1) { ["index"]=&gt; NULL } } Thanks.
Thanks aequasi08. I'm currently looking for a ruleset.xml file that fits this standards.
I don't disagree with that. I'm just saying that Symfony is not fully meeting the standards. I'm not saying they don't try to do so. The PHP FIG standards are difficult to follow. That's why some of us chose to follow OpenSky standards. This repo is no longer available and I'm currently looking for an alternative.
Hah true)) We need a universal gauge of how much not a dick a person is =))) "senior notadick" =)
Mine would have the same problem, since it has to evaluate the array when passing it to the function. This is the one issue the ?? operator addresses that cannot be done any other way AFAIK. But every other aspect of a coalesce operator is easy to do in a function.
&gt; But integration tests are a scam This is such nonsense, I'm really saving it as an obvious failure to understand why we build software at all.
Well... not really.. For a start I don't actually like the whole Junior, Mid, Senior distinction - I find hierarchies lead to bad team feelings. Usually in a team it is pretty obvious who has more specific domain knowledge for a given problem so a functioning team of people who are not dicks will defer to that person for advice. A cross functional team will have different people with "senior" knowledge in different areas and labeling people doesn't really help with this. I mean is a pure php expert who doesn't get why tables are bad for layout in html any less senior than a html5 evangelist who knows everything there is to know about which spec and can recite caniuse by memory but couldn't cut a line of php code to save themselves? 
Great response! For anybody looking for a more I'm depth talk about what's explained above I'd also recommend watching [Integration Tests are a Scam]( http://vimeo.com/m/80533536) and googling/reading more about hexagonal architecture. 
The title of the video is sensational but it really does strike a good point. Its basically saying that integration tests should only exist at your application boundaries. IE, don't mock anything you don't own but also don't write integration tests for combinations of internal components. End to end tests are still good, but once you start testing internals in combination with other internals the number of tests required and how much value they actually provide drops of really fast. 
Well said. If you are insisting to stick with Apache, go the PHP-FPM route for sure. 
It certainly doesn't need it for PHP-FPM installs - when compiling PHP I only generate the FPM and CLI binaries as output. 
This is my biggest complaint with Laravel. Most of it is pretty great, but there are a lot of use cases where active record isn't quite right. I use simple mongo php, https://github.com/ibwhite/simplemongophp. Most of the time because I don't like the ORM model anything else I have tried attempts to force. 
When it comes to micro frameworks, I never go past Slim... good work though, the more choice for devs the better.
thanks, it is back now
Honeypot generally wont work if your form is already getting spam. If it is getting spam a bot already has the forms details and is submitting to it automatically. What you can do is replace a real field with the honeypot one, so if you have a field named "firstName" or something, then make that the honeypot field (the one the bot can't enter anything into), and then add another field that collects the real first name, that has the correct labels etc but has a different name.
If you don't have the budget for refactoring, how do you have the budget for the increased cost of maintaining bad code?
That's a silly question. I have the budget to get specific projects done. Not singlehandedly fix a ginormous program with millions of lines of code. No one involved with paying me gives a crap, and I need to eat. 
If you could share the PHP code you're using, that'd be helpful. It sounds like you're capturing the data, but what you'll need to do is store it in a database (MySQL or Postgres will do) and then query that database to return it from the index.php file. Very important in these cases that you're filtering / sanitizing the raw input to avoid any injection attacks - have you considered using a PHP framework to achieve this? It could speed things up for you and also make sure you're doing the security side of things correctly.
Thanks for the reply. Here is my code: &lt;form action="db.php" method="post"&gt; &lt;input type="text" name="name"&gt; &lt;input type="text" name="number"&gt; &lt;input type="text" name="age"&gt; &lt;input type="submit" name="Click Me"&gt; &lt;/form&gt; &lt;?php $number = $_POST['number']; $age = $_POST['age']; print("&lt;h1&gt;$name&lt;/h1&gt;"); print("&lt;h1&gt;$number&lt;/h1&gt;"); print("&lt;h1&gt;$age&lt;/h1&gt;"); ?&gt; I can capture this form data and display it on the same page but don't know how to post content to another page. Do I need to put this form data into a database to achieve what I want? 
[built with laravel](http://builtwithlaravel.com/)
That's correct, you'll need a database to achieve this. But it looks like you're sending it to a database as your form action="db.php" - can you share the code for your db.php file? 
db.php is actually the name of the file this code is in. So it runs and displays on the same page from one file. I was messing around with this and thought I could easily write this data to my front page but couldn't figure it out. Looks like I will have to brush up on Mysql
I feel the same way about repository tests. I prefer repository tests that actually hit a sqlite in-memory db, which is migrated and seeded by the application code. It's not a true unit test but it is much more valuable IMHO because it will also test whether or not it runs into problems with unique keys, not null, foreign key constraints, data type restrictions, etc. Front-end tests (we call them acceptance tests) will also catch that but will get more obscure error messages. **In repositories, unit tests will tell you if you're doing what you intend to do, but they will not tell you if what you're intending to do will work.** We do, however, mock pretty much everything for controller tests. The only reason we write controller tests is because our controllers are being shared between multiple applications. We want to be extra sure they do what we intend.
Yep, setting up a database is going to be your best way to store / retrieve these submissions. I personally use an ORM for all DB interactions, which makes things easier and stops you from writing raw SQL (a habit you shouldn't get into). Check it out: http://idiorm.readthedocs.org/en/latest/ If you're looking for a quick and dirty solution, and don't expect too many form submissions you could potentially store the data in your file system as a .json file and then just use json_decode / json_encode to interact with the file contents. Not ideal though.
I am not sure why extending PDO is bad idea. I have seen in Aura the PDO class is extended https://github.com/auraphp/Aura.Sql/blob/52a9f7dba31749f3bf7c6dbdaad85b1ce0adaab5/src/ExtendedPdo.php#L22 . I am not seeing the whole discussion , but a release note points a few things https://github.com/auraphp/Aura.Sql/releases/tag/2.0.0 . May be it may help you. Have a look into the github issues or PR which have a big discussion on this iirc.
Sorry for the late reply. I was mentioning about your usage of $_SERVER inside the class https://github.com/alash3al/Horus/blob/91e63fee2720c464f46e76521ce847eb3b3c5ef3/Horus.php#L1249 . If you are passing the $_SERVER to constructor that will be nice is what I meant. Thanks
It depends on what the responsibilities of your Database class are supposed to be. If it's purely for handling a database, no specific table queries, it makes sense to me. If you want to actually place methods with queries in it, then extending PDO likely isn't appropriate. What do you plan on doing with it?
So for protecting against SQL injection, I know you're supposed use PDO and everything, but can someone refer me to an explanation of exactly what level of security is achieved/what exploits are possible if I just used mysql_real_escape_string on every variable in my queries instead?
Why not?
mysql_real_escape_string will work fine as long as you use correct character encodings and use ' for quoting in queries (i.e. "SELECT id FROM foo WHERE name = '$name'"). Check out [this](http://stackoverflow.com/a/12118602) and [this](http://stackoverflow.com/a/23277864) for more information.
Glad to see the encryption related code is in better shape now.
Unit testing is good. Unit testing is great! It's needed. But for simplicity, I keep my code as simple as possible, obviously. Most of my code is literally "Fetch from dB and pass into template" or "accept from form if valid, then pass into dB". Unfortunately, I haven't found a way to mock actual data, just functions. So what should I be testing?