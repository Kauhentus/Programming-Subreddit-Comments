This is a great article, as I said in my other comment I spent my career doing this and you've pretty much hit every major point. Off the top of my head I could not think of a single thing I would act. Wonderful overview of the subject! The only thing I would say is perhaps include some examples, however with refactoring I find it is very hard to construct an example that isn't overly contrived but also not overly complex.
This is nice too http://composer.json.jolicode.com/
This is really unfortunate as it seems that even the upcoming 18.04 Ubuntu will still ship with same prehistoric 1.1.2
it reads more like a pep talk than advice. &gt; You can do it champ, one line at a time!
Whenever I see "legacy code" under discussion, my mercenary heart compels me to mention my book on [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp). Sitepoint had [very nice things](https://www.sitepoint.com/modernizing-legacy-applications-php-review/) to say about it as well.
Because you cannot add comments to json, I tend to add extra line breaks to separate framework dependencies from business code dependencies. This feature would rearrange my json file. My guess is that use-cases like this will keep this optional.
I think it's a polite way of saying "Semantic Versioning is a fantasy".
&gt; How do you sell your clients Bolt instead of Wordpress This hasn't been an issue because most of our clients don't know or care what runs their website, they just want the end result. But if a client knew they specifically wanted Wordpress I would just use Wordpress. &gt; How do you compare Wordpress to Bolt Bolt uses a modern design and modern technologies, Wordpress will forever be a beautiful pile of hacked together stuff. If you learn Bolt you are learning good concepts for a developer to know moving forward. If you learn Wordpress you are learning Wordpress. Bolt is intentionally designed like a modern framework, Wordpress is more something that organically grew and a lot of it is not really designed at all. So you end up needing plugins to do basically anything. &gt; What are some good extensions that you are essential to bolt It has lots of things included, but I would recommend Menu Editor if end users need to edit the menu. &gt; How much time do you take to develop a website 4-12 weeks or more? The basic site can be put together nearly instantly but of course the work can continue for months. &gt; Any Good tips to someone learning bolt. 1) Use the documentation 2) Use discuss.bolt.cm 3) Use the slack channel, everybody is very friendly 4) If you need to do anything advanced, realize that it's all based on Symfony/Twig and there's tons of resources for those technologies 
Thank you so much fot your response.
Now, PHP 7.2 released. http://php.net/ChangeLog-7.php#7.2.1
&gt; This is best explanation of what's dangerous about autowiring I've seen LtAramaki if you are reading this, come back! I liked reading your comments. Nooooo /u/ltaramaki is gone? How recent is that? 
That's because you didn't read it. Aside from the OS package names containing the word "laravel" (because most of them are wrappers around other libraries, specifically for the framework) it's hardly mentioned.
&gt; LAST AUDIT: December 2017 By whom? What are their credentials? Where is the audit report? What was being audited? What failed the audit? Have the fail fixes been audited again afterwards? 
You desperately need better documentation. So far I've only looked at your roles middleware. - intuitively I would expect that requiring two roles would require the user have both of those roles. If the user has any one of the roles you treat that as a successful check. - you should load the roles using whereIn instead of loading them one by one. - you should pull the user from the `$request` object instead of using the `Auth` facade. The global facades are bad practice and should be avoided for non trivial applications.
&gt; ext-mcrypt - Speeds up some crypto operations uhmmmmm. There is a very good reason PHP killed that ext.
Sure, a typo in the post which happens to be a real word so wasn't caught in spell checkers. I suppose the OP isn't native English speaking (seeing the Czech domain TLD). Is that really a deal breaker or something worth commenting here on Reddit?
One of the useful aspects is that someone else has at least looked over the code. It's helpful for fixing latent bugs once the author is no longer employed.
sold!
First of all, I'm going to assume your project is a sensible one such as a Patreon or Etsy Clone (eg a commerce application) and not a project to setup something like an online bank or a bitcoin exchange. In general, the advice given in the link at the end of this post https://www.reddit.com/r/PHP/comments/7nws8c/what_are_the_constraints_to_build_a_site_that/ds58cpu/ will get you a fair way in building this in a sensible manner. I would seriously consider using an event sourced ( https://www.youtube.com/watch?v=JHGkaShoyNs ) architecture for parts of the system involving transactions between users as it provides a free audit log of everything that happened, which will stand up in court should you need it. If you need further guidance, I consult, I'm not cheap, but if this project is serious you should have the budget available for that.
**Multiple inheritance** Multiple inheritance is a feature of some object-oriented computer programming languages in which an object or class can inherit characteristics and features from more than one parent object or parent class. It is distinct from single inheritance, where an object or class may only inherit from one particular object or class. Multiple inheritance has been a sensitive issue for many years, with opponents pointing to its increased complexity and ambiguity in situations such as the "diamond problem", where it may be ambiguous as to which parent class a particular feature is inherited from if more than one parent class implements said feature. This can be addressed in various ways, including using virtual inheritance. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
`packages.sury.org/php` is quick. Debian package have been updated.
Why would you ever accept to work at a place that is using a blocker?
Basically correct. Symfony 4 will throw an exception if isValid is called on an unsubmitted form. Symfony 3.2/3.3/3.4 will trigger an error. Symfony 3.1 and earlier are will just return false. Can of sad because the article is built on 3.3 but I guess the author did not make the effort to remove all the deprecation and such. I'm guessing this was actually written some time ago.
Looks like a nice project, thanks for sharing.
&gt; An alternative would've been to publish as HTML / Markdown / some other "live" format that people can bookmark and will always see the latest version of instead of a downloadable PDF. Hi AllenJB83, the content is already also available online as a HTML website served live; (e.g. http://books.goalkicker.com/PHPBook/?viewpage ) when you click the HTML icon on the side; the other option is the downloadable PDF
By me personally, by one of my employees, and by an external penetration tester. I've been doing penetration testing and security work for over a decade. Feel free to conduct your own background checks or whatever. In my experience if an audit doesn't fail then it's not a successful audit, and open sourcing the project is a kind of audit in and of itself. I've already gotten great feedback from the community. I'm here to learn, if you feel you're better suited to take a gander then please, be my guest.
I'd dig to hear what you'd suggest as an alternative solution.
Amazing feedback, this is exactly the kind of thing I need. Thanks so much
Perhaps submit a (polite) PR helping fix it if you wish? https://github.com/mhujer/blog.martinhujer.cz/blob/master/source/_posts/2018/2018-01-05-17-tips-for-using-composer-efficiently.md
Agreed. Worth it, especially for noobs
Yeah, you should be running `composer install` *way* more often than `composer update`.
&gt;Public Key Pinning Extension for HTTP (HPKP) You could probably save yourself the effort here. This extension is on its way out and will probably be dead by the time you get anywhere with it.
It's great to see so much of you and your teams work benefiting the community. I've used several of you packages myself. Kudos to you and the Team. BTW I love the newsletter. Useful and concise. 
&gt; We specialize in creating Laravel applications for our clients Looking at your clients, I can't believe that they'd give rats ass what their website is build with. When all you have it a hammer, especially your all time favourite hammer... 
You clearly haven’t looked at Spaties work
I'm not discussing the merit in his "libraries". No one has brought that up except for you. Is it always this hard for you to stay on topic? I know it can seem difficult at first but keep trying and I'm sure you'll manage.
Even though I do not use the spatie packages myself (working primarily with ZF &amp; Symfony, and not having used any of your framework agnostic packages yet), it was an interesting read and would like to applaud you for the effort you and your team put into them. The effort and time put in should not be minimalized for any reason, as everyone benefits from it. Kudos. :)
There is also open source alternative which is mostly compatible in their api. I'm talking about [Mattermost ](https://about.mattermost.com/)
Why would this be painful in Symfony?
Who was the external auditor? Where is the audit report? What was being audited? What failed the audit? Have the fail fixes been audited again afterwards?
Try codeanywhere.com
[prompt 2](https://panic.com/prompt/) "It’s the best SSH client for iOS." SSH in to a real computer and use vim or whatever you like.
http://solesignal.com/draftcode/
I have a keyboard. I will check it out
Promising app but I find the file management a complete nightmare. Pretty good for code playground testing though.
If I remember correctly the Sololearn e-learning apps has a PHP course that lets you write and test code (I’m guessing it runs on a their servers rather than a local virtual server on the iPad).
jailbreake it run apache and php :P or http://solesignal.com/draftcode/ https://www.sitepoint.com/is-it-possible-to-write-and-run-php-code-on-an-ipad/ http://www.becomekodiak.com/kodiak-php.html
&gt; all i can say is how i do it, first no remote dev gets hired without having worked on a remote team for less than a year. they must have a track record of remote experience been burned too much on that one. I've never had a fully remote position. I'd like one someday. Right now I work partially remote, usually 10 to 20 hours a week, e.g. I'll leave at noon and finish the day from home, or work full days from home. Just to get a perspective on the many employers who require remote experience for remote jobs, does my partial-remote work count?
I'm working on a severely outdated legacy project, and there are plans to spend most of this year (and probably next year, even though that hasn't been planned on by PMs or the client yet) rewriting it. I have reservations about doing a complete rewrite, even though the it would require at least the same amount of time to restructure and modernize the code. At least, as a part of the rewrite process, we'll be doing a full review of all the functionality and essentially determining, all over again, what the clients needs are in order to implement them again, rather than studying the existing code and trying to do a bug-for-bug, feature-for-feature rewrite. So functionality will change, some added and some lost, but the delivered product should still meet their needs.
&gt; One of my favorite tests that I ever received in an interview was looking at some code and identifying its bugs and flaws. IIRC it had an unescaped SQL string with user input, database query inside a loop, a few misspelled variable names, a branch that could never be reached, some incomplete type checking, and some other problems. I think that was an even better review than asking a candidate to do some assignment. My current workplace also uses this method, although as an addition to a regular coding assignment. It can get quite tedious to do these assignments, especially if I'm interviewing at multiple companies at the same time. Doing a code review instead can be a welcome change. It can also fairly accurately determine the knowledge level, as well as communication skills.
You could consider alternatives such as [PAST](https://github.com/paragonie/past) or [Branca](https://github.com/tuupola/branca-php) instead of JWT.
Head off to backfire.io and read up 👍
Maybe tideways? 
Totally agree with Asian/Indian developers from a Western point of view. In the past we failed quite a few big projects because of that. You MIGHT get one that can be real with you as tell it like it is, but most will say "yes yes I understand" and when the deadline comes nothing is finished. Only way to deal with it that we found, was to have in-house devs making the tests/requirements, get two parallel offshore teams to do the code, and run or timeliness based on the actual unit tests... Ends up more expensive than if you pay for an office and hire locally.
Try [Webgrind](https://github.com/jokkedk/webgrind), it’s by far the easiest of the profiling viewers to understand (Blackfire is just incomprehensible even though it shows the same data). It’ll run on your localhost. The bottlenecks are at the top. Click a row to see where it’s called from and what it calls, then look at your code to see what’s causing issues. It may be that a function is being called many hundreds/thousands of times when you only need to call it once and keep the result in a variable. For frontend there are many “speed tools” out there. You can run “audits” from within Chrome Dev Tools. Don’t take everything they say as gospel though - read the advice, understand it and decide whether it really applies to you. 
Peer-review is a big part of it. I think our teams work well because we're all very comfortable with each other &amp; work together regularly. Having a slack-channel where questions can be asked &amp; keeping the timezones of your workers close if they need to collaborate in real-time. I'd suggest hiring individual contractors over outsourcing work en-masse (to a firm or what have you). This will help ensure you always get the same set of eyes and benefit from their prior knowledge of your code-bases.
The first tier paid account is one of the cheaper I've seen. You don't get access to the automation integration but for a fraction of the price you get access to their full profiler, so it's still appealing. From experience a single dev is definitely able to maintain profiles without the file-based configs. On a team their 2nd tier plan is definitely worth it.
&gt; backfire.io Ha ha! New marketing strapline: "use Backfire profiling tools if your app is blackfiring on you".
Which part of the PHP manual would you recommend for learning about performance profiling? 
&gt; By me personally, by one of my employees, and by an external penetration tester. I've been doing penetration testing and security work for over a decade. Feel free to conduct your own background checks or whatever. I would focus on the results of the external penetration tester. While a good quality control measure, you [cannot](https://paragonie.com/blog/2017/06/why-you-want-paragon-initiative-enterprises-audit-your-code#code-audit-in-house) expect people to trust in-house audits. It doesn't matter what your background is, even I'm not exempt to this rule, and I rewrote [most of a cryptography library in PHP with no ill effect](https://github.com/paragonie/sodium_compat). &gt; In my experience if an audit doesn't fail then it's not a successful audit, Yes and no. I've done audits where I found zero vulnerabilities, but I was able to identify areas where the product could achieve the same level of security while being more useful. (Some of these suggestions have been generalized as blog posts months/years later i.e. [this](https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql).) If I find zero vulnerabilities in an engagement, I don't just say "Audit results: Not vulnerable". I roughly explain the security measures the code has taken and explain why I believe it is secure. If the scope was limited, I'll also include caveats (e.g. "This is only secure if GD and wkhtmltopdf are secure as they are used by the app, and an audit of these dependencies may uncover new risk factors"). &gt; and open sourcing the project is a kind of audit in and of itself. This sort of sounds like you're implying a variant of the "many eyes" hypothesis: "Yeah it's never undergone a paid audit, but it's open source, so good enough right?" I would caution ***everyone*** from thinking this.
Check out [php-spx](https://github.com/NoiseByNorthwest/php-spx) for profiling php code. Chrome has perf tools for JS: [https://developers.google.com/web/tools/chrome-devtools/rendering-tools/](https://developers.google.com/web/tools/chrome-devtools/rendering-tools/)
HPKP is dead. Long live Expect-CT!
This really comes down to what you are building. Programming logic aside there are tons of factors that effect stack performance. How much data are you transferring? How many requests? Which requests have latency? Is your web server tuned for production or dev? Is APC or OpCode enabled? how much memory did you give php? Can you use a front end proxy to cache some of your hits to free up resources on your application layer? Will a CDN help for static assets? Is your database set up for production or dev? Does it have enough memory? Is it on the same server as your web server or does it have it's own dedicated server? How about an application level cache? Redis and Memcache can prevent a ton of database calls if incorporated correctly. Blackfire.io is great for tuning the internals of your program but many performance bottlenecks can be avoided by simply being aware that you can usually increase performance by reducing the number of overall web requests, reducing requests to your application server and preventing calls to disk. edit - I would also add that as a general rule you are better off not asking your database to do CPU intensive queries. 
Profiling locally is good, profiling in production is more valuable in my experience. Try a NewRelic free trial. I’ve seen projects struggle for months with hidden bottlenecks that were exposed within the hour of having NewRelic enabled. It consumes almost no resources and has saved me weeks of work, and my companies 10s of thousands of dollars a month. I currently pay them a few grand a month to have all our apps running with the enterprise tier of their monitoring, and it’s worth every penny. The devs can dive into bottlenecks as they happen, as many cannot be predicted from local development.
You might like http://c9.io It's part of AWS now, but let's you do remote coding via browser, so should be no problem for the iPad.
Because it doesn't include things to speed up development
spl_autoload_register(function($className){ $underscoredName = str_replace('\\', '_', $className); if (class_exists($underscoredName)) { class_alias($underscoredName, $className); } }); class Example_UnderscoredClass_Foo { public function seyHello() { echo "Hello"; } } $b = new Example_UnderscoredClass_Foo(); $c = new \Example\UnderscoredClass\Foo(); var_dump($b instanceof \Example\UnderscoredClass\Foo); var_dump($b instanceof Example_UnderscoredClass_Foo); var_dump($c instanceof \Example\UnderscoredClass\Foo); var_dump($c instanceof Example_UnderscoredClass_Foo); $b-&gt;seyHello(); $c-&gt;seyHello();
Same story here... NewRelic really is magic and it was a pleasure to have clients willing to pay for the enterprise tier with direct access to the NewRelic team... but I've never gone beyond the free trial for any of my personal sites. You'll probably get all the data you need with a weeks worth of reports from the free trial... maybe even just a few requests worth for obvious issues.
At the moment, there's nothing even closely as good around.
Gdpr is waaay more then just that. 
Helpful
The error reporting from php-v8js is pretty bad and I feel far more comfortable getting nodejs to do this work. We had a react app and a PHP backend to hook up so we just wrote a wrapper for calling node over http and posted over the built application and state, if all went well we get back the react rendered html string and if it fails (it never has yet) we send the state down to the client where it is rendered instead. Separating concerns and responsibilities like this made things much easier to explain to my team / clients / boss.
New Relic is what you need
libsodium - its standard from php 7.2+ anyway
Symfony 2
Thank you for your suggestion! It seems that I won't be able to use Symfony 2 because it needs at least php 5.3.3 and I am stuck with php 5.3.0
CodeIgniter 2 runs on &gt;=5.1.6. Doesn't make working with such an ancient version of PHP any less of a bad idea, though. Why are you stuck with it?
Hey, man! I'm in the same technical situation as you :D Just posted a question here too I don't know any PHP framework yet, but I would tell him that a well known framework would allow more people to understand the app because it is organized following a standard, and that if the app grows and you follow just your own ways, THAT would make the new interns work harder to understand a non-standard way to organize code. I think that's a pretty solid reason!
I am about to use Codeigniter, thank you! The reason for using it is that, where I am working, we're few, a shit ton of apps are coded on that version, and some of them are used 24 hrs. a day... Migration would be hell for everyone (I am saying this but I don't know anything migration work anyway) But they aren't open to the outside! Just intranet. So that makes it a little less worrying, I guess...
I might be on a different situation that OP because we will develop more than one app... but in my case... wouldn't that force me and my co workers (and future co workers and replacement(?) ) to organize ourselves in the same way? I just think about this but I didn't learn any framework yet
Hold on... why are you stick with PHP 5.3? Legacy work environment?
Back in the day I used Kohana 3. Not sure if it suits your PHP version requirements but if it does, I'd say it's a better choice than CodeIgniter. http://kohanaframework.org/ 
Yes, but the apps are not open to internet! That's something (?)
Hey , we recently came across your expertise in Instgram Api , and we would really like to talk with you on skype. My skype is aymankort1@gmail.com. By the way we work with big brands like world star , tutu, app valley , learn fact and more. 
Thanks, I didn't know about php-spx.
You can do a few things to make this more modular. You'd end up kinda half-assing your own small framework, but it's better than nothing, especially if your boss is a stickler about using existing frameworks: - Separate the database connections + queries. Put database connections in a separate class, and the same goes for the queries that correspond to a particular model. Imagine this is a method in your connection class: function connectAdminLogfiles() { $server = 'localhost'; $dbname = 'database'; $username = 'user'; $password = 'SFHJ6mX_VKUG'; $dsn = 'mysql:host=' . $server . ';dbname=' . $dbname; $options = array(PDO::ATTR_ERRMODE =&gt; PDO::ERRMODE_EXCEPTION); try { $link = new PDO($dsn, $username, $password, $options); } catch (Exception $ex) { return false; } return $link; } Imagine this is a method in a Model class dedicated to database-stored log files: function getLogs(){ $connection = connectAdminLogfiles(); try{ $sql = "SELECT * FROM log_meta;"; $stmt = $connection-&gt;prepare($sql); $stmt-&gt;execute(); $logs = $stmt-&gt;fetchAll(); $stmt-&gt;closeCursor(); return $logs; } catch (Exception $ex) { $_SESSION['error'] = '&lt;p&gt;ERROR: In getLogs(), in log_meta. Caught Exception \$ex&lt;/p&gt;'; return FALSE; } } Imagine this is a controller, albeit a non-object-oriented one: session_start(); include $_SERVER['DOCUMENT_ROOT'] . '/library/library.php'; if (isset($_POST['action'])) { $action = filter_input(INPUT_POST, 'action', FILTER_SANITIZE_SPECIAL_CHARS); } else if (isset($_GET['action'])) { $action = filter_input(INPUT_GET, 'action', FILTER_SANITIZE_SPECIAL_CHARS); } switch ($action) { case 'submit': //submit the user log in stuff. $username = filter_input(INPUT_POST, 'one', FILTER_SANITIZE_SPECIAL_CHARS); $password = filter_input(INPUT_POST, 'two', FILTER_SANITIZE_SPECIAL_CHARS); $sms = filter_input(INPUT_POST, 'three', FILTER_SANITIZE_SPECIAL_CHARS); sms(); $user = checkUsername($username); $passwordMatch = comparePassword($password, $user['password']); if ($passwordMatch === 'TRUE' &amp;&amp; $username === $user['username']) { $_SESSION['logged_in'] === 'TRUE'; $_SESSION['username'] = $username; $logs = getLogs(); include $_SERVER['DOCUMENT_ROOT'] . '/view/log-list.php'; exit; } break; case 'login': checkPrivilege(); // go to the login view. include $_SERVER['DOCUMENT_ROOT'] . '/view/login.php'; exit; break; case 'logout': checkPrivilege(); //destroy the session. session_destroy(); break; default: include $_SERVER['DOCUMENT_ROOT'] . '/view/login.php'; exit; } I know the code is shit and it's probably broken, not to mention these code segments don't even work together, but pay attention to the flow of data in such an app like this. It isn't the best framework, but it's something, and it's probably something your boss might be OK with using. Or, you could just... start doing things this way and get your coworkers on board with it, and hopefully your boss will be OK because it isn't as big of a jump as using a framework.
&gt; just a bunch of PHP scripts with HTML and AJAX Yeah, they are just that. They aren't well thought out, used in potentially hundreds of other apps, unit tested, engineered by smart and passionate developers or anything like that. Cause they are just a bunch of scripts.
There's https://github.com/FriendsOfPHP/PHP-CS-Fixer
Is the PSR not enough?
Sometimes code is too far gone to refactor.
Will this work in an HTTP process or is this php-cli only? I've been looking for something for a while that will allow us to call multiple APIs in parallel and wait from them to complete. When someone uses our REST API we in turn connect to both SOAP and REST apis so using multi curl is not a silver bullet. Would this work with that?
What /u/trpinoy means to say is, there actually are standards, but you may not be aware of them. They are known as PSRs, short for [PHP Standards Recommendations](http://www.php-fig.org/psr/). PSR 1 and 2 are the ones you are probably after. There is support for these in PHPCS, which is a linter you can hook good IDEs into, or maybe your IDE has support for this built in.
You could migrate gradually into a more organized MVC app, and you don't necessarily need OOP to do it either. https://symfony.com/doc/current/introduction/from_flat_php_to_symfony2.html
Don't do it! There is no good reason to stay on such an old platform. The only thing you are doing is creating new software that has to be replaced soon and adding to the reason to postpone. 5.3.0 is seriously old, insecure and lacking in language-features. Preferrably get a new server running modern versions to host your new application. It only has to run the code, you can still connect to databases on the current server if you must. If a new server (hardware or virtual) is not an option, check out other ways to run multiple versions on php next to each other. In any case, do not start a new project on php 5.3. You're holding back yourself, your company and the entire php community.
If you think frameworks can't "fall apart by any number of errors" you'd be in for a very bad surprise. Having a good architecture, and using best OOP practices is **not** the same thing as having to use a third party framework. In some ways, it's even contradictory, as many frameworks go for easier initial learning curve and flashy demos and neglect good architecture and OOP practice. I'm not saying using framework X is a bad idea. But if you don't know the framework inside out, and you don't know what concrete features you plan to use from it - beware. You might get into a bigger nightmare than the one you find yourself in. And you know what's fun? "This version of the framework is no longer supported. Here's a list of changes you need to make to your codebase to upgrade to the latest one". Go through the list. Make featureless code edits for a week or two. Test everything. Risk breakages anyway. Rinse. Repeat. That's life on a popular framework.
I had to dig through Laravel's source for a project, and I discovered it's unit testing is absolutely cargo cult (it tests nothing) for at least half the database. At the same time I found multiple methods with outright *wrong* PHPDoc descriptions and function, and many lingering leaks and holes into the architecture deliberately planted by Taylor to make it easy for himself in other components (for ex. did you know Application is a singleton? Doesn't look like one? Well ask the official components that use Application::getInstance()). So no, just because something is popular, doesn't mean it's "well thought out" and engineered by "smart" individuals. I mean I'd give you "passionate", but I wouldn't go as far as calling this smart engineering by any possible criteria.
amphp/parallel will work for you. If it's just plain http requests, multi curl or artax might be a better choice. 
I hope you raised a bug for the PHPDoc?
Please use /r/phphelp
What PHP version do you require for this? It's not specified in your composer package and I see some code to make scoping in closures work correctly in PHP 5.3.
It is in the Philippines, if you give US prices I will just get the 10% of it.
"Don't do that" but it's quite effective most of the time. Nothing stops him from going with **both** legal and technical protection. Also when was the last time you sued a company? Especially a big one? Let me tell you what happens. They say "OK, let's play chicken" and put their salaried on-hand lawyers at the task, and wait for you to spend all your money on lawyers and go bankrupt as they appeal every court decision for months and months and months, easily going into years. I think if you can stop someone not very technically inclined or sophisticated from doing this to you via technical means, then effing do it!
Ok thank you
The solution seems clear: use full-disk encryption and keep all login/SSH passwords/keys to yourself. This way the server is on their premise, but entirely under your control. Make sure to run this by a good server admin who can help you close any holes for accessing server content.
I did not know about this. Probably one good reason to use this over the guzzle one is the dependency on guzzle. The reason why I created this was because I wanted to remove my guzzle dependency for http calls and also I wanted to test my cURL client. Good to know tho!
Good one. I was pointing to 5.6 but would be nice to see what versions could also work.
In my opinion, if you've developed your package in such a way that it conflicts to have Guzzle as dev requirement, you're depending too much on implementations and haven't used PSR 7 correctly, or your package starts to reek of monolithic influences. If you're testing this within a project and have chosen an implementation for PSR 7 already, then I'd recommend using that over Guzzle. If they don't support some kind of Middleware, plugin or other means of reading out response data, which kind of reeks to me as well, only then would I consider using your library and still probably first consider writing an abstract test case that solves this, which I'd extend instead of the one from PHPUnit. I appreciate the effort you put into this, but I'm not too sure about the value it adds next to existing tools out there.
I may be incorrect here but... If you're using the latest version of PHP mysql connect and all it's subfunctions (_query, _fetch) don't exist anymore
Not directly related, but if you are looking for to get rid off Guzzle dependency check also http://httplug.io/ 
What result are you getting? What result are you expecting? As another poster has stated, mysql_* functions are deprecated and no longer recommended. Also, your code is vulnerable to SQL injection. Read up on using [prepared statements](http://php.net/manual/en/mysqli.quickstart.prepared-statements.php). It only requires some small changes to your code but makes it much safer.
Thanks for the feedback. The reason why I want to remove guzzle as dependency is because we do one very simple http call so no reason to have such a big library just for that. Now I know there is a library for something like this in guzzle and for projects using guzzle I would use it but just I would not add it to the project just to test a simple http call.
Starting new projects against such an old PHP version is a terrible idea. In PHP itself, there are known security vulnerabilities and issues in PHP 5.3 (and particularly if you use 5.3.0) that will never be fixed. Additionally, if you're using such an old version of PHP, you're likely using old versions of Apache and OpenSSL which are known to be vulnerable to remote information disclosure attacks including HeartBleed. Even if you don't care about such fundamental, serious, information disclosure security issues, you will have issues getting support for any problems you run into. Most libraries no longer support PHP 5.3 and will refuse to fix issues with such an old version. You'll also suffer in terms of performance - even from PHP 5.3 to 5.6, the language has substantially improved performance (for example, see [these benchmarks](https://lornajane.net/posts/2014/php-5-6-benchmarks)) - and PHP 7 improved an order of magnitude on that. If this is a commercial project, you will have issues hiring developers. I personally would refuse to work on a PHP 5.3 project unless part of the job included upgrading it to run on current PHP versions. Many developers will have countless issues as they try to use syntax and functions they are used to (even simple things like short array declaration syntax) only to find they don't work. Without a solid CI / unit test setup, these issues will almost certainly reach production before they are found. This will significantly slow down development, onboarding of developers and increase turnover as new developers who do join get frustrated and leave (which means you've then wasted time training them on your systems). You should abandon this plan and work to fix the issues you're having in more recent versions of PHP instead. I don't believe there should be any issues that you would have with more recent PHP versions (particularly PHP 5.6) which cannot sanely be fixed. I believe any such issues you are having are likely indicators of deeper bugs / issues with your application / code and attempting to ignore them in this manner will likely cause you more issues in the future (beyond the simple pain you'll experience trying to get support for PHP 5.3)
Why not just run multiple servers? One for PHP 5.3 apps, one for PHP 5.6 (or even better, 7.2!). Ideally you should be working to upgrade applications running on 5.3 to at least 5.6. With proper error reporting and testing in place, this is relatively simple. Note that CodeIgniter (esp. v2) has long been considered a terrible framework. I have personal experience and the way it encourages you to create and use libraries and models makes testing unnecessarily difficult. Selecting a framework based (almost) purely on what PHP versions it will run on is a terrible idea.
HTTPlug is wonderful.
The problem was here: You need to include("connect.php"); in the function.
I wonder if nowadays in C programming there are ways of tying together C code that seems more robust than a bunch of .c and .h files
You are correct, the `mysql_` functions are gone in PHP 7.
Good -- wasn't entirely sure because I haven't used those functions since i learned about PDO. also, the fact that i use xampp server and they only just got around to adding it earlier this year (or i only just noticed... :\ )
Please for the love of god: 1. Use PDO. mysql_* has been removed in PHP 7. 2. Force $id to integer right before the query or typehint it if you use PHP 7. Or prepare the statement and supply $id as argument.
love the God! my final function: function getPirkėjas($id){ include("connect.php"); $sql = "SELECT * FROM Pirkejas WHERE id='$id'"; $stmt = $conn-&gt;prepare($sql); $stmt-&gt;execute(); $result = $stmt-&gt;get_result(); $row = $result-&gt;fetch_assoc(); return $row["numeris"] . " | " . $row["vardas_pavarde"]; }
In a healthcare setting, the security aspect of using an established framework can’t be understated. While it may be “just some scripts” written by other people, most mature frameworks have out of the box functionality for handling passwords, sanitizing data, etc, and that stuff is really important for compliance. 
If you want to go with preparing, you have to use $id as argument: $sql = "SELECT * FROM Pirkejas WHERE id =?"; $stmt = $conn-&gt;prepare($sql); $stmt-&gt;execute([$id]);
Very nice of you to say that, thanks!
We're using the `pcntl` extension, which is disabled in the PHP apache module. So that would be a use case better fit for amp, as /u/kelunik pointed out. The use cases we see for our package is parallel parsing and rendering, which we don't need during HTTP requests. 
I am actually kinda glad that we don't have that. We do have the PSRs (which are **recommendations**) - which is a way more humble way to put what it is. StandardJS is just what one guy (or a few guys if you count the issues on Github) think to be standard guidelines, but it's not even a de-facto standard.
If you can't convince him yourself then you don't have a point.
I care a lot about performance. But I don't find full blown profiling useful anymore. It is useful to learn a bit what can be costly or to catch the obvious stuff, but the fact that xdebug is in between skews the results on finer grained levels. The best thing I can tell you about performance is to not look at PHP alone. The OS is also very important. Learn how linux handles IO and memory. You should monitor everything in question and grab metrics from the OS (or from your hosters monitoring). It is easier to find real bottlenecks top down, but sometimes hard to identify the root cause, if you roughly located a bottleneck i.e. in a specific controller, you can profile it. In the very end PHP is quite limited in perfomance optimization. Give you don't screw up hard, then you can only remove expensive execution branches aka caching. That is for me the very very last resort, I usually neglect from application level caching entirely and prefer to make things right up front. Tips * try to keep everything static in opcode cache * free -m - free+cached is what you actually use, don't exceed this for optimal performance. * iostat - iowait should always go towards 0, if not you're IO bound and should investigate. (considering we talk about a web app) * check out linux page cache Mysql is it's own beast. I seriously never found someone who could completely exlain EXLPAIN in every use case. Make sure you have indexes on your join and where fields. Check explain to make sure you didn't fucked up. Then use the query on production data. Frequently used queries should be close to 0, nothing else. If it's not, change everything necessary query, tables, indexes until you got there. It's not a good guide for a textbook but you will learn what matters. Mysql performance is also very dependent on the workload. Which in turn might require deeper understanding about server configuration and innodb habits. Read the manual if you wonder about something, there are many interesting things to find. Tips * indexes affect write performance, don't overdo * check out "show profile" * check out "information_schema" * configure slow log and use pt-query-digest
Saying something is audited doesn't imply it's perfect, it just means that multiple people other than the authors have reviewed and tested it and that this piece of shit is a slightly safer piece of shit than the rest of the shit. This can follow the best practices possible but it'd still be an insecure piece of crap because it's built on lumen, which relies on many packages, and it uses PHP, which as we all know if an insecure piece of shit, which in turn is mostly built on C (etc etc) all of which are extremely shit when it comes to being secure. Literally nothing is secure. It's all shit. Besides, auditing a starter kit is moot if the project(s) it's based on aren't secure (and as we know nothing is secure). The primary project using this base, however, has passed a PCI-DSS level 1 audit, so it's a fuck-ton less shit than a base install, which is the entire point of opening up this project. At least if some twat who knows nothing is building a shitty API used this piece of shit instead of another piece of shit they'd be a lot more secure than not using it at all.
&gt; Yeah it's never undergone a paid audit, but it's open source, so good enough right? Literally undergone very expensive, external paid audits, and the app it runs gets audited quarterly as part of PCI-DSS level 1 compliance. Open sourcing some code gets you feedback, and it's a _type_ of audit that should be used in combination with many other types of audits. Of course you shouldn't trust it blindly but it's good to get other eyes on it (as per your first point).
Thank you so much, I really appreciate this answer.
Programming like it's 2008 in 2018
Standard JS is not a standard; it's simply one of many sets of linting rules for JS. And it's not even the most popular; if there is a "standard" it would be the Airbnb style guide. &gt; why is there no such thing for PHP? I'm still wondering why there's such a thing for JS. :) It's very controversial and not widely used.
StandardJS is just recommendation also. With preconfigured linter and fixer.
Here's the problem. You're asking other people to help you convince someone of something under the blind belief that that something is absolutely better without understanding it yourself. Unless your boss is an utter retard, he is never going to be convinced of anything by you because he will see right through your incompetence and dissect your blind belief until it lies in pieces of *lack of understanding* on the floor. At least that's what I'd do.
This is why you should switch to PDO -- because then instead of including the whole file (Recursion can become a bitch with that) you can just pass the db variable through the function... ~~or better yet just use oop~~ 
You want to fix it, break it first. Show your boss attack vectors and proposed solutions. You sound like quite the noob, wanting to rewrite a production system with no experience. If the back end is really just 15 php scripts it would be trivial for an actual programmer to wedge that crap into whatever framework.
As someone pointed out, not all frameworks are created equal. I can't judge any code I haven't seen. I wasn't saying that a framework is worse than what they already have, because I don't know what they already have. I have not seen it. It could be the train wreck disaster that everyone immediately jumps to the conclusion it is, or it might be just fine. It's all about scope of project. Instead of "omg healthcare", maybe it's "Extremely local application with no outside attack vectors". Again, I have not seen it, nor am I drawing conclusions based on the writeup of a new programmer trying to cut their teeth in an internship.
Two programmers with the same framework will still end up doing things differently enough. With that said, try out some of the various frameworks and decide for yourself. You'll either find something you like, or find reasons why you don't want to work on some specific frameworks. Just drop the idea that there's only 1 tool that needs to be used for all jobs. It's okay to pick the right tool for the project you want to do, especially if conforming to the standards of another project is going to overly complicate the new project.
Also, why did you delete the parent post? This kind of question provokes exactly the kind of discussion that others need to read. You're getting different opinions from different programmers in all kinds of fields. Not everyone will agree, but everyone has a valid point from their experience and frame of reference. You can even take this as a sampling of the real world. You may encounter a programming team who each has as much of a different opinion as the people in this thread do. How will you work with them? Will you understand their point of view and try to compromise? You didn't ask anything wrong.
CodeIgniter 3.1.4. Last version that works on PHP &gt;= 5.2.4
I can see this comment is based on serious experience. On the other hand, you lost me on terminology, and half of it flew over my head, so I doubt OP will benefit from your answer. 
Like which? For some reason all your arguments are really vague and not supported by any facts it seems.
When I was working on modernizing a legacy app, one of the best things that I could hear was that a feature was no longer required. "Cleaning" it up became as simple as deleting a few files. I also noticed in that refactoring that there were a number of files that simply were no longer used. The project had no source control when I came onto it and previous devs appeared to be afraid to delete anything.
Personally i think that "Specialized services and resolving handler" is cleanest solution, because you can always have some cascading resolving and for example if you cannot find any handler for "Cat" class you can always use some more generic AnimalHandler, which will at least do something, or just do nothing. Also, i sometimes associate handlers with certain classes via annotations, so for example we have: ```php /** * @SoundHandler("\App\SoundHandler\CatSoundHandler") */ class Cat extends Animal { ... } ``` And it works fine - but nevertheless still results in tight coupling of classes, which is not really good - but works.
No offense, but you failed the interview on question #1. [This is the canonical answer](http://php.net/manual/en/datetime.diff.php).
I'm surely going to check this. Thank you!!
I am totally a noob on this, I never did migration work! I just assumed it would be extremely painful. I will propose it anyway! Or at least to start new projects on new versions. Another commenter said you can run two PHP versions on the same server and that would be great for me. Thank you for your suggestion!
I don't know their server infrastructure yet, if we can get a virtual server or try something else... but I am going to check it for sure! Thank you!!
I'm going to have this in mind. Thank you!
/u/Just42s, I would highly highly hiiiiiighly recommend that you do it this way and stick to it. It makes your code a lot safer. Take a look [here](http://php.net/manual/en/security.database.sql-injection.php) for an introduction as to why I'm saying this.
&gt; You're basically complaining that the Dog class is broken, because it doesn't plan to Meow or Chirp. No because in your example everything is clear. The limits are clear. It's not a limit "maybe it's null maybe not who knows" style. An animal do a sound. If you want to act on the sound in whatever context, you don't need the implementation. You just need to know that `getSound` return an `AnimalSound`. Then you use the AnimalSound object for your need. To come back to the nullable return type, you are not sure with `?AnimalSound`if you will really have what you expect (AnimalSound) or null as return. Plus you don't know what implementation can return null and what implementation can't. Can it be a source of confusion? I believe it. &gt; The whole point is that you don't have to know. Really? Of course I need to know if a null is returned. If I do an "$animalSound-&gt;__toString()" on null it will be a problem... I need to do something like: ``` // in some implementations it's null (but maybe not always) if($animalSound == null) { } ```
I'm using nginx. Is it necessary to give nginx sudo permission?
For #7 you should be asking about PDO or (less likely) MySQLi. Even if you have a legacy codebase that still makes extensive use of mysql_* a dev who started on PHP5 utilizing best practices (ie. not mysql_*) might not know mysql_*. That doesn't mean that they're a bad developer - it just means that they're not an old school developer.
Fortunatelly I have. But what I wanted to show on the screenshot is that a "code leak" is possible (imagine some config.php would be "corrupted") -- but of course that is a very low possibility to happen.
Well you can ask :) The tips are mostly supposed to be researched, explaining everything in a comment that is forgotten tomorrow is a bit overkill.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
It was more like... you know when you see your reflection in the mirror and wave, thinking “hello, handsome”? What I read in your comment was: You’ll just need to spot performance issues in the code. It’s a skill that come with experience. 
Good point, thanks for mentioning that!
&gt; I think if you can stop someone, especially if they're not extremely technically sophisticated from doing this to you via technical means, then effing do it! Do you know that GameGuard, which is supposed to prevent video game hacking/piracy, used `rand()` to generate their keys? Knowing this, would you recommend a game developer use GameGuard in their product? "Just do something" is an appeal to the ego. Sometimes, what they're doing is worse than nothing. Security theater saps the time and money that could go into *actual* security. Code obfuscation makes people feel like they're protected when, in reality, code obfuscation schemes are trivially broken. *Especially in scripting languages.* You might be tempted to ask, "Why don't you break one publicly then?" and I'll point back to my previous allusion towards lawyers. I want to stay *far* out of that mess. &gt; Spending years of effort and hundreds of thousands of dollars on a problem they can prevent in many cases with cheap or free means instantly? Not a good advice. The problem with your argument is that they can't prevent it using code obfuscation. A well-written contract signed by all parties and notarized is far more effective of a deterrent than the encraption that these products claim to offer. &gt; Also when was the last time you sued a company? Especially a big one? Let me tell you what happens. I have not personally, but one of my employer's cofounders has been involved in many legal battles over her years. If you had a contract in play from the start (like every company *should*), most companies will just settle outside of court. &gt; They say "OK, let's play chicken" and put their salaried on-hand lawyers at the task, and wait for you to spend all your money on lawyers and go bankrupt as they appeal every court decision for months and months and months, easily going into years. That depends on: * Whether or not you're dealing with sociopaths e.g. Uber's leadership * Whether or not you had a well-written contract in play If you have a contract, and you're not dealing with the 0.01% of companies ran by spiteful psychopaths, this "OK, let's play chicken" isn't going to happen. If you didn't have a contract, take your loss as an expensive lesson to always have a contract. If you're dealing with a megacorp that oozes evil, my best advice would be to decide before you even accept them as a client if you're prepared for a years-drawn-out legal battle if they double-cross you, and while you're at it, pay your lawyer to review the terms of your contract and to sit in on your negotiation meetings to prevent any fuckery. War is won in the preparation. If you go in unarmed and unprepared, it doesn't garner much sympathy from people who do.
&gt; Literally undergone very expensive, external paid audits, and the app it runs gets audited quarterly as part of PCI-DSS level 1 compliance. Which company did the audit? Is it the same company every quarter that does the audit? Have any of them agreed to have it be published? If so, can you publish the PDF of their report?
&gt; Do you know that GameGuard, which is supposed to prevent video game hacking/piracy, used rand() to generate their keys? &gt; Knowing this, would you recommend a game developer use GameGuard in their product? You're getting side-tracked into irrelevant examples. OP has a specific situation with a specific problem. She/He's allowed to control the server that will be on the premises. This means OP can use full-disk encryption and place strong authentication boundaries to the server and control it this way. This is an extremely common way to resolve the problem of the client abusing the service that's running on their premise. Heck, I can't even get into my *TV set-top box* because it's protected by a strong password my cable operator didn't tell me about. &gt; "Just do something" is an appeal to the ego. Sometimes, what they're doing is worse than nothing. And what exactly is the factual, logical or any other objective base for this arbitrary statement? Nothing. And why doesn't "just do something" apply to your "do it legally" advice? "Just do something legally"... You're not a lawyer, you're not qualified to give OP legal advice. You're qualified to give them technical advice and your opinion is "nothing can be done about it". Well I'm countering this with "something good can be done about it: full-disk encryption and keep the accounts to yourself". Problem solved.
I already did this and it's still not doing anything. I wasted my whole day on this and yet I don't know the reason why it's not running.
Thank you for your reply. This is my first time working with PHP. I’m used to developing MVC applications on .NET and then sending that whole application through an integration and deployment pipeline. Instead at this job they just had us write some scripts and save the code in production. But you’re right, use your biases and name-calling, it’s very professional. 
Running two versions on the same server is by far ideal, probably not easy to do right, and admins will hate you. besides you will still have an old version of php exposed. But if it at least will stop you from starting a new project on an old php version you should do it. And maybe it will give you an easier transition path for the old software. Out of curiosity, is this project for the hospital you mentioned in another post? Using live data about patients?
will you roll out a HR system with FOSUserBundle? 
Thanks, this was actually the answer I've been looking for!
If app.php is corrupted in such a way that the "&lt;?php" is modified or removed, that would still have the same effect.
Those are terrible questions, and some have terrible answers…
We use [php-vcr](https://github.com/php-vcr/php-vcr) at work and we are very happy with it.
Check your logs, find the error messages. Remember, it's php running the script, not nginx - the error will most likely be in the php logs. Another thing that can help is `sudo -u www-data command`, where command is whatever you passed to shell_exec. Replace www-data with whatever user php-fpm runs as. If you've used sudo instead of permissions, you might also have a sudo configuration error. Check the sudo logs too in that case (I don't remember where they are).
symfony 1.4
I wish... Here is how it looked like: https://imgur.com/a/AxHO5 (but you can see most of it in the screenshot itself)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/bARN9z7.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dsbsew5) 
If you spot it for a specific request, you can profile it with Blackfire (https://blackfire.io), they have a very clean graph + UI to interpret the result. It's not necessary trivial, but at least more accessible than an xdebug dump and also more realistic as you can profile in a prod env without any overhead (unlike xdebug).
Don't be an idiot. Symfony comes with a routing, db abstraction, view rendering, dependency injection container, service registration, session integration, form handling and tons more. You would spend weeks building your own and it wouldn't have 10% of the features or be as scalable/tested. Also speeding up development isn't always a good thing. Most of the "speed ups" with Laravel either lock you into a dependency or force you to use certain software out of the box. I'm sure you just pump out mom and pop sites for a living that you never touch again, but if you actually had to build scalable etl pipelines processing terabytes of data a day, you'd be completely lost and in over your head. But keep making things up about Symfony.
I have the application structured the same way. My index.php has 2 rows of code. But as you can see, this error happened in one of (many) files of the libraries.
&gt; I need to run different complex operations for different types of entities Example itself is abstract, but assuming `Animal` is abstract and thus might benefit from polymorphism contardicts the problem itself. This happens when both `Animal` is not actual abstraction and you don't control its creation. For abstract `Animal` you shouldn't care if its `Cat` or `Dog`, but if you want operate on Dogs you just create Dogs - that's it.
fucking cunt 
Hence the ZFS comment. But usually a misconfigured or corrupted server is most likely to show the start file's code. This is about risk mitigation, not risk elimination.
Meh, I think you’re just a micro-penised asshole, and it sounds like no one would care if you killed yourself. His name is Linus by the way, Linux was the kernel he helped create.
Sith happens. You can run a cron job to checksum your codebase ;-)
FOSUserBundle is basically a set of forms... never use it myself but speaking of things to "speed up development" that would certainly be one. Did you just disprove your own previous comment?
Hmmm... Sorry, this started as a set of notes for myself, so the examples are not refined I guess. But I think the sketches of solutions should be enough for people that encountered similar problems. I am not asking for help. There are no "great ideas", and even if, they are not mine. It is just a list of solutions that I know about and use in our codebase. There is no one real-world issue. There are many similar issues that I ran into during the past year during my work. I can try to get back to this tomorrow and post one real-world example if it helps understanding.
The "resolving handler" is also the solution I gravitated towards the most. It is reasonably simple, safe and robust. Annotations nice, but need static analysis and some build tools. I am always trying to find a standalone solution. And you are right, this is really tightly coupled.
Yes. But suppose you are processing a collection of objects sharing the same interface. * There is an abstract Condition class and bunch of different subtypes, each with its own attributes. Saved as entities to DB using inheritance. * I load the collection of conditions that I need to validate. * Validation is a complex operation that requires access to other services and resources, so each condition type has its associated validator service that knows how to validate this condition. * I need to validate all of them - thus need to resolve the correct validator for each condition according to its type.
No problem. Good luck. If you have any success with this, I'd be interested in any updates on how it works out
&gt; 4. Visitor pattern ... adheres to all principles Well, half. If you add new operations (new visitor classes), then the animal classes don't need to change. *But* if you add new animal classes, then the visitor interface and *all* the visitor classes need to change.
&gt; You're not a lawyer, you're not qualified to give OP legal advice. And my legal advice is to talk to a lawyer. I don't need to be a lawyer to give that advice. You should especially speak to a lawyer about ensuring the contracts that his customers sign will stand up in court. If you have no contract, you have no protection. Bullshit like ionCube, PHPShadow, Zend-Guard, etc. won't help here.
I'm sure my wife and daughter would care. You are cute kid... Go back to playing video games and being a trashy little programmer.
Well hopefully you don’t treat them like this.
I gave you sound professional advice, and you got all butthurt. Grow up.
You told me I was a noob for wanting to rewrite a production system. I MADE the production system in the first place. I’m not worried about attack vectors from hackers, I’m worried about errors generated by the fact that right now it’s a bunch of scripts. Of course we put in a lot of error handling I just though PHP was a bit more robust than the way we were doing it. You think I’m a bad programmer because I put that in an intern but you know nothing about me. You think I’m a kid but again, you know nothing about me. You don’t know that I live with my newlywed wife and dog in our own place that we have had since we were 18 do you? You say that being rude is the “only way to get ahead in this industry”. If that is honestly the case (and not just coming from a bitter middle-aged man who hates his life) then you’re right, I don’t want any part of this industry. Thanks for opening my eyes, truly. 
The effect would be that the output would show `require __DIR__ . '/../app/app.php';` - hardly anything secret. Remember that you should never expose something to the public web that wasn't meant to be loaded directly.
Look you are all over the place. If you wrote the system then why didn't you do it correctly in the first place? Because you didn't know how, right? You are going ad hominem on me because I insulted you skills? Just wait until you have a manager or owner or client shitting on you. You are going to be real butthurt then. 
Efficiency 10/10, thank you, man!
You're assuming that the file you're accessing has been corrupted. If that file is fine, but app.php is corrupted, then it'll be like requiring an HTML file: the contents of app.php would be sent to the browser.
&gt; logged and the logs retained for what seemed like an onerous amount of time Currently 7, I believe, and I've been told that's going to 10.
Thank you for the advice. I've just seen two videos of the creator of PHP saying the same!
I would really recommend that you namespace your code with your *"vendor" name*, so that your package is not under just `HttpTest`namespace, but rather under something like `jcchavezs/HttpTest`. I've seen too many problems with conflicts *- caused by the same namespace used by different vendors -* to overlook this.
Right on. :-) Given your history, I'm interested to hear how the book stacks up against your own experience. DM me if you have the time &amp; inclination!
httpbin.org is another great resource when testing APIs or building APIs. I use it a lot for error handling, e.g. "What happens when I get a 5xx response?" Or what happens with a slow response? 
Sounds good but with this approach you can do that in local and even better you can execute and validate those behaviours in tests: repeatable and explicit.
Holy shit that would be huge! Do the big tech companies do that?
The going rate for a dev that knows what they are doing is around $60-80/hour if they are working as an employee of something else and paid by the hour, not salary. A dev working by him or herself without any company support is likely to be over $100/hour. Salary is a different story, probably around 75% of these hourly rates, but since you are asking about a one off project, I think you're best using my hourly rates as a guide. edit: words
This was a little weekend personal hackathon. I love tools like `php-cs-fixer` that take the grunt work out of improving fixing style/formatting issues, and wanted a comparable tool for types. Please [let me know](https://github.com/vimeo/psalm/issues/new) if you have suggestions, or if you run into bugs.
nice, I have really been digging psalm, can't wait to try this out. thanks!
It literally can't happen with ZFS.
Great writeup and a nice resource to reference.
Very cool. The documentation cites Symphony, but I assume there is no reason this wouldn't work for CakePHP right?
I changed code to sudo -S ./config.sh and it worked. I'm still not sure why previous code didn't work but now, it's working like this so I'm not going to touch it again for a long time :P
These questions would tell me nothing about a prospective hire. Here are the only things I need to know about a person. 1. In speaking with them can I tell they have a passion for development. All candidates must have this regardless of skill level I am hiring for. Otherwise, move a long. 2. Give them a slow application (minimal size so they can understand it quickly). It will have problems with the database schema, SQL queries, and PHP code. Optimize it. 3. Give them an insecure application, secure it. 4. Give them code that has a terrible cyclomatic complexity score. Improve it. With those 4 scenarios I now know if they have passion, optimization, security, and cleanliness. Have those? I am very likely to hire you. Know questions about the parameter order of in_array or some dumb shit logic puzzle. Just the things that will matter in day-to-day operations. There are other questions I would of course ask, but those 4 will tell me a lot about their engineering acumen.
How can `Cat` subtype with invalid attributes comply with `Animal` contract then? That's why I mentioned creation control - when you inspect data and create suitable entity or bussiness object or whatever you call it, you can talk about abstraction (and polymorphism). You can have `InvalidCat` if null object pattern applies. If you encapsulate pure data structures then you'll have bunch of ugly interfaces on them, but you can almost entirely avoid that in stateless environment, because all preconditions may be checked before creating true objects with that data.
And once again, you make broad general statements and fail to address any faults in the technical solution I mentioned.
https://www.reddit.com/r/crypto/comments/7o36hq/past_platformagnostic_security_tokens_a_more/ds7247a/ :)
Your comment can be abbreviated mostly as, "I moved the goalposts. You didn't fall for this trap. That means you're a shitty security guy." &gt; I'm not proposing ionCube and Zend-Guard. Did you even read my comment? Everything isn't [all about you](https://www.psychologytoday.com/conditions/narcissistic-personality-disorder). See [this](https://www.reddit.com/r/PHP/comments/7o335u/protection_for_code/ds6m8j6/) and [this](https://www.reddit.com/r/PHP/comments/7o335u/protection_for_code/ds7xcfu/) for flavor. When participating in a public forum, I'm going to address the entire topic, not just the parts that you're personally invested in. &gt; Keep in mind that if you give up so easily in proposing a secure technical solution to someone and tell them "just call your lawyer" this doesn't just make you unqualified to give legal advice. There's two conversations to be had here: The first one is about the business costs of piracy as a result of shitty IT guys for OP's clients. This is the sort of thing that should be addressed in the contract, probably under a heading containing some form of the word "Liability". It differs a lot. Contract writing is more of an art than a science, so your mileage will vary. Again, to the peanut gallery: ask your lawyer, who is not me. The second conversation (i.e. what sort of technical controls to put in place) is one that should take place only after you've talked to your damn lawyer. In which case, sure, full disk encryption and strict access controls with auditing (I wrote a tool that can help with that, FWIW) is going to be part of the discussion. But I can promise you that, if it weren't for legal deterrents, I could write an exploit for any of the mass market code obfuscation products mentioned in this thread, drop it on Pastebin/Github, and suddenly that 10-20% of cases becomes a prevention rate of 0%. And, worth emphasizing: There's nothing special about me.
just by glance, seems like a drop in replacement for php-fpm. I'll check back in a year to see where this project goes and if any large companies/projects adopt it before jumping ship.
&gt; Your comment can be abbreviated mostly as, "I moved the goalposts. You didn't fall for this trap. That means you're a shitty security guy." What goalposts, I said "encrypt and lock-down the server" and you replied with "nah ionCube is useless". How is it my fault you didn't read what you're replying to? &gt; Everything isn't all about you. When you reply to **me**, it's about **my opinion**. You can't reply to me about the problems in someone else's opinion. You know, communication 101. And **again** you didn't address the solution I spoke about, talking about the "art of writing contracts". &gt; But I can promise you that, if it weren't for legal deterrents, I could write an exploit for any of the mass market code obfuscation products mentioned in this thread So you want to keep talking about what someone else said, and ignore the solution I keep talking about? This is only to your own disfavor. Everyone else here who's capable of reading English got my point. 
ITS SYMFONY PEOPLE
You're ignoring the crux of my point, which is "Lawyer first". &gt; So you want to keep talking about what someone else said, and ignore the solution I keep talking about? I addressed that here: &gt; The second conversation (i.e. what sort of technical controls to put in place) is one that should take place only after you've talked to your damn lawyer. In which case, sure, full disk encryption and strict access controls with auditing (I wrote a tool that can help with that, FWIW) is going to be part of the discussion. But OP wasn't asking about full disk encryption and access controls. And I was responding to: &gt; I think if you can stop someone, especially if they're not extremely technically sophisticated from doing this to you via technical means, then effing do it! ...which is a deeply flawed way to approach security.
&gt; You're ignoring the crux of my point, which is "Lawyer first". I never said "don't look for a lawyer". I said quote: *"Nothing stops OP from going with both legal and technical protection."* Which was in response to yours: "don't solve legal problems with technology".* Now you're shoddily trying to rewrite history. &gt; But OP wasn't asking about full disk encryption and access controls. Here's what OP was asking about: *"i just need a wall around my code"*. He didn't demand to use Zend Guard or ionCube. He asked for solutions, and you lied to him, out of ignorance or knee-jerking about obfuscators, that there aren't any solutions. Disk encryption and access restrictions **will protect his code**. &gt; I think if you can stop someone, especially if they're not extremely technically sophisticated from doing this to you via technical means, then effing do it! ...which is a deeply flawed way to approach security. I don't know if you've heard of layers in security? About "defense in depth"? You'll say "of course I have!" but you still act as if you don't have a damn clue about it, which is evident in all your answers so far. Instead you're demonstrating a childish binary "everything or nothing" mentality, and it's ridiculous to hear someone with such mentality talk about what's a "deeply flaws way to approach security". We're talking about layers that complement each other. If legal measures are one layer, access control is another layer, disk protection is another layer, than hell yes, if he determines, obfuscators could be yet *another* layer to his overall strategy. You're attempting to present it as if I'm promoting disk encryption and access control, then I reject legal advice? WTF, dude? **LAYERS** 
Seriously, this worked immidiatly on my symfony application, and is **insanly** more performant than my old apache-php! TLDR-DEV; PHP-PM is 4.8 times faster! TLDR-PROD; PHP-PM is 7 times faster! This results have been run with docker-compose, in symfony dev environment, with profiling etc... I have disabled XDebug for the test: First, Apache results are pretty sad, but it works (dev): ``` ab -n 1000 -c 20 -C PHPSESSID=c45466faedfb7e86ab0232a36507cfed http://127.0.0.1:8000/dashboard This is ApacheBench, Version 2.3 &lt;$Revision: 1807734 $&gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking 127.0.0.1 (be patient) Completed 100 requests Completed 200 requests Completed 300 requests Completed 400 requests Completed 500 requests Completed 600 requests Completed 700 requests Completed 800 requests Completed 900 requests Completed 1000 requests Finished 1000 requests Server Software: Apache/2.4.10 Server Hostname: 127.0.0.1 Server Port: 8000 Document Path: /dashboard Document Length: 372 bytes Concurrency Level: 20 Time taken for tests: 180.430 seconds Complete requests: 1000 Failed requests: 0 Non-2xx responses: 1000 Total transferred: 726000 bytes HTML transferred: 372000 bytes Requests per second: 5.54 [#/sec] (mean) Time per request: 3608.601 [ms] (mean) Time per request: 180.430 [ms] (mean, across all concurrent requests) Transfer rate: 3.93 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.2 0 3 Processing: 3351 3575 582.4 3436 9091 Waiting: 3351 3575 582.4 3436 9091 Total: 3351 3575 582.6 3436 9093 Percentage of the requests served within a certain time (ms) 50% 3436 66% 3539 75% 3561 80% 3632 90% 3721 95% 3924 98% 5578 99% 7401 100% 9093 (longest request) ``` Here are PHP-PM's result (dev): ``` ab -n 1000 -c 20 -C PHPSESSID=c45466faedfb7e86ab0232a36507cfed http://127.0.0.1:8001/dashboard This is ApacheBench, Version 2.3 &lt;$Revision: 1807734 $&gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking 127.0.0.1 (be patient) Completed 100 requests Completed 200 requests Completed 300 requests Completed 400 requests Completed 500 requests Completed 600 requests Completed 700 requests Completed 800 requests Completed 900 requests Completed 1000 requests Finished 1000 requests Server Software: nginx/1.12.2 Server Hostname: 127.0.0.1 Server Port: 8001 Document Path: /dashboard Document Length: 372 bytes Concurrency Level: 20 Time taken for tests: 37.937 seconds Complete requests: 1000 Failed requests: 0 Non-2xx responses: 1000 Total transferred: 827986 bytes HTML transferred: 372000 bytes Requests per second: 26.36 [#/sec] (mean) Time per request: 758.741 [ms] (mean) Time per request: 37.937 [ms] (mean, across all concurrent requests) Transfer rate: 21.31 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.2 0 2 Processing: 36 749 2145.9 111 26754 Waiting: 36 749 2145.9 111 26754 Total: 39 749 2146.0 111 26756 Percentage of the requests served within a certain time (ms) 50% 111 66% 255 75% 389 80% 516 90% 1140 95% 4816 98% 8947 99% 9416 100% 26756 (longest request) ``` Apache Prod: ``` ab -n 1000 -c 20 -C PHPSESSID=c45466faedfb7e86ab0232a36507cfed http://127.0.0.1:8000/dashboard This is ApacheBench, Version 2.3 &lt;$Revision: 1807734 $&gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking 127.0.0.1 (be patient) Completed 100 requests Completed 200 requests Completed 300 requests Completed 400 requests Completed 500 requests Completed 600 requests Completed 700 requests Completed 800 requests Completed 900 requests Completed 1000 requests Finished 1000 requests Server Software: Apache/2.4.10 Server Hostname: 127.0.0.1 Server Port: 8000 Document Path: /dashboard Document Length: 372 bytes Concurrency Level: 20 Time taken for tests: 161.182 seconds Complete requests: 1000 Failed requests: 0 Non-2xx responses: 1000 Total transferred: 643000 bytes HTML transferred: 372000 bytes Requests per second: 6.20 [#/sec] (mean) Time per request: 3223.641 [ms] (mean) Time per request: 161.182 [ms] (mean, across all concurrent requests) Transfer rate: 3.90 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.3 0 3 Processing: 3046 3193 325.4 3088 6643 Waiting: 3046 3193 325.4 3088 6642 Total: 3046 3193 325.6 3089 6645 Percentage of the requests served within a certain time (ms) 50% 3089 66% 3207 75% 3244 80% 3255 90% 3372 95% 3528 98% 3893 99% 4932 100% 6645 (longest request) ``` PHP-PM: PROD: ``` ab -n 1000 -c 20 -C PHPSESSID=c45466faedfb7e86ab0232a36507cfed http://127.0.0.1:8001/dashboard This is ApacheBench, Version 2.3 &lt;$Revision: 1807734 $&gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking 127.0.0.1 (be patient) Completed 100 requests Completed 200 requests Completed 300 requests Completed 400 requests Completed 500 requests Completed 600 requests Completed 700 requests Completed 800 requests Completed 900 requests Completed 1000 requests Finished 1000 requests Server Software: nginx/1.12.2 Server Hostname: 127.0.0.1 Server Port: 8001 Document Path: /dashboard Document Length: 372 bytes Concurrency Level: 20 Time taken for tests: 22.827 seconds Complete requests: 1000 Failed requests: 0 Non-2xx responses: 1000 Total transferred: 744986 bytes HTML transferred: 372000 bytes Requests per second: 43.81 [#/sec] (mean) Time per request: 456.550 [ms] (mean) Time per request: 22.827 [ms] (mean, across all concurrent requests) Transfer rate: 31.87 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.2 0 2 Processing: 23 449 1670.1 31 21012 Waiting: 23 449 1670.1 31 21012 Total: 23 449 1670.2 31 21014 Percentage of the requests served within a certain time (ms) 50% 31 66% 33 75% 44 80% 60 90% 228 95% 4228 98% 5200 99% 6156 100% 21014 (longest request) ```
It looks like a really cool error page or background tho :D
&gt; The technical discussion (which, for the Nth time, should not even take place until the legal risk is minimized and a contract is in play) So let me get this straight. You're dismissing technical solutions here, because you think he hasn't discussed this with a lawyer enough? In a technical forum, you're refusing to discuss technology, because of your subjective and unsubstantiated opinion he's not lawyered up enough? ----------------- Can you drop this inane bullshit? &gt; "Use full disk encryption" sounds great on paper, but what if the server needs to be rebooted? Unless your implementation accounts for that, you're giving the IT guys the keys to the kingdom, which is self-defeating. Would you stop inventing problems that don't exist? Managed server means they don't reboot it. There are only two situations in which a reboot occurs: - Power fails, their UPS also fails. (rare) They contact you, and you bring the server up. - You reboot the server during maintenance. Why the *hell* would they be rebooting a server they've zero access to? &gt; Shoehorning a solution that sounds like a compliance checklist without context isn't good security advice. But a lot of good security advice isn't generalized, it's specific to the problems being solved. That's why people do it for a profession. You've said "nothing can be done, so doing something is worse than nothing". That's what your profession offers? No, you're just bad at your profession. &gt; But seriously, this is the discussion that should be had if and only if your lawyer tells you that you're protected and you have the necessary contracts/agreements in play. You're on a technical fucking forum. WAKE THE FUCK UP.
That is what I thought as well ;)
Is that some new edition for China?
Situation: For set of classes A, B and C, there are corresponding validators VA, VB and VC. Validators are specific to concrete class, and can't be used to validate other classes. So A -&gt; VA, B -&gt; VB, C -&gt; VC. Problem: How to choose correct validator, while retaining flexibility, low coupling and extensibility (adding D and VD won't require changing code that deal with A/VA, B/VB, C/VC, etc. Linked file gives some answers to that problem and assess how good they are.
Title do not describe content. My suggestion: &gt; Resolving dependencies between two class hierarchies
&gt; And if you have to learn to use a framework with that version, what would you choose to learn? It's not a knowledge that you will gain but boatloads of $$$, 'cause nobody else will want to work on that code but you. So if you are good at it you have no competition. &gt; to somehow get knowledge that would still be relevant today with the latest php 5 or 7? Upgrading codebase piece by piece toward newer php and switching at some point in time will be most beneficial. When you are done, you then can go upgrade some other ancient system and gain those sweet $$$. Seriously introducing whole new framework gains you nothing, gains your employer nothing, you hundreds of thousands of lines of code that will have to be maintained, and it slows down rewriting that codebase (or writing new code as finding know-how about X will still be harder then just using php7). But hey, if you are forced to do it, at least go and buy yourself some books. The trick is to find books published roughly one year after release date of that framework. Trust me even google will insist on giving you result for newer frameworks.
@makioo is right!
I had to deal with all these questions in real life and I have always found the answer. Either by reading PHP manuals or internet forums. I feel quite bad about the fact that I would not be able to answer many of those just from the top of my head and not referring to manuals... :-(
These are questions I would have asked a junior programmer five or even ten years ago. For a medior position, I would skip language semantics completely and focus on domain modelling and software architecture.
I dont think you understand the example correctly. There are no invalid attributes. All entites are valid. These are business conditions that serve for validating other objects. 1. user in admin configures a set of conditions, these get persisted 2. the preconfigured conditions are loaded when time for validation comes and must be processed with different validators I didn't want to go into too much detail. The objects that are validated are discount code redemptions, if that helps you to understand.
Hmm they made a new API and we still need to pass "true" by default as first arg to get sensible output? The hell :) Also, when we're talking about timers, the idea it starts in the "past" is bizarre. I mean how can a timer start in the past, when it's not supposed to show wall time at all? It's supposed to how some time, say, from the start of the system, or the process, but the starting point shouldn't matter or be specified. Also I find it hard to believe `$elapsed` will "always be correct" as they say. How can it always be correct, when this is a monotonic timer? Means every time you call it, it ticks upwards, even if timewise the tick hasn't happened. Which should mean that if you call it too often, it will skew to preserve its monotonicity, and therefore `$elapsed` won't be always correct...
I'm sorry about the "$elapsed will always be correct" statement. I wanted to show a super simplified code example, but I didn't want it to be misleading.
Well, one of the premises of the article was to not use dependencies in entity. Another problem is that the entity gets persisted and then loaded back from DB at another time.
&gt; Also I find it hard to believe $elapsed will "always be correct" as they say. How can it always be correct, when this is a monotonic timer? Means every time you call it, it ticks upwards, even if timewise the tick hasn't happened. That's not how monotonic clock sources work. There is no artificial upwards correction. "Monotonic" does not imply that the result is strictly increasing, though in practice (simply by dint of the precision of the time source), it will be the case.
The overall performance looks great - but I cant help but notice the 100% "longest request" time blows out on php-pm compared to the original. Is that the first request doing the bootstrapping perhaps?
You mean Doctrine? Usually my problems where never with orm but more with the generated queries. Modifying queries to make the query planner happy and adding indexes usually helped to increase the speed a lot :)
&gt;You mean Doctrine? Yes. You can combine the download of all of those ORMs and still Doctrine has at least 3 times more download than that. So I think regardless of people's opinion on it, you can't just ignore it in an ORM benchmark :P
As I'm sure you can imagine being a PCI application the audits are not publishable as part of the requirements. Besides, this code is only around 5% of the application, and we use it in most of our PHP API applications. It's launch quarter so we're using our providers auditors at this time, and all I can say is that they are _big_ (here at least). I'm not sure if we will be using the same company each quarter, hadn't considered that - might be tough given our location though :) Use it, don't use it, up to you; it's more secure than a default install and covers some 'advanced' topics that newbies brush over due to lack of knowledge or experience. If it gives just 1 application a more secure CSP, or prevents a single API built on it from some form of easily mitigatable attack then it's fulfilled its purpose.
Thanks!
Does it web scale?
Very good explanations, thanks!
The best way I've found to find errors is just assume that you've made a mistake somewhere. 90% of the time this will be in your database somewhere. Look for complex queries with joins and find out how long they take to run. Once you've found a slow query, play about with EXPLAIN and try to work out where it's doing a full table scan. If it's PHP that's slow that's a lot harder to find. Look for recursion and multiple nested loops. Those things can be incredibly slow but are often lost in the noise of other calls. The main question is: are you actually having a performance issue? XDebug is great for finding problems if you know they exist, but just make some CURL requests to your app and time how long they take. If they're not taking a long time then there are better things you can do than optimise something ahead of when you actually have problems.
Pretty obvious that Phalcon would turn out as the most performant.
&gt; Means every time you call it, it ticks upwards, even if timewise the tick hasn't happened. Where are you getting that definition from? It's not the standard definition of monotonic: &gt; A monotonic function is a function which is either entirely nonincreasing or nondecreasing. A function is &gt; monotonic if its first derivative (which need not be continuous) does not change sign. 
If I could tell you I'd tell you.
I don't want to repeat myself so I'll jump to conclusion: Don't take (object) data structures for objects in OOP principles context. These are different beasts, same as factories where low coupling is impossible (nonetheless they're syntactically objects). If you can't encapsulate behavior the abstraction on pure data will be either overly complex (method injections) or not really abstract because different values doesn't make another subtype while different fields make another type (getters/setters).
I can't share it publicly but have sent you a PM
If having that big of a lead in terms of download I don't know what more you need. That said https://github.com/sergeyklay/php-orm-benchmark/issues/2#issuecomment-355948728, Eloquent is also integrated in the framework so the numbers from Packagist for Eloquent are wrong. So I looks like Doctrine is no longer number one :) As I said though, it's not a dick measurement contest, but you can't do a benchmark about something if you omit the major players...
It's better to find someone to pay you to redo it.
As I said in another comment, typically when someone says "monotonic timer" they mean strictly increasing, as such timers are used to uniquely timestamp events and entities. It may not be the case here.
No problem. Glad you liked it.
Interresting, I will look into it! :)
I don't think it has to be "strictly increasing". Just "strictly never decreasing". When the resolution is high it ends up being "strictly increasing" as a side effect of the time that it takes to make the call.
I'm not sure, I will try to monitor it :)
Could you add [Opulence](https://github.com/opulencephp/orm) in your results as well, just out of curiosity?
Chinfony?
Not sure if serious or trolling... 🤔 In any case, your PHP installation does not seem to have this extension loaded/compiled. Check http://php.net/manual/en/odbc.installation.php
is there any way to install the odbc extension other than using the command line? (sorry, I'm a beginner at php)
Did you read the Google docs? https://developers.google.com/kml/articles/phpmysqlkml
You're not going to find a single library that does everything for you, or even a large chunk of this. You'll have to build it yourself. There may be some libraries or tools that you can use along the way to ease each step, but that's about it. Settle in, this build may take a few weeks. Build it piece by piece and test each step out before moving on. If time is of the essence, get the half that records the data up and running, deploy that to start recording information, and then build the display end. Frameworks tend to handle registration, login, and sessions out of the box. Survey the field and pick the one that works best for you. That'll solve that issue. Past that, all you really have is some CRUD to handle and some interesting JavaScript. Use JS to access the device's latitude and longitude. This should be a The Haversine formula is available on Wikipedia and elsewhere, so you can just implement it directly in JavaScript. Together, these handle generating your sequence of coordinates. When the sequence is done, POST it to your server with some Ajax. I don't know what you need the token for, but if it's just to correlate a set of coordinates and you're sending them all in one go, you can leave it off and let the server handle that. If the On your PHP server, you'll want to save the coordinates directly, even if you have to drop KML in elsewhere. Have a table that represents a trip. Have another table with a foreign key to your `trips` table. When you receive a set of coordinates, create a new trip and then save all of the coordinates into the other table. I'd recommend having each coordinate pair timestamped. That'll enable a good deal of analysis down the road. Doing the actual insertions should be simple enough database logic. From a quick glance at Wikipedia, KML seems a simple enough schema. You can just build up a string of this, inserting values in as if you were building up HTML. You'll have to get your hands dirty a bit with understanding KML so you can build it up properly, but that's not that big of a deal. When you're ready for Google Maps, look at the documentation for it and do some searches on the Web for how to do what you're trying to do. You'll likely not find any libraries to ease this along, but you probably will find a wealth of resources. 
I might have a library for you that can help out with the haversine distance: https://github.com/zeroconfig/geodistance It does exactly what you're looking for. The distance calculator it uses makes use of the haversine formula.
I have worked on those type of green field rewrite projects before the major thing is scope creep and even nailing down scope because the rewrites usually take so fucking long that you have paralell development where the stakeholders still want feature development on the old product as you are working on the rewrite, very few stakeholder in my experience (despite what they MAY agree to at the start of the project) will actually accept the idea of locking down feature development for the amount of time it will take to do a rewrite , therefore the scope will just grow and grow because it ends up comprising the new stuff they want, the existing stuff, but "the existing stuff" becomes a huge moving target problem. hope this makes sense what i am saying here.. my approach is to work on refactoring/rewriting as features are developed, basically make a devils bargain that any features or fixes are tied to certain refactor goals, so if the business wants something done they have to accept a multiplier on the time frame to allow for refactoring of the entire subsystem "while the hood is open". it seems daunting and impossible but usually isnt. I also have a philosophy of refactoring i call lifting up the house and fixing the foundation. i make an analogy of the "house" (app), and the foundation (db schema). usually bad apps have a bad foundation , but the data structure is hardest to fix because there is usually a tight coupling between the app and the data structure. What i do is "lift up the house" by creating an API/adapter layer that sits over the db and returns data in the way that you determine it should be returned if the db was structured correctly. Then develop all new features as services which utilize that API instead of calling db directly. This allows you to extract functionality in a fairly clean way. As you get more and more extracted , you are less reliant on the bad data structure, the API abstraction also allows you to mix in data from different , better structured db or data store. once you have extracted the bulk of the functionality, you can safely throw away the old schema and simply build a new schema and migrate the data. this is a very quick and dirty explanation of a very complex process hopefully its clear enough to make my point
PHP-PM removes the paradigm shared-nothing architecture and allows developers to load their application into the memory using several worker processes. This allows you to keep all objects (database driver, service container, etc) and symbols (classes, functions) in the memory, so your application is immediately ready to respond to a request, instead of always bootstrapping PHP interpreter + your application bootstrap. Used correctly, this gives you a very huge performance boost. As @beberlei said in the comments "The major downside is that requests are not shared nothing anymore", we consider it the opposite. Shared nothing is useful yes, but when I know what I do and have full control over my application, I can keep my application in memory to not waste always CPU circles for a bootstrap of my app. Of course, this needs more attention when you write &amp; design your application, but not more than you would with a http application in Python, Java, etc. Additional, PHP-PM provides several bridges to big frameworks out there. Symfony + Laravel are supported out of the box. Since both use HTTPKernel, DependencyInjection component and more, we hold basically the whole kernel, routes, templates in memory and are thus able to respond very quickly. PHP-PM runs as a simple HTTP server, that redirects requests to its worker processes. In development you could directly talk to PHP-PM, but we recommend a reverse proxy in front of it to have support for https, virtual hosts etc.
many devs are afraid to refactor or too lazy...they prefer to just rewrite the entire thing, which is usually a disaster or a pipe dream. refactoring a big legacy app is a scary daunting project for even very experience devs, one of the most important aspects in my experience is giving someone a team (and stakeholderS) the confidence to believe it is a reasonable, realistic and attainable goal
Just a heads up on a small typo: **Image** that all JavaScript. I noticed one on a previous blog too (https://murze.be/the-story-behind-our-open-source-efforts) **int** the top 10 above 
yes fair enough, i never said it is ALWAYS a waste of time i just said usually a waste of time. Eg. where I work now we do code reviews but we do not even have basic unit tests (none of the devs have EVER done a unit test nor know how to create them), and again it greatly relies on the experience of the developer doing the review. Eg. our current code base has tons of circular dependencies, inefficent loops and bad practices, they all passed code review my multiple devs. Reason is because usually those reviewing the code do not have enough experience to recognize these things are wrong ! 
i like the visitor solution, never seen that before its clever, my go-to for these problems is a sort of factory (your #2 solution)
&gt; much slower is a bit overreacted. His old setup had for a couple (95-99%) of requests 3.5-5sec vs PHP-PM 4.2-6sec. This isn't "much" slower and shows most likely that his application waits for something. Probably too many workers for his CPU cores. However, since this was just a quick test without much investigation about the outliners and nobody knows his architecture, I consider it pretty good. That few slow requests can probably fixed easily once you start profiling. 
Thanks, that would help
i find that basically very similar to his #2, DIC make it easier to test
worth a check, thanks!
&gt; There may be some libraries or tools that you can use along the way to ease each step Hey! Thats exactly was I am looking for. Re-building can be done, problem is re-inventing the wheel. IF there's a library which can reduce even 10% of the work, why not look at it.
Probably not, I guess it has something to do with worker amount, or an issue with the load balancing, or with react. Can you reproduce that @richard_h87? Would love to know your application in more detail, so we can dig into it.
I would strongly advise against using access as data storage, as this is just the first of many hurdles, even experienced programmers struggle with when using access within PHP. That is, strongly advise against it for a beginning developer, if you're not just doing this for a hobby project.
would mysql or mariadb be a better choice rather than using ms access?
To start out? Definitely. Have a look at PDO and the drivers it has for database connections: http://php.net/manual/en/pdo.drivers.php
I would love to look into it!
Glad it helped! Feel free to PM me for guidance along the way, if you want. And yeah, if there's a library that does what you need, pull that in. It's battle-tested and best of all, already written. My only caution would be to strategically avoid dependency bloat. This is especially true when the functionality is small enough. e.g. The Haversine formula is literally just a single line of code and will not ever change on you. Just translate it to JS and your life will be simpler.
Honestly, if it's just for learning PHP then I would take a look at SQLite.
Yeah, you're going to run into some issues if you're looking to host anywhere. It's easier to host an Access db on a Microsoft server, but hosting PHP on a Microsoft server is more complicated. So PHP runs better on a Linux server, but good luck getting Access to run on a Linux server.
you are right, much slower is a bit much :-) Still it sprang out looking at the data.
Doctrine King? Who is using doctrine besides these frenchs working with symfony? 
There’s plenty of reasons why it could not work. Since memory is shared all PHP globals are out (like $_GET) and some services probably need to be reset between requests. You also need an adapter to map the globals to whatever data types the framework is using. I have no idea if this would work in CakePHP though.
great write up! thanks!
&gt; Shared nothing is useful yes, but when I know what I do, have full control over my application and want high speed, I can keep my application in memory to not waste always CPU circles for a bootstrap of my app. Of course, you need to pay more attention when you write &amp; design your application, but not more than you would need with a http application in Python, Java, etc. Do you agree with the fact that this improvement come at the price of a new class of vulnerabilities, regarding missing of proper critical state cleaning ? Especially since PHP developers do not have to care about this concern until switching to this kind of model. This is IMO highly error prone and a large part of the documentation should cover this topic. 
IIRC the major backwards-incompatible differences kick in around 5.3, 5.6, and 7.x, so I would go for 5.6. Hopefully whomever you are assisting would know :) Two other cautions: * If the final project is meant to go to a non-Windows machine, you may encounter some differences/weirdnesses by running/developing it on a Windows desktop. (For example, Windows filenames are case-insensitive, but on a Linux machine `ProductInfo.php` and `Productinfo.php` don't match.) * If you plan to work with different PHP projects which are not all the same version (or want to try to migrate your project to a newer version of PHP) it can become very frustrating trying to juggle multiple installations on your desktop. If that scenario, consider tools like Docker, Vagrant, or plain old virtual-machines.
I'd keep your table names all lower-cased. It avoids some gotchas with regards to running on different operating system environments. Postgres may or may not have issues with that. I know that MySQL/MariaDB do. I actually don't know much about Postgres, other than that people who have used it and MySQL/MariaDB tend to prefer it. Users looks good. Keep as-is. Devices is a good idea, too. So far, so good. Temporary routes sounds like a holding place for routes before they get finalized and that anything in there would eventually get deleted when it's finalized. I dislike this for several reasons. You'll eventually get some trips that never complete, so this table will slowly get junked up with "temporary" data that doesn't go away. This is solvable by adding a timestamp and periodically deleting old records, but it's just a bandage over a design problem. Drop the notion of this being temporary and just permanently store the lat/lng coordinate pairs in here with timestamps on each one. This keeps your data granular, which is good for later querying and reporting. A better name would be something like `trip_points` or something. If you do use an auto-incrementing integer as a primary key on this table, make sure it's a big integer. This table can become quite large. Consider renaming 'Routes' to something like 'Trips'. Each row is an individual instance of some device traveling, right? You may eventually need to formalize a route that trips are supposed to follow and then you're stuck with a naming conflict. Also drop the stored KML, unless you're being forced to do this. The KML can be generated on demand by your PHP code from your stored data. Meanwhile, storing it means that your schema isn't normalized, as you have the data stored in two different locations and they can (and will) get out of sync. You're also more or less screwed if you ever have to switch formats. I could see a credible switch to GeoJSON some day, for instance. If you've stored KML, you have to translate it. If you've stored the raw data points, you can just code up a GeoJSON output _and_ run it in parallel with the KML output during the transition. You also lose a lot of ability to query the data, since you would have to then parse the KML to get to the data. Imagine being asked to find all trips that passed through a particular region. With the raw coordinates, you can write some SQL that looks for all trips where exists some point within a rectangular bounding box and then use some PHP logic if needed to find a less well-behaved region within that bounding box. Seriously, drop the KML from the database. General DB tips, if you're not already in the know: Always add database-level foreign key constraints. If these don't exist, you _will_ eventually get orphaned records or bad data. They also generally imply indexes on the foreign key columns. Since you'd be regularly using the column as part of a query, be it through a join or a secondary call to the database, you want it indexed for fast retrieval. Index the latitude and longitude only when you start writing queries against these columns. Why trade a slower write for a faster select if the latter doesn't yet exist?
Thanks for the helpful reply. I will try and setup my local environment as close as possible to the server. I was just recently given access to the server and I'm poking around a bit now to get familiar. If it proves to be problematic I will set it up on a Linux environment. This will be the only PHP project I'm working on (everything else I do is ASP.NET), and one of the long term goals is to target the latest PHP version. I'm basically taking over as lead dev for someone who has since left the organization. This person originally developed the application and unfortunately most of the domain knowledge left with him. Somebody else has been maintaining the application on the side, but they handle IT and server administration stuff and I was brought in to be lead dev on this app. Fortunately the app is stable and I'm not walking in to a complete FUBAR situation, but they're looking to add a change and few features and needed a dedicated developer on it. No better way to learn PHP (or any language/framework for that matter) than getting thrown right into the deep end!
One big thing to note about PHP (which differs from stuff in Java and I presume ASP.net also ) is that it evolved to spin up a new runtime environment for each web-request, so for a given URL there's always some "first" PHP scripts that gets triggered (by Apache/IIS) which then bootstraps everything up, handles a request, and ends. Almost all data-sharing between requests tends to be via a trip to/from the database. If you're looking into using Docker, [this skeletal demo](https://github.com/DHager/docker-php-library-demo) is a barebones Linux PHP 7 command-line environment, with some instructions for setting up a debugger so you can validate that the unit tests accomplish the difficult job of adding two numbers.
&gt; my approach is to work on refactoring/rewriting as features are developed, basically make a devils bargain that any features or fixes are tied to certain refactor goals, so if the business wants something done they have to accept a multiplier on the time frame to allow for refactoring of the entire subsystem "while the hood is open". Ever found a system that was so poorly modularized that refactoring one feature ended up requiring a refactor of the entire thing? I'm thinking about the same site I was thinking of in my original post... something like the way pages are navigated to - everything is stored in the session, including which page you're currently on, my mind just gets fried thinking about how to remove that requirement and have URLs that could be reloaded or copy/pasted. Because it's hard-coded to use `$_SESSION` everywhere across &gt;1M lines of code. As it is you visit a url that ends with `/Functionality.php` where "Functionality" is a gigantic PHP file that contains most of the functionality related to any given feature, but the actual page you see is generated elsewhere and unrelated to the URL that you're on. Also things like debugging... how do you deal with the need to debug anything when refactoring a site where turning on error reporting crashes your browser because it's sending so many notices and warnings? Thousands and thousands of them.... &gt; very few stakeholder in my experience (despite what they MAY agree to at the start of the project) will actually accept the idea of locking down feature development for the amount of time it will take to do a rewrite &gt; make a devils bargain that any features or fixes are tied to certain refactor goals, so if the business wants something done they have to accept a multiplier on the time frame to allow for refactoring of the entire subsystem "while the hood is open". What about requiring that the feature be developed in parallel for both the legacy and modern system? So they end up with double the work being done, or more, depending on how much needs to be done to make it functional in the new system.
/r/phphelp
I've tried it, it was much faster than my nginx setup for a basic symfony application - but it was much slower on a more complex application. I wouldn't use it in production at this point, maybe in the future.
You can post and issue to request it or make a pull request.
It's an Symfony application, comparable to Sylius in complexity but with a lot of auto wiring, compiler passes and a load of classes using JMS serializer annotations which causes it to be fairly slow in development mode (several second page loads) with our docker setup due to I/O. I've used the docker phppm/nginx container and it was surprisingly fast on a basic application. I then used it on the complex application and it would take forever to load, to the point my vagrant machine would use up all resources and slow down my laptop. To be fair, it's probably more the I/O of the app in combination with docker that's the problem - I'm sure it will run smoothly on linux without all the overhead. It just didn't perform well in my use case so I've not tested it further! I'm still using using it on the basic application I'm currently developing on, I'll probably be using it for a while unless I run into problems. I'll give it another go at some point though, just didn't have time to play with it more!
&gt;Hmm they made a new API and we still need to pass "true" by default as first arg to get sensible output? The hell :) It wouldn't be PHP otherwise. ;)
**extplorer** is nice one 
Your voice is nice and clear, you bothered to explain the newline, you explained what you were going to do -&gt; showed where/how -&gt; showed the result, and your axioms at the end were clear and useful. Overall, this is a great 10 minute tutorial that I think a lot of folks learning are going to appreciate. Nice job, really.
Too many variables to just give a ballpark. Depends on your design and theme, how customized your product pages are, how customized your checkout needs to be, etc. WooCommerce will give you the bare-bones in terms of managing/listing/selling products and you can easily have a boilerplate site up within a few hours. BUT! The time sink tends to be how far you want/need to customize the pages Woo provides. Sometimes it's just some CSS, sometimes you're (re)building custom templates. You don't want a shop to look completely different from the rest of the site, so the answer to your question is "it depends on a lot of things". That said, it sounds like you're about to sell your client something you've never done yourself. If that's the case, you're about to walk into a disaster of a project. Good luck with that!
Right... I've never done it, but conventional wisdom on Reddit is learn everything as you go. I have experience building Rails sites, so I'm not coming from 0 programming/web background. Just curious have you built something similar and how long did it take? 
About this long: `|&lt;-------------&gt;|` (Your scale may vary.)
Thanks so much!
I'be put together basic Woo Shops (with pre-purchased themes) in as little as 10 hours. I've also built fully custom designed e-com sites that have taken 2 months to dev. Again, depends on your requirements. "Learn everything as you go" is one thing sure, but "client is paying me and I've never done this" is another. In short, "Learn as you go" is great as long as someone else isn't unknowingly paying for your education (or lack of experience) and expecting you to deliver a solid product within a set timeline/budget. Having done my fair share of ecom sites (both positive and disasters), I'd say you're going to learn a bit, but your client is going to end up unhappy and you're going to end up frustrated. Regardless of your background in Rails. Sorry if this sounds harsh, but it's the reality of (ecom) projects, clients and greenhorns. *Edited for grammar and spelling* *Final Thought* If you run your biz/life by taking conventional wisdom on Reddit, you're going to have a bad time. I mean look at me, I'm a bit of a rude asshole and I'm just trying to help. :-\ That said, if I were in your shoes I'd build my own WooCommerce site on my own time and make sure I understood it all before even trying to bill for it professionally. 
Anyone try this with Magento 2? Could be a game changer if there are similar speed improvements
Please take this as politely as you can, but I do not think that this task is a feasible goal. I would take a look at something like Concrete5, it can do pretty much everything on your list if you want it to.
So let me get this straight: this makes php (including a framework) work more like Node.JS with its loading of the entire codebase into memory to serve multiple requests without having to re-bootstrap the application over and over again?
Thats how I read it, but I’m curious to see someone’s response who knows 100%
the reason you can't get into your stb is because you don't know how to use jtag. if the adversary has access to the hardware you're fucked, period. if you're about to suggest something involving the words "lid switch", you know you've already lost and you're spending your dev dollars in the wrong place.
I think all those things could be done with some effort in Drupal. Learning how to do this in Drupal (views, taxonomies etc) would be very much less effort than building your own CMS.
Indeed. I’m just trying to think of a time I’ve *ever* intentionally used the non-float version and can’t come up with one. And it makes even less sense given what this is for. 
Speed is all good. But I want to know how to architect my app for this model. Maybe some sort of tutorial, guide, tips tricks, things to concern etc. would be helpful.
Don't reinvent the wheel..
Personal production use and learning.
Well, I already know how to do all of these things in Wordpress. Learning the same in another CMS is not rational you know. Creating my own theme for wordpress with all needed functionality and making some fast unpacking procedure is still an option btw. Maybe I should do this, I don't know yet. 
Thanks, I will look at it. 
Take it from someone who has a modicum of experience in this matter: If you say " it looks like it's pretty easy", you're overlooking things. Sure "making the base functionality" isn't that hard. Making something with all that functionality that's also pleasant to use for all target audiences, maintainable and efficient is a whole different matter. If you're done with wordpress, why not pick up another good CMS that's built on modern PHP, like perhaps Grav, Craft or Bolt?
You honestly think I'd use jtag on my set-top box? See, that's the lunacy of thinking in extremes. Our clients are not our "adversaries". They're our clients. Most of the time we just need to charge their fair prices, offer good services, and technologically "nudge" them in the right direction and they'll follow. &gt; if the adversary has access to the hardware you're fucked, period. Well, I guess *you* are fucked, by your own extremist beliefs. I do fine walking the middle ground and I significantly have reduced the risk of abuse of my IP without having my clients hate my guts.
Maybe Bolt CMS matching my requirements, what do you think guys? Looks like it has all of this taxonomy, post-types, custom fields and easy templating functionality I look for built in the system instead of wordpress in which you need to do these simple things in a complicated way. 
You've got the point. And I was already discovering Bolt CMS just when you left your comment. Looks like it has all of these functionality built in, right?
A monotonic one, one that will never decrease.
What about multiple users, roles, permissions, comments, search, etc? If it is ONLY thise items in your bullet point list, you can glue together some community libraries but it will be missing a lot of things wordpress has. Use a standalone querybuilder/orm instead of raw pdo (Idiorm, Paris, Eloquent, they are the only ones I have any experience with). Use a standalone template system (Leage Plates is pure php, no new template syntax to learn but that documentation isn't so great in my experience). Use a standalone routing system (League Route) Might need a dependency injection container (League Container) although I've managed to get League Route working without one. Do some basic OOP tutorials and one or two about building the controller part of MVC. Maybe even do the whole MVC tutorial. Then after you understand it, throw away all the code that can be replaced with stable and tested community libraries like the ones I listed above (or better). https://github.com/PatrickLouys/no-framework-tutorial
I think CodeIgniter should work!
why php 7.0.26? Why not 7.2 or at least 7.1?
I dint understand the jump from "I need this out of the box" to "lets write it all from scratch! Starting from scratch you get *zero* functionality out of the box. If I was to bet on the expected outcome. I'd bet that the only thing you will learn is why you don't write your own cms (based on the questions you are asking). This is likely the best course of action as I've seen these posts, and usually no one gets talked out of reinventing the wheel. Additionally If you are doing client work, clients will be worse off if you are building brochure sites with a custom cms, ditto if its for a company. Do I think its particularly hard to build a cms? No, if you just ignore hundreds of features, yeah not too hard. Its features, maintenance that are the killers. A CMS at its heart is just a well polished admin interface for various bits of crud repeated over and over and over again, you dont need a tutorial for that. Sounds like fun spending hundreds of hours reinventing the wheel solving problems already solved and battle tested on millions of sites with a community that provides updates/ts for free. Hey grab a framework, Laravel, Symfony etc. My guess is you'll be back here in 2 weeks talking about how you dont need some "heavy bloated framework" and telling us you are rolling your CMS from scratch with raw php. The funny part is Rasmus Lerdorf agrees with that. Specifically he says you dont probably don't need a general purpose framework. If your problem looks like a blog, Wordpress is a better starting point lol. He actually suggests Drupal if your problem looks more like a cms, and you've already laughed off Drupal. https://youtu.be/DuB6UjEsY_Y?t=185 Your post is the technological equivalent of /r/Hold_My_Beer and you don't even seem to realize it.
So last time I posted here I said I was going to port my microframework project to Symfony Flex. Jan 1st I finally finished the port and honestly it was probably the easiest port I've ever done. That's mostly due to me using a lot of symfony components in my project though (from HttpFoundation to the Form package) - flex is honestly what I want in a framework. Only the bare minimum enabled by default, install the packages you need and get right to coding. I really like how DI works too in comparison to how I was doing things with tons of config files (unnecessary). Binding data to constructor variables from the service.yml file was easy and straight forward. Having everything necessary (DB, mailgun settings, stripe api data, etc...) in the .env file was a nice change too and just binding `%env(ENV_VAR)%` to a parameter of a constructor is way nicer than what I was doing before which makes respecting SOLID even easier than creating a ton of factory classes and what not to setup a project like Expressive. I'm excited to work on my next project with Flex, I'm still not entirely a fan of prebuilt bundles, but I get why they exist. Also shout out to everybody that helps with [recipes-contrib](https://github.com/symfony/recipes-contrib). Useful [alias](https://symfony.sh/aliases.json) link for those working with flex
You should create more video tutorials, you can inspire from: Laracasts and Servers for hackers
Concrete5 has a good, intuitive interface. I used to love it myself. So yes, I can probably solve OPs needs. However, their code base is some of the worst spaghetti and legacy polluted mashup code I've witnessed in an open-source CMS. I still have nightmares... If OP wants to extend and contribute his own modules, I'd strongly recommend not using Concrete5.
https://octobercms.com/ is also quite interesting in terms of flexibility and features 
Hi. Thanks. I do upload to my channel once a week at minimum. I have over 60 videos on various topics now. Feel free to subscribe. :-)
thanks! link the wiki is a bit of, https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)
If [this my.cnf is really your MySQL Config](https://github.com/sergeyklay/php-orm-benchmark/blob/master/config/my.cnf), then you're doing a huge disservice to your mysql install. Compile [fio benchmark](https://github.com/axboe/fio) and bench your database disk. Then set the following in your my.cnf: innodb_buffer_pool_size = &lt;should be 50% of RAM if you're running DB and webserver on same box&gt; innodb_log_buffer_size = 128M innodb_log_file_size = 256M query_cache_size=0 query_cache_type=0 innodb_io_capacity = &lt;should be ~50% of the next number&gt; innodb_io_capacity_max = &lt;should be your fio result, rounded down to the nearest hundred&gt; I'm more than happy to explain any of these choices if you need. 
That's a good summary.
Congratulations on all that work!
Do the results make any sense to you? Inserting a record in all frameworks but Phalcon take more than 100ms in average. I don't think that is the everyday experience of everyone else using those frameworks. It is definitely not my experience when using Laravel or CakePHP. I have enabled NewRelic monitoring for those apps and have never seen numbers close to those for insert operations. Maybe this benchmark is only measuring the time it takes the framework for initialising the metadata cache the first time?
No reason to be so hostile man, chill. I'm already researching Bolt because you're right, I shouldn't build my own cms for this trivial functionality. Looks like Bolt has almost everything I need. Content-types oriented website building is very refreshing after wordpress architecture. 
Exactly. Like in Node, Python, Java, and basically everwhere else. 
What your describing is WordPress, why not dig into the source and learn how they've built it and how you can extend it to fit your needs that it doesn't currently cover. You'll learn more by dissecting WP than you would from recreating it from scratch, you'll also more likely to come across edge cases you wouldn't expect to hit by understanding WP reasoning behind an implementation. Yes, WP code is not the best from a standards point of view - but as a codebase that is used by millions for so many years, you will certainly learn something by looking at its source. Spend your time building something with value rather than churning out something that is already in front of you.
I already know how to do it in Wordpress, man. I just need it to be more flexible and faster to build and it looks like Bolt CMS is what I'm looking for. 
&gt; The reasoning being, I'm never going to go wrong adding them out of muscle memory, but if I ever forget them when they are needed things can get really ugly. Isn't that what Code Climate and other code sniffers are for?
They are very cagey about the details of the name collision.
These benchmarks are terrible. If it literally took Doctrine 1/2 of a second to insert 1 record, nobody would use it. It's changed now, but no way it takes 200ms per insert. Also if you are judging an ORM on it's speed to insert and query records, you've missed the whole point of an ORM.
This article is terrible. You could replace PHP with Go/Node/Ruby and it would read exactly the same. There are also so many factual errors, it's not even funny. &gt; It comes with protection against viruses making it the most secure option for web development. No it doesn't. The server it runs on is protecting it from viruses. It's also nowhere near the most secure option for web development. It's also the developer that makes it secure, not the language. If it's so secure, than why to most Wordpress sites get hacked? &gt; It helps reduce development time because PHP uses its own memory, making the workload of the server and it’s loading time to reduce. I'm not sure what I just read. Every program ever written uses it own memory. &gt; It supports all the platforms and servers. You can build a website on Windows, MacOS, Linux, or any other browser, PHP Web development supports all major web browsers. So do so many other languages. &gt; It is the easiest server-side scripting language than other scripting languages; therefore, developing a website using PHP shouldn’t be a more trouble for those who aren’t quite technically proficient. And that's how you get horrible code. &gt; You can also edit the changes you want to make, thereby making it an easy and quick to use. Wow you can edit the code once you do it? And here I was using punchcards making my code so hard to edit after I wrote it. &gt; It’s an open source, and thereby using it is FREE and thereby cost-effective for your business. It doesn’t require you to buy expensive, extra software. Pretty much every language is open source and free.
this seems like spam lol
That's a good point, although one benefit over having DTO on a specific method, rather than a generic "handle()" method is that you can discover the set of commands supported (the discoverability issue I mentioned), and I can specify the exact DTO class the specific command expects, rather than "Command". In my personal work, for long-lived services, I use arrays with named parameters, and I optionally provide DTO versions with convenient builders for the *stable and commonly occuring parts*. So then the method accepts both formats, and can internally normalize arrays to DTOs or vice versa depending on its internal preferences. Frankly I rarely sit down and write DTOs for every single method, as there's no much value in this. The runtime error is more than enough to catch the occasional parameter name typo. It's more about things like authorization information (containing user IP, tokens etc.), and common entities (like users), I write DTOs, as those show up in almost every service method.
Yes, it's a static analyzer. Actually, it's a little bit more of them xD https://github.com/exakat/php-static-analysis-tools Well: 1) this one works on the fly (you need PhpStorm or IDEA Ultimate to run it), so you don't waste time to fix build and not switching context. 2) Alt+Enter fixes code for you 3) it does very sophisticated types and control flow based analysis. You might also hear about it's OSS predecessor: https://github.com/kalessil/phpinspectionsea (in case if you want to play with it, here getting starting notes - https://github.com/kalessil/phpinspectionsea/blob/master/docs/getting-started.md)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kalessil/phpinspectionsea/.../**getting-started.md** (master → de49647)](https://github.com/kalessil/phpinspectionsea/blob/de496477d521c634aea62378cbbec8d18982918c/docs/getting-started.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dsf459d.)
ublock seems to be fast to update filters, matomo is in blocked list 
"Rational", you say? Let me tell you, building your own CMS is not rational.
Isn't that the same software? So he changed the name to avoid competing with himself?
Piwik Pro was co-founded by Piwik's author but he later left. Which is why it's confusing now.
I debated also suggesting turning off some extra data safety features of InnoDB: innodb_flush_method = O_DIRECT innodb_flush_log_at_trx_commit = 2 Those two things are fine for local development where you don't care about data safety, but in production you shouldn't really use them unless you'd be OK with a few seconds of data loss if something were to happen to the DB server. The question really becomes how close to a production environment do you want to run benchmarks under?
Its a bit weird, because the piwik trademark is his own as well, so even though piwik pro also exists he could maybe defend against that. But the problem is probably that he allowed piwik pro trademark some years ago, and from a legal perspective this means accepting the use and not being able to fight it afterwards. https://euipo.europa.eu/eSearch/#basic/1+1+1+1/100+100+100+100/piwik
&gt; Well, you are benchmarking the middleman, not the write layer. In theory, sqlite in-memory should be used here to avoid as much I/O as possible and show the actual tool performance impact. Yeah, I suspect we've now picked enough holes in how these tests are run for sure. It's a good thing to read through to get a good understanding of what a good benchmark needs to do.
&gt; big community (5,655 stars on github, Ratchet has only 3,933) heh
So workerman is good to create sockpuppets :P
Good read, thx
This says absolutely nothing without clarifying the environment used for each test. You can't take away anything from reading the documentation. 
I think the most correct answer is don't.
Now read perfomance, plz.
This says: * SplFixedArray stores good only values. If you put array or object in SplFixedArray it won't have effect. * You can have effect from SplFixedArray if you put SplFixedArray in SplFixedArray. * Most effective way is packing data with "pack" and storing it in memory (but packing is very slow). * You can save data in memory more effective than in redis.
I've used it for a few projects. I really like it. The dev team is very active and their slack channel is incredibly supportive. No regrets.
Without specifying the platform, there's nothing learned from the numbers you're showing. So specify PHP versions, Node.JS versions, allocated and available memory and CPU architecture and power, as well as wall time and profile per test. Even then you're comparing apples with oranges, but at least they can fit in the same fruit bowl. You can't very well make those claims without mentioning the environment in which the rest ran. At the very least the performance of your chosen SPL Array and the PHP array structure have been optimized very differently throughout PHP versions. You're also not giving any explanation behind each result. The number of operations for the size of the lists that are made under the hood matter a lot. You're testing a really specific use case here and you'll see really differing results on varying sizes for varying stack implementations, even within the SPL. So really your documentation is saying nothing at all, except that somewhere on this planet a bunch of numbers could be seen on your screen and you made a lot of assumptions out of them.
This is very interesting. My takeaway from it is, in stock PHP, [SplFixedArray](https://secure.php.net/manual/en/class.splfixedarray.php) is the way to go. [pack ()](https://secure.php.net/manual/en/function.pack.php) may use less memory but being unable to immediately access the contents makes it less useful than SplFixedArray. Have you thought about benchmarking performance/speed too? Knowing which is fastest in conjunction with RAM use would be extremely useful information!
Go right ahead. And never underestimate the capacity for a business to want new reporting on old data. ;)
Building CMS is not something you start and finish doing at once, alone. My take would be, instead of making your next project in WP, try to do it in Symphony or any other framework of your choice. Start out with your own basic classes, methods and build over time. Try to keep backwards compatibility as much as you can. So plan good, plan accordingly. Wordpress was build throughout the years. It has a ton of procedural and object-oriented approach mixed a lot. That doesnt mean its badly written, but you can definitely think of better ways to solve things and other things to keep / copy from Wordpress. I would go trough the WP code for a few weeks, make a list of things you would like in your core and build from there. Since I am using WP a lot, Here are few things from top of my head that I like dislike / like about the CMS. * hooks/filters -&gt; amazing stuff. Copy that shit. * wpdb class -&gt; terrible way of handling queries. The sole reason of all WP vulnerabilities. Maybe check how Drupal handles this? * Database -&gt; no support for custom tables. Why? I would love to have some CPT in separate tables so i keep the tables clean. Each CPT has its on table/meta-table. Also maybe offer a way to have column based meta storage as well? * Templating is pretty much basic, this needs improvement. Maybe use Twig/Blade as a templating engine out of the box? Host it on github, post it everywhere, maybe someone will pick it up. Good luck 
Of course it is php7. Of course it is x64. Other parameters of environment are not important because the internal architecture of php did not change significantly after the release of php 7. Otherwise the extensions would be incompatible. But you are right. I did not specify nodejs and redis versions. I did not specify the time of execution. But I've opened all the source codes and anyone can repeat test in any environment on any versions.
What about the [ds](http://docs.php.net/manual/en/book.ds.php) and [msgpack](https://github.com/msgpack/msgpack-php) extensions?
How do you deal with a single back slash in a json string? I have something like: $json = '{"something": "\"}'; $result = json_decode($json); print_r(json_last_error_msg()); and I get: &gt;Control character error, possibly incorrectly encoded I know its because of the slash. I am just not sure how to fix it. I am getting this json from a remote server so I can't change how its coming in.
I can't think of a reason as to why I would ever need 11 million items. Looping over a structure; of some sort I would use some kind of pattern to turn one big problem into a lot of smaller problems.
Xdebug is meant to debug code and tell you what a variable contains. AFAIK, it wont point out errors in your code. now if you set a break point on $value there, that should make something happen.
I guess I misunderstood what "debugging" actually is. Thanks for the link, I'll give it a read.
Agree with /u/johmanx10, the environment is always important. You want to outline the hardware used: cpu type, cpu speed, cpu burst-able speed, memory, hard disk type (eg ssd, hybrid, scsi, etc), disk size, etc and so on. You also want to specify software, such as OS/version, PHP config: stock? custom? pre-packaged ? custom compiled? what modules were loaded? etc. Without that information, your time and effort really was wasted. Nobody can use your data as a baseline, because the baseline was not thoroughly defined. While the internals of PHP may not have changed across platforms, those platforms may in fact have different side effects from each other. You’ve put this much effort not your analysis already, so go the rest of the way and make your data more useful to the community. :-)
Before encoding it, just add another backslash `{"something":"\\"}` https://3v4l.org/8XWrb - if it's parsing on a remote server, that means the json isn't being parsed correctly and needs to be fixed on the remote server. If it's not your server, I'd recommend contacting them to fix the error, there's no reason to try creating a workaround for a case like this because once the error gets fixed your code will break and you'd have to fix the issue again by reverting changes.
I can't think of a situation where I'd need 11Kk (11M?) objects like that in application memory. Dump them to a database and query for only the information you'd need!
I’m not sure what this post is trying to accomplish. But Amp is a better async library IMO.
Ok, so lets do real world apps now. Hello world tests prove nothing
From the start, this was a job for REDIS , this is why Redis exists .. why would you store big data in volatile php structures, who can crash anytime because of memory limitations, when you have a stable, scalable and persistent memory store like Redis?
For starters, if you are building a database... I built a message broking system a few years ago. It kept a table of all users and their subscriptions in RAM, indexed by subscription source. Every time a new post was made to one of the subscription sources we needed it to fan out to one message per (subscribed) user. We were managing about 200 new posts per second with 2 million users. Keeping a table in RAM was perfect for our use case. 
He probably means 11M, I see "kk" as a way of saying millions in online games a lot
It's a huge open source PHP project, and I would think widely considerable to use for web developers in general
Most databases will keep common queried data in memory anyway 
The most correct answer is "depends". I have a cron job that runs lots of code related to the website, but outside the website. How I store millions of items in memory for report generation? I increase the memory limit.
Unless you don't need them stored. You know, that depends on the project.
It's another process, over a socket or pipe, and it participates in a complicated MVCC reconciliation algorithm that might hit disk even if all the data is technically in memory. So it might be in memory, but there's a big difference whose memory it is, and how it's used.
Hello my friend
Hello bro!
Check this out: https://github.com/ace411/Bingo-Framework
I did this comparison during the contest [Highloadcup](https://highloadcup.ru/rating/). I could use redis but I needed to be faster. So my code was slower 4 times than the code on c++.
I can't believe some are still writing require and include statements. There's only one you should write and that's `require __DIR__ . '/vendor/autoload.php'`
Making a CMS is the same as rpg for game developers...
Привет
You don't build a database in any of the languages tested. User the right tool for the right job.
Whether or not you need to store them long term, you don't need all of it in memory right now. That amount of data doesn't just magically appear in memory. They has to exist some where. Stream them into apolication, and work with just the ones you'd need, and stream them out if you don't need to store them long term. 
Where could I examine that patch? I looked at https://github.com/morrisonlevi &amp; https://github.com/php/php-src
Would be nice if the examples has comments in a more common language (I'm sorry, I don't speak "foreign")
Hey bro)
If it has learning purposes, pick a good micro framework. But first, try to define what you want it to do, rather than start programming. Perhaps you can find a library (or more) that do part of the functionality. Work with a TODO-list (or some suitable issue tracker), which you can prioritize. Before programming, try to read about the part that you want to realize. and of course, try to estimate how long a part will take to finish (and see in the end, what the real time is) You can learn from estimations as well. Don't forget to build tests for the parts (&amp; units) you make. Don't try to build the final product at once, but like in scrum-terminology: make something that works in a couple of iterations, and then improve the product along the way (with some good refactoring). Try to document along the way too. I probably missed some sh*t, but: you'll get it, it's not a "let's make a CMS quickly" kind of solution, and you will learn for each of the aspects I told you.
I assumed the decode key had to be manually entered at boot (I haven't bother with whole disk encryption before.) If the machine can self boot then disk encryption is worthless. Actually only the disk/folder which contains the code needs encryption. e.g. truecrypt. 
Hey bro, I'm a PHP fanboy and would gladly hang out with you and talk about it. Send me a PM if you want my skype or something :D 
Seems like either json-decode or PHP objects are horribly inefficient compared to node, but the benchmarks differ a bit.
As long as the contract isn't terminated, you should sit on your hands and expect the one who signed the contract is in charge. Otherwise you just show that outsourcing to the lowest bidder is viable.
You're not wrong. You're not wrong at all. On the other hand sooner or later somebody will still have to clean it up, and we all agree that when the contract reaches EOF it wills stay dead. I'm just trying to make my life easier. The commit history is always there if I want to make my case later on. 
When I've experienced this in the past, the best solution was usually to delete the code and write it again from scratch - that is usually less work than trying to make poor code work.
asgardcms with laravel is also good.
Manually entering a key isn't really feasible for a production system. Also, who is going to enter the key?
That's pretty much what I'm doing. Refactoring as I go. The company itself isn't huge or anything(about 100 employees overall). Literally everybody agrees that this was a bad idea and they won't do it again, but for the time being, we're stuck with it. I'm not providing free work, and I never did, once my 8 hours are done I'm leaving, I don't care if the whole building is burning down. I don't get payed for extra work so I'm not doing it. Besides, I like my mental sanity and I intend to keep it. The manager understands the situation and has given us a free hand regarding the approach, extra time included. For now I'm just stuck with this and trying to make the best of it.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Let them do some complete other projects that are not business important, but more or less some fancy side projects like.. I don't know.. some Intranet work similiar things? Maybe small contact list with search for the company? Or a file management system.. Anything that even if they completely bullshit around, it's not worse. Threat them like students or even less. So in the low end you may pay for their work, but you don't have to waste the complete time and money. The most important thing: Do not outsource to India. They may only take 8$ (not hourly based.. PROJECT based), but well.. you see.. quality difference is a thing! Better take some quality or take more money and hire an German developer and win more money with the quality!
Or a spanish one ;)
Oops. Sorry, I forgot to translate the comments. I will translate them today. Thanks for the feedback.
Hi, leave there your telegram, and we'll can converse about anything
I'm freelancing myself, and I have taken over projects that some guy fucked up. If the project says "80%" done or something, those are the projects that you should avoid at all costs. There is a 20% work left because the project is so messy and in technical debt that it can't be completed without a rewrite. If the code is horrible, just dump the code away and start afresh. PHPCS/fixer can format most of the code without proper alignments, etc. It helps if the previous developer had a test suite built. 
Your English is very good already
This is how I would go about it. I wouldn’t pay for garbage code. It’s not helping, so why would I pay someone to screw over my project?
&gt;payed
If you're stuck in the contract, give them feedback and have them start over. Rinse and repeat until it's over.
Was just going to say this, buddy of mine had to rip apart 2k lines of code and fix almost the whole thing. He admitted that it would have been easier to write from scratch
Yeah, but if you clean it up to soon, then the yahoo's how decided that the bottom line was more important than good product don't get to feel the pain of their mistake. No pain, no gain ( in knowledge, in this instance). I would definitely look for, and fix, anything that might cause a huge bugs/security issues, but other than that I would let the rest of it go. Yes, you're allowing a lot of technical defect to build up, but that's not your problem (yet).
Just don't think all outsources are like that, but if you go for cheap and especially India - yeah, your company did it to itself. First - i'd try to break off the contract due to quality of work and if that's not possible - do not accept and/or pay for the work, unless it';s up to some decent level. Second - you did good with higherups accepting the situation and willing to do something about it. My advice would be making sure that situation is known by everybody relevant, resources are allocated to dealing with it and there is no blame on the developers for the situation. Basically - cover your ~asses~basis :)
If the contract didn't explicitly specify deliverable requirements other than someone had to keep a seat warm, all you'll get are seat warmers. Why would the outsourcing company give you better people when the contract specifies you'll accept the worst they have? The only reason is they hope to get a future contract out of you. I would advise not trying to clean up after them. Just push back anything that's not good enough immediately, and don't accept any work on your plate that is caused by them. If you undertake the cleaning up of their work then you're implicitly agreeing they're performing as intended. Once you have a documented track record of them not performing to par, you take it up to management level and have them either provide you better developers or renegotiate the contract, using the possibility of future contracts or of damages claims on the current contract as leverage. 
Now that you have all this free time (sarcasm, wink wink) you should work on automated coding standards and set a required threshold. (If your company isn't buying into this in 2017 then you have other problems). There are many tools available but here are some examples: + codecov.io: diff hit target 50%, equal or increased coeverage than before + travis.ci: Does the build pass? Does the build adhere to your coding standards? (phpcs, eslint.js) Bare bones stuff. IMHO stops a lot of garbage. You can also use mess detector, code complexity, ... just look at any contemporary project on GitHub with badges? 
So, I have to improve it because I wanna pass Ielts
#Enforce better coding standards No matter how long it takes them to develop a feature; it needs to be of the same code quality as the rest of your codebase. Even if that means they get 5% of the work done; at least its 5% that's production ready. Anything other than the current standard is basically 0% done b/c no-one in their right mind would want to ship it to prod.
Pause the current work. Get an in house architect to redesign the base structure. Delegate to that team from there and see if they are competent enough to fill in the blanks. If not, cut them loose and forget about sunk costs. What's wrong with their work? Were requirements unclear? Don't like their coding style? Too many specifics missing.
Indeed, that's a valid optimization. Another similar approach is "sliding window" and so on. But all of those are only necessary when you can't fit things in memory. Which if you can... then you can :) Optimizations typically trade one resource for another. In this case you trade less RAM usage for extra CPU and I/O as managing those windows/pages requires extra work for those resources.
Requirements were as clear as they can be. Leaving aside that the coding style is just not there to begin with. They failed to use even the most basic tools provided by the project. We're using Twig as a templating engine. Emphasis on "we", as they didn't. It's just `&lt;?php` tags all over the place. God classes, functions in classes have no visibility assigned to them, I believe some code was literally copy+pasted from stackoverflow. They insist on not using OOP where it's possible and just include files with functions. They're either not using composer or have no idea how to use it. No namespaces. They keep using bare-bones `mysqli` when we're clearing using Doctrine. The list goes on and on. Basically imagine if Wordpress was entirely written by somebody who just got into coding.
Yup, just burn that bridge. Get whoever negotiated the contract to negotiate an amendment to end it.
[removed]
this is not really practical the way you may imagine with remote sweatshops ... the communication and back and forth overhead will cripple you
if you have the power try to cut the loss short and terminate the contract
The fact that you used a remote sweat shop without any quality control or investigation crippled you from the beginning. What I have found is that in these situations the worker on the other end is not malicious; they are just doing what they know. You have to educate them on what to do, and if you aren't willing to put in time training them then you might as well ask them not to do anything.
I'm happy to hear you can deal with it. I don't have any good tool recommendations though. 
It's an advertisement. Their lovely website http://www.workerman.net, [pictured here](https://i.imgur.com/JJiHLOH.png), probably has a service/product to sell... but I can't read it. It also spams the old AIM 'new chat message' sound which is fun. The right most button in the navigation bar translates to "Application market" but is blocked by my firewall for being "Suspicious content"
enforce test driven development. have somebody spend the time up front to write the tests. i know it sucks, and that writing tests is sometimes harder than just doing the code yourself, but it’ll work out better then going back and forth 25 times over whether they’ve met the acceptance criteria. And in the end, you’ll have a testing framework... yay!
Again, the communication and back and forth overhead will cripple you. They are not malicious, they are often inexperienced ill-educated tired over-worked and short on time. It's not worth "training them" especially when it's not a long term thing, you will lose even more time and money.
This so much. Don't cover for their incompetence. Let them feel the sting of outsourcing to India so they think twice next time. Otherwise you're always going to be stuck cleaning up.
I apologize if this seems rude but I never heard a success story that started with: "Recently the company i work for decided to outsource some work to India." Now obviously this might just because people to whom this story is successful will take it as normal and not brag about it at the same rate as those complaining, but... and this is an honest question, does anyone around know of successful stories with php work outsorced in India? 
Yes, actually. I had a project that was run and completely managed by a company in northern India. They provided the PMs, ran the meetings, did the graphic designs, etc. Now, I have not done code reviews specifically on what they have written but they stuck to their budget (although the timeline slipped some, IIRC) and the client overall has been very happy with them.
Only outsource small bricks of work which would be easy to implement. Usually easier said then done :D If you are lucky management will care, most of the time they will not care about code quality but if the thing works or not and can earn money.
&gt; Get an in house architect to redesign the base structure. Delegate to that team from there and see if they are competent enough to fill in the blanks. This is excellent advice. In general most I have worked with are good at "implementing" things. If you can break things down into components that they then implement, this can work really well.
Even more reason for you to be vocal and cover your own back - as can almost guarantee that the person whos signed off on this won't do the same for you. 
While this sounds ideal. One has to spend a whole lot of time to tell them what's wrong and how to fix it. It feels like teaching them to be better programmers while paying them for it. For me, I've decided on letting them do as they want. My boss just wants an MVP to sell. Until I have a bigger team and when the product's successful, then I will plan for a version 2 that will be built from scratch.
Some of the best developers I've ever worked with were Indian. Thing is, the good ones get the fuck out of India and go to Europe or the US.
this, just let all static analyses you can find run on it... and make them follow code style guidelines. make them write tests for their code.
easier yes, more productive or better? harder to say. usually greenfield rewrites simply exchange one set of bugs for another set of bugs, though it may make the code more extensible , better documented and better structured, often this can be simply achieved through refactoring plus you get the benefit of knowing where your bugs are
I deal with billions of records on a regular basis, and have never dealt with a situation where loading data into apolication and then performing reporting tasks on it (aggregation, summarization, creating pivot tables, etc.) is faster than querying a proper data source. People who knows what they're doing with large datasets work on database projects instead of reporting projects for a reason. Commercial BI tools exist for a reason. Leverage the correct mixture of tools for the correct job so you don't end up wasting your (read: company's) time reinventing the wheel. 
A lot depends on how bad the code is, sometimes it's beyond redemption. It can be extremely difficult to refactor existing code without introducing new bugs, especially if the code lacks a testing framework.
&gt; I deal with billions of records on a regular basis, and have never dealt with a situation where loading data into apolication and then performing reporting tasks on it (aggregation, summarization, creating pivot tables, etc.) is faster than querying a proper data source. You're saying you haven't tried everything and don't know everything? It's normal. Same with me and anyone else. &gt; People who knows what they're doing with large datasets work on database projects instead of reporting projects for a reason. Commercial BI tools exist for a reason. I don't know if you've heard of these little things called "map-reduce", "event-sourcing", "lambda architecture" and so on. Read what they are, and why people more often use *these* approaches to processing large datasets, rather than stuffing everything in SQL and querying it there. Now these architectures are often used to deal with large volumes of data over a large cluster of servers. But one thing they have in common is they crunch lots of data and are completely independent of a database being present. They mostly keep data local in each individual processes' memory and then pass it to the next part of the chain of processing. Saying "XYZ exists for a reason" without knowing the exact reason is nearly useless. The things I just mentioned also exist. So they exist... for a reason. Except the reason they exist is closer to the kind of processing I'm talking about. And at smaller scales, when your entire data set is just millions, rather than hundreds of trillions of data rows, you can just load it in RAM in one machine, crunch and produce the report with least amount of effort, and in least amount of time. A good engineer cares about details, and cares about a full range of solutions. They don't promote silver bullets and one approach to everything. Why do you? Are you afraid you might learn something new? I do use databases. I like databases. SQL and any other kind. I don't discriminate solutions here. But you don't need to stuff things in SQL unless you need the persistency and multi-user atomicity, consistency and isolation. That's the problem SQL exists to serve. If I can crunch all this data in a second in a single thread in RAM, all this extra database back-and-forth is basically a pointless cargo cult dance. 
This seems like a very poorly put-together bulletin, alarmist in nature. It links to https://www.cisecurity.org/advisory/multiple-vulnerabilities-in-php-could-allow-for-arbitrary-code-execution_2018-003/ which just details some recent bugfixes, few of which relate to security.
So they basically putted the whole changelog of the patch versions as security issues?
Hardest part is that stakeholders never want to hear this - it's usually management decision and they never wrong. This is why I hate it so much - no matter what shit we get we cant rewrite and stuck with gazillion of bugfixes instead, ALWAYS spending more time then writing in house. fucking retarded practice.
Map reduce would exactly lead you to the right tools. You wouldn't load 11M record into a single application memory on a single node of 16G memory as you suggested earlier. Map reduce are done via the right tools such as EMR or self hosted Pig/Hive+Hadoop clusters, which typically have applications in Java (not php/nodejs/redis per linked). Since lambda is billed on memory duration, more the reason to off load all the expensive memory usage to shared environment or better yet, S3 via Athena/Spectrum. Events? Pipe them through Kafka, and stream the records you're working into application and pass the output on wards. Again, I'm huge on leveraging the right tools for the right job. Streaming 11M records through PHP/nodejs for reporting needs? Sure. Loading them into a single PHP/Nodejs application? Not so much the right tools for the job. 
use a code linter. it will find sections written with bad style or conspicuously broken idioms. In your dev env, crank up the error reporting settings in PHP to something that will expose a lot of bugs due to poor code quality. E_WARN and E_NOTICE at minimum. write integration tests for the user workflows that got outsourced. you'll need these as you refactor and debug. start code reviewing their work yourself. reject transparently bad code and ask your business manager to lean on them hard and use whatever leverage you have in the contract. your worst case scenario is you take a write down loss on the contract and just do it yourself, which might be more efficient (and less expensive) if the situation is as bad as it sounds. to avoid the worst case scenario try and figure out what kind of work this company is actually suitable for. if they can't be trusted to do the implementation code maybe there's something else they can do. 
The only two bugs that were patched on all supported versions (including PHP 5.6) are: Bug #[74782](https://bugs.php.net/bug.php?id=74782) Reflected XSS in .phar 404 page Bug #[75571](https://bugs.php.net/bug.php?id=75571) Potential infinite loop in gdImageCreateFromGifCtx So perhaps those two are a the actual security risks?
You might be on to something. Gonna post the details in a top level comment.
/u/niaxilin found that the two bugs in common that were patched across all versions of php in the Jan 4th updates were: * Bug #[74782](https://bugs.php.net/bug.php?id=74782) Reflected XSS in .phar 404 page * Bug #[75571](https://bugs.php.net/bug.php?id=75571) Potential infinite loop in gdImageCreateFromGifCtx Looking at these two bugs in more detail, it seems they could be part of the motivation for the security notice. From the XSS issue: &gt; When creating a .phar file and configuring apache to handle phar files using php, when accessing invalid page the page name is reflected back to the user in the 404 response. this user input is not being sanitized and therefor it is vulnerable to a reflected XSS. &gt; meaning, every site which configured to run .phar files using php is vulnerable. Also looked at the other one. Looks like sites using GD could be vulnerable to denial of service attacks unless they update: &gt; Hi, I found an infinity loop in GD GIF core parsing function. &gt; It is easy to trigger in web application if the web use GD as its image library. For example, It can be triggered by the following functions &gt; * imagecreatefromgif * imagecreatefromstring &gt; This vulnerability will lead to a Denied of Service and exhausted the server resource.
I would enforce harsh versioning policy on pull requests from them. as long as code hasn't passed strict static code analysis, no PRs. It would endup costing company more at end (it will anyway) but at least you would be spared good part of it 
&gt; India Why did I already have that name in my mind when I saw the word “outsource” and “damage”? As unfortunate as it is, and probably a little on the racist side, I’ve never in my years seen a single piece of good code come from outsourced Indian devs. Yet strangely, everyone uses them. End of the day, you get what you pay for. Sorry that this happened. It’s of no use now, but in future, ask for code samples and some pre-contract work before actually signing a contract.
Just break the fucking contract. It sounds like they haven't followed any of the modern practices and that would justify breaking the agreement as they are not holding up their end of things. Unless you paid them all upfront (which is horrendously stupid), tell them their work sucks ass and give them notice that you won't be needing their services anymore. If you're a US company and they are an Indian company there isn't much they can do. Then you rewrite everything they touched from scratch. Nuke it from fucking orbit.
This set of releases does contains security fixes (#74782, #75571, #75535), but there is nothing particularly special about them -- new PHP releases often come with some security-related fixes in PHP or bundled libraries. You should of course always try to keep all your software, including PHP, up to date.
done
we don't take kindly to your types postin' security vulnerabilities around here all the time, I wanna now something from Mr. SuperSecure here, how come you types are always suggesting dem funny security updates to install?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
exactly this: whenever i see shit code - doesn't matter where its from - i make it a rule of saying "X is shit, we need to rewrite, refactor, or I aint touchin that. whoever wrote it, fix it." ... I gave my body to incoming bullets too many times to know better.
&gt; Just want to add that I know that there are quality Indian developers out there I've worked with several companies that have outsourced to India. Of the maybe hundred developers I've worked with, ONE was decent. And I only assume they were decent because the business I was working with was building stuff with SugarCRM and he knew his stuff. Although, anytime I'd ask him to show me where to make changes to things, he'd never tell me. Ever. I finally asked him why and he said "job security." Welp, they didn't get the next contract. In my experience, Indian developers will only hurt you. Even if they do know their stuff.
This post seems more like a vent than an actual question but here is my advice. I have spent much of my career (very long one) refactoring outsourced code and managing remote teams. You did not mention if the contract contains any quality control provisions, eg. if the code does not conform to code standards, or functional requirements then they must redo it on their dime. If it does not you are pretty much fucked. However my guess is at the very least you can ding them if they didnt adhere to the requirements. If that is the case here is what you can do (I have done it many times in the past). Work extremely hard on making the requirements very explicit and very narrow. Dont give them components to work on, give them classes to work on. Assign your onshore developers are "managers" in charge of each component. Have each "manager" spec out their component they need written, down to the class level. Have the "manager" build out interfaces and unit tests for each class and make the requirements such that they must conform to supplied tests and interfaces. Make the requirements such that it must pass code sniffer and mess detector on a specified configuration (or any other static analyzer that you care for). Specify that it must pass a code review from the "manager" before merge. If this sounds like insane babysitting it is, but its still usually more productive than simply refactoring or rewriting their code. It also will make you actually THINK much more about the architecture and requirements than you probably have actually done. In the end you will likely end with better software. I have found most indian/asian devs are not as incompetent as they may seem and usually can do quite well if given extremely specific and extremely narrow requirements and standards to reach. You will also have to interrogate them severely and frequently with respect ot any problems that might have arisen as they will be reluctant to tell you. I have found the following cultural problems contribute significantly to failure of oursource problems. 1) poor communications. you are used to dealing face to face with a person who comes from a similar cultural context to you. They probably do not really understand what you are telling them on a deep level, however thy will not admit this because of point #2 2) Fear of conflict/failure - Asian people tend to avoid conflict and admitting failure. This is a known fact. It has lead to planes crashing because the co-pilot is too afraid to admit to the pilot they are about to crash, even though they know its coming. Asian devs will tend to avoid giving you "bad news" or talking about problems until literally the world is crashing down, and even then they will be evasive and minimize it. This is not to screw you over its just a cultural thing. They actually will tell you about problems but its in a frustratingly weird and evasive way that you probably arent picking up on. I generally avoid working with them if i can for this reason. However if you are stuck with them then you will need to constantly hound them and find ways to test if they are telling the truth. A great example is deadlines, they willnever admit they are behind on a deadline until the deadline is already blown, so you need to keep an eye on their commits and track progress so you know where they actually are. They also wont ever admit they dont understand. You should be using automated tests or some other way of determing that they actually grok the requirements. Worst case simply make them explain the requirements back to you in their own words. 3) poor abstract thinking. this is especially true in china but generally true with most asian cultures. they are extreme conformists, they can understand how to do a technical task they have been trained to do but abstract thinking is generally not encourage. therefore it is very hard for them to take general requirements and make them specific. Eg. many firms hire western analyists because the asians have a hard time taking abusiness problem and translating it into a technical domain. Therefore you cannot give them high level requirements especially if the requirements talk in the language of the domain/business problem (which they probably dont understand anyway!) the requirements must be ***extremely specific and technical*** in nature. This is why my best results have come from giving the developers a set of interfaces to use as input and a set of unit tests to use for validting the results. I suggest PHPSpec may help you in developing these , but PHPUnit also works.
Document as many errors as you can and with that reason cancel the contract immediately, start from scratch and move on. If they insist you can sue them for the damage they created. Start documenting the damage even if it sucks.
with all due respect as a manager/lead on numerous teams, the OP is the type of guy i would earmark for promotion, bonuses, special recognition, etc.. because he is taking initiative to help the team and company reach its goals. the "oh well, not my job " guys are the ones i lobby hard and loudly to have fired.
yeah sounds like amatuer hour on the part of the management, it seems like they probably have no experience with outsourcing and really did not think through it well. i agree this is prob the best course of action for all involved.
wp is a disaster, id use the latest drupal over wp
Considering you as the personification of managment have brought this trouble on him in the first place ... I would have preferred you to say that you would have terminated the contract immediately and worked on implementing a way of quality checking outsourced jobs in the future. What you propose is just chaff that hide the underlying fact of an inadequate management process.
thats why the first thing you do is build tests. if you are refactoring without tests you've fucked up. you have to build the functional tests anyway if you are going to rewrite the code....yes some code is worth throwing away but not usually. reason being in most complex systems capturing and extracting the business logic is extremely hard especially in a poorly designed code base.
if you choose to fix the issues they caused but can not (or will not) fix, then make sure that you have a time recording system in place so that you can accurately track how much time is spent resolving the issues. When asked later how the project went, you can point to the N hours (times x dollars per hour) spent locally to correct the issues from the failed outsourcing effort. Dollars speak a universal language.
pm and team lead rarely have the authority to terminate a contract. at least nowhere i have worked. maybe u have had more latitude but generally those decisions are made much further up the chain furthermore i would never sign an outsource contract with india, and especially without having quality control standards, see my lower down post about amateur hour. it does not seem the like the CIO or whoever at that level has much experience with outsourcing.
&gt;There are very few automated tools that I'm aware of. PHPStorm might have a &gt;limited set of refactoring commands available. phpspec, phpunit, code sniff, mess detector...at a minimum! 
Problem with India's culture - they are a "yes boss" and "everything is okay". There is info on the internet how to deal with Indian developers, it might smooth out the issue and make it manageable. But your managers probably gonna be hating it till it ends.
How many levels are you removed from the contract signing level? It might be that I'm used to very flat organisations, but if you can give a raise, I expect you are the one telling the CIO what to sign. If not, I think that's a problem to solve first . 
The ideal thing is to get your lead, or someone he nominates to actually manage the interaction with offshore and make sure that the work is being reviewed and kicked back appropriately. The same thing you would do essentially with any internal work. Obviously because of the quality of the devs in question this is going to be more time consuming, but you have already recognized that you're going to take a hit on this one way or another. So just treat it like code coming from a junior on-shore dev. Hold the hand, double check the work, comment on the MRs, don't merge it till its correct. Honestly, this is the only way to work with an outsourced team regardless of if you got suckered or if they are amazing. The difference there is jut how much you have to sink into management overhead to get the work product you are paying for.
One of my reasons for total rewrites is when I see things that are glaring mistakes made only by inexperienced coders and lack of security considerations. At that point, there is no telling what other major issues may arise if you try to build on top of it.
Just delete everything that is not easily usable and convey the exact cost vs benifit to your boss. Should be a no-brainer to toss and call it a loss.
This is the best description of software development companies and software development jobs I have read in my life. 
This 100%. The amount of explaining and training you will have to do will overwhelm and cripple your local team. The amount of turnover and constant shift of people in the out-sourced companies can be huge. The other huge issue with out-sourced developers in my experience is they aren't willing to ask questions, nor say anything when they don't understand something. No matter how much re-assurance you give them that asking questions is not a bad thing. They will quite often refuse to speak up and then go about doing the work based quite often on misunderstandings. Communication with them needs to be extremely clear and have absolutely every little detail covered, in depth multiple times. Which means your local dev team is often spending more time training, communicating, cleaning up messes, and misunderstandings and reviewing code with the offshore teams then doing their own work. It will kill your local devs motivation and passion for the project and sometimes development in general.
If you treat outsourcing as a black box and expect the outcome to be great, as you have witnessed, you're sorely mistaken. What about the requirements and specifications you prepared for the off-shore development team? When you outsource, you need to be prepared to do a lot of upfront work so that you can "accurately" and "specifically" communicate what it is "exactly" that you "expect" on delivery. Did you and your team do that? Or was it more like; "build me something like this and that" on a piece of paper or an email. Be realistic, people aren't mind readers. Don't get me wrong, I'm not defending the off-shore team in any way. It's part of their job as well to accurately and specifically understand what it is exactly that they are supposed to deliver. Having said that though... It's important that you understand that the off-shore team is in the business of charging for hours spend, not really to solve your problem. I know, that sounds doggy. But for a moment, think like a business man instead of a dev. Companies create software to solve business problems, they don't create software to satisfy the curiosities of a bunch of dev guys. In my experience, outsourcing can work by bringing in an off-shore developer into YOUR team. that way the off-shore dev can acclimatise and learn how your team expect things to be done. Black boxing === fail. 
i said **recommend** for raise/firing, usually team lead is not reviewing contracts except in very small or informal companies. at least 1 or 2 levels removed from cio, often many more in big co's like discovery channel...in those type of companies you dont even get ask your *opinion* on vendors let alone "tell the cio what to sign" anyway thats not my point. as the OP said the contract is done, it cant be undone. you can be part of the problem or part of the solution. 
It's kinda like buying a meal that turns out to be shit and you eat it anyway "because you paid for it". Morals on wasting food aside, not only did it cost you money, you're also choosing to have a bad time because of it. Don't give them work, pay the contract, find someone better. It's also a great lesson for management about finding cheap developers. (tho in my experience this is likely the first semester of a 6 year study.) The alternative is that you now have more work because of Fucky McFuckup and his 4$/hour team, leaving you out of a lot of money and time. 
People who write shit code will write shit code. Hire carefully and fire fast. 
Sounds like either way, we're all fucked when upper management outsources to India right? ;)
Just delete what they did so far, else the other 4 months will create 6 months of your time. Get them to write unit tests for your work. That way they not totally useless...
A majority of the quality checks can be automated 
What have you been testing for 5 hours straight exactly? What exactly are you having trouble with? Are you asking us to actually recommend an approach to tackle a pseudo-real-time chat application and get you pointed in the right direction? Or are you asking us for free code?
Wow. This thread is huge, not sure what else I can add. The last time we outsourced development it was a disaster as well. It was done to a U.S. based company without much of my input in the process. Kinda pissed me off cause I am the Sr. Engineer. I had to clean up the mess. The project ended up being 2 months overdue. Our President was being nice about it, I wasn't. I held their feet to the fucking fire as much as I could. We finally paid them for 80% complete code and I pushed it across the finish line. The code was of poor quality, but was salvageable. Here's the lesson I learned moving forward: - Completely scope the project internally first as if you were going to do it. Go above and beyond in the scope though. - Set clear expectation and clear deliverables in the contract. - I vet the contractor from now on. I told my boss to put it on me. I rather be the one the blame is placed on. Interestingly we are currently putting together an RFP for some front-end development. I am taking my time, learning from our past mistakes.
If it was technically cheaper (including opportunity cost) to get it outsourced, then cleaned up in house, then that's actually the best solution. (I suspect in this case, this is probably not the issue, because the amount of refactoring probably exceeded the savings, maybe even without opportunity cost) If it is actually cheaper, it sucks for the in house employee, but then it's time to grin and bear it, and/or figure out if it is feasible to get another job. As much as they sort of exist, it can be difficult to find a job where cheaper options are ignored to keep employees happy. 
Well.. the pay is tiny. (Foreign Companies pay relatively less to Outsourced companies and they pay less to php developers(out of all php developers are not paid much) ) so don't expect a masterpiece. (in the sense, If all you can spend is a dollar, don't expect to buy a Ferrari) 
&gt; Better take some quality or take more money and hire an German developer and win more money with the quality! right.. to build a better crud app. :-) Edit: Nothing wrong with German developers. I have worked with a few and they are quite good.
build the tests. don’t accept any work that doesn’t pass the tests. if it takes them 4 months, at least they saved you some work. if after 4 months, the code still doesn’t pass the tests, your higher ups will likely have evidence for possible violation of the contract for failure to deliver.
I feel for you speaking as someone who's been at both ends of that business (Philippines). It really pains me to see whenever someone experiences this since it gives a bad reputation for outsourced work. Now on to your problem. As I see it you both have a technical and business problem. The business should have allowed for you guys to test the outsourced team's capabilities first before diving in. For the technical team you can do several things moving forward * Impose some code checking tools to start off https://github.com/sebastianbergmann/phpcpd https://pear.php.net/package/PHP_CodeSniffer/redirected * Manage the architecture of the project. Keep your core modules in-house and only give out low priority tasks to the outsourced team while everyone is adjusting. * Are you paying for the project or per seat? Interview and test individual developers that would come in to your project if that's possible. * Is the project maintenance or starting from scratch? Do you have an internal framework that they can follow? It's really up to the technical lead and management to check before handing over an important project. An outsourced team can be successful if you learn how to manage your expectations and project differently. Good luck and feel free to PM me if you have questions. 
&gt; Requirements were as clear as they can be. -- Most of the times they are not. It's just &lt;?php tags all over the place. God classes, functions in classes have no visibility assigned to them, I believe some code was literally copy+pasted from stackoverflow. They insist on not using OOP where it's possible and just include files with functions. They're either not using composer or have no idea how to use it. No namespaces. They keep using bare-bones mysqli when we're clearing using Doctrine as a DBA, I actually find it amazing that they got it working properly. -- Well this might be real. I am pretty sure that you guys outsourced to a small company(for a pretty low price) and almost all of the developers who work on it might be trainees there. You should have stopped development during the initial phase itself, You are not going to get a better product from them. 
The problem with that is that it's basically a full time job managing them (you forgot code review it all too). Most developers don't really *want* to babysit, they want to create interesting things... so yea, they could do it, but they would be taking on a shit job, and one that they could catch blame if things fail instead of the pointy haired bosses who hired them. 
Well.. incompetent developers are everywhere, not just in India. If you don't want to believe, have a look at php-internals team. I am pretty sure that they are not Indian. 
The stricter, the better, isn't it?!
&gt; security vuln No security vuln found, can you please post direct code? Thanks
Those that can be automated are the superficial ones (like PSR). Not saying they are not useful but not sufficient at all. There's lots of harmful garbage that can be easily produced that passes all automated quality checks.
I tried it with Laravel and noticed that calling `\Illuminate\Http\Request-&gt;getContent()` does not return me a string anymore but a `\RingCentral\Psr7\BufferStream`. So to get the raw string contents, I've to perform `$request-&gt;getContent()-&gt;getConents()`. I see that `\RingCentral\Psr7\BufferStream` has a `__toString()`. To be generically compatible, am I doing it wrong and should I've been doing `(string) $request-&gt;getContent()` all the time?
No, when the entire ecosystem of APIs around PHP serves you numbers as strings, occasionally booleans as ints, and often turns ints to floats and vice versa, even during casual base operations. Strictness is good when there's *consistency* about it. PHP has a tendency throughout to treat scalar types as interchangeable data, and the result of adding scattershot "strictness" to this is like saying "if you don't walk in a certain exact rhythm in select places, a mine blows your feet away". I've grown up on strictly typed, statically compiled languages. I'm used to strictness. But I recognize that when I'm in Rome, I should do like the Romans do. Those who introduced `strict_types` lacked that awareness. Also do you realize how many holes `strict_types` does? Have you tried passing a callback to a function like, say, `array_map()` in a file with `strict_types` enabled? You think that works? Nope.
&gt;Are there any tools I can use or something of the sort. rm(1) http://monster.com
&gt; Map reduce would exactly lead you to the right tools. You wouldn't load 11M record into a single application memory on a single node of 16G memory as you suggested earlier. If I can fit it in 1/4 of the available RAM and do the computations in 3 seconds, hell yes I would. &gt; Map reduce are done via the right tools such as EMR or self hosted Pig/Hive+Hadoop clusters, which typically have applications in Java (not php/nodejs/redis per linked). Aha. You're really good at wasting your employer's money and time, huh... While we're at it, I propose we build the cluster with Xeon E7 and wire it all with optical interconnect. If we do all this right, even after distributing all this data around a bunch of machines, despite it fits on one machine, we'll be able to bring the processing time to around 3-4 seconds, which is *almost* as fast as the single node PHP solution! You'll be the star of the office! &gt; Again, I'm huge on leveraging the right tools for the right job. Streaming 11M records through PHP/nodejs for reporting needs? Sure. Loading them into a single PHP/Nodejs application? Not so much the right tools for the job. I said something twice above and you didn't get the message it seems. **You can't argue with results.** I made the app much faster than anyone could imagine, given the previous "proper" implementation. You have nothing to attack this solution with, other than empty claims that I'm not doing it "right". Nobody made you the mayor of "right", so that's how much your word is worth.
You can't have your pie and eat it too. You can write the code yourself, or you can manage a few subordinates. As I said, the idea that one can just outsource their core competency in a complicated field, and expect to get back results that tightly fit into their organization's philosophy and practices is beyond naive. So *someone* at the company will have to manage and guide the contractors. And yes, it's absolutely a full-time job.
I clearly prefer the Command Bus method of doing it so I don't need all my dependencies in all the places where I might want to execute the command. Instead I can keep it all in 1 place and dispatch my command from CLI, frontend or api. Also my mediatior won't have tons of dependencies and won't grow to a large size.
Architecture deals with interacting components, not with files. So if you're looking for the cosmetic effect of replacing a large class with a large configuration code in another file, you might get this with a Command Bus, but I'd say you've achieved nothing architecturally with this, other than obfuscate the relationship between your components. I also aggregate sets of services in "hubs" I can call via CLI, HTTP or natively (in PHP), but I do this via the mediator pattern I showed above. So the Command Bus is not required for this either. One last difference is, keeping it "all" in one place is not the best idea. Over time (or even rather immediately) you'd want to separate services by types of use or users. So in a small web-project I'd have at least several "API hubs" like these: - Frontend APIs (accessible over Internet by HTTP, via CLI, PHP). Powers public sites and publicly accessible mobile apps. - Backend APIs (accessible over *Intranet only* by HTTP, via CLI, PHP). Powers company-accessible admin panels, reports and other private APIs. - Internal APIs (accessible via CLI, PHP). Powers cron jobs, developer maintenance tasks, debugging, etc.
Well, they just enumerated all the bugs that were waiting to be fixed in the last version upgrade. This is stupid. I can go to ruby/python/go/c#.. website and see what bugs are reported and create an article about them. Ugly things!
Grav CMS!
I'd be doing always (string) cast, makes it compatible with everything.
What are people's thoughts and opinions on using PHP as a general-purpose scripting language (like python). At work our main language is PHP and we use it mostly for scripts (not for designing websites).
Actually it clearly states: &gt; The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. Where the above copyright notices is: &gt; Copyright &lt;YEAR&gt; &lt;COPYRIGHT HOLDER&gt; So there is at least some form of attribution required
My interpretation: PHP is a very easy language to learn. However, [PHP also has a reputation for not being a good language*](https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/), especially when compared to other more-mature/well-designed languages. So roughly speaking, the joke here is that you can learn to program with PHP, but that doesn't make you a "real" programmer. *PHP has matured significantly in recent years, but the old reputation and some of its "warts" still persist to this day, and thus the meme lives on.
If I was to guess I would assume it means that PHP is easy to learn but won't get you very far. The truth of the matter is that the people creating these jokes haven't spent enough time evaluating PHP and just go off the bad reputation that PHP has.
**If I were**
It's means it's good for beginners but it lacks and real power/usefulness/etc. I think as the kids say, "haters gonna hate" or something or other.
Fair, that counts. There are licenses that make a way bigger point of it though if attribution is a primary concern.
No argument there.
It requires it via the copyright notices.
Somehow, the discussion about using the right mixture of tech for the right job became personal attacks about my knowledge and ego. I'll just end the discussion here so one of us walks away contend; thanks for rubbing my ego, I guess?
&gt; Somehow, the discussion about using the right mixture of tech for the right job became personal attacks about my knowledge and ego. Somehow, yeah :-) You earlier: &gt; People who knows what they're doing with large datasets work on database projects [...] so you don't end up wasting your (read: company's) time reinventing the wheel. Somehow it happened! We'll never figure out how I guess! 
&gt; Edit: Thanks bot, English is hard. If I was you, I wouldn't submit to the robots. Fight, man. People came up with English, we decide what's right.
**If I were**
But you wasn't!
Had the same story at my last company, tech people ended up migrating to Slack and keeping Skype for occasional chat with business people (the thing is that most of the tech team members don’t need to communicate with other teams).
All these jokes about PHP v4 so don't pay attantion .
Good Bot.
If PHP is not a good language then what is? Python? Java? Ruby?
C# is a beautiful language 
/u/asscoat covered it, but just a few clarifications. "Print errors" the errors means to STDOUT, which in the case of web pages means - the browser output (where HTML goes, same as `echo "abc";`. "Log errors" means append them at the end of a specified text file (or the Apache/server/OS log, if none).
You must learn to make your own decisions. All languages have their pros and cons. If you are a beginner, PHP is a great learning tool.
&gt; "There are only two kinds of languages: the ones people complain about and the ones nobody uses." modern PHP is fine, so are the other languages you've listed. There are plenty of jokes about them as well...
I’m browsing this on my phone so it’s not easy to read everything but maybe if you use $_SERVER instead of $SERVER?
Per the rules in the sidebar, r/php is not a support subreddit. Support requests should be made on r/phphelp. That being said, for the first error, you are literally calling a variable that has not been declared.
1. zlib for output compression (gzip etc), libzip for handling .zip files 2. simplexml as it is compiled against libxml2 3. cli support 4. don't know, but try `./configure --help` and there might be an option to switch from static to shared
There are comments on every line. You'll need to be more specific if you have a question.
Is any of this code wrong as well as the explanations for each line or is this fine and can the errors be corrected?
IMO this meme used to be true, but PHP has come a long way and doesn’t deserve the hate it continues to get. Composer, dependency injection, plug-and-play components make it a snap to build web applications. There are still plenty of facepalm-inducing gotchas in the language, same as any other language. Historically, PHP was less performant than other languages, largely due to its shared-nothing design, spinning up a new instance for every request. Fast-forward to today and PHP 7 is beating some other languages in performance (*don’t have a source for this, just sticks out in my mind as something I read) and new tools like PHP-FPM, PHP-PM, and ReactPHP are making a huge dent in server scaling, asynchronous event loops, and the like. However, I’m a huge proponent of using the right tool for the job. PHP has always struggled with long-running processes and heavy load processing. If you want to run a daemon, you’re much better off using C, C++, Go, etc. I won’t sit here and spout that PHP is the greatest language ever made and should be used at all times. Source: built a successful career programming web apps in PHP.
Hmm. Is there I way I could have anticipated this in advance? Laravels Request extends from Synfonys which defined the return value of `Request::getContent()` as `@return string|resource` (and my understanding is the resource-part is only relevant when padding the argument `true`).
&gt; Edit: Thanks bot, English is hard. To make English a bit harder for you (Sorry), you weren't actually wrong. "If I was" was actually a [perfectly good use of the term](https://web.archive.org/web/20150418102122/http://www.cliffsnotes.com/cliffsnotes/writing/which-is-correct-if-i-was-or-if-i-were-and-why). Either "If I was" or "If I were" would be correct grammar in this instance.
Thank you Garethp for voting on Subjunctive\_\_Bot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
No
Especially with licenses like the AGPL, which require attribution for end users using the web application (doesn't apply to desktop apps)
prettty obvious you've done this merry go round atime or two. my experience is almost identical
I would say there are no objectively good languages, only ones that are situationally better or worse. In the end it's more about the work you put in. Frankly, I mildly despise and love every major language. 
You misunderstand me. I'm saying there's limited benefit in going crazy securing a box you won't have physical control of, and to not worry too much about that - there's a better ROI with planning for compromise.
Didn't you got any trial before you go for a long contract like this ? I don't know which company it is, but there are certain companies that claims to have people who are experienced, but hire juniors to do the work. So code review from day 1 would have helped. Now moving on, if you are not satisfied I would say it is good idea to break it than hiring and getting more damage. Good luck with what you decide.
&gt; For me, I've decided on letting them do as they want. There lies the problem. You didn't tried to fix the error. You let the error damage you. No one can read mind of another person until he is telling about the same. So speak to them, and try to fix the problems. I don't think ( even me ) are good programmers considering the amount of information people outside India would have gained. Either you teach and keep them, or find someone else who is more proficient in it. By the way how much USD is being charged for these people ? Is it hourly or monthly ? If you can share it.
And what compromise do you propose exactly?
From your writing, I believe he is a junior developer just out from school. If so it is probably not the developers problem. He is not experienced, but directly hired to work. Please hire carefully, so not everyone complains about India ;-) .
Use DBlib and PDO: http://php.net/manual/en/ref.pdo-dblib.php https://stackoverflow.com/questions/5953882/connecting-to-mssql-using-pdo-through-php-and-linux
The longest survey 3vAr
Check out the Microsoft documentation on connecting: https://www.microsoft.com/en-us/sql-server/developer-get-started/php/ubuntu/step/2.html It should walk you through it from driver installation to application access.
&gt; from ubuntu 
Why not just satisfy the requirements instead of asking useless questions.
Yup this is how we do it. 
I can't words.
/r/phphelp
Perhaps because he/she wants to learn, as evidenced by the goal to have the latest PHP?
The same reason you can't satisfy the requirements of the question and give an actual answer instead of useless criticism. It's called learning. Asking questions is how we learn. I want to know what happens under the hood. I've been playing around with compiling PHP in several ways. The "libzip/zlib" requirement is for MySQL for windows only. It doesn't mean anything on Linux, so, why include useless things on your computer? The same with the XML, it's useless. No one uses XML anymore. So, again, why build PHP with something that you'll never use? So, if you know something constructive, please advise away. If you don't, go respond to other posts. 
Thanks for posting about that PHP Internals book. I've been trying to research the different options in relation to building. The zlib was coming into play because MySQL on windows allows zip archive searching. So, I was able to disable both the zlib and XML libraries. I also discovered the openssl headers are neccessary for the --with-openssl compile flag. Composer won't work for PHP built without openssl support.
so, PHP can't serve a .zip file without the zlib library installed? For example, if a user sends a POST request, and my endpoint is supposed to respond with a ZIP file, without this library installed, PHP can't send the file? And, the ./configure does have a --enable-static flag. I'm going to see if does make portable binaries. Good find
I stopped the minute the modal popped up.
compression of dynamically generated responses, not serving a static file. PHP isn't a webserver btw, though it is most commonly used with mod_php in Apache. a static file request wouldn't ever be routed to a PHP handler. 
You can easily have code that passes all of that and it's still crap. When you are working with these shit devs who are under pressure to just wrap everything up and move on to the next thing they will just mindlessly "work around" any of these limitations that you throw at them. The more sinister stuff will be related to the business domain, interaction of various systems together and project-specific. Not cosmetic or statistical parameters related to the code. It will be so much effort to shield yourself from shit with these people that it's not worth it.
php -S disagrees with you ;-) But, I was referring responding with a request with a zip file already on disk, not one dynamically generated
&gt; php -S Is for development only afaik &gt; zip file already on disk You don't need any library for this. Just output the file contents with the correct headers. Or better yet, statically link it and let apache/nginx do this.
&gt;**Warning** This web server was designed to aid application development. It may also be useful for testing purposes or for application demonstrations that are run in controlled environments. It is not intended to be a full-featured web server. It should not be used on a public network. http://php.net/manual/en/features.commandline.webserver.php
This is the correct answer.
Thanks for all your help. It's not just simplexml that is compiled with libxml, it's everything here: http://php.net/manual/en/intro.libxml.php (which I hadn't heard of any of these other than SimpleXML) So long story short, I've switched from using PHP with Apache to using PHP-FPM with Nginx. PHP-FPM is listening on port 9000, and nginx is forwarding requests to my PHP-FPM process. I'm trying to figure out how to create the smallest PHP binary for running on Docker container - I also don't want a large Docker instance. Now, I want to know what libraries are being used by which "PHP module" (I doubt that's the correct word, but I don't know what word to use). My ultimate goal - help people start using the latest versions of PHP, help them get the PHP version THEY need, and document the whole process. The PHP Internals books is awesome, and I want to do something like that. One thing I noticed though was zlib2 and libzip were required not matter what options I was chosing. It turns out that MySQL on windows supports search through ZIP archives. From what I can tell, it's ONLY a windows thing. Since, I'm on Linux, I had to pass the option --disable-mysqlnd-compression-support to my compile options. I'm also stuck trying to figure out how to build static libraries, if you have any idea :-) 
I know, I was just teasing you
zlib is for .gz files and such, not .zip (those are related to libzip). Two different algorithms.
Actually you’d be surprised, SimpleXML is still used quite a bit out in the wild.
You will only get extremely small gains (if any at all) to your performance through making the PHP binary as small as possible. You will almost assuredly get better results from profiling and adjusting your code, making nginx cache generated pages, or optimizing your use of databases. The entire zip.so on my FreeBSD server is 60 kilobytes; in fact of all the PHP modules compiled only multibyte and fileinfo are larger than one megabyte. Even gd is only 384 kilobytes and most are under 100 kilobytes.
If you’re open to a bit of constructive criticism... I felt like it was a bit wordy. My recommendation is to consider your target reader’s level of sophistication when determining how much to dumb down your subject matter. In this case, if someone is looking to build their first composer library, it is safe to assume they know some PHP, they either know GitHub or could figure it out easily, and so on. So for example, an explanation of how and why to fork something might be one thing you could take out. The point is, the more concise your article, the less likely your readers’ eyes will gloss over and start skipping a bunch of content.
You can meet all those requirements by using the well established PPA of Ondrej, https://launchpad.net/~ondrej/+archive/ubuntu/php
Yes! You are absolutely correct. There are a number of other applications PHP uses where there is compression involved. For me, I'm building APIs that get JSON and spit out JSON. So, it's useless. 
But how big is your FreeBSD install? I'm trying to keep my OS + PHP under 10 MB. I'm developing and deploying on Docker containers.
For #4 see mysqlnd. It used to link MySQL but it doesn’t anymore because the teams collaborated to produce a high quality native driver. 
https://github.com/alkrauss48/talks/commit/16ed9e4bc5ae3cd9dd877117efb15fb194895ff4
Thank you for your feedback. Is valuable and constructive. I understand your point. This particular post is more aimed in explaining my process from a practical view. I can refer to it in future posts so I assure you they will have less detail on the tools and processes but this time, I found it necessary because it was a response to new devs. Thank you once again for your feedback. It is always welcome :)
Sorry to hear that. You'll be pleased to know that I just removed the popup. Hope you'll reconsider reading :)
Thank you so much :) I'm immensely glad that you found it useful. Just writing the post was useful for me too as I start noticing steps that I can automate :) Hope you'll like the next one too :) It's in the oven :)
So, PHP *is* a web server, just not a very good one.
First, read it. Second, run it. Does it error, does it output and do what you expect it to do based on the comments?
I’m unsure how to define query string :P I just want it to display the details of the users visiting the page...
Most of the time these comparisons are useless. Any framework can be made to do what you want. So the "Application Goal" is some arbitrary rating where there is no explanation why the distinction is made. Forget about the differences in frameworks. A framework is just an implementation detail. Choose one you feel comfortable with, and just roll with it. At the end of the day, the choice of the framework will have negligible effect on the succes of the project. 
Out of curiosity, what's the need for obfuscation?
Well, I've asked the same many times and the answer my boss gave me was always some variation of: "Because I want no one else to use it" followed by some kind of "and I'm the one who makes the calls in here". We have some apps which exchange sensitive info between client and server, and those channels are poorly encrypted. My bet is our company doesn't want someone else to notice the poor service we're serving to our clients. IMHO that's the real reason.
"No one uses XML anymore." Except for a LOT of the enterprise world... You'd be not just surprised, but totally in awe.
Definitely agree with this one, you need to have someone competent in place to manage and monitor the outsourced work, same as if you brought in a trainee or student. And that needs to be the default approach, unless the contractors prove themselves first.
My analysis of the renaming of Piwik to Matomo: how it happened and why it highlights a wider issue for Open Source projects in world of Branding and brand loyalty. Wrote it up here: http://www.gingerling.co.uk/why-is-piwik-is-now-matomo-on-forking-and-damaged-trademarks/ 
My analysis of the renaming of Piwik to Matomo: how it happened and why it highlights a wider issue for Open Source projects in world of Branding and brand loyalty. http://www.gingerling.co.uk/why-is-piwik-is-now-matomo-on-forking-and-damaged-trademarks/ 
Unfortunately that is the process. After some time they may have grown as developers enough to be left to their own volition, but for the initial stage, that is how you can guarantee some stability in your codebase. Think of them as a restaurant. Your order is not done as you requested or up to your standards, send it back to the kitchen so the chef can take care of it and don't accept it until it's up to scratch.
For a normal workplace, sure. For outsourcing it's more like they leave for higher pay somewhere else after a year and you start all over. 
Most of comparisons are like this: Updates: Laravel Symfony CakePHP Yii CodeIgniter Excellent Excellent Good Ok Ok Doesn't looks like accurate neither informative or trustworthy 
Is not a choice really, you only knew one a perhaps not really deep. Besides you cannot valuate frameworks in terms of OK, good, excellent, that's a superficial valuation, I usually do that when I don't have a clue about what I'm talking about. 
"No one uses XML anymore." On the well recognized and endorsed end of the spectrum, Doctrine and Symfony can be configured through XML files (and there are a lot of folks who prefer XML over YAML for these things). On the "this shit needs to die" end of the spectrum, Joomla uses XML for its form definitions and extension manifests. So ya, it is definitely still supported by "popular" (term is very subjective) applications/frameworks.
o hai
https://github.com/rectorphp/rector Rector upgrades your application for you, with focus on open-source projects. Rector can: - Rename classes - Rename class' methods - Rename partial namespace - Rename pseudo-namespace to namespace - Add, replace or remove arguments - Add typehints based on new types of parent class or interface And much more...
Is it obfuscation to protect IP, or to hide bad practice? If the former, then you could probably put in a series of callouts to your servers to get parts of the content/functionality. Ideally you'd serve the majority of functionality up by an API - just give the clients a stub that calls out to your servers, or by refusing to let them self-host at all (depends if you have a support and hosting function in the company). If its the latter, then good luck. With simple obfuscation (minification / exec base64_decode etc), a good developer would probably be able to unpick it and tell them how bad it really is. With full on 'How many lines can you take towrite hello world' style obfuscation, it'll slow the code down enough that a developer will look at it and go 'Well, that's crap, isn't it?' without digging deeply, which has the same end result.
I've made a request to remove that site from the list.
thank you for this post, very enlightening.
Honestly, after using symfony 4 (flex) it makes sense. Setting up a site using flex is as simple as silex. Only difficult thing I've ran into is migrating from the way silex (and other micro frameworks) handle 'middleware'. In symfony there's events and I'm getting used to it, but it still feels hacky for simple things. For example (and yes there's probably a bundle out there for user auth, I don't care about that) say you have a simple authentication controller for logging in and logging out. Since subscriber events are based on implementing a interface and it'll check that controller for said interface it applies to _everything_ in that controller which would require me to do a bit more work if you wanted to add a check for only the login disallowing users the ability to login if they're already logged in. Where as in microframeworks we can attach middleware to routes individually and maybe that's an area symfony can improve on in the future imho. I also agree how good it feels with the auto-configuration and DI. SOLID rules still apply and everything is just perfectly wired together. 
Honestly, these don’t seem very well curated. Stuff like PHP Freaks hasn’t been relevant for years. 
It’s not a common practice. The correct way to stop people using code in a way they weren’t supposed to, is to license it properly. (And yes I know that doesn’t *literally* prevent anyone from doing something, but it does give you legal recourse.)
I've been using PHP for a while now and seeing the way it handles closures is just so much uglier/confusing to me than say JavaScript. Am I the only one? Note* This is not me bashing on PHP.. I loves me my PHP. Closures are really the only thing in the language that I always glaze over when seeing. It just looks so natural in JS.
When I used Doctrine, I added the Repository annotation to entities to specify specific repository class. I’d then implement those classes but also have an interface, which was typed to, and used is any classes consuming the repository. The Repository classes would always return a general collections.
Symfony has special ways to handle authentication, so you shouldn't just have a controller with a POST action manually logging in users. 
I'm sick of crappy sites just trying to make a buck off advertisements getting posted on here. Listing the first 15 results on google is not an article. These are horribly curated.
Consider when you start a project, what tools we'll need, or at least want to make things easier. For the sake of example, let's say we want to make a webservice with a REST API. For this we'll want - Routing to map our endpoints to controllers - Authentication to verify incoming requests - Validation for incoming data - A Queue if it's a request that should be responded to immediately, but processed later - Rate limiting Also consider generally speaking that it would be nice to have - A Request wrapper so we aren't just pulling from superglobals - If we want any web interface, some form of templating - Config files are hard to live without, so we want some standard methodology there, including settings that aren't committed into source control - It's nice to have an ORM and standard database config And there's plenty more things I'm sure with more thought would come up, without ever talking about the specifics of what our REST API even does. We can do all these things without using a framework, but even if you aren't using a framework, you should largely be pulling in packages from composer to do these things for you. Do you really want to set all that up before you can even start on your project? A framework will already have these tools more or less in place. But for jobs, you shouldn't worry too much about knowing some specific narrow tool, but the concepts behind it. Somewhere may use Symfony, and it'd be a bonus if you had experience with it, but if you understand the value of composer packages, why routing is used instead of direct files, what the value of automated testing is, etc. it shouldn't matter so much that you don't have hands-on with Symfony specifically.
I'll look into it once I start using flex more, but yeah kind of off topic regarding my comment about route specific middleware.
&gt; I don't like frameworks so much Jesus. Get over yourself. Yeah yeah. You gotta know the fundamentals and the core of the language. Whatever. Maybe I'm just lazy. I haven't written one line of vanilla PHP in the last five years. Everything is either a framework or a CMS. Why? I don't know. It just is. Why would roll my own when the problem has been solved by people way smarter and way better at programming? My clients don't want to pay me to roll my own router - they just want me to make the thing they want. In my opinion, you have four two groups of two. For frameworks, it's Laravel or Symfony. For CMS, it's WordPress or Drupal 8. And congrats if you pick Laravel or Drupal 8 - you'll still be using some Symfony components. Not saying you have to use them or that they are the best. Just that I think these four products are your major players in most PHP development.
And I stand corrected! I mostly use Lumen/JSON, and thought the rest of the world had switched to JSON as well. With NodeJS being so popular right now, I didn't know there was still a lot of legacy XML stuff out in the wild. Didn't know about Symfony configurations either. 
I guess I need to get out more :-D working with Angular/React has spoiled me
If you are just interested in requests, check out Requests. Here's a page that lists the advantages and disadvantages of several similar products (cURL, Guzzle, Buzz, fsockopen, PEAR HTTP_Request2, PECL HttpRequest, and Zend Framework’s Zend_Http_Client) http://requests.ryanmccue.info/docs/why-requests.html
I just finished a (very small) job with PHP CURL requests and https://packagist.org/packages/paquettg/php-html-parser for extracting elements from the HTML.
Silex was the framework of choice at a job I worked at. I haven't bothered looking at Symfony Flex until today. Instead, I moved on to other frameworks because I didn't want to get burned again. Even worse, I thought Symfony Flex was going to be along the lines of Adobe Flex _(Now Apache Flex, a software development kit for the development and deployment of cross-platform rich Internet applications based on the Flash platform)_ I'm **not** saying I thought it was Flash. I just though Symfony Flex was going to be this huge framework or something... IT'S A COMPOSER PLUGIN. IT LETS YOU SCAFFOLD PROJECTS. IMHO Symfony Flex has a marketing problem... Oh well. 
&gt; Only difficult thing I've ran into is migrating from the way silex (and other micro frameworks) handle 'middleware'. In symfony there's events and I'm getting used to it, but it still feels hacky for simple things. I don't know about silex 1, but silex 2 just uses standard symfony httpkernel events... My main beef with symfony is the over-complicated configuration system, and I vastly prefer the pimple way of defining DI values to symfony one. (And pretty much every other DI system out there for that matter) Unfortunately, these are both installed by default in barebones S4... **Edit:** Does anyone know whether this means the death of pimple too?
I figured this was coming when they released the MicroKernel
&gt; My main beef with symfony is the over-complicated configuration system, and I vastly prefer the pimple way of defining DI values to symfony one. (And pretty much every other DI system out there for that matter) But in Symfony 4, you don't need to define any DI values
Pimple is basically a basic factory. So don't miss it too much. It's basically the same amount of code to write a class for yourself doing the same (one method = one dependency).
Yes, instead everything is pseudo-global singletons. Go, Symfony.
Two wrongs don't make a right
No, because you wouldn't be able to override or extend services like that: * Provider/Bundle/Whatever #1 wants to add service `A` * #2 wants to add service `B` * Without multiple inheritance, how do you get these to work independently in a class? If writing a class with a method for every service could replace pimple, it can replace any non-autowiring DI container. There's also something to be said about explicitness vs the magic of autowiring, but that's another story altogether
Why not just use the mysqli extension for PHP and insert those data arrays into a table/database?
Living and learning man, living and learning :) 
You'll need to write some PHP that calls up some SQL. https://www.w3schools.com/php/php_mysql_connect.asp and start reading :)
If I understand you right, that, frankly, seems architecturally upside-down. Providers shouldn't "add" specifically configured dependencies into your app. They should lay latent until the the person creating the composition root (said class/container) explicitly composes/wires them in some way they choose. It's OK if we see this differently philosophically, but from my PoV the issue you're talking about seems self-inflicted - i.e. how to emulate globals/singletons without globals/singletons. &gt; If writing a class with a method for every service could replace pimple, it can replace any non-autowiring DI container. Well, writing a class for every app, not every service. One class for the composition root, one method for every service. And it works, hence why I don't actually use pre-made containers. &gt; There's also something to be said about explicitness vs the magic of autowiring, but that's another story altogether Nothing is more explicit than writing a basic factory :) If that's what you prefer. 
Will they stop working overnight?
&gt; I don't know about silex 1, but silex 2 just uses standard symfony httpkernel events... Could be correct, but it's wrapped completely different in silex https://silex.symfony.com/doc/2.0/middlewares.html#route-middleware &gt; My main beef with symfony is the over-complicated configuration system, and I vastly prefer the pimple way of defining DI values to symfony one. (And pretty much every other DI system out there for that matter) I was the same way, then flex came and it's probably the simplest shit I've ever used out of all the DI implementations out there.
Thanks so much
&gt; IMHO Symfony Flex has a marketing problem... Oh well. Or you're just a little too impatient to try it out. It's honestly not that hard to use.
&gt; big ass-bootstrap file *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
&gt; I'm not sure what the best symfony terminology would be. Bundles? Something that sets up services as a unit, so you can enable/add units individually. I get it, but I don't believe in this approach. I feel it has more drawbacks than benefits. While it can give you a "plug and play" experience when installing a component, it also severely botches one's flexibility and architecture. I.e. how do you use two differently configured instances of that service in your app? How do you decide which instance is seen by which object? Etc. &gt; If you do that lazy loading would be the only benefit of a container over just writing a big-ass bootstrap file, no? Sort of. A custom class acting as a container can have more interesting methods than just a bunch of getters, but in general - yeah. That said, lazy-loading is a major requirement for PHP apps, because it's a lazy-loaded environment. Lazy-loaded files, classes, pages, services. So you still need the lazy-loading anyhow. The thing is, with a "manual" container like this, it's literally not more effort than writing that "big-ass bootstrap". You just wrap the individual parts in methods, and call the methods from the other methods. Nothing more. The rest happens naturally.
Way worse. They'll keep working and everyone will take a crack at tweaking their own fork of Silex, with very little clue as to what the original authors did, what they intended and why. Basically this will be like maintaining your own framework, but between the time you wrote it and the time you have to maintain it, an ass kicked you in the head and you suffered complete memory loss about your previous experience. Then when you one day start giving up and quit your work, the next person will look at the code, and say "WTF this is using an EOLed framework - we need to rewrite... in Lumen!" and the cycle begins anew.
"It's smart enough to figure out what dependencies to give you" = They register themselves in a global container, your components reach out to the global container (implicitly, yes, but still what happens in the end) and fetch the single component of a given type. The word for this type of set-up is globals/singletons. You can obfuscate it as you want, in the end the architectural effect is the same.
&gt; I.e. how do you use two differently configured instances of that service in your app? The pimple answer would be to have `$app['swiftmailer']`, `$app['phpmailer']` and then pick one based on config in the factory for `$app['mailer']` as the default mailer, then pass specific ones to things that need them. (No, they're not API compatible, it's just an example) &gt; You just wrap the individual parts in methods, and call the methods from the other methods. Nothing more. That's basically pimple, minus the automatic "Use the result again next time" pimple provides
&gt; I moved on to other frameworks because I didn't want to get burned again. What framework did you move to? And how do you feel you got burned? It's not much work to migrate a Silex project to Symfony 4, considering Silex was really just a "mini symfony" anyway. &gt; IT'S A COMPOSER PLUGIN. IT LETS YOU SCAFFOLD PROJECTS. Right, that's all it ever was. If I recall, the Symfony developers were a little unsure of how to market Flex, because they specifically did not want it to be thought of as this big new scary thing. Flex just solves the problem of installing and configuring third party libraries. That's all.
There's really nothing to "try out". It's just Symfony as usual, except now Composer helps you set up your bundles.
&gt; Passing the container around and pulling services directly from the container is frowned upon That's only something you do in pimple when you're lazy (And the silex examples don't help there) - symfony's DI would be called a service locator too if the documentation passed it directly into classes! &gt; Well, under the hood, they're both pretty similar. Is there a way to shove a closure into symfony DI and have that represent the service? I've looked and looked but I can't find one.
&gt; your components reach out to the global container No they don't. Symfony looks at typehinted arguments and figures out which class to pass in. This is great because your components don't know that a container exists, and they don't care how the dependency got there. All they know is that they asked for a dependency and received one. Now your libraries are completely decoupled and you can move them to some other system which implements a different kind of DIC. &gt; The word for this type of set-up is globals/singletons. No, it's not a Singleton. Do you know what a Singleton is? 
&gt; That's only something you do in pimple when you're lazy (And the silex examples don't help there) - symfony's DI would be called a service locator too if the documentation passed it directly into classes! I was talking about Symfony. With the recent changes to Symfony's service container, you're more or less forced to use proper dependency injection, instead of just throwing the container around. &gt; Is there a way to shove a closure into symfony DI and have that represent the service? I've looked and looked but I can't find one. I don't know off the top of my head; I've never needed to do that. Maybe you could do something with a factory, or with a compiler pass or something?
&gt; Because I want no one else to use it Your boss clearly has no idea how this works. If you ship the code to someone in such a way that it's usable, then it's already possible for them to read it, copy it, and do whatever they want with it. And by shutting down conversation with that claim about being the person who calls the shots, your boss has choked off any discussion of how to solve the underlying problem _and_ decided to fully own the consequences if someone does jack the code. Just make sure you have that in writing somewhere so that you stay clean if anything hits the fan later.
&gt; No they don't. Symfony looks at typehinted arguments and figures out which class to pass in. I know how it works. The effect is identical to a singleton. But wait, let's look at one: $fb = Foobar::getInstance(); Nah. That's not a singleton. PHP looks at the statement and figures out which object to return. ... Right? &gt; No, it's not a Singleton. Do you know what a Singleton is? Oh yes, I do. But maybe you want to stick to the "Gang of Four" definition, right down to the C++ sample code for a Singleton, I presume? Ok, let's call it a "globally accessible variable statically identified by its type name". Not as sexy a name, but globals and statics aren't exactly in vogue, either. That's the exact problem why singletons are discouraged, in fact. Static, and global.
How is the idea that "it's known" changing anything about the fact your framework is about to be EOLed and its ecosystem abandoned? Hey you have cancer. You have 1 year to live. Now you know. This... makes it all good again?
&gt;Yes, instead everything is pseudo-global singletons. Slightly off topic, is it possible to rename `App\Kernel` to some other namespace? The provided skeleton kept having problems even when I thought I'd found all of the necessary code/confs.
&gt; Oh yes, I do. I really don't think you do. &gt; Ok, let's call it a "globally accessible variable statically identified by its type name". Except, that's not even what is happening. There are no "globally accessible variables" at play here.
Define "plenty" if you have dozens, potentially hundreds of Silex projects, and no budget to port, test and deploy all those with another framework.
&gt; I really don't think you do. Ok, so we think differently. Happens! &gt; Except, that's not even what is happening. There are no "globally accessible variables" at play here. - Are they accessible from every single DI enabled component in your app? Check. - Are they accessible by the same exact type name from every DI enabled component in your app? Check. That's the meaning of the word "global". And the static type name you refer to it by makes it "single". You keep trying to get away on a technicality, but no, not using $GLOBALS doesn't mean you have no globals in your code. The kind of fake DI that Symfony is doing here is basically reinventing $GLOBALS, but puts it in sheep's clothing. Tell me how it's different, when every component specifies "give me this Xyz" and gets the single Xyz instance there is in the single application container. It's **exactly the same**.
So what is a superior DIC in your opinion?
A simple dumb factory class at your composition root. Zero dependencies, and you don't shoot yourself in the foot architecturally. DI has *never ever* required a specialized "DIC library" to work. But none of this will make sense before you realize where the problem with Symfony is, and how DI was originally intended to be used.
Unless they changed it in 3.4/4.0 then yes. There's nothing that depends on the actual name.
I suppose.
And then what? Pass around a monolithic factory when you want a dependency?
&gt; Isn't it just really good at scaffolding? How does symfony's DI handle custom self-made code? https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration Then start here: https://symfony.com/doc/current/service_container.html
You're basically right, before taking into account that Silex is just a bunch of Symfony components. The components and libraries that make up Silex will continue to be updated and maintained.
I’ll try that , thanks 
The company moved to JavaScript. When using a framework these days I tend to go Opulence PHP or Slim with "pick &amp; choose" composer components. I also develop WordPress plugins but that's a separate thing worth its own angry mob of downvotes... &gt; Flex just solves the problem of installing and configuring third party libraries. That's all. That's great. I'll probably end up using it. Just a silly rant about the weird communication style around Flex. "Using Symfony 4 and Flex feels as lightweight as using Silex" could simply have been "Using Symfony 4 feels as lightweight as using Silex". 
I almost forgot about http://www.zend.com/en/products/zend-guard I think you need to run Zend Server for this to work though. Not free. Currently works with PHP 5.6 and not PHP 7.
I have an app that probably isn't what you are looking for, but could be made to be: https://github.com/danack/sitetool It's a web crawler that uses Artax for fully asynchronous fetching, and the zend event manager for tying different event generators and listeners together. It's designed so that you could easily write another event listener to do the custom content manipulation that you want to do, without touching the rest of the application.
Here is an example of such a "manual" container I wrote to replace pimple: https://github.com/tarantool-php/jobserver/tree/46cdc295d17cae8d443246ff21e857d8e4e78ef0/src/Di
Do people flipflop between using Laravel 5 for some projects and symfony 4 for others? Or is everyone pretty ingrained in their choice? 
Firstly I use Phalcon because I actually like is as a framework in general, regardless of the performance stuff, which I just consider a bonus. But on the performance stuff, for me the lower RAM usage is the big benefit, which is probably more relevant to most people than having a bit less latency. You can go a long way with a cheap $5/month VPS. On most pages on the heaviest website I'm using Phalcon on, the PHP process's RAM usage reported from memory_get_usage() at the very end of execution averages about 1.2MB. 
No, PHP ships with an HTTP library. Just like NodeJS and many other languages.
Well then you don't need either of those libraries. You just `readfile()` and set the appropriate headers.
&gt; The moment I changed from Apache to Nginx, that's when everything went downhill. Why?
Most Symfony bundles that I've seen have the configuration defined in XML. Now, why people are still using to choose XML over YAML is totally beyond me.
You want [Monolog](https://github.com/Seldaek/monolog)
It's a waste of time. It can easily be decompiled/reverse engineered. Use a good license and hire a lawyer when needed.
Because its not really a closure, a Its an anonymous function. 
You're thinking that a good project to experiment with almost certainly includes trying to emulate complex login systems, bypass fraud and hack detection, and automate downloading sensitive financial information? Well, it may very well be, for a final-year infosec student looking to make a name for themselves, but even then it would be extremely dubious to do it on actual real-life banking websites. In reality, unless your banks provide explicit APIs to do this (most don't) you're going to come up against roadblock-after-roadblock that has been deliberately added to stop this kind of automation and will almost certainly trip some kind of security algorithm in the process that will lead to your accounts getting locked down. A safer project to experiment on may be to forget the logging in portion entirely, most banks allow you to download your transactions in CSV format, and it would be a relatively simple (but still interesting) project to be able to paste those CSVs into your own mini website, and have it calculate what is new, import it into a database etc... This is something I actually do myself as part of my own yearly taxes; I have scripts that take transaction CSVs from my bank, paypal etc, and use timestamps + values to match up outgoings on my bank account to business-related outgoings on Paypal, Amazon etc to save me a bunch of time having to do quite as much data-entry by hand, and should not take you long to put together if you know the basics of a programming language and database.
Doubt it. Unless they have an API, they hopefully WONT allow random web apps to slurp down customer information Do some research. I honestly don’t know if the API that programs like quicken use are available for registered developers or not. Maybe you can sign up and get data that way. Otherwise no. You could check into using selenium to emulate a real Browser but even that SHOULD get flagged by their systems I would hope. But this probably isn’t the best sub for your question. Try a general web development one or phphelp, etc. 
If you are running multiple php servers that are able to communicate to a separated redis server / instance you can easily fetch and destroy user sessions. You can control sessions from your application or hook up php to work directly with redis instance by setting a session handler in php.ini. If you choose first approach there are different ways how you can organize user sessions in redis storage so you can bulk invalidate them faster and more efficient. That is another question though. Considering your second note, redis can be configured to persist data to a disk. However, could you explain a bit why #2 doesn't work with memcached? Are you using multiple memcached servers in a cluster or separated instance per each php server?
If the components get updated and Silex isn’t then Silex either won’t eat the new components or it’ll stop working on the next breaking API change. 
No, it’s because of the separate symbol tables. It’s funny how you’re repeating this meme without even knowing what it means. And... PHP has anonymous functions that form closures. The meme is wrong. If you feel they’re not closures - say why. No, it doesn’t have to automatically capture. Manual enumeration is used in many languages with closures. I don’t like it much but it’s still a closure. 
Hello! I found that best solution for me (since I needed to switch between PHP versions for work quite often) is to install Homebrew package manager and install different (or only one) versions of PHP, then you are able to link/unlink them to your PATH via brew so you can switch the used version quickly.
I used to use Homebrew too, but now I’d recommend Docker instead. Much cleaner.
What kind of throughput are we talking about? Session accesses per second? Redis is extremely high performing. But only when you access keys by their full name. There are a few scanning commands (KEYS for example), but all of those are only meant for debugging. In your case I would have one string key per session (named `session:SESSIONID:VERSIONID`). The version id is a single mumber per user that you store in its own key, `session ersion:USERID`. Increment the session version and all their old sessions are inherently forgotten. The downside is that you need two roundtrips to Redis per page load, one for the version id and one for the session itself. I have not found that to be an issue, but if you want to optimize this you can take a slightly different approach: still keep one key per session, but instead of a version number you keep one list key per user with all their session ids, named `sessions:USERID`. That way you can loop through and actually delete all their old sessions instead of letting their TTL expire. Redis can also be easily partitioned to multiple servers if you have unusually high demands. All client libraries have partitioning built in clientside (they all use the same partitioning scheme even, so the partitioning is compatible across platforms/languages). Or you can partition server-side and get HA with the help of Redis Sentinel, but that adds operational complexity. You do not need to add Memcached caching in front of Redis. They have similar characteristics already. 
Number 2 doesn't work because Memcached is designed, marketed as and documented to be a non-authoritative cache storage. Everywhere you look in the Memcached docs they say that things stored in Memcached should be possible to recreate from a backend store if needed. It is meant for caching, not storage. 
guess that's one strategy to keep people upgrading to the latest version of php lol
Would you mind elaborating a bit on your workflow? I am leaning to finally try Docker for such a long time.
The use of frameworks depends on the project but most substantial projects will greatly benefit from a framework. For example, say I'm building a CRM which has several internal and unique business rules and it needs to be accessible through a browser not just an API; I would either use the Symfony framework or Laravel to handle the application and infrastructure layers (things whihc are more or less the same in every application) of the system. I would then use my own ES framework/system for my model and phpunit package as a testing suite. I will probably also need a frontend framework such as VueJS but can use either twig from symfony or blade template from laravel. If on the other hand, I only need API access then I'll either just use a set of the symfony components and bootstrap them up or a mini framework such as Lumen. What's the alternative? Building a bunch of composer libraries to handle routing, security, sessions, views , dbal, templates etc and then link them together? You'll end up with your own framework. So the question should be, should I use an existing framework with years of reputation, an an active community etc etc or develop my own since I will need most the components of a framework anyway.
/r/phphelp
&gt; The storage should be persistent enough to last for some time between session accesses You are right, but the OP asked "The storage should be persistent enough to last for some time between session accesses". So "between session access", if using memcached cluster with multiple php application nodes that should work. Full persistence as you mentioned is not in memcached domain, neither the Redis...
I have done this. My bank have a "less secure" login option with justusername and a pin code to read transactions. All I had to do was load the login page to get a session cookie and the CSRF token (from a hidden form input). Then I could log in with a normal HTTP POST request. I used cURL for all of this, it has built-in support for cookies. But as others pointed out, this heavily depends on the bank. If you are within the European union you might be able to find a provider that can do all of this for you. A new directive that took effect January 1 requires all banks to provide an API so that third-parties can help with financial planning. I have not researched the market but I assume there will pop up "API middlemen" that aggregate the status from all your banks into a CSV or maybe even into an easier-to-use API. 
There’s not a whole lot to tell really. - download and install Docker - search for Dockerfile(s) (container configuration files) on DockerHub - copy the Dockerfile(s) into your project and run Docker / docker-compose (the specifics should be covered in the instructions) The main advantage is that you can keep your computer free from installing different software for different projects. Everything is contained within the Docker containers and can easily be spun up and destroyed as required.
&gt; And then what? Pass around a monolithic factory when you want a dependency? why not? it makes the code extremely clear and easy to read. A dynamic language doesn't need an IoC container.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [fiskie/idea-community-twig/.../**ce2335b9ce89f7bfa93ddb68ac8983601b25c645** (develop → ce2335b)](https://github.com/fiskie/idea-community-twig/tree/ce2335b9ce89f7bfa93ddb68ac8983601b25c645) ---- 
No worries. It's not hacking per se. It's just that what you would want to do would bear many similarities to an automated banking attack and would trip alerts that are not necessarily aware of your legitimate intent.
Do you tell each container which project files to include via the Dockerfile? I've been thinking (just today) about how to integrate Docker info my workflow, too.
Well fuck me hard. I'm using Silex and I like it. I guess it's time to sit on a dick and start refactoring
That’s why you have to think beyond the framework. Don’t build your application so dependent on it. As it happen to Silex it can and will happen with any other tool.
Eh, not necessarily. You can emulate a browser with libraries like Guzzle and Mink. It should just be a matter of scraping through and clicking on the necessary things. The bank has no way to know that you're not an actual human clicking stuff.
How do you handle testing and mocking methods that return a generator? Mocking the whole `Iterator` interface is kinda annoying. That's whats keeping me a bit from using Generators so far
I think this is the first time I actually _got_ yield. Thanks for the great example!
Vagrant and docker are perfect for this
Thank you very much man, you explained me a lot! 
You can mock a generator with a generator. There's no need to suddenly implement Iterator manually.
This brings up an interesting idea. The idea of invalidating sessions merely based on an additional data parameter works in an elegant fashion in the same way we roll our asset serials over. Each user record stores a version of sorts that gets included as a session value. When validating the session check this stored value against the record version, mismatch destroy the session. Allow the ttl, as you mention, to auto clean. Thanks for the spark!
I didn't know about PHAR. It's an interesting point I would have in mind at the time to present my final report. Thank you very much!
We use the same method to invalidate cache when the data structure is changed. One version number per model. 
I agree the security component in symfony is pretty "special" 
Is pimple dead too? 
Guard is pretty damn awesome. I've yet to see a better system ship with a framework.
The r/php sub is not a help sub its for news and discussion. You want /r/PHPhelp. But look here: https://drupalize.me/guide/learn-drupal-8 https://www.drupal.org/node/2574983 https://www.udemy.com/learning-drupal-8/ https://dev.acquia.com/blog/learn-drupal-8-for-free-building-a-basic-site-using-drupal-8/23/11/2016/17266
well, if it wasn't about you wanted to create themes, i would learn anything else before investing time and effort in drupal...
It is true though that closures are hated in every language that uses manual capture. People want closures to work like they do in JS... and I'm with them :)
Well yeah, JS does closures so well (especially now with arrow functions), we take it for granted, but many other languages have either verbose syntax or awkward limitations, PHP included. I agree. 
Please don’t: banking websites are extremely complex and there’s a reason for that: security. They need to make sure they keep your personal information and money safe from fraud. Unless you work for a bank on their software side of things and know intamitaly how this all works,don’t.
Great, keep up the good work!
i think that this is the direction web apps/frameworks should start taking these days. working off of a api contract is much easier for front end dev and server side dev. this is a good sign. 
thanks
I'll give a try, thanks
My question is: Why would you build massive arrays in memory? Wouldn't it be better to store said data in some kind of Database and then fetch it from there and do x,y,z or get pieces of said data?
Have you checked out LilaWorks? It's a WordPress analog written entirely in PHP, with CKEditor for text editing. I use it for blogs, websites and portfolios - easy to customize since there's not a lot of code and the CSS is really basic. https://lilaavenue.com/lilaworks-demo 
Hahaha there should be someone doing that somewhere! And after reading everything I decided I won't use any framework, at least not yet. Maybe I'll use something on a personal project to learn. I'll get a book in any case! Thank you for the advice!
After reading everything I decided not to use any framework yet. But maybe I'll start to learn how to use it on something personal!
That's actually what's being suggested, see also my response. But if the "code in the loop" is to be customized, without yield there's no way around making batch part of that implementation. With yield you can abstract that away. The batching part will become totally transparent and from the outside you're just working with a simple single loop. Also; you can nest Generators, yield from yield, etc. It's a very powerful abstraction and let's you hide complex details and provide the upmost simplest interface to the outside world. Maybe another example: a pagination HTTP client. From the outside you don't care about that detail having to perform multiple requests to get to the end/all results. So you write that pagination logic with while/etc. and from that loop you yield the individual items from each page. Presto: from the outside the pagination details is gone and still you don't have to load everything at once into memory. I recently wrote a streaming CSV exporter which can possibly export millions of rows. Yes, today's system may have enough RAM but it's still a potential resource hog, ie. may spike the system and negatively affect other parts but with DB side cursor and yield its dead simple to get the primary data transparently in batches, apply transformation, write it to a file stream and be done. 
There is a simpler solution. There is no need to logout the user when changing permissions or deleting a user. You should reload the user from the database on every page load when you change permissions so they are always up to date. Regarding the password change you can store in the database the last time the password was updated (or any other property you care about). When logging in user, store this timestamp in the session. When loading the user from the database check if the timestamps differ, if the do, destroy the current session and logout the user.
Note that if your system is interfacing with Wordpress or other GPL-licensed systems, then you might commit copyright infringement. The GPL only gives you the right to copy the software as long as all plug-ins are under the same license. The license require you to provide users (your customers in this case) access to the *human-readable source code*. Obfuscated code is not considered source code under the GPL. Of course, this only applies if you have GPL mixed in somewhere. 
The sooner your company upgrades, the bigger chance it will have against its competitors.
The stamp was ultimately the direction I’ve decided to go, though to be specific we now increment a version counter when we change certain fields but the same idea. It’s stored in the session and is checked on every page load. A much simpler and easier to manage situation as you elude to. Took a bit to get there! Thanks I do agree on the perms, ultimately that’s a minor problem and doesn’t require destroying sessions. Any change request that occurs validates permissions and does not assume security through obscurity (they wouldn’t be on the page without permissions ergo they can do any of the associated actions that initiate from the page &lt;- flawed logic). That part of the user story can be ignored. Again thanks for reminding me of that case. 
You should post this in /r/PHPhelp. This is not a support subreddit.
You could use a regular expression like: preg_split('/\s|,/', $words, -1, PREG_SPLIT_NO_EMPTY) php &gt; print_r(preg_split('/\s|,/', 'I like apples,carrots, and potatoes', -1, PREG_SPLIT_NO_EMPTY)); Array ( [0] =&gt; I [1] =&gt; like [2] =&gt; apples [3] =&gt; carrots [4] =&gt; and [5] =&gt; potatoes )
Ioncube is very effective. I've never used it to protect code myself, but as a developer I hate encountering Ioncube-protected code because there's no way for me to see/modify/customize it for my clients.
Without having investigated your implementation in detail, in all likelihood your use of multibyte functions is altogether unnecessary in this context. Using character offsets rather than byte offsets is a big anti-pattern, and it is unfortunate that the mbstring extension does this. UTF-8 is a self-synchronizing ASCII-compatible encoding and the JSON syntactic characters are all ASCII, so using mbstring is most likely not necessary or beneficial (but maybe I am missing some context here).
Thanks for the feedback :P, i fixed the problem and should be working now agai
&gt; Fatal error: Uncaught ReflectionException: Class config does not exist in /home/arevicoc/sub_domains/oss/vendor/laravel/framework/src/Illuminate/Container/Container.php:752 Stack trace: #0 /home/arevicoc/sub_domains/oss/vendor/laravel/framework/src/Illuminate/Container/Container.php(752): ReflectionClass-&gt;__construct('config') #1 /home/arevicoc/sub_domains/oss/vendor/laravel/framework/src/Illuminate/Container/Container.php(631): Illuminate\Container\Container-&gt;build('config') #2 /home/arevicoc/sub_domains/oss/vendor/laravel/framework/src/Illuminate/Container/Container.php(586): Illuminate\Container\Container-&gt;resolve('config', Array) #3 /home/arevicoc/sub_domains/oss/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(721): Illuminate\Container\Container-&gt;make('config', Array) #4 /home/arevicoc/sub_domains/oss/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php(110): Illuminate\Foundation\Application-&gt;make('config', Array) #5 /home/arevicoc/sub_domains/oss/vendor/laravel/framework/src/Illuminate/ in /home/arevicoc/sub_domains/oss/vendor/laravel/framework/src/Illuminate/Container/Container.php on line 752
&gt; The project DOES NOT use continuos integration There is travis CI config present and builds are indeed run on there. Also typo, `continuos` is not a word.
Yeah you're probably right. The main reason I went for character offsets is because the JS library I forked from did that. (Same thing with my CommonMark library, though that one does things like looking backwards in a string for multibyte characters, so mbstring simplifies that.) It also simplified the ability to produce JSON syntax error messages like "invalid character on line X column Y". I'm not saying they're great reasons :P I'm sure I could continue refactoring to switch to a byte offset approach and eliminate most of these calls. 
yes indeed, its all about creating a high quality API contract which can be consumed by any app i.e. mobile, js app, etc. How we build this API is secondary and can be exchanged. But of course Fusio can help you there.
Thanks! We will do and there are already many great plans for the future.
I don't want to be the Buzz Killington here, but the same stuff could be achieved with Xdebug's profiler and [KCachegrind](http://kcachegrind.sourceforge.net/html/Home.html), right?
are you suggesting to extend Monolog to add UI-specific targets?
Also, Amp has a lot of unrelated CVEs linked: http://oss.arevico.com/start?url=https%3A%2F%2Fgithub.com%2Famphp%2Famp
No problem...glad you find it helpful!
That's a great point!
A good start could be to ”select distinct state from users order by rand() limit 30” to get 30 random states listed. Then you could do ”select * from users where state=”” order by rand() limit 1” for each state. If there were less than 30 states, do similar with cities... Note that this SQL syntax is for MySQL.
I don't know what you mean by that. I just saw your list of required features, and Monolog pretty much does all of it.
Yep, that’s basically what Blackfire is. Personally I find [Webgrind](https://github.com/jokkedk/webgrind) very easy to read. 
If you compare commit section of laravel/laravel with symfony/symfony, symfony one is almost all red, but laravel green. Why is that?
ORDER BY RAND()
Nice idea. A few things that could be improved: - format numbers - one page said something like “325.111111111 days” - shorten lists - the Wordpress page lists 110 CVEs, would be better to just show the most recent few and maybe add pagination for the rest - shorten issues - they show the entire issue text which can be super long - explain the colours - I have no idea what the red and green mean in the issue list. 
Thanks for the feedback /u/nikic! After reviewing the code in more detail, I confirmed that I really only needed to handle multi-byte characters in two instances: 1. Checking for UTF-8 encoded non-breaking spaces 2. Determining the character column position in the current line when throwing helpful syntax errors. I therefore switched everything to use byte offsets, handled #1 by simply checking the current and next byte, and handled #2 by only calculating the column position if/when such error needs to be thrown. This let me squeeze out another 28% boost in CPU time and an 88% reduction in memory! I've updated my post to include this optimization. I really appreciate your guidance!
Yeah you could certainly use that, and the process would be pretty much the same. (Blackfire just happens to be my personal preference.)
Let's say the following to wrap it all. * Symfony 4 is faster than Laravel 5.5, each out of the box. * Laravel 5.5 is a much more capable framework than Symfony, each out of the box. Both statements are true, none of the two frameworks can be defined as *better* than the other. That's all folks, back to coding.
Like MySQL data. 
Is there a way to not use variables but have the cursor default to a certain position? For example, a block of html but I want the cursor to be inside the content container instead of at the end of the live template block. 
If your app is written to work with PSR7 request and response objects, you could use those objects with any http library supporting PSR7
But the objects don’t fulfill the same contracts as lumens base request object so I’d have to rewrite everything to use the PSR-7 style object. What benefit would I get by doing that?
I see. Are there any libraries taking advantage of the PSR-7 objects now? I guess it would be useful to take advantage of the new request object for future proofing 
I don't know which level would you like to reach with this app, but it would be truly useful to add a comparison tool to it, because when I'm searching for a new component I will find a few to consider and it would be quite effective if I could put them into a tool and it would show me a comparison table and even it could tell me which one is the best. With the current solution I will need multiple browser tabs and etc. which makes it not so comfortable.
Hey /r/Techie97 , I have developed a POS software with flexible inventory management system in it. Also, you can easily handle variations of a product. Check out the demo here: http://pos.ultimatefosters.com/ Username: demo Password: 123456 If you find it suitable, please message me and I can avail you the self-hosted software. PS: I'm continuously working on adding new features to it, so if you need anything which can help you then let me know. I will happy to help.
Thank you!
Why not set [sort-packages](https://getcomposer.org/doc/06-config.md#sort-packages) in the composer.json? You mention the command line flag, but the config option applies to all composer actions. 
I only know about Facebook PHP SDK, Google PHP SDK and Guzzle.
Middleware that uses PSR-7 and the work in progress PSR-15 to alter requests coming in and responses going out: https://github.com/middlewares/psr15-middlewares/blob/master/README.md Also lots of libaries can consume psr-7 obejcts: * https://github.com/auraphp/Aura.Router * http://docs.guzzlephp.org/en/stable/ * https://www.slimframework.com (framework) And much more, check out https://github.com/lalop/awesome-psr7/blob/master/README.md for a proper list.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [middlewares/psr15-middlewares/.../**README.md** (master → 4b433ba)](https://github.com/middlewares/psr15-middlewares/blob/4b433ba1ef15479ec519674e0f1c926ed0a2b3c8/README.md) * [lalop/awesome-psr7/.../**README.md** (master → 4f49987)](https://github.com/lalop/awesome-psr7/blob/4f49987d307ea197c73d6214d251f924481fdcf8/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dspfsac.)
Hey, I know you wrote this a while ago, but is there any chance you could expand on some of bad practices that Laravel encourages? I'd fit into your category of 'growing up' with Laravel so would be keen to know what bad habits I may have developed.
+1
Frameworks are a crutch. That's not to say they aren't useful for getting production ready code out the door quickly with a minimum of reinventing the wheel. But they are just one tool among many, and I feel that an awful lot of developers fall back to using frameworks and third party libraries by default, without considering whether it's the right tool for the job - they are definitely the tool for a lot of jobs, but should never be considered as the only thing available. Some developers seem unable to write code to carry out simple tasks without employing a framework or library - I would never consider employing one of these, a certain amount of flexibility is required. There's another group of developers who can't see past "Oooh, shiny new thing, must use the shiny new thing!", who are pretty much the bane of my existence, because they don't even consider which specific framework would be the right tool for the job, or if it's even been proven in production - just, that it's new and interesting.
Anyone have a tips for doing comment level annotation live templates? Can PHPStorm handle comment syntax on it's own? (Cause right now `*` have to be inserted manually, and proper indentation levels are wishful thinking)
If you are talking about writing a doc block above a method, start type /* then pressing tab. PhpStorm will then generate the docblock for you.
I'm talking about live templates that should be expanded inside docblock in a way that honor both docblock syntax and indentation. E.g. I would like to write live template for doctrine annotations.
Thank you for your feedback! I mention the configuration option in the post, as well as credit Hanov Ruslan, who submitted that feature (which is great). However, as far as I know, the configuration option currently only applies to running `composer require`. Nonetheless, I believe there are a few more fields which could benefit from sorting, see for example [`PackageHashNormalizer`](https://github.com/localheinz/composer-normalize/blob/0.1.0/src/Normalizer/PackageHashNormalizer.php#L24-L31).
&gt; that's THE php job interview question! (Sometimes literally the only question about OOP during interview) Only if it's a bad interview. :P
&gt; However, as far as I know, the configuration option currently only applies to running composer require Indeed. It also disappointingly only updates the require section. TIL!. Might I suggest a patch to composer to get the sorting to apply to all sections? (Also that'll teach me from reading articles on a phone on the bus, I didn't spot the mention of the config option!)
Yes
&gt; Or, we could make the Dayle class abstract, like this &lt;?php abstract class Dayle implements Human { } Dayle sounds like such a hipster
You can do this both ways. You can either expand the entire docblock, or just expand the one annotation when you're already inside a docblock. Do to the first way: make a "class member" abbreviation containing the full docblock syntax with annotation. Example: https://i.imgur.com/hbWM53T.png https://i.imgur.com/XptPJF0.png https://i.imgur.com/vpqhtnm.png For the second way: make a "comment" abbreviation with only the annotation. Example: https://i.imgur.com/T3TejdK.png https://i.imgur.com/asbIbLe.png https://i.imgur.com/nzk3Dv6.png
&gt; Cause right now * have to be inserted manually, and proper indentation levels are wishful thinking What do you mean manually? When you type /** and press enter, it will automatically generate a docblock and auto-populate it as well as it can. You can press enter while inside a docblock to create a new line, maintaining proper indentation and automatically adding the *.
When is live template used in your example?
Right. Single line live templates work. Some time ago I tried multi-line templates of nested annotations. PHPStorm only added `*` to first line, so the resulting code looked something like this: * Some existing dockblock content * @Annotation\From\LiveTemplate( param="const", param2="", @Nested\Annotation( param3="const", ), * Some other preexisting docblock content Ugly. And if I wanted to expand live template in some nested annotation then PHPStorm would **only** auto-intend first line from live template. However I did put asterisks into live template. Will try without them.
I've seen a fair amount of people around here mention that they jump between the two depending on their project. Personally I stick with Symfony because I don't do enough web app work to justify learning more Laravel. Symfony does everything that I need it to currently.
fair enough, it is in some cases a closure. mostly i take issue with the documentation which freely conflates the two leading to much confusion among programmers in PHP many of whom conflate closure and lambda. 
It says undefined variable $QUERY_STRING. Just defined the variable before using it.
Next time post to /r/PHPhelp when you have questions like this. The function you're looking for is [isset()](http://php.net/manual/en/function.isset.php) **Note: Untested** if ($filehandle) { $string = ""; if (isset($QUERY_STRING)) { $string .= "{$QUERY_STRING}, "; } $string .= "{$_SERVER['REMOTE_ADDR']}, "; $string .= "{$_SERVER['HTTP_USER_AGENT']}, "; if (isset($_SERVER['HTTP_REFERER'])) { $string .= "{$_SERVER['HTTP_REFERER']}, "; } $string .= date("r"); $string .= "\n"; $write = fputs($filehandle, $string); fclose($filehandle); }
What?
There is no need to prefix private variables as they are only accessible from the class itself, and most of the time if you have two variables named the same, but that do different things, wrong naming is most likely. If this is a JavaScript project for learning basic functionality and how to change values of different elements, I guess good job! Usually, if you need code generation like this you're better off with an IDE, which would make it a lot easier than having to browse to a static html file somewhere with your web browser.
1. The credentials should work. You can retry with username: admin and password: 123456 2. It doesn't answer it directly but if you're OK with changing your pos software it will work. So just suggested it. 
http://httplug.io/ is worth taking a look.
&gt; :P Look, if you're not going to take this seriously, don't expect anyone else to. We've all tried to help. Its very clear that you know nothing about programming. Nothing we say here will fix your problem and none of us are going to do your work for free. If you are the slightest bit serious about this, go watch this (free) course and then you will understand what is going on with your code: https://laracasts.com/series/php-for-beginners
Only comment would be the Human interface is slightly misleading in that Human-&gt;Dayle relationship is more of an inheritence hierarchy than interface. These differences can be subtle and often overlapping but interfaces tend to describe very narrowly defined functions which can be shared by different types of things. while inheritance relationships are generally for defining specific cases dervied from the same general case. Eg. Dale is a SPECIFIC TYPE of Human he is going to share most characteristics of humans with Nick, Jerry and Mort. Therefore this is best described in an inheritance relationship. Whereas Humans and Planets both have names (share specific attributes/functionality) yet there is no way to create a sensible heirarchy of types in which a human and a planet could be derived from a common type (unless you have a god class problem going on). Therefore Human implements NameableInterface Planet implements NameableInterface your cache example was much more on the nose. 
Then read and follow the last line of what I wrote. And stop with the emoticons
$this-&gt;iPhone = new iPhone(); use constructor injection, dales is not testable
 How big are the collections? 
Sounds like you want it to stream the data instead of holding everything in memory. I recommend doing a google search for "json_encode stream" and see what you can find
yes thank you, that is what i meant couldnt find the right word to express it
big in what sense? mb? number of items?
I got this to work fairly easily. This one for a full docblock: /** * Some existing dockblock content * @Annotation\From\LiveTemplate( * param="const", * param2="", * @Nested\Annotation( * param3="const", * ), * Some other preexisting docblock content */ Or this one if you're already inside a docblock: Some existing dockblock content * @Annotation\From\LiveTemplate( * param="const", * param2="", * @Nested\Annotation( * param3="const", * ), * Some other preexisting docblock content
Dayle has settled on his phone brand and he'd never ever go for Android.
The Slim Microframework uses PSR-7 objects for its middleware as well, I believe
I mean... have you heard Cal talk? He could definitely give a good elephpant roar ;)
You are right. But due to the lock file, it won't be updated anyway. You still need to update manually. This just makes it explicit instead of implicit. 
Composer scripts have a default process timeout limit of 5 minutes, unless you override it with the option `--timeout=0` or environment variable `COMPOSER_PROCESS_TIMEOUT=0`. Which sucks because I had envisioned using `composer.json` in the same way as I have with `package.json`and stuffing some long running scripts in there. (running node server + webpack).
URL? Platform? The twitter post says who is sponsoring it and when-- but anyone actually know how to tune in?
But you won't necessarily notice when you should update.
Anyone know how to give a shit?
I created a library for serializing data what is especially useful for creating web service responses and so on. Please check it out :) Any suggestions or comments are welcome! This is the base package. You can create complex structures by just dividing the desired output into small mappers. It's very easy to use and very flexible. Concrete mapper classes or also callable are supported. https://github.com/Kingson-de/marshal-serializer This is the JSON serializer which might come in handy if you don't use any frameworks that will create JSON from an array. https://github.com/Kingson-de/marshal-json-serializer This is the XML serializer based on DOM Document which does not suffer from the SimpleXML limitations. You can create complex XML responses easily. https://github.com/Kingson-de/marshal-xml-serializer
My opinion was: you shouldn't repeat yourself (DRY), so there is no need for live templates. But your test example convinced me: that *is* cool. Still have a tingly feeling that a test class could use traits or a parent, so you can do `$this-&gt;testJsonThingy($name, $description, $otherThingy)` Instead of pasting / live-templating the same thing over and over
No point of asking more question if the candidate fails to answer that ;)
Why would you need composer scripts? If you’re running composer on the cmd you can run whatever you want.
Get out.
I lost a lot of respect for Uncle Cal when I realized he was a Trump supporter after following him on the Twitters. 😕
What is this guy's claim to fame? From the OP's title and from his Twitter looks like he primarily just gets hired to talk about being a developer, but has he actually accomplished anything as an engineer himself? Edit: so here's his posted resume on his website: https://blog.calevans.com/wp-content/uploads/2017/12/ResumeOfCalEvans.pdf The last time he worked in the capacity of a "developer" was working with FoxPro for 6 months in 2006. Before that, he worked for 4 years as a FoxPro developer in 1995-1999. I guess anyone can sell a bridge these days.
Those who can’t do teach. 
lol someone is a little touchy!
Does anyone actually use interfaces? I've considered using them before, but everytime I start thinking about it I wonder what am I actually gaining? Don't shoot the questioner. I've found uses for Abstracts before, but never Interfaces.
Yes! All the time, in fact. Despite functional similarities to abstract classes, there is a significant divergence in purpose. Abstract classes are largely for convenient code reuse--a few similar classes all share the same bits of code, so share an abstract parent. Handly, but not conceptually that important for anything. An interface is fairly foundational to good object-oriented design. The purpose of an interface is primarily to define the specifications of a dependence so we know what is available in our class without knowing the implementation. The general rule is to always code to an interface, meaning define your requirements in an interface, then pass through the implementation. In practice this is overkill and you have to pick your spots, but the concept is still very important. For example, if you need a hammer, you ask for a hammer; you don't ask for the Stanley 51-624 with serial number 238908123. You may be more specific and say you require a ClawHammer, but still, you want a tool that can perform a job of hammer() but don't really care about how the hammer is built. In the same way, we can have a class where we want to send an email. In terms of our class, we don't care how that happens, we just want it to happen. So we specify a Mailer interface, with a concrete implementation of ExampleMailerApi and pass that in (or any other implementation of the Mailer interface) upon instantiation. interface Mailer { public function mail(string $to, string $message); } class ExampleMailerApi implements Mailer { public function mail(string $to, string $message) { // do sending stuff here } } class MyClass { private $mailer; public function __construct(Mailer $mailer) { $this-&gt;mailer = $mailer; } public function doSomething() { $this-&gt;mailer-&gt;mail("foo@bar.com", "this is an example"); } } $mailer = new ExampleMailerApi; $myObject = new MyClass($mailer); $myObject-&gt;doSomething(); By doing so, if we need to change the implementation of the mailer, it doesn't affect our other code. If we need to change MyClass, we don't have to worry about affecting ExampleMailerApi. By passing in dependencies instead of instantiating within our class, we also make our code easier to test. We can pass a mocked implementation of Mailer in to make sure everything works without actually sending mail through ExampleMailerApi, which we can test separately.
&gt; I guess it's time to sit on a dick and start refactoring Weird, I don't remember that being a prerequisite in Martin Fowler's book. Was that in the Preface (I usually skip that part)?
I tend to lose respect for people who unnecessarily bring up politics (this is a coding subreddit btw) with holier-than-thou views
Cool, you're entitled to your own opinion. 
I understand what you mean. He does seem to be PHP famous just because he goes to all the conferences and chats in all the chatrooms. But he is currently the guy in charge of the PHP certs, so he has some credence. There are a few guys who if you look at their CV/resume will look like they haven't programmed in a while but are major players in the open source community. Then you have people who have gone up the ranks in the technical management side, who still need to know how code should be written to be able to manage their teams. Then you have people, who work at small shops, that are knocking out high-quality stuff. So the CV/resume doesn't really tell you much, what the person has to say does.
Typing, and library vs client code. Typing is predefined sets of reflection checks ;) do why type more when you can less (pun intended). While exposing interfaces in code that have to be extended but not modified, do no force specific inheritance (and unnecessary adapter design patterns) on client code.
Interface belongs to library/external code. It needs extra parameters, then contract between it and client code changed. Interface change is this justified.
Why would you need Interner Explorer? If you have telnet you can pipe the output of whatever port to disk.
Why would you need a disk? If you have a good memory you can just read the contents and type them in later.
If your changelog is a git log, it's 100% totally useless. Changelog should be a human created summary of change. Otherwise it brings virtually no value. You can compare the source code between 2 tags easily with a good git GUI. However it is way faster to read a few lines of explanation about what was added, removed or updated to understand why something might go wrong. Most of the time in a well tested project, a bug is just a custom feature. Even for non open source project I now manage a changelog. I find a fun theme to give each new version number a nice unique name. Same as google android versions. This changelog file becomes an internal tool for the team to communicate about change and evolution of the whole product.
Thanks. Was assuming you read my article. Yes monolog does send data to many locations, but those are just outside of the application itself, I can't see how it would fit in delivering notification to the user.
number_format() will give you what you want.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
A link to a Google Plus account post that links to the actual article? Why not just link the article directly?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
But do you really need getters and setters? Why encapsulate in the first place?
tl;dr - marketing
Here you go: http://evontech.com/what-we-are-saying/entry/why-laravel-is-the-most-preferred-framework-of-php-developers.html
This doesn’t make any sense, even as a joke. Clearly composer is faster and more convenient than downloading everything manually. Running scripts through composer is no more convenient than running another script on the command line. 
Here's quality, accuracy and depth of analysis you can expect: &gt; Laravel’s Blade templating engine is one of the best features [...] Most frameworks use php tags to call variable from controller, like `&lt;?php echo $users; ?&gt;`. However, blade templating uses `{{users}}` to print variable.
You know the motto of Indian outsourcing company: you can't ef it up? We will for you.
As someone who has been working on a legacy project that turned international, I've learned what a mistake it was from previous developers (which I probably would've done myself) to hard-code formats and currency. From then on, anytime I need to display a price somewhere, I always reach for NumberFormatter. Example: https://3v4l.org/d7S4B It is also totally flexible, in a way that if you want to specify your own format, you can do so easily. The only downside to that is – you need PHP's `intl` extension installed.
I'm not going to address all of your points, simply because we're probably both working in different environments and teams, and that's totally okay. Aside the in-depth commit messages, every pull request allows for an opportunity to write a summary in the merge message. This message is then automatically linked to a new git tag, as you can create a summary of all merge messages between two version tags. Those merge messages are what I'd duplicate to a changelog. 
I work with Drupal for a living and I loathe it!
I work with Drupal for a living and I loathe it!
This library will likely also help https://github.com/alcohol/iso4217
This is true. :) I logged in just so I could make that correction. Thanks for doing that. I had nothing to do with creating the ElePHpant, that was Vincent Pontier and Damien Seguy created the first batch of stuffed Elephpants. (However, I think Vincent has taken that business over now)
The last time I worked as a developer was 2 weeks ago. It as for a local company here in West Palm beach. It's not on my resume as a lot of things aren't there. As to my claim to fame. My claim to fame is I got lucky. I joined Zend at a time when PHP was on the rise and I rode the wave. My career arc for the past 10-12 years has not been strictly development but mostly teaching and developer relations. That doesn't mean I've not been writing code. :) I have built out a lot of projects since my FoxPro, most are not visible to the public as they are either private projects of my own or work for a customer/employer. 
as far as I can tell, this is a "Twitter Chat" so if you follow the hashtag, you can follow the conversation. That's all I've been told. :)
Wow, it's fucking nothing.
Why not just say, *nothing*. Will save depreciation costs on your keyboard and monitor in the long run.
I assumed the OP. Hence you could never let the machine power down. 
I'll vouch for Cal having known him personally (he leads our local PHP User Group). He's a very smart guy and much can be learned from him!
No need to be an asshole. Cal has done a lot for our community, whether you like it or not. 
You could setup a service to read logs back to a user, or make your own handlers to push them however you want.
I have a few builds that broke on Travis today, I have no idea why because when I'm using composer locally, it seems to work fine.
You don't have such locale installed on your system. Do `$ locale -a` in terminal. Those are the ones you can use.
There're no public mirror of packagist.org AFAIK. The best option for the next outage is to accompany your build server with a packagist mirror like https://github.com/rande/pkgmirror or Satis with archive option activated.
It's about to start: https://twitter.com/Cloudways/status/953264186011856901 We can follow #CWDEVChat on twitter to follow the AMA.
Changing specifications of classes is exactly a reason to use interfaces. If you changed ExampleMailerApi and you weren't implementing an interface, you wouldn't necessarily know whether or not you're breaking the expected behaviour elsewhere. But if we consider the scenario you describe, an interface is in place, the reason for the change to ExampleMailerApi is either that the requirements in MyClass changed, in which case the interface needs to change as well so implementations know they need to be updated, or you have some new functionality you wish to provide, in which case most of the time it should be a different class, likely using ExampleMailerApi through composition.
Thank you! It could work for development, but I'm a bit hesitant to use it since I can't read Chinese and have no idea who these people are. No way that I'm gonna get this approved for production though.
Cal and I have vastly different opinions on many things, but he's still one of my best friends. It's impossible to know everyone that well, but know that no one is worried about losing your respect.
Yeah, for local dev I can get away with this, but for CI builds it's not something we're prepared to risk
[removed]
I have to disagree with you here, as a developer which works on long term maintainable systems, it's much easier to add functionality using Middleware rather than messing around with controllers especially if your extra functionality needs to be over multiple routes. A good example that I've needed is tracking information on Affiliate landing pages for example. Although you could just use another Middleware implementation for this, I think that PSR-7 is the most complete implementation of this. The problem with Laravel's Request/Response implementation is there's no easy way to modify the objects as they pass through the middleware layers. Using PSR-7 also means you're not shackled to one framework. If you've been using Laravel but suddenly need to use Symfony/Zend/Slim for a particular project, enjoy rewriting all your middleware.
[removed]
&gt; I have to disagree with you here, as a developer which works on long term maintainable systems, it's much easier to add functionality using Middleware rather than messing around with controllers especially if your extra functionality needs to be over multiple routes. Intercepting requests for the purposes of logging, tracking, etc. is not exclusive to middleware. It's one line of code to integrate in just about any architecture. You don't provide examples or a good argument why middleware tracking is "much easier" and anything else requires "messing around". I could say just as well middleware is too much "messing around" and adding it to your bootstrap, router handlers or controllers is "much easier". So now we're on the same page, what else? &gt; The problem with Laravel's Request/Response implementation is there's no easy way to modify the objects as they pass through the middleware layers. I'm not a particular fan of Laravel's wares, but the HTTP Foundation they use has mutable request/response objects. So you should be able to change most things about it. &gt; Using PSR-7 also means you're not shackled to one framework. If you've been using Laravel but suddenly need to use Symfony/Zend/Slim for a particular project, enjoy rewriting all your middleware. I love the "suddenly" there. You're using Laravel and you "suddenly" need Symfony/Zend/Slim? For what purpose? But OK, let's take that scenario at face value. Just use the adapter I mentioned above. That's what PSR-7 is about. You can bridge frameworks easily through the PSR-7 bridges available for every framework. You don't have to *actually use PSR-7 anywhere in your application code* to take advantage of this bridging, it goes like this: Laravel Request -&gt; Symfony (they're compatible, no bridging required) Laravel Request -&gt; PSR-7 Bridge -&gt; Zend Request Laravel Request -&gt; PSR-7 Bridge -&gt; Slim Request Easy. Two lines of code wherever you need to make the connection.
If you have [packagist.com](https://packagist.com/) account it will work as a mirror if [packagist.org](https://packagist.org/) is down.
Maybe learn a popular framework? Check-out Laravel - https://laravel.com/
This actually produces invalid json (just a closing bracket) if the iterator is ever empty. Move the printing of the opening bracket out of the loop to be safe.
That would work. Only I had to fix the changelog previous messages many times. If you would do this with your workflow, that would be painful to locate back the git messages, update them, and regenerate the changelog. Did you happen to do this ? And how smooth was it ?
For me it happens really rarely. If it happens, it's actually only the current commit and I can simply amend it. The workflow I propose is indeed way too tedious if you can't rely on the quality of work put forth by your team members. I've got the luxurious position of being part of a team filled with senior level developers.
It sounds like to me you need to build stuff. Mostly anything, really. I recommend that you research different programming methodologies and practices such as test driven development (TDD) (or at least just *write* tests - recommend PhpUnit), primarily writing pure functions, etc. This is not really PHP-specific stuff; just general practices applied to PHP.
[https://github.com/ziadoz/awesome-php](https://github.com/ziadoz/awesome-php) - great stuff for beginners (and all PHP developers in general).
Fair enough, though this is precisely why I'm not into the whole politics thing
yes i have been considering doing some videos on refactoring legacy code. i would not say symfony doesnt "do X better" but it enforces certain strictures/stringencies that force you to do things in a way which, in the end, will leave you with more extensible and testable code. You can do things the same way in laravel but you are actively fighting with the framework to do so , the "laravel way" is often in opposition to best practices, where the "symfony way" is usually in line with best practices. hope that makes sense!
have u ever done wordpress dev tho? yeah drupal is kinda wacky but wordpress makes it seem like a dream. imo drupal 8 is quite good
following books: - clean code - design patterns - code complete - the pragmatic programmer - higher-order perl (its for Perl but equally applicable to PHP), which is free [here](https://hop.perl.plover.com/book/) those will give you a very good foundation
Packages are cached on your local machine?
I've done more in WordPress than I have Drupal ;)
Seriously just make something. However basic it is, and then just add features. Every new feature will present a new challenge. And then as you read online articles about people ideas and methodologies you'll notice situations where your code could be better, and then you'll improve your codebase and thus skills.
Neat.
i cant see how anyone finds wp development superior to drupal, the api is so incredibly inconsistant, debugging and testing is imo much more difficult. drupal def has its quirks but at least its consistent 
Twig is a POS (not really Drupals fault, but why use a rendering engine?) and having to clear the cache constantly is a ball-ache (yes, even with Twig cache turned off). Debugging Twig is insanely difficult - give me native templates. Debugging (non-twig stuff) is easy, same as Drupal, XDebug.
Well, depends how deep the recursion is and what's the nature of the data. Maybe if you share some details?
Good point. It was out and I edited it in, cause I had to be so smart, see. ;-)
Why would you read the code, when you can just type it on the top of your head?
It's just the same thing like with *packages.json* in JS projects - it's some kind of standarization of common commands to help devs run them. Sometimes, when you touch project once for a couple of months, you don't want to read all the readme and go through setting up dev environment command by command just for this one PR. Just type eg. *composer setup-env* and everything is done automically.
Wow I’m baffled how obtuse you’re being. Have you never heard of shell scripts? If your command is long and a pain to type, put it in a script file. That’s exactly the same, except you can just run the script faster without having to proxy it through composer for no reason.
Finally someone said it. He has no claim to fame. He has published zero open source code. He is popular for "being popular" by speaking at all the PHP conferences on how to be a good developer - even though nobody is sure he is a good developer. Asking why Cal Evans is popular is like asking why the Kardashians are popular.
I prefer to use Apache Ant instead.
I thought PHP 7 ended support for HHVM.
This is awesome. Is there any good resources on getting started with understanding PHP's core code and how it all works?
No, HHVM gave up on supporting PHP 7. Now they're giving up on supporting PHP 5. Basically it is its own language now (Hack), and no longer a viable alternative engine for running PHP apps. The gap will only get wider and wider from now on. 
The community abandoned HHVM and now HHVM reciprocates by abandoning the community. The fact that it's open source is moot now since nobody is going to want to use a PHP spin-off that cannot run any PHP libraries. It's basically Facebook-exclusive at this point, plus all those who jumped the shark and probably wish they didn't, like Wikipedia.
Waiting a couple minutes, wishing them luck trying to fix it, buy their paid services, cache? Or!! Doing literally anything that's not composer related, like writing code. I honestly don't get why people can't work past a little down-time. It's not like we just install dependencies all day, right?
To clarify: we support this release for 48 weeks. This means that PHP5 is supported on HHVM until roughly the same time that PHP5 itself becomes completely unsupported. The PHP7 mode is still supported as needed for Hack users - PHP7 is a better choice for PHP7 applications.
&gt; The community abandoned HHVM and now HHVM reciprocates by abandoning the community. That's bullshit. Facebook started HHVM with a commitment to maintain PHP compat, and they changed their mind. That's all there is to this story. The community didn't owe anything to HHVM. Its compatibility with PHP was always half baked, with common extensions unavailable, buggy or with features missing, what was the "community" supposed to do here? &gt; all those who jumped the shark and probably wish they didn't, like Wikipedia. Wikipedia can come back. 
Good point, thanks! You can also use the [`process-timeout`](https://getcomposer.org/doc/06-config.md#process-timeout) option in `config` section of `composer.json`. I've updated [the article](https://blog.martinhujer.cz/have-you-tried-composer-scripts/#configure-timeout-for-long-running-scripts) to include info about timeout.
&gt; The fuck is your problem? Woah, there :) &gt; Fact of the matter is, it was embraced initially but has slowly lost the community's support. That's all there is to my story. You said HHVM reciprocated the community abandoning it by it abandoning the community. HHVM never got to its original goal of full PHP compatibility, so the community had little to hang on to. To say "HHVM reciprocated" is just a bad way to frame it. More like HHVM started with high hopes and enthusiasm and halfway through the journey they were like "naaah, too hard, screw it". I'm sure the community would be on their bandwagon if they hadn't started sending mixed signals years ago, culminating in this press release.
Correct, there is nothing special, it is the matter of being open to any PSR7 implementation.
&gt; Cal Evans, the guy behind elePHPant What exactly is he doing behind an elePHPant?
I'm not here to judge what Cal has done or not done, but too often when I hear someone be described as "having done a lot about out community" it's that his name shows up in blog posts, social media and forums. Or the so-called "famous for being famous" celebrity type.
&gt; But he is currently the guy in charge of the PHP certs, so he has some credence. He has some credence to give to PHP certs, or you think PHP certs give him credibility? Because the latter definitely wouldn't work.
There doesn't seem to be that much introductory material for the absolute beginners. I did write a fairly soft, high-level article for SitePoint about a year ago ([How PHP Executes – from Source Code to Render](https://www.sitepoint.com/how-php-executes-from-source-code-to-render/)) to provide an overview of things, that you may be interested in. But other than that, I haven't really seen much else material at a similar level. I think most people just jump into the source code and figure things out by playing around with it.
How much code do you anticipate being able to delete once PHP 5 support can be removed?
So you think the worthless PHP certifications that no developer respects, give him credence to train and talk about PHP. Uh-huh.
Yes. I agree. I was just looking for more advanced materials that skip the whole this is how you comment and declare arrays.. I've been working on small projects and recently been put into it for my job so looking at it everyday helps too. Just trying to gain more ideas kidnapped quicker than on my own.
Tests. Yes. I haven't really looked into php tests. Just Java tests.. Definitely will do that. I appreciate the feedback. 
That might work for the Doctrine test suite, but I couldn't get it to work for Doctrine itself since every new connection gets a new database (the sqlite3 option to share them isn't supported by PHP). https://github.com/doctrine/dbal/issues/2901
So Cal, where do you see PHP in five or ten years? I think the the FIG and Composer have revitalized PHP but what is on the horizon??
Well they have deobfuscators for ionCube as well. Used them in the past and they get you about 90% of the way there.
In terms of code size, the biggest thing is probably our support for compiling PHP5 extensions against HHVM: 340 files changed, 112 insertions(+), 60452 deletions(-) That support also reaches into many, many small places, where we need to support Zend-like operations on our data structures, or support our operations on Zend-like data structures. That said, what matters more is cutting down the code paths that we need to test; we currently support 3 languages, and a large variety of flags that substantially change behavior. We need to reduce that surface area. There also doesn't seem to be much value in keeping PHP5 support around for longer than PHP5 itself; it seems likely that most libraries that haven't already dropped support for PHP5 will do so then, if not sooner.
You kind of answered your question: it’s moving data in code that can be publicly visible to a flat file that isn’t shared. The data in the .env file can be set, requested, cached, and pulled and no one can see it because you don’t commit your .env file (even in a private repo). That, and you might have 10+ environments that all use different hosts, keys, passwords, usernames, etc. so it helps with separation. 
Book about PHP security from 2005, [still sold on Amazon](https://www.amazon.co.uk/Essential-PHP-Security-Chris-Shiflett/dp/059600656X/) with [positive reviews from 2014 - 2017](https://www.amazon.co.uk/Essential-PHP-Security-Chris-Shiflett/product-reviews/059600656X/?sortBy=recent#reviews-filter-bar).
One that we can do is say is say "Yes" or "No" to relevant reviews when Amazon asks if the review was helpful. Yes to the ones that point out the book is outdated and are recent, no to the ones that say the book is good and are recent.
Also, this isn't a "we're deleting it right now" post (except for the build-your-own-PHP5-extension support); it's mostly: - we're flipping the default - we're very likely to wontfix PHP5 compatibility bugs that aren't in PHP7 mode - we'll gradually simplify if (php5) {} else {} in small places in the codebase I can't commit to this, but it seems unlikely that anyone in the near future's going to think it's a good use of time to remove the PHP5 parser, or to systematically kill the option.
&gt; It's not like we just install dependencies all day, right? Excuse you. My day job is dependency installation specialist. It's quite a demanding job. With all the dependencies and the specialismist that's required. ^^^By ^^^night ^^^I'm ^^^batman.
You can just pass a `pdo` instance to the connection
So they saved themselves porting the code of Facebook, by writing a new language runtime from scratch, then finding the lack of types in PHP undesirable, writing a new language for their runtime - Hack, then porting their code to Hack. And Hack is still about 10 to 50 times slower than, say, a comparable Java application. Yeah, your success story doesn't work out. Their success story is they had enough money for their stupidity to not be as unquestionable and apparent as it would be in a small startup.
The certification requires the "extensive knowledge" of an average junior PHP/Zend developer. And it's widely acknowledged to be worthless. If this is the baseline for you about what's praise-worthy, so be it. I'll just go elsewhere and find more interesting things to talk about then.
You keep talking about passing the test, not devising the test. Don't you know the difference? Do you even understand why people consider the cert worthless? I really don't think you do, since you don't seem to understand the difference between creating a test and passing a test. I highly doubt you even know what the test is about, just so you know and understand why people don't think much of it. It requires knowledge of how PHP works, the features of PHP. That's it, to know all the gotchas of the language. To know when the code will do something you don't expect. It's considered worthless because if you encounter these gotchas, it's because you're writing very very bad code. Also, knowing the ins and outs of the very fundamentals of the programming language doesn't actually help you with application development. Since it's more about how you design the code. How you use interfaces, abstract classes, design patterns, etc. And while you say of an average junior PHP/Zend developer could pass it, the reality is, you probably couldn't without spending time studying the manual. 
That book looked really good my only issue was the PHP 5 bit. I mean is it worth buying a book that's an out of date version. I ended up getting the 'PHP 7 Zend Certification Study Guide' though it doesn't have the same reputation. 
I (ab)use these quite a bit, stuffing a lot of commands that I might rarely or never even use via composer in there just so they're documented somewhere when I need to use them. I'm pretty sure I've even written "gulp": "node_modules/gulp/bin/gulp.js" Some actually (semi) useful ones I have: "todo": "grep -E -i -r --color=always --exclude-dir='vendor' --exclude-dir='node_modules' '@(todo|fixme)' ." "lint": "find . -type f \\( -iname '*.php' -or -iname '*.phtml' \\) ! -path '*/vendor/*' -exec php -l {} \\; | grep --line-buffered -E -v '^No syntax errors'" "test": "vendor/bin/phpunit --verbose --debug"
All I've found that PSR-7 offers over `symfony/http-foundation` for example, is more complexity. The immutability of requests and responses is not so useful for projects, only for libraries, and the representation of message bodies as streams leads to a lot of extra work. It's good for libraries because it offers a standard that they can share and work with various implementations, but for a project/application... I'm not a fan. I'd rather use Symfony's request/response objects (or Laravel's which extend them) and transform them as needed using `symfony/psr-http-message-bridge`.
Something something blockchain?
You could check out the blog over at https://blog.ripstech.com/ to find out more about PHP security.
NPM deleted an user account and all packages related to that user account. Packagist on other hand had a good old outage. Users nor packages were not removed. That hardly qualifies as a fiasco in my books. If you are running a mission critical system where delayed builds are not an option, you could use the above mentioned [Private Packagist](https://packagist.com/). It gives you redundancy and as a bonus supports Composer and Packagist development. Or you could not depend on third parties on mission critical stuff and commit the vendor. Bit messy but no external parties to depend on.
This makes the most sense to me, if you're building something you expect other devs to use then use the standard. If you're building a user facing application use whatever gets you from a-b in the cleanest/easiest manner.
LMGTFY https://github.com/softius/php-cross-domain-proxy
&gt; Also, this isn't a "we're deleting it right now" Might as well be. A platform's worth is entirely based on the promise of "we'll be there for you". HHVM doesn't make any apparent commitments, just keeps taking the hammer to wreck the biggest existing ones (such as PHP compatibility).
It was open-source but community members couldn't ever make significant design decisions. I tried. Maybe /u/fred_emmott remembers me complaining about this in their IRC channel. Hack is a better language than PHP. It didn't succeed because many people, like myself, saw that it wasn't truly open. It was, is, and will be Facebook's baby. And so the wider community didn't adopt it. Really unfortunate.
&gt; Nobody believes a thing you guys say. Sais who?
We could build a public shaming list, too.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
There is of course always `composer search` and `composer show`. E.g.: composer search symfony composer show symfony/symfony 
Fuck it guys! Get the punch cards!
I understand where you're coming from. But have you ever worked on a team with junior developers or interns?
I disagree with this. They're not multi-platform--you're writing a Bash command that you *hope* has the same structure in the Windows console. In your case, AFAIK, phpcs happens to have the same structure. Composer doesn't care about platform, it just attempts to run your script in whatever the underlying system's shell happens to be. Platform is mentioned nowhere within Composer's scripts documentation. https://getcomposer.org/doc/articles/scripts.md
If you find out can you share? Having a hard time giving a shit about your comments.
What kind of design decisions you wanted to do? I could understand why they would refuse them, php keep having bad design decision being made (&lt;=&gt; for instance it should have be a function).
Those two commands use the Packagist API anyway, so it's the same. If the API are down, they do not work.
Most of the PHP community says it through their actions. The loudest form of speech.
&gt; Event Sourcing is a means to an end and the end is Machine Learning. That's quite a reach... The basic "end" of event sourcing is the ability to derive multiple model shapes out of the same event data. This is useful for evolving your domain, for scaling your domain (models computed on different machines from the same event stream) and for producing reports and analysis. "Machine learning" would be just a subset of "reports and analysis". Don't focus too much on it, because you make event sourcing seem like some exotic bullshit without application in a typical project, and it's not that.
A smal startup would better rewrite all their code and be done with it. Facebook's problem was that if they started to rewrite the whole codebase they would have to choose between: 1 - Stop writing new code for a long time, which was not possible - business before code bro 2 - Write new code and then update all changes in the Language X branch - which would probably create a circle of hell with new code bing written, ported, written, ported, and the new branch would never be finished Creating a runtime, a language and all that requires lots of money, but is a separate task, independent from the maintenance of Facebook. When you have a lot of resources having separate projects like this is not a bad idea. Get over the hate.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Well, there you go. :) Thanks for the link!
&gt; Facebook's problem was that if they started to rewrite the whole codebase they would have to choose between: &gt; 1 - Stop writing new code for a long time, which was not possible - business before code bro &gt; 2 - Write new code and then update all changes in the Language X branch - which would probably create a circle of hell with new code bing written, ported, written, ported, and the new branch would never be finished Your premise is incorrect. Even today Facebook is composed of hundreds of separate services/modules, written in different languages, Hack being used only for part of the server-side front-end logic (before someone objects, front-end doesn't mean client-side, it's slightly different, also using Facebook words here). You can port every one of those separate services/modules individually. Facebook is around 61 million lines of code. If this whole thing was monolithic and could only be ported *at once*, then that'd be a spectacularly screwed up architecture suggesting complete lack of architectural skills. But even Facebook's code is not that screwed up (even back in the olden days). So moving to another language would NOT halt current development, it could go on over time, concurrent to new development, much like they went with porting PHP 5 code to Hack, by the way. They didn't save themselves anything here. They did this: - Develop their runtime. - Develop Hack. - Continue development on current code. - Gradually port to Hack. They could have skipped two steps, and do, say: - Continue development on current code. - Gradually port to Java/Node (their Flow for ex.)/Go/whatever. Also I'm being nice to Facebook, as they didn't develop the HHVM runtime once. They did three major rewrites of it. The first was a pure PHP-to-C++ converted. Then a runtime, then another JIT runtime. So they wasted *absolutely monumental effort on developing things they'd keep throwing away*. And the irony in the end is PHP 7 is faster than HHVM on just about any benchmark you'd try, and any app you'd run. And while PHP 7 was a result of the competition with Hack, which focused PHP's efforts on optimizing their runtime, Facebook would've done much better if they directly contributed to PHP 7 to make it faster and more type-safe, without reinventing it in a separate "from scratch" codebase with HHVM/Hack. They made all the wrong bets here. And now I'm reading Wikipedia will jump ship to PHP 7, which leaves Facebook basically the only major Hack project out there. A dead end language with one app... 
Run code analysis tools like [SonarQube](https://www.sonarqube.org/), with all rules on, on your code. The results point you to ways to improve your code. Just reading the descriptions of all rules and why they matter helps finding areas to investigate. 
Could you please add a bit more contrast to your blog's text, at least `#444` or something like that? Makes reading it way easier.
Please just kill php.net translations instead. They are a pain to maintain (if they are even maintained). And imho translating technical docs is useless anyway as people should learn at least the basics of English to be able to use an English based programming language.
You're better off paying for Private Packagist; Your Satis or Toran install, config &amp; maintenance is guaranteed to be more expensive that PP and you'll also support the team behind Composer with it.
&gt; who jumped the shark you mean "jumped ship", "jump the shark means" is a term meaning the point at which something that was once cool has become uncool
What's a word for something that's always been uncool. Because that's you.
When someone thinks 6 months is plenty of time to switch then I think they have never worked in the industry on more than one project at a time. 
This is awesome. I appreciate that! 
I heard: https://www.youtube.com/watch?v=b2F-DItXtZs.
Yes, nice and slim binary format. Could think of to create a Marshal package (marshal-protobuf-serializer) to fill the generated protobuf PHP classes and serialize to protobuf then if that makes sense ;)
&gt; If you speak 2 languages and are blogging about php, please post in both languages. I'm a native Spanish speaker, I only blog in English. Translating technical stuff between languages is quite difficult to do accurately, and most of the time the secondary language will suffer. &gt; If you post a question about php, post it in your native language as well as english. Sorry, /r/php is an English-only sub, and we enforce this rule. &gt; If a very good / very important article is published, we as a community should try to fund the translation of such articles into at least the 2 languages used by the largest parts of the non-english php community. This makes sense, having the community helping out translating useful articles is helpful for everyone. Asking the original author to do the translation is not. &gt; Remind people that php is by far the cheapest and easiest way to get your code online Maybe we should stop pushing this point, which is patently false but also seems to draw lower-quality developers. For the record, Javascript is the easiest and cheapest way to get your code online. &gt; JS has had seen an improvement of its public opinion. Unsure where you are hanging out. Javascript the language is pretty widely considered to be a really badly written language, at least from the more tech-oriented places I frequent. &gt; Post 5 minute youtube videos of how to use your composer packages. I _really_ dislike videos for programming. The _vast_ majority are unnecessary. I would much rather take a few examples in your repo's README that have to sit through a long-winded video.
Well, one would assume that if you're using Silex, your app is probably small and simple to start with. And since you're using Silex, you're probably already using something like Doctrine or Propel, and a large amount of Symfony components. So yeah, 6 months is plenty of time.
It already handles that actually! 
Thanks!
OP mentioned the website being down, specifically. Might not have affected the API. That is something to test out the next time it happens - in three years or so. :) 
Just today I was redirected to the PT-BR translation, which wasn't obvious for me because some parts of the page is in English. The documentation for preg_quote() is outdated, it's missing exactly the character I wanted to check. In my opinion just disable the language redirection, or at least remember I've selected English dozens of times already
Then you pay for better service to support them and accelerate your work, it's that simple
If you cannot change A, queues won't make it any closer to real time.
It's obvious that if I can't change A, it won't be *any closer* to real-time. I'm looking for as close as I can get to real-time, but it doesn't have to be near real-time. I think a couple minute-delay (1-3) would be fine. What I'm interested is the pros and cons of incorporating a queue vs. consuming the API directly and saving the response data in the same process.
&gt; why the fuck is symfony in the title Give it a rest you pathetic troll
Lol you again get a life
Thank you for your comment. I understand your view. However, this article is not about CQRS or the actual modelling of a domain. We apply ES regularly in varying business domains but this article is about enforcing the capturing of the data. Furthermore, machine learning is not only about stats and reports but more about using said reports and establishing a pattern within them. In this case, the reports can be derived from the captured events data but then that is put to work. The data collection is only preliminary to the results of a machine thought algorithm. Once again thank you for the comment. I appreciate the view.
Nice! My company is currently working to stand up a new server with nginx, h2 and finally upgrade to php 7, can't wait to get it running!
The AMA was on Twitter, not here.
&gt; We apply ES regularly in varying business domains but this article is about enforcing the capturing of the data. There's infinite amount of data to be collected about you between the moments you wake up and manage to wander off to the bathroom to pee. The question is what's the realistic outlook you need this data. Concluding you can ES ***all the things!*** is naive, and how you end up with people *dismissing and hating* ES, because used indiscriminately, it multiplies the complexity and resource requirements of your application with almost no return of investment. &gt; Furthermore, machine learning is not only about stats and reports but more about using said reports and establishing a pattern within them. Yeah, finding patterns is part of what "analysis" means. You still can't claim "ES is about machine learning" when it has so many other practical uses that matter when you decide whether to go ES or not.
OK thanks for that info. I'm definitely interested in heeding your advice, but as of now, I can't see how using `NumberFormatter` would be more advantageous than using `money_format()`? On the surface, they seem to accomplish the same thing, and seem to require the same input. What am I misunderstanding? Can you maybe describe a situation in which using `NumberFormatter` would have its advantages? I'm not trying to argue--I just want to understand what each is doing, conceptually. /u/matheuspfaustino same question to you.
Thanks for this. I saw that requirement, but was a little unclear on which 'system' needs to have the local installed. I assume you mean that my web server needs to have this locale installed--is that correct?
I don't see any reason other than fun to add a message queue. You still need to query A. If there is a strong consensus with A that rabbitmq will get integrated, then it is an option. Even then it could require you to change how the data is consumed. 
Yes
Redis is a cool tool for this purpose. Feel free to try it.
Low size of data to be synced. Less than 100 updates in App A per day. This will grow slowly.
The reliance on (pseudo)global objects in Laravel-related libraries is too damn high
Since A is beyond your control, you need some proxy that talks with A and fetches the data on regular basis. (It would be good if A had low cost API to ask if there is any new data) Lets call that proxy for A, A' - big a with apostrophe. Now put that queue between A' and B. Now A' is directly responsible for gathering the data, queue passes well defined messages, B reacts to them. That's common pattern for businesses with multiple systems where some of them can't be directly adjusted to work with message bus.
Providing you have got your head around MVC (most frameworks) and separation of concern, the more esoteric design patterns may not be immediately important, and personally I'd go with Relational Databases first - but I do have a thing about a nice DB... Get your head around proper normalisation (My CS degree had a Database Design and Admin module - not sure if yours would?), and being able to pull formatted data from them in the right way without having to to processing in PHP, joins and indexing are important. Sometimes the fastest way to improve the efficiency of an application is to offload the work to the database (whether its on a different server or not).
lazy content managers...
I wasn’t blindly guessing your abilities. I was making an educated guess from your comments here, other code comments you‘be made and the fact the point of the Zend cert goes straight over your head. The purpose of the cert is not to say someone has great PHP programming skills, but merely to show they know PHP. Big difference, big reason why it’s aimed at newcomers. 
So you're in awe of the expertise of someone tasked with making tests for newcomers. Uh-huh.
In any other time I'd say "we should keep politics separate from our family and work", but to support Trump in 2018 *does* speak poorly of someone's overall intelligence and knowledge. This is why one shouldn't shit where they eat (i.e. I never speak about politics at work, or on social media where I connect with family and colleagues).
I have seen that a lot (people somehow landing on some translation). Do you actually get redirected to PT-BR or are you clicking the PT-BR translation in google?
Testing
I like little explanations like this: - Added [stuff]. Now it's possible to use [stuff] to create a new [other-stuff] without changing or initializing [another-stuff]. [other-stuff] will be created as [something] if given parameter is true. (Commit Link) Thanks to @user.
It is always good to know some PSRs and use them: http://www.php-fig.org/psr/ . After you have some expierences with some techniques you could look into asynchronous programming. Look into how HTTP, TCP and HTTPS works. To improve all your skills you can look into some "Best Practices" like Dependency Injection etc.. But be aware these practices are changing constantly. Try these practices, get an opinion on them and discuss them with other developers. Don't try to learn everything out once. Just take one step after another. It is always a good idea to work on GitHub to improve your skills. Also your future employer sees that you can code ;)
This task is not for a learner. I've never seen TimesTen used from PHP before. Although it's plausible, but the number of problems could be too much. For the purpose of learning PHP better start with Mysql database.
Hmm. &gt; 25% upvoted. Dear noobs, why you're always voting down the question if you have no idea how to answer it. 
I also added &amp;nbsp; str_replace("\u0022","\\\"",json_encode( $fields,JSON_HEX_QUOT)); And that worked perfectly. Thanks!
OMG Why do you think it needs anything like that? where did you get that JSON_HEX_QUOT stuff? why you're trying to tackle with the format with the risk of destroying it completely?
I would suggest you the one which I use, maybe this can help you. [Learning Management System](https://www.eleapsoftware.com/learning-management-system/)
that's not true. you get u0022 when you add JSON_HEX_QUOT. and *why* you're adding it is another question
It really depends on where you live, but overall I think you'd benefit from learning anything serverless/cloud: https://en.m.wikipedia.org/wiki/Serverless_computing Generally anything cloud related such as AWS, Azure, CloudFoundary, and more. It's not specific to PHP, but it will help you overall
**Serverless computing** Serverless computing is a cloud computing execution model in which the cloud provider dynamically manages the allocation of machine resources. Pricing is based on the actual amount of resources consumed by an application, rather than on pre-purchased units of capacity. It is a form of utility computing. Serverless computing still requires servers, hence it's a misnomer. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
JFC. You're right. I'm adding it because I found it on Stack overflow, then they did the str_replace. Which if you skip the hex_quote, it misses all that entirely. TIL. Thanks for your help!
Could not agree more, my degree had a full database module too and I went back and took some extra courses over the years. The amount of dev headache time (DHT) you can save if you start with a well designed, normalised db is huge
Good list, if I were to rank your list in order of importance then I'd start with DB stuff too.
You can never be too good at testing.
An advantage of using queues is that you can in the future add App C and App D, all consuming from the Queue from App A. It's better to query data and push events, so if the data fits in as an 'event' use the queue, it will be better for everyone in the long run.