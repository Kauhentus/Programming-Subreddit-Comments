Technically it's not a singleton, it's a [multiton](http://en.wikipedia.org/wiki/Multiton_pattern). You're still saving global state in the `Cart` class. I second /u/rbmichael's suggestion of separating the cart logic from the managing carts logic. A simple registry would do.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Multiton pattern**](https://en.wikipedia.org/wiki/Multiton%20pattern): [](#sfw) --- &gt; &gt;In [software engineering](https://en.wikipedia.org/wiki/Software_engineering), the __multiton pattern__ is a [design pattern](https://en.wikipedia.org/wiki/Design_pattern_(computer_science\)) similar to the [singleton](https://en.wikipedia.org/wiki/Singleton_pattern), which allows only one instance of a class to be created. The multiton pattern expands on the singleton concept to manage a [map](https://en.wikipedia.org/wiki/Associative_array) of named instances as key-value pairs. &gt;Rather than having a single instance *per application* (e.g. the java.lang.Runtime object in the [Java programming language](https://en.wikipedia.org/wiki/Java_(programming_language\))) the multiton pattern instead ensures a single instance *per key*. &gt;Most people and textbooks consider this a singleton pattern [*[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation_needed)*]. For example, multiton does not explicitly appear in the highly regarded [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming) text book *[Design Patterns](https://en.wikipedia.org/wiki/Design_Patterns_(book\))* (it appears as a more flexible approach named __registry of singletons__). &gt;==== &gt;[**Image**](https://i.imgur.com/25emkko.png) [^(i)](https://commons.wikimedia.org/wiki/File:Multiton.svg) - *UML diagram of the multiton* --- ^Interesting: [^Initialization-on-demand ^holder ^idiom](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom) ^| [^Lazy ^initialization](https://en.wikipedia.org/wiki/Lazy_initialization) ^| [^Software ^design ^pattern](https://en.wikipedia.org/wiki/Software_design_pattern) ^| [^PureMVC](https://en.wikipedia.org/wiki/PureMVC) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+crbr6xp) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+crbr6xp)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
When composer was new on our team the biggest error I've seen is the devs using composer to deploy code to their pre-prod or test environment, but not using a lock file. When I asked how they can consider it the same as what was tested by them in our dev integration environment they looked at me like I was crazy. I had to explain how they could get drastically different versions. They acted like this was a good thing because it "keeps things up to date". Yeah..... No. That got nipped in the bud, but only after posting on some forums/reddit where I got similar comments from composer users about how it "keeps things up to date". I thought I was in the Twilight Zone. Lock your versions. Update on your schedule and backup your vendor folder somehow.
Are you planning to distribute this framework? If not you might consider starting with PHP7 which will be released soon.
Sure, some proof-reading wouldn't hurt but it's not like it's completely unintelligible. His points come across just fine in spite of the typos/grammar mistakes and I'm pretty sure we should be discussing those points instead. For instance, the point about Packagist packages not being forever is a good one. Your dependencies could break hard because some dev decided to make the current, *and all previous*, versions of his/her package unavailable. If that package is distributed under a license that allows redistribution then there's no reason this should even be a potential issue.
&gt; those of us who know how to use sockets and select don't find PHP to be "shockingly fast" at all. If you *actually* know how to use `select()` you'll also know it's an O(n) operation and absolutely *NOT* the right tool to get that type of result under any kind of concurrent client load. But I'm sure you're just testing that *everyone else* knows this. Someone of your expertise wouldn't make such an obviously incorrect statement.
To be fair unit tests don't prove anything regarding security. Actually the biggest error I saw people make with payment APIs is: if($token == $correctToken) { Using loose comparison makes tokens "a" and 0 same: http://3v4l.org/GFJD5 There are probably hundreds of ecommerce websites where you can get free stuff by sending 0 as payment token
My thoughts on this are that obfuscating the ids is not really any type of solution. If I need to protect the information behind my database ids, I'll do it through authentication and/or ACL/role checking. Downvote me all you like, but randomizing an id to make it less sequential is not really any type of security layer and there are better solutions. - it seems more of a tool to dress up the id for display purposes. If that's the case, then that's what needs to be talked about. Forgive me, but I'm just looking for more insight to this practice and how it would actually be helpful. 
If someone is automating the process of scraping using an incrementing value, what do they care if there are gaps in numbers? They just discard the gaps and keep incrementing. 
I have only really noticed this when it has to clone a repository rather than download it. There's still a lot of libraries referencing `dev-master` as their version too.
Like any package manager, the benefits begin to shine when you have a number of dependencies which have their own set of dependencies. Instead of trying to resolve the dependencies and their conflicts manually, composer does it all for you. Plus it makes updating dependencies a breeze.
Phalcon is a really easy to use, flexible and complete framework. We've created custom bootstraps according to different needs: a micro app (Silex style app for our API), a single module app for the administrative backend, a multi-module application for our custom CMS and a Reactphp+Phalcon application for real-time stats, all of this using just one framework. It provides all the functionality we need to develop web applications without having to install any PHP dependencies: * Dependency Injection/Inversion of Control component * A publishâ€“subscribe component to extend the framework functionality via hooks * A flexible dispatcher and applications manager * A fast regex-based router (optional use of annotations) * Contextual escaping (CSS, HTML, Javascript, etc) * An easy-to-use ORM implementing a high-level SQL language called PHQL that provides many useful security features to avoid SQL injections * Volt - A Jinja based template engine (ahead-of-time compilation to PHP) * CLI tools * Out of the box integration with MySQL, PostgreSQL, Beanstalkd, Redis, Mongo, APC, XCache, etc Phalcon\Escaper is one of my favorite components, it supplies a really faster contextual escaping component that is currently only available in PHP. . Despite being an extension you can extend it easily or replace any component of your own by implementing the proper interfaces. Additionally, we are distributing some proprietary functions as DLLs for our customers using Zephir.
Isn't that a repo?
Thanks...What type of projects do you work on that have that complexity? I'm a web dev/coder, complex in my world is having to stop and create a WP plugin that uses jQuery, which WP updates for me.
Without Composer, managing dependencies is significantly more complicated and error-prone, and I can't really think of any advantages. Alternatively one could just never have any dependencies, but for most projects of any significant size that's completely irrational and symptomatic of NIH syndrome.
I think applications like this are where Postgres' json/jsonb is a great choice, with the nice advantage of keeping the document storage and relational storage integrated.
All of those things are available without being dependent on a third party library, without much extra work.
Oh...that's handy. Yeah, I could totally see it being useful....if the file is going on the repo either way, why not just commit the other files to the project, where any developer could grab the changes? Or does the Composer file handle a complexity that I'm missing....
The idea is that you dont push the /vendor folder, instead you push your composer.lock and composer.json file (these are much much smaller). That way, when the other developer comes to pulling it in, they have a smaller download, and simply run composer install to get exactly the same code that you have. It helps keep your repository clean of external code, the same way you would with node_modules or bower_components.
Nope, most people will usually add the vendor (packages) directory to their .gitignore file (saves a lot of wasted version tracking) Then upon pulling down the git repository, composer install downloads all of the packages files that were specified in the composer.lock file
Yeah, compared to what significant can be in the development world, I for sure do not have any significant sized projects. I have a few themes that use Git repo's, but I've had to modify them...which defeats the purpose of Composer I believe.
oh....you don't push the /vendor folder, so countless gits are doing it wrong.
&gt; I think the term you're looking for is conditionals. Thanks, fixed it. &gt; The different sizes of the frameworks skews things Why? If a framework has more classes, it has more files to store it. &gt; Why not change it to per 1000 lines of code Absolute values will change, but difference between frameworks will stay the same.
I think I'm just going to have to dive into something like Laravel with various deps. Maybe I'll finally get away from WP.
Example: Laravel uses a .gitignore rule in the vendor/ directory. Why? Well, those files are not directly related to the project, and... have you seen how many files are there? You don't need those 100000 files in your repository, or whatever amount of files your project needs. Those days of a 500MB zip file named "final-version.zip" are gone. 
Sorry, English is not priority objective in my life. I blame myself for that. I wanted to describe more in less words.
It recommends it, then provides a solution around it....that's why you get questions like mine.
Well, programmers are supposed to overwrite/inherit from classes in the vendor/ directory, instead of editing files inside it :) Besides version management, composer handles class autoloading of PSR-0 and PSR-4 projects automatically. 
Pretty interesting stuff. Is laravel really that small? Compared to symfony.
Laravel reuses a lot of Symfony components (such as the HTTP request/response handling and the URL routing). Not sure if the Symfony parts are being counted towards Laravel's stats or not. I don't think it'd make sense to include stats from third party components when analysing the code of one particular project. 
Here ya go: https://knpuniversity.com/screencast/composer
Enjoying that torrented copy of Ex Machina I see. :-)
Composer maps the auto loaders for the Vendors...that's handy. Wordpress seriously needs to get with the times......shipping a vendor with a plugin is nuts, being force to rip out parts of scripts is nuts. Kinda stuck between a rock and Wordpress here.
Im not entirely sure why the size of a framework really matters anymore.
Bedrock looks freaking amazing, I will for sure be playing with that. Found this linked from the airpair article, https://roots.io/using-composer-with-wordpress/ Not only does it setup WP with Composer, which is slick, it's also a simple improvement on security. Thanks...I'll for sure check out the other CMS's and see what they have to offer.
really? One that makes the framework much harder to learn. Two Abstraction is not free in dynamic languages (It very close to free in almost all compiled languages however). You will experience significant slow downs the more over engineered the framework is although most php project mitigate this with caching.
no opinions just stats. Since Phalcon requires a C module I think the comparison would not be fair.
Interesting, Is there some good star point / guide for PHP 7?
I'm a student, 40â‚¬ for a good printed book is really too much, I have other thing to pay for (Bills, transport, university Books and more).
Ahahahaha lol
Having significant experience with almost all of these frameworks I can promise you the size correlates highly with abstractions and the difficulty to learn but keep down voting. 
&gt; You can pass things to PHP via fastcgi_param or SetEnv in Nginx and Apache respectively or set environment vars in the PHP FPM Pool definitions. Let me rephrase the question; I have a website, which has a page where admins should be able to control stuff. How , from that page, can I set an environment variable so that it is stored permanently and read by future pages. PutEnv is not permanent: "Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state."
&gt; These benchmarks don't include webservers and applications, which makes it nice for isolation, but sometimes those things will change how a router performs (such as if the memory was evicted from caches so it's starting cold every time). Mine were tested against NginX + FPM + Opcache, and showed between approximately 10% and 40% gain depending on situation over FastRoute. 
What is the best approach for handling database connections in web socket servers? Writing my first web socket server using [ratchet](http://socketo.me/) but something I'm still working through is how to keep database and other connections open or check if they have closed? In my environment the databases close connections after a periodof inactivity. I also need to be able to handle if the database connection is lost and to re-connect. Ideas I'm considering: * Open connections per request - Prefer not to as one of the reason for this interface was to reduce latency. * Adding a wrapper to my existing DB class and log when the last query was performed and use that knowing when re-establishing the connection - Still need to handle with the connect has been closed unexpectedly. * Same wrapper looking for database connection errors and re-establishing. * Adding an event in ratchet that every second runs a simple database query and if it fails attempts reconnecting to the database. 
&gt; How , from that page, can I set an environment variable so that it is stored permanently and read by future pages. You don't. Environment configuration is for application level configuration and services. If you have an admin area for configuration, store it in a database just like anything else. Or write a config file on installation of your application and have the user version control it (assuming it doesn't contain sensitive information).
This is interesting. Could you give some examples of how this will be used (such as API calls)? Or is this just a composer like plugin?
Aye, I understand now for a...typical project...it shouldn't be committed. From the article below "A regular Composer package can only be installed in vendor/" however Wordpress plugins can be installed with Composer, just not the dependencies within the Plugin, which is what I want. This is why the Vendors either get committed with the plugin, or what most of us do is rip out the parts we need, and ditch the rest. https://roots.io/using-composer-with-wordpress/
Perhaps you use a bash script to log into each profile on whatever site and report back with your desired stats. You could then create your own database with your stats, and use php to read from that. You would have to look up each sites API (if they have one)
The overlap isn't that big â€” and I should know, I'm a linguist â€” especially when it comes to communicating ideas rather than giving instructions. Code doesn't require nearly the same level of redundancy that natural language typically does. This redundancy makes OP's text perfectly understandable in spite of minor errors and is a feature of natural language to help ensure communication in less-than-ideal situations (e.g. noisy environments, bad connections, typos, etc.) Let me know when code can run reliably with a few random bytes switched or removed here and there.
large framework != over-engineered automatically. 
Might it not be worth decoupling the IO stuff from the crypto stuff? makes it easier to run tests against either, and it'd potentially be interesting to see this in conjunction with [Flysystem](http://flysystem.thephpleague.com/), maybe? Not sure if that ends up out of the scope of what you're looking to do here.
[**@PHPSouthAfrica**](https://twitter.com/PHPSouthAfrica): &gt;[2015-05-18 06:09:34 UTC](https://twitter.com/PHPSouthAfrica/status/600181413237882881) &gt;[#PHPJhb15](https://twitter.com/search?q=%23PHPJhb15) [#Johannesburg](https://twitter.com/search?q=%23Johannesburg) [#SouthAfrica](https://twitter.com/search?q=%23SouthAfrica) [#CallforPapers](https://twitter.com/search?q=%23CallforPapers) now open. ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/36cemt%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Can i see your research? Also, don't assume i downvoted you. 
...what's new? Can't find any infos or changelog anywhere
That's because there are no release of PhpSecLib. You can download deployer as phar (recommended), or install phpseclib with composer: &gt; composer require phpseclib/phpseclib:dev-master#2c96af214bf1b5e29b707249108504b4e0041a21 This will gone away when phpseclib create new release of master branch.
This is an old link (from a couple of years ago), but I guess it is worth to bring up once in a while to remind about different kind of quirks and principles related to PHP and web application development. Old thread: http://www.reddit.com/r/PHP/comments/1g6tin/web_app_security_quiz_15_questions_about_security/ (since then 3 new questions have been added).
Nothing wrong with Codeigniter, for learning MVC its a good choice. Laravel has taken its place with more advanced and up to date features, but for an introduction to MVC and a nice/fast/easy to work with framework, it cannot be beaten in my opinion
Happy cakeday, we're expecting cat pics before noon. You're the second person who's mentioned this to me. I'll bring it up with the Product team and with community hackers. The latter are much more likely to build something requiring Postgres though. Same group who built Redis for session storage module and order archive in Mongo module. 
Awesome work. Looks really nice will have to give it a try! As a placeholder for anyone using Grunt and just getting into this deployment stuff, I've been using [grunt-ssh](https://github.com/chuckmo/grunt-ssh) it's pretty similar in that you can define deployment servers and tasks to run. Once you do `grunt sshexec:deploy` it'll remote into your server and run the commands. Might be a nice way of getting into deployment-y stuff :-)
Is your approach published anywhere?
Just a minor UX thing, you should also use milliseconds rather than seconds. 2.68 is easier to read/compare than 0.00268 :)
I wouldn't worry about the package name if I were you, I think the 'nikic' vendor is enough to distinguish it in the PHP community :) With regards to the HTTP method scenario, that is an interesting edge case which I had not considered. I have updated the tests and implementation to handle this. Thanks for pointing this out. I would be interested to see Anthony's project that you have mentioned if it is open source, do you have a link?
I would say if you are coming in as a newbie then CodeIgniter isn't a good choice. It's not the worst choice you could make but symfony or laravel are much better examples of clean modern code.
The fact that php runs on shared nothing archetechure (eg it has life of one http request), this technique does not make sense in php at least. Don't think there can be any valid use for this.
Also a good point. Updated.
In an MVC application, where should I call `session_start()` ? Should it be in the index.php or in a session controller ?
It should be called during the bootstraping part of your app
One note on this support, it only applies to the projects found in the FriendsOfPHP database (GitHub repo) so don't expect every single project to have something. Last count there's 22 projects in the repo but it is growing, so that's good to see. Additionally, there's work being done in the PHP-FIG group around a common vulnerability reporting format and discovery method that could add some good value to this too.
Thank a lot! Docs for me is hardest part. =) They all located here: https://github.com/deployphp/docs If you can help, i'm will be very glad. About before/after function i say in Getting Started section :)
Even nicer would be to use the ```@dev``` suffix only on that dependency - in most cases you want to prefer stable packages and override on a case-by-case basis.
Still don't use them and am very happy for that matter. Composition achieves the same goal in a much more readable an concise manner
&gt; About before/after function i say in Getting Started section Yes, but I think the 'functions' page should have them as well. Think of it this way: If a visitor comes to the site, looking for the 'after' function, where will they look? On the functions page, so that's where it should be.. Don't be afraid to duplicate parts of the documentation where-ever relevant. People can easily skip over it, but it helps those who might be looking for it, in that place. So, I think 'functions' should also have before, after, but also 'upload' and 'download', and perhaps others. 
Simple question: What are you doing here? Well you really hate PHP, and thats ok. But why do you browse the PHP subreddit then? Are you the kind of guy who travels to other countries just to scream at everyone: "IM BETTER THAN YOU!"? I dunno man I think a "good" developer can build great applications with every language. 
I'm trying to get deployer up and running now, but i'm bumping into some issues. Hope you don't mind me asking here.. I've set up a `deploy.php` as specified in 'Getting started'. `dep` works and prints out the version and stuff. However, other than that, I only get this: [bob:~]$ dep deploy:prepare production [InvalidArgumentException] There are no commands defined in the "deploy" namespace. [bob:~]$ dep deploy [InvalidArgumentException] Command "deploy" is not defined. What am I doing wrong? :-)
&gt; [bob:~]$ dep deploy:prepare production It's looks like you are trying to run `dep` in your `home` dir. cd to you project root there are `deploy.php` specified.
This is good, but abstract, and has no code examples. It is like serving a beautiful plate with no meal in it.
Ugh, I'm such an idiot sometimes. That's what I get for having too many terminals open. Thanks!
Have a simple class which starts the session if you request to read or write a session variable. Not a controller. Just a class. More of a service, if you insist.
I want to create my own cms using OOP and frameworks. Are there some good articles I can read about this? What about papers on CMSes?
Woah! 
Well "concise" isn't a quality metric really. You also can use "include" in the middle of a method for being concise, or put singletons everywhere. If you have a class that uses 2 or more traits each of which uses 2 traits itself reading the class becomes impossible. And if some traits start to rely on other traits being added it becomes a hell
"You can abuse it" is not a valid argument. You can abuse everything, including composition (law of Demeter).
I would say not. Laravel doesn't require very much code/time to get started with: http://laravel.com/docs/4.2/quick Symfony has a bit more bootstrap/code required but not by much. I don't see any benefit to using CodeIgniter in this respect.
&gt; But if you start doing traits you pretty much have to use them more and more eventually, like with static methods. Nothing suggests that. You don't seem to have experience using traits, but speak about their downsides. Not good. &gt; the author suggest that using them for events is a good idea, which already means that that trait is going to be everywhere in the system. The author uses traits for default interface methods, same like Java 8. It's a good use of traits - enables backwards-compatible interface evolution in libraries.
&gt; In your previous thread, you said a trie is 20%-80% faster than preg_match. Yes. Once built and loaded into memory. But it takes several GB of memory. So the static benchmark is insanely fast. The dynamic one is slow as hell. &gt; Now, you've discovered splitting by path segments, the obvious solution which other routers already implement. Actually, the approach I've taken is rather unique. The only other router I've seen that does it is: https://github.com/TimeToogo/RapidRoute The post series is really about showing the journey. How it started, the steps (and perf along the way). The lexing approach is far faster on CPU than just "splitting by path segment", but the memory costs make it prohibitive. I wanted to test and push those limits. &gt; Lesson learned, I hope. Yes. The lesson that you have to try things to learn. That you need to test things, not just make an assumption. And that there are always tradeoffs at play... Especially when it comes to Time/Memory tradeoffs.
&gt; You don't seem to have experience using traits, but speak about their downsides. Really hate when people make assumptions about my experience. &gt; same like Java 8 Except in Java 8 the default implementation is inseperable from the interface itself. Unlike PHP where traits cannot implement an interface. &gt; The author uses traits for default interface methods It was just one, and even not the first use case he described. I see no interface mentioned in his events example.
Ok, a little bit of a different answer from /u/mrjking because I feel like some assumptions are made there. In a typical *nix/apache setup, public_html is where the apache web config will point to and say "Hey, any requests to www.xyz.com start there". So if I were to try to go to www.xyz.com/foo/bar.html, the web server would look in public_html/foo/ for a file called bar.html. This is not specifically a php thing, and you can change that directory. It does, however, mean that anything outside of that directory is effectively shielded from direct browsing via the web. So then to tack to to what /u/mrjking wrote, most modern practices are now moving so that any server-side processing code would live outside of public_html in another directory or set of directories, and in your public_html you would have a file that would handle all requests. however, you don't have to do this. You can still place your entire site inside of public_html, or choose to put only certain files (like db connections, password hold files, etc) outside of your public folder. It all depends on what you're looking to do. 
&gt; i want to know if it's the best Framework to study on MVC. Keep in mind that MVC is a design pattern and that frameworks implement this pattern differently and to varying degrees. As such, you won't really find a single "best framework to study MVC". Better to study the design pattern and its variations from a context that is language agnostic. Meaning, don't rely on a PHP framework to learn MVC. As for CodeIgniter, the reason it's not appreciated has more to do with the fact that it's been somewhat abandoned by its creators over the years. Things have rapidly evolved in the PHP world, even just within the last couple of years, that CI has sadly become somewhat of a relic. At one point it was one of the few viable options for a good PHP based framework to use (especially around the period when PHP4 and PHP5 were both widely in use), but starting any new PHP-based project, I would recommend using a more up-to-date framework.
You are right that splitting by / isn't unique, but that didn't came immediately to his mind it seems to me. Most routers indeed do that. Which isn't his point eitherâ€¦ You'll see in his third post of the series. The unique part of it is the way of compiling it into a separate optimized file [and how (!)] and then caching/executing it.
&gt; Do I really need to ssh into all the servers to put the new key somewhere I would, yes. Automate it with something like [Fabric](http://www.fabfile.org/). If you're running a lot of servers you can use a service discovery mechanism like [etcd](https://github.com/coreos/etcd) or [eureka](https://github.com/Netflix/eureka). If you're using AWS you can (and should) use [EC2 roles](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html) to avoid having to keep AWS keys in your application at all. Your local machines can read from the `~/.aws/credentials` file and production servers will use instance metadata.
&gt; The unique part of it is the way of compiling it into a separate optimized file [and how (!)] and then caching/executing it. It'd be best to stop claiming this or that is unique, because it comes off arrogant (and ignorant). If he wants to demonstrate a technique - let the code stand on its own. The first two posts so far only demonstrate what *doesn't* work and it's a waste of his readers' time. Tell me I'm wrong. People have been compiling XML, YAML etc. routes into optimized Java, Python, PHP etc. for many years now (me included), and it's somewhat irritating to see someone struggling to fit their engine into 3GB of RAM claim ownership of basic techniques like compiling a parser to optimized code.
Thanks for the input! I think I'm going to go with a client directory and a server directory to keep that code separate. I'm not necessarily 'rolling my own', but I'm not using a full stack. Using a combination of a dependency injector, fast-route, and other popular packages for data, HTTP, etc.
&gt; The first two posts so far only demonstrate what doesn't work The first two posts demonstrate the process of trial and error. And the evolution of a research idea. I've shown techniques that make differing CPU/Memory tradeoffs. They may not work in the very specific routing use-case, but that doesn't mean they don't work.
&gt; You use a 104-bit, cryptographically strong, random number (hexadecimal encoded, for example) as your password on a web site which stores passwords as plain MD5 hashes: md5(password). Is it safe to assume your password will be safe if the user database leaks? Can someone explain why the answer to this is **"Yes"**. Regardless of how a string was created and passed to MD5, if another string also generates the same hash then it would not matter how the users password was originally created, right? You just need a string that converts into the same hash and with it being MD5 (collision vulnerabilities) it isn't that safe?
You are the one who said composition was more concise, thus bringing it up as an important metric.
Ah yes, misworded that one. I meant more "neat"
Is Hack/HHVM the real reason why we are finally getting scalar type hints and return value type hints?
It would be worth having only one type of connection in the program. If you have separate MySQLi and PDO connection, I'm pretty sure PHP will have to make two separate connections to the database, which is pretty expensive.
Hello guys, I am currently learning OOP and I haven't yet feel the need for using static methods. What am I missing?
I'd like to know as well. When it's encoded there is only so many characters to use. With MD5 you can still brute force a 12 character azAZ10 password. A modest setup can do ~40 billion per second. Sure it comes out to 933526 days to brute force but you can get amazon GPU instances for only $2.6/hr or just spec out a GPU setup for a few thousand and get into the high billions/trillions per second. If we reduce it to hexadecimal (like the example, and lets assume azAZ are seperate) then that leaves us with a mere 4 days to go through every combination. MD5 is not for security.
Thanks... it makes me feel better that I got that one wrong by saying **"No"** because i saw MD5 and shook my head.
I would personally say that these post's are not a waste of time, you can not learn from success alone. I have failed many times and if I had the time to write about I would. It is far more arrogant (and ignorant) to tell everybody about what you have successfully made without showing the flaws and failures of it. To have an article to blow what I thought I knew apart and get me to think about it more is more of a benefit than, "Hey, look how you can use my awesome package/library/framework/pattern and make yourself a coding ninja!" I get what you are saying, and questioning is a good thing, but be constructive and either write a blog post to back up your argument(s) or word it better to not come across so aggressive. Also, code alone can not always tell the story; even well written code. ;)
Comes back to what I said: research first, speak second. Telling the story of a journey full of failures on the path to success is very valuable, but you can tell that story only once you *have success* and you can look back and see what worked, what didn't, why and so on. Because the story where you start making some grandiose promises &amp; claims only to see it all devolve into pedestrian results is a very different story: 1. I'll make awesome template engine with context sensitive escaping better than everyone! 2. I'll make awesome parsers with tries faster than everyone! 3. Ok trie takes too much RAM, I'll try routes, they're simpler. Routes faster than everyone! 4. Ok trie takes too much RAM again, I'll.. I'll just make a normal router, like everyone does and... about the same speed. Well I can tell you plenty of stories like that. Say, I once woke up thinking I can levitate out of bed if I really, truly believed I can, but I instead kept laying in bed. End of story.
The point is that the hash is 104 bits of entropy. Most users' passwords have far fewer bits. Is MD5 safe? No. Is **YOUR** password likely to remain uncracked when they bust open the GPU clusters? Possibly. Would [`password_*`](https://php.net/password_hash) or [password_lock](https://github.com/paragonie/password_lock) be safer? Yep.
Nothing really. There's some instances where they're convenient, but they often lead to a global state and are harder to test, which is not good. I think generally you'll be better off just staying away from them, I don't think I've written a single static method in the last 2 years. As long as you know what they are and how to use them so that when you come across them you know what they are, you're all set.
Author here: the intention (and practice) is very much to do so with an interface. It's not in the first code sample but there's a section lower in the article dealing explicitly with interfaces, including the fact I don't create a trait without an interface. Yes, PHP doesn't allow your trait to be an interface but that's not all bad: the decision to implement an interface really ought to be up to the class, not the trait. Whether you fulfill that contract with a trait or hardcoded implementation or internal object is just an implementation detail. The article in full is very much in favor of abstraction and composition as the better and more widely used tool. Traits are not a replacement for that. However, they can (at times) make abstractions easier to use or more feasible to maintain. Whether or not anyone loves or hates them though, that's fine with me: the article is simply "How I Use Traits", not "Why You Should Use Traits" :)
The only place I ever use static methods is for a utility class. So instead of having to create a new object or inherit the utility methods on a new class I can just call Utils::doSomething() 
thx man, could you please also look at my [question](https://www.reddit.com/r/PHP/comments/36bc2z/php_moronic_monday_18052015/crd4rsw) in this thread where I ask the other guy about performance of replacing public method with static? Thx in advance ;)
Latavel mom-mom-mom
It should be insignificant, on the order of much less than 1ms. I'd say if you're at the point where you're needing to optimize on that level you're using the wrong language to begin with.
Any suggestions to masquerade the situation for a better question? 3-5 seconds hashing time doesn't sound something one should use in online environment (offline situations are different). I.e the famous scrypt paper by Colin Percival suggests &lt; 100ms hashing time for online setups. And the DoS is very hard to defend against with such hashing settings. You can't make poor passwords solid no matter how much you stretch it. Passwords are made stronger by selecting proper passwords in the first place (password policy) and handled properly on the server (reasonable settings).
ping /u/jwage Interested to hear your thoughts..
&gt; So just to be clear, this means session_start() gets called on every page load? That's usually what you want... although if you are *sure* you won't need to read any session-data, it can sometimes be a performance improvement to skip it. This occurs when you are using a session-implementation which blocks on concurrent requests for the same session, and when the design of the site involves a lot of web-requests from the same user that can safely run concurrently. A strongly related optimization is using [session_write_close()](http://php.net/manual/en/function.session-write-close.php) when you've loaded `$_SESSION` data but are certain you won't need to make any changes.
&gt; it best suits a particular type of developer Hear, hear.
Someone care to expand on the "lazy loading is nonsense" point? I use quite a fair bit of lazy loading / proxy objects, am I really setting myself up for trouble?
&gt; just straight up may not like - generating entities via CLI, working via proxy objects for entities, using annotations, etc. Most of these things are not required. I don't think I've ever generated an entity from the CLI, working with proxy objects is mostly seamless, and the use of annotations is completely up to the developer.
I've heard rumor that Andi et. al. at Zend see HHVM as a direct thread to Zend Engine. I suppose it's impossible to know or quantify how much Hack might have influenced the voters on PHP RFCs (if at all), or whether it really did take a decade to come up with a reasonable implementation of the aforementioned features. Seems just a little more than coincidental to me. Edit: spelling
not using Silex but I guess you should be able to use any ORM you like, there's Eloquent, Redbean, Propel... and maybe others why Active Record though if I may ask? recently I stumbled upon Spot ORM, it's neat, implements the Data Mapper pattern using Doctrine DBAL
Event though I think Doctrine is a fantastic piece of software, I tend to agree with plenty of the things said in this article. My way of working with web applications is more focused on a "transactional" approach, so doctrine didn't actually made a lot of sense to me to be used in most of the PHP apps I do. It sounds like you could enjoy using the CakePHP 3 ORM (https://github.com/cakephp/orm). I'm one of the guys behind it and I have put my vision of having a flexible and easy to use library that could also be used for powerful query building and data processing in CLI scripts. It is not an ActiveRecord implementation, even though I enjoy the pattern. I'm Happy to find here other people that share a mindset similar to mine :)
Actually I couldn't agree more with the author in that point. Lazy-loading almost always becomes a problem and a custom query has to be crafted for the use case. Why not better think ahead of the data you will use and create a performant query that would best satisfy your needs?
Dependency injection is about injecting *dependencies*, i.e. a module/component/service (name it whatever you want) that is used to perform the action. Services should be [stateless](http://en.wikipedia.org/wiki/Service_statelessness_principle). An entity is not a dependency, it is a parameter. If it injected in the constructor of a service, then the service is not stateless. &gt; I write classes that take scalar values such as API keys and integer IDs all the time If they are passed in method parameters, then everything is fine, but this is not dependency injection.
Definitely, one of the primary reasons for using an identity map is saving resources, specially when many entities needs to be created. The chief example of this is loading the tags for a group of posts, the likelihood of creating the same tag entity over and over again is quite high. It could be interesting to explore an approach where an identity map is used to save resources while hydrating the query results, but the actually results are different instances. I tend to think that having the same instances shared in different places of the application can lead to unexpected results (like ghost updates). Using different instances is sort of a good way of emulating immutability for your objets.
honest question about PHP routers in general what are the advantages of "feeding" all your application routes for every request served? one argument I've been given is that it allows you to run any route from anywhere, but wouldn't it be better to send an (other) HTTP request to that route if you need to run it?
Yeah, but hydrating in my experience is costly, maybe a cloning approach can be more performant, worth experimenting!
I guess I don't understand the dislike of lazy loading. For the object graphs where I work, eager loading isn't an option. We have no server that can untangle the mess of "enterprise-y" graphs that have accumulate over the years. Sure, you can encounter the n+1 query problem, but those can be easily optimized away. Either by writing a custom repository, even easier, just telling Doctrine to eager load the relations when you define the association.
Problem is, everyone's naming conventions are different.
I currently use rocketeer, do you think it would be worth the switch? Didn't have much time to look at the docs honestly, maybe later! This question relates /u/Anahkiasen too :p
This is actually really interesting to me, since I just wrote a decent amount of a MySQL parser just so I could split MySQL dumps into statements correctly, but I feel like I could have done it better.
If you were using the library, you'd adapt to the conventions. There's such a 'rapid dev' aspect to GORM when in Grails that it's rather painful to come back to PHP (but there are some upsides to PHP that alleviate some Java pain too - nothing's perfect). 
As somebody who has never used Data Mapper, why would I benefit from keeping the in memory and data store representations independent of each other? I just don't understand where I'd use it. Could you explain in terms of a blog or something please. 
&gt; I write classes that take scalar values such as API keys and integer IDs all the time, how is that different from passing in an entity? A dependency is required for the class to perform it's function, and an object shouldn't be capable of being instantiated without its dependencies. Something like an API key or an ID are value objects - defined purely by their raw data. An entity is a domain concept defined by an unique identity and a lifecycle. My personal thinking is an object's dependencies shouldn't have a lifecycle. Once it's given to the dependent class, it shouldn't be subject to external state changes. For example, I would consider this poor design: $accessControl = new UserProjectAccessControl($currentUser); if($accessControl-&gt;userCanEdit($currentProject)) { //do something } Because `$currentUser` can be altered outside of the access control class. The user could be banned, removed from the project, etc. Calling the same method on the same instance at two different points during execution could produce different results. I'd prefer this implementation: $accessControl = new UserProjectAccessControl(); if($accessControl-&gt;userCanEdit($currentUser, $currentProject)) { //do something } My reasoning is that entities are expected to change state over the course of execution. Dependencies, for the most part, shouldn't. EDIT: I should also clarify that I'm not an especially big fan of Doctrine and that most of the time I use an Active Record ORM like Eloquent.
&gt; Dependencies, for the most part, shouldn't. More like "services shouldn't", but yes, I agree. This is both a pro- and cons- argument in this D2 discussion, as the ORM is indeed stateful (unless each service receives a new `IdentityMap` per execution context, which isn't the case right now)
&gt; Some kind of transformer or decorator client class that operates on an instance of an entity (which adheres to a contract of some kind) is a perfectly valid usecase for injecting an entity as a dependency. In that case, I would argue the entity isn't a dependency but data being operated on. So instead of this: $transformer = new ProjectApiTransformer($project); return $transformer-&gt;transform(); I'd do this instead: $transformer = new ProjectApiTransformer; return $transformer-&gt;transform($project); Having the transformer accept the object it's transforming as a dependency seems like having a car wash require a car be present as part of it's construction. The car wash doesn't *depend* on the car, it *operates* on it.
If you receive a fresh copy each time, what exactly would you expect to happen when flushing, if you modify both of them?
&gt; More like "services shouldn't", but yes, I agree. Valid point, and something that became more clear to me as I was writing. That being said, I find that when building applications, the majority of the code I write can be defined as either stateless services or stateful entities. Maybe that's just my particular style of application architecture.
For a blog it might not make a lot of sense, but separating the design of the model and the one of the database is very valuable when your application gets complex. This is for example the core of Domain Driven Design, where you want to design your domain model while staying decoupled from anything related to storage (or any technical consideration for that matter). So in short, the data mapper pattern lets you write your model in PHP without caring at all about how it will be persisted.
Turns out I was excluding the wrong thing. PSR2 actually picks up the 'Squiz' rule: &lt;rule ref="PSR2"&gt; &lt;exclude name="Squiz.WhiteSpace.ScopeClosingBrace"/&gt; &lt;/rule&gt;
&gt; why would I benefit from keeping the in memory and data store representations independent of each other? Because if they're tightly-coupled, changes in your data store could force you to compromise your application's business logic. For example, let's say you have a REST API responsible for serving election result data. All it does is accept a `precinct_id` argument it returns the results of the `precinct_elections` table that match as JSON. What happens when you need to support a new kind of election that can span multiple districts, or only exists within a certain timeframe? You're forced to compromise your database design to accomodate business logic or vise versa. A significant source of submissions to The Daily WTF are the result of trying to cram business logic into your database engine or polluting business rules with database logic. The storage mechanism, whether it's a relational database, key-value store, or a cloud server API, is an implementation detail. It should have no impact on the application's business rules.
Not really a hobby framework after 3 years of development and a solid userbase
I don't understand. Doctrine has no save method on the entity manager, are you suggesting it should have one? I assume not, since you said it does not make sense to you to have a separate save and a flush? Edit: Sorry, I meant to say, you are not supposed to call -&gt;save() on the entity manager when modifying entities, only when saving a new entity. Are you suggesting you should call save every time on modifications too?
Fair enough. I like to read into things.
the first two posts demonstrate that while you tell everyone else that routing is not the bottleneck in apps whenever someone posts their "yet another router/framework" projects that they do themselves to learn, it's completely okay for you to do so. it's a series that's ultimately pointless even for the goal of learning. 
First of all, for anyone who is curious and hasn't seen it, here's the timeline: https://wiki.php.net/rfc/php7timeline Some of this is speculation so someone who is more familiar with the internals process may be able to give a more accurate answer, but here goes. If I'm not mistaken RFCs don't necessarily have a PR or even an implementation at the time of approval, definitely not a final version at least, they just almost always do to demonstrate the/an implementation so that speculations about the implementation don't prevent them from passing and so they're not stuck with a huge number of RFCs they need to implement or they have to wait for implementations for before they can proceed. I'm not sure how many of the RFCs for 7 did not at least have a final PR version at the time of the feature freeze, but I suspect they're largely in at this point, being more than 2/3 of the way through the proposed finalization/testing phase. They are still officially in the implementation finalization and testing phase now, though, so the implementations could still be changing. Even if the RFCs did all have PRs when they were accepted I'd assume many probably do change in the interest of performance improvements, simpler or more robust implementations, or any number of other reasons. I'm sure the testing process itself is a fairly long one too, and I suspect many RFCs don't include updated tests, or at least are not comprehensive, so relevant tests need to be updated for RFCs that have BC issues, and new tests added for the new functionality. Plus all of the documentation and change longs need to be updated too, along with whatever other similar things that need to be done before they can call it complete but don't actually have anything to do with a working implementation. Those types of things are not keeping it from being "complete", but I suspect much of it is being done along side the code changes, so while they're not keeping it from being "complete", they're probably taking up time that would otherwise be spent "completing" it. Overall, I would guess that aside from some bug fixes and tests, PHP 7 itself is largely "complete" at this point from a feature perspective. I would never even consider using PHP 7 on a live server for anything but a personal project right now though.
 &gt; Even though Doctrine is an abstraction over your data store, the data store STILL SHOULD BE the source of truth. Thus, separate save() and flush() methods make precisely no fucking sense. You probably missed locking/transactions in this. Even in your example, in this precise segment: $user2 = $em-&gt;find('user', 4); $user2-&gt;name = 'steve'; // working on stale data here $em-&gt;save($user2); I don't see how this is better than D2. The stale data is actually your source of truth during the transaction, that's why a transaction should eventually fail. What I think is that you are using the ORM as a `TableGateway` (too used to `ActiveRecord`, maybe) without realizing it. The `EntityManager` (the `UnitOfWork`, precisely) is an abstraction around an active transaction, not around the database.
&gt; It doesn't matter how it's encoded. If your password has 104 bit of entropy, the search space is still 2^104. Depends on the probability of getting a collision. I'm not saying this is an issue with MD5, I'm not a cryptographer so I wouldn't know; I'm just saying that this doesn't hold for shitty hash functions.
&gt; A lot of these questions are just silly. For example the one about uploading avatar filenames. Why on earth would you store the file with the user given filename? That is stupid to begin with. You'd be surprised at the number of PHP developers who don't realize this.
I put up a hash before and offered $500. 300 upvotes, but no strings.
I am using phpMyAdmin and I am wondering if there is a way to list only tables that were custom made, I guess, not ones made by default by drupal or anything so I can get a description of them. I can see a list of all the tables but I don't know how I can go about finding if they were made by default or custom made. Thanks for any help.
Is he posting a full router online on GitHub and registering it on packagist and telling people to use it? No. Is he documenting a learning process using different techniques, that is in fact extremely interesting? Yes. There's no problem here, move along, 
Is this comparable to chef or puppet? If not, how is it different? If so, what compelling reasons would I have to try out or use deployer? 
Really?
A couple of questions from someone who's only had cursory exposure to Docker: - Why are you using `supervisord` in your Nginx-only Docker images versus just running Nginx with `CMD` or `ENTRYPOINT` - Why not split PHP-FPM and Nginx into two Docker images and link them? - Why not deploy the code as a Docker image shared over a volume instead of externally with a host volume? Sorry if my terminology is incorrect; I haven't had much time to seriously explore Docker, and I'd love to learn more!
I'm not familiar with Capistrano either. How do they differ from traditional deployment tools? 
http://timoh6.github.io/WebAppSecQuiz/answers.html Although a lot of the reasoning is flawed (rolling your own everything, not following best practices, etc), so I'd avoid treating the answers as gospel.
And even if by some miracle you don't (maybe you're just using FB connect, and using their filenames, which appear to be collision-resistant), you'll probably be resizing the image which deletes the malicious payload and (hopefully) moving the image to some sort of storage service (S3, etc) which does *not* contain your codebase. I may do something silly like that while prototyping just to avoid the tedium, but you have to do some exceedingly stupid things to be vulnerable to this kind of attack if you want your website to ever run on more than one server. That said, still validate or re-build the image and configure your servers correctly. There's no reason not to.
&gt; You can't make poor passwords solid no matter how much you stretch it. Not strictly, but if an attacker sees a work factor of 20 in the leaked data, s/he may just not even bother attempting (assuming there isn't a specific target). If we're assuming an online attack (which you generally would not in a context where the hashing algorithm is relevant), then rate limiting and two-factor auth are way more helpful than cranking the work factor. The DoS issue is relative orthogonal to that of password hashing, though it depends on the intent of the hacker. If they want to piss off a specific one of your users, yeah, not much you can do. If they want to kill your site entirely, there's a good chance they can find a page with a slow query on it that will do more damage than some bcrypting. And the amount of damage possible varies massively based on your site's infrastructure.
I'd try not to do any db code coupled in with ratchet, and instead offload to a queue like RabbitMQ, let that process it and publish back out. ps. have a look at [Thruway](https://github.com/voryx/Thruway), [ThruwayBundle](https://github.com/voryx/ThruwayBundle) and [WampPost](https://github.com/voryx/WampPost).
&gt; You'd be surprised at the number of PHP developers who don't realize this. I don't see why this would be language dependent, but I'm sure you're right.
&gt; Any suggestions to masquerade the situation for a better question? Nope =p &gt; 3-5 seconds hashing time doesn't sound something one should use in online environment Since you only calculate the hash match once, this is not a problem for the user that is logging in. I have been involved with several online authentication systems and all of them use a hashing calculation that takes a while (some seconds). It's never a problem for the end user. Once logged in you trust the user with a unique session id which doesn't require heavy calculation, of course. &gt; And the DoS is very hard to defend against with such hashing settings. Defending against a DoS is easy this way, DDoS is another thing. With a single/few host attack you can create a method that blocks users from an IP for a period after N failed logins. And with DDoS, you should have a limited number of connections. The case with a large distributed attack means that you are more likely to have your software get in to problems because the bandwidth is running out rather than the cpu power. Protecting users that have already logged in takes priority over those trying to log in with malicious requests, IMHO. &gt; You can't make poor passwords solid No, you can't, but ensuring that the user is the weakest link and not your system is important.
I'm not familliar with them , sorry) Can not tell what is diff.
Everything you said was very "Matter of factly". Back pedal all you want. I really don't care, i stand by my statement.
Interesing read! This confirms my idea that identity maps will improve speed when hydrating, thanks for sharing!
Awesome news. I'm excited for no longer having to parse out requests! In also curious on the abstraction on file uploads. I have to look at the docs every time for those.
I don't mean to be rude. But with all honesty, I'm feeling really lazy right now and the article is way too long for my energy reserve at the moment. Could some TLDR me what HTTP messages is and how there is apparently some sort of comparison to node.
PhpStorm all the way. Currently nothing comes close to it. With vim/sublime it was always an endless struggle just to get things working properly *and* stable.
Aura Router v3, is PSR7 compliant: https://github.com/auraphp/Aura.Router/tree/3.x?files=1
Not really the short version, but pretty much everything you need to know: https://mwop.net/blog/2015-01-26-psr-7-by-example.html
Indeed, thanks Marco, in fact I did read the post back then, your point is avoiding multiple collection associations to alleviate Hydration cost. I obviously agree, and is aligned with my statement: "hydrating in my experience is costly", and I was talking not about Doctrine here, more in abstract about ORM-Data Mappers
CI 3 recommends php 5.6
Remember the quiz is about to spread information and raise awareness. Hence some of the answers go on "techical level". For example, as we have known for decades, no one shoud be hashing passwords with plain MD5, but the question about 104-bit password hashed with MD5 is trying to open a view *why* we handle passwords as we do (say, bcrypt) in the first place. The ultimate goal of the quiz is to *make you think*. You can take the answers as pointers and do further investigation on those subjects (if you want to go more to the inners of things). For those who may not be too interested to know all the dirty details, I hope the questions and answers "go to the memory", so one can recall "there might be something I need to pay attention for" when he next time have to parse user submitted XML document, for example. 
Data Mapper can be very over the top for small applications from my limited research. 
Netbeans also is good. I using Netbeans IDE for my projects, and Atom &amp; Notepad++ for edit small files
It is indeed as /u/Ripdisk said. The check is active when the quiz is running, just to guard against accident back button press etc. Maybe it is a bad choice to have it, although you are the first to raise a question about it. But I'll keep this in mind, maybe I'll remove it.
PHPstorm hands down. We are using it for all kinds of projects, from small websites to very large apps.
It is true you can't really fight against DDoS by just modifying your app code, but having such a spike somewhere (in this case in the login process) is giving the attacker a greater change to cause harm to your users. Some commentary about aggressive password hashing related to DoS: http://timoh6.github.io/2013/11/26/Aggressive-password-stretching.html
Rarely do you get to do actual greenfield development. In my experience, trying to graft an ORM (or change ORM) onto a project once it has started is a PITA because everyone has their own conventions, and once you've built a few database tables it's too hard to change the DB to conform to the conventions of whatever library you've chosen.
haha, tldr is 50 times longer than original. Nice read though, examples are just so much easier to comprehend.
I am currently using Eloquent as db provider together with silex and twig, sample implementation can be found here https://github.com/xsanisty/SilexStarter/blob/develop/src/SilexStarter/Provider/EloquentServiceProvider.php
all of your questions are absolutely right. that's exactly how you should do it.
Most ORMs require to load, configure and run a lot of bytecode at each request, needlessly gobbling up the two most valuable resources: memory and computing power, space and time. And facts stand tall above framework beliefs: http://www.techempower.com/benchmarks/#section=data-r10&amp;hw=peak&amp;test=fortune&amp;b=1&amp;s=2&amp;l=sg&amp;p=w-0&amp;w=4&amp;d=2&amp;a=1 Compare the performances of php-phalcon-micro vs php-phalcon. One does not use the ORM features of phalcon. The other performs two orders of magnitude slower, sucking just like any other PHP framework ,-) (shameless plug mode) Yet, it is possible to get what people love ORMs for in a single SQL table and view model class with a single SQL abstraction and a single JSON convenience: - https://github.com/unframed/JSONModel.php - https://github.com/unframed/SQLAbstract.php 
https://atom.io/ It's nice 
Hack/HHVM is the swift kick in the ass PHP needed to resolve the issues it already knew it had.
I agree with this. Also, the Shopping cart doesn't sound like it's a "util" thing, more a "component" thing.
[Lazy instantiation](http://en.wikipedia.org/wiki/Lazy_initialization) means a handler isn't loaded in memory until its route is matched.
This is a poor article. The author declares, based on their experience with their simplest project, that just about everyone can easily switch to PHP7 with no code changes. For many, this will not be the case. For starters, a number of extensions, including the still too-popular mysql\_\* are straight up gone. Anyone using these will have to rewrite their code to use alternative extensions or libraries. The removal of mysql\_\* alone is highly likely to kill the "Older codebases are also likely to be fine!" declaration the author makes. There's also some "gotchas" - particularly in the changes for [uniform variable syntax](https://wiki.php.net/rfc/uniform_variable_syntax), which changes the way some chaining of variable variables usage works. These will be harder to track down by their nature (the solution is to always use {} braces to explicitly declare the way you want PHP to interpret what you've written) A number of errors have been reclassified, as part of [the reclassify E_STRICT RFC](https://wiki.php.net/rfc/reclassify_e_strict) and potentially as part of the Engine Exceptions implementation (the details here are still being hashed out) There are of course additional reserved words, which may clash with existing class names - particularly from the [reserve more types](https://wiki.php.net/rfc/reserve_more_types_in_php_7) and [reserve even more types](https://wiki.php.net/rfc/reserve_even_more_types_in_php_7) RFCs
Think more like "Good, I built a middleware which provides a blog application whenever a user visits "/blog/*", and it will work in *all* frameworks which implement PRS-7"
It's no worse than Netbeans
&gt;This doesn't quite make sense to me. This is the fault of the community (this subreddit) constantly telling everyone they should use PDO but never giving a reason. Less experienced people then think they have to use PDO or they are doing it wrong.
https://github.com/meadsteve/DiceApi/pull/5 Kappa
more random!
Was it this by any chance? http://dougseven.com/2014/04/17/knightmare-a-devops-cautionary-tale/ Stock trader manually deploys new algorithm on 7 out of 8 servers and the last server running old software messes things up..
PHP goes through beta, RC &amp; publishes [this guide](http://php.net/manual/en/migration56.php) with all details. Lorna Mitchell's experience will be typical. Those using mysql_*() get E_DEPRECATED in 5.5+. They know. They might have to stop posting long comments to Reddit for a few days &amp; upgrade their codebase.
Probably just because everyone use `src`, and has sort of become the standard, and changing it now is not really smart, even though I totally agree with you.
Just in case anyone wants to use the IntelliJ PHP Editor [Configuring PHP Development Environment] (https://www.jetbrains.com/idea/help/enabling-php-support.html) and more info [IntelliJ - PHP Editor](https://www.jetbrains.com/idea/features/php_editor.html).
I could replace it with php://temp. PHP would then use memory until it hits 2MiB (or whatever your config is) and then switch to a temp file automatically. Of course I'd need to change the code first so you can use something different than strings, as otherwise the whole string is in memory already anyway (for the method argument). Or am I missing something? 
Well, I installed Bolt in exactly this way into a Laravel app using laravel middleware. Laravel and Bolt both make use of Symfony's HTTPKernelInterface, so if the uri matches \^/blog then I pass the request into a Bolt application and return its response, instead of going through the laravel stack. Granted, maybe not the most efficient, but it's working and pretty quick. So yeah, it (sort of) did happen. Edit: LOL, literally didn't see who I was replying to until after!
PHP ships with ICU sentence breaking functionality, under the somewhat hard-to-find name of `IntlBreakIterator::createSentenceInstance()`. Never used it myself, but might be of interest.
From the article: &gt; Radar is a [PSR-7](http://www.php-fig.org/psr/psr-7/) compliant [Action-Domain-Responder](http://pmjones.io/adr) (ADR) system. While it may look like a micro-framework, it is more like a wrapper around the real core of your application domain. Its architecture makes it an excellent complement to Domain Driven Design. 
Okay thank you, i'll give it a try ! I suppose this implies that I'll likely have plenty of services that will return the "strict minimum - only necessary" pieces of information according to the needs (like "we" did before ORM came) ?
with lazy loading and extra lazy loading, Doctrine won't load anything until you call a getter
&gt; Surely you'll just use mysqlnd - which is a drop in replacement.... It's not.
Autoloading.
Hi ! Thank you for replying. Well I did think that what you said is correct but some people didn't agree, maybe were they not totally aware of doctrine capabilities and the lazy loading.
Lazy loading = 21 SQL queries for 20 comments. You'll need DQL and eventually raw SQL to get good performance. No value in using Doctrine for this.
I think you're misrepresenting a bit. It was not the author that recommended Eloquent, but another commenter.
Lol. 11 minutes. Two people reported it.
With regards to traits avoiding property access and no public methods without an interface: full agreement and good advice! I'm not so wary about traits using other traits, probably because I've never done that in practice and haven't seen a use case for it. So, maybe I agree subconsciously. :) Avoiding magic methods in general seems like a pretty decent idea, not just limited to traits. I can think of a few edge cases where you might actually use a trait to implement it, such as using __call to map apply* methods in event sourcing. Still, with PHP's dynamic function calls, you can just do all the formatting in an apply() method anyways. So, to me, it's a wash, though I can understand the viewpoint.
Dependency Injection.
I never said Netbeans was better.
Load all nested set subtree comments that descend from comments id 123, with post content if score over 0 and without post content if score less than 0. In one query.
And this is the story all about how Phil's life got flipped turned upside down And I'd like to take a minute, just sit right there I'll tell you how he became the PHPrince of a t.... PHIL STAHP, you're freaking me out!
Don't get me wrong, I'm not expecting entire applications (like blogs) to be implemented as middleware as the norm, just trying to get across that there are lots of doors PSR-7 will open besides not having to remember more than 1 interface.
Yeah, filters are no problem. You can use DQL also. The filters you're describing can be accomplished with a single query.
You're trying to make a point based on a very specific use-case . I think everyone here agrees that some things are better in SQL. 
So you can't write it. This is a very general use-case in a forum. OP is making a forum. Doctrine doesn't help.
I've outlined how you can use Doctrine at any level. If you're going to use objects in your model, you're going to have to choose _something_ . I'm not sure what your point is. It sounds like you're trying to say Doctrine is a heavy library; but it's not really obvious what your point is.
&gt; If you're going to use objects in your model, you're going to have to choose something. I have to "choose something"?
Yes, unless you're going to use PDO and arrays.
Well actually /u/pmjones has a point about the MVC not meaning what people think it means, it has been discussed for about 5 years now. Personally I don't think ADR is a much better naming convention for that thing but it is a step forward
Thanks Nikita, will have a look.
You can't do setter injection with functions though, just constructor injection.
The number of relations is irrelevant to the performance of doctrine. If you forgo object hydration entirely it will be faster but if that is a tradeoff you are willing to make I'd argue you should rethink your entire php/symfony stack and look into a compiled language like c++. Most important for Doctrine is to use a metadata cache and a query (DQL) cache. Secondly use eager loading and fetch joins where it makes sense. Thirdly optimize your queries, applying the rules you know from SQL. Before you start with point 2 you should already be using a config cache for Symfony and a single classmap autoloader for your entire project. 
Yeah, some people on Twitter also had a few decent reasons you might want to pass around an object with an __invoke method.
mhmm. Though, there are some instances where a simple function would suffice :)
So it can be *written quickly*. It *will work* later. And it only *might* have real-world performance issues. Backed by the magic of Symfony or just regular logging, you can relatively easily identify and correct the implementation detail causing performance problem later. Seems like a perfectly solid plan to me.
Oddly enough, I'm bolting Laravel onto a legacy procedural app (or vice versa). Added a LegacyRouting middleware that checks to see if the the legacy path exists for the requested route and executes that if so. Luckily some session_set_save_handler() magic lets me reuse the same session handler from the Session Middleware and CSRF. As I rewrite features, I simply remove the legacy code and add new routes and it all magically works. So far.
That's all well and good, until you inevitably run into a project which uses "web MVC" for the server and some sort of client side Javascript MVC framework which is more in keeping with "classical MVC".... then suddenly you have a huge translation exercise whenever the front end team needs to talk to the backend team because the terminology isn't even close to matching. Your definition of Model is a little off too, even in web MVC parlance. It has been the case for quite a while that the model refers to the domain, not simply the data which is squeezed out via some ActiveRecord implementation.
But do the dice support sharding? Are they faster than /dev/null dice?
When is a stable PHP7 being released?
There are many valid uses for this even php's typical environment. I'd prefer to keep static variables related to a class, but if your code base is completely procedural this makes sense.. I wonder if it works in static class methods the same way.. 
I'd like to see the randomizer abstracted out so you use, say, openssl random bytes more random randomness 
Just to add here, if you do reconnect logic in a db exception handler block, check if there was an open transaction, and do NOT reconnect/retry the query if so. The reason is, the sql server will likely rollback the transaction because connection died before commit... Meanwhile you reconnect and run the sql now outside of a transaction. Thus leaving you with corrupt data that cannot be rolled back. Please let me know if I'm wrong since I've been toying with good reliable reconnect logic on a high traffic / transaction site. 
&gt; there is a LOT of redundancy, not even respecting normal forms This isn't inherently a bad thing. Database design is a series of trade-offs - you can trade storage efficiency for less computationally intense data access, or if you have really tight storage requirements, you can choose to be very strict about your normalization. You should be willing to pick and choose where and how you normalize your database depending on what kind of gymnastics you need to do to get at data you frequently need. Anyway, forum software is an excellent candidate for an ORM, since the queries you need for forums are very often simple queries that an ORM is great for, plus working with your data as PHP objects makes the development of the forum software more natural. Any ORM or framework is going to have some performance overhead, but so is IPB. Any software that piles on tons and tons of abstraction layers and settings / preferences layers is going to have overhead. Since you get to build exactly what you want, you won't have as much overhead, and your code will be easier to reason about. Caching is also going to help you. Forums are also good candidates for cache-ability. It's not crucial to always show the latest data in your forum, board, and topic indexes. Nobody really cares if the "last post" shown in the forum index is 5-10 minutes out of date, or if the reply counts to all of the topics in the forum index are also out of date by 5-10 minutes.
Pushman seems really cool. I might have a very valid use for this in the near future. 
[Same answer applies.](https://www.reddit.com/r/PHP/comments/36hz5y/radar_a_psr7_actiondomainresponder_framework/cresl8y) 
&gt; isn't even close to matching. It's very close to matching. There's only one (1) difference. But to see that, it's important to **open your mind, let go of preconceptions and pay attention**: - In classic MVC, the view reads the "model" and sends "messages" to the controller. - In web MVC the view reads its "view data" and sends "requests" to the controller. - "View data" = page "model", "requests" = "messages to the controller". The thing people call the "model" in their web frameworks is the service layer, not the model. The services are a separate concern and not part of the UI (MVC is a UI pattern) to begin with. That's the one (1) difference. In other words, here's what happened: 1. We start with classic MVC (UI layer) + services (domain layer). Every part has a sticky note with its name on it. 2. Web folks came and bumped into the "model" sticky and it fell off. Web folks looked around and slapped it on top of the "services" sticky and started referring to the model as just "view data". 3. PMJones &amp; co. came and they were very confused about all this and threw away all the notes and wrote new ones, declaring it a brand new architecture - ADR. And the architecture parts and relations **never changed**. Only the stickies did.
I struggle similarly. I don't have any direct advice, but I really like this quote: "Don't reinvent the wheel unless you want to learn about wheels." Personally, I learn by doing.
&gt; But to see that, it's important to open your mind, let go of preconceptions and pay attention: Could you be anymore of a condescending douche? &gt; In classic MVC, the view reads the "model" and sends "messages" to the controller. No, in classic MVC the model *updates* the view. That is to say when the model state changes, the view is updated to reflect that state. This is not actually possible (or at the least not practical) to achieve in "web mvc" because of the nature of a HTTP request. The model state may change and the view cannot know about that until the page is re-requested. The controller isn't used to "get" information at all. &gt; The thing people call the "model" in their web frameworks is the service layer, not the model. The services are a separate concern and not part of the UI (MVC is a UI pattern) to begin with. Because "web mvc" and "mvc" are entirely different animals, it doesn't make sense to state that the model is the same in each. Modern practice has been for quite some time in a "web mvc" application to consider the domain the model (the "D" in ADR, which was called Domain I assume to clear up this very confusion). &gt; PMJones &amp; co. came and they were very confused about all this and threw away all the notes and wrote new ones, declaring it a brand new architecture - ADR. Actually, that's not the case. /u/pmjones observed (as had many people before him) that people writing applications using "web mvc" were not in fact writing anything at all like "mvc" in the classical sense, and decided it was useful (as others had before him) to codify what he was seeing in the wild under new terminology. Patterns are not inventions, they are formal documentation of things which already exist. That is to say, Paul didn't INVENT ADR... he saw it and documented it, and named it. There was no confusion involved at all. Now, You can argue that Paul's codification of ADR does not reflect reality, or that there are other contenders out there (plenty of other people have observed patterns for developing web applications), but to claim that it was born of some lack of understanding or confusion about MVC is rather rude of you, especially given his blogs on the subject which go to great pains to point out how the conclusions were formed. 
&gt; Could you be anymore of a condescending douche? Well this is why I asked you to open your mind, but here we go. I know my audience. &gt; The model state may change and the view cannot know about that until the page is re-requested. The controller isn't used to "get" information at all. Yeah, yeah. This narrative is extremely familiar to me, I know it's popular, but it shows nothing but confusion about the architectures we're discussing. You're trying to factor in your mind a *naming* difference as an *architectural difference* and this is why things look so different from your PoV. But you're talking about a very trivial constraint enforced by the way PHP works, namely that every response chain is processed in full (no persistence, hence no delta updates). That's immaterial to the pattern. In fact many views in MVC GUIs will render in full every time the model is changed, because intelligently handling delta updates with partial updates is nothing but an optimization. And for *all* views, regardless, in classic MVC the same exact "receives the model and renders in full" happens when the view is initialized for the first time. Without persistence, in simply happens on every view update. I can talk about this because I also work with "classic MVC" JavaScript front-end and GUI apps and I can tell what are the common parts, and where the differences are. My PHP MVC, my iOS clients, my single-page-application JS MVC architectures are precisely the same, except for delta update support. Insisting they're all different by getting all confused about naming the parts only overcomplicates a very simple pattern that's intrinsic to any well designed UI layer.
&gt; A view, once rendered, cannot be observed by the model, which is fundamental to how classical MVC works. The model doesn't observe the view. The view observes the model. And "observing" here refers to: every time the model ("view data") is updated, the view is invoked to render to reflect that model update. And this happens in both classic MVC and web MVC. And, BTW, who updates the model? The controller. In both classic MVC and web MVC. &gt; The fact that the model cannot observe the view is only one of a whole host of differences that your dismissal of, at least to me, suggests you've never written anything that adheres to the classical pattern. Do you really think the model observes the view? I think, rather, I hope this is a language barrier thing ;) The model doesn't know *the view exists* in any MVC variation out there. &gt; a web MVC view is nothing more than a template, or a rendering of some state handed to it by the controller. That's what all views do. They have access to "some state" (i.e. the model, i.e. "view data") and provide a representation of it (to a user, or some other agent). It doesn't *have to be a template*, sure, but it being a template doesn't make it less of a view. All a template is, is formulating a rained rendering representation (in the form of HTML, CSS, JS) for the browser to execute. &gt; You say the view sends requests - it doesn't. Sure it does. It sends HTTP requests from the browser, when the user interacts with it. Same like in classic MVC, a view generates messages when the user interacts with it. Your confusion comes from there being a network layer in between the view being rendered and the view being displayed. Grab a mental rubber and erase that *thick line* that sits between the browser and your PHP view, because it doesn't need to be there. Let's zoom out a bit. - In a GUI app the view renders to the **GUI framework** of the **OS**, and the OS produces **HID events** which we consider to **come from the view** (but they come from the OS). - In a web app the view renders to **HTML** for the **browser**, the browser produces **HTTP requests** which we consider to **come from the view** (but they come from the browser). &gt; The differences are stark. At the level of understanding you have, they do seem stark, and I understand your PoV. But there's a drastically simpler way of seeing it, which is just as correct, as demonstrated above. So why overcomplicate it? You're a programmer, you know DRY is good. So apply it not just to your code, but to your mental models, because the story you tell about MVC suffers from some severe mental DRY violations.
&gt; The net result though is changes to MODEL STATE are immediately reflected on the view. And this simply isn't possible over HTTP (well, you could achieve it with websockets I guess). The view, at best, has a snapshot of the model at the point in time it was rendered. - GUI: HID event -&gt; controller -&gt; updated model -&gt; updated view - HTTP: HTTP request -&gt; controller -&gt; updated view data -&gt; updated view It's immediate in both cases, but at a different scale. The lag and granularity of updates caused by HTTP as a transport layer are not material to the pattern TBH. An app has a certain architecture, never mind if you run it off of a server on another continent, or off your localhost. The pipeline above applies to both plain page refreshes (form submit, link click) and to AJAX, and is the same with sockets (s/request/socket message/), and the three together can provide three levels of granularity for view updates as needed for a particular app. And with AJAX (and sockets) you can certainly consider the view to be somewhat persistent (no full page reload) and update it *partially*, just like classic MVC. You mentioned sockets so you are referring to push events. Of course with a GUI the event updating a model may not come from the user, it may come from, say, a timer, which hits the controller, which updates the model, which updates the view. In pure HTTP (sans sockets) the event can only come from the user, in the form of user interaction (submit a form, click a link), or AJAX polling for non-user initiated model changes (like said timer). But those limitations of the medium (speed, event source) are not defining to the architecture. Page refresh, AJAX and sockets, all three, are parts of the same app, and can be used together integrated via the same MVC pattern. &gt; My level (observer/observee confusion not withstanding) is fairly well in tune with what the vast majority of commentators on the subject have thought for quite some time. Right, I'm aware. There are basically three levels of understanding of MVC: 1. Sloppy: Anything 3-tier is MVC. 2. Advanced: Differentiating MVC, ADR, PAC, MVVM, MVP, Flow etc. 3. Transcendent: Seeing MVC, ADR, PAC, MVVM, MVP, Flow are the same exact MVC pattern with varying emphasis on different aspects of it. Relevant Zen koan: "At first, mountain is mountain. Then mountain is not mountain. Finally, mountain is mountain." The community always lags behind the best understanding of any given topic. This is why we should never measure our understanding by how popular it is. Try for better understanding. Not everything which is correct, is immediately popular. It takes years. 
You could also encapsulate logic into other methods and state into properties.
Updated that link ^^ As above, let me know if you have any feature requests :)
Are you famous yet?
Oh I see, thank you very much. I'll try and read it over the weekend but i was hella swamped yesterday and felt too lazy to go over the whole thing. Thanks again.
Well it's currently running on a single free heroku instance. So the answer is some but not many. However there's not a lot of shared bottleneck in the code so this would scale horizontally very well if I just used more instances.
I'd happily accept this as a PR :-)
I love you too
Hi. It's great that you made this. If you need any inspiration, a couple of good files to see: [Laravel Filesystem Class](https://github.com/laravel/framework/blob/5.0/src/Illuminate/Filesystem/Filesystem.php) and [Flysystem Filesystem Class](https://github.com/thephpleague/flysystem/blob/master/src/Filesystem.php)
So it's an open source Pusher? aka pusher.com. Pretty neat!
I've noticed those "modeling hierarchies of real things as classes" tutorials teach you only one thing: to abuse inheritance. Once this is firmly planted in a new programmer's head, it takes around a decade of pain for them to unlearn it. Inheritance is by far the least important part of OOP. A neat shortcut in some cases, nothing more.
The build process is slightly different when you're installing from git (as opposed to the distributable source packages created for releases). There's some good documentation on it in the [PHP Internals Book](http://www.phpinternalsbook.com/build_system/building_php.html) Unexpected test failures will happen when building from git. Nobody's perfect and that's even more true when you're merging changes alongside a bunch of other developers. They usually get fixed fairly quickly tho.
Lists of event listeners, hash tables of object references, list of self-instances held statically in a class for some feature etc. All cases where you need a reference to an object but you don't want to turn them into zombies that never get collected just because you hold a reference. When no one else cares about this object, you no longer care as well. Hence, you use a weak reference.
It's rather simple. Let's say you want to "extend" 2 classes. In this case you cannot use extend and you'll use traits. You can use as many traits as you want in a class. Think of traits like LEGO building blocks that can be used to build more complex classes. These building blocks can be reused anytime and combined in so many ways to build different classes. Imagine you can have a trait that has methods to manage a single attribute: "color". This trait will get / set / serialize / validate the attribute "color". Well, you can use this trait in any class that needs "color" with a single line of code: "use color;". The same can be true for "size" or "price". And then creating a class "car" will be as simple as : use singleton; use color; use size; use price; How cool is that!? I hope it helps. 
&gt; Lists of event listeners, hash tables of object references, list of self-instances held statically in a class for some feature etc. Actually none of those is a good example. Since when you have a list of event listeners you never want to lose them without detaching explicitly. You would use regular references with those. Also in most cases you never have references to event listeners in other places at all. An actually good example would be a tree with each node having a weak reference to parent. Imagine a simple tree like: A(root)-&gt;B-&gt;C Imagine that in a child node C we want to have a reference to its parent B. If we make it a normal reference we automatically get a cycle which means that even if B is detached from the tree it will not be cleared from memory because of reference from C. Now if you have a weakref from C to B removing B from A results in both B and C being cleared from memory automatically. So the answer to OP question is: weakref exists fro optimizing cyclic references.
It's a matter of composition vs inheritance. With traits you grant properties to a class, with an extend, you overload property from another class. A trait is, in principle, a stand alone block that can be shared through any classes. An inherited class can (and will) change the parent class functionality while keeping the same purpose. Technically, you can only extend one class and overload its method, but you can use many traits but you can't overload methods from traits.
That *is* cool, and it helps a lot - thanks.
Because all normal email providers use [SPF](https://en.wikipedia.org/wiki/Sender_Policy_Framework) and would see these email as spam. Another system being used to detect this is [DKIM](https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Sender Policy Framework**](https://en.wikipedia.org/wiki/Sender%20Policy%20Framework): [](#sfw) --- &gt;__Sender Policy Framework__ (__SPF__) is a simple [email](https://en.wikipedia.org/wiki/Email) validation system designed to detect [email spoofing](https://en.wikipedia.org/wiki/Email_spoofing) by providing a mechanism to allow receiving [mail exchangers](https://en.wikipedia.org/wiki/Mail_exchanger) to check that incoming mail from a domain is being sent from a host authorized by that domain's administrators. The list of authorized sending hosts for a domain is published in the [Domain Name System](https://en.wikipedia.org/wiki/Domain_Name_System) (DNS) records for that domain in the form of a specially formatted [TXT record](https://en.wikipedia.org/wiki/List_of_DNS_record_types). [Email spam](https://en.wikipedia.org/wiki/Email_spam) and [phishing](https://en.wikipedia.org/wiki/Phishing) often use forged sender addresses, so publishing and checking SPF records can be considered [anti-spam techniques](https://en.wikipedia.org/wiki/Anti-spam_techniques). &gt; --- ^Interesting: [^Apache ^James](https://en.wikipedia.org/wiki/Apache_James) ^| [^List ^of ^DNS ^record ^types](https://en.wikipedia.org/wiki/List_of_DNS_record_types) ^| [^Sender ^ID](https://en.wikipedia.org/wiki/Sender_ID) ^| [^Forward-confirmed ^reverse ^DNS](https://en.wikipedia.org/wiki/Forward-confirmed_reverse_DNS) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+crf2nvu) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+crf2nvu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Oh, alright. I tested it with Hotmail and it blocks emails that aren't in my contact list, but doesn't block emails that are. I'm assuming this is a problem with Hotmail?
&gt; I'd assume everyone that knows php knows this This isn't limited to PHP. You can do this with virtually all software that implements SMTP. 
Yes, most likely. Isn't there any warning shown when opening the email? Gmail usually has a message like *"This email may not have been sent by &lt;email address&gt;"*
You question really has nothing to do with PHP but you could ask the same thing of the snail mail postal service. I can write a letter "from" anyone and can put any return address on the envelope and put it in the mail. Why is this not talked about more?
Gmail has a "Sent Via" but Hotmail has nothing and I can't find anything lol. Basically, don't use Hotmail.
I just built an api with lumen and the package fractal. It feels good! I'm so happy with the way it turned out. You can easily upgrade to laravel later, if you need it 
Actually, weakref is not for cyclic references. PHP's garbage collector does handle cyclic references very well without the need for weakref: http://php.net/manual/en/features.gc.collecting-cycles.php I've seen valid usage of weakrefs in ORMs. An ORM will usually keep a reference on all objects fetched from the database (this is the role of the EntityManager in Doctrine). If you fetch too many objects from the database and keep too many references, you will end up filling your memory. You can use weakref to ditch the reference to those objects as soon as the user has lost its reference on it. This is what TDBM does: http://mouf-php.com/packages/mouf/database.tdbm/doc/memory_management.md
Interesting! This is really helpful for a confused php learner, guys! Thank you very much!
Ahh, good point! But you can imagine the feeling of when you first learn PHP and you stumble across that quirk, right? It's kind of a "Huh? What?" feeling, you know? Completely unexpected!
Is it supposed to be different? 
Cycles are irrelevant to AS3, because it has a cycle-collecting garbage collector. &gt; if you have many objects each of which can have event handlers it is advisable to have those a weak references BECAUSE in AS3 event **handlers also have references to the objects** Nope, they don't.
PHP also has [a cycle-collecting garbage collector](http://php.net/manual/de/features.gc.collecting-cycles.php)
Yes. Considering it was **you** who said the only valid use for weakref is cycles, are you arguing with yourself here or simply admitting you were wrong.
Use terminal with: git reset --hard
This is a really bad example to use. Ground and Air are properties of a transport, not an entire class. Like inshort says it teaches completely the wrong way of thinking. Also: &gt; $transpoType Was it really too hard to type those two extra letters 'rt'?
Never change.
Btw, just so you know I'm not the one downvoting you.
That's roughly the idea, Pusher is more elegant and has more features but I'm working on that ^^
This is why I don't like the composition vs inheritance argument. To me, effective composition requires encapsulation. OP is rightfully confused, because using a trait is not _much_ different than extending a class. Your class takes on the methods of that trait, so using it _does_ change the parent class functionality. The fact that you can use multiple traits makes matters even worse, because conflict resolution == fatal error. I avoid traits pretty much at all costs and generally use composition with classes and dependency injection. I'm sure there are certain cases where traits are convenient, but in my opinion, a complex application is likely to run into unpredictable bugs if traits are used liberally.
SPL * http://docs.php.net/manual/en/class.directoryiterator.php * http://docs.php.net/manual/en/class.filesystemiterator.php * http://docs.php.net/manual/en/class.globiterator.php * http://docs.php.net/manual/en/spl.files.php
But.. trait Wheel { public function roll() { echo "I am rolling!"; } } class Car { use Wheel; } $c = new Car(); $c-&gt;roll(); to me that looks like Car "is a" wheel
That's a useful insight. It seems that a small application can be easily and elegantly managed with traits, but that they could introduce conflicts in more complex applications.
 interface Rollable { public function roll(); } trait Roller { public function roll() { echo "I am rolling!"; } } class Car implements Rollable { use Roller; } $c = new Car(); $c-&gt;roll();
Yes, abusing inheritance is very easy, but that doesn't mean that composition should always be used. Resuming to the article: - `Truck` is an `Auto` =&gt; inheritance makes sense class Truck extends Auto { /* */ } - `Bicycle` is not `Ground` -&gt; `Bicycle` is a type of `Transportation` (_inheritance makes sense_) and `Ground` can have a `Transportation` _type_ (_but also a `Size`, `Texture`, etc_) =&gt; composition makes sense interface TransportationInterface { public function getName(); public function getFuelType(); } class Bicycle implements TransportationInterface { public function getName() { return 'Bicycle'; } public function getFuelType() { return 'ManPower'; } } class Ground { public function __construct( TransportationInterface $transportation, SizeInterface $size, TextureInterface $texture ) { /* */ } }
Thank you for a helpful and understanding answer! It can be a harsh world for a noob, so getting help from friendly giants is definitely a must.
Open relays are a different issue. That refers to who can use them to send or relay mail. That really has nothing to do with the ability to send "from" any address.
If you wanted to run Pushman on WAMP, you could but you would need to install the [ZeroMQ](http://zeromq.org/) library first. I develop on a Windows machine and use XAMPP so it is possible. [Check out the Installation Guide](https://github.com/duffleman/pushman#building-your-own-pushman-instance), you just need to install the Binary, enable the PHP extension in your WAMP php.ini config and it should run exactly the same :)
[With traits you are not doing composition, you are doing compiler-level copypaste](http://stackoverflow.com/questions/9532093/are-traits-not-simply-composition). If you want to compose, abstract away into a separate class and put its instance in a property.
I get the whole `Truck` is an `Auto` thing, and obviously `Truck` has an `Auto` doesn't make much sense from a physical standpoint. But to stick with the flow of the article, I really don't like the idea of using inheritance just to override properties. I'd much rather have a configurable `Auto` with `$type` passed to the constructor (or `setType($type)`, though I prefer to have object instantiated to a usable state) and `type()`. Then some sort of container or factory can handle instantiating autos with different configurations. So at this point, the only use case for inheritance (that I can see) is when two different "types" of autos require different implementations for the same method _or_ `Truck` introduces methods that `Auto` does not. Of course, the Liskov Substitution Principle should certainly be followed. However, there are costs. Now, anything that depends on `Truck` also depends equally on `Auto`. `Truck` _cannot_ exist without `Auto`, which may be fine. Also, any time `Auto` changes, the developer must carefully consider how it affects the `Truck` class. This often makes modifying `Auto`'s implementation much more challenging. So what's the alternative? I think it largely depends on the circumstance, but I have found that in many cases, the architecture can be reworked to depend on interfaces that more accurately describe what each component is doing. For example, maybe `Auto` implements `drive($miles)` and `milesDriven()`, so that each class that inherits from it doesn't need boilerplate methods to keep track of their distance traveled. Maybe instead, `Auto` can implement a `DistanceTracker` interface that can be used by a `Truck`. Now `Truck` can implement its own `drive` method, and use the distance tracker for what would have been duplicate code. Now, if Auto decides to store its internal state in kilometers, it can implement the conversion in the `milesDriven()` method and `Truck` doesn't even need to be touched. These are all obviously completely fictional examples, so it's hard to translate them to real world use cases, but what I've found is that most people use inheritance to save time rather than to accurately describe an application's architecture, and if this is the case, the dependencies can be loosened via use of interfaces and encapsulation.
It's not open source so I'm not even going to bother. P.S. I do a lot of vulnerability disclosures in eCommerce platforms and PHP frameworks; you probably want people like me to be able to review your code and propose security fixes without us having to pay you money for access to the code first.
To answer directly, you only need to change the `.env` file. I have already pushed up better documentation for ports :) Thanks for the feedback ^^
Informative. I see the Zephir version is roughly twice faster than PHP. PHP 7.0 is twice faster than PHP 5.6. So it'd be interesting to compare PHP 7 to Zephir.
Improvements to internal structures in PHP 7 should also make Zephir even faster running under PHP7
15-ish years ago I sent an email "from" Bill Gates to my brother. Good times, good times...
It's a bit like your brothers giving you a hand instead on your control-freak dad 
I have used it for about 4 years now. It's not bad, but its not great either. Biggest gripe is that the support team is in russia, and the timezome part makes getting help of any sort kind of a problem. On the flip side, its easy enough to use that we can have non-technical people managing the products and inventory stuff. If you have any specific questions ... I can try to respond best I can.
well that was a fast example, not really something I would use in a real world scenario, but could be more like this: trait Wheels { private function rollWheels() { echo "We are rolling!"; } private function inflateWheels() { echo "Pumping up!"; } } interface Vehicle { public function move(); public function maintenance(); } class Car implements Vehicle { use Wheels; public function move() { $this-&gt;rollWheels(); } public function maintenance() { ... $this-&gt;inflateWheels(); ... } } class SmallBoat implements Vehicle { use Human; public function move() { $this-&gt;rowHard(); } public function maintenance() { ... $this-&gt;feedHuman(); ... } } That being said, I rarely use Traits, code gets coupled to an implementation and it's hard to test, prefer Composition with Dependency Injection
Thank you! :)
I'm working on something like this currently. CMS, as a backend that provides a RESTful API, built in Scala, not PHP though.
MySQL (or other db) for sure. If you want to be able to quickly and easily search and sort things, you'll want a database.
I'm your fan but please use language that we can use. Most webhostings run PHP or so.
OP, just FYI, you're shadow-banned. Probably for spam or something. Wasn't us.
This is actually pretty cool. I'm currently building or maintaining a number of relatively simple CRUD Apps with Laravel, and I'm suddenly wondering if this is a viable replacement or - even better - something I can integrate as a service. I've got a bunch of templates for bootstrap CRUD forms but if I'd rather not have to use them, and this seems like a suitable replacement.
You use weakrefs when you don't care about a value enough to keep it around past a GC cycle. It's nice to have it, but you can re-create it if necessary. This would be particularly useful if you had a long running process that might accumulate a lot of references in one place that don't necessarily need to be kept around. A decent example maybe a cache of objects to annotations on those objects (set aside your dislike of annotations for the purpose of this example, if applicable). Annotations are kind of expensive to parse and create. So as long as the object you're reading them from is around, you want to keep those annotations around. But you don't necessarily want to keep the object around **because** you have annotations cached for it. Enter the weakref: instead of storing the object reference to a set of annotations directly, you'd store a weakref of the object to its annotations. $annotations = new \WeakMap(); if (!isset($annotations[$someObject])) { $annotations[$someObject] = readAnnotationsSomehow($someObject); } // use $annotatins[$someObject] Where ever that dichotomy exists, the need to associate an object with something but the desire for that something not to keep the object in memory, is a good case for a weakref.
looks like sonata project
Thanks! I was actually quite daunted by perhaps having to use XML. Just didn't feel like a clean system, using MySQL and XML in tandem like I had looked into. Appreciate the response!
It looks nice, not trying to be negative with your post here, but on your homepage the "How does it work? Step 1: Create a PHP file" is much more complicated than either adminer or phpmyadmin for non programmers. If you want non programmers to use it make it as easy as installing wordpress. (or just upload the file(s), and let them enter server credentials every time they login) 
I use traits when I have two objects that don't share a logical parent. For example an employee and a store. Both have addresses, but no shared logical parent object. Create a "hasAddress" trait, put all your address related logic in there and let your Employee object and your Store object both use that trait. It helps reduce duplication. 
It's only interesting to you.
I understand, and of course - this is the PHP subreddit, but I would be targeting users who would have root access to a server in some form, whether that be a VPS, a dedicated server, or anything else. Shared hosting is usually not a great platform anyway.
You will definitely want to look into more than just MySQL as a storage engine. Postgres and other things like Casandra (NoSql) would be on the list of things to test out. Give each of them a chance at an example set of data and calls you would expect to be making and make it big. 100,000 records at least and see which one has the best performance. You need to make sure you either build it with the right storage engine out of the box, or build it right so migrating isn't an issue (proper data models and database adapters).
It's not really that cut and dry. One of my day jobs is XML and there are some very good [open source XML-based databases](http://exist-db.org/exist/apps/homepage/index.html) that store XML content very efficiently and allow querying in ways that SQL cannot (ie. via XPath). It really depends on the complexity of the content you are publishing. If it's simple reddit/blog style posts, and you don't need a fully featured authoring tool or access to the content at a granular level, use HTML/MySQL. If the data is complex and you need to do complex queries into it, you might be better off going with an XML database. There are some relational databases that can store and query into XML content (Oracle, Documentum, etc.), but as far as I know, they are all relatively pricey. 
Haven't looked too deeply yet, but interested to know how this stacks up against [NotORM](http://www.notorm.com/).
I like the look of this and it may get played with on a new POC i'm building atm. Not clear from docs, but it would be nice if you could reduce the columns selected, something like $db-&gt;user(['email', 'password']). Good job, Looking forward to digging through it more in the morning!
I think he meant easy for anyone to use the interface, not for anyone to set up the forms.
Yeah I did try adminer in the past. I don't remember exactly why I didn't like it, I think it was missing some important feature of PMA. Edit: also my comparing crudkit to PMA was misplaced. This isn't the same thing as PMA/Adminer. What I meant was I was looking for something like this but had to settle for doing 'raw' database work with PMA.
&gt; There's no schema generation in LessQL because databases should be carefully designed by humans. Use adequate tools like phpMyAdmin for that. Eh, probably not a good choice for anybody serious.
&gt; After a few days of refactoring, I found myself with some classes that looked like this [...] &gt; class PaymentProcessor { public function __construct(PaymentGateway $gateway, OrderRepository $order, OrderCommentor $order_comments, InvoiceRepository $invoice, Database $database, Logger $logger) { // wahoo! } } I have some code like this, and it seems to cry out for a Dependency Injection framework that does autowiring. Right now, the overall web of relationships is the same in both production and testing, except that it's easy to specify to the DI system that certain problem items (repositories, web-service clients) are satisfied by a different test-implementation or mock. Then you can write test-code like: // $container is initialized by test-setup code // Command the DI system to create the subgraph of stuff $pp = $container-&gt;get(PaymentProcessor::class); // Retrieve the mock/test implementation to configure it $orderRepo = $container-&gt;get(OrderRepository::class); $orderRepo-&gt;shouldReceive('update')-&gt;once(); $pp-&gt;doThingThatTriggersUpdate(); 
Phil Sturgeon's in there, so much for "awesome developers". Also, when exactly was the last time [Zeev developed something](https://github.com/zsuraski)?
It's okay Phil. As of 2015-04-01 it was revealed that everyone was you, so I think it's fair to say they're projecting their own self-loathing.
this sums up my opinion on it too. I inherited a project based on it a few weeks ago and after working on it I came to the same conclusions.
Oh cool, Erika Heidi is in there :D
"just" 
What is great code? What is an awesome thing?
hey, is that basically our list? http://blog.fortrabbit.com/php-heads â€” great anyways! BTW (shameless plug): is anybody interested building a PHP open source resource pool? like this: https://github.com/fortrabbit/php-resources
Great (adjective): Very large in size. --- ^(I am a bot. If there are any issues, please contact my [)[^master](http://np.reddit.com/message/compose/?to=Spedwards&amp;subject=/u/Define_It)^(].) ^(Want to learn how to use me? [)[^(Read this post)](http://np.reddit.com/r/Define_It/comments/31vrec/define_it_how_to/)^(].)
Excellent work, thank you for this
Are they talking about migrations here? Because that seems like a very stupid thing to say if they are.
I'm on a list now. Does that count?
It looks alright but I'm not sold in the function `paged`which is used to set a limit. Why not just have a function called `limit`?
I tell you, you spend 2 years going to less conferences and you become irrelevant.. kicked to the curb, forgotten, old news... 
My concern with overuse of a DI container to inject all your dependencies is that it can hide a class that's doing too much. Often when you have an unmanageable construction going on in your tests it's a sign that you should be breaking the class out into smaller parts.
powerful :(
&gt; less conferences *fewer
That was only opposed to "uncontrolled" schema generation, like in RedBean etc. Of course programmatic, controlled schema generation with support for migrations is desirable, but I prefer a dedicated tool for that like https://phinx.org/ - will clarify in the docs
hahahahaha
WordPress has a nasty codebase, but come on, this is an unfair and snobbish stance. Just because someone is contributing to a CMS whose priorities aren't clean and modern code, doesn't mean that the people behind it don't deserve respect.
In step 2, LessQL allows you to use additional WHERE clauses. This might yield 5 posts, depending on what "query into one of their posts" means. On the other hand, you can always generate one post query for each user easily: foreach ( $users as $user ) { $db-&gt;post()-&gt;where( ... )-&gt;fetchAll(); } - in this case no eager loading happens, but we have N+1 queries. ("constant queries" should have been "constant number of queries").
I could suggest, as hinted by my remark about I/O prefetch, that the eagerly loaded resultsets are loaded in predefined windows based on the average size of the table row. Say you can set a limit of "preload at most 64 rows or 64kb of data, whichever limit is hit first" and as the list of posts is iterated you query LIMIT 0, 64, then LIMIT 64, 64 then LIMIT 128, 64 etc. (the number 64 being an example here). This would solve the pathological case of selecting in N+1 queries (it'll be N/64 + 1) and avoid the other pathological case of prefetching an unbounded amount of data at once. The heuristic about row size should be fetched either from the database, or approximated from any knowledge about the DB schema the library has (possibly cached).
Oh come on.. Clearly my comment was meant with a fair degree of tongue-in-cheek. But no, if this is meant to be a list of people who's opinions one might recommend following for the purposes of broadening horizons, wordpress devs are probably not the kind of people who are going to make the cut. 
Arent you on the list? I thought I saw you I am =P
A new button "Add all 72 to a list" would be awesome!
Ok, sure! :)
Laravel uses different "glue" code, not bundles, and has their own container. It's really far from what Laravel is.
I was being figurative obviously =)
Wordpress AND phpclasses.org?! Christmas came in early this year! 
But, conference hugs... I get it. Crack on.
Yeah, it mostly focuses on basic SELECT/WHERE. But you can always write a subquery yourself, something like $db-&gt;post()-&gt;where( "(SELECT COUNT(*) FROM categorization AS c WHERE c.post_id = post.id) &gt; 5" ); should work.
this is against twitters ToS. you're not the first to have come up with this idea ;) "...hosting datasets of raw Tweets for download is prohibited, and automated following or bulk following is also prohibited."
I met Phil a few weeks ago when he was in town at RailsConf and came to AtlantaPHP. He was absolutely awesome, great to talk too, and was pretty funny. He has made a tremendous impact on me as a developer, and I look up to him as well as others as where I should be aiming to go. Contributing to open source, doing talks and getting better. Thanks Phil, for every person trying to blame you for something, theres another developer out there working harder and better cause of everything you've done. 
Sorry to see you go Phil, best of luck.
Check out this http://github.com/taq/pdooci 
Thanks to Kayla Daniels, who actually wrote it.
Is your question about accessing the property itself? (Then:) `$xml-&gt;blub-&gt;{'AdditionalService.Specifier'} = 'bla';` See the docs: http://php.net/manual/en/simplexml.examples-basic.php#example-5915 If you want to access a specific element identified by an attribute you would need to use custom logic and/or xpath to make sure you only have one afterwards and select the right one. 
[Man in the Arena](http://zenpencils.com/comic/theodore-roosevelt-the-man-in-the-arena/) is really great.
&gt; Well Phil did program a lot of cool stuff In fairness, though, Phil is not "PHP-FIG founder".
I think running a http server in node that PHP makes requests to is probably the best setup. I had no end of trouble with v8, both in terms of installation and memory leaks. But I don't use this approach at all anymore.
You should take a look at the API rules around automation https://support.twitter.com/articles/76915-automation-rules-and-best-practices#following-unfollowing It may be better for you to create a Twitter list instead, and allow people to follow that.
Woah, I was wondering where all of these new followers were coming from. Like 200+ overnight. Well, now I have my answer. Awesome :-)
Have you ever heard of a self fulfilling prophecy? Because what you've just done is incite exactly the kind of drama that you warned about, even though the content of the linked blog post clearly states non-dramatic reasons for Phil's semi-departure from the limelight.
Did I? I dont see any starting
You should reduce the permissions required. You don't need to do any of these... * Read Tweets from your timeline. * Update your profile. * Post Tweets for you.
I tried rewriting with .htaccess, but it ignored the rule because for magento to work correctly it has to pass everything to index.php first. When I put the rewrite rule before the section that passes * to index it broke the magento install, I double checked and it was done correctly. What I need to do is write a section in the new index.php that handles the search term and passes it to the magento search. Here is what was in the original Joomla index.php to being handling the search: if ($option == 'search') { $option = 'com_search'; I am rotten with PHP, I come from a PERL background and it has been many years since I have done anything with that. I am willing to pay someone here to do it for me. Thanks
Thanks for taking the time to have a look at this! This library doesn't seek to replace promise or coroutine implementations, it's simply intended to reduce the boilerplate associated with regulating concurrency levels when dealing with promises. If you're working with coroutines and promises and you want to ensure that you only spawn ten of something at once, you have to write some code in order to regulate that. I've implemented that code enough times now to think a library for this purpose be useful :). The library is designed to work with ReactPHP and (soon) any Promises/A+ implementation; it's not trying to re-invent promises. I hope that makes sense, thanks again for taking the time to have a look.
Most of your critical code should be framework-agnostic. How? Your product can be factored as a set of isolated modules, each with its own dependencies: - **Critical modules:** Domain services, reusable components. Mix &amp; match library components from anywhere (including Zend, Symfony) without long-term commitment (facades, adapters). No views and controllers here. - **Non-critical modules:** Typically two "UI" (no business logic) modules based around MVC: the public web site, and the private (admin) web site. Those do use Zend or Symfony as a "framework" (unlike the critical ones). But you still don't even have to use the same framework for both. With the right architecture the choice isn't as important as it is with the wrong architecture, and you can change frameworks mid-flight.
I've had quite a bit of success building projects using whatever Symfony / League / other packages I need, and now usually won't build on the full framework unless I'm doing something with a lot of features and functionality (where I think I'll use a majority of the framework features). The Symfony components are all easy to work with stand alone, and (obviously) integrate really cleanly with each other. The days of the monolithic framework are over (at least for most projects). 
http://verraes.net/2014/05/final-classes-in-php/ Both `AppKernel` and `AppBundle` implement interfaces that define their roles. There's no reason that either should be extended or mocked. Because of that, they are marked as `final`. I got into the habit of doing it about 6 months ago and haven't really seen a downside. Now its my default. It's worth experimenting with -- forces you to think about roles of an object and interfaces rather than concrete implementations. 
The argument for custom isn't that it gives you more design flexibility, the argument for custom is that it gives you better functionality flexibility without needless headaches. Wordpress makes heavy assumptions, and god help you if you want your site to behave outside of those assumptions. That said, the same is true of visual design if you install a theme - customizing the theme is probably going to be harder than just building one custom. Regarding your question about SEO, plugins do not do anything for SEO that you cannot do yourself using simple, common sense practices. Remember that SEO isn't about keyword density, or meta description, or making sure you have the right keywords in H1 tags. If search engines still even care about that stuff, it's likely going to be a fart-in-a-hurricane. Two things account for the lion's share of your search rankings: the quality of your content, and the quantity and quality of recent inbound links to that content relative to similar content on other sites. Other factors now include mobile-friendliness of the layout, the age of your domain, how frequently you update content, how quickly your content loads, and how focused the content is on the page. But again, those are all minor factors compared to popularity algorithm that measures the quality, quantity, and recency of inbound links pointing to your content. Awesome content that gets other people to link to it from all over the web, tells Google that your content is good and people like it, and it should be ranked well. So SEO should not be a deciding factor in choosing Wordpress over custom. The skin and styling should also not be a factor. The only question is, does Wordpress give you the functionality you need, or not? If all you need is some static pages and a blog, Wordpress is a good fit. If you want your website to have some deep integration with what users can do on your mobile app, then Wordpress is going to be a pain in the ass.
My experience is that as soon as I hear or read the word SEO, there is something wrong with the site and the business behind it. SEO simply does not exist. If the site's content is not interesting to anybody, it will not be indexed anywhere. The term SEO always pops up in the context of a site that is indeed uninteresting, but then they still want some magic or help from the gods to make it look more sought after.
Kayla is heading up the team now, but there have been many contributors.
The team as in "The League" or the team as in "who wrote OmniPay"?
Relevant username
Neat. Do you happen to know why it git-ignores ```docs```?
Some marketing *guru* must be reading you.
True, but not playing on it here.
I wish I could be paid to come up with profitable ideas, for other people with more time, to build. 
&gt; you will not look back that's quite obvious. You should look forward after. Laravel is not a holy grail. With Doctrine2 it's became usable (only Laravel5 and this is my personal opinion), then you'll start cleaning up stuff and suddenly... you have your own component-based framework for your business purposes.
My suggestion would be to don't. Treat them as opaque strings.
I shouldn't be negative, but it's sad a leading PHP framework recommends a single global database via a static class.
I think you need a programmer and not a rockstar. I mean I'm not really sure maybe a rockstar is what your marketing automation platform needs, I mean if the rockstar could sling code that would be great but in my experience most rockstars don't program and most programmers aren't rockstars. Though I guess maybe you're looking for a rockstar to promote your product in which case I don't think there are many rockstars in this sub-reddit, mainly just PHP developers. If you are a rockstar and a PHP developer let me know though I would love to talk to you about how those things synergize. So are you looking for rockstars or programmers because I mean I would look for those people in two totally different places.
To most developers, terms like "amazing opportunity", "rockstar" and "take us to the next level" are associated with poorly-defined, unrealistic expectations and promises of payment in terms of "stock options" and "a cut of the profits once we go huge". From your post there's no way to tell if you're serious of if this is another random person with a supposedly great idea who wants someone else to do the work for free. You should start by defining the position in terms of skill level and role. For example, you might be looking for a "senior web developer" with "5-10 years of experience with PHP and SQL". They're employees, not investors, so don't try and sell them the position based on your product. Pay them competitively As for finding solid developers, if there's a major city nearby there may be a local developer community, user group, etc. You should reach out to them and talk about your needs and the position. The developers who are active participants in the community are likely to be some of the most highly-motivated and highly-skilled, in my experience.
I want respect, not to be a rockstart or a ninja or a guru. I want to know I'll be challenged, and that I'll be able to work with current technology. What stack are you using? What tools? What version of PHP? What problems have you faced so far? How many server hits per second do you peak at?
I'd assume because their docs are autogenerated from docblocks, so you'd ignore it because it's a dynamically generated asset.
This example is actually pretty much Symfony Standard, but without a few things, and with a few very subtle differences. Laravel is quite different and has many of it's own components.
As others have mentioned, experienced, senior-level developers have run the gauntlet with companies that referred to developers as "rockstars", "ninjas", and sometimes even "assets". Each company also seems to think their opportunity is amazing and the best thing ever. What you want is a down-to-earth developer who values his/her time, knows how to get things done and can provide mentorship to less senior developers on a team (or help you build a team up if they are your first dev hire). Where to find them: local user groups giving presentations, local/regional/national conferences giving presentations or walking around, contributors to FOSS, recommendations from other developers.
Sorry, Laravel is not the solution to everything, and it never will be. Nor is any other framework mind you. I just wish people would stop pulling this shit on this subreddit. To reiterate, Laravel is not the ultimate solution to all problems, you should always choose the right tool(s) for the job.
My suggestion would be to not post this kind of obtuse, useless crap. Why the hell is this the top voted answer!? The OP wants to know how she/he can achieve a fairly reasonable task and without any understanding of the requirements you have taken it upon yourself to dismiss this as folly. Can you not conceive of a scenario where you may wish to analyse your browser/device share in order to make informed, data driven decisions on where to target your website or product? Or perhaps to analyse how search engines/spiders crawl your site? Or maybe to detect fraudulent activity? Or to detect in app users?
&gt; Where they currently have big fat yellow notices saying: &gt; &gt; &gt;This package is not maintained anymore and has been superseded. &gt; &gt; And the description includes the words: &gt; &gt;this extension is not maintained and is available for historical reasons only. Yes, the mysql extension on PECL has been abandoned since it was merged into PHP. But PHP 7 hasn't been released yet. When it has been released, mysql will be moved back to PECL and maintained again. &gt; Even if they do, with upstream being unmaintained The upstream will not be unmaintained, I assure you.
I can imagine all of those things and more. There are hundreds of perfectly valid reasons for wanting to parse a user-agent string. However, you will very quickly discover that there are as many different variations on user-agent strings as there are people on the internet--and no one way to parse any of them correctly. What you're trying to solve is equivalent to solving the halting problem. You can make educated guesses, and maybe your numbers are close, but they will _never_ be exact. They just won't. There's no way to reconcile this, user-agent strings are not machine parse-able. They never have been, they never will be. Consider the user-agent for the new Edge browser (`Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; DEVICE INFO) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Mobile Safari/537.36 Edge/12.0`). What category would you put that into? Mobile? Android? WebKit? Chrome? Safari? None of the above? All of the above? Because not a single one of those labels is correct. The right one is the one at the very tail end: Edge/12.0. And there's absolutely no way to know that beforehand from an arbitrary user-agent string.
For what purpose would you want to submit a traditional form? Most clientside frameworks provide their own form implementations which can package the data however it is needed
I mentioned file uploads. It's possible to put a file in a JSON string, but I wouldn't consider it an efficient or pragmatic choice. The pragmatic choice is to be content-type agnostic. If it's urlencoded, fine. If it's multipart, fine. If it's JSON, fine. Different representations, same data. 
For anyone who still thinks that the core developers intend to continue maintaining ext/mysql for PHP 7 after it's removal from the core code and dumped into PECL... think again. If you are still using the mysql\_* functions, you must start considering your migration path to the alternatives (mysqli\_* and PDO-mysql) now. I also think that believing that your distro will package up dead code and maintain it (even when it already has known bugs never fixed "upstream" and flaws that can never be fixed) is dangerous and you will likely pay sooner or later.
Not sure if this is becoming an unpopular opinion with Javascript being more and more omnipresent, but I still like to ensure that for most use cases, I support things without the assumption that JS is present. There are some things that just absolutely do require JS, and that's fine, but for the vast majority of scenarios, I think it should be totally possible to have a form representation as a fallback, and to be able to handle its post. I'm another person in the "handle both ways" camp.
It is not only possible to accurately identify the vast majority of browsers, but quite easy, as well. You can identify Edge via the token you noted. Each browser has a uniquely identifying token. As long as you code your *priorities* correctly, you can easily distinguish FF from Chrome from Mobile Safari, and so on. Now, devices and platforms are a whole different story. And, of course, UAs are trivial to change, spoof, or omit entirely. However, the number of users who can/do do this is well below the margin of error anyway - statistically insignificant. Parse UA strings for stats. Don't bother doing it for anything your app branches on, though.
Isn't mysqlnd an option ?
May she rest in peace...
All I want is someone who wants to make cool products. We are using PHP/Fuel. The product is www.textingbase.com We are having performance issues (database calls are seemingly inefficient). We are having some a few database issues. We are having some upload issues (need to be able to upload millions of contacts...right now it's running a PHP script and timing out at under 175) and we need to tie our mobile together and start building our next version which includes enterprise features. We need a professional who wants to make an incredible product. We have a server infrastructure guy who built Nasa's mid tier infrastructure, a n incredibly hard working and happy front end developer and a great UI/Product manager. Our backend developer is good, but he needs someone better to teach him and push him. I believe the right hire could be the difference between us really being something special, or us being a novelty act. The business opportunities are huge, we just can't support them with the current product. It's close, but so far away. We just launched two weeks ago-server hits are minimal at this point...that's going to change.
I am 100% with you, and thank you for the feedback. Great feedback. I do deal with investors and clients a lot more than usual, programmers are a different breed.
I need a programmer who can engineer quality code to think about the future and has a great work ethic and can communicate when there are issues (or ask questions). That sounds simple to find? It isn't...those people are pure gold when you find them.
That's a good point...I deal with way too many "not programmers" who do need to hear/see excitement.
&gt; We are having some upload issues (need to be able to upload millions of contacts...right now it's running a PHP script and timing out at under 175 You need to use a job queue, not doing it while a user is waiting for a browser response. Have a link to the job details? edit: &gt; Version: 1.5-dev You should also *really* consider using a stable version, not a dev one.
That seems like a lot of work for a Hello World app.
Thanks, will fix
Stumbled across this topic, and since it's only a month old, I'll add $0.02. I think chrisguitarguy did a great job explaining *when* it's appropriate to throw an exception, but I don't think he answered *why* you should use exceptions over return codes. So here it is, straight from the C++ inventor: &gt; The fundamental idea is to separate detection of an error (which should be done in a called function) from the handling of an error (which should be done in the calling function) **while ensuring that a detected error cannot be ignored**. The bolded part is the most significant difference between exceptions and return codes. Return codes are easy to forget, easy to ignore, and therefore prone to human error. Exceptions make it harder to make mistakes.
He says right in the article he will be using PHP again soon so I don't think that's why he's leaving (or at most it's only a part of it).
&gt; https://github.com/thephpleague/omnipay/graphs/contributors Well now -- I thought Kayla was the driving force behind OmniPay. I stand corrected, and I thank you.
[Doesn't PHP already have a function for this?](http://us2.php.net/manual/en/function.get-browser.php) Uses data maintained by [browsecap](http://browscap.org/), which is going to be more thorough than anything you could roll by hand, even if you did roll your own regexes.
&gt; Car and Dealership and PurchaseOrder for one website, and Video and Comment for another website Then maybe abstract those into their own metadata/configuration class? (Softcoding in XML etc. is also possible, but that may be overkill.) So you have to pass something additional to `Database` to tell it how to behave: $conn = mysqli_connect(...); $schemaConf = new BobsAutomobilesConf(); $db = new Database($conn, $schemaConf); $t2 = $db-&gt;table("cars"); assert($t2 instanceof Cars); Where `Database` expects that `BobsAutomobilesConf` implements: interface SchemaConf { /** * @param string * @return string Classname to instantiate */ public function getTableImplementation($name); } If it turns out `CarTable` needs special handling to start up, you can switch it to direct factory-method rather than a class-name lookup.
And how would you programmatically detect it over, say, Chrome or Safari? And what about next week, when a new player enters the browser market? Or a year from now, when Firefox decides to change up their user-agent? Any code that attempts to parse a user-agent is not only guaranteed to be wrong given enough time, it's likely wrong the moment it's written.
We've met IRL a couple of times at the CI conference, but I wanted to say thanks. Your words made me want to be a better developer, forced me to learn new things and encouraged me. Thanks for being awesome. Thanks for all you've done for the PHP community and thanks for all the code you've written that has helped new developers get better and old developers stay relevant. Thanks. 
[**@philsturgeon**](https://twitter.com/philsturgeon/) &gt; [2015-05-22 00:53 UTC](https://twitter.com/philsturgeon/status/601551330528915456) &gt; Oh the fucking irony of trying to bow out of PHP then picking up 250 followers from http://followphpdevs.com or whatever that thing was. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
And Bobby Tables wept.
How is this? Who We Are: Texting Base is a SMS Marketing Automation Platform that just launched in early May of 2015 after years of development. We have invented a means for personalizing group text messaging to enable texts to be highly individualized and personal to the recipient, even when many messages are sent. We are growing quickly and looking for people who want to be a part of a team. Texting Base is focused on making communication more efficient and personal. Come and be a part of something special. What You Will Do: A Software Developer will collaborate with the Development and UX teams to create, maintain, and enhance features. You will also help fix bugs and maintain our documentation. You will work closely with the UX and Support teams to make sure features ship as they were planned and existing features are updated as needed. Who You Are: You love to program and are driven to learn. You are a great communicator, detail oriented and can see a project through from start to finish. You are an excellent code documenter. You are able to make decisions on your own but know when to ask for help. If that's you, you might be just what we need! Requirements â€¢ 3-7 years experience working on web applications â€¢ Experience with object-oriented programming languages (PHP, RoR, etc) â€¢ PHP Fuel Framework â€¢ MySQL â€¢ JavaScript â€¢ CSS â€¢ Version Control (Git) â€¢ Ability to use command line tools. â€¢ Ability to work remote or with remote teams â€¢ Excellent written and oral English communication skills â€¢ Exceptional customer service skills â€¢ Excellent attention to detail â€¢ The ability to work independently but also work well within a team environment. Extra Credit Qualifications â€¢ Javascript MVC Frameworks (ember.js) â€¢ Foundation Framework â€¢ Native Mobile Development (iOS, Android, and Windows Phone) â€¢ Apache and NGINX â€¢ Experience working remote or with remote teams â€¢ Experience working on a SaaS product â€¢ Experience working with Amazon Web Services What Texting Base Offers: â€¢ A company which values itâ€™s employees and understands we are a technology company, and our technology staff is crucial to our success â€¢ The most up-to-date technology, including company-issued Macs, the latest software and other tools needed to excel at your job â€¢ No micromanagement â€¢ Work from home opportunities â€¢ Non traditional hours â€¢ Part-Time Opportunities â€¢ Distributed development environment â€¢ Training 
Better! Some of the wording is a little clunky though. For example: &gt; What You Will Do: &gt; A Software Developer will collaborate with the Development and UX teams to create, maintain, and enhance features. You will also help fix bugs and maintain our documentation. It kind of sounds like the software developer is someone else. Maybe, *as a Software Developer, you will collaborate*... There are a couple other things that just sound odd. I'm sure they will pop out to you when you read it again with fresh eyes. Good luck!
Yeah but that is a good thing. It fosters a culture of integrity and accountability.
This answer: 8/10 This answer with rice: 10/10 Thank you for your suggestion.
You are right! However, it's difficult to compete with Facebook and HHVM. JPHP allows to use the php language not only on the web, for example, you cannot use HHVM to build a native android application or a gui/game app. Now you cannot use HHVM on Windows. JPHP already supports these features partially and has high performance. Also, performance of PHP7 and HHVM is about the same. The idea of using HHVM only for hige performance becomes doubtful.
This looks great, going to give it a try in the upcoming week :)
&gt; jphp faster php7 ~ 20-30% looking at the individual benchmarks, and not the summed benchmark. PHP7 seems to be quicker in a lot of important scenarios (method calls, object creation...) ; and has better feature support
How does this compare to [Phabricator](http://phabricator.org)? **Edit:** Here's the comparison of Phabricator vs Atlassian (as a starting point): http://phabricator.org/comparison/
It will be optimized in the future and I think it will work faster after Java 9 release.
At Ubirimi we currently offer Yongo as an alternative to JIRA Documentador as an alternative to Confluence SVN Hosting (git coming soon) Calendar Solution Agile as an alternative to JIRA Quick Notes as an alternative to Evernote HelpDesk as an alternative to Atlassian Service Desk 
Yes it is a good thing. Some people don't like being proven wrong though; they have an opinion and refuse to change it when given a different viewpoint or even hard facts.
Thanks Phil. You are inspiring &amp; helpful. I learned a lot from you. Good luck.
Burn it with fire.
Laravel heavily use of Symphony classes. 
I am working hard on adding new APIs to the platform. We need new developers ASAP!
Something to consider is the use of the Factory pattern in combination with your database object: class TableFactory { public function __construct(mysqli $connection) { /* snip */ } /** * Specifies the class used to construct tables with the specified name * @param string $tableName * @param string $className * @return $this * @throws InvalidArgumentException if the class does not exist or does not implement TableInterface */ public function setTableClass($tableName, $className) { /* snip */ } /** * Specifies an array of classes used to construct tables, with the table name as key and the class path * as value * @param array $tableClasses * @return $this */ public function setTableClasses(array $tableClasses) { /* snip */ } /** * Returns a specified Table class instance for $tablename if configured, * or a generic Table class instance otherwise * @param string $tableName * @return TableInterface */ public function getTable($tableName) { /* snip */ } } You instantiate and configure your factory once, and then use it to create new instances: $database = mysqli_connect("example.com", "user", "password", "database"); $factory = new TableFactory($database); $cars = $factory-&gt;setTableClasses([ 'cars' =&gt; CarsTable::class, 'parts' =&gt; PartsTable::class, 'drivers' =&gt; DriversTable::class ])-&gt;getTable('cars');
I can contribute. Just drop me aline and let's talk.
If I can't use PHP the way I normally would, then I might as well go all-out and just start using Java for my project and stop pretending I'm using PHP. This puts me into the "right tool for the right job" mentality, which I don't think JPHP is able to persuade me to butcher PHP so I can pretend it's Java.
Thanks for sharing this, it looks like it's got potential but two glaring issues would, in my opinion need addressing to call it an atlassian competitor: - A new UI. I'm assuming it's been put together by a backend developer? You need someone with experience building web application interfaces here, it's quite a specialist thing. - Git hosting. SVN's is, as far as many developers are concerned, dead and buried. Keep at it. If I wasn't working on so many things already I'd help. I'll keep an eye on it though and give it a try at some point!
Hi, great! first clone the repo and set up the dev environment. you can find how to do that on https://github.com/ubirimi/ubirimi thanks again
I definitely agree with you that the UI would need some polish. Git is coming soon! 
Depending on where they work, Symfony and Zend are often considered by "enterprise" companies as being the only "enterprise" level frameworks.
I do know, and I also hate it, I think it's ridiculous, I've worked on ZF2 and Symfony, and the only thing "Enterprise" about them is the adoption and support...
What is your opinion about the Phalcon and Zephir projects? The authors of these projects try to improve the php language, use the C language to improve performance of the Phalcon framework and php projects which use it. In the end, they came up with a new program language - Zephir. If you will want to improve performance of your php app, you will use C or Zephir or Java? May be another language since the beginning of the project?
Do you currently have a migration tool to move from jira/confluence to this?
no, not at the moment!
Atlassian is one of the few companies I don't mind paying for. They make excellent stuff.
I'm not 100% sold on Phalcon as a framework, although it does boast some serious benchmarks. I've been interested in giving it a spin, but the fact it's a PHP extension that doesn't exist in RHEL or CentOS repositories would make it hard for me to sell to my operations group. Zephir is not PHP, nor does it pretend to be. It's a language that makes creating PHP extensions easier (see Phalcon), which IMO is a good thing because writing PHP extensions in C is not for sane individuals. I have tried Zephir and I like the idea a lot, especially if there is ever the need to create extensions because it eases that process. If I want to improve the performance of my PHP application and I've already exhausted all the normal avenues (optimizing queries, caching, etc), then my next step would be HHVM. The reason for this is because I can move my code to HHVM without making any modifications or having any type of vendor lock-in. If the HHVM project goes belly up, I can move right back to the regular PHP interpreter. I wouldn't be able to do that with JPHP since it doesn't support the standard php library. If I wrote an application targeting JPHP and JPHP dies, then I'm stuck with an application that has to have some hefty refactoring just to be able to re-enter the regular PHP world. This is not generally the case with HHVM.
and expensive!!!
it's good to have an open source alternative to the whole atlassian portfolio
Smart...thank you!
a) I wouldn't use Atlassian in the marketing strategy. Just say what your products provide. Be honest and fair-play about it. b) Careful not to spread too much. I would focus on Yongo. c) Focus on UI now. Seriously. Having a poor UX negates most of your backend magic. Just look at Mantis - http://www.mantisbt.org/bugs/my_view_page.php. I'm not saying yours is bad, btw. Congrats for the endeavour, though. Hard work must've been put in this. With lots ahead. Later edit: Far too much static functions in there. It's everywhere. Looks very similar to what CodeIgniter does.
Who is lucky enough to have you?
I don't get it. This is a "company" with "products" but they're all open source and I don't see any pricing information. What's the long term plan here? Also the website needs some work. Missing &lt;title&gt;&lt;/title&gt; tags and /img/tick.png doesn't show up. What I really want is an alternative to [Crucible](https://www.atlassian.com/software/crucible/overview) / [FishEye](https://www.atlassian.com/software/fisheye/overview). [Trac](http://trac.edgewall.org/) is ok, but the one feature I really want is the ability to add comments to a commits that references specific lines. If a coworker commits a file and I find a problem in a function or something is done a strange way, I want to be able to leave a note that they can see later. But I don't want to create bug tickets for everything. Sometimes it's just nice to leave little notes and questions without hardcoding it into the comments and without creating a full bug ticket. It's also good for managers who aren't really programmers but still are able to comment on how things are done. EDIT: It looks like Crucible has actually added inline threaded comments. Awesome.
no git is definitely a showstopper, it's all the rage these days... I havent used SVN personally or professionally is years...
thanks for the advise! I want the platform to remain truly open. As MariaDB is. If money is going to be obtained out of it then it is going to be done through paid support, maybe hosting, maybe custom features, etc I want this to be like Linux, open for everyone and free for everyone
Honest question: How do you plan on paying for the hosting? If it's open source/free, are you going to be doing ad revenue? 
This is great, but I fear I have to be blunt. The domain name you've selected can only be visited ironically.
&gt; you cannot use HHVM to build a native android application PHP is not be the best tool for such job anyway. &gt; or a gui/game app Ever heard of [PHP-GTK](http://gtk.php.net/)? :P
[**@kayladnls**](https://twitter.com/kayladnls): &gt;[2015-05-22 02:35:16 UTC](https://twitter.com/kayladnls/status/601577032993079297) &gt;[@afilina](https://twitter.com/afilina) [@jakefolio](https://twitter.com/jakefolio) @dracony\_gimp [@ramsey](https://twitter.com/ramsey) I know it doesnâ€™t help much, but I appreciate yâ€™all and all you do. Thank you, seriously. [**@ramsey**](https://twitter.com/ramsey): &gt;[2015-05-22 02:40:33 UTC](https://twitter.com/ramsey/status/601578364701450240) &gt;[@kayladnls](https://twitter.com/kayladnls) Thank you. :\-\) /cc [@afilina](https://twitter.com/afilina) [@jakefolio](https://twitter.com/jakefolio) @dracony\_gimp [**@dracony_gimp**](https://twitter.com/dracony_gimp): &gt;[2015-05-22 02:48:15 UTC](https://twitter.com/dracony_gimp/status/601580300917936128) &gt;[@ramsey](https://twitter.com/ramsey) [@kayladnls](https://twitter.com/kayladnls) [@afilina](https://twitter.com/afilina) [@jakefolio](https://twitter.com/jakefolio) Actually would be nice if the code for that page was shared so that we could create more lists [**@kayladnls**](https://twitter.com/kayladnls): &gt;[2015-05-22 02:48:32 UTC](https://twitter.com/kayladnls/status/601580373403934720) &gt;@dracony\_gimp [@ramsey](https://twitter.com/ramsey) [@afilina](https://twitter.com/afilina) [@jakefolio](https://twitter.com/jakefolio) I wouldnâ€™t be hard to duplicate. Like, at all. [**@dracony_gimp**](https://twitter.com/dracony_gimp): &gt;[2015-05-22 02:51:00 UTC](https://twitter.com/dracony_gimp/status/601580995482132480) &gt;[@kayladnls](https://twitter.com/kayladnls) Gaaaaal, twitter API is so annoying I cringe every time I read their manual =/ &gt;/cc [@ramsey](https://twitter.com/ramsey) [@afilina](https://twitter.com/afilina) [@jakefolio](https://twitter.com/jakefolio) [**@dracony_gimp**](https://twitter.com/dracony_gimp): &gt;[2015-05-22 11:04:31 UTC](https://twitter.com/dracony_gimp/status/601705191503691776) &gt;[@afilina](https://twitter.com/afilina) Also its hipocritical to demand being added to the list, while not even following it yourself &gt;/cc [@kayladnls](https://twitter.com/kayladnls) [@ramsey](https://twitter.com/ramsey) [@jakefolio](https://twitter.com/jakefolio) [**@jakefolio**](https://twitter.com/jakefolio): &gt;[2015-05-22 12:31:08 UTC](https://twitter.com/jakefolio/status/601726990383652865) &gt;@dracony\_gimp did I say I should be added? I merely mentioned big contributors to the community that were left out [@afilina](https://twitter.com/afilina) [@ramsey](https://twitter.com/ramsey) [**@dracony_gimp**](https://twitter.com/dracony_gimp): &gt;[2015-05-22 12:37:01 UTC](https://twitter.com/dracony_gimp/status/601728469492473856) &gt;[@jakefolio](https://twitter.com/jakefolio) I was talking about [@afilina](https://twitter.com/afilina) . She is having a long conversation in the comment box there &gt; &gt;/cc [@ramsey](https://twitter.com/ramsey) [**@afilina**](https://twitter.com/afilina): &gt;[2015-05-22 13:25:51 UTC](https://twitter.com/afilina/status/601740760724168704) &gt;.@dracony\_gimp Stop harassing and stalking me. I told you to fuck off already. Go talk trash somewhere else. [@jakefolio](https://twitter.com/jakefolio) [@ramsey](https://twitter.com/ramsey) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/36w1gu%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Don't you feel that describing MVC incorrectly and describing ADR using the original MVC definition contributes to the process of "semantic diffusion"? For example, I can't recognize MVC in this description of the model: &gt; Letâ€™s look at the Model in the MVC pattern. Itâ€™s free to send information back and forth between the View and the Controller. The relationship between the three isnâ€™t a rigid one. This is straight out of "real" MVC (if we substitute C, M, V &lt;--&gt; A, D, R): &gt; In contrast, that relationship in the ADR pattern is quite rigid. Only an Action can change the Domain. The Responder only uses the information from the Domain. It turns that information into a response to send back. Thatâ€™s all.
What does this have to do with PHP?
Those are the products that you offer to compete with Atlassian and Phabricator, but how do you compare? What sets you apart from other services?
but does it have rage faces like HipChat?
You'll find that most developers who don't have a lot of experience job searching take job descriptions 100% literally. If you don't absolutely *require* prior experience in a particular technology, framework, language, etc., make this abundantly clear. Put a *lot* of thought into your job description. Too often I hear about employers complaining that good developers are hard to find and good developers complaining that good jobs are hard to find. Most of the time this is due to poorly put together job postings. You wouldn't advertise your products or services with a bland paragraph with a few acronyms thrown in for good measure, so why are you advertising your company this way? Make working for you sound exciting and challenging (if it is, anyway... if it isn't, then you've found a bigger problem). I don't do this for a paycheck; I do it because I love learning, solving problems, and challenging myself. Literally 99 out of every 100 job postings I've come across read like I would want to hang myself after a week on the job, despite being qualified or overqualified. Also, please describe the nature of the position in adequate detail. "Software Developer" and "PHP" tells me virtually nothing about whether I'd actually want to work for you. It's too ambiguous. Describe your industry, workflow, roles, etc. Tell me how much of my time will be spent maintaining vs. creating. Anyway, not all of this was applicable to your particular posting; it's general advice. Hope it helps at least a bit.
Aliasing wouldn't work. They work in completely different ways (different signatures, different return values). There's no way you can even create a drop-in replacement that works exactly the same using a library (for example, mysql\_* passes resources, while mysqli\_* passes objects, even through the functional interface, so is_resource() checks will unexpectedly fail). Aliases also add maintenance overhead, since now you don't have to test just the functional and OOP interfaces to mysqli, but the mysql functional interface too. And if it's not removed in PHP 7, when should it be removed? Personally I believe the removal of these functions has additional benefits, in that it breaks all the old, outdated tutorials that are still teaching new developers bad practices. They'll be forced to look for newer tutorials that are more likely to better cover escaping, if not prepared queries, and better error handling.
phprockstars.sexy.ninja.io 
I think you're right that I'm contributing. I'm not sure how I'd fix it in this article. The rigidity aspect has to do with that. The definition is loose. For that same reason, I don't agree that the ADR is what the "real" MVC is either. I'm using [Martin Fowler's description](http://martinfowler.com/eaaDev/uiArchs.html) as my basis of original. Specifically this part: &gt;You'll notice that the text field controller didn't set the value in the view itself, it updated the model and then just let the observer mechanism take care of the updates. That's the UI definition he gives. The one you brought up and that I agree with. The issue is that it doesn't represent what's going on in most frameworks either. No one is observing the model and triggering the view. In most frameworks, there's some flow of information between the model, the controller and the view. Is it "back and forth" exactly? No, I think it depends on the framework. That's where I came from with the rigidity. ADR is more rigid in that the flow is clear because it hasn't been warped with time. Not because the MVC definition wasn't clear in the first place. It's just all over the place now. At least, that's the best I could make out when doing my research.
if only there was a method to create from a format
I think you may be trying too hard to be well liked by the community.
We use exclusively JSON following [JSON API RC4](http://jsonapi.org) conventions. Our APIs are exclusive to CRUD operations however, and file uploads are outside of the scope of our RESTful APIs.
I haven't downvoted, but I feel like the domain is a bit cringy. Consider [this thread](/r/PHP/comments/36scyi/if_you_all_were_looking_for_an_a_player_php/) and how programmers generally regard the term "rockstar".
I believe that my API meets this criteria as well
Hey, I think your product looks pretty good, and I'd be happy to give you a hand. Do you have a list of outstanding issues? or some kinda of project plan in regard to improvements? As a few people have said I think focus on UI would be beneficial and perhaps simplifying things would also be good as thats where Atlassian's products fall down for me. Thanks, M
we can start working on this one https://github.com/ubirimi/ubirimi/issues/41
it's free open source it can be better than the competition
currently I am paying for the hosting of the 462 customers that Ubirimi has so far :)
Excellent, thanks!
I think your words speak for yourself. Why did you bother just 'slapping some code together', 'butchering the template' and then hanging a ludicrous, oft-hated name (rockstar) off it? It's lazy, ill-conceived and unprofessional
epic 
Check out &lt;https://icicle.io&gt; it might be exactly what you're looking for.
Couldn't I use any library that supports PDO? Good to know it's stable though.
Expensive is relative, and some people are strapped for cash. It's a thing. 
I just don't get whyyyyy everybody hates me
Join the mailing list
Yeah... Well any library that supports the pdooci class
Yup. I downloaded the html from the page and parsed the devs into an array. /u/phpgeek actually sent me his sources later, but by that time I had my version done
&gt; You'll notice that the text field controller didn't set the value in the view itself, it updated the model and then just let the observer mechanism take care of the updates. Observing is for delta updates. We usually have no deltas because PHP is not persistent &amp; the browser doesn't support it^1 . Still, in MVC the view is initialized from the controller by receiving a model to render, and that's precisely what most web frameworks do. ^1 If we go the extra mile with JS + XHR, Comet, sockets, those are examples of "observing" model changes, resulting in partial view updates.
Seriously, citation needed on this. Joe Watkins hasn't disappeared.
i think donations
Love this (bottom of the home page): Companies probably using Phabricator "probably".. 
There's a lot of stuff that's purely for the shitz and giggles. Example: https://imgur.com/Chh6xbq You can turn on "Serious Business" in the config to make it more appropriate if need be.
no downtime during the update of database data and structure? what if a database migration fails, still no downtime? Updating files without downtime is easy peasy, but it's not all about files though...
I can't change my document root, so I'd need the actual public_html to point to the current folder. 
Again, this is another example of a programmer stuck in the past. This whole article can be summed up by the following tl;dr: **tl;dr:** "I can tell you what advantages PHP offered in 2000, but what does it offer today? It is slow, it is cumbersome, the systems have become very complex, the uncompiled nature of PHP has become a problem as people try to do more ambitious projects with it. If you build a CMS, and you have traffic that needs 100 webservers, then you need to deploy the whole CMS to each of the 100 webservers."
Looks like you're missing a $pendingClientData = json_decode($pendingClientData['data'], true); From your Ubirimi\Service\ClientService class in the add method. Just wasted time trying to debug it just to install and test it... not a good start dude :'( *edit* Now I'm getting connection refused: Could not install client [http://192.168.0.70]. Error [Error Connecting to server (111): Connection refused] ... I give up. :( BTW, this was using the instructions found here.. https://github.com/ubirimi/ubirimi/blob/master/README.md - I got as far as composer setup and after the json_decode issue, I entered all the details it asked for then bombed out with a connection refused. 
Hi, the setup script was broken. now it is fixed. we recently moved to support mysql 5.6 this version of mysql is more strict so some queries were failing. it is fixed now. please do a vagrant destroy ubirimi and then vagrant up ubirimi. it should work flawlessly. to access the website just point the browser to http://ubirimi.dev let me know if it does not work for you. you can also open a github issue ticket thanks
I added some examples, for better read :-#
&gt; Your tl:dr is bullshit. That is just one paragraph in the whole article. You conveniently take it out of context and label it as tl:dr...he he. How is it out of context? I read the whole article, and that paragraphs sums up 95% of his points. The author is coming from a PHP 4 (year 2000) frame of mind. **Every** point that is made, is a negative connotation. From your post history it appears you don't like PHP and don't use it. So did you post this article to vent how much you dislike PHP?
This form of design is intriguing. Especially since I'm part of a two person development team with duties basically split in the same manner. My big question is what framework is available for the front end? 
Angular, if you are interested in front. nodeJs, if you are more back.
First things first, are you looking to learn a new language or just a framework (Angular vs JavaScript). The best advice would be not to think in terms of complimenting your existing knowledge. Instead learn a language that's used in the development or hobbies you like. That's where you'll get the most benefit, as you're genuinely interested in progressing your knowledge. * What are your hobbies? * Do you prefer web development vs backend/desktop? * Are you interested in making your code platform/OS agnostic? * What do you mean by "complete developer"? General knowledge, stack specific, etc. **Edit:** Any new language will make you a more "complete developer" as you'll learn new design patterns, best practices, and most importantly it'll open up your mind to new/unknown aspects. All of which will impact the way you think about and code your existing languages.
What do _you_ think?
Thanks for the reply. A little progress has been made, still a couple of issues. 1) When you ask to confirm the password, it's not actually the password but the email address (from looking at the code). ~~2) Secondly, this happens now right after clicking enter on confirm password, not sure if this is related to me using mariaDb or not, but mariaDb is a drop in replacement for MySQL so wouldn't have thought it'd cause an issue. ~~ Reinstalled MySQL, and getting connection refused again... [Exception] Could not install client [http://ubirimi.dev]. Error [Error Connecting to server (111): Connection refused] Note: I'm not using vagrant, I'm trying to install via the repository onto a clean server. Cheers. 
I have found that the easiest way to parallelize execution is to break up a web page into blocks. Load each block or section via a separate Ajax call (ie thread or request). The only gotcha is the session. It can act like a global interpreter lock. Therefore, keep the session open only as long as you need to access a value. 
After all the grief several people and their sockpuppets put me through on /r/php for way less than this, you should be banned for sure.
I had a very detailed reply I was writing but as I kept going back to your article to tear it apart I came to realize that doing so wasn't going to help. As for it being obsolete, it never has been and as long as their is an active community surrounding it we're going to be using it for avery long time. It's main draw was the fact it took stuff from Java, Perl and C ( The three main web languages we loved ) and combined them into one system. Since then there have been many enhancements that make it extremely fast when setup correctly. Yes there are many alternatives now but the evolution is what is keeping PHP alive and still allowing it to be a staple in web development. By the way if you think is ASP as good as PHP than you have never had to maintain a massive F500 ASP system. BTW I've never had issues with PHP when creating web servers, DBMs and other fun little servers and services while drunk in college. I even replicated many of the linux tools in it and the performance was on par. ( Sorry for any grammatical issues, I just woke up and basically wrote this with one eye open lol )
I'd suggest using this https://github.com/BrunoDeBarros/git-deploy-php we also have websites running on whm/cpanel and it works perfectly. All you need to do is have a deploy.ini file with ftp details &amp; git-deploy file in your root folder. You can deploy rollback etc. 
Always JavaScript first before Angular. Angular isn't a language, it's a framework, and YMMV as to whether a shop will be using that, Ember, Backbone, or no framework at all. And frankly, the vogue of JS frameworks comes and goes faster than new PHP versions, if that's any indicator of why you should be wary of over-investing in any one.
Well explained. Thank you!
Better performance, better for the user.
Thank you!
What's the max upload size on your web server (i.e. nginx or apache)?
Implemented the basics. I will extend this soon.
It's not better, it's simpler.
Assuming you're using Apache or Nginx and have access to the configuration it'd be best to do it there.
&gt;Javascript, is not a programming language, nor is Angular for that matter (it's a framework). You can learn it if you want, but keep in mind it is not a "complete language", and it has its place in front-end dev only. Although I do see some server-side stuff that is maturing but worlds from being a full language. I'm no big fan of JavaScript but it most definitely is a programming language. I think you're [massively underselling Node.js](https://github.com/joyent/node/wiki/Projects,-Applications,-and-Companies-Using-Node) too.
First off, I'm not selling anything. The OP asked about a "complete programming language". If node.js meets that need for the requirements of the job, then by all means use it as a scripting language, but node.js is simply a javascript source manager, not a programming language. Honestly, a lot of amateur programmers come into dev dropping framework and tool names, but really don't understand the concepts or implementations of all that's out there. I'm not trying to undercut node.js, but to advise someone that it is a complete programming language is tremendously misleading. If I wanted to learn programming proper, I would never start with node.js.
JavaScript - and god help us all that its as big as it is....
To elaborate a bit: With this method, the webserver never needs to pass the request to PHP, saving time and resources. If the redirect is doable in htaccess, you should always handle it there.
Aside from better performance, it's just the right place for it. Separation of concerns. The web server should handle the protocols and the application should handle the business logic/etc. Routing within the application should be a responsibility of the application, but ensuring correct protocols and routing to the proper domain should be on the web server level, generally speaking.
Javascript sounds like the next logical step if you're making stuff for the web. I'd also suggest looking into Postgres if you have a good grasp of MySQL, once you master PG you won't ever look back. I wouldn't recommend starting with Angular. Angular has a ton of convention and magic behind it. For small projects it's way overkill (unless you're super comfortable with it, but even then there are better alternatives). It makes sense for projects with many people working on the code, but then again, there are libs that offer a lot more flexibility. It's also very opaque and for a beginner it'll be very hard to figure out how things work internally, which is what you'd want when learning a new stack. Before moving to a big framework, I'd recommend exploring most common functionalities manually, trying to put something together, and only then looking at how other frameworks / combinations of libs do it. Those functionalities would be (might miss some): - rendering HTML - manipulating the DOM - AJAX requests to retrieve content - dealing with user input / forms - creating and manipulating models / collections - validation - loading from / posting to a REST API - websockets - UI elements (menus, transitions, etc) I'd recommend looking into React, seeing the frontend in a functional way instead of an event driven mess is a huge asset when doing more complex stuff, and later on when you have to refactor / modify your project. A few great libs to look at (both in terms of functionalities and source code): - lodash.js / Ramda.js - backbone.js - immutable.js - React.js - jQuery (obv :P)
how do i check this? im using oneandone as my host
Sweet. Does that work then? Does it need to have certain permissions? (do symlinks have permissions?) 
Great stuff, I'll try it on that ugly stuff that is SugarCRM. Just an unimportant quick question, do you plan to enforce [PSR-2](http://www.php-fig.org/psr/psr-2/) ? Glancing at the todolist, your localization needs could easily be covered by [symfony/translation](http://symfony.com/doc/current/components/translation/introduction.html) if you are willing to use external dependencies of course.
If you're on a shared hosting plan, it's most likely Apache.
Please do not rely on register_globals! And since it got deprecated in PHP 5.4 it should not work any more.
As it says in the README the parser/scanner does not implement a full lexer so it can not detect the intent of code. So it can not determine any sort of code styling. Now, for what coding style I use in the php7mar project itself, I am using K&amp;R/One True Brace styling. I will look at the translation package. That is the highest on my priority list since I do not wish to leave non-English speakers left out.
Just a future note, a group of us from PHP[tek] started a project this week to help with this exact problem called helpwanted.json The repo is [here](https://github.com/helpwanted/helpwanted). We will hopefully have a MVP up and running shortly. Best of luck in the search.
Worth it for everything they offer. It's polished, continuous, and makes life easy. You need to do some work to get there. Not having git is just huge
a) Good design != flashy design, right? b) He hates flashy, eh? - http://wiki.scribus.net/wiki/images/4/49/Mantis_searching.png Well, better flashy than that LSD'd CSS I say. Mantis will be changing their UI soon anyway. Something like this maybe (hopefully) - http://support.mantishub.com/hc/en-us/article_attachments/201646125/modern_view_issues.png ?
Even before you code, set up your IDE, it will point all your spelling mistakes and errors. And what about writing test cases? Not even that, just run your program before you git add and then commit.
API Platform is client-side technology agnostic. You can use any framework you like. However, current projects know to use API Platform all use AngularJS as JavaScript framework. A doc explaining how to use Angular + Restangular is available on the DunglasApiBundle page.
Object-oriented programming is about patterns of objects interacting via their public interfaces. Instead of learning about object interactions and interfaces, this tutorial believes beginners should first learn about - "We group similar things in classes" (classes are basically a compiler optimization, not a requirement for doing OOP) - Inheritance (likewise, inheritance is not a requirement for doing OOP, and it's not a beginner topic) - Magic methods (???) - DocBlock comments (???) The tutorial will give beginners some starting points, but it presents OOP in the wrong light, and concepts are introduced in wrong order with regard to their importance.
When it drops out, roughly how long after clicking submit is this? If it's around 5 mins (300 seconds), you may wanna increase the max execution time. To debug further you could (at least temporarily) enable full error output: ini_set('display_errors', 'on'); error_reporting(E_ALL);
By definition anything public on a class is a part of its public interface. Should you *always* link public class methods to an explicit "interface Foo {...}"? No. If you tell me what prompts your question, I can be more accurate.
Have an upvote for not being too opinionated with your suggestions. We need more unbiased people in the PHP community :)
Like you I bashed javascript. My last 5 years I've been working as a Senior Mobile Solutions Engineer in the aviation industry. I was vocally against all frameworks like phonegap titanium, or anything of the sort. However, Javascript is getting bigger and bigger and it was time that I give it a full evaluation. For starters when you say OOP in javascript is messy and takes a lot more footwork you're actually just straight up wrong. There are several things in javascript that just take much less code, and are more elegant solutions then I have ever come across in any classical programming language. The thing about javascript is you actually need to learn the language. It's a whole different world. You need to be able to 'think javascript'. Lots of practices and patterns that you've come across in classical languages will not exactly translate into javascript. Learning javascript will make you a much stronger developer not just because you have another language down. But because it's so drastically different from what most developers are used to it will give you a very good incite on language design decisions. Any person who ask me what language they should be learning right now I tell them Javascript. It's going to explode over the next few years. There is a new framework almost every week that is better then the last. Once the frameworks stabilize and framework wars are over it will explode on the production scene. Beginning to learn javascript now is setting you many years of success in the future as the web becomes more and more of a viable platform. 
Something like [get_broswer()](http://php.net/manual/en/function.get-browser.php) ?
Look here: [What is the best way to parse User Agent strings?](http://www.reddit.com/r/PHP/comments/36sbjx/the_best_way_to_parse_user_agent_strings/)
What are you trying to accomplish? Libraries exist for figuring out the browser type and version, since most browsers now lie a little bit and there are subtleties to the patterns that are non-obvious. I would grab something off the shelf.
&gt; production git repository There's your first problem.
I'd say that JavaScript would be a good choice. It would go well with already knowing PHP because you can make a nice front end that communicates with a PHP back end. Once you have a firm understanding of JavaScript, add in the JQuery framework for JavaScript to make a lot of things easier. Other suggestions of mine would be Java or C#. All of them are pretty useful and fun too!
&gt; group similar tasks into classes. Yeah, I disagree with that. The inital idea behind OOP was to bundle code together with the data it operates upon, not 'tasks'. A simple DTO object is still an object, yet it performs exactly 0 tasks. Also please remember that OOP !== classes. Javascript is a fully object oriented language yet has no concept of classes or interfaces.
Yeah, still not sure that /u/phpgeek isnt dracony.
PEAR... :(
Do you have any suggestions for OOP PHP &amp; MySQL tutorials? I understand OOP completely, I've just have not worked on a big enough project to really capitalize on a few techniques. What I'm really looking for is how to integrate OOP techniques with PHP and a MySql database. 
I might be wrong but starting a post with an insult to the people in the place where you're posting it might not be the best course of action.
Do you have a list of open issues/enhancements wanted that I could jump in on? 
I'm not sure you know what soft skills are. Soft skills aren't the same as "impractically abstract perspective of technical detail". As you could have inferred from reading the article, soft skills are things like - managing expectations, intuition, reading someone's body language - skills that are not easily qualified or even defined in many cases. It sounds like you're just describing your own lack of experience if you're not able to speak about abstract concepts without nitty gritty detail, given the proper audience.
Then why are you talking Javascript in a PHP sub-reddit? Amateur!
Some good points here http://www.itworld.com/article/2693386/why-i-don-t-suggest-javascript-as-a-first-programming-language.html
You realise that article supports my argument, right?
&gt; quite opinionated and pedantic by default This made my day, but still very precise observation =). Could you please list what you had to deactivate, I'll at least add more documentation for those inspections.
This is how almost all Digital Ad Servers handle user agent targeting.
David, I said I don't divide talks in soft and hard. I did *not* say I think soft talks *are* impractically abstract. Good team communication lessons, for example, are as practical &amp; specific as code examples. But if you think you can't give a specific talk about team communication, you can be tempted to give an impractically abstract talk about it. It's a problem of prejudice towards the topic at hand by the presenter, not the topic itself. &gt; skills that are not easily qualified or even defined in many cases. Case in point. There's nothing to qualify and define. This is why I said "less focus on overarching generalizations, more focus on facts". The goal of giving a presentation, in my opinion, is not to hear someone's pet theory about managing expectations, created seemingly in vacuum. Instead, it's to hear more about their *practice* of managing expectations. You just need to give examples, results and lessons. These are always specific, and always factual.
Building your own ORM is always good fun...
&gt; Use Doctrine. Seriously, that wheel has been invented and it's awesome. There are thousands of ways to abuse Doctrine if you don't understand OOP techniques. Say, confusing your domain entities with Doctrine entities and peppering your UI controllers with Doctrine entities.
Just because you're used to a particular format doesn't mean it's better. I find the prototypal to be just as elegant as the classical and really don't prefer one over the other. I can tell you are a novice developer given how closed minded you are about learning new technologies and different paradigms. Learning a new technology is never a waste, even if the technology fails you will have a deep understanding of why it failed, what caused it to fail, and what you can do to not have the same thing happen to your applications. The more different types of technologies you learn the better you can analyze design decisions, what works, what doesn't work, why a new technology is better then an old one. I highly advise you read through Douglas Crockford's "Javascript: The Good Parts" with an open mind. If you still can't wrap your head around the prototypal nature of javascript and want to work at a more abstract level you can take a look at ES6 Classes. 
You have no idea! When I need it, I'll use it, besides if I need Javascript for something, and that's a big IF, I'll just let one of my 3 developers that I manage do it for me. Good luck with all that pretension.
First, thank you for the plugin, it's really helpful, especially when other developers on the team share the same inspection set. Here are the inspections I have turned off, although these are mostly personal preferences. * "Unnecessary double quotes" - The performance differences are negligible, and I prefer double quotes, simple as that :) * "Unnecessary last comma in array definition" - I usually write one array element per line, and use that last comma intentionally, so that all the lines look consistent at a glance. Plus, that way I can Ctrl-D to duplicate the last line and add a new item quickly, without having to go one line up and add a comma. Small things like that. * "Default value hidden in else branch" - personal preference. When initializing a variable, I like to look at the `if` statement and read "*if this happens, this variable gets value A, otherwise, it gets value B...*" , as opposed to "*in the `if` branch, this variable was assigned a value, in the `else` branch it wasn't, so what value does it have, I'll look outside the `if`*". If I forget to initialize a variable in one of the branches, PHPStorm will yell at me the next time I try to use it, so I'm not worried about that. * "Nested positive `if`s" - I prefer nesting them instead of having one condition across multiple lines :) The inspection description is right, I did pick this preference up in the C-development world. * "Type casting via PHP4 functions" - after coding in C++, these C-style casts like `(int)$value` feel wrong. When I use `intval($value)`, it looks nicer. Again, personal preference. Oh, and the "missing conditionals group statement" inspection is great, but it's quite annoying that it flags `else if` and wants `elseif` instead. I like the space, and I don't see the problem in this case.
Easy: Remove every character that isn't `[A-z0-9]`... But seriously, the first step is a clear spec for what must be accepted. Unicode? HTML tags? Which ones? Nested tags? What about CSS styling? Worried about injecting JavaScript through CSS? (Yes, that's a thing.) 
To a person asking how OOP relates to RDBMS, recommending a book like DDD is more appropriate than recommending libraries. Using Doctrine without knowing where it fits in the big picture is liking giving a kid scissors and telling them "run".
I have 10mb upload so it only takes a few seconds to upload the files. It don't know the exact threshold but it seems to trip at about 10mb. I have access to the php.ini and all the upload settings are huge (128mb). I've turned on error reporting but the error log doesn't tell me the error. I'm thinking Ajax upload might be the way to go but it's strange the php upload won't work. 
Phpinfo confirms the values are 128mb. I can actually increase to 512mb and still the $_POST returns false with larger files
&gt; Object-oriented programming is a style of coding that allows developers to group similar tasks into classes is just silly. First, it's not a *style*, it's a paradigm, a model, a way of thinking about a solution. Secondly, you don't just group *similar tasks* together - you need to think about what you are modelling. Lastly, to say OO is about classes is about as useful as saying driving a car is about steering wheels and pedals.
I'm frustrated that everyone on Reddit suggests Doctrine when in fact it's a huge beast that often isn't needed. It's hardly simple either and the documentation is severely lacking. 
&gt; Object-oriented programming is about patterns of objects interacting via their public interfaces. False. It's like they just threw *patterns* in there to make it sound like they know what they're talking about. 
You're just full of interesting things to say.
Saying "False." with no explanation definitely proves you know what you're talking about ;)
I get that. I wasn't born knowing how doctrine works. I think the whole Symfony/Doctrine ecosystem could benefit from some simpler, more opinionated documentation. &gt;often isn't needed If you get to build a new product, then this is just wrong. Using it for CRUD and migrations at least is a huge win for not much effort. This pattern isn't unique to Doctrine either, .Net calls it codefirst (with linq). 
Deployer dont do any kind of magic, dont take care of everything. It's allow you to write you deployment scripts easily. And of cause you need maintain your db yourself. 
Does it really require jQuery for just using the $.get method?
The point of the video is not to explain classes and stuff, since there is already a lot of info on that. Rather I think that actually the reasons behind OOP is much more important than teaching people classes themselves.
Isn't it a lot of effort to create the models for each database table? Creating the annotations and basically mapping the fields to match the table schema? 
Here's a little class that does exactly this: https://github.com/jbroadway/urlify Hope it helps :)
Cool approach. Not everyone uses an export to deploy though.
so, we need to list of all possible char? sounds ineffective 
thank you, im thinking to make a mager system so each owner can manage own pages, do you like as cms ? (OC as start project, still need a lot)
lol nice try bud. Managers are the ones that learn languages, experiment with new technologies and tell the people below them what is going to be used. You don't just sub out learning a language to imaginary people who work below you. How else are you suppose to evaluate how good they do. Not to mention you need at least 2 people who know the language if you want to be able to do code reviews. And if you have any kind of single page application (which I would say most websites will be by the end of 2017) then you will need javascript. You're completely sleeping on language because you can't understand it. That's the mark of a bad developer. 
Not to pick on Albert too badly, I hope, but it is things like this that fuel the perception PHP is a joke language that is often seen as the blind leading the blind. Too many PHP devs are willing to leap right to brute forcing their way through problems, instead of looking for the actual solution, and it makes it almost impossible to find out if there is a real answer sometimes. If this was stack overflow this would be the top answer with 5 "OMG Thank you!" comments. And don't get me wrong, I've been doing php a long long time and I don't know the answer either, but I suspect there's a better way. Even if not, this isn't a realistic solution. I know it comes from a place of trying to help, but still.
thanks!
Thanks mate ;)
I'd suggest adding FK constraints to your SQL. The number of tables and interconnnections is already big and surely will grow in the future.
Who said I don't learn new stuff? How do you know what my workflow is? Code reviews are a huge part of my team's workflow, who says we don't evaluate each other? Who said I never work in Javascript? You really seem to think you know a lot about nothing. You make a lot of assumptions about people you don't know. Anyhow this conversation has turned into a complete judgement of my character, and not a discussion of languages, so it's not worth my time and effort arguing with people with an agenda.
What is the rationale for needing to remove readme's and tests? They aren't taking up much space. 
It's not really about space...most PHP files are pretty small (relatively) to begin with. It's more about creating a version of the code that doesn't contain anything that doesn't need to be deployed. Your unit tests don't need to be in production, just your code. Additionally, if you're not protecting your .git directory, you could be [leaving potentially harmful information out in public](http://stackoverflow.com/questions/7284711/modifying-apache-to-prevent-public-accessibility-of-git-folder) so anyone could view it. It can be used to remove any file, not just those provided in the example. It could also be useful to remove things like development configuration files that could contain sensitive credentials. The less code that can live out in production the better.
thank you, i was using a very old version of scripts and query, i already rewrite all with mysqli* functions :P thx
yes, this can be done of course! thanks
Another POV: If you keep all UTF-8 chars, replace spaces with "-", and remove all forbidden URL chars (google), you'll get UTF-8 urls. They work in all browsers and Google understands them. Edit: "work" means that they're silently converted to/from urlencoding
Nah more likely it was named like that to reduce hash collisions. 
I would agree that taking the easy way out is not the correct thing to do. If that doesn't matter for OP's needs, then the solution is to use str_replace (note I'm not suggesting the case insensitive version) and then use two parallel arrays mapping Unicode to the closest ascii match. However, I would argue that if you're slugs have Unicode in them, then it's there for a reason. Changing Ã¦ to ae (and/or other characters) might change the meaning in subtle (and possibly offensive ways). Granted, I only speak/understand English, so maybe I'm misinformed - I just prefer to air on the side of caution, and try to pick the assumption with the fewest consequences/side effects in these cases. As others, including myself, have pointed out, there are ways to work with Unicode that will work with Google and web browsers. Just be sure your database connection/database/tables/columns are all utf-8 or you'll have a bad time.
I wish PHP had good GUI bindings. The ncurses one are quite bad, basically just a copy of the C API. Same for GTK. I am in no way saying that PHP should be used to build any real GUI applications, the lack of threading would become an issue in responsiveness fairly quickly anyway, but small tools are perfectly within PHP's capabilities.
 '/[^\pL\pN]/u' Replaces everything not a letter or a number. More: http://php.net/manual/de/regexp.reference.unicode.php
For web developers wanting to target mobile devices we already have Cordova which works fairly well for javascript. PHP would be nicer if only for the amount of functions and libs bundled in the core. It would probably easy to make it work as well, Cordova is just a Webview running the js, we could do the same with php by starting it with php -S in the background. But I digress, I fully agree with you, PHP it isn't the best tool for the job.
I have seen better.
The Slugify PHP library handles transliterating non-ASCII characters into their URL-safe ASCII counterparts: https://github.com/cocur/slugify/
Set error handler doesn't let you handle E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING... /u/bloomingtontutors gave the right answer
The bank doesn't consider the deposits I give it based on my work in PHP obsolete. kthx!
Nice try. www-data or whatever user is rarely in the sudoers list. 
Oh man.. after 9 years of PHP development, so did I! Thank you man! This is going to be tested right on tomorrow! :) 
Are you finished? 
Those are the default values in case $error == NULL.
As long as you use positive equality checks, no unwanted IP should be able to get display errors turned on by accident, unless intentionally set. And for whereever else people might enable displaying errors, chances are that that's fine too (e.g. home IP addresses if one of the colleagues are working from home). But yes, tests are never a bad thing, and even with tests this is definitely worth it to make discovering bugs easier.
Which aren't used anywhere? Unless I'm missing something?
Yeah, never add a non-human to sudoers. Ideally limit what commands they can run too. If your users just need to restart some services, leave it at that.
Actually you are correct. I was using them for something else, then never deleted them.
I think the implication is that someone might turn it on in the settings (misconfiguration) or in a random file used sitewide. You'd never know until a customer saw it.
Why not just use something like Sentry?
That's been a pet peeve of mine recently regarding Laravel and other random programming things I look at. Too many times I am finding information that should have been a 2 second skim or 2 paragraphs of information inexplicably wrapped in the form of a 15 minute video filled with unreadable/unselectable IDE text, umms, and please subscribes, and all of that in slow motion.
He's right though...
And idgaf 
They are a compliment to each other. error_get_last() only provides the final error but even then still misses some fatals. set_error_handler()/set_exception_handler() will pick up all the notices, warnings, and non-fatal errors that may arise that you want to know about but can't let hit the client.
I really like this idea but there is quite a bit to be done before I would even come close to feeling confident to use it. Unit tests for one and most importantly. I would also look at reworking it into a symfony console application perhaps or at least utilize some of the libraries like the Symfony Filesystem library. In the PackageConfiguration class, I would make those properties private instead of public and set their initial values in a constructor method instead of on the property.
In a docblock, how do I @param either an unlimited amount of arguments (as strings) or an array of strings. something(['hi', 'hello', 'kia ora']) or something('hi', 'hello', 'kia ora') /** * @param string|array ...$argument */ function something() { $greetings = func_get_args() .... ??? 
Someone quietly changing the config on your production app is a big enough problem itself though, no? 
Have a look at https://github.com/Behat/Transliterator . Earlier I have used this from doctrine extensions https://github.com/Atlantic18/DoctrineExtensions
For greenfield you can just create the object/annotations and let doctrine work out the rest. It pays to check the generated sql, obviously, but vastly easier going forward to use diff/migrations than manage both sql and the umpteen queries/objects that map to them. If your db already exists, then it's still worth it just for crud. The only time I would advise against is if your db is in such a mess that it's excruciatingly painful to model. It's a learning curve, but you won't regret it. You can use the DBAL or even grab the (almost) raw PDO object whenever you want. So you can use as much or as little as you feel comfortable with. 
i add a "show grid" button and if you press ALT you can click and drag elements to move it
Here is a simple Node solution for LiveReload: https://github.com/dmitriz/gulp-automation
I'm not familiar with Eloquent, but doctrine makes things easier. I don't really care if it's just one table, the fact I can define everything in an object and then let Doctrine (mostly) manage things behind the scenes is good. It's *less complicated*, it doesn't require more explanation. I'm honestly not even sure why you would need to explain composer.json entries. I've actually found the opposite. When the project is large and complicated (I've only dealt with legacy at this scale so far) then doctrine becomes hard. There are usually flaws in the relations/schema that make you bend over backwards and do things doctrine struggles with.
I'm still not sure I grasp how it benefits anything. My background is more CodeIgnitor and then Laravel so I am very used to ActiveRecord. If I want to add a blog post that belongs to a user, I would do this: $article = new Article; $article-&gt;content = "usdhdhdusjebsjd"; $user-&gt;save($article); How would this work in Doctrine? Also in Eloquent I didn't have to add any field annotations. So it literally takes like 30 seconds to prep for that code above. 
Check https://github.com/composer/composer/issues/1750 to get some ideas. Space (at least on the hard drive) is none of them.
Thanks for this.. I will just make some comparisons to Eloquent, as that is all I'm used to using.. - Eloquent has caching of results for a set time period - It also has logging of queries and execution time I think - I believe the query builders are comparible. I have used Doctrine DBAL and they are similar. I find Eloquent easier and more fluent, but they seem to achieve the same thing. - I can't comment on DQL, have never used it - Eloquent has the ability to do raw queries, which I have indeed had to use a few times - Eloquent has migrations and seeding however I have no idea how this compares to Doctrine. So I'm still a bit stuck as to why I'd choose a Data Mapper ORM over Active Record :( Or am I mixing things up? 
&gt; So I'm still a bit stuck as to why I'd choose a Data Mapper ORM over Active Record :( Separation of concerns I guess. I'm not going to claim expertise here, but to me it's about a layer between the db and the objects. With a mapper this is quite clear: you have a normal PHP object and a data mapper that populates it from the db layer. With an active record your Article object is a full on database interaction. Another example of the mapper pattern might be with an API returning some JSON objects. At first it seems a good idea to just serialize your ORM entities, but the deeper you go down that hole the more difficult it becomes, and you realize your API output is different to your SQL structure, so you create a mapper to transform one to the other. Just another layer of separation. E: btw I didn't realise we were discussing DM vs AR, I prefer DM, but ORM is the main point.
Eloquent is Laravel's active record implementation. There would be some who would consider it's approach primitive compared to a full blown datamapper implementation like Doctrine. Sometimes even things like eloquent are overkill and all you need is a simple query builder... or directly going to PDO... the point is, it depends. And making broad sweeping statements is always universally a bad idea (see what I did there? :P) So Doctrine is *always* easier you say? For one table it's easier to write entities, repositories, mappers, wire everything with configuration etc.. drag in the cognitive load of annotations, knowledge of doctrine *as a whole* (suddenly a knowledge prerequisite on your project) for what? something which could have easily been achieved in a couple of classes and a handful of lines of very understandable code? It is relatively easy to go from simplistic to complex with respect to abstraction. Going the other way *tends* to be more difficult. Rules of thumb of course, and you learn shortcuts and get gut feels about when it is appropriate to work in a particular way... But the point is making sweeping statements about how, *regardless* of the scope of the project, you should just reach for doctrine when given a choice is a woefully one dimensional way at looking at things. Why would you have to look at the composer.json? typically that's where i start. "This project uses these things". Developer unfamiliar with doctrine suddenly has a huge up hill battle to learn the thing. For a complex project with multiple engineers working with a non-trivial set of business rules? Totally worth their while doing so. For something that has a half a dozen database tables and very simple business rules? Learning doctrine is going to be orders of magnitude more burdensome than learning the entire rest of the system. The point is, while it is entirely true that you can prematurely optimise, and you can make poor choices with respect to what matters in terms of execution overhead... and whilst you *should* rely on work which has come before you and not reinvent wheels...(I agree with all of these points, this isn't in question)... it is **equally** important to consider that premature **abstraction**, or perhaps over abstraction, is a bad thing. Simple projects tend to work well with simple abstraction. Complex problems tend to require more sophisticated abstraction. A failure to recognise this turns your Friday afternoon project idea into a 3 week exercise in building a cathedral to abstraction which works just as well as the thing you could have built in a Friday afternoon... and the Friday afternoon special would have been less complex and far easier to wrap your brain around. 
Already did. (Mentioned it in most of my other comments in this thread, but thanks none the less.) :)
Interesting but the code could be cleaned up quite a bit too. Too many spots where a new line would make the flow easier to read
&gt; On a related note, is there any plan / RFC for native multi-threading support in PHP 7? [To quote Rasmus](https://bugs.php.net/bug.php?id=46919), "This is not going to happen in core". &gt; PHP has come a long way from being used to serve simple web pages as an Apache mod. Yes, it has. The modern Zend engine is much more suitable for a diverse range of things, however, I'm afraid that PHP is much more than the Zend engine. None of the extensions bundled with PHP, or available via PECL are intended for anything other than short lived scripts, the authors of extensions don't give much thought to how they use memory (because they will be executing for such a short amount of time) ... these are real problems for long running programs before the introduction of threads. For the moment, pthreads is the only thing that gives you language level support for multi-threading. I'm not sure why you have a poor opinion of it, happy to discuss that. It's not likely to make it into core, because I can't see myself pushing for that. You might be waiting a very long time for someone to write another implementation of threading for PHP :)
It provides quick way to test some piece of PHP code and see its output. You need to download it and run locally. Other than a way to test PHP code, you can also use it to run phpunit and simpletest tests as well as check your code's coding conventions through PHP Code_Sniffer (PSR2) and ability to save snippets; all inside browser (Phexecute). Normally to test some code, you create some new file, put it in your web root folder, open it up in browser and then see its output which is tedious. With this tool, you don't need to do that, you can test php code directly inside it with additional goodies mentioned above. Downloading it and using it will give the better idea of course.
Sorry, I don't think you are quite following what I'm saying. Yes yes, learning curve. Great. Totally great. I am all for these things. But it seems to me that you are saying that you should ALWAYS reach for doctrine *regardless* of how sophisticated your needs are, because it will ALWAYS be easier (once you overcome the learning curve). If this isn't what you are saying then I'm sorry, but if it is, then it is incorrect. I'm talking about simple projects. Hell, even intermediate or highly complex projects can get away with active record implementations, or even less in a lot of cases. You don't *need* to reach for something like Doctrine, nor is it necessarily the right choice for every project (or even the majority of projects). And even if you already know how to use it, it doesn't mean that it is a golden hammer you should swing at everything that looks like a nail. &gt; You code a class with annotations, I want to talk about annotations for a second. Annotations are not part of the language, and the hack that implements them (yes, it's a hack..) adds cognitive overhead to understanding what you are building. This tradeoff is totally acceptable in some cases, but certainly not all cases. Let me give you an example: I use them in a project I'm currently working on, and every developer I have brought on board to date who has not been exposed to them does a double take over them. It *unquestionably* adds a burden to their understanding of the system. They of course overcome it in time and with training, and we are fairly confident that using them is the right choice for a number of reasons... but we've unquestionably already added overhead to the comprehension of the system. If the system was much simpler than it is then it may not have been prudent to select this approach. There are tradeoffs with every single choice you make. &gt; This is just learning curve. It's far, far easier to maintain, you just need to put in the effort initially. My point is, it is not *necessarily* far, far easier to maintain. It depends on the scope of the project. A Todo app for example does *not* need doctrine - nor will a todo app using doctrine be any easier to understand, maintain or be objectively better than a todo app using PDO. In fact the point at which the abstraction tradeoff cuts over from "making life easier" to "making life harder" in this case is probably around the time that you go beyond a simple query builder. &gt; Learning curve again, sorry, if you don't want to learn/teach then just stagnate. Please don't make this about learning and teaching. You are taking what I think is a fairly rational position and making the claim that I don't want to learn, and this isn't the case at all - I don't think I have implied that this is my position and suggesting that it represents my position is rude. The point I am trying to make is Doctrine is not the right choice in every case, and probably isn't the right choice in the majority of cases, whether you know how to use it or not (in fact, knowledge of Doctrine, or absence of knowledge of Doctrine doesn't determine whether using Doctrine is the right choice for a given project). There are cases where it excels, and it should be used in those cases... but those cases are not, as you implied in a previous post, every time you start a brand new project from scratch. You **have** to consider the scope of the project. &gt; Again, learning curve. I don't deny there is one, and I don't deny it's easier (initially) to just hack out some code and make stuff work. I'm not talking about "hacking out some code to make stuff work". I'm talking about writing clean, comprehensible, maintainable, testable code using less abstraction (and likely less code) than doctrine requires you to use. You seem to be conflating not using doctrine with hacking something out quickly to make it work. That isn't at all what I am saying. It isn't enough to know a thing. Knowing when it is appropriate to use that thing or chose a different technology is far more important. The whole take away is... use Doctrine when it is appropriate to do so. Not every time just because it happened to work on some other project. 
I'm sorry to say this, but that's a poor question. You'll get fanboy responses selling you their pet framework &amp; little that applies well to the project you're working on.
For jumping out of nested loops you can use `break n;` where _n_ is the number of loops you want to break out of.
What is currently the best resource to learn more advanced PHP concepts like namespacing, autoloading, dependency injection, traits and more? I have about 3 years of experience developing Drupal 7 projects and those concepts aren't really needed in Drupal 7, but I'm currently trying to learn Laravel 5 and I feel like I miss the more advanced PHP/OOP concepts needed for understanding Laravel. I once learnt most OOP concepts because I have a degree in CS and used Java for very small projects, but doing only Drupal development for so long makes me feel like I forgot it all.
&gt; you can use `break n`; Trivia fact: before 5.4 , you could even do dynamic breaks with `break $n`. Now `n` has to be a constant.
What I end up doing is using SQLite. I set up the database how I need it, then create a clean copy of it as a sort of snapshot. Then whenever I need a clean database, I replace the one I'm using with the snapshot.
&gt; I'm from a school of thought where gotos are never acceptable. &gt; However, my new gig has is full of reviewers that don't feel the same way and kick it back for too many nested if(), partly because they have an 80 char line limit (due to the side by side diff tools), both of which are infuriating. A person with absolute rules infuriated by other peoples' absolute rules. A learning opportunity?
I would take a look at how https://github.com/Sybio/GifFrameExtractor is doing it. Specifically https://github.com/Sybio/GifFrameExtractor/blob/master/src/GifFrameExtractor/GifFrameExtractor.php#L388 and the caller of that method.
Sorry, fixed.
Downvoted because the article is sadly lacking in information on anything other than the performance improvements and makes it look like there's been barely any changes in PHP 7 other than that. While notable, they are hardly the most notable change in PHP for developers. There's so much more coming in PHP 7 than just the performance improvements.
At my company we are using Drupal for CMS-type projects, and Symfony 2 for web apps. They're both great tools and enable us to produce stuff quickly; however, there is by necessity some investment in time required to learn any framework.
You'll need to read the GIF yourself. http://www.codediesel.com/php/unpacking-binary-data/
Why not just upgrade to DigitalOcean? For $5 a month you get a droplet that you have complete control over and can install whatever extensions you want. I mean really, this is like the price of a decent cup of coffee, and while the coffee is gone in an hour, the droplet lasts a month.
Faker is significantly more mature and feature rich right now, but that doesn't mean this one doesn't have potential. We'll see where the author takes it, I guess.
I use mailcatcher: https://github.com/sj26/mailcatcher It's a Ruby app. I would switch to a PHP port (fork, copy, rip off) if it existed. Your example doesn't seem to be it? *In fact your blog mentions it at the end*
https://github.com/mailhog/MailHog - Single executable, no installation, no additional dependencies.
Nice [reading](https://github.com/igorw/retry/issues/3) material.
That doesn't sound horrifying at all.
The GCE block is it! Good explanation!
I know a guy who recently ran into a weird bug that was caused by a single instead of a double colon, so Foo:bar() Instead of Foo::bar() Turns out bar() was also a global function, and "Foo:" was acting as a goto label so php happily ignored it with no warnings. 
Could you provide an example where goto is useful in these cases? I've not seen an instance in PHP yet where there wasn't a better way.
Lack of unit tests is the only reason I see that I wouldn't use it. I just pointed out a couple of other things I thought could change as well. You jumped to the wrong conclusion without really having any understanding of what I was trying to say.
Hi. Many things have been ported from Guava to precore, any help is appreciated. https://github.com/szjani/precore
If you're going to use mailcatcher, be mindful of this issue: https://github.com/puphpet/puphpet/issues/932#issuecomment-51086541
That is what I'm saying, perhaps I'm wrong, but you aren't convincing me of that :P Most of what you've written has to do with learning curve again, so I'll leave that. Annotations. I get they aren't a language feature, and I get a lot of people feel dirty using them, but they are a pattern that works, and they are features in other languages. Having the routing, or validation available in the code right above the property/method I'm working on is awesome, and I'd need good reason to abandon this. 
Along with the books that /u/jtremino linked, [PHP: The Right Way](http://www.phptherightway.com/#namespaces) is a tremendous resource to look at for both introductions to resources and additional links for more in-depth reading.
Micro-frameworks are a great way to write RESTful APIs. Some of the more popular ones are [Silex](http://silex.sensiolabs.org/), [Slim](http://www.slimframework.com/), and [Lumen](http://lumen.laravel.com/). If you would like to eschew frameworks completely, a router will accomplish the routing functionality you're looking for. Popular ones include [Route](https://github.com/thephpleague/route) (which uses /u/nikic's [FastRoute](https://github.com/nikic/FastRoute)) and [Aura.Router](https://github.com/auraphp/Aura.Router).
meh. maybe I didn't make my thoughts clear enough. No tests at all is a deal breaker, I wouldn't use it without any tests. I don't know what it could potentially do. That doesn't mean I don't see the potential in it though. Good encapsulation is also extremely important and public properties is very disconcerting to me. The third, about using the Symfony Filesystem library or turning it into a symfony console app is just frosting, it would be nicer I think but not necessary.
You're still missing the point, entirely.. and now you're rudely harping on about "learning curve" as if I am somehow reluctant to learn things. This is absolutely not the case. I've not indicated once that I am reluctant to learn things. I am talking about a reluctance to use things that I may already know if it isn't appropriate to use them. Just because you know a thing does not mean it is appropriate for every project. Or even the majority of projects. The point about annotations isn't whether using them is dirty or not. The point is whether the objective, measurable decrease in project comprehensibility is worth trading off for the benefits they bring. In many cases the answer is "it is", but there are also other cases where there answer is going to be "no way". To state that they should be used everywhere, without consideration for the **costs** associated with taking that decision is to take a simplistic and potentially negligent view. If your project is going to benefit from the additional abstraction, then by all means, use it. Making claims like "for new projects you should always use doctrine" without consideration for the scope of the project suggests a lack of problem solving maturity, and a tendency to over engineer things. Sometimes (most of the time even), less is more. 
While testing your entire project end-to-end is important, I personally prefer to write unit tests that don't touch or need the database. This is difficult if you're using a framework that has a lot of static function calls but that's another topic. Basically my application code breaks out data gathering into separate functions so I can mock them out in the unit tests, leaving pure business logic to be tested. For testing with database, I consider those integration tests. 
I've got nothing against Lumen, but it kind of irks me that people are already lumping it in as one of the "more popular microframeworks" when it's just barely been released...
Great video, thanks!
thanks
I like videos like this. Programmers are notorious for struggling with something &gt; learning it &gt; implementing it &gt; assuming the next guy also knows it.
You're within your rights to not "use a framework," but for the love of all that is good and holy in this world, **don't reinvent the wheel from scratch needlessly**. If someone has built a thing as a library, and that library is well documented, well tested, and well used, try out that library first. Packagist &amp; composer make this *dead simple*. Don't want to use someone else's front controller &amp; router? There are lots of options that are unopinionated and can fit the job. For example, I found [FastRoute](https://github.com/nikic/FastRoute), [Aura](http://auraphp.com/) Web &amp; Session, and the [Auryn](https://github.com/rdlowrey/Auryn) DI container to fit my workflow and style way, way better than the tools Silex provided. Don't want to go the whole hog on ORM? Doctrine DBAL is hella useful. Individual components and small libraries can also be also way, way easier to understand, and are often not subject to deep levels of magic that some frameworks are known for. I weep for the poor soul just coming back to PHP after all these years that decides to unwind Symfony's HttpKernel. It's not magic, it's just a huge set of code to try to get your head around. e: Also, because nobody's pointed it out yet, and you're returning to PHP, you should go read http://www.phptherightway.com/ for an overview of modern practices.
I've read about using all of these, but haven't tried them yet. This is a great resource for starting!
Including a 3rd party lib that supports mysql and mysqli doesn't mean that you use the legacy mysql API... You gave a link to one of the drivers included in CodeIgniter, but the project uses mysqli.
Sorry, I'm not directing that at you, as you said you need to train new hires etc. You keep saying Doctrine makes things harder. Either for you or your developers, it doesn't matter. For me it makes things easier. So I can only assume there is a learning curve issue. **To sum up** I would recommend against writing raw sql and recommend using a vendor supplied ORM. If you don't already have a preference then I would recommend Doctrine as that ORM because it's mature, well supported, stand alone and comes bundled with popular frameworks. The only argument I hear against this is learning curve. But I disagree that this should be a barrier as you will generally have a code base that will objectively benefit from an ORM, so if you just learn it once you can apply it everywhere. I think we probably just agree to disagree.
It can be useful when you want to keep a single exit point in a function, eg. to do some stuff before returning, but you have multiple points in your code where you would like to return. The alternative would be to use control structures so that the execution point "falls" down to the single return statement, but this can often leads to unwieldly code, difficult to read and bug-prone, if it is comprised of several levels of nesting. Likewise, you could want a single return point when errors come up; now you have the extra option of using a try/catch block, but this is much slower than a jump and not particularly good practice if exceptions are often raised (they should _not_ be used as a kind of semi-general purpose control structure). These usages are pretty common practice in C, and they apply to PHP for the same reasons. That being said, PHP relies far more often on global state, since it cannot as easily run amok as C thanks to the new execution context for each page generation. Hence, error handling is generally done another way, which leaves few use cases for legitimate gotos.
&gt; When the only tool you have is a hammer, everything looks like a nail doesn't it? You haven't made a single point about why the hammer is inappropriate, except to say it's a hammer. Perhaps it's not actually a hammer but a swiss army knife and you just can't get the attachments to open. You keep saying I don't understand, but you can't explain yourself. Everything you say is about doctrine being hard. Hard to comprehend annotations, hard to teach new devs ...
That is not a review. It's a table of contents with 1993's CSS slapped on top. [This](http://www.sitepoint.com/build-apis-wont-hate-review/) is a review.
Serious question: are there any mainstream PHP frameworks that are **not** free?
I think it would be worth to add paragraph about dealing with identifiers like column or even table names (where parameter binding is not a solution (thus mention whitelisting)). Good article otherwise.
Two issues with it: 1. It does things that don't belong in a fake data library, like JSON encoding and repetition. 2. Stringly-defined API: i.e. fake("surname") instead of surname().
Do they use rsync to push the code? &gt; man rsync | grep 'exclude=PATTERN' -A 8
This post *again*? I know it's a different site and everything but seriously this "best N frameworks of YYYY" comes up every couple of months...they rarely offer any valuable opinion, they just enumerate the first 15 hits they get for a google search on php frameworks and call it an article...
Make your API "secure by default", i.e. treat it as if all of it is fully public and rely on authentication and authorization via tokens for your security model. The session and cookies are a concern of your client and the API shouldn't be aware of them. The API should receive an authentication header or field with every request you send from the client. There are two approaches for that authentication header (or field): 1. Random tokens stored at the server. They link token with userId and their authorization level (say in an SQL table). 2. Bearer tokens store the userId and authorization level within the token itself (encrypted). The latter scales better with distributed architecture, but it's easier to mess up the encryption and open yourself to token forgery, so if not sure, go with the former. P.S.: If you need to know details about any of the above, ask me. **EDIT:** [Hmm...](https://i.imgflip.com/m0an5.jpg)
/r/PHP is not a support subreddit. Also.....your question is 'quite' broad. It's basically "how do I program"?
looking at the EasyDB public API I can't help but wondering the added value of the package over something like the [Aura.SQL v1](https://github.com/auraphp/Aura.Sql/tree/1.x) package which basically do the same with much more features ?
CMON man! Juss show me a basic online shopping cart and we guuci!
"broad"? The guy said XAMPP.
Yeah; unit tests should ignore the database. You should mock your database responses to see how the other methods deal with it. You might use phpunit to test the db, but they're not techically unit tests.
install magento or shopify or woocomerce etc ... dont even try to do this alone as you're showing with the question that you lack the knowledge you need to do it right. also xampp ... oh dear :)
There is also http://srazy.info/posledni-sobota/5418 which is in Prague, Czech Republic or other cities in Czech Republic every month.
It doesn't include Nette Framework http://doc.nette.org/en/ :-/ 
Wow thanks for the upvotes guys. This is probably the largest number of upvotes I ever got on this subreddit in my 3 years here! Amazing! I'll be sure to put out some more videos soon. Anything in particular you'd like to see ?
Don't be afraid to ask an idiot a question, folks.
&gt; choose witch module "which"
&gt; Last weekâ€™s announcement of Radar, an implementation of Action-Domain-Responder using PSR-7, was a *resounding success*. Congratulations, and I'd like to post my comment here. **EDIT:** My comment from a couple of minutes ago was a resounding success.
Thanks a lot for this. Really helpful. There are a couple of things that I'd like to see next. 1. Auto deploying - things like capistrano, deployer or whichever you are using (if any). 2. Debugging with xdebug (I know what it is, but to me print_r &amp; var_dump are a lot more useful than xdebug, so I'm pretty sure I'm missing something..) 3. Things like symfony blackfire profiler (if it's free?). I've heard a lot about this but no idea why I should be using it.. I can think of a lot more if needed :D
Have a look at [Koala framework's Composer extra assets](https://github.com/koala-framework/composer-extra-assets) This is a pretty cool package that allows you to add npm / bower dependencies in your composer.json extra section and have those installed in your project when you run "composer install/update". If you want your modules to be installed at the root of your project, be sure to use the ["expose-npm-packages" parameter](https://github.com/koala-framework/composer-extra-assets#npm-dependencies) Unlike https://github.com/francoispluchino/composer-asset-plugin, Composer-extra-assets relies on NPM and Bower. It can optionnally install NodeJS if NodeJS is not available on the computer, thanks to mouf/nodejs-installer. Disclaimer: I wrote "mouf/nodejs-installer" and contributed to "koala-framework/composer-extra-assets". Also, maybe you should rather use Bower dependencies than NPM dependencies since you are dealing with front-end libraries (NPM is usually used for back-end apps like Grunt or Gulp)
If this is your first time out of pure PHP, go with Laravel. Symphony has a much steeper learning curve. Also, the things you learn from Laravel will serve you well if you ever move on to Symphony.
Or don't use RDBMS at all. I've switched to MongoDB and Elasticsearch and couldn't be happier :D
Put on my 'watch later' list. I'll check it out later. Anyway, thanks for sharing!
Much obliged.
Which does not fit 99% of typical use-cases for websites.
Do it yourself bra!
You may wish to try a combination of [Aura.Input](https://github.com/auraphp/Aura.Input) for marshaling inputs, and [Aura.Html](https://github.com/auraphp/Aura.Html) for rendering forms.
The Symfony console component can be used stand alone: http://symfony.com/doc/current/components/console/introduction.html
What's good in PHP is also good in other OOP languages. PHP's OOP model is similar to Java and C#, and kind-of-but-not-quite like Python. Read about best practices, patterns and architecture in any language you can find. I've learned a great deal from Erlang, for example, and this helps even when I use PHP. A nice resource is infoq.com (skip all the presentations about Agile, Kanban and Scrum...).
Is it a framework, when your base code is already a framework?
Was looking around a bit more and found [Fuel](http://fuelphp.com/docs/classes/input.html) does something similar, feature wise this would be what a class like this would do. Think I'm just going to roll on my own as @relyon said and use fuel as a base.
There are a few inconsistencies between PHP and other OOP languages. To name a few: PHP has a handful of magic methods that they refer to as "overloading," but these don't overload in the traditional sense. They're more like interceptors. Also, PHP doesn't support type-hinting method returns. There are certainly others. Just some things that need to be considered when programming PHP that you don't deal with in other languages, and this book covers them.
You forgot 2. Use our products 3. Buy our consulting
This is an excellent point!
If you have another library (e.g. part of your framework) that you prefer to use, know how to use, and protects against SQL Injection, don't drop it for our library. Conversely, if you're one of the old fashioned devs who uses `mysql_query()` for everything because you don't want to make your code ugly via PDO, please do give `EasyDB` a shot. Ultimately, I'd like to see Injection get bumped off the next iteration of the OWASP Top 10.
Thanks for the input. I'm not bored, I just want to make sure that I'm using the right tool for the right job (and admittedly, I've worked on the same project for awhile). I'm a LOT better with SQL than the alternatives, and Postgres has always interested me, so maybe I'll take a look at that before I ramp up. Checking out that article now. 
I would hardly call `EasyDB` a product in an economic sense. We are not selling it, it's a project we shared with the community. Otherwise, it wouldn't be MIT licensed and sitting on Github for everyone to copy at their leisure. If you're upset that we're releasing a FLOSS library on Github, I'm sorry but we can't please everyone and you're going to have to be unhappy. Odds are, most of the regulars here in r/php can secure their apps without anything we open source, and especially without hiring consultants. This was written for programmers at large.
Right, internally that's what the `delete()`, `update()`, and `insert()` methods do in the class we wrote. I've updated the post to include your suggestion. Thanks :)
Seems like to me, and I've yet to use NoSQL, NoSQL would probably serve best as a cache backed by an RDBMS for actual data storage in most web-apps.
As in, a cache layer in between redis and mysql's cache? Because those two alone have always done it for me
Same. Monolog + HipChat = dev heaven.
i was meaning it's not 'definitive' in that it doesn't, in fact, list off other libraries, comparing pros/cons, doesn't deal with limits - I see people doing prepared statements, but then but then have "limit ${GET['limit']}" in their SQL sometimes. It wasn't *bad* at all, just that there are likely some edge cases that exist (maybe some weird char encoding issues on various combinations of drivers/php/db, etc) but yes, for most average use cases, prepared statements alone with significantly reduce exposure to SQL injection. I always shy away from absolutes. I tend to use ORMs which deal with SQL injection and also provide a lot of other convenience for 90%+ of my application needs. 
Okay, thanks for the feedback. :) &gt; I always shy away from absolutes. Generally, I do too, but being bold provokes challenges from hackers. Which, at least in the group of people I hang out with, provokes in-depth research and leads to either a better understanding of how something works, or a zero-day and maybe a conference talk. Either outcome is better for the community.
&gt; If you're upset that we're releasing a FLOSS library on Github, Not at all! I'm a firm believer in open-source. But this question this post poses is one that can be answered quite simply, without the need for a post at all, and so it appears the only reason the post exists is for self-promotion.
I always use http://php.net/manual/en/function.date-create-from-format.php. 
The rule of thumb is goto is OK as long as it is jumping forward the code. When you use goto to get to a previous part of the code, it is a loop, and an invitation to hell. It also means that if you are using goto and need to keep state somewhere so you are able to resume certain line of execution, then probably you're in need of functions or objects. 
You are in for a bumpy ride. I left for two years to do something a little different career wise that involved me walking on large steel tanks filled with rocket fuel and in or around hundreds of thousands of gallons of various other space age hydrocarbon based mixtures. Composer had just become a thing when I left, Propel ORM V1 was what I liked, and when I got back-- holy WTF. But, it is better now. With back end &amp; front end dependency managers, best yet version control, and build systems for both front and back end. And it all works really well. But, keep a pillow handy to cry into while you are ripped into the modern age of 21st century web dev...
THanks, i'll check out the ladder.
It's pretty useful for running tests, when your test suite takes a long time. Although it's much easier to just do a 'phpunit || notify-send "tests failed"'.
Hmm. I regularly see articles on the front page with a score of 0 and a ratio of &lt; 50%, I don't think I understand the point you're alluding to with "a concept known as the front page". I'm sorry you didn't like the article. What didn't you like and how could it be written better next time?
Of course I read it. I read it before I even began reading the comments. :3
http://www.mongodb-is-web-scale.com/ - for anyone who didn't catch the reference
And you thought that the crux of the article, "use prepared statements", was worth 40 something odd upvotes?
Why learn NoSQL when you can learn PostgreSQL's JSON type. It's just as fast and you already know 90% of the SQL that you need. Beyond that I use Redis occasionally. 
Hehe well, variety is the spice of life. I liked the article, it stresses a point (separate, don't just add escape chars) that more junior PHPers need to learn and presents it well.
If it leads to less insecure code being deployed in the world, and/or helps others learn better habits, it's worth a million upvotes as far as I'm concerned :3
Scores of text, little to no redeeming valuable, new info in this case 
yes that exactly the purpose of the "modules"! :-D but a lot to do...
Sure it's relational but, you are storing a JSON type. So your data inside the JSON can be as non-relational as you like. That means when you query your data no joins or work is needed by the database. if you build it right, your data can be returned with amazing speed. You can index by the keys in the JSON type, and even store your JSON as binary. I took a 300gb relational database that had 10-60 second user queries and made every use case query sub-second. PostgreSQL even uses "Toast" technology and compresses the data behind the scenes. That 300gb database only takes up 80gb now. Granted that this only happens when you have data that fits a JSON document store well. but when it does you get amazing results. It went over so well here that developers are starting to over-do it. Any new project databases start out as JSON document stores. Which doesn't bother me too much because you can build a SQL query to return the fields like normal SQL without the data being in the JSON format. 
On a seemingly related note, check here: https://github.com/unframed/JSONModel.php - pretty cool. I'm definitely interested in postgres but I cache like 85-90% of my RBDMS' contents in redis as it is. In the best interest of time, I'd be more likely to start up any new project with MySQL and then possibly come up with a strategy to migrate ALL databases, as opposed to having some projects with one rdbms, some with another, etc. 
Why type that? I'm sure everyone already knew it.
That ORM looks nice, but I can't imagine the performance can compete with a database that is doing simple (non-joined) indexed queries. If you are already putting that much of your database into Redis then I guess the database matters a lot less. I wish I could only work with one database. I get stuck working in everything from MS Access to Informix. Getting to work with MySQL or PostgreSQL always feels like a treat. I could see migrating from MySQL to PostgreSQL. The only gotcha I could see is that PostgreSQL adhere's to the SQL spec a lot closer than MySQL. Expect a few SQL errors as you learn what exactly this means. 
[Aura.Sql](https://github.com/auraphp/Aura.Sql) in various versions ([1.x](https://github.com/auraphp/Aura.Sql/tree/1.x), [2.x](https://github.com/auraphp/Aura.Sql/tree/2.x)) does all that already, and has a longer operational history.
I just wanted to make a jokeâ€¦ -ish. It was not intended as criticism of the content. I'm actually maintaining a not-really-legacy application right now, that used to have concatenated query strings until last week. So every bit of awareness of the problem is welcome.
Very very good post. I especially like that you're trying to tell people not to try to escape their own DB input. Unless you're an expert, like the authors of the PDO library and its drivers, you should not attempt it, and this is a "secret" that too many PHP folks are not in on. One little thing though, it's *ad nauseam*, not *ad nauseum*.
&gt; One little thing though, it's ad nauseam, not ad nauseum. Thanks. I normally rely on my browser's spell checker, which lacks both, and never thought to look up the correct spelling. I've corrected my little error. :)
Linux or Windows?
You're welcome. I hope it helps.
Here are some techniques you can use to reduce mistakes (or at least reduce the time it takes to discover them): * [Unit Testing with PHP Unit](https://www.sugaroutfitters.com/blog/unit-testing-with-sugarcrm-and-phpunit) * [Step-by-step debugging with xdebug and an IDE or debugging tool](https://jtreminio.com/2012/07/xdebug-and-you-why-you-should-be-using-a-real-debugger/) * [Yoda conditions](http://codingstyleguide.com/style/59/php-yoda-conditions) * [Rubber Ducking](http://en.wikipedia.org/wiki/Rubber_duck_debugging) 
Thanks, I already use xdebug can't live without it now. I'll look into the others!!
Ah, yeah, I should add [Rubber Ducking](http://en.wikipedia.org/wiki/Rubber_duck_debugging) to my list.
I'm looking through it right now and Aura.Sql looks okay. One thing potentially security-affecting that `EasyDB` does that Aura doesn't is prevent encoding attacks in case PDO falls back to emulated prepares by explicitly setting UTF8. This isn't enough of a big deal to drop Aura.Sql for EasyDB.
I appreciate that you liked this project enough to share it, but since the blog post explaining its utility and introducing it to the community is still on the front page, it does seem a bit redundant. (That's probably why everyone has been downvoting it, too.)
Anyway, i wish to see any profiler logs. Maybe there was something with I/O or database is a bottleneck. In my case PHP7 1.5 times faster than PHP5.6 (Symfony2 + Doctrine).
opcache enabled by default from 5.5 with pretty good defaults
i'm guessing it's tied specifically to mysql, so PDO's abstractions aren't really necessary.
some important questions you need to answer might be: - how important are the relational features to your app - will moving the schema to your code be beneficial
Why bother? mysql's fulltext blows ass noogies.
Nice, though if someone isn't tied to MySQL, Postgress is much better for full text searches.
he he good one..
So, this is the **third** major BC break in just little over a year :( Guzzle 4, 5 and 6 were all released within months of each other and they *all* broke BC pretty severely. I'm sure /u/michael_d has his reasons, but this makes relying on Guzzle for long-term, large scale production usage very difficult. Michael, at least schedule the next BC break to 2018 or something :) That said, Guzzle in general is a pretty great piece of software and I'm thankful for all your hard work.
Yes, it targets the Full-Text Search Functions of MySQL. Also I wanted to keep it as easy as possible. But I will think about an easy way to support it. :-)
When I was looking for learning something, There was a hype around the internet about the MongoDB, I don't believe that something could be magical and one fit for all solution. So I searched for different views about MongoDB and found this excellent article. This stopped me from spending time with mongoDB and I used that time to improve my mysql skills. Still I am not an enemy to NOSQL, I can't see a need of this kind of databases in my work as of now. When I need it I'll learn it. That's how we all learnt everything, right? 
It's a real pain-in-the-arse, the documentation isn't brilliant either :/
1. Sure, I'm just going to wrap an adapter class for every single class I use in other libraries. Easy-peasy. /s 2. The implications of frequent BC breaks are much deeper than having to upgrade or not having to upgrade. Resources on the internet to help with the library is going to be more divided and version specific. There will be compatibility issues between different projects. This is especially going to be true for this new Guzzle 6, and this is why: Guzzle 3 is under the Guzzle namespace, Guzzle 4 has a huge refactor but was placed under the GuzzleHttp namespace, Guzzle 5 stayed under the GuzzleHttp namespace, but the BC breaks weren't too big, but now we have huge BC breaks, but the namespace was kept.
&gt; If you wrap third party libraries in adapters, it's easier to update them when they change. So I should abstract away Guzzle which itself is an abstraction over PHP's networking features, which are in turn abstractions over low level networking in the kernel. Where do we stop? Where do we say, "you know what, I think we have abstracted enough"?
A simple answer I always give is: "If you are not 100% sure you NEED NoSQL you don't need it". Write speed is not a reason to use NoSQL vs a relational db. you can tweak Postgres to achive a comparable result. And if you use the memcached interface Mysql provides you can make writes super fast. http://dev.mysql.com/doc/refman/5.6/en/innodb-memcached.html
Any true dev will appreciate the use of rubber ducking
The docs need more love, I'm really struggling migrating my code, my subscribers, my tests to be compatible with this version. Reading the code is not helping much. I hope it will get better soon.
Sorry for my ignorance, but what is the purpose of such a tool?
Yeah, so? I'm asking him to slow down, not change his versioning scheme.
Your wares aren't that good and it comes off as arrogance when you keep advertising them everywhere. 1. It's hard to take seriously [a PDO decorator that also extends PDO](http://cdn.meme.am/instances/500x/62567741.jpg). That's an outright abuse of inheritance. 2. Encouraging poor practices like ConnectionLocator? Why? 3. It's 2015, can we specify the isolation level of our transactions already? Nested transactions? Savepoints? Why are people not familiar with SQL writing SQL libraries? 4. Only PDO supported. No other drivers. I'd take Doctrine's DBAL over this. And I don't even like Doctrine's DBAL.
haven't tested this but if it works the way its described its god-send to anyone working on payroll, time sheets etc 
That's precisely what you should do, instead of whining that the world should slow down for you.
Actually some of them take up a huge amount of space. On our project we've got a ton of composer packages being used. Without doing a cleanup, our vendor directory is about 90 megs. After a cleanup (removing the following "LICENSE", "README", "README.md", "README.txt", "test/", "tests/") we get it down to about 50 megs. That's a pretty sizeable chunk of space to free up when you're offering commercial software that your clients have to regularly update via ftp.
Suggestion: Only report on the core package. Otherwise you're going to end up with a lot of noise from poorly written extensions and plugins. For example, Wordpress. You have, as of writing, 12 posts in that subreddit for 'Wordpress', but they're all plugins. The core Wordpress package has no issues (right now, that anyone is aware of). Otherwise you're going to make that subreddit full of poorly written extensions to packages. Much more useful things would be Frameworks (More people are going to be impacted if there's a sec patch for Symphony or Yii or Laravel than Bo Bob's Crappy Wordpress Plugin) and [major packages from packagist](https://packagist.org/explore/popular) (that said, you can use tools like [SensioLabs Security Advisories Checker](https://security.sensiolabs.org/check) to do a quick check on your own composer.lock file). Otherwise anyone looking in that subreddit is going to drown in the noise.
Randomly clicked and ended up in this report: http://cxsecurity.com/issue/WLB-2015050146 Maybe I'm missing something, but the code in this report doesn't look like to contain SQL injection (assuming CPO_NEWS is OK). Is there any moderation on the vulnerabilities submitted to the list? Or can just anyone submit any bogus submissions?
This is just for the opening transaction. Because, after having checked the other transactions, they don't use mcrypt. I tried to disable opcache by curiosity and the response time don't differ too much. Around 5-8% slower, but comparable.
Filtering is made upstream, some parts of the filtering are automated (fetching rss vulns, tagging, naming the app) while others are made manually (e.g. to guess if the link is PHP related or not). Moderation can be made downstream via the 'Flag' button at the bottom although it's not yet taken into account. Most items with "RETIRED" or "DISPUTED" in the title won't be propagated. 
Thanks for the info. I guess there are vulnerability reporters who just run some automatic scans and if anything arises they flag it as a vulnerability without further investication. While it is a bigger problem the other way around (software vendor doesn't believe a vulnerability being a vulnerability), I think it is sort of a problem or at least annoyance if false reports are popping up. 
This seems like a fun plug in but I can't think of a use for it. 
You mean false reports like [this one](http://www.phpsecure.info/CVE-2014-0401.html) ?
Unfortunately, most 9.9999 times out of 10 it is a plugin that's at fault for security issues in things like WordPress. They can introduce things like SQL injections or XSS issues with inexperienced coders behind the keyboard. Maybe some way of being able to flag them with a flair to point them out.
With a quick look that looked more like a joke than a false report, but I mean primarily reports like I posted earlier (http://www.phpsecure.info/go/130641.html) and http://www.phpsecure.info/go/130217.html and such.
Just because you're writing an acceptance test, don't be afraid to directly interact with your code/database if you need to setup requirements or check that something has worked. Given the "logs" table is empty And I visit "/login" And I click "Login Now" Then the "logs" table should have 1 record 
So many things wrong with this article: 1. Using decade-old HTML. `&lt;tr align="left" valign="top"&gt;` seriously? 2. `connectToDB` is a horrible class name and has a lot of pointless code duplication. I suppose it's better than using a singleton. 3. No separation of concerns. There's one class file and everything else, PHP, HTML, and JS, is all crammed on the same page 4. The code formatting in general is pretty bad, a single space for indentation? Yikes. Yet another reprehensible "tutorial" from phpclasses. 
We have a bit of a language barrier thing going on here. It's **fine** to use type hints for all data, internal or external, that's not the problem. The problem is that sometimes in PHP we handle numeric types which PHP has no native type for, like arbitrary precision integers (typical for DB primary keys: 128-bit bigint numbers), or high-precision floats (higher than PHP's double precision floats). So: - We should **not** hint bigint etc. data as a PHP int or float, as it's not a PHP int or float, it has a wider range. - We should hint such data as a string and validate it separately as a string with a special numeric format. ------ P.S.: Ideally PHP should have arbitrary precision floats and ints to make this more natural... But we don't.
I definitely could've used this a couple of years ago. Good work. EDIT: I can see the generic namespace of Business causing issues. Consider florianv\Business? Though, it's a small enough library that it can be manually edited by whoever may use it.
Well, the gist of it is good. Title is a bit loud, but the content is sound. Also there actually are RFC's to fix the issues, just didn't make into 7.0 due to time constraints.
Lol. Fair enough.
I had no clue I needed this until I found it. Can't wait to use it! Nice job, OP
His type-hint examples aren't 100%, and I'm not quite sure if its the language barrier, but some statements seem flat-out wrong. He was also vehemently against adding scalar type-hints in their current form to PHP7.
&gt; Also there actually are RFC's to fix the issues, just didn't make into 7.0 due to time constraints. Isn't this behaviour classed as a bug? Why would we need an RFC?
Maybe another good sugestion is labeling with severity like: Minor Major Critical 
Very pertinent indeed. It can at least be applied to all cxsecurity posts from where this value can be pulled. I'll add this to my weekend's tasklist, big thanks for the input ! 
Payroll, metrics/SLA and response time, service desk etc.
If you revisit the threads, you will find myself in them also being quite vocal on the shortcomings of the current implementation and that I will add quite a lot of meddling and inconsistencies (I've been around since PHP 4.4.3 I believe, so I saw the whole magic quotes, old mysql ext, register_globals and a lot of other stuff), that I see will in years to come give me quite a headache to fix when clients will come in with projects to support. But, what's done is done. But due to fact that Bigint RFC was not implemented and some obvious problems that are not that difficult to hit (never underestimate the incompetence of people doing the bulk of development on PHP - I just had a fresh reminder of that that resulted in a month of fixing all the errors for a project - a single page load of the main page of the project generated 356Kb of error messages in the logs). I myself have had a few issues with the sizes of ints between Win and *nix on 5.3-5.5 versions, now the problem is just postponed till you hit the limit of 64 bit signed int. And these days, with the amount of data and the sizes of the databases, it's not that big of a stretch... It's not black and white problem. That's also why in my first comment I wrote that this is "A word of caution", not simply that author is right 100%. But I do agree with him for the most part.
&gt; Where do we stop? Where do we say, "you know what, I think we have abstracted enough"? I've asked (and still ask) myself this question all the time. Where do you stop?
I think middleware in the sense you're referring to is basically just a hook into the request processing for Laravel 5. There are advantages to having this option and many developers use the middleware concept, even if it's different from this specific implementation. There is no reason you have to use middleware in Laravel 5. If it's unintuitive and you have a different way you like to structure your development/design flow for certain things, just code it up in your preferred way. On Laravel, just like any decent framework, there's more than one way to structure and develop your application flow.
Thank you.
I haven't used PHP in quite a while, so this may not be the best solution, but could perhaps a [switch](http://php.net/manual/en/control-structures.switch.php) be what you're looking for? 
Whoa. This condenses the logic even more. Thank you.
Seems like http://en.wikipedia.org/wiki/Decorator_pattern and http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern.. 
Let's say you have a portal with a dozen or so special routes for users with an access level of 'Student'. Should the if($access_level == 'Student') check on those special routes be done in the routes file itself? Or maybe the controller that displays those routes should handle it? You could also setup a middleware that does that check and attach it to the route or controller. Either way, you're making compromises on the single class responsibility right?
Ever notice that Drupal 7 uses switch statements instead of if's? Even when it's only checking one condition. What's the deal with that? Is switch faster than if or something? 
With multiple conditions / multiple variables I prefer switch statements instead of large if/else if's if ($a ==1) { // 1 } else if ($b == 1 &amp;&amp; $c ==3) { // 2 } else { // 3 } vs switch(true) { case $a == 1: // 1 break; case $b == 1 &amp;&amp; $c ==3: // 2 break; default: // 3 break; }
assuming this lives on a user's dashboard, you could get the current user's information from the session, get their interests, then do something like select whatever_fields from users u left join interests i on i.user_id = u.id where i.id in (1,2,3...) -- user's interests here having count(i.id) &gt; 3 -- at least 3 interests matching 
Even after all those years, PHP keeps me amazed (not everyday for the good, though). Never saw that before, thank you for sharing! http://phpswitch.com/ https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L554 (its an expression, fkme)
You need to install mysqli http://stackoverflow.com/questions/666811/fatal-error-class-mysqli-not-found
Isn't that potentially a whole Lotta data to be storing in session??
Probably what Drupal considers "open for extension" - if they ever add a new $op, they can just add a switch case more easily than another if comparison I guess?
Because it is written so in the accepted type hint RFC: https://wiki.php.net/rfc/scalar_type_hints_v5 &gt;**Nullable And Union Types** &gt; &gt;Interest has been expressed in a system to allow for union-types: int|float or nullable-types: int?. &gt; &gt;&gt;Current Position &gt;&gt; &gt;&gt;As both of these affect more than just scalar typing, both are considered outside of scope for this proposal.
Oh, I can see the confusion. When it says "nullable type" this refers to the syntax `int?` or `int|null` in particular. I.e. in a form that can be used a) in return types and b) without making the argument optional. But the normal `int $a = null` syntax is supported for scalar types the same as for all other types.
I don't think stability is the main goal of a first alpha release... but I get your point :)
Yeah I understand this. But Laravel4 had concept of filters instead, you could define a filter 'before' application launches and 'after' application finished and make it either global or apply it only on group of routes. For me it seems to do the same thing middleware do, but with worser syntax. And about compromises, its true and I have this problem everyday! I think that whole modern programming is an art of dealing with compromises :) Thanks for answers, see you!
Indeed! I will take a look around chain of responsibility pattern pros, cons and purposes tommorow, because now my bed calls me so much :) Thank you!
Well lucky me! Since JavaScript evolved a lot, too, I guess I'm ready. Guess you just have to catch up with all the new features implemented. 
I just checked the Drupal core modules and found 5,244 occurrences of 'if', so I have no idea what you are talking about when you say 'never use it at all'. 
243 usages of 'switch'. I think what you are looking at is merely a code example. Meaning code inside of &lt;module&gt;.api.php is not being called, they are examples of how it could be used, and in this case, where an $op is normally only of a few operations, it's just showing a switch has it's a simple comparison. 
What's more interesting is the "final" release date of Nov 12 2015. https://wiki.php.net/todo/php70#timetable I'm curious how long after the final release would most people wait before using it in a production environment? Unless there's something I just can't live without, I'll probably wait at least 6-8 months.
&gt; I'm curious how long after the final release would most people wait before using it in a production environment? The killer won't be the release date itself, it's when libraries and extensions are compatible, or certified so anyway.
Yep! Although nothing beats the hell out of code like public availability. Hence, alpha :P
Very intriguing. I hope to do some transition on this next summer, and be fully transitioned the summer after that. It's going to be sweet :)
I bet we won't see a lot of major adoption until it's either available for the common package managers (distro specific, cPanel's EasyApache, etc.) or the default version installed by your distro of choice.
so this is will all the features of php7 but without the test and bug checks? in short not production ready? 
you do when you want to make your job more exciting
github language statistics says this project is about 40% *Cobol*. That's a mistake, right?
Could be, but i assumed they were suggesting that the June 11 date be pushed back if it wasn't stable...
my aws linux amis are still on 5.3.... so its going to be a long time before php7 rolls around. now, you *could* say, just upgrade manually, but the reality is if you do that there's a good chance your devops and sysadmin will hold you down and stab you in the eyes with dry erase markers.
[myclabs/php-enum](https://github.com/myclabs/php-enum) supports 5.3 and the code example you've shown (you can add any extra method to your enum).
Why haven't they upgraded to the latest LTS which has 5.5?
I don't see how what I said constitutes as an attack. It was pretty much fact. In his type hint examples he doesn't even turn on strict typing, he's using loose typing then acting as if it's strict. Sure you may have issues if you blindly copy PHPDoc, that's why you should RTFM and find out how it works in the first place 
The problem of int range is there without strict mode as well. Why do you expect people to RTFM if you don't ;)
Ah, I see. I was thinking it might be usefull for tricking hackers. You could set up your site to look like it has weaknesses, and outputting bogus data, might try to implement this is a project :)
I agree, I did forget about that. It's a sad situation really because if I remember correctly BigInts was almost in as an RFC. But surely right now you could use the GMP extension?
I don't even.
They're afraid of updating when everything has been uploaded over FTP without any testing other than straight on the server. Given that that's how everything was developed here, it's more understandable why they'd be hesitant. At least it won't be like that going forward (Vagrant, woo!).
http://php.net/manual/en/function.ini-get.php
...and?
Doesn't happen to me on 5.1 - 5.6: http://3v4l.org/nrFg9
Well, http_build_query($params, ini_get('arg_separator.output')); should give you the default separator. But I think you uncovered a bug: perhaps the http_build_query implementation overwrites the global setting. 
Well yeah, that makes sense. You're explicitly setting $arg_separator to null. So to answer your question in the OP: you can't set the 4th parameter without setting the 2nd and 3rd as well. I *think* I remember something about being able to do this in PHP7. Edit: [found it](https://wiki.php.net/rfc/skipparams), but the RFC was declined.
Yeah, I tried here: http://3v4l.org/qFgA8 - HHVM doesn't appear to produce this bug, but its there in php. I guess the fallback is, as suggested, to use ini_get to populate the third param if you want to leave it as-is, rather than supply null.
bah! but guzzle has a line that does this: $value = http_build_query($value, null, null, PHP_QUERY_RFC3986); which just... doesn't work in that case
[Fixed 17 hours ago](https://github.com/guzzle/guzzle/commit/6f3db1618ef286e993db255b7a734f5cadb1f1a8) :) so if you update guzzle you should be fine.
Do we yet have a guide/information on unicode in php7? I can't find anything obvious via Google, but I admit I'm not familiar with the ecosystem. 
Hi porkslow, Sentry creator here. Just wanted to let you know we are moving to new one off pricing for sentinel that includes 1 year support with all add ons soon. Out of curiosity what scares you the most about Sentinels current pricing. Is it the subscription itself, the price, or philosophy? Thanks for your time.
Why is it asking for so many permissions? :)
You set a break point on function's return statement(s).
I don't really see how any of those are better than if/else. You're adding lots of extra lines. The equivalent if/else of your code would be if ($somevar == "B" &amp;&amp; $somevar2 !== $somevar3) echo "I match"; elseif ($somevar == "A" &amp;&amp; $somevar2 !== $somevar3) echo "I matched the above conditional!"; else echo "I didn't match."; Depending on the situation you could also use an early return to shorten it a little more.
&gt; I prefer switch statements instead of large if/else if's Yet your switch is larger...
Thank you for pointing to the actual source code.
Consider using a neural network which an implementation exists also for php (php fann). The main purpose of NN is that you can avoid using (or generating) large amount of data (big data) by made a machine learning.
There are no unicode-related changes as far as I know.
cool, just saw in the docs that fulltext innodb requires MySQL 5.6.4 or higher.
While there's nothing as major as what they were attempting to do in PHP6, there is [Unicode Codepoint Escapes](https://wiki.php.net/rfc/unicode_escape).
Well it's an open source project, we'd love to get some Australian team members on board as part of the community. With Australia, the only big issue I see is currency localization.
The size is not the problem, but in my opinion that switch is more easily readable than the if/else if
Stumbled across it on twitter, figured out someone might like it. I saw posts of people asking about a Laravel CMS
I'm reading [Lorna Jane's article on bit.ly links](http://www.lornajane.net/posts/2015/recover-bitly-bundle-data) (linked on /r/PHP), in which she uses `guzzlehttp/guzzle`. 
&gt; They have several packages on packagist.org to confuse everybody as well: &gt; guzzle/guzzle &gt; guzzlehttp/guzzle The first is the old one. Use the second one. &gt; The last time I check HTTP is still on 1.1. Nope, HTTP 2.0. Check more often? &gt; What version should I use as a simple curl wrapper? I don't need the latest Middleware OOP goodness. "Middleware" here is the made up name for a handler decorator. It's simpler &amp; faster than event pub/sub. Use version 6.
Ok. I'll stick with version 6
Do you know any webserver that fully support HTTP2?
I think October is also Laravel based. Though that'd be version 4 (unless they've said otherwise recently) Options are always good. Nice documentation for an as yet unreleased thing too.
I could not find whether its free or not. But the "Apply for beta access" button does not suggest "opensource" to me
I think it's written there somewhere. Can't remember the page but it definitely mentioned that it would be fully open sourced after the beta. Not that I agree with that particularly.
We'll have to agree to disagree on that one, then. All the extra case/break stuff, and particularly the `switch(true)` gets in the way (cognitively) IMO and makes it harder to read.
Depends on your operation. My most recent gig was in "devops" for a PHP based SaaS. We did not build PHP rpms ourselves (used the webtatic repo), but I'd be very pleased to upgrade to 7.0 on release day.... provided that we were running our (limit) automated testing, test/demo, and dogfood'd sites on beta stuff. The performance benefits, beyond the built in opcache, seem to be significant enough to be worth the risk.
I like Guzzle 5 better than 3 because it uses more interfaces. The improvement on 6 is that it now uses a PSR interface. The namespace of guzzle stayed the same though, and with all those BC breaks, I can forsee a lot of library imteroperation issues with Guzzle 5/6 conflicts
Wait until you work with numerous facilities with varying hours across time zones.
As the author of AsgardCms, I can confirm cyberpop's response, it will be free, as you can see from the FAQ. https://asgardcms.com/en/faq
OctoberCms is also laravel based indeed, but I decided to build Asgard because October adds a too big abstraction layer in between laravel and the cms for my taste. Also it doesn't support multilingual site out of the box, something that's always needed in Belgium. 
Hello, You wouldn't have made it opensource ? I do have plans to sell 'premium' modules, and as October does, have a complete marketplace where people can browser through available community modules and themes (free or paid). Also, there will be paid support plans to get dedicated support for Asgard.
No no. I don't agree that having things walled off in pre-beta periods is a good idea. I'm not against people doing it. I just think that having more eyes on things at a stage when they're still being prototyped is the way to go.
You're upset because someone actually uses semver properly? Alright...
You didn't say anything about LTS ;) The fact is that it's still done an average of 2 major versions a year since release, which is what you asked.
Google Chrome? Firefox?
I just released my PHP routing library TreeRoute. It's much faster than another pupular libraries because it use a tree datastructure for storing routes. Of course it's supported regular expressions. Here is a benchmark suite: https://github.com/baryshev/php-router-benchmark
&gt; Type erasure in Java is more of a historical burden at this point, kept for B.C. It's an acceptable stop-gap, but with issues, as apparent. Indeed. I'm just saying it's nontrivial to add, especially when the language wasn't originally designed for it. &gt; If Hack didn't do erasure this is what would happen at runtime anyway, you'd get a stack trace from an exception several callees down the line. And that's hard to debug. Preventing it from even happening is the goal of the type system :) &gt; Say, what happens when a function taking in -T passes it to a function taking invariant T... Do we error on potentially correct code or do we allow potentially incorrect behavior? I'm not sure what example you have in mind here; you'll have to be more specific. But the general answer is that yes, type systems do disallow potentially correct code in favor of preventing incorrect code.
OR answer the question.
Yeah, i corrected myself. Congrats. You still ignored the other two i listed. And have yet to answer the question &gt; what the actual fuck is your problem?
/u/jok33333r Damn troll account.
What happened to the gold old days of auto routing? =)
&gt; fastest PHP routing library Citation needed :)
Oh wow... Complaining about how someone gives up their own free time to build a quality package which you get **for free** because they are updating it too often...good grief. The beauty of semver is if you don't want to cop the BC breaks, you just scope composer require declaration to a major version that is compatible with your stuff. Guzzle is doing it right - LTS is not some right you are entitled to. 
According to Semver, you increment the major version whenever there are incompatible changes, which is what is happened here. I don't have a ton of experience with Guzzle, but I have used Laravel since version 3. Each major version has offered tons of great new features, and innovation has been fast, which is a great thing. Obviously this presents problems for those looking to upgrade, but there is no one forcing you to use a newer version. Anyways, I'd assume the same thing happened with Guzzle. You are correct that Laravel 5.1 will be a LTS version. LTS in this case just means that particular version will be supported for 3 years. There are no restrictions on releasing new versions. 6, 7, or 8 could all come out next year, but 5.1 would still be considered LTS. There were requests from the community for this, but the main reason this is happening now is because Laravel uses some Symfony components in its core and the lastest Symfony release will also be LTS. I think Taylor is one of the most innovative php developers out there right now.... I highly doubt too many PHP developers were calling him an idiot for innovating. Anyways, I just saw Jordi (the author of Composer) give a [talk](http://slides.seld.be/?file=2015-04-18+Behind+the+Scenes+of+Maintaining+an+Open+Source+Project.html#1) at PHPtek on what it is like to maintain an open source project. A large portion of his talk covered negativity in the community. Starting flame wars and talking shit is honestly a huge waste of time. Not only does it make you look bad, but it also hurts the community and no one will ever respect you. If you don't like how Guzzle increments version numbers, you are free to create your own library that doesn't.
I think we have routing covered in php...
https://www.youtube.com/watch?v=8Vl8Jbw3cSk
Is it faster then [klein](https://github.com/chriso/klein.php)
I used PHP 7 with MarkBasedDispatcher (which is fastest for me here), maybe that's why I get different resultsâ€¦ When comparing always use the options provided which work fastest for you. Generally, for first route, TreeRoute is about 30-40% slower than FastRoute for me. Also, you define a set of a thousand routesâ€¦ obviously, regex doesn't like that in last route/unknown route cases. [with 10000 routes it's even 57 times slower.] With a hundred of routes TreeRoute and FastRoute are of equal speed. And with less routes FastRoute always wins. Also, your benchmark is one thing: totally synthetic. The strengths of FastRoute don't show up in thousands equal length routes... Real world routes looks like: lots of common static prefixes, then eventually a few dynamic parts and maybe then a static suffix. TL;DR: Edge case crushing doesn't help anyone. Provide *real* benchmarks and I'll look again at them.
Replaced words in [] for privacy. &gt;Hey [name] - &gt; &gt;I knocked on the door twice, thought I'd do it one more time. &gt;* Perhaps you're not interested in speaking with me? &gt;* Perhaps you're interested, but haven't had the time to get back? &gt;* Perhaps you were abducted by aliens and you weren't allowed to answer any e-mails? &gt; &gt;Regardless, hope you're okay and I'd love to connect, even if it's to build a relationship/talk about future opportunities. Could you let me &gt;know which is closest to the truth? &gt; &gt;Thanks, [recruiter name] &gt; &gt;PS. We only work with companies where tech is the priority, and engineers are treated as such. This is a VERY aggressive recruiting company that contacts you at least 3 times (probably more) spread over weeks. they also seem to use similar email templates but each employee changes up the message a little bit for customization.
Well there's no such thing as auto-routing. If you don't query your own tree of handlers, you're querying the filesystem's tree of files. It's the same isn't it (except the file system is less flexible)?
I wonder what's the difference between using .env and using a plain .php file. Apparently for both you risk checking them into your repository if the settings are in a file you need to .gitignore.
This might be rather late to jump into a heated debate that has cooled a bit. I'd like to point out that in classic MVC, when I've used it, there's an additional line of communication possible between the model and the view that doesn't have to go through the controller. This happens when the model is updated without an action from the user perhaps in response to a long running request that had been put in the background or an action taken by a different user that affected the data the current user is looking at. This isn't possible in PHP or in most web apps that don't use web sockets. This is where I see the break between MVC and ADR. In ADR the view has to pull changes through the controller. Often this done by using JavaScript to poll the server to see if anything changes. In classic MVC the view doesn't poll the model for updates through the control every so many seconds. Instead, it gets notified of changes and updates itself accordingly. For me the key distinction is that in ADR all updates to the view have to be handled by the Action while in MVC the view can be updated if the model changes without a Controller mediating the exchange.
Guzzle doesn't need curl either
&gt; Except for /u/ircmaxell/ whose effort went nowhere It didn't go "nowhere". I just havent had the time to polish it. I will finish the blog post series...
You shouldn't need to apologise for the major versions. The whole point is that people don't *need* to use them.
If we're really going to have a bunch of routers claiming to be the fastest, there should be a standard benchmark people should have to go through to assert that claim.
Believe me, even if everything is being deployed by rpm and developed in vagrant and tested with multiple boxes, they still won't upgrade from frigging centOS 5 - even though you already detailed explained what will happen and made a list of required configuration changes (like the conf format from apache 2.2 to 2.4). At least according to the history of a jira ticket for ops I created more than a year ago -_-
I think it is important to note that developers must learn the perfect way, too, in order to make good trade-offs. Documentation is important for cases where you intentionally move away from a good solution, yes. However, if you have to document such things often in your code you should consider that as a big code-smell. Refactoring is IMO really important. (Disclaimer: I'm the author of the post.)
No, my point is, why: 1. Put settings from a file in the environment 2. Read settings from the environment back in PHP. Instead of: 1. Put the settings in a hashmap (or an object) in PHP file. What's the value of going through the environment at all?
Let's say I wanted to use the environment on production, then my settings file would be... Development: &lt;?php return [...]; Production: &lt;?php return $_ENV; I still see no benefit to using the environment for such settings *at all*. Testing or production. *What is that benefit?*
I *genuinely, really* want to know what's the benefit. It can't be that hard to explain, I hope?
(/me shrugs) I've explained as best I can. You want to use plain PHP files, go for it.
People generally don't do that because composer usage is considered sensitive (it's easy to abuse). So, what's your use case?
&gt; It didn't go "nowhere". I just havent had the time to polish it. I will finish the blog post series... Well the community obviously knows how to make tree based routers, so you can save yourself the effort. **BAD DUM TSS** I'll see myself out.
Switch use loose comparison. We already know loose comparison is bad. Do not want =)
This does something similar: http://www.reddit.com/r/PHP/comments/33ge3s/introducing_up_a_library_for_selfupdating_web/ People flagged up why it's generally bad to do this in the comments.
&gt; how are you going to use a command line tool without using the command line? Composer is just a PHP application, wrapped up into a zip archive. So in theory it would not need a command line to run from PHP. I'm not arguing that it's a good idea though.
true, it's probably possible in some way, but it's designed to work as a black box, imo it should be treated like a compiled executable. It's not because a .phar allows you to access the files and classes that you should.
 &lt;?php session_start(); if ($_SESSION['nombre_usr'] == NULL) { header ("Location: index.php"); exit } ?&gt; &lt;!DOCTYPE html&gt; 
You should read into and lookup how other frameworks handle plugins or extensions. Generally speaking, their is user action and it is not automated. 
now im getting. Parse error: parse error, unexpected '}' in /services/webpages/d/r/drm-rep.com.mx/public/portal.php on line 5 this is the code.. &lt;?php session_start(); if($_SESSION['nombre_usr'] == NULL){ header ("Location: index.php"); exit} ?&gt; &lt;!DOCTYPE html&gt;
 &lt;?php session_start(); if($_SESSION['nombre_usr'] == NULL){ header ("Location: index.php"); exit();} ?&gt; &lt;!DOCTYPE html&gt; That should cover you. You missed out the semicolon.
I forgot a semicolon after exit: ... exit; } ?&gt;
https://github.com/Netflix/asgard
Uh... `&lt;?=` is going nowhere. Only `&lt;%` and `&lt;script&gt;` tags.
Y'know I've been trying to learn php part time with a full time job and a startup and I find it difficult to find content geared towards newbs like me (discluding the tuts out there). The 'Next Steps' Section is really useful to me. What can I build on my own with my limited knowledge and without someone holding my hand? Thanks for the article.
Hahaha, I actually subscribe to Steve's channel. Hilarious to see him in this sub.
Good advice. Thank you.
Good advice. I guess I am going to have to do my best to understand these coldfusion functions and make them into PHP. Thanks for the reply.
I am discovering that now. I am not hte most experienced programmer out there. So at this point its a lot of just looking up functions and seeing what they do. I appreciate you input. Thank you.
Guzzle is already tested, be sure to don't retest it. For instance, test that your methods call expected Guzzle methods, but don't test the output of Guzzle request itself, it's useless and redundant.
I've been trying to make the community less of a negative, by increasing neophytes' exposure to secure solutions instead of insecure or outright incorrect ones. [As seen here](https://meta.stackoverflow.com/questions/293930/problematic-php-cryptography-advice-in-popular-questions). Beforehand, I spent a lot of time disclosing vulnerabilities in popular frameworks. So while I agree with this point, I believe we should do more to change it. This is something anyone can help improve.
I've had to do this before with no experience in CF. It took me a day or so to get up to speed on the CF functions but after that it was easy going. As others have said, rewrite based on the intended functionality. 
I'm pretty sure that Ben Nadel is spinning in Cold Fusions grave LOL.
Force my coworkers into callback interfaces until php supports them natively ;P (well, I don't think I'd get through with that ;D) http://3v4l.org/HSVuX
Have fun.
ahh i see thanks for the reply. Just going to take a lot of elbow grease.
I liked the GitHub stats and the project ideas. Nice post, I'd look forward to seeing more stuff on your site. Are you going to do tutorial style posts, or something else?
If you need/want to use latest version of PHP, why not separate new features as a new service and call them from your legacy code? Refactoring 700,000 lines of legacy code isn't easy. In fact, I call them rewrite when it comes to 700,000 lines of code... also..why Laravel 4.1? We now have 5.1 and Lumen.
If the benchmark doesn't have the recommended caching of it's competitor setup, that is one serious flaw. But also, if all it is doing is benchmarking the router by itself without having actual controllers do stuff on the basis of the routing, this is another flaw that massively benefits any router that has a large amount of code, or uses a large amount of data to store the routes. Without the actual controller code being run, the router is free to use all the cache in the CPU. When other code is being run/data is being processed, the router will not have all it's stuff cached. As well as having no controller code, the improved benchmark has a grand total of 6 routes in it. This makes the data/code almost certainly fit with L2 cache, and very like L1 cache as well. This makes the whole benchmark be pretty useless. Even on a server that only has a light load, whenever there is a decent amount of code run per request, that will totally remove all router code from the L1 cache, and possible the L2 cache as well. 
1. Yes 2. Yes although it might not be too clean 3. That won't work since each instance returned would be from a different class since they're anonymous. And you won't be able to type-hint them anywhere either. 4. Definitely 5. Similar problems to number 3; you won't be able to type-hint them.
As confusedpurple says, you don't want to start a riot here. Or do you? Anyways, Facebook, baidu, WordPress, mailchimp, etc still use PHP. Here-&gt; https://blog.mailchimp.com/ewww-you-use-php/
If it's the same body of code producing the instance, it's the same class. Not that I think anyone should use the random names that produces. The type-hinting, if necessary, can happen via interfaces (which is the long term game in any library anyway). I.e.: public function createFoo(): FooInterface { ... } Regarding the structs... yeah. It's still a step forward, though (you get the memory optimization on objects, and with a single trait you can lock the class down so it throws if you typo a property name you set).
"Don't use this tool, it's rubbish, but I'm not giving any examples"
&gt;A LOT of bad code: PHP is very flexible and the same task can be achieved in multiple ways. A lot of languages like Ruby are also flexible to an extent, however they usually have coding standards and best practices to keep the code clean and promote readable code. PHP doesn't, which means that there is a lot of bad code out there, and bad programming practices are encouraged. I've seen a lot of bad ruby code too. In fact, some ruby programmers get so caught up in how terse they can make their code, they sometimes overdo it and make it very hard to read or understand. Just because someone came up with standards/conventions doesn't mean everyone uses them. Or worse - they cargo cult a specific idea and ruin their code trying to apply it to every situation.
Just read this on the pooper at work. Excellent article! And timing couldn't have been better for me as I am about a month into picking up PHP from scratch. As someone without much programming experience prior, you do a great job of really addressing the big picture, and I'm all about learning it the right way from the start and will do my best to :) Edit: Linked it to /r/startups - http://redd.it/37rkxa 
Of course you would.
I think main idea that for production this settings not storred in .env file, but instead are defined in environment (apache/linux) so only global admin can change them. And your workflow from: * Put settings from a file in the environment * Read settings from the environment back in PHP. will become: * Read settings from ENV. On local or staging environments this is faked by .env file.
Of course, there are exceptions to every rule, but the general population of Ruby develops writes readable code. There are PHP developers who write very elegant and well-documented code, and then there are developers who don't even use indenting, which is a big surprise because indenting is a standard that exists across all languages! But things are improving, and that's all that matters.
I never gave much thought to this, maybe because I came from a C++ background so I already had an idea of how programming languages work and the articles I read first did a great job of explaining this. This is why it is difficult to write articles for someone at a lower knowledge level about it: you leave out details because you assume that everyone knows them. I'll be careful about this in the future.
I'm not sure yet, though I don't think I will write a lot of tutorials on PHP because there already are billions out there. I did have one on PDO planned though, let's see how that turns out.
I would have seen the appeal of creating a concrete implementation of an interface whose dependencies you can change without having to change the implementation, had you not had to to change the factory each time you wanted to make a change, not getting you ahead. What would be cool would be some way to demand that an instance of a class should always be made through the container so you could freely change the dependencies without having to worry about breaking code where the class is new'd. But this doesn't solve that.
phpacademy helped me wrap my head around a lot of concepts, those guys are definitely great :)
Thanks for the link :) If you liked the article, then you might want to check back from time to time, or stalk me on twitter, because I have another 1-2 articles on PHP planned.
Yep, as suphper said, it is Ghost. I used it primarily for the beautiful UI, though because it is still in the early stages, it is still rather basic.
Thanks :) I did link to PHP The Right Way near the end of the article where I talk more about actually learning PHP. It is truly one of the best resources for PHP.
I have a quick question if you don't mind. How do you do that? Are you sponsored in some way?
why MySQLi is not recomended?
I created https://forge.laravel.com and https://envoyer.io
I'm not following... how are controllers relevant? They are identical whichever router you're using, the router has no effect on those actual functions (the router just tells you which function to use).
*Shrugs* You make a good product, it's well worth it in my eyes. Especially now that we have LTS versions and better documentation. Makes it much easier to justify.
yea, ill stick with tabs, thx. dont need committees micromanaging my code
This is the Python way to do things - the concept of a switch statement doesn't exist - the use of dictionaries like this are promoted instead. 
I clicked over to that site, saw the design and clicked away immediately. I cannot give credence to a web developer who lacks basic skills in one area but then rallies against others who don't have his strengths.
Haha!! I was my first tought too! :D