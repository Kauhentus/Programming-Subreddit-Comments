Lots of us have been there. Work the problem over months and years, and make sure every commit incrementally makes it better. You'll get there if you stick with it.
This is great advice. The developers are great people and accessible, and it's really handy for making quick APIs without loading in a lot of code you don't need. A good compromise.
[I gave this answer yesterday](https://www.reddit.com/r/PHPhelp/comments/ajwnye/comment/ef00cwq?st=JREPEUAJ&amp;sh=2a3b23f2) 
I had a chance to peek into one ad it was horrible
Correct link: https://laracasts.com/
Awesome!
Happy Cake Day :D !
Thanks for your effort. I'm afraid I will never understand the value of writing so much critical code in comments, rather than just writing it as, well, code. 
Whoops! I'll leave like that. It's kinda funny. 
In what kind of scenario's do you recommend to use that framework?
It's better than WordPress so far. 
Completely agree. As developers we love solving problems and writing your own library/framework/whatever is a great challenge, but the vast majority of us are here to serve a simple purpose: write software for someone paying our wages in the most efficient manner possible. I get just as much if not more enjoyment out of watching a client's vision come alive with my usage of "jigsaw" pieces as I do solving a particular code problem.
 Dropped support of php &lt; 7.1 I didn't want to use it anyway 😅
It is still a bit early... But, you should be sitting on 7.2/7.3 by now. http://php.net/supported-versions.php
&gt; So I was tired of using monolithic "validation" classes to validate user input. The code usually smells when I do so. More context please? I am often using / are you referring to: https://github.com/Respect/Validation What does your library improve over this one?
seeing as how php itself has dropped support of php &lt; 7.1, that seems fair.
This is a late response but i like to point out that what you are doing and the new PHP Preload are doing are not the same. In your case your loading all data permanently into memory. This result in every request you handle leaving data behind. While this is the same pattern that Go, Crystal etc use, they are designed to clean up behind themselves. PHP is not, what makes you run into the issues like connections staying open between requests ( great for speed, bad if you needed different data ), data staying in memory between requests, etc... The PHP preloading change solves the issue that Opcache will reinitialize on every request functions, classes etc. This does not affect the actual fire and forget data approach that PHP does. So you still will be reconnecting connections etc. This is a change that gives a speed increase but still maintains PHP its default working behavior. No issues with connections staying open between data etc. In practice, those benchmarks results that you posted below tends to be a lot less impressive. If we look at a more real work scenario: https://www.techempower.com/benchmarks/#section=test&amp;runid=58042695-831a-4a35-8c60-2b872a06f799&amp;hw=ph&amp;test=fortune&amp;l=zik073-7 As you can see, Raw PHP vs Swoole only result in a 2.5 times speed increase, database connections, queries etc simply destroy most languages their speed advantages. That gap will become slightly smaller with PHP Preloading but not massively. The reality is, Aphplication / Swoole / ReactPHP are trying to solve a issue, that is not a issue for PHP. Yes, Raw PHP with fire and forget, is slow compared to Go or other languages that keep their state in memory. But in real world applications, that need file, database etc access, the IO/Socket connections, Waits simply level that playing field. Aphplication / Swoole / ReactPHP are better for solutions like micro services that need to send or receive data and are not limited by external connections like databases. This is why simple echo "Hello worlds", with 450 vs 15.000 show such great results. Trow in a database and then see how that gap shrinks down fast :)
I prefer eloquent over doctrine
Seems like something better suited to an extension of the language itself than a framework.
"fancy"
This isn't surprising for a new release of something. If you pull latest of many things, they'll require 7.2+. Anything based on core symfony components will have that requirement.
Who cares? Do you hand-roll your own web server library by library or do you use Nginx or Apache? Do you roll your own database or use MySQL / Postgres? Do you roll your own operating system or use one that already exists? 
Well, it was a project made by a team during 9 years so far, this is why I regard it as a secure project and why I copied the code, I don't understand what has Donald Trump to do in one encryption function here... hahah
If you want to be a successful engineer, please never ever use a framework like this. 
I'm on 5.4... for reasons
I agree here. I prefer to avoid annotations as they aren't standard with IDEs or easily testable.
I don't like annotations either but nevertheless this project looks interesting, so I've 🌟 it and have added it to my watch list.
The quicker libraries drop support for outdated versions of PHP, the quicker you can upgrade.
bad bad bad
That's not very nice. Plus, whether we like it or not, success doesn't depend on mundane things like framework choice. It's more about what you're building. Also do you know how many people are saying "if you want to be successful, never use PHP". But, screw 'em right :) Not a fan of code in annotations, but just saying. Let's be civil :)
that must be a joke :)
that must be a joke :)
Some feedback: - You're returning a random string when invalid input is provided. Throw an exception instead. - It's possible that `$Matched` will not be defined, depending on the input. - `getContentFromURL()` just returns false if there is an error - again consider using exceptions. - Your naming conventions are all over the place. Functions and variable names are both `PascalCase` and `camelCase`. You should follow [PSR-1](https://www.php-fig.org/psr/psr-1/) or at least keep it consistent. - Inconsistent order in boolean comparisons - `$WSContentHTML === null &amp;&amp; null != $WS_URL`. Keep what you're comparing the variable to (`null` in this case) on the same side each time. - Typo `article:auther` - Your indentation isn't consistent, so the code looks very messy. Just an idea to make this package much more appealing - consider using [sax parsing](https://en.wikipedia.org/wiki/Simple_API_for_XML), that way you can extra the meta data without downloading the entire page contents.
I was saying, just because something exists. Does not mean it’s good or should be used. The same way just because Donald trump was popular, he’s an idiot and should not be president. Just like password function, it has exists for ages. But still shouldn’t be used anymore
Bad ones
Care to explain why?
Why don't you return that type from the repository itself?
Or you could use my HTMLTag library: [https://github.com/drupol/htmltag](https://github.com/drupol/htmltag)
Too vague a question. Can You elaborate on how that result will be related to repository? Will it be processed result of some query from repository? Will it be some description of repository itself? &amp;#x200B; You have type A and a type R (for repository), and you want to have a method on A that takes instance of R and returns what? Decorated R? Why not use composition or DI to do that? Even plain old adapter would be suitable here. Some other type T that is related somehow to R? That's not enough information. Especially not enough to consider potential alternatives. (e.g. reflection may be enough for such use-case and there is no need for A nor for T, but we want know without more details)
I think I'll just use regular Strings for now but I'll defo check it out when I've got a stable release with all bootstrap components.
 Option 1: class FooType { } class BarType { public int $id = 0; public function ListOfFoos(Repository $repo) { return $repo-&gt;GetListOfFoosForBar($this); } } $bar = new BarType(); // elsewhere foreach ($bar-&gt;ListOfFoos($repo) as $foo) { // stuff } Option 2: class FooType { } class BarType { public int $id = 0; /** * @var iterable&lt;int, FooType&gt;&amp;Countable */ public array $foos = []; } $bar = new BarType(); $bar-&gt;foos = [new FooType(), new FooType(), new FooType()]; // elsewhere foreach ($bar-&gt;foos as $foo) { // stuff }
Cool, feel free to ask for help if needed. 
Both seems bad, can you clarify what are you trying to archieve? Not knowing what are you trying to solve can lead us to a XY problem ([https://en.wikipedia.org/wiki/XY\_problem](https://en.wikipedia.org/wiki/XY_problem))
Late to the party, but this is one of the coolest things I've ever seen.
Slim was developed as a micro-framework for API development. Highly recommend.
I see your points. The code evaluated inside these annotations is not limited by "single code lines". You can also put other assertions in there like [https://github.com/beberlei/assert](https://github.com/beberlei/assert) or you can simple code you own assertions and test them. This way you can reuse some validation methods. Also you can always simple write tests for your methods like when there is "real code" in there. But yes, its just a different way of handling your code and not everyone likes annotations and has to ;)
I think you can use it everywhere. For example: You provide a small library that works with some kind of money exchange. You will then provide this lib to your colleagues or even 3rd party developers. You need to make sure that the objects of you lib always stay in a healthy and valid state. So the users "can't" (well if they want the can ;)) get invalid states. Bu yea, everywhere you need to make sure, that your objects needs to be and stay in valid state.
You need to get specific, because that's like asking "is driving car bad" while preparing to drive off a cliff.
People like /u/bay650area1 aren't strong enough devs to be able to explain the *why*, all they can do is just parrot shit that they hear and expect people to agree. Personally? The framework isn't bad. There are a couple of design decisions that I'm not fond of (ie: `get` methods that mutate arrays by reference rather than return them), but nothing that is structurally unsound or "bad".
Hello fellow coder. Writing a wrapper is a common first step to explore the possibilities of server side code. There would be a lot to say about why your approach has probably not really a usecase in production, but I guess this is more of a studying project? As such, I recommend starting to improve the codebase with the following considerations: 1. Future proofing. You are loading a particular version of jQuery and Bootstrap. And Bootstrap did have breaking changes in the past. There are several ways you can deal with this fact, including your way (hard coded to one version). But something tells me you might have not considered life cycle planning. My tip is to give thought to such considerations when publishing. 2. OOP Procedural scripts are almost always the start of a programmer. And to be clear, that is a two-bladed sword. Most people jump on some framework without ever coding "from scratch". Don't let noobs tell you that you HAVE to use OOP immediately, as they will be the worse coders in the long run. However, since you are already able to write "clean spaghetti", it seems that setting up classes and intelligently distribute your code for better usage, maintainability and stability is the next step for you. As a rule of thumb, start by trying to write "echo" only once in your entire code. 3. Ignore most feedback of this Reddit I see how ironic this sounds, but hear me out. After almost two decades in the industry, I have a pretty good feeling of how valuable certain feedback is. 99% of what you will receive here is uninformed BS. Not that people don't mean well, but most of the users here don't know much more than you. And I get it, where else to show what you built and ask for feedback, right? Well, that's fine, I guess, but don't take every comment as a "must implement/follow" recommendation. Again, most of the comments here are more or less useless or irrelevant. Have fun coding! 
This looks very cool! Will have to give it a deeper look. I am still running an additional nodeJS server to achieve this, involving potentially unnecessary communication with my Apache.
You know nothing about me.
&gt; for reasons $5 says none of them are compelling or good.
The readme mentions a plugin for PhpStorm that will parse the annotations.
*Technically* annotations are more than just comments. They’re used because you can parse the docblock from the class and function reflections. Unfortunately it’s currently the only way to do this kind of stuff since classes are not objects and cannot be modified at runtime (as in Python with its decorator syntax).
PHP Conferences: &amp;#x200B; US Based * \[sunshinephp\]([https://sunshinephp.com](https://sunshinephp.com)) * \[midwestphp\]([https://midwestphp.org](https://midwestphp.org)) * \[longhornphp\]([https://longhornphp.com](https://longhornphp.com)) * \[php|tek\]([https://tek.phparch.com](https://tek.phparch.com)) * \[php world\]([http://world.phparch.com](http://world.phparch.com)) * \[cascadiaphp\]([https://cascadiaphp.com](https://cascadiaphp.com)) * \[madisonphp\]([https://www.madisonphpconference.com](https://www.madisonphpconference.com))
[removed]
Options: 1. Write everything from scratch. 2. Use a bunch of smaller libraries and vet them thoroughly. Personally, I prefer widely used kitchen sink frameworks.
I want this guys job. 
Depends on who you are delivering it to. Non-technical person? Yep, they don't care. A technical person, that shit won't fly for long.
I've yet to hear your stake.
Thanks, I don't know u/bay650area1 and I'm yet to hear his real reasons behind his bold statement. What about annotations? How do you test such code? It seems a bit problematic for me. Too much "side-effects" on the actual code, which makes it harder to read/understand/test. I know Symfony (and more) utilizing this a lot but I'm not a big fan of it.
Thanks for sharing that link. What gets me is when I am asked to identify my skill set as beginner, intermediate, and expert... I've been putting down intermediate for the last 7 years. It was somewhere around 3 years into the LAMP stack that I begin saying intermediate. I can't imagine who would believe themselves to be an expert. And I can't imagine how I ever thought I was intermediate 7 years ago. I can't ever imagine how I would become an expert, because the amount of new information increases at a rate higher than I cane consume it.
I see annotations as convenience over convention. For a long time, I was pretty heavily against them as the idea of writing code within comments didn't sit well with me. And - like you - I was concerned with the testability of such code. A few things changed my mind about this. For one, [this comment](https://www.reddit.com/r/PHP/comments/6rxmcc/what_do_you_guys_think_about_annotations/dl8lzzt/) makes a pretty strong case that helped me see that the formatting of docblocks themselves are handled differently than standard comments. To me, I consider annotations not too dissimilar from ASP.NET's [Attributes](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/). Secondly, I've found that annotations are still testable, just not really at the unit level. You would have better luck testing them within your Integration or possibly Acceptance tests. As long as you built your application to be testable in the first place, then annotations shouldn't interfere with this too much. Case in point: When building a Model using Annotation Syntax in Doctrine ORM, you may have some properties and methods that are decorated with various annotations. The thing is, most annotations that I've come across are not read by the same class that's using them. More often than not, it's other classes that interact with this object that makes use of these decorators. Testing the various getters, setters, and mutators at the unit level is still trivial since a standard model's public methods won't likely be affected by an annotation. When we're unit testing other classes that might read this model, then that's where our mocks come in handy. Since good unit tests ensure that we're keeping everything in isolation (to the best of our abilities), we won't be working with a "real" annotated model. Just a mocked one. I'm definitely less against them than I used to be, but agree that they should be used sparingly. They become difficult to debug when you start using them a lot, and their use still requires a fair amount of magic to work.
There is another way to do what this framework does. Which is to put the code in the method body. It is just a bunch of assertions.
OMG you're really good at explaining things in detail! Thank you (and linking that comment too)! Yes, what you wrote is perfectly makes sense, I'll look at annotations a bit differently now. To be honest, I like them, but I had my concerns as well. While they can reduce loc (by implementing reusable logic placed elsewhere with just a single line), I found it abusive as well. After reading that comment you've linked now I understand my feelings were entirely subjective. I feel we should push this idea forward (we don't even have a PSR on the matter), and hopefully it can make its way to the core in the future.
Sounds like the repository should return that list
Just checked the code. Eyez bleedin, send help. 0/10, would not read again.
*links a ten year old post
`$this++;`
The approach for Phypes is different from Respect/Validation. What I am trying to do is using Value Objects to pass your input data around in your models instead of having to validate the raw data and passing it around in a raw format. Your model classes should always know if they are in a valid state or not. So when you create the VO, the VO must be valid to be passed around to your model classes, say User. When you process an email, you create a value object EmailAddress and pass it to your User class as a type instead of passing the plaintext. The point here is: 1. Your controller shouldn't be responsible for the validation. 2. Your model class shouldn't be doing the validation. What happens here instead is that EmailAddress itself knows if its in a valid state or not, if not, it throws an Exception which you need to recover from. Hence, the User class doesn't worry about EmailAddress now, since it knows that the provided email will always be valid, otherwise you'd have gone through an exception. Also, the rules approach respect takes can actually used to complement Phypes, by specifying rules inside of the individual validators of the types. And you are free to use your own implementations of validators whenever you want to. &amp;#x200B; This inspired me: [https://stackoverflow.com/questions/43373785/how-to-validate-form-field-in-php-using-object-oriented-technique/47535617#47535617](https://stackoverflow.com/questions/43373785/how-to-validate-form-field-in-php-using-object-oriented-technique/47535617#47535617)
Wow, I never knew this (the XY Problem) had a name. I encounter that a lot.
Nice little hack. Was looking for something like this last year when I wanted to use speech for a DialogFlow bot
Generally entities do not use services directly. This is because services (including repositories) form part of your controller/ business concern and entities form your model/domain concern so it’s about separation of concerns. Also most ORMs are not really designed to handle it so you end up battling against it. A different approach might be to have an additional service which takes your repository as a constructor argument and then has methods which take the entity as an argument.
Maybe it suffices to post this to the Laravel subreddit?
Best sandbox for any language is: [https://repl.it](https://repl.it)
i don't like the color scheme that much but other than that good job :)
I mean, that's true, but it's not really the answer is it. 
I have the same feeling about using monolithic validation libraries. &amp;#x200B; Your library looks well designed I'll definitively give it a try someday! Thanks.
Why `BarType` have an `$id`? Is it active record pattern?
That's a lot of XSS vulns
... doesn't give 5 for 5 + 5, but for '5' + 5
Yikes, now I know to never trust this product :D
Not really... JetBrains have made smart IDEs even without those props... MS on the other hand, went on creating static typed languages... And I'd rather focus on solving the customer's problem, not compiler's type requirements
[PHP User Group](https://www.meetup.com/de-DE/phpugmunich/) in Munich is something I like. The next meetup in February will have Sebastian Bergmann as speaker, so if anyone is interested.. 
&gt; It'll never be safe to eat. It kinda does.
It’s true, PhpStorm is already smart but there are still a few things that the IDE doesn’t infer automatically. I’ve logged feature requests for PhpStorm. About static types, I’d take TypeScript over JavaScript any time. This is about solving your rapidly changing customer’s problems. You can do powerful stuff with static types. You can’t refactor properly without static types. There’s a limit what you can do with dynamic languages. Big codebases tend to get difficult to maintain without static types or unit tests. Then again, I love dynamic languages. Combined with static analysis it’s the best of both worlds.
Thanks man, something something meaningful whitespace grumble grumble
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I've always wondered about this "war" on classes without ```final``` keyword in them and I've never quite understood it and I have years of experience. The problem is even more diminished once you start using composer and it manages dependencies and most important, versioning. The author states that one of the biggest gripes are that you can accidentally overwrite a parent method and this way you'd break an expected behavior somewhere else. But isn't this why we write unit tests and pay for expensive IDEs and CIs, to track this shit for us? And with composer.lock file managing versions you should be good. And if the project maintainer decides to break their own API, well, it's a bad library then to begin with. Never break an API unless you go up a major version. Can we have a civil discussion about the witchhunt that is lately against the libraries that don't necessarily use the ```final``` keyword? I find class extension to be a great thing and how I always envisioned OOP. You take someone else's class, at first it works perfectly for the use case. The use case then changes, you extend that class and bake in whatever custom stuff you wish without rewriting the whole thing, this way the original package maintainer will release updates and fix things and the changes will snowball at you with 0 cost. You just hit composer update. Other than accidentally rewriting parent methods, that can be remedied through usage of tests and IDEs, what's so bad about extendable classes? 
Thanks a lot! I will def. look into future proofing and life cycle planning (which I really haven't done lol). For OOP, i feel like I could do a procedural and an OOP version so the user could decide which method to use.
Hi. The users have to design their own REST scripts, which means that they are in charge of patching Cross scripting vulnerabilities. If you found any in our code, however, it would be very helpful if you created an issue on our GitHub or sent me a message via Discord (Pexing#4217). Thanks!
[Value objects](https://patricklouys.com/2017/06/04/value-objects-explained/) are a better solution to the problem that you are trying to solve. And please never store currency as a float... I had to deal with code where that was the case in the past and we had bugs everywhere.
Nah it's the "well, I wouldn't start from here" kind of answer isn't it.
looking for some general web dev advice. Ive created a php/mysql platform that manages ad campaigns. Each campaign has a list of domains, included URL paths and excluded paths. If a campaign is meant to be sitewide, the included paths is left blank. This screenshot snippet should give you a better idea. [https://www.screencast.com/t/nTRoG6oJD](https://www.screencast.com/t/nTRoG6oJD) &amp;#x200B; Now the problem is that when you have multiple campaigns setup (enabled or not), its hard to manually manage the lists of included and excluded paths to make sure there aren't conflicts with two ad campaigns running on top of each other at the same time, etc. To add complexity to it, sometimes there is actually a need for two campaigns running on the same page. Also, by default a campaign is disabled and sometimes campaigns are temporarily disabled, so doing a server side check to check for potential conflicts seems to be a little harder as i can't really rule out disabled campaigns because they might be enabled later, etc. &amp;#x200B; The reason why i am posting here is for help trying to figure out the best way to manage such settings in order to allow as much flexibility as possible while minimizing the need for the end user to have to visually compare and manage different campaigns uri paths assignments, etc. I am not sure if i should do a check on campaign save that simply gives the user maybe a tabular output of potential conflicts and let them decide or what. I know there has to be another way to look at this, thus why I am here asking for some help. &amp;#x200B; For added context, the end result data is loaded in a javascript file on the designated site and it simply checks those assigned domains, included paths, and then makes sure its not an the excluded paths array and if all criteria is met, then the campaign is displayed. There are other checks as well, but not really pertinent to the issue at hand.
/
Informative post...
So what's planned for 8? Are we going to finally get method overloading? Array types? Generics? New namedspaced STL and deprecate the old STL?
There's at least already one RFC for PHP 8.0 (arrays starting with a negative index): https://wiki.php.net/rfc
Jesus Christ....
I'm not sure why you'd start with a negative index, but the way it currently works is definitely confusing. https://wiki.php.net/rfc/negative_array_index
Array types and "generics" are form of *parametric polymorphism.* Would be nice to have. But since that's not BC and not really on the radar of core team, I would expect it in some 8.x branch base on someones contribution.
super news
&gt;Your library looks well designed I'll definitively give it a try someday! Thanks. Thanks! I have been trying to clean code it as much as I can, and keeping it easy to test. It is still a baby project and needs a lot more improvements. Would really appreciate some contributions! :D
The biggest thing planned for PHP 8 from my knowledge is a JIT compiler.
Any links on that?
Currently on mobile will try to find the internal discussion again.
I would love to see wider covariance one day. Override base function params, override base function return type to new extending type.
This should be available as of PHP 7.4, the RFC has been voted and the implementation is more or less done (see [https://github.com/php/php-src/pull/3732](https://github.com/php/php-src/pull/3732))
&gt; Which is to put the code in the method body That's not hipster enough.
Yeeees
I'm not sure if this is increasing off by 1 issues or fills a gap when working with arrays. ...or makes working with arrays coming from some module nightmarish. Still, what'd be the use case for negative indexes? I don't see a particular value in it. Anyone else got an example?
Where would this even be useful? I suppose it’s faster than using an associative array if you were doing something like a state manager (like a toggle switch) where you have (-1, 0, 1) mapped to three separate actions but still.... I guess it doesn’t hurt the rest of us to have the functionality available, but Jesus Christ that kind of hurts.
I really like the Mimus rules. It adresses what annoys me most in setting up expectations with PHPUnit.
I'm not knowledgeable at all in that kind of thing... What would a JIT compiler mean ? Is it something that would allow PHP some measure of competitiveness against client-side rendering ? Or would it remain basically the same as before, only faster/more efficient ?
Is gaining a JIT compiler such a breaking change though that it must require a major version bump?
Doesn't sound like someone I'd want on my team. &amp;#x200B; Everyone in a team should be working to the same rule book.
I think the reasoning is that even though it doesn't break anything on the userland level it requires some ABI changes, i.e. breaking changes for PHP extensions, that's why it needs a major version bump. Also I suppose it can be used for "marketing" in the sense that PHP 8 has JIT compilation meaning that it's faster than PHP 7. &amp;#x200B; But those are only my two cents on the matter, I'm by far an expert on this matter.
From what I understand it would be faster more efficient than currently. But I'd say the introduction of preloaded files in PHP 7.4 would also be a major speed improvement over "older" PHP 7.x versions.
First of all: You know that there are existing software tools? (AppNexus, Google AdManager, AdTech, Adition, ...) They implemented a hell of features (targetings, bidding, profiles, speed/scale, tracking, ...). So if you're plan is to only offer an "easy" implementation of the same features, and you end up with only be able to do 5% of the existing features, you're still 10k hours of work away... (Just a random estimation from me :-)) &amp;#x200B; At least you should understand what the existing solutions do, or how they work. Usually the Website will implement Javascript Code to handle the ad campaigns on a given site. This javascript block knows basically what the size of the ad is (width/height), where it is exactly and also some more information about the client (who is visiting the page). All this information will be packed into a web call to the favored system (your solution) for displaying the correct ad on the website. &amp;#x200B; Your system should be able to scale I think. If your ad-server is responsible for a heavy traffic website, you need to be able to handle the same amount of traffic or more, because per original request you maybe have to display 3 or more advertisings... So one request to the original page, will result in 3 request for your system. &amp;#x200B; Next point: Your system does one thing: Decide with all the given information, which ad should be displayed. And this has to be done dynamically. At any moment someone could disable a campaign or add additional settings to the campaign (excluded websites or what else you already offer). So a client based javascript solution is in my opinion a way too easy solution to go with. You need a lot of server power to find the correct ad. &amp;#x200B; So for me, it looks like you have to save your information (from your screenshot) in a way better format to have it searchable for the backend. For example: Save ALL Websites that are possible to serve on for a campaign, so you do not have to do regex stuff on the database. &amp;#x200B; Then for the availability: Usually an ad campaign has a goal (Serve at least 100k AdImpressions in the timeframe from x to y). And there is the clou of the system: It has to handle that shit :D It is no problem to have multiple campaigns on the same placements/websites, as long as they reach their goals. So for the adserver per se, its just about calculating what should be served next (the one campaign that has the least amoung of impressions for example). Or you work maybe also with priorities... Another thing to implement :-) &amp;#x200B; For the guy who is booking the campaign, or telling the customer if the booking is okay, you need to do forecasting: How likely is it, that the campaign with timespan X and goal of N AdImpressions will be served on those placements? Thats where historical data comes into the game: How many AdImpressions did we display on this placement at average over the last 2 weeks for example. Combined with the information of how many campaigns exist already in the system and will compete against the new one... And so on... And so on... &amp;#x200B; TL:DR: Either you code a basic ad-tool that is only cappable of displaying the ad campaigns on the correct websites/placements or you end up doing much more than you imagine at the moment (my guess). &amp;#x200B; Sorry for my english - I hope its understandable.
It will improve performance, but previous efforts at building a JIT have apparently not translated to much improvement in performance in the context of a web app because PHP is normally a short-lived process, whereas things like Node are running continuously.
It is, isn't it? I didn't know they were starting PHP 8 development and now I do.
I am on my first Django/Python project and in comparison to PHP, I think PHP is a FAR BETTER choice for web development and large monolithic applications. I am also aware &amp;#x200B; 1) Inversion of Control Sucks As for as my knowledge in Python, there no real abstract classes or interfaces. Yes I can create a class and call it abstract but enforcing methods being defined in child classes does not exist. Right now I have to do &amp;#x200B; class MyAbstractClass(object): def myFunction(self): raise('Error: Function my be implemented') &amp;#x200B; But this only worked if myFunction is called. This make is very hard for IoC techniques to be implemented correctly. Also the way these classes are inherited are via Mixins, which brings me to my next point... &amp;#x200B; 2) Mixins Make Understanding Code Hard &amp;#x200B; PHP has Traits, Python has Mixins. But because Mixins are the way to do inheritance, I feel they are way overused: &amp;#x200B; class MyClass(Mixin1, Mixin2, Mixin3, Mixin4, Mixin5, Mixin6) &amp;#x200B; Which I feel creats spaghetti like inheritance and wide open for abuse. I've seen instances where Mixin1 is calling a class from Mixin4 which feels like bad design. &amp;#x200B; 3) No Types (Object, Scalar and Accessibility) &amp;#x200B; To start, there isn't really a public, private, or protected attribution within class. The \_\_ in front of a variable can be used to mangle stuff and make it private but protected and public are the same. &amp;#x200B; Moving along, there isn't types for functions or variables. For example, the following does not exist: &amp;#x200B; def doSomething(int var1, MyObject var2): //Do Something &amp;#x200B; Which makes setting standards of what should be passed in a bit difficult to maintain. It's on the developer to do something like: &amp;#x200B; if not isinstance(var1, 'int') raise("This must be an int") &amp;#x200B; Conclusion of Rant The above could be in response to my naivety and newness to python, but so far I do not see how the language is better than PHP for web development, and nothing in the above was about the speed difference. I see a lot of opportunity for badly designed code and bugs. And my next rant with be on Django.....
It could JIT ahead of time? Oh wait.
Does the sandbox: 1. Limit filesystem read/write access? 2. Limit dns/network access? Since those are the 2 most dangerous things in PHP malware
I guess calling it "Code Manifesto" instead of "Code of Conduct" is a PR decision?
[https://externals.io/message/102415](https://externals.io/message/102415)
&gt; method overloading Haha
&gt; and nothing in the above was about the speed difference Bonus speed difference metrics, then: https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/php.html 
Python has it's strengths and is a good tool for many problems. &amp;#x200B; For web, it's not as good as PHP. I was just discussing this with a few of my peers the other day. PHP grew up as a backend language. It has quirks, but nothing that can't be overcome by sticking with modern features and frameworks. Notably, it offloads the hardest parts of writing applications to the host environment, and radically simplifies the programming space. There are certain built-in "primitives" such as datetime manipulation, ease of database/repository access, and low-impedance access to json data structures that make it almost ideal for web development. Core libraries are thoughtful and and ecosystem is huge and growing. The failure modes make debugging during development easy, and mean that failure in production is rarely globally catastrophic. The only downside is that certain idioms make static analysis a Turing problem, so that IDEs will never have the kind of depth you see for other languages.
not a fan of useful features I suppose?
[Zeev Suraski - PHP 7.0 vs JIT PoC](https://www.youtube.com/watch?v=dWH65pmnsrI)
Bigger arrays can still use Int? Or does PHP use non-negative Ints for those already?
&gt; So what's planned for 8? Are we going to finally get method overloading? Array types? Generics? New namespaced STL and deprecate the old STL? How about... we take all shit we have right now, and make it faster. No joke, that's the plan. But I like it :)
Python has killer libraries for machine learning, natural language processing, and probably a few other "now trending" areas where CRUD doesn't matter all that much. Python is less quirky, more consistent, and generally easier for people who studied mathematics to understand when reading/writing code. PHP has a well earned, bad reputation for being gross to those people (http://phpsadness.com/) It's gotten much, much, much better since PHP7 but it's hard to shake off the stigma. 
I think this is really great for learning how frameworks work, by "this" I mean the concept of re-inventing the wheel. But I would not use this in production because its not battle tested. Wheres the tests is the first question I have. You also seemed to couple the framework to the "application" one would write. It seems common standard is to break the framework away, look at Symfony for example its component based, allows you to stitch them together. That or Laravel, the framework is separate from the application in the the sense that you use Laravel to create a new application. That and Laravel is also more component based.
No I'm just very sceptical about it ever being part of PHP
Password hashing and make a proper salt out of a password it's not a simple task, if you aren't complete sure that use my alternative isn't insecure you shouldn't say that, only people who really do a research can. I trust in other software used by a lot of companies, this is why I used it, this alternative, like the functions was existing for ages
It’s not simple. That is why you shouldn’t do it. Just use official password_hash() function that PHP provides and do not create your own or copy other people’s, who created their own.
This smells a lot like CodeIgniter, especially with the `&lt;?php defined('ROOTPATH') or die('Invalid access'); ?&gt;` file headers and the "Forbidden" index.html files everywhere. There is no namespacing, PSR autoloading is non-existent, and it looks like it would be a pain at best to use any composer packages. The components in your system directory should all be composer packages that your framework requires. They should be maintained in your repository and then when installed, they should reside in the vendor directory. The way you have it makes upgrades or even just updates extremely difficult.
Hi, thanks for your comments. I really understand your point of view. This framework is also component based and was created to be detached from main application (but this, obviously, is dependent on that). About the test cases, it is under development. In fact, I expect somebody can help in this situation. About the battle tested, as it is a new framework, then hasn't a case to show. But I'm currently working on refactoring an app and I'm using Flywork to do this. So, in some days I will be able to tell you if it rocks. ;-)
Imagine going back in time to your first php application. But as fate would have it, you used python instead of php. No doubt you would have encountered startup issues but probably worked through them. And after your first project there would come subsequent projects building on your steadily growing python expertise. Then fast forward to present time when you start your first php project. I can almost guarantee that you would end up producing an identical rant, different issues perhaps, but the exact same tone. Changing your thinking from one development mode to another is almost certainly the most difficult task a programmer can face. It's really a question of accepting the culture and convention of a given system.
&gt;What would a JIT compiler mean ? That the people who say PHP is not a programming language because it isn't compiled will finally shut up.
*Hey just noticed..* it's your **1st Cakeday** bakeiro! ^(hug)
Really looks like CI, perhaps OP gets hints from CI ;)
1. https://docs.python.org/3/library/abc.html 2. Don’t use mixins if you don’t like them. They are the Pythonic way. 3. True. However, access control can be enforced via linting. It’s not ideal, but I have not known this to be a major issue. 4. http://mypy-lang.org/ 5. No comment. I don’t do much with threads. You’re welcome to ask questions in r/python and r/Django. 
You can pass your speech phrases too in file to help speect context, annd it works for a better results..
&gt; Moving along, there isn't types for functions or variables. Python actually has pretty decent gradual-typing with type hints, [mypy](http://mypy-lang.org/) and the built-in [typing library](https://docs.python.org/3/library/typing.html#module-typing). You can even express a generics. [Check this example out](https://pastebin.com/HC146NWf) I worked for a few years on a team writing test harnesses for products and it was all done in python. As some of the test harness code got bigger and more commonly used the previous benefit of python's duck-typing started turning into a liability, but using the typing support on the core parts with mypy built in to the pipeline enforcing correct usage of core components, while still allowing duck-typing for rapid iteration on parts that were less critical or not even guaranteed to be kept around, was pretty great. Writing code like def expect_int(x: int) -&gt; int: assert isinstance(x, int) return x + 1 is actually rather discouraged in the python world: duck-typing is a feature, not a bug. (Yes, of course that's not always true. I mostly program in statically, strongly typed languages and I understand how much better that can be for big serious projects that want long term stability and maintainability, but that doesn't mean it's objectively superior in all cases.) If you write code expecting an `int` it's good practice to indicate as much (as we did in that snippet) but if the caller knows that `WhateverClass` will act like an `int` for the purposes of that function why gate them from use? If you wanted an extremely strict language for your current use-case you wouldn't be using python, presumably the flexibility and dynamism is why you're using it. &gt; To start, there isn't really a public, private, or protected attribution within class... Python kinda just says "its all open!!! Modify as you like", which I think creates a lot of potential problems. It sort of does yet really doesn't, and it goes with what I said above about the double-edged sword of trusting the caller to know what they're doing and letting them do what they want while still clearly indicating how you wrote the code. It's pretty universally accepted in the world of python that a leading underscore attribute/method is not part of the public api, and there are zero guarantees that it'll remain the same through versions, and zero guarantees that you can use them without somehow putting the object into a bad state. If you want to use it anyway: you're accepting the responsibility the moment you typed `some_obj._private_attr` `private` and `protected` have no security implications, they're purely a way to indicate to the consuming programmer that something isn't for their use and asking the compiler/runtime to disallow the consuming programmer from trying to use it at all. Python figured it'd cut that last part: it's up to the programmer to consume responsibly. Maybe you don't like that attitude - and I understand that entirely, I happen to like some languages that are much more strict than PHP is - but it's not objectively true that one is better than the other. &gt; I am new to this topic and do not have enough knowledge to dive into yet, but from my understanding Python is not thread-safe. Python is entirely thread-safe, but it achieves this through the [GIL](https://wiki.python.org/moin/GlobalInterpreterLock). In essence: The CPython interpreter (the one basically everyone uses) is perfectly capable of multi-threading for the purposes of *concurrency*, but not for *parallelism*. It can only really use one core at a time even though it can spawn and work with multiple threads. That said it's not hard to spawn multiple python interpreters, one per core, and use IPC to coordinate them as one system... but even then, it's not like in the world of the web you need to worry about that: that's a problem for the application server, not you. (And the application server has dealt with it - it's not hard to get uwsgi systems running in a comparable manner to PHP-FPM with a worker pool that can use all cores on the server.)
// TODO: clearXSS return trim(strip\_tags($value)); &amp;#x200B; Oh boy. There we go again...
PHP has become for web applications what C++ has been for desktop applications. Both areas have others that are newer or better in various ways, but enough time has passed that the standard is now set.
In practice, Python's lack of true visibility control (private/protected) isn't a problem. The Pythonic attitude is that we are all adults here and should act accordingly. The underscores in front of `__myFunction()` imply that it's private. Yes, you can skirt around that and access `__myFunction()` from outside the class, but you have been told not to. In general, people respect that. Sometimes people violate it, but those people usually write so much bad code that fiddling with private methods is the least of their problems. Very occasionally people access private methods and variables from outside the class to do good. The `ReflectionObject` in PHP basically renders visibility controls moot as well. The reason people don't use `private` methods from outside the class is because they have been asked not to, not because they can't.
Probably not in userland, but there could easily be some changes to how PHP works internally, that would require large changes in how extensions work. However the actual changes to be made are determined yet....but bumping the major version is a declaration "people are allowed to make breaking changes if there is a good reason" as opposed to it just not being allowed for minor versions.
Most of them are still quoting snippets of A Fractal of Bad Design. A JIT won’t quiet them at all. 
The most important person: My employer.
http://php.net/cal.php
&gt; 3) Accessibility is OPEN This is one thing Python does correctly. There's no reason to have it in a turing sense. It adds complexity. Access restrictions are a way to enforce programmer behavior, meaning it's overhead. Since communicating intent is a nuanced issue in programming an interface, it makes sense to put a strong control. However, when the solution to circumventing an access restriction is to reimplement the exact same method as an override, which is not a supremely rare experience, you have a bad solution (code smell). The underscore allows a developer to leverage code reuse and repurposing, which is a net good.
I'll be interested to see how it works. I know that my company looked at rewriting one of our PHP applications in C++ so that it would be quicker, but if the performance gap drops enough we may not have to. 
get outta here with your reasonable, well-considered perspective
&gt; introduction of preloaded files Do preloaded files basically act like static files after they're loaded? I've got a fever right now so I might not be thinking straight. Would this make NGINX way more enticing compared to Apache or does it even matter? 
I'm not sure if what you mean is the same as this, But basically a preloaded file can only be modified after restarting PHP because the opcache of the preloaded files are stored in PHP's shared memory, if this is not enabled (as all version prior to PHP 7.4 and it the php.ini setting needs to be explicitly defined in PHP 7.4 and above) PHP needs to verify before using the opcache if the source file has been modified in the mean time. Basically it removes some of the overhead which can be quite considerable for big frameworks where the files barely if at all change. For more details see the RFC: [https://wiki.php.net/rfc/preload](https://wiki.php.net/rfc/preload)
According to the article it does not. It seems the purpose is to provide process isolation not security.
I still can't figure out the benefit of using it. 
Cliffhanger! &gt; PHP will continue to thrive, even without a foundation behind it. However, we have realized that it is not easy for companies, especially in Germany, to give back to PHP. Therefore, together with Interessengemeinschaft PHP e.V. and some key members of the PHP project, we have worked out something to address this problem. Official announcements will be made soon. We will keep you posted.
Unless the task in question is something that can be handled by a message queue or some other long-running process, I wouldn't have thought it would make much difference. The impression I get from various articles about the issue is that it just doesn't make all thar much difference when handling HTTP requests.
not trying to solve a particular problem, just trying to stick to the separation of concerns.
Implied relationship identifier in the hypothetical GetListOfFoosForBar method.
That's funny cause the first line of the article is: &gt; Sandboxing is a technique used in testing and security to execute unsafe, or untrusted code in a safe environment. If it can't intercept filesystem and network read/writes then it ain't a good sandbox for PHP
If not method overloading, then at least constructor overloading. Please..?
[https://pics.me.me/can-copy-your-homework-yeah-just-change-it-up-a-9592346.png](https://pics.me.me/can-copy-your-homework-yeah-just-change-it-up-a-9592346.png)
My first language was C++, then Java, afters PHP/Javascript and now Python. Sure there is frustration when learning any new langauge. My overall concern with the above points is Python leaves a lot of room for bad code. A bad developer is going to write bad code, can't stop that entirely - but there are ways to enforce standards to lessen that. Overall my thoughts, and again I am coming from a naive and new perspective - Python is a good prototyping language. Get something up very quickly and easily - wham bam chop and done. Like a microwave dinner! But if you want to build a really great product (be it web, micro-devices, etc), there are other languages better suited.
Looks nice . CodeIgniter3++
NOOOOOOOOOOOOOOOO! Don't DO IT, PHP!!!!!
Everyone knows that COCs are done by mostly-white men who are pandering to the SJW crowd, in a show of white knighting.
https://www.garfieldtech.com/blog/tmi-outing
Generics, Typed Array return types, method overloading Plz
In deep you will see this is very different from CI, but I'm a CI user for a long time, and was inspired in it.
I feel so posted right now.
To be honest, does PHP really need yet another framework? 
Which is the needle and which is the haystack? ;-)
# N A T I V E A S Y N C
Interestingly the person who wrote that is the same person proposing this "Code Manifesto".
Thanks for your comments, @dlegatt. But, while there is no namespacing, yes, there is PSR autoloading. The components there aren't written by me are loaded by composer. Please, tell me specific points that ConfigurationLoader.php is an "absolute mess". About the trait dependencies, I think it's correct. Why these dependencies should be visible in classes? Thank you.
Oh, you're really funny! 
I'm a long time user of CI and, therefore, I'm inspired in it.
Which part of "expecting opinions and **any help is welcome**" didn't you understood?
Hi, mcneely. Thank you for your comment. You're almost right with this question. But, as known in community, study (and maybe write) a framework is a good way to learn the language and techniques. Just it.
Ugh that article... Can't we just delete it? lol
https://www.humblebundle.com/books/programming-cookbooks Because hopping through 3 pages is annoying.
The PHP book is atrocious FYI
You have global state everywhere. Having `$this-&gt;load` everywhere is a terrible design and means means your dependencies can never be mocked for testing. There is absolutely no attempt at dependency injection or any design patterns, and all of this is based on me just looking at your model, controller, and config loader classes/trait. Any app built off of this framework would be an absolute nightmare to maintain.
Thank for the input. &amp;#x200B; Oh, the platform already handles over 50M unique visitors a month without breaking a sweat. Management tool is staff facing only and I am simply trying to make it more efficient. No regex is needed for mysql and once it hits js for the site, it's all static. The js file is generated when a campaign change is made and no mysql calls are made after that point. Analytics are already taken care of and out of the scope of the original question I made. &amp;#x200B; Wildcard matches obviously have to be done in JS as it simply doesn't make sense to list all pages anywhere, especially in a js file. Yes, the paths are stored as JSON within mysql, but that's only because it doesn't need to be searchable at this point and is only used for storing the settings for editing purposes and again for the static JS generation. Its does not need to be searched at all at this point, so wasn't a need to create another table for indexing.
E\_PLS\_LET\_IT\_STOP
Tests?
&gt; Thanks for the joke Security isn't a joke... &gt; any help is welcome We understand this. We also understand that this framework is flawed to its core and while a project like this can be good to help understand what it takes to develop a framework, we also understand that the effort and time it would take to make this a successful framework is more than most have on hand.
The amount of people who rip on php, without looking at the modern landscape is too damn high. Php still isn't ideal for a lot of things if you are starting from scratch on large complicated systems, but god damnit, if you need a nice lightweight framework to do MVC there isn't a better choice on the planet. No, fucking JS as the full stack is not the damn answer.
They're the same thing.
I don't think you really understand what you're linking to. Garfield was the victim of the exact type of behaviour that CoCs (or this Code Manifesto) are meant to stop. Garfield himself was never found to have violated a CoC, although if memory serves, one of the people harassing him eventually was.
Generally agreed, though Typescript (instead of vanilla JS) on the backend does make it significantly better. I still think it has more and weirder gotchas than PHP, despite some of the ergonomics being better.
Thanks for writing that all up. I got it working in about 5-10 minutes. The only difficult part was the path stuff, I had to mess with that a few times before I got it working. Initially it was doing the same thing that happened in NetBeans, it would stop at index.php within CakePHP. Took a few minutes, but I got it. Fighting the urge to `pre` will be difficult.
There are a few options. 1. Use docker-compose exec in combination with mysqldump command to export the database to a file. 2. Use a GUI to log in to the database container and export via that. I've done both of these, in both export and import directions.
Path mapping is always the trickiest part when you first install it — I feel like documentation around it is largely terrible, and it further confuses matters that the “remote machine” people keep referring to is actually your local machine. Glad you got it working though! And really, there’s nothing wrong with dumping data, Xdebug is just an extra tool in your belt. It’s at its most useful in the situations dumping doesn’t handle too well; mainly watching how variables change across loop iterations and function calls. 
Once my MySql container is running, I use Sequel Pro (or any other Mysql client) to connect to the container using address [127.0.0.1](https://127.0.0.1) then you can use your client normally exporting or whatever
I was just giving a definition of what sandboxing means; It's really aimed at testing, a replacement for the runkit sandbox is what it is at the moment ... &amp;#x200B; However, these are interesting ideas, and sandbox is very young ... let me think about it ... I've got a pretty good idea how to do that in unix, but none in windows, so I'll hassle a windows person and find out what the options are ...
Great job, man! Did you think about using [asserts](http://php.net/manual/ru/function.assert.php) inside the library? Then you will have a possibility to enable/disable contract checks with a 'zend.assertions' directive.
If php gets faster those processes will be even shorter lived I guess.
Not yet. Is in ToDo list.
Thanks for your opinion.
You're totally right! Security isn't a joke. But this is (yet) an experimental framework and "// TODO:" indicates that this part of code it should be improved. Instead of joke, a clarify (link, advice, etc) is more welcome. Thanks anyway.
In regards to your last paragraph; what the hell are you talking about?
I have nothing against overloading conceptually, but I've yet to see a use-case for it that wasn't just bandaiding over top of underlying architectural deficiencies.
The PHP CLI is a short-lived process, but with mod_php under Apache, or PHP-FPM under nginx, wouldn’t it end up running for the uptime of the httpd?
I am not a huge fan of frameworka and have built numerous things from scratch in PHP. It is a very useful tool. A recent project I started on in my free time mandated that I dissect raw .xlsx files (too much work to change their current process and a backlog of far too many files to "just convert them all to CSV"). I had a couple of options but since this parsing was all to end up in a database and be further digested, PHP immediately jumped to mine. It took very little time to find a proper PHP library that easily could process the .xlsx files into an array and start funneling that information into a database. Adding functionality to process these files in batches, check for duplicates... Yeah, I could have done this in several other languages, the entire process. The simplicity of the PHP approach when it came to this project was absolutely absurd. I used to pretty much only know PHP and then branched into a lot of other languages. Python would have had a bit easier syntax for the same task, but nearly two decades now (well decade and a half) unto using PHP, I am able to type the syntax nearly as quickly as I can type this post. When all you have is a hammer, everything looks like a nail. All I had was this one particular hammer, for so long, thaf I would have a very difficult time trying to find or describe a problem that I would be unable to use PHP to solve. People cry and complain so much about different aspects of the language itself. Every year another "PHP Killer" emerges. The facts are, there ARE and have BEEN "better" languages. Better in many aspects, but PHP still prevails. PHP is like the Goku of programming languages, after tons of screaming and frustration, PHP prevails against the odds and much stronger opponents. 
I don't think people do consider it better. I think the general view for the web is it does not really matter which language you use (out of those that have a reasonable ecosystem that supports it), other than for the minority of projects where that require vast levels of performance (in which case you wouldn't pick Python or PHP). 
I get the same impression as you and I honestly think that most instances where speed improvements are sought, it does not actually come down to PHP being the bottleneck. I have had numerous times where people have gone "ugh this is built in PHP and it is so slow!", and pretty much every time it is terrible SQL, improper caching, some whacked out framework or other problem that, even as it could relate to PHP (bloated framework), is entirelt NOT a problem with the language itself. Then you also have this group that argues theoretical milliseconds in projects that do not even exist yet. Their imaginary project would be unimaginably fast in COBOL or ASM or Binary. They disregard the ease of a higher level language over fractions upon fractions of a second with no idea that real world use they will never experience a load, users or other circumstances where a language like PHP would be observed ... By the end user... As being "slow".
They are bringing back default GLOBAL variables and removing POST so everything can just be passed via GET in the URL.
How can I point a gui to a container? Would that have to be installed in the container itself? Is it possible to just use phpmyadmin to access container?
Pretty subjective. reddit, one of the top 5 websites in the world is/was written in Python. django was created by a large news site needing higher availability, some great machine learning / neural network software is written in Python. Facebook created Hack/HHVM because PHP wasn't scaling for them.
Again, I am not joking. Your framework takes all the worst things from codeigniter, which was pretty bad to begin with, and then you tossed out all sense of design or tested patterns. I’ve pointed out all of this in previous replies but you don’t seem to want to listen other than to say that if I don’t like, I should make it better, but I’ve addressed that point too
Whilst a bit of fun those benchmarks are also pretty irrelevant to things that are not computationally heavy like web sites, which is why on things like https://www.techempower.com/benchmarks/#section=data-r17&amp;hw=ph&amp;test=json&amp;l=zijym7-1&amp;f=zik0zb-zik073-zik0zj-zik0zj-zik0zj-zik0zj-zik0zj-zik0zj-e7 Dhango outperforms Laravel. (though frankly that probably says more about wsgi vs php-fpm than anything else) Then for computationally heavy things that those benchmarks are more useful for Python tends to blow PHP out of the water because they have a huge ecosystem of libraries for data science, machine learning, etc that are built on C, Cython, use a JIT, etc. 
You really went out of your way, spending extra time, to not only space out each letter, but to also capitalize each one, just to look like a fucking idiot? That's dedication
Imagine giving a shit about mwop in 2019.
&lt;=&gt; already handles 3 way switches
Because it’s not really an issue. I mean who cares if bunch of junk becomes string ”n”? Most of the ”wtf javascript” lines are just stuff that would never occur normally and just doesn’t matter at all. Even the some possible cases can easily be avoided if you just prefer === over == and use linters.
Can we finally standardize argument orders for things like needles/haystacks
I’d say if the container is running, use a sql client like HeidiSql and connect and export to a .sql file. I’m sure there are more efficient ways, but that’s a decent way. 
The only deviation I made was I left the xdebug congifs in the xdebug.ini instead of polluting the php.ini. Works great. I like that I can add line breaks in real-time without restarting the request if I decide I want to capture something a few lines down as well. Thanks again.
I think I’ve forced myself to forget the spaceship operator’s existence lol. Perhaps -2, -1, 0, 1, 2 then...I have no idea and the concept of negative indexes seems more like a “you can” rather than a “you should”.
# Backup docker exec CONTAINER /usr/bin/mysqldump -u root --password=root DATABASE &gt; backup.sql # Restore cat backup.sql | docker exec -i CONTAINER /usr/bin/mysql -u root --password=root DATABASE 
[Examples of creating base64 hashes using HMAC SHA256 in different languages](https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/)
jesus h christ on a stick
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[removed]
You can bind your container’s MySQL port to a port on local host, then connect to 127.0.0.1:[bound port] through the graphical client. The client will be running on your computer as normal, not in the container. 
So there are two main hurdles for you. First, you need access to a data stream that will feed you updates in real time, then you need to propagate those to your front end, probably with something like websockets. If you are looking for tutorials on how to do that, look around for instructions on how to build a real-time chat app, and modify that for your needs here.
Had a similar situation at my last job. They gave me old Drupal dumps going back ten years. Just raw files, nothing to actually make a functional Drupal project. Evidently they should not have deleted those Drupal projects and they needed the data, but it was not in human readable format. Even worse, they was tons of duplication. Took me a couple days with a PHP script and I had everything they needed. Mentioned it to my boss and he was surprised I got it done so quick. Told me to pretend like I was working on it for another week and just enjoy the break.
When you are so mentally challenged that cannot even post your spam correctly. 
Only if it would be a package manger, wich it is \*not\*. It is a dependency manager \- [https://getcomposer.org/doc/00-intro.md#dependency-management](https://getcomposer.org/doc/00-intro.md#dependency-management) The security checks are in the eye of the beholder, therefore the one who depends needs to check, not the manager (it's not the OS package). However you can rely on services for that, e.g. providers of lists w/ known flawed versions: \- [https://github.com/Roave/SecurityAdvisories](https://github.com/Roave/SecurityAdvisories) A better explanation might be that you should only depend on secure composer packages which you review your own or at least you've got a review process your own (it's not possible otherwise AFAIK) so you actually know that you package is secure. And this in the essence is happening here for Hombrew which is really very sane and sound: To only support versions in the packages which are upstream security fixes supported. This is also the same for many of the Composer package users out there: They rely on the versioning scheme (often Semantic Versioning) to obtain security updates (this is the patch version the Homebrew article speaks about). The difference between Homebrew and Composer is, that Homebrew is for system level utilities and libraries but Composer provides PHP library dependencies (with some exclusive application installations, so called projects, but those as well use Composer to install the PHP libraries they depend on and consist of).
Homebrew for example, this is why they have not moved all PHP packages from homebrew-php into core, just the supported ones, the ones they get security support for (from upstream).
If it's too cumbersome for you to understand and handle Homebrew (or any other package manager), you'll learn the hard way that this is not getting better if the package manager becomes more complex due to needing a container environment first - even if the packages are good old tar files.
Yes, just expose the port and use any client you like to connect to it. Including `mysqldump` directly if you’re so inclined. 
More a differentiator, I would say. IIRC, the "Code Manifesto" was written as a response to various codes of conduct, which have been criticised as being overly negative or proscriptive. In a nutshell, they want to say "Be kind to each other" instead of "Don't bully, harrass, troll, etc each other". I don't necessarily agree that manifestos are better than codes of conduct (I see them as a bit wishy washy), but that seems to be the intention.
Hey, predakanga, just a quick heads-up: **harrass** is actually spelled **harass**. You can remember it by **one r, two s’s**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
&gt; With more than 350 code-rich recipes revised for PHP 5.4 and 5.5, [...] Yeah, I'll pass...
My opinion is that your framework is fundamentally wrong. Security \*must\* be part of all the parts of the normal development flow. &amp;#x200B; The fact that that comment exists and the line right after it shows a fundamental lack of understanding of any security related matters. So yes if you are "**expecting opinions** and any help is welcome" here is my professional opinion: &amp;#x200B; It's a terrible thing that should not exist and I have no hopes it will ever get to a usable and secure state. Even more so when the developer doesn't understand he is trying to build his house on top of quicksand without any decent foundations and anybody trying to say otherwise is "joking". &amp;#x200B; Also you seem to confuse a request for help (" **any help is welcome**") with a demand for help. So yeah go ahead and try to learn from it. Just make sure no innocent users are falling into the trap of using it.
Kudos for having the patience and motivation to put together your own framework, regardless of the flaws mentioned by others. If you’re doing this as a learning process, then that’s great and you would have learnt a lot. I just hope that this project stays as that - project. 
Technically, a JIT compiler does not create native code, it only *transpiles* code interpreted by an interpreter to code interpreted by a virtual machine. Just like JavaScript is not a programming language in that sense.
\+1 for MVC buuuuuu uuu uuuu uuut, Ruby on Rails also does great MVC (or even better if your app fits their assumptions). It's only PHP7 that gave us AST and performance. Also JS on the server is happening. Would be nice if your "keep it real" comment would stick to reality. ;)
Then both `Bar` and `Foo` are domain entities? And by giving them repositories they would know how to retrieve their respective relationships? &amp;#x200B; You may want to consider following alternative: A lot of ORMs instantiate objects from DB with proxies in place of properties/methods representing relationships. This way, as soon as relationship members are accessed proxy does the retrieval. ORMs sometimes even allow for extra parameters/callbacs that will be translated to SQL predicates so that only subset of relationship members are retrieved. This way code that work with those domain entities (`Bar`, `Foo`) does not need to know which repositories (or other things) they need to have working relationships. It's the code that retrieve `Foo`s or `Bar`s that knows how relationships are to be treated and set's appropriate code. &amp;#x200B; Second alternative. Make respective repositories aware of relationship of type/entity they manage. That way, you can skip entities altogether and retrieve required data directly. If you allow for filters as arguments (data and/or callbacks), then you can have very precise queries that map to specific joins with conditions you need.
No, I mustn’t 
This is some low quality spam you’ve got here
We could, but do you really want to throw all the PHP 5/7 code and muscle memory away?
Well not funny like your century-old code,,, Have heard about PHP5.3 or etc? Your code is unusable with the latest version of PHP and libraries
Please don't. Save your time haha.
PHP 8 will land with JIT available so PHP can finally be used in computationally heavy things with less performance overhead. C FFI is soon available but I have not read that much about it to know for sure how it is implemented when compared to Python, but I presume C libraries are usable outside web PHP SAPIs after that. But you are certainly correct, often language benchmarks are just for shits and giggles and leave much to be desired when mirroring against real-world use cases. The web world is tough to properly benchmark between languages, as there are so many moving parts and "minimal" implementations vary quite a bit between each language.
Rails is the single most terrible 'modern' framework I've played with. It's a massive blackbox, and I find the syntax (and mantra) totally unnatural and hides things. To each their own but I've never seen a rails app that wasn't a fire. I honestly can't understand why folks enjoy ruby. I really can't as much as I tried.
That and the views on his YouTube channel would only encourage him
Anything related to subprocess handling, signal handlers, threads, etc are so much nicer to work with in python. A large part of that is the OO interfaces provided by the standard library.
\&gt; if the package manager becomes more complex due to needing a container environment first Using docker makes the package manager unnecessary. Instead of installing PHP you'd pull the php container. If you're working on a project where you need multiple dependencies then you should probably build a docker environment for local development anyways.
Yes
Need to read more about it then, thanks.
Also don't post links with affiliations to earn some bucks.
False dichotomy, the legacy APIs can stick around for version 8, eventually be gradually deprecated through versions 9 10 and 11 and removed.
Not OP, but you can use the Reflection-API to access protected and private members of classes from the outside.
patreon incoming
they should create a foundation that sells licences. this way I can buy a license with my company and put it down as a legit expense. The license doesn't really do anything other than provide a way to contribute in an economical viable way for companies.
Thing are moving quicker than I expected thanks to Sebastian ... and so despite what I wrote yesterday, PCOV is now merged into php-code-coverage and will be available from 1st February, php-code-coverage 7.0 *Sorry for all the noise from my blog*
[`Mockery`](https://github.com/mockery/mockery)?
 $service = $this-&gt;container-&gt;get(Type::class); +/** @var Type $service */ $service; &gt;Is there a better way? Yes, use DI
I watched and regretted. Wasted my data and couple of minutes
Very interesting. Thank you. Presumably there is not really a way to allow LIKE or regex queries against encrypted data?
Is there any project to get it compatible with [Codeception's c3](https://codeception.com/docs/11-Codecoverage#Remote-CodeCoverage) to allow code coverage stats with end to end tests?
You could build your own, but honestly embedding some Slack chatroom in an iframe would probably be easier.
You were brave enough to post this, so whatever people are saying, continue! It's probably the only way you learn. Learn from certain mistakes, see how others have found solutions for common problems. Evolve. (be like "them" in a couple of months, or years) Never give up :-)
There isn't, I've not seen this before. But, it looks like it uses the CodeCoverage driver, so I don't see a problem with it, unless it assumes xdebug is the only available internal driver (I see no such logic) ... I think it best to open an issue in the codeception repository and ask those people what's what ? I'm scared by the mention of needing to disable gc to avoid zend_mm_heap_corrupted in that spy code ... that's, well it's wrong ... and covering up some internal (to php, or possibly Xdebug) bug.
Full text search and arbitrary querying of ciphertext requires FHE and neither OpenSSL nor Libsodium have FHE implemented in them.
Sorta like this? https://paragonie.com/enterprise (If someone wanted to purchase such a license and not use it, that'd be an easy way for companies to support our open source work.)
[socket.io](https://socket.io/) has a good tutorial that will walk you through how to build a chatroom with their framework. This could be achieved reasonably within a day or two I think, as you'd probably spend most of the time integrating it with your app's authentication set up and styling it. If you'd rather use PHP for the backend instead of Node, you could look into [Ratchet](http://socketo.me/) or [ReactPHP](https://reactphp.org/). In lieu of sockets, one alternative option with pure HTTP could be long polling an API. Implementing that with JavaScript and PHP is relatively simple. But, I can't say how long it would take to write an implementation for your current app. Sorry that I don't have any pre-built solutions to advise. Hopefully this helps point you in the right direction.
Thanks for that. Yea definitely know I could build my own, but this is more of an afterthought that to throw something up there just to see if it would work for the use-case of inter employee chat. So not really worth it to build something (probably very simple) just to see if it sticks to the wall.
The `.phpstorm.meta.php` file really is quite nice. We use one in the [Atlas ORM](http://atlasphp.io) to help with IDE autocompletion on returned [mapper, record, recordset, etc. objects](https://github.com/atlasphp/Atlas.Orm/blob/3.x/resources/phpstorm.meta.php).
&gt; You really went out of your way, spending extra time, to not only type out this comment, but to also hit "save", just to look like a fucking idiot? That's dedication 
use DI on your controllers \*
How can I use DI in PHPUnit tests?
Isn't the point of a unit test to isolate your test subject from dependencies through mocks? I could see this for an integration test and in this case, sure, that could work. But your article makes no mention of testing and looks like it is advocating using a service locator. I'm not going to say any more on this subject because i've had this conversation with you before.
&gt; But your article makes no mention of testing and looks like it is advocating using a service locator. The gif shows `setUp()` method, that well known PHPUnit method. I've updated the post, to prevent this confussion. &gt; Isn't the point of a unit test to isolate your test subject from dependencies through mocks? Not sure what you mean, I need to test service.
Why not everywhere you can?
Ok, thanks 
&gt; I've updated the post, to prevent this confussion. Thank you. Without context, `setup()` could be anything.
If programming becomes like this, I'm out.
Question about Docker and Magento 2 — I love Docker and have been trying to make Docker my go-to local development solution specifically for Magento 2, but am so frustrated by how incredibly slow it runs for many tasks. Using the docker-compose file below, I `docker exec` into the webserver, `cd app/` and then I run `php bin/magento sampledata:deploy` and walk away from my computer for *at least* 15 minutes while that process runs. Then, running the CLI `php bin/magento setup:install` setup Wizard was somehow even worse, taking 25+ minutes. It didn't even finish, I ctrl C'd out of there on the 26th minute. &amp;#x200B; I suspect this has something to do with my mounted volumes. If I am setting up my docker-compose file incorrect, please feel free to let me know: version: '3' services: web: image: webdevops/php-apache-dev:7.2 container_name: m2-sandbox-webserver restart: always user: application environment: - WEB_ALIAS_DOMAIN=magento.local # Setting the webroot to the pub/ directory prevents site visitors # from accessing the Web Setup Wizard and other sensitive areas of the # Magento file system from a browser. - WEB_DOCUMENT_ROOT=/app/pub - PHP_DATE_TIMEZONE=PST - PHP_DISPLAY_ERRORS=1 - PHP_MEMORY_LIMIT=2048M - PHP_MAX_EXECUTION_TIME=300 - PHP_POST_MAX_SIZE=500M - PHP_UPLOAD_MAX_FILESIZE=1024M volumes: - "./src/:/app:cached" ports: - "80:80" # HTTPS - "443:443" # In case you want to SSH into container instead of using # docker exec - "32823:22" links: - mysql mysql: image: mariadb:10 container_name: m2-sandbox-mysql restart: always ports: - "3306:3306" environment: - MYSQL_ROOT_PASSWORD=root - MYSQL_DATABASE=magento volumes: - db-data:/var/lib/mysql phpmyadmin: container_name: m2-sandbox-phpmyadmin restart: always image: phpmyadmin/phpmyadmin:latest environment: - MYSQL_ROOT_PASSWORD=root - PMA_USER=root - PMA_PASSWORD=root ports: - "8080:80" links: - mysql:db depends_on: - mysql volumes: db-data: external: false And my root directory structure: . +--.docker/ +--src/ +--app/ +--bin/ +--dev/ +--generated +--... +--.gitignore +--composer.phar +--docker-compose.yml &amp;#x200B;
You might want to look at this code: https://vessel.shippingdocker.com It’s for Laravel but is easily customizable for other apps (I use it for WordPress, Magento, and small custom apps).
Awesome! Sorry — typing from mobile at work and can’t actually download the composer package... does Vessel use volumes at all to interact with the code on the guest machine?
It's a phpestivus miracle!
Thanks. Did not think about asserts. But the way they are used, they will be disabled in production code. So these checks won't happen or don't even generate opcode. 
7.1 is still on security patches till december 2019. And the code is tested and will simply run with 7.2 and 7.2. Also the \`composer.json\` simple puts everything from &gt;= 7.1 and &lt; 8.0 (hence the \`\~7.1\` version contraint)
I am totally with you on the "abusive" side on annotations. I didn't like them in my earlier dev days. There is a thin line between a good use of annotations and way to much. While this library does relay on annotations it is also more of a "showcase" for [https://github.com/goaop/framework](https://github.com/goaop/framework) and what can be done with it. On this case, creating before/around/after checks on your methods and/or class.
I was able to get around this problem recently by using php-code-coverage directly to write reports from various processes into a temp directory, and then write another small script to merge them all into a single report. It does take a bit of disk space and some extra time, but it seems to get the job done. I may end up borrowing from the solution linked here by spinning up a little server and having the other processes push coverage data to it over a socket instead of writing the reports to disk at all.
And thereby everything that is still Zend.
/u/dlegatt \-- I think your explanation is good, but I'm just going to follow up with an example. It's not necessarily the cleanest code, but it follows the normal methodology I use for unit testing code in PHP and Java. [https://github.com/thtroyer/noaa-cap-alerts/blob/master/src/NoaaCapAlerts/Model/NoaaAlertManager.php](https://github.com/thtroyer/noaa-cap-alerts/blob/master/src/NoaaCapAlerts/Model/NoaaAlertManager.php) This is part of a NOAA parser for weather alert data. This class relies on 2 dependencies -- an object that downloads the XML (XmlProvider) and an object that parses XML into PHP key/value (IndexParser). It then loops through the results and creates new data objects for each. To test this code, we don't care if its 2 dependencies work as expected. We only care that 1) it interacts with its dependencies correctly, and 2) that the logic the class handles does so correctly. Mocks are designed to be controllable stand-ins for dependencies that we can control, and the classes we mock are (by default) never executed. Configure a few mocks, toss in some data, and validate that it's correct. [https://github.com/thtroyer/noaa-cap-alerts/blob/master/tests/NoaaCapAlerts/Model/NoaaAlertManagerTest.php](https://github.com/thtroyer/noaa-cap-alerts/blob/master/tests/NoaaCapAlerts/Model/NoaaAlertManagerTest.php) (PHPUnit's test doubles documentation is pretty good: [https://phpunit.de/manual/6.5/en/test-doubles.html](https://phpunit.de/manual/6.5/en/test-doubles.html) You can do some crazy things with them if you have to.)
If you opcache enabled and it has a cached version of the file, then yes. A file read will always have a system call hit, even if the file read doesn't actually hit the hard-drive. If OPCache has a cached version of the file in memory, then it will skip the system call. This means for example that storing your application's config in a `config.php` file that is loaded through include/require will be more performant than having it in a `config.json` file and json_decode(file_get_contents(..)) of it. Getting down to zero system calls per request served is a good goal for making a PHP application fast. 
Yes, so you can just edit your code as you normally do and the changes are live so you can even do hot reloading with Browsersync or keep Gulp or npm in the background watching for changes and you don’t have to restart containers. I never bring my down actually, they’re always up. Also make sure you’ve set Docker up to get enough CPU and RAM.
I like, but we can't use it in the real world ... &lt;?php require "vendor/autoload.php"; class Foo { public function method() { return "this can't work"; } } $mock = Mockery::mock(Foo::class); $foo = new Foo(); var_dump($foo-&gt;method()); ?&gt; However ... &lt;?php require "vendor/autoload.php"; use \mimus\Double; class Foo { public function method() { return "this can't work"; } } $builder = double::class(Foo::class); $builder-&gt;rule("method") -&gt;expects() -&gt;returns("this works"); $foo = new Foo(); var_dump($foo-&gt;method()); ?&gt; You just can't do some of the things we need in PHP alone, and however weak you think the reasoning, it's easier (read, quicker) for me to make the unreasonable reasonable, than it is to disrupt a massive code base, for the sake of purity ... We know we created these kinds of problems, and when business requirements allow we're fixing it. But, in the mean time, we have a lot of code to test ... I do like mockery, it's very nice ...
Thanks. Trying to implement some lazy loading of a compiled-on-the-fly config file and just want to make sure it's not going to hurt to much If it ends up doing an include() of a compiled php file, that'll probably be more performant than file_get_contents right?
Thanks for your comments.
Im not sure what you are getting at with that code example? Does minus replace the actual foo class? If so its not clear neither from this example or from the readme of minus.
Yes, it replaces it ... First paragraph from readme: &gt; At this time, the definition of Foo has been replaced with a mock, it has the same interface as declaration Foo but none of the methods do anything - they have been stubbed: Subsequent calls to new Foo will create a test double, and $object is instanceof Foo.
If you want an int, explicitly cast to an int: $pennies = (int) $some_amount*100; But also, never rely on PHP's internal number handling for money, use a money-specific library, such as http://moneyphp.org
So there is only 1 single goal for an entire major version?
Lol, your argument is muscle memory?
I thought at much too regarding casting to int but it doesn't explain how "4.44"*100 is getting the incorrect result all of a sudden. 
One of them. Yes. PHP is a language with a good backwards compatibility. If you change the haystack/needle order to be consistent, you are throwing away a lot of existing code for precisely zero technical gain. Even if you add namespacing and only the new code has the consistency, you still have to throw away what you are used to. Besides, if you have to use a lot of string functions, you are probably not abstracting things enough. The real problem often is in the userland code with terrible APIs, lack of tests, useless tests, incontinent code styling, etc. 
Maybe now it has more bits of precision.
@MarcelloHolland, this is the target: to learn! Your comment make my resilience stronger. Thank you very much!
That doesn't make sense to me. The initial value is what it is its getting changed during the operation to something slightly off. Plus its inconsistent. I am processing a fair number of transactions and almost all of them are fine. 
1. http://php.net/manual/en/language.types.float.php 2. /r/phphelp for God's sake
Can the mods to move it?
Float-value math is weird, and it's not a PHP problem. It has lots of approximations, so you have to be extra careful, like always using round after an operation like that. For example, I'm trying sprintf("%.20f", 8.87*100) and get 886.99999999999988631316
Also thanks for the link that's getting to the issue for me. Its odd to me that it wasn't a problem prior to upgrade though. 
You shouldn't cast to int because `(int) "4.44" * 100` will return `400` which is not the correct number of pennies you can use `round($some_amount * 100, 0)` `Don't use int in currency because currency isnt always an integer`
Thanks digging through this is helping me sort it out http://php.net/manual/en/language.types.float.php Oddly this was a nonissue prior to upgrade. We've been running this software for several years. 
Missed some braces, updated to fix. *And I recommended using libraries for money*. 
Can someone ping me when they stop eating each other, and which the biggest fish was.
Pretty odd combination of books. Windows Powershell, RegEx, Perl, PHP and Android. Second row. SQL Cookbook, Javascript and Arduino and Raspberry Pi and Bash. That's not *too* unrelated, if I was to stretch a bit. Third row. Scala, CSS, Python, Docker and R? Who has the time to learn or work with all these disparate technologies and languages? 
A number can never be more significant than its least significant digit. If you're working with hundredths, your numbers should display no more than the hundredth. When you're multiplying out by 100 to remove all significant digits, cast to int. As for float representation, it's with [any language](http://0.30000000000000004.com). Limitation of how the processor represents non-integer arithmetic as integers internally. Researchers are just now discovering ways to [eliminate errors](https://www.hpcwire.com/2018/01/17/inventor-claims-solved-floating-point-error-problem/) with FP.
Affiliate linking trash
Maybe Perforce will start hiring PHP evangelists like me and we can really start competing out there!
Use this instead: https://github.com/phpexpertsinc/MoneyType
All you do is go around reddit yelling at people for using caps... You have a very poor quality of life! https://www.reddit.com/user/g64
Most frameworks are doing this by default. Since you will probably have multiple config files, the framework will merge them together into one big config file. This way only one file is read from disk during a single request. To optimize this further, there is also the ability to "cache" those files into memory (like memcache, redis or smt else). This way you will save the complete IO on this file.
Preferable something that demos user authentication. Thanks!
This is normal float behavior. That's why you always use round to display floats, nd choose your precision such that the error is insignificant enough to disappear. If you need absolute precision, you shouldn't use floats in the first place.
Maybe Perforce will just wire $1 million to my bank account. ^Am ^I ^doin ^it ^rite?
So, for developers that don't really care who owns what - will this adversely affect anything? Business as usual?
ah good point, thanks. just as a last sanity check, here's the real use case: using @Annotations on entity property names that define the column in the db that property maps to. we're using doctrine/annotations to read the annotations, then generate a map in [prop =&gt; column] format. the scanning might be adding unnecessary overhead (or might be negligable), so we're thinking of doing a "lazy load" where if no model.mapping.php (or something) doesn't exist, scan annotations, create map, and save it as a file on the server. then on subsequent calls it'll just open that mapping to get the map instead thanks again 
Does this mean I can PHP unit for code coverage reports without the need for xdebug to be installed?
https://laracasts.com My go to when first looking for video tutorials related to Laravel. My advice would be to look at some of the free videos on the site and compare them to others, to see if it fits your needs, before buying a licence.
Yes.
Wish I could upvote twice
All this time I thought ZF died after version 2.
It should have
Thanks
Well, PHP now stands for "Perforce Hypertext Preprocessor". J.K. it doesn't matter. Nothing matters.
OMG! Chris Rock &amp; Louis C. K. approves!!
Is there a way to 'track' these calls? 
&gt;Sorry for all the noise from my blog Don't be, it was a really great read, gives a good overview of XDebug, phpdbg and pcov!
This has nothing to do with PHP, you could ask in a legal sub and should probably state where you're from because these things might be void in some regions.
My one and only response to this would be to laugh, delete the email, and go about my day.
You might learn things in the interview which make you not want the job. Feels like a trap.
Yes. For what you can to, the class/method that does this scanning, can use some kind of cache (like i mentioned: redis, memcache) you will provide the Entity::class as an ID so search for cached mapping. If no caching exists, read it, put it into the cache (or file) then return the result If the result exists, return it right away. In some sort of pseudo code: ``` function getMapping($class) if ($cache-&gt;has($class) return $cache-&gt;get($class) $map = $scanner-&gt;createMapping($class); $cache-&gt;set($class, $map); return $map; ``` Or something like it. But you are on the right track. Another thing you could do is look a https://github.com/goaop/framework. That does some kind of caching and reading annotations/creating proxy classes for you. Maybe this can help you out as well
The one and only: https://course.testdrivenlaravel.com/
This could only be done by copying all global library functions to a built-in class. e.g. String::strpos() etc. &amp;#x200B; maybe this could be done in v8 and then later remove the global ones in v9.
This look really sketchy to me. 
wow, eff that. 
I wonder what the company is like.
Depending on what you are trying to achieve you could explore doing that kind of filtering on the client side. I was playing around with a non-searchable encrypted DB in unison with a local pouchDB synchronisation a while back and got pretty far. However, combining the possibilities of that approach with smartly used blind indexes of ciphersweet could probably get me there. I have no proof of concept for this idea, though. Am just inspired by the article.
Never. Run!
Going by the pre-interview contract.... a major liability
might want to try /r/legaladvice
Yeah if you wanted to decrypt *everything* and search client-side, that sorta works. :)
Seriously, wtf?
They've probably had problems with devs backing out mid contract and damaging the recruiter's reputation
US laws stipulate that everyone (in the private sector) is an "at-will employee" - you can leave any time and can be fired any time for any reason (as long as it's not discrimination based on demographics)
&gt; it stipulates a $10,000 USD penalty if the client likes me and yet I decide not to the take the job. Hand them your agreement, where you stipulate that the agency must pay you $10,000 USD if you like a job, but they decide not to take you.
That’s not normal.
I wouldn't go near that. smells like ass.
Make sure to share it to reddit first. I need the laugh. This is the best joke I've read today.
"The Company" is the recruiting agency, right? You'll have to pay the fine to the agency, not the eventual employer. That's still absurd and I would never sign that document, but it's slightly less strange.
[Run.](https://www.youtube.com/watch?v=oeX1XXQNi-Q)
Can you copy that letter and change the text for them to give you 10k if they don't take you? That's the only appropriate response I can think of. Haha.
This would be a really hilarious response, haha.
run away as fast as you can. do not put up with this, never put up with this. we are professionals.
hell yes, please do this 
Why? I still use ZF2 at work (will upgrade to ZF3 once my backlog clears up a bit) and it's a perfectly fine choice, especially for enterprise projects. It wouldn't be my first pick, but it's good that there are mature alternatives to Symfony. The only other framework that I'd seriously consider is Opulence but unfortunately it doesn't have a big enough community. Laravel is a very good choice for certain projects and a good framework in general, but I absolutely hated its magic (Eloquent, facades etc.) and I'm quite happy to be working with something else.
You're right. It's not all bad. I started building with ZF1.12. I liked it so much more then. ZF3 has some good improvements, but its really too much for my needs. I'm not running an enterprise app. I need something lighter. 
If nothing matters, then not mattering doesn't matter which means it matters. So... what the fuck, guy?
Besides other recommendations, there's also [Laravel Testing Decoded](https://leanpub.com/laravel-testing-decoded) by Jeffery Way who also runs Laracasts. It's for Laravel 4, but most of the content should still be relevant.
[BC Math extension](https://secure.php.net/manual/en/book.bc.php) is also a pretty good choice.
Woop
Thank you for your patience and comments.
&gt; Thank you. Without context, setUp() could be anything. I had wrong assumption, that most PHP devs know PHPUnit. I'll be more careful about that, thanks. &gt; As far as the test, are you testing the service, or are you testing the container? I'd rephrase, are you writing tests or are you re-writing container with mocks per each test all over again? 
Some recruiter. Crazy. 
"we think you'd be perfect for us as the lead PHP developer of our new child pornography sharing platform! no? thatll be $10,000" this is a scam 
Yes. Strace is the tool used for that. Here is a script that will attach strace to PHP FPM processes and spit out the syscalls. https://gist.github.com/Danack/de16db746dd2c6a29c8d This shouldn't be done naively in production, as it can generate 100KB/s of data per worker. Though you can filter which syscalls get reported, which can be used to track down rogue ones, if you really need to.
I would ask for $ 15 000 penalty in case **you like them yet the client declines you**.
It's worthy of /r/sadcringe if you consider that they probably were totally serious about it
Seriously, run far away from stuff like this.
IANAL but I have gone ahead and drafted a template you can use as a response: lol no.
It's the kind of company devoid of any ethical compass, clueless about their violation of labor laws, and severely lacking in plain common sense. Apart from that, it's fine.
/r/recruitingHell /r/cscareerquestions
That's such a hard no on that contract, I don't even know where to start.
Tell 'em where to shove it and then block the number/email address, that's some real shady stuff.
Why should my unit test be concerned with the container? My unit test should not know the container exists, so no, I don't mock it. It doesn't need to be involved. The only thing I am concerned with when writing a unit test is my test subject. If that subject has any dependencies, they will be mocked, not concrete instances.
I've seen pre-interview contracts before and refused to sign them, and they were only locking me into accepting a salary if offered (I wouldn't take that because there are other factors in accepting any job). I see them as sort of like the trick they play at car dealerships where they try to get you to sign a "if they payments are this much, I'll buy the car" note before they go talk to the finance manager, and without giving you any more details. &amp;#x200B; This is a whole other level, and companies like this deserve to be shamed. There are so many bad recruiters out these, and this seems like yet another one. Feel like sharing the name?
Please cross post this into /r/recruitinghell
Fuck that shit. &amp;#x200B; We will do the opposite - interview you and then offer you a contract project at your normal 1099 rate so you can see how we work and we can see how you work and we don't waste your time or ask you to work for free (an uncool move), but there is no penalty ever. That's just shady as fuck.
That's what I'm guessing. Recruiter doesn't get paid unless the candidate sticks, so this looks like they're trying to double dip. I highly doubt this is legal.
Abort bruh
[https://laracasts.com/series/build-a-laravel-app-with-tdd](https://laracasts.com/series/build-a-laravel-app-with-tdd)
From the title, I thought they were going to give you 10K to attend the interview.
Well, not everything, obviously. I imagine some filtering on the server with indexes and then filter accordingly Client-Side. As for the "dangerous": how so? If there is ultimately a particular set of data the client is entitled to decrypt than decrypting that data Client-Side is the safest place, is it not? I obviously have no idea what OP is trying to do, but depending on the scope of the data the client has to handle, a local keychain protected by a masterkey should secure the locally stored data sufficiently.
&gt; As for the "dangerous": how so? If you're always accessing a lot of records (&gt;= sqrt(number of rows)), you introduce the risk of DoS vulnerabilities. (Memory usage, etc.) Furthermore, always decrypting a lot of records means you risk leaving a lot of plaintext somewhere in memory. (Even if we try to zero it out, there's no guarantee the PHP engine doesn't cache a copy somewhere.)
 class TripplerXResponse extends ArancaytarResponse { public function __construct() { echo " lol no, fuck off. "; } } &amp;#x200B;
They make those contracts for people who sigh contracts without reading them. Unfortunately that happens a lot.
Yup, very subjective. And I've always said "my thoughts", never that it was fact.
Run. Any company that tries to pull a stunt like this is not one you will enjoy working for. That is *not* normal, and sounds like an extremely high-pressure way to force you to accept a low offer. I wouldn’t be surprised to find out it’s also illegal, or at least unenforceable. 
This looks like a short term contract masquerading as a job. It's weird. Very atypical. Poorly worded. Run away.
You accept to do the interview for a 20k$ compensation. And then we'll talk.
&gt; I've seen pre-interview contracts before and refused to sign them I've never seen one. I've never heard of anything like this. It all sounds weird and sketchy.
I'd probably start with configuration files before using `.env`.
Yeah the whole time I was reading this I was thinking, this can't be legal. It is likely a totally unenforceable contract that the recruiting agency (or whoever) is pushing to try and force someone into a bad job. I would stay far away from this.
Not sure what you mean. My config files pull data from the .env file?
Glorious!
I know you :)
I would suggest not posting your CV on a public forum like this unless it's anonymised. It likely links a lot of personal details that may not be advisable to have posted publicly.
If you are able to, you should name the agency. This behaviour is completely unacceptable. I'm pretty sure this will piss off the company that is doing the hiring as well. 
Lordy, this is really dodgy. Don't touch these amateurs with a bargepole. I've had sketchy recruiters ask me to work a day for free before, but nothing this dodgy. 
&gt; it stipulates a $10,000 USD penalty if the client likes me and yet I decide not to the take the job. Hangon, they want **your** money? Fucking scamming parasitic cunts.
Well, performance is definitely a consideration in this scenario but can be handled. But just to be clear, I am not advocating full decryption on the server. As a matter of fact, the point of securing the DB and leaving PHP with the power to fully decrypt records highly depends on your needs and should be avoided if possible. If I understand the possibilities correctly, one could simply create blind indexes without ever exposing the full record to the server at all. I imagine the following approach: 1. The user enters particular sensitive information (let's say a SSN) 2. The client encrypts the complete field (maybe with AES with a random generated salt saved to his RSA keychain) and part of it as an additional value using a key shared with the server (let's say the last 4 digits). 3. The server now receives the record, decrypts the "last 4"-field and "recrypts" it as a blind index while the actual full record will be stored as is. In a request scenario, the client could now pull records by "the last 4", enabling the user to filter down more granular on the client side. The client could never decrypt records without holding the right key (even if a search would return more rows than the user has access to) while PHP could never read the full SSN and the database not knowing anything anyway :-) But in the end it all depends on what kind of operations one would need to do on the server with which records. Hence, without knowing what OP wants to do, we can only philosophize.
This isn't a Seattle based web design company, is it?
Scammers. Name and shame.
How do I combine these three print statements into one line? &amp;#x200B; print("&lt;URL&gt;[http://192.168.1.5/cisco/images/](http://192.168.1.5/cisco/images/)"); print(rand(1, 6)); print(".png&lt;/URL&gt;\\n");
I mean I would just store them as flat config data, independent of `.env`. $config = [ 'database' =&gt; [ 'username' =&gt; env('DB_USERNAME'), /* ... */ ], 'meta' =&gt; [ 'foo.com' =&gt; [ 'category' =&gt; 'Category Meta for foo.com', 'post' =&gt; 'Post Meta for foo.com', ], 'bar.com' =&gt; [/* ... */], /* ... */ ] ]
The PDO methods execute and fetch both return false on failure. if (!$stmt-&gt;execute($this-&gt;Conditions)) //Whatever you want to do When i want to get a single row i use this paradigm: return ($result = $stmt-&gt;fetch()) ? $result : null; From my PDO get function i either get my object or null
&gt; If nothing matters, then not mattering doesn't matter which means it matters. But if nothing matters, then *it mattering* also doesn't matter. Checkmate.
Im sorry but how does this relate to my question?
In your question title you said you were using prepared statements.
Yes but my question is when I fail to insert what should I do? Should I simply try inserting into the DB again?
Sure, but then wouldn’t be able to edit them on a per environment basis. Currently have one github repository with Laravel code for a blog deployed on 5 different sites, so I think my only two options are .env and database.
&gt; Yes but my question is when I fail to insert what should I do? Incorrect, your question was: &gt; How can I try and catch when an insert statement fails? Which i showed you. &gt; Should I simply try inserting into the DB again? No one but you can answer that question, you can do whatever you want.
So what other methods are there to log? If the log fails how should i continue with the process? Because I need to have this info no matter what.
 set_error_handler("handle_errors"); function handleErrors() { if (($error = error_get_last()) !== null) serverLog("ERROR: " . $error["type"] . "\r\n" . $error["file"] . "\r\n" . $error["line"]); } function serverLog($error) { file_put_contents(__DIR__ . '/' . "server.log", print_r(date('Y-m-d H:i:sP') . " - " . $error . "\r\n" . "\r\n", true), FILE_APPEND); }
What a crock of shit. I am also searching for jobs in Houston and the number of employment scams I get on the daily is too damn high. Calls, e-mails non-stop. I am not sure if it is because I am IT but so many overseas calls asking if I want a job trying to get me to send out my SSN, home address, bank account etc. for a guaranteed job I got based off of my resume. 
I guess there is some kind of sanitizing-error. I assume you have successful calls to stripe and ensured that the response works correctly? If I read the underlying panic in your words correctly, we are talking about a system in production and you need a quick and secure assessment of what is happening? If nothing else helps, you may want to write files in case of such errors containing the info you need along with all error-reporting you manage to collect on the "case". Needless to say, this should be an emergency measure, something is off with your code.
Maybe different config array depending on the domain would work, but I don't think this would be a good option.
Some people just do not care. Try to imaging the guy/girl who constructed this scheme, how do they view other human beings?
Ups, haven't refreshed, u/Necromunger was faster and more precise. cudos
The only fail proof way to ensure that that you have reference to the transactions is to save the order object (or what ever you have) **before** you charge the customer. If it fails to save, just alert the customer and allow them to retry. Once it's saved you pass your ID to stripe using the `metadata` parameter. Then you just reconcile later to ensure the transaction was approved. &amp;#x200B; [https://stripe.com/docs/api/charges/create?lang=php#create\_charge-metadata](https://stripe.com/docs/api/charges/create?lang=php#create_charge-metadata)
Thanks
If a query is failing, what's to say `file_put_contents` will work?
&gt;something is off with your code Things can go wrong that have nothing to do with your code. Hard drives can corrupt, memory can fail, networks can crash. 
Google says: https://www.complaintsboard.com/complaints/fcs-ltd-puresoft-west-palm-beach-florida-c109622.html?page=4 
We said the same when Oracle purchased Sun (Java). 
http://php.net/manual/en/language.operators.string.php
You'd need to install the pcov extension instead though, PHPUnit alone won't do it :)
 print("&lt;URL&gt;url"); print(rand(1, 6)); print(".png&lt;/URL&gt;\n"); Why are you using print?. If you want to concatenate then \&gt; print("&lt;url&gt;url".rand(1.6).".png&lt;/url&gt;\\"); &amp;#x200B;
&gt; print("&lt;URL&gt;http://qww.com/aa/images/"); &gt; print(rand(1, 6)); &gt; print(".png&lt;/URL&gt;\n"); Literally? ``` ob_start(); print("&lt;URL&gt;http://qww.com/aa/images/"); print(rand(1, 6)); print(".png&lt;/URL&gt;\n"); $buffer = ob_get_clean(); print $buffer; ``` PS: This is shit code, don't do it. ☝️ Learn this instead: http://php.net/manual/en/language.operators.string.php
I'm not sure if your serious or not but ok. - A PDO execute function might fail if the bind params given in the supplied array do not match the number of bind params. - A PDO execute function might fail if there was invalid syntax in the SQL statement. - A PDO execute function might fail if you violated some constraint like not giving a not null field without a default. Using file_put_contents is an attempt after assuming there was a PDO Exception thrown or any other number of things that could have gone wrong.
um... I would suggest not posting before even reading the post. There's no CV anywhere.
Thanks.
Then deliberately flunk the interview :p
It's not outside the realm of possibilities to face an untraceable error. But let's face it: Hard drive is corrupt: 99% traceable by error handling AND will only happen on the production server, not on you dev and/or local unless you are the unluckiest person in the universe ;-) Memory fails: Throws allocation error (have never heard of any exceptions, but there might be) Network crashes: You mean the call to stripe works but the connection to the DB fails? -&gt; PDO/mysqli throws error You mean the network fails after/because of the api-call to stripe? -&gt; throws error You mean the stripe network fails? -&gt; missing try/catch
Kotlin and Spring has a ridiculously steep initial learning curve, but it's much faster to develop than anything else I've ever even heard of. You can hammer out a fully functioning, documented REST service (that needs no test because you wrote no code) that's autowired together and deployable to production in 30 minutes.
Probably because they're shitty recruiters. The way a normal recruiting agency handles that eventuality is by guaranteeing the placement for a period (typically 30-90 days depending on leverage).
This is how float works; it's super unreliable for decimals because it only stores halves, quarters, eights and so on, and that's by design. If you need to work with exact decimals, store it as the smaller integers that you can (e.g. cents) and divide/multiply as needed. Using a library can help with that. 
Run.
There is no more concise, readable, straightforward, etc. way to represent this pattern: class Adapter { public process(File $file): Connector { } public process(String $string): Connector { } public process(Stream $string): Connector { } public process(URI $uri): Connector { } public process(URL $url): Connector { } public process(Connector connector): Connector { } public process(Adapter adapter): Connector { } public process(something) { throw new UnsupportedTypeException(something); } } It comes up a lot more often than you think - any time you have similar code paths that diverge based on parsing rules or input types. You probably see this pattern a lot in your code, because it's a common pattern: $a = someDefault() $b = someDefault() if(someCondition()) { $a = someCustomVal() } if (someOtherCondition()) { $b = someCustomVal() } return someFunction($a, $b) With overloading and the proper use of types, you could reduce that entire block to just: return someFunction($a, $b)
I agree. I love Laravel for what it has done to re-juvenile the PHP community and the many structural ideas it has brought forward. At the same time, I despise the current "Laravel or nothing" attitude by people who have never used anything else and mostly surf on third party tools while calling themselves Full Stack Developers, resulting in setting up a Monster for a simple API of mostly front-end driven projects (realizing that in this case ZF doesn't come that much slimmer). OK, enough ranting, I have coffee withdrawal...
No, replace the old function-based stdlib with a modern OOP, type-safe, namespaced, and mockable stdlib that has sane parameter ordering, naming conventions, and all the stuff that people laugh at php for not having.
The architectural deficiency in this code is that you've sent `Adapter` well on its way to becoming a god class. The example is far too generic to elaborate on _why_ this will matter in practice.
So PHP unit + pcov? Easy peasy
But why even tryyy? all developers i know are not stupid to fall for something like this
Even in your example, you wind up with some giant conditional block that is choosing which class to instantiate. The point is to get rid of that. No context is lost, and Adapter is not implied to be a god class. The example I had in my head was allowing users to specify the connection details of a database connection in multiple ways, in which case Adapter is always going to be the same thing, but you'd still want the overloaded class to prevent a giant, ugly conditional block.
Personally I'd store this information in the database, because it's site-specific configuration ([site1.com](https://site1.com), [site2.com](https://site2.com), etc.) and not environment-specific configuration (testing, staging, production, etc.)
If you sign this, you're an idiot. No other reasonable way to put it, IMO. There's no upside to signing this contract. I would even argue its unenforceable and if they actually pursued it against you, they would need to claim the $10,000 in compensatory damages, and not simply because you signed this "contract." To which I really feel they would win. They're basically saying that by signing the contract they're no looking for other qualified applicants, so if you pull out, it's going to cost them around $10,000 in damages to find another qualified applicant. Which is pretty close--but it's their cost of doing business, not yours. They're just trying to shove it off on you. Which if they do, they end up getting a much bigger bottom line. __Don't sign this.__
Because there are a few that are.
NAL; pretty sure this would constitute tortious interference and is a crime...
Yeah. Mark as spam and get on with your day. 
*-ahem-* ***final*** class TripplerXResponse...
Thats fine. Present them your $275,000 contract indicating a penalty they must pay if you like them but are not offered a position. 
Yes, ask for 10k to interview, and if you refuse their "reasonable" offer, then you give the 10k back.
 final class DamnburglarResponse extends TripplerXResponse { public function __construct(){ parent::__construct(); self::suck($this); $in_a_fire = "Fuck your mother and your mother's mother"; die($in_a_fire); } } &amp;#x200B;
Just saw this as I made my power move :x
Good argument! Would you just use one column for key and the other for value?
NAL either, but I think that requires (A) a valid contract which this thing probably isn't (B) interfering with a contract between the defendant and *someone else.*
&gt; Perhaps a bigger risk for a hypothetically-badly-interviewing OP would be a claim that they acted in "bad faith." That's a really good point.
Lmao, yeah, that'd be a no from me. That's literally one of the most insane stipulations I've ever heard of, and I feel like any company willing to pull that shit isn't going to be a delight to work for. Don't ever look back on this and say "what could have been". This is a 110% guarantee of a shit job you want nothing to do with
Key/value is a typical approach, yes. You should only need one extra call per page (you can read all of the configuration at once), which should have no impact on your application.
You can try using a default placeholder insert to reserve the if and constructing an update to put the data in, but ideally you should be managing your inputs before any dB attempt.
The concepts are just concepts of TDD, which don't change. The Laravel testing API, though... yikes.
Log into dB through console. Paste your sql. Ensure that works first then check your code.
I honestly think it's a scam. No serious recruiting agency works that way. Stay away from this!
Complete and utter nonsense. Were it not against reddit's rules about doxxing, I would say name and shame so none of us ever do business with them.
This is almost assuredly illegal, and even if it wasn't, I'd call these people monkies and move on.
Always gitignore it. It has no businesses being in a collaborative environment in which others may not use your IDE.
I think the recommended way is with a dedicated repository that phpstorm supports. https://www.jetbrains.com/help/phpstorm/settings-tools-settings-repository.html
Agree. Code should not be IDE dependent. If it's about managing the look of the code, there's Eslint.
Is there a reason you are not using actual environment variables instead of using a .env file? Generally I've seen the .env files used locally while real environment variables used on deployed instances.
I’m using Laravel Forge, which I think pulls them from the env file. Either way the config filed are catches at deployment time.
&gt; Even in your example, you wind up with some giant conditional block that is choosing which class to instantiate. You don't. You use the appropriate context to create the correct instance. If you get to a point where you have a thing, but you don't know what sort of thing it is, then you've mis-architected your application in such a way that you've lost that original context, and therein lies your actual problem. You have two options at this point: 1) band-aid the problem by passing the unknown thing off to your class, and allow it to type-detect the correct code branch for you (whether by method overloading, a `switch`, map, etc.), or 2) correct the architectural issue higher up in your code that's leading to this problem. Clearly #1 is the easier way out, and if we're being honest, it's what most developers will choose without giving it a second thought. But #2 is the "correct" (in an architecturally pure sense of the term) way to solve the problem. &gt; No context is lost It definitely is lost. Method overloading is nothing but a giant switch statement on the parameter's type, which means you're outside of the original context inside of which you _should_ have instantiated the correct instance or called the correct method, but can no longer do so, so you have to lean on type detection to branch correctly. Here is what I mean: public function foo(Request $request): void { // In this context, we know $request-&gt;uri is a string, so we know that we need // a StringProcessor and not a FileProcessor or any other sort of processor. $processor = new StringProcessor($request-&gt;uri); // ... } public function bar(mixed $toBeProcessed): void { // $processor = ??? // How do we determine what processor we need here? $toBeProcessed could be // anything. We've lost our original context. We could now band-aid this problem // by leaning on method overloading or any other flavor of type-detection and branching, // but it would be better to have not lost the original context, so we should refactor. // ... } &gt; Adapter is not implied to be a god class It may not be implied to be, but it's never anyone's specific intent to create a god class. In your prior example, `Adapter` was well on its way already. As the number of things to be processed grows, so will the class - by _necessity_, because you're using overloading to address the problem. You can't stop it from being a god class, because that's just the nature of overloading. Your only out is to refactor and fix your architecture so that you no longer need overloading. &gt; whereas your Context object could only ever be a god class that encapsulates far too much and you still have the ugly conditional block. There is no "Context object". I think you've misunderstood what I meant by context (see the code example above). And, as mentioned before, there is also no conditional block if you have the relevant context to create the correct instance or call the correct method. The whole reason for a conditional block (or overloading) is that you don't have context, so you need to get it back through type detection. &gt; The alternatives are all different flavors of conditional blocks The alternatives you're referring to are all effecdtively the same band-aid as method overloading. If you just want the nicest and cleanest band-aid, then overloading is, of course, going to be the best of the bad options. &gt; EDIT: Here's an even more basic example where you want a connection to support either an URL or a string: In your new example, the calling context wants a `Connection` instance, but doesn't know what sort of "thing" it has on hand with which to create that instance. It could be a string, or it could be a `URL`, but it doesn't know which - so it wants to lean on the constructor method overloads to determine that for it. You should solve this problem higher up in your architecture. Let the calling code determine what it needs. `Connection` is no place for that logic. As a bonus, you also have another problem: in the string overload, you're creating your own dependency instead of injecting it. When you solve this problem via DI, the string overload suddenly becomes no longer useful: // In this context, we know $uriAsString is a string, so we have the context we need to instantiate // Connection correctly. $connection = new Connection(new URI($uriAsString)); We know that `Connection` depends on a `URI`, so there is no need to allow for a connection to be created via injection of a string. We don't care about the string, we care about the `URI`. Inject the `URI` only and let the calling code figure out how to create that `URI` from a string if that's what needs to happen.
Say no.
Ah, I see. I wasn't familiar with Laravel Forge's pattern that way. I would keep them in environment variables. I saw the argument that they are site specific rather than environment specific, but disagree and think that environment variables are well suited for storing info on the particular deployment. I would consider "dev, test, prod" to be the application environment, yes. But think it would be much cleaner to have another env var DOMAIN=site1 rather than putting that in the database. If you put that into the database you need to add an extra layer of scripting if you spin up a new site to always make sure that value is set in the db.
This is 100% the worse recruitment company scheme i've ever heard. They're obviously doing this because this company is so crappy no one the recruitment company is bringing them wants to work there. 
In stark contrast to this, the company I happily work for for paid potential prospects 500 dollars or so to do a small trial assignment.
And this was my counter argument using the database. But it just feels strange to have a long text env variable, I’ve never really seen it done in the wild like that :P
It’s weird that it just cropped up for us after 2 years with this software. Thanks for the help 
For real. Nothing like being a nightmarishly shitty boss before the guy even works for them.
It's not against the rules to doxx a company, they're a public entity. Name and shame the fuck out of these guys.
Indentured servitude fell out of favor some time ago. I know it still effectively exists in some industries, but I don't think "senior PHP/Laravel developer" is one of the occupations likely to be desperate enough to be forced into it to survive.
I'm very thankful you are are tackling this issue. Slow and unreliable coverage issues plagues PHP ecosystem for a long time. I also very much like the idea with branch coverage.
As mentioned, a settings repo is one way, or you can sync settings through your JB account: https://www.jetbrains.com/help/phpstorm/sharing-your-ide-settings.html This method has proven useful to me when I need to spin up a new machine.
If you were interested in the job you could cross out that line then sign it and give it back to them and see what they say. It's obviously a ridiculous requirement, but if they were silly enough as to include it they might accept your amended contract too. I'd make a copy of the amended form records in case they tried something down the road.
Contact the HR and Legal department of the client, informing them of their recruiters work.
I have never signed a contract with a recruiter; their contracts have always been between the hiring company and themselves. This is some bullshit.
That company must have a high turnover rate of devs. Maybe a shitty code base that you don't want to work on
https://editorconfig.org/ to standardise IDE settings across machines, and .gitignore environment specific settings.
There is no job, this is designed to scam you out of money. Please share the name of the agency, people should be warned.
Php has bugs. For example, check out tecreations.ca/edit/edit5.php. Php puts an extra space at the beginning of the file since the first revision. On rev5 and still does it.
Looks like the contracting company wants to present you as an employee (of the contractor) ready to start the engagement, instead of as a prospective employee of the contracting firm.
It sounds like OP would be a contractor. And even if not, you can still have an employment contract
Not a chance, OP, good luck with the search.
That's absolutely absurd. No sensible company or recruitment firm would put up such a clause. It may be a scam. Probably the company does not even know about it, its the recruiter's ploy to find another source of income.
Sorry for hijacking your comment but how is `return ($result = $stmt-&gt;fetch()) ? $result : null;` more acceptable than `if($result = func()) {...}` which afaik considered as bad practice? Is it different when using ternary?
Block the sender email and agency.
Please post the company name, they deserve to be outed. 
A blogspam article from a throwaway account through a doorway to promote a paid error reporting tool. Why don't you people just make a straigt and honest introduction, like "Show /rPHP: Acme error reporting tool, it costs but reasonable. also there is special bounty for Redditors"?
urm ... printf ?
No coverage of PHP 7's thrown errors? Shame!
Application flow would be my answer, in the expression i do i can see both the valid return types groups together in that ternary expression. `if($result = func()) {...} else` is just a longhand version of the same thing to me when all i want to do is end the function. I saw it as just more reading for anyone to do with an `if else` then a two sided ternary `$object:null`
Definetely not legal in my country, craziest thing ive ever seen
And here's one if you're not using Laravel: [https://github.com/barbushin/php-imap](https://github.com/barbushin/php-imap)
Most likely you'll end up using services like in the OP inside controllers. And DI is often only considered for container classes themselves hence why I said to use DI in controllers. I now realize it might be unclear that I also imply to use it everywhere, It's just that when I started out I only thought of DI in the container classes.
Use webhooks to let Stripe notify you whenever a payment occurs. Return a 200 OK response only when you’ve succesfully captured it. Stripe will automatically retry the webhook request using an exponential backoff mechanism. For bonus points, only store the webhook data locally in your webhook endpoint handler. Then later, in a separate process, do the rest of your processing.
Delete the e-mail and go live your life, don't wast your time.
What does this function do that vanilla PHP doesn't?
His literal question was to show him of other ways of logging in PHP.
[Catching PDO exceptions](https://phpdelusions.net/pdo#catch). But it seems you aren't quite sure what to do with a caught exception. In this case you shouldn't catch it. 
Your PDO get function doesn't use exceptions? Honestly it sounds weird for me.
I really really love to use Makefiles, it makes my life so much easier. It's worth mentioning however that it's very hard to have multi-platform support with it so you either end up having an additional special makefile for windows or you just don't support windows at all.
 return $stmt-&gt;fetch(); is all you need here.
Did you used it at all?
I see. I use rule of a thumb: what is not an unique object, is a service. What's a service, is in Dependency Injection container. I wish tests would use it too. 
PHP7 have better performance then Python, unless we are talking about C extensions (of which Python have many specialized, and it's not uncommon to see libraries as extensions)
Sorry, I may be expressed myself wrong. I related to the PDO get fuction you mentioned. 
When fetch returns null it's a feature for the statement not being able to find any rows. That snippet is a getter for a class instance. Either you get x class at ID record 100 or you don't. The execute function above is wrapped for exceptions.
"what the hell" is generally derogatory statement, and it should not be used for questions that can be quickly answered by looking up respective PHP api documentation ;)
never do exclusive, it is very rare. You could be sued for working a lemonade stand. 
Ah I see now. But your comment is about error logging, while the guy is asking how to log a transaction info, not the error message. 
Yeah i know it's a bit weird i just was trying to help as much as i could.
I meant your PDO don't use exceptions. I thought everyone configures PDO to throw exceptions nowadays. what other mode you are using, warning or silent?
I just checked to make sure, and yeah i have it throwing exceptions with: &gt;\PDO::ATTR_ERRMODE =&gt; \PDO::ERRMODE_EXCEPTION I'm using postgresql so im not sure if its more lite on exceptions but i only see it throw when you are going to break a DB constraint rule. 
Yes when you are unit testing the service. You may however be willing to do an integration test in which case there is nothing wrong with taking the service directly from the container.
I don't use a lot of service locators but it's still good to know and I've been using it for a couple of other things as well +1
Ah I see now. When exceptions are enabled, a condition `if (!$stmt-&gt;execute($bindValues))` will be never evaluated to true, as an exception thrown will prevent execute from returning anything. Hence my confusion. 
Why not commit the composer.lock file with your libraries?
That's a scam. Go to police.
Sounds like a scam to me man.
The lock file only has effect when working on the library itself, it is ignored by projects installing the library as a dependency. So the lock file can be useful for development, but may also give a false sense of security. Because of that, some libraries commit the lock file (i.e. [https://github.com/doctrine/orm](https://github.com/doctrine/orm)), while others don't (i.e. [https://github.com/symfony/symfony](https://github.com/symfony/symfony)).
That's a good point actually which I forgot to mention in the article. I'm not sure what the current state is with Windows Subsystem for Linux, because I've been using Linux for years now and everybody in my team is either on OS X or on Linux.
Yes, reported
Yes, but that's a different question ;)
Many static code analysis tools are reporting this as a bad practice. The preferred way is to assign the value of variable outside of the condition.
LOL fuck em
Wat?
yeah that sentence, combined with the examples, isn't really very explicit imho. $builder = double::class(Foo::class); $object = $builder-&gt;getInstance(); is used in all examples, it never shows that when you actually instantiate the class, that it would actually instantiate the mock... I'd really emphasise this in a very clear way, just to avoid people making the same mistake I made :)
Because you end the query too soon. Like: SELECT UserId, Name, PasswordFROM Users WHERE UserId; = select \* from users or 1=1; (Notice the ";" after UserId). Then you add your own query after. 
If others don't use the same IDE they don't care if it exists there or not. Storage of few extra files doesn't hurt anyone and sharing some IDE settings has it's benefits
Because that's not how SQL works.
Or cry if you don't get alot of interviews.
If you're the only one who works on the project than there is no point to store it under version control. But anyway, why do u think that it will be a major headache to store files from .idea folder under git? 
So I have some time left at work and I am not allowed to work on Opensource projects. We do have pluralsight, for all that matters. What would you do with the extra time you get? Learn a new language? A new framework? Reddit?
Yup. That. &amp;#x200B;
Why are you not allowed to work on open source? Seems to me a more productive use of time than wasting it on Reddit...
I dunno, it starts off sane enough. The first two clauses sound like common sense; the recruiter wants to make sure they get their cut. I don't like recruiters, but I understand where they're coming from there. Given a reasonable sunset (a couple of months perhaps, not "at any point in time"), I can see myself agreeing to those terms. The recruiter introduces me to their client, and the recruiter gets their cut if I take the role. I can't go back next week and introduce myself to the same client and cut the recruiter out of their fee. Point 3 is overboard. It looks like the intent there is that if selected, you can &amp; will be available to start immediately. Whether or not I accept the role appears to be irrelevant, which is a nope. Point 4 just hammers that home. nope nope. And then 5 wants damages if I pull out? oh hell naw. In any job interview, I'm interviewing them as much as they're interviewing me. Bugger that for a game of soldiers. But you wanna know what really makes this look like a scam? All the details you'd expect a lawyer to think of, that they haven't. Can I quit the role 2 days after I start? What if the interview's in China? What if it's in Chinese? What if it's minimum wage? What if it's *Chinese* minimum wage? (not to pick on China, just an abstract of conditions I'd be forced to say no to). What if I do accept the role, but quit after 2 days? This satisfies the agreement but being unable to attend an interview in China wouldn't? That's what makes this stink - it contains exactly what it needs for the scam, and nothing else.
.editorconfig it too limited. 
Dear lord :/ You must be an idiot for not knowing what to do.
It's gotta be. What's the minimum period I have to work for their customer before we're even? Here, recruiters get a % of your first year salary, so if serious I'd expect to see a 12 month window on it. That they haven't thought of that, tells me it's never going to get that far. The "recruiter" already knows what happens next, and it's all this "contract" cares about.
probably because HR ppl are below avg int and the only reason they have a high paying job is, that they are willing to overlock normal human decency and morals. But on the other hand, you probably would only need one to fall for it every other month to have a decent salary. 
do some quality control on your current project?
What happen to your production bot while you are local developing? &amp;#x200B; I mean you could only have a webhook for a bot (correct me if I am wrong). If you use it for local dev, then the production one will not be used, right? Or just apply for another bot for local dev with another configuration?
Good idea. But I already did so for my last projects (all greenfields)
OP mentioned Houston area, so I'll assume Texas. Texas's employment law, in my experience, puts most of the power in the hands of the employers.
I've expanded that first bit of readme to emphasise these things, I hope that helps :)
Agreed. But it's against company rules.
Wasting time on Reddit is not?
Point taken.
cool, I hope so too! ;)
Please post unblocked-out contract. I'm fucking sick of developers getting treated like this.
If only there was a cross platform tool that was easy to run from the cli and could easily exec other commands etc. Oh wait, can't php do that?
try to achieve the equivalent of: - clone repo - make _anything_ Say for example https://github.com/humbug/box/blob/master/Makefile. with a PHP script. Good luck. It's not impossible, but for me at least, Makefile was the most pragmatic, efficient and painless way to do it.
Asking why you are not allowed to work on open source projects.
It's against company rules, I have no vote in this.
nah, I like my personal settings. .idea contains debug configurations, excluded folders, database configuration, ... they dont have to be the same on each machine
.idea actually contains very little personal settings. It's beneficial if you have some kind of custom style guide, inspections, run configurations and such. Database configuration is one of the files that should be ignored and not shared as probably excluded folders. You can take a look at https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore for default ignored files. 
CV? I don’t see a CV. 
[I have written](https://donis.github.io/phpstorm/the-benefits-of-adding-your-idea-folder-into-vcs/) about some benefits of actually sharing .idea folder. Here's a summary: * sharing inspection settings if you have custom ones helps to focus on login in PRs * same with code style changes if you have custom ones, it takes one commit and everyone, using PHPStorm, have updated settings * shared scopes can help to cope with big projects. for example mark controller files in a different colour or specific modules as red if they're tricky to work with * share directory types if you are using non-standard structure, to mark where tests or source reside. helps setting up new people * share run configurations if you have something custom (specific behat/phpunit configuration There is also a common misconception that it will override your theme, shortcuts and such. **It will not**, because those settings can be synced separately via your jetbrains account. It's only for "Shared" configurations that you can find all over PHPStorm.
Weird rule. Is it worth bringing it up in a company meeting and finding out what their deal is?
&gt;The Socceresq Podcast: I started a podcast discussing legal issues in soccer; on iTunes and Stitcher \[OC\]itunes.apple.com/us/pod... &gt; &gt;r/MLS•Posted byu/turneresq10 hours ago Or they'll push out the remaining Zend Framework and PHP folks: [https://mwop.net/blog/2018-10-17-long-live-zf.html](https://mwop.net/blog/2018-10-17-long-live-zf.html)
Which aspects of the testing API do you not like?
Depends on where you work. Some companies require contracts where any and all intellectual property created while "on the clock," on property owned by said company, or using equipment or resources provided by that company become the intellectual property, in perpetuity, of that company.
It's a combination of an old company-culture (no remote work, no flex hours) who are afraid for anything that's cloud or opensource (although that's changing now). For example, alot of software runs on proprietary software. That and the fact that they do not want company-time to be spend on opensource projects. They rather have me studying.
Hey, gudgip, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Echo from a constructor?! Are you mad?!
This is a huge red flag. Walk away.
I don't know why you were downvoted. That's a fair opinion. I'd argue that marking your classes `final` in PHP is indeed less useful than doing so in C++ or Java (where the compiler can do clever optimizations on final classes). However, there is still some value in marking classes final by default. The only reason I can see wanting to keep a non-final, non-abstract class around is if you *want* someone to be able to pass a customized version of your class to some function/method. In this case it's likely more appropriate to use an `abstract` class, but it's almost always even better to use an `interface`. Using an `interface` allows for easy stub classes for unit tests. There's almost no reason to have a non-abstract non-final class. You don't *technically* gain anything by marking a class `final`, but it does enforce better code as long as your class is either deterministic (calling the same method on the same state always yields the same result) or implements an interface. It's not even about excessive abstraction. It's about writing testable and composble code.
&gt; My overall concern with the above points is Python leaves a lot of room for bad code. And you believe that PHP, of all languages, is better in that regard than Python? You need some Rust, Swift, Kotlin, Go in your life. (I, too, spent years doing mostly C++ and then Java. All of the languages you listed leave **way** too much room for bad code)
I would say you should have to different bots (one for prod and one for local development). This way they can work at the same. 
Even though PHP 7.x is leagues above PHP &lt;7, it's still pretty poor compared to many other modern languages. But, then again, I also agree with most of OP's rant points against Python. I just don't understand why you'd choose either PHP or Python (or JavaScript) when you have so many other choices (for web in particular).
&gt; inspections, run configurations and such these are the kind of things I dont want to loose or have merge conflicts on constantly... I disable a lot of inspections other people like to have. everytime you run a test it gets added as a run config. other than code styling there should be nothing in the code repo imho.
Thanks. ngrok may be useful to me :)
Every time you run a test it gets added locally, not as shared one, thus not ending up in the configuration. Interesting fact that you disable inspections other people like to have, seems your team doesn't really have a common agreement on code quality.
I agree with many of the points and complaints you make. However, what they tell me is, mostly, that you're doing it wrong. I see from one of your other comments that you have the most experience with C++, Java, and PHP. You are used to designing software that utilizes classes and inheritance. In my opinion, Python code should *not* make any more use of inheritance than strictly necessary. Instead you should use mostly standalone functions to operate on data. If you really need your data to mutate, then you can use a class with methods. But, again, avoid inheritance. Basically, I write Python like I write JavaScript. Both languages have minimal enforcement, and poor support for classes and inheritance. Also, I have never used Python for web dev. But, I'd never use Python or JavaScript for a large, complex, application.
...and you still owe them another 10k compensation, Get you contract watertight!
Nothing, I love it! I'm just pointing out the change that happened in... 5.4 I want to say? Test Driven Laravel was made when 5.3 was the newest thing, so it means learning an old testing API and then converting. Could have been worded better on my part.
Reputable recruiters (not an oxymoron) will have a contract with the actual employer ensuring that they get paid, and that some others recruiter (or the company itself) doesn't claim credit for the hire and steal the commission away from this recruiter. The fact that this contract is putting the onus on *you* not to get hired some other way tells me that they do not have any contract with the employer, and they intend to use your resume to essentially cold call the employer (or a number of employers) and try to sell you (and themselves). Stay far away.
an example is "uncaught exception". there is no rule to add them as a @throws tag. And sometimes you just want an exception to bubble up. I dont like it when phpstorm brands the method as if something is wrong, some people might like to be reminded of the fact that there's an exception bubbeling.
I'd just email be back and say "No. Arrange the interview and get your cut if I accept the job or never contact me again." 
Why stop at 10k? Let them pay... A million dollars
Really odd how we're getting different results here, but I think we're also running different setups. Running this test script: [https://pastebin.com/ZCPFNwwn](https://pastebin.com/ZCPFNwwn) on our production server shows between 15ms and 20ms to create 1000 models with a single attribute and then access them, however we can retrieve the records from the DB in 2ms. Running the results through kcachegrind, it looks like the \`setAttribute()\` method always calls \`isDateAttribute()\`, \`isJsonCastable()\` and \`hasSetMutator()\`. \`isDateAttribute()\` is the most expensive, as it triggers a bunch of calls to \`getCasts()\` which in turn does an \`array\_merge\`. This causes memory to be created and then immediately released, which is probably why setting an attribute from this model takes so much time. This method is also called when you call \`getAttribute()\` which means that it costs memory to just look at an attribute. This is madness. &amp;#x200B; As an aside; I think you mean 0.00005 seconds, not microseconds, which would be 50 microseconds.
Good example, weird that there's no common agreement what to do with them. In my world - this is a terrible practice when exceptions are allowed to bubble up, it means either exceptions are abused or something is coded horribly wrong. Thrown exceptions must be caught one layer up, otherwise why are you even throwing them?
that's weird, the caller might not care if something went wrong, because it can't handle the exception anyway. you could make a rule that you must catch all possible exceptions one layer up and simply rethrow it or convert it and rethrow it... but we're entering personal preference territory here imho. but I really dont think it's all that wrong or uncommon to catch exceptions multiple layers up... anyway, totally different discussion, fact is, when using php toolbox and php inspection plugins you get **a lot** of inspections, some of which are more "informative", which are liked by some and irritate others. Code quality should not be enforced by the IDE anyway. it's the job of commit hooks and build servers.
TBH, I would run far, far away from an employer that limiting.
It's not uncommon, but it's a mistake. How can higher layers of code know how to handle exceptions of lower layers of code? Like for example - why would a controller know how to handle a database exception? controller shouldn't care where the data comes out from. IDE helps to increase the quality, because not all the tools which are running on CI or commit hooks actually can catch such inspections. Of course it's a personal preference, but if you work in a team, it should be a teams preference, at least how I think.
Agree with everyone else. Some of this is standard recruiter firm contract. For example the part about you can't go to the interview find out who the company is, then tell the recruiter you aren't interested then go back to the company and say you will work for them without the recruiter and save them money so you can a higher salary. However, a lot of the other stuff in here is complete BS. I never do more than about 2 or 3 hours of coding for an interview, anymore than that they better pay me something for my work during interview process. Second, of all the whole part about if they pick you, you agree you will take the job. That is garbage also, interviews are just as much you interviewing the company as it is the company interviewing you.
We use phing for this. Each project has the same startup, where the default shows the commands available. For example, we can update, test, you name it. (and it's all php under the hood)
If you can split up your logic in an .env file, you can do it in config.files too, and you know what: those are cached by the opcode compiler, so faster than env (which has to be parsed on every request). .env = evil (sorry)
How much do they want to pay you for this?
I use various tools for that: PhpCBF PhpCS PhpMD PhpCPD PhpCodeFixer PhpStan Psalm PhpLOC Sami CognitiveComplexity If is passes all of that, you're good to go. BTW a tool like php-cs-fixer is also great to use.
Been there before! I walked out on my lunch break while my boss was screaming at my manager for underperforming while he was going through cancer treatment. No regrets.
Half of dose I've put in a Jenkins pipeline. But thanks for the others, definitely going to take a look at them :-)
I know what you mean, I used mocks before for everything too. What will you do when `getTagByName` is renamed to `getTagByName` and there is new dependency in `PhpDocInfo` constructor? (Last year these objects had at least 10 changes, so it's not an academic question). 
I might be missing something but here’s how I understand it: Config files in Laravel are coded into the app and may take variables using env(). If I was to hard code the config files, then the values on the config would be the same across all deployments, which is what I don’t want. Consider the following: I have one github repo running on 5 sites on Laravel Forge. Therefore I can’t hard-code site specific variables into the app “such as meta tags” because what’s true for one site won’t be for the next. What am I missing?
What exactly do you need to configure there? There are more ways to use IDE without adding whole `.idea` Eg. https://www.reddit.com/r/PHP/comments/al074z/2_files_that_your_symfony_application_misses/ 
&gt; CognitiveComplexity Nice! :)
If you have code that should work for more couple of year, you might add Rector as well. It will check for any instant upgrade it can do for you.
If the API changes, the major version changes, and if I were to change the major version of a component that I was using, I'd expect to update my tests and code like anyone else. If a package is introducing BC breaking changes on a minor version, i'd find a new package.
Awe
Exactly this. We also use project configurations with file templates containing copyright information etc for each new file anyone creates with placeholder. Everyone can use their own settings and preferences, but project specific and enforced stuff we always make sure that everyone keep the same. Scopes is one of the features we utilize a lot, spares so much time in setting up different directories. PhpStorm have great integration towards composer.json in detecting source paths and namespaces, but it won't detect other folders such as resources and exclude folders. All company repositories have .idea, but we always ignore user-land settings such as database connections.
According to a documentary I viewed 1% of the population are psychopaths. In the US this would be 3.257 million. Maybe the person who created this scheme is one.
Suggest: ```php parent::fuck_mother('fuck your mother'); ```
Does not this happened on Visual Basic years ago? The result was .NET and it's nice and polished. In my opinion in the future this is probably coming as a PHP official or third party library.
Method names should be camelCase in object context.
&gt; and it stipulates a $10,000 USD penalty if the client likes me and yet I decide not to the take the job. Aaaaand I'm gone.
if your IDE can catch it, any CI tool can catch it.
care to share some? because I was definitely looking which tool might have the same inspections as PHPstorm has, on addition - EA Ultimate inspections plugin.
https://github.com/exakat/php-static-analysis-tools/blob/master/README.md
You already know the answer ;-) I use your esc part. And boy, what a surprise we had in the very beginning. It's a pleasure to have it, because it sees more that we can. 
I had to sign a similar thing recently durring a buyout. I got it in writing that open source contributions were allowed because we have a long history of giving back.
what if site 1 has an .env file, wouldn't you say it could have a conf-file instead of that env? or what if all sites will use the same conf, but inside the conf, there is separation for each site? Both will work, but will be much faster.
I’m confused :P what config files are you referring to? When I think config files I think [Laravel config files](https://laravel.com/docs/5.7/configuration) - which are hardcoded and therefore published to the repository. I’d need a solution that’s independent of the repository code
You can [google the contract and find it verbatim](https://www.google.com/search?newwindow=1&amp;ei=39RRXK3cGovAsAWnr5G4Dw&amp;q=%22agree+to+pay+the+company+as+liquidated+damages%22+%22US+Dollars+Ten+Thousand%22&amp;oq=%22agree+to+pay+the+company+as+liquidated+damages%22+%22US+Dollars+Ten+Thousand%22&amp;gs_l=psy-ab.3...47039.50582..50900...0.0..0.221.561.3j1j1......0....1..gws-wiz.52fR-xieWFA). Other people are saying they've been sued by the staffing agency and that this $10k rider is one of their income streams...
How is this even legal?
To be fair, they’re not fining you 10k if you deny the client but rather if you join &amp; leave before you “complete the product”. We all know how slippery of a slope that can be so that would likely be a hard no from me.
I forgot I was subbed to PHP, thought /r/recruitinghell is where I was
I had legal research it and it is indeed an enforceable commercial contract.
My lawyer said the opposite.
[Google search](https://www.google.com/search?newwindow=1&amp;ei=39RRXK3cGovAsAWnr5G4Dw&amp;q=%22agree+to+pay+the+company+as+liquidated+damages%22+%22US+Dollars+Ten+Thousand%22&amp;oq=%22agree+to+pay+the+company+as+liquidated+damages%22+%22US+Dollars+Ten+Thousand%22&amp;gs_l=psy-ab.3...47039.50582..50900...0.0..0.221.561.3j1j1......0....1..gws-wiz.52fR-xieWFA])
Yeah, there are horror stories about this recruiter on the Internet dating back to 2008 on how they take to court and sue devs who sign the contract. They wait until their LinkedIn is updated and the courts honor the contract and garnish their new wages.
that's a very convoluted way to simply have some type checks. If people are willing to jump through such bigs hoops and add these amounts of docblocks, I think that only makes it very clear the people just want generics really bad... It's very cool and all, but it's just way too much boilerplate for my preference.
In the online horror stories, I've read about the company blackmailing idiots who signed the contract into traveling across the United States (at the dev's own expense!) 3-5x in that 15 day period, interviewing at every company the recruiter needs filled.
There seems to be only [one company](https://www.google.com/search?newwindow=1&amp;ei=39RRXK3cGovAsAWnr5G4Dw&amp;q=%22agree+to+pay+the+company+as+liquidated+damages%22+%22US+Dollars+Ten+Thousand%22&amp;oq=%22agree+to+pay+the+company+as+liquidated+damages%22+%22US+Dollars+Ten+Thousand%22&amp;gs_l=psy-ab.3...47039.50582..50900...0.0..0.221.561.3j1j1......0....1..gws-wiz.52fR-xieWFA) with many names doing this.
always gitignore unless you like fixing merge conflicts.
instead of creating this class I would preffer fixing function names to be consistent with everything else. For example strPos, arrayMap and so on
Adding generics to the language is not trivial if, as with all existing PHP language constructs (param types, return types), those things are checked at runtime. Much simpler to have it in a domain that only type checkers can see. Hack has a hybrid - some stuff is checked at runtime, some stuff is just checked by the type checker - but that'd be a big leap for PHP to make, given it has no builtin type checker. Re boilerplate: When I remove the 35 `@template` tags in our codebase, our type coverage drops by 3%, with tens of thousands of method calls that our type checker cannot infer. We need that inference to catch bugs, and we're happy for those few lines to avoid many potential bugs we wouldn't catch otherwise.
Create a pull request. As in, request that the OP's prospective employer pull your pecker.
I normally use bash scripts for this kind of thing, but wven knowing only the basics of make i can see that this comes up as a more clean solution.
It's not there anymore, it's been edited out. Which is good :)
That's how confident he is in his response. 
Oh yeah buddy? Get ready because I'm going to fork that repo and put a big load of dependency injection all over your objects. 
It would seem the reverse would be true as well, you sign this document, go out to the interview in good faith and the people interviewing you wax poetic on the hell that is going to be your job with the hopes that you decline it for an instant payday.
#Access Denied
While I understand, in principal, this will catch bugs, I remain unconvinced this “kind” of bug occurs with such frequency to justify such an absurd workaround. This is a solution in search of a problem. I am confident you could remove this feature entirely from your codebase and... nothing would change. That is, there wouldn’t be a sudden uptick if devs adding the wrong type to a collection.
&gt;Lavaral Yikes
That would break backwards compatibility. The class solution avoids that 
Oops, *Laravel.* `I am an idiot.`
I used to work with Ant and later with Phing before switching over to Make. They both worked fine but I wouldn't go back unless I had to, makefiles are much more readable (at least in my opinion) and give you a lot more freedom. And I'm not even talking about the out of date calculation, command line autocompletion, etc. Of course every project is different and especially if you need to support developers on Windows Make may not be the best option (I'm not sure if WSL changed that though), but if those things are not applicable I would definitely recommend giving it a try.
&gt; While I understand, in principal, this will catch bugs, I remain unconvinced this “kind” of bug occurs with such frequency to justify such an absurd workaround. As mentioned in the article, this is just a PHP docblock implementation of a feature that exists in most other languages used today. &gt; I am confident you could remove this feature entirely from your codebase and nothing would change Obviously nothing would change immediately because this is docblock-specific. But, as mentioned above, we'd lose the ability to find _future_ bugs in 3% of the codebase immediately. Someone removing/renaming a method would not see a type checker warning if that method was only called in that 3% of the codebase that lost type coverage. Put another way, when lots of developers spanning many continents are working with a decade-old codebase, shipping multiple features a day, you want all the type safety you can get. 
Because normally your not paid to move someone else's boxes. You do that on your own time.
My argument is that there is not a frequency of *future* bugs of this nature to justify the need for this boilerplate. The problem you are facing is not: "Our code base is so poorly designed that developers are incapable of correctly inferring which types belong in which containers -- causing bugs to reach production. " For which the addition of "generic" type-checking might help (although the above represents a *systemic* problem to which the addition of docblocks is clearly insufficient). The problem you have actually identified is: "PHP does not have parametric polymorphism -- but I want it" Aside from the obvious irrelevance of the problem above to your domain, the biggest benefit of generics is not the added type-safety (again, this is rarely a problem in any code base), it's that it enables certain kinds of meta-programming. &amp;#x200B;
I still need a job tho :(
I don't understand why you're telling me what problem I’m trying to solve. I’m pretty clear-headed about what problem I’m trying to solve: - make it easy for people to fix bugs and refactor large codebases - make it hard for people to introduce bugs to large codebases Using `@template` in the ways we do increases the amount of code our type checker can "see", which in turn helps achieve the above.
Given what I read on your CV before it was taken down I'd hope you wouldn't have too much trouble! Could be worth seeing if you could trim it down a tad perhaps though- it was several pages long if memory serves. I personally find that CVs longer than 3 or 4 pages will make people reluctant to read them. Perhaps a highlights page or two with something along the lines of "more details for these positions available on request"? Though to be honest I think you have more experience getting jobs than I do so take that with a pinch of salt! Good luck!
Hey, I just met you and this is crazy But here's my number, so call me maybe 
&gt; BootstraPHP CDN &gt;Include BootstraPHP's PHP files via our CDN to receive automatic updates! No No no no. Please don't do this. This is a really really bad idea and shouldn't be a supported use case. Further, the current implementation of this concept isn't "automatic updates" - it's more like "JIT download" of the file. The former implies that it only 'updates' when one is necessary, rather than 'updating' everytime the file script is run.
Yep, still working on it!
You are making my point. When you say "bugs" you are really only referring to one kind of bug. Again, one that simply doesn't appreciably exist. Your @template only serves to solve the *narrowest* little slice of either of those problems. The answer to both of the bullets above is to simply follow SOLID design (i.e. clean architecture). These principals have been around for over 20 years.
When I say "bugs" I'm referring to these sorts of bugs: https://getpsalm.org/docs/issues/ Over half of them are _only_ found when the type checker can infer types for a given expression. Improving type coverage with `@template` helps us find them.
I must be missing something, but making a PHP file to do those is simple: `bin/clean.php` &lt;?php passthru(' git clean --exclude=.idea/ -ffdx'); `bin/cs.php` &lt;?php $phpNoGc = 'php -d zend.enable_gc=0'; passthru("$phpNoGc vendor-bin/doctrine-cs/vendor/bin/phpcbf"); passthru("$phpNoGc vendor-bin/doctrine-cs/vendor/bin/phpcs"); passthru("$phpNoGc vendor-bin/php-cs-fixer/vendor/bin/php-cs-fixer"); Sure you could get more complicated like pushing working directories, checking dependencies etc, but it would be pretty simple with a few helper functions. 
Since your package is already in composer I would just suggest removing this as a feature of your package. :D
&gt;Put another way, when lots of developers spanning many continents are working with a decade-old codebase, shipping multiple features a day, you want all the type safety you can get. I think a lot of commenters in /r/PHP forget the vastly different kinds of codebases and organisations that make up the community. There is no one size fits all solution to maintaining code, enforcing standards and minimising faults. There are a couple of projects I work on where this would be very useful due to having a number of disparate teams and a high cost for failure.
You sound like one of those permanently singleton guys.
I just removed it from the homepage, thx a lot for the suggestion!
One big advantage with Make is, 99% of the time, the user doesn't have to install anything to use it. 
Then that's a good start, it could be better if you read about DDD.
Yeah, that was kind of unfortunate timing. :/
Yes and the benchmark is jaw dropping! Looks like it's almost 4 times faster than Laravel! Not sure if I should start learning it rather than Laravel :/
Thanks for the reply. Honestly, I'm curious about this since I will probably be looking for a new gig soon. &gt; it contains exactly what it needs for the scam, and nothing else I'm not doubting you, and I sure as hell am not defending them, but... Scam how? You take the interview, it looks like an ok job, but they don't hire you. Agency claims you owe them $10,000. You say "fuck off" and/or ghost em. Now what? Do they sue you? They are 1000 miles away and apparently this is not enforceable in a court anyway (what jurisdiction would this fall under, US? Some other country?) Maybe they sue you and win. Yeah, its a shitty hassle, but honestly - so what? How are they going to collect? Have any real lawyers weighed in on this? Has this been cross posted to /r/law or something?
If you only need to edit tabular data, you can use phpmyadmin if it needs to be a website or dbeaver if you want to use a desktop program. 
I think you're over-thinking it... a bit. You'd make your own config file, &amp; inside of it add an entry for each environment that contains the config key/value pairs. Then, in your code, where you load the config (hopefully in your service providers), you would load the set of configs for the current environment. We do something similar at the company I work for, except we have entire directories for each environment. Each environments config files will get merged into the base config, overriding any environment specific config. I hope that made sense. :) 
Haha that’s exactly what I was thinking to do :) just felt that possibly those longer strings don’t belong there...
I should of said mentioned the user base is not me but ~50 non-tech users. 
Version Control isn't storage, though. It shouldn't contain things that are unrelated to the application.
Best testing course I've ever seen and bang for buck is insane.
You should check Laravel out again - you can avoid facades and use dependency injection instead, if you want! Eloquent is full of magic, but if you remember that each model is also a query builder, a lot of that magic goes away (and also the docs for eloquent are pretty decent).
Uh, you must have not heard about mono-repositories then :) But .idea is actually related to the application if we're talking about shared resources. Each app can have it's own style, run configurations, deployments &amp; code style/quality requirements. Actually it helps even more if you have some sort of web-bakery type of company which has a lot of different projects.
Any way to make PHPStorm understand these?
This may be overkill but you might want to checkout DKAN ([https://getdkan.org/](https://getdkan.org/)). It has some data visualization tools geared towards non-technical users. A little complicated to setup, but lot of features once you get there.
Absolutely none of those things should be IDE dependent, though. Keep in mind I'm talking about ideal scenarios. It might be easier in some cases to do what you're saying if your org hasn't set up the proper tools.
No, they should nod be dependent, I agree on this, but I see people go against it way too much than it should be. It's like 7 files in total, if configured correctly, add a big value to devs using PHPStorm. But because most of them do not understand what is inside, there's a big rejection of the idea. I think Jetbrains themselves still are not sure how to deal with this one, it's very difficult to find information about it and explanation why this shared configuration should be used for.
Well, there are already tools and standards for most of these things. In my opinion, JetBrains should adopt those standards and their config files instead.
Yes - you can lobby them to support it: https://youtrack.jetbrains.com/issues/WI I know that’s an entirely unsatisfactory answer, but I know they’re interested in adopting patterns as those patterns become more commonplace.
Do you have 35 generic types in the codebase? I cannot imagine what could they be, and get the impression that you're fighting wrong abstractions with them. Could you give some example names?
&gt; I cannot imagine what could they be You don’t need to imagine - the article lists most of them! The ones not listed are basically variations on the same theme - input validation and the like.
You gotta love the "PHP Community"
Obviously no, I'm not a real lawyer. Just a nerd. The third point hints at them being a consultancy that doesn't actually have any consultants. There's multiple reports that once you're on that hook, you're expected to travel to multiple interviews at your cost, with this 10k hanging over your head once you say no. If it is the same company that shows up on google using the same wording, it sounds like they're not particularly great at paying once you do take a project either. But they do seem quite keen to recoup their "damages". And they seem to be quite attracted to people whose visas are tied to their employment status, who'll find it more difficult to say no. It's all take and no give, which is just fishy as hell. You take all risk, all cost, with very little stipulation of what your rights in this are. I doubt the 10k is the scam itself. It's just the sword that hangs over your head as the only way to get you to go along with the bigger scumminess. It's very predatory. If you're in a strong enough position to laugh it off and tell them to bring it, good for you. But they'd only keep doing it if enough people want to avoid the suit, pack their suitcase and do as they're told. (or they ultimately win enough of the 10k suits to make it sustainable)
Can I just compliment authors' intuition in selecting features to implement? On top of the project's overall excellent quality, I almost take if for granted that every new version of \_psalm\_ helps us to improve the quality of our codebase by uncovering more and more non-obvious edge cases. Indeed, a very TypeScript-like experience.
I actually laughed a bit at this. Thanks for that. 
https://gitignore.io/
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
lets make it stop locking up first
Ok, I missed those links, but it looks like that everything is circling around `Array&lt;K, V&gt;` scattered into said 35 places. I understand it's a hard problem for libraries dealing with unknown data structures, but I think I can (and should) manage that in business objects anyway, so I don't need type safety behind abstraction layer (http feeds me with strings only). Although generics would make it easier I'll keep boxing with `FooList` instead (this approach leads to nice classes sometimes).
I don’t see the correlation between the bugs in that list and clean architecture. Most of those bugs are borderline syntax errors. No amount of static analysis can replace SOLID design. Simply removing/preventing bugs in no way ensures a system will be “ easy to refactor”.
This is not just about removing bugs - the ultimate aim is to have a type checker that can infer the type of every expression. When you know every place a method is used you can change its arguments/rename it with ease. You can find all the places where Liskov is abused. You can do a lot!
That's something totally different - it actually connects to email servers as a client as exposes those features to you. Rather this package supports inbound mail that is forwarded to your app as a webhook through a web service like Mailgun or Postmark.
If that works for you, great! Rewriting an entire codebase to be more architecturally sound is not feasible at our scale, nor is stopping everything to write tests. Improving type coverage is the easiest way to ensure that, at some future date, we can rearchitect without breaking everything. 
Maybe I'm just not understanding something, but wouldn't writing unit tests eliminate the need for any of this? And be more beneficial, because it's also testing the code?
They are SUPER HARASSING ME today!! They're calling non-stop using different numbers with different area codes. 408, 315, and 201...
"Alot" as a word is a bona fide Mandela Effect, and many of us remember seeing it as a correct word, being taught in schools, seeing it in dictionaries, etc., as late as around 2012 for most of us. See https://www.reddit.com/r/MandelaEffect/comments/6mqvps/ah_only_a_week_into_this_and_i_found_a/
Learn. It's 100% legal, "they" can't sue you over it, no one can (easily) take it away from you, and it's very proactive. A way to invest in yourself. I'd dockerize your entire app, if I were you.
Browsing /r/PHP is probably not against the letter of the law.
Then just MIT License all of your stuff :P
Make is -so- 20th Century. These days, I've turned to `docker-compose up` for pretty much all of my needs. And yeah, it's really cross-platform.
Answer it, tell them what they're doing is illegal, and to take you off their calling list and remove you from their records. Don't be afraid to be an asshole, they certainly aren't. Also call the company they are applying you to and let them know about the toxic behavior of this recruiting company, as that will poison the well for any future candidates that company tries to hire.
What the fooking job they're gonna offer, working with gods and coding the universe? Tell them this is shit and no one is going to touch this shit. 
Writing unit tests is great and good, but it’s far easier to add type coverage with `@template` than to write thousands upon thousands of individualised unit tests. I’m a big fan of unit tests (Psalm has 87% test coverage, hoping to get that up to 90% soon) but having 99.7% _type_ coverage means that it’s pretty much impossible to add type-related bugs to Psalm’s own code (which makes the overall experience of writing PHP more pleasurable). 
Just put up a simple php program with phpgrid to view/edit the data. No need for a framework on such a simple system.
[removed]
I wonder if we will follow the JS crowd like sheep and now say a PHP transpiler in PHP 8 will be a good thing because then PHP 9 features can be transpiled into PHP 8.... 
Welcome to /r/php
Perhaps I will when I have some spare time. The last time I used it was around 1.5 years ago so there may be some major changes I don't know about, although I doubt it would drastically change my opinion of Laravel. I actually really liked it at first (started with 4.0), but eventually realized I have a strong dislike of RAD and prefer tools that don't change so rapidly.
An interface does not communicate behaviour - you say that the interface defines that it should behave a certain way, but this is only your assumption. The interface only communicates types in and types out, there's nothing implicit in that add method, neither it's name nor in/out types, that implies that the return value *will* be the result of adding the parameter to whatever value the object is representing: It may return that, but it may also add the argument and return the value as it was at call time without breaking the contract of the interface.
Yep, that's what I'm doing now, watching some plural courses about Golang. About docker, I've put some apps of us in docker, I tried to convince the board to use it; but unfortunately the company has no time to invest the resources for everyone to learn docker. So for development purposes I could do it, but for CI/CD it's a no-go at this moment. You should know that I introduced the company to CI/CD a year ago (when I started working there). It's a slow but steady process :-)
Meh... I still don't see the overall value. I still feel it's more important to test the behavior of your code (through unit tests and integration tests) than just through type checking only. That, to me, just feels like something on a very surface level that was put in place because your code is very chaotic and pre-existing code is subject to a lot of superficial changes. To use a car analogy, it's a bit like testing a new iteration of a car by evaluating that all the components come from the same manufacturer rather than testing the overall performance and safety etc of the car. Saying that, I will accept that I do not know what your pain points are with your projects, so maybe it makes more sense for your projects. I just still think that it is ultimately better to have a comprehensive test suite that tests the behavior of your code - which comes with the added benefit of also type checking your stuff without resorting to having to write lots of docblocks.
Structural vs nominal typing. a 30 year long debate and we still aren't sure which is better... so let's ask /r/php :D
I recommend CodeIgniter, because it's a simpler learning curve than Laravel and can do a lot of the basics for you. 
If you can prevent illegal state with interface API with low effort on part of implementers, go for it. If you can only make implementing illegal behaviour harder then legal one with low cost to implementers go for it. Otherwise it's better to just add extra documentation and maybe automated tests. Unless you write mission critical software where cost of failure is significant. In which case, I advise changing language. PHP have crazy semantics which get you nothing in return for that particular use case.
Is there any good resource to explain how JIT works in laymen terms?
&gt; Secondly - using JIT may open the door for PHP being more frequently used in other, non-Web, CPU-intensive scenarios - where the performance benefits will actually be very substantial - and for which PHP is probably not even being considered today. I'm super stoked on this idea. I returned to PHP 5.5 after a long hiatus, and started using it as a general purpose programming language. I'd love to see more folks thinking beyond the web with the language.
[Systems implementing a just-in-time (JIT) compilation typically continuously analyses the code being executed and identifies parts of the code where the speedup gained from compilation or recompilation would outweigh the overhead of compiling that code.](https://en.wikipedia.org/wiki/Just-in-time_compilation)
**Just-in-time compilation** In computing, just-in-time (JIT) compilation (also dynamic translation or run-time compilations) is a way of executing computer code that involves compilation during execution of a program – at run time – rather than prior to execution. Most often, this consists of source code or more commonly bytecode translation to machine code, which is then executed directly. A system implementing a JIT compiler typically continuously analyses the code being executed and identifies parts of the code where the speedup gained from compilation or recompilation would outweigh the overhead of compiling that code. JIT compilation is a combination of the two traditional approaches to translation to machine code – ahead-of-time compilation (AOT), and interpretation – and combines some advantages and drawbacks of both. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
You could start an open source project using an alias or a pen name. 99% of the time is about coding and 1% is pushing (and this could be done in your home). &amp;#x200B; &amp;#x200B;
You can do this in a roundabout way using the __call magic function, abstraction and reflection.
\&gt; Like: SELECT UserId, Name, PasswordFROM Users WHERE UserId\*\*=UserId; = select \* from users or 1=1; \*\* It is also possible to sql inject using UNICODE
&gt; when I fail to insert what should I do? That's up to you, and is business logic.
You don't need ~~Lavaral~~ Laravel for this. a) you will need an ETL (extract, transform and load), first a way to read the spreadsheets, transform and load into the database. You could do it via code but there are tools that do that (Pentaho Data Integration is a free tool). b) Then, if you have the information into the database, then you will need a single page that loads the information and shows into a table/chart/dashboard. However, you could do it without programming using a reporting system (Pentaho BI but also PowerBI, tableau, etc.) 
It appear to be surgical, I like it a lot: php as cli unix bash script. Very useful for little ~~personnals~~ linux command line tools! Some examples from me that I use to publish: [https://github.com/webdev23/gif](https://github.com/webdev23/gif) [https://github.com/webdev23/passCrap](https://github.com/webdev23/passCrap) [https://github.com/webdev23/shakti](https://github.com/webdev23/shakti) [https://github.com/webdev23/phi](https://github.com/webdev23/phi) &amp;#x200B;
I agree but no doubt overeager developers will confuse *can* and *should*. Anyone else remember PHP-GTK? 🤦
https://slate.com/human-interest/2014/07/alot-ahold-awhile-history-of-vanishing-spaces-after-a-at-the-beginning-of-words.html
&gt;Sure you could get more complicated like pushing working directories, checking dependencies etc, but it would be pretty simple with a few helper functions. Well that's the most important stuff :) You are missing the ability to easily declare each tasks besides the files dependencies declaration and being able to list easily the commands with auto-completion built-in.
The interface is the shell, instead of html, the output is ansi, but that is similar!
I do my generic scriptin in PHP too. For most of my projects the mental switch is not worth any extra. Also for most of my scripts php version is usually shorter and runs rather well, especially since PHP 7 (7.2 especially). I can honestly say that more than 50% of my general shell scripts are php. Rest are in order: BASH, AWK, python, perl, go &amp; others :)
Congratulation on spelling Symfony wrong.
Your gif repo has your giphy api key in it
Spam
They mentioned that traditional web requests would see little improvements, but I wonder if this would impact projects like Swoole or ReactPHP.
This is the public key as offered on giphy
With traditional HTTP request/response cycle the JIT is not effective, as it needs to reload the whole code stack on each request, meaning it has no data to do JIT effectively. If you do JIT something in this context, it will be gone once the response is sent and will be JITted on the next request again. Opcode preloading will be more effective in this case. Things like ReactPHP, Amphp, Swoole, etc. will be the main targets that can hugely benefit from JIT, as they are long-lived processes (assuming you minimize code reloads). Another is CLI scripts, and other non-HTTP and CPU intensive tasks that contain repetitive code that can be optimized (e.g. function `foo` has been called 10 times already, let's compile it to machine code to make it run 100x faster on subsequent calls). JIT can also slow things down if configured improperly, meaning you start compiling things for no reason and the compilation time slows your code down while the compiled code is not run often enough.
I think this would be a valid use case for overloading: [https://docs.oracle.com/javase/7/docs/api/java/io/PrintStream.html](https://docs.oracle.com/javase/7/docs/api/java/io/PrintStream.html). But I agree that most of the time it's unneeded. Most cases will be in public facing api's.
https://github.com/sebastianbergmann/php-code-coverage/pull/663#issuecomment-458529736 Awesome! I just wonder how the pcov source directory should be set in dev environments with multiple projects? E.g. I have three applications so what should the `pcov.directory` be in case my applications do not use the auto-configurable `app`, `lib`, `src` directories?
I wonder how if the new preload functionality coupled with the JIT would change the performance for web requests. The RFC doesn't address it, though they did benchmark with 7.4..
No, this is not correct. The JIT is integrated with opcache, so the JITed code persists between requests. It wouldn't make any sense at all otherwise. As such, there is no strong reason to expect reactphp etc to benefit from the JIT more than other web applications. I think they *might* benefit because they do some somewhat computationally expensive operations in PHP code that would otherwise be handled by the webserver (things like Huffman coding in HTTP 2 etc). Whether the JIT is effective is not a question of the request cycle, it's a question of what kind of code you run. The JIT mainly benefits math, which is something that most web applications (whether they run under nginx or reactphp) don't do particularly much of.
Not once does that request define what it actually means by JIT. I assume it is Just In Time. But Just In Time *what*?
Just in time compiler. 
I see, thanks for correcting! I wrote my comment based on my general knowledge about JIT v. interpreted v. AOT and assumed PHP JIT will not persist per request (neat to hear it does persist!). If the JITted code does persist between requests I presume JIT and preloading are going to be similar in terms of server configuration and application restart cycles when updates to codebases are made? And agreed, +90% of current PHP sites/applications will most likely not see immense (if any) performance improvement, unless they contain highly numerical computation and similar features. Things like WordPress will most likely get no real benefits from JIT, when compared to enabling preloading for instance.
The right tool for the right job. CPU-intensive stuff is not a PHP job, so for me is a "Please, don't unless it speeds up Wordpress".
In a service architecture frankly this doesn't matter much, you can always outsource the intensive parts to another service, written in whatever. But being able to use the code you've written so far for the "fast" parts is always neat. Also it will allow PHP to do more computations on the fly, instead of constantly building caches on disk and RAM for everything.
That is an alias, you can use `\Swoole\Http\Server` as far as I know.
Hello PHP community, I've written a static wrapper around all the array functions in PHP. &amp;#x200B; I've tried to make signatures consistent, more sensible return types and changed some default values. Would appreciate your feedback on this such as different signatures, maybe better variable or function names, etc. (I know I haven't tagged a release version yet as I'm quite weary of doing that with Travis not building with the PHP 7.3 base image for whatever reason)
I have no sources to cite but I'm almost certain that the preload functionality was *somewhat* a prerequisite for the JIT work to begin.
An interface is a contract. It forces a class that implements it to provide an implementation for each defined method with the specified argument types. What that class actually performs when a method is invoked is not defined. A class could implement the `Number` interface and `add` the number to a database and return the same number. Documentation can describe the expected behavior, but not enforce it.
Presumably you run coverage for each project individually, so given the following structures: `/path/to/project/name` is the root of your source code, and tests are in `/path/to/project/tests`, set `pcov.directory` to `/path/to/project/name` and tests will be excluded by default. `/path/to/project/name` is the root of your source code, and tests are in `/path/to/project/name/tests` set pcov.directory to `/path/to/project/name` and set exclude to match `/path/to/project/name/tests` (I won't include regex to keep it simple). If you run your coverage for all projects at once, set `pcov.directory` to the root path containing all projects, and set exclude depending on the location of tests within that tree, as above. Make sense ?
You don't necessarily need the class and the static methods. Getting rid of them might read a little simpler and you'll get the benefits of "use" in the calling code. &amp;#x200B; I.e. &lt;?php declare(strict\_types=1); namespace Girgias\\Warray; function chunk(array $input, int $size, bool $preserveKeys = false): array { ... } &amp;#x200B; And... &amp;#x200B; &lt;?php use Girgias\\Warray; $chunked = Warray\\Chunk($input, 2, false); &amp;#x200B; Or... &amp;#x200B; &lt;?php use Girgias\\Warray as a; $chunked = a\\Chunk($input, 2, false); &amp;#x200B; Something like that.
&gt; CPU-intensive stuff is not a PHP job That's the whole point of the JIT, it will enable PHP To do CPU-intensive stuff, meaning it becomes the right tool for the job as well.
What are your tasks at work? Do you work with an opensource PIM/DAM? What's do you think is the best choice with PHP?
Facades have worked the same since 4.2, it's just that the docs don't show how easy it is to replace them with dependency injection. A lot of people say Laravel's great for RAD, but not stability, but I disagree. The only painful upgrade I've had was 4.2 -&gt; 5+ and 5.2 -&gt; 5.3. The first upgrade I mentioned is totally fine if you go by semver, and if you go by Laravel's versioning scheme, that second one is also fine. I'm not saying it's optimal to not follow semver, but at least Taylor does follow a versioning scheme of some sort. Major changes you don't know about: More testing utilities. There are more, but this is by far #1 the most important change. The amount of testing utilities in this framework is unmatched by any other framework in PHP right now.
Ok, I think cars are a bad analogy here. Think instead of an government that wants to improve their population’s dental health: They have a few options: - They can make toothbrushes and toothpaste free, and educate the populace about their proper use. That said, people aren’t always the most diligent and they’re occasionally incentivised to not use them. - They can lace the water supply with heavy doses of fluoride so people ingest it by default. Neither option is foolproof - people will still get cavities, but the fluoride is much cheaper to accomplish, and doesn’t require changing anybody’s habits. If the government does both it’s even better - maybe they focus their toothbrush campaign efforts on the people at particularly high risk of getting cavities, or maybe they focus their efforts on people for whom cavities would significantly diminish their quality of life. Here toothbrushes are unit tests, and fluoride is static analysis - something administered centrally, with tremendous benefits downstream.
Interesting I didn't think of doing something like that. &amp;#x200B; Might consider it as it does seem a bit nicer.
 - https://github.com/tideways/php-xhprof-extension - https://blackfire.io/docs/up-and-running/installation
Hello guys. I work as a Digital marketeer (Analytics, Semrush, Facebook Ads) and made some experience after-hours by making websites for clients with different CMS (in PHP, C#, .NET, RUBY). I can always change the code (in Shopify or in Wordpress) if the client needs it but never learned to code and it always took lots of time to get things done correctly. What is for you the best PHP CMS that asks the least effort to make something pretty that could have a chance to appear on [www.siteinspire.com](https://www.siteinspire.com) ? Customizable components, and easy marketing automation (forms, newsletter, maps, maybe ecommerce) and analytics implementation (tracking, good SEO, proper video meta-data). Thanks!
I meant, what will do you with the test?
Wow, amazing :) It's very rare out there people think about complexity, or even check it, or even check the right one (cognitive over cyclomatic)
Thanks, I'll look into it.
I don't like the term "valid", because it's so loaded. Code is hardly ever objectively valid or invalid, right or wrong, etc. With that in mind, I see a lot of the same architectural problems in `PrintStream`'s API that I see in various userland code that leans on overloading. Why are its constructors accepting a whole myriad of completely different dependencies? A class's actual dependencies do not change based on what's available in the calling context. The class needs what it needs. If you have a `String`, but it wants an `OutputStream`, it's not `PrintStream`'s job to take your `String` and turn it into an `OutputStream`. That's _your_ job, at which point you can hand off the `OutputStream` that you created from that `String` to `PrintStream`. Constructor overloading is most often, as in this case, a DIP violation. Due to Java's strong and statically typed nature, the `print()`, `println()`, etc. overloads are also completely unnecessary (not that overloads are ever necessary, but they are especially unnecessary in languages like Java). I suspect brevity is the only reason `print(int i)` and `print(bool b)` are not just `printInt(int i)` and `printBool(bool b)` and so forth. But that's repetitive, and reveals another problem... `PrintStream` is doing too much. "Transform anything you give me into bytes to be placed on a stream" is not a single responsibility. It's a whole slew of responsibilities masquerading as one. Placing bytes on a stream is `OutputStream`'s responsibility, so basically `PrintStream` is nothing more than a universal byte transformer. Given that there are already a slew of reasons why you'd want to print things in different representations than `PrintStream` will transform them, a more flexible architecture might be to get rid of the class in favor of a `ByteTransformer` interface. The new usage might look something like the following: OutputStream stream = new OutputStream(); stream.write((new DateByteTransformer()).toBytes(new Date())); // vs. PrintStream stream = new PrintStream(new OutputStream()); stream.print(new Date()); Of course, the latter is more readable, but it comes at the cost of flexibility.
The new release now provides proper PHP runtimes for AWS Lambda, as well as switches from the "serverless framework" to AWS SAM for deployments and running applications locally.
Wordpress, Joomla, October CMS, concrete5. Drupal, no. ;) Take your pick. You can make a siteinspire.com candidate with any of them if you pay a very talented designer to design it for you. Then you'll need to pay for the great graphics to complete the design.
WordPress is likely the best solution for what you're after.
a) The schema for the database has already been mapped out so this is helpful to know there's a free tool out to help with the data upload. b) Funny you mentioned Tableau, because that's the final destination for the data, to a Tableau instance that will connect the DB nightly to pull the latest data into pre-made infographs. I should of mentioned that.
My *i* is gonna *++* so fast... :) Thanks for the explanation, it’s very helpful.
If a JIT compiler exists, that means that generics will be easier to implement. Right?
1. email\_sent.php - is vulnerable to SQL injection; I'd suggest you change your SQL to use prepared statements. 2. email\_sent.php - contains your username/password for what looks like some sort of MySQL service. 3. You need some sort of 'robot' protection to stop someone abusing your form and submitting a load of crap into the database (E.g. re-captcha). But I can't see anything which obviously results in multiple entries in the database - aside from perhaps you doing a refresh with your browser on the email\_sent.php page. One way to help stop that might be for email\_sent.php to do a header("Location: somewhereElse.php");....
Yep. I just upgraded our company's CI setup from phpdbg to pcov.
&gt; In addition, we propose to consider including JIT in PHP 7.4 as an experimental feature (disabled by default). Woha, that would be great! I would love to test in (in conjuction with preloading) as a way to speed up my Symfony commands that I sue as queue consumers... In my case they are invoked per-message, so I avoid long running processes, but I pay the startup phase each time.
I haven't explored generics support, but it might be possible with `.phpstorm.meta.php`. See post for [`$this-&gt;get(Type::class)` → `Type` example](https://www.tomasvotruba.cz/blog/2019/01/28/2-files-that-your-symfony-application-misses/#why-phpstorm-doesn-t-quot-get-quot-it)
Let me know if you find the way, btw. I'm curious :)
I used that for quite a while and besides some cases where my settings could get completely fucked by one of my IDEs at whatever location throwing up it was really nice. IntelliJ now bundles "IDE Settings Sync" which, as long as you have a JetBrains account and are logged in, is synced via JetBrains servers. I've had much better luck with this, plugins are synced as well.
Some info on using and revoking JWTs - [https://fusionauth.io/blog/2019/01/31/revoking-jwts](https://fusionauth.io/blog/2019/01/31/revoking-jwts) 
You are wrong here. This is the right subreddit: /r/PHPhelp
If you use composer or npm/yarn, why wouldn’t one just create the scripts in the composer.json of package.json? Sure, you probably have to run multiple commands but it uses already familiar tools. Other then that, I can why this would work well in standardised teams.
Ah cool :)
Wordpress is, by far, the fastest to put things online with narrow deadline. You can find tools for almost everything you want. October CMS is great but the amount of tools available is ... You just can't compare. You will have to develop lots of things by yourself. FuelCMS is good too but the same problem as October. Croogo is a good one too. If you really want to start to develop, I would go with October.
Whichever one does the stuff you need it to. 
Laravel
pimcore
The real question you need to ask is "What type of framework, if any, does my application require?"
Interfaces communicate object structure.
Symfony
The free function way does look nice. I think the only disadvantage is that PHP will only autoload classes, not functions. You'd need to set composer to include you file of functions on every request, using its [files](https://getcomposer.org/doc/04-schema.md#files) autoload option. That does mean the cost of loading that file is paid even when the functions aren't called.
Surely a paying for a licence that's no better than one you can get for free isn't really a legit expense though? It would just be a donation dressed up as if it were a legit expense.
Do you use it a lot? How is the learning curve and do you have everything you need open-source?
Thanks you! That's indeed the designer's job to make it look good and he should be paid for that!
Ok good to know October needs extra development, Wordpress is thus the best ratio Working time/Website done, thank you!
I appreciate you took time to answer me, it's wordpress the winner.
&gt; An interface is a contract Right, but it's debatable whether that contract consists only of the method names and signatures, or does it include the English language documentation? In other words is it a contract which the PHP compiler will enforce, or is it one that I can choose to breach if I want to. I prefer to understand an interface as the latter. 
I know this one: to get to the other side.
This guy OOP's.
Rarely You create identical interfaces with different names to differentiate behaviour
None. Don't be a framework developer. Be a developer who uses different components to solve business problems. Too many times I've seen bad practices from one or another framework so deep in their mind, they think it's an actual design pattern.
used it a lot years ago. the cms is fucking awesome, and allows any kind of modification without hacks. 
What's the name of the company so I can avoid it?
The one google churned up is https://www.complaintsboard.com/complaints/fcs-ltd-puresoft-west-palm-beach-florida-c109622.html I don't actually know if it's the same company, it's just the most prominent google result using the same contract terms. And they seem to have a new name every 6 months anyway.
Thanks man.
Check out XAMPP
Interesting! Any examples?
You should ask the person who sent it to you.
Sadly for companies a framework is way more interesting. Loads of docs, new devs already know it/easier to learn, faster development, you name it. Symfony is the best middle-man in my opinion, as it also encourages best practices, and you only use the bundles you actually need.
We have a very large system developed in PHP 4 and has been upgraded to 5.5.9. Our code base nearly all PHP 4 and our main developer is stating that we would need to a lot of rewriting (almost the entire codebase) to move the system to PHP 7. It does make sense. I am looking for direction or advice on how we can determine the scope of the rewrite. Any recommendations on a technical resource to help with this would be great as well. 
Symfony for enterprise, Laravel for quick projects. Others lack features, community and documentation compared to the two for the same scenarios.
Most IDEs (I know PHP storm does, and Netbeans partially) should be able to show you errors. Best way is the hard way: line by line. As for tools, PHP 7 MAR, phan, and probably some others are available. These tools show you errors bug don't auto-fix.
Rewrites of large legacy applications in general are costly and may not be the way to go (many factors involved). I recommend reading up on modernization techniques of existing code. Start here: [Modernizing Legacy Applications in PHP ](https://leanpub.com/mlaphp) 
It's impossible to know the scope of the rewrite, you better hire an IT Consultant to analise the code and give you an opinion. But he his probably right code base is to old, and even making it from scratch would be better than a rewrite and fix errors. Pretty sure you would get major performance boost to be worth the investment. 
I'm too embarrassed to ask...
I'll check it out. Thanks!
that has nothing to do with each other
Thanks - looks like a great book
Thanks.
Thanks
Good luck, I know it sucks.
Well that's going to end in an almighty shitshow. 
sandbox.onlinephpfunctions.com
It's not *that* hard to review the code and identify deprecated code that will prevent you from running the exact same code in PHP 7. The main issue you will have is that you likely don't have any kind of automated testing, so would be hard to *guarantee* that you have complete code coverage and that you found everything that needed to be changed.
If you're going headfirst into maintaining a legacy codebase, I really love [this book](https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052). They cover a whole bunch of paths for real world scenarios that basically boil down to "I have X shape of mess, and I need to do Y with it". It has been said already, but if you need to scope the effort and cost of updating your code base, it would be a good idea to hire someone who specializes in that work, at least for the scoping and building a basic development road map. Before you hire your consultant, it would be best to have some reasonably concrete set of expectations for what you'd like to achieve with your rewrite. Said very directly: it's a good idea to be using modern versions of whatever language your code is written in, but what version your code is on has to be a tertiary concern to any competent business manager. They're far more concerned with outcomes that affect balance sheets. What's the cost of maintaining an old code base and what is the cheapest way past that technical debt while maintaining or improving functionality? Do you hire new software entirely and port your data in? Do you rewrite your existing codebase to modern versions of same language? Do you hire some outside codefarm folks to do the rewrite for you? All kinda depends on what you want to achieve and how much cost you're willing to endure to get there.
From what I can tell, JIT compilation means generics can be implemented in a slightly different way to PHP's AOT byte code compilation. I don't now if that makes it easier or harder. [This article](https://www.thomasdenney.co.uk/blog/2016/11/13/comparing-the-implementation-of-generics/) explains how generics can be implemented with JIT vs AOT compilation better than I could.
Kill it with fire? No?
I agree, this does not seem possible.
I recently inherited a big system written by one guy. No classes, not a sign of OOP, all functional, messy code, that was probably written in an "append only" mode for a long while. I'm nearly done with it but if I was given anything similar again, I'd quit my job, no hesitation. It took fucking ages to work on it and I haven't learned anything new on this project apart from how not to write code. 
My understanding is that how a language is compiled can make a big difference to how generics are implemented. If you think about List&lt;T&gt;, a language can either use this as a template and compile this to List&lt;Foo&gt;, List&lt;Bar&gt; before execution starts, or it can create List&lt;Foo&gt; when it's first referenced (JIT). C++ does the former and C# does the latter.
I'll have to check that out because same as you I had mixed results with the settings repo and abandoned it. Thanks.
Person-up and just ask. Never be embarrassed to ask for help.
Right now you're comfortable rolling a wheel around your garage and thinking it's pretty great. A framework is like someone delivering - instantly, whenever you want one, and for free - a car body and frame with most of the parts already put on. All you have to do is work on the finer details and paint job. 
You, friend, said it better than I’ve ever heard. 
&gt; very large system Out of curiosity, any numbers on files, LOC, tests (if at all), age of codebase (first ~git~ ~svn~ cvs commit)?
Currently I've got the following files commited: ``` .idea/ codeStyles/ Project.xml codeStyleConfig.xml codeStyleSettings.xml phing.xml ``` It's very minimal. Not sure if it's the best way, but seems to work. Only time it gets annoying is when one upgrades PS and others don't. Especially with EAPs and early adopter bunnies we and up changing the files forth and back until all upgraded. I would love to share more settings but I'm wary. Useful other things would be: - PHP unit test and debug setup - PHP (remote) interpreter setup All (remote) paths are the same due to use of Vagrant/VM. But still I'm worried it might cause troubles. I also want to recognize that some (advanced) users might use/want different settings. Rather, I would like an easy/quick way for team members to have an initial PS setup or a way to reset to the our "factory" defaults without hinder them on their own stuff.
Node ;) Actually, if you’re pretty adept at php, learning another language can be more useful for your current language than learning another framework. It helps you think about solving problems differently. I was a php dev for 10+ years, but started picking up node on the side (one of many languages I dabbled in). Now I’m a full time node dev. Not saying to scare you from php, but just sharing the best thing for me after a certain point in php land was to learn how other languages work, not another php framework. 
They are moving so fast at this point that I feel like....I just work for the now and not overly concern myself... Am an idiot? 
I held the same notion when I was getting started. "php code make website - why need more?" but once you get into routing, templating, environment variables, response headers, &amp; a bunch of stuff for SEO (basically everything in real-world applications) you're not going to want to do that stuff yourself. or if you do (which I did) you realize a team of experienced developers dedicating thousands of man-hours to the project will do a better job. after using my own framework for projects, I gave Symfony a try and never went back. depends on the scope of the project too.. sometimes a framework is overkill 
Fast? PHP feels positively glacial compared to some languages. But all you really need to do is pay attention to the changelog for deprecations. PHP is generally quite good about avoiding lots of BC breaks, and there’s always plenty of warning. 
Given my own history, all I've known is 5.6 and then 7, and 7 is actually getting updated. You are probably 100% accurate in what you say, but my perception is only based on what I know here. 
I know what you mean. The agency I work for mainly dealt with Drupal 7 sites which was 5.6 only for awhile. I also feel like 7 is moving fast, not in a bad way though. 
While it’s good to understand the general curl library for PHP, I would check out a project named Guzzle that can help make it easier and I believe has the ability to do some asynchronous calls.
You could always look as the JS to see if it's using hitting a URL that you can cURL to?
It's only 7 because they took too long on 6 and there was too much conflicting info about it out there. 
I would suggest looking at the JavaScript files and seeing what they are doing. If some data in them is needed for whatever reason, you could also do a cURL request, load the file, and use a regular expression or such to fetch the data you need.
I'm familiar but I'm not sure how that applies to this conversation??
It is :)
Oh, I thought the issue was that you found the numbering to be progressing too fast, since most people use a version that someone unfamiliar with PHP would think is two major versions behind. 
Wasting time on reddit has little consequence. They might just say don't do that. Working on OSS using company resources without permission could cause the company to claim ownership of the code....
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
thank you so much...
Welcome to star.There are two versions: 1. just kernel: `composer create-project jetea/app=~1.0` 2. with components: `composer create-project jetea/app=~2.0` If you want to write a framework, install version 1.0, it only takes an hour to understand how a framework works. 
Exactly. That was my thought. If we have a compiled php (a JIT compiler can be worked on to produce binaries if someone wants) then generics can be resolved more easily.
Except nothing is free. Using a framework will cost you, the one way or the other. And not using a framework will cost you at some other point.
Recommend this framework `composer create-project jetea/app=~1.0 -vvv`, simple, no black magic, a few minutes to read all source code.
Your deep analysis is mostly correct, save for CI3 has been dead for almost a decade now, Wordpress is better to be spelled as W-word as one could get in a deep trouble mentioning it at full, and Django is not in the PHP world at all.
Exciting! I’d love a PHP version of Pandas at some point in time. Would you say this opens the door to such a thing? 
Full disclosure: I'm on the organizing team. Just realized that we hadn't posted here about this year's conference, and the schedule (linked) is now live. If y'all have questions about the conference, ask away and I or another organizer will answer as we're able.
I’d say in terms of frameworks the two main contenders today are Symfony and Laravel. If you learn Symfony, that knowledge is automatically transfered to many other areas of PHP development as it encourages many solid best practices. Also, you can use Symfony’s development style in Laravel (which uses a lot of Symfony components), while the other way around is not necessarily true. As for WordPress, it’s pretty much a separate language to work in at this point but it is definitely very populair. 
You could also look at Symfony 4 !
I’ve never had using Symfony cost me, to be honest... I can still do whatever I would be able to without a framework, only better.
Agree. I jumped ship from Laravel to Symfony4 and it’s been nothing but great: quick to bootstrap, less encouragement to take shortcuts that will come back to haunt me later on and superb tooling.
I'd grudgingly admit that you want Laravel in your toolbox as a freelancer. Source: I freelance, and the vast majority of dev time I'm spending right now is on Laravel projects (exceptions are projects where I was the one picking the architecture from the get-go). As a rule, if someone asks "what PHP framework should I use for a project" and they're asking for a project that I'm not personally involved in architecting, the fact that they're asking generally means they're the market segment Laravel works nicely for. This includes solo developers (again, not my personal choice, but using it for a solo project means if you ever have to hand it off to someone else they'll kind of know what's going on). Plus Laravel has a strong ecosystem all the way to the shallow end of the pond, so to speak. By contrast, Symfony (Laravel uses a number of Symfony components, but in a quite different way) has made huge strides in getting the framework to a point where it's easier to set up, but they'll admit that they're playing catch-up to Laravel. For larger/more enterprise-y projects I'd go with Symfony (dangit, I just mentioned two frameworks that don't use PSR-7 as their request implementation), and as such Symfony skills are useful to pick up, though it's way bigger in Europe than it is here. I don't do CMS work anymore (beyond admin'ing my personal blog and occasionally updating the Longhorn PHP conference site), but from my understanding it's still very much WordPress and then everyone else, with Drupal being an option if you're far enough up-market. There's a tight community around ExpressionEngine and Craft CMS, but I'd be speaking out of turn to say anything more.
As an Aussie we don’t get many php conferences here... will this be streamed or recorded for later viewing pleasure? 😻
I'd like to add though that the typical application using reactphp is routed through a lot of protocol (string) processing... At what layer some quite significant lifting logic is happening. I've written amphp applications where most code was essentially taking data from one endpoint, and doing a few calls and feeding it to the next endpoint (e.g. websockets input, doing a few mysql calls (routed by the input) and then returning some data). Profiled code was like 80%+ of time within protocol processing.
cms !== pim
Although it’s a rubbish response. Pick what you feel most comfortable with and can handle the projects best. CMS can Framework are completely different things. So you need to decide what you want. A framework which has no UI at all. Or a CMS. Laravel is very easy entry, and typically the haters are the ones who don’t know it well enough and most hate points can be disproven. You have access to laracasts which is a great resource for learning it - but learn it well, otherwise you rely on too much magic and can make bad code easily. Symfony is a great choice if you know the project will likely need to be very flexible down the line and you want super granular control over stuff. However if it’s freelancing your doing - I don’t see that being for massive projects taking 6+ months which will need on going optimizations etc. so maybe this is not the one. However they also have symfonycasts now to help the learn. Wordpress with ACF if your gonna be doing to be doing small/medium brochure sites, or anything with lots of pages, but a modern workflow like bedrock or sage9 from roots.io so you can use templating languages, webpack etc. Our agency have actually developed a Illuminate wrapper around Wordpress giving us controllers, models, caching, mailer etc - basically any laravel feature within Wordpress which makes our development speed in Wordpress crazy fast. If you wanna try something different like a flat file cms, which is based on laravel you can look at Statamic - many others like Grav. Lots of other ones like Perch, Pyro, Bolt which are more generic. You can also go Headless. So things like contentful, buttercms, strapi so you have completely separate fronted to backend. However... stay the hell away from Joomla and Drupal, they’re an absolute mess right now and anybody who defends them probably isn’t aware of the downfalls when you compare to other platforms or the awful UX of the backends. If your going e-commerce then if it’s a smallish shop then start looking at things like big cartel, Shopify etc. big cartel is nice to work with, only 4 templates and the development process is very slick with it. If you need something more dynamic that can have lots of content pages, or a blog etc but also has a shop on it, then woocommerce will be a good choice. If you are a sadist then you’ve got magento 2 as an option, it’s insanely slow, full of deprecated code, awful development experience. BUT has fuck ton of features. Currently has abysmal bespoke pages functionality, although they’re looking to release a page builder which they bought out another company to get their tech. Oh also to get decent performance you need a magento optimized server really. Source: me. Work at an agency who has production experience on everything above which is how we make decisions on what tech we use for each project :)
Okay good to know for later!
Make sure to check out /r/phphelp as well.
The FIG members getting voting rights just for being FIG members is a good reason to vote no.
Sure! For example devs coming from older Symfony versions tend to put everything in one place by the type of classes, not the domain. All controllers in one directory, all helpers in one and etc. So everything related to let's say users is scattered all over the place.
&gt; I haven't learned anything new on this project apart from how not to write code. Then you have learned a great deal. Sometimes it's not about learning how to do things, but learning how not to do things.
There are definitely a lot of advantages to using one. But I hope it's not to a level where those companies are not considering components from other frameworks (if it's possible to use them ofc) or using the same framework for \_all\_ of code. For example for very tiny projects you might want to use Slim instead of full-blown symfony setup. Symfony 4 - I agree, it became much better and less "do it my way" sort of framework.
pimcore has a cms.
Thank you for our reply, it’s much appreciated. I was hoping more for an example about software architectural design patterns rather than where a class file is physically located. Isn’t sorting classes by domain mostly a part of the ddd philosophy? I would think that actual file structuring is mostly a matter of preference and what makes sense for the software in question. We don’t employ the ddd way of structuring our project. For example our api controllers are all in a controllers namespace but within that namespace we order our controllers based on the rest hierarchy. For large subsystems we have dedicated namespaces etc. Genuine question: how do you namespace a class or component that spans more than 1 domain?
Most popular PHP frameworks are MVC/MVP oriented, and in short, they provide time and work efficiency. It’s time efficient because most of the “general” functionality is automized, such as route-controller bindings, and data-model bindings. Also most of frameworks provide “template generators”, in example, for basic authentication. It’s also work efficient because most simply you can put a divide between frontend and backend development, making everything become well organized. Most of these frameworks also help you with a development/production divide, and advanced error/exception handling so it’s also easier to manage everything, module by module if necessary.
Unfortunately ours won't be this year...we asked the venue what it would cost to let us stream and their answer was "the same as if you had us record and edit", which we can't quite swing this time around. That said, JestPHP and Midwest PHP are going to be livestreamed by NomadPHP I believe, so grab a subscription to Nomad and tune in. Heck, you might see me on screen; I'll be at both :)
This is really great news. I really appreciate all the hard work you core developers do. And, as stated in the RFC, this can open up PHP to more arenas, not just web development. JIT combined with the already accepted FFI can open up many new scenarios that today is somewhat owned by Python. PHP 7.4/8 is a game changer! Well done. 
This is the second time I mention it this week so I don't want to be spamming, but looking at your scripts maybe [silly](https://github.com/mnapoli/silly) can help. That would save you dealing with `$argv`, generating help, reading stdin, formatting the output, etc. (most of this thanks to the Symfony Console) Also I tend to use a lot Symfony Process as well (looking at how you use `system`). It avoids the `cd &lt;dir&gt; &amp;&amp; &lt;command&gt;` pattern, it checks that the process runs correctly, easy to deal with input/output, it escapes arguments, etc. The only downside is that since those are objects it takes a few more lines to write.
Can someone in au or nz tell me they are making good money. I’m strongly considering switching back to a Java focus just for a decent pay check..,
&gt;The compact *method* allows but that's only a function
Can you guys share a few words in regards to transition from Laravel to Symfony? I could google, find white-noise articles on the topic or try it myself, but since you have hands-on experience: what was it that you find Symfony doing better than Laravel? I'm not asking about "facades suck" type of comparisons, but what actually saves your time as developers while using Symfony.
You can also use [Rector PHP 7.3 set](https://github.com/rectorphp/rector/blob/master/config/level/php/php73.yml) to upgrade instantly
There are actually some hard-to-find BC breaks in PHP 7.3. E.g. the one with escape of `-` in regex. Not really documented. &gt; ...pay attention to the changelog for deprecations. No need for that in 2019. Just run upgrade tools when it feels like upgrading.
In 2019 you don't have to do this manually. Just use Rector, it has upgrade sets from PHP 5.4 to 7.3.
What was your motivation to write this,
Lets see how type safety goes in 7.4 first
I don't agree at all. I was a Laravel developer and the biggest leap in my career came when I added Zend and Symfony to my "toolbox". Once I did that, I was getting work from much bigger organisations paying a lot more money for my services. 
Sure, let me try to quickly jot down a few points that we really liked. * [Symfony's compatibility promise](https://symfony.com/doc/current/contributing/code/bc.html) &amp; versioning. With Laravel, we had to do a bunch of name &amp; directory structure changes every few months with no additional benefit whatsoever. Now we're on Symfony's LTS version we can be sure that we can safely install each minor &amp; patch update for at least 4 years, most likely more than a decade. * Doctrine as the default database layer. We really like this as our models are now plain PHP objects which makes it far easier to write our tests. Also, everything is wrapped in a transaction by default which in Eloquent required more code. * Our test coverage is higher because it's harder (not encouraged) to take certain shortcuts (e.g. accessing a service globally). This honestly cost us some initial time in the short-term, but once you get used to it and your project progresses using the right abstractions, the time lost is regained and then some. * Symfony's [Form](https://symfony.com/doc/current/components/form.html) component. Once we had our forms set-up, it was really easy to build an admin area re-using logic from the public facing section of our application. After getting to know this component I honestly wouldn't want to build another web application without it (even in this time of JavaScript). * It [performs](http://www.phpbenchmarks.com/en/) better, we're able to take on \~1.5x the requests per second with no changes in actual functionality. &amp;#x200B;
When? Monday 4th Feb, 2019 at 2 PM ET (7 PM GMT / 11 AM PT).
Hey hey! I'm speaking at this! Come check out my talk ["Diving Into Guzzle: Getting the Most from Your Requests"](https://www.longhornphp.com/sessions/#diving-into-guzzle-getting-the-most-from-your-requests). Hope to see you all there!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I truly hope you're only learning PHP and not creating something for money. 
6 hours later: "oh, I see what I did wrong"
What type of server are you connecting to in PDO? i assume something like postgresql or sqlserver? Both of these use extensions which are the "drivers". Your error is typical of the situation where you forgot to uncomment the pgsql extension in php.ini
Error messages written by programmers are amazing! :) On a similar note [7 Tips to Write Exceptions Everyone Will Love](https://www.tomasvotruba.cz/blog/2018/09/17/7-tips-to-write-exceptions-everyone-will-love/)
they said it's enabled. I would say it's rather wrong php.ini / unrestarted Apache / something of the sort. Or course PHP should take care for the OP on all these matters and write a 20-page manual describing every possible case where they can possibly fuck themself up.
actually 1 hour later i removed a .dll i had in the folder that was completely unrelated to the pdo driver and it started working again
 sudo service apache2 reload
all i would like to know is the directory it's looking in, no need for a 20 page manual. Normal Human conversation: Human A: "I can't find the thing help" Human B: "Where are you looking?" Human A: "In the .... " Human B: "Oh that's wrong, here" PHP Conversation: PHP: "I can't find the thing help" Human B: "Where are you looking?" PHP: "I can't find the thing help" Human B: wastes 3 hours copy pasting directories and ripping out files until PHP finds what it's looking for 
As you make your application you notice you'll use components for certain tasks, a logger, a service container, a class loader, a router, a config system, a dbal . etc. Not every application needs the same components and thats why these days you don't just download a whole framework, you'll use framework components to build a lightweight, standardised application on top of a well written/secure code base. &amp;#x200B;
Yeh number 6 is basically this.
Symfony There's a lot of documentation, easy to upgrade versions (even to major versions), easy to learn, and Doctrine is fantastic. Although Doctrine is kinda limited sometimes (I had to use RAW function for a very specific postgres query). In my experience, Symfony lets you develop critical web applications very fast. 
Why blame the absence of design patterns when you can blame the framework, right?
clearly they werent unrelated if that fixed it - one of them would've been conflicting. Computers do exactly what you ask them to.
or for those who aren't using a random old centos 6 box, just restart php-fpm
Small disclaimer, im kinda biased. Very much against the use of eloquent because it's active record. But you shouldn't use your eloquent models in your controller to get your data, it isn't clean code. Use a seperate class to get all the data you need for your templates. Inject said object into your controller and tell it to do it's work. i've worked with Laravel after using Symfony and i can not get myself to like Eloquent more over Doctrine. I went back to Symfony very very fast. the use of eloquent doesn't seem to promote clean (and solid) code.
php\[tek\] will also have digital tickets which gets you the sessions recorded for later viewing [https://tek.phparch.com/registration/](https://tek.phparch.com/registration/)
Now, I'm no fan of Eloquent, but how on Earth is it the _ORM's_ fault you decided to put a query inside your view?
C# does more or less the same in Console.WriteLine. Makes we wonder why they both decided to do it this way. Guess they valued the slight increase in ease of use over the possible technical problems down the road. Either way great explanation. 
You can probably get it to work with PHP7 fairly simply.... add in "public" to all your class properties and functions, make wrappers for deprecated functions... It's worth upgrading to 7 but you'll never do it if you decide to "rewrite first". Refactoring is a neverending job on a nightmare old codebase - you should do it, but you should also not be afraid of leaving your old code in the medium term if it works.
I don't see what this article has to do with Eloquent. If each time you want to see if a given job id is in a table, you kick off a query then yeah it will probably be slow, even using straight sql with pdo. Furthermore, the presented solution seems to be to query all job and then make an array of their ids followed by in_array? That just seems bizarre especially if the number of jobs starts to grow. Kind of thinking the article is click bait.
&gt;Apparently, since that time nobody noticed that PEAR is throwing deprecation errors oh dear
Eloquent isn't an ORM, it is Active Record. That aside, I believe the authors point is that it isn't necessarily obvious that this code would be running a query.
\*_Insert any ORM here_\* may be killing you (if you misuse it).
Will do. I need the basics crash course.
I feel like it's fairly obvious that if you're pulling in a query builder instance you will be executing queries. I think it shows a misunderstanding on the author's side. 
What do they do if 100 different people ask 400 different things?
Frameworks help us in many ways. 1. Provide a standard - Every developer has to follow the same structure. But, If you develop an application without a framework, each individual may contribute to the project in their own ways. It will cause many problems when merging the project. 2. All the boilerplate codes are automatically generated by the frameworks. 3. Frameworks increase the productivity of the team.
It's Active Record, which is one possible implementation of an ORM.
\*Insert any ORM or SQL here\* may be killing you (if you misuse it). 
Plus, I never had to code with Laravel, but I'm pretty sure Collection has a "contains" method. 
What is this --with-pear doing anyway in build process?
No, I just didn't feel like PHP updates were much of a thing for a while. I just looked up the release dates and its actually been fairly consistent. I wonder how quickly 7.0 was adopted though. In my head it feels like the community was stuck on 5.6 for a LONG time. 
Cool, cool, but what if other Aggies hear I went to a Longhorns conference? I'll never hear the end of it...
I personally use Apache and PHP-FPM in production and don't have any issues. You're not going to really notice the speed difference between Apache and NGINX anyway so I wouldn't worry about it. Also everything in Apache is free, rather than NGINX which is mostly free, but with some more advanced features being beind their cripplingly expensive paid options. As for the PHP side, FPM is much better than mod_php. You have a lot more control over PHP-related performance tweaks, and the added security of being able to split up each site to run as a different user (which can be the same user as your site-specific crons) is very helpful.
Agreed, I updated about 10 websites from PHP 5.6 to PHP 7.2 in about 3 hours. The main issue was old dependencies. As long as you're not writing crazily weird code, the upgrade path is really simple.
Nice article. Another thing is when you have these very abstract Exceptions in low-level code, and you do not try to catch them and throw a more specific exception in high-level code. &amp;#x200B;
I'm a fan of NGINX / PHP-FPM myself
Thanks everyone for the terrific responses - what a ***great*** sub-reddit. A little more context of what I'm up against: I came in to lead a software "start up" that has been trying to resuscitate some old code and build a business. They have a couple of clients, but are constantly dealing with bugs. It appears the system's code is very intertwined with very little separation of presentation and business logic (I'm not a coder or system architect and my past experience has been with c#). My small dev team reports that if they fix something in one area, something else inevitably breaks somewhere else. The challenge is I have a board and group of investors who recently heard that much of the code will need to be rewritten to move to PHP 7. Two months ago my position was that we might be able to get to 100-200 clients on the existing software, but that longer term the system would have to be re-architected. None of this is music to an investors ears... They want a pipeline of clients and a system that works. So we have a great market opportunity, but not the vehicle to get us there. One of our thoughts is to find strong developer (or two) to help get the system into a better place in exchange for a strong equity position in the company. To be honest, I've done this a few times in my career (not as a software developer) and I probably have a 25% success ratio. Startups are tricky...
 You're not going to really notice the speed difference between Apache and NGINX anyway so I wouldn't worry about it. I would disagree with this, as it entirely depends on the performance of your application itself and the latency requirements you have. Our application has a typical response time (including network time) of around 30-35ms, the exact same application on Apache2 was responding in closer to 40ms on average. Obviously, this is more to do with .htaccess file usage than Apache itself, since Apache has to perform directory scans / parse the htaccess on every request, and I'm sure you could performance tune it not to use .htaccess files and store the directives in your main sites-available/*.conf files, but for some applications this performance speedup _is_ noticeable - especially if you're still serving assets from Apache2 instead of using a CDN / other cloud storage system. Definitely agree on you about FPM versus CGI though.
I think you you are not willing to go the extra mile. Every book has gabs you have to fill you self via documentation or search.
Made me laugh out loud. Then I had to explain to my wife why I was laughing... 
I'm working on getting this. 
Just start your project, install Apache and PHP and see what it says. It will say that mod_php is not an option anymore. Problem solved.
@czbz That's absolutely true. This lib could be used all over so it's likely required for every request. &amp; I'd much rather have 1 require call than [this](https://github.com/composer/composer/blob/master/src/Composer/Autoload/ClassLoader.php#L370) if I didn't need it.
It’s not released yet, Jon Duckett has a new book called PHP &amp; MySQL : Server-side Web Development that’s coming out on March 26th of this year. His HTML/CSS and Javascript/JQUERY books have been really good, and cover the basics. I’d imagine this book would be the same. [PHP &amp; MySQL : Server-side Web Development](https://m.barnesandnoble.com/w/php-mysql-jon-duckett/1129218528?ean=9781119149224&amp;st=PLA&amp;sid=BNB_New+Core+Shopping+Top+Margin+EANs&amp;sourceId=PLAGoNA&amp;dpid=tdtve346c&amp;2sid=Google_m&amp;gclid=EAIaIQobChMIhOjD1vWa4AIVWR-tBh3pmQvIEAQYByABEgJIifD_BwE) 
!Remindme 3 days
I will be messaging you on [**2019-02-04 16:16:36 UTC**](http://www.wolframalpha.com/input/?i=2019-02-04 16:16:36 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/PHP/comments/am1a8s/fabien_potencier_creator_of_symfony_is_hosting_an/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/PHP/comments/am1a8s/fabien_potencier_creator_of_symfony_is_hosting_an/]%0A%0ARemindMe! 3 days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Define good 
there are differnces, otherwise one of them would not exists. So before you really want to decide what to use or which one is better, you should ask yourself which of them you can (get) support if problems start to happen. If everything runs and you getting problems or requirements which are complicated you can then start to find a solution. And then you may find that the other setup suits you requirments / problems better. tl;dr If you don't know yet why you need one over the other use the one which you get more support at the start.
Out of curiosity, what do you feel that this (free) course from laracasts is missing? https://laracasts.com/series/php-for-beginners
Wait... the venue has to allow you to stream? What kind of arrangement is that?
Now picture yourself as the pdo developer. You try accessing an extension and it fails. How exactly would go about determining that someone had an extra dll in some folder and alert the user accordingly? How exactly would figure out all possible reasons for a driver not to be found, check which was correct reason and then generate the appropriate error message? Probably a bit more challenging than you might think.
!Remindme 3 days
Sorry links are screwed up on mobile and always lead to pms, so I had to make an own post.
Just a simple thing: Once the book is printed - its outdated. And I guess today everything and everyone is going to search online for tutorials or beginner guides.
What do you mean by old dependencies? What exactly took you most time?
What's your use case? 1. Largely static content? 2. or highly interactive / session based browsing? in the first, you won't notice a difference, up to a point In the latter, I'd look at the NGINX side of things to do what you need to do. There's SO many xfactors here that make that decision NOT the only one you need to worry about as well.
Nothing, I actually went through it. I prefer books because usually there is more material. It's also easier to re-read than to re-watch
That's an issue where you can't trust anyone's opinion.. Everybody will tell you that X is better even though they haven't tried Y for at least 5 years. So my suggestion is to benchmark it yourself with your application and decide based on that.
That doesn’t really answer my question. But thanks.
I’ll go with your suggestion then. Thanks!
it hasn't been since about... 2010
Most modern PHP deployments use nginx and PHP-FPM (through a unix socket). Personally, I think one of the main reasons for using nginx over Apache is the much, much better configuration format.
The article doesnt note the changes in session handling. That kind of screwed quite a few frameworks :) At least there was some more work to be done to get that working, e.g. for testing and mocking.
I said elsewhere in the thread I’d go with apache. I’ll try them both out after this recommendation. Thanks!
This is false on the face of it. Eloquent just makes me _wish I was dead_. But this is not the same thing.
I could see it if they're using the venue's wireless or hard wired connections. The attendees using the conference provided wifi is liable to stress the network capacity quite a bit already but maybe streaming could stress it a lot more. Longhorn PHP is a multi track conference so it wouldn't just be one talk they'd be streaming, at a time - it'd be up to four.
Last year Twilio provided closed captioning for the main conference room. Is that going to be happening again this year? I note that Twilio isn't on the sponsor list. I suppose it's not that important - I'm just curious lol
No. If anything it makes it harder. Having a JIT in place makes the engine far more complicated, so implementing new features is much harder. Seeing as half the current problem is just making any implementation work, making that more difficult isn't going to deliver generics faster. Making a language perform faster !== delivering new features.
I have an author working on one for [https://phparch.com/books](https://phparch.com/books)... In the meantime, this could be a good start and reference [https://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/](https://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/) (yes, also working with one of the authors there to update it)
....you don't want to use .htaccess files. It's hard to justify that statement without spending longer than I have available to do so, but really you should build your app without them.
!Remindme 3 days
Probably would need to document it on the README how to include using the composer.json but that's not a big deal. I will see if I can change it into functions by next week.
A framework is a set of tool you can use to develop your project. In PHP, the most common is Laravel and Symfony. The good: you don't have to develop everything the framework provide. For example: easy HTTP request handling, easy form building, no need to worry that much about security and curating the data people send from forms, easy templating to display dynamic content, easy way to scale your project if needed. The downside: if the framework provide you with something you want to modify, you need to extend it or hack around. It's particularly true with ORM (a layer of abstraction on top of your database to do SQL request in a simple way): if you need to go into complicated queries, you might have some difficulties to use your super cool pile of Doctrine config. If your needs are outside of the scope of the framework, it's where you will see the limits. In short, it really depends on what you're building: \- Project you will never modify or just a little: forget the framework \- Middle project you will scale: I would go for a very simple framework, like this one: [https://github.com/symlex/symlex](https://github.com/symlex/symlex) \- Big application: Symfony maybe, even if it's hard to test... I have a lot of bad experience for that. After 8 years of PHP, I would still go with lightweight framework which doesn't force you to do what the framework wants you to do. That's a big drawback. &amp;#x200B;
It was relative information though as most peoples answers are based on their opinion, this isnt a help subreddit thats /r/PHPhelp. So when you have a bunch of people giving you answers already, and they caution you. Try not to come across as you have an attitude problem. Depending on the project I work on I use both Apache with mod_php or nginx/php-fpm. I much prefer the nginx/php-fpm mix for performance however and would advise you try it out. A lot of devs find it hard to first transition from Apache over but its not as daunting as it seems. 
More info on that one? I haven’t heard of it at all, and I follow that stuff fairly closely. 
I confirm. If you don't ask, you won't learn. If you don't learn, you won't grow.
The book 'Modern PHP' is quite good to get someone up to speed. Not thaaat explizit but gives a really good overviee. I think its from the author of 'phptherightway'. You will of course still need to do research, but it gives you a good start for a lot of important concepts
 Reddit not mentioning them does not mean they do not exist. http://www.letmegooglethat.com/?q=learn+php7+book
While I appreciate this effort I have a hard time seeing much benefit for PHP's current execution model. We would have to move to an application server approach (like jetty or tomcat) for the JIT to optimize properly.
*Insert literally anything here* may be killing you (if you misuse it).
The reason it is a legit expense because generally you're purchasing some sort of assurance. If the open source community all decides to up and quit and a critical bug is found, the organization selling the license will work on fixing it.
We've seen better performance with apache 2.4 vs apache 2.2. If you use apache make sure it is v2.4.
I'm done with books for this reason. They take up space and they're quickly obsolete. Online resources are so good these days
Use php 7.2 -- choose your Linux distribution accordingly. php-fpm is definitely the way to go for php processing -- much better scalability over mod\_php I was an apache guy for a long time before switching to nginx -- they both work, but nginx has a lot more active development going on, and releases far more frequently. &amp;#x200B;
What changes exactly? Could it be included in Rector?
What exactly do you ask about?
WiFi isn't the problem, actually...AT&amp;T runs the network and with a full complement of attendees last year the network didn't skip a beat The reason is the same reason venues require food to be purchased from the venue if you have an event there: their venue, their rules. Basically simple as that.
I/we still use mod\_php .... it works well, doesn't surprise us and does the job. I've not seen any reason to change.
I see nothing wrong with apache withmpm\_event and php fpm. Sure, the config takes a while to get used to, especially mod\_rewrite, but if you do, it's pretty powerful.
+1 for Guzzle. Try to reproduce asynchronous call made, if too complicated have à look at chrome headless php project chrome-php. It will process the js just like chromium does
To be clear here, Twilio sponsored (in part; it was pretty expensive!) captioning; we actually retained White Coat Captioning for the actual captioning. That was pretty last-minute last year for what it's worth :) With all of that said, we'd like to do captioning again next year, it's prioritized pretty high on the list of things we want to provide, and we're currently going back and forth with a number of sponsors, Twilio included. So we should have more to announce in a bit.