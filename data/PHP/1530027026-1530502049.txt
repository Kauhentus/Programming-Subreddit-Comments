and also because in my table , the row is called pro, and since there are on 0 or 1 as a possibility,if you read it directly, it's either is a profesional or isn't a profesional and if it isn't a profesional , it is a civilian
will do, but i'm still learning and had to start working on a serious project for an internship (internship related to school) so i did it the way i knew how to because the time ammount i have is finite and had to be "fast" + good enough in that case
also, do you know anyway to avoid duplicata database side, without scripting ? 
Hmm gives me a syntax error: `&lt;div&gt;Hello &lt;?php echo $name; &lt;/div&gt;`
it's a bad name to start with. buyer_type with enum is much better. 
unique index
Only if it's last. That's not last
i now know that and won't do that same error next time, but i'm still learning (1 year of an Associate degree)
Nobody blames you, so no need for excuses. Getting back to types. you can safely use "s" type with any data types. There are few rare exceptions that you won't likely meet with. 
It's totally straight forward. Just define enum, put strings in the querys and it gets saved us integers. 
Personally I love chart.js. Very extensive documentation and tons of examples. 
Because why should it? If it only gets parsed by PHP itself e.g. a Class, Interface or whatsoever, I don't see the value of it. It's just a wasted line in your file. 
`isset()` is way easier/faster to type than `is_set()` in my opinion. Although it wouldn't really make a difference if your IDE would just replace `isset()` with `is_set()`. You could also replace `strlen()` with `str_len()` !
I wonder if we could get statistics on the number of visits to php.net/str_replace, etc. Multiply that by ~15 seconds for context switching, at about $40/hr on average lets say. That's lots and lots of money for someone like you to say "lol it's not a bug stop whining back in my day..."
Can you give a couple examples?
I guess you are one of those who supported leaving T_PAAMAYIM_NEKUDOTAYIM in the PHP, because it's just a little unorthodox and maybe strange but junior devs will get used to it, eh? For those who don't know what I'm talking about: https://philsturgeon.uk/php/2013/09/09/t-paamayim-nekudotayim-v-sanity/
I might not have made it clear, but I think you've misunderstood the context for the question I asked. I'm not saying that whenever you have a code issue it is because you are fighting PHP. I'm saying that if you happen to have a sane development environment where your IDE, test suite or tooling protects you from surprises/quirks/gotchas this is **in spite of PHP**, not because of it. PHP didn't help you achieve this sane environment (it did the opposite). There are languages out there that are literally designed to be helpful, and the next generation of developers will choose them if the ecosystem does not respond. If you are a developer that has a large amount of your CV experience in PHP, and the progress of the language is of benefit to you - then you really should care.
It's not a first class citizen in Lambda. Yes, you can package your own PHP executable and call it from Node or Python. But, not only is that super hacky, but in a world where you're limited to a total Lambda deployment size of 50MB zipped, not having to packing in the runtime with your code is pretty valuable. Both Google and Microsoft both support PHP natively in their Function as a Service paradigm, so AWS is a bit lacking here.
What would you alias them as? A good time to do this would be if PHP core was namespaced, (the author suggest scalar objects) this gives additional benefits while the changes are being made. Aliasing I think the worst of all worlds. It will be like all the mb_ functions. Perhaps there is a reason for the mb_ functions to coexist with the regular functions. I don't understand why they didn't just replace them.
I'm not saying that PHP shouldn't try and improve. Just about everything and everybody can benefit from improvement. All I'm saying is that it really hasn't seemed like a big deal to me. In a practical sense. In my day to day job as a PHP dev. Sure, every once in a while I'll pass a string when it wants an array. You just go back, through on some brackets, and move on. When discussing a language I think you can have two conversations. An academic one and a practical one. People try and overlap them. Just because there is an inconsistency in the language does not mean there is a huge issue when using it day to day. I fully appreciate that if you're coming from a more strict language it can be frustrating.
Oh, let's see. I think I was trying to access the container in a repository in Symfony. For whatever reason. Seems like I was having to jump through too many hoops. You're really not supposed to do that. You can - but it's not really how you're supposed to structure things. Realized I needed to make a listener (or something). Was super easy because I was following conventions. Same thing with WordPress's hooks and filters. They have uses and timings. If you're not following convention you're going to run into problems. Work with the tool instead of forcing your own opinions.
I'm not using PHP in my actual job, but some of the reasons I would choose PHP over another languages: - It has libraries and frameworks for rapid development. I'm talking about web frameworks and ORM. For me nothing is comparable for web development to Rails/Django/Symfony/Laravel or similar. For example, I like golang, is fast, easy to deploy, ... but if I need to create models with relations, nothing beats a dynamic language IMO. - You want to have static typing, with PHP you can too. Of course, type hints in PHP maybe are not the best solutions but they can help a lot. - It's fast. I don't have any benchmarks in front of me to show but I think I'm not very wrong If I say that PHP is faster than Python and Ruby. - Using plain PHP with $_POST,... it's not the best solution for a production environment. But to learn how the web works I think it's fucking amazing, with no frameworks and a little of knowledge you can make a web page. Yes you would make a lot of bugs and security holes but enough to get you exited and motivates to continue learning. 
That's more about a framework/platform and its idioms and conventions, though, no? The poster was taking about languages
So basically, he should be asking that to his corporate overlords instead, right? :)
I wasn't aware that Google and Azure supported PHP, so there's at least hope.
If people are visiting online docs for this then they are just not using good tools. I didn't say it wasn't sub-optimal, but it's definitely not so egregious to warrant backwards incompatible changes. There are other solutions that fix the underlying problem.
&gt; There are other solutions that fix the underlying problem. Assuming you're talking about the inconsistencies in the core, what are these solutions?
Bitch about it in your blog.
Not really. My main concern in this instance is backwards in-compatible changes which the author was advocating for. In terms of T_PAAMAYIM_NEKUDOTAYIM the considerations were other, but that seems like a good change where the available compromises allowed both things to happen. They reduced the weirdness with come compromise. You can't change the order of these core function params without major downstream issues.
The primary ones are scalar objects and a "core library" class or similar which provides a modernized, updated, standardizes API into the core functions. Then the "things new devs need to learn" is much smaller: Use the object methods, or use the core library class. This leaves core alone, they can even be marked deprecated, but causes not backwards compatible issues.
The general concept is the same though. And if you want me to limit it to the core of PHP then I've got nothing for you. It really has never been a problem. Maybe I'm missing something. Maybe you guys are all using some super complex stuff I've never heard about. I don't know. 
Did you read the post? That's literally exactly what I proposed as my preferred solution.
Didn't realize I was talking to the writer of the post. Thought it was someone who hadn't read it. I was just reiterating that this sort of thing didn't require backwards incomaptible changes and there are other solutions. You were the one who asked what they were. I wasn't disagreeing with your article. I was providing additional support for the "anything but backwards incompatible changes" camp.
.php should be more than enough... 
I've had a good experience with [C3.js](https://c3js.org/).
Ahh okay. One side note, is that a deprecation is a backwards compatibility issue - it's just an issue for a later version. `E_DEPRECATED` is warning about "code that will not work in future versions". I'm not sure how flexible the "which version it stops working on" logic is.
If people just learn how to use composer / namespaces it would make most things so much better. Thankfully, many do. However I've seen some frameworks circumvent PSR (looking at you IPS) for no GOOD reason.
No. Many use cases for it. Totally disagree
Theres so much weird stuff, you will most likely have a footgun. Take a look at the datetime class, its full of weird bugs never to be fixed.
The comments here, not the article, make me excited about the future of PHP.
PHP can never have native async without a new async stdlib. How do you have non-blocking calls when all the core stuff is blocking. PHP is too tied to a webserver like apache, and use it for its "parallelism"
Nope they have not. The biggest missed opportunity was in 5.3 when namespaces were introduced. There was a push for a reserved core namespace that would ultimately contain a new stdlib. This all was ignored, and instead all effort was put to adding goto in 5.4 PHP has no vision, it has copied features from other languages without any design at all. Some features are copied from Java, other from C. Other from Perl and other from Python. With all this mess you get what PHP is today.
Well, i guess you can wrap the ugly core with abstraction after abstraction. Its still rotten in the core, no matter how much InterfaceAdapters you add.
That train has sailed. Actually i removed all the PHP work from my resume because its difficult to get a decent job when all you get is shit for using PHP. Today im happily employed with stock options writing in sane languages with sane developers. Im really glad i chose to never touch PHP code again. 
^The linked tweet was tweeted by [@GridDBCommunity](https://twitter.com/GridDBCommunity) on Jun 26, 2018 17:54:42 UTC (0 Retweets | 0 Favorites) ------------------------------------------------- The GridDB PHP client is now available on GitHub. [https://github.com/griddb/php_client](https://github.com/griddb/php_client) \#PHP \#BigData \#NoSQL \#IoT [Attached photo](https://pbs.twimg.com/media/DgonpOlUwAAvqfo.jpg:orig) | [imgur Mirror](https://i.imgur.com/KeAKaH8.jpg) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
PHP is getting mature by each version. Hopefully in next versions it will be much enhanced and it will have faster and much intelligent interpreter which will save the memory and decrease the response time
I mean I hear phrases like "right tool for the job" or "if it feels hard, your probably doing it wrong"-- and I don't disagree, but they're like truisms. I've never figured out how to apply them to specific situations in advance, to save me trouble. A saw or a hammer are simple tools-- I understand them well and know when and where to use them. However, platforms, like say drupal or laravel are super complicated , with lots of books and crannies. Even people who've been working with them for years don't know everything about them. So as a programmer, what I'm often asked to do is recommended a tool based on a "job" that's ill defined, and will change between now and the start of the project. I'm asked to recommended various tools that I don't know and haven't used in depth. Maybe I've done a Hello World or watched a screencast on it. There's lots of info out there, but just looking around, it seems that you can find examples of people doing almost anything with any tool. So I don't feel I have a way to know the right tool for the right job beforehand. Only when I get stuck, usually after asking for help, do I learn I was actually using the wrong tool for the job. Some projects have pretty good documentation, but they only cover the basics. They don't tell you architectural strategy. Like, in your example for symphony, you needed to use a listener instead of accessing a container. Is there a way you could have learned that, before you got into that situation? I'm not arguing "use whatever tool you want, it doesn't matter". You should use the right till for the job. If you're using the wrong thing, you should such. But how do you learn when you are using the wrong thing? For me, it's only after I've gone down the wrong path for a while.
Be glad I'm not the guy going "-2" for keys. =P
&gt; People put a lot of hard work to make PHP better, they deserve a bit of love from us &lt;3 Agreed. Don't let the hate of things translate into the hate/disrespect of people.
Or you can use another language is that's a problem for you. PHP has his flaws, and the core team is aware of that. My point is, out there is people using his time to make the best they to make PHP a great language for developers. Have you look the PHP-RFC? If you spend 30 minutes, you will see how many times the "front ugliness of php" has been discussed, and there are reasons why they won't change that. One of the main reasons is: There is anyone willing to do that work. If you want to change that, everybody would be happy if you spend your time fixing the PHP flaws everybody blames all the time. Of course, there are other points: Have you seen what happened to pyhon 3? even people on OSX has problem installing vim because of that... there are "wtf" everywhere because of that. [https://www.google.cl/search?source=hp&amp;ei=04AyW7ugIIGowgTf3YOgDA&amp;q=vim+python+3+brew](https://www.google.cl/search?source=hp&amp;ei=04AyW7ugIIGowgTf3YOgDA&amp;q=vim+python+3+brew) I think is ok for you to hate PHP and the interface it shows, but at least, show some support for the people who use their time on making PHP a better language. I don't know why in the development community we have so many people throwing free shit everywhere.
At what point did PHP stop being great? :) 
You lost me at https://github.com/PatrickLouys/professional-php-sample-code tbh. The code isn't great, most of it is trivial and, more importantly, is completely devoid of any documentation.
&gt; right tool for the job Which is why I hate that phrase. There just isn't way to know the details if you've not done it before. Devs - especially on Reddit - like to think they can learn some syntax, read a couple docs, and go to town. You know...because their "good developers" that "learned the fundamentals". Beyond a hello world that type of knowledge just isn't adequate. For a lot of what we do in web just about any language is fine. You'll find devs that like to think their opinions are facts. Or some technical detail of a language means it can't do this or that. CMS, website, CRM, ERP, blog, dashboard, whatever. They can all essentially be done by C#, Java, PHP, Ruby, Python, JavaScript, PHP, or whatever. Let's say you need a desktop app and all your devs are hardcore JavaScript devs. What are you going to do? Force them to learn .NET or C++ or let them use Electron? The answer is almost always Electron. Regardless of how good of dev you are the code you create in a system you don't know isn't going to be as good as somebody's that is well versed. The best tool for the job is very often the one that gets the job done.
Almost certainly all integration tests - very top heavy. Slow running test suites are a red flag that something's not been done correctly when choosing test cases.
Eh, those that give shit are closed minded. Admittedly, it is difficult to get people to understand the strengths of a scripting language over a compiled language. But we do our best. What language have you moved onto? What waned you over?! 0.o
&gt;are there lots and lots of guides? If so which one/ones should I follow? The PSR coding standards are quite widely adopted in the open source world, as above I follow them myself outside of work. If you get a job in a dev shop its likely they will have their own standards and there for you will have to change your style to match so there is no silver bullet. If you're just beginning then following the PSR standards will really help in keeping your code consistent and teach you how to follow and think about style guides. However it's not a religion as some people make it out to be so as a beginner I wouldn't get too hung up on it just yet it's something that will come with time the more you develop and work with other people's code.
I'd like to have generics. 
Define "Real" apps and a "real" language for said "real" apps
With apps i mean just that. Applications, NOT websites. Apps with real business logic, apps that are worked on by large teams for years, and decades. These kind of multiyear projects need a robust and solid base, these kinds of projects needs something rock solid, battle tested and sane. Can you write it in PHP? Sure! You can also write it in assembly. Whould you do it? Hell no! 
Hey r/php, I created a small library for storing php arrays. What do you guys think? What could I improve? Any suggestions and critique is appreciated. 
Guess your not a fan of Javascript, either
So what is your base argument for not writing php? Doesn't seem there is one other then "it's not battle tested" which is a flawed argument considering major corperations (ahem the ever most popular social media you post your drunk pics of the weekend on cough: facebook) is written in php. Working and living in a oil rich city, where its a battle between java, C# and php (with php winning) we have a lot of enterprise and "applications" built in php. In fact as I type this at my desk, I am working on one written in php. So ..... Whats your argument again? Should I suggest we write this in rails? Java? C#? whats a battle tested language? Fortran? That most banks still use? C?
But why? Why would you stick with it? Its obvious it will/cant change? Python made a decision over 10 years ago, and today python 3 is a really solid and sane language to work with. I do most scripting in Python, and if i do anything web related i usually pick python, or Scala/clojure depending on the requirements. PHP has really nothing to show for, it had its time when the norm was to build for the web as we did in 2004. Today? Not so much. The requirements are so much more complex, and the core PHP model does not even let you handle unicode in a sane way? Common this is 2018 and unicode support is such as mess. Lets not even get started on the process model of how tied PHP is to a webserver.
Facebook is not written in PHP. It was originally, but after some time they realised it was a absolute disaster of a choise for a language. So the solutio was to pour millions and millions to develop Hack, a saner version of PHP. Last i heard its goal is no longer to work with just PHP code (not sure about this, as i never used hack) Im not going to tell you what to use. You decide when you digest the original business idea and its requirements. And i was referring to companies who start today. If the company did pick php 10 years ago they are kind of stuck with it. New apps are rarely using php. 
If you're under the impression that PHP has nothing to show for itself over the last decade, I'm sorry, but you're not paying attention.
Making good progress along with PHP 6. Release date is coming baby :D
In other news: the sky is blue.
As the old adage goes, only a poor craftsman blames his tools :)
After the bolton OOP features stolen and badly imolemented from Java, after namespaces again stolen and poorly implemented from perl there has really been no major new stuff, or anything else that would improve the developers experience. The unwillingness to break BC will forever hold PHP back in its dark and horrible past. Its reputation will be also just that, a hated langauge. PHP 7 had some new features, but really? How do they help the old shit still in core? All the core functions you use everyday are such a pain to use. All the weirdness and bugs are still there. The fact that PHP thinks ”its documented, its not a bug” already tells you lots about the language design.
I don't like having to put the comparison operators in quotes as separate variables. 'age &gt; 30' is way better than 'age', '&gt;', '30'
Wordpress’s redeeming qualities are few and far between. I back out of talks with recruiters when they say their clients use it. 
&gt; different purpose method chaining is the only purpose, not? &gt; not a fan of Javascript Not a fan, but used to use it. But it has [pipe operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Pipeline_operator).
Google Cloud Functions does not support PHP, only Node.JS 6 :( And Microsoft only supports it in beta and it's very unreliable. Totally agree on the other stuff though.
&gt;But why? Why would you stick with it? Its obvious it will/cant change? Take a look at the RFC. PHP is changing. Try to follow the people behind the Zend Engine. I just found they being awesome people. I just want to follow them and I ask people to respect them for their job, the same way I ask people to respect any other developer. I never said somebody should stick and just use PHP. I don't stick just to PHP, I like PHP, a lot, but I also use other languages. At the end, there is no silver bullet. &gt;it had its time when the norm was to build for the web as we did in 2004. Today? Not so much. I know people who still code webs as we did in 2004. But they're gonna do that in any language. It's not PHP fault. Yeah, Internet is full of old resources and people telling you to use code igniter 2 even when it doesn't come with a package manager (although you can install with just one line). All those people is going to die programming that way, they just don't \*want\* to evolve and adapt to new technologies. The same happens everywhere, I had a job three years ago where I have to continue the development of a web app in struts 1. Dude, it died in 2008. Ten years ago! and people still using it, the worst is, app wasn't old at all somebody started it some months before that. Is people who still programming as if it were 2008. They don't evolve. But it's okay. If they don't want to evolve is they decision. But don't blame the language.
That disclosure timeline is simultaneously reprehensible and totally in line with what I'd expect from Automattic's employees.
With some of the more complex vulnerabilities discovered in recent years, I'm surprised this one hasn't been found until now. Or, at least made public...
It gives developers "an admin" although even the admin part is not very good (wordpress ACL system is too basic). I understand why they'd use it though, this + the huge ecosystem. I worked in publishing and Wordpress is definitely big in that sector. Although many businesses are now moving to Saas solutions instead, things can go pretty fast downward for Wordpress. As more and more publishers choose to cut maintenance cost. This is absolutely a good moment right now for Saas vendors in the CMS space.
I'm aware of this, but it doesn't create strong typing, e.g. $foo = 12; $foo = "anonymous"; \- is perfectly legal, which in my opinion it really shouldn't be, if you enable strict typing. I like the type inference system of some languages, so you don't _specifically_ have to declare a variable of a certain type, as long as the compiler/interpreter can unambiguously determine the type of the value being assigned to it.
Oh, I misunderstood you - I thought you meant that _not using_ a closing PHP tag could create problems. I'll move along!
Which isn't necessarily good. Electron is a resource hog, because you're essentially running a trimmed down browser for each application that uses it. I do see the benefit of it though, as it is cross platform.
They could include a php.ini option like `allow_closing_tag = True` so people who wanted it could enable it.
JS is worse then PHP and PHP is pretty bad.
&gt; is way better than Yes and no. It's not always better. you are talking about inventing your own sql-like DSL, which need to be parsed (similar to how doctrine handles introspection of queries). This can be done on top of any solution, but this is way more complicated (and since there are no good library for parsing, the only that I know is hoa/compiler, but I would rather see some parser combinators library around). Basically you need some kind of tradeof in this kind of things.
Because you don't use them so that are not intuitive for you. You could use that argument to any language featute, really.
Believe it or not, not everyone use heavy IDE for day to day work. 
Seven. Months. After. Reporting. To fix an unsanitized input. Seriously. What the AF. 
To those people I say: why not? Care to provide at least a few compelling reasons to not use an IDE? I'll save you the trouble of mentioning money and PC performance: - phpStorm offers monthly license fees which, if your main source of income is php, are peanuts. - they don't sell computers that are unable to run a decent IDE anymore. 
I think it's more than that. Their syntax is pretty unique. Fors, whiles, switches all have similar syntax. It just doesn't seem like that with tertiaries. I also don't really see the point of them. Save a couple lines? I'm sure they have a purpose somewhere but it's not my thing. 
Even by their standards this is a shocking response. Even if there are serious compatibility issues with the potential fixes, kicking it down the road and then just going silent is appealing for a project of that scope.
It’s not even close to 1000. Probably 50 at most. 
So why don’t you see the benefit of using PHP for desktop apps? It’s the same exact deal. 
I never claimed that following PSRs was a requirement. I was asserting that not knowing that they're even a thing is unacceptable. It shows a distinct lack of curiosity and desire to keep yourself educated, and that makes you highly undesirable to employers. You don't have to spend every waking hour outside of the office researching the new hotness, but to have never even *heard of* a PSR is basically a joke at this point.
Electron is kind of established pretty well as the defacto way to do it - I don't see a benefit in using PHP for it, when Electron and similar technologies exist.
I prepared wp plugin based on the snippet they propose as hotfix https://github.com/kkarpieszuk/rips_hotfix/releases/tag/0.1
Will these be included with DukeNukem? =P
If you count the functions referenced in the [consistent_function_naming](https://wiki.php.net/rfc/consistent_function_names) RFC it's about 1000.
May be you should try Postgresql?
Does OP or anyone else know which mailing list he’s referencing in this article ? 
https://externals.io/
The phrase '2^4 would be 4 bits' makes literally no sense. 2^4 means two taken to the power four. Or 2x2x2x2. That's all it ever means. The value of that is 16 in decimal. It's 0b10000 in binary and 0o20 in octal and 0x10 in hex (using roughly standard notation). Exponentiation doesn't change depending on the base the values expressed. You might argue it should be 0b10^0b100 but the answer is still 16. The range that four bits can express depends on the number encoding. With standard unsigned integers, sure it's 0-15. With standard signed integers it's -8 to 7. You could define a floating point representation but there's no common standard. The number of discrete values is (options)^(places) - i.e. for three decimal numbers it's 10^3 or 1000 options. 
"When talking in terms of binary". Does no one here know what Binary is? 
Thank you 
For something that was kind of a joke... https://en.wikipedia.org/wiki/Power_of_two#Computer_science
Np. You'll find a LOT of the recent postings here on /r/php relate directly to the internals mailing list. It's mainly inhabited by the core developers, but most of the time posts from there just get pulled onto Reddit for wider discussion.
Such a simple fix and they couldn't even do it in 7 months. Sad. 
Thank you
Side note to any PHP core devs, could we have comparison operator chaining? `if ($a &lt;= $b &lt;= $c &lt;= $d) { /* code stuffs */ }` `if ($a === $b === $c) { /* more code stuffs */ }` and so on.
Once you _really_ get to know a language, you start to see its flaws. I've never seen a programming language without any really dumb flaws in them. It happens, because those who design the languages are just programmers like you and me and make mistakes. So if PHP isn't sane, what is?
It's wordpress, what do you expect :)
Yikes! thanks for the note!!!
I once interviewed for a position at Wordpress. I'm kind of glad I didnt get the job. Working conditions would have been nice though.
What superior master race language do you program in now instead?
Yeah, it could toss an 'E_STRICT' or something that's more "recommendation" based. 
It's a "cool" idea that it's not practical. There aren't many use cases for such construct, and those that do exist, the current paradigm is easier to grasp. If this was Python, they'd tell you it's not Pythonesque. 
&gt; The WordPress security team estimates the time to fix to be 6 months. 6 months? Wow.
All efforts have been poured into the Gutenberg editor. I’m not here to tell you that Gutenberg is good or bad, but it’s the middle of 2018 and we don’t even have a twentyeighteen theme yet, likely because it will have Gutenberg support out of the box. I love WordPress, but damn they’ve put a lot of eggs in the Gutenberg basket. 
When would be an appropriate time to use 'pet peeve' if not now? water is wet, can people come up with something more original these days?
Yeah I just binge read quite a few of the threads. Interesting stuff, thanks for the link. 
I think they got spooked by other CMSes having that kind of page-building UI. That or they noticed that *every single* paid theme is a wrapper around 14 page-building plugins. Maybe Gutenberg is wasted effort. Maybe it's not. But I would've much preferred them to fork WP into two projects: a simple Gutenberg-y blog and a general purpose CMS. The latter could have things like UI-based CPT management and Advanced Custom Fields built into it. These are the things devs actually need rather than some "fancy" content editor.
No no, WP "devs" keep telling me it's secure and only the plugins are an issue.
Blogspam plagiarized from https://www.reddit.com/r/PHP/comments/8tqhnz/php_23_externals/ Reported.
WordPress is such a joke. My company builds a bunch of WordPress sites (easy money, keeps juniors busy when clients request it) but even then, I warn clients away from it. Why the fuck do people use it when OctoberCMS exists? 
Stopped reading after they linked that fractal of bad design bullshit again. Can we please stop posting that crap? It was kinda silly back in 2012 but now its completely irrelevant. And nobody with half a brain cares that the damn params are not consistent in the standard library. Its inconsequential. 
what could be more useful would be interval comparison: `if (0 &lt;= $a &lt;= 1000) {}` to check if `$a` is between 0 and 1000.
 Not explicitly trying to push HHVM, but have you tried it purely on benchmarking grounds? Might give a clue as how useful/useless a JIT will end up being to your specific workload.
Even Ze'ev is saying mid to late 2020 for 8.0. If we pushed that out to Nov 2020, that'd be perfectly in line with the current planned date for 7.5.
Geez, you'd think at this point every line referencing \`$\_POST\` would have been scrutinized. Haters in this thread be damned, it's a little surprising for a project this mature, which such a large community.
I would love to see event lib and jit in core. Maybe some built-in class to work with CLI. 
Clearly you've never written code in PHP3. =P
We pick languages based on the project needs. The apps we build are highly reactive and usually needs real time features. They span years and having a decent language helps lots. 
You are correct. Each language can be said to have its issues. The main thing i see with PHP that it is not designed as a language at all. Just a hodgepodge of functions that dont "cooperate" with other functions. Theres inconsistency everywhere, and weird behaviour all around. The stdlib is such a mess, and everything is global. Im not going to start comparing PHP to others, just look up any other mainstream language. Most of them are actually designed around a few key language concepts and mindsets. 
You can use the PSR7 request interface in Laravel - see https://laravel.com/docs/5.6/requests#psr7-requests
I think we can probably update it to "In other news, wordpress is insecure." actually. That solves both problems.
Oh, shit. I didn't know we're that far ahead with JIT. Thank you Zeev!
I agree about async. It's becoming somewhat pressing, with more and more work being calling remote APIs and what not. But the stdlib clean-up is not a project for one version... it'd fail worse than PHP 6 did. It should be seen as a gradual, long-term process. And the "all-code" file... srsly.
&gt; It's just a wasted line in your file. Oh no, think of all the wasted lines. 😱 ---
&gt; I consider it extremely unlikely that PHP will get native parallelism. [...] Non-blocking I/O, yes, and that's planned for PHP 8. Async is not parallelism. If we get async/await + non-blocking I/O that would be all a PHP app needs.
&gt; Non-blocking IO is node buzzword crap. In 2012 PHP was trying to be Java, now it's trying to be JavaScript. It needs to just try and be PHP. Guess what, Java also added non-blocking I/O, so did .NET and just about every major platform out there. It's not "some buzzword crap", it's important when I/O performance matters (and it increasingly does because PHP apps glue lots of remote APIs and services together, and guess what: HTTP, database connections and in general TCP, UDP are I/O).
&gt; Make PHP Great Again I know it's a nitpick, but you may get more support if you don't dog-whistle political references in your post title.
Can we get the code for this test? 
https://i.imgur.com/NKYXI0P.gif
Linux is my IDE, I can navigate 10 times faster in Vim then in any IDE. The only thing I am missing from PHPStorm is decent completion which is not a problem most of the time. But because PHP is retarded that way I have to check things like `($needle, $haystack}` order fron time to time. But no, I will not go back to using IDE, I was using PHPStorm for 3 years so I have comparison, try Vim for a year and come back to me.
I'm sorry. What is JIT PoC? Some cursory searches indicate it's a different compiler for PHP 8? Or a buffer? Can someone ELI5?
It’s a **p**roof **o**f **c**oncept for a **j**ust **i**n **t**ime compiler. This is about compiling PHP code to native machine code as its running. Especially in CPU heavy applications, like this mandelbrot example, this can yield huge performance increases. 
Woo boy. 1.7Mb for `wp_posts`, 9.4Mb for `wp_postmeta`, and that's for a site that's mostly a collection of pages and a bit of menu. Thank the stars that the boss is open to using a different CMS for new projects. While I don't see this particular project being ported to [Bolt](https://bolt.cm/) in a hurry, it's nice to know we're not going to _add_ to the madness.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
https://blog.intracto.com/a-jit-compiler-for-php
I cannot imagine that they are just "ignoring" it? Are their arguments publics?
[removed]
Thats more like "I dont have to like the hammer, the saw, the nailgun, my coworkers, or wood to like working on buildings"
So instead dof running an interpreter when a file is... 'used' it would compile it straight into machine code? 
There is only 1 number 11 between 1 and 20,000 so here's my solution: ``` function countElevenBetweenOneAndTwentyThousand(){ return 1; } ```
Indeed. PHP code is compiled to opcodes (stored in the opcode cache) when it is first loaded. The current engine is basically a loop + switch that interprets opcode by opcode and performs the actions described by those opcodes. A JIT engine will compile the opcodes down to machine code right before executing them (and cache the results), so that the looping and interpreting code is avoided and so the CPU cache can work more effectively (caching the native code). In practice it is way more complicated than that, because PHP has dynamic typing and machine code does not, so it will be constantly switching between JIT-native mode and interpreted mode, which carries its own switching cost (which could make it slower than purely interpreted), but if the JIT engine can be designed so "typical" code spends long enough in native mode it will offer a performance improvement. Code that is pure PHP and where exact types are known at the time of JIT compilation will benefit the most. Code that calls out to extensions or that does a lot of type juggling will benefit very little. Really clever JIT engines (like chrome's javascript V8) will observe the running code to derive type information from how it is actually used and recompile the machine code to match those types. Likely PHP's initial JIT implementation will be simple and gain these sorts of abilities over time to gradually speed up more.
Correct, still needs more OOP. Anyone? Factory?
&gt; Correct, still needs more OOP. Anyone? Factory? You could have at least used a class. Well. https://github.com/Herzult/SimplePHPEasyPlus
Only if you are a Pythonist!
edited 
i dont get it
That's exactly what you were asking for - a bit exaggerated but solid and well established OOP solution for the equally one-statement task.
I haven't seen it yet, probably because it is still a PoC and if predications are right, we won't see PHP8 for at least another three years.
I have a feeling this is going to make the ReactPHP stuff an order of magnitude faster than say it may be right now. Also the AMP stuff, I can't wait. Then I can finally say, PHP &gt; Nodejs :)
fixed the link in the article. Thanks for pointing that out
I saw your tweet at them this morning. Seems like they're backtracking hard, the tweet you mentioned is gone and all I basically see now are tweets mentioning releases.
That's an unclear question - is that, how many times does the number 8 appear (i.e. once) or how many times does the digit 8 appear (i.e. 8, 18, 28, etc). 
its how many number 8 appear. sorry my bad english
No, don't use enums, enums are evil and a pain in the rear end to maintain. If you can even vaguely imagine adding further values to them later on, don't use the enums. Define the value with a constant in your code, and/or name the table and column sensibly, and store an int. If it's a bool, store a tinyint(1) as the colonel mentioned already.
Ok. It has always worked perfect for me without any issues on production servers, even adding new values. You only need to know what you are doing. 
Docker image : [https://github.com/mente/php-docker-jit](https://github.com/mente/php-docker-jit) Github : [https://github.com/zendtech/php-src](https://github.com/zendtech/php-src)
/r/PHP is not a support subreddit. Please visit /r/phphelp for help deleting from here and reasking there will be much appreciated. 
To be fair, the enums I've come across were done badly (lists of numbers), which when you look at the data you go "Oh, that's an int".. and then you do a select where field = 4, and you get the records with 5 in them, unless you wrap the 4 in quotes - because it's accessing the enum by index :(
I would just loop 1-&gt;10 000 and then check with regexp if there's number 8. Nothing fancy but get's work done. My result was that 8 occurs 3439 times between 1 and 10 000.
I assume your question is "How many times does the digit 8 appear in all the numbers between 1 and 10,000 inclusively?". If so then this doesn't require any OOP. Here's an example of a solution https://3v4l.org/jquoI.
That's a very bad enum idea... If you do it correct with string with meaning is a very good and readable option
you god!
The question is a bit ambiguous, but assuming that they wanted a count of the number of occurrences of a given digit within the given number range (e.g. the number `8888` should count as 4 occurrences, not 1), I would probably do something like this: &lt;?php function count_digits_in_range( int $digit, int $range_max, int $range_min = 1 ): int { $count = 0; for ($i = $range_min; $i &lt;= $range_max; $i++) { foreach (digits($i) as $i_digit) { if ($i_digit === $digit) { $count++; } } } return $count; } function digits(int $n) { while ($n &gt; 0) { yield $n % 10; $n = floor($n / 10); } } Where your example would be given by `count_digits_in_range(8, 10000) === 4000`.
this docker image is quite outdated (last build was year ago). There are more fresh images (dmitrybalabka/php-jit) but I still not sure that this is actual. Maybe someone will prepare more up-to-date image to play with.
You can replace your loop body with `$count += substr_count(strval($i), '8');`
perfection. ill post my work later 
what did they tweet?
here we go again
or you know the way the table was made and what mean what and have a documentation relative to it and don't need these things
THis will only help complex applications. For the usual web apps the speed improvement won't be too big (at least for this moment).
it made me wander yesterday when I saw this tweet https://twitter.com /php_net/status/1011650104787394563 because I follow @php_net only because it announces new releases and patches. 
Modern PHP poorly implements Java's idea of OO which poorly implements smalltalk implementation of OO, when in reality Java implemented something close to Simula 67 http://wiki.c2.com/?AlanKaysDefinitionOfObjectOriented The focus of OO according to the person who coined the phrase was supposed to be the messages, early versions of small talk didn't even have classes, just objects and messages It's so depressing seeing Symfony &amp; related systems being held up as the pinnacle of modern PHP and then labelled as "real object oriented programming"
Actually, PHP's OO is much closer to Smalltalk's ideal in that the magic methods provide default fallback handlers which allow some magic to occur. Laravel takes advantage of this reasonably well (although the crazy class loading tricks are distracting). 
https://3v4l.org/nX9Xa
Like they set up the site where anyone could send them a text they would tweet for a modest sum of 200 euros. Sort of decided to monetize their vast 170k user base. 
Use `range` to create your array, `implode` it in to one giant string and then do `substr_count` on that that giant string. Fast, simple, easy. It becomes more interesting when the numbers get larger and larger. What if we wanted to do the same thing, but with numbers between `1` and `10, 000, 000`? We run out of memory in `3v4l`, so we can go for the approach of /u/FV68s, where we only loop over the numbers instead of creating an array. That way you don't need to store the entire number set as an array. The key decider here is whether your number set is small or large. 10,000 numbers? That's tiny, may as well just throw it in to an array. `10, 000, 000`? The array is going to be `1,000` times larger. Definitely look for a more memory efficient way. Here's both of those solutions ``` $count = substr_count(implode(range(1, 10000)), '8'); $count = 0; for ($i = 1; $i &lt; 100001; $i++) { $count += substr_count(strval($i), '8'); } ```
well explained. thank you for sharing your knowledge. 
The Wordpress team doesn't care if \*privileged\* users are allowed to execute arbitrary code - it even says so in their handbook. [https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html](https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html)
Damn that's a sexy one.
&gt;$count = 0; for ($i = 1; $i &lt; 100001; $i++) { $count += substr\_count(strval($i), '8'); } Onliner: ``` for ($i = 1, $count = 0; $i &lt;= 10000; $i++, $count += substr_count($i, '8')) {} echo $count; ```
We see 5x increase for pure math, which is the point of highest increased in JIT. It's not realistic to expect an order of magnitude increase in overall performance, or to expect PHP's small (but dedicated team) can outdo the millions, at this point billions, Google has invested in its V8 engine. But what we can expect is another overall 2x increase with PHP 8, and a very serious upgrade for apps focused on computation. And that's a huge win enough. 
&gt; If that is the only parameter that's important, It's not the only thing thats important, but for many/most projects it is the most important parameter to optimize towards. &gt; but in my opinion it also comes at a cost because of the inconsistencies in the language and the lack of strong typing Language inconsistencies have basically no affect on the quality of your application - they're simply 'facts' that you learn as you go. However, I do agree that the lack of strong typing is a shame - but PHP (today) isn't terrible for this - you can ensure correctness of types across method boundaries which eliminates most issues in my experience; it's rare that you'll get type errors in 10-20 line functions than it is across system boundaries without it. &gt; I'd probably make it on Golang these days instead; the GTK bindings are not 100% complete, but they are decent. This project pre-dated Go by a decade - but even if that wasn't true I still wouldn't have chosen it as a language; the only other sane choice (imho) would have be Python - but I still would've chosen PHP as I much prefer it's type system for large projects.
To counts the number of 8s from 1 to 10^n (10,000 = 10^4): ` $n * 10 ** ($n-1)` I'm sure they'd be impressed if you came up with that on a whiteboard.
haha too bad they want it on sublime ;) thanks!
Anyone else notice that the performance of that shits the bed after PHP 5.6?
Does this mean that type hinted code will theoretically receive a larger speed boost than methods with standard php $variables?
Not at all. Most of that hate is directed towards languages and libraries. Not hardware (e.g: wood), people (e.g: co-workers), or process (e.g: contributions). I don't hate hardware, but I don't really like it either. The language tooling has greater potential than just a hammer. Here are some joys, the tools help (or have potential to help) bring, than just more a building: * Help people: bring joy, save time, remove problems, etc. * Bring people together: improve communication, workflow, and processes. * Discover new things, collect information, and use it to help people. As a part of that process, here are some other fun things: * Bringing technology together to create something new, or make something existing better. * Organizing, designing, and creating things: data, code, and infrastructure. * Collaborating to find ways to improve: not just the data, code, and infrastructure: but as a group, organization, and individual. That last part may be one of the keys of my path to the _dark side_: 1. Don't be blind. (e.g: "I love X, just use X", Why do you hate X? "I don't know.") 2. People are different than things. It takes a lot of work to make and release things. Respect them and their decisions. 3. Don't just hate, improve. Love is blind. Neutrality is neutral. Hate helps motivate (ideally good) change. I could go on, but that seems to be enough to get the point across. Maybe one day I won't hate the tooling as much, but that day has not come, yet. tl;dr Hammers have limited potential. Programming languages not only have nearly unlimited potential but have a process that's enjoyable as well. 
Ah that makes sense thanks for taking the time to write this up sometimes its nice to know you havent spent a whole lot of time learning things the wrong way self taught can be hard sometimes!
If you require that file you could access it private / protected/ public. Depends on the namespace of declaration. What about static calls?
Type hinting definitely doesn't hurt, but PHP's type hinting system has huge gaps where it is easy to introduce type vagueness, so it's not necessarily as simple as saying "type hinted code is faster".
Good point. Thank you.
You are welcome. After reading this thread I have made some optimisations https://3v4l.org/U4u8i.
Private (current namespace only) seems reasonable. Protected feels off.
A client who I help maybe once a year (not a developer) had taken over a website and was getting an error. He googled for an answer and one of the top results for the PHP error was the above....... Their advice.... Just downgrade PHP to make the error go away! It's worrying that stuff like this is making it to the top of google searches as it's that kind of advice new comers will follow
And what would you do? Rewrite the app? Contact the author?
Except... that's the correct advice to give if the codebase they're running is targeted at PHP 5.6, which if it's using mysql_error, it obviously is.
It's not realistic to *expect* any performance improvements in a PHP JIT because it will have to either make expensive filesystem operations to cache JIT information or lost it all. PHP's runtime model of discarding the execution context after every request is fundamentally incompatible with a good JIT, so either an entirely new runtime model that discards just stack frames and keeps JIT information around will have to be built, or the JIT is going to cause more performance issues than it solves. 
 Such a thing would only be useful if the language enforced it, but you have to ask why? The developer has made their point clear to PHP that it wants to use the class, and it can, short of a private constructor. What if someone wants to write an test for one of your private classes? They've got the source code and can delete a word or two, making your system quite useless. At most, all your suggestion would involve is a person going to the source code and deleting a keyword or two. What might be nice is if certain classes could be marked as internal and IDEs would ignore them by default on autocomplete. This could be done via PHPDoc.
As this post you link to says, they're not very sure about their own benchmarks. One reason is that right now PHP web apps avoid computationally intensive tasks because PHP is not computationally as efficient as JS, Java or other JIT or compiled languages. If JIT becomes a core feature, we'll start seeing code change to take advantage of the new performance efficiency. For example you'll be able to replace on-disk caches with on-the-fly computation for some things. And then when we compare a PHP 8-optimized web app with a PHP 7-optimized web app, it might turn out PHP 8 gives a significant edge when you write for it, rather than just run PHP 7 code on it.
If the app isn't PHP 7 compatible, then it's acceptable advice. Sure, better advice is enable ext/mysqli, refactor app, etc. but as a short term remedy to keep things running fixing the most pressing issue is what's important.
&gt; But I oftentimes do not wish to do so, I simply want to make a class for my own internal usage. I do not really want my class to be exposed to all lib-users. Does it really matters ? It's not like it is closed source software anyway. But I know you are thinking more of missuse. Following on ... &gt; In other words, lib-users should not even worry about creating/accessing/knowing of those classes. They're purely internal. Well, usually they don't, especially if you have good documentation, which means more than just the generated phpdocs; what I think of is several examples of correct use in different use cases, and pointers to the way your code was supposed to be used. No one likes to go through source file and generated phpdocs to do your lib equivalent of an hello world. If end users do stupid things with that, well, public classes or not they would still shoot themselves in the foot someway. And you would prevent the legitimate reasons to extend and overreach in your "private" classes. What's wrong about someone highly modifying your internal code if he wants to, as long as he knows he is doing black magic and shouldn't call you for help ? To me it sounds like an un-needed solution to an education problem.
You can also use this: https://github.com/dshafik/php7-mysql-shim
&gt; It's not realistic to expect any performance improvements in a PHP JIT because it will have to either make expensive filesystem operations to cache JIT information or lose it all. PHP's runtime model of discarding the execution context after every request is fundamentally incompatible with a good JIT. That's not how PHP's JIT works at all... It stores information in RAM and doesn't lose it after every request. You need to read more about how OPCache works. JIT isn't some PHP library on Packagist, it's a feature deeply integrated into the PHP core.
Good answer. PHP 5.6 isn't a bad thing. It's just bad to continue developing for.
&gt; But what we can expect is another overall 2x increase with PHP 8 Doubtful. The reason is that the JIT cannot yet inline functions. Inlining functions is critical in real-world performance. The fact it does not support it after years of working on this JIT engine indicates to me that Dmitry (and whoever else has worked on this) don't know how to properly do it yet. I have no reason to believe that it will land in PHP 8. I would much prefer we did not include a JIT in its current or even near-future state. It drastically increases the complexity of the engine. We already have a hard time finding people who are skilled, interested, and have the time; adding a JIT will only make this worse.
So you you don’t want any JIT at all until it’s a perfect JIT? That’s not a very wise attitude. JIT is a long term project. Even mainstream JS engines aren’t done yet optimizing their JIT after years of iterating on it. But the important thing is to start iterating. 
That's not what I mean. The real benefits of a JIT are knowing things like "this string has value X and it isn't going to change (or if it is, decompiler guards are placed around the change), so we can directly inline it and elide a memory lookup and type system cycle" or "this virtual call site resolves to this code location (until it doesn't, and decompiler guards are placed around the change) so we can inline the function directly and elide the function invocation and stack frame and etc.", and all of that will get lost because the program effectively ends, so the context of its execution has to be tossed out and re-made every request. 
I enjoy how you retroactively changed what you mean instead of admitting you're wrong, it's amusing :P You said: &gt; it will have to either make expensive filesystem operations to cache JIT information or lose it all [...] an entirely new runtime model that discards just stack frames and keeps JIT information around will have to be built The fact is none of this quote correlates to what you said. The PHP runtime model already allows the core to keep information in RAM between requests, such as JIT code and stats necessary for optimization. As for your new concern, no, once again you don't need to "toss out" things like inlined functions, JIT stats and traces between requests. Having runtime state change is not unique to PHP. It happens every time you "toss out" an object instance and make a new instance with a new state. By your logic, it'd be impossible to efficiently JIT any OOP language, yet that's clearly not the case. Classes and functions stay the same between requests, and the statistics of their execution like hot spots etc. also stay relatively consistent between requests, which is to say, you don't need to throw out everything, you can reuse analysis from previous requests to predict the current request. And, of course, PHP is dynamic and you can conditionally define classes or functions or eval() them with different code every time, but that doesn't need to disrupt the common case of "fixed" code for these primitives. After all, a bit part of the art of JIT is differentiating what changes and what doesn't, and putting what doesn't on the "fast track" and special-casing the rest. This applies to a heavily dynamic language like PHP just as much as with any other language.
Improvement on math-oriented tasks was never in doubt. The problem with the JIT was always (and still is) that it gives nearly no improvement on web workloads.
That's very cool! I'd love to see them deprecate their dependency on the Illuminate\Http\Request class (concretion) and make the Psr\Http\Message\ServerRequestInterface (abstraction) the standard. I really do like laravel and think it's well architected in general. If they could just get past all the things that force vendor addiction on me I'd use a few modules from them here and there.
One needs to start somewhere.
Agree on everything except UI based CPTs. UI based means it ends up in the DB rather than code, which makes deployment messy. CPTs could definitely be improved though. Let me do it in a config file with minimal syntax. Same story with ACF. It or something similar needs to be incorporated into the core, but I need a clean way to define fields in a theme or plugin. The focus on Gutenberg and fail to deal with some of these other issue doesn't have me hopeful for WPs future.
The proposed solution basically involves a small change to one line of code, to sanitize the input, as far as I can tell.
Only it isn't - these vulns surface very occasionally. This one cannot be exploited unless you already have author privileges - i.e. you are already a trusted contributor on the site. As mentioned, WP runs 30&amp;#37;+ of the web - it it was that easy to hack, the internet would be a warzone. The vast, vast majority of WP hacks come through shitty plugins or themes, or bad host security.
Seems like a totally valid answer to me, particularly if the site was previously working and needs to be back up ASAP. Sometimes business needs need to take priority over a developer's cringing. By all means work to update/refactor the work, but don't shelve the site for the duration of the rework.
As an agency owner and sometimes dev. I like WP, my team likes it and my clients like it. I get stuff done on time and to spec, and it just works. If I start a project in HipsterCMS^(TM), I'll have to learn to build plugins, because it won't have the functionality my client needs. That typically adds a 0 to the bill. I have about 100 WP sites at any given time. They don't get hacked because I keep the sites updated and backed up and use reputable plugins. My Magento legacy sites continue to break my balls on a daily basis, and don't even get me started on the couple of Joomla and CMSmadesimple sites that refuse to die with dignity.
Hi all, up until now I have avoided Composer as I really did not understand it. However I am now trying to install php-web-push and I think its come to the point where I do need Composer because of the dependencies required. So the thing I don't understand about Composer is how it's used for separate websites in my Centos/Plesk installation. I have many sites set up on Plesk I only need to install php-web-push on one site. When I attempt to install web-push using composer I receive an error stating "your PHP version (5.4.16) does not satisfy the requirement". I am running PHP 7.1 on my main plesk domain (the one I use to access Plesk) and the one other site I wish to web-push on. I assume the install is failing as all my other sites are running 5.6 - however I am not in a place to run PHP 7 on all of these sites yet. Is there a way I can use Composer for just the one website? Is it as easy as moving the phar file to the root of that site? Any help is appreciated. Thanks
&gt; So you don’t want any JIT at all until it’s a perfect JIT? That is not an accurate summary. &gt; Even mainstream JS engines aren’t done yet optimizing their JIT after years of iterating on it. Correct, but they didn't put it into production *until users could see real benefit*. To quote Zeev: &gt; The bad news is that it doesn't significantly move the needle for typical Web workloads. The benefit is not there. We should not merge this into a release until it is, but even then it's a cost/benefit trade-off. Sara Golemon, who has worked on HHVM's JIT, says: &gt; I've also seen what a JIT does in terms of additional complexity, it's not pretty. 
Most charts can easily be done with https://www.flotcharts.org/ If you want to more --like make the charts interactive -- you will hit a small speedbump in the learning curve due to the lack of documentation. But after that you can do some amazing stuff with it. Bonus for me is its browser support. IE8-ish out-of-the-box, and with a shim you can even support browsers as old as IE7.
I understand completely... I wrote the Hashtag Framework that supports the Hashtag Markup Language on top of PHP, and there are lots of sql-like commands and comparison operators. It boils down to a single preg_match in a while loop... that's probably why there aren't many libraries around, but with npm providing libraries like "isodd" and "leftpad", I guess people would rather have external dependencies and another line of configuration rather than writing a single line of code. I really think this is ridiculous: $query = new Query(); $query-&gt;whereAnd( new WhereStatement('friends.person.age', '&lt;', '30') ); $documents = $dbalAdapter-&gt;searchByQuery($query); "whereAnd" even though there isn't anything you're adding to, so the "And" is out of place... and even though the function is implicitly named "where", and it could create its own WhereStatement objects based on parameters, you have to implicitly create those objects first and then pass them in. It could all be replaced with a simple parser in a few lines of code (something PHP excels at), and the above code could be: $documents = $dbalAdapter-&gt;searchByQuery('friends.person.age &lt; 30');
`/path/to/php7.1 composer.phar require foo/bar`
You can also run composer with the `--ignore-platform-reqs`
TIL, thanks.
Can you not just do: !($a xor $b) ? I know your code does more than that, but it seems overly complicated for what should just be one line...
Many Thanks
You should start using ReactPHP or Swoole if you need speed improvement right now, because PHP 8 will appear no longer than late 2019/2020 
What PHP 8 will do and what React/Swoole do is complementary. 
Yes, that works if you only have two inputs. What if you had more than two though? In my specific use case I had six. ``` $a = true; $b = true; $c = false; $d = true; $e = true; $f = false; xnor($a, $b, $c, $d, $e, $f); // false - correct !($a xor $b xor $c xor $d xor $e xor $f); // true - incorrect ``` In order to make it work correctly you would need to do something like this: ``` ($a === $b &amp;&amp; $a === $c &amp;&amp; $a === $d &amp;&amp; $a === $f) ``` Of course maybe my use case was a little specific, and maybe not everyone needs this sort of thing. I thought that if I needed it, someone else may also need it. Sharing is caring and all that.
Python's design for property visibility is superior for testing and design overall. ie The magic reveal syntax class._myprivateprop There's no evidence that the visibility model helps, since it's just a namespace that is tangled into the code to encode a philosophy about access that is orthogonal to functionality.
If your app was not written for PHP 7, then this is perfectly good advice. Otherwise that would be like trying to run an ASP program in PHP, and complaining when support tells you to use ASP.
Well the test is run on PHP 7.
Best blogspam for web development?
Using regex for this is an overkill
My guess is that you're probably on a MediaTemple server. Is that correct? In either case, the PHP version under your *site settings* in Plesk are very different than the *CLI version* the server actually runs. When you SSH in, you can see the version the server runs by running `php -v`. You will almost certainly see PHP 5.4.16, as evidenced by your Composer error. You can upgrade this in a few ways. The safest would be to simply alias the correct version for your system user's Bash profile. If you want a "hold my beer" approach, then you can also move the PHP binary to a new name and symlink the correct binary to the original path. **Don't do this if you don't know what you're doing**. `which php` will output the path of the current binary Then you can do something like: `mv /usr/bin/php /usr/bin/php54` (assuming your binary path is /usr/bin/php) Then you can run `ln -s /opt/plesk/php/7.2/bin/php /usr/bin/php`. Check that it's working with `php -v` again. ***I can't stress to you enough that you should not actually run these commands unless you absolutely know what you're doing***. An alias is safer, or like others have mentioned, you can use `--ignore-platform-reqs` to get around the error altogether.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Funny that everyone fails to use an OOP approach, but just plain php. :-(
I actually wonder how it affects performance of things like array to object mappers (for example Doctrines' hydrator or some custom one) - they often have simple functions which are called many times, and function call overhead takes significant amount of time in them.
Can you qualify "web workloads" a bit more? I assume you generally mean things that are very i/o heavy where PHP is mostly just waiting for a response from something else. Is there any sort of material impact when it comes to e.g. json un/serialization, string manipulation, etc - or really just on pure math?
I'm **really** confused about your issue with this. Your choices are either: * Remove the offending plugin/code * Downgrade to a version of PHP that supports the plugin/code If the code is central to your application then, you can only downgrade. That is unless its trivial to modify the code to be compatible with PHP 7.x. It's not like 5.6 is totally unsupported. It's just overall slower and has some feature differences with 7.x. 5.6 is still receiving security fixes until the end of this year. 
I always opt for tabs in the foreground and spaces in the background. Makes it easy to choose for different devs and something like [EditorConfig](https://editorconfig.org/) keeps it consistent. 
Ah the good old days. What a pain it was to debug those.
It still get security updates till the end of this year
Right, so your non developer client should go above and beyond and upgrade the legacy application himself obviously. This solution is the fastest, safest, cheapest, and ONLY way your client will be able to fix this issue himself. Hell, 5.6 is still receiving security updates and everything. What is your complaint here exactly? You think there are better options, so it’s wrong? That shows a fundamental misunderstanding about what your role is as a developer. You’re inventing problems because of your preference and ignoring the business ‘ goals while simultaneously having no fucking idea what you’re even talking about. YOU are the problem with PHP.
Can you expand here?
No. &lt;?php namespace FooBar; function myFunction() { echo "MyFunction!"; } \FooBar\myFunction(); 
I’m just glad I’m the only person who works on my projects :D
Things like json encoding/decoding do not benefit from the JIT at all, because this is already implemented in optimized C code. String and array manipulation may benefit to a minor degree. Math is the only thing that gets a *major* improvement.
&gt; I wrote the Hashtag Framework Have no idea what it is and don't think that I want to. &gt; It boils down to a single preg_match in a while loop... this is called lexer &gt; that's probably why there aren't many libraries around there are few, hoa/compiler for example. Or you could write some [parser combinators](https://inviqa.com/blog/functional-programming-php-developers-guide-parser-combinators-phunkie) (which is pretty easy to do). &gt; I really think this is ridiculous: yes, I would agree with you, but by different reasons. I agree that `andWhere` stuff (which could be find in most of query builders now days) is just wrong naming. This object represents only one condition in where clause. So it could be just called `Condition` or `Filter` or anything like that. &gt; and the above code could be: Your example also lacks compostability of query parts. I would also prefer to have separate object which describes query (and which could be composed) and separate thing that executes queries. This would make code much more reusable. But I was unable to find such thing in PHP. As for parsing conditions - again. This all depends. I really more like when whole query is described as DSL, but I don't like DSL-s that are not extendable (like DQL in doctrine, which allows only limited abilities to extend syntax), limits me in what can i do and so on. Actually the ideal query builder to me is one that: - allows declarative queries (so they could be composed together and reused) - provides introspection (which fields will be selected, what types would they have, which types should I put for query parameters) - provides a way to use introspection to normalize result set. Right now I really close to despair to find one so probably will end up with writing yet another query builder (crazy mix of knex.js and Arel) for posgresql (there are at least [good solution](https://github.com/sad-spirit/pg-builder/tree/master/src/sad_spirit/pg_builder) to start with introspection but it fails with first and third point)
Eh?
You say you're looking for a solution, I tell you I made one, you say you don't want to know about it. Aren't you cute. Again, I completely understand all of this, and all of the pros and cons to all of it. Also, a recursive decent parser is not called a lexer. In this new DocStore, hidden behind all the parameterization, there is still parsing required on the key values to explode them by the '.' character into parts.
Thanks for your reply. No not a MediaTemple server but an Azure server. I understand what you are saying. I am certainly not an expert so I will not attempt the more difficult approach. I will have a look tomorrow at the ignore-platform-reqs. Also after some more research it appears that composer may actually be built into Plesk's GUI so I will have a look at this too.
Procedural Programming is for amateurs, OOP is for professionals. In a perfect script, everything is an object. You can’t be perfect, but you can approach as close to perfection as you can. Nope, PHP does NOT need to have better support for amateurish procedural code. Its moving towards more OO and functional, and it is supposed to be. Would be better if PHP will provide ways to optimize OO and functional code, so theres will be even less incentive to use procedural programming. 
[r/programminghorror](https://reddit.com/r/programminghorror) 
Where? And why would be appreciated...
I will write it tommorow as I am going to bed right now :)
Hey, connorcz, just a quick heads-up: **tommorow** is actually spelled **tomorrow**. You can remember it by **one m, two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
- There is already _a lot_ of PHP frameworks: I'm personally not enthusiastic at all at the idea of having yet another one which is very unlikely to be ground breaking - Your framework is close source with a proprietary license: to me that's a big red flag already - Supporting PHP 5.6 is not modern and using no strict types at all neither using a phpdoc when appropriate is another red flag - Following no PSR is also a red flag: `Mail.class`? I didn't see that since PHP 5.2-3 honestly - Heavy usage of `empty()`: a good function to shoot yourself in the foot - You are implementing all the components all over again which don't even close to the existing popular ones in any regard The only thing I really found cool from your project is the documentation which is funny to go through although I'm not sure it's the most appropriate one for a project. Sorry if that comes across as harsh, I feel bad for saying it, but at least it's a honest opinion.
All my suggestions except one improves functional programming style as well (as I wrote). Or are you telling me that functional style does not need function autoloading? callable signatures? immutable types? function symbols? Interesting. Please inform me what you think should be added to PHP to improve a functional programming style. And no, OOP is not for "professionals" and procedural for "amateurs". In a multiparadigm language you can use different approaches to solve problems. 
Now split the function declaration and the function call into two different files. Does it autoload then?
8 only happens once between 1 to 10,000, it's between 7 and 9.
Also, the website looks like a child puked all over it
Disclaimer, I am pro-open-source. &gt; 1. The Best Developers Want to Share Their Ideas I see two interpretations: "Sharing is virtuous, thus developers who share are the most virtuous." Which is an ok opinion. And "The most talented developers want to share." which is silly. Where would can I find this global developer ranking? &gt; 2. It’s The Way The World Goes "Everyone is doing it" [fallacy](https://en.wikipedia.org/wiki/Argumentum_ad_populum). Item 3 is good. &gt; 4. What About Business? Is a false dilemma. Doctrine could also become irrelevant in the future. Maybe your business hired Einstein by chance. &gt; 5. Common Knowledge Makes Easy Adaptation Argues that honesty/openness improves communication/sales which I agree with. &gt; 6. Open-Sourcing as The Next Level of Code Maturation The title doesn't match the arguments "adopting mature standards is good" and "We believe that by open-sourcing, the standards on the code increases substantially." 
Thanks everyone for the great recommendations. Super helpful. 
https://octobercms.com/themes/free?sort=popularity
There's also Themosis, Corcel, and/or the Wordpress API
I was talking about the parameter ordering, not renaming every single function. I doubt anyone really cares about renaming `bzopen` to `bz_open`, just the common functions we all use.
The only thing Drupal (v8) has going for it is its ability to define post types and query them (as Views) with the UI. This allows for proper separation between data and theme. Beyond that bit of nice functionality, Drupal isn't worth using, so WP could "borrow" that from them and stamp them out for good. WP, for better or worse, has always combined data and theme: the theme defines the data, how it's queried, and how it looks. Change the theme and all your data that isn't attached to the default post/page types is gone. I've always found that to be strange -- even though I'm only ever building purpose-built custom themes that aren't meant to be swapped out. The CMS war is one WP could win if they wanted to. But to do so they must let go of the notion that everything has to be backwards compatible all the way to the very beginning.
You can use composer file autoloader. It may not be what your looking for but you can see more here: https://getcomposer.org/doc/04-schema.md#files 
You could always use non CMS-dependent themes from places like [HTML5UP](https://html5up.net/) and adjust them to your needs.
 wordpress is always best. Main no problem you face at backend with WordPress?
WordPress is not “always best”. It all depends on what you are trying to do with your website / application. 
October is great, but if you're doing a lot of blogging you want something that does that a little better. The templating system is an absolute joy to use.
With Bolt CMS it's legitimately easy to buy a regular HTML theme and turn it into a Bolt theme. Not as easy as a WP theme install but it's pretty easy.
Paid for an end-of-lease clean on a rental place. The cleaners didn't do it right and the real estate wanted it fixed. They had a return policy but refused to return e-mail or accept responsibility on the phone. Turns out the company relies on e-mail to communicate with customers and had just blocked me.. hmm.. ok I wrote a small script that randomly generated a "name" and appended it to a randomly selected provider like "gmail.com" or "hotmail.com". It generated a random subject line along the lines of "I'm sorry to ask but I need my money refunded" but in leetspeak so they couldn't block it on that. I attached a PDF of their communications to that point also under a randomly generated filename. The script just looped and sent the random message dozens of times a second to their primary e-mail address. Took 10 minutes and some 2500+ e-mails to get a call to my mobile confirming my refund. Winner.
Inspired, next LEX LUTHOR 
I literally just learned about it, but I'm also very much a rookie with php. does that make me unemployable? 
That's not weird, that's clever. 
Source - http://textuploader.com/dz4wm This is the copy before the l33tsp34k conversion
Did that to a phisher that was trying to get me to put in all my personal info. Was great, script posting values to their web page every few seconds. I hope i filled their email/database, left it running for a week 
Use ignore_user_abort(), just start the loop and happily close the browser 🙂
I wrote a sudoku puzzle solving algorithm using logical puzzle solving techniques (no brute force). I don’t know why I did it, but I’ve never found any joy in sudoku. Kakuro however I enjoy a lot :)
That is a good point. Hopefully no one has Author members that they distrust *that* much.
I'd made a lot of weird things trying to "random" and then "random influence" stuff to go to music, one example (that involved more than PHP), used GIS, back when it was less restrictive, to find an image of the artist playing, and then JS to "dance" the image along x, y coords *(also did other things related to resizing the image, etc.;). Before that, but thinking in a similar context, I'd decided to just generate a bunch of random "dots" on various x, y and with random colors. The absolutely most frivolous code you could ever imagine! I still have a good chunk of it though. Why? Because I had to submit a bug report. Either my terrible coding at the time, or a bug, existed in mt_rand and rand that was causing the "seed" or whatever to get stuck after a certain amount of random generations - around 50 according to the bug report I submitted to PHP.net (which was rejected after I didn't provide enough feedback, even though I clearly posted an example of the code used to generate the bug and had been on IRC with it for some time on freenode). I'm unsure if it is fixed now, but according to Past Me, it took around 50 "generations" for the rand function to stop behaving correctly and get "stuck". This is a great post, by the way, and I could add in a wealth of other absolutely stunning things I misused PHP for over the years. 
Great 
I try a lot of things like this, doing this is fun
Remainds me of this http://www.iflscience.com/technology/programmer-uses-his-tech-skills-to-get-hilarious-revenge-on-phone-scammers/
If interested and for proof, here is my ancient bug report from 2006: https://bugs.php.net/bug.php?id=37409
This is the best weird revenge http://www.iflscience.com/technology/programmer-uses-his-tech-skills-to-get-hilarious-revenge-on-phone-scammers/
Looks really good. :)
ten years ago I wrote a script that figured out how many lengths of steel of which lengths (available in different lenghts) to buy for a building blueprint to minimise the cost of making cuts and cost of delivery trucks. It was weird because it worked despite being rather a spaghetti goalseek style mess, did a week's engineer's work in 30 seconds. The guy never paid for it and when I stopped the demo version weeks later, he lost his shit at me because he had been secretly using it the whole time. 
There's certainly a diminishing return in adding developers. I feel in general, one developer can do in a year what five equally skilled developers can do in six months. 
So... the price just tripled.
on 3v4l without the image part; https://3v4l.org/2CBnj
Yeah, I love its extensibility!
Haha your reproduce code did not start &amp; end with &lt;?php (...) ?&gt; so the Automoderator sorted it out from the beginning. Shame, the bug looks interesting, have to check it out some time if it still persists...
EXP: https://blog.vulnspy.com/2018/06/27/Wordpress-4-9-6-Arbitrary-File-Delection-Vulnerbility-Exploit/
Yeah, it's often useful as a quick reminder of the details of something you already know about, but it can be risky to use when learning completely from scratch.
It's a next level of dickishness where someone saves you weeks of labor and you don't pay them for their work. What happened in the end, did he pay for it or is he back to doing it by hand? 
He didn't pay me, called me stupid etc on a voicemail. They guy who put him in touch with me paid me some of it. Project sat on the shelf ever since. I could probably tidy it up and farm it out as a wp plugin or something.
good way to get your server/service provider blacklisted
&gt; I don’t know why I did it - I’ve never found any joy in sudoku. Isn't automating the things you don't like doing the very essence of programming ? 
i am using xampp to host my php project. some how i cannot open one of my project with from localhost (others are fine). i have to type php -s [127.0.0.1:8000](https://127.0.0.1:8000) then use that link to open it during development. This become a problem when i upload to server and when opening the url, i get the issue of 404. i am totally clueless why this happen \*\*still not familiar with reddit ...hmm i canot post my text...???
https://i.imgur.com/DK1ckG8.png
I was building a reverse marketplace and had to allow sellers to upload images, PDFs, all text document types, and I think spreadsheets as well. After upload I would have to string all these together in order of upload, rotate images as necessary, attach a dynamic "cover page" using the seller's profile info and some other info. Then convert the entire thing to PDF. It may sound normal to some people but it was strange to me. It also was, in my opinion, the turning point for my career. This project pushed me past all the self doubt and uncertainty.
Ten years ago, I know of two engineering firms that would of paid handsomely for such a thing.
I was right into motorbikes at the time, so I did a facebook style quiz (this is before facebook actually). You would answer five silly questions and you would be presented with what bike you should ride. I had a couple of bike forums using it for a little while, they seemed to like it.
What composer does is to load all declared files on every request. That is not what constitute autoloading. And btw I can do that manually with a simple require on the beginning of the request. To conclude, PHP does *not* support autoloading functions in namespace, as I wrote.
Yes I accept for big application wordpress is not a right choice. most of the developer prefer frameworks like laravel and yii. But for website and small and medium range application WordPress is a time and money saving. wordpress have a very big community with good support. It have thousands of themes and plugin to choose. From last more than 10 years I am working on WordPress. I think due to that I am incline toward wordpress
Exactly my thoughts. I would also mention the lack of DI which makes it really hard to reuse just certain components as modern frameworks allow us.
That’s fucking awesome 
Part of my ex gf's job was to sell Keno. They had "You get something right with this coupon." -game on sale. So I created random generator which fill Keno ticket so that every number occurs once and only once. So they could sell unique coupon which has every number. Most places sold similar ticket but with only one certain number combinations, so they had advantage since every coupon were different.
I am currently making a library in PHP to control an android phone. I think I win
Quake game browser using sockets, so you could check who's playing and what's the map, score, etc.
The internet IS a warzone...
A pastebin app in 113 characters (HTML included).
I once found a website with literally MILLIONS of customer data and you could get a demo entry for that. I was like "Wow, I could use this data for locale fixture dummy data testing" and then I was curious how to get that data.. So I wrote a script.. damn that script was so might somehow.. I got EVERYTHING.. there were millions of data and it tooks soo long, but after a lot of Gigabytes, I finally succeed and I was like "Damn, I think THIS is enough testing data..". Well, I was young and green behind the ears. A few days later we got a BIG letter from their attorney with like several analyses that they SOMEHOW got MANY, VERY FAST connections to their website with every connection beeing like `?page=1`, `?page=2`... and that this looks like beeing "Not a human behaviour". HMMmmmmmmmmmmmmmmmmmmmmm seems like doing this was highly ILLEGAL :D We immediately deleted EVERYTHING ^^^^^^ornot? called our attorney too and denied everything. Conclusion: Don't steal data from people that stole your data by adding a line in the ToS. 
I do like commented code :)
&gt;i.e. you are already a trusted contributor on the site This gives someone with restricted privileges on one part of a multi-site installation arbitrary control over files across every other site. WordPress is used in such a ridiculously large number of ways (including as part of an intranet, where many employees will have the author privilege, but again shouldn't have arbitrary file access) that a vulnerability like this is still absolutely critical.
If it's nothing to rush for, then I would suggest you to continue and don't stop improving and researching how to make your current code even better. You will eventuelly come to the point where you will face palm your self, because you did something wrong/not optimal and you will need to fix/optimize that. This situations are the moments where you learn something.. you learn from your mistakes and improve by getting WHY some patterns are good to use. Like I honestly needed quite a time to understand the advantages of dependency injection containers. I couldn't see any sense in putting an dependency into the constructor instead of just creating it in the class itself. UNTIL I came to a moment where I got one of this "Big Bang theory into" moments where million of scenarios played within my imaginary sighs and "mind blowing" understandment followed this. Later on you can do the same with the help of a framework of your favor like Laravel or, what I would suggest, Symfony. I had no good experience with any other framework, so I would suggest to choose one of those two. Googling is your Infinity Stone in the development scene. Use it wise and you have limitless might!
Don't ever use this on a publicly accessible server.
A local radio station was having a contest where, for an entire month, if songs by a certain two artists/bands played back-to-back, you had to text in to the station's number with your name to in order to get a chance to win a pair of concert tickets. So I figured out where their web audio player was getting its "now playing" data, and wrote a PHP script to check it every minute or so and keep a record of what was playing. Once the two artists played, it would text me (using a VoIP API) to alert me to submit my contest entry. I didn't actually win, unfortunately, but it was a fun project.
When I moved a few years ago the FTTC cabinet was full. So I wrote a script that polled the telecom providers “can you get fibre!” Website every minute to catch when someone ceased their line due to moving. It was set up to automatically text me a link to the order page via Amazon SNS. I was up and running on faster internet in 4 days.
&gt;Except... that's the correct advice to give if the codebase they're running is targeted at PHP 5.6 It looks like I'm on my own with this one then by the comments, I guess we have different standards of code quality. The thing is that function was deprecated in PHP 5.5.0 over 5 years ago so it's not even target at PHP 5.6 as you claim and was completely removed from PHP 7.0 (3 years ago).
I know this is a couple of days old, but [here's a super-basic intro](https://en.wikibooks.org/wiki/PHP_Programming/Templates).
I made some stupid deals back then without lawyers or signatures. 
&gt; Right, so your non developer client should go above and beyond and upgrade the legacy application himself obviously. I guess we just have different standards of code quality, I wouldn't be running code that was depreciated over 5 years ago. &gt; Hell, 5.6 is still receiving security updates and everything. What is your complaint here exactly? The thing is that function was deprecated in PHP 5.5.0 over 5 years ago so it's not even target at PHP 5.6 as you claim and was completely removed from PHP 7.0 (3 years ago). If there is any security issues in such functions they won't be receiving updates past 5.5
&gt;It's not like 5.6 is totally unsupported It was deprecated in 5.5 so won't be receiving any possible security updates as you suggested.
It was great idea though
We wanted to get married on a pretty popular date. You could only book a year in advance and they relied on e-mail, whoever sent the first email, got first pick for a time slot. When I was informed of this, they did mention that I could send multiple emails, they would choose the one closest to midnight. So I wrote a script that sent emails at 23:59:55, 23:59:58, 00:00:00, 00:00:02 and 00:00:05. We got our preferred time slot. I later repurposed the script to enter in raffles for giveaways that relied on email.
A complete point of sale system including cash drawer functionality and receipt printing.
Code quality has nothing to do with the original image, which is a guide on how to configure servers for running a given application, if that application is targeted at an earlier version of PHP. There's no suggestion that the person using it would even know how to read PHP code, let alone write it or port a complex application like wordpress / extensions to 7.x+ Also, depreciated functions do get security updates. In PHP, a function is marked as depreciated if it is likely to be removed in the next major version. 
I once wrote Hello World I know I know, I'm a freak creating weird code. 
a concert ticket registration system in wordpress, with dynamic seating charts, reserved, general admission or mixed, mutiple seating prices. Never again will I do web application development in WP. 
I had worse - a file uploader so I could move stuff from home to uni and back again (my VPS at the time had more storage than any USB stick I could afford!)
some one its radio station would have helped his friend getting tickets.
i like this idea :thumbsup
&gt;how will you achieve that ? could u explain just curious
How did you figure out what web audio player they were using? 
Wrote HTTP Server...
What is this `| 0` ? Is it an `(int)` alternative? [https://github.com/frankdejonge/http-status-in-range/blob/master/src/functions.php#L12](https://github.com/frankdejonge/http-status-in-range/blob/master/src/functions.php#L12)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [frankdejonge/http-status-in-range/.../**functions.php#L12** (master → 43fa85b)](https://github.com/frankdejonge/http-status-in-range/blob/43fa85b0590753f5f9e9ae57e451fbad865e648b/src/functions.php#L12) ---- 
I don't really see the point, example code with this package is longer than checking status code without it.
I still remember the funniest approach to this I found in the wild: if (floor($info['http_code'] / 100) &gt;= 4)
Worked at a company that was also a SIP provider. After reading about “cat facts” on reddit, my co-worker and I created an actual Cat Fax service that could be sent to SMS and fax machines, as well as receive and parse responses and respond back. One thing it would not do: it would not stop - 1 fact about cats every hour for 48 hours straight, coming from a different area code and number every time.
So where you running a scraper? I don't think scraping is strictly illegal unless you gained unauthorised access. Worst they can do is block your I.P. Could be wrong though.
Dev in Wordpress is painful. It's fine for a blog or a small site but full scale web app, no thanks. Better off using a framework like Larval or something.
Not sure if OP did this but for most UK radios that have an online player you can see the ajax feed, often times it is pre-determined and just downloads the file for the day. For app-based stuff you could use wireshark.
Not sure if I've done anything weird but done a few things randomly that PHP might not be first choice. I made a small auto-backup script for my computer (just copied files from a directory to a external usb). I later ended up doing this in C#. I've wrote a bitcoin watcher a few times. Recently i've been trying to think of a ways to automate things, the idea I have at the moment is to take something popular on reddit/twitter, create a summary and make a video of it (IGN do this but it's not automated from what i can tell)
Doing automation? I am one of your kind, more focused on automating things, its cool.
how is this shorter than `if ($info['http_code'] &gt;= 400)` ???
funniest ≠ shortest It was meant as a joke, not a recommended practice ;)
I know, I was just wondering what "original creator" had in mind writing this
I wrote a randomiser to decide whether we were having KFC, McDonalds or Wings or a budget micro meal for lunch in work.
Oh I hacked our door system too but that was in C#. Got fed up of people forgetting their pass and having to get up to answer the door so I wrote a desktop program which was a button that logged into the webpage and clicked the ‘open door’ button. 
A little php HTML game where all game state is passed by GET in a base64 encoded string. This was done for a contest with very particular technical limitations.
Why /r/php doesn't fir for your shit. Reported. 
A script that scrapped the IRC channel for the SaltyBet twitch stream (where weird AI characters from a fighting game fight each other and viewers bet fake money) and sorted them with ELO to figure out which character was going to win the next match.
Back in the days I asked people from a forum to vote for something I wanted to happen in my hometown... promised them tits for each vote. They went crazy and voted like hundred of thousand times... so I had to deliver... and wrote a script which filtered flickr for tits and automatically posted them to this thread... browsers crashed Because of the amount of images and what not 😂
http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/
Facebook for dead people... The owner of a private cemetery asked exactly for this I want my site to be like Facebook for dead people with profiles pictures and comments Escort agency website, high profile agency for callgirls wanted a professional website, I professionally looked at naked ladies for a living for a while
It's a "imma-cool-brogrammer"-way to write `(int)`. As bit shifting only act on ints, using `| 0` simply forces your number to ints through implicit casting. `| 0` is `OR` with all bits set to `0` (so each bit in the left number makes a comparison to each bit in the right number, every bit will make the comparison `x || 0`, which will always yield `x` (or `0` in the case that it's `0`, so basically, still `x`). It simply returns the same number, but casts it to an int implicity. It has the same functionality as `(int)`, but it's not readable for many people that don't understand bitmasks or how they work when used with floats. It also has no performance advantage whatsoever. In JavaScript this can speed up mathematical operations a bit through the way JavaScript converts the value internally when bitshifting, which is only useful in e.g. 3D-engines or heavy calculations. Please always use `(int)`, maybe in conjunction with `ceil()`, `floor()` or `round()` (default behavior is always `floor()` when casting, it is just cutting off the float-portion)
You already hit on the right issue. What you need here is not variance, you need generics. A`FooCommandHandler` is not a `CommandHander` -- if something accepts a `CommandHandler` you couldn't replace it by a `FooCommandHandler`, because it can only handle `FooCommand`s, not general `Command`s. What you actually want is a `CommandHandler&lt;T : Command&gt;` and a `FooCommandHandler implements CommandHandler&lt;FooCommand&gt;`. But well, no way to do this right now ;)
Thanks!
I think his version (`(($statusCode / 100) | 0) !== 4` and `(($statusCode / 100) | 0) === 4`) is even funnier... Also notice I essentially posted the whole contents of his lib with these (replace `4` with `$range` and add 5 constants)
I agree that more functional programming will be cool, but more procedural??? please no.
Pong in your terminal, powered by PHP, and unresponsive to user input! https://github.com/nebez/phong _(Submitted PRs to make it PHP7, and faster, not the original author)_
After an alcohol infused night with my girlfriend I was supposed to go to sleep but started on a DNS server. 
NPM nano-package mentality. Not even once.
But CLI? :(
Facebook for dead people? Most weird.does the owner think dead people going to visit their profiles? Whats the point to create the site? Enlighten me
You are wrong. WordPress is unsafe, it's code base is prone to errors, it's hard to extend with modern libraries and software, every update is a potential destruction of your whole website as every plugin does things across the whole application and no one, not even the application itself, knows what, why and how. Plugins are untested, some open your application to new security errors (as WordPress gives you enough space and requirement to create bullshit logic), some don't work at all, some destroy parts of your site, sometimes because of other plugins, there are tons of side-effects. Everything can hook everything and in the end no one knows what is creating that single problem occuring, since everything could be the potential faulty code. Everything is one table. You have a page builder that requires to save deep structures of information about how your website looks and works? Fine, let's throw it into this JSON blob attached to a custom field on a post. What, the update changed that structure? Well, say good bye to all your information about how your website looks and works! The only people that say WordPress is good (or even go as far and say it's "best", what the actual fuck man, we don't do that here) are either people that don't really know PHP or actual web-programming in general or WordPress devs (which are already covered by the first category, too) If you use WordPress for your customer because it's quick and easy, you're weighing money and time over the safety and maintainability of your customers I say shame on you. I'm aware many companies do this, but that doesn't make it any better. Let's hope at some point you're liable for it and fall on your nose when your customer gets all data stolen, the website hacked or their image damaged. Things such as BoltCMS might not be the holy grail of CMS, but it is well written, uses modern, defined PHP standards, including naming conventions coming from PSR-2, where every half-way modern PHP developer can directly step into. It's based on Symfony, which is the most stable, most used and best rated enterprise framework. It has tests. Plugins have tests. It has an actual plugin system that is understood and reasonable already on IDE level. It's scalable and can be extended with everything Symfony itself can. It's time to switch and drain the popularity of WordPress that damaged the reputation of millions of web developers and the security of millions of customers world wide.
Hey, TorbenKoehn, just a quick heads-up: **occuring** is actually spelled **occurring**. You can remember it by **two cs, two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
An automated remote backup and SSH keychain system for all our servers. Would have been a million times easier with a PHP front end and the actual logic in another language, but it’s actually rock solid. 
i wrote a script that goes into the \`src/\` directory in my projects, get all classes, and creates \`{Class}Test\` class and replacing \`Project\\Class\` namespace with \`Project\\Test\\Class\` also having all the methods of the class prefixed with \`test\`, afterward it saves all the classes in the \`test/\` directory, so i can just implement the methods later. 
A friend of mine made websites for people by configuring a cms for them, no actual coding involved. But the client needed something custom, a dildo customizer. It ended up being some random scripts together, with the cms included. The client hated it, I hated myself for it. But I earned some money tough. 
That was hilarious 
why using an own package or functions if you use an HttpClient as dependency? For example: symfony/http-foundation [https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php#L1086](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php#L1086) /** * Is response informative? * * @final */ public function isInformational(): bool { return $this-&gt;statusCode &gt;= 100 &amp;&amp; $this-&gt;statusCode &lt; 200; } /** * Is response successful? * * @final */ public function isSuccessful(): bool { return $this-&gt;statusCode &gt;= 200 &amp;&amp; $this-&gt;statusCode &lt; 300; } /** * Is the response a redirect? * * @final */ public function isRedirection(): bool { return $this-&gt;statusCode &gt;= 300 &amp;&amp; $this-&gt;statusCode &lt; 400; } /** * Is there a client error? * * @final */ public function isClientError(): bool { return $this-&gt;statusCode &gt;= 400 &amp;&amp; $this-&gt;statusCode &lt; 500; }
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [symfony/symfony/.../**Response.php#L1086** (master → 83232f8)](https://github.com/symfony/symfony/blob/83232f85ff2d38dd4db6d84f4f964fa2254ab615/src/Symfony/Component/HttpFoundation/Response.php#L1086) ---- 
&gt; This service will never sell or give any of your data. Unless you are running your own country and are somehow not bound to international law I am pretty sure that statement is a lie.
Start marketing campaign with grand prize Attract a bunch of new customers Give prize to your friend Isn't that how everyone does it?
You had a VPS but couldn't afford a USB stick?
Share code pls
There are actually various "in memoriam" sites where people pay their respects and shit. 
I didn't realize this about generics. I've been hoping/wishing for them ever since I saw someone explain them used for Collections, but I didn't see (or understand) a point in them beyond that (all I know is PHP, I've never programmed in a language that has them). What you're saying makes a lot of sense to me now. I hope we'll get them one day. Maybe php 8.1? ;) Thank you for the very clear answer. And thank you for what you're doing for PHP!
A PHP script which maps EDIFACT standard files. that was weird. 
This is awesome. I’d almost try to do this for any type of contest (that’s somewhat similar) anyway. 
Wtf.. it’s not JavaScript where libraries are 3 lines long.
Your words are very true. 👍 I am inclined toward WordPress due to my profession. I work with wordpress, laravel, node JS. most of the client have project regarding WordPress. I search online about comparison of WordPress and bolt. I feel bolt is one of best cms and it could be possible in future it will be most popular CMS. I have some query. I hear that many big corporation website is developed in WordPress. some of names are in given link. http://www.wpbeginner.com/showcase/40-most-notable-big-name-brands-that-are-using-wordpress/ Why are they use this if wordpress is so bad? 
Why not just use FTP?
I wrote a TFTP implementation in pure PHP, so that I could deliver file output generated by other php scripts based on what filename was asked for and various database conditions at the time.
\***What's** **the weirdest** program you have written with PHP? \*Mine: I wrote a script which automatically **wished a friend happy birthday** **at** midnight **on** **Facebook** using **the** Graph API, and also it runs **every hour** and **puts** some random reactions on their posts and **makes** them think **I** have been active **on** **Facebook.** Fifteen grammar errors.
My dad used to have a dos program that would take the measurments of a structure you wanted to build and told you gow much lumber you would need to construct it.
Yeah exactly, his description was passionate tho, he wanted connections and stuff... I don't see the point in any of those
4 out of 5 of my suggestions improves both functional and procedural programming. Procedural programming is a way of achieving a solution, just as OOP is. Lots of good software is written in a procedural style, probably the majority of software that was required for you to post that reply to me. Golang has showed that procedural programming can achieve very good results without going down the OOP path or the functional path. PHP i a multiparadigm language, it should offer tools to write software in multiple ways and leave those decisions up to the programmer. By doing so new programming patterns can evolve.
I am actually working on something similar that publishes to Twitter immediately and then LinkedIn and Medium on a schedule for newly published “posts” in my app.
Start with some easy tutorials. Check which of them has a good theory/practice ratio like [bitdegree](https://www.bitdegree.org/course/php-course) 
5.6 was deprecated in 5.5? What? Go to the [Supported Versions](http://php.net/supported-versions.php) page and you'll see 5.6 has security support until the end of this year, as I suggested.
We all did. We’d all be rich now if it wasn’t for youthful ignorance.
People have been to prison for that https://en.m.wikipedia.org/wiki/Weev
**Weev** Andrew Alan Escher Auernheimer ( OR-ən-hy-mər; born (1985-09-01)September 1, 1985), best known by his pseudonym weev, is an American hacker, Internet troll and a neo-Nazi alt-right activist. He has identified himself using a variety of aliases to the media, although most sources correctly provide his first name as Andrew. It is alleged Auernheimer is of Jewish descent, which was reinforced by a public statement his mother made in January 2018. He is a member of an antisemitic network of computer hackers that wages cyber-attacks against universities. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Wrote a bot that takes Trump tweets and turns them into old-timey library catalog cards and adds one of his banalities in his handwriting. It has been a little messed up since twitter increased its character limit though. Maybe I’ll get around to fixing it at some point. https://twitter.com/libtrumpcard
I got your script idea, it automatically corrects grammar mistakes in reddit post and post it in comments right?😂😂😂 
Haha, great hack
For the same reason you use it (and I did, for quite some time), my friend: Time and money. And especially big companies never have any of these two, obviously (That was sarcasm, they have more than enough of it) The typical CEO, CTO and project manager simply doesn't know better. They're in their positions for their management skills, not for their knowledge about how PHP evolves and if an application is secure or not or well structured and maintainable or not. If there's not at least one of the better programmers actually standing up and explaining why it's a bad choice, you'll simply end up with it. "What's the most used one?", obviously this is WordPress. It was the first big one. It has millions of sites running. It has a whole ecosystem of companies that specialize on writing shitty plugins or themes for it. And at some point it consisted of valid, well-structured PHP for that time (except for the plugin system, that was always a mess). Then PHP evolved. And WordPress didn't. And I wish every single one of them to be hacked into oblivion so that at one point they may realize that it's not worth it to save money and time on the wrong ends. Your own security and the security of your customers stands above everything. You can make millions on your customers with your products, but should there be compromised data at some point, your customers will leave, your image will be damaged and in the best case you get sued multiple times and have to compensate, mostly with money. It can ruin your whole company, regardless of size (the bigger, the more it hurts, actually). As it is and was with all products like WordPress, they're not there forever. Other products will come and replace it. Just give it some time.
...can I have that Facebook script?
Asking for free?
I don't think I'd be willing to pay for it. I've just always wanted to write a bunch of minor, personally-entertaining Facebook scripts but could never quite wrap my head around the (constantly fluctuating) API.
I claimed it wasn’t deprecated? I said 5.6 receives security updates, which it does. I didn’t say that this function (which receives no user provided arguments) does. But you’re right. No reason to keep your production apps running. Purism is the only ism. Death to the 5.6 brother!
Script was stopped for abusing their resources hahaha XD, but it does seem to work properly now.
I am not selling it, I need a another cool automation script in exchange for that.
It's just a little remote execution vulnerability, nothing to worry about.
Written in PHP? Why ;)?
Could you share some details on this? Is it publically available?
You remember that kid who made a clock and took it to school, and then got accused of making a bomb? I wrote a site that rotated through some pictures of various clocks and bombs, and you could vote on which one you thought it was. Mostly it was an excuse to mess around with Slim, SQLite, some templating engine (Twig I think), and Vagrant.
 very true. one thing I want to told you that your observation and perception is perfect. your knowledge is very in depth. In real so many months I am thinking about that but it is hard for me to accept because I invested my many years on WordPress. so many years I do not get proper MVC and OOP implementation in WordPress I am new on reddit. I find redditors are very different than other social networks. in future I will never talk about the things which I do not know. Specially in comparison. 🙂 I will try to help people who have a queries regarding WordPress with my small brain 😉
 &lt;?php /*I am not OP, but here you go*/$g='Hello World!';for($i=0;$i&lt;strlen($g);$i++){echo $g[$i];} ?&gt;
I'm looking for papers, basically
&gt; le PHP face
You might find the RFCs useful [https://wiki.php.net/rfc](https://wiki.php.net/rfc)
You should never stop talking about things you don't know about, since usually, there'll be someone that comes and corrects you (people like correcting other people, they can show off their skills). What is important is that you accept and embrace criticism and use it to improve yourself. That's the important skill many people lack when receiving critique. Your comments show me that that is exactly what you're doing already, so you should be fine. If you have specific questions regarding PHP or software architecture at some point and you feel like you don't find the right answers, feel free to PM me and I'll give it a try.
[Static Optimization in PHP 7](https://nikic.github.io/pdf/cc17_static_optimization.pdf)
Very cool! that's kinda what I was looking for!
First of all the type hints are vague. What does "array" mean? Array of what? Also, what does "string" mean? It depends on how you process it (can be a raw byte array, ASCII, UTF-8, UTF-16, something obscure, ...). What does callable mean? What signature does that callable have? I've never implemented a JIT engine but I can imagine PHP's type hints provide very little actionable information when implementing one. Additionally, whenever a piece of otherwise fully type hinted code calls out to properties on objects or calls methods in a library that is not itself type hinted it cannot be sure of the type it will get back. Many of the built-ins return union types (e.g. strpos returns a boolean or an int, and at compile time you cannot guess which one). While there are strategies in a JIT for coping with such things, they add complexity and the potential for slowness. So that's why I say there is no straightforward answer whether type hints will make code faster. They probably will never make it slower though.
Sure thank you 👍
Automation is where I'm focused at too
Where should this paste in the Dreamweavers?
Yup
[removed]
[removed]
Unless I missed something all those features are in a typical PHP framework
If i could just interject for a moment....
So Laravel does what every modern framework does? There's nothing in here that I wouldn't 100% expect at a *minimum* from a modern web framework.
Ooohhhh, is that open source? I want it! 
Silly me, I was expecting something solid about how a framework made developers remember to use all of those security features. Turns out that they're just as optional as the next framework. FWIW, I'd still prefer Symfony.
Raytracer. Yes, in PHP.
Absolute madman
Oh, I upload this on every publicly accessible server. It's great because once I put it up, I can pastebin some code and have a blog, pastebin some code and have a cms, have a cryptocoin miner, have an API server... Clients love it, it's just so flexible.
Lucky they didn't come after you via the CANSPAM act, you could be sued thousands of dollars per email.
Yeah, it was an HTML5 player. It was pretty easy using Chrome ‘s developer tools to watch the XHR feed and figure out how the current track metadata was being passed to it.
In testing out the `GOTO` command in PHP, I realized a stupid use case could be to create a simple game using a combination of AJAX and perpetually running PHP script. So I made a classic Skier game, where you need to keep the skier between the poles. The PHP works, though I had issues getting the AJAX part to work and shelfed it as I had real work to do. Basically, the plan was to use an AJAX call to update either a database entry or a flatfile, then have the game script constantly polling for changes.
fPDF for the win?
Nope - it only applies to messages sent by companies.
I was trying to create a Sudoku generator years back, it broke my brain and I gave up. It seems like it should be easy, but I kept running in to issues.
Nope - even setting aside whether an individual emailing to advocate a personal, non-business interest in a matter could be covered, "transactional or relationship" messages are not covered by the act, and these messages all regarding a specific transaction.
Lots and lots of system("adb ...") calls since he didnt give more context. 
I once (recently even) created a quick program for my friend to create a Youtube thumbnail inside a div tag, and then render that div tag into an HTML5 canvas which then could be saved as .png. It also generated titles, descriptions and tags based on the data. Uploading a video was basically copy/paste a few things and upload the thumbnail.
I actually set up an uploader so that I can transfer files between computers on the same network because I've have real issues getting Windows local networking to work. It's a drag and drop, I just have it as a favorite in my browser ready for use whenever I don't want to sneakernet.
Also, your form uses a GET request so security is actually enforced by the browser itself: if you use Internet Explorer (as you should), GET requests are limited to 2048 bytes long, so your form gets protected for free against evilishly long scripts!
I think I used dompdf
Not the weirdest one, but still funny. I once coded a bot which was connecting to my account on a dating website and then walking through profiles that matched some criterias. The idea was to avoid me to ask to chat to people and boost my account by getting more answers and matches. In fact, when somebody watched a profile the user was notified. So, there's a ratio of notified people whom go to watch my profile in return. And there's a ratio of it whom add me directly. Useless to say that I was quickly overbooked by talking to too much people. That was clearly a shot in the leg...
There are two main issues with your code: 1. It is catastrophically insecure. It can be used as a training manual on any and every vulnerability possible. SQL injections, file injections, XSS injections. 1. It is irrecoverably outdated. Nobody is writing like that for a decade already. The detailed review would be too long and boring. Make https://www.phptherightway.com/ your home page for the next couple weeks and try to follow at least basic recommendations. Then we could take a look and tell you what else you need to fix. 
Haha, once in 1992, I was blamed for breaking a cash register at a gasless ExpressMart for pulling on the receipt as it printed. So I created a cash register system complete with an X-out and Z-out function on my Commodore 64 and brought it in to the store. I didn't have a way to print, though. No one used it but me, so I took it back. I was fired shortly after for BS reasons, mostly because I was "responsible" for breaking the cash register and that I refused to cover a shift for a sick worker even though I worked on Christmas. Turns out, they were closing the store and unintentionally or intentionally did me a favor by firing me. It was whacked there too, it was not only an ExpressMart, but a cheap hotel, so I had to check in/out guests while being the only person working the neighboring store, and in lulls pack orders for the "homemade Italian" cookie platters they sold which were generic frozen cookies. And once the owner learned I knew about computers, he also tasked me with fixing his DOS machine. All for minimum wage!
Thank You So Much..
Lightwave PHP.
I speak about the service itself. Not about google tagmanager and whatnot. Of course if you publish on twitter I have no control on it.
The best place to ask is probably PHP internals mailing list.
He stated clearly that he was spoofing the sender address. He also sent a mass of emails at once which could be seen as an attack. &gt; 18 U.S.C. § 1037 (3) materially falsifies header information in multiple commercial electronic mail messages and intentionally initiates the transmission of such messages &gt; 47 U.S.C. § 223(a)(1)(E) repeatedly initiates communication with a telecommunication device solely to harass person who receives communication Yeah, the CANSPAM applies specifically to commercial email, not sure if it would qualify in this instance. Even if not CANSPAM, there are a collection of Cyber Crime laws. The company receiving the thousands of emails can claim loss as well, as they could have suffered server downtime if the volume of emails was too much or lost time for eliminating all of the emails. Unless you are a lawyer, don't be so sure that you can't get sued for doing something like this.
If you want to follow PSR-2 I think this falls under the following. ```There MUST NOT be more than one property declared per statement.``` I also think this way of declaring variables starts look kind of messy and inconsistent when you start adding PHPDocs to them. Even when flipping over their visibility seems like more work since you have to remove them from one list and add it to the other, instead of changing one word.
nuh, its a 1 file script , messy code, too lazy to clean it and put it on github.
You are strange
I work at a Christian ministry, and we have lots of mp3 teachings available. I found a website that would allow me to text to speech an audio file, and turn it into an srt. I then made a page where you could listen to the file and read along as well, except the text wasn't perfect so I had to build an area where people could read along but also pause and correct it if it was wrong. It was quite an achievement. 
Thanks?
It’s not unfortunately, it’s an internal project that I’m not in a position to release. But I can share a bit about how it works. It uses Laravel queue workers and the Symfony Process class (which I think is just a nice wrapper around `exec()` if you dig down far enough). It has a little web UI that lets you configure a few different things as crons: - Database backups (depending on what the target is it will either do a remote mysqldump or SSH in and execute the dump on the host). It then gzips and uploads to S3 with the AWS CLI tools. - File backups via AWS CLI. Kinda pointless with all of our code being in source control, but a few sites we host store user uploads locally rather than on S3 so it’s useful there. - Check for untracked scripts: we inherited a lot of shitty WordPress sites that were getting pwned quite regularly, so this just runs `git status` then pipes the output through grep for any suspicious looking files that have appeared They keychain is my favourite part. You add a public key, sign it (which requires root access to the server), then it SSHs into the target using the system key and adds all the signed keys to authorized_keys, removing any unsigned or removed keys. Keys periodically expire and require re-signing just so we don’t forget about anything that shouldn’t be there. You can also generate tokens to remotely execute and retrieve backups too, so we’ve got some deploy scripts that automatically run a backup beforehand and dev environment scripts that will download and import the latest backup for the project. Outside of that it has a some dashboard functionality to let us keep an eye on failure rates, S3 usage, operation time, etc. Anything that requires attention triggers an immediate Slack notification. To be honest though, while we do have a handful of failures every week, every single one these days is due to how janky the AWS tools are. Overall failure rate is &lt;0.1%. I’m very much cognizant that it’s become the weak link insofar as, while everything is encrypted and we’ve taken every precaution we could think of, root access to the system would grant access to a lot of other servers. If anyone knows anything we could do to lock this down I’d love to know - we’re a very small company and none of us are security experts, I just hope I haven’t been a total noob with any of it. One thing I would like to do in future is split it into two; a worker service with a significantly restricted API, that can provide diagnostic and analytical information, and accept new jobs, but that does not have any capability to give out potentially sensitive information; and a dumb web front-end on an entirely different server for the dashboard stuff. 
Based on the title I was wondering exactly who was recommending Laravel for secure, mission-critical applications. Turns out the author is the one mentioned doing the recommending. Though at the end, the author does claim the Laravel is the reason for "the renewed interest of developer community in PHP development". Not exactly sure when development interest waned but oh well. Maybe a follow up article is in store.
This comes from section [4.2: Properties](https://www.php-fig.org/psr/psr-2/#42-properties).
Thanks, it can be quite useful !
Bro, I am 100% with you on that. I will never do it again. 100%. 
I'm pretty surprised that Auth0 published a next-to-useless article like this. This is the kind of content I'd expect from random people on Medium or an agency trying to sell you their favorite framework, not a recognizable vendor.
My wife and I would often not be able to decide on what to watch so I’d load up Plex and look through there. We still couldn’t narrow it down, or agree, on what to watch in TV so I wrote a stupidly simple script that pulled all of my TV shows into an array and chose an episode randomly. It was stupid, and overkill, but it got the job done. 
Thanks for clarification!
I'll have it to if you're giving it away, really just so I could learn how to do it
No problem! 
Where did you source the facts from?
&gt; I'd still prefer Symfony. I do as well but Symfony vs Laravel is much the same as Rails vs Padrino. They both have their strengths and weaknesses.
I made script to calculate all part combinations (~83k) for electronic skateboard speed calculator library. It outputs CSV which can be filtered with LibreOffice Calc to only show combinations with easy to get/already owned parts and enough speed.
May i know the name of the site?
He was drunk
For anyone inexperienced discouraged by reading this comment: it's sarcasm.
Idea stolen! ;)
Thanks again. I've [released](https://www.adminer.org/#download) a new version fixing this issue. I've also added a [recommendation](https://www.adminer.org/#requirements) about this to Adminer homepage.
Adopteunmec.com
USB sticks used to be really expensive.
Neat
A Laravel app which reads data from an Arduino about the level of my water tank. It sends me a text message if the level is very low or very high. The tank is filled from a bore hole and we've had issues with the level. TLDR: my water tank sends me text messages. 
Once I was in one of the hotels where you can sign in via Internet and didn't have any personnel (about 10 years ago). They had Internet access in every room and pay TV which required that you entered your room number and your four digit door code so it will tell you if you had paid for TV access or not. It also did inform you that "invalid room number", "invalid door code", "no TV access" (when the codes were correct) and somewhere on the TV I saw a URL to the Web page where you could check the access. I wrote a script that looped every room number and every 4 number digits for room codes and got a list of all rooms with their codes. Tested a few to the front door, but they really had a major security hole there. The address was available publicly and didn't have any rate limits etc. The company never replied my email when I sent them the story but it got fixed within a few months.
Had the same problem recently in my 2nd year of studies
Lightwave user here... Go on?
I was 15 and hadn't done my math homework in about half a year. My teacher said as long as I could get it all done, it'd be fine. It was basic algebra, some quadratic equations, some other random crap. It was easy, but there was a lot of it. And I got bored. So I wrote a script to solve quadratic equations. Sure, I could do them easily enough in my head. But I wanted to give it a try. It was clunky and I did no research, but it worked. Of course, now I'd wasted a couple of hours programming and not doing my maths. And entering in the equations and writing the results took as long as actually doing the equation myself. So I didn't save any time. I got a couple chapters in to the book and just gave up. Just owned up to not doing my homework and copped the penalty on grades
In college, all of our homework needed to be emailed by midnight. So, I wrote a php mail program where I could adjust the time and date to email my professor...low and behold I was never late for an assignment. I did end up finding out that it wouldn’t show up in the mailbox under the right date and they were in order of received emails. But my emails did have backdated times and dates so I just blamed the “internet” on not sending my files right away :). 
Wrote a script that took an image from webcam, composited it with another image and uploaded it every few seconds to a FB page's cover. It was near-realtime webcam "video" in FB cover. Did a lot of scripts hammering some ticket portals for a tickets that used to be sold out in a few minutes. Did a stupid school social network in PHP in 1999. It had chat, profiles and wall. Placed NFC stickers on my apartment's door and used Tasker to make the phone ping my API URL if I touched them. Server then logged it for stats and pinged IFTTT for other tasks. Used a Tasker to grab SMSs from my GF, sent them to server and do statistics on them. Made a Lego robot for my company which you could watch via 5 webcams in realtime and drive him around desk via a website just like a game. Did a script which took data from German automotive website and calculated whether it's better to go buy that car (1000km far from me) or that car (600km far). It mangled car attributes with distance and gas prices. But my favorite one is - a telegram bot which sends me what's for lunch in nearest restaurants today. :)) 
I made a complete file sharing robot over the IRC protocol, starting in PHP 3 and upgraded to PHP 5.1 while it it was still in active use. As far as I know, it was the first PHP daemon of any kind. It doubled as both its own IRC server, complete IRC client, scanned, downloaded, indexed into a HUMONGOUS 15+ million row MySQL 3 database all of the known shared files from several dozens of MP3 channels (back when 128kbps MP3s took over 30 minutes to download!). At the end, you could control the bot via IRC (regular) messages, DCC messages, web interface, and telnet. The bot was made in a way where EVERY module could be swapped out and reinterpreted without EVER terminating the bot, because one of its main purposes was to be a channel guaradian on UnderNet. https://sourceforge.net/projects/phpegg/
Wrote a "solver" for finding the cheapest flight route in ZakMcKracken to save money… Mostly did it for my younger sister who was too young to figure this particular problem out but otherwise could play the game. Little did I know of anything and also back then never heard of the Traveling Salesman problem so it was rather brute-force-ish; but if you did wait long enough, it worked. Oh ... and it was in the late 90s. So it was probably not the kind of PHP code you know today. :-)
He was indicted for identity theft and a security flaw exploit. That is hardly just scraping.
Great question. We used Wikipedia and a few other sources to come up with about 20-30 facts. We wanted enough to hit 48 hours, and after a few days we both Had done more cat research than the fanciest of cat fanciers; so we stared making shit up. What a time to be alive. 
Oh, I was just thinking of the humble beginnings of Lightwave on the Amiga. I'm imagining something like the power of Lightwave 1.0 running in PHP. I had a copy of LightRAVE which allowed using an early version of Lightwave, maybe 1.x to 2.x. Lightrave allowed running Lightwave without a Video Toaster. Years later, I finally got a Video Toaster, but at that time, Windows machines were coming to power for video editing. I used to buy Video Toaster User and Lightwavin' (I think that was the name) magazines, too. I barely use Lightwave these days except for creating models for 3D printing. I prefer Lightwave, as Blender has the worst interface in my opinion.
You're right. It's not true autoloading.
Oh yeh, this one too: back in '94 using microsoft paint and writing batch files, we patched the orgininal doom game to replace the soldiers with walking penises which bent forward and fired at you. We used the starwards blat sound from the y-wing or something to replace the gunshot. And of course when you blew it away with a shot gun there was the appropriate mess of what you would expect. Kept us laughing for days. We uploaded the patch to a couple of bulletin boards but the web was a much smaller community so it didn't really find the infantile demographic that we were.
In the early 2000s I wrote a PHP utility called Swiffy, which generated Flash SWF files on the fly, taking a string, font size, line height, colour, bgcolour and truetype font file as input. It would then generate a Flash SWF file on the fly with the text and font embedded, and output HTML object code to embed the file into a webpage. It would dynamically calculate the dimensions of the text object, based on the font size, number of lines etc. This was before (I was aware of) web fonts. It worked well and I learned a lot about reverse engineering the SWF file format, binary data etc. The best part was that my website was constantly hacked. I also learned a lot about sanitizing input, register globals etc. back in those days :-)
I would honestly go with a third party platform for ecommerce. Let them deal with security headaches. Something like Shopify or BigCommerce is great. They tend to ensure that their plugins/extensions are updated and functional (not always, but there's a higher level of accountability). I use to work with a tech company that had proprietary apps for ecommerce platforms. The wordpress guys had to invest more time into problems. But...they saved money. So it depends where your focus is.
You might like [https://github.com/borisrepl/boris](https://github.com/borisrepl/boris), which is a REPL that beats the hell out of php's interactive mode for testing fiddly things since it prints thing as you go (like you'd probably expect in a REPL).
Good bot.
The security flaw was a plain publicly-accessible web page. What's different between that and scraping?
Not necessarily a paper, but if you want to understand the internals then there's this: http://www.phpinternalsbook.com/ It's not bleeding edge, but the authors seem to keep it updated and it helped me a lot in learning (back in the PHP5 days) how PHP works at a language level.
5 years ago I was playing evony. And there was a recent wave of bot users playing the game to. These were hard to fight because they would play like a hive having main accounts and feeder accounts (designed to gather resources and food for the quickly growing main bases) These feeder accounts would devistate resources for all the legit players. Every couple of months a new server would come out. and when a server opens everyone can pick 1 of 8 states they would be in. I quickly wrote a bot that would mass create accounts in 1 state and fill it up to minimize the effects of bots in that state for more resources. 2 hours and 10000 accounts later the state was full no more bases could be created in that state. Bavaria was bot free once again. And my little stunt actually caught the attention of the devs and finally noticed the botting problem that was happening in their game. After that I also found a vuln in the bot which allowed remote control (allowing the main account to send commands to feeder accouts of tasks and shit). and wrote a script to exploit that. Got the attention of the bot authors wife &gt;.&gt; she bitched soo hard and me and pulled the "the money from the bot pays for my disabled son" Code: [https://github.com/JABirchall/DrEvony](https://github.com/JABirchall/DrEvony)
I migrated &gt;9,000 mailboxes from a proprietary mail server to exchange. I used php-curl to login as a user's webmail, opened every single email, on every page, through every folder, including any contacts or calendar appointments. 6 months. It was grueling and awesome. 
Thanks ☺️, lets see what i can make in that site
I created a script to send me notifications if i entered a radius . I always sleep in buses. So its handy 
This feels like a solution in search of a problem.
If you've learned about it, then you're already miles ahead of the people we were discussing.
As well as a bunch of really convoluted bullshit where things are hidden behind facades and magic __call() and __get() methods so even if you look into how to resolve a facade through dependency injection, it's not always clear how you can use it or even where the method that the facade has is even coming from. SessionManager is a primary example of this, where basically anything not defined on SessionManager __call()s the driver that's registered with it, so even if you look at API docs you have zero visibility this type of thing unless you dig through lines of code and/or are already intimately familiar with the framework. Lots of other stupid things it does too, but I could be here all day and I really don't want to be.
AFAIK, Symfony doesn’t sign and encrypt their cookies out of the box. Of course, most cookies have little use for this but some do. Just sharing something that was maybe different from other framework’s default experience.
A system that used VLC, FFmpeg, UNIX sockets, UDP streams and v4l2 to take video from a camera from one computer, beam it over the network to another, transcode it live to different bitrates, add a watermark, beam those to a streaming server which exposed the streams, and dynamically start new processing pipelines if a new stream was discovered. It was a POC that I could replace a $250 (per camera) piece of desktop software with a few dozen lines of code. I could, but it would require issuing all users with laptops with Linux. That $250 was suddenly a bargain.
I see. Thanks. 
Why does this sound familiar? Did this company also sell DSL/T1/EOC service?
Here's the thing about PSR-2: it's a great foundation to base your code style upon. But it's not a law, and there's no penalty to extending it.
Here's the thing about PSR-2: it's a great foundation to base your code style upon. But it's not a law, and there's no penalty to extending it, using forethought and common sense. For example, I personally use multiple properties per declaration for private properties which are logically grouped somehow. For example: /** * Area dimensions in pixels. */ private $x, $y, $width, $height; The more stable the code is, the less I have of this, but for quick private implementations and prototyping, it actually helps make code *more legible*, as you can derive meaning in clusters of information rather than have to re-build them in your head every time you open this class by reading every individual comment and property. 
There aren't many, because there aren't many papers about programming languages and the PHP interpreter in particular isn't where really any cutting edge language design happens. You'll find much more talking about more generic algorithms that aren't tied to a particular technology.
Could you share a link? I have similar API based tool to autopost tweets: https://github.com/TomasVotruba/tomasvotruba.cz/tree/master/packages/StatieTweetPublisher
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [TomasVotruba/tomasvotruba.cz/.../**StatieTweetPublisher** (master → fdfae21)](https://github.com/TomasVotruba/tomasvotruba.cz/tree/fdfae210f03868a5ebee7d0ff5424e978abb0ff2/packages/StatieTweetPublisher) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e1hh1a4.)
interresting, does that mean it will help rendering templates, like compiled twig templates with lots of `&lt;?php echo 'something' ;? &gt;`? 
&gt; For example, I personally use multiple properties per declaration for private properties which are logically grouped somehow. /** * @var \Foo\Bar\Area dimensions in pixels. */ private $area; FTFY
Found the Magento architect.
When you use google tagmanager you are already giving data to google from your site visitors
&gt; Laravel makes your applications more secure by default Then proceeds to describe how eloquent is basically CRUD over HTTP and you need to manually configure it so certain fields are not accessible this way. Then talks about a _separate_ method to escape template variables, that is not enabled for all, but you need to choose it manually instead. „Laravel will also protect your cookies. For that, you will need to”… I guess you would need to do nothing, as its meant to be secure by default? Also mentions about error pages with stacktraces being shown to end users by default, and how the programmer needs to manually disable them. That is not secure by default. &gt; The cookie class uses the Application key to generate secure encrypted strings and hashes. Laravel will protect your cookies by using a hash and making sure that no one tampers with them. Or you could just not store data (but session key instead) in cookies, so there is nothing to tamper with. YMMV, but I believe a secure by default approach would use this, and only have the option to switch to storing data in cookies in specific use cases (for example when there’s no shared session storage), and only if the application key is present. &gt; A major reason is this that it is much securer than other frameworks and more apt for mission-article applications. A conclusion not based on anything in the article :) Such a fun read.
It does not, but neither does Laravel, as you need to set up the app key for this to work (I don’t know Laravel, I’m basing this on the article alone). But Symfony also doesn’t store session data in cookies, so there is no need to secure them by default.
Found the Magento 2 architect. /s But on a serious note, let's skip the low effort replies. Yes, sometimes related properties should be put in a class, or an array. *Sometimes they shouldn't be*. The topic is code formatting, note programmer circle-jerk.
I would also advice to format code in such a way that a change to one line (or an addition), shouldn’t have to change any other line. Guides that fall into that category are: * do not group namespaces * do not group var declarations or class properties * do not align array keys * use a trailing comma in the last array item (I wish PHP could do that for function arguments as well, similarly to what JS allows you) So yeah, my comment wasn’t all serious, I give you that, but I don’t see this code style as a good option for my team.
You could also simply run the file from the integrated terminal in vs code. But I guess just pressing f5 is easier
It doesn't seem to be maintained anymore. Try https://github.com/bobthecow/psysh
Awesome, thank you!
Facade::getFacadeRoot() , ez clap. 
It's installed by default actually. You do composer require and there is post-install-cmd - php artisan key:generate. 
What are you talking about?!? Laravel IS symfony o.o" 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Exactly my thoughts. I didn't report it as spam but I was really tempted to. Resolved to do it if I see such a blatant blogspam from them again.
&gt; Or you could just not store data (but session key instead) in cookies, so there is nothing to tamper with. This makes session hijacking ridiculously easy. Laravel, by default, only issues a session cookie, which it encrypts. But generally, every created cookie is encrypted unless you tell it not to. And that's a 5th or 6th argument. You can't mistake that one &gt; Then proceeds to describe how eloquent is basically CRUD over HTTP and you need to manually configure it so certain fields are not accessible this way. It's not like there are many options there. Performance-wise this is the fastest. The AR doesn't care about the outlook of your database table. You are the one in control and you are the one telling it which columns actually exist. I see nothing wrong with that. Also you wot mate? &gt; basically CRUD over HTTP That's basically every and any PHP applications. &gt; Also mentions about error pages with stacktraces being shown to end users by default, and how the programmer needs to manually disable them. Well, you have to be a developer not a lampoon. All you have to do to "disable" them is to change the environment to production. Keep in mind, if there's no .env - the environment is production by default iirc. You'll be a fucking moron if you release to production with debug environment. I never imagined I'd have to explain this in 2018 but sheesh. 
Intent. When you realize the flaw and exploit it, that counts as a security breach. If you were just scraping every publicly accessible webpage, and happened to scrape something that should have been hidden, it would probably **not** be seen as intentional.
You're must pay to access to its functionalities, unless you're a woman ^^
Oops, i got a 403 on that url. May be i need to choose a dating site in my country
Ah? A 403? That is weird... But indeed, you better choose a local dating site. Have fun with bots! :D
It takes some time to write some curl functions, but in my local most dating sites are already filled with fake female profiles and in some sites they use bots as fake profiles and respond to text.they do it to attract boys.Unless i switch to another country from india i think i will be single.😂😂.
It's not... Laravel and Symfony Framework are completely different frameworks. Laravel uses some Symfony components but imo the similarity stops there.
Probably not the weirdest, but pure php hit counter is a great example of "if it's stupid and it works, it's still stupid". counter.php: &lt;?php //0 $count = file('counter.php'); $count[1] = trim($count[1],'//')+1; echo $count[1]; $count[1] = '//'.$count[1] . "\n"; file_put_contents('counter.php',$count); 
Fake profiles are the worst... But don't give up, relationships come when they're not expected at all :D Anyway, for making requests, use Guzzle. It's a really good wrapper to curl ;)
I kinda switched to JAVA now(building android apps), but PHP is still amazing.
Looks similar to a script that my previous company used. They used reflection to get the information as well. It write the setUp function, initialized the dependencies (prophecy) and created a test method per public class method. Was really neat!
This was almost twenty years ago...
Not allowed to install things on college machines, so no FTP clients!
You're building mobile apps as a hobby or for work? Yeah, I love PHP. It's been nearly 15 years that I'm coding in PHP. Since version 4. But I would like to test Rust, to change.
maybe if i had some free time, i can improve it and put it up on packagist , currently i don't have time to do that.
Building mobile apps as hobby(may be professional one day), currently i am a google summer of code intern.
I mean, it uses the same HTTP core, console toolkit, Laravel's validation is based on Symfony components. That in itself is a huge chunk of similarity 
does this solve anything that can't be solved with anoymous classes generated from a protected/private method ?
Trailing comma in function arguments comes with PHP 7.3 (https://wiki.php.net/rfc/trailing-comma-function-calls)
Your "ez clap" and "lul" let your somewhat reasonable arguments sound like they're coming from a spoiled child. This is about going static at all. You go static for static data, static values, static functionality. But a database connection or a session manager is nothing static. The DI container isn't, either. At some point the DI gets injected into some facade root provider statically. That is the faulty part of code. Not you actually using these static facade roots in the end. Oh, but it's testable, because they also implemented static mocks acting on the facade root, yay! That still doesn't help with: 1. You have to traverse a whole lot of bullshit and magic to get to the actual logic that gets called and see what it does or e.g. throw a dd() in there 2. Your IDE simply breaks on it. No IDE would ever be able to resolve that amount of magic happening there. __call here, __callStatic there, __get here. Magic everywhere. Using a good IDE like PHPStorm with Laravel is simply hell, because you don't know, is it an actual error, is it just Laravel magic not resolving again, do you need to add another 4000 @method annotations to get auto-completion or do you have to install the ide-helper to generate static files for you that enable any kind of auto-completion at all? I don't know, Symfony doesn't need a statically generated PHP file for my IDE to be able to resolve things. I inject via arguments and type-hints, I can CTRL+hover or ALT+Space and I see everything I can do with my object instantly. Yes, you can inject like that in Laravel, too. But that doesn't make it better if your colleagues or people you work with start using Facades because they think it eases things up. It eases a small call, one line of code, up. And it makes everything else that comes after it harder. Magic is shit. You don't do magic. If you see that you require __call, __callStatic or __get to make your API cool, maybe your API is simply shitty. It's cool that you understand your own magic, but other people may not or will take a long time to. In the case of facades, the people that use them, don't understand them and just follow docs. The people that understand them don't use them. At that point, rather write 1-2 lines more and work without magic. It's worth it and your production application will thank you greatly for it.
I want to add to that: There are languages like haskell and erlang with are evaluating and implementing new concepts. Some other languages have adapted some of their new concepts. So if you need something concrete - you might want to have a look at them.
You misunderstood. Output Buffering doesn't solve the whitespace from actually getting into the output. It just solves that you can send your headers without an error (as it collects the output first and then sends it fully) That's okay for HTML, as HTML ignores white-spaces for the most part (expect if you're in an element with `white-space: pre`, like `&lt;pre&gt;`). But if you're e.g. generating a CSV file with PHP, it can break the file. More than that, it's incredibly annoying to search errors like this, as you have to find the offending file first, a `?&gt;\s*`-search will also output most close-tags e.g. in your templates, including actually required ones. It's not like a notice is generated for that one (without output output buffering you at least get a notice and can see where it happened) The fact that it _can_ create problems and the other solution, not writing the close-tag, doesn't have this problem, leads to the small rule to simply omit the close-tags all the time. If you're used to it, and everyone is used to it, it simply can't happen.
&gt; It's not like there are many options there. Performance-wise this is the fastest. The AR doesn't care about the outlook of your database table. You are the one in control and you are the one telling it which columns actually exist. I see nothing wrong with that. Auto-discovery is slower and prone to bugs and headaches if you use some sort of caching. I will stick to the „by default” argument presented in the article. If you use the following code: `$user = new User(Input::all());` it allows you to update any field in the DB by default. This is not secure. If this method failed unless you have explicitly defined `fillableFields`, that would be a better design from a security standpoint. I do not argue what is faster, easier or more readable. I bet there are RAD enthusiasts out there that prefer this style, I won’t convince them to do it differently, but I stand my ground that this is not secure. This very design was the cause of the [github hack / rails bug](https://gist.github.com/peternixey/1978249#how-homakov-used-update_attributes-to-hack-the-rails-github-account) some time ago &gt; Well, you have to be a developer not a lampoon. All you have to do By default you are a lampoon, and the framework takes of the security for you (or it doesnt). As soon as you „all you have to do” it stops being „by default”. You can forget, misconfigure, be a lampoon and your app ends up insecure. &gt; I wonder what sort of homebrew bullshit you are using on a daily basis, with unecnrypted session id. Please explain to me how session id (a string used for a key-value lookup) can be more secure by using encryption. Quick googling for the topic confirms that [encrypting session id is not useful at all](https://stackoverflow.com/questions/2840559/is-encrypting-session-id-or-other-authenticate-value-in-cookie-useful-at-all). I’d appreciate if you kept the conversation civil and refrain from calling my stack a „homebrew bullshit” (even if it is one, which you can’t tell, because I am not talking about my setup even one bit)
They have problems with credibility, so they try to lure poeple in. Laravel is a good choice because it is a populist product.
Like I said, it's syntactic sugar, and every effort is made to make it testable and maintainable. Few more notes 1) XDebug helps you a lot if you really want to get nitty-gritty. If not, then yeah, dd is not half bad. 2) Modern IDEs support plugins, I am using VS.Code and the wonderful [Laravel 5 Snippets](https://marketplace.visualstudio.com/items?itemName=onecentlin.laravel5-snippets) extension. It doesn't break shit. I'm sure there are analogies for PHPStorm given how popular it is among PHP devs. Personally I don't think it's my cup of tea but you know, preferences. I don't think the VS.Code extension creates static files. Maybe the IDE is not that great if it is not really helping you? And well, if you don't want Facades in your project, you can disable them. Just like they did in Lumen. Lumen runs no Facades unless you explicitly make an effort to turn them on. I used to think like you about magic being absolute garbage, but used right it's not that bad. Personally, I don't write code that relies on magic methods, unless it's __toString although there's some really cool shit you can do with __sleep and __wakeup. So albeit evil, magic methods are useful in certain cases. Then again, if you write good, testable code, is it really that awful? I'd understand your rant if you are just some random coder-for-hire and your opinion has no weight on the project and the project leader already fucked it up, but you don't sound like one. And if you are a project lead, you can easily enforce a style guide. I like modifying the frameworks that I use, but I also like the syntactic sugar. 
Take a look at the [Plates](http://platesphp.com/) template engine. It uses native PHP with some wrapper functions to get common template functionality like blocks/sections and extension. Generally, PHP *is* a template engine already. Imagine this: index.php: ``` &lt;?php //... $user = $session-&gt;getUser(); include './index.php.tpl'; ``` index.php.tpl: ``` &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;!-- ... --&gt; &lt;body&gt; &lt;h1&gt;Hello, &lt;?= $user-&gt;getName() ?&gt;!&lt;/h1&gt; &lt;p&gt;Your last login was at: &lt;?= $user-&gt;getLastLoginTime()-&gt;format('d.m.Y') ?&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; ``` Now, this is incredibly insecure, be careful, as the variables you output are not sanitized and prone to XSS attacks. To make this safe, you'd have to write something along ``` &lt;h1&gt;Hello, &lt;?= htmlentities($user-&gt;getName(), ENT_QUOTES) ?&gt;!&lt;/h1&gt; ``` Of course a user-name might already be sanitized otherwise and may not contain HTML, but that isn't the case for many other things the user can input, like a title for a post or a comment content, as an example. Now, that is the part where template engines like Twig or (shameless self-advertisement) [Phug/Pug](https://phug-lang.com) enter the stage. They sanitize output by default, so something like `{{ someVar }}` in Twig or `= $someVar` in Phug/Pug will render to something like `&lt;?= htmlentities($someVar, ENT_QUOTES) ?&gt;` in the end, without you having to actually write it like that all the time. 
Well maybe you've heard of Ruby on Rails or NodeJS. I've seen plenty of programmers move onto those platforms / frameworks and never look back. Laravel is striking a balance that moved programming in PHP frameworks closer to modern development. Making things like browser testing easier, Laravel Homestead for local development, middleware and dead easy DI. Having used Rails, Django and Laravel, I can say that Laravel has lured me back to enjoying web development in PHP, plus PHP 7 has certainly help on this front. I still enjoy Rails for stupidly fast development, and Django for its admin / REST API framework.
You could also make your bundler add the `?&gt;` and turn `namespace;` into `namespace {` and add a closing `}` at the end.
&gt; If I start a project in HipsterCMSTM Way to loose all credibility. 
a printer driver
What are its pros compared to others, such as Monolog?
echo ‘Hello World’;
but Homebrew's authors choose their own way and now php depends on a bunch of packages including apache xD
I don't think you and /u/invisi1407 understand the actual problem here. You're not supposed to not use `?&gt;` at all. A PHP file doesn't contain PHP in the first place. In the first place it contains **output**, be it HTML, plain text or whatever you like. Then, only between `&lt;?php ?&gt;`-tags you can add logic to that **output**. You can't create an option for `don't output anything after ?&gt;`, since outputting something before and after the PHP tags is once of the very basic core concepts of PHP and basically every single application and template engine uses this feature/**has** to use this feature (It's the core way of how PHP works). There are a lot of reasons of why you may _want_ that output at some other part of the application.
&gt; Please explain to me how session id (a string used for a key-value lookup) can be more secure by using encryption. Quick googling for the topic confirms that encrypting session id is not useful at all. The most upvoted answer is misguided. Or dated. Http(s) and HttpOnly is meh at best. Even the most dull browser extension allows you change values as you see fit. What happens if I guess the session key of your administrator session? Unless you have an IP address protection for the session, I can simply change the session key and I'm logged in as you. I've done it to sites that use that and do not garbage collect old sessions often (usually older browser games). If the session key was encrypted by default I guess wouldn't have even tried. It's not about me stealing your cookie through MITM means. It's about me just switching a plain text value and hitting F5. Call it bruteforce if you will. And yes, PHP attracts a lot of lampoons. However, with Laravel, you have XSS AND SQLi by default. Hell, you had that in CodeIgniter like 8 years ago. The people who mostly got burnt with those used homebrew "first-working-answer-on-stackoverflow" type of frameworks. I had nothing against you, I just cringe everytime when I see homebrew software these days. Like why would you even do it, you have this open source project here, with over 100k stars on Github and millions of installations and businesses working with it, are you really thinking that you can do better by yourself? I used to think that, yes, when I was 16 year old. I was wrong. The security in Laravel is ON "by default", I don't know why the article states that you have to do X in order to achieve Y. There are post-install-cmds in laravel that take care of generation for stuff. Even ```$user = new User(Input::all());``` is actually safe, because it's put through prepared statements and escaped. I don't even know if you can disable it, probably not, or I guess you could use raw $_POST, but only a lunatic would do that. If anything, you don't have fallback to default with $_POST unless you plan on writing boilerplate
I understand it fully - I haven't closed my PHP tags for many years, but what I mean with an option is, just like we have `short_open_tag`, we could have an option that would disallow a `.php` file ending in `?&gt;[\r\n]`, such that it would be _an error_ if it did.
&gt; Unless you have an IP address protection for the session, I can simply change the session key and I'm logged in as you. I've done it to sites that use that and do not garbage collect old sessions often (usually older browser games). If the session key was encrypted by default I guess wouldn't have even tried. The only difference is guessing „plain” session key vs encrypted one. So it’s a matter of the key length, not the encryption itself. [More on session key brute forcing](https://security.stackexchange.com/questions/81519/session-hijacking-through-sessionid-brute-forcing-possible). Long story short, even the default php session key is strong enough for any practical scenarios. &gt; with Laravel you have XSS AND SQLi by default Basing on the article alone, you don’t have XSS by default, you need to use a separate syntax, so you need to decide which one to use. In contrast, twig uses escaping by default, and you have to use a separate syntax *not to escape*. All you have by default in Laravel is the mechanism, but you have to use it manually. &gt; Even `$user = new User(Input::all())` is actually safe, because it's put through prepared statements and escaped. Its unsafe because it allows you to modify any and all attributes on a user. In the linked github case the user added a public key to their account overriding the `user_id` attribute. In effect, the key was added to a different user, so the attacker was able to push commits using the victim account. &gt; I had nothing against you, I just cringe everytime when I see homebrew software these days. I do not advocate that. On the contrary, I argue that one should use a framework with sane security defaults. For the article author those defaults mean that you can *configure* the framework to be secure. This is a bad design for a framework that is marketed as easy to use (eg for newbies, that don’t care to configure its security settings). &gt; Now, back to reality, there are TONS of successful projects running Laravel. They are both fast and secure and they serve millions of impressions each and every day and there are no news of injected laravel sites these days. And this all have no baring of the case if the security defaults are good or bad. I refrain from giving my opinion on Laravel as a whole. I havent used it in the last 3 years, I’m not an expert, noone needs to hear my opinion. I only commented on the article, and it seems that its misleading and the reality is much better for Laravel users than it’s stated there.
Laravel does not use Symfony for validation at all.
There is so much with your comment I don’t know where to start. It’s super obvious you’ve never used Laravel extensively. Models are not mass assignable by default. Blue echos are escaped by default. Debug display works the exact same as Symfony. 
Your Input::all() argument is wrong though? That’s not how it works by default.
Try pluralsight.com, a good website to improve your oop skills
&gt; Basing on the article alone, you don’t have XSS by default Go ahead, install Laravel 5.6 and try posting a form. See if you don't get a "Whoops, something went wrong" error. I'll wait. &gt; Its unsafe because it allows you to modify any and all attributes on a user. In the linked github case the user added a public key to their account overriding the user_id attribute. In effect, the key was added to a different user, so the attacker was able to push commits using the victim account. There are a lot of wrongs with the github example that you gave and I don't know if there is a framework that can protect you from it. Even with sanitized data, you'd be fucked. All you can really sanitize is to type check the user input. Afterwords, it is logic, and by github logic, if they allow user with ID X to create a record with ID of Y then that's on them, not really on Rails. You said that you like Symfony, how would 0-configure Symfony protect you from that particular mistake? 
&gt; it's syntactic sugar I explained why it is not. Syntactic sugar wouldn't suddenly get your dependencies from a static source. Facades do this. Using a facade and injecting via arguments are two completely different way of injection and the latter is clearly the more stable and more testable one. &gt; I'm sure there are analogies for PHPStorm given how popular it is among PHP devs There's a Laravel-plugin for PHPStorm that appearently doesn't really do much. In PHPStorm, your laravel-code usually looks like its full of errors, unless you go and add a million of @method and @property annotations. Take the models, as an example. You have no idea what fields your models have unless you traverse all your migrations and add up the fields. Your IDE can't know it, it would have to run the migrations to know it. &gt; And well, if you don't want Facades in your project, you can disable them. This is not about wanting, this is about new programmers creating applications following normal docs, which tell you "Use facades, facades are so cool!" and it teaches this programmer an anti-pattern he/she will follow for quite a while until someone shows them better (if someone does). In the worst case, you start a new job and end up having to reverse exactly this for someone who simply didn't know better. Best solution? Don't have facades at all. The only thing they spare you from is writing like 20 characters of code to do your injection. If that's all they "solve", then for sure they can also be omitted freely. &gt; unless it's \_\_toString although there's some really cool shit you can do with \_\_sleep and \_\_wakeup. \_\_toString, \_\_sleep, and \_\_wakeup, also e.g. \_\_clone are no magic methods for me (\_\_construct and \_\_destruct aren't, either). They return either a scalar, simple value with a fixed type (\_\_toString will always return a string, the IDE can simply use that simple rule) or they return nothing at all and they have fixed parameters or at least resolvable parameters, in case of the constructor. They are more like implicit interfaces you implement as soon as you use them. \_\_call, \_\_callStatic and \_\_get can return _anything_ and you can pass them _anything_. That's the biggest problem with them. You can't interface the input and output of these methods well, in any way. And there is no `@forward OtherClass` (which wouldn't really help, either, since you may or may not forward all methods and may or may not add additional ones) &gt; Then again, if you write good, testable code, is it really that awful? I can test all the magic values you can think of for you. But that won't help you understanding what input/output values there are when you see my magic method in action and you have to use it. It's not like you get a snippet of the tests for the method as your tooltip to quickly see examples (and then hope that the tests cover all cases). This is not about my own code or the code my team writes. That code is clean and enforces strict rules. It's about millions of developers learning wrong conventions and wrong paradigms. This is about them getting problems when they enter actual enterprise environments at some point, where magic is strictly forbidden (e.g. you enter my team, I have to sit down with you, tell you why there are no static facades or quick functions for anything and why you have to inject stuff and how injection works). And the worst thing is, they don't, or rather, can't even understand why it's wrong because they're not at that point in their career where they'd write applications as big as where this will become a problem. They will just follow it because they have to, in the worst case still using facades for their private projects. Your classical blog/customer website won't die from a facade, obviously. But you also never know when your small customer site becomes a big enterprise panel because they grew and if you still use the same conventions there, you _will_ run into problems that could've been avoided by not using facades.
[youtube.com](https://youtube.com) [google.com](https://google.com) [stackoverflow.com](https://stackoverflow.com) 
I was not commenting on Laravel, but on the article. The article states that you have to use separate syntax for escaping, and that entities *are* mass assignable by default, etc.
what im asking is a good tutorial with a deep explanation. you dont get it. thanks anyway
It's because corporations pay *GOOD BUCKS* to consultants like me who already know how to do this. Honestly, I can go get $2,500 for just an hour consultation on how to do this. No way would you find this valuable information for free.
I know what Output buffering does. As I said, our application never has that problem.
I commend you for trying to learn, but why did you accept this position? Why were you hired? Did the company not do any basic tests assessing your skills? Hiring someone for a position they're not fit for, helps no one. Not the company and not you... If the company is aware of the situation, are they going to help you train? [Codecademy](https://www.codecademy.com/en/tracks/php) also has some lessons on OOP.
Well it comes down to the app. 5k isnt much. Tips: static files on a seperate server and caching your db queries will help a lot.
Hey, ellisgl, just a quick heads-up: **seperate** is actually spelled **separate**. You can remember it by **-par- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I've run sites at just upwards of 2k concurrent on a single box running nginx and php-fpm which had plenty of room performance wise, it depends on your application but making sure opcache is on and your application doesn't do anything stupid from a SQL point of view or PHP point of view then you should be ok Google how to tweak SQL, nginx and PHP all information is out there freely, I remember mysql used to come fairly under tweaked out of the box, that might be a bit better now, if not google innodb tweaks
they did, just a pure luck i think. they gave me a week to study for the basics. thanks i already tried the basics in codeacademy but still not satisfied
&gt; ez clap Twitch chat memes outside of Twitch related things always catch me off guard.
&gt; Every Laravel installation comes with the Illuminate\Foundation\Http\Middleware\VerifyCsrfToken middleware that is turned on by default on all routes. You’re talking about CSRF, I was talking about XSS. And again, I don’t know what configuration comes with Laravel these days, I only comment on the article that explicitly claims XSS is off by default and you have to *know* and *choose to use* a separate method. &gt; Afterwords, it is logic, and by github logic, if they allow user with ID X to create a record with ID of Y then that's on them, not really on Rails. There was a whole debate about that, and rails in fact claimed that it was up to the user to know better and configure the system. Recently there was a similar issue with PGP, that by default it was insecure, and some people claimed that programmers should know better. I’m a pragmatic person and I believe that even if programmers should be smart, frameworks and libraries should help them to be smarter. In my book, if the tool allows you to do stupid things by default, it’s not secure by default. No github coder explicitly wrote a code that allowed User X to input id of User Y into the database, the tool made that option possible for them. It wasn’t a flaw in some code they wrote, it was a design „feature” they probably weren’t aware of (or forgot in that particular case). &gt; You said that you like Symfony, how would 0-configure Symfony protect you from that particular mistake? I said nothing of the kind (in this thread). I’m not going into framework flame right now, it’s not about comparing them. I only claim that this particular feature is not secure by default.
Define "concurrent". The term is vague, so better to define in requests per second to backend. 
Yeah, what I was telling you is that output buffering didn't do anything for you except avoiding a notice. You still end up with additional white-space in your output, which does or doesn't break applications, depending on the output format. The "error" is still there, you're just able to send your headers out. But you may never know where that additional new-line is coming from.
Lol this exclusive hard to get information
You didn't describe what your site does But nginx and PHP can easily handle that many users Other languages will be faster. That's just a fact. If you build in Go or C# it'll be faster. But people still use PHP because 99.99999999999% of sites never get big enough to where PHP can't handle it.
I don't think that really exists, because it's a shift in thinking rather than a "how-to". The best that you're going to find is the \[GoF catalog of patterns\]([https://www.gofpatterns.com/](https://www.gofpatterns.com/)) and simply looking at and working with OOP code.
PHP can do it just fine. I might go with NodeJs if websockets are absolutely central to your app (but you can do it just fine with pusher in php) and golang if there is some heavy non web specific problems (math, thumbnail generation from video, ...). But again, PHP can do it just fine too. Don't bother learning a language just for that. Look into redis (data cache), look into varnish (http cache), look into static storage (AWS or digital ocean spaces, for static files), look into offloading costly processes (memory or time) to queues (even better if queues run on a separate server). Cache long computations whenever you can (sql queries especially). Remember, bottlenecks ain't just about memory or time, but also parrallelism. Caching your fastest query, if it is done on 1k req/s, might be better than your longest if done on 5req/s. It `memory * req/s` and `time * req/s` you want to look at. Unless you are doing something pretty funky, 1k-5k concurrent will be dealt with easily. Even with only half of the above.
&gt; you for trying to learn, but why See if you like this one: [https://knpuniversity.com/screencast/oo](https://knpuniversity.com/screencast/oo) I remember using this site to learn other things and I liked very much. Their videos are fast and says it all, you could learn faster
OOP is a huge topic, 1 week for basics, you will just learn what is abstract class, a interface or a Trait. here are the basic functionality in PHP : [http://php.net/manual/en/language.oop5.php](http://php.net/manual/en/language.oop5.php) In OOP, I think the more you practice the better it is. Even after few years working with objects, I'm still not happy with my level, and I'm working every day with it. Udemy has some OOP basic classes. After, you can check design patterns, but be sure to understand the concepts of abstract, interface and Trait. [https://www.phptherightway.com/pages/Design-Patterns.html](https://www.phptherightway.com/pages/Design-Patterns.html) And practice, practice, practice. And try to get a Mentor in your company or your local PHP user group. Might be the best solution ? 
&gt; I’m a pragmatic person and I believe that even if programmers should be smart, frameworks and libraries should help them to be smarter. I mean, isn't this why we go to higher education facilities and take on classes to even the "playfield". To introduce each and every one of us to those issues in particular, so that people would think twice before using something. Personally, I don't think a person is in their right mind of using a feature without reading what it does in the backend. That's reason A I love open-source. It's not some proprietary closed-source bullshit API. You can check it out, and I do. I think of cases like the one you suggested and drop conditionals here and there to prevent stuff like this from happening. I'm paranoid like that and I check for NULLs and whether a variable is of type or not. Technically, computing software and protocols have largely chosen speed over security and it kicks us in the ass big time nowadays. Take TCP protocol for example. It's so open, you can do everything you wish and the clients on the other end would just ... trust you. Or that you can send UDP packets to anyone and they should (by protocol) accept them. Hell, you can join a WiFi/LAN network and say "Hey, look at me, I'm the router now" and every client on the network will just switch toward to you. There's tons of that stuff out there with shitty security on a fundamental low level. That's not even HTTP, that's plain internet. Programmers should know their tools and they should know better. Otherwise what's the point of wasting 4-6 years in university. You can build enterprise apps just after watching about a month worth of online tutorials. 
The fact that you didn't understand my comment and your so called solution does not actually resolve the problem I pointed out is rather telling.
And this right here is why I didn't trust that "we never sell or give any data" tagline...
And here goes Taylor Otwell on the defensive about his own precious framework. Criticism my friend, learn to be an adult about it.
There are specifically four points that were important for me: \- Closely modelled after Log4J, including versatile and familiar configuration options for formatters, appenders, filters, renderers etc \- Good logging event location information, as in file / line / class / method \- Complete compliance with PSR-3, including exception context accepting \`Throwable\` hierarchy change \- Marker interface \`GenericLogger\` that allows you to embed Log4Php logger inside of any existing bespoke logger class without losing even info location information. Here's someone else's attempt to compare the two, albeit somewhat superficial: [https://blog.riff.org/2012\_11\_03\_rethinking\_watchdog\_monolog\_vs\_log4php](https://blog.riff.org/2012_11_03_rethinking_watchdog_monolog_vs_log4php) 
What are the requests doing? And are you sure you're going to have 1-5k requests \*per second\*? My experience of clients talking concurrency is users on the site at any one time, but 99&amp;#37; of them aren't going to be clicking links within that second, they're going to be sitting reading (which doesn't take server resources!). If the 1-5k number is an optimistic estimate, then don't fret about speed yet (premature optimisation being a bad thing), but do build your code with autoscaling and caching (with or without a content delivery network - CDN - and edge nodes) in mind. You can use the apache benchmarker (ab) tool to simulate connections, but that doesn't simulate the page loads through PHP and the DB very well. Your best bet would be to throw JMeter at your codebase and see how it handles.
i did something like this back in the late 90s where i programmed a bank of modems to call a radio contest to try and get through, even with 4 modems redailing i never could get through. a former DJ said once that a lot of radio contests are just rigged (dj's coke dealers have a way of mysteriously winning lots of prizes)
not PHP but Perl (so similar enough) was the first professional app i worked on. I worked for a dial-up ISP and wrote a program to control a bank of modems which randomly dialed up our different point of presence (POP) aka access numbers) and did various tasks like sending an email and loading websites and determined various statistics like speed/response times,and busy/wait times . this was combined with SNMP data to determine which POP locations were overtaxed and needed more capacity and which had underused capacity and also diagnosed connectivity problems and bandwidth problems at various POPs. it was a real fun project and lead to doing more stuff with modems. I would have done it so much differently these days
Are they using any type of framework? Symfony, Laravel, Silex, CodeIgniter, Yii, etc? Hopefully the are and I would be very surprised if they weren't. Once you find out - learn how to use it. This not an ideal path. Ideally you would learn concepts and built upon them over time developing a knowledge of the topic. But you ain't got time for that. If they are using Laravel - just go do the hello world tutorial for it. You'll at least get an idea of the structure of the code and you should start to see patterns. Also - see if they will let you get access to one of their recent project. Just to poke around the code. Okay. The following is super low-level and probably could be considered wrong. I'm assuming you would at least break up your functions into files? Based on functionality or maybe feature? Let's assume you had a bunch of methods that did FooBar (whatever the fuck that is). You would put your functions in a file probably named foobar.php, right? Now just wrap that shit in a class. class FooBar { public function methodName() { } public function methodSecondName($iAmAPassedVariable) { } } Whenever you needed that functionality you would $fooBar = new FooBar(); $fooBar-&gt;methodName(); $fooBar-&gt;methodSecondName('string variable'); Again, that is super super super basic. But, that is what your code is going to look like. A good place to start is probably [PHP The Right Way](https://www.phptherightway.com/). Not strictly OO but is all best practices and touches on many of the topics you'll see in OO.
A lot of courses are stolen and some of them from YouTube.
A local radio station were running a competition where they had three celebrities all say 1 word form a 3 word phrase. Every time someone phoned in they published the wrong and right guesses on their facebook page. I wrote a script that stored those values and ticked them off a list of possibilities based on several sources(from various sources 'whose who, imdb, etc). The idea is that over time people would narrow down by deductive reasoning who it was and this competition went on for about 7 months as the prize was £100k The last celebrity was some complete unknown with very references to them anywhere and they got in a bit of trouble for it. The script was fun but totally useless due to the sheer data set it was working with :D
for PHP I recommend Zend certified PHP engineer certification. Zend is the company that develops PHP. Udemy is probably certification for finishing the course on the other hand the Zend one is certification for your knowledge.
Since function names aren't case-sensitive, it's useless to use PascalCase or camcelCase.
nginx+php-fpm + a load balancer and ur set.
I stumbled across this package this week, and some of the sniffs it offers compliment the PSR-2 coding standard. Highlights include: * Enforcing use declarations are sorted ^(SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses) * Enforcing strict type declaration ^(SlevomatCodingStandard.TypeHints.DeclareStrictTypes) I was able to create a [coding standard](https://gitlab.128.io/adduc/php-coding-standards) using this repository without too much trouble.
It has little value (better than none), since the 'certification' is just a course completion (basically stating you watched videos). If there is an actual certification for a subject, it will be better to get that, since it 'tests' your knowledge.
Thanks for information :)
And some are just as bad an amatuer youtube tutorial series. Im doing a 31 hour course on Laravel which is frustrating becuase of watching the instructor waste a lot of time on video fixing problems caused by typos and general off topic chatter.
You can name it whatever you want, but the coding style guide has already stated that it must be in camelCase(). https://www.php-fig.org/psr/psr-1/ Not that it's required, but it makes your code more readable shall you need other programmers to work on it. Otherwise name it as you like.
Nice! I think it would be preferable, though of course not required, for the top-level "src" directory to contain only the source code, and a top-level "tests" directory to contain the tests, a la [pds/skeleton](https://github.com/php-pds/skeleton). (I was the lead on that PDS publication.)
Hey, thanks for extensive and detailed feedback. What do you mean by "pro-open-source"? &lt;blockquote&gt; I see two interpretations: "Sharing is virtuous, thus developers who share are the most virtuous." Which is an ok opinion. And "The most talented developers want to share." which is silly. Where would I find this global developer ranking? &lt;/blockquote&gt; Why is it silly? What do you need such ranking for? I see such pattern in PHP community, from artists ("Steal Like an Artists" book) and inventors ("Innovators" book). &lt;blockquote&gt; "Everyone is doing it" fallacy. &lt;/blockquote&gt; How would you rephrase it better? &lt;blockquote&gt; Is a false dilemma. Doctrine could also become irrelevant in the future. Maybe your business hired Einstein by chance. &lt;/blockquote&gt; I don't understand it. Could you explain bit more? &lt;blockquote&gt; Argues that honesty/openness improves communication/sales which I agree with. &lt;/blockquote&gt; Yes, exactly! &lt;blockquote&gt; The title doesn't match the arguments "adopting mature standards is good" and "We believe that by open-sourcing, the standards on the code increases substantially." &lt;/blockquote&gt; One goes alongside the other. How would you rephrase it to make it clear? 
I’m not sure if you’re trying to answer his question or not, but Laravels observers don’t know about the framework. They’re just plain objects that can be wired in.
Thanks! I'll check it out this weekend
Read good old books like "Head First Design Pattern" and "Clean Code" and you will be fine.
I'll check the generic papers then, I just kinda wanted the research to be in php or about php, since I'm looking for cool stuff to showcase on the local PHP meetup group, later this month, and I think papers are pretty cool
Coding standard say methods, but what about functions?
It says nothing about functions, which is why most formatters don't format functions under psr rulesets. Neither does the extended style guide in PSR-12. All that being said, modern PHP code shouldn't have many functions. Maybe a `debug` in dev mode only
Typically `methods`, `functions` and language constructs (`isset()`, `empty()`) are perceived to following the same code style (naming, argument spacing, etc.). But yes, both PSR1 and PSR2 (and draft PSR12) do not explicitly state this, so the style is either derived from another (like `functions` as `methods`) or through the given examples (also not 100% complete). In the end you do whatever you want though ;)
No, and that's unfortunate, because it also makes it very difficult to abstract your validation rules outside of certain areas of code, promoting, by and large, validation rules being written in controllers. If this is incorrect, please correct me. The nearest thing I could find was custom "Form Requests" which unfortunately then makes the validation logic less portable/re-usable in other scenarios and couples it to the concept of a request. In either case, the fact that the validators themselves seem to require runtime dependency information (the data to be validated) as well a configuration state information (the rules to validate against), is the root of the problem. Can you recommend how to make validators whose configuration state and runtime data are not coupled together? Is there a particular reason that $data is required on validator construction (even if using make() on the factory?) as opposed to simply using the setData() method? Or even better, passing in the data to be validated on the validate call itself, e.g. `validate($data)`? I have worked around this by creating a separate base class injected with the validator factory which can then get its rules from less coupled sources, and combines it with the data at runtime, but this is an extra step I suspect most people would not think to take and I question the long term maintainability of what appears the only two "laravel way" solutions. This to me just seems to promote bad practice which is made worse by the fact that Laravel attracts many new developers. If the argument is somehow that the way laravel does it is easier to use and that's why it can appeal to newer developers, I'd like to hear that argument, because I don't see what is particularly difficult about using a implementation where your $data/$rules are not simultaneously dependent by default and it has to be hacked around.
"existing, happening, or done at the same time." I think the intent of the meaning is pretty clear here Requests per second could mean very very different loads on the server, depending how long those requests tend to run for. Concurrent requests is a much more direct correlation to actual load. 
Hi! I share opinion about "outdated" code. I expected see something lke [this](https://github.com/RalfEggert/zend-expressive-tutorial/blob/part1/public/index.php) in your index file. And I want help you with my advices: \- files "cn.php", "cn.php", "cn.php" is resources, but file "lang\_config" contain business logic (swith languages). I think this file should be in another place/ \- "?&gt;" in the end of file is "bad practice" \- in 2018 developers use implementations of [https://www.php-fig.org/psr/psr-7/](https://www.php-fig.org/psr/psr-7/) istead of global variables like $\_SESSION,$\_GET \- require\_once $\_SESSION\['lang'\]. '.php'; - You not check existing this file. Learn more about "defensive programming" \-In 2018 (in general) we not use "require" or "include". We use autoloading, PSR-4 and composer. Each file has Name equals Class name. \- $query .= " WHERE $where"; - All this statements is not secure. Learn more about SQL injection, You can you Abstraction over databse \- define('LOCALHOST', 'localhost'); - Also "bad practise". Easiest way for you is defining this in "config.php" file. Next level is ENV variables. \- execute database queries in templates - bad practise. You should send in your templates data from controller. ... Continue studuing and good luck!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [RalfEggert/zend-expressive-tutorial/.../**index.php** (part1 → ae9b363)](https://github.com/RalfEggert/zend-expressive-tutorial/blob/ae9b3631a0274dc74797815aa41c12bcb3b118ef/public/index.php) ---- 
just a little hint, you can have both these items fixed safely by https://github.com/FriendsOfPHP/PHP-CS-Fixer , saving you the time to go over the violations and fix those by hand :)
Thank You So Much **@Fantyk** for such a great and descriptive suggestions. From Now on I'll follow the good practices. And, I feel great for posting my project here, getting to know a lot of new good things.
I find the lack of non capitalized class names triggering.. what have I become.
PHP is my default "goto" language. I was drunk. And it would be fun to say that I have made a DNS-server in PHP. So no good reason. And no, I did not continue on it. Just made some parsers from wireshark dumps.
Someone who respects PSR-2, that's who.
I used to maintain the log4php for a few years some time ago. You could easily get accepted onto the project at Apache if you'd be interested to work on it there.
“My website will be a blog” While everyone here is right that you can easily handle the traffic with a pretty basic setup what you use for blogging will make a big difference. WordPress with a bunch of plugins will get slow and require more resources. Build your blog, profile memory and average CPU use, multiply by non-asset traffic.
I second this. In 15 years of building and maintaining web-projects, the bottleneck was the database in 99% of all projects. You need to be smart what you and how you cache. Keep in mind your blog will most certainly do all the work of the request-response cycle including the rendering of the page. Although I know it is possible for nginx and php to handle the mentioned amount of requests per second, it will highly depend on the blog-software. Before you scale vertically (increse server power) I had some good experiences with scaling nginx/php docker containers first horizontally (more containers on the dame machine to balance requests across the requests) before scaling to multplie instances (swarm). To get back to the bottleneck: avoid deep/long queries, especially for highly visited endpoints. I learned this the hard way when I deployed a plattform for an NGO and the site was discussed in a live TV show. That was the day I learned to NEVER have ANY query to the DB on a landingpage... 
At a few thousand requests per second the consideration should be the language you know and are comfortable with and nothing else. 5k requests per second is ~1.3 billion monthly requests, which is a very large site. However for a blog style site it's not really that heavy or complex of usage. The language is not going to be the limiter.
Relevant code: &gt;$buffer = $session-&gt;walk &gt; &gt;("iso.3.6.1.4.1.3902.1012.3.28.1.1.2"); &gt; &gt;print\_r($buffer); echo "&lt;br&gt; NAME: $name &lt;br&gt;"; &gt; &gt; &gt; &gt;$keys = array\_keys($buffer, "$name"); &gt; &gt;echo "KEYS:"; print\_r($keys); echo "&lt;br&gt;"; I'm expecting $keys to be an array containing the OID, but it returns an empty array. The weird part is this was working before. Output: &gt;Array ( \[iso.3.6.1.4.1.3902.1012.3.28.1.1.2.268501248.1\] =&gt; STRING: "Test1" \[iso.3.6.1.4.1.3902.1012.3.28.1.1.2.268501248.2\] =&gt; STRING: "Test2" \[iso.3.6.1.4.1.3902.1012.3.28.1.1.2.268501248.3\] =&gt; STRING: "Test3" ) NAME: Test1 KEYS:Array ( )
If 1k RPS are actually hitting PHP and not just static resources, you may need to do a bit of tuning - but there's a tremendous number of variables to take into account. If most of those are static resources, nginx will chug along no problem. As a rough starting point: - Make sure opcache is installed and enabled. Set `opcache.revalidate_freq=0` and `opcache.validate_timestamps=0` in your php.ini. [More info](https://www.scalingphpbook.com/blog/2014/02/14/best-zend-opcache-settings.html) - Be prepared to fiddle with FPM worker config. The general rule seems to be that you want to estimate how much memory a worker uses (grab this out of `top` or whatever), and set `pm.max_children` such that you'll use most of the RAM on the server - Caching queries will probably be a thing, but that's very application-specific so it's hard to give general advice
I don't really know what your code is doing, but maybe by adding `"$name"` you are restricting the output? Try without the extra speech marks
try $keys = array\_keys($buffer, $name); 
Hahhahaa
I don't consider it the recommended framework at all.
PHPCBF (provided wtihin the PHPCS package) works similarly. Personally, I prefer to view and correct the violations by hand; I've had multiple instances of both tools breaking code after running. 
That's how the code was originally and is again. The quotes were a test. Same output either way.
That's how the code was originally and is again. The quotes were a test. Same output either way.
I'd expect array\_keys() would find the value "Test1" in the first entry and return an array with: Array(\[0\] =&gt; STRING: "iso.3.6.1.....2"). The function this is in searches for an ONU by name, I'm trying to get the last two integers: "268501248" and "1".
Ah, the second parameter of `array_keys()` only search the array key, not the value. I would probably filter the array first (by finding $name,) and then use array_keys() after.
it's about standard so all projects will follow one format
The problem was that it was searching for 'Test1' when the actually value was 'STRING: "Test1"'. `$session-&gt;valueretrieval = SNMP_VALUE_PLAIN;` I put \^\^ before the snmpwalk so that the values in the array left off the "STRING: ". Thanks!!
If you wanna learn laravel just watch laracasts. It's miles ahead of anything else.
Well I already had a Udemy account and was grabbing other stuff while I was at it... I'm almost done with it. It's informative, but just frustrating.
So you have no clue as well.
You might want to consider using a scaling platform such as Kubernetes to handle this. Even if you find that a single node behind a load balance service is good enough, if you gain more users in the future you can very easily add another node and scale your application across it.
If it's a blog, you have a very read-heavy workload. Just put Nginx + memcached in front of it and you can reduce the number of hits that need to be served by PHP to near zero. 
i don't agree that cameCaseMakesCodeMoreReadble maybe you_can_read_this_more_easily ? 
I'm glad Laravel lured you back. I think it is a fine framework though, as this thread, and hundreds (perhaps thousands) of other discussions indicate, not everyone is convinced that Laravel has always made the correct design choices. If I had to pick the one factor in the last 10 years or so which truly energized the php development community, I would pick composer. Of course composer was largely derived from node's npm. And of course composer got a huge boost by Symfony's early adoption of it.
+1 didn't know that :) reviewing what fixer tools have done is always a good idea indeed!
There are a lot of videos which will help you. Unfortunately I am not follow english resources. This videos I recently catch. [https://www.youtube.com/watch?v=v1I57-\_Rsv0&amp;list=PLPcgQFk9n9y-iZ0Ez\_r9xYzQtT0iJ\_MxA&amp;index=1](https://www.youtube.com/watch?v=v1I57-_Rsv0&amp;list=PLPcgQFk9n9y-iZ0Ez_r9xYzQtT0iJ_MxA&amp;index=1) [https://www.youtube.com/watch?v=pz6VdH4\_BSg&amp;index=13&amp;list=PLPcgQFk9n9y-iZ0Ez\_r9xYzQtT0iJ\_MxA](https://www.youtube.com/watch?v=pz6VdH4_BSg&amp;index=13&amp;list=PLPcgQFk9n9y-iZ0Ez_r9xYzQtT0iJ_MxA)
He was bitten by a Fig wasp and became PSR2man
No. 
probably a stock trading backtester. not a bad idea but weird because such tools exist already
[https://github.com/xobotyi/basen](https://github.com/xobotyi/basen) BaseN is a simple library which gives you ability to encode arbitrary data with any alphabet you want. It implements three algorithms of encoding: \- the basic binary-to-text encoding, for cases when alphabet length (which is corresponding to radix) is a power of two (2\^n) \- rough peer-byte encoding for other cases \- integers encoding if you need to encode them as numbers Theoretically algorithm supports Base256 (alphabets with length up to 256 symbols) Library provides builtin encoders for most popular encodings with most popular alphabets (Base16, Base32, Base36, Base58, Base62, Base64)
It’s better than nothing but not a substitute for university education. That being said, when I interview candidates I really don’t care where they learned their skills. I’d say it is possible to get a job, but would have to find an employer who doesn’t care about it so it’s gonna be more difficult but not impossible. 
 BaseN is a simple library which gives you ability to encode arbitrary data with any alphabet you want. It implements three algorithms of encoding: \- the basic binary-to-text encoding, for cases when alphabet length (which is corresponding to radix) is a power of two (2\^n) \- rough peer-byte encoding for other cases \- integers encoding if you need to encode them as numbers Theoretically algorithm supports Base256 (alphabets with length up to 256 symbols) Library provides builtin encoders for most popular encodings with most popular alphabets (Base16, Base32, Base36, Base58, Base62, Base64)
It took a month :D I've updated the docs, made a functions index in readme and descriprion in phpDOC blocks in code
form.html &lt;form action="somephpfile.php" method="post"&gt; &lt;input name="somefieldname" value="hey!"&gt; &lt;input type="submit"&gt; &lt;/form&gt; somephpfile.php &lt;?php echo $_POST['somefieldname'];
While you could execute a POST request in php I think what you are asking is how to process a POST request in php. The request is made by the browser and then in php you process the results. Most often a post request is initiated when a user submits a form that has the request method set to post &lt;form id="some_form_id" action="/php/script/thatwill/process/this/request" method="post"&gt; &lt;input id="some_form_field" type="text" /&gt; &lt;input type="submit" value="Submit"&gt; &lt;/form&gt; When this form is submitted by the browser there will be an array element in the $_POST array for each form input. So $_POST['some_form_field'] will contain the data that the user typed into the browser for that form field. 
If you're having trouble building your own optimized stack, try services like moss.sh or runcloud.io Secondly, get a CDN.
For blogs that can benefit caching really really hard, invest some time to learn varnish, and use varnish. Varnish is a caching server that can cache the whole response as html from backend which in your case give you the best result. 
Let's just say that you don't want a job that hires you solely from a certificate like this.
God, I hate this with video tutorials! Just learn video editing and produce something that's worth watching. You don't get this with any other educational videos. How comes every coding video is just some guy with a screen recorder and a microphone?
&gt;do not align array keys I beg to differ but only because I think the good old adage, that code changes and formatting changes should go into different commits, pertains to exactly this problem. Yes you can have your cake and eat it too but it will cost you an extra commit.
# ...and downvotes are for comments that don't add anything to the discussion!!! ^(Fuck off)
Yeah, video tutorials for coding doesn't make a lot of sense to me. Unfortunately I think the cool kids think it's the way it should be done...
You don’t know where or when this happened so you don’t know what legislation applied.
I think they could make some sense if they were done well. I mean their concepts that would work better visually and coding along with someone could have benefits. The issue is that it's always just some guy doing something and talking about it. I mean I watched one where the guy doing the tutorial actually started talking about his sister's boyfriend while doing the videos. ----------------------- If they took more inspiration from the likes of CGP Grey or Crash Course. With obviously showing the coding examples then I think they could be really useful but unfortunately, I haven't seen one yet that does. 
Yeah making simple things more complex: psr
How fast is it compare to the old one / monolog? 
Wouldn't this being a concept rfc for php? Also in terms of security i can imagine that you want to define in the class which classes are allowed to instantiate this class; Perhaps useBy Classname Also for security reasons i can think of this...
There are tons of things you can do to scale, it just depends what time or money you want to spend on it. There's a lot of good info on setting up load balancing on digital ocean. Depending on how dynamic your blog is, you might be able to use varnish with minimal effort. You can use a CDN, that will reduce the requests to your server. Use redis for sessions, file system sessions are slow. Memcached is also great but it doesn't have the persistence options of redis, meaning you'll lose sessions when memcached crashes, server reboots, etc. It's always a good thing to stay away from the filesystem, upload and serve images from Amazon S3 or Digital Ocean spaces, it'll save you from headaches when you need to scale to multiple servers. On your blog, you'll want to optimize queries, add indexes and cache where needed. Run your code through blackfire to spot possible bottlenecks on pages with high traffic and use new relic to track them down on production. You'll probably not need it but you can use a job queue to do tasks in the background, like sending mails, ideally on a different server to keep the load off the server that's serving requests. If you're not using a CDN (but still good in combination with it), limit asset requests by combining stylesheets and scripts and/or use HTTP/2. Lazy loading images, may potentially save loads of request and guaranteed a faster loading speed. Leverage browser cache, if you're doing things like cropping pictures and forgetting to add cache control headers, it can make a huge difference in the amount of traffic you can handle. It always a good idea to follow recommendations from tools such as Google pagespeed, pingdom tools, etc That's all I can think of right now, scaling is done on multiple levels, it isn't limited to Nginx config files. The order of things to implement is up to you, you'll have to weigh the costs vs gains. 
burn! But camel case is readable enough for me, and requires less typing.
&gt; What do you mean by "pro-open-source"? I mean I prefer open source licenses, software, etc. &gt; Why is it silly? What do you need such ranking for? I see such pattern in PHP community, from artists ("Steal Like an Artists" book) and inventors ("Innovators" book). I you claim the best runner is Usain Bolt you point to data like: https://en.wikipedia.org/wiki/100_metres#All-time_top_25_men How do you know the best developers aren't working in secret for Americas NSA/FBI (etc, or other countries equivalent.) &gt; How would you rephrase it better? I wouldn't, it isn't a valid argument at all. &gt; I don't understand it. Could you explain bit more? You present two options. A bad closed-source developer, and a good open-source one. But there exist bad open-source developers, and good closed-source developers too. &gt; One goes alongside the other. How would you rephrase it to make it clear? Doesn't matter. Title implies that making code open-source somehow makes it more mature, but the points made are fine.
&gt; Programmers should know their tools and they should know better. This way of thinking is very bad design assumption for building secure framework/whatever. One should design for who people are, not for who they should be. Even those who spent 4-6 years at the university do make mistakes, have limited knowledge and limited time. That's why knowledge and good tools gives better results than knowledge and bad tools. &gt; It's up to them to secure their applications. That article suggests that Laravel makes my applications more secure by default not that it's up to me to make my applications secure. ;-) 
If it’s a blog with static content, you can solve scaling issues with one simple step: enable caching. This will take the load off PHP by serving your pages as static files. If you use nginx, just [enable the FastCGI cache](https://deliciousbrains.com/hosting-wordpress-yourself-server-monitoring-caching/). If you use Apache, you can put nginx in front of it, acting as a reverse proxy. If you want more control Varnish is always a choice.
&gt;It's fast. I don't have any benchmarks in front of me to show but I think I'm not very wrong If I say that PHP is faster than Python and Ruby. Being faster than Python and Ruby does not equate to being fast, reality is PHP is still relatively slow, it is not even the fastest scripting language, let alone when you compare it to compiled languages. Furthermore in practice, at least if you take the typical way apps are set up, then Python for example is faster than PHP, simply because PHP boots the app each request, Python holds a copy of the app in each worker thread of a WGSI server, which is why if you look at https://www.techempower.com/benchmarks/#section=data-r16&amp;hw=ph&amp;test=fortune&amp;l=hr9y4f&amp;o=4&amp;f=zhb2t3-yy9kvz-zik0zj-zik0vz-zik0zj-zik0zj-zik0zj-4zsov , you'll see Django/Flask generally outperform Laravel, Cake, etc. 
I do mine camelCase, which is how I was taught in java and rails and Laravel, although when I was a WP developer I did snakecase. It depends on the code base, I think most devs use camelCase
you get why that was a stupid comment right? Like this isn't obvious to you?
True. I learned these laws after an incident involving a non-paying client and backdoors. I'll say no more. I'll not cross that line.
Let's make this clear: you don't need a certificate for doing PHP. I've been a PHP developer for 13 years and nobody who has employed me has asked me for a certificate. Now, being truthful, having any kind of certificate of any kind will give you some points, it's not enough to grant you a job. Demostrable knowledge is all it matters. I've interviewed developers with excellent certificates, but failed basic and practical knowledge. My suggestion is to do as much tutorials and practice as you can on PHP, MySQL, HTML and JavaScript as you can. DevOps is a plus. Being comfortable with SSH in a server to fix stuff is also a plus. At least here in Germany, what matters the most, is logical and practical thinking. This is something you'll learn by practicing, no certificate will teach you this.
i see your snake_case and `throw new MongooseAtIt();`
&gt;DI Psr can be implemented but the autoloader is capable of psr-4 i think. the way i am dealing with session, request, file, cookie, data is in my opinion better then the others . I am just starting it up, and will continue to progress on it for another 2 years or so at least (I am building a Gui with it, and i find it comfortable to program with). and then i will slowly start to add doc comment to it. But i will try to do that from a documentation side off it. About the components, do you mean the Parser ? i am just testing functions and they do exactly what they should do in my opinion, but i am open for yours... I think most of linux programs will use json files or similar like yaml files (converter) can be used with my approach in json. You can combine multiple json files in one with my approach, make selections and write the output to disk somewhere and restart the application / service. You can even have them parsed with your own made custom functions. About the source. As a person (not commercial) you are allowed to use it. So you can start customizing your linux instances with it, and save the config files somewhere... but That's more then a framework... As a company you should pay for it... Which i think is reasonable
I'd be 'OK' with it, if it was free. Since I paid for it, I'm kind of pissed.
5k requests per second is a lot. And by à lot I mean à shit ton. You're asking really the wrong question here tbh. 
Actually, yes you would. 
Certificates are worth nothing. Knowledge and experience do. Keep learning and improving 👍
Thanks for your valuable information :)
Thanks for info :) 
I have converted existing roles to fully remote, but almost never do I stumble upon fully remote work from the get go (in London). Advice: force yourself to come out of your house every day. You'll end up feral and looking like a cromagnon in no time otherwise. 
they have a own company framework. they will teach me after the learning oop thanks
No I want to run a php function that will do a post request
My gut and foresight tells me that if node continues to be imposed, I will eventually switch from php to python/ruby whatever is necessary.
I learned a lot from Laracast. Great videos.
Once again, Thank You So Much **@Fantyk.** This means a lot to me.
Indeed, the charges were vacated sometime later, on the argument that there was no actual breach of security involved, it was all publicly displayed data on a web site. Took a while though...
Yeah, 5000/s is 432 million/day. That is massive. OP might mean 5000 concurrent visitors on the site rather than requests per second. 
Will it get you a job? No Might it get you an interview, where if beforehand you focus and practice really hard, study modern PHP and interview questions? Yes.
Unless I misunderstand your question, couldn't you just write some normal PHP to separate the run-time requirements? Something like this: &lt;?php namespace App\Validation; class SomeValidationFactory { public function make($data) { return validator($data, ['something' =&gt; 'required']); } } Then, let the container inject that to anything you need.
What do you mean? I don't like Node myself, but I can see how it can be tempting to developers, expecially frontend devs who already know some JS. - I stick to PHP because that's what I know in depth, and it's easier for me to add caching, parallel and/or async queues (pthreads and AMPHP/ReactPHP) and I don't have the time to learn other languages. - Some time ago i really wanted to dive in something like GOLang or Crystal, but now I can't see the benefits, the time investment is too much for me and since i stick to PHP I learnt know how to do the heavy load stuff with it. 
The certificate itself probably won't help you - but knowledge and experience you gain from earning it might help you. I am both a developer and manager in the U.S., so I can tell you a little about the market here. People who have the Zend certificate tell me that they may get a few cold calls from recruiters per year by being on the registry, but they get many times more than that from LinkedIn. Out of hundreds of candidates I have interviewed, I think only one or two had the Zend cert and we ended up not hiring them. For most companies I have interviewed with in the past follow a similar pattern to my company... we look for a variety of experience. Not just PHP, but MySQL administration, Ubuntu, AWS, Docker, JavaScript, CSS, Node, Ruby, Python, Git, Adobe suite, etc. You don't need all of them, but having some functional experience with several is usually common. During interviews, most companies will have some trivia questions just to make sure you know the basics. They will usually want to talk about some of the projects you have worked on - it really helps if you have a personal project you can show. Most companies will have a small demo assignment for serious candidates - do your absolute best, highest quality work on this assignment... beautiful code, comments, documentation, HTML compliant, secure - no matter how simple the project is. Candidates we most want to hire are contributors to the Open Source community. They usually have packages or products they have produced and published. I can see their work on GitHub. Sometimes we meet them at Hackathons and see them in action. There are very few of these developers out there and they are exceptionally rare to hire. Make sure you understand SQL injection and Cross Site Scripting (XSS) attacks. These are a serious problem in our industry. 80% of candidates we interview do not understand them. 50% of projects returned have one or both vulnerabilities. Most of the developers I know do not have formal computer science educations - almost all of them learned PHP from self-study, like you! Enjoy learning, ask questions, get to know other developers. Best of luck in your new career!
Yeah, at 5k/sec I would just slap a few ads on it, hire an 50-person engineering team, and let them worry about optimizing.
Speaking as someone who works on a project that gets 5k RPS... you'll need a load balancer and a lot more than a DO VPS. We have 25 servers handling that many RPS.
Wasn't supposed to be a comment, but couldn't write a body for the post.
I've done freelancing but working from home is horrifying after a little while. You start to hate your home. 
You seem to miss the point. There was no `user_id` field in the github form, but rails took the whole request and mapped it to the entity. Because it was poorly designed from a security perspective. You also talk about your opinion on the secure by default approach. I may or may not agree with it, but that doesnt change the fact that artucle isnt describing a secure by default framework (as mentioned in other threads, it does it poorly and probably not reflecting the reality)
I've been freelancing for two years several years ago and just started again. I've also been working remotly half of my 12 years carreer. Freelancing can be hard or easy depending on what you want to do, your motivation, the size of your network... As for remote work, some people have no trouble working from home but for most it will be very hard on the long run (not seeing people, not being able to focus) and coworking space are the best of both worlds. "Remote: office not required" is a good read if you're interested !
I have done it for a year now, to be honest I got quite lazy and basically worked like under 100hr a month sometimes, but other times I would work like 12hours every day, and I enjoyed it, coz you know " you are your own boss etc". But I had more work than I could handle and I still do, can't say I am full time employed right now as well, I'm helping a company I know from my intern times building one module for an GIS webservice. Best thing is to build relations with your customers so you get work from them later ( always I up my price a little bit then aswell, because you have already proven yourself ). Most of my work I have gotten from local forums, facebook and ofcourse mouth to mouth. I'm not by any means a pro, but I hope I am one in few years. Good luck and be motivated, start your days early, do some exercise. I had my own schedule written down, but I hardly follow it lol. And it can get frustrating sometimes, because there is no stability etc.
I have been working as a remote-contractor since 1.5 years. I would say so far so good. The challenging (and I have started disliking it) thing is the timezone difference. I am 12.5 hours ahead of my employer. So I have to work till late night. I am planning to change my employer and have someone with less time difference. ------ I think the feeling of "being stuck at home" depends on the person. I seldom felt that. If I feel that way, then I take breaks, or talk to a friend. I try not to sit and work continuously for 3-4 hours. And I personally like to work alone - I can't concentrate if someone is talking loudly beside me, or having a laugh.
Here where I live a certificate will not get you a job, but having one gives you position to ask for a raise etc.
I do right now, not freelance work, but a remote job. It's good, since I don't really have to show up at work, so cutting out commute time and the likes from the day is always a nice thing and leaves me some time to sleep more or do other things. Only downside really has been the issues with communication that I did not have with my previous coworkers at a physical location, but then again I think that's just the nature of mostly text-based messaging rather than being in person.
Anyone who is close to getting that kind of traffic has far more specific questions to ask.
Depends who you are. I’ve worked either totally or partially remote for the last seven years and now I hate going to offices.
In that case, look for the curl library.
First, 1000-5000 concurrent requests of "real" users is insanely high, where did you get this number from? Did you include static assets? Don't, because you can use a CDN for them. Backend traffic is the only thing that really has no simple solution when thinking about this scale. *But* just a handful of our largest customers we monitor come even close to reach this number. if you are really starting out just stop thinking about this scale unless you have proof that you reach this within the next 6-12 months. On topic, it depends on how long your average, 95% and 99,999% latency looks like and if the site can be full page cached. Lets say requests of your platform takes 1 second and you have no caching (everything hits PHP), then for 1000 concurrent requests you need a PHP FPM with 1000 concurrent connections (pm = static, pm.max_children=1000). If one PHP request uses on average 100 MB memory that means you need ~100GB RAM for the PHP memory limit, but then you would have no buffer when sometihng goes wrong, so lets say 150GB memory. So you need to be fast and low memory using to get this scale at affordable hardware. If you want to use Magento (or any other off-the-shelf ecommerce shop) for this ecommerce shop for example? No chance you reach this without an extremely high bill for hardware. Example: Our site processes about 13000 real PHP requests every minute, at 39ms 99% response time and ~20 mb memory this requires 3 application servers with 12 vCores and 12GB RAM to have enough wiggle room to avoid high load on the machines even when one of them goes down. However we only have a combined PHP-FPM static pool size of 300, which given the request durations is reasonable (maybe a bit too low considering we haven't changed it for a few months). If full page caching with Varnish comes into play everything gets simpler if you reach a high cache rate. This then again depends on architecture of the site and is not easy to estimate anymore.
A decade+ for me and love it.
Ho nice! Is it cool?
Consider moving to a nicer house.
(This video course)[https://laracasts.com/series/php-for-beginners] by Jeffrey Way helped me immensely. He's kinda hasty from time to time and you have to pause and rewatch some parts, but it's a little treasure to me.
Many thanks!
[https://www.tutorialrepublic.com/php-tutorial/](https://www.tutorialrepublic.com/php-tutorial/)
Thanks!
https://www.phptherightway.com/
The organisation i currently work for does value certification a lot. Even tho i currently have none and still have a job. I don't value certification as for example all w3c certification answers can be found online, so it's easy to get a perfect score without any knownledge.
This tutorial makes a very depressing feeling. Although there is nothing critically wrong in it, it makes a reader essentially a last-century-style php-tinkerer, who diligently writes his code by means of monotonous copying several basic fragments, without any *programming* in the modern sense, when a program is not just a list of consequent instructions but something more intelligent. According to the author, a program stands for a pile of duplicated code fragments - so most PHP users think up to this day. And that's a disheartening sight. 
I like to use snake_case for global functions (like most of the built-in php functions) and camelCase for class methods. Still, I don't know what is the best practice here but I think the most important thing is consistency throughout the code
&gt;Laracast Thank you so musch &amp; i am studying computer also (intermediate p2) as well as PHP , but i don't like computer science studies because this is dump course, there is no any programming language in my course, only introduction to C language.
This is a good point, there's definitely an advantage of having a very predictable project structure.
It would be the right thing to do, but I am quite scared of getting into any political stuff. Not sure if my worries here are warranted or not. In any case what would be the process?
I would be very surprised if it were noticeably faster or slower than the old version.
Colt Steele web dev boot camp on udemy. Complete his courses and you can def get job
From what I have gathered, PHP creators are not interested in knowing what I'm doing with the language. JS pushers has mostly been google and they have a history of being nosy/stalkish behavior. Both of these behaviors I do not wish on my server so it helps to be a skeptic and stick with i.e. PHP.
What data exactly?
Tempting to Mark a class as internal/private can be a code smell. You either have too tight coupling with other classes. One point of using OOP is to make it extensible. Just define an interface that defined the contract. Any class that implements it should be good enough for the other classes that expects an object of the said class. Of instantiating a class with `__constrict` is a problem, just mark it private. The example used in the article isn't that compelling. 
Just a tldr question if i put a “timed” backdoor that calls back if i’ve been payed or not self shutdown, am i safe?
https://www.cookiebot.com/en/google-tag-manager-gdpr/ stuff like that...
Can I come work for you? Wish more employers had this mindset. 
Could you please elaborate? How do this help with landing a remote job?
You can also use phpcs to generate a diff instead, then use an interactive patch tool (or simply edit the diff before patching). This will let you review first and choose not to apply any diffs that mess up your style. https://github.com/squizlabs/PHP_CodeSniffer/wiki/Fixing-Errors-Automatically 
Only because I also develop in it, its offially called "Go", but if you're googling it then "golang" helps for finding relevant articles. (Really not trying to be an ass just thought I would let you know 😀)
Yeah that's the reason i always say GOLang, because it's unmistakable that way! Thanks for the heads up though :)
I’ve been freelancing since 2007 (with an interruption of being a full time employee for 2 years). Out of that, I have been working remotely for more than 3 years, out of which about 2.5 years were across 6 time zones. It has been great, and I absolutely ❤️ working both as a freelancer and remotely. I cannot see myself going back to work in an office if I can avoid it. I can highly recommend taking a look at [Remote: Office Not Required](https://basecamp.com/books/remote) by [David Heinemeier Hansson](https://twitter.com/dhh) and [Jason Fried](https://twitter.com/jasonfried) of [Basecamp](https://basecamp.com). 
I prefer intellephense, but that looks like a solid list otherwise.
Just an idea, please correct me if there's something I'm missing. If a Cell depends on a Worksheet in order to make sense, why not just pass the Worksheet (context) to the Cell when you're instantiating it? Then it could just register itself, and users wouldn't be able create meaningless orphan cells. I suspect I'm missing something, because I really don't see the need for any abstract or anonymous classes in this use case.
I didn't have problems with politics, but I was pretty much the only person working on the project. I did have a problem with red tape, the release process is meant for projects with several maintainers. Accepting contributions is also not as simple as it could be. What you do get from Apache is a solid existing user base. There's still a lot of people using log4php. If you're interested, the first step is to subscribe to the [dev@logging.apache.org mailing list](https://logging.apache.org/mailing-lists.html) and introduce yourself. I think there's no-one working on log4php at the moment, but there are people working on [other logging projects](https://logging.apache.org/) and they will help to get you on the right track. You will first need to fill in and file an [ICLA](https://www.apache.org/licenses/icla.pdf) which is needed before you can contribute any code, and move on from there. Finally, if you decide not to join Apache, I believe you're free to use the log4php name as long as you don't call it "Apache log4php". Oh, and there's a branch where I did some work to move log4php over to namespaces, but never finished. You can dig around if interested. https://github.com/apache/logging-log4php/tree/v3
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apache/logging-log4php/.../**f3106b9adbb89064a15985755dbbbf29ee99dbce** (v3 → f3106b9)](https://github.com/apache/logging-log4php/tree/f3106b9adbb89064a15985755dbbbf29ee99dbce) ---- 
&gt; How do you know the best developers aren't working in secret for Americas NSA/FBI (etc, or other countries equivalent.) I get it now. That's rather philosophical question, but if we get to info I have, it's these books I mentioned and personal experience with over 30 companies and 150 developers from Czech Republic and the best ones I've met work with open-source projects. I never met a great programmer who worked just on 1 private project. &gt; I wouldn't, it isn't a valid argument at all. Without reasoning such "not true" comments have no value to the discussion.
I'd recommend you installing [Better PHPUnit](https://github.com/calebporzio/better-phpunit) which makes writing Unit tests much more comfortable because you can easily just test the current test function with the hit of a shortcut. It also allows you to run the last test from another file by hitting another keyboard shortcut. Makes writing tests a breeze. Found it in Laracast's free (I think) series [Visual Studio Code for PHP Developers](https://laracasts.com/series/visual-studio-code-for-php-developers) And I also found Intellephense to be more reliable. But every solution is far from perfect, I fear. And also the [VSCode PHP Debug](https://github.com/felixfbecker/vscode-php-debug) extension is worth mentioning. Once you have the stuff up and running and can live with the fact that value inspection only works one level deep in the debug console or the watches list, it's a must have if you don't want to debug your code with `var_dump`s and `print_r`s.
Interesting list. Saving for later reference. I've spent a lot of time setting up my HTML/SASS/JS environment, but I've done little for PHP other than get php-cs-fixer to just friggin work. This will definitely come in handy. Cheers !
Put your source in `src/`, organize it inside one top-level namespace like `App`, tell composer's autoloader where to find that namespace: { "autoload": { "psr-4": {"App\\": "src/"} } }
PHPCS comes packaged with PHPCBF which will fix the style guide violations detected. Is there a reason you use `friendsofphp/php-cs-fixer` over that?
Have you seen [Basic Usage: Autoloading](https://getcomposer.org/doc/01-basic-usage.md#autoloading)?
I just used Intellephense and like it a lot. Just giving Felix Becker's extension another try and will update my list if I chose my favorite ;)
Didn't know that lol. Thanks, will definitely try it out!
Here’s some CC: Make your config have language specific settings. For example you mention JavaScript and NPM. Why not make it support both languages?
Thanks buddy
Can u send me that schelude 
Thanks
I've switched to VS Code recently and really like it, more than my stand-by editor (Eclipse). I was stuck on Eclipse for a long time because it has good support for all of the languages I use. JetBrains doesn't (their C editor is a separate product completely, and the extensions for their IDEA line like PHPStorm for C language are broken). I haven't tried to see yet if VS Code will replace some niche IDEs I use as I haven't had a need on my current project. It would be nice if it can replace Qt Designer (has a GUI designer for Qt widgets), Android Studio (for the Android SDK), and XCode (I think the only editor that works for iOS SDK). I prefer the `"Default High Contrast"` theme. In the VS Code preferences, I set "editor.fontSize" to 16 as it's easier for me to see. I set `"workbench.editor.enablePreview"` to false so that the editor opens files I click on in the explorer in a new tab instead of previewing them in the current tab. To get code formatters that support the option to automatically do it on paste and save (e.g. prettier) I set `"editor.formatOnPaste"` and `"editor.formatOnSave"`to true. I don't like how VS Code wraps long HTML lines, so I set `"html.format.wrapLineLength"` to `0`. I set the file associations like this in preferences so it detects the correct file type for extension-less (mostly config) files: "files.associations": { "*.rdfa": "html", ".babelrc": "json", ".prettierrc": "json", ".gitignore": "ini", ".gitattributes": "ini", ".stylelintignore": "ini", ".flowconfig": "ini", ".prettierignore": "ini", ".editorconfig": "ini" } I also add the following VS Code general purpose extensions (I also use some extensions targeted to whatever framework I'm using, like React): * [vscode-eslint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint), and integrate eslint with prettier so prettier follows my linting rules ("prettier.eslintIntegration": true) * [XML Tools](https://marketplace.visualstudio.com/items?itemName=DotJoshJohnson.xml) for handling XML, including XQuery * [Auto Close Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag) to automatically close HTML and JSX (React) tags * [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag) this automatically renames the matching HTML or JSX tag if you change one, so you only have to change a `&lt;div&gt;` to a `&lt;h1&gt;` in one place for example * SQL tools for whatever database engine I'm working on * [Auto Import](https://marketplace.visualstudio.com/items?itemName=NuclleaR.vscode-extension-auto-import) for code completion on imported libraries. I use a fork of the original to get JSX support also. * [NPM Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense) similar to Auto Import for NPM modules * [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker), handles camel-case as separate words * [Color Highlight](https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight) to show a color swatch when you hover the mouse over a hex color code * [Document This](https://marketplace.visualstudio.com/items?itemName=joelday.docthis) similar to PHPDoc, generate JSDoc blocks * [Indenticator](https://marketplace.visualstudio.com/items?itemName=SirTori.indenticator) This is an indentation level highlighter so you can see how deep you are * [markdownlint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint) linting for markdown files, nice for README.md files * [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense) to autocomplete file paths from your local file system * [Peep](https://marketplace.visualstudio.com/items?itemName=nwallace.peep) lets you hide files and directories (like `build` or `node_modules`) by listing them in your .vsconfig/settings.json * [Rainbow Brackets](https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets) will highlight nested sets of parantheses or brackets with different colors, makes it easy to see opening and closing sets * [TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight) to use a different background color on `@TODO`, making them easy to find and stand out I set up Intellisense support for static typing (Flow and Typescript). I also make sure I have my CSS precompiler (SASS for me) installed; VS Code has built-in support for SASS and LESS. I know people like to use the console inside their IDE, and use Git extensions like [Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory) and [Git Lens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens). I much prefer using [Yakuake](https://github.com/KDE/yakuake) as an external console. You can script how it starts up (so for example you can have tabs open in the directory you want, or start up a web server), and lets you use multiple console sessions at once via tabs like a browser. It slides in and out of your screen with a key you tie it to (F12 by default), so it's easy to access. Consoles in IDEs always end up at the bottom of the screen which make them hard to interact with for me (I expect notification information that low) or on the side which steals screen space. For Git, I'm completely sold on [GitKraken](https://www.gitkraken.com/). It's free and has a paid version, and is an Electron app. I had trouble with so many Electron apps until I upgraded to 32 gb of RAM, but now I don't notice it. I use Git on the command line often and am comfortable with it, but the branch visualization in GitKraken is awesome. 
just saying, but this photo makes it seem like you’re happy ‘cause she’s doing the coding. 😆 
Example with html: I've been working in .html Django templates and had to keep manually disabling `formatOnSave` in VSCode. I just discovered there are language specific settings. ``` "[html]": { "editor.formatOnSave": false }, ```
You might want to chose one over the other as those two tools have been developed with different mindset. Long story short PHPCS is a linter and PHPCS Fixer is a fixer. [Source](https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/3459#issuecomment-359234259)
Quick note: [PHP 7.1](https://github.com/arthurkushman/detox/blob/f1c9105ab5b0f4cdad32d2f62eaaa0e9b3ce4450/composer.json#L25) should probably be a production dependency. 
Ok, thx I’ll add the dependency ;-)
I recommend running `composer require php:^7.1`. 
I was never a fan of anonymous classes because I find it, personally, gross to look at code that does: ``` ClassName { public function sample() { $something = new class($vlaue) { ... }; } } ``` I would rather just use a anonymous function, which to me looks cleaner and more readable then having a class in the middle of a method. I always believed classes should be A) there own separate thing and B) in their own file. Obviously I am wrong with anonymous classes, but I cannot, for the life of me, fathom why we have them. What ACTUAL good they do. they seem like something that can be, and is, so badly abused and misused. Hell, as I write this I barley understand them my self, which isn't the reason I do not use them, the core being: They look back in the middle of a method. (Watches the down votes pour in)
thanks!
There’s also a good answer to a corresponding question that is related to your library: https://stackoverflow.com/a/273520/1172545. 
Thx a lot I’ll definitely use those dicts 
Yes, I can write normal PHP to solve many problems, as I said: &gt; I have worked around this by creating a separate base class injected with the validator factory which can then get its rules from less coupled sources, and combines it with the data at runtime... The question was not so much, "how do I do this?" -- but where does something like the official docs show this? If not, why not? Why only show the two ways that couple the rules to weird contexts?
We both do! 😁
&gt; Perhaps there is a reason for the mb_ functions to coexist with the regular functions. I don't understand why they didn't just replace them. Long version? [Read this.](https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/) Short version? Because text encoding isn't something you can muck around with without making a backwards incompatible change unless you make a system that's able to readily work with differently-encoded strings seamlessly. In python2 more or less the same situation as PHP existed: UTF-8 or other non-ASCII but ASCII compatible encoded strings worked fine if you did the most obvious thing with them, and if you did less obvious library things you could theoretically work with any kind of text encoding at all, but you *could not* be certain that your string variables actually contained valid text of a specific encoding without manually checking unless trusted the source of the data you set the variable from to never emit anything that wasn't valid text of a specific encoding. When python3 plans were laid to have strings enforce expected encoding and throw errors early to ensure that the programmer is aware of *why* something has failed to run (rather than just passing invalid bytes as text of a specific encoding around and *maybe* experiencing a failure, or *maybe* experiencing strange output.) they ended up realizing you basically can't do it without massively breaking backwards compatibility. The behaviour of a lot of code that works because it's never hit specific edge cases (or at least kind of works when it hit them) would suddenly change to always being an error about the program failing to account for potential encoding problems. PHP learned the same thing around the same time, and that's why the never-released [PHP6](https://www.phproundtable.com/episode/what-happened-to-php-6) almost existed. PHP ended up choosing the path of backwards compatibility and asking the programmer to layer more things on top of their code to ensure proper encoding handling in order to keep that backwards compatibility, python chose to create a big schism between python2/python3 that's caused nearly a decade of python2 users very slowly moving to python3, but in python3 you get far more assurance you're handling encoding correctly and can't fail to account for encoding problems because design of the language/stdlib prevents it.
yes it is awesome.
&gt; if you're coming from a more strict language How do you mean 'strict' here? Because while certainly enforced typing with compile-time checking is nice I also appreciated dynamic typing for letting you rapidly iterate without needing to adjust a lot of types every time you decide to refactor something a little bit. But if you mean 'strict' here to refer to how likely something in the language is to be considered an error (even if only at runtime)? Yes, PHP is not strict at all and it can and has caused problems, and unlike the type system strictness/looseness being a question of what you're optimizing for I think strictness in the sense of failing fast is pretty much always better. A lot of the PHP stdlib will say things like this: an excerpt from `htmlentities` &gt; If the input string contains an invalid code unit sequence within the given encoding an empty string will be returned, unless either the ENT_IGNORE or ENT_SUBSTITUTE flags are set. Why would it not just fail? (ie: throw an exception, or at the very least raise a warning) Unless I explicitly opt in to just dropping data without warning or error I can't imagine why the language would every consider that the most reasonable approach. They do at least have the decency to support me opting in to different behaviours than silent dropping, but there's no option to just give me an error if the string is broken? I guess that means it behooves me to check the string is valid first in order to be sure `htmlentities` will never have cause to drop data. OK, fine. Not an ideal solution (because although I can write some code to do that, I'd rather have it strictly enforced wherever possible in case I or someone else foolishly fails to write that check code in somewhere it's needed) but it'll work. function htmlentities_will_fail($string) { if (! mb_check_encoding($string)) throw Exception; return htmlentities($string); } Except guess what? That's not necessarily going to work. `mb_string` maintains its encoding separately from the `default_charset` of the php.ini, so this seemingly correct code is actually prone to dropping data for encoding issues unless you ensure that `mb_string*` operates with the same encoding as `htmlentities`. There's plenty of similar things in the stdlib about funny choices with handling errors or reporting them non-specifically (`json_decode` has the very special magic of returning `NULL` either as valid output, as an error indicating malformed json, or and error indicating json too large to parse recursively within the recursion boundaries of the runtime. Good luck knowing which is which.) that require you wrap the stdlib in pre-checks or post-checks to actually figure out what's happened, or if what happened is what you actually wanted.
Last I use Felix Becker's extension, it didn't support html in php files. Intellephense does, which is helpful when touching ugly old projects (or stock WordPress)
I'm writing code for a client... how do I know that my client's PHP is compiled with CURL? I'm not really familiar with php's packaging imports and infastructure.
Can you share your experience? Maybe in another post?
I did it, but i get errors that some classes aren't found. How do I debug hat composer is loading?
&gt;the autoloader is capable of psr-4 i think Maybe, but I still don't get why you would ever use a custom autoloader besides Composer really. There is a very few cases for things like Wordpress or Magento, but it's an entirely different story and different constraints that motivates it. &gt;the way i am dealing with session, request, file, cookie, data is in my opinion better then the others . It might be very subjective, but as a non-expert who would you bet on? A closed source project maintained by one person and that has little usage in production if any or a rock-solid hard proven framework (or its components) like Symfony or Laravel which are maintained and reviewed by way more people? &gt;About the components, do you mean the Parser ? i am just testing functions and they do exactly what they should do in my opinion, but i am open for yours... No I mean actual component. Instead of shipping a framework that doesn't everything, IMO a modern PHP framework should just be about a very few things and provide a glue for components. If we take the example of the Symfony projects, it provides a list of components: - Serializer - HttpFoundation - PropertyAccess - Cache - ... Each are usable on their own as a standalone package, and then there is the `FrameworkBundle` which is the core of the Symfony framework. It provides a way to glue, configure and validate the components allowing you to go from an empty barebone project, a full-pledge API, a CLI app or a full-stack framework. &gt;As a company you should pay for it... &gt;Which i think is reasonable That depends: if you are keeping the code close and you are the only person, it may look reasonable to sell it. You wouldn't be the first one doing that for software, but the reality is that your software doesn't anything appealing enough to consider using it let alone pay for it. And there is so many free and open-source alternatives I wouldn't even bother to considerate that option.
Thanks for that detailed comment. There are definitely some tips and extensions I will adopt!
The safest approach is to do all the work on your own development server. It prevents disruption of the live site and allows you to never give the client access to the work until you are paid. I did try Zend encoder, paid for it and thought I was being smart working on client's server using those encrypted files, but I had a client download a script that captured the bytecode and recreated my protected work and run off without paying. I still had backdoor access, so I deleted my work from their website, which they restored from a backup, but was missing images. They never paid. My backdoor script is a legitimate script I created to manage certain tasks while working on a project, but if a client tries to steal my work and change the FTP, it maintains FTP/MySQL access via the script. There is nothing stopping you from creating code that self-destructs. I've coded in uninstallers before too. But ultimately, you are safest just doing the work on your own server. This has made my risk levels of not getting paid drop to near 0%.
I tried using it but didn’t feel like it’s better than PhpStorm. PhpStorm is like the boss for real developers who want everything connected and fast navigation. Prove me wrong please. 
I dunno. It kinda feels like the Laravel documentation shouldn’t be covering “how to create a class”? Maybe I’m wrong though. To me it just kinda feels like normal obvious programming.
&gt;Thanks, that detailed explanation made things much clearer.
I just can't stand the visuals. Yes, there is Material UI, Darcula, etc but all don't even come close. Furthermore I rather use a FREE software I can extend with missing functionalities than using a PAID software I only use 25% of the features it offers. In the end it's all about productivity and personal preference :)
I agree with you about every solution is far from perfect. Intelephense's import namespace doesn't work for me right now so I have to use another one just for that, called "PHP Namespace Resolver".
`composer dump-autoload -a` will generate (slowly) a classmap with all the classes it can find and where they are. Look through it and compare it with what you expect. Rerun the regular `composer dump-autoload` afterwards to get rid of this map, or it will break further development. If that fails, ask in /r/phphelp .
Excuse my editing incapabilities. The phpinfo() output lists also category for so called Additional modules. So I'm wondering if there is any difference between the two. Thank you for any possible info on this...
where i am supposed to see the output of the command? if i run it on shell it doesn't do anything
https://medium.com/@naveen17797 my entire gsoc experience is in this blog
Try editing a C or C++ file in PHPStorm - you can't do it. JetBrains CLion is a separate product, and the C/C++ plugins for IntelliJ IDEA - based editors (i.e. PHPStorm) have been broken forever. If you do native mobile work, PHPStorm (with the Java and Android SDK plugins) only supports SDK versions 1.5 and lower. The current version is 26.1.1. It costs $20/month, nothing "boss" about that when better products have better functionality and are open source (and [accept PRs](https://github.com/Microsoft/vscode)). What are the open issues I need to be aware of with PHPStorm? Who knows except their internal development staff? Again, not so "boss". VS Code has better support for .NET/C#/F# (Mono for me on Linux), since they're Microsoft products and VS Code is a Microsoft offering. I'm using Blazor (a C# front-end framework) that compiles to WASM, and VS Code has good support for it. PHPStorm has basic support for .NET but Microsoft wins here. VS Code supports Forth, which is used for the boot loader in *BSD systems. PHPStorm doesn't have any support at all for Forth. Granted, this is a fringe application, but if you're heavy in DevOps might be an issue.
`vendor/composer/autoload_classmap.php`
Not sure why would i edit c, c++, .net files when I don’t need it. I just meant for Php my big brother. 
For PHP/Javascript, PHPStorm's pretty nice. I still like VS Code better, mainly how the far-left side of the editor has icons to toggle between the file explorer, installing extensions from the store, debugging, search, and Git. But PHPStorm is expensive. I'm in the process of trying to upgrade all the parts of my workstation (I freelance from home), and the $240/year for PHPStorm is better spent in my circumstances on parts. I plan to move from air-cooled to a water-cooled system and high-end CPU this fall; $240 is a really nice AIO CPU water-cooler.
If creating a class which decouples run time data from configuration state is normal obvious programming why isn't that how laravels validation works out of the box?
yes, https://knpuniversity.com/
Everyone should read the replies on this SO post before using such a library. This kind of overly simplified censorship is horribly prone to false positives among other issues.
❤️KNPU
VIM with the right plugins can do almost everything that PHP Storm can't do, plus it can do things that PHP Storm can't. The only 2 features that I can't replicate are using the laravel ide helper and foreach loops to array function warnings/inspections. Since I rarely write loops anyway, that's not too helpful.
I've opened a thread on /r/phphelp, since I'm still having issues. There is something that I'm doing wrong, but I can't figure out what exactly
The classmap is fine, I see all the classes there, but if i run the code I get the error that classes are missing. I'm going crazy on this.
Definitely the best resource - almost all of our devs use it.
&gt; It costs $20/month, nothing "boss" about that when better products have better functionality and are open source (and accept PRs). I _strongly_ disagree about other products being better. JetBrains have language specific IDEs for a reason. If you're looking for a single editor for all your needs, VS Code will obviously be a better fit but that doesn't make it a better _product_. Regardless of that, PhpStorm costs nowhere near $20 per month unless you need the business subscription (and in that case the cost doesn't matter since your employer should pay for it). Individual license is € 8.90 for the 1st year and gets cheaper afterwards. I'm currently paying €5.30 per month which I consider a bargain.
Fuck that, cool library though.
Is there anything for CodeIgniter?
I would be a dead man without PhpStorm. Couple of years ago I switched from WooCommerce development to this absolutly overengineerd peace of shit called Magento. You are lost with any other IDE. However for anything not related to Magento i use VS Code.
Check out https://codereviewvideos.com/
https://www.quora.com/What-is-the-difference-between-modules-and-extensions-in-php TL,DR: Extension: a servlet which allows to run PHP scripts Module: A library like curl, mcrypt, libsodium, etc.
I think the difference is that extensions are compiled into PHP (like mysqli) and modules are external plugins (`.so` files, like xdebug).
First year is USD $199 [on their website](https://www.jetbrains.com/phpstorm/buy/#edition=commercial) for PHPStorm, and USD $649 for the all-products pack. It was USD $239 last time I looked. I see third year is USD $119, I don't see the €5.30/month pricing you reference (€5.30 ≈ USD $6.20). JetBrains doesn't *really* have language-specific IDEs (except for CLion). They have a core editor framework (IntelliJ) and extensions for the various languages, which they then market separately. Last time I used JetBrains (at the USD $240 pricepoint), you bought the base editor preconfigured with a language extension of your choice. Then, other language extensions were free. Now, it looks like they lowered the price a bit and charge full-price for *each* language extension or sell a mega-bundle. So no, it's not an issue of a single specialized language editor vs. a multi-language editor. They both work the same way (use extensions to a base framework to provide features for different languages). The question then is, are the features in PHPStorm more extensive / better than the features in VS Code? VS Code definitely has better TypeScript functionality (they're both Microsoft products after all). Refactoring support seems comparable in both, though that's a pretty subjective metric. I don't think you can create Emmett triggers in VS Code, and you can in PHPStorm, and PHPStorm's Live Templates is a better implementation than VS Code's snippets (though both do the same thing). PHPStorm won't [softwrap Markdown](https://stackoverflow.com/questions/39945392/soft-wrap-by-markdown-only), if you like that, and VS Code will. If the IDE truly were tailored to a single language, I could see your argument. But PHPStorm is not, and the fact that last time I got a license I couldn't use it for C / C++ (they don't maintain the extension because they want you to buy CLion, which is a different framework) felt like being cheated; I didn't know until after I paid for the thing. If you're aware of any other areas where PHPStorm comes out ahead against VS Code, please mention them. I'm not averse to buying their product again. I spend a lot of time in my editor. 
The only thing I miss from eclipse is that we could configure the IDE to autocomplete classes and functions se wrote. 
Sometimes it's worth paying for tools you use every single day for your trade.
I think this is crazy idea, like how often do we need to compare object? 
&gt; The license says the individual license is "solely for their own use", which sounds to me like it doesn't apply if you're using it for commercial work. The individual license is valid for commercial work - even at a company, as long as you are the only one using the license.
Hi there welcome to this sub! This sub is for sharing php news, tricks, stories, opinions etc but not meant for asking coding question. If you need help can go to /r/PHPHelp Anyway, the number of items you are looping is definitely not an issue. The issue should be with your code dealing with some lengthy operation such as querying remote stuff, crawling another website, or huge operation within each loop. Without that info no one can help you. Good luck!
Grav is lighter than WordPress, but comes with an admin interface.
You are literally the first person in my 7 years of Laravel development to suggest this to me or seem to have a big issue with it. I'm not saying it's invalid or trying to discredit your use case - it's just been rare in my experience to even want to do this, and I've built a good handful of complex, large Laravel applications. Lastly, if you do want to do it then it is already trivial to implement as I tried to show before. Take care!
You could increase the allowed runtime in your server settings to mitigate the error. Is there a reason why you would be iterating over so many nested arrays that it would take so long to run? If you could reduce the number of iterations, it would effectively reduce the runtime.
Check out silverstripe. Not nearly the bloat of Wordpress. Super easy to dev with. 
I don't remember the intricacies of arrays, foreach, and cloning, but try rewriting your code as for loops with direct access by index and see if that helps. It sounds like only a few thousand items total so I think it should be super quick.
That would be amazing. I've needed this repeatedly in the last month.
I don't find that particularly surprising. Enjoy your day.
Grav seems awesome at first but I'm unsure how to create a repeatable gallery for example. I end up writing html all over again in the .md files.
Basically you can turn a module into an extension. Just compile PHP with the desired module and poof, the module turns out into an extension.
In your outer loop you're using the key-based syntax "as $key=&gt;$val" - with this syntax the left hand side of the =&gt; will be set to the index or name. You need to iterate on the right-hand value instead. Also you misspelled $childarr as $childart.
I don't think this is a good idea. Either PHP should have a complete operator overloading support or none at all. When you do a comparison in your code it should be obvious to anyone reading your code what is happening. Hiding logic outside the comparison itself and even obfuscating it inside magic methods is a road to hell I don't want to take. Today's programming has evolved far past its C/C++ roots and I am firmly sure any operator overloading should be done in a completely different manner than those. I have a few ideas in this regard mostly based off of way Kotlin handles this kind of stuff but I don't even think PHP needs it any waybut tl&amp;dr version: marking interface is a must, objects with marking interface should be able to override any operator by their own functions - such as -&gt;plus, -&gt;times, -&gt;increment, -&gt;not, -&gt;equals etc.
October CMS looks promising.
That would be like *friend* in C++. There's already an RFC for that - [https://wiki.php.net/rfc/friend-classes](https://wiki.php.net/rfc/friend-classes) Implementing package local things into the language is probably harder... after all, PHP doesn't really have any concept of packages. The autoloading standards we all use (PSR-0 and PSR-4) are just a convention that has nothing to do with the language, after all.
LEET LUTHOR
 set_time_limit(0); Try to keep database usage to a minimum. For example, here we lazy-load all child records based on an array of data: SELECT id, name FROM table_1 WHERE parent_id IN (23, 50, 30, 32, 38, 50, 80, 100, 200, 200, ....) This usually requires more loops in the client script, but needs fewer queries.
Check out this post by my coworker Caleb Porzio (author of Better PHPUnit) it’s pretty detailed and useful. A few things are a little out of date but my setup is 90% aped from his: http://calebporzio.com/my-vs-code-setup-2/
Can you please add the ability for pure php files to not require the php tags in php 8.0
&gt; Today's programming has evolved far past its C/C++ roots and I am firmly sure any operator overloading should be done in a completely different manner than those. ... I have a few ideas in this regard mostly based off of way Kotlin handles this kind of stuff ... To be constructive, this is the basic outline: marking interface is a must, objects with marking interface should be able to override any operator by their own functions - such as -&gt;plus, -&gt;times, -&gt;increment, -&gt;not, -&gt;equals etc. This sounds like operator overloading in exactly the same manner as C++. Literally the only difference is the names. Instead of `plus`, C++ calls it `operator+`. Instead of `increment`, C++ calls it `operator++`. And so on.
My question, and the question posed the last time it came up is: What would that REALLY gain? Best answer I heard is: prevents accidentally leaking script source if you... forget to put the open tag? Honestly, that's a weak argument for a change to the language like that. If your code is missing something that fundamental, it has far greater problems. And anyway, best practices put actual code outside the webroot. Only entry point files should be visible from the root. For devil's advocacy, what does the existing open tag get us? Also nothing valuable. The difference between those two is that the status quo is to have an open tag. So leaving things as they are will break less than trying to change matters. So, cost benefit ratio: Cost == $nonZeroValue Benefit == $essentiallyZero. The math speaks for itself. That said, if it REALLY bothers you, I could build this into an extension in about 15 minutes if I weren't about to fall asleep.
For some reason I could not write post description, only title. I decided to include it here. I am not sure if the question is phrased correctly with saying "passing it an argument"...But I hope you understand what I mean. This question is similar to the question asked [here](https://unix.stackexchange.com/questions/15264/executing-a-shell-command-from-php-with-shell-exec), yet I have a more specific and kind of different question. I have a webpage with an HTML form asking for user input: his first and last name, and Linux username, which a user already has (each user has its own username). When user fills out an HTML form and clicks on a Submit button, the PHP file will execute. This PHP file sends user data to MySql database AND executes a Linux command, which adds *user* to a *group*. Here is my HTML form: &lt;form method="post"&gt; &lt;label&gt;Fisrt Name: &lt;input type="text" name="fname" required&gt;&lt;/label&gt; &lt;label&gt;Last Name: &lt;input type="text" name="lname" required&gt;&lt;/label&gt; &lt;label&gt;Linux Username: &lt;input type="text" name="uname" required&gt;&lt;/label&gt; &lt;input type="submit" name="submit" value="Submit"&gt; &lt;/form&gt; Here is my PHP code (simplified -- showing only relevant info): &lt;?php // Entering data $first_name = $_POST['fname']; $last_name = $_POST['lname']; $user_name = $_POST['uname']; $query = "INSERT into `mytable`(`firstname`, `lastname`, `username`) values ('$first_name', '$last_name', '$user_name')"; mysqli_query($dbconn, $query); echo "1 record added"; // Here is a Linux command that I want to be executed after the data was sent to the database $adduser = shell_exec('sudo -u root usermod -a -G groupname USER'); ?&gt; And here is my problem (by the way, I made USER capitalized on purpose): In my Linux command, instead of a USER, I want to specify the username user entered when filling out the HTML form. Can anyone help me with this? I tried substituting USER with &amp;user\_name variable but that obviously did not work out.
step 1. google php the right way step 2. use laravel step 3. build a simple blogging website using php with database
Thanks, I'll read it
Eh, I know this isn't going to solve a lot of your issues, BUT... if you're looking for an ecommerce solution for some projects, I highly recommend OpenCart. Had a lot of success with it before and very easy to use. Hell, I'm sure if you wanted to get your hands dirty modding it a bit, you could cause it to do a lot of other nice things (there are also a lot of extensions for it), and spruce it up a bit. I tried about a billion CMS before, many years ago, and all of them left some kind of bad taste in my mouth afterwards. ANother user here, damnburglar, recommended October CMS in this same thread, and I haven't actually used that one. I looked around it a bit and it looks nice and could be promising. That said, you could always do a minimal amount of PHP / SQL and get your own little interface going - you, more than anybody else in the world, know what tasks you usually rely on these CMS solutions to perform for you. You can remove 1000% of the bloat by hacking something together over a weekend and then expand on it as you go. If you make it modular enough and "open" enough, you can use it on other future projects with minor adjustments. The real issue is, no CMS or other solution (no matter how bloated) is going to allow you to handle every single unique client or project you might have. There will always be cases where you're trying to jam the square block into the round hole. If you start getting more complex and pick up a project trying to, I don't know, manage leads and sales connected to a warehouse full of merchandise and the employees that scan/stock/sell that same merchandise - unless you want to pay for some "out of the box" solution (which also rarely will ever be specific enough to encompass the requirements), then you'll be forced to finally sit down and go "Okay, I can do this, I only need A, B and C - no need to pay some ridiculous sum for D, E, F, G, etc.; when I can get this done in a matter of days..." Once you do it once, you get faster at doing it every time, better, more streamlined, more secure. What content do you need to manage? I'll tell you some more helpful tools. First, if you know how to pull data from SQL using PHP and create a table with it, I also HIGHLY recommend dataTables (which is a jQuery library? I dunno, you can just include it via CDN). dataTables, for a backend guy like me, does most of the frontend work for you... real time paging, sorting and searching of tabular data. All you need is for PHP/SQL to spit out a properly formatted table and voila. In addition, adding another iteration with Edit / Disable options / columns for each entry tied to user session permissions is basically better than most CMS will do for you. Another quick page for Adding data in the first place and you're the majority of the way towards a proprietary application. Using jQuery and I think jQuery UI and dataTables, along with a short bit of code, I've also made something that is extremely lightweight, but goes onto a blogging platform (Blogger), pulls all the posts, allows paging through them, listing them, etc.; with just a few lines of additional code. Also can fit into an SPA. Really, taking any RSS feed and doing something similar should be a breeze. I guess my real suggestion here is this: eCommerce project? Open Cart! Not eCommerce? Maybe try October CMS *(or silverstripe like another user, BluFenderStrat07, recommended). Willing to take my advice? Throw together your own CMS real fast for a couple of projects until you get the hang of it and have enough of your own code to "borrow" to make future endeavors effortless. Good luck!
TL;DR: They are the same thing. But there is something called a Zend extension which _is_ different. In the PHP source code, PHP extensions are called modules. The docs unfortunately refer to them as extensions whereas `phpinfo` refers to them as modules. They are the same thing. If you trace the source[0] you'll see the only difference for 'Additional Modules' is that they don't have a version or info func. Here[1] is the original commit from almost two decades ago. Note this also has nothing to do with built-in vs shared extensions. To make this more confusing, there is also a different type of extension called a Zend extension, which can hook into parts of the Zend VM to change runtime behavior. In the source code, these are referred to as simply 'extensions'. Xdebug is an example of this type of extension. [0] https://github.com/php/php-src/blob/0c4f4481f59489c9de62489a396964e221ef793c/ext/standard/info.c#L949-L963 [1] https://github.com/php/php-src/commit/9b09f412bfd0497dbc3c3a5c30b58b3527f695b7 
Found the Java guy
It's clean, modern and easily extendable. Totally refreshing to use 😊
No problem, Feel free to share thoughts on my blog 
At some point you are going to need https://www.phptherightway.com it's like the bible for PHP. It has the best, most recent php usage and all the right tool agreed by almost every php developer. I just want to emphasis how important it is, words don't do it justice. But if you are just starting with php, and have little to no concept of oop, design patterns, unit testing, package manager then it will be too overwhelming for you, so bookmark it for later and just start phpacadamy on youtube ... maybe. GL
Thanks
Few things that I consider you should learn and general advices (some of them are good practices in general, not only for PHP) Use always the newest stable version of PHP (7.2 right now) Use the relatively new `declare(strict_types=1);` in all your files and add the variable types to all your methods signatures. Always look on internet if PHP has a built in function that does what you are trying to do (you'll be surprised how many useful functions there are that you wouldn't expect fe: ln2br and br2ln) Handle your dates with DateTime object. It is way easy to use when you need to add days to dates, check difference of days between dates and so on. Learn about PDO to handle databases. Use bindParams method for all the variables that you append to your query that come from some external input to avoid SQL injection. Learn to use a framework (Symfony has pretty good documentation and IMO is easy to learn. Also I heard good things about Laravel but didn't have the chance to use it. If you don't use a framework don't write your queries, business logic and html in the same file. Read about MVC. Learn PSR-2 (styleguide for writing PHP) Learn about tests (unit test, spec, integration, functional, etc) Use dependency injection and try to make your classes stateless when possible. Avoid singletons and calls to static methods inside your classes. I could add more and more things here but I believe is a good place to start. It takes a lot of practice to be able to write good code, keep it up and good luck! 
Totally impossible to deploy automatically and cleanly last time I looked.
the reason is simple https://i.imgur.com/DK1ckG8.png you guys who can't read are unstoppable
Check out [kirby](getkirby.com)! No database, super extendable, robust plugin ecosystem, super fast. I’ve been working in it for about a year now and it’s really awesome. Gives you a lot of the building blocks without bloat. m.
as of the "variables that *obviously* don't get substituted" please refer to a line in your own code starting with $query, where all variables get substituted all right. now please delete your post as it's off topic and makes one's eyes bleed. 
One last but important note. You must always format a variable before use, otherwise you will have errors or even worse - have your server hacked. for mysqli queries you must use [prepared statements](https://phpdelusions.net/mysqli). for the command line arguments you must use [escapeshellarg()](http://php.net/manual/en/function.escapeshellarg.php) command 
Try asking on the October forum there's surely a way 😊
Bolt
&gt; What are the open issues I need to be aware of with PHPStorm? You can have a look there : https://youtrack.jetbrains.com/issues/WI
&gt;Edit: after some more googling, it appears that extensions can also be installed via PECL, and I'm not sure what makes PECL different from, say, apt-get or brew. Dedicated to PHP, cross platform... Is it enough ? &gt;I think the difference is that extensions are compiled into PHP and supported by PHP team (like mysqli) while modules are external plugins No, it has nothing to do with "compiled with" vs "loaded at run time". See [SECAUCUS\_JUNCTION](https://www.reddit.com/user/SECAUCUS_JUNCTION) response.
Yes implement destructors and trust Zend VM GC. Furthermore it's a refcounter based GC so it provides deterministic destruction as long as there are no cycles.
After all that, you are recommending: - A shotty ecommerce project when the OP never mentioned anything about ecommerce - 2 other CMS projects that you haven't tried, even though you tried "a billion" - or you're telling the guy to write his own CMS? In case the OP is not experienced enough to know, I just want to suggest this might be terrible advice. 
Wow, thank you so much. Yes, that's exactly the behavior of this section. If the extension version is NULL and the minfo function is not present for it, it is listed under additional modules.
Not free
Correct. It costs a tiny bit of money to run a site. If you’re spending the time to build a custom website, the cost of Kirby is minimal in comparison comparison to the total cost and for that minimal investment you get a tremendous system to build off of and a fantastic support team. The code is open, extendable, and the community is welcome and patient. For me the trade off is well worth it.
&gt;when touching ugly old projects (or stock WordPress) You said the same thing twice 
Perfection shouldn’t stand in the way of progress though. Operator overloading would be good but it would be years before it was ever implemented. This proposal is a much quicker fix and far better than the borderline useless behaviour we have now. 
I write TypeScript with React, not plain JS. The extensive typing support, including type-checked TSX templates, makes it much easier to spot errors early. PHP typing feels weak in comparison. But the rest of JS ecosystem is CADT garbage through and through. I also deal with other languages, including Assembly, C/C++/C#, Delphi, Perl, shell scripts, etc. Everything has its place, including PHP.
So what do people generally do now? Create a user land comparison method?
I'd murder a good FTP extension. Tried a few but they all seem lacking. So for now I stay with Notepad++
Pardon my ignorance, but what does CADT stand for?
3) I dont think php is dying. At least as long that many sites run typo3, laravel (which is booming) and magento. 
It's [**C**ascade of **A**tention-**D**eficit **T**eenagers](https://www.jwz.org/doc/cadt.html), the model where you solve the fun part of the problem, throw it on the web, declare it revolutionary, and ignore the hard parts.
1. I love webdev, typescript is my favorite language at the moment. However I dont see node as a replacement of php (yet) 2. I used to be a c# guy, (years ago) now mainly focusing on php apis with symfony, and webdev front ends with js/ts angular and ionic for mobile. I do a bit of Java, but don't like the language. 3. No, php is not dying. It is less exciting now than web technologies, because if you know js/ts, you can make anything from apis to mobile apps. But php is still going strong. Any new project I start I still do the api in php. 
this would introduce huge inconsistencies in behaviour. I would expect `===` to also trigger this method, but from what is stated in RFC this is only for `==`. If you really need this, you should just use methods: $a-&gt;equals($b) $a-&gt;isLessThan($b) I found it much more readable and much more explicit. So NO for this RFC.
If you want to learn any language it comes from use and repetition. Understanding the basic concepts of variables, functions, scope, these are the core of using PHP, which is what OP was asking for. Real learning and understanding come from using these principles in building something and trying out what works, what doesn’t work and what is best practise
Did you try to go to your local PHP user group community? You might find some experienced developer who could help you. I was looking for some websites like that too, but didn’t really found any to be honest. Might be an interesting ideas for a mentorship platform I guess.
Looks good but not quite up to the expectation.
Are we back in the days of pre 5.3?
I had a quick look at the code. Apart from being absolutely not up to modern standards, it is riddled with security vulnerabilities (SQL injections, XSS etc). Please learn about common security vulnerabilities before you put another website online or publish code for others to use. Check this list: [OWASP Top 10](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)
You could put it on Github and ask here. There is also a code review stackexchange site.
I did the same thing, but with raw PHP, no cms or frameworks (they didn't exist at the time)
You are probably looking for [Code Review Stack Exchange] (https://codereview.stackexchange.com/). 
Have you tried creating a custom twig template? 
Just some quick tips: * Don't inline CSS on multiple files * Write your &lt;head&gt; section into one file rather than writing it out every time across mulitple files * Learn to use parameterised SQL queries. As an example, view-ticket.php contains this vulnerable code: $ticket_id = $_GET['id']; $sql1 = "SELECT * FROM tickets where poster_id = $user_id AND id = $ticket_id AND not deleted;"; * mysqli_query() and the like are not inherently wrong (and they're better than mysql_query()) but now anyone who might want to use this code has to use a MySQL database, whereas if you used something like PDO then the same code could be run on multiple different database engines. This project is not suitable to be used in a real production environment.
=== is for identity, which for objects should always mean "the exact same one", which is why there's no intention of changing this behaviour at this stage. The goal here is to be able to define equality and relative natural ordering. You can still call the magic methods directly if you want, but the intention is for other internal functions to also honor your definition of equality and ordering. If you made your own interface, other functions won't know to call your methods. The operators must be overloaded as a side effect here, because it would be strange to define equality and/or ordering and then have == or &lt; not use that definition at all. Inconsistency, yes, in that objects won't be compared with the same algorithm. But flexibility, control and semantics will come into play that we don't have now. Also, because some extensions like datetime and gmp already overload comparison operators, you could argue that introducing this RFC aims to reduce inconsistency. 
I though phps math libs were already optimized in C? Bcmath and gmp
I think the borderline useless behaviour refers to the way objects are compared currently. This isn't actually documented anywhere but when ordering objects, PHP compares the properties of each object (if they are both an instance of the same class) until one is less than or greater than the other, or until they are all equal. Equality is similar in that properties are compared until one is not equal. This is done in the order that they are defined in the class, using ==, and is recursive, like with ordering. A problem with this is that you can't use strict comparison of properties and changing the order of class properties may change the relative ordering of your class. :|
`===` is just `==` with a type check. I'm not sure what you expect to have changed here. Nothing changed because nothing needs to. Also, methods don't work (without an internally-supported interface, which was covered in the RFC) in all sorts of cases where overloading is most useful.
I live in a small city, no local php groups here unfortunately. The good news is that I'll be relocating soon, and looking for a local php group will be a good idea, thanks!
Creating my github profile and uploading projects is a good idea, thanks
So much this ^ Also on top of that it stores plain text passwords and is at least also vulnerable to csrf attacks. Innocent people will take this project and go with it not understanding the security holes and by proxy freely giving out all information of the even more innocent possible users of the system. I would strongly suggest OP to take the download down or at the very least have a huge `&lt;marquee&gt;` text stating the problems with the project and clearly stating it should not be used for anything.
&gt; whereas if you used something like PDO then the same code could be run on multiple different database engines hahahahhahaha
Uh I didn't know about code review subsite, thanks for suggesting it. You are asking me if I think it's worth to pay money to improve myself and the answer is absolutely yes, there is some kind of service like that?
Its just for educational purposes. Not for real use. 
I just went through the article again. And nowhere is it stated that "Its just for educational purposes. Not for real use.". Also tbbh the only educational value in the project imo is how to screw up security in all the common ways possible.
Are your users tech savvy? A git repo that hooks to a static site generator per push/commit. Users can be added by giving push rights.
Look at Netlify
As has been said, unfortunately it's not suitable for serious use. Far too insecure. Also, every file seems to have a favicons and core css block at the start. As soon as you find yourself duplicating something for the 2nd or 3rd time, go back, put the common code into a separate file and include() it. If someone has to edit more than 1 file to change the favicon site-wide then you're doing something wrong. I'm guessing that you probably taught yourself PHP by writing this. Which is great. But you were learning from outdated resources, sadly, and your code really isn't fit for use. But turning into something that's properly secure would be a very good exercise for you.
If that's true, put it on GitHub so others can suggest inprovements and PRs.
I can't test right now but I think a quick look to phpinfo() should tell you if curl is compiled within PHP. It's a pretty basic library, I'm not sure I've even seen a PHP version without it...
Why you stopped using C# ??? less demand ?
do you consider the frameworks ecosystem of JS garbage or just the build process with the ide like VScode or Sublime etc ??? do you think that JS with React for creating apps or webdev is superior to what php offer or Java / C# ???
CraftCMS
It takes some time to get used to it. Javascript has it's problems, as a language it's not much better than PHP, being async sometimes is more trouble than it's worth it. The problem is: you can't use PHP in the browser, and I'd never do anything slightly interactive with PHP and jQuery ever again. React or Vue are really worth it once you get past the learning curve and initial resistance of changing environments. In a world where using React is so much better than glueing HTML and jQuery, PHP would only be used for the API. If you have an existing system that makes sense, you don't want to throw all that logic away and start from scratch. But if it's a new product, why would you choose PHP over Node.js, Python or Go for an API? 
Sure, but it is a limit of infinite sums of those data-set inputs the more we add them, the more we get closer to that limit of false positives.
JavaScript is not *superior* or *inferior* to what PHP/Java/etc. offer, it's *complementary* — PHP or other backend languages work well for doing the heavy lifting, data processing, API endpoints, but you really need JS (or something that transpiles down to it) to build dynamic UIs. From the options JS currently has for that, I find React to be the sanest one. Others may consider Vue or Angular better, that's their choice and probably a matter of personal preference more than objective benefits. The build process of JS and other frontend materials leaves a lot to be desired, but the concept of "building" it is sound and just needs better tooling. However, the JS community is notorious for recreating all of computer history without applying any lessons already learned, so it may be a while.
I can feel the pain, you just have finished an entire project and came here to asking for some advice. There's some good tips in the comments, please take them in a **constructive manner**. I like the UI.
^this. Highly customizable , excellent performance and high quality plugins!
I've found that just the order in which traits are included can change the order of properties. The order is largely out of your control when inheritance is happening. 
I know of a well-known maintainer and contributor to open source software who has spent a good deal working on something like that, but as far as I heard, there are some legal challenges. Regardless, I have heard of [pullrequests.com](https://www.pullrequest.com), with whom I’m not affiliated, but I don’t know much about how and if that actually works. Nonetheless, I’d be willing to review other people’s code if it is closed-source software and would be paid. If you are working on open-source software, your best bet is to either contribute to other projects (you will get a review from maintainers), or build a project that is interesting enough to attract other contributors. 
Take a look at the first paragraph: &gt; Also, one can't forget [The Untold History of Toontown's SpeedChat](http://habitatchronicles.com/2007/03/the-untold-history-of-toontowns-speedchat-or-blockchattm-from-disney-finally-arrives/), where even using a "safe-word whitelist" resulted in a 14 year old quickly circumventing it with: "I want to stick my long-necked Giraffe up your fluffy white bunny."
If you do, [php.ug](http://php.ug) might be a good start. 
Indeed
They all seems good ideas, thanks!
Check out ProcessWire. 
This could be useful for comparing and testing equivalence for value objects, however I do not feel burdened by implementing an `equals` method by hand.
If you're only doing simple select/update/insert/delete and not using special features, like OP appears to be doing, it should work fine on MySQL/Postgres/MSSQL.
That's even worse - people will copy what you've done not realising that they're introducing huge security vulnerabilities.
How do you mean burdened? Like it should be done automatically somehow, or via a toScalar approach? 
&gt; === is for identity What's the justification for saying that? Other than it's how the RFC is being implemented? 
The best way is to contribute to open source projects or company projects. Then people will have to go through your code.
To me, it sounds like your endpoint is doing too much and you should refactor the design. $0.02
&gt; === is for identity, which for objects should always mean "the exact same one" What about value objects. Semantically speaking, they have no identity.
ProcessWire http://processwire.com/
The RFC doesn't touch `===`, not even by saying it's for identity. 1. Internally, `is identical` is used to describe `===` in various places. - https://github.com/php/php-src/blob/master/Zend/zend_operators.c#L2206 - https://github.com/php/php-src/blob/master/Zend/zend_vm_opcodes.h#L92 2. The PHP documentation mentions identity: - http://php.net/manual/en/language.oop5.object-comparison.php - http://php.net/manual/en/internals2.opcodes.is-identical.php 3. Mixed sources that all consider `===` to mean 'is identical to': - https://stackoverflow.com/questions/80646/how-do-the-php-equality-double-equals-and-identity-triple-equals-comp - https://sourcedaddy.com/php/differentiate-equal-signs.html - https://github.com/lstrojny/functional-php/blob/master/src/Functional/Identical.php It's functionally equivalent to "equal, and of the same type" for scalars, and "the same instance" for objects. Two instances of the same class might have the same properties values, but can never be identical. Two scalar values of the same type might not be the same exact reference but have equal value, and therefore considered identical, eg. `"abc" === "abc"`. So objects and scalars are treated a bit differently when it comes to identity, and the intention for this RFC is to leave identity of objects out of the picture entirely. In my opinion, identity should never change for objects. It's equivalent to `==` in Java which does not call `.equals()` but checks memory address instead. *If* we want to overload `===` later on, for whatever reason, maybe alongside other overloads like `__add` or `__mul`, we would do so with something like `__identicalTo`, and this RFC won't complicate or prevent such a proposal. However, it's important to keep in mind that the focus of this RFC is not to provide operator overloading, but the ability for a user to define what equality means for per-class, and how that class should be ordered relative to another value.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php/php-src/.../**zend_operators.c#L2206** (master → d404b5e)](https://github.com/php/php-src/blob/d404b5e25593e3c9de40e02b1c4cf934c5bb61e4/Zend/zend_operators.c#L2206) * [php/php-src/.../**zend_vm_opcodes.h#L92** (master → d404b5e)](https://github.com/php/php-src/blob/d404b5e25593e3c9de40e02b1c4cf934c5bb61e4/Zend/zend_vm_opcodes.h#L92) * [lstrojny/functional-php/.../**Identical.php** (master → 29f4f82)](https://github.com/lstrojny/functional-php/blob/29f4f8207419b8648846a55b19df176ef5436900/src/Functional/Identical.php) ---- 
No php user is ever taught to "build something and try out what works, what doesn’t work and what is best practice". And this tutorial is especially bad at it. Pity, you don't see it, means you are the very victim of it.
There is any kind of guide to start doing this? I want to do it, and start my own public projects to show as portfolio, but I literally don't know where to start
&gt; we would do so with something like __identicalTo, and this RFC won't complicate or prevent such a proposal. I'm pretty sure an RFC for adding this stuff should be comprehensive and cover most, if not all, of the similar methods needed for all of the behaviour to be sane, rather than adding it in bits and pieces and having incredibly surprising behaviour that changes behaviour between minor versions.
WTF is "educational purposes" that teach you bad and insecure code? Call it "disservice purposes". Or better do not excuse yourself with such a clumsy pretext. The real problem you are in no position of teaching anyone.
Try to use LIMIT with MSSQL
Value objects are still objects, and are still passed by reference. The ability to check whether two objects are the same, by reference, inherently gives value objects identity. 
Wow I didn't even consider that..
I honestly don't believe that any of the behaviour that this RFC proposes is incredibly surprising. It doesn't affect existing code at all, and the behaviour is intuitive for objects that do implement one or both of the methods. When I was writing the tests it was very easy to type out the expected values of each operation because it didn't behave like magic. The behaviour is intuitive because it does exactly what you would expect it to do. 
Fair point - I'd forgotten about that, I haven't touched a Microsoft stack in a long time (thank God).
Nope. You just fell for the biggest lie people are still falling for in terms of PDO in PHP. There are just too many different implementations in a way that the statement "but but but you can swap db engines" means you have clearly never had the "pleasure" to work with different engines and their stupid non standard ways they tend to work. /u/colshrapnel gave you a simple example. Another simple one is quoting of identifiers between different engines (I'm mostly looking at you mysql). And that is without even mentioning support of features by specific engines where a query in on engine will run fine, but results in a terribly slow query / unoptimized in another engine. Don't get me wrong PDO is far superior over mysqli, but that has to do with the sanity of the API rather than the (somewhat fake) ability of swapping engines without code changes.
&gt; Value objects are still objects, and are still passed by reference. Yes, unfortunately we still don't have value semantics for objects. &gt; The ability to check whether two objects are the same, by reference, inherently gives value objects identity. The ability to check whether two value objects are the same, by reference, is useless.
&gt; Nope. You just fell for the biggest lie people are still falling for in terms of PDO in PHP. I'm aware that only the API for executing statements is abstracted and differences in dialect or not. &gt; Another simple one is quoting of identifiers between different engines (I'm mostly looking at you mysql). That's very true. You're right - after dealing with MySQL, and other MySQL compatible implementations, for too long it's easy to forget the little differences that make the dialects incompatible.
No, I meant I don't mind implementing it myself and calling an \`equals\` method instead of \`==\` or \`===\` operators. In other words: I could see how it is useful, but the benefit is not that game-changing for me.
Thanks, I think I'll start with PHP the right way. I really appreciate the advice. I'm also going to PHP exercises on codewars so I get used to the language.
Been following its progress for years and there's a lot of things I like about PW, from a developer perspective, but the admin interface is not the best for clients. That's why WP is the go-to solution.
Thanks. Grav does look interesting. The admin is a free plugin, which seems novel. And the site suggests as they add more features it may attract a cost, which seems equally novel. But I'll check further.
You can do that of course, but other libraries and PHP functions won't know to call it, and will use == instead.
Check #php or similar on irc.freenode.org - They might not have time, but simply asking for a review of code you have put somewhere might work. 
AA. Check with your local church for times and locations.
Excessive "frameworks" are themselves a dead-end that a lot of more experienced devs are moving past. You don't need to be locked into a "framework X" way of doing anything, if you adhere to good standards and clean, module-based practices. The big ecosystems are really npm (Js - or whatever other package manager you like eg yarn), and packagist (composer). For me, I'm quite strong in both (decade+ experience working with each daily). I love ecma for functional programming, and PHP for SOLID OO. While PHP still has a lot of stink on it from some famous but poorly written codebases (WordPress), good SOLID combined with composer, and the ease of wrapping legacy libs up in a namespace an autoloading, helps let us keep around old code. PHP 7's speed, along with its ever-improving type hints for clean DI actually makes it a pretty great modern language. There's also some really excellent support for libs like AWS (which uses Promises via GuzzleHttp), graphql-php, redis, etc. PHP is my favourite languages when all I'm doing is taking some web request, pulling some data from disparate sources (postgres, web services, keystore, etc), applying some business logic and serializing my response. The worst part of PHP I'd say is the hostile, weirdly angry, pedantic community we often see on SO or IRC. I really don't get why so many more experienced PHP devs are so massively unfriendly.
&gt;The ability to check whether two value objects are the same, by reference, is useless. This depends if your VO is mutable or not even if I get the feeling that you think a VO should be immutable, it's not always the case.
I find anonymous classes extremely helpful and time-saving when writing mocks and fakes when writing tests. As an example.
I have never had any problem with this before; provide an interface or look up the API. Furthermore, it is pretty common for value objects to implement their own equals method. Giving users the power to overwrite operator behavior does not appeal to me, it has the potential to make code needlessly complex if one `==` differs from another. PS: Interesting downvotes going on here.
&gt; changing the order of class properties may change the relative ordering of your class. Yeah, that's ridiculous.
What were you trying or hoping to achieve? I'm still coming up with examples of use cases.
1) arguments about best languages/frameworks will always be here, never go away. JS ecosystem changes too much and too often. I prefer more mature languages (e.g. php7 ;) ). But everyone is entitled to their own opinion of course. It can be interesting to use different languages (and frameworks) to see how they implement the same things. 2) Familiar with them, coded apps in the past, but it has been a while so now I'd need to google a lot. But it comes back quick when coding something for iOS (for example). But my bread and butter is php (/html/js) 3)PHP isn't dying. It is the most popular programming language for websites I believe. Thousands and thousands (millions?) of websites use PHP. A lot of huge websites (top 1k alexa) use PHP. Frameworks such as Laravel and symfony are much more modern than the old way (vanialla/plain) of coding 5+ years ago... 
Depending on the context, I think being dependency free could actually be a red flag. In this case, I'm not so sure, because I'm not sure what kinds of dependencies this project could benefit from. I'll give you the benefit of the doubt but, even so, it's being dependency free is about as much of a selling point as it being camelCase free (ie. it's not a selling point).
Nothing too fancy; mostly involving writing unit tests dealing with entities that have some mixture of floats, microsecond precision timestamps, and links to other objects which might be semantically equal, but might not look equal to PHP. Eg, a Product with, for horrible legacy reasons, prices stored as a floats: One with a price of 5.0000000001 (or whatever) and another with a price of 5.00. Or looking at events with microsecond precision timestamps, but one ran through JS and has been rounded to millisecond precision. Or two otherwise identical order objects, but they contain references to different product objects, which were loaded in different ways, and have different metadata. It's all stuff you can (and I did) work around, but it's frustrating, when what feels like the obvious/idiomatic way of writing a solution doesn't work.
Hi guys , after a couple of days I'm starting to go to a course to learn PHP and mysql this is the [curriculum](https://pastebin.com/0bbr29XW) , 30 hours lessons 75euro or 88 dollars. Is it worth of it check the [curriculum](https://pastebin.com/0bbr29XW).Thanks.
Have you ever got a PHP job from upwork or some others freelancing sites?
Yes. I inherited a codebase where the prior developer had never left the file unclosed. 
It’s also bad for quick reminders. MDN is better for HTML stuff, and PHP.net is fine for PHP stuff. 
What's the job market like for PHP dev in US? 
Yup. I used it to fix all the crap code I inherited. 
Never write `&lt;?php echo`. Use `&lt;?=`. 
lol
Had one, the guy was kind of shady in his communications then Upwork said I'd need to verified and froze my account.
The only programmer friends I have use other languages so I can spend countless hours arguing with eachother about why their language sucks ass. Sorry OP.
Already add you as friend :). I'm a full stack develop and happy to connect with you.
Is there a room for a guy that just started learning php? 
If you had a collection of objects and you needed metadata about those objects, would you get the info via iterating through the collection or running additional queries on the database? For example if you had a collection of transactions and each transaction had a date, amount, and a category (like food vs computer vs car, etc.). Let's say you pulled the transactions and created the collection per year but displayed the data on a monthly basis (separated by tabs). Would you iterate through the collection and get the info or would you perform additional queries on the database to get the metadata? Example info would be how much you spent on groceries per month (or any other category). You would also need to know the totals for the year and the averages, etc. I'm trying to decide if I should just do the initial query to get all the transactions for the time period and then perform PHP commands on the data to figure out the rest or if I should run additional queries to figure out what I need. I'm more than capable of doing the iterations on the collection and getting the data; this is more about best practices. Thanks in advance!
Have you started looking at CQRS or DDD? ~10 ish years of building apps but I started CQRS and DDD and now I'm back at around 2 years.
Not really, have no use for it.
Yes! Join!
PHP dev for over 10 years as well. US here. Specialize in ecommerce specifically Magento. Love making friends so feel free to hit me up. 
10+ years here too, from the other side of the Atlantic. Puerto Rico to be precise. :-)
eh discord isn't for me, neither gitter or slack I just enjoy whatsapp groups, must fast and convenient .. if that is okay with you or anyone hit me up
Just curious...do you freelance or work for a company? We almost relocated to Puerto Rico and that might still be a possibility.
Added! We could also make a remote PHP community with some other folks :)
Good evening, I am really into php and always coding too. Drop me a DM if wanna chat. I am on discord, slack, and others. 
Not a PHP Guy, but always open to programmer buddies :)
Just curious...do you freelance or work for a company? We almost relocated to Puerto Rico and that might still be a possibility.
so where's everyone meeting? how do I get an invitation?
Same for me? Just started getting into php and I have much to learn :)
I work for a local corporation. Have you been before to PR? And was the relocation for a company? PR can be … weird if you don't know what to expect. 