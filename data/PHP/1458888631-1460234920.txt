This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
No, because that is what the composer.lock file is for. `git pull &amp;&amp; composer install` will achieve the exact same end result as committing the vendor folder, but without clogging up your git repo full of third party changes. https://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md
WAT?
The variable receiving the heredoc becomes a string. So there's no difference. It's like choosing concatenation over interpolation. Or double vs single quotes. All these options are just strings.
A poor workman blames his tools.
I'm using ShortPixel with better results so far. Give it a try ;).
Which database are you using that supports [table names](http://stackoverflow.com/questions/15182910/php-pdo-bind-table-name) in bind parameters?
Namespaces largely solve that issue. If Azer's stuff were at "azer/kik" instead of just "kik", then Kik the company could get "kik/kik" and all would be well. 
Deploy and store each release as a Docker image, containing your PHP/HHVM binaries, your code, your vendor/ directory, and anything else you need.
[http://larvel.fideloper.com/](http://larvel.fideloper.com/) [https://github.com/fideloper/larvel](https://github.com/fideloper/larvel)
You can just use normal strings across multiple lines with variables in it. $str = " Normal string work fine $foo {$bar} "; $str = &lt;&lt;&lt;"EOD" nowdoc is "okay" $foo {$bar} but ugly since the EOD can't be indented. EOD; Regarding security, you need to make sure any variables in the sql string are not from user input. Anything from the user should be in a named parameter. I doubt the way you're using :query is supported.
Thats kinda the point of the post you replied to. You have to check what ciphers are supported at runtime.
Coming soon in PHP 7.1 : $a &lt;=?:&gt;= $b; [/troll]
Spaceship wizard assignments will be all the rage ?:&gt;
Make sure that you whitelist your table name variables. They may not be from user input right now, but sometime down the line you will forget and pass in something that comes from users.
&gt; I wouldn't dismiss this idea straight off. I can see a lot of practical uses for chaining assignment operators, like: &gt; $a !==&lt;=&gt;==== $b; &gt; Expanded from: &gt; $a = $a !== (($a &lt;=&gt; $b) === $b); Careful, jokes like that is how we got [PSR-8](https://groups.google.com/forum/#!searchin/php-fig/psr-8/php-fig/pcCMC6Kpq74/fEhWihgz_zMJ).
Is it related to the [RFC: Null Coalescing Assignment Equal Operator](https://wiki.php.net/rfc/null_coalesce_equal_operator#vote) ?
hi, i want to try this too, do you have some example scripts that i can take a look? 
In french ? "L'epic troll", in fact. It's not 100% french, but we use that :) 100% french would give : "Le troll épique".
it is supoorted, i tried it and it works!
on the first example `tbl1` is defined as `define('tbl1', 'whatever_tablename');` the main reason i am switching to heredoc is only for complicated queries and also for using array on where clause. According to **[StackoverFlow answers](https://stackoverflow.com/questions/907806/php-mysql-using-an-array-in-where-clause)** using here docs seems to be only way without having risks of sql injection. yes i mean `$query` from user input.
(╯°o°) ╯︵ ┻━┻ maybe for try and ┬─┬ノ( º _ ºノ) for catch.
Is it me or do their justifications boil down to "we got around our slow architecture with fragile caching and complex async rendering"? That caching + async rendering will make doing simple, custom things in Drupal a whole lot more complicated. Caching is not really a substitute for performant execution.
&gt; Additionally, Packagist will reserve namespaces, preventing other people from releasing packages under a name/organization they really aren't. Is that so? There was an old discussion about that brought up a few days ago, and nothing seems to have changed in that regard since 2014. I'd love to see discussions or commits that show this happening. &gt; Toran Proxy can mitigate that damage. Which you don't get automatically, but it's certainly a damn good idea to set up for any production application. By default, your deploys will start failing if the upstream goes away (at least once it's gone from your local cache)
That's dependent on where the string is coming from and where it's going, not what method you put it there. `sprintf()` could work equally well or disastrously.
I keep them in [.env](https://github.com/vlucas/phpdotenv) these days, global git ignore set on *.env so nothing valuable ends up in github by accident.
Well, str_word_count is kinda cheating since that's implemented in C. And it uses a [much faster algorithm](https://github.com/php/php-src/blob/f65486f13d04f5cc0d484117fefeea6e128f3771/ext/standard/string.c#L5512) - basically "walk the string look for spaces surround by letters"
With the vote on the null-coalesce equal operator looking to pass, I hope this does get accepted soon so they can be released together. Very similar concepts.
&gt; so am i doing the wrong thing That's a question for your manager. &gt; or he is doing the wrong thing It's not your job to keep track of what he's doing, unless you're his manager.
Yes, double and single quotes behave differently. Just like heredoc vs nowdoc. What I meant is that once they are parsed they are all strings, PHP doesn't care how it was set.
&gt; Is that so? It took me a while to find it back but yes, since last year: https://github.com/composer/packagist/issues/163#issuecomment-99673878 Vendor names are "reserved" once you push one package. It's first come first serve. &gt; As of now, nobody can add a package to a vendor they are not a maintainer of anymore.
PHP 7.1: now fully perl compatible
PHP Town Hall is (unfortunately) pretty dead. Give "3 Devs and a Maybe" a try, they cover a variety of things but a lot of PHP too.
Here it goes. If someone drops an phpinfo in your environment then it will be bad. Getting access to the server or env super global, bad again. I see where this drop it in the env originated from, but personally I am not a big fan of this. 
If you like the Laravel podcast you should check out Full Stack Radio as well. Another I've been listening to a lot is JavaScript Jabber, as I've been doing way more JS on the front end - it's super informational. 
Hmm I believe so. So my ID middle man table should be blank, my boat table should have a boatID and my owner table should have an ownerID? I would then populate that ID table when I assign one to another?
This situation sounds less than ideal, but what kind of "accident" is he taking about. Being vague about events that are (presumably) in the public record, sounds bad. 
Right from the fundraising page; &gt; __Why is this so light on details about what happened?__ &gt; Because the criminal case is pending, we have to be very careful about what we make public. __I'm happy to discuss specifics with anyone one-on-one. Feel free to reach out to me directly.__ Doesn't sound like he's trying to hide anything. This man has given a lot to the developer community over the years, and if you have a bit extra to give, you should think about helping out. If you're hesitating because you're unsure what happened, he's obviously willing to speak about it. You should contact him [here](https://www.facebook.com/abele).
Cool, thanks for digging that up.
Will give "3 Devs and a Maybe" a try! As for the variety, i am preparing part 2 of this post for podcasts about software development generally, and also preparing another blog posts for Raspberry Pi and Arduino projects.
Thanks for the recommendations, indeed i lack podcasts about JS and was going to do some research.
Wow what a tragedy. I hope it all turns out okay
Wow, that sounds absolutely devastating. I hope they pull through alright.
[removed]
&gt;what kind of "accident" is he taking about. does it really matter? let's imagine a worst case scenario involving post-partum depression and a "deliberate" minor injury to the child. is the best way forward to financially crucify the parents and put the mother in jail for 4 years? sometimes, I despair of the American legal system :(
Finally I'll be able to tell for sure if 8 is identical to constant D
+1 for kint, beautiful tool. Very lightweight, can be turned off and on in prod at will - awesome for stacktrackes.
var_export() is build in and does nearly the same plus the output is a valid PHP array. ``` &lt;?php $a = ['a' =&gt; true, 'b' =&gt; false, 'c' =&gt; 1337, 'd' =&gt; 'Hello W0rld!']; var_export($a); ``` ``` array ( 'a' =&gt; true, 'b' =&gt; false, 'c' =&gt; 1337, 'd' =&gt; 'Hello W0rld!', ) ```
Based on past record, Laravel releases a new version close to a full rewrite every year... so in just 5 years there will be plenty to keep up with. On the other hand, software in general is changing so fast, that choosing anything else will yield almost the same result after 5 years.
The controllers look really messy
Nate is an amazing guy, met him in person a few times and online multiple times for help when the company I was working for was using li3. We used it for several years and it helped rekindled my love of programming after a few terrible jobs. 
If you want it to last another 10 years, don't use a framework.
Spend your time on documentation (as Danack as pointed out) and making sure your code is well commented. This will be far more valuable for future developers than trying to refactor the whole thing into a new framework. Business requirements change often and the framework you pick now may not be the best fit 10 years down the road anyway.
What an awful situation. I'm disappointed with how the hospital treated this. As a medical student, we were specifically educated on the effects of postpartum depression and how to deal with the consequences. One of the scarier effects I remember was that in some cases, there was a voice in the mother's head commanding the mother to harm/kill the infant. I hope the expert witnesses will turn the tables.
The LTS is only for 2 years, though. And I side with you; it does not mean that the code will stop working, but it will also be difficult to find support or fix possible bugs found in any of the libraries.
Well, if she hurt a baby enough to require a visit to the ER then that's pretty much the definition of child abuse. I don't know if that occurred here, just responding to your question. Postpartum depression, a night out drinking, or just a bad childhood are not excuses for abuse.
&gt;not excuses for abuse. I quite agree. but how are the best interests of the child served from this point forward? seems like criminal prosecution and/or financial crucification probably aren't going to help. 
Yeah. The boat table should contain everything you need to know about the boat, and the owner table contains all info about the owner. The relation table in between should only have two columns, boat_id and owner_id. It won't have any rows in it until you have assigned an boat to an owner. 
Let's assume it was abuse for the sake of argument. A child should not be left in a high risk home. The child has a father. The father is able to care for the child. This is S.O.P. for an abusive situation.
This would be a good spot for the InvalidArgumentException
Child services is called depending on situation and they make that decision. It's purely situational. 
&gt; if she hurt a baby enough to require a visit to the ER then that's pretty much the definition of child abuse. No. "Abuse" indicates "*intent* to harm." Accidental harm is not abuse. It is unintentional.
The State is taking the position it was not accidental, i.e., it was intentional. If they are right, it's not relevant if she has postpartum depression in re to the safety of the child. The context is that I was responding to the comment above about "voices telling the mother to harm/kill." In that scenario, the child should be removed until the mother gets better. Again, never said this was in fact abuse. I'm only arguing that if it was then the cause is not a factor. Only the safety of the child is a factor.
Le epik troll is something like a 100% funnier though
Copied from my response to your same comment below: The State is taking the position it was not accidental, i.e., it was intentional. If they are right, it's not relevant if she has postpartum depression in re to the safety of the child. The context is that I was responding to the comment above about "voices telling the mother to harm/kill." In that scenario, the child should be removed until the mother gets better. Again, never said this was in fact abuse. I'm only arguing that if it was then the cause is not a factor. Only the safety of the child is a factor. 
I'm guessing the father doesn't think there's a risk 
Again, I don't know if there is abuse. In fact, I wouldn't have thought much of this if "postpartum depression" hadn't been front and center in his post. If he had just said "the kid's mom accidentally dropped him" then I get it. HORRIBLE accident but it happens. I have a kid. They do crazy sh*t, even as little babies. But it was more like "the kid's mom has postpartum depression and then.." To me, it's like hearing "his [mom had a really bad day at work] and then accidentally hurt the child..." The part in brackets is not relevant if it was an accident. That's what piqued my interest in all of this. As far as him not thinking it was abuse, when abuse happens the co-parent often defaults to "everything is okay" mode. I've seen it. It's not a strong indicator unfortunately. 
&gt; (what kind of "accident" is he taking about.) does it really matter? Seriously? You think it doesn't matter? &gt; let's imagine a worst case scenario involving post-partum depression and a "deliberate" minor injury to the child. is the best way forward to financially crucify the parents and put the mother in jail for 4 years? So let's say the American legal system you "despair" about decided to just take everyone's word for it, and later the child is severely injured or killed, and then we find out the mother was dangerously psychotic. Would you just give the government a pass and say, "Yeah, you guys did the best you could. How could you know the father was covering for his wife? I mean, what are the odds?" In cases like this, it's all about the safety and welfare of the child. The father can cry all he wants about "postpartum depression", but the circumstances of what happened here matter. Was it a minor breakdown that won't happen again? Or was it a warning sign of bad things that could happen later? The circumstances absolutely matter, and how "minor" the child's injury was absolutely doesn't matter. How much risk was the child put in? We don't know all the facts of the case. Just because this guy gave a lot to a community doesn't mean he's giving us the entire story. There might be nothing here, or he might be another [Hans Reiser](https://en.wikipedia.org/wiki/Hans_Reiser). We don't know and shouldn't presume to know. 
It sounds to me that, rather than tie this to a framework, use composer to bring in twig or some templating system and just rewrite for that then add unit tests for everything and write/improve documentation.
You have a bunch of this type of stuff: $this-&gt;app['storage']; These `$this-&gt;app['bla']` should be abstracted into things like `$this-&gt;bla()` where they do this type of underlying logic below the shell of the function name. You're controller methods are a lot cleaner and nicer then they were in the previous version. I appreciate the ease of read but you still ned to add white space where appropriate. An example: $controller = $callbackResolver-&gt;resolveCallback($request-&gt;attributes-&gt;get('_controller')); if (is_array($controller)) { list($cls, $_) = $controller; } elseif (is_string($controller)) { list($cls, $_) = explode('::', $controller); } else { return null; } $callback = [$cls, substr($callback, 2)]; White space. Much needed. Um ... [How is this a controller?](https://github.com/bolt/bolt/blob/v3.0.0-beta1/src/Controller/Routing.php) Routing isn't a controller and shouldn't be treated like one, I would store this Controller folder in an HTTP folder and then put routing at the base of HTTP You STILL have this and its a huge no no. Regardless of your reasons. Can you not embed with JS? Like this is not cool. // Chrome (unlike Firefox and Internet Explorer) has a feature that helps prevent // XSS attacks for uncareful people. It blocks embeds, links and src's that have // a URL that's also in the request. In Bolt we wish to enable this type of embeds, // because otherwise Youtube, Vimeo and Google Maps embeds will simply not show, // causing confusion for the editor, because they don't know what's happening. // Is this a security concern, you may ask? I believe it cannot be exploited: // - Disabled, the behaviour on Chrome matches Firefox and IE. // - The user must be logged in to see the 'preview' page at all. // - Our CSRF-token ensures that the user will only see their own posted preview. // @see: http://security.stackexchange.com/questions/53474/is-chrome-completely-secure-against-reflected-xss $response-&gt;headers-&gt;set('X-XSS-Protection', 0); Please remove. Refactor. Find a different non disable xss protection because we want embeds to work. Like come on now. You have some methods [Like this](https://github.com/bolt/bolt/blob/v3.0.0-beta1/src/Controller/Frontend.php#L469) That are doing too much at once. You could create a whole service layer around what its doing. Maybe consider splitting it up into smaller testable chunks? What um ... [What is this?](https://github.com/bolt/bolt/tree/v3.0.0-beta1/src/Composer) naming it composer is interesting but the first thing I come to too is why is your composer directory here only to relaize its a set of classes responsible for what seems to be "composing" objects .... I suggest a name change. But thats just me being me. Now I haven't looked at every class in great detail but what I see is much better then the last version with really gross looking untestable code. Good Job.
Hey, congratulations on the (pre-)release. One question, though. Why PHP 5.3? Why advertise that Bolt works with an out-of-support PHP release? Why not use the features of newer PHP releases and make your code that much better to read?
Hi, thanks for the feedback. You've addressed this to me, but I'm not nearly the only one working on the code. In fact, I've dropped to third place, when it comes to [the number of commits](https://github.com/GawainLynch/bolt/graphs/contributors). :-) &gt; These $this-&gt;app['bla'] should be abstracted into things like $this-&gt;bla() where they do this type of underlying logic below the shell of the function name. This is the standard Silex way of doing it. We just adopted that. &gt; White space. Much needed. I think this is a matter of personal preference. We break lines often, but if you do it too much, it won't become more readable either. &gt; You STILL have this and its a huge no no. Regardless of your reasons. Can you not embed with JS? Like this is not cool. Why do you consider this an issue? This is only used in one very specific case: If an authenticated editor is writing a page, and clicks 'preview', it will get added. That's all, there's no risk in doing this. &gt; Find a different non disable xss protection because we want embeds to work. Like come on now. Tell that to youtube an vimeo. It's _their_ embeds that break. ;-) &gt; What um ... What is this? naming it composer is interesting Bolt extensions are installed using Composer. That part of the code is our handler for Composering in stuff. &gt; but what I see is much better then the last version with really gross looking untestable code. &gt; Good Job. Thanks, we're always trying to improve the code. 
Hi, &gt; Why PHP 5.3? Why advertise that Bolt works with an out-of-support PHP release? Bolt 3 requires PHP 5.5.9+ (like Symfony 3 does). You're probably referring to Bolt 2.2, which is currently still the stable and LTS version. This one does however run on PHP 5.3.3. (Just like Symfony 2.6 does)
You are advertising this as a feature on your home page. That's where I got it. As an interested visitor I have no means to know what release this information is refering to.
Yes, because Bolt 2.2 is currently _still_ the official stable release. It does run on PHP 5.3.3, and we will change that statement when Bolt 3 is released. Changing it _now_ would be incorrect.
what is function used in php?
We know absolutely nothing about this case other than what he said.
Thank you, I will dig in once I get a chance 
You're not rude, just predictable. It's surprising how strong people feel about CS given how little it matters. Given your opinion, would it be a good guess that you usually work in a single code base and don't really do much with other languages? I find that people who tend to feel the strongest about these things, are also the ones who are the least used to having to do context switches. I know I became more flexible in my PHP in as I started doing freelance and had to get used to many different projects and languages. Whether you not you use a tab, where you put the opening brace or if you use the public keyword is very minor compared to say, the api of the framework you are using. As for not giving any real benefits. The line length and more 'scanning' to find the function name is a tangible and proven benefit. And I feel its much stronger than being the same as everyone else.
The more diverse the better !
&gt; You're not rude, just predictable. It's surprising how strong people feel about CS given how little it matters. That might be your position, but I often have to work with code written by other people, and most of the time it is horrible legacy code. I think that's a good excuse for wanting logical standards. &gt; Given your opinion, would it be a good guess that you usually work in a single code base and don't really do much with other languages? I work on a different codebase every 2-3 weeks as full-stack, and work on private projects using Java and C# all the time. So not, it's quite the opposite - which I find to be even more understandable. I don't want to deal with hundreds of different coding styles in each language, and the PSRs make it so the PHP code looks and feels roughly similar to a lot of Java and C# code. &gt; I know I became more flexible in my PHP in as I started doing freelance and had to get used to many different projects and languages. I was "flexible" before I started at my current company, because I was the only one working on my codebase. Since I started working with code from other people and for other people, I have learnt that adhering to standards is incredibly important. &gt; Whether you not you use a tab, where you put the opening brace or if you use the public keyword is very minor compared to say, the api of the framework you are using. It is minor if you use other code programmatically, but not if you actually have to get in there. The PSRs for example follow the idiom of producing logical code which tries its' best to transmit the incentive of the author (at least as far as I understand them), and that is exactly what you want when you work with a foreign code base. &gt; The line length and more 'scanning' to find the function name is a tangible and proven benefit. The line lengths is something I absolutely do not care about - screens are much wider than high, and as long as the lines are still reasonably short - under roughly 80 characters (without whitespace) is what I aim for - there is no problem understanding everything at once, as long as you use a practical color scheme in your IDE. Making code as short as possible does not produce a "proven benefit", for me it is the opposite - when the code is not explicit about what it wants to do, it is more difficult to understand it. I will gladly use long function names and elaborate variable declarations if it helps others with understanding my code. Omitting "public" only makes it seem like you have not put much thought into your declarations, as you do not clearly say wether you want the field to be public or private. And don't say that omitting "public" makes code faster to read as a proven fact if you don't have a reliable source for it.
Sharing because I think this is an interesting perspective. I won't be changing my code anytime soon, as I think there's more value in consistency with the rest of the PHP ecosystem. 
I'd like both to stick around, but make `var` required when declaring loosely typed variables. And at this point, removing public would break far too much stuff and so will never happen.
Thanks =) Probably better that way then 
Sooo... impromptu AMA? I'm around for the next couple hours / back and forth for the next few days. *Edit*: Actually, an AMA would probably be next-to-useless. I'm skimming through these and there are _sooo_ many things I could say, but all of them would give away aspects of our defense. What I can definitively say, without question, doubt, or hesitation, is that this _was_ an accident. Much as it pains me to say (because I know it reads like bullshit!), the other details are relevant for reasons that will become clear later. In the meantime, you can choose to trust me, or not. Your call. *Edit: The Legend Continues*: It's funny how you never notice how addicted people are to speculation until you're the subject of it.
Oh, believe me, I would loooove to give you the entire story, but that would compromise us at trial (see https://www.reddit.com/r/PHP/comments/4bzxag/nate_abele_of_the_original_cakephp_team_and/d1esddm).
Don't misunderstand... I'm not siding on any side here, because I have no idea. And honestly, even if you did give "the entire story", it's still a story from someone with a vested interest and wouldn't give us any more objective information than we had before. And to be bluntly honest, even if you sincerely believe it was an overreaction by the government, that doesn't mean that it objectively is. There are numerous cases of fathers not wanting to believe the worst about their wives. Again, I'm not saying this is the case -- only that a little cautious objectivity is a reasonable stance to take when a lot of money is being moved around, perhaps from people who can't afford it. For what it's worth, I hope that it *was* just a misreading by the government and things end up getting straightened out in the end, because that's the best scenario for the children involved.
cron can't be easily edited on the fly when you have thousands of timed events.
That makes sense, I guess I've never run into the issue that this package solves. That's probably why I couldn't see the usefulness 
Sigh.
"Encoded" code is surely just as vulnerable to piracy as source code, I would think. So the only benefit I can see is it making it harder to take ideas from your code. I doubt, though, that for any PHP app the code is going to be doing something interesting enough to be worth copying. I imagine that giving your customers actual code will make debugging easier when they end up with errors.
You'd be wasting your time (and, likely, your dollars) if you decided to invest in an encoder. [It's not even theoretically secure](https://eprint.iacr.org/2015/753). If your client can run the program locally, they can necessarily reverse engineer it. If you want to keep the code secret, consider a SaaS instead.
you could try going PaaS or SaaS and see how it goes
Is there a preferred method for storing settings? Possible options (certainly not exhaustive): - As a PHP file (e.g. `settings.php`) which contains an array, or bunch of `define()` commands. - As a JSON file on disk - As a JSON encoded object in the DB - XML, yaml, what have you else My personal favorite is JSON on disk. JSON is readable enough for humans, easy to work with, and because it's on disk (on a location relative to my bootstrap script) I don't need to store DB credentials somewhere else. Also, I can store layers of settings, rather than just a key/value store. I also make it a class for auto-complete. 
There's a group of people that like `.env` files (pronounced &amp; googleable as "dotenv"), often through [vlucas/phpdotenv](https://github.com/vlucas/phpdotenv). The main advantage is that the format is also `source`-able in bash, meaning it can be used to populate actual environment variables for CLI tools quickly and easily. The disadvantage of that file format is that you're restricted to what bash can understand, so no nesting / arrays, and no hackery using dots in the variable name to get around it. A disadvantage of the linked library is that it actually pulls the configuration data into the current environment, which is not always exactly what you might want. I recently ended up using [m1/vars](https://github.com/m1/vars), which can read a whole bunch of config file formats (if dependencies are present), including `.env` files. It'll populate the local environment only if you ask, there's a method to get the loaded configuration set as a simple nested array, and it can do caching of the combined configuration files.
It will be awesome when it can encode a project \m/
What exactly is the point of "encoding" your code?
&gt;copycats How hard do you really think your idea is to copy? I would have a seriously hard time thinking about any particular piece of PHP software I couldn't just look at, and go implement myself without ever seeing your code.
Thank you :D
&gt; We aren't able to use any frameworks (like laravel, but open source stuff from github is fine). In other words, you can use a library but not a framework. If you have not done it, then install composer. &gt;Also how should we go about keeping our database connection details secure? Currently we have a config file with our amazon RDS details. We include this page on every page and when we have execute queries.. I did such projects and best thing I learn was to **start from front end**. If you start with backend, i.e. make a db schema, add crud . then the moment you show it your teacher, your project requirements will *change* and all your will be required to redo whatever you have done.[real story]. So start from front end. design site map. which pages will exist and what those pages will contain(forms/ content) And when you have coded the html and css, tell your teacher about it so they can approve it or suggest changes. once front-end is finalized. backend will be a breeze. as long as you follow object oriented paradigm and code in layers So start from front end. design how pages will look like a user. Best thing would be to read "Don't make me think" 
* I wouldn't use a framework. * There are plans to remove mcrypt and such and such. You may want to research what is going to be removed in the future, just look at the approved internal plans for PHP 7.1 or 7.2 etc. * Also I would make sure that it will work on HTTP2 and HTTPS. * And version control.
I have to wait 9 minutes two times to reply you. But I am sorry, I don't understand you. My English is not good so much :D
It's for developers like myself who sell software directly as an installable website on a stand-alone server rather than a saas product. If the product was not encoded then it would be shared on blackhat websites or torrent sites within a matter of a few purchases. I could reel of 10 products that have been purchased, refunded, nulled and shared on many sites. The sad fact is, that without encoding the code, then a lot of developers who have families would not be able to feed them. Not every developer has an employer to depend on that paycheck and not every software that is developed has to be open sourced. In fact, I don't recall the name. But one such product was open sourced last year. The net result was that competitors started selling their own version of the software at a cheaper price, not contributing to the code. In the end the developers had to close source the code as they were losing sales.
I would advise a seperate user for each site, simply because of permissions.
Could not agree more. While encoders are generally useless, you can however bake in some sorta call-home system. But since you are providing the source the call home thing can be cracked too. I would probably just choose to go with a SaaS if you are that worried about it.
Yes. Let's be different from literally every other C based language. said no one ever.
Ah so, Joomla extensions then.... Which is one of 10000000 reasons why working with Joomla sucks ass. Find a bug in an obfuscated extension, and you can't monkey patch it yourself, and you can't even help the original developer figure out what is causing the bug, and because it's not open source, you can't even fix it yourself and open a pull request for it. Seriously, fuck obfuscated source code. So ironic that the only community that seems to do that is the "Because open source matters" community lol.
If your producing a web app that you want others to install, having a simple install instruction of "Add this one cron line" is so much simpler than "Add these 27 cron lines with differing times". And now upgrade instructions are the simple "make sure that one cron is still there" instead of "cron lines: remove these 5, change these 7, add these 3". I don't use OP's package but I do get the user to set up one cron job that hits my PHP code. My PHP code takes care of then picking which tasks need running. I've seen something similar in many other Open Source packages - WordPress for instance. 
I see a few wrong things in this: * The name. Why is it called "PHP Notifier", when it is a task scheduler? * The solution is wrong. You run the [Executor](https://github.com/KryDos/PHPNotifier/blob/master/src/Executor.php), which [looks for tasks that should run that second](https://github.com/KryDos/PHPNotifier/blob/master/src/FileReader.php#L32), [executes them](https://github.com/KryDos/PHPNotifier/blob/master/src/Task.php#L110) and then [goes to sleep for 1 second](https://github.com/KryDos/PHPNotifier/blob/master/src/Executor.php#L51). There are thousands ways how this could go wrong. For one this will skip some seconds, because executing a task takes a non-zero time. If there are tasks that run long, skipping tasks is pretty much assured. You are reimplementing an event loop in a wrong way. Now you could put some bandaid on it, for example not look for tasks that should run this very second, but look for tasks that should have run by now. However if you start thinking about corner cases - long running tasks, tasks scheduled for the same time, two Executor processes grabbing the same tasks etc. - it starts growing much more complex and much bigger. Maybe someone already solved some of these questions. * Speaking of reimplementing, you are badly implementing a flat file database with [a combination of JSON data in a PHP array](https://github.com/KryDos/PHPNotifier/blob/master/src/FileReader.php#L43). Again, there are so many corner cases how this can go wrong. Multiple processes accessing the file, file access taking too long, duplicate task IDs... * You put everything into one namespace, but the classes have differing uses * Some docblocks are missing and those that are there are unreliable (eg. missing information about thrown exceptions) * You have not put much thought into logging or communicating with a sysadmin, when you just `echo` [useless information](https://github.com/KryDos/PHPNotifier/blob/master/src/Executor.php#L40) This is neither robust enough for running in production nor lightweight enough for simple use cases. It doesn't function correctly, it has a wrong architecture and in general I wouldn't recommend using it. Don't take my criticism personally and don't let it dissuade you from writing more stuff. Good luck.
In your example - it wouldn't. However, php can optionally enforce strict types. Given proper type hinting and number of arguments, php should be able to infer which method to use: `(Type $a, array $b)`, `(OtherType $a, int $b)`, `(Type $a, OtherType $b)`. I.e. overloading will be available only for typehinted methods.
A similar package to enhance Eloquent models: https://github.com/znck/plug
[removed]
Sorry to be part of your confusion. Don't go crazy trying to be perfect. I certainly have never made code I'm still proud of. Make a decision in how you want to proceed, try it out, and revise (don't waste time waffling in indecision, I've wasted a ton of time in just deciding which way to go). Do try to do most experimentation in side project code instead of code you might be maintaining for years, since it will get **really fucking messy** before it gets clean. (Clean code will, eventually, and perhaps perversely, regress in complexity of all the above patterns, rather than add additional complexity and layers of abstraction. In other words, YAGNI).
Thank you! I will have to re-write my queries using prepared statements. That wiki you linked will come in handy thanks again
This makes a lot of sense, thank you for giving me an example. 
I didn't work with Laravel's scheduler before, but after a quick look I have to say they have a very nice API that I would like to partially "map". thanks. 
Hi, I'll try to share a bit of my experience with Command Bus and Hexagonal architecture, I hope you'll find it useful. First of all, they're two separate concepts. Command Bus is a pattern involving 3 parties: * Command, an objects that contains valid input parameters (basic validation is done in its constructor), and carries the intent (the name should reflect a "command", e.g. DoSomething) * CommandHandler, a service that does the logic related to the Command (it's a one on one relationship), it can do complex validation, persisting, analysis, etc * CommandBus, a service that calls the appropriate CommandHandler for the given Command. The neat thing about it is that it can be a middleware: you can add steps before and after all commands I've been fond of Command Bus because it helped me transitioned from messy controllers to a new way of structuring my application: Commands became very quickly "use cases". I've also noted that I didn't use much the middleware capability of CommandBus (I have nothing to execute before / after, at least nothing common between all my commands). Dropping the Command Bus (I inject directly the Command Handler) and keeping the Command and Command Handler way of structuring my application brought me closer to Hexagonal Architecture. Now, what's Hexagonal Architecture? It's a principle which separates your application from its input (web, cli, etc) and its components (database, filesystem, etc). My take on this principle is: decouple your application from frameworks and third party libraries (access to a database being usually a third party library). If you keep the "Command / Handler" way of organizing your application, then it becomes simple to decouple from a framework: in your controller you extract request parameters and initialize a command from it, then pass it to a command handler. In a command, you extract input parameters, etc. Now to decouple from libraries, you can use the Dependency Inversion principle: make your command handler rely on interfaces instead of implementation (e.g. define a PersistNewUser interface, then create a DoctrineOrmPersistNewUser implementation). With this, you get the possibility to change the database in an easier way (change the implementation) or the framework (change the controller) or to upgrade easily. There's no right way to do things, you'll have to experiment with each solution and see which one fits best your need. That said, I guess my approach puts commands in the domain rather than in application. However I don't categorize things so strongly in my applications (I don't have a Domain, Infrastructure and Application folder) so it's hard to say for sure. I've written about it with some examples, if you want to have a look: * [decouple from frameworks](https://gnugat.github.io/2015/09/30/decouple-from-frameworks.html) * [decouple from libraries](https://gnugat.github.io/2015/10/12/decouple-from-libraries.html) * [different ways to organize Symfony](https://gnugat.github.io/2016/03/16/ultimate-symfony-skeleton.html) * [Command, CommandHandler and service interface / implementation](https://gnugat.github.io/2016/03/24/ultimate-symfony-api-example.html)
I'm sorry but no, cron is hell of a lot difficult to manage if you're in a server that you don't fully control (which is my case) also you have up to a minute of delay between when you input a job and when it's executing.
I think you're misunderstanding the point of hexagonal architecture (or clean architecture or ports and adapters, depending on who you're talking to). The main layers in this style of architecture are 1. Domain 2. Application 3. Adapters 4. Infrastructure Infrastructure is stuff like databases, web frameworks, etc. This is all the stuff that facilitates using the application. Yes, it's important and needed, but it's the least important. I'm not as extreme in opinion as Uncle Bob, but his opinion that you should be able to completely change out whatever data store you're using for another with less than a week of work -- including QA -- fits very well with how *I* see this layer, implementation details.. Realistically, you'll probably only exchange one data store (or framework, or cache layer, etc) for another very rarely -- at least once the application is stable. Adapters are the tools you use to get the application to interact with the infrastructure. These would be ORMs, the actual Controllers/Views/Responder (take your pick, I've heard it called so many times just this week) you write. This layer serves two masters: the infrastructure and the application, with the application winning in a conflict. Usually, these are fairly uninteresting on their own but you'll usually find concretions here of interfaces defined in the application and even domain layer. An example would be the application or domain asking for an AccountRepository and in the adapter layer you'd write a DoctrineAccountRepository. This maps the nasty world of to the nice world your application. The application is a particular orchestration (or set of orchestrations) of the domain. For example, in the banking world you might write a customer portal where they can manage their portfolio -- add or remove accounts, schedule payments, contest charges, transfer money, etc. Similarly, you might have a customer service application where they can see into many accounts, resolve contested charges, cancel payments, etc. These are two applications powered by the some domain. Applications can also impose their own rules on top of the domain's rules if needed. For example, a customer cannot remove a contested charge (otherwise we all would) even though the domain allows this action. The domain is heart of the application. This is where rules that apply across the board are maintained. The domain is the ultimate boss, what it says goes and all other layers exist to serve the domain. Sticking with the banking example, these are rules like: * every debit has a matching credit * debit and PIN transaction cannot be contested * overdraft policies * applying fees and interest to accounts The application and domain layers also expose interfaces for layers further up to implement. For example, the domain might speak about AccountRepository but never implement it because the domain isn't concerned about persistence itself, merely that it can get and store accounts somewhere. So to get to your question, "Where do commands live?" This is trickier. There's good arguments for placing them either in the adapter level or the application level. You could make the argument commands represent turning an HTTP request (for example) into an application action, ergo they should exist in the adapter layer. However, at the same time, commands are often phrased in terms of application and domain language -- CreateAccount, ContestCharge, ChangePaymentDate -- so they belong in the application. I tend to err on the side of the application. I'd prefer a smarter application over a smarter adapter, especially because smart adapters can leech logic. Handlers are very clearly on the application side of the boundary as well, since handlers are specific orchestrations of domain things this is the only layer that makes sense. The command bus is also a little tricky. However, I feel an interface in the application and an implementation in the adapter level is a good plan of action. This allows the application to declare the *how* of communication but not the details. Hopefully this was helpful.
I chose not to vote on this RFC. "Yes" doesn't make sense, because the keyword harms nothing by existing. "No" doesn't really jibe with my feeling that I actually agree with PSR-2's feelings on public versus var. So I abstain and leave it to others to decide.
I'm doing a similar system i'm using `reactphp/event-loop` to do event loops and sockets for messaging. Problem is its out of the normal domain of php so im finding jr can't understand the concepts so keeping it in php because the devs know php is a bit of a false paradigm. 
Should we have to explicitly say `public instance $foo`? Or maybe `public non-final instance $foo` just to make sure nobody gets confused! :)
&gt; Is this safe? Yes, as long as you're not exposing that user ID in a cookie that people can then manipulate. Cookies are a form of user input, so should not be trusted. A session variable, however, lives on the server, and unless the server has been compromised, it's safe to rely on. &gt; Also how should we go about keeping our database connection details secure? Currently we have a config file with our amazon RDS details. We include this page on every page and when we have execute queries we just call $conn which is stored in the config file. This is fine, just keep it out of your web accessible directory. PHP scripts can access any file on the file system. So if your PHP scripts are being accessed via /var/www or /var/www/public or something, then just make sure sensitive config information is not in a directory that the webserver user can access. Also, be sure to keep the config out of version control. One thing to be careful of is this: &gt; document upload (only by admin) but viewable by users That's a potential attack vector that could be open to a directory traversal attack if you use PHP to secure who can access which file. &lt;?php if (!isset($_GET['filename'])) { return; } $filename = $_GET['filename']; $path = '/var/www/documents/'; $file = $path . $filename; if (file_exists($file) &amp;&amp; validate_user_can_access_file($file)) { echo file_get_contents($file); } Then someone can come along and do this: `http://site.com?filename=../../../../../../../../etc/passwd` or some other such thing. The absolute safest way to avoid this issue is to generate a unique ID for the document, store it in the database, then use that requested document ID to fetch the *actual* path to the file to serve up its contents. Basically, never ever let users tell you what path/file to serve, unless the webserver itself is handling the request directly, and your web server file storage directory is configured to be non-executable. 
Exactly. If this were an innocent accident, there is no reason to mention "postpartum depression."
So, I only went about 3-4 iterations deep but this &gt; Fast, secure and free way to protect your code &gt; Update: 2015-07-31 New PHP Encrypt function, bugs fixed and _more secure_ is completely untrue. At some point, the real code is executed. I couldn't be bothered to dig through the various levels of `preg_replace(eval)` and `strrev` and `chr` filler, but all this site does it **_obfuscate_** your source code. What is obfuscation? The basic example is this; say your real code looks like so: &lt;?php echo "Hello World!"; To "obfuscate" it, you instead release: &lt;?php $b='ec'.'ho'; $a=strrev('!dlroW '); $b("Hello". $a); Now it's a bit harder to see the real intent of the code, but it could be easily worked out. This web page insecurely takes your code (no https), does who-knows-what with code you are trying to protect on servers you don't control, applies this obfuscation technique to it (albeit, at a much more deep level), and then makes it available to download at a publicly discoverable URL. Maybe there's more to it, but I kinda doubt it. If you gave this file out expecting your code to be secure, you would be sorely disappointed because, as far as I can tell, it is entirely possible to extract the real code. Difficult, but possible. There are ways to genuinely encode (read: encrypt) your code, [as listed here](http://stackoverflow.com/questions/18203112/is-it-possible-to-hide-encode-encrypt-php-source-code-and-let-others-have-the-sy), but this tool is **not** one of them. _To the author (since you're reading these):_ this is not to say the site/technique isn't worth merit. Obfuscation can be a useful technique to _discourage_ code modification. Giving out code in this form can make it easier to, er, "encourage" a client to pay you to fix things rather than hire someone else who has to reverse engineer it before making such fixes. _(However morally gray one may feel about that is up to them.)_ None-the-less, the process **does not encrypt (encode) source code** in such as way as to genuinely protect it. The site should be much more explicit about what users are getting; and more importantly, what they are _not_ getting.
I'm curious to collect responses about the most useful/convenient and the most annoying/inconvenient thing you experience often in your everyday work with current framework/cms/etc. It might be one thing on each side or more.
So I'm still using CodeIgniter (v3.x) Convenient: Everyone's on the team is familiar with the framework, so task is easier to do, everyone can do code review Inconvenient: get_instance(). Automated tests is hard. Too tight to the framework. Everything is array (Well it makes caching easier). But it's just one of the stack, while the rest is already relatively new.
Hi and congrats. Have you seen any projects that have linked this up nicely to an existing application built upon a framework. For example, could this be used to manage basic content in a laravel application? 
[This](https://github.com/gophp7/gophp7-ext/wiki/extensions-catalog) comes to mind, last edited on Feb 20.
Some ideas: A thumbnail generator/image optimiser A cache warmer and cleaner
What you're looking for is a WYSIWYG editor, just google it.
Hi, Yes, you can do that. See here for more info: https://docs.bolt.cm/master/installation/advanced#mounting-bolt-on-an-existing-application
Not really a question, but I just started doing PHP and I really enjoy it so far, it's a lot of fun.
Thank you for taking the time to reply. I will be checking this out tonight 
I think this fits better with r/phphelp but at a guess it seems your solution is storing the html that the @mention gets converted into. A better approach is to store the raw comment that the user enters and only convert the @mention to the html when rendering the comments on your site. 
You wouldn't recycle "var" for loose typing anyway. We have "mixed" for that. 
Does anyone know a good composer package that will left pad a string? /s :)
Yes this is the correct answer. Consider if you want to use that comment somewhere else at some point that's not in a HTML context. Maybe sent over a JSON API to display in an app for example. The app won't want HTML, it'd want the raw comment. So the raw comment should be saved in the database.
You should definitely use the external API for that: https://packagist.org/packages/k0pernikus/left-pad.io-php 
Completely agree. I've been using the PHP library for [DataTable's Editor](https://editor.datatables.net/) a lot recently. The simple fact that I have the source complete with docblocks makes debugging/understanding it so much easier. Couple that with PHPStorm and I simply ctrl+click to jump into Editor's source, tab completion works well, parameter information is displayed when needed. It just adds another level of usability for the developers working with your code.
- Message queue producers/consumers - Abstraction to 3rd party APIs that require several composer packages (SDK, gruzzle, etc) to push/pull data - Package &amp; deploy phar based tools using debian packages and repositories 
I was about to suggest a tool to sync the contents of a folder with S3, so this is in a similar vein. The plus side is that it's not very hard to do, but still non-trivial;
Something that might be useful for some people: [Pharaoh](https://github.com/paragonie/pharaoh). It allows you to: 1. Download a .phar (say: Composer or PHPUnit) 2. Clone the git repository and build the .phar separately 3. Compare the two This allows analysts to verify a property analogous to [Debian's reproducible builds](https://wiki.debian.org/ReproducibleBuilds). And should one of these sources ever be compromised, it should allow us to detect attacks.
I know you're kidding, but [Stringy](https://packagist.org/packages/danielstjules/stringy) is a pretty nifty string utility library, which actually does have a left padding function.
Great! Also, checkout [PHPToday](https://www.phptoday.org/) to keep yourself updated. Disclaimer: I've created this website.
Laravel: "Shit what's the best practice for this again?"
thanks
Personal preference. I like to verify PGP signatures for anything I download over the Internet, even if HTTPS is used.
&gt;It openly enables developers to build their own applications (called "Cabins"), plugins ("Gadgets"), themes ("Motifs"), and Engine hacks ("Gears"). Why not just call them what they're actually called, so you don't have to explain your own made up names of actual things?
Looks interesting however you are lacking documentation. Re-Post when I can actually figure out how to install and use it.
I think if you have the right command line tools it's not a problem to do via command line, but get some good application specific things (like autocompleting customer names based on directory structure) and you get an application with greater value than you can achieve with simple command line tools
https://github.com/paragonie/airship/blob/master/docs/en-us/01-intro/2-Installing.md
Hi My question spin's off of /u/Nazaar-pc &gt; most annoying/inconvenient thing you experience often in your everyday work None of mine have anything to do with tech, it's all people; maybe I'm loosing people skills; I prefer to think I'm just experiencing a period of being surrounded by unreasonable, ignorant and stupid people. Anyway question is what are some tips / techniques / strategies for dealing with these people and strategies to use to convey value to them?
Any links to resources on implementing auto-complete via `Symfony/Console`
&gt; also you have up to a minute of delay between when you input a job and when it's executing. I would politely suggest that if that minute delay is a real problem for you, a Scheduled task of any kind might be the wrong answer anyway. Have you looked into message ques?
As always when it comes to Symfony Components, probably the best resource you can find is the [Symfony Documentation](http://symfony.com/doc/current/components/console/helpers/questionhelper.html#autocompletion) itself. What I did to do this was to use the S3 library and the `Symfony/Finder` component. You can use S3 as a stream wrapper and then [hook the Finder in to that](http://symfony.com/doc/current/components/finder.html). Then on command startup I created an array of customers based on Folder names through the finder, and put that in as the argument to [`Symfony/Component/Console/Question/Question::setAutocompleterValues`](http://symfony.com/doc/current/components/console/helpers/questionhelper.html#autocompletion)
This was the route my inner compass was guiding me towards. It changes the challenge a bit, since users usually want to apply their brand to the software's views. We'd have to open up some kind of means to edit themes. This might be though, a better business decision. Abandonment related to installation/requirement challenge is traditionally high. The biggest liability here is PCI compliance. I wonder if it is wiser, to set up and offer a PCI compliant service, or, to package things up as an AMI that users can launch on their own accord -- instead of the traditional sign-up and go on a service-provider's website...
This is a fair point. I usually share the same mentality -- that I can probably reproduce most anything I can see. In this case, the outcome could reasonably be achieved, but there's a lot under the hood that could benefit competitors. To code something that does what Shopify does is not too taxing. To reinvent Shopify itself is probably a hell of a job. Thieves I'm not too worried about. Heck, if they're bent on stealing, I'd rather they steal mine! ;)
You're right. This was the foundation for the struggle. It's a strange place where technology tries to solve a legal problem, with a software implementation. It's a strange intersection (license, vs. legal). Truth is, I probably like most other software, couldn't afford to pursue all would-be thieves, so this solution has its appeal. You're right about inconveniencing legitimate customers.
&gt; "Yes" doesn't make sense, because the keyword harms nothing by existing. It may not harm anything, but it also doesn't help with consistency or reducing technical debt of legacy features. So for me the question becomes "does the pain of upgrading code for PHP 8 (with an automatic script) outweigh the benefit of removing legacy features from the language?". There's no absolute answer, but I do think it's a valid question to consider. &gt; So I abstain and leave it to others to decide. I appreciate your careful consideration of both sides. However, the vote is really close right now; if you're leaning more towards one side than the other, your vote could be the one to guarantee that outcome (regardless of what that might be). If you'd still like to abstain then I totally respect that position :)
I agree. In fact, you'd need to deprecate the current usage first before you could change what it does.
Yup... I thought it was limited to just naming of plugins and what-not, but holy shit it's the entire codebase. It's incredibly difficult to find things. There's a reason design patterns have specific names :/ /** * For MVC developers, this is analogous to a Controller */ class Landing That just seems like you're intentionally making it difficult for the user to use your platform. Just seems like a bad idea to me. Where does it end? Why is the database object not called "Map" or something? Will Repositories be called TreasureChest?
That's pretty interesting. Theming shouldn't be a huge issue... Lot's different vendors do this. 
Yes, it's one of the possibilities we're evaluating, the real problem with cron is managing errors and output so we'd like to bring that inside our app (JMSJobQueueBundle does this). What queue would you recommend? RabbitMQ ? 
Please, just stop spamming your tutorials already.
Why the hell hasn't this guy been banned already?
Not sure why you're being down voted. If it's a controller, call it that. Having to learn a whole new vocabulary and translate back and forth just makes more work for every developer. Have user-facing names for things if you like, but that's more a marketing thing. 
Yeah, I just thought it was a bit premature given that the Web server part of the documentation seems to be lacking. Seems cool though, I might have a use case for it.
Step 1: Learn to spell
When writing classes should I include database interactions? or should I extract any database code and make the classes just for manipulative purposes? Currently we have classes which are initialized with a PDO connection and an ID from the database.
I want to see github so I can judge the code harshly. Where is the link?
I see that after my review you managed to set Exception mode for the database layer, which is a good step by itself but it made your code even more inconsistent, with all these [execute result verifications](https://github.com/paragonie/airship/blob/master/src/Engine/Database.php#L633). Let me suggest you to go further and clean up the code of the database module, removing all the duplicated and unnecessary code. Besides, it would be a good idea to make the database module not internal but external, by means of connecting EasyDB through Composer. It will let you to support only one database layer, not multiple and thus fix the code in the single place.
So, you're saying the patterns you're using in your project don't closely follow the defined design patterns, e.g. your Landing does things differently than a normal Controller. Well, what's the reasoning for the "Ledger" then? class Ledger implements \Psr\Log\LoggerInterface &amp;nbsp; It can't be doing things that differently (it's not) if you're implementing a well-defined generic logging interface. So why name it Ledger?
Apologies for sounding aggressive, I've replaced it with a less aggressive sounding word! 
I see a usage for it. I am still using the nucoder tool, which got stuck on 5.3 version. ;-)
I encourage you to try it out
There are three target audiences for any CMS: - Developers: These are the backend-developers. The people who install the CMS, configure it, and build any custom functionality. - Implementors: These are the "frontend developers". The people who structure the content, set up the contenttypes, and implement the theming of the website in HTML/CSS in the templating language provided by the CMS. - Editors: These are the people who work in the CMS on a daily basis. They write new content, edit existing pages, etc. https://opensource.com/sites/default/files/cms-target_audience.png How does this fare for Frontend developers and Editors? "Secure" means nothing, if people can't use it. *Edit:* Also, lingo is bad. [A case against coding Lingo](https://medium.com/@frankdejonge/a-case-against-coding-lingo-8ffae1a4fa4e) 
I think on this forum you'll get PHP as the answer, but you're really not giving many details. What style Q&amp;A? Like stackoverflow? Like either.io? What are the questions like and therefore the answers. What is the definition of notification system, and who's being notified… *This sounds like the [question](https://www.reddit.com/r/webdev/comments/4c9v2n/is_it_me_or_is_this_a_ridiculous_thing_to_ask_of/) from /r/webdev. ;)*
This is one of the great programming-related pieces of literature of all time. I recommend it regularly.
These are great! I have a Wordpress site for my personal blog but I don't use it too often. Been looking out for something using Laravel to help me break into it more so.
You tend to see two main patterns: * "Active Record": Each object is roughly equivalent to a database row, and knows how to load/save itself when asked. Acts mostly as a data-holder. `$foo-&gt;saveNow();` * "Data mapper": Objects don't have any idea how (or if) they're saved/loaded from the database, some "mapper" layer is responsible for knowing how to save/load each kind. `$mapper-&gt;saveNow($foo);` Which one you want probably depends on how simple/complicated your application is, because that'll affect whether certain kinds of overhead are "worth it". Remember that you'll also have situations where you've already changed something in-memory, but the insert/update SQL *fails*, and you'll need some strategy to recover or at least fail gracefully. 
No, there's more to framework's than this. You can have a very long lasting app with a good framework. The mistake people tend to make IMHO is to not decouple logic well enough so that you are using your framework for what it needs to be used for and nothing more. Frameworks are great at routing/dispatching, templates and providing services at the core of MVC (as wrong as MVC is, but that''s a seperate discussion) they allow you to focus on the business logic and easily produce the rest. For instance in your app, as you describe it, I didn't recommend adding a router and dispatcher because I think it would take too much time and distract from separating logic from display. I would suggest that in your notes to whomever takes over you suggest adding a DIC, router and dispatcher. And tbh by the time you have all of that you have something that does what a framework does.
because we are artisans and enigeers my good sir 😏
Except it's not converting it to equivalent code. It's stripping php7 features that maybe might could work similarly if you're lucky. PHP7 wasn't made to be 5 with just different syntax sugar. 
Since PHP7 has a better parser/lexer/compiler will we ever be able to name a ~~method "list" or "try"~~ class List or Try? Update: we already can use method, but what about classes? https://3v4l.org/e148D
They are data-manipulation patterns. One puts the logic for when-and-how to load-or-save into the object that's being constructed and passed around, while the other keeps those rules "off to the side" so that the class knows nothing about persistence. It makes it easier to unit-test. Here's a sketch of a data-mapper approach similar to Doctrine's: /** * @Table("my_table") */ class EvenNumberHolder{ /** * @var int * @Column("my_id") */ private $id = null; /** * @var int * @Column("my_value") */ private $value; public function __construct($value){ if($value % 2 !== 0){ throw \Exception("Dude, that's an odd number."); } $this-&gt;value = $value; } public function getId(){ return $this-&gt;id; } public function getValue(){ return $this-&gt;value; } } With this formulation, you can feel confident that there are no "half made" or invalid instances floating around. Ones without IDs are just ones that haven't been saved to the database. Another sketch: $obj = new EvenNumberHolder(1234); assert($obj-&gt;getId() === null); // Makes sense, it hasn't been saved to DB yet. $mapperThingy = getMagicalPreconfiguredDataMapper(); $mapperThingy-&gt;persist($obj); // Uses reflection and other magic to save to a row $id = $obj-&gt;getId(); // Oh hey, it also used reflection to set the ID after inserting. Great. // Reset state just to force it to do an SQL select and re-load $mapperThingy-&gt;clear(); unset($obj); // Loading an already-saved object $obj = $mapperThingy-&gt;find(EvenNumberHolder::class,$id); assert($obj-&gt;getId() == $id); assert($obj-&gt;getValue() == 1234); The key here is that the data-mapper can use tricks to *skip* `__construct()` and *directly modify* private variables. Normally that'd be worrisome, but IMO this particular scenario is almost exactly why that kind of black magic exists in the language.
&gt; it feels a little wrong to effectively leap over the application layer into the domain layer to instantiate the command. I'd look at it this way: Commands are one of the few classes from the domain you **are** supposed to instantiate inside the application, because they're basically *messages*, a codified and validate-able way for the application-code to communicate something inwards to the rest of the domain-stuff. A similar case exists with certain interface-definitions, where the domain says "Can you pass me something that fulfills this? Thanks." The code lives in the domain, but exists to be used by the application.
The standard is indeed private with getters and setters. I judge it on a per case basis. Small projects that likely I'm the only one to ever touch? public it is. Unless of course there's a compelling reason not to.
The @ should be stored separately from the text of the comment. Then the visual display of the comment is synthesized from the two pieces of data.
I support dropping the function keyword requirement too, and instead replace the keyword function by return type. This return type hinting implementation is much better than the current implementation: public int sum(int $x, int $y){ return $x + $y; } 
On the other hand, if you are writing it not for yourself but for anyone else, it will do no good. Either you are writing for yourself and use this product heavily, or it will forever remain a toy, useless for anyone. Because only practical use can justify code mistakes.
So you propose there should be no function like insert() at all?
Thank you all! I love slim framework, a lot of my small/mid sized projects are based in slim :) I was wondering if there are some CMS based on slim out there...
http://githubstars.com/
I just don't understand how this is more intuitive (or deployable) than Vagrant.
Hi @CodeShaman. I think your project is quite interesting. In fact I think I'll use it as soon as possible! I'm developing a PHP kernel for Jupyter ( https://github.com/Litipk/Jupyter-PHP ) and your library would be a dose of fresh air to improve it :) . Since the release of PHP7, this language has become more suitable for data science tasks, the main problem is the weak applications and libraries ecosystem around this subject. Thank you for your efforts.
Looks useful from a first glance. Whish there was a one-page version too (or is there? Didn't see one on mobile)
That's interesting. I was hoping they chose EmberJS though. Ember's really nice. 
re: the safe navigation operator, `?-&gt;` has been proposed for PHP in the past. One nice thing PHP has is that type hints don't accept null by default.
That's a nice usage of PHP parser. It makes me think of https://igor.io/2013/07/26/evolving-syntax.html
Maybe they also use sock puppet accounts?
Angular is highly popular. Maybe they expect it to be the most used.
As someone who wrote some Java in the past, I'm glad we can't pass null to a typehint. Because an opportunity to make mistakes by forgetting to test for null means sooner or later you end up making them. If you explicitly want null to pass just declare a default parameter. 
Thx, you're right. I was in mobile while commuting so I didn't see it right when I tested
I'm just going to add a footnote to your points and say that the main things to get right when building a CMS are the database and storage schemas. If these schemas are woefully inadequate, your data will suffer, your developers will suffer and the consumers of your data will suffer. Now more than ever, different applications beyond the web browser, as well as services written in any number of languages, need to consume your data in varying formats. If it's too difficult to get your data out of your system to be delivered to your "consumers" or is otherwise mismanaged, you've lost the end game from the start.
Laravel's recently adopted vue, the js wars are so up in the air at this point.
&gt; Vagrant shouldn't be used for deployment though This thing doesn't have anything to do with deployment though, does it? It's just a docker **dev** environment. So.. to me, this seems like it adds unnecessary complexity on top of a process that's [incredibly simple in alternative approaches](http://www.sitepoint.com/quick-tip-get-homestead-vagrant-vm-running/), while at the same time being undeployable because, let's face it, the majority of apps developed on this will be pet projects deployed on a single server, and thus unfriendly to Dockerized deployment - enterprise apps with long term plans will build their own proper development environment and distribute that. Or am I getting something wrong? Edit: why the downvotes? I'm genuinely curious if I got something wrong. [This tweet](https://twitter.com/mfdii/status/697532387240996864) seems relevant.
Thanks, It sounds like we might be dealing with separate issues, but your suggestions are good!
I'm not entirely sure I understand what this means, can someone please explain?
This is dirty. I feel dirty. I'm going to go shower.
So, I get the desire to remove all the 'boiler plate' code to safely extract some nested value, but isn't this just a bandaid to the real problem of 'why' we are extracting a nested value? Everyone loves dependency injection these days, but isn't this just a form of dependency? Should there be a different approach here? Or maybe.. We have all been 'doing it wrong' all these years, and we should change our approach rather then introducing a new gimmick to reduce our keystrokes? Not to say I don't want the new operator, it sure would save me many keystrokes... I just wonder if there is a bigger problem here we have all been ignoring?
I'd like to use C# from PHP instead
Working on it...
Seriously? /r/php
You're going to be hard pressed to find a FOSS with that level or organization.
Can it do pdo?
&gt;this is in the making and will be possible soon Possible on Linux? I'd look forward to trying that... 
Why not :) Just one example: running WordPress on .NET, with plugins in C#, and the WP core itself being subsequently rewritten to C#.
Not at this second, but it will be able to. Phalanger (the predecessor of Peachpie) could do PDO and this feature is on the roadmap for Peachpie as well.
Do your own homework. 
1) Do your own homework or post to Stack Overflow 2) /r/phphelp
Your were were so preoccupied with whether you could, you didn't stop to think if you should.
95, 98, Me were using hacked DOS for starting, even though they had their kernel, it's a common misconception that they were running on top of DOS. XP was the first to bring NT Kernel to consumer market.
Huh? So what is DOS? What's the difference between DOS and NT? I thought DOS was just command line
You've created a monster...
This would explain why: http://buytaert.net/selecting-a-client-side-framework-for-drupal 
I have no idea if it's any good but here's the simple todo app I was making to learn slim3. Honestly can't remember whether I finished or not though and whether it's any good in terms of how to use it, I trawled GitHub and Google to find tutorials and this is kinda an amalgamation of all the tutorials. http://github.com/snsmurf/slim-todo-app
Yep, it's a Law of Demeter violation. If you're doing deeply nested property or method fetches, you've passed in the wrong dependency and/or your object hierarchy needs to be rethought. One might argue it's a GOOD thing that it requires effort to safely extract a nested value, because then it makes the code smell more obvious.
Really? Where?
:)
But - if you're interested https://github.com/laravue/laravue
We don't expect developers to switch from their language of choice, neither do we expect people to "choose" one or the other over their preferred language. The idea is that you can use both in the same project and have the individual parts be perfectly both-way interoperable, so pretty much perfect for someone like you who uses both.
Looks pretty much identical to every other Active Record ORM I've seen. Are there any particular features that differentiate this from other PHP ORMs? Regardless, excellent work building and releasing an ORM regardless. Every time I've consi something similar the amount of effort required seems ridiculously high.
The default option here (setting Type to null) just does a [libphonenumber](https://github.com/googlei18n/libphonenumber) lookup. (Edit: The docs say it uses libphonenumber for formatting, not necessarily for the validation). Setting Type to `carrier` or `caller-name` will actually lookup data from the networks, and costs. If you want to do this lookup locally, then (shameless plug here) use [libphonenumber-for-php](https://github.com/giggsey/libphonenumber-for-php).
I believe we all deal with terminal and it's fine to share something related, anyway I apologize if it's not the best sub for this.
DI can for sure help to reduce these kind of problems. But I assume many of the problems ahead stem from languages that traditionally work with long running processes and object construction is cheap compared to the uptime. The example in the blog post is probably bad, traversing windows, dividers and input elements would make more sense. The other thing I wonder about is how these solutions affect the implementation of functions that accept a Maybe/Option type. If you always have to code towards it, the problem is just moved to another place. Anyway, I am a pragmatist. I find it sometimes useful to create chaining interfaces, but most of the time when I need that they are deterministic and cannot produce null values, or if so the user made a mistake. The blog post does something I'd never do, traversing an object tree of *data*. The root of evil is probably the old habit of combining data and behaviour in objects, which results in object trees that have no common way of traversal.
Thank you! I recently used your library for phone number validation and conversion to E164, saved me a ton of time.
Pretty cool! Would be even better as a local lib, but not bad for a free api.
In the example you gave me, does the dot stay there after the $string or do i replace it with my variable? Eg. $string ID= '&lt;td&gt;'.$ID.'&lt;/td&gt; or like this: $string .= '&lt;td&gt;'.$ID.'&lt;/td&gt; Also does this string bit go in the php or where i want the table? Thanks for the repsonse! 
[.= combines/concatenates strings](http://php.net/manual/en/language.operators.string.php) $string .= "example"; is the same as $string = $string . "example";
Oh thanks!
Pretty sure Laravel Spark is going to have a vue front end, so perhaps that's what you may have picked up on somewhere.
&gt; If these schemas are woefully inadequate, your data will suffer, your developers will suffer and the consumers of your data will suffer This is why I would go so far as to argue that a pre-built CMS-for-developers (or a generic do-everything-CMS like WP or Drupal) is a fundamentally flawed concept. Data is foundational to a site, but also "personal". The relation schema is often very unique from one site to the next. The attempt to abstract such data storage into a single schema is inherently wrong at every level. Really, a CMS does *nothing* useful for you that you can't do just as quickly (if not more quickly) with a solid framework, ORM, and DBAL. A CMS with a pre-defined schema and opinionated relational structure can *only get in your way*. A CMS should exist for a specific problem space, and if your problem fits what the CMS can solve, use that CMS, else, build your own application using a real framework.
A simple but useful example might be a todo list phar. Some example usage on the command line (indented lines = output) todo.phar add take out the garbage - adds a todo to the list [1] take out the garbage todo.phar add clean the bathroom [2] clean the bathroom todo.phar add remodel the bathroom [3] remodel the bathroom todo.phar list [1] take out the garbage [2] clean the bathroom [3] remodel the bathroom todo.phar done garbage completed [1] take out the garbage todo.phar done bathroom ambiguous task, did you mean: [2] clean the bathroom [3] remodel the bathroom todo.phar done 2 completed [2] clean the bathroom todo.phar clear your todo list has been cleared todo.phar list nothing to do
 FROM ubuntu:14.04 Sorry to say this, but this isn't docker way. The main point of Docker is to provide you a set of base so instead of one fat self-maintainable container you should have 3 containers, one for PHP (everything that relies on php, i.e. fpm, cli, scripts running by crontab or event all this should be plased in separate containers if you are planning to use this stuff at separate hosts), one for MySQL (you could then easly switch to mongo or postgresql or enything else, and one for Nginx. Protected variations, everything that could be changed should not hit anything else. 
Great job, thanks! Though todo might be too common, it looks good for anything.
that gives further justification to choose ember over angular. especially if we consider that angular's large community support is meaningless for angular2 and a good framework should be opinionated 
the fact is taylor otwell and jeffrey way prefer and advocate vue over other js frameworks. So laravel community has tried, liked and chosen vue over other frameworks. of course, laravel devs use all kinds of js framework/libraries but majority of them --I heard it somewhere-- prefer vue due to its simplicity and backing of laravel's top coders.
Like I said type hinting. When use getters or setters and type hint to make sure what you are saving in your field is actually the type you expect it to be. If not type hinting then you can run a check on the argument passed to make sure it's of type Int or whatever you want. If you just make them public anyone can save anything in them and later in your program. You might run into issues working with that field
That does look like it. though that means they have not done any serious research on angular 2. otherwise they would be avoiding angular like rest of us.
You can specify null as a default to a type hinted parameter though.
Right, and the important part is that while the `$foo` you see at runtime *may* be a proxy, the fundamental definition of your `class Foo` is persistence-agnostic and could theoretically be used with "NotDoctrine2" without changes.
You need to spend less time giving things names that nobody realistically cares about, and more time on the actual system... Seriously. "cabins"?!
Ah. So when you fetch records using doctrine, the results are not really your entities, it's a proxy w/c means the object is orm aware. So it's just the same with SQLAlchemy when using SQLAlchemy's classical mapping. It's a leaky abstraction but I guess it doesn't hurt if its a proxy if you don't mess with the internals of the proxy object. But if you want to take it a step further, you can convert the proxy to the real domain entity. We can achieve this by using 2 entities (orm entities and domain entities) like what uncle bob suggests in this post - https://groups.google.com/d/topic/clean-code-discussion/EyTIuGt_yTA/discussion Here's another related post - http://stackoverflow.com/questions/18503160/convert-hibernate-orm-entities-into-complex-objects-and-vice-versa
That's why I said *by default*. You can make a parameter nullable if you want it to be.
I am currently using the NGINX fix, by using $real_path instead. fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; to fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name; fastcgi_param DOCUMENT_ROOT $realpath_root; Edit: fixed example
&gt; But if you want to take it a step further, you can convert the proxy to the real domain entity. This is not possible, as you would break the identity of the object. One invariant of running Doctrine requires you to have one object per identifier per type per unit of work. For instance, inside a single `EntityManager`, only a single `User` object (proxy or not) with id `123` is allowed, or else there be dragons. &gt; the real domain entity Not worth it: unless you are doing really hacky stuff, like serializing the entity (PHP serialization format) and pushing it to a message queue (for which you will be spanked by your ops and sec engineers anyway, if that's the case :-P ), then there is no need to modify the object, as we only load its state when required. The proxy is already a type-safe and faithfully represented instance of your domain model. We went so far that we even support lazy-loading public properties, should you try finding edge-cases that require them.
Regarding quirks, can you kindly give an example?
Tables with 2 fields and without business rules are too common, and make web development the easiest of the tasks.
One thing that should be noted here is the size of libphonenumber. It's over 20meg, and has a huge number of files inside it. Not a showstopper, but massive overkill for a vast majority of projects.
&gt; Thanks to my colleague Mattias, I discovered that my Capistrano deploys were not automatically updated on the server. This was caused by the fact that PHP 5.5+ OPcache ignores Capistrano’s symlinked deploys. Isn't this a feature rather than a problem? It gives you chance to check everything is in order before switching over to the new build.
This is exactly why my company (selling add-ons to forum software like vBulletin) does not use encoding. Pirates gonna pirate, but when you have to support literally tens of thousands of different servers, you KNOW one of them isn't going to have your chosen encoder extension installed. You might think that one in 10,000 isn't that bad, but consider this person having spent £75 on the most expensive tier of your software (lifetime updates), and you're telling them they can't use their software for what is to them an arbitrary reason. In short, encoders are textbook for how to lose business. Consider using your efforts on reducing fraudulent transactions (we require extra checks if the PayPal email is a mismatch to the eCommerce site registration email), and force users who request support to give you their site URL. You can easily tell who just fills out "google.com" or "localhost.com" and deny them support. 
Uh, how do you expect that to work? In order to get the value of `$var1`, you need to execute the code that assigns it. What if the code in `&lt;executable code&gt;` changes the value of `$var1`. You can't just execute partial piece of code. What you could (and probably should) do is separate your code in files, classes and functions so that you can run exactly what you need without running the rest
Well, the executable code doesn't change var1, but yeah, I get your point. Sadly I cannot seperate because I'm basically trying to write a simple debug file.
What are you *actually* trying to do?
Is this debug meant to happen automatically every so often, or are you just trying to do a once-off debug to find out where and why the code is breaking?
Second. It's supposed to be manually opened and only then show what's wrong.
You want /r/forhire.
If I understand correctly your code would basically skip over everything that isn't the searched variable and thus not check if the codes working, right?
yes
There's a good reason for this syntax, although I'm not certain if this is the reason it was actually chosen. Imagine you have the following code: `i =- 1` Now remove the spaces (which is valid in most languages): `i=-1` With your suggested syntax, are we asking for `i = i - 1` or asking for `i = -1`?
It looks like there has been a lot of work put into this project. However, I have quite a few fundamental issues with this: - The use of non-vanilla docker ecosystem. E.G. using Vagrant instead of Docker Machine - Also, when using Vagrant, there is no vmware-* providers, it doesn't use vagrant_auto-network plugin and arbitrarily assigns an ip address to the machine. - There is no need to create an nginx image when you are only adding in the nginx.conf. Just map the file via docker-compose volume - The PHP-FPM Dockerfile should not be editing the php.ini file directly, just create a 99-custom.conf in the conf.d dir. - Specifically, when using Symfony, you can add a volume for your cache directory via docker-compose to eliminate the slow io and permission issues. I am really enjoying all the effort being put towards Docker but I don't think people are following Docker best practices and hacking things together.
&gt; I guess I'm used to thinking of it in terms of composer-units, in which case the "final website project" is what is "deciding" to use Doctrine2 It sounds like you're referring to [dynamic bindings](https://en.wikipedia.org/wiki/Late_binding) in which case the application layer is an ideal candidate. Usually when I think of the application layer things like migration scripts, routes, Application Services, etc come to mind. It's the part of your system which encapsulates the domain and exposes specific use-cases to the outside world.
Most included parts have several MySql quieries and thus have a or die() so if one of these fails, the var at the end won't be displayed -&gt; we then know which file is failing.
So you have a list of files, and you want to execute them one by one until one of them fails. If that file fails, then show which file failed. If they all passed, then you know you have a success?
This is the main reason I've opensourced the project; please do come along and contribute if you have the time. Regarding the use of vagrant specifically, I wanted to provide with a quick way to simply load up the environment with tooling which will most likely be present already on people's workstations, namely vagrant. Thus users wouldn't need to install the extra docker machine tooling, and only need to vagrant up. I haven't expanded on vmware support because the vagrant way is, and should be, on the way down because of Docker going "native" on both Mac OS and Windows (which I'm sure you've already read about, see https://blog.docker.com/2016/03/docker-for-mac-windows-beta/). And please, do contribute if you can on your ideas. If no time for PR's, which is understandable, perhaps opening issues on Github describing how you'd go on about implementing them would really be very helpful.
Whoops, you're right!
Neato
The title was changed, which changed the slug. New link: http://phpdocker.io/post/2016-03-30-13-47-open-sourcing-phpdocker-io-postgres-and-elasticsearch-support
Absolutely! They should at least name it $x1. 
/r/cringe /r/ComedyCemetery
Apologies, the slug did change as I forgot to restrict the doctrine behavior to creation only. Original link is now back.
Please don't post RFCs that are obviously not ready to be posted yet. It's quite obvious this isn't meant to be announced for at least another 18 hours or so. You should wait until the RFC is announced on the internals mailing list.
I wouldn't consider them shortcuts. They all complete the same task, yet they are all done differently at a hardware level. `x = x + 1;` Would be looking for the value of x, storing it in the accumulator, adding 1 to the accumulator then placing it all back in x. `x += 1;` Would be finding the value of x, and adding one. `x++;` Would be finding the value of x, and incrementing it. There is even a difference between `x++;` and `++x;`; preincrement and postincrement, respectively.
I don't think it's April 1 in any timezone yet...
I was looking for LaTeX parsers and came across this on Packagist. It was buried pretty far down on the list, and it only accumulated 2 stars so far on Github. I haven't audited it thoroughly yet (so I don't know if I'll end up using this one for my project) but thought it was neat enough to share here. All the other TeX parsers seem to emphasize PDF or PNG rendering, not HTML.
Assuming it'supposed to be a joke, we can conclude that some geeks lack sense of humor.
**Nothing** is fit for _all_ purposes. If anybody tells you that their product is, don't trust them. ;-) That said, Bolt is ever more flexible and versatile. Give it a try, and don't hesitate to get in touch (here, IRC, slack or forum), if you have questions. 
I think that this is not so useful, too basic, at least if you want to have same document for publishing (pdf, dvi, printing etc) and html representations like blogs. It will work only for simple documents, without packages at all which is really uncommon, it looks like it lacks support of macros - which make latex so cool. However it can be used as latex subset for creating blog pages if someone likes syntax, but I think that there are better tools for formatting simple pages. 
&gt; Implementation &gt; &gt; When Nikita provides a patch, we will link to it. LOL.
From php.net &gt; Note: Because of eccentricities in the performance of libresolv between platforms, DNS_ANY will not always return every record, the slower DNS_ALL will collect all records more reliably So I guess it's just cross platform reliability. Based on this is just use all
&gt; Right now our server is running 5.6. Is it worth the upgrade to PHP 7? What makes it worth it? I quickly checked my code and it seems like it would be fine You'll most likely get better performance and ability to use PHP7 features.
define('APPDIR', realpath(__DIR__.'/app/').'/'); define('SYSTEMDIR', realpath(__DIR__.'/system/').'/'); define('PUBLICDIR', realpath(__DIR__).'/'); define('ROOTDIR', realpath(__DIR__).'/'); Nah ...
At times I could do more than just downvote, especially if the site itself doesn't allow for constructive criticism. Marking this as spam would be an abuse of reddit's system though, right? The submission isn't spam per se, it's just from a site that promotes objectively bad practices. Thank you for taking the time to reply though!
Uhm, I'm fairly sure all three operations result in loading the value to the accumulator and incrementing it (it can't just add a value in RAM). Unless x is already in a register (it's probably not).
Wouldn't it still execute the same way? That just sounds like a shortcut instead of a different routine in the CPU. 
Wow, the accepted answer at the link is very impressive. Also makes me very happy to work with higher-level languages.
If you feel something is really bad content, please feel free to report it. We play a bit loose with our "rules" to try to keep things as high quality as we can, so I'm not opposed to removing shitty content purely on that basis. The spam filter also, I believe, trains per-subreddit, so marking something as spam isn't really going to cause a problem for anyone else.
Now that you say that, it makes perfect sense. And I can't believe I didn't see that earlier. It happens sometimes when I'm typing out some code where I pause trying to remember if the equal sign is first or second. Hopefully, I'll never do that again.
I get that this is a joke... but this is pretty stupid.
Oh, snap. I didn't realize the author was here. Haha. That's a bit embarrassing. :) Thanks for updating the article! Just had a look at it -- looks good!
Thanks. ... I still don't get it.
You *need* to have a database. Not just for this, but to cover your own behind. If somebody uploads illegal images to your server, you're in big trouble. Log basic info (unique ID, time of upload, IP Address, file name), every time they upload. Then, make a call to your database to pull the image names from there and load them in the website. This will help you stay organized (can sort by recent uploads), make it look nice (instead of a simple directory), and cover yourself in the event something goes wrong.
He's insulting Wordpress. He's saying that poor coding or syntactical issues are not the problem with Wordpress, but rather bad fundamental architecture decisions which were made a long time ago but plague Wordpress to this day. He does not expect your compiler to fix this. He was just taking the opportunity to take a shot at Wordpress.
aka [What is the name of the “--&gt;” operator?](http://stackoverflow.com/questions/1642028/what-is-the-name-of-the-operator)
Thanks! Looks like I'll be upgrading tonight
No, but an AGPL password manager would be a funny move.
I know this is a late answer but using getters and setters has benefits beyond security and encapsulation. They are also a great way to keep your code DRY. What happens if one day, you realize that you NEED to perform some logic on a property when setting it's value, like notifying an observer of a property when it changes? If your class properties are public and you can just grab them from anywhere and/or set their values from anywhere, then you will have to add your new code to every location in your codebase that sets or gets that property. Whereas if you use proper setters and getters, then that code only has to be in one place. Some examples: * adding an observer to a Product class to monitor it's status with a setter: public function setStatus( $status ) { $this-&gt;status = $status; $this-&gt;notify(); } without a setter: // have fun adding observers to all of your classes that are modifying your public property * validating that a property has been initialized properly when retrieving it with a getter: public function getThing() { if ( ! $this-&gt;thing instanceof Thing ) { $this-&gt;thing = $this-&gt;initializeThing(); } return $this-&gt;thing; } without a getter: $thing = $someClass-&gt;getThing(); if ( ! $thing instanceof Thing ) { $thing = $someClass-&gt;initializeThing(); // assuming initializeThing() is public !!! } pretty much the same thing except you have to do that last bit of code EVERYWHERE you are grabbing your public property. That's a lot of unnecessary redundant code. And what if later on you need to tweak that code or fix a bug in it? Now you have to chase down every place you added that. Save yourself the pain and hassle of eventually having to refactor your code to use setters and getters anyways, and just do it correctly from the start. Another pro tip: get a good IDE like phpStorm that can generate getters and setters for you. I can create a class with half a dozen properties on it, and then literally generate my getters and setters for all of those properties with just a few keystrokes. And there's templates for the setters and getters to, so I have total control over their naming and structure of them. There's just no excuse for cutting corners imho.
 &gt; into a design for Aggregate Roots Yes indeed! eager-loading traditional OO-to-RDBMS structures may end up in a big mess, but for aggregates this should be fine, as an aggregate shouldn't have any references to external entities (outside the scope the aggregate closes around)
&gt; I assume it's not possible to achieve when using Doctrine right? Regardless of doctrine, there is no way to implement lazy-loading in a transparent way, unless you want to tie directly into the php engine and implement it there (via AOP or similar). Note that userland AOP implementations also use proxies to achieve this sort of behavior (intercepting access)
 * you need to rely on `Doctrine\Common\Collections\Collection` instead of plain `array` * some values may be set by the ORM (identifiers, if you use `auto_increment` or `serial`) * some exceptions may be thrown by the DB layer from interactions with your domain, if the DB fails * some assumption about the internal state of the object are required: for instance, the ORM will only save/load mapped fields, and (de-)serialization does not always match what you wanted to design for your entity/embeddable model
Merging into the Core is a bad idea. Remember what happened to Gaster? 
I think you may have started off recording the wrong screen. Sounds interesting though. 
How this Sitepoint article is related to laravelfeed?
This is actually about programming - "The number of programmer in the world doubles every five years. That means, *at any given moment*, half the world's programmers have less than five year's experience." Robert "Uncle Bob" Martin "You! You know something other developers would be amazed of. But you don't know what it is because everything you know seems regular to you" - Claudio Zizza Why and how you should start to take a leadership role through teaching what you know.
Same question, especially considering when you get to the bottom of laravelfeed article, to read the rest of the article you have to click a link to the actual sitepoint article which will iframe load sitepoint within laravelfeed. Ripping off content?
Sweet! I can stop compiling my own on both my servers.
When will 16.04 release? 
Ubuntu version numbers relate to their release dates, so 16.04 is year 2016, month 4, so April.
04 releases are normally released in the later half of April.
&gt; This legacy feature costs precisely one line in the parser. So the benefit of removing it is vanishingly small. Best reason ever to just leave it. There is no point in deciding this if it is that minor of a change internally and it isn't hurting anything in reality except some minor cognitive overhead between projects that chose differently.
I've been using 16.04 for a few weeks now (because I'm a massive hipster/broke my last Ubuntu installation) and swear it defaulted to PHP 7 then.
And 13 hours ago, that did not exist.
Good post. I'm writing the book I wish I had when I was learning to program and I'm feeling the "A book that is too broad will probably never be finished."
Your description of the problem is some how lacking. But you can always check the validity of the code using the php interpreter: exec('php -l '.&lt;file_A&gt;, $results, $return); There are also sandboxes script around that you could use. But again, I don't quite understand your problem based on the description (Nor youre replies on the thread). BTW, Wordpress does something like this with plugins, so you could check its code as well.
Yep, so 15.10 was 2015 month 10 (October), and they always release major versions in April and October. It's been like that forever :)
&gt; Specifically, when using Symfony, you can add a volume for your cache directory via docker-compose to eliminate the slow io and permission issues. Hey, do you have any example on how to do this ? I keep running into permissions issues, and I had to use an usermod trick that I don't like.
PHP7 and PHP5 are just mods to Apache you can actually switch between them. 
I get that. I mean, when I run: *php -v* it has always said PHP 7. Maybe this article is a bit late.
Just as a comment: PHPExcel is heavy and CPU intensive. I've seem it's processing time get 2x faster with a simple version upgrade and without any BC break. It's really that good.
This is why we can't have nice things.
My problem with PHP dev on a windows machine has always been that MySQL performance is shit. If that improves with the new Ubuntu features, then I would be able to tolerate working on a Windows machine. 
Personally I stopped using mysql, I think its shit to be honest. I moved over to PSQL, if they bring this linux tool over then I might be able to just install PSQL inside of it and work from there via exposed ports. 
I'm stuck with MySQL for the large application that I support.
I use windows with linux vm in virtual box, so I get best of both worlds.
What's the downside?
I don't know for sure why DNS_ALL would fail (assume there aren't any warnings being output?). It could be that godaddy has some sort of throttling and/or deep scan detection going on. Or more likely, give who it is, they're just incompetent buffoons who did something to break one of the oldest and most stable protocols on the internet. The Net_DNS2 suggestion below is probably your best bet tbqh.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; Will you do PHP development on the dreaded windows? Is there a loaded gun pointed at my head? Is the safety off? Is the gunman not distracted? Okay, I'll develop on Windows.
Nay.
It would be there.
You essentially have ubuntu right at your finger tips with out a vm or some other trickery
LOL
Sure - why not. I have been developing on Windows for ~10 years. The experience used to be absolutely god awful but the last 2 years have really been good to developers. Aside from installing c++ build tools for some node-gyp NPM modules (the horror), I have had no issue. As a dev server I have run easyPHPserver for a while - easy version switching and all that. For benchmarking and testing we have dev / test / uat servers that mimic production so no issue there. Have not started a local VM (except for Docker) in a long, long time. Other than PHP all (newer) JS projects run some sort of NPM server so who cares what OS you are on. `gulp serve` and away you go. Been using cmder as a replacement for PS - but if I can replace it with bash, even better!
I think you'll like this new ubuntu tool.
There are lots of people who can vote who don't still contribute code, and that's a good thing in my opinion. Some people have historical, industry, and community knowledge that is valuable, but don't necessarily have time to contribute to the PHP project itself. It's in keeping with PHP's meritocratic governing. The subject of who gets to vote comes up every now and then (particularly around accusations of brigading), but it's generally agreed that nobody wants to actually do anything about it because for the same reasons we'd remove some people who we don't think should vote, we'd have to remove some people who have invaluable insight.
It probably has been like this for a while now, but there was some debate earlier, but with 16.04 on the horizon it seems we will indeed get PHP 7.0 by default. Feels good, man.
It's more than bash, it's a Linux-&gt;Windows system call translator. Kind of like WINE only in reverse. apt-get is mentioned as one of the supported tools already but they're aiming for 100% compatibility w/ the Ubuntu LTS release.
MySQL isn't much better on Mac...
I develop in Windows, Linux and OS X pretty much equally nowadays. There really isn't a difference between my workflow and my productivity in any of these operating systems. PHP development in Windows has been easy and painless for a while now, thanks mostly to the ubiquity of Vagrant and preconfigured development boxes. Just because you run Ubuntu and can run a native LAMP stack for development directly in your OS, doesn't mean you should.
&gt; Why she even have the right to vote? Something something suffrage. Also, she does contribute a lot, including recent RFCs targeting 7.1.
no
Well. Me and my colleagues in company are also thinking about moving to linux (from win 10). But I have some problem. I love using HeidiSQL on Windows but its not on Linux :(. What do you use? Wat replacements do you use that are on windows and not on linux.
Is there another source for this? I didn't notice an actual source in the article.
LOL
If something goes wrong while generating the content, you've already sent the 200 OK status headers, and the user may receive corrupt data.....which is really annoying, particularly if it gets cached. Weird stuff can happen at the network card level....particularly if you're sending data in chunks that are much smaller than the max TCP packet size. 
The command line client for the database has always done enough for me. How I learned SQL to begin with; made myself use it for what I was doing.
Belgian!
TBH not the biggest deal in the world.
its*
http://stackoverflow.com/questions/2667065/sort-files-by-date-in-php
What nice thing are you not getting? This isn't some new exciting thing everybody could've used that now they can't. You are upset because people other than you can still use a keyword you choose not to use?
&gt; Huge pages disabled by default. &gt; Added ability to enable huge pages in Zend Memory Manager through the environment variable USE_ZEND_ALLOC_HUGE_PAGES=1. Can someone ELI5 ?
&gt; Cant blame them on this one though as the var deprecation does have some problems Curious, could you explain those for someone not in the know?
No, because PHP still is a terrible language. Almost none of the features naysayers are asking for are introduced in PHP 7, namely ways to make the language (syntax and tooling) work for you instead the other way around. I say "almost" because the AST is definitely a step in the right direction! But it's still only baby steps to hide the fact that PHP is terrible as a language and only got big because it nailed the "script" paradigm early on (why on Earth people choose PHP when they had Perl I will never know because I was too young back then).
Even if we don't see lots of projects going PHP 7-only yet, it'll be good if it becomes unacceptable not to support PHP 7.
If you follow the original issue [1] and read all the comments you'll see that ondrej was personally involved in the 16.04 packaging. [1] https://bugs.launchpad.net/ubuntu/+source/php5/+bug/1522422 
Zeev, for example, [last committed to php-src about a decade ago](https://github.com/php/php-src/commits/master?author=zsuraski). But he's been around a long time and wrote much of the Zend Engine, so him having a say makes some sense.
Thanks! &lt;3
&gt;&gt;Why she even have the right to vote? &gt;Something something suffrage. I had to read this like a dozen times to convince myself you were making a joke about having the right to vote and not suggesting Andrea's vote is somehow affirmative action tokenism or something.
&gt; things are easier to compress and transport Er, not really. Gzip, or any stream based compression, is done on the same bytes in the stream regardless of how they are split up at a lower level. The congestion is an issue though...but it even harder to predict.
Yeah, I got there eventually. :) Just saying I misread it initially. :p
Woah. I think someone took my comment way too seriously. 
A small note, on Firefox and Chrome on my phone, the screenshots on the home page are being scaled horizontally to fit, but not vertically, so the aspect ratio is screwed. 
Has there been a good framework updated/released for php7 yet?
Ugh. I told some people at a hack night I was going to build a project using Laravel and they were like "uh... why PHP? PHP is dumb." And then after calling them out on it, it turned out they were all exclusively Python devs, only one of which had ever actually written anything in PHP before. As someone who does a lot of client work for startups in various programming languages, I can safely say I prefer PHP for backend code. The community seems to be the largest, and no other language seems to do as good a job at documentation. Just look at the Wordpress Codex and php.net. Two fantastic examples of documentation done right that other languages don't seem to have.
&gt; Voted no: rasmus, andi, zeev As expected. Btw where is Stas ??
&gt; You are upset because people other than you can still use a keyword you choose not to use It's not that simple. Bad programmers follow bad practices, and those bad programmers have jobs where they get paid to apply their bad practices, which makes life suck for people who know better. Outside of the paid world, there is the open source world, where people use bad practices to write software used by others, and then it spreads like a virus. The point of deprecating things like `var` and PHP4 constructors is so that people can't continue to write code like it's the year 2000 - so that we aren't seeing antiquated practices being used in new code bases based on new versions of PHP. The more a language can enforce its best practices, the better. Then there's no arguing or wiggle room for style guide debates and other such noise. "I think we should use `var` instead of `public`" is not a debate any programming team should ever have to waste their time on. "Why did you mass S&amp;R `var` with `public`?" is not a debate someone should have to have in a pull request. Also, this puts a massive dent in my hopes for the oblivion of phpclasses.org...
&gt; but you might find their reasons in the discussion threads, on Twitter Not quite sure, but i dont think that they raised their *concerns* anywhere in the discussions.. But from their *past behavior* it can be safely inferred that they'll vote *no*.
&gt; we'd have to remove some people who have invaluable insight. Are you referring to Zeev, Andi, Rasmus, Stas ?? If you are i'd like to know what their *insights* are.. All they really do in the internals is *just make noise*. They dont do internals now-a-days though..
To give people a bit of context: I just built a somewhat complex site with the Statamic 2 beta (long time EE user), and using flat files for the first time was really nice. Nice to see v2 released. Using flat files means you can write complex content in Sublime (instead of jumping around CP fields--though the CP is nice); you can edit anything across the entire site by just hitting Cmd-T in Sublime for project search; you can sync everything with Dropbox; and you don't have to worry about caching (if you're expecting traffic spikes) because you can get really close to a static site. So for me it was the perfect balance between Craft/EE on one hand, and a static site generator on the other. Wont be for every project (e.g. grab-a-theme WP jobs), but it really suited this project, and I dug it &lt;3
The 4 stands for April and tomorrow's April so I'm guessing tomorrow. Unless this whole thing is an elaborate April Fools joke.
If Microsoft really wants to "support" PHP they should get their SQL server drivers completed and officially released for PHP 7. 
&gt; language (syntax and tooling) work for you instead the other way around you're going to have to back that up with examples. Both of why you think PHP is bad and why you think any other language is better
Am I reading this right or did you commit [all your API secrets](https://github.com/AdamCox9/nickelbot/blob/master/config.php) to github? 
Yeah I love the efficiency of HeidiSQL - I think I'll continue to use it in wine. Although last time I was on Linux it would crash a bit in wine, but I'm not sure if me running i3wm was making that worse or not. http://dbeaver.jkiss.org/ is a free multi-db + multi OS gui with lots of features. But feels a bit "verbose" (less efficient) to use compared to HeidiSQL. I've tried to get used to it a few times, but so far always go back to heidi. Also if you're using PHPStorm, it has DB stuff built-in that is ok. But I still prefer HeidiSQL. An especially annoying thing in PHPStorm's DB functionality is that editing a table schema is modal, i.e. when you've got that window open you can't switch back to your editor tabs without closing it, really annoying. Also if you're considering Datagrip I don't think there's any point at the moment over phpstorm, as I don't think datagrip actually has any extra features that aren't already included in phpstorm etc's DB functionality.
Yeah PHP's documentation is awesome. In comparison, the documentation I've seen for other languages looks more like an autogenerated API index. Which is fine when you already know the language well, but you're less likely to need much documentation at that point anyway. Very hard to understand when getting started in a new language without explanations and most importantly (to me at least): examples.
lol, don't worry they are deactivated. They would have been in the github history anyways so no point of deleting them.
Thank you very much guys! I found the answer here: http://guzzle3.readthedocs.org/http-client/request.html#post-requests
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Maybe take a look at this [Minecraft server written in PHP](https://github.com/andrewvy/HHVMCraft). I've only peeked at the code, but it may give you some ideas on how the server keeps track of objects and terrain, which is probably applicable to settlement games as well. Here's a [reddit post](https://www.reddit.com/r/PHP/comments/47jr0p/minecraft_server_implemented_in_php_powered_by/) about the server from the author, /u/iColor, which may also answer some of your questions.
After years of long, hard work, we've decided to go commercial with Bolt 3. Read the details on the site! 
Making jokes on a specific day each year wasn't cliche and predictable enough, we have to announce them now.
nice :) . Didn't noticed it earlier.
But.. but.. profit margins. ¯\\\_(ツ)_/¯ 
You're explicitly silencing it with those options.
&gt; HeidiSQL I recommend Adminer, may be less pretty, but very very useful. See: https://www.adminer.org
I wonder what you guys think about it? I know there's demand for this, since projects like [TwigJs](https://github.com/justjohn/twig.js/wiki) exist.
That sounds familiar... :D
Looks like some fun, but that's not texas holdem and not really 5 card poker if you can't throw cards..
ELI50 please. Is this meant to be a thing bundled with PHP? If so: What would PHP be if it implemented everything that ever had a demand for? I guess same goes for all open-source projects. Keeping it simple is hard-er. Does this need to be bundled with PHP itself? Can't it just be another template engine library in the sea of template engines?
I got 2 words for you: April.Fools.
And how is this any different?
FUUUUUUUUUUUUUUUUUUUUUUUUU. :( If you hadn't told me, I would probably be flaming coworkers with this insane proposal 30 minutes from now when I get to work. You are a good human. +1
So if you are using Symfony it would be great to make some "CoreBundle" in separate repository, only with needed business logic and views(which is shared across all clients) and make separate repos for every client, with whole Symfony project inside, custom styles and extensions of business logic(if this particular client needs it) and including your CoreBundle in composer. Another way is to have submodule with this bundle in every repo(which I think is less useful but the result is the same). And to answer your question: no, it would make a mess in repo and with a increase of clients it would be harder to maintain. 
Smells like homework.
Branching to include promotion specific makes a lot of sense. But why would you merge them back into master ? General improvements (reusable css and business logic) will go in the master branch, could be ported over to existing branches and will go to future new branches.
I'm forking the latest Open Source beta of Bolt CMS 3 to create "Screw CMS 3"
I am sorry I did not elaborate further: This case is only for one client and since we are handling his promotions for the last four years we can kind of tell that the different cases will not grow indefinetly. In its most basic form, its gona be just a sign-up and in the most versatile a signup with a waiting period and a concluding questionare. My goal would be to kind of force the whole team into cleaning up the work from the different promotions and use of shared components for all upcoming promotions after they have been tested in one of them. Real world example would be the switch from mandrill to sendgrid that we did only for a smaller (summer) promotion and if it handles everything fine, we can use sendgrid in all winter promotions.
Oof, that sounds rough. I use Vagrant for development on Windows. I.e. create a Linux machine that serves as a local webserver. I don't like to clutter my PC with all the PHP stuff.
Should we delete these messages and keep the flame on?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
the hassle developing PHP on Windows made me switch to Linux .. except for some "windows-only tools" which aren't that crucial I haven't looked back. yeah nice job windows .. for me that ship has sailed :)
Shittest April fool's joke ever. It makes the sub unusable unless you disable custom styles.
Because your assert function doesn't throw exceptions? Read the docs and do your home work.. 
I don't really know where the development branch is : But there was a post regarding the same about Modx : http://www.slimframework.com/2015/02/23/modx-cms-and-slim.html .
Laravel Laravel
Laraturd? 
I managed to make my plugins composer packages and install them in the plugins directory by creating a custom installer for composer :) (really love composer!) My plugins are available from a satis repository (see https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md). But I want users to be able to install plugins with the command line (which they now can by doing 'composer require pluginname') and also with a interface. Is it possible to embed composer in my framework so they can handle the plugins through the interface without the need to install composer?
PHP is not a proper OO language, Smalltalk is a proper OO language and has no visibility modifiers at all. &gt;It's bad practice because it conveys PRECISELY zero useful information that isn't conveyed by `$`. Except if you omit `var` the code will fail to run :/ class Foo { $bar; } Pretty sure that's a syntax error boss. If I didn't need `var` *or* `public`, man... One can dream. As it stands I'm still very confused by: public function foo() { ... } Is it final? Is it static? I'll never know because there's no keywords to tell me! We need to add some extra syntax here so we can convey more than PRECISELY zero useful information.
I thought this was going to be an April Fool's joke where it literally prints your logs and delivers it to you by obsolete physical telegram technology :D
Can you run docker natively?
I'm a developer in a web and marketing agency and we use Statamic for the majority of our projects. We like it because it's flexible, not bloated(like WordPress) and every client reaction to it I've heard has been something along the lines of 'Wow, that's so much nicer/sleeker/simpler/easier than WordPress.' As far as the lodge and support, the community is small enough you can usually grab someone in Slack pretty quick with an answer to your question but the documentation and debugging tools have been sufficient for just about every problem I've come across. You can also play with a trial version if you want to see what it's like before buying in!
That'd be a crappy standard. ;-)
Only PHP7 assertions can throw exceptions. You must set ini_set('assert.exception', true); You can find this in the manual: https://secure.php.net/manual/en/function.assert.php#function.assert.expectations
We should definitely deploy Half Life 3 assets on this !
If you're interested, I'm running Cinnamon with Windows 10 Dark theme for Windows Border and Desktop, while keeping controls with Ambiance. I find it really helps with the desktop environment.
Same boat with ya
I much prefer atom for any language other then Java. But I hear what you're saying in terms of Windows development.although like many others I'll stick with Mac/Linux 
Looks pretty close actually. The gnome look page doesn't really show how the window borders look (with the close, minimize, etc buttons), which I usually find to be my biggest annoyance. I'm also using a [Windows List With App Grouping](https://cinnamon-spices.linuxmint.com/applets/view/16) applet on the bottom bar to have a more W7/W10 feel for the applications list. I quite like it
a php project in 2016 that doesn't use composer... nice april fools :)
I think (haven't tested) you can get it back down to 2 queries with; $post = new Post(['title' =&gt; 'The title']); User::find(1)-&gt;posts()-&gt;save($post);
That's correct, I think it was a typo by OP
Thanks for the feedback. We are looking for a new goto CMS so I'm definitely interested in trying it out on a local .dev domain. Previously used EE and then PyroCMS so paying for a CMS is not an issue. Built on Laravel is a plus for us and we haven't found any of the other Laravel based CMS sufficient for our needs.
It's easy. Take a look at mustache syntax: https://mustache.github.io/ It's already pretty popular. Now add to it thing like blocks, layouts, partial templates and some basic operators ( ==, &gt;, etc) and bang you have a great standard that can be adapted in any language and is gong to be 90% compatible with the existing twig out of the box
I think a series of blog posts or something other then a book would be a good idea, maybe not even blog posts. I fear that writing about something you know nothing about, even though there is a set of research to be done, you can still confuse new people about going down the wrong path, even if you intended it to be the right path. I think after a year or two of playing with what ever it is you want to write a book about is when you could consider it.
I really wish the OrUpdate functions could be expanded to check multiple keys. Something like a $unique_keys = [] variable on the model, and the select would be based on these keys rather than just the primary key. For me the primary key is almost always auto updating, so updateOrCreate() is entirely useless for me. Imagine a scenario where you have a table for bookmarks, you want updateOrCreate to check if the URL is already in the table, but you don't want to search on other columns such as "title". The current available methods don't seem to cater for that common scenario
Some people have too much time to waste.
I smell home work. High school maybe? (`throw new Exception($e-&gt;getMessage());`)
0_o, it's the same thing, is it not?
Looking for answers to why Doctrine is faster at reads, also any improvements to the doctrine benchmark code would be welcome. If someone would run and post your results on a php 5.5 or php 5.6 that would be nice.
You should check your php.ini configuration. The default values are different from those you provided and I don't see PHP getting those values automatically. See the [docs](http://php.net/manual/en/datetime.configuration.php) for more.
It's probably an improvement over cygwin or MSYS or whatever. Not sure it would quite beat OS X, though.
Nothing will beat OSX and if you watch the video, its nothing like Cygwin and MSYS, this is an actual Ubuntu user space in side windows. Which is interesting to say the least
pls xdebug pls
In a lot of cases Eloquent will be just as efficient, but you do need to understand how it works and where it's likely to mess up. Having the debug bar installed so you can see all the queries being run is essential. I'll usually begin with an Eloquent query and if the query output seems unoptimal I'll rewrite it using the query builder. Sometimes you might need to in line some raw SQL into the query builder chain, but I rarely if ever write an entire query on raw SQL. 
Couldn't you do: Bookmark::updateOrCreate(['url' =&gt; $url], $valuesToUpdate); updateOrCreate() uses firstOrNew() under the hood, which simply performs a where query using the array passed as the first parameter.
Pretty straightforward. Would be nice if you could have $sequence act directly on $array[i] so people can pass expressions. Like if you wanted to check for fibonacci sequence, `f(i) = f(i-1)+f(i-2)` or something similar could be passed. Or if you had an array of daily balances and you wanted to determine if the daily change was ever more than $200: `f(i) &lt; (|f(i-1)| + 200)`. 
TIL PHP was apparently written by Jews http://www.latlong.net/c/?lat=31.7667&amp;long=35.2333
This looks rather interesting. Its clean, from what I have seen. Its organized, from what I have seen and I like its structure.
I vote "Callaback Girl"
5 stars, so not really a thing
LOL. I love how our community bases the validity of a project based on stars. Thats pathetically sad to be quite honest. But a hilarious assessment none the less.
I don't know about those coordinates, but that is true- Zeev Suraski, cofounder of Zend and co-creater of PHP's Zend engine is Jewish. So there you go.
Agreed. This should have been called is_contiguous_regular_linear_sequence() and probably belongs in /r/lolphp
How many people are contributing to and using it for actual projects? Not many clearly; no need to be a salty pretzel. Doctrine 2 has 3k stars, 1.4k forks and nearly 500 contributors. You can piss into the wind all you want but nobody is going to believe it's raining...
Hmm, I think I might be misunderstanding. If the only bit you want to check is the $url, but you want to update/create both URL and name, couldn't you do this: $attributes = ['url' =&gt; $url]; $values = ['url' =&gt; $url, 'name' =&gt; $name] Bookmark::updateOrCreate($attributes, $values); That way if the URL exists, it will only update the name, otherwise it will create a new bookmark with the specified URL and name.
I'm trying to make it a thing... All projects start out as not a thing...
In my opinion the important part is that an ORM can efficiently load relationships between objects, which Corma can do. It's just that you load those relationships yourself (by calling a method), rather than configuring those up front. Corma is faster at multiple object writes because it is optimized to do so (via a single "upsert" query). Doctrine doesn't do this because not all databases support this sort of query. As for unsupported features I don't want to implement all the features of doctrine, nor support the wide range of databases (and NoSql document stores). I'm looking to create a high-performance, easy to use ORM for my use case, and hopefully some other folks too. 
Saw NSFW tag, had to double check what sub I was in.
It has been a while since I used PHP last. This is the first I have heard of Composer. I will look into it. I'm trying to find other developers to contribute to this project. Can you help get the project up to date in regards to composer?
Well, Cygwin feels much like Linux userland transplanted into Windows. It's not that different.
Actually if you watch the video its DRASTICALLY DIFFERENT. They even state this is nothing like Cygwin
I know this is april fools but this is really interesting. No, I wouldn't actually use it, but just [wow](http://1.media.dorkly.cvcdn.com/50/27/0d41808f60af8871fa122b3b0f37ab1b.gif).
Cal acknowledged in a tweet that the majority of uses were actually part of offensive word filtration system, not epithets in and of themselves. ;) https://twitter.com/calevans/status/715888019174203392
I agree, this reeks of homework. However I will give him a couple of hints: 1) 'truthy' == true 'truthy' !== true 2) I'm pretty darn sure, assert() doesn't call eval() edit: formatting, word change
I've found Nate to be level headed in the very few interactions I've had with him, what makes you think he might have tried unproven, alternative "medicines"?
The other downside to `&lt;relation&gt;()-&gt;create([...])` is the maintenance pain in the ass as soon as another mandatory FK is added to that table, forcing it to be refactored out into the `new` version anyway. $model = new Model([...]); $model-&gt;relationA()-&gt;associate($foo); $model-&gt;relationB()-&gt;associate($bar); $model-&gt;save();
&gt; [...] but you can apparently use in code with impunity. Blacklists (stop_words.txt, swears.txt, profanity.json, ...) are not code, and pretty much are there s.t. these words never can be said either... This article/"analysis" is more than stupid. &gt; if for no other reason than clickbait Pretty much, eh...
I agree but the idea was to be similar to homestead where everything is inside one VM. This is not meant for production deployment. Just quick local dev where you dont have to run a VM. 
&gt; implying George Carlin is famous outside America 
The tags at the end were kinda sad. &gt; Tags: how is cocksucker an appropriate class name, i mean seriously we can't even express code without profanity, sad panda, seriously this started as a joke but just got sad
This post really needs to talk about `$fillable` and mass insertion vulnerabilities IMO, as that can affect when to use static `create` and `update` vs instance mutation.
In terms of how it's implemented, yes. I doubt the experience will be much different.
var isn't the same as public though. You can't do a static var for example. https://3v4l.org/A39th
from what ive been seeing and what MS is pumping out this is a "game changer for OS devlopement on windows" and I wanted to know how or if it would affect the PHP community
You can do this though, `public` is still optional: class Test { static $var; } 
I have kept two example presentations. You can find in the presentation directory (USER_GUIDE.md and presentation2_0.md)
Ah, the times I've wanted to make a local called count and instead type cunt.
So based on the example and vague desctiption do you mean that a given array is a sequence if it has a consistent difference from one element to the next? If so: why would I want this? That seems like a solution with a very limited use-case and not complicated enough to implement personally to justify getting elsewhere. If not, then what is a 'sequence' in the context of this function? Would you count this a sequence? `2, 4, 8, 16` Or this? `3, 9, 81` Or this? `1, 1, 2, 3, 5, 8, 13, 21`
ANY TOP PHP forums Thanks for all the info guys. But I am looking for more forums where I can discuss, get help and contribute best practices for PHP applications making.
Please nobody ever search my code for 'nigga'. This is only in personal code tho. When programming for someone else I try to keep it clean. 
My latest personal project is called webslut. There's a good reason for this tho. 
Seven words you can never say on tv...... in the US. FTFY.
An old project I worked on did this and it works just fine. It's a symptom of building a custom framework from 6 or so years ago when options were a LOT more limited. Plus, legacy code always sucks to work with no matter where you go. Recognizing shortcomings like this is s good sign that you know what you're doing.
Pretty URLs? This seems like a fairly straightforward way to implement something like /blog/my-article-is-awesome. 
The urls aren't pretty though, they look like `/parcel?EJGJKVNEA`. And there are multiple keys which lead to the same parcel.
For every anchor on the page a key is generated and inserted into the database. I've edited my original post to explain it a bit better.
Quietly refactor away this dynamic routing system, and then sit back and watch in **horror** approximately 45 days later, as legions of affiliates you *never knew existed* completely overwhelm your support desk, rage at the CEO, etc., screaming, "WHERE IS MY MONEY??" 
The only problem with this package is that i'd miss it when it's not installed
Ah reminds me that one time I found a misspelled word in a table name. Drove me nuts until one day I cracked. Scanned the code repo and found all usages of it and fixed it. Feeling like a king I left for the weekend. Just to be called in as 20 or so clients had been granted direct sql access to that table and suddenly shit ain't working. Like who the hell grants outside ppl access to your DB???? 
"On broadcast TV in the US". Once you get on cable, it's 100% up to the channel.
That's basically it, I've just got a few require statements up top. Maybe that's part of the problem heh. I can post the redirect code if you like. class redir { function redirect(){ header("Location: " . $_SERVER['REQUEST_URI']); exit(); } } Not really sure if I did that right either though I would have thought it shouldn't effect the actual insertion if it was wrong. 
Perfectly reasonable. I do this as a trait since it doesn't constrain me to your parent class.
 ls -cuntsfap
If you're starting out with PHP with things like these, you want to have the following INI setting values. Run `phpinfo()` to find out what their current values are, use your favorite search engine to find out how to change the INI settings. * `display_errors` should be `on` * `error_reporting` to `E_ALL` This way you will get an error in your browser when something goes wrong.
What is the return value of `$stmt-&gt;execute()`? This will return false if there was a problem, true if it went OK. If it indicates an error, you can retrieve the last error using `$pdo-&gt;errorInfo()`. (Btw, you want /r/phphelp for support - the PHP sub is for news really. See the sidebar). 
There are debuggers available for PHP, but they don't come with PHP and they're not hard, but not easy to set up. Having error messages in your browser is the (very) old school way of doing things, and I'd be angry if I caught it in a production website at work, but for a little thing like this it's fine.
I used to do that until one of my colleagues left a die("JESUS FUCKING CHRIST WORK YOU CUNT!") in something that was pushed to production. Played it off as though it was malware, but for 24hrs buddy was sweating bullets.
Ok this is odd - basically my function never runs, so the value of $stmt is the prior (select) query - but there's no glaring flaw in my conditional that leaps out at me. 
This is actually not a bad strategy if you are doing something with information that needs to stay secure (processing credit card information or something similar), but a complete nightmare if that is how all navigation happens on the site. If these pages are public how do SEO crawlers work with urls that are constantly changing? Seems like it might not scale well if each request generates a new set of links. Also not to mention now your site has a very strong dependency on your database to work at all (this is usually hard to avoid but possible - ie writing to an intermediate cache/config).
So they generate a URL for a record, and since they can't programatically reverse it with a route pattern, they just insert it in the DB and then on each request read the DB to know which record to show? Unless it's a very special circunstance like a URL shortener (like bit.ly) it looks like crappy code
Dear All, The voting of Null Coalescing Assignment Operator RFC https://wiki.php.net/rfc/null_coalesce_equal_operator is accepted with 2/3 majority, with 37 positive and 4 negative votes. Thank you all of your votes and feedbacks. Midori
Dear All, The voting of Null Coalescing Assignment Operator RFC https://wiki.php.net/rfc/null_coalesce_equal_operator is accepted with 2/3 majority, with 37 positive and 4 negative votes. Thank you all of your votes and feedbacks. Midori
It was mainly to work with a smaller footprint. Now that OSX supports docker natively, it might be worth exploring as an alternative. I am sure the docker file can be improved a lot too even if its just for development, so I welcome pull requests. 
I would be grepping for whatever else is accessing that table. It sounds like some kind of tracking or session management *feature*
I'm doing it that way so I can inject it into another class that means that I can inject it as `BaseModel` and allow for many different models. This was from 4 motnhs ago and I'm coming back for a second pass so I will look at maybe using the Trait or possibly making `BaseModel` abstract and adding more functionality to the model logic.
The guzzle libray makes sending HTTP requests easy. php://input stream as others have mentioned will get what was sent.
Like, give whatever contents of send.php (like a string "hello") and transfer it to index.php (so now index.php has the string "hello")
Neat. Clean and easy to use. Bug: I created an estimate with ~5 items, saved it. Went to my estimates list, clicked on the estimate I created, items were there. I then changed the estimate id in the url /estimates/N to estimates/NN because I am a sneaky devil, didn't work (good). Went back to my estimates list, clicked on my created estimate, all items were gone. Somehow tinkering with the url destroyed the items. Features: - Add item description that will live under item name. - Allow saving of items (with default, but modifiable, time allocation) to your profile for shared use on estimates.
Very cool, maybe I didn't see it because I'm on mobile but it would be awesome to be able to change the dollar format (ie USD) and the rate scale to hours instead of days 
[nice. try.](https://www.reddit.com/r/PHP/comments/4cr01u/with_ubuntu_essentially_coming_to_windows_will/) Beat you too it
Sure, in one or the other Magento installations create a new website or store - research which is right for your situation. Once the new website is take your existing modules and template files from the Magento install you are killing and drop them into the other Magento instance. In your newly created website or store change the template settings and other admin configurations as needed. This is just an overview of what needs to be done, of course. The tricky part may be migrating order history from one install to the other. 
Ugh this whole comment thread is just people requesting more features. As a developer that needs to do estimates all the time and has this exact problem. Thank-you. The deviations idea is great and this is well done. 
If this were my post, I'd appreciate the feedback and feature requests. Not sure why that is a problem.
There's an "Easter egg" PHP logo on April 1st: http://www.0php.com/php_easter_egg.php
I would not do that either. I would create a DeleteCommentsFromThread service which i would register onto the same ThreadDeleted Event which just deletes the comments and also adjusts the user-comment-count. Don't over-event or everything gets so loosely coupled you loose track of whats happening and easily create nasty-to-fix defect state (speaking of your counter you had to create a script which recalculates and fix the counter for every user). Also makes the service much more reusable or easily reusable as you don't need to wire listeners together to just do something sane. Another point is you can optimize that handling more easily by (for example) just count the users comments in the thread and than subtract that value once from your counter and persist. If you just fire events, you can't optimize like that which can get nasty with huge threads ;)
Sounds like a weird way to mask (why? I don't know) parameters passed by query string. Even then, before recreating the link, it should control if a link with the same parameters was already present in the db and in that case reuse the same unique key. Storing pretty urls in the db is common, it's like using a string instead of a numeric key to retrieve a specific content, but obviously this is not the case.
Great! Thank you for the response. :-)
By the way you may want a AdjustUserCommentCountService which read-locks the row with the user comment count before reading till after updating so you don't run into issues with parallel execution.
Would be nice to be able to add project types that affect the standard deviation. For example, a WP or Joomla project should add several hundred hours to the worst case scenario :S
First of all, firing events within an event listener is not a problem at all. Depending on the observer implementation, you have to look out for an infinite recursion loops. Depending on where you want to display the count of the users posts, you might chose a different approach than that. Displaying the count above every of the users posts, on his profile page and maybe on some other places would result in a lot of queries. That's why you probably keep track of the count in a separate column in the users table. If so, i think doing it your way is fine, although i would chose a similar way to what BreiteSeite explained. Either way, storing the count in a column is redundant, because the information already indirectly exists in your database through the posts themselves. That's why i would think about how much i value displaying the count on multiple pages. IMO displaying this count other than on a profile page is irrelevant for a forum. It only makes your users tend to judge others by how active they are, instead of what information they provide. Displaying it on a profile page is more than enough. This way you could get rid of most of the complexity. In that case, you do not need to update a database-record every time someone deletes a thread. Simply querying the users information from the database, including a count on his posts, when his profile page is requested is just fine. Its up to you to decide if you want less impact on the server running this software by caching the users information for a given time. But a count on the users posts should be blazing fast with a normalized database schema.
That's great frigging news! All the best languages have it.
It seems if you want to propose yet another syntactic-sugar, that serves only to confuse people, all it takes to justify 'why' it is needed is to say something along the lines of: &gt; This shitfoo operator has been around since 300 BC, and some languages like foo bar uses similar blabla .. This trend of over simplifying the syntax in php is getting out of hand. I think it is better to focus on other core-related improvements by taking on bigger changes that have more impact on the future / security of the language would be better. I don't know why some of the internals have fallen for this one, I have seen so far 3 variations of the ternary-esque operator. I think if this madness continues, we will be using something like ( * helo world ) to echo 'hello world'. Please don't oversimplify things. 
Great Idea, Thanks!
&gt; couldn't a formula be devised for any sequence of numbers? In the sense you can plug in a sequence and get an output like "3*n"? For prime numbers, ["No such formula which is *efficiently computable* is known."](https://en.wikipedia.org/wiki/Formula_for_primes) *For polynomial and similar sequences, you can do it feasibly and easily, [like so](http://www.purplemath.com/modules/nextnumb.htm)* or if you don't mind giving "5, 11, 20" as input and getting an estimate "5, 11.25, 20.50" as output, you can find a constant, then keep multiplying/adding, [which would be useful for a game-like site](http://world-editor-tutorials.thehelper.net/formula.php) you can find such constants and just ceil/floor, [theres a fibonacci formula that works like this.](http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibFormula.html) or if you happen to have a formula that can output everything, then you'd just need to find a seed. [the library of babel does this.](https://libraryofbabel.info/search.html) but having a function that you enter any arbitary sequence and get an output? not that I know of. let me know if anyone knows any, that'd be pretty useful for me
 I don't know, but I don't think we can find one in a reasonable time. formulaFromSequence([0, 1, 2, 3]); // returns "n" can you have a function like this? I don't think you can have this work reliably once you get to non-linear sequences I don't know a lot about this, do you know of a such function?
I don't know any that are *exclusively* PHP7 due to adding PHP7-specific features, but I do know that Symfony 3 seems to be working fine under 7. I'd expect the current ZF does as well.
You're on the right track. Normally for tasks like this you have the roles/privileges column and then you need you check the role of the user. So for example you could have a separate page where only admins are allowed and they get a list of users and separate forms/pages for managing them. You could also re-use the existing pages and in them check that if the logged in user is an admin or owner you allow to continue, otherwise throw an exception. You can for example read the authorization documentation of Laravel (https://laravel.com/docs/5.2/authorization), this should give you the ideas on how to approach and solve your problem (or if you're using some other framework read their documentation, most of them have already standards for approaching this). In short: have a way to distinguish users and check conditions when something depends on the role.
How about the internal configuration i.e. the one which is not supposed to be exposed and is not coupled with the environment?
ZF3 is an on-going process, and not a "one shot" release thing. You will likely never see a 3.0 of the main `zendframework/zf2` package, because the single packages are moving independently now, and the aggregating package is just an empty shell that does nothing but require them all (for BC compliance). Some components are already 3.x, like `zendframework/zend-servicemanager`, `zendframework/zend-eventmanager`, `zendframework/zend-code`, etc etc. For existing apps, this basically means that you will have to "unlock" from the main `zendframework/zendframework:2.*` package, and instead lock onto the single components that you use in your app.
codeable
Isn't that application configuration?
This is the ["Arrow Anti-Pattern"](https://blog.codinghorror.com/flattening-arrow-code/). I'm a bit confused as to why the author did not follow his own advice in the last method though. The last if/else block should also be refactored into a basic if statement. From the Jeff Atwood piece: &gt; Once your work is done, get the heck out of there! This isn't always possible – you might have resources you need to clean up. **But whatever you do, you have to abandon the ill-conceived idea that there should only be one exit point at the bottom of the function.** (emphasis mine)
Yep, exactly that. No URL shortener, so yes, I'm 90% sure it's crappy code.
Maybe look to adding some number formatting too. 2867 would be easier to read for me as 2,867
&gt; if($user-&gt;admin = "true") Not sure what is more scary. An assignment operator in an if block or a string true.
I'd like to see the internals group spending more time thinking about solutions to the dependency hell problem (when two libraries have hard dependencies on different versions of the same library). 
I find it's frustrating how often I run into projects like this that don't link to the service they are integrating. Sure, generally if you find yourself looking at the project you probably know what the service in question does, but not always. It's not that hard to include a few relevant links in the readme.
Not a video tutorial blackashe, but in my opinion my [I ♥ PHP](http://ilovephp.jondh.me.uk/) tutorial is pretty good. It looks at databases, sessions, password storage, and separation of business logic from layout. It deliberately doesn't use a framework, as I think they're a distraction when learning a language - but Laravel would be a good option once you've picked up the basics. 
[Codecourse](https://www.youtube.com/user/phpacademy) (formally phpacedemy) has some of the best videos I've found.
tl;dr never
It isn't explaining semantics exactly. a ??= b is not just equivalent to a ?? a = b for any a and b … but much more complex (with $_n denoting temp vars): $a-&gt;$b-&gt;$c-&gt;$d ??= e() # is equivalent to ($_1 = $a-&gt;$b ?? null) !== null ? ($_2 = $_1-&gt;$c ?? null) !== null ? $_2-&gt;$d ?? $_2-&gt;$d = e() : $_1-&gt;$c-&gt;$d = e() : $a-&gt;$b-&gt;$c-&gt;$d = e() and $a[$b][$c][$d] ??= e() # is equivalent to ($_1 = &amp;$a[$b]) !== null ? ($_2 = &amp;$_1[$c]) !== null ? $_2[$d] ?? (is_object($_3 = $_2) ? $_3[$d] = e() : $_3 = &amp;$_2[$d] ?? $_3 = e()) : $_2[$c][$d] = e() : $a[$b][$c][$d] = e() This looks pretty complicated and it actually is. That is describing what actually has to happen (in a bit more succinct way in the engine). This avoids double __get() or offsetGet() fetches etc. which actually involves some non-trivial handling, especially considering that e() (the right hand argument) can only be evaluated after it is clear that the left-hand is undefined or null … but the evaluation of the right side may affect the values on the left-side, causing eventual problems in the engine when the array we should assign to suddenly doesn't exist anymore. This totally is not obvious to someone not very familiar with how fetches internally work and which consistency guarantees they have; what the RFC author sadly also greatly underestimated. … The devil is really in the detail.
Hi guys, I will provide remove this from github and packagist
TheNewBoston.Com has a lot of great programming videos
i remember reading something like this in object calisthenics: http://williamdurand.fr/2013/06/03/object-calisthenics/ , but object calisthenics takes it farther. I choose this particular piece because it links(and/or embeds) a set of slides that shows how they can be applied (in a slightly modified fashion) to php.
Well, feel free to draft up an RFC and patch for a feature you'd like to see. /u/sarciszewski did exactly that and got a security-related RFC accepted just recently.
My suggestion with Wordpress is to be completely anal about updating it. Keep the plugins updated, install Wordfence and your site should be good. I do mean it about the regular updates. most Wordpress hacks are through non-updated plugins
I like this for info on PHP. It's updated pretty regularly. This repo can give you some links to other information sources as well. https://github.com/codeguy/php-the-right-way
Pedantic but `$user-&gt;isAdmin()` feels more natural for boolean getters, as in: if ($user-&gt;isAdmin() { ... }
Hypothetically its already released. I mean if you think about it, a lot of the things they have been taking about for 3.0 have already been done. 
Eli The Computer Guy has a pretty good introduction to PHP: https://www.youtube.com/watch?v=27dR_sLaM74
If you're looking to have an authentication scheme that isn't a something-you-know (ex: a password) or something-you-have (ex: hardware dongle) deal you're almost certainly looking for something you shouldn't be. In any case, though, many frameworks for PHP and web-dev in general support alternate authentication back-ends and could be made to work with any hypothetical auth system you can think of.
* Is this for a single user? * Are you trying to login with one of those? * Do you need to only verify that they have one of those accounts?
[Google has their PHP API](https://developers.google.com/api-client-library/php/). It's not too difficult to use and their documentation isn't bad. Facebook has one as well with similar quality documentation.
This is _definitely_ crappy code. My alarm bell is going off, but without seeing the actual code I can't be 100% sure. That sounds like someone picked an insane way to solve a potentially simple problem.
Hulk smash = is_active 0 Round house much =delete comment Airship hindenburg = delete thread? Group? 
You will most likely get better reception over at https://www.reddit.com/r/forhire or some job related subreddit.
How do you uniquely identify any generic device in a non-spoofable way? Any answer to that question has been found wanting to date, that's why the traditional username:password combination is so widespread. 
I totally agree. I asked mainly out of curiosity. I really need to spend some more time grokking the internals of PHP 7.
&gt;...is an incredible (in the other sense of the word) assertion. You would have to have reviewed every answer If you have an answer please give it? The fact that nobody uses any such system that will work on any generic device is basically the proof itself. I admit there's probably some option I've never personally thought of, but it is something I've thought of and read some small bit about. The odds that between all major services out there that rely exclusively on other authentication criteria are run by people that haven't collectively gone through all options is low. The closes thing I can think of to using a device itself for authentication would be hardware dongles or public-key cryptography systems in which all you need is the private-key file. Neither of those actually use the device used for access specifically, but both are a good example of the 'something-you-have' authentication. &gt; or demonstrated this to be an **NP-complete problem** for that... wat I'm not making any claim about computational complexity, but rather whether there exists any way to reliably and uniquely identify any specific device a user may connect from. IP addresses can change without warning. MAC addresses are better, but are still readily spoofed. Some specific vendors might offer a system for their hardware, but you can only use that *for their hardware*. Any other attempts to identify a machine in particular have similar problems to the above: hardly universal, not constant, or easy to spoof.
Meh, thanks for just crapping on our hard work.
Yeah you are right, thats how I name the methods myself too, I just used a typical getter method name to make it more clear that its a getter method. Also the value should be boolean true, not string "true". I was just targeting one problem at one time, since the OP clearly has more than one issue. 
Best way to load images into an image carousel where only one can be viewed at a time? I load the first 4 in on page load, so there's no lag when clicking to the next one. Then on each click I load another one.
There still isn't a complete implementation, correct? I hope we can reject it soon saying it's not worth the VM modifications required to make it work. In this particular case we really needed an implementation before voting...
PHP-DI config, like this http://php-di.org/doc/php-definitions.html#values It can also use ENV vars
1. Never a good idea to store passwords in cookie. 2. Only session ID and preference options such as Language, "Remember me", etc should be stored in a cookie.
Never put in a cookie something that would be stupid to put in the URL itself. Examples: * Language would be ok in URL, so can be in cookie * One time login keys can be used in URL, so can be used in cookie (remember me) * Password would be stupid in a URL, so don't put it in cookie either Consider cookies as URL parts that just happen to be not visible, then it becomes clear what can be placed there.
Nope. Never. There is no situation where the password should be stored in a cookie. Even if it's encrypted. As a rule of thumb, password should be something entered by user, sent to server and server should only pass the session ID, one time pin or other authentication token back to the browser.
&gt; This still means someone else can login as the user if they obtain the randomly generated password cookie Yup! So, just for instance, I have my fb account cookie SET. So, using them, can others login as me from other computers? I don't think its possible.. How this type of security works? 
I am taking care of XSS. Thank you for inputs. I have come up with an simple idea.. I have edited in my main post.. Can you please go through it and let me know if there is any problem with that... Thank you! :)
Why would you build a store on a blogging platform? Yes I know it's possible, but why on earth did you think it's a good idea?
I have edited my main post.. Please go through that and please suggest me if there is any better way... Thank you :)
Possibly true. No marketing folks on ZF, as far as I know: we usually write components out of need, rather than out of possible need. We don't really see a need to rewrite stable components like `zendframework/zend-mvc` (for example) which will likely stay in `2.*` until major BC breaks are actually required
Fair enough. Symfony 3 is not a rewrite of Symfony 2 as well but they still coordinated versions of the components and communicated about it.
&gt;If there is any developer who see this can Pm me for further discussion.
&gt;If there is any developer who see this can Pm me for further discussion.
Facebook is probably a lot more advanced. For instance, logging your IP everytime you log in, and when someone far aways suddenly is authorized they notify you. But the basic principle is the same.
Writing an angular app. Would Laravel be the best solution for the restful api? Any reason not to use it? Edit: thanks guys, I'll check out those suggestions
Example is bad. But real code will have more than three lines, and you'll probably want to use this tip there. Creating examples is hard. Even PHP documentation is often pointed out for having bad examples.
Where I'm from the word is pretty OK to use. It's not a racial slur as racism is hardly a thing at all there. 
This looks awesome, and also, it's good to see how well you are taking criticisms, and using it to create a better product. Keep up the good work, I hope this all goes well for you :) - I think I might actually use this! :)
If you are working in a framework, follow that framework's best practices. Try to keep things as standard as possible for the tools you use. Have good documentation, especially for setup of production environments etc.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
wat?
Laravel is a little heavy-handed if all you want to do is a RESTful API. Laravel is a full-fledged application framework. I think what you're looking for is something more like [Slim](http://www.slimframework.com/) or [Flight](http://flightphp.com/) (disclaimer: I have never used either, only read about them). They offer you the ability to set up a very simple RESTful web service very quickly and easily.
Cool story, bro.
Learn it. If you can learn it, you can learn something else. Frameworks come and go and anything you learn today may end up like kohana in 5 years. The design patterns are all going to be similar, and maybe even the standards will be similar, so it's not like you are wasting your time on this. The only difference is the method names you will be using to render your views or access database objects.
It may have changed with PHP 7, but I recall reading a PHP best practices guide by Google where they suggest to avoid unnecessary getters/setters, so I assume that at least on PHP 5 there is a (microscopic) performance hit for function calls as opposed to having it all inline.
&gt; "Are there any good examples of these on github or other sources that I could look at to educate my self a bit more before tackling such a large project?" As you note, one could start by examining existing PDO wrappers; e.g., [Aura.Sql](https://github.com/auraphp/Aura.Sql). (I am the lead on the project.)
A PDO wrapper is not as full featured as an ORM. The wrapper would just simplify SQL statements/queries while the ORM is used to actually write/handle the queries for you through the use of models. TL;DR PDO wrapper = writing queries made easier. ORM = interact with database through the use of models (not writing any SQL)
That is exactly what we're trying to do. We're trying to pair a device we're developing with our own CMS.
&gt; https://phpdelusions.net/pdo/common_mistakes Ive read this like 100 times. But thanks :)
But what is the problem with the code? - `$project-&gt;getBaseRate() * $project-&gt;getSize()` - `if ($type == 'complex' || $urgency == 'rush')` - `$rate *= 1.5` 3 extremely simple blocks of code, there is no problem here. I don't need 3 sub-methods polluting my class, it will only add noise. You don't need to wrap every single line of code into a sub-method to make it clearer, as developers we should be able to handle a multiplication or a `OR` in a if statement. I've worked in a codebase like that and the code is confusing, that's something I don't want to experience again. Browsing the code (debugging, or manually exploring) is much harder because of all the jumps across the codebase. My personal opinion is that it's always a question of balance. Never apply rules blindly. Sure that refactoring would make sense with a 100 lines long function. But the example of the article is really bad. A 5 lines long function is OK, if it's not then the problem might not be with the code…
Lots of stuff is the same in Kohana as in let's say Laravel. Arr::get($array, $key, $default) is the same as Laravels' array_get($array, $key, $default). The same goes for DB::raw() / DB::raw() Or kohana: ``` $users = DB::table('users') -&gt;where('votes', '&gt;', 100) -&gt;or_where('name', 'John') -&gt;find_all(); ``` Almost the same as Laravel: ``` $users = DB::table('users') -&gt;where('votes', '&gt;', 100) -&gt;orWhere('name', 'John') -&gt;get(); ``` Edit: Sorry for bad formatting... I'm on my mobile
For envrionment configurations: https://github.com/vlucas/phpdotenv For package / framework configurations I typically just use associative arrays and pass them to https://github.com/illuminate/config for management and retrieval.
This is pretty big news for PHP devs. It's the first cloud function service to support PHP (outside of Iron Workers). I've been enjoying Lambda for a while now, but it doesn't support PHP. No pricing on it yet (free under preview!). It might be a really good solution, if you can bear Windows =)
PHP seems to handle GET and POST automatically, putting parameters into $_GET and $_POST and $_REQUEST. What it doesn't seem to handle is DELETE or PUT natively. I have had to put the following code in my boot loader $_DELETE = array (); $_PUT = array (); $_method = array_key_exists('_m',$_REQUEST) ? $_REQUEST['_m'] : $_SERVER['REQUEST_METHOD']; switch ( $_method ) { case !strcasecmp($_method,'DELETE'): parse_str( file_get_contents( 'php://input' ), $_DELETE ); $_REQUEST = array_merge($_REQUEST,$_DELETE); break; case !strcasecmp($_method,'PUT'): parse_str( file_get_contents( 'php://input' ), $_PUT ); $_REQUEST = array_merge($_REQUEST,$_PUT); break; } Why?
X-Post referenced from /r/joinrobin by /u/OrangeredStilton [A rudimentary Robin/IRC bridge: Chat in Robin from your IRC client! (Bugfixes welcome)](https://www.reddit.com/r/joinrobin/comments/4dbwnt/a_rudimentary_robinirc_bridge_chat_in_robin_from/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^P.S. ^^negative ^^comments ^^get ^^deleted. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
&gt; "Are there any good examples of these on github or other sources that I could look at to educate my self a bit more before tackling such a large project?" Here is a [small wrapper](https://github.com/mosbth/cdatabase/tree/master/src/Database) consisting of a class CDatabase wrapping PDO together with a trait TSQLQueryBuilder for creating SQL-queries. The code is not to large to get a quick overview of of some basics. (I'm the author)
In fact, you've got very good questions. But the title is not that good, thus the voting. Anyway, - a wrapper is intended to deal with SQL. It's methods are aimed at sending a query to a DBMS, and at getting the query results, automating the routine tasks. So in short - a wrapper is after a query and its result. - an ORM is intended to deal with an object. Its methods are aimed at modifying object's state. There are tasks common for all the objects: like create, delete, update. So the methods should be. Internally these methods deal with database, but it's all behind the scenes. So it makes 95% of all database interactions extremely easy. For a good example you can take an Laravel's Eloquent. There is a chapter on the Eloquent in the "Code Bright" book available online, from which you can learn how an ORM is intended to be used.
What about it?
Not directly PHP-related, but I'll soon be building an application that involves manipulating heavily-nested JSON data. Generally speaking, the structure of the data would be something like this: Item 1 - Title - HTML - SubItems - SubItem 1 - Title - HTML - SubSubItems Item 2 - Title - HTML - SubItems - (etc) This needs to be handled via AJAX as much as possible, so I'm trying to research which JS framework would make this easy without getting in my way too much. However, I don't have much experience with any of them. Suggestions?
i think the algorithm for rate calculation could become even more complex and passing around the base formula for modification may not be a good idea.
[removed]
Yeah, I understand, and it does make a lot of sense. Given that though; I would put down what appears to be a bit of a lack of enthusiasm for new version to the fact that frameworks like Symfony are "complete packages" that handle everything you might need from a framework. So, your main audience being people who're building bespoke applications without a framework, just tying components together, will inevitably be in the minority of developers. I think people just don't get the right idea about what your goals are then, but having said that, what are you goals for ZF in the future? How do you see the future of ZF being marketted, and attracting developers to use it?
Take a look at Doctrine DBAL vs. Doctrine ORM to get a good idea of the differences between a PDO wrapper and an ORM.
I'm currently checking out these two I found on Packagist: [overtrue/laravel-shopping-cart](https://github.com/overtrue/laravel-shopping-cart) - Most recently updated one I could find and [darryldecode/laravelshoppingcart](https://github.com/darryldecode/laravelshoppingcart) These are just the cart functionality. You'd still have to implement the views yourself. I really can't recommend any of the standared PHP based shopping carts or ecommerce systems as they are either overkill, insecure, or poorly coded. If you're already building a CMS in Laravel, I'd recommend testing one of those Laravel based ones and doing the views by yourself.
Very useful! I don't have the setup to test right now, but looks like the Finnish _Juhannus_ is set to be St. John's day, the 24th of June. But Juhannus is not on a fixed date, instead it is on a Saturday between the 20th and the 26th of June.
Hey I love Python and PHP. I just wish PHP had some of the metaprogramming that Python has.
I would like to see what you came up with, without having to physically rename all of the class references in the library in question. 
If/when you get to Canada there are some holidays which are per-province, so that'll be fun. 
I'm not at all downplaying any work done on PSRs or other FIG related things, all wonderful and useful work. I'm just talking about ZF as the full stack framework everybody has come to expect it to be. &gt;PSR7 and it's adoption. Very good work from matthew, especially for fighting through with the immutable objects. Symfony also supported PSR7 2 weeks after it was announced. &gt; container interop also nice technical feat. but not really important when using symfony because it has an excellent container. &gt;expressive: works nicely and is interoperable I won't deny that, but it's not the full stack framework people expect ZF to be. &gt;As time passed, we realized more and more that we'd rather just be the engine well, we're back on the "marketing" part then. This is not clear to anybody not closely involved with the project. The framework.zend.com outdated page and blog posts, which I've almost all read, never got me as much info as the 2 or 3 posts you made in this thread. &gt;You will likely never see a 3.0 of the main zendframework/zf2 package Then stop telling people ZF3 is coming with a huge banner on the homepage! :) But imo, even if it isn't BC changes or whatever. I would still release a 3.0 when all major components are at 3.x, for simplicity's sake. 
Fuck you and your puppet accounts.
https://magento.com/ I'd stay with the 1.* branch unless you want to end up smashing your keyboard in frustration.
I had the same thought when I saw Spain among the supported countries, trust me not even Spaniards can tell when will be holiday without checking the calendar first.
&gt; Then stop telling people ZF3 is coming with a huge banner on the homepage! :) Eh, good point. I have no clue what internal Zend folks marketing/sales folks are doing, tbh, and I really just read the blogposts and the docs in markdown (mostly in the pull request), and not on the framework site. I'm at fault here too. &gt; I would still release a 3.0 when all major components are at 3.x, for simplicity's sake. We want people to stop depending on a massive packages. It might ease installation, but depending upon a giant load of components for a tiny web-app (or even a huge one, that has already enough dependencies) is not good. Also, don't confuse easy and simple. A good example of where we went to is the [`zendframework/zend-expressive-skeleton`](https://github.com/zendframework/zend-expressive-skeleton), which allows you to pick dependencies at install-time, instead of forcing a predefined gazillion of dependencies.
Man, I really disagree with this. Should functions be created when they replace a comparison operation that is only one line in length? I really disagree. Suppose this were your code example: if($value &gt; 3.00 || $quantity &gt; 3) { //big order! Would you really replace that with this? if($entity-&gt;isBigOrder()) { I can imagine how convoluted tax calculations would become in a project if one replaced every line in the function calculateTaxRate() with functions like isThisAlaska()-&gt;butNotTheCityOfAnchorage()-&gt;butDuringTheFall
Not sure, but perhaps somewhere in Settings-&gt;Version Control-&gt;Confirmation or Settings-&gt;Version Control-&gt;Git
There should be a choice of 3 radio buttons under the section "When files are created" &lt;-- you can also search for that in the settings and it'll come up Version Control -&gt; Confirmation
Change the setting in the WP admin area.
Would love to see Australia added to the list :)
Thanks for the feedback. Let me have a look.
Thanks! I was in the same situation as I had to figure out if a certain day was an official holiday/bank holiday in various countries. There weren't many implementation available, so decided to write my own :)
Yes, province/state only holidays are a bit more challenging, but not impossible. Have a look how it is implemented for Spain: nationwide holidays and province/local holidays :) 
I will add that to the wishlist :)
[**@taylorotwell**](https://twitter.com/taylorotwell): &gt;[2016-04-04 23:32:25 UTC](https://twitter.com/taylorotwell/status/717132746276077568) &gt;The price will be $99 per \*launched\* project. If you use it on 10 ideas but only launch 1, that's 1 license. ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/4dean5%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/joealcorn/TweetPoster) [^[Issues]](https://github.com/joealcorn/TweetPoster/issues) 
&gt; Yasumi has over 1100 unit tests with multiple iterations of assertions. Since Yasumi is using randomized years for asserting You should use a random number library that allows you to specify a random number seed. That way you can easily reproduce a failing test in one round instead of re-running it and hoping you run into a comparable edge case.
Thanks, it looks very good, well done!
Per project? That's basically free
Worth checking out http://editorconfig.org/, especially if you are working in a team. Most popular projects already have a config, so it's just a case of copying that to your project: cp vendor/laravel/framework/.editorconfig . git add .editorconfig git commit -m "Adding EditorConfig standard" 
Some questions that came to mind (bear in mind I'm not an expert): - Will this be added to symfony? - Is this viable to use whenever there's need for a state machine like system, especially because it can be run on more powerful machines (servers)? So now you can do more complex stuff in PHP that you would usually do in some more specialized systems etc? Or am I completely wrong...
Note that just downloading it for playing around is also $99, but you can also launch 1 project with that, and the next time you would have to pay is the 2nd time you launch a project. Still, it's really fair I believe.
Yes, this is going to be added to Symfony. Bear in mind that "Symfony" is just a bunch of third party libraries, and Workflow will be a new one. I'm not an expert in that domain, but from the discussion it looks like Workflow is a "[Workflow Net](https://en.wikipedia.org/wiki/Petri_net#Workflow_nets)" implementation, which is a "[Petri Net](https://en.wikipedia.org/wiki/Petri_net)" extension. I've checked [on wikipedia and it looks like "state machines" are simply a sub-set of Petri Net](https://en.wikipedia.org/wiki/Petri_net#Restrictions). So I guess that means that whenever you need a State Machine, instead of creating your own one or using something like [Finite](http://yohan.giarel.li/Finite/), you can use this Symfony Component.
zf-longhorn
I read this article not long ago, and I agree with many of the comments *in general* (especially that I don't like the first example), but I think most posters (and even the author) are missing the point of refactoring not to make it "easier to read", but to make things more SOLID and testable. I've never read any of the "Godfathers" of coding (aka, Uncle Bob, Martin Fowler, etc) say in their books, "By the way - if you can read those 3-5 lines and understand, go ahead and leave it that way". Not the point, I don't think. "Sure that refactoring would make sense with a 100 lines long function. But the example of the article is really bad. A 5 lines long function is OK" - that seems completely completely wrong-headed to me. Why is 100 lines "of course refactor" &amp; 5 lines "maybe not"? It shouldn't have anything to do with the number of lines. It should be based on how closely it adheres to certain principles. Unlikely 100 lines will do that, but not because it is 100 lines long.
The immediate advantage I would see is that the refactored public function reads like a spec / story in terms a non-technical person can understand, and even someone who doesn't know the business at all. So when I hire a new developer, she's going to read the code and talk to the non-technical person using the terms in the public function which are commonly understood. It establishes the good old 'ubiquitous language' in the codebase and makes it very clear what was intended. I love code like that because it becomes self documenting for the intention of the business, not the technicality. I'm not taking on more 'cognitive load' (ok, silly extreme in this example) trying to find the right phrase for what `($project-&gt;getBaseRate() * $project-&gt;getSize()) * 1.5;` represents for the business so I can talk to the bug reporter about it - it's given to me.
Google does not offer a PHP API for Google Maps. https://developers.google.com/maps/documentation/javascript/
You might look at mapbox.js. This kind of mapping happens at the JavaScript layer, you can use php to build (geojson) layers from s database to plot points or show polygons. 
Try to comment your code in a way that you'd be able to understand it if you had to come back and work on it years later, because you might have to.
"They use SOAP? WHEW, thank goodness, I never want to talk to a REST API again." ... said no sane php developer anywhere ever
Does anyone else find the linking straight to stackoverflow questions annoying? On topic, fuck SOAP. It has its niche uses, but if you are having to ask the question on which one to use, then REST should suite you just fine. Also, fuck SOAP
[removed]
I just got a new project working with SOAP. Shoot me please. 
REST doesn't imply JSON. JSON just happens to be the most popular (to my knowledge) data type used with it.
Let us all have a moment of silence for all those poor souls who have to work with Cake. My condolences.
5 years, same as GMail. Confirmed /u/seldaek is the next Larry Page?
**gleefully wrings my hands like a bond villain** We are migrating off of an old, unsupportable, CakePHP 2.x installation. A full rewrite is in progress! Bwahahahahahahaha!
Have you given CakePHP 3 a go? http://book.cakephp.org/3.0/en/tutorials-and-examples/bookmarks/intro.html Highly recommend it to anybody looking for a modern, clean and fast framework.
Imo, use PHP-FPM and ditch SuPHP. It's so slow. Our WordPress site is faster on PHP 7/FPM than its previous MOD-X site on PHP 5.6/SuPHP, which is crazy because WP has tons more PHP to execute. It's about 600ms vs 700ms.
I prefer a simple router and tidy controller and models. Anything else I can bring in via composer, but I try to run as lean as possible.
I got a question for "Cross Browser"-testing. Is there a good tool out there? Currently I am manually checking in Chrome and Firefox if my web application is running smoothly. Now I am developing on a linux machine and I got problems with Safari. My application just runs different on it. Is there a good tool for cross browser testing/developing?
Run don't walk away from that project.
I don't see why we would ignore some aspect of optimizations, just because of another aspect. If I could gain 20ms by switching the handler, then that is significant! I **know** opcache might give me 100ms, but it's important knowledge. If it turns out it's the same, that is knowledge as well :)
Finally, I can feel comfortable using composer in production apps! /s Great work!
Check this out for using laravel's config component https://github.com/mattstauffer/Torch/tree/master/components/config
The recent npm/kik debacle has me worried. 
Why? Because it changes the rules! Opcache doesn't give you abstract "100ms", instead makes certain things inexpensive (or much less expensive). By having those things optimized you can go further and optimize what matters. In other words Laravel itself might rely on certain features of opcache in order to avoid unnecessary code complexity for optimization of something that already works fast with opcache. What you do is some sort of reinventing the wheel, but in your case you simply can't win. So turn ON opcache and then we can talk about performance of modern PHP app. P.S. Do you have any single sane reason to intentionally disable opcache?
Agreed, fuck SOAP!
It would be for educational purposes, so it will probably be crap, how ever I will likley share my creation for better understanding and criticism.
When checking the file ´verify-age.php´ to me it looks like the extension provides a configuration page or parameter to set the minimum age.
thanks for clarification.
Packagist is namespaced, which likely would've prevented/lessened the issue with NPM and Kik. It's also [impossible](https://www.reddit.com/r/PHP/comments/4bsu3b/are_composer_and_packagist_also_vulnerable_to/) to unpublish a popular package in the same way NPM allows.
You can remove the repo without unpublishing and cause just as much destruction (for those without Toran Proxy set up at least)
Massive thanks to you guys. Composer has been an instrumental part in making PHP feel like a proper ecosystem.
Thanks for the info.
Fork everything and use `dependencies`
Hm, I sort of see what you mean. I don't understand what you mean in "relying on certain features of opcache". **But**, even with opcache you have a fixed overhead caused by communication in the php handler. The handler does the same work regardless of Opcache I think. We have a rather hard server setup. We host about 100 low traffic sites. Slightly offtopic, but: we tried opcache once, resulted in "white page of death" for everything, so that was quickly disabled. This is a low priority item for the company now, so we don't have the resources to make this a very big investigation. I'd like to have it on php 7 , but SuPHP does not allow opcache. (We could swap the current handlers, but Suphp also does not understand php_value items in httpd.conf files, so we'd have to check all those if we use that)
if it werent by composer and yii2 i would be doing java wearing a necktie and waking up early.
Congratulations to everyone who's contributed to Composer. It's a great piece of software that I think nowadays may even be taken for granted a bit.
Same, still many clients wouldn't accept alphas and ended up hiring java devs for more money and time than the one we offered.
Thanks, and I totally agree, more open source software is always a good thing.
Oooooooooh, daddy like......
There are a bunch of tools you can use to help, some that even offer access to browsers (direct or indirect) as a service - Google for `browser testing as a service` MS offers time-limited [VM images for a variety of platforms](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/) of IE8, 9, 10, 11, and Edge. One thing you must do is test on Safari on iOS. It has a bunch of quirks that you won't find in Chrome or Firefox on Android. Testing using the window size tool in Chrome's devtools isn't enough to get an actual taste for the incorrectness Safari will give you. 
Wow, I love that.
I concur, doctor. 
Or call Uber. Via wsdl 
I'm sorry if I implied that. It wasn't what I meant and was pre coffee. Typically, in my experience, rest apis (the decent ones) will serve json while soap will not. It's not a function of the technology, simply the pattern. 
I would love something like this for Symfony. 
I'm not seeing the break.
it was a joke...
*than
Here's a good resource to get the Australian holidays. We have state specific holidays also, and Melbourne Cup Day may be a difficult one to do http://publicholidays.com.au/
I agree I've haven't heard good things about most of them, but one of my coworkers was recently working with... Prestashop I think, and he was quite happy. I'm saying this because I don't want to put all ecommerce shops in the same bag, although I agree I woukdn't want to work with some of them.
The link for \ParagonIE\Halite\Password points to https://github.com/paragonie/halite/blob/master/doc/Classes/Asymmetric.md That doc doesn't exist, maybe you meant to link to the Asymmetric directory?
I use Illuminate packages all the time for all sorts of non Laravel projects. Its pretty sweet. edit: especially the IoC container
I... Didn't know it was in alpha or beta, hah 
That's one of the reason React changed its versioning.
This is what I find a bit weird. Yeah...it'd fuck up my workflow, but we still have about 20 machines with a copy of the library on it. We've been looking into Satis but it looks to be too much of a bitch to maintain that config and constantly rebuild it. $75/mo seems a bit pricey for Toran...
You should check out [browserstack](https://www.browserstack.com/)
Tell me more about this, googling "composer dependencies" did not return helpful results :D
Round of beer? That auction will close at high 4 digits. MMW 
API platform is built on top of Symfony and is wonderful.
Quite a large number of API frameworks will format the response based on either the Accept header or a similar pseudo-indicator (e.g. /user/1.xml vs /user/1.json)
 Whispers... Laravel...
I might not have stated this explicitly in the OP, but we do have opcache available, just not enabled due problems when we tried it out. That might have been because we host over 100 sites, but we did not have the option to investigate it more at that moment. Also, SuPHP is because we need to run 2 versions of php. We use mod_ruid2 to have all scripts execute as the user of that specific website. **mod_ruid2 is incompatible with any other handler than SuPHP** . Why is fpm "the way to go", do you have any sources for that? So far in this thread I have seen 0 sources for claims in terms of speed. As stated, we need an easy way to run as different users, for over 100 existing sites.
Caching is not an option with SuPHP unfortunately. However, as stated here: https://www.reddit.com/r/PHP/comments/4dgey3/performance_comparisons_between_suphp_and_mod_php/d1ruam9 We need SuPHP because of mod_ruid2 . I'll guess I'll have to setup the VM test. I'm surprised there are **no** benchmarks to be found! 
http://mnapoli.fr/overriding-dependencies-with-composer/ On mobile so can't talk about it much but this here has an example. Turns out I didn't mean dependencies but repositories. Sorry for confusion
Oh, this is so priceless! Seems like we don't even need to fight for privacy and security for this one: the corrupt may do it for us \o/
Laravel wouldn't be what it is without composer. 
I haven't used Okta before, but just reading of your accomplishment is a great motivation to give back to open-source which we rely so heavily upon. Thank you !
Appreciate it and all, and don't want to get toxic, but ZF2 let an impossible barrier of scars behind. Is it worth checking it out again after years of symfony? 
I'd like PHP to have this as it would solve a problem that's emerging with PSR-7 middleware. Here are two PSR-7 middleware interfaces and a directory of middleware implementations: - [Zend Stratigility](https://github.com/zendframework/zend-stratigility/blob/master/src/MiddlewareInterface.php) - [Relay.Relay](https://github.com/relayphp/Relay.Relay/blob/1.x/src/MiddlewareInterface.php) - [oscarotero/psr7-middlewares](https://github.com/oscarotero/psr7-middlewares/tree/master/src/Middleware) All three of these projects are use **different** middleware signatures. Relay uses the `RequestInterface` type hint rather than `ServerRequestInterface` (although the latter extends the former) and oscartoero's middlewares don't allow the last parameter (for the `$next` callable) to be null. A combination of this, and the fact that many developers like using callables to define middleware, means that none of the popular middleware pipelines have any type safety (other than `callable`) when it comes to adding middleware. It won't be a massive end of the world problem, but it could create some nasty edge cases that are hard to debug. Thinking more aboute the proposed RFC, another option that I toyed with was to allow functions and callables to actually **implement** a signature. I think this has benefits, as part of the benefit of a class implementing an interface is not just saying that the method signatures match, but also that it actually explicitly implements that behaviour. My vision was something like: signature FilterCallable(string $input): string; function foo(string $callable): string implements FilterCallable { // ... } $closure = function (string $callable) use ($something): string implements FilterCallable { // ... } class SomeClass { public function foo(string $callable): string implements FilterCallable { // ... } } Either way, I'm happy the issue is getting a bit more attention.
One thing REST I don't think it has it's a "contract". Which SOAP has. And, depending on the situation, that might be useful. Don't like SOAP myself, but I know of this difference. Happy if someone can obliterate my argument. Then SOAP would have nothing.
Top work, may well be putting this to some production use in the near future!
After all Drupal did the world a favor, so I guess "[thanks](http://cdn.meme.am/instances/500x/57611999.jpg)"
First EAP release after 2016.1 was released. * Smart completion of function arguments * Joomla! initial support * Support of Overwrite/Merge/Skip All methods for conflicts resolution in deployment * Values for constants and namespaces for functions are shown in the completion list * New Blade tags support 
Germany has been pulled into the main branch as of today!
Thanks for guiding me through this ♥
&gt; Treat me like a 5 year old, as this stuff really confuses me. This is not something that most 5 year olds are capable of understanding. There are a lot of things to consider and a lot of moving parts involved in a "simple" form submission =&gt; database insert.
There exists a culture of developers that prefer to argue with headlines and assumptions than the merits of the software itself. This seems to be an article that feeds on that. Its clickbait for webdevs.
Found this in 15 seconds: http://www.firewing1.com/blog/2010/06/28/some-quick-php-performance-stats-suphp-vs-preforkmodphp-vs-itkmodphp
You should check out [API Evangelist.](http://apievangelist.com/) Great site with lots of API resources. Also, be sure to search GitHub for the specific API you want to use and the language. It might not be "good written" but it could be a really good starting point. I once found an API wrapper (in PHP) for an old version of an API that I was able to morph into my own. Saved me many many hours of groundwork. Good luck!
Thanks for your response! I'm trying to learn about Requests, and seperating http requests and responses but I'm having a hard time finding good examples. 
Seems exactly like the C# concept of a delegate, which would be awesome.
So, there's a nonzero chance that they got popped because they didn't update their Drupal install for a few months. This is why I consider "EdDSA-signed auto-updating" essential for any CMS to call itself secure in 2016, and "[SPHINCS](https://sphincs.cr.yp.to)-signed auto-updating" essential for any CMS in the future.
I think a lot of CMS's are designed to be ran on shared hosts so adding a cronjob to do updates might not be an option but they could still log into the admin control panel and update it from there. Wordpress at least let's you do that. idk about Drupal. But I think WordPress definitely has the right idea. Altho I don't think they check signatures..
The RFC also doesn't let you have a callable signature inline (e.g. in `function foobar(callable(int): int $foo)`), which is a shame.
&gt;Drupal 7.23 What a bunch of casuals, my company uses Drupal 6
Hey, We've got core expertise with PHP and you can please keep in touch and we would be glad to proceed further. Thanks!
It's common on CDNs like Cloudflare to get certificates issued that way.
Even though it is still a "concept" it would be nice if they told us how to run it...
It's definitely progress from callable, but it's a 80% solution rather than a 100% solution (numbers pulled out of thin air). We already have the `implements` keyword and I don't see any good reasons why it shouldn't be used here.
http://blog.peachpie.io/2016/03/executing-peachpie.html
How would autoloading work with this? a seperate file for just a callable definition?
No problem, happy executing :)
Their Drupal version was *three years* old.
I just spent several days arguing with a client over approving a billable hour to update their Drupal site that the previous admin hadn't updated for over a year. They are totally getting a copy of this article... 
No reason you can't serve the visitor and simply trigger an update separately. Also, updates don't take longer than a few seconds in my experience. 
Don't take those as perfect examples. Even if it looks nice it's horribly hacked together and only loosely tested :) * https://github.com/dsohler/menu-class * https://github.com/dsohler/pjf-class
Looked at the source of their homepage and worked my way back up through their assets folders. For example: https://portal.mossfon.com/sites/all/libraries/fancybox/lib/jquery-1.10.1.min.js
I'd rather have 80% and work to later get the remaining 20% than stick with the current zero. This won't prevent bridging the gap in the future. Perfect is the enemy of shipped, etc etc. 
I dislike the use of the implements-keyword for a simple reason: I think it is too strict. If I want to use a filter, why would I make the user of my method pass anything special? Why can't it be a simple function (well, wrapped in a Callable or something alike if necessary)? I understand why you would want to re-use existing keywords, but I think it creates unnecessary overhead and disallows some things (e. g. it might make it more difficult to pass a function from a library without creating a wrapper).
Oh goody, it'll allow for WordPress plugins to be written in .net /s
This is a failsafe *just in case* someone forgets to set continuum.php to run as a cronjob. :) Since Airship requires libsodium, I don't anticipate it will be deployed widely in shared hosting environments this year.
I want the problem this RFC addresses to be solved, but this seems like an odd solution to me. It mixes type definitions / aliases with the adding the capability to make callable types parameterized. 
I'm using php-ews. It's awesome! Thanks for that.
I've never used mod_ruid2, but I fail to see a valid reason for needing it. If what you need is to isolate each website to its own user then create separate FPM pools.
Hmm... I like the idea behind this, but not really the implementation. It's pretty semantically, well, *weird* to translate OOP magic methods into something that not only works outside of that scope, but would typically only be used outside of that scope (I very rarely see `__invoke` actually used outside of hacky callback signatures) Maybe that's just due to a lack of precedent around that kind of thing. If named and anonymous functions could literally implement interfaces, it would feel ok; only being able to do so implicitly feels like too much magic (doubly so since the interface itself is defining a magic method). But as it is, right now there's a fairly clear division between OOP stuff and everything else, and it seems really unnatural to blur the line in just this one area.
I have the same feelings. Why not to store in db and cache it?
For this to work, the type hint must always specify that a callable is being referenced instead of say, an object of a certain class. In the following example, if I would type hint a function in the following way: a(Test $t), in this case, PHP would not know what are you exactly talking about, if you wanted to type hint for the class Test or for the Callable function test. &lt;?php class test{ public function __construct($str){ echo "$str\n";}} function test($str){ echo "$str\n"; } $test = new test('class test'); test('function test'); In an ideal world the type hint would be in the following manner: &lt;?php function(callable Test $a) : string{} Or function(Test $a) : string{} Or why not: function(instance Test $a): string
I found it awkward that you still used the original namespace. Made me question more than once, if I was using the right one :) I like how you have wrappers for some common use-cases. If you can clearly separate underlying API, from the wrappers, I'd like to see more. For example, this feels so awkward to me, and requires so much in-depth knowledge of the actual API: $api-&gt;createItems(array( 'AcceptItem' =&gt; array( 'Sensitivity' =&gt; 'Private', 'ReferenceItemId' =&gt; array( 'Id' =&gt; $item-&gt;getItemId()-&gt;getId(), 'ChangeKey' =&gt; $item-&gt;getItemId()-&gt;getChangeKey(), ) ) ), array('MessageDisposition' =&gt; 'SendOnly')); Why not add a `$item-&gt;accept()` function?
Hm, I'll look in to what AcceptItem is. You should be able to replace the array where you manually fetch id and change key with an $itemId-&gt;toArray(). What other common use cases do you come across that doesn't have a simple API call?
It's just preference. Storing it in the db certainly is not wrong. Personally I don't want to create a table for holding a single value. This class allows me to just put in a few lines of code and be done with it.
This'll work, but I tend to advise: "parameterise/bind all values unless you can't (e.g. with `IN` lists)". 
Here you go: https://spatie.be/opensource/php https://spatie.be/opensource/laravel
Got you. Sorry, sometimes it's hard to know the knowledge level of those asking questions in this sub.
Definitely expect a `CalendarAPI::acceptMeeting(ItemId $itemId, $sensitivity='Private', $options =array())`, as well as `tentivelyAcceptMeeting` and `declineMeeting` functions this week. As to why I don't just implement `$item-&gt;accept()`, `$item-&gt;decline()` or `$item-&gt;save()` function? It's definitely on my TODO list. The first is the the classes are created by `\SoapClient`, not myself. It's done by passing in a `classmap` to the client (which means if you want to extend my items, go ahead. You can register them when you create a new API and they'll be returend to you). This means that `__constructor()` for each class isn't called. The properties appear to be set through reflection, similar to how PDO works. So injecting the API class in to the objects is troublesome, but I think I can do it somewhere. The second issue is that I've split up the API in to different classes. I have my BaseAPI (for universal functions, like createItem or getItem), my CalendarAPI for Calendar functions and my MailAPI for my mail functions. If you get an item from `BaseAPI`, and we inject `BaseAPI` in to it, it won't have access to `CalendarAPI` functions. I could just use `BaseAPI` functions, but I'd rather not if I can avoid it. I'm doing this mostly for code organization, so I don't get lost in a few thousand line long API file, but I'm considering moving these to traits, or combining them. Or something. So in the end, it's definitely something I'm considering and planning in the future, I'm just trying to figure out how I'm going to implement this kind of thing well. I'll probably have an `API::accept($item)` function before I have a `$item-&gt;accept()` function
I mean, that's covered by the span "a few months"
Actually, you can write in C# and have the parts interoperate with PHP, too.
&gt; HHVM compiles PHP to C No, no it does not. It's not even close, as [HHVM compiles down to ASM, not C](http://hhvm.com/blog/6323/the-journey-of-a-thousand-bytecodes). You're confusing it with HPHPc (HipHopC) which compiled PHP to C++; things learned from that were integrated into HHVM to not go to C++ and go to VASM instead.
:-)
Yes, you're right. We haven't really looked at HHVM too much yet. Thanks for the remark, we just changed it in the article. The point still stands though, HHVM is not the same as Peachpie.
https://github.com/Tucker-Eric/EloquentFilter
On that note, a quick reminder that some day the enums RFC should be put into vote ... some day ....
 $idqs = implode(",", array_fill(0, count($ids), "?")); $sth = $db-&gt;prepare("SELECT * FROM TABLE WHERE id IN ({$idqs})"); $sth-&gt;exectute($ids);
There's an IR stage in HHVM's compiler which is similar to MSIL (A bunch of the IR designers came from MS working on .NET, in fact). The "quirks" of PHP can be a bit tricky to replicate, which is why it does its own native compilation, but I imagine there are big gains to be had from leveraging the CLR.
I made basically the exact same system back in 09 for a client! It was fairly straight forward but fun/rewarding to see something work so...predictably! I did a *much* larger one afterwards for generating forms (including validation rules etc), that one nearly killed me lol.
https://github.com/VitorVRS/php-digital-signer https://github.com/VitorVRS/php-redis-stream-wrapper
As a PHP developer, from a simple command (`git push`), my code modifications: - are run through a code sniffer (`phpcs`) check and validated against an extensive set or rules (psr1, psr2 and a lot of custom rules) - unit tests (`phpunit`) are run - for PHP 5.5, 5.6 and 7.0, as well as hhvm - code coverage report is build, and sent to various 3rd party code-report services (`coverall`) - any test errors create a build error and report it - the api documentation is built and sent to gh-pages - the results of the build is sent by email and to a slack channel ...in a few seconds. **Travis CI** is really one of those _open-source_ services (like `github` / `bitbucket` but also `packagist`, `phpunit` and `xdebug`) that revolutionized / revitalized PHP development. I try imagining explaining all this "magic" to myself 10 years ago... 
Fuck Joomla, are you joking?
Let's just turn PHP into Java or Haskell, if that's what everyone wants.
I'd love to share! [Lavacharts](http://github.com/kevinkhill/lavacharts)
A Minimalist PHP Framework - https://github.com/BookOfOrigin/Ori A utility for finding dates in strings containing other text: https://github.com/BookOfOrigin/GiveMeADate
T̫̺̳o̬̜ ì̬͎̲̟nv̖̗̻̣̹̕o͖̗̠̜̤k͍͚̹͖̼e̦̗̪͍̪͍ ̬ͅt̕h̠͙̮͕͓e̱̜̗͙̭ ̥͔̫͙̪͍̣͝ḥi̼̦͈̼v҉̩̟͚̞͎e͈̟̻͙̦̤-m̷̘̝̱í͚̞̦̳n̝̲̯̙̮͞d̴̺̦͕̫ ̗̭̘͎͖r̞͎̜̜͖͎̫͢ep͇r̝̯̝͖͉͎̺e̴s̥e̵̖̳͉͍̩̗n̢͓̪͕̜̰̠̦t̺̞̰i͟n҉̮̦̖̟g̮͍̱̻͍̜̳ ̳c̖̮̙̣̰̠̩h̷̗͍̖͙̭͇͈a̧͎̯̹̲̺̫ó̭̞̜̣̯͕s̶̤̮̩̘.̨̻̪̖͔ ̳̭̦̭̭̦̞́I̠͍̮n͇̹̪̬v̴͖̭̗̖o̸k҉̬̤͓͚̠͍i͜n̛̩̹͉̘̹g͙ ̠̥ͅt̰͖͞h̫̼̪e̟̩̝ ̭̠̲̫͔fe̤͇̝̱e͖̮̠̹̭͖͕l͖̲̘͖̠̪i̢̖͎̮̗̯͓̩n̸̰g̙̱̘̗͚̬ͅ ͍o͍͍̩̮͢f̖͓̦̥ ̘͘c̵̫̱̗͚͓̦h͝a̝͍͍̳̣͖͉o͙̟s̤̞.̙̝̭̣̳̼͟ ̢̻͖͓̬̞̰̦W̮̲̝̼̩̝͖i͖͖͡ͅt̘̯͘h̷̬̖̞̙̰̭̳ ̭̪̕o̥̤̺̝̼̰̯͟ṳ̞̭̤t̨͚̥̗ ̟̺̫̩̤̳̩o̟̰̩̖ͅr̞̘̫̩̼d̡͍̬͎̪̺͚͔e͓͖̝̙r̰͖̲̲̻̠.̺̝̺̟͈ ̣̭T̪̩̼h̥̫̪͔̀e̫̯͜ ̨N̟e҉͔̤zp̮̭͈̟é͉͈ṛ̹̜̺̭͕d̺̪̜͇͓i̞á͕̹̣̻n͉͘ ̗͔̭͡h̲͖̣̺̺i͔̣̖̤͎̯v̠̯̘͖̭̱̯e̡̥͕-m͖̭̣̬̦͈i͖n̞̩͕̟̼̺͜d̘͉ ̯o̷͇̹͕̦f̰̱ ̝͓͉̱̪̪c͈̲̜̺h̘͚a̞͔̭̰̯̗̝o̙͍s͍͇̱͓.̵͕̰͙͈ͅ ̯̞͈̞̱̖Z̯̮̺̤̥̪̕a͏̺̗̼̬̗ḻg͢o̥̱̼.̺̜͇͡ͅ ̴͓͖̭̩͎̗ ̧̪͈̱̹̳͖͙H̵̰̤̰͕̖e̛ ͚͉̗̼̞w̶̩̥͉̮h̩̺̪̩͘ͅọ͎͉̟ ̜̩͔̦̘ͅW̪̫̩̣̲͔̳a͏͔̳͖i͖͜t͓̤̠͓͙s̘̰̩̥̙̝ͅ ̲̠̬̥Be̡̙̫̦h̰̩i̛̫͙͔̭̤̗̲n̳͞d̸ ͎̻͘T̛͇̝̲̹̠̗ͅh̫̦̝ͅe̩̫͟ ͓͖̼W͕̳͎͚̙̥ą̙l̘͚̺͔͞ͅl̳͍̙̤̤̮̳.̢ ̟̺̜̙͉Z̤̲̙̙͎̥̝A͎̣͔̙͘L̥̻̗̳̻̳̳͢G͉̖̯͓̞̩̦O̹̹̺!̙͈͎̞̬ * https://github.com/mdwheele/zalgo Breathe... it's okay.
This is really awesome. And useless. But that makes it awesome. Had anyone considered creating a Zalgo chat app? The platform where vengeful Gods converse! I'd be willing to contribute.
[First page](https://en.m.wikipedia.org/wiki/Website#mirror_site) of a google search for "website mirror": &gt; A website that is the replication of another website. This type of website is used as a response to spikes in user visitors. Mirror sites are most commonly used to provide multiple sources of the same information, and are of particular value as a way of providing reliable access to large downloads.
Hahahaha, yes! Check out http://zalgo.us. I waste $8.99 / yr on it and it's amazing. I also have a crap-tastic hacked Slack integration in there (https://github.com/mdwheele/zalgo.us) Hack away!
Got a fair few on [my GitHub account](https://github.com/hassankhan) and on the [Larabros organisation](https://github.com/larabros/).
Well you can definitely have a table for all sorts of "one off" values that you need to store. Not one table per value. Since you made a thing that allows you to store more than one value, it seems you'll end up with more than one anyway. If you have 2 admins, you also can't use DB transactions to perform either optimistic or pessimistic locking to make sure they don't overwrite each other without being aware of it. DBs that support transactions help with that. Most importantly, once the site you're working on becomes big enough to require a second server. Or even if you already have a second server already that's just here for cutover in case things go bad, then suddenly your site is in a different configuration over there. For this I'll always prefer to put this kind of things in the DB. Nothing wrong with a table like: CREATE TABLE `config_values` ( `key` varchar(512) NOT NULL DEFAULT '', `value` json DEFAULT NULL, PRIMARY KEY (`key`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; That's for mysql. If your DB doesn't allow JSON fields, use text and store serialized json. More: are you doing backups of your whole server or only the DB? If only the DB (which is usually enough), that would be one more reason to store things there. Do you provision a new VM on each deploy? Then I would put things in the DB. Do you think you'll ever have to kill your server and re-create it from scratch? Then I would put things in the DB. 
Great job creating a standard there, PHP-FIG. Seems like there was an (half-baked IMO) interface for everything except middleware in PSR7. EDIT: Sorry for the tone, it just brought up an bad memory of trying to get one of these middlewares to work with Guzzle
Thank you so much for your work :)
I hope it's faster.
http://www.cvedetails.com/product/128/PHP-PHP.html http://www.cvedetails.com/product/3091/Microsoft-Asp.net.html http://www.cvedetails.com/product/18230/Python-Python.html http://www.cvedetails.com/product/6761/Adobe-Flash-Player.html
I'm not sure a trait is the best idea here. It limits your abilities. If you wanted to add something else the boot method of your class, you'd have to import the trait and alias. There's no point of trait really outside of an Eloquent model. Seems better to have a subclass of `Model`, `UuidModel`, and have your domain classes extend that.
I once made that for forms, too. But it was a shitload of functions and not a class. It was horrible :)
WTH is this!? This is magnificent!!! Thank you for this :)
A collection library that supports both functional and OOP approach. Basically port of Clojure's sequences (minus the transducers) with OOP syntactic sugar. Also, immutable. Repo: https://github.com/DusanKasan/Knapsack Docs: https://dusankasan.github.io/Knapsack/
Trait is fine if you give the trait a boot method of its own and leave the base boot method alone: public static function bootUuidTrait() { // whatever needs to be booted for the trait } Laravel actually spins through all the boot* methods it can find on creation...in the base Model class: protected static function bootTraits() { foreach (class_uses_recursive(get_called_class()) as $trait) { if (method_exists(get_called_class(), $method = 'boot'.class_basename($trait))) { forward_static_call([get_called_class(), $method]); } } } This has been useful for attaching behaviours to models for me in the past... and it seems preferable to a messy inheritance tree if you decide to start tacking on other behaviours
This is precisely the idea... That is how everything works in functional paradigm - functions tend to be abstract so that they could be used in a variety of different cases.
Pardon my vocabulary, but fuck SOAP with a cactus dildo. Seriously. 
php.net also uses mirror sites, might be some useful information there: https://secure.php.net/mirrors.php
As for why the down-vote, PHP is measured up until 2016, ASP.NET only until 2010; both .NET &amp; Python are general purpose languages; as they grow in popularity vulnerabilities may increase and I'd suggest there are a few that are not represented for .NET that persist even on the Azure platform as we used some known problems in 2014 to rescue a clients data that was being held by an unscrupulous vendor.
Why is my largest question? If you want to write .NET, go write .NET; don't write PHP then cross-compile.
Hi guys. If you read the tutorial: Thanks! English is not my native language, so if you see some errors please don't hesitate to correct me. The same goes for the tutorial. If you see something strange, or not working, please contact me. I will try to fix this! :) 
1. Migrating legacy PHP applications to a modern platform 2. Using each language as needed within a single project (it is often easier to write things in PHP - for example parts of Peachpie can and will be written in PHP) 3. Using PHP where it otherwise cannot be used
In my opinion, CI models (and models in other frameworks) have one advantage - you write logic related to fetching them based on different conditions in one place only. So, if you will need to change query, you will do it in one place only - in your case you will have to change in many places.
If you are forced to work with Codeigniter you could use DataMapper ORM: http://datamapper.wanwizard.eu/
Not everyone has stored procedures, or wants to use them. The model is where any interaction with your data layer should occur (as far as MVC goes).
If you're doing fine without them, no worries, don't use them. However, when a big enough project comes along, you'll start writing queries out multiple times and you'll have to massage data before and/or after database calls a lot. Models are where you can put all that. Having data access in small pieces also makes them easily testable.
Maybe you use "vagrant box" to ship the box right away. :-)
its there. 
You know how many of my clients wouldn't patch their site if they didn't have to? All of them bar 1. I have a "When a security patch comes out, pay to have it put in place, or find new hosting".
Still a long way to go before this will be possible :)
This problem wouldn't even exist if people who use frameworks would stop thinking the framework needs to do everything for them.
FUCK SOAP campaign :D
Currency conversion based on the European Central Bank's rates :D https://github.com/IonutBajescu/currency
A multilingual shop/cms with database based routing https://github.com/HaaseIT/HCSF
Documentation, documentation, documentation Also when naming variables and methods I personally try to avoid abbreviations just because not all abbreviations are as common as we may think, and abbreviations we make up ourselves are not necessarily obvious to the next developer
I really like how JQuery handles AJAX but I'll also admit I have never seriously used an other frameworks
Some parts of the world it's easier to read as 2.867,00
After reading service providers i had one question, how to express a service provider that will depend on non provided service (an abstract one in some)? Example i have a service that depend on a log mecanism which i want to let the user specify. In this case i think it should be conventional to namespace service name like: 'my-service.logger' instead of 'logger' to avoid highly probable name conflict. I like the simplicity of ServiceProvider and the flat list (which will be pain if you don't namespace your service as mentioned before). 
Not sure I like this one... In my mind square braces = you are constructing or accessing an array. But with this proposal the square braces in this context would also be used for creating or assigning non-array variables, which to me is a little strange.
Any reason to not use [PuPHPet](https://puphpet.com/)?
Hey Matthew, Good point. The "glide" sample is probably not the best one. However, there are indeed many packages that are only about creating a few entries in the container. It is probable that a lot more things will remain framework specific, but as more PSRs come down the road, the number of framework specific code should be reduced. For instance, PSR-7 is a good way to write framework-agnostic controllers. Coupled (cleverly) with ServiceLocators, it could allow packages to provide their own routes out of the box. Yet, you are right, a lot remains to be done (for instance regarding templating and views).
Is there any reason you're opposed to recaptcha? I say this because you mention a concern about adding another step to submitting the form. Recaptcha works pretty well for this by (most of the time) just having users check a box, a whole lot better than some obscured numbers or words of more conventional captcha systems.
In general, my UX philosophy is to minimize effort for the user as much as possible. We used to have a conventional captcha but we had some complaints about usability which is why we went with the unobtrusive solutions instead. I think you're right on reCaptcha though. If it's just a checkbox the minor addition of checking a box isn't too bad if it stops our spam problems. I was also just interested in more general approaches to spam control too though. For example, in analyzing the addresses that were triggering the block, I noticed most were from disposable email services. So I was looking into finding a blocklist / webservice that could help filter. We also had a lot of bobXXX@email.com where XXX was a random number set so I was considering doing some sort of analysis for the frequency of similar submissions. Ultimately though, I feel like trying to aggressively hunt for bad addresses is really a fool's errand. I mean anyone can just register a set of domains and add a catch-all and I'd have an impossible time trying to do any sort of analysis on that anyway.
Use https and http2. Also log IP addresses, if an IP tries to submit a form second time show him a captcha. If you are only in IPv4 you can also block based on first 3 numbers of the IP. Like, X in X.X.X.Y
A time delay is another approach. You measure the time between displaying the form and it being submitted. If that happens too quickly then it's probably a 'bot. I added this for comments on my Drupal blog. It works pretty good except that I've had to increase the time to about 2 minutes to stop all of it. Someone posting too quickly gets an error message saying to wait a minute and hit the button again. That's fine for my blog but maybe not for other things.
I was kind of curious how other languages deal with this. Hello Google! [Python](http://stackoverflow.com/questions/9597803/php-list-equivalent-in-python) [Javascript](http://stackoverflow.com/questions/1954426/javascript-equivalent-of-phps-list) Java doesn't have anything like this that I could find. [Ruby](http://www.phptoruby.com/list) [C#](http://stackoverflow.com/questions/7086727/equivalent-to-list-of-php-in-c-sharp) [Perl](http://www.cs.wcupa.edu/rkline/perl2php/) Seems that the syntax was pulled straight from Javascript. Personally, I'm kind of ambivalent about this. I use the short array constructor a lot these days, but putting this fix in for list() wouldn't impact me very much at all. I don't think it would fit well in PHP, but if I had to choose a favorite I rather like Python's syntax on this one.
There are plenty you could find , some of them I love are https://github.com/auraphp https://github.com/atlasphp https://github.com/doctrine https://github.com/symfony https://github.com/zendframework https://github.com/cakephp Watch the repos you think is interesting for you. Each discussion will teach you something new, each day.
Good idea...if it's an instant submission, you know it's garbage. That'd be a pretty easy layer to add-on which is unobtrusive for legitimate inquiries which is nice.
I have queue workers that run for months. Seems ok, at least for simple scripts.
I think any developer who builds a site for a company based on Drupal (many other CMS's too) w/o the company having a maintenance plan is doing everyone a disservice. 
This is what I said the former destructuring `list()` proposal should be, but nope...
But they are using this in JavaScript with ES6, and everyone's using it there. It would be a nice addition to PHP.
Awesome RFC, would love this. After getting comfortable with [pattern matching](http://elixir-lang.org/getting-started/pattern-matching.html#pattern-matching) in functional programming languages, I find myself wanting to use constructs like `list` a lot more often, and using the square bracket syntax makes a ton more sense. Anyone who finds this ambiguous is probably just not terribly familiar with destructuring in general. It's not that square braces are now being used for both construction and deconstruction of an array, the difference between construction and deconstruction is purely about whether you are left or right of the equals sign. For example, in Elixir, I can create a tuple like so: a = {1, 2} I can also assign `b` to the second element of that tuple like this: {_, b} = a If this gets accepted, I'd love to see it extended in a future RFC to support the `...` operator, to make it easy to grab the tail of a list: [$head, ...$tail] = [1, 2, 3, 4, 5] // $head == 1; // $tail == [2, 3, 4, 5];
I know this doesn't mean we automatically add it to PHP too but it's a feature of other languages ie es 2015 (the 2015 spec for js).
list() defines variables BY accessing the array (or "pulling it apart" if you prefer). 
My thoughts too. I don't have to deal with this at my current job luckily but I've had spam situations in the past that the client was adamant about some complex solution. Almost always we ended up on some sort of captcha after the bots beat our 'flavor of the month' antispam. Recapcha, at least in our A/B tests had a better conversion rate and our strategists at the time contributed it to the fact that people were already familiar with recpacha. They knew as soon as they saw it that it was an easy thing to solve / click. A capcha process someone has never seen before (not matter how simple it actually is) is always going to lose out to the a familiar path. As for protection outside of captcha, we never found anything long term that worked. Plenty of false solutions though! Bot programmers know their stuff!
ops dude chiming in here, hasn't been a problem for us, but we manage everything via containers. Code gets pushed, goes through our CI tool runs the tests/etc, builds the container without the dev depedencies, and pushes to our cluster. Done. On the operations side we worry about maintaining our cluster and backing services (redis, mysql, elasticsearch, etc), devs get to code and deploy stuff. 
Honeypot works for me
And then what happens if you need to move to a different data store? The point here is abstraction. You separate the concern of low level database interaction from higher level data fetching and business logic. Application business logic doesn't belong embedded in your data store. 
That makes sense. For unrelated reasons, we recently upgraded our min TLS to 1.1 so that may provide some assistance as well. I like the GeoIP country concept. Anything foreign gets a reCaptcha. Visitors are going to be close to 100% domestic, so this would be a good indicator for shenanigans.
Any blame or credit I take for either version gets passed to the responsible teams, none of which I am a member. :-D
Thanks for the response. It's good you believe in your product, heads up I have opinions, none of what you've said so-far makes a great deal of sense, but I appreciate you taking the time. &gt; Using PHP where it otherwise cannot be used Any server that runs .NET can run PHP. Managed servers (so no admin / privileged access) running .NET only I'd imagine would be the only market for that. Do you have any case-studies showing TCO for changing providers / plans &amp; skilling up a PHP team on .NET, vs using peachpie; and why people won't need actual .NET devs once the code is migrated. It's a very complex problem space you are creating; so I'd be really interested to know how you handle that. &gt; Using each language as needed within a single project (it is often easier to write things in PHP - for example parts of Peachpie can and will be written in PHP) So why not use PHP as a glue layer? It's been done this way for over a decade now; what problems have you identified that means it makes sense to scrap the humans, or retrain them with the risks that brings? PHP doesn't fit every use-case; neither does .NET. I Think most people embrace that neither PHP or .NET fits all problems, do you have any figures to suggest otherwise? &gt; Migrating legacy PHP applications to a modern platform By using the existing source-code? To make a fair comment on this I'd need to see an example in and out; I'd imagine like most non-trivial machine generated code; it looks like dog-shit &amp; is impossible to maintain. I'd love to see some machine-generated production-level code that was easy to maintain, but I've yet to see it. Examples would really help to convert people like me who make decisions on technologies for other businesses, that are more familiar with other solutions, which lets be honest are no good. Again thanks; I'd love to have my mind changed as it would mean for businesses that accidentally selected a language that is not designed for long-running, they could migrate and keep their code. The problem would be that all their dev's skills would essentially be scrap and the code would need to be pretty high-quality, generate comparable test-suites etc in-order for it to make sense. Feel free to PM me
Familiarity with pattern matching in Haskell is definitely one of the inspirations for me. I'd love to have some sort of pattern matching statement (equivalent to Haskell's `case`) in PHP eventually, it would make some things more elegant. (Hi, I'm Andrea, one of the RFC's authors. Well, I wrote the text. Bob wrote the patch.)
Might have answered my own question here... But maybe I'll leave this up in case someone else has the same questions I do... 
&gt; As long as the necessary require statements are left in the code (where they belong), we can ignore Composer entirely and install the package with the system package manager. Woah, good luck with that.
What about making the square brackets go backwards? `]$a, $b[ = ['a', 'b']`? I mean, aside from the fact that it looks a bit weird at first ;)
This adds more inconsistency to the PHP syntax. PHP is an imperative language, and this change would create an expressive way of declaring an array, rather than the standard declarative way. Creating more inconsistencies to the PHP syntax does not add value. 
What happens when you want to reuse that query from another controller? The whole point of the model layer is to keep things separated and reusable.
Sounds like they're serving you a shit sandwich with a side of customer adverse policy. Sorry you got scammed.
It's not exactly unsolvable. Both Debian and SuSE opted for custom repackaging of stable libraries for system installation. It has some downsides. But you can do the same. I've personally wrote a [shim to normalize composer libs](http://fossil.include-once.org/xpm/wiki/source_composer) and generate system-wide packages. Given a phar setup and a proper autoloader, you could even have multiple versions still.
No I'm time to time contracting. It's a bit beyond tinkering unfortunately
Apparently they also had lots of that data directly lying in web-accessible directories that are unprotected and all you need is the URL. At least there were some screenshots of a panama news site that would indicate this.
Also, laracasts.com has great tutorials.
If you are looking for a validation typed library, check out https://thecoderepo.com/repository/validator, https://github.com/illuminate/validation. Laravel's validation is awesome by the way!
I started working on this a few days ago, but haven't pushed up any commits in a few days due to work. Still have tons of work to do though. https://thecoderepo.com/repository/github-wrapper
I use Slim 3 all the time, especially at work! Its really good for REST apis which is my main use. Im not too familiar with public web applications currently using Slim.
I have been using https://laracasts.com/ to brush up on my skills, really like it.
I mean is it really needed...
Wow, I've never seen that `when()` method before but will definitely be helpful for me. I developed this package while building a crm and getting super annoyed with how bloated my controllers were getting every time I was asked to add another column to be able to sort and filter by. I couldn't just write one dynamic method to loop through the input because sometimes it is a `LIKE` query or sometimes the filter needs to access a relationship or multiple columns. 
Unless something changed from when this started, you actually get a license for the version when the subscription period (1 year) started. So, you get a subscription, then get updates, then drop subscription at 1 year point, you revert back to the first version you used and lose access to all the updates since then.
I think the whole idea was copied from "Yahoo!"
For my site with very few visitors. I found 3 seconds already enough. Important is that you always create a correct error message. E.g. people wrote their text in Word and copy paste might be faster than the time limit.
Ooh, I like that! 
PuPHPet has issues. In addition it's likely going to (pretty stupidly IMO) drop Debian all together. They're already lagging behind as it is. https://github.com/puphpet/puphpet/issues/2256#event-618727334
Also, I didn't see Debian with PHP 7.0 (not sure though)
Ughh, I'm a subscriber and I love the IDE, but this was scary to read. Sounds like a punishment for not keeping the subscription. &gt; "Ow, your student loans are tough and you can't keep the subscription currently? We'll let you go, but if you decide to come back - you'll pay for your treason"
Isn't `...` called the spread operator? Regardless, if the plan is to implement square-bracket destructuring as a synonym for `list()`, I don't know what the value is, but if the point is to bring in `...` then I think it is wonderful.
I'm an author of official PHP client for SimilarWeb API: https://github.com/thunderer/SimilarWebApi . This library has a neat feature of generating all request / response classes automatically from configuration during installation. If you have any questions, let me know!
Here is what i have in mind: class Provider { public $prefixProvide; public $prefixDepend; public function __construct($prefixProvide, $prefixDepend) { $this-&gt;prefixProvide = $prefixProvide; $this-&gt;prefixDepend = $prefixDepend; } public static function depends() { return []; } public static function provide() { return []; } public static function alias() { return []; } } class MyLoggerProvider extends Provider { public static function provide() { return ['my_logger' =&gt; [$this, 'getMyLogger']]; } public function getMyLogger(ContainerInterface $container) { return new MyLogger(); } } class MyServiceProvider extends Provider { public static function depends() { return ['logger' =&gt; new \Exception()]; } public static function provide() { return ['my_service' =&gt; [$this, 'getMyService']]; } public function getMyService(ContainerInterface $container) { $dependency = $container-&gt;get('logger'); return new MyService($dependency); } } class WireStuff extends Provider { public function alias() { return [ 'voiture.logger' =&gt; 'swag.my_logger', 'yolo.logger' =&gt; 'swag.my_logger' ]; } } class Container { private $definitions = array(); public function register(Provider $provider) { foreach ($provider-&gt;depends as $name =&gt; $dep) { $definitions[$provider-&gt;prefixDepend . $name =&gt; $dep]; } foreach ($provider-&gt;provide as $name =&gt; $prov) { $definitions[$provider-&gt;prefixProvide . $name =&gt; $prov]; } foreach ($provider-&gt;alias as $name =&gt; $alias) { $definitions[$name =&gt; $alias]; } } private function getData($name) { if (!isset($definitions[$name])) { throw new \Exception(); } $data = $definitions[$name]; // dependancy undefined if ($data instanceof \Exception) { throw $data; } // alias if (is_string($data)) { $data = $this-&gt;getData($data); $definitions[$name] = $data; } return $data; } public function get($name) { $data = $this-&gt;getData($name); if (is_callable($data)) { return call_user_func($data, $this); } throw new \Exception(); } } $container = new Container(); $container-&gt;register(new MyServiceProvider(null, 'yolo.')); // container has : // my_service =&gt; callable // yolo.logger =&gt; &lt;undefined&gt; $container-&gt;register(new MyLoggerProvider('swag.', null)); // my_service =&gt; callable // yolo.logger &lt;undefined&gt; // swag.my_logger =&gt; callable $container-&gt;register(new MyServiceProvider('other.', 'voiture.')); // my_service =&gt; callable // yolo.logger &lt;undefined&gt; // swag.my_logger =&gt; callable // other.my_service =&gt; callable // voiture.logger &lt;undefined&gt; $container-&gt;register(new MyLoggerProvider('maison.', null)); // my_service =&gt; callable // yolo.logger &lt;undefined&gt; // swag.my_logger =&gt; callable // other.my_service =&gt; callable // voiture.logger &lt;undefined&gt; // maison.logger =&gt; callable $container-&gt;register(new WireStuff(null, null)); // my_service =&gt; callable // yolo.logger &lt;undefined&gt; // swag.my_logger =&gt; callable // other.my_service =&gt; callable // voiture.logger &lt;undefined&gt; // maison.logger =&gt; callable // voiture.logger =&gt; swag.my_logger // yolo.logger =&gt; swag.my_logger It seems to resolve the name clashing problem.
I see this a lot. Never used it. But I think there was a discussion about using the clicking of the nocaptcha as a form submit button. That was, there isn't an extra step or complexity for the end user. Only the divergence from having a submit button to post the form, and having a captcha checkbox that does it. A small label stating "check the box to submit tge form" would clear that up.
Hey. I did that, because we don't have a real deployment system at work yet. So when we do a git push to the remote server it checks out the files and compiles them and also does image compression. And since we want to make the VM as close to the live server, I included gulp and nodejs.
Why don't you make a new account and buy a new license with that?
That is fair enough. I think you already understand that it's a bad idea. Do you have things like Gulp on your production box? The way we handle it where I work is we compile everything and build a deployment artifact which contains only what is necessary to run the site (i.e. no source files, no dependency files, etc), then we just drop that on the box, extract it to a temporary location, and move it over the existing stuff. Compilation happens on the build server using Docker to allow us to easily ensure the right versions of software is being used. The build process itself that we have tends to be part of the repo, and will work locally, so the same code used to build production ends up being used to also build development locally using Docker.
So, you want a shorthand for $tail = $array; list($head, $next) = array_splice($tail, 0, 2); ? Engine supported array_splice with static offset basically. Not a bad idea, may possibly even feel quite natural...
AWS SDK is a good example of an API wrapper, although it is really huge.
We currently use it as part of our interview process, we were fed up of people applying for roles, coming in and then not being able to complete really basic programming tasks. There is a pre-generated selection of questions on TestDome that the test could consist of, heavily moderated so that if answers to them online are found they're quickly removed from the pool. You can also create your own questions as well (which is what we've done), we have several questions where you need to code, a couple of multiple choice questions etc.. so they could literally be anything. Each question has a time limit set on it, and after each question is submitted you can take a break before continuing. You can validate your current code against tests in each question so you can see if you have the right answer before you submit it. Good luck :) 
I created this function some time ago: https://github.com/dukeofharen/localstorage.php. It's like JavaScript's local storage, but for PHP. It stores the values either in a MySQL db or on the file system. I don't update it anymore (because it's been some time ago that I've used PHP), but give it a try if you like the idea :)
Great remarks. First I'd like to note the project is based on 'Phalanger' which proven there are practical use cases in these areas. PHP cannot be used on Android, Windows Phone (as an executable) or users don't want to use it on e.g. Windows IoT Core, IIS, Azure, ... Compilation to .NET breaks this barrier and moreover allows the PHP application to be extended with existing .NET libraries. For now, we'll see if enthusiasts come with other use cases and how they handle changing he runtime from PHP to .NET (there will be different configuration and slightly different way of deployment). In addition to increased performance, the main benefit is the continuous compilation from PHP to MSIL; you can keep maintaining PHP code while interoperating with .NET libraries in both ways. You won't drop the PHP source by compiling it; the maintainability keeps the same - no generated code you'd have to look at. The interoperability option allows seamless subsequent migration from PHP to .NET. Keep working on PHP code, subsequently rewriting single functions/classes to C# without compromises. We'll definitely prepare more real-world demos, so please stay tuned. If you'd have any question, I'd be happy to answer.
Technically this *is* reCAPTCHA today. If you are using reCAPTCHA but don't see the checkbox you should update your implementation. 
I love this tool. When our shop finally shifted to git, we started using this tool. We have heavily modified and extended it with additional recipes and tasks, but it works perfect. We even use it to deploy our non-php services. It's simple to extend/improve, and it is also very reliable and easy to debug
Don't get it twisted, friend. They aren't doing you any favors by changing to a subscription model. Jetbrains is doing it because they make more money. Everyone else is doing it, so they are too. Adobe, Microsoft... That being said, I don't mind it as it is usually cheaper. This doesn't seem that much cheaper. I'm pretty sure phpstorm was $100 for a lifetime copy at one point.
breaks wordpress auto updates...too many users will complain and hate me.
Hey, if its someone who checked which fields shall not be filled and customize his bot according to this, you could make the hidden fields dynamic and the goods too. Well know that I write it down, it doesn't seem great for the "good" fields, but you get the idea ? By having different names / ids each time (generated by back-end route, given to twig maybe) the guy won't do shit !! And of corse the hidden inputs will change their placement, boom boom.
Maybe a silly thought but couldn't this be done in an autoloader? If is_writeable() returns true then don't include. I'm guessing that it could be a big performance hit.
The customer portal site is an old version of Drupal.
you should have just bought a new subscription, but I would still complain to the support.
Many people let them be writeable on the staging server, update the staging server, then lock it down when it's pulled into production.
Who does this - aside from WP, which I disable and be like Fuck auto update. Most insecure thing ever written for the CMS (IMO)
Just remove the line and properly configure the folders :D
Thanks!
I quite agree. PHP files should never be writeable by the web server and, other than the default file (index.php), they should not be under the web root assuming you have some sort of front controller rewrite rule. I was just suggesting another way of doing what this post seems to be about. i.e., not being able to include any PHP file that is writeable. That would include both files that had been maliciously created and attempted to be run by some exploit and also those that are accidentally writable because of bad permission settings. If everything is autoloaded class files then it seems like you could do that in your autoloader. I'm just not sure of the performance hit. 
Well, I did... I bought a new subscription for 1 year. But instead of starting it from the date of purchase, they started it from a date 11 months prior. So I only got 1 month out of a 1 year subscription.
&gt;this isn't what I'm currently used to and therefore I do not like it Please stop commenting on new language syntax proposals.
I got my last job by just searching the questions on Google/so
You shouldn't do updates on production anyway...
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I think /u/icosa meant only index.php should be under the web root, not that only it should be writable.
By using [WP-CLI](http://wp-cli.org/), you can update even the plugins and the themes
I thought the "and" in my first sentence was clear enough. I meant that index.php (or whatever your default is) should be the only PHP file under the web root i.e., directly accessible by a browser. Of course you can always use other means to block inappropriate direct access if necessary but it's best for the bulk of your application to not be under the web root at all.
Yes, especially when you run git as a submodule as your plugins are updated in local environments. https://github.com/GunnJerkens/wp-boilerplate
i dont have it twisted, and i didnt say they are doing you a favor. i also said they are doing it for the same reason everyone is doing it. wrong reply? &gt; That being said, I don't mind it as it is usually cheaper. This doesn't seem that much cheaper. I'm pretty sure phpstorm was $100 for a lifetime copy at one point. correct, but phpstorm also used to be a prettier netbeans. the amount of updates and new features its receiving wouldnt be possible for lifetime licenses 
Poor ole jetbrains can't afford a software pricing model that has been in existence for over 30 years. You add new features so you can sell a new version. A monthly subscription model is only worried about users switching off their platform to another competing app. They only have to be better than their competition now. That's why computers get faster every year. TVs add 3d and higher resolutions. This is all about "what they can get away with" charging and has nothing to do with the cost of adding new features.
The flow is when a user submits a contact request, they get added to the site's address book table, then we pass the list of email addresses to a third party email vendor that sends promo emails occasionally. Third party email vendor uses specific IP/domain for each of their clients and spamhaus contacted them about the spam earlier this week related specifically to new spammy email addresses we had been sending to them recently.
Yaml supports arrays, objects, strings, numbers, and bools. That's a good start for type support. If you need robust type validation, that could be done on consuming end. It also supports comments, and other features out of the box. I just wish Yaml support was available everywhere and didn't require installing ext/libs.
Our site doesn't directly mail out. We take the contact requests that have been submitted and send the list over to a third party email vendor (think like MailChimp) and they send promo emails to those new contacts occasionally. The client has their own IP/domain in use with the vendor and vendor was notified earlier this week by spamhaus that they had been blocked because they were sending to spammy addresses we had recently been sending them.
Not a bad idea. I think for now we're just going to recaptcha it and see how that goes.
I was hoping it was something temporary and would resolve itself, but it's been a while now and I'm still having the same issue. I've only ever used their support email address, and they *used* to respond, but then they just stopped one day. It's been months since I've received a response from support.
try-catch around it (and dump the exception). Without that part working, the app isn't even starting the error handling, and that obviously makes everything moot :-)
Thanks for that work, you made a very nice implementation !
There's no comments in JSON for a reason: https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr https://groups.yahoo.com/neo/groups/json/conversations/topics/156
Well my post mortem for porting 3 projects is that everything worked just as it had, with just aproximatly twice the speed ;) 
We have a mixture of easy and hard questions. Easy questions at the start for people to used to the system without stressing and then ramping it up a bit. Hard questions are obviously weighted with more points. The timing feature is ... not straight forward, I imagine different companies do different things. For example, our hard questions have set times of 10, 15, 20minutes etc... but we've configured it so that we allow 50% additional time on top of what the question is set at, but the user doesn't know this. That way we can see users that took more time on certain questions, and if they go over the time limit if we can try to figure out the reasons why, it could be because they found it too hard... or we also thought why constrain someone to 20mintues if they could write an incredible answer in 25minutes, we still wanted to see what people could come up with without time being such an issue. From my own experience with it, and some of the guys that have taken our test, I would **heavily recommend** having a proper IDE at your side whilst you do the test, as the built in one is...functional, but you'll save a lot of time being able to use something better. Copy and paste your answer when you're done, validate it to make sure and then submit if it says you're correct. **Especially** if you're expecting mixed questions, with have ~70% PHP, 20% Javascript, 10% MySQL questions, as the editor just about gets by for PHP, but suuuuuuuuuuucks for Javascript.
;)
No unit tests? Pfft.
This has been corrected. Thanks for the suggestion. :3
Aaah that explains why it doesn't work for me. I already have a function called left_pad which I use for truncating characters from the right of a string.
Looks like your function is less powerful than mine.
Does it have 18 dependencies?
No, I meant you shouldn't do updates *on* production. You shouldn't do automatic updates anywhere. You should first update locally, test. Then push the update(s) to staging, if applicable, and test again.
&gt; Who does this - aside from WP No one who takes more than half a moment to think first. No moments were taken in the creation of WP. 99% of WP exploits would be solved by storing uploads somewhere sane.
This is why we cannot have nice things.
10/10
That's what sold it for me, hilarious 
you should setup CI to automate those tests
Right, but yaml also has anchors, inheritance, and much more than what JSON provides. JSON is literally a data structure, it isn't and shouldn't be used as a configuration format. https://learnxinyminutes.com/docs/yaml/ Just my 2 cents.
The screenshots look nice and I really like the logo. Sorry to say but it looks very similar to a lot of new CMS's that are popping up these days (sorry I don't have any links to examples). I get that we're all continually reinventing the same wheels, and I also get that UI consistency makes it easier for users and what not... but some uniqueness/distinction would be nice, too...
This seems to be an independent implementation, and is clearly not bug-for-bug compatible with the npm library that it's *clearly* ripping off. Come on, put in some *effort* here! ^/s
Well, the only reason it would need to be executable if it's meant to be executed from the command line. When it's going through a web server (Apache or Ngnix), there's no need for it to be executable. **EDIT** spelling correction, forgot a letter.
3:
Okay. Yes, you *should* test updates in dev/staging first before deploying them in production. I'll admit I'm guilty of not always doing this with Wordpress. (With anything composer-based I update dependencies in dev then run the full test suite before deploying the updates to production.)
I wrote something for you! https://jtreminio.com/2012/10/composer-namespaces-in-5-minutes/
Run $ composer dumpautoload and try running your script again.
It's pretty frustrating seeing all the naïve, Anglo-/Eurocentric string manipulation functions/one liners/etc. that get parroted and perpetuated.
I believe this is now fixed.
Everything is wrong and the world is terrible, that's what.
Laracon US has always been fun. I've been to all of them and it gets bigger and better each year!
I was at the international php conference 2 times. I met some great people there, but was disappointed in others. The talks, even the advanced ones where way too basic, felt like talks for beginners. The conference was overpriced as fuck, and they gave everyone a netbook, as if they where using the ticket to sell useless netbooks with it. Some of the talks where even plain advertisement for companies and their services - looking at you, amazon guy. I am going to the Symfony live in cologne in a few weeks, keeping expectations for the talks very low, but i am meeting a lot of great people i have met before there. Its always a good idea to keep in contact with the better developers you have met by grabbing a cold beer and some burgers. :)
Is `function_exists` an expensive call? If so you should probably move it out of the function itself
&gt; it was a very large commit and would take a considerable amount of time to try to narrow down the issue. I'd start here, to be honest. What I'd do is `checkout` the commit before, branch from there, and then apply the following commit as a patch on your local machine. Since that is not yet committed you can commit in pieces and push each bit, checking to see if you have a scan failure. I don't think you can specify a checkout hash in Scrutinizer, so you'll have to do these one at a time. But it should be pretty easy to do, even if it requires a bit of waiting! Also, consider disabling some checks in Scrutinizer: go to the project, then click on the Options tab, then Configuration -&gt; Checks. If there's any ticked here, temporarily untick and rescan. Lastly, please add your repo config file here, from your Configuration screen, formatted using markdown. Perhaps there are things in there you can disable (e.g. `php_pdepend` or `php_analyzer`).
You will never lose that client until they no longer use your software or they go out of business. All I did was give them the number of a php developer I knew. 
&gt; To create a GUI without the need of an extension, PHP executes a binary with proc_open and communicate with it using Stdin/Stdout Pipes, it's a fast and cross platform solution. What drawbacks does this have?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; The talks are OK but most of the information you could just Google Do you have any advice to give about which talks you found most interesting, and not Googly-able? This is something I actually try to think about when giving talks, and always try to focus on the 'why' side of things, rather than the raw 'how'.....as to me that is usually more insightful, as well as be more likely to be information that someone who is interested in the subject couldn't find after 5 minutes of searching. But I'd like to hear any advice about which one's other people found interesting.
&gt; and not Googly-able? The problem is that you don't even know what to google. Talks is an easy way to know something new and then you could discuss some interesting thoughts with others. This is the main benefit no me.
I was at Laracon Amsterdam last year. Lots of different talks, but not very technical. Had a good time. Hoping to go this year, too.
I have no idea if this works, but it might be an avenue. Have a button that says "contact us" or something that then loads the form asynchronously into the page. This way there's no direct link to a page that contains a form. Most spiders won't go through the trouble of figuring out there's some Javascript that adds a form in it and will assume there is no form. I do the same with email addresses on my website, to deter spammers from crawling my site for email addresses. 
New Zealand has been pulled into the main/dev branch as of today! Let me know if you experience any issues or have some feedback
&gt; The talks, even the advanced ones where way too basic, felt like talks for beginners. Yeah.....this is an unfortunate side-effect of people wanting to make talks that everyone walks out of feeling 'happy' - aka the Ted Talk effect. This is the correct way of getting the best ratings for your talks....but leaves non-beginners thinking that conferences aren't good places to learn information. When I give a talk, I try to make sure that every in the room, is 'challenged' at some point in the talk, either by having to think about what was just said, or at least have to process the new information. If I've given a talk, and at the end of it, a significant number of people haven't learned something new, or seen a new way of looking at things I would consider it a failure on my part in giving a talk. And imo, large conferences should be pitching talks for more advanced programmers than beginners. Not that many beginners are going to travel internationally to a conference, and for an advanced programmer to spend $1000 on travel, hotel and a ticket, and to not really learn anything new, is not a good outcome for them. 
As your question made me curious, I attempted to "deploy" a small test application to a friend's PC. It is not that easy, you need at least: * the application's PHP scripts are needed of course * a working PHP runtime on the target computer (~22 MB) * the vendor directory including php-gui and the autoloader (~12 MB) * the lazarus directory (~51 MB) * a small executable e.g. a batch script starting PHP with the initial application script Deploying is quite hard and strongly depending on the platform, the application package is also quite big. Maybe some files can be dropped for smaller package size (e.g. Lazarus Linux executables if you intend to run it on a Windows system), I did not check that yet.
that is a lot of work. Although I really don't know how is it better from like PHP-GTK, PHP-QT, wxPHP I would be interested in using it if at the end we could produce a self-packaged executable (like it is possible apparently with JS or python).
Nice use of laravel, Where the logic though? I looked in the controllers, there are none. Why?
Sounds interesting, like all the other *weird* GUI libraries out there. This will definitely become a thing in the near future, but for now, I thinks it's more like "just for fun". Non-native apps is still heavy, slow and not 100% stable.
Honestly, why do we still consider XML/JSON/YAML/NEON/anything-but-PHP a good format to store configuration? Why don't we just use simple PHP arrays? &lt;?php return [ SomeInterface::class =&gt; function(ContainerInterface $c) { $service = (new SomeClassFactory($c-&gt;get(FactoryDependency::class)) -&gt;create(); if($c-&gt;has(Logger::class)) { $service-&gt;setLogger($c-&gt;get(Logger::class)); } return $service; } ]; I really wouldn't be happy if I had to setup a service like this (and it's still rather simple case) using YAML and would probably spend whole day just researching how to bend the syntax to get exactly what I need. Sure, YAML works fine for most simple use-cases when all you need is just pass a list of classes that you want to have in your container and in that case will save some keystrokes. But add in something more complex and you're probably gonna end up making unnecessary factory (or even FactoryFactory) classes just for the sake of avoiding bending YAML and moving the complex code out. Just look at the article, especially the "standard configuration format" part. It's a horror! Even if it works, it still won't probably cover 100% possible use-cases and it would still require developers to learn new format. Absolutely unnecessary. Can this madness stop, please?
Some DBs, notably [Postgres](http://www.postgresql.org/docs/9.0/static/datatype-uuid.html), have a dedicated UUID type and associated functions. That should provide better storage and performance characteristics, though admittedly I've not benchmarked them. 
[Php training in ranchi, india. Best place to start learning php in ranchi](https://convertintowordpress.com/php-training-in-ranchi/) 
Got it. Wasn't aware of that!
Namecheap and dream host for sure.
I'm absolutely not against it; I'm just searching for reasons for being pro it if that makes sense. Early days yet, so I'll stay tuned and keep eyes and ears open
It follows java GUI programming style (with the default toolkit), not a fan.
Ditto this. PHPNW is one of my favorite events and worth paying out of pocket for a flight from California to go to. The actual ticket price is a pittance compared to the corporate driven confs out there.
The IPC communication is slower than calling a system APIs directly, I'm focused on optimizing this. Another drawback is the number of process, you have two (PHP and GUI) processes. A good thing is that you can run something in PHP without blocking the GUI.
&gt; - the lazarus directory (~51 MB) You can remove about 32MB of the lazarus directory, it's filled with compilation artifacts. More if you target a single platform. It's possible to statically compile a PHP executable for deployment, it will still be close to 20MB but at least it's packagable.
I've been waiting for this for a long time! Many kudos to the author!
Actually, I beg to differ. PHP _doesn't_ need a server at all. There are plenty of command-line applications written in PHP that operate just fine without one. Same with php-gui. _Edit:_ Maybe I should clarify -- php-gui doesn't use web technologies at all from my examination. It talks to the operating system to create native windows, widgets, and controls. Comparing it to "typical web based applications" is comparing apples to oranges. They are fundamentally different problem spaces.
&gt; Publishes PHP article in 2016 &gt; Uses ext/mysql
That's awesome! Thanks
Nowadays Memcache is pretty much useless, use Redis instead and its 10x better. 
I guess I would have to actually see some real life examples of these "PHP Guis" in order to truly evalute the usefulness of a language designed for creating web sites and web based application being used to create desktop apps.
If I'm not mistaken here is how you will do; you will serve only Greenwich (UTC/GMT, in Unix-epoch format) to all users but the JavaScript will take care, because the JavaScript will know user's local time zone. You can use Moment http://momentjs.com Edit: I remember that big sites print out the Unix-epoch time to HTML and then tha JavaScript takes care the local time which is presented in the browser.
I like that it is packaged out. I'm working on a Laravel project now and it sucks when i need to implement something that already exists but not in packaged form.
 I'd run everything in UTC and print UTC out in HTML... But use JavaScript to progressively-enhance it based on the browser's known time-settings. (Sending emails would obviously be an exception.) Note that you'll need to be extra careful about *future* times, because DST schedules can change.