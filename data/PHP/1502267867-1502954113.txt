How is this achieved in an environment that has multiple pushes per day? Is it feasible or doe's it only work in a low turn over environment?
Random bit of count() trivia: Usually this function is O(1), because arrays store how many elements they contain. However, there is one exception to this: If you do `count($GLOBALS)` the operation is O(n), because PHP has to scan through the whole array to check for [indirectly deleted elements](http://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html#indirect-zvals). Now you know.
We have multiple pushes a day, but only when the developer is calling a "pull request", which is in our case a notification to at least 2 other developers that the code is finished (except for the comments of our strict jury) At the intake of a user story, we even decide if it's worth looking with more than 4 eyes at the provisional end-result.
For small project I use Laravel Envoy. 
Do yourself a favor, and avoid laravel because it introduces many bad practices. Learn symfony or zf2/3.
I've used Deploybot in the past for single-server deployment, i know they support multiple server/environments as well although I have not used it myself.
I host my laravel apps on Cloudways, they provide Easy Git Deployment, So I just push my project to Git and in one click it gets deployed. For automatic deployment, I have integrated Envoyer with it. Envoyer is love. 
Related: https://github.com/composer/composer/issues/2609
How would you change it and how would that be an improvement?
&gt; There are many better ways to model the absence of a value. Like... ? &gt; I doubt this cumbersome fad will last. There's certainly a fad aspect to it, which is why we saw Java Optional spread much beyond its scope (which is streams), and we see it crop up in PHP, where it absolutely doesn't belong. But the fad just makes for bad implementations of Optional gain more traction than they deserve, it doesn't invalidate the concept. And case in point, Swift's optionals are **perfectly** implemented. Well integrated into the language core, the syntax is there to make it easy on the eyes and minds, and the language transparently wraps/unwraps optionals, which feels almost as if you're working with classic null, but this time with perfect type-safety and for all kinds of values. &gt; Nil and null are not different. I'm afraid you seem ignorant on the topic of what "null" is to the industry, and how it works under the hood. Maybe Swift's null doesn't *seem* much different when you compare it to null as implement in JavaScript or PHP, because in both cases they result in an apparent union between &lt;some value&gt; and &lt;nothing&gt; (well PHP's ZVALs are a union of all possible value types already). But you seem to miss the part where languages like C, C++, Java, Objective-C, Swift are lower level, statically compiled, and have no analog to ZVALs. And they have originated the "null" concept, and it's vastly different than Swift's nil. In such languages you can't have a non-objects and stack-allocated objects that can be set to null, because there's no *pointer to set*. This is why if Swift's nil was the same as Objective-C's null, you'd only be able to set heap-allocated objects to null. But as you yourself demonstrated, you can go make an optional stack-allocated string and set it to nil. That's the power of Optional - it gives you the expressibility of a script engine, but the type safety and performance of a systems' programming language. And that part, my friend, isn't a "fad" that won't last. In fact, Swift is so efficient in implementing optionals, it literally takes no extra space to store their (1 bit) state in most cases. It's a perfect abstraction. Anyway, I have nothing against PHP's null, especially since PHP made the right choice to not make objects nullable by default (like Java does, and like the C family of languages had no choice but to do, as it's not strongly typed, and pointers can't be encapsulated safely). But you need to understand that outside our little script bubble here, the term "null" has a very different industry-wide meaning to it than what scripts do, and what Swift Optional does... 
So I suppose you don't want to see the link to the site that teaches you how to spell php?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
What's wrong with that boost? Helpful website 
Yep, I know. :)
I see you're new to reddit. Welcome, friend.
If you're doing it a million times it will still be insignificant. It's the thing you're doing *inside* the loop that will take time.
Capistrano is trash because it's built on the assumption that you deploy straight out of Git, which is wrong because Git is a version control system, not a build system, and has no support for any other methodology so you cannot deploy real build artefacts.
&gt; given how badly it went for them Why what happened? 
It can be an important metric when comparing your micro vs. macro coding.
On my system, the difference for a one million item array is 700ms. No one is saying you have to do this, and with arrays even a few hundred items long, it would be premature optimization. But the cost of counting the array every iteration is real.
Thanks! Currently writing out the second post which will be longer. It was always ment to be a two parter with this one as a brief set up.
All you talk about in /r/PHP is how much you hate Symfony, god damn. 
No, it's really not built on that assumption at all, it's just a tool that allows you to run tasks on multiple deploy servers and group those servers by roles. What you put in those tasks is entirely up to you, I use it to do builds, run tests, build docker images and on success trigger reloads of containers.
There's definitely a LOT built into the IntelliJ IDEs. After over 2 years of using them I'm still working new key mappings into my work flow, finding new plugins that help my every day work, and digging up features that I didn't know existed. 
 $foo = $bar; if ($foo == "something") (or "something" == $foo if that's preferred) which is entirely for readability/maintainability
I understand it fine. I just think it lacks elegance. Its crufty and unpolished. And a fad. I like Smalltalk's solution. First, struct is an idea borrowed from C++ to get what we call "value objects". C++ made the mistake of allowing either structs or classes to be heap allocated. In practice that was not the best idea. So Swift kind of fixes that but it keeps the pointless conceptual overhead of having both structs and objects. Swift really wants value objects, but kludges it with struct. Structs have no identity, they are copied when assigned. Otherwise, they kind of act like objects. Mostly. Except no inheritance because object slicing in C++ was kind of a bitch. Which seems like a lame restriction. In Smalltalk everything is an object. Done. Not all objects are necessarily heap allocated. Some classes implement [value objects](http://dl.acm.org/citation.cfm?doid=1735935.1735957) and some implement objects with identity. But they can all do inheritance because the runtime is smart enough to handle it and they are all still objects. In Smalltalk there is no 'null' either. There is nil. nil is a global that references a single object of the class UndefinedObject. All variables not otherwise initialized are initialized to nil. nil's implementation is exposed (of course - its all exposed) and the primary method it provides, #doesNotUnderstand: can be modified to suit your situation. In development generally it halts the program and throws up a walkback (debugger). In production, you could have it log errors and then unwind to a base state to try again. Or you can just have it return itself like what Objective C does. The point is, you decide what messaging nil is and what protocols it might adopt and how it should handle them if you want to do something special. Because nil is an object. That's simple. As to your pedantic nil vs null screed. They really mean the same thing - absence of a value. You've mixed up their usual implementations with their concept. But they're absence of a value. Whether that means - initializing a pointer to zero or some other implementation - it still means absence of a value. 
I **love** some of those designs. But it looks like I've found them near the end of the teespring campaign and I'm a cheap ass who needs time to convince myself to buy stuff. Hopefully some of these will come back in a relaunch campaign or w/e teespring calls it.
Making worse PHP documentation with the power of PHP!
Things that interest people are what get attention. A lot of well-made stuff just doesn't catch that many people's eye, alas.
If you think value objects in Swift are a mistake, I'm afraid you've more to learn (and structs, arrays, tuples, enums, scalars = value objects, that's precisely what they are). Anyway, this is at this point very OT. I'd say keep reading and practicing Swift, and maybe you'll get the point behind its design one day. &gt; As to your pedantic nil vs null screed. They really mean the same thing - absence of a value. They mean, but they work differently and they behave differently (if you look close enough). &gt; You've mixed up their usual implementations with their concept. You don't program "by concept". You program using the implementation as-is in the language.
They relaunch constantly, so take your time )
This looks really awesome as it can be a real struggle at times to keep up with everything. I found it really hard to read your website though, the design is too distracting with those animations.
I suspected they did. I figured the timer was more of a pressure mechanism than a 'this is going away forever' timer.
You condescension is matched only by your lack of reading comprehension. I don't think value objects are a mistake, I think structs limitations are pointless and the whole thing could be unified into objects rather than having a half dozen constructs all kind of alike but not exactly with weird little quirks. As it has been put "a crescendo of special cases" with no clear unifying idea behind its design. You really ought to learn Smalltalk and its implementation. Its what Swift wants to grow up to be after another dozen rounds of design refinement.
[removed]
Now support laravel natively. There is no excuse for improper resolution within the most popular PHP framework for years.
No SSL.
Docker Swarm. Rolling updates.
&gt; I don't think value objects are a mistake, I think structs limitations are pointless and the whole thing could be unified into objects Objects are passed by reference, values are passed by copy (or copy-on-write references). So they can't be unified, and value objects do have unique constraints born out of their need to be passed by copy. &gt; You condescension is matched only by your lack of reading comprehension. I'd probably pay attention to such remarks, if you didn't display complete lack of understanding about what you're ranting about. &gt; You really ought to learn Smalltalk and its implementation. Its what Swift wants to grow up to be after another dozen rounds of design refinement. You're more than welcome to write in Smalltalk. After all, it has proven itself as the ultimate language, by creating and supporting a huge ecosystem of high-quality software and hardware platforms. Just kidding. Wait, let me wash that bad taste out of my mouth... *Sorry, Alan Kay, for speaking against SmallTalk, I highly respect the pioneering work done with it, and for inspiring Java, Objective-C and Swift, but that kid really has no clue what they're talking about.* Ah, better...
Did anyone who went to this conference find it worthwhile? I'm trying to get my boss to pay for a conference and don't want to waste time/money.
Hi! Blog post author here. I use vim, and I often write assignments inside conditions, so I actually have no linter setup for this.
Hey! I wrote that blog post and I'm actually in the same situation as you, but didn't want to be featured in /r/humblebrag or /r/iamverysmart But yeah, if you do the mistake, you learn pretty quickly actually. Changing how you write **all** your if statements just for that is a bit excessive.
Thanks for calling me inexperienced. I have never considered writing code like this. When would you ever need that?
I'm seeing a difference of 290ms. Whatever you're doing inside the loop a million times is going to make 290ms completely meaningless.
Here's an example I threw together that counts the letters used in some text. A decent real-world example. Results: &gt; Counting every iteration: 458.30 ms &gt; Counting once: 149.84 ms &gt; Foreach: 87.14 ms You can see that the overhead for counting every iteration is about 67% of the total. &lt;?php $text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sit, similique voluptas fugiat earum harum molestias sint. Nam, earum, nihil, totam consequuntur optio porro ea sapiente voluptatem corporis alias recusandae nemo. '; $array = str_split(str_repeat($text, 5000)); $start = microtime(true); $tmp = []; for ($i = 0; $i &lt; count($array); $i++) { if (isset($tmp[$array[$i]])) $tmp[$array[$i]]++; else $tmp[$array[$i]] = 1; } $time = microtime(true) - $start; echo "Counting every iteration: " . number_format($time * 1000, 2) . " ms\n"; $start = microtime(true); $tmp = []; $count = count($array); for ($i = 0; $i &lt; $count; $i++) { if (isset($tmp[$array[$i]])) $tmp[$array[$i]]++; else $tmp[$array[$i]] = 1; } $time = microtime(true) - $start; echo "Counting once: " . number_format($time * 1000, 2) . " ms\n"; $start = microtime(true); $tmp = []; foreach ($array as $k) { if (isset($tmp[$k])) $tmp[$k]++; else $tmp[$k] = 1; } $time = microtime(true) - $start; echo "Foreach: " . number_format($time * 1000, 2) . " ms\n"; 
feedbacks are greatly appreciated. 
So you completely agree with me that the cost of counting an array every time is real, and that cost can be offset by assigning the length of the array to a variable, however considering that most people don't work with 1 million item arrays, its a premature optimization?
[removed]
I went to the last one and found it worthwhile. Lots of good sessions (often had a hard time deciding between sessions at certain times) and great people. But making my way to it was pretty easy coming from Wisconsin. Unfortunately my work would never cover the expense so it all came out of my own pocket.
Please keep it civil. If you have an issue with what someone is posting, please send a mod mail.
The way you write if else's should be illegal! As feedback you should define a clear license, the code looks neat.
Hi, thanks for your feedback! We've recently launched the telegram channel with regular updates: https://t.me/frontend_digest hope that would more convenient for you and thanks for your feedback on our website! We do our to improve the UX.
I see a lot of work has gone into this and good job. However I don't like this. It installs everything on your mac. How do you simply get rid of it. You kind of can't easily. The docs don't cover removal. You want to upgrade php. That is another install. You want to use MariaDB instead of MySQL. Off you go again. Memcached? Redis? RabbitMQ? Your mac just becomes a soup of things installed and constantly running. This is why Vagrant and Docker are nice. You have an isolated environment you can build and tear down. You can also reproduce or at least come close to reproducing the target environment. You have clients on different php versions or different databases. No problem. If you find docker and vagrant too much hassle then I assume xampp is still running. It has an installer, it stores stuff in a single place. If you want rid just uninstall and done. 
Yeah sorry, this kind of approach in 2017 isn't something I would recommend.
Stopping/starting is quite easy, "brew services stop mysql" for example, I'll ask the main developer if it's an option to prevent everything automatically start on startup - I don't think it will be a difficult option to add! But please consider reading the following blog post regarding valet+ and why we actually prefer it over Docker, in my eyes, main plus is speed and not having to switch between projects: https://medium.com/@timneutkens/introducing-valet-blazing-fast-php-development-environment-46be91604bb2 (see the "History" part). Thanks for the feedback regarding removal in docs, I'll pass it on! -- edit -- Probably easier for me to copy/paste the part I referred to: "our main backend stack consists of Magento 2, Magento, Symfony, and Wordpress. Now if you’ve ever run a large project with Docker on a Mac you’ll know you have to implement at least NFS using Dinghy to speed things up; In our case this was okay, but not ideal. Combined with docker-compose there were some quirks, including not being able to run multiple projects at the same time, switching projects took time, unexpected inconsistencies in the filesystem, and a few other issues. It was also not very plug-and-play for new people that had never used docker before. With Valet+ I aimed to solve all of these problems and improve my own workflow in the process too."
What would you recommend? While Docker is nice, it wasn't an ideal solution in our scenario, this just, works... :)
Maybe it's because I've defined these terms differently, but I'm having trouble understanding the differences and required separation between your API and backend. It almost sounds like you're doing more of a microservice architecture. Could you clarify some on why your backend is separate, and why it needs to talk to the API it supposedly manages?
I don't see the value here, if you do any of the following below, your way would take more keystrokes and not really add anything. You *could* add a ~~__call()~~ __invoke ^^^thanks ^^^u/carlos_vini method to the object, and get the form at the very bottom, but its still a bit longer than using isset. Let me know if I'm missing something here. if ($x-&gt;isPresent()){ ... } $x-&gt;ifPresent(function(){ ... }); vs if(isset($x)){ ... } my idea: $x(function($y){ ... });
https://i.imgur.com/U7Ghu2s.mp4
X-Post referenced from [/r/laravel](http://np.reddit.com/r/laravel) by /u/sacrednuts [Laravel 5.4 notifications demo (SMS, Slack, email, database)](http://np.reddit.com/r/laravel/comments/6sp1ky/laravel_54_notifications_demo_sms_slack_email/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
&gt;So they can't be unified Sure they can. Smalltalk does it. If you understood it, you'd know how it does it. I linked you a paper describing how it is done. Keep your head in your ass if you like. But it can be done.
Another way you can do this is for ($i = 0, $max = count($arr); $i &lt; $max; $i++) {...}
So does docker
I run 3 independent multi container projects on one Mac all day, no problem and no file inconsistencies with just docker-machine and docker-compose, nfs mounts with no file inconsistencies. In curious what you were seeing, I did have a lot of issues when I was using dinghy. When I dropped that everything worked fine
Really like the idea. Some minor feedback here: You can rename the `httpOrhttps` property to `protocol` and stick to either snake_case or camelCase for your property/variable names, but don't mix and match.
I had to go looking to see what could possibly be so bad. At first glance, I couldn't find any if/else statements. Then I used ctrl-f: if (...) { ... } // blah blah blah here's some stuff to distract you even further than the whitespace after the if block. else I'm a huge antifan of having open braces on a line by themselves, so I've always had my comments about what a block does *inside* the block rather than above it.
The paper you linked describes immutable Value Objects, a concept that's widely spread and used in modern OOP languages. It's also often used in PHP, PSR-7 is a set of immutable Value Objects... so saying "SmallTalk does it" as if it takes *SmallTalk* to model a basic immutable object is... quite hilarious, I don't know if you understand how silly you sound. Immutability for simple values is great and natural. In most languages we use immutable integers, floats, strings and we don't even think about it. But with complex values... not quite... the problem with immutability there is twofold: efficiency and usability. When you have a deep structure of values, changing it in an immutable way quickly turns into a nightmare. Case in point, compare a change to a dictionary tree modeled as PHP arrays (which operate in copy-on-write fashion **exactly** how Swift does BTW) and as immutable Value Objects: // We change the deep value locally, without affecting // any other references to $a and the data within it. $a['b']['c']['d']['e'] = 123; // Now let's do the same with Value Objects (we assume the // objects implement ArrayAccess so I don't unfairly use a // more verbose syntax in the comparison) $d = $a['b']['c']['d']-&gt;with('e', 123); $c = $a['b']['c']-&gt;with('d', $d); $b = $a['b']-&gt;with('c', $c); $a = $a-&gt;with('b', $b); Ouch, that's just painful. But hey, some paper says it's just as good as real value types, right? Let's just ignore what's right before out eyes... And note this doesn't just look verbose, it's easy to mess up if you have to write it by hand every time you need to change an element in a complex value object. And it's much slower, because it *always* copies, even if nothing else has references to $a. While in the case with PHP arrays (and Swift value types), the array is *not copied* if nothing else has a reference to it, it's only copied if something else does have a reference. So if you keep a value local, it's just as efficient to work with it as if it were a mutable object, but with none of the drawbacks of mutable objects. See, my willingness to educate is endless, if I see a glimmer of hope on the other side. But you're increasingly crass and crude, and not showing much of a willingness to learn, so that's my last attempt. See ya in some other thread. 
People sometimes won't accept anything that's less than perfect. If it works for your team and it's good in terms of team training, usability and performance, why not? Of course you might have a hard time uninstalling it or using a different stack, but if it's not a concern for you, then you're actually using the right tool for the job, and that's what people always say here but are unable to put into practice. Good job!
This looks like a nice project. I've been using a setup very close to this for the past 2 years (apache in place of nginx). I just don't have slick wrapper commands for things like chaning php versions etc. With a few decent bash scripts and local cache of needed frameworks, I can create a new site in milliseconds. I've tried all the VM solutions, docker, etc. Nothing really compares to native speed for complex projects (both serving and creating). Plus running dnsmasq locally has DNS performance benefits anyway!
Regarding caching and slamming, I have recentry created php cache system called "no slam cache" with process synchronisation: https://github.com/tztztztz/php-no-slam-cache The whole thing with efficient caching is about to synchronising the php threads/processes that tries to read/write to the cache. This is fresh thing and my 1st project on github, but I have been sychronising access to the resources in PHP for few years now. Smart synchronisation (avoiding deadlock possibility) is very handy on busy websites.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
"Look at all these twirly whirly nails!"
Sweet. I was just starting to miss the days when a developer would proclaim "_well it worked just fine on my machine_". Those times were awesome. 
I've been twice and it was great both times. If you can get it expensed, even better! Not just for talks, but networking is great as well. Take time to seek out folks and talk to speakers, etc. 
We hooked it up to our gitlab so that issues automatically get created when they get sent to bugsnag. Edit: We use individual dev servers so we don't send those to bugsnag. Staging and production only. Bugsnag is helpful for showing us what happened when the exception was thrown. Edit edit: We use clockwork locally. Every request, and everything clockwork reports (queries, view vars, session, etc) is stored locally. There's nothing bugsnag could really do to help us beyond what clockwork does locally.
From the sound of the other comments, you might consider adopting the [PSR-2](http://www.php-fig.org/psr/psr-2/) coding standard. 
 really depends on who you are and what work you do. If you are just working on one app, docker or vagrant are great. If you are jumping between lots (10+) I find valet much quicker. If someone sends through a bug I can instantly test &amp; debug on my machine no commands to run, just quick and easy. (never got into docker but was using vagrant previously) 
After a quick glance, here are a couple of points I see: - Don't hard-code disabling SSL verification; while there are those out there that have invalid cPanel certs, there are those of us who don't. Let users choose to disable SSL verification through the config. - Instead of spoofing a web browser's user-agent, define a custom one for your API. This will allow folks to filter out API calls from real browser traffic. - If your code is using features from PHP 7, then you need to define this in your composer.json as part of the `require` definition. - Same thing for the curl (and any other) extension. - Don't version the `vendor` folder. It's annoying as hell. - Do version the `composer.lock`. - Add a `.gitignore`. - Test the validity of the `Config` in the constructor, not the getters. Or, make the constructor optional and add setters (and test validity there). - Make the `FTP` class a trait. Don't waste the single-inheritance for a few functions. - Make an `FTPInterface` so people can make their own implementation. - Ditch/rename the `hostjams\Cpanel\lib` namespace. - `FTP::add_ftp()` should return the result from the server. - `FTP::list_ftp()` needs to return errors. - Instead of returning `bool | string`, return only `bool`, and add a `FTP::getErrors()`. 
some good feedback you got there @dohpaz42. Not sure about making FTP class a trait though., momently it looks like a few functions but actually it is an uncompleted class. Once completed, the FTP class will have all functions listed in the FTP module as specified in the document at https://documentation.cpanel.net/display/SDK/Guide+to+UAPI which is 19 functions if I am not mistake. Per having add_ftp() returning result from the server, I can have that return the info in another method... maybe last_request or something like that. I feel that returning true on the fact that the user's ftp account was successful created keep the method even simpler and easy.
Why would you not rename this? Personally, I feel like Valet+ is too close to the original. 
&gt; PHP **PC** language LMFAO Also, affiliate marketing? Who aspires to this?
Why add getErrors instead of throwing Exceptions?
It is a fork of Valet, it's meant to be close.
All you did is show me you once again failed to understand my poinT and gone completely off the rails. I'm writing you off as a lost cause. You're never going to "get it"
Because those are not an actual exception. For example, weak password, username too short, username already exist and so on... If the developer were to develops an application those message need to be display to the user. 
That depends. Are you asking or is your inexperience asking?
Claims of readability are purely subjective; were you more used to reading it you would find it readable. However, if this code were in a pull request I would point out you forgot your strict equality; that's not subjective.
* Build straight out of Git. * Run tests on code pulled straight out of Git. * Build docker images based on a Git ref. Everything wholly and completely tied to Git.
An error is something exceptional, you don't usually expect that to happen. As such it should break the control flow and throw an exception (which you should catch and then work with of course).
I planned on adding on method that pay attention to critical error such as bad credential and other errors that should be consider exceptions that could have a major impact on the program flow.
General speaking yes, errors are normally exceptional that should not usual happen. But with cpanel api, there are certain errors that are returned after a query that we want to show to user or developer as i mentioned before, weak password, username already exist and what not so they can correct it. This can be helpful when developing a front-end UI. And again, there will be more checking in order to catch errors that are "Serious" and should not have make their way into production.
Why should these errors not be thrown as exceptions? You make it seem like it's not possible to show the user that their password is too weak, but there is a good reason why we have try/catch...
My inexperience wonders why you are being such a dick. Did I somehow hurt your feelings with that blog post? Or is it just how you usually interact on Reddit? 
How would I go about setting up multiple docker containers behind port 80, locally? 
You don't: you expose only one setup at a time, or use something like ngrok for each `docker-compose.yml` configuration.
A lot of effort in this: good job. Still, this is the wrong direction to follow. In 2017, this is only fit for devs working on a single project: I have ~100 between open-source and closed-source projects, each with their own quirks. Virtualization or other sorts of containment are imperative. See https://www.reddit.com/r/PHP/comments/6optkr/your_best_dev_stack/ for better approaches. 
We work on a lot of different projects with this setup, but with the same stacks, Symfony, Magento 1 and Magento 2 and Wordpress without any problems, I expected the same but actually have a lot less headaches
What about it?
Did you mean to write improved or improvised?
How would you do that anywhere? You only get at most one port binding per network interface without doing some crazy stuff. Throw it behind a proxy server, if you must. Doing so with nginx takes about 2mb of ram and a similarly trivial amount of CPU. Or just use alternate port bindings, like most things seem to do by default. I have a dozen HTTP services running on my system and each just uses a different high-numbered port. 
It doesn't make sense to send these errors in local environment since you can see them anyway. It is not always possible to easily debug production environment, which is why tools such as bugsnag, sentry, etc exists. 
[One of today's lucky 10,000](https://xkcd.com/1053/)
Indeed, no developer in the world "gets it". You're somehow smarter than everyone. Congratulations.
And all of these run on MacOS servers in production? Because the MAIN reason you want virtualization is that you want to run an _identical_ setup as your production environment.
Are you suggesting I take a leaf from your book on how to conduct myself? That if we could all just be more like you, the World of Reddit would be a better place?
You might also like to read, [Effective code review with two simple rules](http://codelegance.com/effective-code-review-with-two-simple-rules/).
It's got nothing to do with what year it is. Valet (and now Valet+) are perfectly fine for the kind of painless setup many of us have wanted for years. Now I can spin up a dev site just by creating a folder and cloning a repo or a simple `laravel new devsite` in the Valet root folder and BAM! Ok so it doesn't give you parity with your "production environment"... but we were doing it for years that way without any major issues. I was even on Windows (not now), deploying to Linux without VMs, Vagrant or Docker without any major issues for years. It's all just choice. Choice isn't bad and no one is saying you HAVE to use this or that Docker is terrible. It just might be a better fit in some situations.
Every PR is reviewed by at least two other developers and sent back to the author until it reaches a quality acceptable to the author's peers. Therefore it is the development team's responsibility to define the quality standard.
These are good additions IMO, maybe as a similarly-named fork with the same command structure it will be easier to adopt and potentially in the future to roll back into Valet itself
Git repo still looks active https://github.com/amphp/amp
An Ajax request takes a "success" parameter where you define a function that is called when the request succeeds. You can use this function to, for instance, make jQuery changes to the current page, or to navigate to a new page, or whatever you want. Similarly, it also has an "error" parameter, where you can define a function that... well, you get the idea.
You’d use something like https://github.com/codekitchen/dinghy-http-proxy we use this at work, it will expose *.docker domains based on the virtual host specified in the docker compose file
Oh wow. This is all sorts of cool! 😁
&gt; In 2017, this is only fit for devs working on a single project This is the kind of sweeping, absolutist statement that leads junior devs down a path of ever increasing complexity with little tangible gain. There is absolutely nothing inherently wrong with this simple approach, in most cases it's going to work fine, even in a professional environment with a relatively large number of projects. Most projects the majority of developers in the PHP community are working on will happily run with a fairly recent version of PHP, a fairly recent version of Postgres/MariaDB and maybe a key value store of some kind. Sure, there are going to be situations when you need a very specific set up, and for a sizeable minority of developers it's absolutely necessary to have every project sandboxed for local development, and of course developers at any level should have experience using virtualisation and other containment strategies, but that doesn't mean this is "only fit" for developers working on a single project. That's a frankly ludicrous statement. Developers should certainly have a staging/testing system that exactly mirrors production and we should be educating people about the potential pitfalls of a set up like this, but just dismissing it outright because it wouldn't work for you is silly. For what it's worth, I exclusively use virtual machines and a couple of Docker containers from projects that already used them heavily when we were brought on board; one primary VM for the majority of projects that just need a standard PHP/Postgres/MariaDB/Redis *et al.* which matches our standard production server configuration, and then individual VMs for projects with more complex dependencies and those were I prefer to have my local development perfectly mirror staging and production because of their inherent complexity. But I would have little problem using a set up like Valet or Valet+ for straightforward projects that occupy the majority of what PHP is used for by both amateurs and professionals alike. 
It sounds like you want some kind of queue. There are quite a few implementations like [RabbitMQ](https://www.rabbitmq.com/), [Beanstalkd] (https://github.com/kr/beanstalkd), [Amazon SQS](https://aws.amazon.com/sqs/), and [Redis](https://redis.io/) to name a few. Personally, I've only used RabbitMQ so it may be worth you going through them yourself to see which suits your needs. The general idea is you queue a job/message which is picked up by a consumer (depending on your queue flavour there may be a few more steps e.g. exchanges, producers, etc). The consumer is where you would your background processing. To update your UI you'll probably want to set up something like a [Socket.io](https://socket.io/) server. Once you have that server setup you can then publish messages from your queued job once it is being consumed and then on your frontend you can setup a listener to the socket.io server and update the UI accordingly.
If you need a *simple* setup, `brew install php7.1 php-xdebug` (can't remember the names, since I'm on linux since a while now), then `php -S localhost:8080` [TADA](https://www.youtube.com/watch?v=bjxf-eQWKoo)
No, it's not. And the domain is not expired, it's the reseller doing some fuckery.
Domain resellers and squatters, man. You can have asyncphp.com if I can get a link to the book on there... :)
&gt; [// The Db module knows how to safely escape placeholder values.](https://owl-lang.org/tutorials/language-tour#lock-strings) This is going to be good... https://github.com/joelesko/owl/blob/master/owl/lib/modules/Db.php#L31-L36 Suuuuuuure where we are going we don't need to disable emulation of prepared statements or set up the connection encoding. &gt; By default, OWL defends against the most common security risks. I am not going to test whether that is the case thank you very much. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [joelesko/owl/.../**Db.php#L31-L36** (master → 7cbee0b)](https://github.com/joelesko/owl/blob/7cbee0be586b9fcd1188ef7b762728bda8fb2a4e/owl/lib/modules/Db.php#L31-L36) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dlf7ghc.)^.
Okay and now provide the instructions for the rest of what Valet and Valet+ do. Note that the Valet docs include literally the same step that you just posted, you manually install PHP yourself with `brew` and it lets you neatly serve multiple hosts with their own domain name, rather than using multiple ports on `localhost` if you need to serve projects side-by-side, which would be a fairly common requirement even with a simple set up. I think I made it fairly clear I'm in no way arguing against using virtualisation or containment and that I have no use for Valet myself, but that it's not the absolute requirement that you make it out to be.
My suggestion would be question why it takes 10 seconds, is this something that you must do on login? Is there not a way of running a scheduled job to prefetch the information and store it. Not sure if that helps?
There is a reason it's open since 2014 it's not really solvable and imho I prefer the current way it works in projects, for global cli tools phive seems to work good enough.
If you need anything more complex than just the PHP runtime, then you will need means to: * reproduce deployment * reproduce migration execution * simulate communication failures across services. Yes, the RDBMS is a service in the stack, even if local. * reproduce environment for newcomers in the team &gt; it lets you neatly serve multiple hosts with their own domain name Stop the server and start it on the other project when switching: not everything should be running at all times, and I also even had problems in the past (one project leaking requests into another by accident) I do use `php -S` for my simplest projects, and it works great. `php -S` is even much better than any sort of vhost-based solution that comes with an already prepared "ready-to-make-me-debug" stack :-P 99% of projects that require a simple setup as the one described above are better off with these two commands, which are equivalent and don't pollute the environment: php -S localhost:8080 -t public &amp; docker run --rm --tmpfs /var/lib/mysql:rw -d -p3306:3306 -eMYSQL_ROOT_PASSWORD=root mysql &amp; EDIT: added `tmpfs`, since the OP is about performance
if you use fastcgi you have a function to return to the client while continueing to execute the script http://fi2.php.net/manual/en/function.fastcgi-finish-request.php
wow bandwidth limit exceeded... crazy stuff.
&gt; Not sure about making FTP class a trait though., momently it looks like a few functions but actually it is an uncompleted class. Fair point. Looking at the documentation, there are 51 modules to the UAPI. Even if you're not planning on implementing them all, you should reconsider your inheritance architecture to accommodate so many code paths. Right now, your `FTP` class is using an `is_a` relationship to the `API` class. You might at least consider converting the modules to be a `has_a` relationship. The difference is that instead of `FTP` inheriting from `API`, it instead holds a reference to `API` and uses `API`'s public API to make its calls. &gt; I feel that returning true on the fact that the user's ftp account was successful created keep the method even simpler and easy. I am personally not a fan of returning a [disjoint of types](https://en.wikipedia.org/wiki/Disjoint_union) from functions/methods. I feel it adds too much cognitive overhead an API. Instead, given the circumstances, if the cPanel server returns an error, you could throw an exception on failure and use the meta data as the context for the exception. Then, instead of returning `true`, you simply return `$this`, and now your API is chainable; e.g., try { $ftp = new FTP(...); $list = $ftp -&gt;add_ftp(...) -&gt;add_ftp(...) -&gt;list_ftp(); } catch (...) { // ... } But that goes more to taste and style. 
**Disjoint union** In set theory, the disjoint union (or discriminated union) of a family of sets is a modified union operation that indexes the elements according to which set they originated in. Or slightly different from this, the disjoint union of a family of subsets is the usual union of the subsets which are pairwise disjoint – disjoint sets means they have no element in common. Note that these two concepts are different but strongly related. Moreover, it seems that they are essentially identical to each other in category theory. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
pretty sure WP can oembed Gists (and other formats), so there's not much excuse for not simply pasting in a link that can be updated.
In the context I was referring to, it was a matter of keeping the author's API consistent with the other methods.
Exceptions should be used if and when a situation happens at runtime that the program cannot otherwise recover from in a more graceful manner. When dealing with an outside source (database, API, filesystem, etc), I would say that anytime an error occurs, it 99% of the time would be worthy of an exception; e.g., bad credentials? Exception -- your code cannot reasonably correct for that. The idea is that an API should have a well-defined expectation that when you call it, you will get something specific back -- for example, `FTP::add_ftp()` would either return `true`/`false`, or `$this`, when successful (in this context, successful means error free). Anything else should be treated as extraordinary, and an exception should be raised. But, that does not mean that everything should throw an exception. If you call `FTP::delete_ftp()` on a previously-deleted or non-existent FTP account, do you really care that it fails? The point was to get rid of the FTP account, and the account doesn't exist. Return true and carry on.
CRON card looks boss.
As opposed to MAMP for Windows.
It's a solid bit of advice. The problem with it is mostly that projects that people use, violate "ideal situation" rules, leading to bad outcomes. 
Answering your own question, mate.
Is Reusbale related to Christian Bale?
IM pretty sure, everyone here knows how to do `brew install php70-mongodb`
You make the assumption everyone is on a Mac. This might work "okay" if you're a single developer and never have to work in a team and are fully dedicated to Mac only. Not having repeatable environments across all developers and your production server seems a very poor idea in 2017 and no technical reason to do it.
Yeh, because that's the only step I took...
They have that too ;) https://www.mamp.info/en/downloads/
Calling an object like this will actually tigger __invoke, not __call: http://php.net/manual/en/language.oop5.magic.php#object.invoke IMSO (In My Shitty Opinion) having to check if it's null defeats the whole purpose of the library. Depending on the situation using a NullObject would be a better idea. ;)
Because it stresses out a lot of people to be judged at the workplace who they are literally FUCKING with and this deeply affects the SOCIAL lives to such an extent that they feel denied to be treated fairly (as in JUSTICE) and some of them decided to fight back (mostly through open dissent when one some fancy biological essentialism is spread) instead of going with the status quo. Status quo being people starting to be offended by a colorful toy elephant in a way that involves swear words like FUCKING. I suggest you grow up. 
I don't see why. I'm not saying you're wrong, but I don't understand the point of the object. Can you help me understand?
I love for unit-tests (there is something wrong with prefixing the word test to each method), somehow not in placing a docblock with @test is fine, but I'm unsure when it's routing (perhaps if it were able to be turned off after generating production it'd be fine).
&gt; a fairly recent version of PHP, So PHP 7.0 or PHP 7.1. Ok, so how do I know which one the production server is in? Can I use nullable type returns on not? If I'm working on some legacy code, do I know if I can use the new array syntax or not? &gt; fairly recent version of Postgres/MariaDB Is it Postgres 9.4 or 9.5? Can I update my jsonb fields by key on not? &gt; maybe a key value store of some kind Is it Redis 2 or Redis 3? Am I able to run mass insert commands on all my sorted set data? &gt; but just dismissing it outright because it wouldn't work for you is silly. It's not just because it doesn't work for me, it's because it's a best practice. Why do we criticize people that use a giant master class file or accessing post/get/request with globals, or having business logic and html all in one file? Why are we dismissing that and calling it bad? It works for them, "dismissing it outright because it wouldn't work for you is silly."
&gt; "well it worked just fine on my machine". Those times were awesome. How was that awesome? It's fun when you cost the client money because the code you wrote doesn't work with production? Why write tests too, the input that you tried worked!
&gt;growing up is accepting SJW views hmmm.. no thank you :)
http://imgur.com/a/jwLcr
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/K2FcpCl.jpg ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dlfd7x8) 
I thought that was called WAMP.
there's nothing subjective about it. putting complex statements like that in conditionals causes any person to have to think about it for more than what is basically zero time. If I just see an assignment followed by if(var == "thing") then I know exactly what it does and I can move on. If you combine them then it's not something everyone is going to understand immediately and you've saved pretty much nothing except for a semicolon and a newline. also using == is just me being lazy on reddit, but fair enough
You seem to have missed my point. If you have those concerns you should of course be using some form of containerisation, that seems obvious? The fact is that a considerable number of workflows don't have those concerns, for all manner of reasons, but the additional complexity of containerisation also has it's own issues. I was specifically suggesting that we should be educating people on the pitfalls of things like this so that they can decide what approach is better for them, rather than taking an absolutist view. The same problems are technically present in the way I use a virtual machine to develop multiple straightforward projects, but because I know the versions installed on the virtual machine are the same as what are used on our standard production configuration it reduces the complexity of managing many virtual machines when I need to quickly switch between projects. It is just as possible to install those versions locally if I so desired and have no more, or less, worries. Projects that have non-standard requirements, legacy code, and complex systems get their own virtual machine. These solutions are not mutually exclusive, developers I know who use Valet use VMs or Docker for much of their development work, but having a very simple, straightforward tool like it can be really useful for quickly spinning up test projects or prototyping. Code communities so often trend towards absolutism rather than pragmatism.
We use Sentry to capture all errors and exceptions. I'd rather be using Rollbar, but it was too expensive.
&gt;If you need anything more complex than just the PHP runtime, then you will need means to: &gt; * reproduce deployment &gt; * reproduce migration execution &gt; * simulate communication failures across services. Yes, the RDBMS is a service in the stack, even if local. &gt; * reproduce environment for newcomers in the team Sure, in many circumstances you will need that, but not all. I don't know anyone personally who uses Valet or similar tools professionally who isn't also using some form of containerisation regularly. The point is they're not exclusive tools, Valet seems to be great for them for spinning up quick test projects or prototypes and for some people it's good enough for their professional workflow, especially when they're always working with the same framework and the same configuration on staging and production environments as they are locally. Some people prefer the convenience of having vhosts and project set up taken care of in a single command so they can quickly spin up projects and test things and that should be okay.
we'll never know it's secrets :(
This reminds me of the clean architecture talks from Uncle Bob. I can't wait for his new book!
To aid mobile users, I'll link small subreddits not yet linked in the comments /r/Drupal: The place for news, articles and discussion regarding Drupal, one of the top open source (GPL) CMS platforms powering millions of websites and applications, built, used, and supported by a diverse community of people worldwide. More Info: [Drupal.org](http://drupal.org) --- ^I ^am ^a ^bot ^| [^Mail ^BotOwner](http://reddit.com/message/compose/?to=DarkMio&amp;subject=SmallSubBot%20Report) ^| ^To ^aid ^mobile ^users, ^I'll ^link ^small ^subreddits ^not ^yet ^linked ^in ^the ^comments ^| ^[Code](https://github.com/DarkMio/Massdrop-Reddit-Bot) ^| [^Ban](https://www.reddit.com/message/compose/?to=SmallSubBot&amp;subject=SmallSubBot%20Report&amp;message=ban%20/r/Subreddit) ^- [^Help](https://www.reddit.com/r/MassdropBot/wiki/index#wiki_banning_a_bot)
I use DuckDuckGo.
The first M stands for "My"... for some reason. Not because of MySQL, that's the second M.
[Yep, it's a basic coding standard](http://i0.kym-cdn.com/photos/images/facebook/000/816/782/cce.jpg)
What are the use cases for this? Seems to be an unnecessary layer of abstraction over the very things I use every day?
Coinpayments API should be the API you are looking for. https://www.coinpayments.net/apidoc
This has nothing to do with PHP
This is the wrong place for this type of content.
If PHP is a testament to anything, it's that people will re-use things regardless of testing or "clean" (which can sometimes be a little OCD)
It's probably a calculation overhead O(n) vs length property update on set O(1) from reading comments here. I suppose there might be hybrid approaches like setting paging tables, so you can move concurrently through separate pages which you either count or know how full they are, but IDK, I'm pretty sure it's all been written elsewhere. At some point the internet will have to start dealing with it huge graph duplication of effort problem, but it's not a problem people are capable of solving individually so there will need to be new tools.
I really like this way of doing it. I could also assign a variable inside of that if im assuming? if ($imageSrc = $my_variable['Image']['src'] ?? null)
You can do it in php , just send it to the background: $output = shell_exec('php file.php 2&gt;&amp;1 &amp;'); //continue doing whatever. You do have to create a different php script that does what you need it to do. 
based on the feedback of everyone regarding the errors that is returned from the cpanel server, I will make a exceptions for them..... the ones I can then the rest throw it in a generic exception since I doubt I will be able to cover all possible errors it may throw.
If there is no reason why this is holding the user up when logging in, then i'd look at sticking it in as a register-shutdown-function - http://php.net/manual/en/function.register-shutdown-function.php You can send your response back to the user, then have this called afterwards.
looked for this before, anything more than `@return type[]` wont work in common IDEs unless it has changed since I last looked
Hm, looking at your code what you did is not a BitSet implementation of the Set ADT but a php array (which itself is a hash-table) based implementation. It's helpful to realise that Set is the abstract data type (ADT) we want to implement, ie. your interface should be called Set not BitSet. An ADT, like Set, can have many concrete implementations. One of these is the BitSet data structure, where you generally use 32 or 64-bit (depending on the computer architecture) word values to represent sets in a very compact manner. Regarding the constants they are just shorthands for individual bit values up to and including the maximum place-value for a 64-bit signed integer.
I like to use docker and docker-compose. It makes sharing projects a breeze, allows for dev/test/prod parity and provides the flexibility to easily wire up separate (and mockable) services. These kinds of tools, like WAMP/XAMP, feel like a step down for me. 
In most cases where I used an API, I had a centralised Database that was managed, with requests coming in through the API. I know that a clean API would be a shut-off system that only takes input through the API, but when it comes to "admin-only"-functionality that I wouldn't want to throw on an API unless necessary, I'd rather have those done internally. (deletion, giving admin rights, etc.)
I very much doubt whether the author genuinely understands the topics he writes about. It's a lot of misuse of jargon, mixing fundamentally different methodologies and principles to produce a piece of horror. This community would be a lot better if people stopped writing about things they only heard about this morning. 
Here are some of the advantages I can think of off the top of my head (I need to write them down, this is the most asked question.). Some may or may not apply depending on your skill level and frameworks on your system. **Database** * Abstraction layer that keeps your code independent of a specific database. * Tables can be partitioned by column(s), each column can be stored on separate hardware. * Code is always sanitized, no chance for “bad” data to make it into a query - Prevent SQL Injection * Computed columns - This is available in some database, so it’s a minor advantage * Tables can have a row timeout that deletes rows after n minutes from their last update. - No more crons to delete old sessions * Tables can be put into read-only mode or locked (no read/write) * Session tokens can be locked to specific column values in a table. - Example: A session token with the notifications table user_id = 1 would only allow operations to be performed on records where user_id = 1 even if the condition was not provided when making the api call. * Automated backups on the hour, day, week, month, quarter, and/or year - determined by settings on the application level. **Image / File Storage** * Abstraction layer that keeps your web-server from storing a growing number of files * Image thumbnail generation * Reduce bandwidth needs from your own server by using nuQuery as a CDN. * File and Image Versioning * Session tokens can be rooted into a specific directory. * File structure is virtual so scaling is no issue, just add more space as you need it. 
Negative feedback is ok. But it does not help to say the post is wrong, but to keep a secret about the wrong things. Could you please clarify which parts are wrong in the post? 
Quicker maybe, but far less flexible. If your toolchain changes at all between apps (maybe somebody insists on apache, or postgres instead of mysql) you're kind of screwed. 
To give one example, the author is talking about Clean Architecture (aka. Onion Architecture, Hexagonal Architecture, etc.) in conjunction with Three-tier Architecture, even though they fundamentally different architectural models. For instance, the Three-tier Architecture model lacks a distinction between application logic and domain logic, while this distinction is a crucial part of the Clean Architecture model.
Yeah but personally I was very confused, especially since you can see commits from the original project (e.g. Taylor's commits). I would also say that the name is not ideal.
I always like the idea of domain services, especially since at this very moment I'm working on a small but business-critical application that might very well outgrow its framework in a few years. However, every time I implement any kind of domain service updates an entity, I end up choosing between either an update method with a ton of parameters, or one that accepts a large associative array of field names. The alternative seems to be call setters on the domain entity directly from the controller, which feels like a slippery slope to handling domain logic in the controller as well. Is there a good solution to this? Am I just being too rigid in my separation of application and domain logic?
I would recommend a request model for specific requests.
That's an interesting seperation... Seems similar to how my company functions (which is very java-spring influenced) - controller - handler - business logic - dao (data-access object) - data persistence - model - thin "struct" or db row wrapper - view I think that this seperation makes sense, but in practice, the business logic layer is 90% glue. At my last job we had - controller - model - both data, business logic, and representation (think eloquent models) - view Which was honestly easier to work with but i could see it getting harder to manage. Plus polymorphism was practically out the window since everything was a concrete class. An IBlogPost interface isn't very useful if it's only ever going to be implemented by the BlogPost model class, ever. At least with the current seperation I can swap the dao for a sql implementation, a redis implementation, a memcache implementation. Anyway good post and it seems like the php community (and the larger programming community) is headed this direction 
You run each on a different port 80,81,82, i have a local .env file each project that can set each up with different ports if needed
I have to run our dashboard and our backend server stack simultaneously some times, I easily can run those on different ports, but I don't know, I just like em on the same port ¯\\\_(ツ)_/¯
Thank you! I think this is exactly what I want! I thought about making something like this myself, but then it was another thing to maintain and stuff. 
If you delegate state-altering domain logic to domain services and leave domain object models to be anemic, it is absolutely fine to explicitly call setter methods. Even though having anemic domain object models is an anti-pattern. Domain services should be used to delegate calls on one or more domain objects. Property setting through associative arrays and mappers is an absolute anti-pattern and should be avoided.
I do use a database mapper, but primarily because the entity I'm dealing with is constructed from denormalized data. An HTTP-specific mapper seems like overkill if it can be easily replaced with a controller method with no dependencies.
Yeah it is very useful, we have about 15 different services we spin up locally with docker, it would be impossible to deal with without dinghy 
&gt; If you delegate state-altering domain logic to domain services and leave domain object models to be anemic, it is absolutely fine to explicitly call setter methods. Even though having anemic domain object models is an anti-pattern. Business logic that doesn't require external dependencies lives in the domain model and services are used when said business logic relies on multiple dependencies. For example, changing an entity field that has to be unique among entities (but isn't used as an identifier) requires a call to said entity's repository. &gt; Property setting through associative arrays and mappers is an absolute anti-pattern and should be avoided. I agree. I just dislike feeling like I'm forced to pick that or bloated method signatures.
FWIW, this is a fork of an official project in the Laravel ecosystem but with a handful of additional features: https://github.com/laravel/valet It's MIT so of course anyone is free to do what they want, but the way this whole thing is presented, the maintainers of the fork are taking a *little* too much credit in my opinion. Feels akin to forking Doctrine, calling it Doctrine+, and announcing it as "a brand-new feature-rich data mapper ORM for PHP" :/ 
Out of interest, why did you remove the old posting? For the record: You shut yourself of from free speech. Now go eat a frog. Nicely. 
Something can work on the same port without operating system alerting you that "port is used sukk diks"?
Why the empty interfaces for your repositories, domain models, and domain services?
Let's say you want to get the user's avatar url, so you have this: $userRepository-&gt;getUser()-&gt;getAvatar()-&gt;getUrl(); Let's suppose that $userRepository-&gt;getUser() might return null and getAvatar() can return null as well. The code above would throw Exceptions. So your code becomes: $user = $userRepository-&gt;getUser(); if ($user) { $avatar = $user-&gt;getAvatar(); if ($avatar) { return $avatar-&gt;getUrl(); } } With your suggestion: $x($userRepository-&gt;getUser(), function ($user) { return $x($user-&gt;getAvatar(), function ($avatar) { return $avatar-&gt;getUrl(); }); }); Now with NullObject, getUser() returns a NullObject, and NullObject always return other NullObject's or null: $userRepository-&gt;getUser()-&gt;getAvatar()-&gt;getUrl(); There are libraries that implement this, but you need to consider if it's worth the magic.
Huh really? I thought docker gave an error if you try to start 2 containers on the same out mapped port 
Wouldnt you then need NullObject to implement getAvatar(), as well as any other function you might call on it?
I use them as a type reference for valid type hinting. 
...this is wierd... and pointless.
Anemic domain model, seriously? Domain services which acts as procedures for your data model. No thanks. Give some more real world example. For example you have `Order` and `OrderLine` which holds price and quantity of product. Provide example of how to calculate order total amount. Also you need to apply discount if order was made in december. What I interested in is where you place such logic, in your "domain model" or in "domain service"?
It's not required but it's good for future. Imagine you have empty interface ILogger and then two classes DbLogger and FileLogger which both implements ILogger. In presenter/controller you receive let's say $model variable via __construct() but you don't know what exactly you've received. So you have to test it but it wouldn't be nice to write if($model instanceof DbLogger || $model instanceof FileLogger){} ... It's much clearer and easier to write if($model instanceof ILogger){} ..
Not me specifically, and not everyone. Just you being a bit less of a dick would make Reddit a better place
unfortunately it's only reminds clean architecture. The idea of "Interactors" is to implement whole use case, this is just orchestration logic which shouldn't contain any `if` statements. For example `PostService` is just different name for `PostManager`. This isn't something like `PublishPostUseCase` or something else. You could for example move "PostNotFoundException" to repository, and then you could just use correct repository method without any need in `PostService`. Also - this isn't testable at all.
I know why interfaces exist, but repositories, domain models, and domain services will never be generic enough to usefully share an interface - or at least, if they are similar enough to share a meaningful interface they probably don't belong in the domain layer to begin with.
But what does type hinting gain you in this case? You're never going to suddenly swap one domain repository for another one, or one domain service for another. Why not just type hint the service class directly?
A good point. But in this case the context clearly defined. I suggest to change the type hints for correct instances. 
I agree that PostService hasn't got a clearly defined single responsibility. Could you elaborate further on your issues with it here? Found your comment helpful. Thanks. Also, do you mean services shouldn't contain if statements and should only orchestrate other models? 
I'd make an OrderCalculatorService which takes an Order model. Some people might chime in here and tell me off though.
Well, when it comes to repositories we can decide that some data is better to store it in a NoSQL DB instead of our current SQL DB. So then we just need to implement a new repository and inject it instead of the old one. About the Domain Services, i agree with you that swapping them does not seem like a valid use case. Personally, however, i like to make final all classes that dont have children (the vast majority), which makes them impossible to mock (in most cases). But having an interface allows me to mock the interface instead of the class. Although this might be a bit weird because i am creating something in the src because of the tests, i feel having an interface is not really harmful and it gives me this advantage, so its a nice to have.
And this service will contain something like this? $total = 0; foreach ($order-&gt;getOrderLines() as $line) { $total += $line-&gt;getPrice() * $line-&gt;getQuantity(); } if ($order-&gt;getOrderDate()-&gt;format('m') === 12) { $total = $this-&gt;applyDiscount($total); } If that so, take a look at GRASP patterns, especially on "Information Expert". Then read about Law of Demeter. Also there are specification pattern which could help with discounts. And more, about "primitive obsession". The problem with this approach is that we can't test it. Only using integration tests ([which are scum](https://www.youtube.com/watch?v=VDfX44fZoMc)) we could cover this logic. There are no any separation between operations. 
I think repositories should be able to have a generic enough interface, and we should be able to have different implementations for different data sources. I think that, indeed, repositories and their interfaces dont belong in the Domain layers, the interfaces belong in the application layer and therefore accessible to application services but not to domain services. This is actually the one thing i disagree with Jeofrey Palermo and his Onion Architecture (And if you look at Uncle Bob Clean Architecture, he doesnt even mention the domain services layer). The actual implementation of the repositories are adapters, in the sense of the driven adapters of the Ports &amp; Adapters Architecture, and are outside the Application layer (the application services only care about the interface, not about what concrete implementation they use)
I would put the December discount logic in their own Discount classes that can be applied to the total value. And I don't see why this can't be unit tested? Mock some Order objects and put them through and assert the total price will be what you think.
I used to use something like "clean architecture" with application-level services (not domain, domain services are a bit different thing, this isn't interactors). But I ended up with different approach: - all orchestration logic directly in controllers. Heavily usage of argument providers which allows me to not inject unnecessarily dependencies. It mostly contains only one operation, single call to service or entity method anyway - most of the business logic placed directly in entities, no "setters" allowed (even if I have methods like `rename` for example). - heavily using of value objects. For example instead of using `EmailValidator::validate(string)` I would create instance of `Email` which contains this validation logic for me. Another good example - instead of creating `DnsResolver` just create class `Dns` with method `resolve`. - Some business rules which could be swapped, or could have different strategies, placed in domain-level services. They are not working with entities. Entities could work with services (not injection, double dispatch). For example // instead of if ($entity-&gt;someCondition()) { $entity-&gt;setSomething($service-&gt;calculate($entity-&gt;getSomethingOther()); } // I would use method in my entity: public function updateSomething(SomethingCalculator $calculator) { if (!$this-&gt;someCondition) return; $this-&gt;something = $calculator($this-&gt;somethingOther); } By doing this I could cover all this logic using 2 isolated tests and i have only one public method in nearest to data place. So I will never forget to check `someCondition` before updating state. - Builders for entities to make it's constructors clean. - All unimportant/infrastructure stuff (indexing, aggregation or for example notification) happening on domain events. Domain events are collected from entities and processed only after application successfully saved state (UnitOfWork::commit() or similar).
This is indeed a recurrent question: whats the difference between the domain model and the domain services? The way i see it, a domain model object (entity, value object, ...) has the domain logic that deals with its own data, while a domain service contains the domain logic that coordinates several domain model objects. 
&gt; I would put the December discount logic in their own Discount classes that can be applied to the total value. How this class will get access to data it's needed to determinate whether it's needed to apply discount or not? &gt; And I don't see why this can't be unit tested? Could you provide an example of such test? Would you also mock `OrderLine`?
what you are talking about is middleware. Use slim or any other PSR-7 runner and setup a middleware to log the requests it handles.
I always use interfaces for repositories in the context of a single entity; ProductRepository, OrderRepository, etc. but there's no reason for ProductRepository and OrderRepository to ever share the *same interface*.
Correct. :)
I've been the release manager on 2 "large" projects those 3 last years. One with PHP, 10 devs, 15 servers, 3 envs. All devs in Vagrant. Ansible scripts. Developers were reinstalling the whole vagrant box frequently loosing hours every month doing so. Everything was slower. Now on another project with nodejs, 10 devs as well, 7 servers, 3 envs. Alls devs get nvm, and brew/apt-get or yum postgresql. No other dependencies, do it in node for everything. In prod, we were using AWS to provide general infrastructure like load balancers, CDN, and db from RDS. Well the nodejs project was definitely more confortable for everyone from a dev environment point of view. Faster, leaner, worked every morning, and when broken, easy to fix. No long readme, no specific vagrant to get, no python version or ansible to upgrade on a host machine, no "did you run this command inside your vagrant?" etc; Virtualization on our LAMP projects is only the direct consequence of a very 90s entreprise-ready way of doing things. Hell, the company developing PHP makes money based on the very assumption that managing PHP is tough (Zend Server). Updating PHP is painful, picking the right version per project is painful. Removing pkgs is painful. Installing php extensions via apt is painful. Pecl, PEAR and composer is painful. Don't get me wrong, it was miles away from configuring a C compiling env. or runtime at the time. But now, compare it to nvm+yarn for everything for instance. This project at least tried to redefine a correct API to manage PHP and its dependencies. Maybe not the best, but it tried to address the main issue instead of working around. Now that I don't have to manage 10 vagrant boxes for my developers, I have all the time I want to fuck around on reddit. Just saying. Devs are happy, I'm happy ;) 
I think you mean something like https://requestb.in/ It is open source: https://github.com/Runscope/requestbin
&gt; I think repositories should be able to have a generic enough interface, and we should be able to have different implementations for different data sources. Right, in an e-commerce system, something like `ProductRepository` and `OrderRepository` makes sense to have as an interface because you might right have `DoctrineProductRepository` or `MongoDBProductRepository`, but there's no way that `ProductRepository` and `OrderRepository` should extend or implement the *same* interface. There's no situation in which you'd want them to be interchangeable.
Requestbin would be a good start, it can display http requests. If you want something you can train to respond, you're looking for what's called service virtualization. [Hoverfly](https://hoverfly.io/) is an open source option but I have no experience with it. The are also several commerical options from other vendors like CA.
I'm sure my understanding is imperfect, but I believe the difference between an Domain Entity and a Domain Service, is that an entity has a persistent identifier that can be used to distinguish one instance from another, even if they contain the same data otherwise. It also has a defined lifecycle and multiple states. A domain service, on the other hand, is *usually* stateless, does not have any kind of lifecycle, and operates on other domain objects but not itself.
I have made changes to the src/API.php based on the feedback, still working on creating Exceptions that will be using in the src\lib classes. I implemented the has relationship instead of is a relationship as suggested by dohpaz42. Coding style also updated to PSR-2
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Couldn't you put the application behind a proxy, have the proxy log the requests and blackhole them? But then depending on the app, it might not be usable if it makes tons of calls to external services and doesn't get replies. 
is this what you are looking for? https://mailcatcher.me/
 &gt;However, every time I implement any kind of domain service updates an entity, I end up choosing between either an update method with a ton of parameters, or one that accepts a large associative array of field names. I'm not sure I understand: Can your service call multiple methods on the entity, each of each are named to reflect a certain kind if valid change step? Are there no intermediate valid states the entity can be in? 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Hah! Now i understand what you meant!! I agree of course :)
Yes, we agree :)
 It quite what you're asking for but ngrok kinda does this, including replaying requests. I think you want something that goes the other direction though. 
And again, i agree entirely. My answer was incomplete! :)
Hah, apologies, I didn't realize I was having the same conversation three separate times.
Please use an actual title instead of just the URL next time. (Probably delete &amp; re-submit please)
We use graylog at my work and it works well You could also just look into your apache logs. This is more of a server thing then an application thing
Fiddler let's you setup "when this endpoint is requested run this code that generates a response".
The good slide here by Rafael Dohms Annotations in PHP: They Exist https://www.slideshare.net/rdohms/annotations-in-php-they-exist
This is somewhat like that https://github.com/php-vcr/php-vcr
What may be premature optimization to one may well be considered good coding practice to another. When coding games in JavaScript the delay of counting dozens of arrays during their loops would reduce the frame rate on some machines from 60 to 18fps. The solution is only doing the count once and that practice has followed through to other languages that I write in.
This should have so many more upvotes
Hey Adam, we are currently considering a name change - see ticket here: https://github.com/weprovide/valet-plus/issues/34
The CakePHP elePHPants are for pre-order: https://swag.cakephp.org/products/cakephp-elephpant
I can only guess this is more of an advert for Auth0 than it is a tutorial. Laravel has authentication to services "Facebook, Google, Github, and so on" already built into the framework without the need to use a proprietary, closed source, 3rd party service that aren't free. There is literally no need to do this in Laravel, it's extra work and extra cost for no reason at all. https://github.com/laravel/socialite 
The problem is almost never the language but everything that comes with it, postgres / elasticsearch / memcache / reddis etc. And imho npm has bigger problems then composer yarn get's most things right though.
I'm just glad I can have such a profound impact on your shitty life with so little effort.
The solution sounds to me to just have a seperate folder for each tool that has a vendor folder where the tools dependencies are kept, it will take more space, but that is pretty much the only downside i can think of.
_I'm just glad I can_ _Have such a profound impact_ _On your shitty life._ &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ^- ^qtcom ------------------------------ ^^I'm ^^a ^^bot ^^made ^^by ^^/u/Eight1911. ^^I ^^detect ^^haiku.
Wuah, sorry first time i see this (ok haven't googled for it).. i have nothing todo with auth0, only as a user.
Thank you for answering. Most of the code I write is quite specific and often vendor-locked for features, so I cannot see a need for it myself, but good luck with it nonetheless.
The problem is that it looks at the dependencies in each composer.json that it installs. I guess the only way to solve that in composer is to make a distinction between library and cli tool / phar file. Personally I don't mind 2 tools for 2 different problems.
I don't get it, so the problem is that it will install all the dependencies of a tool, and it *might* be duplicated across tools?
Let's say I want to install phpunit, phpdepend, phpcs etc as global I just want to use the cli tools I don't really care about their dependencies because often they have different requirements and will fail to update / install.
Make sure they can be shipped internationally. https://www.amazon.co.uk/OpenGoodies-Official-elePHPant-pink/dp/B01MRUHSLA/ref=sr_1_1?ie=UTF8&amp;qid=1495792867&amp;sr=8-1&amp;keywords=elephpant&amp;th=1 does not ship outside UK or at least to Baltic States :(
I think the time problem mentioned here, is highly overrated. miliseconds before midnight can't be a problem if... the output of a timebased decision is presented to a user. An average person reads 4 words per second, so even when it is 1 word, it takes time to appear on a display at the user, and then the user has to read it... so at least 250 msecs. Therefore solution 2 is good enough. I know, there will always be cases where it can be improved, but not in this example.
Very nice article. Good thoughts and simple solutions.
What would be the benefit of using this over more established services such as AWS, GCloud or Azure? Also a bit of feedback from your code, you should follow [PSR-4](http://www.php-fig.org/psr/psr-4/) autoloading standard and make your code available through composer/packagist as 99.98% of developers here use these because its easy to manage for develoers and developers, This would need you to follow [semVer](http://semver.org/) for version control. While on the topic of PSR [PSR-1](http://www.php-fig.org/psr/psr-1/), [PSR-2](http://www.php-fig.org/psr/psr-2/) and soon to be [PSR-12](https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md) would be recommended styles to follow.
Plus you're a poet, congrats! 
Planning to design a website by your own or a developer? Choosing a platform for website development may be bothering you. Well, if your website is based on content first design, then opting for a CMS platform is the better choice. There are number of platforms for CMS such as WordPress, Joomla, Drupal etc... you can get more detailed information for each system here !! http://www.webdesigncolumn.com/5-most-popular-content-management-systems/
Map or Visualize? Map -&gt; JMSSerializer
eCommerce Bundle for symfony for customized shops
Couldn't you just use "today" instead of "now" (which is the default and could be omitted anyway)?
For ~~pedanticness~~ *leap second support*: $date = ( new DateTimeImmutable('2017-08-11') )-&gt;setTime(0,0,0)-&gt;modify('+1 day')-&gt;modify( '-1 ' . ($useNanoSeconds ? 'nanoseconds' : 'seconds') );
Exactly what I was thinking so you must be right :) There are a gazillion of these articles and they all seem to start with a domain entity that is functionality equivalent to an array. The article defines domain model as "An object model of the domain that incorporates both behavior and data." but never shows any behavior. They always seem to be anemic which is fine because in a typical PHP web app, the models do tend to be anemic. So show me something with real entity behavior. Then I might pay more attention to the rest of the scaffolding code. 
There are, and this is how I handle things currently, it just feels like doing so makes it easier to leak domain logic into the controller. In an ideal world, I'd prefer something like this: public function update(Request $request, $entityId) { $entity = $this-&gt;entityUpdateService-&gt;updateById( $entityId, $request-&gt;get('entity_field_1'), $request-&gt;get('entity_field_2'), $request-&gt;get('entity_field_3') ); if(!$entity) { //return 404 response } //return success response } But for more complex actions I end up doing something like this: public function update(Request $request, $entityId) { $entity = $this-&gt;repository-&gt;findById($entityId); if(!$entity) { //return 404 response } $this-&gt;entityUpdateService-&gt;updateContactFields( $entity, $request-&gt;get('contact_field_1') /*snip */ $request-&gt;get('contact_field_6') ); $this-&gt;entityUpdateService-&gt;updateCertStatement( $entity, $request-&gt;get('cert_statement_field_1'), /*snip*/ $request-&gt;get('cert_statement_field_5') ); $entity-&gt;setFoo( $request-&gt;get('foo') ); $entity-&gt;setBar( $request-&gt;get('bar') ); $entity-&gt;setBaz( $request-&gt;get('baz') ); if( $request-&gt;hasFile('entity_document') ) { $this-&gt;entityUpdateService-&gt;updateDocuments( $entity, $request-&gt;file('entity_document') ); } $this-&gt;repository-&gt;save($entity); //return success response } Which could be worse...it just doesn't seem nearly as clean to me. Again, maybe I'm just being too rigid in my thinking.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thats what he was using as an example, he is looking for something like mailcatcher but for HTTP requests.
* pedantry
ah, i was tired, must've misread the post
Thanks, updated!
PHPStan now works best for OOP code. I'm afraid that Wordpress plugin does not fall into that category. Please open an issue so I can look at that more closely. Thanks.
If I have a method that should accept "iterables" like objects or arrays, is there no way to define an argument type? *Traversable* or *iterable* unfortunately don't work for *stdClass* objects.
You don't always have access to the apache main config, so the only way to set some Apache configuration is to use .htaccess files (which is basically always true on shared hostings). Laravel and WP mainly uses those files to setup URL Rewriting for fancy url's.
you may want to read about how symfony implements DI, you're able to overwrite almost everything, the thing about FOSUserBundle is that it comes with stuff you'll never need and sooner or later it'll generate technical depth. another reason why i'm not using fosuserbundle: it implements username + email as user identification. lets say you only want to use the user's email for login + auth, well, the username will still be there (in the base class) and generate confusion as soon as new members will join your team. a lot of people don't know how easy it is to implement a user auth system in symfony. FOSUserBundle ist just a User-Base-Entity, User-Manager, couple FormTypes, E-Mail- &amp; Twig-Templates, everything else is done by symfony core tools.
For laravel, even though Homestead is built with Nginx, some people still prefer Apache, so its just easier to give users that file rather then make them write it themselves. 
It's fairly simple if you DO have access to the Apache Vhost to disable this lookup so the file doesn't actually do anything: AllowOverride None But like @pyr0hu said, it's not uncommon for hosting providers to not give you access to the Vhost as you're often on a shared system where one broken vhost would take down the entire Apache instance, whereas a borked .htaccess file will only break your site. On a further note, if you're using Apache and just need everything to redirect to an index file simply add this to the Vhost: DirectoryIndex index.php Which will map unknown files to the index.php file. (might only work on php-fpm, not tried it with mod_php).
I didn't know this. What should I do on apache instead? 
As other have said: it's the way that was set up a long time ago to allow multiple independent sites in a shared-hosting situation behind a singe Apache instance work however they please without needing to coordinate changes to the top-level Apache configuration. In theory a better system could be devised that would allow every vhost in Apache to independently update the config without risk to the config in other vhosts - thus removing the need for the `.htaccess` and its drawbacks file while maintaining all the benefits - but there's not enough will to do it. Most people that really care about performance or any very special configuration are likely to use a VPS or something that's not shared hosting and have access to the top-level configs themselves, and today solutions like containers can remove the need to put multiple sites behind a single web server instance. Doesn't hurt that the price gap between shared-hosting and your own VPS or other solutions isn't that big anymore, and shared-hosting tends to be lowest-common-denominator in terms of what they support, often meaning you'll be quite a bit behind the latest updates. Between all this: there's just very few people that would really care to try and maintain the benefits of the `.htaccess` system while mitigating its negatives. For the most part people are either just maintaining their status quo because it's not broken right now, or people that have already left shared-hosting for something else.
Note that the time component of the date (which defaults to now) hangs around in this line: DateTimeImmutable::createFromFormat('Y-m-d', $date-&gt;format('Y-m-d')); That means if you have $d1 = DateTimeImmutable::createFromFormat('Y-m-d', '2017-01-01'); sleep(2); $d2 = DateTimeImmutable::createFromFormat('Y-m-d', '2017-01-01'); then `$d2` will always be greater than `$d1`, which to me defeats the point of the precision through imprecision thing. I also strongly advise against using `format` to get at values that you will use in comparisons, especially for time-critical or security applications. There are non-obvious bugs and 32-bit overflows in timelib. As a contrived example: date_default_timezone_set('UTC'); $a_long_time_ago = -67768100567971200; echo date('y', $a_long_time_ago) . "\n"; // -48 echo date('y', $a_long_time_ago-1) . "\n"; // 47 (overflow) For safety and portability, stick to comparing unix timestamps as integers. Format only for display.
That use case is covered. &gt; Any directive that you can include in a .htaccess file is better set in a Directory block 
.htaccess is part of Apache. So when nginx says not to use them, it's not to suggest that they are bad, it's just that nginx doesn't use them because it's not apache. Using .htaccess with apache is fine. Sometimes you have to use them if you are on a web host that doesn't allow direct access to the site config
Shame on me. Yes, refering to DDD it is obvious bad to put application logic and domain logic together. My post refers to building a clean business layer not using clean architecture. I've updated the post to clarify this confusion.
I've done some updates on my post especially to clarify some confusing parts! Thanks for the feedback at all!
/r/phphelp
Add the rules to your VirtualHost configuration instead and tell Apache that it shouldn't check for htaccess (AllowOverride None), letting Apache skip checking for (and reading) the .htaccess file on each invocation. 
Cheap shared hosting services, which is what majority of Wordpress users use, don't allow access to the main config files. So .htaccess is the only option in those cases. 
Hi, author here. :) You could, but unfortunately, that only works for getting date level precision. If I wanted minute level precision, for example, then I don't believe the string-to-time parser supports that. Even if it did, I'd rather find another, more consistent way of rounding off since we be receiving non-current times from external APIs, user input, etc. We could definitely make each of these work without further abstraction but it requires a level of consideration/care that I wouldn't want to put into every single DateTime invocation. :)
Hey, good catch, that was a goof in an earlier version of my code. :) The version I should've used had some zero-padding in the input string. Based on your security comments, though, I've changed the example to just DateTime::setTime() to modify the current data. This works for getting date level precision, though it's less flexible for other levels (like minute or month level) so if you have any thoughts on a safe way to achieve that on any precision, please let me know (I haven't had a chance to experiment beyond varying levels of hour/minute/second precision yet). I wish I could say that the existence of security or complex architecture dependent bugs in datetime code was surprising but it kind of isn't. :) More and more it feels like adjusting precision should be something taken up by a really well reviewed library that folks can collaborate on. Either way, thanks for the feedback!
This only redirects the index of a directory, as the name suggests. Not unknown files.
Sure, mine was a solution for the example in the article without changing the semantics, but what is proposed is still what I'd call "a solution in search of a problem." Let's consider that there is a legitimate reason to ~~or~~ use "now" (e.g. logging or displaying a "last checked" timestamp to the user). All that needs to be done is add 1 day (or whatever precision is relevant for your use case) to the estimated delivery and change the operator to &gt;=. This allows your variant to be of any precision and evaluate correctly without additional ~~completely~~ complexity or code traps. Couple of edits; thanks mobile autocorrect.
This is because most Wordpress installations are usually on shared hosts where you don't have access to the main Apache configs. I'm guessing Taylor put it in Laravel because enough people complained about the shared hosting situation they're in and not being able to figure out the .htaccess for themselves.
In a nutshell. Yes. Caveat: get the right extensions first. Microsoft and PhP have never really been good friends, but VSCode works well for me. It's quick, concise and does what you need it too
What extensions do you recommend?
What extensions do you suggest? I see there are a few for php. Thanks!
VSCode is the best free editor for PHP hands down. Edit: https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-intellisense and https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug are the two extensions I use
Check the comments regarding your ini settings. http://php.net/manual/en/function.mssql-query.php
I agree, Yarn is pretty sweet. But despite its flaws, I take any day _npm_ w local dependencies and local configuration over the Pecl+PEAR+composer+php-ext local/global dependencies and global/local/env configuration. PHP configuration stack feels like a scavenger hunt on your file system.
&gt; Caveat: get the right extensions first. This was probably what made me not continue with VSC; I tried it for about two weeks and tried tweaking it with extensions, but I never really felt I got where I wanted to be. To be fair, I'm using PhpStorm with a configuration pretty much out of the box; and expecting something similar was maybe a bit naive. But I gave it a try - that's what's most important. What I _did_ like was the low memory consumption compared to PhpStorm though.
You need FallbackResource index.php to redirect anything that would 404 to the index file.
&gt; So when nginx says not to use them, it's not to suggest that they are bad No, it is suggesting they are bad.... because they are bad. .htaccess files have to be read by the webserver on every request which can significantly slow performance if you have a lot of rules
Nginx doesn't use .htaccess files. At all. You don't want to use .htaccess files with nginx because it won't work. They are incompatible.
&gt; Using .htaccess with apache is fine. I was more commenting on this. I know nginx doesn't load htaccess at all, I was pointing out that even if you're using Apache you shouldnt use htaccess unless absolutely needed
+1 for JMSSerializer. Might cost you a day or so to get your annotations right, but it's worth it
&gt; in a typical PHP web app, the models do tend to be anemic But not just property bag. For example let's say we need simple CRUD application, like blog. And we have just simple article and see how things could change over time: - Step 1: We have simple Article entity with bunch of properties and setters and getters - [Step 2](https://gist.github.com/fesor/dda6c4c37a17509f18c2c9486323d997/d09f9aa01871fcba2b6a20be347d2e9dd042fdc7): We are splitting state of Article into value objects, renaming setters into more valuable names. - [Step 3](https://gist.github.com/fesor/dda6c4c37a17509f18c2c9486323d997/2fc15a75990b225913eab1b6feb6fcd2074a2559): Let's say we need to add auto log of all actions which happened to article and who performed that action. Let's use domain events for that, they will be stored in array and fired after transaction will be successfully completed. Then listener will took all needed information and will make action log for us. - [Step 4](https://gist.github.com/fesor/dda6c4c37a17509f18c2c9486323d997/e38db58cd9b02707cd9714cd307c27f3f0ece042): Then small change - add timestamp when article content has been updated. - [Step 5](https://gist.github.com/fesor/dda6c4c37a17509f18c2c9486323d997/2e2ae37a70e9d7b6e2e47d5346bfecf393ae11af): Now we need our article to have ability to publish and unpublish article within specific date range. - [Step 6](https://gist.github.com/fesor/dda6c4c37a17509f18c2c9486323d997/b39d9d52f3ef3b6fd26ed2414ea64864010bf666): Now we realize that meta information is also part of content. Moreover, we need revisions of content to be available. - [Step 7](https://gist.github.com/fesor/dda6c4c37a17509f18c2c9486323d997/de3ed2fce7e2903751736c14415b968c2c013e36): Since we have revisions, it's time to implement rollback. So here we have simple article entity with some kind of "logic" inside. Another good example is `Credentials` entity.
My mistake, I'm not very familiar with it. I did find an SO post that indicates it is a known bug. https://stackoverflow.com/questions/4958936/using-phps-odbc-to-grab-a-varcharmax-column
I know drupal and wp do this because it's easy for a 'site builder' or new developer. It's an easy way to get common features (such as url rewriting) and some common protections on a basic install of drupal or wp. Many folks using them are coming from non-computer science backgrounds. As for laravel.... seems kinda out of place. That being said, unless you are running a site with very high scalability needs, using a .htaccess isn't the WORST thing in the world you can do. *I think*, please correct my ignorance if incorrect.
&gt;After finding out how Apache processes an .htaccess file. It seems like a god awful idea. After reading those two separate sentences. Your English seems like a god awful display.
If you're looking for RSS feeds instead of emails, I run a service to create RSS feeds from Docker Hub tags: &lt;https://docker-hub-rss.128.io/&gt;. You can subscribe to the [library/php](https://docker-hub-rss.128.io/r/library/php/tags) feed and receive updates everytime any tag changes (including retags in the case of updated images).
I work on a large project that uses Symfony and Doctrine. Nothing matches PhpStorm (or, in my case, the full IntelliJ IDEA). Being able to cmd-click a defined route name string and be taken to the either the route definition or the controller action to which it is mapped is something I've not seen or gotten to work in other IDEs and editors. Things like smart completion of XML service definitions because it looks at the class constructor argument type hints and auto-completes/suggests the correct namespaced class is a time saver. I wish there were other viable alternatives, but nothing compares.
`.htaccess` are for shared environments or when you want to break standard rules which are set by the system wide configurations for a select use case. Not sure I agree that they should "never be used," at all. In fact I find them quite useful when you don't have access to the server wide configuration files.
Yes, and there are 2 ways to do this: 1. Create NullUser, and manually implement getAvatar() returning a NullAvatar, like this: http://designpatternsphp.readthedocs.io/en/latest/Behavioral/NullObject/README.html 2. Create some magic NullObject implementation that responds all methods with other NullObjects, like this: https://gist.github.com/eric1234/7991763 
Thanks for all the responses guys. Interesting points.
&gt; free editor
You may want to decouple your services from objects/rules associated with HTTP
Sigh. $estimatedDeliveryDate = new DateTimeImmutable('2017-06-21'); $now = new DateTimeImmutable('now'); if ($now-&gt;format('Y-m-d') &gt; $estimatedDeliveryDate-&gt;format('Y-m-d')) { echo 'Package is late!'; } else { echo 'Package is on the way.'; } Now get off my lawn.
NetBeans also doesn't compare to PhpStorm. Neither does Eclipse, unfortunately. At least, not for projects using frameworks, like Symfony. I wish they were viable alternatives, but they just don't have the same range of features and capabilities. I've tried both with their respective plugins, and I've tried configuring them as best as I could, but they just aren't quite there. 
Exactly. Since (as a framework or library developer) you can't ensure that 100% of your users will be able to modify the Apache or Nginx config, it is safest to put it in an htaccess that will ship with the framework. Also, as a framework developer you want to make it as easy for your users to set up as possible. Of course, once you download the framework you can do what you want with it. For those users who are worried about htaccess performance, you can always refactor the rewrites to the Apache config.
I use vs code exclusively right now. I do python and PHP. Intellisense works a lot better with python but it's decent for PHP too. Overall a great editor
The solution to spaghetti is not merely abstraction and layers, but modularization. Otherwise each successive layer depends on all layers below it and that's just abstract spaghetti again. A module depends on as little as possible (ideally only itself), and then a single layer above modules, the application layer, combines modules into the final solution. That's not the same as just layers.
&gt; Being able to cmd-click a defined route name string and be taken to the either the route definition or the controller action to which it is mapped is something I've not seen or gotten to work in other IDEs and editors Whoa. Is this for real? I used to only want PHP Storm for the type inference style features, but sublime and vim both have fairly comparable (but not *quite* as good) alternatives. This is a super powerful feature, though.
[100% real, working feature](https://cl.ly/1Y1p3i2i330j)
Holy shit that's amazing, does this work for all frameworks? I also imagine this works if you go to a route file just the same?
No idea. I've only used it for Symfony. You should check it out, though. :-)
Nahh, nothing will get me off vim at this point :P I'd really like the feature to get somewhere from the routes file, but it's generally easy enough to ctrl+p, controller name, ,fu, method name. I really want to find a "go to anything" for vim that's just like sublime, but I don't think it exists :(
I understand that. I love and use Emacs, Vim, and even ed. For Symfony PHP development, though, IntelliJ is king. :-)
Yeah, there are some features that are just super powerful (like the one I'm currently fawning over). I've just not been spoiled enough yet by PHP Storm to make me want to "never go back". To be honest, until they get 100% compatible vim mode, I'm not going to want to switch. I didn't even move from Sublime to PHP Storm just because I didn't want to re-learn all the shortcuts and I especially didn't want to remap them. Vim, however, is super worth it given how even more keyboard friendly it is.
Yeah, IntelliJ's vim plugin is… lacking. Emacs' Evil mode is the best non-Vim Vim experience I've ever experienced. 
Yeah, spacemacs is **awesome**. However, solarized in the terminal emacs client **blows** :(
.htaccess is the lowest common denominator method to configure Apache. It is the one most likely to be available, often the only one available. .htaccess is also a configuration method that, if it's available, requires zero setup action from the user. The mere presence of the file is all that's needed. So frameworks use .htaccess to make things as frictionless as possible, so you can hopefully just dump the files in the webroot of some Apache install, whether it's shared hosting, a local install, a VPS or whatever, and it will Just Work. And for the few people worried about security or performance, they can still disable .htaccess support and copy the content into their vhost config files if they want. They would need to do manual configuration anyway.
I also find [Build API's you won't hate](https://apisyouwonthate.com/) by Phil Sturgeon an amazing book to get into REST/CRUD controllers, as Adam calls it.
I'm guessing 18 since the second string starts with an int so it gets casted to int
I think /u/WaterGuy12 would enjoy this. --- *I am bot, and this action was performed automatically.* ^^^^[Confused?](https://www.reddit.com/r/me_irl/comments/6qij1u/meirl/?utm_content=comments&amp;utm_medium=user&amp;utm_source=reddit&amp;utm_name=frontpage)
i am bit confused that's why i asked here.
What are you confused about exactly? PHP does type conversion, so it does 3 + 15 + 0
why is the last one 0?
[Why not try it out?](https://3v4l.org/15bk3)
Because it doesn't start with a number
Because it's an undefined variable.
Laravel has a plugin for it too.
ok Thanks
sometime ask the question to make sure things is a good habit thats why sir i asked. 
Variables can't start with numbers anyway
Exactly. That's how I know it's undefined.
String does not start with a number.
[...](http://i.imgur.com/2Fa8P.gif)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I can't remember a time when this was ever an issue for me. Perhaps the projects I work on aren't large or important enough. I can remember wasting a serious amount of time getting virtualization working right, though. 
Not always. You can choose between an unknown someone's opinion, or just try it out and *know* for certain the answer. There's no reason the former is a better habit.
Amateurs.
&gt; Coin That word doesn't mean what you think it means. Also &gt; it also supports all types of web servers that includes Apache, Microsoft, Netscape and even the personal browsers lolwut
True. But if it was single quoted it would still cast to zero, since it doesn’t start with a number (I’m 99% sure at least, it’s way too late here)
Yeah I think it would
My two cents - I've used VS and sublime and many others but realistically PHPstorm is pretty cheap. For most devs it's like 1 hour of billable time per year. The reason I recommend it is because it increased my coding skill and knowledge 10 fold. The code Hints, completions, suggestions, formatting, etc. we're for me more than just making my job easier - it actually taught me how to be a better developer. Even if you don't use half of the features, it is worth it in my book. Its pretty smart - it takes the PHP or web project you load up and pretty much digests it and knows the ins and outs and interconnectedness of the whole project. /twocents
This isn't easy. Use a ready built service if you are just wanting it to work, and it requires nothing custom.
Unfortunately the order management site is needed (( and it must be separate from the site where the orders are placed. 
PHPStorm's early access preview is free to use without a license
&gt; might only work on php-fpm, not tried it with mod_php It works with mod_php. This configuration alters how Apache constructs the URI, which happens long before it considers how to handle the contents.
In short, .htaccess isn't a great solution, but sometimes it's the only solution. In which case, it's what you should use.
And restart httpd after making those changes. One thing about .htaccess is it DOESN'T require a server restart after every change. That's helpful as you trial-and-error configuration changes. You still shouldn't use it if you have another option.
It goes, certainly does but I prefer PHPStorm. I used to use PHPStorm and Sublime but switched sublime out. Quite like using VCS in its place. 
I have built this for clients before. Can you send me a DM with the details? Timeframe, what to manage, etc?
&gt; What will $x be equal to after the statement $x = 3 + "15%" + "$25"? I see a lot of confusion in this thread about why the answer is 18. In this statement, because there is an integer (3), the remaining components are going to be [treated as integers](http://php.net/manual/en/language.types.string.php#language.types.string.conversion). As such, PHP will try to coerce "15%" to a number by reading the value from left-to-right until it finds a non-numerical character (remember that sign (+/-) counts as numerical; as for the decimal separator if present). So it sees the 1 and 5, and stops coercion when it hits the %. Now our equation will read `$x = 3 + 15 + "$25"`. For the last part ($25), two things are happening here: - Since you're using double quotes, and there is an unescaped dollar sign ($), PHP will try to [parse the token as a variable](http://php.net/manual/en/language.types.string.php#language.types.string.parsing). Since `$25` is not a valid variable name, it won't parse and it'll raise a PHP Notice and return an empty value, and - Since `$25` parses to an empty value, and the expression has integers in it, PHP's type coercion will convert the empty string to the default integer value, which is `0`. So now our equation reads `$x = 3 + 15 + 0`. 
It genuinely charges you 7.99 per **item**. Fuck that. I am always sceptical of tshirt sites because nearly every last one of them is different sizes when it comes to large and the quality dramatically differs. 
You have the option to download hires and make a tee yourself.
But that takes cash out your pocket. You went through the hassle of all this might as well get something out of it. 
In general there can be more threads than cores and they will all get a share of processing time. This is something managed by the operating system. So with PHP another process would start up and just be given a share of the time, it probably wouldn't even be noticable unless your using a potato as a server! Think of it like when you're on your computer you can have loads of programs running and they don't have to "wait" for the other to finish. It's all handled transparently for you. It would be similar for PHP as it's just another program. If you want to know more you could look up CPU scheduling algorithms or wait for someone more knowledgeable about it to show up!
I have a terminal alias that runs phpcs, phpmd, phploc, and phpcpd. Once all clear I run phpunit but I am looking at phpstan and php-cs-fixer to see if they are good to work in. 
If all cores are really busy then new request thread will be delayed. But if thread dont use processor completely or do any i/o like reading file then waitning thread gets share of processor time during wait period. If server load (number of waiting threads) exceeds defined treshold new requests will be refused. 
 $x = 3 + "15%" + "$25"; echo $x . "\n"; # results in Your are fired!
You don't need to restart - just reload the configuration. That way httpd will keep serving requests while you're changing the configuration.
You probably want a job queue for that and separate the front-end web process from the back-end heavy-lifting.
VSC is great for php!
Really? I've never heard that. Is that true for all the IntelliJ IDEs?
Yes task switching in this case would probably do more harm. If only limiting factor is CPU then there is no workaround. No matter how clever you organize execution you cannot compute more than what CPU does. Few questions to ask: 1) Is all this computation necessary? Isn't there any chance to use cache? 2) Do you really need this computation synchronously? Couldn't it be computed later? 3) if inpatient user is problem you could psychologically improve responsivenes on client side by displaying progressbar 4) could you move some of these computation on client side? Just serve partial result and comoute rest in JS on client
I think you mean 'You are' aka "You're" .... ;-) 
https://confluence.jetbrains.com/display/IDEADEV/EAP Their whole platform is free for preview :)
Almost all of myong running tasks executed by a user are just sent an email after they run. If it's a report or something, user kicks it off, server does it's thing, user gets an email with the report attached when it finishes. I know you're not asking for workflow improvements, but this is just a thought on how we let long tasks execute. 
In that case I see only two solutions. First is throw in dome servers. Other is server side optimalization. I dont know how your product works and what it computes so its hard to recommend anything specific. But I would recommend few ways to look upon: 1) detailed analysis of algorithm to identify new cache options for some intermediate results (not only final result) 2) different data structures with faster access 3) database structure denormalization 4) native compiled olibraries 5) switch to php-fpm (and maybe use different pools for fast and slow requests to prevent slow request from consuming whole cpu) 6) different cache technologies (memcached, redis,... ) 7) use different computation oriented language for computation heavy part (like R) 
You could look at refactoring some of your heaviest computational load into a c extension for php, if this model is something that's going to be around long term. This I wouldn't normally recommend as it's often only worth it in a very narrow set of use cases, but sometimes is a viable solution. 
You should look into how the kernel task scheduler works. Say you only have only one core and 2 tasks that need 3 seconds of execution time each (1 second for each instruction in this case). Supposing that the priorities of these tasks are the same, the scheduler will generally split the cores processing time as follows: 1.1, 2.1, 1.2, 2.2, 1.3, 2.3 If a new task is spawned, the scheduler will insert it in the queue and give it some processing time: 1.1, 2.1, 1.2, 3.1, 2.2, 1.3, 3.2, 2.3, 3.3 Note that there are different scheduling algorithms, this is just a general, very simple representation. If you want to dig in deeper you can look at the shortest remaining time, round robin and earliest deadline first algorithms.
PHP is single threaded, but the web server is not. The web server and OS will try to get your 5th client in there somewhere. If they can't, they will be queued until resources are available. There's a whole bunch of Apache settings that you can use to fine tune this kind of thing.
&gt; 509 Bandwidth Limit Exceeded Perfect.
This has more to do with the number of available threads in the web server than anything to do with CPU cores or PHP.
Relax. Your OS is clever.* * Unless you have processes that have explicitly flagged themselves as uninterruptible (PHP doesn't do this), otherwise it's going to share CPU time between all active processes (more or less) equitably. ** Different OSs actually implement this in subtly different ways, however. Windows, for example will do better with fewer multi-thread processes, while Linux and Mac will do better with many single-thread processes. But the reasons and qualifications of when and how true this is deserve some googling.
If you're running PHP it's more than likely your web server is not multi threaded. 
&gt; Note: mpm_prefork Therein lies your answer. This is more related to how Apache handles it's processes when using the prefork mpm. From the [Apache MPM Prefork documentation](https://httpd.apache.org/docs/2.4/mod/prefork.html): &gt; A single control process is responsible for launching child processes which listen for connections and serve them when they arrive. Apache httpd always tries to maintain several spareor idle server processes, which stand ready to serve incoming requests. In this way, clients do not need to wait for a new child processes to be forked before their requests can be served. We also know that when using mod_php, each process has it's own isolated instance of PHP. From "[Why you shouldn't use mod_php with the prefork mpm anymore](https://wiki.apache.org/httpd/php)": &gt; * mod_php is loaded into every httpd process all the time. Even when httpd is serving static/non php content, that memory is in use. &gt; &gt; * mod_php is not thread safe and forces you to stick with the prefork mpm (multi process, no threads), which is the slowest possible configuration
 php &gt; var_dump(3, intval("15%"), intval("$25")); int(3) int(15) int(0) 
MAMP has a windows version now. WAMP is still a thing.
Why is so? Nginx and apache are multithread. Of course you cannot run a different thread on your php app, but webserver will execute each petition in diferent threads... 
&gt; Much of the information you will find on this topic is kind of conflicting. That's precisely *because* it's not one simple always right answer. It's also an ever evolving answer as CPU makers keep finding ways around the limits of quantum physics. ((How quickly can you make a single transistor change state when it's 20nm away from other transistors?))
Nginx is not multithreaded. It's an event reactor with non blocking IO, very similar to how node.js servers work. Apache *can* multithread but you almost always run it in forked-process mode instead, because PHP itself is not thread safe. Now, if you were using PHP as fastcgi with Apache, sure, you could multithread but in that scenario why they hell wouldn't you just use nginx. 
Yeah. We don't have many long running tasks. PDFs with lots of images (latency here is usually fetching from S3) and monthly reports that shift through millions of records and massive horrible table structure. 95% of daily user tasks take less than a second. 
&gt; Since $25 is not a valid variable name, it won't parse and it'll raise a PHP Notice and return an empty value No, it's simply treated as normal text.
I thought that too when I was writing my reply, but I wasn't 100% sure, so I tested it on the command line. It does in fact emit a PHP Notice. 
Yes. In the end it's all about cohesion and coupling of modules.
It doesn't matter if PHP is singlethreaded or not. The OS will do scheduling preemptively.
Because the OP is using prefork mpm, which also means mod_php. From "[Why you shouldn't use mod_php with the prefork mpm anymore](https://wiki.apache.org/httpd/php)": &gt; * mod_php is not thread safe and forces you to stick with the prefork mpm (multi process, no threads), which is the slowest possible configuration The prefork mpm uses new processes to handle requests, not threads.
For a programmer you sure don't have a very good grasp of Markdown.
What notice, what PHP version? $ php -r 'var_dump("$25");' string(3) "$25" $ php -v PHP 7.0.20 (cli) (built: Jun 23 2017 07:46:30) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies
As a string, it works fine. But, you forgot that OP was forcing coercion with integers, which is when PHP complains about the "$25". λ php -r 'var_dump(3 + "$25");' PHP Warning: A non-numeric value encountered in Command line code on line 1 Warning: A non-numeric value encountered in Command line code on line 1 int(3) λ php -v PHP 7.1.7 (cli) (built: Jul 19 2017 15:58:29) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies 
PHP returns that same error even when single quotes are being used: $ php -r "var_dump(3 + '$25');" Warning: A non-numeric value encountered in Command line code on line 1 int(3) $ php -v PHP 7.1.4 (cli) (built: Apr 11 2017 20:07:48) ( NTS MSVC14 (Visual C++ 2015) x86 ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies
That'd fall under your second bullet-point.
this is not PHP relevant. even on 1 core setup if you have 20 processes asking "hey OS i need some CPU time!" OS will assign some CPU time for each process https://www.tutorialspoint.com/operating_system/os_multi_threading.htm https://en.wikipedia.org/wiki/Multithreading_(computer_architecture) 
Fair point. Thanks for pointing that out. :)
easy is relative to the experience level of the person in question. I'm using Fosuser because I'm a newbie and it fits my use case reasonably. Yeah I've had a few things I had to get real stubborn as a newbie to figure out, but using something higher quality than what I'm capable of myself at this point is a time saver. The developers of that bundle are if not pros, they are in comparison to me. I'm sure the initial reaction to this is that diy helps you learn. I agree, but its a fine balance there, where learning by reinventing the wheel can be so slow and counterproductive that its demotivating. I just really don't want to write my own user management and fuck it all up, or worry about what critical stupid thing I did.
I've had a problem, and haven't bothered to look it up, where when you define a return type while also having parameters in a function signature that happen to be too long. The PSR code sniffer is never happy. Simple Example: function aWayTooLongFunctionName( $aTooLongVariableName, $bTooLongVariableName, $cTooLongVariableName ): int { // function body }
What a useless comment
&gt; If you really want to rewrite it, ask Netscape what happened when they decided to rewrite Navigator. Ask TextMate what happened when they decided to rewrite Textmate 2. All depends on the app though. I'm currently rebuilding a website that was build in 09 b and I have no doubts that rebuilding is easier in this case. Its so full of anti patterns and unreadable spaghetti that burning it to the ground was the only option. I'd guess I'm at about 70% to completion, with mostly loose ends being left. I tackled the harder stuff first so I could avoid sunk cost and getting to addicted to easy wins Refactoring it would have been torture due to the extremely low readability in addition to a *very* high degree of coupling. One size fits all advice is pretty problematic. I'll grant that I seriously doubt OPs legacy project is the moldy closet of horrors that mine is lol. My project also happens to be CRUD heavy and some minor restructuring of data was no problem. The funny part is comparing the live site to my dev site and thinking I implemented something wrong only to find out it has always been broken lol. For example it has a forum where the category diplayed is done via a GET request, and stored in a variable that is used 75!! times. some years ago I just overwrote the category variable so only one forum was displayed (the others were unused) and figuring out what hackish thing I did to "merge" the forums took a while. Rebuilding it has been a good learning experience and a few laughs to be sure.
What makes it better than other obvious competition? I'm not trolling, I might learn something useful from your answer.
Hey fellas. I'm a CS student who do freelance dev work (mostly static web) on the side. There's a pretty lucrative gig that I spotted that uses PHP. So I tried self-learning it (for some fucking reason the CS curriculum doesn't include WebDev while the IT curriculum does), but I can't even get a hello world sample running. Now that I have a freshly installed Ubuntu box: what exactly do I need (at the bare minimum) to run PHP code? Sincerely, someone who knows `npm start` &amp; `flask run`. EDIT: After searching more intensively like a real programmer would, I found Laracasts to be very helpful. I'm working through it now :)
I think PSR-2 predates return types, and as a result the behavior is undefined. [PSR-12](https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md) is in draft, and currently defines the [style for return types](https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md#45-method-and-function-arguments) as follows: &gt; When you have a return type declaration present there MUST be one space after the colon followed by the type declaration. The colon and declaration MUST be on the same line as the argument list closing parentheses with no spaces between the two characters. The declaration keyword (e.g. string) MUST be lowercase. It looks like your code would follow PSR-12; it might be justifiable to record a bug report against CodeSniffer, but given PSR-12 is still in draft and may change, you might have to live with the current behavior or define your own custom coding standard as a stopgap.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [php-fig/fig-standards/.../**extended-coding-style-guide.md** (master → f3b9313)](https://github.com/php-fig/fig-standards/blob/f3b931327d3bc17a1045125646e2648170c97975/proposed/extended-coding-style-guide.md) * [php-fig/fig-standards/.../**extended-coding-style-guide.md#45-method-and-function-arguments** (master → f3b9313)](https://github.com/php-fig/fig-standards/blob/f3b931327d3bc17a1045125646e2648170c97975/proposed/extended-coding-style-guide.md#45-method-and-function-arguments) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dljsec6.)^.
The nginx runs multiple processes, one for each core. And in the fpm part it's a multiprocess environment, so you have multiple "threads" in execution on the php part 
&gt; So this being said, if you make for example an long-executing for loop, chance is there will be no task switching during the loop, as the performance drawback would be very high. In a single-threaded scenario, one such task will most likely "lock in" a core during that execution and if 4 clients will be loaded in a 4-cpu environment, chance is, almost everything else will have to wait for these "guys" to finish their job and then, only then, CPU will be released and able to serve other processes as well. I am not the most knowledgeable here, but I think you are mixing up threads and processes. If 4 clients are "loaded" via a php script running on apache2 that need a lot of CPU time in a 4-CPU environment, then the 4-CPU is fairly irrelevant. Unless specifically programmed and configured, all 4 clients will receive CPU time from all 4 CPUs, mixed in with hundreds of other process also running on the server. If a 5th client connects, then all 5 clients will receive CPU time from all 4 CPUs. PHP may be single threaded, but apache is multi-process, so (I think) each client gets a new process until you reach the configured connection limit in apache, then new clients are rejected. The only reason that the 5th client would have to wait for one of the other four to finish is if it were reliant on the results of one of the other clients. That all said, if client one is running a query on your database that locks a table and client five needs to use that table, it may have to wait for client one to finish that specific query, depending on the table type, lock type and query type, thus client five might run more slowly, as it may have to wait 2 seconds to run a 0.001 second query.
Well if you want to air quote "threads" and change the definition, in a post where the definition of thread vs process is actually quite critical to the question OP asked, why not just say it's running on unicorns and rainbows. 
Excessive self promotion is against reddit's rules. Stop with the spam.
What is the error? 
500 internet error occurs mostly
Okay. Check the error logs. You need to provide more context to your problem. 
your question is not PHP relevant. it's not like you have only 4 main threads in modern operating systems. web servers in certain configuration can have limited workers that can serve clients but regarding cpu cores the cpu time will be distributed equally just like in scenario where you decompress 5 files
You said you are using the prefork mpm; please see [my comment here](https://www.reddit.com/r/php/comments/6t8a1p/_/dlj34b4) which explains (with links) exactly how apache and php behave in this particular setup.
The error logs might not be much help either. Had a site 500 the other day with nothing in the logs to tell me why. Turn on [Debug](https://codex.wordpress.org/Debugging_in_WordPress).
Almost certainly is going to be a [deprecated function that got removed](http://php.net/manual/en/migration70.incompatible.php#migration70.incompatible.removed-functions) and you have a plugin that is still using it. 
Is it spam? Is it self promotion? Or a general php information. U decide.
In job ads, lately I've been seeing MV*. I'm well aware of MVC, but what does the asterisk mean?
Good find. Laracasts is awesome. Yea, you either need to setup a VM environment (VirtualBox or VMWare, Vagrant, and Homestead or equiv) or some form of local PHP install (XAMPP or just PHP). Going through this is just part of the PHP journey and you'll likely go through it a bunch of times if you want to continue to work with the language.
The nginx runs multiple processes, one for each core. And in the fpm part it's a multiprocess environment, so you have multiple unicorns/rainbows in execution on the php part. (Fixed)
You apparently have error reporting turned off and/or display/log errors disabled. Since you're (I hope) testing your upgrade before you deploy it, perhaps you could turn these settings on in the test environment. php.ini: error_reporting=E_ALL display_errors=on log_errors=on That should provide more helpful context on what's going wrong.
phptherightway.com is a goldmine of sources and then some. Good luck!
MVP perhaps? P for presenter. 
It always bothers me when i need to express duration for various reason in code and then after a while, when i come back, not beeing sure what is exactly the duration and be forced to do the math again. Sure after a while, you remember that 3600 sec is equal to 1 hour but still. So i have created a small class to handle gracefully this: echo (new TimeExpression('3hour 14min 51sec'))-&gt;toSeconds(); // 11691 echo (new TimeExpression('3 hour 14 min 51 sec'))-&gt;toSeconds(); // 11691 echo (new TimeExpression('3h 14min 51s'))-&gt;toSeconds(); // 11691 echo (new TimeExpression('2d'))-&gt;toSeconds(); //172800 echo (new TimeExpression('1week 3day'))-&gt;toSeconds(); //864000 You can also do the opposite: echo (new TimeExpression(11691))-&gt;toString(); //3 hours 14 mins 51 secs echo (new TimeExpression(1296000))-&gt;toString(); //15 days echo (new TimeExpression(86400))-&gt;toString(); //1 day echo (new TimeExpression(86400))-&gt;toString('%d%s'); //1day echo (new TimeExpression(86400))-&gt;toString('%d-%s'); //1-day Here's the link to the class: [https://github.com/peakphp/framework/blob/4723fe24de6e852ec690ade7f4655076d9f2d8ee/src/Common/TimeExpression.php](https://github.com/peakphp/framework/blob/4723fe24de6e852ec690ade7f4655076d9f2d8ee/src/Common/TimeExpression.php)
stupid limitation.
https://i.imgur.com/PLTZJRh.gif
Great thanks for the information. I'll check it out 
Well you're in luck because Php has a Postgresql library, I'd suggest using some form of database GUI. https://www.pgadmin.org/ Looks alright, and as everyone else is going to suggest, phptherightway.com
This is mostly useful for the project manager or lead developer to set-up for a team so they align in style. When I develop by myself, I don't use such tools, because I already know what style I want.
2 best resources available on the web, highly recommended: - Videos series: laracasts.com 's PHP Practitioner (Free) - Book: PHP PANDAS by Dayle Rees (Free)
Why not just use the build-in [DateInterval](http://php.net/manual/en/dateinterval.construct.php)? They seems to serve the same purpose, but can be added/subtracted from DateTime object. 
Well, i didn't know about DateInterval. I don't think it serve the same purpose. DateInterval seem to be related to dates and TimeExpression only care about duration. Did i miss something?
Do you know Charles? https://www.charlesproxy.com/ Or Fiddler? http://www.telerik.com/fiddler These sit in between the server &amp; client, you can even change the requests / responses.
This tool can help you stick to your style. Would you not find it useful in that way?
Whatever I do is by definition my style. I don't need a tool for that. Do you need a tool to help you write comments like /u/RevalGovender writes comments? :) Also, with everything there's a point of inflection where obsession with it turns it from useful to harmful. Having a common code style to the degree so we can read each other's code is useful. Having a policing software to stop and correct us on every line over fine nuances that don't affect readability in many cases is not useful. If know how to style code (according to PSR-1, -2 etc.), most of us do, because those PSRs were *modeled after the most common styling found on GitHub PHP codebases*. Code that is styled poorly is visible with your naked eyes. The tool only helps newcomers, when your eyes are busy doing something more important than correcting someone's style. 
Let me put it this way. At any given moment there are hundreds of processes running concurrently on your machine, and they don't block each other. And this is true even if you run on a machine with only one core.
not entirely, DateInterval, as the name describes, is about intervals. So 2 days, 25 min, etc. Best thing is you can use them in combination with DateTime objects. For instance: $now = new DateTime(); $now-&gt;sub(new DateInterval('PT25M')); // substract 25 minutes $difference = $now-&gt;diff(new DateTime()); // will return an interval of 25 minutes
https://github.com/odan/learn-php/blob/master/README.md
I can give you a bit more knowledge. Look up "preemptive multitasking". This is a system by which the kernel of the operating system, aided by created for the purpose hardware features, gives a slice of time to a process, and then the process is interrupted (no matter what it does, even if the process is stuck and is about to crash), and control is returned to the kernel, so it can give slice of time to another process. All the processes in the system are cycled-through in this matter hundreds of times a second (way more usually, but at least that), so every process gets its fair share. This is just for *one CPU core* we're talking about. So as you imagine, the system is even more responsive, and there's even more time for every process with 2, 4 or more cores. Computers have been multitasking for decades before multicore processors exists. My entire childhood, I had been having single-core computers, and they were all multitasking just fine :) The only thing that can prevent a process from running, is if another power-hungry process is given *very high priority*, typically by the user (you), via tools like "nice". A process that is not "nice" still is interrupted by the kernel, but it receives bigger slices of time to the point other processes may be starved. But by default no process in your web server has higher priority than others, so this is irrelevant here.
I've heard too much "but it works on my box", so my rule of thumb for my teams is, whatever you're dev'ing on has to be identical to what's in production. (something something infra as code) Obviously ymmv.
There's an insecure usage of `/tmp/` in your script - the `Utilities::backupFile` function has a filename that you can guess so it's possible to do some nasty stuff with that. Always use `tempnam` when writing to tmp!
Highly recommend mmtuts on YouTube. He's very active and his php series gets into what you need to know right away.
In php 7.1 you have the new [iterable](https://wiki.php.net/rfc/iterable) pseduo-type. Given an iterable object, you know you can foreach (iterate) over it. stdClass is not iterable, the reason is stated here https://wiki.php.net/rfc/iterable#object_iteration . TLDR; public properties - aka stdClass properties - are not designed for iteration, and they don't work with `yield from` anyway. I have never seen a need for stdClass and I've always found it a weird construct in php, I know it's returned from PDO and XML libs but it's easy to use arrays instead. Classes and arrays fulfill all my needs and do a much better job for me. Does anyone prefer stdClass and use it alot? Apart form the slightly more terse syntax, why use it?
Thanks for the great information everyone. I will have some places to start. Hopefully be up and running soon...Yes I'm optimistic
&gt; phptherightway.com is a goldmine of sources and then some. Good luck! figures, the UltimateLazyAss wouldnt add a few extra keystrokes to make it clickable www.phptherightway.com
That is not what i want to acheive here, i want to know how much in seconds is a duration string and i think DateInterval is not suited for this. Yes, you can acheive it with DateInterval but only by doing the math manually. Here's a silly example but you will get the picture: //with TimeExpression $sleep = '1hour 35min 45sec'; sleep( (new TimeExpression($sleep))-&gt;toSeconds() ); //with DateInterval $sleep = 'P1h35M45S'; $di = new DateInterval('PT1H35M45S'); sleep( ($di-&gt;h * 3600) + ($di-&gt;i * 60) + $di-&gt;s ); I can see the power of DateInterval when using dates, but when you want to convert a duration to seconds or vice-versa, it's not very helpful
You run the blog, right? You constantly post links to your blog every where on Reddit despite people telling you why what you're doing is wrong, right? All you do is promote yourself, unsolicited, with rehashed content that isn't even always accurate. Your demeanor and behavior is terribly unprofessional. I have decided. It is spam. It is self promotion in excess. You are not only a terrible writer, but you are also a terrible programmer. Have a nice day. 
the code sniffer ruleset I use would say ): int { rather than ): int { for reasons that I don't care to look up the specific rule for, but it's related to the mulit-line params.
I have possibly a stupid question. I was an android developer for a few years then i moved to webdev because there are many more better paid jobs in that field. I do freelance work and most of the time i jump every week from a code base to code base so i spend most of my time trying to understand how this weeks project works. So here goes my question. Is it normal that absolutely noone writes tests, and most of the times even comments? yes, most of the projects i had to work on didnt even have comments/phpdocs. Also most of the projects are hosted on shared hostings (i belive thats what they are called) where installing a debugger is impossible. So I basically just log shit out. I paste 20 log methods into the code somewhere around a bug and hope for the best. Now I understand that a lot of you guys (from what I've seen) are hip and modern and you use all of those js frameworks and debuggers and fancy shit and I would love to use those too but NONE of my clients ever presented me with a project that a previous developer has put even a slight bit of care into. I've been doing android dev for about 4-5 years and webdev for like 3-4 months and I've seen more shitty code in those past 3 months then in my entire life. Now I'm slowly getting better at it believe it or not, it takes me less time to go through a shitty code then before but it is still incredibly frustating. Any advice? I already charge my clients extra to look around their shitty code but the frustration is still there. Sorry for a long rant, throwaway, second language and I'm drunk. Best of luck mates. Also a bonus, one of the wordpress plugins using a sort of a calendar http://i.imgur.com/PJaNHtq.png and yes the script assumed that every month has 31 days which was one of the things that i've had to fix.
No, PHP is just a single process. The OS decides where that process is executed and how much CPU time will be spent on it.
So, by this logic nobody should paste his blog link here right? If I know something, I am writing this and pasting here is wrong? So what should I paste here. Link from php.net which is seen by millions of people daily? Great, you guys are awesome.
Second for Laracasts. Jeffrey Way is a very good teacher. 
No, what people should not do is constantly spam their blog, and only their blog, to 10 different subreddits on a weekly basis. That is what you are doing and that is why you are negatively received and viewed as spam. https://www.reddithelp.com/en/categories/rules-reporting/account-and-community-restrictions/what-constitutes-spam-am-i-spammer
So, do I need to share different different blogs to different communities? 
Reddit is about finding great content and sharing it with others. You can share your own content on occasion, but it can't be the only thing you share. I'm not going to reply to this thread anymore, but I hope you're able to understand what I am saying and can become a good member of this community 
I used w3schools free php course to learn the basics, and then I just started googling what I needed to know. Mostly ended up on stackoverflow. Best of luck! 
You want to set up a local developer environment with a copy of the code base and database. This will allow you to install a debugger with all the bells and whistles, play around with the code, etc. If your clients are using wordpress solutions, then shitty code bases are the rule rather than the exception, in my experience. My solution is to run away screaming and get other clients, because I find wordpress too depressing to work with, but your mileage may vary. If the code base is not wordpress, and the client wants a lot of work done, then it might be worth considering refactoring of the code base. I can recommend the book [Modernizing Legacy Applications In PHP](https://leanpub.com/mlaphp)
Thank you for your feedback! I will fix it asap! Next time it would be more convenient to create an issue, at least for me.
PHP dev of about 10 years here. PHP is commonly thought of as a "just get it working" language. It's why a majority of fledgling companies use it to develop their first webapp (actually, this used to be the case...now JS has become the prevailing language). So yeah, if you're working with startups and jumping from code base to code base weekly, you're not likely to run into much high-quality, well-tested code. New companies just don't have the patience for it, because they don't see testing as an important task in their rush to get v1.0 out the door. Regarding shared hosting, that's another common beast. You didn't mention whether or not the code you work with is usually version-controlled, but if it isn't you should **strongly** advise your clients to do so. If it is, you can download it to your local machine and run it in a VM using a tool like [PuPHPet](https://puphpet.com/). Then you can install all of the dev tools you want.
Laracasts !!! Easily the best learning resource out there. https://laracasts.com/skills/php
Best resource I've seen for database work with PDO: https://phpdelusions.net/pdo
Wouldn't recommend FOSUserBundle, it's merely a user management system which is quite hard to customize.
http://php.net/manual/en/
And i would get away with it if it wasn't for you meddling kids!
Thanks! I was actually thinking about a Desktop application, mapping the nodes of multiple XML files.
I have a question about PHP CodeSniffer: is it possible to check that the filename of a class follows the same casing as the classname? We had the issue that SomeClass, implemented in Someclass.php, would only work with an optimized autoloader. To avoid this, we want to check that the filename is SomeClass.php. I suspect not, since PHP CodeSniffer seems to check the contents of files only, but please correct me if I'm wrong.
&gt; Thank you for your feedback! I will fix it asap! Next time it would be more convenient to create an issue, at least for me. I'm not the person you're replying to, but you learned how to securely use `/tmp` today; surely learning how to keep your users out of harm's way is worth the 30-60 seconds it takes for you to create an issue?
Anyone get phpfmt like plugins working in vscode ... Trying to move over from sublime but formatting doesn't seem to work out right. I use ionic a lot and vscode Rocks for js but is lacking for php.
I really want to create a chatbot using WhatsApp. For Example if someone sends "update" the bot will send updates regarding the project etc. There seem to be solutions but I don't know if they are "safe" and a lot of them don't even work.
It's useable, but I much prefer PHPStorm. It has a tonne of features, prompts and tips to help you. Along with plugins when working with different frameworks, both PHP and JS (I personally use Angular/Vue plugins too). It's really helped! The xDebug integration is amazing, I used it extensively. Albeit, it's a bit awkward to set up and I'm yet to do so for my new job. 
What part of you could possibly rationalize that any part of this code is a good?
Huh? 5 major bugs squashed. 3 methods added Improved compatibility with a version of PHP that wasn't final when the previous RC was released The rest are basically minor bug fixes for things found in the previous in odd configurations, or documentation improvements.
&gt; PHP PANDAS by Dayle Rees (paid) Are you sure? I read that myself only last year online and it was free? https://daylerees.com/php-pandas/ 
&gt; Nothing matches PhpStorm (or, in my case, the full IntelliJ IDEA) You're comparing the most expensive IDE in the market to a free text editior, it's pretty obvious and stupid comparison. 
Do people here actually use Cake PHP? Like by choice? For new projects? I figure it's suited to traditional server-side interactive apps like simple sites with contact forms, shopping baskets. blogs or basic forums - what's the appeal vs Laravel, Yii2 or even Phalcon?
Didn't knew about the free version! Thanks :)
I used is last year, I was doing an intern at a company where they used cake 2.x for everything, for a long time that the backend developer didn't want to learn anything new, so he kept using it. I tried to suggest other alternatives but he was too lazy. I guess this is one reason why people use it. The Cake is definitely a lie. 
I've done it. But maybe I havn't read the reply here or something. Github issues is the best place to keep track of issues, also 'the person' would be credited with an contribution in the cool GH contribution graph if 'the person' would have created the issue. So what exactly is your point?
The Cake is a lie is a phrase from back when I last heard of people choosing to use Cake for a new project.
Obviously a hard copy comes at a cost but the online version is free :) although I sent him $10 anyway after I had read it
it sound stupid but with telegram, you can have the advantage than users can choose to have the result in their phone or desktop (even both). And telegram is also free and has an API to program against. (whatsapp is too closed , which is old-fashioned if you ask me.)
Not even https://plugins.jetbrains.com/plugin/164-ideavim I used vim for 5 years of my life, switched to phpstorm from recommendation and this plugin makes phpstorm exactly like vim with all the features of phpstorm.
Money well spent in my book.
All variations on the same theme ;-) MVC (Model-View-Controller) MVP (Model-View-Presenter) MVVM (Model-View-ViewModel) MVCVM (Model-View-Controller-ViewModel) See: [mv-patterns](https://www.slideshare.net/RaduIscu/mv-patterns)
Or use nginx.
Correct me if I'm wrong, but wouldn't this work? //with DateInterval and DateTime::add $sleep = 'PT1H35M45S'; sleep( (new DateTime('@0'))-&gt;add(new DateInterval($sleep))-&gt;getTimestamp() ); 
I would agree w.r.t Cake 2.x, but remember that CakePHP 3 is an advanced modern framework. If you have not taken time to look at CakePHP 3 (And you like frameworks like Laravel and Yii2), spend some time on CakePHP 3. You won't be sorry! 
Yes they do. CakePHP 3 is an awesome framework that imo surpases Laravel and Yii2 (For various reasons)
I thought it was from portal
That's only the changes between RC1 and RC2. A full list of changes in 3.5 is available in the [migration guide](https://book.cakephp.org/3.0/en/appendices/3-5-migration-guide.html)
Quick question about Google Cloud services like the PubSub queue; how the heck do you monitor it? For example, I'd like to see how many messages are outstanding. The library to do the monitoring is on [packagist](https://packagist.org/packages/google/cloud-monitoring) and has a massive total of 236 installs, which kind of implies no-one is using that library. It also requires installing an extension - which I'm not going to do just for a single monitoring task. Allegedly I could also go to http://pubsub.googleapis.com/subscription/num_undelivered_messages to find that information out, but I can't see how to authenticate against that end-point, and all the links that look like they use to have useful information are now redirecting to the stackdriver site
&gt; Money well spent in my book. I'm not here to debate if it's worth the fee or not but comparing a Ferrari to a bus is just a pointless comparison 
Sorry to break it to you, but Portal is ten years old this year. We're old.
I code in CakePHP for my $dayjob, but code in Laravel for my personal projects. I also wrote ZF1 (Zend Framework) prior to discovering Laravel. The code base that we are developing on in CakePHP is massive and composed of over 3 years of actual work with a team of 3-4 developers. The code base for Laravel is mainly smaller projects (frontend, backend, admin applications, RESTful APIs, etc). Occasionally there are additional developers involved, but mainly for MVP applications. We have plans to transition away $dayjob's code base to Laravel for the 2.0 release, but that is still in the planning phase. So to answer your question, there are a lot of CakePHP projects out there, but I would venture to say that a lot of them are legacy or technical debt related, rather than greenfield deployments of new applications with a free choice of framework. Having spoken to other developers out there, I would say this is a common refrain with others in the industry. As a PM, another (I would say under appreciated aspect) is staffing. It is VERY difficult to find somebody with CakePHP experience over other frameworks out there. We are in the process of doubling our team's size, but finding somebody with significant CakePHP experience is proving difficult.
Thanks for taking the time to write that up. That's much more useful. I hadn't heard anything about Cake in many years and I always thought of it as an especially slow old-school monolithic framework with lots of "quirks" and idiosyncrasies.
I didn't have many opportunities to use Cake3, but each time has been a blast. Is it better than other frameworks ? I wouldn't say that...to me it's more about Cake3 being "opinionated". It takes a little while to get used to those "opinions" but once you got it, everything in the framework makes a lot of sense. To a point you don't need to look at the docs much because everything becomes kind of predictable. Laravel is still my framework of choice, but Cake3 definitely deserves attention if you haven't chosen a framework yet. Or if you want to (long-term) commit to a different one.
Most likely viewers overwhelmed their servers. 
Really? With **all** VIM features? Text objects are supported? Marks? Macros? I could probably get over `:s/foo/bar` since I know php storm has its own search/replace that also works across all files. I might give this a shot, but I'll probably ask a friend of mine to install it on his and vet it there, rather than install it on mine and not sure if I end up liking it :P
Well, Im not sure if _ALL_ VIM features are supported, but prolly 90% of them, and old removed features are supported too.
Yes, i have just tested and it work correctly.. but lol, that's kind of twisted and you still can't do the other way around(seconds to textual time string). This give me the idea: maybe i should extends DateInterval to add the missing functionnalities by merging TimeExpression with DateInterval to get best of both worlds?! thanks u/yannickl88 and u/KillTheBronies
And fallout is 20. And the elder scrolls arena is 23. And ultima iv is 32. Man I'm old.
It's not a pointless comparison because it could very well be that the free alternatives are just as good or at least close enough. That certainly happens with other software, just not in this case, and that's a point worth making. Also, the point I was _specifically_ trying make wasn't the general "it's better" statement. The focus was on concrete reasons _why_ it is better with certain abilities and features. That's the important part. If the reasons why IntelliJ's product is better are all reasons that don't matter to a particular dev, then that dev will be just as happy with an alternative, and that's a good thing. So, again, it was not "obvious and stupid". It was factual discussion that can help others determine if IDEA or PhpStorm is right for them or has more features pertaining to their work. 
&gt; you still can't do the other way around(seconds to textual time string) $string = 'PT1H35M45S'; // 5745 $seconds = (new DateTime('@0')) -&gt;add(new DateInterval($string)) -&gt;getTimestamp(); // '0 Years, 0 Months, 0 Days, 1 Hours, 35 Minutes, 45 Seconds' echo (new DateTime('@0')) -&gt;diff(new DateTime("@$seconds")) -&gt;format('%y Years, %m Months, %d Days, %h Hours, %i Minutes, %s Seconds'); http://i.imgur.com/iZcUNxH.gifv
This is similar to a post by /u/ChadIsACoolAndABuff ... I just started working with PHP this past week and am using the JetBrains PhpStorm IDE. Prior to this, I have been working with Rails using another JetBrains IDE, RubyMine. After some initial wailing and gnashing of teeth, I became very comfortable with the Rails RSpec and Cucumber test environments. With Rails, I can touch my code and then launch actually launch the server from my IDE source directory and play with things or run automated tests with RSpec. I can set breakpoints in my Rails code that get triggered when pages load and problems are encountered in the model, view or controller that is driving the page. I can't see at all how to get the same kind of testing into PHP. I suppose this is because Rails relies on a local webserver (e.g. WEBrick) that is launched right from the source directory. I just can't see how to set breakpoints for testing in the actual PHP code that is running. The best I can do is mirror the code that Apache is set to and upload it to the correct repository whenever I tinker with it in my IDE. Am I being stupid here? Is there someway to test things in the "Rails/RSpec" fashion in PHP
Thank you. Yes that's a great alternative but unfortunately everybody in this country uses nothing else but WhatsApp. Facebook messenger is very far away second. I got the bot to work in Facebook messenger and e-mail (dumb but people actually use it lol) , it's only the number one used messenger app that eludes me. 😂 Cheers. 
PHP also has a built-in web server. Use phpspec and Behat, pretty much the equivalent tools you are looking for.
I got tired of limitations of Symfony Event Dispatcher, so I built event dispatcher which better fits into application domain. Major pain which this dispatcher solves is possibility to typehint all the required data in event listener https://github.com/ostrolucky/app-event-dispatcher
Forgot to mention, xdebug and phpstorm, you can set breakpoints, step by step debugging, evaluate code, watch variables, etc.
It can be a pain to write certain rules. Consider this fragment: array_map(function($obj) { return $obj-&gt;property; }, $input) This sort of thing is common and for snippets this short it's fine (in my opinion) to do it on one line. But when it exceeds some threshold I want it on multiple lines, like so: array_map( function($obj) { return $obj-&gt;property; }, $input ) It's easier to format it myself than to write rules for this sort of thing. Note that it's been years since I looked at the available rulesets of various code style tools; I would hope that this one would be available now as some sort of a general function-call-is-too-long rule that interacts nicely with a function-literal rule. My point was really to demonstrate a specific problem which was easier to format myself than to write a rule to format it for me.
Not really a fan of unbounded goroutine spawning (ie: `go rpc.ServeCodec(goridge.NewJSONCodec(conn))` inside of the for loop in the example, generally very bad practice) and having the tests inside of a separate `tests` directory is pretty un-idiomatic, but other than that it looks pretty slick. I have one recommendation though -- using `github.com/sirupsen/logrus` for logging instead of the stdlib `log` package. It's pretty great. Also, /r/golang would also find this interesting. Probably want to cross-post it there.
I hope they bother to fix the documentation, too.
Thank you for your feedback. My goal was to comply to native net/rpc package so I had to use the same tools as original implementation. Please disregard goroutine spawn implementation as it based on official net/rpc example for simplicity. P.S. Tests have been done from PHP end, so it's classic PHPUnit setup. I might need to write a separate test suite for go specific code for redundancy.
Cross-post has been made, thank you for your suggestion!
I think you missed the part where *duration* and *interval* are synonyms.
If someone is a good dev and knows framework X well, then it should be no problem getting them going in framework Z. I know CI2 and Cake 2/3 very well, but have never touched Laravel. I assume I'd be up to speed in about 2-3 months of working in Laravel. I think Cake is great. Documentation is good. I can write code quick in it. There are parts of it I felt were bloated or useless when I first started, but as my skillset grew in it a long with projects I worked in I found these "bloated" parts to be quite useful in my code. After having been to the most recent Cake conference in NYC. I can also tell you that the Cake core team is very smart and dedicated. Great bunch of people.
Cake 2 is going into sunset mode, I think it was released around 2010 or 2011. They just did their final release on it. It will get security and maintenance releases for the next 18 months before going unsupported. Cake 2 had its problems no doubt. Cake 3 is much improved and Cake 4 is being planned now. I wouldn't have begun using Cake 3 if they hadn't made the improvements they did.
I'm not a native english speaker. At first, i thought that you were right about duration and interval being synonyms but i found this : [http://wikidiff.com/interval/duration](http://wikidiff.com/interval/duration). Now i'm not sure anymore...
Ok, I will check it out. Thanks 
I am using PhpStorm, but the code I am looking at on PhpStorm mirrors what is on the server. But you and someone else told me that what I want to do can be done, so I assume it can. 80% of accomplishing something is just knowing it can be done :)
Having used both CakePHP's documentation and Laravel's documentation, I would give the nod to Laravel on that one. Even my dev team will link to the API docs instead of the CakePHP "book" for certain features. I liken CakePHP to ZF for most functionality. It's there but only if you want to use it and it is loosely coupled. Heck, CakePHP only recently took over the Phinx project and made it a core. That certainly is decoupled, if you ask me. :)
&gt; Why PHP 7? The real question is why not 7.1. Without nullability, return types are a lot less usable.
Joomla is still going?
7.0 is in Ubuntu 16.04 which is a LTS release. That's probably the reason for 7.0. But, they also didn't specify .0 or .1 in the post so who knows?
What I mentioned is probably what I use most of the time. It's really hard to just know w/o using it, though. I feel like every time I try to tell somebody my vim tricks I can never remember all of them, but then I'll start working and be like "oh you can do this! And this! OH AND THIS!"
Honestly, we hadn't specified a specific version yet. Based on numbers though right now I'd call 7.1 a stretch if we made the decision today (we're playing a bit of a balancing game with what users are actually using versus what's actually available, and right now roughly 10% of users on the current minor branch are running PHP 7.1). So just doing `~7.0` is going to be a good start and be enough to keep us busy for a little bit. My guess is we'll look at it as we get closer to beta and lock to a specific version close to then.
That was my first thought too.
A lot of the API isn't in a spot to be type aware right now, so even if we started adding return types a lot of them would either be for class objects or strings. A lot of form data hasn't historically been saved in the correct type (i.e. form fields aren't told to store integer options as integers so they're stored as strings) also, and we don't have ORM functionality so there isn't anything to cast data from the database into the desired type. So it's a long road to get to a point where we can reliably be type safe, but it's a work in progress at least.
Due to unfortunate circumstances, Joomla has not yet met its demise and is therefore still going.
Thanks! I've rewritten TimeExpression based on your example using DateInterval. Now i can do all of this: **UPDATE:** TimeExpression do not anymore extends directly DateInterval and added method toDateInterval() instead. (as suggested by u/djmattyg007) echo (new TimeExpression(125))-&gt;toSeconds(); // 125 echo (new TimeExpression("2day"))-&gt;toSeconds(); // 172800 echo (new TimeExpression("4min30sec"))-&gt;toSeconds(); // 270; echo (new TimeExpression("4min30sec"))-&gt;toMicroSeconds(); // 270000; echo (new TimeExpression("12 days 22 hours 38 mins 54 sec"))-&gt;toSeconds(); // 1118334 echo (new TimeExpression(3705))-&gt;toString(); // 1 hour 1 minute 45 seconds echo (new TimeExpression('02:40:40'))-&gt;toSeconds(); // 9640 echo (new TimeExpression('4:30'))-&gt;toString(); // 4 minutes 30 seconds // using DateInterval (ISO8601 interval spec) echo (new TimeExpression("PT1H35M45S"))-&gt;toSeconds(); // 5745; echo (new TimeExpression("PT1H35M45S"))-&gt;toString(); // 1 hour 35 minutes 45 seconds; echo (new TimeExpression("PT1H35M45S"))-&gt;toString('%y Years, %m Months, %d Days, %h Hours, %i Minutes, %s Seconds'); // 0 Years, 0 Months, 0 Days, 1 Hours, 35 Minutes, 45 Seconds // adding / subtracting $datetime = new DateTime('2017-08-14 11:00:00'); $datetime-&gt;sub((new TimeExpression('25 min'))-&gt;toDateInterval()); echo $datetime-&gt;format('Y-m-d H:i:s'); // 2017-08-14 10:35:00 $datetime = new DateTime('2017-08-14 11:00:00'); $datetime-&gt;add((new TimeExpression(1501))-&gt;toDateInterval()); // 1501 seconds = 25 minutes, 1 seconds echo $datetime-&gt;format('Y-m-d H:i:s'); // 2017-08-14 11:25:01 // getting ISO8601 interval spec echo (new TimeExpression('2 days 1 sec'))-&gt;toIntervalSpec(); // P2DT1S; echo (new TimeExpression(1500))-&gt;toIntervalSpec(); // PT25M; [Link to source code](https://github.com/peakphp/framework/blob/df961f6fa651dc542a61135273ed2cb9adbf739b/src/Common/TimeExpression.php) [https://ugc.kn3.net/i/origin/https://media.giphy.com/media/g16l5RFMetIvm/giphy.gif](https://ugc.kn3.net/i/origin/https://media.giphy.com/media/g16l5RFMetIvm/giphy.gif)
Just be careful when you define public APIs not to bend your design to accomodate 7.0's return typehints without nullability. As this is already an obsoleted restriction. Best to use PHPDoc in those cases until you can require 7.1+.
PHP 7+ scalar typehints don't require exact types. If you pass int to (string $foo) it casts it to string. Exact types are required only with declare(strict_types=1), but I'd strongly recommend that you avoid this mode. It's quite half-assed and counter-intuitive, considering everything else in PHP.
Are you referring to VSC or PHPStorm when you say 'it' in your second sentence? Thanks!
So your error gave you a great hint to what the problem was. After you define $query, you do not have a semicolon after the assignment and before `$exe_query=...`. Your error was saying you have an unexpected variable and there was an error with your syntax. Add that semicolon and that problem should resolve.
You're likely going to have an issue before the $found_num_rows. That being said, this query is really dangerous. You aren't sanitizing your inputs, leaving you open to [sql injections](http://php.net/manual/en/security.database.sql-injection.php) at the username parameter. I'd really recommend you give that link a look through and update your code as needed.
can you rewrite the code (line) please, because I'm new to the PHP coding
* This is a question for /r/PHPhelp * Why an all caps title? * You can format code with 4 spaces. More formatting tricks [here](https://www.reddit.com/r/raerth/comments/cw70q/reddit_comment_formatting/). * Never store plaintext passwords. Please use [password_hash](http://php.net/manual/en/function.password-hash.php) at the very least. More [here](https://www.sitepoint.com/hashing-passwords-php-5-5-password-hashing-api/). 
so is there any already-coded login/log out/sign up form that I can get from the internet and its void from any kind of SQL injection? if you know something please list it and thanx for you help so far
If you want to learn something, better rewrite it yourself.
It looks like you need help with your caps.
I just started this week with php And I did I saw this tutorial (many of them) on youtube And it looked very easy, but when I actually started coding and hosted database locally, i had so many problems So I said i should ask a php community about this problem 
Yes, a bit like a derailed train that hasn't yet given in to friction and gravity.
Sadly.
Because it is easy and it works for 90% of people.
Adding `declare (strict_types=1)` only affects things *in that file*. If they decide to add the declare it doesn't affect you as a consumer of that file.
The absence of nullability in return types is the least of Joomla's problems.
And you know, everything else.
Oops, sorry. I mean PHPStorm! :) 
Memo to all Joomla developers: you shall cease thinking about anything, except your biggest problems and make trivial design mistakes in all other less important areas. Thank you /u/phpdevster.
See, that's the theory. In practice, it's easy to be **affected if you're NOT in that file**: // Foo.php declare(strict_types=1); function array_square(array $ints): array { $result = []; foreach ($ints as $int) { $result[] = square($int); } } function square(int $int): int { return $int * $int; } // Bar.php $squared = array_square(["1", "2", "3"]); // Oops... TypeError It's also easy to **NOT be affected if you ARE in that file**: declare(strict_types=1); function array_square(array $ints): array { return array_map(function (int $int): int { return $int * $int; }, $ints); } $squared = array_square(["1", "2", "3"]); // Oops... TypeError... NOT THROWN AT ALL So, it's one thing to repeat memes, and another thing to know how strict_types actually affects real-world code. It's implemented in a *half-assed way*. It's unreliable, it's misleading, and can cause fragile, buggy code. **Don't use strict_types**.
A reasonable analysis of behavior, but the conclusion does not follow. If you buy into the philosophy of strict types at all (which is an entirely different question not addressed here), you will appreciate them even if there might be edge-cases where they are not enforced as one might expect. In the end you will still get *stricter* type checks.
&gt; If you buy into the philosophy of strict types at all (which is an entirely different question not addressed here) I buy into it in a language designed around it, where strict types add stability, predictability and performance. In PHP considering you have no clue when you query an SQL table, if you'll get back your numbers as float/int or string, and the same thing applies for request input and many other I/O and internal operations, strict types is just turning your codebase into a minefield. &gt; In the end you will still get stricter type checks. When an interface is documented as "expecting array of int" and the rules in PHP say this int can be a numeric string, then getting a type error is not "stricter type check", it's just "an incorrect TypeError". There's no saving grace to having two type system rules mixed sloppily like this in one language, a language that happily casts types at seemingly innocent operations, for ex. `PHP_INT_MAX + 1 = float`. You can't just slap a contextual patch of "strictness" on a language that has mountains of code (in core, extensions, and userland) operating on a different basis. I like strict types as a general notion in language design, but what the fans of PHP's "strict_types" hack don't seem to understand is that a type system is only as good, as it's applied consistently by the platform and ecosystem. PHP's strict_types is none of that. It's worse than nothing, it's primarily a cause of unexpected surprises, and I feel that if people can't see that, they should not be very certain in their engineering skills. For the record, I always put "use strict" in my JavaScript, and understand the benefits of it. Thing is, the changes applied by "use strict" have a truly local effect without traps, loopholes and inconsistencies the way PHP's "strict_types" have. What hurts to see is that people religiously take the positive attitude towards "use strict" in JS (a well-designed feature) and promote heavily "strict_types" as a best practice, a good thing for your code - same as JavaScript's "use strict", without even contemplating the drastic differences in the engineering quality of both features. The result will be that half the libraries on Packagist will be "strict_types" and the other half won't be. And as our data flows in and out of "strict_types" code through a mix of such libraries, it'll occasionally bomb when it doesn't have to, or not bomb when it *has* to due to the loopholes I demonstrated above, and result in unstable or data corrupting apps. It's a **worst case scenario** for writing stable PHP code with predictable behavior. What a god damn nightmare.
I haven't heard this name in a long time...
I wouldn't extend `DateInterval`. Instead, have a named constructor `fromTimeInterval` and a method `toTimeInterval`.
Sorry, are you actually defending Joomla's architecture and UX right now? Have you never worked with Joomla or something? Of all the reasons NOT to use Joomla for a project, lack of requirement for a version of PHP with nullable return types should be the last.........
&gt; I buy into it in a language designed around it, where strict types add stability, predictability and performance. In PHP considering you have no clue when you query an SQL table, if you'll get back your numbers as float/int or string, and the same thing applies for request input and many other I/O and internal operations, strict types is just turning your codebase into a minefield. That is precisely what I was alluding to there. There *are* good reasons why one might want to be wary of strict types in PHP (in particular on the application rather than library side), I just don't think that your original comment was one of them. &gt; When an interface is documented as "expecting array of int" and the rules in PHP say this int can be a numeric string, then getting a type error is not "stricter type check", it's just "an incorrect TypeError". There is no "array of int" type in PHP. PHP does not specify what an `int[]` type in phpdoc means and indeed this will heavily depend on the implementer, *regardless of strict types*. Some people who subscribe to defensive code will explicitly verify the types in the passed array. Most people will not check the type at all (which is quite different from weak type checks -- that's the one behavior you will almost certainly not see). And then you get the shades in between, where strict type assumptions are introduced incidentally, such as through use of type-safe comparison operators. In any case, I have my own doubts regarding the introduction of strict types, but at this point in time withhold judgement on the practical implications. There are not enough libraries using strict types to assess the wider interaction with the ecosystem at this point. Of course, whatever effects there might be are likely not going to live up to the degree of your hyperbole ;)
I've worked with WordPress. Nothing can phase me now.
&gt; There is no "array of int" type in PHP. PHP does not specify what an int[] type in phpdoc means Correction, it wasn't defined. But now, when scalar typehints were added to PHP, it is defined. The expectation for something typehinted `int`, `int[]`, `array&lt;int&gt;` and so on is that the `int` part would be what an `int` typehint in PHP7 accepts. And so when a "non-strict" code calls into "strict" code which verifies the items through an indirect "strict" typehint: boom, the bomb goes. &gt; Of course, whatever effects there might be are likely not going to live up to the degree of your hyperbole ;) To me, "strict_types" is the "magic quotes" of PHP 7. You can find this funny, but I think it's that bad. PHP did survive magic quotes, it will survive strict_types, but poorly thought-out decisions like these contribute to PHP being one of the most ridiculed and disrespected computer languages in the industry.
Have you worked with drupal? D8 is better but god I hate how popular it is.
I don't feel like I'm following here but am interested, could you explain &gt; affected if you're NOT in that file Does this literally mean, if you create a new php file the behavior is different? *Just reread and saw comments damnit I'm a moron*. I'm still need to work through it but damn I'm stupid.
If it existed, there's legacy code still running it somewhere....somehow. Kept alive by programmers dying a slow death in a dead end job.
&gt; With Joomla! 3's minimum PHP version being PHP 5.3.10 ... They are quite behind on the ballgame. &gt; we are comfortable with the rate of adoption in our community of PHP 7 [...] Again, assuming Joomla! 4.0 releases in 2018 Joomla! showing it's about following, not leading. All major frameworks are pushing 7 this year, if they aren't already. Heck, even Wordpress is PHP 7+ only. Joomla! is behind, playing catchup. I'm not surprised Joomla! is still around: they've already been more of an enterprise CMS. And, as we all know, enterprise level apps are extremely, extremely slow moving.
The overhead of having to call `toDateInterval` when passing it to `DateTime` methods isn't that great. By extending from a class in the PHP core, you're at the mercy of the PHP developers when they are adding new functionality to the class. For example, if they add a new method with the same name as a method in your subclass, but with different parameters, your code will stop functioning correctly.
I'm still supporting Drupal 6 dude. Been trying to get them to pay for an upgrade for 3 years
&gt; even Wordpress is PHP 7+ only That is definitely not the case, the [WordPress minimum version is still 5.2.4](https://wordpress.org/about/requirements/), although we recommend 7.0+.
Snark aside, congrats Joomla!, you're taking a big step. Here's hoping you leverage this as an inflection point and make this a turnaround.
This is good stuff, man. I'll reference the `startCMDLoop` body on `PHPTv\ PHPTv` on my future CLI tools.
i pruned a green php7 binary for centos7/ubuntu16.04: https://github.com/gouchaoer/pocketmine-php70
Well, except when you're using callbacks.
Good advice, i updated the class to take into account this.
For what purpose? [This is probably the resource you're looking for](http://php.net/manual/en/faq.passwords.php).
bcrypt with appropriate cost factor would probably be a safe choice
Just don't roll your own unless you have a degree in cryptography, and I mean that literally. If you're going to use it for passwords, then the built-in password hashing functionality is the way to go.
So I went searching... [whatsapp-gateway](https://www.whatsmate.net/whatsapp-gateway-api.html) Don't know if this is useful, but hey... the thing interest me ;-)
It'd take a complete (non-backward compatible) rewrite to fix that. They have the same issue as Wordpress - baggage from years of terrible development decisions by people who have no idea what they are doing when it comes to OOP and modern PHP standards.
I used Cake 2 in my old job as a crap "senior" developer convinced management that it was the way to go several years ago. Sadly they then refused to keep with the times, and only when devs started leaving and complaining have they recently started looking at moving to Laravel. Even then it wont be for years. Thankfully I left and now get to work on Laravel (all be it a slightly out of date version for the time being). That being said, I hated Cake 2 to begin with but once I knew it pretty much inside out a lot of what it was doing was really good, but there was a number of "why the hell have they done that" moments, and there are a ton of really bad packages available. A lot of the biggest issues like the shit ORM have been fixed in Cake 3 and it does sound like it's had a massive turn around. The only thing I dislike is how it's core development is done. It feels like its made specific for the company that owns it, and if you ask for something they dont need, you're pretty much told to bugger off. It's got a very closed development philosophy compared to some other opensource projects.
&gt; but remember that CakePHP 3 is an advanced modern framework Just to clarify, cake 3 is a massive improvement. But under the hood there's still tons of cake 2 code. Cake 3 was not a full rewrite, more of a refactor and replacement of the ORM.
Any idea where I'd find the sunset announcement? Couldn't find it on their site.
I'd tried a few of these out a while ago and found: - Rasmus' one is pretty basic, not ideal as it misses a lot - PeeHaa/OpCacheGUI was really buggy, but I believe it'd only just been released so has likely improved a ton. - amnuts/opcache-gui was easily the best. Provides all the info you need and has reset options as well as live monitoring.
Don't roll your own even if you have a degree in cryptography. There is enough great salt/hash method you don't need to create your own.
Oh dear `$records = $client-&gt;query(true, false, null, null, 'contact');` Maybe think about providing a convenient query object/builder.
Why should an external package need more maintenance than butterCMS?
brcypt's even on it's way out with the advancement of specialized FPGA farms that are really good at it. scrypt is an alternative with the trade off that it's memory intensive as well. 
Negative advertising is still advertising. Recently I've read about Joomla's integration of the sodium security library. Now I read about PHP 7.0 as minimum version. These are good steps forward for Joomla. Other PHP CMS should do the same thing (do you hear me Wordpress/Drupal developers?)
This is an advert for ButterCMS rather than the product comparison it claims to be. 
Do you have a link or source on this? I'd like to read into this a little bit.
password_hash() is the only function you need, don't use anything else. I have a more detailed write up here: http://mstd.eu/index.php/2016/07/01/how-to-correctly-has-passwords-in-php/ 
https://www.tarsnap.com/scrypt/scrypt.pdf
Actually, you also kinda need `password_needs_rehash` and `password_verify`.
;) You do yes but that wasn't the question :p
&gt; Correction, it wasn't defined. But now, when scalar typehints were added to PHP, it is defined. The expectation for something typehinted int, int[], array&lt;int&gt; and so on is that the int part would be what an int typehint in PHP7 accepts. I can see where you're coming from here, but I think you're just deluding yourself by thinking that way. That's how it might ostensibly work, but certainly not how it actually works. As I said, the cases you are going to realistically see are explicit strict checks or no checks, but nobody is going to bother to explicitly implement weak type check/casting behavior on their inputs. And "no checks" will devolve into "some ad-hoc checks" depending on the specific code used. Actually implementing `int[]` with weak type semantics is quite ridiculous and the reason why PHP does not have array types: if the array contained non-integer values you'd have to create a type-casted copy. Weak types essentially enforce that if PHP is getting array types, it's going to be in the form of reified array generics. As a historical note, regardless of what you think about strict_types, you need to realize that this was the only way we were getting scalar type annotations in PHP. There were a lot of iterations on that proposal and it is quite unlikely that either a purely weak or purely strict implementation would have achieved the required majority.
Good thing "wikidiff" is the authority on the English language.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This is more or less off-topic as I don't want to comment on the discussed point, but: &gt;but nobody is going to bother to explicitly implement weak type check/casting behavior on their inputs. Here! You found one now. As I have to deal with legacy PHP code on a daily basis, I cannot use strict checks (like `===` and `is_int`) as much as I like, but I find the language's weak type checks and coercions retarded and dangerous, hence I implemented an own set of checks to compare weakly in a sane manner.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Why my reddit is automatically getting deleted.
Why my post is considered as a spam ???
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Cake 3.0 yes, but each minor release is working on replacing the legacy Cake 2 code. For example, 3.4 has replaced the legacy style request/response objects with PSR-7 compatible ones.
[removed]
[Here](https://bakery.cakephp.org/2017/06/23/upcoming-cakephp-roadmap.html) you go :) 
Awesome, thank you :)
&gt;The only thing I dislike is how it's core development is done. It feels like its made specific for the company that owns it, and if you ask for something they dont need, you're pretty much told to bugger off. It's got a very closed development philosophy compared to some other opensource projects. I am very interested where you get this idea from? I am a core developer for CakePHP and I do not work for "the company that owns it" (I assume you are referring to CakeDC?). In fact, of the 20 odd official core developers, only 2 have any form contact with CakeDC, and neither of those 2 are directly involved in coding. The most active core developers don't even use CakePHP in their day jobs (Some don't even use PHP!), but they do use it for most of their personal projects.
To be fair, we started pushing for our new major version in 2015. Twice the effort got sidetracked and diverted into something that ended up being nothing. This time around, the effort is finally staying focused on a releasable product. The two years lost to politics and egos really hurt as it relates to getting a new version with a PHP requirement above 5.3 out the door. On the other hand though, if we had gotten that first iteration out the door, it probably would have shipped with a 5.5 minimum and people would use that as ammo for bashing Joomla. And to me, being both a project lead in Joomla and a user and consumer of CMS and framework packages, I honestly don't think it's a completely terrible thing that the CMS' move a little slower as it relates to being modern. Primarily, they have a different target user base with different skill levels, eating some of the technical debt with not bumping the PHP minimum every year is one of those trade offs (nothing stops developers building sites on PHP 7.1 with Joomla, there are much more technical sound reasons to not use Joomla than something like an older PHP minimum). I will say though, doing my research for the blog post, I was surprised to note 84% of users on the current minor series are running PHP 5.6 or 7.x; I expected that number to be much lower.
Hmm i thought it would be the other around due to scrypt being used in cryptocurrencies and heavy mining rigs.
are you serious or is this just a random rant?
Laravel, Documentation crappy??? If you want something with a form builder https://olddocs.phalconphp.com/en/3.0.0/reference/forms.html
very funny... very helpful comment... doesn't look like sarcasm at all... 
APIs don't have forms... how can people use them?
Just use php built in password_hash(), veryfy, and needs_rehash() functions. With PHP 7.2, you can use Argon2 as well with password_hash(). . 
&gt; Your are fired! If my boss wrote like that I'd leave long before I got fired
Laravel is the most popular framework, see e.g. [1]. Thus, unless all the laravel users misjudge the available frameworks, this might mean that you did not put too much effort into learning Laravel, you're not experienced enough to see the benefits of Laravel or Laravel just does not fit your needs. Documentation for forms/validation, Database Migration, Querying: - https://laravel.com/docs/5.4/validation - https://laravel.com/docs/5.4/migrations - https://laravel.com/docs/5.4/queries But maybe you want to start from the beginning: - https://laravel.com/docs/5.4/structure [1] https://coderseye.com/best-php-frameworks-for-web-developers/
It's your OS that will be handling this and not PHP itself. It's not as simple as saying I have 4 cores and PHP will run on each of them. There's every possibility all 4 of your PHP processes will be running on the same core, it all depends on how your OS manages the processes and what else is running. If you're running PHP on Linux (which is the most likely case), Linux splits your processes across what it calls "threads". Each core of your CPU could have multiple threads running on a single core. How it distributes these threads I'm not entirely sure of because it's not as simple as "oh this core is free let's use it" because that core could be on a 2nd CPU you in the system and it might be more performant to simply wait for its current core to become aviable. In short, it's incredibly complex and something that we thankfully don't have to worry about.
Probably belongs in r/magento2
I am a big fan of Symfony and prefer it over Laravel, but this is just ignorant ranting.
Here is something you could greatly benefit from reading https://www.gnu.org/software/indent/manual/indent.pdf
Yes, but if there's no early access version you can't use it. I don't there are many gaps without EA but just something to be aware of.
You know, if you want a framework with symfony's features, with the same philosophy as symfony, with the same kind of documentation as symfony, without having to learn anything not like symfony, why not using symfony ? And the ranting tone doesn't make us want to help. &gt; I had to find in stackoverflow how people discovered to create migrations for use related entities in laravel. Or they could have written "migration" in the search bar. Or just took some time to skimthrough the doc. --- &gt; Especially something like this: https://symfony.com/doc/current/form/form_collections.html Why not pulling it as a [composer package](https://symfony.com/doc/current/components/form.html#installation), if you really want it ? [Here](https://github.com/webmozart/standalone-forms) is a standalone example. ---- Symfony's form (or yii's equivalent, etc.) doesn't exists in Laravel base install. A few years ago, Laravel had the Form and Html library in it's core, but it was moved to a community package [here](https://laravelcollective.com/docs/master/html). It only deals with the printting of the form's html, and it's hydratation with a model's values. Didn't use it in 2.5 years. Thoses all in one form thingy often get in the way or battle with front end validation and skins, and don't save that much keystrokes. That, and the fact that frontend framework don't always need server rendered forms. For the validation parts, you'll have to use the [validation features](https://laravel.com/docs/5.4/validation), either with the controller validate function, a custom validator, or a FormRequest (which I usually use, and is very nice for api). For persistence, eloquent is your playground. Just learn it.
That will be in the next version, actually. The history of this repo comes from: - Building an SDK in Go - Porting that SDK to Ruby - Porting that SDK again to PHP The problem is that PHP doesn't have optional _named_ parameters and doesn't support method overloading. We went with the full interface to just get a 1.0 out the door, but a builder will be coming soon ;-)
Getting the hang of PHP. Still tripping with dollar signs and `-&gt;` though. Just a few questions: 1. I was instructed to install XAMPP, but being unfamiliar with the software made me install the `php` and `mysql` CLI separately instead. At what point would an *AMPP be needed for someone starting out? 2. Is there a PHP framework that comes with a scaffolded admin interface, something like in `django`? Or do I have to go with a CMS? 
Docker is spiteful software and the company behind it are the most anti-consumer I have ever seen (apart from apple, they are the worst for consumers). The performance on mac is terrible, despite a lot of issues about it they refuse to fix the performance issues. Docker completely doesn't work on windows, Despite tons of issues about it docker says fuck you windows users. Docker is the most unfriendly developer software, I don't understand why people toot their horn. Did you you know I don't like docker? P.S: https://github.com/kontena/kontena looks nice
Although this may just be a rant post I also miss that Laravel doesn't have a dedicated form component. I'm not talking about front end forms necessarily but more the transformation layer, oop form builder and validation integration. 
I use it for my dev env. I don't think I've had any more problems than I did with Vagrant. Windows does throw up a few fun little problems now and then, but nothing I haven't so far overcome. docker run --rm -v /$(pwd):/app composer/composer update Is just lovely, no need for PHP to be installed on my windows machine
Haha, coderseye.com. Not even symfony is spelled correctly haha :D
I think it runs pretty ok now, just not as good as linux but seeing as they use linux containers ;)
You don't need named parameters or method overloading for my suggestions. Its just nearly unreadable what is going on with 5 parameters of bool/null/string... For your docs it would already be helpful if you provide variables with good names: ```$data = true; $client-&gt;query($data);```
While you may not of had many issues, there are alot of issues. For 1, if you have windows you MUST use Hyper-v, this is not an option for many people including my self as we have made a choice of our favourite or prefered VM, being either VMware or VBox (some people like Hyper-v), these can not run while hyper-v is installed. While docker works on mac and linux using VMWare or VBox, will not provide these drivers to windows users. Another, If you use mac on any large project, HA, good luck even loading the first page. dockers mounting system on mac is terribly slow, again, Docker will not provide any better way of mounting, fortunately this can be solved by some 3rd party addons. but then you have to rely on them being updated and not broken by docker updates.
A clarification, `"$25"` won't be interpreted as a variable because variables aren't allowed to start with a number. It will be interpreted as a string the same way as `"15%"`, and since the first character is non-numeric, it will be considered `0` when converted to int. If it were `$x = 3 + "15%" + "$foo"` then it would work the way you described originally.
I'm thinking the consumers that put $300 billion of extra cash into apples balance sheet will disagree with you a little. Maybe they're not the greatest for developers. Maybe they're not the best for network engineers. But consumers love them. 
&gt; Now, the documentation doesn't talk about creating a migrations for related entities on these different situations. You kinda set it up like you would do without orm... If you only used database arrays, you would do the same. And it actually show you the way : [eloquent#introduction](https://laravel.com/docs/5.4/eloquent#introduction) It says : "Each database table has a corresponding "Model" which is used to interact with that table. Models allow you to query for data in your tables, as well as insert new records into the table." It implies that you need a table for each models. It even show you how to use artisan to create the model and its migration in 1 command `php artisan make:model User --migration` [eloquent-relationships#one-to-many](https://laravel.com/docs/5.4/eloquent-relationships#one-to-many) Second paragraph remind you how to set your foreign keys. &gt; It doesn't speak about adding related entities, for example adding new Items in Orders and saving it. [eloquent-relationships#inserting-and-updating-related-models](https://laravel.com/docs/5.4/eloquent-relationships#inserting-and-updating-related-models)
I initially used docker-toolbox as I needed to run it alongside Vagrant with virtualbox. When I made the switch to using hyper-v it was a total nuisance as I had to restart every time I wanted to switch between VM and Docker. (docker-toolbox is how you docker on windows using a VM btw https://www.docker.com/products/docker-toolbox). It's interesting you say its crap on a Mac, as it's hard to find any docs or tutorials that don't assume you are using a mac. The front end devs seem ok using it on their Macs, but its not a large project. The biggest PITA is trying to get it to work with PHPStorm. I've tried about 50 times. Never even got close. That is annoying.
Ohh yeah that too, but thats an issue with PHPStorm not docker. I never got phpstorm to be able to manage the docker-containers, but then the commands aren't hard, `docker-compose start` `docker-composer stop` easy to remember. But would be nice is PHPStorm worked out the box to use docker like it does with vagrant.
Consumers love them, because consumers love basic, simple and bullshit. Key example from apples site: https://www.apple.com/uk/macbook/ They make the title "Light, years ahead", this is such bullshit that is genius. A dual core 1.2ghz mobile processor is somehow years ahead??? I read a blog post somewhere that this models processor is worse then their last and yet more expensive. thats how much of a scumbag company apple is. and consumers love them because they are belligerent to the fact apple make "great" products. I could get in to a whole rant with more information about how apple is a terrible company but it is covered all over the internet by almost every tech blogger. Many people have said, Apple died with Steve Jobs. How ever, I use an iMac pro at work, and its pretty good. Though I will not fight tooth and nail to defend apple. 
Oh, my bad. I misinterpreted the requirements page. I read that final paragraph has needing to use a legacy version of WP to support prior 7.x. I did look it up, and was rather shocked, too, to see that. But alas, my dreams were shattered. WP is even farther behind. :/
As another user already showed they are absolutely in the documentation. As that same user said: do it just like you would with any other application. The database structure won't be different just because it's a different framework. The problems you're having have very little to do with anything other than your inexperience.
&gt; Docker completely doesn't work on windows, Despite tons of issues about it docker says fuck you windows users. Docker works fine on windows. &lt; Win 10 you need to run it inside a VM. Win10 + has native support for Docker. ~~Hell, you can even run it in WSL if you really want.~~ Edit: But yes there is that annoying ass Hyper-v stuff that prevents VMWare/Virtual Box from running at the same time. 
&gt;It doesn't speak about adding related entities, for example adding new Items in Orders and saving it. Are you sure you actually read through all of the docs? Saving related entities is covered pretty thoroughly in the [relationships section of the docs](https://laravel.com/docs/5.4/eloquent-relationships#inserting-and-updating-related-models). The table structure for each type of relationship is covered in the relevant section further up that page and the migrations docs will tell you how to write the required migration.
&gt; On the other hand though, if we had gotten that first iteration out the door, it probably would have shipped with a 5.5 minimum and people would use that as ammo for bashing Joomla. Here's my opinion: you're better off having "moving forward" negative feedback than "behind the times" negative feedback. In this day, being compatible with 5.2.x is considered a major negative (e.g. Wordpress). &gt; nothing stops developers building sites on PHP 7.1 with Joomla, This is a big deal, and worth noting you should remove 5.6.x as it's nearing EOL as well. I'm at a project now who are stuck on 5.6 because of old Code Igniter 1.x base that's screwed them over. They cannot run on 7 because of CI. &gt; I was surprised to note 84% of users on the current minor series are running PHP 5.6 or 7.x; I expected that number to be much lower. Honestly, I'm not. I've personally been involved in updating every client I've worked on in the last 3 years to 5.6, and prep for 7.x. The words "EOL" for earlier versions have a big impact on corporate upgrades. Now, I'm busy pushing them onto 7.x. They are learning PHP moves faster than other languages. There has been _huge_ push in the PHP community to get people to 5.6 and up to 7. Every project I say "End of Life" and make them upgrade. I don't mince words. I use security to scare them into updating. ;) (admittedly, 5.6.x is still under security patches until end of 2018 -- I don't tell them that. lol)
I feel your pain... One of my clients are stuck on CI 1.x and unable to update PHP because of it. I did get them to 5.6 a couple years ago. Now I'm back helping them, and having to look for some way to get them PHP 7. They have *a lot* of technical debt. And part of my role is to focus squarely on that.
&gt; The biggest PITA is trying to get it to work with PHPStorm. I've tried about 50 times. Never even got close. That is annoying. What exactly are you talking about? Managing Docker from PHPStorm? If so what issues did you run into? One thing I had to do to manage Docker on a remote server is change Docker's service configuration(RHEL) to bind to a tcp socket rather than a systemd socket(fd://) in /usr/lib/systemd/system/docker.service. Changing `ExecStart=/usr/bin/docker daemon -H fd://` to `ExecStart=/usr/bin/docker daemon -H tcp://0.0.0.0:2375` did the trick. PHPStorm just needs the host/ip and port and it's good to go. I've not tried to make that change on a different platform though so YMMV.
&gt; The performance on mac is terrible Did you tried their cached/delegated volumes? As for "fixes", there nothing really they can do, this is limitation of apples virtualization solution. &gt; Docker completely doesn't work on windows Never had any issues with docker on windows (except conflicts between virtualbox and Hyper-V, but if you use docker for windows, there should be no major problems. &gt; Docker is the most unfriendly developer software, I don't understand why people toot their horn. It's opensource. There are some weird decisions (especially for docker-compose) but there are workarounds. Also there is rkt.
You need to set multiple options for file limit: * `upload_max_filesize` * `post_max_size` * `memory_limit` Ensure that `post_max_size` is greater than `upload_max_filesize` so upload would not fail because additional post data is added to upload request in multipart body. Also there is limits for webserver, too, so you would like to look into those too Edit: formatting
Have you checked your server settings? Hosts can have settings on that side.
&gt; I use an iMac pro at work, and its pretty good You're contradicting yourself man. You literally spend paragraphs cursing Apple and then say "but actually, their stuff is pretty good.". Every company has its flaws, but Apple builds great products. FYI Apple's specs on paper are lower than competing brands but naive critics forget that Apple spends serious money to ensure the hardware is of the highest quality. This actually justifies Apple's claims that their hardware is better than competing companies. You also forget that their software is written much better than competing companies. If you actually compare the performance of an Apple product vs its competitor, you'll probably be surprised that, in fact, it is better. Apple has its flaws, but they are not "simple bullshit company". Even you admitted you like using their products. Pretty funny.
For validation, have you looked at [FormRequests](https://laravel.com/docs/5.4/validation#form-request-validation)? They're a neat way of using the request object to validate submitted POST data, so you don't need to muddy your controller with it. Just create a FormRequest object containing the validation rules and any authorisation logic (e.g., is the logged in user the owner of the resource they're trying to update) and typehint that FormRequest on your controller action. Laravel will take care of the validation and authorisation before the request hits the controller.
https://bakery.cakephp.org/2017/07/22/cakephp_2100_released.html and in the roadmap at the bottom: https://bakery.cakephp.org/2017/06/23/upcoming-cakephp-roadmap.html
You lose when you try and play just the specs game. Apple knows this. They deliver an end-to-end experience that goes beyond just what’s inside your hardware.
We'll someone has to win a documentation fight I guess ;-) The Cake Docs certainly get the job done for me. I wouldn't call it decoupled, there is a lot of functionality in the core of it, but certainly some items are decoupled.
What type of shitty mac are you using? The only time I've run into issues is if you try to run a vagrant box and 8 docker containers on a dual core mac pro. Other than that I would say I haven't had many issues with docker. Are you sure you're using 17.03+? Even on windows after 17.03 when they switched to LinuxKit it got a huge boost in usability on Windows. Yes using Hyper-V sucks a lot on Windows. I'm not too happy but it has really made development easier.
You can't run the docker engine/server on WSL :( Only the docker client works on WSL, which you have to configure to speak to Docker engine on windows
There are other settings like max file uplad size. 
Thinking back you may be right. I may have just given up on the daemon and set up the client.
I disagree. I find it useful for helping make sure I don't have things like extra new lines, or missing spaces after commas. They aren't a big deal but I know that later on I'll notice and fix it, and it will show up in a diff.
$item[1]-&gt;{'estate_attr_property-size'}
Tried it, didn't work unfortunately :( 
Thanks.
Thanks for the help.
Heh, your post is marked as a Spoiler. I was worried you were giving away the next episode of Game of Thrones or something.
Windows/MacOS do not support linux containers natively so any container platform is not going to have the same performance as it has to run inside a VM not really something to complain about to the docker team. try using LXC on MacOS. hint: you can't
You need to quote the property and wrap it in curly brackets. print_r($item[1]-&gt;{'estate_attr_property-size'}); Otherwise PHP is interpreting that as an expression $item[1]-&gt;estate_attr_property - size Which for obvious reasons is invalid, however the result of that (invalid) expression is zero.
How much are they being paid to support your closed source platform of choice again?
lol whoops...unmarked.
And what's in your table "info"? You may have better chances posting this question on StackOverflow.
Ah I see. Thanks for the explanation. It's working as intended now.
&gt; Maybe they're not the greatest for developers. I think they are. Most the software engineers at my company choose Macs over Windows or Linux. Personally, I view it as Linux without any headaches. You know, unless you're doing .NET/Windows development. Then they probably cause more problems than they solve.
Did you restart apache after you modified the settings?
&gt; The performance on mac is terrible, despite a lot of issues about it they refuse to fix the performance issues. &gt; &gt; Docker completely doesn't work on windows, Despite tons of issues about it docker says fuck you windows users. I'm not entirely sure how this is a negative ?? The macOS issue is annoying [1], given I develop on macOS. But, because I only _develop_ on macOS, this isn't a production deal breaker. I can get around it by running inside a VM. The positives of containerization (assuming they fix some security layers) out weigh my development inconveniences. (Disclosure: I'm absolutely against using a desktop OS for Servers; and I'm just against any Windows Server) [1] The only issue I know of for macOS has to with read/writes on mounted volumes. This doesn't become an issue until you start hitting 5 digit file quantities: https://github.com/docker/for-mac/issues/77
Done. Thanks for the feedback!
&gt; Maybe they're not the greatest for developers. MacOS is a Unix OS with a user-friendly UI. How are they not the greatest? I do all my development on macOS. I have a certified Unix OS without all the driver inconsistencies of Linux desktop UIs. Unless you deploy to Windows servers, macOS is the best development environment.
What's actually spiteful: your comment. What you actually didn't understand: docker. Sorry ¯\\\_(ツ)_/¯ 
[removed]
Pretty sure you can't run Docker and WSL at the same time though. Since they both take over the virtualization layer.
I'm building an app using micro-services with PHP and ReactPHP at the moment. I do think Dockerisation adds a time penalty to development, but it's worth it for the deployment reliability. I've not formed strong views about stability under load yet, but I've no reason not to trust LXC. 
Nix &gt; Docker
Kontena won't fix any of your problems with Windows/Mac. I find Docker extremely dev friendly - I dev on linux specifically to be able to use docker natively. My dev environment is as close as possible with our production environment and we've reaped the benefits heavily. If you're trying to run Docker on windows/mac, imo you're just trying to put a square shaped block in a circle shaped hole. It'll never fit right, because Docker is a linux technology. Your dev environment won't mimic production.
RIP your inbox... 
Yes - because running a modern OS on shit hardware is exactly the experience I am looking for.
Yep, was corrected elsewhere and forgot to update my comment.
Was the only point of this article to make a dig at Jeffrey Way like you did at the end there, and Laravel by proxy I guess? Went ahead and listened to his podcast that you linked at the end of your "post" and he's talking about not shitting on other's people's code "just because" and also about finding more constructive ways to interact when talking publicly about other people's code, libraries, projects, etc. So you present a terrible idea in your blog, IMNSHO, take a shot at Jeffrey Way, and then invite others to shit on your idea so you can show how you're better at dealing with criticism. "To conclude: It might be worth considering the use of two frameworks in server-side applications, each with its own container: one for the user interface concerns, and a separate one for infrastructure/domain concerns." "Unlike [some other people](https://laracasts.simplecast.fm/65), I am not my code, or my books, or my blog posts. Given the tentative nature of the above essay, review and criticism (especially substantial criticism) are vital. It won’t hurt me in the least bit; indeed, I encourage it." What was the point of this "post" really? Instead of coming up with more solutions looking for a problem, why don't you stick to trying to get ADR off the ground past being just another worthless, unused theory.
I use both Windows 10 and OSX depending on where I am. I need to be able to run a LAMP stack and easily switch between PHP5.6 / 7 on both systems. Anyone have any suggestions?
While that provides an incentive to design custom hardware for it, scrypt was intentionally designed to make that expensive (mostly by requiring large amounts of memory) - this is part of the reason why some cryptocurrencies use it.
[removed]
&gt; Like by choice? Great question, had to smile a bit when I read it. My current $dayJob involves CakePHP2. I joined ~3 years ago when they were *only* using CakePHP2. I never heard of it before, I only was used to .. well... "real" frameworks (proper classes, interfaces, design patterns). When I had to start to learn the idiomatics of it, it didn't take long for me to realize this whole thing is just utter crap and even dangerous to the business. At some point we wanted to have an API and took the opportunity to start over fresh; making only the database the common denominator. I wasn't tasked with it and unfortunately the one who was only new CakePHP so he took CakePHP3 which was in its RC stage at that time. When I looked at the code (and granted, it wasn't much yet and there wasn't much needed at the time, the API was only necessary for a customer request with very specific tasks) my face was in horror. It wasn't CakePHP2 but IMO opinion it wasn't really much better. Luckily I was tasked with expanding the API and was able to convince my team that the CakePHP times had passed on and we need to let go. I didn't "knew" Laravel back then well but I read the sources and liked the concept (not all of them; I'm still not friends with Facades but hey, I can *choose* to not use them). We're now ~1.5 years strong into the Laravel based API and expanded the tasks of the code for non-API parts too (background jobs, cron jobs, app maintenance stuff, etc.). We *still use* CakePHP2 in that legacy parts where a "from zero" rewrite would be too costly and too big. But I'm constantly searching for opportunities and moving over parts to the Laravel based one. And we're also used under technologies when they make sense, like Node.JS. Or ElasticSearch when Postgres doesn't cut it, etc. Phew, what a venting. Sorry for dissing the CakePHP project, no one probably deserves this but since I can't choose what to use at work and every day I've to do something in CakePHP2 one part of me dies.
Any extensions that can import use statements yet? It's the only thing keeping me from switching from Sublime...
I was enjoying the article till the end. It was a shitty attack on Jeffery. You would have gotten more out of it if you had just removed it and kept on doing what you do. 
Unless you had something specific in mind that you clearly did not explain, we don't need that information to discuss PHP frameworks.
Interesting, but I guess this idea will be more interesting with some experience. Are you going to try it? Until then, to be honest, it's just an idea. My main fear would be that having 2 separate containers will be either a pain, or either useless since you'll need to connect these 2 somehow. But only experience can tell. Also I agree with other comments, the useless dig at Jeffrey is useless. You don't need to mention him to ask for feedback, just simply ask for feedback. Edit: I also wanted to say that "user interface" is confusing. We often call micro-frameworks "HTTP frameworks", that's much clearer IMO. And it still makes sense with your article (HTTP framework vs architecture framework).
https://laracasts.com/series/php-for-beginners Put the videos on 1.5x speed and go nuts. When you're finished with that series, here is some more advanced stuff: https://laracasts.com/skills/php edit: and how could I forget http://www.phptherightway.com/
&gt; Are you going to try it? Yes, I plan to on my next greenfield project; or perhaps on a lark as a proof-of-concept. But that may be some time in coming. &gt; it's just an idea. Yes, absolutely -- something tentative, but something I've had on my mind for a long time. Figured it was finally time to put it out there. * * * EDIT: FWIW, I do *something* like this already in my projects, where the core application is in a separate repo from the user interface code (as you say, the HTTP code). But they have used the same container system via configs/providers, and get combined into the same container (the UI/HTTP one). The experiment would be to try completely different container systems, perhaps an infrastructure services container. (Hope that makes sense.)
For reproducible builds sure. For app deployment and scaling I'd rather use docker but I'd love to hear your thoughts. 
I think giving OP's comment &gt; The official PHP manual seems to be geared toward learning programming as well as PHP and is taking forever to get through Laracasts is probably going to be a bit slow n tedious for his needs...
Perhaps, but he can always crank up the speed to 2x if he wanted. I think most resources out there are going to teach the basics pretty slow.
Reading the documentation outside of just trying to build something is probably a crap shoot. Just start making something, generally assume that the syntax is somewhere between C++, C# and JavaScript except there's a $ in front of the variables and look up stuff when you can't get it to work on your own, should save you the time of looking up stuff you already know.
@pmjones Is there a difference or similarity between your proposal and [Multitiered Architectures](https://en.m.wikipedia.org/wiki/Multitier_architecture)? 
Non-Mobile link: https://en.wikipedia.org/wiki/Multitier_architecture *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^101434
Great question. On cursory review, it seems more obviously similar than not. Having two separate frameworks/containers might help to more clearly demarcate, even enforce, boundaries between the presentation (UI) layer, and the other layers. Does that answer satisfy?
Yes you can use it. 
I use it regularly in Windows. However I've found the "native" version to be slow so just stick to Docker-toolbox with Virtual box and haven't had any issues. Can't comment on Mac installations
If I understand you correctly, the [Domain Payload](https://vaughnvernon.co/?page_id=40) pattern may be a good fit for the Output Model. I think it makes sense to extend the semantics of Domain Payload to include things like status messages from the domain, so that the calling code does not need to inspect the individual results in the output to figure out what happened (more on that [here](http://paul-m-jones.com/archives/6043)). Do note that Domain Payload is for extra-domain communications, not intra-domain. That is, inside the domain, there is probably no need for a payload object; it is only needed to deliver the final results of the domain work back to whatever called the use case to begin with.
My intent to create my micro framework (https://github.com/HawkBitPhp/hawkbit) was to build a presentation layer which is designed to support both HTTP and CLI. Infact it uses VC of MVC which is art of the presentation layerThe code does has some ugly code smells. I'll refactor it to build a clean micro framwork for the presentation, in fact for the user-interface. If I think about a framework espcially for infrasturcture, I would use any container componet / or custom factories for IoC concerns (and don't violating the DIP of SOLID) and then build factories for my disired components which builds the infrastructure. But their are that many componets for infrastructure out there. Therefore the infrastructre framework is the sum of components used by the application managed by an infrastructure specific di component.
I totally agree. My intention is to clarify the relation and meaning. When I have Input I also have Output. I like the domain payload (for more information: https://vaughnvernon.co/?page_id=40), which is in fact a (domain) result. But the terminological relation to the term "Input" gets lost without Output, respectively Request and Response. I'm looking for a validation of naming for InputModel / OutputModel ( &lt;- Domain Payload)
Yup, this was what worked for me when I was setting up Docker. Could barely load any page, added the `:cached` directive to my volumes and everything ran smoothly.
I would convert the HTTP Request (data structure) into a domain model specific request model (Value Object). in this case you are able to access all required data with a getter. class UserRequestModel { private $foo; public function __construct(\ArrayObject $input) { $this-&gt;foo = $input-&gt;offsetExists('foo') ? $input-&gt;offsetGet('foo') : ''; } // ... public function getFoo(): string { return $this-&gt;foo; } } class UserController { public function update(Psr\Http\Message\ServerRequestInterface $request) { $requestModel = new UserRequestModel(new \ArrayObject($request-&gt;getAttributes())); // delegate request model to application logic, use-cases or wat ever } } 
[removed]
&gt; My intention is to clarify the relation and meaning. Gotcha. &gt; I'm looking for a validation of naming for InputModel / OutputModel Sounds fine to me, though I am not up-to-date on latest Use Case naming conventions. What has your other research revealed here? 
When I was relearning PHP I found [PHP the Right Way](http://www.phptherightway.com) to be a great overview of the language plus coding styles. It can easily be skimmed through in a day.
It looks like you're using Laravel. Perhaps this question might be better posed in /r/laravel?
I'd go file an issue on GitHub for the library. The contributors are very quick to respond :)
Nice, thanks!
Just do it. It's better that you spend an hour writing a simple php web app then an hour reading how to. Having done PHP, go, Java, c, js, Ruby, Python all on a professional level... PHP is probably the easiest to learn in that group.
Hello, five minutes ago i wrote this post https://medium.com/@levhav/one-of-the-simplest-way-to-create-websockets-chat-with-php-and-cppcomet-bad0a7e47df0 , i hope this will help for you
Yep I've used them while playing around. Still you're validating the request, not the normalised fork data. 
Check out Habitat, it gives you the best of nix and docker at the same time and so much more!
As someone who has served billions of HTTP requests in Docker under load, I can tell you it's perfectly fine :)
IMO, PHP.net is pretty great. You want the class stubs, here is in: http://php.net/manual/en/class.datetime.php For all components (PDO, JSON, curl, etc), you can find stubs like this, and it's pretty easy to comprehend the entire feature at once. 
Oh, no, an extra new line...
Gotta love how a bad ORM turns what would be a basic SQL query into a full-blown tragedy, no?
And what if I wanted to display MySQL data rather than a text message?
HTTP doesn't have a monopoly on the terms "request" and "response". Use what makes sense, and if in doubt, put in a namespace, or add a name prefix/suffix. I personally use the terms: - Command (service request that affects domain state) - Query (service request that only reads domain state) - Event (a notification of a change elsewhere to a service) - Result (the service response, which can be SuccessResult or ErrorResult) I think Request/Response is also fine. InputModel and OutputModel is a bit dry. Something can be a model, but I don't see why you should name it "SomethingModel". Feels as redundant as naming a class "SomethingClass".
CppComet work with text messages, but inside text message you can transfer json string or Base64 string with any data. 
&gt; I have asserted elsewhere that, in an over-the-network HTTP-oriented server-side application, the View (of Model-View-Controller) is not the template. The View is the entire HTTP response: not just the HTML or the body, but the status line, the headers, all cookies, and so on. The bad thing about this "assertion" is that you presume there's only one single correct and absolute way of seeing this. Architectures vary. And there are objectively elements of the response that are used and interpreted in the **exact opposite** way a view would behave, and we've had this conversation before. Reducing architecture to "all input is view input" and "all output is view" is pointlessly simplistic and doesn't help you create good applications. Likewise, your statement that microframeworks are UI frameworks. They could be UI frameworks. But if you actually look at what microframeworks do, they do a lot more than UI, they do a lot more than handle request/response too, and people seem to be liking it. By the way... Despite you keep asserting "request is UI input and response is UI view", I've never actually seen you **defend** this PoV as correct or let alone as **useful**. You merely *state it's so*, and expect us to accept it as obvious. But this PoV is merely your own obsession, and it requires justification for others to entertain. Architecture is an engineering discipline. Engineering is not philosophy, it's not a means to finding an absolute, noble truth. Architecture is a means to a practical end. So if you have a view on architecture that's not based on its utility for a specific goal, but it's based on some abstract notion of absolute, noble truth, then you're doing architecture wrong.
&gt; So you present a terrible idea in your blog, IMNSHO, take a shot at Jeffrey Way, and then invite others to shit on your idea so you can show how you're better at dealing with criticism. Which is a really bad idea, cause he's terrible at handling criticism (just look at him responding to me in this thread, if he'll even try).
You've proven your point, useless sarcasm is much worse than poor code formatting.
We're in [Poe's law](https://en.wikipedia.org/wiki/Poe%27s_law) territory here, I can't understand if OP has created this package as a parody statement on the utility of `tap()` or is serious. &gt; The original concept for this method comes from Ruby. Not at all. In Ruby `tap()` is a method (which this package also does, as a proxy, which is terrible, but anyway), not a function. It has a completely different purpose.
**Poe's law** Poe's law is an adage of Internet culture stating that, without a clear indicator of the author's intent, it is impossible to create a parody of extreme views so obviously exaggerated that it cannot be mistaken by some readers or viewers as a sincere expression of the parodied views. The original statement of the adage, by Nathan Poe, was: Without a winking smiley or other blatant display of humor, it is utterly impossible to parody a Creationist in such a way that someone won't mistake for the genuine article. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.24
http://socketo.me/
Your analysis of what's happening isn't correct. Anonymous functions have nothing to do with this. String references are ALWAYS absolute: &lt;?php namespace { function foo() { echo 'global'; } } namespace A { function foo() { echo 'namespaced'; } $x = 'foo'; $y = 'A\foo'; $x(); // "global" foo(); // "namespaced" $y(); // "namespaced" } As for anonymous functions, they're always in a namespace. And when they're defined within a class method, it's better to think of them as "anonymous methods", as they're full-fledged anonymous methods of that class, with access to `self`, to `$this` and so on. And the class is, of course, in a namespace.
It is actually for anyone who interacts, includes, reads, writes tests for, thinks about, or in any other way manipulates code written with the intention of being read in the future. 
You should take a look at how [Bedrock](https://github.com/roots/bedrock/blob/master/composer.json) installs Wordpress as a project dependency.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [roots/bedrock/.../**composer.json** (master → d0de743)](https://github.com/roots/bedrock/blob/d0de7432088270b38cfabe3f856b0064baaf305b/composer.json) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dlotxkc.)^.
I read the post, I don't see the use of it besides some extra function calls. What's the use of it?
&gt; full-fledged anonymous methods I knew they auto-used `$this` but do they have access to privates too?
Yup. Same as a method.
PHP uses objects to represent anonymous functions, which can be "bound" to another object to access its private methods and properties. See http://php.net/manual/en/class.closure.php
You already made a post in r/PHPhelp
&gt; Don't roll your own even if you have a degree in cryptography. Jesus, then *who* rolled the existing ones? Were they always there? Did they come from the sky?
~10 lines of code, IMO this doesn't need packaging up, I copy paste it wherever I need it.
I don't like the examples at https://mattstauffer.co/blog/introducing-laravels-tap-higher-order-tap-and-collection-tap. I seem to prefer the more verbose code because I find it easier to read.
I read the language part of PHP manual in a day. It is very good - one of the best docs I ever read out there. And don't be fooled that PHP is easy - these days it has it's own hard parts and nuances as any other language. Skipping it is a bad idea (especially everything related to type coercion and converting - I have seen so many "php experts" doing absolutely stupid mistakes that lead to bad security breaches and never read the actual manual - don't be that guy)
Fucking blogspam. Reported
Thanks mate, gonna try to dig into this !
Thanks, i'll check that !
That's good to hear! `:=)` 
That's wrong because wsl does not depend on virtualization, the docker client runs just fine but since wsl does not offer virtualization of any kind the docker daemon will probably never run within wsl, but having the docker client in both wsl and powershell may be a bit redundant though 
Is it just me, or are a lot of AST nodes added for no reason when "using" `tap()`? What's the use-case? It sounds like the `&gt;&gt;=` operator in Haskell, except that we don't need it in PHP, because we already have `;` (the semicolon). I could understand if it guaranteed transactional boundaries (`transactional()`? But then you'd need to also pass in an active connection), but so far, it seems kinda useless? :-\
So where are the results?
Looks cool. I would also like to feature request the output from the given code example.
Agreed, additionally grab something like PHPStorm on trial and use the autocomplete to figure stuff out.
Which extension do you use for that in Sublime?
SublimePHPCompanion does that https://github.com/erichard/SublimePHPCompanion#find_use
More succinct in some use cases, but that's only an opinion. The use case I specifically find useful is in Drupal, often you have to setup quite a few entities for an integration test, that looks something like this. $category1 = Term::create(['name' =&gt; 'Foo']); $category1-&gt;save(); $node1 = Node::create(['title' =&gt; 'Bar', 'category' =&gt; $category1]); $node1-&gt;save(); $node2 = Node::create(['title' =&gt; 'Bar']); $node2-&gt;save(); Which can be turned into 1 liners: $category1 = tap(Term::create(['name' =&gt; 'Foo']))-&gt;save(); $node1 = tap(Node::create(['title' =&gt; 'Bar', 'category' =&gt; $category1]))-&gt;save(); $node2 = tap(Node::create(['title' =&gt; 'Bar']))-&gt;save();
Eh, I'm spoiled by not having the mixup of persistence and values (I'm in the "data mapper" camp): $category1 = Term::create(['name' =&gt; 'Foo']); $node1 = Node::create(['title' =&gt; 'Bar', 'category' =&gt; $category1]); $node2 = Node::create(['title' =&gt; 'Bar']); $em-&gt;persist($category1); $em-&gt;persist($node1); $em-&gt;persist($node2); $em-&gt;flush(); // all variables in place, no clutter. Can eventually remove triple `persist` call via `array_walk()` What `tap()` seems to do in the example above is adding a fluent interface to the `save()` method? Still, you have an external dependency and a loss of type information there (fixable if PHP gets generics).
I hope developers stay away from nullable returns. Multiple return types are already a huge pain point in PHP proper. Enshrining them in userland will lead to a whole lot of bugs.
It's fine but make sure what ends up going out is the text/HTML result of PHP code not the PHP code itself!
I guess I'll open one in a different repository. The repo for the google cloud monitoring library: https://github.com/GoogleCloudPlatform/google-cloud-php-monitoring currently has issues disabled, which makes filing an issue be quite hard. Oh, the pubsub repo to interact with the queues also has issues disabled. https://github.com/GoogleCloudPlatform/google-cloud-php-pubsub Ah - apparently they should all be directed to https://github.com/googlecloudplatform/google-cloud-php 
The loss of information is already occurring if you are using duck typing already though :P
100% with you on the data mapper pattern, I use doctrine for my PHP apps and I love it, great work and thank you. Funnily enough, you can also do something similar to what you suggested with Drupal. The Node::save() implementation does this: \Drupal::entityTypeManager()-&gt;getStorage('node')-&gt;save($this); Although, save() actually saves the entity, but it would be possible to use array_walk for entities of the same type. array_walk([$node1, $node2], [$nodeStorage, 'save']);
Hey. Thanks for posting this! Please note it's still in beta. Any features you want to see or any bug fixes please tweet me. @Rhysbeingsocial
It should be avoided, in fact.
I didn't use `array_walk()` with an inline-defined array because [its API is stupid and uses by-ref parameters](https://3v4l.org/SNdmh) :-(
Nice, may be it's will be more usefull with a sandbox to test the code :) 
You're welcome. It's a neat resource. 
only since 5.4 and later. Previously they didn't have access to `$this` and if you preserved that via `use()` you still wouldn't be able to call private methods on that.
Do we even need to worry about 5.3 now days? That was over 5 years ago. 
Judging by this SO answer on Ruby's tap, how does Laravel's tap have a completely different purpose? https://stackoverflow.com/a/17493604/999733
Could be a lot better: http://imgur.com/a/lzL3n - Use short arrays - No closing PHP tag - Use closures - var_dump vs print_r etc - White space Fuzzy searching? http://imgur.com/a/ljGCA
But that wouldn't be DRY. You need to copy and paste 20 lines of package management config, publish it to a hosting service and distribution platform, make a readme, and test it or else it wont be DRY.
I'm still collecting answers :D I hope to have everything compiled in a few weeks.
DRY is the most dangerous paradigm of our age. Edit: referencing this dumb shit https://twitter.com/sdboyer/status/895804695330963456
I hope not. I certainly don't. But many people are still stuck with 5.3 and even 5.2 because 5.3 and 5.4 brought a lot of changes.
You could change context in which anonymous function is created: $fn = \Closure::bind(function (SomeObject $obj, $val) { $obj-&gt;somePrivateStuff = $val; }, $newThis = null, $newContext = SomeObject::class); $fn($obj, 'new value'); private/public/protected stuff is just about context of method/function. Nothing special or magical. Basically any code which defined in same context has all access to private members. That's why every instance of same class has direct access to private members of each other.
Now you just offended `left-pad`.
&gt; Service Oriented Architecture. To make it clear. SOA is about distributing systems, and in your case you just want to have [transactional scripts](https://martinfowler.com/eaaCatalog/transactionScript.html). &gt; if in the future YAGNI. Do not write any line of code that not needed right now. &gt; implement a repository pattern Please take a look at [Row data gateway](https://martinfowler.com/eaaCatalog/rowDataGateway.html) pattern. Repositories is a bit different. You probably need to isolate some queries inside specific gateways. But this is alot of work and it's very depend on the project. &gt; Along with the repositories, we refactor the controllers' code into new service classes and we write unit tests for them unit tests (isolated ones, not just "getting things from API using phpunit") or acceptance tests? &gt; What do you think about this plan? It will take lots of efforts without any significant profit. You could just stuck with this refactoring for few months without any value for business. If I would refactor legacy project I will first check for logic duplication (not fixing it, just to make it possible to prioritize problems). For example I have 10 controllers which does the same things - then I would create small service and move this logic. To make it possible I should integrate some service container in project. Every further step should be as small as possible. Instead "implement repositories for all the things" if i really need some kind of caching in some place, I would add separate service only if needed just for this single query. 
something is wrong with the formatting: &lt;?php function shutdown() { // This is our shutdown function, in // here we can do any last operations // before the script is complete. echo 'Script executed with success', PHP_EOL; } register_shutdown_function('shutdown'); ?&gt; multiline comments on a single line? indentation...
As far as I can tell, it just returns the first example snippet for the function it finds from the php.net docs.
Also he gives this example: return tap($user)-&gt;update([ 'name' =&gt; $name, 'age' =&gt; $age, ]); Why not just call $user-&gt;update([..])? 🤔
Teasing title but what about machine to machine interfacing (which is also the field where a micro framework can be used)
Wrong sub
Could not agree more. Does anyone even use this ADR pattern? Does anyone use any of his projects? I have never been advised or tempted to use anything he created, all I see is his messages where he offers to buy his book and shitty articles like this. I am starting to think he is just jealous that Jeffrey is **way** ahead of him.
Judging by that same SO answer, don't you see it's a method in a method call chain? This version of `tap()` is a function... it can't be in the middle of a method call chain, can it? Plus, neither version makes sense in PHP. The function version is generally useless and just a method to obsfuscate your code (honestly, show me **one good use of it**. As for the method version, here's a method chain: $obj -&gt;foo() -&gt;bar() -&gt;baz() -&gt;qux(); Here's tapping the chain with method tap(): $obj -&gt;foo() -&gt;bar() -&gt;tap(function ($obj) { echo $obj-&gt;dosomething(); }) -&gt;baz() -&gt;qux(); Here's tapping the chain **without** tap(): $obj -&gt;foo() -&gt;bar() ; echo $obj-&gt;dosomething(); $obj-&gt; -&gt;baz() -&gt;qux(); So, uhmm...
[removed]
That's nonsense. Obviously if you don't need to return null, you won't make it nullable. If you do need to, you will. Some things in code are optional. They don't always happen or never happen. They happen sometimes depending on configuration and runtime state. For example you may have a log with an *optional* filter property. So if you have method `-&gt;getFilter()` you may get the filter or null. That's fine, as long as it's reasonable and documented via a type and comment. The alternatives (exceptions, error results, Null Object Pattern, and others) also have their place, but not in every case.
My comment was directed towards the last statement of your original reply: "It has a completely different purpose." I know that it's a method in Ruby and a function in this case, but the **purpose** of both are still the same: to avoid cluttering the current scope with temporary variables. I'm also not trying to protect the function, was just curious about what you meant with that, since the purpose looks the same in both languages, but the implementation is different.
PHP has all of the features you are looking for. Old and out of date versions of PHP are still popular on shared hosting, but stable releases of PHP support the following type declarations. + Method parameters + Return types + Class properties Example: class TypeExample { private string $name; private Example $thing; public function doSomething(string $name, int $age, Example $thing) : ?TypeExample { This method can return TypeExample, or null. } } Local variables can not be type hinted, but any IDE that understands PHPDoc can still hint their types like this: /* @var Animal*/ $name = new Cat(); 
His point is: Say thank you for the feedback and create the issue on your own.
&gt; I know that it's a method in Ruby and a function in this case, but the purpose of both are still the same: to avoid cluttering the current scope with temporary variables. The purpose of `tap()` in Ruby isn't some general notion of avoiding temp variables. It's specifically intended to "tap" into the middle of a method call chain. That's where the name comes from. A method call chain is like a cable, and you "tap" into the middle of it, like a phone cable is "tapped". A function version of tap doesn't tap into anything. It's just your typical Laravel nonsense. Also in the example above, not using tap() produced zero temp variables, and this is the most typical use case of tap: to output some debug information for the current object in the middle of a method chain.
Since (per the article) the User Interface is the request and response, and machine-to-machine uses request/response, I would think it'd still apply. (Unless I'm missing something in your question!)
&gt; Is it just me... Haha, good one. No. :) 
&gt; $category1 = Term::create(['name' =&gt; 'Foo']); &gt; $category1-&gt;save(); &gt; $node1 = Node::create(['title' =&gt; 'Bar', 'category' =&gt; $category1]); &gt; $node1-&gt;save(); &gt; $node2 = Node::create(['title' =&gt; 'Bar']); &gt; $node2-&gt;save(); &gt; Which can be turned into 1 liners: &gt; $category1 = tap(Term::create(['name' =&gt; 'Foo']))-&gt;save(); &gt; $node1 = tap(Node::create(['title' =&gt; 'Bar', 'category' =&gt; $category1]))-&gt;save(); &gt; $node2 = tap(Node::create(['title' =&gt; 'Bar']))-&gt;save(); But... you can already do the same thing **without** tap... $category1 = Term::create(['name' =&gt; 'Foo'])-&gt;save(); $node1 = Node::create(['title' =&gt; 'Bar', 'category' =&gt; $category1])-&gt;save(); $node2 = Node::create(['title' =&gt; 'Bar'])-&gt;save();
This should be a patch in core, that allows values to be passed by value when literals, even if requested by reference. If someone intends to read a param later, they wouldn't pass a literal.
Maybe this example clears things up: return tap(tap(tap(tap(tap($user)))))-&gt;update([ 'name' =&gt; $name, 'age' =&gt; $age, ]); Just kidding.
Well, the question is, why only use a micro-framework for USER interfacing while it can do so much more. (and machine 2 machine is not the same, since there is no user involvement)
Because update returns a boolean, not the user.
The interface is not too intuitive. It took me a minute to realize that the input was all the way down at the bottom of the page. I was looking for it near the top.
try laragon (like *amp, but somehow much easier) 
&gt; Apple spends serious money to ensure the hardware is of the highest quality. This actually justifies Apple's claims that their hardware is better than competing companies Apple uses intel processors, So does every other company. What is your point here? Why would picking a MOBILE grade CPU, over a desktop i3,i5,i7 that every other company uses in their laptops be of highest quality and better then everyone else. I mean really the macbook is just a mobile in big metal box, This is all its running on before they took down the image, http://i.imgur.com/YwQmFmX.png. Sorry, but when a company sells more air then computer something is not right.
Windows 10 now does, windows 10 can run the Unix system natively now with full support for ubunut, fedora and centOS with more being added. Why does docker not utilise this? https://msdn.microsoft.com/en-gb/commandline/wsl/about
About the only use case I see for it is if you're on PHP 5.3 and trying to emulate (new Foo())-&gt;bar(); Otherwise, really, what's being gained with tapping all the things?
Please do not cross-post. Cross-posting can result in people answering a thread that is already answered elsewhere, thus causing them to waste their time. Cross-posted here: https://www.reddit.com/r/PHPhelp/comments/6tyl3w/creating_a_web_socket_with_php/
I am stuck on PHP 4, please tell me what I need to know about closures there. /s I think it's best to assume people use 5.6+. There will always be laggards, but you need to stop caring about them at some point, because otherwise we need add more and more noise in our explanations, which noise is targeted at a smaller and smaller audience. I think I got a visitor using IE6 on one of my sites last time I checked...
WSL does not support LXC, so the docker engine cannot run on it you can run the docker CLI, but it still has to connect to a docker host, which must be run inside of a VM
Hi! I'm trying to keep my tooling to a minimum to prevent distractions. What does that give me over my current setup (the builtin `PHP` server + `mysql` CLI)?
No, that is wrong. In your example, $category1, $node1 and $node2 will all equal "true", which isn't what you want.
Or, if you want to be extra careful, use Argon2 from LibSodium but it's honestly overkill if all you are including it in for is the password hashing.
I'm still working on a Centos 6 box whose official distribution still ships php5.3 - makes me hate my life sometimes. 
:) yeah that does suck, I should have tested it first!
Ahh gotcha. Thanks.
If you are capable of installing and configuring php and mysql (and if necessary a webserver) by yourself, you are outside the target audience of XAMPP.
I mean, typing `php -S localhost:8000` isn't really hard haha. I guess on a Windows machine it would be harder, no?
Well I don't know what ORM library you use. Presumably you're the author of the Term and Node classes, so if you find the results of `save()` useless (as you're ignoring them), you can define it or override it to be what you want. Even without doing this, you can do this instead: ($category1 = Term::create(['name' =&gt; 'Foo']))-&gt;save(); ($node1 = Node::create(['title' =&gt; 'Bar', 'category' =&gt; $category1]))-&gt;save(); ($node2 = Node::create(['title' =&gt; 'Bar']))-&gt;save(); Bonus points: 1. It's shorter (see below). 2. It's faster. 3. Doesn't require extra dependencies. 4. You retain type information so `save()` can be autocompleted and error-checked. - $category1 = tap(Term::create(['name' =&gt; 'Foo']))-&gt;save(); ($category1 = Term::create(['name' =&gt; 'Foo']))-&gt;save();
I don't know what you mean by this. Basically I'm scraping the RSS feed and using it to place images (by pulling their URLs), and other information on the listings like their name, price, size, etc. As I'm building it it seems to be working as intended. Should I be doing something specific to get these to render in email clients?
I dont understand whats the point of this? it looks like its the same as just doing $person = new Person; $person-&gt;update(['name' =&gt; 'bob']); Am i missing anything?
If you just want syntax and overview of the language feel and features :[https://learnxinyminutes.com/docs/php/](https://learnxinyminutes.com/docs/php/) [PHP the right way](http://www.phptherightway.com/) is good if you want best practices and modern php setup.
&gt; PHP will first attempt to call function inside of the namespace and than, if such doesn't exists, it will call global function. Like many behaviors PHP would be better off without the fallback to the root namespace. It complicates optimization and correctness testing because it's also valid to refer to a function which has not yet been defined. There's no way to differentiate from not-yet defined and never-will-be defined.
What he means is, you can't send php via email and expect it to run. You need to use php to build your email before sending the resulting email out.
So, what are we gonna do about it?
&gt;It's just your typical Laravel nonsense. You seem salty about Laravel in general.
No it's not.
Well, now you have a variable that you're not really using. Tap avoids that.
I am, and for many good reasons.
[removed]
(/me tilts head) Thinking about that a little more, maybe it's more fair to say it's *all* machine-to-machine. The actual person clicking buttons in the browser (or typing into the CLI for curl or wget) isn't the "user" as far as the server side is concerned, is it? As far as the server side is concerned, the "user" is the browser application (or curl client, or wget client, etc.) that sends the request, then receives and parses the response. How that information got into the client (whether by a human typing, or by a program piping it in) -- the server doesn't know or even care. Do you get where I'm coming from there?
I don't understand why we need tap. `$category1 = tap(Term::create(['name' =&gt; 'Foo']))-&gt;save();` Without Tap: `$category1 = Term::create(['name' =&gt; 'Foo'])-&gt;save();` It does same thing?
&gt; if he'll even try Tanks, my old sparring partner, when have I failed to respond to your opening jabs? :-) &gt; he's terrible at handling criticism You do me wrong, sir; I have received at least two criticisms from you personally and implemented them. By way of example, have your forgotten your very good advice, two years ago now, that I choose a different name for Pipeline? (I changed it to Relay based on [that conversation](https://www.reddit.com/r/PHP/comments/391hi5/pipeline_a_psr7_middleware_dispatcher/crzj38g/).)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Oh shit I thought I was in /r/programmingcirclejerk Of course it's not! There's a Twitter post going round there with some golang people hating on DRY.
&gt; I have never been advised or tempted to use anything he created You use PSR-1, PSR-2, and PSR-4, right? (You're welcome.) &gt; Does anyone even use this ADR pattern? Besides myself? Some examples: The guys at BitExpert have put together [Adroit](https://blog.bitexpert.de/blog/adroit-the-adr-psr7-middleware/) and [Adrenaline](https://blog.bitexpert.de/blog/announcing-adrenaline-v0-1-0/). Then there's [Equip](http://shadowhand.me/announcing-equip/). Indeed, here's a Gist showing [how to do ADR with Laravel](https://gist.github.com/taylorotwell/68f614deb9538f2e30108c2698266fda#gistcomment-1793518) (and I think Laravel has support for single-action controllers, which ends up being useful for ADR). I'm sure there are more but those are what I recalled in the first few minutes. EDIT: Also, as far as "Jeffrey is **way**" -- I do appreciate a good pun; nicely done.
&gt; "request is UI input and response is UI view", I've never actually seen you defend this PoV as correct I admit, it does seem obvious to me on its face. The "request" is what gets "put into" the server side application, and the "response" is what gets "put out" from the server side application. What else would they be, besides input and output?
Not quite. The `save` method [returns a boolean](https://laravel.com/api/5.4/Illuminate/Database/Eloquent/Model.html#method_save), so this: $category1 = Term::create(['name' =&gt; 'Foo'])-&gt;save(); Would yield `true` or `false` for `$category1`. A one-liner without tap would look more like this: ($category1 = Term::create(['name' =&gt; 'Foo']))-&gt;save(); While I'm in the same camp as you in that I don't fully see the benefits of adopting tap quite yet, I can at least see how tap's code is more readable.
&gt; Tanks, my old sparring partner, when have I failed to respond to your opening jabs? :-) When you respond with childish sarcasm and zero actual content, I don't count this as a "response". So you've actually not responded to me in a very long while. &gt; By way of example, have your forgotten your very good advice, two years ago now, that I choose a different name for Pipeline? Oh wow, how substantial. 
&gt; I admit, it does seem obvious to me on its face. The "request" is what gets "put into" the server side application, and the "response" is what gets "put out" from the server side application. What else would they be, besides input and output? That's not the point I'm making. It may be "input" but this doesn't make it automatically "view input". It may be "output", but this doesn't make it automatically "view output". Your decision that this is 100% view and nothing else is completely arbitrary and not supported by the mechanics and purpose of an HTTP request/response and the browser on the other side. To borrow my own example from our last conversation on this, you can just as successfully argue that an SQL query sent to a database is "the view", because you "output", and receive "view input" from it (result sets). The basis for such assertion is completely missing. To designate something "the view" in a MVC-like architecture (or other), it has to behave and fulfill the purpose of a view, and not have other concerns that you'd never find in a view (such as storing application state). You can successfully argue that the browser is in part a view, and thus a part of the response is a view. Although you haven't done even that. But you can't argue that the entirety of the response is the view, in particular elements like cookies, in which the browser acts as a model, not as a view. All communication between architectural components is input and output, no matter their type. "But set-cookie headers are output, therefore view", as we established, is just not an argument at all: PHP -&gt; db: (OUTPUT) UPDATE cookies SET name = "i_am_not", value= "a_view"; SELECT * FROM cookies; db -&gt; PHP: (INPUT) $resultset = ["name" =&gt; "i_am_not", "value" =&gt; "a_view"] PHP -&gt; browser: (OUTPUT) Set-Cookie: i_am_not=a_view browser -&gt; PHP: (INPUT) $_COOKIES = ["i_am_not" =&gt; "a_view"] All architectural components communicate via input and output. Calling their role is a tad more complex than this.
Class constants also have a similar behaviour – they're lazily-evaluated, so this code fails class A { const B = D; } $b = A::B; const D = 1; but this code is fine: class A { const B = D; } const D = 1; $b = A::B; 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Well, its purpose is to simplify things. easy -&gt; no complexity, hard -&gt; complexity You can't have it all. 
I see you moving those goal posts, Tanks. I guess they weren't that heavy after all. :-)
I might be missing something, but I don't get what your objections are. In the context of **over-the-network HTTP-oriented server-side application** there is no place for other interpretation than requerst-process-response. This particular fragment is more like truism to me than something I could argue about. You might disagree on some details like response is not a real View either (which I would expect from u/pmjones actually) or that final response might be built by doing some sub-request round trips, by emitting internal events... etc., but top layer abstraction stays the same no matter what you do underneath, wheather you encapsulate it or not with whatever names you call it. Edit: NVM, I need to hit refresh more often.
I can't recall an instance where multiple returns types were the best solution. Even your example would be better served by a null object. There are always weird edge cases so I'll never say never but the fact it's so rare points to it being a poor design decision.
Hello again, I added ability to transform parameters: https://github.com/awesomite/chariot/tree/dev#transforming-parameters https://github.com/awesomite/chariot/blob/dev/examples/transform-params.php Any feedback would be greatly appreciated :)
Thanks for the link. I will check it out!
I wanted to run unit tests through PHPStorm more than manage the containers. But yeah that's PHPStorm not docker.
Those people deserve a back slap.
&gt; I can't recall an instance where multiple returns types were the best solution. $mapOfItems-&gt;get('item'): ?Item Of course, you'd say "throw exception". But we disagree. The real question is what do you have against null exactly. Is it just irrational hatred, or do you have a reason? Null is disliked by programmers when it's unchecked, or when types are nullable by default, and you can't even declare "this won't be ever null". This is a problem in C++, in Java, and in C# (although they're working on it), but it's not a problem in PHP.
What are you, Putin? Can't think of any more useless term than BS.
I did all that before his reply already.
I'm not arguing against "request-process-response", I'm merely saying that for historical and pragmatic reasons, the response is not merely a view, it has other compounded concerns, which we're served best to recognize. Say, how often have you set cookies in your template? Rarely? Never? There's a reason for that. Cookies and response content serve two completely independent concerns. We can't mush them together and call them both "the view". If we do, this has practical negative implications much beyond arguments about naming. People still have no clue how to manage sessions in Paul's ADR, for example. All the ways to do it are verbose and cumbersome.
I like it. Will definitely try out on my next project and create an integration package for Hiraeth (https://github.com/hiraeth-php/app). At first I was not sure how I felt about the single interface to provide both the regex and the transformation, but the more I thought about it, I'm actually more appreciative. I'll let you know how it goes when I start using it (within the next month).
I'm not moving goal posts. I've told you long time ago, if you feel the urge to be cute with me, just don't post at all. I don't care to read that and no one else does either.
Well as evident, it doesn't simplify things. I don't give points for trying.
http://gph.is/1QtzrtF
Really? Because nobody seemed to give much of a shit here on Reddit so I guess you've spammed it elsewhere?
&gt; if you feel the urge to be cute with me Sometimes, Tanks, you are just *irresistible*.
So the reason you have 23 queries is pretty straight forward actually. You have one query to get the submissions. You have one query to get the users. You have one to get the comments. And you have 20 queries to get the communities because you forgot to eager load them. `whereHas` does not automatically load that relation, you must still specify that you want it loaded. Simply add it to the with array.
OK, I'll mark this as another topic where you've failed to engage with [reasonable criticism](https://www.reddit.com/r/PHP/comments/6tw6jr/the_micro_framework_as_user_interface_framework/dlpfmv9/), and instead opted to be silly. I don't see how this is any better than what Jeffrey Way does.
What on earth is your problem? That's the most ass-holish comment I've heard in months. I'm collecting responses from as many sources as possible. I'm just waiting to get more responses before I prepare the results. Just like with all of reddit, If you don't like something, just downvote it and move on.
Well for one thing, your 3rd example is ugly and violates PSR-2 ("There MUST NOT be more than one statement per line."). I'll grant your argument elsewhere that *as a function* the terminology `tap` doesn't make a lot of sense. Regardless of the name, however, I don't think there's any reason not to use it to clean up some temporary variables. Not your thing? Don't use it.
Not claiming to be a product comparison. The article is focused on possible paths you can take when facing this scenario.
Packages have to be installed, patched and updated. ButterCMS delivers content to your app via an API which is hosted and maintained by them. Very different approaches.
I found it nice for an introduction, but there are plenty articles out there already with this information. I would like to read how we can setup - automated testing - xdebug - integration with phpstorm and maybe other IDEs Nevertheless, tkx for your post.
PIA is such a great company! 👍👍👍
Mark it that way if you like, but note: you are the one who started the name-calling, and you are the one who attempted to engage in subtle trickery like moving-of-goal-posts. In other words, *you* started the silliness; I merely mirrored it here. As for the other comment, it requires more attention, which it will receive in due time.
It's not hatred or some unique idea. The robustness principle has been around for many years (people even argue "generous input" is too permissive). The reasons it's almost always a bad idea are fairly simple. Nullable returns lead to manual type checking. A nullable object cannot have the same assumptions made about it as an object. It increases the likelihood of loose comparison bugs. The PHP documentation is rife with common gotchas. They're a design warning sign. What is the value of ```?string``` versus simply returning an empty string? Will our code be functional getting back 0 *and* null from ```?int```. I suspect most use cases are developers trying to handle errors without actually handling errors which is arguably one of the worst legacy features of PHP.
At an "expert" level, I think you're gonna get more bang for your buck looking at the PSR-2 standard. It covers pretty much all of the core syntax you're gonna need to know. This along with PHP the Right Way should get you rolling in a day. https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md
&gt; how often have you set cookies in your template? Rarely? Never? There's a reason for that. Yes, and that reason (AFAICT) is that people too often mistake the *body* of the HTTP response for the *entirety of the presentation*. They think it is only part you "see on the screen" -- i.e., the HTML. A really good "View" system would be not only a template system, but a system that also handles the headers (including cookies and status). That's what the "Responder" in ADR attempts to address. This is just one of many indications -- to my mind and others' -- that MVC, which was originated for in-memory on-desktop graphical user interfaces, translated poorly to over-the-network client-server request-response interfaces.
Thank you!
Great news!
&gt; Yes, and that reason (AFAICT) is that people too often mistake the body of the HTTP response for the entirety of the presentation. They think it is only part you "see on the screen" -- i.e., the HTML. Why do you say "yes" and then contradict that. Do you agree with my point or don't you agree? &gt; A really good "View" system would be not only a template system, but a system that also handles the headers (including cookies and status). You've not made a case for this. You're merely repeating it a lot, and not argumenting your position. What kind of a "view" system holds application state? None. So far the only argument is in favor of the entire response **not** being a view. &gt; That's what the "Responder" in ADR attempts to address. You've yet to make your point how is this better. You're "addressing" a problem that you've not demonstrated. We've seen why ADR is worse (session and cookie management turns into a mess). Now make a case how it's better. I don't mean how it's better *ideologically according to your 100% subjective view on this*. I'm asking make a case for it from a pragmatic point of view. Somewhere where it makes a positive impact in the kind of apps people will write. Is it that hard? If it's hard, maybe it's because ADR is simply not a good separation of concerns. &gt; This is just one of many indications -- to my mind and others' -- that MVC, which was originated for in-memory on-desktop graphical user interfaces, translated poorly to over-the-network client-server request-response interfaces. MVC doesn't say anything about headers, so it neither supports, nor it contradicts what ADR does. This conflict is entirely manufactured in your mind. 
&gt; It's not hatred or some unique idea. The robustness principle has been around for many years (people even argue "generous input" is too permissive). The robustness principle has absolutely zero application to whether a result you return is nullable. It concerns the well-formedness of input and output. And guess what, when you declare "this is null or X" then returning null or X is well-formed. &gt; Nullable returns lead to manual type checking. A nullable object cannot have the same assumptions made about it as an object. You have to return an item that might not be there. The caller needs to know if it was there or not there. If it's not null checking, then it'll have to be `try...catch` checking, or `$optional-&gt;isEmpty()` checking, or `$collection-&gt;hasItem($item)` checking. You can't avoid the checking, unless you use NOP everywhere, but in many cases you can't apply NOP, such as the last case I've shown. Sometimes **hiding** the absence of something goes against the goals of the API. &gt; It increases the likelihood of loose comparison bugs. No, it doesn't... The most typical scenario for a nullable result is `object|null`. Null is falsey, objects are truthy, no loose comparison bugs. It's quite trivial to check for null in that case: `if ($foo) ... else ...`. &gt; They're a design warning sign. What is the value of ?string versus simply returning an empty string? Will our code be functional getting back 0 and null from ?int. Using nullable scalars is a more rare occasion (although it happens). Picking the worst examples of nullability doesn't imply null is bad. It just means it has to be used with some thought. As for the questions you're asking, an API is free to design and document its output. Your questions make no sense to be asked outside any context. You might as well be asking "what does it mean when I get back int 1 versus int 2?". It means nothing outside of any context. If empty string or 0 works, then there's no point making the result nullable. If it doesn't work and you need to signify "no result" anyway, then there is point in making it nullable.
&gt; In other words, you started the silliness; I merely mirrored it here. Cut the bullshit, will you? I'm not your excuse for you acting like a 5 year old at times. You're not a puppet in my hands, you have independent thought and actions. Take responsibility. I say what I want to say, because that's what I want to do. I'm not excusing myself with you. But I'm also not riding high horses and implying things like "I'm better than Jeffrey Way, look at me how great I am in discussions". If all it takes to make you act like this is one Reddit user who's fed up with you, then you don't deserve to think so highly of your ability to take feedback and discuss matters. P.S.: Oh also, happy 11th Reddit birthday...
&gt; Take responsibility. Of course I do -- I choose to respond to you in the way that you present yourself. Change your presentation, and you'll get different responses. I suggest "humor, dear Zilkov! Always with a little humor!"
Funny enough (given the likely content of the article), trying to get to the site I receive the following message after the site fails to load (IE, Firefox, and Chrome -- IE specific message though): &gt; Cannot connect securely to this page. This might be because the site uses outdated or unsafe TLS security settings. If this keeps happening, try contacting the website’s owner. SSL 2.0 and SSL 3.0 are disabled for our browsers, we only allow TLS 1.0+. Perhaps that's part of it. I dunno. **Edit:** Problem found. This site is categorized as an "Anonymizer" on some web filters apparently, which is blocked in some corporate environments...such as mine :/ The filter block page likely doesn't work unless you also use a MITM cert on the web filter when the site is HTTPs. Hence the confusing response in the browsers.
&gt; &gt; Take responsibility. &gt; Of course I do -- I choose to respond to you in the way that you present yourself. It looks like the concept of "taking responsibility" is truly foreign to you.
It's for idiots who are afraid of referencing the same variable name twice. 
Is this a joke? You're using it to update a Person. Why are you so afraid of variables?
I was merely answering the question. Please remove any sand trapped in thong. 
Nope, it's exactly the same on Windows. XAMPP existed long before PHP had an in-built server, it really doesn't provide anything else until your application requires specific web server features that the in-built server doesn't provide, and at that point it would be far better to use virtualisation or a container of some kind, rather than locally installed tools.
&gt; Well for one thing, your 3rd example is ugly and violates PSR-2 ("There MUST NOT be more than one statement per line."). Both the second and third examples violate that rule. There's a statement in that function. And "tapping" is not intended for permanent code, it's mostly for debugging. In other words, if you're committing code with tap() in your codebase, you're probably using tap() wrong. And I realize OP is probably committing code with it to their codebase, but then again I made the case OP's tap() has nothing to do with Ruby's tap(). &gt; Regardless of the name, however, I don't think there's any reason not to use it to clean up some temporary variables. You don't need tap() to make and call closures that hold temp variables: (function () use ($a, $b, $c) { $sum = $a + $b + $c; // Temp variable $sum, let's say... echo $sum; })(); A better way even would be to just extract this to a private method and call that.
I did before posting here. Thanks!
I always start in "cooperate" mode, and move to "tit-for-tat." We can keep going that way, or you can start cooperating more. It really is your call.
You wouldn't write the 2nd example like that. you'd write it like this: $obj -&gt;foo() -&gt;bar() -&gt;tap(function ($obj) { echo $obj-&gt;dosomething(); }) -&gt;baz() -&gt;qux();
Ok then, you wouldn't write the third example like that. You'd write it like this: $obj -&gt;foo() -&gt;bar() ; echo $obj-&gt;dosomething(); $obj-&gt; -&gt;baz() -&gt;qux(); You still don't need tap().
What does that even mean? I have to agree more with you? I need to feign being impressed with the nonsense? Is this what you imagine "receiving feedback" should work like? I've done nothing to promote your `toddler_mode()`. I'm just speaking straight, and you're unable to respond with substance, so you respond with bullshit.
sweet!
That still violates PSR-2 :)
It's optimized to make it easy to remove the code. Because if you don't plan to remove the code, then you'd just: $obj -&gt;foo() -&gt;bar(); echo $obj-&gt;dosomething(); $obj-&gt; -&gt;baz() -&gt;qux(); You **still** don't need tap(). You **never** need tap()... :D
It could clean it though, like fix whitespace, make short arrays at least.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The after example is not clean. If you want your code to play well with modern PHP tools, functions are no longer clean in PHP because they cannot be autoloaded. Use classes and methods instead. Those string literals are very bad. They should be class constants or be stored in some other variable or be retrieved from a method call. That $scope is clearly only allowed to be a string, and thus a type hint should be used. Since === is used to compare the $owner_id, it is clearly expected to be a specific type, and thus a type hint should be used on the parameter. The function can only return a bool, so a type hint should be used on the return type. Secretly relying on a static Auth::user() function is an unclean coupling, it unnecessarily makes the function impure. The function appears to be in a file by itself, so there is no context for what you are asking it you can or cannot view. It should accept a parameter indicating what you are trying to view or be in a class that provides context about what you are inquiring about.
Yep figured that out when I tested in on Mailchimp. Thanks.
&gt; You use PSR-1, PSR-2, and PSR-4, right? (You're welcome.) I do use it, yes. I knew you are (were?) in php fig, but was not sure how much you had to do with it, so if you actually created it then indeed I thank you for that. &gt; The guys at BitExpert have put together Adroit and Adrenaline. Then there's Equip. Indeed, here's a Gist showing how to do ADR with Laravel (and I think Laravel has support for single-action controllers, which ends up being useful for ADR). I'm sure there are more but those are what I recalled in the first few minutes. Fair enough, though there was no need for you to prove me anything. I am just a random angry nerd who tried to offend you, so props for not taking it and sticking to your word haha.
what's the advantage over something like Twig?
&gt; It looks you're asking for help with Laravel. Do you need some help? Today I feel like the Microsoft paperclip. He just wants to help. =P 
I think this is for the C library and not libsodium_compat?
For what it's worth, I use a modified ADR pattern in my own framework. Go ahead and give him shit for being a bit of a dick if you like, but come on, he's got some good ideas. I mean, not this one, this reeks of unnecessary complexity for most projects, but some.
Good form, sir :-)
I'm running through those same issues at work right now. Thanks for reminding me I really need to take a weekend and get a personal blog up and post some of the solutions I've worked out.
Sure, but the C library is what will land in PHP 7.2 core.
sodium_compat is not going to be audited, unless someone surprises me with a $X0,000 ACH transfer with a note that says "to hire an auditor for sodium_compat". But that's never going to happen.
That's about the response I expected.
Really? You could've saved me so much time...
After looking at the page that was linked it looks like a Twig clone.
Even just using a monospace font would help immensely. I'm not entirely sure I see the draw in having these examples in a separate website. You can just type php.net/[function name] into your address bar and then get the same snippet, but with all the additional surrounding documentation, and any additional gotcha code. \*shrug*
You didn't validate your user inputs, what if someone surprises you with a $-10000 ACH transfer? 
I've been looking at VPNs lately, is PIA a good one to go with? 
OK
http://weknowmemes.com/wp-content/uploads/2012/05/now-kith.jpg
That's fantastic! Wait, what is libsodium?
&gt; but do they have access to privates too? Not MY privates.
It's the only crypto library worth having a considering.
No I am not the author of those classes, as I said in my original comment, the example was from Drupal and in tests, you don't check the result of save(). Your examples with the extra brackets is certainly another approach though in this scenario.
It's something I'd probably never use but since PHP 5.4 you can have static anonymous functions which are not bound to $this. 
Sure, they're like static anonymous methods :). Still have access to `self`, `static` and non-public static methods. You should use it when possible, because it actually saves RAM and CPU when you don't plan to use the `$this` binding :) I sometimes forget, but I try to use it when possible.
&gt; As for the other comment, it requires more attention, which it will receive in due time. Tick-tock.
Probably the best you'll get. They're pretty reliable and professional. The speed of their servers can be utter garbage at times, though usually it's alright but nothing spectacular.
It's also worth considering a having. 
ugh.. clearly there was a horrible typo there...
[removed]
Just keep in mind: https://gist.github.com/joepie91/5a9909939e6ce7d09e29 A lot of the other players in the VPN market like to sell a false sense of what a VPN is good for. If you're looking for privacy, you want Tor. If you need the networking properties that a VPN actually provides (e.g. to safely browse over WiFi or punch through country-specific IP restrictions), then you do want a VPN.
Seems more like an issue your end. Seems to support TLS 1.0-1.2, and has SSL 2-3 disabled. https://www.ssllabs.com/ssltest/analyze.html?d=www.privateinternetaccess.com
Yeah, l ran a test from a separate service and got that same result. It's quite possibly something specific to our corporate setup. Though this is the first site I've ever experienced it on. **Edit:** Definitely related to the firewall we use in some way. Works fine from the same laptop on my home wifi. Strange.
A huge thanks to everyone who worked on this project! I only just started using phpstan after seeing this post and it really helps speed up my development process by providing very readable and helpful error messages.
There was a recent post here with a tool that imported first result from stack overflow API. May be worth looking at?
From https://download.libsodium.org/doc/ &gt; Sodium is a modern, easy-to-use software library for encryption, decryption, signatures, password hashing and more. &gt; &gt; It is a portable, cross-compilable, installable, packageable fork of NaCl, with a compatible API, and an extended API to improve usability even further. &gt; &gt; Its goal is to provide all of the core operations needed to build higher-level cryptographic tools. It's also available in PHP 7.2 (released later this year) or from PECL.
It seems to me, that you now doubt your own writing? I agree that the server never knows there is a user on the other end, or just another piece of software requesting stuff, but where we make the return stuff visually attractive, you can bet on it that it was meant to be for humans in the first place. Where it doesn't, it was meant to be for a machine.
I would say, If you don't like to install several packages, then a *amp or Laragon is handy, simply because it's just one package you install. And then you can have: Apache or NginX as a server, Mysql, MariaDb or Postgress, various PHP versions which you can all switch per project. I like to develop on the same stuff where it is going to run on in production.
What does this have to do with PHP as a language? Stop using this sub for advertising your shitty blog posts.
Don't care, there is Twig 
That would be great man!! I have managed to do that stuff with vagrant, but with Docker I still have some problems... :(
In Twig, I believe you will have to do escaping manually by adding escaping tags or autoescape tags, but this is handled by Latte automatically which uses Context-aware escaping. This allows you to forget about XSS attacks, although if you don't want to escape something just use noescape filter. {$item|noescape}