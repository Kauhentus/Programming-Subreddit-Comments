Sorry I dumbed down my response, good catch...
Is this really how you want to approach feedback? You just got told that you got something (security-critical) completely wrong. This is fine, it happens. Nobody is perfect. But instead of saying "But this is what I always heard, people will surely tell me I'm wrong if I change it!" you should just own up to it, accept that the way you learned it was wrong and change it.
Could not agree more. The PSR are recommendations, and nothing more. Thank you for standing up for this, I am sick of having PSR shoved down my throat.
phpAwait ? maybe not checked if its used.
This article is from 2013, lol.
Thanks for the advise. I opened a PR over here: [https://github.com/docker-library/php/pull/847](https://github.com/docker-library/php/pull/847)
whatyearisit.jpg
Hooray for SOAP!
This deserves a lot more recognition! Thank you u/knnnrd this helped me speed up my development workflow and it works really well - flawlessly so far.
There are a million HTTP clients for PHP; I wanted to make one that adheres to a web standard.
Anything from that list. Please dont give him moneyz
The worst cases of this I've seen are a bit more insidious and difficult to find. I found one for a client who had two systems in separate locations, and one was just using a MySQL connection to retrieve the CC numbers from the database. MySQL connections are not encrypted by default, so it was just sending all of these in the clear. The worst ones are often the hardest to solve.
I'm not turning Dereck into a sait. Linux has sponsors too. Taylor sells services and has a Parteon account where he brings in very decent funding. &amp;#x200B; But I think the real question is, why on earth does this bother you so much? You don't have to look at it, it's on a phpinfo() page for crying out load. I agree that xdebug being an extension instead of a core feature of PHP is something I also don't have an explanation for, but it's the way it is. He puts in the effort, it's his code you are using, he can do with it what he pleases. Placing this in the phpinfo() is IMO a very subtle way to reach an audience.
I'm waiting for packages like Monolog to start throwing in advertisements next to my log outputs. [TIMESTAMP] Some Exception: ... Thank you for using Monolog! We are supported 100% by donations--if you would like to donate, please visit [paypal site here]. I mean according to everyone here, it's out of sight and only seen a few times when I go to check the logs, they're practically not even there!
I have owned up to, accepted it and even changed it, and i am grateful. I thought that was clear in the reply. Please re-read the reply, I think you misunderstood it.
Please don't be a *@#€ and use something like https://api-platform.com so other developers can actually use your service with proper documentation + logic
The whole point of this project is that it's a GUI. If you want a CLI script to scaffold your projects, then build it yourself. Otherwise, let other people use the tools they want.
But is that Junior dev Microsoft Certified®?
Hey! I did this two weeks ago for my docker-php-stack project! https://github.com/phpexpertsinc/docker-php-stack/blob/arch_linux/laravel/Dockerfile#L13
Rule of programming: Code is like a zombie, you can't kill it, cause they revive over and over again. For example: OS/2 is still alive [https://tedium.co/2019/06/13/nyc-subway-os2-history/](https://tedium.co/2019/06/13/nyc-subway-os2-history/) In this case, some systems are still using PHP 5.2, and they even use PHP 4.x Now, if you want to kill legacy code, then good luck with that. Python tried that way and failed. Now Python coexists in two versions 2 and 3.
With dark mode, it's a bit difficult to read some text. For example, error messages (red).
Could you share your setup? I just dropped 50 vars into services.yaml Twig: globals: and it had minimal effect on page rendering speed, even without caching on, vs turning on memcache or filesystem. And how much total time per request are we talking about? Trivial workload vs something that access database as well?
Is there a specific reason for using curl by executing a shell command vs. something like Guzzle?
&gt;Is there a specific reason for using curl by executing a shell command vs. something like Guzzle? yes, it's highload projects. when there is no time to wait for a response from \`curl\_exec\`... when you just need to send and forget.
You can use curl multi request mode
Even in 2013 soap was outdated
Dont want to be rude, but I doubt that someone using pure php would want to use someone else structure.
&gt; Rule of programming: Code is like a zombie, you can't kill it, cause they revive over and over again Headshot for the win, but jokes aside I see your point.
I'm doing something like this at the moment but you need two extensions. You need "PHP Debug" and "Code Runner". My process: 1. Start the xdebug option "Listen for XDebug" 2. Right click my php script and click "Run Code" With this method i can debug and breakpoint php scripts. You can even watch variables ect.
Symfony 4 and 5 are much better - only 13 components are needed when using Flex. Granted that doesn't give you all the functionality Symfony can offer, but it's a nicer starting point.
I don't like that they closed your PR, citing that they don't want to maintain it, then link PEAR in the reasons, which is unmaintained. It's a terribly shortsighted outcome by them.
Kudos to you for putting your code out there! Creating your own framework is a rite of passage for many developers and a great way to learn what really goes into a quality framework. I'm sorry some of the feedback you've gotten has been a bit harsh, but on the bright side you're learning a whole bunch of things you may not have known before and are becoming a better developer as a result!
That's exactly what I needed. Thank you.
This is a bit of a strange one as well. `return ! $silent ? $output : null;` Like...why not just `return $silent ? null : $output;`
Havent looked into Flex at all (ha ent even heard of it) but love Auryn. Guess I should look into Flex.
I browsed through the rest of your code on github and it is absolutely riddled with security issues that are easily exploitable. your project claims "Secure From Rudimentary Exploits: SQLi, RFI, LFI, LFU, XSS, etcetera." and "focused on data security" but it is honestly nowhere near secure and your code suffers from almost all of them and additionally CSRF I'll point out some issues if you want, but you might be in production with it so I won't post them unless this is only in development. it took me a few minutes to login as your admin account and post a test shout. I imagine there's so much more damage that could be done like dropping the entire database highly recommend reading through all of https://phptherightway.com
It's still a work in progress. It is in complete alpha right now. I remember years ago someone had gotten into my project page and royally screwed the whole thing up. I have yet to implement everything in the to-do list. I already know it's vulnerable. I ran nessus scans against the whole system. After I am finished rewriting it and debugging everything I planned to go back around and secure it all. Then I will give a video presentation of the architecture and design patterns.
“12 Nov, 2016”, seriously?
There is also an option outside of your editor. Run a script with: XDEBUG_CONFIG="VSCODE" php your_script.php
Last resort you can use Shell Launcher and create a custom script to do whatever you want.
you can configure the curl in php to do that.
Blogspam, look at OPs post history
 [https://www.reddit.com/r/PHPhelp/](https://www.reddit.com/r/PHPhelp/)
give an example. a page responds 10 seconds, give me an example of a code that will work in 0 seconds. this is used in RMQ Consumer, which processes a large amount of data continuously, will you use hard solutions there, and slow down the system?
Simple solution: You don't. Global variables are bad in every regard. But nonetheless - wrong subreddit
I think one thing he didn't wanted to have libs connected, but still you can do it with file\_get\_contents in really easy way: &amp;#x200B; [https://stackoverflow.com/a/45953280/9537134](https://stackoverflow.com/a/45953280/9537134)
give an example. I think you did not understand where this solution should be used. it is my fault, I did not give examples.
Show me an example of how to do this in PHP: &gt;curl &gt; /dev/null 2&gt;&amp;1 &amp; Or you do not understand why I chose this solution?
Article in vietnamese and some really basic level shit.... uah.
Very useful thanks for your post
Where can I find a guide/reference to learn how to create a custom scripts?
Body of the e-mail *is* just plain text or HTML. Take a mime parser (eg. [https://packagist.org/packages/php-mime-mail-parser/php-mime-mail-parser](https://packagist.org/packages/php-mime-mail-parser/php-mime-mail-parser)), parse the e-mail, and write its body to the page. Be wary that the body of the e-mail is basically a user input, so take measures to protect yourself from XSS etc.
Check VS Code marketplace, type 'Shell launcher'
I copy paste an example from SO. [https://stackoverflow.com/questions/8024821/php-curl-required-only-to-send-and-not-wait-for-response](https://stackoverflow.com/questions/8024821/php-curl-required-only-to-send-and-not-wait-for-response) $url = 'https://127.0.0.1/ajax/received.php'; $curl = curl_init(); $post['test'] = 'examples daata'; // our data todo in received curl_setopt($curl, CURLOPT_URL, $url); curl_setopt ($curl, CURLOPT_POST, TRUE); curl_setopt ($curl, CURLOPT_POSTFIELDS, $post); curl_setopt($curl, CURLOPT_USERAGENT, 'api'); curl_setopt($curl, CURLOPT_TIMEOUT, 1); curl_setopt($curl, CURLOPT_HEADER, 0); curl_setopt($curl, CURLOPT_RETURNTRANSFER, false); curl_setopt($curl, CURLOPT_FORBID_REUSE, true); curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 1); curl_setopt($curl, CURLOPT_DNS_CACHE_TIMEOUT, 10); curl_setopt($curl, CURLOPT_FRESH_CONNECT, true); curl_exec($curl); curl_close($curl);
Just say no to globals
&gt;$curl = curl\_init(); $post\['test'\] = 'examples daata'; // our data todo in received curl\_setopt($curl, CURLOPT\_URL, $url); curl\_setopt ($curl, CURLOPT\_POST, TRUE); curl\_setopt ($curl, CURLOPT\_POSTFIELDS, $post); curl\_setopt($curl, CURLOPT\_USERAGENT, 'api'); curl\_setopt($curl, CURLOPT\_TIMEOUT, 1); curl\_setopt($curl, CURLOPT\_HEADER, 0); curl\_setopt($curl, CURLOPT\_RETURNTRANSFER, false); curl\_setopt($curl, CURLOPT\_FORBID\_REUSE, true); curl\_setopt($curl, CURLOPT\_CONNECTTIMEOUT, 1); curl\_setopt($curl, CURLOPT\_DNS\_CACHE\_TIMEOUT, 10); curl\_setopt($curl, CURLOPT\_FRESH\_CONNECT, true); curl\_exec($curl); curl\_close($curl); Do you really think your example looks good? It runs in 0.5 seconds. \`curl -s -X 'POST' -H 'Content-Type: application/json' -d $data $url &gt; /dev/null 2&gt;&amp;1 &amp;\`; This is done in 0.05 seconds. Tested URL: [https://speed.hetzner.de/100MB.bin](https://speed.hetzner.de/100MB.bin) You understand that speed was important to me?
I disagree Global variables are bad if we don't know how to use it. Some developers have a phobia to global, so they instead of using a global variable, they use some nasty turnaround with containers, injections, and whatnot, that finally, they use global variables in disguise but killing the performance in the process.
Probably someone who feels that the _default_ should come first or something; I can't imagine a different reason.
You could also just use `curl_*` functions if you think `file_get_contents` is too clunky.
I disagree. Global variables are bad because they pollute the global namespace and can be modified by any function/method.
Why don't fork / PR the main Monolog repo?
Bad bot.
Here it comes the downvote. But it is a lie. Pollute what?. It's just a word that means nothing. I have read this chant over and over but it means nothing. We could write ugly code with globals but we could write good code that still uses global. For example, creating a singleton is a breeze with global. **Also, some people don't know but a static field is anti-OOP and it's global (it lives in the "heap").**
`fsockopen` is a much better way of doing fire and forget than invoking cli
Singletons are also an anti-pattern. Code using globals makes it very hard to reason about what the code does and any side effects that might occur. It also makes the function harder to understand from the outside, as you can't be sure that it modifies (or depends on) global state outside of the function's own signature. A large DI-container can have the same issue, except that it can at least control that a value does not get reassigned after being created.
Write apps for clients--features sucks. Write apps for other developers--code sucks. The yin and the yang.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Why promises in PHP?
If you are the only developer and you know what you are doing, globals do work and simplify many things. BUT On the otherside having globals in your code make unit testing a little bit more complicated because you have to know which globals are used inside your code and there isn't a simple baseline way to see which globals are used (except searching for it). I'm not sure what you want to say with the "static fields", sure it isn't really OOP and should avoided like globals and singletons. &amp;#x200B; These patters and guidelines are there to simply future code changes and to make your code more predictable. And your code WILL change no matter what. For the moment if you are using globals everything will be fine, but think about some changes in the future where your global variables are scattered around all of your application. And remember: "Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live."
Great stuff, although I would recommend you look into api platform. It's by far the best api development meta-framework available on any language I know.
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
It is not a personal attack but we have another word that means nothing. Anti-Pattern. Now &gt; A large DI-container can have the same issue, except that it can at least control that a value does not get reassigned after being created. It is the concept of a singleton. &amp;#x200B; class Singleton { private static $instance = null; // it is global but private. public static function getInstance() // it is global too. { if (self::$instance == null) { self::$instance = new Singleton(); } return self::$instance; } } It is anti-pattern but again, this word means nothing. &amp;#x200B; About DI, JAVA has the concept of a container, so the DI is something that lives while the application lives. So it also works as a cache. Java container has a pool of services/objects. While in PHP, a DI-Container lives and die with every call. DI on PHP is sugar syntax and it also uses global. About to avoid global: For example, we have Java for Android. It doesn't have or works with the concept of global, so we must parse the context for most objects. It's a mess.
I am from a backend PHP-laravel background. Thats why used this cuz it was easier for me. But Yes, I would look into that.
I will just use this global variable for php curl
Sure it means something - it means a specific pattern of code that introduces concepts that make code harder to maintain, reason about or introduces non-obvious brittleness further down the line, even if that cost isn't obvious at this time. But you're missing the point when you try to defend the Singleton pattern as the same as a DI - the DI can be configured for that specific method call, while the Singleton can't. This makes it far harder (and non-obvious) to test code that depends on that piece of functionality. I'd strongly suggest avoiding Dependency Injection Containers (and Service Locators) as well, and instead giving each specific dependency to methods or objects that need them, but at least the DIC can be configured outside of the method call for testing, while the Singleton will need code to be ripped out from inside the living object or class (i.e. through mocking). This still does not change the fact that globals are even worse, though. There's a reason why we've introduced limited visibility on most levels of code and data.
It needs a better plan, than just 'lets refactor' https://github.com/Danack/RfcCodex/blob/master/standardise_core_library.md
As it's really simple to implement this in userland, we're just stuck with it forever because adding additional complexity to every single function which performs logic on an array/string/int etc... it's going to be a huge change to the language that many people will just ignore anyway. So then you've got a language with two ways of doing everything, with the Scalar Objects or just using the old methods: ``` $arr = ['a', 'b', 'c']; $newArr = array_filter($arr-&gt;map(...))-&gt;filter(...); ``` Reading that code is going to be a nightmare. Also because of the way that PHP is loose with its types you'd have issues like this: ``` $num = 20; echo strtoupper($num); // Prints 20 $num-&gt;toUpper(); // Fails ``` We also *really* want to avoid what happened to Python, they made a few breaking changes in 2008, and they still have to support version 2 because loads of things still use the old way of doing things.
Google-IT
https://www.php.net/mailing-lists.php https://php.libhunt.com/newsletter http://www.phpweekly.com/
seriously, wtf is this.
Creates an mvc structure, it’s useful to me
Without having read the code itself, I have to admit to preferring the fallback value to be on the right side when using ternary operators.
Nope it isn't just you, and version 1 is horrible also. The entire framework is over engineered, and special interests have colluded to ensure the software remains at heart a fragile piece of garbage.
Please stop implying it is appropriate for non-small businesses, there is no business, from small to fortune 500, who will be better served by any version of Magento.
I'm very willing to join in such an endevor, and the hard part isn't the coding... not by a long shot. It's the design, and set of initial requirements.
Can't optimize over poor design.
We'll have to find a solution that works for Docker but also non-Docker installations. Let's see what comes up as we get closer to the release of PHP 7.4.
That's what I did at first, but installing some extensions proved to be tricky, like `mongodb` that uses submodules. I talked about this in a [previous article](https://olvlvl.com/2019-06-install-php-ext-source).
Some questions: This works with any vanilla PHP install or does it require a specific server config like PHP FPM `fastcgi_finish_request`? Is it `curl_multi` based? If I set up too many promises like an idiot, will my server crash as they all run in parallel or will you chunk them for me? Thanks!
Monolog is not a dev dependency for this package.
you're using composer but not using the autoloader for your own code see https://getcomposer.org/doc/01-basic-usage.md#autoloading to expose your own custom namespace
I will have a look deff on that, I’m using my own autoloader. Thank you.
I just cloned it and tried to run it, but looks like it's not serving content. I can't seem to locate any documentation on how I should be running this. Looks like you're doing a rather homebrewed method of serving stuff, why have you taken this approach?
Man this is such a weird set up for a simple API request site. You've managed to overcomplicate something so simple, but at the same time it doesn't even look like it has much room to be extendable. Use a framework.
I would say use PSRs as much as you can to be aligned with industry standards (PSR-2 for coding standards, PSR-4 for autloading, PSR-15 for Request/response, Bonus - PSR-11 for dependency injection!). A library such as phpcs can also help you tidying up your code.
I will be writing documentation in a few minutes, I'm new to uploading projects in github and writing documentation sorry, I have an interview tomorrow for a jr position any idea what questions i might get ?
yeah, just add "autoload": { "psr-4": { "App\\": "randomchuck/App/" } }, to your composer.json to use composer autoload Also, check out some symfony standalone components. You can start with: https://symfony.com/doc/current/components/http_foundation.html for managing requests https://symfony.com/doc/current/components/routing.html for managing routes (routing is very important, if the symfony component its too complex, you can check https://github.com/nikic/FastRoute)
 **Fatal error**: Uncaught Error: Class 'App\\Controllers\\PagesController' not found in
Remember that namespaces have to follow folder names and structure, and class name has to the same as its file name.
Really interesting, had seen mutation tests already using other libraries (Humbug). Hope someday it will be more common.
Really interesting
If your goal is to learn creating some app and printing Chuck jokes is just an application of it, then I think you're on the right way. If your goal is to print random chuck jokes, replace your whole application by: &lt;?php echo json_decode(file_get_contents('https://api.chucknorris.io/jokes/random'))-&gt;value; You get it, it's way overcomplicated.
Man, I remember the interview process for my first web dev job. They were much more impressed by my willingness to learn things on my own than my actual code style (which was - looking at it today - absolutely horrendous). Don't try to memorize answers unless you're a really good actor. Good luck!
I will try to extend it like search for a joke or something similar, anyway thanks you killed it !
Outline the goals of your app and think of a nice structure. Controllers and 'routers' can do the job, certainly. But try to balance the number of components/files that your app uses to its functional complexity.
Do you know the answer, then?
F, that’s why I made this to show I understand API I have some several other projects but man I will fail
Humbug is currently deprecated. In the documentation I saw recommendation to use Infection.
Thanks for your question. It is designed to work with vanilla PHP. Only basic and minimal composer requirements are needed (for promise implementation). It uses curl_multi behind the scenes. Currently if you create thousands of parallel requests it will execute them as fast as curl_multi will do it. There is no chunking imposed by the library, but you do pose a good question on how this will cope under load. I would like to investigate this further when I have time. Feel free to raise this as an issue on GitHub of you want to; a more technical discussion probably suits the issue tracker rather than here.
Promises are very useful for asynchronous programming, and necessary for compatibility with the Fetch standard and PSR-18.
Very nice article! I'm using infection in most of my libraries. Here's an example of a library where MSI score is 100%: https://packagist.org/packages/drupol/phptree
I came to say just this.
I wish this could be wired up with Codeception...or can it?
I have found Amasty to be by far the best. I purchased their Multi Inventory System which became the basis for the new inventory system in Magento 2.3. I would insist that they be used if there is an extra feature a client wants. I have seen to many disasters with other 3rd party extensions.
It is not overcomplicated. Actually they tried to replicate the approach frameworks are using. So the idea actually is good and things are separated into distinct classes for the good here. But the actual implementation has issues.
Good job in general. You have things nicely separated here which is good. There are some issues though. In addition to what others said about autoload, a couple issues I spotted on: - ApiCall is not a trait. It's a service which is used by a particular controller. So it's better to create a new instance of ApiCall right in the controller. The best solution would be however to introduce a DI container and get ApiCall service from there. - ApiCall is not optimally separated. you have to create a curl service to perform HTTP requests and use this service in ApiCall
data structure and algorithm
The \` header('HTTP/1.0 404 Not Found'); \` in the autoloader should be an internal 500 error.
why does it write htaccess files if im not using apache
Currently probably there is no possibility to integrate it with Codeception. I saw some issues: [https://github.com/infection/infection/issues/45](https://github.com/infection/infection/issues/45) [https://github.com/infection/infection/issues/499](https://github.com/infection/infection/issues/499)
You're using traits to actually get the quotes/provide the API response. Dont use traits for this purpose. Make service classes and use DI
IMO this project could have been done in 2 ways 1) Simple procedural approach with basically just an index.php and maybe a functions.php nothing more nothing less 2) Use a light framework and let dependencies do the work, maybe Symfony, Guzzle, Twig and maybe a little something for the images if he wanted to. The benefits of nr 2 would be expandability, SOLID code with some inversion of control etc etc. The benefits of nr 1 would be simplicity. Now he combined the disadvantages of 1 and 2, with non of the benefits.
I'd like to refer to https://tidbits.com/2019/05/31/the-dark-side-of-dark-mode/ I've been doing quiet a lot of reading and talking on this topic for the past few years, and recently sent out a newsletter on the topic: https://mailchi.mp/04a402b556cf/2-light-themes TL;DR I've challenged lots of developers to try out a white colour scheme for one week. I'm happy to say that many of them actually kept using a light colour scheme after giving it a few days of getting used to it. Light colour schemes are — unless you've got specific eye conditions — better on our eyes. It's the way our eyes are built.
I would think of Java/C++, since PHP shares many syntactic similarities with these languages.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
and get seconds of overhead on big projects as well as incompatibility with all other libs
how is this relevant? If we get scalar objects in, say, PHP8 with all the current core functions untouched for legacy reasons, how does it affect those who still use outdated PHP5.2? I don't see your point
As the phrasing might be a bit confusing: there is currently no one that was interested enough to work on a Codeception support. It is however totally possible to add one in Infection
I was doing a curl request actually but someone solved it in one line, I will be using classes instead of traits and will check DI never heard of it
To redirect all requests to index.php
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
 In this tutorial we explain me how to setup **calculated field** in contact form 7 for this. we need to setup value and label both for Select box, radio button, checbox as well text field. Technically we use [Calculated Fields contact form 7](https://wordpress.org/plugins/cf7-calculator/) for **contact form 7 calculate price** Wordpress plugin. For this you not need to use jquery understanding or anything code understanding for this just need to use in **Calculate Contact Form 7** plugin from wordpress.org. ## How to setup calculated fields contact form 7 For this you need to download plugin from wordpress.org or [Calculated Fields contact form 7](https://wordpress.org/plugins/cf7-calculator/) this link. &amp;#x200B; Just see this [Calculated Fields contact form 7](https://wordpress.org/plugins/cf7-calculator/) Video and install plugin to it will setup is **contact form 7 calculate price** in contact form 7 If you want to need any new feature or any question than you can email on [aradadiya163@gmail.com](mailto:aradadiya163@gmail.com) Pay me some, I will help you for CSS Issue Personally [CLICK HERE….](mailto:aradadiya163@gmail.com)
Btw, it can be used on linux as well ;) [https://docs.brew.sh/Homebrew-on-Linux](https://docs.brew.sh/Homebrew-on-Linux)
If you build PHP itself from source there's yet another alternative: enabling PEAR support back with the \`--with-pear\` flag. &amp;#x200B; [https://gitlab.com/1ma/dockertronics/blob/master/php/Dockerfile.74#L82](https://gitlab.com/1ma/dockertronics/blob/master/php/Dockerfile.74#L82)
Processing the request later requires significant Resources on your side, so that is a bad option. depending on how you define a user, you might use rate limiting function of you webserver, mot_ratelimit for apache might help. If that isn't the route that you like to go, you need ti identify a user within your apoplication and store the requests's along with their time somewhere FAST. You really need to make sure that the limit-checking is way faster than your actual workload. If your workload is heavy stuff that takes lots of seconds, putting it in your database will be fine. If your workload is small and only takes some ms, doing so will be a big penalty you should look into memcache , redis and there like.
See r/codereview.
Did you just insult me by calling me slow and then made up for it by calling me expensive ¿¿¿
Don't JetBrains tools have auto-accept first suggestion functionality with something like `Alt+Enter`?
 Havent used this but it seems viable https://github.com/davedevelopment/stiphle/blob/master/README.md Basically store the requests in a fast storage engine like redis or APC and keep counting. That library also supports APC for a single web server.
push all requests into rabbitmq (or another queue service) and then handle the queue at a controlled rate. This of course only works if everything is async. If you need to provide an immediate response, you will need to keep track of requests per second from the same client and after a certain limiting factor start rejecting.
You get downvoted because you creations are not so awesome as you might think they are.
Look into rate limiting. you can let the webserver deal with an unusual volume of requests.
Bit late to the party, but the project looks very professional, the code is readable, and the documentation is awesome. It serves your niche of moving CakePHP forward in the way you want it to move. There's clearly a ton of work put into this. I wouldn't take a single piece of advice from people telling you not to move forward with this, that "you are not Taylor". You can only become that by doing things like this. You're clearly a very competent coder, and it serves a function. Too many typical programmer attitudes of something being terrible because it's not "perfect". Good luck and keep it up man. It's awesome.
https://konghq.com/ has rate limiting/throttling but would act as an external middleware
I don't, i use my own package to check my code style and syntax. See https://packagist.org/packages/drupol/php-conventions
If you're using nginx it has a great rate limiter built in. Only a few lines of config required. Look up "limit_req" and "limit_req_zone". I'm not sure if Apache has a similar thing.
&gt;requires: &gt; friendsofphp/php-cs-fixer: ^2
Yes definitely, but I don't wait for PHPStorm to tell me where my code is wrong :-)
I would highly suggest you place some API Management software between the user and your backend. Kong and Apigee Edge are the two that come to mind that would some your problem quickly and come with tons of other benefits. I like Edge because it had some really nifty management software and is very simple to configure. For example, check out this video for setting up the Spike Arrest policy which describes denies if traffic spikes [https://youtu.be/3Gi-GGTqllg](https://youtu.be/3Gi-GGTqllg) Additionally, these types software allow you to create more elaborate quota policies, grant and deny API Keys and if you want to get fancy, you should take advantage of their Cache policies if you can. Apigee also has an active community which are always trying to help.
I agree with Tomas: why bother with an integration when you can easily run a command to fix these issues automatically? Also see https://localheinz.com/blog/2018/01/24/makefile-for-lazy-developers/.
Quick-and-dirty: Step 1. Install a Redis instance. Install phpredis (https://github.com/phpredis/phpredis). Step 2. Pick a account-specific key naming scheme. For example user1234_ratelimit. Step 3. Every time an API call is made, check if the value of that key exceeds the number of allowed calls in a given time frame, and if it does, reject the call. Step 4. Increment that key every successful API request from a particular user. Step 5. Every &lt;x&gt; timeframe, delete all of the keys. Notes: This is a quick-and-dirty way of doing it, specifically deleting all of the keys to reset the limit. You could go more complex by storing every request in Redis, along with their timestamps, and counting them all within a given time period, but honestly, it's probably more hassle than it's worth.
That's a bold assumption. I'm guessing you've heard of micro-optimizations, and how they don't actually matter.
[removed]
Sorry for my silly question... what will be a real world case for it? I am not familiar at all with mutation testing.
yes, in most test cases they don't (I still do not like the attitude of adding an overhead where it might be avoided). &amp;#x200B; that's why I added "on big projects", because if you started wrapping every single integer/string/float with a custom scalar object, you would get such an overhead you'd be impressed. &amp;#x200B; that's why it must be inside the language core, which is optimised quite well.
Used wkhtmltopdf. Obviously not ideal since you have to have a binary installed in the system and that makes updating it harder and might work differently depending on the OS. Would've preferred a pure PHP solution. Overall it worked well though.
I run php-cs-fixer as a git pre-commit hook. NO time wasted.
Can you make fillable forms?
I render HTML with CSS @media print that I feed into Chrome headless to generate any PDF I want without limitations.
I believe you can install it via composer now so those issues are gone?
I have used [TCPDF](https://tcpdf.org/), it is a library that has many options for building a PDF file. Something I've come across is to have the ability to measure more accurately on documents that are already preprinted and generate a dynamic header, that is, a header on a certain number of pages and another header on another number of pages.
Headless Chrome recently, as well as dompdf and wkhtmltopdf. There was also a paid piece of software I used at a previous role called PrinceXML which actually worked quite well. &amp;#x200B; Due to the lengthy time it can take to generate PDFs, a standalone solution that offers a RESTful API would be appealing. At least that way the PDF conversion service can be hosted separately in a microservice architecture.
It still installs the binary though via composer. And in our case it didn't work for some reason. Was something with the shared libraries IIRC.
After trying to do PDF’s directly from PHP for the last 10 years, I have given up, I now just use a headless Chrome. It’s remote features are amazing.
wkhtmltopdf is garbage and isn’t even maintained. You want to use headless chrome these days and puppeteer. Just wrap that up in a docker container behind a little express app, exposing a few endpoints and then hit it with your PHP app. I could package this up and open source if there is enough demand.
I've used TCPDF and FPDI - other than the fact that it's the best php lib out there for generating PDFs and it has been abandoned and has security vulnerabilities and that it doesn't support OTF fonts as it claims to. It's pretty good.
Interest shown from my side! Currently stuck in wkhtml and migrating to docker mkght get blocked by this fact im afraid
It's mostly for verifying that your tests are actually sufficient. Even if you have a 100 percent code coverage, that doesn't mean your tests cover all possible scenarios or even test the right things. Mutation testing attempts to remedy that.
I use [https://github.com/mpdf/mpdf/](https://github.com/mpdf/mpdf/). It's maintained and good software, even if it has a big technical dept, it's working on it.
I started using TCPDF recently for a client that needed digital signature applied to the pdf files. I could not find any other library out there that does it. The only issue with TCPDF is that the working library is no longer maintained, the creator posted (some time ago) he is working in a new version, but it does not seem to have anything out there yet. Before TCPDF I used FPDF in many projects. It does the job, no complaints - apart from lack of signatures support.
Is there a streaming PDF generator? Most libs fail pretty fast for large sized PDFs.
I've used TCPDF. [It's such a clusterfuck I'll never use it again](https://www.reddit.com/r/programminghorror/comments/4b3e9z/generating_pdfs_from_regexparsed_html_is/). I recently tried out [PDF Reactor](https://www.pdfreactor.com/). If you can stomach the price, it's really good at turning HTML into PDF. It supports many advanced CSS features and JavaScript magic to generate ToC and make other modifications. --- Speaking of gotchas, page layout often involves tables spanning multiple pages. Smart HTML-to-PDF tools try to repeat table headers across pages for readability, so if you write decent HTML with `&lt;thead&gt;`, you'll get that part for free. Getting familiar with CSS3 paging controls will also improve your layout by keeping related sections together.
Html2pdfrocket which uses html2pdf works great. Being able to convert any webpage to PDF is awesome
Code linting is stupid as hell imo
Given this code: ``` class Foo { ... public function getThing(string $var) { $row = $this-&gt;db-&gt;get($var); $thing = new Thing(); $thing-&gt;setFoo($row['foo']); $thing-&gt;setBar($row['foo']); return $thing; } } ``` There's a bug in the call to `setBar` which is using the `foo` row. But if you've got this test: ``` public function testGetThing() { $this-&gt;dbMock-&gt;expects($this-&gt;once()) -&gt;method('get') -&gt;with('foo') -&gt;willReturn(['foo' =&gt; 'foo', 'bar' =&gt; 'bar']); $this-&gt;foo-&gt;getThing('foo'); } ``` This has 100% code coverage, but doesn't actually test that the method does anything but return something from the database. A mutator will test to see if removing the call to 'setBar()' method actually breaks the test, which it doesn't, so then you're notified that the test isn't good enough. This is a very common mistake when code coverage is a target, people forget to write tests which actually, you know, test things.
I've been down this road a couple of times, but the **best** solution I've come across is the one [recommended by David Hemphill](https://twitter.com/davidhemphill/status/1097889786654789633) using [Spatie's Browsershot](https://github.com/spatie/browsershot) package. So many freedoms afforded when you can design the page. This specific idea is Laravel specific; however, I'm sure their are general packages or ones for other frameworks to achieve the same thing :)
My company purchased a https://www.pdflib.com/ license 12 years ago and we've been using it since. But I honestly don't think it extends or has anything we use that warrants keeping it. But we do, because legacy. At the time it worked great for us and the documentation was extensive - I kind of think that's all we paid for, but maybe I'm just jaded.
Personally I usually use [dompdf](https://github.com/dompdf/dompdf) whenever I need to render/create PDFs.
sure, fair point. Academia won't dispute what you're saying, but, come on. I've seen 700 Redis reads in a single response before, and it added like 50 milliseconds. I really don't think a string wrapper class is going to compare to that.. especially after op codes are cached
Scanning a PDF and converting its text into basic HTML (doesn't need to reflect the exact styling, just headers and paragraphs maybe). Once of my pet project ideas was based around doing this but there doesn't seem to be much consensus on how to do it in PHP.
I've used [TCPDF](https://github.com/tecnickcom/TCPDF) and [Dompdf](https://github.com/dompdf/dompdf), initially, then moved on to [wkhtmltopdf](https://github.com/wkhtmltopdf/wkhtmltopdf). Each of them is sufficiant for simple stuff. Out of the three I prefer using **wkhtmltopdf** through a [small wrapper](https://github.com/mikehaertl/phpwkhtmltopdf). As others have already stated, [**puppeteer**](https://github.com/GoogleChrome/puppeteer) is currently the best available solution though. A useful addition might be the [PDFtk](https://www.pdflabs.com/tools/pdftk-server/) command-line tool. There's a [wrapper](https://github.com/mikehaertl/php-pdftk) for **pdtfk** too from the [same guy](https://github.com/mikehaertl) that did the wkthlmtopdf wrapper.
1. Use Chrome headless and https://packagist.org/packages/dmore/chrome-mink-driver to print HTML to PDF. 2. Same answer. 3. Not using Chrome headless.
It's possible without a streaming PDF generator. I create PDF's one the fly and merge them into a large PDF file with FPDI.
You should cover 508 compliance/accessibility
We use LiveCycle Server. Discontinued by now, I think, but works great.
* **TCPDF** is pretty good if you need really accurate PDF's (e.g. tickets). * If you want to merge many PDF pages/files, **FPDI** does a good job. * If you want to grap an HTML website and convert it to PDF, `wkhtmltopdf` is a good choice. Do not use TCPDF for this task, because TCPDF's HTML/CSS possibilities are limited. * **wkhtmltopdf** is not as accurate as TCPDF. If you need a millimeter accurate position and arrangement, TCPDF is the better choice. * The rendering of **fonts** in wkhtmltopdf is very problematic. The font rendered under Windows will never look like the same PDF rendered under Linux.
So the argument is that it's better never to be told how to improve because it overloads our brain? Not sure I agree. I prefer changing my brain to avoid a mistake than making it every time and having a tool that fix it for me. And that's without taking in consideration the act that the tool can fail. If it makes a mistake, you have to pray that you have other tools that will be sufficient to avoid breaking production. In fact, each time I used Rector, I either dry-run and check every modification or apply the rectors and then check before commit. I think I would like having a Rector plugin in PHPStorm !
Why does it suck? We use TCPDF at work and it sucks.
Am I the only one here still using FPDF ? It's a POS but don't ask me why I know how to use it and it works great...
I've been using [FPDF](http://www.fpdf.org/) for what seems like forever. Mainly use it to generate pdfs from scratch using sql data.
Some of the issue points I've run into are: font support, leading, kerning, superscript, baseline shift, spot colors, page boxes, pdfvt, creating optimized low res pdfs, conversion to other formats, and speed. My use case is somewhat different than most, as the PDFs I generate are for commercial printing. Using TCPDF and FPDI is a pain. There's a lot of weird defaults enabled and PDFs sometimes don't generate correctly. PDFlib is much much better, but the price tag is out of the budget right now. The current solution I'm building out is to make an intermediary json file that is then consumed by a separate Windows Server that uses ABCpdf to generate PDFs. ABCpdf supports pretty much everything that I need, and the pricing is reasonable. And the json file let's me use TCPDF or Unidoc or whatever else comes up in the future. It doesn't translate well in a cloud situation, but for on-site it works well.
Hah, I do and posted right around the same time. FPDF does what i need so haven't bothered to look at alternatives tbh.
Two characters is slow and expensive. You’re wasting valuable time by not using precommit hooks.
also interested!
&gt;I could package this up and open source if there is enough demand. That's not a bad idea, I bet the community would appreciate it.
Something [similar](https://github.com/spatie/browsershot) is already available
&gt; I prefer changing my brain to avoid a mistake than making it every time and having a tool that fix it for me. If the tool fixes it was it a mistake at all? One way or another you'll end up with the same code. If I have a phpdoc with typed parameter and I add that type directly into declaration of function - thus making that line of phpdoc redundant - I don't want to go back to delete it. I often run into cases where one plugin in PHPStorm (or PHPStorm itself) generates code that another plugin immediately marks as invalid for one reason or another. It doesn't mean that it generates wrong code per se, it just doesn't live up to the code standard I've set up. Instead of always correcting these little transgressions over and over I would prefer to have it fixed all. Also on similar note - I don't write nicely and properly formatted code. I simply don't and I highly doubt that you do - why bother with alignment of array keys or if the closing bracket is on new line? Or if there are no unnecessary spaces between parameters? I know how properly formatted code looks like yet I hardly care about formatting it. All I need to do is to press alt+shift+f and it gets formatted automatically by phpstorm. This is the same scenario just different keystrokes.
There is also Gotenberg, which has php client: https://thecodingmachine.github.io/gotenberg/
We actually do this to render image previews of HTML content. It works like a charm. We followed this tutorial: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-in-docker
Yes, but nearly every PHP dev has experience with javascript it's objects. Far fewer have experience with java.
Docraptor API and not write any pdf code.
Wasn't expecting so many replies! Thanks all, I really appreciate it. Keep the replies coming I'm going to cover as much as I can. Really great suggestions.
You can do it automatically with Grumphp. Can't live without it :)
I used to make accessible PDFs through Adobe Acrobat Pro and InDesign (INDD did most of the work but with Quark it sucked). I never learnt if it's possible to do these things with PHP tools/frameworks, but it was a really handy thing to know. Since most of the work was in just grouping content, I almost assume there's an easy way to do it via a tool. Have you run into that? I used… one of the main ones last time I did a PDF project.
I know you prefer FOSS solutions, but if you are building a commercial application, you should definitely investigate PrinceXML or Docraptor (which is a wrapper for PrinceXML). It's unparalleled in the quality of PDFs it generates, and it's incredibly customizable. Yes, $3800 for a license of PrinceXML looks expensive, but it's much, much cheaper than the amount of hours you'll spend fiddling with wkhtmltopdf or DOMPDF or TCPDF. If you can't stomach $3800, use Docraptor which has month-to-month tiers depending on how many PDFs you generate. I'm not related to either companies, I have no financial interest in them, just a happy customer.
My experience is limited up until about 2013 but in the prior 8ish years, I did a LOT of PDF generation: 1. How do I convert my ttf into a font I can use in my pdf? 2. How do I change line-spacing? 3. Why don’t my extended characters work properly (UTF-8)? 4. Why does long user input break my layout? How can I prevent this? 5. How do I make a table, such as a list of items on a bill, that spans multiple pages? How do I draw the lines? 6. How do I get a user uploaded photo into the PDF? 7. Which image quality is best? 8. Why does my PDF take ages to download? How can I cache it? Should I stream from the server or generate on the fly? 9. How do I add page numbers? 10. How do I leave space so I can print the generated PDFs on my pre-printed letterhead paper? 11. Why does my text not look anti-aliased? 12. How can I attach my generated PDF to an email using PHP? 13. How can I make certain parts of the PDF editable? 14. Why can’t I take the editable PDF fields and post them to a PHP script? (yes, this was a real request from a customer!) 15. How can I password protect my PDF? 16. Why are your formatting changes taking so long? I can make changes much faster in Microsoft Word! 17. Why doesn’t text flow around the image I want placed wildly in the middle of my page? 18. How do you account for positioning differences when generating PDFs in different languages? e.g. Only leaving space for the word “Bill” when the German translation is “Rechnung”. 19. How do I right-align, center, or justify text? I could go on, but I would only get more annoyed with my bad life decisions. Hope this helps!
This looks awesome. I will definitely be using this in my next project.
How to digitally sign the document to make it tamper proof, and verify it in for example Adobe reader 😊
Going to focus on FOSS just for the sake of being able to easily demo them for readers. But will definetely mention paid solutions.
My own experience has always been rendering HTML into a PDF. I worked with some code that did some fancy graph things to preserve a JS graph tool's output in the PDFs that was pretty slick.
oof, I don't even know if this is possible but I'll make a note to look into it!
We use fpdf, They have the best documentation really 😂
You don't need puppeteer and express if all you're doing is generating PDFs. Open a websocket to chrome headless from PHP and send this https://chromedevtools.github.io/devtools-protocol/tot/Page#method-printToPDF Or if you really like dependencies: https://gitlab.com/DMore/chrome-mink-driver#rendering-pdf-and-screenshots
Opening a pre made pdf and filling it out with web data is stupid expensive using PDFLib’s arcane concoction of 3 different confusing plugins and 15 year old website. It also takes hours of tedious experimentation to get things to line up correctly, and you can’t fill a dynamic amount of text from page to page in any sane way. The only way it’s even marginally sane is if you force a mono-spaced font.
Thanks for introducing me to Particle/Filter! It looks awesome! http://filter.particle-php.com/en/stable/
Nice, glad you like it. I am just seeing if there is a better one around For Validation I like [https://respect-validation.readthedocs.io/en/1.1/](https://respect-validation.readthedocs.io/en/1.1/) &amp;#x200B; And one that has both, GUMP [https://github.com/Wixel/GUMP](https://github.com/Wixel/GUMP) I am just trying to figure out if there is a better one before I commit on a project
That sounds pretty cool! My php experience was with absolute positioned text/images—HTML sounds so much nicer! Can't wait to see the 2019 way to do it. -- Since the main (relevant\*) issue in converting print to PDF was in the random positioning of items. It would break Acrobat's perceived Reading Order of content. Maybe that's not even an issue with HTML's document order and semantic markup—or even divs blocks. \*Besides text in images
If you need what basically is a virtual machine to generate PDF, then I think a better solution should be built..
I am reviewing Symfony/Validator [https://symfony.com/doc/current/validation.html#supported-constraints](https://symfony.com/doc/current/validation.html#supported-constraints) I tend to get frustrated with how their documentation is written. Initial response time for validation seems good, however.
The Laravel collections API is pretty comprehensive and full-featured, and the collection API is also used for the data layer which makes for some pretty cool abilities. You can do things like filter on a query, get data, then use the same API to filter on the returned collection for further segmentation. [https://laravel.com/docs/5.8/collections](https://laravel.com/docs/5.8/collections)
One of the member opened a PR to enable PEAR until PHP 8.0. Let see if it gets merged. [https://github.com/docker-library/php/pull/851](https://github.com/docker-library/php/pull/851)
Installing that package and running several commands with it was nice. Only loaded 5 files to my load and gave me the quick response time.
Another silly question, say a mutation modifies an operator from equals "==" to equals or greater than "=&gt;". An exclusivity operator is now more inclusive and may allow an assertion to pass. I'm trying to wrap my head around how you would defeat this mutation.
Being old has nothing to do with it. I'm a 60 year pushing my businesses systems into 7.3, because it needs it for long term evolution. He may simply be a pragmatist based on the type of work he's doing
Only ever used wkhtmltopdf because I’m not allowed to use composer or install extensions. ¯\_(ツ)_/¯ Never had issues like others describe, but I always use the most simple form of 100% inlined css markup possible (using the same version that I’d send via emails) before running it.
Would be amazing if you could do that
I work with several people with your same sentiments. I sure wish I didn't!
Upgrade notes are at https://github.com/php/php-src/blob/php-7.4.0alpha2/UPGRADING. This release implements the Numeric Literal Separator RFC that was recently accepted.
There's always [Aura.Filter](https://github.com/auraphp/Aura.Filter). (I am the project lead.)
How does this differ from phpvcr?
You don't need to be kind and rewind
Typed properties. Nice.
Appears to be more verbose for one. phpvcr basically just captures and repeats HTTP requests whereas Guzzler appears to act more like a traditional testing framework and allows you to specify things like how many times the request needs to be made. It also appears to require much more code to implement. This also seems to only work with Guzzle, while phpvcr works with everything I've thrown at it.
I didn’t like that Browsershot required Node and puppeteer locally. For us, isolating those dependencies all within a rocket container and exposing API endpoints was a win. Additionally, we can hit that same microservice from other apps as needed.
&gt; Added support for limited return type covariance and argument type contravariance. This is really cool.
Guzzle’s MockHandler works pretty well for me in Laravel tests, so I am an advocate of the approach, I am not sure Guzzler adds a lot of value into Laravel tests though given TestResponse supports a lot of these assertions out of the box. Also the $this-&gt;once() stuff is weird, that’s a pretty generic method name to add via a test trait, and like nothing else in phpunit.
Did esignature implementation with FPDF, FPDI.
 . Added support for unpacking inside arrays. For example: &amp;#x200B; $arr2 = \[1, 2, ...$arr1, 5\]; &amp;#x200B; YES!
I'm a big fan of MockHandler as well. We've begun moving all of our PHPVCR stuff over to it. Just easier to work with wise of unit tests.
What did you use for your documentation/site? Its clean.
Indeed, when we talk about formatting or PHPDOC, there is hardly any risk. However, your examples were carefully picked. The tool promoted by Tomas (Rector) can be used for a lot more than that. In the article, in the end, the example is vendor/bin/rector process src --set php74 If i'm not mistaken, this command helps migrate old and deprecated syntax to PHP 7.4. I couldn't find the exact rectors applied for this case, but just to give an example. Here is a link to the recors in the "PHP" list: [https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md#php](https://github.com/rectorphp/rector/blob/master/docs/AllRectorsOverview.md#php) &amp;#x200B; I wouldn't apply them with my eyes closed, or without a very, very extensive test coverage. Even less so when I didn't took time to analyse myself every rule. Once I checked every case, my goal will be to try and remember those to avoid the mistake, not telling myself "cool, I can now do this mistake every time, it will fix itself".
The `once()` looks te be inspired by Jest.
wont work with my ninx
Duplicate images and filesize. A pdf with ~500 pages and full-size background images (Let’s say around 10 different backgrounds in 1 file) will become very big, really fast! PDFs can reuse images for this purpose. Haven’t gotten around to figuring out how to do this from PHP though. Looking forward to your article!
Doesn't work with keyed arrays though, which is a huge limitation.
My thoughts exactly!
Hope they will make it possible in next realeses
Protip for others, throw clearlinux in a vm and dump the php info. The CFLAGS it was built with were from running PGO with zend benchmarks. No need to make your own PGO multipass make. Then you can build php with truly optimal options for max speed.
Why is it better than chrome headless? Back in the days where no webkit was available ok but now? Im pretty unsure about their rendering engine vs webkit
Its not because the encryption doesnt work and is shit. Dont waste your time.
I don't think Infection performs that kind of mutation.
It may not be exactly what you're looking for, but I solve the same problem using the [Functional PHP](https://github.com/lstrojny/functional-php/blob/master/docs/functional-php.md) library. Most issues can be expressed using simple combinations of `filter`, `map`, `flat_map`, `some`, etc.
$this-&gt;once() is available in PHPUnit mock library.
I'm not the author sorry! But a bit of browsing and here is the source - [https://github.com/blastcloud/guzzler-docs](https://github.com/blastcloud/guzzler-docs). It's using Vuepress - a static site generator.
Fair enough, I guess I’ve never come across that, I use Mockery
wkhtmltopdf, but AFAIK it still can't do SVGs. Currently using headless Chrome and it's great to convert HTML to PDF.
They did! Nice.
&gt; $arr2 = [1, 2, ...array_values($arr1), 5];
Looks like Particle filter expects just array as the input, that would be problematic if you're doing something like transforming a large CSV, looks like it's not first class in that library to search by closures either, that would make searching by value or by calculation harder than it need be &amp;#x200B; I would use [https://github.com/mtdowling/transducers.php](https://github.com/mtdowling/transducers.php) instead
We use and maintain browsershot (https://github.com/spatie/browsershot). Painless PDFs
Browsershot isn't Laravel specific ;)
We use Prince (PrinceXML) to get a html Page to PDF
I know it sucks but it's only gonna help the framework become better dude, keep going :) looks awesome so far
Great stuff, mocking guzzle can be very problematic as it's very dependent on whether you're using PSR-7 requests, or its \`request|post|put|...\` interface, etc. Which shouldn't matter.
This is great, something definitely worth including on the official PHP image. &amp;#x200B; That being said, if you really want to make your life easier simply use a base image that has the php version and extensions you need on its repositories already. I never use the official images.
Nope! Still going strong. It's an old, reliable workhorse.
[Yes](https://3v4l.org/jDLei)
Thats awesome, saving that site for later thank you!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Ah you're right. Edited :) Thanks Brent!
It's been a while since I've messed with headless Chrome, but that's essentially it: I had to mess with headless Chrome. With Docraptor, it's a simple package installation from Packagist, and I'm up in running in 10 total minutes with nothing to maintain.
Yes its been a while but now you just start it. Google maintains chrome very good.
If you've never used 3v4l then you are in for a treat. It's an amazing resource.
Because people and company shouldn't use php 5.2 anymore. They should move to 7 or 8. So, every change to the core makes it harder. For example, I have a legacy code that uses &amp; as reference. &amp;#x200B; somefn(&amp;$a1); function somefn(&amp;a1) { } Using &amp; to call by reference was changed, so it is hard to change the code (ok, it is not as hard, I must remove the &amp; from the caller). However, my customer must change this legacy code, sooner or later. Now, if we are changing features of the core, then we are doing harder the migration. Or my customer could keep 5.2 forever (and he is doing it that).
Now we just need a read only modifier.
Windows dev here. I hope it will not break the compatibility with current extensions.
IMHO, I use tabs instead of 4 spaces but I have an open project and some developers complained about it. So, I ran a script, it changed the code in 3 seconds and that's it!. Problem solved. What was the earning? nothing but it's about teamwork and "standard". Now, is it worth to run it constantly?. Not really and I agree with this post. Also, I have seen developers that spend so much time fine tuning and running their system with unit test/ci/cd/docker and whatnot (including updating composer every day, SHEESH!). PHP is great because we don't need a compile-cycle, we could check the stability only a couple of times per day if not once per day at most, not every 5 minutes and not for every new feature. The goal of ci/cd is speed, nothing more and nothing less.
The way I've implemented is very ugly: using the set magic method to throw an exception. I would also love to see automatic properties. They're really usefull when you don't need any logic in the property accessors.
I wish it was within PHP itself. It would save me so much time.
Would have saved me weeks.
It's taken them 7 months to go from beta 2 to beta 3. If it weren't already common knowledge that you should not be using Codeigniter for a new project then that would be a massive indicator.
It's awesome that Arnaud and Ondrej are working on this! If you want to use generics today in your codebase, check out [Psalm](https://psalm.dev/docs/annotating_code/templated_annotations/) or [Phan](https://github.com/phan/phan/wiki/Generic-Types). On top of the functionality described in the above blogpost, Psalm and Phan also allow you to extend (`@extends ArrayObject&lt;int, string&gt;`) classes with templates. That functionality is incredibly useful day-to-day, particularly when working with already-templated collections like [doctrine/collections](https://github.com/doctrine/collections).
I met the author of this library after he came to my Guzzle talk at LonghornPHP last month. He's a nice dude and he demoed this library for me. It's a great little tool and can add some great testing functionality to an already great library.
Just use my GuzzleMock: https://github.com/phpexpertsinc/RESTSpeaker/blob/master/tests/GuzzleMock.php
I just use annotation: * @property-read string $name It only gives me static checking but that's enough for me. It is also kind of nice that you use it not only for explicitly declared properties but dynamic properties return by __get as well.
That's what I use: https://github.com/phpexpertsinc/RESTSpeaker/blob/master/tests/RESTSpeakerTest.php
This tore up some old wounds. Every line I read I felt it deeper.. PDF is a terrible format. Headless Chrome all the way if I need anything in PDF format
Also used wkhtmltopdf and exec'd that shit. Not very sexy. Does not play well with CSS3 from what I've seen and heard. Recreated the bootstrap rows cols structure for a single PDF. Woe is me
I'm a bit confused. What's that terminology from? (e.g. "template" generic variable) C++?
&gt; What's that terminology from? (e.g. "template" thing) Originally suggested by /u/mindplaydk in 2015: https://github.com/phpDocumentor/fig-standards/pull/81, then adopted by Phan, and then Psalm. &gt; ANY efforts to add generics to PHP template based? Wont that terminology by mighty confusing when generics arrive (or better yet true parametric polymorphism) I don't think so - `@param` and `@var` types were used a decade before scalar typehints became available. If/when the language adds new terminology, I'm sure tools will adapt. For the moment this is the best we have.
Neat! Is it (or will it be) compatible with psalm? I think psalm uses custom prefix for these things so it would be shame if one had to write the same thing multiple times with tool specific syntax.
You don’t need to use a custom prefix in Psalm - that’s just available if you don’t want to confuse tools like PHPStorm and (until all these features are released) PHPStan.
I think the blogpost is more focused on his other tool - Easy Coding Standard that deals with the more common annoyances like those I described plus many more. Rector is one time tool that gets from A to B while this is more about checking that you don't deviate from A in the first place. I don't think there's an use case that would've benefit from Rector in your pipeline. Running it should be a conscious choice and once you've done that you can pretty much delete it as it's no longer useful (of course Rector has many different rectors but you should use each of them exactly once and not more). I don't think it exists so you can write your code like it's still 5.4 and in that regard I agree with you. But I work with old codebase and for reasons I can't really *clean it*. Everyday I run into dozens of yellow warnings I need to deal with but I would be more than happy to turn all of those inspections off and let the ECS deal with it at once. When it comes to new code - I do plenty of mistakes - or rather code is developing over time and sometimes those mistakes materialize without my input. Code formatting being the most common and most obvious one but not the lone one. It's not that I don't know what is wrong with the code - I just don't want to deal with it again and again and I don't want to be reminded that the issue is there - I may be well aware of that - but once there is that yellow notice I can't help myself and I need to go and fix it. It's more about perfectionism rather than being stuck on some level of knowledge.
All I can say is that this is a really neat piece of software that does one job and does it well. Something to keep in mind for if I ever write a huge API.
I'm not sure PHPCS is the right tool for that. Using PHPStan, or Phan to detect problems with code are much more likely to produce sane results.
There are discussions regarding this currently, and we plan to change the terminology once an agreement has been reached / before a stable release. “template” is not the right term, since generics are not template-based.
I hope PHPStorm adds support to match this as well.
Exakat is pretty good at this sort of thing too.
I'd recommend tool I work on Rector. It's perfect for cases like this and it can fix them for you: [http://github.com/rectorphp/rector](http://github.com/rectorphp/rector) &amp;#x200B; Create issue with before/after code, then it's easy to implement :)
You can check the changes to PHP Extension API in this UPGRADING doc: [https://github.com/php/php-src/blob/PHP-7.4/UPGRADING.INTERNALS](https://github.com/php/php-src/blob/PHP-7.4/UPGRADING.INTERNALS) It looks fairly ok. Derick mentioned he had to change a lot for Xdebug PH P7.4 support, but extensions that I am working on were upgradeable without many changes.
By Joe hes cracked the code!
I though symfony killed flex?
If it would've saved you weeks... maybe you could do something about it. Dunno. Code generation, whatever...
Same situation few years ago, I've ended up using jasperreports with success for most of the issues you've listed. Just published a doc: [https://belgattitude.github.io/soluble-jasper/](https://belgattitude.github.io/soluble-jasper/) . It might not be the easiest way to install. I wish I had more time to develop a standalone server with spring-boot or provide a docker setup. But once you got the jasper principles, it still works quite well. Contributions, ideas are always welcome, alone I won't do it. An alternative also is JasperStarter, works CLI. &amp;#x200B; Otherwise my feeling about tcpdf, fpdf and consorts is that it's too low level. Chrome based approaches are fine, but lacks the ability to really manage pagination, break pages... When it's not needed they are ok.
I was hopping to use PHPCS since we already use it as our primary linter, but have been using Phan for some compatibility checking. I'll need to keep refining Phan's configuration because it flags a lot of things we are not concerned with.
I faced pretty much what u/thesecretdave described @[https://www.reddit.com/r/PHP/comments/c5r8tr/what\_questions\_do\_you\_have\_about\_generating\_pdfs/es45na6/](https://www.reddit.com/r/PHP/comments/c5r8tr/what_questions_do_you_have_about_generating_pdfs/es45na6/) &amp;#x200B; So to your questions, I would mention the same gotchas. &amp;#x200B; Pure php solutions are generally too low level and chrome-based ones too high ;) Sometimes you need better. I link here some work: [https://belgattitude.github.io/soluble-jasper/](https://belgattitude.github.io/soluble-jasper/) I've ended up developing that long time ago for specific requirements. That was nice, but with some efforts it could be possible to make it much easy. Got many ideas, but not so much motivation to work on PDF in 2019, at least alone... &amp;#x200B; Good luck for your article, I'll be happy to read it.
I have used TCPDF, I seem to recall having to rebuild PDFtk for a really old application that used it, and currently using wkhtmltopdf. I have my eye on maybe using Jasper Reports in the future, maybe through belgattitude/soluble-jasper, or cossou/jasperphp. And a previous discussion: https://www.reddit.com/r/PHP/comments/764whz/best_library_to_create_pdf_from_some_sort_of_html/
Thanks for your comment :)
What's your goal?
That was the solution... but writing code generators for every time when generics would have saved me time, is not my idea of a good time.
Nah the idea is you have generators, and then you don't write anything, it generates for you. Would something like this be popular with the PHP community? I have a toy like this somewhere, but I just didn't explore it serioulsy.
You recreated a bootstrap structure?! Isn’t that like setting fire to your house after already having burned it down?
The compony I'm currently working in uses [ezpdf](https://github.com/rebuy-de/ezpdf). They believe it's superfast so that's why they chose it.
It's slow because it sends each .php individually to phpcs, and it does it twice (try inspecting a folder). Something to do with embedded languages. This is an issue for me because we have a complex custom sniff with no auto fix.
A little late to the party here but I'm the author. As another commenter posted, yes this was just a tutorial. We did another image for swoole as well as it does support multiple threads. Arguably currently other languages can take advantage of this a lot more than php can (but that looks like it's changing). &amp;#x200B; As for why you might want to do this: * security - These run as a single process with no users or shell meaning you couldn't install something like a crypto-miner on that host or do something as simple as mysqldump. * ease of use - Two commands gets you a live instance on google/aws. Vastly simpler than something like docker and imo a lot simpler than traditional apt-get install. * performance - Again I can't speak much for php wrt as php is traditionally single process/single threaded to begin with but in general these will run a lot faster since there's dramatically less context switching.
&gt; a complex custom sniff with no auto fix. I'm curious. What exactly does the sniff do that cannot be automated?
&gt; a complex custom sniff with no auto fix. I'm curious. What exactly does the sniff do that cannot be automated?
&gt;people and company shouldn't use php 5.2 anymore Yes. What you say is that developing new features will make harder to switch to the new versions of the language from the unsupported legacy versions. I would say it is a minor thing to be worrying about it
How would you actually know if Tor website has its equivalent in clear net? The only solution would be to map onion domains to clear net domains and then check clear net ones. But if you only need to check if website is Tor website, you need to check if domain ends with `.onion`.
How do generics save time? (actual question)
Yes, we plan to read @psalm- prefixes for already annotated code as well.
[By Jove](https://en.wiktionary.org/wiki/by_Jove)?
I need to check a few .onion links from a clearnet site. Maybe this wil help your understand https://dark.fail/
[https://youtrack.jetbrains.com/issue/WI-47158](https://youtrack.jetbrains.com/issue/WI-47158) &amp;#x200B; This issue is getting a lot of track and the team has said on Twitter they're talking about it internally.
No, Flex is the newest version (Symfony 4). They killed the symfony/symfony always-install-everything
There are lots of very different situation where typing with a generic type could help you, by either: * avoid creating many different types (for example, a collection of type T, using generics, you write it only once) just because you need to support different types on the same method, * mentally, it allows you to explicit some patterns you cannot otherwise, * you to actually type something you wouldn't type otherwise in PHP, and that saves a lot of time in testing and debugging, because you cannot silently give the wrong input and your code cannot silently fail 10 function calls later. And that's probably not all, generics is very useful to type something and make it flexible at the same time.
It inspects PHPDoc and function signatures and adds warnings where PHP7 type declarations are missing and could be used. Needs to be carefully fixed manually. It also checks if PHPDoc is useful and requires documenting array variables.
Awesome, thanks
they killed Silex.
Why not use type hints?
There's a proof-of-concept/joke library that replaces code through composer plugins to achieve this: [https://github.com/ircmaxell/PhpGenerics](https://github.com/ircmaxell/PhpGenerics)
Well I mean something more practical that won't break IDEs.
So you want something like [dark.fail](https://dark.fail/) does? In this case, you have two options. &amp;#x200B; First option it to run Tor client yourself on your own server. Make sure that your hosting provider allows this. You then need to route your CURL request via Tor, like [here](https://gist.github.com/sxss/acfdce73976f219a6695) or [here](https://gist.github.com/zachflower/5528052). Then just check if site is accessible, like for any normal site. CURL traffic will go to Tor network, so Tor sites will be accessible. &amp;#x200B; Other option is to access Tor website via [Tor2Web](https://www.tor2web.org/) instance. Most popular instances are listed in website I linked. Just note that your traffic will not be anonymous and instance can go down at any time. To use this, just replace \`.onion\` with URL to Tor2Web instance (like \`.onion.to\`) and try to access this site in CURL.
Thats the one
The Documentation
https://phptherightway.com/
In addition to the official documentation, [PHP The Right Way](https://phptherightway.com/) is highly recommended. For a video crash course on PHP fundamentals, check out [Laracasts](https://laracasts.com). If the API is built on Symfony you might also find [SymfonyCasts](https://symfonycasts.com/) useful. Laracasts focuses on Laravel specifically alongside general PHP and software development topics.
Thank you!
If you're familiar with Laravel you probably won't find Symfony that difficult to get to grips with, while they have a different philosophy in places they have many similarities and Laravel builds on many of the same components. I would strongly recommend reading through the Symfony documentation from start to finish, it really won't take that long but it is always a good way to get an overview of a framework. There's no need to follow along with examples as you read through, but once you've read it, set up a simple application to familiarise yourself with it. There's an official [demo application](https://github.com/symfony/demo) that's well documented which is worth going through once you've read the documentation. If you enjoy video content, you can check out [SymfonyCasts](https://symfonycasts.com/). Be honest about your experience in the interview, but demonstrate your willingness to learn.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
It's a brave new world of PHP my friend. Using multiple great tools is the way to go instead of trying to make one great too fit many shapes. Depending on the project I use: PHPunit, PHPCS, PHPStan, Infection, and Phan.
I once proposed on the PHP mailing list that they add the syntax for generics without type-checking at runtime. So we can at least have it in out editors and other static analyzers. They didn't like it. : (
Quite funny to see people who wants more types actually ditch types.
Umm, how to handle page breaks and overlapping content/formatting?
You have 6 days, that is enough time to read up the documentation (so you have a clearish understanding) and whip up something, maybe a quick to-do list, using Symfony. &amp;#x200B; You don't need to be an expert (there's no shame in telling your interviewers that you haven't used Symfony before, so they'll understand different levels of proficiency) - but going into an interview you know is for using Symfony, and not having at least an overview, is taking the piss.
example syntax? I didn't see it.
Great info. thanks
It's in the [RFC](https://wiki.php.net/rfc/typed_properties_v2): &amp;#x200B; class Post { public int $id; public string $title; }
huh cool. I know they had that for functions, this is for the actual variable? would this code by valid or does it have ot be part of a class? &lt;?php int $a = 1; ?&gt;
Heavy traffic and WooCommerce, is that a good idea? For the long term, I would go for Symfony or Laravel. For the short term, Laravel or Symfony.
Does WooCommerce not scale well? I'm leaning towards Laravel + Bootstrap 4 + OpenCart. Or CodeIgniter + Bootstrap 4 + OpenCart. Read a post today saying CodeIgniter is outdated though. I'm not 'proficient' in either of them, but have created one CodeIgniter site fairly easily, and did a Laravel tutorial a long time ago. I remember being blown away by Laravel though.
Not yet. This RFC only target first-class property type declarations.
Yes. I always imagine that someday a dev will get an exception while using that property and be thankfull for that!
CodeIgniter was hot 10 years ago. They got some scrubs managing it now.
If you're wanting something quick and easy (You're mentioning wordpress and woo) why not use a tool like shopify? You'll get a better product and not have any management.
They need massive fancy design customization of the front-end and integration with Sage POS. Not looking for 'quick and easy'. Looking for doable and scalable.
Supposed to start from scratch and work your way up. Idk you tell me.
If you're a large company and will be dealing with heavy traffic, then it would be best to build someone standalone. Don't rely on prepackaged tools like WooCommerce which don't really scale that well. Hire developers, or use the ones you have and build something custom, lightweight, scalable, and modular. Upfront costs will be higher as well as ongoing costs such as refactoring, etc. However, in the long run it will suit your company the best. One of the coolest scalable shop solutions I've seen was using [Grav](https://getgrav.org/). The entire site was committed to memory so it loaded crazy fast. It has a package manager, so downloading and installing features was done by a simple command--then you just started hacking away. Under stress tests it was able to handle several hundred thousand concurrent connections before there were issues, and that was because the server memory was reaching its limit. Was a pleasure to work with.
Beachcasts https://www.youtube.com/channel/UCsOSGYawy8MG9Mh8NKgRHZQ
Appreciate the explanation. Thx.
Neat. I’ll look into that. Large company, hiring a small company (us) to do this. Tend to hundreds of concurrent connections. Not thousands. Looking into options with an open mind. Sage connectivity is a requirement. We are too few in number to code that from scratch as well...
So when dealing with hundreds of concurrent connections the way that data is served is (IMO) way more important than the type of data being served. So taking an efficient approach here will set the groundwork for scalability in the future. More than anything else, exploring your options with an open mind will lead to your success, that's for sure. Good luck!
I did this with Shopify plus and sage 500. You can customize the front end too. But Shopify plus is like 2k+ a month. I run major sites with it. That said, I agree that staying away from WordPress and woo for a large site is a good idea. Full custom I'd go laravel for sure. Write your own cart, its not that complicated and then you control the entire experience as the client feature creeps.
I think classes should be without any framework.
If they do not have any programming background, frameworks will be too much for them.
...agree with [chaoszcat](https://www.reddit.com/user/chaoszcat/) ...probably to much
I really think you'll be fine. Read through the Symfony documentation. Maybe watch some SymfonyCasts. Good luck!
When I took classes I genuinely hated the ones that taught frameworks, because they were teaching me less about how to The Thing and more about how to use a tool that made it so I didn’t have to know how to do The Thing. Drawbacks to this are obvious, because outside of that tool my knowledge of The Thing is useless, and I’ve spent a lot of extra time and money to learn and fix that away from a University.
WooCommerce + WordPress will scale well with the proper hosting and server setup. Dedicated db server, dedicated webserver (nginx) + F5 and you should be fine.
Fantastic link
Without framework to get the base first
**Don't touch OpenCart**, except to laugh at it. The lead dev is an incompetent toxic asshole, and the code is pure garbage.
Definitely without a Framework. Everyone should understand the basics before he can really use it.
In TCPDF using `checkPageBreak()` before you print content with `MultiCell`works quite good. MultiCell works also good to prevent overlapping content.
Dude, relax. Laravel is based on Symfony. Just say you may need a week of adjusting. They'll understand. Developers are in high demand, remember that.
For a quick intro, take a look at https://learnxinyminutes.com/docs/php/
I agree on that, if you have the proper hosting, wich will be very expensive. Tried once to setup something with a hosting provider. Multiple providers told me they won't do WooCommerce + WordPress because of bad experience.
OpenCart has also it's limits. Using WooCommerce or OpenCart is fine if you start and don't expect to much orders. Say max 100 a day. If you expect more then 100 orders a day, I would start looking at some more advanced stuff. Build your own with eg Symfony or Laravel. Maybe use Magento (not a fan of it either). In the shortterm, Magento might get you started quickly. In the longterm I think it will be more expensive.
PHP does not support generic type hints.
As the others already gave out a few tips, here is mine: be aware of fanboys. There is nothing worse than being confronted to people that are fan of X and hate everything else. If they are good, they should know you can be a good developer and develop good apps with any framework and not discriminate you because you used Laravel. If they just think Laravel is trash and any of their users are unskilled, I hope you both have the privilege and opportunity to look another place.
If you really understand the concepts behind the frameworks you should be fine.
&gt;I am very experienced with PHP, but only used frameworks like Laravel so far. What do you know about HTTP? Caching? Databases? Testing? JS? AWS? ... The framework would be the least of my concerns when hiring.
Only ever use it to inject vendor/autoload.php..
I would suggest just sticking to PHP and placing in some general programming stuff like Data Structures, Conditional Statements, good coding standards and naming conventions. You can also go into OOP. Once they know PHP and OOP, they'll have a good bearing when they finally enroll a course or self-teach PHP frameworks. A good final project or exam is that they would create a web-app based on PHP with User Management so that you can also get into good security practices.
Your tutorial is not covering a pretty important feature. You should look into combining return statements with include statements. The language even optimizes this between PHP processes.
Sounds like you are not initializing the $number variable....
Is $number set before you use it? Does this work? `$number = 0;` `$number = $number +1;`
Actually I did, but it turns out I didn't set a numeric value to it. Thanks a lot!
Yes I just tried it, I just didn't set it to be = 0. Thanks anyway!
You can't add 1 to $number if $number hasn't been declared yet. &amp;#x200B; `$number = 1;` `$number++;`
So I can also use ++ just like in JavaScript ? Huh, interesting. And it turns out my problem was not setting $number to have a numeric value (0)
Sure, here is some documentation on that: [https://www.php.net/manual/en/language.operators.increment.php](https://www.php.net/manual/en/language.operators.increment.php)
Thanks for sharing!
Actually you didn't. Give a choice whether its's you or a computer is wrong, always choose the former.
Thanks for reading the sub sules and not posting noob questions here.
I'm sorry, but I don't get this? Your README is completely bare, and I don't even see any constants representing HTTP status codes. It's a bunch of weird RFC interfaces. Could you post examples on how you expect this to be used, what value it brings,?
These strings are not magic - they're not going to change. They're well defined, so I have no idea why using a library for the constants are going to help.
Vue Storefront + Magento 2
This kind of library makes me think of those little npm dependencies that do virtual f-all. Relying on a third party library just for these constants make me cringe. I think the library is more likely to change before the methods.
Just for trying out I have a local sandbox project I can just throw random stuff into to play around with features I don't know well yet, or to see if something works like I expect it to. r/laravel
Remember that $number isn't even a number until you put a number in it.
There's clearly an advantage to using constants instead of otherwise _magic strings_: * with magic strings you are missing intent (is this an HTTP method, or what is this?) * with magic strings you can end up with typos * when using constants, you benefit from auto-completion (in addition, you will find documentation and links for further reference on the constants) * you can search for usages of constants * you won't have any typos (yes, happens, the reality is that most people do not write tests) Also see * http://wiki.c2.com/?MagicNumber * https://en.wikipedia.org/wiki/Magic_string As an example, the package [`symfony/http-foundation`](https://github.com/symfony/http-foundation) defines a * [constants for HTTP request methods](https://github.com/symfony/http-foundation/blob/v4.3.2/Request.php#L41-L50) * [constants for HTTP response status codes](https://github.com/symfony/http-foundation/blob/v4.3.2/Response.php#L21-L88) and probably do a few others, but I surely don't want to use the package when I'm only interested in the constants. There's already [`teapot/status-code`](https://github.com/teapot-php/status-code) that provides constants for HTTP status codes. Personally I use it in every project that is dealing with sending HTTP requests and processing HTTP responses. The package [`localheinz/http-method`](https://github.com/localheinz/http-method) jumps in to provide constants for HTTP methods, that's it.
This is an integral part of all Web apis, personally I would prefer to manage within my io application layer
I don't think it's as simple as teaching them with or without a framework. I think you should teach them about the fact that frameworks exist - and the positivities / negatives of using them. A framework isn't a magic tool that makes everything easy - and there is obviously more than 1 framework to pick from in each language / discipline. I'd be thinking about teaching them about how to choose the right framework for the right job - rather than choosing one and making them develop with it for a year.
Why don't you use instant refactoring for this?
Yup. That.
If you are affiliated with this newsletter, it will be received much warmer if you remove the blatant blogspam links from it.
Part of me (the paranoid part) says there might be a deserialization-based security vulnerability in here somewhere. Maybe whitelisting the curl_ functions is a good idea...
Could you please give an example? The $method is coming from the developer, and $arguments - while possibly containing user data - would behave no differently using this class than the standard methods
You can also use Guzzle if you really want a OOP cURL library. Personally I don't care that the cURL in PHP is functional based
If you don't care then you are not doing OOP. How are you going to fake calls? How are you going to mock the client?
You don't need the cURL functionality to be OOP based to be able to do OOP with it. Just write a wrapper class or a few wrapper classes.
&gt;Just say you may need a week of adjusting. After the transition from being a fanboy of Laravel to being a fanboy of Symfony, I can't disagree more. The mindset behind Laravel and Symfony is very different, it takes a while to adjust. &gt;Developers are in high demand, remember that. **Good developers.** Not *any* developer.
by writing wrapper classes, aren't you just making an OOP way to use cURL?...
There's nothing wrong with not doing OOP.
...yes?
Then you're not following PSR-18.
&gt;So why invent the wheel and don't just use some \`ClientInterface\`.
I would very strongly disagree. There's so much wrong with not doing OOP on PHP.
We're talking about whether you can do OOP with function based APIs, not about conforming to specific interfaces.
We're talking about whether you can do OOP with function based APIs, not about whether it's been done before or not.
We're talking about cURL or in other words HTTPClient here. If you don't follow PSR approved interface, then you are not following standards and your client will be very limited and excluded from the PHP ecosystem. That's just wrong and unnecessary.
&gt;You don't need the cURL functionality to be OOP based to be able to do OOP with it. We're talking about specific cURL case. Don't twist the words. Writing wrapper classes are okay when you need them. In this case, there's no need at all.
I'm not talking about any of that. I see your point (but I don't think it's "wrong", just not smart). But I'm not talking about any of that. /u/steven447 said you can use Guzzle and that they don't care that cURL is function based, and you said: &gt; If you don't care then you are not doing OOP. &gt; &gt; How are you going to fake calls? How are you going to mock the client? I reponded to both of those points by saying that you can write wrapper classes around function based APIs, but you never responded to that, you're talking about PSRs and about inclusion in the ecosystem instead. But, and here's a radical thought: it turns out you can do OOP without either of those, too. I'm not saying you should. But you absolutely can.
OP (Endtest) is spamming up tech subs, every day with multiple accounts [1,](https://www.reddit.com/user/boss_scarbos) [2,](https://www.reddit.com/user/dragnea_presedinte) [3,](https://www.reddit.com/user/llupei) [4](https://www.reddit.com/user/wernerklaus), [5](https://www.reddit.com/user/jos_cu_klaus), [6](https://www.reddit.com/user/sa_vina_werner), [7](https://www.reddit.com/user/ihavelepower) with focused self promotion spam like this that clearly breaks [reddits self promotion rules](https://www.reddit.com/wiki/selfpromotion) See for yourself. Vote and report accordingly.
Okay, I may have expressed myself incorrectly. Yes, it's *OOP* to write a wrapper for cURL, in the context that it becomes an object. Everybody understands that, **Is it the** ***OOP-way*** **/** **good design?** Definitely not. Nobody in their right mind would do this. Here's why: How are you going to handle configuration? How are going to handle responses? Exceptions? If you're going to tackle this, then you are just writing your own HTTP client. Then you're coupling your application to a specific HTTP transport library without any abstraction in between. Especially when there are years-old standards and well-discussed solutions for this specific issue. &amp;#x200B; Let's not entertain this thought that it's okay to write wrapper classes around some PHP functionality without doing proper OOP and writing meaningful classes, because wrappers are not OOP-way as well and should be only used in very rare cases. Same as utilities and other meaningless classes that only hides behind the OOP curtain.
Without, it should go: 1 standard PHP 2 functions 3 classes/OOP 4 wouldn't it be nice if someone pre made some classes/functions for us to use? = frameworks &amp;#x200B; this way they will have an understanding of what they are and how and why they are useful. &amp;#x200B; it also keeps things simple at the start so they dont get put off
Thanks!!!
Yup. I'd add composer to 4.
How does curl being oop help you fake calls? I can't imagine of a scenario where you wouldn't want to contain and abstract the whole curl implementation away in function calls.
Dont use anything of these things!
For all the five first points having an API that expresses methods through their names would be more than enough - i.e. \`$http-&gt;get(...);\` - this implies intent and supported methods by the client. Both your examples reference Magic strings as strings where the \_intent, meaning or context\_ of that value is not obvious. Calling \`$http-&gt;request('GET', ...)\` is not a case where the meaning of \`GET\` is non-obvious.
I agree, if you really know how to develop applications it does not matter which framework you use or non at all.
&gt;I would strongly recommend reading through the Symfony documentation from start to finish, it really won't take that long You must be a very fast reader. There is a lot of documentation on the Symfony site. And I question how much of it someone would understand without having a good grounding in the basics and taking the time to work though the examples. I'd suggest that skimming through the docs and having a rough idea of they are organized might be a better use of prep time.
This seems overly ceremonious to me
I am changing my coding standards due to this informative response.
🤷‍♂️
Guzzle!!!!
I'll take the contrary view. Assuming that the instructor is very familiar with a framework then using a framework can allow you to jump start the learning process without getting bogged down in low level details and tiny syntax errors. You can lead your students through the process of running "composer create-project symfony/website-skeleton" which gives them a working app. You then show them how to add a controller and template which covers the basics of MVC and gives them an actual web page to mess with. From there it is an easy step to add a database or what not.
I perhaps could have been clearer, but I was referring to the core six chapters, rather than all the additional guides and bundle docs. Those chapters are very readable as an introduction to how the framework works, especially if you already have knowledge of concepts like routing from another framework.
Is a class consisting only of static methods an OO approach by your standards?
I would add a destruct to automatically close the cURL session. Also, you can use the `__set` method to shorten the code, so, for example, instead of: $c-&gt;setopt(CURLOPT_FILE, $fp); $c-&gt;setopt(CURLOPT_HEADER, 0); you could write: $c-&gt;FILE = $fp; $c-&gt;HEADER = 0;
You are free to do whatever you like.
How so?
Do you have evidence of this?
Yes and now I just have to become the expert at each tool so I can get the whole team to use them :)
Looks like [PhanTypeNonVarPassByRef](https://github.com/phan/phan/wiki/Issue-Types-Caught-by-Phan#phantypenonvarpassbyref) is catching some instances, but not all of them. Some is better than none. Thank you
BUT WHY?
Haven't heard of Exakat, I'll check it out, thank you!
Haven't heard of Rector either, I'll check it out, thank you!
My biggest gripe with Guzzle is that it seems to have this desire to throw an exception for *everything* even after I set the option to not throw exceptions. I don't want an exception for http codes. I fully expect to receive non-2XX codes. Now if the connection flat out fails or breaks half way through then yes, give me the exception. Other than that Guzzle is awesome once your figure it out.
Once the handle goes out of scope it will be automatically closed already
I wouldn't say that it's a good design but it is definitely an OO approach.
It's 2019, if you're still coding procedural PHP, then you should read a book or watch some Uncle Bob videos because chances are that you're light years behind and a single reddit comment won't change the way you code.
No Auto-Completing :|
So what this factually is: basically wrapping code bits in a namespaced (think grouped) fashion. PHP supports namespaced functions, hence having a file in a namespace with a bunch of functions has zero practical difference from a “static class”, but the class has an overhead of being a class. It’s minuscule, but it’s there. What people, any myself, are basically saying: choose your tools and approaches practically and wisely. Sure, OOP is good, but you probably shouldn’t solve every problem using OOP. &gt; If you only know how to hammer then every problem becomes a nail. Don’t be that guy. Be smart.
Yeah, I may have misterunderstood the meaning of the statement and expressed myself incorrectly. You definitely want an PSR-18 abstraction and you should’t care about HTTP transport itself.
Have you checked out Symfony’s [HttpClient](https://symfony.com/doc/current/components/http_client.html)?
If you’re using phpStorm you can simply define all method signatures in an annotation.
lmfao working with magentos api using guzzle right now and the amount of try... catch... cases i had to make made me mental.
&gt;has zero practical difference from a “static class Umm, no? Remember interfaces, polymorphism, remember service container, remember inheritance. File with a bunch of functions is a poor's man static class. Which by the way, I said is a bad design. &gt;has an overhead of being a class. It’s minuscule, but it’s there. "**Premature optimization is the root of all evil".** You should never care about such trivial things and if you do, then you shouldn't use PHP in the first place. &amp;#x200B; &gt;you probably shouldn’t solve every problem using OOP. Give one problem that's better with procedural programming rather than OOP.
No, I just like going into random threads and shitposting baseless accusations. * ["Opencart developer doesn't "believe" in proper attribution for reused GPL code"](https://www.reddit.com/r/programming/comments/226co7/opencart_developer_doesnt_believe_in_proper/) / ["fuck off" is an appropriate response to someone pointing out a licensing violation](https://gist.github.com/T-Spoon/5a7cca7ea11c45b63c139da009c1a036) * ["idiot!"](https://web.archive.org/web/20160120051637/https://github.com/opencart/opencart/issues/3834) * ["i will re open this. it does not look hard to copy the code from phpass. […] i'm closing this as its a waste of time."](https://web.archive.org/web/20160120150725/https://github.com/opencart/opencart/issues/1269) * ["it was not ignored dick head why lie! are you a professional or not?"](https://web.archive.org/web/20160120151012/https://github.com/opencart/opencart/issues/1534) * [Why you should never use OpenCart](http://www.techchattr.com/never-use-opencart) * [Why you should never use OpenCart - personal experiences shared](https://www.reddit.com/r/PHP/comments/250qjd/why_you_should_never_use_opencart_personal/) * [OpenCart users, switch to OpenCart-CE immediately](https://www.reddit.com/r/PHP/comments/41st43/opencart_users_switch_to_opencartce_immediately/) * ["I prefer if you mind your own business and not bother me or the opencart community. The exploit that is being discussed will be fixed in the next release. I don't need your services. Stop wasting my time. Stop bothering me!"](https://web.archive.org/web/20180211011046/http://www.websynn.com/2011/04/11/daniel-kerrs-opencart-security-holes-and-vulnerability/) * ["there is not an sql injection problem you clown!"](https://web.archive.org/web/20170406164752/http://www.websynn.com/2012/01/10/opencart-update-daniel-kerr-is-at-it-again/)
Oh my god, yes!!! I see this (exceptions being abused) other places too, and it makes using the tool an uphill battle, like _you're_ doing something _wrong_.
Just pass your own exception handler.
Out of curiosity, what is the company name?
&gt;simply And then maintain the annotation of the third party library that you do not control.
Using a package instead of defining a 2 simple class constants? No. Not overkill at all.
Thanks for the good point!
If you aint doing OOP then you need to do FP, but apparently the curl functions are not functional either.
Please read the first pages of Uncle Bob's own `Clean Architecture`. The part where he compares what Procedural, Functional and Object-Oriented programming is, and what it's not, and what people think it is, and what it really is.
Its actually not an OO approach, static methods are just namespaced functions in disguise. You should avoid them as much as you can, the only valid use case I've seen so far for static methods are C#'s extension methods.
I can't think of any additional methods, but I have a suggestion: Your package would be a lot more useful if it provided an instantiatable enum-like class. This would allow for actual type declarations like this: `public function request(HttpMethod $method, string $url, ...)` `$client-&gt;request(HttpMethod::GET(), 'https://example.com', ...) // HttpMethod::GET() returns an instance` Instead of just passing around strings. I've used https://github.com/myclabs/php-enum for this kind of thing.
You can do that with guzzle? Where is that? How do you do that? \*looks at docs...*again*\*
In practice you use a combination of OOP and FP, but due to PHP's very limited support for FP, it is recommended to use OOP for PHP as much as you can.
This is actually one of the first real-life examples of how FaaS aka serverless can actually be useful. And a pretty good writeup, too.
This is not an absolute beginner learning center, your tutorial may be better posted at /r/phphelp
I swear a lot of the exception happy libraries are made by old java programmers. Where anything less than perfection is reason enough for an exception. why is try{}catch(){}catch(){} any better/cleaner than if(){}elseif(){}elseif(){}? Which is the argument I hear most often for using/creating so many exceptions.
Will we ever see a merger of PHPStan and psalm? That would be neat.
[removed]
Interesting, unfortunately I lack time to dig into this (we're using a lot of AWS at my work). How is the performance of a PHP layer on lambda (especially cold start) with Bref ? Even if there is only few PHP packages.
[https://stackoverflow.com/questions/651619/what-is-the-advantage-of-using-try-catch-versus-if-else](https://stackoverflow.com/questions/651619/what-is-the-advantage-of-using-try-catch-versus-if-else) ?
I wasn’t stating, I was asking OP’s opinion. See my answer to them. :)
Because youre trying to get us using a third party testing tool which are running behat/codeception in their backend. You can get that for free :3
why? chromium headless just works fine
implode.io[https://implode.io](https://implode.io)
&gt;The main difference between Python and PHP is their orientation. PHP is object oriented and Python is aspect oriented, which splits the program into different modules. &gt; &gt;While working with Python, the developer can easily create separate modules and then connect them on the “if-then” basis. Thats new at least for me. &gt;[PHP development](https://www.idslogic.com/php-development/) is considered to be less flexible than Python as it has stricter rules. Nope &gt;PHP also requires libraries to be loaded manually and it also needs additional tools **to support the security of the site.** Like in python? &gt;Python uses special packages to load additional libraries and it has grown in popularity since Google decided to base some projects on the language. Oh python uses packages as well? What a surprise &gt;PHP is best when the developers want to create simple web applications or working sites and Python would be best for the development of flexible and complex projects. NOPENOPENOPENOPE NOPE NOPE
The cold start performance shouldn't be any different to that of any other Lambda function - almost all of the latency is related to the container booting and the ENI being assigned. Plus then there's the VPC issue... Of course all of that is independent of the actual runtime you're using, and Bref has been focusing on improving speed and stability for some time now. Recently the project swapped the fastCGI client it was using, and gained about a 50% speed boost in the fpm layer at the same time! There's a benchmark for Bref here if you want more info: [https://github.com/brefphp/benchmarks#cold-starts](https://github.com/brefphp/benchmarks#cold-starts)
Another in-house team had already been using wkhtmltopdf, so the purpose was to extract that and create a serverless service which already supported everything they needed. It also gave us the opportunity to really give Bref a run on our own production systems. We considered puppeteer, but thought Bref &amp; wkhtmltopdf might be more fun to try out for a number of reasons.
Use artisan tinker
Psalm has done something similar for [a couple of weeks](https://github.com/vimeo/psalm/issues/1703), and it sounds like [Ondrej may relent and do the same](https://twitter.com/OndrejMirtes/status/1144551932134154245).
Wow. That's... Disconcerting. Thank you for posting that.
Come on now, everyone knows Python is only popular because of Google. Lol.
Python dev who never used PHP ?
Use static.
Laravel looks like the easy version of Symfony It's adding an abstraction layer, even more magic and you don't understand what's going on behind the scene I've learned Laravel first and I feel like I'm more in control with Symfony, even though it does a lot of things automagically
Yes, that is true. However, I believe that Guzzle's non-2XX code exceptions do _not_ fall under the categories described in the answer. It is not an exceptional case to receive any **valid** HTTP code. Simple as that.
I guess I didn't explain myself well. I was trying to say that the devs the overuse/abuse exceptions generally claim that try/catch is better/cleaner than if/else for their reasoning throwing exceptions for everything. That link talks about using try/catch and if/else the way I was intending to mean. Exceptions are for exceptional things not trivial things. In talking about Guzzle: Failed to reach server? Connection Refused? connection dropped? -&gt; throw an exception as that's a problem. Got valid response headers? Got a valid response body? -&gt; don't throw an exception. A non-2xx http status code isn't exceptional by any means. The number of "RestAPI" and to a much lesser degree websites that I deal with that return 200 status codes then put something like "realStatus=404" in the response body is ridiculous.
This is low grade blogspam at best
Since pecl is considered deprecated, is there a better way to get non-bundled extensions (ex. php-ast)?
Works but you dont’t have as many options as wkhtmltopdf, at least it didn’t a year ago when i tried to switch to chromium headless
So you are going to redefine these constants again for the next project? How many projects will it take before you extract a library? 😉
Can you elaborate?
How about using a [PSR-18](https://www.php-fig.org/psr/psr-18/)-compliant HTTP client instead, without worrying about the internals?
Odd enough, pecl wasn't installed with the alpha1 docker build but it now is with the alpha2 docker build, even though it's mentioned as removed by default in the alpha2 changelog.
At the very least the HTTP/1.1 and the HTTP/2 specifically allow for using custom methods so you will never support all "vendor-specific HTTP methods".
You should learn about twig and how to interface databases I guess.
It's different usages for different needs, mostly.
I know, it would just be nice to list a few more if there are some that are used in the wild.
For a 1 year course, I think yes. You can make a very small project like todo notes in PHP with database, then make it with laravel, symfony and why not react, vuejs and angular. It should not take that much time and your students will see the different approaches to web dev.
This is indeed a great example of a FaaS use case. You can also build websites, APIs, workers, etc. as well. Check out [here](https://bref.sh/docs/case-studies.html) for a few case studies. For example I am currently migrating [externals.io](https://externals.io) to AWS Lambda (it's finished actually, I'm just waiting for the right time to do the switch)
Maybe not for you, but in my experience I generally need to go a very different code path on failure. And if you really want to, you can easily turn it off.
You even managed to copypaste the SEO spam link in your comment. This article is not intended for you to comment. it is intended for the search engines to index.
It's one thing to copy and paste *2* constants, and another to have all the HTTP status codes by text and number. Maybe I should make a package to give me constants for my persistent storage. PersistentStorage\User::ID; PersistentStorage\User::EMAIL; PersistentStorage\User::USERNAME; PersistentStorage\User::EMAIL; PersistentStorage\Post::ID; PersistentStorage\Post::TITLE; PersistentStorage\Post::SLUG; PersistentStorage\Post::USER_ID; That took a long time to type.
One could look at webdav as they implement several custom methods, but that is just one single protocol. Sure you will have a couple more methods, but no way it is going to cover other specific use cases.
Yes, maybe! Please post it here so we can take a look.
One advantage of using exceptions for error handling, when used correctly, is that it allows you to separate your code very cleanly between "happy path" code paths, if you will, and handling of errors. This is due to code stopping at an exception then jumping ahead to a matching exception handling. You do not need to intermingle handling of these errors in your happy path code. As with anything, it can be abused. Guzzle specifically is an example of how to complicate matters. It has a range of exceptions that all boil down to an empty interface you can't do anything with.
You can use a PSR-18 http client, although if you need async you're a bit stuffed as you need to come off that walled garden. I reckon PSR missed a massive trick here. [https://packagist.org/packages/php-http/curl-client](https://packagist.org/packages/php-http/curl-client) does both.
wkhtmltopdf isn't maintained anymore and is a nightmare to get compiled right in new environments Puppeteer is the way to go for this now, I maintain a CLI wrapper npm package for it designed to make it an easy switch from wkhtmltopdf: https://github.com/JarvusInnovations/puppeteer-cli
&gt;there might be a deserialization-based security vulnerability in there somewhere Where would that be?
Ironically aren't a lot of js developers frusted by \`fetch()\` not throwing into a \`catch()\` by default when the response is a non 200ish status code? I mean essentially that's throwing an exception, same kind of principle in php, though I guess the annoyance is that you have to \`catch (\\Some\\Specific\\Exception\\Class\\You\\ProbablyCantRemember $e) { ... }\`
Which is silly to me. Just because the http status code isn't 2xx doesn't mean there is a problem and the reverse goes for getting a 2xx code; it doesn't mean the response is any good. You should be validating it, always. Getting a failed connection or a dropped one on the other hand is always a problem since you probably won't have any kind of valid data to work with. To me the js fetch works like I would expect. Network error? -&gt; throws exception. Successful communicated with the server -&gt; no exception but if the http code isn't 2xx it sets response.ok to false to indicate that the response body might not be what you were expecting. Or you could check response.status to get the http status code directly. If Guzzle worked this way I'd have no complaints. Differing schools of thought I guess.
OP /u/smartgenius1 asked me the same question and I honestly don't know. The thing that I think might be a vulnerability is that someone might create a new `curl_*` function and then that might be a vulnerability but I don't know how that would worl. I struggle to come up with an exploit of this class, so I will be perfectly candid here: I freely admit that I fear I may have been talking straight out of my ass there.
I just started working on a project using Symfony. Looking forward to see what features are in the new release.
OP uses the misnamed `$curlObject` (it's a resource not an object). Resources cannot be serialized.
It was sarcasm (lots of it).
Very cool! I still thing the "list of important" changes is _too_ long.
I've noticed your filter, and to be honest the code page has last updates showing over a year ago etc. Not assuming they need updates I just didn't know if they were up to date
&gt; wkhtmltopdf isn't maintained anymore How do you know this? [The org site](https://wkhtmltopdf.org/) doesn't mention it, and the [github repo](https://github.com/wkhtmltopdf/wkhtmltopdf) shows the latest commit 11 days ago.
Seeing all these bugs makes me feel better about our releases
There are at least 20+ commonly used valid HTTP codes though, are all of those the exact same type of failure for you? If you need to handle more than one type of failure, throwing an exception there is already the wrong approach. You'd want to throw different exceptions based on the type of failure.
I can't find any official reference that wkhtmltopdf isn't maintained anymore. [The git repo](https://github.com/wkhtmltopdf/wkhtmltopdf) has an update from 11 days ago. What is your source for this?
Just gotta set them up once as part of your CI/CD. From there, IMO, it's more a matter of being an expert at the language than the tools. While the text used will be unique to the tools, the issues they highlight are inherit to PHP. So if one person sets them up, then the rest of the team getting good with these tools is just them expanding their PHP skills.
Looking forward to your research. Every problem I've encountered has already been mentioned at least once, so I don't have much to add, except: - Repeating headers/footers. - Changing the content of headers/footers based on the content on that page of the document. - Graphics/Font embedding. - Speed.
Nearly the same tool evolution experience here. I'm content with wkhtmltopdf but I"m concerned about its lack of support and updates though.
The part between brackets indicates the corresponding components. If you consider that symfony is composed of numerous components, that you might or might not use in your application, that's not an impressive list of fixes.
I think the idea in the JS world (haven't had a lot of use for guzzle or similar in PHP) is that your application has to handle errors somewhere, and since exceptions can be caught higher up the execution stack, they don't have to be caught right where you make the request. You can have a try catch somewhere higher up and handle the error there, while in the method you treat the response like it was successful
All, but it depends.
&gt; last updates showing over a year ago Yes, it's quite stable and mature at this point; though there are 2-3 outstanding issues, there has been little need for constant updates in that period.
can you be more specific? typically you store only the session ID and expiration timestamp, but that is likely related to other business objects in your system (e.g. the logged in user), but those related objects should probably be stored elsewhere and retrieved via a join or something.
Nothing sensitive should be stored in sessions.
What is the point of defining a session? Store exactly enough context/info to get the user to the next step.
Yes.
That’s so true... and that’s why I haven’t started yet. Maybe in 10 years from now I’ll have the necessary knowledge to accomplish that
Noted ...
Is the thinking for this mostly session hijacking or that some people might configure the session directory to be part of the web root?
Avoid storing serialized objects in the session, because if you change the underlying class definitions in the code (rename classes, change properties, etc.) it will cause problems with existing sessions.
You can store whatever you please in sessions as long as you don't go over the top. When properly implemented, they are considered to be as secure as reasonably practical. However, there's an old adage from nuclear monitoring - trust, but verify. If your session data says a user is logged in, check the database and make sure that user actually exists, that their password hasn't changed, and that their account is still enabled etc. You probably also want to skip storing heavily encoded objects, data objects are generally fine, but you're going to have to go to a lot of trouble to hydrate session data every request if it contains lots of external dependencies.
[Citation Needed]
You can bridge this with a signed token - like a jwt - and a cert/key in you machine/code to 'sign' the user data and verify without hitting the database.
How would that verify that the user still exists?
By far the most insightful answer in this thread.
Don’t do things that break having your app open in several tabs, like remembering what section you’re in. Try to stick to scalars, as objects in sessions can behave weirdly if you change their class definitions. Makes deploying more obnoxious that it needs to be.
It wouldn't. It's the double edged sword of JWT and signing in general. I have in fact dealt with this very situation myself when using JWT tokens in place of session data (when database access was too slow due to latency). You have to code rather defensively - things like using short exp claims on the tokens to regularly re-validate them, and enforce foreign keys constraints on your databases so you can't break referential integrity through a race condition.
You can store anything in a session. On the server side they're generally considered safe. It's just not the easiest way to find stuff back again. Data can get lost on the server side by cleaning the session cache, or clients loose their cookies, so I would never really regard it as an alternative to a database, stuff that you would want to be the same the next time you login.
Sounds like it was written by someone who has never done anything but write blog spam articles. Useless buzzwords with no added value. Even people looking to start developing software with no prior knowledge will get negative value out of this. Python is a great language with its own set of pluses and minuses and should absolutely be considered by people looking to start programming, so I agree with the direction of the article to an extent. The fact is however that the author has absolutely no idea what they’re talking about.
If you have to store serialized objects, it's always better to double-serialize them IMO. $_SESSION['myobject] = [ 'payload' =&gt; serialize(...), 'class' =&gt; MyData::class, 'version' =&gt; MyData::CLASS_VERSION]); The small performance hit is worth it to be able to detect the change before trying to unserialize it.
tl;dr: It depends on the complexity of your document. Chrome Headless can handle most one-page invoices. A book? Nope. Most projects are somewhere in the middle. At the core of the difference, Webkit/Chrome are built around the idea that a webpage is one long page. A document rendering engine like Prince/DocRaptor, AntennaHouse, pdfReactor, are designed from the ground up to generate documents containing multiple pages. This is a fundamental difference in their ability to do things like smart page breaks (think big tables, images, floated elements, etc). This is evident when it comes to supporting [CSS Paged Media](https://www.w3.org/TR/css-page-3/), which empowers things like different headers/footers for different pages, advanced page numbers, and table of contents, etc. etc. Additionally, there's a major difference in the priority of supporting PDF/document features. Password-protected documents? Accessible/tagged PDFs? PDF bookmarks? The commercial guys have all these. The browsers don't because that's not where they're built to do. *Disclaimer: I work for* [*DocRaptor*](https://docraptor.com)*.*
I can't recall the most authoritative spots I've seen it, but I think it's not so much that wkhtmltopdf isn't maintained, but that the webkit it's built on isn't so there's a hard ceiling to its support of CSS3 Here's one example of this being discussed: https://github.com/wkhtmltopdf/wkhtmltopdf/issues/4092
thank
Possibly unpopular opinion, but personally, I am of the camp that tries to not use sessions at all. Matter of fact, I can't remember the last time I needed to use sessions in the past decade.
While it might have had recent commits there haven’t been any releases since this time last year.
Puppeteer looks like it's some kind of node plugin. Can it do HTML to PDF from the command line, as with wkhtmltopdf? I don't see any reference to using it from the command line.
Can you expand on this? What’s the nature of your apps and do users authenticate into them? Is with happening on every call?
Personally I just store enough info to actually identify the session. You can then use this to authenticate the user, and get enough info data to then grab what you need from an independent cache like redis/memcache, or worst case just fall back to the database
You're right, I was tired and had cookies in mind, for some reason.
No, I'm going off very little sleep and had cookies in mind, so my comment was a mistake.
Puppeteer is maintained by the google chrome team as a reference implementation of using chrome's new built-in devtools API for automating the chrome engine. It's a node module that handles downloading a chrome binary as needed and giving you a supported async API to it. This node module I linked to that I maintain provides a lightweight CLI interface to it that I use as a wkhtmltopdf replacement: https://github.com/JarvusInnovations/puppeteer-cli
Oops, you linked right to it in your original comment. Sorry about that. Thanks, though I'm not a big node fan, it's good to have an alternative that supports more modern CSS.
Right, so have something reasonable like a few minutes to an hour. In non-sensitive or rate-limited situations (API) that would reduce the amount of requests an expired/removed user could make. If they are creating resources, definitely be using relationships. I said bridge, not replace. Security and verification is a suite, not a single solution.
came here to say this as well
Browsers normally do a good job of keeping cookies tight, particularly if the right flags are set.
Overall consensus—this is how logins work/password recovery/2fa if desired.
&gt;I have an interview tomorrow How did it go?
You decide how long its ok for a deleted user to authenticate and set the TTL of the token to exactly that much time.
Client side frameworks can render the necessity of sessions obsolete but I guess there are still edge cases where you need a server side session too.
And more importantly, the webkit engine is stuck back in something like 2011's version of modern html
We're trying to fix about 8 year old legacy code that stores about 21mb of HTML in sessions. Don't do that please.
Also, is the API done in a framework? Does it use composer (a package/library manager)? If so, it might be a good idea to brush up on those. Getting Xdebug setup will allow you to trace your way through the thing as well.
Alternatively, rather than using JWT, cache your user data in Redis, keyed by the user ID, and update it whenever a user is modified. You can also store the session data itself in Redis. You avoid all of the disadvantages of using JWT for session state, can instantly lock out malicious users and don't have to hit the database. A single Redis instance can happily handle tens if not hundreds of thousands of operations a second and retrieving keyed data is very fast.
How do you not require your user login every time they want to do something?
&gt;Don’t do things that break having your app open in several tabs, like remembering what section you’re in. Ohhh god sites that keep track of your navigation in sessions are the worst.. GET requests are invested for that, use them, NOT sessions, please!
nothing that could compromise the app obviously understand the limitations of sessions vs cookie session. only keep enough info in there for you to be able to look up the source of truth. sure an object serialized is ok. but like don’t serialize the user object of it has properties that could compromise your user. think more of using the session to keep identity correct. don’t use it as another data store if possible.
Interesting. Have been using phpstan since &gt; year and never noticed this. Then I realized: I do have property phpdoc _all over the place_. Guess I got lucky due to force of habit.
Use at least https://www.php.net/manual/en/class.serializable.php
Minimum Viable Product is an ecom site. Stage1: make a fast woo site with cloudflare in front of it. Offload the woocommerce sessions table into a redis by wrapping the functions. Suddenly all the horrible scale issues you've heard about go away when all the carts are out of the DB. Stage2: design your next version from scratch site now that you have the breathing room to do so.
I really like your \_\_set idea! Thanks for contributing!
But the user can always clear them.
I programmed with PHP almost 10 years but changing to Java for the last 5 opened my eyes. Once you start creating backend stuff that has to run for (at least) months w/o restart and needs to perform parallel background tasks you begin to realize how broken JS and PHP really are. Isn’t JS still single-threaded with callback-hell everywhere? Of course one might say code-quality does not depend on the language one uses but I think JS/PHP both make it very easy to write unpredictable and unmaintainable code.
Putting frontend devs into backend because the same language is being used is like putting together banker and robber because both is about money.
Use a static analysis tool before releases and you should be able to catch this with ease.
&gt; Password-protected documents? "protected". Business talk. you can make all the things in html with chrome. Get some good devs. Its not hard.
I wont use a blog system if im gonna make an ecommerce system.
thank you. Nice guy.
Quick someone add that to the list of things to not store * 21mb of HTML
Handing over session management to a framework is \*not\* the same as not using sessions.
Redis is a good solution for scaling out to multiple nodes, especially if you end up using it for more than just k/v. Otherwise memcache is the more popular (or was) method for k/v in php. Personally prefer Redis.
Be mindful of any limitations of how the session is going to be stored (disk vs dbase vs memory). Was storing userprofile information in session that was using a text column for storage and one users bio was way way way longer than I had assumed they would ever be.
One popular option is JWT.
Bearer tokens???
Actually i use get request for a single page app, however i store them in sessions to be used for ajax requests.
Yeah, I used to use memcached years ago, but I've replaced that entirely with Redis now. The combination of Redis's persistence and more complex data structures has meant I've not really found a need for memcached. Redis is so fast that I've rarely seen a benefit to memcached being multi-threaded.
Give the token a short lifetime, requiring it to be renewed often. The database is hit at renewal time.
So... if I open 2 different tabs to navigate in your SPA does it break ? if yes ajax should call more specified URIs... The only reason a request should be based on the history is the login... (Some will say that Token solve that problem so you should not store anything but....) #stateless
These are all covered by RFCs.
Depends on how you've used Laravel. Due to lower barrier of entry a lot of beginners pick up Laravel. Not all those beginners progress past learning Laravel spefic API's. And that's what the interviewer might be concerned about or might want to check. To be more precise in what I'm talking about, lets take an example. Laravel employs Facades to provide a smooth to use API's for some of it's services. And it's very tempting for beginners to use them everywhere. While it's great for prototyping and sometimes if scope is small enough it's no big deal to use it, it's generally an anti-pattern. As it tightly couples different modules of your code. I would probably ask you to explain what dependency injection is and solve a little problem with visitor or strategy design pattern. I would also present you with an example of stateful service and ask you to name the problem with the service in question. Another experience I had in regards to folk who used to work with Laravel is that due to rapid development features it provides it's popular between all kinds of consultancies and web agencies. That's a signal for me to check what you understand about scalable code and unit tests. I would also ask you what you understand about CI &amp; CD and how it works. I would probably also ask you to explain me how Active Record vs Data Mapper works. And what you think are drawbacks of advantages of both are. What I would not be concerned is if you know the specific names of classes to extend in Symfony for example. Although I might ask you if you know what a bundle is. However, I wouldn't be all that much concerned if you didn't.
Good point. With the side note that on the browser side if they get compromised it's mostly due to [XSS vunerabilities.](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))
Well, I'm not using the session keyword with JWTs, that's what I wanted to express.
Just found a huge bug in the way puppeteer works. In the latest version of Chromium, when loading a large dynamically created file, for some weird reason half way through it tries to load it again but from a different point. I think this is due to the latest Microsoft contribution to the code for smooth scrolling as years ago Microsoft announced a new feature that only loads parts of the page that are visible. This is flawed with today's pages and not used, but the code has been left in. This second load generates an error that prevents puppeteer finishing the job, even though the error never happened. As the file is dynamic, it gets to a certain size and Chromium tries to load it from a point that doesn't exist and is far beyond the end of the file. Also it messes up when the file it's loaded from is also dynamically created.
A different technology to do session management is still session management.
I only keep the last URL in the session so that on certain error conditions (for example: edit a user that doesn’t exist), I can redirect back to the page they were just on. I have the last URL update only if the page request was successful and only if it was not an XHR request. This system has worked great so far across multiple tabs. I agree that using query string parameters is also a good idea but I find my system easier to manage.
As little as possible. At best only the minimum info that identifies / authorizes the user, i.e. a token and a user id. Maybe some security extras. There is the assumption that php sessions + memcached are fast. But this is not true by design. Memcached requires the session module to handle locking manually over the network. So parallel requests will be executed sequentially, even if the requests are only read only. The best and easiest thing you can do is to close right after session start for all read only (i.e. HTTP GET) requests and close right after the last write. Throwing less crap into the session makes this of course much easier. In addition RDBMS have much finer grained control over writes, so you spend much less time waiting for locks (and you have less trouble with caches). &amp;#x200B; If you need a caching layer it should never be your php session. If you think you need a caching layer spend a few weeks to level up your RDBMS skills. &amp;#x200B; PS: I had a long frustration and mental blockade with php sessions + memcached. Eventually I realized that the (request long) locking is simply a desing flaw which cannot scale by nature. (I don't think any other serious web platforms do that by default). Anyone looking for something better should instantly ditch this solution and work around the trade offs (which still requires to push down the domain data to the proper datalayer). Replacing memcached with redis is probably the easiest and it gives you persistence. Win win.
So I went there started to talk about myself first the recruiter said, so you now just did graduate from college right (bachelor) ? I was like tf I just did graduate from high school, and so on he was impressed that I started so early and told me to keep going their company only accept developers who have a degree so I wasn’t one of them they told to apply again when I get the degree tho
I try to store the only the user ID in the session. Why storing anything else?
probably you need to hide some data from the client or to reduce sql queries
Ah yes, some flashed message from a redirect too.
That's just a Session with extra steps
I'm glad to hear it! Was not particularly convinced by the two main arguments against that I saw. "The type might change" Well yes it might. But in many cases you can prove that no, it _can't_. And even if it potentially can, you still know one type that it possibly can be and so an incompatible method call is still a type error. "You should use var hints in preparation for 7.4 typed properties" There's something a bit fucky about a type inference engine telling us "nah, you should explicitly declare your types". Especially given that if there is no unguarded external access to a property then runtime type checks could _never_ trigger an error that wouldn't already have been picked up by a static analyzer even without the declaration.
That's still a session token, except JWTs are readable by anyone so you have to be more careful what you put in it.
* 21 mb of _literally anything_
Use Magento for your store. Which can handle large scale of traffic.
True, but the fact that it's HTML is icing on this cake.
Congrats are in order methinks!
Yes. My assumption was that the question is about avoiding storage of session data on the server.
Thanks :)
Released in 2019 has no strict_types=1. GG!
Awesome, thank you for your work over all that time!
[removed]
It is a rather impressive list. If you read though the actual details you will see that quite a few of these are related to cleanups in preparation for the 4.4 lts release scheduled for the end of the year. Lots of depreciation type fix ups. Lots of esoteric edge cases. Very few developers will be impacted by these changes.
There must be a billion tutorials out there for that. Tried google or YouTube?
/r/PHPHelp
Sorry wrong thread. Was trying to find phphelp but forgot the name. Thank you so much !
There are no type-hints for generics/parametric polymorphism in PHP thus no language-level types can be had for ditching ;) Types are only needed for type checking/analysis, and are unnecessary on following phases. That's why PHPStan can work, even if it does not partake in code interpretation at run-time.
Yup. Thank you in a billion too for not being any helpful.
Lol
I do this at a university and I do not teach a framework. I have them build a framework through the year. Then my last lesson is usually me showing them something like Laravel and showing them how all the stuff they built is built into a framework. It gives them context that this stuff is important, they appreciate what frameworks can do for them, and they don’t have to use one if they don’t want to.
Yeah but once again: Released in 2019, and in fucking PHP. gg?
Awrsome, thank you for your work. Excactly what I was looking for.
That's why you set HTTP only, so JS can't even touch it.
Yup. I always consider the session as being volatile storage.
Laravel does that as well.
Ever heard of oauth?
wordpress is good
I've been a bit scared off from using Magento, based on what other people have said about it. Do you like it?
Neat. Looking into redis now...
Tracking what?
Yes
You need to be more specific. What are you authenticating against? What are you securing with authentication? What authentication implementation are you looking for?
Nice! I didn't keep up with history, because are so many *mark*down* variants In practice I see that everyone expects it work like "Github flavored markdown". How close is the spec to that?
In what world is WordPress a user authentication library??
There is always [Aura.Auth](http://auraphp.com/packages/2.x/Auth.html).
phpdelusions.com
Glad to see this finally hit 1.0.0 after 3 million downloads.
In PHP'land you will likely be using GuzzleHTTP to make HTTP calls. [http://docs.guzzlephp.org/en/stable/](http://docs.guzzlephp.org/en/stable/) For async look at the ReactPHP. [https://reactphp.org/](https://reactphp.org/) For light frameworks that do very well for API, look at SlimPHP ([http://www.slimframework.com/](http://www.slimframework.com/)) or Expressive ([https://getexpressive.org/](https://getexpressive.org/)), versus the fatter full stack frameworks. Good luck in your journey.
Use this: https://github.com/phpexpertsinc/RESTSpeaker It's an abstraction on top of Guzzle. $response = $apiClient-&gt;get("v1/accounts/{$uuid}", [ $this-&gt;auth-&gt;generateAuthHeaders(), ]); vs $http = new GuzzleClient([ 'base_uri' =&gt; 'https://api.my-site.dev/', ]); $response = $http-&gt;post("/members/$username/session", [ 'headers' =&gt; [ 'X-API-Key' =&gt; env('TLSV2_APIKEY'), ], ]); $json = json_decode( $response -&gt;getBody() -&gt;getContents(), true );
Yeah, tell me about it. My RESTSpeaker traps the exceptions by default but does let you turn off the trapping if you want. E.g., a `-&gt;delete()` request won't fail if it gets a 404 error.
My RESTSpeaker Guzzle abstraction only throws exceptions by default for 5xx class errors and sites being unreachable. Those are the only real exceptions.
What is this, the 80s? There's no grand ceremony installation. You plop some OS on it and you do the rest on the fly, as the needs arise.
* VSCode * PHPStorm * Docker * Firefox Then everything else if/when I need it.
Just a few specific tools nothing too fancy. IntelliJ Toolbox - Tools for creating software. Docker - Tools for running software. Insomnia - Tool for testing software.
- Debian - PHPStorm - Web browsers - Virtualbox - Vagrant start working
Windows... Chrome... Keypass... Steam... Eve Online... Phpstorm Mariadb + Workbench. Docker Some games from steam.... Spotify
In this scenario your need is to develop php code.
I run API2PDF and you can use headless chrome with just a quick API call from PHP so you don't need to migrate to docker if you don't want to. Here it is: https://www.github.com/api2pdf/api2pdf.php
* Firefox * VSCode (Plus extensions) * XAMPP (Just to get apache lol) * Github Desktop * XDebug * Postgresql * pgModeler (Or some sort of database modeling tool)
So I install PHP.
I have been working in Magento from last 5 years. I have created almost 25+ stores for my clients. Magento development is not easy for sure but it provide a complete eCommerce store. Magento has increased client's sell 30% - 50%. If you want, you can even choose Magento enterprise edition Where Magento team (The Adobe) will maintain your server and traffic. For me based on working experience, Magento is very reliable and secure for large application.
Symfony 4 with flex is a light framework
no it doesn't. I make unique session names based on the get variable i get. However when they expire is the problem but i made a trick to re-initialize them when they expire. I believe bit wasn't necessarily a good practice to use sessions for that
Look at ReactPHP / amphp for the nodejs feeling in php
Is the world where wordpress is a "framework" and could be used for anything else than a blog.
Also symfony has now an httpclient
First of all WordPress is not a framework, it's a full blown cms. Second of all, a framework is not a user authentication library. You wouldn't (or shouldn't) for example install the complete Symfony framework in order to get user authentication functionality in an application. You would (or should) install the components you need and integrate it in your application.
Does your work really require PHP? I would stick with Node if possible, you'll be disappointed with the maturity, availability and verbosity of PHP equivalents.
But if i use wordpress it just works with a plugin.
And then you're gonna just look at it?
s/delimitered/delimited/g
At the end its "write doc comments". Not very hard with something like phpstorm....
Simplifying it a bit, PHP is not an async language, as things happen synchronously. When making an HTTP request, regardless of what took you're using (someone mentioned Guzzle, which I second) the default approach is to just use the function return value, as the request will be blocking by default. Basically, think of having an `await` by default on any function call. There are attempts on making PHP behave asynchronously (ReactPHP, AMPHP), but they're trying to solve very specific problems and realistically are for the 1%, so I'd avoid them for now.
Until further instructions, I will just look at it, yes.
i like this guy
TBH I think that "don't add type comments to properties" is nonsense. You're literally making your code harder to understand. You're removing explicit information and relying exclusively on implicit concepts. And explicit is _always_ better than implicit: remember that you should optimize code for people, not for tools. Plus it's basically like having typed properties already. It'll make the actual migration easier and clearer. I see a demonization of comments going on, and people considering them as always bad, regardless of what their purpose. To me, that's nonsense. I want to repeat this: optimize code for reading. Readable code is not just good naming and small functions, it's really about providing context at all times.
[Github flavored markdown (aka GFM) is actually based on the CommonMark spec!](https://github.github.com/gfm/#what-is-github-flavored-markdown-) Essentially, it's everything that's in CommonMark with a few extra features: - Tables - Task list items - Strikethrough - Autolinks Our `league/commonmark-extras` package includes all of those extras except for tables - but there is a community extension for our library which adds that. See https://github.com/thephpleague/commonmark#league-extensions In other words, you can absolutely use this as a GFM-compliant parser by simply adding two extensions :)
Thanks! I've changed it: https://github.com/T-Regx/T-Regx/commit/1ae828561fef5217407b68ac8f1116bb2ed8955a Please refresh the [t-regx.com](https://t-regx.com) without cache.
Do you have any other ideas?
You shouldn't do that in fixtures; they are made to populate database, not to read from it. If you need reference to object you created in some other fixture, use \`\`$this-&gt;setReference\`\` and \`\`$this-&gt;getReference\`\`.
For http clients, everyone is pretty much using Guzzle, although recently Symfony Http popped up into scope. There is no async await syntax in php. Although you can write concurrent code in PHP. It has generators so you can use that to write your own implementation where you really need it. But for the most part folk do not bother with it as it's too much hassle for little benefit. PHP still outruns V8, keep in mind that in real world, you'll server gonna sit behind nginx reverse proxy anyway. There are some async frameworks written in PHP. Like Swoole or ReactPHP. However, I wouldn't invest much into them. First they start to dictate your software architecture. Secondly, those are generally copies of node event loop. And if php will end up having language supported concurrency model, that will probably be implemented through co-routines, not an event loop. Similar to Go.
I'm wanting to reference data that should be in the database, so I'm putting that code inside a migration rather than a fixture
First off all expect that your database is empty when running your fixtures. Fixtures is not for production, use migrations for that instead. So for the data you need, create a fixture for it, either a fixture class and then in your fixture where you need it, implement the `Doctrine\Common\DataFixtures\DependentFixtureInterface` interface and then in your `public function getDependencies() { return [YourOtherFixture::class]; }` And then use `setReference` and `getReference`.
Yeah so the plugin (sort of) is the user authentication library, not WordPress.
s/himself/themselves/g, in the entire project.
 [https://github.com/litphp/view-twig/commits/master](https://github.com/litphp/view-twig/commits/master) &amp;#x200B; this commit messages....
I'm curious: what's wrong with them in your opinion?
What?
oauth 2?
No the GP but they don’t tell you anything, are all over the place, and what little they say doesn’t match what is in the commit itself. This is a smell for me in that it shows someone who isn’t thinking about the future. This is a good read: https://chris.beams.io/posts/git-commit/
Thank you very much
I'm going to use token-based authentication
I want to implement authentication without using any framework. Are there any guide in the internet about wordpress authentication?
THank you for your response, yes that's my impression as well. I really enjoy nodejs &amp; currently building apis for fun with it. It works great &amp; really fast wiht async await &amp; promise.all. I have an Interneship with php plugin development... Php is not really my choice , but I went for it regardless because of the job availability &amp; freelance potential. Thank You
Sooo.. now that you have let off some steam.. when will you introduce us to your new PHP framework?
lol
Wow this post will change everything!! People will stop trying to improve by making something new and thinking about other ways of implementing and developing something just because your highness ordered it.
I don't promote my framework, despite it being on github. I have been using it for a couple years now, because it just doesn't need to change much. Here and there I note some optimizations or see commonality across projects *shrug*
This alone makes me like node more. Thanks for the resonse, helpful.
I see . guess this will be what im looking into first. Symfony is on the table as well , where Im going. It seems like a javascript has the advantage when it comes to ajax / building apps. Though Worpdress is offering alot with its simplicity / echosystem. Some fog is starting to lift for me , thanks.
Are we really judging someone work by it’s git message?
will look into both thx
.... *deletes new post promoting his new PHP framework*
If that were to be true - we wouldn't have the current popular ones. Why? Because people adapt it to their way and people can enjoy it. See Laravel, Symfony
Would you please give me the link?
To be fair, I'm busy innovating new things, not Yet Another Micro Framework.
There was a huge vacuum when Laravel and Symfony came out. Now, there's an actual, breathable atmosphere. Now you just end up with day spas filled with lots of plants and extra special atmospheric temperature control.
No, this is actually the one thing a Turing complete language can't do.
I would just store all form submissions and then delete the entries not deemed "good enough".
Yes, so is there a possibility where I can create an Admin account who can do that? Can you guide me through it? Help me find the code probably?
Yes. The admin would stand behind the user IRL and beat them up if they tried to submit the form before they deemed it worthy. Otherwise, just store it in the database and delete any you don't want, and approve the ones you do.
The general philosophy and goals of this doesn't seem too distinct from my own framework (https://hiraeth.dev) and in that respect, I think you're generally on the right path. That said, I'm a bit confused by exactly how things get integrated here. This http://litphp.github.io/docs/air-config appears to be an example, but feels a bit convoluted. Is there a particular advantage to using this complex array configuration for the dependency injector as opposed to using a single (or series) of factories as I do in Hireath and simply providing access to the abstracted configuration? https://hiraeth.dev/docs/delegates
Laravel tips and tricks that are covered in detail within the official docs? Blogspam.
Shere with me the page where they showed how to use the custom helper functions in multiple ways?
JavaScript: Hold my beer
https://laravel.com/docs/5.8/helpers.
&gt;Yes, so is there a possibility where I can create an Admin account who can do that? Yes, welcome to software engineering. &gt;Can you guide me through it? Help me find the code probably? Guiding you through this would take longer than just writing the app myself. Depending on your willingness to pay, I could help you "find the code".
Bro if you know these things don't mean every one knows them
Looks interesting. Will give it a try.
Most post in PHP and about frameworks, I read until now, were: "Fuck frameworks. Learn how PHP really works and write your own tailored one for your project."
The point is, improve something out there that has value, rebuilding the wheel and posting it here expecting us to get crazy with it wont work and will waste your time and effort.
Why recommend installing specific version (although not patch constrained)? Won't you forget updating the current version on the website? Composer installs the last stable (version-tagged) version by default.
If someone learns stuff while making that framework it's not wasted time nor effort.
Half of innovation is basically rehashing old stuff anyway.
Compared to how amazing a framework could be if everyone put effort into it, yeah its a colossal waste. Learning is good, direction is key to progression, everyone is going in separate directions so we do not progress as a whole.
Sure, not everybody knows these things, but the problem is, you're adding absolutely nothing that the docs don't already cover, so why would anybody read this instead of, yno, the official docs?
Wait... what's wrong with my framework? Why is it stupid?
ain't that the fucking truth
Remind me to write some documentation and open source my own one.
Interesting. I must admit my design around DI configuration is a bit complex and maybe not well documented enough. Will keep trying on improvements. About using native php, by being native php you can type hint, can static check against class names, can even write closures inside it (so when you feel comfortable you just write the factory method in configuration array) And if anyone like any particular configuration language (in dozens of them!), he can just call some parse / readFromFile stuff in native PHP. About the advantage my DI process brings, Here's something I didn't catch how to achieve in your framework from your doc * Inject strings, integers, or other non-object values (very often configurations), or object without type hint (e.g. can be different class / interface) * For a same target class, inject different instance to different object (say some module need a different PSR logger than project default one, or you are injecting a mock for unit test) * Setter injection, when you can't change constructor of some class, or there's so much dependency makes write a constructor contain all of them a pain
Thanks for your link. It's really hard to write good commit messages even I know good commit message are very helpful.
WOW!
Didn't we [last week](https://www.reddit.com/r/PHP/comments/c396q9/i_am_releasing_the_originphp_framework_its_packed/erpgwq1/)?
Why is that? I feel that async makes sense on the frontend, but on the backend it just adds a ton of complexity for no real gain. For 99.9% of use cases, the process is still complete request in/complete response out, so really don't have any really benefit for non-blocking instructions...
There are no tests.
To be fair to them, the docs don't tell you how to add custom helpers... ...but there are already an embarrassment of other blog posts that do, so it's not particularly adding anything.
In addition, Guzzle can handle HTTP requests asynchronously, so if you have to make multiple requests during a single execution, you don't need to wait for them to complete.
 if you have multiple requests at once doing them in parallel is faster. &amp; being as fast as possible can be huge++. but if guzzle can handle this then great I won't have any complaints..
We already had a Michael Angelo! Everyone else: Stop painting!
&gt;It works great &amp; really fast wiht async await &amp; promise.all A well designed PHP application without async and with a full framework can deal with requests in tens of milliseconds. What code do you tend to write where async I/O is your bottleneck for performance? Language performance is so rarely the bottleneck If you enjoy writing Node, go for it, but performance is a poor reason to choose it. PHP has great tooling and a solid ecosystem, better than Node/JS in my personal opinion.
You can see the docs for the [Guzzle async requests here](http://docs.guzzlephp.org/en/stable/quickstart.html#async-requests), they return a Promise that you can chain `then()` calls off.
It is, but I believe your problem stems from mixing too much stuff in a single commit. Do you use `git commit -a` often? That’s a bad practice. Try to make your commits consist of a single unit of work. Make more commits.. try to commit after each task, etc. Working on feature branches and then merging is also a good discipline.
They're not being posted because they're needed. They're being posted because it's important to share and share alike. It's how you grow as a developer. If this is your attitude, then you're not going to make it very far outside of your own little bubble.
parallelism comes through something like php-fpm using a worker-pool to handle each connection within a single thread/process. There are [generators](https://www.php.net/manual/en/language.generators.syntax.php) and [coroutines](https://amphp.org/amp/coroutines/) which help working on several tasks that might have parts that would otherwise block for i/o, but the throughout parallel nature of nodejs is generally not needed in php projects, save some very specific use cases.
Yes, it’s an important factor of project quality. Those commit messages wouldn’t pass in a professional project.
Wtf are you talking about. Theses are better than 95% of what exist in real project. Anyway, good git message are plus in a good project, but dont turn a good project into a bad project.
This. A thousand times this.
Try non-web development. I recently go into Arduino and it was a lot if fun. Taking what I've learned over the years as a web developer and applying it to something pretty unrelated was satisfying.
Look for something else to become your passion that isn't programming. Alternatively, find yourself a beautiful woman (or man) who wants nothing more than to drag you to bed whenever they see you write a sweet piece of code. It's certainly one way to associate programming with positive emotional responses :-)
Looks cool but spelling and grammar are off.
I can't think of anything worse as a framework than something that everyone contributed to. It would get pulled in 5000 different directions and be unusable within a year.
have an example app I can look at?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
something like bit.ly but focused on files, **Is there something like that already?**
 &lt;?php echo "Please reply me"; ?&gt;
Looks like it is composer: [https://github.com/composer/composer/issues/7783](https://github.com/composer/composer/issues/7783) &amp;#x200B; If you installed from apt, then `apt-get install --only-upgrade` Otherwise, try `composer self-update`
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Is there something like that already? &lt;?php echo "r3ply_m3_pl3ase"; ?&gt;
[removed]
sorry I'm late. updated OP
updated OP with code
 $handle = fopen("COM3", "r+b"); :) updated OP with code
All of these can be done within the delegate. The delegate is literally just a callback for constructing the dependency so within that you can get any setting you like from the config and inject that however you like, or you can build sub-dependency that are setter injected and inject those via setters after the initial construction, including differently configured instances. Though there are also providers for interface based setter injection: [https://hiraeth.dev/docs/providers](https://hiraeth.dev/docs/providers) &amp;#x200B; I'm not saying there's anything magical or groundbreaking here... it's just saying "when you wish to construct X, call this class to construct X and give it back -- what you do in that call is up to you," but it works and provides a pretty consistent and flexible way to integrate everything I've had to integrate thus far.
&gt; composer self-update &lt; [InvalidArgumentException] &lt; Command "self-update" is not defined.
I don't know where you work, but where I work messages like that wouldn't pass review. I don't know of any decently-sized FOSS project in the PHP world that'd be okay with that either
I know: let's make a layer of abstraction solely to abstract!
I fully both agree and disagree. What a state of things, right? I agree that it's nauseous to keep seeing a lot of people who have no experience write their own framework and it turning out to be absolute trash and one is tempted to say "But we need it to grow, maybe the next Laravel will be created.". I beg to differ. A lot of people who write frameworks seem to be on the less knowledgeable end. People \*with\* experience should try to make them because, let me tell you, it's hell to get even the basics right.
Why isn't your annotation prefixed with an ape tail?
 [https://www.youtube.com/watch?v=Wm2h0cbvsw8](https://www.youtube.com/watch?v=Wm2h0cbvsw8)
Can you repost in /r/javascript, thanks!
Spam
# Swoft for PHP Microservice Coroutine Framework Are you bothered by PHP-FPM performance? Still looking for a PHP microservice solution? Swoft relies on the Swoole extension to solve all of these problems perfectly. Like Go, Swoft has a built-in coroutine web server and a common coroutine client and is resident in memory, independent of traditional PHP-FPM. There are coroutine operations similar to the Go language, with flexible annotations similar to the Spring Cloud framework, powerful global dependency injection containers, comprehensive service governance, flexible and powerful AOP, standard PSR specification implementations, and more. Swoft uses component-based development to make the framework more functional than heavy. Through three years of accumulation and direction exploration, Swoft is transformed into Spring Cloud in PHP, which is the best choice for PHP high-performance framework and micro-service governance. Website: [https://en.swoft.org](https://en.swoft.org) Document：[https://en.swoft.org/docs](https://en.swoft.org/docs) Github: [https://github.com/swoft-cloud/swoft](https://github.com/swoft-cloud/swoft) &gt; If you are interested in swoft, you can star swoft by [github](https://github.com/swoft-cloud/swoft)! ## Core Component | Name | Version | | --- | --- | | annotation | [2.0.2](https://github.com/swoft-cloud/swoft-annotation) | | aop | [2.0.2](https://github.com/swoft-cloud/swoft-aop) | | bean | [2.0.2](https://github.com/swoft-cloud/swoft-bean) | | config | [2.0.2](https://github.com/swoft-cloud/swoft-config) | | connection-pool | [2.0.2](https://github.com/swoft-cloud/swoft-connection-pool) | | console | [2.0.2](https://github.com/swoft-cloud/swoft-console) | | db | [2.0.2](https://github.com/swoft-cloud/swoft-db) | | error | [2.0.2](https://github.com/swoft-cloud/swoft-error) | | event | [2.0.2](https://github.com/swoft-cloud/swoft-event) | | http-server | [2.0.2](https://github.com/swoft-cloud/swoft-http-server) | | i18n | [2.0.2](https://github.com/swoft-cloud/swoft-i18n) | | log | [2.0.2](https://github.com/swoft-cloud/swoft-log) | | redis | [2.0.2](https://github.com/swoft-cloud/swoft-redis) | | rpc-client | [2.0.2](https://github.com/swoft-cloud/swoft-rpc-client) | | rpc-server | [2.0.2](https://github.com/swoft-cloud/swoft-rpc-server) | | stdlib | [2.0.2](https://github.com/swoft-cloud/swoft-stdlib) | | task | [2.0.2](https://github.com/swoft-cloud/swoft-task) | | tcp-server |Released in version 2.0.3 | | validator | [2.0.2](https://github.com/swoft-cloud/swoft-validator) | | websocket-server |[2.0.2](https://github.com/swoft-cloud/swoft-websocket-server) | ## Extension Component | Name | Version | | --- | --- | | view | [2.0.2](https://github.com/swoft-cloud/swoft-view) | | session | Released in version 2.0.3 | | devtool | [2.0.2](https://github.com/swoft-cloud/swoft-devtool) | | breaker | Released in version 2.0.3 | | consul | Released in version 2.0.3 | | limiter | Released in version 2.0.3 | | elasticsearch | Released in version 2.0.4 | | grpc | Released in version 2.0.5 | | kafka| Released in version 2.0.4 | | swagger | Released in version 2.0.6 | | zipkin | Released in version 2.0.4 |
Its funny that its now ok.
Really?
Yeaaah, seems kinda low quality
&gt; via the doc comments please no
Is this the standard we're holding ourselves to now?
You can do this but it requires extra work. You need to make your data fixtures containeraware, you inject the container and get the entity manager. You can then use it into your data fixtures file to get/set data. Let me give you some hints: `class BaseData extends Fixture implements ContainerAwareInterface` `{` `/**` `* {@inheritdoc}` `*` `* @param ObjectManager $em` `*/` `public function load(ObjectManager $em)` `{` `}` `/**` `* Implements ContainerAwareInterface.` `*` `* @param ContainerInterface $container` `*/` `public function setContainer(ContainerInterface $container = null)` `{` `$this-&gt;container = $container;` `$this-&gt;em = $this-&gt;container-&gt;get(EntityManagerInterface::class);` `}` `}` `function loadFixture()` `{` `$reflection = new \ReflectionClass($fixturesPath);` `$fileName = $reflection-&gt;getFileName();` `$this-&gt;connection-&gt;executeQuery('SET foreign_key_checks = 0;');` `$loader = new ContainerAwareLoader($this-&gt;container);` `$loader-&gt;loadFromFile($fileName);` `$purger = new ORMPurger();` `$purger-&gt;setPurgeMode(ORMPurger::PURGE_MODE_TRUNCATE);` `$executor = new ORMExecutor($this-&gt;em, $purger);` `$executor-&gt;execute($loader-&gt;getFixtures());` `$this-&gt;connection-&gt;executeQuery('SET foreign_key_checks = 1;');` `}`
Why do you thing otherwise?
Some places care so little about it that if you even so much as think of rejecting a PR based on the commit messages, they'll call you a pedantic. We're talking about companies, not FOSS projects here.
I would really appreciate a CONTRIBUTING.md file, as it's now unclear how you manage the Monorepo and what it is you expect from other maintainers.
Hey man thanks I was about to release my brand new micro framework but then I saw your post and said you know what? maybe I shouldn't. &amp;#x200B; Whew thanks man.
Dear god please no there are over 300+ man
[There it is](https://github.com/litphp/.github/blob/master/.github/CONTRIBUTING.md) but it's not helping enough, I'll add more details later For monorepo, I'm using [git-subrepo](https://github.com/ingydotnet/git-subrepo) now. But it keep generating verbose commits so I'm open to alternatives
Don't get why people waste their time writing this crap
&gt;Are we really judging someone work by it’s git message? I can only assume you don't frequent here often.
&gt;To be fair, I'm busy innovating new things Intrigued to know what you're innovating and not reinventing? If the projects are public so we can take a look then even better.
I have thought about this solution but at the end, since for now this is an experiment version made principally to understand if PHP devs want/need a solution like this, I opted to avoid overlaps with the standard doc comment syntax. Do you think could be more useful with the @? Surely is more standard for a "decorator"...
SEO spam -&gt; Google visitors -&gt; a penny from Google Adsense
Of course you can write anything in a builder method, but that's builder instead of dependency injection. You need to invent global keys for it. Your dependency is declared in builder method but not DI configuration. Basically the topic become builder pattern vs DI pattern. &amp;#x200B; I was on the same approach before (using pimple / slim). It's better than hard coded dependency but still not as good as true dependency injection IMO. You lose type safety writing `$app-&gt;get` when you locate service, fetching sub-dependency, or settings. Your key space is unmanaged which lead to a mess. Separating them by namespace / different files can only relieve the problem. &amp;#x200B; I'm not against writing builders indexed by classname, you [can do that](http://litphp.github.io/docs/concepts#builder) in LitPHP (note how my builder manage sub-dependency by signature instead of `-&gt;get` from container). But I will also try to provide more solutions for various applications
I tired to do that! I really tried, the version `0.9` is marked as stable in github, and on packagist, I tried everything, but no matter what I do - composer insists that `0.9` can't be stable :/ If you have any idea how I can accomplish downloading version `0.9` with ```bash composer require rawr/t-regx ``` that would be so great!
Thanks :)
https://github.com/T-Regx/T-Regx.github.io/commit/b0dc8c7b7ccb6da9f81734b810a83dc4a9a4f708 I've updated it, thanks! :)
Do you have any suggestion? For now this is an experimental project, and for now the first objective for me is to understand if PHP devs wants/needs a solution like this. The fastest way to implement it, for me, was to use reflection and the doc comments, that is usually the palce where you can put meta info about classes/methods/properties. Maybe is not the best way, i know, but for now i think is acceptable...
Aren't NIH, one dev, only barebone projects the very essence of one owns bubble? Seen plenty of a prise for an opensource, but it usually advocated undergoing codereviews in bigger more established projects where no-nonsense would be tolerated and hopefully good lessons could be learned. ;)
people who use modern frameworks or even just doctrine are already familiar with the @annotation scheme. it would be weird to add annotations that dont follow this
do you?
Yea, I have about 5 ideas waiting for me to implement them. One of them is interactive React API search. Should take about 5-10 hours to code.
Good, good, thats nice.
Because html is better than php
Why? What purpose would it serve? What content would go in there?
```php $reddit = new RedditClient('user', 'password'); $reddit-&gt;subreddits('php')-&gt;post(new Shitpost());
" ...or simply show off your latest work."
I think it could be a cool community project, but the chances of getting anyone to agree on anything would be slim to none :(
Awesome interface.
300+? Where did you get that figure?
There should be no "I am bored, let's post some pointless question" posts in the first place
But there has to be some people wo adventure outside the living ecosphere who are discovering new things.
Interesting feedback, thank you. I missed the benchmark repository !
I dont agree with that attitude.
I heard that gives you YAGNI and separations of concerns and DRYS and also DRI
This use of Serializable is okay (in the sense that it is safe, due to the use of json_encode), but keep in mind that Serializable is going away in the future.
A disaccorded Symfony
Out of the loop, but care to explain? Is that an RFC or internal/community mutterings?
Because nobody is willing to compromise, everyone thinks they know everything.
Have you tried the other option I gave you? That happens when you manage the package from apt. See [https://github.com/composer/composer/issues/4725](https://github.com/composer/composer/issues/4725) &amp;#x200B; Or you could just install it locally to that project [https://getcomposer.org/download/](https://getcomposer.org/download/)
Compromise is the enemy of good code. It means you never get the best of anything.
Thank you for making my point, I guess I was wrong, nobody can work together.
Yeah. The premise of learning something by writing a framework is misleading. I mean, if you're able to finish your (wholistic) framework and it doesn't look like written by someone experienced, then it means that you've ignored learning and went full codemonkey at some point. The amount of wasted time is enormous, because such frameworks cover lots of problems, and these problems will change instantly after author would actually learn something. I don't mind people posting their work here, regardless if good or bad. But when it comes to frameworks it usually makes me sad because of mentioned time waste, and irritated because amount of code to review does not allow for constructive criticism ("you went wrong way at beginning"), which makes learning even harder. I've made a comment about it under some "better-standard-library-framework" that was revealed recently. &gt; it's hell to get even the basics right. The hardest thing I've ever written is an interface with 3 methods.
When I see decorators I assume it involved using the decorator pattern. I was somewhat sad to learn it instead uses traits. Also the project supports PHP 5.4. A version which has been dead and haven't received any patches (security or otherwise) for almost **4 years now**.
Problem: There are 10 php subreddits. Solution: Create more subreddits.
no automated tests?
Not long ago we had a post about the variadic nature of isset. I assumed empty would work the same way, but it doesnt: [https://www.php.net/manual/de/function.empty.php](https://www.php.net/manual/de/function.empty.php) [https://www.php.net/manual/de/function.isset.php](https://www.php.net/manual/de/function.isset.php)
Just did locally: ``` $ composer require rawr/t-regx Using version ^0.9.1 for rawr/t-regx ./composer.json has been created Loading composer repositories with package information Updating dependencies (including require-dev) Package operations: 1 install, 0 updates, 0 removals - Installing rawr/t-regx (v0.9.1): Downloading (100%) Writing lock file Generating autoload files $ ```
Not an answer but don’t use empty :) It’s dangerous and unnecessary.
Well, I wouldn't call it "a danger". Rather a side effect to keep in mind that it would dismiss a zero value. On what I agree, it is usually overused, as a sort of error suppression operator for the Undefined variable error. which is as abd as any erro suppression
The last couple of times this has been brought up it's because of the semantic difference between `empty` and `is set`, expressed as `empty(x, y, z)` and `isset(x, y, z)`. Does `empty(x, y, z)` means that they're all empty, or that one of them are? With a name like `isset`, it's clear that it means that they're all set, but `empty` does not convey the same meaning.
The proper way to check if the string is really empty is usually to not use empty stings but ?string. If you need to you can use isset($x[0]) which has the same performance. For arrays you can simply use count($x) === 0 which is explicit. For most types (i.e. not dynamic ones) count value is stored in a Z_VAL so there’s no performance implication.
Feel free to expand on why you feel that it's dangerous and unnecessary. It usually helps readability if you want to avoid having to both check if a variable is set and if it is truthish.
https://wiki.php.net/rfc/custom_object_serialization Voted to be included in 7.4.
In 99% of the cases you just wanna check if a variable has the value or type of value that you want it to have, instead of checking for situations you don't want. if (false === empty($user)) { } is worse in every way then if ($user instanceof User) { } Likewise if (empty($string)) { return; } is worse then if (mb_strlen($string) &gt;= 1) { handle positive case; }
You cannot compare `empty($var)` and checking the $var's contents, they do different verifications. So you cannot tell that `empty($string)` is worse. It's just different.
what is ?string?
I know those 2 statements aren't always identical, but I'm saying that there is usually a better way to accomplish what you want. I'm saying that `if (mb_strlen($string) &gt;= 1)` is objectively better than `if (empty($string)) { return; }` if that's what you want to assert. if you wanted your `$string` to have some other property the check that. But there is almost always a better alternative to using `empty`, and it's almost always better to assert that your value conforms to some constraint, rather than checking if it doesn't not conform to some constraint.
Well that's a silly word
There was a discussion about making empty() variadic and it was rejected.
isset() is variadic using &amp;&amp;, I think empty() should use || because then it behaves like !isset().
`?string` means its either a string or null
I'm not sure what you're referring to with respect to inventing global keys. The key is the class name: `$app-&gt;get(Acme\Foo::class)` And you get type-safety with respect to dependencies because `get()` recursively injects based on typehint. There's nothing which should be suggesting service locator pattern in that article if that's what you're suggesting.
There is. For now the [main monorepo](https://github.com/litphp/litphp) has a 67% test coverage (according to my local phpstorm it's 78% line coverage)
Yeah, that. Serializable will not be deprecated in 7.4 yet, but it will happen in the future.
Relevant RFC: https://wiki.php.net/rfc/variadic_empty
So as long as I want to assert that `$var` is set and non-empty I can use `empty()`, thank you.
And I think its the opposite.
Sorry, am I missing something here? can you kindly provide a small example?
I upvoted because truth, while its nice people are making new frameworks for either experiance or serious about the framework. unless you bring something new that other frameworks dont do, expect that no one cares.
FWIW, DocRaptor does include a demo page with an public testing API key: [https://docraptor.com/try\_it\_out](https://docraptor.com/try_it_out)
Maybe this article: https://rskuipers.com/entry/from-assumptions-to-assertions does a better job of explaining it. My point is that you never really care if a variable is set and not empty. You usually care if 1) A string is non empty 2) A variable is a string (and thus not an int or null) 3) An object is of some type 4) A number is higher then zero 5) A list has more then 0 elements etc etc etc. These things can all be translated to positive assertions, rather than assumptions, and they are best implemented with something other than empty. There are some situations where negative assumptions are the only way to get something done, usually if you have some function that has very flexible parameters, but often that's a code smell.
Nice contribution to the discussion buddy.
 function length(?string $foo) { if ($foo === null) { return 0; } return strlen($foo); }
&gt; You never really care if variable is set I do.
Are you telling me to rewrite your post with code snippets in reversed order or want me to add actual explanation that yours is missing?
Then you see these same people but them on github and then other morons install their shit code and the presto internet shito.
Sorry it doesn't work var_dump(length($a)); outputs Notice: Undefined variable: a
wow.... This is seriously mental gymnastics to try to not use a core function that does something so mundane.
Wait what are you doing, I was just giving an example of `?string` not of some replacement for `isset`
I want to you explain why you disagree. Either way [this post](https://rskuipers.com/entry/from-assumptions-to-assertions) is what I based my opinion on.
Yes, and I really appreciate it. I am really sorry, looks like I misdirect this part, should have posted it for /u/kiler129 who offered this `?string` thing as a substitution for empty().
So I guess I'm making two separate points which I kind of conflated. 1) My main point is that it's better to write assertions than expectations. Assertions would check that some variable has the type of value that you do want, rather than excluding some values that you don't want. 2) My second side point is that in 99% of the situations, if you do this, you end up not having a real use for empty. You mostly end up using stricter checks like `instanceof ,`count`, `(mb_)strlen` in combination with different comparison operators.
Can you give me an example of a piece of code where the best way to accomplish some result is by checking if a variable is set?
Sorry I wrongfully assumed that you literally didn't know what `?string` was in PHP.
I would enjoy it. I am new to programming and need all the information I can get.
Thank you. I was not aware this RFC existed back then.
It works for other types as well, lets say you want to inject some object in an constructor: &amp;#x200B; `public function __construct(?ObjectXY $objectXY = null) {` `$this-&gt;objectXY = $object ?: new ObjextXY;` `}` &amp;#x200B; Now, it will either be null, in which case a new instance of the object will be created, or it will be an instance of that class for sure, which you can use just as is.
**Redeemable on new purchases only, not renewals.** It is a 100% discount code for a 1 year personal subscription. Would like it to go to someone who can genuinely benefit from it. Note that JetBrains do give free licenses to students and open source contributors, and they also have the EAP program which is free, so check those out too.
umm it's like this if(isset($_GET['name'])) // to see if name was sent if(!empty($_GET['name'])) // to see if name was sent and contains a non-empty value I have to admit that in all modern frameworks they never check whether an outside variable is set, silently returning null. But for the old good spaghetti it is quite essential still.
I know this
Replied to the wrong dude sorry
man, I don't know... I understand where you're coming from for sure, but empty is so useful specially to check for array key / values, without having to do so many if statements... Specially when working with API's. ``` if(! empty($response['key'])) { } ``` Over ``` if(array_key_exists('key', $array)) { if( count($array['key']) &gt; 0) {} } ```
Tbh I think that PHP Storm is a bit overkill if you are just getting started with coding. If you are not using frameworks and advanced object oriented stuff yet, you don't need most of the PHP Storm features
Your signature of `Delegate::__invoke` is Application -&gt; object, which means if you are writing a FooDelegate for some class Foo which want a LoggerInterface, instead of typehint for it, you write some code looks like `new Bar($app-&gt;get(LoggerInterface::class))` , if another Baz class need a different logger, you start to invent some keys to refer different logger instance, that's typical service locator. And IDE or static analyzer will complain that object is not LoggerInterface. If your framework has some better way to handle this, I'll suggest you to improve your documentation. Another example of global key is in your document `new Bar($app-&gt;getConfig('packages/bar', 'setting', NULL));` it's namespaced (you call it "collection") but still global, you may consider it's something different from dependency (configuration), but for me, depending on configuration is also a dependency, should be handled by DI, although its type maybe scalar type P.S. read your documentation again and find this in "provider" section `$instance-&gt;setAuthManager($app-&gt;get(ManagerInterface::class));` That's what I'm saying about "lose type safety", again if there's a second place need a different `ManagerInterface` instance, you will start scratch your head to invent a second key name
I´d like to have it. I´m a PHP Developer for over 10 years now and I use PHPStorm at work as well. I really love the IntelliJ products and so I´d like to use it personal too. I just dont have the money to buy it (I know it´s not that expensive, but it is, if you dont have money to spare).
This is not actually a good example of empty. What if '0' is supposed to be a valid name, because: `empty('0') === true`? In practice you'd almost always write something like $nameValidator-&gt;isValid($_GET['name'] ?? ''); Which again, doesn't use `empty`.
I've left my job, opened a small one-person business, no permanent income for now and saving every penny before I can find the clients, using free alternative before I can afford to purchase it.
&gt; In 99% of the cases you just wanna check if a variable has the value or type of value that you want it to have, instead of checking for situations you don't want. Not true - [Guard clause](https://engineering.helpscout.com/reducing-complexity-with-guard-clauses-in-php-and-javascript-74600fd865c7) And checking for variable type should be gone since 7.0 typehints. Since you know that passed variable is string then checking if its empty is valid guard clause condition.
`empty('0') === true` is almost never what you want. `'0'` is a perfectly valid non empty string.
Stick to Sublime Code for your first year or two. PHPStorm is an amazing tool, don't get me wrong, but it's an expense you don't need just yet - after the one year subscription you're being handed you would have to pay for it, and you're going to be reliant on a lot of its feature set by then.
You're completely missing the point of the function for the sake of winning an argument.... They're just tools to make our job easier, so their use-cases vary based on the problem at hand.
Take the karma and go, thanks for the chuckle
Almost all of the example in that article are actually compatible with what I'm saying. $isEditor = $user-&gt;getRole() == 3 &amp;&amp; $this-&gt;getEditorId() == $user-&gt;getId(); $isAdmin = $user-&gt;getRole() &gt; 5; $isAuthor = $this-&gt;getAuthorId() == $user-&gt;getId(); $isSupervisor = $this-&gt;getRole() == 4; $isSidebarPost = $this-&gt;getType() == 8; $isTooOld = $this-&gt;created_at &lt; time() — 2592000; if ($isSupervisor &amp;&amp; $isSidebarPost) { return true; } if ($isEditor || $isAdmin) { return true; } if ($isAuthor &amp;&amp; !$isTooOld) { return true; } return false; Those are all positive assertions and the guard short circuits if some expected case is met. if (count($list) === 0) { return false; } Is also an example of an assertion and completely fine and safe to use
I think i'd like to stay.
No you are not understanding the types of situations I'm trying to prevent by using 'assertions instead of assumptions' and saying that 'empty' is bad. It's exactly because the behaviour of empty is erratic and unintuitive which is a nightmare to deal with in a dynamically typed language like PHP. I mean if the example you gave me at least had the benefits of using strict typing then I could sort of agree that you can at least guarantee that empty only gets a specific set of inputs, but your example using an array key directly is exactly when you lose control over types and when empty causes your code to behave in ways you didn't expect. You know how much time one of your colleagues could lose trying to debug why '0' isn't a valid input because someone used `empty` somewhere down the line to check if the result was submitted?
Currently up and coming as a student web developer in university with an internship. I have PHPstorm student, it’s primarily what I use for work with restful applications. If nobody else I’ll take it off your hands for when my student subscription runs out!
What about IntelliJ Community Edition?
Dont ignore good old sublime. She had a facelift and is all pretty now :D
My buddy is teaching himself PHP with my help and I owe him a birthday present. I use PHPStorm at the office and I think he could benefit from the xDebug integrations. Either this or a crummy Steam sale game.
The code you've pasted is about intermediate variables, positive assertion is a reverse of guard clause condition, and `count($list)` vs `empty($list)` is a matter of style preference unless you can provide some reasoning it's more than that (a is better than b is not a reason).
Because
I've been using different editors in my career of 1.5 years like Sublime, NetBeans, VSCode. Somehow i have had problems with them like code auto completion, file paths etc. A friend of mine saw me struggling and recommended me to try PHPStorm if i can get my hands on it.
Yes I know ;) But because he is just getting started I recommend only free stuff
Are you seriously bitching about something being advertised that saved countless hours of debugging for free?
So? God forbid there be a [tiny bar](https://a.pste.pw/kbF.png) to help support an invaluable tool.
I was last month old when I found out `isset` was variadic. This article shed light on it: [https://medium.com/@liamhammett/a-look-at-phps-isset-df64df7158ab](https://medium.com/@liamhammett/a-look-at-phps-isset-df64df7158ab)
This came up a week ago, still don't care that an open project wants to support itself.
re-bitching, someone bitched about this last week.
There are turds, but its not the xDebug guy...
Well you should stop. It's not phpinfo() is public or you are being asked to buy an EA game.
I have to say, I completely disagree with this. Using a proper IDE means all of your learning is framed in the context of writing good code with as few mistakes as possible. Having the IDE highlight silly things like typos in function names or incorrect parameter types by using static analysis removes a whole heap of "wtf?" for a beginner, giving them more brain -space for actual learning. VSCode with the right plugins can do most of this too, but I disagree in general with the concept of a "beginner" not needing to use an IDE. They're not a tool for experts, they're tools for writing good code.
So you never try atom ?
&gt; Well you should stop. He's not the OP.
I have in my todo to write a full page in the documentation about performances, gotta find the time for this ^^
&gt;Well you should stop. Please read carefully, I am not the enemy here.
To send from windows (I’m guessing xampp) best is sent via smtp, because xampp by default doesnt send emails via sendmail. to send outgoong mail you can use smtp via mailtrap.io - super easy. Hope this helps
Sublime is "nagware", I used it for years without paying for it, it just occasionally pulls up a dialog reminding you to buy it.
It's free, you just have to ignore the prompt to purchase, you can use sublime like winrar. Its an infinate trial.
For something like that, learning to write good code and such, I recommend an IDE with good syntax highlighting like Sublime, and a codesniffer like PHPCS to enforce PSR standards, along with PHPUnit for testing code. This is also an invaluable way for a new developer to learn to use a variety of tools to solve problems, especially in case they end up in a work environment where they won't have access to a singular, monolithic tool like PHPStorm.
Okay, we're fighting for the same thing. Those reasons are exactly the reasons I would argue for using an IDE - you said that PHPStorm was unnecessary if you're not "using frameworks and advanced object oriented stuff yet". PHPStorm isn't 'monolithic', it has the same sort of plugin environment as Sublime does.
Considering atom is at this point just a worse vs code...
Couldn't agree more. I think by far for me vs is the best.
What environment is that? Writing PHP for the NSA or something? Very few companies won’t allow IDEs. It’s easier to downgrade to a *basic editor* and add the tools you need once you know what you need. Having an *IDE* that has most of this out of the box let’s them ease into things without trying to learn everything at once. This is an important distinction because new people don’t know what they need.
Except that PHPStorm costs $199 in the first year, $160 in the second year, and $120 in concurrent years, where Sublime doesn't cost anything. A person who is gifted a free year of PHPStorm might switch to IntelliJ IDEA Community Edition with a PHP plugin after their first year, but there are some transitional pains for changing those environments. &amp;#x200B; Remember, /u/steven447 isn't saying "don't use an IDE" and neither am I. We're saying PHPStorm specifically is overkill for the brand new developer, even if you can get the first year free.
Very few companies won't allow IDEs...that doesn't mean they'll all allow PHPStorm. &amp;#x200B; I'm a little confused about where you folks seem to be reading an argument against using an IDE in anything I've said here. Use an IDE!
Install libicu.
I just said that I agree with that. What I was arguing against is the concept that one shouldn't use an IDE unless you're doing "advanced OOP" or "frameworks". I agree with making Sublime into as close to an IDE as you can get, to keep costs down. And btw, it's much cheaper than that for personal licences while learning. £69 for the first year, I imagine $99 or something in the US.
Oh I mean, I'm not the one who said anything about IDEs for advanced OOP or frameworks. And neither did the other guy? He was speaking specifically about PHPStorm. And he's right. PHPStorm's main strength over Sublime, VSCode, and Atom is that it can map all of your classes intuitively and make it way way easier to define class dependencies and service containers and stuff. It has all those cool predictive features for seeing all of the methods of a class in another class, stuff like that. That was the main reason I upgraded from Sublime to PHPStorm. If I'd done so a couple years beforehand though I would have seriously underutilized PHPStorm's feature set; I was barely at that level in my OOP skills.
Windows doesn't have an email server/client build into the OS, like sendmail is to linux. You need to direct the windows phpmailer to an smtp email server to send the email.
So it will work if I just drop the file onto a rpi?
It should do in theory, but if it's coming from a Raspberry Pi on a residential IP address it's probably going to go straight into the spam box of most major email providers.
Do note, there's a small gotcha with php's mail interface, if you're on Linux, the sendmail function only reports if the mail was put on the mail server's _to send_ queue (check out the `mailq` command), it doesn't say anything about whether the mail was actually _sent_. Good to keep in mind ;p
Well if you want your choice to last you have only one option, Doctrine. And I hate Doctrine, so you know my advice is honest.
Why not doctrine?
Its good. But try working between php 5.6 and 7+ version.
If that runs out wont you have a job?
Doctrine is twice as slow (in some benchmarks) and more complicated to work with, I prefer the light weight and ease of use that Idiorm provides. Doctrine seems like overkill for my use.
If you are gonna work for Stallman you cant use PHPStorm. You know it. PHPStorm is sooooo unfree its killing you inside out.
I am already set, but hope this finds the right recipient. Best IDE I ever worked with.
Haha. Actually I still try wrap my head around between the legend,old and new version of PHP. I wish i straight away get it what you mean by this. Haha. Sorry.
wuh? Is this irony?
Would you be interested in Eloquent?
I know this isn't really what you're looking for but... Sending emails reliably is a pain and requires a fair amount of ongoing attention. I'd just use AWS SES. It takes care of a of concerns for you such as dkim signing and spam control. It makes your mail hit inboxes a lot more often than spam with minimal effort. And you'll most likely be in the free tier, so it won't cost you anything.
I still prefer NotORM
You might want to take a look at [Atlas.Orm](http://atlasphp.io/). Depending on your specific needs you can go from [simple PDO wrapper](https://github.com/atlasphp/Atlas.Pdo) to [full blown ORM](https://github.com/atlasphp/Atlas.Orm) ([or](https://github.com/atlasphp/Atlas.Query) [something](https://github.com/atlasphp/Atlas.Table) [inbetween](https://github.com/atlasphp/Atlas.Mapper)).
That killing part is somewhat exaggerated.
No, that part could have been a direct quote from Stallman, dude literally called licensed software a "crime against humanity" once. I'm just unclear on whether you're joking around for its own sake or are vaguely mocking the notion that any employer wouldn't furnish its employees with paid software.
Check out [illuminate/database](https://github.com/illuminate/database#readme) for using Eloquent without Laravel.
I killed a giant when I was 10. Then I climbed right into bed with his wife. When she woke up, you know what she did? Suckled me at her teat for three months. She thought I was her baby.
&gt; which is as bad as any error suppression. Mmmh, no. Checking if there's an entry in a hashmap, when it might not be, isn't "bad". It's the expected action to take. Not checking and assuming it's there, *that's* bad.
Me too man, good luck to you! If you have any extra work send it my way :)
I cant imagine a employer in the it sector who is this stupid and dont want their workers to use proper tools.
Expand your imagination my friend! Employers in the IT sector are far more stupid than just deciding not to pay for their employees to have a more expensive tool instead of giving them a free alternative. I have firsthand experience with this as a developer of over a decade who's worked for a handful of companies and talked with many of my colleagues.
I’m a student
Next time take 5 minutes and a bit of paper and calculate the costs with them. Show them that they actually have less costs and more production. If that doesnt help what are you doing? Putting cables into pcs? My employee doesnt throw money at anything. We have to ask for 16gb ram 2 years to get it even if its only 80$. But they wont discuss phpstorm at all. they could double the price if the devs are making more money with that tool.
Does it bother you that Eloquent is ActiveRecord?
I'm not totally clear on what you're saying here. Are you arguing that any given employer can and will see the benefit of PHPStorm and definitely buy licenses for all of their developers? Companies are just run by people, it's a great delusion to think that "being the boss" automatically implies "being smart". The organizations you work for will not always be staffed with reasonable people. Again, like, I promise! I'm telling you this firsthand.
So...you gonna post logs or any other useful information besides "it doesn't work"?
Hi, &amp;#x200B; We recently upgraded our server to use PHP 7. We have a payment file from PayPal that uses CURL, but we are now getting this error: &amp;#x200B; \[29-Jun-2019 20:50:00 UTC\] PHP Fatal error: Call to undefined function curl\_init() in \[...\] on line 25 &amp;#x200B; We reinstalled curl and rebooted our server, any ideas on how we can QA this properly to see why it isn't being initialized?
&gt; /r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
It may be sitting in the mail queue on the server you are sending from. I would check the maillogs which should tell you if the message was accepted at the other end or if it ran into problems. Depending on how things are set up it may have successfully sent, but not been delivered (invalid address, blocked from destination server, etc).
i was updating the mysql to mysqli, refactoring old code, testing every function... u get the idea
&gt;PHP 7 Upgrade and curl\_init no longer working Okay thank you
They would post phpinfo() but then would have to bitch about xDebug asking for some money ;)
[removed]
:\^)
 apt-get install php7-curl then restart the services you use. Please contact me via pm for the accounting information. You can send 1% of that paypal gateway i fixed to there ok?
Is the extension enabled in your PHP.ini? Can you see that it is enabled when you look at your phpinfo() output?
Asking me or the OP? Personally I don't mind it, though I tend to use it more for the *easier* things like CRUD operations.
[https://www.reddit.com/r/PHPhelp/](https://www.reddit.com/r/PHPhelp/) is the place to ask for help.
Shit I bought one today. Not saying I would've got it but damn that's a missed opportunity
I don't need it but I appreciate your work.
I'll take it. Don't know what it is, but I love free stuff.
Thats what you take PHPStorm for anyways, unbeatable concerning php
Internship ends before subscription runs out!
You think that's bad… &gt;! [The method writeHTML() has an NPath complexity of 916820154938974547473503936268760459070729055217208720. The configured NPath complexity threshold is 200.](https://www.reddit.com/r/programminghorror/comments/4b3e9z/generating_pdfs_from_regexparsed_html_is/) That's [180 binary digits](https://www.wolframalpha.com/input/?i=916820154938974547473503936268760459070729055217208720+in+binary).
Can you show a code example?
Startups get 50% discount from Jetbrains, &gt;This discount is available to any company that meets all the following requirements: Is privately held, Has been in business for no more than 3 years, Is engaged in development of a software-based product or service, and Is an established business with a website and/or existing public references on the Internet. If your company meets these criteria, apply for your discount now. After your application is approved, your 50% off startup discount will allow you to purchase multiple products and subscriptions for up to 10 unique users over a period of 24 months. https://www.jetbrains.com/shop/eform/startup
You can setup symfony components to behave like that.
I was trying to think of the least-rude-way-possible to say basically this. If you see the need for something build it.
&gt; Your signature of Delegate::__invoke is Application -&gt; object, which means if you are writing a FooDelegate for some class Foo which want a LoggerInterface, instead of typehint for it, you write some code looks like new Foo($app-&gt;get(LoggerInterface::class)) Correct. &gt; if another class Bar class need a different logger, you start to invent some keys to refer different logger instance If a different logger is needed, then I either create a logger factory or registry and get the logger from that instead. This is not part of the docs because it's not a decision for the framework to make. It's equally possible to simply construct the Bar specific logger inside its delegate. The dependency injector is just Auryn, which additionally would allow for `define()` to be used, but this is, indeed, not abstracted. In either case, under no circumstance to I "invent some keys." &gt; Another example of global key is in your document new Bar($app-&gt;getConfig('packages/bar', 'setting', NULL)); it's namespaced (you call it "collection") but still global, you may consider it's something different from dependency (configuration), but for me, depending on configuration is also a dependency, should be handled by DI, although its type maybe scalar type These are values pulled from a configuration. The $collection refers to the configuration collection its contained in. Obviously it is a dependency, but it *is* handled by DI as these are pulled within the context of the delegate. With respect to type-safety, if you are passing an incorrect type (whether scalar or object/class), then type-safety is ensured by proper typehints -- just as it is anywhere else. &gt; $instance-&gt;setAuthManager($app-&gt;get(ManagerInterface::class)); That's what I'm saying about "lose type safety", again if there's a second place need a different ManagerInterface instance, you will start scratch your head to invent a second key name 1. The type safety of setAuthManager() is determined by the typehint on its argument. 2. If I needed two managers, I would agree, create an AuthManager factory or registry -- but again, this seems like an architectural decision on the part of end-developer, not for a framework to decide.
No you dont even have to edit it. Dont go fullstack. Build your scaffolding with the components. Like route annotations are basic features of the router. Ok we could change the naming with a NameToSpringShitComponent to get some rudeness into it.
Ha, I like this `:=)`
Symfony is close but doesn't automatically convert to(response) and from(request) JSON
While I agree with the sentiment that Laravel is bloated, what you described is not the related to the bloat at all. You don't have to do any of those JSON conversions, the framework does that for you. This post reads like you're comparing the worst of PHP frameworks with the best of Java, although that might be due to your ignorance of what modern PHP frameworks can do. In Laravel You could technically do the route definition in the route file to be as simple as you describe. Route::post('blog/post', function(Request $request) { return Post::create($request-&gt;all()); }); I really can't see that being any less verbose. But using controller classes is best practice both from a code maintainability perspective and from a performance perspective (the above stops you from doing route caching). Route::post('blog/post', 'BlogController@create`); then class BlogController { public function create(Request $request) { // decoding the JSON from the request is automatic and the result can be retrieved with $request-&gt;all() return Post::create($request-&gt;all()); // response json encoding is automatic } public function update(Post $post, Request $request) // pulling the $post from the database is automatic. { return $post-&gt;update($request-&gt;all()); //again, response json encoding is automatic } }
Thanks for your feedbacks 👍
It has nothing to do with bloat. It has to do with patterns. I use Laravel at a large software company to build enterprise APIs all the time and it's far less of a pain in the ass than Spring Boot (which I used to use as well). You can configure many of these frameworks to do exactly what you're asking. &gt; We really do need better PHP frameworks with less verbose code. No we don't. You need to learn how to utilize the tools you're given or go back to using what you're comfortable with.
smarter man than i am
 isset($a, $b) === (isset($a) &amp;&amp; isset($b)) === !(empty($a) || empty($b)) // === !empty($a, $b)
Phpstorm has a 30 day trial.
You just missed out the DynamicDoctrineModelResolverHttpRequestComponent (Sorry i dont know but its a Resolver...) Then autowire it and it just works.
Thanks, how does `Post $post` know what post it is? what if the request was different from the domain format (like a DTO)?
It comes from the route definition. I didn't include it in the original post, but it would be `Route::patch('blog/post/{post}', 'BlogController@update`);` whatever us passing in the `{post}` portion is used to find the individual post. By default it grabs the post with the id provided and automatically 404 if it doesn't exist. That can be changed by overriding the `primaryKey()` function to return the column to be used in the lookup. If the look up is even more complicated you can override the whole process by binding a function to do the look up. Route::bind('post', function($value) { return Post::where('published', 1,)-&gt;where('slug', $value)-&gt;firstForFail(); });
What
Ah Thanks!
I googled it but, No results found for DynamicDoctrineModelResolverHttpRequestComponent Did you mean sarcasm?
Check out Symfony. I did a little Spring Boot work around a year ago. The core of Symfony4 has a lot in common with it. Similarities I'm aware of: * Annotation configured controllers * Nice DI container that can autowire dependencies * You tend to build custom services for business logic and inject them where you need them. * Doctrine is the most common ORM, which borrows a lot from Hibernate * Both are data mapper, not active record. * Models are annotated similarly and can create/run migrations in the database for you. Both projects have lots of components and projects, and I'm sure there are tons of differences among them, but from a core framework perspective, if you're comfortable in one framework, it will be pretty simple to pick up the other one.
My point was more about using complex and expensive software while you are just getting started. I'm not against turning Atom into an ide with the proper plugins or using something like Netbeans
You can get jetbreans and a lot of other coding software for free as a student. Use your education email when creating an account.
True but it is not meant to be "free" software
[What](https://preview.redd.it/wj7w9s4jciw21.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=c70108d9068ebc4256a2d1966be6214242ff8f19)
Yes but i dont know what kind of JsonResolver you need. Ask a real Symfony guy. But its possible.
Write open source code and you'll get it for free.
Not interested but speaking as someone who develops a lot in front end and php, it's my favourite IDE.
/r/unexpectedGoT
\`array\_any(\[x, y, z\], 'empty')\` \`array\_all(\[x, y, z\], 'empty')\` &amp;#x200B; Done. Variadic functions have their use, but this is not one of them. Plain old function composition for the win ;)
Jetbrains will give you access to their products if you have a .edu email address. If you don't have a .edu email address you can [get one](https://www.google.com/search?q=how+to+get+free+edu+email).
As a side note, PHP NEEDS annotations ( @Post("/blog/post") )