As I said in my post, my point was not to get people to use it now but to share ideas i have implemented and get feedbacks on a still under active developement project. Comments like "yet another framework" bring nothing to the discussion. Plus that pedantic touch in his comment for no specific reason.
From experience, the vast majority of them are and the only way you can really know how well they're managed is to have root on them anyway, otherwise it's generally just the apperance of running well because the hosting company isn't actually all that popular. You are very likely to run into a contention problem at some point. Regardless of whether you're on a server with 5, 100, or 1000 other customers, there's generally a very poor level of control over a run away process. Generally you'll be oversubscribed anyway though as it's pretty much impossible to compete with the $20 a year hosting deals. Even proactive hosts will do stupid shit like move peoples sites and email them to update their dns. They'll happily do this automatically if you're hosting your dns with them, but woe on you should you not and should you miss the warning email. Your software is running on a server with everyone else. They can read your file, pickup your passwords, read your data. Your data isn't secure. Now you can mitigate all of these things, some hosting companies will have you running in your own chroot, or more modern shit like a container, and you can run php-fpm which'll give you better control of processes, etc, but any good sysadmin will tell you, once someone else has access to your box, the battle is lost. If you're doing something important, your hosting it on it's own server, or at the very least, it's own VPS. Sure, your blog doesn't matter, but when you start making calls to a payment provider, you really don't want to be doing it from a shared host and the only reason a business will stick with that, is because they're a) stupid, or b) not making any real money. It may have come across as rude and certaintly got me down voted, but I'd argue I'm part of the majority here. Outwith the few prolific open source projects, I imagine the vast majority of people who aren't living on raman are just like me. How can you possibly expect to be getting paid resonable sums by companies than can't even stretch $5 a month for a vps? (which is still technically a shared server, but you'll get root this time ;) ) 
It's sad that someone called you a cunt over PuPHPet :(
\#\#php is the slum of Freenode.
Ironically that's the beginner framework :P
I thought threading was becoming obsolete with the advent of concurrent programming.
Wow, you devote your free time to something you love and that gives you the right to be a cunt with impunity. Get real.
And also we'll alternate needle and haystack order in all of our search functions. 
Fuck you
&gt;Yes and that's fine as to not block I/O is the only reason there is any need for multithreading. I disagree, multi-threading can be useful in CPU-bound situations. EDIT: I don't mean that they should be used when responding to request that are CPU-bound, as I think we have much better solutions to that problem, but more in general, there is a use-case for them other than IO and it is CPU-bounded tasks.
(i am using full IntelliJ IDEA, but doesnt matter) TBH i just disabled the tab panel and use CTRL+E (or CTRL+SHIFT+E) to jump between last opened (modified) files. I had to get used to it, but in the end i think i am way faster on writing my code than using the default tab behavior.
CTRL+e is definetely worth considering, good suggestion! But nonetheless I would be more pleased with a working tab bar ;)
I have some (definitely not most) classes using the container as a service locator through a ContainerAware trait, for a good reason. You may for example need a service inside a controller. You can't instantiate a controller with all services, so the container here is the best solution. And I believe in that aspect other frameworks work similarly. Symfony for example uses ContainerAware too in multiple classes. Would you say the "entire framework is using a service locator"?
I'm sorry if I come out as obnoxious. I don't mean to annoy or berate anyone. It's just that me (and my community members, some of which commented here) have pretty high standards regarding code practices, and also a bias against wall-to-wall frameworks because they tend to solve the wrong problem. No disrespect to you or your code :)
The reason I disagree with your disagreement is because if you start using JS for CPU intensive calculations, then you are using the wrong language (it's slow). I would rather suggest executing an external executable compiled from a lower level language that would specifically perform the CPU intensive calculations. And executing that executable should count as I/O and also be async-able.
Well, I'm not sure which community(aka downvote bridage) you are from, but you guys came out as quite disdainful. I'm also for high standards but it's not just a "NO STATIC OMG NAZI!!" thing. As I have pointed out, in a few specific cases, some major frameworks use global state/statics. Does that make Sf, Laravel and others "worthless"? Btw, I'm not sure what you mean with "wall-to-wall frameworks".
I've never used a language which wasn't flawed.
That's awesome, I have gone with this. Thank you! 
Yes. [Here's an example](https://webindd.com/dashboard/pass/Doughnut_Discount/preview) This would be possible using HTML+CSS, but using PHP was easier.
I'd second this - any actual "real" framework is going to have a lot of other noise around it that may actually make explaining the pattern harder.
i hate the way it handles two column layouts- if you hit cmd+w on the right hand column it closes the column completely 
IMO it is probably the inability to have multiple projects open in the same window. In the project pane I feel like they could easily add a reference to all the other open projects so that at least you can switch between them quickly. Also the magical hidden checkbox under tools&gt;deployment&gt;auto upload is pretty terrible from a UI perspective.
One thing I have noticed, is I will select a section of code to delete and all of a sudden it will be deleting another section that I didn't select for some reason. Happens a fair bit. I don't even touch the mouse after I've selected it, so not sure what could be causing it or how to replicate it.
There's a difference between "flawed" and PHP. 
&lt;crtl&gt;+&lt;tab&gt; is a good option to switch between opened files
This a million times. Create a one to many relation between a server and projects
/r/symfony exists but doesn't have much traffic. I'd love to see it grow.
&gt; In the controller you may need the database service, or a form, or the orm, or the email service, etc. All these "utils" must be available in the controller, but there is no point passing them all to the constructor. Controllers are supposed to be a mapping layer between HTTP and your application, they shouldn't contain any logic that isn't explicitly related to the http layer. You make a good point with form classes since they're explicitly tied with HTTP, but at that point you should be injecting something like a form factory, not using the container to create the forms. &gt; In most cases you could totally ignore the container. Maybe, but I'd much rather be able to explicitly ignore it instead of having to browse the source to figure out if the container ever gets (ab)used. Constructor injection makes this much easier and makes it harder to violate SRP as you can't forget how many dependencies you have.
Guys, 92fiveapp is on github Visit https://github.com/chintanbanugaria/92five
Guys, 92fiveapp is on github Visit https://github.com/chintanbanugaria/92five
Guys, 92fiveapp is on github Visit https://github.com/chintanbanugaria/92five
Guys, 92fiveapp is on github Visit https://github.com/chintanbanugaria/92five
Oh joy, another one. Issues: - has code in document root - uses the deprecated `mysql_` API - suppresses errors with `@` - all variables and all methods are public, uses `__` prefix for methods to indicate "visibility" - mixes tabs and spaces for indentation - author has no idea what `filter_var()` is - there is also PDO used some, but in a way that maximizes injection vulnerabilities - claims to be MVC, while having nothing even slightly related to said architecture .. enough. I cannot read through that nightmare anymore or it will cause brain damage. It's bad. It is **really** bad.
PDO **and** `mysql_`? Identity crisis?
I'm currently working on a project where a user can customize parts of an SVG image via javascript and then download the image in a variety of formats. I'm using PHP to save the user's changes via AJAX, convert the image to the specified format, and then responding with a temporary download link.
True, but that is extremely difficult to get right, if not impossible.
What were you thinking?
Ouch [xorCrypt](https://github.com/oytunistrator/odiacfw/blob/master/_Odiac/Helpers/xorCrypt.php)
&gt; So all in all, I would say there is nothing in PHP to be excited about, any one who tells you that is either stupid or trying to sell you something....So I would suggest you go back to Python and forget you ever set foot in /r/php.... So call me stupid then...
The new JB IDE-s have that free/multiline selection that you do with alt and it's sticky (as in - "stays" for a bit). Maybe that's the reason? I kinda like it tho.
Call me back when there's a README that tells about the "mini framework", and English!
I am really tired with the way file tabs work. I usually have a lot of them opened and the only "tab management" feature is pinning. I wish I could group and color them, maybe also have the ability to minimize groups. Right now I have 4 "index.html.twig" tabs opened and I have to click any of them for the name to prepend the folder name. [This is how PHPEdit does the tab thing](http://i.imgur.com/OBYvNzs.png). I really wish it wasn't dead.
Ctl+C without anything marked copies the whole line. It's at least once a day and more often many more times than that that while meaning to press Ctrl+V, I mistakenly wipe out my carefully copied paste buffer with a badly typed Ctrl+C. If only there was a setting to say whether Ctrl+C copied the line or did nothing on a blank copy.
Overall I like PhpStorm, but there are a couple of things that are very annoying - after every search you have to reset the context/folder. I really wish it remembered where I was searching last time - jumping tabs are pretty confusing - I don't know if this is a Mac only bug, but I have a bunch of files that are missing the last letter of the classname (e.g. IndexController is IndexControlle.php), and this is because there's a small delay between what you type in the class name field and what the editor copies in the file name field, and very often I press enter before the last letter has been copied across. It's kind of ridiculous that I can a race condition like this and other small things but still annoying: - when you use code generation to create a constructor it always omits public - when you use code generation to create a constructor it puts the variables in alphabetical order instead of the order they are in the file (who thought that chronological order was a good idea???) - move code up/down is too smart. I prefer Eclipse's stupid version, which doesn't care if you are changing the scope or not. It literally just moves it up or down as you ask it to. and my wishlist: - if the file and the class have the same name, if I edit one I'd like the editor to rename the other (or at least ask me). I'm sure there must be a proper rename function, but I wished it worked with rename file and changing the class name too
No docs, updated a year ago, single contributor, non-english inline comments, random code commented out
Thank you for the feedback, so if in my app I need to do some background processing . let's say as an example I want simultaneously ssh to a few machines and run some commands, would this be a good case for pthreads? Or would you suggest something like gearman or resque
I just wish the tab panel wouldn't shift around on me when I'm selecting a file such that the focused file is on the bottom. I can't remember where anything is just because of that one dumb thing.
i cant use mysql_ functions. new model class with PDO. thanks for help other issues. 
Eh well, i do. All html files/markup in my code is separated from the data or logic.
I think you might be looking for; Settings: -&gt; IDE Settings -&gt; General -&gt; Project Opening 
Yes with jpGraph. Because seems discontinued, I forked it on github https://github.com/corretge/JpGraph
The user interface for setting up advanced breakpoint stuff sucks. FYI, you can set conditional breakpoints in PHPStorm, with things like: * Only suspend execution on this break, if this other breakpoint has been reached first. * Only break on this line if a value has a certain value. * Break on exceptions being thrown. Which are all awesome, but those capabilities are hidden away and fiddly to setup. It's one of the best bits of the IDE and it should be front and centre.
What problem would that solve that opening the projects in different windows doesn't? You can switch between them relatively faster by Command + ~ on Mac. Presumably there is an equivalent switch key combo on Windows/Linux.
I use PHP to : * Generate Captchas * Thumbnails * I have 1 graph that I generate with PHP ( it's a visual traceroute tool ) * I think I have a graph that I generate PHP side, but it's the only one. The rest are done with Dojo.
filter_var() is a good call. 
Then isn't a framework following the mvc architectural pattern a... MVC framework..? And why would mvc be uncompatible with using an orm..?
I'm not a fan of when you do CTRL(or Apple Key)+UP/DOWN arrow, it doesn't go to the top or bottom of the code. Pressing CTRL+UP goes to that weird navigation bar up top. Going to that is useful, but inconsistent with almost all other editors. Also when you tab something, then press delete, it deletes it as spaces.
Could you give me an example?
look at any modern framework.
Are there not a bunch of rails inspired frameworks for PHP?
I wish there was an asterisk on the tab when it's unsaved.
Uh, could you give me a point in the right direction for those settings?
If you group similar windows, then Windows Key + *n*, where *n* is the position of the IDE in your taskbar, far left starting at 1.
I agree. Far too often I go to ideone, paste my code for a quick check at the result. 
C'mon...you've never been in a situation where you had to pick between getting it done and getting it done right?
GitHub integration needs to be worked on. Having to edit .git files to get it to work is a little annoying. Also GIT Push Tags - http://youtrack.jetbrains.com/issue/IDEA-77483
Startup cycle is REALLY slow. I don’t spent most of the time on phpStorm, only when required.. plus I work on different repos which forces me to open/close different windows.. so I rely on Sublime to quick jump over projects.. I know that an IDE is not a text editor.. but having a fast startup cycle would allow me to work better
A framework does not contain **domain business logic**. A framework does no contain the **application presentation logic**. MVC pattern defines how information should flow between those two parts (model and presentation layers, respectively). Why do you want to define something as *"the thing that it does not contain"*? And ORM is neither compatible nor incompatible with MVC. And I never made any claims regarding that. You could probably use it within the model layer for persisting your domain objects (most likely in context of a service, repository or unit-of-work). What I was trying to communicate was that **an instance of ORM is not a model**. Instead the model is a layer, which contains multiple classes of multiple types and various responsibilities. 
I get plenty of low-level and/or highly technical stuff from planet-php.net.
Depends if only passing the $user_id would then force you to load the User model inside the method, and thereby creating a hard dependency on the model itself in your code. If you can avoid the User model entirely in the method then either way is fine.
But the framework will enforce you to follow a specific pattern, may it be mvc or another one. If the framework is designed such that you should build your code following the mvc pattern, it's an mvc framework.. That's actually the purpose of a framework. Enforce the developer to follow a specific archecture and provide the tools for that. **Edit:** i really hate that mentality in /r/php. Downvote because you disagree. Come on, explain! If i was wrong i will learn something, if you were wrong you will learn something. This is not directed to you teresko, but to the ones who just downvote and can't even tell why.
Yes sorry I should have said, the User model is not needed. The user ID is going to be used to query data through other models e.g. maybe it will do something like Payment::where('user_id', $user_id)-&gt;sum('amount'). I am just wondering what is the best practise in a case like this really.
Having been part of the PHP Community for what seems like eons now, I have noticed us getting more rude and insulting in the past couple year beyond swearing/not-swearing. I don't know if it's my own cynicism coloring my perception, perhaps growth in the community makes for more assholes just because of more people and more personality types, if the world is getting to be a nastier place, or maybe I'm interacting with more people the longer I'm in the community (again, more people == more personalities), but the community doesn't seem as friendly as it used to be. Maybe the super-friendly members have moved on in the past 10 years to other projects/languages. Don't get me wrong, there were always dicks in #php for example, and internals has always been a cat fight of megalomanics, but I notice it more now in other places. It would be interesting to do some natural language/mood analysis on blog posts, r/php, #php and #phpc, various forums, and book reviews and present that over a period of time.
wow great work!! We never know which is the next gen framework, so we need to keep learning .. and what you showed here is truly impressive!!
What's the context? What is the class where calculateTotalSpent is going to reside? More importantly, are you thinking ahead - what about cancelled orders? Refunded payments? How will all that be glued together? Which class do you want to know about the Payment class? The User class? There's really not enough info here to give a solid answer.
I don't think it's that, I'll try soon though. But I will be at the bottom of a function I wrote, selecting a bit of text and as soon as I press delete (or CTRL + X as it's quicker for me) it won't remove the bit I selected instead it removes a whole line up near the top of the function. Bit odd haha.
Thanks for this. I didn't know about that setting. For others looking for this setting in PHPStorm 8 EAP, it can be found at: Settings / Preferences: -&gt; IDE Settings -&gt; System Settings (click on it, don't expand it). Unfortunately the setting doesn't address my particular use-case. I don't want to replace the project in the same window or open the project in a new window, so neither preference would get my preferred behavior. Ideally, I would prefer that I could have both projects listed in the project panel and PHPStorm would know to set the "active" project based on where I am in the file structure. So if I have a file from project A opened, them all keyboard shortcuts / menu items would apply to that project. The primary use case for this would be apps where you have lots of dependencies or modularity (through composer or other dependency management). If you have forks of the dependencies that you're making modifications to, having a window open for each dependency isn't preferable to me. I don't expect PHP storm to understand those dependencies, but being able to lay out my workspace in an efficient way to allow for this kind of app would be kick ass. 
Very harmful: refactoring is not limited to the given scope Very annoying: strg + click jumps to a definition. This can be useful, but it was also triggered quite a few times where I wanted to select and copy some parts of the codehappend quite a few times, when I wanted to select and copy a line
Yup. +1 for captcha and thumbnails.
Usually a software engineer job, in my experience, will not be really tightly coupled to the tools you'll use. In fact, you'll be expected to pick up whatever tools you need, whenever you need them, without direction or instruction. An "intermediate &lt;language&gt; developer" is generally more of a person who takes specific directions and detailed requirements and codes to those specifications. As a software engineer you should be able to speak on software architecture, best practices, testing methodologies, continuous integration, a wide variety of soft skills such as requirements gathering and conflict resolution, and to some extent infrastructure and systems administration.
I'm sure there is a java/c++ joke here somewhere...
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Law of Demeter**](https://en.wikipedia.org/wiki/Law%20of%20Demeter): [](#sfw) --- &gt; &gt;The __Law of Demeter__ (__LoD__) or __principle of least knowledge__ is a design guideline for developing [software](https://en.wikipedia.org/wiki/Software), particularly [object-oriented programs](https://en.wikipedia.org/wiki/Object-oriented_programming). In its general form, the LoD is a specific case of [loose coupling](https://en.wikipedia.org/wiki/Loose_coupling). The guideline was proposed at [Northeastern University](https://en.wikipedia.org/wiki/Northeastern_University_(Boston,_Massachusetts\)) towards the end of 1987, and can be succinctly summarized in one of the following ways: &gt; &gt;* Each unit should have only limited knowledge about other units: only units "closely" related to the current unit. &gt;* Each unit should only talk to its friends; don't talk to strangers. &gt;* Only talk to your immediate friends. &gt;The fundamental notion is that a given object should assume as little as possible about the structure or properties of anything else (including its subcomponents), in accordance with the principle of "[information hiding](https://en.wikipedia.org/wiki/Information_hiding)". &gt;It is so named for its origin in the Demeter Project, an adaptive programming and [aspect-oriented programming](https://en.wikipedia.org/wiki/Aspect-oriented_programming) effort. The project was named in honor of [Demeter](https://en.wikipedia.org/wiki/Demeter), “distribution-mother” and the Greek [goddess](https://en.wikipedia.org/wiki/Goddess) of [agriculture](https://en.wikipedia.org/wiki/Agriculture), to signify a bottom-up philosophy of programming which is also embodied in the law itself. &gt; --- ^Interesting: [^Demeter's ^Manual ^of ^Parliamentary ^Law ^and ^Procedure](https://en.wikipedia.org/wiki/Demeter%27s_Manual_of_Parliamentary_Law_and_Procedure) ^| [^Demeter](https://en.wikipedia.org/wiki/Demeter) ^| [^George ^Demeter](https://en.wikipedia.org/wiki/George_Demeter) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjwk74q) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjwk74q)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
That probably means you are in fact using spaces to indent your code.
File sync on window activation is slow and simply unusable if you're switching between the IDE and a browser a lot. Running synchronize manually gets tedious.
You lost me here: https://github.com/rail-rz/framework/blob/master/index.php#L10-24
Concurrent programming? Topic please.
That bothers me as much as you. Opening multiple Projects in one window at once is really missing. Good old NetBeans &lt;3
But the IDE cannot know that. *Especially* in a language with variable variables.
It's fine. Just go do it. Learn from the experience. You'll be OK. This isn't something anyone can teach you.
Time.
Not really a solution, but a SSD helps greatly with that.
Interesting. Hadn't thought of just having it open in both for editing sake. Thanks for the idea.
I'm on OSX but good to know in case I'm on a coworker's windows box. Thanks.
It is written in java. Coming from OSX I would love to see a native version.
Ah - the copy whole line thingamajig - I can confirm it's weird. I tried to change it to select just the word under the caret, but the closest I got was making a macro that combines "extend selection" and copy/cut/paste. Kinda got used to it in the end. 
Yea this one frustrates me, too. I wish all Mac apps would stick to one convention for navigating documents. Some use Windows conventions, some use Mac, and some use JetBrains conventions.
Afaik you don't have to save in phpstorm. It always saves for you
I've seen this comment a few times lately. What would be the real benefit of having a native version? I mean there would be the obvious drawback of a higher price, since they would now need to develop three versions (Win, Mac, and Java) instead of one. I can't imagine the performance improvement would be all that significant?
It shouldn't do that because writing your code like that is bad
As an alternative, you may wish to see the [Maintainable Framework](https://github.com/maintainable/framework) by Mike Naberezny and Derek de Vries. Super, super Rails-y.
I hate the tabs so much I close any extra files I'm not working on so I just always have one tab row. If there were a toggle to limit the tabs to one row I would enable it.
$a*= $b + $c can result in a "wrong concatenation operator" warning (it should see the multiplication and know that it's my intent to perform math).
&gt; Is there such thing as too many classes? Yes, but you are not there yet. Do not be wary of "too many classes." Be wary first of "too many combined concerns." &gt; is it worth moving code out of controllers and into their own class if you know that the code will only ever need to be called from the controller in that one place Yes.
Not from my experience, I have auto-reload on JS files which minifies etc but they aren't run until CMD+S
Yep, if we could have Eclipse-style projects, that'd be amazing.
Thank you very much for your comments. I will definitely take them into considerations. For the duplicate static methods though, i'm still a bit reluctant getting rid of them. I find the activerecord pattern much more pleasant to use, although it has its drawbacks, which is why i have also implemented a datamapper. I should maybe keep the activerecord for the business code only. And for the bootstrap step, it's mostly for two things: register the default services and load the bundles (controllers, hooks, ..). I could let the developer do all that by himself, but isn't it convenient to have all of that automatically loaded? That may not please purists, but I guess its a tradeoff between convenience and strict code? Moreover it's not mandatory, one could skip the load step had he prefered strict/pure code. And actually, my ideal framework is one with a solid and standard base on top of which you could use more simple APIs/syntactic sugar to make the dev work more sweet. This is what I'm trying to achieve (not there yet!). Anyway, again, thanks for your feedback!
No syntax highlighting for other languages. I understand they have separate IDE's for that, and that's completely fine, but I don't think it is too much to ask for just rudimentary syntax highlighting for when you have to make a quick edit. One of the projects I'm working on at the moment is PHP, but has a couple Python scripts for various shell tasks. It's really irritating when you have to make a quick edit but have no syntax highlighting.
no official integrated phpunit 4 support in phpstorm 7.1.3, took me 1 minute to [patch the php.jar](http://stackoverflow.com/questions/22799619/intellij-idea-wont-run-phpunit-4-0-tests) myself and they werent able to release an update for so long.... another thing which bothers me is that i cant define the file-tab-size or -height, they're pretty small on 1440p, even on 1080p imo and i would love to be able to customize the height, because it gets even more frustrating with tab multi lines. and, last but not least, CTRL + W does not close files by default.
You do know that twig ends up doing echo or printf right?
or maybe: &gt; getting it done by the deadline or getting it done right
cannot join the channel, must be invited
Gotcha. thx.
Well i don't know what else would you call a program which let's you take control over at specific points to add your observers and react to the events? 
sweet!
 i use pChart ( http://www.pchart.net/ ) to generate report/charts also i resize/crop uploaded avatars/logos etc using GD2 library ~ resizing means also generating thumbnails at the same time of course
Lack of native blade templating support (Laravel). They have a text mate plugin but that doesn't offer good integration with PHP. 
If it helps, you can tear off tabs into new windows which I do a lot. May not be very convenient for you however. 
I would like a way to sync project files without pushing my laptop temperature to 90+ degrees celsius
Yeah this is my main issue. I have a client application that consumes an API I wrote, and sometimes it's helpful to have both open at the same time. When I open them in separate instances of PHPStorm, things tend to get weird usually.
I like to have my PHPStorm instances opened in full screen and I run into issues when there's more than 1 running. There's application sizing issues and other weird things that happen when opening docked tools.
Not needed as tab indents and shift tab &lt;the opposite of indenting&gt;
Really good list! I do think it's missing CodeIgniter in the framework section. CI is a good lightweight framework, and still has it's uses. It is no longer being worked on by EllisLab, but the open source community is still working on it https://github.com/ellislab/codeigniter . EDIT: Getting downvoted here, I did not say CI was the best PHP framework, but rather that it's still a notable framework that has it's uses as a bare bone MVC framework.
The old graphs are barely used, so it's not a priority.
Proper Vim emulation. IdeaVim is just sad. It was enough to drive me back to NetBeans.
This is coming in 8: http://blog.jetbrains.com/phpstorm/2014/08/blade-template-engine-support-in-phpstorm-8-eap/
Shameless plug for http://php-toolbox.com/, which attempts to do the same thing and allow reddit-style voting on projects as well as provide direct resources for using different libraries. 
**Side note:** user is not a "model" but a [domain object](http://c2.com/cgi/wiki?DomainObject). It should contain the part of domain model's implementation which pertains to a single user. It also, if you care a bit about good practices, should be separated from the persistence logic. The persistence of `User` instnace should be handed by a [data mapper](http://martinfowler.com/eaaCatalog/dataMapper.html).
By the way stats don't seem to be up to date (regarding last commit date, number of stars or forks, etc.), is it supposed to be updated regularly?
It will in the next code push, probably some time around this weekend. It wasn't a bug, I just never finished putting in the code to update it. 
&gt; In other words, if you wanted to take someone who never gave PHP the time of day and get them excited about it, what would you tell them or show them? I would say that the latest version, 5.5, is pretty damn awesome. It's getting easier &amp; easier to write decent, elegant code. Functional programming is a bit painful, but one thing that's nice about PHP (and also a downside), is that there can be lots of ways to achieve the same end. As for other good stuff, we've got this Composer thing that kinda mimics what you get from virtualenv. And we've got some excellent frameworks &amp; components. No comprehensions though. (Instead, we've got array_map/array_reduce, not nearly as elegant/clean though.) With that said though, I'd say that there's still a lot of "junk in the trunk", as it were. You'll find tons of bad info, mostly in the form of dated tutorials. It can be hard (as with anything) to actually find *good* sources of information when it comes to solving particular problems. There's a lot of inconsistencies in the API, like certain string functions having different parameter order (no named params, sadly...). But whatever, there's shit like that from language to language, so it is what is! And of course, gotta plug [phptherightway.com](http://phptherightway.com). Good luck man, and don't pay much attention to the PHP-haters. There's a fair amount of that, but it's just like any tool - if you put it in the hands of someone who doesn't know what they're doing, the chances are good that they're going to churn out some garbage. That doesn't mean that the tool itself is bad, it's just a reflection of the fact that there's a low barrier to entry, when it comes to learning PHP.
Check your settings for saving. I've never had to explicitly save a file in PHPStorm, they're saved as soon as I stop typing for a second.
1. .. 2. .. 3. You have pushed the UI logic and the application logic in said controller (because your "view" is a dumb template and your "model" is collection of activerecords).
OK :)
&gt; well-architected website [...] knocked offline Choose one. We happen to live in the real world, where you can't have your cake and eat it too. It might be an unpopular opinion, but that doesn't mean that it isn't valid, or true.
You need to abstract your requiring quite a bit. Try writing a View class which allows you to call a load() method. You'd pass the variables you want as an argument to the load() method along with the template name. Your View class would handle setting up an environment where those variables are then accessible.
The VCS interface seems to fail around git sometimes - occassionally not noticing a file has been modified, or thinking one has that hasn't been. 
Why? Could you give me an example?
- Tabs (as you mentioned), especially dragging &amp; dropping them, and that you can't automatically split the layout by dragging a tab as you can in Eclipse &amp; VS - Searching in across a specific set of folders is not nearly as easy as it is in Eclipse; also the find &amp; replace doesn't have a "preview" stage - Maybe it's subjective, but I find the Git integration in Eclipse a lot smoother (and pretty terrible in VS for the record) - Every once in a while it seems to detect some imaginary syntax errors, requiring a restart of the IDE to clear
At my last position, I used PHP to generate charts using an SVG library.
Nowhere did I say anything about putting the documentation in the README, but the README, should be a quick-start guide to your framework. If you would have taken the time to do so, I wouldn't have been confronted with a relatively blank page, but instead would have seen a set of instructions to set up the framework the way you designed it. Fact of the matter is, you posted your framework on this particular subreddit to get feedback, I'm sure... Mine just happens to be slightly negative. 
Can you give me a solid reason why this should be more abstract? This is perfectly maintainable.
What bothers me is when I have to wrap a block in an if statement, so say I have the block: array_push($contact_list, $edit_contact($contact_data)); and I need to wrap an if statement around it, so I start typing my if statement: if ($contact_data['name'] != '') {} array_push($contact_list, $edit_contact($contact_data)); which is all fine and dandy, but then I delete the closing bracket: if ($contact_data['name'] != '') { array_push($contact_list, $edit_contact($contact_data)); and try to add a closing bracket on the end: if ($contact_data['name'] != '') { array_push($contact_list, $edit_contact($contact_data)); } and it auto-reformats it to the exact opposite style I have defined in settings: if ($contact_data['name'] != '') { array_push($contact_list, $edit_contact($contact_data)); } when I wanted it formatted like so: if ($contact_data['name'] != '') { array_push($contact_list, $edit_contact($contact_data)); }
I asked for feedbacks and I highly value them, but I didn't ask for shitty comments: "and doesn't know the function of a README". There is too much to explain for a whole framework, that wouldn't make any sense. And that's why I made the whole website and documentation, which takes a lot more time than a readme. And come on, it's only one click away.. For the libraries though, when the documentation can fit into it, it's in the readme.
Is it? I haven't played with it much, but it seemed decent enough. What makes it beginner compared to something like Symfony? It's age/community, or is there something more fundamentally limiting?
I wouldn't mind this at all.
I don't see anything outright regarding PHP Toolbox in my e-mail, feel free to PM me on here. I do, and am cleaning up the code. The initial version was created fairly haphazardly after a twitter conversation so it was a bit of a mess. I'll probably post it to github by the end of the year (schedule permitting, or sooner if I decide to let everyone deal with the bad code :P)
Try disabling some of the plugins. I disabled half of the ones installed and startup time improved significantly.
Well they only trigger reloads when I manually save. Which is a good thing. 
You blew my mind.
Understandable. I love the EAP but I've had to skip some version for plugin compatibility.
The only right answer is, of course, **neither**. You should be defining *only what the code depends on* in the method signature. So, first figure out exactly what it is that the code needs in order to do its job, and then ensure that either 1) it's a simple value (e.g. an int, string, array of ints, etc.), or 2) you have an interface that satisfies these demands (and *only* these demands). It's virtually impossible for your code to depend on an entire domain entity like a `User` in most cases. It's also a horrible idea to ever typehint a concrete class if you can help it. Injecting an ID so that the code can do its own lookup violates the Dependency Inversion Principle. So, all that being said, a *good* example might look like this: interface FooInterface { public function foo(); // ... } class User implements FooInterface /* ... */ { public function foo() { // ... } //... } function test(FooInterface $foo) /* instead of User */ { // do something with $foo-&gt;foo() } Here, we have a function `test()` which depends on something that has a `foo()` method. We've got an interface that defines nothing else, and typehinted it instead of `User` because this makes the code's intentions and requirements much more clear. We can now pass in an instance of `User`, since it satisfies the interface, *but we can also pass in anything else that satisfies the same interface*. And that's the key to flexible code.
Http client. https://github.com/rdlowrey/Artax
Change your code style to support it. Preferences -&gt; Code Style -&gt; PHP
Dude, you need a clipboard manager. I personally bought Alfred 2 (its for Mac, and worth it as a Spotlight replacement alone, let alone the other awesome features) but there are tons of options for all platforms. It keeps clipboard history, and I just CMD+SHIFT+V, a little window pops up with my history and I choose what I want to paste.
You should look at the Refactor option... If you right click a class name and choose "Refactor -&gt; Rename", it will very helpfully rename the class, the file, and as many uses of the class that it can find. This works for nearly everything, variables, function names, constants, etc.
Yeah, the first one is annoying as all hell, but reviewing the Refactor changes before applying them is usually enough to quell any issues there.
I did as much as I can, but there's no preference for that. They only have options for forcing braces and stuff like that.
Since the plugin page offers no hint as to how to get to this scratch pad you should check under Tools -&gt; Scratch -&gt; Open Default Scratch See if that is in there... you may just not have noticed it.
&gt; Forget SOLID, by and large it is bad advice. While it's certainly possible to over-apply SOLID principles, think it's absurd to call it "bad advice". I'm curious as to how you manage complexity in a large application.
Color me surprised, that really is bizarre. I see it's there for functions, you'd think it'd be there for control structures as well. Maybe 8? I don't have the EAP installed :(
It's a bit antiquated considering jQuery, AJAX, HTML5 and CSS nowadays. But sure, it's still my favorite way when I'm forced to do it.
Yes, i know how templating engines work. Doesn't mean you shouldnt use a templating engine over pure PHP echo's
&gt; We happen to live in the real world, where you can't have your cake and eat it too. I'm not sure we live in the same world, because in my experience quality of architecture and performance aren't inversely proportional. In fact, I believe good design makes it easier to identify performance bottlenecks and more often than not provides better ways of alleviating them.
Can't think of anything in PHPStorm but IntelliJ's code interpreter thing (don't know the right name) is too smart and thus loops around and becomes kinda dumb. I'm currently taking a foray into making mods for Minecraft. To get Forge to load your mod you have to the the @Mod annotation but despite the use of this annotation, the interpreter doesn't realize that cpw.mods.fml.common.Mod is actually in use. Thought of something that's quite minor, I'd like to have the Project panel auto-hide and not show the full project path. If I make the project pane narrower, a horizontal scroll bar appears and bugs me to no end. Maybe that can be disabled somewhere.
The most annoying for me, is that it's written in java... Once I updated my jre to 7 and it wasn't starting because it needs 6... Several crashes after long periods of usage... Default plugins work fine, additional plugins brake it badly, too many null pointer exceptions
&gt; CCI is a good lightweight framework, and still has it's uses. I'd never recommend anyone starting a new project use CodeIgniter, honestly. Compared to alternatives like Symfony and Laravel, it's pretty outdated.
Nice one!
&gt; quality of architecture and performance aren't inversely proportional. This may be your experience, however, mine is the exact opposite. Building a rock solid architecture will give you the bandwidth needed, when intelligently designed, to handle most traffic situations. My comment was more geared toward the fact that this was posted in a subreddit with 31,000 subscribers. It's not like it was on the front page of reddit with 7-10 million hit's coming at your website. If you can't keep your site running with a mear 30k hits, then you have some serious issues with your architecture. You can try, but you can't seriously defend that position given it would have been such a small zerg.
Variable auto-suggest doesn't work in strings nor in use clause of closures.
The last project I used PHP's image functions on was one that sent a HTML email report that included a graph. There are lots of good JS graphing libraries these days, but they're not much use in an email.
It autosaves when you defocus the PhpStorm window.
There is. Settings-&gt;Editor-&gt;Editor Tabs-&gt;Show tabs in a single row You can also limit the number of tabs that can be opened at any given time from the same page.
View-&gt;Tool Windows-&gt;TODO Also, I think the default hotkey is Alt+6. It looks like it looks for the phrase "TODO" in your code. 
Clean your fan. Maybe apply some new thermal paste?
Has anybody tried Netbeans recently? I'm using it and I think it is great. Lots of plugins. - Composer ready, - PHPUnit, - Git, - code analysis, - SASS (css pre processor) - etc, and it does exactly what it does for me. I don't get what's crazy about PHPStorm. Oh, Netbeans is 100% FREE 
I usually develop with the sidebar closed. My issue is that when I create a new directory using shortcuts, it opens the sidebar automatically. AFAIK there's no way to disable this.
It continues to be a public place for version control which makes it a useful tool. 
Why did it get put on hold before?
I just said how I manage complexity. When you treat each controller as its own little program, large websites are easy to deal with on the back end. &gt; While it's certainly possible to over-apply SOLID principles, SOLID is defined by its extremist positions. Where I would say good cohesion comes from balancing the scale between encapsulating too much and too little, SOLID's SRP says to encapsulate nothing. Where I would say carefully choose which classes to make extensible and spend extra time making sure the extension points are appropriate, SOLID's OCP says to blindly make everything inheritable. Where I would say think about whether you should add functionality to a class or create a subclass of it, SOLID's OCP says to always create new subclasses after the first class ships no matter how small the new method in. LSP, yea that's a good idea. ISP is a performance hack for dealing with C-style header files. Though these days Java and .NET programmers take it to mean "create and abstract interface for everything", that's not actually what SOLID says. Finally there is DI, which is a confusing one. Actual dependency inversion simply means that you take A--&gt;B and switch it to B--&gt;A. But under solid it means to blindly create an abstract interface on B so that A --&gt; (IB, B). No inversion has taken place, the waters have just been muddied with unnecessary clutter. In conclusion, whenever SOLID says "Always do X" the real answer is "Sometimes doing X is beneficial, sometimes is isn't, except for LSP".
And nothing makes a program more complex than scattering your logic across hundreds of classes with one method each, all paired with abstract interfaces that are only used once.
It was never on hold in review before it was on hold on draft status. Now it returns in draft status. I think the main issue with the current proposal is that it did not address [cache stampede](http://en.wikipedia.org/wiki/Cache_stampede)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Cache stampede**](https://en.wikipedia.org/wiki/Cache%20stampede): [](#sfw) --- &gt; &gt;A __cache stampede__ is a type of [cascading failure](https://en.wikipedia.org/wiki/Cascading_failure) that can occur when massive [parallel computing](https://en.wikipedia.org/wiki/Parallel_computing) systems with [caching](https://en.wikipedia.org/wiki/Caching_(computing\)) mechanisms come under very high load. This behaviour is sometimes also called __dog-piling__. &gt;To understand how cache stampedes occur, consider a [web server](https://en.wikipedia.org/wiki/Web_server) which uses [memcached](https://en.wikipedia.org/wiki/Memcached) to cache rendered pages for some period of time, to ease system load. Under particularly high load to a single URL, the system remains responsive so long as the resource remains cached, with requests being handled by accessing the cached copy. This minimizes the expensive rendering operation. &gt;Under low load, cache misses result in a single recalculation of the rendering operation. The system will continue as before, with average load being kept very low because of the high cache hit rate. &gt; --- ^Interesting: [^Cache ^\(computing)](https://en.wikipedia.org/wiki/Cache_\(computing\)) ^| [^Distributed ^cache](https://en.wikipedia.org/wiki/Distributed_cache) ^| [^Cascading ^failure](https://en.wikipedia.org/wiki/Cascading_failure) ^| [^Operation ^Stampede ^3](https://en.wikipedia.org/wiki/Operation_Stampede_3) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjwtvlu) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjwtvlu)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
It works on Windows too.
Although I'd recommend it to someone who has never worked with any MVC framework to get the concept, that's what I learned on. I agree any new project should be using a current framework.
There's a setting that improves it a little: Settings -&gt; Editor -&gt; Editor tabs -&gt; Show directory in editor tabs for non-unique filenames There's also the installable [Tabdir plugin](http://plugins.jetbrains.com/plugin/?idea&amp;id=5045) (which conflicts with that setting), but that doesn't seem to be functional in the current EAP. It'll turn duplicate tab names into "[user] index.html.twig", "[post] index.html.twig" and the like.
For open-source projects I use travis. For private projects I'm leaning toward PHPCI.
Using Gitlab CI which works great if you run a Gitlab Installation.
Technically he could have made a https://pages.github.com/ and used jekyll as the cms :P 
Artax is promising, but it's highly unstable right now with regular BC breaks. If you are looking for a stable alternative, I think [Guzzle](https://github.com/guzzle/guzzle) is the de-facto standard here.
&gt; SOLID is defined by its extremist positions. &gt; &gt; Where I would say good cohesion comes from balancing the scale between encapsulating too much and too little, SOLID's SRP says to encapsulate nothing. I've never heard any of SOLID's principles advocated with that degree of inflexibility. It's never been "Always do X", it's been "You should be thinking about X". Applying any principle has opportunity costs.
I would love the option to switch to the branch when I am creating a branch within PhpStorm 
god damn phphobes
 Codeship is great :)
He wasn't 
You are right to be cautious, but with the correct mindset, a framework can be an incredibly useful tool to learn from. &gt; I find that I can read and understand code written that way most of the time. I just find it hard to initiate coding in OOP in any meaningful way. Makes me think that you are at a place that using a framework will help teach you this. If you find a good framework, it should allow you to see how more experience programmers use OOP to solve their problems.
I'm still with NetBeans *when* I need an IDE for debugging. Albeit Eclipse got somewhat speedier and prettier lately. But of all three, NetBeans probably has the worst PHP core feature support. It doesn't understand PHARs at all. Eclipse at least pretends to have it (and subsequently crashes). While JetBrains seemingly seems satisfied with read-only support for 1 out of 3 possible .phar formats to tick it off as PhpStorm feature.
Exactly, everyone should know how MVC works when they start out, CI fits that bill well.
Then what does the Open/Close Principle mean to you? That you can make classes open for extensibility (i.e. inheritance) if you feel like it? That's not a principle, that's a description of the programming language. That classes are closed to modification, unless you really want to modify them. Again, not a principle. Now if the so-called Open Closed Principle gave us some suggestions on when we should or should not do something then it would at least be a guideline. But it doesn't. *** Now of course I'm talking about the Meyer version of OCP. The Martin version only refers to abstract interfaces, which for C++, C#, VB, and pre-modern Java the response is "no-shit, of course you can't seal an abstract interface and adding methods breaks backwards compatibility". For modern Java you can add new methods to abstract interfaces, which means you at least have the possibility of violating Martin OCP.
Awesome! I really should go download and try that out. Thanks! **EDIT:** Just tried it out... wow! This is fantastic. Ok, now PhpStorm is perfect :)
Yes, resque, beanstalkd, gearman, etc.
Thumb nails.
We use Jenkins at work... it's unfortunate but due to the nature of multiple teams working on different technology stacks and a requirement to have a single build server this is where we've ended up. I am keen to take a look at TeamCity by JetBrains.. Looks a damned side nicer than Jenkins but worried without the plugin ecosystem it mightn't be up to our requirements.
"Content Directories" might work for you. Go to project settings -&gt; Directories. On the right hand side click on "Add Content Root" and choose as many directories as you want. This will show multiple, separate directories under one project: https://www.dropbox.com/s/dnyhao1c9342byy/Screenshot%202014-08-21%2021.27.41.png
Except for the fact that CodeIgniter brings along with it a boatload of bad practices, and a newbie has no idea how to differentiate between what it does well and what it doesn't. If they're just trying to learn MVC use Laravel or Silex. If they're looking to learn more advanced design patterns and concepts, then point them to Symfony.
Check /r/phphelp (look at the side bar of this subreddit). Sadly, PHP isn't famous for the quality of the materials available for learning it. I don't have much complaints about the official docs however.
QR Code generation is handy
If you start with a PHP framework now I can only recommend Symfony or Zend Framework 2 just because of the massive community. Personally I’d go with Symfony as it has a more practical approach while Zend Framework gives you a little more freedom which you won’t need if you’re getting started. I was using CodeIgnitor and CakePHP before switching to Symfony and they are good as well but Symfony makes a lot of things even easier and more flexible. I think it’ll be quite easy to write an adapter for RethinkDB. You’ll use the php package manager composer and install php-reql with composer require danielmewes/php-rql "~1.0". Then you create a service via a yml file (get back to me if you need help with that) and then in your controller the connection is available via $rql = $this-&gt;get('my_php_rql');
It was happening from the beginning, when I buy it, so I don't think the dust is the problem. Regarding thermal paste, I might give it a try, now that the warranty is gone. Thanks for your help!
Big fan of CircleCI, it hooks in perfectly and it looks damn pretty. Plus their support is also pretty great.
You do not need a "MVC" framework for that: https://packagist.org/search/?q=nosql
I was mostly joking, but Laravel is far more opinionated than Symfony and "holds your hand" a lot more.
All plagiarism... First half: http://www.brandonsavage.net/php-5-6-is-coming-next-week/ Middle: http://www.aljtmedia.com/blog/whats-new-in-php-56-for-web-developers/ End: http://www.sitepoint.com/new-features-php-5-6/ End-end: http://php.net/manual/en/migration56.new-features.php
Long time did I use Jenkins and it's still my favorite. It has all necessary plugins, can run different type of projects but it's harder to master. Although this website helps you out for the most part http://jenkins-php.org For my public projects I use travisci, scrutinizer and insight. I have used gitlabci, which nicely integrates with gitlab, but I am really missing nice graphs etcetera. Lastly I tried phpci. I think it may have potential, but it's too early yet. http://www.sitepoint.com/continuous-integration-php-ci/
More articles on the website just seem to be copy-pastes without credits or links to the original ones.
Learn
As long as you don't read the comments.
I really dont want to be that person....but...well...I've got to ask....why is Sentry on that list? It started out as a great package, but it's completely backwards and terribly thought out for it's native implementation. It took a hell of a long time to get something as basic as custom cookie and session names in place (and IIRC there were numerous pull requests where others had done the work for them). It also still has no two-factor support, and very poor support for it's supposed 'native' option when not using Laravel, Fuel or Codeigniter, especially when using it on your own table structure. Lots of raised issues get shot down or ignored. Not at all worthy of being classed as Awesome IMO. We started using it shortly after v2 came out, and are in the middle of rewriting it as to be honest, the development path has been terribly skewed. This being said, I've yet to see a viable alternative (hence why we started building our own). Another thing that seems poorly planned. You cant duel-login. So if you're an admin, you can't do a "login as X client" without it deciding to kick you out completely. Their solution? Use something else, they wont fix it.
I do not even think about the answer to this question.
just helper for encryption.
oh built with zf2 :-) .
Sometimes, it will randomly freeze up for a minute or so for me, which is pretty annoying. This can happen a few times a day. I have not really done much experimenting to determine the conditions that causes it though.
/u/dragonmantank Why not able to submit the projects?
If you are using password_compat the code will not work, for each hash is different. If you are using some other sort of hash yes it may work. In that case you may not know whether the user exists or not. If user exists, do we need to add a counter for failed attempt? At what time do we need to lock further failed attempts. And I do love to keep the check on password outside the sql.
i mean... Yeah.... But he asked specifically for an MVC framework that easily supports it....
How would actually the "supporting by framework" look like? Or "not supporting by a framework" look like?
Stitching tiles together, thumbnails and simple heatmaps are the only image manipulations I use PHP for these days. 
Two examples: * A Symfony2 Bundle - DoctrineMongoDBBundle * A Zend Module - Don't know these off the top of my head, wouldn't be hard to find though.
what?.. why is cake php not awesome?
Obviously you have no idea what I just now asked of you. I asked you, how would supporting or not supporting by a framework look like, when it comes to Composer-based packages. **It has nothing to do with having framework's name in the title!** 
You can also set it up to look for other phrases. For example, if your colleagues liberally put "TODO" in the code you can have an extra lookup for "TODO JokerSmile" and it will only show those that fit that format.
Stable release could be coming in the next few days if you're keeping an eye out.
cause the cake is a lie
This post makes me want to try Laravel. 
Just started using Travis for private projects and it's very nice. As you mention, it's simple to get up and running. Consider the time saving that you can reinvest somewhere else. Jenkins, on the other hand, will sap maintenance time from you regularly.
Submit a PR to get it removed and paste your comment for the reason.
Yep glad to see Aura in the list. Looking forward to Aura v2 release version. 
/r/php is not the place for this, oddly enough. And everyone has down voted you without reason, good classic /r/php. That being said, I'll explain why others have down voted you. (Because some people just don't read the rules). Assuming this was the right place to post the snippet, you've done things a bit 'manual'. You should've implemented a way for someone to easily set the 'office hours' without going into the code. The way you went about parsing out the dates is also a bit over-done, there are easier and simpler ways to do that. You've also got a lot of IF/ELSE logic going on that could be shortened up and tuned. Sorry you didn't get a warm and professional welcome here. 
PHPCI advertises being written in PHP as if that's an advantage. I'm pretty sure I'd pick something better established and less stringly typed, myself.
This is a very minor thing but it's just something I thought while looking at your code. Instead of if (($min &lt;= $time[2]) &amp;&amp; ($time[2] &lt;= $max)) { $time = 'Open'; } else { $time = 'Closed'; }; if ($time == ('Closed')) { $showHide = 'style="display: none;"'; } else { $showHide = ''; }; you could just put $office_open = ($min &lt;= $time[2]) &amp;&amp; ($time[2] &lt;= $max); // in your template if (!$office_open) { echo 'style="display: none;"'; } Bonus readability and shorter :)
&gt; PHP manual You mean https://php.net/manual/en/index.php? I thought the official docs were good? 
Jenkins briefly, then we switched to [cimpler]( https://github.com/danielbeardsley/cimpler ) ([blog post]( http://itbrokeand.ifixit.com/2013/03/03/cimpler-continuous-integration-server.html )). It's been serving us well for the past few years, mostly just running without us thinking about it.
Doing these three things should help you become a professional PHP developer: - Write different kinds of projects in PHP. Nothing will help you learn and master a language more than using it for a wide variety of projects. - Read code written by programmers you consider to be better than yourself. Try out what they are doing and reason about why it might be better. - Become a better programmer outside of PHP. You need to learn other languages and learn broad programming principles.
I took too long to hop on a framework. Didn't realize how much time it saved.
1. I'm not the OP, nor did I say anything about you downvoting. I don't care. 2. Please learn what notable means, kthx.
I'll probably give Symfony a try, since next to Zend its most commonly asked for in my area (I'm also doing this project for job prospects). It also seems like a fun framework. I was torn between Symfony and Lavarel actually.
I'll look at that and see how I feel on it, thanks! Is it easy, do you know, to write adapters for different databases?
That MVC isn't only Model classes, Controller classes, and View classes, and that I don't have to make all of my code fit into only those three types of classes.
&gt; Codeignighter is a terrible suggestion for anyone new to PHP. And I never argued against that.
Code Duplication - The Video.
Haha no worries, I was on a lunch break and just quickly posted it assuming it was correct - my bad! I'll take note of that. If you could PM me (or post here) your suggestions on cleaning it up I would appreciate it :)
Web development companies that want to hire developers like to advertise themselves by saying that they've been around for 8-10 years as if that were a good thing. It took me long to realize that it's actually a bad thing and usually means a lot of old code needs to be maintained and they're more hesitant to allowing newer PHP versions and not as open for modern solutions. Had I actually favored younger companies more, I would have been able to dive into newer technologies faster.
Thanks dude! :)
Any specific beginner -&gt; intermediate ideas for someone who understand the fundamentals but needs a to reach the intermediate stage? 
&gt; I've never seen anyone or any codebase apply the OCP in that way. That's the annoying thing about SOLID. People prance around talking about how important it is to them, but when you see what they are actually doing it is nothing like what the principles tell them to do. &gt; I have no issue with altering a class's source code if I judge the functionality to be part of the original class's responsibility (adding a field, for example). However, if I needed to add caching to the report, wouldn't modify the original class. That is a reasonable guideline that I think should be applied in most circumstances. But because it doesn't have a cool acronym it is going to be ignored in favor of SOLID!!!!!
Im a [lithium php](http://li3.me/) fanboy. Have you tried that? Its make by some former cake php devs. Its my favorite thing. 
&gt; That's the annoying thing about SOLID. People prance around talking about how important it is to them, but when you see what they are actually doing it is nothing like what the principles tell them to do. I actually had to go to wikipedia to look up the two different versions of the OCP you mentioned yesterday. I never read any of the original source material. I've learned it from other developers, videos, online tutorials, and looking at better code than mine. And by failing to implement them correctly.
Excellent comment. Now I want to down-vote my own.
lol, I've felt that way before on some of my own comments.
This is what I am finding it increasingly difficult to understand. I am sure, some time from now, I will be saying the same thing as OP. but i the meantime, do you have a simple explanation to understand what you said? I'm just hoping to get it sooner than later.
Check symfony framework and data mapper pattern.
For using control statements without braces a big downvote from me. If you want to argue about that, remember: http://www.zdnet.com/apples-goto-fail-tells-us-nothing-good-about-cupertinos-software-delivery-process-7000027449/
Using the DoctrineMongoDBBundle, IMO, makes it EASIER to deal with NoSQL, than using Doctrine ODM by itself. I answered your question, i just dont think you understood my answer.
Obviously update when stuff gets deprecated or has a security issue. Otherwise, leave the code alone unless you're already in there working on something else. Update the code that you touch. That way, you're doing a little bit at a time and already have your head in the flow of the code when you're updating it. 
besides laracasts.com are there any other website dedicated to learning PHP?
Thanks for your answer, I meant like the reminder app on iOS or Mac, but per project !
What does the reminders app do? I've never used it. I wouldn't mind learning to make plugins for phpstorm. This sounds like a good place to start.
I suppose it depends on what you like. I'm actually a big fan of JavaScript since it feels like I can quickly turn out complex code with it that works well in an event driven interface. But it's not the most efficient language on the planet and depends heavily on a good engine for performance. If you want to make large batch programs or resource intensive applications that run efficiently you'll want something a bit more strict. I'm reluctant to admit a good portion of my original college education was focused on COBOL which if you ever get a chance to use it, pass. Modern languages are like a magical playground where everything works the way you want by comparison.
 throw new Exception(sprintf('Your message has no %s concatenations', 'fucking'))
As some other people already said here, the code is a big bunch of mess. I would recommend you to try some service like http://scrutinizer-ci.com to analyze it.
WTF? If they measured WTFs we'd rank higher for sure.
So in my newbiness wanted to see how much of a mess I could make in one line using stuff I've just learned. Behold, the horror! echo(json_encode((new PDO("mysql:host=" . $hst . ";dbname=" . $dbn . ";charset=utf8", $uid, $pwd))-&gt;query($qry)-&gt;fetchAll(PDO::FETCH_ASSOC))); *please down bash my karma on account of this being a horrible line of code, I already know that, it was the point. 
Most of my original suggestions have been mentioned. Judging by your name, you're in KC. You should make it out to one of the KCPUG meetups. http://www.meetup.com/kcphpug/
PHP 5.2 to 5.7 is gonna be a jump!
We use this extensively at work. Anyone that doesn't respect legacy code exists has never had a real programming job... I'm glad this happened finally as I myself have done extensive rejigging of code igniter over the last year to slowly move it into the realm of real programming. If I can contribute I will. I know everyone loves laravel and symphony but sometimes you get a job. Get handed code, and you just deal with it. If we could all start from scratch that'd be great but frankly there isn't a budget for that.
Part of me wants to downvote you but damn, you're right. People will have a knee-jerk response of "well, you should have refactored by now" or "your company should pay to redo the code". No - it is never that simple or easy and often it is impossible unless a developer does it for free on his or her own time. I had the same knee-jerk response and then I remembered my current job and was like "ahhhhh... legacy code that we can't move away from thanks to the environment we're in...". Damn.
It's still never that simple. Some projects are huge. Live. And critical. We can slowly clean up code; refactor it and remove the CI from it... But we still have a whole slew of internal tools built around it. Tons of styling and templates built around the views and how they are implemented. Then there is the education... I'm one of the newer to the team... Everyone else primarily only knows CI. They may not be the 'best' programmers.. But they know how to use it and get shit done quick. That's what the boss wants to hear. That's what the client wants to hear. Don't misunderstand me though... I would enjoy being able to refactor out of codeigniter... But it is not in anyway needed as all our current client sites run great. They look great. Perform great. Setup quick and easy. Its a really hard sell when what's live... Works. It just is hard to maintain.
Wow! I was just checking their website a couple hours ago for the first time in a while, to see what the status is regarding the search for a new owner.
It should be the bottom of a trash can. CodeIgniter is one of the worst PHP frameworks ever made.
I'm sure there's plenty of money to be made supporting legacy CI apps for years to come. In fact, I wouldn't doubt that there would be excellent money to be made in CI dev for any mission critical PHP business apps, that I'm sure are out there somewhere, in the next 10 years as CI experts in the business diminish. Having said that I can't see how this will be anything more than a maintenance release type development path. At this point it would be improbable for them to be able to develop a new CI version that would be up to speed with modern standards, practices, PHP tools, PHP version, etc in any reasonable time frame. With so many better options now, I can't see how they can compete as a go to choice for framework when choosing the best options for any new app you would build today. Anything modern (version 3?) they might build will surely have to break comparability completely, including framework specific API stuff, and support at least PHP 5.4. So what would be the point of competing with the newer, better frameworks. I'd speculate that the likely best use of resources will be spent on keeping the framework secure enough and stable enough to run any legacy apps for years to come, including support for whatever the minimum version of PHP required to securely run.
Yeah, I was handed a site in Code Igniter. It not an old site either, only a year or two. It was built before I came on board. I don't have to work on the site, but I did have to build an API for it. I can't tell if the site was coded very, very shitty or if its code igniter, or both. Its been painful to deal with. Controllers create models, pass them to views, which pass them to other models, which pass them to different views, which then shit out the html. I'm pretty sure the site was coded in a terribly fucked up way. HOWEVER, I want to stress that this is NOT the worst site/project I've worked on. I've seen far worse. And, I dunno. I can think of worse things to deal with than Code Igniter. Ever deal with Java, maven, ant, and Eclipse/RAD? That stuff is a goddamn nightmare to deal with.
I did watch the entire video, thank you very much. Fact of the matter is, if you follow /u/pmjones principles, you'd end up with code duplication due to his fobia to package dependencies. Having packages which have dependencies to other packages is not something one should be afraid of. 
I'll take CodeIgniter crud over a frameworkless nightmare any day :P
That may be so, but it served it's purpose well at the time. As has been mentioned above, but it's worth mentioning again, there will be PLENTY of money to be made supporting legacy CI apps in the time to come.
ha, that reminds me I also have also inherited an entire custom kb/dhcp management system... 
* Always assume the documentation is missing important stuff, and always plan to read the source. This may be too personal, but I felt for years that I should be able to rely on the official documentation for whatever I was using: The Windows API, Microsoft Foundation Classes, the microprocessor reference guide, etc. I'm not sure why I felt that way, and most of you are probably way smarter than that. Obviously the answer is to read the source (especially if it's a framework), carefully check comments on PHP.net, and perform due diligence on stackoverflow.com. * Religious extremists are steaming piles of shit. People who dismiss PHP in general, especially in its current form, are narrow-minded knuckle-dragging mutants, no matter how much Haskell or Julia they use. PHP, for example, isn't the language I would design, but you can do amazing things in very few lines of code and it has been a highly evolved language for years now, with pretty much all the modern conveniences and safeguards. I'm not dissing Haskell or Julia. Just saying that posting arrogant and snarky putdowns of PHP itself proves only that you're a jackhole.
Don't run if you aren't sure whether it's just a fart.
Clinker is a good option (http://clinkerhq.com) you can watch thais video using clinker and scala http://www.youtube.com/watch?v=692pzhDH4oQ
&gt; only knows CI If you're not always learning, you're quickly becoming stagnant. Good luck with that huge, live and critical project.
I really hope the new owner will a) continue development and b) push the framework straight forward into the future. :/
....and then you wonder why so many developers have a hate-on for PHP. HINT: it's only half the language's fault. Here PHP is slowly limping its way to becoming an acceptable language and then there's the "community" (we'll quote this because the majority of people in this reddit are a fucking embarrassment to the programming community as a whole) clinging to fetid piles of shit like this. All languages suffer dark times with software, but most have *the good fucking sense* to know when enough is enough. Code Igniter **needs to be allowed to die**. Why not revive PHPNuke while you're at it, then we can have a real departure from reason.
This couldn't be truer. Too many people on /r/php seem to be happy to say "Hey, my job is to work with shitty old code in a shitty old environment, and that's fine." but they seem to forget that your career &gt; your job, and a dead end job is a terrible idea long term.
At least it follows a pattern. Not just something that seemed good at the time. :)
I would tell my past self to reject that first PHP job I was offered and spend another year doing programming competitions.
Avoid magic and global scope. PHP is pretty flexible and provides a lot of support of global scoping which makes people think that's the correct way to write PHP. For example if you were a maniac you could implement everything with static methods and variables and even obfuscate your interface completely using __callStatic. People do this and think it's really clever because it DOES make it really easy to hack out code quickly. However it makes testing a nightmare and complicates growing/changing the application considerably. 
Ooooo. I love PHPNuke! ;)
I am in the process of implementing Sentry, but perhaps I should look elsewhere. Got a recommendation for another package?
&gt; pass them to views, which pass them to other models, which pass them to different views, which then shit out the html Well, that's just doing it wrong, really. I suppose it's CI's fault that the system allows for such silliness, but really, the programmer should have known better. I've worked on a half-dozen large CI projects and we've never had to do that. 
My guess is that you don't have a whole lot of real-world experience. Nothing "dies". There are still COBOL programmers out there. Code exists, therefore developers are needed to maintain it. Agitating to move to more modern code is all well and good, but someone needs to pay for it and once a company sinks enough money into a system they are woe to change it. In the real world, programmers typically don't get to decide when to completely scrap a code base and start again. If your job is to cling to a fetid pile of shit then you do your job as best you can. Active CI support and development will help people do their job.
&gt; CodeIgniter is one of the worst PHP frameworks ever made. That explains the popularity and success of sites using it. Very hipster of you.
Yup, I've got a large application sitting in code ignitor from a previous employee. Luckily use is winding down of that app and we can stop maintaining it in 5 years or so.
So leet.
Can you give an example of where code duplication would occur with decoupled libraries? I'm really trying to come up with a scenario to better understand your viewpoint. There's nothing wrong with your app, app-specific packages, or even higher level components having multiple dependencies. The problem is when the base libraries you are trying to use pull in a bunch of other dependencies that you don't need and only work with objects/conventions of the framework they came from. If you aren't using those same objects, that's where you end up with code duplication.
/u/GMFlash gets it.
It is explained in the video. ;-) In short, it's neither "bad" nor "good." It's a question of expectations. My expectation when I hear that something is "decoupled and independent" is to get exactly the one package with no dependencies. If it has dependencies, then the phrase "decoupled and independent" isn't really true.
STOP WASTING OTHER PEOPLES TIME AND RESOURCES!!! STOP WRITING CRAPPY ARTICLES AND MAKING CRAPPY VIDEOS AND STOP SPREADING CRAPPY IDEAS. STOP. STOP. STOP. STOP. PLEASE . FUCKING . STOP!!!!!
Any ideas for giving it a name?
Panzerfaust
Clusterfuck
Wello
Going to try this one out
It's always nice to see you too, Snowflake.
Exactly. "What is the problem we're trying to solve here, and is this the right way to solve it?"
Passing down the variable is a good thing. You don't want to directly access global variables within code because it couples the code to that global state. Maybe I'm interpreting wrong though. Do you have real example you could gist?
course - http://www.zend.com/en/services/training/php-i-foundations certification - http://www.zend.com/en/services/certification
Melvin
I'd create a class that is a singleton with every value you want to retrieve later set in your boostrap.php or whatever. Another option is to go with an application container based approach where you bind a value to a container and resolve your value out of that.
PAAMAYIM NEKUDOTAYIM Or just Paamayim for short. Maybe Neku?
I don't get it, why bother. 
While more of a practice, you might want to look at Dependency Injection to handle method and object dependencies. Then you won't have global session variables all over the place, allowing for easier testing.
The suspense is killing me...
Maybe the book "modernizing legacy applications in PHP" can be of any help? https://leanpub.com/mlaphp
*jealous* ;)
PHP - The elephant in the room.
So basically what I should focus on really is when it comes to connecting, create a connect service. Then from there just pass the reference to various services? I think I have a good working prototype right now. But before I get too into it I am reading now on writing PHPUnit tests so I can easily check the services.
There's not really any comprehensive course similar to degrees you could obtain from a college/university. I would argue that a college/university education is wholly unnecessary. Some of the certification prep courses that Zend and others offer are simply for filling in gaps in existing knowledge. Their ZF2 one is pretty good for that framework, though. Personally, I bill out at USD80-100/hour (and I bill at least 40 hours/week), and I never did any formal post-secondary education. Instead, I spent several years doing studying independently while working an easy job (desk clerk at a resort in a tourist town - lots of down-time). If you want to take this same route, I recommend joining #phpc and #phpmentoring on Freenode IRC. There are lots of people there who can offer advice on the best way to learn to become very competent in PHP software development.
Where can I get a purple php elephant?!!
There isn't a php certification out there that is taken seriously.
/r/android does this already in the hopes that it will stop stupid questions from flooding the reddit. It doesn't work. Truth is it doesn't matter how loud or prominent you make the sidebar, or weekly posts like this - most people won't read them.
We (PHPMen) consider that an oxymoron.
Managed to get me one of those at the last phptek. Won't bring it to the office since it would much likely "disappear"...
Does want... Any idea where I could spend some dollars for one?
r/php is the least friendly programming subreddit. Don't let it get you down. It's patronised by very opinionated people who move to criticise more than contribute. I remember when Laravel was first introduced and everybody bashed it too.
It works pretty well in /r/sysadmin .
It works well in /r/bitcoin as well.
Yea. Whatever. But STOP SPREADING CRAPPY IDEAS...OK? 
Here you go! http://get-elephpant.com
There was an RFC, 4 years ago... But not much has really happened with it, since 2011 https://wiki.php.net/rfc/annotations
I....can...has? Please! Long time amateur php code person here, my GF would love this! And if she didn't - I would!
Are you trying to improve performance or just reduce indirection in the code? If you're looking to improve performance: I'd be quite surprised if passing around variables excessively caused significant performance problems. You should profile the application and find out what is taking up the most time. This can be done quite easily using xdebug and then you just need something to view the cache files - I like kcachegrind. Regarding refactoring for the sake of code quality I would say making major structural changes is a pretty high risk low reward strategy. In some cases you might just make things worse because despite CI's dubious architecture it is at least relatively consistent and well documented. You might be able to sneak in a DI container or service locator as a CI service, but ultimately this will likely introduce MORE indirection not reduce it. Basically if you're being asked to improve performance: profile first, don't just assume what is slowing things down. If you're being asked to add features and think it'll be hard with the code as-is I would suggest changing as few things as possible and making small adjustments over time. As you learn more about the framework you might find that things that looked crazy initially actually have some kind of logic.
Can I get/buy some to be sent internationally? My team has ~ 6 female PHP devs and it could be a nice surprise to give to them :) (at the same time I can promote the PHPWomen group)
OH MY GOD IDEAS! WE ARE ALL GOING TO DIE!
Didn't get you..
Oh man I want these so bad but I don't use twitter. Any other way you communicate? Email?
The elephants look totally cute and awesome! I'm confused about all of the other colors though; are they all for promoting PHPWomen, does each color promote something else, or are those one-of-a-kind elephants for elePHPant collectors out there?
Or just: return !! (expression);
Here you go! http://get-elephpant.com
They've been for campaigns and conferences. I'm not sure about red, yellow, or pink, but: * Blue - regular PHP * Green - ZendCon (http://devzone.zend.com/2627/zendcon-day-2-through-the-eyes-of-twitter/) * Orange - PHPArch (http://www.phparch.com/2014/01/get-an-orange-elephpant/) * Purple - PHPWomen (https://www.kickstarter.com/projects/77145396/phpwomen-purple-elephpants) 
That's one expensive elephant.
You're just adorable when you're upset.
Yea. Whatever. But STOP SPREADING CRAPPY IDEAS...OK? 
- Three blue ones — original, Zend (from ZendCon, not sure which year, not '09 though), and Oracle sponsored ones (from php|tek? Again, not sure which year). - Pink — original PHPWomen one - Green — Zend Framework 2 one (ZendCon 12) - Red — ZendCon (ZendCon 13) - Yellow — SunshinePHP - Orange — php[arch] - Dark Purple — PHPWomen Prototype (one-off) - Purple — PHPWomen I have, currently, the most possibly complete herd, as I've been collecting for a long time, and have some awesome friends. The only one I don't have is the Orange prototype (also a one-off) and the new one being produced for ZendCon this year, which is light blue with a rocket pack for Apigility.
Those (get-elephpant.com) are not official elePHPants. The only way to get an official Purple PHPWomen ElePHPant was to either contribute to the [Kickstarter](https://www.kickstarter.com/projects/77145396/phpwomen-purple-elephpants), or wait till we have them for sale later this year :) We will definitely announce the sale on our [Twitter, @phpwomen](http://twitter.com/phpwomen).
Late on this year we will have them for sale. We will definitely announce the sale on our [Twitter, @phpwomen](http://twitter.com/phpwomen).
See [this comment](http://www.reddit.com/r/PHP/comments/2eedbc/spent_most_of_my_day_packing_these/cjz43p3)
See [this comment](http://www.reddit.com/r/PHP/comments/2eedbc/spent_most_of_my_day_packing_these/cjz43p3)
Phalcon has support for MongoDB :)
Snowflake, you are one of my dedicated trolls. If you think something is crappy, then I have to believe that it's actually good.
Yea. Whatever. But STOP SPREADING CRAPPY IDEAS...OK? 
Yea. Whatever. But STOP SPREADING CRAPPY IDEAS...OK? 
Thanks!
thx
Not a bad walk through, I had never thought of using Doctrine for just the migrations before. Personally, I like [Phinx](http://phinx.org/) when I just need migrations. Might be worth looking into for similar situations in the future.
These ranks are the fun part of programming imho, as they only require 4 minutes of your initial time, before you go "Eurekaaaa" :) Now, I blieve the 'new' part can be taken care of by a simple timestamp, in your database. The top should be dealt with an upvote/downvote count. The rising can be calculated as the "top" but whithin, say ... the last 24 hours. You can obviously do more, I am typing this from a phone, so .. I can't provide more for now.
https://github.com/reddit/reddit/blob/master/sql/functions.sql
No purple there :( purple or bust.
You have no idea how many recruiters and therefore employers are, in fact, impressed by the Zend PHP cert. It's not true in small 10 man services companies, but you'll see it everywhere corporate where PHP is in the house (at least in my experience).
this is a clear violation of DRY
Also, if a class is dependent on the Squirt static methods, you're not doing DI, you're doing Service Locator.
That would be a Service Locator if it were true. Please look at the examples. The SquirtUtil static methods are only there to reduce code repetition, and don't have anything to do with the actual injection of dependencies. Other than that there are no static methods. The main dependency injection method is $squirtServiceBuilder-&gt;get(), and that is based on the configuration file injected into the $squirtServiceBuilder itself.
I think the double-bang is less idiomatic and would be more difficult for someone else to read. In the typical programmers career, more time is spent maintaining code someone else wrote than authoring new code, so I try to always consider the next guy. 
&gt; The SquirtUtil static methods are only there to reduce code repetition, and don't have anything to do with the actual injection of dependencies. So you end up building classes that are dependent on something those classes *should* be independent from.
[SquirtUtil](https://github.com/phlogisticfugu/squirt/blob/master/squirt/src/Squirt/Common/SquirtUtil.php#L229-L265) is just there to help validate parameter values. It's just there because Squirt uses [parameter arrays](https://github.com/phlogisticfugu/squirt/wiki/Design%3A-Parameter-Arrays) SquirtUtil is only there as a helper to reduce code repetition and is not required to use Squirt dependency injection.
[Common mistake #4 might be an answer to your question](http://www.toptal.com/php/10-most-common-mistakes-php-programmers-make)
/me nods And yet it introduces a dependency on the particular DI system. Here's another example of wording one should never find in a DI system: &gt; it is very easy to write a wrapper class to add squirt support. You can even use squirt-compatible classes without the squirt service builder; so a squirt-compatible class can be used in frameworks that don't use squirt. One's classes, when using dependency injection proper, should have no need to know about the particular DI system. There's no such thing as a "class that's compatible with DI Container X" -- it means there is something *other than* and *contrary to* dependency injection going on.
I disagree with the idea that param-arrays are good in this context. As a developer I: * Want to make sure the objects I get are validated. (Which why you have SquirtUtil::validateParamClass) * Don't want my classes to be dependent on the DI container. So I won't reference the container... But I still want validation... Solution? Type hinting.
&gt; There's no such thing as a "class that's compatible with DI Container X" -- it means there is something other than and contrary to dependency injection going on. Hmm, so actually, one thing that may be buried in the docs is actually that it's possible/easy to define classes that will work with Squirt without needing to use any classes/traits/interfaces from Squirt. The only requirement is for the class to implement a static factory() method that takes in an array of parameters and returns an instance. The [AWS PHP SDK](https://github.com/aws/aws-sdk-php) is already compatible with Squirt, even though there are no package dependencies. Here's an [example](http://docs.aws.amazon.com/aws-sdk-php/guide/latest/service-sqs.html) of instantiating an Amazon client that demonstrates the use of their code without the Guzzle ServiceBuilder that it was built for. Backing up a bit for a larger picture: There's a difference between a package depending on another package [Composer](https://getcomposer.org/) style, and requiring that one use a particular dependency injection framework in order to use a class at all. I think that good code is built on the shoulders of other good code, so package dependencies aren't a sin. But I appreciate that some people want to build everything just the way they need it from scratch every time. And if one has the resources to do so, all the more power to those people. 
What is the number behind "a lot" of reports? If you start running a single query for a large dataset you end up storing it in an array. Depending on the number of records this could cause problems. Does the data within the reports overlap much? Also what database platform? It's hard to give a "common practice" answer without more information.
I write a lot of reports; nearly all those reports require only one main SQL query. It's almost always better for performance and logic to do the work in SQL. If you don't know SQL, learn it, it's a powerful tool. It is designed for this purpose. 
Though the referenced method resolves multiple database connections, 'IN' is VERY expensive in time. Most situations can be resolved with proper JOINS and the occasional subquery. 
I've updated my question to clarify
* Probably around 60 different reports. * A big report that we didn't use the database to SUM or something could return 3,000 rows * They could overlap quite a bit. Same data looked at different way. My edit on the post talks about it. * We're using mySQL 
60 is not a lot. You want a separate query for each report. 
Joining and summarizing is what databases are designed to do. It doesn't seem like a good idea to be writing the joining or summarizing code outside of SQL. If your queries are indexed hits to a few thousand rows, or even tens of thousands, just sticking wih SQL is likely best. Don't solve a problem you don't have. Of course plan for scaling problems, but I think scaling problems might be at much larger data volumes than you currently have. Our databases grow by 5 to 10 million records per day (mysql). We summarize key data to drive almost all reports (30 ish reports). We still do run some detailed reports that will scan 10 to 20 million records, but those are too dynamic to solve via summarization. You can also cache query results if you expect a high volume of report requests.
Often databases are the choke point of many websites. The key though is the time to execute many calls. Your short but many SQL might take 20ms. While the longer but single one might be 500ms. Also great long complicated SQL calls can be very satisfying to get working but are a nightmare to untangle a year later. But a whole other way to look at this would be with caching. Memcache is one way to go. It can store all kinds of things that you would otherwise regularly pull out of a database. I have taken many sites of mine where there was a noticeable lag from the SQL to basically instantaneous. My general rule of thumb is that everything sits in memory and the database is more of a backup for that memory. Even if your DB is a few Gigs it must be worth using those gigs of RAM. 
for me reporting is about time to market, i do what is quicker, which in most cases is pure sql, and just if theres a need to not get a CSV as a result, but some graphs or so, thats done in php. of course - there is a dedicated reporting slave, that is not hit by customer queries and thus your queries can be slow without affecting anything.
Correct, and nicely done.
It's even less of a deal to write: public function __construct(MyClass $param) Or even public function __construct(MyClassInterface $param) 
Well - if you're going to want anyone's time I think you're going to have to be more specific about what exactly they'd be working on other than just a PHP powered social network. 
I like that, that's neat. 
&gt; That way if there's a schema change or something else changes I don't have all these crazy joins and sub queries and other things to deal with Unless your database changes in some absolutely ridiculous way then this isn't a big concern. And if it changes to so much that queries require re-working than you code will require re-working as well. One thing I would recommend, if you want a more DRY approach to a bunch of very similar queries, is to build them at runtime. If you have a report that be sorted 10 different ways then just have it build the ORDER BY clause depending on the selection. Just remember to not include any user-supplied data in that way -- always use bound parameters for that. 
We have a simple project and just use Git hooks for this sort of thing.
EJMR, thank you very much for your contributions over the years. I use your PHP mode everyday and am very grateful. That said, I totally understand if your time is better spent elsewhere. I just wanted to say thanks and best of luck.
Thank you, and for all of the great contributions you've provided. You've given a lot of great time and effort to the project and certainly helped improved it a lot. I hope you're proud of what you've done for the mode :) Even if you think it seems small, PHP Mode wouldn't be what it is today without help from people like yourself.
For anyone curious as to why I made this decision: I am currently involved in game development and I cannot split my time between the two, not to mention I have not written professional PHP in a couple of years.
I did professional web development for about four years and once had a chance to use Laravel. Personally I would recommend using Laravel, or at least studying it. While you may never use it for personal projects, it doe have nice concepts that can improve the quality of your code no matter what you're writting.
One thought to come out of this, with thanks to /u/pmjones, is that the example code and it's use of SquirtUtil can be misunderstood when one is skimming and not reading the comments which address exactly this issue. Will see about stripping out the convenience code to reduce that sort of confusion.
 &gt; I'm willing to learn it, especially as it grows in popularity. But I'd like to do that at my own pace, not get a job that all the sudden requires me to know this shit or get the boot… That’s completely understable. Sometimes I found the sink-or-swim approach to help education, but I also admit that is a very subjective opinion. &gt; I'm reading up old threads in here now related to frameworks, they honestly just confuse me half the time. What parts confuse you? I’m not Laravel expert but I’d be happy to try and help explain some of the finer points. 
I have not checked li3 for quite sometime. So I don't know. I am looking at http://danielmewes.github.io/php-rql/ and I am sure any framework can easily integrate it. I am a core contributor of [aura](http://auraphp.com), which is currently moving in the [ADR](https://github.com/pmjones/mvc-refinement) so not MVC. So I am seeing http://danielmewes.github.io/php-rql/ which can easily integrated to aura also, but not limited but to any framework of your taste. 
[link](https://imgur.com/BAWM20c)
The biggest advantage i can think of, in your question, is you are the only one who knows your framework. If they want to hire more people to help you, or god forbid, replace you, it would cost the company more money to train them to learn your framework.
95% certainly, your framework is built in a less sensible and maintainable way than the current large open source ones. If your thing is open source, I'm sure a lot of people here will be able to point out flaws fairly quickly. You also benefit from 100s of other people contributing with bugfixes, suggestions, documentation, tutorials, packages... Something you will never get with your homegrown code. Shared hosting is neglible for any large PHP project today - unless you're writing an open source, free to use CMS or something.
Thanks for taking a look at Squirt. It's helped me understand some places where people can misunderstand the documentation. Please take another look at the [README.md](https://github.com/phlogisticfugu/squirt) and let me know if that helps to clarify things.
I know right! It's great having a girlfriend.
I had another look at Aura.Di and that does indeed appear to be the case, although /u/pmjones and I both hadn't seen that at first glance. One of the advantages I feel that Squirt has is it's simplicity. As opposed to container-based dependency injection frameworks, Squirt has only one method that a user really needs to call: a single call to `$squirtServiceBuilder-&gt;get()`. Everything else is very declaratively laid out in the configuration files.
Thats not really the point. There is a learning curve on learning your framework, PLUS, a curve to learn the implementation of your framework. If a company has their project built in laravel/symfony/zend/CI/cake whatever, then they can just hire those, and deal with the implementation learning curve, instead of both.
But also immensely more difficult to maintain for the average *developer*. This would be fine if you were a skilled DBA, but for my 2 cents I hate working with complex SQL. You really need an understanding of relational algebra to develop applications that way.
Think of it from a team leaders point of view; someone who might want to hire you and also decides on what platform works for which client. Experience is what counts. If you, as a developer, have no experience of popular frameworks (be it Laravel, Symfony, CakePHP, CodeIgniter...) then it likely shows you've not got a huge amount of experience in development - so what's the incentive to hire you? It also shows a blind spot to using the best tool for the job, which is important. By knowing the frameworks (not inside and out, but at least what they're good/bad at) you can be an effective developer. You might think your framework does a great job, but if you've not taken the time to dig in and fully understand at least one framework, what are you comparing it against? 
Did you mean to write adjacency? 
Laravel's architecture has not been made by "100s of people". If you looks at it's [repo](https://github.com/laravel/laravel/graphs/contributors), you will see that it is actually just a **one man's project**. If you think that, just because someone has made a popular framework, then it somehow means that this person is programming guru, then you are delusional. 
Security through obscurity is not something to rely upon. While yes it is nice to not make it easy for attackers to know what you are running, Laravel gives no signs of itself. Also, once the code is out, which is more likely to have a bug? The most popular PHP framework on Github (probably in the world at this point) or your custom framework that no one else has ever seen? On the note of shared hosting. Yes, that can be problematic since each host is setup differently. However, shared hosting if you are worried about security is crap most of the time so... You have already lost that battle. If your code can be "dropped in and run" then it has the security issue that all of the logic is probably located in the docroot which means if the config ever goes wonky for even a few minutes your entire app code is at risk of leaking. Finally, on the note of "installing thousands of other files". I'd rather have solid dependencies built by others that are vetted to some degree and have a solid API rather than attempt building my own everything and hoping I don't miss an issue. Let other people focus on certain pieces of logic, and focus yourself on the actual business logic at hand as well as securing the output. You will be far more productive and secure.
/u/CertifiedWebNinja saw it coming! [Commit 428e...](https://github.com/certifiedwebninja/talia/commit/428e667dd503cc223c8d099b27021b9bfd0ed823): &gt; laravel facades, pmjones is gonna be so mad, hahaha!
I thought exactly the same until I got an internship that requires me to learn drupal. while it's not a framework as such, I really like the pressure to learn and get up to speed with everyone else. that way I can see what's possible with the technology. you might find laravel enables you to do things you wouldn't have thought of otherwise. give it a shot (:
Why are you giving credit to pmjones about it? PHP community was talking about it long before he made that shitty clickbait article and spammed it on reddit. 
frameworks have a very high time to market among those people who are used to this framework, basically "the framework" of choice really doesnt matter, from a business perspective usually the framework that is "most common" is the best, not the one that is the best on a scientific level ~ hiring new people, teaching people, paying people, keeping people happy, this is what frameworks really affect the most. So you should learn a completly new framework if you want to do teamwork, if you are a lone, do projects completely alone or in very small teams, than your own framework is the obvious choice as it saves time. also why do you think laravel is hard to install? its the same as every framework, you upload the files. only "composer" might bring some overhead, which is totally optional - you dont need to install composer on the "production" server at all, its totally enough on your local dev box. 
I just found the commit message funny, I think this is some sort of thing here in Reddit ;) (I'll edit the quoting to be more clear that I'm quoting the commit message).
Laravel is considered shitty now?
&gt;Laravel's architecture has not been made by "100s of people". If you looks at it's repo[1] , you will see that it is actually just a one man's project. You're wrong the laravel/framework current branch has had 345 different contributors in the last 6 months https://github.com/laravel/framework/graphs/contributors. I'm one of them :) Laravel uses symfony as a base for a lot of it functionality, it uses doctrine for db access, it uses a php encryption module and a half dozen other bundles/modules written by other people. I would also point you to the code frequency https://github.com/laravel/framework/graphs/code-frequency Most of Taylor's contribution is setting up that branch (the 4.2 branch, from the previous one). @taylorotwell is certainly the creator of laravel and the curator of the current project but if you think it's just him, you're wrong. &gt;If you think that, just because someone has made a popular framework, then it somehow means that this person is programming guru, then you are delusional. I think taylors programming is flawed in places but AFAIK he knows that too. If you think that professionals around the world are going to use a framework written by one person, no matter how popular it is, you're also wrong.
/u/i_make_snow_flakes Haters gona hate. I have no idea what made you angry like this. Don't spend more time on subjects that you don't like. /u/pmjones I like your calmness. You are awesome ie why PHP community and phpfig love you. Else you would have not been into the PSR-0, 1, 2 ... 4 .
I did not say it was made by 100s of people, just that 100s of people are submitting bugfixes, bug reports and feature proposals. Nor did I imply that Taylor is a programming guru, simply that homegrown "frameworks" are shit 95% of the time, often without the author knowing it.
dunno, those things were frequent with eclipse and netbeans but I have yet to experience them with jetbrains products.
The arguments you listed on your wiki apply to any method call. And they are arguments for named parameters, which is a feature that has been discussed for PHP: you are basically saying "use arrays to pass parameters instead of just parameters". This has nothing to do with improving dependency injection. It just introduces a hard dependency to your DI container.
If I need to change my classes to be compatible with your container (i.e. have constructors take parameters in an array) then that's a big fat warning! It's very bad: I will couple my code to your container. Don't mix containers and dependency injection. The code should work (i.e. should be just normal PHP code) without the container.
If you could provide a link to the official documentation of your framework, some books on Amazon about how to use it, and an entire website dedicated to learning a range of techniques and approaches, that would be great.
hello, please only use laravel laravel is the only php the right way **if you don't use laravel, you are not doing right** laravel conquers the php market nowadays !! use laravel right away, and worship our beloved holy laravel creator, Taylor Otwell.
I don't mean to sound arrogant, but a good full-stack developer should have more than rudimentary SQL skills, including a fairly decent understanding of relational algebra. It's not that hard.
As always in the programming world , "its depends"
I wonder why Hoa is so underestimated/not used
I like this idea. I unfortunately have no stupid questions at this moment. 
First, thank you for the compliment :-). Second, the community and the project are growing fast since several months now (please, see [Hoa Apex'14: What a fantastic community!](http://blog.hoa-project.net/posts/26-hoa-apex14-what-a-fantastic-comm.html) and especially the opening keynote of this community event [Hoa Apex'14, what a year!](http://keynote.hoa-project.net/HoaApex14-1/HoaApex14-1.html)). Why are they growing? Everything is “ready” since a long time but it was in french only. Since we have started to translate things into English, we see more and more contributors. You can follow the translation effort on Github (example with [`Hoa\Compiler`](https://github.com/hoaproject/Compiler/pull/25)). Finally, for a long time, peope were not ready to use “libraries”: closed-full-stack frameworks were in vogue and it was difficult for users to understand the impact of decoupled, modular and extensible libraries (or components). Now this era is reaching its end and frameworks are tending to be more open and component-oriented, which is a good opportunity for a project like Hoa to be popular. PS: we are looking for **awesome hackers** to include/integrate Hoa through extensions or bundles into your favorites tools (Symfony, Laravel, Zend Framework, Yii etc.). Please, [feel free to contact us](http://hoa-project.net/Community.html)!
&gt; although /u/pmjones and I both hadn't seen that at first glance. Speak for yourself, not for me. ;-)
I still see "&amp;" sometimes when objects are being passed around, specifically in WordPress when defining a callback for an action or filter hook. Is it still needed? I also see it with regular variables in foreach loops.
&gt; it's possible/easy to define classes that will work with Squirt without needing to use any classes/traits/interfaces from Squirt. I think you're getting it backwards. There should be no support for defining classes in a way that recognizes the container classes/traits/interfaces in the first place. Otherwise you're doing something contra to the idea of dependency injection.
Preach it.
I'm using that (php-rql) right now, and I've decided to stick with Symfony for now (while not specifically a MVC framework, it still works pretty well for it). I spent the weekend basically diving head-first into it.
I would not expect it to be any different than other language tests. They will probably do standard tests like FizzBuzz, 2D array initialization and reading, class abstraction, inheritance and extension. Also, if you have any database requirements, you should know those items.
It's to pass something by reference instead of by value. Objects are always passed by reference so if the variable holds an object it's not needed. Scalars(strings, ints, bools, etc) are not passed by reference though. See this gist https://gist.github.com/dadamssg/26ab0ea674450c3f8501
I'd say fuck the haters. I did something similar and learned a ton from it. The experience you gained building this will be invaluable. All in all this looks pretty damn good for a "toy" framework, and I greatly appreciate your attitude of not trying to "market it" and pass it off as something that's going to see widespread adoption. 
FYI, this change was pushed this weekend. The packages are slowly updating everything, and will begin checking for stat updates every few days. I'd do it more often if not for Github API limits :)
i'm not really familiar with Hoa. i've been using [clockwork](https://github.com/itsgoingd/clockwork) for benchmarking my laravel apps. could you elaborate, where you're going to with Hoa?
Where are we going with `Hoa\Bench`? What do you mean?
If it really is for an object then it's just old habits, the &amp; can be removed as all objects are always passed by reference. As dadamssg mentions, though, it has its place for arrays and scalar values (strings, numbers...).
i'm just comparing Hoa with clockwork and looking for pros and cons and what will come to Hoa later roadmap-wise.
This is a great use case for the Command pattern and CommandBus architecture that is the latest rage in the Laravel community. There's three core ideas here: * Your controller should only be the glue between the core application and the view/AJAX response/whatever * Your controller should have zero knowledge about what is done with the submitted data. * Your business logic should execute independently of the external interface that is being used (web, ajax, cli, etc) Using a command &amp;/ bus allows you to make the business logic completely independent of how the request was made. It might be an AJAX request, it might be a browser, or even an Artisan command (CLI). You create your command object, execute it with the CommandBus, and return the data you need to. The bus will find and instantiate a handler that does whatever logic you need it to with the data passed in. Alas, this is a painfully simple explanation and the subject covers a lot more territory. Checkout https://laracasts.com/series/commands-and-domain-events/episodes/1 for a solid video series on the subject, there is also a corresponding composer package at https://github.com/laracasts/commander
thanks hywan for elaborating.
You're not the only one battling with this. It's a heavily debated subject at the moment. As a response to this PM Jones has put up an example repository illustrating a different approach. I'm pretty sure the readme.md file in this repo will be to your liking: https://github.com/pmjones/mvc-refinement
I was building a job application plugin for WordPress. Data was stored in one big ol' array I kept passing to different parts of the plugin. I hit a memory limit. Refactored some junk and added &amp; to my methods and it got better. It was described to me that arrays - when passed - make a copy of themselves in memory. So I was essentially making tons of copies of this huge array. Does that sound about right?
Just a note: I think that Clockwork is effectively an interface between the server-side and the Google Chrome browser. So **it is “only” a logging solution** and it **does not** compute anything, while `Hoa\Bench` actually computes the data. So, Clockwork could possibly be the next link after `Hoa\Bench`:-).
&gt; What language and type of place are you applying? &amp;#3232;_&amp;#3232; &gt; 12-question test to evaluate my PHP programming skill level. 
To expand on what 88mmphilosopher was saying, you should have fizzbuzz memorized. Also, you should make sure your linked lists knowledge is up to par. While you will likely never use this in the real world, they love questions like this during interviews. You should be able to write a class on how to organize a card game. You should have methods for shuffling, dealing, etc. Memorize how to write parameterized and secure database queries.
Fair enough. What type of place? Agency? Internal dev team? Dev shop? You could expect different questions from different positions.
As far as I know, data are only copied when modified. Calling myFunc($bigArray) doesn't make a copy of it right away. If the function modifies the array then it's copied and made available in the function scope. If the function does not return the array, it's no longer in use and is marked as garbage. Hopefully it's freed from memory by the garbage collector when it runs. In your case, if your functions are modifying the array, passing it as reference might indeed be better.
Thanks man, this is exactly why I built it, to gain a ton of experience. If it gets used by others, awesome. If it becomes the next Slim, even better! But I don't care. It's all about using new tech and toying around to learn.
I'm sorry if I missed something and my comment is stupid, but wouldn't simply writing one action (i.e. method) per controller class be a solution? I.e. you split a big controller into several smaller controllers.
Perfect. Thank you.
Look over the PHP and database related requirements in the job description - if they're looking for someone who knows Laravel, I would expect a couple Laravel questions on the test, or if they mention mysql, then you might expect something like a PDO question or possibly mysqli. Good luck!
Since I use the Laravel facade system, I stick to using what Laravel calls it. I know what a Facade is, and I know what Laravel is doing. I support Taylor and his usage of the term Facade. Sorry I'm not a hater over a term.
Looking at code on Monday mornings usually makes me wonder where I left my brain, but for some reason I'm actually having a really good day.
In the nature of this thread, what's FizzBuzz?
You don't need the reference operator to work with objects since PHP5. Actually it's very likely to introduce bugs when used inadvertently. Consider this: &lt;?php class Person { public $name; } $joe = new Person; $joe-&gt;name = "Joe"; function chName($obj) { // You don't need a reference for this $obj-&gt;name = "Mary"; } function chVar($obj) { // This only modifies the function scope $obj = "doesn't matter outside"; } function chReference(&amp;$obj) { // This modifies the original variable // which could be undesirable $obj = "something else"; } chName($joe); var_dump($joe); chVar($joe); var_dump($joe); chReference($joe); var_dump($joe); In the first example we take $obj as a regular parameter and modify its property (it could be an _accessor method_ just the same). This modifies the instance throughout the application. That's why var_dump from outside the function displays the object's new name, and it's usually what we want. The second example replaces the $obj parameter with something else. Because the $obj variable is in the function scope, this affects the variable only inside the function. We still see the original $joe in var_dump outside. In the last example we accept &amp;$obj as a reference. It means that whatever we do with it also modifies the outer scope. This is handy sometimes, but while working with objects it might be a mistake. Using the reference operator in _foreach_ without a real reason is likely to cause trouble as well, but I won't bother you any further. Just keep in mind that you usually don't need to use references to save memory in PHP. As far as I know data are only really copied when necessary.
Keep in mind your code doesn't even have to be limited to any given named layer - just focus on keeping your classes very small, very focused on a single responsibility, and giving them a meaningful name. https://docs.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/edit I honestly find it easier to NOT think about my classes in terms of what buckets they belong to, but rather, what responsibilities make sense in a given class. Go down to the responsibility level of your application, and divide up the responsibilities into appropriate classes. THEN worry about where those classes go, as that's the least important part.
Actually, in my experience, about the same ratio hold true for both homegrown and popular frameworks.
Everyone's going to hate on something. :/ I love CakePHP, but you also get shit for it. I love MinPHP, but its rarely used afaik (maybe custom for a project...dunno). I hate Zend Framework but a lot of people love it. Symfony 2 is a bitch to learn properly, but a lot of people swear by it.
From wikipedia &gt; Fizz buzz is a group word game for children to teach them about division. Players take turns to count incrementally, replacing any number divisible by three with the word "fizz", and any number divisible by five with the word "buzz". You normally output FizzBuzz if it's divisible by 3 and 5 as well. So the rules are * Divisible by 3 = Fizz * Divisible by 5 = Buzz * Divisible by 3 and 5 = FizzBuzz Trivial, but it's insane how many people can't do it.
Stupid bullshit theory questions that you'll only ever encounter in an interview. If you get lucky they'll give you some real problems. But I doubt it.
While the wording and rules are sometimes different, the basic idea is as follows: Count through the numbers 1 through 40. If the number is divisible by 3, display "Fizz". If the number is divisible by 5, display "Buzz". If the number is divisible by 7, display "FizzBuzz". If the number is not divisible by either 3, 5, or 7, display the number itself instead. The numbers differ and even the words differ. (Sometimes the words are "Foo" and "Bar", for example.) 
It's a consulting firm, so I imagine that the skills and tools used vary from project to project, but the job description seems to emphasize jQuery and LAMP development. From the job description: * 2+ years experience in web development using PHP/MySQL/HTML/CSS/Javascript * Experience using Javascript libraries like jQuery to build interactive interfaces * Ability to write advanced object-oriented PHP * Ability to write and optimize MySQL queries * Knowledge of programming design patterns and their implementation in PHP
Interviewer: "Please show us a class for traversing a binary search tree." Boss: "Please don't use ternary if/thens."
As noted by /u/FrenkyNet, this is exactly the scenario that [Action-Domain-Responder](https://github.com/pmjones/mvc-refinement) addresses. To summarize: - Instead of controllers with several action methods, you split each method out to its own Action class - The Action class takes input from the request and passes it to a Domain (Model) layer. That layer is where your DDD, EBI, DCI, etc. patterns come into play. - The Action class gets back output from the Domain layer, and passes that output to a Responder layer. - The Responder layer is in charge of building the response: all templates, views, HTTP status codes, and HTTP header work goes here. There are nuances and consequences to this, so I recommend you read the whole paper.
Ugh the date in the title. Make it either 2014-08-25 (ISO 8601) because this is the correct way or use the American method 08/25/14 because the majority of Redditors are American and this is the most common wrong way.
&gt; But that simply isn't an option if it uses Laravel. Not true. I've got 3-4 Laravel projects set up on my crappy $5 a month shared hosting server.
&gt;&gt; homegrown "frameworks" are shit 95% of the time, often without the author knowing it. &gt; &gt; Actually, in my experience, about the same ratio hold true for both homegrown and popular frameworks. So of 20 popular frameworks, only one of them isn't shit?
That's a very stupid and extremely *American* way of thinking. *You are not the center of the universe.*
Sigh... http://xkcd.com/1179/
You have a Compiler library. You (guys) are awesome! I will look at all the libraries later, I actually knew long time before about Hoa project, but the last time I've looked at it everything was in French so I left the website quickly. It's very good that the project is being translated now. PS shouldn't Compiler lib be called Parser?
[Have you ever wanted to be the center of the world so bad you cut Asia in half](http://i.imgur.com/JTtaN10.png)?
There is no 25th month. Anyone who gets confused by the D/M/Y format has other things to worry about, like getting a basic education.
The logo still looks like a dick and balls.. you seriously need to change it.
so presumably in the context of this thread, it's to write a program to output the results of fizzbuzz? And by can't do it, do you mean speak it or code it?
Yeah, you're normally asked to go through numbers from zero to one hundred. I was talking about coding it
1/1/12
Most devs I know do operate like this. It all comes down to how much cutting edge work you have - if you're flush on that, you can afford to cut the outdated shit off.
http://imgur.com/oDhv6kx
OK I have a question that I should already know the answer to but don't. I'm new to Laravel and the MVC pattern in general. I've built a little application that gathers orders from Amazon, eBay and Shopify, stores them and does some other stuff. I'm just now noticing how wrong I've done all of it. The main bulk of my code - connecting to each API, parsing results into the database and doing other stuff is all within a model. It all works but I don't think it's how it should be done. Basically a controller function calls a function in the model, that does all the work, gets data, parses data, stores data. I know this isn't a great question without offering code examples, but am I correct in thinking that I should be putting more code within the controller and then just pass the data to the model? Where should the API call and data parsing be? Thanks!
Uh... 1. Questions that can't be answered with a 30-second Google search are *never* "moronic". 2. We shouldn't be promoting asking of questions that *can* be answered with bare minimum research yourself (which are the only ones I would consider actually moronic). So, this either needs to be renamed or not done at all, IMO.
&gt; Don't mix containers and dependency injection. The code should work (i.e. should be just normal PHP code) without the container. The user code does work without the container. There's an example of that in the run_nonsquirt.php example. Did you not understand what the documentation was getting at there?
I'm going to give you some reasons for doing some calculation in php: 1. Reports often require summing up your columns at the bottom or by subgroup. You can't do this in SQL without writing multiple queries and interleaving your data together. Performing one query then a loop is much faster than multiple queries. 2. When you have report columns that are calculated by dividing two numbers (such as a percentage) then you can't just sum up the values of all the rows. You need to redo the calculation on the sums of the component parts. This type of refactor can become a huge pain point if you've moved all your calculations into the database. 3. If you ever plan to move to a no-sql style database or a caching layer then you have a great chance of losing all of those math abilities in the database layer. 4. If you ever need to use a function that the database doesn't support you're going to have a hard time implementing them. 5. If you ever want to package up sub-calculations for ease of development most of the time that's not possible in SQL. You have to specify your expression over again for each column. If you use your database to filter down the data to what you need in a report and then perform your column calculations in a loop in php then you're going to end up with a more maintainable solution that performs just as fast as he all SQL version.
Hmmm interesting to see another take. Do you have a link to your repo? And how would this support child configurations? Also I also had started with array_merge, then moved to array_replace_recursive to do deep parameter replacement as I found some use cases for that. But then ended up writing my own custom merge to keep from merging lists like `array(1,2,3)`
The squirt-specific classes/traits/interfaces have been removed from the examples as they seem to cause confusion. All we're talking about here is a static factory function, not anything that forces a user to use Squirt. Please take another look at the [README.md](https://github.com/phlogisticfugu/squirt) and let me know if that helps to clarify things.
Just... not toooo nice :)
Moron here... creating a baseball site that queries a database for stats. I have a database for season statistics. Everything works great for each year, and now I want to link every player to an individual page with their individual statistics... ie: SELECT stats FROM batting WHERE playerID = player_1, There are about 50 players and I want to know the best practice for creating one dynamic page instead of 50. I thought I could pass a variable in the URL, ie (?player=player_1, etc), but apparently using $_GET in php/mysql query is a big no no... what other ways can I avoid creating 50 separate pages for each player.
Good. Now, the next step would be to develop a bundled extension for exposing the AST via an API. 
&gt; This has nothing to do with improving dependency injection. It just introduces a hard dependency to your DI container. The reason for using key/value associative parameter arrays is so that parameters can be merged recursively as arrays. That underlies a bunch of the parameter override features in Squirt. There is also no hard dependency on Squirt with using a static factory method (which is all that squirt-compatibility means). There's an example of that in run_nonsquirt.php in the main documentation. Is that example not clear as to what it is getting at?
Just to add to this statement. Here are some PHP docs! Review copy-on-write http://php.net/manual/en/internals2.variables.intro.php http://en.wikipedia.org/wiki/Copy-on-write And to pass by reference PHP suggests only doing so in the function declaration or 5.4 will cause a fatal error. http://php.net/manual/en/language.references.pass.php
Using $_GET is a big no-no when you pass it unfiltered. Firstly, playerID should really be an integer, having playerID = player_1 is not only redundant, it's also kinda bad practice since strings are much more slowly processed when compared to integers by RDBMS and you can auto increment integers Then, accept it via GET like ?player=1, in your PHP make sure that the variable passed via GET is an integer by type casting it like $player = (int) $_GET['player']; then use this $player throughout your page to query and generate the page (make sure to account for possible errors such as invalid player) Note, this is a simplistic example, you can also use real_escape_string and/or prepared queries (see PDO, really recommended) as well as request libraries (like Inspekt) which can allow you to have a more strict request control. 
Here is an example [config](https://github.com/devosc/Application/blob/master/config/service.php). The library code isn't packaged independently, heres the [file](https://github.com/devosc/Framework/blob/master/src/Service/Factory/ServiceFactory.php) that interprets the various types of configuration objects (see the Config directory). I'd be interested in generating the 'configuration' file, maybe your code might help to do this, but the configuration file should be programmable by hand or can generated from a sligthly friendlier config builder. The point is that everything that can be pre-processed (e.g merging) is done prior to the execution of the script (i.e. its ready to use).
May be unrelated, &gt; Doing calls like $obj-&gt;__clone() is now allowed. This was the only magic method that had a compile-time check preventing some calls to it... What was the reason it was prevented in the first place? "it does not make sense" is not a very compelling reason to abandon a language behavior. From the man page for clone.. &gt;Once the cloning is complete, if a __clone() method is defined, then the newly created object's __clone() method will be called, to allow any necessary properties that need to be changed. Isn't clone only meant to be called in succession to a clone operation? Why would it be advantageous to call it separately.. 
Not sure I agree with this sentence. "There's absolutely no reason why we, as developers should be supporting anything lower than PHP 5.5 right now, yet we still do it." Upgrading to a specific minor PHP version has various advantages. Those advantages should be discussed with the client. The LTS (http://www.zend.com/en/support-center/support/php-long-term-support) should also be discussed so they can fit upgrades into the budget. Mindlessly upgrading to the latest version isn't always necessary. Some devs do have a "bottom line" that they refuse to go past because it's simply bad for both the dev and client. Using a EOL PHP version would probably be mine. http://www.reddit.com/r/PHP/comments/2dy47b/convincing_a_stubborn_server_team_to_upgrade_php/
I wouldn't recommend extending an abstract class and think it would be better to keep the execute/invoke of that controller specifically for the action itself. Maybe in the before filter you could inspect the request and change which action method name to use, i.e the logic is done outside and before the controller is executed.
My web host runs the latest stable of Debian (wheezy 7.6) and unless I want to be bothered to manually compile/maintain/whatever my own PHP version I'm stuck using the one that comes with wheezy 7.6 which is currently PHP 5.4.4. My guess is a lot of other web hosts operate much the same. They run a certain distro and until the distro upgrades they don't upgrade either. :/
&gt; Why the hell do we still pander to people who refuse to upgrade past EOL versions of PHP Tell that to my host (Rackspace). *Please* Here I am stuck on 5.3 &gt; We really should be saying to clients (and web hosts) upgrade, and if it breaks, you have to pay to have it fixed Oh, that explains it. You have no real life experience working with people. You do know why a ton of people are still stuck writing in Fortran, right?
downvoted for no other reason than 9gag 
well, to be fair, it does its job better than eclipse and netbeans, but i still experience it sometimes and that's a thing i don't experience with text editors like sublime text (ofc, a text editor isn't an ide, but i enjoy coding more with them)
What would said API look like?
I knew you would say just that. That's why I added the thing in the parenthesis: "i.e. should be just normal PHP code". When you write a PHP class, you write methods that takes parameters. Not exactly one array. That's stupid to recreate parameters when the language already provides them. Look around: do you see any major framework or library that does that "one array parameter" thing? No. 99% of the code people write is just using parameters, that's it. So *no*, normal PHP code doesn't work with you container.
I guess everything is open field, I've been asked from vague BS syntax questions (find the syntax error in $v = 1 == false ? true : false;) to specific whether x is possible/how to do x type questions. You will probably not be asked PHP quirks like in some certification tests (echo vs print, die vs exit type questions) but more implementation type questions, OOP design patterns (singleton, factory etc), probably some SQL queries and jQuery questions (selectors etc). 
ad agency?
&gt; with using a static factory method (which is all that squirt-compatibility means) **There should be no such thing as "Squirt-compatibility"**. There should be only **PHP compatibility**. A container shouldn't require anything in the classes it handles. You want a factory method? There's a factory method in every PHP class: the constructor. That's what it's for. Sure, a container that handles factory methods is cool, but it shouldn't require X or Y way to code. Take Symfony components, Laravel, Zend Framework, Doctrine, whatever… Do they have *squirt-compatible* factory methods? No. Do they have constructors? Yes.
Can we get over it yet?
Question about using a template engine and caching (specifically Twig / Symfony2). I'm currently involved in learning all the many features in Symfony2 that I have never used in previous sites I've made. I've used several different template engines and caching in the past but have never really looked into ways to increase performance or if things I'm doing are detrimental to performance. So my question is: When using a templating system (Twig specifically) is it better to use AJAX calls in frequently requested pages when displaying customer specific data pulled from a database or to let the templating system handle things? An example would be for example a header template used in nearly every page. After a user logs in the navigation changes and displays content specific to the customer (name, messages, etc.). Would it be better performance wise to have the template system/caching simply handle these pages or would it be better off to on each page load do an AJAX request for this small section that changes. I'm sure I'm over thinking this but I know I wont be able to start looking very deeply into Twig for several weeks, and don't want to have to go back and re-write half my pages because of this.
well… Hoa is cool but it is too opinionated. it frightens people. non-standard coding style, usage of "require" engine. it is a bit alien
Possible; I am not overly-familiar with the Command pattern. From what I recall, though, a Command has no return value. With ADR the Action explicitly receives output from the Domain and passes it to the Responder, which may or may not return a Response object (depending on the implementation).
It actually seems like this autoloading mechanism resides there from some years ago when there were no PSR standards and stuff, and could be changed now. Coding style yeah, but I don't care as long as I'm not forced to use it in my projects
I work with a guy that says this is ok. Our devs give him crap for it, but management doesn't understand why it's bad, so it goes unnoticed.
And you know, honestly, I found their coding style more readable. I didn't read a lot of their code yet so I can't say for sure, but I feel like it's more readable.
If you came to us with a Symfony2 certification, we would probably hire you.
good luck doing that on any project that is bigger than a blog
No, the guy is just a troll if you look at his karma and people bit his line.
Please tell me you're kidding.
http://www.dev-metal.com/setup-latest-version-php-5-5-debian-wheezy-7-07-1-fix-gpg-key-error/
ISO is international standards, fuck off already.
heh, theres a difference between being a hater, and caring what the definition of a word is, but i get you. For the record, supporting someone who is wrong, isn't the best way to go about things. If your comfortable with it, then keep at it.
Here's an example of what I'd imagine you'd be able to do: $largerThanTen = function ($x) { return $x &gt; 10; }; $reflection = new ReflectionFunction($largerThanTen); $ast = $reflection-&gt;getAbstractSyntaxTree(); var_dump($ast); Which could output something like: array( 0: Stmt_Return( expr: Expr_BinaryOp_Greater( left: Expr_Variable( name: x ), right: Scalar_LNumber( value: 10 ) ) ) )
That decision should entirely depend on what suits best for the UX, some times having AJAX is beneficial for loading extra information or providing controls on a page, things that might not be always required but when required a good responsive interface gets appreciated. The template systems such as Twig cache things heavily enough to point that they are negligibly slower than pure PHP outputs (such as those required for AJAX), it shouldn't really be the cause for your UX decisions.
That will never pass though, as the annotations are in documentation, and also hasnt seen an update since 2011. 
Is it a joke to celebrate achivage of the php 4 documentation? http://docs.php.net/docs.php
Never implied it would, just saying that there's another version of it. 
I support him because I believe he is not wrong. But to each his own, move on with your life. He's not changing his mind regarding it, and neither am I. 
Frankly, I don't care much whether it's implemented as constants like in your first example, or as OOP like in your latter example (although OOP is nicer :-)). Either way you're going to have the problem of not being able to parse files for newer versions of PHP. Nevertheless, I don't see that as much of a problem. I don't see the extension necessarily supplanting PhpParser, but rather supplementing it. At one hand, we have a native extension which can provide the data at very little overhead, and the other we have a userland implementation which can provide forwards-compatibility. [¿Porqué no los dos?](https://www.youtube.com/watch?v=OawrlVoQqSs)
Interesting. Thanks!
Ah, cool. Thanks!
Code from hell!
He's not changing his mind because the feature is implemented in a mature framework. It has been proven several times that his definition of facade is wrong. To believe he is not wrong is just silly. 
So much for non-judgemental.
Adjacency Lists aren't all that great when you don't know the depth of the tree. I prefer Closure Tables. But to answer your question, create an object for each node and have an array for all the child nodes as a property of the objects. Loop over the list of nodes again and add the child node to each node object.
A good way to display a hierarchical list like Reddit's is... recursively processing the adjacency list! The immediate issue is the amount of queries required to render, which is of course a trade-off. Storing a tree structure as an adjacency list in something like MySQL is not optimized for reads. Depending on the size of your structure, it may be pre-mature to optimize too much. Alternatively, consider Nested Set as an alternative implementation. There are several decent PHP packages that implement Nested Set. NS is optimized for reads which may be better suited depending on your specific use-case. Consider that typical read to write ratio is somewhere around 10:1. Also, there are other DBMSes that may be better optimized to storing tree structures. PostgreSQL comes to mind. Reference: http://cramer.io/2010/05/30/scaling-threaded-comments-on-django-at-disqus/
He wants to know how to display the list as a tree.
How to make friends and influence people...
*Something* is going to be looking at $_GET somewhere in your application. What has been a common bad practice is spreading those $_GETs all over the application and trusting what data they provide. Instead, make sure they come through one point, where they can be filtered and checked.
There are many systems that use long strings - md5 values - as primary keys in the database throughout. There is nothing fundamentally wrong in doing that, and it does not slow things down. In this case using an integer does make sense; it will be simple and convenient. Edit: not sure why I wrote md5. I meant uuid, a unique string that is not a hash of the data it indexes.
Oh dear. It's not like it is just an opinion and style choice. It is very easy to *prove* how dangerous doing this is.
Nothing wrong with them, but as you said in this case they're not required (I was specifically talking about playerID, not a general case scenario).
Good time to refactor. Get to it!
Without trying to be pedantic about the situation it's worth mentioning that (classical) MVC is widely misquoted/represented. Everything would be a little more accurate if they said "MVC inspired" or used a more updated definition like Model 2 MVC or Web MVC [Example](http://blog.osteele.com/posts/2004/08/web-mvc). Also the saying goes [Fat Model and Skinny Controllers](http://stackoverflow.com/a/14045514/811241). I didn't pluralise model purposefully too. The model is a layer, not a class or object. This misconception is largely caused by RoR's flaws.
Kind of. Is that the 1st of January, or January 1st? I just can't tell. Try 1/2/12.
There's not enough actual PHP code in that article to critique, but your javascript isn't great. You shouldn't be embedding JS calls in your HTML, it's mixing concerns. Instead you should use javascript to setup the onclick event based on the button's id or class. For example: &lt;button type="button" id="fetch-xml"&gt;Load Data from XML File&lt;/button&gt; And your javascript: $(function(){ $('#fetch-xml').click(fetchFromXMLFile); }); Also, there's no such thing as a "MYSQLi Database". It's MySQL. Mysqli is the name of the extension.
Paul M. Jones wrote a great book about this: https://leanpub.com/mlaphp
&gt; Hey! Please Help to HappyCodings for Better Seo Rank lol.
**Facade** &gt; an outward appearance that is maintained to conceal a less pleasant or creditable reality. Exactly what a *Laravel facade* is. Now get over it. I'm getting real tired of everyone beating this dead horse so much. 
Using $_GET is acceptable as long as you filter it and use prepared statements. Look into using PHP's *filter_var* and using *PDO* and you should be fine. E.g. $player_id = filter_var($_GET['player_id'], FILTER_SANITIZE_STRING); //is_valid_player_id should validate the $player_id value if (!is_valid_player_id($player_id) { //ERROR } //$db should be your PDO connection object $response = $db-&gt;query("SELECT stats from batting where playerID = ?", array($player_id));
**Proxy** &gt; A proxy, in its most general form, is a class functioning as an interface to something else. The proxy could interface to anything: a network connection, a large object in memory, a file, or some other resource that is expensive or impossible to duplicate. THAT is exactly what a laravel "facade" is. The "less pleasant" piece of that definition is HIGHLY subjective.
Just for the sake of others, it will not slow things down as long as the strings are always the same length and not stored in a varchar. Static-length columns are faster to query and index. Varchars should be in a separate table(most times). It depends on if the varchar will always be necessary when fetching the other related data.
congratulations php, you're becoming a real language
http://i.imgur.com/QFIIpLH.jpg
Usually you'll need a router for that. Unless you pass the request to PHP (i.e. using mod_rewrite to pass in the request string as a parameter), the web server (i.e. Apache) will assume you're referring to a directory. Googling around for PHP routers could be helpful. If you haven't started the project yet, you may want to look into MVC frameworks (which usually have routing built it), although that may be too heavy for you ([minimal PHP routers like this](https://github.com/dannyvankooten/PHP-Router) exist).
I believe a lot of other people have said some common approaches, or misunderstood your question. I however am willing to go a really crazy route and suggest something off the wall. Mainly because I like the idea. Use an ETL process (http://en.wikipedia.org/wiki/Extract,_transform,_load) to get the data into a Star Schema (http://en.wikipedia.org/wiki/Star_schema). Yes yes I know.. crazy right. BUT CYBERPHINE!!! WHY WOULD YOU POSSIBLY WANT TO UNNORMALIZE YOUR DATA!! Well the facts are that most ad-hoc reporting can be done very easily by translating your data into this type of database schema. Now remember that you will have to have some type of "job" to regularly update this star schema from your normalized database schema. But that can often be done very quickly. It reduces query complexity and speeds up the actual query. The downside of course is the data is "semi-real-time". Basically however often your job can update that star schema. Note that this is a large sum of work. But if you have 60 reports now. Wait a year or two and see how many you have left. And I end my crazy train comment. 
I like your first example, it should be kept as simple as possible and left to user land to implement php versions of tools like estraverse, escodegen etc. OOP version means introducing a load of new classes and complexity and will just get in the way.
mod_rewrite is one way, but can be difficult without prior experience. Another way is by using a 404 handler that tries to parse and make sense of requests for directories that do not exist.
https://www.youtube.com/playlist?list=PL6E2097B1DFB4D43D
Security isn't fundamentally different across scripting languages, there aren't any rules you have to follow in PHP that you don't have to follow in Ruby or Python. The best place to start is at OWASP if you want to build secure web applications in any language. https://www.owasp.org/index.php/Main_Page Luckily for you, a lot of their examples are in PHP.
I believe the reason to do this is for faster lookup for strings. Sometimes &gt;SELECT * from urls where hash = MD5('http://reddit.com') may be quicker than matching the text in a database with a large amount of data. Or at least, in the theory I've learned. 
Nothing wrong with it, but integers would take up less index space than md5. Depending what db/engine/setup you're using it could mean the difference between loading the index into memory or reading from disk.
"Static analysis can't be done on dynamic languages" always seemed like a lame excuse. Sure, we can't get 100%... but we can get 90%. Maybe once a legitimate AST is available then IDEs can implement better type warnings and auto-completion (à la Hindley–Milner).
He also commented on static calls. Read the other comments. I still think some comments were just blunt statements made from a very quick inspection, with no opening to a discussion. However I probably didn't chose the best replies and I wouldn't react the same now. I guess it just takes a little practice to get accustomed to /r/php.
Seriously. I never believed Jeff Atwood when he said people can't do it. And then Simone someone failed to do it in an interview. I was stunned. Overall, five or so people have failed it in my five years of interviewing.
if (is_int($variable) AND $variable%2==0) http://php.net/manual/en/function.is-int.php http://php.net/manual/en/internals2.opcodes.mod.php
This should work... function isEven($number) { return is_int($number) &amp;&amp; $number%2 === 0; } var_dump(isEven(1)); // false var_dump(isEven(2)); // true var_dump(isEven('a')); // false
You should read my link on how the Modulus operator works in math. Its very important to know this, since its the number 1 question anyone asks, in interviews I have seen.
Yep. Must have been having a slow moment. I've used it in the past, I updated my post to reflect it as a better solution.
&gt;Building a rock solid architecture will give you the bandwidth needed, when intelligently designed, to handle most traffic situations. I don't think you actually know how bandwidth works..... You're basically arguing that the material used in the construction of a pipe and the quality of its solder joints is going to ensure that it has a larger inner diameter to allow for more water to get through. The fact is, in the real world, the diameter of the pipeline you have to work with is fixed by the price you're paying in Hosting Services, or the capabilities of the local machine you're running on.
And new to programming general, I'm going to assume?
yes, very much, but I have taken basic courses and I haven't taken any in-depth courses so, I know a little about HTML, JavaScript, Java, C++, but Now I am learning PHP, and SQL and databases 
i didn't judge your chart, only its source
This is not entirely correct. Objects are passed "by reference", and it actually makes a difference when you use &amp; with objects.
The current is PHP 5.4.24ish on osx so...maybe not 5.5
One notably good resource is http://phpsecurity.readthedocs.org/en/latest/ You could also benefit taking this quiz http://timoh6.github.io/WebAppSecQuiz/ to see if there are any "I hadn't considered that"'s in some areas which could be relevant to your app/situation.
A year ago someone here posted a really great explantion of the fat controller/model problem. It uses Yii as an example but it also applies to Laravel. http://www.reddit.com/r/PHP/comments/170mu5/having_a_tough_time_understanding_fat_modelskinny/c81hn0h
That post is **excellent**, such a good example too. Nice. One of my favorite parts of symfony is how heavily services are encouraged.
If you're generating this header only on hard page loads, definitely do it in the template. If that's not what you meant, then I'm confused. Try to do as much on the server as you can before sending it to the browser, ideally only using Ajax when data changes. You can always preload your database results, just dump them in a script tag and attach them to window under `preload`, or under your app's namespace. Then when JS inits to render, the first part of the data can be read from the preload section. Saves you an xhr or two and makes the page render faster. Without HTTP2 or sockets, one large request is much faster than multiple smaller ones.
There are more design considerations than implementation concerns here. Do you want request throttling? Do you want to be able to just revoke access? How much do you want to expose your API? Is it only for consumption by a mobile client you're making, or for public consumption? Before you can choose your security implementation, you have to decide what your API is going to be and how it will be accessed.
If you ever figure this out, please write a blog post for it.
&gt; Why would it be advantageous to call it separately.. I think the question should be reversed. Why *can't* we call a function whenever we like, just like any other userland-defined function?
Yeah strange because it's different from PSR-1 but being PSR doesn't mean being the best option. FIG is just a bunch of people like you and me, that makes their decisions as controversial as Hoa's.
There are may restrictions that languages place upon the user to protect them from making errors. Eg. Static Typing, Memory Management etc. You can also ask questions like, why can't I assign a string to a variable holding an integer? Why can't I access a location anywhere in memory. So in this case, the clone method is assumed (by the language) to do stuff that is only in succession with a clone operation. So NOT allowing to call it independently is akin to white listing the allowed operations. So that user is protected from using it for a different purpose, and ends up having hard to detect bugs (because it gets called automatically as part of a clone operation). 
They're often something that become more important when you want to allow other developers or other libraries to interact with your code. Here's a real example: Our database backend handles saving fields to the database, but we hope lots of other developers will use it as a Composer package so we want to make it extensible. We've covered the basics but eventually someone will want something custom. So we have a collection of fields as an object and anyone can add more. $fieldManager-&gt;addField($myCustomField); When the field manager wants to perform a save it might do something like this: //FieldManager.php public function addField($field) { $this-&gt;fields[] = $field; } public function saveFields() { foreach($fields as $field) { $field-&gt;beforeSave(); $value = $field-&gt;getValue(); $field-&gt;afterSave($value); // we continue and write value to the database } } So this looks good with one problem, we're calling a lot of methods on our passed in $field and we can't be sure that it has those methods. So our options are to validate each one: if($is_object($field) &amp;&amp; method_exists($field, 'beforeSave')) ...etc This can get complicated quickly, so instead we do the following: //FieldManager.php public function addField(FieldInterface $field) { $this-&gt;fields[] = $field; } Now we can guarantee that everything passed into the method conforms to the FieldInterface class and we can stipulate that a conforming object has a beforeSave(), afterSave($value) and getValue() method.
If anybody's wondering, this guy's talking about the advantages of [OLAP](http://en.wikipedia.org/wiki/Olap) vs. [OLTP](http://en.wikipedia.org/wiki/OLTP) and it is not crazy at all if you have the demand for it. If you generate reports semi-regularly there is a good possibility you have the demand for it.
Definitely. People have suggested to disable gc as well, but I guess I have to be crazy to disable gc in a production environment. 
&gt; why can't I assign a string to a variable holding an integer Uhm... you can? `$a = 2; $a = "foo";` is valid PHP. &gt; Why can't I access a location anywhere in memory This is the case for *any* language that manages memory for you, so not relevant to this discussion. &gt; the clone method is assumed (by the language) to do stuff that is only in succession with a clone operation. Then it shouldn't be a user-modifiable method. &gt; So that user is protected from using it for a different purpose, and ends up having hard to detect bugs In a language where you have internal classes that initialize object properties *before* calling the constructor ([1](https://bugs.php.net/bug.php?id=46105), [2](https://bugs.php.net/bug.php?id=49521), [3](https://bugs.php.net/bug.php?id=50636)), we shouldn't pretend we are trying to *protect* the user from hard-to-detect bugs.
To be fair, 9gag ripped it off from somewhere else and reposted it, as they tend to do. So all you're judging is the side label.
&gt;Uhm... you can? $a = 2; $a = "foo"; is valid PHP....This is the case for any language that manages memory for you, so not relevant to this discussion. You missed the point. I was not talking in the context of PHP. I was just illustrating the philosophy behind statically typed languages and memory management in general, and why certain restrictions are there for the sake of the developer. &gt;Then it shouldn't be a user-modifiable method... It need to be user modifiable because it is meant to define how the properties of the object should be handled after a clone operation. From the manual &gt;Once the cloning is complete, if a __clone() method is defined, then the newly created object's __clone() method will be called, to allow any necessary properties that need to be changed... The point is it is impossibe define a geenral implemetation of the method. Because for some object you can get away with the shallow copy, and for some object you ll have to clone some selected attributes recursively, with possible additional logic...So it needed to be user defined ... &gt;In a language where you have internal classes that initialize object properties before calling the constructor (1, 2, 3), we shouldn't pretend we are trying to protect the user from hard-to-detect bugs. Ha ha.I just don't get the users of php. On one side they make a big fuss about improving the language and all that stuff, and yet make comments like these...Anyway, what you said is not relevant. I was just illustrating why it may be forbidden to call __clone directly. And your telling me that, "hey, that is ok. Because PHP is a shitty language anyway"....
I strongly suggest you Sir to consult a doctor if your “dick” looks like the Hoa's logo. Sincerely.
The `from`/`import` construction is optional and we will remove it because we get several feedbacks like this one. This is perfectly PSR compatible but it frigtens some people so…
The point of interfaces and abstract classes is for when you want to do something without caring how the other class does it. The point isn't in the class itself, it's in whoever uses it. Like, you might want to have a system that displays messages, and you have a view that displays messages in a nice table. So you might make an abstract class or an interface, and *you rely on them* to get you the data you need. Not on any specific message class, but specifically and deliberately on the abstract class or the interface. That way, you can add a SnailMailMessage class or a ChatMessage class or a SmokeSignalMessage class, and you might need to change a [Factory](http://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29) somewhere and that's it! The code that displays your SmokeSignalMessage doesn't care what sort of message it is, as long as it acts like one. The point of an abstract class or an interface is ensuring you get to do that, because you're not relying on an EmailMessage class but on some class that everyone has to inherit from. Also, people who do [unit testing](http://en.wikipedia.org/wiki/Test_driven_development) can use this to pass a class to their code that isn't a message, but acts like one, to see if their code works. This is called a "mock class" because it pretends it's a message. This sort of thing is used to pass fake database connections to code to be tested, so you can test if the right database calls are made, without actually doing anything with your data. That's the first part of your question. A **callback** is a function that you pass somewhere and the code you pass it to, calls it for you. That's all it is. [This](http://php.net/manual/en/function.usort.php) is a well known application of the concept. A **hook** is a sort of callback, but the word is used in [a specific application of callbacks](http://en.wikipedia.org/wiki/Template_method). A hook is where some other code provides standard behavior, an algorithm, and at specific points of the algorithm you can "intervene" and customize the algorithm. An example: WordPress uses hooks a lot. It will build the page output step by step. Plugins get the opportunity to customize this output at certain steps along the way: the plugins provide hooks that "hook into" the process that builds up the page. I think there's a hook that gets called when the title of the page is done, at that point your ShoutOut plugin might change the title to UpperCase. You pass the hook to WordPress, and it calls your hook when it's time to do the title thing. Hooks have two big advantages: first of all, the other person's (WordPress's) code gets to decide when to call any hooks, and when to take back control of the algorithm, and second of all, you (the plugin) can decide which hooks to provide; you can choose not to provide any to take advantage of the default behavior, or you can customize it fully by providing every hook you can think of.
&gt; The point is it is impossibe define a geenral implemetation of the method. Because for some object you can get away with the shallow copy, and for some object you ll have to clone the attributes recursively...So it needed to be user defined You are missing my point. If it is user defined, it should be user callable. &gt; Ha ha.I just don't get the users of php. On one side they make a big fuss about improving the language and all that stuff, and yet make comments like these...Anyway, what you said is not relevant. I was just illustrating why it may be forbidden to call __clone directly. And your telling me that, "hey, that is ok. Because PHP is a shitty language anyway".... That is not even close to what I'm trying to say. If you really care about "improving the language" that also means improving consistency. On one hand, you (read:internals in general) introduce inconsistencies by closing stupidly obvious bugs (like the ones I've linked to) as WONTFIX, and then, when someone submits an unanimously-accepted RFC *fixing* such an inconsistency (`__clone()`) you come here and complain...
I forgot to add that what makes Interfaces awesome is polymorphism (Google it!). You might spend ages writing a `Kitty` class that may have whiskers and you can `pet()` it or whatever, and decide that you want to loop over your `Kitty`'s whiskers. Just implement the [Iterator](http://www.php.net/manual/en/class.iterator.php) interface in your `WhiskerCollection` class and bam, you can do this: foreach ($fluffy-&gt;getWhiskers() as $cuteWhisker) { // swoon over whisker } PHP doesn't care what it is: if it uses the Iterator interface you can foreach it. You can do the same thing in your code!
For legacy code, having one myself, you don't really care about "active development" such as new features and so. But you do care if the software/framework/operational system is supported or not. At least to the point where you really need to start refactoring, modernizing, or even rewriting the legacy code. Supported is a term used to say we don't add new features but we will accept security bug fixes until the End of *their* Life (EOL). People depend their business on such *contracts*.
While I agree with you (people should do a minimum of search and RTFM), the mods seem OK with such questions in the subreddit (we are flooded by it everyday). So **anything** that can help take these questions away is fine by me.
ALL of the projects ;-) start with wordpress. Joomla. Drupal. Magento. Prestashop. Facebook. 
I am glad some people know design patterns. what Laravel calls facade is just a shitty opaque magic method wrapper.
It isn't about Laravel only. It is the discussion of using a public/paid framework compared to a self-built one or no framework. The initial post calls out Laravel, but for the most part the points are the same comparing it to any other publicly usable framework.
&gt; If it is user defined, it should be user callable. Why? &gt; On one hand, you (read:internals in general) introduce inconsistencies by closing stupidly obvious bugs (like the ones I've linked to) as WONTFIX, and then, when someone submits an unanimously-accepted RFC fixing such an inconsistency (__clone()) you come here and complain... Not sure what you mean here...I am not part of internals and I am not complaining. I just asked a question. 
Thank you. I'm watching the videos and they're nice. I don't like how he puts much of the logic in the entity classes, but i'll try to find another way of doing some of the things.
A lot of CRMs use UUIDs as indexes. It makes it easier then to be able to merge data together from different installations, with little or no overlap on any of the IDs. It also helps to obfuscate patterns in the data - you have no way of knowing what the next user ID will be, or be able to work out ranges of contact IDs.
I see this https://www.drupal.org/project/doobie which appears to be a separate project from drupal? Is there nothing in here https://github.com/drupal/drupal/tree/8.0.x ? It seems to be all phpunit.
&gt; Why? Consistency. All user defined functions are user callable *except* `__clone()` and this RFC fixes that. &gt; Not sure what you mean here...I am not part of internals For someone reason I have you tagged as internals-people on RES :) &gt; I am not complaining. I just asked a question. True enough. Maybe I'm a bit fidgety today :)
But numerical auto-incrementing indexes are faster still.
Isn't that missing furlongs, or something else that makes those bars a little more even? Edit: yes chains and furlongs 1 foot = 12 inches 1 yard = 3 feet 1 chain = 22 yards 1 furlong = 10 chains 1 mile = 8 furlongs It's still stupid though.
My personal reason is that I like my method names to contain a verb.
Also, make sure all new code goes in a predictable location (e.g. following PSR-0). Then you can slowly move the old crappy code there as you refactor and clean up.
all i'm really being is silly. i don't really care, its just the stupid rivalry that reddit and 9gag have
&gt; Consistency. All user defined functions are user callable except __clone() and this RFC fixes that. It does not break consistency, because that is why they are called 'magic methods', because they can have different behavior from the normal user defined methods. &gt;For someone reason I have you tagged as internals-people on RES :) I know I am not much liked around here. But I didn't expect that level of hatred. Just kidding. Despite the popular opinion, I think the people in internals are just fine.
Damn banks!
Take a look at Sylius: http://sylius.org/
We be chilling
ok, you right. Initially anyway accessors were meant to be able to intercept access to properties in subclasses. The feature is still present. 
It is generally a good habit ;-)
The SO discussion ended up to some "usable" solution.
Probably making use of an [include](http://php.net/manual/en/function.include.php) could cut down all your work, without the need for a sort function.
You will not be able to sort your values by comparing your size since they are not of the same nature. You could either have a reference array with your sizes already sorted and compare everything to it or don't bother to sort on save and do it when you need to display. The easiest way would be to have a static table in your database with columns: | id | label | order | | 1 | 1-2 | 1 | | ... | Then in your available product table you could have something like : | product_id | size_id | quantity | | 10 | 2 | 10 | | ... | Finally when you query for your product: SELECT ... FROM ... INNER JOIN ... WHERE product.id = 10 ORDER BY size.order ASC This way you will have a recordset with a row for every (and only) sizes available of your product
Use [usort](http://php.net/manual/en/function.usort.php)
Try the [usort] (http://php.net/manual/en/function.usort.php) function. You can specify how exactly you want your data to be ordered. 
That is language torture. ;-)
You're not missing much.
Wrong. Listen before talking. How are they different? A facade hides something that takes a complex, multi-step operation, and simplifies it. So the interface (=public methods) is different: it is simplified, and 1 method call replaces several calls to one or many objects. A proxy on the other hand has the exact same interface (meaning same list of public methods) of 1 proxied object, and usually add a feature (in example like logging method calls or usage of a network call). (for some it could be confused with Decorator).
I was talking about the code itself. Is it multiple if's? any faster way?
This issue has been repeatedly taken up by certain outspoken critics of Laravel and run into the ground. A small but outspoken group of people in this community and elsewhere grandstand this as some sort of major problem. You're not *wrong*. I just don't care.
I love Laravel and I too have issue with the term. I place a premium on clear, consistent language that everyone understands. It starts out harmless enough - you use 'facade' when you really mean 'proxy'. But before you know it, the PHP community is unscannable, talks like a fag, and its shit's all retarded.
I'd like to add to this reply, that the latter option is favorable. It's also not a good idea to rely on the order or rows in the database table. Example, in this scenario. When an existing product, or order (unclear what it is) gets a new article in a previously unavailable size like XS (extra small), you'll have to completely remove every size of the product and re-insert all of them + XS (first). To summarize: Don't save rows in a specific order, either add a column with the order in it, or better, map the order if possible as suggested by [DDVDA](http://www.reddit.com/user/DDVDA)
Kleskowy's answer ( [link](http://stackoverflow.com/questions/25502335/why-single-function-accessor-appears-to-be-considered-as-bad-habit#comment39809927_25502335) ) is the most appropriate technical reason why single function getter/setter is a bad idea. Further, that method has two responsibilities, making it more fragile, and harder to test.
That's the thing. I don't even disagree with the point. What I disagree with is the continual and pointless soapboxing on the point. BTW, it's not called the Slippery Slope Fallacy because it's such a strong argument. :)
For small projects, I prefer the former, just because it's a bit simpler. For larger projects, however, I've found the latter to be much, MUCH more clear, because it significantly reduces the mental load of stepping through your program's execution. Instead of jumping around between top-level folders, all of your related functionality is grouped with the entity it primarily deals with, meaning you perform a minimal of navigation (both literal and mental) to see what is going on with a specific request.
When using Pimple one always ends up googling "pimple", which can be disgusting. So using this project at work might be awkward.
I [booked](http://stackoverflow.com/questions/25502335/why-single-function-accessor-appears-to-be-considered-as-bad-habit/25508027#25508027).
Madness. Definitely madness. 
Maybe "Madness" is a bit strong. Slow ... certainly. The implementation from the linked code can't be speedy. I'd love to see type hints for scalar types in the language itself though (along with type-hinted return types, but that RFC seems to be languishing).
The items are saved as a json array ["XS","S","M"]. It would be better to simple define that M&gt;S&gt;XS etc.. and sort the json array itself than remake the whole save function using two different tables. Thank you for the reply though i now understand what should do next
what is wrong? 
Ok, I'll clarify: Writing it is genius. Using it is madness. And no, not because of slow. Because it relies on raising errors, capturing them, and canceling them. Oh, and generating a backtrace (which copies every single argument and object on the stack mind you). Yeah, no. Using it is madness...
right.
Short answer - &gt; use composer, auto loading and name spacing to convert parts into OOP libraries. Use aliasing to keep comparability with old code. ex: use MyCompany/MyLibrabry/MyModernClass as legacyClass; Once you have several libraries, wrap the entire thing in a framework or a micro-framework.
What I disagree with is the continual and pointless insistence on not *fixing the problem*.
&gt; is there a way to reference it relative to the current namespace in the declaration Yes; include the last part of the namespace in the declaration: namespace Project\Auth; class Foo { // ... public function baz() { throw new Auth\Exception; } } I'd strongly recommend *not* using `use Project\Auth\Exception;` (so just referring to it as `Exception` in your code), as it conflicts with a well-known standard PHP class and it'll make your code harder to read because of that. Otherwise, whether you use `Auth\Exception` or `use Project\Auth\Exception as AuthException` is going to be a matter of project coding style. I would seriously consider whether or not that will be the only "`Auth`" exception you're going to want to throw. If it isn't, rename it to be more descriptive. 
.... what?
There's word that codeguy will change the storage part and use flysystem as an interface to work with several local and remote storage engines. I think he's got either a branch or a PR lined up for that.
Yes
It's a reference to a movie, idiocracy. But no, they weren't necessary.
Awesome :)
I think the performance issue is overstated. For a start a framework isn't necessarily going to give the best performance, but that's not its chief benefit. Maybe it's not fast, but is it fast **enough**? Secondly, and more importantly, I don't think it's actually that slow. When optimised for production, rather than being run on a VM with shared folders and autoloading, then yeah, it can be slow. But that's basically dev-mode, and performance hardly matters. Regardless... yes, Laravel does ease programming. The facades are a convenience, not a best practise. They provide a simple and readable syntax for accessing models and Laravel functionality like Auth and Session. Any more advanced tutorial will inject these as dependencies. Your IDE should then access them as you would like. If you leave the training wheels on and complain you can't turn properly then you're probably putting the blame in the wrong direction.
Why does everyone keeps losing it's time about the name of a thing? Seriously I don't get it, call the feature potato or proxy. Symfony is not a symphony yet it's called Symfony, Oracle can't tell the future yet it's called oracle, Laravel Forge is not a forge, yet it's called forge.
Well, just don't use them and use the classic [IoC](http://laravel.com/docs/ioc)? If writing App::make("blabla"); is hurting you, you can also use $this-&gt;app-&gt;make("blabla");
"Symfony" is not a pre-existing pattern name. Nor is Oracle, nor is Forge (AFAIK). "Facade" *is* a pre-existing pattern name. Using it as the name for something that is better described as a "Proxy" (another pre-existing pattern name) is just wrong, and cries out for correction. It would actually be *better* to call it "Potato" (or "George" or anything else); at least then it would not encroaching on a pre-existing vocabulary.
Slowly start writing wrappers/adapters around your legacy code (https://github.com/domnikl/DesignPatternsPHP/tree/master/Structural/Adapter) and use these wrappers to access your legacy code. These wrappers should be PSR-4 compliant and be autoloaded by Composer. You should use a standard structure for your new code base, put every new code, including the wrappers, in a "src/ProjectName" directory. You don't need to migrate to a new framework as you can pick the modules you want from these frameworks using Composer and migrate your code slowly to these modules while keeping your legacy working. This will help you migrate CI code to your new code base without doing the big rewrite. It will also make your new code/wrappers for old code Unit Testable, put your tests in a "tests/ProjectName/Tests" directory at the root of the project. Here is a good example of a standard project structure for PHP projects: https://github.com/sinergi/sinergi Remember, always do SOLID and DRY code that is compatible with an IDE (no container with get/set($key) methods) so you don't find yourself in that situation ever again.
We could go for hours, Facade (Façade) is a pre existing word, before it was a pattern name. In the end, I don't care how it's called, Taylor Otwell already clearly stated that they weren't based on the Facade Pattern, and that he won't rename them, so move on, or don't, I don't care. But please stop writing an article that's already been written 150 times. Here is the french definition of the word "façade" (I'm a french native speaker, it's taken from the Laroussse dictionnary) : &gt; Apparence donnée à quelque chose, comportement affecté par quelqu'un dans le but de cacher son état réel.
This is a good thing. Composer has become foundational to quality PHP development. I'm not sure where (if anywhere significant) this sponsorship will put the project, but kudos to Engine Yard for literally putting their money where their mouth is.
&gt; And no, not because of slow.. Yes, because that would be frowned upon around here..slow? who cares? we ll profile and optimize the shit out of it if need arises... And yet you go on to say, &gt;Because it relies on raising errors, capturing them, and canceling them. Oh, and generating a backtrace (which copies every single argument and object on the stack mind you)... So in other words, because it is slow..:)..I mean, come on, you don't have to be afraid to say that you wont use something because it would be painfully slow...
&gt; So in other words, because it is slow.. No. There's a difference between slow and heavy. Slow can be worked around. Heavy can't. Slow can be cached, or implemented using a different algorithm. But the algorithm here isn't the problem. So no, there's a difference. 
Additionally, there are good chances that this recoverable error will be an exception in PHP 7 - at which point this hack won't work anymore.
&gt; Some people will say "properties are evil, they must never be public!". And that's hogwash, since that's exactly what you did with that accessor. Sometimes I disagree with you and sometimes your prose just makes me smile. &gt; When you create an accessor, you should never create a property accessor. You should instead create a state accessor. That's a gem.
Sure, but it's not gonna happen. If its quick additions or changes, whats the big deal about not having an IDE for legacy code? And why call it legacy if you are not planning on refactoring?
Ok, plus I know that giving hints in comments allows IDE to properly autocomplete. (it doesn't solve the terrible performance problem-dont tell be about caching ;-).
True. It is like sequence with UML. We know it has various meaning in various langages. But in software programming, people have a common understanding. 
I'd rather make sure that any string I pass is filtered. If there's a bug in the PDO extension (which is unlikely, but you never know), then passing it without filtering would still be unsafe. That goes without saying, if there's also a bug in filter_var, then we have the same conundrum, but better safe than sorry.
I jumped ship on Aptana a year ago. The slow interface and general clunkiness didn't fit my workflow. Try looking further into Sublime. I use only a few plugins a frequently, but the ones that I do, I use constantly. Instead of using FTP, look into using a VCS to deploy, like Git. Another alternative to look into is Atom.
wow - awesome! have been waiting for something like this for a long time, thanks!
This is great. I've been using a my own 'colorizer' class for a while, but this definitely ads some much-needed utilities. I'm excited to hopefully be able to integrate this into all of my logging code.
Needs more GIF support. 
It's lacking a good design lead and UX lead. I think it does what 99% of people need it to but the interface and appearance need cleaning up. Shame there aren't more designers contributing to open source. 
+1 for the name
Agreed. Look out in the next release.
Ha, I made a program called CLIMate about 5 years ago. Looks like you've actually made something useful though...
Packagist has had a great WIP redesign suggestion for more than a year but the decision makers have avoided committing themselves. Packagest doesn't need designers, it needs a tyrant with spare time. Personally, I hope the money goes towards finally getting good security implemented. I would also like to see a non-PHP implementation but that's probably nowhere on the radar.
Nice, I was looking for something like that a few months ago. Definitely going to include this on the next project
It's better to use the gist that was created/maintained by uppfinnarn. https://gist.github.com/uppfinnarn/9956023
This is very nice. I would suggest a pretty json function, colors output by type. Node.js has a utility function that does it that I love. 
Something like this? https://github.com/joetannenbaum/climate#json
mind amending your post? there's also this now: http://karmainsecurity.com/KIS-2014-08 (CVE-2014-3990 / OpenCart &lt;= 1.5.6.4 (cart.php) PHP Object Injection Vulnerability) Note the github issue linked - [opencart/opencart#1534](https://github.com/opencart/opencart/issues/1534)
Yeah, my co-workers said absolutely the same words :) Honestly I don't see a reason for consistency of a coding style between different libraries, but that's probably a hippie in me, don't wanna argue at this :)
You are doing nothing bad. An Enum class for this would be way overkill. Just be sure to have only class constants that are, well, constants. Also, a thing some did not realize, you might have different collections of these at some points. It is quite easy to return different results for getVisibleStatusii, getAllStatusii, getSpecialStatusii Anything more complex than this, hit the DB. 
Well, I can't argue with "numbers". Especially with nothing concrete backing it up. I have no idea how your servers are configured, etc. do you know how to optimise it for production environments? What if any caching did you use? All that. Claims of benchmarks with neither numbers nor methodology can be dismissed out of hand. Secondly... You're comparing a full framework with micro frameworks and think the speed difference is surprising? An apples to oranges comparison, surely. Yes. Laravel will always be slower than a micro-framework. Which in turn will be slower than bespoke php code, etc. 
And we will keep telling you to shut up and that we don't care. You act like you're the last line of defence. But you just come across as children whining until you get your way. 
That's a start, but I'm talking about coloring keys and values differently which makes reading through a large amount much easier. When I'm back at a pc, I'll get you a screenshots. 
The name looked familiar to me too. Did some googling and found out why; it seems like someone got there way before both of you... http://i.imgur.com/amRJ5gz.jpg \^\^ CLIMate on the Amiga :) 
Ah, gotcha. missed the "colors output by type" bit. Thanks for the suggestion!
Excited to integrate this into my new CLI application
Am I too late? I'm trying to allow users to log in to my site using Steam. So I download openid, copy some code that is supposed to work, and BOOM I get a 406 error after logging in through steam. I've seriously spent so long looking for a solution to a 406 error and one of the more popular solutions was to disable mod_security. I don't really know what mod_security is but I tried it anyway but disabling it didn't fix the issue. It turns out (after I called support for my web hosting) that they don't allow me to disable mod_security.... So, does anyone have any clue how to fix this issue? On the surface, it LOOKS like just a bunch of variables are being passed through _GET but even when I copy/paste the link that throws the 406 error it. edit: If I comment out the verify code it STILL gives me this error... I'm not sure what is going on behind the scenes here.
I actually do both. /controllers /users /forums /tasks /views /users /forums /tasks etc. Some class types only have one level deep if there's only ever one file for each type (like, say, /models might have User.php, Forum.php, Post.php, etc) but even then, I tend to divide them up. I rarely ever go more than 2 levels deep, though, unless I have a good reason for doing so. It also helps with file switching in Sublime Text. I can hit CMD+T and then type "view user" and it'll bring up my user views or I could type "cont forum" and bring up the forum controller pretty quickly. Sort of pseudo name-spacing...
Excuse me but I was wondering: how do you compare with [`Hoa\Console`](https://github.com/hoaproject/Console)?
Okay, I won't. Nonetheless it'll be counter productive not to use caching, especially if you unique goal is performance :).
Laravel and Symfony are doing a lot more "stuff" so it is hardly surprising. Laravel is built on the Symfony core so it's hardly surprising. The emphasis is on developer productivity and not outright performance. The reason for this is that performance is comparatively cheap compared to the cost of paying developers. If you can improve developer productivity you save the cost of infrastructure many times over. In terms of scale, there's a really good presentation from one of the tech guys at Youporn talking about how they got symfony to scale to hundreds of millions of requests per day so it is entirely possible to engineer a stack that will coax even the least performant framework to that level. The advantage is developer productivity, maintainability and ease of development. Of course you have to trade that off against something and in this case you trade it off against raw performance.
Yes, I get that you have a position to defend. But continuing to insist that "we like it this way" does not make the position you are defending any less wrong.
So you define 'heavy' as slowness that cannot be worked around? Just like that? I was assuming both heavy and slow has similar potential to be refactored to make it lighter and faster...
So you choose to be Humpty Dumpty: http://quotes.dictionary.com/When_I_use_a_word_Humpty_Dumpty_said &gt; “When I use a word,” Humpty Dumpty said, in a rather scornful tone, “it means just what I choose it to mean — neither more nor less.” “The question is,” said Alice, “whether you can make words mean so many different things.” “The question is,” said Humpty Dumpty, “which is to be master — that’s all.”
I choose to not care about trivial things, such as how is named that particular feature. But if that makes you happy, I can be Humpty Dumpty.
This function: http://nodejs.org/api/util.html#util_util_inspect_object_options Also, its ability to stop at a certain depth and just show [Object] or [Array] is very useful. Googled up a screenshot https://raw.githubusercontent.com/digilord/color-util-logs/master/images/inspect.png 
Anywhere we can see this WIP redesign to leave feedback and/or promote it and such?
Old PHP quirkiness. Because PHP couldn't reference methods directly (no `$method = Test::__`), so the syntax chosen was `array($object, $method)` See http://ca2.php.net/manual/en/language.types.callable.php
This is related to how [callbacks](http://php.net/manual/en/language.types.callable.php) work. &gt; A method of an instantiated object is passed as an array containing an object at index 0 and the method name at index 1. Because of this, **$__** is treated as a callable function, thus allowing you to call the variable as a function much like you would in this code: &lt;?php $__ = function($word){ echo $word; } $__('Translate me'); There is also an example of this feature in the [is_callable()](http://us2.php.net/is_callable). Now, I believe the reason why your code that directly calls against an array is because of how PHP parses the syntax currently. It is treated as an array until it is given to something internally that realizes that it can be treated as callable. I'm about positive that this would be possible once an [AST](https://wiki.php.net/rfc/abstract_syntax_tree) is introduced into the run-time.
 array(new Test,'__')('Translate me'); //=&gt;Parse error: syntax error, unexpected '(' hope this will change when [uniform syntax](https://wiki.php.net/rfc/uniform_variable_syntax) (or [AST](https://wiki.php.net/rfc/abstract_syntax_tree)) is implemented
Sure it's possible. Make your own plugin
406 can be because your server is expecting a request of one type, like GET and in that particular context only accepts a PUT or POST. 
If you're using Composer (as you should!), you're automatically getting option number 2. ;-)
https://github.com/composer/packagist/pull/331
The TechEmpower benchmarks seem to agree with you, /u/inducido: http://www.techempower.com/benchmarks/#section=data-r9&amp;hw=peak&amp;test=json&amp;l=sg EDIT: As a side note, Symfony has *always* been comparatively slower than others, both v1 and v2, their claims about performance notwithstanding. The fact that some sites have been able to "make it scale" is nice, but then, consider how much less work might have been needed to "make it scale" with a comparatively faster system.
By then we'll have scalar typehinting 
For my tastes, it's 'vertical' with sub-directories: Users /Controller /View Forums /Controller /View etc. This is how Symfony does things and it makes a lot of sense to me. They use Bundles and that means everything related to something like Forums is in one directory, including the exact details on how to integrate with the framework like routes and services. That means if you write a forums bundle, you can reuse the forums without any hassle in any project you make using the same framework. With the other directory structure, reusing the "Forum" classes would require picking them out of all the different directories and would be a complete pain to maintain over separate projects. They become mixed in with a bunch of classes that they're not dependant on.
Off topic, but an interesting conversation... It Depends on what you are happy trading I guess. The selection of framework X over Y usually doesn't come down to performance alone. You might select symfony in spite if it's bad performance because you believe the reduced development costs offset the cost of infrastructure. What really matters is that you can make it scale, and that the cost of scaling doesn't exceed the savings on opportunity costs that you get for selecting a particular tool. 
&gt; The selection of framework X over Y usually doesn't come down to performance alone. Totally agreed, and I'll go even further than that. I assert that purely technical considerations are generally the last of most developers' selection criteria. Instead, they have a "way of working" or "tribal affiliation" that drives their choices, although they will not generally describe their reasoning in such terms. (I have to fight this tendency in myself as well.) 
Do you mean *to* or *from* Gmail? In either case, the issue is probably not with the HTML or PHP code but probably with the way that your mail transfer agent is configured or set up. 
&gt; especially with ionCube-encoded files I would say the answer to that question is no.
You are right. Tribal affiliation is certainly one of the considerations that one might take into account when selecting a tool. I don't think that this is necessarily an invalid consideration - we are social animals and we are likely drawn to particular tribes naturally. We are also lazy and tend to have a knee-jerk reaction to learning new things. These are tendencies we (almost) all have. Further, businesses like to gravitate to a particular set of solutions known to it as it is seen to reduce risk (the opposite might in fact be true). Therefore a Symfony shop is going to attract people in the Symfony tribe, so selecting the Symfony framework for a particular job makes good business sense because you can leverage existing talent. From a business point of view it comes down to what costs less and in all the costings I have ever done it seems to turn out that infrastructure is cheaper than people. Leveraging existing knowledge, having a framework which handles a lot of the common problems and boilerplate, being able to turn to the knowledge of the "tribe" all add up to a lower development cost... at the obvious expense of having to pay for more infrastructure (and given that in this age of elastic cloud computing, you rarely need to pay for an ops team to manage that infrastructure so scale swings well and truly in favor of picking the thing that gets your product done the fastest/with the least ongoing maintenance cost/with the greatest employee engagement).
Uh yeah, not a dereference. They called it an "indirect method call through array" https://bugs.php.net/bug.php?id=47160
Question #12 on that security quiz seems strange to me: &gt;You use a 104-bit, cryptographically strong, random number (hexadecimal encoded, for example) as your password on a web site which stores passwords as plain MD5 hashes: md5(password). Is it safe to assume your password will be safe if the user database leaks? 104 bits? [Edit] Aww I only got two points.
Care to explain the get paid part a little? Are you saying sell your code snippets?
Oh of course there are such things are wrong decisions :) half of us wouldn't have jobs if there wasn't such a thing. And you can start off with all the best intentions. Lets say you and I decide to write an app together and we conclude (socially/technically/best business sense/best potential maintainability) that we're going to use Laravel... and then we write an abomination that tightly couples us to that selection which reduces our ability to adapt away from it.. The decision is probably still right but doesn't account for shitty developers writing shitty code. Further, if the business doesn't want to move to something more modern because it perceives the devil it knows as the lowest risk the problem is going to be compounded because applications are going to be born as legacy programs (A real thing I've seen happen all too many times. Greenfield opportunity lumbered with 10 years of baggage due to a fear of changing their favorite tooling). It's a hard problem to solve and it probably can't actually be solved entirely but I'll stand by my original assertion. Performance isn't where you are necessarily going to save money. The people side is where you save it. If I offer a business a set of tools which could be used to reduce development and maintenance costs, it isn't the fault of the tool if said business decides to employ sub par developers (which is a false economy). Super interesting topic actually - more so than the correct or incorrect usage of a word. Would love to see some smarter people than me explore it further.
Thanks, I'll check these out.
i see that you are setting the from address as the email that was entered on the form... Alot of the major email providers just implemented or started enforcing a policy called DMARC.. this could be your problem as i had issues with it on my system a few months ago... the only solution i could find was to set the from address as some no-reply@domain.com type address on your domain and let the reply to: header handle the actual email address.
Won't work with ioncube files. We've been using HHVM 3.1 on Debian 7 in production for a few months on a system built on Laravel and to be honest haven't noticed a real difference.
Took me forever to find the link to their repo: https://github.com/Sylius/Sylius Should have just Googled it.
As someone who has yet to dive into a more advanced framework apart from my own or CodeIgniter, I'm leaning more and more towards Symfony. This feature looks pretty cool and serves a nice purpose!
The two month delay is crazy, and the initial offhand rejection is clearly in the wrong, but the final decision makes complete sense to me. I can certainly fault their CS in this case, but not their verdict.
Tell us about your server and your MTA. The most common problem I have seen is people having more than one active at a time. Try stopping both postfix and sendmail (if ubuntu) and then start one of them and see if it works. 
There are certainly a lot of other IDEs available, so I don't see why phpStorm refusing to issue an open-source license hurts the project. Just to name a few other IDEs: - [Zend Studio](http://www.zend.com/en/products/studio#overview): Free open-source licenses available (requires 2500 stars on GitHub). - [Aptana](http://www.aptana.com/): Free - [NetBeans](https://netbeans.org/features/php/): Free - [CodeLobster](http://www.codelobster.com/): Free While the customer-service interaction with phpStorm does leave much to be desired, their final decision makes sense. They are looking to support open-source projects/parts which can be used by the community, rather than a project that has a pretty specific use-case. 
Just thought i'd mention that an LLC is always for-profit. Just saying its not doesn't make it so. You have to get a non-profit status to be considered so, and this is what they are talking about. Its also worth noting that comparing your project to PHP itself isn't really that fair, due to the popularity of PHP. And i totally get their second response. The reason they grant open source licenses is to better the open source community from the projects that come from it. In no way does your project better the open source community. This being said, it is too bad that you are not able to get the commercial license. Also, you can still use a Personal license, check out the license docs: http://www.jetbrains.com/phpstorm/buy/license-matrix.jsp
Not sure how to answer this... Just running HTML template off of an ftp server from a domain/host called dreamhost. My email is from my the same host. Probably not helpful, but this should be easier. I know nothing about php and just want to get it figured out.
HHVM really shines in concurrent connections. Aren't really going to notice much of a difference just by loading a page.
&gt; more so than the correct or incorrect usage of a word I agree it's more interesting, especially since it would be so easy to use the word "Facade" correctly in a software context.
I don't know, I've been using their software for years, and when we first adopted it we talked about how we could get it free via the open source thing. It seemed pretty clear that you'd need to be a legit, contributing member of the OSS community to qualify. I get that you're upset, and the reported customer service is horrid, but you're fighting the wrong battle.
Aptana has become unusably slow. It all has to do with the whole PHP Indexing issue that the developers have no interest in addressing. I plan on moving to something else myself when I get around to putting together a document of all connection credentials I have. I'll be damned if I remember what those passwords are.
We're still in development, but we've been running it via forge for a few months. Seems pretty unstable, honestly. We have to restart the server every few days, and didn't have the problem before switching. 
Then try to contact the customer support and ask them about the mail server.
You're asserting that JetBrains (or any person here) represents or speaks for the entire open source community. That's a little childish. Just pay for the product. It's a fine piece of software.
If the shift back would be so onerous (and I'm not discounting the cost of changing development environments), then that's a good reason to just buy the software. It's well worth it, as you should agree being that you're interested in continuing to use it after your extended "free trial."
So much easier just to pay the $99 and be done with it. Really, it pays for itself.
A working example of the ADR pattern from /u/pmjones is at http://github.com/cocoframework/Cocoframework.Example . If anyone interested have a look into it :) .
It's not the only option you have though. There are plenty of other editors you could use, some of which *do* cost nothing. Personally I see a good editor/IDE as a tool that I'll pay for because it's not like my use of it starts and stops with one project. As a developer, I have an appreciation for the time and effort it takes to build these tools. I don't just see payment as compensating the author(s) for their time, I see it as professional courtesy.
I can certainly see the time period being frustrating as well as some of the wording but I really cannot blame them too much for the decision. 1. It is a for-profit entity trying to render a service to those who give to the community. 1. While you are correct that the stated rules does not distinguish what kind of open-source, I would argue (and you are free to disagree) that it is intuitive that this benefit is intended to apply to things like libraries, frameworks, languages, etc. much like the [Stripe Open Source Retreat](https://stripe.com/blog/stripe-open-source-retreat), or things that are good for the *developer* community. 1. Your post's wording is phrased in such a manner that JetBrains is standing in the way of the development of your site. As others have elaborated, there are plenty of free IDEs and text editors. Switching is annoying but scarcely a huge productivity decrease (unless you're switching to something like emacs or vim.) 1. In addition, if you find a tool so useful and essential to your development toolchain as you purport phpStorm to be, I find it hardly unreasonable for you to consider finding the money for a license. My suggestion would be to just buy it.
&gt; Free open-source licenses available (requires 2500 stars on GitHub). 2500 stars disqualifies approximately 99.99% of all PHP open source projects on Github. Hell, even /u/nikic's terrific PHP Parser library has half that.
$99 would also pay for you to use the project for your own personal stuff, and assuming you use it for a job, it WOULD pay for itself. I can't imagine their margins on PHPStorm are very good, as it is....
Funny, just yesterday I was looking at how I could provide a better UX for my CLI tasks. Looks like I've just found my solution.
I'm not impressed. Yes, it can be much faster in certain contexts after you've warmed it up, but the memory usage seems to be wonky. I recently tested a script that generates a huge amount of data (and took several hours to do it) and HHVM's memory usage just climbed and climbed until it ran out of RAM, well over 8 GBs, when the script runs without complaint on PHP 5.5 utilizing just under 700 MB of RAM.
I've looked at the Bitbucket page and some of the source, and in the context of their justification - I completely agree. I don't see how it can be reused. I contribute a lot of open-source components and I have a commercial license, because I also use it for commercial work. Just pony up and get a license.
Oh, such a Martyr you are. The fact that your organization isn't making money doesn't entitle you to free tools. You can build fences for your neighbors for free, still need to buy your hammer. I don't think any of us are "angry." That's you projecting. Writing us off as "typical redditors" is just petulant. Why even have the OSS policy? The point of that is to provide quality tools to developers who work towards improving the OSS community as a whole. I visited your site. The pony part didn't have any link (none obvious, at least) to any OSS repo. The bitbucket page smacked of "hey, let's make this repo public and then we can get some free software." And now you're just pissed that we won't blindly support your impotent rage. Being part of "the PHP development community" doesn't mean what you apparently want it to mean. We did offer support and agreement that the CS aspect of your interaction was bad. That isn't the part you cared about, however.
I see that you are using filezilla for ftp. FYI: I don't know if they have changed right now, but at the time I used it they also stored passwords in plain text. Thousands of servers where hacked. The only answer that the developers of filezilla had was "duh, you have to keep your passwords secure, not us". So, beware.
I am already using symfony console, for some console tools I made. I am not sure if using something like this would make sense, as symfony console offer similar features related to output already, along with the rest of cli application framework. What do you think?
Thanks for the answer! Well... I think that right now I'll try PhpStorm, it's very simmilar to Aptana and has a lot of interesting additions. Also, I don't mind to pay for a program if it works fine, because I'm going to use it every day. About the VCS solution, right now it's not an option for me, I have only ftp access to most servers, also I work almost every day in three different computers (too long to explain XD) so not having all my code in a ftp server will only be a nuissance for me. In the past I have tried textmate and textmate 2 and also didn't liked them (used them for over two months, never liked them), sublime it's very simmilar, so I think it's normal that I'm not comfortable with this kind of IDEs, I'll try it more, but I don't have any hopes on that. About the plugins, which do you use for Php? I have seen like tons, downloaded a lot, but most of them didn't work at all (or didn't knew how to make them work, the ones that I managed to use weren't very user friendly).
Well, if you want to switch back to the 3.4.2 version, a lot more fast and a lot less buggy, I have managed to get the download urls and posted them at their stackexchange discussion group.
Wow, Hoa\Console looks incredible! Although it looks as though it is solving a different problem to CLImate. Hoa\Console appears to provide tools for interacting with the console such as cursor position manipulation, mouse input and impressive looking readline. CLImate looks as though its a more basic version of the [Symfony console component] (http://symfony.com/doc/current/components/console/introduction.html) in that it provides easy to use helpers for creating progress bars, tables, user input and colorization of the console output. In my opinion Symfony console components are more well rounded and I wont be swapping them out for CLImate; the Symfony components just have more to give right now.
About using GIT, as I have said in another answer, not an option, also, I think it's an additional step to the way I develop that will only waste time for me. If I want a CVS in a project, I'll add the git in the server and use it there. But you have given me an idea, I'll try to make ftp directories in my computer (if that's possible, I think that should be) and use my code as if it was local in my IDE.
Interesting, on the other hand I had a migration script that would take hours and hit the memory limit (4 Gb) with PHP 5.5, and with HHVM it would take like 15 minutes and have a very lower memory consumption. I find HHVM giving its best improvements with CLI scripts (long ones of course).
https://groups.drupal.org/behat https://www.drupal.org/project/drupalextension We'll soon start migrating our SaaS to D8 and will then use BDD extensively.
What is this code doing... namespace { from('Hoa') /** * \Hoa\Console */ -&gt; import('Console.~'); } 
Are you aware of this bridge (and a bundle) that includes `Hoa\Console` inside Symfony: [`Hoathis\SymfonyConsoleBridge`](https://github.com/hoaproject/Contributions-Symfony-ConsoleBridge), miam? You should take a look at this ;-). I understand that `Hoa\Console` is low-level while CLImate is high-level. Maybe there is a possible contribution here? Is someone interested to see a better support of terminal capabilities in CLImate?
You should take a look [at this](https://github.com/hoaproject/Console#cursor) :-), and my [recent comment on this thread](http://www.reddit.com/r/PHP/comments/2en5wk/climate_your_new_best_bud_when_running_php_from/ck1pvl7).
When you bring up a context menu and it appears on a different monitor. Usually the TV. Also turning debugging on/off is really slow. Often the button will disable itself when I move my cursor near it when I go to toggle it.
Thanks - huge comment ;-) 
What exactly are you trying to protect against? I don't think filter_var will protect against SQL injection, all you are doing here is destroying user input.
Oh okay, guess I misunderstood your point. Sure, if you need exact text match on a field very regularly, I guess it would help. Problem is it's quite easy to get clashes, especially with md5 - one time I got several clashes within 30,000 records. Once your hash is long enough to avoid clashes, you may as well use the original string again...
How about Packagist as a service where you can put together your own trusted repositories of packages. I'd pay for that. 
I have a couple of libraries whose tests pass with HHVM. For the other ones, HHVM just gives a "segmentation fault" and I have no idea why.
Ahhh, I remember when I was young and full of hope.
There'll be a BDD sprint at DrupalCon Amsterdam too: https://groups.drupal.org/node/440038
OTOH from JetBrains' perspective it's simply not worth the time and effort to add CI support when they know that (almost) no new projects will be written in it!
I do it something like this, but I would break it down into "modules" as well if the project requires it /src /Domain /Entity /Repository (interfaces) /Service (interfaces) /Infrastructure /Storage (repository/service implementations) /MongoDB /Redis /Web /UI /Controller /Resources/View /Service (Restful Service) /Controller /Resources/View
this looks cool.
Yes. My opinion is that Symfony is taking the whole PHP world in the wrong direction. Regarding Laravel, actually noone knows that the best version was V3. ;-) Same code (json controller), same machine, Physical server with PHP v5.4 &amp; APC &gt; Laravel3-&gt;146 req/s &gt; Laravel4-&gt;22 req/s (WTF?) I think it does matter. 
Well, if you lack the imagination to put that in perspective...
&gt; The selection of framework X over Y usually doesn't come down to performance alone. I agree with you too (like @pmjone). But it does matter if you're serious about it. &gt; You might select symfony in spite if it's bad performance because you believe the reduced development costs offset the cost of infrastructure. I am questioning this argument, because without the existing numerous tutorials, I don't think it is by essence easier to learn. In fact Is it quite the opposite: What is easier to learn? Symfony has a codebase of 3862 files and 252174 loc (lines of code) vs 31 files 6463 loc (fatfree) or 22 files 2630 loc (slim)? 
I agree: I saw quite often people choosing Cake or Symfony juste because they've told it was good or "made for large projects" (!) - So it is social decision more than scientific decision. And people are lazy, they don't make the effort to see for themselves. Which is crazy if there is a long development investment at stake. anyway techempower is among the best sources apparently regarding raw performance. 
Some security related highlights: **OpenSSL** * Encrypted stream wrappers now disable TLS compression by default * Peer certificates now verified by default in client socket operations * And many more **Mcrypt** * No longer allow invalid key sizes, invalid IV sizes or missing required IV in mcrypt_encrypt, mcrypt_decrypt and the deprecated mode functions. * Use /dev/urandom as the default source for mcrypt_create_iv()
&gt; Super interesting topic actually You right! &gt; ...applications are going to be born as legacy programs 1rst motivation for promotion of Framework usage was to avoid building what would become legacy programs. People always forget that when you choose a framework, you choose a version, and your app is tightly attached to it. So it always become legacy. Anyway, it is better than nothing ;-)
**EDIT:** Turns out, encryption alone isn't enough ([here's why](http://www.reddit.com/r/PHP/comments/2eprsk/spl_arrayobjectsplobjectstorage_unserialization/ck1wrnw)). Original comment below. But if you have to use cookies, at least make sure the value is either *encrypted* or *signed*. For example, if you want to store "foobar" in a cookie, you could instead store: {"val": "foobar", "sig":"8g76df8g6dfg87"} and when you read the cookie, make sure signature matches the one you calculate. Or you can simply use two-way encryption and avoid exposing the value at all. Note that either method will further consume the already-limited space in a cookie, so do not try to store something big like huge serialized objects.
&gt; No longer allow invalid key sizes, invalid IV sizes or missing required IV in mcrypt_encrypt, mcrypt_decrypt and the deprecated mode functions. Finally. This will force people to actually learn about the various modes and key sizes.
I applaud your research and reporting. Thank you!
Before entering the controller, Symfony loaded **283 files with 6 levels of indirection**. Slim in comparison loaded 18 files. FatFree has 3 levels of indirection &amp; 18 files loaded. And still your app did nothing useful! Scalibilty have a cost, direct &amp; indirect. a general principal is that your trouble would increase with the numbers of machine you have to manage. if you need twice the cloud VM, it has a direct cost. concurrency &amp; caching &amp; database &amp; monitoring &amp; failover are the indirect costs I watched that presentation from the Youporn guy: Yes, if you have quite "static content", you can cache a lot. So it is more a presentation about caching than about symfony. 
Here is the secret: all PHP frameworks suck. Of course the suck at various degrees. But that's not even all that important. If you **have to** us a framework, then the question, which actually matters is: &gt; Which framework is the best suited for the application ? If you hear someone saying *"I use framework X for everything!"*, you can simply ignore them for the clueless fanboys that they are. 
True, but isn't a VCS important for deployment?
Hi, you right, without details about methodology any benchmark numbers should be avoided. So I will spend 1 hour of my spare time to share my own results very soon. FYI it was on my production machines (Debian), PHP5.3 &amp; PHP 5.4 each with APC activated (I have also numbers on Amazon VMs and on my laptop). All my tests was using 'ab -n 10000 -c 5 ' &amp; several times. @pmjones gave a link to techempower benchmark, which gives similar results. 
I've always found this maddening. Its hyper convenient for when I need to change computers. But convenience should not win out over security. FTP in general is a pretty poor way to interact with a server as a developer.
Most PHP (or any server side language) plugins for Sublime are going to take some configuration either in Sublime or by installing required components to your computer. Its very unintuitive at first, but is completely necessary. I don't want my editor installing libraries on my computer, I want to install them myself. Some useful plugins: * [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter3) - The goto linter for Sublime * [SublimeLinter - PHP CodeSniffer](https://github.com/benmatselby/sublime-phpcs) - standards and errors sniffer * [SublimeLinter - PHP Mess Detector](https://sublime.wbond.net/packages/SublimeLinter-phpmd) - complexity and mess detector * [DockBlockr](https://github.com/spadgos/sublime-jsdocs) - Super easy to use documentation tool * [PHPUnit completions](https://github.com/tkowalewski/phpunit-sublime-completions) - Completions for PHPUnit * [Xdebug Client](https://sublime.wbond.net/packages/Xdebug%20Client) - Used for setting breakpoints and debugging with xdebug One question I've always had is why do people use IDEs?
Signing cookies is a possible solution. However: Make sure that you implement the signature correctly. Concatenating with a secret and running md5 over it is not signing. Use the `hash_hmac` function for this. Also, it should be pointed out that it's **not** "encrypted or signed". The "encrypted" part is optional, but the "signed" is a must, even if you use encryption. And if you're going to sign, then I would also recommend to simply prepend the signature before the payload instead of creating a JSON wrapper around everything, as you suggest. Minimize attack surface. Avoid running into any issues when someone submits an array as the signature, or something like that. (That's a general rule: Validating the signature should always be the very first step, before any decoding is done.)
nice. But it wil not drive me to use that bloatware.
&gt; Finally. This will force people to actually read about the various modes and key sizes. And they'll still pick ECB :-P
The error messages are even nice to you and tell you which sizes are allowed for the used cipher :)
Yeah but why 104 bits? That seems like such a strange amount when everything in computers is a power of 2. Also I don't understand #16, to me it says that a userland implementation is worse than a native implementation because it's less efficient but it doesn't give a reason to why that's a problem. Maybe I'm too dumb to understand encryption.
&gt; No longer allow invalid key sizes, invalid IV sizes or missing required IV in mcrypt_encrypt, mcrypt_decrypt and the deprecated mode functions. FUK
&gt;Then it checks all the known vulnerabilities for the specific dependencies and versions that your project is using... how?
Stupid question: what's GA stand for in the tag description: https://github.com/php/php-src/releases/tag/php-5.6.0 
[General Availability](http://en.wikipedia.org/wiki/Software_release_life_cycle#General_availability_.28GA.29)
thanks for a quick reply
Well, sadly there is no way to enforce otherwise :) **EDIT:** If anyone stumbles upon this and doesn't know why ECB is bad, read [this](https://pthree.org/2012/02/17/ecb-vs-cbc-encryption/) for a simple explanation.
&gt;&gt; Internally, this command uses the SensioLabs Security Advisories Checker and the public database of vulnerabilities for PHP projects and libraries. Both services are open to the whole PHP community, and we encourage you to contribute security advisories for your own projects. 
You **always** need to authenticate encryption. Otherwise you cannot detect modifications that an attacker makes to the cookie. Imagine you sent a cookie consisting of: userid:14 You then encrypt that using AES. 23dhjfowo4igha34w98golg The attacker then starts flipping random bits, and trying the cookie. Perhaps from a botnet (so it comes from a ton of IP addresses). Eventually, the attacker finds one that decrypts to `userid:15`. And boom, the attacker can log in as user 15... Authenticating the encryption removes that possibility (or more precisely, makes it staggeringly more difficult). Check out [authenticated encryption](http://en.wikipedia.org/wiki/Authenticated_encryption).
Because, depending on the used block cipher mode, changes to the IV or the encrypted blocks will propagate in some predictable manner. The most obvious example is CTR encryption, where the block cipher is only used to generate the keystream. Given a byte `c` in the encryption, if you perform a modification `c' = c ^ x`, then the resulting plaintext after encryption will also be modified to `p' = p ^ x`. If you can make an educated guess on the content of the encrypted plaintext, you can make meaningful modifications to it. Something similar can also be done with CBC, though the process is slightly more involved and you'll get some garbage blocks. Encryption only guarantees confidentiality - to ensure integrity and authenticity, a signature or some other method of authentication must be used. (Note: Actually an unauthenticated cipher may not even provide confidentiality, when taking chosen-ciphertext attacks into account.)
Great explanation, thanks!I'll update my original comment.
Your nick is fitting for what you just did.
What are you on about? 
Being inpatient can I just install this: https://github.com/php/php-src/archive/php-5.6.0.tar.gz Or might the 5.6.0 release made available on php.net be different?
I really want to learn php for making database driven websites
Write a query that loops through 100000 records and find the same ones using simple math operators (not sql functions). Do the same with php code and a simple select * from the mysql side. Which of those two is going to be faster?
Thanks. Not sure how I missed that..
You'll love this answer..... "**It depends.**" ....What's *best* is completely dependent upon what you're doing, trying to do, and working with.
Look at it the other way. You create an html form which submits data to your database. That form has checkboxs and if all are selected is equivalent to adding 300 rows to the database. Do you add them all one by one or do you json_encode an array and pass that array in your database in a single row? Wouldn't it be slower to add 300 rows and query through all of them everytime you want to know what was submited versus getting a single json array and loop it 300 times ?
So a simple select * is actually slower because of the time it takes to send the data to the php parser? Nice reply, haven't thought of that ! I was under the impression that database access from php is slow and that's the origin of my question.
Reducing interaction between PHP &amp; MySQL (or other DB) is *generally* the best option, but you can take that to an extreme by building queries that are overly complex and/or slow just to reduce interaction. What you may gain in a tiny performance increase you would likely lose in maintainability down the road as you or somebody else will have to spend more time than is necessary to work out what's going on. So like I said, "It depends." Now in your stated case, I'd probably create a single insert statement with multiple records' data.
&gt; Yeah but why 104 bits? That seems like such a strange amount when everything in computers is a power of 2. It is just a common and convenient way to express size (or strength). About #16, the userland implementation being less efficient means you can not stretch the password as much as you could with more efficient native PHP implementation. If you can use 30000 rounds with the userland code and you could use 38000 rounds on the same hardware with the native code (in a same amount of time), the attacker has to calculate 8000 rounds more per candidate password. Thus making the native implementation a little bit more secure (it means about 13 bits of added entropy to the passwords compared to the 30000 rounds used with userland code).
Run your own tests to mock your own use case. That way you get the fun of creating something to help you create a better something else.
Release tarballs include additional files (e.g. generated parser so you don't need bison to build it).
That looks slightly like a Yii-inspired nugget.
&gt; In my opinion Symfony console components are more well rounded and I wont be swapping them out for CLImate; the Symfony components just have more to give right now. I don't think it looks like a replacement to Symfony, more of an assistant.
Wow. Great minds think alike: [https://twitter.com/JT_Grimes/statuses/365140160729468929](https://twitter.com/JT_Grimes/statuses/365140160729468929) August 7, 2013
well... damn. I've honestly never seen that!
composer update = reddit time
*sigh*. You are comparing Slim, a framework which does very little, to Symfony, a framework which does a whole lot - and you are surprised/astonished that Symfony loads more files at startup. Yes, Scalability has a cost. No doubt. But the cost of scaling is chump change next to the cost of development and maintenance. That's not to say that Symfony instantly buys you maintainable software but it does put you on a solid footing. If all you need is what Slim offers, use Slim. That's fine. But using Slim and then inventing all your own code to make up the difference between what Slim offers and what a "full stack" framework offers should your project need it is going to cost orders of magnitude more than scaling. 
I just had to do the same thing, and PDFtk was a huge help (https://www.pdflabs.com/docs/pdftk-cli-examples/). Between PDFtk and dompdf the job was relatively simple.
I am sure I'm not the only here would love a breakdown of the deductive reasoning you use to conclude that Facebook is using complex code (and thereby implying simple queries) while Google is using complex queries (and thereby implying simple code).
Agreed.
So would you record encryption results in a database or something and make sure that the string in the cookie is one that you've made?
What the fuck? Why are they sponsoring Naderman instead of Seldaek who actually does the [bulk](https://github.com/composer/composer/graphs/contributors) of the [work](https://github.com/composer/composer/commits/master) on Composer?
Vagranting!
I have had loads of problems with `wkhtmltopdf`'s output when I last tried it about a year ago. Having said that, the project was not receiving any updates at that time. An alternative way to go from html to pdf is [phantomjs](http://phantomjs.org/) which resulted in better output for me.
As someone who was considering using composer, I now know not to! /sarcasm
Don't let that be the take-home message! Composer is one of the best things that happened to the PHP ecosystem in the past ten years.
Speed up Composer by at least 2-3 times by using HHVM http://vanderveer.be/speed-up-composer-by-using-hhvm-including-a-slowtimer-error-fix/
Why are you being downvoted? I'm legitimately curious as I've never tried using composer with hhvm.
Thumbs up for PHPStorm - just keeps getting better and better.
Is there a way to get Phantom to print *not* an image? When I was working with it, it was grabbing a screenshot of the page, resulting in mutli-MB PDFs (when generated otherwise was ~300K)
Loading a page with Symfony2 on Vagrant ... 
I've always been wondering about this myself. If someone knows why, I'd be glad to hear it
Worst case scenario: this scans the entire src directory to include ONE class.
Yeah, this is exactly why I'd never use compiled languages either - waste of bloody time that they are. /s
That looks like exactly what I was doing; I'll check it out tonight
Don't use shared folders! We use the new rsync (previously used a custom samba share) so files are native to the vagrant VM. I don't notice any lag
Since switching from virtualbox to VMware fusion I went from 2-5 seconds per page load down to 200-300ms. Likely due to how the files are shared. Another tip.. If you are running real time antivirus, disable it when you are working with your development vm.
I tried it but it was not working correctly with a Windows host IIRC. I think I also tried samba. I usually use automatic SFTP uploading in PhpStorm which is not always that great with the cache folder of Symfony as it's an asymmetric sync. 
is_readable() might work better. It can exist without being useful to you. You could of course use both and check permissions if you want your __autoload() to do that. 
I'm on windows, I use cygwin to get rsync if that helps. You should be able to ignore the cache folder with the auto ftp tho, right? Unrelated, but if you are lazy like me, install supervisord on the VM and let it run `assetic dump --watch` for you automatically without having to login to vagrant and run it or worry about running it locally and syncing the resultant files
This is somewhat a performance killer - having to scandir() on **each** __autoload() call. Why no just use the spl autoloader baked into PHP and use file paths/directories to hit the class to load directly? Much faster and zero searching required. https://github.com/magnetikonline/phpnsautoloader/blob/c9fd92e5f2164143129e4403611a633cc312e808/lib/bootstrap.php#L3-L5 Then it's just /namespace/namespace/class-name.php to your class. Perfect. Maybe you are reinventing the wheel here? 
Ya I use VMWare Workstation as well, it is really fast. Once a query is cached I'm at 100-120ms. First loads can be up to 800ms depending on how many uncached queries are run You should be able to tell your AV to ignore your code and VM folders, less hassle than disable/enable toggling (and forgetting). I guess theres a chance I download a virus via git/bower/composer/node with a malicious author or a repo that got hacked but seems small..
I do, I develop multi-project apps. 
Composer is really slow for a package manager. Apt, pip, npm and RubyGems are all way faster. I use them all regularly, and Composer is incredibly slow and clunky in comparison 
well, yeah compared to those... it is quite slow! but as far as php package managers... its the fastest (heh and only) either way, it's faster than the manual alternative.
The point stands: whether it's something stupid Composer is doing, or some inherent weakness of PHP, it's pretty bad. Just another reason I avoid PHP when I can nowadays. For a tool as critical as a package manager...it's quite pathetic that it sucks so much.
As of HHVM 3.2.0, released in late July, it accepted enough PHP code to be fully compatible with several of my corporation's sites and apps (passed 100% of unit tests with 80%+ coverage). I have found several bugs in it since, all edge cases, but the difference between how both myself and my bug reports are dealt with via HHVM's github system versus most bug trackers I've submitted to is night and day! My bugs are addressed within hours. I found an encryption-related security flaw on a Saturday evening and it was acknowledged by core devs within an hour, and patched within 3. It made it out in a release a short time later. Then, out of no where, I got contacted by Facebook Corp. and told that I qualified for a sizable (in my opinion) bug bounty. Additionally, I have found that the people in #hhvm on Freenode to be MOST knowledgeable and helpful! It's crazy compared to the vast majority of experiences I've had with other projects, like Mozilla and stuff. Pretty much in a league of their own as far as 1) treating people with respect, 2) *listening* to bug reports, and 3) prioritizing fixes. With some open source projects, I just learn to deal with the WONT_FIX bugs, fork my corp's version when I have to and apply one-off Pull Requests that get rejected, and basically just get used to the bug for the next 5+ years. With HHVM, I feel encouraged that even if I find something crazy, I'll probably be listened to, at the very least. And that means a lot to me.
Personal workflow: * Actively work in master unless the feature is a significant one/one that will change public-facing interfaces (even though I'm the only one using my projects right now--good practices are good practices). * Full unit-level automation tests via Travis CI and PHPUnit. * No QA, because it's all personal projects that I screw around with. Work workflow: * Feature branches that live less than a week (with rare exceptions). * Feature flags for large/high risk features (side benefit: slow rollout through A/B testing framework). * Unit/Integration testing done via Travis CI and PHPUnit, Acceptance testing done via Pytest and Bamboo (this part is getting replaced). * QE team signs off on every feature after working with devs to write unit/integration tests and writing most of the acceptance tests themselves. For my personal workflow, I wish I had a better way to set up integration/acceptance testing. However, it's not really an issue right now because if it's broken, it's my fault and I'm the only one who notices. For my work workflow, the tests we have are kind of a mess. We're working with a massive legacy codebase that has a lot of Not Invented Here syndrome and is full of global state all over the place. We have unit tests that don't actually test a single unit of work, we have integration tests that are reliant on the state of the system as a whole and feed through the entire system just to test one aspect of it, and we have acceptance tests that don't pass in *any* environment successfully every run. That's my main grief with it. The tools are (mostly) fine, I just need to educate the people on how to _properly_ use them. Oh, and I hate python. With a fiery passion.
For me, it's phpunit'ing.
Every benchmark posted in this subreddit for the last years show that PHP 5.5 is faster than 5.3 (with APC).
Then either attend our meetup or wait for the slides and video to get uploaded and it should be a start in the right direction for you. There is also tons of helpful online tutorials but we are here for questions/helping.
Sounds great in theory, and the implementation is minimal as it can be, but it would still result in a noticable performance hit when you are dealing with thousands of objects per request. Ideally, this should be fixed by introducing optional types and generics in the core.
run composer update -vvv and you will see.
Heaps of HTTP requests. A potential huge slowdown could be their dependency solver, although I haven't looked at that myself at all. It has the potential to be an extremely slow algorithm if you don't implement a few good optimizations, especially if implemented in PHP.
As with many things, it is there for flexibility. If you prefer, you can just use --severity and it will filter errors and warnings using the one value.
great!
We (Engine Yard) simply approached the project, they selected Nils as the person to do the work as Jordi is also busy with (the pretty damn cool) [Toran Proxy](https://toranproxy.com). :)
On top of all the other comments, your autoloader complies with neither the current [PSR-4 autoloader recommendation](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md) nor the older [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md). There are even [examples and meta information available for PSR-4](https://github.com/php-fig/fig-standards/tree/master/accepted). 
Yes I do wonder the same. They should have sponsored both of them at-least.
Same. Over 200,000 automated tests to run before committing any code to trunk.
Which framework? I used to use Vagrant religiously until I worked on a Symfony app with 15s page loads under VirtualBox, even with NFS.
I am not sure whether we are talking about DI here. If it is about dispatching then I am taking an example how Aura does. When your controller is a closure. use Aura\Dispatcher\Dispatcher; $dispatcher = new Dispatcher; $dispatcher-&gt;setObjectParam('controller'); $dispatcher-&gt;setObject('blog', function ($id) { return "Read blog entry $id"; }); $params = [ 'controller' =&gt; 'blog', 'id' =&gt; 88, ]; $result = $dispatcher-&gt;__invoke($params); echo $result; // Read blog entry 88 You can also use class as class Blog { public function read($id) { return "Read blog entry $id"; } } $dispatcher-&gt;setMethodParam('action'); $dispatcher-&gt;setObject('blog', new Blog); $params = [ 'controller' =&gt; 'blog', 'action' =&gt; 'read', 'id' =&gt; 88, ]; $result = $dispatcher-&gt;__invoke($params); echo $result; // Read blog entry 88 also the creation of Blog object can be wrapped in a closure, or anything. The dispatcher can dispatch recursively. Read the full documentation [refactoring to architecture changes](https://github.com/auraphp/Aura.Dispatcher#refactoring-to-architecture-changes)
Haha, I sent that XKCD comic around work when we started using composer with the subject "now we have a legitimate excuse for these plastic swords!"
Thank you for your suggestion, I'm not familiar with composer but I will look it up.
* [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/) * [PHPStorm](http://www.jetbrains.com/phpstorm/) * [Codeception](http://codeception.com) * [PHPCI](https://www.phptesting.org/) * [Composer](https://getcomposer.org)
I hope I understand your comment correctly. I need to loop through the contents of every directory because I want to add every directory to the array of directories. This way I will search every directory for the right file. As for spl_autoload, I'm not familiar with that, but I will start reading into that. Thank you for your suggestion.
Thank you for posting those links. I'm not familiar with the things you're talking about, so it'll be interesting to learn about it I think.
Yup. Gotta get those assertions made!
Rather than downvote you, I'll link you to a few articles explaining why you should use Composer. http://grossi.io/2013/why-you-should-use-composer-and-how-to-start-using-it/ http://culttt.com/2013/01/07/what-is-php-composer/ http://laravel.io/forum/02-09-2014-why-should-we-use-composer-does-it-matter-if-we-dont Of course you don't _have_ to use Composer, but I would definitely recommend it. At least get familiar with it, because more and more projects, frameworks, etc. are using it. It's a great and powerful tool, and saved me a lot of time. Composer really doesn't take _that_ long to do much.
Are you confusing HHVM and Hack?
No problem - at the very least you could cache your scandir() call on first use into an array/hash.
This is about dependency injection and not about any specific specific Dispatcher, Namespace, Library, or Aura :). It is about the instantiation of an object, for example, to create your Dispatcher it would be 'Dispatcher' =&gt; new Hydrator( 'Dispatcher', [ 'setObjectParam' =&gt; 'controller', 'setObject' =&gt; function($id) { return "Read blog entry $id"; } ] ), 
It's a different way of running the same thing, similar to Apache vs Nginx to serve HTML or using a new optimised c compiler to recompile your code. I don't think it's admitting defeat, it's just an optimised way to run the same code which they already have all the infrastructure and developers to create.
If they didn't build it with PHP, they might not have succeeded. When you do a startup, here's what matters (on the tech side) - Is your team efficient? - Can you fix bugs quickly - Can you create new features quickly Whether PHP is a good choice really depends on the first persons who created the app. If you're efficient in Python, it would make a lot of sense to do it in Python. FB and Wikipedia happened in PHP because, well, the first one were efficient with it, so they went with the language they were comfy with. Imagine saying "Alright, I know nothing of Scala, I only know PHP, but I'm going to start it cause I heard it scales well". This is a recipe for failure. You don't know the language well, you're going to get slowed down because you're learning at the same time. Common pitfalls that Scala engineers knows, you won't know. As for scaling, PHP takes a while until it becomes the bottleneck. With opcache and modern techniques (load balancing, aggressive cache), it should be fine for a very long time. Your database is going to be your bottleneck, for sure. When you hit millions of concurrent like FB and Wikipedia, then things get different. Something simple like `json_decode` might take too much time and will cause slowdown. That's when you start optimizing the language itself. In hindsight, now that I'm familiar with golang, I feel like I want to rewrite everything in it. lol.. 
I use win and mac, no nfs on win of course, but on the mac the combination (sorry I'm not sure if one is greater than the other) of buying VMWare and doing rsync makes it noticeably faster When I first tried Symfony2+Vagrant I thought no way in hell was I going to subject myself to those speeds, after upgrading I might as well be developing on wamp/mamp that I do not notice any delay from normal. Mac is a late 2013 i7 MBPr and Windows is also i7 
I run cache:clear from inside the vm instead of locally, same with migrations and assetic. I don't believe I've had an issue since I excluded the cache folder. Here is my ignore right now `rsync__exclude: ['.git/', '.idea/', '.vagrant/', 'app/cache', 'app/logs', 'app/data', 'web/css', 'web/js', 'web/bundles']` Are you using `vagrant rsync-auto`? I've not run into vagrant missing a file change yet.. but I wouldnt say my vagrant history has been 100% candy and unicorns so I believe ya if you've had problems ;)
Well said! Pick a tool (language) you like to use and don't waste your time pre-optimizing what doesnt need optimizing. I will use Rails on some projects simply because I know I can bang it out fast. Other times it's wordpress because that is really all they need. Long lasting (multiple years) highly customized internal project is a large Symfony2 codebase. I guess that could also be rails but all of our devs know PHP while only a few do rails. Servers are cheap while developer time is expensive. 
Something to be aware of: It doesn't solve everything though, I definitely get some weird edge cases where it doesn't work properly and have to fallback to a non hhvm version.
200,000 is a hell of a lot. How fast do those tests complete if you don't mind me asking?
Before we started running the suite with parallel threads, it would take over 30 minutes. Now, they run on a 8-core CPU in about 4-5 minutes.
There is no any significant changes.
And also, to be noted, Wikipedia worked without HHVM until a few months back. So, considering Wikipedia's traffic, PHP is not that bad.
Links to the documentation does not work yet. Edit: Now it is.
A python programmer will give you a prototype by the time a php programmer sets up composer.json and created his separate class files for each and every functionality...Single Responsibility bitches!! Oh and 100% test coverage is a must, because only god know when php decides to pull the rug from under your feet.. And good luck finding a good team of PHP developers in the sea of morons, quacks and wannabes...
Manual will rebuild in next 24 hours, so box saying that "PHP 5.6 is currently being tested" will dissapear. Temporarily you can look at http://docs.php.net/migration56
What would you define as significant? There's some pretty useful new features being added. Granted, there's not as much in the way of performance improvements as previous versions, but with PHP 7 development now under way, all focus will be on that and building on the already significant improvements introduced by phpng.
If I understand correctly you'd like to recreate [this page](http://www.reddit.com/user/came_on_my_own_face/liked), correct? If so you could do it in a day or so if you're focused, maybe a couple of days if you have no programming experience. Fairly straight forward task. Good luck!
Yes, pretty much. The eventual plan would be to build upon this so users could manually add submissions, or also incorporate pithy data sources (like Facebook likes) into a convinced feed. Thanks. If you don't mind me asking, would you be able to outline the first few steps you'd take to approach the problem? Or is it pretty much like the explanation in my OP?
This post belongs in /r/forhire.
I heard someone say recently: After you've optimized your db calls and your caching and it's php that's the bottleneck then congratulations, you're as big as facebook
True. But, coding standards will still likely be returning warnings that have a higher level than errors. Seems like the separate system is providing flexibility at the expense of logic &amp; usability. Warnings should always be less severe than errors.. let the user decide the minimum level to report. Anyhow, it sounds like I may be alone on this one.
I think the bundling of phpdbg with is by default is a pretty significant change.
This logo resembles me into a company who sells products for women (hair sprays/bleaches, shampoos, napkins...), not software (=
&gt; Stream wrappers now verify peer certificates and host names by default when using SSL/TLS. Python is getting (2.7.10) / gotten (3.4) its act together on this as well, awesome to see languages paying real attention to their default TLS apis being actually secure for their users.
I really like the new wider info table for phpinfo() (of course the only time I use that page is when i'm compiling... but still, it's nice)
Yay! And maybe I'll even get to use it in five years.
Yeah, there were a bunch of 5.6 specific doc updates so I triggered a manual rebuild instead of waiting for the friday weekly rebuild.
constant scalar values &amp; &gt; 2gb uploads...previously two major annoyances
I completely agree with this, and often say it to people myself. I suppose I just wanted affirmation! A supplementary question then would be, if Wikipedia were to rebuild from the ground up for some reason (a nuclear bomb wipes out their whole code base -- play the game), would they choose PHP again?
Firstly, be careful with your spelling. Your variable name is spelled differently between your code sample and your explanation. $sql_statemanet &lt; In code $sql_statement &lt; In explanation Also, the way you are building the query string will never work, you can't access Array Indexes in a double quoted string "This is a string with a $Array[index] but it doesn't work"; "This is a string with a $VariableString will work "; "This is a string with a " . $Array[index] . " will't work"; Although, to be neater, you might want to look at sprintf() - http://php.net/manual/en/function.sprintf.php 
Yes but now I hope we can bury 5.3 at last and make 5.4 the new "default" version for open source projects…
Same answer. It depends on the staff they have on hand. Since Wikipedia is PHP based, they hired PHP devs. If the code base goes boom, I really doubt they will fire the current devs and hire new ones. Most likely the current staff would be the best to rebuild it with a better architecture (Wikipedia was initially built in the old-php era). Or, you know, rebuild it in Hack, which would make a lot of sense. 
A few side notes: -Your code is prone to SQL injections -Don't use the mysql_ functions but the mysqli_ functions or better: PDO with prepared statements
There's a rogue curly brace after your $sql_statemanet variable definition. Is it that the $sql_statemanet is in a conditional block that is not actually being executed? Could you paste more of the code please?
I got so happy when I read that PHP 5.3 is not supported anymore. Then our sysadmin told me that Ubuntu and Debian are going to support it because of their LTS. But who knows... maybe our company will switch to PHP7 then.
what a coincidence... I am compiling right now as well!
There are a lot of niche goodies in this one. So far nobody has mentioned variadics and argument unpacking; these are so nice! Here's a quick, practical example using MySQLi to do a prepared statement for a variable-length IN clause: $ids = [1, 2, 3, 4, /*... or more */ ]; $in = join(',', array_fill(0, count($ids), '?')); $select = &lt;&lt;&lt;SQL SELECT * FROM galleries WHERE id IN ($in); SQL; $statement = $mysqli-&gt;prepare($select); $statement-&gt;bind_param(str_repeat('i', count($ids)), ...$ids); $statement-&gt;execute(); $result = $statement-&gt;get_result(); This is missing error checking for brevity; it needs to either set the db driver to throw exceptions or check each function for errors; it also needs to make sure there is at least one item in `$ids`.
This is the full code &lt;?php $hostname = "localhost"; $username = "goldme_owner"; $dbName = "goldme_dealer_meeting"; $connect = mysql_connect($hostname, $username); if (!$connect) { echo "Please try later."; } else { mysql_select_db($dbName, $connect); } echo "$_POST[confirm]"; if (isset($_POST['checkboxA1'], $_POST['checkboxE1'], $_POST['checkboxF1'], $_POST['checkboxG1'], $_POST['checkboxH1'], $_POST['checkboxI1'], $_POST['checkboxJ1'], $_POST['checkboxK1'] )){ //Post to Database Tables //Add Registration Data $sql_statement = "INSERT INTO 2014_registrations". "(confirm_number,timecode,company_name,country,address1,address2,city,state,zip, phone,fax,email,zone_manager,transport,first_name,last_name,tuesday_tours,tuesday_meat,wed_lunch,wed_dinner,wed_pool_tourney,thurs_lunch,thurs_dinner,fri_shop,fri_tour,dietary)". "VALUES ('$_POST[confirm]','$_POST[timecode]','$_POST[company_name]','$_POST[address]','$_POST[address2]','$_POST[city]','$_POST[state]','$_POST[zip]','$_POST[country]','$_POST[phone]','$_POST[fax]','$_POST[email]','$_POST[zonemanager]','$_POST[transport]','$_POST[fattendee1]','$_POST[lattendee1]','$_POST[checkboxA1]','$_POST[radio1]','$_POST[checkboxE1]','$_POST[checkboxF1]','$_POST[checkboxG1]','$_POST[checkboxH1]','$_POST[checkboxI1]','$_POST[checkboxJ1]','$_POST[checkboxK1]','$_POST[dietary1]')"; } $rec_insert = mysql_query($sql_statement); if(! $rec_insert ) { die('Could not enter data: ' . mysql_error()); } echo "Entered data successfully\n"; mysql_close($connect); ?&gt;
One of the POST variables is missing here if (isset($_POST['checkboxA1'], $_POST['checkboxE1'], $_POST['checkboxF1'], $_POST['checkboxG1'], $_POST['checkboxH1'], $_POST['checkboxI1'], $_POST['checkboxJ1'], $_POST['checkboxK1'] )){ I.e. one of those is not set. This would be a lot easier to see if you formatted your code properly.
As a DevOps Engineer I'm on other side of the spectrum of this joke: **Developer**: "Hey why isn't my latest commit up on the staging/production server?" **Me**: "Composer"
Awesome. We're building php 5.6 packages now.
I only set the isset posts to check for the check boxes because that's the only ones that may or may not get checked everything else will have a value from the user. As for formatting, it makes since to me. Order from top to bottom.
I don't think that's necessary. As long as the key that you're using for the MAC is strong enough (128 bit+, generated from a strong random number source), then the chances that someone can create a new piece of data that validates with your secret key is basically 0. If the key leaks, that's a problem. And if you use a weak key, that's a problem too. But otherwise, it's perfectly safe to rely on.
I built this same thing as a generic monad implementation: [the chain monad](https://github.com/ircmaxell/monad-php#maybe-monad)
5.5 Should be the default, 5.4 is about to go into security only fixes and will be EOL in a year, afaik.
I tweeted an example, earlier, of some of the badassery we can use now: https://twitter.com/trevorsuarez/status/505013305942241282 Imgur: http://i.imgur.com/xE5fYAP.png 
OK, so I'm trying to update my VPS in which I installed php 5.6 via the webtatic repo, so I run the following command: yum replace php55w --replace-with php56w --enablerepo=webtatic-testing And I'm getting the following. Is it ok to update? http://i.imgur.com/fNjrB7l.png
or mysqli with prepared statements.
Marketing question...
Exactly. Hopefully this sponsorship encourages others to do the same.
I'm well experienced so my advice is horrible, but this is a very simple app to make. Probably an afternoon's worth of work.
If you are using getter/setter for your attributes. It is way easier to maintain unittests. This way you can mock you getters and setters to do stuff you need during a unittest ~~and it is a much safer way to handle your incoming/outgoing values~~ &lt; mentioned in another comment tho ;)
&lt;?php $hostname = "localhost"; $username = "goldme_owner"; $dbName = "goldme_dealer_meeting"; $connect = mysql_connect($hostname, $username); if (!$connect) { echo "Please try later."; } else { mysql_select_db($dbName, $connect); } echo "$_POST[confirm]"; if (isset($_POST['checkboxA1'], $_POST['checkboxE1'], $_POST['checkboxF1'], $_POST['checkboxG1'], $_POST['checkboxH1'], $_POST['checkboxI1'], $_POST['checkboxJ1'], $_POST['checkboxK1'] )){ //Post to Database Tables //Add Registration Data $sql_statement = 'INSERT INTO 2014_registrations'. '(confirm_number,timecode,company_name,country,address1,address2,city,state,zip,phone,fax,email,zone_manager,transport,first_name,last_name,tuesday_tours,tuesday_meat,wed_lunch,wed_dinner,wed_pool_tourney,thurs_lunch,thurs_dinner,fri_shop,fri_tour,dietary)'. 'VALUES ("$_POST[confirm]","$_POST[timecode]","$_POST[company_name]","$_POST[address]","$_POST[address2]","$_POST[city]","$_POST[state]","$_POST[zip]","$_POST[country]","$_POST[phone]","$_POST[fax]","$_POST[email]","$_POST[zonemanager]","$_POST[transport]","$_POST[fattendee1]","$_POST[lattendee1]","$_POST[checkboxA1]","$_POST[radio1]","$_POST[checkboxE1]","$_POST[checkboxF1]","$_POST[checkboxG1]","$_POST[checkboxH1]","$_POST[checkboxI1]","$_POST[checkboxJ1]","$_POST[checkboxK1]","$_POST[dietary1]")'; } else { echo "Could not complete"; } $rec_insert = mysql_query($sql_statement); if(! $rec_insert ) { die('Could not enter data: ' . mysql_error()); } echo "Entered data successfully\n"; mysql_close($connect); ?&gt;
Using this updated code I found that the if isset function is failing, which is why it's not setting the var $sql_statement with the query. Any ideas on how to get the check boxes to pass some kind of value even if not selected. I've tried the following: &lt;input name="checkboxE1" value="No" type="hidden" /&gt; &lt;input name="checkboxE1" value="No" type="checkbox" /&gt; but that still doesn't seem to pass a no value to the $_POST. I'm pretty sure it's because of these checkboxes that is what's causing the problem. 
PhpStorm to me to date is the only thing I can call a professional php development tool. Smart code editor, integrated debugger, deployment, knows vagrant/composer, many many more things. And it had vim emulation sufficient enough for me :) Everything else I tried was always only the start of a chain of things I discovered I miss and needed yet another plugin and things never lived up to my expectations. I gave vim with gazillions of configurations, sublime with a few plugins and eclipse a try. It always ended in pain and waste of my time. PhpStorm ended being my "shut up and take my money" product. 
&gt;if PHP requires Hack to compete at scale, then why use PHP to begin with? What exactly is facebook competing with in terms of scale? Are you aware that PHP-NG benchmarks are around even, sometimes better than HHVM with pure PHP? If you didn't use PHP, what would you use? 
It totally works: http://3v4l.org/kjupO I agree that it is awful and should not be done this way, but it definitely does work
Composer is most definitely what you are looking for. Basically you just include a .JSON file in your project (this JSON can include info like which directory should be autoloaded) and it will generate a .php file which autoloads everything for you. The difference between how you do it and how composer does it is that it doesn't have to scan the directory every time the script is ran but instead only once (as it then generates a .php file that includes all of your classes). So basically all you then have to do is use `require('vendor/autoload.php');`. Just remember any time you create a new class file, that you have to rerun the console command to generate the autoload file. But this is far better than scanning the directory every time. If you need help on how to actually use composer to achieve what you need, feel free to reply.
Thanks for all your efforts. One step closer to releasing your killer server right? :)
More specifically, check out [Example #3](http://php.net/preg_replace#example-4916)
Thanks
If the backend API is not public (i.e is used only by the frontend application) you can use a self signed certificate for your backend api. If you have a lot of backend assets, you can take it a bit further and you can even set up your own private certificate authority for all internal stuff.
No just somebody who is wants to implement a more professional deployment workflow on my side projects, the one we have at work is ok, but its the only one I know so I'm looking for other's opinions.
Thanks for sharing. Still sounds a lot better than most places (and I hear you on the python part).
Ok, as others have pointed out, this code is extremely dangerous and should not be used in a production environment. I cleaned up your code a bit: &lt;?php $hostname = "localhost"; $username = "goldme_owner"; $dbName = "goldme_dealer_meeting"; $connect = mysql_connect($hostname, $username); if (!$connect) { echo "Please try later."; } else { mysql_select_db($dbName, $connect); } echo "$_POST[confirm]"; if (isset( $_POST['checkboxA1'], $_POST['checkboxE1'], $_POST['checkboxF1'], $_POST['checkboxG1'], $_POST['checkboxH1'], $_POST['checkboxI1'], $_POST['checkboxJ1'], $_POST['checkboxK1'] )){ //Post to Database Tables //Add Registration Data $sql_statement = 'INSERT INTO 2014_registrations'. '(confirm_number,timecode,company_name,country,address1,address2,city'. ',state,zip,phone,fax,email,zone_manager,transport,first_name,'. 'last_name,tuesday_tours,tuesday_meat,wed_lunch,wed_dinner,'. 'wed_pool_tourney,thurs_lunch,thurs_dinner,fri_shop,fri_tour,dietary)'. 'VALUES ("$_POST[confirm]","$_POST[timecode]","$_POST[company_name]",'. '"$_POST[address]","$_POST[address2]","$_POST[city]","$_POST[state]",'. '"$_POST[zip]","$_POST[country]","$_POST[phone]","$_POST[fax]",'. '"$_POST[email]","$_POST[zonemanager]","$_POST[transport]",'. '"$_POST[fattendee1]","$_POST[lattendee1]","$_POST[checkboxA1]",'. '"$_POST[radio1]","$_POST[checkboxE1]","$_POST[checkboxF1]",'. '"$_POST[checkboxG1]","$_POST[checkboxH1]","$_POST[checkboxI1]",'. '"$_POST[checkboxJ1]","$_POST[checkboxK1]","$_POST[dietary1]")'; } else { echo "Could not complete"; } $rec_insert = mysql_query($sql_statement); if(! $rec_insert ){ die('Could not enter data: ' . mysql_error()); } echo "Entered data successfully\n"; mysql_close($connect); ?&gt; To give the checkboxes a default value, i would use a variable for each one. The variable would either equal the post value, if it was set, or a default value. The simplest way to do this is with the ternary operator: $checkboxE1 = isset($_POST['checkboxE1']) ? $_POST['checkboxE1'] : 'No'; What this line does is check to see if $_POST['checkboxE1'] has a value, and if it does, assign it to $checkboxE1. If it has no value, 'No' is assigned to $checkboxE1. That being said, I again cannot stress how unsafe this code is. Anybody could inject a SQL query and access your database using this form, or insert malicious code as part of an XSS attack. Please sanitize your input and use prepared statements when using SQL queries!