To clarify: you need to start the session before you send any output to the browser. If you're sticking with MVC pattern you need not to put this at the top, otherwise - it's a smart move.
When you write your book, be sure and include 2SAT vs 3SAT in there too. Also, xmlrpc and nested Innodb transactions so I can send it to some satellite office coworkers as a passive-aggressive Christmas present Edit: and try/catch blocks. FFS
Yeah my point was that sometimes people have to be aholes to make others understand a point. 
Suptooya. I love CakePHP and couldn't recommend it more hightly. But then again, I've been coding in PHP for years.
I did a little digging around, and it occured to me that a lot of big sites are using Drupal now, which could maybe play into these stats. Usage climbs steadily up until around August 17th, 2010, at which point, there is a spike. [http://trends.builtwith.com/frameworks/drupal](http://trends.builtwith.com/frameworks/drupal) I wondered what happened on that day with Drupal, so I did some digging, and found that there was a "Code Sprint" for Drupal 7 (which has now released) [http://buytaert.net/drupal-7-code-sprint-at-acquia-on-august-17](http://buytaert.net/drupal-7-code-sprint-at-acquia-on-august-17)
Stop reading online tutorials. Buy these, and read them in this order: [Object-Oriented Solutions by David Powers](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117) [PHP 5 Objects, Patterns, and Practice by Matt Zandstra](http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804)
As always, php.net is probably the best resource out there. I'm sure people will suggest W3Schools or some other old outdated website, but the PHP [docs](http://php.net/oop) on OOP are extremely useful and well documented with *many* examples. I wouldn't suggest using a framework just yet, as writing your own code will probably be a better learning experience. But do have a look at some good OOP frameworks source code just to get an idea on how to do things properly and efficiently.
Seconded. 90% of online tutorials are written by people who don't know what they're actually doing, and an uncomfortable amount of those are PHP4-styled code while pretending to be PHP5 and OO and whathaveyou. Either buy books, or hook up with people who know what they're doing so you can learn that way.
I come from a "Full Stack" framework background (Kohana mostly). But I used Glue to teach some less informed developers the concept of MVC. I found that most of the time they couldn't get their head around URL's routing to a function that handled that request. Using Glue helped them get the concept. 
Also, if (!is_dir($foo)) mkdir($foo);... ugh This guy probably does this as well: if (is_readable($foo)) $fh = fopen($foo, "r"); else echo "error!"; I hope no one in my organisation writes like that.
Holy crap... you have a lot of inline PHP in your HTML... Anyways this is a Javascript problem not php. Wrong Subreddit. But I'll still try and answer it. If you are using jQuery you can use css selectors to do something like $("input[name=s]").val('');
Would wordpress or tumblr help? When I think pre-made blogs I think of those two. Specially the former. 
&lt;3 Tux Radar - [Practical PHP Programming](http://www.tuxradar.com/practicalphp)
I usually write in C, so -1 doesn't look right to me. &gt;error_reporting (~0);
Sorry someone down-voted you for an innocent error, which you kindly acknowledge.
Or something like this should work: &lt;input name="s" value="Type keyword to search for&amp;hellip" type="text" id="s" tabindex="1" class="editbox_search" style="width: &lt;?php echo get_option('cp_search_field_width'); ?&gt;" &lt;?php if(get_search_query()) { echo 'value="'.trim(strip_tags(esc_attr(get_search_query()))).'"'; } ?&gt; onclick="this.value = '';" onblur="if (this.value=='')this.value='Type keyword to search for&amp;hellip;';" /&gt;
People like him are what convinced me to stop using PHP ORMs entirely. Now I use DBIx::Class instead.
thanks!
awesome, thanks!
Great info, I very much appreciate it, thank you!
OO is fairly simple but can get complex quickly. Here's a brief intro: &lt;?php class Reddit{ //It's common to put classes into separate files, and include them public function doStuff1(){ echo "Bacon"; $this-&gt;doStuff2(); } private function doStuff2(){ echo " and trolls"; } } $instanceOfReddit = new Reddit; //instanceOfReddit shouldn't be called an instance, it should be called an object. $instanceOfReddit-&gt;doStuff1(); //should echo bacon and trolls $instanceOfReddit-&gt;doStuff2(); //should fail because doStuff2 is a function (or method) that's private to Reddit, and can only be called within Reddit using $this-&gt; ?&gt; 
&gt; OOP &gt; C Pick one ;) (although you *could* combine them, C itself lacks features to support OOP). But learning a language doesn't make you a better programmer by itself, understanding how it runs does. I think the best way to start is by programming directly on the [front panel](http://www.grc.com/pdp-8/FrontPanel.png). Even if it's just to print (I mean literally, *print* to chain-paper) "Hello, world!" and load a fancy compiler from a deck of paper tape. I had a colleague getting paid to write PHP, no even knowing what XOR is. Sheesh.
I think this is a crap idea
You're right, that's how you make PHP remember that this user is logged in. Don't forget to set `$_SESSION["username"]` to null when the user logs out. Also, it's a good idea to call [session_regenerate_id()](http://ca2.php.net/manual/en/function.session-regenerate-id.php) immediately after login. This changes the random string that goes into the cookie, making it more difficult for the bad guys to impersonate other users. Then it's time to read up on [XSS](http://en.wikipedia.org/wiki/Cross-site_scripting) attacks, and learn how to prevent your cookies from getting stolen. As for other options, the only alternative to using sessions is to recreate what sessions do anyway. You may be able to manage your own cookies with your own random numbers and your own database backend, but then you're just reinventing the wheel. It's not worth the effort IMO. Sessions are not perfect, but they're still much better than amateur imitations when used correctly.
... and switched to PHP?
Awesome, so much useful information, thank you!
Thirded. Especially Zandstra's book, it's excellent. I've also found this one to be an excellent resource: [Pro PHP, Patterns, Frameworks, Testing by Kevin McArthur](http://www.amazon.com/Pro-PHP-Patterns-Frameworks-Testing/dp/1590598199) *edit formatting
Who are you to shit all over it?
Actually, you *should* use sql parameterization (you don't give the parameters in the query but instead give them afterwards, allowing the sql library to know exactly what is dangerous and should be treated as such), as escaping a decent sized query yourself will always end up either unreadable or bitting you in the ass (it gets very easy to make a mistake while editing old code for exemple). You have the chance to start php in the php 5 era, if you want to improve both conveniance and security, I recommand you use [PDO](http://php.net/manual/en/book.pdo.php) instead of mysql_* functions. Later on when you get better at php you will probably end up using another layer on top of PDO (and almost every framework provide something of the sort), but PDO is still basic enough that you can get a feel of how it works. To get a quick show of how this work, I recommand you at least read the short exemples on both [__construct](http://www.php.net/manual/en/pdo.construct.php) and [prepare](http://www.php.net/manual/en/pdo.prepare.php) pages. Have fun ! PS; this doesn't mean you shouldn't know how the mysql_* stuff works, look at them and try them out will help you understand a lot of stuff (both the good and the bad). But once you feel comfortable enough with them, throw them away and start learning PDO.
That one is actually next on my list after finishing up some SQL books!
thank you!
Changed my link, you should check out the exemple on [prepare](http://www.php.net/manual/en/pdo.prepare.php) instead of query, it shows the sql parameterization I was talking about at the top.
While books can be an invaluable resource I totally disagree with your advice that anyone should refrain from reading online tutorials. Online tutorials, while frequently of questionable quality, can nonetheless be very beneficial. Additionally, they're free! That's a hard price to beat. The key to finding good educational resources online is knowing how to verify the veracity and accuracy of the material. A rule of thumb that I like to follow is to find at least three independent resources which support each other.
Expanding on stevenmc's example. &lt;?php class Properties{ public PublicVar = "Hi there!"; private PrivateVar = "I'm private."; public function echoPrivateProperty() { echo $this-&gt;PrivateVar . "&lt;br&gt;"; // works } } $instanceOfProperties = new Properties; // instantiating object echo $instanceOfProperties-&gt;PublicVar . "&lt;br&gt;"; // works $instanceOfProperties-&gt;echoPrivateProperty; // works. echo $instanceOfProperties-&gt;PrivateVar . "&lt;br&gt;"; // fatal error ?&gt;
&gt; Sessions are private. Only on a properly configured server. I've seen a disturbingly large amount of people who are, for instance, on a shared host with an improperly/unconfigured session.save_path value who will then, themselves, set it to something like /home/myname/public_html/sessions - which is just downright stupid, I'll give you that, but a lot of noobs and casual users don't realize they can/should put this stuff outside of the web root. If you're making anything that's going to be distributed to other people, you should at least attempt to account for the stupid things users do. Technically, maybe their lack of knowledge is not my responsibility, but it only takes a few seconds to implement and, in this case, I think the trade-off is worth it.
I definitely recommend picking up a good framework. Aside from the obvious benefits of not-reinventing the wheel, a good framework will teach you an immense amount about practical object oriented programming. There are two really awesome frameworks in development right now (Zend Framework 2 and Symfony 2) that I'd love to recommend to you, but being in development, their documentation and online resources are limited. I would recommend using one of their predecessors (Zend Framework 1.11 or Symfony 1.4) in the meantime. Personally, I'm partial to Zend Framework, but Symfony is also a solid framework. Do not use any framework that supports PHP 4, and be weary of any framework that supports anything but 5.2+. For additional object oriented goodness, develop on PHP 5.3. This will also mean you're prepared for the upcoming releases of ZF2 and Symfony2 -- each require 5.3.
I disagree strongly with both points here. PHP.net is a good place to review what language-specific features associated with object oriented exist, but it is a terrible resource for anything related to best practices or practical object oriented design. Also, adopting a framework does not mean you won't be writing your own code. Quite to the contrary, you might find yourself writing even more code than you used to. The difference is, a framework will force you to adopt existing conventions, best practices, and design patterns that you are not otherwise familiar with. Reading samples of source code from a framework without the understanding that comes from using that system (or similar systems) will do little to help you improve your overall understanding of object oriented design.
Yeah - if it's shared hosting, with all accounts running as the same user, then you'll be able to read the session files whether or not the session dir has been overridden (e.g. default ubuntu setup, the sessions are in /var/lib/php5/ and the user who owns them is www-data) Unfortunately, in this case, treating sessions as unsafe does nothing to help because if the session files are owned by www-data, it means that php is running as www-data which means that your PHP scripts need to be readable by www-data (in order for PHP to be able to run them) This then means that I can... via PHP... go and surf other user's directories and read the contents (even stuff outside of docroot). This'll no doubt include DB details in some PHP config file somewhere, so I'll be able to read all of your data too. So either... * PHP runs as a different user for each site - sessions are safe. (Hurrah!) * PHP runs as the same user for all sites - sessions aren't safe, but neither are the PHP scripts themselves. We're just screwed on this sort of hosting no matter what we try to do :/
use a framework for any real development. it will force you to use best practices.
&gt; I disagree strongly with both points here. PHP.net is a good place to review what language-specific features associated with object oriented exist, but it is a terrible resource for anything related to best practices or practical object oriented design. And I suggested this: &gt; But do have a look at some good OOP frameworks source code just to get an idea on how to do things properly and efficiently. If you want to lookup all of the magic methods or how class abstraction works: PHP.net. If you want to see how to apply these in a real world situation look for good examples in frameworks and other well-built applications. You don't go and throw an advanced OOP framework at someone that is completely new to the concept and hasn't even learned the basics, as you have suggested in this thread. You will overwhelm them and probably put them off to OOP entirely.
&gt;Online tutorials, while frequently of questionable quality, can nonetheless be very beneficial. Additionally, they're free! But time is not free. This is the entire issue with online tutorial. Quality can be *extremely* variable. You spend as much -if not more- time sorting through rubbish as you do imbibing quality stuff. Additionally, most all online tutorials are formatted in a way to maximize clicks on the website. The writer (who likely copied and pasted the tutorial himself) is more interested in visitor counts and such rather than sharing knowledge. If you can find a good free, source, by all means use the free tutorials. For most people a published (and reviewed) book ensures a certain amount of quality going in, so it saves time (and thus money), and also takes the frustration out of learning. Of course, if you do not have qualms about copyrights and piracy, there's always "free" .pdf ebooks just a google search away!
Thanks for the replies, everyone. And, sorry for posting in the wrong subreddit! 
Good point. :)
&gt; How would you detect that you're aproching the max_allowed_packet on the server (mysqld) side? You wouldn't. MAX_ALLOWED_PACKET is for inbound traffic, not outbound.
Right now he'll take one look at either of those frameworks and turn tail and run away. He needs to get a solid understanding of OOP before he even thinks about opening up that box.
Why do people assume this to be true? I know plenty of developers that have jumped into any number of frameworks (including myself at a time) with very little object oriented experience, and each has taken plenty from the experience. Perhaps you and I make radically different assumptions about the work ethic of new developers? Edit: I should clarify that the reading material you posted in your top-level comment is spot on. The OP, correctly, is trying to gather all possible resources to help him down this path, and using a framework is simply one part of the process. A huge amount of other resources, like the books you linked, will only make jumping into a framework easier.
The OP specifically says that they have learned the basics and are ready to "dive" into object oriented programming. That's exactly what a framework will do. I love PHP, but I hate this attitude that PHP developers give when it comes to having new people dive directly into well written code and industry best practices. With python, new developers often write their first applications with django. With ruby, new developers often write their first applications with rails. With php, new developers are told to not get too close to a framework because it is big, scary, and they might not have the fortitude to stick it out. Please. OP: If you want to learn to do object oriented programming, do it... excessively. There is absolutely no better place to dive into object oriented development than a framework of tried-and-tested object oriented code that immediately puts you on the right path. Like any good learning experience, it is going to be hard, it is going to require a lot of work, and there will be times where you feel overwhelmed. Keep at it, and you will be better for it. If you have any questions or want anymore information about diving straight into the deep end, please feel free to PM me.
PHPUnit is really the best option out there, by far. Most well-organized open source projects maintain these unit tests, and the project is very well maintained. The work Sebastian has put into improving the testability, readability, and maintainability of PHP projects is simply invaluable. If you're not running xdebug in development, I recommend using that as well.
If it helps I have really really simple (one small file) little blog engine thing I use for my website, which I open sourced on Github at http://github.com/ZaneA/BLACK It has no comment support built in, I just used Disqus for comments which works really well, and the admin interface is really bare, as it's basically just a frontend for the tables in the database, so if you're looking to use a custom admin page it might be a good start.. feel free to use and butcher it as you please :) You can see it in action [here](http://www.demonastery.org)
What panel are you talking about? 
OP says this: &gt; I've got the basics down and now I'm about to dive into Object Oriented Which to me implies they have the basics of PHP down, and are now going to learn OOP. Throw a full-blown framework (Zend, Symfony, etc.) at someone that is looking to learn the basics of OOP and they will shit bricks. OOP is difficult enough for someone new to understand without them having to learn a new framework while they're doing it. To me, a framework is a shortcut, and suggesting writing an application in one as an OOP learning tool is liking suggesting an ORM to someone looking to learn SQL. Not only will it probably be too complicated for them to understand, but they won't learn the foundation that sits behind it, and you need a foundation before you can build a house.
Your description is too vague to work something out without seeing the code or at least an error message, if any.
Does it fail when the text contains single quotes (like "O'brien")? My first guess it that your developer is not escaping quotes for insertion into the database. If so, YELL AT HIM and make him fix it. Otherwise we are going to need a lot more info to help with this.
My admin panel, where I add webpages and content to my site.
Hey, I don't know the code (or how to access the code), I paid someone to make my panel. And there is no error message, it simply refreshes, as if it saves, but returns with nothing.
Hey, thanks for the reply. What do you mean single quotes? " Like this " and is that in reference to text or code? I will provide more detail here: If I put in anything more than two paragraphs of text it wont save and if I put anything more than probably 10 lines of code, it wont save. It comes back blank. I also cannot make any new pages. I cannot contact the maker, so I hope this is an easy fix or else I'm going to have to pay someone else to make me a new, proper panel.
A single quote (aka apostrophe): ' A double quote: " Even one single quote will be enough to completely screw up the database if the maker didn't handle them properly.
This question is going to be almost impossible to answer without access to the code, and I'm not too sure how many people would be willing to just go through your code and figure out whats wrong with it just to do it. Honestly I recommend hiring someone that knows a little more then yourself about PHP to take a look at it. On a side note is it throwing any errors at all?
ah no, I don't think apostrophes are an issue, its just lengthy writing that is the problem.
That's what I thought. I will probably have to get some guy to look over it. Thanks.
You don't seem to be very technically inclined, so I'll spell it out for you: we don't know anything more than you do, and without seeing what he wrote, we can only make wild shots in the dark. Here's what we need if we're going to help you: 1. FTP to the server. 2. Copy all files ending in .php or .inc to your computer. 3. Share them with us somehow. But think carefully before you do that: if anybody figures which website they came from, they'll have no trouble hacking it. It sounds to me like you hired an incompetent moron. Whatever you end up doing, good luck! Edit: whoops, looks like xistins said most of this while I got distracted.
Wouldn't hurt to make sure. It wouldn't surprise me to find that only longer text contains apostrophes.
** THANKYOU** **THANKYOU** THIS IS A PROBLEM I'm sorry for doubting you, i just wrote: *Test* on a page and it correctly saved. I then wrote *Test Test Test* on a page and it correctly saved I then wrote *Test'* with an apostrophy and it DID NOT save. Thankyou for making me check that, I was ready to claim this wasn't a problem. Thankyou!! Now, where do I go from here? Edit: and the problem with creating a new webpage is because I had it named 'who's who' with the apostrophe.
Hey, thanks for the reply, HorribleUsername has figured out my problem. Its something to do with the apostrophe. Is this an easy fix?
Note who you just replied to :) If you're asking whether it's an easy fix, it's not easy for you.
phpt of course: http://qa.php.net/write-test.php but you can also try out tinyspec: https://github.com/StanAngeloff/php-tinyspec ... but PHPUnit is the de-facto unit-testing tool for PHP (for me it's too bloated and too verbose).
In the short term, every time you want to use an apostrophe, type \' instead. In the long term, hire someone competent to fix this. Also, see if you can get some sort of refund from the first guy, but **don't let him anywhere near your site again**. Anyone who makes that mistake should be banned from practicing.
Given that C doesn't require two's complement, that's actually a platform bug. Stop trying to be so fancy.
&gt; Or you could make those performance drains disappear by simply looking at the xdebug cachegrind profiling graphs. Yes, far simpler to do that than to leave warnings on. And since that's the only reason warnings exist, it's also not a massive loss in functionality. &gt; So in most cases you can actually keep the notices in The reason people turn off warnings and notices in production is that the most common place for them to appear in production is after unmanaged language changes, which in turn serve as hints to black-hats where to look for exploitable defects.
Hiding the problem doesn't cure anything.
How would I go about describing this 'apostrophe problem' to someone? Is there a technical phrase for this problem, so that a competent fixer will understand what's wrong?
Good call! I never would've guessed that with so little info.
ah sorry, I didn't know it was you :P. Damn, I'm prob going to have to hire someone because I'm sure as hell not putting a \ every time an apostrophe comes up!
 &lt;?php class Properties{ public $publicVar = "Hi there!"; private $privateVar = "I'm private."; public function echoPrivateProperty() { echo $this-&gt;PrivateVar . "&lt;br&gt;"; // works } } $instanceOfProperties = new Properties; // instantiating object echo $instanceOfProperties-&gt;PublicVar . "&lt;br&gt;"; // works $instanceOfProperties-&gt;echoPrivateProperty; // works. echo $instanceOfProperties-&gt;PrivateVar . "&lt;br&gt;"; // fatal error ?&gt;
Say that the previous dev didn't escape their input.
2.2250738585072011e-308 bug is fixed! 
This isn't your [personal support site](http://www.reddit.com/r/PHP/comments/es2k9/noob_to_php_please_help/) for your 'php panel'.
Awesome. Thanks.
And this is why you never declare anything done. Wasn't 5.2.15 supposed to be the last 5.2 release of PHP?
Isn't that what I just said?
Try running your code. Made me pause for a second.
PDO makes these functions irrelevant. 
You might want to look into using something like tumblr instead. No PHP code skills required.
Yeah but as there are people still hesitating with updating to 5.3.x and the bugfix being that critical, they probably believed this was necessary.
[The announcement](http://www.php.net/archive/2010.php#id2010-12-16-1) says that was the end of support. Unlike when they killed off 4.x, they didn't say it was the last release ever. It's worth noting that previously only the latest 5.x was updated. 5.1.x stopped being updated as soon as 5.2.0 was out.
Party poopers - all of you.
derp, just noticed that. i was still thinking in C++ apparently.
Thanks. I'm trying right now with OI Blog. I'm having a bit of trouble with overriding the user authentication. That blog is 68 lines of code for the admin. Its a little too bear bones. I really like the interface for your site though.
not really.
ZendMeOver.com? 
I don't want to do these things.
But "fixing" the notices with isset does cure their cause?
Hey no worries :) Good luck finding what you're after!
Thanks. It was a bit of a shot in the dark, but I figured that the text length bit was a red herring, so not escaping input seemed like the most probable cause. 
I normally use books to get a basis for what I need to learn, then dive in with online tutorials and forums (like r/PHP!) for additional information.
I'm not pro or anti ORM. Right tool for the job. I'm anti attitude. You can still make a point without being a complete ass. Btw, you wouldnt be talking about this DBIx::Class would you?: http://search.cpan.org/~arcanez/DBIx-Class-0.08126/lib/DBIx/Class.pm &gt; "DBIx::Class - Extensible and flexible object &lt;-&gt; relational mapper" Not that i've looked at it much, but.. 
You like that huh?
There are only two ways to persist data that I know of. - Sessions, with the session ID persisted either via a cookie, or appending the session ID to links (which will be *lost* if the user types in a new address to the site instead of clicking links) - User-tracking. I have seen cases where login is maintained via database, tracking the user's IP. But I think it's dangerous. Here's why: In this method, no cookies are sent to the user, and sessions are not used. Anything you want to pass on to the next pageview is stored in the database, or a flat file. The user's IP is used to distinguish the user - however, this is not foolproof. If multiple persons in the same house are on the site, you won't be able to distinguish them. Both will have the same IP. You could try adding port tracking, but a user's port can change during browsing. You could try tracking the browser agent in addition to the IP, but both persons could be using the exact same OS and browser. There is no effective way to track two users on the same IP without using a cookie. There is a second reason this is dangerous, as well: User could be in a public location (lots of people on the same IP!), or have an open wireless connection (neighbours "hacking" in!), or have their wireless connection broken into (neighbours hacking in!), ...etc. All in all, **cookies are the only way to go**. Hell, even Google and Reddit do it (see __utma and reddit_session cookies), so there must not be a truly better way. And as far as cookies go, you won't write anything by yourself that is better than PHP's (or any other language's) built-in session code. 
I'll add to this. I will at this point assume you are starting in PHP5, so register_globals is not a worry as it is off by default and should be left off. One of the first things you should know is not to use $\_REQUEST. If you are expecting GET data, use $\_GET. If you are expecting POST data, use $_POST. Leave no room for stuff to slip in between. Do not simply transcribe all of $\_GET/$\_POST into local variables - isset() each and every item, and check their contents before assigning or using. Sanitize EVERYTHING coming in. Period. Escape strings. Check that the data is what is should be (is_numeric() numbers, preg_match() email addresses (with a really good script someone else wrote - truly matching all valid email addresses is a huge bitch) and phone numbers, etc. *Check everything you can and trust nothing.* Paranoia is life! 
If you write it, the [Bathroom Reader's Institute](http://bathroomreader.com/) will probably publish it. 
hahaha thanks, great info. I didn't know about isset(), now I've got some reading to do.
I don't think you can ever be too paranoid about password hashing. 
I think its very clever. I looked over it. I assume you have another function for checking the hashes? Personally, I think if a person is able to get a hash, they probably have the database already. I've been told it would take a supercomputer to crack an Md5 sum. Even then you would need something like a rainbow table containing all the possible passwords. I don't consider myself an expert. Hopefully someone will be able to give a good explanation as to if this is overkill or not.
Great link. Just saw that there is tons of subcategories under the main ones.
Unless you know what you're doing, you're probably just making it easier to cause collisions. Have you tested the math behind this or is it just a bunch of "good ideas" on your part? And if your algorithm is fast as well then you're even more fucked. Use bcrypt. It's slow and good. http://www.openwall.com/phpass/
I agree with SC on learning mysql but I think orm is great to use once you fully understand mysql and how to secure it and optimize it. this goes for any php library though, Developers shouldn't use a library with out knowing what problem the library solves and how it solves it.
So, why does the manual say that, and I quote: &gt; The result is truncated to the maximum length that is given by the group_concat_max_len system variable, which has a default value of 1024. The value can be set higher, although the effective maximum length of the return value is constrained by the value of max_allowed_packet.
&gt; This makes a completely undecodable 50-character hash, unless you know exactly how it was generated. Security does not come from obscurity. Stick with the classics. They're classics for a reason.
Yes you are being too paranoid. You are not making things more secure. The hash is public knowledge, it just needs to be different for each user. You don't hide it. Just use bcrypt with a random 22 character string for salt and a sufficient workload factor (say 10-12) and you are good to go. http://codahale.com/how-to-safely-store-a-password/ 
The session is shared among any and all pages in session.cookie_domain. Usually that will be the FQDN at which the site was accessed, but you can make it more general using session_set_cookie_params().
Cool thank you!
I know, it's just that it won't matter in PHP. No biggie.
LOL so true in reference to shitting bricks. First write a couple of MVC OOP based applications before entering a framework since most prominent ones try to aim for MVC OOP. And then frameworks come in as a short cut or an aid for those whom understand what is happening in the background. One of the most robust, but not so easy to pick up, being the Zend Framework- of course this is my opinion.
meh. if they can get into the db, chances are they can get the script as well, then they know what you did and its right back to the rainbow table.
From Wikipedia article on MD5: &gt;A 2009 attack by Tao Xie and Dengguo Feng breaks MD5 collision resistance using just 2^20.96 time. This attack runs in a few seconds on a regular computer. MD5 is horribly broken, don't use it. Even SHA1 is vulnerable nowadays and it is suggested to use at least SHA2.
I use 2 salts with my code. One site wide salt, and the second salt is derived from the users own password. I then mix them in a similar way to yours (intermixing the salts and password), then apply the final sha1 / sha256 / sha512 to the resulting string. The user specific salt is never stored in the database since its not needed (it can be derived again from the user password when needed).
Since I need to be able to unencrypt passwords in my DB (in order to pass into xmlrpc for some services), I store the salt in the database, and the password 'encrypted' with the client in a cookie. It's most likely not the best way to do it, but if anyone has any better ideas, I'm all ears.
&gt; unless you know exactly how it was generated Security through obscurity fail. Your code should hold up if every hacker in the world could see it's source. I just: some sort of decent hash(Password + User salt + Global salt)
&gt; if they can get into the db, chances are they can get the script as well, Not really. There's a massive difference between getting a database dump and being able to access all the site's config files.
Yeah, just listen to this guy. I made a fool out of myself a while back telling everyone how to hash passwords. I did learn from my mistake, but I was red faced for a while.
Don't use sha512, use bcrypt
I came here to say this. The key is not in how "complicated" you make the hashing from a human perspective, but how complicated it is for a computer. Use phpass because it is slow, and a unique and random salt for each password. 
If you are running phpass with blowfish in non-portable mode, this is all the code that gets executed (PHP &gt;= 5.3). Simplified two (hash/check) function version of phpass: http://code.google.com/p/web-dot-php/source/browse/trunk/src/web.php#321 
Lawyer up, hit the gym, use bcrypt. 
Exactly what problem are you solving?
His bike didnt have a front wheel...
If the salt is derived from the user's password, you might as well just have a site wide salt. In either situation, it's possible for an attacker with access to your server to generate rainbow tables for you entire set of password hashes.
Lose your ability to decrypt your passwords. Use OAuth.
True. But all of the obscure code isn't going to add any security in the "database-but-no-code" scenario over just having a site-wide hash in a config file (in addition to per password salts in the database, of course, to prevent rainbow table attacks).
I haven't heard of bcrypt before. What's the advantage of it over sha512 + salt?
I have to pass it into atheme IRC services, and that'll only accept user/pass.
It's slow compared to sha512 which is built for speed. bcrypt isn't artificially slow, it really is slow. That means, that you need only few iterations of it compared to sha512. If you want to use sha512 for passwords, see Ulrich Drepper's implementation: http://www.akkadia.org/drepper/sha-crypt.html (basically about thousand iterations -&gt; to make it slow enough on common hardware).
Seriously, why is this being downvoted? It seems like pretty spot on advice to me. 
It seems like thanks to the Gawker password leak there's no a metric ton of password threads on Reddit. I've now learned a lot from you guys!
people aren't downvoting it because of the advice probably, but that it seems to agree with what the OP posted, which seems more likely to make it easier to break than the standard techniques. If you don't really know what you're doing , you will likely be screwing yourself
You're welcome. I guess. Thank yous of this form make it hard to justify repetition. Faux contrition isn't as effective as you might imagine it to be. For what it's worth, if you want to learn proper SQL, start with Joe Celko's "SQL for Smarties" and basically anything written by Bill Karwin.
I wonder if you realize just how much you sound like your point is something very different. This actually reads like a borderline attack post.
And yet in other threads you call me a stalker for recognizing your nick.
You're welcome to try, internet tough guy. I'm in the Washington DC area, and I'm happy to meet you for lunch.
Somebody has to.
Grind your axe somewhere else.
Not false in any way, actually. Maybe I came off as a little too sarcastic in my OP, but really, sometimes people need a push to get away from their comfort zone and keep on learning - which is exactly what you did. I'll look into that book, although reading the overview and reviews it looks to be many steps ahead of where I'm currently at.
&gt; There are several people with an attitude around here ... Not sure why people need to be assholes And you imagine yourself to be separate, I guess. &gt; Sad part is they get upvoted when they're right Mmm hmm.
&gt; Not false in any way, actually. Maybe I came off as a little too sarcastic in my OP You just called me an asshole *again*, in public, in a place it took more than a day for me to notice, and in the process invited several other people to take unbidden, unnecessary swings at me. &gt; sometimes people need a push to get away from their comfort zone and keep on learning - which is exactly what you did. The difference is that I was trying to teach you something, had a point and bettered your process to the point that you felt you had to thank me later. You were just bellyaching in public, *again*, with the words "thank you" hastily scrawled on the side so you'd feel like you weren't just whining some more from up on the cross. That'll teach me to keep helping you. (sigh) One of these days, you'll try saying "thank you" to someone, instead of saying "thank you, asshole" to everyone else. Then you'll realize that people begin to treat you very differently. Maybe you should consider what set of emotions you want the recipient to gain from the thank you.
makes scene. I'm trying out this [https://gist.github.com/739134](https://gist.github.com/739134), found from one of the other password hash threads from last week.
Yes, that DBIx::Class. But even without the ORM, DBI is far less painful — physically, from typing out `array(` every 20 seconds — than PDO. And if you design the DB schema decently enough, the choice of programming language doesn't make much of a difference.
It's easy to spot you when your name's usually a different colour (grey) to the rest of the thread.
Funny, everyone's but the OP's is that way. For example, yours in the thread where you call me a stalker.
Don't ever store passwords in cookies, encrypted or not. Use a random auto token string for each user.
[Hypocrite.](http://www.reddit.com/user/StoneCypher)
Posting my posts list, using an inappropriate word and downvoting purposelessly doesn't actually make a point. Find someone else to complain about in public in the same thread where you tell people they've taught you important things. There's a reason I stopped teaching you things.
Check file permissions, chmod a+x
PHP files should not need to be executable unless you're actually invoking the PHP binary in a CGI script.
Check the error log?
been messing with them. Tried both 755 and 775 with no luck =\ Reason I tried doing that was because I saw this post from a year ago: [http://forums.powweb.com/showthread.php?t=82680](http://forums.powweb.com/showthread.php?t=82680)
This should have been suggested first
I refreshed the hello-world.php script in question and then refreshed the log. I saw this Premature end of script headers: hello-world.php But then I also so this Failed loading /usr/lib64/php/zend/ZendOptimizer-5.2.so And this [error] [client 80.117.193.115] Failed loading /usr/lib64/php/zend/ZendOptimizer-5.2.so: /usr/lib64/php/zend/ZendOptimizer-5.2.so: undefined symbol: zend_opcode_handlers, referer: http://www.buynowshoes.com/Nike-Air-Max-Shoes/Nike-Air-Max-95-Women/Nike-Air-Max-95-Women-Shoes-005-52924/ wtf? lol
Also check if you have anything in a .htaccess file that is preventing you reading the directory. The directory permissions that the script is in also have to be set correctly.
Hi there, Though I said I'm fairly comfortable with php, this was a bit beyond my knowledge. I'm sorry for the ignorance but can you explain?
drop the ending ?&gt; you probably have whitespace after it. also, disable zendoptimizer, looks like that's causing your problem elsewhere. look into something fancier like xcache instead of zend optimizer, or APC. they not only optimize bytecode they cache the bytecode for you making them better solutions then zend optimizer, unless of course you need zend to decode zend encrypted files.
hmm nothing in the htaccess file (literally nothing. no htaccess file in the root either) and the only permissions I only stick to 755 or 775. Thanks though
But then I need to store the password encrypted in the database, along with the key that unlocks it.
 &lt;?php echo 'Hello World!'; That's it - I had this problem once, a long time ago. My editor was inserting some stupid invisible white space characters into the end of my code. Almost went mental until I figured it out.
I made sure there was no whitespace after but I tried dropping the ?&gt; as well. No luck. For zend, I'm on a shared host. Looks like they're using zend optimizer by default (and wouldn't know how to install xcache). I was just concerned with the fact that my error log is referencing a site I never heard of (buynowshoes.com) as a referer...
Oh really? That might be it then. I'm using aptana as my editor. I'll switch to another one and see Edit: nvm. tried it, no whitespace at the end. Thanks anyway. Although I admit, I never thought a whitespace after the close would be a problem? Wanna share your experience?
The only reason you would make a php script executable is if you are running it from the command line or using cgi to call the script (an alternative method used to deliver php rendered content). I can almost guarantee you do not need to mess with the permissions.
It seems your hosting provider has fscked up their PHP configuration (as it seems that they have - by borking their Zend Optimizer installation or enabling a borked module). I'd suggest contacting them directly if you've not set up the dependency yourself (and it seems you haven't). There is nothing in the error message that indicate that you have a space after the closing tag. About the Referer:-entry - is the error log specific for your account / domain (and .. that's the log you're viewing)? If it is I'm guessing simple referrer (and attempts at comment, etc) spam.
&gt; you probably have whitespace after it. This is a real problem? Wow.
Its generally only a problem when you include() the file with the ?&gt;-then-whitespace in another script. The whitespace gets sent to the browser (unless youre caching it) and prevents headers from being sent and session from being started.
&gt; I'd suggest contacting them directly if you've not set up the dependency yourself (and it seems you haven't). Got it thanks. You're right, I did not set up this server at all (and wouldn't know how to hence this) so I've gone ahead and sent a ticket in. &gt; There is nothing in the error message that indicate that you have a space after the closing tag. Yeah and also, I didn't think a whitespace would cause this anyway &gt;About the Referer:-entry - is the error log specific for your account / domain (and .. that's the log you're viewing)? Yup, So if it's just spam I guess I shouldn't be too worried *sigh of relief* Thanks! You've been most helpful
Your host has buggered up their PHP configuration. Try just putting up a completely empty file with the php extension and then try and access it. It probably won't work either. 
Actually, I didn't know a whitespace after could cause an issue. But I'm so confused that I'll try anything to figure out the problem
No, it isn't. The dangers of taking proggit advice.
It can't. Respondant has no idea what they're talking about.
From the comments here, it seems so. Sent in a ticket and just tried your suggestion. Yup, another 500
This is, of course, complete crap. Including a php file has nothing to do with headers. What you're trying and failing to discuss is the effect of including a script with text outside the script block in a different script which later attempts to emit headers, but those are HTTP headers, not script headers. Short version: stand down, soldier.
Notice it's the script headers, not the HTTP headers, and it's premature termination, not text output before. Very different problem.
It's got nothing to do with your editor, or whitespace surrounding the script block. The PHP server's configuration is incorrect and/or damaged. Scripts cannot cause premature termination of script headers, nor can they cause faulty loads of the Zend static object. Get a better host.
So that it could be wrong faster? 
Your server is mis-configured. I can't tell you where the problem is, because it could be in so many places. Start with php.ini and then check your webserver config.
The max power way.
Thanks, I don't actually want to touch php.ini so I just sent my admins a ticket. I started suspecting it was a server issue since I'm pretty sure my code is fine lol
Please do kindly explain how checking the *error log* after getting an *error* could be wrong.
And moreover, if you have no idea what "using CGI to call the script" means, you aren't doing it and don't need to worry about it right now. :)
you using a mac?
Thanks stonecypher. Sent in a ticket to support letting them know so hopefully they'll fix the problem and let me know what it was so I could share it here. To be honest, I'm on a shared host (hostmonster) and never had a problem with them before. They're cheap and I usually use my hosting for testing and stuff. I unfortunately wouldn't be able to afford a dedicated server and if I could, I wouldn't know how to set up php properly
Store an identity token derived from the user ID and use that as the cookie value. Check to see if the user's cookie exists within the identity token database and that is how you authorize the request. Never expose the password anywhere, it leaves you open to liability. If the cookie gets stolen and unencrypted then the user's security is entirely compromised (they likely use the same password everywhere and you just ruined their life). The rationale behind using a cookie value to identify a user is simply to association that browser to your user (the password is not necessary, passwords are for humans not computers), and the rationale behind using a derived value is to prevent malicious people from cycling through easily identifiable cookie values to impersonate other users.
Yup. (but notepad++ on win is so...win lol)
Haha! Yup, don't know what that means but thanks =)
ok, ive had this problem before copy and paste this double quote **"**, and use it instead of your single quotes. just a hunch
I don't explain things to people who abuse downvote. Feel free to peruse my comment history before accusing me of never explaining things. Short version is "the error log doesn't give the needed information, but what was dumped to console does." It's a little like saying "I smell smoke, check for a hole in the bottom of the boat." Just because something is often the right thing to do doesn't mean it always is, even when their labels share a word. That's why the error log, which is for scripting errors, won't contain the necessary information to diagnose this server configuration error. If and when you ever catch on to what's actually wrong with this server, then try it out on a server under your own control, and watch error log not have information for you. Please do kindly explain how I can explain how something that isn't a good idea isn't a good idea. "Her arm is torn off. Get her vaccinated for the flu." "Why, so that she can not heal from her wound?" "Please do kindly explain how having a *medical* *action* after a *medical* *problem* could be wrong." Because there's no attached benefit here. If you don't get it, explaining won't make you get it. Stop abusing the downvote button.
I've got a hostmonster account too. They're actually usually really good about this stuff. Check and make sure there's no botched .htaccess or php.ini in the affected directory tree.
Please stop abusing downvote. I said that for a reason, and your unfunny joke aside, mashing blue arrows won't make the suggestion any less wrong.
I think it's a server issue but I tried it anyway just in case. Still nada. Thanks anyway!
The Apache error log should contain this information if PHP is running as a module.
Use separate passwords for the web site and for the remote service. Use the web site password as the key to encrypt the remote service password. Store the web site password as a hash only. That way, someone will have to provide the web site password to get at the remote service password.
I actually deleted my htaccess file just in case there was something funky going on. Now for the php.ini file, my level of expertise isn't enough to even begin to understand how to read it. BUT I do notice a php.ini.NEWCONFIGPOSSIBLYBROKEN. Looks like an old ini file last edited june 2010. I wouldn't be comfortable editing the php.ini file currently there so I just went ahead and sent in a ticket to support
I've been doing web applications for sixteen years. I know full well that sometimes the error log contains immensely unhelpful errors. "Premature end of script headers" is my personal nemesis. But *even an unhelpful error can still be used as a diagnostic technique*, even if the only thing we can say is, "yeah, it's busted, you'll need to ask your host to intervene because you aren't root." Also, downvotes for being unconstructive and unhelpful aren't abusive.
Try 644 or 664. PHP scripts normally shouldn't have the execute bit enabled. cPanel shared hosts with phpsuexec tend to be very picky about permissions, and 500 error is the usual symptom.
I've been thinking lately, wouldn't it be simple and highly beneficial to make salts binary? Making the most out of each byte would make the rainbow table that much more difficult to compute.
And yet 1) it won't, and 2) on cPanel servers customers never have access to the Apache log. I'm going to stop responding to this tree, because apparently knowing what's wrong gets me downvoted into the ground, while people making incorrect handwaves are getting voted up through the stratosphere. Lemme know if/when you figure out why.
They'll be in touch with you quickly. I'm stopping responding because people with downvote punishment fetishes are running every comment in the thread.
&gt; Including a php file has nothing to do with headers Outputting whitespace does have, unless you're using output buffering for everything. (You cannot set headers after you've outputted body text and whitespace does count).
&gt; I've been doing web applications for sixteen years. I know full well that sometimes the error log contains immensely unhelpful errors. And yet those won't be there this time. &gt; "Premature end of script headers" is my personal nemesis. That's interesting, given that you've been doing web applications for sixteen years, and have garnered four upvotes for admitting that in more than a decade and a half you haven't quite figured out how to set up a basic webserver. &gt; But even an unhelpful error can still be used as a diagnostic technique Uh huh. But it won't be there, so this magic handwaving isn't important. &gt; even if the only thing we can say is, "yeah, it's busted, you'll need to ask your host to intervene because you aren't root." Not only is that not the only thing we can say, it's not the only thing I did say. Maybe after 16 years it's time to stop talking about how long you've been at it, and reading other people's approaches more carefully. &gt; Also, downvotes for being unconstructive and unhelpful aren't abusive. If you had not just displayed a failure to understand what I had said, this might be more compelling. Funny thing: the original poster thanked me, and not you. Thump that downvote button for your pride's sake, at least, though.
A second time, this error message is about script headers, *not* HTTP headers. They're different things. Please read the whole comment *before* arguing with it.
Love the referral spam going on there, lol. Anyway, it appears your hosting provider (or yourself) has screwed up the PHP configuration. Check your php.ini (or the relevant ini file) and make sure the location for the ZendOptimizer is correct. 
I appreciate the sentiment. (Especially now, as I'm going through another round. Le sigh, proggit punishment fetish in full effect.)
&gt; And yet 1) it won't, and 2) on cPanel servers While that may be true for this particular problem after taking into account information not included in the original post, the hand wavers are not hand waving in the context of the original question.
Sure, which is why I advocate having a config based hash in addition to a per user hash stored in database, increasing points of failure.
I didn't downvote you, but just because it wasn't helpful to check the error logs doesn't make it wrong.
This.
Are you doing an experiment in reverse-psychology, or something? 
Are you using the php-cgi interpreter instead of just '/usr/bin/php'? "#!/usr/bin/php-cgi" Edit: reddit eats '#'s
PHP sucks. OTOH it is white space after ?&gt;. I think so
I'd argue that there's nothing wrong with using sha512 when the password is properly salted. This is the method that I use: $hashed_password = hash_hmac('sha512', $random_salt . $password, $site_wide_key);
I'm no expert, but from what I understand, sha512 is too fast to serve as the best deterrent to someone with some time. bcrypt can be made much slower, severely limiting the attempts per second a computer can try.
&gt; And yet those won't be there this time. [Perhaps you need to read the rest of the thread, in which the OP posted a line from the error log and the problem was blatantly, clearly obvious](http://www.reddit.com/r/PHP/comments/ey2l2/why_doesnt_a_simple_echo_hello_world_not_work/c1btxix). Then there was the stupid and wrong whitespace derail, but it was resolved a few replies later with a ticket to the host. &gt; That's interesting, given that you've been doing web applications for sixteen years, and have garnered four upvotes for admitting that in more than a decade and a half you haven't quite figured out how to set up a basic webserver. Perhaps you've never heard of a concept called shared hosting? I can't fix people's servers for them, all I can do is help them set up my software. Incidentally, it's that bullshit that got me out of the market to begin with. &gt; If you had not just displayed a failure to understand what I had said, this might be more compelling. You're flaming *me* because *you* were an ass and got downvoted for it? Are you for real? You whine about people abusing downvotes, but act in such a way that invites them. Get out.
After looking at the call-out someone did on him the other day, I think he's just a troll. I wish reddit had ignore lists. The user script just doesn't quite cut it...
[Conform to the specification](http://www.ietf.org/rfc/rfc3875.txt) and it should just work.
When faced with two evils, always pick the one you've never tried before. The programmers had already used ASP, so.. 
*Disappointed that this doesn't actually exist...* 
Damnit, now you made me look too. I think he's both sincere and genuine, the likely combination of having acquired a rather high opinion of himself over time, and having a few social blind spots (assburger?) I'd be hesitant to ignore him though. He seems colorful enough to add some overall value, albeit not necessarily in the obvious ways. Plus, if I ignored him, I'd have to take a long hard look at myself, and frankly I'd rather not. :-| 
Just because he's got a false lead... I'm tired of sheep voting. You guys believe what you want, with your double digit upvoted platitudes.
I don't happen to like either of them - prefer Cake and Lithium.
I wouldn't say ZF2 is a bust, they are still in the design/decision making/planning process. The way I see it, Symfony2 is doing every fabpot's way (which im not saying is a bad thing, other frameworks such as Django also operate this way). If all design decisions are made by the same person then less time is spent talking and more time is spend coding. Zend Framework2 has no BDFL, they ask the community for submissions on how to implement [certain features](http://framework.zend.com/wiki/display/ZFDEV2/Zend+Framework+2.0+Proposals). These are then discussed, voted on and implemented. ZF2's way of doing things certainly takes longer, but it is well thought out and every major decision in it is justified (so you can read why they did X instead of Y). 
Boring. No, I didn't miss the line, and no, that's not from apache logs. No, I haven't flamed you. Etc. &gt; Perhaps you've never heard of a concept called shared hosting? Yeah, when I tapk about cPanel hosts, this is the natural assumption. I'm tired of the rage posts. When you realize that you don't know what's wrong, tell someone who cares.
Yeah, looks like he's using the CLI version? OP: http://php.net/manual/en/function.php-sapi-name.php What's the output of this function?
&gt; just because you think you know better doesn't give you the right to be rude. Oh, really? &gt; we get it, people dont like you and downvote you &gt; you were rude ... and never tried to apologize or admit that you were wrong &gt; This was all despite your pointless shitfit &gt; continuing to defend your "advice" (hardly relevant My favorite part? &gt; you were wrong about the logs when OP found (or at least got closer to) the root of the problem using the logs No, he didn't. Remember this once someone figures the actual problem out. :) &gt; This is most likely due to the fact that Nope. It's because wrong people don't like to be wrong, especially when they're giving advice in public. That's why later, after people calm down, they thank me. Don't worry; you'll notice it soon. And then? &gt; In the meantime, could you tell me You expect me to teach you something after that? I have no interest in your opinion of a conversation you weren't part of, and I'm not interested in your demands to be educated on something you thought you knew. If you want to pretend that means there's nothing there, that's fine by me. Tell someone else, though. Good night, Gracie. ---- Edited for spelling errors. Kinda drunk.
cPanel stores domain specific access and error logs in the user's home directory and lets you access them through it's own web interface. Stop whining about being downvoted, it makes me want to downvote you.
Doh, there were two places where I needed to set php-cgi and I only set one. OK here's what I learned: Without setting cgi.force_redirect = 0 in php.ini I have to set the environment variable: REDIRECT_STATUS="200" Not sure how to get around that. Any ideas? Then when I ran it, PHP returned headers and stuff but it said my test.php file is "not found". I fixed this by setting the environment variable: PATH_TRANSLATED to the full path for test.php I can force php to not return these headers by using php-cgi -q is this an ok way to do it or am I not understanding something? X-Powered-By: PHP/5.3.3-1ubuntu9.1 Content-type: text/html
Just a question - why are you using php-cgi instead of the Apache mod_php5 module?
it can exist in your mind. buy a Zend Studio product and try to get meaningful support.
Have you compared Symfony to [Yii framework](http://www.yiiframework.com/)? It's made huge progress in the last year. Heavily OO, but as long as your comfortable with that, it's really smooth. Someone just made a nice new [getting started screencast](http://www.yiiframework.com/screencasts/).
Use of new!! PHP5.3 syntax constructs without use case: (check) Leaving aside that they devised a benchmark to advertise themselves as the fastest framework (without real-world parameters or usage pattern), I'm not sore it's sensible to prefer that over the API speed of use. Wasn't the main point of frameworks to simplify things? And specifically for the forms module (got me interested), I fail to see much novelty: http://docs.symfony-reloaded.org/guides/forms/overview.html It's just another form assembler, and they reinvented identifiers instead of following a HTML5 naming convention.
No offense, but judging on how absolutely rare PHP CGI is these days (not counting PHP FastCGI, which I use), combined with how utterly noobish people on /r/php are (this is an observaiton, not an insult), I don't think you should be using CGI at all.
Might not be using Apache. Nginx/lighttpd are getting pretty popular these days. edit: Though fcgi would make *a lot* more sense on those two servers.
Yii is anything but cookie cutter. It's active record implementation is only one small aspect of it. It's a very powerful framework. [Check out their API](http://www.yiiframework.com/doc/api/). I've used CodeIgniter, Kohana, CakePHP, and Yii is by far the most powerful among them IMHO.
His very first words are: &gt; I wrote a basic webserver So it's safe to assume he's not using Apache, ngnix, or lighttpd.
Oh yeah, ZF Form Decorators can take you a day to master and a day to forget. Mega fail on that part.
I like to write code with Stargate sg-1 on. Hulu has seasons 1-10 until the end of Jan.
You can't stop something from being an insult by saying it's not an insult. For example No offence, but you are ugly and stupid. outputs exactly the same as You are ugly and stupid. 
It's still not going to trigger a 500 error, which makes it irrelevant.
I am currently working on both a CodeIgniter and Yii project, and Yii is clearly superior. Will use Yii for new PHP projects going forward.
I'm a long time ZF user that knows all the ins and outs, but could not, for the life of me, wrap my head around lithium
The Decorators were a bit of a kludge, though having never designed a whole OO representation of Forms, Validators, Filters and Decorators, I wouldn't know where to begin. I think it was more a matter of missing tutorials that provided lots of different use cases.
Why would you use FastCGI when PHP-FPM is available?
Seconded. Yii is extremely powerful, but the initial learning curve is steep and I don't think its utility is obvious until after the learning curve.
FuelPHP: http://fuelphp.com or CI
same difference between c# and java, although c# is progressing amazingly and regularly, and java hasn't had a major update in 4 years &gt; ZF2's way of doing things certainly takes longer, but it is well thought out and every major decision in it is justified (so you can read why they did X instead of Y) in my personal opinion, does this really matter? with the plugin architectures of both, non-packaged options are available. take propel vs doctrine in symfony for example. propel used to be bundled but is now a plugin. doctrine used to be a plugin but now will be bundled. does it matter to me if I am a propel user? i still have the working propel plugin.
&gt; Stop whining about being downvoted It's not whining. It's cost benefit. Those particular people don't get help anymore. You might be surprised how often it turns individuals around.
I've been using Aptana recently which works quite nicely for me (before that I was just using nano!) What's the big differences between Aptana and phpStorm (as in... you've tried Aptana, but apparently like phpStorm more... why?) Can't actually comment on phpStorm tho' - this is the first time I've heard of it :)
Keep in mine that Lithium is still pre-1.0. It's not meant for production, nor does it have complete documentation. There are still holes in the native ORM too (people using it today are popping in Doctrine and things like that - Lithium's open architecture is specifically designed to work seamlessly with non-native libraries). It's also very convention oriented and less explicit, much like Cake. So when you aren't seeing all the objects being manually created, it might get a little tricky understanding where everything is, or where it's coming from at first.
Aw damn, I just typed up a huge reply and accidentally closed the tab. Unfortunately, Reddit is set up so this form is cleared on undo close tab. :| Anycase, to summarise. Code completion. For example, you have a $cache property in a parent controller class, in Kohana 3. Then you set it in the constructor: $this-&gt;cache = Cache::instance('xcache'); Then in a subclass you can freely type $this-&gt;cache-&gt;(ctrl+space) and you'll get full code completion. Then, when you press the go-to-implementation hotkey (I bound it to F3), it goes to the implementation of the abstract Cache class. However, you can also go to the implementation of the Cache implementation you are using! Just press CTRL+T (or equivalent rebound key) and you can select one out of all the Cache subclasses, and it will go to that method. Not to mention extremely smart property/class/etc. refactoring - just press a key (ctrl+alt+R for me) and you can rename virtually anything throughout your project, no need for standard search/replace. It's also very fast and lower on resource usage than Aptana. Loads quicker too. Did I mention extremely intelligent SVN merge, which works in most cases? The SVN module in Aptana is shoddy at best. I'm sure that the phpStorm one (presumably same as the IDEA one) has a smart little AI in the background. Oh, and you get full SQL completion and *inline* coloring. It also full supports javascript and jquery (with intelligent code assist). The static inspections are mouth-watering. I could go on literally forever. All in all, it's a pleasure to code in phpStorm.
The thing I like about Cake/Lithium is the fact that the frameworks seem designed around PHP and leverage what PHP does best. Cake and Lithium use objects where appropriate, but also make big use of Arrays. I find a lot of other frameworks operate under the "EVERYTHING IS AN OBJECT" model. This is great for some things, but when all your data is trapped in objects, it makes it more difficult to iterate and operate on that data. PHP kicks ass at array manipulation and any framework should leverage that strength, IMO. Frameworks like Codeigniter take this a bit too far in that I find its structure too loose (basically uses Classes as namespaces), whereas frameworks like Zend are too rigid. Cake and Lithium strike a nice middle ground. But, again, this is a personal preference. When I see things like $namefield = new TextField('name'); being defined in a controller (wtf?) in Symphony as opposed to echo $form-&gt;input('name'); being rendered in a view in Cake, I know Symphony isn't for me.
apples and oranges
FPM = **F**astCGI **P**rocess **M**anager. It's still FastCGI, albeit better than the standard implementation.
not if you use the identical operator ( === )
ZF2 isn't consulting the community on how they should implement something generic like a cookie or session class, they are consulting them on how they should implement framework critical features like: * MVC * Autoloading * Plugins * Exceptions
Yeah, but you're wrong about pretty much everything you've said in this thread. Combine that with the whining and it's pretty annoying.
For CLI, PHP does not populate `$_GET` and `$_POST` since those mechanisms just aren't used here. Several other `$_SERVER` values aren't populated as well as there simply aren't any headers to parse in a CLI environment. Instead, it populates `$argv` with an array of command line arguments and `$argc` with the count of command line arguments. You would have to parse `$argv` into `$_GET` on your own. If your PHP "webpages" are called as CLI via a shell command and you intend to pass either url parameters or the entire header as shell arguments, be careful of hitting any max character limit your shell may impose.
There is no elegance in that solution. 
How does the level of noobishness on r/php influence the usability of CGI? Regardless, you're a troll. All your comments in this subreddit deflect requests for help with programming obstacles into personal attacks against anyone and everyone. All of your comments. Do you get paid to do this? Are you staff from some rival, up-and-coming scripting language potentially competing with PHP? You mentioned once recently that "you had issues". Perhaps you should take care of these "issues" instead of interfering with regular online discourse or support requests here.
Cake's OOP model is absolutely crazy. I also find their orm/model system extremely confusing. I went for Cake for a project, boy did I regret that choice. Cake works fine if you stay within the cake featureset, anything beyond that is just crazy.
I'm a bit unsure. At first, my experience was very positive. Not only it was easy to setup, everything I put on it was FAST! One of my servers started having problems that I blamed on tinkering over 1 year of being somewhat amateurish at handling servers. I booted a new one, was up fully installed in less than an hour, but I don't appreciate the performance I have. I'm trying to blame this on my code but it's very fast on my workstation and at first I found the opposite: whatever performance I had on my workstation was twice as good on Rackspace. I went from 95% satisfied to about 80%, but yet unsure if I'm to blame or not for my problems. Still, their support is very good and I still really like the overall platform. An annoyance I did find was that for adding a TEXT DNS record, you have to go through their support. But it's small potatoes.
Just remember what you said when he figures out the actual problem. :)
Yeah, I'm sure that will magically make your statements regarding cPanel true. I'll make sure to log into cPanel now to copy all the logs before this magic occurs.
WTF? Besides being some what obnoxious, you are correct. Somewhat baffled why you've been downvoted.
I don't know what to say. I find Cake's ORM extremely straightforward and simple. It's not good for complex queries (but what ORM is?), but you can always run straight SQL in those situations. Not sure what's so "crazy" about Cake - it could just be that you aren't comfortable with convention-based frameworks. There's a lot of "auto-magic" happening in Cake that makes it a bit confusing at first glance, but once you understand what's happening, it's extremely quick to get the basics of an application up and running. But, again, I say use the tools that work best for you. I use Cake because it helps me "get things done". Whatever works, I say.
This is pretty old, but still valid: http://www.karlkatzke.com/php-symfony-vs-zend/ especially the first paragraph. Zend is more a collection of libraries, whereas symfony is a "real" framwork.
Why?
Cake uses properties to import more functionality in controllers. Not really changing anything in the controller, but allowing the user to more easily call functions... Controllers in general become a mess and have way too much responsibility. The 'AppController' is weird too. If you don't create one, one is created for you.. effectively allowing you to 'underload' functionality. I can totally see Cake working well for websites, but when you need a bit more serious web application development work done, it quickly gets in your way rather than helps you. In my opinion it goes against many of the established OOP best practices.
&gt; A double-square number is an integer X which can be expressed as the sum of two perfect squares. For example, 10 is a double-square because 10 = 32 + 12. Your task in this problem is, given X, determine the number of ways in which it can be written as the sum of two squares. For example, 10 can only be written as 32 + 12 (we don’t count 12 + 32 as being different). On the other hand, 25 can be written as 52 + 02 or as 42 + 32. This made no sense to me until I realised that it is supposed to read e.g. 10 = 3^2 + 1^2
Sorry about that, I blindly copy pasted from the fb page.. fixed it now.
I already knew them, go figure!
Everybody knows those ones, show us some of the cooler stuff. [array_pop](http://php.net/manual/en/function.array-pop.php) [array_shift](http://php.net/manual/en/function.array-shift.php) [array_key_exists](http://php.net/manual/en/function.array-key-exists.php) [array_keys](http://php.net/manual/en/function.array-keys.php) [array_walk](http://php.net/manual/en/function.array-walk.php) [array_chunk](http://php.net/manual/en/function.array-chunk.php) [array_flip](http://php.net/manual/en/function.array-flip.php) [range](http://php.net/manual/en/function.range.php) Better yet. There are a ton of array functions, read them all
My favorite combo is array_map used with create_function. Another awesome, although not really an array function, is call_user_func_array.
Does shit like this make money? The site is full of crappy paraphrases from the PHP manual.
I know that, but it's an oversimplification. It's like saying "everything's just ones and zeros" because when you boil it all down, that's all it is. So, if that's the logic, why not just program everything in pure binary machine code?
For beginner level dont you think this is sufficient ??This site's first motive is to share knowledge not to make money !!
The site takes content from php.net, which is already out there, and makes it worse, and slaps about a million ads around it. How is this sharing knowledge? The knowledge is already out there in better form and with fewer distractions.
PHP in general goes against many of the established OOP best practices - it's not a proper OO language, and isn't optimized for it. Cake does lazy loading of objects into a Class registry that is populated by configuration. It does not create extra instances, it doesn't waste memory - this way is actually remarkably efficient and clean. It's far better to be able to use what you've told the controller you want to use in the config than have to sit there going. $session = new SessionComponent(); $requestHanlder = new RequestHandlerComponent(); $cookie = new CookieComponent(); ...at the top of every action. I'm going to need this stuff. It's pointless redundant code to have to constantly keep writing. This is why configuration makes sense. The AppController is simple inheritance. It allows you to add app-wide logic. I usually do things like localization setup (which language was this request made in?) that every controller across the entire application is going to need. Again, lack of redundant code, encapsulated logically. You can organize your application however you like. If your controllers are bloated and messy, that's your fault, not the framework's. You should move more of your business logic into the models, and organize your controllers by "feature", not per model. Other than Lithium, I'd say Cake is one of the best PHP frameworks for "getting out of your way". Cake generally does a good job of giving you a way to get down to "bare metal" if the framework's assumptions don't work in a specific case. But, again, your milage may vary. If you don't like the way Cake works that's fine. That's why there are so many choices in PHP frameworks.
The site didn't copy anything from other site !!! Please dont blame like this !!!check through copyscape !!
I don't know why the douche-bags are downvoting your post. Have an upvote on me. 
I said paraphrased. And if anyone is checking through copyscape, it's because they paid (or are) some crap content spinner. It's this kind of web sleaze that's turning the internet into a huge junkyard.
Does Yii only support Active Record?
Because sorting and joining/splitting (exploding/imploding) are features of ALL languages higher-level than assembly? The article isn't going to teach anyone anything unless they started programming yesterday, in which case they probably aren't on proggit/phpit.
It would be great if the author wasn't lying to beginners. Arrays in PHP never have to be of the same type.
This article is terribly inaccurate and would mislead beginners to PHP. &gt;An array is a series of elements of the same type placed in contiguous memory locations ... using an array we can store 5 different values of the same type, int for example, with a unique identifier. In case a beginner comes across this article: PHP let's you stuff whatever mix of data types you would like in an array. In fact, once you stuff a value of one type into an array, you can change it later if you'd like. 
use it a lot. 
I don't know what Recess! is, but I always lazy-load database connections. It's built right into the thin PDO wrapper that I use. Often, everything a page needs is already in Memcached, so the database is never even touched.
I completely agree and from the way he got offended it seems like it's his site to top it off.
The original reason I had put that option in there is that I had to make queries to my local database, and then a remote radius server as well. But not every call needed both databases loaded, so this lets me only establish a connection to the database that is needed by a particular rest call.
I've seen plenty of newbies here in /r/PHP. They come here to get help not to be put down.
I've used both ZF and Symfony with Doctrine, and I think they are equal on the level of having a good MVC implementation along with the same ORM. I do prefer ZF over Symfony, because it has a more robust set of libraries. I especially like the api for combining ACL and Navigation. Also, the form api is pretty nice.
Nice work Ryan. This is something I've had on the shortlist of high impact optimizations that I've never gotten around to. May be pulling this into the master branch soon.
Proggit punishment fetish.
The way PHP handles pconnect makes using them safely troublesome. For example, if your script opens a transaction or performs a `LOCK TABLES` and then terminates unexpectedly, the connection is kept open along with that table lock or transaction. This can cause side effects for other queries against the affected tables. The lock requires either a disconnect or an unlock on the same connection. The transaction will eventually either timeout or cause others to time out. The worst thing, though, is that the connection will eventually be reused by another script. That script will execute not knowing that it's inside a transaction or dealing with locked tables. Unless you're willing and able to deal with these scenarios in your code, you probably should not use pconnect. Most databases don't have a lot of overhead for creating new connections and authenticating. A `ROLLBACK` followed by a `UNLOCK TABLES` on connect takes care of the picking-up-a-bad-connection problem, but won't fix the overall lock issue.
I assume the database is hosted on the same box as the webserver (you referenced shared hosting). In that case if the database goes down its likely the webserver will follow, in which case your script won't work. If you want the job done properly then use an [external service](http://www.google.com/search?q=website+uptime+monitoring&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a).
There are, but your database is more reliable than they are. Just monitor everything. &gt; Or is there a better way to notify the admin if the webserver or database goes down? You are looking for [monit](http://mmonit.com/monit/).
Yeah great thanks, [Site Uptime](http://www.siteuptime.com/compare.php) looks pretty cheap and SMS works so that's even better.
Looks good but then you'd need another server for doing the monitoring. Then what's going to monitor the monitoring server? Potentially if both went down you wouldn't know.
While there are better methods for that scenario, if you really want to store info without a database the term to google is "[php flat file](http://www.google.com/search?source=ig&amp;hl=en&amp;rlz=&amp;q=php+flat+file&amp;btnG=Google+Search&amp;aq=f&amp;oq=)". Just note, flat file databases are quite slow and obviously do not support complex queries. To speed things up a bit I would store things inside of a separate include containing a php var and then use [fwrite()](http://php.net/manual/en/function.fwrite.php) to update it's contents. That way reading is quick, but writing will still obviously be slow. Edit: A good Linux host will frequently run years without downtime. I recommend getting a better host that you can trust. I have had good success with MediaTemple. If anything does go down they tell you about it and notify you when it's fixed.
You could mess with session_id() and switch to a "server" session (i.e. some constant ID that you chose), grab your variable, then switch back to the real session id. But probably much easier would be to create a file in /dev/shm - if the server (NOT php!) gets restarted that file will be gone. Use serialize() (not JSON) to convert your variables into a string. i.e. $server_status = array(.......); file_put_contents('.server-status.tmp', $server_status); $server_status = @unserialize(file_get_contents('.server-status.tmp')); (The @ is in case the file doesn't exist. If that happens $server_status will equal false and you should initialize it.) If you specifically need to know when apache restarts (so you can force-send errors again), do (assuming you are using apache): $pid = file_get_contents($_ENV['APACHE_PID_FILE']); Then store $pid in your file (i.e. $server_status['pid'] = $pid;) and check if it changed when reading the file. If you do this you can use /tmp or your home directory for the text-file and not worry about it getting removed on server-restart because you would detect that anyway. Well, hopefully - if the PID is always the same on restart, that would not work. In that case do filemtime($_ENV['APACHE_PID_FILE']) and store that as well, and that really is guaranteed to change.
&gt; I'm thinking a text file would work and use JSON encoding to store the variables, but it can get a bit clumsy with setting file permissions on shared hosts etc? If you are on shared hosting then any permissions issues with file storage will also affect your database. That is, if people can get in to read your files then they can also look at your source to find your database password. That aside, I'm not sure why you'd want to use JSON rather than just serialize. It's not as if you are trading data with anyone else.
[APC.](http://php.net/apc_store) Though really you should just fix your DB or use a more reliable piece of software.
Yeah I'm thinking a virtual dedicated host might be better for me due to those security issues and sharing session data on shared hosts. Reason for using JSON is that it's readable and produces a smaller output string, also it's supposedly a bit faster for encoding. Though in this case it's probably not going to make much difference if only storing a few variables.
Use a monitoring service like basicstate.com (they have a premium option with more frequent checking)
I can see how you would use it to test the web server but how would you use that to query whether the database server is running and returning results? Maybe set up a custom PHP page to query the DB and direct it to that? I thought people disable internet access to the database server as a security precaution i.e. all access through PHP MyAdmin or web app.
If your site isn't returning errors when the database is down, i.e. you can survive with less than full functionality and keep serving pages, then set up a custom page like you said. If the database is down, return an error response for that page. (anything in the 400 or 500 series)
I've heard a lot of buzz around PDO. It's about time I gave it a go. As for prepared statements... thanks for the article :)
Oh and here's the article in english: http://php.net/manual/en/pdo.prepared-statements.php
Oops, damn. Thought i'd copied the english link. :/
I think people worry about their code not working the way it used to, or that they have to learn something new. Both cases couldn't be further from the truth. If you currently use mysql_db_query, you will still understand this: $q = "select name from sometable where userid = ? "; $db = new DbSql ($q); $db-&gt;execute ($userid); if ($db-&gt;numRows ()) { while ($row = $db-&gt;fetch ()) { echo "Found user ".$row['name']."\n"; } }
Please stop trying to make German the default language of Reddit!
so does the pdo always escapes everything properly? I can just put $_POST and $_GET values in without any checking, typecasting or escaping? ps. notice the params start from 1, not 0
&gt;I can just put $POST and $GET values in without any checking, typecasting or escaping? you could, but that would be a fucking stupid idea...
Because I wrote my own webserver and I'm trying to get it to handle PHP. I'm not using apache.
well the next step is to use fastcgi. this is really just to understand how it works. perhaps you can explain what is necessary to use fastcgi vs cgi
&gt; so does the pdo always escapes everything properly? It's not PDO that does the trick, it's prepared statements. (PDO without prepared statements can be just as insecure as mysql\_query.) Parameters to prepared statements don't _need_ any escaping, because they actually use a different protocol under the hood.
Yes, you will absolutely never get any sort of SQL injection as long as you rely on prepared statements.
Not at all. So long as it is provided as parameters instead of into the strings directly the threat of SQL injection is fairly nonexistent.
I'm not talking security, I'm talking input filtering... why the hell would you dump user input into the database without checking it's validity first?
That's not escaping though, is it? :)
&gt;without any checking I know it isn't :P Sorry, I find it annoying when people take PDO as a magic bullet. you still need to make sure you input fits the criteria of the field. you wouldn't want an email address of 555-6289 now would you?
Validity is subjective and independent of data storage. The parent of your vulgar comment did give any indication that he was not checking the validity of his input and yet you attacked him.
&gt;did give any indication that he was not checking the validity of his input except he said exactly that, without ANY checking. that is considered an attack? I said the premise was stupid, not the poster....
tl;dr use mysql_real_escape_string() along with quotes vulnerable code: mysql_query("select * from user where id=".mysql_real_escape_string($_GET[id])); poc exploit: http://localhost/sql_test.php?id=1 or sleep(500) The patch is to use quote marks around id: mysql_query("select * from user where id='".mysql_real_escape_string($_GET[id])."'
umm, why not [just print it to the error log](http://php.net/manual/en/function.error-log.php)?
I've been reading up on pure SQL, but a few months ago learned me the basics of PDO. The one thing I did like about using sprintf to escape was being able to define what type of input was expected. Does PDO allow this? ie: %d, %f, etc.
Background: this is a continuation of my [failed attempts](http://www.reddit.com/r/PHP/comments/dyp22/redefine_your_functions_at_runtime_with_patchwork/) to get some attention to [Patchwork](http://antecedent.github.com/patchwork/) and the general state of monkey patching in PHP. As per [this suggestion by ryanto](http://www.reddit.com/r/PHP/comments/dyp22/redefine_your_functions_at_runtime_with_patchwork/c13xgpx) (thanks, by the way!), here goes a blog post on a specific application of monkey patching, a beggining of a series which I'm hoping to continue. Feel free to ask questions and say what you think. Also, feel just as free to tell me this is going nowhere, but in such case, please care to explain why. Thanks.
Oh, very cool. Best of luck.
Nein.
If you are interested in sprintf-style placeholders, you should check out [fDatabase](http://flourishlib.com/fDatabase). It is a wrapper around all of the major database extensions including PDO, and supports sprintf-style escaping for both prepared statements and regular queries.
Using... sprintf... to escape? o_O I mean, yeah, I'll use ($_REQUEST['var']+0) to make sure a value is an integer, but you do know that's not what *escaping* is about, right? Right? If not, please give us the URLs of some sites you've developed so we can see if there's any profit to be made from SQL injection. I'm gonna need the money for an iPad 2.
Nah because you can validate by iterating over the $_POST data, running necessary validations for each field, and throwing exceptions for things that don't validate. If it validates, form the object from your $_POST, if it doesn't throw another exception and also send a list of the failures and reasons to the template so that it can be spat out.
&gt; Maybe set up a custom PHP page to query the DB and direct it to that? Yep, a simple canary-in-the-coal-mine page that connects to the database and executes a cheap query, generating a known response if all is well.
 $query = sprintf("DELETE FROM myTable WHERE id = %d", mysql_real_escape_string($iColumnId)); And like I mentioned, this was before I switched to PDO. edit: Hell, it's even in the PHP manual: &lt;?php // Connect $link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password') OR die(mysql_error()); // Query $query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'", mysql_real_escape_string($user), mysql_real_escape_string($password)); ?&gt; http://php.net/manual/en/function.mysql-real-escape-string.php Are you sure you know what you're doing?
For anyone using PDO who is also sane enough to use exceptions for their error handling, this line will save you a world of pain (remove the \ if &lt;5.3): `$pdo-&gt;setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);`
I'm already using [fMailbox](http://flourishlib.com/docs/fMailbox) to interact with Gmail and I absolutely love it (some caveets). I may have to take a harder look @ Flourish in general!
I would not choose to use either ZF or Symfony as an MVC framework, as there are much better options out there like Kohana (wwww.kohanaphp.com). I do use ZF as a library, however, in specific use cases because it is mature and robust. Thats one thing the Zend team got right, not relying on antiquated PEAR libraries. Although Kohana's library of modules is getting quite substantial. I notice Symfony 2 isn't benchmarking against Kohana 3. Would be interesting to see how things stack up.
Thanks! Typically I have the database on the localhost for the sites I build, but on this particular project I failed at managing the scope creep and now I have to load data from three different servers depending on the API call heh. 
Yes, I am, thanks, and boy do I apologize for trying to help. My point was, the *escaping* part is mysql_real_escape_string. So you saying that you *escape* parameters with sprintf was scary.
I reread and yeah I can see your train of thought. But suggesting you want to hack my websites is a little over the top.
Or, you know, maybe it was a joke.
I actually came across a case where PostgreSQL was using a much less efficient algorithm when performing a prepared statement vs. straight SQL. That query was called multiple times during page execution, and it really made a significant difference, so I ended up going with sanitizing the input and plugging it in directly into SQL vs. using a prepared statement. For the majority of cases it really does make most sense to go with prepared statements, though -- make straight SQL a rare exception rather than the rule.
http://stackoverflow.com/questions/2190737/what-is-difference-between-mysql-mysqli-and-pdo PDO does not depend on your database being MySQL - it can work for all.
500 Internal Server Error edit: works now
Yeah, I would assume that doing straight SQL CRUD without extra layers like PDO in the way would be faster. PDO is an absolute necessity if your current query is even remotely influenced by user input or interaction. But, if you're running something that's set in stone, I think unprotected queries would be fine, right?
Escaping values when you use them in a query is simple to do, certainly easier than the multiple lines of commands required to prepare/bind/execute a query this way. The only advantage I can see to prepared statements is if you're repeating the same query many times with different parameters since it apparently keeps the database from having to optimize the query each time.
They are probably gonna create more PHP "certifications".
Oh, and while you're at it, stop trying to get email address validation right. If it has an "@" at and at least one "." after the "@", pass it to your MTA. If it says "no wai", it's invalid, otherwise assume it's valid and wait for the click in the sent link. Thank you. (this assumes you're not dealing with local accounts, which is a non-issue on pretty much every web site)
Must be something on Github Pages' side. Sorry about that, have you tried reloading the page?
Next time, use the language-agnostic link: http://php.net/pdo.prepared-statements
The biggest difference is in how the placeholders are bound to PHP variables. It's a huge one, and I love explaining it because it shows how utterly stupid mysqli is compared to PDO. Disclaimer: I am a PDO fanboy. First similarity: Both PDO and mysqli use question marks as placeholders. PDO also can do named placeholders, but they suck subtly. Second similarity: Both work just like this pseudocode: $thing = 'Hello!'; $sh = $db-&gt;prepare('SELECT foo FROM bar WHERE baz = ?'); $sh-&gt;bindPlaceholder($thing); $success = $sh-&gt;execute(); Here's where things fall apart for mysqli: it binds *by reference*. Here's mysqli pseudocode. $thing = 'Hello!'; $sh = $db-&gt;prepare('SELECT foo FROM bar WHERE baz = ?'); $sh-&gt;bindPlaceholder($thing); $thing = 'Herp, derp.'; $success = $sh-&gt;execute(); // Executes "SELECT foo FROM bar WHERE baz = 'Herp, derp.';" That's most certainly not what you wanted. Now, this usually isn't a problem, right? Right? Nope. The second big difference between mysqli and PDO makes it a really annoying problem. PDO does not require you to bind each placeholder one at a time. Instead, you can pass an array to execute: $thing = 'Hello!'; $sh = $db-&gt;prepare('SELECT foo FROM bar WHERE baz = ?'); $success = $sh-&gt;execute(array( $thing )); If you needed to give an array of values to the bind methods in mysqli, you'd need to loop over them, and looping over things that will eventually become references is perilous as fuck. The structure `foreach($array as &amp;$ref)` can work for most modern PHP versions, but don't count on it in anything more than a few years out of date (not that you should willingly write new code for ancient PHP versions). **UPDATE:** PDO's individual `bindParam()` method *also* works by reference. However, PDOStatement's `execute()` taking an array removes the horror that can occur in mysqli when you need to iterate over an array. **/UPDATE** This matters only because most devs I've seen generally prefer not to have to do the prepare-bind-execute tapdance and usually write a wrapper for the underlying DB library with convenience methods. Using mysqli as the base makes the convenience library severely more annoying to write. **tl;dr:** mysqli's bind syntax sucks and works by reference. PDO's bind syntax has a slicker alternative ~~and~~ *that* works by value.
Last time I said that, the guy I was trying to help just went postal and stalked me and everything. See: http://www.reddit.com/r/PHP/related/eu6yo/hack_my_code_hopeseekr/
Jtreminio, 1 hour ago you were talking all big and bad about using sprintf() + mysql_real_escape_string(). Why, 30 minutes later, are you espousing the benefits of PDO?
SQL escaping protects against a few known exploits. It is **totally** impossible to use escaping, for instance, to avoid LIKE, GROUP BY, and LIMIT attacks, and you probably aren't doing all that's necessary to avoid character set attacks, either. SQL prepared statements will protect, theoretically, against virtually every single type of attack, known or unknown.
The thing I hated the most about mysqli's referencing was that you can't pass things like `$obj-&gt;getId()` and `trim($var)`. PDO is also super easy to use in data-model mappers.
After being able to read the article I do have a series of questions. Brief description of internal working? Why should someone use this instead of simply namespacing the tests and redefining the desired classes within (of course Dependency Injection would be required)? Did you perform a performance comparison between Runkit and Patchwork?
For things like that you should make sure your Postgres server's as new as possible. They made a lot of improvements to the query planner between 8.0 and 9.0, I had one query taking half an hour as prepared statement in 8.1, took 10 seconds in 8.2.
&gt; I've been reading up on pure SQL, but a few months ago learned me the basics of PDO. The one thing I did like about using sprintf to escape was being able to define what type of input was expected. &gt;Does PDO allow this? ie: %d, %f, etc. I pretty clearly said I'm using PDO now, but that before making the jump I used sprintf + mres. edit: not "pretty clearly" in this response, but further down the chain. Anyway, what's the problem with knowing multiple tools?
crazy seems to be pretty common on /r/php/
Using it to pay the electricity bills for their php-internals ~~flamewar~~ mailing list server, obviously.
Or rather array_map with anonymous functions from 5.3
"PDO also can do named placeholders, but they suck subtly." can you elaborate on this? I find named placeholders to be far more effective than just ?
Using +number for casting is a bad idea, since it makes your code harder to read and understand (is he casting or is that some debug code left in ? A magic value left at 0 maybe ? Who knows ...). You can use either of these two: (int)$_REQUEST['var'] intval($_REQUEST['var']) They will always return an integer no matter what you feed them (the difference between the two is that intval can take a base for the conversion as second parameter)
Internally, it works like this: * The `file://` protocol is "overridden" with a stream wrapper. * Every `include`/`require` call causes the file in question to run through that stream wrapper. * The stream wrapper preprocesses the file by injecting some code at the beginning of each function definition (indiscriminately, not only into the ones that are redefined). See [`CALL_INTERCEPTION_CODE`](https://github.com/antecedent/patchwork/blob/master/lib/Preprocessor/Callbacks/Interceptor.php) for the exact injected snippet. * Every time such a "preprocessed" function is called, the injected code checks if the function is redefined. * If it is, the call is forwarded to the redefinition. It's extremely hacky, but... it works. The performance overhead on each function call is reflected in `CALL_INTERCEPTION_CODE`. Preprocessing takes some time as well. I haven't done any performance comparisons yet, but I expect Patchwork to be slightly slower. And finally, the post mentions that monkey patching is a last-resort tool for forcing code into testability. So, if your code uses dependency injection in all the right places, just test it as it is. If it doesn't, but you can afford to refactor it, go for it. If you can't, well, there's monkey patching. Static methods and third-party AR libraries seemed like a good example, as refactoring a foreign library rarely makes any sense.
Nine.
 $thing = 'Hello!'; $sh = $db-&gt;prepare('SELECT foo FROM bar WHERE baz = ?'); $sh-&gt;bindPlaceholder($thing); $thing = 'Herp, derp.'; $success = $sh-&gt;execute(); If this wasn't intended, then it's just bad program design in the first place. Passing by reference saves memory and gives the programmer the option to use more memory for static variables, or not. 
&gt; PDO is an absolute necessity if your current query is even remotely influenced by user input or interaction. That's a pretty bold overstatement. People have been safely handling data for years without PDO. It just makes some parts of it simpler (at the possible cost of being slower).
Ten. Ready or not. Here I come!
You can only use a named placeholder once per query. If you repeat it, the execute fails. This can be a real pain in the ass when you need to use the same variable three or four times in the same query, and already had it in an array. 
&gt; Passing by reference saves memory While this is true, if you've found yourself micro-managing the memory use of your PHP script, something's probably wrong. 
Guilty... 12 hours of my life I'll never get back...
&gt; Do the things go really that slow among PHP developers? The root of the problem is that nobody ever takes down old, outdated tutorials. There's over a decade of "How to Use MySQL with PHP!" tutorials that contain code that will still work today. They are horrible, without exception. Very few people understood SQL Injection and other similar vulnerabilities in those dark ages, and protection against malicious users wasn't considered by most tutorial authors. As a result, too many people new to the language learn bad habits without realizing it. It's one of the reasons PHP developers get so much grief.
I used to use (int) but I'm pretty sure I had to do a search-and-replace one day because my values were bigger than PHP_INT_MAX. (Might have been in my Twitter import script, because I don't see where else my BIGINTs would already have gotten that big.) I admit it does help that I work alone and, even if I had to work with someone, they'd in fact be working *for* me so they'd just have to deal with the +0 as a company-wide convention :)
Not to mention that most absolute budget hosts use PHP, and tend to uhh, neglect updates (unless you sign up for our new accounts! Twice what you already pay!). I'm stuck maintain a site using PHP 4 because of this. Even the good hosts needed a gophp5 campaign to upgrade. 
The more efficient a script is, the more simultaneous users you can serve with the same resources. It's a shame so many programmers take for granted, their available resources.
In this case there is no real memory gain. Yes, a copy would be created, but it would also immediately be destroyed once the execute is done.
says the guy who could hack my code. And has yet to provide the vulnerability or admit he was wrong. Perfect charcter we need helping reddit out
Thanks for sharing this link. I am just sinking my teeth into PHP and the book I am using was only mentioning mysqli I didn't even know to look at PDO and now I have something new to investigate. I am learning that there is a lot of things that == that criteria!
what are you some kind of German nazi
Depends on the developers. Your jab at PHP has been acknowledged, you're very clever.
[PHP's references make your code *slower*](http://schlueters.de/blog/archives/125-Do-not-use-PHP-references.html). Trying to micro-optimize just to save a few bytes is a huge waste of time. Focus on optimizing your queries and major loops.
&gt;I used to use (int) but I'm pretty sure I had to do a search-and-replace one day because my values were bigger than PHP_INT_MAX. (Might have been in my Twitter import script, because I don't see where else my BIGINTs would already have gotten that big.) It wouldn't change anything, once it is an int it can't exceed PHP_INT_MAX no matter how you cast it; in php an int can **never** be bigger than PHP_INT_MAX, be it casted with (int), intval, +number or any other way. If you try to cast a number bigger than that as an int, it will truncate to the value of PHP_INT_MAX (I don't know if this is documented behavior or just an implementation detail). If you try to cast it by the way of an arithmetic operation (+number), it will actually see that it can't work, cast it as a float and lose the exact value/precision of your number in the process, as indicated on [php's float documentation big red alert message](http://php.net/manual/en/language.types.float.php) &gt;So **never trust floating number results to the last digit**, and never compare floating point numbers for equality. If higher precision is necessary, the arbitrary precision math functions and gmp functions are available. So no, in that case +0 will not cast it as an int and will not work as intended if you need to work with numbers bigger than PHP_INT_MAX that are meant to be used as IDs like you suggest (an id is of no value if you're not really sure of some of those last digits ...). If you have to work with arbitrary length numbers, you can't use php's natural types, you have to use either [BC Math](http://www.php.net/manual/en/book.bc.php) or [GMP](http://www.php.net/manual/en/book.gmp.php). &gt; even if I had to work with someone, they'd in fact be working for me so they'd just have to deal with the +0 as a company-wide convention :) In that case it would be forcing a bad convention on the whole team because you like it rather than because it's the right way to do things ... I guess that's a good way to end up at [The daily WTF](http://thedailywtf.com) :( PS: not trying to be a jerk or anything, but I made this post because what you are doing is clearly the wrong way, and while PHP is very permissive and tries to make it (barely) work for you, if you ever reach an edge case or transition to another language with similar restrictions it will bite you in the ass.
&gt; Focus on optimizing your queries and major loops. Focus on where [real profiling of your code](http://xdebug.com/) tells you your bottlenecks are. This may be your queries and major loops, or it may be somewhere else entirely.
It still works "longer" than casting to int does, though. If I'm reading the documentation page correctly, "a precision of roughly 14 decimal digits" should mean that it's gonna work 10,000 times longer than casting to int. (Unless the big red alert message is imprecisely worded, it seems to me that the random approximations should only affect what's *after* the decimal point, as long as you're below that 14-digit limit.) And then, yes, it's gonna implode :) In any case, you're right on principle, and I thank you for pointing it out. Switching to "+0" was a quick fix I improvised when my Twitter script stopped working, and I didn't really research it; at some point I'll have to edit my scripts and treat database IDs as strings. It was always my intent and it's just not a huge emergency. (I'm not Facebook. And it's a minor edit, not something that will change the whole architecture.) As for using +0 in every other case, well... I don't have a good reason for it anymore, but I'm just used to it and don't see the harm :)
var_dump $entity-&gt;field_required1. That's what I always end up doing.
Pardon, but how would you use that in this context? I'm using the Devel module and confirm that the field I am inspecting indeed does have an item on offset 0 (and it has a value property with valid data). PHP noob. :(
Hey, I said "give me the URL to your site", much as garoorag just said. You never gave me the URL.
I'd just stick var_dump($entity-&gt;field_required1); somewhere in the code and reload the page. *Disclaimer*: this is not how you should debug stuff. But it'll give you insight into that object.
I gave you every piece of code. What do you need the url for, your either trolling or you could just tell me the vulnerability from the code. You never proved it. Just admit you were wrong.
On a serious level, has anyone done a Zend cert and would recommend it to someone else? I had a look at the practice book and nearly all the questions were trick questions.
http://uk.php.net/manual/en/book.http.php Is really advanced, you'll need to install it via pecl though: pecl install pecl_http It's a low level affair, so you might want something like [PHP Simple HTML DOM Parser](http://simplehtmldom.sourceforge.net/)
CURL with a cookie jar will do a lot of this.
Can PDO utilize the mysqlnd backend? Or it's irrelevant in case of PDO?
already had it in an array? are you saying: $stmt = $pdo-&gt;prepare($query); $stmt-&gt;execute($params); $param['id'] = 2; $stmt-&gt;execute($params); // fails 
Just FYI... I've added a new more extensible logging system to Slim. Read more at https://github.com/codeguy/Slim/wiki/Documentation#logging
&gt;If you needed to give an array of values to the bind methods in mysqli, you'd need to loop over them Screw everything about that. Why couldn't they let you just pass an array along? I always use some abstraction class or another (PDO, whatever classes CodeIgniter and WordPress use, etc.) for just this reason. It makes it a hell of a lot easier.
Nyet
I mean: $sh = $pdo-&gt;prepare('SELECT foo FROM bar WHERE baz = :ph OR glorp = :ph'); $sh-&gt;execute(array( 'ph' =&gt; 'Whatever.' )); This will fail with an error about not having enough replacement values.
mysqlnd is the driver-level bit. It's used for all three APIs (mysql, mysqli, PDO).
You can try sqlite ( http://www.php.net/manual/en/book.sqlite.php ) it's enabled by default in PHP 5.x, but it's probably easier serializing ( with json or php serializer ) a php data structure and saving it in a file.
I used beautiful soup (written in python) to scrape millions of pages. Really easy to set up and run. Fast, multi-thread, multi-machine. No js support though. I also use firefox/selenium to scrape js heavy sites (this will give you xpath (XPath checker) and the rest) - dump this info out into 'reports' (some sort of HTML dump) then parse these with php. I grab DOM nodes, simulate clicks and mouse overs, then dump DOM nodes. I seperate the mini dumps in the file with \n\n++++SOMESTRINGHERE++++\n\n. Pretty easy to parse with a simple finite state machine (I love fsm's :) ) I run selenium with php scripts, using the remote control thingy: http://seleniumhq.org/projects/remote-control/ My project has some PHP, the selenium PHP library, selenium server (a JAVA program that controls firefox for you passing messages to and from it.) Start the selenium server, then run the .php file (php -f scrape.php) firefox pops up, it then controls firefox (choose a DOM node, perform an action e.g. a click) wait for page response (e.g. wait for AJAX to respond) then DOM-&gt;node-&gt;toText() and save this into a file or DB or whatever. The fun bit is watching the php browse the web with firefox. You think this comment was written by a human? Think again, I am a simple, 23 line, .php script (and two of those lines are comments). Hope this helps.
&gt; Passing by reference saves memory Not necessarily. PHP will not actually make a copy the value of a variable until (and unless) it really needs to. It is a kind of passing by implicit reference so long as you do not make any changes to the copy. It allows you to pass massive data structures into functions, without worrying about those data structures being duplicated in memory - *so long* as the passed-in structures are not modified within the functions (that is something to bear in mind when writing functions). Also as has been pointed out by other people: if you have to pass by reference, then you *have to* pass in something that *can be* referenced, i.e. a variable. You may wish to pass in the output from a method without having to store it as an intermediate variable.
That's not a massive restriction. Used that on Oracle for years (1990s) and it never really got in the way. Being able to put the placeholders in any order wrt the input array, now that is a great bonus. Used ADOdb in PHP for years, and having to ensure the order matches the query exactly is always something that takes a little care. When the order is out, there is little that can be helpfully provided in the error log, while ":ph has not been bound" is easy to track.
Something like this... $auth = Zend_Auth::getInstance(); $identity = $auth-&gt;getIdentity(); $role = $db-&gt;getUserRole($identity-&gt;id); if ($identity-&gt;userRole != $role) { $identity-&gt;userRole = $role; $storage = $auth-&gt;getStorage(); $storage-&gt;write($identity); }
When I use the php-cgi version it spits out these two lines before the content X-Powered-By: PHP/5.3.3-1ubuntu9.1 Content-type: text/html Which means I can't just pass it through the webserver to the user, I have to do something with these headers. I am not outputting anything before these headers (I think I must be) so why are they being shown as content rather than headers?
http://www.reddit.com/r/phphelp/ Although, this isn't really a PHP question, but a general logic one. What you need is a function to work out the distance between two lat/long points. Work out the max/min values that lat/long can be with the distance set as 'x'. Then just search the DB for all records within those ranges. Although this would give you a square around the central point.
http://dev.mysql.com/doc/refman/5.5/en/gis-introduction.html
well this belongs more into /r/mysql, if any. Anyay, the mathematics behind your query is not trivial. The best and easiest way to solve this kind of problem is to use postal codes (in europe they have a few miles in radius). Then you need to either fetch or pregenerate a map of all possible postcal codes matches as a table: distance_cached (postal_code1 - postal_code_2 - distance), then run: select postal_code_2 from distance_cached where postal_code1=&lt;your postal code&gt; and distance&lt;50; The idea is that whenever you have a high-traffic fast-response query you need to pre-cache.
You want a [Great Circle distance](http://stackoverflow.com/questions/574691/mysql-great-circle-distance-haversine-formula)
Check out https://code.google.com/apis/maps/articles/phpsqlsearch.html#findnearsql This will give you the exact algorithm required to accomplish what you are looking for EDIT: also known as the haversine formula https://secure.wikimedia.org/wikipedia/en/wiki/Haversine_formula
PDO seems nice, but you lose some valuable features that are supported by the native db-driver. To illustrate this, just look at: http://svn.php.net/viewvc/php/php-src/trunk/ext/pdo_sqlite/sqlite_statement.c?view=markup Do you see any references to sqlite_bind_double? While PDO unifies the driver layer, it goes with lowest common denominator, and causes additional bugs because of that. You cannot even control SQLite's busyTimeout with PDO. And what about PostgreSQL's bytea? As you see, in many cases PDO is just another layer for the bugs. I have never had a need to change database for my projects, and even if I had, native db-driver is one of the smallest problems.
Absolutely excellent. :) Side-question. I'm wanting to generate a load of random locations just so I can test this out. I'm not really knowledgeable about latitude and longitude. I live in Ireland, so I'd like all of the values to be within that general area (not too fussy about it being bang on). &gt;The geographical alignment of Ireland indicates latitude of **53 o 00' N** and longitude of **8 o 00' W**. I have absolutely no idea what that actually means. Is **53 o 00'N** something like 53.000000?
What you want is some geolocation. This [stack overflow on geolocation SQL](http://stackoverflow.com/questions/2695365/geolocation-sql-query-not-finding-exact-location) probably gets you at least part of where you want to go.
Please ignore that other advice you were given and use MySQL GIS instead. MySQL has stuff built in for this. You shouldn't implement your own haversine (and you don't actually want haversine anyway, you want great circle), nor should that author: it makes indexing radically less efficient, you start dealing with floating point creep, et cetera.
I have a php library that I made at home that can do just this. Let me know if you can get it working or not. If not, I'll be able to help you later tonight.
Here's how I did something similar: $result = db_query(' SELECT city,county,state,zip,longitude,latitude, (((acos(sin((%f*pi()/180)) * sin((latitude*pi()/180)) + cos((%f*pi()/180)) * cos((latitude*pi()/180)) * cos(((%f - longitude)*pi()/180))))*180/pi())*60*1.1515) as distance FROM {zipcodes} HAVING distance &lt;= %d ORDER BY distance ASC LIMIT 0,1000' ,$latitude, $latitude, $longitude, $distance); (This is using the Drupal database abstraction layer but should get you on the right track). 
you should look up the radians function :) 
/r/pittsburgh might be useful too. I just got a job actually:)
While it would have saved some keystrokes when that was written, what benefit specifically does it give now that it has been written? If my client needed amount of storage space recovered, wouldn't turning off logging or upgrading the server be a cheaper solution that cracking open this old code and rewriting it for the sake of brevity? Also, I'll be the first to admit, I'm no mysql dba, I'm a developer, I needed a list of cities, counties, states, zipcodes and lat/lon of their city centers - this gives it to you with a single trip to the db. Responses like yours are why people are so reluctant to provide assistance with other programmers on the web. 
One hundred percent full of crap. Not only are great circle and haversine simpler than this, but they're more accurate than this, and there's stuff built into MySQL to do this already. It's really important that you not give advice when you don't know a good answer.
How about "that gives incorrect results on the order of 50 miles or more because the Earth isn't a sphere, another fifteen miles because that gets calculated in a bad range of fixed point, and that loses all the GIS indexing capability built into basically every modern database?" Just because someone is critical of you doesn't mean they're wrong to be. Your answer might actually be crap.
He wants GIS. Geolocation means "guess where I am on the globe," not "please find other things on the globe given these physical constraints."
This is a really good idea - don't try to reinvent GIS. This stuff gets *complicated*. Even better (imho) would be to look into PostgreSQL w/ PostGIS - I don't know about MySQL GIS, but PostGIS is up there with high end spatial database software. 
There's also r/geospatial and r/gis if you want more information on the GIS side of things.
Guys, please stop upvoting this terrible answer. GIS is a much better solution, the Earth isn't a sphere, MySQL and basically all real databases have this built in already, et cetera. Pointing him at haversine, great circle etc is like telling him to implement his own floating point inside an integer column. Much is lost by not using the underlying database's actual understanding of the data. Not to mention that because the Earth is an irregular ovoid, haversine and great circle are off by 50 miles or more usually. In the ancient era that was fine for sailing from london to new york. That isn't fine for modern era.
The right track is GIS, not hacking it using bad math approximations of the wrong shape through Drupal's abstraction later.
GIS is a standard. If the implementation is correct - and in this case both MySQL and Postgres say "mostly, yes" - then they're of equivalent quality. Other issues of MySQL and Postgres aside, purely on terms of GIS, there is no significant difference on which to choose.
Unfortunately they give advice just as bad as the advice in here has been. He's much better off just reading the manual page for GIS for his database. Like so. http://dev.mysql.com/doc/refman/5.5/en/gis-introduction.html
You can check out my PHP class that I developed a long time ago. It's simple and configurable. It's called "[Zip Code Range](http://www.phpclasses.org/package/3156-PHP-Get-zip-codes-within-a-range-from-a-given-zip-code.html)". You can modify it to return what you want, instead of zip codes. It should be accurate to within a few miles near the equator. 
Original question: "What if I had a longitude/latitude and wanted to find every row in a mile/km radius? (for example, 10 mile/km radius)." Salient piece in the stack overflow question: "I am trying to search for all cities within a given radius, often times I'm searching for cities surrounding a city using that city's coords, but recently I tried searching around a city and found that the city itself was not returned." They are describing the same problem: mysql table with rows of latitude/longitude and wanting to return rows around a given point/radius. 
&gt; Original question: "What if I had a longitude/latitude and wanted to find every row in a mile/km radius? (for example, 10 mile/km radius)." Yes, that's the question to which this answer was incorrect. The formula given gives a distorted window, guaranteeing either spurious matches or eliminated results, and probably both. &gt; They are describing the same problem: mysql table with rows of latitude/longitude and wanting to return rows around a given point/radius. And they still didn't get the right answer. Go figure.
The abstraction layer is just the fucking way the query is written - it has nothing to do with the actual algorithm or query.
Well, good point - however come to think of it the options presented to a user on this application were 25, 20, 15, 10 and 5 miles. So it was effective for its use.
I use the libraries from "webbots, spiders, and screen-scrapers" (a great book, btw). They are available for free here: http://www.schrenk.com/nostarch/webbots/DSP_download.php
API experience? &lt;crews type="x/xander"&gt;What even is that?&lt;/crews&gt;
From what I've gathered from built in MySQL Spatial support, it isn't well designed for coordinates on a sphere, like the earth. The point class is for a point on a flat plane, not the earth. I've done several projects that require this kind of functionality and I've always just had a lat and long decimal column in my table and then used the built in MySQL math functions to create an appropriate select statement. I think the formula here will work: 6371 km * cos-1(cos(Long1-Long2)cos(Lat1)cos(Lat2)+sin(Lat1)sin(Lat2)) found from here: http://wiki.answers.com/Q/What_is_the_formula_for_distance_using_latitude_and_longitude
&gt; From what I've gathered from built in MySQL Spatial support, it isn't well designed for coordinates on a sphere, like the earth. The earth isn't a sphere, is the reason. &gt; The point class is for a point on a flat plane No, it isn't. &gt; I've done several projects that require this kind of functionality and I've always just had a lat and long decimal column in my table and then used the built in MySQL math functions to create an appropriate select statement. And that means you got a fairly inaccurate result, because the Earth isn't a sphere, and that equation is for a sphere. Your own criticism of MySQL, which isn't correct, turns out to be correct for the thing you're proposing instead. Notice how your own citation explains that at the bottom. MySQL's GIS does a hell of a lot better job than this does. GIS as in "geographic information standard." As in designed explicitly for this stuff by people who do this for a living. The answer designed by professionals you're replacing with the guess that Earth is a perfect sphere, while criticising the one that isn't on a sphere for being on a sphere, will produce answers that approach 53.2 miles inaccurate towards the equator, where most people live. You are significantly lowering the quality of your results by googling up an answer and just assuming it's better than the one the professionals did. Don't quit your day job.
The only problem with your approach is when you really start coding for a high traffic website: hundreds until thousands of queries per second) That's when your simplistic approach start to fail. I was talking about dozens of parallel connected webservers designed to answer _only_ this issue (postal code radius). a little more common sense and less aggression would also help. Anyway, thanks for the info!
Awesome!! Thanks! I was getting close but could not get to this final point of assigning the $identity-&gt;role = 'X'; but this snippet got me there. Thank you very much!
&gt; The only problem with your approach is when you really start coding for a high traffic website: hundreds until thousands of queries per second) That's when your simplistic approach start to fail. Oh honestly. You're talking out of your ass. 1) It's not my approach. 2) The approach isn't simplistic. 3) The MySQL GIS stuff runs way faster than a heaviside implementation in SQL or in PHP. 4) Thousands of queries per second isn't much to MySQL GIS on an average 1U. MySQL GIS will happily scale into the hundreds of thousands of GIS queries per second. 5) You don't know what you're talking about. &gt; I was talking about dozens of parallel connected webservers In your imagination, maybe. &gt; a little more common sense and less aggression would also help You may admonish other people to show common sense once you're done making up data and inventing emotion at the other end. There are few things as obnoxious a rank amateur who tries to act experienced and talks down to you, then says thanks for the extremely basic information they just learned. "You should have considered multivariate calculus. I was talking about math on a vector machine. Thanks for the information about this 'multiply' thing." Uh huh. You might as well be talking about Kurtzweil's singularity. It's obvious you are completely lost, and don't even realize it. &gt; designed to answer only this issue (postal code radius). His question wasn't about postal code radius, even though he phrased it that way, because that isn't how postal codes work. If you had understood my response, you wouldn't have attempted to make this criticism. Back of the class.
&gt; I have absolutely no idea what that actually means. Is 53 o 00'N something like 53.000000? It's been a while since I've worked with lat and long too but ... 53 o 00' N is 53 degrees 0 minutes north. Which can be expressed as 53 0/60 or 53.0 as you said. 53 o 30' N would be 53 degrees 30 minutes north or 53.5 (as there are 60 minutes in a degree and 30/60 = 0.5 - I'm too lazy to lookup how to format fractions properly sorry). 53 o 15' N would be 53.25 and so on. Hope that helps.
Can you share a link explaining how to do what you've described, i.e. the "professional answer"? Been through the MySQL docs quite a bit and haven't found anything quite like you've described. Sounds like you're saying there's a mysql solution that takes into account the exact shape of the earth. I haven't found any solutions to this problem that use mysql and don't approximate the earth as a sphere, but I would love to learn something new and way better.
&gt; Sounds like you're saying there's a mysql solution that takes into account the exact shape of the earth. Exact? No. That'd involve having the shape of every mountain and every valley. It's just a lot less wrong than "let's call it a circle and call it a day." MySQL's on one of the big standards. (I think it's Open GIS Consortium, but don't quote me on that.) The way to dig this up is to figure out which standard they're on, then look that standard up.
I'll just throw a few thoughts: * You may want to try integers instead of floats, just for speed. * Keep the lat and long in separate columns. * Assuming you are working with distances in the order of 10 miles, you can assume the Earth is pretty flat. * Don't calculate all the distances to all the rows, just so you can throw most of them out; select a rectangle around the centre point, and then calculate the distances of points within that rectangle. You can even just concentrate on distances close to the radius to save further calculations. I [created this site](http://www.biffaward.org/eligibility?postcode=SW1A%202AA) which looks at distances from central points (postcodes) for a charity, so ask any questions that you think may help. However, this does convert all the latitude and longitude values into a UK grid reference, which approximates to a flat grid and so simple Pythagoras is all that is needed to select the distances.
You should ask this on stackoverflow.com -- doesn't answer your question but is a better answer for you long term
GIS stands for "geographic information system", not "geographic information standard."
GIS stands for "geographic information system", not "geographic information standard".
http://stackoverflow.com Ask any programming question there. It's got a great community. 
Here is how id do it with a google map/circle similar to something I did at work (its not live) - may need to code format this... Edit: hmm looks like mine may be too complex, I should shorten this function search($lat,$long,$radius){ //super map seatch - draw a radius where user searches and find venues where matches are taking place $query = 'SELECT DISTINCT tbl_venues.*, (SELECT COUNT(*) FROM tbl_match WHERE tbl_match.venue_id = tbl_venues.venue_id AND tbl_match.datetime &gt; NOW()) AS match_count, 3963.191 * ACOS((SIN(PI() * ' . $lat . ' / 180) * SIN(PI() * tbl_venues.`lat` / 180)) + (COS(PI() * ' . $lat . ' /180) * cos(PI() * tbl_venues.`lat` / 180) * COS(PI() * tbl_venues.`long` / 180 - PI() * ' . $long . ' / 180)) ) AS distance FROM `tbl_venues` LEFT JOIN tbl_match on tbl_match.venue_id = tbl_venues.venue_id WHERE 3963.191 * ACOS((SIN(PI() * ' . $lat . ' / 180) * SIN(PI() * tbl_venues.`lat` / 180)) + (COS(PI() * ' . $lat . ' /180) * cos(PI() * tbl_venues.`lat` / 180) * COS(PI() * tbl_venues.`long` / 180 - PI() * ' . $long . ' / 180)) ) &lt;= ' . $radius . ' AND (SELECT COUNT(*) FROM tbl_match WHERE tbl_match.venue_id = tbl_venues.venue_id AND tbl_match.datetime &gt; NOW()) &gt; 0 ORDER BY distance ASC'; $res = $this-&gt;db-&gt;query($query); $aReturn = array(); foreach($res-&gt;result_array() as $count =&gt; $row){ $aReturn[$count] = $row; $aReturn[$count]['matches'] = $this-&gt;getByVenue($row['venue_id']); } return $aReturn; }
A critically important nit to pick.
file_get_contents (and many others) will give you the string returned from a url. eval will parse that string as php. From a security sentiment this could be very bad, but, if you think it's fine that's the easiest way to do it.
If you enable these two options: http://us.php.net/manual/en/filesystem.configuration.php#ini.allow-url-fopen http://us.php.net/manual/en/filesystem.configuration.php#ini.allow-url-include Then you should be able to include php files via a URL. I don't really think what you're trying to do is a good idea, but if you must...
http://us.php.net/manual/en/wrappers.php
See courtewing's post above first, though. You must enable url-fopen to do this.
well just for the sake of learning, why wouldnt it be a good idea? what would you do instead? Thanks
Great answer, but you didn't have to be a dick about it lol
especially since you enclosed it in quotations.
&gt;well just for the sake of learning, why wouldnt it be a good idea? If you lose control of that file, for even one single access, you lose control over your code, your server, and everything on it. All I need to do, as a bad guy, is get /my/ file called one single time, and your server is mine.
And yet that's all you did.
how might one lose control of the file?
1) No, that'd give you a box with 15% error, because the planet isn't flat. 2) There're geospatial extensions for this. http://dev.mysql.com/doc/refman/5.5/en/gis-introduction.html 3) Your link provides no benefit.
[A cookie is just another HTTP header](http://en.wikipedia.org/wiki/HTTP_cookie#Setting_a_cookie). Just tell curl to set the cookie as appropriate.
thanks, but these are cookies from third-parties, not ones I have set or access to set. And from my understanding I am unable to see what websites have set a cookie (even if I don't care about the value of the cookie). So from my understanding I have to use the scripts they have in place already which would be that url check (other sites have similar url's that redirect to one of the images).
I'd use a script to automatically update all the sites. I do this now and only have one site to update (across multiple servers). 
Well, my caveat is that the servers involved and their interconnecting infrastructure are not entirely yours to control. If you have a farm of servers, all on the same rack, and one happens to be a library server, yeah, that's mitigateable a bit. If someone can hjack t he DNS, or compromise the other server, the attacker can inject his own code into /your/ server (Via the "system" command, unless you are running apache/whatever as non-root it shoould be somewhat better.
I've been looking into GIS since you first posted it and I'm a little confused. Do I change my Lat and Long columns from Float to Point? I was looking at this example: CREATE TABLE address ( address CHAR(80) NOT NULL, address_loc POINT NOT NULL, PRIMARY KEY(address), SPATIAL KEY(address_loc) ); However, in [this example](http://dev.mysql.com/tech-resources/articles/4.1/gis-with-mysql.html), the values that are inserted are: GeomFromText('POINT(2671 2500)') What type of number/point is 2671 2500? I have no knowledge whatsoever in this area so it's a bit overwhelming to tackle. I've googled for Latitude Longitude MySQL GIS and there doesn't seem to be any examples etc. 
I get the feeling we don't entirely understand each other. You're trying to get curl to see what 3rd parties see, right? What 3rd parties see depends on what cookies they have set. Right now, curl always gets the no-cookie page, because it doesn't send a cookie. But you can tell it to send a cookie by setting the Cookie header. Or do I misunderstand the problem?
Hmm, I'm not the best at programming, still learning, so I guess I am not understanding what you are saying. Let me try to rephrase what I am asking though incase it is miscommunication. If you visit [this page](http://www.networkadvertising.org/managing/opt_out.asp) you get a list of third-party tracking companies and whether they have a cookie already set on your browser. Nothing is being set, just checking for previously set cookies. The example link I posted in the description is one of the links that checks if the cookie is set or not then redirects to one of the images accordingly. This is the same with all 60 or so of the companies on [this page](http://www.networkadvertising.org/managing/opt_out.asp). Now what I would like to do is basically be able to determine how many of those are "Active Cookie" images. When I just post the code: &lt;img src="http://www.adbrite.com/mb/nai_optout_check.php?nocache=0.9844128" /&gt; into my testing site it shows one of those pictures because it goes through the redirects and finds the picture source of whether or not the cookie is present. If I uses my CURL function (and I am not tied to using curl, just the only way I know of finding redirects), it finds the redirect of that url from my server and not the user's web browser. I can't set any cookies from the third-party website and I don't know what cookie is set on the person's browser so I cannot determine what image is shown. So in essence if I had 50 people visit my website, I would want to be able to determine how many of them had seen the "Active Cookie", "No Cookie", or "Opt-Out Cookie" image. Right now I can only determine what I personally see by loading the page on my browser, and the cookie status of my server, but not the result from when other people visit the page.
Lmgtfy. http://forums.mysql.com/read.php?23,184702,184702
This is the wrong thing to do. Don't do it. Someone gaining control of the foreign server also gives control over the local one. This is a serious security problem. The answer to your question is &lt;?php file_get_contents('http://remote.org/path/to/file'); ?&gt; *Do* *not* *do* *it*. You want evidence of why? Find out what the server string is for reddit. Pro tip: it's an SQL injection that tries to throw away all your data. Why? Because other people are dicks. Never, ever hand them the keys. Ever.
This opens your server up to the ability for an attacker to run their own PHP code on your server. If a script on your server dynamically populates a file path based on user input (which is a terrible idea in the first place), then they might be able to force the script to include their own script path. It is unlikely that you've written code that does something this asinine, but it is also unlikely that you are currently running and will always only be running code written exclusively by you that you have personally made certain is not vulnerable to exploit. With this setting disabled, you guarantee that this attack is not possible regardless of what code you are running. Edit: The important thing to keep in mind is that this setting is for every PHP script on the server. There is no way to enable it for this very specific script as it cannot be set through ini_set at runtime.
PHP, like many managed languages, utilizes copy on write. That means you don't waste any more memory until you start changing the contents of the copied variable.
For instance, my host disables these functions by default and suggests I use [cURL](http://www.merchantos.com/makebeta/php/scraping-links-with-php/#curl_content) to do such things. 
Escaping data has never been difficult to get right. PDO drivers often contain incomplete implementations. Not all databases cache prepared statement execution plans. PDO and prepared statements are not a magic bullet for web security.
&gt;This release resolves a critical issue, reported as PHP bug #53632 and CVE-2010-4645, where conversions from string to double might cause the PHP interpreter to hang on systems using x87 FPU registers. Interesting use of the word "double" - I think many more PHP developers would recognize "float" - especially since you have to use it in order to cast anyways.
Ah, I think I understand now. To sum it up, you want to look at cookies that were set by someone other than you (or the results of sending those cookies). The answer is that it's not possible, at least by legitimate means (I'm not getting into hacking).
For whatever it's worth, our production 5.2.x was unaffected. I'm not sure when the bug was introduced but it hasn't always lived in 5.2...
You should be monitoring your webserver from an external system. Databases aren't the only software that can fail in this scenario. Why don't you check out a monitoring package like OpenNMS?
Yea, thanks. I knew it wasn't possible to see cookies or if they are set but I figured it would be possible to see the resulting img from the URL above. I could be wrong but seeing as how it's given and accessing the cookie by the domain that set their cookie it should be possible. Maybe not though
Nope. Getting the image is a completely separate and unrelated transaction to getting your page. It actually doesn't pass through your server at all (unless the image is on your server, of course).
Typically, no, you can't read a user's cookies for other sites in any way. However, if said site provides an API or something similar in order to share what cookies a user has set (sounds like the img redirect you refer to), then that should work. Have you looked into doing a JavaScript XMLHttpRequest to the other url, and then relaying the result to your server via another XMLHttpRequest? I haven't had to deal with a lot of cross domain XMLHttpRequests, but sometimes there are restrictions for which sites can make requests to a server via javascript. (i.e. your browser won't honor a request to google.com called from a script loaded by example.com)
Wouldn't it be better to implement an API on your main server? If you set it up that way the slave servers just need to request the content and get it back in the form of JSON, XML etc. This method keeps the frequently changing code on your main server and can remain a black box as far as the other servers are concerned. Most importantly it doesn't open you up to serious security issues.
API of what?
This may be of help to you: http://www.phparch.com/books/phparchitects-guide-to-web-scraping-with-php/
That site is wonderful, I've used it for ages. I also really like how their points system works. [stackoverflow results for mysql gis](http://stackoverflow.com/search?tab=votes&amp;q=mysql%20gis%20distance) There is also serverfault.com and superuser.com and a number of others all in that network.
It's slow and very insecure.
It seems most of the links there actually do the calculations manually without simply using a MySQL function. Many of the links are dead. Appears outdated, did 5.5 make improvements? Also the comments on [this page](http://dev.mysql.com/doc/refman/5.5/en/geometry-property-functions.html) indicate that it only works with cartesian planes. I also found an [article mentioning 4.1](http://dev.mysql.com/tech-resources/articles/4.1/gis-with-mysql.html) and how it doesn't support geocentric coordinate systems. I'm looking and am not finding any simple MySQL spacial function that just calculates distances easily. Perhaps you can elaborate, because while you keep pointing to the base gis-introduction page, I seem to be too blind to find it.
I'm sure you know about this, but I'll post for others' sake: [Area 51](/http://area51.stackexchange.com/) is a breeding ground to launch Stack-Exchange driven sites for many different subjects. For instance, a few of the proposals are Code Review, Linguistics, Cooking, Photography, etc.
What are you going to be using your code for? I think that can help determine what methods are going to be acceptable to you. By all means, keep digging into GIS if you want to, but it provides a ton of functionality that it doesn't sound like you're going to use/need. If you do want to continue down that road, StoneCypher is correct that the MySQL documentation has all the details, but in my opinion it is kind of lacking in practical examples. It doesn't actually operate on latitudes and longitudes, so you need to get your coordinates into a format that it can use. Get them converted to UTM, which will project them onto a flat grid instead of a sphere ([this link](http://www.movable-type.co.uk/scripts/gis-faq-5.1.html) should help explain things). If you are not working with large distances, and don't need absolute accuracy, then some of the other methods mentioned (namely the Haversine formula) should work fine for you. This is also mentioned in the page I linked in the above paragraph, along with the scenarios where treating the earth an ellipsoid is not ok. I'm not claiming to be an expert in this area, so *anyone* please feel free to correct me if any of my info above is incorrect. Good luck with your project, I hope you find something that works for you.
So, in other words, you are yet another neckbeard ass that has no real world application to solve this situation, but want to be a complete tool to everyone that offers a solution. Nice.
"API experience" is just a silly term. It's meaningless. Or are they looking for someone who knows the API of every single application with a public interface? Good luck with that.
StoneCypher, I greatly admire your ability to help the proles while continuously being lambasted by them for being an "asshole". They should be thanking you! Most of us already gave up ... long long ago. Other forums (like StackOverflow) are far more helpful + professional than this rabble.
bonked 1 point 51 minutes ago[-] &gt; So, in other words, you are yet another neckbeard ass that has no real world application to solve this situation, but want to be a complete tool to everyone that offers a solution. Nice. WOAH! **Someone** forgot to take their anti-psychotic meds this morning!
I see a trend where you are critical of those who offer help.
In this thread, I learned that PHP devs on /r/php are about as confident in determining the distance between two spots on a celestial body as they are on mitigating SQL attacks ;-)
HOLY SHIT! FOR THE FIRST TIME *EVER* ONE OF MY COMMENTS ON ESCAPING vs STATEMENTS HASNT BEEN DOWNMODED PAST -10!!!
You're just scared to give me the URL ;-)
Just look @ codenamejeff lol.
Yes, most PHP developers believe they are awesome and stop learning, usually around 1-2 years of programming in the language. Thus, most 8+ year coders are stuck in the dark ages of PHP 4, before PDO, before mysqli, heck, before IDEs, profiling, debugging using breakpoints and you can totally forget design patterns. And if you talk about any of these things, especially on /r/php, chances are you'll be downvoted to hell. I interview people for jobs and no one has known all these things for supposedly "senior level" positions, but that doesn't stop us from hiring them, even if they know *none* of them.
So, is StoneCypher your sockpuppet account? There are numerous people talking about what a dick SC is being in this thread, looking at SC's comment history, he/she spends quite a bit of time in buried land because of the tone taken when discussing things. When asked to assist he harps no less than 5 times in a thread with less than 45 replies about how everyone knows nothing and should use GIS while admitting that there are no relavant examples to solve the problem being asked. He/she may be technically correct, but he/she is being a pedantic ass.
I've implemented haversine in code I have, I wish I had the time to change it. Good info, thanks
Well, TIL
Or you want to extend your tolling from reddit to my client. 
You need to use CURL with a cookie jar. The jar holds the cookies the server sends and sends them back with every CURL request, exactly what a browser does.
Exactly. Connecting to the db in the db object's constructor is something I've learned not to do years ago.
&gt; Escaping data has never been difficult to get right. That's why PHP has so many escaping functions, right?
Hi, I'm creating an open-source Missing Persons database application that can be installed by charities, social bodies etc. This is for my final year project. The goal is to create an application that can will allow the administrator to perform advanced searches that can provide detailed statistics etc. It will also allow the admin to create "patterns". Whenever a person is added, he or she becomes the focal point and any patterns created by the admin will be checked against other missing persons. For example, the admin can create a pattern like so: Every male in a 50 mile radius with the same eye colour. Then, whenever somebody is added, the system will automatically search for everyone within a 50 mile radius of that person that has the same eye colour. Other attributes include hair colour, sexual orientation, racial appearance, nationality, height, weight, hair style etc. Obviously, this radius search is an important part of the application. I'm hoping to at least do the best job I can so that others who have better expertise in certain areas can take what I've done and improve it.
Which zip codes are near the equator?
You keep your latitude and longitude columns, but you add a column for storing each location in MySQL's internal GIS-compliant format, POINT for 2D. Then you use only this field for your calculations and forget about the latitude and longitude fields but for showing them to humans. You can convert your points to this internal representation using 2 systems, the standard GIS WKT (well-known-text) format or the internal MySQL functions: http://dev.mysql.com/doc/refman/5.5/en/creating-spatial-values.html So the easiest would be to populate your new point type column with MySQL's Point() function, passing the lat and long from your other columns. Then you can use the examples from this link: http://dev.mysql.com/tech-resources/articles/4.1/gis-with-mysql.html Please note that the link is for an outdated MySQL version that only had support for planar coordinates (not the Earth), but the examples should work in newer versions. 
If you're aiming for efficiency, try to avoid calling time-consuming operations (such as square roots) frequently. I know it sounds obvious, but there's a sqrt and a square sitting in your main for loop. Out of curiosity, here's my implementation (runs about 3x faster): http://pastebin.com/JW51w0bP
You should skip cURL and use built-in PHP HTTP(S) streams (part of core, no external libs/extensions required). The only issue is missing gzip/deflate compression support that I have described and provided a workaround/implementation here: [Add gzip/deflate compression to PHP HTTP streams]( http://simas.posterous.com/add-gzipdeflate-compression-to-php-http-strea) For data extraction I prefer simple `preg_match`'es, tho a DOM/XPath solution sounds a good approach too.
Are you kidding? There's one per database, two if you use MySQL. Use MSSQL? It's got none, and even then it's easy to prevent.
Thanks for demonstrating my point.
This is the correct answer - and the script you want to invest 10 mins reading is phing - http://phing.info/trac/ Your settings are in an XML file, you run php -f phing and whoosh, it ftps the file up to all those servers.
http://phing.info/trac/
Hey we all learn, I remember that post! :-)
Florida has some, and I'm sure Hawaii has a couple.
Well, in this case the home server is something he owns. I agree he shouldn't do it because if that one gets broken into they all can be, but he doesn't have to worry about handing others the keys in this case.
It would be better, but &gt;im sure there are super complicated ways to do this, but i need the simplest method. 
That sounds like a neat project to be working on. I still think that GIS is going to be more complicated than what you need. Also keep in mind that the MySQL GIS implementation uses "minimum bounding boxes" instead of the actual shape you are testing against (at least according to the latest documentation I could find). So for instance, if you test to find all points within a circle using the Within() method, it will actually call the MBRWithin() method which will create a square around your circle and all points within that square will pass the test. This may not be an issue for you if you wanted to find all points within 50 square miles, but they possibly won't all truly be within 50 miles of the center. You definitely want to use the approach that is going to fulfill your requirements, but I would recommend trying out the formulas that have been mentioned so far. They are pretty generally accepted to be adequate for the scenario you are describing for your project. Here is an explanation again of the formula I think would work for you: http://www.movable-type.co.uk/scripts/latlong.html And here is a quote from their notes explaining the problem with accuracy (again, I don't think this is going to affect your use): &gt;Accuracy: since the earth is not quite a sphere, there are small errors in using spherical geometry; the earth is actually roughly ellipsoidal (or more precisely, oblate spheroidal) with a radius varying between about 6,378km (equatorial) and 6,357km (polar), and local radius of curvature varying from 6,336km (equatorial meridian) to 6,399km (polar). 6,371 km is the generally accepted value for the Earth’s mean radius. This means that errors from assuming spherical geometry might be up to 0.55% crossing the equator, though generally below 0.3%, depending on latitude and direction of travel. An accuracy of better than 3m in 1km is mostly good enough for me, but if you want greater accuracy, you could use the Vincenty formula for calculating geodesic distances on ellipsoids, which gives results accurate to within 1mm. (Out of sheer perversity – I’ve never needed such accuracy – I looked up this formula and discovered the JavaScript implementation was simpler than I expected). Here is another page describing the specific method of finding all points within a bounding circle: http://www.movable-type.co.uk/scripts/latlong-db.html Like I said before, I'm not trying to talk you out of learning GIS if you that is what you are looking to do, I just don't want you to spend all the time learning it if you are only doing so because you think the simpler method described above won't actually work. But really, you shouldn't take my (or any random redditor's) opinion on this as fact. I would test a method and verify that it works for you and then use it if it does.
I'm actually going to go with your advise (I can test it with Google Maps anyway, so it's not as if I'm tied into one formula or method - there will be a lot of testing done on this before this app is finished in May). I've tested the formulas that have been mentioned and from what I can tell (so far), they do exactly what I was looking for. Thankfully, this radius is never going to be overly large (It'll usually be within 50 miles or so). The least thing I can do is at least make sure the project is extensible so that others who are more knowledgeable than me can take it from me when I'm finished. 
&gt; Find out what the server string is for reddit. Pro tip: it's an SQL injection that tries to throw away all your data. What do you mean by this???
I've got a little program that can be set up on a cron to back it up hourly, but it requires you to encrypt your database using GPG first. https://github.com/leftnode/S3-Backup
I'd personally do this with a bash script (I know the author said they love PHP). One suggestion if you're going the PHP route: Make sure the .ini file is only readable by the user executing the cron (usually root). &gt; For my purposes, I wish to backup my database every 2 hours. The problem, however, is that after a few weeks, this will amount to a large number of files and will become expensive as far as storage goes. Every 2 hours seems far too frequent for a blog. I also doubt your data would change much every 2 hours; You would greatly benefit from using duplicity or tarsnap. They only upload a delta (what has changed) --- Here's a bash script I wrote to do the same thing. It uses tarsnap and parallel, but it's not _really_ needed (I was experimenting with a new toy). I also need to specify how long I want to keep backups for. #!/bin/bash # Where files are temporary stored until they are uploaded temp="/tmp/backups" if [ ! -d $temp ]; then mkdir -p $temp fi # Date format to append to database. date=`date '+%Y-%m-%d'` # Use parallel to dump all the databases into a temporary directory. ( echo "database1"; echo "database2"; echo "database3"; echo "database4" ) | /usr/local/bin/parallel -j+0 mysqldump --opt -uroot {} '&gt;' $temp/{}.sql # Create an archive containing the databases. /usr/local/bin/tarsnap --print-stats --humanize-numbers -c -f databases-$date $temp/*.sql # Remove temporary files. rm $temp/*.sql
The hourly backups are only kept for a short time tho (48 hours), and backups are only sent to S3 every day. For a blog I am not sure this is excessive overkill (just maybe a little).
I appreciate the pat on the back.
Nope.
Yeah, and equally successful to boot.
Well it also means that if one box is vulnerable then both effectively are, but you're right, that is a big mitigation.
Look at the HTTP headers for a Reddit response. Check out the name of the webserver. Where you'd expect to see "Apache 2.0" or whatever.
&gt; So, is StoneCypher your sockpuppet account? Oh, stop it. Honestly. &gt; looking at SC's comment history, he/she spends quite a bit of time in buried land because of the tone taken when discussing things. Because melodramatic amateurs say stupid crap about sock puppets, and bawwwww when someone says they're wrong. You're more buried than I am. Deal with it. Nobody actually cares when you criticize them. Especially when you misuse words like pedantic, making people question your intelligence, and frequently curse and call names, thinking that's you calling other people rude, when you're just exposing that you cannot stand up to your own behavioral criteria for others. For all the rude I'm being, you're ruder, and unlike you, I had a point. When someone posts "hey, stop hassling Bonked," then we're at parity. When people start writing thank you full posts to you, then we're at parity. Hell, when you just start answering questions, instead of moo-ing about what you think other people are jerks about, we might arguably be at parity. But right now, you're just bitching at the sidelines, while I give advice that gets thank-yous at about 85% from original posters, while chump change nobodies like you complain at the sidelines. Nobody Gives A Fuck What You Think (tm). Start giving advice or be quiet, amateur.
Isn't using mysqldump implies a bit too much overhead? I mean, isn't there a better way? (Snapshotting (LVM for now) might be a good one. Or with the coming of btrfs even the norm. Because in case of a crash, I could just fire up a second instance and do a mysqldump from that.)
You may be accidentally shooting yourself in the foot with this technique. Check out [the `mysqldump` manpage](http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html). Using `--opt` is usually a good idea, and using `--single-transaction` is an even better idea if you're using InnoDB (which you should be). Without locking the tables and/or using a transaction, you risk getting an out-of-sync snapshot of the tables. The dump happens one table at a time, and it's quite possible that one table might receive an update while the site is live, while another does not based on timing alone. On the other hand, you're backing up your personal blog. There's not much data there, so it'll be quick. Data loss from getting an out-of-sync snapshot is going to be pretty darn minimal and probably inconsequential. Interested users might also want to check out [Percona's XtraBackup](http://www.percona.com/docs/wiki/percona-xtrabackup:start), an open-source hot backup utility that works with both MyISAM and InnoDB. It beats the pants off of paying for MySQL Enterprise to get the official hot backup solution.
LVM snapshots are perfectly functional, but always add additional I/O load to the local machine. mysqldump can be run from a remote machine, which can make it a superior solution *if* you don't mind the locking mechanism and are otherwise I/O starved.
Important caveat for this, using mysqldump on a busy production server will kill your sites. If you want to do this properly, especially if you're backing up hourly it's better to turn on binary logging and doing an incremental backup of the logs.
What do you mean explicitly set the value? As in replace it in the HTML block? $string = preg_replace( '/NewsItemID="(.+?)"/', 'NewsItemID="\1"', $string ); Or do you mean retrieve it? preg_match('/NewsItemID="(.+?)"/',$string,$match); echo $match[1];
[http://txt2re.com/](http://txt2re.com/) learn, love it, use it. [i went ahead and made an example](http://txt2re.com/index-php.php3?s=ImageURL3D=%221024x512.gif%22%20NewsItemID=%221%22&amp;20)
--single-transaction also lets you do a dump if you don't have permissions to do it. Or at least I remember using it once for something like that.
Take out the newline?
Hey, what do you mean by newline? I have never used php before. Thanks.
The newline is "\n." try taking it out. Also, you could manage this with CSS.
Hm, of course, bounds are only important when the load is quite high, but then the database software should be chilling on some dedicated iron, so then one can use a DBRD to make real-time backups. Then do the snapshotting from/on that other machine.
Amazon S3 is the best thing to ever happen to my backup strategy ! I recommand S3CMD for S3 integration into your shell. Easy install, easy setup, easy usage. http://s3tools.org/s3cmd
If you cannot tell a link `&lt;a&gt;` from a button `&lt;input type="button"&gt;`, then you are not fairly confident with HTML, sorry. The links this code generates should go all accross, only wrapping at container width by default, unless you have a CSS style somewhere saying a { display:block; }
Hm? Never heard of this before. Mind talking a bit about it?
Ah, you had an extra slash in here: NewsItemID="\1" I removed that backslash, and it works now. Thanks again!
Since you're looking for a definite match, (.+?) is about the worst thing you could do. Also it's redundant, since + means "at least one", and then using ? means "maybe". So "maybe at least one" is basically "maybe one", which equals "*". Also, if you're looking for an explicit integer, consider using \d which matches only digits. So here is my suggestion. $string = preg_replace('/NewsItemID=(\d+)/', 'NewsItemID="1"', $string);
Depending on how often your data changes you might want to save the CSV on the server using `... INTO OUTFILE`. Then you could serve up the CSV directly if it exists, or, generate and redirect to it (alternatively `echo file_get_contents($filename);`). You'll need to delete the file if your data changes though.
The \n right after the closing tag of your link. Replace your line with this: `echo "&lt;a href=\"index.php?artid=".htmlspecialchars($result["id"])."\"&gt;".htmlspecialchars($result["menu"])."&lt;/a&gt;";`
hey I removed \n, and removed display:block; as Machahack suggested, [and this happened](http://i.imgur.com/kN19w.png), which is an improvement, but they're still not on one line. I wanted to use PHP so that I could use an admin panel on my website. Is that possible with css?
Hey, thanks for the reply. I removed display:block; [and this happened](http://i.imgur.com/kN19w.png) That's an improvement, but how do i get them on the same line? Thanks.
give the a's a class name, display block and give them a width equal to their container, or clear: both. Actually, if it were me, I'd put the entire menu structure into an ordered list: echo "&lt;ul&gt;\n"; ... foreach echo "&lt;li&gt;&lt;a ... &lt;/a&gt;&lt;/li&gt;\n"; echo "&lt;/ul&gt;" and just style the list as you like.
 echo "&lt;ul class=\"classname\"&gt;\n" foreach ($results as $result) echo "&lt;li&gt;&lt;a href=\"index.php?artid=".htmlspecialchars($result["id"])."\"&gt;".htmlspecialchars($result["menu"])."&lt;/a&gt;&lt;/li&gt;\n"; echo "&lt;/ul&gt;\n";
Hey thanks for the reply, but where do I put the: echo "&lt;li&gt;&lt;a ... &lt;/a&gt;&lt;/li&gt;\n"; What goes between the two? Thanks.
 echo "&lt;ul class=\"classname\"&gt;\n" foreach ($results as $result) echo "&lt;li&gt;&lt;a href=\"index.php?artid=".htmlspecialchars($result["id"])."\"&gt;".htmlspecialchars($result["menu"])."&lt;/a&gt;&lt;/li&gt;\n"; echo "&lt;/ul&gt;\n";
CSS is not a scripting language, but it is a good way to style anything that you will be presenting in a web browser. For example, your PHP could output the links as list items as OrangePlus suggested. And then set the display for the li to inline.
Has nothing to do with PHP.
\n only puts the source code on a new line when viewing it in a browser. it would be the same as this: (with \n) &lt;a href="..."&gt;lalala&lt;/a&gt; &lt;a href="..."&gt;dadada&lt;/a&gt; (without \n) a href="..."&gt;lalala&lt;/a&gt;&lt;a href="..."&gt;dadada&lt;/a&gt; It does not ad a line break to the actual rendering of the HTML, it simply makes the source code easier to read.
I've always generated it manually with php, though I use the content type of **text/csv** instead of **application/csv**
Select into outfile. There's no reason to package all that data up, ship it over a unix socket to php and unpackage it, just to package it up again and write it to disk.
Thanks for that! I get a syntax error on foreach ($results as $result) But i'll play around with it for a bit and try to figure this one out!
Not a PHP question. However, add style=\"display: inline;\" to the anchor.
I don't think he was even implying it was a form button, rather he just used it as a loose term for a particular link on a menu.
I neglected a semicolon on the line above the foreach
I don't want to write it to disk, I want to export it as a csv to the browser.
ah thanks!
`LOCK TABLES` is a permission in MySQL, so it's quite possible that you're correct.
Do you have to pay that $100 account fee every month too?
Hey, I just put it in and it worked! Thankyou for that!
`SELECT ... INTO OUTFILE` requires the [`FILE` permission](http://dev.mysql.com/doc/refman/5.0/en/privileges-provided.html#priv_file) on the current user. If you're on shared hosting, you may find yourself without that permission. Even then, there may be trouble actually reading the file based on file permissions. That said, it's probably one of the most sane ways to build a CSV from a query.
Once the file is on disk, it's easy just to feed it to the user. 
Oh. Then I misunderstood. Passing it through PHP should be fine (provided it's not large enough to trip max_packet, etc.)
It's worth noting: 1. The `php://temp` stream may be in-memory instead of on disk up to a certain size. This shouldn't matter unless you have a stupidly low memory limit. 2. fputcsv does not produce [RFC 4180 CSV](http://tools.ietf.org/html/rfc4180) files by default. If your target audience is using Excel or similar, you should be OK, but other systems might whine.
Yes that was it. Couldn't get a hold of the DB guy at the time and had to use --single-transaction
&gt; XSLT-powered open source content management system With all due respect, fuck that noise. Anybody that voluntarily subjects themselves to XSLT has some serious issues. Upvoted for the sheer audacity anyway.
Target audience is using Excel.
I suppose it's a far bigger problem when using MyISAM. All MyISAM tables need to be locked in order to produce a consistent dump of a database. No inserts, updates, or deletes while that's happening. InnoDB is better, since you can use the `--single-transaction` flag to get a consistent dump without locking everything. But then again, if your database is larger than a few GB, the dump would take forever.
In this case the ? means don't go past the first double quote. It's the "ungreedy" modifier. It makes good sense here, otherwise the .+ could swallow up a lot of extra characters, if there was another match later on in the line.
A newline is the same as a space; it is not the issue here.
I just do it in PHP w/ implode: $arr = array(); foreach($row in $results) $arr[] = '"' . implode('","', $row) . '"'; return implode("\n",$arr); I know it's not perfect CSV since everything gets quoted, but I've never ran into a problem with it and it makes life a lot simpler if you need to import it elsewhere, since you can reliably split it on explode('","',$line).
It's [not that complicated](http://www.gen-x-design.com/archives/create-a-rest-api-with-php/) though. He could have it together in a few hours because all he really needs is to process a request and send the formatted text back. It's like 200-300 lines of code max.
wow, that is an awesome resource. I've gotten a decent handle on regex over time, but that site makes it way too easy. Thanks man!
Poor choice of naming, what with Symfony and all. :/
"Fast-acting and long-lasting, Symphony 2.1.2 was released on 21 October 2010 after a development cycle of 0 days" wow a 0 day dev cycle! it MUST be awesome!
After all the time you spent badmouthing me the other day, I find it remarkable that you're now trying to talk to me. Remember, you think I'm just a troll, and I cause you to wish reddit had ignore lists.
It's called, "maybe he was just having a bad day, and hey, correct and un-snarky content." Apparently I was wrong to bother. Get the chip off your shoulder and start acting like a civil human being more often and maybe people will like you instead of downvote you into oblivion when you act like a condescending ass.
which can be more easily accomplished by using the \d. It's less cryptic, too.
What $100 account fee? I only pay about $11 each month, there was no setup cost or any of that.
Right, I'm just pointing out that ? does not mean "maybe" in the context used above. Even in its other use, it means "one or zero times", which is kinda-sorta-not-entirely the same as "maybe".
&gt; It's called, "maybe he was just having a bad day, and hey, correct and un-snarky content." Every time someone like you badmouths me in public without being asked, and continues it for hours after I've stopped responding with third parties, cursing and using insults, is a bad day. &gt; Get the chip off your shoulder There's no chip on my shoulder. It's legitimate to be surprised that someone who just said "people like you make me wish there was ignore" went right back to talking to me. &gt; start acting like a civil human being You are not in a position to make comments like this, sir. For example: &gt; and maybe people will like you &gt; when you act like a condescending ass. I haven't condescended to you, nor have I been arrogant, which is probably what you meant. (When you say people are condescending to you, you are insulting yourself without realizing it; you probably don't want to say that anymore. To condescend is to go down to someone else's level - "con" "descend". It's what one does to stupid people and children. Therefore you are accidentally calling yourself stupid.) Note that I have not actually been impolite, and you're being impolite again. This makes it pretty difficult to take seriously your anger at my tone. Please note that I haven't called you stupid. I am merely saying "that word has implications that you probably don't want." I don't actually think you're stupid, though I do think you get angry at things which aren't there. To wit - "maybe I shouldn't have bothered" - honestly that's up to you. I don't much care whether or not you respond to me. However, acting like it's some kind of favor for you to deign to speak to someone who hasn't ever actually asked you your opinion? C'mon, man, that's a little much, isn't it? Shouldn't have bothered? Maybe. I dunno. I don't really care. But if you can't make it through a "I find it remarkable" statement of simple facts without a bunch of cursing and insults, when the person speaking to you did neither, while telling them about their tone? I think you'd do pretty well to consider at an honest level whether or not you meet the standards you attempt to set for strangers who aren't actually particularly worried about your opinion. There's no chip on my shoulder, sir. I was merely expressing amused surprise. However, from the insults and the cursing, I'd wager that the same is not actually true in the other direction. Do you really, honestly believe that response is appropriate, given the tone of what it's responding to? All I said was "I find it remarkable that." Why the insults and cursing? The Dalai Lama is noted as saying that a man who does not fulfill his own expectations of others is unlikely to be listened to. I think he's probably right. The point remains - original poster, on whose behalf you're so angry, thanked me and asked me further questions. I haven't noticed anyone asking you anything. Calm down, Joe. I don't know you, and I don't really care what curse words you want to toss my way. When you spend all that fury talking about how angry I am, I pretty much just laugh. Honestly, I bet you'd do the same, if someone said it to you. It's pretty funny. Chill out, man. Seriously. Nobody said anything to validate one of these tantrums. When you're done being angry, maybe I'll listen to you tell me how I shouldn't be angry. Until then, just realize that it's not getting listened to.
From their pricing page: &gt; ** In addition to the hourly service fee of 12¢/hour per server, a $100 flat, monthly account fee will be assessed when at least one server on the account is active. The account fee is not reflected in the above pricing as it is not a per server charge but an overall account fee no matter how many servers are active on the account. It was just a little unclear whether you had to pay this account management fee if you don't have the Managed Service Level. Looks like you don't - thankfully
&gt; Do you really, honestly believe that response is appropriate, given the tone of what it's responding to? I am unable to determine how you can write this in a non-ironic way. Conclusion: Troll and/or sperglord. Going to have to remember to get that ignore list addon installed on the other machine, can't let myself get baited into that trap again...
No one else seemed to point this out yet, but his building of the mysqldump command is going to leave his db password in full view of the process list. ps auwx anyone? 
Can you suggest how to create a temporary text file with this that can then be sent to the browser?
&gt; I am unable to determine how you can write this in a non-ironic way. Okay. &gt; Conclusion: Troll and/or sperglord. Yes, you keep saying that, inbetween gasping about how I should be less rude. &gt; Going to have to remember to get that ignore list addon installed Awesome. &gt; can't let myself get baited into that trap again... Yep, it's my fault you yelled at me. :)
I'm a fan of the php://output stream for fputcsv()
Write it to /tmp, use [fpassthru](http://us2.php.net/manual/en/function.fpassthru.php)? It depends entirely on what you're allowed to write to in MySQL.
You really should try to sort comments by time "old" and not "hot" or "best" it would help you follow the full conversations. SC called me a fool for providing a good enough solution and dared to imply that using a database abstraction layer actually changed the algorithm. 
That's not what I said. Also, you appear to be talking both to and about me.
There is PHP cli support.
mysqldump --quick http://dev.mysql.com/doc/refman/5.1/en/mysqldump.html#option_mysqldump_quick 
No, it's not normal - it's obviously something that this "php admin panel" is doing. Look at the HTML source, then compare it to the PHP code this panel is generating, and remove the offending bit. Experiment on something non-critical :)
I'm guessing it's not called a 'php admin panel'? I'll have a look thanks!
With MyISAM you can use mysqlhotcopy, but mysqldump will work for all table types. Also, I think that this strategy is designed for small to medium sized DBs... for larger DBs you really need to use snapshotting.... but obviously this is only possible if your hosting service allows it.
Well php admin panel is too vague a term. Do you know the name of the admin panel your friend installed?
no it's pretty much blank and has a 'home-made' feel about it. I go to wwww.MYWEBSITE.com/admin
`php://output` stream and `fputcsv()` are your friend: // Disable time and memory limits set_time_limit(0); ini_set('memory_limit', -1); // Send proper headers so browsers show download dialog header('Content-Type: text/csv; charset=utf-8'); header('Content-Disposition: attachment; filename="your.csv"'); $fp = fopen('php://output', 'w'); fputcsv($fp, array( 'column 1', 'column 2' )); fclose($fp); No temporary files created whatsoever. I have a small blog entry on this subject [here](http://simas.posterous.com/csv-export-using-3-lines-of-php-code).
Since this started happening when your friend did something, the most logical thing would be to ask your mate what he did. :-)
And so when you stick in a &lt;a href="image.jpg"&gt;Check out this image&lt;/a&gt; It puts a button beneath it? You mean like a submit button? Or do you mean it does that with images, like this &lt;img src="image.jpg" /&gt; and what does clicking on this button do, anyway?
No, it's like a submit button. It pokes out from the side of my image.
He's really, really, really difficult to contact. I have messaged him, but I'm sure I could have this problem solved well before he answers.
Hmm well. Can't say it's something I've ever seen.
This has to be good news, especially with ZF2 just round the corner.
Like I said, it's more for if you are dealing with heavy use servers, as an indication we don't see too many problems until we're dealing with more than 100,000 uniques a week. It's not just a case of using transactions either, the processing grunt required to do a full mysqldump and then hopefully an rsync push to somewhere else makes regular backups hard to do without spiking the server to dangerous levels. Binary logging is a feature of mysql which allows you to store changes to the database. It's primarily used for syncs across multiple servers, but you don't need that to enable it. The binary log will have all the data which you can replay from the initial state. If you combine that with rsync incremental backups then you are only pushing the changes to the log file since the last backup. That means rather neatly that there's zero penalty for backing up more frequently.
Two rules that I got: * Always keep backups * Never let friends touch your code, if they won't tell you what they are going to do and what benefits it has and I understand how it works.
show us the site/screenshots/offending code :)
http://i.imgur.com/Glt1A.png ignore the giant stoned head. Notice in the background the brown thing? that's the button. The top buttons are supposed to be there.
I'm probably being dim but I just don't see the point of create_function, and one of my colleagues is a bit mystified too by it.
It looks like there is some CSS being applied to all links (or perhaps all links with images) instead of just the intended links. Without posting a link to an example, it's very hard to offer you anything more than vague speculations.
Wont the binary log file grow to be really big? 
&gt; &gt;#menu{ &gt; display:inline; &gt;margin-bottom:25px; &gt;width:150px; &gt;} &gt; &gt;#menu a{ &gt;width:144px; &gt;height:25px; &gt;padding:3px; &gt; &gt;color:white; &gt;margin-top:5px; &gt;font-size:20px; &gt;font-weight:bold; &gt;text-decoration:none; &gt;background:url(images/menu/normal.gif); &gt;} &gt; &gt;#menu a:hover{ &gt;color:white; &gt;padding-left:10px; &gt;width:145px; &gt;font-size:25px; &gt;font-weight:bold; &gt;height:30px; &gt;font-style:italic; &gt;border:3px solid white; &gt;opacity:0.70; &gt;background:url(images/menu/hoover.gif); &gt;} I copied all of css that I think would relate to the problem, does any of this look like it could cause my button problem? 
It is similar to eval but safer since you cant really execzte code as thebfunction needs to be called first. Use it if you need to create a function from a string. Still should be avoided probably due to readbility of code. 
This feature is probably a bit deprecated after the introduction of anonymous functions and closures as of version 5.3. So, instead of: $f = create_function('$x','return $x;'); now you can do that: $f = function($x) { return $x; } Anonymous functions can very useful in a number of cases such as sorting or filtering.
Yes... this is the issue with binary logs. The reality is that every setup requires a slightly different backup solution. Binary logs are good for sites where loss of any data is critical (binary logs means realtime backups) but are not suited to other situations (e.g. where the binary logs are stored on the same filesystem as the database files or where realtime backups are not a requirement). Another solution is to use timed backups such as the above script, and then use binary logs for realtime backups between times backups. This makes loss of data very unlikely and minimises the amount of disk space used.
Edit: Never mind, misunderstood the question. You are mixing languages. First the php runs, without any javascript at all - none! The output of the php is a javascript program, this javascript program then runs. jQuery uses javascript and only runs at that time. It's unfortunate but to write websites you need to know 5 different languages: HTML, Javascript, CSS, SQL, and PHP (or similar). And you have to make sure not to mix them up, because each run in its own layer.
Yah! Add style="background: none;" to the links around images. But background is not the only thing it's doing, you'll need to learn and understand the css.
 $sorted = usort($array, create_function('$a,$b', 'return $a-$b')); But that's kinda obsolete with PHP &gt;= 5.3 $sorted = usort($array, function($a, $b) { return $a - $b; }); edit: the answer is callbacks
Seems very simple to me.
&gt;However I have tried couple of frameworks and some of them looks very good.you But I am just too lazy. Please send me your resumé, we could do with a hot-shot go-getter like you where I work.
This project looks really interesting, the first new framework I've seen which has looked fresh. I saw in the [documentation](http://fuelphp.com/news/2010/11/upping-the-requirements) &gt;Closures - 5.3 adds anonymous functions (a.k.a. Closures). Closures and anonymous are actually not the same thing, this is a common misconception. In most languages closures do use anonymous functions, but not all anonymous functions are closures. 
Yeah, because you have most likely build using the Model View Controler-method before. :P I could understand that without problems if I would took some time reading the docs etc.
I don't think so. Try to connect to mysql via the terminal client with username and password, afterward issue `ps aux` in another terminal window (or place the client in background). The mysql password will be replaced with *s edit: http://i.imgur.com/EtjbJ.png
Web devs have it rough I tell ya!
Use the `--skip-lock-tables` option of `mysqldump`.
He is not mistaken. Zend Framework has a jQuery view helper. Which means that it will load it for you and adds form functionality (date pickers and such...). I had this problem before, but for the life of me can't find the solution.
So, you're complaining that general filesystem that goes with the MVC pattern is complicated to you? Then of course the layout isn't going to be easy for you to understand. :)
+999999999999
Well, I don't have "real" resume yet as I am still student. But most of my finished work is on my website: http://www.pelikoira.net And as I graduate soon, I may not have much time to code bigger projects. However I may be able to do small projects over the Internet time to time.
Or 2.1.1 was really un-awesome.
Did you bootstrap it? Should have something like this in application/Bootstrap.php protected function() _initJquery{ $view = new Zend_View(); $view-&gt;addHelperPath("ZendX/JQuery/View/Helper", "ZendX_JQuery_View_Helper"); $viewRenderer = new Zend_Controller_Action_Helper_ViewRenderer(); $viewRenderer-&gt;setView($view); Zend_Controller_Action_HelperBroker::addHelper($viewRenderer); }
Why in the fuck would they call it Symphony when there's a pretty mature framework called Symfony?
Either put the file under version control (e.g. git) and have it pulled regularly, or set up a smb share with the file in it.
correct answer (I also use ZendX/*) This library may not be in the minimal download, you may need the full.
I'm pretty sure it is only in the full version.
Hey the style background thing worked! Thanks for that. Is there a CSS fix for this so I don't have to use this for every link? Thanks.
That's a lambda, am I right? I've used functionality like that (anonymous functions) in javascript. Good to see it in PHP :)
Literally every piece of code ever written uses an API. There's a reason several people said this to you. Stop downvoting them for trying to help you. &gt; It's certainly not inside the realm of the development of a basic website in PHP. Yes, actually, it is.
How do you pass a value to that anonymous function? I see it takes the parameter *$x* echo 'I like ' . $f('turtles'); like that? and *$f* can be reused with other values?
Whether it is normal that friends add something to your website, then when things start going wrong they don't fix it or are able to tell you what the hell they did, really depends on what kind of friends you have ;-)
Yes. Also a nice thing with anonymous functions is that you can "inject" other variables in it as well. $a = "10"; $x = function() use($a) { return $a; } echo $x();
`create_function` is [a wrapper around eval](http://lxr.php.net/opengrok/xref/PHP_TRUNK/Zend/zend_builtin_functions.c#1788). The only reason it exists is as a workaround, because PHP didn't have real anonymous functions for 10 years.
Yeah, wow. I didn't even know they offered that. I'm certainly not interested in paying $100 / mo to have them monitor up to four whole ping, port or URLs. I guess if I ran a small business and I were technically illiterate and I didn't want to have to pay for an IT consultant all the time, it might make me feel good to have a service like that. Might.
I use it that way : protected function _initjQuery() { $this-&gt;bootstrap('view'); $view = $this-&gt;getResource('view'); $view-&gt;addHelperPath('ZendX/JQuery/View/Helper/', 'ZendX_JQuery_View_Helper_'); return $view; } Then in the layout/view &lt;head&gt; don't forget to echo it : &lt;?php $this-&gt;jQuery()-&gt;enable(); ?&gt; &lt;?= $this-&gt;jQuery() ?&gt;
Thanks dude!
That seems to be a nice feature of ubuntu. Just tried on centos and it was there in full glory.
I've found some versions of IE won't download the file though. Do you know why this is? Every explanation/fix I've found doesn't work so in the end I created the file and linked to the download.
This is the third time I've seen you looking for help on this "php panel". My advice: **HIRE A FUCKING PROGRAMMER.**
Right. Everyone who said this to you was downvoted, but you didn't do it. &gt; And no, you can do a lot of PHP work without using any sort of API Yeah, someone's a little confused about what API means. You can't echo a string without using an API. Yes, you're looking for help. Check out the title of the reddit post. However, just because you're not looking for this kind of help doesn't mean it isn't the kind of help you need. Good luck, man. I sure am glad I talked to you before I made any referrals.
The former is lambda, the latter is a closure.
And end up with an inconsistent dump, yeah.
Last time I used it was for this - http://us.php.net/manual/en/function.preg-replace-callback.php
Under your virtual host, you should be able to just direct /status to fpm like you would for normal php execution. location /status { include fastcgi_params; fastcgi_pass 127.0.0.1:9000; } (Been a while since I messed with this, but pretty sure I moved a lot of stuff to the fastcgi_params file so I could clean up config. You may have more lines than this.) 
ah, the \1 was to read the result of the first paranthesis, I wasn't sure what exactly you were trying to do.
You're right, I didn't think when replying. herp derp
Two people pissed you off so now you're taking your ball and going home?
Looks like this is for nginx, any idea how to do it in apache?
To be fair - the latter really only becomes a closure when you explicitly allow it access to local variables otherwise outside its scope with `use`. Otherwise it's still just a lambda.
$this. OP does not a problem money will not solve.
curl + php's domdocument work well for me
They should move into the cloud. Take a look at phpfog. They raised millions and look promising
Ah, sorry bad assumption. I haven't done it with apache. A couple of guesses though. &lt;Location /status&gt; SetHandler php-cgi #or whatever your handler is named &lt;/Location&gt; Or maybe set php-fpm to listen for status.php as the status (even though it's recommended to not do this because there may be a real php file with the same name blah blah blah). Not sure if you'd need a placeholder file to prevent apache from throwing a 404.
You don't even need to generate a file on the server...that's what the Content-Disposition: attachment; header is for. It tells the browser that any data it receives (I.E.: anything you echo) is actually a file and it needs to download it. This is the way I've always generated CSV from a database: http://snipplr.com/view/2234/export-mysql-query-results-to-csv/ Seeing as a few of those mysql functions are now depreciated (PHP 5 and up, I believe), I've used the suggested methods in the PHP manual.
Ehm. PHP has anonymous functions these days? The last thing I heard, was they were adding goto. 
The way to do it in Apache is to stop using Apache and use Nginx. ;)
Yes! ZendX was missing.. Thanks!!!
As harsh as this may seem, the man could not be more correct. 
It's the old way to make an anonymous function. Sadly, people repeatedly falsely claim it's a wrapper for eval, because it's occasionally hard to understand that implementation doesn't have much to do with intent (which is why we don't, for example, discuss map as "a wrapper of a for loop.") Thankfully, these days PHP has semi-proper anonymous functions, with partial downwards closures, which is an improvement.
That's what you get for believing proggit about languages that aren't ruby, python or haskell. Turns out C++ is also pretty awesome.
No. It's a primitive replacement for a lambda. This is an anonymous function. Notably, JavaScript has lambdas, not anonymous functions.
Not obsolete! You can't create anonymous functions within an array, and instead, **must** use create_function. For instance: $a[0] = function($a, $b) { return $a + $b; }; $a[1] = function($a, $b) { return $a - $b; }; ... won't work. You have to do it this way: $a[0] = create_function('$a,$b', 'return $a + $b'); $a[1] = create_function('$a,$b', 'return $a - $b'); ... and so on.
And you'd want an array of these ... why?
Except please don't, because the language has had proper anonymous functions for five or six years now.
Learn something new every day. 
It's funny that i got voted down that much though. And now your response. Is there some general dislike from the non-php and php-crowd. I've used PHP in the past. It has a great library. I didn't really like the language, but the difficult parts of web-development are often not in the domain of the server-side programming language anyway. (from the front-end css-hacks to setting up sharding &amp; caching on the server .. the glue code in the middle isn't really the issue) But seriously? Given the common PHP code, the anonymous function seems like it comes from another planet. And the GOTO thing was for real. I read it on the PHP website. Why all the hate? 
I use it a lot in WordPress plugins. WordPress has a [mechanism](http://codex.wordpress.org/Function_Reference/add_action) where you register functions tied to specific actions. With create_function, you can do pretty stuff like: add_action('wpmu_new_blog', create_function('$blog_id, $user_id', 'mail("me@foo.com", 'New blog created", "A new blog was created");'); or something.
It isn't really useful if you have a current version of PHP. But it used to be how you would declare an anonymous function. Now you can use a syntax similar to javascript though.
Well, let's say you want to vet some incoming POST vars. So you prepare your functions like so: $a['username'][] = create_function('$val', 'return (10 &lt; $val &lt; 20)'); $a['username'][] = create_function('$val', 'return ctype_alnum($val)'); $a['yearofbirth'][] = create_function('$val', 'return (is_numeric($val))'); foreach($a as $req_postvar=&gt;$func) { if (!isset($_POST[$req_postvar])) exit(); if (!($func($_POST[$req_postvar]))) exit(); } Now I don't need to kick around source mid-file in order to change the requirements of a username or password or whatever-the-case-may-be. Just an example.
Sure that's not a bug? I haven't seen that mentioned anywhere.
* Come to r/PHP * Make trollish joke about PHP * Moan about downvotes
http://www.reddit.com/r/forhire Looks like just on the front page there are a couple folks with PHP experience who could help you out, and are looking for work. :)
Cute attempt to hide a [condescending snipe at my post](http://www.reddit.com/r/PHP/comments/f1hlg/what_is_the_practical_purpose_of_create_function/c1ckrpm) in the middle of the thread, but I actually linked to *the source on the PHP site* to back up that assertion. You ain't contributing anything but noise.
It's worth waiting a few more days for him. While he might be flaky, he made it. It probably is pretty simple, but any new coder would need to take the time to go through all the code and figure out how it all works together. Then it's relatively simple to mod it. But since he made it, that won't take any time at all.
In my opinion, the *proper* way is to leave this management up to your Version Control System. Put all your "Re-Usable" classes in a repository called "utility_classes" or something. Then you change that file, and push it to the respository. If any project needs the older version of the file, just checkout the proper revision.
No, if there was one I would have posted it. The problem is the background is on the link - not on the image. But the css can only target the image (because otherwise it doesn't know there is an image in the first place), and can't control the parent. You could just get rid of those css entries - is there a reason you want all your links to look like that? If you are going to be doing this a lot make a class, and apply the class to the links. Or go in reverse and put that strange css in a class, and only use it where you need it. And if you don't know what a css class is then google it, there are plenty of tutorials.
I'd use branches, that way you could still maintain the 1.0 stream, for bug fixes and like. While going ahead on version 2.0.
Well, in an ideal world we would do this... I think I explained it poorly. Let's say we have project A, and project B. Both use the registration object. Project A is already live. Project B is new, and we found some change we need to make to the registration object that are incompatible with project A. However, from this point on, we want all projects to utilize the new changes. So for project B, we make the new version of the registration object, and put it into "registration2.php". This way, we don't blow up a live site. Does this make sense? I guess the bottom line is: we can't use version control for this because both projects still need to use the code, so we have to have separate files.
You can achieve this with symlinks and tags within source control. For your shared classes, they should all go into a repository of its own. Create tags for each version of the library that you would like (i.e. 1.0, 2.0). Deploy all the tags into its own directory on the server (i.e. /usr/local/php/includes/), such that each version is in its own folder (/usr/local/php/includes/1.0, /usr/local/php/includes/2.0). Then within your projects, create a symlink to either the 1.0 or the 2.0 directory, and each project will be able to use whatever classes the symlink is pointing to.
PHP has a define() statement.
&gt; You can't create anonymous functions within an array Are you sure about that? It works for me (using 5.3.3)... ~/src$ cat test.php &lt;?php $arr = array(); $arr[0] = function ($a) { return "In func: $a"; }; print $arr[0]("test 1!") . "\n"; ~/src$ php test.php In func: test 1! 
This isn't true. Create a new repository called "utility_classes" as I mentioned, and put your Registration class in it. Then delete it from your Project A, and check-out/module/export it from your "utility_classes" repository. Now your **Project A** Is at the same state it was in before this all started. Now, make changes to the class **in the "utility_classes" repository**. When you create "Project B", checkout the updated version from the utility repository. Now you have a single file, versioned properly.
I don't hate PHP. Re-read what I said. I quite enjoy PHP.
Reading skills: they're what's for dinner. I didn't make a joke at PHP's expense. 
That seems like a bizarre thing to want to do, but okay, I'll buy it. Golf clap. Upboated for left field.
&gt; Cute attempt to hide a condescending snipe at my post Please stop mis-using the word condescending. I'm being arrogant. Condescending means "stepping down to the level of," as in speaking in limited phrasing to children and stupid people. You are insulting yourself when you call other people condescending, because you are suggesting that their tone implies that you are a simple person. I've told you this quite a few times now. &gt; but I actually linked to the source on the PHP site to back up that assertion. I didn't say it was factually in error. I said it was a stupid way to present things which entirely missed the point. You might not be aware of this, but the general quality of code and thought in the PHP manual is fairly abysmal. I would have thought the map-as-for-loop example would have made that clear. Guess not.
Thanks, that's a good idea I'll try that. 
Isn't this what different branches are for?
I think he's saying that both projects draw from the same central codebase on the same server. So version control won't help because they need two different versions of the same file on the same server.
I do a lot of unit testing with php. We use the lambda instead of create_function. It's definitely an improvement. In terms of unit testing, it is used for isolating the code/method being tested by mocking what dependent methods return. tl;dr : unit testing, dependency injection, code isolation .. 
JavaScript most certainly does have anonymous functions... If it didnt then the following would not be possible: var anon = function () {};
Use the power of [svn:externals](http://svnbook.red-bean.com/en/1.0/ch07s03.html) to peg it to a specific revision. Set up your repo like this (sort of): /projectA /lib (svn:externals to r37 of /commonLib) /projectB /lib (svn:externals to r42 of /commonLib) /commonLib Then, no matter what you do to the trunk of commonLib, projectA, projectB, all the way to projectZ, will have the version that it needs. Really, you should be tagging the commonLib so you can say that projectA is using version 1.0 of the lib and projectB is using version 1.3. This is how you think of it whenever you use any other external library/framework (Zend Framework 1.7 vs 1.11 or jQuery 1.1 vs 1.4 or hell, even PHP 5.2.1 vs 5.3). Unfortunately, I'm guessing that your code isn't structured to make this easy, but I implore you to take the time and set it up right **now** before you're suddenly finding yourself checking out (and maintaining) 26 different versions of registration.php for projectZ. You have actually developed an internal library and need to take responsibility for it.
What do you mean?
You are going to have to code it using the COM object model. The class manages itself and it's different versions. When first initializing the class you define what version the application wants to access. This is the way DirectX (among others) works. That's why you can play a game made for directX 9 while having DirectX 10 installed. Basically you make interface classes for each version which exposes the needed functions. The easier way is to keep every single different version in a separate php file and have a management class that decides which to use.
Tonight, we'll be making spaghetti!
I'm pretty excited about Symfony 2, I have a two major projects coming up that will be perfect for getting me out of Drupal-land for awhile and whether it's fully stable or not I'm using S2. I had some experience with Symfony 1.3 and it was incredibly powerful but kind of bloated and complex. From what I gather from the Symfony 2 site they've made it simpler to learn and added DI and namespaces. Hell yes!
7 mill. should be just enough to fix utf-8.
&gt; Are you sure about that? It works for me (using 5.3.3)... $ apt-show-versions php5 php5/stable uptodate 5.3.5-0.dotdeb.0 $ cat test1.php &lt;?php $a[0] = function($a) { echo $a; }; $a[0]("what what!!?!?!?!"); $ php test1.php what what!!?!?!?! You're right! My prev code was with an older version.
I'm very excited for Symfony 2. I love the modularity, the 5.3 support, even Twig. It seems like the enterprise-approved framework of the future. I'm hesitant to use it until the stable version comes out, but I think once it's released, the community bundle support will be HUGE.
Base Class containing core generic registration functionality common to all registration processes. Concrete registration Class in projects extend base class (opt. implementing Interface if you want to keep it tight).
You can add a Zend_Form_Element_File element to your form, if you don't send the data via ajax. If you send your data via ajax you will need a (jquery) plugin to upload your file.
I mean, for instance, the form has two options: 1) you can upload a video or 2) upload an image but not both. So I need to put two link where you can choose 'upload image' or 'upload video'. If you choose upload video, a video upload field shows up (only) and if you choose upload image, then an upload image field will show up and the video upload field will be hidden and vice versa (toggle).
Hmm, I haven't run into this myself, but some things you may want to try: * Make sure `Content-Disposition: ...; filename=".."` file name part is escaped and enclosed with quotes * Add `Content-Transfer-Encoding: binary` and see if that helps * Add `Content-Type: text/csv; name=your.csv` 
Have two divs made - both hidden. One div containing the form for the video upload, the other containing the form for the image upload. Place two links on the page, one for the video form, the other for the image form. You can fairly easily make it so that when a link is clicked, the correct div's visibility is changed from hidden to visible. It *should* work.
Making a lambda, giving it the name anonymous and saying "this is an anonymous function" isn't particularly compelling. This is sort of stupid, in a way. Lambdas are extensions of the idea of anonymous functions. It's a little like saying "this thing makes squares, not rectangles" and having someone else go "SEE LOOK A RECTANGLE." /me sighs.
well in that case add custom decorators (divs maybe) to the two file elements, latter toggle the divs like dprimedx suggested.
I haven't tried the Transfer-Encoding option yet. I'll give it a go. Thanks man
[Dispatch tables](http://en.wikipedia.org/wiki/Dispatch_table) perhaps?
If the only difference is whether they upload an image or a video (ie the file input is still a file input) then you should do this on the server, e.g. mime_magic. You can't give an option to upload only a certain type of file, you are trusting the user, so I could click image and upload a video.
That's weird because the old saying is better the devil you know, than the devil you don't. That is, stick with the thing you know that's bad, than venture into something else which could be even worse.
Yes, that's what the other guy already said.
&gt; Making a lambda, giving it the name anonymous and saying "this is an anonymous function" isn't particularly compelling. You're a very stupid individual, the name anon was meant to be an example. The fact that I could create a function without a name and bind it to any variable I pleased is the whole concept of *anonymous* functions. &gt; This is sort of stupid, in a way. Lambdas are extensions of the idea of anonymous functions. It's a little like saying "this thing makes squares, not rectangles" and having someone else go "SEE LOOK A RECTANGLE." You have that completely backwards. Anonymous functions are an extension of [Lambda *Calculus*](http://en.wikipedia.org/wiki/Lambda_calculus). If you want to get pedantic, in computer science there is no such thing as a specific "lambda function" (there are "lambda expressions" which essentially refer to all functions than can be returned and accepted by another function). Hell, you could really make they argument that they are all the same as the definitions are so fuzzy and implementations so similar. In fact, you did. So if they are all the same and extensions of the same thing, why would you go out and say JavaScript doesn't have anonymous functions, but it does have lambdas? Why the distinction? I did not dispute your claim that JavaScript has lambdas, but called you out on the fact that JavaScript does have anonymous function. Here, since you didn't like my example, here's another one: [1, 6, 3, 4, 9, 2, 5].sort(function(x, y) { return x &gt; y; }); Or perhaps this: (function() { console.log('hello world'); })(); Those are both examples of anonymous functions. They have no identifiers bound to them at creation and are technically called without an identifier (I do not consider binding a function to a variable and calling it through the variable using an identifier [as the function itself still has not been identified, merely a pointer to it assigned to a variable], however if you do the second example should suffice).
&gt; You're a very stupid individual Uh huh. &gt; The fact that I could create a function without a name and bind it to any variable I pleased is the whole concept of anonymous functions. One, no, it isn't. map( fun(X) -&gt; X*3 end, [1,2,3] ). % anonymous function Two, that doesn't mean that it isn't a stronger form, called a lambda. You seem to be very neatly missing the point. &gt; You have that completely backwards. Anonymous functions are an extension of Lambda Calculus. Sorry, no. The Lambda Calculus is not the only way to implement anonymous functions, and its only goal is to provide one provably safe method of implementing anonymous functions. On top of that, whereas lambda functions are named for the lambda calculus, the two aren't the same thing. &gt; If you want to get pedantic, in computer science there is no such thing as a specific "lambda function". This is, of course, complete nonsense. You might as well assert that there is no such thing as a specific "anonymous function." Of course there isn't. It's a concept. An anonymous function is a function which is not bound to a name at compile time. They might be bound to variables, they might be used inline, et cetera. A lambda function is an anonymous function which also has at least downwards closures, and can be represented as a value. (Note that C++ had lambdas without being able to represent functions as values, which was the whole point of the boost lambda library.) Just because it works one way in one language you speak doesn't mean that that is the only way it can work. &gt; However colloquially a "lambda" has come to refer to I have no interest in what some random person who doesn't even know what the strict definition is thinks a colloquial usage is. &gt; Hell, you could really make they argument that they are all the same Only if you don't actually know what the distinctions are, and are still willing to call other people stupid in public. &gt; In fact, you did. No, I said "this isn't A, it's B." Your response was "you've got those backwards, and you said they're the same thing." And you're calling *me* stupid. &gt; I did not dispute your claim that JavaScript has lambdas That's nice. &gt; but called you out on the fact that JavaScript does have anonymous function Yes, that's the part you didn't understand. The rectangle and square example should have made that obvious, but since you had already decided I was wrong, it didn't occur to you that you had misunderstood me. I never said Javascript doesn't have anonymous functions. This is the part where you cut and paste the thing you didn't understand, continue to not understand it, and hold it up as an example of what you imagine is me saying the thing that I didn't actually say. &gt; [1, 6, 3, 4, 9, 2, 5].sort(function(x, y) { return x &gt; y; }); Yay, another lambda used as an anonymous function, because the guy who thinks they're the same thing now wants to show how it's one but not the other. Look, you could keep things in a car, and never drive it around, and call it a box. That wouldn't make it a box, even though you were only using it to do box-ish things. Proof that that's actually a lambda: function example() { var Reverse = true; [1, 6, 3, 4, 9, 2, 5].sort(function(x, y) { return (Reverse? (x &lt; y) : (x &gt; y)); }); } &gt; Those are both examples of anonymous functions. They're lambdas, which are stronger statements than anonymous functions. You've trapped yourself here. You want to say that the reverse is true, yet here's your "anonymous function" showing characteristics of a lambda with only minor additions. If you want to respond, get rid of the arrogance, or I won't continue to explain freshman cs 101 topics to you.
If they're elementary CS 101 topics, cite me the definition of a "lambda function" that fits what you're telling me. But most frustratingly: &gt; I never said Javascript doesn't have anonymous functions. From your [original post](http://www.reddit.com/r/PHP/comments/f1hlg/what_is_the_practical_purpose_of_create_function/c1cmhon): &gt; Notably, JavaScript has lambdas, **not** anonymous functions. Emphasis mine. So which is it? Does have anonymous functions now? Does it not? What exactly are you arguing with me about? That an anonymous function CAN'T be your definition of a lambda? Or it can be but JavaScript doesn't have it? Or because it fits your definition of "lambda" (which to you means a function that is both anonymous and a closure) they're no longer anonymous nor closures? &gt; Proof that that's actually a lambda: &gt; function example() { var Reverse = true; [1, 6, 3, 4, 9, 2, 5].sort(function(x, y) { return (Reverse? (x &lt; y) : (x &gt; y)); }); } You've just proved that it's both an anonymous function and a closure, you haven't disproved that it is anonymous. If I were to accept your definition of a lambda, then you would have also proved that it is also a lambda. But you have not proved that it is not an anonymous function. Why? Because the qualifications for being an anonymous function do not include anything to do with scoping. If the above example were to fail because it couldn't access `Reverse`, it would no longer be a downward closure, but it would continue to be an anonymous function. **tl;dr** JavaScript functions are both anonymous and closures. The definitions "anonymous" and "closure" are **not** mutually exclusive. Defining "lambda" as a function being both anonymous and a downward-closure is further proof that both definitions are not mutually exclusive.
So if I'm alright with php but should really learn a framework, Is learning Sym2 not a bad idea? There's not a chance of in 3 months time I'll be saying "Now that I've spent my time coding around bugs that aren't there any more I can learn it properly." Worth saying, Highly doubt anything of use will come to production level in this time.
I get rid of the old ones. 'Course that takes some pretty serious unit testing.
&gt; &gt; &gt; This is the part where you cut and paste the thing you didn't understand, continue to not understand it, and hold it up as an example of what you imagine is me saying the thing that I didn't actually say. &gt; From your original post: &gt; &gt; Notably, JavaScript has lambdas, *not* anonymous functions. &gt; Emphasis mine. Well, at least you're on schedule. I'm a little tired of pointing out the rectangles and squares example. If you wanted to understand, you would by now. &gt; If they're elementary CS 101 topics, cite me the definition of a "lambda function" that fits what you're telling me. I'm done dealing with someone who cannot be bothered to attempt to catch on. &gt; Does have anonymous functions now? Does it not? Lambdas are a stronger statement than anonymous functions. It's a car, not a box. That doesn't mean it can't be used for box-ish things. The two are not mutually exclusive. This isn't that complicated. When you're done being angry and rude, I'll answer. If you'd like to keep yelling and downvoting, feel free to believe what you currently believe. If your goal is to feel correct, continue. If your goal is to learn something, amend your tone. Last chance. Very soon: "you said if I'd be polite you'd answer. I wasn't polite. You didn't answer. THEREFORE YOU CANNOT ANSWER AND ARE A FRAUD." It never ceases to amaze me how predictable some people are.
Unfortunately, this is what we have been doing too... We have on the order of 50+ projects though (that last anywhere from 1 month-1 year) and it takes way too long... I guess we will stick with what we are doing for now.
One of the engineers (and in part my self) I work with is currently completing the Jobeet tutorial but all in Symfony 2. When it is done I will throw it up on Github for all to see. Also I am attending the Symfony Live 2011 in San Fran so I am sure to learn more from the conference about Symfony 2. So far the experience has been mixed. A little bit of over engineering and design pattern over use IMHO. Not as quick to do somthing simple like create a helper, validator or extend the model as in symfony 1. But perhaps I just dont know the tool kit quite yet
How do I add these links to form if I have a class form and one variable displaying the form in the view i.e echo $this-&gt;form;
U MAD BRO?
You can do an: addValidator('Extension', FALSE, 'jpeg,jpg,png,gif') or a addValidator('IsImage', false)
you could echo the form element by element between form tags, then you can add any html between the elements. OR you could define decorators that contain html. google "zend form decorators" and you will find some answers. if you still can't manage i will send you an example in a few hours. i'm on windows an have no access to source codes.
Thank you.
Nope. I just feel like stupid people are wasting my time.
does anybody know if there is a going to be a way to migrate 1.x projects to 2? it seems so different. i have a 1.4.8 project with several separate apps for backend and frontend and thats not the way 2 does it with the bundles under a single app. also it seems like the bundles arent even for that anyways. that everything should be under the same bundle and bundles are for other things?
Do you program in Javascript much? I use the heck out of key =&gt; function hashes. It's very nice for form validation.
For what it's worth, "ungreedy" is also often referred to as "reluctant" in some PCRE / Regex documentation.. Just in case anyone goes to Google for more info, you should know they mean the same thing.
It shouldn't be any problem over CLI, I've used PHP to do it before. Just make sure to read in your data via [streams](http://www.php.net/streams) instead of trying to hold everything into memory. Look into MySQL's [LOAD DATA INFILE](http://dev.mysql.com/doc/refman/5.1/en/load-data.html) syntax too, might save you from any actual scripting.
It's actually pretty doable. I had a PHP tool I made for processing XML that had to ingest a massive file (TB+). Over the CLI it ran straight for over a week without much issue. 
Great, thanks! Will look into data streaming. Good to know that it can be done.
No problem using PHP for large tasks just do a few things to cover your hind end. * set_time_limit(0); * set up error checking (exception handling) * if an insert fails log it * setup a recovery system that allows you to restart where the script left off just in case. * use prepared statements.
Read up on [garbage collection in PHP5.3+](http://nz.php.net/gc). Might find some efficiency tips.
Nothing wrong but keep in mind PHP is not suited for long running processes. If you plan to have it live as a daemon then you may want to contemplate another language. Personally I use PHP for large one-off imports so I can reuse my data models (one-off meaning once a day at most), however when I need a daemon to constantly be up (say monitoring a folder for changes to import) I write it in Python.
Facebook uses PHP. That is all.
Facebook doesn't do any data processing with PHP. They use Java (specifically Hadoop) for most of it, various other special tools (Java or C/C++) for the rest. Send in the downvotes!
&gt;Send in the do downvotes! Thanks for the help but people are smart enough to know what to down/upvote.
Zend should move what into the cloud exactly?
I didn't realise Python was an ecommerce system.
&gt;Want to turn off the 'Tell your friends about this Product' option? Ah, sorry, you'll have to hack around in 3 XML files and 6 template files to remove that. Or you could just disable it in the admin system, but the 3 XML files, 6 templates thing sounds cool too. FYI: System &gt; Config &gt; Advanced &gt; Mage_sendfriend &gt; disable. 
Some suggestions that come to mind; * read line by line, i.e. using fgets() not file_get_contents() or file() - so that your program won't take unnecessary space. * unset immediately when you're done with a variable eg. you have an array, on which you will be doing some processing and then moving the result to a new array - unset immediately the entries you're done with * group inserts together i.e. read &amp; process a 100 lines at a time and insert * I don't know what you're trying to do, but sometimes I can get away with just using bash. drop me a message if you have other questions ;)
The tend in /r/php is that no, they really aren't. Oorzas comment was at 0 points when it should be at positive since it's completely true. PHP at facebook is used as glue to present data generated by languages/applications far more suited for it.
There's nothing wrong with using PHP to process huge data sets. You just have that PHP has a large memory footprint. Simply spawning the process will use 15-25 MB of memory. The amount of PHP processes you have is directly proportional to the amount of traffic you can handle. So if this is a front-end server for you handling traffic then you might not want to occupy a 20MB process for a long amount of time as that would significantly decrease how much traffic you can handle. Other than that you should be perfectly fine.
I've seen it done with PHP, but I'd personally recommend Perl -- it's lighter, faster and better suited for such tasks.
Great suggestions, just couple of things: &gt; set_time_limit(0); If you are going to run your data processing tasks using command line CLI (and you should) - you don't need that. There are some configuration differences for CLI processes and time limit is one of them (that is - there is no time limit by default). Other things: * `ini_set('memory_limit', -1)` to disable memory limit. * If you have to process large XML files - don't use DOM parsers, use SAX (like [XMLReader](http://php.net/xmlreader)) * Consider using database transactions. If anything fails in-between you will not end up with half-baked data (I mean transactions covering couple of updates/inserts/selects and not entire processing task) * Someone already suggested that - don't read entire TXT/CSV in memory - read line by line. * I wouldn't worry too much about garbage collection and releasing/unsetting variables. If you have some sort of processing loop you usually override these variables with new data on each run (and that's when GC will kick in).
My last company built an entire web analytics package on PHP doing basically what you are describing with web log files. It worked, but memory usage and performance was incredibly poor compared to the Java-based system we replaced it with.
I was being facetious, but thanks! 
Can it? Yes. Should it? Probably not. Sure, it might be fast to write in php, but php has a much larger overhead compared to other languages. Being interpreted, the logic will run more slowly. You are subject to the garbage collection routines of the interpreter (unless you explicitly trigger them via the appropriate functions). Your data types will take more memory and possibly be less efficient. Associative arrays are a big example of this. If you're dealing with a large amount of data, why not try a lower level language where you have much more control over the memory consumption and efficiency, such as c, c++, or java?
I've found python to be much much faster at handling such tasks. That may be different in recent versions of PHP.
Yes, It can do. In fact faster than other languages.
python mysql bindings pretty much suck.
We use php for data processing and analysis. Our datasets run to 8-10 million rows of data. No problem. Just watch your memory usage if you are processing in memory li of streaming. The heavy stuff is done cli from a cron job instead of in the webserver process.
I know you said you want to do it from the command line. But in my experience using ajax can really help with these types of problems. You can do one ajax call after the other for procedural tasks. Or have multiple ones running concurrently if the task is suitable. It makes error handling simple and you can just output any problems, then reprocess the ones which had an error later when you've applied your fix.
If you want to speed things up, divide your data into segments and fork child processes to handle each work packet. Be careful not to allow your children to grow out of control though!
And use jQuery to add some shining effects combined with some `&lt;canvas&gt;` code to emulate command line output :)
oh, yes, of course. I disregarded the mysql part, didn't think it was essential. I just thought csv, txt etc. On another note I personally far prefer Postgres to mysql, though it doesn't make much difference to the question at hand.
The vast majority of the problems with long-running PHP daemons had to do with a total lack of garbage collection. This has been mostly resolved in 5.3's new GC.
&gt;Consider using database transactions. If anything fails in-between you will not end up with half-baked data (I mean transactions covering couple of updates/inserts/selects and not entire processing task) Why not transactions covering the entire process?, you say using transactions only in a "couple" of operations, why? 
LOL. The very first block of sample code in the article: Syntax Error. I love the PHP user base.
Mostly so he can resume the task after failure. Imagine running a data processing task for a couple of hours just to hit some kind of weird and invalid input character that triggers un-handled SQL error (and your transaction rollback). A transaction in his case should resemble one unit of data (a product in a CSV, for example, that would involve multiple tables/updates/inserts)
They should move PHP into the cloud and offer a service like phpfog. They are best equipped as they have great programmers working on PHP core.
A troll thinks himself to be wise, but a wise man knows himself to be a troll. 
im not quite sure where this remark comes from. after checking one of the servers at my office, i see that i've had a php script running for over 250 days. the script uses imagemagick to flatten and trim large TIFF and PSD files that have been uploaded using ftp. so simply put, its watching a folder for new files, then modifying them, creating a mysql row, moving the modified file, and finally handing the mysql row id off to a printing application. on an average work day, it handles around 50GB of image files. AND after looking at the script source, i realized this is something programmed when i really had little to no programming knowledge around 3 years ago. the only reason its been running for just 250 days is because i rebooted the server to run fsck. obviously php can handle long running scripts. 
Might I ask what kind of data was stored in a TB+ file? Sounds intriguing :-)
I'm not trolling. namespace MyLibrary\MyComponent; class MyClass { //... } Syntax error: Missing end brace at end of class definition. Wrong comment type used. Use /* ... */ if you don't want the comment to run to the end of the line. This mistake is used throughout the article too. In most of the code samples. This is a really beginner mistake too. I don't think n00bs that don't even know how to use comments correctly yet should be publishing articles. *Edit*: Also, I think you are misusing the word "troll" here.
I did some work with a group of "kids" that used PHP to process 20+ GB files of Medicare data for health companies. It wasn't good code, but the process would run for 4-5 days without a hitch. When they were done, they sent the processed data back to the health providers and eventually sold the software for over a million USD. tldr; A PHP process can run for days, process gigs of data, and make you a ton of money.
They even use Erlang for their chat.
Actually I think simast grasped exactly why wkstar64's suggestion was so silly, and delivered an appropriately satirical response.
Transactions (InnoDB) require row-level locking, which means if you perform an update on a given row in the database, that row will remain locked until the transaction is finished. This is why it is essential to keep the unit of work within a transaction as tiny as possible. If you had one transaction open over a long period of time, you very well may cause other scripts that utilize the database to timeout while waiting for the lock to be released.
I generate form elements with a property describing their validator, then run those at form post, but I can see how your approach would also be convenient.
Something like this might work. (I am not great at SQL, so this might throw some errors) select users.id collections.id, games.platform, count(*) from users left join collections on (users.id = collections.user_id) left join games on (games.id=collections.game_id) left join platforms on (platforms.id = games.platform) group by users, collections, games, platforms; 
 SELECT u.id, u.collections, c.id, c.user_id, c.game_id, g.id, g.platform, p.id, p.name FROM users AS u LEFT JOIN collections AS c ON u.id = c.id LEFT JOIN games AS g ON c.id = g.game_id LEFT JOIN platforms AS p ON p.name = g.platform GROUP BY g.playform ORDER BY p.name DESC ---------- Something like that. You'll want to add your own WHERE clause and edit it to whatever you need.
They don't run it like you'd expect :) Facebook compiles their PHP code into C++ with HipHop. 
 SELECT COUNT(g.id),p.name FROM collections c JOIN games g ON(c.game_id=g.id) JOIN platforms p ON(g.platform=p.id) WHERE c.user_id=? GROUP BY p.id ORDER BY p.name (Disclaimer: I usually wouldn't answer a question like this, but I'm a little bored so here's an answer. I'm pretty sure it'll work, but I have no interest in double checking, so your mileage may vary.)
And let's not forget about Perl, which is like the swiss knife of string parsing. But he asked whether it would be possible to do it with PHP or not, and it is.
Porn
Let's do this. First, create the tables. I've added name fields to user and game, to make this easier to hold in your head. I'm also going to put together some data for you, and show you how to build this incrementally. This is how SQL is done. First, you're going to make up bullshit data the whole time you're working, and write down how the tables are built and filled as you go, so that you can cut and paste any state into your SQL console. Remember that, do that, and you'll be much better off. First, get started. I'll assume a MySQL console. mysql&gt; create database reddit_ex; Query OK, 1 row affected (0.00 sec) mysql&gt; use reddit_ex; Database changed So, our crap data. John likes classic games and Civilization. Greg likes sports games and Civilization. create table users(id integer primary key auto_increment not null, name varchar(255)); insert into users(Name) values('John'),('Greg'); Notice that I named which columns I was inserting into, and I skipped the auto_incrementor. That's because it'll auto_increment a value into place. The results? mysql&gt; create table users(id integer primary key auto_increment not null, name varchar(255)); Query OK, 0 rows affected (0.07 sec) mysql&gt; insert into users(Name) values('John'),('Greg'); Query OK, 2 rows affected (0.02 sec) Records: 2 Duplicates: 0 Warnings: 0 Next, we need to track some platforms. Because it's sports, classics and Civ, we need NES, Playstation 3 and PC. create table platforms(id integer primary key auto_increment not null, name varchar(255)); insert into platforms(name) values('NES'),('Playstation 3'),('PC'); The results? mysql&gt; insert into platforms(name) values('NES'),('Playstation 3'),('PC'); Query OK, 3 rows affected (0.03 sec) Records: 3 Duplicates: 0 Warnings: 0 Next, we need to track some games. These reference the platforms, so we're going to introduce foreign keys. Foreign keys will only get enforced in MySQL if you use innodb (the default table type is MyISAM). Foreign keys in this context basically mean "you can't refer to a platform that isn't listed, and you can't delete a platform while things still refer to it." mysql&gt; create table games(id integer primary key auto_increment not null, name varchar(255), platformid integer not null, foreign key(platformid) references platforms(id)); Query OK, 0 rows affected (0.08 sec) Now, I don't actually want to track the IDs by hand, even for our test data, so let's start using SQL variables. set @PC = (select id from platforms where name like 'PC'); Also let's check the first one, to make sure it says what we think it does. mysql&gt; set @PC = (select id from platforms where name like 'PC'); Query OK, 0 rows affected (0.00 sec) mysql&gt; select @PC; +------+ | @PC | +------+ | 3 | +------+ 1 row in set (0.00 sec) Similarly, let's track NES and PS3: mysql&gt; set @PS3 = (select id from platforms where name like 'Playstation 3'); Query OK, 0 rows affected (0.00 sec) mysql&gt; set @NES = (select id from platforms where name like 'NES'); Query OK, 0 rows affected (0.00 sec) mysql&gt; select @PC, @NES, @PS3; +------+------+------+ | @PC | @NES | @PS3 | +------+------+------+ | 3 | 1 | 2 | +------+------+------+ 1 row in set (0.00 sec) Next, we can start stuffing games in. mysql&gt; insert into games(name, platformid) values('Tecmo Bowl',@NES), ('Super Mario 3',@NES), ('Civ 1',@PC), ('Civ 5',@PC), ('Madden 2010',@PS3); Query OK, 5 rows affected (0.02 sec) Records: 5 Duplicates: 0 Warnings: 0 Let's put the games' IDs in variables, like we did for platforms, to keep this straightforward. set @Civ1 = (select id from games where name like 'Civ 1'); set @Civ5 = (select id from games where name like 'Civ 5'); set @TecB = (select id from games where name like 'Tecmo Bowl'); set @SMB3 = (select id from games where name like 'Super Mario 3'); set @Madn = (select id from games where name like 'Madden 2010'); mysql&gt; select @Civ1, @Civ5, @TecB, @SMB3, @Madn; +-------+-------+-------+-------+-------+ | @Civ1 | @Civ5 | @TecB | @SMB3 | @Madn | +-------+-------+-------+-------+-------+ | 3 | 4 | 1 | 2 | 5 | +-------+-------+-------+-------+-------+ 1 row in set (0.00 sec) Let's also tie up John and Greg in variables too, again just for readability. mysql&gt; set @John = (select id from users where name like 'John'); Query OK, 0 rows affected (0.00 sec) mysql&gt; set @Greg = (select id from users where name like 'Greg'); Query OK, 0 rows affected (0.00 sec) mysql&gt; select @John, @Greg; +-------+-------+ | @John | @Greg | +-------+-------+ | 1 | 2 | +-------+-------+ 1 row in set (0.00 sec) Now we're ready to make the relation table. I renamed it to "CollectionMembers" to make it more obvious in queries what it does. I added some spaces to make this one easier to see. Notice this one has two foreign keys - a collection member needs its game to exist, *and* its user to exist. mysql&gt; create table collectionmembers( id integer primary key auto_increment not null, userid integer not null, gameid integer not null, foreign key(userid) references users(id), foreign key(gameid) references games(id)); Query OK, 0 rows affected (0.09 sec) Now like I said, John likes classic games and Civ. insert into collectionmembers(userid, gameid) values(@John, @Civ1), (@John, @Civ5), (@John, @SMB3), (@John, @TecB); And Greg likes sports games and Civ. insert into collectionmembers(userid, gameid) values(@Greg, @Madn), (@Greg, @TecB), (@Greg, @Civ5); Yes, those could have been a single query, I was just trying to keep this simple. Now let's see the complete list of who has what game by what platform. First, let's see who there is. mysql&gt; select * from users; +----+------+ | id | name | +----+------+ | 1 | John | | 2 | Greg | +----+------+ 2 rows in set (0.00 sec) Next, let's see which games each has. mysql&gt; select * from users join collectionmembers on users.id = collectionmembers.userid; +----+------+----+--------+--------+ | id | name | id | userid | gameid | +----+------+----+--------+--------+ | 1 | John | 1 | 1 | 3 | | 1 | John | 2 | 1 | 4 | | 1 | John | 3 | 1 | 2 | | 1 | John | 4 | 1 | 1 | | 2 | Greg | 5 | 2 | 5 | | 2 | Greg | 6 | 2 | 1 | | 2 | Greg | 7 | 2 | 4 | +----+------+----+--------+--------+ 7 rows in set (0.00 sec) Let's add some labels to cut down the verbosity. This starts mattering fast. We want to call collectionmembers "cm" and users "u". mysql&gt; select * from users as u join collectionmembers as cm on u.id = cm.userid; +----+------+----+--------+--------+ | id | name | id | userid | gameid | +----+------+----+--------+--------+ | 1 | John | 1 | 1 | 3 | | 1 | John | 2 | 1 | 4 | | 1 | John | 3 | 1 | 2 | | 1 | John | 4 | 1 | 1 | | 2 | Greg | 5 | 2 | 5 | | 2 | Greg | 6 | 2 | 1 | | 2 | Greg | 7 | 2 | 4 | +----+------+----+--------+--------+ 7 rows in set (0.00 sec) I have to continue in a self reply due to length limits.
Next let's only actually track the stuff we care about. mysql&gt; select u.name, cm.gameid from users as u join collectionmembers as cm onu.id = cm.userid; +------+--------+ | name | gameid | +------+--------+ | John | 3 | | John | 4 | | John | 2 | | John | 1 | | Greg | 5 | | Greg | 1 | | Greg | 4 | +------+--------+ 7 rows in set (0.00 sec) Now let's bind that to the actual games, so we can tell what platform they're on. First, wrap that in its own name, so it acts like a table. mysql&gt; select * from (select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid) as nameByGame; +------+--------+ | name | gameid | +------+--------+ | John | 3 | | John | 4 | | John | 2 | | John | 1 | | Greg | 5 | | Greg | 1 | | Greg | 4 | +------+--------+ 7 rows in set (0.01 sec) Now join nameByGame to games to get the platforms evidenced. mysql&gt; select nameByGame.name, games.name as gamename, games.platformid as platform from (select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid) as nameByGame join games on games.id = nameByGame.gameid; +------+---------------+----------+ | name | gamename | platform | +------+---------------+----------+ | John | Tecmo Bowl | 1 | | Greg | Tecmo Bowl | 1 | | John | Super Mario 3 | 1 | | John | Civ 1 | 3 | | John | Civ 5 | 3 | | Greg | Civ 5 | 3 | | Greg | Madden 2010 | 2 | +------+---------------+----------+ 7 rows in set (0.00 sec) Now we actually want the count, by platform. To get that, we use, generally, count(...) and group by. mysql&gt; select platformid, count(id) from games group by platformid; +------------+-----------+ | platformid | count(id) | +------------+-----------+ | 1 | 2 | | 2 | 1 | | 3 | 2 | +------------+-----------+ 3 rows in set (0.00 sec) And to show that's correct: mysql&gt; select * from games join platforms on games.platformid=platforms.id; +----+---------------+------------+----+---------------+ | id | name | platformid | id | name | +----+---------------+------------+----+---------------+ | 1 | Tecmo Bowl | 1 | 1 | NES | | 2 | Super Mario 3 | 1 | 1 | NES | | 3 | Civ 1 | 3 | 3 | PC | | 4 | Civ 5 | 3 | 3 | PC | | 5 | Madden 2010 | 2 | 2 | Playstation 3 | +----+---------------+------------+----+---------------+ 5 rows in set (0.00 sec) So we want the games, by platform, for each user. That means asking for the game name wasn't useful; we wanted the game ID, instead. The other query, with a small change: mysql&gt; select nameByGame.name, games.id as gameid, games.platformid as platform from (select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid) as nameByGame join games on games.id = nameByGame.gameid; +------+--------+----------+ | name | gameid | platform | +------+--------+----------+ | John | 3 | 3 | | John | 4 | 3 | | John | 2 | 1 | | John | 1 | 1 | | Greg | 5 | 2 | | Greg | 1 | 1 | | Greg | 4 | 3 | +------+--------+----------+ 7 rows in set (0.00 sec) And of course we actually want the count of IDs, so it's mysql&gt; select nameByGame.name, count(games.id) as gamecount, games.platformid from (select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid) as nameByGame join games on games.id = nameByGame.gameid group by games.platformid; +------+-----------+------------+ | name | gamecount | platformid | +------+-----------+------------+ | John | 3 | 1 | | Greg | 1 | 2 | | John | 3 | 3 | +------+-----------+------------+ 3 rows in set (0.00 sec) And you probably actually want the platform's name, not its ID. Wrap it again, to make it act like an interior table: mysql&gt; select * from (select nameByGame.name, count(games.id) as gamecount, games.platformid from (select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid) as nameByGame join games on games.id = nameByGame.gameid group by games.platformid) as countByPlatform; +------+-----------+------------+ | name | gamecount | platformid | +------+-----------+------------+ | John | 3 | 1 | | Greg | 1 | 2 | | John | 3 | 3 | +------+-----------+------------+ 3 rows in set (0.00 sec) And join that to platforms to get the name out. mysql&gt; select * from (select nameByGame.name, count(games.id) as gamecount, games.platformid from (select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid) as nameByGame join games on games.id = nameByGame.gameid group by games.platformid) as countByPlatform join platforms on countByPlatform.platformid = platforms.id; +------+-----------+------------+----+---------------+ | name | gamecount | platformid | id | name | +------+-----------+------------+----+---------------+ | John | 3 | 1 | 1 | NES | | Greg | 1 | 2 | 2 | Playstation 3 | | John | 3 | 3 | 3 | PC | +------+-----------+------------+----+---------------+ 3 rows in set (0.00 sec) Get rid of some more columns we don't care about by being more specific, and add some better labels: mysql&gt; select countByPlatform.name, platforms.name as platform, countByPlatform.gamecount from (select nameByGame.name, count(games.id) as gamecount, games.platformid from (select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid) as nameByGame join games on games.id = nameByGame.gameid group by games.platformid) as countByPlatform join platforms on countByPlatform.platformid = platforms.id; +------+---------------+-----------+ | name | platform | gamecount | +------+---------------+-----------+ | John | NES | 3 | | Greg | Playstation 3 | 1 | | John | PC | 3 | +------+---------------+-----------+ 3 rows in set (0.00 sec) Finally, let's put those in a better order. mysql&gt; select countByPlatform.name, platforms.name as platform, countByPlatform.gamecount from (select nameByGame.name, count(games.id) as gamecount, games.platformid from (select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid) as nameByGame join games on games.id = nameByGame.gameid group by games.platformid) as countByPlatform join platforms on countByPlatform.platformid = platforms.id order by name, platform; +------+---------------+-----------+ | name | platform | gamecount | +------+---------------+-----------+ | Greg | Playstation 3 | 1 | | John | NES | 3 | | John | PC | 3 | +------+---------------+-----------+ 3 rows in set (0.00 sec) HTH.
I haven't spent much time coding lately, so most of my current sql use has been quick hacks to solve little problems, so take with a few grains of salt. select count(*), user_id, name from collections c inner join games g on c.game_id = g.id inner join platforms p on g.platform = p.id group by 2,3 order by 3; Unless you want to filter by a specific user: select count(*), name from collections c inner join games g on c.game_id = g.id inner join platforms p on g.platform = p.id where user_id = ### group by 2 order by 2; Or if your uses table actually gives them a name: select count(*), u.name user, p.name platform from collections c inner join users u on c.user_id = u.id inner join games g on c.game_id = g.id inner join platforms p on g.platform = p.id group by 2,3 order by 2,3;
You're going to get an ambiguous 'id' column in query error on that. Gotta do u.id as user_id, c.id as collections_id.... or something to that effect. Maybe not though, but displaying the results won't be as easy if there are three of the same indexes.
The lessons here: 1) Make up data while you go, so you can check your work; 2) Build your queries a piece at a time; 3) Keep your table constructions, data and queries in a notepad outside the console so you can cut and paste them back; 4) Don't be afraid to torch and re-paste; 5) Get rid of columns wherever you can, for clarity, sanity and to keep the DB moving fast; 6) Re-label things constantly to keep stuff clear. Here's that last query, in a format that makes it pretty easy to read (well ... comparatively.) select countByPlatform.name, platforms.name as platform, countByPlatform.gamecount from ( select nameByGame.name, count(games.id) as gamecount, games.platformid from ( select u.name, cm.gameid from users as u join collectionmembers as cm on u.id = cm.userid ) as nameByGame join games on games.id = nameByGame.gameid group by games.platformid ) as countByPlatform join platforms on countByPlatform.platformid = platforms.id order by name, platform; But don't try to work in that format. That's good for reading, but not for writing.
PHP had GC prior to 5.3. The GC in 5.3 has been rewritten in order to be able to deal with circular references. Depending on the way you write your code you could have long running scripts without memory leaks in PHP &lt; 5.3
While I as well agree with your response, maybe he is in a similar situation as I was. Had to write a long running daemon in php because the other team members weren't skilled enough in other languages and able to further develop the code if I were to leave.
Looks like you already have several ready made straight SQL responses so I just have some general comments, since you say you haved limited sql knowledge. Maybe one of them will help you down the road. When joining make sure you are joining on keys, that means you'll want to have a key on your game_id column in collections, for example. The same goes for your where clause. It's okay to have some columns in a multiconditional where clause that aren't indexed but you'll want to limit the rows being exaimined as much as possible by utilizing a good index. Only one index will ever be used per look up. This means that if you have two indexes on collections, on one user_id and one on game_id only one of them will be used even if you specify where user_id=X and game_id = y. The "but" to this is if you have a single index that spans both columns. It is worth noting that if you have a multi column index, for example, (user_id, game_id) the latter parts cannot be utilized without specifying everything before it (in this case user_id) -- this may not even apply to your use case here but just something to keep in your back pocket for later anyway. If at all possible keep keys to numeric values. Don't create an index on a varchar(255). If you do need to index a (var)char column note that you are able to specify only indexing the first N characters. If that's all you need then great. Keep in mind of the charset of any character columns you index. If you index the first 8 characters of a utf-8 column that's 24 bytes per entry, not 8. Read up on the mysql explain docs and how to interpret the output. It can help you tell if you're query's ok or shitridden with table scans. Sometimes it's okay to perform multiple queries against individual tables and collate the results as needed client side. 
What do you mean by large?
The "code" examples you're referring to aren't actually implementations, just samples **to consider**(which is stated in the article). The *actual* implementation provided works fine. Before you go on lambasting me and feciosiously indicting the entire PHP community for no reason, you may want to consider the context of said "beginner mistakes" and realize that you're just a truculent nitpicker. Considering that you missed one of the most egregious errors in the article(back-slash comments), I'm going to say it's a safe bet that you aren't as talented as you think. Despite your trolling, I do appreciate feedback. The "mistake" will be fixed.
I have processed gigabyte xml files using php. However, just because you can do something doesn't necessarily mean you should.
I've found fgets degrades horribly if you happen to be working on a dataset with unsually large lines (several megs).
While I haven't tested out symfony 2, from the documentation available for me it seemed that validators are a bit easier to create than in 1.4. But I hate the fact that validations have been moved back to configuration files as in symfony 1.0.
Make a repository with your classes. Make a tag with version 1 and one with version 2, etc
Random wrong observations that don't apply to the situation at hand. Golf clap.
Yeah, I stated they were general items to keep in mind. What's "wrong" with any of them? 
thanks :D "hacker news" is http://news.ycombinator.com
This is built with PHP, MySQL, Javascript (with mootools), and an implementation of comet
Fair enough. I stopped reading the article after the intro paragraph and the first code example that I cited previously. Consider this: If you started reading an article about English, and the first paragraph of the article subtly misspelled the word "English", perhaps neglecting the use capitalization, how would that affect your confidence in the author's (uncited) credentials? Granted, the mistake is entirely superficial, and probably not relevant to the article (unless the article were about the virtues of capitalizing proper nouns), but my confidence would be compromised. As would be desire to continue reading the article.
Might also be nice if I put the count() in the right place. Notice that it's counting six games for John and one for Greg. That's because I'm a jackass. This is why you always check the results you get while you're working, which I obviously failed to do at step "And of course we actually want the count of IDs, so it's". Lesson learned: follow your own damn advice, and check every step. John should be showing two PC and two NES games. Greg should be showing one PC, one NES and one Playstation game. I'm going to go about this from the collection first. I counted at an inappropriate time. This gives me an excuse to build the query a completely different way, to do more teaching. Because, y'know, that way I'll feel less stupid about getting it wrong. First get the collection membership. mysql&gt; select * from collectionmembers; +----+--------+--------+ | id | userid | gameid | +----+--------+--------+ | 1 | 1 | 3 | | 2 | 1 | 4 | | 3 | 1 | 2 | | 4 | 1 | 1 | | 5 | 2 | 5 | | 6 | 2 | 1 | | 7 | 2 | 4 | +----+--------+--------+ 7 rows in set (0.00 sec) Then, join that to the games, to get them by platform. mysql&gt; select * from collectionmembers as cm join games on cm.gameid = games.id; +----+--------+--------+----+---------------+------------+ | id | userid | gameid | id | name | platformid | +----+--------+--------+----+---------------+------------+ | 4 | 1 | 1 | 1 | Tecmo Bowl | 1 | | 6 | 2 | 1 | 1 | Tecmo Bowl | 1 | | 3 | 1 | 2 | 2 | Super Mario 3 | 1 | | 1 | 1 | 3 | 3 | Civ 1 | 3 | | 2 | 1 | 4 | 4 | Civ 5 | 3 | | 7 | 2 | 4 | 4 | Civ 5 | 3 | | 5 | 2 | 5 | 5 | Madden 2010 | 2 | +----+--------+--------+----+---------------+------------+ 7 rows in set (0.00 sec) Trim that down. mysql&gt; select cm.userid, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id; +--------+----------+ | userid | platform | +--------+----------+ | 1 | 3 | | 1 | 3 | | 1 | 1 | | 1 | 1 | | 2 | 2 | | 2 | 1 | | 2 | 3 | +--------+----------+ 7 rows in set (0.00 sec) Now that's looking more like it. Here was my other problem: I had to do a group by two factors. Group by and count distinct. mysql&gt; select cm.userid, count(distinct games.id) as count, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id group by userid,platform; +--------+-------+----------+ | userid | count | platform | +--------+-------+----------+ | 1 | 2 | 1 | | 1 | 2 | 3 | | 2 | 1 | 1 | | 2 | 1 | 2 | | 2 | 1 | 3 | +--------+-------+----------+ 5 rows in set (0.00 sec) Now *those* are the correct results: John has two PC and two NES games; Greg has one PC, one NES and one PS3 game. Le sigh. Now start slapping on the chrome, since we've got the correct numbers. First wrap our answer as "answer". mysql&gt; select * from (select cm.userid, count(distinct games.id) as count, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id group by userid, platform) as answer; +--------+-------+----------+ | userid | count | platform | +--------+-------+----------+ | 1 | 2 | 1 | | 1 | 2 | 3 | | 2 | 1 | 1 | | 2 | 1 | 2 | | 2 | 1 | 3 | +--------+-------+----------+ 5 rows in set (0.00 sec) Get the users table involved. mysql&gt; select * from (select cm.userid, count(distinct games.id) as count, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id group by userid, platform) as answer join users on answer.userid = users.id; +--------+-------+----------+----+------+ | userid | count | platform | id | name | +--------+-------+----------+----+------+ | 1 | 2 | 1 | 1 | John | | 1 | 2 | 3 | 1 | John | | 2 | 1 | 1 | 2 | Greg | | 2 | 1 | 2 | 2 | Greg | | 2 | 1 | 3 | 2 | Greg | +--------+-------+----------+----+------+ 5 rows in set (0.00 sec) We really only want the name, and so we can drop the repeated id column. mysql&gt; select answer.userid, users.name, answer.count, answer.platform from (select cm.userid, count(distinct games.id) as count, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id group by userid, platform) as answer join users on answer.userid = users.id; +--------+------+-------+----------+ | userid | name | count | platform | +--------+------+-------+----------+ | 1 | John | 2 | 1 | | 1 | John | 2 | 3 | | 2 | Greg | 1 | 1 | | 2 | Greg | 1 | 2 | | 2 | Greg | 1 | 3 | +--------+------+-------+----------+ 5 rows in set (0.00 sec) And join in the platform table too, to get the platform's name, because screw the platform's id really. mysql&gt; select answer.userid, users.name, answer.count, answer.platform, platforms.name from (select cm.userid, count(distinct games.id) as count, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id group by userid, platform) as answer join users on answer.userid = users.id join platforms on answer.platform = platforms.id; +--------+------+-------+----------+---------------+ | userid | name | count | platform | name | +--------+------+-------+----------+---------------+ | 1 | John | 2 | 1 | NES | | 1 | John | 2 | 3 | PC | | 2 | Greg | 1 | 1 | NES | | 2 | Greg | 1 | 2 | Playstation 3 | | 2 | Greg | 1 | 3 | PC | +--------+------+-------+----------+---------------+ 5 rows in set (0.00 sec) Clean that labelling up a bit: mysql&gt; select users.name, answer.userid as uid, answer.count, platforms.name as platform from (select cm.userid, count(distinct games.id) as count, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id group by userid, platform) as answer join users on answer.userid = users.id join platforms on answer.platform = platforms.id; +------+-----+-------+---------------+ | name | uid | count | platform | +------+-----+-------+---------------+ | John | 1 | 2 | NES | | John | 1 | 2 | PC | | Greg | 2 | 1 | NES | | Greg | 2 | 1 | Playstation 3 | | Greg | 2 | 1 | PC | +------+-----+-------+---------------+ 5 rows in set (0.00 sec) And set an order. mysql&gt; select users.name, answer.userid as uid, platforms.name as platform, answer.count from (select cm.userid, count(distinct games.id) as count, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id group by userid, platform) as answer join users on answer.userid = users.id join platforms on answer.platform = platforms.id order by name, platform; +------+-----+---------------+-------+ | name | uid | platform | count | +------+-----+---------------+-------+ | Greg | 2 | NES | 1 | | Greg | 2 | PC | 1 | | Greg | 2 | Playstation 3 | 1 | | John | 1 | NES | 2 | | John | 1 | PC | 2 | +------+-----+---------------+-------+ 5 rows in set (0.00 sec) Which, in extended layout, is select users.name, answer.userid as uid, platforms.name as platform, answer.count from ( select cm.userid, count(distinct games.id) as count, games.platformid as platform from collectionmembers as cm join games on cm.gameid = games.id group by userid, platform ) as answer join users on answer.userid = users.id join platforms on answer.platform = platforms.id order by name, platform; As you can see, not only does this give correct results, but it's also a considerably simpler query. Sorry about that, bro :(
1) It's very frequent that multiple indices get used per lookup. There are some rules to making them compatible. 2) Multi-column indexing has nothing to do with this. Yes, you mention that. That was your hint to not bring it up at all. You might as well talk about being prepared for unicode. 3) There's nothing wrong with creating an index on a varchar. 4) Keys on floats are often more expensive than keys on strings; advising people to keep to numeric keys is silly. Maybe you meant integer keys, but in most cases where that's reducible, they should actually be using the row ID, not an arbitrary key index. Since that has nothing to do with the problem at hand, this is also advice which not only is wrong, but shouldn't have been given. 5) Why the hell are you talking about varchar key size? 6) Why the hell are you talking about explain, or table scans? 7) Why are you giving the bad advice that maybe they should just do some stuff client-side? 8) Did you notice that the only part of your advice that even tried to be relevant was wrong? You're pretty much just droning.
so how do you assure the long process will have consistent results?
let me see if I understood you, let's say he has 100K queries to commit, you say to put (for example) 45K queries in a transaction just in case there is a mistake so that he can rollback, what if there is a failure in the query number 45001 ? how do you recover from this error? PS: I don't mean to be a troll, I am just curious because I see this problem very interesting 
take a look at the reply I gave simast, thank you
Can you be more specific about the implementation?
http://www.ape-project.org/ with some changes
If you're working with MySQL already, doing the work in SQL will result in orders of magnitude performance improvement.
That's appalling. 20 gig of data processing should take minutes. My import of the 2g Netflix dataset, which includes parsing, normalization, spearman/pearson/kendall correlation, cross-normalization, scalar vector decomposition at 12 steps and a bunch of private metrics I don't want to talk about takes 19 seconds.
1) Unless you're talking about joins where an index is used to join records and another is used as part of the where clause you are mistaken and I invite you to show me a schema and sample select that illustrates your point 2) The Op pointed out he wasn't very familiar with sql, I pointed out I didn't have anything new to offer to his direct question and was just offering advice. This still doesn't make any of that "wrong" as you stated. 3) Once you start approaching 100 millions rows there's plenty wrong with it. Consider a varchar(255) utf-8 column here. 255*3*100,000,000 ~= 70 GB just for that index. 4) A float is 4 bytes, a double is 8 bytes. 5) Ok, this is where I start trying to respond in any kind of reasonable fashion. If you want to poison this reddit with your trolling superiourty complex just GTFO. I was giving good general advice that IS appicable to the OP since he's using MySQL and stated he's not very familiar. I've stated that all my comments were general purpose and a direct solution to his task at hand. I ask you why you disagree with me and half the points you bring up are just a personal attack on me. Come back when your mentality progresses beyond that of a 16 year old.
&gt; 3) Once you start approaching 100 millions rows there's plenty wrong with it. Looool. &gt; ... just a personal attack on me. Come back when your mentality progresses beyond that of a 16 year old. Mmm hmm.
No you won't, but if you want to return the results all you do is add a label. u.id AS `user_id` etc.
Thanks! Yeah, I'm not very good at web design lol
Importing data != processing data. A 20 gig table self-joined 3 or 4 times is going to take a long time to process.
Didn't you just post this here 10 days ago? http://www.reddit.com/r/PHP/comments/ewc6w/update_check_out_this_little_app_i_made_its_like/ edit: And 21 days ago... http://www.reddit.com/r/PHP/comments/er76r/check_out_this_little_app_i_made_with_my_bare/ and 4 months ago... http://www.reddit.com/r/PHP/comments/d40sm/i_built_this_a_couple_days_ago_is_it_any_good/ Another from 4 months ago... http://www.reddit.com/r/programming/comments/d3ro9/school_starts_this_monday_so_i_decided_to_try_one/ edit again.... 2 days ago: http://www.reddit.com/r/programming/comments/f1euh/fluin_in_a_nutshell_its_a_realtime_threaded/ This one in r/Programming, 4 hours ago that went no where: http://www.reddit.com/r/programming/comments/f2xyc/ive_created_a_site_like_hacker_news_with_a/ And finally a self post asking how to get more traffic to fluin.com http://www.reddit.com/r/AskReddit/comments/ex8qu/what_are_the_best_ways_to_attract_users_to_a/ 
Yup, a LOT has changed with each post
That crosses the spam line, sorry.
and it lookes completely bizare on ipad.
Thank you. Thank you. Thank you. I will study this and can't thank you enough.
So what you're saying is you don't know how correlations and normalization work.
NP. Read the other part too, where I noticed I was wrong.
&gt; obviously php can handle long running scripts. Not so obviously there. Php developers usually are a little sloppy with the memory stack because apache threads are transient. Depending on platform+version and down to the specific functions being used (read past patch notes), there are many PHP scripts that have unidentified memory leaks. Using a memory profiler, you can identify leaks in testing and you should plan for this. That being said, PHP as a language doesn't care how long outside of the ini/configuration/CL limits. The interpreter is only part of the equation. Stick to a BSD/Linux box for better memory monitoring and stability. If you run into a problem with a leak that you cannot or will not work around, use something like cron to schedule a monitor script to read through the process list and cleanup then restart the script if it dies.
What the fuck. This is like the most in-depth answer I've ever witnessed. Mad props man!
SnapTest http://code.google.com/p/snaptest/ really easy to use and has awesome webrunner
report this spam shit.
I've actually given bigger. :) But thanks.
TL;DR = use Count () with Group By and Order By.
Basically all of [this](http://www.ncbi.nlm.nih.gov/pubmed) in an XML format
Im not sure whether to give you mad props for the most extensive explanation of a solution in reddits history, or to seriously question the need for exactly that much bloat for a relatively simplistic problem. Ive read your whole post probably 10 times now, and am scratching my head as to the benefit of this solution overa much simpler one???
You format SQL almost like I do. Upvote. 
 SELECT usr.id AS "User Id" , plt.name AS "Platform Name" , count(distinct col.game_id) AS "Game Count" FROM users AS usr LEFT OUTER JOIN collections AS col ON col.user_id = usr.id LEFT OUTER JOIN games AS gam ON gam.id = col.game_id LEFT OUTER JOIN platforms AS plt ON plt.id = gam.platform GROUP BY usr.id, plt.name ORDER BY usr.id ASC, plt.name ASC 
hmm I never used fgets() with such large lines .. there are several other functions to read from a file pointer which you might try out, such as fread(), stream_get_lines() and most promisingly - fgetc() which gets a character at a time. Although if you use fgetc() your algorithm will probably needs to be a bit more "complex", but you have a lot more flexibility - like processing a column at a time instead of a line at a time.
add in some support for running a private tracker that indexes individual participants' media stores and I will buy your software If you were able to build an in-browser bittorent client, you can charge me $100 more for the software find a way to confederate between separate instances of individual licensed copies and you can add on another $50 to the price please make sure it runs on nearlyfreespeech
I'm a little confused by what you mean. Something that tracks what they upload to an installation? Or something that tracks what the upload across the Internet? Edit: Or by your name, are you being sarcastic or a troll? Ok, you're being a troll, gotcha.
no... not sarcastic at all... I've got a bit of an edge and people tend to treat me as a straight up troll, but in general, I like to think of myself as A-Non-Troll. I'm talking about providing a way for individual circles of friends and acquaintances to participate in fair use by basically adding private tracker like services. An in-browser bittorrent client would be nifty, but nobody has really been able to do that successfully, so, yeah, I guess that's a bit of a troll. 
Heh, alright. Well unfortunately it's not in the plans to build one with Kwolla.
Congratulations! This will be a very good experience for you, regardless of the results (and keep us posted). As soon as you start thinking of your own code as "good enough" for selling commercially it'll be far easier to develop new products in the future. How did you approach whether you should be hosting or selling the software? The requirements may seem a bit excessive (for configuring) for a lot of small shops - what are your thoughts about this?
[WASTE](http://en.wikipedia.org/wiki/WASTE) might be what you are looking for, although it doesn't run in the browser either. P2P does not fit very well in the "webpage" context, although new features in browsers may change this in the future.
It's got a fairly significant limit to the number of participants... ...I forget the exact number; 8 or 10 maybe 12, but certainly less than 20.
Congrats. :) &gt; Have you ever purchased a product that looked promising only to find out the code behind it is really poor? We have, and to prove that the code behind Kwolla is rock solid, you can check some of it out right here! I like this idea a lot. I also like that you offer the free download of the compatibility test. Also, while I personally don't have a need for the social networking software, I'd be very interested in your little ecommerce app.
&gt;An in-browser bittorrent client would be nifty Just a client? Pretty sure Transmission has a web interface.
How would you compare it to Elgg? I believe this is the leading OS solution for php atm, but that doesn't say much.
no, uh... the entire implementation. I guess I think of the bittorent universe as consisting entirely of "clients".
Looks good, the screenshots could use some descriptions, for instance, what is the graph representing? This is minor, but the URLs for the screenshots could be tweaked a bit too
CakePHP: * Decent ORM * Easy to add relation and validation to models. * Bake (command line generation of admin backend) * Basic authentication and ACL in core * Docs are great * Lot of active users on IRC (freenode)
Zend: * rather full featured (they have minimum and full packages) * very structured in default setup &amp; very customizable * command line tool (really useful when beginning a project) * pretty good documentation on their site and a lot of examples a google search away * Excellent Form and DB class
Synfony: *Doctrine *easy integration with other frameworks (Zend) *great docs *awesome admin generator *easy ajax
I know, it's just that I also started doing it in php and then tried out the most data intensive parts in python and things ran order of magnitude faster (like 2-5 min down to few secs). But I think you're right I should learn perl.
Not started using a framework yet as well. I've thought about Zend, but I found the tools annoying really (didn't give it that much time though i just felt that alot of programs besides notepad and wamp and a browser of course is too much haha).
Great! It'll be named IonCart and found at http://ioncart.net.
I tried a bunch of search terms in the demo but didn't get any results, is that feature disabled for the demo or do you have to implement it yourself?
I love the relational model set up and recursion variable.
There just isn't that much data in there yet :) I need to populate it with fake users and data.
I have requested a document comparing PHP frameworks from one of my employees for one of our projects. This is the result (it is only slightly edited to remove sensitive information regarding the project): ----------------------------- **Testing php frameworks for implementing proof of concept** The selected frameworks for the test where selected on their speed. So we have Zend framework, Symphony framework, Yii framework and DooPhp framework . All the frameworks used where stable releases, so for Symphony we used 1.4.8, Yii 1.1.5, Zend 1.11 and DooPhp 1.2. The test where run on an apache2 server with php5 version 5.3.3, the results where measured with Firebug and php timers. The folder structure of a project for all the above frameworks is basically the same. With the default configurations of a standard project we measured the response time of a generated page. The content size was around 7 KB for the test page, so the response time was around 140 ms for Symphony, Zend was around 130 ms, the avarage time for Yii was 40 ms and for Doo php the time was 14 ms. Winner of this test was Doo php, in second place came Yii, Zend and last came Symphony. Doo php is a light weight fast php framework, that is ideal for creating an api, the only down side is that it is poorly documented and it forces you to use ORM (object relational mapper). Certain features, like the lack of a good documentation, make development harder. Yii is a neat php framework, very well documented and for a full featured framework, it is fast. It is strict Php5 and OOP. It is comprehensive, verry well structured, robust and small. It requires less code to get things done, which is a bug plus. Yii also has an excellent database support. Symphony is a full stack php framework, the current stable version(1.4.8 ) has a lot of features, neat coding style and uses most of the best practices of web development. Unfortunately it lacks in speed compared to the other two frameworks that we tested. Symphony php 2.0 promises faster response time and more features, but the current version is slow and heavy compared to the other two. Zend php is a very good framework, but it is huge and heavy, it requires a lot of code to get things done. It is build for secure and reliable web 2.0 applications and services. Unfortunately it uses a lot of resources. In my opinion the best framework for this project is Yii because it fairly light, it is quite fast, and it implemented in such a way that requires less code for creating the desired result. Also it has was documentation, and a growing community. It has AJAX functionality built in, and many security features. Built on the MVC pattern it helps write clean and reusable code and provides a good separation of logic and presentation tier. Yii may feel like a lighter version of the powerful Zend framework. **References:** Symphony framework website: http://www.symfony-project.org/ Yii framework website: http://www.symfony-project.org/ Doo Php framework website: http://www.doophp.com/ Comparisons of frameworks that I have read: http://www.versusous.com/best-php-framework http://www.webdesignbooth.com/22-open-source-php-frameworks-to-shorten-yourdevelopment- time/ http://www.sheldmandu.com/php/php-mvc-frameworks/choosing-the-best-php-mvcframework- part-1
[Kohana](http://kohanaframework.org/) is pretty nice. It's more lightweight than the big three but still really very comprehensive. The website and documentation and community forums could use some TLC, but the developers are quite active. Depending on what you're planning to do, [Slim](http://www.slimframework.com/) might even be what you want.
I understand; another question while I have you: What does the 'percent complete' mean in the right sidebar? I imagine it's either how much of your profile you completed or the status of a video you were uploading but I don't see any firm indicators. Awesome job by the way. I didn't have a use for this when I woke up but now I'm seriously considering buying it just to find one. 
Been meaning to learn Doctrine (I joined Symfony when Propel was the recommended ORM): how have you found it? Did you use Propel beforehand?
You really should check out a framework if you're doing any more than lolcat websites: you'll probably find they save you a whole lot of bugfixing time in the long run
Isn't your speed test a bit quirky? It all depends on the content you tried to serve and whether or not the person testing it knew enough about the framework to implement your test case efficiently (which I doubt if someone tests a few frameworks at once).
How did you arrive at your pricing? There are so many open source or low-cost projects that meet or exceed your feature list (and are proven to scale in high-traffic scenarios), I'm curious how you feel you can compete at $79 a license as one guy? To be clear, I'm not hating - I'm genuinely curious as to the details of your business plan. It seems most companies have better success open-sourcing the software, and offering value-add services, setup and support, or hosting. Also the development of a community of designers and developers who back your product with themes and add-ons is invaluable - it's very difficult to cultivate this sort of community around a retail project (to be fair it's difficult around an OS project too). The other route that is gaining a lot more traction is Software as a Service. People are more inclined to pay a small monthly fee if it means they don't have to worry about setting up a server, paying a developer to configure and set it up and maintain it, or have to worry about scaling issues, etc
I've used Propel and switched to Doctrine in the meantime. It's a huge improvement. I don't remeber being able to do migrations with propel for example. If you know propel already, learning Doctrine is not hard and the documentation is quite good.
You totally sold me Yii, at least while I'm waiting for Symphony 2
Great, good to know. Thanks
Personally, I prefer CodeIgniter, but I'm also open to learning other frameworks, like Kohana. I just find that CI was easiest to pick up and run with for me. While it lacks some of the features of other frameworks, I don't really need them, so it works for me.
No need for taking cheap shots here. You're not proving anything but you do a damn fine job of making r/PHP a less enjoyable place to discuss. This may come as a shock to your glass bubble, but there are almost *no* sources of normalized data exports in the business world. In the case of these Medicare exports, all of the valuable data reporting existed in places where the normalization did not yet exist: Street addresses that are off by a letter, number or abbreviated suffix. Similar variations of first &amp; last names. It's rare for a single patient to be correctly and uniquely identified by every facility, doctor and pharmacy he visits - and that group of undergrads made a killing at correlating de-normalized data to prove that these apparently 5 different patient IDs were actually the same person.
yii
&gt; Php developers usually are a little sloppy with the memory stack because apache threads are transient i find this statement to be extremely annoying. leave out the PHP, and just make it developers.
I'll add some descriptions this afternoon. Thanks.
Yeah, Elgg is the (only?) open source solution that I know of. Elgg is pretty bad, the code behind it is painful and adding modules is tough. I built a network using it and I would not recommend it.
Thanks! The percent complete indicates how much of your profile you have filled out: just registering, profile information, and video uploading all contribute to it.
I'm curious, do you work professionally as a web programmer without knowing a framework? I'm not trolling you. But I thought that all web programmers had to know at least one. 
Thanks for all of the comments and questions! I'll answer some of them here rather than individually. About 2 years ago, a friend and I had an idea for a social network. It was called Prospect Vista and is located at http://www.prospectvista.com Due to tight budget, being a little to late to market, and not marketing it properly, it never went anywhere. However, the code I wrote behind it was some of the best I had written and I was pretty proud of it. Wanting to get some money back and possibly start a business around it, I figured let me spend a week, write some basic e-commerce software and then attempt to sell the Prospect Vista codebase (now named Kwolla, obviously). Thus, what you see is the result of that. As for the price, of my paid competitors: Ning is $200+ a year and you don't own the content, SocialEngine starts at $250 and the full package is around $550, the hosted version of Elgg is between $360 and $600 a year (although you can download the users data), and Dolphin is $99+. So although a lot of them may beat me on features, I can beat them on price. AND! You get free upgrades for life of all core code and modules (this is a limited time offer though). I think $79 is pretty reasonable. If it goes nowhere, I've only lost an extra week of work, but if it manages to bring in some good passive side revenue, all the better. I'm also doing it to learn SEO and online marketing better. And the best part? I now have another product, the software behind kwolla.com, to start selling soon!
Depends on what you're using it for but for lightweight sites Codeigniter will be your best friend as it helps with repetitive functions, is greatly extendable, and has the best documentation IMHO. 
CI was written for PHP4.. having worked with it, I would never recommend it to others.
Check out CI 2.0 or FuelPHP then. 
CodeIgniter because it's fast and extremely well documented. The speed is the most important part though. 
The speed tests you listed here are not really a fair representation of the speed of these frameworks. Once you actually work with a framework and gain an understanding of what it can do, there are a ton of ways to speed up performance dramatically. I leave you with this: http://blog.astrumfutura.com/2010/02/php-framework-benchmarks-entertaining-but-ultimately-useless/
No, I'm not (sadly since i need a job). The places I've talked to want ASP.net programmers, not PHP. So i'm learning ASP.net..
Migrations will be in the 1.6 release. 
Still learn PHP. Even though I prefer Python myself, PHP definitely pays the bills. Tons of libraries, open source projects and sites (this months rent was paid by me fixing a number of bugs of a custom php site).
I, who didn't study CS in college, have never understood why we should use any framework at all. It seems like studying another language that does the same thing just like PHP. Can anyone tell me what is special about Frameworks? I know that this is a stupid question, but really, I don't know why people use Frameworks. Edit: Do websites such as: Facebook, Digg, Reddit use any of them?
Documentation is what made me get started with CodeIgniter, also. I had basic C++ experience, but didn't know a lot about object oriented programming and had never even heard of MVC, so the in-depth documents were a huge plus to get me going. After a few months of learning and working, I'm about to wrap up my first major project and am pleased enough with CI. 
Yet to find a job though.. btw, does anyone here use the [smarty](http://www.smarty.net/) template engine? I do not, but i've checked it out, and started doing my code after templates more of a thing haha.
One big reason for frameworks, IMO, is organization. Frameworks keep a standard structure between logic and design, and functions. So, it's much easier for others to join in later down the line. Also, some framework contain a nice set of libraries that helps you from re-inventing the wheel. Sure, it takes time to learn a language then a framework. In the end it's worth it especially on big projects with multiple people involved. 
nice touch
I was teaching him how to solve the problem, instead of just handing him a solution. Give a man a fish, feed him for a day. ---- Edit: guys, please don't downvote askier for asking me that. It was a legitimate question. I ignored OP's goal, which was to get the answer, and instead hit that goal on the way to my own goal, which was to teach him how to get there. It's a legitimate thing to ask. What I did isn't always obvious.
I want to know this one as well. Ive released a few different php web based applications that were over priced for their market that did OK. My reasoning was that my stuff was niche, and also i offered free setup and ongoing support.
The one I made myself.
&gt; &gt; So what you're saying is you don't know how correlations and normalization work. &gt; No need for taking cheap shots here. What cheap shot? &gt; A 20 gig table self-joined 3 or 4 times &gt; &gt; which includes parsing, normalization, spearman/pearson/kendall correlation, cross-normalization, scalar vector decomposition at 12 steps and a bunch of private metrics I don't want to talk about takes 19 seconds. Seriously. I can do all that with a single self join. If you're self joining 4 or 5 times - not even sure how many times - then you don't know how normalization works, because it shouldn't be necessary to self join more than once, and you don't know how correlations work, because they are ridiculously cross-join active. It's not a cheap shot. It's a simple observation. &gt; You're not proving anything but you do a damn fine job of making r/PHP a less enjoyable place to discuss. Everyone else seems to disagree. Get off the cross. I've had two "thank you" full posts this month alone, and about two dozen serious thank you comments. [This one isn't even 18h old](http://www.reddit.com/r/PHP/comments/f2yb3/query_help_2_joins_group_and_an_order/c1cwp4e). &gt; but there are almost no sources of normalized data exports in the business world. Says the guy who knows every datasource in the business world. Funny thing: most of the datasources I play with are in fact fully 3nf or better. Now, if you had looked at what I said, I wasn't actually talking about that kind of normalization, since you don't call putting it into normal form "normalization," which means something different. Normalization means altering the dataset so that its primary measure is axial. So, for example, instead of rating movies on one to five stars, you take the average of all ratings, and subtract it from all ratings, giving you a rating on negative 1.3 to 3.7 stars, since it's now normalized. So yeah, like I said: you have no idea how normalization works. Funny how while you're complaining about having a plain, non-insulting statement of fact issued about you, you're also proving it to be true, and engaging in serious personal attacks in response. This is what kind of normalization applies to datasets. In the context of talking about correlations, SVD, and "cross-normalization" which doesn't even make sense in the idea of normal forms, given that we were talking about processing datasets which doesn't mean altering their presentation format, it should have been very obvious what I meant. http://en.wikipedia.org/wiki/Normalization_%28statistics%29 &gt; and that group of undergrads made a killing at correlating de-normalized data to prove that these apparently 5 different patient IDs were actually the same person. So are you done feeling victimized that someone said "so what you're saying is that you don't know how correlations and normalization work"? Because you really actually don't. Stop saying "you shouldn't be at angry-4" in angry-9, dude. Seriously. &gt; You're not proving anything but you do a damn fine job of making r/PHP a less enjoyable place to discuss. Way worse than what you were complaining about. &gt; This may come as a shock to your glass bubble Way worse than what you were complaining about, and doubly incorrect to boot. Settle down, Jean-Claude. It's not an insult for someone to say "so you don't know about topic X." Google Instant Expert isn't a badge of honor. You probably also don't know about annealing. That is not a glove slap to the face which you must meet with pistols at dawn. It's really getting old, the population of angry novices in proggit who can't handle the idea that they don't know everything, these days.
I'm learning Doctrine 2 by itself with no framework. Later on, I'll decide which framework to use.
I prefer no framework. They all end up costing more work than they save, in the long run, in my opinion. I do have quite a few technical basis claims for that position, but when I make them, I get voted through the floor by people who disagree. It's an opinion, not a personal attack.
I prefer said structure to be custom tailored to the job at hand. One size does not fit all.
What do you intend to do about piracy? Would you be willing to share sales rates in private? I'm very curious if this will work.
CI 2.0 is just as bad, it is based on architectural decisions made in a PHP4 world and even now is still compatible with PHP4, though they plan to remove that in 2.1.
Frameworks reduce development time. It's all about code reuse. Even if you don't use a framework, you still have to do the things a framework would do. If you have a set of tools you use for every project you work on, then that's basically the same thing others are accomplishing using a standard framework. I'm not sure if any of the sites you mention use frameworks, and if not, I'd guess it'd be for reasons of scale. However, for a long time, the Mozilla add-ons site ran on CakePHP. But they switch to Django a few years ago.
Slim is nice for a RESTful interface, like a web service API. It's based on the same principles as the Sinatra framework for Ruby.
CodeIgniter is written by EllisLabs, who also wrote Expression Engine. EE runs on top of CI, and it is the biggest abomination of crap I've ever seen. 
Choosing a framework is just a distraction. They are basically all the same. Pick one, at random if you have to, and stick with it. You'll like it eventually. Or not.
Speed isn't the most important part, not in the differences we're talking about with frameworks. The difference between the frameworks is minimal enough to be ignored. The most important part is long term maintenance. Codeigniter is stuck in PHP4-land, have fun maintaining that shit 4 years from now ;)
That's fine for a solo dev, for a team, you're going to need reasonably good documentation.
What are the docs like? How many eyes have inspected it for security flaws and general bad code?
CI is PHP 4 compatible. Not PHP 4 dependent. And speed is extremely important. For example, look at how horrible Magento is. It's built using Zend. If you don't think speed is important you've probably never built a site that sees over 1M unique visitors in 2 weeks. 
I will do nothing programmatically about it. It will be hard to tell if a site is pirated because I don't track where it's installed. If I find out a site is pirated, I will ask them nicely to take it down or purchase a license. Beyond that, it's pointless to stop piracy. I'll share sales figures in public. I plan on starting a blog soon to do this.
It's pretty good for medium-sized projects, but I wouldn't use it for really big projects. A really big project deserves a solid ORM and a framework with many integration api's to choose from. Symfony has a similar admin generation feature to Bake, but I can't say I know all of the differences enough to compare the two.
for small sites, you're right. If you have a mostly html site and a contact form, you'd be stupid to use a framework. But for extremely large sites, you're going to want to use a framework.
\+1. Zend_Form is probably one of my favorite framework classes.
Magento is at fault there, not Zend. I work for a top 2k site, which runs on Zend. I own another site which does over a million uniques a day (~6 million total). Zend isn't slow in itself, it's how you build your site with it (As with any framework). Being PHP4 compatible and dependent mean the same thing for my purposes; it is clinging to old patterns and tech.
CodeIgniter for now, but for next projects i'm seriously considering Kohana 3
me too! I like it so much that I made a WordPress plugin for making forms with it: http://wordpress.org/extend/plugins/zforms/ 
So, if I'm not using a framework, my ... code ... can't be documented?
Neat. Do you already know the address of said blog?
I write extremely large sites. My opinion is that public frameworks need more repair than the amount of work it would do to do that work yourself, and that then the result is less well understood, which will be a significantly larger problem than saving that small amount of work up front. Do understand that I'm not advocating centralizing work. I'm simply advocating not acquiring it in the form of a generic one-size-fits-all library from third party sources.
Documenting your code is not the same as providing documentation, you often end up dealing with developers of vary degrees of competency and auto-generated API documentation is not always enough.
In defense of Zend Framework, Magento is an exception to the average ZF application. It's heavy on design patterns, which is great in theory, but it is over-engineered. I know Magento inside and out, and I can see where people say it's horrible. It's not the type of code you can just sit down and start making changes to. If Varien didn't have a 10k/year option to the free version of Magento, they would probably spend more time caring about these things. Truth of the matter is you get a lot of functionality with the free version of Magento, but it is very expensive to maintain and find good programmers for.
I'm also a fan of Zend, using it for pretty much all greenfield development these days. There is a learning curve to climb on the Application/Bootstrap/FrontController front, but once you've gotten your head around it, it's quite nice. I've also recently become of a fan of Doctrine 2 (which bears no resemblence to Doctrine 1.x what-so-ever). It provides a very nice DataMapper ORM around which you can build your Models. It certainly beats Zend_Db/Zend_Db_Table
And yet PHP frameworks' documentation is generally terrible, and I can require my staff to hold certain standards about documentation, meaning the actual crucis is "do I think I can make my employees do a better job." On top of that, I still believe the designed-to-fit-the-job aspect is pretty seriously important. I don't want that to get forgotten in the discussion. One size fits all, in my personal experience, is often a very serious anchor around a project's neck. All those times you've seen people jump from Framework A to Framework B? Half those are about that.
In Zend Framework, a typical http request process only auto-loads a small fraction of the framework, so your statement that it is 'huge and heavy' is just plain wrong. Btw, it's Symfony, not Symphony.
I was excited to get to try it out from the fusion bundle, but after seeing how templates were done, I wanted to kill myself.