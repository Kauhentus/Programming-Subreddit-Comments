Dismissing any possible character set exploits, also magic quotes is addslashes() under the covers - rather than mysqli_real_escape_string()
I guess you're right. The way I thought of it is mostly these ids would be hidden from the user. &lt;a href="post/delete?id=15"&gt;Delete&lt;/a&gt; And if the user manipulated the dom and shot themselves in the foot - well then they shouldn't have been manipulating the dom. But I can see how I'd should at least give the user the best chance possible to stop being retarded. And intval() vs mysql_real_escape_string() isn't that much of a change. At the end of the day - this issue should be caught in data validation using filter_var().
From your downvoted questions asked by others, sounds like you should be looking at at job queue like gearman/RabbitMQ/etc. or rolling something yourself using Redis as the backend - if distributed work/job queues is what you are **really** after.
I gave back :D
I beg your pardon?
We (and people like Flickr) use Redis for a fast distributed locking mechanism. And we use cron a lot too. Scales fine. Saying crown doesn't scale makes no sense to me. Anyway you want scaling, use message queues, and distributed locking. You can kick off processes with cron, and split out work across a sea of workers. 
If there's anything I've learned from 20 years of writing software it's this: If there's a way to break it, no matter how obscure, a user will eventually find it.
So you think that OP is interested in a job queue rather than task scheduling? It would certainly explain his comments statements, but boy does he need to sort out his terminology if that's the case. 
Yeah based on this comment (but not covered in opening post = #fail) &gt; In a scaled/HA environment you have to consider concurrency, and figure out how the processing will always happen, but never duplicate or collide. But, like you, I'm taking a guess here in what OP wants :D
I didn't downvote anyone--but thanks for assuming I'm an asshole =)
It's actually both--although I suppose putting a cron job on several machines that would make sure to add tasks to the queue would work, assuming that the operation of adding them is idempotent.
&gt; being an ungrateful prick Okay... now I'm downvoting ಠ_ಠ
I want to make sure that cron doesn't become a single point of failure (having it only on one host, and having that go down) and I want to be sure that it doesn't duplicate the processes it's adding to the queue.
Cron certainly scales, it's just not the whole picture in a scaled solution.
Just a small aside here, you should POST requests for deleting records (IE use a form with a delete button, not a hyperlink)
The original url I used was /post/15/delete.
Disagreement is not bullying. Don't use the report button for such.
Agree with you ...... It is just a simple code for you if you want to modify it you can modify according to your need. We are working over it but for giving you an updated version it will take time. And names are like these because it will make a beginner easy to understand. 
I don't believe you in the slightest, given the close proximity between posting times and the posts getting downvoted. 
And if you have an *attacker*, that hates the user with id 18, you're *fucked*.
Yeah, well, you won't find any magical bullet. These are two different concerns. Cron does what it's supposed to do, namely run scheduled tasks. Whatever you do in those tasks is your problem, not crons'.
This might be useful to you http://code.flickr.net/2012/12/12/highly-available-real-time-notifications/
Is the old site / old URLs still live? If it is/they are then you could easily write a simple little spider to collect all of the sites URLs. Or if you'd rather not write anything from scratch you could always use one of the XML sitemap generators and then parse the URLs from the XML file produced 
yes, it's still live, but i dont have access to their old server. also, simply having links / sitemap without a direct correlation to the product-sku wont help.
Ah okay, sorry missed that part. The Ajax/JS issues aside, if you could scrape the sites internal search could you collect all the info you need?
Thanks to everyone for their replies so far - there's some incredibly useful and relevant information here. What an awesome community!
a curl request to search.aspx?find=*sku* only returns a &lt;head&gt; and some js code in the body, the results arent loaded until the document.ready event is triggered. it's a network solutions ecomm site. i set up their new shop in magento.. i was able to get product data from their CRM
Yep, got that...but you can still scrape the search results - just not using cURL. Assuming PHP is your only viable option then I'd look into using COM. For example... $browser = new COM("InternetExplorer.Application"); $browser-&gt;visible = FALSE; $browser-&gt;navigate("http://www.domain.com/search.aspx?find=sku"); while ($browser-&gt;Busy) { com_message_pump(4000); } $results = $browser-&gt;document-&gt;all-&gt;searchresultscontainerid-&gt;innerHTML; echo htmlspecialchars($results); $results will now contain the innerHTML of searchresultscontainerid but after document.ready has fired and after any JS/Ajax code has been loaded. Of course this will only run on a Windows stack, but a simple WAMP / XAMPP setup should work fine. 
 $list = trim($list, '/ '); echo $list; ?
http://www.phptherightway.com/
For some reason this sort of thinking is starting to prevail everywhere. "Just start coding and you'll learn it." It is probably true. But you'll have to reinvent so many bicycles on the way that it's really doesn't worth it. Yes, you have to code to learn to code but to disregard bucket loads of knowledge available in books and other resources is just plain stupid. 
http://php.net/manual/en/index.php Read the comments, not just the official word. The official examples are usually pretty good but missing in depth or give an example that leads you to believe some feature is useless, when in fact it can be used in an interesting way. http://phptrends.com/ That site aggregates top github projects in php. It's not comprehensive, since a lot are listed with no language or the wrong one, but it's got most of the top projects. Note the categories section on the right - find a category that appeals to you, some part of the internals of the internet that's appealing (it's a vast subject, with a lot of smaller parts) and look through popular projects. Pick one with a smaller code base and study it, rewrite it, whatever. http://dochub.io/ It has the PHP manual, but also info for CSS, HTML, JS, jQuery and I guess now Python. Javascript is fairly important and it is quite similar to PHP so knowing one helps you with the other. You can use the same design patterns in both, and there will be times when doing something in JS vs doing it in PHP is just a matter of who you want to do the computation, the client or the server. Also one of the most important parts of developing is having a comfortable, easy to access development environment. If you have to wrestle with your tools to make them work every time, it's not going to be very fun. I have mine set up very simply so that I can get to work in a matter of seconds, every time. If you are on Windows and want to know how I have mine set up just ask. (I don't use Apache or MySQL, I do any SQL development in SQLite or redbeanphp).
This is how I'd do it too. For clarity for the OP: &lt;?php $links = array( "Link 1" =&gt; "#link1", "Link 2" =&gt; "#link2", "Link 3" =&gt; "#link3", ); $list = ''; foreach($links as $key =&gt; $value) { $list .= ($value == $URI) ? "$key / " : "&lt;a href=\"$value\"&gt;$key&lt;/a&gt; / "; } $list = trim($list, '/ '); echo $list;
Do one foreach loop, and then do: `implode(' / ', $list);` This will put a `/` between all elements, but not at the beginning or end. Also instead of having the current item not be a link at all, you might want to just give it a class like "current" or "active" and style it differently in a stylesheet. Actually you could just spit out plain old &lt;A&gt; tags, and in CSS do: `.mylist a:not(:first-of-type):before { content:" / "; }` for example. or equally, `.mylist a:not(:last-of-type):after { content:" / "; }` edit: actually if you use that CSS, your &lt;A&gt; tags should be wrapped in &lt;LI&gt; or &lt;SPAN&gt; or something, otherwise the `:after` content will be a part of the link.
When it's cursing at the person, you bet it is.
The old URLs that you're going to be redirecting, are they 404ing right now? 
https://gist.github.com/4493405 This is basically what /u/mbcov stated but he didn't go into detail of how implode will work since you're treating list as a string and implode expects an array. Also, I opted not to use a ternary for the sake of readability.
Just a quick note, in the Appointment_model class, you have your function name: public function get_days_appointments($day) Yet, later, in the Reminders controller you have: $appointments = $this-&gt;Appointment_model-&gt;get_days-&gt;appointments($timestamp); Unless I'm missing something, it appears you are missing an underscore after "days". Also, not too long ago, there was a bug with running database calls from the CLI (it wouldn't return results). Has that been resolved in a recent version? 
&gt; no one is forcing you to adopt any PSR Well no shit, I never said anything on the contrary.
You may want to reword your sentence, then: impose &gt; 3. To obtrude or force (oneself, for example) on another or others.
Right now project only. But if all goes well I could provide a lot of future work if we build up a solid relationship. It would be at best very solid part-time work.
it doesn't provide quite as much info from the parse as kcachegrind, but its easier to use :)
interesting
I still never said that anyone *has* to follow any PSR, I just said that PSR-2 is people deciding a coding standard for use by others. There is a difference. And *clearly* the intention of PSR-2 is for everyone to follow it.
Just an FYI, /r/forhire has more users (I'm sure some overlap) but it's tailored towards this, so you might try posting it there and not worry about people down-voting you. I've seen some pretty cool success stories there from people hiring web devs in particular.
&gt; What I said is that there is no existing solution which addresses BOTH of these two concerns simultaneously, and it is up to him to put it together Or to restate: Heres a hammer, heres a stack of wood. How that turns into a house is his problem. While he hasnt said so, it seems blatantly obvious the question is how to assemble. 
Again, that's not at all what I said. **Stop misrepresenting my argument.** What I am saying is that there is no component X which does both A and B, but that you need to use component Y which does A in conjunction with component Z with does B to accomplish the goal. Is that clear enough for you yet, or are you going to misrepresent the argument again, in which case I'll discard you as a troll.
&gt;I dont know the answer to this question, but i was (am?) appalled at the answers that were posted(not just yours). You do realize that the question currently on the SO post is not the same one that was there 14 hours ago, right?
Good for you. I don't really care if you believe me. I respect myself enough that I don't need to lie about it. And I appreciate genuine help, whether or not it is actually helpful.
We do have a regulation that you shouldn't lawyer the moderators about the guidelines. I'm asking you not to post a chain of replies to yourself. It's disruptive and unnecessary. You would be wise to abide by my recommendation.
Fair enough.
Which is what, exactly? You're extremely incoherent. If it's about concurrency issues, then an answer cannot be given until you've given us some inkling at what you are trying to accomplish, as resolving that is dependent upon your business logic. 
Bingo--there are slight differences, but the answer to this question works for my situation. I would give you lots of upvotes for this if I could.
I see your problem. You could have it so all machines (or least two per job) have the same cron list. They all wake up at the same time and attempt to acquire a lock to generate the work that's pumped onto the queue. If node #2 doesn't get the lock it doesn't worry, node #1 has it covered. Again I'd use Redis for the lock server. Replication and fail over isn't too difficult to set up with it either. Not sure if that's a bit hacky though. 
Whoa... Was reading this thread today, but missed this letter. I, actually, agree with Anthony, there were a lot of such messages from Stas.
He really does bring up a lot of valid points. Without a vision for what PHP should become, any argument for or against any change is without strong reasoning, other than personal opinion. With a set goal in mind, you open up the ability to rationally reason out why a change should or shouldn't be implemented, based on how well it fits into the constructs of where PHP is heading towards. 
That is indeed helpful, although my primary issue is not one they have--their initial event is triggered by a request, and the job queue becomes the only concern. I'm my case, making sure that the event triggers are highly available is key.
&gt; "PHP is not java" and "I never want this". If you never want this, then don't contribute to the discussions at all. This is not the right way to argue against a point someone has made. It makes you seem like an asshole. You're not Linus and you don't have any standing to be a dick head. &gt; PHP NEEDS a vision. It needs something to guide development. Not everyone will agree with it. And that's the point. Completely wrong in every way. PHP already has a vision. &gt;"PHP Should Be Implementation Neutral, and Support All Paradigms Equally" This is exactly what made PHP popular. It's what made PHP the popular choice for up and coming web developers who have eventually morphed into professional programmers that now use "proper" OOP practices to develop their software. Moving away from this will only alienate exactly the type of people that make a language popular. Popularity might not be pretty but it brings jobs to the language which in turn pays of for those very same people that are now advocating throwing out the procedural parts of PHP and making it yet another OOP only language. *PHP is not Java by design*
Fact that PHP is community driven language shouldn't drive us into the horror that we have now. We have all and nothing paradigm, bunch of crap. Let's have a direction, let's not only add functionalities but remove them. Consolidate and standardize.Completely agree.
This is like reading a soap opera. I had no idea the nature of PHP development was so convoluted. I agree with 'Client Priest' in [this](http://news.php.net/php.internals/64782) email. Just because something like PHP is community driven, doesn't mean it can't have a committee that oversees the direction of the project. But I'm just the hobbyist do-it-yourselfer mentioned elsewhere in another of those emails. I don't really have much insight on the internal development of PHP or why it has no such direction. Maybe I'm missing something.
No, /u/Krapulator means that each delete link should actually be a `&lt;form&gt;` and it POSTS a request to delete the records. It's going to slow people down from running a script that automatically pings: /post/15/delete /post/16/delete /post/17/delete /post/18/delete /post/19/delete When you do that, you should probably also use a nonce to add another layer of protection from this happening.
If you can write a script to ping a url - you can write a script to ping a url via POST. [15,16,17,18,19].each(function(id){ $.post('delete/post', {id: id}); }); Can you give an example of what you mean by nonce or do you mean something like a CSRF token?
&gt;This is not the right way to argue against a point someone has made. It makes you seem like an asshole. You're not Linus and you don't have any standing to be a dick head. Actually it's something that needed to be said. Sometimes the wording has to be a little strong so people take notice. He's not trying to exclude him from anything, he's trying to say "hey, at least look at the stuff before you write it off, and come up with some constructive arguments.". This is not unreasonable. &gt;Completely wrong in every way. PHP already has a vision. Which is what exactly? &gt;This is exactly what made PHP popular. It's what made PHP the popular choice for up and coming web developers who have eventually morphed into professional programmers that now use "proper" OOP practices to develop their software. No, this isn't what made PHP popular at all. What made PHP popular was that it allowed even the most inexperienced web developers the ability to smash their head against a keyboard until something worked. Not that you have to write bad code in php, but many do. &gt;Moving away from this will only alienate exactly the type of people that make a language popular. Even assuming you were right (and I don't think you are) losing a few people who can't keep up with the times is no big deal. They are quickly replaced by others. &gt;PHP is not Java by design You mean like every other language that isn't Java?
I agree the with Stas. When you come to idea you need all java features then PHP becomes the second Java. Oh wait, maybe that would be easier to you to finally learn Java and move into it? But what we see: Symfony2 clones Spring, Doctrine clones Hibernate, Symfony widely use annotations... It's already Java. But Java is much powerful because of JVM, it's faster, it has threads and other cool stuff. If you will give development to guys like Anthony we will see that PHP will have no unique features. Only Javajavajava. Annotations is interesting mechanism but Is there any other ideas to solve the issues it is designed to? Discussion should start in this point: what issues do we solve by annotations and how it can be solved in other, simpler ways.
This comment is ignorant of the history. What made PHP popular was it's was, for a time, the best possible web development platform. At the time, your choices where Perl, Classic ASP, Cold Fusion, or maybe Python with Zope. PHP was far and away the best way to get things done (even if, as a language, it left a lot to be desired). When I started with PHP it didn't even have sessions or require_once() -- you coded those things yourself. Now PHP is no longer the best possible web development platform. That is what has been lost. And it's popularity will continue the downward slide until that is addressed. Being multi-paradigm does not help newbie web developers. It's just another layer of confusion. You don't have to spend long on on this subreddit to see how confusing it is. If someone asks how to do a `mysql_query()` the prevailing advice here is to use PDO! Every day someone asks which framework to use or how to do OOP. Non-OOP PHP is basically just old crusty insecure history except where you have to use it. PHP developers from the beginning wanted better object-oriented support -- but even in those early years there was push-back. Changing the reference semantics for objects was discussed (and implemented) for PHP4 but ultimately disregarded as being too radical and the end result of that was the eventual clusterfuck migration to PHP5. I'm not against making PHP implementation neutral and support all paradigms equally but that's not what we have. That's not the vision for PHP. It doesn't support OOP well and it doesn't even support procedural programming all that well. PHP development is motivated by fear. Nobody wants to add to the language for fear of making it complicated, bloated, or like-Java. Nobody wants to take away for fear of breaking backwards compatibility or hurting newbies. Everything is done based on least-damage as opposed to greatest-improvement. And ironically, many things done for least-damage reasons end up causing far more damage in the long term. &gt; PHP is not Java by design This is the kind of bullshit statement that Anthony is talking about. We can't improve the language for fear of making it Java! Not being like Java is not a vision. 
Very true about POST :) Yes, the nonce is a CSRF token
&gt; We recommend the static class approach (as shown in the examples above) because most projects don't need multiple database connections, and it's annoying to pass $db objects around all the time. ... &gt; Since MeekroDB is implemented as static methods in a class, you don't have to pass an object around all the time. You just call the methods as DB::whatever() from anywhere. This is better than $obj-&gt;whatever() because you shouldn't need to have that extra $db parameter on every one of your functions. It's better than the singleton model because even that forces you to do something like $obj = Mysql::get(); in each of your functions, before you can actually do anything *head butts desk*
I beg to differ. This is terrible. 
Put in the cloud. Rackspace, Amazon, etc. Those are highly available services... Or another way is to use multiple dedicated servers (in separate data centers) for your website, putting HaProxy in front of your web servers for load balancing. If one server goes down, the other takes up the slack automatically until it's put back online... Use Gearman with multiple job servers (on separate servers, physically) and X amount of clients. http://gearman.org/ With just 4 dedicated servers you can create a highly available service...
I have [a blog post](http://ihaveabackup.net/2012/02/27/what-is-doctrine2-anyway/) on beginning with Doctrine2. Maybe check out the other ones too, if you are still interested.
It gets worse when you realize that there are no prepared statements, and everything is done via string concatenation. 
Did you see [this](http://www.reddit.com/r/PHP/comments/167a2w/task_scheduling_cron_style_in_parallel_webbased/c7tx062)?
Jesus. No. Use mysqli or use PDO. Don't go anywhere near this.
You'd probably have an easier time finding the help you need in the [Concrete5 forums](http://www.concrete5.org/community/forums/). 
What I'm talking about are competing standards. Not a total disregard for standards. Please read carefully before commenting. 
&gt; When you come to idea you need all java features then PHP becomes the second Java. If you come to the idea that you can't have any features because they already exist somewhere else, you're really limiting the language design. &gt; If you will give development to guys like Anthony we will see that PHP will have no unique features. Only Javajavajava. I fail to see how *not* adding features will improve the situation where PHP has no unique features. The thing is, PHP has more in common with Java than it does with Python on Ruby. If you added dynamic types to Java and recompiled it on every request you'd get something pretty close to PHP already. Originally PHP was really just a dynamically typed scripting language equivalent of C. It was meant to be able to use C libraries and functions as easily as possible. Now we've moved on. There's nothing wrong with PHP being the dynamically-typed scripting language equivalent of Java. It's pretty much already there. And we can improve on it from there by adding property methods, traits, etc. 
Yeah true. Ill check those out a bit more. Basically they have a paid plug that does a similar thing to what I want. It's not being cheap on my end to not purchase it, I just want to know how to make something similar. Most of the posts just like to that plugin. Anyways thanks for reading i'll be searching those a bit
PHP is already too Java. They went OOP crazy. Here is the vision: less OOP, more functional. Go is something PHP could learn more. Also, less language features and more usable functions (or extensions).
I particularly like the PDO page, which reads to me as "it would've been too boring to write a thin wrapper around PDO, so I did this instead".
[marc.info's interface](http://marc.info/?l=php-internals&amp;r=1&amp;w=4) doesn't suck too horribly, if you don't mind the fact that it flattens the thread.
&gt; Really? What's better? My guess is that a lot of people would argue, javascript, ruby, or python.
&gt; Yes, but Java is not just a language it's a state of mind. And getting more from Java is a way opposite to simplicity. Java is an incredibly simple language -- way simpler than PHP. Less syntax. Less features. Less everything. So exactly how is PHP getting features from Java going to affect it's simplicity? As for the Java state of mind, that has nothing to do with language design except for the rule that if you make a language too simple the complexity will spill out everywhere else. &gt; Lambda functions: dynamic functions, solves issues when you define functions used only once. Traits: legalized copy-paste for cases you need it. Annotations Lambda functions pretty much have nothing to do with Java (they're only slightly faster than PHP at getting that feature). Traits don't exist in Java either. If you don't understand the types of real problems these features of meant to solve, you don't have much grounds for commenting on their utility. &gt; And I don't understand why all the community should follow their way. Just because they are popular? Maybe this happens because there is no other better solutions? Annotations are useful; you need a place to combine static configuration information with source code. PHP doesn't even have annotations, they've been hacked into comments because even hacked into comments it's still better than any alternatives we currently have. &gt; There should be a PHP Way, I agree. And it should be KISS. That's when I agree with Stas and Rasmus. If there is a PHP, it would just be this: http://xkcd.com/927/ The problem with wanting to keep everything KISS is that it's not 1997 anymore. The time of building forums, blogs, and basic e-commerce stuff over and over is done. We're trying to build complex reliable software here and PHP isn't providing the tools to do it. You want to roll back the clock to a time that doesn't exist anymore for programmers we shouldn't be catering to anymore. 
Agree with Rasmus and Stas, as well. Stas' reply to Anthony was perfect. http://news.php.net/php.internals/64775
&gt;Doctrine \*shudder\*. That has to be the most bloated, useless, and slow code base I've ever had to use. I honestly have no idea why anyone uses it. It solves nothing and complicates/slows down your code like crazy.
Let me add one note taken from this internals list. For what annotations are used? Constraints: @MinLength, @NotNull Behavior: @Transactional, @Inject Process: @Column, @XmlElement, @OneToOne Nature: @Entity, @Table, @WebService, @TestCase You see there is no single issue to be solved by annotations. This makes adds unnecessary complexity as i see it.
For what are functions used? You see there is no single issue to be solved by functions. This adds unnecessary complexity as I see it. Annotations add static configuration information into source code that can be retrieved by other code. Is that useful for many many different tasks? Yes, of course! I find it odd that would be a reason not to include it. 
&gt; That adds a layer of dark magic into application. I agree. I'd much rather have traits than some weird magic-method implementations of mix-ins and I would much rather have proper typed annotations than bastardized use of comments. &gt; To build complex and reliable software PHP is not the best choice for many real reasons That is what we're trying to fix. If you want PHP to be a toy language not useful for any real development, then I suspect you're in the minority here and among the actual developers of PHP. I'm not sure we have any common ground to discuss anything if you want PHP to end up like Logo, VBA, or COBOL. &gt; I mean PHP have more serious limits architectural limits then syntax issues. One day you will have to switch application or it's parts to other platform. So far after thousands of files and millions of lines of code, I don't yet have to switch to another platform. Nor would that make any business sense to do that ever. 
You're exaggerating. There are cases where it performs really well and makes reading and writing code pretty nice. Users and their related entities are often great candidates for management through an ORM, and doctrine isn't necessarily a bad choice. It uses some magic methods which are pleasantly not excessively magical, and have intuitive names. Basic queries are often sufficiently fast, especially for internal systems that aren't used by tens of thousands of people at once. It's a good time saver. If you need to collect metrics about one of those objects using aggregated statistics and loads of conditions, then of course it makes no sense to use Doctrine. I don't think anyone thinks Doctrine is a good idea in situations like that. You'd write the query by hand. Doctrine also allows juniors to accomplish database tasks using object oriented code, which in some cases is kind of nice. I mean, low barrier to entry if they're bad with databases, and far less risk of databases being destroyed. Even in a dev environment, that's a big plus.
Stas's reply: &gt; PHP is what people use to get their first site off the ground. PHP is what a web designer learns when he/she wants to go into programming. PHP is what a random Joe uses when he needs to whip up a page and he's in "do it yourself" mind. So if you aren't a beginner, a web designer who programs on the side, or a random Joe whipping up pages one at a time, PHP is not designed for you. I wonder how many people in this subreddit fall into that category? Are you, as a PHP developer, one of those people described by Stas? 
Stas is essentially arguing for the intentional creation of a ceiling on how useful PHP is as a programming language. He is saying we shouldn't allow PHP to improve, because it's designed for amateurs. Why choose to place limits on quality? I'm not in this category, and when I was, I didn't want to be. I also *didn't want using PHP to stop me from getting there*. I didn't want quitting PHP to be a prerequisite to doing "serious" web development. Why can't PHP be a language that someone can both learn on, and then grow into in a serious, professional manner? I think Python has done well at this - it is often touted as a great language to teach beginners computer science, but it is also great for very complex software engineering.
Except the PHP community is clearly sending a message that this isn't the case. Maybe it was once upon a time, but all you have to do is look at things like Laravel, Symfony 2, Composer and PSR to get an idea of the direction PHP is moving.
I think that goes to Anthony's comment that Stas is out of touch with the development community. Given that was his reply, it seems obvious that he *is* out of touch. 
Yes, I probably suck at writing. What I meant to say is focus on small common problems such as connecting to a DB, using cache to make things faster, deploying to a live server, localization, etc. You only end up with those questions when you are building something. Of course I recommend reading tutorials and other resources, but it just wont teach you as much, as, say, make a simple web service/site that returns you all the images with "my cat" in the title of imgur and let you, I don't know, button to share them on FB. VS Read the whole php.net ref, unless you are really really smart. Reinventing the wheel does sound stupid and time consuming, but remember that "All non-trivial abstractions, to some degree, are leaky.", and just following the tutorials is just not as effective in my opinion. I do know I might be a bit in the excessive side, I have gone as far as building my own ORM, CMS, Encryption methods, and more. Stupid people often call me. I had to learn c++ recently, and have read plenty of reference. I read plenty of the basic for/while/pointers/malloc stuff over and over. But it wasn't until I did just a simple chat server that I started figuring out stuff and how it all mashed together. And started asking questions like, "how do I allocate my own memory?", instead of the general "where do I start to learn X" that keeps on being posted. tl;dr Its worth it if you really want to learn want to be proficient. If you just want to get something(fairly simple) done, merge a bunch of tutorials and you'll end up with something.
Don't tag me as an arrogant extremist, i'm putting my ideas out there and see if they are any good. I'm very open to been proved wrong, and to discover new ways of learning new stuff. Edit: Not saying that you are ;)
Ah, I see. New account, negative karma. Please, carry on.
But why? If you want a clean, coherent platform, you have dozens of high quality choices that don't bring along 15 years of legacy baggage and cruft. It's like building a castle in the swamp. Yes, with sufficient skill, discipline, and determination you can, but why? You end up with a home in a bog, and you could have built a better home on solid ground with less effort and difficulty.
Not going to lie, I've started a new gig doing javascript and it's a great breath of fresh air. I love PHP, and realized how spoiled I was using it after working in Perl again, but Node.js just makes sense. Dabbled with Python\Django for a bit, overall it wasn't enough to jump ship but the models were pretty swell in it, same with RoR. At this point all seem like good choices for starting a web based app and it'll come down to preference (or your job...). It's nice that there are a lot more choices now.
&gt;That is what we're trying to fix. If you want PHP to be a toy language not useful for any real development, then I suspect you're in the minority here and among the actual developers of PHP. I'm not sure we have any common ground to discuss anything if you want PHP to end up like Logo, VBA, or COBOL Very good point and I have a little anecdote about how PHP is perceived. About to start embarking on a PHP project (from Perl) and one of the guys had reservations about moving the new platform onto PHP. After seeing what can be done with 5.3+ his major concerns were relieved as the last time he worked with it was probably around 3, maybe 4 when it was a real wild west. It was good showcasing what can be done knowing what it was like in it's earlier versions. Also, on a part of this discussion. A lot of the features on the way seem to be some of the better parts of other language(s) and I personally don't get a Java feel from it. To me variable setter/getters screams C#, generators Python, type hinting is any static language, etc.
I'm a tabs over spaces man, however I jumped on board the PSR-2 band wagon. It's nice to have consistency and even though I also don't like the newline for function\class curlies it's not enough to give me have any real reason not to. Although there's still a decent sized code base I need to port over to PSR-0's autoloader...
Zend is interested in their own products and agenda. They used PHP 'partnership' just so they can be 'the' place to go to when you need to work with PHP. It was a very smart move but I don't think anybody outside of Zend benefited. 
Lowest common denominator user IS primary PHP user-base. I interviewed PHP 10 developers in 2012 and 9 out of 10 did NOT know OOP properly. So if PHP professionals do not know OOP side of PHP how do you expect some random dude putting up a quick site? Not to mention PHP is standard for millions of web hosting companies and that is not going away any time soon. Random John Doe will not care about interfaces/abstract classes, closures, etc.
Easy to do the work with your mouth, removing/changing anything in the PHP's blueprint causes (I will go there) billions of dollars in technical support calls to web hosting companies and development time. It's not that simple, if they had a clear vision in the first place they would not have to be dealing with it now. Which is very easy for me to say but iteration takes time especially when the whole world is watching. 
Oh, hire me! Do I get extra points if I'm a ["silicone valley douche"](https://twitter.com/jorilallo/status/261977607757778944)?
As a PHP 'professional' with close to 10 years of experience AND as a web hosting company owner (7 years) I want to share my 2 cents. Personally I feel that PHP is on the right path, they are keeping 'procedural' style and expanding/improving OOP side of things. The reason they need to keep procedural style is very simple, most of their users use it. It's a well known fact that PHP is the choice of beginners. Pretty much any web hosting company offers PHP out of the box (CPanel is the leader in this area and they primary support PHP). So when you sign up for a el-cheapo hosting plan somewhere you will get exposed to PHP and you will write 'shitty' code. That's what I did when I was 13, so I understand why it's important. What I also understand is that removing procedural side of things will remove majority of PHP user-base. While I hate Java, there is a valid point in 'Why use PHP if you can use Java' when you think about OOP aspect of things. Not to mention millions of companies that offer PHP or work with PHP will have to deal with tsunami of support requests and angry customers as soon as procedural function is replaced with an OOP alternative. It is a very big deal and it sucks to be in a place PHP is currently in. That said, I personally think that instead of focusing on this subject they should leave things as they are but focus on following aspects: * When releasing new features, do not make procedural versions of them. DateTime for example should have been written without procedural support in place. I feel like doing stuff like this is stupid. * They should focus on linking unit testing / documentation tools closely to PHP. I feel like those tools should be part of PHP. 
TLDR: Let Reddit do your work for you.
He was [banned](https://twitter.com/ircmaxell/status/284328159711731712) from /r/php for "spamming".
Interesting. The plot thickens...
Not in this lifetime
While your bog metaphor is wonderfully clever you ignore a major use of PHP. If you want to build a distributed web application that will work on as many servers as possible out of the box you basically only have one choice: PHP. Lots of people like to pretend that Ruby and Python work just as well on bog standard $5 hosting but that is just a flagrant lie.
It's a retarded rule. He posted some really good content to this reddit that was well written and thought out. I'd also like to add that he took constructive criticisms well. I'd much rather have him here than someone like you who appears to contribute nothing.
Hey, another ircmaxell shill
That's really idiotic. I understand not posting blog spam but shouldn't reddit reward people posting good content? Most kittens for everyone! He should have taken screenshots of all his articles and posted them via imgur. 
It'a a grey area. While you certainly want good content, allowing wanton self-posting can lead to a lot of spam.
You sound a little worked up. Calm down.
Problem being that everyone that writes anything things they have "some really good content to this reddit that was well written and thought out". 
Someone finds something online, thinks it's worth sharing with others, so shares it. Someone writes something on a blog, by definition they think it's worth sharing or they wouldn't have written it on a blog, therefore anyone that blogs and posts their own work here is a blog spammer - regardless of quality, which is very subjective.
Some write good content, most don't. This is why it bothers me when people chase off the ones who actually do.
Up votes / down votes are the quality metric on reddit. If somebody posts their own blog or someone else does it, it's just one vote. 
So I suppose I should create a second account for posting my own blog content. "Oh thank you /u/throwaway1245 for posting more of my content!" It's sort of like DRM -- it only punishes the honest people. 
Sure, and I'm sure a lot of people do just that. I'm also confident Reddit has thought of ways of detecting stuff like that. 
Looks like he got banned from reddit altogether. That sucks, seeing as his stuff wasn't at all like the usual blog stuff which gets posted here, and actually had interesting content which would spawn conversation. 
But with this "Method" we would end up with trillions of useless garbage on reddit. (not that we got this allready, hehe)
&gt;If you want to build a distributed web application that will work on as many servers as possible out of the box you basically only have one choice: PHP. Which is exactly what I'm doing right now. There's a reason WordPress became the most widely used blog platform: PHP is everywhere.
Hi, Sorry for the late reply. Normally I read and submit later. ie why it happened. And I thought it was a good one. Probably we all are humans and opinions changes. Thanks
What the... Why are you bothering with a reply after three months, especially when there's nothing warranting a response.
&gt;chase off the ones who actually do ban the ones that don't follow the rules thin line, but a line none the less.
I think what this guy is doing is more disruptive than helpful, and it doesn't help that he's using abusive language to get his point across.
Doctrine 1 or 2 ? They are quite different. If you do CRUD, Doctrine is great. It also helps for caching requests etc.
This must have taken ages to do. Did you automate it or take the screenshots by hand. I wonder if the new contribution data is accessible using the API. It would be interested to take this data and use it into some kind of (pointless) competition. Furthermore, it would be nice to have some kind of embeddable widget to display this information on one's online resume
Despereate need of fixing? PHP fall into obscurity? I think you're exaggarating wildly.
Don't know why you got downvoted for this. Maybe a little fuzzy to be a vision, but that doesn't mean you should have 9 downvotes.
It really isn't. It's heavy, slow, creates ridiculously inefficient queries and the caching is awful since it does query caching and not entity caching, which means you can easily get served dirty cache.
That's not my experience with Doctrine 1. I have not completed anything significant project with Doctrine 2 yet.
Transmute errors into exceptions and deal with it like this: try { unlink($file); } catch (Exception $e) { ... } Please do not use the suppression syntax as it will cause more trouble than its worth.
I'm not sure either. I think it was partly because how I presented it. I didn't really rationalize. But back to the issue. I think there are some things that PHP should consider: * How can PHP handle web sockets in mod_php or php_fpm behind Apache or Nginx. This is a million dollar question for PHP's future (I'm really looking forward how Nginx is going to implement their side of this). Isn't PHP about web development, and isn't web sockets in a hearth of web development, in a future. * Have functions as first class citizens * Ability to auto HTML encode &lt;?= $value ?&gt; in PHP templates. I liked how Anthony implemented, and decided on password functions: http://blog.ircmaxell.com/2012/11/designing-api-simplified-password.html Symfony, and other full stack people seem to drive their 100% OOP agenda these days in PHP communities. Usually these guys have Java / .NET / Ruby backgrounds, and they seem to replicate the good and the bad from their own history. Doctrine is fine example of how things hit the fan. When Konsta Vesterinen (zYne) designed Doctrine, it actually made sense. These days Konsta is not on board anymore, and Doctrine is total crap. I generally believe in "less syntax" languages. C for example has been doing just fine without constantly adding keywords and features to language. Go seems to have this same idea. Language is modified only when everyone of its main designers agree. It's easier to help community by providing good APIs and libs than changing the language all the time. C# on the other hand has been implementing a whole lot of language syntax in a last few years, and my opinion is that C# has started to suck because of that.
Just to make it clear. The /r/PHP mods had no decision in this. He was banned from Reddit altogether by only submitting links to his blog. This is against the Reddit TOS. Whether you agree or not is debatable.
I think it's usually better not to break things, but carry the load that history has added. Althought kernel is a special case, I think this what Linus Torvalds has said applies to PHP too in some extend: &gt; If a change results in user programs breaking, it's a bug in the kernel. We never EVER blame the user programs. How hard can this be to understand?
If you don't intend to do anything in the catch, whats the difference though?
You should be logging the error in the catch statement. If you don't want to wrap it then it's still going to throw an exception which can be more easily logged in a global exception handler. I wont claim it until I benchmark it myself, but I believe it's slower to suppress errors with `@`.
I typically use exceptions if I care about a failure but when I do something like unlink() a file I no longer care about, I tend to use @ ...I really don't care if its not there to be unlinked. As for speed, I can't see why it would be slower to use @, but I would certainly be interested in finding out.
I think Stas' comments latelyl have been far more disruptive and unhelpful. Constantly his argument posts that "PHP is not Java" is completely unobjective. It's also really a dumb argument and unconstructive. I think Anthony was right to call him out on his bullcrap. He might have needed to be more tactful. But really Stas does need to come up with actual arguments that are constructive or shut up.
I started programming at 14 and been teaching myself since. I am 23 now and have fooled around w/ many languages, but spent the past 3 years focusing on web languages. I find that many of the communities and frameworks out there are great to enhance what i know, see things differently and learn. I strongly feel though that my ability as a programmer as come from creating custom cms and frameworks (even if not using on anything live) to further enhance and reinforce what i have learned. Programming and computers advance to fast to try and keep up with them all, instead I focus on using what I know and to learn as I go or want a break/distraction.
What's the urge to constantly modify the language? Who does that serve? The language designers. Exactly. Users don't constantly need more language. Only language designers seem to want more language. Users will work around language limitations. We need people who do say NO. Ian Hickson is NO to HTML world, and for good, but there are people just like Anthonty who fight with him too. There is Linus Torvalds, who does say NO, again for good.
This is terrible advice. Error suppression is a band aid solution and should be avoided when possible. I've solved a similar problem with disk io by caching results using something like memcache. That is much more scalable.
I don't know what this list is, but im on it, so BOOM! Disclaimer: I say boom ironically. 
What you are basically questioning has already been "designed" and thought out. [The Data Model Resource Book: Volume 3](http://books.google.com/books/about/The_Data_Model_Resource_Book.html?id=nUDIpjUb0ZMC&amp;redir_esc=y) Is all about a core database model. An example of it in use is [OfBiz](http://ofbiz.apache.org/) they do not stick to the model "strictly" but it is pretty close and the book is sighted as the inspiration behind the data model. you can get a general understanding of the datamodel via these four documents, [1](https://cwiki.apache.org/confluence/download/attachments/13271792/OFBizDatamodelBook_11x17_1of4_20081029.pdf), [2](https://cwiki.apache.org/confluence/download/attachments/13271792/OFBizDatamodelBook_11x17_2of4_20081029.pdf), [3](https://cwiki.apache.org/confluence/download/attachments/13271792/OFBizDatamodelBook_11x17_3of4_20081029.pdf), [4](https://cwiki.apache.org/confluence/download/attachments/13271792/OFBizDatamodelBook_11x17_4of4_20081029.pdf) or browse the [entity reference](https://demo-stable.ofbiz.apache.org/webtools/control/entityref) (admin:ofbiz). from what you are describing you would not need to (or want to.. its huge!) implement all of it, but as far as inspiration you may find it interesting. at the very least the book is interesting.
That's weird. The project I am having problems with that on is 2.1.0, and I thought I saw in the change log it hadn't been fixed. However, I download and tested a copy of 2.1.2 and it works just fine. I think maybe the reason it's not work for me in my main project is because the original developer didn't bother with models, but put everything inside libraries. Regardless, I'm now just using a curl request for my cron job. 
Yeah, that's not right. The rule is meant to protect against those who do nothing but spam a sub (and sometimes many subs) with nothing but their own content, and only do so in their own interests -- this is evident when they never participate in reddit other than to post their content. They don't reply to comments in their posts, they don't take part in discussions in other posts, etc. That does _not_ describe the behavior or /u/ircmaxwell. That was not the case here. He was a normal redditor who just so happened to have a blog. He was very active in this sub and as far as I can remember, his articles were always very well received here. Not to get all conspiracist or anything, but I have a feeling that single individual (other than him) was responsible for this; I know for a fact that reddit doesn't just go around and look for people to ban, they are 100% reactive and they react solely to reports from users. Someone got their jimmies rustled here and decided to take the underhanded route.
You should try markmail.org, [I mentioned it above](http://www.reddit.com/r/PHP/comments/169gmh/phpinternals_we_need_a_vision_anthony_ferrara/c7ugr1k).
Maybe you're right. I probably have an irrational fear of @ since it's unwritten law that you don't use it, ever.
because the language doesn't do what i need it to do as a developer. that's why..
This is just a chicken-or-the-egg question. Is PHP the way it is because its primary user base is full of "LCD" programmers, or are those programmers subpar in the first place *because* PHP is a subpar language? I certainly vote for the latter explanation, and I really believe that upgrading the language will inevitably lead to a higher quality user base as well. And that is a good thing, both for users *and* the language itself. 
How does that serve the language designers? Where is the raw incentive for them to modify the language? And how does "more language" equal "language limitations"? I think the opposite is true. Modifying the language generally leads to less language limitations, because that is often the point. For example, the addition of traits to PHP did not limit the language in any way, but it certainly gave users more power if and when they wanted it.
...Why?
I'm actually very happy about this one. This will make it very easy for libraries to send their log data to something under your control. This can be simple stuff like Swift Mailer logging some info about every sent email or it can be complex stuff like a non-fatal parsing oddity in ffmpeg-php.
Plenty of people complained about PSR-1 and PSR-2 as they thought some random group of people were randomly trying to tell folks wether they should use spaces or tabs in the applications they build for clients or at home or whatever. That was never the point of the FIG. Now the group are putting together useful interfaces (which have a standard style. See why that was handy?) for various things, amongst them are this Logger PSR, with various HTTP and Cache proposals in the works. For an example of WHY this sort of thing is handy, take a look at this code: http://geocoder-php.org/ See there the list of HTTP adapters that the one guy has had to build? * BuzzHttpAdapter to use Buzz, a lightweight PHP 5.3 library for issuing HTTP requests; * CurlHttpAdapter to use cURL; * GuzzleHttpAdapter to use Guzzle, PHP 5.3+ HTTP client and framework for building RESTful web service clients; * SocketHttpAdapter to use a socket; * ZendHttpAdapter to use Zend Http Client. NOISE. If the developer of a package can instead check the class being passed in has an instanceof \PSR\HTTP\Client then they know exactly how to interact with the client, even if the specific client has a whole bunch of awesome extra features. The base miminum is covered in a generic fashion, meaning we don't all have to write fuckloads of drivers for everything. This Log PSR means we can interface with Monolog, or any custom logger in the exact same way. If it doesn't interest you, then it's probably not aimed at you. It interests me for PyroCMS hugely, because I can swap out components without having to rewrite my application. Thank the gods. A massive pat on the back to [Jordi](http://seld.be/notes/one-logger-to-rule-them-all) for getting this through, against all odds. Subscribe to [PHP Town Hall](http://phptownhall.com) if you want to hear him on the next episode (4) talking about how fucking difficult it was to get this done.
I can't say I share your enthusiasm on the subject matter. I don't think that logging utilities should be handled inside of components, but be part of the architecture and wrapped around where these components are used. I can easily see the case of wanting to log to different sources depending on where and how a component is used (something which would be a problem with this implementation). Furthermore, it seems to me as to be an added responsibility for the class, something which you would want to get away from if you want to keep your code SOLID. If the issue is that different components have logging built in, but can't share logs, then the issue isn't that they're not sharing an interface for logging, but that they're doing more than they should be doing. If you keep the logging in the architecture, this problem goes away. 
Doesn't look like any framework: https://github.com/Elgg/elgg
I'm just going to leave this comment pre-emptively: These are FIG standards, FIG stands for Framework Interop Group. They are not general rules or standards, and you are free to follow whatever standards (or combination of) that you wish. These standards are relevant for the FIG to ensure their goals - interoperability between member frameworks. If you're not a FIG member, and don't willingly use PSR on your projects, then this does not concern you.
If a component has a logger passed to it via DiC then it's perfectly acceptable to use it. Now the use of this logger has only a single interface, so there is no difficulty in using it. Win.
That adds a ton of boilerplate code that just doesn't get written. Sometimes, that's because the subject matter just didn't exist back when the library was originally written. This is particularly true when dealing with remote services that invent things like rate limits on the fly. A notice from the service that you hit 90% of your rate limit should go *somewhere*, but your application doesn't even know that the service has rate limiting. That's a problem. &gt;I can easily see the case of wanting to log to different sources depending on where and how a component is used (something which would be a problem with this implementation). You can pass each component a different logger. Your logging library can easily give you a new LoggerInterface-compatible logger that ignores debug-level warnings. What it's hooked up to in the backend is another thing altogether. It's more of a problem when you want to ignore certain classes of messages; you might want to ignore "email sent" notices while your network admins are very interested in a "had to retry 3 times to send this email". That does suck if both are info-level.
I can't load Disqus so I can't see the comments, but what about [the comments by MWOP](http://www.mwop.net/blog/2012-12-20-on-shared-interfaces.html) (FIG co-founder)? 
Well then I already know as much about this project as I need to know!
&gt; ...if an Exception instance is given to produce a stack trace, it MUST be in a key named "exception". Ohhhh why? Another thing which can be mistyped. I have just eliminated this key-based replacement thing from my logging facade because of this. The simpler solution is the better. However I like the intention.
I see a lot of people around discussing this addition to PSR, which is good. A lot of the negatives seem centered around it not being flexible. Sure. If it doesn't fit your needs, don't use it. No-one is holding a gun to your head, or going to judge you if you don't adopt it. It's a proposed standard, not a requirement :)
The point is, if you WANT your component to be able to, you can in a consistent manner. This is but one of multiple benefits which I have already explained in my comment above. The fact is people DO use loggers in their components already, so now they have one interface. If they take them out of their components, this still helps applications interface with multiple loggers with minimal fuss and recode. 
No verbose?
I'll never understand the people complaining about these standards. It's like they want PHP to remain a huge cluster fuck. As someone that dabbles in Java, I'm delighted to see a standard logging implementation.
How a project without a framework is "bad"?
Shame the demo (http://demo.elgg.org/) doesn't seem to work at the moment.
Sensationalist title for a pretty meh article. There one main reason not to use @, and that's because you're basically ignoring potential warnings and hazards. Don't hide warning and error, fix them.
I get the idea it was done manually - as one of the screeny's has a mouse tool tip in it.... :D Would have taken a while...
Do you expect every member of the FIG to get on and have the exact same opinion? You don't hang out on the mailing list much do you!
&gt;I wonder how PHP never got a major fork. Because it's lots of work. Truth is most developers contribute nothing to an open source project; it's 99 devs arguing about how it should be done and 1 actually doing any coding.
Elgg is a horrendous mess. Seriously. The lack of framework I can handle, but at a minimum this project needs fully converting to OO PHP.
Application of a rule needs to be tempered with circumstance. Just like there's a difference in society between the letter of the law and the spirit of the law. He wasn't really doing anything bad, and everyone here knows it.
So if we get 2 devs that don't argue to work on the fork it would be 2 times faster than the main branch?
then use logger channels to separate them? too bad that isn't part of the interface thought.
I have a vision for PHP. It is the language for the web. Yes, it has competition, but it's been designed from the ground up to deal with the internet. I believe it is distinct among well known languages in that regard. Node came to my mind but javascript didn't begin as a server language. "PHP Should Be Implementation Neutral, and Support All Paradigms Equally". Absolutely this is the right answer. If you want to write entirely OOP, then you don't have to worry about the functional side of PHP. If you want to write entirely procedural code, then you don't have to worry about understanding much OOP... however you do have to know how to access an object, but that's less than 1% of OOP. Object oriented is just a paradigm, it's not necessary for anything, and sometimes it leads to very wet code. The C language has no concept of objects but you can write anything in it, including an object oriented language. I would rather see PHP's focus be on continuing to provide and improve on useful ways to deal with the demands of clients (by clients, I mean anyone accessing a PHP hosted site, including ajax requests that aren't really a person). If the number of frameworks and PHP devs who will not work in PHP without a framework is any evidence, it's that this is a core issue for PHP as a language. A lot of frameworks are reimplementations of things that PHP can handle natively, but does awkwardly, or not as completely as they'd like. So yes, in conclusion, focus on HTTP. Continue providing object and functional access to new features, wherever it makes sense to. The future of desktop applications is really getting closer to meaning the future of web browsers, as everything shifts to the internet, and PHP should strive to be the language that people use and enjoy using to write the next generations of web applications.
Is a project you can use if approached by a weekend hobby group that want a private network, Theme it and bill them high. 
you should turn of display_errors in production anyway, so even without the @, no error is emitted to the client. how frequent is this race condition? would using flock before unlinking help at all? (I'm asking rhetorically) If it's really being an issue, you can wrap it in some kind of loop: while(!flock($file)) {} unlink($file); /* or */ while(file_exists($file)) { unlink($file); } although that has the downside of blocking execution until it completes, but I don't see why it should take a noticeable amount of time unless something is really wrong. If you have that many requests doing that much IO, you should probably use a database to track files state, and use a separate script in a cron job to clean up the leftovers.
[ZF2's got CLI support.](http://framework.zend.com/manual/2.0/en/modules/zend.console.routes.html#zend-console-routes) &gt;One critical qualification that I'm hoping to find feedback on is performance using CLI based PHP. Performance, in what regard?
Well here's the thing. You have to have an open file handle to flock on. But generally unlink will fail to remove a file that's still open. So, to unlink you either have to unflock first, or close the file, which will result in an automatic unflocking. So by the time you get to unlinking the flock would be gone anyway. To make it work you have to lock on a seperate random file. For example you might have a file named locked in your folder that you could lock on any time you needed an atomic file operation depending. But why all the trouble? You're right. This is what the DB is for. To prevent all this.
Most likely dealing with database interaction, both read and write, with all the usual validation and exception throwing and all that.
&gt;my concern is looking like a total noob to the other contributors I know that feel. I just started committing to a couple projects on github. I made minor edits to stuff that I knew was written quickly, for example returns that would never be reached, repetitive code, mostly just micro-optimizations. A few lines changed at most, with three times the amount of explanation than actual code I changed. My pulls got merged. It's kind of neat. If there's anything that you use, or are just interested in reading how it works, dig into the code and read through it, step through it in xdebug, even just look for inconsistent formatting (e.g. mixed brace styles or a space bar tapped too many times). The devs are probably happy that someone else is actually perusing their code. But github really does need more of a community feel to it. It feels very formal, especially since a lot of people divulge their identities and can feel like a minnow in the vast ocean. If you want a project to contribute to, check out [phptrends](http://phptrends.net) and look for something with at least a few followers, updated within the last 6 months, and that you either have implemented yourself before, or would be interested to see how it's done. And of course don't feel like just because you made a few pull requests that you're now a "contributor" and have to stick around and follow a project. A lot of it is hit-and-run, and a one off "hey I was browsing your project and you could have done X" seems to be acceptable.
Thanks, i know what i'm doing, but i want something quick, the last time i tried Magento was very slow...has it got any faster? :? 
Well, I wouldn't have any issue using any of those three and I imagine they all do a good job of organizing code, but if one uses less memory and makes more efficient use of the database that would be huge. Or if there are other advantages I'm not thinking of that specifically relate to CLI based PHP scripts I would be interested to know. Performance unfortunately is a concern when you have to do a task a million or more times a day. 
Are we *really* going to suffix all interfaces with the word **Interface** now? 
&gt; I interviewed PHP 10 developers in 2012 and 9 out of 10 did NOT know OOP properly. Did you hire any of those 9? If not, then I'm not sure what your point is. If a PHP developer cannot get hired without OOP knowledge why should a language cater to those developers? 
I might be one of those people everyone considers strange and shuns, but I've really enjoyed using [XSL](http://www.php.net/xsl) for my templating. I've absolutely enjoyed it, and once you get the hang of it it's very powerful.
Yes, i installed it and was as slow as ever, and i didn't even import my 20.000 products... I'm probably going with Prestashop but was looking for any alternative i might be missing out there. thanks!
Most projects I work with use Twig, not Smarty. Only use JS frameworks if that's what you want to do.
After some research, I found that smarty is much faster than twig. What are the advantages to using twig over smarty?
I'm actually in the middle of writing an article profiling Twig and Smarty to show differences. It's not just about speed, though, but code quality as well. I generally view Twig's code as being much higher quality than Smarty, with more sane defaults (variables auto escaped by Twig), and with less ugly[1] syntax. [1] This is subjective
What do you mean by quick?
Well this is completely false.
the difference between {{var|escape}} and {$var|escape} is trivial? Edit: I'd love to read the article when done! ;)
Not the variable prints, but the loops.
PHP3 had [explode()](http://ciisa.isa.utl.pt/docs/php3/function.explode.html) 
I would like to recommend [Mustache](http://mustache.github.com/), a logic-less templating system. It can be used in PHP, Javascript, Ruby, Python etc... That's the [PHP](https://github.com/bobthecow/mustache.php) port
Why does A.F. think this matters? He never made a compelling argument. Just like this one, most of his claims are arbitrary. Just because he waves his arms, it doesn't mean the claim has a basis in the practical world. How does nobody notice this?
[Try Cilex!](https://github.com/Cilex/Cilex) Cilex a lightweight framework for creating PHP CLI scripts inspired by Silex
I have used OpenCart for about a dozen projects, and highly recommend it. It can be set up in 5 minutes and is a fraction the size and complexity of Magento. Sure it lacks some of the features, but it's not hard to customize. 
Next time try Google. Or the Magento Community forum. Or Stack Overflow, or the hundreds of Magento developer blogs.
That implements horrible!
Follow your own advice
Yes. Many times you have an interface right next to an implementation in the same namespace. This won't work: &lt;?php interface Test { } class Test { }
There is a lot of HTML in the middle of logic. The plugins will force you to ues table design rather than being able to control much of it. I did a couple projects with this. Never again, forget it.
That should never happen. If you a `Logger` interface then you have a `DiskLogger` class or a `NetworkLogger` class. You shouldn't have a `Logger` interface and a `Logger` class, that's just poor naming. They could prefix interfaces with *I* like other platforms that is, at least, significantly less verbose. 
I use a combination of twig for static content and handlebars for dynamic content. They have similar syntax so I feel moving between them is somewhat fluid, and I hope the barrier to entry for others working on my projects well be lower because of it. They're also both modern, complete, and well thought out systems which allow for significant flexibility and customization.
Agreed. Seven years, and I haven't used it yet; instead, I fix the problem. 
&gt; If it doesn't fit your needs, don't use it. No-one is holding a gun to your head, or going to judge you if you don't adopt it. It's interesting you say that. I've been interviewing a lot lately and PSR-2 came up in one recent interview. I'm with it except for the indentation section if given the choice (I am not getting into the tabs/spaces argument - that is not my point). I would, of course, follow the project's standard and I made that clear. I just happen to prefer tabs for my own code. The interviewer was flabbergasted. His position was "either you follow it religiously or you don't and if you don't you're not a standards-compliant dev." Needless to say, I was passed over for that position. The rest of the interview went great up until that point and if it had ended there, I think I would have gotten the job. In the real world, people judge you by accepted standards. Yes, I'm kind of happy I didn't get that gig (his response struck me as elitist), but that doesn't change its impact on my job hunt. Nobody held a gun to my head, but somebody certainly held it to a potential job.
I'm using Smarty in all of my projects and I'm still happy with it. Syntax is fine to me. Non developers can easily work with the template and understand that this is some non html code. I also think that the smarty template syntax is more readable than others. How should a javascript framework replace a template system ? Smarty works with php at server level and Javscript on the client -&gt; browser
Thanks. I agree and don't necessarily think that you're completely wrong. It just struck me as strange that I happened to have a recent counter-example, so I shared. Now that I've written it out, I'm even more glad I'm not working there. :) [Edit after your edit] Yep. The coding standard of the project is paramount, IMHO. I actually find a little bit of challenging fun in matching the "voice" of my code edits to whatever coding style is prevalent in the file I'm working on. I really think I hit this guy's tabs/spaces nerve more than anything and PSR-2 ended up being a way to open that door (which he also used as a bludgeon to justify his opinion). I'm not very dogmatic about my own choices in coding style. It was very off-putting that he was. Also, the file-by-file whitespace matching is something that good editors, like Sublime, do themselves. It's not like I have to stop hitting [TAB] or anything.
Why the downvotes? All he is saying is that there are a lot of competing opinions on the mailing list.
agreed. It does not help anyone suppressing errors. And if you want to track down an error you will have a hell of time to find it.
The day he noticed he was banned, I sent a message directly to the admins on his behalf, requesting the ban be lifted, and vouching for him. Unfortunately, he did not care enough about reddit to pursue the matter himself, so it was beyond our control entirely.
Twig autoescapes by default since v1.9, so it is more like {{var}} vs {$var|escape}, but I agree, that is trivial. Twig is pushing new features every month and is actively developed, can't say the same for Smarty. If you are concerned about the performance, Twig has a C extension that speed things up. It has also become faster with the latest versions.
Yes, but PSRs seem to be all about OOP. And yet OOP is just a one way to write PHP.
Listen to this man, he's felt the pain.
I didn't recommend Smarty back then, and I certainly wouldn't recommend it now. The question is, why are you considering it? 
Interesting combination. I would've thought that mustache and handlebars would work better (Since mustache code is valid handlebars code).
it provides a layer in which your designer/other non-coders can work without messing anything up too much. Other than that you can consider it a View-layer if you're not happy with using html as view-layer. That said, we've tried using smarty and is moving away from it rapidly.
Use Mustache. It's a logicless templating engine, meaning that you can't embed logic into your templates. Once you use it and see the benefits, you won't look back... Also, it makes unit testing much much easier
Hi again. I guess reddit deleted the account you had created the other day?
That's the approach I've gone for (when I find it applicable). I expose the template files so both the server-side and client-side can share the same templates. In cases when I don't need to share the templates, I simply go with regular PHP templates for the server-side (see PHP Savant, Zend View etc. for examples). 
is there something like this (i.e. a half-decent interface) that allows *posting* as well?
Twig adds consistency, modularity, extendability, and reusability to the view layer. No two systems seem to use the same PHP template system. More importantly, I have yet to see a system implement the consistency, modularity, extendability, and reusability as simply as Twig does. I've seen view systems and controllers get WAY too complicated way too fast while also being inefficient (on the database) or insecure (XSS is very easy). Twig adds a little complexity (not much at all), where everyone else seems to want to design the complexity in their own way.
Twig's ability to extend other templates is pretty powerful. Implementing it with just PHP is a bit harder... especially if you're using multiple blocks. Edit: Wanted to mention that most PHP-based template systems get way too complicated trying to do this-- trying to be modular while encouraging code reuse leads to too many PHP-based template system implementations that's grown into a rather big complexity problem.
&gt; (new webframework on the works) Oblig: Oh joy, another one. ^^^^'Tis ^^^^a ^^^^good ^^^^way ^^^^to ^^^^learn ^^^^more ^^^^about ^^^^PHP ^^^^and ^^^^such, ^^^^however
You can never have enough of them :) Also, the learning thing that you mentioned :)
What I think is happening alongside all of the other stuff people mention here is the fact that PHP has gotten an awful lot of critique in the last few years, so we're trying to show it off as best as we can, which will ultimately lead a lot of people off. However, programming is a lot of personality, so you will find the style that fits you the best in PHP, like with every other language. PHP is also more common, the web's the thing, and it's easy to learn. Just give it some time, start with the basics and progress from there. Find projects, not just things you do for yourself, but also join groups and find jobs, the only way to get amy experience is to start somewhere.
Wait for PSR-85 where nothing except the name will be different amongst frameworks (i.e it will be Symfony2 code).
Completely agree. These standards are a marvellous addition and are what the PHP community should be welcoming with open arms. I know I'll get downvoted for saying this, but anyone who thinks PSR is a bad thing are the types of developers who aren't worth worrying about. 
I've used both extensively. I also find Twig's syntax nicer: {% if myVar is defined %} or {% if myVar is not null %} That's ridiculously readable. Also: &lt;title&gt;{{ title | default("Untitled page") }}&lt;/title&gt;
1. is not CakePHP-specific. It's not like you're not forced to use version control with CakePHP and there's nothing stopping you from using version control with any other frameworks. 2. is not CakePHP-specific (Symfony, CodeIgniter and ZF for example all have tons of addons). 3. is not CakePHP-specific. What framework does not offer database abstraction? 4. is this really good thing? 5. is not CakePHP-specific. All in all I don't think that was a very good list. This is more of a list on why to use a framework if even that. I could be wrong though because I'm an idiot.
How is CakePHP doing nowadays? I moved away to play with Lithium and my current employer uses Zend so I haven't checked on it in a long time.
Thanks, I saw Silex but not Cilex. I'll check it out! *edit* After reviewing this, it looks like a winner. I can still use my bundles and manage dependencies with composer, but have small applications per job. That's pretty cool, especially if I want to deploy to multiple servers and use something like RabbitMQ to manage workers. Thanks!
They've cleaned it up a lot in the last version. I thought Lithium was kinda dead. 
I like PHP as much as the next guy, but this is really not the sort of stuff it excels at.
Check out [LemonStand](http://lemonstand.com/) -- I'm using it for three storefronts this year (*note: each shop only has a few hundred products though, no idea if/how LS would handle 20K+ products*). I chose it because it's MVC, and really easy to customize the views for 'boutique' type shops. You can download a free developer version to test it out.
I did some work with Elgg at one point, up until I discovered the number of database queries for a users profile page was upwards of over 1000 and had a memory usage footprint of over 25MB. It's a shame it was that sloppy (I can't comment on the current state of affairs), because the community is very active.
I use [Yii](http://www.yiiframework.com/) for cron, db migrations, and other console tasks - here's the [class reference](http://www.yiiframework.com/doc/api/1.1/CConsoleApplication/). I can't really comment on performance - other than it works fine for my purposes =)
I don't know if it's dead, it's a really cool framework and their documentation has gotten much better from when I last used it. Unfortunately, I think Laravel had kicked it's proverbial teeth in.
Agreed. Use [Elasticsearch](http://www.elasticsearch.org/) or something similar if you can. 
Smarty version 3 can extend templates. I use it in all my projects in combination with ZendFramework. Smarty is so good engine that new updates are not needed. It has reached perfection :)
The great thing about mustache/handlebars etc.. is not so much that they are logicless, is that the templating technology can be used anywhere, serverside or clientside. Allowing you to use the same templating technology in both PHP and your javascript. As lately it's been the trend to push more of the display logic to the client side.
That's similar to my solution before I discovered the Option pattern. however having the additional Monad-like composition adds a lot of value.
Relative paths are relative to the current WORKING directory. Honestly the easiest way to run php from cron is just to use wget or curl and fetch via HTTP. This guarantees a consistent operating environemnt.
Not that I'm aware of :\
Try to put the full path to the included file.That should fix it. And personally I dont agree with cron access from browser(just a personal thingy).
You should include your files in PHP like this instead: include(__DIR__.'/../db.php'); This will assure that the include is always relative to the file from which it is being included. Edit: Or prior to 5.3: include(dirname(__FILE__).'/../db.php'); 
This article was published over 4 years ago... but it's still relevant. Great source, too -- Derick is a PHP dev, responsible for `xdebug` and much of the work on the `Date` extension, among others. Haven't seen this domain before though, thought it was just _derickrethans.nl_, but after checking the A record for _phpvikinger.org_ I can see they point to the same box, so I guess it's just an alias.
Just test it... put a `echo __DIR__;` in a test file and call it both ways.
I'm in the same boat. XSL does a lot of things that most template engines don't especially when it comes to complex data sorting and filtering. The only thing that really bothers me is the extra step of serializing from native objects to XML (which, afaik, PHP does not have a built in solution for like they do JSON).
This is what I do but it may not work on a shared server. Just make sure to pass some sort of key for validation so you don't expose your script to the public. /usr/bin/curl -s http://www.mysite.com/a/b/c/script.php?key=SECRETKEY
Better yet add a check on $_SERVER['REMOTE_ADDR'] and reject non-localhost (127.0.0.1) connections in the script.
Looks to be based on the [Commons-logging project](http://commons.apache.org/logging/) from Apache and/or the [log4php project](http://logging.apache.org/log4php/) (also from Apache)? I can't dig into it right now, but I'm curious if log4php is compliant as-is...
on a shared host, it's likely that the curl request to a FQDN would be routed through the external IP address of the web server so the remote address wouldn't be 127.0.0.1. the only way checking for 127.0.0.1 would work is if the server had the FQDN pointed to local in the hosts file and the web server was actually listening on local. both unlikely in a shared environment.
&gt; Try to put the full path to the included file. and then never move your application unless you want to modify your code every time it needs to move.
Seriously... There are excellent frameworks out there with great communities... And people feel the need to create more? Clone an existing framework and add to it. 
I used to think that way, but we've got some templates that we converted from PHP to Twig and they are just overall much nicer to deal with. They are easier to read, more succinct etc.
He doesn't think the group should be making interfaces, I believe they should. Evert Pot nails it, that an interface doesn't stop them building supersets or entirely custom APIs, they just need to expose a PSR compatible API built with our interface for minimum viable usage.
Correct. This is how all the participating members write PHP. WordPress is not on there for a reason. #trololololol
This works in Smarty and seems pretty damn readable to me: {if is_null($myVar)} {/if}
Thanks for the feedback, personally I try to avoid going with the mainstream just becuase it's already there... I did try some of the frameworks already out there (Yii, Zend, Symfony 2) and couldn't find myself using them. Not trying to bother you with my post, just saying that if people would settle with the first thing that comes out, just because it's already there, innovation (amongst other things) would go right down the toilet.
The DataFlow import is ridiculously slow. There is a very good tool called MAGMI (Magento Mass Importer) that makes data import/export a breeze. And it has plugins to do some work on the data while importing. This is the link to the permanent thread on MAGMI: http://www.magentocommerce.com/boards/viewthread/201210/ It's a true game changer in working with Magento's catalog. The most recent project I did had 8500 SKUs. Took hours with DataFlow. Took a couple of minutes at most with MAGMI.
I've been using Smarty for years. It's always done exactly what I wanted. And it's made my life easier when it comes to non-programmers. The only problem I see is that it isn't really being developed. At least not as extensively as other template engines. Sad face.
[This alone] (http://blog.visionsource.org/2010/01/28/opencart-csrf-vulnerability/) is the reason I'll never use OpenCart. The developer couldn't care less about security or proper openness. That post was [previously discussed here] (http://www.reddit.com/r/programming/comments/c7k2g/developers_please_dont_be_in_denial_about/). I also didn't like how "baked in" certain aspects of the template were.
Thanks!
Fair enough. I just think the PHP community should contribute to the existing good frameworks (Symfony2, Laravel, Cake) rather than reinventing the wheel over and over and over. 
Why don't you write a blog post describing what you don't like about existing web frameworks and how your new web framework will solve these issues. Then when people like /u/mervman and /u/geusebio bring up the lack of need for yet another web framework you can be like - here's why I'm doing it. Also people could read your blog post and be like yo fdoglio framework awesomesauce already does all that. Or people could be like yo fdoglio - those are some really good ideas I'd love to help you. Or people could be like yo fdoglio - those are some terrible ideas and here's why(chances are they'll just call you stupid, but that's the internet)
That's a good idea baileylo, I'll probably do that once I finish the last post regarding how to use the FW. I've being focusing on having a first working version of the code, then working on the main docs and now I was going for the "how to use it" posts.. your idea of a "why I think it's good" is probably the next logical step :) Thanks!
After trying multiple MVC frameworks, I finally got up the learning curve with Yii. I felt the site and forums were able to answer most of my questions, there was some good stuff on Stack Overflow too. I also learned by carefully following/studying Jeffrey Winesett's "Agile Web Application Development with Yii 1.1 and PHP5" from PackT.
Is Magento still slower than molasses?
&gt; I think you've come to the wrong conclusion from your experience. Giving a shit about tab size is something you should work on growing out of. The point that I made to him was that I'm adaptable to both tabs and spaces - plus illustrating some actual knowledge of PSR-2's contents. He turned this into the hunt for a heretic. When I mentioned it, he pretty much tuned out and ranted. I don't even think he was listening to me at all anymore. I haven't run across that much "tabs/spaces" dogma in a very long time. In this day and age, I feel that most good developers don't get riled by it. &gt; Languages always have a prevailing style and you should endeavour to write in that style when using the language. That is what the best developers to work with do. I wouldn't exactly call it prevailing yet. PSR-2 is six months old. The vast majority of PHP projects I have worked on use tab characters rather than spaces, usually for the point of having a variable tab length (I've been a professional PHP dev here in SF for nearly 8 years and have been writing PHP for over a decade). That said, each developer is going to have their own experiences and perspectives since there is no actual measure of what's "prevailing" among the vast PHP code in use. &gt; By expressing your dislike of the indentation standard as early as the interview you came across as somebody who has not learned to let go of the little things. I didn't express a dislike as much as a preference when it was an option. You make it sound like I was trying to pick a fight or threw a tantrum. In fact, it was the interviewer who did so. I feel that being adaptable to the style of the project and sometimes even files within that project are more important than being inflexible. Nobody wants a new developer to come in and start changing whitespace everywhere. &gt; Nobody has ever regretted adapting their personal style to match the prevailing style of the ~~language~~ **project** they are writing in. FTFY. To me, that's more important. Then again, the overall tone of your comment is a bit aloof. You wouldn't happen to be that interviewer, would you? If so, then I agree - it wouldn't have worked out. Sorry to have touched a nerve for you.
This is also a possible solution, but you'll want to do an entire regression test of your application after enabling this "feature". No idea expectations this could change once enabled.
Yep. Agreed.
Whats wrong with using standard PHP/HTML for templates?
*shouldn't* do
Thanks, I didn't know they added that. That'll affect my recommendation to others about Smarty. I've worked with both Smarty's and Twig's code before. I even tried to do some enhancements to Smarty a while back. The Smarty devs are pretty smart and (from what I remember), really cautious, performance-wise at least, about what the code does. It was definitely interesting seeing some of the choices they made. Given the choice, I still prefer Twig because of their codebase being simpler to follow. I've listed a few of the files of interest below-- although I'm not as familiar with the newer Smarty code. Smarty: * Render: [sysplugins/smarty_internal_templatebase.php](https://github.com/ShopwareAG/Smarty-Library/blob/master/sysplugins/smarty_internal_templatebase.php) * Lexer?: [smarty_internal_templatelexer.php](https://github.com/ShopwareAG/Smarty-Library/blob/master/sysplugins/smarty_internal_templatelexer.php) * Parser?: [sysplugins/smarty_internal_templateparser.php](https://github.com/ShopwareAG/Smarty-Library/blob/master/sysplugins/smarty_internal_templateparser.php) * Parser (generated from) [internal.templateparser.y](http://code.google.com/p/smarty-php/source/browse/branches/Smarty3Alpha/development/lexer/internal.templateparser.y?r=3284) * Compiler?:[sysplugins/smarty_internal_templatecompilerbase.php](https://github.com/ShopwareAG/Smarty-Library/blob/master/sysplugins/smarty_internal_templatecompilerbase.php) Twig: * Renderer: [Template.php](https://github.com/fabpot/Twig/blob/master/lib/Twig/Template.php) * Lexer: [Lexer.php](https://github.com/fabpot/Twig/blob/master/lib/Twig/Lexer.php) * Parser:[Parser.php](https://github.com/fabpot/Twig/blob/master/lib/Twig/Lexer.php) * Compiler: [Compiler.php](https://github.com/fabpot/Twig/blob/master/lib/Twig/Lexer.php)
i stick with PHP and all it's warts for 3 reasons. i can accomplish most everything with PHP. i know most of the warts, and have figured out ways around them. i don't know my way around python's warts, ruby's warts, etc... if i can't figure my way around them, most likely, someone else has. 
Are you looking for something Free/Opensource? I usually look at all options, paid or not paid. I think PHPFox deserves a look since it has a big community, lots of modules and themes for all kind. A while ago i worked on a project and after some readings on reviews, decided to go ahead with Social Engine, not the cheapest, but many reviews were pointing it as the best. Only to regret it latter, realizing that those reviews were from users that were not developers. It is based on Zend Framework, not easy to customize at code level for those who are not familiar with Zend. The good reviews come from the fact that it runs fine out of the box (little slow), very easy to setup and admin with a friendly and well organized admin interface, that allows to customize many things including the layouts with lots of widgets and modules available that you can just drag and drop. But when you need that extra feature or to change anything at code level, that's where things get tough. 
Exactly. Above everything else, a template language like Twig allows you to write templates in a way that makes sense for the task. Blocks, macros, filters, etc, all make a lot more sense in a template than a sea of PHP tags and expressions. Twig blocks are the tits, too.
Nothing wrong, if that's your thing, and if the project doesn't warrant anything else. Check [this comment thread](http://www.reddit.com/r/PHP/comments/16clpw/is_smarty_used_anymore_if_not_what_should_i_use/c7uyqv3) for some opinions answering your question.
Magento has never actually been slow when configured correctly. Those last two words being the key. And forget about running it on VPS or shared hosting, if you're serious about doing business online you need a dedicated server (or several!).
I'm not really looking to use one, I'm more just curious what's out there and what's good. Thanks for the tips though!
I don't know. I almost agree with him but I don't get all the anger about it.
Really!? Use Curl to run a cron job? That's crazy! Just sort out the path issue using any one of the decent suggestions in this thread.
Is this down-vote Friday?
I own a dedicated server, it was slow out of the box. Sure, it can be tweeked to be faster, but i think that out of the box, in a machine with more than 16GB ram and i don't know how many processors, that thing will go at a decent speed, and it didn't.
Well, a url is different than a path. I never name accounts with a ".com" just to avoid confusion. And I always use the absolute path for including files.. just makes migration easier.
LOL. Magento and a skilled developer should not be in the same sentence. 
^ Ditto
Add AFTER php4 was released (since php3 was maintained after the release of 4). A rarer kind of nonsense that masquerades as fact adding to the ignorance. Take the time and do actual research, not just a google search and sit on your ass.
That kind of makes you a shitty person...
It's probably the way I read it. I read it in a comedic essence, because it seems kind of exaggarated. I read it as sort of a joke, because I didn't read what subreddit it was and immediately thought it was /r/ImGoingToHellForThis or something.
Yea, I had no idea why they changed core Zend libs. They were already wrapping everything in their own fucked API. It was impossible to actually upgrade the Zend version it used because of all the subtle changes. The part that used to drive me the most nuts was their utter lack of consistent coding standards; even within the same file. So glad I never have to work on that system ever again.
You so funny. not. 
To use **Smarty is no smart** at all. Forget about it. XSL Transformation and XPath can work miracles Smarty cannot even dream of. Besides XSLT works with XML which is a universal mark-up to represent **any data on any platform** (Unix, Windows). All programming languages can work with XML, so any application can work with xml document. By the way, did you know that MS Word document is a zip container with xml files? Change .doc or .docx extension to .zip and see it yourself! But you may know that html and xhtml are little brothers of xml =) P.S. Look at API of YouTube, LastFM.. EVE Online - the methods return XML! All online killboards and applications like EVE Mon use it. [EVE API DOC Page](http://wiki.eveonline.com/en/wiki/EVE_API_Functions#EVE) XML is industry standard is all.
I would advise to "this guy" that dropping the project might be a bad idea, unless the project isn't going well. Think psychiatrist here: what helps when your life is going downhill? Something that requires you to zone in and stop thinking about other things for awhile. I believe he should modify the request and ask for someone to take the lead-role, but still be fully involved in the project himself, until he's ready to take control again. Otherwise it's just another victim of a shitty situation when it could be therapeutic assistance AWAY from a shitty situation. M2C.
It's been forked on GitHub: https://github.com/paulnt04/phpvirtualbox though it would be helpful to get someone a bit more active managing it. edit: This is not my github repo.
Repost..
I have used it in the past. It almost perfectly mimics the desktop GUI of VirtualBox.
Unless a project has specifically implemented the PSR logger then it wont be.
You're as arrogant as you are completely wrong. Go take the time and do some actual research, find yourself the oldest copy of PHP 3.0 you can find -- in my case 3.0 beta 4 from February 1998 and lo and behold there is `explode`! What were you saying about "a rarer kind of nonsense that masquerades as fact adding to the ignorance", again? 
You are not the first to have this conversation: https://groups.google.com/forum/#!topic/php-fig/aBUPKfTwyHo I would suggest that adding Trait, Interface or Abstract makes things verbose and obvious, instead of forcing guesswork onto the user. What is the downside to this? 
Why do you think every project is trying to be Symfony? 
Some people, when they encounter a problem, think "I know! I'll use XML!" Now they have an extensible tree of problemElement nodes and seventeen APIs to access them through.
It's just a form of Hungarian notation. It's unnecessarily verbose and is just a form of poor naming. &gt; What is the downside to this? Imagine I've written a framework and in that framework is a simple key value store class that stores it's values on disk. It's just called `KeyValueStore` and it's just a tiny part of the framework. Now, a few versions later, I decide that it might be cool to add a memory-based version of that class as well. How I would do that is make a new interface and have now two concrete implementations. Under this naming scheme, I would create a new `KeyValueStoreInterface` and then every consumer of the framework would have to change their code where they used `KeyValueStore` everywhere! That's a massive change. However, if I now make `KeyValueStore` the interface and change the concrete implementation name to `DiskKeyValueStore` then consumers only have to change their code only where the instantiate the concrete implementation. Adding `Interface` to the name creates a distinction where one should not exist. Consumers don't need to know it's an interface. I should be able to take any class and turn it into an interface. Here are my thoughts on the advantages listed: &gt; Eliminates name collisions between interfaces and concrete implementations of the same family of classes. An interface and a concrete implementation *should not*, in my opinion, have the same name. It means that your concrete implementation does not have a good enough name. In the case of Logger, you might have DiskLogger or NetworkLogger but Logger is a generic name. Generic enough, in fact, to be a great interface name. &gt; Differentiates a concrete implementation from a contract/interface when it is being used. If you see `if ($thing instanceof Logger)`, you might assume that only one class may satisfy that condition. If course if one assumes that, they would be wrong. Because with inheritance, multiple classes can satisfy `$thing instanceof Logger`. The fact is there should *never* be any need to differentiate between a concrete implementation and the interface in the using code -- that is literally the point of it all. &gt; 5. Follows existing practices of suffixing class types like Exception classes (e.g., InvalidArgumentException). For exceptions, you're describing the kind of object that it is but for interfaces you're describing the sort of language construct that it is. These are very different things. It would be like saying InvalidArgumentExceptionClass or IsEmptyFunction. &gt; Follows existing practices observed in other programming languages. I know from C# they prefix interfaces with I ... that, at least, is much less verbose than this. As others pointed out in the thread that you linked, you use the interface name many many more times than the concrete implementation name. Do you really want this: public function __construct(UserManagerInterace $userManager, SecurityContextInterace $securityContext, EventDispatcherInterface $dispatcher, LoggerInterface $logger) 
I use it! 
Yes - it works great. Used it for clients to take their CRM out to the rainforest with no Internet access, on Windows laptops - just run CentOS in a VM and it works like a dream.
"Poor man" in that it is free. But feature-wise, it certainly does the job.
Ah, ok. I just noticed it uses some of the same levels from RFC 5424 (Syslog), and the interface resembles what log4php provides, but I guess those are both somewhat common for loggers. Out of curiosity, looking deeper.. [log4php has a similar implementation](http://logging.apache.org/log4php/apidocs/class-Logger.html), but is not quite compatible. 
hopeseeker
Not a repost since I just took the screenshot tonight... Has someone else already reposted this?
Yeah I felt so bad I couldn't download without trying to help. None of my coworkers use php though.
Can you please explain? Google has support for both git and Mercurial and supports mercurial project cloning from the website (I don't know about git).
http://www.reddit.com/submit?url=http%3A%2F%2Fcode.google.com%2Fp%2Fphpvirtualbox%2F
Idk if it matters, it was awhile ago (2 years for this sub) and it seems like its new to some people at least.
&gt; I did try some of the frameworks already out there (Yii, Zend, Symfony 2) and couldn't find myself using them. I wonder why.. function login_user($u, $p) { global $__db_conn; global $__SECURITY; global $sLayer; [ .. ] } function logout_user() { global $sLayer; return $sLayer-&gt;logOutUser(); } And the rest of the FW doesn't look much better. Though I guess you do get points for PHP4 nostalgia.
That is a long answer. I only have a short one. * AbstractLogger * LoggerInterface * LoggerTrait How else would you avoid a conflict between them? MOAR namespace? https://github.com/php-fig/log/tree/master/Psr/Log
The problem is that is massively over-engineered! An AbstractLogger and an LoggerTrait? Even more horrific, AbstractLogger doesn't even use LoggerTrait! I assume/hope that's for maximum compatibility between PHP versions. I'm actually ok with AbstractLogger and LoggerTrait because they're only used in subclass/using situations. LoggerInterface, on the other hand, is the primary type for all Loggers -- it should have the most compact and simple name. 
Another comment cause I can't stress this enough: `LoggerInterface` is by far the most important name in the entire library by a factor of 100 at least. It's the public face of the entire process. In any project, that name will be used dozens if not hundreds of times. Adding `Interface` to the end of the name is 100x more painful than `Abstract` or `Trait`. 
&gt;Think psychiatrist here: what helps when your life is going downhill? Something that requires you to zone in and stop thinking about other things for awhile. that actually doesn't help at all, it makes you feel you've been wasting your time by doing something other than working on fixing your situation.
The rest are months if not years old and don't have anything to do with taking the project over.
like the guy said, like it or not, it's the case... Its like facebook for devs. and just like facebook, its crack for some. I am sure google code is wonderful but if you want contributors... get on github. personally i like fossil, which includes its own web interface you can host wherever you want.
Moving it to a proper framework would help substantially. A cursory glance at this makes me think a large portion of it is a bunch of libraries strung together with spaghetti code. The idea is good, but it really needs better structure and proper unit tests. A more organized and professional project makes it more likely that you'll attract good programmers to work on it.
Like others are pointing out, there's nothing wrong with Google Code. The issue stems from the fact that Google Code does not have near the same "critical mass" that Github enjoys. Github, for better or for worse, puts a lot of emphasis on "socializing" repos compared to Google Code so it's much easier for OSS projects to "go viral" (to steal an empty meaningless phrase) on Github than Google Code. In particular, Github's pull request feature is designed in such away to facilitate patches and contributions far more than any VCS hosting platform that came before it. Again, there's nothing actually wrong with Google Code as a platform, it just doesn't have the critical mass that Github does and when a project needs a new maintainer and community to propel it forward off the shoulders of the old founder, every little extra helps.
No. No change is going to happen from this conversation, or from any conversation. The PSR-3 has been voted on and accepted.
Definitely one file for each class. Some libraries have a separate sub-namespace for Exceptions, bit if it's a small module then: lib/ MainClass.php MainClassException.php is fine.
Did you actually try github?
The concept of pull requests puts GitHub over the top when compared to Google Code or BitBucket. If you want someone to take over the project, host it on GitHub. Secondly, the software is GPL v3. This software appears to be something tha would appeal to for-profit companies, but the GPL license will make every corporation think twice about contributing. Getting the authors of the software (if there are more than one) to agree to a less restrictive license than the GPL family (e.g., MIT, BSD, Apache 2.0, PHP), and moving it to a place that encourages and simplifies the process of getting multiple interested people to work together on a project, will enable the project to have new life under the community.
Best practise would be to be PSR-0 naming. If you want to make the library available as a single file you could just PHAR it up into an archive. If you already have multiple classes in the main file and didn't want to deal with PHARs you could just define the exception in the same file. Many people still do this but it's on the way out for anything but niche projects (e.g. single file db admin tools and such). The reason you generally don't want multiple classes in the same file is that only one class in the file would be compatible with an autoloader that relies on the file path matching the class name (and/or namespace). You could argue that if your class generates an exception and that excepetion is only generated by that class then it won't matter (because the class will have to have been loaded first) but I find it's easier to just to stick to a standard and not try and be clever about this stuff. It usually ends up causing problems later on if you do. So in conclusion most people would expect you to follow PSR-0 or a similar standard (Zend, PEAR) all of which mandate a single class per file AFAIK.
http://php.net/manual/en/
It may be shallow, but I can't even start to take this seriously when the site looks the way it does.
NetTuts has a rather extensive list of resources for you to learn PHP: http://net.tutsplus.com/tutorials/php/the-best-way-to-learn-php/
I use it pretty much everyday, it really is great project.
No. He should follow PSR-0 standards, it makes sense to, it's the best proven way to auto load and it's the best readability for anyone else looking at his code. And shoving a bunch of classes into a single file is not going to save you any real measurable amount of time. Keep it separate and namespace it. It's also easier to manage that way. Foo.php FooException.php
It's also a rather bad codebase. You'd have to throw it away to bring it up-to-date with 2000s era standards like not putting `error_reporting(E_ALL &amp; ~E_NOTICE &amp; ~E_WARNING)` at the top of every file. I considered contributing when the word first got out but I deal with this crap at work and don't particularly enjoy it.
php is a very easy language to pick up if you already know some programming, just pick a simple project and use the reference at php.net Also look at: http://www.youtube.com/playlist?list=PL01C68F7D697AC80A http://www.youtube.com/playlist?list=PL75B9D91CD69ED950
It was posted two weeks ago in /r/programming... if you guys only follow /r/php that's pretty sad. http://www.reddit.com/r/programming/comments/158d1e/phpvirtualbox_needs_a_new_project_lead_my/
For real? oO
I remember running into something similar a while back, I just added dummy pk's to tables that didn't have them just to generate the entities then manually update the yml and entity classes. If that doesn't work for you, you should try asking the doctrine users group: https://groups.google.com/forum/?fromgroups#!forum/doctrine-user
That's the most you can put into it... No 'for' statements and other logical constructs...
Thanks. &gt;I just added dummy pk's I thought about that but I have close to 100 tables that are used in various testing scenarios.
&gt; Anybody who sees where the project is hosted as a barrier to contributing, is not someone who will contribute anything worthwhile to the project. I disagree. When I see some annoyance or even a bug and the project is hosted on Github, I'll create a fork/pull request within 5 minutes and be done with it. But if the project is hosted on a site I'm not signed up with, I will not most likely not go the extra step and sign up. ATM Symfony2 has 110 open pull requests. Those are not just from core contributors, but rather from random users of the software that found something that they think needs to be fixed/changed.
What any template engine can do, can be done with php/html. There's **no need for no addon**. Loads of things that xslt capable to sort, smarty (twig and others brilliant creations) fails. As for xml - it's an **industry standard**. This very page is served as html, right?! When someone gets lost in all kinds of api I always think that he's either better go to school, or that this 'bastard' did this on the purpose, so that no one else could deal with this mess, and he could keep the job for ever.
theres also pbkdf2
ESX is also free.
&gt; What any template engine can do, can be done with php/html. Yes, no need for the OP to go through the misery of trying to learn a declarative functional programming language with hyperverbose syntax (XSLT) just to make a website. &gt; There's no need for no addon. Especially one that's almost the same size as the language it's running in, like libxml2 (1.5MB), right? &gt; Loads of things that xslt capable to sort, smarty (twig and others brilliant creations) fails. Give a human-readable demonstration in less than 1kB of XML. &gt; As for xml - it's an industry standard. So is ISO9001. &gt; This very page is served as html, right?! Yes. HTML5 with a `text/html` MIME type to be specific, which is neither XML nor SGML. You know what SGML is, right? The language every previous version of HTML is written in?
Not everyone reads every single topic that gets posted....if you do that's pretty sad.
What do you do AFTER this, that's where I am. I am trying to now to make a simple user auth program. 
PSR-0 is wonderful. I'm on the PHP-FIG, so I obviously agree with it. But at the same time, adding in 20 new files for 20 different exceptions that only one class would ever use is in my opinion a grey area which is up to the author entirely. For example, there is a great PSR-2 package, which decides to group its Exceptions in an Exceptions file: https://github.com/cartalyst/sentry/blob/master/src/Cartalyst/Sentry/Users/Exceptions.php Repeating the one-file-one-class over and over like a mantra doesn't change the fact that it doesn't actually matter.
How does the PSR-0 autoloader handle this? Should one do: use Cartalyst\Sentry\Users\Exceptions; in that file? Or is it possible to use use Cartalyst\Sentry\Users\Exception\LoginRequiredException;
&gt; How does the PSR-0 autoloader handle this? Check this ;) https://github.com/cartalyst/sentry/blob/master/composer.json#L29
You don't have to wait. ircmaxell put it into packagist, easily gotten through composer.
&gt; Yes, no need for the OP to go through the misery of trying to learn a declarative functional programming language with hyperverbose syntax (XSLT) just to make a website. XSLT (xsl transformation) - is no programming language, but a **trasformation of data** I guess by "just to make a website" you do not mean something like facebook and google? We're all gonna be in trouble if they start using those addons that are so dear to your heart =) &gt; Especially one that's almost the same size as the language it's running in, like libxml2 (1.5MB), right? Feel free to suggest Zend to throw away [simpleXML](http://php.net/manual/en/book.simplexml.php) from php and all those topics on [ZCE certification](http://www.zend.com/services/certification/php-5-certification/) about XML Basics, SimpleXML, XML Extension, Xpath. Ask them to add bunch of Smarties instead. When it shows up on php.net, I'll change my opinion! =) &gt; Give a human-readable demonstration in less than 1kB of XML. Should I? &gt; So is ISO9001. And what about smarties? What is it? &gt; Yes. HTML5 ... Do you know what markup language means? So, you still do not see something in common that share HTML, XHTML and XML? It's right in front of your eyes, pal! Well, you do know about things like XSLT and XML, caching technologies like [Varnish](https://www.varnish-cache.org/) and [Memcached](http://memcached.org), you do know how php works, so what the hell is missing? Why you need those hand-made addons, then?
A little bit of a refactor on the second example: function getPage( $page = NULL ) { switch( $page ) { case "ideas": return "ideas.php"; case "members": return "members.php"; default: return "start.php"; } } include( getPage( $_GET['page'] ) ); 
phptherightway.com is a good start.
The way I started was by trying to make AJAX calls, which lead me straight to managing mysql databases. That was a good little education in PHP. Then I started trying to return more and more complicated things to the browser. After he's got a handle on how it works, I would suggest having him make a simple website with Wordpress, to see how other people have properly implemented PHP and made their own framework out of it.
phptherightway.com is great if you have some basic knowledge of php, but he's a complete newbie and he can't tackle the more advanced stuff yet. 
I think the best thing you can do as a learner is find somebody like a friend, colleague, co-student, maybe a nerd from craigslist to meet you in a coffee house to give you some one-on-one guidance about "what it all means". I'll sometimes do this like start from opening a text-editor to building a working db program right in front of them so they get it. I think this is better than just purely internet resources right off the bat.
The PHP manual, starting from the introduction up until he reaches the class/function reference lists. After that have him work on his side projects and help him along by reviewing his code.
I showed him some simple stuff and he was very interested to understand everything. Building an app under his eyes might be a great thing to do. Thank you.
I just follow programming in general... that thread has 300 replies why make another one in PHP? 
The real answer is store everything in RAM or get a Raid setup. The race condition examples posted in that article scare me... why are you doing this on disk? You should ATLEAST 'lock' stuff in let's say Memcache pool BEFORE accessing it. 
The problem is too many people get so focused on "learning PHP" that they don't realize learning syntax is *not enough*. You can read, and even understand the entire PHP manual from front to back and still not understand anything about application architecture. It may be advantageous not to use PHP as an initial learning language. Not because it's wrong to write applications in PHP, but because the best texts on application architecture do not use PHP as an example language. I could learn everything there is to know about a skill saw and a drill, that doesn't immediately mean I can build quality furniture that won't fall apart the first time someone sits on it.
He got some C background so he has a basic knowledge on how to design and code an application. I just want him to get started into php.
A tutorial, sample code, showing him some basics... either way make sure he is learned to code properly from the start; meaning his very first application should already apply using functions and techniques that prevent security issues. Such as filtering input data, escaping out. Using parameterized queries. Here's a great post with a guy having the same "problem" as you do. http://stackoverflow.com/questions/2119083/php-tutorial-that-is-security-accuracy-and-maintainability-conscious 
PHP and C have a lot in common. Some of PHP is just a thin translation to native C functions (as PHP is written in C). Perhaps if he has some old C code, trying to convert it to PHP would be a good start.
Check out http://phpmentoring.org and #phpmentoring on irc.freenode.net. Our organization aims to not only teach new developers the "best practises" way of doing things, but also to teach other developers how to teach. Even if you're not necessarily interested in pairing up with an apprentice or a mentor, it's a great resource for getting information on how to teach good development practises.
Instead you got upvoted. So it's not that bad as it might seem (=
Yes, that would be the easiest way, I think 
If he knows programming already then just tell him the basics and then get him to build something. The basics: - dynamically typed - functional scope - typically imperative - a few common control structures (if/else, while, for, foreach ...) - a few basic types (string, boolean, number) - collections are 'arrays' (more like a hashmap) - or (java-like) objects Then just build something. There are (in my opinion) not many good basic introductions to PHP in book form. But you can at least learn the syntax from books and then build something from there. ps. as someone else has mentioned, PHP syntax is very much inspired by C so it shouldn't be too new to your friend hopefully!
&gt;session is a special type of cookie no its not
mysql**i**, not mysql (and it better be objects + methods, not functions) (see the warning here: http://md1.php.net/manual/en/function.mysql-affected-rows.php)
&gt;This kind of code is certainly easy to do with UNIX commands Do it with unix commands then.
1. designing desktop app != designing web app 2. c has only functions + structures while php has functions, classes, traits, interfaces, etc though I agree that converting C code is a pretty nice idea for the start
I need this to work on Windows as well
Install unix tools on Windows, then. Don't Cygnus do a set?
I'm not looking for unix solutions just a PHP one
http://php.net/manual/en/function.scandir.php Probably only works for file within the web root though.
may I know where I enter the string to find?
Or just even easier less code $directory = new RecursiveDirectoryIterator($dir); $iterator = new RecursiveIteratorIterator($directory); $regex = new RegexIterator($iterator, '/^.+\.php$/i', RecursiveRegexIterator::GET_MATCH); var_dump($regex);
Maybe someone can help me out here. I've heard a lot of good things about Laravel so I decided to try it out for a new project I'm starting. So I downloaded Laravel from their site (which I guess is version 3) and went straight to town with it but I keep hearing about Laravel 4, and being new to the framework I have no clue what the hubub is about. Is it a bad time to be starting into Laravel? Is Laravel 4 significantly different and going to require me to relearn everything? I think the same guy that wrote this article made the Basset bundle which I was looking into using for cache busting my assets but I noticed it had been pulled from the website in favor of a new Laravel 4 version. Is that going to be happening frequently if I keep on pushing forward with Laravel 3?
I had answered **all of them** and you appear to fail to respond. And I am not surprised, you know... As for PHP... smarty IS **php template engine**. Python, Ruby, C++, C# work perfectly well with XSLT. Just another reason not to waste time on the useless php addons. [First paragraph](http://www.smarty.net/why_use) on official Smarty site about reasons to user Smarty says: &gt; the syntax of PHP statements can be a mess to manage It's not correct. 'Cos it refers to mix of php/html. Beginners may write such rotten code, developers do use XSLT, OOP and MVC pattern. But the best of all is the [comparison of syntax](http://www.smarty.net/syntax_comparison), they seem to believe that "&lt;?=$foo?&gt;" is 1000 times more difficult to read, than {$foo}. Bravo! Now I know why to use Smarty =) The only reason to learn smarty is that XSLT, as professional and powerful instrument, is quite difficult for studying and demands knowledge of XML and XPath. But this is up to people. Some satisfied with pictures and videos done by mobile phone, some learn to use professional cameras. &gt;You're not even worth my time, troll. Such labeling just expose your failure in this discussion, pal. No wonder, 'cos the only reason to learn smarty is a quick learning curve plus a misbelief that it makes template look more readable for 'dumb' designers - &lt;?=$foo?&gt; vs {$foo}
This is true. Either way that tuxradar.com tutorial should be perfect for a beginner or someone with programming experience. If the latter, he will fly through it using it as a reference manual to pick up the syntax. If a beginner it will be slower paced, but that's who its written for anyway. It will not turn him into a guru, but he will be writing stuff at the end of a day. justaboy21 can hold his hand through it also.
Of course, learn as much as you can in the next few months then apply for a **junior** development role. There is no reason for you to wait until you're 30. Just be honest in the interview about your lack of experience, you may not get a high paid job but you'll eventually get a Job, and then guess what? In the next Job you will have experience. Also looking at a post you made two hours ago, you are not as clueless as you are letting on in this post. Just do it man, what have you got to lose?
Love laravel and will do whatever to keep up with it. You have to like the tools you're working with. I remember a long time ago sinking 1.5 months into teaching myself everything drupal 6 to put together a few websites. Then time goes by and version 7 comes out they introduced new stuff, while the websites I put together were just sitting there complaining about cron and stuff. The person was no longer a client and I wasn't in love enough with drupal to hunker down and hit the books again. Long story short don't trust me to work on a drupal site.
Your good to go if you stick with 3 for the time being. It's a rock solid framework. Don't worry too much about keeping up with the (frequent) releases. 
Thank you for your constructive criticism. It would be great if you could send me an email at halls.of.valhalla.contact@gmail.com and state some suggestions for what you think would be an improvement.
I'm as much as a n00b as you are at this, but I'll give my 2 cents. Think about how secure you actually need this to be. There's no real point in overdoing it. Unless your users are exceptionally good with breaking sites security, I think you're good. Just have some basic security. Be wary of SQL injection and also note that sha1 has a truckload of rainbow tables online and is really not that secure. Unless you want to back it up with some random salt you'd generate, which again, is really not necessary. I'd suggest using Bycrypt (more documentation [here](http://www.openwall.com/articles/PHP-Users-Passwords) ). And yeah, you could redirect your users to a custom HTML page, headers should work nicely with that, once they're logged in. Also, sessions.
[/r/GetMotivated](http://www.reddit.com/r/getmotivated)
Then you aren't very good as a programmer, since a good programmer wouldn't limit his toolbox like that. I guarantee whatever solution you come up with won't be even remotely as fast or efficient as grep.
I am not a good programmmer...but not for the reason you said. I already know unix solutions needed for this im looking for one that can be done solely with PHP thus extending my "toolbox"
Allow me to introduce you to [grep for windows](http://gnuwin32.sourceforge.net/packages/grep.htm). Narrow minded is discounting it all together because it's not PHP.
Do it. One caveat I would suggest is not to 'learn php' but to learn programming more generally. Learn good OOP practices, abstraction, encapsulation, design patterns along the way. See if you can apply what you've learned in php to other languages and non-Web environments. This will help you so much in the long run, and if you work hard you could be a decent programmer within a year or two. It's much more important in the job market to say 'I'm a software developer and I can use x, y, and php' than 'I know php', because knowing the syntax of a language doesn't make you a competent programmer. The other advantage of this is that a hell of a lot of php resources out there are messy and poorly coded, but as a beginner you might not notice the difference. A lot of other dynamic languages like ruby and python have really fantastic resources for learning how to program interactively, like tryruby. 
That may be the dumbest thing I've heard all day. That's like saying we should avoid DOMDocument because it requires libxml, or that we should avoid trying to open SSL links because we need openSSL.
Yes, be sure to apply for Junior roles then they won't expect much from you apart from to know the basics. Put together a little site of your own in PHP just so you can prove you know something. Once in a Junior role you'll likely get all the training you need on the job. I started as a Junior 5 years ago after having read up on and played around with PHP for about 6 months and I'm now a Senior developer.
We hired somebody 6 months ago as a bug fixer who had very little experience with PHP but he knew a fair bit of HTML and CSS. Through mentoring and peer reviewing his code with helpful comments/advice, he's starting to become a pretty decent programmer. Get out there and apply for a junior-level position. What have you got to lose?
Agile software development has absolutely nothing to do with security.
" user assigned a unique HTML reference" What do you even mean by this! It sounds like you are creating static HTML pages which anyone can guess the address of and access. You should be using sessions and PHP to generate the page that the user is able to see depending on whether they are logged in. 
Try this. In your document root (let's say it's /var/www) make a file called bootstrap.php: define('TEMPLATE_PATH', "/var/www/templates"); require_once("/var/www/classes.php"); Now make a file called classes.php: class Template { protected $variables = array(); protected $_tmpl; function __construct($template) { $this-&gt;_tmpl = $template; } function set($name,$value) { $this-&gt;variables[$name] = $value; } function render() { extract($this-&gt;variables); include(TEMPLATE_PATH . "/header.php"); include(TEMPLATE_PATH . "/" . $this-&gt;_tmpl . ".tmpl"); include(TEMPLATE_PATH . "/footer.php"); } } ### Okay, now let's demonstrate how this works. In your template folder, let's say it's /var/www/templates, make a file called header.php containing the following: &lt;!doctype html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;?= $title ?&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="header" style="font-weight: bold;"&gt; Welcome to the friendliest website in the world &lt;/div&gt; Also make a file called footer.php: &lt;div class="footer" style="font-size: 10px; color: #ccc;"&gt; &amp;copy; 2013 captaincrunchhn &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Again in the template folder, make a new template called "index.tmpl": &lt;div&gt; &lt;?php if (isset($name)): ?&gt; hello there, &lt;?= htmlspecialchars($name, ENT_COMPAT, 'UTF-8'); ?&gt;! you are awesome and i love you! &lt;?php else: ?&gt; &lt;form action="/" method="post"&gt; What's your name, stranger? &lt;input type="text" name="name"&gt; &lt;input type="submit" value="say hello"&gt; &lt;/form&gt; &lt;?php endif; ?&gt; &lt;/div&gt; Okay, now make a file called "index.php" in your web directory (in this example, that's /var/www): &lt;?php require_once("bootstrap.php"); $template = new Template("index"); $template-&gt;set('title','Cool website for cool dudes who are cool'); if (isset($_POST['name']) $template-&gt;set('name',$_POST['name']); $template-&gt;render(); ?&gt; Congratulations, you now have a template system that you can code using normal PHP and HTML like a pro, without any cruft or wasted cycles, and without having to learn a whole new templating syntax when you're already programming in a language that is itself a glorified templating engine.
&gt;To prevent SQL injections, sanitize user input with mysql_real_escape_string(). Jesus Christ.
if ($fileinfo-&gt;getExtension() == 'php') {
The key is basically a salt, sure. Point is it makes rainbow tables useless, unless someone went and made a rainbow table using your secret key. You could also hash the password with a nonce that you store in the database so that even if someone got a full copy of your database they still couldn't just generate a rainbow table and run it against all your users, they'd have to generate a rainbow table for each individual user to crack their password. http://php.net/hash_hmac
*woosh*
Security isn't just about keeping your users in their place - it's also about keeping strangers out. The strangers will always be good at breaking stuff. Besides, how do you know how dangerous your users are 'til they attempt to break your site? You can never have too much security.
Generate users a unique URL which they can then use to create an account with their own password. And follow the advice given here and don't use sha1 or md5 and use something more secure.
Please don't use sha1 nor md5. They're not secure. Use bcrypt --&gt; http://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php
Hell yes, there's a point. Welcome to the profession. You'll love it. :) I know people from QA who started later than 24 and turned into great developers, because they already had a deep appreciation of subtle error cases and the importance of automated testing. These are topics of maturity, and you've got them built in. That's a huge advantage. Here's a piece of long term advice for you. It's probably too early now, but keep this in mind in a year or two: the best developers are those who know multiple languages. I'm not saying PHP is bad. Quite the opposite - it's useful, it's reliable, it's available, and it's easy to get work in. It's also fun. It's a great place to get started. But when you learn a significantly different language, you learn mindsets that still apply in your other languages. Things you can bring back, which make you better at all your languages at once. So you should learn more languages, once you're settled on your feet in this one. And not similar ones to ones you already know; every time you take a leap to learn, leap to somewhere that currently seems weird. That weird means you have something to grow into. So, yes, this'll make it a little harder; you're taking the steep climb, but you get to the top of the hill a whole lot faster, and then learning other stuff is muuuuuuuuuch easier. From PHP, one very useful and currently very strange language to jump to is SQL. Alternately, you could try client programming. C# and C++ are each relatively different than PHP. Or agent programming. Erlang is a great place to get your feet wet there. Or, you could try logic programming. Prolog would blow the new programmer's mind (though it's admittedly fairly difficult.) Be careful of languages that seem to have large zealot populations. LISP, Ruby, Haskell - these are good tools, but they're dangerous to the new programmer. Even experienced programmers get all golden hammer when they learn those tools, and golden hammer isn't actually true, even for great tools like those. You want a lot of stuff in your bat-belt before you go fight those sirens, so that you have enough experience to say "well, OCaml" to Haskell, or "well, Python" to Ruby, or "well, Fortress" to LISP. There's a very Oddessey-Sirens succor to tools like those. But, C? You'll learn a lot from C, as a PHP programmer, and you will not be at risk of falling in love.
Good answer. I think it would be best to have only one table for users to simplify activation.
&gt; shouldn't your brute force protection be limited number of attempts? That's one good part of a security protection plan. However, you can't protect against every circumstance. That protection is only for online attacks. This is brute force protection against *offline* attacks, where the attacker has dumped your database, or found a way to mass select your user table, *not* an online attack. Just in case at this point you were going to mention "well *my* security practices mean I'll *never* get compromised like that!" - well then, tell that to the germans and their secure enigma code, tell that to Sony, and to LinkedIn, tell that to the thousands of sites running PHP websites that have had their databases dumped. If you're only running on a shared host, or a VPS, you're not even the biggest of your worries. Are you sure that all the neighbours on your host machine are also running perfectly secure stacks and custom software? Is your hosts security only absolutely best practice? (If they run cpanel - probably not). Does the framework you're using currently have absolutely no zero-day exploits? Lastly, making a site more user-friendly in the name of not having less than half a second processing time on a one-time login process is not at all worth it over security, nor is it barely even noticeable to the end user.
Fine, if a part of your application critically needs something from a third party library then by all means include it with necessary abstractions to reduce coupling. But in this case it doesn't sound like that and there are efficient enough ways to do this using PHP's standard library than forcing all users to install grep on Windows.
It's pretty much how the PHPExcel library is setup and how you should be programming it anyways. * Read in all the cells and worksheets you need * Make any changes you need to make * Write the changes back to the spreadsheet. 
the issue is that php is updated. the best c++ book is 10 years old. this luxury doesn't work for php, so googling something like "good php book" can result in a 2 year old thread suggesting a 3 year old book that may not be relevent anymore
im trying to read one value, write two, step down a row read one, write two, in a loop for all the rows available. it wont let me save, its saying the file is used - by the reader i assume.
Right, read in all the values into the reader object then iterate through the reader object and change the values within that. *THEN* write all the changes at once at the end.
Laravel 4 is a few days away from a beta release, and I've been using it for several months. it's brilliant mainly because it utilises Composer and PSR-1 to make packages that can work outside of Laravel as well as insise the framework. http://www.12devsofxmas.co.uk/post/2012-12-29-day-4-mixing-and-matching-php-components-with-composer That said, its rarely a bad idea to use existing software because of the "next version fear". People ask me a lot if they should use PyroCMS now or wait until 3.0 because of the changes that are going to happen. The honest answer is all software changes all the time and you can only use what exists, so waiting for a version that could potentially be delayed is a silly idea. Waiting for L4 now while it has no documentation and could be another month away if a problem comes up would be silly. If you're building something on a deadline then use L3 as its documented and you can finish it on time. If you're just having a play then use either, but time spent learning L3 wouldn't be wasted as L4 is fundamentally the same thing, but with a slightly different architecture. 
Just use bcrypt or PBKFD2. They are not more difficult to use but they are more difficult to brute force.
You could check out http://www.grocerycrud.com/
Definitely best solution unless the cron script has a serious bit of processing to do and will run past a reasonable timeout. Then php cli is really the only way to go.
Interesting - the next step will be webapps that let us configure a few things then generate a prebuilt webapp for us. Don't give me some plugin for codeigniter, just give me a codeigniter instance preconfigured to do what I asked for. I can tweak later if needed.
Why is CodeIgniter too old? As you stated, it's on the list that you've referenced meaning that it is actively being developed. From the PHP developers that I'm in constant contact with-- they state it's still a fine framework to use. Can you reference specific reasons for thinking this? I'm just curious because I've thought about learning another framework.
same way people learn Java as their first lanugage ;) or any other "only class" languages. anyway, both object and functional approaches are valid when using mysqli, so it's up to him to decide. ps. how i was taught doesn't matter, it was decided by the whole education system and isn't necessarily correct.
You don't have to look [phar](http://phpmaster.com/packaging-your-apps-with-phar/)
My working definition of senior vs junior within a particular technology is whether that person's effective limit is what's possible or what they know how to do. If you can do anything with PHP that PHP is capable of without using another developer's time, and your ongoing learning consists of staying up to date with and creating new best practices in the larger community rather than just struggling to get things working, then to me you're a senior PHP developer and time spent is irrelevant. A senior developer can be left alone to complete a project and trusted to respect industry-accepted quality, and need only be exposed to the existence of a better practice to take charge of learning from or adopting it.
You might be taking for granted your burned-in understanding of how storing things in variables and making copies of them takes up memory. Programmers who have never been exposed to managing memory themselves have a harder time making higher-level languages do it efficiently for them.
yes, it's developed. but it's developed for PHP 5.**2**.4, while we are in times of 5.4 and almost 5.5 (I mean stable 5.5). there are a lot of features/fixes/improvements made in these 3 (5.3-5.5) versions, and more to that - 5.3 is about to end its lifecycle (only security-related fixes will be left). it's developed to maintain those huge old projects which are big enough to not be able to move to smth else. newer frameworks are much more flexible, have more features, are tested after all. so I highly recommend NOT using CodeIgniter.
Your biggest concern is injection attacks. (Aside from concerns about scaling/user bugs that you havent found before opening it up to the public) A good rule of thumb is to look at any user entered field and ask yourself "What happens if the user enters something that I don't intend?" If you expect a number, put checks in that prevent the query unless a valued integer is entered. Make sure you're scrubbing the user entered text before allowing it to hit your SQL query. You might also consider separating the account that access your MySQL DB into a read account and a write account. It separates out the keys to the kingdom a bit so that if I find something you missed in a query that reads the DB, I cant easily write things into your DB. As far as running them on the same machine - without knowing much about your rig, that should be fine.
For true client-side security you need to use https encryption using a signed cert. Self-signed certs can offer some encryption but the browser will warn visitors of the bad certificate. You'll have to pay for a cert or if your host offers a free cert then use it. All input data from the guest should be escaped before inserting into the database. The recommended solution for PHP is to use [PDO](http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers). It will escape your database input before sending it. Regarding database security, typically network traffic is encrypted already (but you won't be using a network), this is built into the drivers. You will need to store a username and password in your PHP config. This user account should only have as much permission in MySQL as it needs to use the database. You should never use root and you really shouldn't give the user create database, delete database, delete table, create table, or grant permissions (some exceptions may be necessary). Regarding using javascript, any AJAX requests to your controllers should use POST instead of GET. This is because a GET will store sensitive information in your Apache server's access log. A POST request does not. If anyone were to get on the server and snoop around, you wouldn't want the username and password of your users in the access log.
I prefer Dwoo: http://dwoo.org/ It's similar to smarty, but had template inheritance first. It's easy to extend and stays out of the way. Smarty and Twig don't appeal to me because of this whole notion they pursue of "sandboxing" and creating a template language that's safe for people you don't trust writing PHP code. Dwoo is just sugar on top of PHP that you can break out of when you need to and access arbitrary php functions/static members from. I recommend using a templating language with PHP for the sake of separating view from controller and because it helps developers focus on high-quality HTML. Many say that it's not much harder to just use PHP, but when you use PHP you lose conveniences like inheritance and spend time looking at a ton more characters in your HTML that aren't HTML. Template inheritance, subtemplates, template plugins, etc all promote the DRY principal, which is king when you start building big things.
Not turned on by default. It may be turned on in dev machines, you're right.
When using PDO, you should parameterize your input variables. Do not concatenate them directly into the SQL statement. Otherwise, you still might be prone to injection.
[StartSSL](http://www.startssl.com/) offers free certs that would work perfect. However, OP might want to Google a guide for using StartSSL and for adding SSL to his host, as both of things are relatively complicated the first time.
The Adminer project uses concatenation for their single-file download. Check [compile.php](https://github.com/vrana/adminer/blob/master/compile.php).
Absolutely! Do what you enjoy!
~~That depends on the configuration. I believe the default is GPCS (Get &lt; Post &lt; Cookie &lt; Session).~~ Nevermind, I misread that section. This is another example of suspect methodology in the article that he is trying to address.
Sounds interesting. I'll look into it when I get a chance.
Assming a *nix shell find /path/to/top/dir -type f -iname '*php' -exec grep -iHn string_to_look_for {} \; note that the backslash before the trailing semicolon needs to be there. 
I'm not too familiar with the capabilities of javascript outside of client side scripting. I don't want to have any hashing in js because obviously i don't want it to be read. So outside of ssl, is there no other way to be sure that the users pw/username are sent in anything other than plain text?
That's what I use, it seems like the best hashing method at the moment.
... seriously? 1. Pointers. 1. Memory layouts. 1. Linkscripts 1. The ability to work with devices. 1. The ability to work with registers. 1. An understanding of machine performance. 1. Actual machine-efficient behavior 1. Constant-time arrays. 1. Making one's own datastructures. 1. Making one's own algorithms 1. Order of complexity being a meaningful thing 1. Modular headers. 1. Calling conventions. 1. Pulling in code from other languages. 1. Relatively practical operating system development 1. Translation units. 1. An understanding of inlining. 1. An understanding of development through simple practical macros. 1. Clean code is safe code 1. Good allocation habits. 1. A respect for what undefined behavior actually means. 1. The ability to speak the lingua franca of the programming world 1. The ability to target essentially any device on earth 1. The ability to target tiny systems 1. The ability to target extreme performance requirements 1. Not being a pansy And that's just off of the top of my head. It is ... really hard to comprehend that a CS graduate from a C-heavy school can't think of even one reason why PHP shouldn't be their entire world. Good *lord*.
It isn't always crazy. I think this particular instance is a bit weird but I have a usecase that worked quite well. I'm sure there are better ways to do it but I need to run a script about 3 million times per day and forking from PHP wasn't quick enough and neither was spawning that many instances from the command line. What I did instead was create a small multi-threaded C program that gathers up the appropriate instances that are to run that minute and then use Curl on an internal multi-threaded apache server running my script. I pass the necessary parameters so it knows what to do in that instance. This cut my run time over 50%. Then when I needed to scale out I added more apache servers and stuck a load balancer in the middle to distribute the load.
 cat file1.php file2.php file3.php &gt; finalfile.php The finalfile.php will contain all of the other file information in order that they were entered: &lt;?php //file1.php ?&gt; &lt;?php //file2.php ?&gt; &lt;?php //file3.php ?&gt; The problem comes down to if you used include or require in any of these files then it'll be broken.
Just to nitpick. &amp;nbsp; &gt;Regarding database security, typically network traffic is encrypted already &amp;nbsp; Not so with mysql. http://dev.mysql.com/doc/refman/5.0/en/ssl-basics.html &gt;By default, MySQL uses unencrypted connections between the client and the server. Depending on your mysql install, you might have to do some setup on the server to add certificates and tell it to use SSL. It also requires a little work on the php side. For mysqli, you'd need [mysqli_ssl_set](http://php.net/manual/en/mysqli.ssl-set.php), and for PDO, you'd need to [pass an array](http://www.php.net/manual/en/ref.pdo-mysql.php#103501)
not that im aware of
http://www.youtube.com/playlist?list=PL2407F4EE0530B251 - Watch these and apply them all the way, its pretty much great stuff.
I highly suggest using the Data Mapper pattern over Active Record. The latter produces very tightly coupled code that can lead to big maintenance headaches later down the road.
Then just use **sed** to strip out the require/include statements---we're already creating an abomination, might as well go the whole way ;)
You could be experimental and use something like Mozilla's persona, but I imagine it still works over HTTPS... HTTPS / SSL is *the* way on the web to make sure that communications between the client and webserver are secure and unreadable, and that the webserver is who they say they are, not a MITM attacker.
&gt; Sounds like to me that C is *your* "golden hammer". You obviously didn't do a very good job of reading, then, since it was neither the first thing I brought up nor the thing I recommended most strongly. You asked for things one could learn in C that one can't learn in PHP. Then, when you got such a list, you said "but you can learn those places that aren't C!" ... that's nice? I didn't say "go learn C." Go prove yourself to someone else. I'm not interested in you telling me what my own beliefs are, especially when your guesses about a stranger are in direct contrast to what they actually said.
What I actually said was "go learn lots of languages that are different than ones you already know." &gt; So you should learn more languages, once you're settled on your feet in this one. And not similar ones to ones you already know; every time you take a leap to learn, leap to somewhere that currently seems weird. Somehow, from this, you got "don't learn anything but C." &gt; /u/StoneCypher is discouraging the use of other languages It's not clear to me how you're going to manage to feel justified in speaking about someone else's beliefs this transparently falsely, though the reasonable response - to apologize - seems virtually certain to not happen. I'm not sure, but I get the impression that it's because you're more interested in feeling like you've proven someone wrong than in understanding what they meant. Please don't speak for me. You obviously don't understand what I said.
Not trying to prove anything. Just trying to prevent someone spreading FUD.
It's good to note, but this should only matter if you're using a remote database. If your database is on the same machine as your web server (which most are in LA**M**P setups).
Not complaining or anything, I am just curious what the point of this is, especially since you not going as far as using a tool like hiphop to generate c++ and compile it.
Please answer this question, you know we're all dying for it:)
Well... less work is always better then more work.
I was under the impression that there wasn't any default encryption with the php to mysql connection. This will be useful when I eventually have them on separate servers. I appreciate the extra info on PDO and mysqli. I'll be changing to mysqli next week which should be easy since all of my database queries are organized under appropriate classes. The PDO shouldn't be too much effort either with my current setup. I just barely finished a three month project of changing the site from procedural into OOP, it was a fun learning experience. 
If for whatever reason you can't use SSL, there are JS-based implementations of bcrypt and pbkdf2 that you can use to hash the password before sending it to the server.
Which one do you use sir?
&gt; binary logs will log the unhashed password. Interesting. I hadn't thought of that. Luckily I hash in PHP, so I have nothing to change.
And yet you've failed to admit that what you're arguing against was never the speaker's position in the first place.
You must really have loved Macromedia Director before the dot syntax. Before : "set thisVar to the locH of sprite 2" After : "thisVar = sprite(2).locH" ;)
StartSSL is awesome. I have a Class 2 with them which means for 60 bucks a year, I can create as many SSL certs as I want. Also they are recognized by every browser. 
While ZF proposes that the closing tag must be omitted for files with only PHP code, I don't personally agree with that. They're trying to hide a bug in their interpreter by making the developer do something they normally wouldn't do. How hard would it be to scan the rest of the file for anything other than whitespace? If it's all whitespace then trim the file at the closing PHP tag.
But then someone grabs the encrypted string from the wire (public wifi) and they have what is needed to login?
You're right I'm looking for a code which which can be used at my whim on any differing server running PHP. No installations
Hmmm... in that case better used digest auth. although now im wondering if you send the seed first that would help but i'm too tired to play over all the attack vectors in my head.
Because PHP isn't a self-contained programming language, it's a scripting language that uses HTML as a container. When you close the tag, PHP hands control back to Apache (or whatever your HTTP daemon is), which should be blindly sending its input onto the network. The interpreter **stops interpreting** at the close of the tag.
Seems like... a lot of work?
I gave ansible a go earlier in the year and placed the [playbooks](https://github.com/icomefromthenet/PHPAnsiblePlaybooks) on github. For me vagrant + ansible = win. 
To be honest, sounds like you dodged a bullet by not getting that job.
Thanks for taking the time to look at it, as stated before, so far it's just been me, and I haven't been able to get all things right. It is a work in progress, and as such, I wouldn't expect it to be 100% perfect, would you? As a side note, I'm trying to stay away from 100% OOP, since that doesn't always achieve best results, at least, in my personal opinion. Again, thanks for taking the time and looking at it :)
&gt; When you close the tag, PHP hands control back to Apache That's not exactly how it works. I mean, the fact that you can use output buffering means that PHP still has control, rather than blindly giving control to the HTTP server. &lt;? ob_start(); ?&gt; &lt;html&gt; &lt;body&gt; Lorem ispum blah blah blah. &lt;/body&gt; &lt;/html&gt; &lt;? ob_end_clean(); // Causes the HTML above not to be displayed at all. ?&gt;
I would be careful with this, *supposedly* posting his own links is what got ircmaxwell banned.
There are plenty of steps in this guide because Jason is trying to show off pretty much everything you can do. Not every package is going to want to implement a Facade, and Assets, etc, so its not as complex as you might think. Also much of this is showing off how composer works, so that too is going to be required knowledge that is not really part of making a package Laravel specific.
Sometimes you NEED a framework that works with older versions. Only recently have most major hosts moved to php 5.3. CodeIgniter has it's niche, it's just not yours. 
Not the same. The another one was about PDO (not DBAL). In fact this post is the second part or that post. BTW the link that you post is something similar (even better). I will read it carefully and change a change one of my projects asap according with the new configuration. TXS
any weird customizations to php install or anything? i tried your code verbatim and it worked fine for me.
I tried to load the site in lynx and got nada, so it's definitely doing some kind of User-Agent check. Try setting an IE-ish User-Agent header.
Interesting... So they might have tagged my website a bot which is causing it to always come up as 'Restricted Access, Invalid Domain'? That's a bummer.
A look at the source shows an unhealthy amount of javascript, which is what stops it loading in lynx. The page loads fine in firefox with a custom user agent string.
Check out https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
I used Yii in few projects, now I'm using FuelPHP. Also, a part of current project will be written in Symfony. Would love to check out that tasty Laravel 4 somewhere, just don't have any possibilities yet. ps. I also [obviously] used CI, about 2 years ago. It was nice, I liked it, but that time is gone (=
Ah this is perfect, no idea this even existed. Thanks!
&gt; Only recently have most major hosts moved to php 5.3. VPS is your friend (= // what i like in my current job - we have dedicated servers &gt; CodeIgniter has it's niche Yeah. Small projects only, if talking about smth new (which, I repeat, should not be done anyway :). But considering the fact that small projects at some point grow to bigger ones - it's best to use smth that has better scalability and extensibility from the whole start (the last one is a huge CI's weakness). Even with nice (though not awesome ;) FuelPHP in my current project our team had to do a lot of work for it to suit our needs. Can't imagine how much time and crutches we would need to do this with CI =\
Ah, go figure.
There are MUCH worse things than CodeIgniter. I've worked on some things based on PHPNuke. You sound really lucky to be so up to date =)
If you ever try to wget a google.com search you will get 403 forbidden. However if you pass a valid user agent -U flag it will get the results. So, depending on the setup simply supplying a valid user-agent may work to get around this.
one can also register the connections dynamically (like per host name) with judicious use of AppKernel::registerContainerConfiguration if one is using the DoctrineBundle and have a separate cache dir per host. OR using the built in environment variable support
I recently started playing with [ReactPHP](http://reactphp.org) and thought that this might be interesting for anyone who's done the same. Memleaks are hard to keep control of (due to objects not properly dereferencing) but it's an interesting project nonetheless. If you want to use libuv with ReactPHP, there's an EventLoop implementation by the author of the extension [here](https://github.com/chobie/react/compare/libuv-integration). It works, though it's not 100% complete. 
1. Very good point! I'll make the adjustment. 2. I did indeed want to open and close them per entry for exactly that reason, but assuming that the amount of entries could be relatively large it's probably a better idea to open once and close at the end.
( ͡° ͜ʖ ͡°)
Ofc they are. But still, we're talking about CI here (= &gt; You sound really lucky to be so up to date =) Yep, guess I am, in some way
&gt; You can never have too much security. Linus doesn't seem to agree: https://plus.google.com/+LinusTorvalds/posts/1vyfmNCYpi5 Well, okay, maybe that thing isn't about security in a first place, but just plain stupidity.
I've updated the class to no longer open and close for every write and handled the error logging better. The script no longer dies or suppresses any errors. I'm also working on including error codes, severities and the PSR-3 standard.
My personal favorite is [Zend_Log](http://framework.zend.com/manual/1.12/en/zend.log.overview.html)
Try to update php and go with phar because (just of the top of my head) * Without it if errors show in runtime you won't be able to map them to the development environment (unless you write your code in one file from the start) * You'll have to run a parser and adapt the conditional includes, which will add a lot of duplication just as well * Parsing will be slower (if the file can't be opcode cache you'll pay for it each time) * Did I forget to mention dynamic includes? * Any configuration you hold in externals files must be in-lined in call site. If you're seriously thinking about not forcing the upgrade, good luck.
It's a good start for someone just getting started. So don't take the criticism here too harshly. I would also add microseconds to your date output. Some events are happening so quickly that you'll need that level of precision.
I really like the Symfony [Console Component](http://symfony.com/doc/current/components/console/index.html) for CLI PHP!
Looks like the other comments already have you on the right track, but one additional thing: many of them recommend salting and hashing, which is a technique that is rapidly becoming ineffectual since most hashing algorithms are designed for speed. Instead, use an algorithm with a work component, like bcrypt. PHP has bcrypt built in, so use plain old `crypt()` with a salt that starts with `$2y$10$` and 22 random alphanumerals. See [the manual](http://php.net/manual/en/function.crypt.php) for more, or use a library that does it for you like [PHPass](http://www.openwall.com/phpass/) (that name still makes me snigger like a naughty schoolboy). 
I would check out [log4php](http://logging.apache.org/log4php), it's a decent enough application to handle all your logging requirements you might need and you can easily swap from one to the other without much if any code change.
Check out http://logging.apache.org/log4php
I do a `curl http://www.google.com`, no other options, and I get the html content.
Guys how do you handle so many frameworks:) So gosu!
Want to tell us what libuv is?
All valid criticisms. Do not downvote this Skeptical Martian just because he has different communication standards! He has to keep it short and blunt to reduce packet loss between here and Mars.
I see you also got the file locking in place. Good deal. I'd also add that I like that you took the criticisms in stride and acted upon them. My next suggestion would be not to carve the writer in to stone. A good logging class should talk to an interface to write something, not be embedded in the logging class itself. The reason for this is so that if you decide you want to write to something else, a database for example, you essentially switch the adapter to something else you've written for that particular component instead of rewriting the entire class. You might have a look at the [Adapter Pattern](http://en.wikipedia.org/wiki/Adapter_pattern) for some insight in to what I'm talking about. Doing this is part of an object oriented concept known as [Separation of Concerns](http://en.wikipedia.org/wiki/Separation_of_concerns). In a nutshell, a logging class should only be worried about accepting log information. A writer adapter is a class that should only be concerned with how to store information. Neither class should care how the other works at a low level, and only be worried about the high level interface. All writer adapters meant to work with your logging class should have the same interface even though they may do very different things at a lower level (ie. write to disk, write to database, send to network address, etc). Think about it like the army - the unit commander issues general orders to his subordinates, and the soldiers worry about the details of how to get a given task done. This is partially why people keep talking about PSR-3. The logger built on this advisory has a set of defined [interfaces](http://php.net/interface), so if you were to write a logger that conformed to its interface the components meant for logging in other PSR-3 compliant projects would work together. Additionally, other projects that can use a PSR-3 logger will also automatically be able to use your logger as a drop-in replacement. The main purposes of an interface is two-fold: 1) To enforce rules that state certain methods are necessary for a dependent class, and 2) To help create and promote predictability in inter-class/object communication In any case, I've probably rambled enough. Let me know if you have questions about any of this - happy coding.
Few things... You should not be logging to a flat file.. this is a concept that was popular in 2001. You should also explore concepts (if this is in a production) of logging directly to Memcache and having a script retrieve, append data to file and flush retrieve data. Much faster for end user.
libuv is an event-loop library that is fast, flexible, and solid. It's the same event-loop library that NodeJS uses. Really, it's just a platform-agnostic event loop implementation. If I recall correctly, libuv itself wraps libev on *nix and Windows' kernel event system (not sure what it's called). php-uv itself is just an extension that was written that gives you access to the libuv API from within PHP. Essentially, this gives you the ability to have a Node-like environment in PHP.
PSR-3 doesn't supply an implementation -- it's only an interface.
It's boring for me to use a framework after I fully understand how it's working and after I know most of its core code )) So i try to proceed to the next one, to see what he has to offer (= ps. Looks like an alien invasion to multiple planets in movies like 'Independence Day' xDD
This often annoys me about open source software. The github page doesn't give a single clue about what the fuck this does. If you take the time to write an open source package, why not take two minutes to write a short paragraph explaining what it does?
libuv is a library to make asynchronous IO accessible. This means you can have thousands of connections open, and act on them granularly, as data comes in or responses are completed. It's the alternative to the more linear deal-with-one-connection-at-a-time that you'd normally get with a few sockets, or a php connection, and it's impossible to handle data spread among large amounts of connections that way. Want to turn your web programming model from a 1-request, 1-response model to a fully interactive one, and still serve thousands of people? That's why people were loading up node.js by the thousands.
You should almost never use typecasting for parameters as it's possible to trick into casting something that you don't want. See this example: http://stackoverflow.com/a/8206684/775007
Why, everytime, this, callback,hell ;(
Ah, fair enough. Is there somewhere you could recommend to go for a introduction to this whole Composer/Facade/Assets thing for the rest of us coming from CI to Laravel?
This phenomena is aptly summed up by the [Man from Mars test](http://www.webpagesthatsuck.com/biggest-mistakes-in-web-design-1995-2015.html#2). It bothers the hell out of me.
Well, it's kind of expected to see if they're simply porting over features from a JavaScript API. Callbacks aren't always bad, though.
So I take it the PHP script is run from the command line and this spins up its own HTTP listener? How does this address the horrendous memory leaks in PHP for long-running scripts – should I have a watchdog restart the script every once in a while?
I didn't know this had a name. That's exactly it, though. Now I have a strong urge to go around Github and open a zillion issues on projects saying "Your website fails the Man from Mars test." :-)
You've made the concept of Separation of Concern very clear and i'll look forward to using it within this class. I'm not very familiar with interfaces, but i'll read up on it and try my hand at including it in this class as well. Your comment was extremely informative, thank you! I definitely appreciate the criticism and feedback, it's all part of the infinite learning process.
But that will get you a good grounding in the language, then you can use online resources like phptherightway.com. Check the top selling books on Amazon for some more recent editions.
Memory leaks? Didn't hear about noticeable ones since 5.3 was introduced
You see memory leaks even with GC turned on? Please report a bug if you do
I specifically said search (provides a nice 403): `curl http://www.google.com/search?q=test` 
I offer one on one guidance but people like ircmaxell say that I'm spamming when I say that so i no longer put how to contact me. It's pretty frustrating, really, but I've mentored upwards of 10+ people now and they all have better careers because of it.
Take a look at the Laravel 4 documentation: http://four.laravel.com That was launched after I posted this original link.
&gt; google couldnt help me.. Because that's too open ended a question. What's your use case? If you want to learn PHP, and are already a decent programmer in another language, try to create a small application. I recommend doing straight PHP first, so you can learn the ins and outs of the language, and also realize what a horrible mess it can quickly turn into if you don't have an architecture in mind ... which will lead you to frameworks, large and small.
I feel you are going about learning PHP exactly the wrong way. If you want to learn php, the [php manual](http://php.net/manual/en/) is actually a pretty good resource in my opinion. I'm sure there are other tutorials out there as well, but the manual will also tell you all you would care to know about the built in functions. 
The PHP ecosystem is VERY different from what you are used to in .NET. There isn't an exhaustive and organized system of libraries, PHP is rather scattered. While the .NET set of libraries puts an emphasis on uniformity, PHP takes the other approach - chaos. As a result you get to seem some pretty awesome things, but you also get a lot of crap. Part of being a good PHP developer is being able to sift out the crap. PHP is a very "trial-and-error" type language. There are "best-practices" that try and mitigate this, but you'll run into cases where you'll need to make up your own mind on things and not follow a pre-defined set of rules. I'd suggest thinking about something small that you'd like to try and build in PHP (even something as simple as a simple game of blackjack) and then try and build it on your own. When you get stuck, google your specific problem and you should find a lot of ways to go about doing what you're trying to do. To help you get started: To connect to a mysql database, take a look at [mysqli](http://ca1.php.net/manual/en/mysqli.quickstart.dual-interface.php) For XML parsing, you want [SimpleXML](http://ca1.php.net/manual/en/class.simplexmlelement.php) For JSON, there's a couple functions: [json_encode](http://ca3.php.net/manual/en/function.json-encode.php), [json_decode](http://ca3.php.net/manual/en/function.json-decode.php)
I suppose I should have been more clear - I don't think these memory leaks are on PHP's side, but either the event-loop extensions (libev/libevent/libuv) combined with the way that some objects are shared around in PHP this way with React.
&gt; To connect to a mysql database, take a look at mysqli Personally, I would look into [PDO](http://www.php.net/manual/en/book.pdo.php) rather than mysqli for a new project. It is not harder to use than mysqli and works with more databases than just mysql. That way, heaven forbid, should your requirements ever require changing databases or you simply want to copy code over to another project using a different database, the only thing you'll have to swap out is the connection string. Plus since he is an ASP.Net, he may still be using a MSSQL database. That and I like prepared statements with named parameters. That's just a personal preference there, but it does take out a lot of headaches if you ever update a table in the database.
That's awful advice. You should log to syslog-NG (or similar) and have that decide what to do.
&gt; Prepared statements are also available in mysqli Yes but named parameters are not. I won't argue about the switching databases situation, but I've seen it happen more than once at more than one company. This seems like an independent person so it likely won't matter, but to me, better safe than sorry. Especially since the only extra real work to learn PDO is learning the connection string you need. Otherwise, they are near identical (ignoring the minuscule performance differences) with the exception being the prepared statements, which I feel are slightly easier in PDO than mysqli.
[PDO](http://php.net/pdo) [SPL](http://php.net/spl) Of course PHP is a half-and-half language, mixing functions with classes so while these two areas are common to use, they may not give you sufficient insight. You need to refine your question some.
&lt;quote&gt;what classes and methods do you use the most?&lt;/quote&gt; my "Common" class :}
There are tons of different tools for this problem, saying I gave 'awful' advice is stupid because your advice is horrible on it's own, you sound like a moron who throws keywords around to sound smarter. First of all, setting up syslog-ng just to log simple stuff like this in a LAMP environment is an overkill, most of the current LAMP stacks already have caching layer that they can re-use to optimize end-user load time. Second of all, it will be faster to log to memory and retrieve / process data on demand at your own pace. You can even offload processing to another instance/server if you wish or.. Also if you setup syslog-ng you need to aggregate logs somewhere (unless of course you just installed and setup syslog-ng for local storage which is retarded in it self since you can use syslog... I know you are trying to throw -ng in there but you actually don't know what the hell are you talking about but let's not focus on that for now) so you will have an overhead of an additional machine that stores log and either NFS or over IP lag. TLDR: STFU
stdClass() is my most common used class...
it surprises me how many php programmers i have met have never heard of it.
The manual is rather difficult to read at first. It's like studying egyptian hyroglyphics. 
Go here, http://www.phptherightway.com, read through what they talk about. If you want to start writing modern PHP, you need to learn about composer first and foremost. Remember, PHP is very similar in how C++ applications are structured. You bring in frameworks you need to use lik libboost, and a few others, you write functions, structs, classes etc w/ namespaces etc. The C language is very powerful and you invent a lot of your own stuff and have paragma statements etc for pre-compiling. PHP, you construct your own environment, using functions/classes/consts/etc. It feels very similar to C/C++ structures. No pointers of course. You have a lot of what you have access to in C, many of the libraries are virtually the same in unix environment all the way down to the order of their parameter lists in C. Key to focus on is if you have a large system, usually most of your PHP code will be language independent if you do it correctly, such that you could in theory port it to another language / framework. Things to watch out for in php: dates, unicode / mbstings, database connections, and really huge arrays are fast, but they consume huge amounts of ram, much more than you're used to. Look into the SPL abstractions.
Eh. How?
Great podcast! Love hearing about the future of PyroCMS.
You will likely be working with arrays and strings alot, so keep in mind that PHP does not have predefined classes for dealing with either (unless you count the SPL). However the PHP manual is well organized and has a list of functions to use for strings and arrays. Good luck!
Pardon me for asking but what is WB?
ugh. PHP isn't fully-OO.
I DO have a class called common. But I am joking yes.
&gt; To connect to a mysql database, take a look at mysqli I just started to look at the PDO class for database stuff. Its supposedly faster in most cases. Edit: Oh, /u/Mycal already said it. Well, that's two votes for PDO, ha.
The typical problem with asynchronous php is thus.. &gt; php script 1 runs &gt; php script 1 asynchronously runs php script 2 &gt; php script 2 doesn't run because php script 1 has not provided output yet &gt; php script 1 fails If I'm understanding this correctly, libraries like libuv and Gearman are there to help prevent this problem? 
Can you explain this a little more? I'm doing the same this as this guy and what I was doing was after the user is authenticated I would use their session Id to route the header to the URL referencing their session ID. Is this the correct way to be doing this. 
Being faster shouldn't be the reason to choose one or another (since it likely doesn't make much of a difference for typical use cases)..
I thought libuv had async file IO built in as well?
You don't really need the autoloader in your project. 1. Composer can handle that already if someone includes your project in their Composer application. 2. If someone isn't using Composer, your autoloader may conflict with yours.
For the love of god, please never upload a config file with a real password. Specially if you use it for other things.
&gt; I shouldn't have use the 'root' account for the database. It's a lot better to use an account with the bare minimum access necessary to get the job done. Bah! Whatever, due whatever you want on localhost. Just don't do this on a production site. It wouldn't hurt to test it on a limited access account locally just to make sure it works okay though. It's not too bad for your first time. Everyone's looks back on their first and thinks, "What the fuck was I thinking?!". A few things I would say to keep in mind: * Minimize the amount of nested IFs in anything you do. If it goes more than 2 IFs deep, look at how to break it up into smaller methods. * Checkout [Design Patterns](http://www.amazon.com/Head-First-Design-Patterns-ebook/dp/B00AA36RZY/ref=sr_1_14?ie=UTF8&amp;qid=1358313489&amp;sr=8-14&amp;keywords=design+patterns), the link is just an example but it's one of my favorites. The examples are in Java but you can get the concept of what they're saying. * MVC is just a fancy way of saying, "Separation of responsibilities". Then you don't have SQL queries and IFs necessarily in your "register.php" file but simply a handful of variables for outputting results to the browser. --- If you want to start out sort of slow and ease into it, I would say to start out with something like [CodeIgniter](http://ellislab.com/codeigniter), it's changed a bit since I have messed with it but AFAIK it's still basically a manual process for MVC and could help you understand it better. This also may lead you to bad habits since you have to do it manually and may not do it exactly right. Next one, or possibly the first one if you want to skip CodeIgniter, I would check into [Symfony 1](http://symfony.com/legacy). I'm sure I will get a lot of flack for this as people will scream and yell, "No, use Symfony 2. It's the latest and...", fuck that, no! You're just starting out and there are quite a few advanced features in Symfony 2 that are nice but you should to ease into it. Symfony 1 has some decent generators that will auto-generate your model classes for you and sets it up in such a way to teach you about extending those classes rather than modifying, which is what you should always do especially when you want to use someone else's library. It also helps you maintain a rigid MVC layout to help guide you through using MVC. After that, then you can move into Symfony 2 when you're ready. Personally, I would stay far away from Drupal as well, even Drupal 8 where it's supposedly using some Syfmony 2 components.
simplifying field validation :) : http://pastebin.com/tndKLhAU
I'd personally recommend putting it in a function. For example, in [Requests](http://requests.ryanmccue.info/), I have the `Requests::register_autoloader()` function. If you're not using Composer, you can call that to ensure autoloading is all working; otherwise, Composer will take care of it.
beyond what you mention, should rewrite this as a user object and DAO (database). Procedural php is often not the best way to do it. I've pm'ed you a gist showing what your objects might look like.
Excellent work guys! This just gets better and better! I'm proud to be part of this community!
It does. I was just mentioning EIO as it's more complete than php-uv is.
Don't worry about reinventing the wheel, you should! http://blog.ircmaxell.com/2012/08/reinvent-wheel.html About the password validation, I suggest you remove the max length limit and remove the regex pattern, If I would want to use ^, ; in my password to make it better secure, I should be allowed to, limiting to alphanumerical, underscore and dash is not wise. You should separate the active logic and page markup properly. I don't mean you need to keep them in different files even though it's considered good practice, but keep the actions up at the top and the bottom with html and display logic. Simple example: http://pastebin.com/3JsFJbff Use the validate filters, especially the FILTER_VALIDATE_EMAIL to have a proper e-mail validation.
Is there a reason you didn't select your database within config?
is english your native language?
As a general advice, try to minimize nesting. For example, you have: if(!empty($_POST['user']) &amp;&amp; !empty($_POST['pass']) &amp;&amp; !empty($_POST['rpass']) &amp;&amp; !empty($_POST['email'])){ then a lot of code, and again, another if .. else. Try to look at is this way: If something fails - notify the user. If not - continue execution. If possible, of course. Basically, it will lead to something like: if(empty($_POST['user']) || empty($_POST['pass']) || empty($_POST['rpass']) || empty($_POST['email'])) { die('Sorry, dude'); } $pass = $_POST['pass']; ... This will make your code more readable and less risk-prone. And as something to keep in mind, when you reach a point when you need to write [tests](http://en.wikipedia.org/wiki/Test-driven_development) for your applications: for every `if` you need to write two tests. 
I'm not contributing much to the conversation but Requests is awesome! Thanks a lot for it!
 if(preg_match("/^[a-z0-9_-]*$/i", $pass) &amp;&amp; (strlen($pass &lt; 6) || strlen($pass &gt; 30))){ My lastpass would barf all over your page. I love to use special characters and have passes longer than 30 ;-) $pass = htmlentities($pass); $pass_hash = sha1($pass); I think you missed what htmlentities() is for. It's **only** for outputting stuff to teh end user, which you're not doing w/ the password (hopefully, ever). Just remove it. You should never store html encoded values in the database. Other than that, I greatly applaud your beginners use of OOP! That's more in such a small sample than I've seen pros after 10 years able to accomplish.
Agreed, Requests is dope.
Shhhhh... keep it on the down low before those crazy Drupal Kool-aid drinkers figure out that there is something way, way, way better out there ;-) Seriously though, well done!
Whichever you use, the auto loader should be managed by the main application and not the library, IMO. 
Fix the flaws, then ask for advice.
Comment regarding the HTML markup - don't imbed, use CSS. Example - CSS: .error { font-size: 1em; color: #0f0; } PHP: public function passwordInvalid(){ echo '&lt;span class="error"&gt;The password is invalid. Your password can contain only letters and numbers.&lt;/span&gt;'; die(); } This will make your life easier in every way, especially if you decide you want all your error messages to have a 1px border or a background color.
Put it on [Travis CI](https://travis-ci.org/) with the automated unit tests and stuff :)
If you consider your job secure, go with 3. If not, do not offer ideas about reducing workload.
Standing out to me: what's happening at the moment is that the form HTML is sent to the client before PHP even starts processing. This is bad because you immediately eliminate the possibility of exiting without output, returning an HTTP error, or doing an HTTP redirect. The way to fix this is basically to do the complete validation process before you start outputting HTML. In this case you can simply move your PHP part to the absolute beginning of the file and store the error/success message in a variable/buffer. After that comes the HTML, and in this case at the end of the file you output the buffer in which you've stored the success/error message. The rule of thumb is to **not** mix PHP code and HTML, and this goes both ways. You try to have as little PHP code in your HTML (try to minimize it to control structures like if, for and while), but you also try to minimize the HTML in your PHP code (so preferably no '&lt;b&gt;'-s and '&lt;p&gt;'-s in PHP code). You can do the outputting in various ways. You can simply build a full PHP section like this: &lt;?php echo $messageBuffer; ?&gt; But there are also shorthands like `&lt;?=$messageBuffer?&gt;`. There's even an [alternative syntax for control structures](http://php.net/manual/en/control-structures.alternative-syntax.php).
Alainn, that inputs break your database queries is proof that you are not properly sending the queries over. You need to look into using PDO. ANd once you get that going, here is the only correct way to do this sort of stuff (caveat: you could replace "?" with ":name"). $stmt = $pdo-&gt;prepare("INSERT INTO Artists (name) VALUES (?)"); foreach ($artists as $artist) { $stmt-&gt;execute(array($artist-&gt;name)); } 
Thank you! I had thought about the modular approach too, but there are hurdles there as well - specifically when a feature is in every level (model, view, controller). It's a lot hard to just say "load this module" in that case. But, you're right, that's where a bit of refactoring would have to come in. 
Agreed. Having to duplicate work across N projects would bring things to a halt very quickly. Which, ironically, would give QA almost nothing to do inbetween us implementing the features.
For all the issues with your code, since it's your first attempt, I'll leave others to point out the flaws and just give you one tiny tip for future reference: echo '&lt;font size="3" color="red"&gt;You must fill in all fields.&lt;/font&gt;&lt;br&gt;'; die(); The contents of a `die` or `exit` statement are executed before the script closes. You can do die(header("Location: /404.php")); /* or */ die("Error message!"); and it will run that header function before exiting, or the message will be printed to the client. No need to put a separate, standalone `die` on a separate line. Also, if you don't need to put anything inside it, you can omit the parentheses and just call `die;` or `exit;` like that. Okay I lied about one tip, I have another. I understand you perhaps put all of the error messages into their own functions with a mind on keeping strings open for future translation purposes, which is a noble intent, but there exists somewhat of a standard - include the message in your script, in your native language, wrapped in a function whose name is simply an underscore, e.g. `_('String I might want to translate into another language');` The `_` function is an alias of [gettext](http://php.net/manual/en/function.gettext.php). If you don't have gettext installed, you can write your own function to just `echo` the string, or do some in-place translation.
It is on Travis-CI already :)
Analog only uses its own mini autoloader in the absence of another, which I believe is the case for Requests as well.
Note if you use named parameters, the array you pass to execute (if you don't use bindParameter/bindValue) needs to have keys with semicolons before them. Kind of stupid IMO. $a = array('name' =&gt; 'bob', 'age' =&gt; 32); array_to_named_parameters($a); exit(var_export($a)); function array_to_named_parameters(array &amp;$a) { foreach($a as $k =&gt; $v) $res[':'.$k] = $v; $a = $res; } &gt; `array ( ':name' =&gt; 'bob', ':age' =&gt; 32, )` Seems there's no way to map over associative array keys. You have to create a temporary array and assign the new ones.
Thanks for that and you're right, I used my outdated knowledge of PHP4 at first to store the data and only just started using PDO for retrieving. With this I can now clean up my old tables :)
A few tips: **Don't use `die()` everywhere.** You should output some appropriate error in a page with your site's design etc. I don't think sha1 is a massive problem. It's better than md5 and obviously better than storing passwords in plaintext which an unbelievably large number of well-known businesses stupidly still do. However, you should salt the passwords. (Usual practice is to have a global salt plus a salt-per-row in your users table.) **You should separate HTML and PHP as much as possible.** So for your register.php page, you should only have the PHP code that does all the processing, then store the results in variables (for example an array of $errors and an array of submitted $formData). Then after the PHP include a "view" file, e.g. "views/register.php". That file will be like a HTML page starting with `&lt;!DOCTYPE html&gt;` etc, including the variables where necessary. This style is popular: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;?=$pageTitle?&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?php foreach ( $errors as $error ) : ?&gt; &lt;div class="error"&gt;&lt;?=$error?&gt;&lt;/div&gt; &lt;?php endforeach; ?&gt; ...
for the love of god please reformat that. Nobody is going to read it as a giant blob. http://hastebin.com/ &lt;-- paste it and post the link
I'm very sorry. I am at work and using IE7 and it won't properly save the page. Let me try something else.
try https://gist.github.com/ or http://pastebin.ca/ that should work in any browser 
How's this: [http://snipt.org/zwp2](http://snipt.org/zwp2) And also, thank you for your help.
better but there's no image tag in there. If you have an image you want to add, change `&lt;?php bloginfo( 'name' ); ?&gt;` to `&lt;img src="header_image.jpg" alt="&lt;?php bloginfo( 'name' ); ?&gt;"&gt;` or similar. Change header_image.jpg to be the link to your header image, wherever you have it hosted.
Thank you but it doesn't seem to be working. I'll try to again from home. If you want to see what I'm working on, here is a link: [Costanza Designs](http://costanza.mycollegefleamarket.com) I'm still working on a lot, so please be gentle. Haha.
As an alternative: instead of going to a monolithic code-base, I can highly recommend to split out certain features and put them into self-contained projects. Then the two codebases can add a dependency to these smaller projects. I guarantee that you will end up with a higher-quality code-base.
This is called [Modular Programming] (http://en.wikipedia.org/wiki/Modular_programming) and is what you (hostetcl) should be doing.
I was about to recommend this. Make one large project, with each smaller web app a 'module' that you can use. I too would like to learn more about how to do this with PHP. I sorta do it with include statements, but I know that isn't really doing it right.
bug report: php has no way to debug where memory is used, because usually(but not in this case) it throws away the whole interpreter ~100ms later EDIT: incase anyone is thinking this, mem_get_peak_usage and mem_get_usage are *not* effective means to determine where an application uses memory, where your objects might be holding onto references they no longer need, what class is building up a giant internal log that it needs to flush, etc.
I don't know why he's doing that way, I just append a get value onto the end of the action action="submit.php?task=login" then do a simple switch statement on task. This way you can use one file(controller) for all your submitted data.
Also to cut down on how much you have to type you can also show: if($counter == TRUE){ as if($counter){
oh god, please don't downvote me for this...i had/have no choice in this. - apache 2.0.52 - php 4.3.9 edit: this is my "real" job's setup. my personal stuff is latest stable nginx and php-fpm.
That's the jist of it, but I'm mostly curious if usort() and/or uksort() is still the preferred (or only) means to do this.
If all you're passing along is an array of objects, then usort is the one you'd want. And yes, these are the only options you have. That is, unless you intend to implement the sorting algorithm yourself. 
Anybody have any arguments for/against lighhtpd? Or is Nginx becoming the new default?
Thank you!
Boy, it's nice to see first-class functions in mainstream PHP.
Thanks for the link to the video, appreciate the response :)
I'm so sorry. I thought me being stuck on 5.2.x due to legacy applications was bad enough. :(
You'll go to heaven for that.
almost... XP with the latest and greatest IE7... oh, yeah, and my dev machine is actually a VM running on an overloaded ESX server... oh, yeah, and i have to remote desktop to that VM to do all my dev work...
I'm running lots of carts on a standard LAMP. So far it's fine. I don't have much concurrents requests. I'll upgrade to lightty or nginx when I'll have more clients.
all i know is it's hell right now.
You have all my sympathy
May I ask why they are treating you like this?
If the page can be accessed and viewed without actually logging in merely by guessing the URL it's not secure at all. My interpretation of OP's post was the following: **Database:** `username`,`password`,`accesscode` `someuser`,`hashedpass`,`abc383abc2` **Login Process:** * User visits: http://www.mydomain.com/index.php * User enters 'someuser' and a password * User clicks login * PHP does SQL query for username and the hash of the password. * PHP redirects to http://www.mydomain.com/abc383abc2.html **Problems:** What stops me just visiting: http://www.mydomain.com/abc383abc2.html Nothing. **What should you do?** Start accessing session data on the page. (`session_start()`) Does the user have any session data set? If they do, try and retrieve the user info. If we get a user back, show them the information assuming they are logged in. If we don't, they must be logged out. Show the login form. When they login, go to this page again. **Notes** * You can store the session ID in the URL instead of a short term cookie (the normal approach) - it looks like the following typically: index.php?PHPSESSID=a14465156cbd 
Unfortunately at that stage, I didn't have anything other than internal script benchmark timers to compare, but for example one of our more "intensive" pages would regularly take up to 1500ms to load on Apache (as a result of some pretty horrendous coding and an intermittently heavy load) but as soon as I switched to Nginx, the same page benchmarked at between 150-300ms, so around a 5-10 times increase in responsiveness. Once I ran kCacheGrind on the page and found the offending methods and tidied them up I managed to reduce the page load time for this page to around 50ms - 100ms, which was a pleasure. Obviously your results will vary depending on other factors, i.e., MySQL bottlenecks, available server hardware resources (RAM, CPU, bandwidth etc) and server traffic, but there was a definite and immediately noticeable difference on virtually all of our pages. What I'd suggest you do, and what I did before committing to the change on our production server, was fire up a new Ubuntu Virtual Box, install a basic LAMP stack and some of your code, benchmark and test it and then when you have a baseline, install Nginx and PHP-FPM and then simply disable Apache and rerun your benchmarks. That way you're only messing around with a local install and if it goes pear shaped at least you've only lost some time. The hardest part to get my head around was the move from httpd.conf and VirtualHosts to the Nginx server {} type config, especially setting up the section for the PHP handler, but it became easier after reading some tutorials like [this one](http://www.howtoforge.com/installing-nginx-with-php5-and-php-fpm-and-mysql-support-on-ubuntu-11.04). Good luck!
I'm currently working on rebuilding a fairly well-trafficked website. The old version took your #3 approach. It was decided that we would use something closer to #2 this time around, largely because QA's complaint is valid. It's also a pain for devs to change things, because it's really hard to find all the use cases for something when they're spread across multiple projects. From what I've seen, #3 is prone to spagetti code, especially if you have any inexperienced or incompetent devs on your team. That said, the duplicate code from option #2 is a PITA, so I'm not recommending either approach. Just take all the love for #3 with a grain of salt. If you can work out some hybrid approach, that might be ideal.
http://www.simpletest.org/ and https://github.com/sebastianbergmann/phpunit/
LAMP server goes live next month with Ubuntu 12.10. No extra stuff. I'm not familiar with much of the time saving additional software and I'm too busy with other things to learn to use them for now... Maybe in a few weeks I'll start looking for resources to help in that direction.
Constant horror stories over memory leaks. Whereas on one of my servers, with an uptime of 7 months, nginx is using as much memory as it was the moment it started.
Still on 5.2.13 here, however I've fought to get 5.3 in the Q1 Roadmap and 5.4 in Q2. Can only hope it does happen.
We're moving to nginx from lighttpd with our new hardware because lighttpd hasn't had more than bug fixes in well over a year while nginx is still trying new things.
Can you explain a little more about the "closer to #2" approach? How is the application structured? Edit: I ask because obviously you've gone down this road already. What things should I look out for? What things should I do instead?
Thanks for pointing Twig out! So you would recommend Twig to someone who's new to templates? I would like to read your article when it's finished.
I run some web servers for one of the largest companies in the world. I won't say which one but it's easy to find out. The team I work for isn't a UI team, they do Java development, so I was able to start with a clean slate and a lot of convincing to get Operations to support it. The redhat repositories we had in house only carried PHP 5.1, so it took a lot of work to get them to update to PHP 5.3 or let me download it myself. Now we're using Apache 2.2.15 on RHEL 6, Linux 2.6.32-131.4.1.el6.x86_64, with PHP version 5.4.10. I'd like to test out nginx a bit because Apache's load tests cap at 750TPS. My VM's nginx tests exceed 1300TPS with minimal changes. We have 5 servers in a pseudo-random round robin with no sessions. Theoretically, we can get 3500TPS from static content. For updating the servers we use Chef, pulling from a Git repo. All we have to do is tell Chef which tag to pull and the version is automatically deployed 5 minutes later, or we can force it to update. Deployments take about 5 minutes or less on a good day, but we're not building compressed files yet.
COBOL and FORTRAN also haven't had any new development recently, while they keep adding things to PHP. How is that affecting your decision process?
I don't see the relevance at all. What if I wan't to use SPDY. What if I wan't to do something as simple as proxy to a Nodejs server? lighttpd does not do either. Nor does it seem like it ever will. The web is evolving and if the software you use is not evolving with it, how can you?
Going down this road. I'm new to this project, I'm still learning about this stuff myself. Also, it's mostly undeployed, so the long term effects are still a mystery. The way it works here is that the site is divided into a handful of sections. Each section has a bunch of pages, and each page includes a few modules. Modules are self-contained, with their own server-side code, client-side JS and CSS. There are a few core modules that are used site-wide, and a few base styles and JS utility functions as well. There's an inheritance mechanism for modules that allows for some code reuse and configurability. That said, most of the time a module will only show up on a single page. If you want a module that does something similar to an existing module, you normally use the cut-n-paste approach. Sometimes it's worth doing up a base module with a few derived modules, e.g. same presentation, different data. Here's the exhaustive list of pros and cons I've run into with the #2 approach: **Pros** * Very few merge conflicts, which tend to be easy to fix when they do come up. * Don't have to worry about breaking someone else's code. * Very easy to track down which code is doing something, which is great for regressions and QA bugs. * For the most part, you can roll out the site one section at a time. * And as mentioned previously, QA's job is much easier. **Cons** * If there's a site-wide change, like a DB schema change or a new more efficient helper function, you've got alot of code to dig through and update. * **Code duplication**. That's a big one. In addition to the stuff everyone knows is wrong with that, it makes coding more tedious. Taken to extremes, you might lose your more talented devs. * Coding goes a little more slowly, because you're rewriting things instead of reusing existing things. The crux of the issue seems to be the tradeoff between dev time and QA time. Another way to look at it is that #2 is unmaintainable because it's not DRY, while #3 is unmaintainable because everything's so interconnected. Pick your poison.
My mistake, I misread your comment the other direction (that you were moving from nginx to lighttpd), I presumed for some reason because you prized feature stability above all else. That seemed bizarre to me.
&gt; "Good advice comes with rationale so you know when it becomes bad advice." nginx/php-fpm is not unilaterally the greatest solution to every single problem, and running an operating system which will not be supported in 6 months is not the best solution for every user or business.
Hm okay. Thank you for that. I'm convinced that I need to modularize the code base. Upon doing that, I can probably build separate web apps that will both share modules, but also they'd have their own set of custom fittings to make up for the high level differences. It sounds to me that if they're too separate, dev time could go through the roof, but if I'm not careful QA time could do the same thing. However, I guess that's the dance of it all.
Apache2, and mod_php .. because it's easy and works. The bottlenecks in my software is not processing. I always run out of bandwidth way before my sites start slowing down.
&gt; HTML is a stateless protocol **HTTP** is a stateless protocol
Depends on the server. Apache &amp; PHP for the light to moderate trafficked sites. nginx and php-fpm with memcached for the high traffic sites. High traffic being 240k-750k hits per day/10-30 GB per day. One of my clients is on an 4-core server with 8 GB of RAM and Apache with PHP. They have a couple of Zend Framework and a few WordPress sites. Although their traffic inside rate they sometimes get slammed via Reddit or when news related to their issue breaks. Last month they shot up from 30-50 connections per second to 12,000 per second. It held. 
&gt; VPS is your friend (= // what i like in my current job - we have dedicated servers Do you guys manage your own email services? If so what do you use? If not, what do you use?
&gt;switching to innoDB (from MyISAM) to avoid table locks How much more memory does MySQL use as a result? I've heard it has a larger footprint than MyISAM.
&lt;3
TIL the grass is not always greener. That madness has got to have an impact on productivity... It sounds so much simpler to actually implement the subnets for the real machines. 
&gt; That madness has got to have an impact on productivity... you have NO idea. &gt; It sounds so much simpler to actually implement the subnets for the real machines. we tried to tell management that we'd prefer to have a VM that ran on the production subnet for our email, web browsing, etc. and have our base machines on the dev subnet, but apparently they know better than us.
Bro do you even thrift?
* Debian * nginX * PHP 5.3 FPM * MySQL (separate server) I hope we will add varnish in the mix soon. Works like a charm for our Symfony2
I use roundcube.
I'd suggest round cube but have a look at AfterLogic WebMail Lite, it's free and quite slick.
You're absolutely right. It was late when I wrote it, and I was under the impression that it should be 0, -1, 1, but as you say, any number would do.
&gt;you have NO idea. Psh. Try doing the same thing in a .NET environment. Now THAT's slow.
Sounds to me like you're skipping ahead. You should make sure that you know the fundamentals before continuing on to the next thing. 
They're nice, yes, but unfortunately they're prone to over/misuse. I hope people will start to realize that lambdas aren't a one-size-fits-all kind of thing.
I use and develop with Nginx + PHP-FPM but at work I work the default LAMP stack available on Ubuntu 12.04 that my employer has running virtualized.
Ahhh, true that. Brain fart.
Thank you all for your suggestions. Prior to your replies, I'd already considered PHPUnit and SimpleTest. These would be perfect solutions if my web service was built upon a class-based architecture, but each php file is simply a script that runs for start to finish; there are no functions or methods to test. Clearly the issue isn't a lack of suitable testing frameworks, but rather my system. I haven't built the web service using a class-based architecture, which is obviously what these frameworks are designed to test. Instead, I'll rebuild the system the way it should have been built, and use the frameworks suggested. Thanks again.
In what way? I hadn't heard of Atoum before now.
[http://savannah.gnu.org/people/?category_id=1](http://savannah.gnu.org/people/?category_id=1)
I don't know. We devoted 20 gigs of memory to InnoDB, but I'm not sure how much of that is actually necessary, and I don't know how close or far memory is to being a bottleneck. Getting rid of the table locks was a tremendous performance boost, though. SHOW PROCESSLIST and profiling during high load times showed that we were wasting a lot of time waiting on table locks, despite all the clever tricks MyISAM has to prevent them from occurring.
Smarty is used in Prestashop (sadly).
How easy/hard was New Relic to integrate? Looking into it for a few projects of mine, but not sure if I want to invest a huge amount of time/money.
Roundcube ftw
Sorry for the late reply on this. Firstly: Yii is a great framework. It's solid, well developed and has an active community. I used is obsessively for 2 years - it was the only framework I used, and ended up developing 10 sites/applications (some of which were of considerable size), so I like to think I've got a good feel for it. My main concerns are that it moves slowly and has a very closed discussion around it's future. Any time a forum member asks a core developer a question, they always get a vague, non-committal response along the lines of "things are happening!". And I've tried to read-up on and tried to find out about Yii 2's progress for over 18 months, and appart from a single presentation, I know next to nothing about what's supposed to be a major release. In the same time-frame, other frameworks have gone leaps &amp; bounds. And at the moment, with things like PSR-0, 1, 2 &amp; 3 and Composer/Packagist starting to become more and more mainstream in the PHP community, Yii just feels a little too out there, doing it's own thing as it's own pace and it feels a little to closed &amp; insular. And that's a worry. For me, the thing to watch is Laravel. Version 4 is on the verge of being put into public beta. The documentation is available: http://four.laravel.com 
*sarcasm* Try SquirrelMail! It's great! *endsarcasm*
PHPUnit can be used for quite a bit more than unit testing. For instance, we use [the phpunit-selenium adapter](https://github.com/sebastianbergmann/phpunit-selenium) to use PHPUnit to drive higher-level tests. &gt; A very basic approach that I've considered would be to use curl (via the command line), and simply compare the actual output against the expected output. No reason you can't do that with PHPUnit, although I'd suggest you use [the PHP curl bindings](http://us.php.net/manual/en/book.curl.php).
Input -&gt; Processing -&gt; Output!
This would be a better question for /r/sysadmin. I've never used Zimbra as a client and only as a technician troubleshooting for clients; what /u/TransFattyAcid [is saying](http://www.reddit.com/r/PHP/comments/16ql98/open_source_webmail_clients/c7yiaaf) about little gotch-ya's is absolutely correct. If I were you, I'd be using Google Apps as /u/Cookizza [is now](http://www.reddit.com/r/PHP/comments/16ql98/open_source_webmail_clients/c7yg87d).
This is the current setup: * PHP 5.3.10-1ubuntu3.4 (fpm-fcgi) with Suhosin v0.9.33 * nginx/1.2.6 (looking forward to get OCSP stapling and SPDY to stable) * Redis server v=2.6.9 sha=00000000:0 malloc=jemalloc-3.2.0 bits=64 Added PHP extensions: * apc * igbinary * msgpack * suhosin * curl * intl * oauth * redis * gd * mcrypt * sqlite3 Some Configuration Changes: * apc.stat=0 * session.save_handler = redis * session.serialize_handler = msgpack * session.hash_function = sha512 * session.entropy_file = /dev/urandom * suhosin.session.encrypt = on * suhosin.session.cryptua = on * suhosin.cookie.encrypt = on * suhosin.cookie.cryptua = on
ubuntu 10.04 apache 2.2.14/mod_php php 5.3.2 anyone else here using mod_pagespeed + memcache?
My team also does .net :)
Horde is nasty, I can tell you that. Also — at last up until a year or two ago, no idea about the most recent versions — it's basically unusable on most mobile devices.
No problem. Thanks for the reply!
The dinosaur that I work with puts that on his mail servers. I hate it with a passion.
A good first project is to create a blog from scratch. Don't use a framework. You will learn close to everything you will eventually need to know. /close as in basic concepts
could be worse, could be horde
Both, depends on the requirement
Multithreaded Apache + php-fpm + Percona MySQL 5.5 + APC + Memcache front-end proxy + New Relic for server analytics. Basically, memcache caches every page that doesn't send the Pragma: no-cache directive (virtually everything except stuff like the order process), up to its Expires: TTL. Rock solid. Been able to support 500,000+ visitors/day with no problem. In order of importance for mob scalability: 1. Multithreaded Apache 2. Memcache PHP front end 3. PHP-FPM is a must for support of Multithreaded Apache and not including PHP w/ every static asset (css, js, etc.), 4. Percona, which is leaps and bounds better than MySQL when you use their XtraDB engine instead of InnoDB.
Regarding Percona - do you think it'd be easier to move from MyISAM to InnoDB to XtraDB or would it be worth while to go from MySQL straight to Percona?
That you can't run symfony
Just because everybody was giving links in english ^^
I wasn't directly involved. It looks like we just integrated a php module, and I'd wager that we also added an SSL cert.
Still store hash in DB and if DB is breached while the attackers take years to decrypt the passwords you have already locked them out and issued a site-wide password reset. The hashing buys you more then enough time between the breach and a site-wide password reset. 
Straight to Percona. XtraDB is a drop-in, binary compatible InnoDB replacement that solves a LOT of InnoDB's failings (including [table locks](http://www.mysqlperformanceblog.com/2012/08/17/percona-xtradb-cluster-multi-node-writing-and-unexpected-deadlocks/)). It also has a query analyzer that is better than anything you get via the costly MySQL Enterprise.
You do realize that MySQL 5.0 was released in December 2003, right? that's an almost 10 year old database server you got there, Chief.
Valid points. But if you take a look at how the newer frameworks are written like Zend2 and Symfony2, they're basically entirely object oriented except being stuck with the procedureal standard library functions.
Yeah I just realized that this morning and updated to 5.5 whats sad is that is what was installed using package resources so I had to manually roll it up.
Turns out it was register_globals. The php.ini file had to be in the same directory as the administration files. I had it at the root level.
You probably don't want to be turning this on. http://www.phptherightway.com/#register_globals
I had a couple problems: The first was that I had a difficult time Googling the issue since I didn't know how to clearly describe it (why I turned here). The second was that I had the register_globals declaration in the wrong location on the server. I was able to fix it. Thank you.
I even had the client call the hosting company to get an earful directly from the horse's mouth. They explained the security risk. He still wanted me to proceed with turning it on.
scary. :/
We use Apache 2.2 + mod_php to run a popular SaaS app with millions of users serving between 500-1000 requests per second spread over 3 servers. We have APC enabled and use redis liberally to cache certain data structures. Works fine for us - don't see a need to go with nginx or fastcgi.
Even if they did provide the same session id, they'd need to have the same IP address I believe. You can't store the session ID as the primary key, because it changes every time you visit the site.
Tell him no and do each variable manually. This is a really, really bad idea. If a hacker realizes he's done this his site *will* get hacked.
**If you have code duplication in your modular architechture, you are doing it wrong.** I didn't want to write a huge post here, but since "everyone" is stuck doing MVC with too much OOP, I suppose it's worthwhile: In a Modular design, each module should be doing one thing, and one thing very well. Think UNIX commands. However, modules *can* include other modules. For example, a module "search" (to search your DBs for clients, products, whatever) can be used by several other modules. As an example, in the business software I am developing/maintaining, there are modules for: * users (logins and permissions) * a "top" module for managing navigation * a "report" module through which all reports pass * a "query" module through which all queries must pass (heavily used in other modules of course) * a "selectitem" module for letting user select things in a form (not always resulting in a &lt;select&gt;) * etc etc *As you can see, some modules have a very large scope, others perform small tasks.* Modules can be object-oriented or not, but this should be invisible from the outside. All modules need clearly defined interfaces (input and output), and they can all be "unit tested" (but not necessarily in the traditional OOB way). Depending on your setup, modules could even be coded in a different language. An important thing to note is that modules are not separate according to MVC. In fact it is very much necessary for some modules to have code for both View and Control.
If I could make a simple suggestion that will help save you time in the future: make a intra- or internet accessible php file that's simply: &lt;?php phpinfo(); ?&gt; Don't look at config files for the culprit; ask PHP directly for its configuration by using phpinfo. This will very quickly expose lots of potential php.ini or other configuration issues. If you modify your config file, restart the web server, and the phpinfo doesn't change, well... you know what the problem is. * edit: wish I could figure out how to do the cool code blocks. 1^st world newbie problems.
Hey ... what's wrong with SquirrelMail? My ISP offers 3 options, and I choose SquirrelMail. It's simple and I like it.
4 spaces or a tab before any lines of code ;)
Right we operate in containers which are like virtual machines but slightly more efficent. Varnish takes a request and passes it to NGIX for static assets or Apache for dynamic content. We have Master/Slave replication on databases and dual webservers. We utilize Gearman for offloading jobs and Memcache for application level caching. I have no access to any of the servers just a puppet controlled vagrant box to develop on. Software wise we use Zend + Doctrine/Bisna + Backbone + Bootstrap + Twig with Jenkins/Capistrano for deployment and Git for version control. Quite pleased with the stack :) Note: Hilariously we have no byte code cache in place xD.
So the theory goes, and it often works in practice. But I've come to believe that saying "code duplication is bad" is much like saying "tables are bad". While mostly true, there are exceptions. For tables, you should still use them for tabular data. I never thought I'd find an exception to the code duplication rule, but it does seem to have come up. I think the big problem for us is that the site isn't as uniform as it should be. Everything that uses a core module wants it to behave a little bit differently. So you either end up with working around core modules in the other modules, or you end up with a hairy special-cased nightmare in your core modules. tl;dr Code duplication is wrong, but sometimes (rarely) it's the lesser evil.
Unlike .htaccess, the php.in file does not get inherited by child directories. It is one reason to keep the number of entry points to your PHP application down to an absolute minimum.
And don't bother closing the PHP tag: &lt;?php phpinfo();
Yes, I am definitely older than you. I just don't like the interface of RC, it is, in my opinion, a little too polished; I know I am probably in the minority. This, probably, explains why I use XUbuntu and not another OS. I wanted to see if your objection was based on appearance or functionality.
I would try and do this outside the application layer if possible. You do this in the database layer using type ENUM in MySql and sort on that. 
Seeing it was written on paper was the only thing that made me want to watch the video. 
Why?
I swear to all that is good and holy: there're four spaces before all three lines of the code thingy.
&gt; Because it's different, I don't really care to watch people type code. lol but you just did. It just so happens that he used a pen instead of a keyboard. &gt; Why not just make a blog post or something, why do I need to watch of video of someone typing when they can just type it up and save the file they were typing anyway? Why do I need to watch a video of someone writing on paper, just type it up and save the file. Really, what do you have against the keyboard? I mean, are you saying you like the video because it was written by hand or are you saying you just don't like the video?
I like that format - it definitely helps brand the videos. It also got you to talk about the video.
Or build a website for a friend or a family member :)
There are a lot of people who talk about code while you look at code. The resolution is often funky, sometimes its hard to read, one video looks much like another, and nobody really remembers it. This is much closer to your teacher writing on the chalkboard. By focusing purely on the content at hand in massive letters its very memorable. Plus he annotates his points as he goes, meaning he doesn't just have to write in comments above and below which would be hard to pair up. As an added bonus, I'd say this is an excellent way for a deaf person to learn too. 
That must have taken a lot of time to put together in that format, but it works well and looks good.
None of the points you mentioned cannot be done with more legible fonts on a computer, it's just that most people doing videos don't zoom way in on the content. (Also, he's still talking about code while looking at code he's just doing it with a fucking pen. How is it different?) And how does this help a deaf person more? He still talked while writing.
Not to mention the diagram of the for loop execution. 
First of all, calm down. You're acting like he's shoved that pen directly up your ass. Let's discuss the main point: Annotations. Show me how you handle free-form annotations in your IDE in such a fluid way. Also, if he is not running the code why would he need it to be in an IDE?
lol did you just "u mad bro?" me? Who said you had to do it purely in an IDE/text editor? You could do editing after the fact. You also ignored how is this better for deaf people? I mean, you could even go with the Khan Academy approach and use tablet pen drawing over real code. I just find pen/paper is extremely odd approach. If he did it, as suggested below, just to be different and get people to talk about how different this style is then shame on him. As a perfect example of this done well just look at the Vimcasts videos.
oops.. thanks i didnt notice that :) 
Did he use tabs or spaces?
I have already said I figured annotations would help deaf people. Just looking directly at code by itself is not very helpful for somebody who cannot hear what you are saying about that code. The theory is lost, and the explanations are useless. As I have also already said, I assume catering to the deaf is just a side-bonus and not the original plan. If it's done to be different then why is that bad? If every comedian told the same joke, would you be interested? If every actor played the same part, would you care? If somebody uses a slightly different approach to make you link to and talk about his content, is that bad? And if you think it is, then why? Vimcasts are showing you code in vim because they are showing you how vim works. When talking about theory of code its perfectly acceptable to not write in a code environment. But I get it. You don't like it. To each their own.
I've said I think 3 times so far that doing it in a text editor/IDE does not preclude well-designed annotations, if it's possible on paper, it's possible on a computer. &gt;If it's done to be different then why is that bad? Being different isn't bad, doing thing solely because it's different so you can get more views instead of on the merit of the content is bad, especially if doing it more along the norm would have made it more suitable to its purpose (education.) It's relevant that all of your examples were entertainment fields, not education. Again, I didn't say doing this on a computer precludes going outside a text editor, editing annotations in post, using some other software to show diagrams, etc. In fact I have said the exact opposite since my first comment. And at no point did I say I didn't like the video. Hell, I didn't even say I didn't like the style, I just said it wasn't particularly suitable to this content. 
I'm a big fan of breaking apart long lines in order to achieve readable code. For query strings, I usually line break before the SQL keywords, like so: $query = ' SELECT COUNT(DISTINCT v.vote_ip) AS total, v.character_id FROM votes v INNER JOIN round r ON r.round_id = v.round_id WHERE r.round_group = :group AND r.round_tier = :tier GROUP BY v.character_id ORDER BY total DESC LIMIT 1 '; If I have an extraordinarily long conditional (or ternary), I'll usually break it into extra readable variables on separate lines: $char1_votes = (int) $row-&gt;char1_votes; $char2_votes = (int) $row-&gt;char2_votes; $char1_id = $round-&gt;round_character1_id; $char2_id = $round-&gt;round_character2_id; $retVal = $char1_votes &gt; $char2_votes ? $char1_id : $char2_id; I usually prefer to write my code as easy as possible to read. I usually end up with a lot of extra variables that don't exactly help memory usage. If the need arises, I'll go back and condense my code for sake of performance later.
For queries I usually do: $query = 'SELECT COUNT(DISTINCT v.vote_ip) AS total, v.character_id ' .'FROM votes v INNER JOIN round r ON r.round_id = v.round_id ' .'WHERE r.round_group = :group AND r.round_tier = :tier ' .'GROUP BY v.character_id ORDER BY total DESC LIMIT 1'; //The . are supposed to line up with the ' before SELECT Even though it's technically faster to not use concatenation, I think it fits better, and I don't end up sending all the whitespace to MySQL. For long ternaries I do: $aReallyBigNumber &gt; $aReallySmallNumber ? 'yes' : 'no'; //the colon is supposed to line up with the question mark, but it isn't for whatever reason in the code display or sometimes but really it depends on what is going on around it where I end up lining up the second part. Either way I just make sure to line up the ? and the :. $blah &amp;&amp; $blah || $whatevermakesitlong ? 'yes' : 'no'; 
So instead of pen and paper he should have used some software which would allow free form expression just like pen and paper? What would be the point. &gt; It's relevant that all of your examples were entertainment fields, not education. Educational material can be entertaining too, and I think this is kind of the point. I've recorded hours and hours of educational screencasts and they are extremely hard work and extremely boring. This is hard work, but I'll bet it was fun to do and it's fun to watch. Is the style detrimental to the content as you suggest? No, I learned from this. Would it have been better done with some fancy powerpoint/illustration software? I don't see why it would be. If you don't like the style or the video then fair enough, thats your opinion. But if you do like the style as you now suggest then what are we even talking about? It's like you feel wronged for Anthony being creative. Who gives a crap about his motives? Life is not a conspiracy theory.
I'm going to get flamed for this but multi-line ternaries are often not a horrendous solution: $retVal = (int) $row-&gt;char1_votes &gt; (int) $row-&gt;char2_votes ? $round-&gt;round_character1_id : $round-&gt;round_character2_id; Thats perfectly readable to me your milage may vary.
No flame from me. I've been known to do this in code.
[nocc](http://nocc.sourceforge.net/) is cool but development is paused.
I personally use the "Syntastic" vim plugin, which does something similar but also works with JS and many more languages. It's also easier to set up. Worth noting that this plugin was written by "scroolose", the author of NERDTree -- pretty much a quality guaranty. Seriously. If you didn't give it a try yet, do it now and thank me later. 
&gt;"The value of the AUTO_INCREMENT field that was updated by the previous query. *Returns zero if there was no previous query on the connection or if the query did not update an AUTO_INCREMENT value.*" and &gt;"The mysqli_insert_id() function returns the ID generated by a query on a table with a column having the AUTO_INCREMENT attribute. If the last query wasn't an INSERT or UPDATE statement or if the modified table does not have a column with the AUTO_INCREMENT attribute, this function will return zero. " Are you sure these requirements are being met?
The auto_increment value is definitely updated. And there is an query on the connection. I'm confident in the logic of the code. As I said it works on the other box. Thanks for taking the time to reply. Much appreciated.
Can you test it outside of the application? Just a simple script that connects to the DB, sticks a row in and var_dumps $mysqli-&gt;insert_id?
And which query is that? And is the query actually updating anything? If you try it in a SQL client, it should tell you the number of rows inserted/modified by the query. 
+1, the difference lies in the complexity. That's not a particularly complicated ternary, it's just long. When you're nesting them four levels deep though, that's when you need to reconsider your use of ternary.
Never go two levels deep. Otherwise Leonardo DiCaprio and Joseph Gordon-Levitt will turn up and talk gibberish while being chased by a train or some shit.
I found it clear, focused, and fun to watch. That's me, and I have no need to defend that view, so I won't.
$mysqli-&gt;insert_id returns 0. Does that help? 
The general structure of each API call that fails is. The iOS sends a POST to the API The API (built in PHP) inserts the information into a Table which has a Primary Key that auto-increments. The API then uses $case_id = $mysqli-&gt;insert_id;, obtain the value of this primary key. This value is returned to the iOS app. Important - $case_id is being returned as 0.
http://www.sugarcrm.com/products http://www.sugarcrm.com/download Community edition is free.
Wordpress or wiki would work just fine for you. Start with one of those and save yourself a ton of time. 
[Drupal] (http://drupal.org/) + Modules should be able to cover all your bases. Its pretty easy to build modules for as well, so if you need to do something not covered by an existing module you can just make your own, which I think is easier than building the whole thing from the ground up. Might be a day or so of setting it up with all the modules you might need, so be prepared for that, but I think you'll be happy with it when its done.
I just got doing something similar. We needed an intranet site that had resources for active projects, active professional services, teams, and people. Wordpress was able to do all this with a combination of custom post types, custom post meta, custom taxonomies, and a whole slew of new functions. While some of it was a bit challenging, given your skillet (and the documentation on Wordpress) you should have no issue. This should save you heaps of time vs building from scratch. 
Yes, I understand that, but you're missing the point: Is the SQL query actually affecting the data stored in the database? Also, pastebin us some code.
Always. I'm using Php Storm from JetBrains and it's awesome. 
He might want to start with OpenAtrium, or Drupal Commons.
register_globals isn't great, and you shouldn't use it. However it doesn't instantly make any site vulnerable. That's just useless parroting with no understanding.
It's like an unlocked door. You might have anything worth stealing inside in a safe but chances are if you're dumb enough to use register globals, the rest of your site/script is poorly written and vulnerable. 
No, it really isn't. Whether or not it makes code vulnerable has a lot to do with how you code. It isn't a magical "make site vulnerable" switch. That said, I agree that people shouldn't use it - particularly if they're using it with code they don't understand. It actually is possible to write code that is secure with register_globals on, but it takes more effort and discipline than most people have. If you write your software properly, whether this directive is on or not shouldn't matter.
Links for the lazy: http://openatrium.com/ and http://www.acquia.com/downloads Thank you for specifying going to give these a shot. Any other recommendations would be greatly appreciated :-). I'm looking for stuff related to programming just to keep track of my projects and tasks.
If you use php codesniffer with psr2 set you can detect this line length issues automatically so you can fix them.
This. Just develop something that has been done hundreds of times. You'll encounter issues and eventually solve them. As you get better you'll end up with loads of ideas or finding communities online that you would enjoy contributing to as opposed to doing it for practice. I believe contributing to open source is something that should be done because of a passion of solving a shared goal.
Yeah, that's how I cam across the problem and was faced with the fact that I don't really know how to cleanly shorten my line lengths.
It's a personal preference. Use what you enjoy using. I have never been a fan of IDEs and so I use Sublime Text 2 and other terminal commands when I develop. I tend to feel that picking the best text editor means I get what I consider the best for a specific task and then I can choose other pieces of software the specialise at other tasks (tests, auto reload, etc)
I like this answer the best
If anything an IDE should help you learn the language better, not make you forget syntax/functions. A good IDE will help you learn function syntax, complete custom functions/classes, know where asset files are located, and tons of other productivity increasers. You should try a few out for a couple days/weeks and see what features you like best. In the past few years I've probably used 5+ IDEs, now using Aptana Studio. It does everything I need without having much overhead.
The PHPStorm bèta programme is free. 
Here goes my shitty implementation, doubt it works and probably could be optimized a lot better but meh. Can set the limit and checks to make sure there isn't a repeated item. http://pastebin.com/h0mcgDS2
You didn't understand my analogy at all. Yes you can write secure code with register globals, just like you can lock up all your valuables with your front door wide open. It's still really stupid to do so. 
Depends on personal preference. I tend to use and IDE when working on large projects, simply because you get abilities like jump to class, and function reference, which I find especially helpful when working with frameworks like cake that have lots of undocumented features, also, debugger integration rules! For single scripts, I tend to use a normal text editor, if it is more complex, it should probably be part of a larger project.
It's a bad analogy, and it doesn't describe the situation at all.
I know you said you don't care about values in your array, but you should. `isset()` will return `FALSE` if the key you're referencing is set to `NULL`, leading to false negatives. I'm not sure how the speed compares, but I use `array_key_exists()` instead for that reason. **Edit:** Since you changed your arrays to non-`NULL` values, and if your values will **always** be non-`NULL`, then `isset()` or `array_key_exists()` is probably the best way to go. I was playing around with if (isset($id[1])) { // Code } versus if ($id[1]) { // Code } but the second one throws a notice if `$id[1]` is undefined. I personally use `array_key_exists()`, but to each their own.
It's actually a perfect analogy. Normally just because I put "&amp;foo=pizza&amp;" or submit &lt;input type="hidden" name="foo" value="pizza"&gt; doesn't mean that the script will have $foo == 'pizza'. Turning on register globals unlocks that door. It lets me define any variable in your script, at least initially. Yes, you can manually initialize every value, and a well written script probably won't be vulnerable because it won't be using a variable without making sure it's initialized first. But, if you're a bad enough programmer that you're using register globals, you're probably bad enough to make the mistakes that lead to those vulnerabilities (using a variable which may be uninitialized.) The fact that you're even getting into this argument with me tells me you're not a very good developer. Because this is not an arguable point to anyone who knows what they are doing. It's really, really obvious.
 $items = $feed-&gt;get_items(); shuffle($items); foreach ($items as $item) ... 
While not an exact match for what you're looking for, [Kurogo](http://kurogo.org/home/) can do what you need. Kurogo is an open source middleware framework. While it's current templates are designed for mobile devices, you could easily create new templates to work with a desktop environment. There is a directory module (hooks into LDAP, AD, etc), can have ACLs based on users or groups, has a calendar module used to display iCal feeds, and is highly extensible. You could also use Kurogo simply for a mobile version of your site. Disclaimer: I am a Kurogo developer. Let me know if you have any questions about it. [On Github](https://github.com/modolabs/Kurogo-Mobile-Web) Disregard the dates of the last changes we have a private repo we develop on and it's currently still under active development.
Laravel looks pretty nice, hadn't seen it before. We run our own in-house framework at my office, but definitely gunna be taking some of their ideas into our next iteration. The only disadvantage with their routing system, as you mention, is being required to define every single route. Which could get a bit annoying with larger sites.
Reread my post. Your helper function doesn't fix the potential problem I pointed out. **Edit:** What I mean is: If your array is going to contain any `NULL`s legitimately, then `isset()` will not return proper results when it is.
I'm thinking more about the readability of the array, as it seems wrong to have an array with a lot of keys and all the values set to 0. (As I forgot isset() can't handle NULL, and is much faster then array_key_exists() as far as I know)
I recently changed from NetBeans to PHPStorm, it's an amazing IDE and it has a huge amount of features.
but he wants them limited and non repeated.
I've been using Active State: Komodo Edit for about 5 years now, before that it was plain notepad. Komodo seems pretty good for everything I've needed it to do so far.
That's what I use google for. I don't want to auto complete functions and shit, that's what killed me with dreamweaver, I became so reliant on it.
That's [a one-line fix](http://laravel.com/docs/routing#controller-routing). `Route::controller(Controller::detect())`
Install a Linux VM and run it from there.
Have you looked into http://www.wampserver.com/en/ or http://www.easyphp.org/ Do you need php to be running on IIS?
Ah, well there you go. Nice.
Once you start working on code that is complicated enough to need a debugger or index your functions/methods it might be worth reconsidering your coding environment. Personally, my "IDE" is VIM, xdebug and ctags. Eclipse or anything similar just slows down my coding, but you should pick tools that compliment your work style.
&gt; "**an** IDE"
shuffle() keeps them from being repeated, and you can limit it with array_slice(): define('NUM_ITEMS', 20); $items = array_slice($feed-&gt;get_items(), 0, NUM_ITEMS); shuffle($items); foreach ($items as $item) ... 
Such well thought out decisions. Just another example of the flexible routing I mentioned. You're not left high and dry if you want more complex routes.
&gt;Yes, you can manually initialize every value, and a well written script probably won't be vulnerable because it won't be using a variable without making sure it's initialized first. right. you should be doing this anyway. &gt;But, if you're a bad enough programmer that you're using register globals, you're probably bad enough to make the mistakes that lead to those vulnerabilities (using a variable which may be uninitialized.) If you're a bad programmer you're going to do bad things regardless. It shouldn't be the language's job to baby you. &gt;The fact that you're even getting into this argument with me tells me you're not a very good developer. Because this is not an arguable point to anyone who knows what they are doing. It's really, really obvious. At no point did I say you shouldn't turn off register_globals. What I did say is this: * it doesn't instantly make your code vulnerable, that depends on the programmer * if your code is properly written, it won't matter if it is on or off You might try actually reading what is being said before getting excited.
Perfect! I was trying to make it too complicated and this is short and straight to the point. Thanks a lot! 
It's only tedious because you're attempting to make it sound like I'm advocating register_globals when in actuality I'm advocating settings agnostic code. It gets much less tedious when you actually read what I'm saying instead of trying to push it through your alternate reality filter.
&gt;Why does it have to be in an array and not in a table? Could you elaborate? &gt; array_flip() This I didn't know about, I´ll look into that.
By arguing with me you are by default arguing for register globals because my only point was that it's shitty and he shouldn't use it under any circumstances. I'm done with this back and forth, it's gone nowhere and you seem to be about as dense as a petrified log.
always is a very big word. an ide can be the correct tool to a problem but it doesn't have to be by definition. i must admit sometimes i miss a few IDE features like intellisense but i feel way more confortable coding with my texteditor (sublime text 2) maybe someday i will be converted but until that day STRG+P and sometimes STRG+SHIFT+F are a price for not using an IDE i am willing to pay in favour for a good texteditor 
i can't imagine not using ST2, it is like my swiss army knife now
Until a few weeks ago, I thought the same way. But then I tried PhpStorm, and the greatest features compared to ST2 (with all packages): real code completion, phpdoc2 support, changable key mapping, and code smell reports. The list continues. If any of it scares you, disable and start using features as you go. Same goes for the UI. If you haven't tried PhpStorm, configure it and really give it a chance to impress you. "Always" sticking to ST2 then you're really missing out.
i tried it. it didn't change my mind. i need my ST2 features way more often than any IDE features. I tried almost everything, back then when PDT was a thing, Zend Studio, more than enough Eclpise mutations... it is just not for me. But hey as long as i get my shit done quick :)
Seems like how I'd do it. Keep your IDs as keys, use array_key_exists or isset(). Fastest and cleanest method. Other ways I can think of to handle it that isn't convoluted and wasteful would be to write a class to handle your data. It would really just be an OOP wrapper for standard array functions...but it would look prettier. I'd be wary of array_flip() mentioned in other comments - you could lose keys if they have the same values. And array_exists is probably no faster than array_key_exists. 
&gt; Could you elaborate? He means a database lookup. If you ever need to update the array then you will not have to delve into the code. Also, if the array gets *big* then it might be quicker. &gt; I don't know the cost of array_flip It's quite fast, but dealing with large datasets it would be, as you suggested, easier to work with a database set.
&gt; until that day STRG+P and sometimes STRG+SHIFT+F Sorry, what? Are those keyboard shortcuts? I've never seen STRG before. Is that CTRL in another language?
oh sorry yes, its german. my bad 
Not open source, not PHP, not MySQL, not at all what OP asked.
I wasn't aware of that, I learned something today !
I have a similar function which does pretty much the same thing, except it expects a $_GET/$_POST/$_REQUEST key and doesn't allow a custom function to be called. It's great and makes my life a lot easier.
first of all, NO $GLOBALS: function ($sortBy) use ($sortValues) { return in_array($sortBy, $sortValues); } second, it would be shorter to use smth like function getValue($key, $default = null, $validator = null) { if (isset($_GET[$key])) { // etc } // all other stuff } and its usage: $list['start'] = getValue('start', 0, 'is_numeric'); ps. https://github.com/symfony/HttpFoundation and its ParameterBag should be awesome for all of the GET/POST/etc stuff, escpecially since it's on Composer
Beware, the army of Laravel fanboys is coming :)
isset() check is enough to be sure there won't be any notices, cause even a defined var $var = null; will return false for isset() check. agree about references though.
The speed difference is so negligible it's hardly worth noting. Selection should be made solely on the basis of functionality.
Wamp did the trick after disabling IIS, thanks for the tip
Haven't used it yet, but I'm sure it's awesome (=
Article struggles to make a point beyond "even good frameworks can have vulnerabilities regardless of what language you use".
No worries, glad to help out. This problem bit me in the ass long ago, so I'm happy to pass the knowledge around.
No problems, I was merely curious.
It's a bit of a shallow article that essentially says "debuggers are great! I wrote a debugging client! Everyone should use a debugger!" but doesn't get much deeper than that. It's too bad, really. A lot could be said about how to debug code using these tools.
Don't think that is true. ASP is a Microsoft product, PHP is open source software. Generally Microsoft does not like to bundle its software with open source software. XAMP is the same concept as WAMP although it has more components like TomCat, Perl and more.
I stopped reading the instant I found codeigniter on that list. Ironically the button which should go to the CI project page sends you to the zend framework page instead.
I care more 'bout CI being TOP-3. Yes, it's easy to learn and it's popular (at least was). These are the only important CI's features. Its small footprint (another feature, for example) is negated by the amount of code u need to write for it to become smth useful.
I use Aptana IDE, while i love most of it, i have one little problem with it... the Remote hosting, and syncing of files is horrible, but better than some of the other i have used, including netbeans. If you work on a local machine, syncing shouldn't be a problem, and i would highly recommend you to at least give it a try.
It's creative, but I wouldn't want to work with it. I think you'd be better off just using the ternary operator syntax. For example: $x = isset($blah) ? $blah : false; // or... $list['start'] = isset($_GET['start']) &amp;&amp; is_numeric($_GET['start']) ? $_GET['start'] : 0; Accomplishes the exact same tasks with the same amount of simplicity, and isn't difficult for other developers to read. But by all means, if you like doing it your way, and you don't plan on sharing your code with others, then there is certainly nothing wrong with it.
Thanks, didn't know about this one. Seeing a few of the options reminded me that there's a lot of functionality that I haven't added yet. I'm hoping to add a bunch of features in the near feature. Thankfully, the new [Reddit API documentation page](http://www.reddit.com/dev/api) makes this a lot easier than before (i.e. not having to snoop the ajax requests from your browser).
I find that when I was learning PHP I relied more and more on the IDE. It's very helpful because often times you don't know how things connect, or the names of things. IDE's are very helpful in that method. As well, the ease of integrating testing and debugging makes it useful. Since it's so easy it becomes a habit and then if you move away from IDE's (such as Sublime Text or even Notepad++) you'll take the time to set that functionality up - often it's a bit of a hassle.
Best PHP IDE I've ever used. Phpunit support is awesome in it, as is x-debug. It's just all round the best IDE I've ever used. I feel sorry for people who use dreamweaver and stuff like sublime text 2 instead of a proper IDE like PHPStorm.
Just as a FYI, PHP on IIS is best set up with Microsoft's [Web Platform Installer](http://www.microsoft.com/web/downloads/platform.aspx) if you really need to use IIS.
Don't do this. Build a proper responsive website which adapts its layout to the available space. 
I've thought about that as well, but then I come back to the thought, how will I separate desktop only features from the mobile site? I'm thinking you mean to just keep one file and serve the appropriate CSS? If so, I'd have to test ShowMobile when creating navigation menus and some other pages.
Have a look at [Twitter Bootstrap](http://twitter.github.com/bootstrap/). If you're looking for something that is responsive / + easy to plug-and-play, Bootstrap is great and easy to maintain. 
Responsive design is the practice of serving up the same page for all its visitors, regardless of what the browsing medium is, but adapting the layout to fit the available space by utilizing media queries. There is no back-end (or any) code involved: It's all CSS. If you're going to create a dedicated mobile website as you've proposed, you have a number of questions you need to answer: 1. Just what *is* mobile? (hint: it's a moving goalpost) 2. How do you plan on distinguishing mobile visitors from non-mobile visitors? 3. New devices are being released everyday. How do you plan on keeping up? These questions aren't an issue if you're building a mobile first responsive website. 
I use an IDE 99% of the time. The breaking point is when you're spending so much time getting to and/or trying to find files that it is detrimental to your coding.
Well, firstly I'm confused because your example after your first code block doesn't make any sense. How can &gt; $x = v_isset($blah); be equivalent to &gt; if (isset($blah)) { $x = $blah; } else { $x = 42; } when v_isset() is only capable of returning its parameter, or false, and there's no mention of 42? I'm pretty tired but... I just can't see it. Secondly, passing by reference... really not great. Adds a whole bunch of confusion to lots of things. It might *seem* neat, and sure in this instance and with these examples it *seems* harmless - but if you get in the habit of passing by reference, you'll do it elsewhere, and things won't go so well. As someone who's had to debug/refactor code from a coworker who liked passing by reference, I'm speaking from experience. It's a right pain in the ass and having to trace variables through different files to find out what happens to them is not fun.
there's really no faster way to work than using sublime text 2, even installing plugins is like 5 keystrokes.
shorten? yes harder to read and follow? yes does it make any fucking difference? no
&gt; I guess I'm not familiar with it because I've never had good experience with CSS - I'm more a get things done behind the scenes and not care what it looks like kind of person. Then hire a designer. &gt;I came across this that I'm going to download and test around with. as well as @onefingerattack suggestion. Here are my thoughts about CSS grids: http://www.reddit.com/r/web_design/comments/15svp9/grid_frameworks_are_not_semantic/c7puhfu?context=3 A lot of the same arguments also applies to twitter bootstrap in general as well, as it keeps a lot of presentational stuff in the markup rather than in the stylesheet. 
I agree with this. I've been writing a new system this week and have lots of similar code in places; I wondered about replacing it with clever functions, but my slightly longer way of doing things is much more readable.
Yes. In fact, do it, then when you're done and you've learned a bit, look at how much it sucks and do it again. Rinse and repeat until you find yourself reading stackoverflow discussions about `session.gc_probability` at 3 in the morning.
Yeah each EAP update extends the trial! 
Small mistakes I noticed: At 1:50 - It says 3=code and 4=next but it is the other way round.. also the voice first says next and then says code which suggests, that the audio script is right. At 5:10 - $it = new CallbackFilterIterator($it, $callback); Would be better to give it $array as first argument to make it clear. Besides that I very much liked how clearly he expressed the ideas :)
I could go into specifics but only through PM. Just seriously, do not purchase from them as there is so much just wrong and no idea how they have clients, but I guess hell the upper management purchased their software where I work, so their sales department must be amazing
After learning some SIMPLE short cuts, I am in love with it. When using the sFTP plugin ($15.00) it was so simple to setup. Complete love for this IDE (not really an ide, just over powered notepad, like UltraEdit32 and Notepad++)
you need to write about strace if you really want to show that you are into debugging, that shit will blow your mind
Possibly [Joomla](http://www.joomla.org/) + [Community Builder](http://www.joomlapolis.com/) + Some calendar plugin for events. There is a couple plugins that hook directly into Google Calendar and work effortlessly. 
I also started using [foundation.css](http://foundation.zurb.com/) instead of bootstrap. I found it easier to learn, less features but well implemented.
Yes it is good reasoning. If I pass it something written as hex, or other notation you'll get an unexpected input. Additionally, I didn't say use is_int(). is_int() wouldn't work properly since incoming parameters can't be integers.. You should be using filter_var().
I'm not saying what you did was particularly bad - only that there isn't a whole lot of meat. It may convince someone they should use a debugger but it doesn't really help them use a debugger. I think the reason so many novice to intermediate level guys don't use a debugger is because they can't figure out how to set it up.
&gt; Yes it is good reasoning. If I pass it something written as hex, or other notation you'll get an unexpected input. No. YOU might get unexepcted input. If the input can be treated as an numeric, it's validated by is_numeric. Yes I could have phrased it better. I'll edit it. You are confusing the meaning of "validation" and I was pointing that out.
&gt; The breaking point is when you're spending so much time getting to and/or trying to find files that it is detrimental to your coding. Exactly what I think, and I think OP should read this.
consolas is nice, been rocking [ubuntu mono](http://font.ubuntu.com/) lately though.
I bounce between Sublime Text and Netbeans. * Sublime for when I just want to write some code or HTML. It's a superior text editor to Netbeans. * Netbeans for when I need to use its extremely powerful and usable debugger.
And then you find Package Control and realize you can have all those features without leaving the sweet embrace of ST2. http://wbond.net/sublime_packages/package_control I've been told it has improved, but at an old job everyone was raving about PHPStorm. I installed it and it immediately failed every test I could throw at it. Control + Scroll changed font size. I would sometimes scroll without having quite released control yet when I got going fast. It knocked me out of my most productive times. Okay, can I turn that off? Nope. There were 400 pages of options, but that one wasn't one. Can I at least revert back to the default text size so that every single file isn't a different font size? Can't find that either. Ugh. I have such a bad taste in my mouth from the one time I tried using PHPStorm.
It is even worse for java. IntelliJ beats eclipse in just about everything
...That does seem better
Is this for a class?
The pass by reference is required to use isset() on the passed variable, otherwise you just get an invalid variable message.
The second point is why he's using references. You can pass in *references* to non-instantiated variables and it won't trigger a notice until it's accessed in the function. So his code works perfectly, doesn't trigger notices, and is probably one of the few uses of references that make sense in PHP. 
This seems more like a SQL problem than a PHP problem. Without knowing how exactly you structured the data model, it's hard to provide an actual answer. So, if your data model includes a relation "Like" with a "thing_id" and "time", you might write a query that looks something like: SELECT thing_id, COUNT(thing_id) as cnt FROM Like WHERE (UNIX_TIMESTAMP() - UNIX_TIMESTAMP(time)) &lt; (60*60) GROUP BY thing_id ORDER BY cnt DESC I didn't actually run that query, so you might need to debug. But, if I understand the problem correctly, that would produce a list of thing_ids in descending order of the number of likes in the last hour. Does that make sense?
What kind of site is it? If it's on shared hosting, I would look for pages that have been modified and have extra stuff hidden in them. Definitely look for files with server-wide read/write access. If it's Joomla/Wordpress/Drupal, make sure the underlying CMS is up to date and that any plugins you've installed are up to date. Look for ones that might have vulnerabilities. How to tell would depend on the CMS.
do they always have one out or are there pauses between releases? I dont mind beta testing it but I'd rather not get used to it and then get cut off because there's no beta out. I'll download it anyway. Hope I can get adjusted to it. Usually I don't get much help from my editor, but I've grown very adept at using all the editing keys on my keyboard to speed up typing. Ctrl+arrows, home/end/del/ins, shift+home/del, lots of combos that I rarely ever see anyone use :)
It's on a VPS, and the CMS is some proprietary system by the company that designed the site. It almost looks like you would need internal knowledge of how the CMS works to exploit it like this. I've checked the ssh logs, and I'm the only one who's been on there.
Hey, thanks mate! But what's cnt supposed to be? Content?
Nope. Small project I'm working on.
Custom proprietary CMS are almost never a good idea. There is no such thing as security through obscurity. I almost guarantee there's a bug in there somewhere that someone exploited. If there's a file upload form, definitely look where it's saving files. Check the PHP configuration and make sure uploaded files don't get placed in publicly accessible web folders. (For example if your webroot is /var/www/ then php should be saving files in /var/uploads/ or something similar - then someone uploading a file can't immediately access it) Those are the first things I'd look for. Also check the timestamp on that backdoor file and see if you can find what pages were accessed through apache's access logs around that time period. That will help you give a clue as to what might have been targetted.
I just used it as shorthand for the count of likes in that table, but you could have called it whatever. And, again, without knowing how you're structuring your data model, it's hard to write a query... so, your mileage may vary :)
metasploit and stuff like that can be used to rapidly test sites for vulnerabilities. someone probably found the hole during a scan. it doesn't have internal knowledge, just brute force. notice the first base64 encoded part: `news:{action=add}7v\ X][ێX[ۏ[]` (there are some non-printing chars that dont show up in there). something forgot to escape input. could have been part of the custom code, or a library with a known exploit. as a temporary patch, see: http://blog.eukhost.com/webhosting/dangerous-php-functions-must-be-disabled/ you might also want to disable curl, sockets and streams unless theyre being used. edit: and/or chroot the server.
&gt;Custom proprietary CMS are almost never a good idea. There is no such thing as security through obscurity. I almost guarantee there's a bug in there somewhere that someone exploited. Tell me about it... this thing is a convoluted piece of crap and I want to rip my hair out whenever I have to figure out what went wrong when something breaks. On top of that, the security concern is ridiculous. Luckily, I just got the contract to replace the codebase, but since I have never seen this particular exploit before, I want to do what I can to remove the possibility of it happening in the new environment too.
if you can step through it with xdebug and pass it the exact call that was used for the exploit. that will hopefully produce a fix pretty quickly, since you can watch the code execute and figure out exactly where it's sending the input and what it's doing with it.
Odds are it's very specific to the CMS itself. I've seen similar bugs before. The backdoor they uploaded is pretty common actually, just in various forms. It's unlikely to be something with the VPS or with PHP itself, but it wouldn't hurt to make sure you do any updates that you can just in case. A quick and dirty fix would be to make the folder that file got uploaded into read-only by the web user if at all possible. Depending on the exploit they could slide the file into other folders though. Make sure you get rid of the back door and do a thorough check for any other files that might have been uploaded or changed around the same time. Hacks like this will often have a backup script that they can use to reinsert the back door if it gets found.
I used to use Crimson Editor and then finally switched over to Notepad++. Since everyone seems to have switched over to Sublime from Notepad++, can you persuade me to make the switch too? What makes it so much better of a text editor than Notepad++? Is it mainly the plugins?
&gt; I just don't agree that this is a good thing to do. This isn't a matter of practice. This is a matter of correctness in describing what's wrong. His use of is_* for verification is correct, for validation it would be incorrect. That isn't the same thing.
Depending on your DB structure, there's a few ways you could accomplish it. Here's one quick and dirty solution: SELECT *, DATE_FORMAT(`date`, '%Y-%m-%d %H:00:00') AS `nearest_hour` FROM `posts` ORDER BY `nearest_hour` DESC, likes DESC This takes the DATETIME column for your post and essentially removes the minutes and seconds. You can then order by this "date", grouping posts by the hour they were posted in. The downside with this is that you can make a post at 11:59 and the next at 12:00, and they will be considered separate hours. It really depends on how your data is structured, how many results you're querying (and maybe what other WHERE clauses you have -- if you're only pulling the posts from the last X hours/days, you can fine tune your groups better than by the hour number), how exactly you want to group posts to define their "weight", etc.
Awesome! I will probably get in touch with you. Thanks!
I have one, `req()`, for get/post/request and one `env()` for server/env/getenv. I also have a generic `v()` like the OPs `v_isset`. all just to "return this value/key if it is set, otherwise return null/$default"
As someone who considers himself pretty well-versed in PHP, this made me go *wtf?*. I get it, and it is faster and "cleaner", but it couldn't hurt to slap a comment in there or something explaining the style choice. Especially if the code will be shared in any way.
That software is horrible. I had a client that used it and ultimately gave up on it. Horrible customer service too from what I hear.
Correct me if I'm wrong but does Yii not work backwards from your database - building models based on your schema?
IDE's are not your enemy. Even if you become dependent on them, just ensure that you're becoming dependent on the right one. You already have Notepad++, so I really suggest that you give Notepad2 a try (much better IMO than notepad++). Also, give Sublime Text 2 a try, it's not an IDE (neither is notepad2) but they're simple editors with ease of use in mind. Sublime comes with many different features stock that you'd love to see in a lot of paid IDE's now. However, if you're looking for the whole show, then go with Zend PHP. (or PHP Eclipse). You can't get much better than enterprise.
http://blog.jetbrains.com/webide/tag/eap/ They have been pretty consistent with the EAP releases. I purchased a 12-12-2012 license for just 25 $ or so, still haven't had the chance to use it. Tip: bind Ctrl + Backspace to Navigate cursor back, so you can Alt Click stuff to "go to source", and immediately return. Key mapping is awesome.
There's a 'gii' module provided out of the box, which can create models, controllers and whole crud in few clicks. I like Yii a lot, it has more smaller or bigger things that FuelPHP, for example, misses. But the downside of Yii for me (which I understood after using Fuel) is that it's not using namespaces and it's autoloading is based on include_path. Though it looks simple, you can run into problems with that. Fortunately these will change in Yii2.
By functionality - maybe similar. Not by code
[quote]You can't rely on REMOTE_ADDR being true... it could be the wrong address due to anonymising proxies or some such trick. You can rely on it always being an IP address, so SQL injection by this path is impossible. Way down at the bottom of the stack, that's been converted from the source address on the packets making the TCP connection to your server. That means a) it has to be an IP address and b) it has to route back to the client for the connection to happen at all.[/quote]
Thanks for the info. I had heard bits about it but never seemed to fit into my work process. I look forward to seeing what Yii2 has to offer though.
&gt;Well, not just dumbphones can benefit, it's probably also much easier to navigate with a screen reader, or using lynx or some other console browser. You mean to tell me that the normal websites you build can't do that? &gt;I think by degrading gracefully it should always be possible to write ONE site and have it work at least to a usable extent in everything, even without any javascript or css It is. That's how the websites we built work. &gt;but for most devs that's harder to do than just coding a separate wap/dialup/screenreader/etc version. I don't agree, nor do I think that's how our vision of the web should look like. &gt;If you start off writing a web app to use a bunch of js libs and fancy css, chances are it will not degrade gracefully. Indeed, which is why you should build your websites with progressive enhancement. However, that might not always be applicable, for instance if your business logic has a javascript dependancy, e.g. if it is a javascript paint app. But in most cases, progessive enhancement is the way to go. &gt;But it takes twice as long at least to build it from the bottom up. Heh. No, it doesn't. &gt;The "semantic web" trend has pretty much fizzled out and nobody implements wai-aria unless they have to. I do.
I tried fpdf 2 or 3 years ago for nearly the same ckeditor -&gt; pdf generation. I found, that it had mainly problems with tables therefore i searched for an alternative. mpdf seemed good at first, but has it's own bugs too (mostly when using advanced css). As I have found, there is no sane, free pdf library in php. (for example mpdf is a single 1mb php file - wtf). I ended using wkhtmltopdf, which is quite good (100% pdf=html) and only has minimal shortcomings (no javascript, forms, and unpatched no a-links, slightly worse image quality) but has the disadvantage, that you need to be able to install it (so you should ask the admin or use a vserver)
No I think you misunderstood me. A pdf could contain forms which you should be able to submit too - and this part didn't work. But best is to test it out on your own - since already some time passed since I worked with wkhtmltopdf. Also testing is quite easy because you can run it on commandline :)
Does the PDF not generate or produce an error?
I wish Laravels ORM Relations would be as easy to use as FuelPHP.
The string you pass to WriteHTML is not going to be interpreted for PHP code/variables. You should concatenate the value before it goes in like: `WriteHTML('Answer: '.$sum.'.')`
Modern code should pass every parameter through variable binding, whether or not you expect it to be SQL-safe. Even if you're not validating the values, bindings will at least prevent SQL injection.
I've used MPDF, based on FPDF. It's not perfect but it's the best PHP-based solution I have used so far. I was using it within Yii but this way works great with most frameworks as long as your PDF output is fairly standard: * Controller takes input/commands from the request to decide what to render * Controller calls Model to fetch dynamic data to be rendered in PDF * Controller does a partial render of a standard HTML view of the data retrieved from the model * Controller collects rendered view from the buffer as a string of HTML, calls MPDF to render as a PDF the page with some additional settings (page numbering, etc) * MPDF renders HTML-coded page as PDF and sends it to browser OR the created PDF gets put to a file then uploaded to Amazon S3. The code of MPDF itself isn't the prettiest, but it functions as a black box API and there is documentation online: http://mpdf1.com/ 
17 years ago&amp;mdash;when I began developing for the web&amp;mdash;PHP didn't exist. I didn't know how much I missed it. Once I started using PHP/FI I quickly abandoned Perl. But I still wrote all of my code by hand (yeah, I'm old-school in that way). I used BBEdit. And so it went for over a decade. Back in 2010 a programming friend asked me if I'd used JetBrains. Once I saw it I immediately downloaded and made it my IDE. Make no mistake: PhpStorm is outstanding. You can customize it and really save a lot of time in developing. Take it from an old man. :)
I have used pdflib, tcpdf, fpdf, tfpdf, wkhtmltopdf. My current PDF tool of choice is tfpdf + fpdi.
We've been using TCPDF for about three years now. Really great PDF framework.
I remebered http://blog.ircmaxell.com/2012/11/anatomy-of-attack-how-i-hacked.html when I've read your question.. so please escape it or normalize it
I'm using [TFPDF](http://fpdf.org/en/script/script92.php) (since years) and everything is fine. Thousands of documents generated - Works also with UTF-8...
You can typecast the variable as a string $pdf-&gt;WriteHTML((string)$sum); 
Everything always has vulnerabilities, they're just hiding.
In a standard setup, no. In a badly done load-balancing setup, yes. Webserver modules like nginx's [HttpRealipModule](http://wiki.nginx.org/HttpRealIpModule) can cause REMOTE_ADDR to become an arbitrary value if accidentally enabled with too much trust. Symfony's HttpFoundation class includes a similar feature if you choose to enable it.
This guy has an [excellent library](http://mikehaertl.github.com/phpwkhtmltopdf/) for this that makes using wkhtmltopdf dead simple.
It looks like you're using http://www.fpdf.org/en/tutorial/tuto6.htm as a basis. The code in the tutorial defines a new class that inherits from the FPDF class while extending it with methods to translate HTML. Three main things: - In your code the main error is the line: `class PDF extends FPDF`. That should be followed by an open bracket and the "WriteHTML" method should be within the class definition. - The second error is that you will need to include all of the other methods provided in the tutorial. It doesn't look like you've modified `WriteHTML` anyway, so you might as well use the entire class as defined. - The third thing is that you need to call WriteHTML as a method of your new PDF object. So change `WriteHTML(...)` to `$pdf-&gt;WriteHTML(...)`. All you need to do is setup the page and add your HTML: &lt;?php require('fpdf.php'); class PDF extends FPDF { // copy everything inside the class in tuto6.htm } $sum = 1 + 2; $pdf = new PDF(); $pdf-&gt;AddPage(); $pdf-&gt;SetFont('Arial','B',16); $pdf-&gt;WriteHTML('Answer: '.$sum.'.') $pdf-&gt;Output(); ?&gt;
...and worth every penny
I've never used xdebug, so thanks for the tip on that. I can see this being very useful.
a set of default keys and array_diff_key, is exactly what I use. you could also use `array_intersect`, or even `array_keys($a1) === $a2` &lt;-- where a2 is an array of keys you want I just thought of using array keys like that, It's never occurred to me before. A quick test shows that it works: var_dump(array_keys(array('name' =&gt; 'joe', 'age' =&gt; 50)) === array('name', 'age')); // -&gt; true or you can discard junk data: $received = array('age' =&gt; 35, 'spam' =&gt; 'junk'); $defaults = array('name' =&gt; 'anonymous', 'age' =&gt; '0'); var_dump(array_intersect_key($received, $defaults) + $defaults); // -&gt; array('age' =&gt; 35, 'name' =&gt; 'anonymous'); This one's good if you're inserting data into a database and `PDOStatement::exec` is going to give you an error if you give it an array with extra keys.
Seriously though, which one of these books are still relevant?
You may want to try http://php.net/manual/en/function.array-filter.php edit: This looks a bit nicer, i had to make sure the valid array elements had values though, not sure how to get around that. $data = ['key' =&gt; 100, 'other_key' =&gt; 400, 'yet_another' =&gt; 500, 'baz' =&gt; 0, 'foo' =&gt; 0, 'bar' =&gt; 40]; $valid = array_intersect_key($data,['key' =&gt; true, 'other_key' =&gt; true]); print_r($valid); Array ( [key] =&gt; 100 [other_key] =&gt; 400 )
Although PHP has evolved so much over the past 5 years, the basics are still the same. Because of that, beginners and intermediates can probably skim through and pick up some good tips, advanced users will probably scoff.
When we receive json data we convert it to an array and then need to check the data, not just if an array key exists, but if the numeric data is numeric, strings are not above a certain length and so on. We created a validation array checker similar to codeigniters form validation. I do not have our code on this laptop but it would be similar to something along the lines of. $arrayValidation = new ArrayValidation(array('key1' =&gt; 'test')); $arrayValidation-&gt;setRules('key1', 'trim|required|min_length[5]|max_length[12]'); if ($arrayValidation-&gt;run() === false) { //bad!!!!! } else { //good :) } We based our idea on http://ellislab.com/codeigniter/user-guide/libraries/form_validation.html
Both are quite possible to create dynamic PDFs from user generated content.
Hey, I've used fpdf.. I can say its quite easy once you figure out how things work, make sure your paths are correct with fonts, images, anything your including into the content.. If there is an error fpdf quits..
Where is the data coming from? What is the data for? These may not seem like important questions, but the answers may indicate other ways to approach the problem. The issue with abstract questions like this is that it's often a sign of someone is trying to simplify a more complex issue. Programmers work better when they have as much information to work with as possible. Sometimes the problem is how you're building your structures. PHP is very poor at searching sets, so it pays to try to keep any sets you do need to manipulate in php as small as possible. If the set is very small then the approach you take to searching the set often doesn't matter as long as the exhibited behavior is desirable.
You're the first person that I have ever seen say that. Laravel's ORM is of a magnitude better. What specifically about relations don't you like in Laravel's ORM?
TCPDF is generally a lot better to work with, so have an upvote and a further recommendation for it. You just have to remember to keep any HTML passed to it very valid and very basic. The docs kinda suck for telling you the specific limitations, but if you follow the (very good) example guides on TCPDF, you can basically get what you need.
If you're attempting to embed a PDF into the body of a page using these libraries, that's not possible. It needs to be generated with its own content headers, either for viewing in the browser or being downloaded. To pass dynamic values to it, have a class/script file that does the compilation work for the PDF and pass to it via POST the content that you require. The function for generating the PDF is completely PHP, so you can pass arrays and iterate through them for structured content, etc. Then, after you've 'written' your PDF file in this class, you can output it to the user to either view immediately or to download as a .pdf. Or, you can save it to your server, but you don't seem to require that. 
"I never liked Wordpress, Joomla, Drupal or any other CMS because the code seems like their own vision of things instead of MVC and other stablished patterns and code guidelines." A major reason for this is probably because they all predate PHP being able to do any of that properly. Wordpress, *especially* is shackled with the need for backwards compatibility and legacy support because of its massive plugin base that the core code is an unstandardised mess of vaguely named global variables. At some point, one of those 'small community CMS' is going to be the one that takes off and do for a standards based, MVC CMS what Wordpress did for the market in the first place. If they're open source, why not contibute to them until such point as when the well dries up - and then fork it off to continue it yourself? Personally, at work we just use a custom CMS for internal and customer use. It's based on codeigniter, but isn't exactly a modern PHP marvel of namespacing et al. I think the 'transitional' stage of PHP is going to be one that goes on for some time. It's taken this long to get a strong sense of MVC architecture in general, smart stuff like namespacing and active record DB abstraction is a while off being a recurring feature on most websites.
Arguably, SublimeText2 is far more an IDE than Notepad++ or Dreamweaver. It's also a lot more productive than either, and a lot lighter and faster than all of the java IDEs ('cos, y'know, *java*). I've only started using it recently, but it's already made me far more productive than Eclipse or its ilk has ever made me. The singular thing I feel it's missing is being able to click on a function name to go straight to its definition (but quick search is a good enough analogue). 
Keep your eye on pyrocms 3.0. It will address many of these needs, and will likely have ready adoption once it's finished.
Are you doing something along the lines of $pdf-&gt;writeHTML($_POST['data']." -data"); ? If so, it may be the array it's having trouble with. If you're dealing with single values, build them into plain PHP variables at the start of the script, if you're dealing with arrays, iterate through them instead of using the keys manually. If you can, at the start of the page, print_r() the $_POST data, kill the script and see an array of the expected data, then you are definitely getting your data where you want it to go - you're just having trouble getting the PDF library to not choke on it. 
You can do that with ctags and the ctags plugin
I'm a big fan of ApostropheNow.com, but it's sf 1.4, which is actually fine as it's still going to be getting security updates but not updates for new features or new PHP versions. The next version of Apostrophe will be in Node, which is interesting but clearly not PHP. ezPublish 5 looks impressive and is the next on my list to go over. It has some very interesting &amp; innovative plugins tailored to enterprise CMS, and probably fits into Application dev better than most CMS's because it's a Content API with interfaces for web &amp; mobile. At least from my very early research. Take a look at the mobile application plugin, it's impressive. http://bolt.cm/ is one I just heard about and is based on Silex, the symfony micro framework and twig the symfony templating language. For less complex and/or high availability I'd be tempted to look at that. I agree with CharmedDesigns about CMS's that predate the latest versions of PHP 5. I would also add that it's tough to make a choice as a working dev to gain in depth knowledge of one or two CMS's or pick the right CMS for the job, which is tough unless you really know it. 
You should escape `127.0.0.1'; drop table users --`. That's within the realm of possibilities when your setup causes the IP to be just another value provided by the user (which is exactly the problem that the blog is talking about).
Pretty sure Twig is in there.
PyroCMS is being ported to Laravel. Assuming all goes as planned, it will answer all your needs, and more. In the meantime, I do suggest trying PyroCMS even at 2.2. It's fan-fucking-tastic.